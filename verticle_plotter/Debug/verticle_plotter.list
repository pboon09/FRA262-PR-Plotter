
verticle_plotter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014620  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000630  080147f8  080147f8  000157f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014e28  08014e28  00016394  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08014e28  08014e28  00015e28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014e30  08014e30  00016394  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014e30  08014e30  00015e30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08014e34  08014e34  00015e34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000394  20000000  08014e38  00016000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002238  20000394  080151cc  00016394  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200025cc  080151cc  000165cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00016394  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c82b  00000000  00000000  000163c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000055d5  00000000  00000000  00042bef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d10  00000000  00000000  000481c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000016c7  00000000  00000000  00049ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002db96  00000000  00000000  0004b59f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002beec  00000000  00000000  00079135  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011a341  00000000  00000000  000a5021  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001bf362  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000084c0  00000000  00000000  001bf3a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  001c7868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000394 	.word	0x20000394
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080147e0 	.word	0x080147e0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000398 	.word	0x20000398
 8000214:	080147e0 	.word	0x080147e0

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2iz>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000acc:	d215      	bcs.n	8000afa <__aeabi_d2iz+0x36>
 8000ace:	d511      	bpl.n	8000af4 <__aeabi_d2iz+0x30>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d912      	bls.n	8000b00 <__aeabi_d2iz+0x3c>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d105      	bne.n	8000b0c <__aeabi_d2iz+0x48>
 8000b00:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b04:	bf08      	it	eq
 8000b06:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_d2uiz>:
 8000b14:	004a      	lsls	r2, r1, #1
 8000b16:	d211      	bcs.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b18:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b1c:	d211      	bcs.n	8000b42 <__aeabi_d2uiz+0x2e>
 8000b1e:	d50d      	bpl.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b20:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b24:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b28:	d40e      	bmi.n	8000b48 <__aeabi_d2uiz+0x34>
 8000b2a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b32:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	4770      	bx	lr
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b46:	d102      	bne.n	8000b4e <__aeabi_d2uiz+0x3a>
 8000b48:	f04f 30ff 	mov.w	r0, #4294967295
 8000b4c:	4770      	bx	lr
 8000b4e:	f04f 0000 	mov.w	r0, #0
 8000b52:	4770      	bx	lr

08000b54 <__aeabi_d2f>:
 8000b54:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b58:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b5c:	bf24      	itt	cs
 8000b5e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b62:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b66:	d90d      	bls.n	8000b84 <__aeabi_d2f+0x30>
 8000b68:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b6c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b70:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b74:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b78:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b7c:	bf08      	it	eq
 8000b7e:	f020 0001 	biceq.w	r0, r0, #1
 8000b82:	4770      	bx	lr
 8000b84:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b88:	d121      	bne.n	8000bce <__aeabi_d2f+0x7a>
 8000b8a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b8e:	bfbc      	itt	lt
 8000b90:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b94:	4770      	bxlt	lr
 8000b96:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b9a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b9e:	f1c2 0218 	rsb	r2, r2, #24
 8000ba2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ba6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000baa:	fa20 f002 	lsr.w	r0, r0, r2
 8000bae:	bf18      	it	ne
 8000bb0:	f040 0001 	orrne.w	r0, r0, #1
 8000bb4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bbc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc0:	ea40 000c 	orr.w	r0, r0, ip
 8000bc4:	fa23 f302 	lsr.w	r3, r3, r2
 8000bc8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bcc:	e7cc      	b.n	8000b68 <__aeabi_d2f+0x14>
 8000bce:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd2:	d107      	bne.n	8000be4 <__aeabi_d2f+0x90>
 8000bd4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bd8:	bf1e      	ittt	ne
 8000bda:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bde:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000be2:	4770      	bxne	lr
 8000be4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bec:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop

08000bf4 <__aeabi_uldivmod>:
 8000bf4:	b953      	cbnz	r3, 8000c0c <__aeabi_uldivmod+0x18>
 8000bf6:	b94a      	cbnz	r2, 8000c0c <__aeabi_uldivmod+0x18>
 8000bf8:	2900      	cmp	r1, #0
 8000bfa:	bf08      	it	eq
 8000bfc:	2800      	cmpeq	r0, #0
 8000bfe:	bf1c      	itt	ne
 8000c00:	f04f 31ff 	movne.w	r1, #4294967295
 8000c04:	f04f 30ff 	movne.w	r0, #4294967295
 8000c08:	f000 b988 	b.w	8000f1c <__aeabi_idiv0>
 8000c0c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c10:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c14:	f000 f806 	bl	8000c24 <__udivmoddi4>
 8000c18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c20:	b004      	add	sp, #16
 8000c22:	4770      	bx	lr

08000c24 <__udivmoddi4>:
 8000c24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c28:	9d08      	ldr	r5, [sp, #32]
 8000c2a:	468e      	mov	lr, r1
 8000c2c:	4604      	mov	r4, r0
 8000c2e:	4688      	mov	r8, r1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d14a      	bne.n	8000cca <__udivmoddi4+0xa6>
 8000c34:	428a      	cmp	r2, r1
 8000c36:	4617      	mov	r7, r2
 8000c38:	d962      	bls.n	8000d00 <__udivmoddi4+0xdc>
 8000c3a:	fab2 f682 	clz	r6, r2
 8000c3e:	b14e      	cbz	r6, 8000c54 <__udivmoddi4+0x30>
 8000c40:	f1c6 0320 	rsb	r3, r6, #32
 8000c44:	fa01 f806 	lsl.w	r8, r1, r6
 8000c48:	fa20 f303 	lsr.w	r3, r0, r3
 8000c4c:	40b7      	lsls	r7, r6
 8000c4e:	ea43 0808 	orr.w	r8, r3, r8
 8000c52:	40b4      	lsls	r4, r6
 8000c54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c58:	fa1f fc87 	uxth.w	ip, r7
 8000c5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c60:	0c23      	lsrs	r3, r4, #16
 8000c62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000c6e:	429a      	cmp	r2, r3
 8000c70:	d909      	bls.n	8000c86 <__udivmoddi4+0x62>
 8000c72:	18fb      	adds	r3, r7, r3
 8000c74:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c78:	f080 80ea 	bcs.w	8000e50 <__udivmoddi4+0x22c>
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	f240 80e7 	bls.w	8000e50 <__udivmoddi4+0x22c>
 8000c82:	3902      	subs	r1, #2
 8000c84:	443b      	add	r3, r7
 8000c86:	1a9a      	subs	r2, r3, r2
 8000c88:	b2a3      	uxth	r3, r4
 8000c8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c9a:	459c      	cmp	ip, r3
 8000c9c:	d909      	bls.n	8000cb2 <__udivmoddi4+0x8e>
 8000c9e:	18fb      	adds	r3, r7, r3
 8000ca0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ca4:	f080 80d6 	bcs.w	8000e54 <__udivmoddi4+0x230>
 8000ca8:	459c      	cmp	ip, r3
 8000caa:	f240 80d3 	bls.w	8000e54 <__udivmoddi4+0x230>
 8000cae:	443b      	add	r3, r7
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cb6:	eba3 030c 	sub.w	r3, r3, ip
 8000cba:	2100      	movs	r1, #0
 8000cbc:	b11d      	cbz	r5, 8000cc6 <__udivmoddi4+0xa2>
 8000cbe:	40f3      	lsrs	r3, r6
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	428b      	cmp	r3, r1
 8000ccc:	d905      	bls.n	8000cda <__udivmoddi4+0xb6>
 8000cce:	b10d      	cbz	r5, 8000cd4 <__udivmoddi4+0xb0>
 8000cd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	4608      	mov	r0, r1
 8000cd8:	e7f5      	b.n	8000cc6 <__udivmoddi4+0xa2>
 8000cda:	fab3 f183 	clz	r1, r3
 8000cde:	2900      	cmp	r1, #0
 8000ce0:	d146      	bne.n	8000d70 <__udivmoddi4+0x14c>
 8000ce2:	4573      	cmp	r3, lr
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xc8>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 8105 	bhi.w	8000ef6 <__udivmoddi4+0x2d2>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	4690      	mov	r8, r2
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e5      	beq.n	8000cc6 <__udivmoddi4+0xa2>
 8000cfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000cfe:	e7e2      	b.n	8000cc6 <__udivmoddi4+0xa2>
 8000d00:	2a00      	cmp	r2, #0
 8000d02:	f000 8090 	beq.w	8000e26 <__udivmoddi4+0x202>
 8000d06:	fab2 f682 	clz	r6, r2
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	f040 80a4 	bne.w	8000e58 <__udivmoddi4+0x234>
 8000d10:	1a8a      	subs	r2, r1, r2
 8000d12:	0c03      	lsrs	r3, r0, #16
 8000d14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d18:	b280      	uxth	r0, r0
 8000d1a:	b2bc      	uxth	r4, r7
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	d907      	bls.n	8000d42 <__udivmoddi4+0x11e>
 8000d32:	18fb      	adds	r3, r7, r3
 8000d34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d38:	d202      	bcs.n	8000d40 <__udivmoddi4+0x11c>
 8000d3a:	429a      	cmp	r2, r3
 8000d3c:	f200 80e0 	bhi.w	8000f00 <__udivmoddi4+0x2dc>
 8000d40:	46c4      	mov	ip, r8
 8000d42:	1a9b      	subs	r3, r3, r2
 8000d44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d50:	fb02 f404 	mul.w	r4, r2, r4
 8000d54:	429c      	cmp	r4, r3
 8000d56:	d907      	bls.n	8000d68 <__udivmoddi4+0x144>
 8000d58:	18fb      	adds	r3, r7, r3
 8000d5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d5e:	d202      	bcs.n	8000d66 <__udivmoddi4+0x142>
 8000d60:	429c      	cmp	r4, r3
 8000d62:	f200 80ca 	bhi.w	8000efa <__udivmoddi4+0x2d6>
 8000d66:	4602      	mov	r2, r0
 8000d68:	1b1b      	subs	r3, r3, r4
 8000d6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d6e:	e7a5      	b.n	8000cbc <__udivmoddi4+0x98>
 8000d70:	f1c1 0620 	rsb	r6, r1, #32
 8000d74:	408b      	lsls	r3, r1
 8000d76:	fa22 f706 	lsr.w	r7, r2, r6
 8000d7a:	431f      	orrs	r7, r3
 8000d7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000d80:	fa20 f306 	lsr.w	r3, r0, r6
 8000d84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d8c:	4323      	orrs	r3, r4
 8000d8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000d92:	fa1f fc87 	uxth.w	ip, r7
 8000d96:	fbbe f0f9 	udiv	r0, lr, r9
 8000d9a:	0c1c      	lsrs	r4, r3, #16
 8000d9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000da0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000da4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000da8:	45a6      	cmp	lr, r4
 8000daa:	fa02 f201 	lsl.w	r2, r2, r1
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x1a0>
 8000db0:	193c      	adds	r4, r7, r4
 8000db2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000db6:	f080 809c 	bcs.w	8000ef2 <__udivmoddi4+0x2ce>
 8000dba:	45a6      	cmp	lr, r4
 8000dbc:	f240 8099 	bls.w	8000ef2 <__udivmoddi4+0x2ce>
 8000dc0:	3802      	subs	r0, #2
 8000dc2:	443c      	add	r4, r7
 8000dc4:	eba4 040e 	sub.w	r4, r4, lr
 8000dc8:	fa1f fe83 	uxth.w	lr, r3
 8000dcc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dd0:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dd8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ddc:	45a4      	cmp	ip, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x1ce>
 8000de0:	193c      	adds	r4, r7, r4
 8000de2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000de6:	f080 8082 	bcs.w	8000eee <__udivmoddi4+0x2ca>
 8000dea:	45a4      	cmp	ip, r4
 8000dec:	d97f      	bls.n	8000eee <__udivmoddi4+0x2ca>
 8000dee:	3b02      	subs	r3, #2
 8000df0:	443c      	add	r4, r7
 8000df2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000df6:	eba4 040c 	sub.w	r4, r4, ip
 8000dfa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000dfe:	4564      	cmp	r4, ip
 8000e00:	4673      	mov	r3, lr
 8000e02:	46e1      	mov	r9, ip
 8000e04:	d362      	bcc.n	8000ecc <__udivmoddi4+0x2a8>
 8000e06:	d05f      	beq.n	8000ec8 <__udivmoddi4+0x2a4>
 8000e08:	b15d      	cbz	r5, 8000e22 <__udivmoddi4+0x1fe>
 8000e0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000e0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000e12:	fa04 f606 	lsl.w	r6, r4, r6
 8000e16:	fa22 f301 	lsr.w	r3, r2, r1
 8000e1a:	431e      	orrs	r6, r3
 8000e1c:	40cc      	lsrs	r4, r1
 8000e1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000e22:	2100      	movs	r1, #0
 8000e24:	e74f      	b.n	8000cc6 <__udivmoddi4+0xa2>
 8000e26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e2a:	0c01      	lsrs	r1, r0, #16
 8000e2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e30:	b280      	uxth	r0, r0
 8000e32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e36:	463b      	mov	r3, r7
 8000e38:	4638      	mov	r0, r7
 8000e3a:	463c      	mov	r4, r7
 8000e3c:	46b8      	mov	r8, r7
 8000e3e:	46be      	mov	lr, r7
 8000e40:	2620      	movs	r6, #32
 8000e42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e46:	eba2 0208 	sub.w	r2, r2, r8
 8000e4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e4e:	e766      	b.n	8000d1e <__udivmoddi4+0xfa>
 8000e50:	4601      	mov	r1, r0
 8000e52:	e718      	b.n	8000c86 <__udivmoddi4+0x62>
 8000e54:	4610      	mov	r0, r2
 8000e56:	e72c      	b.n	8000cb2 <__udivmoddi4+0x8e>
 8000e58:	f1c6 0220 	rsb	r2, r6, #32
 8000e5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000e60:	40b7      	lsls	r7, r6
 8000e62:	40b1      	lsls	r1, r6
 8000e64:	fa20 f202 	lsr.w	r2, r0, r2
 8000e68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e6c:	430a      	orrs	r2, r1
 8000e6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e72:	b2bc      	uxth	r4, r7
 8000e74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e78:	0c11      	lsrs	r1, r2, #16
 8000e7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e7e:	fb08 f904 	mul.w	r9, r8, r4
 8000e82:	40b0      	lsls	r0, r6
 8000e84:	4589      	cmp	r9, r1
 8000e86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e8a:	b280      	uxth	r0, r0
 8000e8c:	d93e      	bls.n	8000f0c <__udivmoddi4+0x2e8>
 8000e8e:	1879      	adds	r1, r7, r1
 8000e90:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e94:	d201      	bcs.n	8000e9a <__udivmoddi4+0x276>
 8000e96:	4589      	cmp	r9, r1
 8000e98:	d81f      	bhi.n	8000eda <__udivmoddi4+0x2b6>
 8000e9a:	eba1 0109 	sub.w	r1, r1, r9
 8000e9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ea2:	fb09 f804 	mul.w	r8, r9, r4
 8000ea6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eaa:	b292      	uxth	r2, r2
 8000eac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000eb0:	4542      	cmp	r2, r8
 8000eb2:	d229      	bcs.n	8000f08 <__udivmoddi4+0x2e4>
 8000eb4:	18ba      	adds	r2, r7, r2
 8000eb6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000eba:	d2c4      	bcs.n	8000e46 <__udivmoddi4+0x222>
 8000ebc:	4542      	cmp	r2, r8
 8000ebe:	d2c2      	bcs.n	8000e46 <__udivmoddi4+0x222>
 8000ec0:	f1a9 0102 	sub.w	r1, r9, #2
 8000ec4:	443a      	add	r2, r7
 8000ec6:	e7be      	b.n	8000e46 <__udivmoddi4+0x222>
 8000ec8:	45f0      	cmp	r8, lr
 8000eca:	d29d      	bcs.n	8000e08 <__udivmoddi4+0x1e4>
 8000ecc:	ebbe 0302 	subs.w	r3, lr, r2
 8000ed0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	46e1      	mov	r9, ip
 8000ed8:	e796      	b.n	8000e08 <__udivmoddi4+0x1e4>
 8000eda:	eba7 0909 	sub.w	r9, r7, r9
 8000ede:	4449      	add	r1, r9
 8000ee0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ee4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ee8:	fb09 f804 	mul.w	r8, r9, r4
 8000eec:	e7db      	b.n	8000ea6 <__udivmoddi4+0x282>
 8000eee:	4673      	mov	r3, lr
 8000ef0:	e77f      	b.n	8000df2 <__udivmoddi4+0x1ce>
 8000ef2:	4650      	mov	r0, sl
 8000ef4:	e766      	b.n	8000dc4 <__udivmoddi4+0x1a0>
 8000ef6:	4608      	mov	r0, r1
 8000ef8:	e6fd      	b.n	8000cf6 <__udivmoddi4+0xd2>
 8000efa:	443b      	add	r3, r7
 8000efc:	3a02      	subs	r2, #2
 8000efe:	e733      	b.n	8000d68 <__udivmoddi4+0x144>
 8000f00:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f04:	443b      	add	r3, r7
 8000f06:	e71c      	b.n	8000d42 <__udivmoddi4+0x11e>
 8000f08:	4649      	mov	r1, r9
 8000f0a:	e79c      	b.n	8000e46 <__udivmoddi4+0x222>
 8000f0c:	eba1 0109 	sub.w	r1, r1, r9
 8000f10:	46c4      	mov	ip, r8
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fb09 f804 	mul.w	r8, r9, r4
 8000f1a:	e7c4      	b.n	8000ea6 <__udivmoddi4+0x282>

08000f1c <__aeabi_idiv0>:
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop

08000f20 <ADC_DMA_Init>:

#include "ADC_DMA.h"

void ADC_DMA_Init(ADC_DMA *adc_dma, ADC_HandleTypeDef *hadc,
                 uint16_t *buffer, uint32_t buffer_length,
                 uint8_t num_channels, float vref, float resolution) {
 8000f20:	b480      	push	{r7}
 8000f22:	b089      	sub	sp, #36	@ 0x24
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6178      	str	r0, [r7, #20]
 8000f28:	6139      	str	r1, [r7, #16]
 8000f2a:	60fa      	str	r2, [r7, #12]
 8000f2c:	60bb      	str	r3, [r7, #8]
 8000f2e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000f32:	edc7 0a00 	vstr	s1, [r7]

    adc_dma->hadc = hadc;
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	693a      	ldr	r2, [r7, #16]
 8000f3a:	601a      	str	r2, [r3, #0]
    adc_dma->dma_buffer = buffer;
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	68fa      	ldr	r2, [r7, #12]
 8000f40:	605a      	str	r2, [r3, #4]
    adc_dma->buffer_length = buffer_length;
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	68ba      	ldr	r2, [r7, #8]
 8000f46:	609a      	str	r2, [r3, #8]
    adc_dma->num_channels = num_channels;
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8000f4e:	731a      	strb	r2, [r3, #12]
    adc_dma->adc_vref = vref;
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	687a      	ldr	r2, [r7, #4]
 8000f54:	611a      	str	r2, [r3, #16]
    adc_dma->adc_resolution = resolution;
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	683a      	ldr	r2, [r7, #0]
 8000f5a:	615a      	str	r2, [r3, #20]

    // Default center point and error percentage
    adc_dma->center_point = resolution / 2.0f;  // Typically 2048 for 12-bit ADC
 8000f5c:	ed97 7a00 	vldr	s14, [r7]
 8000f60:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8000f64:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	edc3 7a06 	vstr	s15, [r3, #24]
    adc_dma->error_percentage = 5;              // 5% error by default
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	2205      	movs	r2, #5
 8000f72:	f883 2020 	strb.w	r2, [r3, #32]
    adc_dma->threshold = (adc_dma->error_percentage / 100.0f) * adc_dma->center_point;
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f7c:	ee07 3a90 	vmov	s15, r3
 8000f80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f84:	eddf 6a11 	vldr	s13, [pc, #68]	@ 8000fcc <ADC_DMA_Init+0xac>
 8000f88:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	edd3 7a06 	vldr	s15, [r3, #24]
 8000f92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	edc3 7a07 	vstr	s15, [r3, #28]

    // Initialize DMA buffer
    for (uint32_t i = 0; i < buffer_length; i++) {
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	61fb      	str	r3, [r7, #28]
 8000fa0:	e008      	b.n	8000fb4 <ADC_DMA_Init+0x94>
        buffer[i] = 0;
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	68fa      	ldr	r2, [r7, #12]
 8000fa8:	4413      	add	r3, r2
 8000faa:	2200      	movs	r2, #0
 8000fac:	801a      	strh	r2, [r3, #0]
    for (uint32_t i = 0; i < buffer_length; i++) {
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	61fb      	str	r3, [r7, #28]
 8000fb4:	69fa      	ldr	r2, [r7, #28]
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d3f2      	bcc.n	8000fa2 <ADC_DMA_Init+0x82>
    }
}
 8000fbc:	bf00      	nop
 8000fbe:	bf00      	nop
 8000fc0:	3724      	adds	r7, #36	@ 0x24
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	42c80000 	.word	0x42c80000

08000fd0 <ADC_DMA_Start>:

void ADC_DMA_Start(ADC_DMA *adc_dma) {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
    // Perform ADC calibration
    HAL_ADCEx_Calibration_Start(adc_dma->hadc, ADC_SINGLE_ENDED);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	217f      	movs	r1, #127	@ 0x7f
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f00a ff40 	bl	800be64 <HAL_ADCEx_Calibration_Start>

    // Start ADC with DMA
    HAL_ADC_Start_DMA(adc_dma->hadc, (uint32_t*)adc_dma->dma_buffer, adc_dma->buffer_length);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6818      	ldr	r0, [r3, #0]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6859      	ldr	r1, [r3, #4]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	f00a f829 	bl	800b048 <HAL_ADC_Start_DMA>
}
 8000ff6:	bf00      	nop
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
	...

08001000 <ADC_DMA_GetValue>:

void ADC_DMA_Stop(ADC_DMA *adc_dma) {
    HAL_ADC_Stop_DMA(adc_dma->hadc);
}

float ADC_DMA_GetValue(ADC_DMA *adc_dma, uint8_t channel_index) {
 8001000:	b480      	push	{r7}
 8001002:	b087      	sub	sp, #28
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	460b      	mov	r3, r1
 800100a:	70fb      	strb	r3, [r7, #3]
    uint32_t sum = 0;
 800100c:	2300      	movs	r3, #0
 800100e:	617b      	str	r3, [r7, #20]
    uint32_t samples = 0;
 8001010:	2300      	movs	r3, #0
 8001012:	613b      	str	r3, [r7, #16]

    // Average all samples for this channel
    for (uint32_t j = channel_index; j < adc_dma->buffer_length; j += adc_dma->num_channels) {
 8001014:	78fb      	ldrb	r3, [r7, #3]
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	e012      	b.n	8001040 <ADC_DMA_GetValue+0x40>
        sum += adc_dma->dma_buffer[j];
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	685a      	ldr	r2, [r3, #4]
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	4413      	add	r3, r2
 8001024:	881b      	ldrh	r3, [r3, #0]
 8001026:	461a      	mov	r2, r3
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	4413      	add	r3, r2
 800102c:	617b      	str	r3, [r7, #20]
        samples++;
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	3301      	adds	r3, #1
 8001032:	613b      	str	r3, [r7, #16]
    for (uint32_t j = channel_index; j < adc_dma->buffer_length; j += adc_dma->num_channels) {
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	7b1b      	ldrb	r3, [r3, #12]
 8001038:	461a      	mov	r2, r3
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	4413      	add	r3, r2
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	689b      	ldr	r3, [r3, #8]
 8001044:	68fa      	ldr	r2, [r7, #12]
 8001046:	429a      	cmp	r2, r3
 8001048:	d3e7      	bcc.n	800101a <ADC_DMA_GetValue+0x1a>
    }

    // Calculate raw ADC value
    if (samples > 0) {
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d00c      	beq.n	800106a <ADC_DMA_GetValue+0x6a>
        return (float)sum / samples;
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	ee07 3a90 	vmov	s15, r3
 8001056:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	ee07 3a90 	vmov	s15, r3
 8001060:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001064:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001068:	e001      	b.n	800106e <ADC_DMA_GetValue+0x6e>
    }

    return 0.0f;
 800106a:	eddf 6a05 	vldr	s13, [pc, #20]	@ 8001080 <ADC_DMA_GetValue+0x80>
}
 800106e:	eef0 7a66 	vmov.f32	s15, s13
 8001072:	eeb0 0a67 	vmov.f32	s0, s15
 8001076:	371c      	adds	r7, #28
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	00000000 	.word	0x00000000

08001084 <ADC_DMA_SetCenterPoint>:

void ADC_DMA_SetCenterPoint(ADC_DMA *adc_dma, float center_point, uint8_t error_percentage) {
 8001084:	b480      	push	{r7}
 8001086:	b085      	sub	sp, #20
 8001088:	af00      	add	r7, sp, #0
 800108a:	60f8      	str	r0, [r7, #12]
 800108c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001090:	460b      	mov	r3, r1
 8001092:	71fb      	strb	r3, [r7, #7]
    adc_dma->center_point = center_point;
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	68ba      	ldr	r2, [r7, #8]
 8001098:	619a      	str	r2, [r3, #24]
    adc_dma->error_percentage = error_percentage;
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	79fa      	ldrb	r2, [r7, #7]
 800109e:	f883 2020 	strb.w	r2, [r3, #32]
    // Update threshold
    adc_dma->threshold = (adc_dma->error_percentage / 100.0f) * adc_dma->center_point;
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010a8:	ee07 3a90 	vmov	s15, r3
 80010ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010b0:	eddf 6a08 	vldr	s13, [pc, #32]	@ 80010d4 <ADC_DMA_SetCenterPoint+0x50>
 80010b4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	edd3 7a06 	vldr	s15, [r3, #24]
 80010be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	edc3 7a07 	vstr	s15, [r3, #28]
}
 80010c8:	bf00      	nop
 80010ca:	3714      	adds	r7, #20
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	42c80000 	.word	0x42c80000

080010d8 <ADC_DMA_GetJoystickValue>:

float ADC_DMA_GetJoystickValue(ADC_DMA *adc_dma, uint8_t channel_index, float min_output, float max_output) {
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	60f8      	str	r0, [r7, #12]
 80010e0:	460b      	mov	r3, r1
 80010e2:	ed87 0a01 	vstr	s0, [r7, #4]
 80010e6:	edc7 0a00 	vstr	s1, [r7]
 80010ea:	72fb      	strb	r3, [r7, #11]
    // Get raw value
    float value = ADC_DMA_GetValue(adc_dma, channel_index);
 80010ec:	7afb      	ldrb	r3, [r7, #11]
 80010ee:	4619      	mov	r1, r3
 80010f0:	68f8      	ldr	r0, [r7, #12]
 80010f2:	f7ff ff85 	bl	8001000 <ADC_DMA_GetValue>
 80010f6:	ed87 0a05 	vstr	s0, [r7, #20]

    // Apply threshold (dead zone) as in XYAnalog
    if (fabsf(value - adc_dma->center_point) < adc_dma->threshold) {
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	edd3 7a06 	vldr	s15, [r3, #24]
 8001100:	ed97 7a05 	vldr	s14, [r7, #20]
 8001104:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001108:	eeb0 7ae7 	vabs.f32	s14, s15
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	edd3 7a07 	vldr	s15, [r3, #28]
 8001112:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800111a:	d502      	bpl.n	8001122 <ADC_DMA_GetJoystickValue+0x4a>
        value = adc_dma->center_point;
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	699b      	ldr	r3, [r3, #24]
 8001120:	617b      	str	r3, [r7, #20]
    }

    // Map to desired output range
    return mapf(value, 0.0f, adc_dma->adc_resolution, min_output, max_output);
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	edd3 7a05 	vldr	s15, [r3, #20]
 8001128:	ed97 2a00 	vldr	s4, [r7]
 800112c:	edd7 1a01 	vldr	s3, [r7, #4]
 8001130:	eeb0 1a67 	vmov.f32	s2, s15
 8001134:	eddf 0a06 	vldr	s1, [pc, #24]	@ 8001150 <ADC_DMA_GetJoystickValue+0x78>
 8001138:	ed97 0a05 	vldr	s0, [r7, #20]
 800113c:	f000 fe95 	bl	8001e6a <mapf>
 8001140:	eef0 7a40 	vmov.f32	s15, s0
}
 8001144:	eeb0 0a67 	vmov.f32	s0, s15
 8001148:	3718      	adds	r7, #24
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	00000000 	.word	0x00000000

08001154 <PWM_Satuation>:
 *  Created on: Apr 14, 2024
 *      Author: beamk
 */
#include "Controller.h"

int32_t PWM_Satuation(float _u, int32_t _upper_limit, int32_t _lower_limit) {
 8001154:	b480      	push	{r7}
 8001156:	b085      	sub	sp, #20
 8001158:	af00      	add	r7, sp, #0
 800115a:	ed87 0a03 	vstr	s0, [r7, #12]
 800115e:	60b8      	str	r0, [r7, #8]
 8001160:	6079      	str	r1, [r7, #4]
	if (_u > _upper_limit)
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	ee07 3a90 	vmov	s15, r3
 8001168:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800116c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001170:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001178:	dd01      	ble.n	800117e <PWM_Satuation+0x2a>
		return _upper_limit;
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	e013      	b.n	80011a6 <PWM_Satuation+0x52>
	else if (_u < _lower_limit)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	ee07 3a90 	vmov	s15, r3
 8001184:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001188:	ed97 7a03 	vldr	s14, [r7, #12]
 800118c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001194:	d501      	bpl.n	800119a <PWM_Satuation+0x46>
		return _lower_limit;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	e005      	b.n	80011a6 <PWM_Satuation+0x52>
	return (int32_t) _u;
 800119a:	edd7 7a03 	vldr	s15, [r7, #12]
 800119e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011a2:	ee17 3a90 	vmov	r3, s15
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3714      	adds	r7, #20
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr

080011b2 <PID_CONTROLLER_Init>:

void PID_CONTROLLER_Init(PID_CONTROLLER *controller, float _Kp, float _Ki,
		float _Kd, float _u_max) {
 80011b2:	b480      	push	{r7}
 80011b4:	b087      	sub	sp, #28
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6178      	str	r0, [r7, #20]
 80011ba:	ed87 0a04 	vstr	s0, [r7, #16]
 80011be:	edc7 0a03 	vstr	s1, [r7, #12]
 80011c2:	ed87 1a02 	vstr	s2, [r7, #8]
 80011c6:	edc7 1a01 	vstr	s3, [r7, #4]
	controller->Kp = _Kp;
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	601a      	str	r2, [r3, #0]
	controller->Ki = _Ki;
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	68fa      	ldr	r2, [r7, #12]
 80011d4:	605a      	str	r2, [r3, #4]
	controller->Kd = _Kd;
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	68ba      	ldr	r2, [r7, #8]
 80011da:	609a      	str	r2, [r3, #8]
	controller->prev_Kp = _Kp;
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	60da      	str	r2, [r3, #12]
	controller->prev_Ki = _Ki;
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	68fa      	ldr	r2, [r7, #12]
 80011e6:	611a      	str	r2, [r3, #16]
	controller->prev_Kd = _Kd;
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	68ba      	ldr	r2, [r7, #8]
 80011ec:	615a      	str	r2, [r3, #20]
	controller->u_max = _u_max;
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	619a      	str	r2, [r3, #24]
	controller->ek_1 = 0.0;
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	f04f 0200 	mov.w	r2, #0
 80011fa:	61da      	str	r2, [r3, #28]
	controller->ek_2 = 0.0;
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	f04f 0200 	mov.w	r2, #0
 8001202:	621a      	str	r2, [r3, #32]
	controller->u = 0.0;
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	f04f 0200 	mov.w	r2, #0
 800120a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800120c:	bf00      	nop
 800120e:	371c      	adds	r7, #28
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr

08001218 <PID_CONTROLLER_Compute>:

float PID_CONTROLLER_Compute(PID_CONTROLLER *controller, float ek) {
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	ed87 0a00 	vstr	s0, [r7]
	if (!((controller->u >= controller->u_max && ek > 0)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	edd3 7a06 	vldr	s15, [r3, #24]
 8001230:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001238:	bfac      	ite	ge
 800123a:	2301      	movge	r3, #1
 800123c:	2300      	movlt	r3, #0
 800123e:	b2db      	uxtb	r3, r3
 8001240:	f083 0301 	eor.w	r3, r3, #1
 8001244:	b2db      	uxtb	r3, r3
 8001246:	2b00      	cmp	r3, #0
 8001248:	d10e      	bne.n	8001268 <PID_CONTROLLER_Compute+0x50>
 800124a:	edd7 7a00 	vldr	s15, [r7]
 800124e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001256:	bfcc      	ite	gt
 8001258:	2301      	movgt	r3, #1
 800125a:	2300      	movle	r3, #0
 800125c:	b2db      	uxtb	r3, r3
 800125e:	f083 0301 	eor.w	r3, r3, #1
 8001262:	b2db      	uxtb	r3, r3
 8001264:	2b00      	cmp	r3, #0
 8001266:	d057      	beq.n	8001318 <PID_CONTROLLER_Compute+0x100>
			|| (controller->u <= -controller->u_max && ek < 0))) {
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	edd3 7a06 	vldr	s15, [r3, #24]
 8001274:	eef1 7a67 	vneg.f32	s15, s15
 8001278:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800127c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001280:	bf94      	ite	ls
 8001282:	2301      	movls	r3, #1
 8001284:	2300      	movhi	r3, #0
 8001286:	b2db      	uxtb	r3, r3
 8001288:	f083 0301 	eor.w	r3, r3, #1
 800128c:	b2db      	uxtb	r3, r3
	if (!((controller->u >= controller->u_max && ek > 0)
 800128e:	2b00      	cmp	r3, #0
 8001290:	d10e      	bne.n	80012b0 <PID_CONTROLLER_Compute+0x98>
			|| (controller->u <= -controller->u_max && ek < 0))) {
 8001292:	edd7 7a00 	vldr	s15, [r7]
 8001296:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800129a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800129e:	bf4c      	ite	mi
 80012a0:	2301      	movmi	r3, #1
 80012a2:	2300      	movpl	r3, #0
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	f083 0301 	eor.w	r3, r3, #1
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d033      	beq.n	8001318 <PID_CONTROLLER_Compute+0x100>
		controller->u += ((controller->Kp + controller->Ki + controller->Kd)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	edd3 6a00 	vldr	s13, [r3]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	edd3 7a01 	vldr	s15, [r3, #4]
 80012c2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	edd3 7a02 	vldr	s15, [r3, #8]
 80012cc:	ee76 6aa7 	vadd.f32	s13, s13, s15
				* ek)
 80012d0:	edd7 7a00 	vldr	s15, [r7]
 80012d4:	ee66 6aa7 	vmul.f32	s13, s13, s15
				- ((controller->Kp + (2 * controller->Kd)) * controller->ek_1)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	ed93 6a00 	vldr	s12, [r3]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	edd3 7a02 	vldr	s15, [r3, #8]
 80012e4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80012e8:	ee36 6a27 	vadd.f32	s12, s12, s15
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	edd3 7a07 	vldr	s15, [r3, #28]
 80012f2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80012f6:	ee76 6ae7 	vsub.f32	s13, s13, s15
				+ (controller->Kd * controller->ek_2);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	ed93 6a02 	vldr	s12, [r3, #8]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	edd3 7a08 	vldr	s15, [r3, #32]
 8001306:	ee66 7a27 	vmul.f32	s15, s12, s15
 800130a:	ee76 7aa7 	vadd.f32	s15, s13, s15
		controller->u += ((controller->Kp + controller->Ki + controller->Kd)
 800130e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	}
	controller->ek_2 = controller->ek_1;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	69da      	ldr	r2, [r3, #28]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	621a      	str	r2, [r3, #32]
	controller->ek_1 = ek;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	683a      	ldr	r2, [r7, #0]
 8001324:	61da      	str	r2, [r3, #28]
	return controller->u;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800132a:	ee07 3a90 	vmov	s15, r3
}
 800132e:	eeb0 0a67 	vmov.f32	s0, s15
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <PID_CONTROLLER_Reset>:

void PID_CONTROLLER_Reset(PID_CONTROLLER *controller) {
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
    controller->ek_1 = 0.0f;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	f04f 0200 	mov.w	r2, #0
 800134a:	61da      	str	r2, [r3, #28]
    controller->ek_2 = 0.0f;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	f04f 0200 	mov.w	r2, #0
 8001352:	621a      	str	r2, [r3, #32]
    controller->u = 0.0f;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	f04f 0200 	mov.w	r2, #0
 800135a:	625a      	str	r2, [r3, #36]	@ 0x24
    controller->prev_Kp = controller->Kp;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	60da      	str	r2, [r3, #12]
    controller->prev_Ki = controller->Ki;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	685a      	ldr	r2, [r3, #4]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	611a      	str	r2, [r3, #16]
    controller->prev_Kd = controller->Kd;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	689a      	ldr	r2, [r3, #8]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	615a      	str	r2, [r3, #20]
}
 8001374:	bf00      	nop
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr

08001380 <MDXX_GPIO_init>:
	PWM_init(&(mdxx->pwm), htimp, timp_chx);
	mdxx->mode = 0;
}

void MDXX_GPIO_init(MDXX *mdxx, TIM_HandleTypeDef *htimp, uint16_t timp_chx,
		GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	60f8      	str	r0, [r7, #12]
 8001388:	60b9      	str	r1, [r7, #8]
 800138a:	603b      	str	r3, [r7, #0]
 800138c:	4613      	mov	r3, r2
 800138e:	80fb      	strh	r3, [r7, #6]
	mdxx->htimp = htimp;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	68ba      	ldr	r2, [r7, #8]
 8001394:	609a      	str	r2, [r3, #8]
	mdxx->timp_chx = timp_chx;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	88fa      	ldrh	r2, [r7, #6]
 800139a:	819a      	strh	r2, [r3, #12]
	PWM_init(&(mdxx->pwm), htimp, timp_chx);
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	3328      	adds	r3, #40	@ 0x28
 80013a0:	88fa      	ldrh	r2, [r7, #6]
 80013a2:	68b9      	ldr	r1, [r7, #8]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f002 faf3 	bl	8003990 <PWM_init>
	mdxx->GPIOx = GPIOx;
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	683a      	ldr	r2, [r7, #0]
 80013ae:	645a      	str	r2, [r3, #68]	@ 0x44
	mdxx->GPIO_Pin = GPIO_Pin;
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	8b3a      	ldrh	r2, [r7, #24]
 80013b4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
	mdxx->mode = 1;
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	2201      	movs	r2, #1
 80013bc:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
}
 80013c0:	bf00      	nop
 80013c2:	3710      	adds	r7, #16
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <MDXX_set_range>:
			mdxx->cmd = fabs(duty);
		}
	}
}

void MDXX_set_range(MDXX *mdxx, float freq, float duty) {
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	60f8      	str	r0, [r7, #12]
 80013d0:	ed87 0a02 	vstr	s0, [r7, #8]
 80013d4:	edc7 0a01 	vstr	s1, [r7, #4]
	if (mdxx->mode == 0) {
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d15f      	bne.n	80014a2 <MDXX_set_range+0xda>
		if (duty == 0) {
 80013e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80013e6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80013ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ee:	d115      	bne.n	800141c <MDXX_set_range+0x54>
			PWM_write_range(&(mdxx->dir), freq, 0);
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	3310      	adds	r3, #16
 80013f4:	eddf 0a5f 	vldr	s1, [pc, #380]	@ 8001574 <MDXX_set_range+0x1ac>
 80013f8:	ed97 0a02 	vldr	s0, [r7, #8]
 80013fc:	4618      	mov	r0, r3
 80013fe:	f002 fbef 	bl	8003be0 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, 0);
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	3328      	adds	r3, #40	@ 0x28
 8001406:	eddf 0a5b 	vldr	s1, [pc, #364]	@ 8001574 <MDXX_set_range+0x1ac>
 800140a:	ed97 0a02 	vldr	s0, [r7, #8]
 800140e:	4618      	mov	r0, r3
 8001410:	f002 fbe6 	bl	8003be0 <PWM_write_range>
			mdxx->cmd = 0;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	2200      	movs	r2, #0
 8001418:	641a      	str	r2, [r3, #64]	@ 0x40
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 1);
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
			mdxx->cmd = fabs(duty);
		}
	}
}
 800141a:	e0a6      	b.n	800156a <MDXX_set_range+0x1a2>
		} else if (duty > 0) {
 800141c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001420:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001428:	dd1a      	ble.n	8001460 <MDXX_set_range+0x98>
			PWM_write_range(&(mdxx->dir), freq, 0);
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	3310      	adds	r3, #16
 800142e:	eddf 0a51 	vldr	s1, [pc, #324]	@ 8001574 <MDXX_set_range+0x1ac>
 8001432:	ed97 0a02 	vldr	s0, [r7, #8]
 8001436:	4618      	mov	r0, r3
 8001438:	f002 fbd2 	bl	8003be0 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, duty);
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	3328      	adds	r3, #40	@ 0x28
 8001440:	edd7 0a01 	vldr	s1, [r7, #4]
 8001444:	ed97 0a02 	vldr	s0, [r7, #8]
 8001448:	4618      	mov	r0, r3
 800144a:	f002 fbc9 	bl	8003be0 <PWM_write_range>
			mdxx->cmd = duty;
 800144e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001452:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001456:	ee17 2a90 	vmov	r2, s15
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800145e:	e084      	b.n	800156a <MDXX_set_range+0x1a2>
			PWM_write_range(&(mdxx->dir), freq, 100);
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	3310      	adds	r3, #16
 8001464:	eddf 0a44 	vldr	s1, [pc, #272]	@ 8001578 <MDXX_set_range+0x1b0>
 8001468:	ed97 0a02 	vldr	s0, [r7, #8]
 800146c:	4618      	mov	r0, r3
 800146e:	f002 fbb7 	bl	8003be0 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	3328      	adds	r3, #40	@ 0x28
 8001476:	edd7 7a01 	vldr	s15, [r7, #4]
 800147a:	eef0 7ae7 	vabs.f32	s15, s15
 800147e:	eef0 0a67 	vmov.f32	s1, s15
 8001482:	ed97 0a02 	vldr	s0, [r7, #8]
 8001486:	4618      	mov	r0, r3
 8001488:	f002 fbaa 	bl	8003be0 <PWM_write_range>
			mdxx->cmd = fabs(duty);
 800148c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001490:	eef0 7ae7 	vabs.f32	s15, s15
 8001494:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001498:	ee17 2a90 	vmov	r2, s15
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80014a0:	e063      	b.n	800156a <MDXX_set_range+0x1a2>
	} else if (mdxx->mode == 1) {
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d15e      	bne.n	800156a <MDXX_set_range+0x1a2>
		if (duty == 0) {
 80014ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80014b0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80014b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014b8:	d115      	bne.n	80014e6 <MDXX_set_range+0x11e>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 0);
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80014c4:	2200      	movs	r2, #0
 80014c6:	4619      	mov	r1, r3
 80014c8:	f00b fc12 	bl	800ccf0 <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, 0);
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	3328      	adds	r3, #40	@ 0x28
 80014d0:	eddf 0a28 	vldr	s1, [pc, #160]	@ 8001574 <MDXX_set_range+0x1ac>
 80014d4:	ed97 0a02 	vldr	s0, [r7, #8]
 80014d8:	4618      	mov	r0, r3
 80014da:	f002 fb81 	bl	8003be0 <PWM_write_range>
			mdxx->cmd = 0;
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	2200      	movs	r2, #0
 80014e2:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80014e4:	e041      	b.n	800156a <MDXX_set_range+0x1a2>
		} else if (duty > 0) {
 80014e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80014ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014f2:	dd1a      	ble.n	800152a <MDXX_set_range+0x162>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 0);
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80014fe:	2200      	movs	r2, #0
 8001500:	4619      	mov	r1, r3
 8001502:	f00b fbf5 	bl	800ccf0 <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, duty);
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	3328      	adds	r3, #40	@ 0x28
 800150a:	edd7 0a01 	vldr	s1, [r7, #4]
 800150e:	ed97 0a02 	vldr	s0, [r7, #8]
 8001512:	4618      	mov	r0, r3
 8001514:	f002 fb64 	bl	8003be0 <PWM_write_range>
			mdxx->cmd = duty;
 8001518:	edd7 7a01 	vldr	s15, [r7, #4]
 800151c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001520:	ee17 2a90 	vmov	r2, s15
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001528:	e01f      	b.n	800156a <MDXX_set_range+0x1a2>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 1);
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8001534:	2201      	movs	r2, #1
 8001536:	4619      	mov	r1, r3
 8001538:	f00b fbda 	bl	800ccf0 <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	3328      	adds	r3, #40	@ 0x28
 8001540:	edd7 7a01 	vldr	s15, [r7, #4]
 8001544:	eef0 7ae7 	vabs.f32	s15, s15
 8001548:	eef0 0a67 	vmov.f32	s1, s15
 800154c:	ed97 0a02 	vldr	s0, [r7, #8]
 8001550:	4618      	mov	r0, r3
 8001552:	f002 fb45 	bl	8003be0 <PWM_write_range>
			mdxx->cmd = fabs(duty);
 8001556:	edd7 7a01 	vldr	s15, [r7, #4]
 800155a:	eef0 7ae7 	vabs.f32	s15, s15
 800155e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001562:	ee17 2a90 	vmov	r2, s15
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800156a:	bf00      	nop
 800156c:	3710      	adds	r7, #16
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	00000000 	.word	0x00000000
 8001578:	42c80000 	.word	0x42c80000

0800157c <REVOLUTE_MOTOR_FFD_Init>:
	.offset = 30.07e-3,
    .c = 24.13e-3,
    .prismatic_pulley_radius = 1.5915e-2 		// m
};

void REVOLUTE_MOTOR_FFD_Init(DC_MOTOR_FFeedward *motor, Motor_Constant_Structure *_Mx){
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	6039      	str	r1, [r7, #0]
    motor->Mx = _Mx;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	683a      	ldr	r2, [r7, #0]
 800158a:	601a      	str	r2, [r3, #0]
}
 800158c:	bf00      	nop
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <REVOLUTE_MOTOR_FFD_Compute>:

float REVOLUTE_MOTOR_FFD_Compute(DC_MOTOR_FFeedward *motor, float qd){
 8001598:	b5b0      	push	{r4, r5, r7, lr}
 800159a:	ed2d 8b02 	vpush	{d8}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	ed87 0a00 	vstr	s0, [r7]
    float transfer_function = (motor->Mx->B * motor->Mx->R + motor->Mx->Ke * motor->Mx->Kt) / motor->Mx->Kt;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80015b8:	f7fe ffea 	bl	8000590 <__aeabi_dmul>
 80015bc:	4602      	mov	r2, r0
 80015be:	460b      	mov	r3, r1
 80015c0:	4614      	mov	r4, r2
 80015c2:	461d      	mov	r5, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80015d4:	f7fe ffdc 	bl	8000590 <__aeabi_dmul>
 80015d8:	4602      	mov	r2, r0
 80015da:	460b      	mov	r3, r1
 80015dc:	4620      	mov	r0, r4
 80015de:	4629      	mov	r1, r5
 80015e0:	f7fe fe20 	bl	8000224 <__adddf3>
 80015e4:	4602      	mov	r2, r0
 80015e6:	460b      	mov	r3, r1
 80015e8:	4610      	mov	r0, r2
 80015ea:	4619      	mov	r1, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80015f4:	f7ff f8f6 	bl	80007e4 <__aeabi_ddiv>
 80015f8:	4602      	mov	r2, r0
 80015fa:	460b      	mov	r3, r1
 80015fc:	4610      	mov	r0, r2
 80015fe:	4619      	mov	r1, r3
 8001600:	f7ff faa8 	bl	8000b54 <__aeabi_d2f>
 8001604:	4603      	mov	r3, r0
 8001606:	60fb      	str	r3, [r7, #12]

    float v = qd * transfer_function;
 8001608:	ed97 7a00 	vldr	s14, [r7]
 800160c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001610:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001614:	edc7 7a02 	vstr	s15, [r7, #8]

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001620:	4610      	mov	r0, r2
 8001622:	4619      	mov	r1, r3
 8001624:	f7ff fa96 	bl	8000b54 <__aeabi_d2f>
 8001628:	4603      	mov	r3, r0
 800162a:	ee07 3a90 	vmov	s15, r3
 800162e:	eeb1 8a67 	vneg.f32	s16, s15
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800163a:	4610      	mov	r0, r2
 800163c:	4619      	mov	r1, r3
 800163e:	f7ff fa89 	bl	8000b54 <__aeabi_d2f>
 8001642:	4604      	mov	r4, r0
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800164c:	4610      	mov	r0, r2
 800164e:	4619      	mov	r1, r3
 8001650:	f7ff fa80 	bl	8000b54 <__aeabi_d2f>
 8001654:	4603      	mov	r3, r0
 8001656:	ee07 3a90 	vmov	s15, r3
 800165a:	eef1 8a67 	vneg.f32	s17, s15
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001666:	4610      	mov	r0, r2
 8001668:	4619      	mov	r1, r3
 800166a:	f7ff fa73 	bl	8000b54 <__aeabi_d2f>
 800166e:	4603      	mov	r3, r0
 8001670:	ee02 3a10 	vmov	s4, r3
 8001674:	eef0 1a68 	vmov.f32	s3, s17
 8001678:	ee01 4a10 	vmov	s2, r4
 800167c:	eef0 0a48 	vmov.f32	s1, s16
 8001680:	ed97 0a02 	vldr	s0, [r7, #8]
 8001684:	f000 fbf1 	bl	8001e6a <mapf>
 8001688:	eef0 7a40 	vmov.f32	s15, s0
}
 800168c:	eeb0 0a67 	vmov.f32	s0, s15
 8001690:	3710      	adds	r7, #16
 8001692:	46bd      	mov	sp, r7
 8001694:	ecbd 8b02 	vpop	{d8}
 8001698:	bdb0      	pop	{r4, r5, r7, pc}

0800169a <REVOLUTE_MOTOR_DFD_Init>:

void REVOLUTE_MOTOR_DFD_Init(DC_MOTOR_DFeedward *motor, Motor_Constant_Structure *_Mx, Environment *_En){
 800169a:	b480      	push	{r7}
 800169c:	b085      	sub	sp, #20
 800169e:	af00      	add	r7, sp, #0
 80016a0:	60f8      	str	r0, [r7, #12]
 80016a2:	60b9      	str	r1, [r7, #8]
 80016a4:	607a      	str	r2, [r7, #4]
    motor->Mx = _Mx;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	68ba      	ldr	r2, [r7, #8]
 80016aa:	601a      	str	r2, [r3, #0]
    motor->En = _En;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	605a      	str	r2, [r3, #4]
}
 80016b2:	bf00      	nop
 80016b4:	3714      	adds	r7, #20
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr

080016be <REVOLUTE_MOTOR_DFD_Compute>:

float REVOLUTE_MOTOR_DFD_Compute(DC_MOTOR_DFeedward *motor, float q, float s){
 80016be:	b5b0      	push	{r4, r5, r7, lr}
 80016c0:	ed2d 8b02 	vpush	{d8}
 80016c4:	b088      	sub	sp, #32
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	60f8      	str	r0, [r7, #12]
 80016ca:	ed87 0a02 	vstr	s0, [r7, #8]
 80016ce:	edc7 0a01 	vstr	s1, [r7, #4]
    float gravity_compensate_plotter = motor->En->plotter_mass * motor->En->g * sin(q) * (s + motor->En->offset);
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	ed93 7a01 	vldr	s14, [r3, #4]
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	edd3 7a00 	vldr	s15, [r3]
 80016e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016e6:	ee17 0a90 	vmov	r0, s15
 80016ea:	f7fe fef9 	bl	80004e0 <__aeabi_f2d>
 80016ee:	4604      	mov	r4, r0
 80016f0:	460d      	mov	r5, r1
 80016f2:	68b8      	ldr	r0, [r7, #8]
 80016f4:	f7fe fef4 	bl	80004e0 <__aeabi_f2d>
 80016f8:	4602      	mov	r2, r0
 80016fa:	460b      	mov	r3, r1
 80016fc:	ec43 2b10 	vmov	d0, r2, r3
 8001700:	f011 f9ba 	bl	8012a78 <sin>
 8001704:	ec53 2b10 	vmov	r2, r3, d0
 8001708:	4620      	mov	r0, r4
 800170a:	4629      	mov	r1, r5
 800170c:	f7fe ff40 	bl	8000590 <__aeabi_dmul>
 8001710:	4602      	mov	r2, r0
 8001712:	460b      	mov	r3, r1
 8001714:	4614      	mov	r4, r2
 8001716:	461d      	mov	r5, r3
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	ed93 7a05 	vldr	s14, [r3, #20]
 8001720:	edd7 7a01 	vldr	s15, [r7, #4]
 8001724:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001728:	ee17 0a90 	vmov	r0, s15
 800172c:	f7fe fed8 	bl	80004e0 <__aeabi_f2d>
 8001730:	4602      	mov	r2, r0
 8001732:	460b      	mov	r3, r1
 8001734:	4620      	mov	r0, r4
 8001736:	4629      	mov	r1, r5
 8001738:	f7fe ff2a 	bl	8000590 <__aeabi_dmul>
 800173c:	4602      	mov	r2, r0
 800173e:	460b      	mov	r3, r1
 8001740:	4610      	mov	r0, r2
 8001742:	4619      	mov	r1, r3
 8001744:	f7ff fa06 	bl	8000b54 <__aeabi_d2f>
 8001748:	4603      	mov	r3, r0
 800174a:	61fb      	str	r3, [r7, #28]

    float gravity_compensate_rail = motor->En->slide_rail_mass * motor->En->g * sin(q) * (motor->En->c);
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	ed93 7a02 	vldr	s14, [r3, #8]
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	edd3 7a00 	vldr	s15, [r3]
 800175c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001760:	ee17 0a90 	vmov	r0, s15
 8001764:	f7fe febc 	bl	80004e0 <__aeabi_f2d>
 8001768:	4604      	mov	r4, r0
 800176a:	460d      	mov	r5, r1
 800176c:	68b8      	ldr	r0, [r7, #8]
 800176e:	f7fe feb7 	bl	80004e0 <__aeabi_f2d>
 8001772:	4602      	mov	r2, r0
 8001774:	460b      	mov	r3, r1
 8001776:	ec43 2b10 	vmov	d0, r2, r3
 800177a:	f011 f97d 	bl	8012a78 <sin>
 800177e:	ec53 2b10 	vmov	r2, r3, d0
 8001782:	4620      	mov	r0, r4
 8001784:	4629      	mov	r1, r5
 8001786:	f7fe ff03 	bl	8000590 <__aeabi_dmul>
 800178a:	4602      	mov	r2, r0
 800178c:	460b      	mov	r3, r1
 800178e:	4614      	mov	r4, r2
 8001790:	461d      	mov	r5, r3
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	4618      	mov	r0, r3
 800179a:	f7fe fea1 	bl	80004e0 <__aeabi_f2d>
 800179e:	4602      	mov	r2, r0
 80017a0:	460b      	mov	r3, r1
 80017a2:	4620      	mov	r0, r4
 80017a4:	4629      	mov	r1, r5
 80017a6:	f7fe fef3 	bl	8000590 <__aeabi_dmul>
 80017aa:	4602      	mov	r2, r0
 80017ac:	460b      	mov	r3, r1
 80017ae:	4610      	mov	r0, r2
 80017b0:	4619      	mov	r1, r3
 80017b2:	f7ff f9cf 	bl	8000b54 <__aeabi_d2f>
 80017b6:	4603      	mov	r3, r0
 80017b8:	61bb      	str	r3, [r7, #24]

    float transfer_function = motor->Mx->R / motor->Mx->Kt;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80017ca:	f7ff f80b 	bl	80007e4 <__aeabi_ddiv>
 80017ce:	4602      	mov	r2, r0
 80017d0:	460b      	mov	r3, r1
 80017d2:	4610      	mov	r0, r2
 80017d4:	4619      	mov	r1, r3
 80017d6:	f7ff f9bd 	bl	8000b54 <__aeabi_d2f>
 80017da:	4603      	mov	r3, r0
 80017dc:	617b      	str	r3, [r7, #20]

    float v = (gravity_compensate_plotter - gravity_compensate_rail) * transfer_function;
 80017de:	ed97 7a07 	vldr	s14, [r7, #28]
 80017e2:	edd7 7a06 	vldr	s15, [r7, #24]
 80017e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017ea:	ed97 7a05 	vldr	s14, [r7, #20]
 80017ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017f2:	edc7 7a04 	vstr	s15, [r7, #16]

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80017fe:	4610      	mov	r0, r2
 8001800:	4619      	mov	r1, r3
 8001802:	f7ff f9a7 	bl	8000b54 <__aeabi_d2f>
 8001806:	4603      	mov	r3, r0
 8001808:	ee07 3a90 	vmov	s15, r3
 800180c:	eeb1 8a67 	vneg.f32	s16, s15
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001818:	4610      	mov	r0, r2
 800181a:	4619      	mov	r1, r3
 800181c:	f7ff f99a 	bl	8000b54 <__aeabi_d2f>
 8001820:	4604      	mov	r4, r0
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800182a:	4610      	mov	r0, r2
 800182c:	4619      	mov	r1, r3
 800182e:	f7ff f991 	bl	8000b54 <__aeabi_d2f>
 8001832:	4603      	mov	r3, r0
 8001834:	ee07 3a90 	vmov	s15, r3
 8001838:	eef1 8a67 	vneg.f32	s17, s15
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001844:	4610      	mov	r0, r2
 8001846:	4619      	mov	r1, r3
 8001848:	f7ff f984 	bl	8000b54 <__aeabi_d2f>
 800184c:	4603      	mov	r3, r0
 800184e:	ee02 3a10 	vmov	s4, r3
 8001852:	eef0 1a68 	vmov.f32	s3, s17
 8001856:	ee01 4a10 	vmov	s2, r4
 800185a:	eef0 0a48 	vmov.f32	s1, s16
 800185e:	ed97 0a04 	vldr	s0, [r7, #16]
 8001862:	f000 fb02 	bl	8001e6a <mapf>
 8001866:	eef0 7a40 	vmov.f32	s15, s0
}
 800186a:	eeb0 0a67 	vmov.f32	s0, s15
 800186e:	3720      	adds	r7, #32
 8001870:	46bd      	mov	sp, r7
 8001872:	ecbd 8b02 	vpop	{d8}
 8001876:	bdb0      	pop	{r4, r5, r7, pc}

08001878 <PRISMATIC_MOTOR_FFD_Init>:

void PRISMATIC_MOTOR_FFD_Init(DC_MOTOR_FFeedward *motor, Motor_Constant_Structure *_Mx) {
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	6039      	str	r1, [r7, #0]
    motor->Mx = _Mx;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	683a      	ldr	r2, [r7, #0]
 8001886:	601a      	str	r2, [r3, #0]
}
 8001888:	bf00      	nop
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr
 8001894:	0000      	movs	r0, r0
	...

08001898 <PRISMATIC_MOTOR_FFD_Compute>:

float PRISMATIC_MOTOR_FFD_Compute(DC_MOTOR_FFeedward *motor, float sd) {
 8001898:	b5b0      	push	{r4, r5, r7, lr}
 800189a:	ed2d 8b02 	vpush	{d8}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	ed87 0a00 	vstr	s0, [r7]
    float transfer_function = (motor->Mx->B * motor->Mx->R  + motor->Mx->Ke * motor->Mx->Kt) / motor->Mx->Kt;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80018b8:	f7fe fe6a 	bl	8000590 <__aeabi_dmul>
 80018bc:	4602      	mov	r2, r0
 80018be:	460b      	mov	r3, r1
 80018c0:	4614      	mov	r4, r2
 80018c2:	461d      	mov	r5, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80018d4:	f7fe fe5c 	bl	8000590 <__aeabi_dmul>
 80018d8:	4602      	mov	r2, r0
 80018da:	460b      	mov	r3, r1
 80018dc:	4620      	mov	r0, r4
 80018de:	4629      	mov	r1, r5
 80018e0:	f7fe fca0 	bl	8000224 <__adddf3>
 80018e4:	4602      	mov	r2, r0
 80018e6:	460b      	mov	r3, r1
 80018e8:	4610      	mov	r0, r2
 80018ea:	4619      	mov	r1, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80018f4:	f7fe ff76 	bl	80007e4 <__aeabi_ddiv>
 80018f8:	4602      	mov	r2, r0
 80018fa:	460b      	mov	r3, r1
 80018fc:	4610      	mov	r0, r2
 80018fe:	4619      	mov	r1, r3
 8001900:	f7ff f928 	bl	8000b54 <__aeabi_d2f>
 8001904:	4603      	mov	r3, r0
 8001906:	60fb      	str	r3, [r7, #12]

    float v = sd * transfer_function;
 8001908:	ed97 7a00 	vldr	s14, [r7]
 800190c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001910:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001914:	edc7 7a02 	vstr	s15, [r7, #8]

    return mapf(v * 0.1, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
 8001918:	68b8      	ldr	r0, [r7, #8]
 800191a:	f7fe fde1 	bl	80004e0 <__aeabi_f2d>
 800191e:	a326      	add	r3, pc, #152	@ (adr r3, 80019b8 <PRISMATIC_MOTOR_FFD_Compute+0x120>)
 8001920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001924:	f7fe fe34 	bl	8000590 <__aeabi_dmul>
 8001928:	4602      	mov	r2, r0
 800192a:	460b      	mov	r3, r1
 800192c:	4610      	mov	r0, r2
 800192e:	4619      	mov	r1, r3
 8001930:	f7ff f910 	bl	8000b54 <__aeabi_d2f>
 8001934:	4604      	mov	r4, r0
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800193e:	4610      	mov	r0, r2
 8001940:	4619      	mov	r1, r3
 8001942:	f7ff f907 	bl	8000b54 <__aeabi_d2f>
 8001946:	4603      	mov	r3, r0
 8001948:	ee07 3a90 	vmov	s15, r3
 800194c:	eeb1 8a67 	vneg.f32	s16, s15
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001958:	4610      	mov	r0, r2
 800195a:	4619      	mov	r1, r3
 800195c:	f7ff f8fa 	bl	8000b54 <__aeabi_d2f>
 8001960:	4605      	mov	r5, r0
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800196a:	4610      	mov	r0, r2
 800196c:	4619      	mov	r1, r3
 800196e:	f7ff f8f1 	bl	8000b54 <__aeabi_d2f>
 8001972:	4603      	mov	r3, r0
 8001974:	ee07 3a90 	vmov	s15, r3
 8001978:	eef1 8a67 	vneg.f32	s17, s15
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001984:	4610      	mov	r0, r2
 8001986:	4619      	mov	r1, r3
 8001988:	f7ff f8e4 	bl	8000b54 <__aeabi_d2f>
 800198c:	4603      	mov	r3, r0
 800198e:	ee02 3a10 	vmov	s4, r3
 8001992:	eef0 1a68 	vmov.f32	s3, s17
 8001996:	ee01 5a10 	vmov	s2, r5
 800199a:	eef0 0a48 	vmov.f32	s1, s16
 800199e:	ee00 4a10 	vmov	s0, r4
 80019a2:	f000 fa62 	bl	8001e6a <mapf>
 80019a6:	eef0 7a40 	vmov.f32	s15, s0
}
 80019aa:	eeb0 0a67 	vmov.f32	s0, s15
 80019ae:	3710      	adds	r7, #16
 80019b0:	46bd      	mov	sp, r7
 80019b2:	ecbd 8b02 	vpop	{d8}
 80019b6:	bdb0      	pop	{r4, r5, r7, pc}
 80019b8:	9999999a 	.word	0x9999999a
 80019bc:	3fb99999 	.word	0x3fb99999

080019c0 <PRISMATIC_MOTOR_DFD_Init>:

void PRISMATIC_MOTOR_DFD_Init(DC_MOTOR_DFeedward *motor, Motor_Constant_Structure *_Mx, Environment *_En){
 80019c0:	b480      	push	{r7}
 80019c2:	b085      	sub	sp, #20
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	60f8      	str	r0, [r7, #12]
 80019c8:	60b9      	str	r1, [r7, #8]
 80019ca:	607a      	str	r2, [r7, #4]
    motor->Mx = _Mx;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	68ba      	ldr	r2, [r7, #8]
 80019d0:	601a      	str	r2, [r3, #0]
    motor->En = _En;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	687a      	ldr	r2, [r7, #4]
 80019d6:	605a      	str	r2, [r3, #4]
}
 80019d8:	bf00      	nop
 80019da:	3714      	adds	r7, #20
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr
 80019e4:	0000      	movs	r0, r0
	...

080019e8 <PRISMATIC_MOTOR_DFD_Compute>:

float PRISMATIC_MOTOR_DFD_Compute(DC_MOTOR_DFeedward *motor, float q, float qd, float s){
 80019e8:	b5b0      	push	{r4, r5, r7, lr}
 80019ea:	ed2d 8b02 	vpush	{d8}
 80019ee:	b088      	sub	sp, #32
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	60f8      	str	r0, [r7, #12]
 80019f4:	ed87 0a02 	vstr	s0, [r7, #8]
 80019f8:	edc7 0a01 	vstr	s1, [r7, #4]
 80019fc:	ed87 1a00 	vstr	s2, [r7]
    float gravity_compensate_plotter = motor->En->plotter_mass * motor->En->g * cos(q);
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	ed93 7a01 	vldr	s14, [r3, #4]
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	edd3 7a00 	vldr	s15, [r3]
 8001a10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a14:	ee17 0a90 	vmov	r0, s15
 8001a18:	f7fe fd62 	bl	80004e0 <__aeabi_f2d>
 8001a1c:	4604      	mov	r4, r0
 8001a1e:	460d      	mov	r5, r1
 8001a20:	68b8      	ldr	r0, [r7, #8]
 8001a22:	f7fe fd5d 	bl	80004e0 <__aeabi_f2d>
 8001a26:	4602      	mov	r2, r0
 8001a28:	460b      	mov	r3, r1
 8001a2a:	ec43 2b10 	vmov	d0, r2, r3
 8001a2e:	f010 ffcf 	bl	80129d0 <cos>
 8001a32:	ec53 2b10 	vmov	r2, r3, d0
 8001a36:	4620      	mov	r0, r4
 8001a38:	4629      	mov	r1, r5
 8001a3a:	f7fe fda9 	bl	8000590 <__aeabi_dmul>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	460b      	mov	r3, r1
 8001a42:	4610      	mov	r0, r2
 8001a44:	4619      	mov	r1, r3
 8001a46:	f7ff f885 	bl	8000b54 <__aeabi_d2f>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	61fb      	str	r3, [r7, #28]

    float centrifugal_force = motor->En->plotter_mass * qd * qd * s;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	ed93 7a01 	vldr	s14, [r3, #4]
 8001a56:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a5a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a5e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a66:	ed97 7a00 	vldr	s14, [r7]
 8001a6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a6e:	edc7 7a06 	vstr	s15, [r7, #24]

    float transfer_function = (motor->Mx->R * motor->En->prismatic_pulley_radius) / motor->Mx->Kt;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	691b      	ldr	r3, [r3, #16]
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7fe fd2d 	bl	80004e0 <__aeabi_f2d>
 8001a86:	4602      	mov	r2, r0
 8001a88:	460b      	mov	r3, r1
 8001a8a:	4620      	mov	r0, r4
 8001a8c:	4629      	mov	r1, r5
 8001a8e:	f7fe fd7f 	bl	8000590 <__aeabi_dmul>
 8001a92:	4602      	mov	r2, r0
 8001a94:	460b      	mov	r3, r1
 8001a96:	4610      	mov	r0, r2
 8001a98:	4619      	mov	r1, r3
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001aa2:	f7fe fe9f 	bl	80007e4 <__aeabi_ddiv>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	4610      	mov	r0, r2
 8001aac:	4619      	mov	r1, r3
 8001aae:	f7ff f851 	bl	8000b54 <__aeabi_d2f>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	617b      	str	r3, [r7, #20]

    float v = (gravity_compensate_plotter + centrifugal_force) * transfer_function;
 8001ab6:	ed97 7a07 	vldr	s14, [r7, #28]
 8001aba:	edd7 7a06 	vldr	s15, [r7, #24]
 8001abe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ac2:	ed97 7a05 	vldr	s14, [r7, #20]
 8001ac6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001aca:	edc7 7a04 	vstr	s15, [r7, #16]

    return mapf(v * 0.1, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
 8001ace:	6938      	ldr	r0, [r7, #16]
 8001ad0:	f7fe fd06 	bl	80004e0 <__aeabi_f2d>
 8001ad4:	a326      	add	r3, pc, #152	@ (adr r3, 8001b70 <PRISMATIC_MOTOR_DFD_Compute+0x188>)
 8001ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ada:	f7fe fd59 	bl	8000590 <__aeabi_dmul>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	4610      	mov	r0, r2
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	f7ff f835 	bl	8000b54 <__aeabi_d2f>
 8001aea:	4604      	mov	r4, r0
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001af4:	4610      	mov	r0, r2
 8001af6:	4619      	mov	r1, r3
 8001af8:	f7ff f82c 	bl	8000b54 <__aeabi_d2f>
 8001afc:	4603      	mov	r3, r0
 8001afe:	ee07 3a90 	vmov	s15, r3
 8001b02:	eeb1 8a67 	vneg.f32	s16, s15
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001b0e:	4610      	mov	r0, r2
 8001b10:	4619      	mov	r1, r3
 8001b12:	f7ff f81f 	bl	8000b54 <__aeabi_d2f>
 8001b16:	4605      	mov	r5, r0
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001b20:	4610      	mov	r0, r2
 8001b22:	4619      	mov	r1, r3
 8001b24:	f7ff f816 	bl	8000b54 <__aeabi_d2f>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	ee07 3a90 	vmov	s15, r3
 8001b2e:	eef1 8a67 	vneg.f32	s17, s15
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001b3a:	4610      	mov	r0, r2
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	f7ff f809 	bl	8000b54 <__aeabi_d2f>
 8001b42:	4603      	mov	r3, r0
 8001b44:	ee02 3a10 	vmov	s4, r3
 8001b48:	eef0 1a68 	vmov.f32	s3, s17
 8001b4c:	ee01 5a10 	vmov	s2, r5
 8001b50:	eef0 0a48 	vmov.f32	s1, s16
 8001b54:	ee00 4a10 	vmov	s0, r4
 8001b58:	f000 f987 	bl	8001e6a <mapf>
 8001b5c:	eef0 7a40 	vmov.f32	s15, s0
}
 8001b60:	eeb0 0a67 	vmov.f32	s0, s15
 8001b64:	3720      	adds	r7, #32
 8001b66:	46bd      	mov	sp, r7
 8001b68:	ecbd 8b02 	vpop	{d8}
 8001b6c:	bdb0      	pop	{r4, r5, r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	9999999a 	.word	0x9999999a
 8001b74:	3fb99999 	.word	0x3fb99999

08001b78 <FIR_init>:
 *      Author: transporter
 */
#include "FIR.h"
#include "arm_math.h"

void FIR_init(FIR *fir, uint16_t numTaps, float cutoffFreq, float samplingFreq) {
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	ed2d 8b02 	vpush	{d8}
 8001b7e:	b08a      	sub	sp, #40	@ 0x28
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	60f8      	str	r0, [r7, #12]
 8001b84:	460b      	mov	r3, r1
 8001b86:	ed87 0a01 	vstr	s0, [r7, #4]
 8001b8a:	edc7 0a00 	vstr	s1, [r7]
 8001b8e:	817b      	strh	r3, [r7, #10]
    // Make sure numTaps is odd
    if (numTaps % 2 == 0) {
 8001b90:	897b      	ldrh	r3, [r7, #10]
 8001b92:	f003 0301 	and.w	r3, r3, #1
 8001b96:	b29b      	uxth	r3, r3
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d102      	bne.n	8001ba2 <FIR_init+0x2a>
        numTaps += 1;
 8001b9c:	897b      	ldrh	r3, [r7, #10]
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	817b      	strh	r3, [r7, #10]
    }

    fir->numTaps = numTaps;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	897a      	ldrh	r2, [r7, #10]
 8001ba6:	811a      	strh	r2, [r3, #8]
    fir->bufferIndex = 0;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	2200      	movs	r2, #0
 8001bac:	815a      	strh	r2, [r3, #10]

    // Allocate memory for coefficients and buffer
    fir->coeffs = (float*)malloc(numTaps * sizeof(float));
 8001bae:	897b      	ldrh	r3, [r7, #10]
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f010 fe04 	bl	80127c0 <malloc>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	461a      	mov	r2, r3
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	601a      	str	r2, [r3, #0]
    fir->buffer = (float*)malloc(numTaps * sizeof(float));
 8001bc0:	897b      	ldrh	r3, [r7, #10]
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f010 fdfb 	bl	80127c0 <malloc>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	461a      	mov	r2, r3
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	605a      	str	r2, [r3, #4]

    if (fir->coeffs != NULL && fir->buffer != NULL) {
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	f000 80e0 	beq.w	8001d9c <FIR_init+0x224>
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	f000 80db 	beq.w	8001d9c <FIR_init+0x224>
        // Clear buffer
        for (uint16_t i = 0; i < numTaps; i++) {
 8001be6:	2300      	movs	r3, #0
 8001be8:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001bea:	e00a      	b.n	8001c02 <FIR_init+0x8a>
            fir->buffer[i] = 0.0f;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	685a      	ldr	r2, [r3, #4]
 8001bf0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	4413      	add	r3, r2
 8001bf6:	f04f 0200 	mov.w	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]
        for (uint16_t i = 0; i < numTaps; i++) {
 8001bfc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001bfe:	3301      	adds	r3, #1
 8001c00:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001c02:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001c04:	897b      	ldrh	r3, [r7, #10]
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d3f0      	bcc.n	8001bec <FIR_init+0x74>
        }

        // Calculate normalized cutoff frequency (0 to 0.5)
        float omega = cutoffFreq / samplingFreq;
 8001c0a:	edd7 6a01 	vldr	s13, [r7, #4]
 8001c0e:	ed97 7a00 	vldr	s14, [r7]
 8001c12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c16:	edc7 7a06 	vstr	s15, [r7, #24]

        // Calculate filter coefficients (low-pass)
        int16_t half_taps = numTaps / 2;
 8001c1a:	897b      	ldrh	r3, [r7, #10]
 8001c1c:	085b      	lsrs	r3, r3, #1
 8001c1e:	b29b      	uxth	r3, r3
 8001c20:	82fb      	strh	r3, [r7, #22]
        for (int16_t i = 0; i < numTaps; i++) {
 8001c22:	2300      	movs	r3, #0
 8001c24:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001c26:	e077      	b.n	8001d18 <FIR_init+0x1a0>
            if (i == half_taps) {
 8001c28:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8001c2c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d10c      	bne.n	8001c4e <FIR_init+0xd6>
                // Center tap
                fir->coeffs[i] = 2.0f * omega;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	4413      	add	r3, r2
 8001c40:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c44:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001c48:	edc3 7a00 	vstr	s15, [r3]
 8001c4c:	e02c      	b.n	8001ca8 <FIR_init+0x130>
            } else {
                // Side taps
                int16_t n = i - half_taps;
 8001c4e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001c50:	8afb      	ldrh	r3, [r7, #22]
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	82bb      	strh	r3, [r7, #20]
                fir->coeffs[i] = sinf(2.0f * PI * omega * n) / (PI * n);
 8001c58:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c5c:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8001da8 <FIR_init+0x230>
 8001c60:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c64:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001c68:	ee07 3a90 	vmov	s15, r3
 8001c6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c74:	eeb0 0a67 	vmov.f32	s0, s15
 8001c78:	f010 ffd4 	bl	8012c24 <sinf>
 8001c7c:	eef0 6a40 	vmov.f32	s13, s0
 8001c80:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001c84:	ee07 3a90 	vmov	s15, r3
 8001c88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c8c:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8001dac <FIR_init+0x234>
 8001c90:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	4413      	add	r3, r2
 8001ca0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ca4:	edc3 7a00 	vstr	s15, [r3]
            }

            // Apply Hamming window
            fir->coeffs[i] *= (0.54f - 0.46f * cosf(2.0f * PI * i / (numTaps - 1)));
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	4413      	add	r3, r2
 8001cb4:	ed93 8a00 	vldr	s16, [r3]
 8001cb8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001cbc:	ee07 3a90 	vmov	s15, r3
 8001cc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cc4:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8001da8 <FIR_init+0x230>
 8001cc8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001ccc:	897b      	ldrh	r3, [r7, #10]
 8001cce:	3b01      	subs	r3, #1
 8001cd0:	ee07 3a90 	vmov	s15, r3
 8001cd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cd8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001cdc:	eeb0 0a66 	vmov.f32	s0, s13
 8001ce0:	f010 ff5c 	bl	8012b9c <cosf>
 8001ce4:	eef0 7a40 	vmov.f32	s15, s0
 8001ce8:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8001db0 <FIR_init+0x238>
 8001cec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cf0:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8001db4 <FIR_init+0x23c>
 8001cf4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	4413      	add	r3, r2
 8001d04:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001d08:	edc3 7a00 	vstr	s15, [r3]
        for (int16_t i = 0; i < numTaps; i++) {
 8001d0c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	3301      	adds	r3, #1
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001d18:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8001d1c:	897b      	ldrh	r3, [r7, #10]
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	db82      	blt.n	8001c28 <FIR_init+0xb0>
        }

        // Normalize gain
        float sum = 0.0f;
 8001d22:	f04f 0300 	mov.w	r3, #0
 8001d26:	623b      	str	r3, [r7, #32]
        for (uint16_t i = 0; i < numTaps; i++) {
 8001d28:	2300      	movs	r3, #0
 8001d2a:	83fb      	strh	r3, [r7, #30]
 8001d2c:	e00f      	b.n	8001d4e <FIR_init+0x1d6>
            sum += fir->coeffs[i];
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	8bfb      	ldrh	r3, [r7, #30]
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	4413      	add	r3, r2
 8001d38:	edd3 7a00 	vldr	s15, [r3]
 8001d3c:	ed97 7a08 	vldr	s14, [r7, #32]
 8001d40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d44:	edc7 7a08 	vstr	s15, [r7, #32]
        for (uint16_t i = 0; i < numTaps; i++) {
 8001d48:	8bfb      	ldrh	r3, [r7, #30]
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	83fb      	strh	r3, [r7, #30]
 8001d4e:	8bfa      	ldrh	r2, [r7, #30]
 8001d50:	897b      	ldrh	r3, [r7, #10]
 8001d52:	429a      	cmp	r2, r3
 8001d54:	d3eb      	bcc.n	8001d2e <FIR_init+0x1b6>
        }

        if (sum != 0.0f) {
 8001d56:	edd7 7a08 	vldr	s15, [r7, #32]
 8001d5a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001d5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d62:	d01b      	beq.n	8001d9c <FIR_init+0x224>
            for (uint16_t i = 0; i < numTaps; i++) {
 8001d64:	2300      	movs	r3, #0
 8001d66:	83bb      	strh	r3, [r7, #28]
 8001d68:	e014      	b.n	8001d94 <FIR_init+0x21c>
                fir->coeffs[i] /= sum;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	8bbb      	ldrh	r3, [r7, #28]
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	4413      	add	r3, r2
 8001d74:	edd3 6a00 	vldr	s13, [r3]
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	8bbb      	ldrh	r3, [r7, #28]
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	4413      	add	r3, r2
 8001d82:	ed97 7a08 	vldr	s14, [r7, #32]
 8001d86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d8a:	edc3 7a00 	vstr	s15, [r3]
            for (uint16_t i = 0; i < numTaps; i++) {
 8001d8e:	8bbb      	ldrh	r3, [r7, #28]
 8001d90:	3301      	adds	r3, #1
 8001d92:	83bb      	strh	r3, [r7, #28]
 8001d94:	8bba      	ldrh	r2, [r7, #28]
 8001d96:	897b      	ldrh	r3, [r7, #10]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d3e6      	bcc.n	8001d6a <FIR_init+0x1f2>
            }
        }
    }
}
 8001d9c:	bf00      	nop
 8001d9e:	3728      	adds	r7, #40	@ 0x28
 8001da0:	46bd      	mov	sp, r7
 8001da2:	ecbd 8b02 	vpop	{d8}
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	40c90fdb 	.word	0x40c90fdb
 8001dac:	40490fdb 	.word	0x40490fdb
 8001db0:	3eeb851f 	.word	0x3eeb851f
 8001db4:	3f0a3d71 	.word	0x3f0a3d71

08001db8 <FIR_process>:

float FIR_process(FIR *fir, float input) {
 8001db8:	b480      	push	{r7}
 8001dba:	b085      	sub	sp, #20
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	ed87 0a00 	vstr	s0, [r7]
    // Update circular buffer with new input
    fir->buffer[fir->bufferIndex] = input;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	685a      	ldr	r2, [r3, #4]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	895b      	ldrh	r3, [r3, #10]
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	4413      	add	r3, r2
 8001dd0:	683a      	ldr	r2, [r7, #0]
 8001dd2:	601a      	str	r2, [r3, #0]

    // Compute output (convolution)
    float output = 0.0f;
 8001dd4:	f04f 0300 	mov.w	r3, #0
 8001dd8:	60fb      	str	r3, [r7, #12]
    uint16_t index = fir->bufferIndex;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	895b      	ldrh	r3, [r3, #10]
 8001dde:	817b      	strh	r3, [r7, #10]

    for (uint16_t i = 0; i < fir->numTaps; i++) {
 8001de0:	2300      	movs	r3, #0
 8001de2:	813b      	strh	r3, [r7, #8]
 8001de4:	e023      	b.n	8001e2e <FIR_process+0x76>
        output += fir->buffer[index] * fir->coeffs[i];
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	685a      	ldr	r2, [r3, #4]
 8001dea:	897b      	ldrh	r3, [r7, #10]
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	4413      	add	r3, r2
 8001df0:	ed93 7a00 	vldr	s14, [r3]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	893b      	ldrh	r3, [r7, #8]
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	4413      	add	r3, r2
 8001dfe:	edd3 7a00 	vldr	s15, [r3]
 8001e02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e06:	ed97 7a03 	vldr	s14, [r7, #12]
 8001e0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e0e:	edc7 7a03 	vstr	s15, [r7, #12]

        // Move back in circular buffer
        if (index == 0) {
 8001e12:	897b      	ldrh	r3, [r7, #10]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d104      	bne.n	8001e22 <FIR_process+0x6a>
            index = fir->numTaps - 1;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	891b      	ldrh	r3, [r3, #8]
 8001e1c:	3b01      	subs	r3, #1
 8001e1e:	817b      	strh	r3, [r7, #10]
 8001e20:	e002      	b.n	8001e28 <FIR_process+0x70>
        } else {
            index--;
 8001e22:	897b      	ldrh	r3, [r7, #10]
 8001e24:	3b01      	subs	r3, #1
 8001e26:	817b      	strh	r3, [r7, #10]
    for (uint16_t i = 0; i < fir->numTaps; i++) {
 8001e28:	893b      	ldrh	r3, [r7, #8]
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	813b      	strh	r3, [r7, #8]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	891b      	ldrh	r3, [r3, #8]
 8001e32:	893a      	ldrh	r2, [r7, #8]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d3d6      	bcc.n	8001de6 <FIR_process+0x2e>
        }
    }

    // Update buffer index for next input
    fir->bufferIndex++;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	895b      	ldrh	r3, [r3, #10]
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	b29a      	uxth	r2, r3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	815a      	strh	r2, [r3, #10]
    if (fir->bufferIndex >= fir->numTaps) {
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	895a      	ldrh	r2, [r3, #10]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	891b      	ldrh	r3, [r3, #8]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d302      	bcc.n	8001e56 <FIR_process+0x9e>
        fir->bufferIndex = 0;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2200      	movs	r2, #0
 8001e54:	815a      	strh	r2, [r3, #10]
    }

    return output;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	ee07 3a90 	vmov	s15, r3
}
 8001e5c:	eeb0 0a67 	vmov.f32	s0, s15
 8001e60:	3714      	adds	r7, #20
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr

08001e6a <mapf>:

}

//Scaling a range of value
float mapf(float input, float min_input, float max_input, float min_output,
		float max_output) {
 8001e6a:	b480      	push	{r7}
 8001e6c:	b089      	sub	sp, #36	@ 0x24
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	ed87 0a05 	vstr	s0, [r7, #20]
 8001e74:	edc7 0a04 	vstr	s1, [r7, #16]
 8001e78:	ed87 1a03 	vstr	s2, [r7, #12]
 8001e7c:	edc7 1a02 	vstr	s3, [r7, #8]
 8001e80:	ed87 2a01 	vstr	s4, [r7, #4]

	// First, find the ratio of the input within the input range
	float input_ratio = (input - min_input) / (max_input - min_input);
 8001e84:	ed97 7a05 	vldr	s14, [r7, #20]
 8001e88:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e8c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001e90:	ed97 7a03 	vldr	s14, [r7, #12]
 8001e94:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e98:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ea0:	edc7 7a07 	vstr	s15, [r7, #28]
	// Then, scale this ratio to the output range
	float output = (input_ratio * (max_output - min_output)) + min_output;
 8001ea4:	ed97 7a01 	vldr	s14, [r7, #4]
 8001ea8:	edd7 7a02 	vldr	s15, [r7, #8]
 8001eac:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001eb0:	edd7 7a07 	vldr	s15, [r7, #28]
 8001eb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eb8:	ed97 7a02 	vldr	s14, [r7, #8]
 8001ebc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ec0:	edc7 7a06 	vstr	s15, [r7, #24]

	return output;
 8001ec4:	69bb      	ldr	r3, [r7, #24]
 8001ec6:	ee07 3a90 	vmov	s15, r3
}
 8001eca:	eeb0 0a67 	vmov.f32	s0, s15
 8001ece:	3724      	adds	r7, #36	@ 0x24
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr

08001ed8 <modbus_1t5_Timeout>:
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);

// function for interrupt
void modbus_1t5_Timeout()
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8001edc:	4b0d      	ldr	r3, [pc, #52]	@ (8001f14 <modbus_1t5_Timeout+0x3c>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8001ee4:	4b0b      	ldr	r3, [pc, #44]	@ (8001f14 <modbus_1t5_Timeout+0x3c>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	691b      	ldr	r3, [r3, #16]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2200      	movs	r2, #0
 8001eee:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 8001ef0:	4b08      	ldr	r3, [pc, #32]	@ (8001f14 <modbus_1t5_Timeout+0x3c>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	691b      	ldr	r3, [r3, #16]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	4b06      	ldr	r3, [pc, #24]	@ (8001f14 <modbus_1t5_Timeout+0x3c>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	691b      	ldr	r3, [r3, #16]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f042 0201 	orr.w	r2, r2, #1
 8001f06:	601a      	str	r2, [r3, #0]
}
 8001f08:	bf00      	nop
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	200003b0 	.word	0x200003b0

08001f18 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8001f20:	4b04      	ldr	r3, [pc, #16]	@ (8001f34 <modbus_3t5_Timeout+0x1c>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2201      	movs	r2, #1
 8001f26:	755a      	strb	r2, [r3, #21]

}
 8001f28:	bf00      	nop
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr
 8001f34:	200003b0 	.word	0x200003b0

08001f38 <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f00e fe23 	bl	8010b8c <HAL_UART_GetError>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b20      	cmp	r3, #32
 8001f4a:	d101      	bne.n	8001f50 <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 8001f4c:	f7ff ffc4 	bl	8001ed8 <modbus_1t5_Timeout>

	}
}
 8001f50:	bf00      	nop
 8001f52:	3708      	adds	r7, #8
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,UART_HandleTypeDef* huart,TIM_HandleTypeDef* htim ,u16u8_t* RegisterStartAddress,uint8_t slaveAddress,uint32_t RegisterSize)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	60f8      	str	r0, [r7, #12]
 8001f60:	60b9      	str	r1, [r7, #8]
 8001f62:	607a      	str	r2, [r7, #4]
 8001f64:	603b      	str	r3, [r7, #0]
	hModbus = hmodbus;
 8001f66:	4a2d      	ldr	r2, [pc, #180]	@ (800201c <Modbus_init+0xc4>)
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	6013      	str	r3, [r2, #0]

	hModbus->huart = huart;
 8001f6c:	4b2b      	ldr	r3, [pc, #172]	@ (800201c <Modbus_init+0xc4>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	68ba      	ldr	r2, [r7, #8]
 8001f72:	60da      	str	r2, [r3, #12]
	hModbus->htim = htim;
 8001f74:	4b29      	ldr	r3, [pc, #164]	@ (800201c <Modbus_init+0xc4>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	611a      	str	r2, [r3, #16]
	hModbus->RegisterAddress = RegisterStartAddress;
 8001f7c:	4b27      	ldr	r3, [pc, #156]	@ (800201c <Modbus_init+0xc4>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	683a      	ldr	r2, [r7, #0]
 8001f82:	605a      	str	r2, [r3, #4]
	hModbus->slaveAddress = slaveAddress;
 8001f84:	4b25      	ldr	r3, [pc, #148]	@ (800201c <Modbus_init+0xc4>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	7e3a      	ldrb	r2, [r7, #24]
 8001f8a:	701a      	strb	r2, [r3, #0]
	hModbus->RegisterSize = RegisterSize;
 8001f8c:	4b23      	ldr	r3, [pc, #140]	@ (800201c <Modbus_init+0xc4>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	69fa      	ldr	r2, [r7, #28]
 8001f92:	609a      	str	r2, [r3, #8]
	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	691b      	ldr	r3, [r3, #16]
 8001f98:	4a21      	ldr	r2, [pc, #132]	@ (8002020 <Modbus_init+0xc8>)
 8001f9a:	210e      	movs	r1, #14
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f00d f819 	bl	800efd4 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	68db      	ldr	r3, [r3, #12]
 8001fa6:	2110      	movs	r1, #16
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f00e fd99 	bl	8010ae0 <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	68db      	ldr	r3, [r3, #12]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f00e fdb0 	bl	8010b18 <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	4a19      	ldr	r2, [pc, #100]	@ (8002024 <Modbus_init+0xcc>)
 8001fbe:	2104      	movs	r1, #4
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f00e f857 	bl	8010074 <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 8001fc6:	4b15      	ldr	r3, [pc, #84]	@ (800201c <Modbus_init+0xc4>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 8001fcc:	4b13      	ldr	r3, [pc, #76]	@ (800201c <Modbus_init+0xc4>)
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	4b12      	ldr	r3, [pc, #72]	@ (800201c <Modbus_init+0xc4>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 8001fd8:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8001fdc:	4413      	add	r3, r2
 8001fde:	3302      	adds	r3, #2
 8001fe0:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	f00e f97f 	bl	80102e8 <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 8001fea:	4b0c      	ldr	r3, [pc, #48]	@ (800201c <Modbus_init+0xc4>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	691b      	ldr	r3, [r3, #16]
 8001ff0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d10c      	bne.n	8002014 <Modbus_init+0xbc>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8001ffa:	4b08      	ldr	r3, [pc, #32]	@ (800201c <Modbus_init+0xc4>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	691b      	ldr	r3, [r3, #16]
 8002000:	4618      	mov	r0, r3
 8002002:	f00b ffc3 	bl	800df8c <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8002006:	4b05      	ldr	r3, [pc, #20]	@ (800201c <Modbus_init+0xc4>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	691b      	ldr	r3, [r3, #16]
 800200c:	2100      	movs	r1, #0
 800200e:	4618      	mov	r0, r3
 8002010:	f00c fa12 	bl	800e438 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8002014:	bf00      	nop
 8002016:	3710      	adds	r7, #16
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	200003b0 	.word	0x200003b0
 8002020:	08001f19 	.word	0x08001f19
 8002024:	08001f39 	.word	0x08001f39

08002028 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8002028:	b480      	push	{r7}
 800202a:	b085      	sub	sp, #20
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	460b      	mov	r3, r1
 8002032:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8002034:	23ff      	movs	r3, #255	@ 0xff
 8002036:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8002038:	23ff      	movs	r3, #255	@ 0xff
 800203a:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 800203c:	e013      	b.n	8002066 <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	1c5a      	adds	r2, r3, #1
 8002042:	607a      	str	r2, [r7, #4]
 8002044:	781a      	ldrb	r2, [r3, #0]
 8002046:	7bbb      	ldrb	r3, [r7, #14]
 8002048:	4053      	eors	r3, r2
 800204a:	b2db      	uxtb	r3, r3
 800204c:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 800204e:	4a10      	ldr	r2, [pc, #64]	@ (8002090 <CRC16+0x68>)
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	4413      	add	r3, r2
 8002054:	781a      	ldrb	r2, [r3, #0]
 8002056:	7bfb      	ldrb	r3, [r7, #15]
 8002058:	4053      	eors	r3, r2
 800205a:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 800205c:	4a0d      	ldr	r2, [pc, #52]	@ (8002094 <CRC16+0x6c>)
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	4413      	add	r3, r2
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 8002066:	883b      	ldrh	r3, [r7, #0]
 8002068:	1e5a      	subs	r2, r3, #1
 800206a:	803a      	strh	r2, [r7, #0]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d1e6      	bne.n	800203e <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 8002070:	7bfb      	ldrb	r3, [r7, #15]
 8002072:	b21b      	sxth	r3, r3
 8002074:	021b      	lsls	r3, r3, #8
 8002076:	b21a      	sxth	r2, r3
 8002078:	7bbb      	ldrb	r3, [r7, #14]
 800207a:	b21b      	sxth	r3, r3
 800207c:	4313      	orrs	r3, r2
 800207e:	b21b      	sxth	r3, r3
 8002080:	b29b      	uxth	r3, r3
}
 8002082:	4618      	mov	r0, r3
 8002084:	3714      	adds	r7, #20
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	20000218 	.word	0x20000218
 8002094:	20000118 	.word	0x20000118

08002098 <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 800209e:	4b7e      	ldr	r3, [pc, #504]	@ (8002298 <Modbus_Protocal_Worker+0x200>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	7ddb      	ldrb	r3, [r3, #23]
 80020a4:	3b01      	subs	r3, #1
 80020a6:	2b03      	cmp	r3, #3
 80020a8:	d80a      	bhi.n	80020c0 <Modbus_Protocal_Worker+0x28>
 80020aa:	a201      	add	r2, pc, #4	@ (adr r2, 80020b0 <Modbus_Protocal_Worker+0x18>)
 80020ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020b0:	080020cb 	.word	0x080020cb
 80020b4:	0800225f 	.word	0x0800225f
 80020b8:	08002157 	.word	0x08002157
 80020bc:	0800219b 	.word	0x0800219b
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 80020c0:	4b75      	ldr	r3, [pc, #468]	@ (8002298 <Modbus_Protocal_Worker+0x200>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	2201      	movs	r2, #1
 80020c6:	75da      	strb	r2, [r3, #23]
		break;
 80020c8:	e0e1      	b.n	800228e <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 80020ca:	4b73      	ldr	r3, [pc, #460]	@ (8002298 <Modbus_Protocal_Worker+0x200>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d006      	beq.n	80020e4 <Modbus_Protocal_Worker+0x4c>
		{
			/*set state*/
			hModbus->Mstatus= Modbus_state_Emission;
 80020d6:	4b70      	ldr	r3, [pc, #448]	@ (8002298 <Modbus_Protocal_Worker+0x200>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	2202      	movs	r2, #2
 80020dc:	75da      	strb	r2, [r3, #23]
			Modbus_Emission();
 80020de:	f000 f9cd 	bl	800247c <Modbus_Emission>
 80020e2:	e018      	b.n	8002116 <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->huart->RxXferSize!=hModbus->huart->RxXferCount)
 80020e4:	4b6c      	ldr	r3, [pc, #432]	@ (8002298 <Modbus_Protocal_Worker+0x200>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80020ee:	4b6a      	ldr	r3, [pc, #424]	@ (8002298 <Modbus_Protocal_Worker+0x200>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d00b      	beq.n	8002116 <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 80020fe:	4b66      	ldr	r3, [pc, #408]	@ (8002298 <Modbus_Protocal_Worker+0x200>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	2200      	movs	r2, #0
 8002104:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 8002106:	4b64      	ldr	r3, [pc, #400]	@ (8002298 <Modbus_Protocal_Worker+0x200>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	2200      	movs	r2, #0
 800210c:	755a      	strb	r2, [r3, #21]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 800210e:	4b62      	ldr	r3, [pc, #392]	@ (8002298 <Modbus_Protocal_Worker+0x200>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	2203      	movs	r2, #3
 8002114:	75da      	strb	r2, [r3, #23]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 8002116:	4b60      	ldr	r3, [pc, #384]	@ (8002298 <Modbus_Protocal_Worker+0x200>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002120:	2b20      	cmp	r3, #32
 8002122:	f040 80ad 	bne.w	8002280 <Modbus_Protocal_Worker+0x1e8>
		{
			hModbus->modbusUartStructure.RxTail =0;
 8002126:	4b5c      	ldr	r3, [pc, #368]	@ (8002298 <Modbus_Protocal_Worker+0x200>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	2200      	movs	r2, #0
 800212c:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 8002130:	4b59      	ldr	r3, [pc, #356]	@ (8002298 <Modbus_Protocal_Worker+0x200>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	68d8      	ldr	r0, [r3, #12]
		    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 8002136:	4b58      	ldr	r3, [pc, #352]	@ (8002298 <Modbus_Protocal_Worker+0x200>)
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	4b57      	ldr	r3, [pc, #348]	@ (8002298 <Modbus_Protocal_Worker+0x200>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 8002142:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8002146:	4413      	add	r3, r2
 8002148:	3302      	adds	r3, #2
 800214a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800214e:	4619      	mov	r1, r3
 8002150:	f00e f8ca 	bl	80102e8 <HAL_UART_Receive_DMA>
					MODBUS_UART_BUFFER_SIZE );


		}
		break;
 8002154:	e094      	b.n	8002280 <Modbus_Protocal_Worker+0x1e8>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 8002156:	4b50      	ldr	r3, [pc, #320]	@ (8002298 <Modbus_Protocal_Worker+0x200>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	7d1b      	ldrb	r3, [r3, #20]
 800215c:	2b00      	cmp	r3, #0
 800215e:	f000 8091 	beq.w	8002284 <Modbus_Protocal_Worker+0x1ec>
		{
			/*reset recived flag*/
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 8002162:	4b4d      	ldr	r3, [pc, #308]	@ (8002298 <Modbus_Protocal_Worker+0x200>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	22fe      	movs	r2, #254	@ 0xfe
 8002168:	759a      	strb	r2, [r3, #22]
			hModbus->modbusUartStructure.RxTail =
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 800216a:	4b4b      	ldr	r3, [pc, #300]	@ (8002298 <Modbus_Protocal_Worker+0x200>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	f8b3 105c 	ldrh.w	r1, [r3, #92]	@ 0x5c
 8002174:	4b48      	ldr	r3, [pc, #288]	@ (8002298 <Modbus_Protocal_Worker+0x200>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	b29a      	uxth	r2, r3
			hModbus->modbusUartStructure.RxTail =
 8002184:	4b44      	ldr	r3, [pc, #272]	@ (8002298 <Modbus_Protocal_Worker+0x200>)
 8002186:	681b      	ldr	r3, [r3, #0]
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 8002188:	1a8a      	subs	r2, r1, r2
 800218a:	b292      	uxth	r2, r2
			hModbus->modbusUartStructure.RxTail =
 800218c:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 8002190:	4b41      	ldr	r3, [pc, #260]	@ (8002298 <Modbus_Protocal_Worker+0x200>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2204      	movs	r2, #4
 8002196:	75da      	strb	r2, [r3, #23]
		}
		break;
 8002198:	e074      	b.n	8002284 <Modbus_Protocal_Worker+0x1ec>
	case Modbus_state_ControlAndWaiting:

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 800219a:	4b3f      	ldr	r3, [pc, #252]	@ (8002298 <Modbus_Protocal_Worker+0x200>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f993 3016 	ldrsb.w	r3, [r3, #22]
 80021a2:	f113 0f02 	cmn.w	r3, #2
 80021a6:	d150      	bne.n	800224a <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 80021a8:	4b3b      	ldr	r3, [pc, #236]	@ (8002298 <Modbus_Protocal_Worker+0x200>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2200      	movs	r2, #0
 80021ae:	759a      	strb	r2, [r3, #22]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 80021b0:	4b39      	ldr	r3, [pc, #228]	@ (8002298 <Modbus_Protocal_Worker+0x200>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f203 2272 	addw	r2, r3, #626	@ 0x272
 80021b8:	4b37      	ldr	r3, [pc, #220]	@ (8002298 <Modbus_Protocal_Worker+0x200>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80021c0:	3b02      	subs	r3, #2
 80021c2:	4619      	mov	r1, r3
 80021c4:	4610      	mov	r0, r2
 80021c6:	f7ff ff2f 	bl	8002028 <CRC16>
 80021ca:	4603      	mov	r3, r0
 80021cc:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80021ce:	793a      	ldrb	r2, [r7, #4]
 80021d0:	4b31      	ldr	r3, [pc, #196]	@ (8002298 <Modbus_Protocal_Worker+0x200>)
 80021d2:	6819      	ldr	r1, [r3, #0]
 80021d4:	4b30      	ldr	r3, [pc, #192]	@ (8002298 <Modbus_Protocal_Worker+0x200>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80021dc:	3b02      	subs	r3, #2
 80021de:	440b      	add	r3, r1
 80021e0:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d10c      	bne.n	8002202 <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 80021e8:	797a      	ldrb	r2, [r7, #5]
 80021ea:	4b2b      	ldr	r3, [pc, #172]	@ (8002298 <Modbus_Protocal_Worker+0x200>)
 80021ec:	6819      	ldr	r1, [r3, #0]
 80021ee:	4b2a      	ldr	r3, [pc, #168]	@ (8002298 <Modbus_Protocal_Worker+0x200>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80021f6:	3b01      	subs	r3, #1
 80021f8:	440b      	add	r3, r1
 80021fa:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80021fe:	429a      	cmp	r2, r3
 8002200:	d004      	beq.n	800220c <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8002202:	4b25      	ldr	r3, [pc, #148]	@ (8002298 <Modbus_Protocal_Worker+0x200>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	22ff      	movs	r2, #255	@ 0xff
 8002208:	759a      	strb	r2, [r3, #22]
				break;
 800220a:	e040      	b.n	800228e <Modbus_Protocal_Worker+0x1f6>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 800220c:	4b22      	ldr	r3, [pc, #136]	@ (8002298 <Modbus_Protocal_Worker+0x200>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f893 2272 	ldrb.w	r2, [r3, #626]	@ 0x272
 8002214:	4b20      	ldr	r3, [pc, #128]	@ (8002298 <Modbus_Protocal_Worker+0x200>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	429a      	cmp	r2, r3
 800221c:	d113      	bne.n	8002246 <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 800221e:	4b1e      	ldr	r3, [pc, #120]	@ (8002298 <Modbus_Protocal_Worker+0x200>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f103 0018 	add.w	r0, r3, #24
					hModbus->modbusUartStructure.MessageBufferRx+1,
 8002226:	4b1c      	ldr	r3, [pc, #112]	@ (8002298 <Modbus_Protocal_Worker+0x200>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f203 2372 	addw	r3, r3, #626	@ 0x272
			memcpy(hModbus->Rxframe,
 800222e:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 8002230:	4b19      	ldr	r3, [pc, #100]	@ (8002298 <Modbus_Protocal_Worker+0x200>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8002238:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 800223a:	461a      	mov	r2, r3
 800223c:	f010 fbba 	bl	80129b4 <memcpy>

			//execute command
			Modbus_frame_response();
 8002240:	f000 f904 	bl	800244c <Modbus_frame_response>
 8002244:	e001      	b.n	800224a <Modbus_Protocal_Worker+0x1b2>
				break;
 8002246:	bf00      	nop
					}
		break;


	}
}
 8002248:	e021      	b.n	800228e <Modbus_Protocal_Worker+0x1f6>
		if(hModbus->Flag_T35TimeOut)
 800224a:	4b13      	ldr	r3, [pc, #76]	@ (8002298 <Modbus_Protocal_Worker+0x200>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	7d5b      	ldrb	r3, [r3, #21]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d019      	beq.n	8002288 <Modbus_Protocal_Worker+0x1f0>
			hModbus->Mstatus = Modbus_state_Idle;
 8002254:	4b10      	ldr	r3, [pc, #64]	@ (8002298 <Modbus_Protocal_Worker+0x200>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	2201      	movs	r2, #1
 800225a:	75da      	strb	r2, [r3, #23]
		break;
 800225c:	e014      	b.n	8002288 <Modbus_Protocal_Worker+0x1f0>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 800225e:	4b0e      	ldr	r3, [pc, #56]	@ (8002298 <Modbus_Protocal_Worker+0x200>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002268:	2b20      	cmp	r3, #32
 800226a:	d10f      	bne.n	800228c <Modbus_Protocal_Worker+0x1f4>
			hModbus->TxCount=0;
 800226c:	4b0a      	ldr	r3, [pc, #40]	@ (8002298 <Modbus_Protocal_Worker+0x200>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	2200      	movs	r2, #0
 8002272:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
			hModbus->Mstatus = Modbus_state_Idle;
 8002276:	4b08      	ldr	r3, [pc, #32]	@ (8002298 <Modbus_Protocal_Worker+0x200>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	2201      	movs	r2, #1
 800227c:	75da      	strb	r2, [r3, #23]
		break;
 800227e:	e005      	b.n	800228c <Modbus_Protocal_Worker+0x1f4>
		break;
 8002280:	bf00      	nop
 8002282:	e004      	b.n	800228e <Modbus_Protocal_Worker+0x1f6>
		break;
 8002284:	bf00      	nop
 8002286:	e002      	b.n	800228e <Modbus_Protocal_Worker+0x1f6>
		break;
 8002288:	bf00      	nop
 800228a:	e000      	b.n	800228e <Modbus_Protocal_Worker+0x1f6>
		break;
 800228c:	bf00      	nop
}
 800228e:	bf00      	nop
 8002290:	3708      	adds	r7, #8
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	200003b0 	.word	0x200003b0

0800229c <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 80022a2:	4b1d      	ldr	r3, [pc, #116]	@ (8002318 <modbusWrite1Register+0x7c>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	7e5b      	ldrb	r3, [r3, #25]
 80022a8:	021b      	lsls	r3, r3, #8
 80022aa:	b29b      	uxth	r3, r3
 80022ac:	4a1a      	ldr	r2, [pc, #104]	@ (8002318 <modbusWrite1Register+0x7c>)
 80022ae:	6812      	ldr	r2, [r2, #0]
 80022b0:	7e92      	ldrb	r2, [r2, #26]
 80022b2:	4413      	add	r3, r2
 80022b4:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 80022b6:	88fa      	ldrh	r2, [r7, #6]
 80022b8:	4b17      	ldr	r3, [pc, #92]	@ (8002318 <modbusWrite1Register+0x7c>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	429a      	cmp	r2, r3
 80022c0:	d903      	bls.n	80022ca <modbusWrite1Register+0x2e>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 80022c2:	2002      	movs	r0, #2
 80022c4:	f000 f8a0 	bl	8002408 <ModbusErrorReply>
			 return;
 80022c8:	e023      	b.n	8002312 <modbusWrite1Register+0x76>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 80022ca:	4b13      	ldr	r3, [pc, #76]	@ (8002318 <modbusWrite1Register+0x7c>)
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	4b12      	ldr	r3, [pc, #72]	@ (8002318 <modbusWrite1Register+0x7c>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	6859      	ldr	r1, [r3, #4]
 80022d4:	88fb      	ldrh	r3, [r7, #6]
 80022d6:	005b      	lsls	r3, r3, #1
 80022d8:	440b      	add	r3, r1
 80022da:	7ed2      	ldrb	r2, [r2, #27]
 80022dc:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 80022de:	4b0e      	ldr	r3, [pc, #56]	@ (8002318 <modbusWrite1Register+0x7c>)
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	4b0d      	ldr	r3, [pc, #52]	@ (8002318 <modbusWrite1Register+0x7c>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	6859      	ldr	r1, [r3, #4]
 80022e8:	88fb      	ldrh	r3, [r7, #6]
 80022ea:	005b      	lsls	r3, r3, #1
 80022ec:	440b      	add	r3, r1
 80022ee:	7f12      	ldrb	r2, [r2, #28]
 80022f0:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 80022f2:	4b09      	ldr	r3, [pc, #36]	@ (8002318 <modbusWrite1Register+0x7c>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f503 70a2 	add.w	r0, r3, #324	@ 0x144
			hModbus->Rxframe,
 80022fa:	4b07      	ldr	r3, [pc, #28]	@ (8002318 <modbusWrite1Register+0x7c>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	3318      	adds	r3, #24
	memcpy(hModbus->Txframe,
 8002300:	2208      	movs	r2, #8
 8002302:	4619      	mov	r1, r3
 8002304:	f010 fb56 	bl	80129b4 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 8002308:	4b03      	ldr	r3, [pc, #12]	@ (8002318 <modbusWrite1Register+0x7c>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2205      	movs	r2, #5
 800230e:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270



}
 8002312:	3708      	adds	r7, #8
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	200003b0 	.word	0x200003b0

0800231c <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 800231c:	b590      	push	{r4, r7, lr}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 8002322:	4b38      	ldr	r3, [pc, #224]	@ (8002404 <modbusRead1Register+0xe8>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	7edb      	ldrb	r3, [r3, #27]
 8002328:	021b      	lsls	r3, r3, #8
 800232a:	b29b      	uxth	r3, r3
 800232c:	4a35      	ldr	r2, [pc, #212]	@ (8002404 <modbusRead1Register+0xe8>)
 800232e:	6812      	ldr	r2, [r2, #0]
 8002330:	7f12      	ldrb	r2, [r2, #28]
 8002332:	4413      	add	r3, r2
 8002334:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 8002336:	4b33      	ldr	r3, [pc, #204]	@ (8002404 <modbusRead1Register+0xe8>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	7e5b      	ldrb	r3, [r3, #25]
 800233c:	021b      	lsls	r3, r3, #8
 800233e:	b29b      	uxth	r3, r3
 8002340:	4a30      	ldr	r2, [pc, #192]	@ (8002404 <modbusRead1Register+0xe8>)
 8002342:	6812      	ldr	r2, [r2, #0]
 8002344:	7e92      	ldrb	r2, [r2, #26]
 8002346:	4413      	add	r3, r2
 8002348:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 800234a:	88fb      	ldrh	r3, [r7, #6]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d002      	beq.n	8002356 <modbusRead1Register+0x3a>
 8002350:	88fb      	ldrh	r3, [r7, #6]
 8002352:	2b7d      	cmp	r3, #125	@ 0x7d
 8002354:	d903      	bls.n	800235e <modbusRead1Register+0x42>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 8002356:	2003      	movs	r0, #3
 8002358:	f000 f856 	bl	8002408 <ModbusErrorReply>
		 return;
 800235c:	e04e      	b.n	80023fc <modbusRead1Register+0xe0>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 800235e:	88ba      	ldrh	r2, [r7, #4]
 8002360:	4b28      	ldr	r3, [pc, #160]	@ (8002404 <modbusRead1Register+0xe8>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	429a      	cmp	r2, r3
 8002368:	d808      	bhi.n	800237c <modbusRead1Register+0x60>
 800236a:	88ba      	ldrh	r2, [r7, #4]
 800236c:	88fb      	ldrh	r3, [r7, #6]
 800236e:	4413      	add	r3, r2
 8002370:	461a      	mov	r2, r3
 8002372:	4b24      	ldr	r3, [pc, #144]	@ (8002404 <modbusRead1Register+0xe8>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	429a      	cmp	r2, r3
 800237a:	d903      	bls.n	8002384 <modbusRead1Register+0x68>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 800237c:	2002      	movs	r0, #2
 800237e:	f000 f843 	bl	8002408 <ModbusErrorReply>
		 return;
 8002382:	e03b      	b.n	80023fc <modbusRead1Register+0xe0>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 8002384:	4b1f      	ldr	r3, [pc, #124]	@ (8002404 <modbusRead1Register+0xe8>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2203      	movs	r2, #3
 800238a:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 800238e:	88fb      	ldrh	r3, [r7, #6]
 8002390:	b2da      	uxtb	r2, r3
 8002392:	4b1c      	ldr	r3, [pc, #112]	@ (8002404 <modbusRead1Register+0xe8>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	0052      	lsls	r2, r2, #1
 8002398:	b2d2      	uxtb	r2, r2
 800239a:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 800239e:	2400      	movs	r4, #0
 80023a0:	e020      	b.n	80023e4 <modbusRead1Register+0xc8>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 80023a2:	4b18      	ldr	r3, [pc, #96]	@ (8002404 <modbusRead1Register+0xe8>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	685a      	ldr	r2, [r3, #4]
 80023a8:	88bb      	ldrh	r3, [r7, #4]
 80023aa:	4423      	add	r3, r4
 80023ac:	005b      	lsls	r3, r3, #1
 80023ae:	18d1      	adds	r1, r2, r3
 80023b0:	4b14      	ldr	r3, [pc, #80]	@ (8002404 <modbusRead1Register+0xe8>)
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	1c63      	adds	r3, r4, #1
 80023b6:	005b      	lsls	r3, r3, #1
 80023b8:	7849      	ldrb	r1, [r1, #1]
 80023ba:	4413      	add	r3, r2
 80023bc:	460a      	mov	r2, r1
 80023be:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 80023c2:	4b10      	ldr	r3, [pc, #64]	@ (8002404 <modbusRead1Register+0xe8>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	685a      	ldr	r2, [r3, #4]
 80023c8:	88bb      	ldrh	r3, [r7, #4]
 80023ca:	4423      	add	r3, r4
 80023cc:	005b      	lsls	r3, r3, #1
 80023ce:	18d1      	adds	r1, r2, r3
 80023d0:	4b0c      	ldr	r3, [pc, #48]	@ (8002404 <modbusRead1Register+0xe8>)
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	0063      	lsls	r3, r4, #1
 80023d6:	3303      	adds	r3, #3
 80023d8:	7809      	ldrb	r1, [r1, #0]
 80023da:	4413      	add	r3, r2
 80023dc:	460a      	mov	r2, r1
 80023de:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	for(i=0; i<numberOfDataToRead;i++)
 80023e2:	3401      	adds	r4, #1
 80023e4:	88fb      	ldrh	r3, [r7, #6]
 80023e6:	429c      	cmp	r4, r3
 80023e8:	dbdb      	blt.n	80023a2 <modbusRead1Register+0x86>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 80023ea:	88fb      	ldrh	r3, [r7, #6]
 80023ec:	3301      	adds	r3, #1
 80023ee:	b2da      	uxtb	r2, r3
 80023f0:	4b04      	ldr	r3, [pc, #16]	@ (8002404 <modbusRead1Register+0xe8>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	0052      	lsls	r2, r2, #1
 80023f6:	b2d2      	uxtb	r2, r2
 80023f8:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270

}
 80023fc:	370c      	adds	r7, #12
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd90      	pop	{r4, r7, pc}
 8002402:	bf00      	nop
 8002404:	200003b0 	.word	0x200003b0

08002408 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	4603      	mov	r3, r0
 8002410:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 8002412:	4b0d      	ldr	r3, [pc, #52]	@ (8002448 <ModbusErrorReply+0x40>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	7e1a      	ldrb	r2, [r3, #24]
 8002418:	4b0b      	ldr	r3, [pc, #44]	@ (8002448 <ModbusErrorReply+0x40>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8002420:	b2d2      	uxtb	r2, r2
 8002422:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = Errorcode;
 8002426:	4b08      	ldr	r3, [pc, #32]	@ (8002448 <ModbusErrorReply+0x40>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	79fa      	ldrb	r2, [r7, #7]
 800242c:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->TxCount = 2;
 8002430:	4b05      	ldr	r3, [pc, #20]	@ (8002448 <ModbusErrorReply+0x40>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2202      	movs	r2, #2
 8002436:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
}
 800243a:	bf00      	nop
 800243c:	370c      	adds	r7, #12
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	200003b0 	.word	0x200003b0

0800244c <Modbus_frame_response>:

void Modbus_frame_response()
{
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 8002450:	4b09      	ldr	r3, [pc, #36]	@ (8002478 <Modbus_frame_response+0x2c>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	7e1b      	ldrb	r3, [r3, #24]
 8002456:	2b03      	cmp	r3, #3
 8002458:	d004      	beq.n	8002464 <Modbus_frame_response+0x18>
 800245a:	2b06      	cmp	r3, #6
 800245c:	d105      	bne.n	800246a <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 800245e:	f7ff ff1d 	bl	800229c <modbusWrite1Register>
		break;
 8002462:	e006      	b.n	8002472 <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 8002464:	f7ff ff5a 	bl	800231c <modbusRead1Register>
		break;
 8002468:	e003      	b.n	8002472 <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 800246a:	2001      	movs	r0, #1
 800246c:	f7ff ffcc 	bl	8002408 <ModbusErrorReply>
		break;
 8002470:	bf00      	nop

	}
}
 8002472:	bf00      	nop
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	200003b0 	.word	0x200003b0

0800247c <Modbus_Emission>:

void Modbus_Emission()
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8002482:	4b38      	ldr	r3, [pc, #224]	@ (8002564 <Modbus_Emission+0xe8>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800248c:	2b20      	cmp	r3, #32
 800248e:	d15d      	bne.n	800254c <Modbus_Emission+0xd0>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 8002490:	4b34      	ldr	r3, [pc, #208]	@ (8002564 <Modbus_Emission+0xe8>)
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	4b33      	ldr	r3, [pc, #204]	@ (8002564 <Modbus_Emission+0xe8>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	7812      	ldrb	r2, [r2, #0]
 800249a:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 800249e:	4b31      	ldr	r3, [pc, #196]	@ (8002564 <Modbus_Emission+0xe8>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
		memcpy
 80024a6:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 80024a8:	4b2e      	ldr	r3, [pc, #184]	@ (8002564 <Modbus_Emission+0xe8>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f503 71a2 	add.w	r1, r3, #324	@ 0x144
				hModbus->TxCount
 80024b0:	4b2c      	ldr	r3, [pc, #176]	@ (8002564 <Modbus_Emission+0xe8>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
		memcpy
 80024b8:	461a      	mov	r2, r3
 80024ba:	f010 fa7b 	bl	80129b4 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 80024be:	4b29      	ldr	r3, [pc, #164]	@ (8002564 <Modbus_Emission+0xe8>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 80024c6:	461a      	mov	r2, r3
 80024c8:	4b26      	ldr	r3, [pc, #152]	@ (8002564 <Modbus_Emission+0xe8>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	3203      	adds	r2, #3
 80024ce:	b292      	uxth	r2, r2
 80024d0:	f8a3 24d4 	strh.w	r2, [r3, #1236]	@ 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 80024d4:	4b23      	ldr	r3, [pc, #140]	@ (8002564 <Modbus_Emission+0xe8>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 80024dc:	4b21      	ldr	r3, [pc, #132]	@ (8002564 <Modbus_Emission+0xe8>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 80024e4:	3b02      	subs	r3, #2
 80024e6:	4619      	mov	r1, r3
 80024e8:	4610      	mov	r0, r2
 80024ea:	f7ff fd9d 	bl	8002028 <CRC16>
 80024ee:	4603      	mov	r3, r0
 80024f0:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 80024f2:	4b1c      	ldr	r3, [pc, #112]	@ (8002564 <Modbus_Emission+0xe8>)
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	4b1b      	ldr	r3, [pc, #108]	@ (8002564 <Modbus_Emission+0xe8>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 80024fe:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 8002500:	7939      	ldrb	r1, [r7, #4]
 8002502:	4413      	add	r3, r2
 8002504:	460a      	mov	r2, r1
 8002506:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 800250a:	4b16      	ldr	r3, [pc, #88]	@ (8002564 <Modbus_Emission+0xe8>)
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	4b15      	ldr	r3, [pc, #84]	@ (8002564 <Modbus_Emission+0xe8>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8002516:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 8002518:	7979      	ldrb	r1, [r7, #5]
 800251a:	4413      	add	r3, r2
 800251c:	460a      	mov	r2, r1
 800251e:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8002522:	4b10      	ldr	r3, [pc, #64]	@ (8002564 <Modbus_Emission+0xe8>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800252c:	2b20      	cmp	r3, #32
 800252e:	d10d      	bne.n	800254c <Modbus_Emission+0xd0>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 8002530:	4b0c      	ldr	r3, [pc, #48]	@ (8002564 <Modbus_Emission+0xe8>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 8002536:	4b0b      	ldr	r3, [pc, #44]	@ (8002564 <Modbus_Emission+0xe8>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f503 7169 	add.w	r1, r3, #932	@ 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 800253e:	4b09      	ldr	r3, [pc, #36]	@ (8002564 <Modbus_Emission+0xe8>)
 8002540:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 8002542:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8002546:	461a      	mov	r2, r3
 8002548:	f00d fe4e 	bl	80101e8 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 800254c:	4b05      	ldr	r3, [pc, #20]	@ (8002564 <Modbus_Emission+0xe8>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	2200      	movs	r2, #0
 8002552:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8002554:	4b03      	ldr	r3, [pc, #12]	@ (8002564 <Modbus_Emission+0xe8>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	2200      	movs	r2, #0
 800255a:	755a      	strb	r2, [r3, #21]

}
 800255c:	bf00      	nop
 800255e:	3708      	adds	r7, #8
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	200003b0 	.word	0x200003b0

08002568 <MotorKalman_Init>:
#include <string.h>
#include "MotorMatrixGenerator.h"

void MotorKalman_Init(MotorKalman* filter, float32_t dt, float32_t J, float32_t b,
                      float32_t K_t, float32_t K_e, float32_t R_a, float32_t L_a,
                      float32_t Q, float32_t R) {
 8002568:	b580      	push	{r7, lr}
 800256a:	b08c      	sub	sp, #48	@ 0x30
 800256c:	af00      	add	r7, sp, #0
 800256e:	6278      	str	r0, [r7, #36]	@ 0x24
 8002570:	ed87 0a08 	vstr	s0, [r7, #32]
 8002574:	edc7 0a07 	vstr	s1, [r7, #28]
 8002578:	ed87 1a06 	vstr	s2, [r7, #24]
 800257c:	edc7 1a05 	vstr	s3, [r7, #20]
 8002580:	ed87 2a04 	vstr	s4, [r7, #16]
 8002584:	edc7 2a03 	vstr	s5, [r7, #12]
 8002588:	ed87 3a02 	vstr	s6, [r7, #8]
 800258c:	edc7 3a01 	vstr	s7, [r7, #4]
 8002590:	ed87 4a00 	vstr	s8, [r7]
    // Store motor parameters
    filter->dt = dt;
 8002594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002596:	6a3a      	ldr	r2, [r7, #32]
 8002598:	f8c3 2338 	str.w	r2, [r3, #824]	@ 0x338
    filter->J = J;
 800259c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800259e:	69fa      	ldr	r2, [r7, #28]
 80025a0:	f8c3 233c 	str.w	r2, [r3, #828]	@ 0x33c
    filter->b = b;
 80025a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025a6:	69ba      	ldr	r2, [r7, #24]
 80025a8:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
    filter->K_t = K_t;
 80025ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ae:	697a      	ldr	r2, [r7, #20]
 80025b0:	f8c3 2344 	str.w	r2, [r3, #836]	@ 0x344
    filter->K_e = K_e;
 80025b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025b6:	693a      	ldr	r2, [r7, #16]
 80025b8:	f8c3 2348 	str.w	r2, [r3, #840]	@ 0x348
    filter->R_a = R_a;
 80025bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025be:	68fa      	ldr	r2, [r7, #12]
 80025c0:	f8c3 234c 	str.w	r2, [r3, #844]	@ 0x34c
    filter->L_a = L_a;
 80025c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025c6:	68ba      	ldr	r2, [r7, #8]
 80025c8:	f8c3 2350 	str.w	r2, [r3, #848]	@ 0x350

    // Initialize state vector to zeros
    memset(filter->X, 0, sizeof(filter->X));
 80025cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ce:	2210      	movs	r2, #16
 80025d0:	2100      	movs	r1, #0
 80025d2:	4618      	mov	r0, r3
 80025d4:	f010 f9aa 	bl	801292c <memset>

    // Initialize covariance matrix with high values on diagonal to reflect uncertainty
    memset(filter->P, 0, sizeof(filter->P));
 80025d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025da:	3310      	adds	r3, #16
 80025dc:	2240      	movs	r2, #64	@ 0x40
 80025de:	2100      	movs	r1, #0
 80025e0:	4618      	mov	r0, r3
 80025e2:	f010 f9a3 	bl	801292c <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80025e6:	2300      	movs	r3, #0
 80025e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80025ea:	e00c      	b.n	8002606 <MotorKalman_Init+0x9e>
        filter->P[i * MOTOR_KALMAN_NUM_STATES + i] = 100.0f;
 80025ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80025ee:	4613      	mov	r3, r2
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	4413      	add	r3, r2
 80025f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025f6:	3304      	adds	r3, #4
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	4413      	add	r3, r2
 80025fc:	4a79      	ldr	r2, [pc, #484]	@ (80027e4 <MotorKalman_Init+0x27c>)
 80025fe:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002600:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002602:	3301      	adds	r3, #1
 8002604:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002606:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002608:	2b03      	cmp	r3, #3
 800260a:	ddef      	ble.n	80025ec <MotorKalman_Init+0x84>
    }

    // Initialize identity matrix
    memset(filter->I_data, 0, sizeof(filter->I_data));
 800260c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800260e:	f503 733e 	add.w	r3, r3, #760	@ 0x2f8
 8002612:	2240      	movs	r2, #64	@ 0x40
 8002614:	2100      	movs	r1, #0
 8002616:	4618      	mov	r0, r3
 8002618:	f010 f988 	bl	801292c <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 800261c:	2300      	movs	r3, #0
 800261e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002620:	e00d      	b.n	800263e <MotorKalman_Init+0xd6>
        filter->I_data[i * MOTOR_KALMAN_NUM_STATES + i] = 1.0f;
 8002622:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002624:	4613      	mov	r3, r2
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	4413      	add	r3, r2
 800262a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800262c:	33be      	adds	r3, #190	@ 0xbe
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	4413      	add	r3, r2
 8002632:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002636:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800263a:	3301      	adds	r3, #1
 800263c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800263e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002640:	2b03      	cmp	r3, #3
 8002642:	ddee      	ble.n	8002622 <MotorKalman_Init+0xba>
    }

    // Initialize output matrix C - measuring only position by default
    memset(filter->C, 0, sizeof(filter->C));
 8002644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002646:	33f0      	adds	r3, #240	@ 0xf0
 8002648:	2210      	movs	r2, #16
 800264a:	2100      	movs	r1, #0
 800264c:	4618      	mov	r0, r3
 800264e:	f010 f96d 	bl	801292c <memset>
    filter->C[0] = 1.0f; // We only measure the position (first state) by default
 8002652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002654:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002658:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

    // Initialize process noise input matrix G
    memset(filter->G, 0, sizeof(filter->G));
 800265c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800265e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002662:	2210      	movs	r2, #16
 8002664:	2100      	movs	r1, #0
 8002666:	4618      	mov	r0, r3
 8002668:	f010 f960 	bl	801292c <memset>
    filter->G[1] = 1.0f; // Process noise primarily affects the velocity state (index 1)
 800266c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800266e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002672:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104


    // Set process and measurement noise values
    MotorKalman_SetProcessNoise(filter, Q);
 8002676:	ed97 0a01 	vldr	s0, [r7, #4]
 800267a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800267c:	f000 f922 	bl	80028c4 <MotorKalman_SetProcessNoise>
    MotorKalman_SetMeasurementNoise(filter, R);
 8002680:	ed97 0a00 	vldr	s0, [r7]
 8002684:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002686:	f000 f94d 	bl	8002924 <MotorKalman_SetMeasurementNoise>

    // Initialize ARM CMSIS DSP matrix instances - essential for safely using the functions
    arm_mat_init_f32(&filter->X_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->X);
 800268a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800268c:	f503 70d2 	add.w	r0, r3, #420	@ 0x1a4
 8002690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002692:	2201      	movs	r2, #1
 8002694:	2104      	movs	r1, #4
 8002696:	f00f fbd8 	bl	8011e4a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->P_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->P);
 800269a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800269c:	f503 70d6 	add.w	r0, r3, #428	@ 0x1ac
 80026a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026a2:	3310      	adds	r3, #16
 80026a4:	2204      	movs	r2, #4
 80026a6:	2104      	movs	r1, #4
 80026a8:	f00f fbcf 	bl	8011e4a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->I_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->I_data);
 80026ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ae:	f503 703c 	add.w	r0, r3, #752	@ 0x2f0
 80026b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026b4:	f503 733e 	add.w	r3, r3, #760	@ 0x2f8
 80026b8:	2204      	movs	r2, #4
 80026ba:	2104      	movs	r1, #4
 80026bc:	f00f fbc5 	bl	8011e4a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->R_matrix, MOTOR_KALMAN_NUM_OUTPUTS, MOTOR_KALMAN_NUM_OUTPUTS, filter->R);
 80026c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026c2:	f503 70e6 	add.w	r0, r3, #460	@ 0x1cc
 80026c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026c8:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 80026cc:	2201      	movs	r2, #1
 80026ce:	2101      	movs	r1, #1
 80026d0:	f00f fbbb 	bl	8011e4a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->measurement_matrix, MOTOR_KALMAN_NUM_OUTPUTS, 1, filter->measurement_data);
 80026d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d6:	f503 7036 	add.w	r0, r3, #728	@ 0x2d8
 80026da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026dc:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 80026e0:	2201      	movs	r2, #1
 80026e2:	2101      	movs	r1, #1
 80026e4:	f00f fbb1 	bl	8011e4a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->input_matrix, MOTOR_KALMAN_NUM_INPUTS, 1, filter->input_data);
 80026e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ea:	f503 7038 	add.w	r0, r3, #736	@ 0x2e0
 80026ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026f0:	f503 733b 	add.w	r3, r3, #748	@ 0x2ec
 80026f4:	2201      	movs	r2, #1
 80026f6:	2101      	movs	r1, #1
 80026f8:	f00f fba7 	bl	8011e4a <arm_mat_init_f32>

    // Initialize matrices for transposed versions
    arm_mat_init_f32(&filter->A_transpose_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->A_transpose_data);
 80026fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026fe:	f503 70ee 	add.w	r0, r3, #476	@ 0x1dc
 8002702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002704:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8002708:	2204      	movs	r2, #4
 800270a:	2104      	movs	r1, #4
 800270c:	f00f fb9d 	bl	8011e4a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->C_transpose_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_OUTPUTS, filter->C_transpose_data);
 8002710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002712:	f503 70f2 	add.w	r0, r3, #484	@ 0x1e4
 8002716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002718:	f503 730b 	add.w	r3, r3, #556	@ 0x22c
 800271c:	2201      	movs	r2, #1
 800271e:	2104      	movs	r1, #4
 8002720:	f00f fb93 	bl	8011e4a <arm_mat_init_f32>

    // Initialize temp matrices essential for calculations
    arm_mat_init_f32(&filter->temp_state_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->temp_state_data);
 8002724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002726:	f503 700f 	add.w	r0, r3, #572	@ 0x23c
 800272a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800272c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002730:	2201      	movs	r2, #1
 8002732:	2104      	movs	r1, #4
 8002734:	f00f fb89 	bl	8011e4a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_state_state_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->temp_state_state_data);
 8002738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800273a:	f503 7011 	add.w	r0, r3, #580	@ 0x244
 800273e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002740:	f503 731d 	add.w	r3, r3, #628	@ 0x274
 8002744:	2204      	movs	r2, #4
 8002746:	2104      	movs	r1, #4
 8002748:	f00f fb7f 	bl	8011e4a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_output_state_matrix, MOTOR_KALMAN_NUM_OUTPUTS, MOTOR_KALMAN_NUM_STATES, filter->temp_output_state_data);
 800274c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800274e:	f503 7013 	add.w	r0, r3, #588	@ 0x24c
 8002752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002754:	f503 732d 	add.w	r3, r3, #692	@ 0x2b4
 8002758:	2204      	movs	r2, #4
 800275a:	2101      	movs	r1, #1
 800275c:	f00f fb75 	bl	8011e4a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_output_output_matrix, MOTOR_KALMAN_NUM_OUTPUTS, MOTOR_KALMAN_NUM_OUTPUTS, filter->temp_output_output_data);
 8002760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002762:	f503 7015 	add.w	r0, r3, #596	@ 0x254
 8002766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002768:	f503 7331 	add.w	r3, r3, #708	@ 0x2c4
 800276c:	2201      	movs	r2, #1
 800276e:	2101      	movs	r1, #1
 8002770:	f00f fb6b 	bl	8011e4a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_state_output_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_OUTPUTS, filter->temp_state_output_data);
 8002774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002776:	f503 7017 	add.w	r0, r3, #604	@ 0x25c
 800277a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800277c:	f503 7332 	add.w	r3, r3, #712	@ 0x2c8
 8002780:	2201      	movs	r2, #1
 8002782:	2104      	movs	r1, #4
 8002784:	f00f fb61 	bl	8011e4a <arm_mat_init_f32>

    // Generate continuous-time matrices and discretize the model
    MotorKalman_DiscretizeModel(filter);
 8002788:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800278a:	f000 f82d 	bl	80027e8 <MotorKalman_DiscretizeModel>

    // Initialize system matrices after discretization
    arm_mat_init_f32(&filter->A_d_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->A_d);
 800278e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002790:	f503 70da 	add.w	r0, r3, #436	@ 0x1b4
 8002794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002796:	3390      	adds	r3, #144	@ 0x90
 8002798:	2204      	movs	r2, #4
 800279a:	2104      	movs	r1, #4
 800279c:	f00f fb55 	bl	8011e4a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->B_d_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_INPUTS, filter->B_d);
 80027a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027a2:	f503 70de 	add.w	r0, r3, #444	@ 0x1bc
 80027a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027a8:	33e0      	adds	r3, #224	@ 0xe0
 80027aa:	2201      	movs	r2, #1
 80027ac:	2104      	movs	r1, #4
 80027ae:	f00f fb4c 	bl	8011e4a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->Q_d_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->Q_d);
 80027b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027b4:	f503 70e2 	add.w	r0, r3, #452	@ 0x1c4
 80027b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ba:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80027be:	2204      	movs	r2, #4
 80027c0:	2104      	movs	r1, #4
 80027c2:	f00f fb42 	bl	8011e4a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->K_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_OUTPUTS, filter->K);
 80027c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027c8:	f503 70ea 	add.w	r0, r3, #468	@ 0x1d4
 80027cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ce:	f503 73ca 	add.w	r3, r3, #404	@ 0x194
 80027d2:	2201      	movs	r2, #1
 80027d4:	2104      	movs	r1, #4
 80027d6:	f00f fb38 	bl	8011e4a <arm_mat_init_f32>
}
 80027da:	bf00      	nop
 80027dc:	3730      	adds	r7, #48	@ 0x30
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	42c80000 	.word	0x42c80000

080027e8 <MotorKalman_DiscretizeModel>:

void MotorKalman_DiscretizeModel(MotorKalman* filter) {
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
    // Use the GenerateMotorMatrices function to discretize the model
    GenerateMotorMatrices(
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	edd3 7ad3 	vldr	s15, [r3, #844]	@ 0x34c
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	ed93 7ad4 	vldr	s14, [r3, #848]	@ 0x350
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	edd3 6acf 	vldr	s13, [r3, #828]	@ 0x33c
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	ed93 6ad0 	vldr	s12, [r3, #832]	@ 0x340
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	edd3 5ad2 	vldr	s11, [r3, #840]	@ 0x348
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	ed93 5ad1 	vldr	s10, [r3, #836]	@ 0x344
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	edd3 4ace 	vldr	s9, [r3, #824]	@ 0x338
        filter->J,       // Motor inertia
        filter->b,       // Viscous friction coefficient
        filter->K_e,     // Back-EMF constant
        filter->K_t,     // Torque constant
        filter->dt,      // Sample time
        filter->A_d,     // Output discrete state matrix
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	f103 0290 	add.w	r2, r3, #144	@ 0x90
        filter->B_d      // Output discrete input matrix
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	33e0      	adds	r3, #224	@ 0xe0
    GenerateMotorMatrices(
 8002824:	4619      	mov	r1, r3
 8002826:	4610      	mov	r0, r2
 8002828:	eeb0 3a64 	vmov.f32	s6, s9
 800282c:	eef0 2a45 	vmov.f32	s5, s10
 8002830:	eeb0 2a65 	vmov.f32	s4, s11
 8002834:	eef0 1a46 	vmov.f32	s3, s12
 8002838:	eeb0 1a66 	vmov.f32	s2, s13
 800283c:	eef0 0a47 	vmov.f32	s1, s14
 8002840:	eeb0 0a67 	vmov.f32	s0, s15
 8002844:	f001 f83c 	bl	80038c0 <GenerateMotorMatrices>
    );

    // Initialize discrete process noise matrix Q_d (simplified for stability)
    memset(filter->Q_d, 0, sizeof(filter->Q_d));
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800284e:	2240      	movs	r2, #64	@ 0x40
 8002850:	2100      	movs	r1, #0
 8002852:	4618      	mov	r0, r3
 8002854:	f010 f86a 	bl	801292c <memset>

    // Set diagonal elements for process noise (simpler but reliable approach)
    filter->Q_d[0 * MOTOR_KALMAN_NUM_STATES + 0] = 0.01f * filter->dt * filter->dt; // Position noise
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 800285e:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 80028bc <MotorKalman_DiscretizeModel+0xd4>
 8002862:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 800286c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	edc3 7a54 	vstr	s15, [r3, #336]	@ 0x150
    filter->Q_d[1 * MOTOR_KALMAN_NUM_STATES + 1] = filter->Q[1 * MOTOR_KALMAN_NUM_STATES + 1] * filter->dt; // Velocity noise (main process noise)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	ed93 7a49 	vldr	s14, [r3, #292]	@ 0x124
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 8002882:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	edc3 7a59 	vstr	s15, [r3, #356]	@ 0x164
    filter->Q_d[2 * MOTOR_KALMAN_NUM_STATES + 2] = 0.1f * filter->dt; // Load torque noise
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 8002892:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 80028c0 <MotorKalman_DiscretizeModel+0xd8>
 8002896:	ee67 7a87 	vmul.f32	s15, s15, s14
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	edc3 7a5e 	vstr	s15, [r3, #376]	@ 0x178
    filter->Q_d[3 * MOTOR_KALMAN_NUM_STATES + 3] = 0.01f * filter->dt; // Current noise
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 80028a6:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 80028bc <MotorKalman_DiscretizeModel+0xd4>
 80028aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	edc3 7a63 	vstr	s15, [r3, #396]	@ 0x18c
}
 80028b4:	bf00      	nop
 80028b6:	3708      	adds	r7, #8
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	3c23d70a 	.word	0x3c23d70a
 80028c0:	3dcccccd 	.word	0x3dcccccd

080028c4 <MotorKalman_SetProcessNoise>:

void MotorKalman_SetProcessNoise(MotorKalman* filter, float32_t Q) {
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	ed87 0a00 	vstr	s0, [r7]
    // Set the process noise covariance matrix Q (continuous)
    memset(filter->Q, 0, sizeof(filter->Q));
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 80028d6:	2240      	movs	r2, #64	@ 0x40
 80028d8:	2100      	movs	r1, #0
 80028da:	4618      	mov	r0, r3
 80028dc:	f010 f826 	bl	801292c <memset>

    // Only the velocity state (index 1) has process noise per G = [0;1;0;0]
    filter->Q[1 * MOTOR_KALMAN_NUM_STATES + 1] = Q * Q;
 80028e0:	edd7 7a00 	vldr	s15, [r7]
 80028e4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	edc3 7a49 	vstr	s15, [r3, #292]	@ 0x124
    filter->sigma_ml = Q;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	683a      	ldr	r2, [r7, #0]
 80028f2:	f8c3 2354 	str.w	r2, [r3, #852]	@ 0x354

    // Update the discrete process noise matrix if A_d has already been initialized
    if (filter->A_d[0] != 0.0f || filter->A_d[1] != 0.0f) {
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	edd3 7a24 	vldr	s15, [r3, #144]	@ 0x90
 80028fc:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002904:	d107      	bne.n	8002916 <MotorKalman_SetProcessNoise+0x52>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	edd3 7a25 	vldr	s15, [r3, #148]	@ 0x94
 800290c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002914:	d002      	beq.n	800291c <MotorKalman_SetProcessNoise+0x58>
        MotorKalman_DiscretizeModel(filter); // Recompute discretization with new Q
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f7ff ff66 	bl	80027e8 <MotorKalman_DiscretizeModel>
    }
}
 800291c:	bf00      	nop
 800291e:	3708      	adds	r7, #8
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}

08002924 <MotorKalman_SetMeasurementNoise>:

void MotorKalman_SetMeasurementNoise(MotorKalman* filter, float32_t R) {
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	ed87 0a00 	vstr	s0, [r7]
    // Store the noise value
    filter->sigma_pos = sqrtf(R);
 8002930:	ed97 0a00 	vldr	s0, [r7]
 8002934:	f010 f914 	bl	8012b60 <sqrtf>
 8002938:	eef0 7a40 	vmov.f32	s15, s0
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	edc3 7ad6 	vstr	s15, [r3, #856]	@ 0x358

    // Set the measurement noise covariance matrix R
    filter->R[0] = R;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	683a      	ldr	r2, [r7, #0]
 8002946:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
}
 800294a:	bf00      	nop
 800294c:	3708      	adds	r7, #8
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}

08002952 <MotorKalman_Predict>:
    filter->velocity = 0.0f;
    filter->load_torque = 0.0f;
    filter->current = 0.0f;
}

void MotorKalman_Predict(MotorKalman* filter, float32_t voltage_input) {
 8002952:	b580      	push	{r7, lr}
 8002954:	b0b2      	sub	sp, #200	@ 0xc8
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
 800295a:	ed87 0a00 	vstr	s0, [r7]
    // Store input for next step
    filter->input_data[0] = voltage_input;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	683a      	ldr	r2, [r7, #0]
 8002962:	f8c3 22ec 	str.w	r2, [r3, #748]	@ 0x2ec

    // 1. State prediction using simplified method (more stable in embedded systems)
    // Compute x = A*x + B*u directly without using matrix operations
    float32_t new_state[MOTOR_KALMAN_NUM_STATES] = {0};
 8002966:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800296a:	2200      	movs	r2, #0
 800296c:	601a      	str	r2, [r3, #0]
 800296e:	605a      	str	r2, [r3, #4]
 8002970:	609a      	str	r2, [r3, #8]
 8002972:	60da      	str	r2, [r3, #12]

    // Calculate A*x (manually)
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002974:	2300      	movs	r3, #0
 8002976:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800297a:	e041      	b.n	8002a00 <MotorKalman_Predict+0xae>
        new_state[i] = 0;
 800297c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	33c8      	adds	r3, #200	@ 0xc8
 8002984:	443b      	add	r3, r7
 8002986:	3b3c      	subs	r3, #60	@ 0x3c
 8002988:	f04f 0200 	mov.w	r2, #0
 800298c:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 800298e:	2300      	movs	r3, #0
 8002990:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002994:	e02b      	b.n	80029ee <MotorKalman_Predict+0x9c>
            new_state[i] += filter->A_d[i * MOTOR_KALMAN_NUM_STATES + j] * filter->X[j];
 8002996:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	33c8      	adds	r3, #200	@ 0xc8
 800299e:	443b      	add	r3, r7
 80029a0:	3b3c      	subs	r3, #60	@ 0x3c
 80029a2:	ed93 7a00 	vldr	s14, [r3]
 80029a6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80029aa:	009a      	lsls	r2, r3, #2
 80029ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80029b0:	4413      	add	r3, r2
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	3324      	adds	r3, #36	@ 0x24
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	4413      	add	r3, r2
 80029ba:	edd3 6a00 	vldr	s13, [r3]
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80029c4:	009b      	lsls	r3, r3, #2
 80029c6:	4413      	add	r3, r2
 80029c8:	edd3 7a00 	vldr	s15, [r3]
 80029cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	33c8      	adds	r3, #200	@ 0xc8
 80029dc:	443b      	add	r3, r7
 80029de:	3b3c      	subs	r3, #60	@ 0x3c
 80029e0:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80029e4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80029e8:	3301      	adds	r3, #1
 80029ea:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80029ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80029f2:	2b03      	cmp	r3, #3
 80029f4:	ddcf      	ble.n	8002996 <MotorKalman_Predict+0x44>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80029f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80029fa:	3301      	adds	r3, #1
 80029fc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002a00:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002a04:	2b03      	cmp	r3, #3
 8002a06:	ddb9      	ble.n	800297c <MotorKalman_Predict+0x2a>
        }
    }

    // Add B*u (manually)
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002a08:	2300      	movs	r3, #0
 8002a0a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002a0e:	e021      	b.n	8002a54 <MotorKalman_Predict+0x102>
        filter->X[i] = new_state[i] + filter->B_d[i] * voltage_input;
 8002a10:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	33c8      	adds	r3, #200	@ 0xc8
 8002a18:	443b      	add	r3, r7
 8002a1a:	3b3c      	subs	r3, #60	@ 0x3c
 8002a1c:	ed93 7a00 	vldr	s14, [r3]
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002a26:	3338      	adds	r3, #56	@ 0x38
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	4413      	add	r3, r2
 8002a2c:	edd3 6a00 	vldr	s13, [r3]
 8002a30:	edd7 7a00 	vldr	s15, [r7]
 8002a34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	4413      	add	r3, r2
 8002a46:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002a4a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002a4e:	3301      	adds	r3, #1
 8002a50:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002a54:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002a58:	2b03      	cmp	r3, #3
 8002a5a:	ddd9      	ble.n	8002a10 <MotorKalman_Predict+0xbe>
    }

    // 2. Covariance prediction using simplified method (Joseph form for stability)
    // Using direct matrix computation for P = A*P*A' + Q
    float32_t AP[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES] = {0};
 8002a5c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002a60:	2240      	movs	r2, #64	@ 0x40
 8002a62:	2100      	movs	r1, #0
 8002a64:	4618      	mov	r0, r3
 8002a66:	f00f ff61 	bl	801292c <memset>
    float32_t APAT[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES] = {0};
 8002a6a:	f107 030c 	add.w	r3, r7, #12
 8002a6e:	2240      	movs	r2, #64	@ 0x40
 8002a70:	2100      	movs	r1, #0
 8002a72:	4618      	mov	r0, r3
 8002a74:	f00f ff5a 	bl	801292c <memset>

    // Compute A*P
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002a78:	2300      	movs	r3, #0
 8002a7a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002a7e:	e05f      	b.n	8002b40 <MotorKalman_Predict+0x1ee>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002a80:	2300      	movs	r3, #0
 8002a82:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002a86:	e052      	b.n	8002b2e <MotorKalman_Predict+0x1dc>
            AP[i * MOTOR_KALMAN_NUM_STATES + j] = 0;
 8002a88:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002a8c:	009a      	lsls	r2, r3, #2
 8002a8e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002a92:	4413      	add	r3, r2
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	33c8      	adds	r3, #200	@ 0xc8
 8002a98:	443b      	add	r3, r7
 8002a9a:	3b7c      	subs	r3, #124	@ 0x7c
 8002a9c:	f04f 0200 	mov.w	r2, #0
 8002aa0:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002aa8:	e038      	b.n	8002b1c <MotorKalman_Predict+0x1ca>
                AP[i * MOTOR_KALMAN_NUM_STATES + j] +=
 8002aaa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002aae:	009a      	lsls	r2, r3, #2
 8002ab0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002ab4:	4413      	add	r3, r2
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	33c8      	adds	r3, #200	@ 0xc8
 8002aba:	443b      	add	r3, r7
 8002abc:	3b7c      	subs	r3, #124	@ 0x7c
 8002abe:	ed93 7a00 	vldr	s14, [r3]
                    filter->A_d[i * MOTOR_KALMAN_NUM_STATES + k] * filter->P[k * MOTOR_KALMAN_NUM_STATES + j];
 8002ac2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002ac6:	009a      	lsls	r2, r3, #2
 8002ac8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002acc:	4413      	add	r3, r2
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	3324      	adds	r3, #36	@ 0x24
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	4413      	add	r3, r2
 8002ad6:	edd3 6a00 	vldr	s13, [r3]
 8002ada:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002ade:	009a      	lsls	r2, r3, #2
 8002ae0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002ae4:	4413      	add	r3, r2
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	3304      	adds	r3, #4
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	4413      	add	r3, r2
 8002aee:	edd3 7a00 	vldr	s15, [r3]
 8002af2:	ee66 7aa7 	vmul.f32	s15, s13, s15
                AP[i * MOTOR_KALMAN_NUM_STATES + j] +=
 8002af6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002afa:	009a      	lsls	r2, r3, #2
 8002afc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002b00:	4413      	add	r3, r2
 8002b02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	33c8      	adds	r3, #200	@ 0xc8
 8002b0a:	443b      	add	r3, r7
 8002b0c:	3b7c      	subs	r3, #124	@ 0x7c
 8002b0e:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 8002b12:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002b16:	3301      	adds	r3, #1
 8002b18:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002b1c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002b20:	2b03      	cmp	r3, #3
 8002b22:	ddc2      	ble.n	8002aaa <MotorKalman_Predict+0x158>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002b24:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002b28:	3301      	adds	r3, #1
 8002b2a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002b2e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002b32:	2b03      	cmp	r3, #3
 8002b34:	dda8      	ble.n	8002a88 <MotorKalman_Predict+0x136>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002b36:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002b40:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002b44:	2b03      	cmp	r3, #3
 8002b46:	dd9b      	ble.n	8002a80 <MotorKalman_Predict+0x12e>
            }
        }
    }

    // Compute (A*P)*A'
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002b48:	2300      	movs	r3, #0
 8002b4a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002b4e:	e05f      	b.n	8002c10 <MotorKalman_Predict+0x2be>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002b50:	2300      	movs	r3, #0
 8002b52:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002b56:	e052      	b.n	8002bfe <MotorKalman_Predict+0x2ac>
            APAT[i * MOTOR_KALMAN_NUM_STATES + j] = 0;
 8002b58:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002b5c:	009a      	lsls	r2, r3, #2
 8002b5e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002b62:	4413      	add	r3, r2
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	33c8      	adds	r3, #200	@ 0xc8
 8002b68:	443b      	add	r3, r7
 8002b6a:	3bbc      	subs	r3, #188	@ 0xbc
 8002b6c:	f04f 0200 	mov.w	r2, #0
 8002b70:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 8002b72:	2300      	movs	r3, #0
 8002b74:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8002b78:	e038      	b.n	8002bec <MotorKalman_Predict+0x29a>
                APAT[i * MOTOR_KALMAN_NUM_STATES + j] +=
 8002b7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002b7e:	009a      	lsls	r2, r3, #2
 8002b80:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002b84:	4413      	add	r3, r2
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	33c8      	adds	r3, #200	@ 0xc8
 8002b8a:	443b      	add	r3, r7
 8002b8c:	3bbc      	subs	r3, #188	@ 0xbc
 8002b8e:	ed93 7a00 	vldr	s14, [r3]
                    AP[i * MOTOR_KALMAN_NUM_STATES + k] * filter->A_d[j * MOTOR_KALMAN_NUM_STATES + k];
 8002b92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002b96:	009a      	lsls	r2, r3, #2
 8002b98:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002b9c:	4413      	add	r3, r2
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	33c8      	adds	r3, #200	@ 0xc8
 8002ba2:	443b      	add	r3, r7
 8002ba4:	3b7c      	subs	r3, #124	@ 0x7c
 8002ba6:	edd3 6a00 	vldr	s13, [r3]
 8002baa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002bae:	009a      	lsls	r2, r3, #2
 8002bb0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002bb4:	4413      	add	r3, r2
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	3324      	adds	r3, #36	@ 0x24
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	4413      	add	r3, r2
 8002bbe:	edd3 7a00 	vldr	s15, [r3]
 8002bc2:	ee66 7aa7 	vmul.f32	s15, s13, s15
                APAT[i * MOTOR_KALMAN_NUM_STATES + j] +=
 8002bc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002bca:	009a      	lsls	r2, r3, #2
 8002bcc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002bd0:	4413      	add	r3, r2
 8002bd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	33c8      	adds	r3, #200	@ 0xc8
 8002bda:	443b      	add	r3, r7
 8002bdc:	3bbc      	subs	r3, #188	@ 0xbc
 8002bde:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 8002be2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002be6:	3301      	adds	r3, #1
 8002be8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8002bec:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002bf0:	2b03      	cmp	r3, #3
 8002bf2:	ddc2      	ble.n	8002b7a <MotorKalman_Predict+0x228>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002bf4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002bfe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002c02:	2b03      	cmp	r3, #3
 8002c04:	dda8      	ble.n	8002b58 <MotorKalman_Predict+0x206>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002c06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002c10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002c14:	2b03      	cmp	r3, #3
 8002c16:	dd9b      	ble.n	8002b50 <MotorKalman_Predict+0x1fe>
            }
        }
    }

    // Add Q to get P = A*P*A' + Q
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002c18:	2300      	movs	r3, #0
 8002c1a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002c1e:	e037      	b.n	8002c90 <MotorKalman_Predict+0x33e>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002c20:	2300      	movs	r3, #0
 8002c22:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002c26:	e02a      	b.n	8002c7e <MotorKalman_Predict+0x32c>
            filter->P[i * MOTOR_KALMAN_NUM_STATES + j] =
                APAT[i * MOTOR_KALMAN_NUM_STATES + j] + filter->Q_d[i * MOTOR_KALMAN_NUM_STATES + j];
 8002c28:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002c2c:	009a      	lsls	r2, r3, #2
 8002c2e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002c32:	4413      	add	r3, r2
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	33c8      	adds	r3, #200	@ 0xc8
 8002c38:	443b      	add	r3, r7
 8002c3a:	3bbc      	subs	r3, #188	@ 0xbc
 8002c3c:	ed93 7a00 	vldr	s14, [r3]
 8002c40:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002c44:	009a      	lsls	r2, r3, #2
 8002c46:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002c4a:	4413      	add	r3, r2
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	3354      	adds	r3, #84	@ 0x54
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	4413      	add	r3, r2
 8002c54:	edd3 7a00 	vldr	s15, [r3]
            filter->P[i * MOTOR_KALMAN_NUM_STATES + j] =
 8002c58:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002c5c:	009a      	lsls	r2, r3, #2
 8002c5e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002c62:	4413      	add	r3, r2
                APAT[i * MOTOR_KALMAN_NUM_STATES + j] + filter->Q_d[i * MOTOR_KALMAN_NUM_STATES + j];
 8002c64:	ee77 7a27 	vadd.f32	s15, s14, s15
            filter->P[i * MOTOR_KALMAN_NUM_STATES + j] =
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	3304      	adds	r3, #4
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	4413      	add	r3, r2
 8002c70:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002c74:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002c78:	3301      	adds	r3, #1
 8002c7a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002c7e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002c82:	2b03      	cmp	r3, #3
 8002c84:	ddd0      	ble.n	8002c28 <MotorKalman_Predict+0x2d6>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002c86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002c8a:	3301      	adds	r3, #1
 8002c8c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002c90:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002c94:	2b03      	cmp	r3, #3
 8002c96:	ddc3      	ble.n	8002c20 <MotorKalman_Predict+0x2ce>
        }
    }

    // Update state estimates for easy access
    filter->position = filter->X[0];
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f8c3 235c 	str.w	r2, [r3, #860]	@ 0x35c
    filter->velocity = filter->X[1];
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685a      	ldr	r2, [r3, #4]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f8c3 2360 	str.w	r2, [r3, #864]	@ 0x360
    filter->load_torque = filter->X[2];
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	689a      	ldr	r2, [r3, #8]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f8c3 2364 	str.w	r2, [r3, #868]	@ 0x364
    filter->current = filter->X[3];
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	68da      	ldr	r2, [r3, #12]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	f8c3 2368 	str.w	r2, [r3, #872]	@ 0x368

    // Update CMSIS DSP matrices for next update step
    arm_mat_init_f32(&filter->X_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->X);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	f503 70d2 	add.w	r0, r3, #420	@ 0x1a4
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2201      	movs	r2, #1
 8002cca:	2104      	movs	r1, #4
 8002ccc:	f00f f8bd 	bl	8011e4a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->P_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->P);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f503 70d6 	add.w	r0, r3, #428	@ 0x1ac
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	3310      	adds	r3, #16
 8002cda:	2204      	movs	r2, #4
 8002cdc:	2104      	movs	r1, #4
 8002cde:	f00f f8b4 	bl	8011e4a <arm_mat_init_f32>
}
 8002ce2:	bf00      	nop
 8002ce4:	37c8      	adds	r7, #200	@ 0xc8
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
	...

08002cec <MotorKalman_Update>:

void MotorKalman_Update(MotorKalman* filter, float32_t position) {
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b0d0      	sub	sp, #320	@ 0x140
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002cf6:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002cfa:	6018      	str	r0, [r3, #0]
 8002cfc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002d00:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002d04:	ed83 0a00 	vstr	s0, [r3]
    // Store the position measurement
    filter->measurement_data[0] = position;
 8002d08:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002d0c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8002d16:	f5a2 72a0 	sub.w	r2, r2, #320	@ 0x140
 8002d1a:	6812      	ldr	r2, [r2, #0]
 8002d1c:	f8c3 22e8 	str.w	r2, [r3, #744]	@ 0x2e8

    // 1. Compute innovation: y - C*x (directly, no matrix operations)
    float32_t Cx = filter->C[0] * filter->X[0] + filter->C[1] * filter->X[1] +
 8002d20:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002d24:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	ed93 7a3c 	vldr	s14, [r3, #240]	@ 0xf0
 8002d2e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002d32:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	edd3 7a00 	vldr	s15, [r3]
 8002d3c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d40:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002d44:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	edd3 6a3d 	vldr	s13, [r3, #244]	@ 0xf4
 8002d4e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002d52:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	edd3 7a01 	vldr	s15, [r3, #4]
 8002d5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d60:	ee37 7a27 	vadd.f32	s14, s14, s15
                  filter->C[2] * filter->X[2] + filter->C[3] * filter->X[3];
 8002d64:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002d68:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	edd3 6a3e 	vldr	s13, [r3, #248]	@ 0xf8
 8002d72:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002d76:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002d80:	ee66 7aa7 	vmul.f32	s15, s13, s15
    float32_t Cx = filter->C[0] * filter->X[0] + filter->C[1] * filter->X[1] +
 8002d84:	ee37 7a27 	vadd.f32	s14, s14, s15
                  filter->C[2] * filter->X[2] + filter->C[3] * filter->X[3];
 8002d88:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002d8c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	edd3 6a3f 	vldr	s13, [r3, #252]	@ 0xfc
 8002d96:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002d9a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	edd3 7a03 	vldr	s15, [r3, #12]
 8002da4:	ee66 7aa7 	vmul.f32	s15, s13, s15
    float32_t Cx = filter->C[0] * filter->X[0] + filter->C[1] * filter->X[1] +
 8002da8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dac:	edc7 7a40 	vstr	s15, [r7, #256]	@ 0x100
    float32_t innovation = position - Cx;
 8002db0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002db4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002db8:	ed93 7a00 	vldr	s14, [r3]
 8002dbc:	edd7 7a40 	vldr	s15, [r7, #256]	@ 0x100
 8002dc0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002dc4:	edc7 7a3f 	vstr	s15, [r7, #252]	@ 0xfc

    // 2. Compute innovation covariance: S = C*P*C' + R (directly)
    float32_t CP[MOTOR_KALMAN_NUM_STATES] = {0};
 8002dc8:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8002dcc:	2200      	movs	r2, #0
 8002dce:	601a      	str	r2, [r3, #0]
 8002dd0:	605a      	str	r2, [r3, #4]
 8002dd2:	609a      	str	r2, [r3, #8]
 8002dd4:	60da      	str	r2, [r3, #12]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8002ddc:	e04d      	b.n	8002e7a <MotorKalman_Update+0x18e>
        CP[i] = 0;
 8002dde:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002de8:	443b      	add	r3, r7
 8002dea:	3b58      	subs	r3, #88	@ 0x58
 8002dec:	f04f 0200 	mov.w	r2, #0
 8002df0:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002df2:	2300      	movs	r3, #0
 8002df4:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8002df8:	e036      	b.n	8002e68 <MotorKalman_Update+0x17c>
            CP[i] += filter->C[j] * filter->P[j * MOTOR_KALMAN_NUM_STATES + i];
 8002dfa:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002e04:	443b      	add	r3, r7
 8002e06:	3b58      	subs	r3, #88	@ 0x58
 8002e08:	ed93 7a00 	vldr	s14, [r3]
 8002e0c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002e10:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002e1a:	333c      	adds	r3, #60	@ 0x3c
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	4413      	add	r3, r2
 8002e20:	edd3 6a00 	vldr	s13, [r3]
 8002e24:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002e28:	009a      	lsls	r2, r3, #2
 8002e2a:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002e2e:	4413      	add	r3, r2
 8002e30:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8002e34:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8002e38:	6812      	ldr	r2, [r2, #0]
 8002e3a:	3304      	adds	r3, #4
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	4413      	add	r3, r2
 8002e40:	edd3 7a00 	vldr	s15, [r3]
 8002e44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e4c:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002e56:	443b      	add	r3, r7
 8002e58:	3b58      	subs	r3, #88	@ 0x58
 8002e5a:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002e5e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002e62:	3301      	adds	r3, #1
 8002e64:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8002e68:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002e6c:	2b03      	cmp	r3, #3
 8002e6e:	ddc4      	ble.n	8002dfa <MotorKalman_Update+0x10e>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002e70:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002e74:	3301      	adds	r3, #1
 8002e76:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8002e7a:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002e7e:	2b03      	cmp	r3, #3
 8002e80:	ddad      	ble.n	8002dde <MotorKalman_Update+0xf2>
        }
    }

    float32_t CPCT = 0;
 8002e82:	f04f 0300 	mov.w	r3, #0
 8002e86:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8002e90:	e021      	b.n	8002ed6 <MotorKalman_Update+0x1ea>
        CPCT += CP[i] * filter->C[i];
 8002e92:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002e9c:	443b      	add	r3, r7
 8002e9e:	3b58      	subs	r3, #88	@ 0x58
 8002ea0:	ed93 7a00 	vldr	s14, [r3]
 8002ea4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002ea8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002eb2:	333c      	adds	r3, #60	@ 0x3c
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	4413      	add	r3, r2
 8002eb8:	edd3 7a00 	vldr	s15, [r3]
 8002ebc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ec0:	ed97 7a4d 	vldr	s14, [r7, #308]	@ 0x134
 8002ec4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ec8:	edc7 7a4d 	vstr	s15, [r7, #308]	@ 0x134
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002ecc:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8002ed6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002eda:	2b03      	cmp	r3, #3
 8002edc:	ddd9      	ble.n	8002e92 <MotorKalman_Update+0x1a6>
    }

    float32_t S = CPCT + filter->R[0];
 8002ede:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002ee2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	edd3 7a64 	vldr	s15, [r3, #400]	@ 0x190
 8002eec:	ed97 7a4d 	vldr	s14, [r7, #308]	@ 0x134
 8002ef0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ef4:	edc7 7a3e 	vstr	s15, [r7, #248]	@ 0xf8

    // 3. Compute Kalman gain: K = P*C'/S (directly)
    float32_t PC[MOTOR_KALMAN_NUM_STATES] = {0};
 8002ef8:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8002efc:	2200      	movs	r2, #0
 8002efe:	601a      	str	r2, [r3, #0]
 8002f00:	605a      	str	r2, [r3, #4]
 8002f02:	609a      	str	r2, [r3, #8]
 8002f04:	60da      	str	r2, [r3, #12]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002f06:	2300      	movs	r3, #0
 8002f08:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8002f0c:	e04d      	b.n	8002faa <MotorKalman_Update+0x2be>
        PC[i] = 0;
 8002f0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002f18:	443b      	add	r3, r7
 8002f1a:	3b68      	subs	r3, #104	@ 0x68
 8002f1c:	f04f 0200 	mov.w	r2, #0
 8002f20:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002f22:	2300      	movs	r3, #0
 8002f24:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8002f28:	e036      	b.n	8002f98 <MotorKalman_Update+0x2ac>
            PC[i] += filter->P[i * MOTOR_KALMAN_NUM_STATES + j] * filter->C[j];
 8002f2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002f34:	443b      	add	r3, r7
 8002f36:	3b68      	subs	r3, #104	@ 0x68
 8002f38:	ed93 7a00 	vldr	s14, [r3]
 8002f3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002f40:	009a      	lsls	r2, r3, #2
 8002f42:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002f46:	4413      	add	r3, r2
 8002f48:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8002f4c:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8002f50:	6812      	ldr	r2, [r2, #0]
 8002f52:	3304      	adds	r3, #4
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	4413      	add	r3, r2
 8002f58:	edd3 6a00 	vldr	s13, [r3]
 8002f5c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002f60:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002f6a:	333c      	adds	r3, #60	@ 0x3c
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	4413      	add	r3, r2
 8002f70:	edd3 7a00 	vldr	s15, [r3]
 8002f74:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002f86:	443b      	add	r3, r7
 8002f88:	3b68      	subs	r3, #104	@ 0x68
 8002f8a:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002f8e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002f92:	3301      	adds	r3, #1
 8002f94:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8002f98:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002f9c:	2b03      	cmp	r3, #3
 8002f9e:	ddc4      	ble.n	8002f2a <MotorKalman_Update+0x23e>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002fa0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002fa4:	3301      	adds	r3, #1
 8002fa6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8002faa:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002fae:	2b03      	cmp	r3, #3
 8002fb0:	ddad      	ble.n	8002f0e <MotorKalman_Update+0x222>
        }
    }

    float32_t K[MOTOR_KALMAN_NUM_STATES] = {0};
 8002fb2:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	601a      	str	r2, [r3, #0]
 8002fba:	605a      	str	r2, [r3, #4]
 8002fbc:	609a      	str	r2, [r3, #8]
 8002fbe:	60da      	str	r2, [r3, #12]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002fc6:	e01a      	b.n	8002ffe <MotorKalman_Update+0x312>
        K[i] = PC[i] / S;
 8002fc8:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002fd2:	443b      	add	r3, r7
 8002fd4:	3b68      	subs	r3, #104	@ 0x68
 8002fd6:	edd3 6a00 	vldr	s13, [r3]
 8002fda:	ed97 7a3e 	vldr	s14, [r7, #248]	@ 0xf8
 8002fde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002fe2:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002fec:	443b      	add	r3, r7
 8002fee:	3b78      	subs	r3, #120	@ 0x78
 8002ff0:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002ff4:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002ff8:	3301      	adds	r3, #1
 8002ffa:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002ffe:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8003002:	2b03      	cmp	r3, #3
 8003004:	dde0      	ble.n	8002fc8 <MotorKalman_Update+0x2dc>
    }

    // 4. Update state estimate: x = x + K*innovation (directly)
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8003006:	2300      	movs	r3, #0
 8003008:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800300c:	e029      	b.n	8003062 <MotorKalman_Update+0x376>
        filter->X[i] += K[i] * innovation;
 800300e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003012:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	4413      	add	r3, r2
 8003020:	ed93 7a00 	vldr	s14, [r3]
 8003024:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 800302e:	443b      	add	r3, r7
 8003030:	3b78      	subs	r3, #120	@ 0x78
 8003032:	edd3 6a00 	vldr	s13, [r3]
 8003036:	edd7 7a3f 	vldr	s15, [r7, #252]	@ 0xfc
 800303a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800303e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003042:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003046:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	4413      	add	r3, r2
 8003054:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8003058:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800305c:	3301      	adds	r3, #1
 800305e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8003062:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003066:	2b03      	cmp	r3, #3
 8003068:	ddd1      	ble.n	800300e <MotorKalman_Update+0x322>
    }

    // 5. Update covariance matrix: P = (I - K*C)*P (Joseph form for better stability)
    float32_t KC[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES] = {0};
 800306a:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 800306e:	2240      	movs	r2, #64	@ 0x40
 8003070:	2100      	movs	r1, #0
 8003072:	4618      	mov	r0, r3
 8003074:	f00f fc5a 	bl	801292c <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8003078:	2300      	movs	r3, #0
 800307a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800307e:	e035      	b.n	80030ec <MotorKalman_Update+0x400>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8003080:	2300      	movs	r3, #0
 8003082:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8003086:	e028      	b.n	80030da <MotorKalman_Update+0x3ee>
            KC[i * MOTOR_KALMAN_NUM_STATES + j] = K[i] * filter->C[j];
 8003088:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8003092:	443b      	add	r3, r7
 8003094:	3b78      	subs	r3, #120	@ 0x78
 8003096:	ed93 7a00 	vldr	s14, [r3]
 800309a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800309e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80030a8:	333c      	adds	r3, #60	@ 0x3c
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	4413      	add	r3, r2
 80030ae:	edd3 7a00 	vldr	s15, [r3]
 80030b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80030b6:	009a      	lsls	r2, r3, #2
 80030b8:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80030bc:	4413      	add	r3, r2
 80030be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80030c8:	443b      	add	r3, r7
 80030ca:	3bb8      	subs	r3, #184	@ 0xb8
 80030cc:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80030d0:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80030d4:	3301      	adds	r3, #1
 80030d6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80030da:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80030de:	2b03      	cmp	r3, #3
 80030e0:	ddd2      	ble.n	8003088 <MotorKalman_Update+0x39c>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80030e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80030e6:	3301      	adds	r3, #1
 80030e8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80030ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80030f0:	2b03      	cmp	r3, #3
 80030f2:	ddc5      	ble.n	8003080 <MotorKalman_Update+0x394>
        }
    }

    float32_t IKC[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES] = {0};
 80030f4:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80030f8:	2240      	movs	r2, #64	@ 0x40
 80030fa:	2100      	movs	r1, #0
 80030fc:	4618      	mov	r0, r3
 80030fe:	f00f fc15 	bl	801292c <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8003102:	2300      	movs	r3, #0
 8003104:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8003108:	e038      	b.n	800317c <MotorKalman_Update+0x490>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 800310a:	2300      	movs	r3, #0
 800310c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8003110:	e02b      	b.n	800316a <MotorKalman_Update+0x47e>
            IKC[i * MOTOR_KALMAN_NUM_STATES + j] = (i == j ? 1.0f : 0.0f) - KC[i * MOTOR_KALMAN_NUM_STATES + j];
 8003112:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8003116:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800311a:	429a      	cmp	r2, r3
 800311c:	d102      	bne.n	8003124 <MotorKalman_Update+0x438>
 800311e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003122:	e001      	b.n	8003128 <MotorKalman_Update+0x43c>
 8003124:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 8003340 <MotorKalman_Update+0x654>
 8003128:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800312c:	009a      	lsls	r2, r3, #2
 800312e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003132:	4413      	add	r3, r2
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 800313a:	443b      	add	r3, r7
 800313c:	3bb8      	subs	r3, #184	@ 0xb8
 800313e:	edd3 7a00 	vldr	s15, [r3]
 8003142:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003146:	009a      	lsls	r2, r3, #2
 8003148:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800314c:	4413      	add	r3, r2
 800314e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8003158:	443b      	add	r3, r7
 800315a:	3bf8      	subs	r3, #248	@ 0xf8
 800315c:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8003160:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003164:	3301      	adds	r3, #1
 8003166:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 800316a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800316e:	2b03      	cmp	r3, #3
 8003170:	ddcf      	ble.n	8003112 <MotorKalman_Update+0x426>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8003172:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003176:	3301      	adds	r3, #1
 8003178:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 800317c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003180:	2b03      	cmp	r3, #3
 8003182:	ddc2      	ble.n	800310a <MotorKalman_Update+0x41e>
        }
    }

    // Store P temporarily
    float32_t P_temp[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES];
    memcpy(P_temp, filter->P, sizeof(P_temp));
 8003184:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003188:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f103 0110 	add.w	r1, r3, #16
 8003192:	f107 0308 	add.w	r3, r7, #8
 8003196:	2240      	movs	r2, #64	@ 0x40
 8003198:	4618      	mov	r0, r3
 800319a:	f00f fc0b 	bl	80129b4 <memcpy>

    // Compute (I - K*C)*P
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 800319e:	2300      	movs	r3, #0
 80031a0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80031a4:	e06e      	b.n	8003284 <MotorKalman_Update+0x598>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80031a6:	2300      	movs	r3, #0
 80031a8:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80031ac:	e061      	b.n	8003272 <MotorKalman_Update+0x586>
            filter->P[i * MOTOR_KALMAN_NUM_STATES + j] = 0;
 80031ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80031b2:	009a      	lsls	r2, r3, #2
 80031b4:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80031b8:	4413      	add	r3, r2
 80031ba:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80031be:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 80031c2:	6812      	ldr	r2, [r2, #0]
 80031c4:	3304      	adds	r3, #4
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	4413      	add	r3, r2
 80031ca:	f04f 0200 	mov.w	r2, #0
 80031ce:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 80031d0:	2300      	movs	r3, #0
 80031d2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80031d6:	e043      	b.n	8003260 <MotorKalman_Update+0x574>
                filter->P[i * MOTOR_KALMAN_NUM_STATES + j] +=
 80031d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80031dc:	009a      	lsls	r2, r3, #2
 80031de:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80031e2:	4413      	add	r3, r2
 80031e4:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80031e8:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 80031ec:	6812      	ldr	r2, [r2, #0]
 80031ee:	3304      	adds	r3, #4
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	4413      	add	r3, r2
 80031f4:	ed93 7a00 	vldr	s14, [r3]
                    IKC[i * MOTOR_KALMAN_NUM_STATES + k] * P_temp[k * MOTOR_KALMAN_NUM_STATES + j];
 80031f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80031fc:	009a      	lsls	r2, r3, #2
 80031fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003202:	4413      	add	r3, r2
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 800320a:	443b      	add	r3, r7
 800320c:	3bf8      	subs	r3, #248	@ 0xf8
 800320e:	edd3 6a00 	vldr	s13, [r3]
 8003212:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003216:	009a      	lsls	r2, r3, #2
 8003218:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800321c:	4413      	add	r3, r2
 800321e:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8003222:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	4413      	add	r3, r2
 800322a:	edd3 7a00 	vldr	s15, [r3]
 800322e:	ee66 7aa7 	vmul.f32	s15, s13, s15
                filter->P[i * MOTOR_KALMAN_NUM_STATES + j] +=
 8003232:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003236:	009a      	lsls	r2, r3, #2
 8003238:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800323c:	4413      	add	r3, r2
 800323e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003242:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8003246:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 800324a:	6812      	ldr	r2, [r2, #0]
 800324c:	3304      	adds	r3, #4
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	4413      	add	r3, r2
 8003252:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 8003256:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800325a:	3301      	adds	r3, #1
 800325c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003260:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003264:	2b03      	cmp	r3, #3
 8003266:	ddb7      	ble.n	80031d8 <MotorKalman_Update+0x4ec>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8003268:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800326c:	3301      	adds	r3, #1
 800326e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003272:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8003276:	2b03      	cmp	r3, #3
 8003278:	dd99      	ble.n	80031ae <MotorKalman_Update+0x4c2>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 800327a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800327e:	3301      	adds	r3, #1
 8003280:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003284:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003288:	2b03      	cmp	r3, #3
 800328a:	dd8c      	ble.n	80031a6 <MotorKalman_Update+0x4ba>
            }
        }
    }

    // Update state estimates for easy access
    filter->position = filter->X[0];
 800328c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003290:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800329c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f8c3 235c 	str.w	r2, [r3, #860]	@ 0x35c
    filter->velocity = filter->X[1];
 80032a6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80032aa:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	685a      	ldr	r2, [r3, #4]
 80032b2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80032b6:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f8c3 2360 	str.w	r2, [r3, #864]	@ 0x360
    filter->load_torque = filter->X[2];
 80032c0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80032c4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	689a      	ldr	r2, [r3, #8]
 80032cc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80032d0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f8c3 2364 	str.w	r2, [r3, #868]	@ 0x364
    filter->current = filter->X[3];
 80032da:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80032de:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	68da      	ldr	r2, [r3, #12]
 80032e6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80032ea:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f8c3 2368 	str.w	r2, [r3, #872]	@ 0x368

    // Update CMSIS DSP matrices for next time
    arm_mat_init_f32(&filter->X_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->X);
 80032f4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80032f8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f503 70d2 	add.w	r0, r3, #420	@ 0x1a4
 8003302:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003306:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	2201      	movs	r2, #1
 800330e:	2104      	movs	r1, #4
 8003310:	f00e fd9b 	bl	8011e4a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->P_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->P);
 8003314:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003318:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f503 70d6 	add.w	r0, r3, #428	@ 0x1ac
 8003322:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003326:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	3310      	adds	r3, #16
 800332e:	2204      	movs	r2, #4
 8003330:	2104      	movs	r1, #4
 8003332:	f00e fd8a 	bl	8011e4a <arm_mat_init_f32>
}
 8003336:	bf00      	nop
 8003338:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}
 8003340:	00000000 	.word	0x00000000

08003344 <MotorKalman_Estimate>:

float MotorKalman_Estimate(MotorKalman* filter, float32_t voltage_input, float32_t position) {
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	60f8      	str	r0, [r7, #12]
 800334c:	ed87 0a02 	vstr	s0, [r7, #8]
 8003350:	edc7 0a01 	vstr	s1, [r7, #4]
    // Execute the predict and update steps
    MotorKalman_Predict(filter, voltage_input);
 8003354:	ed97 0a02 	vldr	s0, [r7, #8]
 8003358:	68f8      	ldr	r0, [r7, #12]
 800335a:	f7ff fafa 	bl	8002952 <MotorKalman_Predict>
    MotorKalman_Update(filter, position);
 800335e:	ed97 0a01 	vldr	s0, [r7, #4]
 8003362:	68f8      	ldr	r0, [r7, #12]
 8003364:	f7ff fcc2 	bl	8002cec <MotorKalman_Update>

    return filter->velocity;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f8d3 3360 	ldr.w	r3, [r3, #864]	@ 0x360
 800336e:	ee07 3a90 	vmov	s15, r3
}
 8003372:	eeb0 0a67 	vmov.f32	s0, s15
 8003376:	3710      	adds	r7, #16
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}

0800337c <matrix_copy>:

#include "MotorMatrixGenerator.h"
#include <math.h>
#include <string.h>

static void matrix_copy(float32_t *src, float32_t *dst, int size) {
 800337c:	b480      	push	{r7}
 800337e:	b087      	sub	sp, #28
 8003380:	af00      	add	r7, sp, #0
 8003382:	60f8      	str	r0, [r7, #12]
 8003384:	60b9      	str	r1, [r7, #8]
 8003386:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < size; i++) {
 8003388:	2300      	movs	r3, #0
 800338a:	617b      	str	r3, [r7, #20]
 800338c:	e00c      	b.n	80033a8 <matrix_copy+0x2c>
        dst[i] = src[i];
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	68fa      	ldr	r2, [r7, #12]
 8003394:	441a      	add	r2, r3
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	68b9      	ldr	r1, [r7, #8]
 800339c:	440b      	add	r3, r1
 800339e:	6812      	ldr	r2, [r2, #0]
 80033a0:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < size; i++) {
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	3301      	adds	r3, #1
 80033a6:	617b      	str	r3, [r7, #20]
 80033a8:	697a      	ldr	r2, [r7, #20]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	429a      	cmp	r2, r3
 80033ae:	dbee      	blt.n	800338e <matrix_copy+0x12>
    }
}
 80033b0:	bf00      	nop
 80033b2:	bf00      	nop
 80033b4:	371c      	adds	r7, #28
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr
	...

080033c0 <discretize_system_with_arm>:

static void discretize_system_with_arm(float32_t *A_c, float32_t *B_c, float32_t dt,
                                      float32_t *A_d, float32_t *B_d) {
 80033c0:	b590      	push	{r4, r7, lr}
 80033c2:	f5ad 7d2f 	sub.w	sp, sp, #700	@ 0x2bc
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	f507 742e 	add.w	r4, r7, #696	@ 0x2b8
 80033cc:	f5a4 7429 	sub.w	r4, r4, #676	@ 0x2a4
 80033d0:	6020      	str	r0, [r4, #0]
 80033d2:	f507 702e 	add.w	r0, r7, #696	@ 0x2b8
 80033d6:	f5a0 702a 	sub.w	r0, r0, #680	@ 0x2a8
 80033da:	6001      	str	r1, [r0, #0]
 80033dc:	f507 712e 	add.w	r1, r7, #696	@ 0x2b8
 80033e0:	f5a1 712b 	sub.w	r1, r1, #684	@ 0x2ac
 80033e4:	ed81 0a00 	vstr	s0, [r1]
 80033e8:	f507 712e 	add.w	r1, r7, #696	@ 0x2b8
 80033ec:	f5a1 712c 	sub.w	r1, r1, #688	@ 0x2b0
 80033f0:	600a      	str	r2, [r1, #0]
 80033f2:	f507 722e 	add.w	r2, r7, #696	@ 0x2b8
 80033f6:	f5a2 722d 	sub.w	r2, r2, #692	@ 0x2b4
 80033fa:	6013      	str	r3, [r2, #0]
    // Initialize ARM matrix instances
    arm_matrix_instance_f32 A_c_matrix, A_d_matrix, B_c_matrix, B_d_matrix;
    arm_mat_init_f32(&A_c_matrix, 4, 4, A_c);
 80033fc:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003400:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8003404:	f507 7029 	add.w	r0, r7, #676	@ 0x2a4
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	2204      	movs	r2, #4
 800340c:	2104      	movs	r1, #4
 800340e:	f00e fd1c 	bl	8011e4a <arm_mat_init_f32>
    arm_mat_init_f32(&A_d_matrix, 4, 4, A_d);
 8003412:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003416:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 800341a:	f507 7027 	add.w	r0, r7, #668	@ 0x29c
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	2204      	movs	r2, #4
 8003422:	2104      	movs	r1, #4
 8003424:	f00e fd11 	bl	8011e4a <arm_mat_init_f32>
    arm_mat_init_f32(&B_c_matrix, 4, 1, B_c);
 8003428:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800342c:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8003430:	f507 7025 	add.w	r0, r7, #660	@ 0x294
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	2201      	movs	r2, #1
 8003438:	2104      	movs	r1, #4
 800343a:	f00e fd06 	bl	8011e4a <arm_mat_init_f32>
    arm_mat_init_f32(&B_d_matrix, 4, 1, B_d);
 800343e:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003442:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8003446:	f507 7023 	add.w	r0, r7, #652	@ 0x28c
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	2201      	movs	r2, #1
 800344e:	2104      	movs	r1, #4
 8003450:	f00e fcfb 	bl	8011e4a <arm_mat_init_f32>

    // Create identity matrix
    float32_t I_data[16] = {0};
 8003454:	f507 7313 	add.w	r3, r7, #588	@ 0x24c
 8003458:	2240      	movs	r2, #64	@ 0x40
 800345a:	2100      	movs	r1, #0
 800345c:	4618      	mov	r0, r3
 800345e:	f00f fa65 	bl	801292c <memset>
    arm_matrix_instance_f32 I_matrix;
    arm_mat_init_f32(&I_matrix, 4, 4, I_data);
 8003462:	f507 7313 	add.w	r3, r7, #588	@ 0x24c
 8003466:	f507 7011 	add.w	r0, r7, #580	@ 0x244
 800346a:	2204      	movs	r2, #4
 800346c:	2104      	movs	r1, #4
 800346e:	f00e fcec 	bl	8011e4a <arm_mat_init_f32>
    for (int i = 0; i < 4; i++) {
 8003472:	2300      	movs	r3, #0
 8003474:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
 8003478:	e011      	b.n	800349e <discretize_system_with_arm+0xde>
        I_data[i*4 + i] = 1.0f;
 800347a:	f8d7 22b4 	ldr.w	r2, [r7, #692]	@ 0x2b4
 800347e:	4613      	mov	r3, r2
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	4413      	add	r3, r2
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	f503 732e 	add.w	r3, r3, #696	@ 0x2b8
 800348a:	443b      	add	r3, r7
 800348c:	3b6c      	subs	r3, #108	@ 0x6c
 800348e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003492:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 4; i++) {
 8003494:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 8003498:	3301      	adds	r3, #1
 800349a:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
 800349e:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 80034a2:	2b03      	cmp	r3, #3
 80034a4:	dde9      	ble.n	800347a <discretize_system_with_arm+0xba>
    }

    // Create scaled A matrix (A*dt)
    float32_t A_dt_data[16];
    arm_matrix_instance_f32 A_dt_matrix;
    arm_mat_init_f32(&A_dt_matrix, 4, 4, A_dt_data);
 80034a6:	f507 7301 	add.w	r3, r7, #516	@ 0x204
 80034aa:	f507 70fe 	add.w	r0, r7, #508	@ 0x1fc
 80034ae:	2204      	movs	r2, #4
 80034b0:	2104      	movs	r1, #4
 80034b2:	f00e fcca 	bl	8011e4a <arm_mat_init_f32>
    arm_mat_scale_f32(&A_c_matrix, dt, &A_dt_matrix);
 80034b6:	f507 71fe 	add.w	r1, r7, #508	@ 0x1fc
 80034ba:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80034be:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80034c2:	f507 7229 	add.w	r2, r7, #676	@ 0x2a4
 80034c6:	ed93 0a00 	vldr	s0, [r3]
 80034ca:	4610      	mov	r0, r2
 80034cc:	f00f f8c6 	bl	801265c <arm_mat_scale_f32>

    // Calculate A_d = exp(A*dt) using Taylor series approximation
    // Initialize A_d to identity matrix
    matrix_copy(I_data, A_d, 16);
 80034d0:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80034d4:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 80034d8:	f507 7013 	add.w	r0, r7, #588	@ 0x24c
 80034dc:	2210      	movs	r2, #16
 80034de:	6819      	ldr	r1, [r3, #0]
 80034e0:	f7ff ff4c 	bl	800337c <matrix_copy>

    // Calculate powers of A*dt and add them to A_d
    float32_t A_power_data[16];
    float32_t temp_data[16];
    arm_matrix_instance_f32 A_power_matrix, temp_matrix;
    arm_mat_init_f32(&A_power_matrix, 4, 4, A_power_data);
 80034e4:	f507 73de 	add.w	r3, r7, #444	@ 0x1bc
 80034e8:	f507 70ba 	add.w	r0, r7, #372	@ 0x174
 80034ec:	2204      	movs	r2, #4
 80034ee:	2104      	movs	r1, #4
 80034f0:	f00e fcab 	bl	8011e4a <arm_mat_init_f32>
    arm_mat_init_f32(&temp_matrix, 4, 4, temp_data);
 80034f4:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 80034f8:	f507 70b6 	add.w	r0, r7, #364	@ 0x16c
 80034fc:	2204      	movs	r2, #4
 80034fe:	2104      	movs	r1, #4
 8003500:	f00e fca3 	bl	8011e4a <arm_mat_init_f32>

    // First term: I + A*dt
    arm_mat_add_f32(&I_matrix, &A_dt_matrix, &A_d_matrix);
 8003504:	f507 7227 	add.w	r2, r7, #668	@ 0x29c
 8003508:	f507 71fe 	add.w	r1, r7, #508	@ 0x1fc
 800350c:	f507 7311 	add.w	r3, r7, #580	@ 0x244
 8003510:	4618      	mov	r0, r3
 8003512:	f00e fc5f 	bl	8011dd4 <arm_mat_add_f32>

    // Copy A*dt to A_power for computing higher powers
    matrix_copy(A_dt_data, A_power_data, 16);
 8003516:	f507 71de 	add.w	r1, r7, #444	@ 0x1bc
 800351a:	f507 7301 	add.w	r3, r7, #516	@ 0x204
 800351e:	2210      	movs	r2, #16
 8003520:	4618      	mov	r0, r3
 8003522:	f7ff ff2b 	bl	800337c <matrix_copy>

    // Compute higher order terms using Taylor series
    // A_d = I + A*dt + (A*dt)^2/2 + (A*dt)^3/6 + ...
    float32_t factorial = 1.0f;
 8003526:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800352a:	f8c7 32b0 	str.w	r3, [r7, #688]	@ 0x2b0
    for (int term = 2; term <= 10; term++) {  // Using more terms for better accuracy
 800352e:	2302      	movs	r3, #2
 8003530:	f8c7 32ac 	str.w	r3, [r7, #684]	@ 0x2ac
 8003534:	e03a      	b.n	80035ac <discretize_system_with_arm+0x1ec>
        factorial *= term;
 8003536:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 800353a:	ee07 3a90 	vmov	s15, r3
 800353e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003542:	ed97 7aac 	vldr	s14, [r7, #688]	@ 0x2b0
 8003546:	ee67 7a27 	vmul.f32	s15, s14, s15
 800354a:	edc7 7aac 	vstr	s15, [r7, #688]	@ 0x2b0

        // Compute next power: A_power = A_power * A_dt
        arm_mat_mult_f32(&A_power_matrix, &A_dt_matrix, &temp_matrix);
 800354e:	f507 72b6 	add.w	r2, r7, #364	@ 0x16c
 8003552:	f507 71fe 	add.w	r1, r7, #508	@ 0x1fc
 8003556:	f507 73ba 	add.w	r3, r7, #372	@ 0x174
 800355a:	4618      	mov	r0, r3
 800355c:	f00f f804 	bl	8012568 <arm_mat_mult_f32>
        matrix_copy(temp_data, A_power_data, 16);
 8003560:	f507 71de 	add.w	r1, r7, #444	@ 0x1bc
 8003564:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 8003568:	2210      	movs	r2, #16
 800356a:	4618      	mov	r0, r3
 800356c:	f7ff ff06 	bl	800337c <matrix_copy>

        // Scale by 1/factorial
        arm_mat_scale_f32(&A_power_matrix, 1.0f/factorial, &temp_matrix);
 8003570:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003574:	edd7 7aac 	vldr	s15, [r7, #688]	@ 0x2b0
 8003578:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800357c:	f507 72b6 	add.w	r2, r7, #364	@ 0x16c
 8003580:	f507 73ba 	add.w	r3, r7, #372	@ 0x174
 8003584:	4611      	mov	r1, r2
 8003586:	eeb0 0a47 	vmov.f32	s0, s14
 800358a:	4618      	mov	r0, r3
 800358c:	f00f f866 	bl	801265c <arm_mat_scale_f32>

        // Add to A_d
        arm_mat_add_f32(&A_d_matrix, &temp_matrix, &A_d_matrix);
 8003590:	f507 7227 	add.w	r2, r7, #668	@ 0x29c
 8003594:	f507 71b6 	add.w	r1, r7, #364	@ 0x16c
 8003598:	f507 7327 	add.w	r3, r7, #668	@ 0x29c
 800359c:	4618      	mov	r0, r3
 800359e:	f00e fc19 	bl	8011dd4 <arm_mat_add_f32>
    for (int term = 2; term <= 10; term++) {  // Using more terms for better accuracy
 80035a2:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 80035a6:	3301      	adds	r3, #1
 80035a8:	f8c7 32ac 	str.w	r3, [r7, #684]	@ 0x2ac
 80035ac:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 80035b0:	2b0a      	cmp	r3, #10
 80035b2:	ddc0      	ble.n	8003536 <discretize_system_with_arm+0x176>

    // We can approximate this integral using the Taylor series for e^(A*s):
    // B_d = [dt*I + (A*dt^2)/2 + (A^2*dt^3)/6 + (A^3*dt^4)/24 + ...] * B_c

    // First term: dt*I * B_c = dt * B_c
    arm_mat_scale_f32(&B_c_matrix, dt, &B_d_matrix);
 80035b4:	f507 7123 	add.w	r1, r7, #652	@ 0x28c
 80035b8:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80035bc:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80035c0:	f507 7225 	add.w	r2, r7, #660	@ 0x294
 80035c4:	ed93 0a00 	vldr	s0, [r3]
 80035c8:	4610      	mov	r0, r2
 80035ca:	f00f f847 	bl	801265c <arm_mat_scale_f32>

    // Second term: (A*dt^2)/2 * B_c
    float32_t AB_c[4] = {0};
 80035ce:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80035d2:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80035d6:	461a      	mov	r2, r3
 80035d8:	2300      	movs	r3, #0
 80035da:	6013      	str	r3, [r2, #0]
 80035dc:	6053      	str	r3, [r2, #4]
 80035de:	6093      	str	r3, [r2, #8]
 80035e0:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 AB_c_matrix;
    arm_mat_init_f32(&AB_c_matrix, 4, 1, AB_c);
 80035e2:	f507 73ae 	add.w	r3, r7, #348	@ 0x15c
 80035e6:	f507 70aa 	add.w	r0, r7, #340	@ 0x154
 80035ea:	2201      	movs	r2, #1
 80035ec:	2104      	movs	r1, #4
 80035ee:	f00e fc2c 	bl	8011e4a <arm_mat_init_f32>
    arm_mat_mult_f32(&A_c_matrix, &B_c_matrix, &AB_c_matrix);
 80035f2:	f507 72aa 	add.w	r2, r7, #340	@ 0x154
 80035f6:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 80035fa:	f507 7329 	add.w	r3, r7, #676	@ 0x2a4
 80035fe:	4618      	mov	r0, r3
 8003600:	f00e ffb2 	bl	8012568 <arm_mat_mult_f32>

    float32_t temp_B[4];
    arm_matrix_instance_f32 temp_B_matrix;
    arm_mat_init_f32(&temp_B_matrix, 4, 1, temp_B);
 8003604:	f507 73a2 	add.w	r3, r7, #324	@ 0x144
 8003608:	f507 709e 	add.w	r0, r7, #316	@ 0x13c
 800360c:	2201      	movs	r2, #1
 800360e:	2104      	movs	r1, #4
 8003610:	f00e fc1b 	bl	8011e4a <arm_mat_init_f32>
    arm_mat_scale_f32(&AB_c_matrix, dt*dt/2.0f, &temp_B_matrix);
 8003614:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003618:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800361c:	edd3 7a00 	vldr	s15, [r3]
 8003620:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003624:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8003628:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800362c:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 8003630:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 8003634:	4611      	mov	r1, r2
 8003636:	eeb0 0a47 	vmov.f32	s0, s14
 800363a:	4618      	mov	r0, r3
 800363c:	f00f f80e 	bl	801265c <arm_mat_scale_f32>

    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 8003640:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 8003644:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 8003648:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 800364c:	4618      	mov	r0, r3
 800364e:	f00e fbc1 	bl	8011dd4 <arm_mat_add_f32>

    // Third term: (A^2*dt^3)/6 * B_c
    float32_t A2_data[16] = {0};
 8003652:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003656:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800365a:	4618      	mov	r0, r3
 800365c:	2340      	movs	r3, #64	@ 0x40
 800365e:	461a      	mov	r2, r3
 8003660:	2100      	movs	r1, #0
 8003662:	f00f f963 	bl	801292c <memset>
    arm_matrix_instance_f32 A2_matrix;
    arm_mat_init_f32(&A2_matrix, 4, 4, A2_data);
 8003666:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 800366a:	f107 00f4 	add.w	r0, r7, #244	@ 0xf4
 800366e:	2204      	movs	r2, #4
 8003670:	2104      	movs	r1, #4
 8003672:	f00e fbea 	bl	8011e4a <arm_mat_init_f32>
    arm_mat_mult_f32(&A_c_matrix, &A_c_matrix, &A2_matrix);
 8003676:	f107 02f4 	add.w	r2, r7, #244	@ 0xf4
 800367a:	f507 7129 	add.w	r1, r7, #676	@ 0x2a4
 800367e:	f507 7329 	add.w	r3, r7, #676	@ 0x2a4
 8003682:	4618      	mov	r0, r3
 8003684:	f00e ff70 	bl	8012568 <arm_mat_mult_f32>

    float32_t A2B_c[4] = {0};
 8003688:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800368c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003690:	461a      	mov	r2, r3
 8003692:	2300      	movs	r3, #0
 8003694:	6013      	str	r3, [r2, #0]
 8003696:	6053      	str	r3, [r2, #4]
 8003698:	6093      	str	r3, [r2, #8]
 800369a:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 A2B_c_matrix;
    arm_mat_init_f32(&A2B_c_matrix, 4, 1, A2B_c);
 800369c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80036a0:	f107 00dc 	add.w	r0, r7, #220	@ 0xdc
 80036a4:	2201      	movs	r2, #1
 80036a6:	2104      	movs	r1, #4
 80036a8:	f00e fbcf 	bl	8011e4a <arm_mat_init_f32>
    arm_mat_mult_f32(&A2_matrix, &B_c_matrix, &A2B_c_matrix);
 80036ac:	f107 02dc 	add.w	r2, r7, #220	@ 0xdc
 80036b0:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 80036b4:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80036b8:	4618      	mov	r0, r3
 80036ba:	f00e ff55 	bl	8012568 <arm_mat_mult_f32>

    arm_mat_scale_f32(&A2B_c_matrix, dt*dt*dt/6.0f, &temp_B_matrix);
 80036be:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80036c2:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80036c6:	edd3 7a00 	vldr	s15, [r3]
 80036ca:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80036ce:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80036d2:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80036d6:	edd3 7a00 	vldr	s15, [r3]
 80036da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036de:	eef1 6a08 	vmov.f32	s13, #24	@ 0x40c00000  6.0
 80036e2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80036e6:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 80036ea:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80036ee:	4611      	mov	r1, r2
 80036f0:	eeb0 0a47 	vmov.f32	s0, s14
 80036f4:	4618      	mov	r0, r3
 80036f6:	f00e ffb1 	bl	801265c <arm_mat_scale_f32>
    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 80036fa:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 80036fe:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 8003702:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 8003706:	4618      	mov	r0, r3
 8003708:	f00e fb64 	bl	8011dd4 <arm_mat_add_f32>

    // Fourth term: (A^3*dt^4)/24 * B_c
    float32_t A3_data[16] = {0};
 800370c:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003710:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8003714:	4618      	mov	r0, r3
 8003716:	2340      	movs	r3, #64	@ 0x40
 8003718:	461a      	mov	r2, r3
 800371a:	2100      	movs	r1, #0
 800371c:	f00f f906 	bl	801292c <memset>
    arm_matrix_instance_f32 A3_matrix;
    arm_mat_init_f32(&A3_matrix, 4, 4, A3_data);
 8003720:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003724:	f107 0094 	add.w	r0, r7, #148	@ 0x94
 8003728:	2204      	movs	r2, #4
 800372a:	2104      	movs	r1, #4
 800372c:	f00e fb8d 	bl	8011e4a <arm_mat_init_f32>
    arm_mat_mult_f32(&A2_matrix, &A_c_matrix, &A3_matrix);
 8003730:	f107 0294 	add.w	r2, r7, #148	@ 0x94
 8003734:	f507 7129 	add.w	r1, r7, #676	@ 0x2a4
 8003738:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 800373c:	4618      	mov	r0, r3
 800373e:	f00e ff13 	bl	8012568 <arm_mat_mult_f32>

    float32_t A3B_c[4] = {0};
 8003742:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003746:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 800374a:	461a      	mov	r2, r3
 800374c:	2300      	movs	r3, #0
 800374e:	6013      	str	r3, [r2, #0]
 8003750:	6053      	str	r3, [r2, #4]
 8003752:	6093      	str	r3, [r2, #8]
 8003754:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 A3B_c_matrix;
    arm_mat_init_f32(&A3B_c_matrix, 4, 1, A3B_c);
 8003756:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 800375a:	f107 007c 	add.w	r0, r7, #124	@ 0x7c
 800375e:	2201      	movs	r2, #1
 8003760:	2104      	movs	r1, #4
 8003762:	f00e fb72 	bl	8011e4a <arm_mat_init_f32>
    arm_mat_mult_f32(&A3_matrix, &B_c_matrix, &A3B_c_matrix);
 8003766:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 800376a:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 800376e:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8003772:	4618      	mov	r0, r3
 8003774:	f00e fef8 	bl	8012568 <arm_mat_mult_f32>

    arm_mat_scale_f32(&A3B_c_matrix, dt*dt*dt*dt/24.0f, &temp_B_matrix);
 8003778:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800377c:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003780:	edd3 7a00 	vldr	s15, [r3]
 8003784:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8003788:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800378c:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003790:	edd3 7a00 	vldr	s15, [r3]
 8003794:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003798:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800379c:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80037a0:	edd3 7a00 	vldr	s15, [r3]
 80037a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037a8:	eef3 6a08 	vmov.f32	s13, #56	@ 0x41c00000  24.0
 80037ac:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80037b0:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 80037b4:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80037b8:	4611      	mov	r1, r2
 80037ba:	eeb0 0a47 	vmov.f32	s0, s14
 80037be:	4618      	mov	r0, r3
 80037c0:	f00e ff4c 	bl	801265c <arm_mat_scale_f32>
    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 80037c4:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 80037c8:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 80037cc:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 80037d0:	4618      	mov	r0, r3
 80037d2:	f00e faff 	bl	8011dd4 <arm_mat_add_f32>

    // Fifth term: (A^4*dt^5)/120 * B_c
    float32_t A4_data[16] = {0};
 80037d6:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80037da:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 80037de:	4618      	mov	r0, r3
 80037e0:	2340      	movs	r3, #64	@ 0x40
 80037e2:	461a      	mov	r2, r3
 80037e4:	2100      	movs	r1, #0
 80037e6:	f00f f8a1 	bl	801292c <memset>
    arm_matrix_instance_f32 A4_matrix;
    arm_mat_init_f32(&A4_matrix, 4, 4, A4_data);
 80037ea:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80037ee:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 80037f2:	2204      	movs	r2, #4
 80037f4:	2104      	movs	r1, #4
 80037f6:	f00e fb28 	bl	8011e4a <arm_mat_init_f32>
    arm_mat_mult_f32(&A3_matrix, &A_c_matrix, &A4_matrix);
 80037fa:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 80037fe:	f507 7129 	add.w	r1, r7, #676	@ 0x2a4
 8003802:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8003806:	4618      	mov	r0, r3
 8003808:	f00e feae 	bl	8012568 <arm_mat_mult_f32>

    float32_t A4B_c[4] = {0};
 800380c:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003810:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 8003814:	461a      	mov	r2, r3
 8003816:	2300      	movs	r3, #0
 8003818:	6013      	str	r3, [r2, #0]
 800381a:	6053      	str	r3, [r2, #4]
 800381c:	6093      	str	r3, [r2, #8]
 800381e:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 A4B_c_matrix;
    arm_mat_init_f32(&A4B_c_matrix, 4, 1, A4B_c);
 8003820:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003824:	f107 001c 	add.w	r0, r7, #28
 8003828:	2201      	movs	r2, #1
 800382a:	2104      	movs	r1, #4
 800382c:	f00e fb0d 	bl	8011e4a <arm_mat_init_f32>
    arm_mat_mult_f32(&A4_matrix, &B_c_matrix, &A4B_c_matrix);
 8003830:	f107 021c 	add.w	r2, r7, #28
 8003834:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 8003838:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800383c:	4618      	mov	r0, r3
 800383e:	f00e fe93 	bl	8012568 <arm_mat_mult_f32>

    arm_mat_scale_f32(&A4B_c_matrix, dt*dt*dt*dt*dt/120.0f, &temp_B_matrix);
 8003842:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003846:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800384a:	edd3 7a00 	vldr	s15, [r3]
 800384e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8003852:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003856:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800385a:	edd3 7a00 	vldr	s15, [r3]
 800385e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003862:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003866:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800386a:	edd3 7a00 	vldr	s15, [r3]
 800386e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003872:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003876:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800387a:	edd3 7a00 	vldr	s15, [r3]
 800387e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003882:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 80038bc <discretize_system_with_arm+0x4fc>
 8003886:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800388a:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 800388e:	f107 031c 	add.w	r3, r7, #28
 8003892:	4611      	mov	r1, r2
 8003894:	eeb0 0a47 	vmov.f32	s0, s14
 8003898:	4618      	mov	r0, r3
 800389a:	f00e fedf 	bl	801265c <arm_mat_scale_f32>
    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 800389e:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 80038a2:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 80038a6:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 80038aa:	4618      	mov	r0, r3
 80038ac:	f00e fa92 	bl	8011dd4 <arm_mat_add_f32>
}
 80038b0:	bf00      	nop
 80038b2:	f507 772f 	add.w	r7, r7, #700	@ 0x2bc
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd90      	pop	{r4, r7, pc}
 80038ba:	bf00      	nop
 80038bc:	42f00000 	.word	0x42f00000

080038c0 <GenerateMotorMatrices>:

void GenerateMotorMatrices(float32_t R_a, float32_t L_a, float32_t J, float32_t b,
                          float32_t ke, float32_t kt, float32_t dt,
                          float32_t *A, float32_t *B) {
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b09e      	sub	sp, #120	@ 0x78
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
 80038ca:	edc7 0a08 	vstr	s1, [r7, #32]
 80038ce:	ed87 1a07 	vstr	s2, [r7, #28]
 80038d2:	edc7 1a06 	vstr	s3, [r7, #24]
 80038d6:	ed87 2a05 	vstr	s4, [r7, #20]
 80038da:	edc7 2a04 	vstr	s5, [r7, #16]
 80038de:	ed87 3a03 	vstr	s6, [r7, #12]
 80038e2:	60b8      	str	r0, [r7, #8]
 80038e4:	6079      	str	r1, [r7, #4]
    // Generate continuous time matrices
    float32_t A_c[16] = {0}; // 4x4 matrix
 80038e6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80038ea:	2240      	movs	r2, #64	@ 0x40
 80038ec:	2100      	movs	r1, #0
 80038ee:	4618      	mov	r0, r3
 80038f0:	f00f f81c 	bl	801292c <memset>
    float32_t B_c[4] = {0};  // 4x1 matrix
 80038f4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80038f8:	2200      	movs	r2, #0
 80038fa:	601a      	str	r2, [r3, #0]
 80038fc:	605a      	str	r2, [r3, #4]
 80038fe:	609a      	str	r2, [r3, #8]
 8003900:	60da      	str	r2, [r3, #12]
    // State Transition Matrix
    // Ac = [0 1 0 0;
    //       0 -b/J -1/J kt/J;
    //       0 0 0 0;
    //       0 -ke/L 0 -R/L];
    A_c[0*4 + 1] = 1.0f;
 8003902:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8003906:	63fb      	str	r3, [r7, #60]	@ 0x3c

    A_c[1*4 + 1] = -b/J;
 8003908:	edd7 7a06 	vldr	s15, [r7, #24]
 800390c:	eef1 6a67 	vneg.f32	s13, s15
 8003910:	ed97 7a07 	vldr	s14, [r7, #28]
 8003914:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003918:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    A_c[1*4 + 2] = -1.0f/J;
 800391c:	eeff 6a00 	vmov.f32	s13, #240	@ 0xbf800000 -1.0
 8003920:	ed97 7a07 	vldr	s14, [r7, #28]
 8003924:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003928:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    A_c[1*4 + 3] = kt/J;
 800392c:	edd7 6a04 	vldr	s13, [r7, #16]
 8003930:	ed97 7a07 	vldr	s14, [r7, #28]
 8003934:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003938:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54

    // Third row all zeros (for load torque state)

    A_c[3*4 + 1] = -ke/L_a;
 800393c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003940:	eef1 6a67 	vneg.f32	s13, s15
 8003944:	ed97 7a08 	vldr	s14, [r7, #32]
 8003948:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800394c:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
    A_c[3*4 + 3] = -R_a/L_a;
 8003950:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003954:	eef1 6a67 	vneg.f32	s13, s15
 8003958:	ed97 7a08 	vldr	s14, [r7, #32]
 800395c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003960:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74

    // Input Matrix
    // Bc = [0; 0; 0; 1/L];
    B_c[3] = 1.0f/L_a;
 8003964:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003968:	ed97 7a08 	vldr	s14, [r7, #32]
 800396c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003970:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

    // Discretize the system using ARM CMSIS DSP
    discretize_system_with_arm(A_c, B_c, dt, A, B);
 8003974:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8003978:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	68ba      	ldr	r2, [r7, #8]
 8003980:	ed97 0a03 	vldr	s0, [r7, #12]
 8003984:	f7ff fd1c 	bl	80033c0 <discretize_system_with_arm>
}
 8003988:	bf00      	nop
 800398a:	3778      	adds	r7, #120	@ 0x78
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}

08003990 <PWM_init>:
 *      Author: beamk
 */

#include "PWM.h"

void PWM_init(PWM* pwm, TIM_HandleTypeDef* htimx, uint16_t tim_chx){
 8003990:	b580      	push	{r7, lr}
 8003992:	b084      	sub	sp, #16
 8003994:	af00      	add	r7, sp, #0
 8003996:	60f8      	str	r0, [r7, #12]
 8003998:	60b9      	str	r1, [r7, #8]
 800399a:	4613      	mov	r3, r2
 800399c:	80fb      	strh	r3, [r7, #6]
	pwm->CPU_FREQ = 170e6;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	4a0b      	ldr	r2, [pc, #44]	@ (80039d0 <PWM_init+0x40>)
 80039a2:	611a      	str	r2, [r3, #16]
	pwm->htimx = htimx;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	68ba      	ldr	r2, [r7, #8]
 80039a8:	601a      	str	r2, [r3, #0]
	pwm->tim_chx = tim_chx;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	88fa      	ldrh	r2, [r7, #6]
 80039ae:	809a      	strh	r2, [r3, #4]
	pwm->OC = 0;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2200      	movs	r2, #0
 80039b4:	615a      	str	r2, [r3, #20]
	HAL_TIM_Base_Start(htimx);
 80039b6:	68b8      	ldr	r0, [r7, #8]
 80039b8:	f00a fa78 	bl	800deac <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(htimx, tim_chx);
 80039bc:	88fb      	ldrh	r3, [r7, #6]
 80039be:	4619      	mov	r1, r3
 80039c0:	68b8      	ldr	r0, [r7, #8]
 80039c2:	f00a fbbf 	bl	800e144 <HAL_TIM_PWM_Start>
}
 80039c6:	bf00      	nop
 80039c8:	3710      	adds	r7, #16
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	0a21fe80 	.word	0x0a21fe80

080039d4 <PWM_write_duty>:

void PWM_write_duty(PWM* pwm, float freq, float percent_duty){
 80039d4:	b5b0      	push	{r4, r5, r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	ed87 0a02 	vstr	s0, [r7, #8]
 80039e0:	edc7 0a01 	vstr	s1, [r7, #4]
    if (freq == 0) {
 80039e4:	edd7 7a02 	vldr	s15, [r7, #8]
 80039e8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80039ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039f0:	d137      	bne.n	8003a62 <PWM_write_duty+0x8e>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	889b      	ldrh	r3, [r3, #4]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d105      	bne.n	8003a06 <PWM_write_duty+0x32>
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2200      	movs	r2, #0
 8003a02:	635a      	str	r2, [r3, #52]	@ 0x34
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(percent_duty) / 100.0);
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}
 8003a04:	e0e1      	b.n	8003bca <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	889b      	ldrh	r3, [r3, #4]
 8003a0a:	2b04      	cmp	r3, #4
 8003a0c:	d105      	bne.n	8003a1a <PWM_write_duty+0x46>
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	2300      	movs	r3, #0
 8003a16:	6393      	str	r3, [r2, #56]	@ 0x38
 8003a18:	e0d7      	b.n	8003bca <PWM_write_duty+0x1f6>
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	889b      	ldrh	r3, [r3, #4]
 8003a1e:	2b08      	cmp	r3, #8
 8003a20:	d105      	bne.n	8003a2e <PWM_write_duty+0x5a>
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	2300      	movs	r3, #0
 8003a2a:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8003a2c:	e0cd      	b.n	8003bca <PWM_write_duty+0x1f6>
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	889b      	ldrh	r3, [r3, #4]
 8003a32:	2b0c      	cmp	r3, #12
 8003a34:	d105      	bne.n	8003a42 <PWM_write_duty+0x6e>
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a40:	e0c3      	b.n	8003bca <PWM_write_duty+0x1f6>
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	889b      	ldrh	r3, [r3, #4]
 8003a46:	2b10      	cmp	r3, #16
 8003a48:	d105      	bne.n	8003a56 <PWM_write_duty+0x82>
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	2300      	movs	r3, #0
 8003a52:	6493      	str	r3, [r2, #72]	@ 0x48
 8003a54:	e0b9      	b.n	8003bca <PWM_write_duty+0x1f6>
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8003a60:	e0b3      	b.n	8003bca <PWM_write_duty+0x1f6>
    	pwm->period_cyc = (uint32_t) (pwm->CPU_FREQ / freq);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	691b      	ldr	r3, [r3, #16]
 8003a66:	ee07 3a90 	vmov	s15, r3
 8003a6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a6e:	ed97 7a02 	vldr	s14, [r7, #8]
 8003a72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a7a:	ee17 2a90 	vmov	r2, s15
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	609a      	str	r2, [r3, #8]
    	pwm->prescaler = (uint16_t) ((pwm->period_cyc + 65535 - 1) / 65535) - 1; // Subtracting 1 since prescaler is zero-based
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8003a8a:	33fe      	adds	r3, #254	@ 0xfe
 8003a8c:	4a51      	ldr	r2, [pc, #324]	@ (8003bd4 <PWM_write_duty+0x200>)
 8003a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a92:	0bdb      	lsrs	r3, r3, #15
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	3b01      	subs	r3, #1
 8003a98:	b29a      	uxth	r2, r3
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	819a      	strh	r2, [r3, #12]
    	pwm->overflow = (uint16_t) ((pwm->CPU_FREQ / (float)(pwm->prescaler + 1) / freq) - 1);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	691b      	ldr	r3, [r3, #16]
 8003aa2:	ee07 3a90 	vmov	s15, r3
 8003aa6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	899b      	ldrh	r3, [r3, #12]
 8003aae:	3301      	adds	r3, #1
 8003ab0:	ee07 3a90 	vmov	s15, r3
 8003ab4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ab8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003abc:	ed97 7a02 	vldr	s14, [r7, #8]
 8003ac0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ac4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003ac8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003acc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ad0:	ee17 3a90 	vmov	r3, s15
 8003ad4:	b29a      	uxth	r2, r3
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	81da      	strh	r2, [r3, #14]
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(percent_duty) / 100.0);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	89db      	ldrh	r3, [r3, #14]
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f7fc fcec 	bl	80004bc <__aeabi_i2d>
 8003ae4:	4604      	mov	r4, r0
 8003ae6:	460d      	mov	r5, r1
 8003ae8:	edd7 7a01 	vldr	s15, [r7, #4]
 8003aec:	eef0 7ae7 	vabs.f32	s15, s15
 8003af0:	ee17 0a90 	vmov	r0, s15
 8003af4:	f7fc fcf4 	bl	80004e0 <__aeabi_f2d>
 8003af8:	4602      	mov	r2, r0
 8003afa:	460b      	mov	r3, r1
 8003afc:	4620      	mov	r0, r4
 8003afe:	4629      	mov	r1, r5
 8003b00:	f7fc fd46 	bl	8000590 <__aeabi_dmul>
 8003b04:	4602      	mov	r2, r0
 8003b06:	460b      	mov	r3, r1
 8003b08:	4610      	mov	r0, r2
 8003b0a:	4619      	mov	r1, r3
 8003b0c:	f04f 0200 	mov.w	r2, #0
 8003b10:	4b31      	ldr	r3, [pc, #196]	@ (8003bd8 <PWM_write_duty+0x204>)
 8003b12:	f7fc fe67 	bl	80007e4 <__aeabi_ddiv>
 8003b16:	4602      	mov	r2, r0
 8003b18:	460b      	mov	r3, r1
 8003b1a:	4610      	mov	r0, r2
 8003b1c:	4619      	mov	r1, r3
 8003b1e:	f7fc fff9 	bl	8000b14 <__aeabi_d2uiz>
 8003b22:	4603      	mov	r3, r0
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	461a      	mov	r2, r3
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	615a      	str	r2, [r3, #20]
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	899a      	ldrh	r2, [r3, #12]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	629a      	str	r2, [r3, #40]	@ 0x28
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	89da      	ldrh	r2, [r3, #14]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	89da      	ldrh	r2, [r3, #14]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	60da      	str	r2, [r3, #12]
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	889b      	ldrh	r3, [r3, #4]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d106      	bne.n	8003b64 <PWM_write_duty+0x190>
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	68fa      	ldr	r2, [r7, #12]
 8003b5e:	6952      	ldr	r2, [r2, #20]
 8003b60:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8003b62:	e032      	b.n	8003bca <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	889b      	ldrh	r3, [r3, #4]
 8003b68:	2b04      	cmp	r3, #4
 8003b6a:	d106      	bne.n	8003b7a <PWM_write_duty+0x1a6>
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	695b      	ldr	r3, [r3, #20]
 8003b76:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8003b78:	e027      	b.n	8003bca <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	889b      	ldrh	r3, [r3, #4]
 8003b7e:	2b08      	cmp	r3, #8
 8003b80:	d106      	bne.n	8003b90 <PWM_write_duty+0x1bc>
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	695b      	ldr	r3, [r3, #20]
 8003b8c:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8003b8e:	e01c      	b.n	8003bca <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	889b      	ldrh	r3, [r3, #4]
 8003b94:	2b0c      	cmp	r3, #12
 8003b96:	d106      	bne.n	8003ba6 <PWM_write_duty+0x1d2>
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	695b      	ldr	r3, [r3, #20]
 8003ba2:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8003ba4:	e011      	b.n	8003bca <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	889b      	ldrh	r3, [r3, #4]
 8003baa:	2b10      	cmp	r3, #16
 8003bac:	d106      	bne.n	8003bbc <PWM_write_duty+0x1e8>
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	695b      	ldr	r3, [r3, #20]
 8003bb8:	6493      	str	r3, [r2, #72]	@ 0x48
}
 8003bba:	e006      	b.n	8003bca <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	695b      	ldr	r3, [r3, #20]
 8003bc6:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8003bc8:	e7ff      	b.n	8003bca <PWM_write_duty+0x1f6>
 8003bca:	bf00      	nop
 8003bcc:	3710      	adds	r7, #16
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bdb0      	pop	{r4, r5, r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	80008001 	.word	0x80008001
 8003bd8:	40590000 	.word	0x40590000
 8003bdc:	00000000 	.word	0x00000000

08003be0 <PWM_write_range>:

void PWM_write_range(PWM* pwm, float freq, float duty){
 8003be0:	b5b0      	push	{r4, r5, r7, lr}
 8003be2:	b084      	sub	sp, #16
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	60f8      	str	r0, [r7, #12]
 8003be8:	ed87 0a02 	vstr	s0, [r7, #8]
 8003bec:	edc7 0a01 	vstr	s1, [r7, #4]
    if (freq == 0) {
 8003bf0:	edd7 7a02 	vldr	s15, [r7, #8]
 8003bf4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003bf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bfc:	d137      	bne.n	8003c6e <PWM_write_range+0x8e>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	889b      	ldrh	r3, [r3, #4]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d105      	bne.n	8003c12 <PWM_write_range+0x32>
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	635a      	str	r2, [r3, #52]	@ 0x34
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(duty) / 65535.0);
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}
 8003c10:	e0e1      	b.n	8003dd6 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	889b      	ldrh	r3, [r3, #4]
 8003c16:	2b04      	cmp	r3, #4
 8003c18:	d105      	bne.n	8003c26 <PWM_write_range+0x46>
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	2300      	movs	r3, #0
 8003c22:	6393      	str	r3, [r2, #56]	@ 0x38
 8003c24:	e0d7      	b.n	8003dd6 <PWM_write_range+0x1f6>
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	889b      	ldrh	r3, [r3, #4]
 8003c2a:	2b08      	cmp	r3, #8
 8003c2c:	d105      	bne.n	8003c3a <PWM_write_range+0x5a>
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	2300      	movs	r3, #0
 8003c36:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8003c38:	e0cd      	b.n	8003dd6 <PWM_write_range+0x1f6>
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	889b      	ldrh	r3, [r3, #4]
 8003c3e:	2b0c      	cmp	r3, #12
 8003c40:	d105      	bne.n	8003c4e <PWM_write_range+0x6e>
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	2300      	movs	r3, #0
 8003c4a:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c4c:	e0c3      	b.n	8003dd6 <PWM_write_range+0x1f6>
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	889b      	ldrh	r3, [r3, #4]
 8003c52:	2b10      	cmp	r3, #16
 8003c54:	d105      	bne.n	8003c62 <PWM_write_range+0x82>
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	6493      	str	r3, [r2, #72]	@ 0x48
 8003c60:	e0b9      	b.n	8003dd6 <PWM_write_range+0x1f6>
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	2300      	movs	r3, #0
 8003c6a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8003c6c:	e0b3      	b.n	8003dd6 <PWM_write_range+0x1f6>
    	pwm->period_cyc = (uint32_t) (pwm->CPU_FREQ / freq);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	691b      	ldr	r3, [r3, #16]
 8003c72:	ee07 3a90 	vmov	s15, r3
 8003c76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c7a:	ed97 7a02 	vldr	s14, [r7, #8]
 8003c7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c86:	ee17 2a90 	vmov	r2, s15
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	609a      	str	r2, [r3, #8]
    	pwm->prescaler = (uint16_t) ((pwm->period_cyc + 65535 - 1) / 65535) - 1; // Subtracting 1 since prescaler is zero-based
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8003c96:	33fe      	adds	r3, #254	@ 0xfe
 8003c98:	4a53      	ldr	r2, [pc, #332]	@ (8003de8 <PWM_write_range+0x208>)
 8003c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c9e:	0bdb      	lsrs	r3, r3, #15
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	3b01      	subs	r3, #1
 8003ca4:	b29a      	uxth	r2, r3
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	819a      	strh	r2, [r3, #12]
    	pwm->overflow = (uint16_t) ((pwm->CPU_FREQ / (float)(pwm->prescaler + 1) / freq) - 1);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	691b      	ldr	r3, [r3, #16]
 8003cae:	ee07 3a90 	vmov	s15, r3
 8003cb2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	899b      	ldrh	r3, [r3, #12]
 8003cba:	3301      	adds	r3, #1
 8003cbc:	ee07 3a90 	vmov	s15, r3
 8003cc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003cc4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003cc8:	ed97 7a02 	vldr	s14, [r7, #8]
 8003ccc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003cd0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003cd4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003cd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003cdc:	ee17 3a90 	vmov	r3, s15
 8003ce0:	b29a      	uxth	r2, r3
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	81da      	strh	r2, [r3, #14]
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(duty) / 65535.0);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	89db      	ldrh	r3, [r3, #14]
 8003cea:	4618      	mov	r0, r3
 8003cec:	f7fc fbe6 	bl	80004bc <__aeabi_i2d>
 8003cf0:	4604      	mov	r4, r0
 8003cf2:	460d      	mov	r5, r1
 8003cf4:	edd7 7a01 	vldr	s15, [r7, #4]
 8003cf8:	eef0 7ae7 	vabs.f32	s15, s15
 8003cfc:	ee17 0a90 	vmov	r0, s15
 8003d00:	f7fc fbee 	bl	80004e0 <__aeabi_f2d>
 8003d04:	4602      	mov	r2, r0
 8003d06:	460b      	mov	r3, r1
 8003d08:	4620      	mov	r0, r4
 8003d0a:	4629      	mov	r1, r5
 8003d0c:	f7fc fc40 	bl	8000590 <__aeabi_dmul>
 8003d10:	4602      	mov	r2, r0
 8003d12:	460b      	mov	r3, r1
 8003d14:	4610      	mov	r0, r2
 8003d16:	4619      	mov	r1, r3
 8003d18:	a331      	add	r3, pc, #196	@ (adr r3, 8003de0 <PWM_write_range+0x200>)
 8003d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d1e:	f7fc fd61 	bl	80007e4 <__aeabi_ddiv>
 8003d22:	4602      	mov	r2, r0
 8003d24:	460b      	mov	r3, r1
 8003d26:	4610      	mov	r0, r2
 8003d28:	4619      	mov	r1, r3
 8003d2a:	f7fc fef3 	bl	8000b14 <__aeabi_d2uiz>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	461a      	mov	r2, r3
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	615a      	str	r2, [r3, #20]
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	899a      	ldrh	r2, [r3, #12]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	629a      	str	r2, [r3, #40]	@ 0x28
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	89da      	ldrh	r2, [r3, #14]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	89da      	ldrh	r2, [r3, #14]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	60da      	str	r2, [r3, #12]
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	889b      	ldrh	r3, [r3, #4]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d106      	bne.n	8003d70 <PWM_write_range+0x190>
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	68fa      	ldr	r2, [r7, #12]
 8003d6a:	6952      	ldr	r2, [r2, #20]
 8003d6c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8003d6e:	e032      	b.n	8003dd6 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	889b      	ldrh	r3, [r3, #4]
 8003d74:	2b04      	cmp	r3, #4
 8003d76:	d106      	bne.n	8003d86 <PWM_write_range+0x1a6>
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	695b      	ldr	r3, [r3, #20]
 8003d82:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8003d84:	e027      	b.n	8003dd6 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	889b      	ldrh	r3, [r3, #4]
 8003d8a:	2b08      	cmp	r3, #8
 8003d8c:	d106      	bne.n	8003d9c <PWM_write_range+0x1bc>
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	695b      	ldr	r3, [r3, #20]
 8003d98:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8003d9a:	e01c      	b.n	8003dd6 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	889b      	ldrh	r3, [r3, #4]
 8003da0:	2b0c      	cmp	r3, #12
 8003da2:	d106      	bne.n	8003db2 <PWM_write_range+0x1d2>
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	695b      	ldr	r3, [r3, #20]
 8003dae:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8003db0:	e011      	b.n	8003dd6 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	889b      	ldrh	r3, [r3, #4]
 8003db6:	2b10      	cmp	r3, #16
 8003db8:	d106      	bne.n	8003dc8 <PWM_write_range+0x1e8>
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	695b      	ldr	r3, [r3, #20]
 8003dc4:	6493      	str	r3, [r2, #72]	@ 0x48
}
 8003dc6:	e006      	b.n	8003dd6 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	695b      	ldr	r3, [r3, #20]
 8003dd2:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8003dd4:	e7ff      	b.n	8003dd6 <PWM_write_range+0x1f6>
 8003dd6:	bf00      	nop
 8003dd8:	3710      	adds	r7, #16
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bdb0      	pop	{r4, r5, r7, pc}
 8003dde:	bf00      	nop
 8003de0:	00000000 	.word	0x00000000
 8003de4:	40efffe0 	.word	0x40efffe0
 8003de8:	80008001 	.word	0x80008001

08003dec <QEI_init>:
* Author: pboon
*/

#include "QEI.h"

void QEI_init(QEI *qei, TIM_HandleTypeDef *htimx, int32_t ppr, uint32_t freq, float ratio, float pulley_diameter) {
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b086      	sub	sp, #24
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6178      	str	r0, [r7, #20]
 8003df4:	6139      	str	r1, [r7, #16]
 8003df6:	60fa      	str	r2, [r7, #12]
 8003df8:	60bb      	str	r3, [r7, #8]
 8003dfa:	ed87 0a01 	vstr	s0, [r7, #4]
 8003dfe:	edc7 0a00 	vstr	s1, [r7]
    qei->htimx = htimx;
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	693a      	ldr	r2, [r7, #16]
 8003e06:	619a      	str	r2, [r3, #24]
    qei->ppr = ppr;
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	68fa      	ldr	r2, [r7, #12]
 8003e0c:	621a      	str	r2, [r3, #32]
    qei->freq = freq;
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	68ba      	ldr	r2, [r7, #8]
 8003e12:	629a      	str	r2, [r3, #40]	@ 0x28
    qei->gear_ratio = ratio;
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	687a      	ldr	r2, [r7, #4]
 8003e18:	655a      	str	r2, [r3, #84]	@ 0x54
    qei->pulley_diameter = pulley_diameter;
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	683a      	ldr	r2, [r7, #0]
 8003e1e:	659a      	str	r2, [r3, #88]	@ 0x58

    qei->c[NOW] = 0;
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	2200      	movs	r2, #0
 8003e24:	601a      	str	r2, [r3, #0]
    qei->c[PREV] = 0;
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	605a      	str	r2, [r3, #4]
    qei->r[NOW] = 0;
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	f04f 0200 	mov.w	r2, #0
 8003e32:	609a      	str	r2, [r3, #8]
    qei->r[PREV] = 0;
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	f04f 0200 	mov.w	r2, #0
 8003e3a:	60da      	str	r2, [r3, #12]
    qei->m[NOW] = 0;
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	f04f 0200 	mov.w	r2, #0
 8003e42:	611a      	str	r2, [r3, #16]
    qei->m[PREV] = 0;
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	f04f 0200 	mov.w	r2, #0
 8003e4a:	615a      	str	r2, [r3, #20]

    qei->enc_period = 65536 - (65536 % ppr);
 8003e4c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003e50:	68fa      	ldr	r2, [r7, #12]
 8003e52:	fb93 f2f2 	sdiv	r2, r3, r2
 8003e56:	68f9      	ldr	r1, [r7, #12]
 8003e58:	fb01 f202 	mul.w	r2, r1, r2
 8003e5c:	1a9b      	subs	r3, r3, r2
 8003e5e:	f5c3 3280 	rsb	r2, r3, #65536	@ 0x10000
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	61da      	str	r2, [r3, #28]

    qei->diff_counts = 0;
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	625a      	str	r2, [r3, #36]	@ 0x24
    qei->pulses = 0;
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	639a      	str	r2, [r3, #56]	@ 0x38
    qei->rads = 0;
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	f04f 0200 	mov.w	r2, #0
 8003e78:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->mm = 0;
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	f04f 0200 	mov.w	r2, #0
 8003e80:	649a      	str	r2, [r3, #72]	@ 0x48
    qei->revs = 0;
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	f04f 0200 	mov.w	r2, #0
 8003e88:	63da      	str	r2, [r3, #60]	@ 0x3c

    qei->pps = 0;
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	f04f 0200 	mov.w	r2, #0
 8003e90:	62da      	str	r2, [r3, #44]	@ 0x2c
    qei->radps = 0;
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	f04f 0200 	mov.w	r2, #0
 8003e98:	635a      	str	r2, [r3, #52]	@ 0x34
    qei->mmps = 0;
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	f04f 0200 	mov.w	r2, #0
 8003ea0:	64da      	str	r2, [r3, #76]	@ 0x4c
    qei->rpm = 0;
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	f04f 0200 	mov.w	r2, #0
 8003ea8:	631a      	str	r2, [r3, #48]	@ 0x30

    qei->radpss = 0;
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	f04f 0200 	mov.w	r2, #0
 8003eb0:	645a      	str	r2, [r3, #68]	@ 0x44
    qei->mmpss = 0;
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	f04f 0200 	mov.w	r2, #0
 8003eb8:	651a      	str	r2, [r3, #80]	@ 0x50

    HAL_TIM_Encoder_Start(htimx, TIM_CHANNEL_ALL);
 8003eba:	213c      	movs	r1, #60	@ 0x3c
 8003ebc:	6938      	ldr	r0, [r7, #16]
 8003ebe:	f00a fbfd 	bl	800e6bc <HAL_TIM_Encoder_Start>
}
 8003ec2:	bf00      	nop
 8003ec4:	3718      	adds	r7, #24
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	0000      	movs	r0, r0
 8003ecc:	0000      	movs	r0, r0
	...

08003ed0 <QEI_get_diff_count>:

void QEI_get_diff_count(QEI *qei) {
 8003ed0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003ed4:	b084      	sub	sp, #16
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	6078      	str	r0, [r7, #4]
    // Get current counter value
    qei->c[NOW] = __HAL_TIM_GET_COUNTER(qei->htimx);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	699b      	ldr	r3, [r3, #24]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	601a      	str	r2, [r3, #0]

    // Calculate difference with handling for timer overflow/underflow
    int32_t diff_counts = qei->c[NOW] - qei->c[PREV];
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	60fb      	str	r3, [r7, #12]

    // Handle counter overflow/underflow
    if (diff_counts > qei->enc_period / 2) {
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	69db      	ldr	r3, [r3, #28]
 8003ef6:	0fda      	lsrs	r2, r3, #31
 8003ef8:	4413      	add	r3, r2
 8003efa:	105b      	asrs	r3, r3, #1
 8003efc:	461a      	mov	r2, r3
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	4293      	cmp	r3, r2
 8003f02:	dd05      	ble.n	8003f10 <QEI_get_diff_count+0x40>
        diff_counts -= qei->enc_period;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	69db      	ldr	r3, [r3, #28]
 8003f08:	68fa      	ldr	r2, [r7, #12]
 8003f0a:	1ad3      	subs	r3, r2, r3
 8003f0c:	60fb      	str	r3, [r7, #12]
 8003f0e:	e00e      	b.n	8003f2e <QEI_get_diff_count+0x5e>
    } else if (diff_counts < -(qei->enc_period / 2)) {
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	69db      	ldr	r3, [r3, #28]
 8003f14:	0fda      	lsrs	r2, r3, #31
 8003f16:	4413      	add	r3, r2
 8003f18:	105b      	asrs	r3, r3, #1
 8003f1a:	425b      	negs	r3, r3
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	4293      	cmp	r3, r2
 8003f22:	da04      	bge.n	8003f2e <QEI_get_diff_count+0x5e>
        diff_counts += qei->enc_period;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	69db      	ldr	r3, [r3, #28]
 8003f28:	68fa      	ldr	r2, [r7, #12]
 8003f2a:	4413      	add	r3, r2
 8003f2c:	60fb      	str	r3, [r7, #12]
    }

    qei->diff_counts = diff_counts;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	68fa      	ldr	r2, [r7, #12]
 8003f32:	625a      	str	r2, [r3, #36]	@ 0x24

    // Update position counters
    qei->pulses += qei->diff_counts;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f3c:	441a      	add	r2, r3
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	639a      	str	r2, [r3, #56]	@ 0x38
    qei->revs += (qei->diff_counts / (float)(qei->ppr)) * qei->gear_ratio;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f4c:	ee07 3a90 	vmov	s15, r3
 8003f50:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6a1b      	ldr	r3, [r3, #32]
 8003f58:	ee07 3a90 	vmov	s15, r3
 8003f5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f60:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8003f6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
    qei->rads += (qei->diff_counts / (float)(qei->ppr)) * 2 * M_PI * qei->gear_ratio;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f7fc faaf 	bl	80004e0 <__aeabi_f2d>
 8003f82:	4604      	mov	r4, r0
 8003f84:	460d      	mov	r5, r1
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f8a:	ee07 3a90 	vmov	s15, r3
 8003f8e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6a1b      	ldr	r3, [r3, #32]
 8003f96:	ee07 3a90 	vmov	s15, r3
 8003f9a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003fa2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003fa6:	ee17 0a90 	vmov	r0, s15
 8003faa:	f7fc fa99 	bl	80004e0 <__aeabi_f2d>
 8003fae:	a33c      	add	r3, pc, #240	@ (adr r3, 80040a0 <QEI_get_diff_count+0x1d0>)
 8003fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fb4:	f7fc faec 	bl	8000590 <__aeabi_dmul>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	460b      	mov	r3, r1
 8003fbc:	4690      	mov	r8, r2
 8003fbe:	4699      	mov	r9, r3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f7fc fa8b 	bl	80004e0 <__aeabi_f2d>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	460b      	mov	r3, r1
 8003fce:	4640      	mov	r0, r8
 8003fd0:	4649      	mov	r1, r9
 8003fd2:	f7fc fadd 	bl	8000590 <__aeabi_dmul>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	460b      	mov	r3, r1
 8003fda:	4620      	mov	r0, r4
 8003fdc:	4629      	mov	r1, r5
 8003fde:	f7fc f921 	bl	8000224 <__adddf3>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	460b      	mov	r3, r1
 8003fe6:	4610      	mov	r0, r2
 8003fe8:	4619      	mov	r1, r3
 8003fea:	f7fc fdb3 	bl	8000b54 <__aeabi_d2f>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->mm += (qei->diff_counts / (float)(qei->ppr)) * M_PI * qei->pulley_diameter * qei->gear_ratio;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f7fc fa71 	bl	80004e0 <__aeabi_f2d>
 8003ffe:	4604      	mov	r4, r0
 8004000:	460d      	mov	r5, r1
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004006:	ee07 3a90 	vmov	s15, r3
 800400a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a1b      	ldr	r3, [r3, #32]
 8004012:	ee07 3a90 	vmov	s15, r3
 8004016:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800401a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800401e:	ee16 0a90 	vmov	r0, s13
 8004022:	f7fc fa5d 	bl	80004e0 <__aeabi_f2d>
 8004026:	a31e      	add	r3, pc, #120	@ (adr r3, 80040a0 <QEI_get_diff_count+0x1d0>)
 8004028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800402c:	f7fc fab0 	bl	8000590 <__aeabi_dmul>
 8004030:	4602      	mov	r2, r0
 8004032:	460b      	mov	r3, r1
 8004034:	4690      	mov	r8, r2
 8004036:	4699      	mov	r9, r3
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800403c:	4618      	mov	r0, r3
 800403e:	f7fc fa4f 	bl	80004e0 <__aeabi_f2d>
 8004042:	4602      	mov	r2, r0
 8004044:	460b      	mov	r3, r1
 8004046:	4640      	mov	r0, r8
 8004048:	4649      	mov	r1, r9
 800404a:	f7fc faa1 	bl	8000590 <__aeabi_dmul>
 800404e:	4602      	mov	r2, r0
 8004050:	460b      	mov	r3, r1
 8004052:	4690      	mov	r8, r2
 8004054:	4699      	mov	r9, r3
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800405a:	4618      	mov	r0, r3
 800405c:	f7fc fa40 	bl	80004e0 <__aeabi_f2d>
 8004060:	4602      	mov	r2, r0
 8004062:	460b      	mov	r3, r1
 8004064:	4640      	mov	r0, r8
 8004066:	4649      	mov	r1, r9
 8004068:	f7fc fa92 	bl	8000590 <__aeabi_dmul>
 800406c:	4602      	mov	r2, r0
 800406e:	460b      	mov	r3, r1
 8004070:	4620      	mov	r0, r4
 8004072:	4629      	mov	r1, r5
 8004074:	f7fc f8d6 	bl	8000224 <__adddf3>
 8004078:	4602      	mov	r2, r0
 800407a:	460b      	mov	r3, r1
 800407c:	4610      	mov	r0, r2
 800407e:	4619      	mov	r1, r3
 8004080:	f7fc fd68 	bl	8000b54 <__aeabi_d2f>
 8004084:	4602      	mov	r2, r0
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	649a      	str	r2, [r3, #72]	@ 0x48

    // Store the current counter value for next calculation
    qei->c[PREV] = qei->c[NOW];
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	605a      	str	r2, [r3, #4]
}
 8004092:	bf00      	nop
 8004094:	3710      	adds	r7, #16
 8004096:	46bd      	mov	sp, r7
 8004098:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800409c:	f3af 8000 	nop.w
 80040a0:	54442d18 	.word	0x54442d18
 80040a4:	400921fb 	.word	0x400921fb

080040a8 <QEI_compute_data>:

void QEI_compute_data(QEI *qei) {
 80040a8:	b5b0      	push	{r4, r5, r7, lr}
 80040aa:	b084      	sub	sp, #16
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
    // Calculate velocity in pulses per second
    qei->pps = qei->diff_counts * ((int)(qei->freq));
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80040b8:	fb02 f303 	mul.w	r3, r2, r3
 80040bc:	ee07 3a90 	vmov	s15, r3
 80040c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

    // Calculate angular velocity in different units
    qei->rpm = qei->pps * 60.0 / (float)(qei->ppr) * qei->gear_ratio;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040ce:	4618      	mov	r0, r3
 80040d0:	f7fc fa06 	bl	80004e0 <__aeabi_f2d>
 80040d4:	f04f 0200 	mov.w	r2, #0
 80040d8:	4b83      	ldr	r3, [pc, #524]	@ (80042e8 <QEI_compute_data+0x240>)
 80040da:	f7fc fa59 	bl	8000590 <__aeabi_dmul>
 80040de:	4602      	mov	r2, r0
 80040e0:	460b      	mov	r3, r1
 80040e2:	4614      	mov	r4, r2
 80040e4:	461d      	mov	r5, r3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6a1b      	ldr	r3, [r3, #32]
 80040ea:	ee07 3a90 	vmov	s15, r3
 80040ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040f2:	ee17 0a90 	vmov	r0, s15
 80040f6:	f7fc f9f3 	bl	80004e0 <__aeabi_f2d>
 80040fa:	4602      	mov	r2, r0
 80040fc:	460b      	mov	r3, r1
 80040fe:	4620      	mov	r0, r4
 8004100:	4629      	mov	r1, r5
 8004102:	f7fc fb6f 	bl	80007e4 <__aeabi_ddiv>
 8004106:	4602      	mov	r2, r0
 8004108:	460b      	mov	r3, r1
 800410a:	4614      	mov	r4, r2
 800410c:	461d      	mov	r5, r3
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004112:	4618      	mov	r0, r3
 8004114:	f7fc f9e4 	bl	80004e0 <__aeabi_f2d>
 8004118:	4602      	mov	r2, r0
 800411a:	460b      	mov	r3, r1
 800411c:	4620      	mov	r0, r4
 800411e:	4629      	mov	r1, r5
 8004120:	f7fc fa36 	bl	8000590 <__aeabi_dmul>
 8004124:	4602      	mov	r2, r0
 8004126:	460b      	mov	r3, r1
 8004128:	4610      	mov	r0, r2
 800412a:	4619      	mov	r1, r3
 800412c:	f7fc fd12 	bl	8000b54 <__aeabi_d2f>
 8004130:	4602      	mov	r2, r0
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	631a      	str	r2, [r3, #48]	@ 0x30
    qei->radps = qei->pps * 2 * M_PI / (float)(qei->ppr) * qei->gear_ratio;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800413c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004140:	ee17 0a90 	vmov	r0, s15
 8004144:	f7fc f9cc 	bl	80004e0 <__aeabi_f2d>
 8004148:	a365      	add	r3, pc, #404	@ (adr r3, 80042e0 <QEI_compute_data+0x238>)
 800414a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800414e:	f7fc fa1f 	bl	8000590 <__aeabi_dmul>
 8004152:	4602      	mov	r2, r0
 8004154:	460b      	mov	r3, r1
 8004156:	4614      	mov	r4, r2
 8004158:	461d      	mov	r5, r3
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6a1b      	ldr	r3, [r3, #32]
 800415e:	ee07 3a90 	vmov	s15, r3
 8004162:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004166:	ee17 0a90 	vmov	r0, s15
 800416a:	f7fc f9b9 	bl	80004e0 <__aeabi_f2d>
 800416e:	4602      	mov	r2, r0
 8004170:	460b      	mov	r3, r1
 8004172:	4620      	mov	r0, r4
 8004174:	4629      	mov	r1, r5
 8004176:	f7fc fb35 	bl	80007e4 <__aeabi_ddiv>
 800417a:	4602      	mov	r2, r0
 800417c:	460b      	mov	r3, r1
 800417e:	4614      	mov	r4, r2
 8004180:	461d      	mov	r5, r3
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004186:	4618      	mov	r0, r3
 8004188:	f7fc f9aa 	bl	80004e0 <__aeabi_f2d>
 800418c:	4602      	mov	r2, r0
 800418e:	460b      	mov	r3, r1
 8004190:	4620      	mov	r0, r4
 8004192:	4629      	mov	r1, r5
 8004194:	f7fc f9fc 	bl	8000590 <__aeabi_dmul>
 8004198:	4602      	mov	r2, r0
 800419a:	460b      	mov	r3, r1
 800419c:	4610      	mov	r0, r2
 800419e:	4619      	mov	r1, r3
 80041a0:	f7fc fcd8 	bl	8000b54 <__aeabi_d2f>
 80041a4:	4602      	mov	r2, r0
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	635a      	str	r2, [r3, #52]	@ 0x34

    // Calculate linear velocity
    qei->mmps = qei->pps * M_PI * qei->pulley_diameter / (float)(qei->ppr) * qei->gear_ratio;  // Assuming 10mm per rev
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041ae:	4618      	mov	r0, r3
 80041b0:	f7fc f996 	bl	80004e0 <__aeabi_f2d>
 80041b4:	a34a      	add	r3, pc, #296	@ (adr r3, 80042e0 <QEI_compute_data+0x238>)
 80041b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ba:	f7fc f9e9 	bl	8000590 <__aeabi_dmul>
 80041be:	4602      	mov	r2, r0
 80041c0:	460b      	mov	r3, r1
 80041c2:	4614      	mov	r4, r2
 80041c4:	461d      	mov	r5, r3
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041ca:	4618      	mov	r0, r3
 80041cc:	f7fc f988 	bl	80004e0 <__aeabi_f2d>
 80041d0:	4602      	mov	r2, r0
 80041d2:	460b      	mov	r3, r1
 80041d4:	4620      	mov	r0, r4
 80041d6:	4629      	mov	r1, r5
 80041d8:	f7fc f9da 	bl	8000590 <__aeabi_dmul>
 80041dc:	4602      	mov	r2, r0
 80041de:	460b      	mov	r3, r1
 80041e0:	4614      	mov	r4, r2
 80041e2:	461d      	mov	r5, r3
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6a1b      	ldr	r3, [r3, #32]
 80041e8:	ee07 3a90 	vmov	s15, r3
 80041ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80041f0:	ee17 0a90 	vmov	r0, s15
 80041f4:	f7fc f974 	bl	80004e0 <__aeabi_f2d>
 80041f8:	4602      	mov	r2, r0
 80041fa:	460b      	mov	r3, r1
 80041fc:	4620      	mov	r0, r4
 80041fe:	4629      	mov	r1, r5
 8004200:	f7fc faf0 	bl	80007e4 <__aeabi_ddiv>
 8004204:	4602      	mov	r2, r0
 8004206:	460b      	mov	r3, r1
 8004208:	4614      	mov	r4, r2
 800420a:	461d      	mov	r5, r3
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004210:	4618      	mov	r0, r3
 8004212:	f7fc f965 	bl	80004e0 <__aeabi_f2d>
 8004216:	4602      	mov	r2, r0
 8004218:	460b      	mov	r3, r1
 800421a:	4620      	mov	r0, r4
 800421c:	4629      	mov	r1, r5
 800421e:	f7fc f9b7 	bl	8000590 <__aeabi_dmul>
 8004222:	4602      	mov	r2, r0
 8004224:	460b      	mov	r3, r1
 8004226:	4610      	mov	r0, r2
 8004228:	4619      	mov	r1, r3
 800422a:	f7fc fc93 	bl	8000b54 <__aeabi_d2f>
 800422e:	4602      	mov	r2, r0
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	64da      	str	r2, [r3, #76]	@ 0x4c

    // Store current angular velocity for acceleration calculation
    qei->r[NOW] = qei->radps;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	609a      	str	r2, [r3, #8]

    // Store current linear velocity for acceleration calculation
    qei->m[NOW] = qei->mmps;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	611a      	str	r2, [r3, #16]

    // Calculate acceleration
    float diff_angular_velocity = qei->r[NOW] - qei->r[PREV];
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	ed93 7a02 	vldr	s14, [r3, #8]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	edd3 7a03 	vldr	s15, [r3, #12]
 8004250:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004254:	edc7 7a03 	vstr	s15, [r7, #12]
    qei->radpss = (diff_angular_velocity == 0) ? 0 : diff_angular_velocity * qei->freq;
 8004258:	edd7 7a03 	vldr	s15, [r7, #12]
 800425c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004264:	d00a      	beq.n	800427c <QEI_compute_data+0x1d4>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800426a:	ee07 3a90 	vmov	s15, r3
 800426e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004272:	edd7 7a03 	vldr	s15, [r7, #12]
 8004276:	ee67 7a27 	vmul.f32	s15, s14, s15
 800427a:	e001      	b.n	8004280 <QEI_compute_data+0x1d8>
 800427c:	eddf 7a1b 	vldr	s15, [pc, #108]	@ 80042ec <QEI_compute_data+0x244>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44

    float diff_linear_velocity = qei->m[NOW] - qei->m[PREV];
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	ed93 7a04 	vldr	s14, [r3, #16]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	edd3 7a05 	vldr	s15, [r3, #20]
 8004292:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004296:	edc7 7a02 	vstr	s15, [r7, #8]
    qei->mmpss = (diff_linear_velocity == 0) ? 0 : diff_linear_velocity * qei->freq;
 800429a:	edd7 7a02 	vldr	s15, [r7, #8]
 800429e:	eef5 7a40 	vcmp.f32	s15, #0.0
 80042a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042a6:	d00a      	beq.n	80042be <QEI_compute_data+0x216>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042ac:	ee07 3a90 	vmov	s15, r3
 80042b0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80042b4:	edd7 7a02 	vldr	s15, [r7, #8]
 80042b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042bc:	e001      	b.n	80042c2 <QEI_compute_data+0x21a>
 80042be:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 80042ec <QEI_compute_data+0x244>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50

    // Store current velocity for next acceleration calculation
    qei->r[PREV] = qei->r[NOW];
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	689a      	ldr	r2, [r3, #8]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	60da      	str	r2, [r3, #12]
    qei->m[PREV] = qei->m[NOW];
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	691a      	ldr	r2, [r3, #16]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	615a      	str	r2, [r3, #20]
}
 80042d8:	bf00      	nop
 80042da:	3710      	adds	r7, #16
 80042dc:	46bd      	mov	sp, r7
 80042de:	bdb0      	pop	{r4, r5, r7, pc}
 80042e0:	54442d18 	.word	0x54442d18
 80042e4:	400921fb 	.word	0x400921fb
 80042e8:	404e0000 	.word	0x404e0000
 80042ec:	00000000 	.word	0x00000000

080042f0 <QEI_reset>:

void QEI_reset(QEI *qei) {
 80042f0:	b480      	push	{r7}
 80042f2:	b083      	sub	sp, #12
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
    // Reset counter history
    qei->c[NOW] = 0;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2200      	movs	r2, #0
 80042fc:	601a      	str	r2, [r3, #0]
    qei->c[PREV] = 0;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2200      	movs	r2, #0
 8004302:	605a      	str	r2, [r3, #4]

    // Reset all position and velocity values
    qei->diff_counts = 0;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2200      	movs	r2, #0
 8004308:	625a      	str	r2, [r3, #36]	@ 0x24
    qei->rpm = 0;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f04f 0200 	mov.w	r2, #0
 8004310:	631a      	str	r2, [r3, #48]	@ 0x30
    qei->pulses = 0;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2200      	movs	r2, #0
 8004316:	639a      	str	r2, [r3, #56]	@ 0x38
    qei->revs = 0;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f04f 0200 	mov.w	r2, #0
 800431e:	63da      	str	r2, [r3, #60]	@ 0x3c
    qei->rads = 0;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	f04f 0200 	mov.w	r2, #0
 8004326:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->mm = 0;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f04f 0200 	mov.w	r2, #0
 800432e:	649a      	str	r2, [r3, #72]	@ 0x48

    // Reset velocity history
    qei->r[NOW] = 0;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f04f 0200 	mov.w	r2, #0
 8004336:	609a      	str	r2, [r3, #8]
    qei->r[PREV] = 0;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f04f 0200 	mov.w	r2, #0
 800433e:	60da      	str	r2, [r3, #12]
    qei->m[NOW] = 0;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	f04f 0200 	mov.w	r2, #0
 8004346:	611a      	str	r2, [r3, #16]
    qei->m[PREV] = 0;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f04f 0200 	mov.w	r2, #0
 800434e:	615a      	str	r2, [r3, #20]
}
 8004350:	bf00      	nop
 8004352:	370c      	adds	r7, #12
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr

0800435c <Trapezoidal_Generator>:
 */

#include "Trapezoidal.h"

void Trapezoidal_Generator(volatile Trapezoidal_GenStruct *trapGen,
        float32_t initial_p, float32_t target_p, float32_t vmax, float32_t amax) {
 800435c:	b580      	push	{r7, lr}
 800435e:	b08e      	sub	sp, #56	@ 0x38
 8004360:	af00      	add	r7, sp, #0
 8004362:	6178      	str	r0, [r7, #20]
 8004364:	ed87 0a04 	vstr	s0, [r7, #16]
 8004368:	edc7 0a03 	vstr	s1, [r7, #12]
 800436c:	ed87 1a02 	vstr	s2, [r7, #8]
 8004370:	edc7 1a01 	vstr	s3, [r7, #4]
    // Set default values
    trapGen->dir = 0;
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	2200      	movs	r2, #0
 8004378:	741a      	strb	r2, [r3, #16]
    trapGen->time_total = 0.0f;
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	f04f 0200 	mov.w	r2, #0
 8004380:	60da      	str	r2, [r3, #12]
    trapGen->t1 = 0.0f;
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	f04f 0200 	mov.w	r2, #0
 8004388:	601a      	str	r2, [r3, #0]
    trapGen->t2 = 0.0f;
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	f04f 0200 	mov.w	r2, #0
 8004390:	605a      	str	r2, [r3, #4]
    trapGen->t3 = 0.0f;
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	f04f 0200 	mov.w	r2, #0
 8004398:	609a      	str	r2, [r3, #8]

    // Calculate the distance to travel
    float32_t distance = fabsf(target_p - initial_p);
 800439a:	ed97 7a03 	vldr	s14, [r7, #12]
 800439e:	edd7 7a04 	vldr	s15, [r7, #16]
 80043a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80043a6:	eef0 7ae7 	vabs.f32	s15, s15
 80043aa:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

    // Determine the direction of the motion
    if (target_p - initial_p < 0) {
 80043ae:	ed97 7a03 	vldr	s14, [r7, #12]
 80043b2:	edd7 7a04 	vldr	s15, [r7, #16]
 80043b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80043ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80043be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043c2:	d503      	bpl.n	80043cc <Trapezoidal_Generator+0x70>
        trapGen->dir = -1;
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	22ff      	movs	r2, #255	@ 0xff
 80043c8:	741a      	strb	r2, [r3, #16]
 80043ca:	e002      	b.n	80043d2 <Trapezoidal_Generator+0x76>
    } else {
        trapGen->dir = 1;
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	2201      	movs	r2, #1
 80043d0:	741a      	strb	r2, [r3, #16]
    }

    // If no movement required or zero acceleration
    if (distance == 0.0f || amax == 0.0f) {
 80043d2:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80043d6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80043da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043de:	d006      	beq.n	80043ee <Trapezoidal_Generator+0x92>
 80043e0:	edd7 7a01 	vldr	s15, [r7, #4]
 80043e4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80043e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043ec:	d104      	bne.n	80043f8 <Trapezoidal_Generator+0x9c>
        trapGen->time_total = 0.0f;
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	f04f 0200 	mov.w	r2, #0
 80043f4:	60da      	str	r2, [r3, #12]
        return;
 80043f6:	e06f      	b.n	80044d8 <Trapezoidal_Generator+0x17c>
    }

    // Time to reach maximum velocity (assuming we can)
    float32_t ta = vmax / amax;
 80043f8:	edd7 6a02 	vldr	s13, [r7, #8]
 80043fc:	ed97 7a01 	vldr	s14, [r7, #4]
 8004400:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004404:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

    // Distance traveled during acceleration and deceleration phases
    float32_t sa = 0.5f * amax * ta * ta;  // Distance in acceleration phase
 8004408:	edd7 7a01 	vldr	s15, [r7, #4]
 800440c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004410:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004414:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8004418:	ee67 7a27 	vmul.f32	s15, s14, s15
 800441c:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8004420:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004424:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    float32_t sd = sa;                     // Distance in deceleration phase (same as acceleration)
 8004428:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800442a:	62bb      	str	r3, [r7, #40]	@ 0x28
    float32_t s_accdec = sa + sd;          // Total distance for acceleration + deceleration
 800442c:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8004430:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8004434:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004438:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    // Check if we have enough distance to reach maximum velocity
    if (distance >= s_accdec) {
 800443c:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8004440:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004444:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004448:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800444c:	db27      	blt.n	800449e <Trapezoidal_Generator+0x142>
        // Trapezoidal profile - we can reach maximum velocity
        float32_t sc = distance - s_accdec;  // Distance at constant velocity
 800444e:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8004452:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004456:	ee77 7a67 	vsub.f32	s15, s14, s15
 800445a:	edc7 7a07 	vstr	s15, [r7, #28]
        float32_t tc = sc / vmax;            // Time at constant velocity
 800445e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004462:	ed97 7a02 	vldr	s14, [r7, #8]
 8004466:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800446a:	edc7 7a06 	vstr	s15, [r7, #24]

        trapGen->t1 = ta;                    // End of acceleration phase
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004472:	601a      	str	r2, [r3, #0]
        trapGen->t2 = ta + tc;               // End of constant velocity phase
 8004474:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8004478:	edd7 7a06 	vldr	s15, [r7, #24]
 800447c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	edc3 7a01 	vstr	s15, [r3, #4]
        trapGen->t3 = 2 * ta + tc;           // End of deceleration phase
 8004486:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800448a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800448e:	edd7 7a06 	vldr	s15, [r7, #24]
 8004492:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	edc3 7a02 	vstr	s15, [r3, #8]
 800449c:	e018      	b.n	80044d0 <Trapezoidal_Generator+0x174>
        // For a triangular profile, we need to find the time to reach peak velocity
        // and the peak velocity itself

        // Using distance = 2 * (0.5 * amax * tp^2) and solving for tp
        // where tp is the time to reach peak velocity (half the total time)
        float32_t tp = sqrtf(distance / amax);
 800449e:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80044a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80044a6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80044aa:	eeb0 0a66 	vmov.f32	s0, s13
 80044ae:	f00e fb57 	bl	8012b60 <sqrtf>
 80044b2:	ed87 0a08 	vstr	s0, [r7, #32]

        trapGen->t1 = tp;                    // End of acceleration phase
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	6a3a      	ldr	r2, [r7, #32]
 80044ba:	601a      	str	r2, [r3, #0]
        trapGen->t2 = tp;                    // No constant velocity phase
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	6a3a      	ldr	r2, [r7, #32]
 80044c0:	605a      	str	r2, [r3, #4]
        trapGen->t3 = 2 * tp;                // End of deceleration phase
 80044c2:	edd7 7a08 	vldr	s15, [r7, #32]
 80044c6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	edc3 7a02 	vstr	s15, [r3, #8]
    }

    trapGen->time_total = trapGen->t3;
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	689a      	ldr	r2, [r3, #8]
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	60da      	str	r2, [r3, #12]
}
 80044d8:	3738      	adds	r7, #56	@ 0x38
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
	...

080044e0 <Trapezoidal_Evaluated>:

void Trapezoidal_Evaluated(volatile Trapezoidal_GenStruct *trapGen,
        volatile Trapezoidal_EvaStruct *evaTrapezoidal, float32_t initial_p,
        float32_t target_p, float32_t vmax, float32_t amax) {
 80044e0:	b480      	push	{r7}
 80044e2:	b08d      	sub	sp, #52	@ 0x34
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6178      	str	r0, [r7, #20]
 80044e8:	6139      	str	r1, [r7, #16]
 80044ea:	ed87 0a03 	vstr	s0, [r7, #12]
 80044ee:	edc7 0a02 	vstr	s1, [r7, #8]
 80044f2:	ed87 1a01 	vstr	s2, [r7, #4]
 80044f6:	edc7 1a00 	vstr	s3, [r7]

    // Update current time (assuming 1ms intervals)
    evaTrapezoidal->t += 1.0f / 1000.0f;
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	edd3 7a03 	vldr	s15, [r3, #12]
 8004500:	ed9f 7aa0 	vldr	s14, [pc, #640]	@ 8004784 <Trapezoidal_Evaluated+0x2a4>
 8004504:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	edc3 7a03 	vstr	s15, [r3, #12]

    // Check if trajectory is still active
    if (evaTrapezoidal->t <= trapGen->time_total) {
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	ed93 7a03 	vldr	s14, [r3, #12]
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	edd3 7a03 	vldr	s15, [r3, #12]
 800451a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800451e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004522:	f200 811b 	bhi.w	800475c <Trapezoidal_Evaluated+0x27c>
        evaTrapezoidal->isFinised = false;
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	2200      	movs	r2, #0
 800452a:	741a      	strb	r2, [r3, #16]

        // Calculate direction-adjusted acceleration
        float32_t accel = amax * trapGen->dir;
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	7c1b      	ldrb	r3, [r3, #16]
 8004530:	b25b      	sxtb	r3, r3
 8004532:	ee07 3a90 	vmov	s15, r3
 8004536:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800453a:	ed97 7a00 	vldr	s14, [r7]
 800453e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004542:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

        // Calculate peak velocity (might be vmax or lower for triangular profile)
        float32_t peak_vel;
        if (trapGen->t1 == trapGen->t2) {
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	ed93 7a00 	vldr	s14, [r3]
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	edd3 7a01 	vldr	s15, [r3, #4]
 8004552:	eeb4 7a67 	vcmp.f32	s14, s15
 8004556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800455a:	d109      	bne.n	8004570 <Trapezoidal_Evaluated+0x90>
            // Triangular profile - peak velocity is at t1
            peak_vel = accel * trapGen->t1;
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	edd3 7a00 	vldr	s15, [r3]
 8004562:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8004566:	ee67 7a27 	vmul.f32	s15, s14, s15
 800456a:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
 800456e:	e00c      	b.n	800458a <Trapezoidal_Evaluated+0xaa>
        } else {
            // Trapezoidal profile - peak velocity is vmax with direction
            peak_vel = vmax * trapGen->dir;
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	7c1b      	ldrb	r3, [r3, #16]
 8004574:	b25b      	sxtb	r3, r3
 8004576:	ee07 3a90 	vmov	s15, r3
 800457a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800457e:	ed97 7a01 	vldr	s14, [r7, #4]
 8004582:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004586:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
        }

        // Acceleration phase
        if (evaTrapezoidal->t <= trapGen->t1) {
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	ed93 7a03 	vldr	s14, [r3, #12]
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	edd3 7a00 	vldr	s15, [r3]
 8004596:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800459a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800459e:	d824      	bhi.n	80045ea <Trapezoidal_Evaluated+0x10a>
            // Position calculation: p = p0 + 0.5*a*t²
            evaTrapezoidal->setposition = initial_p + 0.5f * accel * evaTrapezoidal->t * evaTrapezoidal->t;
 80045a0:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80045a4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80045a8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	edd3 7a03 	vldr	s15, [r3, #12]
 80045b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	edd3 7a03 	vldr	s15, [r3, #12]
 80045bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80045c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80045c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	edc3 7a00 	vstr	s15, [r3]

            // Velocity calculation: v = a*t
            evaTrapezoidal->setvelocity = accel * evaTrapezoidal->t;
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	ed93 7a03 	vldr	s14, [r3, #12]
 80045d4:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80045d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	edc3 7a01 	vstr	s15, [r3, #4]

            // Constant acceleration
            evaTrapezoidal->setacceleration = accel;
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045e6:	609a      	str	r2, [r3, #8]
        // Ensure final position is exactly target_p
        evaTrapezoidal->setposition = target_p;
        evaTrapezoidal->setvelocity = 0.0f;
        evaTrapezoidal->setacceleration = 0.0f;
    }
}
 80045e8:	e0c6      	b.n	8004778 <Trapezoidal_Evaluated+0x298>
        else if (evaTrapezoidal->t <= trapGen->t2) {
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	ed93 7a03 	vldr	s14, [r3, #12]
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	edd3 7a01 	vldr	s15, [r3, #4]
 80045f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80045fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045fe:	d830      	bhi.n	8004662 <Trapezoidal_Evaluated+0x182>
            float32_t p1 = initial_p + 0.5f * accel * trapGen->t1 * trapGen->t1;
 8004600:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004604:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004608:	ee27 7a87 	vmul.f32	s14, s15, s14
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	edd3 7a00 	vldr	s15, [r3]
 8004612:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	edd3 7a00 	vldr	s15, [r3]
 800461c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004620:	ed97 7a03 	vldr	s14, [r7, #12]
 8004624:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004628:	edc7 7a06 	vstr	s15, [r7, #24]
            evaTrapezoidal->setposition = p1 + peak_vel * (evaTrapezoidal->t - trapGen->t1);
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	ed93 7a03 	vldr	s14, [r3, #12]
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	edd3 7a00 	vldr	s15, [r3]
 8004638:	ee37 7a67 	vsub.f32	s14, s14, s15
 800463c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8004640:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004644:	edd7 7a06 	vldr	s15, [r7, #24]
 8004648:	ee77 7a27 	vadd.f32	s15, s14, s15
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	edc3 7a00 	vstr	s15, [r3]
            evaTrapezoidal->setvelocity = peak_vel;
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004656:	605a      	str	r2, [r3, #4]
            evaTrapezoidal->setacceleration = 0.0f;
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	f04f 0200 	mov.w	r2, #0
 800465e:	609a      	str	r2, [r3, #8]
}
 8004660:	e08a      	b.n	8004778 <Trapezoidal_Evaluated+0x298>
        else if (evaTrapezoidal->t <= trapGen->t3) {
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	ed93 7a03 	vldr	s14, [r3, #12]
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	edd3 7a02 	vldr	s15, [r3, #8]
 800466e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004676:	d900      	bls.n	800467a <Trapezoidal_Evaluated+0x19a>
}
 8004678:	e07e      	b.n	8004778 <Trapezoidal_Evaluated+0x298>
            float32_t p1 = initial_p + 0.5f * accel * trapGen->t1 * trapGen->t1;
 800467a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800467e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004682:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	edd3 7a00 	vldr	s15, [r3]
 800468c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	edd3 7a00 	vldr	s15, [r3]
 8004696:	ee67 7a27 	vmul.f32	s15, s14, s15
 800469a:	ed97 7a03 	vldr	s14, [r7, #12]
 800469e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80046a2:	edc7 7a08 	vstr	s15, [r7, #32]
            float32_t p2 = p1;
 80046a6:	6a3b      	ldr	r3, [r7, #32]
 80046a8:	62bb      	str	r3, [r7, #40]	@ 0x28
            if (trapGen->t2 > trapGen->t1) {
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	ed93 7a01 	vldr	s14, [r3, #4]
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	edd3 7a00 	vldr	s15, [r3]
 80046b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80046ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046be:	dd11      	ble.n	80046e4 <Trapezoidal_Evaluated+0x204>
                p2 += peak_vel * (trapGen->t2 - trapGen->t1);
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	ed93 7a01 	vldr	s14, [r3, #4]
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	edd3 7a00 	vldr	s15, [r3]
 80046cc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80046d0:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80046d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046d8:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80046dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80046e0:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            float32_t td = evaTrapezoidal->t - trapGen->t2;
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	ed93 7a03 	vldr	s14, [r3, #12]
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	edd3 7a01 	vldr	s15, [r3, #4]
 80046f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80046f4:	edc7 7a07 	vstr	s15, [r7, #28]
            evaTrapezoidal->setposition = p2 + peak_vel * td - 0.5f * accel * td * td;
 80046f8:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80046fc:	edd7 7a07 	vldr	s15, [r7, #28]
 8004700:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004704:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8004708:	ee37 7a27 	vadd.f32	s14, s14, s15
 800470c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004710:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8004714:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8004718:	edd7 7a07 	vldr	s15, [r7, #28]
 800471c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004720:	edd7 7a07 	vldr	s15, [r7, #28]
 8004724:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004728:	ee77 7a67 	vsub.f32	s15, s14, s15
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	edc3 7a00 	vstr	s15, [r3]
            evaTrapezoidal->setvelocity = peak_vel - accel * td;
 8004732:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8004736:	edd7 7a07 	vldr	s15, [r7, #28]
 800473a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800473e:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8004742:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	edc3 7a01 	vstr	s15, [r3, #4]
            evaTrapezoidal->setacceleration = -accel;
 800474c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004750:	eef1 7a67 	vneg.f32	s15, s15
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	edc3 7a02 	vstr	s15, [r3, #8]
}
 800475a:	e00d      	b.n	8004778 <Trapezoidal_Evaluated+0x298>
        evaTrapezoidal->isFinised = true;
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	2201      	movs	r2, #1
 8004760:	741a      	strb	r2, [r3, #16]
        evaTrapezoidal->setposition = target_p;
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	68ba      	ldr	r2, [r7, #8]
 8004766:	601a      	str	r2, [r3, #0]
        evaTrapezoidal->setvelocity = 0.0f;
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	f04f 0200 	mov.w	r2, #0
 800476e:	605a      	str	r2, [r3, #4]
        evaTrapezoidal->setacceleration = 0.0f;
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	f04f 0200 	mov.w	r2, #0
 8004776:	609a      	str	r2, [r3, #8]
}
 8004778:	bf00      	nop
 800477a:	3734      	adds	r7, #52	@ 0x34
 800477c:	46bd      	mov	sp, r7
 800477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004782:	4770      	bx	lr
 8004784:	3a83126f 	.word	0x3a83126f

08004788 <temperature_to_base>:
    "ns", "us", "ms", "s", "min", "hour", "day",
    "C", "F", "K"
};

/* Custom conversion functions for temperature */
static float temperature_to_base(float value, Unit from_unit) {
 8004788:	b480      	push	{r7}
 800478a:	b083      	sub	sp, #12
 800478c:	af00      	add	r7, sp, #0
 800478e:	ed87 0a01 	vstr	s0, [r7, #4]
 8004792:	4603      	mov	r3, r0
 8004794:	70fb      	strb	r3, [r7, #3]
    switch (from_unit) {
 8004796:	78fb      	ldrb	r3, [r7, #3]
 8004798:	2b1a      	cmp	r3, #26
 800479a:	d018      	beq.n	80047ce <temperature_to_base+0x46>
 800479c:	2b1a      	cmp	r3, #26
 800479e:	dc1d      	bgt.n	80047dc <temperature_to_base+0x54>
 80047a0:	2b18      	cmp	r3, #24
 80047a2:	d002      	beq.n	80047aa <temperature_to_base+0x22>
 80047a4:	2b19      	cmp	r3, #25
 80047a6:	d003      	beq.n	80047b0 <temperature_to_base+0x28>
 80047a8:	e018      	b.n	80047dc <temperature_to_base+0x54>
        case UNIT_CELSIUS:
            return value;  /* Base unit is Celsius */
 80047aa:	edd7 7a01 	vldr	s15, [r7, #4]
 80047ae:	e017      	b.n	80047e0 <temperature_to_base+0x58>
        case UNIT_FAHRENHEIT:
            return (value - 32.0f) * 5.0f / 9.0f;
 80047b0:	edd7 7a01 	vldr	s15, [r7, #4]
 80047b4:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80047f0 <temperature_to_base+0x68>
 80047b8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80047bc:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 80047c0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80047c4:	eef2 6a02 	vmov.f32	s13, #34	@ 0x41100000  9.0
 80047c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80047cc:	e008      	b.n	80047e0 <temperature_to_base+0x58>
        case UNIT_KELVIN:
            return value - 273.15f;
 80047ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80047d2:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 80047f4 <temperature_to_base+0x6c>
 80047d6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80047da:	e001      	b.n	80047e0 <temperature_to_base+0x58>
        default:
            return value;
 80047dc:	edd7 7a01 	vldr	s15, [r7, #4]
    }
}
 80047e0:	eeb0 0a67 	vmov.f32	s0, s15
 80047e4:	370c      	adds	r7, #12
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr
 80047ee:	bf00      	nop
 80047f0:	42000000 	.word	0x42000000
 80047f4:	43889333 	.word	0x43889333

080047f8 <temperature_from_base>:

static float temperature_from_base(float value, Unit to_unit) {
 80047f8:	b480      	push	{r7}
 80047fa:	b083      	sub	sp, #12
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	ed87 0a01 	vstr	s0, [r7, #4]
 8004802:	4603      	mov	r3, r0
 8004804:	70fb      	strb	r3, [r7, #3]
    switch (to_unit) {
 8004806:	78fb      	ldrb	r3, [r7, #3]
 8004808:	2b1a      	cmp	r3, #26
 800480a:	d018      	beq.n	800483e <temperature_from_base+0x46>
 800480c:	2b1a      	cmp	r3, #26
 800480e:	dc1d      	bgt.n	800484c <temperature_from_base+0x54>
 8004810:	2b18      	cmp	r3, #24
 8004812:	d002      	beq.n	800481a <temperature_from_base+0x22>
 8004814:	2b19      	cmp	r3, #25
 8004816:	d003      	beq.n	8004820 <temperature_from_base+0x28>
 8004818:	e018      	b.n	800484c <temperature_from_base+0x54>
        case UNIT_CELSIUS:
            return value;  /* Base unit is Celsius */
 800481a:	edd7 7a01 	vldr	s15, [r7, #4]
 800481e:	e017      	b.n	8004850 <temperature_from_base+0x58>
        case UNIT_FAHRENHEIT:
            return (value * 9.0f / 5.0f) + 32.0f;
 8004820:	edd7 7a01 	vldr	s15, [r7, #4]
 8004824:	eeb2 7a02 	vmov.f32	s14, #34	@ 0x41100000  9.0
 8004828:	ee27 7a87 	vmul.f32	s14, s15, s14
 800482c:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 8004830:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004834:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8004860 <temperature_from_base+0x68>
 8004838:	ee77 7a87 	vadd.f32	s15, s15, s14
 800483c:	e008      	b.n	8004850 <temperature_from_base+0x58>
        case UNIT_KELVIN:
            return value + 273.15f;
 800483e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004842:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8004864 <temperature_from_base+0x6c>
 8004846:	ee77 7a87 	vadd.f32	s15, s15, s14
 800484a:	e001      	b.n	8004850 <temperature_from_base+0x58>
        default:
            return value;
 800484c:	edd7 7a01 	vldr	s15, [r7, #4]
    }
}
 8004850:	eeb0 0a67 	vmov.f32	s0, s15
 8004854:	370c      	adds	r7, #12
 8004856:	46bd      	mov	sp, r7
 8004858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485c:	4770      	bx	lr
 800485e:	bf00      	nop
 8004860:	42000000 	.word	0x42000000
 8004864:	43889333 	.word	0x43889333

08004868 <init_length_converter>:

/* Initialize unit converters with conversion factors */
static void init_length_converter(UnitConverter *converter) {
 8004868:	b480      	push	{r7}
 800486a:	b085      	sub	sp, #20
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_LENGTH;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2200      	movs	r2, #0
 8004874:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_M;  /* Meter is the base unit */
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2202      	movs	r2, #2
 800487a:	705a      	strb	r2, [r3, #1]

    /* Initialize all conversion factors to 0.0 */
    for (int i = 0; i < UNIT_COUNT; i++) {
 800487c:	2300      	movs	r3, #0
 800487e:	60fb      	str	r3, [r7, #12]
 8004880:	e00a      	b.n	8004898 <init_length_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	4413      	add	r3, r2
 800488a:	3304      	adds	r3, #4
 800488c:	f04f 0200 	mov.w	r2, #0
 8004890:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	3301      	adds	r3, #1
 8004896:	60fb      	str	r3, [r7, #12]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2b1a      	cmp	r3, #26
 800489c:	ddf1      	ble.n	8004882 <init_length_converter+0x1a>
    }

    /* Set conversion factors for length units (to convert to meters) */
    converter->conversion_factors[UNIT_MM] = 0.001f;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4a11      	ldr	r2, [pc, #68]	@ (80048e8 <init_length_converter+0x80>)
 80048a2:	605a      	str	r2, [r3, #4]
    converter->conversion_factors[UNIT_CM] = 0.01f;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	4a11      	ldr	r2, [pc, #68]	@ (80048ec <init_length_converter+0x84>)
 80048a8:	609a      	str	r2, [r3, #8]
    converter->conversion_factors[UNIT_M] = 1.0f;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80048b0:	60da      	str	r2, [r3, #12]
    converter->conversion_factors[UNIT_KM] = 1000.0f;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	4a0e      	ldr	r2, [pc, #56]	@ (80048f0 <init_length_converter+0x88>)
 80048b6:	611a      	str	r2, [r3, #16]
    converter->conversion_factors[UNIT_INCH] = 0.0254f;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	4a0e      	ldr	r2, [pc, #56]	@ (80048f4 <init_length_converter+0x8c>)
 80048bc:	615a      	str	r2, [r3, #20]
    converter->conversion_factors[UNIT_FOOT] = 0.3048f;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4a0d      	ldr	r2, [pc, #52]	@ (80048f8 <init_length_converter+0x90>)
 80048c2:	619a      	str	r2, [r3, #24]
    converter->conversion_factors[UNIT_YARD] = 0.9144f;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	4a0d      	ldr	r2, [pc, #52]	@ (80048fc <init_length_converter+0x94>)
 80048c8:	61da      	str	r2, [r3, #28]
    converter->conversion_factors[UNIT_MILE] = 1609.344f;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	4a0c      	ldr	r2, [pc, #48]	@ (8004900 <init_length_converter+0x98>)
 80048ce:	621a      	str	r2, [r3, #32]

    converter->to_base = NULL;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2200      	movs	r2, #0
 80048d4:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = NULL;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2200      	movs	r2, #0
 80048da:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80048dc:	bf00      	nop
 80048de:	3714      	adds	r7, #20
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr
 80048e8:	3a83126f 	.word	0x3a83126f
 80048ec:	3c23d70a 	.word	0x3c23d70a
 80048f0:	447a0000 	.word	0x447a0000
 80048f4:	3cd013a9 	.word	0x3cd013a9
 80048f8:	3e9c0ebf 	.word	0x3e9c0ebf
 80048fc:	3f6a161e 	.word	0x3f6a161e
 8004900:	44c92b02 	.word	0x44c92b02

08004904 <init_mass_converter>:

static void init_mass_converter(UnitConverter *converter) {
 8004904:	b480      	push	{r7}
 8004906:	b085      	sub	sp, #20
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_MASS;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_KG;  /* Kilogram is the base unit */
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	220a      	movs	r2, #10
 8004916:	705a      	strb	r2, [r3, #1]

    /* Initialize all conversion factors to 0.0 */
    for (int i = 0; i < UNIT_COUNT; i++) {
 8004918:	2300      	movs	r3, #0
 800491a:	60fb      	str	r3, [r7, #12]
 800491c:	e00a      	b.n	8004934 <init_mass_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	4413      	add	r3, r2
 8004926:	3304      	adds	r3, #4
 8004928:	f04f 0200 	mov.w	r2, #0
 800492c:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	3301      	adds	r3, #1
 8004932:	60fb      	str	r3, [r7, #12]
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2b1a      	cmp	r3, #26
 8004938:	ddf1      	ble.n	800491e <init_mass_converter+0x1a>
    }

    /* Set conversion factors for mass units (to convert to kilograms) */
    converter->conversion_factors[UNIT_MG] = 0.000001f;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	4a0e      	ldr	r2, [pc, #56]	@ (8004978 <init_mass_converter+0x74>)
 800493e:	625a      	str	r2, [r3, #36]	@ 0x24
    converter->conversion_factors[UNIT_G] = 0.001f;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	4a0e      	ldr	r2, [pc, #56]	@ (800497c <init_mass_converter+0x78>)
 8004944:	629a      	str	r2, [r3, #40]	@ 0x28
    converter->conversion_factors[UNIT_KG] = 1.0f;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800494c:	62da      	str	r2, [r3, #44]	@ 0x2c
    converter->conversion_factors[UNIT_TON] = 1000.0f;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4a0b      	ldr	r2, [pc, #44]	@ (8004980 <init_mass_converter+0x7c>)
 8004952:	631a      	str	r2, [r3, #48]	@ 0x30
    converter->conversion_factors[UNIT_OZ] = 0.0283495f;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	4a0b      	ldr	r2, [pc, #44]	@ (8004984 <init_mass_converter+0x80>)
 8004958:	635a      	str	r2, [r3, #52]	@ 0x34
    converter->conversion_factors[UNIT_LB] = 0.453592f;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4a0a      	ldr	r2, [pc, #40]	@ (8004988 <init_mass_converter+0x84>)
 800495e:	639a      	str	r2, [r3, #56]	@ 0x38

    converter->to_base = NULL;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2200      	movs	r2, #0
 8004964:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = NULL;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2200      	movs	r2, #0
 800496a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800496c:	bf00      	nop
 800496e:	3714      	adds	r7, #20
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr
 8004978:	358637bd 	.word	0x358637bd
 800497c:	3a83126f 	.word	0x3a83126f
 8004980:	447a0000 	.word	0x447a0000
 8004984:	3ce83d36 	.word	0x3ce83d36
 8004988:	3ee83d36 	.word	0x3ee83d36

0800498c <init_angle_converter>:

static void init_angle_converter(UnitConverter *converter) {
 800498c:	b480      	push	{r7}
 800498e:	b085      	sub	sp, #20
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_ANGLE;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2202      	movs	r2, #2
 8004998:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_RADIAN;  /* Radian is the base unit */
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	220f      	movs	r2, #15
 800499e:	705a      	strb	r2, [r3, #1]

    /* Initialize all conversion factors to 0.0 */
    for (int i = 0; i < UNIT_COUNT; i++) {
 80049a0:	2300      	movs	r3, #0
 80049a2:	60fb      	str	r3, [r7, #12]
 80049a4:	e00a      	b.n	80049bc <init_angle_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 80049a6:	687a      	ldr	r2, [r7, #4]
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	009b      	lsls	r3, r3, #2
 80049ac:	4413      	add	r3, r2
 80049ae:	3304      	adds	r3, #4
 80049b0:	f04f 0200 	mov.w	r2, #0
 80049b4:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	3301      	adds	r3, #1
 80049ba:	60fb      	str	r3, [r7, #12]
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2b1a      	cmp	r3, #26
 80049c0:	ddf1      	ble.n	80049a6 <init_angle_converter+0x1a>
    }

    /* Set conversion factors for angle units (to convert to radians) */
    converter->conversion_factors[UNIT_DEGREE] = M_PI / 180.0f;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	4a0a      	ldr	r2, [pc, #40]	@ (80049f0 <init_angle_converter+0x64>)
 80049c6:	63da      	str	r2, [r3, #60]	@ 0x3c
    converter->conversion_factors[UNIT_RADIAN] = 1.0f;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80049ce:	641a      	str	r2, [r3, #64]	@ 0x40
    converter->conversion_factors[UNIT_GRADIAN] = M_PI / 200.0f;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	4a08      	ldr	r2, [pc, #32]	@ (80049f4 <init_angle_converter+0x68>)
 80049d4:	645a      	str	r2, [r3, #68]	@ 0x44

    converter->to_base = NULL;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2200      	movs	r2, #0
 80049da:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = NULL;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80049e2:	bf00      	nop
 80049e4:	3714      	adds	r7, #20
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr
 80049ee:	bf00      	nop
 80049f0:	3c8efa35 	.word	0x3c8efa35
 80049f4:	3c80adfd 	.word	0x3c80adfd

080049f8 <init_time_converter>:

static void init_time_converter(UnitConverter *converter) {
 80049f8:	b480      	push	{r7}
 80049fa:	b085      	sub	sp, #20
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_TIME;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2203      	movs	r2, #3
 8004a04:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_SECOND;  /* Second is the base unit */
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2214      	movs	r2, #20
 8004a0a:	705a      	strb	r2, [r3, #1]

    /* Initialize all conversion factors to 0.0 */
    for (int i = 0; i < UNIT_COUNT; i++) {
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	60fb      	str	r3, [r7, #12]
 8004a10:	e00a      	b.n	8004a28 <init_time_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	4413      	add	r3, r2
 8004a1a:	3304      	adds	r3, #4
 8004a1c:	f04f 0200 	mov.w	r2, #0
 8004a20:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	3301      	adds	r3, #1
 8004a26:	60fb      	str	r3, [r7, #12]
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2b1a      	cmp	r3, #26
 8004a2c:	ddf1      	ble.n	8004a12 <init_time_converter+0x1a>
    }

    /* Set conversion factors for time units (to convert to seconds) */
    converter->conversion_factors[UNIT_NANOSECOND] = 1e-9f;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	4a10      	ldr	r2, [pc, #64]	@ (8004a74 <init_time_converter+0x7c>)
 8004a32:	649a      	str	r2, [r3, #72]	@ 0x48
    converter->conversion_factors[UNIT_MICROSECOND] = 1e-6f;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	4a10      	ldr	r2, [pc, #64]	@ (8004a78 <init_time_converter+0x80>)
 8004a38:	64da      	str	r2, [r3, #76]	@ 0x4c
    converter->conversion_factors[UNIT_MILLISECOND] = 1e-3f;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4a0f      	ldr	r2, [pc, #60]	@ (8004a7c <init_time_converter+0x84>)
 8004a3e:	651a      	str	r2, [r3, #80]	@ 0x50
    converter->conversion_factors[UNIT_SECOND] = 1.0f;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004a46:	655a      	str	r2, [r3, #84]	@ 0x54
    converter->conversion_factors[UNIT_MINUTE] = 60.0f;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	4a0d      	ldr	r2, [pc, #52]	@ (8004a80 <init_time_converter+0x88>)
 8004a4c:	659a      	str	r2, [r3, #88]	@ 0x58
    converter->conversion_factors[UNIT_HOUR] = 3600.0f;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	4a0c      	ldr	r2, [pc, #48]	@ (8004a84 <init_time_converter+0x8c>)
 8004a52:	65da      	str	r2, [r3, #92]	@ 0x5c
    converter->conversion_factors[UNIT_DAY] = 86400.0f;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	4a0c      	ldr	r2, [pc, #48]	@ (8004a88 <init_time_converter+0x90>)
 8004a58:	661a      	str	r2, [r3, #96]	@ 0x60

    converter->to_base = NULL;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = NULL;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2200      	movs	r2, #0
 8004a64:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004a66:	bf00      	nop
 8004a68:	3714      	adds	r7, #20
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a70:	4770      	bx	lr
 8004a72:	bf00      	nop
 8004a74:	3089705f 	.word	0x3089705f
 8004a78:	358637bd 	.word	0x358637bd
 8004a7c:	3a83126f 	.word	0x3a83126f
 8004a80:	42700000 	.word	0x42700000
 8004a84:	45610000 	.word	0x45610000
 8004a88:	47a8c000 	.word	0x47a8c000

08004a8c <init_temperature_converter>:

static void init_temperature_converter(UnitConverter *converter) {
 8004a8c:	b480      	push	{r7}
 8004a8e:	b085      	sub	sp, #20
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_TEMPERATURE;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2204      	movs	r2, #4
 8004a98:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_CELSIUS;  /* Celsius is the base unit */
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2218      	movs	r2, #24
 8004a9e:	705a      	strb	r2, [r3, #1]

    /* For temperature, all conversion factors are 0 because we use custom functions */
    for (int i = 0; i < UNIT_COUNT; i++) {
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	60fb      	str	r3, [r7, #12]
 8004aa4:	e00a      	b.n	8004abc <init_temperature_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	4413      	add	r3, r2
 8004aae:	3304      	adds	r3, #4
 8004ab0:	f04f 0200 	mov.w	r2, #0
 8004ab4:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	3301      	adds	r3, #1
 8004aba:	60fb      	str	r3, [r7, #12]
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2b1a      	cmp	r3, #26
 8004ac0:	ddf1      	ble.n	8004aa6 <init_temperature_converter+0x1a>
    }

    /* Set custom conversion functions for temperature */
    converter->to_base = temperature_to_base;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	4a05      	ldr	r2, [pc, #20]	@ (8004adc <init_temperature_converter+0x50>)
 8004ac6:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = temperature_from_base;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	4a05      	ldr	r2, [pc, #20]	@ (8004ae0 <init_temperature_converter+0x54>)
 8004acc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004ace:	bf00      	nop
 8004ad0:	3714      	adds	r7, #20
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr
 8004ada:	bf00      	nop
 8004adc:	08004789 	.word	0x08004789
 8004ae0:	080047f9 	.word	0x080047f9

08004ae4 <UnitConverter_init>:

/* Initialize the unit converter system */
void UnitConverter_init(UnitConverterSystem *system) {
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b082      	sub	sp, #8
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
    /* Initialize each unit type converter */
    init_length_converter(&system->converters[UNIT_TYPE_LENGTH]);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	4618      	mov	r0, r3
 8004af0:	f7ff feba 	bl	8004868 <init_length_converter>
    init_mass_converter(&system->converters[UNIT_TYPE_MASS]);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	3378      	adds	r3, #120	@ 0x78
 8004af8:	4618      	mov	r0, r3
 8004afa:	f7ff ff03 	bl	8004904 <init_mass_converter>
    init_angle_converter(&system->converters[UNIT_TYPE_ANGLE]);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	33f0      	adds	r3, #240	@ 0xf0
 8004b02:	4618      	mov	r0, r3
 8004b04:	f7ff ff42 	bl	800498c <init_angle_converter>
    init_time_converter(&system->converters[UNIT_TYPE_TIME]);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f7ff ff72 	bl	80049f8 <init_time_converter>
    init_temperature_converter(&system->converters[UNIT_TYPE_TEMPERATURE]);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f7ff ffb6 	bl	8004a8c <init_temperature_converter>
}
 8004b20:	bf00      	nop
 8004b22:	3708      	adds	r7, #8
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}

08004b28 <UnitConverter_get_unit_type>:

/* Get the unit type for a given unit */
UnitType UnitConverter_get_unit_type(Unit unit) {
 8004b28:	b480      	push	{r7}
 8004b2a:	b083      	sub	sp, #12
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	4603      	mov	r3, r0
 8004b30:	71fb      	strb	r3, [r7, #7]
    if (unit < UNIT_COUNT) {
 8004b32:	79fb      	ldrb	r3, [r7, #7]
 8004b34:	2b1a      	cmp	r3, #26
 8004b36:	d803      	bhi.n	8004b40 <UnitConverter_get_unit_type+0x18>
        return unit_types[unit];
 8004b38:	79fb      	ldrb	r3, [r7, #7]
 8004b3a:	4a05      	ldr	r2, [pc, #20]	@ (8004b50 <UnitConverter_get_unit_type+0x28>)
 8004b3c:	5cd3      	ldrb	r3, [r2, r3]
 8004b3e:	e000      	b.n	8004b42 <UnitConverter_get_unit_type+0x1a>
    }
    return UNIT_TYPE_LENGTH; /* Default to length if invalid */
 8004b40:	2300      	movs	r3, #0
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	370c      	adds	r7, #12
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr
 8004b4e:	bf00      	nop
 8004b50:	20000318 	.word	0x20000318

08004b54 <UnitConverter_convert>:

/* Convert a value from one unit to another */
float UnitConverter_convert(UnitConverterSystem *system, float value, Unit from_unit, Unit to_unit) {
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b088      	sub	sp, #32
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	60f8      	str	r0, [r7, #12]
 8004b5c:	ed87 0a02 	vstr	s0, [r7, #8]
 8004b60:	460b      	mov	r3, r1
 8004b62:	71fb      	strb	r3, [r7, #7]
 8004b64:	4613      	mov	r3, r2
 8004b66:	71bb      	strb	r3, [r7, #6]
    /* Check if units are of the same type */
    UnitType from_type = UnitConverter_get_unit_type(from_unit);
 8004b68:	79fb      	ldrb	r3, [r7, #7]
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f7ff ffdc 	bl	8004b28 <UnitConverter_get_unit_type>
 8004b70:	4603      	mov	r3, r0
 8004b72:	76fb      	strb	r3, [r7, #27]
    UnitType to_type = UnitConverter_get_unit_type(to_unit);
 8004b74:	79bb      	ldrb	r3, [r7, #6]
 8004b76:	4618      	mov	r0, r3
 8004b78:	f7ff ffd6 	bl	8004b28 <UnitConverter_get_unit_type>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	76bb      	strb	r3, [r7, #26]

    if (from_type != to_type) {
 8004b80:	7efa      	ldrb	r2, [r7, #27]
 8004b82:	7ebb      	ldrb	r3, [r7, #26]
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d002      	beq.n	8004b8e <UnitConverter_convert+0x3a>
        /* Cannot convert between different unit types */
        return value;
 8004b88:	edd7 7a02 	vldr	s15, [r7, #8]
 8004b8c:	e03b      	b.n	8004c06 <UnitConverter_convert+0xb2>
    }

    /* Get the appropriate converter */
    UnitConverter *converter = &system->converters[from_type];
 8004b8e:	7efa      	ldrb	r2, [r7, #27]
 8004b90:	4613      	mov	r3, r2
 8004b92:	011b      	lsls	r3, r3, #4
 8004b94:	1a9b      	subs	r3, r3, r2
 8004b96:	00db      	lsls	r3, r3, #3
 8004b98:	68fa      	ldr	r2, [r7, #12]
 8004b9a:	4413      	add	r3, r2
 8004b9c:	617b      	str	r3, [r7, #20]

    /* Convert to base unit */
    float base_value;
    if (converter->to_base) {
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d009      	beq.n	8004bba <UnitConverter_convert+0x66>
        /* Use custom function if available */
        base_value = converter->to_base(value, from_unit);
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004baa:	79fa      	ldrb	r2, [r7, #7]
 8004bac:	4610      	mov	r0, r2
 8004bae:	ed97 0a02 	vldr	s0, [r7, #8]
 8004bb2:	4798      	blx	r3
 8004bb4:	ed87 0a07 	vstr	s0, [r7, #28]
 8004bb8:	e00c      	b.n	8004bd4 <UnitConverter_convert+0x80>
    } else {
        /* Use conversion factor */
        base_value = value * converter->conversion_factors[from_unit];
 8004bba:	79fb      	ldrb	r3, [r7, #7]
 8004bbc:	697a      	ldr	r2, [r7, #20]
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	4413      	add	r3, r2
 8004bc2:	3304      	adds	r3, #4
 8004bc4:	edd3 7a00 	vldr	s15, [r3]
 8004bc8:	ed97 7a02 	vldr	s14, [r7, #8]
 8004bcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bd0:	edc7 7a07 	vstr	s15, [r7, #28]
    }

    /* Convert from base unit to target unit */
    if (converter->from_base) {
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d009      	beq.n	8004bf0 <UnitConverter_convert+0x9c>
        /* Use custom function if available */
        return converter->from_base(base_value, to_unit);
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004be0:	79ba      	ldrb	r2, [r7, #6]
 8004be2:	4610      	mov	r0, r2
 8004be4:	ed97 0a07 	vldr	s0, [r7, #28]
 8004be8:	4798      	blx	r3
 8004bea:	eef0 7a40 	vmov.f32	s15, s0
 8004bee:	e00a      	b.n	8004c06 <UnitConverter_convert+0xb2>
    } else {
        /* Use conversion factor */
        return base_value / converter->conversion_factors[to_unit];
 8004bf0:	79bb      	ldrb	r3, [r7, #6]
 8004bf2:	697a      	ldr	r2, [r7, #20]
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	4413      	add	r3, r2
 8004bf8:	3304      	adds	r3, #4
 8004bfa:	ed93 7a00 	vldr	s14, [r3]
 8004bfe:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c02:	eec6 7a87 	vdiv.f32	s15, s13, s14
    }
}
 8004c06:	eeb0 0a67 	vmov.f32	s0, s15
 8004c0a:	3720      	adds	r7, #32
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}

08004c10 <UnitConverter_angle>:
        return UnitConverter_convert(system, value, from_unit, to_unit);
    }
    return value;
}

float UnitConverter_angle(UnitConverterSystem *system, float value, Unit from_unit, Unit to_unit) {
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b084      	sub	sp, #16
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	60f8      	str	r0, [r7, #12]
 8004c18:	ed87 0a02 	vstr	s0, [r7, #8]
 8004c1c:	460b      	mov	r3, r1
 8004c1e:	71fb      	strb	r3, [r7, #7]
 8004c20:	4613      	mov	r3, r2
 8004c22:	71bb      	strb	r3, [r7, #6]
    if (UnitConverter_get_unit_type(from_unit) == UNIT_TYPE_ANGLE &&
 8004c24:	79fb      	ldrb	r3, [r7, #7]
 8004c26:	4618      	mov	r0, r3
 8004c28:	f7ff ff7e 	bl	8004b28 <UnitConverter_get_unit_type>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	2b02      	cmp	r3, #2
 8004c30:	d111      	bne.n	8004c56 <UnitConverter_angle+0x46>
        UnitConverter_get_unit_type(to_unit) == UNIT_TYPE_ANGLE) {
 8004c32:	79bb      	ldrb	r3, [r7, #6]
 8004c34:	4618      	mov	r0, r3
 8004c36:	f7ff ff77 	bl	8004b28 <UnitConverter_get_unit_type>
 8004c3a:	4603      	mov	r3, r0
    if (UnitConverter_get_unit_type(from_unit) == UNIT_TYPE_ANGLE &&
 8004c3c:	2b02      	cmp	r3, #2
 8004c3e:	d10a      	bne.n	8004c56 <UnitConverter_angle+0x46>
        return UnitConverter_convert(system, value, from_unit, to_unit);
 8004c40:	79ba      	ldrb	r2, [r7, #6]
 8004c42:	79fb      	ldrb	r3, [r7, #7]
 8004c44:	4619      	mov	r1, r3
 8004c46:	ed97 0a02 	vldr	s0, [r7, #8]
 8004c4a:	68f8      	ldr	r0, [r7, #12]
 8004c4c:	f7ff ff82 	bl	8004b54 <UnitConverter_convert>
 8004c50:	eef0 7a40 	vmov.f32	s15, s0
 8004c54:	e001      	b.n	8004c5a <UnitConverter_angle+0x4a>
    }
    return value;
 8004c56:	edd7 7a02 	vldr	s15, [r7, #8]
}
 8004c5a:	eeb0 0a67 	vmov.f32	s0, s15
 8004c5e:	3710      	adds	r7, #16
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}

08004c64 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b08c      	sub	sp, #48	@ 0x30
 8004c68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8004c6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004c6e:	2200      	movs	r2, #0
 8004c70:	601a      	str	r2, [r3, #0]
 8004c72:	605a      	str	r2, [r3, #4]
 8004c74:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8004c76:	1d3b      	adds	r3, r7, #4
 8004c78:	2220      	movs	r2, #32
 8004c7a:	2100      	movs	r1, #0
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f00d fe55 	bl	801292c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8004c82:	4b39      	ldr	r3, [pc, #228]	@ (8004d68 <MX_ADC1_Init+0x104>)
 8004c84:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8004c88:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004c8a:	4b37      	ldr	r3, [pc, #220]	@ (8004d68 <MX_ADC1_Init+0x104>)
 8004c8c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8004c90:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004c92:	4b35      	ldr	r3, [pc, #212]	@ (8004d68 <MX_ADC1_Init+0x104>)
 8004c94:	2200      	movs	r2, #0
 8004c96:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004c98:	4b33      	ldr	r3, [pc, #204]	@ (8004d68 <MX_ADC1_Init+0x104>)
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8004c9e:	4b32      	ldr	r3, [pc, #200]	@ (8004d68 <MX_ADC1_Init+0x104>)
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8004ca4:	4b30      	ldr	r3, [pc, #192]	@ (8004d68 <MX_ADC1_Init+0x104>)
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004caa:	4b2f      	ldr	r3, [pc, #188]	@ (8004d68 <MX_ADC1_Init+0x104>)
 8004cac:	2204      	movs	r2, #4
 8004cae:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8004cb0:	4b2d      	ldr	r3, [pc, #180]	@ (8004d68 <MX_ADC1_Init+0x104>)
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8004cb6:	4b2c      	ldr	r3, [pc, #176]	@ (8004d68 <MX_ADC1_Init+0x104>)
 8004cb8:	2201      	movs	r2, #1
 8004cba:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 8004cbc:	4b2a      	ldr	r3, [pc, #168]	@ (8004d68 <MX_ADC1_Init+0x104>)
 8004cbe:	2202      	movs	r2, #2
 8004cc0:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004cc2:	4b29      	ldr	r3, [pc, #164]	@ (8004d68 <MX_ADC1_Init+0x104>)
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004cca:	4b27      	ldr	r3, [pc, #156]	@ (8004d68 <MX_ADC1_Init+0x104>)
 8004ccc:	2200      	movs	r2, #0
 8004cce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004cd0:	4b25      	ldr	r3, [pc, #148]	@ (8004d68 <MX_ADC1_Init+0x104>)
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8004cd6:	4b24      	ldr	r3, [pc, #144]	@ (8004d68 <MX_ADC1_Init+0x104>)
 8004cd8:	2201      	movs	r2, #1
 8004cda:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004cde:	4b22      	ldr	r3, [pc, #136]	@ (8004d68 <MX_ADC1_Init+0x104>)
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8004ce4:	4b20      	ldr	r3, [pc, #128]	@ (8004d68 <MX_ADC1_Init+0x104>)
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004cec:	481e      	ldr	r0, [pc, #120]	@ (8004d68 <MX_ADC1_Init+0x104>)
 8004cee:	f005 ffef 	bl	800acd0 <HAL_ADC_Init>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d001      	beq.n	8004cfc <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8004cf8:	f004 f812 	bl	8008d20 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8004d00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004d04:	4619      	mov	r1, r3
 8004d06:	4818      	ldr	r0, [pc, #96]	@ (8004d68 <MX_ADC1_Init+0x104>)
 8004d08:	f007 f90e 	bl	800bf28 <HAL_ADCEx_MultiModeConfigChannel>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d001      	beq.n	8004d16 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8004d12:	f004 f805 	bl	8008d20 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8004d16:	4b15      	ldr	r3, [pc, #84]	@ (8004d6c <MX_ADC1_Init+0x108>)
 8004d18:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004d1a:	2306      	movs	r3, #6
 8004d1c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8004d1e:	2307      	movs	r3, #7
 8004d20:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8004d22:	237f      	movs	r3, #127	@ 0x7f
 8004d24:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004d26:	2304      	movs	r3, #4
 8004d28:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004d2e:	1d3b      	adds	r3, r7, #4
 8004d30:	4619      	mov	r1, r3
 8004d32:	480d      	ldr	r0, [pc, #52]	@ (8004d68 <MX_ADC1_Init+0x104>)
 8004d34:	f006 fa7a 	bl	800b22c <HAL_ADC_ConfigChannel>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d001      	beq.n	8004d42 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8004d3e:	f003 ffef 	bl	8008d20 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8004d42:	4b0b      	ldr	r3, [pc, #44]	@ (8004d70 <MX_ADC1_Init+0x10c>)
 8004d44:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8004d46:	230c      	movs	r3, #12
 8004d48:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004d4a:	1d3b      	adds	r3, r7, #4
 8004d4c:	4619      	mov	r1, r3
 8004d4e:	4806      	ldr	r0, [pc, #24]	@ (8004d68 <MX_ADC1_Init+0x104>)
 8004d50:	f006 fa6c 	bl	800b22c <HAL_ADC_ConfigChannel>
 8004d54:	4603      	mov	r3, r0
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d001      	beq.n	8004d5e <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8004d5a:	f003 ffe1 	bl	8008d20 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004d5e:	bf00      	nop
 8004d60:	3730      	adds	r7, #48	@ 0x30
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	bf00      	nop
 8004d68:	200003b4 	.word	0x200003b4
 8004d6c:	19200040 	.word	0x19200040
 8004d70:	1d500080 	.word	0x1d500080

08004d74 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b09e      	sub	sp, #120	@ 0x78
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d7c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004d80:	2200      	movs	r2, #0
 8004d82:	601a      	str	r2, [r3, #0]
 8004d84:	605a      	str	r2, [r3, #4]
 8004d86:	609a      	str	r2, [r3, #8]
 8004d88:	60da      	str	r2, [r3, #12]
 8004d8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004d8c:	f107 0310 	add.w	r3, r7, #16
 8004d90:	2254      	movs	r2, #84	@ 0x54
 8004d92:	2100      	movs	r1, #0
 8004d94:	4618      	mov	r0, r3
 8004d96:	f00d fdc9 	bl	801292c <memset>
  if(adcHandle->Instance==ADC1)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004da2:	d15e      	bne.n	8004e62 <HAL_ADC_MspInit+0xee>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8004da4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004da8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8004daa:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8004dae:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004db0:	f107 0310 	add.w	r3, r7, #16
 8004db4:	4618      	mov	r0, r3
 8004db6:	f008 fdc7 	bl	800d948 <HAL_RCCEx_PeriphCLKConfig>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d001      	beq.n	8004dc4 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8004dc0:	f003 ffae 	bl	8008d20 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8004dc4:	4b29      	ldr	r3, [pc, #164]	@ (8004e6c <HAL_ADC_MspInit+0xf8>)
 8004dc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004dc8:	4a28      	ldr	r2, [pc, #160]	@ (8004e6c <HAL_ADC_MspInit+0xf8>)
 8004dca:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004dce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004dd0:	4b26      	ldr	r3, [pc, #152]	@ (8004e6c <HAL_ADC_MspInit+0xf8>)
 8004dd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004dd4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004dd8:	60fb      	str	r3, [r7, #12]
 8004dda:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004ddc:	4b23      	ldr	r3, [pc, #140]	@ (8004e6c <HAL_ADC_MspInit+0xf8>)
 8004dde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004de0:	4a22      	ldr	r2, [pc, #136]	@ (8004e6c <HAL_ADC_MspInit+0xf8>)
 8004de2:	f043 0304 	orr.w	r3, r3, #4
 8004de6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004de8:	4b20      	ldr	r3, [pc, #128]	@ (8004e6c <HAL_ADC_MspInit+0xf8>)
 8004dea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004dec:	f003 0304 	and.w	r3, r3, #4
 8004df0:	60bb      	str	r3, [r7, #8]
 8004df2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN6
    PC1     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004df4:	2303      	movs	r3, #3
 8004df6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004df8:	2303      	movs	r3, #3
 8004dfa:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004e00:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004e04:	4619      	mov	r1, r3
 8004e06:	481a      	ldr	r0, [pc, #104]	@ (8004e70 <HAL_ADC_MspInit+0xfc>)
 8004e08:	f007 fdd8 	bl	800c9bc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8004e0c:	4b19      	ldr	r3, [pc, #100]	@ (8004e74 <HAL_ADC_MspInit+0x100>)
 8004e0e:	4a1a      	ldr	r2, [pc, #104]	@ (8004e78 <HAL_ADC_MspInit+0x104>)
 8004e10:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8004e12:	4b18      	ldr	r3, [pc, #96]	@ (8004e74 <HAL_ADC_MspInit+0x100>)
 8004e14:	2205      	movs	r2, #5
 8004e16:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004e18:	4b16      	ldr	r3, [pc, #88]	@ (8004e74 <HAL_ADC_MspInit+0x100>)
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004e1e:	4b15      	ldr	r3, [pc, #84]	@ (8004e74 <HAL_ADC_MspInit+0x100>)
 8004e20:	2200      	movs	r2, #0
 8004e22:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004e24:	4b13      	ldr	r3, [pc, #76]	@ (8004e74 <HAL_ADC_MspInit+0x100>)
 8004e26:	2280      	movs	r2, #128	@ 0x80
 8004e28:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004e2a:	4b12      	ldr	r3, [pc, #72]	@ (8004e74 <HAL_ADC_MspInit+0x100>)
 8004e2c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004e30:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004e32:	4b10      	ldr	r3, [pc, #64]	@ (8004e74 <HAL_ADC_MspInit+0x100>)
 8004e34:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004e38:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004e3a:	4b0e      	ldr	r3, [pc, #56]	@ (8004e74 <HAL_ADC_MspInit+0x100>)
 8004e3c:	2220      	movs	r2, #32
 8004e3e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004e40:	4b0c      	ldr	r3, [pc, #48]	@ (8004e74 <HAL_ADC_MspInit+0x100>)
 8004e42:	2200      	movs	r2, #0
 8004e44:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004e46:	480b      	ldr	r0, [pc, #44]	@ (8004e74 <HAL_ADC_MspInit+0x100>)
 8004e48:	f007 fa86 	bl	800c358 <HAL_DMA_Init>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d001      	beq.n	8004e56 <HAL_ADC_MspInit+0xe2>
    {
      Error_Handler();
 8004e52:	f003 ff65 	bl	8008d20 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4a06      	ldr	r2, [pc, #24]	@ (8004e74 <HAL_ADC_MspInit+0x100>)
 8004e5a:	655a      	str	r2, [r3, #84]	@ 0x54
 8004e5c:	4a05      	ldr	r2, [pc, #20]	@ (8004e74 <HAL_ADC_MspInit+0x100>)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8004e62:	bf00      	nop
 8004e64:	3778      	adds	r7, #120	@ 0x78
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}
 8004e6a:	bf00      	nop
 8004e6c:	40021000 	.word	0x40021000
 8004e70:	48000800 	.word	0x48000800
 8004e74:	20000420 	.word	0x20000420
 8004e78:	40020008 	.word	0x40020008

08004e7c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b082      	sub	sp, #8
 8004e80:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8004e82:	4b22      	ldr	r3, [pc, #136]	@ (8004f0c <MX_DMA_Init+0x90>)
 8004e84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e86:	4a21      	ldr	r2, [pc, #132]	@ (8004f0c <MX_DMA_Init+0x90>)
 8004e88:	f043 0304 	orr.w	r3, r3, #4
 8004e8c:	6493      	str	r3, [r2, #72]	@ 0x48
 8004e8e:	4b1f      	ldr	r3, [pc, #124]	@ (8004f0c <MX_DMA_Init+0x90>)
 8004e90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e92:	f003 0304 	and.w	r3, r3, #4
 8004e96:	607b      	str	r3, [r7, #4]
 8004e98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004e9a:	4b1c      	ldr	r3, [pc, #112]	@ (8004f0c <MX_DMA_Init+0x90>)
 8004e9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e9e:	4a1b      	ldr	r2, [pc, #108]	@ (8004f0c <MX_DMA_Init+0x90>)
 8004ea0:	f043 0301 	orr.w	r3, r3, #1
 8004ea4:	6493      	str	r3, [r2, #72]	@ 0x48
 8004ea6:	4b19      	ldr	r3, [pc, #100]	@ (8004f0c <MX_DMA_Init+0x90>)
 8004ea8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004eaa:	f003 0301 	and.w	r3, r3, #1
 8004eae:	603b      	str	r3, [r7, #0]
 8004eb0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	2100      	movs	r1, #0
 8004eb6:	200b      	movs	r0, #11
 8004eb8:	f007 fa19 	bl	800c2ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8004ebc:	200b      	movs	r0, #11
 8004ebe:	f007 fa30 	bl	800c322 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	2100      	movs	r1, #0
 8004ec6:	200c      	movs	r0, #12
 8004ec8:	f007 fa11 	bl	800c2ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8004ecc:	200c      	movs	r0, #12
 8004ece:	f007 fa28 	bl	800c322 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	2100      	movs	r1, #0
 8004ed6:	200d      	movs	r0, #13
 8004ed8:	f007 fa09 	bl	800c2ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8004edc:	200d      	movs	r0, #13
 8004ede:	f007 fa20 	bl	800c322 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	2100      	movs	r1, #0
 8004ee6:	200e      	movs	r0, #14
 8004ee8:	f007 fa01 	bl	800c2ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8004eec:	200e      	movs	r0, #14
 8004eee:	f007 fa18 	bl	800c322 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	2100      	movs	r1, #0
 8004ef6:	200f      	movs	r0, #15
 8004ef8:	f007 f9f9 	bl	800c2ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8004efc:	200f      	movs	r0, #15
 8004efe:	f007 fa10 	bl	800c322 <HAL_NVIC_EnableIRQ>

}
 8004f02:	bf00      	nop
 8004f04:	3708      	adds	r7, #8
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
 8004f0a:	bf00      	nop
 8004f0c:	40021000 	.word	0x40021000

08004f10 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b08a      	sub	sp, #40	@ 0x28
 8004f14:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f16:	f107 0314 	add.w	r3, r7, #20
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	601a      	str	r2, [r3, #0]
 8004f1e:	605a      	str	r2, [r3, #4]
 8004f20:	609a      	str	r2, [r3, #8]
 8004f22:	60da      	str	r2, [r3, #12]
 8004f24:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004f26:	4b75      	ldr	r3, [pc, #468]	@ (80050fc <MX_GPIO_Init+0x1ec>)
 8004f28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f2a:	4a74      	ldr	r2, [pc, #464]	@ (80050fc <MX_GPIO_Init+0x1ec>)
 8004f2c:	f043 0304 	orr.w	r3, r3, #4
 8004f30:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004f32:	4b72      	ldr	r3, [pc, #456]	@ (80050fc <MX_GPIO_Init+0x1ec>)
 8004f34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f36:	f003 0304 	and.w	r3, r3, #4
 8004f3a:	613b      	str	r3, [r7, #16]
 8004f3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004f3e:	4b6f      	ldr	r3, [pc, #444]	@ (80050fc <MX_GPIO_Init+0x1ec>)
 8004f40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f42:	4a6e      	ldr	r2, [pc, #440]	@ (80050fc <MX_GPIO_Init+0x1ec>)
 8004f44:	f043 0320 	orr.w	r3, r3, #32
 8004f48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004f4a:	4b6c      	ldr	r3, [pc, #432]	@ (80050fc <MX_GPIO_Init+0x1ec>)
 8004f4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f4e:	f003 0320 	and.w	r3, r3, #32
 8004f52:	60fb      	str	r3, [r7, #12]
 8004f54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f56:	4b69      	ldr	r3, [pc, #420]	@ (80050fc <MX_GPIO_Init+0x1ec>)
 8004f58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f5a:	4a68      	ldr	r2, [pc, #416]	@ (80050fc <MX_GPIO_Init+0x1ec>)
 8004f5c:	f043 0301 	orr.w	r3, r3, #1
 8004f60:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004f62:	4b66      	ldr	r3, [pc, #408]	@ (80050fc <MX_GPIO_Init+0x1ec>)
 8004f64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f66:	f003 0301 	and.w	r3, r3, #1
 8004f6a:	60bb      	str	r3, [r7, #8]
 8004f6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f6e:	4b63      	ldr	r3, [pc, #396]	@ (80050fc <MX_GPIO_Init+0x1ec>)
 8004f70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f72:	4a62      	ldr	r2, [pc, #392]	@ (80050fc <MX_GPIO_Init+0x1ec>)
 8004f74:	f043 0302 	orr.w	r3, r3, #2
 8004f78:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004f7a:	4b60      	ldr	r3, [pc, #384]	@ (80050fc <MX_GPIO_Init+0x1ec>)
 8004f7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f7e:	f003 0302 	and.w	r3, r3, #2
 8004f82:	607b      	str	r3, [r7, #4]
 8004f84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9|PILOT_Pin, GPIO_PIN_RESET);
 8004f86:	2200      	movs	r2, #0
 8004f88:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 8004f8c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004f90:	f007 feae 	bl	800ccf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8004f94:	2200      	movs	r2, #0
 8004f96:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004f9a:	4859      	ldr	r0, [pc, #356]	@ (8005100 <MX_GPIO_Init+0x1f0>)
 8004f9c:	f007 fea8 	bl	800ccf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8004fa0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004fa4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004fa6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004faa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fac:	2300      	movs	r3, #0
 8004fae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004fb0:	f107 0314 	add.w	r3, r7, #20
 8004fb4:	4619      	mov	r1, r3
 8004fb6:	4852      	ldr	r0, [pc, #328]	@ (8005100 <MX_GPIO_Init+0x1f0>)
 8004fb8:	f007 fd00 	bl	800c9bc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA9 PILOT_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_9|PILOT_Pin;
 8004fbc:	f44f 63c4 	mov.w	r3, #1568	@ 0x620
 8004fc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004fce:	f107 0314 	add.w	r3, r7, #20
 8004fd2:	4619      	mov	r1, r3
 8004fd4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004fd8:	f007 fcf0 	bl	800c9bc <HAL_GPIO_Init>

  /*Configure GPIO pins : UPPER_PHOTO_Pin LOWER_PHOTO_Pin */
  GPIO_InitStruct.Pin = UPPER_PHOTO_Pin|LOWER_PHOTO_Pin;
 8004fdc:	f241 0301 	movw	r3, #4097	@ 0x1001
 8004fe0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004fe2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004fe6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004fec:	f107 0314 	add.w	r3, r7, #20
 8004ff0:	4619      	mov	r1, r3
 8004ff2:	4844      	ldr	r0, [pc, #272]	@ (8005104 <MX_GPIO_Init+0x1f4>)
 8004ff4:	f007 fce2 	bl	800c9bc <HAL_GPIO_Init>

  /*Configure GPIO pins : LOWER_LIM_Pin UPPER_LIM_Pin */
  GPIO_InitStruct.Pin = LOWER_LIM_Pin|UPPER_LIM_Pin;
 8004ff8:	2306      	movs	r3, #6
 8004ffa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005000:	2302      	movs	r3, #2
 8005002:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005004:	f107 0314 	add.w	r3, r7, #20
 8005008:	4619      	mov	r1, r3
 800500a:	483e      	ldr	r0, [pc, #248]	@ (8005104 <MX_GPIO_Init+0x1f4>)
 800500c:	f007 fcd6 	bl	800c9bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005010:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005014:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005016:	2301      	movs	r3, #1
 8005018:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800501a:	2300      	movs	r3, #0
 800501c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800501e:	2300      	movs	r3, #0
 8005020:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005022:	f107 0314 	add.w	r3, r7, #20
 8005026:	4619      	mov	r1, r3
 8005028:	4835      	ldr	r0, [pc, #212]	@ (8005100 <MX_GPIO_Init+0x1f0>)
 800502a:	f007 fcc7 	bl	800c9bc <HAL_GPIO_Init>

  /*Configure GPIO pins : J3_Pin J4_Pin */
  GPIO_InitStruct.Pin = J3_Pin|J4_Pin;
 800502e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8005032:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005034:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8005038:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800503a:	2302      	movs	r3, #2
 800503c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800503e:	f107 0314 	add.w	r3, r7, #20
 8005042:	4619      	mov	r1, r3
 8005044:	482e      	ldr	r0, [pc, #184]	@ (8005100 <MX_GPIO_Init+0x1f0>)
 8005046:	f007 fcb9 	bl	800c9bc <HAL_GPIO_Init>

  /*Configure GPIO pin : J2_Pin */
  GPIO_InitStruct.Pin = J2_Pin;
 800504a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800504e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005050:	2300      	movs	r3, #0
 8005052:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005054:	2302      	movs	r3, #2
 8005056:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(J2_GPIO_Port, &GPIO_InitStruct);
 8005058:	f107 0314 	add.w	r3, r7, #20
 800505c:	4619      	mov	r1, r3
 800505e:	4828      	ldr	r0, [pc, #160]	@ (8005100 <MX_GPIO_Init+0x1f0>)
 8005060:	f007 fcac 	bl	800c9bc <HAL_GPIO_Init>

  /*Configure GPIO pin : EMER_Pin */
  GPIO_InitStruct.Pin = EMER_Pin;
 8005064:	2310      	movs	r3, #16
 8005066:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8005068:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800506c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800506e:	2300      	movs	r3, #0
 8005070:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EMER_GPIO_Port, &GPIO_InitStruct);
 8005072:	f107 0314 	add.w	r3, r7, #20
 8005076:	4619      	mov	r1, r3
 8005078:	4822      	ldr	r0, [pc, #136]	@ (8005104 <MX_GPIO_Init+0x1f4>)
 800507a:	f007 fc9f 	bl	800c9bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PROX_Pin */
  GPIO_InitStruct.Pin = PROX_Pin;
 800507e:	2340      	movs	r3, #64	@ 0x40
 8005080:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005082:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8005086:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005088:	2301      	movs	r3, #1
 800508a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PROX_GPIO_Port, &GPIO_InitStruct);
 800508c:	f107 0314 	add.w	r3, r7, #20
 8005090:	4619      	mov	r1, r3
 8005092:	481c      	ldr	r0, [pc, #112]	@ (8005104 <MX_GPIO_Init+0x1f4>)
 8005094:	f007 fc92 	bl	800c9bc <HAL_GPIO_Init>

  /*Configure GPIO pin : J1_Pin */
  GPIO_InitStruct.Pin = J1_Pin;
 8005098:	2380      	movs	r3, #128	@ 0x80
 800509a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800509c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80050a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80050a2:	2302      	movs	r3, #2
 80050a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(J1_GPIO_Port, &GPIO_InitStruct);
 80050a6:	f107 0314 	add.w	r3, r7, #20
 80050aa:	4619      	mov	r1, r3
 80050ac:	4815      	ldr	r0, [pc, #84]	@ (8005104 <MX_GPIO_Init+0x1f4>)
 80050ae:	f007 fc85 	bl	800c9bc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80050b2:	2200      	movs	r2, #0
 80050b4:	2100      	movs	r1, #0
 80050b6:	2006      	movs	r0, #6
 80050b8:	f007 f919 	bl	800c2ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80050bc:	2006      	movs	r0, #6
 80050be:	f007 f930 	bl	800c322 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80050c2:	2200      	movs	r2, #0
 80050c4:	2100      	movs	r1, #0
 80050c6:	200a      	movs	r0, #10
 80050c8:	f007 f911 	bl	800c2ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80050cc:	200a      	movs	r0, #10
 80050ce:	f007 f928 	bl	800c322 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80050d2:	2200      	movs	r2, #0
 80050d4:	2100      	movs	r1, #0
 80050d6:	2017      	movs	r0, #23
 80050d8:	f007 f909 	bl	800c2ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80050dc:	2017      	movs	r0, #23
 80050de:	f007 f920 	bl	800c322 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80050e2:	2200      	movs	r2, #0
 80050e4:	2100      	movs	r1, #0
 80050e6:	2028      	movs	r0, #40	@ 0x28
 80050e8:	f007 f901 	bl	800c2ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80050ec:	2028      	movs	r0, #40	@ 0x28
 80050ee:	f007 f918 	bl	800c322 <HAL_NVIC_EnableIRQ>

}
 80050f2:	bf00      	nop
 80050f4:	3728      	adds	r7, #40	@ 0x28
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}
 80050fa:	bf00      	nop
 80050fc:	40021000 	.word	0x40021000
 8005100:	48000800 	.word	0x48000800
 8005104:	48000400 	.word	0x48000400

08005108 <SteadyStateKalmanFilter>:
//arm_matrix_instance_f32 R_matrix;
//arm_matrix_instance_f32 Z_matrix;
//arm_matrix_instance_f32 Velocity_matrix;


float SteadyStateKalmanFilter(KalmanFilter* filter, float32_t Vin,float32_t Velocity){
 8005108:	b580      	push	{r7, lr}
 800510a:	b096      	sub	sp, #88	@ 0x58
 800510c:	af00      	add	r7, sp, #0
 800510e:	60f8      	str	r0, [r7, #12]
 8005110:	ed87 0a02 	vstr	s0, [r7, #8]
 8005114:	edc7 0a01 	vstr	s1, [r7, #4]
	  arm_mat_init_f32(&filter->Velocity_matrix, 1, 1,(float32_t*) &Velocity);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f503 705d 	add.w	r0, r3, #884	@ 0x374
 800511e:	1d3b      	adds	r3, r7, #4
 8005120:	2201      	movs	r2, #1
 8005122:	2101      	movs	r1, #1
 8005124:	f00c fe91 	bl	8011e4a <arm_mat_init_f32>
	  arm_mat_trans_f32(&filter->A_matrix, &filter->A_transpose_matrix);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f503 722d 	add.w	r2, r3, #692	@ 0x2b4
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f503 732f 	add.w	r3, r3, #700	@ 0x2bc
 8005134:	4619      	mov	r1, r3
 8005136:	4610      	mov	r0, r2
 8005138:	f00d fb01 	bl	801273e <arm_mat_trans_f32>
	  arm_mat_trans_f32(&filter->C_matrix, &filter->C_transpose_matrix);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f503 7235 	add.w	r2, r3, #724	@ 0x2d4
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	f503 7337 	add.w	r3, r3, #732	@ 0x2dc
 8005148:	4619      	mov	r1, r3
 800514a:	4610      	mov	r0, r2
 800514c:	f00d faf7 	bl	801273e <arm_mat_trans_f32>
	  arm_mat_trans_f32(&filter->G_matrix, &filter->G_transpose_matrix);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f503 7239 	add.w	r2, r3, #740	@ 0x2e4
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	f503 733b 	add.w	r3, r3, #748	@ 0x2ec
 800515c:	4619      	mov	r1, r3
 800515e:	4610      	mov	r0, r2
 8005160:	f00d faed 	bl	801273e <arm_mat_trans_f32>
	  // Compute Xk = Ax + Bu
	  arm_mat_scale_f32(&filter->B_matrix, Vin, &filter->Bu_matrix); 		   				// Bu
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f503 7233 	add.w	r2, r3, #716	@ 0x2cc
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	f503 7343 	add.w	r3, r3, #780	@ 0x30c
 8005170:	4619      	mov	r1, r3
 8005172:	ed97 0a02 	vldr	s0, [r7, #8]
 8005176:	4610      	mov	r0, r2
 8005178:	f00d fa70 	bl	801265c <arm_mat_scale_f32>
	  arm_mat_mult_f32(&filter->A_matrix, &filter->X_k_matrix, &filter->Ax_matrix);  		   		// Ax
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f503 702d 	add.w	r0, r3, #692	@ 0x2b4
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	f503 7129 	add.w	r1, r3, #676	@ 0x2a4
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f503 7345 	add.w	r3, r3, #788	@ 0x314
 800518e:	461a      	mov	r2, r3
 8005190:	f00d f9ea 	bl	8012568 <arm_mat_mult_f32>
	  arm_mat_add_f32(&filter->Ax_matrix, &filter->Bu_matrix, &filter->X_k_matrix); 		   		// Xk = Ax + Bu
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f503 7045 	add.w	r0, r3, #788	@ 0x314
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	f503 7143 	add.w	r1, r3, #780	@ 0x30c
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f503 7329 	add.w	r3, r3, #676	@ 0x2a4
 80051a6:	461a      	mov	r2, r3
 80051a8:	f00c fe14 	bl	8011dd4 <arm_mat_add_f32>

	  // Compute (A * P_pk * A^T + G * Q * G^T)
	  arm_mat_mult_f32(&filter->A_matrix, &filter->P_k_matrix, &filter->P_k_matrix);  		   		// Pk = A * P_pk
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f503 702d 	add.w	r0, r3, #692	@ 0x2b4
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	f503 712b 	add.w	r1, r3, #684	@ 0x2ac
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f503 732b 	add.w	r3, r3, #684	@ 0x2ac
 80051be:	461a      	mov	r2, r3
 80051c0:	f00d f9d2 	bl	8012568 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->P_k_matrix, &filter->A_transpose_matrix, &filter->P_k_matrix); 		// Pk = A * P_pk * A^T
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	f503 712f 	add.w	r1, r3, #700	@ 0x2bc
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f503 732b 	add.w	r3, r3, #684	@ 0x2ac
 80051d6:	461a      	mov	r2, r3
 80051d8:	f00d f9c6 	bl	8012568 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->G_matrix, &filter->G_transpose_matrix, &filter->GGT_matrix);        // G * G^T
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f503 7039 	add.w	r0, r3, #740	@ 0x2e4
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	f503 713b 	add.w	r1, r3, #748	@ 0x2ec
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	f503 733f 	add.w	r3, r3, #764	@ 0x2fc
 80051ee:	461a      	mov	r2, r3
 80051f0:	f00d f9ba 	bl	8012568 <arm_mat_mult_f32>
	  arm_mat_scale_f32(&filter->GGT_matrix, filter->Q, &filter->GQGT_matrix); 				   	   	// G * Q
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f503 723f 	add.w	r2, r3, #764	@ 0x2fc
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	edd3 7a30 	vldr	s15, [r3, #192]	@ 0xc0
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 8005206:	4619      	mov	r1, r3
 8005208:	eeb0 0a67 	vmov.f32	s0, s15
 800520c:	4610      	mov	r0, r2
 800520e:	f00d fa25 	bl	801265c <arm_mat_scale_f32>
	  arm_mat_add_f32(&filter->P_k_matrix, &filter->GQGT_matrix, &filter->P_k_matrix); 	       		// A * P_pk * A^T + G * Q * G^T
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f503 7141 	add.w	r1, r3, #772	@ 0x304
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	f503 732b 	add.w	r3, r3, #684	@ 0x2ac
 8005224:	461a      	mov	r2, r3
 8005226:	f00c fdd5 	bl	8011dd4 <arm_mat_add_f32>

	  // Compute (C * P_k * C^T + R)
	  arm_mat_mult_f32(&filter->C_matrix, &filter->P_k_matrix, &filter->CP_matrix);			     // C * Pk
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f503 712b 	add.w	r1, r3, #684	@ 0x2ac
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	f503 7347 	add.w	r3, r3, #796	@ 0x31c
 800523c:	461a      	mov	r2, r3
 800523e:	f00d f993 	bl	8012568 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->CP_matrix, &filter->C_transpose_matrix, &filter->CPCT_matrix);   // C * Pk * C^T
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	f503 7047 	add.w	r0, r3, #796	@ 0x31c
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f503 7137 	add.w	r1, r3, #732	@ 0x2dc
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	f503 7349 	add.w	r3, r3, #804	@ 0x324
 8005254:	461a      	mov	r2, r3
 8005256:	f00d f987 	bl	8012568 <arm_mat_mult_f32>
	  arm_mat_add_f32(&filter->CPCT_matrix, &filter->R_matrix, &filter->CPCTR_matrix);			 // C * P_k * C^T + R
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	f503 7049 	add.w	r0, r3, #804	@ 0x324
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f503 7159 	add.w	r1, r3, #868	@ 0x364
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	f503 734b 	add.w	r3, r3, #812	@ 0x32c
 800526c:	461a      	mov	r2, r3
 800526e:	f00c fdb1 	bl	8011dd4 <arm_mat_add_f32>

	  // Compute inverse of (C * P_k * C^T + R)
	  arm_mat_inverse_f32(&filter->CPCTR_matrix, &filter->CPCTRinv_matrix);					 // inverse of (C * P_k * C^T + R)
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	f503 724b 	add.w	r2, r3, #812	@ 0x32c
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	f503 7351 	add.w	r3, r3, #836	@ 0x344
 800527e:	4619      	mov	r1, r3
 8005280:	4610      	mov	r0, r2
 8005282:	f00c fdfa 	bl	8011e7a <arm_mat_inverse_f32>

	  // Compute Kalman Gain: K = P_k * C^T * inv(C * P_k * C^T + R)
	  arm_mat_mult_f32(&filter->P_k_matrix, &filter->C_transpose_matrix, &filter->PCT_matrix); 		 // P_k * C^T
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f503 7137 	add.w	r1, r3, #732	@ 0x2dc
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	f503 734f 	add.w	r3, r3, #828	@ 0x33c
 8005298:	461a      	mov	r2, r3
 800529a:	f00d f965 	bl	8012568 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->PCT_matrix, &filter->CPCTRinv_matrix, &filter->K_matrix);  			 // P_k * C^T * inv(C * P_k * C^T + R)
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	f503 704f 	add.w	r0, r3, #828	@ 0x33c
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f503 7151 	add.w	r1, r3, #836	@ 0x344
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f503 734d 	add.w	r3, r3, #820	@ 0x334
 80052b0:	461a      	mov	r2, r3
 80052b2:	f00d f959 	bl	8012568 <arm_mat_mult_f32>

	  // Computation of the estimated state
	  arm_mat_mult_f32(&filter->C_matrix, &filter->X_k_matrix, &filter->Cx_matrix);				 // C * X_k
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f503 7129 	add.w	r1, r3, #676	@ 0x2a4
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	f503 7353 	add.w	r3, r3, #844	@ 0x34c
 80052c8:	461a      	mov	r2, r3
 80052ca:	f00d f94d 	bl	8012568 <arm_mat_mult_f32>
	  arm_mat_sub_f32(&filter->Velocity_matrix,  &filter->Cx_matrix, &filter->yCx_matrix);			  // y - ( C * X_k )
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	f503 705d 	add.w	r0, r3, #884	@ 0x374
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f503 7153 	add.w	r1, r3, #844	@ 0x34c
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	f503 7355 	add.w	r3, r3, #852	@ 0x354
 80052e0:	461a      	mov	r2, r3
 80052e2:	f00d f9f1 	bl	80126c8 <arm_mat_sub_f32>
	  arm_mat_mult_f32(&filter->K_matrix, &filter->yCx_matrix, &filter->KyCx_matrix);		     // K( y - ( C * X_k ) )
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	f503 704d 	add.w	r0, r3, #820	@ 0x334
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f503 7155 	add.w	r1, r3, #852	@ 0x354
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	f503 7357 	add.w	r3, r3, #860	@ 0x35c
 80052f8:	461a      	mov	r2, r3
 80052fa:	f00d f935 	bl	8012568 <arm_mat_mult_f32>
	  arm_mat_add_f32(&filter->X_k_matrix, &filter->KyCx_matrix, &filter->X_k_matrix);		 	 // X_k + K( y - ( C * X_k ) )
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	f503 7029 	add.w	r0, r3, #676	@ 0x2a4
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f503 7157 	add.w	r1, r3, #860	@ 0x35c
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	f503 7329 	add.w	r3, r3, #676	@ 0x2a4
 8005310:	461a      	mov	r2, r3
 8005312:	f00c fd5f 	bl	8011dd4 <arm_mat_add_f32>

	  // Computation of the estimated output
	  arm_mat_mult_f32(&filter->C_matrix, &filter->X_k_matrix, &filter->Output_matrix);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f503 7129 	add.w	r1, r3, #676	@ 0x2a4
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	f503 733d 	add.w	r3, r3, #756	@ 0x2f4
 8005328:	461a      	mov	r2, r3
 800532a:	f00d f91d 	bl	8012568 <arm_mat_mult_f32>

	  // Computation of the state covariance error
	  arm_matrix_instance_f32 temp_matrix4;
	  float32_t temp_data4[16];
	  arm_mat_init_f32(&temp_matrix4, 4, 4,(float32_t*) &temp_data4);
 800532e:	f107 0310 	add.w	r3, r7, #16
 8005332:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8005336:	2204      	movs	r2, #4
 8005338:	2104      	movs	r1, #4
 800533a:	f00c fd86 	bl	8011e4a <arm_mat_init_f32>

	  arm_mat_mult_f32(&filter->K_matrix, &filter->C_matrix, &temp_matrix4);				// K * C
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	f503 704d 	add.w	r0, r3, #820	@ 0x334
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f503 7335 	add.w	r3, r3, #724	@ 0x2d4
 800534a:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 800534e:	4619      	mov	r1, r3
 8005350:	f00d f90a 	bl	8012568 <arm_mat_mult_f32>
	  arm_mat_sub_f32(&filter->eye_matrix, &temp_matrix4, &temp_matrix4);			// (I - (K * C))
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f503 7331 	add.w	r3, r3, #708	@ 0x2c4
 800535a:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 800535e:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8005362:	4618      	mov	r0, r3
 8005364:	f00d f9b0 	bl	80126c8 <arm_mat_sub_f32>
	  arm_mat_mult_f32(&temp_matrix4, &filter->P_k_matrix, &filter->P_k_matrix);			// (I - (K * C)) * P_k
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f503 712b 	add.w	r1, r3, #684	@ 0x2ac
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	f503 722b 	add.w	r2, r3, #684	@ 0x2ac
 8005374:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8005378:	4618      	mov	r0, r3
 800537a:	f00d f8f5 	bl	8012568 <arm_mat_mult_f32>
	  filter->Kalman_Speed = filter->X_k[1];
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	685a      	ldr	r2, [r3, #4]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
	  return  filter->Kalman_Speed;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800538e:	ee07 3a90 	vmov	s15, r3
}
 8005392:	eeb0 0a67 	vmov.f32	s0, s15
 8005396:	3758      	adds	r7, #88	@ 0x58
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}

0800539c <Kalman_Start>:

void Kalman_Start(KalmanFilter* filter, float32_t* A_matrix, float32_t* B_matrix, float32_t Q, float32_t R){
 800539c:	b5b0      	push	{r4, r5, r7, lr}
 800539e:	b0a4      	sub	sp, #144	@ 0x90
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6178      	str	r0, [r7, #20]
 80053a4:	6139      	str	r1, [r7, #16]
 80053a6:	60fa      	str	r2, [r7, #12]
 80053a8:	ed87 0a02 	vstr	s0, [r7, #8]
 80053ac:	edc7 0a01 	vstr	s1, [r7, #4]
	filter->Q = Q; //1.0
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	68ba      	ldr	r2, [r7, #8]
 80053b4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
	filter->R[0] = R; //0.05
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	687a      	ldr	r2, [r7, #4]
 80053bc:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4

	float32_t c[4] = {1.0f, 0.0f, 0.0f, 0.0f};
 80053c0:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80053c4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80053c6:	f04f 0300 	mov.w	r3, #0
 80053ca:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80053ce:	f04f 0300 	mov.w	r3, #0
 80053d2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80053d6:	f04f 0300 	mov.w	r3, #0
 80053da:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

	float32_t g[4] = {0.0f,
 80053de:	f04f 0300 	mov.w	r3, #0
 80053e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80053e4:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80053e8:	673b      	str	r3, [r7, #112]	@ 0x70
 80053ea:	f04f 0300 	mov.w	r3, #0
 80053ee:	677b      	str	r3, [r7, #116]	@ 0x74
 80053f0:	f04f 0300 	mov.w	r3, #0
 80053f4:	67bb      	str	r3, [r7, #120]	@ 0x78
					  1.0f,
					  0.0f,
					  0.0f};

	float32_t iden[16] = {1.0f, 0.0f, 0.0f, 0.0f,
 80053f6:	4bc6      	ldr	r3, [pc, #792]	@ (8005710 <Kalman_Start+0x374>)
 80053f8:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 80053fc:	461d      	mov	r5, r3
 80053fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005400:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005402:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005404:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005406:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005408:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800540a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800540e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			  	  	 0.0f, 1.0f, 0.0f, 0.0f,
					 0.0f, 0.0f, 1.0f, 0.0f,
					 0.0f, 0.0f, 0.0f, 1.0f,};

	float32_t x_k[4] = {0.0f, 0.0f, 0.0f, 0.0f};
 8005412:	f107 031c 	add.w	r3, r7, #28
 8005416:	2200      	movs	r2, #0
 8005418:	601a      	str	r2, [r3, #0]
 800541a:	605a      	str	r2, [r3, #4]
 800541c:	609a      	str	r2, [r3, #8]
 800541e:	60da      	str	r2, [r3, #12]

	filter->Es_velocity[1] = 0.0f;
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	f04f 0200 	mov.w	r2, #0
 8005426:	f8c3 2260 	str.w	r2, [r3, #608]	@ 0x260

	int i;
	for(i=0;i<16;i++)
 800542a:	2300      	movs	r3, #0
 800542c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005430:	e028      	b.n	8005484 <Kalman_Start+0xe8>
	{
		filter->A[i] = A_matrix[i];
 8005432:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005436:	009b      	lsls	r3, r3, #2
 8005438:	693a      	ldr	r2, [r7, #16]
 800543a:	4413      	add	r3, r2
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	6979      	ldr	r1, [r7, #20]
 8005440:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005444:	3314      	adds	r3, #20
 8005446:	009b      	lsls	r3, r3, #2
 8005448:	440b      	add	r3, r1
 800544a:	601a      	str	r2, [r3, #0]
		filter->eye[i] = iden[i];
 800544c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005450:	009b      	lsls	r3, r3, #2
 8005452:	3390      	adds	r3, #144	@ 0x90
 8005454:	443b      	add	r3, r7
 8005456:	3b64      	subs	r3, #100	@ 0x64
 8005458:	681a      	ldr	r2, [r3, #0]
 800545a:	6979      	ldr	r1, [r7, #20]
 800545c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005460:	3398      	adds	r3, #152	@ 0x98
 8005462:	009b      	lsls	r3, r3, #2
 8005464:	440b      	add	r3, r1
 8005466:	601a      	str	r2, [r3, #0]
		filter->P_k[i] = 0.0f;
 8005468:	697a      	ldr	r2, [r7, #20]
 800546a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800546e:	3304      	adds	r3, #4
 8005470:	009b      	lsls	r3, r3, #2
 8005472:	4413      	add	r3, r2
 8005474:	f04f 0200 	mov.w	r2, #0
 8005478:	601a      	str	r2, [r3, #0]
	for(i=0;i<16;i++)
 800547a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800547e:	3301      	adds	r3, #1
 8005480:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005484:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005488:	2b0f      	cmp	r3, #15
 800548a:	ddd2      	ble.n	8005432 <Kalman_Start+0x96>
	}

	for(i=0;i<4;i++)
 800548c:	2300      	movs	r3, #0
 800548e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005492:	e03a      	b.n	800550a <Kalman_Start+0x16e>
	{
		filter->X_k[i] = x_k[i];
 8005494:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005498:	009b      	lsls	r3, r3, #2
 800549a:	3390      	adds	r3, #144	@ 0x90
 800549c:	443b      	add	r3, r7
 800549e:	3b74      	subs	r3, #116	@ 0x74
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	6979      	ldr	r1, [r7, #20]
 80054a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80054a8:	009b      	lsls	r3, r3, #2
 80054aa:	440b      	add	r3, r1
 80054ac:	601a      	str	r2, [r3, #0]
		filter->B[i] = B_matrix[i];
 80054ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80054b2:	009b      	lsls	r3, r3, #2
 80054b4:	68fa      	ldr	r2, [r7, #12]
 80054b6:	4413      	add	r3, r2
 80054b8:	681a      	ldr	r2, [r3, #0]
 80054ba:	6979      	ldr	r1, [r7, #20]
 80054bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80054c0:	3324      	adds	r3, #36	@ 0x24
 80054c2:	009b      	lsls	r3, r3, #2
 80054c4:	440b      	add	r3, r1
 80054c6:	601a      	str	r2, [r3, #0]
		filter->C[i] = c[i];
 80054c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80054cc:	009b      	lsls	r3, r3, #2
 80054ce:	3390      	adds	r3, #144	@ 0x90
 80054d0:	443b      	add	r3, r7
 80054d2:	3b14      	subs	r3, #20
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	6979      	ldr	r1, [r7, #20]
 80054d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80054dc:	3328      	adds	r3, #40	@ 0x28
 80054de:	009b      	lsls	r3, r3, #2
 80054e0:	440b      	add	r3, r1
 80054e2:	601a      	str	r2, [r3, #0]
		filter->G[i] = g[i];
 80054e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80054e8:	009b      	lsls	r3, r3, #2
 80054ea:	3390      	adds	r3, #144	@ 0x90
 80054ec:	443b      	add	r3, r7
 80054ee:	3b24      	subs	r3, #36	@ 0x24
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	6979      	ldr	r1, [r7, #20]
 80054f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80054f8:	332c      	adds	r3, #44	@ 0x2c
 80054fa:	009b      	lsls	r3, r3, #2
 80054fc:	440b      	add	r3, r1
 80054fe:	601a      	str	r2, [r3, #0]
	for(i=0;i<4;i++)
 8005500:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005504:	3301      	adds	r3, #1
 8005506:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800550a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800550e:	2b03      	cmp	r3, #3
 8005510:	ddc0      	ble.n	8005494 <Kalman_Start+0xf8>

	}

	arm_mat_init_f32(&filter->X_k_matrix, 4, 1,filter->X_k);
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	f503 7029 	add.w	r0, r3, #676	@ 0x2a4
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	2201      	movs	r2, #1
 800551c:	2104      	movs	r1, #4
 800551e:	f00c fc94 	bl	8011e4a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->P_k_matrix, 4, 4,filter->P_k);
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	3310      	adds	r3, #16
 800552c:	2204      	movs	r2, #4
 800552e:	2104      	movs	r1, #4
 8005530:	f00c fc8b 	bl	8011e4a <arm_mat_init_f32>

	arm_mat_init_f32(&filter->A_matrix, 4, 4,filter->A);
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	f503 702d 	add.w	r0, r3, #692	@ 0x2b4
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	3350      	adds	r3, #80	@ 0x50
 800553e:	2204      	movs	r2, #4
 8005540:	2104      	movs	r1, #4
 8005542:	f00c fc82 	bl	8011e4a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->B_matrix, 4, 1,filter->B);
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	f503 7033 	add.w	r0, r3, #716	@ 0x2cc
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	3390      	adds	r3, #144	@ 0x90
 8005550:	2201      	movs	r2, #1
 8005552:	2104      	movs	r1, #4
 8005554:	f00c fc79 	bl	8011e4a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->C_matrix, 1, 4,filter->C);
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	33a0      	adds	r3, #160	@ 0xa0
 8005562:	2204      	movs	r2, #4
 8005564:	2101      	movs	r1, #1
 8005566:	f00c fc70 	bl	8011e4a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->G_matrix, 4, 1,filter->G);
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	f503 7039 	add.w	r0, r3, #740	@ 0x2e4
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	33b0      	adds	r3, #176	@ 0xb0
 8005574:	2201      	movs	r2, #1
 8005576:	2104      	movs	r1, #4
 8005578:	f00c fc67 	bl	8011e4a <arm_mat_init_f32>

	arm_mat_init_f32(&filter->A_transpose_matrix, 4, 4, filter->A_transpose);
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	f503 702f 	add.w	r0, r3, #700	@ 0x2bc
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	33c8      	adds	r3, #200	@ 0xc8
 8005586:	2204      	movs	r2, #4
 8005588:	2104      	movs	r1, #4
 800558a:	f00c fc5e 	bl	8011e4a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->C_transpose_matrix, 4, 1, filter->C_transpose);
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	f503 7037 	add.w	r0, r3, #732	@ 0x2dc
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 800559a:	2201      	movs	r2, #1
 800559c:	2104      	movs	r1, #4
 800559e:	f00c fc54 	bl	8011e4a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->G_transpose_matrix, 1, 4, filter->G_transpose);
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	f503 703b 	add.w	r0, r3, #748	@ 0x2ec
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 80055ae:	2204      	movs	r2, #4
 80055b0:	2101      	movs	r1, #1
 80055b2:	f00c fc4a 	bl	8011e4a <arm_mat_init_f32>

	arm_mat_init_f32(&filter->GGT_matrix, 4, 4, filter->GGT);
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	f503 703f 	add.w	r0, r3, #764	@ 0x2fc
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80055c2:	2204      	movs	r2, #4
 80055c4:	2104      	movs	r1, #4
 80055c6:	f00c fc40 	bl	8011e4a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->GQGT_matrix, 4, 4, filter->GQGT);
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80055d6:	2204      	movs	r2, #4
 80055d8:	2104      	movs	r1, #4
 80055da:	f00c fc36 	bl	8011e4a <arm_mat_init_f32>

	// Compute Xk = Ax + Bu
	arm_mat_init_f32(&filter->Bu_matrix, 4, 1, filter->Bu_data);
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	f503 7043 	add.w	r0, r3, #780	@ 0x30c
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80055ea:	2201      	movs	r2, #1
 80055ec:	2104      	movs	r1, #4
 80055ee:	f00c fc2c 	bl	8011e4a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->Ax_matrix, 4, 1, filter->Ax_data);
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	f503 7045 	add.w	r0, r3, #788	@ 0x314
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	f503 73d4 	add.w	r3, r3, #424	@ 0x1a8
 80055fe:	2201      	movs	r2, #1
 8005600:	2104      	movs	r1, #4
 8005602:	f00c fc22 	bl	8011e4a <arm_mat_init_f32>

	// Compute (C * P_k * C^T + R)
	arm_mat_init_f32(&filter->CP_matrix, 1, 4, filter->CP);
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	f503 7047 	add.w	r0, r3, #796	@ 0x31c
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8005612:	2204      	movs	r2, #4
 8005614:	2101      	movs	r1, #1
 8005616:	f00c fc18 	bl	8011e4a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->CPCT_matrix, 1, 1, filter->CPCT);
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	f503 7049 	add.w	r0, r3, #804	@ 0x324
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 8005626:	2201      	movs	r2, #1
 8005628:	2101      	movs	r1, #1
 800562a:	f00c fc0e 	bl	8011e4a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->CPCTR_matrix, 1, 1, filter->CPCTR);
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	f503 704b 	add.w	r0, r3, #812	@ 0x32c
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 800563a:	2201      	movs	r2, #1
 800563c:	2101      	movs	r1, #1
 800563e:	f00c fc04 	bl	8011e4a <arm_mat_init_f32>

	// Compute Kalman Gain: K = P_k * C^T * inv(C * P_k * C^T + R)
	arm_mat_init_f32(&filter->K_matrix, 4, 1, filter->K);
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	f503 704d 	add.w	r0, r3, #820	@ 0x334
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 800564e:	2201      	movs	r2, #1
 8005650:	2104      	movs	r1, #4
 8005652:	f00c fbfa 	bl	8011e4a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->PCT_matrix, 4, 1,filter->PCT);
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	f503 704f 	add.w	r0, r3, #828	@ 0x33c
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8005662:	2201      	movs	r2, #1
 8005664:	2104      	movs	r1, #4
 8005666:	f00c fbf0 	bl	8011e4a <arm_mat_init_f32>

	// Compute inverse of (C * P_k * C^T + R)
	arm_mat_init_f32(&filter->CPCTRinv_matrix, 1, 1,filter->CPCTRinv);
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	f503 7051 	add.w	r0, r3, #836	@ 0x344
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 8005676:	2201      	movs	r2, #1
 8005678:	2101      	movs	r1, #1
 800567a:	f00c fbe6 	bl	8011e4a <arm_mat_init_f32>

	// Computation of the estimated state
	arm_mat_init_f32(&filter->Cx_matrix, 1, 1, filter->Cx);
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	f503 7053 	add.w	r0, r3, #844	@ 0x34c
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	f503 7311 	add.w	r3, r3, #580	@ 0x244
 800568a:	2201      	movs	r2, #1
 800568c:	2101      	movs	r1, #1
 800568e:	f00c fbdc 	bl	8011e4a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->yCx_matrix, 1, 1, filter->yCx);
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	f503 7055 	add.w	r0, r3, #852	@ 0x354
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800569e:	2201      	movs	r2, #1
 80056a0:	2101      	movs	r1, #1
 80056a2:	f00c fbd2 	bl	8011e4a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->KyCx_matrix, 4, 1, filter->KyCx);
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	f503 7057 	add.w	r0, r3, #860	@ 0x35c
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 80056b2:	2201      	movs	r2, #1
 80056b4:	2104      	movs	r1, #4
 80056b6:	f00c fbc8 	bl	8011e4a <arm_mat_init_f32>

	arm_mat_init_f32(&filter->Output_matrix, 1, 1, filter->Es_velocity);
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	f503 703d 	add.w	r0, r3, #756	@ 0x2f4
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80056c6:	2201      	movs	r2, #1
 80056c8:	2101      	movs	r1, #1
 80056ca:	f00c fbbe 	bl	8011e4a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->eye_matrix, 4, 4, filter->eye);
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	f503 7031 	add.w	r0, r3, #708	@ 0x2c4
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80056da:	2204      	movs	r2, #4
 80056dc:	2104      	movs	r1, #4
 80056de:	f00c fbb4 	bl	8011e4a <arm_mat_init_f32>

	arm_mat_init_f32(&filter->R_matrix, 1, 1, filter->R);
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	f503 7059 	add.w	r0, r3, #868	@ 0x364
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	33c4      	adds	r3, #196	@ 0xc4
 80056ec:	2201      	movs	r2, #1
 80056ee:	2101      	movs	r1, #1
 80056f0:	f00c fbab 	bl	8011e4a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->Z_matrix, 1, 1, filter->Z);
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	f503 705b 	add.w	r0, r3, #876	@ 0x36c
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	f503 7328 	add.w	r3, r3, #672	@ 0x2a0
 8005700:	2201      	movs	r2, #1
 8005702:	2101      	movs	r1, #1
 8005704:	f00c fba1 	bl	8011e4a <arm_mat_init_f32>
}
 8005708:	bf00      	nop
 800570a:	3790      	adds	r7, #144	@ 0x90
 800570c:	46bd      	mov	sp, r7
 800570e:	bdb0      	pop	{r4, r5, r7, pc}
 8005710:	080147f8 	.word	0x080147f8

08005714 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8005714:	b480      	push	{r7}
 8005716:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005718:	f3bf 8f4f 	dsb	sy
}
 800571c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800571e:	4b06      	ldr	r3, [pc, #24]	@ (8005738 <__NVIC_SystemReset+0x24>)
 8005720:	68db      	ldr	r3, [r3, #12]
 8005722:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8005726:	4904      	ldr	r1, [pc, #16]	@ (8005738 <__NVIC_SystemReset+0x24>)
 8005728:	4b04      	ldr	r3, [pc, #16]	@ (800573c <__NVIC_SystemReset+0x28>)
 800572a:	4313      	orrs	r3, r2
 800572c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800572e:	f3bf 8f4f 	dsb	sy
}
 8005732:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8005734:	bf00      	nop
 8005736:	e7fd      	b.n	8005734 <__NVIC_SystemReset+0x20>
 8005738:	e000ed00 	.word	0xe000ed00
 800573c:	05fa0004 	.word	0x05fa0004

08005740 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8005740:	b580      	push	{r7, lr}
 8005742:	b082      	sub	sp, #8
 8005744:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8005746:	f005 f80e 	bl	800a766 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800574a:	f000 f88d 	bl	8005868 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800574e:	f7ff fbdf 	bl	8004f10 <MX_GPIO_Init>
	MX_DMA_Init();
 8005752:	f7ff fb93 	bl	8004e7c <MX_DMA_Init>
	MX_ADC1_Init();
 8005756:	f7ff fa85 	bl	8004c64 <MX_ADC1_Init>
	MX_TIM2_Init();
 800575a:	f004 fa19 	bl	8009b90 <MX_TIM2_Init>
	MX_TIM3_Init();
 800575e:	f004 fa65 	bl	8009c2c <MX_TIM3_Init>
	MX_TIM4_Init();
 8005762:	f004 fab9 	bl	8009cd8 <MX_TIM4_Init>
	MX_TIM5_Init();
 8005766:	f004 fb0d 	bl	8009d84 <MX_TIM5_Init>
	MX_TIM8_Init();
 800576a:	f004 fb61 	bl	8009e30 <MX_TIM8_Init>
	MX_USART2_UART_Init();
 800576e:	f004 fe23 	bl	800a3b8 <MX_USART2_UART_Init>
	MX_TIM16_Init();
 8005772:	f004 fc1b 	bl	8009fac <MX_TIM16_Init>
	MX_TIM1_Init();
 8005776:	f004 f977 	bl	8009a68 <MX_TIM1_Init>
	MX_LPUART1_UART_Init();
 800577a:	f004 fdd3 	bl	800a324 <MX_LPUART1_UART_Init>
	/* USER CODE BEGIN 2 */
	plotter_begin();
 800577e:	f003 fad7 	bl	8008d30 <plotter_begin>

	prismatic_axis.position = prismatic_encoder.mm;
 8005782:	4b28      	ldr	r3, [pc, #160]	@ (8005824 <main+0xe4>)
 8005784:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005786:	4a28      	ldr	r2, [pc, #160]	@ (8005828 <main+0xe8>)
 8005788:	6013      	str	r3, [r2, #0]
	revolute_axis.position = revolute_encoder.rads;
 800578a:	4b28      	ldr	r3, [pc, #160]	@ (800582c <main+0xec>)
 800578c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800578e:	4a28      	ldr	r2, [pc, #160]	@ (8005830 <main+0xf0>)
 8005790:	6013      	str	r3, [r2, #0]

	safety_state = SAFETY_NORMAL;
 8005792:	4b28      	ldr	r3, [pc, #160]	@ (8005834 <main+0xf4>)
 8005794:	2200      	movs	r2, #0
 8005796:	701a      	strb	r2, [r3, #0]
	hardware_emergency_triggered = false;
 8005798:	4b27      	ldr	r3, [pc, #156]	@ (8005838 <main+0xf8>)
 800579a:	2200      	movs	r2, #0
 800579c:	701a      	strb	r2, [r3, #0]
	pilot_light_state = false;
 800579e:	4b27      	ldr	r3, [pc, #156]	@ (800583c <main+0xfc>)
 80057a0:	2200      	movs	r2, #0
 80057a2:	701a      	strb	r2, [r3, #0]
	safety_toggle_timer = 0;
 80057a4:	4b26      	ldr	r3, [pc, #152]	@ (8005840 <main+0x100>)
 80057a6:	2200      	movs	r2, #0
 80057a8:	601a      	str	r2, [r3, #0]
	position_control_tick = 0;
 80057aa:	4b26      	ldr	r3, [pc, #152]	@ (8005844 <main+0x104>)
 80057ac:	2200      	movs	r2, #0
 80057ae:	601a      	str	r2, [r3, #0]

	if (first_startup) {
 80057b0:	4b25      	ldr	r3, [pc, #148]	@ (8005848 <main+0x108>)
 80057b2:	781b      	ldrb	r3, [r3, #0]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d032      	beq.n	800581e <main+0xde>
		// Check if already at home position
		bool up_photo_detected = HAL_GPIO_ReadPin(UPPER_PHOTO_GPIO_Port,
 80057b8:	2101      	movs	r1, #1
 80057ba:	4824      	ldr	r0, [pc, #144]	@ (800584c <main+0x10c>)
 80057bc:	f007 fa80 	bl	800ccc0 <HAL_GPIO_ReadPin>
 80057c0:	4603      	mov	r3, r0
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	bf14      	ite	ne
 80057c6:	2301      	movne	r3, #1
 80057c8:	2300      	moveq	r3, #0
 80057ca:	71fb      	strb	r3, [r7, #7]
		UPPER_PHOTO_Pin);
		bool prox_detected = HAL_GPIO_ReadPin(PROX_GPIO_Port, PROX_Pin);
 80057cc:	2140      	movs	r1, #64	@ 0x40
 80057ce:	481f      	ldr	r0, [pc, #124]	@ (800584c <main+0x10c>)
 80057d0:	f007 fa76 	bl	800ccc0 <HAL_GPIO_ReadPin>
 80057d4:	4603      	mov	r3, r0
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	bf14      	ite	ne
 80057da:	2301      	movne	r3, #1
 80057dc:	2300      	moveq	r3, #0
 80057de:	71bb      	strb	r3, [r7, #6]

		if (up_photo_detected && prox_detected) {
 80057e0:	79fb      	ldrb	r3, [r7, #7]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d018      	beq.n	8005818 <main+0xd8>
 80057e6:	79bb      	ldrb	r3, [r7, #6]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d015      	beq.n	8005818 <main+0xd8>
			// Already at home position - no need to home
			first_startup = false;
 80057ec:	4b16      	ldr	r3, [pc, #88]	@ (8005848 <main+0x108>)
 80057ee:	2200      	movs	r2, #0
 80057f0:	701a      	strb	r2, [r3, #0]
			homing_active = false;
 80057f2:	4b17      	ldr	r3, [pc, #92]	@ (8005850 <main+0x110>)
 80057f4:	2200      	movs	r2, #0
 80057f6:	701a      	strb	r2, [r3, #0]
			homing_state = HOMING_IDLE;
 80057f8:	4b16      	ldr	r3, [pc, #88]	@ (8005854 <main+0x114>)
 80057fa:	2200      	movs	r2, #0
 80057fc:	701a      	strb	r2, [r3, #0]

			// Clear any sensor flags
			up_photo = false;
 80057fe:	4b16      	ldr	r3, [pc, #88]	@ (8005858 <main+0x118>)
 8005800:	2200      	movs	r2, #0
 8005802:	701a      	strb	r2, [r3, #0]
			low_photo = false;
 8005804:	4b15      	ldr	r3, [pc, #84]	@ (800585c <main+0x11c>)
 8005806:	2200      	movs	r2, #0
 8005808:	701a      	strb	r2, [r3, #0]
			prox_count = 0;
 800580a:	4b15      	ldr	r3, [pc, #84]	@ (8005860 <main+0x120>)
 800580c:	2200      	movs	r2, #0
 800580e:	601a      	str	r2, [r3, #0]

			// Set motion to idle
			motion_sequence_state = MOTION_IDLE;
 8005810:	4b14      	ldr	r3, [pc, #80]	@ (8005864 <main+0x124>)
 8005812:	2200      	movs	r2, #0
 8005814:	701a      	strb	r2, [r3, #0]
 8005816:	e002      	b.n	800581e <main+0xde>

		} else {
			start_homing_sequence(true);
 8005818:	2001      	movs	r0, #1
 800581a:	f000 f871 	bl	8005900 <start_homing_sequence>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		handle_b2_button_polling();
 800581e:	f002 fec5 	bl	80085ac <handle_b2_button_polling>
 8005822:	e7fc      	b.n	800581e <main+0xde>
 8005824:	200006e0 	.word	0x200006e0
 8005828:	20000480 	.word	0x20000480
 800582c:	2000073c 	.word	0x2000073c
 8005830:	200004c4 	.word	0x200004c4
 8005834:	20000568 	.word	0x20000568
 8005838:	20000571 	.word	0x20000571
 800583c:	20000570 	.word	0x20000570
 8005840:	2000056c 	.word	0x2000056c
 8005844:	20000574 	.word	0x20000574
 8005848:	20000333 	.word	0x20000333
 800584c:	48000400 	.word	0x48000400
 8005850:	20000567 	.word	0x20000567
 8005854:	20000566 	.word	0x20000566
 8005858:	20000564 	.word	0x20000564
 800585c:	20000565 	.word	0x20000565
 8005860:	20000560 	.word	0x20000560
 8005864:	20000508 	.word	0x20000508

08005868 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8005868:	b580      	push	{r7, lr}
 800586a:	b094      	sub	sp, #80	@ 0x50
 800586c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800586e:	f107 0318 	add.w	r3, r7, #24
 8005872:	2238      	movs	r2, #56	@ 0x38
 8005874:	2100      	movs	r1, #0
 8005876:	4618      	mov	r0, r3
 8005878:	f00d f858 	bl	801292c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800587c:	1d3b      	adds	r3, r7, #4
 800587e:	2200      	movs	r2, #0
 8005880:	601a      	str	r2, [r3, #0]
 8005882:	605a      	str	r2, [r3, #4]
 8005884:	609a      	str	r2, [r3, #8]
 8005886:	60da      	str	r2, [r3, #12]
 8005888:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800588a:	2000      	movs	r0, #0
 800588c:	f007 fa7a 	bl	800cd84 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005890:	2302      	movs	r3, #2
 8005892:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005894:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005898:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800589a:	2340      	movs	r3, #64	@ 0x40
 800589c:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800589e:	2302      	movs	r3, #2
 80058a0:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80058a2:	2302      	movs	r3, #2
 80058a4:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80058a6:	2304      	movs	r3, #4
 80058a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 80058aa:	2355      	movs	r3, #85	@ 0x55
 80058ac:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80058ae:	2302      	movs	r3, #2
 80058b0:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80058b2:	2302      	movs	r3, #2
 80058b4:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80058b6:	2302      	movs	r3, #2
 80058b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80058ba:	f107 0318 	add.w	r3, r7, #24
 80058be:	4618      	mov	r0, r3
 80058c0:	f007 fb14 	bl	800ceec <HAL_RCC_OscConfig>
 80058c4:	4603      	mov	r3, r0
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d001      	beq.n	80058ce <SystemClock_Config+0x66>
		Error_Handler();
 80058ca:	f003 fa29 	bl	8008d20 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80058ce:	230f      	movs	r3, #15
 80058d0:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80058d2:	2303      	movs	r3, #3
 80058d4:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80058d6:	2300      	movs	r3, #0
 80058d8:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80058da:	2300      	movs	r3, #0
 80058dc:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80058de:	2300      	movs	r3, #0
 80058e0:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 80058e2:	1d3b      	adds	r3, r7, #4
 80058e4:	2104      	movs	r1, #4
 80058e6:	4618      	mov	r0, r3
 80058e8:	f007 fe12 	bl	800d510 <HAL_RCC_ClockConfig>
 80058ec:	4603      	mov	r3, r0
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d001      	beq.n	80058f6 <SystemClock_Config+0x8e>
		Error_Handler();
 80058f2:	f003 fa15 	bl	8008d20 <Error_Handler>
	}
}
 80058f6:	bf00      	nop
 80058f8:	3750      	adds	r7, #80	@ 0x50
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}
	...

08005900 <start_homing_sequence>:

/* USER CODE BEGIN 4 */
void start_homing_sequence(bool is_startup) {
 8005900:	b580      	push	{r7, lr}
 8005902:	b084      	sub	sp, #16
 8005904:	af00      	add	r7, sp, #0
 8005906:	4603      	mov	r3, r0
 8005908:	71fb      	strb	r3, [r7, #7]
	//modbus set home state
	registerFrame[R_Theta_Status].U16 = 1;
 800590a:	4b52      	ldr	r3, [pc, #328]	@ (8005a54 <start_homing_sequence+0x154>)
 800590c:	2201      	movs	r2, #1
 800590e:	841a      	strh	r2, [r3, #32]
	if (homing_active)
 8005910:	4b51      	ldr	r3, [pc, #324]	@ (8005a58 <start_homing_sequence+0x158>)
 8005912:	781b      	ldrb	r3, [r3, #0]
 8005914:	2b00      	cmp	r3, #0
 8005916:	f040 8098 	bne.w	8005a4a <start_homing_sequence+0x14a>
		return;

	// Check current sensor states
	bool up_photo_detected = HAL_GPIO_ReadPin(UPPER_PHOTO_GPIO_Port,
 800591a:	2101      	movs	r1, #1
 800591c:	484f      	ldr	r0, [pc, #316]	@ (8005a5c <start_homing_sequence+0x15c>)
 800591e:	f007 f9cf 	bl	800ccc0 <HAL_GPIO_ReadPin>
 8005922:	4603      	mov	r3, r0
 8005924:	2b00      	cmp	r3, #0
 8005926:	bf14      	ite	ne
 8005928:	2301      	movne	r3, #1
 800592a:	2300      	moveq	r3, #0
 800592c:	73fb      	strb	r3, [r7, #15]
	UPPER_PHOTO_Pin);
	bool prox_detected = HAL_GPIO_ReadPin(PROX_GPIO_Port, PROX_Pin);
 800592e:	2140      	movs	r1, #64	@ 0x40
 8005930:	484a      	ldr	r0, [pc, #296]	@ (8005a5c <start_homing_sequence+0x15c>)
 8005932:	f007 f9c5 	bl	800ccc0 <HAL_GPIO_ReadPin>
 8005936:	4603      	mov	r3, r0
 8005938:	2b00      	cmp	r3, #0
 800593a:	bf14      	ite	ne
 800593c:	2301      	movne	r3, #1
 800593e:	2300      	moveq	r3, #0
 8005940:	73bb      	strb	r3, [r7, #14]

	// Different logic for startup vs manual homing
	if (is_startup || first_startup) {
 8005942:	79fb      	ldrb	r3, [r7, #7]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d103      	bne.n	8005950 <start_homing_sequence+0x50>
 8005948:	4b45      	ldr	r3, [pc, #276]	@ (8005a60 <start_homing_sequence+0x160>)
 800594a:	781b      	ldrb	r3, [r3, #0]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d02e      	beq.n	80059ae <start_homing_sequence+0xae>
		// STARTUP LOGIC: Skip homing if already at home position
		if (up_photo_detected && prox_detected) {
 8005950:	7bfb      	ldrb	r3, [r7, #15]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d018      	beq.n	8005988 <start_homing_sequence+0x88>
 8005956:	7bbb      	ldrb	r3, [r7, #14]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d015      	beq.n	8005988 <start_homing_sequence+0x88>
			// Already at home position - no need to home
			homing_active = false;
 800595c:	4b3e      	ldr	r3, [pc, #248]	@ (8005a58 <start_homing_sequence+0x158>)
 800595e:	2200      	movs	r2, #0
 8005960:	701a      	strb	r2, [r3, #0]
			homing_state = HOMING_IDLE;
 8005962:	4b40      	ldr	r3, [pc, #256]	@ (8005a64 <start_homing_sequence+0x164>)
 8005964:	2200      	movs	r2, #0
 8005966:	701a      	strb	r2, [r3, #0]
			first_startup = false;
 8005968:	4b3d      	ldr	r3, [pc, #244]	@ (8005a60 <start_homing_sequence+0x160>)
 800596a:	2200      	movs	r2, #0
 800596c:	701a      	strb	r2, [r3, #0]

			// Clear sensor flags
			up_photo = false;
 800596e:	4b3e      	ldr	r3, [pc, #248]	@ (8005a68 <start_homing_sequence+0x168>)
 8005970:	2200      	movs	r2, #0
 8005972:	701a      	strb	r2, [r3, #0]
			low_photo = false;
 8005974:	4b3d      	ldr	r3, [pc, #244]	@ (8005a6c <start_homing_sequence+0x16c>)
 8005976:	2200      	movs	r2, #0
 8005978:	701a      	strb	r2, [r3, #0]
			prox_count = 0;
 800597a:	4b3d      	ldr	r3, [pc, #244]	@ (8005a70 <start_homing_sequence+0x170>)
 800597c:	2200      	movs	r2, #0
 800597e:	601a      	str	r2, [r3, #0]

			// Set motion to idle
			motion_sequence_state = MOTION_IDLE;
 8005980:	4b3c      	ldr	r3, [pc, #240]	@ (8005a74 <start_homing_sequence+0x174>)
 8005982:	2200      	movs	r2, #0
 8005984:	701a      	strb	r2, [r3, #0]
			return;
 8005986:	e061      	b.n	8005a4c <start_homing_sequence+0x14c>
		}

		// Not at home - start startup homing sequence (skip zero degrees)
		homing_active = true;
 8005988:	4b33      	ldr	r3, [pc, #204]	@ (8005a58 <start_homing_sequence+0x158>)
 800598a:	2201      	movs	r2, #1
 800598c:	701a      	strb	r2, [r3, #0]
		motion_sequence_state = MOTION_IDLE;
 800598e:	4b39      	ldr	r3, [pc, #228]	@ (8005a74 <start_homing_sequence+0x174>)
 8005990:	2200      	movs	r2, #0
 8005992:	701a      	strb	r2, [r3, #0]
		prox_count = 0;
 8005994:	4b36      	ldr	r3, [pc, #216]	@ (8005a70 <start_homing_sequence+0x170>)
 8005996:	2200      	movs	r2, #0
 8005998:	601a      	str	r2, [r3, #0]
		up_photo = false;
 800599a:	4b33      	ldr	r3, [pc, #204]	@ (8005a68 <start_homing_sequence+0x168>)
 800599c:	2200      	movs	r2, #0
 800599e:	701a      	strb	r2, [r3, #0]
		low_photo = false;
 80059a0:	4b32      	ldr	r3, [pc, #200]	@ (8005a6c <start_homing_sequence+0x16c>)
 80059a2:	2200      	movs	r2, #0
 80059a4:	701a      	strb	r2, [r3, #0]
		homing_state = HOMING_PEN_UP;
 80059a6:	4b2f      	ldr	r3, [pc, #188]	@ (8005a64 <start_homing_sequence+0x164>)
 80059a8:	2201      	movs	r2, #1
 80059aa:	701a      	strb	r2, [r3, #0]
 80059ac:	e04e      	b.n	8005a4c <start_homing_sequence+0x14c>

	} else {
		// MANUAL HOMING LOGIC: More sophisticated behavior
		if (up_photo_detected && prox_detected) {
 80059ae:	7bfb      	ldrb	r3, [r7, #15]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d018      	beq.n	80059e6 <start_homing_sequence+0xe6>
 80059b4:	7bbb      	ldrb	r3, [r7, #14]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d015      	beq.n	80059e6 <start_homing_sequence+0xe6>
			// Already perfectly homed - skip homing completely
			homing_active = false;
 80059ba:	4b27      	ldr	r3, [pc, #156]	@ (8005a58 <start_homing_sequence+0x158>)
 80059bc:	2200      	movs	r2, #0
 80059be:	701a      	strb	r2, [r3, #0]
			homing_state = HOMING_IDLE;
 80059c0:	4b28      	ldr	r3, [pc, #160]	@ (8005a64 <start_homing_sequence+0x164>)
 80059c2:	2200      	movs	r2, #0
 80059c4:	701a      	strb	r2, [r3, #0]
			first_startup = false;  // ← ADDED THIS LINE
 80059c6:	4b26      	ldr	r3, [pc, #152]	@ (8005a60 <start_homing_sequence+0x160>)
 80059c8:	2200      	movs	r2, #0
 80059ca:	701a      	strb	r2, [r3, #0]
			up_photo = false;
 80059cc:	4b26      	ldr	r3, [pc, #152]	@ (8005a68 <start_homing_sequence+0x168>)
 80059ce:	2200      	movs	r2, #0
 80059d0:	701a      	strb	r2, [r3, #0]
			low_photo = false;
 80059d2:	4b26      	ldr	r3, [pc, #152]	@ (8005a6c <start_homing_sequence+0x16c>)
 80059d4:	2200      	movs	r2, #0
 80059d6:	701a      	strb	r2, [r3, #0]
			prox_count = 0;
 80059d8:	4b25      	ldr	r3, [pc, #148]	@ (8005a70 <start_homing_sequence+0x170>)
 80059da:	2200      	movs	r2, #0
 80059dc:	601a      	str	r2, [r3, #0]
			motion_sequence_state = MOTION_IDLE;
 80059de:	4b25      	ldr	r3, [pc, #148]	@ (8005a74 <start_homing_sequence+0x174>)
 80059e0:	2200      	movs	r2, #0
 80059e2:	701a      	strb	r2, [r3, #0]
			return;
 80059e4:	e032      	b.n	8005a4c <start_homing_sequence+0x14c>
			 up_photo = false;
			 low_photo = false;
			 homing_state = HOMING_REV_TO_ZERO_DEG;
			 rev_to_zero_trajectory_started = false;
			 */
		} else if (up_photo_detected && !prox_detected) {
 80059e6:	7bfb      	ldrb	r3, [r7, #15]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d01b      	beq.n	8005a24 <start_homing_sequence+0x124>
 80059ec:	7bbb      	ldrb	r3, [r7, #14]
 80059ee:	f083 0301 	eor.w	r3, r3, #1
 80059f2:	b2db      	uxtb	r3, r3
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d015      	beq.n	8005a24 <start_homing_sequence+0x124>
			// At up photo but not at prox - go to zero degrees first
			homing_active = true;
 80059f8:	4b17      	ldr	r3, [pc, #92]	@ (8005a58 <start_homing_sequence+0x158>)
 80059fa:	2201      	movs	r2, #1
 80059fc:	701a      	strb	r2, [r3, #0]
			motion_sequence_state = MOTION_IDLE;
 80059fe:	4b1d      	ldr	r3, [pc, #116]	@ (8005a74 <start_homing_sequence+0x174>)
 8005a00:	2200      	movs	r2, #0
 8005a02:	701a      	strb	r2, [r3, #0]
			prox_count = 0;
 8005a04:	4b1a      	ldr	r3, [pc, #104]	@ (8005a70 <start_homing_sequence+0x170>)
 8005a06:	2200      	movs	r2, #0
 8005a08:	601a      	str	r2, [r3, #0]
			up_photo = false;
 8005a0a:	4b17      	ldr	r3, [pc, #92]	@ (8005a68 <start_homing_sequence+0x168>)
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	701a      	strb	r2, [r3, #0]
			low_photo = false;
 8005a10:	4b16      	ldr	r3, [pc, #88]	@ (8005a6c <start_homing_sequence+0x16c>)
 8005a12:	2200      	movs	r2, #0
 8005a14:	701a      	strb	r2, [r3, #0]
			homing_state = HOMING_REV_TO_ZERO_DEG;
 8005a16:	4b13      	ldr	r3, [pc, #76]	@ (8005a64 <start_homing_sequence+0x164>)
 8005a18:	2207      	movs	r2, #7
 8005a1a:	701a      	strb	r2, [r3, #0]
			rev_to_zero_trajectory_started = false;
 8005a1c:	4b16      	ldr	r3, [pc, #88]	@ (8005a78 <start_homing_sequence+0x178>)
 8005a1e:	2200      	movs	r2, #0
 8005a20:	701a      	strb	r2, [r3, #0]
 8005a22:	e013      	b.n	8005a4c <start_homing_sequence+0x14c>
		} else {
			// Not at up photo - start full homing sequence
			homing_active = true;
 8005a24:	4b0c      	ldr	r3, [pc, #48]	@ (8005a58 <start_homing_sequence+0x158>)
 8005a26:	2201      	movs	r2, #1
 8005a28:	701a      	strb	r2, [r3, #0]
			motion_sequence_state = MOTION_IDLE;
 8005a2a:	4b12      	ldr	r3, [pc, #72]	@ (8005a74 <start_homing_sequence+0x174>)
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	701a      	strb	r2, [r3, #0]
			prox_count = 0;
 8005a30:	4b0f      	ldr	r3, [pc, #60]	@ (8005a70 <start_homing_sequence+0x170>)
 8005a32:	2200      	movs	r2, #0
 8005a34:	601a      	str	r2, [r3, #0]
			up_photo = false;
 8005a36:	4b0c      	ldr	r3, [pc, #48]	@ (8005a68 <start_homing_sequence+0x168>)
 8005a38:	2200      	movs	r2, #0
 8005a3a:	701a      	strb	r2, [r3, #0]
			low_photo = false;
 8005a3c:	4b0b      	ldr	r3, [pc, #44]	@ (8005a6c <start_homing_sequence+0x16c>)
 8005a3e:	2200      	movs	r2, #0
 8005a40:	701a      	strb	r2, [r3, #0]
			homing_state = HOMING_PEN_UP;
 8005a42:	4b08      	ldr	r3, [pc, #32]	@ (8005a64 <start_homing_sequence+0x164>)
 8005a44:	2201      	movs	r2, #1
 8005a46:	701a      	strb	r2, [r3, #0]
 8005a48:	e000      	b.n	8005a4c <start_homing_sequence+0x14c>
		return;
 8005a4a:	bf00      	nop
		}
	}
}
 8005a4c:	3710      	adds	r7, #16
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}
 8005a52:	bf00      	nop
 8005a54:	200012e4 	.word	0x200012e4
 8005a58:	20000567 	.word	0x20000567
 8005a5c:	48000400 	.word	0x48000400
 8005a60:	20000333 	.word	0x20000333
 8005a64:	20000566 	.word	0x20000566
 8005a68:	20000564 	.word	0x20000564
 8005a6c:	20000565 	.word	0x20000565
 8005a70:	20000560 	.word	0x20000560
 8005a74:	20000508 	.word	0x20000508
 8005a78:	20000572 	.word	0x20000572

08005a7c <update_homing_sequence>:

void update_homing_sequence(void) {
 8005a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a80:	ed2d 8b02 	vpush	{d8}
 8005a84:	b08b      	sub	sp, #44	@ 0x2c
 8005a86:	af00      	add	r7, sp, #0
	if (!homing_active)
 8005a88:	4b95      	ldr	r3, [pc, #596]	@ (8005ce0 <update_homing_sequence+0x264>)
 8005a8a:	781b      	ldrb	r3, [r3, #0]
 8005a8c:	f083 0301 	eor.w	r3, r3, #1
 8005a90:	b2db      	uxtb	r3, r3
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	f040 8335 	bne.w	8006102 <update_homing_sequence+0x686>
		return;

	switch (homing_state) {
 8005a98:	4b92      	ldr	r3, [pc, #584]	@ (8005ce4 <update_homing_sequence+0x268>)
 8005a9a:	781b      	ldrb	r3, [r3, #0]
 8005a9c:	3b01      	subs	r3, #1
 8005a9e:	2b0a      	cmp	r3, #10
 8005aa0:	f200 8331 	bhi.w	8006106 <update_homing_sequence+0x68a>
 8005aa4:	a201      	add	r2, pc, #4	@ (adr r2, 8005aac <update_homing_sequence+0x30>)
 8005aa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aaa:	bf00      	nop
 8005aac:	08005ad9 	.word	0x08005ad9
 8005ab0:	08005afb 	.word	0x08005afb
 8005ab4:	08005b67 	.word	0x08005b67
 8005ab8:	08005cb3 	.word	0x08005cb3
 8005abc:	08005d25 	.word	0x08005d25
 8005ac0:	08005e69 	.word	0x08005e69
 8005ac4:	08005ee1 	.word	0x08005ee1
 8005ac8:	08005f2b 	.word	0x08005f2b
 8005acc:	08005fcd 	.word	0x08005fcd
 8005ad0:	080060d3 	.word	0x080060d3
 8005ad4:	080060ff 	.word	0x080060ff
	case HOMING_PEN_UP:
		// Ensure pen is up
		plotter_pen_up();
 8005ad8:	f003 fdb2 	bl	8009640 <plotter_pen_up>
		prismatic_axis.command_pos = 0.0f;
 8005adc:	4b82      	ldr	r3, [pc, #520]	@ (8005ce8 <update_homing_sequence+0x26c>)
 8005ade:	f04f 0200 	mov.w	r2, #0
 8005ae2:	625a      	str	r2, [r3, #36]	@ 0x24
		revolute_axis.command_pos = 0.0f;
 8005ae4:	4b81      	ldr	r3, [pc, #516]	@ (8005cec <update_homing_sequence+0x270>)
 8005ae6:	f04f 0200 	mov.w	r2, #0
 8005aea:	625a      	str	r2, [r3, #36]	@ 0x24
		motion_delay_timer = 0;
 8005aec:	4b80      	ldr	r3, [pc, #512]	@ (8005cf0 <update_homing_sequence+0x274>)
 8005aee:	2200      	movs	r2, #0
 8005af0:	601a      	str	r2, [r3, #0]
		homing_state = HOMING_DELAY_AFTER_PEN_UP;
 8005af2:	4b7c      	ldr	r3, [pc, #496]	@ (8005ce4 <update_homing_sequence+0x268>)
 8005af4:	2202      	movs	r2, #2
 8005af6:	701a      	strb	r2, [r3, #0]
		break;
 8005af8:	e318      	b.n	800612c <update_homing_sequence+0x6b0>

	case HOMING_DELAY_AFTER_PEN_UP:
		// Stop motors and wait
		prismatic_axis.command_pos = 0.0f;
 8005afa:	4b7b      	ldr	r3, [pc, #492]	@ (8005ce8 <update_homing_sequence+0x26c>)
 8005afc:	f04f 0200 	mov.w	r2, #0
 8005b00:	625a      	str	r2, [r3, #36]	@ 0x24
		revolute_axis.command_pos = 0.0f;
 8005b02:	4b7a      	ldr	r3, [pc, #488]	@ (8005cec <update_homing_sequence+0x270>)
 8005b04:	f04f 0200 	mov.w	r2, #0
 8005b08:	625a      	str	r2, [r3, #36]	@ 0x24
		motion_delay_timer++;
 8005b0a:	4b79      	ldr	r3, [pc, #484]	@ (8005cf0 <update_homing_sequence+0x274>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	3301      	adds	r3, #1
 8005b10:	4a77      	ldr	r2, [pc, #476]	@ (8005cf0 <update_homing_sequence+0x274>)
 8005b12:	6013      	str	r3, [r2, #0]
		if (motion_delay_timer >= 500) {
 8005b14:	4b76      	ldr	r3, [pc, #472]	@ (8005cf0 <update_homing_sequence+0x274>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8005b1c:	f0c0 82f5 	bcc.w	800610a <update_homing_sequence+0x68e>
			// Check if already at low photo sensor
			low_photo = HAL_GPIO_ReadPin(LOWER_PHOTO_GPIO_Port,
 8005b20:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005b24:	4873      	ldr	r0, [pc, #460]	@ (8005cf4 <update_homing_sequence+0x278>)
 8005b26:	f007 f8cb 	bl	800ccc0 <HAL_GPIO_ReadPin>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	bf14      	ite	ne
 8005b30:	2301      	movne	r3, #1
 8005b32:	2300      	moveq	r3, #0
 8005b34:	b2da      	uxtb	r2, r3
 8005b36:	4b70      	ldr	r3, [pc, #448]	@ (8005cf8 <update_homing_sequence+0x27c>)
 8005b38:	701a      	strb	r2, [r3, #0]
			LOWER_PHOTO_Pin);

			if (low_photo) {
 8005b3a:	4b6f      	ldr	r3, [pc, #444]	@ (8005cf8 <update_homing_sequence+0x27c>)
 8005b3c:	781b      	ldrb	r3, [r3, #0]
 8005b3e:	b2db      	uxtb	r3, r3
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d00c      	beq.n	8005b5e <update_homing_sequence+0xe2>
				// Already at low photo, skip moving down and go directly to delay
				motion_delay_timer = 0;
 8005b44:	4b6a      	ldr	r3, [pc, #424]	@ (8005cf0 <update_homing_sequence+0x274>)
 8005b46:	2200      	movs	r2, #0
 8005b48:	601a      	str	r2, [r3, #0]
				homing_state = HOMING_DELAY_AFTER_LOW_PHOTO;
 8005b4a:	4b66      	ldr	r3, [pc, #408]	@ (8005ce4 <update_homing_sequence+0x268>)
 8005b4c:	2204      	movs	r2, #4
 8005b4e:	701a      	strb	r2, [r3, #0]
				low_photo = false; // Reset flag
 8005b50:	4b69      	ldr	r3, [pc, #420]	@ (8005cf8 <update_homing_sequence+0x27c>)
 8005b52:	2200      	movs	r2, #0
 8005b54:	701a      	strb	r2, [r3, #0]
				up_photo = false;  // Reset for next detection
 8005b56:	4b69      	ldr	r3, [pc, #420]	@ (8005cfc <update_homing_sequence+0x280>)
 8005b58:	2200      	movs	r2, #0
 8005b5a:	701a      	strb	r2, [r3, #0]
			} else {
				// Not at low photo, need to move down
				homing_state = HOMING_PRIS_DOWN_TO_LOW_PHOTO;
			}
		}
		break;
 8005b5c:	e2d5      	b.n	800610a <update_homing_sequence+0x68e>
				homing_state = HOMING_PRIS_DOWN_TO_LOW_PHOTO;
 8005b5e:	4b61      	ldr	r3, [pc, #388]	@ (8005ce4 <update_homing_sequence+0x268>)
 8005b60:	2203      	movs	r2, #3
 8005b62:	701a      	strb	r2, [r3, #0]
		break;
 8005b64:	e2d1      	b.n	800610a <update_homing_sequence+0x68e>

	case HOMING_PRIS_DOWN_TO_LOW_PHOTO:
		// Move prismatic down at constant velocity
		prismatic_axis.vel_error = HOMING_PRIS_VELOCITY
				- prismatic_axis.kalman_velocity;
 8005b66:	4b60      	ldr	r3, [pc, #384]	@ (8005ce8 <update_homing_sequence+0x26c>)
 8005b68:	edd3 7a07 	vldr	s15, [r3, #28]
 8005b6c:	ed9f 7a64 	vldr	s14, [pc, #400]	@ 8005d00 <update_homing_sequence+0x284>
 8005b70:	ee77 7a67 	vsub.f32	s15, s14, s15
		prismatic_axis.vel_error = HOMING_PRIS_VELOCITY
 8005b74:	4b5c      	ldr	r3, [pc, #368]	@ (8005ce8 <update_homing_sequence+0x26c>)
 8005b76:	edc3 7a06 	vstr	s15, [r3, #24]
		prismatic_axis.command_pos = PWM_Satuation(
 8005b7a:	4b5b      	ldr	r3, [pc, #364]	@ (8005ce8 <update_homing_sequence+0x26c>)
 8005b7c:	edd3 7a06 	vldr	s15, [r3, #24]
 8005b80:	eeb0 0a67 	vmov.f32	s0, s15
 8005b84:	485f      	ldr	r0, [pc, #380]	@ (8005d04 <update_homing_sequence+0x288>)
 8005b86:	f7fb fb47 	bl	8001218 <PID_CONTROLLER_Compute>
 8005b8a:	eeb0 8a40 	vmov.f32	s16, s0
				PID_CONTROLLER_Compute(&prismatic_velocity_pid,
						prismatic_axis.vel_error),
				ZGX45RGG_400RPM_Constant.U_max,
 8005b8e:	4b5e      	ldr	r3, [pc, #376]	@ (8005d08 <update_homing_sequence+0x28c>)
 8005b90:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		prismatic_axis.command_pos = PWM_Satuation(
 8005b94:	4610      	mov	r0, r2
 8005b96:	4619      	mov	r1, r3
 8005b98:	f7fa ff94 	bl	8000ac4 <__aeabi_d2iz>
 8005b9c:	4604      	mov	r4, r0
				-ZGX45RGG_400RPM_Constant.U_max);
 8005b9e:	4b5a      	ldr	r3, [pc, #360]	@ (8005d08 <update_homing_sequence+0x28c>)
 8005ba0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8005ba4:	613a      	str	r2, [r7, #16]
 8005ba6:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8005baa:	617b      	str	r3, [r7, #20]
		prismatic_axis.command_pos = PWM_Satuation(
 8005bac:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005bb0:	f7fa ff88 	bl	8000ac4 <__aeabi_d2iz>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	4619      	mov	r1, r3
 8005bb8:	4620      	mov	r0, r4
 8005bba:	eeb0 0a48 	vmov.f32	s0, s16
 8005bbe:	f7fb fac9 	bl	8001154 <PWM_Satuation>
 8005bc2:	ee07 0a90 	vmov	s15, r0
 8005bc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005bca:	4b47      	ldr	r3, [pc, #284]	@ (8005ce8 <update_homing_sequence+0x26c>)
 8005bcc:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		// Add feedforward compensation during homing
		prismatic_axis.ffd = PRISMATIC_MOTOR_FFD_Compute(&prismatic_motor_ffd,
 8005bd0:	eeb5 0a00 	vmov.f32	s0, #80	@ 0x3e800000  0.250
 8005bd4:	484d      	ldr	r0, [pc, #308]	@ (8005d0c <update_homing_sequence+0x290>)
 8005bd6:	f7fb fe5f 	bl	8001898 <PRISMATIC_MOTOR_FFD_Compute>
 8005bda:	eef0 7a40 	vmov.f32	s15, s0
 8005bde:	4b42      	ldr	r3, [pc, #264]	@ (8005ce8 <update_homing_sequence+0x26c>)
 8005be0:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
		HOMING_PRIS_VELOCITY / 1000.0f);
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 8005be4:	4b4a      	ldr	r3, [pc, #296]	@ (8005d10 <update_homing_sequence+0x294>)
 8005be6:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
				revolute_encoder.rads, 0.0f, prismatic_encoder.mm / 1000.0f);
 8005bea:	4b4a      	ldr	r3, [pc, #296]	@ (8005d14 <update_homing_sequence+0x298>)
 8005bec:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 8005bf0:	ed9f 6a49 	vldr	s12, [pc, #292]	@ 8005d18 <update_homing_sequence+0x29c>
 8005bf4:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8005bf8:	eeb0 1a66 	vmov.f32	s2, s13
 8005bfc:	eddf 0a47 	vldr	s1, [pc, #284]	@ 8005d1c <update_homing_sequence+0x2a0>
 8005c00:	eeb0 0a47 	vmov.f32	s0, s14
 8005c04:	4846      	ldr	r0, [pc, #280]	@ (8005d20 <update_homing_sequence+0x2a4>)
 8005c06:	f7fb feef 	bl	80019e8 <PRISMATIC_MOTOR_DFD_Compute>
 8005c0a:	eef0 7a40 	vmov.f32	s15, s0
 8005c0e:	4b36      	ldr	r3, [pc, #216]	@ (8005ce8 <update_homing_sequence+0x26c>)
 8005c10:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
		prismatic_axis.command_pos += prismatic_axis.ffd + prismatic_axis.dfd;
 8005c14:	4b34      	ldr	r3, [pc, #208]	@ (8005ce8 <update_homing_sequence+0x26c>)
 8005c16:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8005c1a:	4b33      	ldr	r3, [pc, #204]	@ (8005ce8 <update_homing_sequence+0x26c>)
 8005c1c:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 8005c20:	4b31      	ldr	r3, [pc, #196]	@ (8005ce8 <update_homing_sequence+0x26c>)
 8005c22:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8005c26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c2e:	4b2e      	ldr	r3, [pc, #184]	@ (8005ce8 <update_homing_sequence+0x26c>)
 8005c30:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8005c34:	4b2c      	ldr	r3, [pc, #176]	@ (8005ce8 <update_homing_sequence+0x26c>)
 8005c36:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
				ZGX45RGG_400RPM_Constant.U_max,
 8005c3a:	4b33      	ldr	r3, [pc, #204]	@ (8005d08 <update_homing_sequence+0x28c>)
 8005c3c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8005c40:	4610      	mov	r0, r2
 8005c42:	4619      	mov	r1, r3
 8005c44:	f7fa ff3e 	bl	8000ac4 <__aeabi_d2iz>
 8005c48:	4604      	mov	r4, r0
				-ZGX45RGG_400RPM_Constant.U_max);
 8005c4a:	4b2f      	ldr	r3, [pc, #188]	@ (8005d08 <update_homing_sequence+0x28c>)
 8005c4c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8005c50:	60ba      	str	r2, [r7, #8]
 8005c52:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8005c56:	60fb      	str	r3, [r7, #12]
		prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8005c58:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005c5c:	f7fa ff32 	bl	8000ac4 <__aeabi_d2iz>
 8005c60:	4603      	mov	r3, r0
 8005c62:	4619      	mov	r1, r3
 8005c64:	4620      	mov	r0, r4
 8005c66:	eeb0 0a48 	vmov.f32	s0, s16
 8005c6a:	f7fb fa73 	bl	8001154 <PWM_Satuation>
 8005c6e:	ee07 0a90 	vmov	s15, r0
 8005c72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c76:	4b1c      	ldr	r3, [pc, #112]	@ (8005ce8 <update_homing_sequence+0x26c>)
 8005c78:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		if (low_photo) {
 8005c7c:	4b1e      	ldr	r3, [pc, #120]	@ (8005cf8 <update_homing_sequence+0x27c>)
 8005c7e:	781b      	ldrb	r3, [r3, #0]
 8005c80:	b2db      	uxtb	r3, r3
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	f000 8243 	beq.w	800610e <update_homing_sequence+0x692>
			// Found low photo, stop and start delay
			prismatic_axis.command_pos = 0.0f;
 8005c88:	4b17      	ldr	r3, [pc, #92]	@ (8005ce8 <update_homing_sequence+0x26c>)
 8005c8a:	f04f 0200 	mov.w	r2, #0
 8005c8e:	625a      	str	r2, [r3, #36]	@ 0x24
			revolute_axis.command_pos = 0.0f;
 8005c90:	4b16      	ldr	r3, [pc, #88]	@ (8005cec <update_homing_sequence+0x270>)
 8005c92:	f04f 0200 	mov.w	r2, #0
 8005c96:	625a      	str	r2, [r3, #36]	@ 0x24
			motion_delay_timer = 0;
 8005c98:	4b15      	ldr	r3, [pc, #84]	@ (8005cf0 <update_homing_sequence+0x274>)
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	601a      	str	r2, [r3, #0]
			homing_state = HOMING_DELAY_AFTER_LOW_PHOTO;
 8005c9e:	4b11      	ldr	r3, [pc, #68]	@ (8005ce4 <update_homing_sequence+0x268>)
 8005ca0:	2204      	movs	r2, #4
 8005ca2:	701a      	strb	r2, [r3, #0]
			low_photo = false; // Reset flag after use
 8005ca4:	4b14      	ldr	r3, [pc, #80]	@ (8005cf8 <update_homing_sequence+0x27c>)
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	701a      	strb	r2, [r3, #0]
			up_photo = false;  // Reset for next detection
 8005caa:	4b14      	ldr	r3, [pc, #80]	@ (8005cfc <update_homing_sequence+0x280>)
 8005cac:	2200      	movs	r2, #0
 8005cae:	701a      	strb	r2, [r3, #0]
		}
		break;
 8005cb0:	e22d      	b.n	800610e <update_homing_sequence+0x692>

	case HOMING_DELAY_AFTER_LOW_PHOTO:
		// Stop motors and wait
		prismatic_axis.command_pos = 0.0f;
 8005cb2:	4b0d      	ldr	r3, [pc, #52]	@ (8005ce8 <update_homing_sequence+0x26c>)
 8005cb4:	f04f 0200 	mov.w	r2, #0
 8005cb8:	625a      	str	r2, [r3, #36]	@ 0x24
		revolute_axis.command_pos = 0.0f;
 8005cba:	4b0c      	ldr	r3, [pc, #48]	@ (8005cec <update_homing_sequence+0x270>)
 8005cbc:	f04f 0200 	mov.w	r2, #0
 8005cc0:	625a      	str	r2, [r3, #36]	@ 0x24
		motion_delay_timer++;
 8005cc2:	4b0b      	ldr	r3, [pc, #44]	@ (8005cf0 <update_homing_sequence+0x274>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	3301      	adds	r3, #1
 8005cc8:	4a09      	ldr	r2, [pc, #36]	@ (8005cf0 <update_homing_sequence+0x274>)
 8005cca:	6013      	str	r3, [r2, #0]
		if (motion_delay_timer >= 500) {
 8005ccc:	4b08      	ldr	r3, [pc, #32]	@ (8005cf0 <update_homing_sequence+0x274>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8005cd4:	f0c0 821d 	bcc.w	8006112 <update_homing_sequence+0x696>
			homing_state = HOMING_PRIS_UP_TO_UP_PHOTO;
 8005cd8:	4b02      	ldr	r3, [pc, #8]	@ (8005ce4 <update_homing_sequence+0x268>)
 8005cda:	2205      	movs	r2, #5
 8005cdc:	701a      	strb	r2, [r3, #0]
		}
		break;
 8005cde:	e218      	b.n	8006112 <update_homing_sequence+0x696>
 8005ce0:	20000567 	.word	0x20000567
 8005ce4:	20000566 	.word	0x20000566
 8005ce8:	20000480 	.word	0x20000480
 8005cec:	200004c4 	.word	0x200004c4
 8005cf0:	2000055c 	.word	0x2000055c
 8005cf4:	48000400 	.word	0x48000400
 8005cf8:	20000565 	.word	0x20000565
 8005cfc:	20000564 	.word	0x20000564
 8005d00:	437a0000 	.word	0x437a0000
 8005d04:	200007c0 	.word	0x200007c0
 8005d08:	20000080 	.word	0x20000080
 8005d0c:	20000860 	.word	0x20000860
 8005d10:	2000073c 	.word	0x2000073c
 8005d14:	200006e0 	.word	0x200006e0
 8005d18:	447a0000 	.word	0x447a0000
 8005d1c:	00000000 	.word	0x00000000
 8005d20:	20000864 	.word	0x20000864

	case HOMING_PRIS_UP_TO_UP_PHOTO:
		// Move prismatic up at constant velocity
		prismatic_axis.vel_error = -HOMING_PRIS_VELOCITY
				- prismatic_axis.kalman_velocity;
 8005d24:	4b96      	ldr	r3, [pc, #600]	@ (8005f80 <update_homing_sequence+0x504>)
 8005d26:	edd3 7a07 	vldr	s15, [r3, #28]
 8005d2a:	ed9f 7a96 	vldr	s14, [pc, #600]	@ 8005f84 <update_homing_sequence+0x508>
 8005d2e:	ee77 7a67 	vsub.f32	s15, s14, s15
		prismatic_axis.vel_error = -HOMING_PRIS_VELOCITY
 8005d32:	4b93      	ldr	r3, [pc, #588]	@ (8005f80 <update_homing_sequence+0x504>)
 8005d34:	edc3 7a06 	vstr	s15, [r3, #24]
		prismatic_axis.command_pos = PWM_Satuation(
 8005d38:	4b91      	ldr	r3, [pc, #580]	@ (8005f80 <update_homing_sequence+0x504>)
 8005d3a:	edd3 7a06 	vldr	s15, [r3, #24]
 8005d3e:	eeb0 0a67 	vmov.f32	s0, s15
 8005d42:	4891      	ldr	r0, [pc, #580]	@ (8005f88 <update_homing_sequence+0x50c>)
 8005d44:	f7fb fa68 	bl	8001218 <PID_CONTROLLER_Compute>
 8005d48:	eeb0 8a40 	vmov.f32	s16, s0
				PID_CONTROLLER_Compute(&prismatic_velocity_pid,
						prismatic_axis.vel_error),
				ZGX45RGG_400RPM_Constant.U_max,
 8005d4c:	4b8f      	ldr	r3, [pc, #572]	@ (8005f8c <update_homing_sequence+0x510>)
 8005d4e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		prismatic_axis.command_pos = PWM_Satuation(
 8005d52:	4610      	mov	r0, r2
 8005d54:	4619      	mov	r1, r3
 8005d56:	f7fa feb5 	bl	8000ac4 <__aeabi_d2iz>
 8005d5a:	4604      	mov	r4, r0
				-ZGX45RGG_400RPM_Constant.U_max);
 8005d5c:	4b8b      	ldr	r3, [pc, #556]	@ (8005f8c <update_homing_sequence+0x510>)
 8005d5e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8005d62:	603a      	str	r2, [r7, #0]
 8005d64:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8005d68:	607b      	str	r3, [r7, #4]
		prismatic_axis.command_pos = PWM_Satuation(
 8005d6a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d6e:	f7fa fea9 	bl	8000ac4 <__aeabi_d2iz>
 8005d72:	4603      	mov	r3, r0
 8005d74:	4619      	mov	r1, r3
 8005d76:	4620      	mov	r0, r4
 8005d78:	eeb0 0a48 	vmov.f32	s0, s16
 8005d7c:	f7fb f9ea 	bl	8001154 <PWM_Satuation>
 8005d80:	ee07 0a90 	vmov	s15, r0
 8005d84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d88:	4b7d      	ldr	r3, [pc, #500]	@ (8005f80 <update_homing_sequence+0x504>)
 8005d8a:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		// Add feedforward compensation during homing
		prismatic_axis.ffd = PRISMATIC_MOTOR_FFD_Compute(&prismatic_motor_ffd,
 8005d8e:	eebd 0a00 	vmov.f32	s0, #208	@ 0xbe800000 -0.250
 8005d92:	487f      	ldr	r0, [pc, #508]	@ (8005f90 <update_homing_sequence+0x514>)
 8005d94:	f7fb fd80 	bl	8001898 <PRISMATIC_MOTOR_FFD_Compute>
 8005d98:	eef0 7a40 	vmov.f32	s15, s0
 8005d9c:	4b78      	ldr	r3, [pc, #480]	@ (8005f80 <update_homing_sequence+0x504>)
 8005d9e:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
				-HOMING_PRIS_VELOCITY / 1000.0f);
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 8005da2:	4b7c      	ldr	r3, [pc, #496]	@ (8005f94 <update_homing_sequence+0x518>)
 8005da4:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
				revolute_encoder.rads, 0.0f, prismatic_encoder.mm / 1000.0f);
 8005da8:	4b7b      	ldr	r3, [pc, #492]	@ (8005f98 <update_homing_sequence+0x51c>)
 8005daa:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 8005dae:	ed9f 6a7b 	vldr	s12, [pc, #492]	@ 8005f9c <update_homing_sequence+0x520>
 8005db2:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8005db6:	eeb0 1a66 	vmov.f32	s2, s13
 8005dba:	eddf 0a79 	vldr	s1, [pc, #484]	@ 8005fa0 <update_homing_sequence+0x524>
 8005dbe:	eeb0 0a47 	vmov.f32	s0, s14
 8005dc2:	4878      	ldr	r0, [pc, #480]	@ (8005fa4 <update_homing_sequence+0x528>)
 8005dc4:	f7fb fe10 	bl	80019e8 <PRISMATIC_MOTOR_DFD_Compute>
 8005dc8:	eef0 7a40 	vmov.f32	s15, s0
 8005dcc:	4b6c      	ldr	r3, [pc, #432]	@ (8005f80 <update_homing_sequence+0x504>)
 8005dce:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
		prismatic_axis.command_pos += prismatic_axis.ffd + prismatic_axis.dfd;
 8005dd2:	4b6b      	ldr	r3, [pc, #428]	@ (8005f80 <update_homing_sequence+0x504>)
 8005dd4:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8005dd8:	4b69      	ldr	r3, [pc, #420]	@ (8005f80 <update_homing_sequence+0x504>)
 8005dda:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 8005dde:	4b68      	ldr	r3, [pc, #416]	@ (8005f80 <update_homing_sequence+0x504>)
 8005de0:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8005de4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005de8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005dec:	4b64      	ldr	r3, [pc, #400]	@ (8005f80 <update_homing_sequence+0x504>)
 8005dee:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8005df2:	4b63      	ldr	r3, [pc, #396]	@ (8005f80 <update_homing_sequence+0x504>)
 8005df4:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
				ZGX45RGG_400RPM_Constant.U_max,
 8005df8:	4b64      	ldr	r3, [pc, #400]	@ (8005f8c <update_homing_sequence+0x510>)
 8005dfa:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8005dfe:	4610      	mov	r0, r2
 8005e00:	4619      	mov	r1, r3
 8005e02:	f7fa fe5f 	bl	8000ac4 <__aeabi_d2iz>
 8005e06:	4604      	mov	r4, r0
				-ZGX45RGG_400RPM_Constant.U_max);
 8005e08:	4b60      	ldr	r3, [pc, #384]	@ (8005f8c <update_homing_sequence+0x510>)
 8005e0a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8005e0e:	4692      	mov	sl, r2
 8005e10:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
		prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8005e14:	4650      	mov	r0, sl
 8005e16:	4659      	mov	r1, fp
 8005e18:	f7fa fe54 	bl	8000ac4 <__aeabi_d2iz>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	4619      	mov	r1, r3
 8005e20:	4620      	mov	r0, r4
 8005e22:	eeb0 0a48 	vmov.f32	s0, s16
 8005e26:	f7fb f995 	bl	8001154 <PWM_Satuation>
 8005e2a:	ee07 0a90 	vmov	s15, r0
 8005e2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e32:	4b53      	ldr	r3, [pc, #332]	@ (8005f80 <update_homing_sequence+0x504>)
 8005e34:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		if (up_photo) {
 8005e38:	4b5b      	ldr	r3, [pc, #364]	@ (8005fa8 <update_homing_sequence+0x52c>)
 8005e3a:	781b      	ldrb	r3, [r3, #0]
 8005e3c:	b2db      	uxtb	r3, r3
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	f000 8169 	beq.w	8006116 <update_homing_sequence+0x69a>
			// Found up photo, stop and start delay before backup
			prismatic_axis.command_pos = 0.0f;
 8005e44:	4b4e      	ldr	r3, [pc, #312]	@ (8005f80 <update_homing_sequence+0x504>)
 8005e46:	f04f 0200 	mov.w	r2, #0
 8005e4a:	625a      	str	r2, [r3, #36]	@ 0x24
			revolute_axis.command_pos = 0.0f;
 8005e4c:	4b57      	ldr	r3, [pc, #348]	@ (8005fac <update_homing_sequence+0x530>)
 8005e4e:	f04f 0200 	mov.w	r2, #0
 8005e52:	625a      	str	r2, [r3, #36]	@ 0x24
			motion_delay_timer = 0;
 8005e54:	4b56      	ldr	r3, [pc, #344]	@ (8005fb0 <update_homing_sequence+0x534>)
 8005e56:	2200      	movs	r2, #0
 8005e58:	601a      	str	r2, [r3, #0]
			homing_state = HOMING_DELAY_AFTER_UP_PHOTO;
 8005e5a:	4b56      	ldr	r3, [pc, #344]	@ (8005fb4 <update_homing_sequence+0x538>)
 8005e5c:	2206      	movs	r2, #6
 8005e5e:	701a      	strb	r2, [r3, #0]
			up_photo = false; // Reset flag after use
 8005e60:	4b51      	ldr	r3, [pc, #324]	@ (8005fa8 <update_homing_sequence+0x52c>)
 8005e62:	2200      	movs	r2, #0
 8005e64:	701a      	strb	r2, [r3, #0]
		}
		break;
 8005e66:	e156      	b.n	8006116 <update_homing_sequence+0x69a>

	case HOMING_DELAY_AFTER_UP_PHOTO:
		// Stop motors and wait before starting backup procedure
		prismatic_axis.command_pos = 0.0f;
 8005e68:	4b45      	ldr	r3, [pc, #276]	@ (8005f80 <update_homing_sequence+0x504>)
 8005e6a:	f04f 0200 	mov.w	r2, #0
 8005e6e:	625a      	str	r2, [r3, #36]	@ 0x24
		revolute_axis.command_pos = 0.0f;
 8005e70:	4b4e      	ldr	r3, [pc, #312]	@ (8005fac <update_homing_sequence+0x530>)
 8005e72:	f04f 0200 	mov.w	r2, #0
 8005e76:	625a      	str	r2, [r3, #36]	@ 0x24
		motion_delay_timer++;
 8005e78:	4b4d      	ldr	r3, [pc, #308]	@ (8005fb0 <update_homing_sequence+0x534>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	3301      	adds	r3, #1
 8005e7e:	4a4c      	ldr	r2, [pc, #304]	@ (8005fb0 <update_homing_sequence+0x534>)
 8005e80:	6013      	str	r3, [r2, #0]
		if (motion_delay_timer >= 500) {
 8005e82:	4b4b      	ldr	r3, [pc, #300]	@ (8005fb0 <update_homing_sequence+0x534>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8005e8a:	f0c0 8146 	bcc.w	800611a <update_homing_sequence+0x69e>
			if (first_startup) {
 8005e8e:	4b4a      	ldr	r3, [pc, #296]	@ (8005fb8 <update_homing_sequence+0x53c>)
 8005e90:	781b      	ldrb	r3, [r3, #0]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d01d      	beq.n	8005ed2 <update_homing_sequence+0x456>
				// STARTUP: Check if prox is already detected before searching
				bool prox_detected = HAL_GPIO_ReadPin(PROX_GPIO_Port, PROX_Pin);
 8005e96:	2140      	movs	r1, #64	@ 0x40
 8005e98:	4848      	ldr	r0, [pc, #288]	@ (8005fbc <update_homing_sequence+0x540>)
 8005e9a:	f006 ff11 	bl	800ccc0 <HAL_GPIO_ReadPin>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	bf14      	ite	ne
 8005ea4:	2301      	movne	r3, #1
 8005ea6:	2300      	moveq	r3, #0
 8005ea8:	77fb      	strb	r3, [r7, #31]

				if (prox_detected) {
 8005eaa:	7ffb      	ldrb	r3, [r7, #31]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d009      	beq.n	8005ec4 <update_homing_sequence+0x448>
					// Already at prox - skip search and go to completion
					motion_delay_timer = 0;
 8005eb0:	4b3f      	ldr	r3, [pc, #252]	@ (8005fb0 <update_homing_sequence+0x534>)
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	601a      	str	r2, [r3, #0]
					homing_state = HOMING_DELAY_AFTER_PROX;
 8005eb6:	4b3f      	ldr	r3, [pc, #252]	@ (8005fb4 <update_homing_sequence+0x538>)
 8005eb8:	220a      	movs	r2, #10
 8005eba:	701a      	strb	r2, [r3, #0]
					prox_count = 1; // Set count to indicate prox found
 8005ebc:	4b40      	ldr	r3, [pc, #256]	@ (8005fc0 <update_homing_sequence+0x544>)
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	601a      	str	r2, [r3, #0]
				homing_state = HOMING_REV_TO_ZERO_DEG;
				// Initialize trajectory variables for zero degree movement
				rev_to_zero_trajectory_started = false;
			}
		}
		break;
 8005ec2:	e12a      	b.n	800611a <update_homing_sequence+0x69e>
					homing_state = HOMING_REV_CW_TO_PROX1;
 8005ec4:	4b3b      	ldr	r3, [pc, #236]	@ (8005fb4 <update_homing_sequence+0x538>)
 8005ec6:	2209      	movs	r2, #9
 8005ec8:	701a      	strb	r2, [r3, #0]
					prox_count = 0; // Reset prox counter
 8005eca:	4b3d      	ldr	r3, [pc, #244]	@ (8005fc0 <update_homing_sequence+0x544>)
 8005ecc:	2200      	movs	r2, #0
 8005ece:	601a      	str	r2, [r3, #0]
		break;
 8005ed0:	e123      	b.n	800611a <update_homing_sequence+0x69e>
				homing_state = HOMING_REV_TO_ZERO_DEG;
 8005ed2:	4b38      	ldr	r3, [pc, #224]	@ (8005fb4 <update_homing_sequence+0x538>)
 8005ed4:	2207      	movs	r2, #7
 8005ed6:	701a      	strb	r2, [r3, #0]
				rev_to_zero_trajectory_started = false;
 8005ed8:	4b3a      	ldr	r3, [pc, #232]	@ (8005fc4 <update_homing_sequence+0x548>)
 8005eda:	2200      	movs	r2, #0
 8005edc:	701a      	strb	r2, [r3, #0]
		break;
 8005ede:	e11c      	b.n	800611a <update_homing_sequence+0x69e>

	case HOMING_REV_TO_ZERO_DEG:
		if (!rev_to_zero_trajectory_started) {
 8005ee0:	4b38      	ldr	r3, [pc, #224]	@ (8005fc4 <update_homing_sequence+0x548>)
 8005ee2:	781b      	ldrb	r3, [r3, #0]
 8005ee4:	f083 0301 	eor.w	r3, r3, #1
 8005ee8:	b2db      	uxtb	r3, r3
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d00b      	beq.n	8005f06 <update_homing_sequence+0x48a>
			// Get current prismatic position (keep it where it is)
			float current_pris_pos = prismatic_encoder.mm;
 8005eee:	4b2a      	ldr	r3, [pc, #168]	@ (8005f98 <update_homing_sequence+0x51c>)
 8005ef0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ef2:	623b      	str	r3, [r7, #32]

			// Start combined trajectory to move revolute to 0° while keeping prismatic position
			start_combined_trajectory(current_pris_pos, 0.0f);
 8005ef4:	eddf 0a2a 	vldr	s1, [pc, #168]	@ 8005fa0 <update_homing_sequence+0x524>
 8005ef8:	ed97 0a08 	vldr	s0, [r7, #32]
 8005efc:	f000 fa16 	bl	800632c <start_combined_trajectory>

			rev_to_zero_trajectory_started = true;
 8005f00:	4b30      	ldr	r3, [pc, #192]	@ (8005fc4 <update_homing_sequence+0x548>)
 8005f02:	2201      	movs	r2, #1
 8005f04:	701a      	strb	r2, [r3, #0]
		}

		// Wait for trajectory to complete
		if (motion_sequence_state == MOTION_IDLE) {
 8005f06:	4b30      	ldr	r3, [pc, #192]	@ (8005fc8 <update_homing_sequence+0x54c>)
 8005f08:	781b      	ldrb	r3, [r3, #0]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	f040 8107 	bne.w	800611e <update_homing_sequence+0x6a2>
			// Trajectory completed, move to next homing state
			motion_delay_timer = 0;
 8005f10:	4b27      	ldr	r3, [pc, #156]	@ (8005fb0 <update_homing_sequence+0x534>)
 8005f12:	2200      	movs	r2, #0
 8005f14:	601a      	str	r2, [r3, #0]
			homing_state = HOMING_DELAY_AFTER_ZERO_DEG;
 8005f16:	4b27      	ldr	r3, [pc, #156]	@ (8005fb4 <update_homing_sequence+0x538>)
 8005f18:	2208      	movs	r2, #8
 8005f1a:	701a      	strb	r2, [r3, #0]
			prox_count = 0; // Reset prox counter for next stage
 8005f1c:	4b28      	ldr	r3, [pc, #160]	@ (8005fc0 <update_homing_sequence+0x544>)
 8005f1e:	2200      	movs	r2, #0
 8005f20:	601a      	str	r2, [r3, #0]
			rev_to_zero_trajectory_started = false; // Reset for next time
 8005f22:	4b28      	ldr	r3, [pc, #160]	@ (8005fc4 <update_homing_sequence+0x548>)
 8005f24:	2200      	movs	r2, #0
 8005f26:	701a      	strb	r2, [r3, #0]
		}
		break;
 8005f28:	e0f9      	b.n	800611e <update_homing_sequence+0x6a2>

	case HOMING_DELAY_AFTER_ZERO_DEG:
		// Stop motors and wait - let normal control handle this
		motion_delay_timer++;
 8005f2a:	4b21      	ldr	r3, [pc, #132]	@ (8005fb0 <update_homing_sequence+0x534>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	3301      	adds	r3, #1
 8005f30:	4a1f      	ldr	r2, [pc, #124]	@ (8005fb0 <update_homing_sequence+0x534>)
 8005f32:	6013      	str	r3, [r2, #0]
		if (motion_delay_timer >= 500) {
 8005f34:	4b1e      	ldr	r3, [pc, #120]	@ (8005fb0 <update_homing_sequence+0x534>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8005f3c:	f0c0 80f1 	bcc.w	8006122 <update_homing_sequence+0x6a6>
			// CHECK IF PROX IS ALREADY DETECTED BEFORE STARTING SEARCH
			bool prox_detected = HAL_GPIO_ReadPin(PROX_GPIO_Port, PROX_Pin);
 8005f40:	2140      	movs	r1, #64	@ 0x40
 8005f42:	481e      	ldr	r0, [pc, #120]	@ (8005fbc <update_homing_sequence+0x540>)
 8005f44:	f006 febc 	bl	800ccc0 <HAL_GPIO_ReadPin>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	bf14      	ite	ne
 8005f4e:	2301      	movne	r3, #1
 8005f50:	2300      	moveq	r3, #0
 8005f52:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			if (prox_detected) {
 8005f56:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d009      	beq.n	8005f72 <update_homing_sequence+0x4f6>
				// Already at proximity sensor - skip search and go directly to completion
				motion_delay_timer = 0;
 8005f5e:	4b14      	ldr	r3, [pc, #80]	@ (8005fb0 <update_homing_sequence+0x534>)
 8005f60:	2200      	movs	r2, #0
 8005f62:	601a      	str	r2, [r3, #0]
				homing_state = HOMING_DELAY_AFTER_PROX;
 8005f64:	4b13      	ldr	r3, [pc, #76]	@ (8005fb4 <update_homing_sequence+0x538>)
 8005f66:	220a      	movs	r2, #10
 8005f68:	701a      	strb	r2, [r3, #0]
				prox_count = 1; // Set count to indicate prox found
 8005f6a:	4b15      	ldr	r3, [pc, #84]	@ (8005fc0 <update_homing_sequence+0x544>)
 8005f6c:	2201      	movs	r2, #1
 8005f6e:	601a      	str	r2, [r3, #0]
				// Not at prox - need to search for it
				homing_state = HOMING_REV_CW_TO_PROX1;
				prox_count = 0; // Reset counter for search
			}
		}
		break;
 8005f70:	e0d7      	b.n	8006122 <update_homing_sequence+0x6a6>
				homing_state = HOMING_REV_CW_TO_PROX1;
 8005f72:	4b10      	ldr	r3, [pc, #64]	@ (8005fb4 <update_homing_sequence+0x538>)
 8005f74:	2209      	movs	r2, #9
 8005f76:	701a      	strb	r2, [r3, #0]
				prox_count = 0; // Reset counter for search
 8005f78:	4b11      	ldr	r3, [pc, #68]	@ (8005fc0 <update_homing_sequence+0x544>)
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	601a      	str	r2, [r3, #0]
		break;
 8005f7e:	e0d0      	b.n	8006122 <update_homing_sequence+0x6a6>
 8005f80:	20000480 	.word	0x20000480
 8005f84:	c37a0000 	.word	0xc37a0000
 8005f88:	200007c0 	.word	0x200007c0
 8005f8c:	20000080 	.word	0x20000080
 8005f90:	20000860 	.word	0x20000860
 8005f94:	2000073c 	.word	0x2000073c
 8005f98:	200006e0 	.word	0x200006e0
 8005f9c:	447a0000 	.word	0x447a0000
 8005fa0:	00000000 	.word	0x00000000
 8005fa4:	20000864 	.word	0x20000864
 8005fa8:	20000564 	.word	0x20000564
 8005fac:	200004c4 	.word	0x200004c4
 8005fb0:	2000055c 	.word	0x2000055c
 8005fb4:	20000566 	.word	0x20000566
 8005fb8:	20000333 	.word	0x20000333
 8005fbc:	48000400 	.word	0x48000400
 8005fc0:	20000560 	.word	0x20000560
 8005fc4:	20000572 	.word	0x20000572
 8005fc8:	20000508 	.word	0x20000508

	case HOMING_REV_CW_TO_PROX1:
		// Move revolute clockwise with velocity control until prox count = 1
		revolute_axis.vel_error = -HOMING_REV_VELOCITY
				- revolute_axis.kalman_velocity;
 8005fcc:	4b5a      	ldr	r3, [pc, #360]	@ (8006138 <update_homing_sequence+0x6bc>)
 8005fce:	edd3 7a07 	vldr	s15, [r3, #28]
 8005fd2:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 8005fd6:	ee77 7a67 	vsub.f32	s15, s14, s15
		revolute_axis.vel_error = -HOMING_REV_VELOCITY
 8005fda:	4b57      	ldr	r3, [pc, #348]	@ (8006138 <update_homing_sequence+0x6bc>)
 8005fdc:	edc3 7a06 	vstr	s15, [r3, #24]
		revolute_axis.command_pos = PWM_Satuation(
 8005fe0:	4b55      	ldr	r3, [pc, #340]	@ (8006138 <update_homing_sequence+0x6bc>)
 8005fe2:	edd3 7a06 	vldr	s15, [r3, #24]
 8005fe6:	eeb0 0a67 	vmov.f32	s0, s15
 8005fea:	4854      	ldr	r0, [pc, #336]	@ (800613c <update_homing_sequence+0x6c0>)
 8005fec:	f7fb f914 	bl	8001218 <PID_CONTROLLER_Compute>
 8005ff0:	eeb0 8a40 	vmov.f32	s16, s0
				PID_CONTROLLER_Compute(&revolute_velocity_pid,
						revolute_axis.vel_error),
				ZGX45RGG_150RPM_Constant.U_max,
 8005ff4:	4b52      	ldr	r3, [pc, #328]	@ (8006140 <update_homing_sequence+0x6c4>)
 8005ff6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		revolute_axis.command_pos = PWM_Satuation(
 8005ffa:	4610      	mov	r0, r2
 8005ffc:	4619      	mov	r1, r3
 8005ffe:	f7fa fd61 	bl	8000ac4 <__aeabi_d2iz>
 8006002:	4606      	mov	r6, r0
				-ZGX45RGG_150RPM_Constant.U_max);
 8006004:	4b4e      	ldr	r3, [pc, #312]	@ (8006140 <update_homing_sequence+0x6c4>)
 8006006:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800600a:	4690      	mov	r8, r2
 800600c:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
		revolute_axis.command_pos = PWM_Satuation(
 8006010:	4640      	mov	r0, r8
 8006012:	4649      	mov	r1, r9
 8006014:	f7fa fd56 	bl	8000ac4 <__aeabi_d2iz>
 8006018:	4603      	mov	r3, r0
 800601a:	4619      	mov	r1, r3
 800601c:	4630      	mov	r0, r6
 800601e:	eeb0 0a48 	vmov.f32	s0, s16
 8006022:	f7fb f897 	bl	8001154 <PWM_Satuation>
 8006026:	ee07 0a90 	vmov	s15, r0
 800602a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800602e:	4b42      	ldr	r3, [pc, #264]	@ (8006138 <update_homing_sequence+0x6bc>)
 8006030:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		// Add feedforward compensation during homing
		revolute_axis.ffd = REVOLUTE_MOTOR_FFD_Compute(&revolute_motor_ffd,
 8006034:	eeb8 0a00 	vmov.f32	s0, #128	@ 0xc0000000 -2.0
 8006038:	4842      	ldr	r0, [pc, #264]	@ (8006144 <update_homing_sequence+0x6c8>)
 800603a:	f7fb faad 	bl	8001598 <REVOLUTE_MOTOR_FFD_Compute>
 800603e:	eef0 7a40 	vmov.f32	s15, s0
 8006042:	4b3d      	ldr	r3, [pc, #244]	@ (8006138 <update_homing_sequence+0x6bc>)
 8006044:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
				-HOMING_REV_VELOCITY);
		revolute_axis.dfd = 0.0;
 8006048:	4b3b      	ldr	r3, [pc, #236]	@ (8006138 <update_homing_sequence+0x6bc>)
 800604a:	f04f 0200 	mov.w	r2, #0
 800604e:	62da      	str	r2, [r3, #44]	@ 0x2c

		revolute_axis.command_pos += revolute_axis.ffd;
 8006050:	4b39      	ldr	r3, [pc, #228]	@ (8006138 <update_homing_sequence+0x6bc>)
 8006052:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8006056:	4b38      	ldr	r3, [pc, #224]	@ (8006138 <update_homing_sequence+0x6bc>)
 8006058:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800605c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006060:	4b35      	ldr	r3, [pc, #212]	@ (8006138 <update_homing_sequence+0x6bc>)
 8006062:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8006066:	4b34      	ldr	r3, [pc, #208]	@ (8006138 <update_homing_sequence+0x6bc>)
 8006068:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
				ZGX45RGG_150RPM_Constant.U_max,
 800606c:	4b34      	ldr	r3, [pc, #208]	@ (8006140 <update_homing_sequence+0x6c4>)
 800606e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8006072:	4610      	mov	r0, r2
 8006074:	4619      	mov	r1, r3
 8006076:	f7fa fd25 	bl	8000ac4 <__aeabi_d2iz>
 800607a:	4606      	mov	r6, r0
				-ZGX45RGG_150RPM_Constant.U_max);
 800607c:	4b30      	ldr	r3, [pc, #192]	@ (8006140 <update_homing_sequence+0x6c4>)
 800607e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8006082:	4614      	mov	r4, r2
 8006084:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
		revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8006088:	4620      	mov	r0, r4
 800608a:	4629      	mov	r1, r5
 800608c:	f7fa fd1a 	bl	8000ac4 <__aeabi_d2iz>
 8006090:	4603      	mov	r3, r0
 8006092:	4619      	mov	r1, r3
 8006094:	4630      	mov	r0, r6
 8006096:	eeb0 0a48 	vmov.f32	s0, s16
 800609a:	f7fb f85b 	bl	8001154 <PWM_Satuation>
 800609e:	ee07 0a90 	vmov	s15, r0
 80060a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80060a6:	4b24      	ldr	r3, [pc, #144]	@ (8006138 <update_homing_sequence+0x6bc>)
 80060a8:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		if (prox_count >= 1) {
 80060ac:	4b26      	ldr	r3, [pc, #152]	@ (8006148 <update_homing_sequence+0x6cc>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d038      	beq.n	8006126 <update_homing_sequence+0x6aa>
			// Found prox sensor, stop and start delay
			prismatic_axis.command_pos = 0.0f;
 80060b4:	4b25      	ldr	r3, [pc, #148]	@ (800614c <update_homing_sequence+0x6d0>)
 80060b6:	f04f 0200 	mov.w	r2, #0
 80060ba:	625a      	str	r2, [r3, #36]	@ 0x24
			revolute_axis.command_pos = 0.0f;
 80060bc:	4b1e      	ldr	r3, [pc, #120]	@ (8006138 <update_homing_sequence+0x6bc>)
 80060be:	f04f 0200 	mov.w	r2, #0
 80060c2:	625a      	str	r2, [r3, #36]	@ 0x24
			motion_delay_timer = 0;
 80060c4:	4b22      	ldr	r3, [pc, #136]	@ (8006150 <update_homing_sequence+0x6d4>)
 80060c6:	2200      	movs	r2, #0
 80060c8:	601a      	str	r2, [r3, #0]
			homing_state = HOMING_DELAY_AFTER_PROX;
 80060ca:	4b22      	ldr	r3, [pc, #136]	@ (8006154 <update_homing_sequence+0x6d8>)
 80060cc:	220a      	movs	r2, #10
 80060ce:	701a      	strb	r2, [r3, #0]
		}
		break;
 80060d0:	e029      	b.n	8006126 <update_homing_sequence+0x6aa>

	case HOMING_DELAY_AFTER_PROX:
		// Stop motors and wait
		prismatic_axis.command_pos = 0.0f;
 80060d2:	4b1e      	ldr	r3, [pc, #120]	@ (800614c <update_homing_sequence+0x6d0>)
 80060d4:	f04f 0200 	mov.w	r2, #0
 80060d8:	625a      	str	r2, [r3, #36]	@ 0x24
		revolute_axis.command_pos = 0.0f;
 80060da:	4b17      	ldr	r3, [pc, #92]	@ (8006138 <update_homing_sequence+0x6bc>)
 80060dc:	f04f 0200 	mov.w	r2, #0
 80060e0:	625a      	str	r2, [r3, #36]	@ 0x24
		motion_delay_timer++;
 80060e2:	4b1b      	ldr	r3, [pc, #108]	@ (8006150 <update_homing_sequence+0x6d4>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	3301      	adds	r3, #1
 80060e8:	4a19      	ldr	r2, [pc, #100]	@ (8006150 <update_homing_sequence+0x6d4>)
 80060ea:	6013      	str	r3, [r2, #0]
		if (motion_delay_timer >= 500) {
 80060ec:	4b18      	ldr	r3, [pc, #96]	@ (8006150 <update_homing_sequence+0x6d4>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80060f4:	d319      	bcc.n	800612a <update_homing_sequence+0x6ae>
			homing_state = HOMING_COMPLETE;
 80060f6:	4b17      	ldr	r3, [pc, #92]	@ (8006154 <update_homing_sequence+0x6d8>)
 80060f8:	220b      	movs	r2, #11
 80060fa:	701a      	strb	r2, [r3, #0]
		}
		break;
 80060fc:	e015      	b.n	800612a <update_homing_sequence+0x6ae>

	case HOMING_COMPLETE:
		NVIC_SystemReset();
 80060fe:	f7ff fb09 	bl	8005714 <__NVIC_SystemReset>
		return;
 8006102:	bf00      	nop
 8006104:	e012      	b.n	800612c <update_homing_sequence+0x6b0>
		break;

	case HOMING_IDLE:
	default:
		break;
 8006106:	bf00      	nop
 8006108:	e010      	b.n	800612c <update_homing_sequence+0x6b0>
		break;
 800610a:	bf00      	nop
 800610c:	e00e      	b.n	800612c <update_homing_sequence+0x6b0>
		break;
 800610e:	bf00      	nop
 8006110:	e00c      	b.n	800612c <update_homing_sequence+0x6b0>
		break;
 8006112:	bf00      	nop
 8006114:	e00a      	b.n	800612c <update_homing_sequence+0x6b0>
		break;
 8006116:	bf00      	nop
 8006118:	e008      	b.n	800612c <update_homing_sequence+0x6b0>
		break;
 800611a:	bf00      	nop
 800611c:	e006      	b.n	800612c <update_homing_sequence+0x6b0>
		break;
 800611e:	bf00      	nop
 8006120:	e004      	b.n	800612c <update_homing_sequence+0x6b0>
		break;
 8006122:	bf00      	nop
 8006124:	e002      	b.n	800612c <update_homing_sequence+0x6b0>
		break;
 8006126:	bf00      	nop
 8006128:	e000      	b.n	800612c <update_homing_sequence+0x6b0>
		break;
 800612a:	bf00      	nop
	}
}
 800612c:	372c      	adds	r7, #44	@ 0x2c
 800612e:	46bd      	mov	sp, r7
 8006130:	ecbd 8b02 	vpop	{d8}
 8006134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006138:	200004c4 	.word	0x200004c4
 800613c:	20000810 	.word	0x20000810
 8006140:	20000000 	.word	0x20000000
 8006144:	2000086c 	.word	0x2000086c
 8006148:	20000560 	.word	0x20000560
 800614c:	20000480 	.word	0x20000480
 8006150:	2000055c 	.word	0x2000055c
 8006154:	20000566 	.word	0x20000566

08006158 <normalize_angle>:

float normalize_angle(float angle_rad) {
 8006158:	b580      	push	{r7, lr}
 800615a:	b084      	sub	sp, #16
 800615c:	af00      	add	r7, sp, #0
 800615e:	ed87 0a01 	vstr	s0, [r7, #4]
	float result = fmodf(angle_rad, 2.0f * PI);
 8006162:	eddf 0a0f 	vldr	s1, [pc, #60]	@ 80061a0 <normalize_angle+0x48>
 8006166:	ed97 0a01 	vldr	s0, [r7, #4]
 800616a:	f00c fcd9 	bl	8012b20 <fmodf>
 800616e:	ed87 0a03 	vstr	s0, [r7, #12]
	if (result < 0.0f) {
 8006172:	edd7 7a03 	vldr	s15, [r7, #12]
 8006176:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800617a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800617e:	d507      	bpl.n	8006190 <normalize_angle+0x38>
		result += 2.0f * PI;
 8006180:	edd7 7a03 	vldr	s15, [r7, #12]
 8006184:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 80061a0 <normalize_angle+0x48>
 8006188:	ee77 7a87 	vadd.f32	s15, s15, s14
 800618c:	edc7 7a03 	vstr	s15, [r7, #12]
	}
	return result;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	ee07 3a90 	vmov	s15, r3
}
 8006196:	eeb0 0a67 	vmov.f32	s0, s15
 800619a:	3710      	adds	r7, #16
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}
 80061a0:	40c90fdb 	.word	0x40c90fdb

080061a4 <calculate_movement_deg>:

float calculate_movement_deg(float current_deg, float target_deg) {
 80061a4:	b480      	push	{r7}
 80061a6:	b085      	sub	sp, #20
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	ed87 0a01 	vstr	s0, [r7, #4]
 80061ae:	edc7 0a00 	vstr	s1, [r7]
	float movement = 0.0f;
 80061b2:	f04f 0300 	mov.w	r3, #0
 80061b6:	60fb      	str	r3, [r7, #12]

	// If both angles are on the same side of 180°
	if ((current_deg < 180.0f && target_deg < 180.0f)
 80061b8:	edd7 7a01 	vldr	s15, [r7, #4]
 80061bc:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8006320 <calculate_movement_deg+0x17c>
 80061c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80061c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061c8:	d508      	bpl.n	80061dc <calculate_movement_deg+0x38>
 80061ca:	edd7 7a00 	vldr	s15, [r7]
 80061ce:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 8006320 <calculate_movement_deg+0x17c>
 80061d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80061d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061da:	d411      	bmi.n	8006200 <calculate_movement_deg+0x5c>
			|| (current_deg >= 180.0f && target_deg >= 180.0f)) {
 80061dc:	edd7 7a01 	vldr	s15, [r7, #4]
 80061e0:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 8006320 <calculate_movement_deg+0x17c>
 80061e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80061e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061ec:	db33      	blt.n	8006256 <calculate_movement_deg+0xb2>
 80061ee:	edd7 7a00 	vldr	s15, [r7]
 80061f2:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8006320 <calculate_movement_deg+0x17c>
 80061f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80061fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061fe:	db2a      	blt.n	8006256 <calculate_movement_deg+0xb2>
		// Simple case - take shortest path
		movement = target_deg - current_deg;
 8006200:	ed97 7a00 	vldr	s14, [r7]
 8006204:	edd7 7a01 	vldr	s15, [r7, #4]
 8006208:	ee77 7a67 	vsub.f32	s15, s14, s15
 800620c:	edc7 7a03 	vstr	s15, [r7, #12]

		// Ensure shortest path
		if (movement > 180.0f)
 8006210:	edd7 7a03 	vldr	s15, [r7, #12]
 8006214:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8006320 <calculate_movement_deg+0x17c>
 8006218:	eef4 7ac7 	vcmpe.f32	s15, s14
 800621c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006220:	dd07      	ble.n	8006232 <calculate_movement_deg+0x8e>
			movement -= 360.0f;
 8006222:	edd7 7a03 	vldr	s15, [r7, #12]
 8006226:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8006324 <calculate_movement_deg+0x180>
 800622a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800622e:	edc7 7a03 	vstr	s15, [r7, #12]
		if (movement < -180.0f)
 8006232:	edd7 7a03 	vldr	s15, [r7, #12]
 8006236:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 8006328 <calculate_movement_deg+0x184>
 800623a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800623e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006242:	d562      	bpl.n	800630a <calculate_movement_deg+0x166>
			movement += 360.0f;
 8006244:	edd7 7a03 	vldr	s15, [r7, #12]
 8006248:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8006324 <calculate_movement_deg+0x180>
 800624c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006250:	edc7 7a03 	vstr	s15, [r7, #12]
		if (movement < -180.0f)
 8006254:	e059      	b.n	800630a <calculate_movement_deg+0x166>
	}
	// If we need to cross the 180° boundary
	else {
		// If we need to cross the 180° boundary
		if (current_deg < 180.0f) {
 8006256:	edd7 7a01 	vldr	s15, [r7, #4]
 800625a:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8006320 <calculate_movement_deg+0x17c>
 800625e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006266:	d52a      	bpl.n	80062be <calculate_movement_deg+0x11a>
			// Current < 180, target > 180
			// Go counterclockwise through 0°
			if (current_deg < target_deg - 180.0f) {
 8006268:	edd7 7a00 	vldr	s15, [r7]
 800626c:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8006320 <calculate_movement_deg+0x17c>
 8006270:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006274:	ed97 7a01 	vldr	s14, [r7, #4]
 8006278:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800627c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006280:	d50e      	bpl.n	80062a0 <calculate_movement_deg+0xfc>
				movement = -(current_deg + (360.0f - target_deg)); // Negative = clockwise
 8006282:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8006324 <calculate_movement_deg+0x180>
 8006286:	edd7 7a00 	vldr	s15, [r7]
 800628a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800628e:	edd7 7a01 	vldr	s15, [r7, #4]
 8006292:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006296:	eef1 7a67 	vneg.f32	s15, s15
 800629a:	edc7 7a03 	vstr	s15, [r7, #12]
 800629e:	e034      	b.n	800630a <calculate_movement_deg+0x166>
			} else {
				movement = -(current_deg - target_deg + 360.0f); // Negative = clockwise
 80062a0:	ed97 7a01 	vldr	s14, [r7, #4]
 80062a4:	edd7 7a00 	vldr	s15, [r7]
 80062a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80062ac:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8006324 <calculate_movement_deg+0x180>
 80062b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80062b4:	eef1 7a67 	vneg.f32	s15, s15
 80062b8:	edc7 7a03 	vstr	s15, [r7, #12]
 80062bc:	e025      	b.n	800630a <calculate_movement_deg+0x166>
			}
		} else {
			// Current > 180, target < 180
			// Go clockwise through 0°
			if (target_deg < current_deg - 180.0f) {
 80062be:	edd7 7a01 	vldr	s15, [r7, #4]
 80062c2:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8006320 <calculate_movement_deg+0x17c>
 80062c6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80062ca:	ed97 7a00 	vldr	s14, [r7]
 80062ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80062d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062d6:	d50c      	bpl.n	80062f2 <calculate_movement_deg+0x14e>
				movement = 360.0f - current_deg + target_deg; // Positive = counterclockwise
 80062d8:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8006324 <calculate_movement_deg+0x180>
 80062dc:	edd7 7a01 	vldr	s15, [r7, #4]
 80062e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80062e4:	ed97 7a00 	vldr	s14, [r7]
 80062e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80062ec:	edc7 7a03 	vstr	s15, [r7, #12]
 80062f0:	e00b      	b.n	800630a <calculate_movement_deg+0x166>
			} else {
				movement = target_deg - current_deg + 360.0f; // Positive = counterclockwise
 80062f2:	ed97 7a00 	vldr	s14, [r7]
 80062f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80062fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80062fe:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8006324 <calculate_movement_deg+0x180>
 8006302:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006306:	edc7 7a03 	vstr	s15, [r7, #12]
			}
		}
	}

	return movement;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	ee07 3a90 	vmov	s15, r3
}
 8006310:	eeb0 0a67 	vmov.f32	s0, s15
 8006314:	3714      	adds	r7, #20
 8006316:	46bd      	mov	sp, r7
 8006318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631c:	4770      	bx	lr
 800631e:	bf00      	nop
 8006320:	43340000 	.word	0x43340000
 8006324:	43b40000 	.word	0x43b40000
 8006328:	c3340000 	.word	0xc3340000

0800632c <start_combined_trajectory>:

void start_combined_trajectory(float prismatic_target_mm,
		float revolute_target_deg) {
 800632c:	b590      	push	{r4, r7, lr}
 800632e:	ed2d 8b02 	vpush	{d8}
 8006332:	b08f      	sub	sp, #60	@ 0x3c
 8006334:	af00      	add	r7, sp, #0
 8006336:	ed87 0a01 	vstr	s0, [r7, #4]
 800633a:	edc7 0a00 	vstr	s1, [r7]
	bool allow_during_homing = (homing_active
 800633e:	4b6d      	ldr	r3, [pc, #436]	@ (80064f4 <start_combined_trajectory+0x1c8>)
 8006340:	781b      	ldrb	r3, [r3, #0]
			&& homing_state == HOMING_REV_TO_ZERO_DEG);
 8006342:	2b00      	cmp	r3, #0
 8006344:	d005      	beq.n	8006352 <start_combined_trajectory+0x26>
 8006346:	4b6c      	ldr	r3, [pc, #432]	@ (80064f8 <start_combined_trajectory+0x1cc>)
 8006348:	781b      	ldrb	r3, [r3, #0]
 800634a:	2b07      	cmp	r3, #7
 800634c:	d101      	bne.n	8006352 <start_combined_trajectory+0x26>
 800634e:	2301      	movs	r3, #1
 8006350:	e000      	b.n	8006354 <start_combined_trajectory+0x28>
 8006352:	2300      	movs	r3, #0
	bool allow_during_homing = (homing_active
 8006354:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8006358:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800635c:	f003 0301 	and.w	r3, r3, #1
 8006360:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	if (is_emergency_active() || (homing_active && !allow_during_homing)) {
 8006364:	f001 f968 	bl	8007638 <is_emergency_active>
 8006368:	4603      	mov	r3, r0
 800636a:	2b00      	cmp	r3, #0
 800636c:	f040 81c8 	bne.w	8006700 <start_combined_trajectory+0x3d4>
 8006370:	4b60      	ldr	r3, [pc, #384]	@ (80064f4 <start_combined_trajectory+0x1c8>)
 8006372:	781b      	ldrb	r3, [r3, #0]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d007      	beq.n	8006388 <start_combined_trajectory+0x5c>
 8006378:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800637c:	f083 0301 	eor.w	r3, r3, #1
 8006380:	b2db      	uxtb	r3, r3
 8006382:	2b00      	cmp	r3, #0
 8006384:	f040 81bc 	bne.w	8006700 <start_combined_trajectory+0x3d4>
		return;
	}

	float pris_current = prismatic_encoder.mm;
 8006388:	4b5c      	ldr	r3, [pc, #368]	@ (80064fc <start_combined_trajectory+0x1d0>)
 800638a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800638c:	62bb      	str	r3, [r7, #40]	@ 0x28
	float rev_current = revolute_encoder.rads;
 800638e:	4b5c      	ldr	r3, [pc, #368]	@ (8006500 <start_combined_trajectory+0x1d4>)
 8006390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006392:	627b      	str	r3, [r7, #36]	@ 0x24

	prisEva.t = 0.0f;
 8006394:	4b5b      	ldr	r3, [pc, #364]	@ (8006504 <start_combined_trajectory+0x1d8>)
 8006396:	f04f 0200 	mov.w	r2, #0
 800639a:	60da      	str	r2, [r3, #12]
	prisEva.isFinised = false;
 800639c:	4b59      	ldr	r3, [pc, #356]	@ (8006504 <start_combined_trajectory+0x1d8>)
 800639e:	2200      	movs	r2, #0
 80063a0:	741a      	strb	r2, [r3, #16]
	revEva.t = 0.0f;
 80063a2:	4b59      	ldr	r3, [pc, #356]	@ (8006508 <start_combined_trajectory+0x1dc>)
 80063a4:	f04f 0200 	mov.w	r2, #0
 80063a8:	60da      	str	r2, [r3, #12]
	revEva.isFinised = false;
 80063aa:	4b57      	ldr	r3, [pc, #348]	@ (8006508 <start_combined_trajectory+0x1dc>)
 80063ac:	2200      	movs	r2, #0
 80063ae:	741a      	strb	r2, [r3, #16]

	prismatic_axis.initial_pos = pris_current;
 80063b0:	4a56      	ldr	r2, [pc, #344]	@ (800650c <start_combined_trajectory+0x1e0>)
 80063b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063b4:	60d3      	str	r3, [r2, #12]
	revolute_axis.initial_pos = rev_current;
 80063b6:	4a56      	ldr	r2, [pc, #344]	@ (8006510 <start_combined_trajectory+0x1e4>)
 80063b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ba:	60d3      	str	r3, [r2, #12]

	prismatic_axis.target_pos = fminf(
 80063bc:	eddf 0a55 	vldr	s1, [pc, #340]	@ 8006514 <start_combined_trajectory+0x1e8>
 80063c0:	ed97 0a01 	vldr	s0, [r7, #4]
 80063c4:	f00c fc74 	bl	8012cb0 <fmaxf>
 80063c8:	eef0 7a40 	vmov.f32	s15, s0
 80063cc:	eddf 0a52 	vldr	s1, [pc, #328]	@ 8006518 <start_combined_trajectory+0x1ec>
 80063d0:	eeb0 0a67 	vmov.f32	s0, s15
 80063d4:	f00c fc89 	bl	8012cea <fminf>
 80063d8:	eef0 7a40 	vmov.f32	s15, s0
 80063dc:	4b4b      	ldr	r3, [pc, #300]	@ (800650c <start_combined_trajectory+0x1e0>)
 80063de:	edc3 7a04 	vstr	s15, [r3, #16]
			fmaxf(prismatic_target_mm, PRISMATIC_MIN_POS), PRISMATIC_MAX_POS);

	float normalized_current = normalize_angle(rev_current);
 80063e2:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 80063e6:	f7ff feb7 	bl	8006158 <normalize_angle>
 80063ea:	ed87 0a08 	vstr	s0, [r7, #32]
	float current_deg = normalized_current * 180.0f / PI;
 80063ee:	edd7 7a08 	vldr	s15, [r7, #32]
 80063f2:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 800651c <start_combined_trajectory+0x1f0>
 80063f6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80063fa:	eddf 6a49 	vldr	s13, [pc, #292]	@ 8006520 <start_combined_trajectory+0x1f4>
 80063fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006402:	edc7 7a07 	vstr	s15, [r7, #28]
	movement_deg = calculate_movement_deg(current_deg, revolute_target_deg);
 8006406:	edd7 0a00 	vldr	s1, [r7]
 800640a:	ed97 0a07 	vldr	s0, [r7, #28]
 800640e:	f7ff fec9 	bl	80061a4 <calculate_movement_deg>
 8006412:	eef0 7a40 	vmov.f32	s15, s0
 8006416:	4b43      	ldr	r3, [pc, #268]	@ (8006524 <start_combined_trajectory+0x1f8>)
 8006418:	edc3 7a00 	vstr	s15, [r3]
	float movement_rad = movement_deg * PI / 180.0f;
 800641c:	4b41      	ldr	r3, [pc, #260]	@ (8006524 <start_combined_trajectory+0x1f8>)
 800641e:	edd3 7a00 	vldr	s15, [r3]
 8006422:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8006520 <start_combined_trajectory+0x1f4>
 8006426:	ee27 7a87 	vmul.f32	s14, s15, s14
 800642a:	eddf 6a3c 	vldr	s13, [pc, #240]	@ 800651c <start_combined_trajectory+0x1f0>
 800642e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006432:	edc7 7a06 	vstr	s15, [r7, #24]
	revolute_axis.target_pos = revolute_axis.initial_pos + movement_rad;
 8006436:	4b36      	ldr	r3, [pc, #216]	@ (8006510 <start_combined_trajectory+0x1e4>)
 8006438:	ed93 7a03 	vldr	s14, [r3, #12]
 800643c:	edd7 7a06 	vldr	s15, [r7, #24]
 8006440:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006444:	4b32      	ldr	r3, [pc, #200]	@ (8006510 <start_combined_trajectory+0x1e4>)
 8006446:	edc3 7a04 	vstr	s15, [r3, #16]

	// Check if we're in HOMING_REV_TO_ZERO_DEG mode
	bool is_homing_zero_deg = (homing_active
 800644a:	4b2a      	ldr	r3, [pc, #168]	@ (80064f4 <start_combined_trajectory+0x1c8>)
 800644c:	781b      	ldrb	r3, [r3, #0]
			&& homing_state == HOMING_REV_TO_ZERO_DEG);
 800644e:	2b00      	cmp	r3, #0
 8006450:	d005      	beq.n	800645e <start_combined_trajectory+0x132>
 8006452:	4b29      	ldr	r3, [pc, #164]	@ (80064f8 <start_combined_trajectory+0x1cc>)
 8006454:	781b      	ldrb	r3, [r3, #0]
 8006456:	2b07      	cmp	r3, #7
 8006458:	d101      	bne.n	800645e <start_combined_trajectory+0x132>
 800645a:	2301      	movs	r3, #1
 800645c:	e000      	b.n	8006460 <start_combined_trajectory+0x134>
 800645e:	2300      	movs	r3, #0
	bool is_homing_zero_deg = (homing_active
 8006460:	75fb      	strb	r3, [r7, #23]
 8006462:	7dfb      	ldrb	r3, [r7, #23]
 8006464:	f003 0301 	and.w	r3, r3, #1
 8006468:	75fb      	strb	r3, [r7, #23]

	if (is_homing_zero_deg) {
 800646a:	7dfb      	ldrb	r3, [r7, #23]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d067      	beq.n	8006540 <start_combined_trajectory+0x214>
		// HOMING_REV_TO_ZERO_DEG: Only generate revolute trajectory
		sync_motion_active = false;
 8006470:	4b2d      	ldr	r3, [pc, #180]	@ (8006528 <start_combined_trajectory+0x1fc>)
 8006472:	2200      	movs	r2, #0
 8006474:	701a      	strb	r2, [r3, #0]
		prismatic_axis.trajectory_active = false;
 8006476:	4b25      	ldr	r3, [pc, #148]	@ (800650c <start_combined_trajectory+0x1e0>)
 8006478:	2200      	movs	r2, #0
 800647a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
		prismatic_axis.position = pris_current;
 800647e:	4a23      	ldr	r2, [pc, #140]	@ (800650c <start_combined_trajectory+0x1e0>)
 8006480:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006482:	6013      	str	r3, [r2, #0]
		prismatic_axis.velocity = 0.0f;
 8006484:	4b21      	ldr	r3, [pc, #132]	@ (800650c <start_combined_trajectory+0x1e0>)
 8006486:	f04f 0200 	mov.w	r2, #0
 800648a:	605a      	str	r2, [r3, #4]

		check[4]++;
 800648c:	4b27      	ldr	r3, [pc, #156]	@ (800652c <start_combined_trajectory+0x200>)
 800648e:	691b      	ldr	r3, [r3, #16]
 8006490:	3301      	adds	r3, #1
 8006492:	4a26      	ldr	r2, [pc, #152]	@ (800652c <start_combined_trajectory+0x200>)
 8006494:	6113      	str	r3, [r2, #16]
		Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 8006496:	4b1e      	ldr	r3, [pc, #120]	@ (8006510 <start_combined_trajectory+0x1e4>)
 8006498:	ed93 8a03 	vldr	s16, [r3, #12]
 800649c:	4b1c      	ldr	r3, [pc, #112]	@ (8006510 <start_combined_trajectory+0x1e4>)
 800649e:	edd3 8a04 	vldr	s17, [r3, #16]
				revolute_axis.target_pos,
				ZGX45RGG_150RPM_Constant.traject_qd_max,
 80064a2:	4b23      	ldr	r3, [pc, #140]	@ (8006530 <start_combined_trajectory+0x204>)
 80064a4:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
		Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 80064a8:	4610      	mov	r0, r2
 80064aa:	4619      	mov	r1, r3
 80064ac:	f7fa fb52 	bl	8000b54 <__aeabi_d2f>
 80064b0:	4604      	mov	r4, r0
				ZGX45RGG_150RPM_Constant.traject_qdd_max);
 80064b2:	4b1f      	ldr	r3, [pc, #124]	@ (8006530 <start_combined_trajectory+0x204>)
 80064b4:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
		Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 80064b8:	4610      	mov	r0, r2
 80064ba:	4619      	mov	r1, r3
 80064bc:	f7fa fb4a 	bl	8000b54 <__aeabi_d2f>
 80064c0:	4603      	mov	r3, r0
 80064c2:	ee01 3a90 	vmov	s3, r3
 80064c6:	ee01 4a10 	vmov	s2, r4
 80064ca:	eef0 0a68 	vmov.f32	s1, s17
 80064ce:	eeb0 0a48 	vmov.f32	s0, s16
 80064d2:	4818      	ldr	r0, [pc, #96]	@ (8006534 <start_combined_trajectory+0x208>)
 80064d4:	f7fd ff42 	bl	800435c <Trapezoidal_Generator>

		revolute_axis.trajectory_active = false;
 80064d8:	4b0d      	ldr	r3, [pc, #52]	@ (8006510 <start_combined_trajectory+0x1e4>)
 80064da:	2200      	movs	r2, #0
 80064dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
		plotter_pen_up();
 80064e0:	f003 f8ae 	bl	8009640 <plotter_pen_up>
		motion_delay_timer = 0;
 80064e4:	4b14      	ldr	r3, [pc, #80]	@ (8006538 <start_combined_trajectory+0x20c>)
 80064e6:	2200      	movs	r2, #0
 80064e8:	601a      	str	r2, [r3, #0]
		motion_sequence_state = MOTION_PEN_UP_DELAY;
 80064ea:	4b14      	ldr	r3, [pc, #80]	@ (800653c <start_combined_trajectory+0x210>)
 80064ec:	2201      	movs	r2, #1
 80064ee:	701a      	strb	r2, [r3, #0]
 80064f0:	e107      	b.n	8006702 <start_combined_trajectory+0x3d6>
 80064f2:	bf00      	nop
 80064f4:	20000567 	.word	0x20000567
 80064f8:	20000566 	.word	0x20000566
 80064fc:	200006e0 	.word	0x200006e0
 8006500:	2000073c 	.word	0x2000073c
 8006504:	20000534 	.word	0x20000534
 8006508:	20000548 	.word	0x20000548
 800650c:	20000480 	.word	0x20000480
 8006510:	200004c4 	.word	0x200004c4
 8006514:	00000000 	.word	0x00000000
 8006518:	43960000 	.word	0x43960000
 800651c:	43340000 	.word	0x43340000
 8006520:	40490fdb 	.word	0x40490fdb
 8006524:	2000057c 	.word	0x2000057c
 8006528:	20000620 	.word	0x20000620
 800652c:	200005e8 	.word	0x200005e8
 8006530:	20000000 	.word	0x20000000
 8006534:	20000520 	.word	0x20000520
 8006538:	2000055c 	.word	0x2000055c
 800653c:	20000508 	.word	0x20000508
	} else {
		// NORMAL TRAJECTORY: Use time-synchronized motion
		check[5]++;
 8006540:	4b72      	ldr	r3, [pc, #456]	@ (800670c <start_combined_trajectory+0x3e0>)
 8006542:	695b      	ldr	r3, [r3, #20]
 8006544:	3301      	adds	r3, #1
 8006546:	4a71      	ldr	r2, [pc, #452]	@ (800670c <start_combined_trajectory+0x3e0>)
 8006548:	6153      	str	r3, [r2, #20]

		// Calculate distances
		float pris_distance = fabsf(
				prismatic_axis.target_pos - prismatic_axis.initial_pos);
 800654a:	4b71      	ldr	r3, [pc, #452]	@ (8006710 <start_combined_trajectory+0x3e4>)
 800654c:	ed93 7a04 	vldr	s14, [r3, #16]
 8006550:	4b6f      	ldr	r3, [pc, #444]	@ (8006710 <start_combined_trajectory+0x3e4>)
 8006552:	edd3 7a03 	vldr	s15, [r3, #12]
 8006556:	ee77 7a67 	vsub.f32	s15, s14, s15
		float pris_distance = fabsf(
 800655a:	eef0 7ae7 	vabs.f32	s15, s15
 800655e:	edc7 7a04 	vstr	s15, [r7, #16]
		float rev_distance = fabsf(
				revolute_axis.target_pos - revolute_axis.initial_pos);
 8006562:	4b6c      	ldr	r3, [pc, #432]	@ (8006714 <start_combined_trajectory+0x3e8>)
 8006564:	ed93 7a04 	vldr	s14, [r3, #16]
 8006568:	4b6a      	ldr	r3, [pc, #424]	@ (8006714 <start_combined_trajectory+0x3e8>)
 800656a:	edd3 7a03 	vldr	s15, [r3, #12]
 800656e:	ee77 7a67 	vsub.f32	s15, s14, s15
		float rev_distance = fabsf(
 8006572:	eef0 7ae7 	vabs.f32	s15, s15
 8006576:	edc7 7a03 	vstr	s15, [r7, #12]

		// Calculate time needed for each axis at their max speeds
		float pris_time_needed = 0.0f;
 800657a:	f04f 0300 	mov.w	r3, #0
 800657e:	637b      	str	r3, [r7, #52]	@ 0x34
		float rev_time_needed = 0.0f;
 8006580:	f04f 0300 	mov.w	r3, #0
 8006584:	633b      	str	r3, [r7, #48]	@ 0x30

		if (pris_distance > 0.1f) {
 8006586:	edd7 7a04 	vldr	s15, [r7, #16]
 800658a:	ed9f 7a63 	vldr	s14, [pc, #396]	@ 8006718 <start_combined_trajectory+0x3ec>
 800658e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006596:	dd18      	ble.n	80065ca <start_combined_trajectory+0x29e>
			// Time = distance / max_velocity, factor in acceleration/deceleration
			pris_time_needed = (pris_distance
					/ ZGX45RGG_400RPM_Constant.traject_sd_max) * 2.5f;
 8006598:	6938      	ldr	r0, [r7, #16]
 800659a:	f7f9 ffa1 	bl	80004e0 <__aeabi_f2d>
 800659e:	4b5f      	ldr	r3, [pc, #380]	@ (800671c <start_combined_trajectory+0x3f0>)
 80065a0:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
 80065a4:	f7fa f91e 	bl	80007e4 <__aeabi_ddiv>
 80065a8:	4602      	mov	r2, r0
 80065aa:	460b      	mov	r3, r1
 80065ac:	4610      	mov	r0, r2
 80065ae:	4619      	mov	r1, r3
 80065b0:	f04f 0200 	mov.w	r2, #0
 80065b4:	4b5a      	ldr	r3, [pc, #360]	@ (8006720 <start_combined_trajectory+0x3f4>)
 80065b6:	f7f9 ffeb 	bl	8000590 <__aeabi_dmul>
 80065ba:	4602      	mov	r2, r0
 80065bc:	460b      	mov	r3, r1
			pris_time_needed = (pris_distance
 80065be:	4610      	mov	r0, r2
 80065c0:	4619      	mov	r1, r3
 80065c2:	f7fa fac7 	bl	8000b54 <__aeabi_d2f>
 80065c6:	4603      	mov	r3, r0
 80065c8:	637b      	str	r3, [r7, #52]	@ 0x34
		}

		if (rev_distance > 0.01f) {
 80065ca:	edd7 7a03 	vldr	s15, [r7, #12]
 80065ce:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8006724 <start_combined_trajectory+0x3f8>
 80065d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80065d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065da:	dd18      	ble.n	800660e <start_combined_trajectory+0x2e2>
			rev_time_needed = (rev_distance
					/ ZGX45RGG_150RPM_Constant.traject_qd_max) * 2.5f;
 80065dc:	68f8      	ldr	r0, [r7, #12]
 80065de:	f7f9 ff7f 	bl	80004e0 <__aeabi_f2d>
 80065e2:	4b51      	ldr	r3, [pc, #324]	@ (8006728 <start_combined_trajectory+0x3fc>)
 80065e4:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 80065e8:	f7fa f8fc 	bl	80007e4 <__aeabi_ddiv>
 80065ec:	4602      	mov	r2, r0
 80065ee:	460b      	mov	r3, r1
 80065f0:	4610      	mov	r0, r2
 80065f2:	4619      	mov	r1, r3
 80065f4:	f04f 0200 	mov.w	r2, #0
 80065f8:	4b49      	ldr	r3, [pc, #292]	@ (8006720 <start_combined_trajectory+0x3f4>)
 80065fa:	f7f9 ffc9 	bl	8000590 <__aeabi_dmul>
 80065fe:	4602      	mov	r2, r0
 8006600:	460b      	mov	r3, r1
			rev_time_needed = (rev_distance
 8006602:	4610      	mov	r0, r2
 8006604:	4619      	mov	r1, r3
 8006606:	f7fa faa5 	bl	8000b54 <__aeabi_d2f>
 800660a:	4603      	mov	r3, r0
 800660c:	633b      	str	r3, [r7, #48]	@ 0x30
		}

		// Use the longer time, with minimum time
		sync_total_time = fmaxf(pris_time_needed, rev_time_needed);
 800660e:	edd7 0a0c 	vldr	s1, [r7, #48]	@ 0x30
 8006612:	ed97 0a0d 	vldr	s0, [r7, #52]	@ 0x34
 8006616:	f00c fb4b 	bl	8012cb0 <fmaxf>
 800661a:	eef0 7a40 	vmov.f32	s15, s0
 800661e:	4b43      	ldr	r3, [pc, #268]	@ (800672c <start_combined_trajectory+0x400>)
 8006620:	edc3 7a00 	vstr	s15, [r3]
		if (sync_total_time < 1.0f)
 8006624:	4b41      	ldr	r3, [pc, #260]	@ (800672c <start_combined_trajectory+0x400>)
 8006626:	edd3 7a00 	vldr	s15, [r3]
 800662a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800662e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006632:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006636:	d503      	bpl.n	8006640 <start_combined_trajectory+0x314>
			sync_total_time = 1.0f; // Minimum 1 second
 8006638:	4b3c      	ldr	r3, [pc, #240]	@ (800672c <start_combined_trajectory+0x400>)
 800663a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800663e:	601a      	str	r2, [r3, #0]

		// Generate individual trajectories (we'll interpolate based on sync_total_time)
		Trapezoidal_Generator(&prisGen, prismatic_axis.initial_pos,
 8006640:	4b33      	ldr	r3, [pc, #204]	@ (8006710 <start_combined_trajectory+0x3e4>)
 8006642:	ed93 8a03 	vldr	s16, [r3, #12]
 8006646:	4b32      	ldr	r3, [pc, #200]	@ (8006710 <start_combined_trajectory+0x3e4>)
 8006648:	edd3 8a04 	vldr	s17, [r3, #16]
				prismatic_axis.target_pos,
				ZGX45RGG_400RPM_Constant.traject_sd_max,
 800664c:	4b33      	ldr	r3, [pc, #204]	@ (800671c <start_combined_trajectory+0x3f0>)
 800664e:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
		Trapezoidal_Generator(&prisGen, prismatic_axis.initial_pos,
 8006652:	4610      	mov	r0, r2
 8006654:	4619      	mov	r1, r3
 8006656:	f7fa fa7d 	bl	8000b54 <__aeabi_d2f>
 800665a:	4604      	mov	r4, r0
				ZGX45RGG_400RPM_Constant.traject_sdd_max);
 800665c:	4b2f      	ldr	r3, [pc, #188]	@ (800671c <start_combined_trajectory+0x3f0>)
 800665e:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
		Trapezoidal_Generator(&prisGen, prismatic_axis.initial_pos,
 8006662:	4610      	mov	r0, r2
 8006664:	4619      	mov	r1, r3
 8006666:	f7fa fa75 	bl	8000b54 <__aeabi_d2f>
 800666a:	4603      	mov	r3, r0
 800666c:	ee01 3a90 	vmov	s3, r3
 8006670:	ee01 4a10 	vmov	s2, r4
 8006674:	eef0 0a68 	vmov.f32	s1, s17
 8006678:	eeb0 0a48 	vmov.f32	s0, s16
 800667c:	482c      	ldr	r0, [pc, #176]	@ (8006730 <start_combined_trajectory+0x404>)
 800667e:	f7fd fe6d 	bl	800435c <Trapezoidal_Generator>

		Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 8006682:	4b24      	ldr	r3, [pc, #144]	@ (8006714 <start_combined_trajectory+0x3e8>)
 8006684:	ed93 8a03 	vldr	s16, [r3, #12]
 8006688:	4b22      	ldr	r3, [pc, #136]	@ (8006714 <start_combined_trajectory+0x3e8>)
 800668a:	edd3 8a04 	vldr	s17, [r3, #16]
				revolute_axis.target_pos,
				ZGX45RGG_150RPM_Constant.traject_qd_max,
 800668e:	4b26      	ldr	r3, [pc, #152]	@ (8006728 <start_combined_trajectory+0x3fc>)
 8006690:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
		Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 8006694:	4610      	mov	r0, r2
 8006696:	4619      	mov	r1, r3
 8006698:	f7fa fa5c 	bl	8000b54 <__aeabi_d2f>
 800669c:	4604      	mov	r4, r0
				ZGX45RGG_150RPM_Constant.traject_qdd_max);
 800669e:	4b22      	ldr	r3, [pc, #136]	@ (8006728 <start_combined_trajectory+0x3fc>)
 80066a0:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
		Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 80066a4:	4610      	mov	r0, r2
 80066a6:	4619      	mov	r1, r3
 80066a8:	f7fa fa54 	bl	8000b54 <__aeabi_d2f>
 80066ac:	4603      	mov	r3, r0
 80066ae:	ee01 3a90 	vmov	s3, r3
 80066b2:	ee01 4a10 	vmov	s2, r4
 80066b6:	eef0 0a68 	vmov.f32	s1, s17
 80066ba:	eeb0 0a48 	vmov.f32	s0, s16
 80066be:	481d      	ldr	r0, [pc, #116]	@ (8006734 <start_combined_trajectory+0x408>)
 80066c0:	f7fd fe4c 	bl	800435c <Trapezoidal_Generator>

		// Initialize synchronized motion
		sync_motion_active = true;
 80066c4:	4b1c      	ldr	r3, [pc, #112]	@ (8006738 <start_combined_trajectory+0x40c>)
 80066c6:	2201      	movs	r2, #1
 80066c8:	701a      	strb	r2, [r3, #0]
		sync_start_time = 0.0f;
 80066ca:	4b1c      	ldr	r3, [pc, #112]	@ (800673c <start_combined_trajectory+0x410>)
 80066cc:	f04f 0200 	mov.w	r2, #0
 80066d0:	601a      	str	r2, [r3, #0]
		prismatic_axis.trajectory_active = false;
 80066d2:	4b0f      	ldr	r3, [pc, #60]	@ (8006710 <start_combined_trajectory+0x3e4>)
 80066d4:	2200      	movs	r2, #0
 80066d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
		revolute_axis.trajectory_active = false;
 80066da:	4b0e      	ldr	r3, [pc, #56]	@ (8006714 <start_combined_trajectory+0x3e8>)
 80066dc:	2200      	movs	r2, #0
 80066de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

		plotter_pen_up();
 80066e2:	f002 ffad 	bl	8009640 <plotter_pen_up>
		motion_delay_timer = 0;
 80066e6:	4b16      	ldr	r3, [pc, #88]	@ (8006740 <start_combined_trajectory+0x414>)
 80066e8:	2200      	movs	r2, #0
 80066ea:	601a      	str	r2, [r3, #0]
		motion_sequence_state = MOTION_PEN_UP_DELAY;
 80066ec:	4b15      	ldr	r3, [pc, #84]	@ (8006744 <start_combined_trajectory+0x418>)
 80066ee:	2201      	movs	r2, #1
 80066f0:	701a      	strb	r2, [r3, #0]

		//modbus reset state
		registerFrame[BaseSystem_Status].U16 = 0;
 80066f2:	4b15      	ldr	r3, [pc, #84]	@ (8006748 <start_combined_trajectory+0x41c>)
 80066f4:	2200      	movs	r2, #0
 80066f6:	805a      	strh	r2, [r3, #2]
		registerFrame[R_Theta_Status].U16 = 0;
 80066f8:	4b13      	ldr	r3, [pc, #76]	@ (8006748 <start_combined_trajectory+0x41c>)
 80066fa:	2200      	movs	r2, #0
 80066fc:	841a      	strh	r2, [r3, #32]
 80066fe:	e000      	b.n	8006702 <start_combined_trajectory+0x3d6>
		return;
 8006700:	bf00      	nop
	}
}
 8006702:	373c      	adds	r7, #60	@ 0x3c
 8006704:	46bd      	mov	sp, r7
 8006706:	ecbd 8b02 	vpop	{d8}
 800670a:	bd90      	pop	{r4, r7, pc}
 800670c:	200005e8 	.word	0x200005e8
 8006710:	20000480 	.word	0x20000480
 8006714:	200004c4 	.word	0x200004c4
 8006718:	3dcccccd 	.word	0x3dcccccd
 800671c:	20000080 	.word	0x20000080
 8006720:	40040000 	.word	0x40040000
 8006724:	3c23d70a 	.word	0x3c23d70a
 8006728:	20000000 	.word	0x20000000
 800672c:	2000061c 	.word	0x2000061c
 8006730:	2000050c 	.word	0x2000050c
 8006734:	20000520 	.word	0x20000520
 8006738:	20000620 	.word	0x20000620
 800673c:	20000618 	.word	0x20000618
 8006740:	2000055c 	.word	0x2000055c
 8006744:	20000508 	.word	0x20000508
 8006748:	200012e4 	.word	0x200012e4

0800674c <update_position_control>:
void update_position_control(void) {
 800674c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006750:	ed2d 8b02 	vpush	{d8}
 8006754:	b083      	sub	sp, #12
 8006756:	af00      	add	r7, sp, #0
	prismatic_axis.pos_error = prismatic_axis.position - prismatic_encoder.mm;
 8006758:	4b50      	ldr	r3, [pc, #320]	@ (800689c <update_position_control+0x150>)
 800675a:	ed93 7a00 	vldr	s14, [r3]
 800675e:	4b50      	ldr	r3, [pc, #320]	@ (80068a0 <update_position_control+0x154>)
 8006760:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8006764:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006768:	4b4c      	ldr	r3, [pc, #304]	@ (800689c <update_position_control+0x150>)
 800676a:	edc3 7a05 	vstr	s15, [r3, #20]
	prismatic_axis.command_vel = PWM_Satuation(
 800676e:	4b4b      	ldr	r3, [pc, #300]	@ (800689c <update_position_control+0x150>)
 8006770:	edd3 7a05 	vldr	s15, [r3, #20]
 8006774:	eeb0 0a67 	vmov.f32	s0, s15
 8006778:	484a      	ldr	r0, [pc, #296]	@ (80068a4 <update_position_control+0x158>)
 800677a:	f7fa fd4d 	bl	8001218 <PID_CONTROLLER_Compute>
 800677e:	eeb0 8a40 	vmov.f32	s16, s0
			PID_CONTROLLER_Compute(&prismatic_position_pid,
					prismatic_axis.pos_error), ZGX45RGG_400RPM_Constant.sd_max,
 8006782:	4b49      	ldr	r3, [pc, #292]	@ (80068a8 <update_position_control+0x15c>)
 8006784:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
	prismatic_axis.command_vel = PWM_Satuation(
 8006788:	4610      	mov	r0, r2
 800678a:	4619      	mov	r1, r3
 800678c:	f7fa f99a 	bl	8000ac4 <__aeabi_d2iz>
 8006790:	4606      	mov	r6, r0
			-ZGX45RGG_400RPM_Constant.sd_max);
 8006792:	4b45      	ldr	r3, [pc, #276]	@ (80068a8 <update_position_control+0x15c>)
 8006794:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8006798:	4690      	mov	r8, r2
 800679a:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
	prismatic_axis.command_vel = PWM_Satuation(
 800679e:	4640      	mov	r0, r8
 80067a0:	4649      	mov	r1, r9
 80067a2:	f7fa f98f 	bl	8000ac4 <__aeabi_d2iz>
 80067a6:	4603      	mov	r3, r0
 80067a8:	4619      	mov	r1, r3
 80067aa:	4630      	mov	r0, r6
 80067ac:	eeb0 0a48 	vmov.f32	s0, s16
 80067b0:	f7fa fcd0 	bl	8001154 <PWM_Satuation>
 80067b4:	ee07 0a90 	vmov	s15, r0
 80067b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80067bc:	4b37      	ldr	r3, [pc, #220]	@ (800689c <update_position_control+0x150>)
 80067be:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

	float normalized_position = normalize_angle(revolute_encoder.rads);
 80067c2:	4b3a      	ldr	r3, [pc, #232]	@ (80068ac <update_position_control+0x160>)
 80067c4:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80067c8:	eeb0 0a67 	vmov.f32	s0, s15
 80067cc:	f7ff fcc4 	bl	8006158 <normalize_angle>
 80067d0:	ed87 0a01 	vstr	s0, [r7, #4]
	revolute_axis.pos_error = revolute_axis.position - normalized_position;
 80067d4:	4b36      	ldr	r3, [pc, #216]	@ (80068b0 <update_position_control+0x164>)
 80067d6:	ed93 7a00 	vldr	s14, [r3]
 80067da:	edd7 7a01 	vldr	s15, [r7, #4]
 80067de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80067e2:	4b33      	ldr	r3, [pc, #204]	@ (80068b0 <update_position_control+0x164>)
 80067e4:	edc3 7a05 	vstr	s15, [r3, #20]

	if (revolute_axis.pos_error > PI)
 80067e8:	4b31      	ldr	r3, [pc, #196]	@ (80068b0 <update_position_control+0x164>)
 80067ea:	edd3 7a05 	vldr	s15, [r3, #20]
 80067ee:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80068b4 <update_position_control+0x168>
 80067f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80067f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067fa:	dd09      	ble.n	8006810 <update_position_control+0xc4>
		revolute_axis.pos_error -= 2.0f * PI;
 80067fc:	4b2c      	ldr	r3, [pc, #176]	@ (80068b0 <update_position_control+0x164>)
 80067fe:	edd3 7a05 	vldr	s15, [r3, #20]
 8006802:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 80068b8 <update_position_control+0x16c>
 8006806:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800680a:	4b29      	ldr	r3, [pc, #164]	@ (80068b0 <update_position_control+0x164>)
 800680c:	edc3 7a05 	vstr	s15, [r3, #20]
	if (revolute_axis.pos_error < -PI)
 8006810:	4b27      	ldr	r3, [pc, #156]	@ (80068b0 <update_position_control+0x164>)
 8006812:	edd3 7a05 	vldr	s15, [r3, #20]
 8006816:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 80068bc <update_position_control+0x170>
 800681a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800681e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006822:	d509      	bpl.n	8006838 <update_position_control+0xec>
		revolute_axis.pos_error += 2.0f * PI;
 8006824:	4b22      	ldr	r3, [pc, #136]	@ (80068b0 <update_position_control+0x164>)
 8006826:	edd3 7a05 	vldr	s15, [r3, #20]
 800682a:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 80068b8 <update_position_control+0x16c>
 800682e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006832:	4b1f      	ldr	r3, [pc, #124]	@ (80068b0 <update_position_control+0x164>)
 8006834:	edc3 7a05 	vstr	s15, [r3, #20]

	revolute_axis.command_vel = PWM_Satuation(
 8006838:	4b1d      	ldr	r3, [pc, #116]	@ (80068b0 <update_position_control+0x164>)
 800683a:	edd3 7a05 	vldr	s15, [r3, #20]
 800683e:	eeb0 0a67 	vmov.f32	s0, s15
 8006842:	481f      	ldr	r0, [pc, #124]	@ (80068c0 <update_position_control+0x174>)
 8006844:	f7fa fce8 	bl	8001218 <PID_CONTROLLER_Compute>
 8006848:	eeb0 8a40 	vmov.f32	s16, s0
			PID_CONTROLLER_Compute(&revolute_position_pid,
					revolute_axis.pos_error), ZGX45RGG_150RPM_Constant.qd_max,
 800684c:	4b1d      	ldr	r3, [pc, #116]	@ (80068c4 <update_position_control+0x178>)
 800684e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	revolute_axis.command_vel = PWM_Satuation(
 8006852:	4610      	mov	r0, r2
 8006854:	4619      	mov	r1, r3
 8006856:	f7fa f935 	bl	8000ac4 <__aeabi_d2iz>
 800685a:	4606      	mov	r6, r0
			-ZGX45RGG_150RPM_Constant.qd_max);
 800685c:	4b19      	ldr	r3, [pc, #100]	@ (80068c4 <update_position_control+0x178>)
 800685e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8006862:	4614      	mov	r4, r2
 8006864:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
	revolute_axis.command_vel = PWM_Satuation(
 8006868:	4620      	mov	r0, r4
 800686a:	4629      	mov	r1, r5
 800686c:	f7fa f92a 	bl	8000ac4 <__aeabi_d2iz>
 8006870:	4603      	mov	r3, r0
 8006872:	4619      	mov	r1, r3
 8006874:	4630      	mov	r0, r6
 8006876:	eeb0 0a48 	vmov.f32	s0, s16
 800687a:	f7fa fc6b 	bl	8001154 <PWM_Satuation>
 800687e:	ee07 0a90 	vmov	s15, r0
 8006882:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006886:	4b0a      	ldr	r3, [pc, #40]	@ (80068b0 <update_position_control+0x164>)
 8006888:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
}
 800688c:	bf00      	nop
 800688e:	370c      	adds	r7, #12
 8006890:	46bd      	mov	sp, r7
 8006892:	ecbd 8b02 	vpop	{d8}
 8006896:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800689a:	bf00      	nop
 800689c:	20000480 	.word	0x20000480
 80068a0:	200006e0 	.word	0x200006e0
 80068a4:	20000798 	.word	0x20000798
 80068a8:	20000080 	.word	0x20000080
 80068ac:	2000073c 	.word	0x2000073c
 80068b0:	200004c4 	.word	0x200004c4
 80068b4:	40490fdb 	.word	0x40490fdb
 80068b8:	40c90fdb 	.word	0x40c90fdb
 80068bc:	c0490fdb 	.word	0xc0490fdb
 80068c0:	200007e8 	.word	0x200007e8
 80068c4:	20000000 	.word	0x20000000

080068c8 <update_velocity_control>:

void update_velocity_control(void) {
 80068c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068cc:	ed2d 8b02 	vpush	{d8}
 80068d0:	b083      	sub	sp, #12
 80068d2:	af00      	add	r7, sp, #0

	if (prismatic_axis.trajectory_active) {
 80068d4:	4b96      	ldr	r3, [pc, #600]	@ (8006b30 <update_velocity_control+0x268>)
 80068d6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d010      	beq.n	8006900 <update_velocity_control+0x38>
		prismatic_axis.vel_error = prismatic_axis.command_vel
 80068de:	4b94      	ldr	r3, [pc, #592]	@ (8006b30 <update_velocity_control+0x268>)
 80068e0:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
				+ prismatic_axis.velocity - prismatic_axis.kalman_velocity;
 80068e4:	4b92      	ldr	r3, [pc, #584]	@ (8006b30 <update_velocity_control+0x268>)
 80068e6:	edd3 7a01 	vldr	s15, [r3, #4]
 80068ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 80068ee:	4b90      	ldr	r3, [pc, #576]	@ (8006b30 <update_velocity_control+0x268>)
 80068f0:	edd3 7a07 	vldr	s15, [r3, #28]
 80068f4:	ee77 7a67 	vsub.f32	s15, s14, s15
		prismatic_axis.vel_error = prismatic_axis.command_vel
 80068f8:	4b8d      	ldr	r3, [pc, #564]	@ (8006b30 <update_velocity_control+0x268>)
 80068fa:	edc3 7a06 	vstr	s15, [r3, #24]
 80068fe:	e00a      	b.n	8006916 <update_velocity_control+0x4e>
	} else {
		prismatic_axis.vel_error = prismatic_axis.command_vel
 8006900:	4b8b      	ldr	r3, [pc, #556]	@ (8006b30 <update_velocity_control+0x268>)
 8006902:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
				- prismatic_axis.kalman_velocity;
 8006906:	4b8a      	ldr	r3, [pc, #552]	@ (8006b30 <update_velocity_control+0x268>)
 8006908:	edd3 7a07 	vldr	s15, [r3, #28]
 800690c:	ee77 7a67 	vsub.f32	s15, s14, s15
		prismatic_axis.vel_error = prismatic_axis.command_vel
 8006910:	4b87      	ldr	r3, [pc, #540]	@ (8006b30 <update_velocity_control+0x268>)
 8006912:	edc3 7a06 	vstr	s15, [r3, #24]
	}

	prismatic_axis.command_pos = PWM_Satuation(
 8006916:	4b86      	ldr	r3, [pc, #536]	@ (8006b30 <update_velocity_control+0x268>)
 8006918:	edd3 7a06 	vldr	s15, [r3, #24]
 800691c:	eeb0 0a67 	vmov.f32	s0, s15
 8006920:	4884      	ldr	r0, [pc, #528]	@ (8006b34 <update_velocity_control+0x26c>)
 8006922:	f7fa fc79 	bl	8001218 <PID_CONTROLLER_Compute>
 8006926:	eeb0 8a40 	vmov.f32	s16, s0
			PID_CONTROLLER_Compute(&prismatic_velocity_pid,
					prismatic_axis.vel_error), ZGX45RGG_400RPM_Constant.U_max,
 800692a:	4b83      	ldr	r3, [pc, #524]	@ (8006b38 <update_velocity_control+0x270>)
 800692c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	prismatic_axis.command_pos = PWM_Satuation(
 8006930:	4610      	mov	r0, r2
 8006932:	4619      	mov	r1, r3
 8006934:	f7fa f8c6 	bl	8000ac4 <__aeabi_d2iz>
 8006938:	4606      	mov	r6, r0
			-ZGX45RGG_400RPM_Constant.U_max);
 800693a:	4b7f      	ldr	r3, [pc, #508]	@ (8006b38 <update_velocity_control+0x270>)
 800693c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8006940:	603a      	str	r2, [r7, #0]
 8006942:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8006946:	607b      	str	r3, [r7, #4]
	prismatic_axis.command_pos = PWM_Satuation(
 8006948:	e9d7 0100 	ldrd	r0, r1, [r7]
 800694c:	f7fa f8ba 	bl	8000ac4 <__aeabi_d2iz>
 8006950:	4603      	mov	r3, r0
 8006952:	4619      	mov	r1, r3
 8006954:	4630      	mov	r0, r6
 8006956:	eeb0 0a48 	vmov.f32	s0, s16
 800695a:	f7fa fbfb 	bl	8001154 <PWM_Satuation>
 800695e:	ee07 0a90 	vmov	s15, r0
 8006962:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006966:	4b72      	ldr	r3, [pc, #456]	@ (8006b30 <update_velocity_control+0x268>)
 8006968:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	if (prismatic_axis.trajectory_active) {
 800696c:	4b70      	ldr	r3, [pc, #448]	@ (8006b30 <update_velocity_control+0x268>)
 800696e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006972:	2b00      	cmp	r3, #0
 8006974:	d02c      	beq.n	80069d0 <update_velocity_control+0x108>
		prismatic_axis.ffd = PRISMATIC_MOTOR_FFD_Compute(&prismatic_motor_ffd,
				prismatic_axis.velocity / 1000.0f);
 8006976:	4b6e      	ldr	r3, [pc, #440]	@ (8006b30 <update_velocity_control+0x268>)
 8006978:	edd3 7a01 	vldr	s15, [r3, #4]
		prismatic_axis.ffd = PRISMATIC_MOTOR_FFD_Compute(&prismatic_motor_ffd,
 800697c:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006b3c <update_velocity_control+0x274>
 8006980:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8006984:	eeb0 0a47 	vmov.f32	s0, s14
 8006988:	486d      	ldr	r0, [pc, #436]	@ (8006b40 <update_velocity_control+0x278>)
 800698a:	f7fa ff85 	bl	8001898 <PRISMATIC_MOTOR_FFD_Compute>
 800698e:	eef0 7a40 	vmov.f32	s15, s0
 8006992:	4b67      	ldr	r3, [pc, #412]	@ (8006b30 <update_velocity_control+0x268>)
 8006994:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 8006998:	4b6a      	ldr	r3, [pc, #424]	@ (8006b44 <update_velocity_control+0x27c>)
 800699a:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 800699e:	4b6a      	ldr	r3, [pc, #424]	@ (8006b48 <update_velocity_control+0x280>)
 80069a0:	edd3 6a01 	vldr	s13, [r3, #4]
				revolute_encoder.rads, revolute_axis.velocity,
				prismatic_encoder.mm / 1000.0f);
 80069a4:	4b69      	ldr	r3, [pc, #420]	@ (8006b4c <update_velocity_control+0x284>)
 80069a6:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 80069aa:	eddf 5a64 	vldr	s11, [pc, #400]	@ 8006b3c <update_velocity_control+0x274>
 80069ae:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 80069b2:	eeb0 1a46 	vmov.f32	s2, s12
 80069b6:	eef0 0a66 	vmov.f32	s1, s13
 80069ba:	eeb0 0a47 	vmov.f32	s0, s14
 80069be:	4864      	ldr	r0, [pc, #400]	@ (8006b50 <update_velocity_control+0x288>)
 80069c0:	f7fb f812 	bl	80019e8 <PRISMATIC_MOTOR_DFD_Compute>
 80069c4:	eef0 7a40 	vmov.f32	s15, s0
 80069c8:	4b59      	ldr	r3, [pc, #356]	@ (8006b30 <update_velocity_control+0x268>)
 80069ca:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
 80069ce:	e007      	b.n	80069e0 <update_velocity_control+0x118>
	} else {
		prismatic_axis.ffd = 0.0f;
 80069d0:	4b57      	ldr	r3, [pc, #348]	@ (8006b30 <update_velocity_control+0x268>)
 80069d2:	f04f 0200 	mov.w	r2, #0
 80069d6:	631a      	str	r2, [r3, #48]	@ 0x30
		prismatic_axis.dfd = 0.0f;
 80069d8:	4b55      	ldr	r3, [pc, #340]	@ (8006b30 <update_velocity_control+0x268>)
 80069da:	f04f 0200 	mov.w	r2, #0
 80069de:	62da      	str	r2, [r3, #44]	@ 0x2c
	}

	prismatic_axis.command_pos += prismatic_axis.ffd + prismatic_axis.dfd;
 80069e0:	4b53      	ldr	r3, [pc, #332]	@ (8006b30 <update_velocity_control+0x268>)
 80069e2:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80069e6:	4b52      	ldr	r3, [pc, #328]	@ (8006b30 <update_velocity_control+0x268>)
 80069e8:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 80069ec:	4b50      	ldr	r3, [pc, #320]	@ (8006b30 <update_velocity_control+0x268>)
 80069ee:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80069f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80069fa:	4b4d      	ldr	r3, [pc, #308]	@ (8006b30 <update_velocity_control+0x268>)
 80069fc:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8006a00:	4b4b      	ldr	r3, [pc, #300]	@ (8006b30 <update_velocity_control+0x268>)
 8006a02:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
			ZGX45RGG_400RPM_Constant.U_max, -ZGX45RGG_400RPM_Constant.U_max);
 8006a06:	4b4c      	ldr	r3, [pc, #304]	@ (8006b38 <update_velocity_control+0x270>)
 8006a08:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8006a0c:	4610      	mov	r0, r2
 8006a0e:	4619      	mov	r1, r3
 8006a10:	f7fa f858 	bl	8000ac4 <__aeabi_d2iz>
 8006a14:	4606      	mov	r6, r0
			ZGX45RGG_400RPM_Constant.U_max, -ZGX45RGG_400RPM_Constant.U_max);
 8006a16:	4b48      	ldr	r3, [pc, #288]	@ (8006b38 <update_velocity_control+0x270>)
 8006a18:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8006a1c:	4692      	mov	sl, r2
 8006a1e:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
	prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8006a22:	4650      	mov	r0, sl
 8006a24:	4659      	mov	r1, fp
 8006a26:	f7fa f84d 	bl	8000ac4 <__aeabi_d2iz>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	4619      	mov	r1, r3
 8006a2e:	4630      	mov	r0, r6
 8006a30:	eeb0 0a48 	vmov.f32	s0, s16
 8006a34:	f7fa fb8e 	bl	8001154 <PWM_Satuation>
 8006a38:	ee07 0a90 	vmov	s15, r0
 8006a3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006a40:	4b3b      	ldr	r3, [pc, #236]	@ (8006b30 <update_velocity_control+0x268>)
 8006a42:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	if (revolute_axis.trajectory_active) {
 8006a46:	4b40      	ldr	r3, [pc, #256]	@ (8006b48 <update_velocity_control+0x280>)
 8006a48:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d010      	beq.n	8006a72 <update_velocity_control+0x1aa>
		revolute_axis.vel_error = revolute_axis.command_vel
 8006a50:	4b3d      	ldr	r3, [pc, #244]	@ (8006b48 <update_velocity_control+0x280>)
 8006a52:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
				+ revolute_axis.velocity - revolute_axis.kalman_velocity;
 8006a56:	4b3c      	ldr	r3, [pc, #240]	@ (8006b48 <update_velocity_control+0x280>)
 8006a58:	edd3 7a01 	vldr	s15, [r3, #4]
 8006a5c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006a60:	4b39      	ldr	r3, [pc, #228]	@ (8006b48 <update_velocity_control+0x280>)
 8006a62:	edd3 7a07 	vldr	s15, [r3, #28]
 8006a66:	ee77 7a67 	vsub.f32	s15, s14, s15
		revolute_axis.vel_error = revolute_axis.command_vel
 8006a6a:	4b37      	ldr	r3, [pc, #220]	@ (8006b48 <update_velocity_control+0x280>)
 8006a6c:	edc3 7a06 	vstr	s15, [r3, #24]
 8006a70:	e00a      	b.n	8006a88 <update_velocity_control+0x1c0>
	} else {
		revolute_axis.vel_error = revolute_axis.command_vel
 8006a72:	4b35      	ldr	r3, [pc, #212]	@ (8006b48 <update_velocity_control+0x280>)
 8006a74:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
				- revolute_axis.kalman_velocity;
 8006a78:	4b33      	ldr	r3, [pc, #204]	@ (8006b48 <update_velocity_control+0x280>)
 8006a7a:	edd3 7a07 	vldr	s15, [r3, #28]
 8006a7e:	ee77 7a67 	vsub.f32	s15, s14, s15
		revolute_axis.vel_error = revolute_axis.command_vel
 8006a82:	4b31      	ldr	r3, [pc, #196]	@ (8006b48 <update_velocity_control+0x280>)
 8006a84:	edc3 7a06 	vstr	s15, [r3, #24]
	}

	revolute_axis.command_pos = PWM_Satuation(
 8006a88:	4b2f      	ldr	r3, [pc, #188]	@ (8006b48 <update_velocity_control+0x280>)
 8006a8a:	edd3 7a06 	vldr	s15, [r3, #24]
 8006a8e:	eeb0 0a67 	vmov.f32	s0, s15
 8006a92:	4830      	ldr	r0, [pc, #192]	@ (8006b54 <update_velocity_control+0x28c>)
 8006a94:	f7fa fbc0 	bl	8001218 <PID_CONTROLLER_Compute>
 8006a98:	eeb0 8a40 	vmov.f32	s16, s0
			PID_CONTROLLER_Compute(&revolute_velocity_pid,
					revolute_axis.vel_error), ZGX45RGG_150RPM_Constant.U_max,
 8006a9c:	4b2e      	ldr	r3, [pc, #184]	@ (8006b58 <update_velocity_control+0x290>)
 8006a9e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	revolute_axis.command_pos = PWM_Satuation(
 8006aa2:	4610      	mov	r0, r2
 8006aa4:	4619      	mov	r1, r3
 8006aa6:	f7fa f80d 	bl	8000ac4 <__aeabi_d2iz>
 8006aaa:	4606      	mov	r6, r0
			-ZGX45RGG_150RPM_Constant.U_max);
 8006aac:	4b2a      	ldr	r3, [pc, #168]	@ (8006b58 <update_velocity_control+0x290>)
 8006aae:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8006ab2:	4690      	mov	r8, r2
 8006ab4:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
	revolute_axis.command_pos = PWM_Satuation(
 8006ab8:	4640      	mov	r0, r8
 8006aba:	4649      	mov	r1, r9
 8006abc:	f7fa f802 	bl	8000ac4 <__aeabi_d2iz>
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	4619      	mov	r1, r3
 8006ac4:	4630      	mov	r0, r6
 8006ac6:	eeb0 0a48 	vmov.f32	s0, s16
 8006aca:	f7fa fb43 	bl	8001154 <PWM_Satuation>
 8006ace:	ee07 0a90 	vmov	s15, r0
 8006ad2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006ad6:	4b1c      	ldr	r3, [pc, #112]	@ (8006b48 <update_velocity_control+0x280>)
 8006ad8:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	if (revolute_axis.trajectory_active) {
 8006adc:	4b1a      	ldr	r3, [pc, #104]	@ (8006b48 <update_velocity_control+0x280>)
 8006ade:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d03e      	beq.n	8006b64 <update_velocity_control+0x29c>
		revolute_axis.ffd = REVOLUTE_MOTOR_FFD_Compute(&revolute_motor_ffd,
 8006ae6:	4b18      	ldr	r3, [pc, #96]	@ (8006b48 <update_velocity_control+0x280>)
 8006ae8:	edd3 7a01 	vldr	s15, [r3, #4]
 8006aec:	eeb0 0a67 	vmov.f32	s0, s15
 8006af0:	481a      	ldr	r0, [pc, #104]	@ (8006b5c <update_velocity_control+0x294>)
 8006af2:	f7fa fd51 	bl	8001598 <REVOLUTE_MOTOR_FFD_Compute>
 8006af6:	eef0 7a40 	vmov.f32	s15, s0
 8006afa:	4b13      	ldr	r3, [pc, #76]	@ (8006b48 <update_velocity_control+0x280>)
 8006afc:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
				revolute_axis.velocity);
		revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8006b00:	4b10      	ldr	r3, [pc, #64]	@ (8006b44 <update_velocity_control+0x27c>)
 8006b02:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
				revolute_encoder.rads, prismatic_encoder.mm / 1000.0f);
 8006b06:	4b11      	ldr	r3, [pc, #68]	@ (8006b4c <update_velocity_control+0x284>)
 8006b08:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8006b0c:	ed9f 6a0b 	vldr	s12, [pc, #44]	@ 8006b3c <update_velocity_control+0x274>
 8006b10:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8006b14:	eef0 0a66 	vmov.f32	s1, s13
 8006b18:	eeb0 0a47 	vmov.f32	s0, s14
 8006b1c:	4810      	ldr	r0, [pc, #64]	@ (8006b60 <update_velocity_control+0x298>)
 8006b1e:	f7fa fdce 	bl	80016be <REVOLUTE_MOTOR_DFD_Compute>
 8006b22:	eef0 7a40 	vmov.f32	s15, s0
 8006b26:	4b08      	ldr	r3, [pc, #32]	@ (8006b48 <update_velocity_control+0x280>)
 8006b28:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
 8006b2c:	e034      	b.n	8006b98 <update_velocity_control+0x2d0>
 8006b2e:	bf00      	nop
 8006b30:	20000480 	.word	0x20000480
 8006b34:	200007c0 	.word	0x200007c0
 8006b38:	20000080 	.word	0x20000080
 8006b3c:	447a0000 	.word	0x447a0000
 8006b40:	20000860 	.word	0x20000860
 8006b44:	2000073c 	.word	0x2000073c
 8006b48:	200004c4 	.word	0x200004c4
 8006b4c:	200006e0 	.word	0x200006e0
 8006b50:	20000864 	.word	0x20000864
 8006b54:	20000810 	.word	0x20000810
 8006b58:	20000000 	.word	0x20000000
 8006b5c:	2000086c 	.word	0x2000086c
 8006b60:	20000870 	.word	0x20000870
	} else {
		revolute_axis.ffd = 0.0f;
 8006b64:	4b54      	ldr	r3, [pc, #336]	@ (8006cb8 <update_velocity_control+0x3f0>)
 8006b66:	f04f 0200 	mov.w	r2, #0
 8006b6a:	631a      	str	r2, [r3, #48]	@ 0x30
		revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8006b6c:	4b53      	ldr	r3, [pc, #332]	@ (8006cbc <update_velocity_control+0x3f4>)
 8006b6e:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
				revolute_encoder.rads, prismatic_encoder.mm / 1000.0f);
 8006b72:	4b53      	ldr	r3, [pc, #332]	@ (8006cc0 <update_velocity_control+0x3f8>)
 8006b74:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8006b78:	ed9f 6a52 	vldr	s12, [pc, #328]	@ 8006cc4 <update_velocity_control+0x3fc>
 8006b7c:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8006b80:	eef0 0a66 	vmov.f32	s1, s13
 8006b84:	eeb0 0a47 	vmov.f32	s0, s14
 8006b88:	484f      	ldr	r0, [pc, #316]	@ (8006cc8 <update_velocity_control+0x400>)
 8006b8a:	f7fa fd98 	bl	80016be <REVOLUTE_MOTOR_DFD_Compute>
 8006b8e:	eef0 7a40 	vmov.f32	s15, s0
 8006b92:	4b49      	ldr	r3, [pc, #292]	@ (8006cb8 <update_velocity_control+0x3f0>)
 8006b94:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	}

	static float ffd_filtered = 0.0f;
	static float dfd_filtered = 0.0f;

	ffd_filtered = 0.8f * ffd_filtered + 0.2f * revolute_axis.ffd;
 8006b98:	4b4c      	ldr	r3, [pc, #304]	@ (8006ccc <update_velocity_control+0x404>)
 8006b9a:	edd3 7a00 	vldr	s15, [r3]
 8006b9e:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 8006cd0 <update_velocity_control+0x408>
 8006ba2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006ba6:	4b44      	ldr	r3, [pc, #272]	@ (8006cb8 <update_velocity_control+0x3f0>)
 8006ba8:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8006bac:	eddf 6a49 	vldr	s13, [pc, #292]	@ 8006cd4 <update_velocity_control+0x40c>
 8006bb0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006bb4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006bb8:	4b44      	ldr	r3, [pc, #272]	@ (8006ccc <update_velocity_control+0x404>)
 8006bba:	edc3 7a00 	vstr	s15, [r3]
	dfd_filtered = 0.8f * dfd_filtered + 0.2f * revolute_axis.dfd;
 8006bbe:	4b46      	ldr	r3, [pc, #280]	@ (8006cd8 <update_velocity_control+0x410>)
 8006bc0:	edd3 7a00 	vldr	s15, [r3]
 8006bc4:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8006cd0 <update_velocity_control+0x408>
 8006bc8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006bcc:	4b3a      	ldr	r3, [pc, #232]	@ (8006cb8 <update_velocity_control+0x3f0>)
 8006bce:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8006bd2:	eddf 6a40 	vldr	s13, [pc, #256]	@ 8006cd4 <update_velocity_control+0x40c>
 8006bd6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006bda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006bde:	4b3e      	ldr	r3, [pc, #248]	@ (8006cd8 <update_velocity_control+0x410>)
 8006be0:	edc3 7a00 	vstr	s15, [r3]

	revolute_axis.command_pos += 0.01 * (dfd_filtered + ffd_filtered);
 8006be4:	4b34      	ldr	r3, [pc, #208]	@ (8006cb8 <update_velocity_control+0x3f0>)
 8006be6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006be8:	4618      	mov	r0, r3
 8006bea:	f7f9 fc79 	bl	80004e0 <__aeabi_f2d>
 8006bee:	4680      	mov	r8, r0
 8006bf0:	4689      	mov	r9, r1
 8006bf2:	4b39      	ldr	r3, [pc, #228]	@ (8006cd8 <update_velocity_control+0x410>)
 8006bf4:	ed93 7a00 	vldr	s14, [r3]
 8006bf8:	4b34      	ldr	r3, [pc, #208]	@ (8006ccc <update_velocity_control+0x404>)
 8006bfa:	edd3 7a00 	vldr	s15, [r3]
 8006bfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006c02:	ee17 0a90 	vmov	r0, s15
 8006c06:	f7f9 fc6b 	bl	80004e0 <__aeabi_f2d>
 8006c0a:	a329      	add	r3, pc, #164	@ (adr r3, 8006cb0 <update_velocity_control+0x3e8>)
 8006c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c10:	f7f9 fcbe 	bl	8000590 <__aeabi_dmul>
 8006c14:	4602      	mov	r2, r0
 8006c16:	460b      	mov	r3, r1
 8006c18:	4640      	mov	r0, r8
 8006c1a:	4649      	mov	r1, r9
 8006c1c:	f7f9 fb02 	bl	8000224 <__adddf3>
 8006c20:	4602      	mov	r2, r0
 8006c22:	460b      	mov	r3, r1
 8006c24:	4610      	mov	r0, r2
 8006c26:	4619      	mov	r1, r3
 8006c28:	f7f9 ff94 	bl	8000b54 <__aeabi_d2f>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	4a22      	ldr	r2, [pc, #136]	@ (8006cb8 <update_velocity_control+0x3f0>)
 8006c30:	6253      	str	r3, [r2, #36]	@ 0x24

	revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8006c32:	4b21      	ldr	r3, [pc, #132]	@ (8006cb8 <update_velocity_control+0x3f0>)
 8006c34:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
			ZGX45RGG_150RPM_Constant.U_max, -ZGX45RGG_150RPM_Constant.U_max);
 8006c38:	4b28      	ldr	r3, [pc, #160]	@ (8006cdc <update_velocity_control+0x414>)
 8006c3a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8006c3e:	4610      	mov	r0, r2
 8006c40:	4619      	mov	r1, r3
 8006c42:	f7f9 ff3f 	bl	8000ac4 <__aeabi_d2iz>
 8006c46:	4606      	mov	r6, r0
			ZGX45RGG_150RPM_Constant.U_max, -ZGX45RGG_150RPM_Constant.U_max);
 8006c48:	4b24      	ldr	r3, [pc, #144]	@ (8006cdc <update_velocity_control+0x414>)
 8006c4a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8006c4e:	4614      	mov	r4, r2
 8006c50:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
	revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8006c54:	4620      	mov	r0, r4
 8006c56:	4629      	mov	r1, r5
 8006c58:	f7f9 ff34 	bl	8000ac4 <__aeabi_d2iz>
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	4619      	mov	r1, r3
 8006c60:	4630      	mov	r0, r6
 8006c62:	eeb0 0a48 	vmov.f32	s0, s16
 8006c66:	f7fa fa75 	bl	8001154 <PWM_Satuation>
 8006c6a:	ee07 0a90 	vmov	s15, r0
 8006c6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006c72:	4b11      	ldr	r3, [pc, #68]	@ (8006cb8 <update_velocity_control+0x3f0>)
 8006c74:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	MDXX_set_range(&prismatic_motor, 2000, prismatic_axis.command_pos);
 8006c78:	4b19      	ldr	r3, [pc, #100]	@ (8006ce0 <update_velocity_control+0x418>)
 8006c7a:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8006c7e:	eef0 0a67 	vmov.f32	s1, s15
 8006c82:	ed9f 0a18 	vldr	s0, [pc, #96]	@ 8006ce4 <update_velocity_control+0x41c>
 8006c86:	4818      	ldr	r0, [pc, #96]	@ (8006ce8 <update_velocity_control+0x420>)
 8006c88:	f7fa fb9e 	bl	80013c8 <MDXX_set_range>
	MDXX_set_range(&revolute_motor, 2000, revolute_axis.command_pos);
 8006c8c:	4b0a      	ldr	r3, [pc, #40]	@ (8006cb8 <update_velocity_control+0x3f0>)
 8006c8e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8006c92:	eef0 0a67 	vmov.f32	s1, s15
 8006c96:	ed9f 0a13 	vldr	s0, [pc, #76]	@ 8006ce4 <update_velocity_control+0x41c>
 8006c9a:	4814      	ldr	r0, [pc, #80]	@ (8006cec <update_velocity_control+0x424>)
 8006c9c:	f7fa fb94 	bl	80013c8 <MDXX_set_range>
}
 8006ca0:	bf00      	nop
 8006ca2:	370c      	adds	r7, #12
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	ecbd 8b02 	vpop	{d8}
 8006caa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cae:	bf00      	nop
 8006cb0:	47ae147b 	.word	0x47ae147b
 8006cb4:	3f847ae1 	.word	0x3f847ae1
 8006cb8:	200004c4 	.word	0x200004c4
 8006cbc:	2000073c 	.word	0x2000073c
 8006cc0:	200006e0 	.word	0x200006e0
 8006cc4:	447a0000 	.word	0x447a0000
 8006cc8:	20000870 	.word	0x20000870
 8006ccc:	20000624 	.word	0x20000624
 8006cd0:	3f4ccccd 	.word	0x3f4ccccd
 8006cd4:	3e4ccccd 	.word	0x3e4ccccd
 8006cd8:	20000628 	.word	0x20000628
 8006cdc:	20000000 	.word	0x20000000
 8006ce0:	20000480 	.word	0x20000480
 8006ce4:	44fa0000 	.word	0x44fa0000
 8006ce8:	20000648 	.word	0x20000648
 8006cec:	20000694 	.word	0x20000694

08006cf0 <update_control_loops>:

void update_control_loops(void) {
 8006cf0:	b590      	push	{r4, r7, lr}
 8006cf2:	ed2d 8b02 	vpush	{d8}
 8006cf6:	b085      	sub	sp, #20
 8006cf8:	af00      	add	r7, sp, #0
	normalized_position = normalize_angle(revolute_encoder.rads);
 8006cfa:	4b7b      	ldr	r3, [pc, #492]	@ (8006ee8 <update_control_loops+0x1f8>)
 8006cfc:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8006d00:	eeb0 0a67 	vmov.f32	s0, s15
 8006d04:	f7ff fa28 	bl	8006158 <normalize_angle>
 8006d08:	eef0 7a40 	vmov.f32	s15, s0
 8006d0c:	4b77      	ldr	r3, [pc, #476]	@ (8006eec <update_control_loops+0x1fc>)
 8006d0e:	edc3 7a00 	vstr	s15, [r3]

	if (is_emergency_active()) {
 8006d12:	f000 fc91 	bl	8007638 <is_emergency_active>
 8006d16:	4603      	mov	r3, r0
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d015      	beq.n	8006d48 <update_control_loops+0x58>
		emergency_stop_all_motors();
 8006d1c:	f000 fbc4 	bl	80074a8 <emergency_stop_all_motors>
		prismatic_axis.mm = prismatic_encoder.mm;
 8006d20:	4b73      	ldr	r3, [pc, #460]	@ (8006ef0 <update_control_loops+0x200>)
 8006d22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d24:	4a73      	ldr	r2, [pc, #460]	@ (8006ef4 <update_control_loops+0x204>)
 8006d26:	6393      	str	r3, [r2, #56]	@ 0x38
		revolute_axis.deg = UnitConverter_angle(&converter_system,
 8006d28:	4b70      	ldr	r3, [pc, #448]	@ (8006eec <update_control_loops+0x1fc>)
 8006d2a:	edd3 7a00 	vldr	s15, [r3]
 8006d2e:	220e      	movs	r2, #14
 8006d30:	210f      	movs	r1, #15
 8006d32:	eeb0 0a67 	vmov.f32	s0, s15
 8006d36:	4870      	ldr	r0, [pc, #448]	@ (8006ef8 <update_control_loops+0x208>)
 8006d38:	f7fd ff6a 	bl	8004c10 <UnitConverter_angle>
 8006d3c:	eef0 7a40 	vmov.f32	s15, s0
 8006d40:	4b6e      	ldr	r3, [pc, #440]	@ (8006efc <update_control_loops+0x20c>)
 8006d42:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
				normalized_position, UNIT_RADIAN, UNIT_DEGREE);
		return;
 8006d46:	e2a4      	b.n	8007292 <update_control_loops+0x5a2>
	}

	// Handle all homing states except HOMING_REV_TO_ZERO_DEG with direct motor control
	if (homing_active && homing_state != HOMING_REV_TO_ZERO_DEG) {
 8006d48:	4b6d      	ldr	r3, [pc, #436]	@ (8006f00 <update_control_loops+0x210>)
 8006d4a:	781b      	ldrb	r3, [r3, #0]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d02d      	beq.n	8006dac <update_control_loops+0xbc>
 8006d50:	4b6c      	ldr	r3, [pc, #432]	@ (8006f04 <update_control_loops+0x214>)
 8006d52:	781b      	ldrb	r3, [r3, #0]
 8006d54:	2b07      	cmp	r3, #7
 8006d56:	d029      	beq.n	8006dac <update_control_loops+0xbc>
		update_homing_sequence();
 8006d58:	f7fe fe90 	bl	8005a7c <update_homing_sequence>
		MDXX_set_range(&prismatic_motor, 2000, prismatic_axis.command_pos);
 8006d5c:	4b65      	ldr	r3, [pc, #404]	@ (8006ef4 <update_control_loops+0x204>)
 8006d5e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8006d62:	eef0 0a67 	vmov.f32	s1, s15
 8006d66:	ed9f 0a68 	vldr	s0, [pc, #416]	@ 8006f08 <update_control_loops+0x218>
 8006d6a:	4868      	ldr	r0, [pc, #416]	@ (8006f0c <update_control_loops+0x21c>)
 8006d6c:	f7fa fb2c 	bl	80013c8 <MDXX_set_range>
		MDXX_set_range(&revolute_motor, 2000, revolute_axis.command_pos);
 8006d70:	4b62      	ldr	r3, [pc, #392]	@ (8006efc <update_control_loops+0x20c>)
 8006d72:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8006d76:	eef0 0a67 	vmov.f32	s1, s15
 8006d7a:	ed9f 0a63 	vldr	s0, [pc, #396]	@ 8006f08 <update_control_loops+0x218>
 8006d7e:	4864      	ldr	r0, [pc, #400]	@ (8006f10 <update_control_loops+0x220>)
 8006d80:	f7fa fb22 	bl	80013c8 <MDXX_set_range>
		prismatic_axis.mm = prismatic_encoder.mm;
 8006d84:	4b5a      	ldr	r3, [pc, #360]	@ (8006ef0 <update_control_loops+0x200>)
 8006d86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d88:	4a5a      	ldr	r2, [pc, #360]	@ (8006ef4 <update_control_loops+0x204>)
 8006d8a:	6393      	str	r3, [r2, #56]	@ 0x38
		revolute_axis.deg = UnitConverter_angle(&converter_system,
 8006d8c:	4b57      	ldr	r3, [pc, #348]	@ (8006eec <update_control_loops+0x1fc>)
 8006d8e:	edd3 7a00 	vldr	s15, [r3]
 8006d92:	220e      	movs	r2, #14
 8006d94:	210f      	movs	r1, #15
 8006d96:	eeb0 0a67 	vmov.f32	s0, s15
 8006d9a:	4857      	ldr	r0, [pc, #348]	@ (8006ef8 <update_control_loops+0x208>)
 8006d9c:	f7fd ff38 	bl	8004c10 <UnitConverter_angle>
 8006da0:	eef0 7a40 	vmov.f32	s15, s0
 8006da4:	4b55      	ldr	r3, [pc, #340]	@ (8006efc <update_control_loops+0x20c>)
 8006da6:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
				normalized_position, UNIT_RADIAN, UNIT_DEGREE);
		return;
 8006daa:	e272      	b.n	8007292 <update_control_loops+0x5a2>
	}

	// Handle HOMING_REV_TO_ZERO_DEG: use trajectory system + check completion
	if (homing_active && homing_state == HOMING_REV_TO_ZERO_DEG) {
 8006dac:	4b54      	ldr	r3, [pc, #336]	@ (8006f00 <update_control_loops+0x210>)
 8006dae:	781b      	ldrb	r3, [r3, #0]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d01d      	beq.n	8006df0 <update_control_loops+0x100>
 8006db4:	4b53      	ldr	r3, [pc, #332]	@ (8006f04 <update_control_loops+0x214>)
 8006db6:	781b      	ldrb	r3, [r3, #0]
 8006db8:	2b07      	cmp	r3, #7
 8006dba:	d119      	bne.n	8006df0 <update_control_loops+0x100>
		// First, update the homing sequence to handle trajectory start/completion
		update_homing_sequence();
 8006dbc:	f7fe fe5e 	bl	8005a7c <update_homing_sequence>

		// If still in HOMING_REV_TO_ZERO_DEG after update, continue with trajectory control
		if (homing_state == HOMING_REV_TO_ZERO_DEG) {
 8006dc0:	4b50      	ldr	r3, [pc, #320]	@ (8006f04 <update_control_loops+0x214>)
 8006dc2:	781b      	ldrb	r3, [r3, #0]
 8006dc4:	2b07      	cmp	r3, #7
 8006dc6:	d013      	beq.n	8006df0 <update_control_loops+0x100>
			// Let the trajectory system handle the motion
			// Fall through to the switch statement below
		} else {
			// Homing sequence advanced to next state, return
			prismatic_axis.mm = prismatic_encoder.mm;
 8006dc8:	4b49      	ldr	r3, [pc, #292]	@ (8006ef0 <update_control_loops+0x200>)
 8006dca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006dcc:	4a49      	ldr	r2, [pc, #292]	@ (8006ef4 <update_control_loops+0x204>)
 8006dce:	6393      	str	r3, [r2, #56]	@ 0x38
			revolute_axis.deg = UnitConverter_angle(&converter_system,
 8006dd0:	4b46      	ldr	r3, [pc, #280]	@ (8006eec <update_control_loops+0x1fc>)
 8006dd2:	edd3 7a00 	vldr	s15, [r3]
 8006dd6:	220e      	movs	r2, #14
 8006dd8:	210f      	movs	r1, #15
 8006dda:	eeb0 0a67 	vmov.f32	s0, s15
 8006dde:	4846      	ldr	r0, [pc, #280]	@ (8006ef8 <update_control_loops+0x208>)
 8006de0:	f7fd ff16 	bl	8004c10 <UnitConverter_angle>
 8006de4:	eef0 7a40 	vmov.f32	s15, s0
 8006de8:	4b44      	ldr	r3, [pc, #272]	@ (8006efc <update_control_loops+0x20c>)
 8006dea:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
					normalized_position, UNIT_RADIAN, UNIT_DEGREE);
			return;
 8006dee:	e250      	b.n	8007292 <update_control_loops+0x5a2>
		}
	}
	//100 point
	if (j1_active && motion_sequence_state == MOTION_IDLE) {
 8006df0:	4b48      	ldr	r3, [pc, #288]	@ (8006f14 <update_control_loops+0x224>)
 8006df2:	781b      	ldrb	r3, [r3, #0]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d02f      	beq.n	8006e58 <update_control_loops+0x168>
 8006df8:	4b47      	ldr	r3, [pc, #284]	@ (8006f18 <update_control_loops+0x228>)
 8006dfa:	781b      	ldrb	r3, [r3, #0]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d12b      	bne.n	8006e58 <update_control_loops+0x168>
		if (j1_going_to_target) {
 8006e00:	4b46      	ldr	r3, [pc, #280]	@ (8006f1c <update_control_loops+0x22c>)
 8006e02:	781b      	ldrb	r3, [r3, #0]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d009      	beq.n	8006e1c <update_control_loops+0x12c>

			// check if finish goto target then goto 0
			j1_going_to_target = false;
 8006e08:	4b44      	ldr	r3, [pc, #272]	@ (8006f1c <update_control_loops+0x22c>)
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	701a      	strb	r2, [r3, #0]
			start_combined_trajectory(0.0f, 0.0f);
 8006e0e:	eddf 0a44 	vldr	s1, [pc, #272]	@ 8006f20 <update_control_loops+0x230>
 8006e12:	ed9f 0a43 	vldr	s0, [pc, #268]	@ 8006f20 <update_control_loops+0x230>
 8006e16:	f7ff fa89 	bl	800632c <start_combined_trajectory>
 8006e1a:	e01d      	b.n	8006e58 <update_control_loops+0x168>
		} else {

			j1_cycle_count++;
 8006e1c:	4b41      	ldr	r3, [pc, #260]	@ (8006f24 <update_control_loops+0x234>)
 8006e1e:	781b      	ldrb	r3, [r3, #0]
 8006e20:	3301      	adds	r3, #1
 8006e22:	b2da      	uxtb	r2, r3
 8006e24:	4b3f      	ldr	r3, [pc, #252]	@ (8006f24 <update_control_loops+0x234>)
 8006e26:	701a      	strb	r2, [r3, #0]

			if (j1_cycle_count >= 100) {
 8006e28:	4b3e      	ldr	r3, [pc, #248]	@ (8006f24 <update_control_loops+0x234>)
 8006e2a:	781b      	ldrb	r3, [r3, #0]
 8006e2c:	2b63      	cmp	r3, #99	@ 0x63
 8006e2e:	d906      	bls.n	8006e3e <update_control_loops+0x14e>
				//finish 100
				j1_active = false;
 8006e30:	4b38      	ldr	r3, [pc, #224]	@ (8006f14 <update_control_loops+0x224>)
 8006e32:	2200      	movs	r2, #0
 8006e34:	701a      	strb	r2, [r3, #0]
				j1_cycle_count = 0;
 8006e36:	4b3b      	ldr	r3, [pc, #236]	@ (8006f24 <update_control_loops+0x234>)
 8006e38:	2200      	movs	r2, #0
 8006e3a:	701a      	strb	r2, [r3, #0]
 8006e3c:	e00c      	b.n	8006e58 <update_control_loops+0x168>
			} else {
				// start again
				j1_going_to_target = true;
 8006e3e:	4b37      	ldr	r3, [pc, #220]	@ (8006f1c <update_control_loops+0x22c>)
 8006e40:	2201      	movs	r2, #1
 8006e42:	701a      	strb	r2, [r3, #0]
				start_combined_trajectory(J1_TARGET_PRIS, J1_TARGET_REV);
 8006e44:	eddf 7a38 	vldr	s15, [pc, #224]	@ 8006f28 <update_control_loops+0x238>
 8006e48:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8006f2c <update_control_loops+0x23c>
 8006e4c:	eef0 0a47 	vmov.f32	s1, s14
 8006e50:	eeb0 0a67 	vmov.f32	s0, s15
 8006e54:	f7ff fa6a 	bl	800632c <start_combined_trajectory>
			}
		}
	}

	// Motion sequence handling
	switch (motion_sequence_state) {
 8006e58:	4b2f      	ldr	r3, [pc, #188]	@ (8006f18 <update_control_loops+0x228>)
 8006e5a:	781b      	ldrb	r3, [r3, #0]
 8006e5c:	3b01      	subs	r3, #1
 8006e5e:	2b05      	cmp	r3, #5
 8006e60:	f200 81fd 	bhi.w	800725e <update_control_loops+0x56e>
 8006e64:	a201      	add	r2, pc, #4	@ (adr r2, 8006e6c <update_control_loops+0x17c>)
 8006e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e6a:	bf00      	nop
 8006e6c:	08006e85 	.word	0x08006e85
 8006e70:	0800725f 	.word	0x0800725f
 8006e74:	0800725f 	.word	0x0800725f
 8006e78:	08006f35 	.word	0x08006f35
 8006e7c:	08007239 	.word	0x08007239
 8006e80:	08007257 	.word	0x08007257
	case MOTION_PEN_UP_DELAY:
		if (++motion_delay_timer >= 1500) {
 8006e84:	4b2a      	ldr	r3, [pc, #168]	@ (8006f30 <update_control_loops+0x240>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	3301      	adds	r3, #1
 8006e8a:	4a29      	ldr	r2, [pc, #164]	@ (8006f30 <update_control_loops+0x240>)
 8006e8c:	6013      	str	r3, [r2, #0]
 8006e8e:	f240 52db 	movw	r2, #1499	@ 0x5db
 8006e92:	4293      	cmp	r3, r2
 8006e94:	f240 81e5 	bls.w	8007262 <update_control_loops+0x572>
			// Check if we're in HOMING_REV_TO_ZERO_DEG mode
			if (homing_active && homing_state == HOMING_REV_TO_ZERO_DEG) {
 8006e98:	4b19      	ldr	r3, [pc, #100]	@ (8006f00 <update_control_loops+0x210>)
 8006e9a:	781b      	ldrb	r3, [r3, #0]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d017      	beq.n	8006ed0 <update_control_loops+0x1e0>
 8006ea0:	4b18      	ldr	r3, [pc, #96]	@ (8006f04 <update_control_loops+0x214>)
 8006ea2:	781b      	ldrb	r3, [r3, #0]
 8006ea4:	2b07      	cmp	r3, #7
 8006ea6:	d113      	bne.n	8006ed0 <update_control_loops+0x1e0>
				// Skip prismatic phase entirely - go directly to revolute motion
				revolute_axis.trajectory_active = true;
 8006ea8:	4b14      	ldr	r3, [pc, #80]	@ (8006efc <update_control_loops+0x20c>)
 8006eaa:	2201      	movs	r2, #1
 8006eac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
				motion_sequence_state = MOTION_REVOLUTE_ACTIVE;
 8006eb0:	4b19      	ldr	r3, [pc, #100]	@ (8006f18 <update_control_loops+0x228>)
 8006eb2:	2203      	movs	r2, #3
 8006eb4:	701a      	strb	r2, [r3, #0]

				// Ensure prismatic stays stationary
				prismatic_axis.trajectory_active = false;
 8006eb6:	4b0f      	ldr	r3, [pc, #60]	@ (8006ef4 <update_control_loops+0x204>)
 8006eb8:	2200      	movs	r2, #0
 8006eba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
				prismatic_axis.position = prismatic_encoder.mm;
 8006ebe:	4b0c      	ldr	r3, [pc, #48]	@ (8006ef0 <update_control_loops+0x200>)
 8006ec0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006ec2:	4a0c      	ldr	r2, [pc, #48]	@ (8006ef4 <update_control_loops+0x204>)
 8006ec4:	6013      	str	r3, [r2, #0]
				prismatic_axis.velocity = 0.0f;
 8006ec6:	4b0b      	ldr	r3, [pc, #44]	@ (8006ef4 <update_control_loops+0x204>)
 8006ec8:	f04f 0200 	mov.w	r2, #0
 8006ecc:	605a      	str	r2, [r3, #4]
				prismatic_axis.trajectory_active = true;
				revolute_axis.trajectory_active = true;
				motion_sequence_state = MOTION_BOTH_AXES_ACTIVE;
			}
		}
		break;
 8006ece:	e1c8      	b.n	8007262 <update_control_loops+0x572>
				prismatic_axis.trajectory_active = true;
 8006ed0:	4b08      	ldr	r3, [pc, #32]	@ (8006ef4 <update_control_loops+0x204>)
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
				revolute_axis.trajectory_active = true;
 8006ed8:	4b08      	ldr	r3, [pc, #32]	@ (8006efc <update_control_loops+0x20c>)
 8006eda:	2201      	movs	r2, #1
 8006edc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
				motion_sequence_state = MOTION_BOTH_AXES_ACTIVE;
 8006ee0:	4b0d      	ldr	r3, [pc, #52]	@ (8006f18 <update_control_loops+0x228>)
 8006ee2:	2204      	movs	r2, #4
 8006ee4:	701a      	strb	r2, [r3, #0]
		break;
 8006ee6:	e1bc      	b.n	8007262 <update_control_loops+0x572>
 8006ee8:	2000073c 	.word	0x2000073c
 8006eec:	20000578 	.word	0x20000578
 8006ef0:	200006e0 	.word	0x200006e0
 8006ef4:	20000480 	.word	0x20000480
 8006ef8:	20000ad4 	.word	0x20000ad4
 8006efc:	200004c4 	.word	0x200004c4
 8006f00:	20000567 	.word	0x20000567
 8006f04:	20000566 	.word	0x20000566
 8006f08:	44fa0000 	.word	0x44fa0000
 8006f0c:	20000648 	.word	0x20000648
 8006f10:	20000694 	.word	0x20000694
 8006f14:	20000611 	.word	0x20000611
 8006f18:	20000508 	.word	0x20000508
 8006f1c:	20000335 	.word	0x20000335
 8006f20:	00000000 	.word	0x00000000
 8006f24:	20000610 	.word	0x20000610
 8006f28:	43480000 	.word	0x43480000
 8006f2c:	42b40000 	.word	0x42b40000
 8006f30:	2000055c 	.word	0x2000055c

	case MOTION_BOTH_AXES_ACTIVE: {
		bool motion_finished = false;
 8006f34:	2300      	movs	r3, #0
 8006f36:	73fb      	strb	r3, [r7, #15]

		if (sync_motion_active) {
 8006f38:	4bad      	ldr	r3, [pc, #692]	@ (80071f0 <update_control_loops+0x500>)
 8006f3a:	781b      	ldrb	r3, [r3, #0]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	f000 80a9 	beq.w	8007094 <update_control_loops+0x3a4>
			// Time-synchronized motion
			sync_start_time += 0.001f; // Assuming 1ms control loop
 8006f42:	4bac      	ldr	r3, [pc, #688]	@ (80071f4 <update_control_loops+0x504>)
 8006f44:	edd3 7a00 	vldr	s15, [r3]
 8006f48:	ed9f 7aab 	vldr	s14, [pc, #684]	@ 80071f8 <update_control_loops+0x508>
 8006f4c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006f50:	4ba8      	ldr	r3, [pc, #672]	@ (80071f4 <update_control_loops+0x504>)
 8006f52:	edc3 7a00 	vstr	s15, [r3]

			float progress = sync_start_time / sync_total_time;
 8006f56:	4ba7      	ldr	r3, [pc, #668]	@ (80071f4 <update_control_loops+0x504>)
 8006f58:	edd3 6a00 	vldr	s13, [r3]
 8006f5c:	4ba7      	ldr	r3, [pc, #668]	@ (80071fc <update_control_loops+0x50c>)
 8006f5e:	ed93 7a00 	vldr	s14, [r3]
 8006f62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f66:	edc7 7a02 	vstr	s15, [r7, #8]
			if (progress >= 1.0f) {
 8006f6a:	edd7 7a02 	vldr	s15, [r7, #8]
 8006f6e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006f72:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006f76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f7a:	db04      	blt.n	8006f86 <update_control_loops+0x296>
				progress = 1.0f;
 8006f7c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8006f80:	60bb      	str	r3, [r7, #8]
				motion_finished = true;
 8006f82:	2301      	movs	r3, #1
 8006f84:	73fb      	strb	r3, [r7, #15]
			}

			// Apply smooth S-curve to progress for better motion profile
			float smooth_progress = progress * progress
 8006f86:	edd7 7a02 	vldr	s15, [r7, #8]
 8006f8a:	ee27 7aa7 	vmul.f32	s14, s15, s15
					* (3.0f - 2.0f * progress); // Smoothstep function
 8006f8e:	edd7 7a02 	vldr	s15, [r7, #8]
 8006f92:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006f96:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 8006f9a:	ee76 7ae7 	vsub.f32	s15, s13, s15
			float smooth_progress = progress * progress
 8006f9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fa2:	edc7 7a00 	vstr	s15, [r7]

			// Calculate synchronized positions
			if (!(homing_active && homing_state == HOMING_REV_TO_ZERO_DEG)) {
 8006fa6:	4b96      	ldr	r3, [pc, #600]	@ (8007200 <update_control_loops+0x510>)
 8006fa8:	781b      	ldrb	r3, [r3, #0]
 8006faa:	f083 0301 	eor.w	r3, r3, #1
 8006fae:	b2db      	uxtb	r3, r3
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d103      	bne.n	8006fbc <update_control_loops+0x2cc>
 8006fb4:	4b93      	ldr	r3, [pc, #588]	@ (8007204 <update_control_loops+0x514>)
 8006fb6:	781b      	ldrb	r3, [r3, #0]
 8006fb8:	2b07      	cmp	r3, #7
 8006fba:	d026      	beq.n	800700a <update_control_loops+0x31a>
				// Prismatic axis synchronized position
				prismatic_axis.position = prismatic_axis.initial_pos
 8006fbc:	4b92      	ldr	r3, [pc, #584]	@ (8007208 <update_control_loops+0x518>)
 8006fbe:	ed93 7a03 	vldr	s14, [r3, #12]
						+ (prismatic_axis.target_pos
 8006fc2:	4b91      	ldr	r3, [pc, #580]	@ (8007208 <update_control_loops+0x518>)
 8006fc4:	edd3 6a04 	vldr	s13, [r3, #16]
								- prismatic_axis.initial_pos) * smooth_progress;
 8006fc8:	4b8f      	ldr	r3, [pc, #572]	@ (8007208 <update_control_loops+0x518>)
 8006fca:	edd3 7a03 	vldr	s15, [r3, #12]
 8006fce:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8006fd2:	edd7 7a00 	vldr	s15, [r7]
 8006fd6:	ee66 7aa7 	vmul.f32	s15, s13, s15
						+ (prismatic_axis.target_pos
 8006fda:	ee77 7a27 	vadd.f32	s15, s14, s15
				prismatic_axis.position = prismatic_axis.initial_pos
 8006fde:	4b8a      	ldr	r3, [pc, #552]	@ (8007208 <update_control_loops+0x518>)
 8006fe0:	edc3 7a00 	vstr	s15, [r3]

				// Calculate velocity (derivative of position)
				static float last_pris_pos = 0.0f;
				prismatic_axis.velocity = (prismatic_axis.position
 8006fe4:	4b88      	ldr	r3, [pc, #544]	@ (8007208 <update_control_loops+0x518>)
 8006fe6:	ed93 7a00 	vldr	s14, [r3]
						- last_pris_pos) / 0.001f; // mm/s
 8006fea:	4b88      	ldr	r3, [pc, #544]	@ (800720c <update_control_loops+0x51c>)
 8006fec:	edd3 7a00 	vldr	s15, [r3]
 8006ff0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006ff4:	eddf 6a80 	vldr	s13, [pc, #512]	@ 80071f8 <update_control_loops+0x508>
 8006ff8:	eec7 7a26 	vdiv.f32	s15, s14, s13
				prismatic_axis.velocity = (prismatic_axis.position
 8006ffc:	4b82      	ldr	r3, [pc, #520]	@ (8007208 <update_control_loops+0x518>)
 8006ffe:	edc3 7a01 	vstr	s15, [r3, #4]
				last_pris_pos = prismatic_axis.position;
 8007002:	4b81      	ldr	r3, [pc, #516]	@ (8007208 <update_control_loops+0x518>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4a81      	ldr	r2, [pc, #516]	@ (800720c <update_control_loops+0x51c>)
 8007008:	6013      	str	r3, [r2, #0]
			}

			// Revolute axis synchronized position
			revolute_axis.position = revolute_axis.initial_pos
 800700a:	4b81      	ldr	r3, [pc, #516]	@ (8007210 <update_control_loops+0x520>)
 800700c:	ed93 7a03 	vldr	s14, [r3, #12]
					+ (revolute_axis.target_pos - revolute_axis.initial_pos)
 8007010:	4b7f      	ldr	r3, [pc, #508]	@ (8007210 <update_control_loops+0x520>)
 8007012:	edd3 6a04 	vldr	s13, [r3, #16]
 8007016:	4b7e      	ldr	r3, [pc, #504]	@ (8007210 <update_control_loops+0x520>)
 8007018:	edd3 7a03 	vldr	s15, [r3, #12]
 800701c:	ee76 6ae7 	vsub.f32	s13, s13, s15
							* smooth_progress;
 8007020:	edd7 7a00 	vldr	s15, [r7]
 8007024:	ee66 7aa7 	vmul.f32	s15, s13, s15
					+ (revolute_axis.target_pos - revolute_axis.initial_pos)
 8007028:	ee77 7a27 	vadd.f32	s15, s14, s15
			revolute_axis.position = revolute_axis.initial_pos
 800702c:	4b78      	ldr	r3, [pc, #480]	@ (8007210 <update_control_loops+0x520>)
 800702e:	edc3 7a00 	vstr	s15, [r3]

			// Calculate velocity (derivative of position)
			static float last_rev_pos = 0.0f;
			revolute_axis.velocity = (revolute_axis.position - last_rev_pos)
 8007032:	4b77      	ldr	r3, [pc, #476]	@ (8007210 <update_control_loops+0x520>)
 8007034:	ed93 7a00 	vldr	s14, [r3]
 8007038:	4b76      	ldr	r3, [pc, #472]	@ (8007214 <update_control_loops+0x524>)
 800703a:	edd3 7a00 	vldr	s15, [r3]
 800703e:	ee37 7a67 	vsub.f32	s14, s14, s15
					/ 0.001f; // rad/s
 8007042:	eddf 6a6d 	vldr	s13, [pc, #436]	@ 80071f8 <update_control_loops+0x508>
 8007046:	eec7 7a26 	vdiv.f32	s15, s14, s13
			revolute_axis.velocity = (revolute_axis.position - last_rev_pos)
 800704a:	4b71      	ldr	r3, [pc, #452]	@ (8007210 <update_control_loops+0x520>)
 800704c:	edc3 7a01 	vstr	s15, [r3, #4]
			last_rev_pos = revolute_axis.position;
 8007050:	4b6f      	ldr	r3, [pc, #444]	@ (8007210 <update_control_loops+0x520>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4a6f      	ldr	r2, [pc, #444]	@ (8007214 <update_control_loops+0x524>)
 8007056:	6013      	str	r3, [r2, #0]

			if (motion_finished) {
 8007058:	7bfb      	ldrb	r3, [r7, #15]
 800705a:	2b00      	cmp	r3, #0
 800705c:	f000 8103 	beq.w	8007266 <update_control_loops+0x576>
				// Motion completed
				prismatic_axis.position = prismatic_axis.target_pos;
 8007060:	4b69      	ldr	r3, [pc, #420]	@ (8007208 <update_control_loops+0x518>)
 8007062:	691b      	ldr	r3, [r3, #16]
 8007064:	4a68      	ldr	r2, [pc, #416]	@ (8007208 <update_control_loops+0x518>)
 8007066:	6013      	str	r3, [r2, #0]
				revolute_axis.position = revolute_axis.target_pos;
 8007068:	4b69      	ldr	r3, [pc, #420]	@ (8007210 <update_control_loops+0x520>)
 800706a:	691b      	ldr	r3, [r3, #16]
 800706c:	4a68      	ldr	r2, [pc, #416]	@ (8007210 <update_control_loops+0x520>)
 800706e:	6013      	str	r3, [r2, #0]
				prismatic_axis.velocity = 0.0f;
 8007070:	4b65      	ldr	r3, [pc, #404]	@ (8007208 <update_control_loops+0x518>)
 8007072:	f04f 0200 	mov.w	r2, #0
 8007076:	605a      	str	r2, [r3, #4]
				revolute_axis.velocity = 0.0f;
 8007078:	4b65      	ldr	r3, [pc, #404]	@ (8007210 <update_control_loops+0x520>)
 800707a:	f04f 0200 	mov.w	r2, #0
 800707e:	605a      	str	r2, [r3, #4]

				sync_motion_active = false;
 8007080:	4b5b      	ldr	r3, [pc, #364]	@ (80071f0 <update_control_loops+0x500>)
 8007082:	2200      	movs	r2, #0
 8007084:	701a      	strb	r2, [r3, #0]
				motion_delay_timer = 0;
 8007086:	4b64      	ldr	r3, [pc, #400]	@ (8007218 <update_control_loops+0x528>)
 8007088:	2200      	movs	r2, #0
 800708a:	601a      	str	r2, [r3, #0]
				motion_sequence_state = MOTION_PEN_DOWN_DELAY;
 800708c:	4b63      	ldr	r3, [pc, #396]	@ (800721c <update_control_loops+0x52c>)
 800708e:	2205      	movs	r2, #5
 8007090:	701a      	strb	r2, [r3, #0]
				motion_delay_timer = 0;
				motion_sequence_state = MOTION_PEN_DOWN_DELAY;
			}
		}
	}
		break;
 8007092:	e0e8      	b.n	8007266 <update_control_loops+0x576>
			bool pris_finished = true;  // Default to true for homing case
 8007094:	2301      	movs	r3, #1
 8007096:	71fb      	strb	r3, [r7, #7]
			bool rev_finished = false;
 8007098:	2300      	movs	r3, #0
 800709a:	71bb      	strb	r3, [r7, #6]
			if (!(homing_active && homing_state == HOMING_REV_TO_ZERO_DEG)) {
 800709c:	4b58      	ldr	r3, [pc, #352]	@ (8007200 <update_control_loops+0x510>)
 800709e:	781b      	ldrb	r3, [r3, #0]
 80070a0:	f083 0301 	eor.w	r3, r3, #1
 80070a4:	b2db      	uxtb	r3, r3
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d103      	bne.n	80070b2 <update_control_loops+0x3c2>
 80070aa:	4b56      	ldr	r3, [pc, #344]	@ (8007204 <update_control_loops+0x514>)
 80070ac:	781b      	ldrb	r3, [r3, #0]
 80070ae:	2b07      	cmp	r3, #7
 80070b0:	d048      	beq.n	8007144 <update_control_loops+0x454>
				if (prismatic_axis.trajectory_active && !prisEva.isFinised) {
 80070b2:	4b55      	ldr	r3, [pc, #340]	@ (8007208 <update_control_loops+0x518>)
 80070b4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d043      	beq.n	8007144 <update_control_loops+0x454>
 80070bc:	4b58      	ldr	r3, [pc, #352]	@ (8007220 <update_control_loops+0x530>)
 80070be:	7c1b      	ldrb	r3, [r3, #16]
 80070c0:	f083 0301 	eor.w	r3, r3, #1
 80070c4:	b2db      	uxtb	r3, r3
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d03c      	beq.n	8007144 <update_control_loops+0x454>
					Trapezoidal_Evaluated(&prisGen, &prisEva,
 80070ca:	4b4f      	ldr	r3, [pc, #316]	@ (8007208 <update_control_loops+0x518>)
 80070cc:	ed93 8a03 	vldr	s16, [r3, #12]
 80070d0:	4b4d      	ldr	r3, [pc, #308]	@ (8007208 <update_control_loops+0x518>)
 80070d2:	edd3 8a04 	vldr	s17, [r3, #16]
							ZGX45RGG_400RPM_Constant.traject_sd_max,
 80070d6:	4b53      	ldr	r3, [pc, #332]	@ (8007224 <update_control_loops+0x534>)
 80070d8:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
					Trapezoidal_Evaluated(&prisGen, &prisEva,
 80070dc:	4610      	mov	r0, r2
 80070de:	4619      	mov	r1, r3
 80070e0:	f7f9 fd38 	bl	8000b54 <__aeabi_d2f>
 80070e4:	4604      	mov	r4, r0
							ZGX45RGG_400RPM_Constant.traject_sdd_max);
 80070e6:	4b4f      	ldr	r3, [pc, #316]	@ (8007224 <update_control_loops+0x534>)
 80070e8:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
					Trapezoidal_Evaluated(&prisGen, &prisEva,
 80070ec:	4610      	mov	r0, r2
 80070ee:	4619      	mov	r1, r3
 80070f0:	f7f9 fd30 	bl	8000b54 <__aeabi_d2f>
 80070f4:	4603      	mov	r3, r0
 80070f6:	ee01 3a90 	vmov	s3, r3
 80070fa:	ee01 4a10 	vmov	s2, r4
 80070fe:	eef0 0a68 	vmov.f32	s1, s17
 8007102:	eeb0 0a48 	vmov.f32	s0, s16
 8007106:	4946      	ldr	r1, [pc, #280]	@ (8007220 <update_control_loops+0x530>)
 8007108:	4847      	ldr	r0, [pc, #284]	@ (8007228 <update_control_loops+0x538>)
 800710a:	f7fd f9e9 	bl	80044e0 <Trapezoidal_Evaluated>
					prismatic_axis.position = prisEva.setposition;
 800710e:	4b44      	ldr	r3, [pc, #272]	@ (8007220 <update_control_loops+0x530>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4a3d      	ldr	r2, [pc, #244]	@ (8007208 <update_control_loops+0x518>)
 8007114:	6013      	str	r3, [r2, #0]
					prismatic_axis.velocity = prisEva.setvelocity;
 8007116:	4b42      	ldr	r3, [pc, #264]	@ (8007220 <update_control_loops+0x530>)
 8007118:	685b      	ldr	r3, [r3, #4]
 800711a:	4a3b      	ldr	r2, [pc, #236]	@ (8007208 <update_control_loops+0x518>)
 800711c:	6053      	str	r3, [r2, #4]
					pris_finished = prisEva.isFinised;
 800711e:	4b40      	ldr	r3, [pc, #256]	@ (8007220 <update_control_loops+0x530>)
 8007120:	7c1b      	ldrb	r3, [r3, #16]
 8007122:	71fb      	strb	r3, [r7, #7]
					if (prisEva.isFinised) {
 8007124:	4b3e      	ldr	r3, [pc, #248]	@ (8007220 <update_control_loops+0x530>)
 8007126:	7c1b      	ldrb	r3, [r3, #16]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d00b      	beq.n	8007144 <update_control_loops+0x454>
						prismatic_axis.trajectory_active = false;
 800712c:	4b36      	ldr	r3, [pc, #216]	@ (8007208 <update_control_loops+0x518>)
 800712e:	2200      	movs	r2, #0
 8007130:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
						prismatic_axis.position = prisEva.setposition;
 8007134:	4b3a      	ldr	r3, [pc, #232]	@ (8007220 <update_control_loops+0x530>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4a33      	ldr	r2, [pc, #204]	@ (8007208 <update_control_loops+0x518>)
 800713a:	6013      	str	r3, [r2, #0]
						prismatic_axis.velocity = 0.0f;
 800713c:	4b32      	ldr	r3, [pc, #200]	@ (8007208 <update_control_loops+0x518>)
 800713e:	f04f 0200 	mov.w	r2, #0
 8007142:	605a      	str	r2, [r3, #4]
			if (revolute_axis.trajectory_active && !revEva.isFinised) {
 8007144:	4b32      	ldr	r3, [pc, #200]	@ (8007210 <update_control_loops+0x520>)
 8007146:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800714a:	2b00      	cmp	r3, #0
 800714c:	d043      	beq.n	80071d6 <update_control_loops+0x4e6>
 800714e:	4b37      	ldr	r3, [pc, #220]	@ (800722c <update_control_loops+0x53c>)
 8007150:	7c1b      	ldrb	r3, [r3, #16]
 8007152:	f083 0301 	eor.w	r3, r3, #1
 8007156:	b2db      	uxtb	r3, r3
 8007158:	2b00      	cmp	r3, #0
 800715a:	d03c      	beq.n	80071d6 <update_control_loops+0x4e6>
				Trapezoidal_Evaluated(&revGen, &revEva,
 800715c:	4b2c      	ldr	r3, [pc, #176]	@ (8007210 <update_control_loops+0x520>)
 800715e:	ed93 8a03 	vldr	s16, [r3, #12]
 8007162:	4b2b      	ldr	r3, [pc, #172]	@ (8007210 <update_control_loops+0x520>)
 8007164:	edd3 8a04 	vldr	s17, [r3, #16]
						ZGX45RGG_150RPM_Constant.traject_qd_max,
 8007168:	4b31      	ldr	r3, [pc, #196]	@ (8007230 <update_control_loops+0x540>)
 800716a:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
				Trapezoidal_Evaluated(&revGen, &revEva,
 800716e:	4610      	mov	r0, r2
 8007170:	4619      	mov	r1, r3
 8007172:	f7f9 fcef 	bl	8000b54 <__aeabi_d2f>
 8007176:	4604      	mov	r4, r0
						ZGX45RGG_150RPM_Constant.traject_qdd_max);
 8007178:	4b2d      	ldr	r3, [pc, #180]	@ (8007230 <update_control_loops+0x540>)
 800717a:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
				Trapezoidal_Evaluated(&revGen, &revEva,
 800717e:	4610      	mov	r0, r2
 8007180:	4619      	mov	r1, r3
 8007182:	f7f9 fce7 	bl	8000b54 <__aeabi_d2f>
 8007186:	4603      	mov	r3, r0
 8007188:	ee01 3a90 	vmov	s3, r3
 800718c:	ee01 4a10 	vmov	s2, r4
 8007190:	eef0 0a68 	vmov.f32	s1, s17
 8007194:	eeb0 0a48 	vmov.f32	s0, s16
 8007198:	4924      	ldr	r1, [pc, #144]	@ (800722c <update_control_loops+0x53c>)
 800719a:	4826      	ldr	r0, [pc, #152]	@ (8007234 <update_control_loops+0x544>)
 800719c:	f7fd f9a0 	bl	80044e0 <Trapezoidal_Evaluated>
				revolute_axis.position = revEva.setposition;
 80071a0:	4b22      	ldr	r3, [pc, #136]	@ (800722c <update_control_loops+0x53c>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a1a      	ldr	r2, [pc, #104]	@ (8007210 <update_control_loops+0x520>)
 80071a6:	6013      	str	r3, [r2, #0]
				revolute_axis.velocity = revEva.setvelocity;
 80071a8:	4b20      	ldr	r3, [pc, #128]	@ (800722c <update_control_loops+0x53c>)
 80071aa:	685b      	ldr	r3, [r3, #4]
 80071ac:	4a18      	ldr	r2, [pc, #96]	@ (8007210 <update_control_loops+0x520>)
 80071ae:	6053      	str	r3, [r2, #4]
				rev_finished = revEva.isFinised;
 80071b0:	4b1e      	ldr	r3, [pc, #120]	@ (800722c <update_control_loops+0x53c>)
 80071b2:	7c1b      	ldrb	r3, [r3, #16]
 80071b4:	71bb      	strb	r3, [r7, #6]
				if (revEva.isFinised) {
 80071b6:	4b1d      	ldr	r3, [pc, #116]	@ (800722c <update_control_loops+0x53c>)
 80071b8:	7c1b      	ldrb	r3, [r3, #16]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d00b      	beq.n	80071d6 <update_control_loops+0x4e6>
					revolute_axis.trajectory_active = false;
 80071be:	4b14      	ldr	r3, [pc, #80]	@ (8007210 <update_control_loops+0x520>)
 80071c0:	2200      	movs	r2, #0
 80071c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
					revolute_axis.position = revEva.setposition;
 80071c6:	4b19      	ldr	r3, [pc, #100]	@ (800722c <update_control_loops+0x53c>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4a11      	ldr	r2, [pc, #68]	@ (8007210 <update_control_loops+0x520>)
 80071cc:	6013      	str	r3, [r2, #0]
					revolute_axis.velocity = 0.0f;
 80071ce:	4b10      	ldr	r3, [pc, #64]	@ (8007210 <update_control_loops+0x520>)
 80071d0:	f04f 0200 	mov.w	r2, #0
 80071d4:	605a      	str	r2, [r3, #4]
			if (pris_finished && rev_finished) {
 80071d6:	79fb      	ldrb	r3, [r7, #7]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d044      	beq.n	8007266 <update_control_loops+0x576>
 80071dc:	79bb      	ldrb	r3, [r7, #6]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d041      	beq.n	8007266 <update_control_loops+0x576>
				motion_delay_timer = 0;
 80071e2:	4b0d      	ldr	r3, [pc, #52]	@ (8007218 <update_control_loops+0x528>)
 80071e4:	2200      	movs	r2, #0
 80071e6:	601a      	str	r2, [r3, #0]
				motion_sequence_state = MOTION_PEN_DOWN_DELAY;
 80071e8:	4b0c      	ldr	r3, [pc, #48]	@ (800721c <update_control_loops+0x52c>)
 80071ea:	2205      	movs	r2, #5
 80071ec:	701a      	strb	r2, [r3, #0]
		break;
 80071ee:	e03a      	b.n	8007266 <update_control_loops+0x576>
 80071f0:	20000620 	.word	0x20000620
 80071f4:	20000618 	.word	0x20000618
 80071f8:	3a83126f 	.word	0x3a83126f
 80071fc:	2000061c 	.word	0x2000061c
 8007200:	20000567 	.word	0x20000567
 8007204:	20000566 	.word	0x20000566
 8007208:	20000480 	.word	0x20000480
 800720c:	2000062c 	.word	0x2000062c
 8007210:	200004c4 	.word	0x200004c4
 8007214:	20000630 	.word	0x20000630
 8007218:	2000055c 	.word	0x2000055c
 800721c:	20000508 	.word	0x20000508
 8007220:	20000534 	.word	0x20000534
 8007224:	20000080 	.word	0x20000080
 8007228:	2000050c 	.word	0x2000050c
 800722c:	20000548 	.word	0x20000548
 8007230:	20000000 	.word	0x20000000
 8007234:	20000520 	.word	0x20000520

	case MOTION_PEN_DOWN_DELAY:
		if (++motion_delay_timer >= 1500) {
 8007238:	4b18      	ldr	r3, [pc, #96]	@ (800729c <update_control_loops+0x5ac>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	3301      	adds	r3, #1
 800723e:	4a17      	ldr	r2, [pc, #92]	@ (800729c <update_control_loops+0x5ac>)
 8007240:	6013      	str	r3, [r2, #0]
 8007242:	f240 52db 	movw	r2, #1499	@ 0x5db
 8007246:	4293      	cmp	r3, r2
 8007248:	d90f      	bls.n	800726a <update_control_loops+0x57a>
			plotter_pen_down();
 800724a:	f002 fa09 	bl	8009660 <plotter_pen_down>
			motion_sequence_state = MOTION_COMPLETE;
 800724e:	4b14      	ldr	r3, [pc, #80]	@ (80072a0 <update_control_loops+0x5b0>)
 8007250:	2206      	movs	r2, #6
 8007252:	701a      	strb	r2, [r3, #0]
		}
		break;
 8007254:	e009      	b.n	800726a <update_control_loops+0x57a>

	case MOTION_COMPLETE:
		motion_sequence_state = MOTION_IDLE;
 8007256:	4b12      	ldr	r3, [pc, #72]	@ (80072a0 <update_control_loops+0x5b0>)
 8007258:	2200      	movs	r2, #0
 800725a:	701a      	strb	r2, [r3, #0]
		break;
 800725c:	e006      	b.n	800726c <update_control_loops+0x57c>

	default:
		break;
 800725e:	bf00      	nop
 8007260:	e004      	b.n	800726c <update_control_loops+0x57c>
		break;
 8007262:	bf00      	nop
 8007264:	e002      	b.n	800726c <update_control_loops+0x57c>
		break;
 8007266:	bf00      	nop
 8007268:	e000      	b.n	800726c <update_control_loops+0x57c>
		break;
 800726a:	bf00      	nop
	}

	prismatic_axis.mm = prismatic_encoder.mm;
 800726c:	4b0d      	ldr	r3, [pc, #52]	@ (80072a4 <update_control_loops+0x5b4>)
 800726e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007270:	4a0d      	ldr	r2, [pc, #52]	@ (80072a8 <update_control_loops+0x5b8>)
 8007272:	6393      	str	r3, [r2, #56]	@ 0x38
	revolute_axis.deg = UnitConverter_angle(&converter_system,
 8007274:	4b0d      	ldr	r3, [pc, #52]	@ (80072ac <update_control_loops+0x5bc>)
 8007276:	edd3 7a00 	vldr	s15, [r3]
 800727a:	220e      	movs	r2, #14
 800727c:	210f      	movs	r1, #15
 800727e:	eeb0 0a67 	vmov.f32	s0, s15
 8007282:	480b      	ldr	r0, [pc, #44]	@ (80072b0 <update_control_loops+0x5c0>)
 8007284:	f7fd fcc4 	bl	8004c10 <UnitConverter_angle>
 8007288:	eef0 7a40 	vmov.f32	s15, s0
 800728c:	4b09      	ldr	r3, [pc, #36]	@ (80072b4 <update_control_loops+0x5c4>)
 800728e:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
			normalized_position, UNIT_RADIAN, UNIT_DEGREE);
}
 8007292:	3714      	adds	r7, #20
 8007294:	46bd      	mov	sp, r7
 8007296:	ecbd 8b02 	vpop	{d8}
 800729a:	bd90      	pop	{r4, r7, pc}
 800729c:	2000055c 	.word	0x2000055c
 80072a0:	20000508 	.word	0x20000508
 80072a4:	200006e0 	.word	0x200006e0
 80072a8:	20000480 	.word	0x20000480
 80072ac:	20000578 	.word	0x20000578
 80072b0:	20000ad4 	.word	0x20000ad4
 80072b4:	200004c4 	.word	0x200004c4

080072b8 <check_emergency_button>:

void check_emergency_button(void) {
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b082      	sub	sp, #8
 80072bc:	af00      	add	r7, sp, #0
	// Read current state of emergency button
	bool emer_pressed = HAL_GPIO_ReadPin(EMER_GPIO_Port, EMER_Pin);
 80072be:	2110      	movs	r1, #16
 80072c0:	480c      	ldr	r0, [pc, #48]	@ (80072f4 <check_emergency_button+0x3c>)
 80072c2:	f005 fcfd 	bl	800ccc0 <HAL_GPIO_ReadPin>
 80072c6:	4603      	mov	r3, r0
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	bf14      	ite	ne
 80072cc:	2301      	movne	r3, #1
 80072ce:	2300      	moveq	r3, #0
 80072d0:	71fb      	strb	r3, [r7, #7]
	// If emergency button is pressed (assuming active high)
	// Adjust the logic based on your hardware:
	// - If button is active HIGH when pressed: use == GPIO_PIN_SET
	// - If button is active LOW when pressed: use == GPIO_PIN_RESET

	if (emer_pressed == GPIO_PIN_RESET) {  // Assuming active high
 80072d2:	79fb      	ldrb	r3, [r7, #7]
 80072d4:	f083 0301 	eor.w	r3, r3, #1
 80072d8:	b2db      	uxtb	r3, r3
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d005      	beq.n	80072ea <check_emergency_button+0x32>
		// Emergency button is pressed - trigger hardware emergency
		if (safety_state != SAFETY_HARDWARE_EMERGENCY) {
 80072de:	4b06      	ldr	r3, [pc, #24]	@ (80072f8 <check_emergency_button+0x40>)
 80072e0:	781b      	ldrb	r3, [r3, #0]
 80072e2:	2b02      	cmp	r3, #2
 80072e4:	d001      	beq.n	80072ea <check_emergency_button+0x32>
			trigger_hardware_emergency();
 80072e6:	f000 f877 	bl	80073d8 <trigger_hardware_emergency>
	 // Auto-clear emergency when button released (NOT RECOMMENDED)
	 // clear_emergency_state();
	 }
	 }
	 */
}
 80072ea:	bf00      	nop
 80072ec:	3708      	adds	r7, #8
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}
 80072f2:	bf00      	nop
 80072f4:	48000400 	.word	0x48000400
 80072f8:	20000568 	.word	0x20000568

080072fc <check_safety_conditions>:

void check_safety_conditions(void) {
 80072fc:	b580      	push	{r7, lr}
 80072fe:	af00      	add	r7, sp, #0
	if (tuning_mode || safety_state != SAFETY_NORMAL || homing_active)
 8007300:	4b16      	ldr	r3, [pc, #88]	@ (800735c <check_safety_conditions+0x60>)
 8007302:	781b      	ldrb	r3, [r3, #0]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d127      	bne.n	8007358 <check_safety_conditions+0x5c>
 8007308:	4b15      	ldr	r3, [pc, #84]	@ (8007360 <check_safety_conditions+0x64>)
 800730a:	781b      	ldrb	r3, [r3, #0]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d123      	bne.n	8007358 <check_safety_conditions+0x5c>
 8007310:	4b14      	ldr	r3, [pc, #80]	@ (8007364 <check_safety_conditions+0x68>)
 8007312:	781b      	ldrb	r3, [r3, #0]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d11f      	bne.n	8007358 <check_safety_conditions+0x5c>
		return;

	if (up_photo && prismatic_axis.command_pos < 0.0f) {
 8007318:	4b13      	ldr	r3, [pc, #76]	@ (8007368 <check_safety_conditions+0x6c>)
 800731a:	781b      	ldrb	r3, [r3, #0]
 800731c:	b2db      	uxtb	r3, r3
 800731e:	2b00      	cmp	r3, #0
 8007320:	d00a      	beq.n	8007338 <check_safety_conditions+0x3c>
 8007322:	4b12      	ldr	r3, [pc, #72]	@ (800736c <check_safety_conditions+0x70>)
 8007324:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8007328:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800732c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007330:	d502      	bpl.n	8007338 <check_safety_conditions+0x3c>
		trigger_software_emergency();
 8007332:	f000 f81f 	bl	8007374 <trigger_software_emergency>
		return;
 8007336:	e010      	b.n	800735a <check_safety_conditions+0x5e>
	}

	if (low_photo && prismatic_axis.command_pos > 0.0f) {
 8007338:	4b0d      	ldr	r3, [pc, #52]	@ (8007370 <check_safety_conditions+0x74>)
 800733a:	781b      	ldrb	r3, [r3, #0]
 800733c:	b2db      	uxtb	r3, r3
 800733e:	2b00      	cmp	r3, #0
 8007340:	d00b      	beq.n	800735a <check_safety_conditions+0x5e>
 8007342:	4b0a      	ldr	r3, [pc, #40]	@ (800736c <check_safety_conditions+0x70>)
 8007344:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8007348:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800734c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007350:	dd03      	ble.n	800735a <check_safety_conditions+0x5e>
		trigger_software_emergency();
 8007352:	f000 f80f 	bl	8007374 <trigger_software_emergency>
		return;
 8007356:	e000      	b.n	800735a <check_safety_conditions+0x5e>
		return;
 8007358:	bf00      	nop
	}
}
 800735a:	bd80      	pop	{r7, pc}
 800735c:	20000334 	.word	0x20000334
 8007360:	20000568 	.word	0x20000568
 8007364:	20000567 	.word	0x20000567
 8007368:	20000564 	.word	0x20000564
 800736c:	20000480 	.word	0x20000480
 8007370:	20000565 	.word	0x20000565

08007374 <trigger_software_emergency>:

void trigger_software_emergency(void) {
 8007374:	b580      	push	{r7, lr}
 8007376:	af00      	add	r7, sp, #0
	if (safety_state == SAFETY_NORMAL) {
 8007378:	4b10      	ldr	r3, [pc, #64]	@ (80073bc <trigger_software_emergency+0x48>)
 800737a:	781b      	ldrb	r3, [r3, #0]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d11b      	bne.n	80073b8 <trigger_software_emergency+0x44>
		safety_state = SAFETY_SOFTWARE_EMERGENCY;
 8007380:	4b0e      	ldr	r3, [pc, #56]	@ (80073bc <trigger_software_emergency+0x48>)
 8007382:	2201      	movs	r2, #1
 8007384:	701a      	strb	r2, [r3, #0]
		emergency_stop_all_motors();
 8007386:	f000 f88f 	bl	80074a8 <emergency_stop_all_motors>
		safety_toggle_timer = 0;
 800738a:	4b0d      	ldr	r3, [pc, #52]	@ (80073c0 <trigger_software_emergency+0x4c>)
 800738c:	2200      	movs	r2, #0
 800738e:	601a      	str	r2, [r3, #0]
		pilot_light_state = false;
 8007390:	4b0c      	ldr	r3, [pc, #48]	@ (80073c4 <trigger_software_emergency+0x50>)
 8007392:	2200      	movs	r2, #0
 8007394:	701a      	strb	r2, [r3, #0]
		motion_sequence_state = MOTION_IDLE;
 8007396:	4b0c      	ldr	r3, [pc, #48]	@ (80073c8 <trigger_software_emergency+0x54>)
 8007398:	2200      	movs	r2, #0
 800739a:	701a      	strb	r2, [r3, #0]
		prismatic_axis.trajectory_active = false;
 800739c:	4b0b      	ldr	r3, [pc, #44]	@ (80073cc <trigger_software_emergency+0x58>)
 800739e:	2200      	movs	r2, #0
 80073a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
		revolute_axis.trajectory_active = false;
 80073a4:	4b0a      	ldr	r3, [pc, #40]	@ (80073d0 <trigger_software_emergency+0x5c>)
 80073a6:	2200      	movs	r2, #0
 80073a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

		// Exit joy mode if active
		if (joy_mode_active) {
 80073ac:	4b09      	ldr	r3, [pc, #36]	@ (80073d4 <trigger_software_emergency+0x60>)
 80073ae:	781b      	ldrb	r3, [r3, #0]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d001      	beq.n	80073b8 <trigger_software_emergency+0x44>
			exit_joy_mode();
 80073b4:	f000 f9c2 	bl	800773c <exit_joy_mode>
		}
	}
}
 80073b8:	bf00      	nop
 80073ba:	bd80      	pop	{r7, pc}
 80073bc:	20000568 	.word	0x20000568
 80073c0:	2000056c 	.word	0x2000056c
 80073c4:	20000570 	.word	0x20000570
 80073c8:	20000508 	.word	0x20000508
 80073cc:	20000480 	.word	0x20000480
 80073d0:	200004c4 	.word	0x200004c4
 80073d4:	20000581 	.word	0x20000581

080073d8 <trigger_hardware_emergency>:

void trigger_hardware_emergency(void) {
 80073d8:	b580      	push	{r7, lr}
 80073da:	af00      	add	r7, sp, #0
	safety_state = SAFETY_HARDWARE_EMERGENCY;
 80073dc:	4b13      	ldr	r3, [pc, #76]	@ (800742c <trigger_hardware_emergency+0x54>)
 80073de:	2202      	movs	r2, #2
 80073e0:	701a      	strb	r2, [r3, #0]
	hardware_emergency_triggered = true;
 80073e2:	4b13      	ldr	r3, [pc, #76]	@ (8007430 <trigger_hardware_emergency+0x58>)
 80073e4:	2201      	movs	r2, #1
 80073e6:	701a      	strb	r2, [r3, #0]
	emergency_stop_all_motors();
 80073e8:	f000 f85e 	bl	80074a8 <emergency_stop_all_motors>
	safety_toggle_timer = 0;
 80073ec:	4b11      	ldr	r3, [pc, #68]	@ (8007434 <trigger_hardware_emergency+0x5c>)
 80073ee:	2200      	movs	r2, #0
 80073f0:	601a      	str	r2, [r3, #0]
	pilot_light_state = false;
 80073f2:	4b11      	ldr	r3, [pc, #68]	@ (8007438 <trigger_hardware_emergency+0x60>)
 80073f4:	2200      	movs	r2, #0
 80073f6:	701a      	strb	r2, [r3, #0]
	homing_active = false;
 80073f8:	4b10      	ldr	r3, [pc, #64]	@ (800743c <trigger_hardware_emergency+0x64>)
 80073fa:	2200      	movs	r2, #0
 80073fc:	701a      	strb	r2, [r3, #0]
	homing_state = HOMING_IDLE;
 80073fe:	4b10      	ldr	r3, [pc, #64]	@ (8007440 <trigger_hardware_emergency+0x68>)
 8007400:	2200      	movs	r2, #0
 8007402:	701a      	strb	r2, [r3, #0]
	motion_sequence_state = MOTION_IDLE;
 8007404:	4b0f      	ldr	r3, [pc, #60]	@ (8007444 <trigger_hardware_emergency+0x6c>)
 8007406:	2200      	movs	r2, #0
 8007408:	701a      	strb	r2, [r3, #0]
	prismatic_axis.trajectory_active = false;
 800740a:	4b0f      	ldr	r3, [pc, #60]	@ (8007448 <trigger_hardware_emergency+0x70>)
 800740c:	2200      	movs	r2, #0
 800740e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	revolute_axis.trajectory_active = false;
 8007412:	4b0e      	ldr	r3, [pc, #56]	@ (800744c <trigger_hardware_emergency+0x74>)
 8007414:	2200      	movs	r2, #0
 8007416:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

	// Exit joy mode if active
	if (joy_mode_active) {
 800741a:	4b0d      	ldr	r3, [pc, #52]	@ (8007450 <trigger_hardware_emergency+0x78>)
 800741c:	781b      	ldrb	r3, [r3, #0]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d001      	beq.n	8007426 <trigger_hardware_emergency+0x4e>
		exit_joy_mode();
 8007422:	f000 f98b 	bl	800773c <exit_joy_mode>
	}
}
 8007426:	bf00      	nop
 8007428:	bd80      	pop	{r7, pc}
 800742a:	bf00      	nop
 800742c:	20000568 	.word	0x20000568
 8007430:	20000571 	.word	0x20000571
 8007434:	2000056c 	.word	0x2000056c
 8007438:	20000570 	.word	0x20000570
 800743c:	20000567 	.word	0x20000567
 8007440:	20000566 	.word	0x20000566
 8007444:	20000508 	.word	0x20000508
 8007448:	20000480 	.word	0x20000480
 800744c:	200004c4 	.word	0x200004c4
 8007450:	20000581 	.word	0x20000581

08007454 <clear_emergency_state>:

void clear_emergency_state(void) {
 8007454:	b580      	push	{r7, lr}
 8007456:	af00      	add	r7, sp, #0
	safety_state = SAFETY_NORMAL;
 8007458:	4b0d      	ldr	r3, [pc, #52]	@ (8007490 <clear_emergency_state+0x3c>)
 800745a:	2200      	movs	r2, #0
 800745c:	701a      	strb	r2, [r3, #0]
	hardware_emergency_triggered = false;
 800745e:	4b0d      	ldr	r3, [pc, #52]	@ (8007494 <clear_emergency_state+0x40>)
 8007460:	2200      	movs	r2, #0
 8007462:	701a      	strb	r2, [r3, #0]
	safety_toggle_timer = 0;
 8007464:	4b0c      	ldr	r3, [pc, #48]	@ (8007498 <clear_emergency_state+0x44>)
 8007466:	2200      	movs	r2, #0
 8007468:	601a      	str	r2, [r3, #0]
	pilot_light_state = false;
 800746a:	4b0c      	ldr	r3, [pc, #48]	@ (800749c <clear_emergency_state+0x48>)
 800746c:	2200      	movs	r2, #0
 800746e:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(PILOT_GPIO_Port, PILOT_Pin, GPIO_PIN_RESET);
 8007470:	2200      	movs	r2, #0
 8007472:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007476:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800747a:	f005 fc39 	bl	800ccf0 <HAL_GPIO_WritePin>
	up_photo = false;
 800747e:	4b08      	ldr	r3, [pc, #32]	@ (80074a0 <clear_emergency_state+0x4c>)
 8007480:	2200      	movs	r2, #0
 8007482:	701a      	strb	r2, [r3, #0]
	low_photo = false;
 8007484:	4b07      	ldr	r3, [pc, #28]	@ (80074a4 <clear_emergency_state+0x50>)
 8007486:	2200      	movs	r2, #0
 8007488:	701a      	strb	r2, [r3, #0]
}
 800748a:	bf00      	nop
 800748c:	bd80      	pop	{r7, pc}
 800748e:	bf00      	nop
 8007490:	20000568 	.word	0x20000568
 8007494:	20000571 	.word	0x20000571
 8007498:	2000056c 	.word	0x2000056c
 800749c:	20000570 	.word	0x20000570
 80074a0:	20000564 	.word	0x20000564
 80074a4:	20000565 	.word	0x20000565

080074a8 <emergency_stop_all_motors>:

void emergency_stop_all_motors(void) {
 80074a8:	b580      	push	{r7, lr}
 80074aa:	af00      	add	r7, sp, #0
	MDXX_set_range(&prismatic_motor, 2000, 0);
 80074ac:	eddf 0a17 	vldr	s1, [pc, #92]	@ 800750c <emergency_stop_all_motors+0x64>
 80074b0:	ed9f 0a17 	vldr	s0, [pc, #92]	@ 8007510 <emergency_stop_all_motors+0x68>
 80074b4:	4817      	ldr	r0, [pc, #92]	@ (8007514 <emergency_stop_all_motors+0x6c>)
 80074b6:	f7f9 ff87 	bl	80013c8 <MDXX_set_range>
	MDXX_set_range(&revolute_motor, 2000, 0);
 80074ba:	eddf 0a14 	vldr	s1, [pc, #80]	@ 800750c <emergency_stop_all_motors+0x64>
 80074be:	ed9f 0a14 	vldr	s0, [pc, #80]	@ 8007510 <emergency_stop_all_motors+0x68>
 80074c2:	4815      	ldr	r0, [pc, #84]	@ (8007518 <emergency_stop_all_motors+0x70>)
 80074c4:	f7f9 ff80 	bl	80013c8 <MDXX_set_range>

	prismatic_axis.command_pos = 0.0f;
 80074c8:	4b14      	ldr	r3, [pc, #80]	@ (800751c <emergency_stop_all_motors+0x74>)
 80074ca:	f04f 0200 	mov.w	r2, #0
 80074ce:	625a      	str	r2, [r3, #36]	@ 0x24
	revolute_axis.command_pos = 0.0f;
 80074d0:	4b13      	ldr	r3, [pc, #76]	@ (8007520 <emergency_stop_all_motors+0x78>)
 80074d2:	f04f 0200 	mov.w	r2, #0
 80074d6:	625a      	str	r2, [r3, #36]	@ 0x24
	prismatic_axis.command_vel = 0.0f;
 80074d8:	4b10      	ldr	r3, [pc, #64]	@ (800751c <emergency_stop_all_motors+0x74>)
 80074da:	f04f 0200 	mov.w	r2, #0
 80074de:	629a      	str	r2, [r3, #40]	@ 0x28
	revolute_axis.command_vel = 0.0f;
 80074e0:	4b0f      	ldr	r3, [pc, #60]	@ (8007520 <emergency_stop_all_motors+0x78>)
 80074e2:	f04f 0200 	mov.w	r2, #0
 80074e6:	629a      	str	r2, [r3, #40]	@ 0x28

	PID_CONTROLLER_Reset(&prismatic_position_pid);
 80074e8:	480e      	ldr	r0, [pc, #56]	@ (8007524 <emergency_stop_all_motors+0x7c>)
 80074ea:	f7f9 ff27 	bl	800133c <PID_CONTROLLER_Reset>
	PID_CONTROLLER_Reset(&prismatic_velocity_pid);
 80074ee:	480e      	ldr	r0, [pc, #56]	@ (8007528 <emergency_stop_all_motors+0x80>)
 80074f0:	f7f9 ff24 	bl	800133c <PID_CONTROLLER_Reset>
	PID_CONTROLLER_Reset(&revolute_position_pid);
 80074f4:	480d      	ldr	r0, [pc, #52]	@ (800752c <emergency_stop_all_motors+0x84>)
 80074f6:	f7f9 ff21 	bl	800133c <PID_CONTROLLER_Reset>
	PID_CONTROLLER_Reset(&revolute_velocity_pid);
 80074fa:	480d      	ldr	r0, [pc, #52]	@ (8007530 <emergency_stop_all_motors+0x88>)
 80074fc:	f7f9 ff1e 	bl	800133c <PID_CONTROLLER_Reset>
	PID_CONTROLLER_Reset(&revolute_velocity_pid);
 8007500:	480b      	ldr	r0, [pc, #44]	@ (8007530 <emergency_stop_all_motors+0x88>)
 8007502:	f7f9 ff1b 	bl	800133c <PID_CONTROLLER_Reset>
}
 8007506:	bf00      	nop
 8007508:	bd80      	pop	{r7, pc}
 800750a:	bf00      	nop
 800750c:	00000000 	.word	0x00000000
 8007510:	44fa0000 	.word	0x44fa0000
 8007514:	20000648 	.word	0x20000648
 8007518:	20000694 	.word	0x20000694
 800751c:	20000480 	.word	0x20000480
 8007520:	200004c4 	.word	0x200004c4
 8007524:	20000798 	.word	0x20000798
 8007528:	200007c0 	.word	0x200007c0
 800752c:	200007e8 	.word	0x200007e8
 8007530:	20000810 	.word	0x20000810

08007534 <update_safety_system>:

void update_safety_system(void) {
 8007534:	b580      	push	{r7, lr}
 8007536:	af00      	add	r7, sp, #0
	// Don't control pilot light if joy mode is active
	if (joy_mode_active) {
 8007538:	4b3a      	ldr	r3, [pc, #232]	@ (8007624 <update_safety_system+0xf0>)
 800753a:	781b      	ldrb	r3, [r3, #0]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d16e      	bne.n	800761e <update_safety_system+0xea>
		return; // Let joy mode handle pilot light
	}

	if (safety_state == SAFETY_SOFTWARE_EMERGENCY) {
 8007540:	4b39      	ldr	r3, [pc, #228]	@ (8007628 <update_safety_system+0xf4>)
 8007542:	781b      	ldrb	r3, [r3, #0]
 8007544:	2b01      	cmp	r3, #1
 8007546:	d11f      	bne.n	8007588 <update_safety_system+0x54>
		if (++safety_toggle_timer >= SAFETY_TOGGLE_PERIOD) {
 8007548:	4b38      	ldr	r3, [pc, #224]	@ (800762c <update_safety_system+0xf8>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	3301      	adds	r3, #1
 800754e:	4a37      	ldr	r2, [pc, #220]	@ (800762c <update_safety_system+0xf8>)
 8007550:	6013      	str	r3, [r2, #0]
 8007552:	2bf9      	cmp	r3, #249	@ 0xf9
 8007554:	d918      	bls.n	8007588 <update_safety_system+0x54>
			HAL_GPIO_TogglePin(PILOT_GPIO_Port, PILOT_Pin);
 8007556:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800755a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800755e:	f005 fbdf 	bl	800cd20 <HAL_GPIO_TogglePin>
			pilot_light_state = !pilot_light_state;
 8007562:	4b33      	ldr	r3, [pc, #204]	@ (8007630 <update_safety_system+0xfc>)
 8007564:	781b      	ldrb	r3, [r3, #0]
 8007566:	b2db      	uxtb	r3, r3
 8007568:	2b00      	cmp	r3, #0
 800756a:	bf14      	ite	ne
 800756c:	2301      	movne	r3, #1
 800756e:	2300      	moveq	r3, #0
 8007570:	b2db      	uxtb	r3, r3
 8007572:	f083 0301 	eor.w	r3, r3, #1
 8007576:	b2db      	uxtb	r3, r3
 8007578:	f003 0301 	and.w	r3, r3, #1
 800757c:	b2da      	uxtb	r2, r3
 800757e:	4b2c      	ldr	r3, [pc, #176]	@ (8007630 <update_safety_system+0xfc>)
 8007580:	701a      	strb	r2, [r3, #0]
			safety_toggle_timer = 0;
 8007582:	4b2a      	ldr	r3, [pc, #168]	@ (800762c <update_safety_system+0xf8>)
 8007584:	2200      	movs	r2, #0
 8007586:	601a      	str	r2, [r3, #0]
		}
	}

	if (safety_state == SAFETY_HARDWARE_EMERGENCY) {
 8007588:	4b27      	ldr	r3, [pc, #156]	@ (8007628 <update_safety_system+0xf4>)
 800758a:	781b      	ldrb	r3, [r3, #0]
 800758c:	2b02      	cmp	r3, #2
 800758e:	d134      	bne.n	80075fa <update_safety_system+0xc6>
		if (HAL_GPIO_ReadPin(EMER_GPIO_Port, EMER_Pin) == GPIO_PIN_SET) {
 8007590:	2110      	movs	r1, #16
 8007592:	4828      	ldr	r0, [pc, #160]	@ (8007634 <update_safety_system+0x100>)
 8007594:	f005 fb94 	bl	800ccc0 <HAL_GPIO_ReadPin>
 8007598:	4603      	mov	r3, r0
 800759a:	2b01      	cmp	r3, #1
 800759c:	d120      	bne.n	80075e0 <update_safety_system+0xac>
			if (++safety_toggle_timer >= SAFETY_TOGGLE_PERIOD) {
 800759e:	4b23      	ldr	r3, [pc, #140]	@ (800762c <update_safety_system+0xf8>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	3301      	adds	r3, #1
 80075a4:	4a21      	ldr	r2, [pc, #132]	@ (800762c <update_safety_system+0xf8>)
 80075a6:	6013      	str	r3, [r2, #0]
 80075a8:	2bf9      	cmp	r3, #249	@ 0xf9
 80075aa:	d926      	bls.n	80075fa <update_safety_system+0xc6>
				HAL_GPIO_TogglePin(PILOT_GPIO_Port, PILOT_Pin);
 80075ac:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80075b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80075b4:	f005 fbb4 	bl	800cd20 <HAL_GPIO_TogglePin>
				pilot_light_state = !pilot_light_state;
 80075b8:	4b1d      	ldr	r3, [pc, #116]	@ (8007630 <update_safety_system+0xfc>)
 80075ba:	781b      	ldrb	r3, [r3, #0]
 80075bc:	b2db      	uxtb	r3, r3
 80075be:	2b00      	cmp	r3, #0
 80075c0:	bf14      	ite	ne
 80075c2:	2301      	movne	r3, #1
 80075c4:	2300      	moveq	r3, #0
 80075c6:	b2db      	uxtb	r3, r3
 80075c8:	f083 0301 	eor.w	r3, r3, #1
 80075cc:	b2db      	uxtb	r3, r3
 80075ce:	f003 0301 	and.w	r3, r3, #1
 80075d2:	b2da      	uxtb	r2, r3
 80075d4:	4b16      	ldr	r3, [pc, #88]	@ (8007630 <update_safety_system+0xfc>)
 80075d6:	701a      	strb	r2, [r3, #0]
				safety_toggle_timer = 0;
 80075d8:	4b14      	ldr	r3, [pc, #80]	@ (800762c <update_safety_system+0xf8>)
 80075da:	2200      	movs	r2, #0
 80075dc:	601a      	str	r2, [r3, #0]
 80075de:	e00c      	b.n	80075fa <update_safety_system+0xc6>
			}
		} else {
			HAL_GPIO_WritePin(PILOT_GPIO_Port, PILOT_Pin, GPIO_PIN_RESET);
 80075e0:	2200      	movs	r2, #0
 80075e2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80075e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80075ea:	f005 fb81 	bl	800ccf0 <HAL_GPIO_WritePin>
			pilot_light_state = false;
 80075ee:	4b10      	ldr	r3, [pc, #64]	@ (8007630 <update_safety_system+0xfc>)
 80075f0:	2200      	movs	r2, #0
 80075f2:	701a      	strb	r2, [r3, #0]
			safety_toggle_timer = 0;
 80075f4:	4b0d      	ldr	r3, [pc, #52]	@ (800762c <update_safety_system+0xf8>)
 80075f6:	2200      	movs	r2, #0
 80075f8:	601a      	str	r2, [r3, #0]
		}
	}

	if (safety_state == SAFETY_NORMAL) {
 80075fa:	4b0b      	ldr	r3, [pc, #44]	@ (8007628 <update_safety_system+0xf4>)
 80075fc:	781b      	ldrb	r3, [r3, #0]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d10e      	bne.n	8007620 <update_safety_system+0xec>
		HAL_GPIO_WritePin(PILOT_GPIO_Port, PILOT_Pin, GPIO_PIN_RESET);
 8007602:	2200      	movs	r2, #0
 8007604:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007608:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800760c:	f005 fb70 	bl	800ccf0 <HAL_GPIO_WritePin>
		pilot_light_state = false;
 8007610:	4b07      	ldr	r3, [pc, #28]	@ (8007630 <update_safety_system+0xfc>)
 8007612:	2200      	movs	r2, #0
 8007614:	701a      	strb	r2, [r3, #0]
		safety_toggle_timer = 0;
 8007616:	4b05      	ldr	r3, [pc, #20]	@ (800762c <update_safety_system+0xf8>)
 8007618:	2200      	movs	r2, #0
 800761a:	601a      	str	r2, [r3, #0]
 800761c:	e000      	b.n	8007620 <update_safety_system+0xec>
		return; // Let joy mode handle pilot light
 800761e:	bf00      	nop
	}
}
 8007620:	bd80      	pop	{r7, pc}
 8007622:	bf00      	nop
 8007624:	20000581 	.word	0x20000581
 8007628:	20000568 	.word	0x20000568
 800762c:	2000056c 	.word	0x2000056c
 8007630:	20000570 	.word	0x20000570
 8007634:	48000400 	.word	0x48000400

08007638 <is_emergency_active>:

bool is_emergency_active(void) {
 8007638:	b480      	push	{r7}
 800763a:	af00      	add	r7, sp, #0
	return (safety_state != SAFETY_NORMAL);
 800763c:	4b05      	ldr	r3, [pc, #20]	@ (8007654 <is_emergency_active+0x1c>)
 800763e:	781b      	ldrb	r3, [r3, #0]
 8007640:	2b00      	cmp	r3, #0
 8007642:	bf14      	ite	ne
 8007644:	2301      	movne	r3, #1
 8007646:	2300      	moveq	r3, #0
 8007648:	b2db      	uxtb	r3, r3
}
 800764a:	4618      	mov	r0, r3
 800764c:	46bd      	mov	sp, r7
 800764e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007652:	4770      	bx	lr
 8007654:	20000568 	.word	0x20000568

08007658 <enter_joy_mode>:

void enter_joy_mode(void) {
 8007658:	b580      	push	{r7, lr}
 800765a:	af00      	add	r7, sp, #0
	if (is_emergency_active() || homing_active || joy_mode_active) {
 800765c:	f7ff ffec 	bl	8007638 <is_emergency_active>
 8007660:	4603      	mov	r3, r0
 8007662:	2b00      	cmp	r3, #0
 8007664:	d14c      	bne.n	8007700 <enter_joy_mode+0xa8>
 8007666:	4b27      	ldr	r3, [pc, #156]	@ (8007704 <enter_joy_mode+0xac>)
 8007668:	781b      	ldrb	r3, [r3, #0]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d148      	bne.n	8007700 <enter_joy_mode+0xa8>
 800766e:	4b26      	ldr	r3, [pc, #152]	@ (8007708 <enter_joy_mode+0xb0>)
 8007670:	781b      	ldrb	r3, [r3, #0]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d144      	bne.n	8007700 <enter_joy_mode+0xa8>
		return;
	}

	joy_mode_active = true;
 8007676:	4b24      	ldr	r3, [pc, #144]	@ (8007708 <enter_joy_mode+0xb0>)
 8007678:	2201      	movs	r2, #1
 800767a:	701a      	strb	r2, [r3, #0]
	joy_mode_state = JOY_MODE_INITIAL_CONTROL; // Start in initial control state
 800767c:	4b23      	ldr	r3, [pc, #140]	@ (800770c <enter_joy_mode+0xb4>)
 800767e:	2201      	movs	r2, #1
 8007680:	701a      	strb	r2, [r3, #0]

	// Reset all joy mode data
	reset_joy_mode_data();
 8007682:	f000 f9f1 	bl	8007a68 <reset_joy_mode_data>

	// Turn on pilot light to indicate joy mode
	HAL_GPIO_WritePin(PILOT_GPIO_Port, PILOT_Pin, GPIO_PIN_SET);
 8007686:	2201      	movs	r2, #1
 8007688:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800768c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007690:	f005 fb2e 	bl	800ccf0 <HAL_GPIO_WritePin>
	joy_mode_pilot_state = true;
 8007694:	4b1e      	ldr	r3, [pc, #120]	@ (8007710 <enter_joy_mode+0xb8>)
 8007696:	2201      	movs	r2, #1
 8007698:	701a      	strb	r2, [r3, #0]
	joy_mode_pilot_timer = 0;
 800769a:	4b1e      	ldr	r3, [pc, #120]	@ (8007714 <enter_joy_mode+0xbc>)
 800769c:	2200      	movs	r2, #0
 800769e:	601a      	str	r2, [r3, #0]

	// Stop any current motion
	motion_sequence_state = MOTION_IDLE;
 80076a0:	4b1d      	ldr	r3, [pc, #116]	@ (8007718 <enter_joy_mode+0xc0>)
 80076a2:	2200      	movs	r2, #0
 80076a4:	701a      	strb	r2, [r3, #0]
	prismatic_axis.trajectory_active = false;
 80076a6:	4b1d      	ldr	r3, [pc, #116]	@ (800771c <enter_joy_mode+0xc4>)
 80076a8:	2200      	movs	r2, #0
 80076aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	revolute_axis.trajectory_active = false;
 80076ae:	4b1c      	ldr	r3, [pc, #112]	@ (8007720 <enter_joy_mode+0xc8>)
 80076b0:	2200      	movs	r2, #0
 80076b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

	// Initialize position holding at current positions
	prismatic_axis.position = prismatic_encoder.mm;
 80076b6:	4b1b      	ldr	r3, [pc, #108]	@ (8007724 <enter_joy_mode+0xcc>)
 80076b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80076ba:	4a18      	ldr	r2, [pc, #96]	@ (800771c <enter_joy_mode+0xc4>)
 80076bc:	6013      	str	r3, [r2, #0]
	revolute_axis.position = revolute_encoder.rads;
 80076be:	4b1a      	ldr	r3, [pc, #104]	@ (8007728 <enter_joy_mode+0xd0>)
 80076c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076c2:	4a17      	ldr	r2, [pc, #92]	@ (8007720 <enter_joy_mode+0xc8>)
 80076c4:	6013      	str	r3, [r2, #0]

	// Reset motor commands
	prismatic_axis.command_pos = 0.0f;
 80076c6:	4b15      	ldr	r3, [pc, #84]	@ (800771c <enter_joy_mode+0xc4>)
 80076c8:	f04f 0200 	mov.w	r2, #0
 80076cc:	625a      	str	r2, [r3, #36]	@ 0x24
	revolute_axis.command_pos = 0.0f;
 80076ce:	4b14      	ldr	r3, [pc, #80]	@ (8007720 <enter_joy_mode+0xc8>)
 80076d0:	f04f 0200 	mov.w	r2, #0
 80076d4:	625a      	str	r2, [r3, #36]	@ 0x24
	prismatic_axis.command_vel = 0.0f;
 80076d6:	4b11      	ldr	r3, [pc, #68]	@ (800771c <enter_joy_mode+0xc4>)
 80076d8:	f04f 0200 	mov.w	r2, #0
 80076dc:	629a      	str	r2, [r3, #40]	@ 0x28
	revolute_axis.command_vel = 0.0f;
 80076de:	4b10      	ldr	r3, [pc, #64]	@ (8007720 <enter_joy_mode+0xc8>)
 80076e0:	f04f 0200 	mov.w	r2, #0
 80076e4:	629a      	str	r2, [r3, #40]	@ 0x28

	// Reset PID controllers
	PID_CONTROLLER_Reset(&prismatic_position_pid);
 80076e6:	4811      	ldr	r0, [pc, #68]	@ (800772c <enter_joy_mode+0xd4>)
 80076e8:	f7f9 fe28 	bl	800133c <PID_CONTROLLER_Reset>
	PID_CONTROLLER_Reset(&prismatic_velocity_pid);
 80076ec:	4810      	ldr	r0, [pc, #64]	@ (8007730 <enter_joy_mode+0xd8>)
 80076ee:	f7f9 fe25 	bl	800133c <PID_CONTROLLER_Reset>
	PID_CONTROLLER_Reset(&revolute_position_pid);
 80076f2:	4810      	ldr	r0, [pc, #64]	@ (8007734 <enter_joy_mode+0xdc>)
 80076f4:	f7f9 fe22 	bl	800133c <PID_CONTROLLER_Reset>
	PID_CONTROLLER_Reset(&revolute_velocity_pid);
 80076f8:	480f      	ldr	r0, [pc, #60]	@ (8007738 <enter_joy_mode+0xe0>)
 80076fa:	f7f9 fe1f 	bl	800133c <PID_CONTROLLER_Reset>
 80076fe:	e000      	b.n	8007702 <enter_joy_mode+0xaa>
		return;
 8007700:	bf00      	nop
}
 8007702:	bd80      	pop	{r7, pc}
 8007704:	20000567 	.word	0x20000567
 8007708:	20000581 	.word	0x20000581
 800770c:	20000580 	.word	0x20000580
 8007710:	200005dc 	.word	0x200005dc
 8007714:	200005d8 	.word	0x200005d8
 8007718:	20000508 	.word	0x20000508
 800771c:	20000480 	.word	0x20000480
 8007720:	200004c4 	.word	0x200004c4
 8007724:	200006e0 	.word	0x200006e0
 8007728:	2000073c 	.word	0x2000073c
 800772c:	20000798 	.word	0x20000798
 8007730:	200007c0 	.word	0x200007c0
 8007734:	200007e8 	.word	0x200007e8
 8007738:	20000810 	.word	0x20000810

0800773c <exit_joy_mode>:

/* Updated exit joy mode to handle cleanup properly */
void exit_joy_mode(void) {
 800773c:	b580      	push	{r7, lr}
 800773e:	af00      	add	r7, sp, #0
	joy_mode_active = false;
 8007740:	4b34      	ldr	r3, [pc, #208]	@ (8007814 <exit_joy_mode+0xd8>)
 8007742:	2200      	movs	r2, #0
 8007744:	701a      	strb	r2, [r3, #0]
	joy_mode_state = JOY_MODE_IDLE;
 8007746:	4b34      	ldr	r3, [pc, #208]	@ (8007818 <exit_joy_mode+0xdc>)
 8007748:	2200      	movs	r2, #0
 800774a:	701a      	strb	r2, [r3, #0]

	// Reset all data
	reset_joy_mode_data();
 800774c:	f000 f98c 	bl	8007a68 <reset_joy_mode_data>

	// Turn off pilot light
	HAL_GPIO_WritePin(PILOT_GPIO_Port, PILOT_Pin, GPIO_PIN_RESET);
 8007750:	2200      	movs	r2, #0
 8007752:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007756:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800775a:	f005 fac9 	bl	800ccf0 <HAL_GPIO_WritePin>
	joy_mode_pilot_state = false;
 800775e:	4b2f      	ldr	r3, [pc, #188]	@ (800781c <exit_joy_mode+0xe0>)
 8007760:	2200      	movs	r2, #0
 8007762:	701a      	strb	r2, [r3, #0]
	joy_mode_pilot_timer = 0;
 8007764:	4b2e      	ldr	r3, [pc, #184]	@ (8007820 <exit_joy_mode+0xe4>)
 8007766:	2200      	movs	r2, #0
 8007768:	601a      	str	r2, [r3, #0]

	// DON'T stop motors - hold current position
	// Set current positions as target positions for holding
	prismatic_axis.position = prismatic_encoder.mm;
 800776a:	4b2e      	ldr	r3, [pc, #184]	@ (8007824 <exit_joy_mode+0xe8>)
 800776c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800776e:	4a2e      	ldr	r2, [pc, #184]	@ (8007828 <exit_joy_mode+0xec>)
 8007770:	6013      	str	r3, [r2, #0]
	revolute_axis.position = revolute_encoder.rads;
 8007772:	4b2e      	ldr	r3, [pc, #184]	@ (800782c <exit_joy_mode+0xf0>)
 8007774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007776:	4a2e      	ldr	r2, [pc, #184]	@ (8007830 <exit_joy_mode+0xf4>)
 8007778:	6013      	str	r3, [r2, #0]

	// Reset velocities and feedforward terms
	prismatic_axis.command_vel = 0.0f;
 800777a:	4b2b      	ldr	r3, [pc, #172]	@ (8007828 <exit_joy_mode+0xec>)
 800777c:	f04f 0200 	mov.w	r2, #0
 8007780:	629a      	str	r2, [r3, #40]	@ 0x28
	revolute_axis.command_vel = 0.0f;
 8007782:	4b2b      	ldr	r3, [pc, #172]	@ (8007830 <exit_joy_mode+0xf4>)
 8007784:	f04f 0200 	mov.w	r2, #0
 8007788:	629a      	str	r2, [r3, #40]	@ 0x28
	prismatic_axis.ffd = 0.0f;
 800778a:	4b27      	ldr	r3, [pc, #156]	@ (8007828 <exit_joy_mode+0xec>)
 800778c:	f04f 0200 	mov.w	r2, #0
 8007790:	631a      	str	r2, [r3, #48]	@ 0x30
	prismatic_axis.dfd = 0.0f;
 8007792:	4b25      	ldr	r3, [pc, #148]	@ (8007828 <exit_joy_mode+0xec>)
 8007794:	f04f 0200 	mov.w	r2, #0
 8007798:	62da      	str	r2, [r3, #44]	@ 0x2c
	revolute_axis.ffd = 0.0f;
 800779a:	4b25      	ldr	r3, [pc, #148]	@ (8007830 <exit_joy_mode+0xf4>)
 800779c:	f04f 0200 	mov.w	r2, #0
 80077a0:	631a      	str	r2, [r3, #48]	@ 0x30

	// Keep DFD for revolute axis (gravity compensation)
	revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 80077a2:	4b22      	ldr	r3, [pc, #136]	@ (800782c <exit_joy_mode+0xf0>)
 80077a4:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
			revolute_encoder.rads, prismatic_encoder.mm / 1000.0f);
 80077a8:	4b1e      	ldr	r3, [pc, #120]	@ (8007824 <exit_joy_mode+0xe8>)
 80077aa:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
	revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 80077ae:	ed9f 6a21 	vldr	s12, [pc, #132]	@ 8007834 <exit_joy_mode+0xf8>
 80077b2:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80077b6:	eef0 0a66 	vmov.f32	s1, s13
 80077ba:	eeb0 0a47 	vmov.f32	s0, s14
 80077be:	481e      	ldr	r0, [pc, #120]	@ (8007838 <exit_joy_mode+0xfc>)
 80077c0:	f7f9 ff7d 	bl	80016be <REVOLUTE_MOTOR_DFD_Compute>
 80077c4:	eef0 7a40 	vmov.f32	s15, s0
 80077c8:	4b19      	ldr	r3, [pc, #100]	@ (8007830 <exit_joy_mode+0xf4>)
 80077ca:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

	// Reset PID controllers
	PID_CONTROLLER_Reset(&prismatic_position_pid);
 80077ce:	481b      	ldr	r0, [pc, #108]	@ (800783c <exit_joy_mode+0x100>)
 80077d0:	f7f9 fdb4 	bl	800133c <PID_CONTROLLER_Reset>
	PID_CONTROLLER_Reset(&prismatic_velocity_pid);
 80077d4:	481a      	ldr	r0, [pc, #104]	@ (8007840 <exit_joy_mode+0x104>)
 80077d6:	f7f9 fdb1 	bl	800133c <PID_CONTROLLER_Reset>
	PID_CONTROLLER_Reset(&revolute_position_pid);
 80077da:	481a      	ldr	r0, [pc, #104]	@ (8007844 <exit_joy_mode+0x108>)
 80077dc:	f7f9 fdae 	bl	800133c <PID_CONTROLLER_Reset>
	PID_CONTROLLER_Reset(&revolute_velocity_pid);
 80077e0:	4819      	ldr	r0, [pc, #100]	@ (8007848 <exit_joy_mode+0x10c>)
 80077e2:	f7f9 fdab 	bl	800133c <PID_CONTROLLER_Reset>
	PID_CONTROLLER_Reset(&revolute_velocity_pid);
 80077e6:	4818      	ldr	r0, [pc, #96]	@ (8007848 <exit_joy_mode+0x10c>)
 80077e8:	f7f9 fda8 	bl	800133c <PID_CONTROLLER_Reset>

	// Reset motion state
	motion_sequence_state = MOTION_IDLE;
 80077ec:	4b17      	ldr	r3, [pc, #92]	@ (800784c <exit_joy_mode+0x110>)
 80077ee:	2200      	movs	r2, #0
 80077f0:	701a      	strb	r2, [r3, #0]
	prismatic_axis.trajectory_active = false;
 80077f2:	4b0d      	ldr	r3, [pc, #52]	@ (8007828 <exit_joy_mode+0xec>)
 80077f4:	2200      	movs	r2, #0
 80077f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	revolute_axis.trajectory_active = false;
 80077fa:	4b0d      	ldr	r3, [pc, #52]	@ (8007830 <exit_joy_mode+0xf4>)
 80077fc:	2200      	movs	r2, #0
 80077fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

	//modbus reset state
	registerFrame[BaseSystem_Status].U16 = 0;
 8007802:	4b13      	ldr	r3, [pc, #76]	@ (8007850 <exit_joy_mode+0x114>)
 8007804:	2200      	movs	r2, #0
 8007806:	805a      	strh	r2, [r3, #2]
	registerFrame[R_Theta_Status].U16 = 0;
 8007808:	4b11      	ldr	r3, [pc, #68]	@ (8007850 <exit_joy_mode+0x114>)
 800780a:	2200      	movs	r2, #0
 800780c:	841a      	strh	r2, [r3, #32]
}
 800780e:	bf00      	nop
 8007810:	bd80      	pop	{r7, pc}
 8007812:	bf00      	nop
 8007814:	20000581 	.word	0x20000581
 8007818:	20000580 	.word	0x20000580
 800781c:	200005dc 	.word	0x200005dc
 8007820:	200005d8 	.word	0x200005d8
 8007824:	200006e0 	.word	0x200006e0
 8007828:	20000480 	.word	0x20000480
 800782c:	2000073c 	.word	0x2000073c
 8007830:	200004c4 	.word	0x200004c4
 8007834:	447a0000 	.word	0x447a0000
 8007838:	20000870 	.word	0x20000870
 800783c:	20000798 	.word	0x20000798
 8007840:	200007c0 	.word	0x200007c0
 8007844:	200007e8 	.word	0x200007e8
 8007848:	20000810 	.word	0x20000810
 800784c:	20000508 	.word	0x20000508
 8007850:	200012e4 	.word	0x200012e4

08007854 <save_current_position>:

void save_current_position(void) {
 8007854:	b580      	push	{r7, lr}
 8007856:	b088      	sub	sp, #32
 8007858:	af00      	add	r7, sp, #0
	if (saved_position_count < JOY_MODE_MAX_POSITIONS) {
 800785a:	4b50      	ldr	r3, [pc, #320]	@ (800799c <save_current_position+0x148>)
 800785c:	781b      	ldrb	r3, [r3, #0]
 800785e:	2b09      	cmp	r3, #9
 8007860:	f200 8098 	bhi.w	8007994 <save_current_position+0x140>
		float current_pris = prismatic_encoder.mm;
 8007864:	4b4e      	ldr	r3, [pc, #312]	@ (80079a0 <save_current_position+0x14c>)
 8007866:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007868:	61fb      	str	r3, [r7, #28]
		float current_rev = revolute_encoder.rads;
 800786a:	4b4e      	ldr	r3, [pc, #312]	@ (80079a4 <save_current_position+0x150>)
 800786c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800786e:	61bb      	str	r3, [r7, #24]

		bool too_similar = false;
 8007870:	2300      	movs	r3, #0
 8007872:	75fb      	strb	r3, [r7, #23]
		if (saved_position_count > 0) {
 8007874:	4b49      	ldr	r3, [pc, #292]	@ (800799c <save_current_position+0x148>)
 8007876:	781b      	ldrb	r3, [r3, #0]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d031      	beq.n	80078e0 <save_current_position+0x8c>
			float last_pris =
					saved_positions[saved_position_count - 1].prismatic_pos;
 800787c:	4b47      	ldr	r3, [pc, #284]	@ (800799c <save_current_position+0x148>)
 800787e:	781b      	ldrb	r3, [r3, #0]
 8007880:	3b01      	subs	r3, #1
			float last_pris =
 8007882:	4a49      	ldr	r2, [pc, #292]	@ (80079a8 <save_current_position+0x154>)
 8007884:	00db      	lsls	r3, r3, #3
 8007886:	4413      	add	r3, r2
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	613b      	str	r3, [r7, #16]
			float last_rev =
					saved_positions[saved_position_count - 1].revolute_pos;
 800788c:	4b43      	ldr	r3, [pc, #268]	@ (800799c <save_current_position+0x148>)
 800788e:	781b      	ldrb	r3, [r3, #0]
 8007890:	3b01      	subs	r3, #1
			float last_rev =
 8007892:	4a45      	ldr	r2, [pc, #276]	@ (80079a8 <save_current_position+0x154>)
 8007894:	00db      	lsls	r3, r3, #3
 8007896:	4413      	add	r3, r2
 8007898:	3304      	adds	r3, #4
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	60fb      	str	r3, [r7, #12]

			if (fabsf(current_pris - last_pris) < 5.0f
 800789e:	ed97 7a07 	vldr	s14, [r7, #28]
 80078a2:	edd7 7a04 	vldr	s15, [r7, #16]
 80078a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80078aa:	eef0 7ae7 	vabs.f32	s15, s15
 80078ae:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 80078b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80078b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078ba:	d511      	bpl.n	80078e0 <save_current_position+0x8c>
					&& fabsf(current_rev - last_rev) < 0.1f) {
 80078bc:	ed97 7a06 	vldr	s14, [r7, #24]
 80078c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80078c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80078c8:	eef0 7ae7 	vabs.f32	s15, s15
 80078cc:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 80079ac <save_current_position+0x158>
 80078d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80078d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078d8:	d502      	bpl.n	80078e0 <save_current_position+0x8c>
				too_similar = true;
 80078da:	2301      	movs	r3, #1
 80078dc:	75fb      	strb	r3, [r7, #23]
				// DEBUG: Position too similar, not saving
				return;// Exit early if too similar
 80078de:	e059      	b.n	8007994 <save_current_position+0x140>
			}
		}

		// Only reach here if position should be saved
		saved_positions[saved_position_count].prismatic_pos = current_pris;
 80078e0:	4b2e      	ldr	r3, [pc, #184]	@ (800799c <save_current_position+0x148>)
 80078e2:	781b      	ldrb	r3, [r3, #0]
 80078e4:	4a30      	ldr	r2, [pc, #192]	@ (80079a8 <save_current_position+0x154>)
 80078e6:	00db      	lsls	r3, r3, #3
 80078e8:	4413      	add	r3, r2
 80078ea:	69fa      	ldr	r2, [r7, #28]
 80078ec:	601a      	str	r2, [r3, #0]
		saved_positions[saved_position_count].revolute_pos = current_rev;
 80078ee:	4b2b      	ldr	r3, [pc, #172]	@ (800799c <save_current_position+0x148>)
 80078f0:	781b      	ldrb	r3, [r3, #0]
 80078f2:	4a2d      	ldr	r2, [pc, #180]	@ (80079a8 <save_current_position+0x154>)
 80078f4:	00db      	lsls	r3, r3, #3
 80078f6:	4413      	add	r3, r2
 80078f8:	3304      	adds	r3, #4
 80078fa:	69ba      	ldr	r2, [r7, #24]
 80078fc:	601a      	str	r2, [r3, #0]

		uint8_t r_addr = 0x20 + saved_position_count * 2;
 80078fe:	4b27      	ldr	r3, [pc, #156]	@ (800799c <save_current_position+0x148>)
 8007900:	781b      	ldrb	r3, [r3, #0]
 8007902:	3310      	adds	r3, #16
 8007904:	b2db      	uxtb	r3, r3
 8007906:	005b      	lsls	r3, r3, #1
 8007908:	72fb      	strb	r3, [r7, #11]
		uint8_t t_addr = r_addr + 1;
 800790a:	7afb      	ldrb	r3, [r7, #11]
 800790c:	3301      	adds	r3, #1
 800790e:	72bb      	strb	r3, [r7, #10]

		if (r_addr <= 0x38 && t_addr <= 0x39) {
 8007910:	7afb      	ldrb	r3, [r7, #11]
 8007912:	2b38      	cmp	r3, #56	@ 0x38
 8007914:	d82e      	bhi.n	8007974 <save_current_position+0x120>
 8007916:	7abb      	ldrb	r3, [r7, #10]
 8007918:	2b39      	cmp	r3, #57	@ 0x39
 800791a:	d82b      	bhi.n	8007974 <save_current_position+0x120>
			int16_t r_mm_fixed = (int16_t) (current_pris * 10.0);
 800791c:	69f8      	ldr	r0, [r7, #28]
 800791e:	f7f8 fddf 	bl	80004e0 <__aeabi_f2d>
 8007922:	f04f 0200 	mov.w	r2, #0
 8007926:	4b22      	ldr	r3, [pc, #136]	@ (80079b0 <save_current_position+0x15c>)
 8007928:	f7f8 fe32 	bl	8000590 <__aeabi_dmul>
 800792c:	4602      	mov	r2, r0
 800792e:	460b      	mov	r3, r1
 8007930:	4610      	mov	r0, r2
 8007932:	4619      	mov	r1, r3
 8007934:	f7f9 f8c6 	bl	8000ac4 <__aeabi_d2iz>
 8007938:	4603      	mov	r3, r0
 800793a:	813b      	strh	r3, [r7, #8]
			int16_t t_deg_fixed = (int16_t) (revolute_axis.deg * 10.0);
 800793c:	4b1d      	ldr	r3, [pc, #116]	@ (80079b4 <save_current_position+0x160>)
 800793e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007940:	4618      	mov	r0, r3
 8007942:	f7f8 fdcd 	bl	80004e0 <__aeabi_f2d>
 8007946:	f04f 0200 	mov.w	r2, #0
 800794a:	4b19      	ldr	r3, [pc, #100]	@ (80079b0 <save_current_position+0x15c>)
 800794c:	f7f8 fe20 	bl	8000590 <__aeabi_dmul>
 8007950:	4602      	mov	r2, r0
 8007952:	460b      	mov	r3, r1
 8007954:	4610      	mov	r0, r2
 8007956:	4619      	mov	r1, r3
 8007958:	f7f9 f8b4 	bl	8000ac4 <__aeabi_d2iz>
 800795c:	4603      	mov	r3, r0
 800795e:	80fb      	strh	r3, [r7, #6]

			registerFrame[r_addr].U16 = r_mm_fixed;
 8007960:	7afb      	ldrb	r3, [r7, #11]
 8007962:	8939      	ldrh	r1, [r7, #8]
 8007964:	4a14      	ldr	r2, [pc, #80]	@ (80079b8 <save_current_position+0x164>)
 8007966:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			registerFrame[t_addr].U16 = t_deg_fixed;
 800796a:	7abb      	ldrb	r3, [r7, #10]
 800796c:	88f9      	ldrh	r1, [r7, #6]
 800796e:	4a12      	ldr	r2, [pc, #72]	@ (80079b8 <save_current_position+0x164>)
 8007970:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}

		saved_position_count++;
 8007974:	4b09      	ldr	r3, [pc, #36]	@ (800799c <save_current_position+0x148>)
 8007976:	781b      	ldrb	r3, [r3, #0]
 8007978:	3301      	adds	r3, #1
 800797a:	b2da      	uxtb	r2, r3
 800797c:	4b07      	ldr	r3, [pc, #28]	@ (800799c <save_current_position+0x148>)
 800797e:	701a      	strb	r2, [r3, #0]

		if (saved_position_count >= JOY_MODE_MAX_POSITIONS) {
 8007980:	4b06      	ldr	r3, [pc, #24]	@ (800799c <save_current_position+0x148>)
 8007982:	781b      	ldrb	r3, [r3, #0]
 8007984:	2b09      	cmp	r3, #9
 8007986:	d905      	bls.n	8007994 <save_current_position+0x140>
			joy_mode_state = JOY_MODE_POSITION_SAVED;
 8007988:	4b0c      	ldr	r3, [pc, #48]	@ (80079bc <save_current_position+0x168>)
 800798a:	2203      	movs	r2, #3
 800798c:	701a      	strb	r2, [r3, #0]
			joy_mode_pilot_timer = 0;
 800798e:	4b0c      	ldr	r3, [pc, #48]	@ (80079c0 <save_current_position+0x16c>)
 8007990:	2200      	movs	r2, #0
 8007992:	601a      	str	r2, [r3, #0]
		}
	}
}
 8007994:	3720      	adds	r7, #32
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}
 800799a:	bf00      	nop
 800799c:	200005d4 	.word	0x200005d4
 80079a0:	200006e0 	.word	0x200006e0
 80079a4:	2000073c 	.word	0x2000073c
 80079a8:	20000584 	.word	0x20000584
 80079ac:	3dcccccd 	.word	0x3dcccccd
 80079b0:	40240000 	.word	0x40240000
 80079b4:	200004c4 	.word	0x200004c4
 80079b8:	200012e4 	.word	0x200012e4
 80079bc:	20000580 	.word	0x20000580
 80079c0:	200005d8 	.word	0x200005d8

080079c4 <start_position_playback>:

void start_position_playback(void) {
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b084      	sub	sp, #16
 80079c8:	af00      	add	r7, sp, #0
	check[3]++;
 80079ca:	4b1e      	ldr	r3, [pc, #120]	@ (8007a44 <start_position_playback+0x80>)
 80079cc:	68db      	ldr	r3, [r3, #12]
 80079ce:	3301      	adds	r3, #1
 80079d0:	4a1c      	ldr	r2, [pc, #112]	@ (8007a44 <start_position_playback+0x80>)
 80079d2:	60d3      	str	r3, [r2, #12]
	if (saved_position_count > 0) {
 80079d4:	4b1c      	ldr	r3, [pc, #112]	@ (8007a48 <start_position_playback+0x84>)
 80079d6:	781b      	ldrb	r3, [r3, #0]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d02f      	beq.n	8007a3c <start_position_playback+0x78>
		check[2]++;
 80079dc:	4b19      	ldr	r3, [pc, #100]	@ (8007a44 <start_position_playback+0x80>)
 80079de:	689b      	ldr	r3, [r3, #8]
 80079e0:	3301      	adds	r3, #1
 80079e2:	4a18      	ldr	r2, [pc, #96]	@ (8007a44 <start_position_playback+0x80>)
 80079e4:	6093      	str	r3, [r2, #8]
		playback_position_index = 0;
 80079e6:	4b19      	ldr	r3, [pc, #100]	@ (8007a4c <start_position_playback+0x88>)
 80079e8:	2200      	movs	r2, #0
 80079ea:	701a      	strb	r2, [r3, #0]
		joy_mode_playback_timer = 0;
 80079ec:	4b18      	ldr	r3, [pc, #96]	@ (8007a50 <start_position_playback+0x8c>)
 80079ee:	2200      	movs	r2, #0
 80079f0:	601a      	str	r2, [r3, #0]
		joy_mode_state = JOY_MODE_PLAYBACK;
 80079f2:	4b18      	ldr	r3, [pc, #96]	@ (8007a54 <start_position_playback+0x90>)
 80079f4:	2204      	movs	r2, #4
 80079f6:	701a      	strb	r2, [r3, #0]
		// Keep pilot light ON during playback (don't turn it off)
		HAL_GPIO_WritePin(PILOT_GPIO_Port, PILOT_Pin, GPIO_PIN_SET);
 80079f8:	2201      	movs	r2, #1
 80079fa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80079fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007a02:	f005 f975 	bl	800ccf0 <HAL_GPIO_WritePin>
		joy_mode_pilot_state = true;
 8007a06:	4b14      	ldr	r3, [pc, #80]	@ (8007a58 <start_position_playback+0x94>)
 8007a08:	2201      	movs	r2, #1
 8007a0a:	701a      	strb	r2, [r3, #0]

		// Start first trajectory
		float target_pris = saved_positions[0].prismatic_pos;
 8007a0c:	4b13      	ldr	r3, [pc, #76]	@ (8007a5c <start_position_playback+0x98>)
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	60fb      	str	r3, [r7, #12]
		float target_rev_rad = saved_positions[0].revolute_pos;
 8007a12:	4b12      	ldr	r3, [pc, #72]	@ (8007a5c <start_position_playback+0x98>)
 8007a14:	685b      	ldr	r3, [r3, #4]
 8007a16:	60bb      	str	r3, [r7, #8]
		float target_rev_deg = target_rev_rad * 180.0f / PI;
 8007a18:	edd7 7a02 	vldr	s15, [r7, #8]
 8007a1c:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8007a60 <start_position_playback+0x9c>
 8007a20:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007a24:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8007a64 <start_position_playback+0xa0>
 8007a28:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007a2c:	edc7 7a01 	vstr	s15, [r7, #4]

		start_combined_trajectory(target_pris, target_rev_deg);
 8007a30:	edd7 0a01 	vldr	s1, [r7, #4]
 8007a34:	ed97 0a03 	vldr	s0, [r7, #12]
 8007a38:	f7fe fc78 	bl	800632c <start_combined_trajectory>

	}
}
 8007a3c:	bf00      	nop
 8007a3e:	3710      	adds	r7, #16
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bd80      	pop	{r7, pc}
 8007a44:	200005e8 	.word	0x200005e8
 8007a48:	200005d4 	.word	0x200005d4
 8007a4c:	200005d5 	.word	0x200005d5
 8007a50:	200005e0 	.word	0x200005e0
 8007a54:	20000580 	.word	0x20000580
 8007a58:	200005dc 	.word	0x200005dc
 8007a5c:	20000584 	.word	0x20000584
 8007a60:	43340000 	.word	0x43340000
 8007a64:	40490fdb 	.word	0x40490fdb

08007a68 <reset_joy_mode_data>:

void reset_joy_mode_data(void) {
 8007a68:	b480      	push	{r7}
 8007a6a:	b083      	sub	sp, #12
 8007a6c:	af00      	add	r7, sp, #0
	// Reset saved position count
	saved_position_count = 0;
 8007a6e:	4b19      	ldr	r3, [pc, #100]	@ (8007ad4 <reset_joy_mode_data+0x6c>)
 8007a70:	2200      	movs	r2, #0
 8007a72:	701a      	strb	r2, [r3, #0]

	// Reset playback index
	playback_position_index = 0;
 8007a74:	4b18      	ldr	r3, [pc, #96]	@ (8007ad8 <reset_joy_mode_data+0x70>)
 8007a76:	2200      	movs	r2, #0
 8007a78:	701a      	strb	r2, [r3, #0]

	// Clear all saved positions
	for (int i = 0; i < JOY_MODE_MAX_POSITIONS; i++) {
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	607b      	str	r3, [r7, #4]
 8007a7e:	e011      	b.n	8007aa4 <reset_joy_mode_data+0x3c>
		saved_positions[i].prismatic_pos = 0.0f;
 8007a80:	4a16      	ldr	r2, [pc, #88]	@ (8007adc <reset_joy_mode_data+0x74>)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	00db      	lsls	r3, r3, #3
 8007a86:	4413      	add	r3, r2
 8007a88:	f04f 0200 	mov.w	r2, #0
 8007a8c:	601a      	str	r2, [r3, #0]
		saved_positions[i].revolute_pos = 0.0f;
 8007a8e:	4a13      	ldr	r2, [pc, #76]	@ (8007adc <reset_joy_mode_data+0x74>)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	00db      	lsls	r3, r3, #3
 8007a94:	4413      	add	r3, r2
 8007a96:	3304      	adds	r3, #4
 8007a98:	f04f 0200 	mov.w	r2, #0
 8007a9c:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < JOY_MODE_MAX_POSITIONS; i++) {
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	3301      	adds	r3, #1
 8007aa2:	607b      	str	r3, [r7, #4]
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2b09      	cmp	r3, #9
 8007aa8:	ddea      	ble.n	8007a80 <reset_joy_mode_data+0x18>
	}

	// Reset pilot light timers
	joy_mode_pilot_timer = 0;
 8007aaa:	4b0d      	ldr	r3, [pc, #52]	@ (8007ae0 <reset_joy_mode_data+0x78>)
 8007aac:	2200      	movs	r2, #0
 8007aae:	601a      	str	r2, [r3, #0]
	joy_mode_pilot_state = false;
 8007ab0:	4b0c      	ldr	r3, [pc, #48]	@ (8007ae4 <reset_joy_mode_data+0x7c>)
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	701a      	strb	r2, [r3, #0]

	// Reset playback timer
	joy_mode_playback_timer = 0;
 8007ab6:	4b0c      	ldr	r3, [pc, #48]	@ (8007ae8 <reset_joy_mode_data+0x80>)
 8007ab8:	2200      	movs	r2, #0
 8007aba:	601a      	str	r2, [r3, #0]

	// Reset button states
	joy_mode_b2_pressed = false;
 8007abc:	4b0b      	ldr	r3, [pc, #44]	@ (8007aec <reset_joy_mode_data+0x84>)
 8007abe:	2200      	movs	r2, #0
 8007ac0:	701a      	strb	r2, [r3, #0]
	joy_mode_b2_last_state = false;
 8007ac2:	4b0b      	ldr	r3, [pc, #44]	@ (8007af0 <reset_joy_mode_data+0x88>)
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	701a      	strb	r2, [r3, #0]
}
 8007ac8:	bf00      	nop
 8007aca:	370c      	adds	r7, #12
 8007acc:	46bd      	mov	sp, r7
 8007ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad2:	4770      	bx	lr
 8007ad4:	200005d4 	.word	0x200005d4
 8007ad8:	200005d5 	.word	0x200005d5
 8007adc:	20000584 	.word	0x20000584
 8007ae0:	200005d8 	.word	0x200005d8
 8007ae4:	200005dc 	.word	0x200005dc
 8007ae8:	200005e0 	.word	0x200005e0
 8007aec:	200005e4 	.word	0x200005e4
 8007af0:	200005e5 	.word	0x200005e5
 8007af4:	00000000 	.word	0x00000000

08007af8 <update_joy_mode_velocity_control>:

void update_joy_mode_velocity_control(void) {
 8007af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007afc:	ed2d 8b02 	vpush	{d8}
 8007b00:	b08d      	sub	sp, #52	@ 0x34
 8007b02:	af00      	add	r7, sp, #0
	// Read current photo sensor states directly
	bool up_photo_detected = HAL_GPIO_ReadPin(UPPER_PHOTO_GPIO_Port,
 8007b04:	2101      	movs	r1, #1
 8007b06:	48a7      	ldr	r0, [pc, #668]	@ (8007da4 <update_joy_mode_velocity_control+0x2ac>)
 8007b08:	f005 f8da 	bl	800ccc0 <HAL_GPIO_ReadPin>
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	bf14      	ite	ne
 8007b12:	2301      	movne	r3, #1
 8007b14:	2300      	moveq	r3, #0
 8007b16:	76fb      	strb	r3, [r7, #27]
	UPPER_PHOTO_Pin);
	bool low_photo_detected = HAL_GPIO_ReadPin(LOWER_PHOTO_GPIO_Port,
 8007b18:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8007b1c:	48a1      	ldr	r0, [pc, #644]	@ (8007da4 <update_joy_mode_velocity_control+0x2ac>)
 8007b1e:	f005 f8cf 	bl	800ccc0 <HAL_GPIO_ReadPin>
 8007b22:	4603      	mov	r3, r0
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	bf14      	ite	ne
 8007b28:	2301      	movne	r3, #1
 8007b2a:	2300      	moveq	r3, #0
 8007b2c:	76bb      	strb	r3, [r7, #26]
	LOWER_PHOTO_Pin);

	// Prismatic axis control based on joystick_x
	float pris_command_vel = 0.0f;
 8007b2e:	f04f 0300 	mov.w	r3, #0
 8007b32:	62fb      	str	r3, [r7, #44]	@ 0x2c
	bool pris_moving = false;
 8007b34:	2300      	movs	r3, #0
 8007b36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	static bool pris_was_moving = false; // Track previous moving state

	// Process prismatic axis joystick control (FIXED LOGIC)
	if (up_photo_detected && joystick_x > JOY_MODE_VELOCITY_THRESHOLD) {
 8007b3a:	7efb      	ldrb	r3, [r7, #27]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d00d      	beq.n	8007b5c <update_joy_mode_velocity_control+0x64>
 8007b40:	4b99      	ldr	r3, [pc, #612]	@ (8007da8 <update_joy_mode_velocity_control+0x2b0>)
 8007b42:	edd3 7a00 	vldr	s15, [r3]
 8007b46:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 8007dac <update_joy_mode_velocity_control+0x2b4>
 8007b4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007b4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b52:	dd03      	ble.n	8007b5c <update_joy_mode_velocity_control+0x64>
		// At up photo and trying to go up (negative direction) - block movement
		pris_command_vel = 0.0f;
 8007b54:	f04f 0300 	mov.w	r3, #0
 8007b58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007b5a:	e048      	b.n	8007bee <update_joy_mode_velocity_control+0xf6>
	} else if (low_photo_detected && joystick_x < -JOY_MODE_VELOCITY_THRESHOLD) {
 8007b5c:	7ebb      	ldrb	r3, [r7, #26]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d00d      	beq.n	8007b7e <update_joy_mode_velocity_control+0x86>
 8007b62:	4b91      	ldr	r3, [pc, #580]	@ (8007da8 <update_joy_mode_velocity_control+0x2b0>)
 8007b64:	edd3 7a00 	vldr	s15, [r3]
 8007b68:	ed9f 7a91 	vldr	s14, [pc, #580]	@ 8007db0 <update_joy_mode_velocity_control+0x2b8>
 8007b6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007b70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b74:	d503      	bpl.n	8007b7e <update_joy_mode_velocity_control+0x86>
		// At low photo and trying to go down (positive direction) - block movement
		pris_command_vel = 0.0f;
 8007b76:	f04f 0300 	mov.w	r3, #0
 8007b7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007b7c:	e037      	b.n	8007bee <update_joy_mode_velocity_control+0xf6>
	} else if (joystick_x < -JOY_MODE_VELOCITY_THRESHOLD) {
 8007b7e:	4b8a      	ldr	r3, [pc, #552]	@ (8007da8 <update_joy_mode_velocity_control+0x2b0>)
 8007b80:	edd3 7a00 	vldr	s15, [r3]
 8007b84:	ed9f 7a8a 	vldr	s14, [pc, #552]	@ 8007db0 <update_joy_mode_velocity_control+0x2b8>
 8007b88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007b8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b90:	d50e      	bpl.n	8007bb0 <update_joy_mode_velocity_control+0xb8>
		// Moving down (positive direction)
		pris_command_vel = JOY_MODE_CONSTANT_VELOCITY_PRIS;
 8007b92:	4b88      	ldr	r3, [pc, #544]	@ (8007db4 <update_joy_mode_velocity_control+0x2bc>)
 8007b94:	62fb      	str	r3, [r7, #44]	@ 0x2c
		pris_moving = true;
 8007b96:	2301      	movs	r3, #1
 8007b98:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
		// Clear flags when moving away from sensors
		if (!low_photo_detected) {
 8007b9c:	7ebb      	ldrb	r3, [r7, #26]
 8007b9e:	f083 0301 	eor.w	r3, r3, #1
 8007ba2:	b2db      	uxtb	r3, r3
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d022      	beq.n	8007bee <update_joy_mode_velocity_control+0xf6>
			up_photo = false;
 8007ba8:	4b83      	ldr	r3, [pc, #524]	@ (8007db8 <update_joy_mode_velocity_control+0x2c0>)
 8007baa:	2200      	movs	r2, #0
 8007bac:	701a      	strb	r2, [r3, #0]
 8007bae:	e01e      	b.n	8007bee <update_joy_mode_velocity_control+0xf6>
		}
	} else if (joystick_x > JOY_MODE_VELOCITY_THRESHOLD) {
 8007bb0:	4b7d      	ldr	r3, [pc, #500]	@ (8007da8 <update_joy_mode_velocity_control+0x2b0>)
 8007bb2:	edd3 7a00 	vldr	s15, [r3]
 8007bb6:	ed9f 7a7d 	vldr	s14, [pc, #500]	@ 8007dac <update_joy_mode_velocity_control+0x2b4>
 8007bba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007bbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bc2:	dd0e      	ble.n	8007be2 <update_joy_mode_velocity_control+0xea>
		// Moving up (negative direction)
		pris_command_vel = -JOY_MODE_CONSTANT_VELOCITY_PRIS;
 8007bc4:	4b7d      	ldr	r3, [pc, #500]	@ (8007dbc <update_joy_mode_velocity_control+0x2c4>)
 8007bc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
		pris_moving = true;
 8007bc8:	2301      	movs	r3, #1
 8007bca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
		// Clear flags when moving away from sensors
		if (!up_photo_detected) {
 8007bce:	7efb      	ldrb	r3, [r7, #27]
 8007bd0:	f083 0301 	eor.w	r3, r3, #1
 8007bd4:	b2db      	uxtb	r3, r3
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d009      	beq.n	8007bee <update_joy_mode_velocity_control+0xf6>
			low_photo = false;
 8007bda:	4b79      	ldr	r3, [pc, #484]	@ (8007dc0 <update_joy_mode_velocity_control+0x2c8>)
 8007bdc:	2200      	movs	r2, #0
 8007bde:	701a      	strb	r2, [r3, #0]
 8007be0:	e005      	b.n	8007bee <update_joy_mode_velocity_control+0xf6>
		}
	} else {
		// Joystick in deadband - hold position
		pris_command_vel = 0.0f;
 8007be2:	f04f 0300 	mov.w	r3, #0
 8007be6:	62fb      	str	r3, [r7, #44]	@ 0x2c
		pris_moving = false;
 8007be8:	2300      	movs	r3, #0
 8007bea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	}

	// Revolute axis control based on joystick_y
	float rev_command_vel = 0.0f;
 8007bee:	f04f 0300 	mov.w	r3, #0
 8007bf2:	627b      	str	r3, [r7, #36]	@ 0x24
	bool rev_moving = false;
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

	// Get current revolute position in degrees for limit checking
	float revolute_deg = UnitConverter_angle(&converter_system,
 8007bfa:	4b72      	ldr	r3, [pc, #456]	@ (8007dc4 <update_joy_mode_velocity_control+0x2cc>)
 8007bfc:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8007c00:	220e      	movs	r2, #14
 8007c02:	210f      	movs	r1, #15
 8007c04:	eeb0 0a67 	vmov.f32	s0, s15
 8007c08:	486f      	ldr	r0, [pc, #444]	@ (8007dc8 <update_joy_mode_velocity_control+0x2d0>)
 8007c0a:	f7fd f801 	bl	8004c10 <UnitConverter_angle>
 8007c0e:	ed87 0a05 	vstr	s0, [r7, #20]
			revolute_encoder.rads, UNIT_RADIAN, UNIT_DEGREE);

	// Process revolute axis joystick control with limits
	if ((revolute_deg > 175.0f && joystick_y > JOY_MODE_VELOCITY_THRESHOLD)
 8007c12:	edd7 7a05 	vldr	s15, [r7, #20]
 8007c16:	ed9f 7a6d 	vldr	s14, [pc, #436]	@ 8007dcc <update_joy_mode_velocity_control+0x2d4>
 8007c1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007c1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c22:	dd09      	ble.n	8007c38 <update_joy_mode_velocity_control+0x140>
 8007c24:	4b6a      	ldr	r3, [pc, #424]	@ (8007dd0 <update_joy_mode_velocity_control+0x2d8>)
 8007c26:	edd3 7a00 	vldr	s15, [r3]
 8007c2a:	ed9f 7a60 	vldr	s14, [pc, #384]	@ 8007dac <update_joy_mode_velocity_control+0x2b4>
 8007c2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007c32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c36:	dc12      	bgt.n	8007c5e <update_joy_mode_velocity_control+0x166>
			|| (revolute_deg < -175.0f
 8007c38:	edd7 7a05 	vldr	s15, [r7, #20]
 8007c3c:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 8007dd4 <update_joy_mode_velocity_control+0x2dc>
 8007c40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007c44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c48:	d510      	bpl.n	8007c6c <update_joy_mode_velocity_control+0x174>
					&& joystick_y < -JOY_MODE_VELOCITY_THRESHOLD)) {
 8007c4a:	4b61      	ldr	r3, [pc, #388]	@ (8007dd0 <update_joy_mode_velocity_control+0x2d8>)
 8007c4c:	edd3 7a00 	vldr	s15, [r3]
 8007c50:	ed9f 7a57 	vldr	s14, [pc, #348]	@ 8007db0 <update_joy_mode_velocity_control+0x2b8>
 8007c54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007c58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c5c:	d506      	bpl.n	8007c6c <update_joy_mode_velocity_control+0x174>
		// At revolute limits - block movement
		rev_command_vel = 0.0f;
 8007c5e:	f04f 0300 	mov.w	r3, #0
 8007c62:	627b      	str	r3, [r7, #36]	@ 0x24
		rev_moving = false;
 8007c64:	2300      	movs	r3, #0
 8007c66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007c6a:	e025      	b.n	8007cb8 <update_joy_mode_velocity_control+0x1c0>
	} else if (joystick_y > JOY_MODE_VELOCITY_THRESHOLD) {
 8007c6c:	4b58      	ldr	r3, [pc, #352]	@ (8007dd0 <update_joy_mode_velocity_control+0x2d8>)
 8007c6e:	edd3 7a00 	vldr	s15, [r3]
 8007c72:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 8007dac <update_joy_mode_velocity_control+0x2b4>
 8007c76:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007c7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c7e:	dd05      	ble.n	8007c8c <update_joy_mode_velocity_control+0x194>
		rev_command_vel = JOY_MODE_CONSTANT_VELOCITY_REV;
 8007c80:	4b55      	ldr	r3, [pc, #340]	@ (8007dd8 <update_joy_mode_velocity_control+0x2e0>)
 8007c82:	627b      	str	r3, [r7, #36]	@ 0x24
		rev_moving = true;
 8007c84:	2301      	movs	r3, #1
 8007c86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007c8a:	e015      	b.n	8007cb8 <update_joy_mode_velocity_control+0x1c0>
	} else if (joystick_y < -JOY_MODE_VELOCITY_THRESHOLD) {
 8007c8c:	4b50      	ldr	r3, [pc, #320]	@ (8007dd0 <update_joy_mode_velocity_control+0x2d8>)
 8007c8e:	edd3 7a00 	vldr	s15, [r3]
 8007c92:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8007db0 <update_joy_mode_velocity_control+0x2b8>
 8007c96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007c9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c9e:	d505      	bpl.n	8007cac <update_joy_mode_velocity_control+0x1b4>
		rev_command_vel = -JOY_MODE_CONSTANT_VELOCITY_REV;
 8007ca0:	4b4e      	ldr	r3, [pc, #312]	@ (8007ddc <update_joy_mode_velocity_control+0x2e4>)
 8007ca2:	627b      	str	r3, [r7, #36]	@ 0x24
		rev_moving = true;
 8007ca4:	2301      	movs	r3, #1
 8007ca6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007caa:	e005      	b.n	8007cb8 <update_joy_mode_velocity_control+0x1c0>
	} else {
		// Joystick in deadband - hold position
		rev_command_vel = 0.0f;
 8007cac:	f04f 0300 	mov.w	r3, #0
 8007cb0:	627b      	str	r3, [r7, #36]	@ 0x24
		rev_moving = false;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	}

	/* PRISMATIC AXIS CONTROL - Keep existing PID-based control */
	// Detect transition from moving to stopped
	if (pris_was_moving && !pris_moving) {
 8007cb8:	4b49      	ldr	r3, [pc, #292]	@ (8007de0 <update_joy_mode_velocity_control+0x2e8>)
 8007cba:	781b      	ldrb	r3, [r3, #0]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d00a      	beq.n	8007cd6 <update_joy_mode_velocity_control+0x1de>
 8007cc0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007cc4:	f083 0301 	eor.w	r3, r3, #1
 8007cc8:	b2db      	uxtb	r3, r3
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d003      	beq.n	8007cd6 <update_joy_mode_velocity_control+0x1de>
		// Just stopped moving - capture current position as target
		prismatic_axis.position = prismatic_encoder.mm;
 8007cce:	4b45      	ldr	r3, [pc, #276]	@ (8007de4 <update_joy_mode_velocity_control+0x2ec>)
 8007cd0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007cd2:	4a45      	ldr	r2, [pc, #276]	@ (8007de8 <update_joy_mode_velocity_control+0x2f0>)
 8007cd4:	6013      	str	r3, [r2, #0]
	}

	if (pris_moving) {
 8007cd6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	f000 8092 	beq.w	8007e04 <update_joy_mode_velocity_control+0x30c>
		// Moving - use velocity control
		prismatic_axis.vel_error = pris_command_vel
				- prismatic_axis.kalman_velocity;
 8007ce0:	4b41      	ldr	r3, [pc, #260]	@ (8007de8 <update_joy_mode_velocity_control+0x2f0>)
 8007ce2:	edd3 7a07 	vldr	s15, [r3, #28]
 8007ce6:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8007cea:	ee77 7a67 	vsub.f32	s15, s14, s15
		prismatic_axis.vel_error = pris_command_vel
 8007cee:	4b3e      	ldr	r3, [pc, #248]	@ (8007de8 <update_joy_mode_velocity_control+0x2f0>)
 8007cf0:	edc3 7a06 	vstr	s15, [r3, #24]
		prismatic_axis.command_pos = PWM_Satuation(
 8007cf4:	4b3c      	ldr	r3, [pc, #240]	@ (8007de8 <update_joy_mode_velocity_control+0x2f0>)
 8007cf6:	edd3 7a06 	vldr	s15, [r3, #24]
 8007cfa:	eeb0 0a67 	vmov.f32	s0, s15
 8007cfe:	483b      	ldr	r0, [pc, #236]	@ (8007dec <update_joy_mode_velocity_control+0x2f4>)
 8007d00:	f7f9 fa8a 	bl	8001218 <PID_CONTROLLER_Compute>
 8007d04:	eeb0 8a40 	vmov.f32	s16, s0
				PID_CONTROLLER_Compute(&prismatic_velocity_pid,
						prismatic_axis.vel_error),
				ZGX45RGG_400RPM_Constant.U_max,
 8007d08:	4b39      	ldr	r3, [pc, #228]	@ (8007df0 <update_joy_mode_velocity_control+0x2f8>)
 8007d0a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		prismatic_axis.command_pos = PWM_Satuation(
 8007d0e:	4610      	mov	r0, r2
 8007d10:	4619      	mov	r1, r3
 8007d12:	f7f8 fed7 	bl	8000ac4 <__aeabi_d2iz>
 8007d16:	4604      	mov	r4, r0
				-ZGX45RGG_400RPM_Constant.U_max);
 8007d18:	4b35      	ldr	r3, [pc, #212]	@ (8007df0 <update_joy_mode_velocity_control+0x2f8>)
 8007d1a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8007d1e:	60ba      	str	r2, [r7, #8]
 8007d20:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8007d24:	60fb      	str	r3, [r7, #12]
		prismatic_axis.command_pos = PWM_Satuation(
 8007d26:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007d2a:	f7f8 fecb 	bl	8000ac4 <__aeabi_d2iz>
 8007d2e:	4603      	mov	r3, r0
 8007d30:	4619      	mov	r1, r3
 8007d32:	4620      	mov	r0, r4
 8007d34:	eeb0 0a48 	vmov.f32	s0, s16
 8007d38:	f7f9 fa0c 	bl	8001154 <PWM_Satuation>
 8007d3c:	ee07 0a90 	vmov	s15, r0
 8007d40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007d44:	4b28      	ldr	r3, [pc, #160]	@ (8007de8 <update_joy_mode_velocity_control+0x2f0>)
 8007d46:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		// Add feedforward for moving
		prismatic_axis.ffd = PRISMATIC_MOTOR_FFD_Compute(&prismatic_motor_ffd,
 8007d4a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8007d4e:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8007df4 <update_joy_mode_velocity_control+0x2fc>
 8007d52:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8007d56:	eeb0 0a47 	vmov.f32	s0, s14
 8007d5a:	4827      	ldr	r0, [pc, #156]	@ (8007df8 <update_joy_mode_velocity_control+0x300>)
 8007d5c:	f7f9 fd9c 	bl	8001898 <PRISMATIC_MOTOR_FFD_Compute>
 8007d60:	eef0 7a40 	vmov.f32	s15, s0
 8007d64:	4b20      	ldr	r3, [pc, #128]	@ (8007de8 <update_joy_mode_velocity_control+0x2f0>)
 8007d66:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
				pris_command_vel / 1000.0f);
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 8007d6a:	4b16      	ldr	r3, [pc, #88]	@ (8007dc4 <update_joy_mode_velocity_control+0x2cc>)
 8007d6c:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
				revolute_encoder.rads, 0.0f, prismatic_encoder.mm / 1000.0f);
 8007d70:	4b1c      	ldr	r3, [pc, #112]	@ (8007de4 <update_joy_mode_velocity_control+0x2ec>)
 8007d72:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 8007d76:	ed9f 6a1f 	vldr	s12, [pc, #124]	@ 8007df4 <update_joy_mode_velocity_control+0x2fc>
 8007d7a:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8007d7e:	eeb0 1a66 	vmov.f32	s2, s13
 8007d82:	eddf 0a1e 	vldr	s1, [pc, #120]	@ 8007dfc <update_joy_mode_velocity_control+0x304>
 8007d86:	eeb0 0a47 	vmov.f32	s0, s14
 8007d8a:	481d      	ldr	r0, [pc, #116]	@ (8007e00 <update_joy_mode_velocity_control+0x308>)
 8007d8c:	f7f9 fe2c 	bl	80019e8 <PRISMATIC_MOTOR_DFD_Compute>
 8007d90:	eef0 7a40 	vmov.f32	s15, s0
 8007d94:	4b14      	ldr	r3, [pc, #80]	@ (8007de8 <update_joy_mode_velocity_control+0x2f0>)
 8007d96:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

		// Continuously update target position while moving
		prismatic_axis.position = prismatic_encoder.mm;
 8007d9a:	4b12      	ldr	r3, [pc, #72]	@ (8007de4 <update_joy_mode_velocity_control+0x2ec>)
 8007d9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d9e:	4a12      	ldr	r2, [pc, #72]	@ (8007de8 <update_joy_mode_velocity_control+0x2f0>)
 8007da0:	6013      	str	r3, [r2, #0]
 8007da2:	e0a2      	b.n	8007eea <update_joy_mode_velocity_control+0x3f2>
 8007da4:	48000400 	.word	0x48000400
 8007da8:	20001bb0 	.word	0x20001bb0
 8007dac:	42200000 	.word	0x42200000
 8007db0:	c2200000 	.word	0xc2200000
 8007db4:	43160000 	.word	0x43160000
 8007db8:	20000564 	.word	0x20000564
 8007dbc:	c3160000 	.word	0xc3160000
 8007dc0:	20000565 	.word	0x20000565
 8007dc4:	2000073c 	.word	0x2000073c
 8007dc8:	20000ad4 	.word	0x20000ad4
 8007dcc:	432f0000 	.word	0x432f0000
 8007dd0:	20001bb4 	.word	0x20001bb4
 8007dd4:	c32f0000 	.word	0xc32f0000
 8007dd8:	40400000 	.word	0x40400000
 8007ddc:	c0400000 	.word	0xc0400000
 8007de0:	20000634 	.word	0x20000634
 8007de4:	200006e0 	.word	0x200006e0
 8007de8:	20000480 	.word	0x20000480
 8007dec:	200007c0 	.word	0x200007c0
 8007df0:	20000080 	.word	0x20000080
 8007df4:	447a0000 	.word	0x447a0000
 8007df8:	20000860 	.word	0x20000860
 8007dfc:	00000000 	.word	0x00000000
 8007e00:	20000864 	.word	0x20000864
	} else {
		// Not moving - hold target position with position control
		prismatic_axis.pos_error = prismatic_axis.position
 8007e04:	4bbc      	ldr	r3, [pc, #752]	@ (80080f8 <update_joy_mode_velocity_control+0x600>)
 8007e06:	ed93 7a00 	vldr	s14, [r3]
				- prismatic_encoder.mm;
 8007e0a:	4bbc      	ldr	r3, [pc, #752]	@ (80080fc <update_joy_mode_velocity_control+0x604>)
 8007e0c:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8007e10:	ee77 7a67 	vsub.f32	s15, s14, s15
		prismatic_axis.pos_error = prismatic_axis.position
 8007e14:	4bb8      	ldr	r3, [pc, #736]	@ (80080f8 <update_joy_mode_velocity_control+0x600>)
 8007e16:	edc3 7a05 	vstr	s15, [r3, #20]
		prismatic_axis.command_vel = PWM_Satuation(
 8007e1a:	4bb7      	ldr	r3, [pc, #732]	@ (80080f8 <update_joy_mode_velocity_control+0x600>)
 8007e1c:	edd3 7a05 	vldr	s15, [r3, #20]
 8007e20:	eeb0 0a67 	vmov.f32	s0, s15
 8007e24:	48b6      	ldr	r0, [pc, #728]	@ (8008100 <update_joy_mode_velocity_control+0x608>)
 8007e26:	f7f9 f9f7 	bl	8001218 <PID_CONTROLLER_Compute>
 8007e2a:	eeb0 8a40 	vmov.f32	s16, s0
				PID_CONTROLLER_Compute(&prismatic_position_pid,
						prismatic_axis.pos_error),
				ZGX45RGG_400RPM_Constant.sd_max,
 8007e2e:	4bb5      	ldr	r3, [pc, #724]	@ (8008104 <update_joy_mode_velocity_control+0x60c>)
 8007e30:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
		prismatic_axis.command_vel = PWM_Satuation(
 8007e34:	4610      	mov	r0, r2
 8007e36:	4619      	mov	r1, r3
 8007e38:	f7f8 fe44 	bl	8000ac4 <__aeabi_d2iz>
 8007e3c:	4604      	mov	r4, r0
				-ZGX45RGG_400RPM_Constant.sd_max);
 8007e3e:	4bb1      	ldr	r3, [pc, #708]	@ (8008104 <update_joy_mode_velocity_control+0x60c>)
 8007e40:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8007e44:	603a      	str	r2, [r7, #0]
 8007e46:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8007e4a:	607b      	str	r3, [r7, #4]
		prismatic_axis.command_vel = PWM_Satuation(
 8007e4c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007e50:	f7f8 fe38 	bl	8000ac4 <__aeabi_d2iz>
 8007e54:	4603      	mov	r3, r0
 8007e56:	4619      	mov	r1, r3
 8007e58:	4620      	mov	r0, r4
 8007e5a:	eeb0 0a48 	vmov.f32	s0, s16
 8007e5e:	f7f9 f979 	bl	8001154 <PWM_Satuation>
 8007e62:	ee07 0a90 	vmov	s15, r0
 8007e66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007e6a:	4ba3      	ldr	r3, [pc, #652]	@ (80080f8 <update_joy_mode_velocity_control+0x600>)
 8007e6c:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

		prismatic_axis.vel_error = prismatic_axis.command_vel
 8007e70:	4ba1      	ldr	r3, [pc, #644]	@ (80080f8 <update_joy_mode_velocity_control+0x600>)
 8007e72:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
				- prismatic_axis.kalman_velocity;
 8007e76:	4ba0      	ldr	r3, [pc, #640]	@ (80080f8 <update_joy_mode_velocity_control+0x600>)
 8007e78:	edd3 7a07 	vldr	s15, [r3, #28]
 8007e7c:	ee77 7a67 	vsub.f32	s15, s14, s15
		prismatic_axis.vel_error = prismatic_axis.command_vel
 8007e80:	4b9d      	ldr	r3, [pc, #628]	@ (80080f8 <update_joy_mode_velocity_control+0x600>)
 8007e82:	edc3 7a06 	vstr	s15, [r3, #24]
		prismatic_axis.command_pos = PWM_Satuation(
 8007e86:	4b9c      	ldr	r3, [pc, #624]	@ (80080f8 <update_joy_mode_velocity_control+0x600>)
 8007e88:	edd3 7a06 	vldr	s15, [r3, #24]
 8007e8c:	eeb0 0a67 	vmov.f32	s0, s15
 8007e90:	489d      	ldr	r0, [pc, #628]	@ (8008108 <update_joy_mode_velocity_control+0x610>)
 8007e92:	f7f9 f9c1 	bl	8001218 <PID_CONTROLLER_Compute>
 8007e96:	eeb0 8a40 	vmov.f32	s16, s0
				PID_CONTROLLER_Compute(&prismatic_velocity_pid,
						prismatic_axis.vel_error),
				ZGX45RGG_400RPM_Constant.U_max,
 8007e9a:	4b9a      	ldr	r3, [pc, #616]	@ (8008104 <update_joy_mode_velocity_control+0x60c>)
 8007e9c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		prismatic_axis.command_pos = PWM_Satuation(
 8007ea0:	4610      	mov	r0, r2
 8007ea2:	4619      	mov	r1, r3
 8007ea4:	f7f8 fe0e 	bl	8000ac4 <__aeabi_d2iz>
 8007ea8:	4604      	mov	r4, r0
				-ZGX45RGG_400RPM_Constant.U_max);
 8007eaa:	4b96      	ldr	r3, [pc, #600]	@ (8008104 <update_joy_mode_velocity_control+0x60c>)
 8007eac:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8007eb0:	4615      	mov	r5, r2
 8007eb2:	f083 4600 	eor.w	r6, r3, #2147483648	@ 0x80000000
		prismatic_axis.command_pos = PWM_Satuation(
 8007eb6:	4628      	mov	r0, r5
 8007eb8:	4631      	mov	r1, r6
 8007eba:	f7f8 fe03 	bl	8000ac4 <__aeabi_d2iz>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	4619      	mov	r1, r3
 8007ec2:	4620      	mov	r0, r4
 8007ec4:	eeb0 0a48 	vmov.f32	s0, s16
 8007ec8:	f7f9 f944 	bl	8001154 <PWM_Satuation>
 8007ecc:	ee07 0a90 	vmov	s15, r0
 8007ed0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007ed4:	4b88      	ldr	r3, [pc, #544]	@ (80080f8 <update_joy_mode_velocity_control+0x600>)
 8007ed6:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		// No feedforward when holding position
		prismatic_axis.ffd = 0.0f;
 8007eda:	4b87      	ldr	r3, [pc, #540]	@ (80080f8 <update_joy_mode_velocity_control+0x600>)
 8007edc:	f04f 0200 	mov.w	r2, #0
 8007ee0:	631a      	str	r2, [r3, #48]	@ 0x30
		prismatic_axis.dfd = 0.0f;
 8007ee2:	4b85      	ldr	r3, [pc, #532]	@ (80080f8 <update_joy_mode_velocity_control+0x600>)
 8007ee4:	f04f 0200 	mov.w	r2, #0
 8007ee8:	62da      	str	r2, [r3, #44]	@ 0x2c
	}

	// Update previous state for next iteration
	pris_was_moving = pris_moving;
 8007eea:	4a88      	ldr	r2, [pc, #544]	@ (800810c <update_joy_mode_velocity_control+0x614>)
 8007eec:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007ef0:	7013      	strb	r3, [r2, #0]

	prismatic_axis.command_pos += prismatic_axis.ffd + prismatic_axis.dfd;
 8007ef2:	4b81      	ldr	r3, [pc, #516]	@ (80080f8 <update_joy_mode_velocity_control+0x600>)
 8007ef4:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8007ef8:	4b7f      	ldr	r3, [pc, #508]	@ (80080f8 <update_joy_mode_velocity_control+0x600>)
 8007efa:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 8007efe:	4b7e      	ldr	r3, [pc, #504]	@ (80080f8 <update_joy_mode_velocity_control+0x600>)
 8007f00:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8007f04:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007f0c:	4b7a      	ldr	r3, [pc, #488]	@ (80080f8 <update_joy_mode_velocity_control+0x600>)
 8007f0e:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8007f12:	4b79      	ldr	r3, [pc, #484]	@ (80080f8 <update_joy_mode_velocity_control+0x600>)
 8007f14:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
			ZGX45RGG_400RPM_Constant.U_max, -ZGX45RGG_400RPM_Constant.U_max);
 8007f18:	4b7a      	ldr	r3, [pc, #488]	@ (8008104 <update_joy_mode_velocity_control+0x60c>)
 8007f1a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8007f1e:	4610      	mov	r0, r2
 8007f20:	4619      	mov	r1, r3
 8007f22:	f7f8 fdcf 	bl	8000ac4 <__aeabi_d2iz>
 8007f26:	4604      	mov	r4, r0
			ZGX45RGG_400RPM_Constant.U_max, -ZGX45RGG_400RPM_Constant.U_max);
 8007f28:	4b76      	ldr	r3, [pc, #472]	@ (8008104 <update_joy_mode_velocity_control+0x60c>)
 8007f2a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8007f2e:	4692      	mov	sl, r2
 8007f30:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
	prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8007f34:	4650      	mov	r0, sl
 8007f36:	4659      	mov	r1, fp
 8007f38:	f7f8 fdc4 	bl	8000ac4 <__aeabi_d2iz>
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	4619      	mov	r1, r3
 8007f40:	4620      	mov	r0, r4
 8007f42:	eeb0 0a48 	vmov.f32	s0, s16
 8007f46:	f7f9 f905 	bl	8001154 <PWM_Satuation>
 8007f4a:	ee07 0a90 	vmov	s15, r0
 8007f4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007f52:	4b69      	ldr	r3, [pc, #420]	@ (80080f8 <update_joy_mode_velocity_control+0x600>)
 8007f54:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	/* REVOLUTE AXIS CONTROL - SIMPLIFIED PURE PWM WITH FFD + DFD */
	float base_pwm = 0.0f;
 8007f58:	f04f 0300 	mov.w	r3, #0
 8007f5c:	61fb      	str	r3, [r7, #28]

	if (rev_moving) {
 8007f5e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d02e      	beq.n	8007fc4 <update_joy_mode_velocity_control+0x4cc>
		// Calculate base PWM proportional to joystick input
		// Scale joystick input (-50 to +50) to PWM range
		float joystick_normalized = joystick_y / 50.0f; // -1.0 to +1.0
 8007f66:	4b6a      	ldr	r3, [pc, #424]	@ (8008110 <update_joy_mode_velocity_control+0x618>)
 8007f68:	ed93 7a00 	vldr	s14, [r3]
 8007f6c:	eddf 6a69 	vldr	s13, [pc, #420]	@ 8008114 <update_joy_mode_velocity_control+0x61c>
 8007f70:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007f74:	edc7 7a04 	vstr	s15, [r7, #16]
		base_pwm = joystick_normalized
				* (ZGX45RGG_150RPM_Constant.U_max * 0.3f); // Limit to 30% max PWM for safety
 8007f78:	6938      	ldr	r0, [r7, #16]
 8007f7a:	f7f8 fab1 	bl	80004e0 <__aeabi_f2d>
 8007f7e:	4604      	mov	r4, r0
 8007f80:	460d      	mov	r5, r1
 8007f82:	4b65      	ldr	r3, [pc, #404]	@ (8008118 <update_joy_mode_velocity_control+0x620>)
 8007f84:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8007f88:	a359      	add	r3, pc, #356	@ (adr r3, 80080f0 <update_joy_mode_velocity_control+0x5f8>)
 8007f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f8e:	f7f8 faff 	bl	8000590 <__aeabi_dmul>
 8007f92:	4602      	mov	r2, r0
 8007f94:	460b      	mov	r3, r1
 8007f96:	4620      	mov	r0, r4
 8007f98:	4629      	mov	r1, r5
 8007f9a:	f7f8 faf9 	bl	8000590 <__aeabi_dmul>
 8007f9e:	4602      	mov	r2, r0
 8007fa0:	460b      	mov	r3, r1
		base_pwm = joystick_normalized
 8007fa2:	4610      	mov	r0, r2
 8007fa4:	4619      	mov	r1, r3
 8007fa6:	f7f8 fdd5 	bl	8000b54 <__aeabi_d2f>
 8007faa:	4603      	mov	r3, r0
 8007fac:	61fb      	str	r3, [r7, #28]

		// Add velocity feedforward
		revolute_axis.ffd = REVOLUTE_MOTOR_FFD_Compute(&revolute_motor_ffd,
 8007fae:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8007fb2:	485a      	ldr	r0, [pc, #360]	@ (800811c <update_joy_mode_velocity_control+0x624>)
 8007fb4:	f7f9 faf0 	bl	8001598 <REVOLUTE_MOTOR_FFD_Compute>
 8007fb8:	eef0 7a40 	vmov.f32	s15, s0
 8007fbc:	4b58      	ldr	r3, [pc, #352]	@ (8008120 <update_joy_mode_velocity_control+0x628>)
 8007fbe:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
 8007fc2:	e006      	b.n	8007fd2 <update_joy_mode_velocity_control+0x4da>
				rev_command_vel);
	} else {
		// Joystick released - no base PWM, only compensation
		base_pwm = 0.0f;
 8007fc4:	f04f 0300 	mov.w	r3, #0
 8007fc8:	61fb      	str	r3, [r7, #28]
		revolute_axis.ffd = 0.0f;
 8007fca:	4b55      	ldr	r3, [pc, #340]	@ (8008120 <update_joy_mode_velocity_control+0x628>)
 8007fcc:	f04f 0200 	mov.w	r2, #0
 8007fd0:	631a      	str	r2, [r3, #48]	@ 0x30
	}

	// Always add gravity/disturbance compensation
	revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8007fd2:	4b54      	ldr	r3, [pc, #336]	@ (8008124 <update_joy_mode_velocity_control+0x62c>)
 8007fd4:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
			revolute_encoder.rads, prismatic_encoder.mm / 1000.0f);
 8007fd8:	4b48      	ldr	r3, [pc, #288]	@ (80080fc <update_joy_mode_velocity_control+0x604>)
 8007fda:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
	revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8007fde:	ed9f 6a52 	vldr	s12, [pc, #328]	@ 8008128 <update_joy_mode_velocity_control+0x630>
 8007fe2:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8007fe6:	eef0 0a66 	vmov.f32	s1, s13
 8007fea:	eeb0 0a47 	vmov.f32	s0, s14
 8007fee:	484f      	ldr	r0, [pc, #316]	@ (800812c <update_joy_mode_velocity_control+0x634>)
 8007ff0:	f7f9 fb65 	bl	80016be <REVOLUTE_MOTOR_DFD_Compute>
 8007ff4:	eef0 7a40 	vmov.f32	s15, s0
 8007ff8:	4b49      	ldr	r3, [pc, #292]	@ (8008120 <update_joy_mode_velocity_control+0x628>)
 8007ffa:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

	// Apply filtering to feedforward terms for stability
	static float ffd_filtered = 0.0f;
	static float dfd_filtered = 0.0f;

	ffd_filtered = 0.8f * ffd_filtered + 0.2f * revolute_axis.ffd;
 8007ffe:	4b4c      	ldr	r3, [pc, #304]	@ (8008130 <update_joy_mode_velocity_control+0x638>)
 8008000:	edd3 7a00 	vldr	s15, [r3]
 8008004:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8008134 <update_joy_mode_velocity_control+0x63c>
 8008008:	ee27 7a87 	vmul.f32	s14, s15, s14
 800800c:	4b44      	ldr	r3, [pc, #272]	@ (8008120 <update_joy_mode_velocity_control+0x628>)
 800800e:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8008012:	eddf 6a49 	vldr	s13, [pc, #292]	@ 8008138 <update_joy_mode_velocity_control+0x640>
 8008016:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800801a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800801e:	4b44      	ldr	r3, [pc, #272]	@ (8008130 <update_joy_mode_velocity_control+0x638>)
 8008020:	edc3 7a00 	vstr	s15, [r3]
	dfd_filtered = 0.8f * dfd_filtered + 0.2f * revolute_axis.dfd;
 8008024:	4b45      	ldr	r3, [pc, #276]	@ (800813c <update_joy_mode_velocity_control+0x644>)
 8008026:	edd3 7a00 	vldr	s15, [r3]
 800802a:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8008134 <update_joy_mode_velocity_control+0x63c>
 800802e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8008032:	4b3b      	ldr	r3, [pc, #236]	@ (8008120 <update_joy_mode_velocity_control+0x628>)
 8008034:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8008038:	eddf 6a3f 	vldr	s13, [pc, #252]	@ 8008138 <update_joy_mode_velocity_control+0x640>
 800803c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008040:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008044:	4b3d      	ldr	r3, [pc, #244]	@ (800813c <update_joy_mode_velocity_control+0x644>)
 8008046:	edc3 7a00 	vstr	s15, [r3]

	// Combine base PWM with feedforward compensation
	revolute_axis.command_pos = base_pwm
			+ 0.01f * (ffd_filtered + dfd_filtered);
 800804a:	4b39      	ldr	r3, [pc, #228]	@ (8008130 <update_joy_mode_velocity_control+0x638>)
 800804c:	ed93 7a00 	vldr	s14, [r3]
 8008050:	4b3a      	ldr	r3, [pc, #232]	@ (800813c <update_joy_mode_velocity_control+0x644>)
 8008052:	edd3 7a00 	vldr	s15, [r3]
 8008056:	ee77 7a27 	vadd.f32	s15, s14, s15
 800805a:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8008140 <update_joy_mode_velocity_control+0x648>
 800805e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8008062:	edd7 7a07 	vldr	s15, [r7, #28]
 8008066:	ee77 7a27 	vadd.f32	s15, s14, s15
	revolute_axis.command_pos = base_pwm
 800806a:	4b2d      	ldr	r3, [pc, #180]	@ (8008120 <update_joy_mode_velocity_control+0x628>)
 800806c:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	// Saturate final command
	revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8008070:	4b2b      	ldr	r3, [pc, #172]	@ (8008120 <update_joy_mode_velocity_control+0x628>)
 8008072:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
			ZGX45RGG_150RPM_Constant.U_max, -ZGX45RGG_150RPM_Constant.U_max);
 8008076:	4b28      	ldr	r3, [pc, #160]	@ (8008118 <update_joy_mode_velocity_control+0x620>)
 8008078:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 800807c:	4610      	mov	r0, r2
 800807e:	4619      	mov	r1, r3
 8008080:	f7f8 fd20 	bl	8000ac4 <__aeabi_d2iz>
 8008084:	4604      	mov	r4, r0
			ZGX45RGG_150RPM_Constant.U_max, -ZGX45RGG_150RPM_Constant.U_max);
 8008086:	4b24      	ldr	r3, [pc, #144]	@ (8008118 <update_joy_mode_velocity_control+0x620>)
 8008088:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800808c:	4690      	mov	r8, r2
 800808e:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
	revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8008092:	4640      	mov	r0, r8
 8008094:	4649      	mov	r1, r9
 8008096:	f7f8 fd15 	bl	8000ac4 <__aeabi_d2iz>
 800809a:	4603      	mov	r3, r0
 800809c:	4619      	mov	r1, r3
 800809e:	4620      	mov	r0, r4
 80080a0:	eeb0 0a48 	vmov.f32	s0, s16
 80080a4:	f7f9 f856 	bl	8001154 <PWM_Satuation>
 80080a8:	ee07 0a90 	vmov	s15, r0
 80080ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80080b0:	4b1b      	ldr	r3, [pc, #108]	@ (8008120 <update_joy_mode_velocity_control+0x628>)
 80080b2:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	// Apply motor commands
	MDXX_set_range(&prismatic_motor, 2000, prismatic_axis.command_pos);
 80080b6:	4b10      	ldr	r3, [pc, #64]	@ (80080f8 <update_joy_mode_velocity_control+0x600>)
 80080b8:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80080bc:	eef0 0a67 	vmov.f32	s1, s15
 80080c0:	ed9f 0a20 	vldr	s0, [pc, #128]	@ 8008144 <update_joy_mode_velocity_control+0x64c>
 80080c4:	4820      	ldr	r0, [pc, #128]	@ (8008148 <update_joy_mode_velocity_control+0x650>)
 80080c6:	f7f9 f97f 	bl	80013c8 <MDXX_set_range>
	MDXX_set_range(&revolute_motor, 2000, revolute_axis.command_pos);
 80080ca:	4b15      	ldr	r3, [pc, #84]	@ (8008120 <update_joy_mode_velocity_control+0x628>)
 80080cc:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80080d0:	eef0 0a67 	vmov.f32	s1, s15
 80080d4:	ed9f 0a1b 	vldr	s0, [pc, #108]	@ 8008144 <update_joy_mode_velocity_control+0x64c>
 80080d8:	481c      	ldr	r0, [pc, #112]	@ (800814c <update_joy_mode_velocity_control+0x654>)
 80080da:	f7f9 f975 	bl	80013c8 <MDXX_set_range>
}
 80080de:	bf00      	nop
 80080e0:	3734      	adds	r7, #52	@ 0x34
 80080e2:	46bd      	mov	sp, r7
 80080e4:	ecbd 8b02 	vpop	{d8}
 80080e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080ec:	f3af 8000 	nop.w
 80080f0:	40000000 	.word	0x40000000
 80080f4:	3fd33333 	.word	0x3fd33333
 80080f8:	20000480 	.word	0x20000480
 80080fc:	200006e0 	.word	0x200006e0
 8008100:	20000798 	.word	0x20000798
 8008104:	20000080 	.word	0x20000080
 8008108:	200007c0 	.word	0x200007c0
 800810c:	20000634 	.word	0x20000634
 8008110:	20001bb4 	.word	0x20001bb4
 8008114:	42480000 	.word	0x42480000
 8008118:	20000000 	.word	0x20000000
 800811c:	2000086c 	.word	0x2000086c
 8008120:	200004c4 	.word	0x200004c4
 8008124:	2000073c 	.word	0x2000073c
 8008128:	447a0000 	.word	0x447a0000
 800812c:	20000870 	.word	0x20000870
 8008130:	20000638 	.word	0x20000638
 8008134:	3f4ccccd 	.word	0x3f4ccccd
 8008138:	3e4ccccd 	.word	0x3e4ccccd
 800813c:	2000063c 	.word	0x2000063c
 8008140:	3c23d70a 	.word	0x3c23d70a
 8008144:	44fa0000 	.word	0x44fa0000
 8008148:	20000648 	.word	0x20000648
 800814c:	20000694 	.word	0x20000694

08008150 <update_joy_mode_pilot_light>:

void update_joy_mode_pilot_light(void) {
 8008150:	b580      	push	{r7, lr}
 8008152:	af00      	add	r7, sp, #0
	if (joy_mode_state == JOY_MODE_POSITION_SAVED) {
 8008154:	4b14      	ldr	r3, [pc, #80]	@ (80081a8 <update_joy_mode_pilot_light+0x58>)
 8008156:	781b      	ldrb	r3, [r3, #0]
 8008158:	2b03      	cmp	r3, #3
 800815a:	d122      	bne.n	80081a2 <update_joy_mode_pilot_light+0x52>
		// Toggle pilot light every 1 second when 10 positions are saved
		joy_mode_pilot_timer++;
 800815c:	4b13      	ldr	r3, [pc, #76]	@ (80081ac <update_joy_mode_pilot_light+0x5c>)
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	3301      	adds	r3, #1
 8008162:	4a12      	ldr	r2, [pc, #72]	@ (80081ac <update_joy_mode_pilot_light+0x5c>)
 8008164:	6013      	str	r3, [r2, #0]
		if (joy_mode_pilot_timer >= JOY_MODE_PILOT_TOGGLE_PERIOD) {
 8008166:	4b11      	ldr	r3, [pc, #68]	@ (80081ac <update_joy_mode_pilot_light+0x5c>)
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800816e:	d318      	bcc.n	80081a2 <update_joy_mode_pilot_light+0x52>
			HAL_GPIO_TogglePin(PILOT_GPIO_Port, PILOT_Pin);
 8008170:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8008174:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8008178:	f004 fdd2 	bl	800cd20 <HAL_GPIO_TogglePin>
			joy_mode_pilot_state = !joy_mode_pilot_state;
 800817c:	4b0c      	ldr	r3, [pc, #48]	@ (80081b0 <update_joy_mode_pilot_light+0x60>)
 800817e:	781b      	ldrb	r3, [r3, #0]
 8008180:	b2db      	uxtb	r3, r3
 8008182:	2b00      	cmp	r3, #0
 8008184:	bf14      	ite	ne
 8008186:	2301      	movne	r3, #1
 8008188:	2300      	moveq	r3, #0
 800818a:	b2db      	uxtb	r3, r3
 800818c:	f083 0301 	eor.w	r3, r3, #1
 8008190:	b2db      	uxtb	r3, r3
 8008192:	f003 0301 	and.w	r3, r3, #1
 8008196:	b2da      	uxtb	r2, r3
 8008198:	4b05      	ldr	r3, [pc, #20]	@ (80081b0 <update_joy_mode_pilot_light+0x60>)
 800819a:	701a      	strb	r2, [r3, #0]
			joy_mode_pilot_timer = 0;
 800819c:	4b03      	ldr	r3, [pc, #12]	@ (80081ac <update_joy_mode_pilot_light+0x5c>)
 800819e:	2200      	movs	r2, #0
 80081a0:	601a      	str	r2, [r3, #0]
		}
	}
}
 80081a2:	bf00      	nop
 80081a4:	bd80      	pop	{r7, pc}
 80081a6:	bf00      	nop
 80081a8:	20000580 	.word	0x20000580
 80081ac:	200005d8 	.word	0x200005d8
 80081b0:	200005dc 	.word	0x200005dc

080081b4 <update_joy_mode>:

void update_joy_mode(void) {
 80081b4:	b590      	push	{r4, r7, lr}
 80081b6:	ed2d 8b02 	vpush	{d8}
 80081ba:	b085      	sub	sp, #20
 80081bc:	af00      	add	r7, sp, #0
	if (!joy_mode_active) {
 80081be:	4b98      	ldr	r3, [pc, #608]	@ (8008420 <update_joy_mode+0x26c>)
 80081c0:	781b      	ldrb	r3, [r3, #0]
 80081c2:	f083 0301 	eor.w	r3, r3, #1
 80081c6:	b2db      	uxtb	r3, r3
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	f040 81d5 	bne.w	8008578 <update_joy_mode+0x3c4>
		return;
	}

	// ALWAYS update position display values when in joy mode
	normalized_position = normalize_angle(revolute_encoder.rads);
 80081ce:	4b95      	ldr	r3, [pc, #596]	@ (8008424 <update_joy_mode+0x270>)
 80081d0:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80081d4:	eeb0 0a67 	vmov.f32	s0, s15
 80081d8:	f7fd ffbe 	bl	8006158 <normalize_angle>
 80081dc:	eef0 7a40 	vmov.f32	s15, s0
 80081e0:	4b91      	ldr	r3, [pc, #580]	@ (8008428 <update_joy_mode+0x274>)
 80081e2:	edc3 7a00 	vstr	s15, [r3]
	prismatic_axis.mm = prismatic_encoder.mm;
 80081e6:	4b91      	ldr	r3, [pc, #580]	@ (800842c <update_joy_mode+0x278>)
 80081e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80081ea:	4a91      	ldr	r2, [pc, #580]	@ (8008430 <update_joy_mode+0x27c>)
 80081ec:	6393      	str	r3, [r2, #56]	@ 0x38
	revolute_axis.deg = UnitConverter_angle(&converter_system,
 80081ee:	4b8e      	ldr	r3, [pc, #568]	@ (8008428 <update_joy_mode+0x274>)
 80081f0:	edd3 7a00 	vldr	s15, [r3]
 80081f4:	220e      	movs	r2, #14
 80081f6:	210f      	movs	r1, #15
 80081f8:	eeb0 0a67 	vmov.f32	s0, s15
 80081fc:	488d      	ldr	r0, [pc, #564]	@ (8008434 <update_joy_mode+0x280>)
 80081fe:	f7fc fd07 	bl	8004c10 <UnitConverter_angle>
 8008202:	eef0 7a40 	vmov.f32	s15, s0
 8008206:	4b8c      	ldr	r3, [pc, #560]	@ (8008438 <update_joy_mode+0x284>)
 8008208:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
			normalized_position, UNIT_RADIAN, UNIT_DEGREE);

	switch (joy_mode_state) {
 800820c:	4b8b      	ldr	r3, [pc, #556]	@ (800843c <update_joy_mode+0x288>)
 800820e:	781b      	ldrb	r3, [r3, #0]
 8008210:	3b01      	subs	r3, #1
 8008212:	2b04      	cmp	r3, #4
 8008214:	f200 81b2 	bhi.w	800857c <update_joy_mode+0x3c8>
 8008218:	a201      	add	r2, pc, #4	@ (adr r2, 8008220 <update_joy_mode+0x6c>)
 800821a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800821e:	bf00      	nop
 8008220:	08008235 	.word	0x08008235
 8008224:	0800823b 	.word	0x0800823b
 8008228:	08008241 	.word	0x08008241
 800822c:	0800824f 	.word	0x0800824f
 8008230:	08008573 	.word	0x08008573
	case JOY_MODE_INITIAL_CONTROL:
		// Initial manual joystick control - no position saving yet
		update_joy_mode_velocity_control();
 8008234:	f7ff fc60 	bl	8007af8 <update_joy_mode_velocity_control>
		break;
 8008238:	e1a3      	b.n	8008582 <update_joy_mode+0x3ce>

	case JOY_MODE_MANUAL_CONTROL:
		// Manual joystick control with position saving enabled
		update_joy_mode_velocity_control();
 800823a:	f7ff fc5d 	bl	8007af8 <update_joy_mode_velocity_control>
		break;
 800823e:	e1a0      	b.n	8008582 <update_joy_mode+0x3ce>

	case JOY_MODE_POSITION_SAVED:
		revolute_axis.position = revolute_encoder.rads;
 8008240:	4b78      	ldr	r3, [pc, #480]	@ (8008424 <update_joy_mode+0x270>)
 8008242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008244:	4a7c      	ldr	r2, [pc, #496]	@ (8008438 <update_joy_mode+0x284>)
 8008246:	6013      	str	r3, [r2, #0]
		// 10 positions saved, pilot light toggling, waiting for B2 to start playback
		update_joy_mode_pilot_light();
 8008248:	f7ff ff82 	bl	8008150 <update_joy_mode_pilot_light>
		break;
 800824c:	e199      	b.n	8008582 <update_joy_mode+0x3ce>

	case JOY_MODE_PLAYBACK:
//		revolute_axis.position = revolute_encoder.rads;
		// Playing back saved positions - PILOT LIGHT STAYS ON
		// Handle trajectory sequence states for joy mode playback
		switch (motion_sequence_state) {
 800824e:	4b7c      	ldr	r3, [pc, #496]	@ (8008440 <update_joy_mode+0x28c>)
 8008250:	781b      	ldrb	r3, [r3, #0]
 8008252:	2b06      	cmp	r3, #6
 8008254:	f200 8175 	bhi.w	8008542 <update_joy_mode+0x38e>
 8008258:	a201      	add	r2, pc, #4	@ (adr r2, 8008260 <update_joy_mode+0xac>)
 800825a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800825e:	bf00      	nop
 8008260:	0800827d 	.word	0x0800827d
 8008264:	0800830f 	.word	0x0800830f
 8008268:	08008333 	.word	0x08008333
 800826c:	08008479 	.word	0x08008479
 8008270:	08008543 	.word	0x08008543
 8008274:	0800851d 	.word	0x0800851d
 8008278:	0800853b 	.word	0x0800853b
		case MOTION_IDLE:
			// Current trajectory finished, wait before starting next

			joy_mode_playback_timer++;
 800827c:	4b71      	ldr	r3, [pc, #452]	@ (8008444 <update_joy_mode+0x290>)
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	3301      	adds	r3, #1
 8008282:	4a70      	ldr	r2, [pc, #448]	@ (8008444 <update_joy_mode+0x290>)
 8008284:	6013      	str	r3, [r2, #0]
			if (joy_mode_playback_timer >= JOY_MODE_PLAYBACK_DELAY) {
 8008286:	4b6f      	ldr	r3, [pc, #444]	@ (8008444 <update_joy_mode+0x290>)
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800828e:	f0c0 815a 	bcc.w	8008546 <update_joy_mode+0x392>
				playback_position_index++;
 8008292:	4b6d      	ldr	r3, [pc, #436]	@ (8008448 <update_joy_mode+0x294>)
 8008294:	781b      	ldrb	r3, [r3, #0]
 8008296:	3301      	adds	r3, #1
 8008298:	b2da      	uxtb	r2, r3
 800829a:	4b6b      	ldr	r3, [pc, #428]	@ (8008448 <update_joy_mode+0x294>)
 800829c:	701a      	strb	r2, [r3, #0]
				if (playback_position_index < saved_position_count) {
 800829e:	4b6a      	ldr	r3, [pc, #424]	@ (8008448 <update_joy_mode+0x294>)
 80082a0:	781a      	ldrb	r2, [r3, #0]
 80082a2:	4b6a      	ldr	r3, [pc, #424]	@ (800844c <update_joy_mode+0x298>)
 80082a4:	781b      	ldrb	r3, [r3, #0]
 80082a6:	429a      	cmp	r2, r3
 80082a8:	d229      	bcs.n	80082fe <update_joy_mode+0x14a>
					// Start next trajectory
					float target_pris =
							saved_positions[playback_position_index].prismatic_pos;
 80082aa:	4b67      	ldr	r3, [pc, #412]	@ (8008448 <update_joy_mode+0x294>)
 80082ac:	781b      	ldrb	r3, [r3, #0]
					float target_pris =
 80082ae:	4a68      	ldr	r2, [pc, #416]	@ (8008450 <update_joy_mode+0x29c>)
 80082b0:	00db      	lsls	r3, r3, #3
 80082b2:	4413      	add	r3, r2
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	60fb      	str	r3, [r7, #12]
					float target_rev_rad =
							saved_positions[playback_position_index].revolute_pos;
 80082b8:	4b63      	ldr	r3, [pc, #396]	@ (8008448 <update_joy_mode+0x294>)
 80082ba:	781b      	ldrb	r3, [r3, #0]
					float target_rev_rad =
 80082bc:	4a64      	ldr	r2, [pc, #400]	@ (8008450 <update_joy_mode+0x29c>)
 80082be:	00db      	lsls	r3, r3, #3
 80082c0:	4413      	add	r3, r2
 80082c2:	3304      	adds	r3, #4
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	60bb      	str	r3, [r7, #8]
					float target_rev_deg = target_rev_rad * 180.0f / PI;
 80082c8:	edd7 7a02 	vldr	s15, [r7, #8]
 80082cc:	ed9f 7a61 	vldr	s14, [pc, #388]	@ 8008454 <update_joy_mode+0x2a0>
 80082d0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80082d4:	eddf 6a60 	vldr	s13, [pc, #384]	@ 8008458 <update_joy_mode+0x2a4>
 80082d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80082dc:	edc7 7a01 	vstr	s15, [r7, #4]
					check[1]++;
 80082e0:	4b5e      	ldr	r3, [pc, #376]	@ (800845c <update_joy_mode+0x2a8>)
 80082e2:	685b      	ldr	r3, [r3, #4]
 80082e4:	3301      	adds	r3, #1
 80082e6:	4a5d      	ldr	r2, [pc, #372]	@ (800845c <update_joy_mode+0x2a8>)
 80082e8:	6053      	str	r3, [r2, #4]
					start_combined_trajectory(target_pris, target_rev_deg);
 80082ea:	edd7 0a01 	vldr	s1, [r7, #4]
 80082ee:	ed97 0a03 	vldr	s0, [r7, #12]
 80082f2:	f7fe f81b 	bl	800632c <start_combined_trajectory>
					joy_mode_playback_timer = 0;
 80082f6:	4b53      	ldr	r3, [pc, #332]	@ (8008444 <update_joy_mode+0x290>)
 80082f8:	2200      	movs	r2, #0
 80082fa:	601a      	str	r2, [r3, #0]

					// Optional: Add some indication that playback is complete
					// You could flash the pilot light or set a status flag here
				}
			}
			break;
 80082fc:	e123      	b.n	8008546 <update_joy_mode+0x392>
					check[9]++;
 80082fe:	4b57      	ldr	r3, [pc, #348]	@ (800845c <update_joy_mode+0x2a8>)
 8008300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008302:	3301      	adds	r3, #1
 8008304:	4a55      	ldr	r2, [pc, #340]	@ (800845c <update_joy_mode+0x2a8>)
 8008306:	6253      	str	r3, [r2, #36]	@ 0x24
					exit_joy_mode();
 8008308:	f7ff fa18 	bl	800773c <exit_joy_mode>
			break;
 800830c:	e11b      	b.n	8008546 <update_joy_mode+0x392>

		case MOTION_PEN_UP_DELAY:
			// INCREMENT motion_delay_timer here for joy mode
			if (++motion_delay_timer >= 1500) {
 800830e:	4b54      	ldr	r3, [pc, #336]	@ (8008460 <update_joy_mode+0x2ac>)
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	3301      	adds	r3, #1
 8008314:	4a52      	ldr	r2, [pc, #328]	@ (8008460 <update_joy_mode+0x2ac>)
 8008316:	6013      	str	r3, [r2, #0]
 8008318:	f240 52db 	movw	r2, #1499	@ 0x5db
 800831c:	4293      	cmp	r3, r2
 800831e:	f240 8114 	bls.w	800854a <update_joy_mode+0x396>
				prismatic_axis.trajectory_active = true;
 8008322:	4b43      	ldr	r3, [pc, #268]	@ (8008430 <update_joy_mode+0x27c>)
 8008324:	2201      	movs	r2, #1
 8008326:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
				motion_sequence_state = MOTION_PRISMATIC_ACTIVE;
 800832a:	4b45      	ldr	r3, [pc, #276]	@ (8008440 <update_joy_mode+0x28c>)
 800832c:	2202      	movs	r2, #2
 800832e:	701a      	strb	r2, [r3, #0]
			}
			break;
 8008330:	e10b      	b.n	800854a <update_joy_mode+0x396>

		case MOTION_PRISMATIC_ACTIVE:
			check[6]++;
 8008332:	4b4a      	ldr	r3, [pc, #296]	@ (800845c <update_joy_mode+0x2a8>)
 8008334:	699b      	ldr	r3, [r3, #24]
 8008336:	3301      	adds	r3, #1
 8008338:	4a48      	ldr	r2, [pc, #288]	@ (800845c <update_joy_mode+0x2a8>)
 800833a:	6193      	str	r3, [r2, #24]
			if (prismatic_axis.trajectory_active && !prisEva.isFinised) {
 800833c:	4b3c      	ldr	r3, [pc, #240]	@ (8008430 <update_joy_mode+0x27c>)
 800833e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008342:	2b00      	cmp	r3, #0
 8008344:	f000 8103 	beq.w	800854e <update_joy_mode+0x39a>
 8008348:	4b46      	ldr	r3, [pc, #280]	@ (8008464 <update_joy_mode+0x2b0>)
 800834a:	7c1b      	ldrb	r3, [r3, #16]
 800834c:	f083 0301 	eor.w	r3, r3, #1
 8008350:	b2db      	uxtb	r3, r3
 8008352:	2b00      	cmp	r3, #0
 8008354:	f000 80fb 	beq.w	800854e <update_joy_mode+0x39a>
				Trapezoidal_Evaluated(&prisGen, &prisEva,
 8008358:	4b35      	ldr	r3, [pc, #212]	@ (8008430 <update_joy_mode+0x27c>)
 800835a:	ed93 8a03 	vldr	s16, [r3, #12]
 800835e:	4b34      	ldr	r3, [pc, #208]	@ (8008430 <update_joy_mode+0x27c>)
 8008360:	edd3 8a04 	vldr	s17, [r3, #16]
						prismatic_axis.initial_pos, prismatic_axis.target_pos,
						ZGX45RGG_400RPM_Constant.traject_sd_max,
 8008364:	4b40      	ldr	r3, [pc, #256]	@ (8008468 <update_joy_mode+0x2b4>)
 8008366:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
				Trapezoidal_Evaluated(&prisGen, &prisEva,
 800836a:	4610      	mov	r0, r2
 800836c:	4619      	mov	r1, r3
 800836e:	f7f8 fbf1 	bl	8000b54 <__aeabi_d2f>
 8008372:	4604      	mov	r4, r0
						ZGX45RGG_400RPM_Constant.traject_sdd_max);
 8008374:	4b3c      	ldr	r3, [pc, #240]	@ (8008468 <update_joy_mode+0x2b4>)
 8008376:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
				Trapezoidal_Evaluated(&prisGen, &prisEva,
 800837a:	4610      	mov	r0, r2
 800837c:	4619      	mov	r1, r3
 800837e:	f7f8 fbe9 	bl	8000b54 <__aeabi_d2f>
 8008382:	4603      	mov	r3, r0
 8008384:	ee01 3a90 	vmov	s3, r3
 8008388:	ee01 4a10 	vmov	s2, r4
 800838c:	eef0 0a68 	vmov.f32	s1, s17
 8008390:	eeb0 0a48 	vmov.f32	s0, s16
 8008394:	4933      	ldr	r1, [pc, #204]	@ (8008464 <update_joy_mode+0x2b0>)
 8008396:	4835      	ldr	r0, [pc, #212]	@ (800846c <update_joy_mode+0x2b8>)
 8008398:	f7fc f8a2 	bl	80044e0 <Trapezoidal_Evaluated>

				prismatic_axis.position = prisEva.setposition;
 800839c:	4b31      	ldr	r3, [pc, #196]	@ (8008464 <update_joy_mode+0x2b0>)
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	4a23      	ldr	r2, [pc, #140]	@ (8008430 <update_joy_mode+0x27c>)
 80083a2:	6013      	str	r3, [r2, #0]
				prismatic_axis.velocity = prisEva.setvelocity;
 80083a4:	4b2f      	ldr	r3, [pc, #188]	@ (8008464 <update_joy_mode+0x2b0>)
 80083a6:	685b      	ldr	r3, [r3, #4]
 80083a8:	4a21      	ldr	r2, [pc, #132]	@ (8008430 <update_joy_mode+0x27c>)
 80083aa:	6053      	str	r3, [r2, #4]

				if (prisEva.isFinised) {
 80083ac:	4b2d      	ldr	r3, [pc, #180]	@ (8008464 <update_joy_mode+0x2b0>)
 80083ae:	7c1b      	ldrb	r3, [r3, #16]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	f000 80cc 	beq.w	800854e <update_joy_mode+0x39a>
					prismatic_axis.trajectory_active = false;
 80083b6:	4b1e      	ldr	r3, [pc, #120]	@ (8008430 <update_joy_mode+0x27c>)
 80083b8:	2200      	movs	r2, #0
 80083ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
					prismatic_axis.position = prisEva.setposition;
 80083be:	4b29      	ldr	r3, [pc, #164]	@ (8008464 <update_joy_mode+0x2b0>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	4a1b      	ldr	r2, [pc, #108]	@ (8008430 <update_joy_mode+0x27c>)
 80083c4:	6013      	str	r3, [r2, #0]
					prismatic_axis.velocity = 0.0f;
 80083c6:	4b1a      	ldr	r3, [pc, #104]	@ (8008430 <update_joy_mode+0x27c>)
 80083c8:	f04f 0200 	mov.w	r2, #0
 80083cc:	605a      	str	r2, [r3, #4]

					Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 80083ce:	4b1a      	ldr	r3, [pc, #104]	@ (8008438 <update_joy_mode+0x284>)
 80083d0:	ed93 8a03 	vldr	s16, [r3, #12]
 80083d4:	4b18      	ldr	r3, [pc, #96]	@ (8008438 <update_joy_mode+0x284>)
 80083d6:	edd3 8a04 	vldr	s17, [r3, #16]
							revolute_axis.target_pos,
							ZGX45RGG_150RPM_Constant.traject_qd_max,
 80083da:	4b25      	ldr	r3, [pc, #148]	@ (8008470 <update_joy_mode+0x2bc>)
 80083dc:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
					Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 80083e0:	4610      	mov	r0, r2
 80083e2:	4619      	mov	r1, r3
 80083e4:	f7f8 fbb6 	bl	8000b54 <__aeabi_d2f>
 80083e8:	4604      	mov	r4, r0
							ZGX45RGG_150RPM_Constant.traject_qdd_max);
 80083ea:	4b21      	ldr	r3, [pc, #132]	@ (8008470 <update_joy_mode+0x2bc>)
 80083ec:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
					Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 80083f0:	4610      	mov	r0, r2
 80083f2:	4619      	mov	r1, r3
 80083f4:	f7f8 fbae 	bl	8000b54 <__aeabi_d2f>
 80083f8:	4603      	mov	r3, r0
 80083fa:	ee01 3a90 	vmov	s3, r3
 80083fe:	ee01 4a10 	vmov	s2, r4
 8008402:	eef0 0a68 	vmov.f32	s1, s17
 8008406:	eeb0 0a48 	vmov.f32	s0, s16
 800840a:	481a      	ldr	r0, [pc, #104]	@ (8008474 <update_joy_mode+0x2c0>)
 800840c:	f7fb ffa6 	bl	800435c <Trapezoidal_Generator>

					revolute_axis.trajectory_active = true;
 8008410:	4b09      	ldr	r3, [pc, #36]	@ (8008438 <update_joy_mode+0x284>)
 8008412:	2201      	movs	r2, #1
 8008414:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
					motion_sequence_state = MOTION_REVOLUTE_ACTIVE;
 8008418:	4b09      	ldr	r3, [pc, #36]	@ (8008440 <update_joy_mode+0x28c>)
 800841a:	2203      	movs	r2, #3
 800841c:	701a      	strb	r2, [r3, #0]
				}
			}
			break;
 800841e:	e096      	b.n	800854e <update_joy_mode+0x39a>
 8008420:	20000581 	.word	0x20000581
 8008424:	2000073c 	.word	0x2000073c
 8008428:	20000578 	.word	0x20000578
 800842c:	200006e0 	.word	0x200006e0
 8008430:	20000480 	.word	0x20000480
 8008434:	20000ad4 	.word	0x20000ad4
 8008438:	200004c4 	.word	0x200004c4
 800843c:	20000580 	.word	0x20000580
 8008440:	20000508 	.word	0x20000508
 8008444:	200005e0 	.word	0x200005e0
 8008448:	200005d5 	.word	0x200005d5
 800844c:	200005d4 	.word	0x200005d4
 8008450:	20000584 	.word	0x20000584
 8008454:	43340000 	.word	0x43340000
 8008458:	40490fdb 	.word	0x40490fdb
 800845c:	200005e8 	.word	0x200005e8
 8008460:	2000055c 	.word	0x2000055c
 8008464:	20000534 	.word	0x20000534
 8008468:	20000080 	.word	0x20000080
 800846c:	2000050c 	.word	0x2000050c
 8008470:	20000000 	.word	0x20000000
 8008474:	20000520 	.word	0x20000520

		case MOTION_REVOLUTE_ACTIVE:
			check[7]++;
 8008478:	4b44      	ldr	r3, [pc, #272]	@ (800858c <update_joy_mode+0x3d8>)
 800847a:	69db      	ldr	r3, [r3, #28]
 800847c:	3301      	adds	r3, #1
 800847e:	4a43      	ldr	r2, [pc, #268]	@ (800858c <update_joy_mode+0x3d8>)
 8008480:	61d3      	str	r3, [r2, #28]
			if (revolute_axis.trajectory_active && !revEva.isFinised) {
 8008482:	4b43      	ldr	r3, [pc, #268]	@ (8008590 <update_joy_mode+0x3dc>)
 8008484:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008488:	2b00      	cmp	r3, #0
 800848a:	d062      	beq.n	8008552 <update_joy_mode+0x39e>
 800848c:	4b41      	ldr	r3, [pc, #260]	@ (8008594 <update_joy_mode+0x3e0>)
 800848e:	7c1b      	ldrb	r3, [r3, #16]
 8008490:	f083 0301 	eor.w	r3, r3, #1
 8008494:	b2db      	uxtb	r3, r3
 8008496:	2b00      	cmp	r3, #0
 8008498:	d05b      	beq.n	8008552 <update_joy_mode+0x39e>
				Trapezoidal_Evaluated(&revGen, &revEva,
 800849a:	4b3d      	ldr	r3, [pc, #244]	@ (8008590 <update_joy_mode+0x3dc>)
 800849c:	ed93 8a03 	vldr	s16, [r3, #12]
 80084a0:	4b3b      	ldr	r3, [pc, #236]	@ (8008590 <update_joy_mode+0x3dc>)
 80084a2:	edd3 8a04 	vldr	s17, [r3, #16]
						revolute_axis.initial_pos, revolute_axis.target_pos,
						ZGX45RGG_150RPM_Constant.traject_qd_max,
 80084a6:	4b3c      	ldr	r3, [pc, #240]	@ (8008598 <update_joy_mode+0x3e4>)
 80084a8:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
				Trapezoidal_Evaluated(&revGen, &revEva,
 80084ac:	4610      	mov	r0, r2
 80084ae:	4619      	mov	r1, r3
 80084b0:	f7f8 fb50 	bl	8000b54 <__aeabi_d2f>
 80084b4:	4604      	mov	r4, r0
						ZGX45RGG_150RPM_Constant.traject_qdd_max);
 80084b6:	4b38      	ldr	r3, [pc, #224]	@ (8008598 <update_joy_mode+0x3e4>)
 80084b8:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
				Trapezoidal_Evaluated(&revGen, &revEva,
 80084bc:	4610      	mov	r0, r2
 80084be:	4619      	mov	r1, r3
 80084c0:	f7f8 fb48 	bl	8000b54 <__aeabi_d2f>
 80084c4:	4603      	mov	r3, r0
 80084c6:	ee01 3a90 	vmov	s3, r3
 80084ca:	ee01 4a10 	vmov	s2, r4
 80084ce:	eef0 0a68 	vmov.f32	s1, s17
 80084d2:	eeb0 0a48 	vmov.f32	s0, s16
 80084d6:	492f      	ldr	r1, [pc, #188]	@ (8008594 <update_joy_mode+0x3e0>)
 80084d8:	4830      	ldr	r0, [pc, #192]	@ (800859c <update_joy_mode+0x3e8>)
 80084da:	f7fc f801 	bl	80044e0 <Trapezoidal_Evaluated>

				revolute_axis.position = revEva.setposition;
 80084de:	4b2d      	ldr	r3, [pc, #180]	@ (8008594 <update_joy_mode+0x3e0>)
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	4a2b      	ldr	r2, [pc, #172]	@ (8008590 <update_joy_mode+0x3dc>)
 80084e4:	6013      	str	r3, [r2, #0]
				revolute_axis.velocity = revEva.setvelocity;
 80084e6:	4b2b      	ldr	r3, [pc, #172]	@ (8008594 <update_joy_mode+0x3e0>)
 80084e8:	685b      	ldr	r3, [r3, #4]
 80084ea:	4a29      	ldr	r2, [pc, #164]	@ (8008590 <update_joy_mode+0x3dc>)
 80084ec:	6053      	str	r3, [r2, #4]

				if (revEva.isFinised) {
 80084ee:	4b29      	ldr	r3, [pc, #164]	@ (8008594 <update_joy_mode+0x3e0>)
 80084f0:	7c1b      	ldrb	r3, [r3, #16]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d02d      	beq.n	8008552 <update_joy_mode+0x39e>
					revolute_axis.trajectory_active = false;
 80084f6:	4b26      	ldr	r3, [pc, #152]	@ (8008590 <update_joy_mode+0x3dc>)
 80084f8:	2200      	movs	r2, #0
 80084fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
					revolute_axis.position = revEva.setposition;
 80084fe:	4b25      	ldr	r3, [pc, #148]	@ (8008594 <update_joy_mode+0x3e0>)
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	4a23      	ldr	r2, [pc, #140]	@ (8008590 <update_joy_mode+0x3dc>)
 8008504:	6013      	str	r3, [r2, #0]
					revolute_axis.velocity = 0.0f;
 8008506:	4b22      	ldr	r3, [pc, #136]	@ (8008590 <update_joy_mode+0x3dc>)
 8008508:	f04f 0200 	mov.w	r2, #0
 800850c:	605a      	str	r2, [r3, #4]

//					PID_CONTROLLER_Reset(&revolute_position_pid);
//					PID_CONTROLLER_Reset(&revolute_velocity_pid);

					motion_delay_timer = 0;
 800850e:	4b24      	ldr	r3, [pc, #144]	@ (80085a0 <update_joy_mode+0x3ec>)
 8008510:	2200      	movs	r2, #0
 8008512:	601a      	str	r2, [r3, #0]
					motion_sequence_state = MOTION_PEN_DOWN_DELAY;
 8008514:	4b23      	ldr	r3, [pc, #140]	@ (80085a4 <update_joy_mode+0x3f0>)
 8008516:	2205      	movs	r2, #5
 8008518:	701a      	strb	r2, [r3, #0]
				}
			}
			break;
 800851a:	e01a      	b.n	8008552 <update_joy_mode+0x39e>

		case MOTION_PEN_DOWN_DELAY:
			// INCREMENT motion_delay_timer here for joy mode
			if (++motion_delay_timer >= 1500) {
 800851c:	4b20      	ldr	r3, [pc, #128]	@ (80085a0 <update_joy_mode+0x3ec>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	3301      	adds	r3, #1
 8008522:	4a1f      	ldr	r2, [pc, #124]	@ (80085a0 <update_joy_mode+0x3ec>)
 8008524:	6013      	str	r3, [r2, #0]
 8008526:	f240 52db 	movw	r2, #1499	@ 0x5db
 800852a:	4293      	cmp	r3, r2
 800852c:	d913      	bls.n	8008556 <update_joy_mode+0x3a2>
				plotter_pen_down();
 800852e:	f001 f897 	bl	8009660 <plotter_pen_down>
				motion_sequence_state = MOTION_COMPLETE;
 8008532:	4b1c      	ldr	r3, [pc, #112]	@ (80085a4 <update_joy_mode+0x3f0>)
 8008534:	2206      	movs	r2, #6
 8008536:	701a      	strb	r2, [r3, #0]
			}
			break;
 8008538:	e00d      	b.n	8008556 <update_joy_mode+0x3a2>

		case MOTION_COMPLETE:
			motion_sequence_state = MOTION_IDLE;
 800853a:	4b1a      	ldr	r3, [pc, #104]	@ (80085a4 <update_joy_mode+0x3f0>)
 800853c:	2200      	movs	r2, #0
 800853e:	701a      	strb	r2, [r3, #0]
			break;
 8008540:	e00a      	b.n	8008558 <update_joy_mode+0x3a4>

		default:
			break;
 8008542:	bf00      	nop
 8008544:	e008      	b.n	8008558 <update_joy_mode+0x3a4>
			break;
 8008546:	bf00      	nop
 8008548:	e006      	b.n	8008558 <update_joy_mode+0x3a4>
			break;
 800854a:	bf00      	nop
 800854c:	e004      	b.n	8008558 <update_joy_mode+0x3a4>
			break;
 800854e:	bf00      	nop
 8008550:	e002      	b.n	8008558 <update_joy_mode+0x3a4>
			break;
 8008552:	bf00      	nop
 8008554:	e000      	b.n	8008558 <update_joy_mode+0x3a4>
			break;
 8008556:	bf00      	nop
		}

		// Update position/velocity control for trajectory playback
		if (motion_sequence_state != MOTION_IDLE) {
 8008558:	4b12      	ldr	r3, [pc, #72]	@ (80085a4 <update_joy_mode+0x3f0>)
 800855a:	781b      	ldrb	r3, [r3, #0]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d00f      	beq.n	8008580 <update_joy_mode+0x3cc>
			// Run position control if not in manual control
			if (position_control_tick >= POSITION_CONTROL_DIVIDER) {
 8008560:	4b11      	ldr	r3, [pc, #68]	@ (80085a8 <update_joy_mode+0x3f4>)
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	2b09      	cmp	r3, #9
 8008566:	d901      	bls.n	800856c <update_joy_mode+0x3b8>
				update_position_control();
 8008568:	f7fe f8f0 	bl	800674c <update_position_control>
			}
			// Always run velocity control during trajectory
			update_velocity_control();
 800856c:	f7fe f9ac 	bl	80068c8 <update_velocity_control>
		}
		break;
 8008570:	e006      	b.n	8008580 <update_joy_mode+0x3cc>

	case JOY_MODE_COMPLETE:
		exit_joy_mode();
 8008572:	f7ff f8e3 	bl	800773c <exit_joy_mode>
		break;
 8008576:	e004      	b.n	8008582 <update_joy_mode+0x3ce>
		return;
 8008578:	bf00      	nop
 800857a:	e002      	b.n	8008582 <update_joy_mode+0x3ce>

	default:
		break;
 800857c:	bf00      	nop
 800857e:	e000      	b.n	8008582 <update_joy_mode+0x3ce>
		break;
 8008580:	bf00      	nop
	}
}
 8008582:	3714      	adds	r7, #20
 8008584:	46bd      	mov	sp, r7
 8008586:	ecbd 8b02 	vpop	{d8}
 800858a:	bd90      	pop	{r4, r7, pc}
 800858c:	200005e8 	.word	0x200005e8
 8008590:	200004c4 	.word	0x200004c4
 8008594:	20000548 	.word	0x20000548
 8008598:	20000000 	.word	0x20000000
 800859c:	20000520 	.word	0x20000520
 80085a0:	2000055c 	.word	0x2000055c
 80085a4:	20000508 	.word	0x20000508
 80085a8:	20000574 	.word	0x20000574

080085ac <handle_b2_button_polling>:

void handle_b2_button_polling(void) {
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b082      	sub	sp, #8
 80085b0:	af00      	add	r7, sp, #0
	// Read current B2 button state (assuming active low like other buttons)
	bool b2_current_state = !HAL_GPIO_ReadPin(J2_GPIO_Port, J2_Pin);
 80085b2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80085b6:	4835      	ldr	r0, [pc, #212]	@ (800868c <handle_b2_button_polling+0xe0>)
 80085b8:	f004 fb82 	bl	800ccc0 <HAL_GPIO_ReadPin>
 80085bc:	4603      	mov	r3, r0
 80085be:	2b00      	cmp	r3, #0
 80085c0:	bf0c      	ite	eq
 80085c2:	2301      	moveq	r3, #1
 80085c4:	2300      	movne	r3, #0
 80085c6:	71fb      	strb	r3, [r7, #7]

//	b2S[0] = !HAL_GPIO_ReadPin(J2_GPIO_Port, J2_Pin);
	static uint32_t last_press_time = 0;
	static uint32_t press_counter = 0;
	const uint32_t DEBOUNCE_TIME = 200; // 200ms debounce time
 80085c8:	23c8      	movs	r3, #200	@ 0xc8
 80085ca:	603b      	str	r3, [r7, #0]

	press_counter++; // Increment every timer tick (assuming 1ms timer)
 80085cc:	4b30      	ldr	r3, [pc, #192]	@ (8008690 <handle_b2_button_polling+0xe4>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	3301      	adds	r3, #1
 80085d2:	4a2f      	ldr	r2, [pc, #188]	@ (8008690 <handle_b2_button_polling+0xe4>)
 80085d4:	6013      	str	r3, [r2, #0]

//	 Edge detection with debouncing
	if (b2_current_state && !joy_mode_b2_last_state) {
 80085d6:	79fb      	ldrb	r3, [r7, #7]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d047      	beq.n	800866c <handle_b2_button_polling+0xc0>
 80085dc:	4b2d      	ldr	r3, [pc, #180]	@ (8008694 <handle_b2_button_polling+0xe8>)
 80085de:	781b      	ldrb	r3, [r3, #0]
 80085e0:	f083 0301 	eor.w	r3, r3, #1
 80085e4:	b2db      	uxtb	r3, r3
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d040      	beq.n	800866c <handle_b2_button_polling+0xc0>
//	 Button just pressed - check if enough time has passed since last press
		if ((press_counter - last_press_time) >= DEBOUNCE_TIME) {
 80085ea:	4b29      	ldr	r3, [pc, #164]	@ (8008690 <handle_b2_button_polling+0xe4>)
 80085ec:	681a      	ldr	r2, [r3, #0]
 80085ee:	4b2a      	ldr	r3, [pc, #168]	@ (8008698 <handle_b2_button_polling+0xec>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	1ad3      	subs	r3, r2, r3
 80085f4:	683a      	ldr	r2, [r7, #0]
 80085f6:	429a      	cmp	r2, r3
 80085f8:	d838      	bhi.n	800866c <handle_b2_button_polling+0xc0>
			// Button press is valid - trigger action
			joy_mode_b2_pressed = true;
 80085fa:	4b28      	ldr	r3, [pc, #160]	@ (800869c <handle_b2_button_polling+0xf0>)
 80085fc:	2201      	movs	r2, #1
 80085fe:	701a      	strb	r2, [r3, #0]
			last_press_time = press_counter;
 8008600:	4b23      	ldr	r3, [pc, #140]	@ (8008690 <handle_b2_button_polling+0xe4>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	4a24      	ldr	r2, [pc, #144]	@ (8008698 <handle_b2_button_polling+0xec>)
 8008606:	6013      	str	r3, [r2, #0]

//	if (b2S[0] != b2S[1] && b2S[0] == 1) {
			// Handle B2 button press logic
			if (!is_emergency_active() && !homing_active
 8008608:	f7ff f816 	bl	8007638 <is_emergency_active>
 800860c:	4603      	mov	r3, r0
 800860e:	f083 0301 	eor.w	r3, r3, #1
 8008612:	b2db      	uxtb	r3, r3
 8008614:	2b00      	cmp	r3, #0
 8008616:	d029      	beq.n	800866c <handle_b2_button_polling+0xc0>
 8008618:	4b21      	ldr	r3, [pc, #132]	@ (80086a0 <handle_b2_button_polling+0xf4>)
 800861a:	781b      	ldrb	r3, [r3, #0]
 800861c:	f083 0301 	eor.w	r3, r3, #1
 8008620:	b2db      	uxtb	r3, r3
 8008622:	2b00      	cmp	r3, #0
 8008624:	d022      	beq.n	800866c <handle_b2_button_polling+0xc0>
					&& motion_sequence_state == MOTION_IDLE) {
 8008626:	4b1f      	ldr	r3, [pc, #124]	@ (80086a4 <handle_b2_button_polling+0xf8>)
 8008628:	781b      	ldrb	r3, [r3, #0]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d11e      	bne.n	800866c <handle_b2_button_polling+0xc0>
				if (!joy_mode_active) {
 800862e:	4b1e      	ldr	r3, [pc, #120]	@ (80086a8 <handle_b2_button_polling+0xfc>)
 8008630:	781b      	ldrb	r3, [r3, #0]
 8008632:	f083 0301 	eor.w	r3, r3, #1
 8008636:	b2db      	uxtb	r3, r3
 8008638:	2b00      	cmp	r3, #0
 800863a:	d002      	beq.n	8008642 <handle_b2_button_polling+0x96>
					// Enter joy mode (starts in JOY_MODE_INITIAL_CONTROL)
					enter_joy_mode();
 800863c:	f7ff f80c 	bl	8007658 <enter_joy_mode>
 8008640:	e014      	b.n	800866c <handle_b2_button_polling+0xc0>
				} else {
					// Joy mode is active, handle button press based on current state
					if (joy_mode_state == JOY_MODE_INITIAL_CONTROL) {
 8008642:	4b1a      	ldr	r3, [pc, #104]	@ (80086ac <handle_b2_button_polling+0x100>)
 8008644:	781b      	ldrb	r3, [r3, #0]
 8008646:	2b01      	cmp	r3, #1
 8008648:	d103      	bne.n	8008652 <handle_b2_button_polling+0xa6>
						// First B2 press in joy mode - start position saving mode
						joy_mode_state = JOY_MODE_MANUAL_CONTROL;
 800864a:	4b18      	ldr	r3, [pc, #96]	@ (80086ac <handle_b2_button_polling+0x100>)
 800864c:	2202      	movs	r2, #2
 800864e:	701a      	strb	r2, [r3, #0]
 8008650:	e00c      	b.n	800866c <handle_b2_button_polling+0xc0>
					} else if (joy_mode_state == JOY_MODE_MANUAL_CONTROL) {
 8008652:	4b16      	ldr	r3, [pc, #88]	@ (80086ac <handle_b2_button_polling+0x100>)
 8008654:	781b      	ldrb	r3, [r3, #0]
 8008656:	2b02      	cmp	r3, #2
 8008658:	d102      	bne.n	8008660 <handle_b2_button_polling+0xb4>

						save_current_position();
 800865a:	f7ff f8fb 	bl	8007854 <save_current_position>
 800865e:	e005      	b.n	800866c <handle_b2_button_polling+0xc0>

						// Save current position
					} else if (joy_mode_state == JOY_MODE_POSITION_SAVED) {
 8008660:	4b12      	ldr	r3, [pc, #72]	@ (80086ac <handle_b2_button_polling+0x100>)
 8008662:	781b      	ldrb	r3, [r3, #0]
 8008664:	2b03      	cmp	r3, #3
 8008666:	d101      	bne.n	800866c <handle_b2_button_polling+0xc0>
						start_position_playback();
 8008668:	f7ff f9ac 	bl	80079c4 <start_position_playback>
//	b2S[1] = b2S[0];
		// If not enough time has passed, ignore this button press
	}

// Update last state
	joy_mode_b2_last_state = b2_current_state;
 800866c:	4a09      	ldr	r2, [pc, #36]	@ (8008694 <handle_b2_button_polling+0xe8>)
 800866e:	79fb      	ldrb	r3, [r7, #7]
 8008670:	7013      	strb	r3, [r2, #0]
//
//// Reset pressed flag when button is released
	if (!b2_current_state) {
 8008672:	79fb      	ldrb	r3, [r7, #7]
 8008674:	f083 0301 	eor.w	r3, r3, #1
 8008678:	b2db      	uxtb	r3, r3
 800867a:	2b00      	cmp	r3, #0
 800867c:	d002      	beq.n	8008684 <handle_b2_button_polling+0xd8>
		joy_mode_b2_pressed = false;
 800867e:	4b07      	ldr	r3, [pc, #28]	@ (800869c <handle_b2_button_polling+0xf0>)
 8008680:	2200      	movs	r2, #0
 8008682:	701a      	strb	r2, [r3, #0]
	}
}
 8008684:	bf00      	nop
 8008686:	3708      	adds	r7, #8
 8008688:	46bd      	mov	sp, r7
 800868a:	bd80      	pop	{r7, pc}
 800868c:	48000800 	.word	0x48000800
 8008690:	20000640 	.word	0x20000640
 8008694:	200005e5 	.word	0x200005e5
 8008698:	20000644 	.word	0x20000644
 800869c:	200005e4 	.word	0x200005e4
 80086a0:	20000567 	.word	0x20000567
 80086a4:	20000508 	.word	0x20000508
 80086a8:	20000581 	.word	0x20000581
 80086ac:	20000580 	.word	0x20000580

080086b0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b084      	sub	sp, #16
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	4603      	mov	r3, r0
 80086b8:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == PROX_Pin) {
 80086ba:	88fb      	ldrh	r3, [r7, #6]
 80086bc:	2b40      	cmp	r3, #64	@ 0x40
 80086be:	d105      	bne.n	80086cc <HAL_GPIO_EXTI_Callback+0x1c>
		prox_count++;
 80086c0:	4b52      	ldr	r3, [pc, #328]	@ (800880c <HAL_GPIO_EXTI_Callback+0x15c>)
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	3301      	adds	r3, #1
 80086c6:	4a51      	ldr	r2, [pc, #324]	@ (800880c <HAL_GPIO_EXTI_Callback+0x15c>)
 80086c8:	6013      	str	r3, [r2, #0]
		return;
 80086ca:	e09c      	b.n	8008806 <HAL_GPIO_EXTI_Callback+0x156>
	}

	if (GPIO_Pin == UPPER_PHOTO_Pin) {
 80086cc:	88fb      	ldrh	r3, [r7, #6]
 80086ce:	2b01      	cmp	r3, #1
 80086d0:	d103      	bne.n	80086da <HAL_GPIO_EXTI_Callback+0x2a>
		up_photo = true;
 80086d2:	4b4f      	ldr	r3, [pc, #316]	@ (8008810 <HAL_GPIO_EXTI_Callback+0x160>)
 80086d4:	2201      	movs	r2, #1
 80086d6:	701a      	strb	r2, [r3, #0]
		return;
 80086d8:	e095      	b.n	8008806 <HAL_GPIO_EXTI_Callback+0x156>
	}

	if (GPIO_Pin == LOWER_PHOTO_Pin) {
 80086da:	88fb      	ldrh	r3, [r7, #6]
 80086dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80086e0:	d103      	bne.n	80086ea <HAL_GPIO_EXTI_Callback+0x3a>
		low_photo = true;
 80086e2:	4b4c      	ldr	r3, [pc, #304]	@ (8008814 <HAL_GPIO_EXTI_Callback+0x164>)
 80086e4:	2201      	movs	r2, #1
 80086e6:	701a      	strb	r2, [r3, #0]
		return;
 80086e8:	e08d      	b.n	8008806 <HAL_GPIO_EXTI_Callback+0x156>
	}

	if (GPIO_Pin == EMER_Pin) {
 80086ea:	88fb      	ldrh	r3, [r7, #6]
 80086ec:	2b10      	cmp	r3, #16
 80086ee:	d102      	bne.n	80086f6 <HAL_GPIO_EXTI_Callback+0x46>
		trigger_hardware_emergency();
 80086f0:	f7fe fe72 	bl	80073d8 <trigger_hardware_emergency>
		return;
 80086f4:	e087      	b.n	8008806 <HAL_GPIO_EXTI_Callback+0x156>
	}

	if (GPIO_Pin == J1_Pin) {
 80086f6:	88fb      	ldrh	r3, [r7, #6]
 80086f8:	2b80      	cmp	r3, #128	@ 0x80
 80086fa:	d14e      	bne.n	800879a <HAL_GPIO_EXTI_Callback+0xea>

		uint32_t current_time = HAL_GetTick();
 80086fc:	f002 f898 	bl	800a830 <HAL_GetTick>
 8008700:	60f8      	str	r0, [r7, #12]
		if ((current_time - j1_interrupt_last_time) < 200) {
 8008702:	4b45      	ldr	r3, [pc, #276]	@ (8008818 <HAL_GPIO_EXTI_Callback+0x168>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	68fa      	ldr	r2, [r7, #12]
 8008708:	1ad3      	subs	r3, r2, r3
 800870a:	2bc7      	cmp	r3, #199	@ 0xc7
 800870c:	d976      	bls.n	80087fc <HAL_GPIO_EXTI_Callback+0x14c>
			return; // ignore ถ้ายังไม่ครบ 200ms
		}
		j1_interrupt_last_time = current_time;
 800870e:	4a42      	ldr	r2, [pc, #264]	@ (8008818 <HAL_GPIO_EXTI_Callback+0x168>)
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	6013      	str	r3, [r2, #0]

		if (!is_emergency_active() && !homing_active && !joy_mode_active
 8008714:	f7fe ff90 	bl	8007638 <is_emergency_active>
 8008718:	4603      	mov	r3, r0
 800871a:	f083 0301 	eor.w	r3, r3, #1
 800871e:	b2db      	uxtb	r3, r3
 8008720:	2b00      	cmp	r3, #0
 8008722:	d03a      	beq.n	800879a <HAL_GPIO_EXTI_Callback+0xea>
 8008724:	4b3d      	ldr	r3, [pc, #244]	@ (800881c <HAL_GPIO_EXTI_Callback+0x16c>)
 8008726:	781b      	ldrb	r3, [r3, #0]
 8008728:	f083 0301 	eor.w	r3, r3, #1
 800872c:	b2db      	uxtb	r3, r3
 800872e:	2b00      	cmp	r3, #0
 8008730:	d033      	beq.n	800879a <HAL_GPIO_EXTI_Callback+0xea>
 8008732:	4b3b      	ldr	r3, [pc, #236]	@ (8008820 <HAL_GPIO_EXTI_Callback+0x170>)
 8008734:	781b      	ldrb	r3, [r3, #0]
 8008736:	f083 0301 	eor.w	r3, r3, #1
 800873a:	b2db      	uxtb	r3, r3
 800873c:	2b00      	cmp	r3, #0
 800873e:	d02c      	beq.n	800879a <HAL_GPIO_EXTI_Callback+0xea>
				&& !first_startup) {
 8008740:	4b38      	ldr	r3, [pc, #224]	@ (8008824 <HAL_GPIO_EXTI_Callback+0x174>)
 8008742:	781b      	ldrb	r3, [r3, #0]
 8008744:	f083 0301 	eor.w	r3, r3, #1
 8008748:	b2db      	uxtb	r3, r3
 800874a:	2b00      	cmp	r3, #0
 800874c:	d025      	beq.n	800879a <HAL_GPIO_EXTI_Callback+0xea>
			check[0]++;
 800874e:	4b36      	ldr	r3, [pc, #216]	@ (8008828 <HAL_GPIO_EXTI_Callback+0x178>)
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	3301      	adds	r3, #1
 8008754:	4a34      	ldr	r2, [pc, #208]	@ (8008828 <HAL_GPIO_EXTI_Callback+0x178>)
 8008756:	6013      	str	r3, [r2, #0]
			if (!j1_active) {
 8008758:	4b34      	ldr	r3, [pc, #208]	@ (800882c <HAL_GPIO_EXTI_Callback+0x17c>)
 800875a:	781b      	ldrb	r3, [r3, #0]
 800875c:	f083 0301 	eor.w	r3, r3, #1
 8008760:	b2db      	uxtb	r3, r3
 8008762:	2b00      	cmp	r3, #0
 8008764:	d013      	beq.n	800878e <HAL_GPIO_EXTI_Callback+0xde>
				// start Again
				j1_active = true;
 8008766:	4b31      	ldr	r3, [pc, #196]	@ (800882c <HAL_GPIO_EXTI_Callback+0x17c>)
 8008768:	2201      	movs	r2, #1
 800876a:	701a      	strb	r2, [r3, #0]
				j1_cycle_count = 0;
 800876c:	4b30      	ldr	r3, [pc, #192]	@ (8008830 <HAL_GPIO_EXTI_Callback+0x180>)
 800876e:	2200      	movs	r2, #0
 8008770:	701a      	strb	r2, [r3, #0]
				j1_going_to_target = true;
 8008772:	4b30      	ldr	r3, [pc, #192]	@ (8008834 <HAL_GPIO_EXTI_Callback+0x184>)
 8008774:	2201      	movs	r2, #1
 8008776:	701a      	strb	r2, [r3, #0]

				// go to target
				start_combined_trajectory(J1_TARGET_PRIS, J1_TARGET_REV);
 8008778:	eddf 7a2f 	vldr	s15, [pc, #188]	@ 8008838 <HAL_GPIO_EXTI_Callback+0x188>
 800877c:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800883c <HAL_GPIO_EXTI_Callback+0x18c>
 8008780:	eef0 0a47 	vmov.f32	s1, s14
 8008784:	eeb0 0a67 	vmov.f32	s0, s15
 8008788:	f7fd fdd0 	bl	800632c <start_combined_trajectory>
 800878c:	e005      	b.n	800879a <HAL_GPIO_EXTI_Callback+0xea>
			} else {
				// stop

				j1_active = false;
 800878e:	4b27      	ldr	r3, [pc, #156]	@ (800882c <HAL_GPIO_EXTI_Callback+0x17c>)
 8008790:	2200      	movs	r2, #0
 8008792:	701a      	strb	r2, [r3, #0]
				j1_cycle_count = 0;
 8008794:	4b26      	ldr	r3, [pc, #152]	@ (8008830 <HAL_GPIO_EXTI_Callback+0x180>)
 8008796:	2200      	movs	r2, #0
 8008798:	701a      	strb	r2, [r3, #0]
			}
		}
	}
// J2 is NOT handled here anymore - it's polled in the main loop

	if (GPIO_Pin == J3_Pin) {
 800879a:	88fb      	ldrh	r3, [r7, #6]
 800879c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80087a0:	d116      	bne.n	80087d0 <HAL_GPIO_EXTI_Callback+0x120>
		if (!is_emergency_active() && !joy_mode_active
 80087a2:	f7fe ff49 	bl	8007638 <is_emergency_active>
 80087a6:	4603      	mov	r3, r0
 80087a8:	f083 0301 	eor.w	r3, r3, #1
 80087ac:	b2db      	uxtb	r3, r3
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d026      	beq.n	8008800 <HAL_GPIO_EXTI_Callback+0x150>
 80087b2:	4b1b      	ldr	r3, [pc, #108]	@ (8008820 <HAL_GPIO_EXTI_Callback+0x170>)
 80087b4:	781b      	ldrb	r3, [r3, #0]
 80087b6:	f083 0301 	eor.w	r3, r3, #1
 80087ba:	b2db      	uxtb	r3, r3
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d01f      	beq.n	8008800 <HAL_GPIO_EXTI_Callback+0x150>
				&& motion_sequence_state == MOTION_IDLE) {
 80087c0:	4b1f      	ldr	r3, [pc, #124]	@ (8008840 <HAL_GPIO_EXTI_Callback+0x190>)
 80087c2:	781b      	ldrb	r3, [r3, #0]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d11b      	bne.n	8008800 <HAL_GPIO_EXTI_Callback+0x150>
			start_homing_sequence(false);
 80087c8:	2000      	movs	r0, #0
 80087ca:	f7fd f899 	bl	8005900 <start_homing_sequence>
		}
		return;
 80087ce:	e017      	b.n	8008800 <HAL_GPIO_EXTI_Callback+0x150>
	}

// Modified J4 button handler for joy mode exit
	if (GPIO_Pin == J4_Pin) {
 80087d0:	88fb      	ldrh	r3, [r7, #6]
 80087d2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80087d6:	d116      	bne.n	8008806 <HAL_GPIO_EXTI_Callback+0x156>
		if (joy_mode_active) {
 80087d8:	4b11      	ldr	r3, [pc, #68]	@ (8008820 <HAL_GPIO_EXTI_Callback+0x170>)
 80087da:	781b      	ldrb	r3, [r3, #0]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d002      	beq.n	80087e6 <HAL_GPIO_EXTI_Callback+0x136>
			// Exit joy mode and hold current position (don't move)
			exit_joy_mode();
 80087e0:	f7fe ffac 	bl	800773c <exit_joy_mode>
		} else if (is_emergency_active()) {
			clear_emergency_state();
			start_homing_sequence(true);
		}
		return;
 80087e4:	e00e      	b.n	8008804 <HAL_GPIO_EXTI_Callback+0x154>
		} else if (is_emergency_active()) {
 80087e6:	f7fe ff27 	bl	8007638 <is_emergency_active>
 80087ea:	4603      	mov	r3, r0
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d009      	beq.n	8008804 <HAL_GPIO_EXTI_Callback+0x154>
			clear_emergency_state();
 80087f0:	f7fe fe30 	bl	8007454 <clear_emergency_state>
			start_homing_sequence(true);
 80087f4:	2001      	movs	r0, #1
 80087f6:	f7fd f883 	bl	8005900 <start_homing_sequence>
		return;
 80087fa:	e003      	b.n	8008804 <HAL_GPIO_EXTI_Callback+0x154>
			return; // ignore ถ้ายังไม่ครบ 200ms
 80087fc:	bf00      	nop
 80087fe:	e002      	b.n	8008806 <HAL_GPIO_EXTI_Callback+0x156>
		return;
 8008800:	bf00      	nop
 8008802:	e000      	b.n	8008806 <HAL_GPIO_EXTI_Callback+0x156>
		return;
 8008804:	bf00      	nop
	}
}
 8008806:	3710      	adds	r7, #16
 8008808:	46bd      	mov	sp, r7
 800880a:	bd80      	pop	{r7, pc}
 800880c:	20000560 	.word	0x20000560
 8008810:	20000564 	.word	0x20000564
 8008814:	20000565 	.word	0x20000565
 8008818:	20000614 	.word	0x20000614
 800881c:	20000567 	.word	0x20000567
 8008820:	20000581 	.word	0x20000581
 8008824:	20000333 	.word	0x20000333
 8008828:	200005e8 	.word	0x200005e8
 800882c:	20000611 	.word	0x20000611
 8008830:	20000610 	.word	0x20000610
 8008834:	20000335 	.word	0x20000335
 8008838:	43480000 	.word	0x43480000
 800883c:	42b40000 	.word	0x42b40000
 8008840:	20000508 	.word	0x20000508

08008844 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8008844:	b580      	push	{r7, lr}
 8008846:	b082      	sub	sp, #8
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
	if (htim == &htim2) {
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	4aa3      	ldr	r2, [pc, #652]	@ (8008adc <HAL_TIM_PeriodElapsedCallback+0x298>)
 8008850:	4293      	cmp	r3, r2
 8008852:	f040 813f 	bne.w	8008ad4 <HAL_TIM_PeriodElapsedCallback+0x290>
		Modbus_Protocal_Worker();
 8008856:	f7f9 fc1f 	bl	8002098 <Modbus_Protocal_Worker>
		modbus_working();
 800885a:	f000 f969 	bl	8008b30 <modbus_working>

		plotter_update_sensors();
 800885e:	f000 fe49 	bl	80094f4 <plotter_update_sensors>
		check_emergency_button();
 8008862:	f7fe fd29 	bl	80072b8 <check_emergency_button>

		QEI_get_diff_count(&prismatic_encoder);
 8008866:	489e      	ldr	r0, [pc, #632]	@ (8008ae0 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8008868:	f7fb fb32 	bl	8003ed0 <QEI_get_diff_count>
		QEI_compute_data(&prismatic_encoder);
 800886c:	489c      	ldr	r0, [pc, #624]	@ (8008ae0 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 800886e:	f7fb fc1b 	bl	80040a8 <QEI_compute_data>
		QEI_get_diff_count(&revolute_encoder);
 8008872:	489c      	ldr	r0, [pc, #624]	@ (8008ae4 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8008874:	f7fb fb2c 	bl	8003ed0 <QEI_get_diff_count>
		QEI_compute_data(&revolute_encoder);
 8008878:	489a      	ldr	r0, [pc, #616]	@ (8008ae4 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 800887a:	f7fb fc15 	bl	80040a8 <QEI_compute_data>

		revolute_axis.input_voltage = mapf(revolute_axis.command_pos, -65535.0f,
 800887e:	4b9a      	ldr	r3, [pc, #616]	@ (8008ae8 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8008880:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8008884:	eeb2 2a08 	vmov.f32	s4, #40	@ 0x41400000  12.0
 8008888:	eefa 1a08 	vmov.f32	s3, #168	@ 0xc1400000 -12.0
 800888c:	ed9f 1a97 	vldr	s2, [pc, #604]	@ 8008aec <HAL_TIM_PeriodElapsedCallback+0x2a8>
 8008890:	eddf 0a97 	vldr	s1, [pc, #604]	@ 8008af0 <HAL_TIM_PeriodElapsedCallback+0x2ac>
 8008894:	eeb0 0a67 	vmov.f32	s0, s15
 8008898:	f7f9 fae7 	bl	8001e6a <mapf>
 800889c:	eef0 7a40 	vmov.f32	s15, s0
 80088a0:	4b91      	ldr	r3, [pc, #580]	@ (8008ae8 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80088a2:	edc3 7a08 	vstr	s15, [r3, #32]
				65535.0f, -12.0f, 12.0f);
		revolute_axis.kalman_velocity = SteadyStateKalmanFilter(
 80088a6:	4b90      	ldr	r3, [pc, #576]	@ (8008ae8 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80088a8:	edd3 7a08 	vldr	s15, [r3, #32]
 80088ac:	4b8d      	ldr	r3, [pc, #564]	@ (8008ae4 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80088ae:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 80088b2:	eef0 0a47 	vmov.f32	s1, s14
 80088b6:	eeb0 0a67 	vmov.f32	s0, s15
 80088ba:	488e      	ldr	r0, [pc, #568]	@ (8008af4 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80088bc:	f7fc fc24 	bl	8005108 <SteadyStateKalmanFilter>
 80088c0:	eef0 7a40 	vmov.f32	s15, s0
 80088c4:	4b88      	ldr	r3, [pc, #544]	@ (8008ae8 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80088c6:	edc3 7a07 	vstr	s15, [r3, #28]
				&revolute_kalman, revolute_axis.input_voltage,
				revolute_encoder.rads);

		if (isnan(revolute_axis.kalman_velocity)) {
 80088ca:	4b87      	ldr	r3, [pc, #540]	@ (8008ae8 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80088cc:	edd3 7a07 	vldr	s15, [r3, #28]
 80088d0:	eef4 7a67 	vcmp.f32	s15, s15
 80088d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088d8:	d703      	bvc.n	80088e2 <HAL_TIM_PeriodElapsedCallback+0x9e>
			revolute_axis.kalman_velocity = 0.0f;
 80088da:	4b83      	ldr	r3, [pc, #524]	@ (8008ae8 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80088dc:	f04f 0200 	mov.w	r2, #0
 80088e0:	61da      	str	r2, [r3, #28]
		}

		prismatic_axis.input_voltage = mapf(prismatic_axis.command_pos,
 80088e2:	4b85      	ldr	r3, [pc, #532]	@ (8008af8 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80088e4:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80088e8:	eeb2 2a08 	vmov.f32	s4, #40	@ 0x41400000  12.0
 80088ec:	eefa 1a08 	vmov.f32	s3, #168	@ 0xc1400000 -12.0
 80088f0:	ed9f 1a7e 	vldr	s2, [pc, #504]	@ 8008aec <HAL_TIM_PeriodElapsedCallback+0x2a8>
 80088f4:	eddf 0a7e 	vldr	s1, [pc, #504]	@ 8008af0 <HAL_TIM_PeriodElapsedCallback+0x2ac>
 80088f8:	eeb0 0a67 	vmov.f32	s0, s15
 80088fc:	f7f9 fab5 	bl	8001e6a <mapf>
 8008900:	eef0 7a40 	vmov.f32	s15, s0
 8008904:	4b7c      	ldr	r3, [pc, #496]	@ (8008af8 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8008906:	edc3 7a08 	vstr	s15, [r3, #32]
				-65535.0f, 65535.0f, -12.0f, 12.0f);
		prismatic_axis.kalman_velocity = MotorKalman_Estimate(&prismatic_kalman,
 800890a:	4b7b      	ldr	r3, [pc, #492]	@ (8008af8 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 800890c:	edd3 7a08 	vldr	s15, [r3, #32]
 8008910:	4b73      	ldr	r3, [pc, #460]	@ (8008ae0 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8008912:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8008916:	eef0 0a47 	vmov.f32	s1, s14
 800891a:	eeb0 0a67 	vmov.f32	s0, s15
 800891e:	4877      	ldr	r0, [pc, #476]	@ (8008afc <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8008920:	f7fa fd10 	bl	8003344 <MotorKalman_Estimate>
 8008924:	eeb0 7a40 	vmov.f32	s14, s0
				prismatic_axis.input_voltage, prismatic_encoder.rads)
				* Disturbance_Constant.prismatic_pulley_radius * 1000.0f;
 8008928:	4b75      	ldr	r3, [pc, #468]	@ (8008b00 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 800892a:	edd3 7a04 	vldr	s15, [r3, #16]
 800892e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008932:	ed9f 7a74 	vldr	s14, [pc, #464]	@ 8008b04 <HAL_TIM_PeriodElapsedCallback+0x2c0>
 8008936:	ee67 7a87 	vmul.f32	s15, s15, s14
		prismatic_axis.kalman_velocity = MotorKalman_Estimate(&prismatic_kalman,
 800893a:	4b6f      	ldr	r3, [pc, #444]	@ (8008af8 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 800893c:	edc3 7a07 	vstr	s15, [r3, #28]

		if (isnan(prismatic_axis.kalman_velocity)) {
 8008940:	4b6d      	ldr	r3, [pc, #436]	@ (8008af8 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8008942:	edd3 7a07 	vldr	s15, [r3, #28]
 8008946:	eef4 7a67 	vcmp.f32	s15, s15
 800894a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800894e:	d703      	bvc.n	8008958 <HAL_TIM_PeriodElapsedCallback+0x114>
			prismatic_axis.kalman_velocity = 0.0f;
 8008950:	4b69      	ldr	r3, [pc, #420]	@ (8008af8 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8008952:	f04f 0200 	mov.w	r2, #0
 8008956:	61da      	str	r2, [r3, #28]
		}

		// Position control update - Allow during HOMING_REV_TO_ZERO_DEG
		if (++position_control_tick >= POSITION_CONTROL_DIVIDER) {
 8008958:	4b6b      	ldr	r3, [pc, #428]	@ (8008b08 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	3301      	adds	r3, #1
 800895e:	4a6a      	ldr	r2, [pc, #424]	@ (8008b08 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8008960:	6013      	str	r3, [r2, #0]
 8008962:	2b09      	cmp	r3, #9
 8008964:	d92e      	bls.n	80089c4 <HAL_TIM_PeriodElapsedCallback+0x180>
			position_control_tick = 0;
 8008966:	4b68      	ldr	r3, [pc, #416]	@ (8008b08 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8008968:	2200      	movs	r2, #0
 800896a:	601a      	str	r2, [r3, #0]

			if ((!homing_active || homing_state == HOMING_REV_TO_ZERO_DEG) // ← FIXED
 800896c:	4b67      	ldr	r3, [pc, #412]	@ (8008b0c <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800896e:	781b      	ldrb	r3, [r3, #0]
 8008970:	f083 0301 	eor.w	r3, r3, #1
 8008974:	b2db      	uxtb	r3, r3
 8008976:	2b00      	cmp	r3, #0
 8008978:	d103      	bne.n	8008982 <HAL_TIM_PeriodElapsedCallback+0x13e>
 800897a:	4b65      	ldr	r3, [pc, #404]	@ (8008b10 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 800897c:	781b      	ldrb	r3, [r3, #0]
 800897e:	2b07      	cmp	r3, #7
 8008980:	d120      	bne.n	80089c4 <HAL_TIM_PeriodElapsedCallback+0x180>
					&& (!joy_mode_active
 8008982:	4b64      	ldr	r3, [pc, #400]	@ (8008b14 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8008984:	781b      	ldrb	r3, [r3, #0]
 8008986:	f083 0301 	eor.w	r3, r3, #1
 800898a:	b2db      	uxtb	r3, r3
 800898c:	2b00      	cmp	r3, #0
 800898e:	d10b      	bne.n	80089a8 <HAL_TIM_PeriodElapsedCallback+0x164>
							|| (joy_mode_state != JOY_MODE_MANUAL_CONTROL
 8008990:	4b61      	ldr	r3, [pc, #388]	@ (8008b18 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8008992:	781b      	ldrb	r3, [r3, #0]
 8008994:	2b02      	cmp	r3, #2
 8008996:	d015      	beq.n	80089c4 <HAL_TIM_PeriodElapsedCallback+0x180>
									&& joy_mode_state
											!= JOY_MODE_INITIAL_CONTROL
 8008998:	4b5f      	ldr	r3, [pc, #380]	@ (8008b18 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 800899a:	781b      	ldrb	r3, [r3, #0]
									&& joy_mode_state
 800899c:	2b01      	cmp	r3, #1
 800899e:	d011      	beq.n	80089c4 <HAL_TIM_PeriodElapsedCallback+0x180>
									&& joy_mode_state != JOY_MODE_POSITION_SAVED))
 80089a0:	4b5d      	ldr	r3, [pc, #372]	@ (8008b18 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80089a2:	781b      	ldrb	r3, [r3, #0]
 80089a4:	2b03      	cmp	r3, #3
 80089a6:	d00d      	beq.n	80089c4 <HAL_TIM_PeriodElapsedCallback+0x180>
					&& (!is_emergency_active() || tuning_mode)) {
 80089a8:	f7fe fe46 	bl	8007638 <is_emergency_active>
 80089ac:	4603      	mov	r3, r0
 80089ae:	f083 0301 	eor.w	r3, r3, #1
 80089b2:	b2db      	uxtb	r3, r3
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d103      	bne.n	80089c0 <HAL_TIM_PeriodElapsedCallback+0x17c>
 80089b8:	4b58      	ldr	r3, [pc, #352]	@ (8008b1c <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80089ba:	781b      	ldrb	r3, [r3, #0]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d001      	beq.n	80089c4 <HAL_TIM_PeriodElapsedCallback+0x180>
				update_position_control();
 80089c0:	f7fd fec4 	bl	800674c <update_position_control>
			}
		}

		// Velocity control update - Allow during HOMING_REV_TO_ZERO_DEG
		if ((!homing_active || homing_state == HOMING_REV_TO_ZERO_DEG) // ← FIXED
 80089c4:	4b51      	ldr	r3, [pc, #324]	@ (8008b0c <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80089c6:	781b      	ldrb	r3, [r3, #0]
 80089c8:	f083 0301 	eor.w	r3, r3, #1
 80089cc:	b2db      	uxtb	r3, r3
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d103      	bne.n	80089da <HAL_TIM_PeriodElapsedCallback+0x196>
 80089d2:	4b4f      	ldr	r3, [pc, #316]	@ (8008b10 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80089d4:	781b      	ldrb	r3, [r3, #0]
 80089d6:	2b07      	cmp	r3, #7
 80089d8:	d120      	bne.n	8008a1c <HAL_TIM_PeriodElapsedCallback+0x1d8>
				&& (!joy_mode_active
 80089da:	4b4e      	ldr	r3, [pc, #312]	@ (8008b14 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80089dc:	781b      	ldrb	r3, [r3, #0]
 80089de:	f083 0301 	eor.w	r3, r3, #1
 80089e2:	b2db      	uxtb	r3, r3
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d10b      	bne.n	8008a00 <HAL_TIM_PeriodElapsedCallback+0x1bc>
						|| (joy_mode_state != JOY_MODE_MANUAL_CONTROL
 80089e8:	4b4b      	ldr	r3, [pc, #300]	@ (8008b18 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80089ea:	781b      	ldrb	r3, [r3, #0]
 80089ec:	2b02      	cmp	r3, #2
 80089ee:	d015      	beq.n	8008a1c <HAL_TIM_PeriodElapsedCallback+0x1d8>
								&& joy_mode_state != JOY_MODE_INITIAL_CONTROL
 80089f0:	4b49      	ldr	r3, [pc, #292]	@ (8008b18 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80089f2:	781b      	ldrb	r3, [r3, #0]
 80089f4:	2b01      	cmp	r3, #1
 80089f6:	d011      	beq.n	8008a1c <HAL_TIM_PeriodElapsedCallback+0x1d8>
								&& joy_mode_state != JOY_MODE_POSITION_SAVED))
 80089f8:	4b47      	ldr	r3, [pc, #284]	@ (8008b18 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80089fa:	781b      	ldrb	r3, [r3, #0]
 80089fc:	2b03      	cmp	r3, #3
 80089fe:	d00d      	beq.n	8008a1c <HAL_TIM_PeriodElapsedCallback+0x1d8>
				&& (!is_emergency_active() || tuning_mode)) {
 8008a00:	f7fe fe1a 	bl	8007638 <is_emergency_active>
 8008a04:	4603      	mov	r3, r0
 8008a06:	f083 0301 	eor.w	r3, r3, #1
 8008a0a:	b2db      	uxtb	r3, r3
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d103      	bne.n	8008a18 <HAL_TIM_PeriodElapsedCallback+0x1d4>
 8008a10:	4b42      	ldr	r3, [pc, #264]	@ (8008b1c <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8008a12:	781b      	ldrb	r3, [r3, #0]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d001      	beq.n	8008a1c <HAL_TIM_PeriodElapsedCallback+0x1d8>
			update_velocity_control();
 8008a18:	f7fd ff56 	bl	80068c8 <update_velocity_control>
		}

		update_safety_system();
 8008a1c:	f7fe fd8a 	bl	8007534 <update_safety_system>

		if (!is_emergency_active() || tuning_mode) {
 8008a20:	f7fe fe0a 	bl	8007638 <is_emergency_active>
 8008a24:	4603      	mov	r3, r0
 8008a26:	f083 0301 	eor.w	r3, r3, #1
 8008a2a:	b2db      	uxtb	r3, r3
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d103      	bne.n	8008a38 <HAL_TIM_PeriodElapsedCallback+0x1f4>
 8008a30:	4b3a      	ldr	r3, [pc, #232]	@ (8008b1c <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8008a32:	781b      	ldrb	r3, [r3, #0]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d001      	beq.n	8008a3c <HAL_TIM_PeriodElapsedCallback+0x1f8>
			check_safety_conditions();
 8008a38:	f7fe fc60 	bl	80072fc <check_safety_conditions>
		}

		// Control loops - joy mode handles its own control
		if (!joy_mode_active) {
 8008a3c:	4b35      	ldr	r3, [pc, #212]	@ (8008b14 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8008a3e:	781b      	ldrb	r3, [r3, #0]
 8008a40:	f083 0301 	eor.w	r3, r3, #1
 8008a44:	b2db      	uxtb	r3, r3
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d002      	beq.n	8008a50 <HAL_TIM_PeriodElapsedCallback+0x20c>
			update_control_loops();
 8008a4a:	f7fe f951 	bl	8006cf0 <update_control_loops>
 8008a4e:	e001      	b.n	8008a54 <HAL_TIM_PeriodElapsedCallback+0x210>
		} else {
			update_joy_mode();
 8008a50:	f7ff fbb0 	bl	80081b4 <update_joy_mode>
		}

		// ALWAYS update display values
		if (!joy_mode_active) {
 8008a54:	4b2f      	ldr	r3, [pc, #188]	@ (8008b14 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8008a56:	781b      	ldrb	r3, [r3, #0]
 8008a58:	f083 0301 	eor.w	r3, r3, #1
 8008a5c:	b2db      	uxtb	r3, r3
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d01e      	beq.n	8008aa0 <HAL_TIM_PeriodElapsedCallback+0x25c>
			// Update display values for normal operation
			normalized_position = normalize_angle(revolute_encoder.rads);
 8008a62:	4b20      	ldr	r3, [pc, #128]	@ (8008ae4 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8008a64:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8008a68:	eeb0 0a67 	vmov.f32	s0, s15
 8008a6c:	f7fd fb74 	bl	8006158 <normalize_angle>
 8008a70:	eef0 7a40 	vmov.f32	s15, s0
 8008a74:	4b2a      	ldr	r3, [pc, #168]	@ (8008b20 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8008a76:	edc3 7a00 	vstr	s15, [r3]
			prismatic_axis.mm = prismatic_encoder.mm;
 8008a7a:	4b19      	ldr	r3, [pc, #100]	@ (8008ae0 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8008a7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008a7e:	4a1e      	ldr	r2, [pc, #120]	@ (8008af8 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8008a80:	6393      	str	r3, [r2, #56]	@ 0x38
			revolute_axis.deg = UnitConverter_angle(&converter_system,
 8008a82:	4b27      	ldr	r3, [pc, #156]	@ (8008b20 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8008a84:	edd3 7a00 	vldr	s15, [r3]
 8008a88:	220e      	movs	r2, #14
 8008a8a:	210f      	movs	r1, #15
 8008a8c:	eeb0 0a67 	vmov.f32	s0, s15
 8008a90:	4824      	ldr	r0, [pc, #144]	@ (8008b24 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8008a92:	f7fc f8bd 	bl	8004c10 <UnitConverter_angle>
 8008a96:	eef0 7a40 	vmov.f32	s15, s0
 8008a9a:	4b13      	ldr	r3, [pc, #76]	@ (8008ae8 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8008a9c:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
					normalized_position, UNIT_RADIAN, UNIT_DEGREE);
		}
		// Note: joy mode updates its own display values in update_joy_mode()

		prismatic_axis.accel_show = FIR_process(&prismatic_lp_accel,
 8008aa0:	4b0f      	ldr	r3, [pc, #60]	@ (8008ae0 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8008aa2:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 8008aa6:	eeb0 0a67 	vmov.f32	s0, s15
 8008aaa:	481f      	ldr	r0, [pc, #124]	@ (8008b28 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8008aac:	f7f9 f984 	bl	8001db8 <FIR_process>
 8008ab0:	eef0 7a40 	vmov.f32	s15, s0
 8008ab4:	4b10      	ldr	r3, [pc, #64]	@ (8008af8 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8008ab6:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
				prismatic_encoder.mmpss);
		revolute_axis.accel_show = FIR_process(&revolute_lp_accel,
 8008aba:	4b0a      	ldr	r3, [pc, #40]	@ (8008ae4 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8008abc:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8008ac0:	eeb0 0a67 	vmov.f32	s0, s15
 8008ac4:	4819      	ldr	r0, [pc, #100]	@ (8008b2c <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8008ac6:	f7f9 f977 	bl	8001db8 <FIR_process>
 8008aca:	eef0 7a40 	vmov.f32	s15, s0
 8008ace:	4b06      	ldr	r3, [pc, #24]	@ (8008ae8 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8008ad0:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
				revolute_encoder.radpss);
	}
}
 8008ad4:	bf00      	nop
 8008ad6:	3708      	adds	r7, #8
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bd80      	pop	{r7, pc}
 8008adc:	20001ca0 	.word	0x20001ca0
 8008ae0:	200006e0 	.word	0x200006e0
 8008ae4:	2000073c 	.word	0x2000073c
 8008ae8:	200004c4 	.word	0x200004c4
 8008aec:	477fff00 	.word	0x477fff00
 8008af0:	c77fff00 	.word	0xc77fff00
 8008af4:	200017e0 	.word	0x200017e0
 8008af8:	20000480 	.word	0x20000480
 8008afc:	20001474 	.word	0x20001474
 8008b00:	20000100 	.word	0x20000100
 8008b04:	447a0000 	.word	0x447a0000
 8008b08:	20000574 	.word	0x20000574
 8008b0c:	20000567 	.word	0x20000567
 8008b10:	20000566 	.word	0x20000566
 8008b14:	20000581 	.word	0x20000581
 8008b18:	20000580 	.word	0x20000580
 8008b1c:	20000334 	.word	0x20000334
 8008b20:	20000578 	.word	0x20000578
 8008b24:	20000ad4 	.word	0x20000ad4
 8008b28:	20000d2c 	.word	0x20000d2c
 8008b2c:	20000d38 	.word	0x20000d38

08008b30 <modbus_working>:

//modbus
void modbus_working(void) {
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b086      	sub	sp, #24
 8008b34:	af00      	add	r7, sp, #0

	uint16_t limit_switch_status = 0;
 8008b36:	2300      	movs	r3, #0
 8008b38:	82fb      	strh	r3, [r7, #22]
//heartbeat
	registerFrame[Heartbeat_Protocol].U16 = 22881;
 8008b3a:	4b70      	ldr	r3, [pc, #448]	@ (8008cfc <modbus_working+0x1cc>)
 8008b3c:	f645 1261 	movw	r2, #22881	@ 0x5961
 8008b40:	801a      	strh	r2, [r3, #0]
//servo write
	if (registerFrame[Servo_UP].U16 == 1) {
 8008b42:	4b6e      	ldr	r3, [pc, #440]	@ (8008cfc <modbus_working+0x1cc>)
 8008b44:	891b      	ldrh	r3, [r3, #8]
 8008b46:	2b01      	cmp	r3, #1
 8008b48:	d102      	bne.n	8008b50 <modbus_working+0x20>
		plotter_pen_up();
 8008b4a:	f000 fd79 	bl	8009640 <plotter_pen_up>
 8008b4e:	e005      	b.n	8008b5c <modbus_working+0x2c>
	} else if (registerFrame[Servo_Down].U16 == 1) {
 8008b50:	4b6a      	ldr	r3, [pc, #424]	@ (8008cfc <modbus_working+0x1cc>)
 8008b52:	895b      	ldrh	r3, [r3, #10]
 8008b54:	2b01      	cmp	r3, #1
 8008b56:	d101      	bne.n	8008b5c <modbus_working+0x2c>
		plotter_pen_down();
 8008b58:	f000 fd82 	bl	8009660 <plotter_pen_down>
	}

//limitSW
	if (up_lim == 1) {
 8008b5c:	4b68      	ldr	r3, [pc, #416]	@ (8008d00 <modbus_working+0x1d0>)
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	2b01      	cmp	r3, #1
 8008b62:	d103      	bne.n	8008b6c <modbus_working+0x3c>
		limit_switch_status |= 0x02;  // Bit 1 = Limit UP
 8008b64:	8afb      	ldrh	r3, [r7, #22]
 8008b66:	f043 0302 	orr.w	r3, r3, #2
 8008b6a:	82fb      	strh	r3, [r7, #22]
	}
	if (low_lim == 1) {
 8008b6c:	4b65      	ldr	r3, [pc, #404]	@ (8008d04 <modbus_working+0x1d4>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	2b01      	cmp	r3, #1
 8008b72:	d103      	bne.n	8008b7c <modbus_working+0x4c>
		limit_switch_status |= 0x01;  // Bit 0 = Limit DOWN
 8008b74:	8afb      	ldrh	r3, [r7, #22]
 8008b76:	f043 0301 	orr.w	r3, r3, #1
 8008b7a:	82fb      	strh	r3, [r7, #22]
	}
	registerFrame[LimitSwitch_Status].U16 = limit_switch_status;
 8008b7c:	4a5f      	ldr	r2, [pc, #380]	@ (8008cfc <modbus_working+0x1cc>)
 8008b7e:	8afb      	ldrh	r3, [r7, #22]
 8008b80:	80d3      	strh	r3, [r2, #6]

	if (registerFrame[BaseSystem_Status].U16 == 1) {
 8008b82:	4b5e      	ldr	r3, [pc, #376]	@ (8008cfc <modbus_working+0x1cc>)
 8008b84:	885b      	ldrh	r3, [r3, #2]
 8008b86:	2b01      	cmp	r3, #1
 8008b88:	d105      	bne.n	8008b96 <modbus_working+0x66>
		exit_joy_mode();
 8008b8a:	f7fe fdd7 	bl	800773c <exit_joy_mode>
		start_homing_sequence(true);
 8008b8e:	2001      	movs	r0, #1
 8008b90:	f7fc feb6 	bl	8005900 <start_homing_sequence>
 8008b94:	e03b      	b.n	8008c0e <modbus_working+0xde>
	} else if (registerFrame[BaseSystem_Status].U16 == 2) {
 8008b96:	4b59      	ldr	r3, [pc, #356]	@ (8008cfc <modbus_working+0x1cc>)
 8008b98:	885b      	ldrh	r3, [r3, #2]
 8008b9a:	2b02      	cmp	r3, #2
 8008b9c:	d105      	bne.n	8008baa <modbus_working+0x7a>
		registerFrame[R_Theta_Status].U16 = 2;
 8008b9e:	4b57      	ldr	r3, [pc, #348]	@ (8008cfc <modbus_working+0x1cc>)
 8008ba0:	2202      	movs	r2, #2
 8008ba2:	841a      	strh	r2, [r3, #32]
		enter_joy_mode();
 8008ba4:	f7fe fd58 	bl	8007658 <enter_joy_mode>
 8008ba8:	e031      	b.n	8008c0e <modbus_working+0xde>
	} else if (registerFrame[BaseSystem_Status].U16 == 4) {
 8008baa:	4b54      	ldr	r3, [pc, #336]	@ (8008cfc <modbus_working+0x1cc>)
 8008bac:	885b      	ldrh	r3, [r3, #2]
 8008bae:	2b04      	cmp	r3, #4
 8008bb0:	d102      	bne.n	8008bb8 <modbus_working+0x88>
		exit_joy_mode();
 8008bb2:	f7fe fdc3 	bl	800773c <exit_joy_mode>
 8008bb6:	e02a      	b.n	8008c0e <modbus_working+0xde>
	} else if (registerFrame[BaseSystem_Status].U16 == 8) {
 8008bb8:	4b50      	ldr	r3, [pc, #320]	@ (8008cfc <modbus_working+0x1cc>)
 8008bba:	885b      	ldrh	r3, [r3, #2]
 8008bbc:	2b08      	cmp	r3, #8
 8008bbe:	d126      	bne.n	8008c0e <modbus_working+0xde>
		registerFrame[R_Theta_Status].U16 = 8;
 8008bc0:	4b4e      	ldr	r3, [pc, #312]	@ (8008cfc <modbus_working+0x1cc>)
 8008bc2:	2208      	movs	r2, #8
 8008bc4:	841a      	strh	r2, [r3, #32]
		exit_joy_mode();
 8008bc6:	f7fe fdb9 	bl	800773c <exit_joy_mode>
		float goal_r_mm = (float) (int16_t) registerFrame[Goal_R].U16 / 10.0;
 8008bca:	4b4c      	ldr	r3, [pc, #304]	@ (8008cfc <modbus_working+0x1cc>)
 8008bcc:	f8b3 3080 	ldrh.w	r3, [r3, #128]	@ 0x80
 8008bd0:	b21b      	sxth	r3, r3
 8008bd2:	ee07 3a90 	vmov	s15, r3
 8008bd6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008bda:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8008bde:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008be2:	edc7 7a04 	vstr	s15, [r7, #16]
		float goal_theta_deg = (float) (int16_t) registerFrame[Goal_Theta].U16
 8008be6:	4b45      	ldr	r3, [pc, #276]	@ (8008cfc <modbus_working+0x1cc>)
 8008be8:	f8b3 3082 	ldrh.w	r3, [r3, #130]	@ 0x82
 8008bec:	b21b      	sxth	r3, r3
 8008bee:	ee07 3a90 	vmov	s15, r3
 8008bf2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008bf6:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8008bfa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008bfe:	edc7 7a03 	vstr	s15, [r7, #12]
				/ 10.0;

		start_combined_trajectory(goal_r_mm, goal_theta_deg);
 8008c02:	edd7 0a03 	vldr	s1, [r7, #12]
 8008c06:	ed97 0a04 	vldr	s0, [r7, #16]
 8008c0a:	f7fd fb8f 	bl	800632c <start_combined_trajectory>
	}

	registerFrame[R_Axis_Actual_Position].U16 = prismatic_encoder.mm * 10.0f;
 8008c0e:	4b3e      	ldr	r3, [pc, #248]	@ (8008d08 <modbus_working+0x1d8>)
 8008c10:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8008c14:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8008c18:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008c1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c20:	ee17 3a90 	vmov	r3, s15
 8008c24:	b29a      	uxth	r2, r3
 8008c26:	4b35      	ldr	r3, [pc, #212]	@ (8008cfc <modbus_working+0x1cc>)
 8008c28:	845a      	strh	r2, [r3, #34]	@ 0x22
	registerFrame[R_Axis_Actual_Speed].U16 = prismatic_axis.kalman_velocity
 8008c2a:	4b38      	ldr	r3, [pc, #224]	@ (8008d0c <modbus_working+0x1dc>)
 8008c2c:	edd3 7a07 	vldr	s15, [r3, #28]
			* 10.0f;
 8008c30:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8008c34:	ee67 7a87 	vmul.f32	s15, s15, s14
	registerFrame[R_Axis_Actual_Speed].U16 = prismatic_axis.kalman_velocity
 8008c38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c3c:	ee17 3a90 	vmov	r3, s15
 8008c40:	b29a      	uxth	r2, r3
 8008c42:	4b2e      	ldr	r3, [pc, #184]	@ (8008cfc <modbus_working+0x1cc>)
 8008c44:	84da      	strh	r2, [r3, #38]	@ 0x26

	float pris_accel = FIR_process(&prismatic_lp_accel,
 8008c46:	4b30      	ldr	r3, [pc, #192]	@ (8008d08 <modbus_working+0x1d8>)
 8008c48:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 8008c4c:	eeb0 0a67 	vmov.f32	s0, s15
 8008c50:	482f      	ldr	r0, [pc, #188]	@ (8008d10 <modbus_working+0x1e0>)
 8008c52:	f7f9 f8b1 	bl	8001db8 <FIR_process>
 8008c56:	ed87 0a02 	vstr	s0, [r7, #8]
			prismatic_encoder.mmpss);
	registerFrame[R_Axis_Acceleration].U16 = pris_accel * 10.0f;
 8008c5a:	edd7 7a02 	vldr	s15, [r7, #8]
 8008c5e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8008c62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008c66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c6a:	ee17 3a90 	vmov	r3, s15
 8008c6e:	b29a      	uxth	r2, r3
 8008c70:	4b22      	ldr	r3, [pc, #136]	@ (8008cfc <modbus_working+0x1cc>)
 8008c72:	855a      	strh	r2, [r3, #42]	@ 0x2a

	registerFrame[Theta_Axis_Actual_Position].U16 = revolute_axis.deg * 10.0f;
 8008c74:	4b27      	ldr	r3, [pc, #156]	@ (8008d14 <modbus_working+0x1e4>)
 8008c76:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8008c7a:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8008c7e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008c82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c86:	ee17 3a90 	vmov	r3, s15
 8008c8a:	b29a      	uxth	r2, r3
 8008c8c:	4b1b      	ldr	r3, [pc, #108]	@ (8008cfc <modbus_working+0x1cc>)
 8008c8e:	849a      	strh	r2, [r3, #36]	@ 0x24

	float rev_theta_vel = UnitConverter_angle(&converter_system,
 8008c90:	4b20      	ldr	r3, [pc, #128]	@ (8008d14 <modbus_working+0x1e4>)
 8008c92:	edd3 7a07 	vldr	s15, [r3, #28]
 8008c96:	220e      	movs	r2, #14
 8008c98:	210f      	movs	r1, #15
 8008c9a:	eeb0 0a67 	vmov.f32	s0, s15
 8008c9e:	481e      	ldr	r0, [pc, #120]	@ (8008d18 <modbus_working+0x1e8>)
 8008ca0:	f7fb ffb6 	bl	8004c10 <UnitConverter_angle>
 8008ca4:	ed87 0a01 	vstr	s0, [r7, #4]
			revolute_axis.kalman_velocity, UNIT_RADIAN, UNIT_DEGREE);
	registerFrame[Theta_Axis_Actual_Speed].U16 = rev_theta_vel * 10.0f;
 8008ca8:	edd7 7a01 	vldr	s15, [r7, #4]
 8008cac:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8008cb0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008cb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008cb8:	ee17 3a90 	vmov	r3, s15
 8008cbc:	b29a      	uxth	r2, r3
 8008cbe:	4b0f      	ldr	r3, [pc, #60]	@ (8008cfc <modbus_working+0x1cc>)
 8008cc0:	851a      	strh	r2, [r3, #40]	@ 0x28

	float rev_theta_accel = UnitConverter_angle(&converter_system,
 8008cc2:	4b16      	ldr	r3, [pc, #88]	@ (8008d1c <modbus_working+0x1ec>)
 8008cc4:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8008cc8:	220e      	movs	r2, #14
 8008cca:	210f      	movs	r1, #15
 8008ccc:	eeb0 0a67 	vmov.f32	s0, s15
 8008cd0:	4811      	ldr	r0, [pc, #68]	@ (8008d18 <modbus_working+0x1e8>)
 8008cd2:	f7fb ff9d 	bl	8004c10 <UnitConverter_angle>
 8008cd6:	ed87 0a00 	vstr	s0, [r7]
			revolute_encoder.radpss, UNIT_RADIAN, UNIT_DEGREE);
	registerFrame[Theta_Axis_Acceleration].U16 = rev_theta_accel * 10.0f;
 8008cda:	edd7 7a00 	vldr	s15, [r7]
 8008cde:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8008ce2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008ce6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008cea:	ee17 3a90 	vmov	r3, s15
 8008cee:	b29a      	uxth	r2, r3
 8008cf0:	4b02      	ldr	r3, [pc, #8]	@ (8008cfc <modbus_working+0x1cc>)
 8008cf2:	859a      	strh	r2, [r3, #44]	@ 0x2c

}
 8008cf4:	bf00      	nop
 8008cf6:	3718      	adds	r7, #24
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bd80      	pop	{r7, pc}
 8008cfc:	200012e4 	.word	0x200012e4
 8008d00:	20001bb8 	.word	0x20001bb8
 8008d04:	20001bbc 	.word	0x20001bbc
 8008d08:	200006e0 	.word	0x200006e0
 8008d0c:	20000480 	.word	0x20000480
 8008d10:	20000d2c 	.word	0x20000d2c
 8008d14:	200004c4 	.word	0x200004c4
 8008d18:	20000ad4 	.word	0x20000ad4
 8008d1c:	2000073c 	.word	0x2000073c

08008d20 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8008d20:	b480      	push	{r7}
 8008d22:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8008d24:	b672      	cpsid	i
}
 8008d26:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8008d28:	bf00      	nop
 8008d2a:	e7fd      	b.n	8008d28 <Error_Handler+0x8>
 8008d2c:	0000      	movs	r0, r0
	...

08008d30 <plotter_begin>:
float prismatic_current = 0.0f;
float revolute_current = 0.0f;

int up_lim, low_lim, b1, b2, b3, b4;

void plotter_begin() {
 8008d30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008d34:	ed2d 8b02 	vpush	{d8}
 8008d38:	b083      	sub	sp, #12
 8008d3a:	af02      	add	r7, sp, #8
	ZGX45RGG_400RPM_Constant.sd_max = ZGX45RGG_400RPM_Constant.qd_max
 8008d3c:	4bc6      	ldr	r3, [pc, #792]	@ (8009058 <plotter_begin+0x328>)
 8008d3e:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
			* Disturbance_Constant.prismatic_pulley_radius * 1000;
 8008d42:	4bc6      	ldr	r3, [pc, #792]	@ (800905c <plotter_begin+0x32c>)
 8008d44:	691b      	ldr	r3, [r3, #16]
 8008d46:	4618      	mov	r0, r3
 8008d48:	f7f7 fbca 	bl	80004e0 <__aeabi_f2d>
 8008d4c:	4602      	mov	r2, r0
 8008d4e:	460b      	mov	r3, r1
 8008d50:	4620      	mov	r0, r4
 8008d52:	4629      	mov	r1, r5
 8008d54:	f7f7 fc1c 	bl	8000590 <__aeabi_dmul>
 8008d58:	4602      	mov	r2, r0
 8008d5a:	460b      	mov	r3, r1
 8008d5c:	4610      	mov	r0, r2
 8008d5e:	4619      	mov	r1, r3
 8008d60:	f04f 0200 	mov.w	r2, #0
 8008d64:	4bbe      	ldr	r3, [pc, #760]	@ (8009060 <plotter_begin+0x330>)
 8008d66:	f7f7 fc13 	bl	8000590 <__aeabi_dmul>
 8008d6a:	4602      	mov	r2, r0
 8008d6c:	460b      	mov	r3, r1
	ZGX45RGG_400RPM_Constant.sd_max = ZGX45RGG_400RPM_Constant.qd_max
 8008d6e:	49ba      	ldr	r1, [pc, #744]	@ (8009058 <plotter_begin+0x328>)
 8008d70:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
	ZGX45RGG_400RPM_Constant.sdd_max = ZGX45RGG_400RPM_Constant.sd_max * 2;
 8008d74:	4bb8      	ldr	r3, [pc, #736]	@ (8009058 <plotter_begin+0x328>)
 8008d76:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8008d7a:	4602      	mov	r2, r0
 8008d7c:	460b      	mov	r3, r1
 8008d7e:	f7f7 fa51 	bl	8000224 <__adddf3>
 8008d82:	4602      	mov	r2, r0
 8008d84:	460b      	mov	r3, r1
 8008d86:	49b4      	ldr	r1, [pc, #720]	@ (8009058 <plotter_begin+0x328>)
 8008d88:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58

	ZGX45RGG_400RPM_Constant.traject_sd_max = 500.0;
 8008d8c:	49b2      	ldr	r1, [pc, #712]	@ (8009058 <plotter_begin+0x328>)
 8008d8e:	f04f 0200 	mov.w	r2, #0
 8008d92:	4bb4      	ldr	r3, [pc, #720]	@ (8009064 <plotter_begin+0x334>)
 8008d94:	e9c1 231c 	strd	r2, r3, [r1, #112]	@ 0x70
	ZGX45RGG_400RPM_Constant.traject_sdd_max = 1000.0;
 8008d98:	49af      	ldr	r1, [pc, #700]	@ (8009058 <plotter_begin+0x328>)
 8008d9a:	f04f 0200 	mov.w	r2, #0
 8008d9e:	4bb0      	ldr	r3, [pc, #704]	@ (8009060 <plotter_begin+0x330>)
 8008da0:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78

	ZGX45RGG_150RPM_Constant.qd_max = ZGX45RGG_150RPM_Constant.qd_max
 8008da4:	4bb0      	ldr	r3, [pc, #704]	@ (8009068 <plotter_begin+0x338>)
 8008da6:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
			* (24.0 / 36.0);
 8008daa:	a3a9      	add	r3, pc, #676	@ (adr r3, 8009050 <plotter_begin+0x320>)
 8008dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008db0:	f7f7 fbee 	bl	8000590 <__aeabi_dmul>
 8008db4:	4602      	mov	r2, r0
 8008db6:	460b      	mov	r3, r1
	ZGX45RGG_150RPM_Constant.qd_max = ZGX45RGG_150RPM_Constant.qd_max
 8008db8:	49ab      	ldr	r1, [pc, #684]	@ (8009068 <plotter_begin+0x338>)
 8008dba:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

	ZGX45RGG_150RPM_Constant.traject_qd_max = 5.0;
 8008dbe:	49aa      	ldr	r1, [pc, #680]	@ (8009068 <plotter_begin+0x338>)
 8008dc0:	f04f 0200 	mov.w	r2, #0
 8008dc4:	4ba9      	ldr	r3, [pc, #676]	@ (800906c <plotter_begin+0x33c>)
 8008dc6:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
	ZGX45RGG_150RPM_Constant.traject_qdd_max = 2.0;
 8008dca:	49a7      	ldr	r1, [pc, #668]	@ (8009068 <plotter_begin+0x338>)
 8008dcc:	f04f 0200 	mov.w	r2, #0
 8008dd0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008dd4:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68

	SIGNAL_init(&sine_sg_PWM, SIGNAL_SINE);
 8008dd8:	2100      	movs	r1, #0
 8008dda:	48a5      	ldr	r0, [pc, #660]	@ (8009070 <plotter_begin+0x340>)
 8008ddc:	f000 fc50 	bl	8009680 <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_PWM, SINE_AMPLITUDE, SINE_FREQUENCY, SINE_PHASE,
 8008de0:	eddf 2aa4 	vldr	s5, [pc, #656]	@ 8009074 <plotter_begin+0x344>
 8008de4:	ed9f 2aa4 	vldr	s4, [pc, #656]	@ 8009078 <plotter_begin+0x348>
 8008de8:	eddf 1ab1 	vldr	s3, [pc, #708]	@ 80090b0 <plotter_begin+0x380>
 8008dec:	ed9f 1ab0 	vldr	s2, [pc, #704]	@ 80090b0 <plotter_begin+0x380>
 8008df0:	eddf 0aa2 	vldr	s1, [pc, #648]	@ 800907c <plotter_begin+0x34c>
 8008df4:	ed9f 0a9f 	vldr	s0, [pc, #636]	@ 8009074 <plotter_begin+0x344>
 8008df8:	489d      	ldr	r0, [pc, #628]	@ (8009070 <plotter_begin+0x340>)
 8008dfa:	f000 fc9f 	bl	800973c <SIGNAL_config_sine>
	SINE_OFFSET, SINE_MIN_SETPOINT, SINE_MAX_SETPOINT);

	SIGNAL_init(&square_sg_PWM, SIGNAL_SQUARE);
 8008dfe:	2102      	movs	r1, #2
 8008e00:	489f      	ldr	r0, [pc, #636]	@ (8009080 <plotter_begin+0x350>)
 8008e02:	f000 fc3d 	bl	8009680 <SIGNAL_init>
	SIGNAL_config_square(&square_sg_PWM, SQUARE_AMPLITUDE, SQUARE_FREQUENCY,
 8008e06:	ed9f 3a9b 	vldr	s6, [pc, #620]	@ 8009074 <plotter_begin+0x344>
 8008e0a:	eddf 2a9b 	vldr	s5, [pc, #620]	@ 8009078 <plotter_begin+0x348>
 8008e0e:	ed9f 2aa8 	vldr	s4, [pc, #672]	@ 80090b0 <plotter_begin+0x380>
 8008e12:	eddf 1aa7 	vldr	s3, [pc, #668]	@ 80090b0 <plotter_begin+0x380>
 8008e16:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8008e1a:	eddf 0a98 	vldr	s1, [pc, #608]	@ 800907c <plotter_begin+0x34c>
 8008e1e:	ed9f 0a95 	vldr	s0, [pc, #596]	@ 8009074 <plotter_begin+0x344>
 8008e22:	4897      	ldr	r0, [pc, #604]	@ (8009080 <plotter_begin+0x350>)
 8008e24:	f000 fcb5 	bl	8009792 <SIGNAL_config_square>
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
	SQUARE_MIN_SETPOINT, SQUARE_MAX_SETPOINT);

	SIGNAL_init(&sine_sg_cascade, SIGNAL_SINE);
 8008e28:	2100      	movs	r1, #0
 8008e2a:	4896      	ldr	r0, [pc, #600]	@ (8009084 <plotter_begin+0x354>)
 8008e2c:	f000 fc28 	bl	8009680 <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_cascade, SINE_AMPLITUDE_CASCADE, SINE_FREQUENCY,
 8008e30:	eddf 2a95 	vldr	s5, [pc, #596]	@ 8009088 <plotter_begin+0x358>
 8008e34:	ed9f 2a95 	vldr	s4, [pc, #596]	@ 800908c <plotter_begin+0x35c>
 8008e38:	eddf 1a9d 	vldr	s3, [pc, #628]	@ 80090b0 <plotter_begin+0x380>
 8008e3c:	ed9f 1a9c 	vldr	s2, [pc, #624]	@ 80090b0 <plotter_begin+0x380>
 8008e40:	eddf 0a8e 	vldr	s1, [pc, #568]	@ 800907c <plotter_begin+0x34c>
 8008e44:	ed9f 0a90 	vldr	s0, [pc, #576]	@ 8009088 <plotter_begin+0x358>
 8008e48:	488e      	ldr	r0, [pc, #568]	@ (8009084 <plotter_begin+0x354>)
 8008e4a:	f000 fc77 	bl	800973c <SIGNAL_config_sine>
	SINE_PHASE,
	SINE_OFFSET, SINE_MIN_SETPOINT_CASCADE, SINE_MAX_SETPOINT_CASCADE);

	SIGNAL_init(&square_sg_cascade, SIGNAL_SQUARE);
 8008e4e:	2102      	movs	r1, #2
 8008e50:	488f      	ldr	r0, [pc, #572]	@ (8009090 <plotter_begin+0x360>)
 8008e52:	f000 fc15 	bl	8009680 <SIGNAL_init>
	SIGNAL_config_square(&square_sg_cascade, SQUARE_AMPLITUDE_CASCADE,
 8008e56:	eeb3 3a09 	vmov.f32	s6, #57	@ 0x41c80000  25.0
 8008e5a:	eefb 2a09 	vmov.f32	s5, #185	@ 0xc1c80000 -25.0
 8008e5e:	ed9f 2a94 	vldr	s4, [pc, #592]	@ 80090b0 <plotter_begin+0x380>
 8008e62:	eddf 1a93 	vldr	s3, [pc, #588]	@ 80090b0 <plotter_begin+0x380>
 8008e66:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8008e6a:	eddf 0a84 	vldr	s1, [pc, #528]	@ 800907c <plotter_begin+0x34c>
 8008e6e:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8008e72:	4887      	ldr	r0, [pc, #540]	@ (8009090 <plotter_begin+0x360>)
 8008e74:	f000 fc8d 	bl	8009792 <SIGNAL_config_square>
	SQUARE_FREQUENCY,
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
	SQUARE_MIN_SETPOINT_CASCADE, SQUARE_MAX_SETPOINT_CASCADE);

	SIGNAL_init(&sine_sg_prismatic, SIGNAL_SINE);
 8008e78:	2100      	movs	r1, #0
 8008e7a:	4886      	ldr	r0, [pc, #536]	@ (8009094 <plotter_begin+0x364>)
 8008e7c:	f000 fc00 	bl	8009680 <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8008e80:	4b75      	ldr	r3, [pc, #468]	@ (8009058 <plotter_begin+0x328>)
 8008e82:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8008e86:	4610      	mov	r0, r2
 8008e88:	4619      	mov	r1, r3
 8008e8a:	f7f7 fe63 	bl	8000b54 <__aeabi_d2f>
 8008e8e:	4604      	mov	r4, r0
	SINE_FREQUENCY, SINE_PHASE,
	SINE_OFFSET, -ZGX45RGG_400RPM_Constant.qd_max,
 8008e90:	4b71      	ldr	r3, [pc, #452]	@ (8009058 <plotter_begin+0x328>)
 8008e92:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8008e96:	4610      	mov	r0, r2
 8008e98:	4619      	mov	r1, r3
 8008e9a:	f7f7 fe5b 	bl	8000b54 <__aeabi_d2f>
 8008e9e:	4603      	mov	r3, r0
	SIGNAL_config_sine(&sine_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8008ea0:	ee07 3a90 	vmov	s15, r3
 8008ea4:	eeb1 8a67 	vneg.f32	s16, s15
			ZGX45RGG_400RPM_Constant.qd_max);
 8008ea8:	4b6b      	ldr	r3, [pc, #428]	@ (8009058 <plotter_begin+0x328>)
 8008eaa:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_sine(&sine_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8008eae:	4610      	mov	r0, r2
 8008eb0:	4619      	mov	r1, r3
 8008eb2:	f7f7 fe4f 	bl	8000b54 <__aeabi_d2f>
 8008eb6:	4603      	mov	r3, r0
 8008eb8:	ee02 3a90 	vmov	s5, r3
 8008ebc:	eeb0 2a48 	vmov.f32	s4, s16
 8008ec0:	eddf 1a7b 	vldr	s3, [pc, #492]	@ 80090b0 <plotter_begin+0x380>
 8008ec4:	ed9f 1a7a 	vldr	s2, [pc, #488]	@ 80090b0 <plotter_begin+0x380>
 8008ec8:	eddf 0a6c 	vldr	s1, [pc, #432]	@ 800907c <plotter_begin+0x34c>
 8008ecc:	ee00 4a10 	vmov	s0, r4
 8008ed0:	4870      	ldr	r0, [pc, #448]	@ (8009094 <plotter_begin+0x364>)
 8008ed2:	f000 fc33 	bl	800973c <SIGNAL_config_sine>

	SIGNAL_init(&square_sg_prismatic, SIGNAL_SQUARE);
 8008ed6:	2102      	movs	r1, #2
 8008ed8:	486f      	ldr	r0, [pc, #444]	@ (8009098 <plotter_begin+0x368>)
 8008eda:	f000 fbd1 	bl	8009680 <SIGNAL_init>
	SIGNAL_config_square(&square_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8008ede:	4b5e      	ldr	r3, [pc, #376]	@ (8009058 <plotter_begin+0x328>)
 8008ee0:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8008ee4:	4610      	mov	r0, r2
 8008ee6:	4619      	mov	r1, r3
 8008ee8:	f7f7 fe34 	bl	8000b54 <__aeabi_d2f>
 8008eec:	4604      	mov	r4, r0
	SQUARE_FREQUENCY,
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
			-ZGX45RGG_400RPM_Constant.qd_max, ZGX45RGG_400RPM_Constant.qd_max);
 8008eee:	4b5a      	ldr	r3, [pc, #360]	@ (8009058 <plotter_begin+0x328>)
 8008ef0:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8008ef4:	4610      	mov	r0, r2
 8008ef6:	4619      	mov	r1, r3
 8008ef8:	f7f7 fe2c 	bl	8000b54 <__aeabi_d2f>
 8008efc:	4603      	mov	r3, r0
	SIGNAL_config_square(&square_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8008efe:	ee07 3a90 	vmov	s15, r3
 8008f02:	eeb1 8a67 	vneg.f32	s16, s15
			-ZGX45RGG_400RPM_Constant.qd_max, ZGX45RGG_400RPM_Constant.qd_max);
 8008f06:	4b54      	ldr	r3, [pc, #336]	@ (8009058 <plotter_begin+0x328>)
 8008f08:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_square(&square_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8008f0c:	4610      	mov	r0, r2
 8008f0e:	4619      	mov	r1, r3
 8008f10:	f7f7 fe20 	bl	8000b54 <__aeabi_d2f>
 8008f14:	4603      	mov	r3, r0
 8008f16:	ee03 3a10 	vmov	s6, r3
 8008f1a:	eef0 2a48 	vmov.f32	s5, s16
 8008f1e:	ed9f 2a64 	vldr	s4, [pc, #400]	@ 80090b0 <plotter_begin+0x380>
 8008f22:	eddf 1a63 	vldr	s3, [pc, #396]	@ 80090b0 <plotter_begin+0x380>
 8008f26:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8008f2a:	eddf 0a54 	vldr	s1, [pc, #336]	@ 800907c <plotter_begin+0x34c>
 8008f2e:	ee00 4a10 	vmov	s0, r4
 8008f32:	4859      	ldr	r0, [pc, #356]	@ (8009098 <plotter_begin+0x368>)
 8008f34:	f000 fc2d 	bl	8009792 <SIGNAL_config_square>

	SIGNAL_init(&sine_sg_revolute, SIGNAL_SINE);
 8008f38:	2100      	movs	r1, #0
 8008f3a:	4858      	ldr	r0, [pc, #352]	@ (800909c <plotter_begin+0x36c>)
 8008f3c:	f000 fba0 	bl	8009680 <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8008f40:	4b49      	ldr	r3, [pc, #292]	@ (8009068 <plotter_begin+0x338>)
 8008f42:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8008f46:	4610      	mov	r0, r2
 8008f48:	4619      	mov	r1, r3
 8008f4a:	f7f7 fe03 	bl	8000b54 <__aeabi_d2f>
 8008f4e:	4604      	mov	r4, r0
	SINE_FREQUENCY, SINE_PHASE,
	SINE_OFFSET, -ZGX45RGG_150RPM_Constant.qd_max,
 8008f50:	4b45      	ldr	r3, [pc, #276]	@ (8009068 <plotter_begin+0x338>)
 8008f52:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8008f56:	4610      	mov	r0, r2
 8008f58:	4619      	mov	r1, r3
 8008f5a:	f7f7 fdfb 	bl	8000b54 <__aeabi_d2f>
 8008f5e:	4603      	mov	r3, r0
	SIGNAL_config_sine(&sine_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8008f60:	ee07 3a90 	vmov	s15, r3
 8008f64:	eeb1 8a67 	vneg.f32	s16, s15
			ZGX45RGG_150RPM_Constant.qd_max);
 8008f68:	4b3f      	ldr	r3, [pc, #252]	@ (8009068 <plotter_begin+0x338>)
 8008f6a:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_sine(&sine_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8008f6e:	4610      	mov	r0, r2
 8008f70:	4619      	mov	r1, r3
 8008f72:	f7f7 fdef 	bl	8000b54 <__aeabi_d2f>
 8008f76:	4603      	mov	r3, r0
 8008f78:	ee02 3a90 	vmov	s5, r3
 8008f7c:	eeb0 2a48 	vmov.f32	s4, s16
 8008f80:	eddf 1a4b 	vldr	s3, [pc, #300]	@ 80090b0 <plotter_begin+0x380>
 8008f84:	ed9f 1a4a 	vldr	s2, [pc, #296]	@ 80090b0 <plotter_begin+0x380>
 8008f88:	eddf 0a3c 	vldr	s1, [pc, #240]	@ 800907c <plotter_begin+0x34c>
 8008f8c:	ee00 4a10 	vmov	s0, r4
 8008f90:	4842      	ldr	r0, [pc, #264]	@ (800909c <plotter_begin+0x36c>)
 8008f92:	f000 fbd3 	bl	800973c <SIGNAL_config_sine>

	SIGNAL_init(&square_sg_revolute, SIGNAL_SQUARE);
 8008f96:	2102      	movs	r1, #2
 8008f98:	4841      	ldr	r0, [pc, #260]	@ (80090a0 <plotter_begin+0x370>)
 8008f9a:	f000 fb71 	bl	8009680 <SIGNAL_init>
	SIGNAL_config_square(&square_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8008f9e:	4b32      	ldr	r3, [pc, #200]	@ (8009068 <plotter_begin+0x338>)
 8008fa0:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8008fa4:	4610      	mov	r0, r2
 8008fa6:	4619      	mov	r1, r3
 8008fa8:	f7f7 fdd4 	bl	8000b54 <__aeabi_d2f>
 8008fac:	4604      	mov	r4, r0
	SQUARE_FREQUENCY,
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
			-ZGX45RGG_150RPM_Constant.qd_max, ZGX45RGG_150RPM_Constant.qd_max);
 8008fae:	4b2e      	ldr	r3, [pc, #184]	@ (8009068 <plotter_begin+0x338>)
 8008fb0:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8008fb4:	4610      	mov	r0, r2
 8008fb6:	4619      	mov	r1, r3
 8008fb8:	f7f7 fdcc 	bl	8000b54 <__aeabi_d2f>
 8008fbc:	4603      	mov	r3, r0
	SIGNAL_config_square(&square_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8008fbe:	ee07 3a90 	vmov	s15, r3
 8008fc2:	eeb1 8a67 	vneg.f32	s16, s15
			-ZGX45RGG_150RPM_Constant.qd_max, ZGX45RGG_150RPM_Constant.qd_max);
 8008fc6:	4b28      	ldr	r3, [pc, #160]	@ (8009068 <plotter_begin+0x338>)
 8008fc8:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_square(&square_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8008fcc:	4610      	mov	r0, r2
 8008fce:	4619      	mov	r1, r3
 8008fd0:	f7f7 fdc0 	bl	8000b54 <__aeabi_d2f>
 8008fd4:	4603      	mov	r3, r0
 8008fd6:	ee03 3a10 	vmov	s6, r3
 8008fda:	eef0 2a48 	vmov.f32	s5, s16
 8008fde:	ed9f 2a34 	vldr	s4, [pc, #208]	@ 80090b0 <plotter_begin+0x380>
 8008fe2:	eddf 1a33 	vldr	s3, [pc, #204]	@ 80090b0 <plotter_begin+0x380>
 8008fe6:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8008fea:	eddf 0a24 	vldr	s1, [pc, #144]	@ 800907c <plotter_begin+0x34c>
 8008fee:	ee00 4a10 	vmov	s0, r4
 8008ff2:	482b      	ldr	r0, [pc, #172]	@ (80090a0 <plotter_begin+0x370>)
 8008ff4:	f000 fbcd 	bl	8009792 <SIGNAL_config_square>

	UnitConverter_init(&converter_system);
 8008ff8:	482a      	ldr	r0, [pc, #168]	@ (80090a4 <plotter_begin+0x374>)
 8008ffa:	f7fb fd73 	bl	8004ae4 <UnitConverter_init>

	QEI_init(&prismatic_encoder, ENC_TIM1, ENC_PPR, ENC_FREQ, MOTOR1_RATIO,
			Disturbance_Constant.prismatic_pulley_radius * 2.0 * 1000.0);
 8008ffe:	4b17      	ldr	r3, [pc, #92]	@ (800905c <plotter_begin+0x32c>)
 8009000:	691b      	ldr	r3, [r3, #16]
 8009002:	4618      	mov	r0, r3
 8009004:	f7f7 fa6c 	bl	80004e0 <__aeabi_f2d>
 8009008:	4602      	mov	r2, r0
 800900a:	460b      	mov	r3, r1
 800900c:	f7f7 f90a 	bl	8000224 <__adddf3>
 8009010:	4602      	mov	r2, r0
 8009012:	460b      	mov	r3, r1
 8009014:	4610      	mov	r0, r2
 8009016:	4619      	mov	r1, r3
 8009018:	f04f 0200 	mov.w	r2, #0
 800901c:	4b10      	ldr	r3, [pc, #64]	@ (8009060 <plotter_begin+0x330>)
 800901e:	f7f7 fab7 	bl	8000590 <__aeabi_dmul>
 8009022:	4602      	mov	r2, r0
 8009024:	460b      	mov	r3, r1
	QEI_init(&prismatic_encoder, ENC_TIM1, ENC_PPR, ENC_FREQ, MOTOR1_RATIO,
 8009026:	4610      	mov	r0, r2
 8009028:	4619      	mov	r1, r3
 800902a:	f7f7 fd93 	bl	8000b54 <__aeabi_d2f>
 800902e:	4603      	mov	r3, r0
 8009030:	ee00 3a90 	vmov	s1, r3
 8009034:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8009038:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800903c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8009040:	4919      	ldr	r1, [pc, #100]	@ (80090a8 <plotter_begin+0x378>)
 8009042:	481a      	ldr	r0, [pc, #104]	@ (80090ac <plotter_begin+0x37c>)
 8009044:	f7fa fed2 	bl	8003dec <QEI_init>
 8009048:	e034      	b.n	80090b4 <plotter_begin+0x384>
 800904a:	bf00      	nop
 800904c:	f3af 8000 	nop.w
 8009050:	55555555 	.word	0x55555555
 8009054:	3fe55555 	.word	0x3fe55555
 8009058:	20000080 	.word	0x20000080
 800905c:	20000100 	.word	0x20000100
 8009060:	408f4000 	.word	0x408f4000
 8009064:	407f4000 	.word	0x407f4000
 8009068:	20000000 	.word	0x20000000
 800906c:	40140000 	.word	0x40140000
 8009070:	200008b4 	.word	0x200008b4
 8009074:	477fff00 	.word	0x477fff00
 8009078:	c77fff00 	.word	0xc77fff00
 800907c:	3dcccccd 	.word	0x3dcccccd
 8009080:	200008f8 	.word	0x200008f8
 8009084:	2000093c 	.word	0x2000093c
 8009088:	43480000 	.word	0x43480000
 800908c:	c3480000 	.word	0xc3480000
 8009090:	20000980 	.word	0x20000980
 8009094:	200009c4 	.word	0x200009c4
 8009098:	20000a08 	.word	0x20000a08
 800909c:	20000a4c 	.word	0x20000a4c
 80090a0:	20000a90 	.word	0x20000a90
 80090a4:	20000ad4 	.word	0x20000ad4
 80090a8:	20001f04 	.word	0x20001f04
 80090ac:	200006e0 	.word	0x200006e0
 80090b0:	00000000 	.word	0x00000000
	QEI_init(&revolute_encoder, ENC_TIM2, ENC_PPR, ENC_FREQ, MOTOR2_RATIO,
 80090b4:	ed5f 0a02 	vldr	s1, [pc, #-8]	@ 80090b0 <plotter_begin+0x380>
 80090b8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80090bc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80090c0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80090c4:	49b8      	ldr	r1, [pc, #736]	@ (80093a8 <plotter_begin+0x678>)
 80090c6:	48b9      	ldr	r0, [pc, #740]	@ (80093ac <plotter_begin+0x67c>)
 80090c8:	f7fa fe90 	bl	8003dec <QEI_init>
	MOTOR2_PULLEY_DIAMETER);

	MDXX_GPIO_init(&prismatic_motor, MOTOR1_TIM, MOTOR1_TIM_CH, MOTOR1_GPIOx,
 80090cc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80090d0:	9300      	str	r3, [sp, #0]
 80090d2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80090d6:	2204      	movs	r2, #4
 80090d8:	49b5      	ldr	r1, [pc, #724]	@ (80093b0 <plotter_begin+0x680>)
 80090da:	48b6      	ldr	r0, [pc, #728]	@ (80093b4 <plotter_begin+0x684>)
 80090dc:	f7f8 f950 	bl	8001380 <MDXX_GPIO_init>
	MOTOR1_GPIO_Pin);
	MDXX_GPIO_init(&revolute_motor, MOTOR2_TIM, MOTOR2_TIM_CH, MOTOR2_GPIOx,
 80090e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80090e4:	9300      	str	r3, [sp, #0]
 80090e6:	4bb4      	ldr	r3, [pc, #720]	@ (80093b8 <plotter_begin+0x688>)
 80090e8:	2200      	movs	r2, #0
 80090ea:	49b1      	ldr	r1, [pc, #708]	@ (80093b0 <plotter_begin+0x680>)
 80090ec:	48b3      	ldr	r0, [pc, #716]	@ (80093bc <plotter_begin+0x68c>)
 80090ee:	f7f8 f947 	bl	8001380 <MDXX_GPIO_init>
	MOTOR2_GPIO_Pin);

	PWM_init(&servo, SERVO_TIM, SERVO_TIM_CH);
 80090f2:	220c      	movs	r2, #12
 80090f4:	49b2      	ldr	r1, [pc, #712]	@ (80093c0 <plotter_begin+0x690>)
 80090f6:	48b3      	ldr	r0, [pc, #716]	@ (80093c4 <plotter_begin+0x694>)
 80090f8:	f7fa fc4a 	bl	8003990 <PWM_init>

	MDXX_set_range(&prismatic_motor, 2000, 0);
 80090fc:	eddf 0ab2 	vldr	s1, [pc, #712]	@ 80093c8 <plotter_begin+0x698>
 8009100:	ed9f 0ab2 	vldr	s0, [pc, #712]	@ 80093cc <plotter_begin+0x69c>
 8009104:	48ab      	ldr	r0, [pc, #684]	@ (80093b4 <plotter_begin+0x684>)
 8009106:	f7f8 f95f 	bl	80013c8 <MDXX_set_range>
	MDXX_set_range(&revolute_motor, 2000, 0);
 800910a:	eddf 0aaf 	vldr	s1, [pc, #700]	@ 80093c8 <plotter_begin+0x698>
 800910e:	ed9f 0aaf 	vldr	s0, [pc, #700]	@ 80093cc <plotter_begin+0x69c>
 8009112:	48aa      	ldr	r0, [pc, #680]	@ (80093bc <plotter_begin+0x68c>)
 8009114:	f7f8 f958 	bl	80013c8 <MDXX_set_range>

	PID_CONTROLLER_Init(&prismatic_position_pid, 75, 1e-10, 80,
			ZGX45RGG_400RPM_Constant.sd_max);
 8009118:	4bad      	ldr	r3, [pc, #692]	@ (80093d0 <plotter_begin+0x6a0>)
 800911a:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
	PID_CONTROLLER_Init(&prismatic_position_pid, 75, 1e-10, 80,
 800911e:	4610      	mov	r0, r2
 8009120:	4619      	mov	r1, r3
 8009122:	f7f7 fd17 	bl	8000b54 <__aeabi_d2f>
 8009126:	4603      	mov	r3, r0
 8009128:	ee01 3a90 	vmov	s3, r3
 800912c:	ed9f 1aa9 	vldr	s2, [pc, #676]	@ 80093d4 <plotter_begin+0x6a4>
 8009130:	eddf 0aa9 	vldr	s1, [pc, #676]	@ 80093d8 <plotter_begin+0x6a8>
 8009134:	ed9f 0aa9 	vldr	s0, [pc, #676]	@ 80093dc <plotter_begin+0x6ac>
 8009138:	48a9      	ldr	r0, [pc, #676]	@ (80093e0 <plotter_begin+0x6b0>)
 800913a:	f7f8 f83a 	bl	80011b2 <PID_CONTROLLER_Init>
	PID_CONTROLLER_Init(&prismatic_velocity_pid, 150, 1e-5, 0,
			ZGX45RGG_400RPM_Constant.U_max);
 800913e:	4ba4      	ldr	r3, [pc, #656]	@ (80093d0 <plotter_begin+0x6a0>)
 8009140:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	PID_CONTROLLER_Init(&prismatic_velocity_pid, 150, 1e-5, 0,
 8009144:	4610      	mov	r0, r2
 8009146:	4619      	mov	r1, r3
 8009148:	f7f7 fd04 	bl	8000b54 <__aeabi_d2f>
 800914c:	4603      	mov	r3, r0
 800914e:	ee01 3a90 	vmov	s3, r3
 8009152:	ed9f 1a9d 	vldr	s2, [pc, #628]	@ 80093c8 <plotter_begin+0x698>
 8009156:	eddf 0aa3 	vldr	s1, [pc, #652]	@ 80093e4 <plotter_begin+0x6b4>
 800915a:	ed9f 0aa3 	vldr	s0, [pc, #652]	@ 80093e8 <plotter_begin+0x6b8>
 800915e:	48a3      	ldr	r0, [pc, #652]	@ (80093ec <plotter_begin+0x6bc>)
 8009160:	f7f8 f827 	bl	80011b2 <PID_CONTROLLER_Init>

	PID_CONTROLLER_Init(&revolute_position_pid, 250, 0.002, 700,
			ZGX45RGG_150RPM_Constant.qd_max);
 8009164:	4ba2      	ldr	r3, [pc, #648]	@ (80093f0 <plotter_begin+0x6c0>)
 8009166:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	PID_CONTROLLER_Init(&revolute_position_pid, 250, 0.002, 700,
 800916a:	4610      	mov	r0, r2
 800916c:	4619      	mov	r1, r3
 800916e:	f7f7 fcf1 	bl	8000b54 <__aeabi_d2f>
 8009172:	4603      	mov	r3, r0
 8009174:	ee01 3a90 	vmov	s3, r3
 8009178:	ed9f 1a9e 	vldr	s2, [pc, #632]	@ 80093f4 <plotter_begin+0x6c4>
 800917c:	eddf 0a9e 	vldr	s1, [pc, #632]	@ 80093f8 <plotter_begin+0x6c8>
 8009180:	ed9f 0a9e 	vldr	s0, [pc, #632]	@ 80093fc <plotter_begin+0x6cc>
 8009184:	489e      	ldr	r0, [pc, #632]	@ (8009400 <plotter_begin+0x6d0>)
 8009186:	f7f8 f814 	bl	80011b2 <PID_CONTROLLER_Init>
	PID_CONTROLLER_Init(&revolute_velocity_pid, 2500, 25, 3000,
			ZGX45RGG_150RPM_Constant.U_max);
 800918a:	4b99      	ldr	r3, [pc, #612]	@ (80093f0 <plotter_begin+0x6c0>)
 800918c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	PID_CONTROLLER_Init(&revolute_velocity_pid, 2500, 25, 3000,
 8009190:	4610      	mov	r0, r2
 8009192:	4619      	mov	r1, r3
 8009194:	f7f7 fcde 	bl	8000b54 <__aeabi_d2f>
 8009198:	4603      	mov	r3, r0
 800919a:	ee01 3a90 	vmov	s3, r3
 800919e:	ed9f 1a99 	vldr	s2, [pc, #612]	@ 8009404 <plotter_begin+0x6d4>
 80091a2:	eef3 0a09 	vmov.f32	s1, #57	@ 0x41c80000  25.0
 80091a6:	ed9f 0a98 	vldr	s0, [pc, #608]	@ 8009408 <plotter_begin+0x6d8>
 80091aa:	4898      	ldr	r0, [pc, #608]	@ (800940c <plotter_begin+0x6dc>)
 80091ac:	f7f8 f801 	bl	80011b2 <PID_CONTROLLER_Init>

	PID_CONTROLLER_Init(&revolute_joy_pid, 7500, 100, 2000,
			ZGX45RGG_150RPM_Constant.U_max);
 80091b0:	4b8f      	ldr	r3, [pc, #572]	@ (80093f0 <plotter_begin+0x6c0>)
 80091b2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	PID_CONTROLLER_Init(&revolute_joy_pid, 7500, 100, 2000,
 80091b6:	4610      	mov	r0, r2
 80091b8:	4619      	mov	r1, r3
 80091ba:	f7f7 fccb 	bl	8000b54 <__aeabi_d2f>
 80091be:	4603      	mov	r3, r0
 80091c0:	ee01 3a90 	vmov	s3, r3
 80091c4:	ed9f 1a81 	vldr	s2, [pc, #516]	@ 80093cc <plotter_begin+0x69c>
 80091c8:	eddf 0a91 	vldr	s1, [pc, #580]	@ 8009410 <plotter_begin+0x6e0>
 80091cc:	ed9f 0a91 	vldr	s0, [pc, #580]	@ 8009414 <plotter_begin+0x6e4>
 80091d0:	4891      	ldr	r0, [pc, #580]	@ (8009418 <plotter_begin+0x6e8>)
 80091d2:	f7f7 ffee 	bl	80011b2 <PID_CONTROLLER_Init>



	REVOLUTE_MOTOR_FFD_Init(&revolute_motor_ffd, &ZGX45RGG_150RPM_Constant);
 80091d6:	4986      	ldr	r1, [pc, #536]	@ (80093f0 <plotter_begin+0x6c0>)
 80091d8:	4890      	ldr	r0, [pc, #576]	@ (800941c <plotter_begin+0x6ec>)
 80091da:	f7f8 f9cf 	bl	800157c <REVOLUTE_MOTOR_FFD_Init>
	PRISMATIC_MOTOR_FFD_Init(&prismatic_motor_ffd, &ZGX45RGG_400RPM_Constant);
 80091de:	497c      	ldr	r1, [pc, #496]	@ (80093d0 <plotter_begin+0x6a0>)
 80091e0:	488f      	ldr	r0, [pc, #572]	@ (8009420 <plotter_begin+0x6f0>)
 80091e2:	f7f8 fb49 	bl	8001878 <PRISMATIC_MOTOR_FFD_Init>

	REVOLUTE_MOTOR_DFD_Init(&revolute_motor_dfd, &ZGX45RGG_150RPM_Constant,
 80091e6:	4a8f      	ldr	r2, [pc, #572]	@ (8009424 <plotter_begin+0x6f4>)
 80091e8:	4981      	ldr	r1, [pc, #516]	@ (80093f0 <plotter_begin+0x6c0>)
 80091ea:	488f      	ldr	r0, [pc, #572]	@ (8009428 <plotter_begin+0x6f8>)
 80091ec:	f7f8 fa55 	bl	800169a <REVOLUTE_MOTOR_DFD_Init>
			&Disturbance_Constant);
	PRISMATIC_MOTOR_DFD_Init(&prismatic_motor_dfd, &ZGX45RGG_400RPM_Constant,
 80091f0:	4a8c      	ldr	r2, [pc, #560]	@ (8009424 <plotter_begin+0x6f4>)
 80091f2:	4977      	ldr	r1, [pc, #476]	@ (80093d0 <plotter_begin+0x6a0>)
 80091f4:	488d      	ldr	r0, [pc, #564]	@ (800942c <plotter_begin+0x6fc>)
 80091f6:	f7f8 fbe3 	bl	80019c0 <PRISMATIC_MOTOR_DFD_Init>
			&Disturbance_Constant);

	ADC_DMA_Init(&joystick, &hadc1, joystick_buffer, ADC_BUFFER_SIZE,
 80091fa:	2302      	movs	r3, #2
 80091fc:	9300      	str	r3, [sp, #0]
 80091fe:	eddf 0a8c 	vldr	s1, [pc, #560]	@ 8009430 <plotter_begin+0x700>
 8009202:	ed9f 0a8c 	vldr	s0, [pc, #560]	@ 8009434 <plotter_begin+0x704>
 8009206:	2364      	movs	r3, #100	@ 0x64
 8009208:	4a8b      	ldr	r2, [pc, #556]	@ (8009438 <plotter_begin+0x708>)
 800920a:	498c      	ldr	r1, [pc, #560]	@ (800943c <plotter_begin+0x70c>)
 800920c:	488c      	ldr	r0, [pc, #560]	@ (8009440 <plotter_begin+0x710>)
 800920e:	f7f7 fe87 	bl	8000f20 <ADC_DMA_Init>
	ADC_CHANNELS, ADC_VREF, ADC_RESOLUTION);
	ADC_DMA_SetCenterPoint(&joystick, ADC_CENTERPOINT, ADC_ERROR);
 8009212:	2105      	movs	r1, #5
 8009214:	ed9f 0a8b 	vldr	s0, [pc, #556]	@ 8009444 <plotter_begin+0x714>
 8009218:	4889      	ldr	r0, [pc, #548]	@ (8009440 <plotter_begin+0x710>)
 800921a:	f7f7 ff33 	bl	8001084 <ADC_DMA_SetCenterPoint>
	ADC_DMA_Start(&joystick);
 800921e:	4888      	ldr	r0, [pc, #544]	@ (8009440 <plotter_begin+0x710>)
 8009220:	f7f7 fed6 	bl	8000fd0 <ADC_DMA_Start>

	FIR_init(&prismatic_lp_accel, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 8009224:	eddf 0a88 	vldr	s1, [pc, #544]	@ 8009448 <plotter_begin+0x718>
 8009228:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 800922c:	211f      	movs	r1, #31
 800922e:	4887      	ldr	r0, [pc, #540]	@ (800944c <plotter_begin+0x71c>)
 8009230:	f7f8 fca2 	bl	8001b78 <FIR_init>
	FIR_init(&revolute_lp_accel, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 8009234:	eddf 0a84 	vldr	s1, [pc, #528]	@ 8009448 <plotter_begin+0x718>
 8009238:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 800923c:	211f      	movs	r1, #31
 800923e:	4884      	ldr	r0, [pc, #528]	@ (8009450 <plotter_begin+0x720>)
 8009240:	f7f8 fc9a 	bl	8001b78 <FIR_init>

	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 8009244:	4b62      	ldr	r3, [pc, #392]	@ (80093d0 <plotter_begin+0x6a0>)
 8009246:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800924a:	4610      	mov	r0, r2
 800924c:	4619      	mov	r1, r3
 800924e:	f7f7 fc81 	bl	8000b54 <__aeabi_d2f>
 8009252:	4604      	mov	r4, r0
			ZGX45RGG_400RPM_Constant.B, ZGX45RGG_400RPM_Constant.Kt,
 8009254:	4b5e      	ldr	r3, [pc, #376]	@ (80093d0 <plotter_begin+0x6a0>)
 8009256:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 800925a:	4610      	mov	r0, r2
 800925c:	4619      	mov	r1, r3
 800925e:	f7f7 fc79 	bl	8000b54 <__aeabi_d2f>
 8009262:	4605      	mov	r5, r0
			ZGX45RGG_400RPM_Constant.B, ZGX45RGG_400RPM_Constant.Kt,
 8009264:	4b5a      	ldr	r3, [pc, #360]	@ (80093d0 <plotter_begin+0x6a0>)
 8009266:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 800926a:	4610      	mov	r0, r2
 800926c:	4619      	mov	r1, r3
 800926e:	f7f7 fc71 	bl	8000b54 <__aeabi_d2f>
 8009272:	4606      	mov	r6, r0
			ZGX45RGG_400RPM_Constant.Ke, ZGX45RGG_400RPM_Constant.R,
 8009274:	4b56      	ldr	r3, [pc, #344]	@ (80093d0 <plotter_begin+0x6a0>)
 8009276:	e9d3 2300 	ldrd	r2, r3, [r3]
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 800927a:	4610      	mov	r0, r2
 800927c:	4619      	mov	r1, r3
 800927e:	f7f7 fc69 	bl	8000b54 <__aeabi_d2f>
 8009282:	4680      	mov	r8, r0
			ZGX45RGG_400RPM_Constant.Ke, ZGX45RGG_400RPM_Constant.R,
 8009284:	4b52      	ldr	r3, [pc, #328]	@ (80093d0 <plotter_begin+0x6a0>)
 8009286:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 800928a:	4610      	mov	r0, r2
 800928c:	4619      	mov	r1, r3
 800928e:	f7f7 fc61 	bl	8000b54 <__aeabi_d2f>
 8009292:	4681      	mov	r9, r0
			ZGX45RGG_400RPM_Constant.L, 1.0, 1.0);
 8009294:	4b4e      	ldr	r3, [pc, #312]	@ (80093d0 <plotter_begin+0x6a0>)
 8009296:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 800929a:	4610      	mov	r0, r2
 800929c:	4619      	mov	r1, r3
 800929e:	f7f7 fc59 	bl	8000b54 <__aeabi_d2f>
 80092a2:	4603      	mov	r3, r0
 80092a4:	eeb7 4a00 	vmov.f32	s8, #112	@ 0x3f800000  1.0
 80092a8:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 80092ac:	ee03 3a10 	vmov	s6, r3
 80092b0:	ee02 9a90 	vmov	s5, r9
 80092b4:	ee02 8a10 	vmov	s4, r8
 80092b8:	ee01 6a90 	vmov	s3, r6
 80092bc:	ee01 5a10 	vmov	s2, r5
 80092c0:	ee00 4a90 	vmov	s1, r4
 80092c4:	ed9f 0a63 	vldr	s0, [pc, #396]	@ 8009454 <plotter_begin+0x724>
 80092c8:	4863      	ldr	r0, [pc, #396]	@ (8009458 <plotter_begin+0x728>)
 80092ca:	f7f9 f94d 	bl	8002568 <MotorKalman_Init>

	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 80092ce:	4b48      	ldr	r3, [pc, #288]	@ (80093f0 <plotter_begin+0x6c0>)
 80092d0:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80092d4:	4610      	mov	r0, r2
 80092d6:	4619      	mov	r1, r3
 80092d8:	f7f7 fc3c 	bl	8000b54 <__aeabi_d2f>
 80092dc:	4604      	mov	r4, r0
			ZGX45RGG_150RPM_Constant.L, ZGX45RGG_150RPM_Constant.J,
 80092de:	4b44      	ldr	r3, [pc, #272]	@ (80093f0 <plotter_begin+0x6c0>)
 80092e0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 80092e4:	4610      	mov	r0, r2
 80092e6:	4619      	mov	r1, r3
 80092e8:	f7f7 fc34 	bl	8000b54 <__aeabi_d2f>
 80092ec:	4605      	mov	r5, r0
			ZGX45RGG_150RPM_Constant.L, ZGX45RGG_150RPM_Constant.J,
 80092ee:	4b40      	ldr	r3, [pc, #256]	@ (80093f0 <plotter_begin+0x6c0>)
 80092f0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 80092f4:	4610      	mov	r0, r2
 80092f6:	4619      	mov	r1, r3
 80092f8:	f7f7 fc2c 	bl	8000b54 <__aeabi_d2f>
 80092fc:	4606      	mov	r6, r0
			ZGX45RGG_150RPM_Constant.B * 2.2, ZGX45RGG_150RPM_Constant.Ke,
 80092fe:	4b3c      	ldr	r3, [pc, #240]	@ (80093f0 <plotter_begin+0x6c0>)
 8009300:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8009304:	a326      	add	r3, pc, #152	@ (adr r3, 80093a0 <plotter_begin+0x670>)
 8009306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800930a:	f7f7 f941 	bl	8000590 <__aeabi_dmul>
 800930e:	4602      	mov	r2, r0
 8009310:	460b      	mov	r3, r1
	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 8009312:	4610      	mov	r0, r2
 8009314:	4619      	mov	r1, r3
 8009316:	f7f7 fc1d 	bl	8000b54 <__aeabi_d2f>
 800931a:	4680      	mov	r8, r0
			ZGX45RGG_150RPM_Constant.B * 2.2, ZGX45RGG_150RPM_Constant.Ke,
 800931c:	4b34      	ldr	r3, [pc, #208]	@ (80093f0 <plotter_begin+0x6c0>)
 800931e:	e9d3 2300 	ldrd	r2, r3, [r3]
	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 8009322:	4610      	mov	r0, r2
 8009324:	4619      	mov	r1, r3
 8009326:	f7f7 fc15 	bl	8000b54 <__aeabi_d2f>
 800932a:	4681      	mov	r9, r0
			ZGX45RGG_150RPM_Constant.Kt, 0.001, &revolute_A, &revolute_B);
 800932c:	4b30      	ldr	r3, [pc, #192]	@ (80093f0 <plotter_begin+0x6c0>)
 800932e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 8009332:	4610      	mov	r0, r2
 8009334:	4619      	mov	r1, r3
 8009336:	f7f7 fc0d 	bl	8000b54 <__aeabi_d2f>
 800933a:	4603      	mov	r3, r0
 800933c:	4947      	ldr	r1, [pc, #284]	@ (800945c <plotter_begin+0x72c>)
 800933e:	4848      	ldr	r0, [pc, #288]	@ (8009460 <plotter_begin+0x730>)
 8009340:	ed9f 3a44 	vldr	s6, [pc, #272]	@ 8009454 <plotter_begin+0x724>
 8009344:	ee02 3a90 	vmov	s5, r3
 8009348:	ee02 9a10 	vmov	s4, r9
 800934c:	ee01 8a90 	vmov	s3, r8
 8009350:	ee01 6a10 	vmov	s2, r6
 8009354:	ee00 5a90 	vmov	s1, r5
 8009358:	ee00 4a10 	vmov	s0, r4
 800935c:	f7fa fab0 	bl	80038c0 <GenerateMotorMatrices>

	Kalman_Start(&revolute_kalman, revolute_A, revolute_B, REVOLUTE_Q,
 8009360:	eddf 0a40 	vldr	s1, [pc, #256]	@ 8009464 <plotter_begin+0x734>
 8009364:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8009368:	4a3c      	ldr	r2, [pc, #240]	@ (800945c <plotter_begin+0x72c>)
 800936a:	493d      	ldr	r1, [pc, #244]	@ (8009460 <plotter_begin+0x730>)
 800936c:	483e      	ldr	r0, [pc, #248]	@ (8009468 <plotter_begin+0x738>)
 800936e:	f7fc f815 	bl	800539c <Kalman_Start>
	REVOLUTE_R);

	Modbus_init(&ModBus, MODBUS_USART, MODBUS_DATA_SENDING_PERIOD_TIM,
 8009372:	23c8      	movs	r3, #200	@ 0xc8
 8009374:	9301      	str	r3, [sp, #4]
 8009376:	2315      	movs	r3, #21
 8009378:	9300      	str	r3, [sp, #0]
 800937a:	4b3c      	ldr	r3, [pc, #240]	@ (800946c <plotter_begin+0x73c>)
 800937c:	4a3c      	ldr	r2, [pc, #240]	@ (8009470 <plotter_begin+0x740>)
 800937e:	493d      	ldr	r1, [pc, #244]	@ (8009474 <plotter_begin+0x744>)
 8009380:	483d      	ldr	r0, [pc, #244]	@ (8009478 <plotter_begin+0x748>)
 8009382:	f7f8 fde9 	bl	8001f58 <Modbus_init>
			registerFrame, MODBUS_SLAVE_ADDRESS, MODBUS_REGISTER_FRAME_SIZE);

	HAL_TIM_Base_Start_IT(CONTROL_TIM);
 8009386:	483d      	ldr	r0, [pc, #244]	@ (800947c <plotter_begin+0x74c>)
 8009388:	f004 fe00 	bl	800df8c <HAL_TIM_Base_Start_IT>

	plotter_reset();
 800938c:	f000 f878 	bl	8009480 <plotter_reset>
}
 8009390:	bf00      	nop
 8009392:	3704      	adds	r7, #4
 8009394:	46bd      	mov	sp, r7
 8009396:	ecbd 8b02 	vpop	{d8}
 800939a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800939e:	bf00      	nop
 80093a0:	9999999a 	.word	0x9999999a
 80093a4:	40019999 	.word	0x40019999
 80093a8:	20001e38 	.word	0x20001e38
 80093ac:	2000073c 	.word	0x2000073c
 80093b0:	20001fd0 	.word	0x20001fd0
 80093b4:	20000648 	.word	0x20000648
 80093b8:	48000800 	.word	0x48000800
 80093bc:	20000694 	.word	0x20000694
 80093c0:	20001bd4 	.word	0x20001bd4
 80093c4:	20000878 	.word	0x20000878
 80093c8:	00000000 	.word	0x00000000
 80093cc:	44fa0000 	.word	0x44fa0000
 80093d0:	20000080 	.word	0x20000080
 80093d4:	42a00000 	.word	0x42a00000
 80093d8:	2edbe6ff 	.word	0x2edbe6ff
 80093dc:	42960000 	.word	0x42960000
 80093e0:	20000798 	.word	0x20000798
 80093e4:	3727c5ac 	.word	0x3727c5ac
 80093e8:	43160000 	.word	0x43160000
 80093ec:	200007c0 	.word	0x200007c0
 80093f0:	20000000 	.word	0x20000000
 80093f4:	442f0000 	.word	0x442f0000
 80093f8:	3b03126f 	.word	0x3b03126f
 80093fc:	437a0000 	.word	0x437a0000
 8009400:	200007e8 	.word	0x200007e8
 8009404:	453b8000 	.word	0x453b8000
 8009408:	451c4000 	.word	0x451c4000
 800940c:	20000810 	.word	0x20000810
 8009410:	42c80000 	.word	0x42c80000
 8009414:	45ea6000 	.word	0x45ea6000
 8009418:	20000838 	.word	0x20000838
 800941c:	2000086c 	.word	0x2000086c
 8009420:	20000860 	.word	0x20000860
 8009424:	20000100 	.word	0x20000100
 8009428:	20000870 	.word	0x20000870
 800942c:	20000864 	.word	0x20000864
 8009430:	457ff000 	.word	0x457ff000
 8009434:	40533333 	.word	0x40533333
 8009438:	20000d44 	.word	0x20000d44
 800943c:	200003b4 	.word	0x200003b4
 8009440:	20000890 	.word	0x20000890
 8009444:	45000000 	.word	0x45000000
 8009448:	447a0000 	.word	0x447a0000
 800944c:	20000d2c 	.word	0x20000d2c
 8009450:	20000d38 	.word	0x20000d38
 8009454:	3a83126f 	.word	0x3a83126f
 8009458:	20001474 	.word	0x20001474
 800945c:	20001ba0 	.word	0x20001ba0
 8009460:	20001b60 	.word	0x20001b60
 8009464:	3d4ccccd 	.word	0x3d4ccccd
 8009468:	200017e0 	.word	0x200017e0
 800946c:	200012e4 	.word	0x200012e4
 8009470:	2000209c 	.word	0x2000209c
 8009474:	20002234 	.word	0x20002234
 8009478:	20000e0c 	.word	0x20000e0c
 800947c:	20001ca0 	.word	0x20001ca0

08009480 <plotter_reset>:

void plotter_reset() {
 8009480:	b580      	push	{r7, lr}
 8009482:	af00      	add	r7, sp, #0
	QEI_reset(&prismatic_encoder);
 8009484:	4819      	ldr	r0, [pc, #100]	@ (80094ec <plotter_reset+0x6c>)
 8009486:	f7fa ff33 	bl	80042f0 <QEI_reset>
	QEI_reset(&prismatic_encoder);
 800948a:	4818      	ldr	r0, [pc, #96]	@ (80094ec <plotter_reset+0x6c>)
 800948c:	f7fa ff30 	bl	80042f0 <QEI_reset>

	prismatic_encoder.diff_counts = 0;
 8009490:	4b16      	ldr	r3, [pc, #88]	@ (80094ec <plotter_reset+0x6c>)
 8009492:	2200      	movs	r2, #0
 8009494:	625a      	str	r2, [r3, #36]	@ 0x24
	prismatic_encoder.rpm = 0;
 8009496:	4b15      	ldr	r3, [pc, #84]	@ (80094ec <plotter_reset+0x6c>)
 8009498:	f04f 0200 	mov.w	r2, #0
 800949c:	631a      	str	r2, [r3, #48]	@ 0x30
	prismatic_encoder.pulses = 0;
 800949e:	4b13      	ldr	r3, [pc, #76]	@ (80094ec <plotter_reset+0x6c>)
 80094a0:	2200      	movs	r2, #0
 80094a2:	639a      	str	r2, [r3, #56]	@ 0x38
	prismatic_encoder.revs = 0;
 80094a4:	4b11      	ldr	r3, [pc, #68]	@ (80094ec <plotter_reset+0x6c>)
 80094a6:	f04f 0200 	mov.w	r2, #0
 80094aa:	63da      	str	r2, [r3, #60]	@ 0x3c
	prismatic_encoder.rads = 0;
 80094ac:	4b0f      	ldr	r3, [pc, #60]	@ (80094ec <plotter_reset+0x6c>)
 80094ae:	f04f 0200 	mov.w	r2, #0
 80094b2:	641a      	str	r2, [r3, #64]	@ 0x40
	prismatic_encoder.mm = 0;
 80094b4:	4b0d      	ldr	r3, [pc, #52]	@ (80094ec <plotter_reset+0x6c>)
 80094b6:	f04f 0200 	mov.w	r2, #0
 80094ba:	649a      	str	r2, [r3, #72]	@ 0x48

	revolute_encoder.diff_counts = 0;
 80094bc:	4b0c      	ldr	r3, [pc, #48]	@ (80094f0 <plotter_reset+0x70>)
 80094be:	2200      	movs	r2, #0
 80094c0:	625a      	str	r2, [r3, #36]	@ 0x24
	revolute_encoder.rpm = 0;
 80094c2:	4b0b      	ldr	r3, [pc, #44]	@ (80094f0 <plotter_reset+0x70>)
 80094c4:	f04f 0200 	mov.w	r2, #0
 80094c8:	631a      	str	r2, [r3, #48]	@ 0x30
	revolute_encoder.pulses = 0;
 80094ca:	4b09      	ldr	r3, [pc, #36]	@ (80094f0 <plotter_reset+0x70>)
 80094cc:	2200      	movs	r2, #0
 80094ce:	639a      	str	r2, [r3, #56]	@ 0x38
	revolute_encoder.revs = 0;
 80094d0:	4b07      	ldr	r3, [pc, #28]	@ (80094f0 <plotter_reset+0x70>)
 80094d2:	f04f 0200 	mov.w	r2, #0
 80094d6:	63da      	str	r2, [r3, #60]	@ 0x3c
	revolute_encoder.rads = 0;
 80094d8:	4b05      	ldr	r3, [pc, #20]	@ (80094f0 <plotter_reset+0x70>)
 80094da:	f04f 0200 	mov.w	r2, #0
 80094de:	641a      	str	r2, [r3, #64]	@ 0x40
	revolute_encoder.mm = 0;
 80094e0:	4b03      	ldr	r3, [pc, #12]	@ (80094f0 <plotter_reset+0x70>)
 80094e2:	f04f 0200 	mov.w	r2, #0
 80094e6:	649a      	str	r2, [r3, #72]	@ 0x48
}
 80094e8:	bf00      	nop
 80094ea:	bd80      	pop	{r7, pc}
 80094ec:	200006e0 	.word	0x200006e0
 80094f0:	2000073c 	.word	0x2000073c

080094f4 <plotter_update_sensors>:

void plotter_update_sensors() {
 80094f4:	b580      	push	{r7, lr}
 80094f6:	af00      	add	r7, sp, #0
	joystick_x = ADC_DMA_GetJoystickValue(&joystick, JOYSTICK_X_CHANNEL, -50,
 80094f8:	eddf 0a41 	vldr	s1, [pc, #260]	@ 8009600 <plotter_update_sensors+0x10c>
 80094fc:	ed9f 0a41 	vldr	s0, [pc, #260]	@ 8009604 <plotter_update_sensors+0x110>
 8009500:	2106      	movs	r1, #6
 8009502:	4841      	ldr	r0, [pc, #260]	@ (8009608 <plotter_update_sensors+0x114>)
 8009504:	f7f7 fde8 	bl	80010d8 <ADC_DMA_GetJoystickValue>
 8009508:	eef0 7a40 	vmov.f32	s15, s0
 800950c:	4b3f      	ldr	r3, [pc, #252]	@ (800960c <plotter_update_sensors+0x118>)
 800950e:	edc3 7a00 	vstr	s15, [r3]
			50);
	joystick_y = ADC_DMA_GetJoystickValue(&joystick, JOYSTICK_Y_CHANNEL, -50,
 8009512:	eddf 0a3b 	vldr	s1, [pc, #236]	@ 8009600 <plotter_update_sensors+0x10c>
 8009516:	ed9f 0a3b 	vldr	s0, [pc, #236]	@ 8009604 <plotter_update_sensors+0x110>
 800951a:	2107      	movs	r1, #7
 800951c:	483a      	ldr	r0, [pc, #232]	@ (8009608 <plotter_update_sensors+0x114>)
 800951e:	f7f7 fddb 	bl	80010d8 <ADC_DMA_GetJoystickValue>
 8009522:	eef0 7a40 	vmov.f32	s15, s0
 8009526:	4b3a      	ldr	r3, [pc, #232]	@ (8009610 <plotter_update_sensors+0x11c>)
 8009528:	edc3 7a00 	vstr	s15, [r3]
			50);

	b1 = !HAL_GPIO_ReadPin(J1_GPIO_Port, J1_Pin);
 800952c:	2180      	movs	r1, #128	@ 0x80
 800952e:	4839      	ldr	r0, [pc, #228]	@ (8009614 <plotter_update_sensors+0x120>)
 8009530:	f003 fbc6 	bl	800ccc0 <HAL_GPIO_ReadPin>
 8009534:	4603      	mov	r3, r0
 8009536:	2b00      	cmp	r3, #0
 8009538:	bf0c      	ite	eq
 800953a:	2301      	moveq	r3, #1
 800953c:	2300      	movne	r3, #0
 800953e:	b2db      	uxtb	r3, r3
 8009540:	461a      	mov	r2, r3
 8009542:	4b35      	ldr	r3, [pc, #212]	@ (8009618 <plotter_update_sensors+0x124>)
 8009544:	601a      	str	r2, [r3, #0]
	b2 = !HAL_GPIO_ReadPin(J2_GPIO_Port, J2_Pin);
 8009546:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800954a:	4834      	ldr	r0, [pc, #208]	@ (800961c <plotter_update_sensors+0x128>)
 800954c:	f003 fbb8 	bl	800ccc0 <HAL_GPIO_ReadPin>
 8009550:	4603      	mov	r3, r0
 8009552:	2b00      	cmp	r3, #0
 8009554:	bf0c      	ite	eq
 8009556:	2301      	moveq	r3, #1
 8009558:	2300      	movne	r3, #0
 800955a:	b2db      	uxtb	r3, r3
 800955c:	461a      	mov	r2, r3
 800955e:	4b30      	ldr	r3, [pc, #192]	@ (8009620 <plotter_update_sensors+0x12c>)
 8009560:	601a      	str	r2, [r3, #0]
	b3 = !HAL_GPIO_ReadPin(J3_GPIO_Port, J3_Pin);
 8009562:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8009566:	482d      	ldr	r0, [pc, #180]	@ (800961c <plotter_update_sensors+0x128>)
 8009568:	f003 fbaa 	bl	800ccc0 <HAL_GPIO_ReadPin>
 800956c:	4603      	mov	r3, r0
 800956e:	2b00      	cmp	r3, #0
 8009570:	bf0c      	ite	eq
 8009572:	2301      	moveq	r3, #1
 8009574:	2300      	movne	r3, #0
 8009576:	b2db      	uxtb	r3, r3
 8009578:	461a      	mov	r2, r3
 800957a:	4b2a      	ldr	r3, [pc, #168]	@ (8009624 <plotter_update_sensors+0x130>)
 800957c:	601a      	str	r2, [r3, #0]
	b4 = !HAL_GPIO_ReadPin(J4_GPIO_Port, J4_Pin);
 800957e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8009582:	4826      	ldr	r0, [pc, #152]	@ (800961c <plotter_update_sensors+0x128>)
 8009584:	f003 fb9c 	bl	800ccc0 <HAL_GPIO_ReadPin>
 8009588:	4603      	mov	r3, r0
 800958a:	2b00      	cmp	r3, #0
 800958c:	bf0c      	ite	eq
 800958e:	2301      	moveq	r3, #1
 8009590:	2300      	movne	r3, #0
 8009592:	b2db      	uxtb	r3, r3
 8009594:	461a      	mov	r2, r3
 8009596:	4b24      	ldr	r3, [pc, #144]	@ (8009628 <plotter_update_sensors+0x134>)
 8009598:	601a      	str	r2, [r3, #0]

	up_lim = HAL_GPIO_ReadPin(UPPER_LIM_GPIO_Port, UPPER_LIM_Pin);
 800959a:	2104      	movs	r1, #4
 800959c:	481d      	ldr	r0, [pc, #116]	@ (8009614 <plotter_update_sensors+0x120>)
 800959e:	f003 fb8f 	bl	800ccc0 <HAL_GPIO_ReadPin>
 80095a2:	4603      	mov	r3, r0
 80095a4:	461a      	mov	r2, r3
 80095a6:	4b21      	ldr	r3, [pc, #132]	@ (800962c <plotter_update_sensors+0x138>)
 80095a8:	601a      	str	r2, [r3, #0]
	low_lim = HAL_GPIO_ReadPin(LOWER_LIM_GPIO_Port, LOWER_LIM_Pin);
 80095aa:	2102      	movs	r1, #2
 80095ac:	4819      	ldr	r0, [pc, #100]	@ (8009614 <plotter_update_sensors+0x120>)
 80095ae:	f003 fb87 	bl	800ccc0 <HAL_GPIO_ReadPin>
 80095b2:	4603      	mov	r3, r0
 80095b4:	461a      	mov	r2, r3
 80095b6:	4b1e      	ldr	r3, [pc, #120]	@ (8009630 <plotter_update_sensors+0x13c>)
 80095b8:	601a      	str	r2, [r3, #0]

	extern bool homing_active;
	if (!homing_active) {
 80095ba:	4b1e      	ldr	r3, [pc, #120]	@ (8009634 <plotter_update_sensors+0x140>)
 80095bc:	781b      	ldrb	r3, [r3, #0]
 80095be:	f083 0301 	eor.w	r3, r3, #1
 80095c2:	b2db      	uxtb	r3, r3
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d018      	beq.n	80095fa <plotter_update_sensors+0x106>
		extern volatile bool up_photo, low_photo;
		up_photo = HAL_GPIO_ReadPin(UPPER_PHOTO_GPIO_Port, UPPER_PHOTO_Pin);
 80095c8:	2101      	movs	r1, #1
 80095ca:	4812      	ldr	r0, [pc, #72]	@ (8009614 <plotter_update_sensors+0x120>)
 80095cc:	f003 fb78 	bl	800ccc0 <HAL_GPIO_ReadPin>
 80095d0:	4603      	mov	r3, r0
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	bf14      	ite	ne
 80095d6:	2301      	movne	r3, #1
 80095d8:	2300      	moveq	r3, #0
 80095da:	b2da      	uxtb	r2, r3
 80095dc:	4b16      	ldr	r3, [pc, #88]	@ (8009638 <plotter_update_sensors+0x144>)
 80095de:	701a      	strb	r2, [r3, #0]
		low_photo = HAL_GPIO_ReadPin(LOWER_PHOTO_GPIO_Port, LOWER_PHOTO_Pin);
 80095e0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80095e4:	480b      	ldr	r0, [pc, #44]	@ (8009614 <plotter_update_sensors+0x120>)
 80095e6:	f003 fb6b 	bl	800ccc0 <HAL_GPIO_ReadPin>
 80095ea:	4603      	mov	r3, r0
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	bf14      	ite	ne
 80095f0:	2301      	movne	r3, #1
 80095f2:	2300      	moveq	r3, #0
 80095f4:	b2da      	uxtb	r2, r3
 80095f6:	4b11      	ldr	r3, [pc, #68]	@ (800963c <plotter_update_sensors+0x148>)
 80095f8:	701a      	strb	r2, [r3, #0]
	}
}
 80095fa:	bf00      	nop
 80095fc:	bd80      	pop	{r7, pc}
 80095fe:	bf00      	nop
 8009600:	42480000 	.word	0x42480000
 8009604:	c2480000 	.word	0xc2480000
 8009608:	20000890 	.word	0x20000890
 800960c:	20001bb0 	.word	0x20001bb0
 8009610:	20001bb4 	.word	0x20001bb4
 8009614:	48000400 	.word	0x48000400
 8009618:	20001bc0 	.word	0x20001bc0
 800961c:	48000800 	.word	0x48000800
 8009620:	20001bc4 	.word	0x20001bc4
 8009624:	20001bc8 	.word	0x20001bc8
 8009628:	20001bcc 	.word	0x20001bcc
 800962c:	20001bb8 	.word	0x20001bb8
 8009630:	20001bbc 	.word	0x20001bbc
 8009634:	20000567 	.word	0x20000567
 8009638:	20000564 	.word	0x20000564
 800963c:	20000565 	.word	0x20000565

08009640 <plotter_pen_up>:

void plotter_pen_up() {
 8009640:	b580      	push	{r7, lr}
 8009642:	af00      	add	r7, sp, #0
	PWM_write_duty(&servo, 50, 7);
 8009644:	eef1 0a0c 	vmov.f32	s1, #28	@ 0x40e00000  7.0
 8009648:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 8009658 <plotter_pen_up+0x18>
 800964c:	4803      	ldr	r0, [pc, #12]	@ (800965c <plotter_pen_up+0x1c>)
 800964e:	f7fa f9c1 	bl	80039d4 <PWM_write_duty>
}
 8009652:	bf00      	nop
 8009654:	bd80      	pop	{r7, pc}
 8009656:	bf00      	nop
 8009658:	42480000 	.word	0x42480000
 800965c:	20000878 	.word	0x20000878

08009660 <plotter_pen_down>:

void plotter_pen_down() {
 8009660:	b580      	push	{r7, lr}
 8009662:	af00      	add	r7, sp, #0
	PWM_write_duty(&servo, 50, 10);
 8009664:	eef2 0a04 	vmov.f32	s1, #36	@ 0x41200000  10.0
 8009668:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 8009678 <plotter_pen_down+0x18>
 800966c:	4803      	ldr	r0, [pc, #12]	@ (800967c <plotter_pen_down+0x1c>)
 800966e:	f7fa f9b1 	bl	80039d4 <PWM_write_duty>
}
 8009672:	bf00      	nop
 8009674:	bd80      	pop	{r7, pc}
 8009676:	bf00      	nop
 8009678:	42480000 	.word	0x42480000
 800967c:	20000878 	.word	0x20000878

08009680 <SIGNAL_init>:
    if (value > max_setpoint) return max_setpoint;
    return value;
}

// Initialization function
void SIGNAL_init(SignalGenerator* sg, SignalType type) {
 8009680:	b480      	push	{r7}
 8009682:	b083      	sub	sp, #12
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
 8009688:	460b      	mov	r3, r1
 800968a:	70fb      	strb	r3, [r7, #3]
    // Reset all parameters
    sg->type = type;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	78fa      	ldrb	r2, [r7, #3]
 8009690:	701a      	strb	r2, [r3, #0]
    sg->amplitude = 1.0f;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8009698:	605a      	str	r2, [r3, #4]
    sg->frequency = 1.0f;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80096a0:	609a      	str	r2, [r3, #8]
    sg->phase = 0.0f;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	f04f 0200 	mov.w	r2, #0
 80096a8:	60da      	str	r2, [r3, #12]
    sg->offset = 0.0f;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	f04f 0200 	mov.w	r2, #0
 80096b0:	611a      	str	r2, [r3, #16]
    sg->current_phase = 0.0f;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	f04f 0200 	mov.w	r2, #0
 80096b8:	635a      	str	r2, [r3, #52]	@ 0x34
    sg->time_elapsed = 0.0f;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	f04f 0200 	mov.w	r2, #0
 80096c0:	639a      	str	r2, [r3, #56]	@ 0x38
    sg->min_setpoint = -1.0f;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	4a1b      	ldr	r2, [pc, #108]	@ (8009734 <SIGNAL_init+0xb4>)
 80096c6:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = 1.0f;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80096ce:	641a      	str	r2, [r3, #64]	@ 0x40

    // Type-specific initializations
    switch (type) {
 80096d0:	78fb      	ldrb	r3, [r7, #3]
 80096d2:	2b03      	cmp	r3, #3
 80096d4:	d828      	bhi.n	8009728 <SIGNAL_init+0xa8>
 80096d6:	a201      	add	r2, pc, #4	@ (adr r2, 80096dc <SIGNAL_init+0x5c>)
 80096d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096dc:	08009727 	.word	0x08009727
 80096e0:	080096ed 	.word	0x080096ed
 80096e4:	0800970b 	.word	0x0800970b
 80096e8:	08009715 	.word	0x08009715
        case SIGNAL_SINE:
            break;
        case SIGNAL_CHIRP:
            sg->chirp_type = CHIRP_LINEAR;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2200      	movs	r2, #0
 80096f0:	751a      	strb	r2, [r3, #20]
            sg->f_start = 1.0f;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80096f8:	619a      	str	r2, [r3, #24]
            sg->f_end = 10.0f;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	4a0e      	ldr	r2, [pc, #56]	@ (8009738 <SIGNAL_init+0xb8>)
 80096fe:	61da      	str	r2, [r3, #28]
            sg->duration = 1.0f;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8009706:	621a      	str	r2, [r3, #32]
            break;
 8009708:	e00e      	b.n	8009728 <SIGNAL_init+0xa8>
        case SIGNAL_SQUARE:
            sg->duty_cycle = 0.5f;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8009710:	629a      	str	r2, [r3, #40]	@ 0x28
            break;
 8009712:	e009      	b.n	8009728 <SIGNAL_init+0xa8>
        case SIGNAL_RAMP:
            sg->ramp_start = 0.0f;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	f04f 0200 	mov.w	r2, #0
 800971a:	62da      	str	r2, [r3, #44]	@ 0x2c
            sg->ramp_end = 1.0f;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8009722:	631a      	str	r2, [r3, #48]	@ 0x30
            break;
 8009724:	e000      	b.n	8009728 <SIGNAL_init+0xa8>
            break;
 8009726:	bf00      	nop
    }
}
 8009728:	bf00      	nop
 800972a:	370c      	adds	r7, #12
 800972c:	46bd      	mov	sp, r7
 800972e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009732:	4770      	bx	lr
 8009734:	bf800000 	.word	0xbf800000
 8009738:	41200000 	.word	0x41200000

0800973c <SIGNAL_config_sine>:
                        float32_t amplitude,
                        float32_t frequency,
                        float32_t phase,
                        float32_t offset,
                        float32_t min_setpoint,
                        float32_t max_setpoint) {
 800973c:	b480      	push	{r7}
 800973e:	b089      	sub	sp, #36	@ 0x24
 8009740:	af00      	add	r7, sp, #0
 8009742:	61f8      	str	r0, [r7, #28]
 8009744:	ed87 0a06 	vstr	s0, [r7, #24]
 8009748:	edc7 0a05 	vstr	s1, [r7, #20]
 800974c:	ed87 1a04 	vstr	s2, [r7, #16]
 8009750:	edc7 1a03 	vstr	s3, [r7, #12]
 8009754:	ed87 2a02 	vstr	s4, [r7, #8]
 8009758:	edc7 2a01 	vstr	s5, [r7, #4]
    sg->type = SIGNAL_SINE;
 800975c:	69fb      	ldr	r3, [r7, #28]
 800975e:	2200      	movs	r2, #0
 8009760:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 8009762:	69fb      	ldr	r3, [r7, #28]
 8009764:	69ba      	ldr	r2, [r7, #24]
 8009766:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 8009768:	69fb      	ldr	r3, [r7, #28]
 800976a:	697a      	ldr	r2, [r7, #20]
 800976c:	609a      	str	r2, [r3, #8]
    sg->phase = phase;
 800976e:	69fb      	ldr	r3, [r7, #28]
 8009770:	693a      	ldr	r2, [r7, #16]
 8009772:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 8009774:	69fb      	ldr	r3, [r7, #28]
 8009776:	68fa      	ldr	r2, [r7, #12]
 8009778:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 800977a:	69fb      	ldr	r3, [r7, #28]
 800977c:	68ba      	ldr	r2, [r7, #8]
 800977e:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 8009780:	69fb      	ldr	r3, [r7, #28]
 8009782:	687a      	ldr	r2, [r7, #4]
 8009784:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8009786:	bf00      	nop
 8009788:	3724      	adds	r7, #36	@ 0x24
 800978a:	46bd      	mov	sp, r7
 800978c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009790:	4770      	bx	lr

08009792 <SIGNAL_config_square>:
                          float32_t frequency,
                          float32_t duty_cycle,
                          float32_t phase,
                          float32_t offset,
                          float32_t min_setpoint,
                          float32_t max_setpoint) {
 8009792:	b480      	push	{r7}
 8009794:	b089      	sub	sp, #36	@ 0x24
 8009796:	af00      	add	r7, sp, #0
 8009798:	61f8      	str	r0, [r7, #28]
 800979a:	ed87 0a06 	vstr	s0, [r7, #24]
 800979e:	edc7 0a05 	vstr	s1, [r7, #20]
 80097a2:	ed87 1a04 	vstr	s2, [r7, #16]
 80097a6:	edc7 1a03 	vstr	s3, [r7, #12]
 80097aa:	ed87 2a02 	vstr	s4, [r7, #8]
 80097ae:	edc7 2a01 	vstr	s5, [r7, #4]
 80097b2:	ed87 3a00 	vstr	s6, [r7]
    sg->type = SIGNAL_SQUARE;
 80097b6:	69fb      	ldr	r3, [r7, #28]
 80097b8:	2202      	movs	r2, #2
 80097ba:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 80097bc:	69fb      	ldr	r3, [r7, #28]
 80097be:	69ba      	ldr	r2, [r7, #24]
 80097c0:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 80097c2:	69fb      	ldr	r3, [r7, #28]
 80097c4:	697a      	ldr	r2, [r7, #20]
 80097c6:	609a      	str	r2, [r3, #8]
    sg->duty_cycle = duty_cycle;
 80097c8:	69fb      	ldr	r3, [r7, #28]
 80097ca:	693a      	ldr	r2, [r7, #16]
 80097cc:	629a      	str	r2, [r3, #40]	@ 0x28
    sg->phase = phase;
 80097ce:	69fb      	ldr	r3, [r7, #28]
 80097d0:	68fa      	ldr	r2, [r7, #12]
 80097d2:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 80097d4:	69fb      	ldr	r3, [r7, #28]
 80097d6:	68ba      	ldr	r2, [r7, #8]
 80097d8:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 80097da:	69fb      	ldr	r3, [r7, #28]
 80097dc:	687a      	ldr	r2, [r7, #4]
 80097de:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 80097e0:	69fb      	ldr	r3, [r7, #28]
 80097e2:	683a      	ldr	r2, [r7, #0]
 80097e4:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80097e6:	bf00      	nop
 80097e8:	3724      	adds	r7, #36	@ 0x24
 80097ea:	46bd      	mov	sp, r7
 80097ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f0:	4770      	bx	lr
	...

080097f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b082      	sub	sp, #8
 80097f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80097fa:	4b0f      	ldr	r3, [pc, #60]	@ (8009838 <HAL_MspInit+0x44>)
 80097fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80097fe:	4a0e      	ldr	r2, [pc, #56]	@ (8009838 <HAL_MspInit+0x44>)
 8009800:	f043 0301 	orr.w	r3, r3, #1
 8009804:	6613      	str	r3, [r2, #96]	@ 0x60
 8009806:	4b0c      	ldr	r3, [pc, #48]	@ (8009838 <HAL_MspInit+0x44>)
 8009808:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800980a:	f003 0301 	and.w	r3, r3, #1
 800980e:	607b      	str	r3, [r7, #4]
 8009810:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8009812:	4b09      	ldr	r3, [pc, #36]	@ (8009838 <HAL_MspInit+0x44>)
 8009814:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009816:	4a08      	ldr	r2, [pc, #32]	@ (8009838 <HAL_MspInit+0x44>)
 8009818:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800981c:	6593      	str	r3, [r2, #88]	@ 0x58
 800981e:	4b06      	ldr	r3, [pc, #24]	@ (8009838 <HAL_MspInit+0x44>)
 8009820:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009822:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009826:	603b      	str	r3, [r7, #0]
 8009828:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800982a:	f003 fb4f 	bl	800cecc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800982e:	bf00      	nop
 8009830:	3708      	adds	r7, #8
 8009832:	46bd      	mov	sp, r7
 8009834:	bd80      	pop	{r7, pc}
 8009836:	bf00      	nop
 8009838:	40021000 	.word	0x40021000

0800983c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800983c:	b480      	push	{r7}
 800983e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8009840:	bf00      	nop
 8009842:	e7fd      	b.n	8009840 <NMI_Handler+0x4>

08009844 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009844:	b480      	push	{r7}
 8009846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009848:	bf00      	nop
 800984a:	e7fd      	b.n	8009848 <HardFault_Handler+0x4>

0800984c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800984c:	b480      	push	{r7}
 800984e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009850:	bf00      	nop
 8009852:	e7fd      	b.n	8009850 <MemManage_Handler+0x4>

08009854 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009854:	b480      	push	{r7}
 8009856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8009858:	bf00      	nop
 800985a:	e7fd      	b.n	8009858 <BusFault_Handler+0x4>

0800985c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800985c:	b480      	push	{r7}
 800985e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009860:	bf00      	nop
 8009862:	e7fd      	b.n	8009860 <UsageFault_Handler+0x4>

08009864 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8009864:	b480      	push	{r7}
 8009866:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8009868:	bf00      	nop
 800986a:	46bd      	mov	sp, r7
 800986c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009870:	4770      	bx	lr

08009872 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009872:	b480      	push	{r7}
 8009874:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009876:	bf00      	nop
 8009878:	46bd      	mov	sp, r7
 800987a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987e:	4770      	bx	lr

08009880 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8009880:	b480      	push	{r7}
 8009882:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8009884:	bf00      	nop
 8009886:	46bd      	mov	sp, r7
 8009888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988c:	4770      	bx	lr

0800988e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800988e:	b580      	push	{r7, lr}
 8009890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8009892:	f000 ffbb 	bl	800a80c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009896:	bf00      	nop
 8009898:	bd80      	pop	{r7, pc}

0800989a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800989a:	b580      	push	{r7, lr}
 800989c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(UPPER_PHOTO_Pin);
 800989e:	2001      	movs	r0, #1
 80098a0:	f003 fa58 	bl	800cd54 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80098a4:	bf00      	nop
 80098a6:	bd80      	pop	{r7, pc}

080098a8 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EMER_Pin);
 80098ac:	2010      	movs	r0, #16
 80098ae:	f003 fa51 	bl	800cd54 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80098b2:	bf00      	nop
 80098b4:	bd80      	pop	{r7, pc}
	...

080098b8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80098bc:	4802      	ldr	r0, [pc, #8]	@ (80098c8 <DMA1_Channel1_IRQHandler+0x10>)
 80098be:	f002 ff2e 	bl	800c71e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80098c2:	bf00      	nop
 80098c4:	bd80      	pop	{r7, pc}
 80098c6:	bf00      	nop
 80098c8:	20000420 	.word	0x20000420

080098cc <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80098d0:	4802      	ldr	r0, [pc, #8]	@ (80098dc <DMA1_Channel2_IRQHandler+0x10>)
 80098d2:	f002 ff24 	bl	800c71e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80098d6:	bf00      	nop
 80098d8:	bd80      	pop	{r7, pc}
 80098da:	bf00      	nop
 80098dc:	200023c0 	.word	0x200023c0

080098e0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80098e4:	4802      	ldr	r0, [pc, #8]	@ (80098f0 <DMA1_Channel3_IRQHandler+0x10>)
 80098e6:	f002 ff1a 	bl	800c71e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80098ea:	bf00      	nop
 80098ec:	bd80      	pop	{r7, pc}
 80098ee:	bf00      	nop
 80098f0:	20002420 	.word	0x20002420

080098f4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 80098f8:	4802      	ldr	r0, [pc, #8]	@ (8009904 <DMA1_Channel4_IRQHandler+0x10>)
 80098fa:	f002 ff10 	bl	800c71e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80098fe:	bf00      	nop
 8009900:	bd80      	pop	{r7, pc}
 8009902:	bf00      	nop
 8009904:	20002300 	.word	0x20002300

08009908 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8009908:	b580      	push	{r7, lr}
 800990a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 800990c:	4802      	ldr	r0, [pc, #8]	@ (8009918 <DMA1_Channel5_IRQHandler+0x10>)
 800990e:	f002 ff06 	bl	800c71e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8009912:	bf00      	nop
 8009914:	bd80      	pop	{r7, pc}
 8009916:	bf00      	nop
 8009918:	20002360 	.word	0x20002360

0800991c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800991c:	b580      	push	{r7, lr}
 800991e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PROX_Pin);
 8009920:	2040      	movs	r0, #64	@ 0x40
 8009922:	f003 fa17 	bl	800cd54 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(J1_Pin);
 8009926:	2080      	movs	r0, #128	@ 0x80
 8009928:	f003 fa14 	bl	800cd54 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800992c:	bf00      	nop
 800992e:	bd80      	pop	{r7, pc}

08009930 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8009930:	b580      	push	{r7, lr}
 8009932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8009934:	4803      	ldr	r0, [pc, #12]	@ (8009944 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8009936:	f004 ff4f 	bl	800e7d8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 800993a:	4803      	ldr	r0, [pc, #12]	@ (8009948 <TIM1_UP_TIM16_IRQHandler+0x18>)
 800993c:	f004 ff4c 	bl	800e7d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8009940:	bf00      	nop
 8009942:	bd80      	pop	{r7, pc}
 8009944:	20001bd4 	.word	0x20001bd4
 8009948:	2000209c 	.word	0x2000209c

0800994c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800994c:	b580      	push	{r7, lr}
 800994e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8009950:	4802      	ldr	r0, [pc, #8]	@ (800995c <TIM2_IRQHandler+0x10>)
 8009952:	f004 ff41 	bl	800e7d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8009956:	bf00      	nop
 8009958:	bd80      	pop	{r7, pc}
 800995a:	bf00      	nop
 800995c:	20001ca0 	.word	0x20001ca0

08009960 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8009960:	b580      	push	{r7, lr}
 8009962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8009964:	4802      	ldr	r0, [pc, #8]	@ (8009970 <TIM3_IRQHandler+0x10>)
 8009966:	f004 ff37 	bl	800e7d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800996a:	bf00      	nop
 800996c:	bd80      	pop	{r7, pc}
 800996e:	bf00      	nop
 8009970:	20001d6c 	.word	0x20001d6c

08009974 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8009974:	b580      	push	{r7, lr}
 8009976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8009978:	4802      	ldr	r0, [pc, #8]	@ (8009984 <TIM4_IRQHandler+0x10>)
 800997a:	f004 ff2d 	bl	800e7d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800997e:	bf00      	nop
 8009980:	bd80      	pop	{r7, pc}
 8009982:	bf00      	nop
 8009984:	20001e38 	.word	0x20001e38

08009988 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8009988:	b580      	push	{r7, lr}
 800998a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800998c:	4802      	ldr	r0, [pc, #8]	@ (8009998 <USART2_IRQHandler+0x10>)
 800998e:	f006 fcf7 	bl	8010380 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8009992:	bf00      	nop
 8009994:	bd80      	pop	{r7, pc}
 8009996:	bf00      	nop
 8009998:	20002234 	.word	0x20002234

0800999c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800999c:	b580      	push	{r7, lr}
 800999e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(J3_Pin);
 80099a0:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80099a4:	f003 f9d6 	bl	800cd54 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(J4_Pin);
 80099a8:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80099ac:	f003 f9d2 	bl	800cd54 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LOWER_PHOTO_Pin);
 80099b0:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80099b4:	f003 f9ce 	bl	800cd54 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80099b8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80099bc:	f003 f9ca 	bl	800cd54 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80099c0:	bf00      	nop
 80099c2:	bd80      	pop	{r7, pc}

080099c4 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80099c8:	4802      	ldr	r0, [pc, #8]	@ (80099d4 <LPUART1_IRQHandler+0x10>)
 80099ca:	f006 fcd9 	bl	8010380 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80099ce:	bf00      	nop
 80099d0:	bd80      	pop	{r7, pc}
 80099d2:	bf00      	nop
 80099d4:	20002168 	.word	0x20002168

080099d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b086      	sub	sp, #24
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80099e0:	4a14      	ldr	r2, [pc, #80]	@ (8009a34 <_sbrk+0x5c>)
 80099e2:	4b15      	ldr	r3, [pc, #84]	@ (8009a38 <_sbrk+0x60>)
 80099e4:	1ad3      	subs	r3, r2, r3
 80099e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80099e8:	697b      	ldr	r3, [r7, #20]
 80099ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80099ec:	4b13      	ldr	r3, [pc, #76]	@ (8009a3c <_sbrk+0x64>)
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d102      	bne.n	80099fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80099f4:	4b11      	ldr	r3, [pc, #68]	@ (8009a3c <_sbrk+0x64>)
 80099f6:	4a12      	ldr	r2, [pc, #72]	@ (8009a40 <_sbrk+0x68>)
 80099f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80099fa:	4b10      	ldr	r3, [pc, #64]	@ (8009a3c <_sbrk+0x64>)
 80099fc:	681a      	ldr	r2, [r3, #0]
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	4413      	add	r3, r2
 8009a02:	693a      	ldr	r2, [r7, #16]
 8009a04:	429a      	cmp	r2, r3
 8009a06:	d207      	bcs.n	8009a18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8009a08:	f008 ffa8 	bl	801295c <__errno>
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	220c      	movs	r2, #12
 8009a10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8009a12:	f04f 33ff 	mov.w	r3, #4294967295
 8009a16:	e009      	b.n	8009a2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8009a18:	4b08      	ldr	r3, [pc, #32]	@ (8009a3c <_sbrk+0x64>)
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8009a1e:	4b07      	ldr	r3, [pc, #28]	@ (8009a3c <_sbrk+0x64>)
 8009a20:	681a      	ldr	r2, [r3, #0]
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	4413      	add	r3, r2
 8009a26:	4a05      	ldr	r2, [pc, #20]	@ (8009a3c <_sbrk+0x64>)
 8009a28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8009a2a:	68fb      	ldr	r3, [r7, #12]
}
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	3718      	adds	r7, #24
 8009a30:	46bd      	mov	sp, r7
 8009a32:	bd80      	pop	{r7, pc}
 8009a34:	20020000 	.word	0x20020000
 8009a38:	00000400 	.word	0x00000400
 8009a3c:	20001bd0 	.word	0x20001bd0
 8009a40:	200025d0 	.word	0x200025d0

08009a44 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8009a44:	b480      	push	{r7}
 8009a46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8009a48:	4b06      	ldr	r3, [pc, #24]	@ (8009a64 <SystemInit+0x20>)
 8009a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009a4e:	4a05      	ldr	r2, [pc, #20]	@ (8009a64 <SystemInit+0x20>)
 8009a50:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009a54:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8009a58:	bf00      	nop
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a60:	4770      	bx	lr
 8009a62:	bf00      	nop
 8009a64:	e000ed00 	.word	0xe000ed00

08009a68 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b098      	sub	sp, #96	@ 0x60
 8009a6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009a6e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8009a72:	2200      	movs	r2, #0
 8009a74:	601a      	str	r2, [r3, #0]
 8009a76:	605a      	str	r2, [r3, #4]
 8009a78:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009a7a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8009a7e:	2200      	movs	r2, #0
 8009a80:	601a      	str	r2, [r3, #0]
 8009a82:	605a      	str	r2, [r3, #4]
 8009a84:	609a      	str	r2, [r3, #8]
 8009a86:	60da      	str	r2, [r3, #12]
 8009a88:	611a      	str	r2, [r3, #16]
 8009a8a:	615a      	str	r2, [r3, #20]
 8009a8c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8009a8e:	1d3b      	adds	r3, r7, #4
 8009a90:	2234      	movs	r2, #52	@ 0x34
 8009a92:	2100      	movs	r1, #0
 8009a94:	4618      	mov	r0, r3
 8009a96:	f008 ff49 	bl	801292c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8009a9a:	4b3b      	ldr	r3, [pc, #236]	@ (8009b88 <MX_TIM1_Init+0x120>)
 8009a9c:	4a3b      	ldr	r2, [pc, #236]	@ (8009b8c <MX_TIM1_Init+0x124>)
 8009a9e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8009aa0:	4b39      	ldr	r3, [pc, #228]	@ (8009b88 <MX_TIM1_Init+0x120>)
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009aa6:	4b38      	ldr	r3, [pc, #224]	@ (8009b88 <MX_TIM1_Init+0x120>)
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8009aac:	4b36      	ldr	r3, [pc, #216]	@ (8009b88 <MX_TIM1_Init+0x120>)
 8009aae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009ab2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009ab4:	4b34      	ldr	r3, [pc, #208]	@ (8009b88 <MX_TIM1_Init+0x120>)
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8009aba:	4b33      	ldr	r3, [pc, #204]	@ (8009b88 <MX_TIM1_Init+0x120>)
 8009abc:	2200      	movs	r2, #0
 8009abe:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009ac0:	4b31      	ldr	r3, [pc, #196]	@ (8009b88 <MX_TIM1_Init+0x120>)
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8009ac6:	4830      	ldr	r0, [pc, #192]	@ (8009b88 <MX_TIM1_Init+0x120>)
 8009ac8:	f004 fad8 	bl	800e07c <HAL_TIM_PWM_Init>
 8009acc:	4603      	mov	r3, r0
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d001      	beq.n	8009ad6 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8009ad2:	f7ff f925 	bl	8008d20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8009ada:	2300      	movs	r3, #0
 8009adc:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009ade:	2300      	movs	r3, #0
 8009ae0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8009ae2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8009ae6:	4619      	mov	r1, r3
 8009ae8:	4827      	ldr	r0, [pc, #156]	@ (8009b88 <MX_TIM1_Init+0x120>)
 8009aea:	f006 f8e9 	bl	800fcc0 <HAL_TIMEx_MasterConfigSynchronization>
 8009aee:	4603      	mov	r3, r0
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d001      	beq.n	8009af8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8009af4:	f7ff f914 	bl	8008d20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009af8:	2360      	movs	r3, #96	@ 0x60
 8009afa:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8009afc:	2300      	movs	r3, #0
 8009afe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009b00:	2300      	movs	r3, #0
 8009b02:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8009b04:	2300      	movs	r3, #0
 8009b06:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009b08:	2300      	movs	r3, #0
 8009b0a:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8009b10:	2300      	movs	r3, #0
 8009b12:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8009b14:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8009b18:	220c      	movs	r2, #12
 8009b1a:	4619      	mov	r1, r3
 8009b1c:	481a      	ldr	r0, [pc, #104]	@ (8009b88 <MX_TIM1_Init+0x120>)
 8009b1e:	f004 ffd5 	bl	800eacc <HAL_TIM_PWM_ConfigChannel>
 8009b22:	4603      	mov	r3, r0
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d001      	beq.n	8009b2c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8009b28:	f7ff f8fa 	bl	8008d20 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8009b30:	2300      	movs	r3, #0
 8009b32:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8009b34:	2300      	movs	r3, #0
 8009b36:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8009b38:	2300      	movs	r3, #0
 8009b3a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8009b40:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009b44:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8009b46:	2300      	movs	r3, #0
 8009b48:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8009b4e:	2300      	movs	r3, #0
 8009b50:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8009b52:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009b56:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8009b58:	2300      	movs	r3, #0
 8009b5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8009b60:	2300      	movs	r3, #0
 8009b62:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8009b64:	1d3b      	adds	r3, r7, #4
 8009b66:	4619      	mov	r1, r3
 8009b68:	4807      	ldr	r0, [pc, #28]	@ (8009b88 <MX_TIM1_Init+0x120>)
 8009b6a:	f006 f93f 	bl	800fdec <HAL_TIMEx_ConfigBreakDeadTime>
 8009b6e:	4603      	mov	r3, r0
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d001      	beq.n	8009b78 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8009b74:	f7ff f8d4 	bl	8008d20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8009b78:	4803      	ldr	r0, [pc, #12]	@ (8009b88 <MX_TIM1_Init+0x120>)
 8009b7a:	f000 fb77 	bl	800a26c <HAL_TIM_MspPostInit>

}
 8009b7e:	bf00      	nop
 8009b80:	3760      	adds	r7, #96	@ 0x60
 8009b82:	46bd      	mov	sp, r7
 8009b84:	bd80      	pop	{r7, pc}
 8009b86:	bf00      	nop
 8009b88:	20001bd4 	.word	0x20001bd4
 8009b8c:	40012c00 	.word	0x40012c00

08009b90 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b088      	sub	sp, #32
 8009b94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009b96:	f107 0310 	add.w	r3, r7, #16
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	601a      	str	r2, [r3, #0]
 8009b9e:	605a      	str	r2, [r3, #4]
 8009ba0:	609a      	str	r2, [r3, #8]
 8009ba2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009ba4:	1d3b      	adds	r3, r7, #4
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	601a      	str	r2, [r3, #0]
 8009baa:	605a      	str	r2, [r3, #4]
 8009bac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8009bae:	4b1e      	ldr	r3, [pc, #120]	@ (8009c28 <MX_TIM2_Init+0x98>)
 8009bb0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8009bb4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 8009bb6:	4b1c      	ldr	r3, [pc, #112]	@ (8009c28 <MX_TIM2_Init+0x98>)
 8009bb8:	22a9      	movs	r2, #169	@ 0xa9
 8009bba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009bbc:	4b1a      	ldr	r3, [pc, #104]	@ (8009c28 <MX_TIM2_Init+0x98>)
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8009bc2:	4b19      	ldr	r3, [pc, #100]	@ (8009c28 <MX_TIM2_Init+0x98>)
 8009bc4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8009bc8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009bca:	4b17      	ldr	r3, [pc, #92]	@ (8009c28 <MX_TIM2_Init+0x98>)
 8009bcc:	2200      	movs	r2, #0
 8009bce:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009bd0:	4b15      	ldr	r3, [pc, #84]	@ (8009c28 <MX_TIM2_Init+0x98>)
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8009bd6:	4814      	ldr	r0, [pc, #80]	@ (8009c28 <MX_TIM2_Init+0x98>)
 8009bd8:	f004 f904 	bl	800dde4 <HAL_TIM_Base_Init>
 8009bdc:	4603      	mov	r3, r0
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d001      	beq.n	8009be6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8009be2:	f7ff f89d 	bl	8008d20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009be6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009bea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8009bec:	f107 0310 	add.w	r3, r7, #16
 8009bf0:	4619      	mov	r1, r3
 8009bf2:	480d      	ldr	r0, [pc, #52]	@ (8009c28 <MX_TIM2_Init+0x98>)
 8009bf4:	f005 f87e 	bl	800ecf4 <HAL_TIM_ConfigClockSource>
 8009bf8:	4603      	mov	r3, r0
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d001      	beq.n	8009c02 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8009bfe:	f7ff f88f 	bl	8008d20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009c02:	2300      	movs	r3, #0
 8009c04:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009c06:	2300      	movs	r3, #0
 8009c08:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8009c0a:	1d3b      	adds	r3, r7, #4
 8009c0c:	4619      	mov	r1, r3
 8009c0e:	4806      	ldr	r0, [pc, #24]	@ (8009c28 <MX_TIM2_Init+0x98>)
 8009c10:	f006 f856 	bl	800fcc0 <HAL_TIMEx_MasterConfigSynchronization>
 8009c14:	4603      	mov	r3, r0
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d001      	beq.n	8009c1e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8009c1a:	f7ff f881 	bl	8008d20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8009c1e:	bf00      	nop
 8009c20:	3720      	adds	r7, #32
 8009c22:	46bd      	mov	sp, r7
 8009c24:	bd80      	pop	{r7, pc}
 8009c26:	bf00      	nop
 8009c28:	20001ca0 	.word	0x20001ca0

08009c2c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b08c      	sub	sp, #48	@ 0x30
 8009c30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8009c32:	f107 030c 	add.w	r3, r7, #12
 8009c36:	2224      	movs	r2, #36	@ 0x24
 8009c38:	2100      	movs	r1, #0
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	f008 fe76 	bl	801292c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009c40:	463b      	mov	r3, r7
 8009c42:	2200      	movs	r2, #0
 8009c44:	601a      	str	r2, [r3, #0]
 8009c46:	605a      	str	r2, [r3, #4]
 8009c48:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8009c4a:	4b21      	ldr	r3, [pc, #132]	@ (8009cd0 <MX_TIM3_Init+0xa4>)
 8009c4c:	4a21      	ldr	r2, [pc, #132]	@ (8009cd4 <MX_TIM3_Init+0xa8>)
 8009c4e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8009c50:	4b1f      	ldr	r3, [pc, #124]	@ (8009cd0 <MX_TIM3_Init+0xa4>)
 8009c52:	2200      	movs	r2, #0
 8009c54:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009c56:	4b1e      	ldr	r3, [pc, #120]	@ (8009cd0 <MX_TIM3_Init+0xa4>)
 8009c58:	2200      	movs	r2, #0
 8009c5a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8009c5c:	4b1c      	ldr	r3, [pc, #112]	@ (8009cd0 <MX_TIM3_Init+0xa4>)
 8009c5e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009c62:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009c64:	4b1a      	ldr	r3, [pc, #104]	@ (8009cd0 <MX_TIM3_Init+0xa4>)
 8009c66:	2200      	movs	r2, #0
 8009c68:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009c6a:	4b19      	ldr	r3, [pc, #100]	@ (8009cd0 <MX_TIM3_Init+0xa4>)
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8009c70:	2303      	movs	r3, #3
 8009c72:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8009c74:	2300      	movs	r3, #0
 8009c76:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8009c78:	2301      	movs	r3, #1
 8009c7a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8009c80:	2300      	movs	r3, #0
 8009c82:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8009c84:	2300      	movs	r3, #0
 8009c86:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8009c88:	2301      	movs	r3, #1
 8009c8a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8009c90:	2300      	movs	r3, #0
 8009c92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8009c94:	f107 030c 	add.w	r3, r7, #12
 8009c98:	4619      	mov	r1, r3
 8009c9a:	480d      	ldr	r0, [pc, #52]	@ (8009cd0 <MX_TIM3_Init+0xa4>)
 8009c9c:	f004 fc5a 	bl	800e554 <HAL_TIM_Encoder_Init>
 8009ca0:	4603      	mov	r3, r0
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d001      	beq.n	8009caa <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8009ca6:	f7ff f83b 	bl	8008d20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009caa:	2300      	movs	r3, #0
 8009cac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009cae:	2300      	movs	r3, #0
 8009cb0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8009cb2:	463b      	mov	r3, r7
 8009cb4:	4619      	mov	r1, r3
 8009cb6:	4806      	ldr	r0, [pc, #24]	@ (8009cd0 <MX_TIM3_Init+0xa4>)
 8009cb8:	f006 f802 	bl	800fcc0 <HAL_TIMEx_MasterConfigSynchronization>
 8009cbc:	4603      	mov	r3, r0
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d001      	beq.n	8009cc6 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8009cc2:	f7ff f82d 	bl	8008d20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8009cc6:	bf00      	nop
 8009cc8:	3730      	adds	r7, #48	@ 0x30
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}
 8009cce:	bf00      	nop
 8009cd0:	20001d6c 	.word	0x20001d6c
 8009cd4:	40000400 	.word	0x40000400

08009cd8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b08c      	sub	sp, #48	@ 0x30
 8009cdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8009cde:	f107 030c 	add.w	r3, r7, #12
 8009ce2:	2224      	movs	r2, #36	@ 0x24
 8009ce4:	2100      	movs	r1, #0
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	f008 fe20 	bl	801292c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009cec:	463b      	mov	r3, r7
 8009cee:	2200      	movs	r2, #0
 8009cf0:	601a      	str	r2, [r3, #0]
 8009cf2:	605a      	str	r2, [r3, #4]
 8009cf4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8009cf6:	4b21      	ldr	r3, [pc, #132]	@ (8009d7c <MX_TIM4_Init+0xa4>)
 8009cf8:	4a21      	ldr	r2, [pc, #132]	@ (8009d80 <MX_TIM4_Init+0xa8>)
 8009cfa:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8009cfc:	4b1f      	ldr	r3, [pc, #124]	@ (8009d7c <MX_TIM4_Init+0xa4>)
 8009cfe:	2200      	movs	r2, #0
 8009d00:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009d02:	4b1e      	ldr	r3, [pc, #120]	@ (8009d7c <MX_TIM4_Init+0xa4>)
 8009d04:	2200      	movs	r2, #0
 8009d06:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8009d08:	4b1c      	ldr	r3, [pc, #112]	@ (8009d7c <MX_TIM4_Init+0xa4>)
 8009d0a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009d0e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009d10:	4b1a      	ldr	r3, [pc, #104]	@ (8009d7c <MX_TIM4_Init+0xa4>)
 8009d12:	2200      	movs	r2, #0
 8009d14:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009d16:	4b19      	ldr	r3, [pc, #100]	@ (8009d7c <MX_TIM4_Init+0xa4>)
 8009d18:	2200      	movs	r2, #0
 8009d1a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8009d1c:	2303      	movs	r3, #3
 8009d1e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8009d20:	2300      	movs	r3, #0
 8009d22:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8009d24:	2301      	movs	r3, #1
 8009d26:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8009d28:	2300      	movs	r3, #0
 8009d2a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8009d30:	2300      	movs	r3, #0
 8009d32:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8009d34:	2301      	movs	r3, #1
 8009d36:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8009d38:	2300      	movs	r3, #0
 8009d3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8009d40:	f107 030c 	add.w	r3, r7, #12
 8009d44:	4619      	mov	r1, r3
 8009d46:	480d      	ldr	r0, [pc, #52]	@ (8009d7c <MX_TIM4_Init+0xa4>)
 8009d48:	f004 fc04 	bl	800e554 <HAL_TIM_Encoder_Init>
 8009d4c:	4603      	mov	r3, r0
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d001      	beq.n	8009d56 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8009d52:	f7fe ffe5 	bl	8008d20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009d56:	2300      	movs	r3, #0
 8009d58:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8009d5e:	463b      	mov	r3, r7
 8009d60:	4619      	mov	r1, r3
 8009d62:	4806      	ldr	r0, [pc, #24]	@ (8009d7c <MX_TIM4_Init+0xa4>)
 8009d64:	f005 ffac 	bl	800fcc0 <HAL_TIMEx_MasterConfigSynchronization>
 8009d68:	4603      	mov	r3, r0
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d001      	beq.n	8009d72 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8009d6e:	f7fe ffd7 	bl	8008d20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8009d72:	bf00      	nop
 8009d74:	3730      	adds	r7, #48	@ 0x30
 8009d76:	46bd      	mov	sp, r7
 8009d78:	bd80      	pop	{r7, pc}
 8009d7a:	bf00      	nop
 8009d7c:	20001e38 	.word	0x20001e38
 8009d80:	40000800 	.word	0x40000800

08009d84 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b08c      	sub	sp, #48	@ 0x30
 8009d88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8009d8a:	f107 030c 	add.w	r3, r7, #12
 8009d8e:	2224      	movs	r2, #36	@ 0x24
 8009d90:	2100      	movs	r1, #0
 8009d92:	4618      	mov	r0, r3
 8009d94:	f008 fdca 	bl	801292c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009d98:	463b      	mov	r3, r7
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	601a      	str	r2, [r3, #0]
 8009d9e:	605a      	str	r2, [r3, #4]
 8009da0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8009da2:	4b21      	ldr	r3, [pc, #132]	@ (8009e28 <MX_TIM5_Init+0xa4>)
 8009da4:	4a21      	ldr	r2, [pc, #132]	@ (8009e2c <MX_TIM5_Init+0xa8>)
 8009da6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8009da8:	4b1f      	ldr	r3, [pc, #124]	@ (8009e28 <MX_TIM5_Init+0xa4>)
 8009daa:	2200      	movs	r2, #0
 8009dac:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009dae:	4b1e      	ldr	r3, [pc, #120]	@ (8009e28 <MX_TIM5_Init+0xa4>)
 8009db0:	2200      	movs	r2, #0
 8009db2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8009db4:	4b1c      	ldr	r3, [pc, #112]	@ (8009e28 <MX_TIM5_Init+0xa4>)
 8009db6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009dba:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009dbc:	4b1a      	ldr	r3, [pc, #104]	@ (8009e28 <MX_TIM5_Init+0xa4>)
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009dc2:	4b19      	ldr	r3, [pc, #100]	@ (8009e28 <MX_TIM5_Init+0xa4>)
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8009dc8:	2303      	movs	r3, #3
 8009dca:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8009dcc:	2300      	movs	r3, #0
 8009dce:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8009dd0:	2301      	movs	r3, #1
 8009dd2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8009dd8:	2300      	movs	r3, #0
 8009dda:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8009ddc:	2300      	movs	r3, #0
 8009dde:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8009de0:	2301      	movs	r3, #1
 8009de2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8009de4:	2300      	movs	r3, #0
 8009de6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8009de8:	2300      	movs	r3, #0
 8009dea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8009dec:	f107 030c 	add.w	r3, r7, #12
 8009df0:	4619      	mov	r1, r3
 8009df2:	480d      	ldr	r0, [pc, #52]	@ (8009e28 <MX_TIM5_Init+0xa4>)
 8009df4:	f004 fbae 	bl	800e554 <HAL_TIM_Encoder_Init>
 8009df8:	4603      	mov	r3, r0
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d001      	beq.n	8009e02 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8009dfe:	f7fe ff8f 	bl	8008d20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009e02:	2300      	movs	r3, #0
 8009e04:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009e06:	2300      	movs	r3, #0
 8009e08:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8009e0a:	463b      	mov	r3, r7
 8009e0c:	4619      	mov	r1, r3
 8009e0e:	4806      	ldr	r0, [pc, #24]	@ (8009e28 <MX_TIM5_Init+0xa4>)
 8009e10:	f005 ff56 	bl	800fcc0 <HAL_TIMEx_MasterConfigSynchronization>
 8009e14:	4603      	mov	r3, r0
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d001      	beq.n	8009e1e <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8009e1a:	f7fe ff81 	bl	8008d20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8009e1e:	bf00      	nop
 8009e20:	3730      	adds	r7, #48	@ 0x30
 8009e22:	46bd      	mov	sp, r7
 8009e24:	bd80      	pop	{r7, pc}
 8009e26:	bf00      	nop
 8009e28:	20001f04 	.word	0x20001f04
 8009e2c:	40000c00 	.word	0x40000c00

08009e30 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8009e30:	b580      	push	{r7, lr}
 8009e32:	b09c      	sub	sp, #112	@ 0x70
 8009e34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009e36:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	601a      	str	r2, [r3, #0]
 8009e3e:	605a      	str	r2, [r3, #4]
 8009e40:	609a      	str	r2, [r3, #8]
 8009e42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009e44:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8009e48:	2200      	movs	r2, #0
 8009e4a:	601a      	str	r2, [r3, #0]
 8009e4c:	605a      	str	r2, [r3, #4]
 8009e4e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009e50:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8009e54:	2200      	movs	r2, #0
 8009e56:	601a      	str	r2, [r3, #0]
 8009e58:	605a      	str	r2, [r3, #4]
 8009e5a:	609a      	str	r2, [r3, #8]
 8009e5c:	60da      	str	r2, [r3, #12]
 8009e5e:	611a      	str	r2, [r3, #16]
 8009e60:	615a      	str	r2, [r3, #20]
 8009e62:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8009e64:	1d3b      	adds	r3, r7, #4
 8009e66:	2234      	movs	r2, #52	@ 0x34
 8009e68:	2100      	movs	r1, #0
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	f008 fd5e 	bl	801292c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8009e70:	4b4c      	ldr	r3, [pc, #304]	@ (8009fa4 <MX_TIM8_Init+0x174>)
 8009e72:	4a4d      	ldr	r2, [pc, #308]	@ (8009fa8 <MX_TIM8_Init+0x178>)
 8009e74:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8009e76:	4b4b      	ldr	r3, [pc, #300]	@ (8009fa4 <MX_TIM8_Init+0x174>)
 8009e78:	2200      	movs	r2, #0
 8009e7a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009e7c:	4b49      	ldr	r3, [pc, #292]	@ (8009fa4 <MX_TIM8_Init+0x174>)
 8009e7e:	2200      	movs	r2, #0
 8009e80:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8009e82:	4b48      	ldr	r3, [pc, #288]	@ (8009fa4 <MX_TIM8_Init+0x174>)
 8009e84:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009e88:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8009e8a:	4b46      	ldr	r3, [pc, #280]	@ (8009fa4 <MX_TIM8_Init+0x174>)
 8009e8c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009e90:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8009e92:	4b44      	ldr	r3, [pc, #272]	@ (8009fa4 <MX_TIM8_Init+0x174>)
 8009e94:	2200      	movs	r2, #0
 8009e96:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009e98:	4b42      	ldr	r3, [pc, #264]	@ (8009fa4 <MX_TIM8_Init+0x174>)
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8009e9e:	4841      	ldr	r0, [pc, #260]	@ (8009fa4 <MX_TIM8_Init+0x174>)
 8009ea0:	f003 ffa0 	bl	800dde4 <HAL_TIM_Base_Init>
 8009ea4:	4603      	mov	r3, r0
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d001      	beq.n	8009eae <MX_TIM8_Init+0x7e>
  {
    Error_Handler();
 8009eaa:	f7fe ff39 	bl	8008d20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009eae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009eb2:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8009eb4:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8009eb8:	4619      	mov	r1, r3
 8009eba:	483a      	ldr	r0, [pc, #232]	@ (8009fa4 <MX_TIM8_Init+0x174>)
 8009ebc:	f004 ff1a 	bl	800ecf4 <HAL_TIM_ConfigClockSource>
 8009ec0:	4603      	mov	r3, r0
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d001      	beq.n	8009eca <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 8009ec6:	f7fe ff2b 	bl	8008d20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8009eca:	4836      	ldr	r0, [pc, #216]	@ (8009fa4 <MX_TIM8_Init+0x174>)
 8009ecc:	f004 f8d6 	bl	800e07c <HAL_TIM_PWM_Init>
 8009ed0:	4603      	mov	r3, r0
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d001      	beq.n	8009eda <MX_TIM8_Init+0xaa>
  {
    Error_Handler();
 8009ed6:	f7fe ff23 	bl	8008d20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009eda:	2300      	movs	r3, #0
 8009edc:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8009ede:	2300      	movs	r3, #0
 8009ee0:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8009ee6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8009eea:	4619      	mov	r1, r3
 8009eec:	482d      	ldr	r0, [pc, #180]	@ (8009fa4 <MX_TIM8_Init+0x174>)
 8009eee:	f005 fee7 	bl	800fcc0 <HAL_TIMEx_MasterConfigSynchronization>
 8009ef2:	4603      	mov	r3, r0
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d001      	beq.n	8009efc <MX_TIM8_Init+0xcc>
  {
    Error_Handler();
 8009ef8:	f7fe ff12 	bl	8008d20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009efc:	2360      	movs	r3, #96	@ 0x60
 8009efe:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8009f00:	2300      	movs	r3, #0
 8009f02:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009f04:	2300      	movs	r3, #0
 8009f06:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8009f08:	2300      	movs	r3, #0
 8009f0a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8009f10:	2300      	movs	r3, #0
 8009f12:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8009f14:	2300      	movs	r3, #0
 8009f16:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009f18:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	4619      	mov	r1, r3
 8009f20:	4820      	ldr	r0, [pc, #128]	@ (8009fa4 <MX_TIM8_Init+0x174>)
 8009f22:	f004 fdd3 	bl	800eacc <HAL_TIM_PWM_ConfigChannel>
 8009f26:	4603      	mov	r3, r0
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d001      	beq.n	8009f30 <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 8009f2c:	f7fe fef8 	bl	8008d20 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8009f30:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8009f34:	2204      	movs	r2, #4
 8009f36:	4619      	mov	r1, r3
 8009f38:	481a      	ldr	r0, [pc, #104]	@ (8009fa4 <MX_TIM8_Init+0x174>)
 8009f3a:	f004 fdc7 	bl	800eacc <HAL_TIM_PWM_ConfigChannel>
 8009f3e:	4603      	mov	r3, r0
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d001      	beq.n	8009f48 <MX_TIM8_Init+0x118>
  {
    Error_Handler();
 8009f44:	f7fe feec 	bl	8008d20 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8009f48:	2300      	movs	r3, #0
 8009f4a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8009f50:	2300      	movs	r3, #0
 8009f52:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8009f54:	2300      	movs	r3, #0
 8009f56:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8009f58:	2300      	movs	r3, #0
 8009f5a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8009f5c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009f60:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8009f62:	2300      	movs	r3, #0
 8009f64:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8009f66:	2300      	movs	r3, #0
 8009f68:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8009f6e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009f72:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8009f74:	2300      	movs	r3, #0
 8009f76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8009f78:	2300      	movs	r3, #0
 8009f7a:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8009f80:	1d3b      	adds	r3, r7, #4
 8009f82:	4619      	mov	r1, r3
 8009f84:	4807      	ldr	r0, [pc, #28]	@ (8009fa4 <MX_TIM8_Init+0x174>)
 8009f86:	f005 ff31 	bl	800fdec <HAL_TIMEx_ConfigBreakDeadTime>
 8009f8a:	4603      	mov	r3, r0
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d001      	beq.n	8009f94 <MX_TIM8_Init+0x164>
  {
    Error_Handler();
 8009f90:	f7fe fec6 	bl	8008d20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8009f94:	4803      	ldr	r0, [pc, #12]	@ (8009fa4 <MX_TIM8_Init+0x174>)
 8009f96:	f000 f969 	bl	800a26c <HAL_TIM_MspPostInit>

}
 8009f9a:	bf00      	nop
 8009f9c:	3770      	adds	r7, #112	@ 0x70
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	bd80      	pop	{r7, pc}
 8009fa2:	bf00      	nop
 8009fa4:	20001fd0 	.word	0x20001fd0
 8009fa8:	40013400 	.word	0x40013400

08009fac <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8009fb0:	4b14      	ldr	r3, [pc, #80]	@ (800a004 <MX_TIM16_Init+0x58>)
 8009fb2:	4a15      	ldr	r2, [pc, #84]	@ (800a008 <MX_TIM16_Init+0x5c>)
 8009fb4:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 8009fb6:	4b13      	ldr	r3, [pc, #76]	@ (800a004 <MX_TIM16_Init+0x58>)
 8009fb8:	22a9      	movs	r2, #169	@ 0xa9
 8009fba:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009fbc:	4b11      	ldr	r3, [pc, #68]	@ (800a004 <MX_TIM16_Init+0x58>)
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1145;
 8009fc2:	4b10      	ldr	r3, [pc, #64]	@ (800a004 <MX_TIM16_Init+0x58>)
 8009fc4:	f240 4279 	movw	r2, #1145	@ 0x479
 8009fc8:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009fca:	4b0e      	ldr	r3, [pc, #56]	@ (800a004 <MX_TIM16_Init+0x58>)
 8009fcc:	2200      	movs	r2, #0
 8009fce:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8009fd0:	4b0c      	ldr	r3, [pc, #48]	@ (800a004 <MX_TIM16_Init+0x58>)
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009fd6:	4b0b      	ldr	r3, [pc, #44]	@ (800a004 <MX_TIM16_Init+0x58>)
 8009fd8:	2200      	movs	r2, #0
 8009fda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8009fdc:	4809      	ldr	r0, [pc, #36]	@ (800a004 <MX_TIM16_Init+0x58>)
 8009fde:	f003 ff01 	bl	800dde4 <HAL_TIM_Base_Init>
 8009fe2:	4603      	mov	r3, r0
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d001      	beq.n	8009fec <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8009fe8:	f7fe fe9a 	bl	8008d20 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8009fec:	2108      	movs	r1, #8
 8009fee:	4805      	ldr	r0, [pc, #20]	@ (800a004 <MX_TIM16_Init+0x58>)
 8009ff0:	f004 f9ba 	bl	800e368 <HAL_TIM_OnePulse_Init>
 8009ff4:	4603      	mov	r3, r0
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d001      	beq.n	8009ffe <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 8009ffa:	f7fe fe91 	bl	8008d20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8009ffe:	bf00      	nop
 800a000:	bd80      	pop	{r7, pc}
 800a002:	bf00      	nop
 800a004:	2000209c 	.word	0x2000209c
 800a008:	40014400 	.word	0x40014400

0800a00c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b084      	sub	sp, #16
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	4a0d      	ldr	r2, [pc, #52]	@ (800a050 <HAL_TIM_PWM_MspInit+0x44>)
 800a01a:	4293      	cmp	r3, r2
 800a01c:	d113      	bne.n	800a046 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800a01e:	4b0d      	ldr	r3, [pc, #52]	@ (800a054 <HAL_TIM_PWM_MspInit+0x48>)
 800a020:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a022:	4a0c      	ldr	r2, [pc, #48]	@ (800a054 <HAL_TIM_PWM_MspInit+0x48>)
 800a024:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800a028:	6613      	str	r3, [r2, #96]	@ 0x60
 800a02a:	4b0a      	ldr	r3, [pc, #40]	@ (800a054 <HAL_TIM_PWM_MspInit+0x48>)
 800a02c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a02e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a032:	60fb      	str	r3, [r7, #12]
 800a034:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800a036:	2200      	movs	r2, #0
 800a038:	2100      	movs	r1, #0
 800a03a:	2019      	movs	r0, #25
 800a03c:	f002 f957 	bl	800c2ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800a040:	2019      	movs	r0, #25
 800a042:	f002 f96e 	bl	800c322 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800a046:	bf00      	nop
 800a048:	3710      	adds	r7, #16
 800a04a:	46bd      	mov	sp, r7
 800a04c:	bd80      	pop	{r7, pc}
 800a04e:	bf00      	nop
 800a050:	40012c00 	.word	0x40012c00
 800a054:	40021000 	.word	0x40021000

0800a058 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b086      	sub	sp, #24
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a068:	d114      	bne.n	800a094 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800a06a:	4b22      	ldr	r3, [pc, #136]	@ (800a0f4 <HAL_TIM_Base_MspInit+0x9c>)
 800a06c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a06e:	4a21      	ldr	r2, [pc, #132]	@ (800a0f4 <HAL_TIM_Base_MspInit+0x9c>)
 800a070:	f043 0301 	orr.w	r3, r3, #1
 800a074:	6593      	str	r3, [r2, #88]	@ 0x58
 800a076:	4b1f      	ldr	r3, [pc, #124]	@ (800a0f4 <HAL_TIM_Base_MspInit+0x9c>)
 800a078:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a07a:	f003 0301 	and.w	r3, r3, #1
 800a07e:	617b      	str	r3, [r7, #20]
 800a080:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800a082:	2200      	movs	r2, #0
 800a084:	2100      	movs	r1, #0
 800a086:	201c      	movs	r0, #28
 800a088:	f002 f931 	bl	800c2ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800a08c:	201c      	movs	r0, #28
 800a08e:	f002 f948 	bl	800c322 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 800a092:	e02a      	b.n	800a0ea <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM8)
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	4a17      	ldr	r2, [pc, #92]	@ (800a0f8 <HAL_TIM_Base_MspInit+0xa0>)
 800a09a:	4293      	cmp	r3, r2
 800a09c:	d10c      	bne.n	800a0b8 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800a09e:	4b15      	ldr	r3, [pc, #84]	@ (800a0f4 <HAL_TIM_Base_MspInit+0x9c>)
 800a0a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a0a2:	4a14      	ldr	r2, [pc, #80]	@ (800a0f4 <HAL_TIM_Base_MspInit+0x9c>)
 800a0a4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800a0a8:	6613      	str	r3, [r2, #96]	@ 0x60
 800a0aa:	4b12      	ldr	r3, [pc, #72]	@ (800a0f4 <HAL_TIM_Base_MspInit+0x9c>)
 800a0ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a0ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a0b2:	613b      	str	r3, [r7, #16]
 800a0b4:	693b      	ldr	r3, [r7, #16]
}
 800a0b6:	e018      	b.n	800a0ea <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM16)
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	4a0f      	ldr	r2, [pc, #60]	@ (800a0fc <HAL_TIM_Base_MspInit+0xa4>)
 800a0be:	4293      	cmp	r3, r2
 800a0c0:	d113      	bne.n	800a0ea <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800a0c2:	4b0c      	ldr	r3, [pc, #48]	@ (800a0f4 <HAL_TIM_Base_MspInit+0x9c>)
 800a0c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a0c6:	4a0b      	ldr	r2, [pc, #44]	@ (800a0f4 <HAL_TIM_Base_MspInit+0x9c>)
 800a0c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a0cc:	6613      	str	r3, [r2, #96]	@ 0x60
 800a0ce:	4b09      	ldr	r3, [pc, #36]	@ (800a0f4 <HAL_TIM_Base_MspInit+0x9c>)
 800a0d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a0d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a0d6:	60fb      	str	r3, [r7, #12]
 800a0d8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800a0da:	2200      	movs	r2, #0
 800a0dc:	2100      	movs	r1, #0
 800a0de:	2019      	movs	r0, #25
 800a0e0:	f002 f905 	bl	800c2ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800a0e4:	2019      	movs	r0, #25
 800a0e6:	f002 f91c 	bl	800c322 <HAL_NVIC_EnableIRQ>
}
 800a0ea:	bf00      	nop
 800a0ec:	3718      	adds	r7, #24
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	bd80      	pop	{r7, pc}
 800a0f2:	bf00      	nop
 800a0f4:	40021000 	.word	0x40021000
 800a0f8:	40013400 	.word	0x40013400
 800a0fc:	40014400 	.word	0x40014400

0800a100 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800a100:	b580      	push	{r7, lr}
 800a102:	b08e      	sub	sp, #56	@ 0x38
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a108:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a10c:	2200      	movs	r2, #0
 800a10e:	601a      	str	r2, [r3, #0]
 800a110:	605a      	str	r2, [r3, #4]
 800a112:	609a      	str	r2, [r3, #8]
 800a114:	60da      	str	r2, [r3, #12]
 800a116:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	4a4f      	ldr	r2, [pc, #316]	@ (800a25c <HAL_TIM_Encoder_MspInit+0x15c>)
 800a11e:	4293      	cmp	r3, r2
 800a120:	d131      	bne.n	800a186 <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800a122:	4b4f      	ldr	r3, [pc, #316]	@ (800a260 <HAL_TIM_Encoder_MspInit+0x160>)
 800a124:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a126:	4a4e      	ldr	r2, [pc, #312]	@ (800a260 <HAL_TIM_Encoder_MspInit+0x160>)
 800a128:	f043 0302 	orr.w	r3, r3, #2
 800a12c:	6593      	str	r3, [r2, #88]	@ 0x58
 800a12e:	4b4c      	ldr	r3, [pc, #304]	@ (800a260 <HAL_TIM_Encoder_MspInit+0x160>)
 800a130:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a132:	f003 0302 	and.w	r3, r3, #2
 800a136:	623b      	str	r3, [r7, #32]
 800a138:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a13a:	4b49      	ldr	r3, [pc, #292]	@ (800a260 <HAL_TIM_Encoder_MspInit+0x160>)
 800a13c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a13e:	4a48      	ldr	r2, [pc, #288]	@ (800a260 <HAL_TIM_Encoder_MspInit+0x160>)
 800a140:	f043 0301 	orr.w	r3, r3, #1
 800a144:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a146:	4b46      	ldr	r3, [pc, #280]	@ (800a260 <HAL_TIM_Encoder_MspInit+0x160>)
 800a148:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a14a:	f003 0301 	and.w	r3, r3, #1
 800a14e:	61fb      	str	r3, [r7, #28]
 800a150:	69fb      	ldr	r3, [r7, #28]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800a152:	23c0      	movs	r3, #192	@ 0xc0
 800a154:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a156:	2302      	movs	r3, #2
 800a158:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a15a:	2300      	movs	r3, #0
 800a15c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a15e:	2300      	movs	r3, #0
 800a160:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800a162:	2302      	movs	r3, #2
 800a164:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a166:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a16a:	4619      	mov	r1, r3
 800a16c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800a170:	f002 fc24 	bl	800c9bc <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800a174:	2200      	movs	r2, #0
 800a176:	2100      	movs	r1, #0
 800a178:	201d      	movs	r0, #29
 800a17a:	f002 f8b8 	bl	800c2ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800a17e:	201d      	movs	r0, #29
 800a180:	f002 f8cf 	bl	800c322 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 800a184:	e065      	b.n	800a252 <HAL_TIM_Encoder_MspInit+0x152>
  else if(tim_encoderHandle->Instance==TIM4)
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	4a36      	ldr	r2, [pc, #216]	@ (800a264 <HAL_TIM_Encoder_MspInit+0x164>)
 800a18c:	4293      	cmp	r3, r2
 800a18e:	d132      	bne.n	800a1f6 <HAL_TIM_Encoder_MspInit+0xf6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800a190:	4b33      	ldr	r3, [pc, #204]	@ (800a260 <HAL_TIM_Encoder_MspInit+0x160>)
 800a192:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a194:	4a32      	ldr	r2, [pc, #200]	@ (800a260 <HAL_TIM_Encoder_MspInit+0x160>)
 800a196:	f043 0304 	orr.w	r3, r3, #4
 800a19a:	6593      	str	r3, [r2, #88]	@ 0x58
 800a19c:	4b30      	ldr	r3, [pc, #192]	@ (800a260 <HAL_TIM_Encoder_MspInit+0x160>)
 800a19e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a1a0:	f003 0304 	and.w	r3, r3, #4
 800a1a4:	61bb      	str	r3, [r7, #24]
 800a1a6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a1a8:	4b2d      	ldr	r3, [pc, #180]	@ (800a260 <HAL_TIM_Encoder_MspInit+0x160>)
 800a1aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a1ac:	4a2c      	ldr	r2, [pc, #176]	@ (800a260 <HAL_TIM_Encoder_MspInit+0x160>)
 800a1ae:	f043 0301 	orr.w	r3, r3, #1
 800a1b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a1b4:	4b2a      	ldr	r3, [pc, #168]	@ (800a260 <HAL_TIM_Encoder_MspInit+0x160>)
 800a1b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a1b8:	f003 0301 	and.w	r3, r3, #1
 800a1bc:	617b      	str	r3, [r7, #20]
 800a1be:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a1c0:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800a1c4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a1c6:	2302      	movs	r3, #2
 800a1c8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 800a1d2:	230a      	movs	r3, #10
 800a1d4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a1d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a1da:	4619      	mov	r1, r3
 800a1dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800a1e0:	f002 fbec 	bl	800c9bc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	2100      	movs	r1, #0
 800a1e8:	201e      	movs	r0, #30
 800a1ea:	f002 f880 	bl	800c2ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800a1ee:	201e      	movs	r0, #30
 800a1f0:	f002 f897 	bl	800c322 <HAL_NVIC_EnableIRQ>
}
 800a1f4:	e02d      	b.n	800a252 <HAL_TIM_Encoder_MspInit+0x152>
  else if(tim_encoderHandle->Instance==TIM5)
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	4a1b      	ldr	r2, [pc, #108]	@ (800a268 <HAL_TIM_Encoder_MspInit+0x168>)
 800a1fc:	4293      	cmp	r3, r2
 800a1fe:	d128      	bne.n	800a252 <HAL_TIM_Encoder_MspInit+0x152>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800a200:	4b17      	ldr	r3, [pc, #92]	@ (800a260 <HAL_TIM_Encoder_MspInit+0x160>)
 800a202:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a204:	4a16      	ldr	r2, [pc, #88]	@ (800a260 <HAL_TIM_Encoder_MspInit+0x160>)
 800a206:	f043 0308 	orr.w	r3, r3, #8
 800a20a:	6593      	str	r3, [r2, #88]	@ 0x58
 800a20c:	4b14      	ldr	r3, [pc, #80]	@ (800a260 <HAL_TIM_Encoder_MspInit+0x160>)
 800a20e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a210:	f003 0308 	and.w	r3, r3, #8
 800a214:	613b      	str	r3, [r7, #16]
 800a216:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a218:	4b11      	ldr	r3, [pc, #68]	@ (800a260 <HAL_TIM_Encoder_MspInit+0x160>)
 800a21a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a21c:	4a10      	ldr	r2, [pc, #64]	@ (800a260 <HAL_TIM_Encoder_MspInit+0x160>)
 800a21e:	f043 0301 	orr.w	r3, r3, #1
 800a222:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a224:	4b0e      	ldr	r3, [pc, #56]	@ (800a260 <HAL_TIM_Encoder_MspInit+0x160>)
 800a226:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a228:	f003 0301 	and.w	r3, r3, #1
 800a22c:	60fb      	str	r3, [r7, #12]
 800a22e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800a230:	2303      	movs	r3, #3
 800a232:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a234:	2302      	movs	r3, #2
 800a236:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a238:	2300      	movs	r3, #0
 800a23a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a23c:	2300      	movs	r3, #0
 800a23e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800a240:	2302      	movs	r3, #2
 800a242:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a244:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a248:	4619      	mov	r1, r3
 800a24a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800a24e:	f002 fbb5 	bl	800c9bc <HAL_GPIO_Init>
}
 800a252:	bf00      	nop
 800a254:	3738      	adds	r7, #56	@ 0x38
 800a256:	46bd      	mov	sp, r7
 800a258:	bd80      	pop	{r7, pc}
 800a25a:	bf00      	nop
 800a25c:	40000400 	.word	0x40000400
 800a260:	40021000 	.word	0x40021000
 800a264:	40000800 	.word	0x40000800
 800a268:	40000c00 	.word	0x40000c00

0800a26c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b08a      	sub	sp, #40	@ 0x28
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a274:	f107 0314 	add.w	r3, r7, #20
 800a278:	2200      	movs	r2, #0
 800a27a:	601a      	str	r2, [r3, #0]
 800a27c:	605a      	str	r2, [r3, #4]
 800a27e:	609a      	str	r2, [r3, #8]
 800a280:	60da      	str	r2, [r3, #12]
 800a282:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	4a22      	ldr	r2, [pc, #136]	@ (800a314 <HAL_TIM_MspPostInit+0xa8>)
 800a28a:	4293      	cmp	r3, r2
 800a28c:	d11c      	bne.n	800a2c8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a28e:	4b22      	ldr	r3, [pc, #136]	@ (800a318 <HAL_TIM_MspPostInit+0xac>)
 800a290:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a292:	4a21      	ldr	r2, [pc, #132]	@ (800a318 <HAL_TIM_MspPostInit+0xac>)
 800a294:	f043 0304 	orr.w	r3, r3, #4
 800a298:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a29a:	4b1f      	ldr	r3, [pc, #124]	@ (800a318 <HAL_TIM_MspPostInit+0xac>)
 800a29c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a29e:	f003 0304 	and.w	r3, r3, #4
 800a2a2:	613b      	str	r3, [r7, #16]
 800a2a4:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC3     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800a2a6:	2308      	movs	r3, #8
 800a2a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a2aa:	2302      	movs	r3, #2
 800a2ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800a2b6:	2302      	movs	r3, #2
 800a2b8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a2ba:	f107 0314 	add.w	r3, r7, #20
 800a2be:	4619      	mov	r1, r3
 800a2c0:	4816      	ldr	r0, [pc, #88]	@ (800a31c <HAL_TIM_MspPostInit+0xb0>)
 800a2c2:	f002 fb7b 	bl	800c9bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800a2c6:	e020      	b.n	800a30a <HAL_TIM_MspPostInit+0x9e>
  else if(timHandle->Instance==TIM8)
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	4a14      	ldr	r2, [pc, #80]	@ (800a320 <HAL_TIM_MspPostInit+0xb4>)
 800a2ce:	4293      	cmp	r3, r2
 800a2d0:	d11b      	bne.n	800a30a <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a2d2:	4b11      	ldr	r3, [pc, #68]	@ (800a318 <HAL_TIM_MspPostInit+0xac>)
 800a2d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a2d6:	4a10      	ldr	r2, [pc, #64]	@ (800a318 <HAL_TIM_MspPostInit+0xac>)
 800a2d8:	f043 0304 	orr.w	r3, r3, #4
 800a2dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a2de:	4b0e      	ldr	r3, [pc, #56]	@ (800a318 <HAL_TIM_MspPostInit+0xac>)
 800a2e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a2e2:	f003 0304 	and.w	r3, r3, #4
 800a2e6:	60fb      	str	r3, [r7, #12]
 800a2e8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800a2ea:	23c0      	movs	r3, #192	@ 0xc0
 800a2ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a2ee:	2302      	movs	r3, #2
 800a2f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 800a2fa:	2304      	movs	r3, #4
 800a2fc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a2fe:	f107 0314 	add.w	r3, r7, #20
 800a302:	4619      	mov	r1, r3
 800a304:	4805      	ldr	r0, [pc, #20]	@ (800a31c <HAL_TIM_MspPostInit+0xb0>)
 800a306:	f002 fb59 	bl	800c9bc <HAL_GPIO_Init>
}
 800a30a:	bf00      	nop
 800a30c:	3728      	adds	r7, #40	@ 0x28
 800a30e:	46bd      	mov	sp, r7
 800a310:	bd80      	pop	{r7, pc}
 800a312:	bf00      	nop
 800a314:	40012c00 	.word	0x40012c00
 800a318:	40021000 	.word	0x40021000
 800a31c:	48000800 	.word	0x48000800
 800a320:	40013400 	.word	0x40013400

0800a324 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 800a324:	b580      	push	{r7, lr}
 800a326:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800a328:	4b20      	ldr	r3, [pc, #128]	@ (800a3ac <MX_LPUART1_UART_Init+0x88>)
 800a32a:	4a21      	ldr	r2, [pc, #132]	@ (800a3b0 <MX_LPUART1_UART_Init+0x8c>)
 800a32c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 2000000;
 800a32e:	4b1f      	ldr	r3, [pc, #124]	@ (800a3ac <MX_LPUART1_UART_Init+0x88>)
 800a330:	4a20      	ldr	r2, [pc, #128]	@ (800a3b4 <MX_LPUART1_UART_Init+0x90>)
 800a332:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800a334:	4b1d      	ldr	r3, [pc, #116]	@ (800a3ac <MX_LPUART1_UART_Init+0x88>)
 800a336:	2200      	movs	r2, #0
 800a338:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800a33a:	4b1c      	ldr	r3, [pc, #112]	@ (800a3ac <MX_LPUART1_UART_Init+0x88>)
 800a33c:	2200      	movs	r2, #0
 800a33e:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800a340:	4b1a      	ldr	r3, [pc, #104]	@ (800a3ac <MX_LPUART1_UART_Init+0x88>)
 800a342:	2200      	movs	r2, #0
 800a344:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800a346:	4b19      	ldr	r3, [pc, #100]	@ (800a3ac <MX_LPUART1_UART_Init+0x88>)
 800a348:	220c      	movs	r2, #12
 800a34a:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a34c:	4b17      	ldr	r3, [pc, #92]	@ (800a3ac <MX_LPUART1_UART_Init+0x88>)
 800a34e:	2200      	movs	r2, #0
 800a350:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800a352:	4b16      	ldr	r3, [pc, #88]	@ (800a3ac <MX_LPUART1_UART_Init+0x88>)
 800a354:	2200      	movs	r2, #0
 800a356:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800a358:	4b14      	ldr	r3, [pc, #80]	@ (800a3ac <MX_LPUART1_UART_Init+0x88>)
 800a35a:	2200      	movs	r2, #0
 800a35c:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800a35e:	4b13      	ldr	r3, [pc, #76]	@ (800a3ac <MX_LPUART1_UART_Init+0x88>)
 800a360:	2200      	movs	r2, #0
 800a362:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800a364:	4811      	ldr	r0, [pc, #68]	@ (800a3ac <MX_LPUART1_UART_Init+0x88>)
 800a366:	f005 fe25 	bl	800ffb4 <HAL_UART_Init>
 800a36a:	4603      	mov	r3, r0
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d001      	beq.n	800a374 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 800a370:	f7fe fcd6 	bl	8008d20 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800a374:	2100      	movs	r1, #0
 800a376:	480d      	ldr	r0, [pc, #52]	@ (800a3ac <MX_LPUART1_UART_Init+0x88>)
 800a378:	f007 fc61 	bl	8011c3e <HAL_UARTEx_SetTxFifoThreshold>
 800a37c:	4603      	mov	r3, r0
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d001      	beq.n	800a386 <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 800a382:	f7fe fccd 	bl	8008d20 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800a386:	2100      	movs	r1, #0
 800a388:	4808      	ldr	r0, [pc, #32]	@ (800a3ac <MX_LPUART1_UART_Init+0x88>)
 800a38a:	f007 fc96 	bl	8011cba <HAL_UARTEx_SetRxFifoThreshold>
 800a38e:	4603      	mov	r3, r0
 800a390:	2b00      	cmp	r3, #0
 800a392:	d001      	beq.n	800a398 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 800a394:	f7fe fcc4 	bl	8008d20 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800a398:	4804      	ldr	r0, [pc, #16]	@ (800a3ac <MX_LPUART1_UART_Init+0x88>)
 800a39a:	f007 fc17 	bl	8011bcc <HAL_UARTEx_DisableFifoMode>
 800a39e:	4603      	mov	r3, r0
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d001      	beq.n	800a3a8 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 800a3a4:	f7fe fcbc 	bl	8008d20 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800a3a8:	bf00      	nop
 800a3aa:	bd80      	pop	{r7, pc}
 800a3ac:	20002168 	.word	0x20002168
 800a3b0:	40008000 	.word	0x40008000
 800a3b4:	001e8480 	.word	0x001e8480

0800a3b8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800a3bc:	4b23      	ldr	r3, [pc, #140]	@ (800a44c <MX_USART2_UART_Init+0x94>)
 800a3be:	4a24      	ldr	r2, [pc, #144]	@ (800a450 <MX_USART2_UART_Init+0x98>)
 800a3c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800a3c2:	4b22      	ldr	r3, [pc, #136]	@ (800a44c <MX_USART2_UART_Init+0x94>)
 800a3c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800a3c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800a3ca:	4b20      	ldr	r3, [pc, #128]	@ (800a44c <MX_USART2_UART_Init+0x94>)
 800a3cc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800a3d0:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800a3d2:	4b1e      	ldr	r3, [pc, #120]	@ (800a44c <MX_USART2_UART_Init+0x94>)
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 800a3d8:	4b1c      	ldr	r3, [pc, #112]	@ (800a44c <MX_USART2_UART_Init+0x94>)
 800a3da:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800a3de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800a3e0:	4b1a      	ldr	r3, [pc, #104]	@ (800a44c <MX_USART2_UART_Init+0x94>)
 800a3e2:	220c      	movs	r2, #12
 800a3e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a3e6:	4b19      	ldr	r3, [pc, #100]	@ (800a44c <MX_USART2_UART_Init+0x94>)
 800a3e8:	2200      	movs	r2, #0
 800a3ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800a3ec:	4b17      	ldr	r3, [pc, #92]	@ (800a44c <MX_USART2_UART_Init+0x94>)
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800a3f2:	4b16      	ldr	r3, [pc, #88]	@ (800a44c <MX_USART2_UART_Init+0x94>)
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800a3f8:	4b14      	ldr	r3, [pc, #80]	@ (800a44c <MX_USART2_UART_Init+0x94>)
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800a3fe:	4b13      	ldr	r3, [pc, #76]	@ (800a44c <MX_USART2_UART_Init+0x94>)
 800a400:	2200      	movs	r2, #0
 800a402:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800a404:	4811      	ldr	r0, [pc, #68]	@ (800a44c <MX_USART2_UART_Init+0x94>)
 800a406:	f005 fdd5 	bl	800ffb4 <HAL_UART_Init>
 800a40a:	4603      	mov	r3, r0
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d001      	beq.n	800a414 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 800a410:	f7fe fc86 	bl	8008d20 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800a414:	2100      	movs	r1, #0
 800a416:	480d      	ldr	r0, [pc, #52]	@ (800a44c <MX_USART2_UART_Init+0x94>)
 800a418:	f007 fc11 	bl	8011c3e <HAL_UARTEx_SetTxFifoThreshold>
 800a41c:	4603      	mov	r3, r0
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d001      	beq.n	800a426 <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 800a422:	f7fe fc7d 	bl	8008d20 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800a426:	2100      	movs	r1, #0
 800a428:	4808      	ldr	r0, [pc, #32]	@ (800a44c <MX_USART2_UART_Init+0x94>)
 800a42a:	f007 fc46 	bl	8011cba <HAL_UARTEx_SetRxFifoThreshold>
 800a42e:	4603      	mov	r3, r0
 800a430:	2b00      	cmp	r3, #0
 800a432:	d001      	beq.n	800a438 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 800a434:	f7fe fc74 	bl	8008d20 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800a438:	4804      	ldr	r0, [pc, #16]	@ (800a44c <MX_USART2_UART_Init+0x94>)
 800a43a:	f007 fbc7 	bl	8011bcc <HAL_UARTEx_DisableFifoMode>
 800a43e:	4603      	mov	r3, r0
 800a440:	2b00      	cmp	r3, #0
 800a442:	d001      	beq.n	800a448 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 800a444:	f7fe fc6c 	bl	8008d20 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800a448:	bf00      	nop
 800a44a:	bd80      	pop	{r7, pc}
 800a44c:	20002234 	.word	0x20002234
 800a450:	40004400 	.word	0x40004400

0800a454 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800a454:	b580      	push	{r7, lr}
 800a456:	b0a0      	sub	sp, #128	@ 0x80
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a45c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800a460:	2200      	movs	r2, #0
 800a462:	601a      	str	r2, [r3, #0]
 800a464:	605a      	str	r2, [r3, #4]
 800a466:	609a      	str	r2, [r3, #8]
 800a468:	60da      	str	r2, [r3, #12]
 800a46a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a46c:	f107 0318 	add.w	r3, r7, #24
 800a470:	2254      	movs	r2, #84	@ 0x54
 800a472:	2100      	movs	r1, #0
 800a474:	4618      	mov	r0, r3
 800a476:	f008 fa59 	bl	801292c <memset>
  if(uartHandle->Instance==LPUART1)
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	4a99      	ldr	r2, [pc, #612]	@ (800a6e4 <HAL_UART_MspInit+0x290>)
 800a480:	4293      	cmp	r3, r2
 800a482:	f040 8093 	bne.w	800a5ac <HAL_UART_MspInit+0x158>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800a486:	2320      	movs	r3, #32
 800a488:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800a48a:	2300      	movs	r3, #0
 800a48c:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a48e:	f107 0318 	add.w	r3, r7, #24
 800a492:	4618      	mov	r0, r3
 800a494:	f003 fa58 	bl	800d948 <HAL_RCCEx_PeriphCLKConfig>
 800a498:	4603      	mov	r3, r0
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d001      	beq.n	800a4a2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800a49e:	f7fe fc3f 	bl	8008d20 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800a4a2:	4b91      	ldr	r3, [pc, #580]	@ (800a6e8 <HAL_UART_MspInit+0x294>)
 800a4a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a4a6:	4a90      	ldr	r2, [pc, #576]	@ (800a6e8 <HAL_UART_MspInit+0x294>)
 800a4a8:	f043 0301 	orr.w	r3, r3, #1
 800a4ac:	65d3      	str	r3, [r2, #92]	@ 0x5c
 800a4ae:	4b8e      	ldr	r3, [pc, #568]	@ (800a6e8 <HAL_UART_MspInit+0x294>)
 800a4b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a4b2:	f003 0301 	and.w	r3, r3, #1
 800a4b6:	617b      	str	r3, [r7, #20]
 800a4b8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a4ba:	4b8b      	ldr	r3, [pc, #556]	@ (800a6e8 <HAL_UART_MspInit+0x294>)
 800a4bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a4be:	4a8a      	ldr	r2, [pc, #552]	@ (800a6e8 <HAL_UART_MspInit+0x294>)
 800a4c0:	f043 0302 	orr.w	r3, r3, #2
 800a4c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a4c6:	4b88      	ldr	r3, [pc, #544]	@ (800a6e8 <HAL_UART_MspInit+0x294>)
 800a4c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a4ca:	f003 0302 	and.w	r3, r3, #2
 800a4ce:	613b      	str	r3, [r7, #16]
 800a4d0:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800a4d2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800a4d6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a4d8:	2302      	movs	r3, #2
 800a4da:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a4dc:	2300      	movs	r3, #0
 800a4de:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800a4e4:	2308      	movs	r3, #8
 800a4e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a4e8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800a4ec:	4619      	mov	r1, r3
 800a4ee:	487f      	ldr	r0, [pc, #508]	@ (800a6ec <HAL_UART_MspInit+0x298>)
 800a4f0:	f002 fa64 	bl	800c9bc <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel4;
 800a4f4:	4b7e      	ldr	r3, [pc, #504]	@ (800a6f0 <HAL_UART_MspInit+0x29c>)
 800a4f6:	4a7f      	ldr	r2, [pc, #508]	@ (800a6f4 <HAL_UART_MspInit+0x2a0>)
 800a4f8:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 800a4fa:	4b7d      	ldr	r3, [pc, #500]	@ (800a6f0 <HAL_UART_MspInit+0x29c>)
 800a4fc:	2222      	movs	r2, #34	@ 0x22
 800a4fe:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a500:	4b7b      	ldr	r3, [pc, #492]	@ (800a6f0 <HAL_UART_MspInit+0x29c>)
 800a502:	2200      	movs	r2, #0
 800a504:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a506:	4b7a      	ldr	r3, [pc, #488]	@ (800a6f0 <HAL_UART_MspInit+0x29c>)
 800a508:	2200      	movs	r2, #0
 800a50a:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800a50c:	4b78      	ldr	r3, [pc, #480]	@ (800a6f0 <HAL_UART_MspInit+0x29c>)
 800a50e:	2280      	movs	r2, #128	@ 0x80
 800a510:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a512:	4b77      	ldr	r3, [pc, #476]	@ (800a6f0 <HAL_UART_MspInit+0x29c>)
 800a514:	2200      	movs	r2, #0
 800a516:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a518:	4b75      	ldr	r3, [pc, #468]	@ (800a6f0 <HAL_UART_MspInit+0x29c>)
 800a51a:	2200      	movs	r2, #0
 800a51c:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 800a51e:	4b74      	ldr	r3, [pc, #464]	@ (800a6f0 <HAL_UART_MspInit+0x29c>)
 800a520:	2200      	movs	r2, #0
 800a522:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800a524:	4b72      	ldr	r3, [pc, #456]	@ (800a6f0 <HAL_UART_MspInit+0x29c>)
 800a526:	2200      	movs	r2, #0
 800a528:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 800a52a:	4871      	ldr	r0, [pc, #452]	@ (800a6f0 <HAL_UART_MspInit+0x29c>)
 800a52c:	f001 ff14 	bl	800c358 <HAL_DMA_Init>
 800a530:	4603      	mov	r3, r0
 800a532:	2b00      	cmp	r3, #0
 800a534:	d001      	beq.n	800a53a <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 800a536:	f7fe fbf3 	bl	8008d20 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	4a6c      	ldr	r2, [pc, #432]	@ (800a6f0 <HAL_UART_MspInit+0x29c>)
 800a53e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800a542:	4a6b      	ldr	r2, [pc, #428]	@ (800a6f0 <HAL_UART_MspInit+0x29c>)
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel5;
 800a548:	4b6b      	ldr	r3, [pc, #428]	@ (800a6f8 <HAL_UART_MspInit+0x2a4>)
 800a54a:	4a6c      	ldr	r2, [pc, #432]	@ (800a6fc <HAL_UART_MspInit+0x2a8>)
 800a54c:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 800a54e:	4b6a      	ldr	r3, [pc, #424]	@ (800a6f8 <HAL_UART_MspInit+0x2a4>)
 800a550:	2223      	movs	r2, #35	@ 0x23
 800a552:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a554:	4b68      	ldr	r3, [pc, #416]	@ (800a6f8 <HAL_UART_MspInit+0x2a4>)
 800a556:	2210      	movs	r2, #16
 800a558:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a55a:	4b67      	ldr	r3, [pc, #412]	@ (800a6f8 <HAL_UART_MspInit+0x2a4>)
 800a55c:	2200      	movs	r2, #0
 800a55e:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800a560:	4b65      	ldr	r3, [pc, #404]	@ (800a6f8 <HAL_UART_MspInit+0x2a4>)
 800a562:	2280      	movs	r2, #128	@ 0x80
 800a564:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a566:	4b64      	ldr	r3, [pc, #400]	@ (800a6f8 <HAL_UART_MspInit+0x2a4>)
 800a568:	2200      	movs	r2, #0
 800a56a:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a56c:	4b62      	ldr	r3, [pc, #392]	@ (800a6f8 <HAL_UART_MspInit+0x2a4>)
 800a56e:	2200      	movs	r2, #0
 800a570:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 800a572:	4b61      	ldr	r3, [pc, #388]	@ (800a6f8 <HAL_UART_MspInit+0x2a4>)
 800a574:	2200      	movs	r2, #0
 800a576:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800a578:	4b5f      	ldr	r3, [pc, #380]	@ (800a6f8 <HAL_UART_MspInit+0x2a4>)
 800a57a:	2200      	movs	r2, #0
 800a57c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 800a57e:	485e      	ldr	r0, [pc, #376]	@ (800a6f8 <HAL_UART_MspInit+0x2a4>)
 800a580:	f001 feea 	bl	800c358 <HAL_DMA_Init>
 800a584:	4603      	mov	r3, r0
 800a586:	2b00      	cmp	r3, #0
 800a588:	d001      	beq.n	800a58e <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 800a58a:	f7fe fbc9 	bl	8008d20 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	4a59      	ldr	r2, [pc, #356]	@ (800a6f8 <HAL_UART_MspInit+0x2a4>)
 800a592:	67da      	str	r2, [r3, #124]	@ 0x7c
 800a594:	4a58      	ldr	r2, [pc, #352]	@ (800a6f8 <HAL_UART_MspInit+0x2a4>)
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 800a59a:	2200      	movs	r2, #0
 800a59c:	2100      	movs	r1, #0
 800a59e:	205b      	movs	r0, #91	@ 0x5b
 800a5a0:	f001 fea5 	bl	800c2ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 800a5a4:	205b      	movs	r0, #91	@ 0x5b
 800a5a6:	f001 febc 	bl	800c322 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800a5aa:	e097      	b.n	800a6dc <HAL_UART_MspInit+0x288>
  else if(uartHandle->Instance==USART2)
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	4a53      	ldr	r2, [pc, #332]	@ (800a700 <HAL_UART_MspInit+0x2ac>)
 800a5b2:	4293      	cmp	r3, r2
 800a5b4:	f040 8092 	bne.w	800a6dc <HAL_UART_MspInit+0x288>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800a5b8:	2302      	movs	r3, #2
 800a5ba:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800a5bc:	2300      	movs	r3, #0
 800a5be:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a5c0:	f107 0318 	add.w	r3, r7, #24
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	f003 f9bf 	bl	800d948 <HAL_RCCEx_PeriphCLKConfig>
 800a5ca:	4603      	mov	r3, r0
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d001      	beq.n	800a5d4 <HAL_UART_MspInit+0x180>
      Error_Handler();
 800a5d0:	f7fe fba6 	bl	8008d20 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800a5d4:	4b44      	ldr	r3, [pc, #272]	@ (800a6e8 <HAL_UART_MspInit+0x294>)
 800a5d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a5d8:	4a43      	ldr	r2, [pc, #268]	@ (800a6e8 <HAL_UART_MspInit+0x294>)
 800a5da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a5de:	6593      	str	r3, [r2, #88]	@ 0x58
 800a5e0:	4b41      	ldr	r3, [pc, #260]	@ (800a6e8 <HAL_UART_MspInit+0x294>)
 800a5e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a5e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a5e8:	60fb      	str	r3, [r7, #12]
 800a5ea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a5ec:	4b3e      	ldr	r3, [pc, #248]	@ (800a6e8 <HAL_UART_MspInit+0x294>)
 800a5ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a5f0:	4a3d      	ldr	r2, [pc, #244]	@ (800a6e8 <HAL_UART_MspInit+0x294>)
 800a5f2:	f043 0301 	orr.w	r3, r3, #1
 800a5f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a5f8:	4b3b      	ldr	r3, [pc, #236]	@ (800a6e8 <HAL_UART_MspInit+0x294>)
 800a5fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a5fc:	f003 0301 	and.w	r3, r3, #1
 800a600:	60bb      	str	r3, [r7, #8]
 800a602:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800a604:	230c      	movs	r3, #12
 800a606:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a608:	2302      	movs	r3, #2
 800a60a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a60c:	2300      	movs	r3, #0
 800a60e:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a610:	2300      	movs	r3, #0
 800a612:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800a614:	2307      	movs	r3, #7
 800a616:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a618:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800a61c:	4619      	mov	r1, r3
 800a61e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800a622:	f002 f9cb 	bl	800c9bc <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel2;
 800a626:	4b37      	ldr	r3, [pc, #220]	@ (800a704 <HAL_UART_MspInit+0x2b0>)
 800a628:	4a37      	ldr	r2, [pc, #220]	@ (800a708 <HAL_UART_MspInit+0x2b4>)
 800a62a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 800a62c:	4b35      	ldr	r3, [pc, #212]	@ (800a704 <HAL_UART_MspInit+0x2b0>)
 800a62e:	221a      	movs	r2, #26
 800a630:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a632:	4b34      	ldr	r3, [pc, #208]	@ (800a704 <HAL_UART_MspInit+0x2b0>)
 800a634:	2200      	movs	r2, #0
 800a636:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a638:	4b32      	ldr	r3, [pc, #200]	@ (800a704 <HAL_UART_MspInit+0x2b0>)
 800a63a:	2200      	movs	r2, #0
 800a63c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800a63e:	4b31      	ldr	r3, [pc, #196]	@ (800a704 <HAL_UART_MspInit+0x2b0>)
 800a640:	2280      	movs	r2, #128	@ 0x80
 800a642:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a644:	4b2f      	ldr	r3, [pc, #188]	@ (800a704 <HAL_UART_MspInit+0x2b0>)
 800a646:	2200      	movs	r2, #0
 800a648:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a64a:	4b2e      	ldr	r3, [pc, #184]	@ (800a704 <HAL_UART_MspInit+0x2b0>)
 800a64c:	2200      	movs	r2, #0
 800a64e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800a650:	4b2c      	ldr	r3, [pc, #176]	@ (800a704 <HAL_UART_MspInit+0x2b0>)
 800a652:	2200      	movs	r2, #0
 800a654:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800a656:	4b2b      	ldr	r3, [pc, #172]	@ (800a704 <HAL_UART_MspInit+0x2b0>)
 800a658:	2200      	movs	r2, #0
 800a65a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800a65c:	4829      	ldr	r0, [pc, #164]	@ (800a704 <HAL_UART_MspInit+0x2b0>)
 800a65e:	f001 fe7b 	bl	800c358 <HAL_DMA_Init>
 800a662:	4603      	mov	r3, r0
 800a664:	2b00      	cmp	r3, #0
 800a666:	d001      	beq.n	800a66c <HAL_UART_MspInit+0x218>
      Error_Handler();
 800a668:	f7fe fb5a 	bl	8008d20 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	4a25      	ldr	r2, [pc, #148]	@ (800a704 <HAL_UART_MspInit+0x2b0>)
 800a670:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800a674:	4a23      	ldr	r2, [pc, #140]	@ (800a704 <HAL_UART_MspInit+0x2b0>)
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart2_tx.Instance = DMA1_Channel3;
 800a67a:	4b24      	ldr	r3, [pc, #144]	@ (800a70c <HAL_UART_MspInit+0x2b8>)
 800a67c:	4a24      	ldr	r2, [pc, #144]	@ (800a710 <HAL_UART_MspInit+0x2bc>)
 800a67e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 800a680:	4b22      	ldr	r3, [pc, #136]	@ (800a70c <HAL_UART_MspInit+0x2b8>)
 800a682:	221b      	movs	r2, #27
 800a684:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a686:	4b21      	ldr	r3, [pc, #132]	@ (800a70c <HAL_UART_MspInit+0x2b8>)
 800a688:	2210      	movs	r2, #16
 800a68a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a68c:	4b1f      	ldr	r3, [pc, #124]	@ (800a70c <HAL_UART_MspInit+0x2b8>)
 800a68e:	2200      	movs	r2, #0
 800a690:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800a692:	4b1e      	ldr	r3, [pc, #120]	@ (800a70c <HAL_UART_MspInit+0x2b8>)
 800a694:	2280      	movs	r2, #128	@ 0x80
 800a696:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a698:	4b1c      	ldr	r3, [pc, #112]	@ (800a70c <HAL_UART_MspInit+0x2b8>)
 800a69a:	2200      	movs	r2, #0
 800a69c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a69e:	4b1b      	ldr	r3, [pc, #108]	@ (800a70c <HAL_UART_MspInit+0x2b8>)
 800a6a0:	2200      	movs	r2, #0
 800a6a2:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800a6a4:	4b19      	ldr	r3, [pc, #100]	@ (800a70c <HAL_UART_MspInit+0x2b8>)
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800a6aa:	4b18      	ldr	r3, [pc, #96]	@ (800a70c <HAL_UART_MspInit+0x2b8>)
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800a6b0:	4816      	ldr	r0, [pc, #88]	@ (800a70c <HAL_UART_MspInit+0x2b8>)
 800a6b2:	f001 fe51 	bl	800c358 <HAL_DMA_Init>
 800a6b6:	4603      	mov	r3, r0
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d001      	beq.n	800a6c0 <HAL_UART_MspInit+0x26c>
      Error_Handler();
 800a6bc:	f7fe fb30 	bl	8008d20 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	4a12      	ldr	r2, [pc, #72]	@ (800a70c <HAL_UART_MspInit+0x2b8>)
 800a6c4:	67da      	str	r2, [r3, #124]	@ 0x7c
 800a6c6:	4a11      	ldr	r2, [pc, #68]	@ (800a70c <HAL_UART_MspInit+0x2b8>)
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800a6cc:	2200      	movs	r2, #0
 800a6ce:	2100      	movs	r1, #0
 800a6d0:	2026      	movs	r0, #38	@ 0x26
 800a6d2:	f001 fe0c 	bl	800c2ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800a6d6:	2026      	movs	r0, #38	@ 0x26
 800a6d8:	f001 fe23 	bl	800c322 <HAL_NVIC_EnableIRQ>
}
 800a6dc:	bf00      	nop
 800a6de:	3780      	adds	r7, #128	@ 0x80
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	bd80      	pop	{r7, pc}
 800a6e4:	40008000 	.word	0x40008000
 800a6e8:	40021000 	.word	0x40021000
 800a6ec:	48000400 	.word	0x48000400
 800a6f0:	20002300 	.word	0x20002300
 800a6f4:	40020044 	.word	0x40020044
 800a6f8:	20002360 	.word	0x20002360
 800a6fc:	40020058 	.word	0x40020058
 800a700:	40004400 	.word	0x40004400
 800a704:	200023c0 	.word	0x200023c0
 800a708:	4002001c 	.word	0x4002001c
 800a70c:	20002420 	.word	0x20002420
 800a710:	40020030 	.word	0x40020030

0800a714 <Reset_Handler>:
*/

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:  ldr   r0, =_estack
 800a714:	480d      	ldr	r0, [pc, #52]	@ (800a74c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800a716:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/

    bl  SystemInit
 800a718:	f7ff f994 	bl	8009a44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800a71c:	480c      	ldr	r0, [pc, #48]	@ (800a750 <LoopForever+0x6>)
  ldr r1, =_edata
 800a71e:	490d      	ldr	r1, [pc, #52]	@ (800a754 <LoopForever+0xa>)
  ldr r2, =_sidata
 800a720:	4a0d      	ldr	r2, [pc, #52]	@ (800a758 <LoopForever+0xe>)
  movs r3, #0
 800a722:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800a724:	e002      	b.n	800a72c <LoopCopyDataInit>

0800a726 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800a726:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800a728:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800a72a:	3304      	adds	r3, #4

0800a72c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800a72c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800a72e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800a730:	d3f9      	bcc.n	800a726 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800a732:	4a0a      	ldr	r2, [pc, #40]	@ (800a75c <LoopForever+0x12>)
  ldr r4, =_ebss
 800a734:	4c0a      	ldr	r4, [pc, #40]	@ (800a760 <LoopForever+0x16>)
  movs r3, #0
 800a736:	2300      	movs	r3, #0
  b LoopFillZerobss
 800a738:	e001      	b.n	800a73e <LoopFillZerobss>

0800a73a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800a73a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800a73c:	3204      	adds	r2, #4

0800a73e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800a73e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800a740:	d3fb      	bcc.n	800a73a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800a742:	f008 f911 	bl	8012968 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800a746:	f7fa fffb 	bl	8005740 <main>

0800a74a <LoopForever>:

LoopForever:
    b LoopForever
 800a74a:	e7fe      	b.n	800a74a <LoopForever>
Reset_Handler:  ldr   r0, =_estack
 800a74c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800a750:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800a754:	20000394 	.word	0x20000394
  ldr r2, =_sidata
 800a758:	08014e38 	.word	0x08014e38
  ldr r2, =_sbss
 800a75c:	20000394 	.word	0x20000394
  ldr r4, =_ebss
 800a760:	200025cc 	.word	0x200025cc

0800a764 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800a764:	e7fe      	b.n	800a764 <ADC1_2_IRQHandler>

0800a766 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800a766:	b580      	push	{r7, lr}
 800a768:	b082      	sub	sp, #8
 800a76a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800a76c:	2300      	movs	r3, #0
 800a76e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a770:	2003      	movs	r0, #3
 800a772:	f001 fdb1 	bl	800c2d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800a776:	2000      	movs	r0, #0
 800a778:	f000 f80e 	bl	800a798 <HAL_InitTick>
 800a77c:	4603      	mov	r3, r0
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d002      	beq.n	800a788 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800a782:	2301      	movs	r3, #1
 800a784:	71fb      	strb	r3, [r7, #7]
 800a786:	e001      	b.n	800a78c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800a788:	f7ff f834 	bl	80097f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800a78c:	79fb      	ldrb	r3, [r7, #7]

}
 800a78e:	4618      	mov	r0, r3
 800a790:	3708      	adds	r7, #8
 800a792:	46bd      	mov	sp, r7
 800a794:	bd80      	pop	{r7, pc}
	...

0800a798 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b084      	sub	sp, #16
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800a7a4:	4b16      	ldr	r3, [pc, #88]	@ (800a800 <HAL_InitTick+0x68>)
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d022      	beq.n	800a7f2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800a7ac:	4b15      	ldr	r3, [pc, #84]	@ (800a804 <HAL_InitTick+0x6c>)
 800a7ae:	681a      	ldr	r2, [r3, #0]
 800a7b0:	4b13      	ldr	r3, [pc, #76]	@ (800a800 <HAL_InitTick+0x68>)
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800a7b8:	fbb1 f3f3 	udiv	r3, r1, r3
 800a7bc:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	f001 fdbc 	bl	800c33e <HAL_SYSTICK_Config>
 800a7c6:	4603      	mov	r3, r0
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d10f      	bne.n	800a7ec <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	2b0f      	cmp	r3, #15
 800a7d0:	d809      	bhi.n	800a7e6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	6879      	ldr	r1, [r7, #4]
 800a7d6:	f04f 30ff 	mov.w	r0, #4294967295
 800a7da:	f001 fd88 	bl	800c2ee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800a7de:	4a0a      	ldr	r2, [pc, #40]	@ (800a808 <HAL_InitTick+0x70>)
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	6013      	str	r3, [r2, #0]
 800a7e4:	e007      	b.n	800a7f6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800a7e6:	2301      	movs	r3, #1
 800a7e8:	73fb      	strb	r3, [r7, #15]
 800a7ea:	e004      	b.n	800a7f6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800a7ec:	2301      	movs	r3, #1
 800a7ee:	73fb      	strb	r3, [r7, #15]
 800a7f0:	e001      	b.n	800a7f6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800a7f2:	2301      	movs	r3, #1
 800a7f4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800a7f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	3710      	adds	r7, #16
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	bd80      	pop	{r7, pc}
 800a800:	20000340 	.word	0x20000340
 800a804:	20000338 	.word	0x20000338
 800a808:	2000033c 	.word	0x2000033c

0800a80c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800a80c:	b480      	push	{r7}
 800a80e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800a810:	4b05      	ldr	r3, [pc, #20]	@ (800a828 <HAL_IncTick+0x1c>)
 800a812:	681a      	ldr	r2, [r3, #0]
 800a814:	4b05      	ldr	r3, [pc, #20]	@ (800a82c <HAL_IncTick+0x20>)
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	4413      	add	r3, r2
 800a81a:	4a03      	ldr	r2, [pc, #12]	@ (800a828 <HAL_IncTick+0x1c>)
 800a81c:	6013      	str	r3, [r2, #0]
}
 800a81e:	bf00      	nop
 800a820:	46bd      	mov	sp, r7
 800a822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a826:	4770      	bx	lr
 800a828:	20002480 	.word	0x20002480
 800a82c:	20000340 	.word	0x20000340

0800a830 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800a830:	b480      	push	{r7}
 800a832:	af00      	add	r7, sp, #0
  return uwTick;
 800a834:	4b03      	ldr	r3, [pc, #12]	@ (800a844 <HAL_GetTick+0x14>)
 800a836:	681b      	ldr	r3, [r3, #0]
}
 800a838:	4618      	mov	r0, r3
 800a83a:	46bd      	mov	sp, r7
 800a83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a840:	4770      	bx	lr
 800a842:	bf00      	nop
 800a844:	20002480 	.word	0x20002480

0800a848 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800a848:	b480      	push	{r7}
 800a84a:	b083      	sub	sp, #12
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
 800a850:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	689b      	ldr	r3, [r3, #8]
 800a856:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800a85a:	683b      	ldr	r3, [r7, #0]
 800a85c:	431a      	orrs	r2, r3
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	609a      	str	r2, [r3, #8]
}
 800a862:	bf00      	nop
 800a864:	370c      	adds	r7, #12
 800a866:	46bd      	mov	sp, r7
 800a868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86c:	4770      	bx	lr

0800a86e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800a86e:	b480      	push	{r7}
 800a870:	b083      	sub	sp, #12
 800a872:	af00      	add	r7, sp, #0
 800a874:	6078      	str	r0, [r7, #4]
 800a876:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	689b      	ldr	r3, [r3, #8]
 800a87c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800a880:	683b      	ldr	r3, [r7, #0]
 800a882:	431a      	orrs	r2, r3
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	609a      	str	r2, [r3, #8]
}
 800a888:	bf00      	nop
 800a88a:	370c      	adds	r7, #12
 800a88c:	46bd      	mov	sp, r7
 800a88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a892:	4770      	bx	lr

0800a894 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800a894:	b480      	push	{r7}
 800a896:	b083      	sub	sp, #12
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	689b      	ldr	r3, [r3, #8]
 800a8a0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	370c      	adds	r7, #12
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ae:	4770      	bx	lr

0800a8b0 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800a8b0:	b480      	push	{r7}
 800a8b2:	b087      	sub	sp, #28
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	60f8      	str	r0, [r7, #12]
 800a8b8:	60b9      	str	r1, [r7, #8]
 800a8ba:	607a      	str	r2, [r7, #4]
 800a8bc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	3360      	adds	r3, #96	@ 0x60
 800a8c2:	461a      	mov	r2, r3
 800a8c4:	68bb      	ldr	r3, [r7, #8]
 800a8c6:	009b      	lsls	r3, r3, #2
 800a8c8:	4413      	add	r3, r2
 800a8ca:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800a8cc:	697b      	ldr	r3, [r7, #20]
 800a8ce:	681a      	ldr	r2, [r3, #0]
 800a8d0:	4b08      	ldr	r3, [pc, #32]	@ (800a8f4 <LL_ADC_SetOffset+0x44>)
 800a8d2:	4013      	ands	r3, r2
 800a8d4:	687a      	ldr	r2, [r7, #4]
 800a8d6:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800a8da:	683a      	ldr	r2, [r7, #0]
 800a8dc:	430a      	orrs	r2, r1
 800a8de:	4313      	orrs	r3, r2
 800a8e0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800a8e4:	697b      	ldr	r3, [r7, #20]
 800a8e6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800a8e8:	bf00      	nop
 800a8ea:	371c      	adds	r7, #28
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f2:	4770      	bx	lr
 800a8f4:	03fff000 	.word	0x03fff000

0800a8f8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800a8f8:	b480      	push	{r7}
 800a8fa:	b085      	sub	sp, #20
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	6078      	str	r0, [r7, #4]
 800a900:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	3360      	adds	r3, #96	@ 0x60
 800a906:	461a      	mov	r2, r3
 800a908:	683b      	ldr	r3, [r7, #0]
 800a90a:	009b      	lsls	r3, r3, #2
 800a90c:	4413      	add	r3, r2
 800a90e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800a918:	4618      	mov	r0, r3
 800a91a:	3714      	adds	r7, #20
 800a91c:	46bd      	mov	sp, r7
 800a91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a922:	4770      	bx	lr

0800a924 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800a924:	b480      	push	{r7}
 800a926:	b087      	sub	sp, #28
 800a928:	af00      	add	r7, sp, #0
 800a92a:	60f8      	str	r0, [r7, #12]
 800a92c:	60b9      	str	r1, [r7, #8]
 800a92e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	3360      	adds	r3, #96	@ 0x60
 800a934:	461a      	mov	r2, r3
 800a936:	68bb      	ldr	r3, [r7, #8]
 800a938:	009b      	lsls	r3, r3, #2
 800a93a:	4413      	add	r3, r2
 800a93c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800a93e:	697b      	ldr	r3, [r7, #20]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	431a      	orrs	r2, r3
 800a94a:	697b      	ldr	r3, [r7, #20]
 800a94c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800a94e:	bf00      	nop
 800a950:	371c      	adds	r7, #28
 800a952:	46bd      	mov	sp, r7
 800a954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a958:	4770      	bx	lr

0800a95a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800a95a:	b480      	push	{r7}
 800a95c:	b087      	sub	sp, #28
 800a95e:	af00      	add	r7, sp, #0
 800a960:	60f8      	str	r0, [r7, #12]
 800a962:	60b9      	str	r1, [r7, #8]
 800a964:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	3360      	adds	r3, #96	@ 0x60
 800a96a:	461a      	mov	r2, r3
 800a96c:	68bb      	ldr	r3, [r7, #8]
 800a96e:	009b      	lsls	r3, r3, #2
 800a970:	4413      	add	r3, r2
 800a972:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800a974:	697b      	ldr	r3, [r7, #20]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	431a      	orrs	r2, r3
 800a980:	697b      	ldr	r3, [r7, #20]
 800a982:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800a984:	bf00      	nop
 800a986:	371c      	adds	r7, #28
 800a988:	46bd      	mov	sp, r7
 800a98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98e:	4770      	bx	lr

0800a990 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800a990:	b480      	push	{r7}
 800a992:	b087      	sub	sp, #28
 800a994:	af00      	add	r7, sp, #0
 800a996:	60f8      	str	r0, [r7, #12]
 800a998:	60b9      	str	r1, [r7, #8]
 800a99a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	3360      	adds	r3, #96	@ 0x60
 800a9a0:	461a      	mov	r2, r3
 800a9a2:	68bb      	ldr	r3, [r7, #8]
 800a9a4:	009b      	lsls	r3, r3, #2
 800a9a6:	4413      	add	r3, r2
 800a9a8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800a9aa:	697b      	ldr	r3, [r7, #20]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	431a      	orrs	r2, r3
 800a9b6:	697b      	ldr	r3, [r7, #20]
 800a9b8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800a9ba:	bf00      	nop
 800a9bc:	371c      	adds	r7, #28
 800a9be:	46bd      	mov	sp, r7
 800a9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c4:	4770      	bx	lr

0800a9c6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800a9c6:	b480      	push	{r7}
 800a9c8:	b083      	sub	sp, #12
 800a9ca:	af00      	add	r7, sp, #0
 800a9cc:	6078      	str	r0, [r7, #4]
 800a9ce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	695b      	ldr	r3, [r3, #20]
 800a9d4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800a9d8:	683b      	ldr	r3, [r7, #0]
 800a9da:	431a      	orrs	r2, r3
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	615a      	str	r2, [r3, #20]
}
 800a9e0:	bf00      	nop
 800a9e2:	370c      	adds	r7, #12
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ea:	4770      	bx	lr

0800a9ec <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800a9ec:	b480      	push	{r7}
 800a9ee:	b083      	sub	sp, #12
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	68db      	ldr	r3, [r3, #12]
 800a9f8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d101      	bne.n	800aa04 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800aa00:	2301      	movs	r3, #1
 800aa02:	e000      	b.n	800aa06 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800aa04:	2300      	movs	r3, #0
}
 800aa06:	4618      	mov	r0, r3
 800aa08:	370c      	adds	r7, #12
 800aa0a:	46bd      	mov	sp, r7
 800aa0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa10:	4770      	bx	lr

0800aa12 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800aa12:	b480      	push	{r7}
 800aa14:	b087      	sub	sp, #28
 800aa16:	af00      	add	r7, sp, #0
 800aa18:	60f8      	str	r0, [r7, #12]
 800aa1a:	60b9      	str	r1, [r7, #8]
 800aa1c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	3330      	adds	r3, #48	@ 0x30
 800aa22:	461a      	mov	r2, r3
 800aa24:	68bb      	ldr	r3, [r7, #8]
 800aa26:	0a1b      	lsrs	r3, r3, #8
 800aa28:	009b      	lsls	r3, r3, #2
 800aa2a:	f003 030c 	and.w	r3, r3, #12
 800aa2e:	4413      	add	r3, r2
 800aa30:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800aa32:	697b      	ldr	r3, [r7, #20]
 800aa34:	681a      	ldr	r2, [r3, #0]
 800aa36:	68bb      	ldr	r3, [r7, #8]
 800aa38:	f003 031f 	and.w	r3, r3, #31
 800aa3c:	211f      	movs	r1, #31
 800aa3e:	fa01 f303 	lsl.w	r3, r1, r3
 800aa42:	43db      	mvns	r3, r3
 800aa44:	401a      	ands	r2, r3
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	0e9b      	lsrs	r3, r3, #26
 800aa4a:	f003 011f 	and.w	r1, r3, #31
 800aa4e:	68bb      	ldr	r3, [r7, #8]
 800aa50:	f003 031f 	and.w	r3, r3, #31
 800aa54:	fa01 f303 	lsl.w	r3, r1, r3
 800aa58:	431a      	orrs	r2, r3
 800aa5a:	697b      	ldr	r3, [r7, #20]
 800aa5c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800aa5e:	bf00      	nop
 800aa60:	371c      	adds	r7, #28
 800aa62:	46bd      	mov	sp, r7
 800aa64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa68:	4770      	bx	lr

0800aa6a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800aa6a:	b480      	push	{r7}
 800aa6c:	b087      	sub	sp, #28
 800aa6e:	af00      	add	r7, sp, #0
 800aa70:	60f8      	str	r0, [r7, #12]
 800aa72:	60b9      	str	r1, [r7, #8]
 800aa74:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	3314      	adds	r3, #20
 800aa7a:	461a      	mov	r2, r3
 800aa7c:	68bb      	ldr	r3, [r7, #8]
 800aa7e:	0e5b      	lsrs	r3, r3, #25
 800aa80:	009b      	lsls	r3, r3, #2
 800aa82:	f003 0304 	and.w	r3, r3, #4
 800aa86:	4413      	add	r3, r2
 800aa88:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800aa8a:	697b      	ldr	r3, [r7, #20]
 800aa8c:	681a      	ldr	r2, [r3, #0]
 800aa8e:	68bb      	ldr	r3, [r7, #8]
 800aa90:	0d1b      	lsrs	r3, r3, #20
 800aa92:	f003 031f 	and.w	r3, r3, #31
 800aa96:	2107      	movs	r1, #7
 800aa98:	fa01 f303 	lsl.w	r3, r1, r3
 800aa9c:	43db      	mvns	r3, r3
 800aa9e:	401a      	ands	r2, r3
 800aaa0:	68bb      	ldr	r3, [r7, #8]
 800aaa2:	0d1b      	lsrs	r3, r3, #20
 800aaa4:	f003 031f 	and.w	r3, r3, #31
 800aaa8:	6879      	ldr	r1, [r7, #4]
 800aaaa:	fa01 f303 	lsl.w	r3, r1, r3
 800aaae:	431a      	orrs	r2, r3
 800aab0:	697b      	ldr	r3, [r7, #20]
 800aab2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800aab4:	bf00      	nop
 800aab6:	371c      	adds	r7, #28
 800aab8:	46bd      	mov	sp, r7
 800aaba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aabe:	4770      	bx	lr

0800aac0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800aac0:	b480      	push	{r7}
 800aac2:	b085      	sub	sp, #20
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	60f8      	str	r0, [r7, #12]
 800aac8:	60b9      	str	r1, [r7, #8]
 800aaca:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800aad2:	68bb      	ldr	r3, [r7, #8]
 800aad4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800aad8:	43db      	mvns	r3, r3
 800aada:	401a      	ands	r2, r3
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	f003 0318 	and.w	r3, r3, #24
 800aae2:	4908      	ldr	r1, [pc, #32]	@ (800ab04 <LL_ADC_SetChannelSingleDiff+0x44>)
 800aae4:	40d9      	lsrs	r1, r3
 800aae6:	68bb      	ldr	r3, [r7, #8]
 800aae8:	400b      	ands	r3, r1
 800aaea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800aaee:	431a      	orrs	r2, r3
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800aaf6:	bf00      	nop
 800aaf8:	3714      	adds	r7, #20
 800aafa:	46bd      	mov	sp, r7
 800aafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab00:	4770      	bx	lr
 800ab02:	bf00      	nop
 800ab04:	0007ffff 	.word	0x0007ffff

0800ab08 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800ab08:	b480      	push	{r7}
 800ab0a:	b083      	sub	sp, #12
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	689b      	ldr	r3, [r3, #8]
 800ab14:	f003 031f 	and.w	r3, r3, #31
}
 800ab18:	4618      	mov	r0, r3
 800ab1a:	370c      	adds	r7, #12
 800ab1c:	46bd      	mov	sp, r7
 800ab1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab22:	4770      	bx	lr

0800ab24 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800ab24:	b480      	push	{r7}
 800ab26:	b083      	sub	sp, #12
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	689b      	ldr	r3, [r3, #8]
 800ab30:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800ab34:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800ab38:	687a      	ldr	r2, [r7, #4]
 800ab3a:	6093      	str	r3, [r2, #8]
}
 800ab3c:	bf00      	nop
 800ab3e:	370c      	adds	r7, #12
 800ab40:	46bd      	mov	sp, r7
 800ab42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab46:	4770      	bx	lr

0800ab48 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800ab48:	b480      	push	{r7}
 800ab4a:	b083      	sub	sp, #12
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	689b      	ldr	r3, [r3, #8]
 800ab54:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ab58:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ab5c:	d101      	bne.n	800ab62 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800ab5e:	2301      	movs	r3, #1
 800ab60:	e000      	b.n	800ab64 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800ab62:	2300      	movs	r3, #0
}
 800ab64:	4618      	mov	r0, r3
 800ab66:	370c      	adds	r7, #12
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6e:	4770      	bx	lr

0800ab70 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800ab70:	b480      	push	{r7}
 800ab72:	b083      	sub	sp, #12
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	689b      	ldr	r3, [r3, #8]
 800ab7c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800ab80:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800ab84:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800ab8c:	bf00      	nop
 800ab8e:	370c      	adds	r7, #12
 800ab90:	46bd      	mov	sp, r7
 800ab92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab96:	4770      	bx	lr

0800ab98 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800ab98:	b480      	push	{r7}
 800ab9a:	b083      	sub	sp, #12
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	689b      	ldr	r3, [r3, #8]
 800aba4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800aba8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800abac:	d101      	bne.n	800abb2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800abae:	2301      	movs	r3, #1
 800abb0:	e000      	b.n	800abb4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800abb2:	2300      	movs	r3, #0
}
 800abb4:	4618      	mov	r0, r3
 800abb6:	370c      	adds	r7, #12
 800abb8:	46bd      	mov	sp, r7
 800abba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abbe:	4770      	bx	lr

0800abc0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800abc0:	b480      	push	{r7}
 800abc2:	b083      	sub	sp, #12
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	689b      	ldr	r3, [r3, #8]
 800abcc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800abd0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800abd4:	f043 0201 	orr.w	r2, r3, #1
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800abdc:	bf00      	nop
 800abde:	370c      	adds	r7, #12
 800abe0:	46bd      	mov	sp, r7
 800abe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe6:	4770      	bx	lr

0800abe8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800abe8:	b480      	push	{r7}
 800abea:	b083      	sub	sp, #12
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	689b      	ldr	r3, [r3, #8]
 800abf4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800abf8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800abfc:	f043 0202 	orr.w	r2, r3, #2
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800ac04:	bf00      	nop
 800ac06:	370c      	adds	r7, #12
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0e:	4770      	bx	lr

0800ac10 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800ac10:	b480      	push	{r7}
 800ac12:	b083      	sub	sp, #12
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	689b      	ldr	r3, [r3, #8]
 800ac1c:	f003 0301 	and.w	r3, r3, #1
 800ac20:	2b01      	cmp	r3, #1
 800ac22:	d101      	bne.n	800ac28 <LL_ADC_IsEnabled+0x18>
 800ac24:	2301      	movs	r3, #1
 800ac26:	e000      	b.n	800ac2a <LL_ADC_IsEnabled+0x1a>
 800ac28:	2300      	movs	r3, #0
}
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	370c      	adds	r7, #12
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac34:	4770      	bx	lr

0800ac36 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800ac36:	b480      	push	{r7}
 800ac38:	b083      	sub	sp, #12
 800ac3a:	af00      	add	r7, sp, #0
 800ac3c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	689b      	ldr	r3, [r3, #8]
 800ac42:	f003 0302 	and.w	r3, r3, #2
 800ac46:	2b02      	cmp	r3, #2
 800ac48:	d101      	bne.n	800ac4e <LL_ADC_IsDisableOngoing+0x18>
 800ac4a:	2301      	movs	r3, #1
 800ac4c:	e000      	b.n	800ac50 <LL_ADC_IsDisableOngoing+0x1a>
 800ac4e:	2300      	movs	r3, #0
}
 800ac50:	4618      	mov	r0, r3
 800ac52:	370c      	adds	r7, #12
 800ac54:	46bd      	mov	sp, r7
 800ac56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5a:	4770      	bx	lr

0800ac5c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800ac5c:	b480      	push	{r7}
 800ac5e:	b083      	sub	sp, #12
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	689b      	ldr	r3, [r3, #8]
 800ac68:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ac6c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800ac70:	f043 0204 	orr.w	r2, r3, #4
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800ac78:	bf00      	nop
 800ac7a:	370c      	adds	r7, #12
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac82:	4770      	bx	lr

0800ac84 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800ac84:	b480      	push	{r7}
 800ac86:	b083      	sub	sp, #12
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	689b      	ldr	r3, [r3, #8]
 800ac90:	f003 0304 	and.w	r3, r3, #4
 800ac94:	2b04      	cmp	r3, #4
 800ac96:	d101      	bne.n	800ac9c <LL_ADC_REG_IsConversionOngoing+0x18>
 800ac98:	2301      	movs	r3, #1
 800ac9a:	e000      	b.n	800ac9e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800ac9c:	2300      	movs	r3, #0
}
 800ac9e:	4618      	mov	r0, r3
 800aca0:	370c      	adds	r7, #12
 800aca2:	46bd      	mov	sp, r7
 800aca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca8:	4770      	bx	lr

0800acaa <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800acaa:	b480      	push	{r7}
 800acac:	b083      	sub	sp, #12
 800acae:	af00      	add	r7, sp, #0
 800acb0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	689b      	ldr	r3, [r3, #8]
 800acb6:	f003 0308 	and.w	r3, r3, #8
 800acba:	2b08      	cmp	r3, #8
 800acbc:	d101      	bne.n	800acc2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800acbe:	2301      	movs	r3, #1
 800acc0:	e000      	b.n	800acc4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800acc2:	2300      	movs	r3, #0
}
 800acc4:	4618      	mov	r0, r3
 800acc6:	370c      	adds	r7, #12
 800acc8:	46bd      	mov	sp, r7
 800acca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acce:	4770      	bx	lr

0800acd0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800acd0:	b590      	push	{r4, r7, lr}
 800acd2:	b089      	sub	sp, #36	@ 0x24
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800acd8:	2300      	movs	r3, #0
 800acda:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800acdc:	2300      	movs	r3, #0
 800acde:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d101      	bne.n	800acea <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800ace6:	2301      	movs	r3, #1
 800ace8:	e1a9      	b.n	800b03e <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	695b      	ldr	r3, [r3, #20]
 800acee:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d109      	bne.n	800ad0c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800acf8:	6878      	ldr	r0, [r7, #4]
 800acfa:	f7fa f83b 	bl	8004d74 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	2200      	movs	r2, #0
 800ad02:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	2200      	movs	r2, #0
 800ad08:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	4618      	mov	r0, r3
 800ad12:	f7ff ff19 	bl	800ab48 <LL_ADC_IsDeepPowerDownEnabled>
 800ad16:	4603      	mov	r3, r0
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d004      	beq.n	800ad26 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	4618      	mov	r0, r3
 800ad22:	f7ff feff 	bl	800ab24 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	f7ff ff34 	bl	800ab98 <LL_ADC_IsInternalRegulatorEnabled>
 800ad30:	4603      	mov	r3, r0
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d115      	bne.n	800ad62 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	f7ff ff18 	bl	800ab70 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800ad40:	4b9c      	ldr	r3, [pc, #624]	@ (800afb4 <HAL_ADC_Init+0x2e4>)
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	099b      	lsrs	r3, r3, #6
 800ad46:	4a9c      	ldr	r2, [pc, #624]	@ (800afb8 <HAL_ADC_Init+0x2e8>)
 800ad48:	fba2 2303 	umull	r2, r3, r2, r3
 800ad4c:	099b      	lsrs	r3, r3, #6
 800ad4e:	3301      	adds	r3, #1
 800ad50:	005b      	lsls	r3, r3, #1
 800ad52:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800ad54:	e002      	b.n	800ad5c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	3b01      	subs	r3, #1
 800ad5a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d1f9      	bne.n	800ad56 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	4618      	mov	r0, r3
 800ad68:	f7ff ff16 	bl	800ab98 <LL_ADC_IsInternalRegulatorEnabled>
 800ad6c:	4603      	mov	r3, r0
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d10d      	bne.n	800ad8e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ad76:	f043 0210 	orr.w	r2, r3, #16
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ad82:	f043 0201 	orr.w	r2, r3, #1
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800ad8a:	2301      	movs	r3, #1
 800ad8c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	4618      	mov	r0, r3
 800ad94:	f7ff ff76 	bl	800ac84 <LL_ADC_REG_IsConversionOngoing>
 800ad98:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ad9e:	f003 0310 	and.w	r3, r3, #16
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	f040 8142 	bne.w	800b02c <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800ada8:	697b      	ldr	r3, [r7, #20]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	f040 813e 	bne.w	800b02c <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800adb4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800adb8:	f043 0202 	orr.w	r2, r3, #2
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	4618      	mov	r0, r3
 800adc6:	f7ff ff23 	bl	800ac10 <LL_ADC_IsEnabled>
 800adca:	4603      	mov	r3, r0
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d141      	bne.n	800ae54 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800add8:	d004      	beq.n	800ade4 <HAL_ADC_Init+0x114>
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	4a77      	ldr	r2, [pc, #476]	@ (800afbc <HAL_ADC_Init+0x2ec>)
 800ade0:	4293      	cmp	r3, r2
 800ade2:	d10f      	bne.n	800ae04 <HAL_ADC_Init+0x134>
 800ade4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800ade8:	f7ff ff12 	bl	800ac10 <LL_ADC_IsEnabled>
 800adec:	4604      	mov	r4, r0
 800adee:	4873      	ldr	r0, [pc, #460]	@ (800afbc <HAL_ADC_Init+0x2ec>)
 800adf0:	f7ff ff0e 	bl	800ac10 <LL_ADC_IsEnabled>
 800adf4:	4603      	mov	r3, r0
 800adf6:	4323      	orrs	r3, r4
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	bf0c      	ite	eq
 800adfc:	2301      	moveq	r3, #1
 800adfe:	2300      	movne	r3, #0
 800ae00:	b2db      	uxtb	r3, r3
 800ae02:	e012      	b.n	800ae2a <HAL_ADC_Init+0x15a>
 800ae04:	486e      	ldr	r0, [pc, #440]	@ (800afc0 <HAL_ADC_Init+0x2f0>)
 800ae06:	f7ff ff03 	bl	800ac10 <LL_ADC_IsEnabled>
 800ae0a:	4604      	mov	r4, r0
 800ae0c:	486d      	ldr	r0, [pc, #436]	@ (800afc4 <HAL_ADC_Init+0x2f4>)
 800ae0e:	f7ff feff 	bl	800ac10 <LL_ADC_IsEnabled>
 800ae12:	4603      	mov	r3, r0
 800ae14:	431c      	orrs	r4, r3
 800ae16:	486c      	ldr	r0, [pc, #432]	@ (800afc8 <HAL_ADC_Init+0x2f8>)
 800ae18:	f7ff fefa 	bl	800ac10 <LL_ADC_IsEnabled>
 800ae1c:	4603      	mov	r3, r0
 800ae1e:	4323      	orrs	r3, r4
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	bf0c      	ite	eq
 800ae24:	2301      	moveq	r3, #1
 800ae26:	2300      	movne	r3, #0
 800ae28:	b2db      	uxtb	r3, r3
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d012      	beq.n	800ae54 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ae36:	d004      	beq.n	800ae42 <HAL_ADC_Init+0x172>
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	4a5f      	ldr	r2, [pc, #380]	@ (800afbc <HAL_ADC_Init+0x2ec>)
 800ae3e:	4293      	cmp	r3, r2
 800ae40:	d101      	bne.n	800ae46 <HAL_ADC_Init+0x176>
 800ae42:	4a62      	ldr	r2, [pc, #392]	@ (800afcc <HAL_ADC_Init+0x2fc>)
 800ae44:	e000      	b.n	800ae48 <HAL_ADC_Init+0x178>
 800ae46:	4a62      	ldr	r2, [pc, #392]	@ (800afd0 <HAL_ADC_Init+0x300>)
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	685b      	ldr	r3, [r3, #4]
 800ae4c:	4619      	mov	r1, r3
 800ae4e:	4610      	mov	r0, r2
 800ae50:	f7ff fcfa 	bl	800a848 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	7f5b      	ldrb	r3, [r3, #29]
 800ae58:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800ae5e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800ae64:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800ae6a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800ae72:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800ae74:	4313      	orrs	r3, r2
 800ae76:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800ae7e:	2b01      	cmp	r3, #1
 800ae80:	d106      	bne.n	800ae90 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae86:	3b01      	subs	r3, #1
 800ae88:	045b      	lsls	r3, r3, #17
 800ae8a:	69ba      	ldr	r2, [r7, #24]
 800ae8c:	4313      	orrs	r3, r2
 800ae8e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d009      	beq.n	800aeac <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae9c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aea4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800aea6:	69ba      	ldr	r2, [r7, #24]
 800aea8:	4313      	orrs	r3, r2
 800aeaa:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	68da      	ldr	r2, [r3, #12]
 800aeb2:	4b48      	ldr	r3, [pc, #288]	@ (800afd4 <HAL_ADC_Init+0x304>)
 800aeb4:	4013      	ands	r3, r2
 800aeb6:	687a      	ldr	r2, [r7, #4]
 800aeb8:	6812      	ldr	r2, [r2, #0]
 800aeba:	69b9      	ldr	r1, [r7, #24]
 800aebc:	430b      	orrs	r3, r1
 800aebe:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	691b      	ldr	r3, [r3, #16]
 800aec6:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	430a      	orrs	r2, r1
 800aed4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	4618      	mov	r0, r3
 800aedc:	f7ff fee5 	bl	800acaa <LL_ADC_INJ_IsConversionOngoing>
 800aee0:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800aee2:	697b      	ldr	r3, [r7, #20]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d17f      	bne.n	800afe8 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800aee8:	693b      	ldr	r3, [r7, #16]
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d17c      	bne.n	800afe8 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800aef2:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800aefa:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800aefc:	4313      	orrs	r3, r2
 800aefe:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	68db      	ldr	r3, [r3, #12]
 800af06:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800af0a:	f023 0302 	bic.w	r3, r3, #2
 800af0e:	687a      	ldr	r2, [r7, #4]
 800af10:	6812      	ldr	r2, [r2, #0]
 800af12:	69b9      	ldr	r1, [r7, #24]
 800af14:	430b      	orrs	r3, r1
 800af16:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	691b      	ldr	r3, [r3, #16]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d017      	beq.n	800af50 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	691a      	ldr	r2, [r3, #16]
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800af2e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800af38:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800af3c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800af40:	687a      	ldr	r2, [r7, #4]
 800af42:	6911      	ldr	r1, [r2, #16]
 800af44:	687a      	ldr	r2, [r7, #4]
 800af46:	6812      	ldr	r2, [r2, #0]
 800af48:	430b      	orrs	r3, r1
 800af4a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800af4e:	e013      	b.n	800af78 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	691a      	ldr	r2, [r3, #16]
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800af5e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800af68:	687a      	ldr	r2, [r7, #4]
 800af6a:	6812      	ldr	r2, [r2, #0]
 800af6c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800af70:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800af74:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800af7e:	2b01      	cmp	r3, #1
 800af80:	d12a      	bne.n	800afd8 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	691b      	ldr	r3, [r3, #16]
 800af88:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800af8c:	f023 0304 	bic.w	r3, r3, #4
 800af90:	687a      	ldr	r2, [r7, #4]
 800af92:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 800af94:	687a      	ldr	r2, [r7, #4]
 800af96:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800af98:	4311      	orrs	r1, r2
 800af9a:	687a      	ldr	r2, [r7, #4]
 800af9c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800af9e:	4311      	orrs	r1, r2
 800afa0:	687a      	ldr	r2, [r7, #4]
 800afa2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800afa4:	430a      	orrs	r2, r1
 800afa6:	431a      	orrs	r2, r3
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	f042 0201 	orr.w	r2, r2, #1
 800afb0:	611a      	str	r2, [r3, #16]
 800afb2:	e019      	b.n	800afe8 <HAL_ADC_Init+0x318>
 800afb4:	20000338 	.word	0x20000338
 800afb8:	053e2d63 	.word	0x053e2d63
 800afbc:	50000100 	.word	0x50000100
 800afc0:	50000400 	.word	0x50000400
 800afc4:	50000500 	.word	0x50000500
 800afc8:	50000600 	.word	0x50000600
 800afcc:	50000300 	.word	0x50000300
 800afd0:	50000700 	.word	0x50000700
 800afd4:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	691a      	ldr	r2, [r3, #16]
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	f022 0201 	bic.w	r2, r2, #1
 800afe6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	695b      	ldr	r3, [r3, #20]
 800afec:	2b01      	cmp	r3, #1
 800afee:	d10c      	bne.n	800b00a <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aff6:	f023 010f 	bic.w	r1, r3, #15
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	6a1b      	ldr	r3, [r3, #32]
 800affe:	1e5a      	subs	r2, r3, #1
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	430a      	orrs	r2, r1
 800b006:	631a      	str	r2, [r3, #48]	@ 0x30
 800b008:	e007      	b.n	800b01a <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	f022 020f 	bic.w	r2, r2, #15
 800b018:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b01e:	f023 0303 	bic.w	r3, r3, #3
 800b022:	f043 0201 	orr.w	r2, r3, #1
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	65da      	str	r2, [r3, #92]	@ 0x5c
 800b02a:	e007      	b.n	800b03c <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b030:	f043 0210 	orr.w	r2, r3, #16
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800b038:	2301      	movs	r3, #1
 800b03a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800b03c:	7ffb      	ldrb	r3, [r7, #31]
}
 800b03e:	4618      	mov	r0, r3
 800b040:	3724      	adds	r7, #36	@ 0x24
 800b042:	46bd      	mov	sp, r7
 800b044:	bd90      	pop	{r4, r7, pc}
 800b046:	bf00      	nop

0800b048 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800b048:	b580      	push	{r7, lr}
 800b04a:	b086      	sub	sp, #24
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	60f8      	str	r0, [r7, #12]
 800b050:	60b9      	str	r1, [r7, #8]
 800b052:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b05c:	d004      	beq.n	800b068 <HAL_ADC_Start_DMA+0x20>
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	4a5a      	ldr	r2, [pc, #360]	@ (800b1cc <HAL_ADC_Start_DMA+0x184>)
 800b064:	4293      	cmp	r3, r2
 800b066:	d101      	bne.n	800b06c <HAL_ADC_Start_DMA+0x24>
 800b068:	4b59      	ldr	r3, [pc, #356]	@ (800b1d0 <HAL_ADC_Start_DMA+0x188>)
 800b06a:	e000      	b.n	800b06e <HAL_ADC_Start_DMA+0x26>
 800b06c:	4b59      	ldr	r3, [pc, #356]	@ (800b1d4 <HAL_ADC_Start_DMA+0x18c>)
 800b06e:	4618      	mov	r0, r3
 800b070:	f7ff fd4a 	bl	800ab08 <LL_ADC_GetMultimode>
 800b074:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	4618      	mov	r0, r3
 800b07c:	f7ff fe02 	bl	800ac84 <LL_ADC_REG_IsConversionOngoing>
 800b080:	4603      	mov	r3, r0
 800b082:	2b00      	cmp	r3, #0
 800b084:	f040 809b 	bne.w	800b1be <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800b08e:	2b01      	cmp	r3, #1
 800b090:	d101      	bne.n	800b096 <HAL_ADC_Start_DMA+0x4e>
 800b092:	2302      	movs	r3, #2
 800b094:	e096      	b.n	800b1c4 <HAL_ADC_Start_DMA+0x17c>
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	2201      	movs	r2, #1
 800b09a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	4a4d      	ldr	r2, [pc, #308]	@ (800b1d8 <HAL_ADC_Start_DMA+0x190>)
 800b0a4:	4293      	cmp	r3, r2
 800b0a6:	d008      	beq.n	800b0ba <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800b0a8:	693b      	ldr	r3, [r7, #16]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d005      	beq.n	800b0ba <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800b0ae:	693b      	ldr	r3, [r7, #16]
 800b0b0:	2b05      	cmp	r3, #5
 800b0b2:	d002      	beq.n	800b0ba <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800b0b4:	693b      	ldr	r3, [r7, #16]
 800b0b6:	2b09      	cmp	r3, #9
 800b0b8:	d17a      	bne.n	800b1b0 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800b0ba:	68f8      	ldr	r0, [r7, #12]
 800b0bc:	f000 fcf6 	bl	800baac <ADC_Enable>
 800b0c0:	4603      	mov	r3, r0
 800b0c2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800b0c4:	7dfb      	ldrb	r3, [r7, #23]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d16d      	bne.n	800b1a6 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b0ce:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800b0d2:	f023 0301 	bic.w	r3, r3, #1
 800b0d6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	4a3a      	ldr	r2, [pc, #232]	@ (800b1cc <HAL_ADC_Start_DMA+0x184>)
 800b0e4:	4293      	cmp	r3, r2
 800b0e6:	d009      	beq.n	800b0fc <HAL_ADC_Start_DMA+0xb4>
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	4a3b      	ldr	r2, [pc, #236]	@ (800b1dc <HAL_ADC_Start_DMA+0x194>)
 800b0ee:	4293      	cmp	r3, r2
 800b0f0:	d002      	beq.n	800b0f8 <HAL_ADC_Start_DMA+0xb0>
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	e003      	b.n	800b100 <HAL_ADC_Start_DMA+0xb8>
 800b0f8:	4b39      	ldr	r3, [pc, #228]	@ (800b1e0 <HAL_ADC_Start_DMA+0x198>)
 800b0fa:	e001      	b.n	800b100 <HAL_ADC_Start_DMA+0xb8>
 800b0fc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800b100:	68fa      	ldr	r2, [r7, #12]
 800b102:	6812      	ldr	r2, [r2, #0]
 800b104:	4293      	cmp	r3, r2
 800b106:	d002      	beq.n	800b10e <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800b108:	693b      	ldr	r3, [r7, #16]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d105      	bne.n	800b11a <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b112:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b11e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b122:	2b00      	cmp	r3, #0
 800b124:	d006      	beq.n	800b134 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b12a:	f023 0206 	bic.w	r2, r3, #6
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	661a      	str	r2, [r3, #96]	@ 0x60
 800b132:	e002      	b.n	800b13a <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	2200      	movs	r2, #0
 800b138:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b13e:	4a29      	ldr	r2, [pc, #164]	@ (800b1e4 <HAL_ADC_Start_DMA+0x19c>)
 800b140:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b146:	4a28      	ldr	r2, [pc, #160]	@ (800b1e8 <HAL_ADC_Start_DMA+0x1a0>)
 800b148:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b14e:	4a27      	ldr	r2, [pc, #156]	@ (800b1ec <HAL_ADC_Start_DMA+0x1a4>)
 800b150:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	221c      	movs	r2, #28
 800b158:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	2200      	movs	r2, #0
 800b15e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	685a      	ldr	r2, [r3, #4]
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	f042 0210 	orr.w	r2, r2, #16
 800b170:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	68da      	ldr	r2, [r3, #12]
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	f042 0201 	orr.w	r2, r2, #1
 800b180:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	3340      	adds	r3, #64	@ 0x40
 800b18c:	4619      	mov	r1, r3
 800b18e:	68ba      	ldr	r2, [r7, #8]
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	f001 f989 	bl	800c4a8 <HAL_DMA_Start_IT>
 800b196:	4603      	mov	r3, r0
 800b198:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	4618      	mov	r0, r3
 800b1a0:	f7ff fd5c 	bl	800ac5c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800b1a4:	e00d      	b.n	800b1c2 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	2200      	movs	r2, #0
 800b1aa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 800b1ae:	e008      	b.n	800b1c2 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800b1b0:	2301      	movs	r3, #1
 800b1b2:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	2200      	movs	r2, #0
 800b1b8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 800b1bc:	e001      	b.n	800b1c2 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800b1be:	2302      	movs	r3, #2
 800b1c0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800b1c2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	3718      	adds	r7, #24
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	bd80      	pop	{r7, pc}
 800b1cc:	50000100 	.word	0x50000100
 800b1d0:	50000300 	.word	0x50000300
 800b1d4:	50000700 	.word	0x50000700
 800b1d8:	50000600 	.word	0x50000600
 800b1dc:	50000500 	.word	0x50000500
 800b1e0:	50000400 	.word	0x50000400
 800b1e4:	0800bc97 	.word	0x0800bc97
 800b1e8:	0800bd6f 	.word	0x0800bd6f
 800b1ec:	0800bd8b 	.word	0x0800bd8b

0800b1f0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800b1f0:	b480      	push	{r7}
 800b1f2:	b083      	sub	sp, #12
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800b1f8:	bf00      	nop
 800b1fa:	370c      	adds	r7, #12
 800b1fc:	46bd      	mov	sp, r7
 800b1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b202:	4770      	bx	lr

0800b204 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800b204:	b480      	push	{r7}
 800b206:	b083      	sub	sp, #12
 800b208:	af00      	add	r7, sp, #0
 800b20a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800b20c:	bf00      	nop
 800b20e:	370c      	adds	r7, #12
 800b210:	46bd      	mov	sp, r7
 800b212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b216:	4770      	bx	lr

0800b218 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800b218:	b480      	push	{r7}
 800b21a:	b083      	sub	sp, #12
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800b220:	bf00      	nop
 800b222:	370c      	adds	r7, #12
 800b224:	46bd      	mov	sp, r7
 800b226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22a:	4770      	bx	lr

0800b22c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800b22c:	b580      	push	{r7, lr}
 800b22e:	b0b6      	sub	sp, #216	@ 0xd8
 800b230:	af00      	add	r7, sp, #0
 800b232:	6078      	str	r0, [r7, #4]
 800b234:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800b236:	2300      	movs	r3, #0
 800b238:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800b23c:	2300      	movs	r3, #0
 800b23e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800b246:	2b01      	cmp	r3, #1
 800b248:	d102      	bne.n	800b250 <HAL_ADC_ConfigChannel+0x24>
 800b24a:	2302      	movs	r3, #2
 800b24c:	f000 bc13 	b.w	800ba76 <HAL_ADC_ConfigChannel+0x84a>
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	2201      	movs	r2, #1
 800b254:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	4618      	mov	r0, r3
 800b25e:	f7ff fd11 	bl	800ac84 <LL_ADC_REG_IsConversionOngoing>
 800b262:	4603      	mov	r3, r0
 800b264:	2b00      	cmp	r3, #0
 800b266:	f040 83f3 	bne.w	800ba50 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	6818      	ldr	r0, [r3, #0]
 800b26e:	683b      	ldr	r3, [r7, #0]
 800b270:	6859      	ldr	r1, [r3, #4]
 800b272:	683b      	ldr	r3, [r7, #0]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	461a      	mov	r2, r3
 800b278:	f7ff fbcb 	bl	800aa12 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	4618      	mov	r0, r3
 800b282:	f7ff fcff 	bl	800ac84 <LL_ADC_REG_IsConversionOngoing>
 800b286:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	4618      	mov	r0, r3
 800b290:	f7ff fd0b 	bl	800acaa <LL_ADC_INJ_IsConversionOngoing>
 800b294:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800b298:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	f040 81d9 	bne.w	800b654 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800b2a2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	f040 81d4 	bne.w	800b654 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800b2ac:	683b      	ldr	r3, [r7, #0]
 800b2ae:	689b      	ldr	r3, [r3, #8]
 800b2b0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b2b4:	d10f      	bne.n	800b2d6 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	6818      	ldr	r0, [r3, #0]
 800b2ba:	683b      	ldr	r3, [r7, #0]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	2200      	movs	r2, #0
 800b2c0:	4619      	mov	r1, r3
 800b2c2:	f7ff fbd2 	bl	800aa6a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	f7ff fb79 	bl	800a9c6 <LL_ADC_SetSamplingTimeCommonConfig>
 800b2d4:	e00e      	b.n	800b2f4 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	6818      	ldr	r0, [r3, #0]
 800b2da:	683b      	ldr	r3, [r7, #0]
 800b2dc:	6819      	ldr	r1, [r3, #0]
 800b2de:	683b      	ldr	r3, [r7, #0]
 800b2e0:	689b      	ldr	r3, [r3, #8]
 800b2e2:	461a      	mov	r2, r3
 800b2e4:	f7ff fbc1 	bl	800aa6a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	2100      	movs	r1, #0
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	f7ff fb69 	bl	800a9c6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800b2f4:	683b      	ldr	r3, [r7, #0]
 800b2f6:	695a      	ldr	r2, [r3, #20]
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	68db      	ldr	r3, [r3, #12]
 800b2fe:	08db      	lsrs	r3, r3, #3
 800b300:	f003 0303 	and.w	r3, r3, #3
 800b304:	005b      	lsls	r3, r3, #1
 800b306:	fa02 f303 	lsl.w	r3, r2, r3
 800b30a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800b30e:	683b      	ldr	r3, [r7, #0]
 800b310:	691b      	ldr	r3, [r3, #16]
 800b312:	2b04      	cmp	r3, #4
 800b314:	d022      	beq.n	800b35c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	6818      	ldr	r0, [r3, #0]
 800b31a:	683b      	ldr	r3, [r7, #0]
 800b31c:	6919      	ldr	r1, [r3, #16]
 800b31e:	683b      	ldr	r3, [r7, #0]
 800b320:	681a      	ldr	r2, [r3, #0]
 800b322:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b326:	f7ff fac3 	bl	800a8b0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	6818      	ldr	r0, [r3, #0]
 800b32e:	683b      	ldr	r3, [r7, #0]
 800b330:	6919      	ldr	r1, [r3, #16]
 800b332:	683b      	ldr	r3, [r7, #0]
 800b334:	699b      	ldr	r3, [r3, #24]
 800b336:	461a      	mov	r2, r3
 800b338:	f7ff fb0f 	bl	800a95a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	6818      	ldr	r0, [r3, #0]
 800b340:	683b      	ldr	r3, [r7, #0]
 800b342:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800b344:	683b      	ldr	r3, [r7, #0]
 800b346:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800b348:	2b01      	cmp	r3, #1
 800b34a:	d102      	bne.n	800b352 <HAL_ADC_ConfigChannel+0x126>
 800b34c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800b350:	e000      	b.n	800b354 <HAL_ADC_ConfigChannel+0x128>
 800b352:	2300      	movs	r3, #0
 800b354:	461a      	mov	r2, r3
 800b356:	f7ff fb1b 	bl	800a990 <LL_ADC_SetOffsetSaturation>
 800b35a:	e17b      	b.n	800b654 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	2100      	movs	r1, #0
 800b362:	4618      	mov	r0, r3
 800b364:	f7ff fac8 	bl	800a8f8 <LL_ADC_GetOffsetChannel>
 800b368:	4603      	mov	r3, r0
 800b36a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d10a      	bne.n	800b388 <HAL_ADC_ConfigChannel+0x15c>
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	2100      	movs	r1, #0
 800b378:	4618      	mov	r0, r3
 800b37a:	f7ff fabd 	bl	800a8f8 <LL_ADC_GetOffsetChannel>
 800b37e:	4603      	mov	r3, r0
 800b380:	0e9b      	lsrs	r3, r3, #26
 800b382:	f003 021f 	and.w	r2, r3, #31
 800b386:	e01e      	b.n	800b3c6 <HAL_ADC_ConfigChannel+0x19a>
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	2100      	movs	r1, #0
 800b38e:	4618      	mov	r0, r3
 800b390:	f7ff fab2 	bl	800a8f8 <LL_ADC_GetOffsetChannel>
 800b394:	4603      	mov	r3, r0
 800b396:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b39a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800b39e:	fa93 f3a3 	rbit	r3, r3
 800b3a2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800b3a6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b3aa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800b3ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d101      	bne.n	800b3ba <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800b3b6:	2320      	movs	r3, #32
 800b3b8:	e004      	b.n	800b3c4 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800b3ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b3be:	fab3 f383 	clz	r3, r3
 800b3c2:	b2db      	uxtb	r3, r3
 800b3c4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800b3c6:	683b      	ldr	r3, [r7, #0]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d105      	bne.n	800b3de <HAL_ADC_ConfigChannel+0x1b2>
 800b3d2:	683b      	ldr	r3, [r7, #0]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	0e9b      	lsrs	r3, r3, #26
 800b3d8:	f003 031f 	and.w	r3, r3, #31
 800b3dc:	e018      	b.n	800b410 <HAL_ADC_ConfigChannel+0x1e4>
 800b3de:	683b      	ldr	r3, [r7, #0]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b3e6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800b3ea:	fa93 f3a3 	rbit	r3, r3
 800b3ee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800b3f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b3f6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800b3fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d101      	bne.n	800b406 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800b402:	2320      	movs	r3, #32
 800b404:	e004      	b.n	800b410 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800b406:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b40a:	fab3 f383 	clz	r3, r3
 800b40e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800b410:	429a      	cmp	r2, r3
 800b412:	d106      	bne.n	800b422 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	2200      	movs	r2, #0
 800b41a:	2100      	movs	r1, #0
 800b41c:	4618      	mov	r0, r3
 800b41e:	f7ff fa81 	bl	800a924 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	2101      	movs	r1, #1
 800b428:	4618      	mov	r0, r3
 800b42a:	f7ff fa65 	bl	800a8f8 <LL_ADC_GetOffsetChannel>
 800b42e:	4603      	mov	r3, r0
 800b430:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b434:	2b00      	cmp	r3, #0
 800b436:	d10a      	bne.n	800b44e <HAL_ADC_ConfigChannel+0x222>
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	2101      	movs	r1, #1
 800b43e:	4618      	mov	r0, r3
 800b440:	f7ff fa5a 	bl	800a8f8 <LL_ADC_GetOffsetChannel>
 800b444:	4603      	mov	r3, r0
 800b446:	0e9b      	lsrs	r3, r3, #26
 800b448:	f003 021f 	and.w	r2, r3, #31
 800b44c:	e01e      	b.n	800b48c <HAL_ADC_ConfigChannel+0x260>
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	2101      	movs	r1, #1
 800b454:	4618      	mov	r0, r3
 800b456:	f7ff fa4f 	bl	800a8f8 <LL_ADC_GetOffsetChannel>
 800b45a:	4603      	mov	r3, r0
 800b45c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b460:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800b464:	fa93 f3a3 	rbit	r3, r3
 800b468:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800b46c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b470:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800b474:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d101      	bne.n	800b480 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 800b47c:	2320      	movs	r3, #32
 800b47e:	e004      	b.n	800b48a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 800b480:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b484:	fab3 f383 	clz	r3, r3
 800b488:	b2db      	uxtb	r3, r3
 800b48a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800b48c:	683b      	ldr	r3, [r7, #0]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b494:	2b00      	cmp	r3, #0
 800b496:	d105      	bne.n	800b4a4 <HAL_ADC_ConfigChannel+0x278>
 800b498:	683b      	ldr	r3, [r7, #0]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	0e9b      	lsrs	r3, r3, #26
 800b49e:	f003 031f 	and.w	r3, r3, #31
 800b4a2:	e018      	b.n	800b4d6 <HAL_ADC_ConfigChannel+0x2aa>
 800b4a4:	683b      	ldr	r3, [r7, #0]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b4ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b4b0:	fa93 f3a3 	rbit	r3, r3
 800b4b4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800b4b8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800b4bc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 800b4c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d101      	bne.n	800b4cc <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 800b4c8:	2320      	movs	r3, #32
 800b4ca:	e004      	b.n	800b4d6 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 800b4cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b4d0:	fab3 f383 	clz	r3, r3
 800b4d4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800b4d6:	429a      	cmp	r2, r3
 800b4d8:	d106      	bne.n	800b4e8 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	2200      	movs	r2, #0
 800b4e0:	2101      	movs	r1, #1
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	f7ff fa1e 	bl	800a924 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	2102      	movs	r1, #2
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	f7ff fa02 	bl	800a8f8 <LL_ADC_GetOffsetChannel>
 800b4f4:	4603      	mov	r3, r0
 800b4f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d10a      	bne.n	800b514 <HAL_ADC_ConfigChannel+0x2e8>
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	2102      	movs	r1, #2
 800b504:	4618      	mov	r0, r3
 800b506:	f7ff f9f7 	bl	800a8f8 <LL_ADC_GetOffsetChannel>
 800b50a:	4603      	mov	r3, r0
 800b50c:	0e9b      	lsrs	r3, r3, #26
 800b50e:	f003 021f 	and.w	r2, r3, #31
 800b512:	e01e      	b.n	800b552 <HAL_ADC_ConfigChannel+0x326>
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	2102      	movs	r1, #2
 800b51a:	4618      	mov	r0, r3
 800b51c:	f7ff f9ec 	bl	800a8f8 <LL_ADC_GetOffsetChannel>
 800b520:	4603      	mov	r3, r0
 800b522:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b526:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b52a:	fa93 f3a3 	rbit	r3, r3
 800b52e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800b532:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b536:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800b53a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d101      	bne.n	800b546 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800b542:	2320      	movs	r3, #32
 800b544:	e004      	b.n	800b550 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800b546:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b54a:	fab3 f383 	clz	r3, r3
 800b54e:	b2db      	uxtb	r3, r3
 800b550:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800b552:	683b      	ldr	r3, [r7, #0]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d105      	bne.n	800b56a <HAL_ADC_ConfigChannel+0x33e>
 800b55e:	683b      	ldr	r3, [r7, #0]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	0e9b      	lsrs	r3, r3, #26
 800b564:	f003 031f 	and.w	r3, r3, #31
 800b568:	e016      	b.n	800b598 <HAL_ADC_ConfigChannel+0x36c>
 800b56a:	683b      	ldr	r3, [r7, #0]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b572:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800b576:	fa93 f3a3 	rbit	r3, r3
 800b57a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800b57c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b57e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800b582:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b586:	2b00      	cmp	r3, #0
 800b588:	d101      	bne.n	800b58e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800b58a:	2320      	movs	r3, #32
 800b58c:	e004      	b.n	800b598 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800b58e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b592:	fab3 f383 	clz	r3, r3
 800b596:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800b598:	429a      	cmp	r2, r3
 800b59a:	d106      	bne.n	800b5aa <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	2200      	movs	r2, #0
 800b5a2:	2102      	movs	r1, #2
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	f7ff f9bd 	bl	800a924 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	2103      	movs	r1, #3
 800b5b0:	4618      	mov	r0, r3
 800b5b2:	f7ff f9a1 	bl	800a8f8 <LL_ADC_GetOffsetChannel>
 800b5b6:	4603      	mov	r3, r0
 800b5b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d10a      	bne.n	800b5d6 <HAL_ADC_ConfigChannel+0x3aa>
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	2103      	movs	r1, #3
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	f7ff f996 	bl	800a8f8 <LL_ADC_GetOffsetChannel>
 800b5cc:	4603      	mov	r3, r0
 800b5ce:	0e9b      	lsrs	r3, r3, #26
 800b5d0:	f003 021f 	and.w	r2, r3, #31
 800b5d4:	e017      	b.n	800b606 <HAL_ADC_ConfigChannel+0x3da>
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	2103      	movs	r1, #3
 800b5dc:	4618      	mov	r0, r3
 800b5de:	f7ff f98b 	bl	800a8f8 <LL_ADC_GetOffsetChannel>
 800b5e2:	4603      	mov	r3, r0
 800b5e4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b5e6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b5e8:	fa93 f3a3 	rbit	r3, r3
 800b5ec:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800b5ee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b5f0:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800b5f2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d101      	bne.n	800b5fc <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 800b5f8:	2320      	movs	r3, #32
 800b5fa:	e003      	b.n	800b604 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 800b5fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b5fe:	fab3 f383 	clz	r3, r3
 800b602:	b2db      	uxtb	r3, r3
 800b604:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800b606:	683b      	ldr	r3, [r7, #0]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d105      	bne.n	800b61e <HAL_ADC_ConfigChannel+0x3f2>
 800b612:	683b      	ldr	r3, [r7, #0]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	0e9b      	lsrs	r3, r3, #26
 800b618:	f003 031f 	and.w	r3, r3, #31
 800b61c:	e011      	b.n	800b642 <HAL_ADC_ConfigChannel+0x416>
 800b61e:	683b      	ldr	r3, [r7, #0]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b624:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b626:	fa93 f3a3 	rbit	r3, r3
 800b62a:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800b62c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b62e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800b630:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b632:	2b00      	cmp	r3, #0
 800b634:	d101      	bne.n	800b63a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800b636:	2320      	movs	r3, #32
 800b638:	e003      	b.n	800b642 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800b63a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b63c:	fab3 f383 	clz	r3, r3
 800b640:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800b642:	429a      	cmp	r2, r3
 800b644:	d106      	bne.n	800b654 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	2200      	movs	r2, #0
 800b64c:	2103      	movs	r1, #3
 800b64e:	4618      	mov	r0, r3
 800b650:	f7ff f968 	bl	800a924 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	4618      	mov	r0, r3
 800b65a:	f7ff fad9 	bl	800ac10 <LL_ADC_IsEnabled>
 800b65e:	4603      	mov	r3, r0
 800b660:	2b00      	cmp	r3, #0
 800b662:	f040 813d 	bne.w	800b8e0 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	6818      	ldr	r0, [r3, #0]
 800b66a:	683b      	ldr	r3, [r7, #0]
 800b66c:	6819      	ldr	r1, [r3, #0]
 800b66e:	683b      	ldr	r3, [r7, #0]
 800b670:	68db      	ldr	r3, [r3, #12]
 800b672:	461a      	mov	r2, r3
 800b674:	f7ff fa24 	bl	800aac0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800b678:	683b      	ldr	r3, [r7, #0]
 800b67a:	68db      	ldr	r3, [r3, #12]
 800b67c:	4aa2      	ldr	r2, [pc, #648]	@ (800b908 <HAL_ADC_ConfigChannel+0x6dc>)
 800b67e:	4293      	cmp	r3, r2
 800b680:	f040 812e 	bne.w	800b8e0 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800b688:	683b      	ldr	r3, [r7, #0]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b690:	2b00      	cmp	r3, #0
 800b692:	d10b      	bne.n	800b6ac <HAL_ADC_ConfigChannel+0x480>
 800b694:	683b      	ldr	r3, [r7, #0]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	0e9b      	lsrs	r3, r3, #26
 800b69a:	3301      	adds	r3, #1
 800b69c:	f003 031f 	and.w	r3, r3, #31
 800b6a0:	2b09      	cmp	r3, #9
 800b6a2:	bf94      	ite	ls
 800b6a4:	2301      	movls	r3, #1
 800b6a6:	2300      	movhi	r3, #0
 800b6a8:	b2db      	uxtb	r3, r3
 800b6aa:	e019      	b.n	800b6e0 <HAL_ADC_ConfigChannel+0x4b4>
 800b6ac:	683b      	ldr	r3, [r7, #0]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b6b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b6b4:	fa93 f3a3 	rbit	r3, r3
 800b6b8:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800b6ba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b6bc:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800b6be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d101      	bne.n	800b6c8 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 800b6c4:	2320      	movs	r3, #32
 800b6c6:	e003      	b.n	800b6d0 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800b6c8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b6ca:	fab3 f383 	clz	r3, r3
 800b6ce:	b2db      	uxtb	r3, r3
 800b6d0:	3301      	adds	r3, #1
 800b6d2:	f003 031f 	and.w	r3, r3, #31
 800b6d6:	2b09      	cmp	r3, #9
 800b6d8:	bf94      	ite	ls
 800b6da:	2301      	movls	r3, #1
 800b6dc:	2300      	movhi	r3, #0
 800b6de:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d079      	beq.n	800b7d8 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800b6e4:	683b      	ldr	r3, [r7, #0]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d107      	bne.n	800b700 <HAL_ADC_ConfigChannel+0x4d4>
 800b6f0:	683b      	ldr	r3, [r7, #0]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	0e9b      	lsrs	r3, r3, #26
 800b6f6:	3301      	adds	r3, #1
 800b6f8:	069b      	lsls	r3, r3, #26
 800b6fa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800b6fe:	e015      	b.n	800b72c <HAL_ADC_ConfigChannel+0x500>
 800b700:	683b      	ldr	r3, [r7, #0]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b706:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b708:	fa93 f3a3 	rbit	r3, r3
 800b70c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800b70e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b710:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800b712:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b714:	2b00      	cmp	r3, #0
 800b716:	d101      	bne.n	800b71c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 800b718:	2320      	movs	r3, #32
 800b71a:	e003      	b.n	800b724 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 800b71c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b71e:	fab3 f383 	clz	r3, r3
 800b722:	b2db      	uxtb	r3, r3
 800b724:	3301      	adds	r3, #1
 800b726:	069b      	lsls	r3, r3, #26
 800b728:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800b72c:	683b      	ldr	r3, [r7, #0]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b734:	2b00      	cmp	r3, #0
 800b736:	d109      	bne.n	800b74c <HAL_ADC_ConfigChannel+0x520>
 800b738:	683b      	ldr	r3, [r7, #0]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	0e9b      	lsrs	r3, r3, #26
 800b73e:	3301      	adds	r3, #1
 800b740:	f003 031f 	and.w	r3, r3, #31
 800b744:	2101      	movs	r1, #1
 800b746:	fa01 f303 	lsl.w	r3, r1, r3
 800b74a:	e017      	b.n	800b77c <HAL_ADC_ConfigChannel+0x550>
 800b74c:	683b      	ldr	r3, [r7, #0]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b752:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b754:	fa93 f3a3 	rbit	r3, r3
 800b758:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800b75a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b75c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800b75e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b760:	2b00      	cmp	r3, #0
 800b762:	d101      	bne.n	800b768 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 800b764:	2320      	movs	r3, #32
 800b766:	e003      	b.n	800b770 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 800b768:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b76a:	fab3 f383 	clz	r3, r3
 800b76e:	b2db      	uxtb	r3, r3
 800b770:	3301      	adds	r3, #1
 800b772:	f003 031f 	and.w	r3, r3, #31
 800b776:	2101      	movs	r1, #1
 800b778:	fa01 f303 	lsl.w	r3, r1, r3
 800b77c:	ea42 0103 	orr.w	r1, r2, r3
 800b780:	683b      	ldr	r3, [r7, #0]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d10a      	bne.n	800b7a2 <HAL_ADC_ConfigChannel+0x576>
 800b78c:	683b      	ldr	r3, [r7, #0]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	0e9b      	lsrs	r3, r3, #26
 800b792:	3301      	adds	r3, #1
 800b794:	f003 021f 	and.w	r2, r3, #31
 800b798:	4613      	mov	r3, r2
 800b79a:	005b      	lsls	r3, r3, #1
 800b79c:	4413      	add	r3, r2
 800b79e:	051b      	lsls	r3, r3, #20
 800b7a0:	e018      	b.n	800b7d4 <HAL_ADC_ConfigChannel+0x5a8>
 800b7a2:	683b      	ldr	r3, [r7, #0]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b7a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7aa:	fa93 f3a3 	rbit	r3, r3
 800b7ae:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800b7b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b7b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800b7b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d101      	bne.n	800b7be <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800b7ba:	2320      	movs	r3, #32
 800b7bc:	e003      	b.n	800b7c6 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800b7be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b7c0:	fab3 f383 	clz	r3, r3
 800b7c4:	b2db      	uxtb	r3, r3
 800b7c6:	3301      	adds	r3, #1
 800b7c8:	f003 021f 	and.w	r2, r3, #31
 800b7cc:	4613      	mov	r3, r2
 800b7ce:	005b      	lsls	r3, r3, #1
 800b7d0:	4413      	add	r3, r2
 800b7d2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800b7d4:	430b      	orrs	r3, r1
 800b7d6:	e07e      	b.n	800b8d6 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800b7d8:	683b      	ldr	r3, [r7, #0]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d107      	bne.n	800b7f4 <HAL_ADC_ConfigChannel+0x5c8>
 800b7e4:	683b      	ldr	r3, [r7, #0]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	0e9b      	lsrs	r3, r3, #26
 800b7ea:	3301      	adds	r3, #1
 800b7ec:	069b      	lsls	r3, r3, #26
 800b7ee:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800b7f2:	e015      	b.n	800b820 <HAL_ADC_ConfigChannel+0x5f4>
 800b7f4:	683b      	ldr	r3, [r7, #0]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b7fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7fc:	fa93 f3a3 	rbit	r3, r3
 800b800:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800b802:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b804:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800b806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d101      	bne.n	800b810 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 800b80c:	2320      	movs	r3, #32
 800b80e:	e003      	b.n	800b818 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 800b810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b812:	fab3 f383 	clz	r3, r3
 800b816:	b2db      	uxtb	r3, r3
 800b818:	3301      	adds	r3, #1
 800b81a:	069b      	lsls	r3, r3, #26
 800b81c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800b820:	683b      	ldr	r3, [r7, #0]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d109      	bne.n	800b840 <HAL_ADC_ConfigChannel+0x614>
 800b82c:	683b      	ldr	r3, [r7, #0]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	0e9b      	lsrs	r3, r3, #26
 800b832:	3301      	adds	r3, #1
 800b834:	f003 031f 	and.w	r3, r3, #31
 800b838:	2101      	movs	r1, #1
 800b83a:	fa01 f303 	lsl.w	r3, r1, r3
 800b83e:	e017      	b.n	800b870 <HAL_ADC_ConfigChannel+0x644>
 800b840:	683b      	ldr	r3, [r7, #0]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b846:	6a3b      	ldr	r3, [r7, #32]
 800b848:	fa93 f3a3 	rbit	r3, r3
 800b84c:	61fb      	str	r3, [r7, #28]
  return result;
 800b84e:	69fb      	ldr	r3, [r7, #28]
 800b850:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800b852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b854:	2b00      	cmp	r3, #0
 800b856:	d101      	bne.n	800b85c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 800b858:	2320      	movs	r3, #32
 800b85a:	e003      	b.n	800b864 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 800b85c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b85e:	fab3 f383 	clz	r3, r3
 800b862:	b2db      	uxtb	r3, r3
 800b864:	3301      	adds	r3, #1
 800b866:	f003 031f 	and.w	r3, r3, #31
 800b86a:	2101      	movs	r1, #1
 800b86c:	fa01 f303 	lsl.w	r3, r1, r3
 800b870:	ea42 0103 	orr.w	r1, r2, r3
 800b874:	683b      	ldr	r3, [r7, #0]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d10d      	bne.n	800b89c <HAL_ADC_ConfigChannel+0x670>
 800b880:	683b      	ldr	r3, [r7, #0]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	0e9b      	lsrs	r3, r3, #26
 800b886:	3301      	adds	r3, #1
 800b888:	f003 021f 	and.w	r2, r3, #31
 800b88c:	4613      	mov	r3, r2
 800b88e:	005b      	lsls	r3, r3, #1
 800b890:	4413      	add	r3, r2
 800b892:	3b1e      	subs	r3, #30
 800b894:	051b      	lsls	r3, r3, #20
 800b896:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800b89a:	e01b      	b.n	800b8d4 <HAL_ADC_ConfigChannel+0x6a8>
 800b89c:	683b      	ldr	r3, [r7, #0]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b8a2:	697b      	ldr	r3, [r7, #20]
 800b8a4:	fa93 f3a3 	rbit	r3, r3
 800b8a8:	613b      	str	r3, [r7, #16]
  return result;
 800b8aa:	693b      	ldr	r3, [r7, #16]
 800b8ac:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800b8ae:	69bb      	ldr	r3, [r7, #24]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d101      	bne.n	800b8b8 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 800b8b4:	2320      	movs	r3, #32
 800b8b6:	e003      	b.n	800b8c0 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 800b8b8:	69bb      	ldr	r3, [r7, #24]
 800b8ba:	fab3 f383 	clz	r3, r3
 800b8be:	b2db      	uxtb	r3, r3
 800b8c0:	3301      	adds	r3, #1
 800b8c2:	f003 021f 	and.w	r2, r3, #31
 800b8c6:	4613      	mov	r3, r2
 800b8c8:	005b      	lsls	r3, r3, #1
 800b8ca:	4413      	add	r3, r2
 800b8cc:	3b1e      	subs	r3, #30
 800b8ce:	051b      	lsls	r3, r3, #20
 800b8d0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800b8d4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800b8d6:	683a      	ldr	r2, [r7, #0]
 800b8d8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800b8da:	4619      	mov	r1, r3
 800b8dc:	f7ff f8c5 	bl	800aa6a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800b8e0:	683b      	ldr	r3, [r7, #0]
 800b8e2:	681a      	ldr	r2, [r3, #0]
 800b8e4:	4b09      	ldr	r3, [pc, #36]	@ (800b90c <HAL_ADC_ConfigChannel+0x6e0>)
 800b8e6:	4013      	ands	r3, r2
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	f000 80be 	beq.w	800ba6a <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b8f6:	d004      	beq.n	800b902 <HAL_ADC_ConfigChannel+0x6d6>
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	4a04      	ldr	r2, [pc, #16]	@ (800b910 <HAL_ADC_ConfigChannel+0x6e4>)
 800b8fe:	4293      	cmp	r3, r2
 800b900:	d10a      	bne.n	800b918 <HAL_ADC_ConfigChannel+0x6ec>
 800b902:	4b04      	ldr	r3, [pc, #16]	@ (800b914 <HAL_ADC_ConfigChannel+0x6e8>)
 800b904:	e009      	b.n	800b91a <HAL_ADC_ConfigChannel+0x6ee>
 800b906:	bf00      	nop
 800b908:	407f0000 	.word	0x407f0000
 800b90c:	80080000 	.word	0x80080000
 800b910:	50000100 	.word	0x50000100
 800b914:	50000300 	.word	0x50000300
 800b918:	4b59      	ldr	r3, [pc, #356]	@ (800ba80 <HAL_ADC_ConfigChannel+0x854>)
 800b91a:	4618      	mov	r0, r3
 800b91c:	f7fe ffba 	bl	800a894 <LL_ADC_GetCommonPathInternalCh>
 800b920:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800b924:	683b      	ldr	r3, [r7, #0]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	4a56      	ldr	r2, [pc, #344]	@ (800ba84 <HAL_ADC_ConfigChannel+0x858>)
 800b92a:	4293      	cmp	r3, r2
 800b92c:	d004      	beq.n	800b938 <HAL_ADC_ConfigChannel+0x70c>
 800b92e:	683b      	ldr	r3, [r7, #0]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	4a55      	ldr	r2, [pc, #340]	@ (800ba88 <HAL_ADC_ConfigChannel+0x85c>)
 800b934:	4293      	cmp	r3, r2
 800b936:	d13a      	bne.n	800b9ae <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800b938:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800b93c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b940:	2b00      	cmp	r3, #0
 800b942:	d134      	bne.n	800b9ae <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b94c:	d005      	beq.n	800b95a <HAL_ADC_ConfigChannel+0x72e>
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	4a4e      	ldr	r2, [pc, #312]	@ (800ba8c <HAL_ADC_ConfigChannel+0x860>)
 800b954:	4293      	cmp	r3, r2
 800b956:	f040 8085 	bne.w	800ba64 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b962:	d004      	beq.n	800b96e <HAL_ADC_ConfigChannel+0x742>
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	4a49      	ldr	r2, [pc, #292]	@ (800ba90 <HAL_ADC_ConfigChannel+0x864>)
 800b96a:	4293      	cmp	r3, r2
 800b96c:	d101      	bne.n	800b972 <HAL_ADC_ConfigChannel+0x746>
 800b96e:	4a49      	ldr	r2, [pc, #292]	@ (800ba94 <HAL_ADC_ConfigChannel+0x868>)
 800b970:	e000      	b.n	800b974 <HAL_ADC_ConfigChannel+0x748>
 800b972:	4a43      	ldr	r2, [pc, #268]	@ (800ba80 <HAL_ADC_ConfigChannel+0x854>)
 800b974:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800b978:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b97c:	4619      	mov	r1, r3
 800b97e:	4610      	mov	r0, r2
 800b980:	f7fe ff75 	bl	800a86e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800b984:	4b44      	ldr	r3, [pc, #272]	@ (800ba98 <HAL_ADC_ConfigChannel+0x86c>)
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	099b      	lsrs	r3, r3, #6
 800b98a:	4a44      	ldr	r2, [pc, #272]	@ (800ba9c <HAL_ADC_ConfigChannel+0x870>)
 800b98c:	fba2 2303 	umull	r2, r3, r2, r3
 800b990:	099b      	lsrs	r3, r3, #6
 800b992:	1c5a      	adds	r2, r3, #1
 800b994:	4613      	mov	r3, r2
 800b996:	005b      	lsls	r3, r3, #1
 800b998:	4413      	add	r3, r2
 800b99a:	009b      	lsls	r3, r3, #2
 800b99c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800b99e:	e002      	b.n	800b9a6 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	3b01      	subs	r3, #1
 800b9a4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d1f9      	bne.n	800b9a0 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800b9ac:	e05a      	b.n	800ba64 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800b9ae:	683b      	ldr	r3, [r7, #0]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	4a3b      	ldr	r2, [pc, #236]	@ (800baa0 <HAL_ADC_ConfigChannel+0x874>)
 800b9b4:	4293      	cmp	r3, r2
 800b9b6:	d125      	bne.n	800ba04 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800b9b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800b9bc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d11f      	bne.n	800ba04 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	4a31      	ldr	r2, [pc, #196]	@ (800ba90 <HAL_ADC_ConfigChannel+0x864>)
 800b9ca:	4293      	cmp	r3, r2
 800b9cc:	d104      	bne.n	800b9d8 <HAL_ADC_ConfigChannel+0x7ac>
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	4a34      	ldr	r2, [pc, #208]	@ (800baa4 <HAL_ADC_ConfigChannel+0x878>)
 800b9d4:	4293      	cmp	r3, r2
 800b9d6:	d047      	beq.n	800ba68 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b9e0:	d004      	beq.n	800b9ec <HAL_ADC_ConfigChannel+0x7c0>
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	4a2a      	ldr	r2, [pc, #168]	@ (800ba90 <HAL_ADC_ConfigChannel+0x864>)
 800b9e8:	4293      	cmp	r3, r2
 800b9ea:	d101      	bne.n	800b9f0 <HAL_ADC_ConfigChannel+0x7c4>
 800b9ec:	4a29      	ldr	r2, [pc, #164]	@ (800ba94 <HAL_ADC_ConfigChannel+0x868>)
 800b9ee:	e000      	b.n	800b9f2 <HAL_ADC_ConfigChannel+0x7c6>
 800b9f0:	4a23      	ldr	r2, [pc, #140]	@ (800ba80 <HAL_ADC_ConfigChannel+0x854>)
 800b9f2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800b9f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b9fa:	4619      	mov	r1, r3
 800b9fc:	4610      	mov	r0, r2
 800b9fe:	f7fe ff36 	bl	800a86e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800ba02:	e031      	b.n	800ba68 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800ba04:	683b      	ldr	r3, [r7, #0]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	4a27      	ldr	r2, [pc, #156]	@ (800baa8 <HAL_ADC_ConfigChannel+0x87c>)
 800ba0a:	4293      	cmp	r3, r2
 800ba0c:	d12d      	bne.n	800ba6a <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800ba0e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ba12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d127      	bne.n	800ba6a <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	4a1c      	ldr	r2, [pc, #112]	@ (800ba90 <HAL_ADC_ConfigChannel+0x864>)
 800ba20:	4293      	cmp	r3, r2
 800ba22:	d022      	beq.n	800ba6a <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ba2c:	d004      	beq.n	800ba38 <HAL_ADC_ConfigChannel+0x80c>
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	4a17      	ldr	r2, [pc, #92]	@ (800ba90 <HAL_ADC_ConfigChannel+0x864>)
 800ba34:	4293      	cmp	r3, r2
 800ba36:	d101      	bne.n	800ba3c <HAL_ADC_ConfigChannel+0x810>
 800ba38:	4a16      	ldr	r2, [pc, #88]	@ (800ba94 <HAL_ADC_ConfigChannel+0x868>)
 800ba3a:	e000      	b.n	800ba3e <HAL_ADC_ConfigChannel+0x812>
 800ba3c:	4a10      	ldr	r2, [pc, #64]	@ (800ba80 <HAL_ADC_ConfigChannel+0x854>)
 800ba3e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ba42:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800ba46:	4619      	mov	r1, r3
 800ba48:	4610      	mov	r0, r2
 800ba4a:	f7fe ff10 	bl	800a86e <LL_ADC_SetCommonPathInternalCh>
 800ba4e:	e00c      	b.n	800ba6a <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ba54:	f043 0220 	orr.w	r2, r3, #32
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800ba5c:	2301      	movs	r3, #1
 800ba5e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800ba62:	e002      	b.n	800ba6a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800ba64:	bf00      	nop
 800ba66:	e000      	b.n	800ba6a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800ba68:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	2200      	movs	r2, #0
 800ba6e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800ba72:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800ba76:	4618      	mov	r0, r3
 800ba78:	37d8      	adds	r7, #216	@ 0xd8
 800ba7a:	46bd      	mov	sp, r7
 800ba7c:	bd80      	pop	{r7, pc}
 800ba7e:	bf00      	nop
 800ba80:	50000700 	.word	0x50000700
 800ba84:	c3210000 	.word	0xc3210000
 800ba88:	90c00010 	.word	0x90c00010
 800ba8c:	50000600 	.word	0x50000600
 800ba90:	50000100 	.word	0x50000100
 800ba94:	50000300 	.word	0x50000300
 800ba98:	20000338 	.word	0x20000338
 800ba9c:	053e2d63 	.word	0x053e2d63
 800baa0:	c7520000 	.word	0xc7520000
 800baa4:	50000500 	.word	0x50000500
 800baa8:	cb840000 	.word	0xcb840000

0800baac <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800baac:	b580      	push	{r7, lr}
 800baae:	b084      	sub	sp, #16
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800bab4:	2300      	movs	r3, #0
 800bab6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	4618      	mov	r0, r3
 800babe:	f7ff f8a7 	bl	800ac10 <LL_ADC_IsEnabled>
 800bac2:	4603      	mov	r3, r0
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d176      	bne.n	800bbb6 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	689a      	ldr	r2, [r3, #8]
 800bace:	4b3c      	ldr	r3, [pc, #240]	@ (800bbc0 <ADC_Enable+0x114>)
 800bad0:	4013      	ands	r3, r2
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d00d      	beq.n	800baf2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bada:	f043 0210 	orr.w	r2, r3, #16
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bae6:	f043 0201 	orr.w	r2, r3, #1
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800baee:	2301      	movs	r3, #1
 800baf0:	e062      	b.n	800bbb8 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	4618      	mov	r0, r3
 800baf8:	f7ff f862 	bl	800abc0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bb04:	d004      	beq.n	800bb10 <ADC_Enable+0x64>
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	4a2e      	ldr	r2, [pc, #184]	@ (800bbc4 <ADC_Enable+0x118>)
 800bb0c:	4293      	cmp	r3, r2
 800bb0e:	d101      	bne.n	800bb14 <ADC_Enable+0x68>
 800bb10:	4b2d      	ldr	r3, [pc, #180]	@ (800bbc8 <ADC_Enable+0x11c>)
 800bb12:	e000      	b.n	800bb16 <ADC_Enable+0x6a>
 800bb14:	4b2d      	ldr	r3, [pc, #180]	@ (800bbcc <ADC_Enable+0x120>)
 800bb16:	4618      	mov	r0, r3
 800bb18:	f7fe febc 	bl	800a894 <LL_ADC_GetCommonPathInternalCh>
 800bb1c:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800bb1e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d013      	beq.n	800bb4e <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800bb26:	4b2a      	ldr	r3, [pc, #168]	@ (800bbd0 <ADC_Enable+0x124>)
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	099b      	lsrs	r3, r3, #6
 800bb2c:	4a29      	ldr	r2, [pc, #164]	@ (800bbd4 <ADC_Enable+0x128>)
 800bb2e:	fba2 2303 	umull	r2, r3, r2, r3
 800bb32:	099b      	lsrs	r3, r3, #6
 800bb34:	1c5a      	adds	r2, r3, #1
 800bb36:	4613      	mov	r3, r2
 800bb38:	005b      	lsls	r3, r3, #1
 800bb3a:	4413      	add	r3, r2
 800bb3c:	009b      	lsls	r3, r3, #2
 800bb3e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800bb40:	e002      	b.n	800bb48 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 800bb42:	68bb      	ldr	r3, [r7, #8]
 800bb44:	3b01      	subs	r3, #1
 800bb46:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800bb48:	68bb      	ldr	r3, [r7, #8]
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d1f9      	bne.n	800bb42 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800bb4e:	f7fe fe6f 	bl	800a830 <HAL_GetTick>
 800bb52:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800bb54:	e028      	b.n	800bba8 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	4618      	mov	r0, r3
 800bb5c:	f7ff f858 	bl	800ac10 <LL_ADC_IsEnabled>
 800bb60:	4603      	mov	r3, r0
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d104      	bne.n	800bb70 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	f7ff f828 	bl	800abc0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800bb70:	f7fe fe5e 	bl	800a830 <HAL_GetTick>
 800bb74:	4602      	mov	r2, r0
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	1ad3      	subs	r3, r2, r3
 800bb7a:	2b02      	cmp	r3, #2
 800bb7c:	d914      	bls.n	800bba8 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	f003 0301 	and.w	r3, r3, #1
 800bb88:	2b01      	cmp	r3, #1
 800bb8a:	d00d      	beq.n	800bba8 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bb90:	f043 0210 	orr.w	r2, r3, #16
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bb9c:	f043 0201 	orr.w	r2, r3, #1
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800bba4:	2301      	movs	r3, #1
 800bba6:	e007      	b.n	800bbb8 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	f003 0301 	and.w	r3, r3, #1
 800bbb2:	2b01      	cmp	r3, #1
 800bbb4:	d1cf      	bne.n	800bb56 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800bbb6:	2300      	movs	r3, #0
}
 800bbb8:	4618      	mov	r0, r3
 800bbba:	3710      	adds	r7, #16
 800bbbc:	46bd      	mov	sp, r7
 800bbbe:	bd80      	pop	{r7, pc}
 800bbc0:	8000003f 	.word	0x8000003f
 800bbc4:	50000100 	.word	0x50000100
 800bbc8:	50000300 	.word	0x50000300
 800bbcc:	50000700 	.word	0x50000700
 800bbd0:	20000338 	.word	0x20000338
 800bbd4:	053e2d63 	.word	0x053e2d63

0800bbd8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800bbd8:	b580      	push	{r7, lr}
 800bbda:	b084      	sub	sp, #16
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	f7ff f826 	bl	800ac36 <LL_ADC_IsDisableOngoing>
 800bbea:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	f7ff f80d 	bl	800ac10 <LL_ADC_IsEnabled>
 800bbf6:	4603      	mov	r3, r0
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d047      	beq.n	800bc8c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d144      	bne.n	800bc8c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	689b      	ldr	r3, [r3, #8]
 800bc08:	f003 030d 	and.w	r3, r3, #13
 800bc0c:	2b01      	cmp	r3, #1
 800bc0e:	d10c      	bne.n	800bc2a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	4618      	mov	r0, r3
 800bc16:	f7fe ffe7 	bl	800abe8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	2203      	movs	r2, #3
 800bc20:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800bc22:	f7fe fe05 	bl	800a830 <HAL_GetTick>
 800bc26:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800bc28:	e029      	b.n	800bc7e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bc2e:	f043 0210 	orr.w	r2, r3, #16
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bc3a:	f043 0201 	orr.w	r2, r3, #1
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 800bc42:	2301      	movs	r3, #1
 800bc44:	e023      	b.n	800bc8e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800bc46:	f7fe fdf3 	bl	800a830 <HAL_GetTick>
 800bc4a:	4602      	mov	r2, r0
 800bc4c:	68bb      	ldr	r3, [r7, #8]
 800bc4e:	1ad3      	subs	r3, r2, r3
 800bc50:	2b02      	cmp	r3, #2
 800bc52:	d914      	bls.n	800bc7e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	689b      	ldr	r3, [r3, #8]
 800bc5a:	f003 0301 	and.w	r3, r3, #1
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d00d      	beq.n	800bc7e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bc66:	f043 0210 	orr.w	r2, r3, #16
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bc72:	f043 0201 	orr.w	r2, r3, #1
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800bc7a:	2301      	movs	r3, #1
 800bc7c:	e007      	b.n	800bc8e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	689b      	ldr	r3, [r3, #8]
 800bc84:	f003 0301 	and.w	r3, r3, #1
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d1dc      	bne.n	800bc46 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800bc8c:	2300      	movs	r3, #0
}
 800bc8e:	4618      	mov	r0, r3
 800bc90:	3710      	adds	r7, #16
 800bc92:	46bd      	mov	sp, r7
 800bc94:	bd80      	pop	{r7, pc}

0800bc96 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800bc96:	b580      	push	{r7, lr}
 800bc98:	b084      	sub	sp, #16
 800bc9a:	af00      	add	r7, sp, #0
 800bc9c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bca2:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bca8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d14b      	bne.n	800bd48 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bcb4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	f003 0308 	and.w	r3, r3, #8
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d021      	beq.n	800bd0e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	4618      	mov	r0, r3
 800bcd0:	f7fe fe8c 	bl	800a9ec <LL_ADC_REG_IsTriggerSourceSWStart>
 800bcd4:	4603      	mov	r3, r0
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d032      	beq.n	800bd40 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	68db      	ldr	r3, [r3, #12]
 800bce0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d12b      	bne.n	800bd40 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bcec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bcf8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d11f      	bne.n	800bd40 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bd04:	f043 0201 	orr.w	r2, r3, #1
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800bd0c:	e018      	b.n	800bd40 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	68db      	ldr	r3, [r3, #12]
 800bd14:	f003 0302 	and.w	r3, r3, #2
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d111      	bne.n	800bd40 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bd20:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bd2c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d105      	bne.n	800bd40 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bd38:	f043 0201 	orr.w	r2, r3, #1
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800bd40:	68f8      	ldr	r0, [r7, #12]
 800bd42:	f7ff fa55 	bl	800b1f0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800bd46:	e00e      	b.n	800bd66 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bd4c:	f003 0310 	and.w	r3, r3, #16
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d003      	beq.n	800bd5c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800bd54:	68f8      	ldr	r0, [r7, #12]
 800bd56:	f7ff fa5f 	bl	800b218 <HAL_ADC_ErrorCallback>
}
 800bd5a:	e004      	b.n	800bd66 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bd60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bd62:	6878      	ldr	r0, [r7, #4]
 800bd64:	4798      	blx	r3
}
 800bd66:	bf00      	nop
 800bd68:	3710      	adds	r7, #16
 800bd6a:	46bd      	mov	sp, r7
 800bd6c:	bd80      	pop	{r7, pc}

0800bd6e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800bd6e:	b580      	push	{r7, lr}
 800bd70:	b084      	sub	sp, #16
 800bd72:	af00      	add	r7, sp, #0
 800bd74:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd7a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800bd7c:	68f8      	ldr	r0, [r7, #12]
 800bd7e:	f7ff fa41 	bl	800b204 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800bd82:	bf00      	nop
 800bd84:	3710      	adds	r7, #16
 800bd86:	46bd      	mov	sp, r7
 800bd88:	bd80      	pop	{r7, pc}

0800bd8a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800bd8a:	b580      	push	{r7, lr}
 800bd8c:	b084      	sub	sp, #16
 800bd8e:	af00      	add	r7, sp, #0
 800bd90:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd96:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bd9c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bda8:	f043 0204 	orr.w	r2, r3, #4
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800bdb0:	68f8      	ldr	r0, [r7, #12]
 800bdb2:	f7ff fa31 	bl	800b218 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800bdb6:	bf00      	nop
 800bdb8:	3710      	adds	r7, #16
 800bdba:	46bd      	mov	sp, r7
 800bdbc:	bd80      	pop	{r7, pc}

0800bdbe <LL_ADC_IsEnabled>:
{
 800bdbe:	b480      	push	{r7}
 800bdc0:	b083      	sub	sp, #12
 800bdc2:	af00      	add	r7, sp, #0
 800bdc4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	689b      	ldr	r3, [r3, #8]
 800bdca:	f003 0301 	and.w	r3, r3, #1
 800bdce:	2b01      	cmp	r3, #1
 800bdd0:	d101      	bne.n	800bdd6 <LL_ADC_IsEnabled+0x18>
 800bdd2:	2301      	movs	r3, #1
 800bdd4:	e000      	b.n	800bdd8 <LL_ADC_IsEnabled+0x1a>
 800bdd6:	2300      	movs	r3, #0
}
 800bdd8:	4618      	mov	r0, r3
 800bdda:	370c      	adds	r7, #12
 800bddc:	46bd      	mov	sp, r7
 800bdde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde2:	4770      	bx	lr

0800bde4 <LL_ADC_StartCalibration>:
{
 800bde4:	b480      	push	{r7}
 800bde6:	b083      	sub	sp, #12
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	6078      	str	r0, [r7, #4]
 800bdec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	689b      	ldr	r3, [r3, #8]
 800bdf2:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800bdf6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800bdfa:	683a      	ldr	r2, [r7, #0]
 800bdfc:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800be00:	4313      	orrs	r3, r2
 800be02:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	609a      	str	r2, [r3, #8]
}
 800be0a:	bf00      	nop
 800be0c:	370c      	adds	r7, #12
 800be0e:	46bd      	mov	sp, r7
 800be10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be14:	4770      	bx	lr

0800be16 <LL_ADC_IsCalibrationOnGoing>:
{
 800be16:	b480      	push	{r7}
 800be18:	b083      	sub	sp, #12
 800be1a:	af00      	add	r7, sp, #0
 800be1c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	689b      	ldr	r3, [r3, #8]
 800be22:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800be26:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800be2a:	d101      	bne.n	800be30 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800be2c:	2301      	movs	r3, #1
 800be2e:	e000      	b.n	800be32 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800be30:	2300      	movs	r3, #0
}
 800be32:	4618      	mov	r0, r3
 800be34:	370c      	adds	r7, #12
 800be36:	46bd      	mov	sp, r7
 800be38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be3c:	4770      	bx	lr

0800be3e <LL_ADC_REG_IsConversionOngoing>:
{
 800be3e:	b480      	push	{r7}
 800be40:	b083      	sub	sp, #12
 800be42:	af00      	add	r7, sp, #0
 800be44:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	689b      	ldr	r3, [r3, #8]
 800be4a:	f003 0304 	and.w	r3, r3, #4
 800be4e:	2b04      	cmp	r3, #4
 800be50:	d101      	bne.n	800be56 <LL_ADC_REG_IsConversionOngoing+0x18>
 800be52:	2301      	movs	r3, #1
 800be54:	e000      	b.n	800be58 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800be56:	2300      	movs	r3, #0
}
 800be58:	4618      	mov	r0, r3
 800be5a:	370c      	adds	r7, #12
 800be5c:	46bd      	mov	sp, r7
 800be5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be62:	4770      	bx	lr

0800be64 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800be64:	b580      	push	{r7, lr}
 800be66:	b084      	sub	sp, #16
 800be68:	af00      	add	r7, sp, #0
 800be6a:	6078      	str	r0, [r7, #4]
 800be6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800be6e:	2300      	movs	r3, #0
 800be70:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800be78:	2b01      	cmp	r3, #1
 800be7a:	d101      	bne.n	800be80 <HAL_ADCEx_Calibration_Start+0x1c>
 800be7c:	2302      	movs	r3, #2
 800be7e:	e04d      	b.n	800bf1c <HAL_ADCEx_Calibration_Start+0xb8>
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	2201      	movs	r2, #1
 800be84:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800be88:	6878      	ldr	r0, [r7, #4]
 800be8a:	f7ff fea5 	bl	800bbd8 <ADC_Disable>
 800be8e:	4603      	mov	r3, r0
 800be90:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800be92:	7bfb      	ldrb	r3, [r7, #15]
 800be94:	2b00      	cmp	r3, #0
 800be96:	d136      	bne.n	800bf06 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800be9c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800bea0:	f023 0302 	bic.w	r3, r3, #2
 800bea4:	f043 0202 	orr.w	r2, r3, #2
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	6839      	ldr	r1, [r7, #0]
 800beb2:	4618      	mov	r0, r3
 800beb4:	f7ff ff96 	bl	800bde4 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800beb8:	e014      	b.n	800bee4 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800beba:	68bb      	ldr	r3, [r7, #8]
 800bebc:	3301      	adds	r3, #1
 800bebe:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800bec0:	68bb      	ldr	r3, [r7, #8]
 800bec2:	4a18      	ldr	r2, [pc, #96]	@ (800bf24 <HAL_ADCEx_Calibration_Start+0xc0>)
 800bec4:	4293      	cmp	r3, r2
 800bec6:	d90d      	bls.n	800bee4 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800becc:	f023 0312 	bic.w	r3, r3, #18
 800bed0:	f043 0210 	orr.w	r2, r3, #16
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	2200      	movs	r2, #0
 800bedc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 800bee0:	2301      	movs	r3, #1
 800bee2:	e01b      	b.n	800bf1c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	4618      	mov	r0, r3
 800beea:	f7ff ff94 	bl	800be16 <LL_ADC_IsCalibrationOnGoing>
 800beee:	4603      	mov	r3, r0
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d1e2      	bne.n	800beba <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bef8:	f023 0303 	bic.w	r3, r3, #3
 800befc:	f043 0201 	orr.w	r2, r3, #1
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	65da      	str	r2, [r3, #92]	@ 0x5c
 800bf04:	e005      	b.n	800bf12 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bf0a:	f043 0210 	orr.w	r2, r3, #16
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	2200      	movs	r2, #0
 800bf16:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800bf1a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf1c:	4618      	mov	r0, r3
 800bf1e:	3710      	adds	r7, #16
 800bf20:	46bd      	mov	sp, r7
 800bf22:	bd80      	pop	{r7, pc}
 800bf24:	0004de01 	.word	0x0004de01

0800bf28 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800bf28:	b590      	push	{r4, r7, lr}
 800bf2a:	b0a1      	sub	sp, #132	@ 0x84
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	6078      	str	r0, [r7, #4]
 800bf30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800bf32:	2300      	movs	r3, #0
 800bf34:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800bf3e:	2b01      	cmp	r3, #1
 800bf40:	d101      	bne.n	800bf46 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800bf42:	2302      	movs	r3, #2
 800bf44:	e0e7      	b.n	800c116 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	2201      	movs	r2, #1
 800bf4a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800bf4e:	2300      	movs	r3, #0
 800bf50:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800bf52:	2300      	movs	r3, #0
 800bf54:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bf5e:	d102      	bne.n	800bf66 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800bf60:	4b6f      	ldr	r3, [pc, #444]	@ (800c120 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800bf62:	60bb      	str	r3, [r7, #8]
 800bf64:	e009      	b.n	800bf7a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	4a6e      	ldr	r2, [pc, #440]	@ (800c124 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800bf6c:	4293      	cmp	r3, r2
 800bf6e:	d102      	bne.n	800bf76 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 800bf70:	4b6d      	ldr	r3, [pc, #436]	@ (800c128 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800bf72:	60bb      	str	r3, [r7, #8]
 800bf74:	e001      	b.n	800bf7a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800bf76:	2300      	movs	r3, #0
 800bf78:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800bf7a:	68bb      	ldr	r3, [r7, #8]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d10b      	bne.n	800bf98 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bf84:	f043 0220 	orr.w	r2, r3, #32
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	2200      	movs	r2, #0
 800bf90:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 800bf94:	2301      	movs	r3, #1
 800bf96:	e0be      	b.n	800c116 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800bf98:	68bb      	ldr	r3, [r7, #8]
 800bf9a:	4618      	mov	r0, r3
 800bf9c:	f7ff ff4f 	bl	800be3e <LL_ADC_REG_IsConversionOngoing>
 800bfa0:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	4618      	mov	r0, r3
 800bfa8:	f7ff ff49 	bl	800be3e <LL_ADC_REG_IsConversionOngoing>
 800bfac:	4603      	mov	r3, r0
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	f040 80a0 	bne.w	800c0f4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800bfb4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	f040 809c 	bne.w	800c0f4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bfc4:	d004      	beq.n	800bfd0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	4a55      	ldr	r2, [pc, #340]	@ (800c120 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800bfcc:	4293      	cmp	r3, r2
 800bfce:	d101      	bne.n	800bfd4 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800bfd0:	4b56      	ldr	r3, [pc, #344]	@ (800c12c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800bfd2:	e000      	b.n	800bfd6 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800bfd4:	4b56      	ldr	r3, [pc, #344]	@ (800c130 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800bfd6:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800bfd8:	683b      	ldr	r3, [r7, #0]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d04b      	beq.n	800c078 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800bfe0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bfe2:	689b      	ldr	r3, [r3, #8]
 800bfe4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800bfe8:	683b      	ldr	r3, [r7, #0]
 800bfea:	6859      	ldr	r1, [r3, #4]
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800bff2:	035b      	lsls	r3, r3, #13
 800bff4:	430b      	orrs	r3, r1
 800bff6:	431a      	orrs	r2, r3
 800bff8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bffa:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c004:	d004      	beq.n	800c010 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	4a45      	ldr	r2, [pc, #276]	@ (800c120 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800c00c:	4293      	cmp	r3, r2
 800c00e:	d10f      	bne.n	800c030 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 800c010:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800c014:	f7ff fed3 	bl	800bdbe <LL_ADC_IsEnabled>
 800c018:	4604      	mov	r4, r0
 800c01a:	4841      	ldr	r0, [pc, #260]	@ (800c120 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800c01c:	f7ff fecf 	bl	800bdbe <LL_ADC_IsEnabled>
 800c020:	4603      	mov	r3, r0
 800c022:	4323      	orrs	r3, r4
 800c024:	2b00      	cmp	r3, #0
 800c026:	bf0c      	ite	eq
 800c028:	2301      	moveq	r3, #1
 800c02a:	2300      	movne	r3, #0
 800c02c:	b2db      	uxtb	r3, r3
 800c02e:	e012      	b.n	800c056 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800c030:	483c      	ldr	r0, [pc, #240]	@ (800c124 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800c032:	f7ff fec4 	bl	800bdbe <LL_ADC_IsEnabled>
 800c036:	4604      	mov	r4, r0
 800c038:	483b      	ldr	r0, [pc, #236]	@ (800c128 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800c03a:	f7ff fec0 	bl	800bdbe <LL_ADC_IsEnabled>
 800c03e:	4603      	mov	r3, r0
 800c040:	431c      	orrs	r4, r3
 800c042:	483c      	ldr	r0, [pc, #240]	@ (800c134 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800c044:	f7ff febb 	bl	800bdbe <LL_ADC_IsEnabled>
 800c048:	4603      	mov	r3, r0
 800c04a:	4323      	orrs	r3, r4
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	bf0c      	ite	eq
 800c050:	2301      	moveq	r3, #1
 800c052:	2300      	movne	r3, #0
 800c054:	b2db      	uxtb	r3, r3
 800c056:	2b00      	cmp	r3, #0
 800c058:	d056      	beq.n	800c108 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800c05a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c05c:	689b      	ldr	r3, [r3, #8]
 800c05e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800c062:	f023 030f 	bic.w	r3, r3, #15
 800c066:	683a      	ldr	r2, [r7, #0]
 800c068:	6811      	ldr	r1, [r2, #0]
 800c06a:	683a      	ldr	r2, [r7, #0]
 800c06c:	6892      	ldr	r2, [r2, #8]
 800c06e:	430a      	orrs	r2, r1
 800c070:	431a      	orrs	r2, r3
 800c072:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c074:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800c076:	e047      	b.n	800c108 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800c078:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c07a:	689b      	ldr	r3, [r3, #8]
 800c07c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800c080:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c082:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c08c:	d004      	beq.n	800c098 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	4a23      	ldr	r2, [pc, #140]	@ (800c120 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800c094:	4293      	cmp	r3, r2
 800c096:	d10f      	bne.n	800c0b8 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 800c098:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800c09c:	f7ff fe8f 	bl	800bdbe <LL_ADC_IsEnabled>
 800c0a0:	4604      	mov	r4, r0
 800c0a2:	481f      	ldr	r0, [pc, #124]	@ (800c120 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800c0a4:	f7ff fe8b 	bl	800bdbe <LL_ADC_IsEnabled>
 800c0a8:	4603      	mov	r3, r0
 800c0aa:	4323      	orrs	r3, r4
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	bf0c      	ite	eq
 800c0b0:	2301      	moveq	r3, #1
 800c0b2:	2300      	movne	r3, #0
 800c0b4:	b2db      	uxtb	r3, r3
 800c0b6:	e012      	b.n	800c0de <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 800c0b8:	481a      	ldr	r0, [pc, #104]	@ (800c124 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800c0ba:	f7ff fe80 	bl	800bdbe <LL_ADC_IsEnabled>
 800c0be:	4604      	mov	r4, r0
 800c0c0:	4819      	ldr	r0, [pc, #100]	@ (800c128 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800c0c2:	f7ff fe7c 	bl	800bdbe <LL_ADC_IsEnabled>
 800c0c6:	4603      	mov	r3, r0
 800c0c8:	431c      	orrs	r4, r3
 800c0ca:	481a      	ldr	r0, [pc, #104]	@ (800c134 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800c0cc:	f7ff fe77 	bl	800bdbe <LL_ADC_IsEnabled>
 800c0d0:	4603      	mov	r3, r0
 800c0d2:	4323      	orrs	r3, r4
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	bf0c      	ite	eq
 800c0d8:	2301      	moveq	r3, #1
 800c0da:	2300      	movne	r3, #0
 800c0dc:	b2db      	uxtb	r3, r3
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d012      	beq.n	800c108 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800c0e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c0e4:	689b      	ldr	r3, [r3, #8]
 800c0e6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800c0ea:	f023 030f 	bic.w	r3, r3, #15
 800c0ee:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800c0f0:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800c0f2:	e009      	b.n	800c108 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c0f8:	f043 0220 	orr.w	r2, r3, #32
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800c100:	2301      	movs	r3, #1
 800c102:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800c106:	e000      	b.n	800c10a <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800c108:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	2200      	movs	r2, #0
 800c10e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800c112:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800c116:	4618      	mov	r0, r3
 800c118:	3784      	adds	r7, #132	@ 0x84
 800c11a:	46bd      	mov	sp, r7
 800c11c:	bd90      	pop	{r4, r7, pc}
 800c11e:	bf00      	nop
 800c120:	50000100 	.word	0x50000100
 800c124:	50000400 	.word	0x50000400
 800c128:	50000500 	.word	0x50000500
 800c12c:	50000300 	.word	0x50000300
 800c130:	50000700 	.word	0x50000700
 800c134:	50000600 	.word	0x50000600

0800c138 <__NVIC_SetPriorityGrouping>:
{
 800c138:	b480      	push	{r7}
 800c13a:	b085      	sub	sp, #20
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	f003 0307 	and.w	r3, r3, #7
 800c146:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800c148:	4b0c      	ldr	r3, [pc, #48]	@ (800c17c <__NVIC_SetPriorityGrouping+0x44>)
 800c14a:	68db      	ldr	r3, [r3, #12]
 800c14c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800c14e:	68ba      	ldr	r2, [r7, #8]
 800c150:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800c154:	4013      	ands	r3, r2
 800c156:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800c15c:	68bb      	ldr	r3, [r7, #8]
 800c15e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800c160:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800c164:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c168:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800c16a:	4a04      	ldr	r2, [pc, #16]	@ (800c17c <__NVIC_SetPriorityGrouping+0x44>)
 800c16c:	68bb      	ldr	r3, [r7, #8]
 800c16e:	60d3      	str	r3, [r2, #12]
}
 800c170:	bf00      	nop
 800c172:	3714      	adds	r7, #20
 800c174:	46bd      	mov	sp, r7
 800c176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c17a:	4770      	bx	lr
 800c17c:	e000ed00 	.word	0xe000ed00

0800c180 <__NVIC_GetPriorityGrouping>:
{
 800c180:	b480      	push	{r7}
 800c182:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800c184:	4b04      	ldr	r3, [pc, #16]	@ (800c198 <__NVIC_GetPriorityGrouping+0x18>)
 800c186:	68db      	ldr	r3, [r3, #12]
 800c188:	0a1b      	lsrs	r3, r3, #8
 800c18a:	f003 0307 	and.w	r3, r3, #7
}
 800c18e:	4618      	mov	r0, r3
 800c190:	46bd      	mov	sp, r7
 800c192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c196:	4770      	bx	lr
 800c198:	e000ed00 	.word	0xe000ed00

0800c19c <__NVIC_EnableIRQ>:
{
 800c19c:	b480      	push	{r7}
 800c19e:	b083      	sub	sp, #12
 800c1a0:	af00      	add	r7, sp, #0
 800c1a2:	4603      	mov	r3, r0
 800c1a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c1a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	db0b      	blt.n	800c1c6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c1ae:	79fb      	ldrb	r3, [r7, #7]
 800c1b0:	f003 021f 	and.w	r2, r3, #31
 800c1b4:	4907      	ldr	r1, [pc, #28]	@ (800c1d4 <__NVIC_EnableIRQ+0x38>)
 800c1b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c1ba:	095b      	lsrs	r3, r3, #5
 800c1bc:	2001      	movs	r0, #1
 800c1be:	fa00 f202 	lsl.w	r2, r0, r2
 800c1c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800c1c6:	bf00      	nop
 800c1c8:	370c      	adds	r7, #12
 800c1ca:	46bd      	mov	sp, r7
 800c1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d0:	4770      	bx	lr
 800c1d2:	bf00      	nop
 800c1d4:	e000e100 	.word	0xe000e100

0800c1d8 <__NVIC_SetPriority>:
{
 800c1d8:	b480      	push	{r7}
 800c1da:	b083      	sub	sp, #12
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	4603      	mov	r3, r0
 800c1e0:	6039      	str	r1, [r7, #0]
 800c1e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c1e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	db0a      	blt.n	800c202 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c1ec:	683b      	ldr	r3, [r7, #0]
 800c1ee:	b2da      	uxtb	r2, r3
 800c1f0:	490c      	ldr	r1, [pc, #48]	@ (800c224 <__NVIC_SetPriority+0x4c>)
 800c1f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c1f6:	0112      	lsls	r2, r2, #4
 800c1f8:	b2d2      	uxtb	r2, r2
 800c1fa:	440b      	add	r3, r1
 800c1fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800c200:	e00a      	b.n	800c218 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c202:	683b      	ldr	r3, [r7, #0]
 800c204:	b2da      	uxtb	r2, r3
 800c206:	4908      	ldr	r1, [pc, #32]	@ (800c228 <__NVIC_SetPriority+0x50>)
 800c208:	79fb      	ldrb	r3, [r7, #7]
 800c20a:	f003 030f 	and.w	r3, r3, #15
 800c20e:	3b04      	subs	r3, #4
 800c210:	0112      	lsls	r2, r2, #4
 800c212:	b2d2      	uxtb	r2, r2
 800c214:	440b      	add	r3, r1
 800c216:	761a      	strb	r2, [r3, #24]
}
 800c218:	bf00      	nop
 800c21a:	370c      	adds	r7, #12
 800c21c:	46bd      	mov	sp, r7
 800c21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c222:	4770      	bx	lr
 800c224:	e000e100 	.word	0xe000e100
 800c228:	e000ed00 	.word	0xe000ed00

0800c22c <NVIC_EncodePriority>:
{
 800c22c:	b480      	push	{r7}
 800c22e:	b089      	sub	sp, #36	@ 0x24
 800c230:	af00      	add	r7, sp, #0
 800c232:	60f8      	str	r0, [r7, #12]
 800c234:	60b9      	str	r1, [r7, #8]
 800c236:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	f003 0307 	and.w	r3, r3, #7
 800c23e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800c240:	69fb      	ldr	r3, [r7, #28]
 800c242:	f1c3 0307 	rsb	r3, r3, #7
 800c246:	2b04      	cmp	r3, #4
 800c248:	bf28      	it	cs
 800c24a:	2304      	movcs	r3, #4
 800c24c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800c24e:	69fb      	ldr	r3, [r7, #28]
 800c250:	3304      	adds	r3, #4
 800c252:	2b06      	cmp	r3, #6
 800c254:	d902      	bls.n	800c25c <NVIC_EncodePriority+0x30>
 800c256:	69fb      	ldr	r3, [r7, #28]
 800c258:	3b03      	subs	r3, #3
 800c25a:	e000      	b.n	800c25e <NVIC_EncodePriority+0x32>
 800c25c:	2300      	movs	r3, #0
 800c25e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c260:	f04f 32ff 	mov.w	r2, #4294967295
 800c264:	69bb      	ldr	r3, [r7, #24]
 800c266:	fa02 f303 	lsl.w	r3, r2, r3
 800c26a:	43da      	mvns	r2, r3
 800c26c:	68bb      	ldr	r3, [r7, #8]
 800c26e:	401a      	ands	r2, r3
 800c270:	697b      	ldr	r3, [r7, #20]
 800c272:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800c274:	f04f 31ff 	mov.w	r1, #4294967295
 800c278:	697b      	ldr	r3, [r7, #20]
 800c27a:	fa01 f303 	lsl.w	r3, r1, r3
 800c27e:	43d9      	mvns	r1, r3
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c284:	4313      	orrs	r3, r2
}
 800c286:	4618      	mov	r0, r3
 800c288:	3724      	adds	r7, #36	@ 0x24
 800c28a:	46bd      	mov	sp, r7
 800c28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c290:	4770      	bx	lr
	...

0800c294 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800c294:	b580      	push	{r7, lr}
 800c296:	b082      	sub	sp, #8
 800c298:	af00      	add	r7, sp, #0
 800c29a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	3b01      	subs	r3, #1
 800c2a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c2a4:	d301      	bcc.n	800c2aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800c2a6:	2301      	movs	r3, #1
 800c2a8:	e00f      	b.n	800c2ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800c2aa:	4a0a      	ldr	r2, [pc, #40]	@ (800c2d4 <SysTick_Config+0x40>)
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	3b01      	subs	r3, #1
 800c2b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800c2b2:	210f      	movs	r1, #15
 800c2b4:	f04f 30ff 	mov.w	r0, #4294967295
 800c2b8:	f7ff ff8e 	bl	800c1d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800c2bc:	4b05      	ldr	r3, [pc, #20]	@ (800c2d4 <SysTick_Config+0x40>)
 800c2be:	2200      	movs	r2, #0
 800c2c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800c2c2:	4b04      	ldr	r3, [pc, #16]	@ (800c2d4 <SysTick_Config+0x40>)
 800c2c4:	2207      	movs	r2, #7
 800c2c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800c2c8:	2300      	movs	r3, #0
}
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	3708      	adds	r7, #8
 800c2ce:	46bd      	mov	sp, r7
 800c2d0:	bd80      	pop	{r7, pc}
 800c2d2:	bf00      	nop
 800c2d4:	e000e010 	.word	0xe000e010

0800c2d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c2d8:	b580      	push	{r7, lr}
 800c2da:	b082      	sub	sp, #8
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800c2e0:	6878      	ldr	r0, [r7, #4]
 800c2e2:	f7ff ff29 	bl	800c138 <__NVIC_SetPriorityGrouping>
}
 800c2e6:	bf00      	nop
 800c2e8:	3708      	adds	r7, #8
 800c2ea:	46bd      	mov	sp, r7
 800c2ec:	bd80      	pop	{r7, pc}

0800c2ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800c2ee:	b580      	push	{r7, lr}
 800c2f0:	b086      	sub	sp, #24
 800c2f2:	af00      	add	r7, sp, #0
 800c2f4:	4603      	mov	r3, r0
 800c2f6:	60b9      	str	r1, [r7, #8]
 800c2f8:	607a      	str	r2, [r7, #4]
 800c2fa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800c2fc:	f7ff ff40 	bl	800c180 <__NVIC_GetPriorityGrouping>
 800c300:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800c302:	687a      	ldr	r2, [r7, #4]
 800c304:	68b9      	ldr	r1, [r7, #8]
 800c306:	6978      	ldr	r0, [r7, #20]
 800c308:	f7ff ff90 	bl	800c22c <NVIC_EncodePriority>
 800c30c:	4602      	mov	r2, r0
 800c30e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c312:	4611      	mov	r1, r2
 800c314:	4618      	mov	r0, r3
 800c316:	f7ff ff5f 	bl	800c1d8 <__NVIC_SetPriority>
}
 800c31a:	bf00      	nop
 800c31c:	3718      	adds	r7, #24
 800c31e:	46bd      	mov	sp, r7
 800c320:	bd80      	pop	{r7, pc}

0800c322 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c322:	b580      	push	{r7, lr}
 800c324:	b082      	sub	sp, #8
 800c326:	af00      	add	r7, sp, #0
 800c328:	4603      	mov	r3, r0
 800c32a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800c32c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c330:	4618      	mov	r0, r3
 800c332:	f7ff ff33 	bl	800c19c <__NVIC_EnableIRQ>
}
 800c336:	bf00      	nop
 800c338:	3708      	adds	r7, #8
 800c33a:	46bd      	mov	sp, r7
 800c33c:	bd80      	pop	{r7, pc}

0800c33e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800c33e:	b580      	push	{r7, lr}
 800c340:	b082      	sub	sp, #8
 800c342:	af00      	add	r7, sp, #0
 800c344:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800c346:	6878      	ldr	r0, [r7, #4]
 800c348:	f7ff ffa4 	bl	800c294 <SysTick_Config>
 800c34c:	4603      	mov	r3, r0
}
 800c34e:	4618      	mov	r0, r3
 800c350:	3708      	adds	r7, #8
 800c352:	46bd      	mov	sp, r7
 800c354:	bd80      	pop	{r7, pc}
	...

0800c358 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800c358:	b580      	push	{r7, lr}
 800c35a:	b084      	sub	sp, #16
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	2b00      	cmp	r3, #0
 800c364:	d101      	bne.n	800c36a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800c366:	2301      	movs	r3, #1
 800c368:	e08d      	b.n	800c486 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	461a      	mov	r2, r3
 800c370:	4b47      	ldr	r3, [pc, #284]	@ (800c490 <HAL_DMA_Init+0x138>)
 800c372:	429a      	cmp	r2, r3
 800c374:	d80f      	bhi.n	800c396 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	461a      	mov	r2, r3
 800c37c:	4b45      	ldr	r3, [pc, #276]	@ (800c494 <HAL_DMA_Init+0x13c>)
 800c37e:	4413      	add	r3, r2
 800c380:	4a45      	ldr	r2, [pc, #276]	@ (800c498 <HAL_DMA_Init+0x140>)
 800c382:	fba2 2303 	umull	r2, r3, r2, r3
 800c386:	091b      	lsrs	r3, r3, #4
 800c388:	009a      	lsls	r2, r3, #2
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	4a42      	ldr	r2, [pc, #264]	@ (800c49c <HAL_DMA_Init+0x144>)
 800c392:	641a      	str	r2, [r3, #64]	@ 0x40
 800c394:	e00e      	b.n	800c3b4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	461a      	mov	r2, r3
 800c39c:	4b40      	ldr	r3, [pc, #256]	@ (800c4a0 <HAL_DMA_Init+0x148>)
 800c39e:	4413      	add	r3, r2
 800c3a0:	4a3d      	ldr	r2, [pc, #244]	@ (800c498 <HAL_DMA_Init+0x140>)
 800c3a2:	fba2 2303 	umull	r2, r3, r2, r3
 800c3a6:	091b      	lsrs	r3, r3, #4
 800c3a8:	009a      	lsls	r2, r3, #2
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	4a3c      	ldr	r2, [pc, #240]	@ (800c4a4 <HAL_DMA_Init+0x14c>)
 800c3b2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	2202      	movs	r2, #2
 800c3b8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800c3ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c3ce:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800c3d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	691b      	ldr	r3, [r3, #16]
 800c3de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c3e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	699b      	ldr	r3, [r3, #24]
 800c3ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c3f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	6a1b      	ldr	r3, [r3, #32]
 800c3f6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800c3f8:	68fa      	ldr	r2, [r7, #12]
 800c3fa:	4313      	orrs	r3, r2
 800c3fc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	68fa      	ldr	r2, [r7, #12]
 800c404:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800c406:	6878      	ldr	r0, [r7, #4]
 800c408:	f000 fa76 	bl	800c8f8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	689b      	ldr	r3, [r3, #8]
 800c410:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c414:	d102      	bne.n	800c41c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	2200      	movs	r2, #0
 800c41a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	685a      	ldr	r2, [r3, #4]
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c424:	b2d2      	uxtb	r2, r2
 800c426:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c42c:	687a      	ldr	r2, [r7, #4]
 800c42e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800c430:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	685b      	ldr	r3, [r3, #4]
 800c436:	2b00      	cmp	r3, #0
 800c438:	d010      	beq.n	800c45c <HAL_DMA_Init+0x104>
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	685b      	ldr	r3, [r3, #4]
 800c43e:	2b04      	cmp	r3, #4
 800c440:	d80c      	bhi.n	800c45c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800c442:	6878      	ldr	r0, [r7, #4]
 800c444:	f000 fa96 	bl	800c974 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c44c:	2200      	movs	r2, #0
 800c44e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c454:	687a      	ldr	r2, [r7, #4]
 800c456:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800c458:	605a      	str	r2, [r3, #4]
 800c45a:	e008      	b.n	800c46e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	2200      	movs	r2, #0
 800c460:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	2200      	movs	r2, #0
 800c466:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	2200      	movs	r2, #0
 800c46c:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	2200      	movs	r2, #0
 800c472:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	2201      	movs	r2, #1
 800c478:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	2200      	movs	r2, #0
 800c480:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800c484:	2300      	movs	r3, #0
}
 800c486:	4618      	mov	r0, r3
 800c488:	3710      	adds	r7, #16
 800c48a:	46bd      	mov	sp, r7
 800c48c:	bd80      	pop	{r7, pc}
 800c48e:	bf00      	nop
 800c490:	40020407 	.word	0x40020407
 800c494:	bffdfff8 	.word	0xbffdfff8
 800c498:	cccccccd 	.word	0xcccccccd
 800c49c:	40020000 	.word	0x40020000
 800c4a0:	bffdfbf8 	.word	0xbffdfbf8
 800c4a4:	40020400 	.word	0x40020400

0800c4a8 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800c4a8:	b580      	push	{r7, lr}
 800c4aa:	b086      	sub	sp, #24
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	60f8      	str	r0, [r7, #12]
 800c4b0:	60b9      	str	r1, [r7, #8]
 800c4b2:	607a      	str	r2, [r7, #4]
 800c4b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c4b6:	2300      	movs	r3, #0
 800c4b8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800c4c0:	2b01      	cmp	r3, #1
 800c4c2:	d101      	bne.n	800c4c8 <HAL_DMA_Start_IT+0x20>
 800c4c4:	2302      	movs	r3, #2
 800c4c6:	e066      	b.n	800c596 <HAL_DMA_Start_IT+0xee>
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	2201      	movs	r2, #1
 800c4cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800c4d6:	b2db      	uxtb	r3, r3
 800c4d8:	2b01      	cmp	r3, #1
 800c4da:	d155      	bne.n	800c588 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	2202      	movs	r2, #2
 800c4e0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	2200      	movs	r2, #0
 800c4e8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	681a      	ldr	r2, [r3, #0]
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	f022 0201 	bic.w	r2, r2, #1
 800c4f8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800c4fa:	683b      	ldr	r3, [r7, #0]
 800c4fc:	687a      	ldr	r2, [r7, #4]
 800c4fe:	68b9      	ldr	r1, [r7, #8]
 800c500:	68f8      	ldr	r0, [r7, #12]
 800c502:	f000 f9bb 	bl	800c87c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d008      	beq.n	800c520 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	681a      	ldr	r2, [r3, #0]
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	f042 020e 	orr.w	r2, r2, #14
 800c51c:	601a      	str	r2, [r3, #0]
 800c51e:	e00f      	b.n	800c540 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	681a      	ldr	r2, [r3, #0]
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	f022 0204 	bic.w	r2, r2, #4
 800c52e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	681a      	ldr	r2, [r3, #0]
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	f042 020a 	orr.w	r2, r2, #10
 800c53e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d007      	beq.n	800c55e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c552:	681a      	ldr	r2, [r3, #0]
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c558:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c55c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c562:	2b00      	cmp	r3, #0
 800c564:	d007      	beq.n	800c576 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c56a:	681a      	ldr	r2, [r3, #0]
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c570:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c574:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	681a      	ldr	r2, [r3, #0]
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	f042 0201 	orr.w	r2, r2, #1
 800c584:	601a      	str	r2, [r3, #0]
 800c586:	e005      	b.n	800c594 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	2200      	movs	r2, #0
 800c58c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800c590:	2302      	movs	r3, #2
 800c592:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800c594:	7dfb      	ldrb	r3, [r7, #23]
}
 800c596:	4618      	mov	r0, r3
 800c598:	3718      	adds	r7, #24
 800c59a:	46bd      	mov	sp, r7
 800c59c:	bd80      	pop	{r7, pc}

0800c59e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800c59e:	b480      	push	{r7}
 800c5a0:	b085      	sub	sp, #20
 800c5a2:	af00      	add	r7, sp, #0
 800c5a4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c5a6:	2300      	movs	r3, #0
 800c5a8:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800c5b0:	b2db      	uxtb	r3, r3
 800c5b2:	2b02      	cmp	r3, #2
 800c5b4:	d005      	beq.n	800c5c2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	2204      	movs	r2, #4
 800c5ba:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800c5bc:	2301      	movs	r3, #1
 800c5be:	73fb      	strb	r3, [r7, #15]
 800c5c0:	e037      	b.n	800c632 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	681a      	ldr	r2, [r3, #0]
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	f022 020e 	bic.w	r2, r2, #14
 800c5d0:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c5d6:	681a      	ldr	r2, [r3, #0]
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c5dc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c5e0:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	681a      	ldr	r2, [r3, #0]
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	f022 0201 	bic.w	r2, r2, #1
 800c5f0:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c5f6:	f003 021f 	and.w	r2, r3, #31
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c5fe:	2101      	movs	r1, #1
 800c600:	fa01 f202 	lsl.w	r2, r1, r2
 800c604:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c60a:	687a      	ldr	r2, [r7, #4]
 800c60c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800c60e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c614:	2b00      	cmp	r3, #0
 800c616:	d00c      	beq.n	800c632 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c61c:	681a      	ldr	r2, [r3, #0]
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c622:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c626:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c62c:	687a      	ldr	r2, [r7, #4]
 800c62e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800c630:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	2201      	movs	r2, #1
 800c636:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	2200      	movs	r2, #0
 800c63e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800c642:	7bfb      	ldrb	r3, [r7, #15]
}
 800c644:	4618      	mov	r0, r3
 800c646:	3714      	adds	r7, #20
 800c648:	46bd      	mov	sp, r7
 800c64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c64e:	4770      	bx	lr

0800c650 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800c650:	b580      	push	{r7, lr}
 800c652:	b084      	sub	sp, #16
 800c654:	af00      	add	r7, sp, #0
 800c656:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c658:	2300      	movs	r3, #0
 800c65a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800c662:	b2db      	uxtb	r3, r3
 800c664:	2b02      	cmp	r3, #2
 800c666:	d00d      	beq.n	800c684 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	2204      	movs	r2, #4
 800c66c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	2201      	movs	r2, #1
 800c672:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	2200      	movs	r2, #0
 800c67a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800c67e:	2301      	movs	r3, #1
 800c680:	73fb      	strb	r3, [r7, #15]
 800c682:	e047      	b.n	800c714 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	681a      	ldr	r2, [r3, #0]
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	f022 020e 	bic.w	r2, r2, #14
 800c692:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	681a      	ldr	r2, [r3, #0]
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	f022 0201 	bic.w	r2, r2, #1
 800c6a2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c6a8:	681a      	ldr	r2, [r3, #0]
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c6ae:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c6b2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c6b8:	f003 021f 	and.w	r2, r3, #31
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c6c0:	2101      	movs	r1, #1
 800c6c2:	fa01 f202 	lsl.w	r2, r1, r2
 800c6c6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c6cc:	687a      	ldr	r2, [r7, #4]
 800c6ce:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800c6d0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d00c      	beq.n	800c6f4 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c6de:	681a      	ldr	r2, [r3, #0]
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c6e4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c6e8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c6ee:	687a      	ldr	r2, [r7, #4]
 800c6f0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800c6f2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	2201      	movs	r2, #1
 800c6f8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	2200      	movs	r2, #0
 800c700:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d003      	beq.n	800c714 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c710:	6878      	ldr	r0, [r7, #4]
 800c712:	4798      	blx	r3
    }
  }
  return status;
 800c714:	7bfb      	ldrb	r3, [r7, #15]
}
 800c716:	4618      	mov	r0, r3
 800c718:	3710      	adds	r7, #16
 800c71a:	46bd      	mov	sp, r7
 800c71c:	bd80      	pop	{r7, pc}

0800c71e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800c71e:	b580      	push	{r7, lr}
 800c720:	b084      	sub	sp, #16
 800c722:	af00      	add	r7, sp, #0
 800c724:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c73a:	f003 031f 	and.w	r3, r3, #31
 800c73e:	2204      	movs	r2, #4
 800c740:	409a      	lsls	r2, r3
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	4013      	ands	r3, r2
 800c746:	2b00      	cmp	r3, #0
 800c748:	d026      	beq.n	800c798 <HAL_DMA_IRQHandler+0x7a>
 800c74a:	68bb      	ldr	r3, [r7, #8]
 800c74c:	f003 0304 	and.w	r3, r3, #4
 800c750:	2b00      	cmp	r3, #0
 800c752:	d021      	beq.n	800c798 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	f003 0320 	and.w	r3, r3, #32
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d107      	bne.n	800c772 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	681a      	ldr	r2, [r3, #0]
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	f022 0204 	bic.w	r2, r2, #4
 800c770:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c776:	f003 021f 	and.w	r2, r3, #31
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c77e:	2104      	movs	r1, #4
 800c780:	fa01 f202 	lsl.w	r2, r1, r2
 800c784:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d071      	beq.n	800c872 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c792:	6878      	ldr	r0, [r7, #4]
 800c794:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800c796:	e06c      	b.n	800c872 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c79c:	f003 031f 	and.w	r3, r3, #31
 800c7a0:	2202      	movs	r2, #2
 800c7a2:	409a      	lsls	r2, r3
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	4013      	ands	r3, r2
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d02e      	beq.n	800c80a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800c7ac:	68bb      	ldr	r3, [r7, #8]
 800c7ae:	f003 0302 	and.w	r3, r3, #2
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d029      	beq.n	800c80a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	f003 0320 	and.w	r3, r3, #32
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d10b      	bne.n	800c7dc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	681a      	ldr	r2, [r3, #0]
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	f022 020a 	bic.w	r2, r2, #10
 800c7d2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	2201      	movs	r2, #1
 800c7d8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c7e0:	f003 021f 	and.w	r2, r3, #31
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c7e8:	2102      	movs	r1, #2
 800c7ea:	fa01 f202 	lsl.w	r2, r1, r2
 800c7ee:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	2200      	movs	r2, #0
 800c7f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d038      	beq.n	800c872 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c804:	6878      	ldr	r0, [r7, #4]
 800c806:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800c808:	e033      	b.n	800c872 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c80e:	f003 031f 	and.w	r3, r3, #31
 800c812:	2208      	movs	r2, #8
 800c814:	409a      	lsls	r2, r3
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	4013      	ands	r3, r2
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d02a      	beq.n	800c874 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800c81e:	68bb      	ldr	r3, [r7, #8]
 800c820:	f003 0308 	and.w	r3, r3, #8
 800c824:	2b00      	cmp	r3, #0
 800c826:	d025      	beq.n	800c874 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	681a      	ldr	r2, [r3, #0]
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	f022 020e 	bic.w	r2, r2, #14
 800c836:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c83c:	f003 021f 	and.w	r2, r3, #31
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c844:	2101      	movs	r1, #1
 800c846:	fa01 f202 	lsl.w	r2, r1, r2
 800c84a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	2201      	movs	r2, #1
 800c850:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	2201      	movs	r2, #1
 800c856:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	2200      	movs	r2, #0
 800c85e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c866:	2b00      	cmp	r3, #0
 800c868:	d004      	beq.n	800c874 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c86e:	6878      	ldr	r0, [r7, #4]
 800c870:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800c872:	bf00      	nop
 800c874:	bf00      	nop
}
 800c876:	3710      	adds	r7, #16
 800c878:	46bd      	mov	sp, r7
 800c87a:	bd80      	pop	{r7, pc}

0800c87c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800c87c:	b480      	push	{r7}
 800c87e:	b085      	sub	sp, #20
 800c880:	af00      	add	r7, sp, #0
 800c882:	60f8      	str	r0, [r7, #12]
 800c884:	60b9      	str	r1, [r7, #8]
 800c886:	607a      	str	r2, [r7, #4]
 800c888:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c88e:	68fa      	ldr	r2, [r7, #12]
 800c890:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800c892:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d004      	beq.n	800c8a6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c8a0:	68fa      	ldr	r2, [r7, #12]
 800c8a2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800c8a4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c8aa:	f003 021f 	and.w	r2, r3, #31
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c8b2:	2101      	movs	r1, #1
 800c8b4:	fa01 f202 	lsl.w	r2, r1, r2
 800c8b8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	683a      	ldr	r2, [r7, #0]
 800c8c0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	689b      	ldr	r3, [r3, #8]
 800c8c6:	2b10      	cmp	r3, #16
 800c8c8:	d108      	bne.n	800c8dc <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	687a      	ldr	r2, [r7, #4]
 800c8d0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	68ba      	ldr	r2, [r7, #8]
 800c8d8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800c8da:	e007      	b.n	800c8ec <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	68ba      	ldr	r2, [r7, #8]
 800c8e2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	687a      	ldr	r2, [r7, #4]
 800c8ea:	60da      	str	r2, [r3, #12]
}
 800c8ec:	bf00      	nop
 800c8ee:	3714      	adds	r7, #20
 800c8f0:	46bd      	mov	sp, r7
 800c8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f6:	4770      	bx	lr

0800c8f8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800c8f8:	b480      	push	{r7}
 800c8fa:	b087      	sub	sp, #28
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	461a      	mov	r2, r3
 800c906:	4b16      	ldr	r3, [pc, #88]	@ (800c960 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800c908:	429a      	cmp	r2, r3
 800c90a:	d802      	bhi.n	800c912 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800c90c:	4b15      	ldr	r3, [pc, #84]	@ (800c964 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800c90e:	617b      	str	r3, [r7, #20]
 800c910:	e001      	b.n	800c916 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800c912:	4b15      	ldr	r3, [pc, #84]	@ (800c968 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800c914:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800c916:	697b      	ldr	r3, [r7, #20]
 800c918:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	b2db      	uxtb	r3, r3
 800c920:	3b08      	subs	r3, #8
 800c922:	4a12      	ldr	r2, [pc, #72]	@ (800c96c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800c924:	fba2 2303 	umull	r2, r3, r2, r3
 800c928:	091b      	lsrs	r3, r3, #4
 800c92a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c930:	089b      	lsrs	r3, r3, #2
 800c932:	009a      	lsls	r2, r3, #2
 800c934:	693b      	ldr	r3, [r7, #16]
 800c936:	4413      	add	r3, r2
 800c938:	461a      	mov	r2, r3
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	4a0b      	ldr	r2, [pc, #44]	@ (800c970 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800c942:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	f003 031f 	and.w	r3, r3, #31
 800c94a:	2201      	movs	r2, #1
 800c94c:	409a      	lsls	r2, r3
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800c952:	bf00      	nop
 800c954:	371c      	adds	r7, #28
 800c956:	46bd      	mov	sp, r7
 800c958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c95c:	4770      	bx	lr
 800c95e:	bf00      	nop
 800c960:	40020407 	.word	0x40020407
 800c964:	40020800 	.word	0x40020800
 800c968:	40020820 	.word	0x40020820
 800c96c:	cccccccd 	.word	0xcccccccd
 800c970:	40020880 	.word	0x40020880

0800c974 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800c974:	b480      	push	{r7}
 800c976:	b085      	sub	sp, #20
 800c978:	af00      	add	r7, sp, #0
 800c97a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	685b      	ldr	r3, [r3, #4]
 800c980:	b2db      	uxtb	r3, r3
 800c982:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800c984:	68fa      	ldr	r2, [r7, #12]
 800c986:	4b0b      	ldr	r3, [pc, #44]	@ (800c9b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800c988:	4413      	add	r3, r2
 800c98a:	009b      	lsls	r3, r3, #2
 800c98c:	461a      	mov	r2, r3
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	4a08      	ldr	r2, [pc, #32]	@ (800c9b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800c996:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	3b01      	subs	r3, #1
 800c99c:	f003 031f 	and.w	r3, r3, #31
 800c9a0:	2201      	movs	r2, #1
 800c9a2:	409a      	lsls	r2, r3
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800c9a8:	bf00      	nop
 800c9aa:	3714      	adds	r7, #20
 800c9ac:	46bd      	mov	sp, r7
 800c9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b2:	4770      	bx	lr
 800c9b4:	1000823f 	.word	0x1000823f
 800c9b8:	40020940 	.word	0x40020940

0800c9bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800c9bc:	b480      	push	{r7}
 800c9be:	b087      	sub	sp, #28
 800c9c0:	af00      	add	r7, sp, #0
 800c9c2:	6078      	str	r0, [r7, #4]
 800c9c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800c9c6:	2300      	movs	r3, #0
 800c9c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800c9ca:	e15a      	b.n	800cc82 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800c9cc:	683b      	ldr	r3, [r7, #0]
 800c9ce:	681a      	ldr	r2, [r3, #0]
 800c9d0:	2101      	movs	r1, #1
 800c9d2:	697b      	ldr	r3, [r7, #20]
 800c9d4:	fa01 f303 	lsl.w	r3, r1, r3
 800c9d8:	4013      	ands	r3, r2
 800c9da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	f000 814c 	beq.w	800cc7c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800c9e4:	683b      	ldr	r3, [r7, #0]
 800c9e6:	685b      	ldr	r3, [r3, #4]
 800c9e8:	f003 0303 	and.w	r3, r3, #3
 800c9ec:	2b01      	cmp	r3, #1
 800c9ee:	d005      	beq.n	800c9fc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800c9f0:	683b      	ldr	r3, [r7, #0]
 800c9f2:	685b      	ldr	r3, [r3, #4]
 800c9f4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800c9f8:	2b02      	cmp	r3, #2
 800c9fa:	d130      	bne.n	800ca5e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	689b      	ldr	r3, [r3, #8]
 800ca00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800ca02:	697b      	ldr	r3, [r7, #20]
 800ca04:	005b      	lsls	r3, r3, #1
 800ca06:	2203      	movs	r2, #3
 800ca08:	fa02 f303 	lsl.w	r3, r2, r3
 800ca0c:	43db      	mvns	r3, r3
 800ca0e:	693a      	ldr	r2, [r7, #16]
 800ca10:	4013      	ands	r3, r2
 800ca12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800ca14:	683b      	ldr	r3, [r7, #0]
 800ca16:	68da      	ldr	r2, [r3, #12]
 800ca18:	697b      	ldr	r3, [r7, #20]
 800ca1a:	005b      	lsls	r3, r3, #1
 800ca1c:	fa02 f303 	lsl.w	r3, r2, r3
 800ca20:	693a      	ldr	r2, [r7, #16]
 800ca22:	4313      	orrs	r3, r2
 800ca24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	693a      	ldr	r2, [r7, #16]
 800ca2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	685b      	ldr	r3, [r3, #4]
 800ca30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800ca32:	2201      	movs	r2, #1
 800ca34:	697b      	ldr	r3, [r7, #20]
 800ca36:	fa02 f303 	lsl.w	r3, r2, r3
 800ca3a:	43db      	mvns	r3, r3
 800ca3c:	693a      	ldr	r2, [r7, #16]
 800ca3e:	4013      	ands	r3, r2
 800ca40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800ca42:	683b      	ldr	r3, [r7, #0]
 800ca44:	685b      	ldr	r3, [r3, #4]
 800ca46:	091b      	lsrs	r3, r3, #4
 800ca48:	f003 0201 	and.w	r2, r3, #1
 800ca4c:	697b      	ldr	r3, [r7, #20]
 800ca4e:	fa02 f303 	lsl.w	r3, r2, r3
 800ca52:	693a      	ldr	r2, [r7, #16]
 800ca54:	4313      	orrs	r3, r2
 800ca56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	693a      	ldr	r2, [r7, #16]
 800ca5c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800ca5e:	683b      	ldr	r3, [r7, #0]
 800ca60:	685b      	ldr	r3, [r3, #4]
 800ca62:	f003 0303 	and.w	r3, r3, #3
 800ca66:	2b03      	cmp	r3, #3
 800ca68:	d017      	beq.n	800ca9a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	68db      	ldr	r3, [r3, #12]
 800ca6e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800ca70:	697b      	ldr	r3, [r7, #20]
 800ca72:	005b      	lsls	r3, r3, #1
 800ca74:	2203      	movs	r2, #3
 800ca76:	fa02 f303 	lsl.w	r3, r2, r3
 800ca7a:	43db      	mvns	r3, r3
 800ca7c:	693a      	ldr	r2, [r7, #16]
 800ca7e:	4013      	ands	r3, r2
 800ca80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800ca82:	683b      	ldr	r3, [r7, #0]
 800ca84:	689a      	ldr	r2, [r3, #8]
 800ca86:	697b      	ldr	r3, [r7, #20]
 800ca88:	005b      	lsls	r3, r3, #1
 800ca8a:	fa02 f303 	lsl.w	r3, r2, r3
 800ca8e:	693a      	ldr	r2, [r7, #16]
 800ca90:	4313      	orrs	r3, r2
 800ca92:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	693a      	ldr	r2, [r7, #16]
 800ca98:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800ca9a:	683b      	ldr	r3, [r7, #0]
 800ca9c:	685b      	ldr	r3, [r3, #4]
 800ca9e:	f003 0303 	and.w	r3, r3, #3
 800caa2:	2b02      	cmp	r3, #2
 800caa4:	d123      	bne.n	800caee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800caa6:	697b      	ldr	r3, [r7, #20]
 800caa8:	08da      	lsrs	r2, r3, #3
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	3208      	adds	r2, #8
 800caae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cab2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800cab4:	697b      	ldr	r3, [r7, #20]
 800cab6:	f003 0307 	and.w	r3, r3, #7
 800caba:	009b      	lsls	r3, r3, #2
 800cabc:	220f      	movs	r2, #15
 800cabe:	fa02 f303 	lsl.w	r3, r2, r3
 800cac2:	43db      	mvns	r3, r3
 800cac4:	693a      	ldr	r2, [r7, #16]
 800cac6:	4013      	ands	r3, r2
 800cac8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800caca:	683b      	ldr	r3, [r7, #0]
 800cacc:	691a      	ldr	r2, [r3, #16]
 800cace:	697b      	ldr	r3, [r7, #20]
 800cad0:	f003 0307 	and.w	r3, r3, #7
 800cad4:	009b      	lsls	r3, r3, #2
 800cad6:	fa02 f303 	lsl.w	r3, r2, r3
 800cada:	693a      	ldr	r2, [r7, #16]
 800cadc:	4313      	orrs	r3, r2
 800cade:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800cae0:	697b      	ldr	r3, [r7, #20]
 800cae2:	08da      	lsrs	r2, r3, #3
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	3208      	adds	r2, #8
 800cae8:	6939      	ldr	r1, [r7, #16]
 800caea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800caf4:	697b      	ldr	r3, [r7, #20]
 800caf6:	005b      	lsls	r3, r3, #1
 800caf8:	2203      	movs	r2, #3
 800cafa:	fa02 f303 	lsl.w	r3, r2, r3
 800cafe:	43db      	mvns	r3, r3
 800cb00:	693a      	ldr	r2, [r7, #16]
 800cb02:	4013      	ands	r3, r2
 800cb04:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800cb06:	683b      	ldr	r3, [r7, #0]
 800cb08:	685b      	ldr	r3, [r3, #4]
 800cb0a:	f003 0203 	and.w	r2, r3, #3
 800cb0e:	697b      	ldr	r3, [r7, #20]
 800cb10:	005b      	lsls	r3, r3, #1
 800cb12:	fa02 f303 	lsl.w	r3, r2, r3
 800cb16:	693a      	ldr	r2, [r7, #16]
 800cb18:	4313      	orrs	r3, r2
 800cb1a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	693a      	ldr	r2, [r7, #16]
 800cb20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800cb22:	683b      	ldr	r3, [r7, #0]
 800cb24:	685b      	ldr	r3, [r3, #4]
 800cb26:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	f000 80a6 	beq.w	800cc7c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800cb30:	4b5b      	ldr	r3, [pc, #364]	@ (800cca0 <HAL_GPIO_Init+0x2e4>)
 800cb32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cb34:	4a5a      	ldr	r2, [pc, #360]	@ (800cca0 <HAL_GPIO_Init+0x2e4>)
 800cb36:	f043 0301 	orr.w	r3, r3, #1
 800cb3a:	6613      	str	r3, [r2, #96]	@ 0x60
 800cb3c:	4b58      	ldr	r3, [pc, #352]	@ (800cca0 <HAL_GPIO_Init+0x2e4>)
 800cb3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cb40:	f003 0301 	and.w	r3, r3, #1
 800cb44:	60bb      	str	r3, [r7, #8]
 800cb46:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800cb48:	4a56      	ldr	r2, [pc, #344]	@ (800cca4 <HAL_GPIO_Init+0x2e8>)
 800cb4a:	697b      	ldr	r3, [r7, #20]
 800cb4c:	089b      	lsrs	r3, r3, #2
 800cb4e:	3302      	adds	r3, #2
 800cb50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cb54:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800cb56:	697b      	ldr	r3, [r7, #20]
 800cb58:	f003 0303 	and.w	r3, r3, #3
 800cb5c:	009b      	lsls	r3, r3, #2
 800cb5e:	220f      	movs	r2, #15
 800cb60:	fa02 f303 	lsl.w	r3, r2, r3
 800cb64:	43db      	mvns	r3, r3
 800cb66:	693a      	ldr	r2, [r7, #16]
 800cb68:	4013      	ands	r3, r2
 800cb6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800cb72:	d01f      	beq.n	800cbb4 <HAL_GPIO_Init+0x1f8>
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	4a4c      	ldr	r2, [pc, #304]	@ (800cca8 <HAL_GPIO_Init+0x2ec>)
 800cb78:	4293      	cmp	r3, r2
 800cb7a:	d019      	beq.n	800cbb0 <HAL_GPIO_Init+0x1f4>
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	4a4b      	ldr	r2, [pc, #300]	@ (800ccac <HAL_GPIO_Init+0x2f0>)
 800cb80:	4293      	cmp	r3, r2
 800cb82:	d013      	beq.n	800cbac <HAL_GPIO_Init+0x1f0>
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	4a4a      	ldr	r2, [pc, #296]	@ (800ccb0 <HAL_GPIO_Init+0x2f4>)
 800cb88:	4293      	cmp	r3, r2
 800cb8a:	d00d      	beq.n	800cba8 <HAL_GPIO_Init+0x1ec>
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	4a49      	ldr	r2, [pc, #292]	@ (800ccb4 <HAL_GPIO_Init+0x2f8>)
 800cb90:	4293      	cmp	r3, r2
 800cb92:	d007      	beq.n	800cba4 <HAL_GPIO_Init+0x1e8>
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	4a48      	ldr	r2, [pc, #288]	@ (800ccb8 <HAL_GPIO_Init+0x2fc>)
 800cb98:	4293      	cmp	r3, r2
 800cb9a:	d101      	bne.n	800cba0 <HAL_GPIO_Init+0x1e4>
 800cb9c:	2305      	movs	r3, #5
 800cb9e:	e00a      	b.n	800cbb6 <HAL_GPIO_Init+0x1fa>
 800cba0:	2306      	movs	r3, #6
 800cba2:	e008      	b.n	800cbb6 <HAL_GPIO_Init+0x1fa>
 800cba4:	2304      	movs	r3, #4
 800cba6:	e006      	b.n	800cbb6 <HAL_GPIO_Init+0x1fa>
 800cba8:	2303      	movs	r3, #3
 800cbaa:	e004      	b.n	800cbb6 <HAL_GPIO_Init+0x1fa>
 800cbac:	2302      	movs	r3, #2
 800cbae:	e002      	b.n	800cbb6 <HAL_GPIO_Init+0x1fa>
 800cbb0:	2301      	movs	r3, #1
 800cbb2:	e000      	b.n	800cbb6 <HAL_GPIO_Init+0x1fa>
 800cbb4:	2300      	movs	r3, #0
 800cbb6:	697a      	ldr	r2, [r7, #20]
 800cbb8:	f002 0203 	and.w	r2, r2, #3
 800cbbc:	0092      	lsls	r2, r2, #2
 800cbbe:	4093      	lsls	r3, r2
 800cbc0:	693a      	ldr	r2, [r7, #16]
 800cbc2:	4313      	orrs	r3, r2
 800cbc4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800cbc6:	4937      	ldr	r1, [pc, #220]	@ (800cca4 <HAL_GPIO_Init+0x2e8>)
 800cbc8:	697b      	ldr	r3, [r7, #20]
 800cbca:	089b      	lsrs	r3, r3, #2
 800cbcc:	3302      	adds	r3, #2
 800cbce:	693a      	ldr	r2, [r7, #16]
 800cbd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800cbd4:	4b39      	ldr	r3, [pc, #228]	@ (800ccbc <HAL_GPIO_Init+0x300>)
 800cbd6:	689b      	ldr	r3, [r3, #8]
 800cbd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	43db      	mvns	r3, r3
 800cbde:	693a      	ldr	r2, [r7, #16]
 800cbe0:	4013      	ands	r3, r2
 800cbe2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800cbe4:	683b      	ldr	r3, [r7, #0]
 800cbe6:	685b      	ldr	r3, [r3, #4]
 800cbe8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d003      	beq.n	800cbf8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800cbf0:	693a      	ldr	r2, [r7, #16]
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	4313      	orrs	r3, r2
 800cbf6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800cbf8:	4a30      	ldr	r2, [pc, #192]	@ (800ccbc <HAL_GPIO_Init+0x300>)
 800cbfa:	693b      	ldr	r3, [r7, #16]
 800cbfc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800cbfe:	4b2f      	ldr	r3, [pc, #188]	@ (800ccbc <HAL_GPIO_Init+0x300>)
 800cc00:	68db      	ldr	r3, [r3, #12]
 800cc02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	43db      	mvns	r3, r3
 800cc08:	693a      	ldr	r2, [r7, #16]
 800cc0a:	4013      	ands	r3, r2
 800cc0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800cc0e:	683b      	ldr	r3, [r7, #0]
 800cc10:	685b      	ldr	r3, [r3, #4]
 800cc12:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d003      	beq.n	800cc22 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800cc1a:	693a      	ldr	r2, [r7, #16]
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	4313      	orrs	r3, r2
 800cc20:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800cc22:	4a26      	ldr	r2, [pc, #152]	@ (800ccbc <HAL_GPIO_Init+0x300>)
 800cc24:	693b      	ldr	r3, [r7, #16]
 800cc26:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800cc28:	4b24      	ldr	r3, [pc, #144]	@ (800ccbc <HAL_GPIO_Init+0x300>)
 800cc2a:	685b      	ldr	r3, [r3, #4]
 800cc2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	43db      	mvns	r3, r3
 800cc32:	693a      	ldr	r2, [r7, #16]
 800cc34:	4013      	ands	r3, r2
 800cc36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800cc38:	683b      	ldr	r3, [r7, #0]
 800cc3a:	685b      	ldr	r3, [r3, #4]
 800cc3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d003      	beq.n	800cc4c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800cc44:	693a      	ldr	r2, [r7, #16]
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	4313      	orrs	r3, r2
 800cc4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800cc4c:	4a1b      	ldr	r2, [pc, #108]	@ (800ccbc <HAL_GPIO_Init+0x300>)
 800cc4e:	693b      	ldr	r3, [r7, #16]
 800cc50:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800cc52:	4b1a      	ldr	r3, [pc, #104]	@ (800ccbc <HAL_GPIO_Init+0x300>)
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	43db      	mvns	r3, r3
 800cc5c:	693a      	ldr	r2, [r7, #16]
 800cc5e:	4013      	ands	r3, r2
 800cc60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800cc62:	683b      	ldr	r3, [r7, #0]
 800cc64:	685b      	ldr	r3, [r3, #4]
 800cc66:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d003      	beq.n	800cc76 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800cc6e:	693a      	ldr	r2, [r7, #16]
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	4313      	orrs	r3, r2
 800cc74:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800cc76:	4a11      	ldr	r2, [pc, #68]	@ (800ccbc <HAL_GPIO_Init+0x300>)
 800cc78:	693b      	ldr	r3, [r7, #16]
 800cc7a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800cc7c:	697b      	ldr	r3, [r7, #20]
 800cc7e:	3301      	adds	r3, #1
 800cc80:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800cc82:	683b      	ldr	r3, [r7, #0]
 800cc84:	681a      	ldr	r2, [r3, #0]
 800cc86:	697b      	ldr	r3, [r7, #20]
 800cc88:	fa22 f303 	lsr.w	r3, r2, r3
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	f47f ae9d 	bne.w	800c9cc <HAL_GPIO_Init+0x10>
  }
}
 800cc92:	bf00      	nop
 800cc94:	bf00      	nop
 800cc96:	371c      	adds	r7, #28
 800cc98:	46bd      	mov	sp, r7
 800cc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc9e:	4770      	bx	lr
 800cca0:	40021000 	.word	0x40021000
 800cca4:	40010000 	.word	0x40010000
 800cca8:	48000400 	.word	0x48000400
 800ccac:	48000800 	.word	0x48000800
 800ccb0:	48000c00 	.word	0x48000c00
 800ccb4:	48001000 	.word	0x48001000
 800ccb8:	48001400 	.word	0x48001400
 800ccbc:	40010400 	.word	0x40010400

0800ccc0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800ccc0:	b480      	push	{r7}
 800ccc2:	b085      	sub	sp, #20
 800ccc4:	af00      	add	r7, sp, #0
 800ccc6:	6078      	str	r0, [r7, #4]
 800ccc8:	460b      	mov	r3, r1
 800ccca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	691a      	ldr	r2, [r3, #16]
 800ccd0:	887b      	ldrh	r3, [r7, #2]
 800ccd2:	4013      	ands	r3, r2
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d002      	beq.n	800ccde <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800ccd8:	2301      	movs	r3, #1
 800ccda:	73fb      	strb	r3, [r7, #15]
 800ccdc:	e001      	b.n	800cce2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800ccde:	2300      	movs	r3, #0
 800cce0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800cce2:	7bfb      	ldrb	r3, [r7, #15]
}
 800cce4:	4618      	mov	r0, r3
 800cce6:	3714      	adds	r7, #20
 800cce8:	46bd      	mov	sp, r7
 800ccea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccee:	4770      	bx	lr

0800ccf0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800ccf0:	b480      	push	{r7}
 800ccf2:	b083      	sub	sp, #12
 800ccf4:	af00      	add	r7, sp, #0
 800ccf6:	6078      	str	r0, [r7, #4]
 800ccf8:	460b      	mov	r3, r1
 800ccfa:	807b      	strh	r3, [r7, #2]
 800ccfc:	4613      	mov	r3, r2
 800ccfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800cd00:	787b      	ldrb	r3, [r7, #1]
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d003      	beq.n	800cd0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800cd06:	887a      	ldrh	r2, [r7, #2]
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800cd0c:	e002      	b.n	800cd14 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800cd0e:	887a      	ldrh	r2, [r7, #2]
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800cd14:	bf00      	nop
 800cd16:	370c      	adds	r7, #12
 800cd18:	46bd      	mov	sp, r7
 800cd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd1e:	4770      	bx	lr

0800cd20 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800cd20:	b480      	push	{r7}
 800cd22:	b085      	sub	sp, #20
 800cd24:	af00      	add	r7, sp, #0
 800cd26:	6078      	str	r0, [r7, #4]
 800cd28:	460b      	mov	r3, r1
 800cd2a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	695b      	ldr	r3, [r3, #20]
 800cd30:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800cd32:	887a      	ldrh	r2, [r7, #2]
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	4013      	ands	r3, r2
 800cd38:	041a      	lsls	r2, r3, #16
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	43d9      	mvns	r1, r3
 800cd3e:	887b      	ldrh	r3, [r7, #2]
 800cd40:	400b      	ands	r3, r1
 800cd42:	431a      	orrs	r2, r3
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	619a      	str	r2, [r3, #24]
}
 800cd48:	bf00      	nop
 800cd4a:	3714      	adds	r7, #20
 800cd4c:	46bd      	mov	sp, r7
 800cd4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd52:	4770      	bx	lr

0800cd54 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800cd54:	b580      	push	{r7, lr}
 800cd56:	b082      	sub	sp, #8
 800cd58:	af00      	add	r7, sp, #0
 800cd5a:	4603      	mov	r3, r0
 800cd5c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800cd5e:	4b08      	ldr	r3, [pc, #32]	@ (800cd80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800cd60:	695a      	ldr	r2, [r3, #20]
 800cd62:	88fb      	ldrh	r3, [r7, #6]
 800cd64:	4013      	ands	r3, r2
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d006      	beq.n	800cd78 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800cd6a:	4a05      	ldr	r2, [pc, #20]	@ (800cd80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800cd6c:	88fb      	ldrh	r3, [r7, #6]
 800cd6e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800cd70:	88fb      	ldrh	r3, [r7, #6]
 800cd72:	4618      	mov	r0, r3
 800cd74:	f7fb fc9c 	bl	80086b0 <HAL_GPIO_EXTI_Callback>
  }
}
 800cd78:	bf00      	nop
 800cd7a:	3708      	adds	r7, #8
 800cd7c:	46bd      	mov	sp, r7
 800cd7e:	bd80      	pop	{r7, pc}
 800cd80:	40010400 	.word	0x40010400

0800cd84 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800cd84:	b480      	push	{r7}
 800cd86:	b085      	sub	sp, #20
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d141      	bne.n	800ce16 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800cd92:	4b4b      	ldr	r3, [pc, #300]	@ (800cec0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800cd9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cd9e:	d131      	bne.n	800ce04 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800cda0:	4b47      	ldr	r3, [pc, #284]	@ (800cec0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cda2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cda6:	4a46      	ldr	r2, [pc, #280]	@ (800cec0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cda8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cdac:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800cdb0:	4b43      	ldr	r3, [pc, #268]	@ (800cec0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800cdb8:	4a41      	ldr	r2, [pc, #260]	@ (800cec0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cdba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800cdbe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800cdc0:	4b40      	ldr	r3, [pc, #256]	@ (800cec4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	2232      	movs	r2, #50	@ 0x32
 800cdc6:	fb02 f303 	mul.w	r3, r2, r3
 800cdca:	4a3f      	ldr	r2, [pc, #252]	@ (800cec8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800cdcc:	fba2 2303 	umull	r2, r3, r2, r3
 800cdd0:	0c9b      	lsrs	r3, r3, #18
 800cdd2:	3301      	adds	r3, #1
 800cdd4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800cdd6:	e002      	b.n	800cdde <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	3b01      	subs	r3, #1
 800cddc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800cdde:	4b38      	ldr	r3, [pc, #224]	@ (800cec0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cde0:	695b      	ldr	r3, [r3, #20]
 800cde2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cde6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cdea:	d102      	bne.n	800cdf2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d1f2      	bne.n	800cdd8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800cdf2:	4b33      	ldr	r3, [pc, #204]	@ (800cec0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cdf4:	695b      	ldr	r3, [r3, #20]
 800cdf6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cdfa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cdfe:	d158      	bne.n	800ceb2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800ce00:	2303      	movs	r3, #3
 800ce02:	e057      	b.n	800ceb4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800ce04:	4b2e      	ldr	r3, [pc, #184]	@ (800cec0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ce06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ce0a:	4a2d      	ldr	r2, [pc, #180]	@ (800cec0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ce0c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ce10:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800ce14:	e04d      	b.n	800ceb2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ce1c:	d141      	bne.n	800cea2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800ce1e:	4b28      	ldr	r3, [pc, #160]	@ (800cec0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800ce26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ce2a:	d131      	bne.n	800ce90 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800ce2c:	4b24      	ldr	r3, [pc, #144]	@ (800cec0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ce2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ce32:	4a23      	ldr	r2, [pc, #140]	@ (800cec0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ce34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ce38:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800ce3c:	4b20      	ldr	r3, [pc, #128]	@ (800cec0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800ce44:	4a1e      	ldr	r2, [pc, #120]	@ (800cec0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ce46:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800ce4a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800ce4c:	4b1d      	ldr	r3, [pc, #116]	@ (800cec4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	2232      	movs	r2, #50	@ 0x32
 800ce52:	fb02 f303 	mul.w	r3, r2, r3
 800ce56:	4a1c      	ldr	r2, [pc, #112]	@ (800cec8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800ce58:	fba2 2303 	umull	r2, r3, r2, r3
 800ce5c:	0c9b      	lsrs	r3, r3, #18
 800ce5e:	3301      	adds	r3, #1
 800ce60:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800ce62:	e002      	b.n	800ce6a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	3b01      	subs	r3, #1
 800ce68:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800ce6a:	4b15      	ldr	r3, [pc, #84]	@ (800cec0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ce6c:	695b      	ldr	r3, [r3, #20]
 800ce6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ce72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ce76:	d102      	bne.n	800ce7e <HAL_PWREx_ControlVoltageScaling+0xfa>
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d1f2      	bne.n	800ce64 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800ce7e:	4b10      	ldr	r3, [pc, #64]	@ (800cec0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ce80:	695b      	ldr	r3, [r3, #20]
 800ce82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ce86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ce8a:	d112      	bne.n	800ceb2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800ce8c:	2303      	movs	r3, #3
 800ce8e:	e011      	b.n	800ceb4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800ce90:	4b0b      	ldr	r3, [pc, #44]	@ (800cec0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ce92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ce96:	4a0a      	ldr	r2, [pc, #40]	@ (800cec0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ce98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ce9c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800cea0:	e007      	b.n	800ceb2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800cea2:	4b07      	ldr	r3, [pc, #28]	@ (800cec0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800ceaa:	4a05      	ldr	r2, [pc, #20]	@ (800cec0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ceac:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800ceb0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800ceb2:	2300      	movs	r3, #0
}
 800ceb4:	4618      	mov	r0, r3
 800ceb6:	3714      	adds	r7, #20
 800ceb8:	46bd      	mov	sp, r7
 800ceba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cebe:	4770      	bx	lr
 800cec0:	40007000 	.word	0x40007000
 800cec4:	20000338 	.word	0x20000338
 800cec8:	431bde83 	.word	0x431bde83

0800cecc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800cecc:	b480      	push	{r7}
 800cece:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800ced0:	4b05      	ldr	r3, [pc, #20]	@ (800cee8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800ced2:	689b      	ldr	r3, [r3, #8]
 800ced4:	4a04      	ldr	r2, [pc, #16]	@ (800cee8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800ced6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800ceda:	6093      	str	r3, [r2, #8]
}
 800cedc:	bf00      	nop
 800cede:	46bd      	mov	sp, r7
 800cee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee4:	4770      	bx	lr
 800cee6:	bf00      	nop
 800cee8:	40007000 	.word	0x40007000

0800ceec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ceec:	b580      	push	{r7, lr}
 800ceee:	b088      	sub	sp, #32
 800cef0:	af00      	add	r7, sp, #0
 800cef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d101      	bne.n	800cefe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800cefa:	2301      	movs	r3, #1
 800cefc:	e2fe      	b.n	800d4fc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	f003 0301 	and.w	r3, r3, #1
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d075      	beq.n	800cff6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800cf0a:	4b97      	ldr	r3, [pc, #604]	@ (800d168 <HAL_RCC_OscConfig+0x27c>)
 800cf0c:	689b      	ldr	r3, [r3, #8]
 800cf0e:	f003 030c 	and.w	r3, r3, #12
 800cf12:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800cf14:	4b94      	ldr	r3, [pc, #592]	@ (800d168 <HAL_RCC_OscConfig+0x27c>)
 800cf16:	68db      	ldr	r3, [r3, #12]
 800cf18:	f003 0303 	and.w	r3, r3, #3
 800cf1c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800cf1e:	69bb      	ldr	r3, [r7, #24]
 800cf20:	2b0c      	cmp	r3, #12
 800cf22:	d102      	bne.n	800cf2a <HAL_RCC_OscConfig+0x3e>
 800cf24:	697b      	ldr	r3, [r7, #20]
 800cf26:	2b03      	cmp	r3, #3
 800cf28:	d002      	beq.n	800cf30 <HAL_RCC_OscConfig+0x44>
 800cf2a:	69bb      	ldr	r3, [r7, #24]
 800cf2c:	2b08      	cmp	r3, #8
 800cf2e:	d10b      	bne.n	800cf48 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cf30:	4b8d      	ldr	r3, [pc, #564]	@ (800d168 <HAL_RCC_OscConfig+0x27c>)
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d05b      	beq.n	800cff4 <HAL_RCC_OscConfig+0x108>
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	685b      	ldr	r3, [r3, #4]
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d157      	bne.n	800cff4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800cf44:	2301      	movs	r3, #1
 800cf46:	e2d9      	b.n	800d4fc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	685b      	ldr	r3, [r3, #4]
 800cf4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cf50:	d106      	bne.n	800cf60 <HAL_RCC_OscConfig+0x74>
 800cf52:	4b85      	ldr	r3, [pc, #532]	@ (800d168 <HAL_RCC_OscConfig+0x27c>)
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	4a84      	ldr	r2, [pc, #528]	@ (800d168 <HAL_RCC_OscConfig+0x27c>)
 800cf58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800cf5c:	6013      	str	r3, [r2, #0]
 800cf5e:	e01d      	b.n	800cf9c <HAL_RCC_OscConfig+0xb0>
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	685b      	ldr	r3, [r3, #4]
 800cf64:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800cf68:	d10c      	bne.n	800cf84 <HAL_RCC_OscConfig+0x98>
 800cf6a:	4b7f      	ldr	r3, [pc, #508]	@ (800d168 <HAL_RCC_OscConfig+0x27c>)
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	4a7e      	ldr	r2, [pc, #504]	@ (800d168 <HAL_RCC_OscConfig+0x27c>)
 800cf70:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800cf74:	6013      	str	r3, [r2, #0]
 800cf76:	4b7c      	ldr	r3, [pc, #496]	@ (800d168 <HAL_RCC_OscConfig+0x27c>)
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	4a7b      	ldr	r2, [pc, #492]	@ (800d168 <HAL_RCC_OscConfig+0x27c>)
 800cf7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800cf80:	6013      	str	r3, [r2, #0]
 800cf82:	e00b      	b.n	800cf9c <HAL_RCC_OscConfig+0xb0>
 800cf84:	4b78      	ldr	r3, [pc, #480]	@ (800d168 <HAL_RCC_OscConfig+0x27c>)
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	4a77      	ldr	r2, [pc, #476]	@ (800d168 <HAL_RCC_OscConfig+0x27c>)
 800cf8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800cf8e:	6013      	str	r3, [r2, #0]
 800cf90:	4b75      	ldr	r3, [pc, #468]	@ (800d168 <HAL_RCC_OscConfig+0x27c>)
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	4a74      	ldr	r2, [pc, #464]	@ (800d168 <HAL_RCC_OscConfig+0x27c>)
 800cf96:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800cf9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	685b      	ldr	r3, [r3, #4]
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d013      	beq.n	800cfcc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cfa4:	f7fd fc44 	bl	800a830 <HAL_GetTick>
 800cfa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800cfaa:	e008      	b.n	800cfbe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800cfac:	f7fd fc40 	bl	800a830 <HAL_GetTick>
 800cfb0:	4602      	mov	r2, r0
 800cfb2:	693b      	ldr	r3, [r7, #16]
 800cfb4:	1ad3      	subs	r3, r2, r3
 800cfb6:	2b64      	cmp	r3, #100	@ 0x64
 800cfb8:	d901      	bls.n	800cfbe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800cfba:	2303      	movs	r3, #3
 800cfbc:	e29e      	b.n	800d4fc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800cfbe:	4b6a      	ldr	r3, [pc, #424]	@ (800d168 <HAL_RCC_OscConfig+0x27c>)
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d0f0      	beq.n	800cfac <HAL_RCC_OscConfig+0xc0>
 800cfca:	e014      	b.n	800cff6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cfcc:	f7fd fc30 	bl	800a830 <HAL_GetTick>
 800cfd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800cfd2:	e008      	b.n	800cfe6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800cfd4:	f7fd fc2c 	bl	800a830 <HAL_GetTick>
 800cfd8:	4602      	mov	r2, r0
 800cfda:	693b      	ldr	r3, [r7, #16]
 800cfdc:	1ad3      	subs	r3, r2, r3
 800cfde:	2b64      	cmp	r3, #100	@ 0x64
 800cfe0:	d901      	bls.n	800cfe6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800cfe2:	2303      	movs	r3, #3
 800cfe4:	e28a      	b.n	800d4fc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800cfe6:	4b60      	ldr	r3, [pc, #384]	@ (800d168 <HAL_RCC_OscConfig+0x27c>)
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d1f0      	bne.n	800cfd4 <HAL_RCC_OscConfig+0xe8>
 800cff2:	e000      	b.n	800cff6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cff4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	f003 0302 	and.w	r3, r3, #2
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d075      	beq.n	800d0ee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d002:	4b59      	ldr	r3, [pc, #356]	@ (800d168 <HAL_RCC_OscConfig+0x27c>)
 800d004:	689b      	ldr	r3, [r3, #8]
 800d006:	f003 030c 	and.w	r3, r3, #12
 800d00a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800d00c:	4b56      	ldr	r3, [pc, #344]	@ (800d168 <HAL_RCC_OscConfig+0x27c>)
 800d00e:	68db      	ldr	r3, [r3, #12]
 800d010:	f003 0303 	and.w	r3, r3, #3
 800d014:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800d016:	69bb      	ldr	r3, [r7, #24]
 800d018:	2b0c      	cmp	r3, #12
 800d01a:	d102      	bne.n	800d022 <HAL_RCC_OscConfig+0x136>
 800d01c:	697b      	ldr	r3, [r7, #20]
 800d01e:	2b02      	cmp	r3, #2
 800d020:	d002      	beq.n	800d028 <HAL_RCC_OscConfig+0x13c>
 800d022:	69bb      	ldr	r3, [r7, #24]
 800d024:	2b04      	cmp	r3, #4
 800d026:	d11f      	bne.n	800d068 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d028:	4b4f      	ldr	r3, [pc, #316]	@ (800d168 <HAL_RCC_OscConfig+0x27c>)
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d030:	2b00      	cmp	r3, #0
 800d032:	d005      	beq.n	800d040 <HAL_RCC_OscConfig+0x154>
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	68db      	ldr	r3, [r3, #12]
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d101      	bne.n	800d040 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800d03c:	2301      	movs	r3, #1
 800d03e:	e25d      	b.n	800d4fc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d040:	4b49      	ldr	r3, [pc, #292]	@ (800d168 <HAL_RCC_OscConfig+0x27c>)
 800d042:	685b      	ldr	r3, [r3, #4]
 800d044:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	691b      	ldr	r3, [r3, #16]
 800d04c:	061b      	lsls	r3, r3, #24
 800d04e:	4946      	ldr	r1, [pc, #280]	@ (800d168 <HAL_RCC_OscConfig+0x27c>)
 800d050:	4313      	orrs	r3, r2
 800d052:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800d054:	4b45      	ldr	r3, [pc, #276]	@ (800d16c <HAL_RCC_OscConfig+0x280>)
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	4618      	mov	r0, r3
 800d05a:	f7fd fb9d 	bl	800a798 <HAL_InitTick>
 800d05e:	4603      	mov	r3, r0
 800d060:	2b00      	cmp	r3, #0
 800d062:	d043      	beq.n	800d0ec <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800d064:	2301      	movs	r3, #1
 800d066:	e249      	b.n	800d4fc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	68db      	ldr	r3, [r3, #12]
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d023      	beq.n	800d0b8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800d070:	4b3d      	ldr	r3, [pc, #244]	@ (800d168 <HAL_RCC_OscConfig+0x27c>)
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	4a3c      	ldr	r2, [pc, #240]	@ (800d168 <HAL_RCC_OscConfig+0x27c>)
 800d076:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d07a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d07c:	f7fd fbd8 	bl	800a830 <HAL_GetTick>
 800d080:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800d082:	e008      	b.n	800d096 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d084:	f7fd fbd4 	bl	800a830 <HAL_GetTick>
 800d088:	4602      	mov	r2, r0
 800d08a:	693b      	ldr	r3, [r7, #16]
 800d08c:	1ad3      	subs	r3, r2, r3
 800d08e:	2b02      	cmp	r3, #2
 800d090:	d901      	bls.n	800d096 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800d092:	2303      	movs	r3, #3
 800d094:	e232      	b.n	800d4fc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800d096:	4b34      	ldr	r3, [pc, #208]	@ (800d168 <HAL_RCC_OscConfig+0x27c>)
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d0f0      	beq.n	800d084 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d0a2:	4b31      	ldr	r3, [pc, #196]	@ (800d168 <HAL_RCC_OscConfig+0x27c>)
 800d0a4:	685b      	ldr	r3, [r3, #4]
 800d0a6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	691b      	ldr	r3, [r3, #16]
 800d0ae:	061b      	lsls	r3, r3, #24
 800d0b0:	492d      	ldr	r1, [pc, #180]	@ (800d168 <HAL_RCC_OscConfig+0x27c>)
 800d0b2:	4313      	orrs	r3, r2
 800d0b4:	604b      	str	r3, [r1, #4]
 800d0b6:	e01a      	b.n	800d0ee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800d0b8:	4b2b      	ldr	r3, [pc, #172]	@ (800d168 <HAL_RCC_OscConfig+0x27c>)
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	4a2a      	ldr	r2, [pc, #168]	@ (800d168 <HAL_RCC_OscConfig+0x27c>)
 800d0be:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d0c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d0c4:	f7fd fbb4 	bl	800a830 <HAL_GetTick>
 800d0c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800d0ca:	e008      	b.n	800d0de <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d0cc:	f7fd fbb0 	bl	800a830 <HAL_GetTick>
 800d0d0:	4602      	mov	r2, r0
 800d0d2:	693b      	ldr	r3, [r7, #16]
 800d0d4:	1ad3      	subs	r3, r2, r3
 800d0d6:	2b02      	cmp	r3, #2
 800d0d8:	d901      	bls.n	800d0de <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800d0da:	2303      	movs	r3, #3
 800d0dc:	e20e      	b.n	800d4fc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800d0de:	4b22      	ldr	r3, [pc, #136]	@ (800d168 <HAL_RCC_OscConfig+0x27c>)
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d1f0      	bne.n	800d0cc <HAL_RCC_OscConfig+0x1e0>
 800d0ea:	e000      	b.n	800d0ee <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d0ec:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	f003 0308 	and.w	r3, r3, #8
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d041      	beq.n	800d17e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	695b      	ldr	r3, [r3, #20]
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d01c      	beq.n	800d13c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800d102:	4b19      	ldr	r3, [pc, #100]	@ (800d168 <HAL_RCC_OscConfig+0x27c>)
 800d104:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d108:	4a17      	ldr	r2, [pc, #92]	@ (800d168 <HAL_RCC_OscConfig+0x27c>)
 800d10a:	f043 0301 	orr.w	r3, r3, #1
 800d10e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d112:	f7fd fb8d 	bl	800a830 <HAL_GetTick>
 800d116:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800d118:	e008      	b.n	800d12c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d11a:	f7fd fb89 	bl	800a830 <HAL_GetTick>
 800d11e:	4602      	mov	r2, r0
 800d120:	693b      	ldr	r3, [r7, #16]
 800d122:	1ad3      	subs	r3, r2, r3
 800d124:	2b02      	cmp	r3, #2
 800d126:	d901      	bls.n	800d12c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800d128:	2303      	movs	r3, #3
 800d12a:	e1e7      	b.n	800d4fc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800d12c:	4b0e      	ldr	r3, [pc, #56]	@ (800d168 <HAL_RCC_OscConfig+0x27c>)
 800d12e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d132:	f003 0302 	and.w	r3, r3, #2
 800d136:	2b00      	cmp	r3, #0
 800d138:	d0ef      	beq.n	800d11a <HAL_RCC_OscConfig+0x22e>
 800d13a:	e020      	b.n	800d17e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800d13c:	4b0a      	ldr	r3, [pc, #40]	@ (800d168 <HAL_RCC_OscConfig+0x27c>)
 800d13e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d142:	4a09      	ldr	r2, [pc, #36]	@ (800d168 <HAL_RCC_OscConfig+0x27c>)
 800d144:	f023 0301 	bic.w	r3, r3, #1
 800d148:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d14c:	f7fd fb70 	bl	800a830 <HAL_GetTick>
 800d150:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800d152:	e00d      	b.n	800d170 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d154:	f7fd fb6c 	bl	800a830 <HAL_GetTick>
 800d158:	4602      	mov	r2, r0
 800d15a:	693b      	ldr	r3, [r7, #16]
 800d15c:	1ad3      	subs	r3, r2, r3
 800d15e:	2b02      	cmp	r3, #2
 800d160:	d906      	bls.n	800d170 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800d162:	2303      	movs	r3, #3
 800d164:	e1ca      	b.n	800d4fc <HAL_RCC_OscConfig+0x610>
 800d166:	bf00      	nop
 800d168:	40021000 	.word	0x40021000
 800d16c:	2000033c 	.word	0x2000033c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800d170:	4b8c      	ldr	r3, [pc, #560]	@ (800d3a4 <HAL_RCC_OscConfig+0x4b8>)
 800d172:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d176:	f003 0302 	and.w	r3, r3, #2
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d1ea      	bne.n	800d154 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	f003 0304 	and.w	r3, r3, #4
 800d186:	2b00      	cmp	r3, #0
 800d188:	f000 80a6 	beq.w	800d2d8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800d18c:	2300      	movs	r3, #0
 800d18e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800d190:	4b84      	ldr	r3, [pc, #528]	@ (800d3a4 <HAL_RCC_OscConfig+0x4b8>)
 800d192:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d194:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d101      	bne.n	800d1a0 <HAL_RCC_OscConfig+0x2b4>
 800d19c:	2301      	movs	r3, #1
 800d19e:	e000      	b.n	800d1a2 <HAL_RCC_OscConfig+0x2b6>
 800d1a0:	2300      	movs	r3, #0
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d00d      	beq.n	800d1c2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d1a6:	4b7f      	ldr	r3, [pc, #508]	@ (800d3a4 <HAL_RCC_OscConfig+0x4b8>)
 800d1a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d1aa:	4a7e      	ldr	r2, [pc, #504]	@ (800d3a4 <HAL_RCC_OscConfig+0x4b8>)
 800d1ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d1b0:	6593      	str	r3, [r2, #88]	@ 0x58
 800d1b2:	4b7c      	ldr	r3, [pc, #496]	@ (800d3a4 <HAL_RCC_OscConfig+0x4b8>)
 800d1b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d1b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d1ba:	60fb      	str	r3, [r7, #12]
 800d1bc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800d1be:	2301      	movs	r3, #1
 800d1c0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d1c2:	4b79      	ldr	r3, [pc, #484]	@ (800d3a8 <HAL_RCC_OscConfig+0x4bc>)
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d118      	bne.n	800d200 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800d1ce:	4b76      	ldr	r3, [pc, #472]	@ (800d3a8 <HAL_RCC_OscConfig+0x4bc>)
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	4a75      	ldr	r2, [pc, #468]	@ (800d3a8 <HAL_RCC_OscConfig+0x4bc>)
 800d1d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d1d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800d1da:	f7fd fb29 	bl	800a830 <HAL_GetTick>
 800d1de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d1e0:	e008      	b.n	800d1f4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d1e2:	f7fd fb25 	bl	800a830 <HAL_GetTick>
 800d1e6:	4602      	mov	r2, r0
 800d1e8:	693b      	ldr	r3, [r7, #16]
 800d1ea:	1ad3      	subs	r3, r2, r3
 800d1ec:	2b02      	cmp	r3, #2
 800d1ee:	d901      	bls.n	800d1f4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800d1f0:	2303      	movs	r3, #3
 800d1f2:	e183      	b.n	800d4fc <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d1f4:	4b6c      	ldr	r3, [pc, #432]	@ (800d3a8 <HAL_RCC_OscConfig+0x4bc>)
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d0f0      	beq.n	800d1e2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	689b      	ldr	r3, [r3, #8]
 800d204:	2b01      	cmp	r3, #1
 800d206:	d108      	bne.n	800d21a <HAL_RCC_OscConfig+0x32e>
 800d208:	4b66      	ldr	r3, [pc, #408]	@ (800d3a4 <HAL_RCC_OscConfig+0x4b8>)
 800d20a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d20e:	4a65      	ldr	r2, [pc, #404]	@ (800d3a4 <HAL_RCC_OscConfig+0x4b8>)
 800d210:	f043 0301 	orr.w	r3, r3, #1
 800d214:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800d218:	e024      	b.n	800d264 <HAL_RCC_OscConfig+0x378>
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	689b      	ldr	r3, [r3, #8]
 800d21e:	2b05      	cmp	r3, #5
 800d220:	d110      	bne.n	800d244 <HAL_RCC_OscConfig+0x358>
 800d222:	4b60      	ldr	r3, [pc, #384]	@ (800d3a4 <HAL_RCC_OscConfig+0x4b8>)
 800d224:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d228:	4a5e      	ldr	r2, [pc, #376]	@ (800d3a4 <HAL_RCC_OscConfig+0x4b8>)
 800d22a:	f043 0304 	orr.w	r3, r3, #4
 800d22e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800d232:	4b5c      	ldr	r3, [pc, #368]	@ (800d3a4 <HAL_RCC_OscConfig+0x4b8>)
 800d234:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d238:	4a5a      	ldr	r2, [pc, #360]	@ (800d3a4 <HAL_RCC_OscConfig+0x4b8>)
 800d23a:	f043 0301 	orr.w	r3, r3, #1
 800d23e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800d242:	e00f      	b.n	800d264 <HAL_RCC_OscConfig+0x378>
 800d244:	4b57      	ldr	r3, [pc, #348]	@ (800d3a4 <HAL_RCC_OscConfig+0x4b8>)
 800d246:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d24a:	4a56      	ldr	r2, [pc, #344]	@ (800d3a4 <HAL_RCC_OscConfig+0x4b8>)
 800d24c:	f023 0301 	bic.w	r3, r3, #1
 800d250:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800d254:	4b53      	ldr	r3, [pc, #332]	@ (800d3a4 <HAL_RCC_OscConfig+0x4b8>)
 800d256:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d25a:	4a52      	ldr	r2, [pc, #328]	@ (800d3a4 <HAL_RCC_OscConfig+0x4b8>)
 800d25c:	f023 0304 	bic.w	r3, r3, #4
 800d260:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	689b      	ldr	r3, [r3, #8]
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d016      	beq.n	800d29a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d26c:	f7fd fae0 	bl	800a830 <HAL_GetTick>
 800d270:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d272:	e00a      	b.n	800d28a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d274:	f7fd fadc 	bl	800a830 <HAL_GetTick>
 800d278:	4602      	mov	r2, r0
 800d27a:	693b      	ldr	r3, [r7, #16]
 800d27c:	1ad3      	subs	r3, r2, r3
 800d27e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d282:	4293      	cmp	r3, r2
 800d284:	d901      	bls.n	800d28a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800d286:	2303      	movs	r3, #3
 800d288:	e138      	b.n	800d4fc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d28a:	4b46      	ldr	r3, [pc, #280]	@ (800d3a4 <HAL_RCC_OscConfig+0x4b8>)
 800d28c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d290:	f003 0302 	and.w	r3, r3, #2
 800d294:	2b00      	cmp	r3, #0
 800d296:	d0ed      	beq.n	800d274 <HAL_RCC_OscConfig+0x388>
 800d298:	e015      	b.n	800d2c6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d29a:	f7fd fac9 	bl	800a830 <HAL_GetTick>
 800d29e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800d2a0:	e00a      	b.n	800d2b8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d2a2:	f7fd fac5 	bl	800a830 <HAL_GetTick>
 800d2a6:	4602      	mov	r2, r0
 800d2a8:	693b      	ldr	r3, [r7, #16]
 800d2aa:	1ad3      	subs	r3, r2, r3
 800d2ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d2b0:	4293      	cmp	r3, r2
 800d2b2:	d901      	bls.n	800d2b8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800d2b4:	2303      	movs	r3, #3
 800d2b6:	e121      	b.n	800d4fc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800d2b8:	4b3a      	ldr	r3, [pc, #232]	@ (800d3a4 <HAL_RCC_OscConfig+0x4b8>)
 800d2ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d2be:	f003 0302 	and.w	r3, r3, #2
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d1ed      	bne.n	800d2a2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800d2c6:	7ffb      	ldrb	r3, [r7, #31]
 800d2c8:	2b01      	cmp	r3, #1
 800d2ca:	d105      	bne.n	800d2d8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d2cc:	4b35      	ldr	r3, [pc, #212]	@ (800d3a4 <HAL_RCC_OscConfig+0x4b8>)
 800d2ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d2d0:	4a34      	ldr	r2, [pc, #208]	@ (800d3a4 <HAL_RCC_OscConfig+0x4b8>)
 800d2d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d2d6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	f003 0320 	and.w	r3, r3, #32
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d03c      	beq.n	800d35e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	699b      	ldr	r3, [r3, #24]
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d01c      	beq.n	800d326 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800d2ec:	4b2d      	ldr	r3, [pc, #180]	@ (800d3a4 <HAL_RCC_OscConfig+0x4b8>)
 800d2ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800d2f2:	4a2c      	ldr	r2, [pc, #176]	@ (800d3a4 <HAL_RCC_OscConfig+0x4b8>)
 800d2f4:	f043 0301 	orr.w	r3, r3, #1
 800d2f8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d2fc:	f7fd fa98 	bl	800a830 <HAL_GetTick>
 800d300:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800d302:	e008      	b.n	800d316 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800d304:	f7fd fa94 	bl	800a830 <HAL_GetTick>
 800d308:	4602      	mov	r2, r0
 800d30a:	693b      	ldr	r3, [r7, #16]
 800d30c:	1ad3      	subs	r3, r2, r3
 800d30e:	2b02      	cmp	r3, #2
 800d310:	d901      	bls.n	800d316 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800d312:	2303      	movs	r3, #3
 800d314:	e0f2      	b.n	800d4fc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800d316:	4b23      	ldr	r3, [pc, #140]	@ (800d3a4 <HAL_RCC_OscConfig+0x4b8>)
 800d318:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800d31c:	f003 0302 	and.w	r3, r3, #2
 800d320:	2b00      	cmp	r3, #0
 800d322:	d0ef      	beq.n	800d304 <HAL_RCC_OscConfig+0x418>
 800d324:	e01b      	b.n	800d35e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800d326:	4b1f      	ldr	r3, [pc, #124]	@ (800d3a4 <HAL_RCC_OscConfig+0x4b8>)
 800d328:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800d32c:	4a1d      	ldr	r2, [pc, #116]	@ (800d3a4 <HAL_RCC_OscConfig+0x4b8>)
 800d32e:	f023 0301 	bic.w	r3, r3, #1
 800d332:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d336:	f7fd fa7b 	bl	800a830 <HAL_GetTick>
 800d33a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800d33c:	e008      	b.n	800d350 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800d33e:	f7fd fa77 	bl	800a830 <HAL_GetTick>
 800d342:	4602      	mov	r2, r0
 800d344:	693b      	ldr	r3, [r7, #16]
 800d346:	1ad3      	subs	r3, r2, r3
 800d348:	2b02      	cmp	r3, #2
 800d34a:	d901      	bls.n	800d350 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800d34c:	2303      	movs	r3, #3
 800d34e:	e0d5      	b.n	800d4fc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800d350:	4b14      	ldr	r3, [pc, #80]	@ (800d3a4 <HAL_RCC_OscConfig+0x4b8>)
 800d352:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800d356:	f003 0302 	and.w	r3, r3, #2
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d1ef      	bne.n	800d33e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	69db      	ldr	r3, [r3, #28]
 800d362:	2b00      	cmp	r3, #0
 800d364:	f000 80c9 	beq.w	800d4fa <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800d368:	4b0e      	ldr	r3, [pc, #56]	@ (800d3a4 <HAL_RCC_OscConfig+0x4b8>)
 800d36a:	689b      	ldr	r3, [r3, #8]
 800d36c:	f003 030c 	and.w	r3, r3, #12
 800d370:	2b0c      	cmp	r3, #12
 800d372:	f000 8083 	beq.w	800d47c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	69db      	ldr	r3, [r3, #28]
 800d37a:	2b02      	cmp	r3, #2
 800d37c:	d15e      	bne.n	800d43c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d37e:	4b09      	ldr	r3, [pc, #36]	@ (800d3a4 <HAL_RCC_OscConfig+0x4b8>)
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	4a08      	ldr	r2, [pc, #32]	@ (800d3a4 <HAL_RCC_OscConfig+0x4b8>)
 800d384:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800d388:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d38a:	f7fd fa51 	bl	800a830 <HAL_GetTick>
 800d38e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d390:	e00c      	b.n	800d3ac <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d392:	f7fd fa4d 	bl	800a830 <HAL_GetTick>
 800d396:	4602      	mov	r2, r0
 800d398:	693b      	ldr	r3, [r7, #16]
 800d39a:	1ad3      	subs	r3, r2, r3
 800d39c:	2b02      	cmp	r3, #2
 800d39e:	d905      	bls.n	800d3ac <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800d3a0:	2303      	movs	r3, #3
 800d3a2:	e0ab      	b.n	800d4fc <HAL_RCC_OscConfig+0x610>
 800d3a4:	40021000 	.word	0x40021000
 800d3a8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d3ac:	4b55      	ldr	r3, [pc, #340]	@ (800d504 <HAL_RCC_OscConfig+0x618>)
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d1ec      	bne.n	800d392 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800d3b8:	4b52      	ldr	r3, [pc, #328]	@ (800d504 <HAL_RCC_OscConfig+0x618>)
 800d3ba:	68da      	ldr	r2, [r3, #12]
 800d3bc:	4b52      	ldr	r3, [pc, #328]	@ (800d508 <HAL_RCC_OscConfig+0x61c>)
 800d3be:	4013      	ands	r3, r2
 800d3c0:	687a      	ldr	r2, [r7, #4]
 800d3c2:	6a11      	ldr	r1, [r2, #32]
 800d3c4:	687a      	ldr	r2, [r7, #4]
 800d3c6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800d3c8:	3a01      	subs	r2, #1
 800d3ca:	0112      	lsls	r2, r2, #4
 800d3cc:	4311      	orrs	r1, r2
 800d3ce:	687a      	ldr	r2, [r7, #4]
 800d3d0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800d3d2:	0212      	lsls	r2, r2, #8
 800d3d4:	4311      	orrs	r1, r2
 800d3d6:	687a      	ldr	r2, [r7, #4]
 800d3d8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800d3da:	0852      	lsrs	r2, r2, #1
 800d3dc:	3a01      	subs	r2, #1
 800d3de:	0552      	lsls	r2, r2, #21
 800d3e0:	4311      	orrs	r1, r2
 800d3e2:	687a      	ldr	r2, [r7, #4]
 800d3e4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800d3e6:	0852      	lsrs	r2, r2, #1
 800d3e8:	3a01      	subs	r2, #1
 800d3ea:	0652      	lsls	r2, r2, #25
 800d3ec:	4311      	orrs	r1, r2
 800d3ee:	687a      	ldr	r2, [r7, #4]
 800d3f0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800d3f2:	06d2      	lsls	r2, r2, #27
 800d3f4:	430a      	orrs	r2, r1
 800d3f6:	4943      	ldr	r1, [pc, #268]	@ (800d504 <HAL_RCC_OscConfig+0x618>)
 800d3f8:	4313      	orrs	r3, r2
 800d3fa:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800d3fc:	4b41      	ldr	r3, [pc, #260]	@ (800d504 <HAL_RCC_OscConfig+0x618>)
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	4a40      	ldr	r2, [pc, #256]	@ (800d504 <HAL_RCC_OscConfig+0x618>)
 800d402:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800d406:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800d408:	4b3e      	ldr	r3, [pc, #248]	@ (800d504 <HAL_RCC_OscConfig+0x618>)
 800d40a:	68db      	ldr	r3, [r3, #12]
 800d40c:	4a3d      	ldr	r2, [pc, #244]	@ (800d504 <HAL_RCC_OscConfig+0x618>)
 800d40e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800d412:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d414:	f7fd fa0c 	bl	800a830 <HAL_GetTick>
 800d418:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d41a:	e008      	b.n	800d42e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d41c:	f7fd fa08 	bl	800a830 <HAL_GetTick>
 800d420:	4602      	mov	r2, r0
 800d422:	693b      	ldr	r3, [r7, #16]
 800d424:	1ad3      	subs	r3, r2, r3
 800d426:	2b02      	cmp	r3, #2
 800d428:	d901      	bls.n	800d42e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800d42a:	2303      	movs	r3, #3
 800d42c:	e066      	b.n	800d4fc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d42e:	4b35      	ldr	r3, [pc, #212]	@ (800d504 <HAL_RCC_OscConfig+0x618>)
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d436:	2b00      	cmp	r3, #0
 800d438:	d0f0      	beq.n	800d41c <HAL_RCC_OscConfig+0x530>
 800d43a:	e05e      	b.n	800d4fa <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d43c:	4b31      	ldr	r3, [pc, #196]	@ (800d504 <HAL_RCC_OscConfig+0x618>)
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	4a30      	ldr	r2, [pc, #192]	@ (800d504 <HAL_RCC_OscConfig+0x618>)
 800d442:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800d446:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d448:	f7fd f9f2 	bl	800a830 <HAL_GetTick>
 800d44c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d44e:	e008      	b.n	800d462 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d450:	f7fd f9ee 	bl	800a830 <HAL_GetTick>
 800d454:	4602      	mov	r2, r0
 800d456:	693b      	ldr	r3, [r7, #16]
 800d458:	1ad3      	subs	r3, r2, r3
 800d45a:	2b02      	cmp	r3, #2
 800d45c:	d901      	bls.n	800d462 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800d45e:	2303      	movs	r3, #3
 800d460:	e04c      	b.n	800d4fc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d462:	4b28      	ldr	r3, [pc, #160]	@ (800d504 <HAL_RCC_OscConfig+0x618>)
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d1f0      	bne.n	800d450 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800d46e:	4b25      	ldr	r3, [pc, #148]	@ (800d504 <HAL_RCC_OscConfig+0x618>)
 800d470:	68da      	ldr	r2, [r3, #12]
 800d472:	4924      	ldr	r1, [pc, #144]	@ (800d504 <HAL_RCC_OscConfig+0x618>)
 800d474:	4b25      	ldr	r3, [pc, #148]	@ (800d50c <HAL_RCC_OscConfig+0x620>)
 800d476:	4013      	ands	r3, r2
 800d478:	60cb      	str	r3, [r1, #12]
 800d47a:	e03e      	b.n	800d4fa <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	69db      	ldr	r3, [r3, #28]
 800d480:	2b01      	cmp	r3, #1
 800d482:	d101      	bne.n	800d488 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800d484:	2301      	movs	r3, #1
 800d486:	e039      	b.n	800d4fc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800d488:	4b1e      	ldr	r3, [pc, #120]	@ (800d504 <HAL_RCC_OscConfig+0x618>)
 800d48a:	68db      	ldr	r3, [r3, #12]
 800d48c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d48e:	697b      	ldr	r3, [r7, #20]
 800d490:	f003 0203 	and.w	r2, r3, #3
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	6a1b      	ldr	r3, [r3, #32]
 800d498:	429a      	cmp	r2, r3
 800d49a:	d12c      	bne.n	800d4f6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800d49c:	697b      	ldr	r3, [r7, #20]
 800d49e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d4a6:	3b01      	subs	r3, #1
 800d4a8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d4aa:	429a      	cmp	r2, r3
 800d4ac:	d123      	bne.n	800d4f6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800d4ae:	697b      	ldr	r3, [r7, #20]
 800d4b0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d4b8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800d4ba:	429a      	cmp	r2, r3
 800d4bc:	d11b      	bne.n	800d4f6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800d4be:	697b      	ldr	r3, [r7, #20]
 800d4c0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d4c8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800d4ca:	429a      	cmp	r2, r3
 800d4cc:	d113      	bne.n	800d4f6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800d4ce:	697b      	ldr	r3, [r7, #20]
 800d4d0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d4d8:	085b      	lsrs	r3, r3, #1
 800d4da:	3b01      	subs	r3, #1
 800d4dc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800d4de:	429a      	cmp	r2, r3
 800d4e0:	d109      	bne.n	800d4f6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800d4e2:	697b      	ldr	r3, [r7, #20]
 800d4e4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d4ec:	085b      	lsrs	r3, r3, #1
 800d4ee:	3b01      	subs	r3, #1
 800d4f0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800d4f2:	429a      	cmp	r2, r3
 800d4f4:	d001      	beq.n	800d4fa <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800d4f6:	2301      	movs	r3, #1
 800d4f8:	e000      	b.n	800d4fc <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800d4fa:	2300      	movs	r3, #0
}
 800d4fc:	4618      	mov	r0, r3
 800d4fe:	3720      	adds	r7, #32
 800d500:	46bd      	mov	sp, r7
 800d502:	bd80      	pop	{r7, pc}
 800d504:	40021000 	.word	0x40021000
 800d508:	019f800c 	.word	0x019f800c
 800d50c:	feeefffc 	.word	0xfeeefffc

0800d510 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d510:	b580      	push	{r7, lr}
 800d512:	b086      	sub	sp, #24
 800d514:	af00      	add	r7, sp, #0
 800d516:	6078      	str	r0, [r7, #4]
 800d518:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800d51a:	2300      	movs	r3, #0
 800d51c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	2b00      	cmp	r3, #0
 800d522:	d101      	bne.n	800d528 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800d524:	2301      	movs	r3, #1
 800d526:	e11e      	b.n	800d766 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800d528:	4b91      	ldr	r3, [pc, #580]	@ (800d770 <HAL_RCC_ClockConfig+0x260>)
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	f003 030f 	and.w	r3, r3, #15
 800d530:	683a      	ldr	r2, [r7, #0]
 800d532:	429a      	cmp	r2, r3
 800d534:	d910      	bls.n	800d558 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d536:	4b8e      	ldr	r3, [pc, #568]	@ (800d770 <HAL_RCC_ClockConfig+0x260>)
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	f023 020f 	bic.w	r2, r3, #15
 800d53e:	498c      	ldr	r1, [pc, #560]	@ (800d770 <HAL_RCC_ClockConfig+0x260>)
 800d540:	683b      	ldr	r3, [r7, #0]
 800d542:	4313      	orrs	r3, r2
 800d544:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d546:	4b8a      	ldr	r3, [pc, #552]	@ (800d770 <HAL_RCC_ClockConfig+0x260>)
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	f003 030f 	and.w	r3, r3, #15
 800d54e:	683a      	ldr	r2, [r7, #0]
 800d550:	429a      	cmp	r2, r3
 800d552:	d001      	beq.n	800d558 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800d554:	2301      	movs	r3, #1
 800d556:	e106      	b.n	800d766 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	f003 0301 	and.w	r3, r3, #1
 800d560:	2b00      	cmp	r3, #0
 800d562:	d073      	beq.n	800d64c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	685b      	ldr	r3, [r3, #4]
 800d568:	2b03      	cmp	r3, #3
 800d56a:	d129      	bne.n	800d5c0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d56c:	4b81      	ldr	r3, [pc, #516]	@ (800d774 <HAL_RCC_ClockConfig+0x264>)
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d574:	2b00      	cmp	r3, #0
 800d576:	d101      	bne.n	800d57c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800d578:	2301      	movs	r3, #1
 800d57a:	e0f4      	b.n	800d766 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800d57c:	f000 f99e 	bl	800d8bc <RCC_GetSysClockFreqFromPLLSource>
 800d580:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800d582:	693b      	ldr	r3, [r7, #16]
 800d584:	4a7c      	ldr	r2, [pc, #496]	@ (800d778 <HAL_RCC_ClockConfig+0x268>)
 800d586:	4293      	cmp	r3, r2
 800d588:	d93f      	bls.n	800d60a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800d58a:	4b7a      	ldr	r3, [pc, #488]	@ (800d774 <HAL_RCC_ClockConfig+0x264>)
 800d58c:	689b      	ldr	r3, [r3, #8]
 800d58e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d592:	2b00      	cmp	r3, #0
 800d594:	d009      	beq.n	800d5aa <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d033      	beq.n	800d60a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d12f      	bne.n	800d60a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800d5aa:	4b72      	ldr	r3, [pc, #456]	@ (800d774 <HAL_RCC_ClockConfig+0x264>)
 800d5ac:	689b      	ldr	r3, [r3, #8]
 800d5ae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800d5b2:	4a70      	ldr	r2, [pc, #448]	@ (800d774 <HAL_RCC_ClockConfig+0x264>)
 800d5b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d5b8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800d5ba:	2380      	movs	r3, #128	@ 0x80
 800d5bc:	617b      	str	r3, [r7, #20]
 800d5be:	e024      	b.n	800d60a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	685b      	ldr	r3, [r3, #4]
 800d5c4:	2b02      	cmp	r3, #2
 800d5c6:	d107      	bne.n	800d5d8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800d5c8:	4b6a      	ldr	r3, [pc, #424]	@ (800d774 <HAL_RCC_ClockConfig+0x264>)
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d109      	bne.n	800d5e8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800d5d4:	2301      	movs	r3, #1
 800d5d6:	e0c6      	b.n	800d766 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800d5d8:	4b66      	ldr	r3, [pc, #408]	@ (800d774 <HAL_RCC_ClockConfig+0x264>)
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d101      	bne.n	800d5e8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800d5e4:	2301      	movs	r3, #1
 800d5e6:	e0be      	b.n	800d766 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800d5e8:	f000 f8ce 	bl	800d788 <HAL_RCC_GetSysClockFreq>
 800d5ec:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800d5ee:	693b      	ldr	r3, [r7, #16]
 800d5f0:	4a61      	ldr	r2, [pc, #388]	@ (800d778 <HAL_RCC_ClockConfig+0x268>)
 800d5f2:	4293      	cmp	r3, r2
 800d5f4:	d909      	bls.n	800d60a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800d5f6:	4b5f      	ldr	r3, [pc, #380]	@ (800d774 <HAL_RCC_ClockConfig+0x264>)
 800d5f8:	689b      	ldr	r3, [r3, #8]
 800d5fa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800d5fe:	4a5d      	ldr	r2, [pc, #372]	@ (800d774 <HAL_RCC_ClockConfig+0x264>)
 800d600:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d604:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800d606:	2380      	movs	r3, #128	@ 0x80
 800d608:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800d60a:	4b5a      	ldr	r3, [pc, #360]	@ (800d774 <HAL_RCC_ClockConfig+0x264>)
 800d60c:	689b      	ldr	r3, [r3, #8]
 800d60e:	f023 0203 	bic.w	r2, r3, #3
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	685b      	ldr	r3, [r3, #4]
 800d616:	4957      	ldr	r1, [pc, #348]	@ (800d774 <HAL_RCC_ClockConfig+0x264>)
 800d618:	4313      	orrs	r3, r2
 800d61a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d61c:	f7fd f908 	bl	800a830 <HAL_GetTick>
 800d620:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d622:	e00a      	b.n	800d63a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d624:	f7fd f904 	bl	800a830 <HAL_GetTick>
 800d628:	4602      	mov	r2, r0
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	1ad3      	subs	r3, r2, r3
 800d62e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d632:	4293      	cmp	r3, r2
 800d634:	d901      	bls.n	800d63a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800d636:	2303      	movs	r3, #3
 800d638:	e095      	b.n	800d766 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d63a:	4b4e      	ldr	r3, [pc, #312]	@ (800d774 <HAL_RCC_ClockConfig+0x264>)
 800d63c:	689b      	ldr	r3, [r3, #8]
 800d63e:	f003 020c 	and.w	r2, r3, #12
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	685b      	ldr	r3, [r3, #4]
 800d646:	009b      	lsls	r3, r3, #2
 800d648:	429a      	cmp	r2, r3
 800d64a:	d1eb      	bne.n	800d624 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	f003 0302 	and.w	r3, r3, #2
 800d654:	2b00      	cmp	r3, #0
 800d656:	d023      	beq.n	800d6a0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	f003 0304 	and.w	r3, r3, #4
 800d660:	2b00      	cmp	r3, #0
 800d662:	d005      	beq.n	800d670 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800d664:	4b43      	ldr	r3, [pc, #268]	@ (800d774 <HAL_RCC_ClockConfig+0x264>)
 800d666:	689b      	ldr	r3, [r3, #8]
 800d668:	4a42      	ldr	r2, [pc, #264]	@ (800d774 <HAL_RCC_ClockConfig+0x264>)
 800d66a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800d66e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	f003 0308 	and.w	r3, r3, #8
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d007      	beq.n	800d68c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800d67c:	4b3d      	ldr	r3, [pc, #244]	@ (800d774 <HAL_RCC_ClockConfig+0x264>)
 800d67e:	689b      	ldr	r3, [r3, #8]
 800d680:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800d684:	4a3b      	ldr	r2, [pc, #236]	@ (800d774 <HAL_RCC_ClockConfig+0x264>)
 800d686:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800d68a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d68c:	4b39      	ldr	r3, [pc, #228]	@ (800d774 <HAL_RCC_ClockConfig+0x264>)
 800d68e:	689b      	ldr	r3, [r3, #8]
 800d690:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	689b      	ldr	r3, [r3, #8]
 800d698:	4936      	ldr	r1, [pc, #216]	@ (800d774 <HAL_RCC_ClockConfig+0x264>)
 800d69a:	4313      	orrs	r3, r2
 800d69c:	608b      	str	r3, [r1, #8]
 800d69e:	e008      	b.n	800d6b2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800d6a0:	697b      	ldr	r3, [r7, #20]
 800d6a2:	2b80      	cmp	r3, #128	@ 0x80
 800d6a4:	d105      	bne.n	800d6b2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800d6a6:	4b33      	ldr	r3, [pc, #204]	@ (800d774 <HAL_RCC_ClockConfig+0x264>)
 800d6a8:	689b      	ldr	r3, [r3, #8]
 800d6aa:	4a32      	ldr	r2, [pc, #200]	@ (800d774 <HAL_RCC_ClockConfig+0x264>)
 800d6ac:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800d6b0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800d6b2:	4b2f      	ldr	r3, [pc, #188]	@ (800d770 <HAL_RCC_ClockConfig+0x260>)
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	f003 030f 	and.w	r3, r3, #15
 800d6ba:	683a      	ldr	r2, [r7, #0]
 800d6bc:	429a      	cmp	r2, r3
 800d6be:	d21d      	bcs.n	800d6fc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d6c0:	4b2b      	ldr	r3, [pc, #172]	@ (800d770 <HAL_RCC_ClockConfig+0x260>)
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	f023 020f 	bic.w	r2, r3, #15
 800d6c8:	4929      	ldr	r1, [pc, #164]	@ (800d770 <HAL_RCC_ClockConfig+0x260>)
 800d6ca:	683b      	ldr	r3, [r7, #0]
 800d6cc:	4313      	orrs	r3, r2
 800d6ce:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800d6d0:	f7fd f8ae 	bl	800a830 <HAL_GetTick>
 800d6d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d6d6:	e00a      	b.n	800d6ee <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d6d8:	f7fd f8aa 	bl	800a830 <HAL_GetTick>
 800d6dc:	4602      	mov	r2, r0
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	1ad3      	subs	r3, r2, r3
 800d6e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d6e6:	4293      	cmp	r3, r2
 800d6e8:	d901      	bls.n	800d6ee <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800d6ea:	2303      	movs	r3, #3
 800d6ec:	e03b      	b.n	800d766 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d6ee:	4b20      	ldr	r3, [pc, #128]	@ (800d770 <HAL_RCC_ClockConfig+0x260>)
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	f003 030f 	and.w	r3, r3, #15
 800d6f6:	683a      	ldr	r2, [r7, #0]
 800d6f8:	429a      	cmp	r2, r3
 800d6fa:	d1ed      	bne.n	800d6d8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	f003 0304 	and.w	r3, r3, #4
 800d704:	2b00      	cmp	r3, #0
 800d706:	d008      	beq.n	800d71a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800d708:	4b1a      	ldr	r3, [pc, #104]	@ (800d774 <HAL_RCC_ClockConfig+0x264>)
 800d70a:	689b      	ldr	r3, [r3, #8]
 800d70c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	68db      	ldr	r3, [r3, #12]
 800d714:	4917      	ldr	r1, [pc, #92]	@ (800d774 <HAL_RCC_ClockConfig+0x264>)
 800d716:	4313      	orrs	r3, r2
 800d718:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	f003 0308 	and.w	r3, r3, #8
 800d722:	2b00      	cmp	r3, #0
 800d724:	d009      	beq.n	800d73a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800d726:	4b13      	ldr	r3, [pc, #76]	@ (800d774 <HAL_RCC_ClockConfig+0x264>)
 800d728:	689b      	ldr	r3, [r3, #8]
 800d72a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	691b      	ldr	r3, [r3, #16]
 800d732:	00db      	lsls	r3, r3, #3
 800d734:	490f      	ldr	r1, [pc, #60]	@ (800d774 <HAL_RCC_ClockConfig+0x264>)
 800d736:	4313      	orrs	r3, r2
 800d738:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800d73a:	f000 f825 	bl	800d788 <HAL_RCC_GetSysClockFreq>
 800d73e:	4602      	mov	r2, r0
 800d740:	4b0c      	ldr	r3, [pc, #48]	@ (800d774 <HAL_RCC_ClockConfig+0x264>)
 800d742:	689b      	ldr	r3, [r3, #8]
 800d744:	091b      	lsrs	r3, r3, #4
 800d746:	f003 030f 	and.w	r3, r3, #15
 800d74a:	490c      	ldr	r1, [pc, #48]	@ (800d77c <HAL_RCC_ClockConfig+0x26c>)
 800d74c:	5ccb      	ldrb	r3, [r1, r3]
 800d74e:	f003 031f 	and.w	r3, r3, #31
 800d752:	fa22 f303 	lsr.w	r3, r2, r3
 800d756:	4a0a      	ldr	r2, [pc, #40]	@ (800d780 <HAL_RCC_ClockConfig+0x270>)
 800d758:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800d75a:	4b0a      	ldr	r3, [pc, #40]	@ (800d784 <HAL_RCC_ClockConfig+0x274>)
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	4618      	mov	r0, r3
 800d760:	f7fd f81a 	bl	800a798 <HAL_InitTick>
 800d764:	4603      	mov	r3, r0
}
 800d766:	4618      	mov	r0, r3
 800d768:	3718      	adds	r7, #24
 800d76a:	46bd      	mov	sp, r7
 800d76c:	bd80      	pop	{r7, pc}
 800d76e:	bf00      	nop
 800d770:	40022000 	.word	0x40022000
 800d774:	40021000 	.word	0x40021000
 800d778:	04c4b400 	.word	0x04c4b400
 800d77c:	08014838 	.word	0x08014838
 800d780:	20000338 	.word	0x20000338
 800d784:	2000033c 	.word	0x2000033c

0800d788 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d788:	b480      	push	{r7}
 800d78a:	b087      	sub	sp, #28
 800d78c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800d78e:	4b2c      	ldr	r3, [pc, #176]	@ (800d840 <HAL_RCC_GetSysClockFreq+0xb8>)
 800d790:	689b      	ldr	r3, [r3, #8]
 800d792:	f003 030c 	and.w	r3, r3, #12
 800d796:	2b04      	cmp	r3, #4
 800d798:	d102      	bne.n	800d7a0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800d79a:	4b2a      	ldr	r3, [pc, #168]	@ (800d844 <HAL_RCC_GetSysClockFreq+0xbc>)
 800d79c:	613b      	str	r3, [r7, #16]
 800d79e:	e047      	b.n	800d830 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800d7a0:	4b27      	ldr	r3, [pc, #156]	@ (800d840 <HAL_RCC_GetSysClockFreq+0xb8>)
 800d7a2:	689b      	ldr	r3, [r3, #8]
 800d7a4:	f003 030c 	and.w	r3, r3, #12
 800d7a8:	2b08      	cmp	r3, #8
 800d7aa:	d102      	bne.n	800d7b2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800d7ac:	4b26      	ldr	r3, [pc, #152]	@ (800d848 <HAL_RCC_GetSysClockFreq+0xc0>)
 800d7ae:	613b      	str	r3, [r7, #16]
 800d7b0:	e03e      	b.n	800d830 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800d7b2:	4b23      	ldr	r3, [pc, #140]	@ (800d840 <HAL_RCC_GetSysClockFreq+0xb8>)
 800d7b4:	689b      	ldr	r3, [r3, #8]
 800d7b6:	f003 030c 	and.w	r3, r3, #12
 800d7ba:	2b0c      	cmp	r3, #12
 800d7bc:	d136      	bne.n	800d82c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800d7be:	4b20      	ldr	r3, [pc, #128]	@ (800d840 <HAL_RCC_GetSysClockFreq+0xb8>)
 800d7c0:	68db      	ldr	r3, [r3, #12]
 800d7c2:	f003 0303 	and.w	r3, r3, #3
 800d7c6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800d7c8:	4b1d      	ldr	r3, [pc, #116]	@ (800d840 <HAL_RCC_GetSysClockFreq+0xb8>)
 800d7ca:	68db      	ldr	r3, [r3, #12]
 800d7cc:	091b      	lsrs	r3, r3, #4
 800d7ce:	f003 030f 	and.w	r3, r3, #15
 800d7d2:	3301      	adds	r3, #1
 800d7d4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	2b03      	cmp	r3, #3
 800d7da:	d10c      	bne.n	800d7f6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800d7dc:	4a1a      	ldr	r2, [pc, #104]	@ (800d848 <HAL_RCC_GetSysClockFreq+0xc0>)
 800d7de:	68bb      	ldr	r3, [r7, #8]
 800d7e0:	fbb2 f3f3 	udiv	r3, r2, r3
 800d7e4:	4a16      	ldr	r2, [pc, #88]	@ (800d840 <HAL_RCC_GetSysClockFreq+0xb8>)
 800d7e6:	68d2      	ldr	r2, [r2, #12]
 800d7e8:	0a12      	lsrs	r2, r2, #8
 800d7ea:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800d7ee:	fb02 f303 	mul.w	r3, r2, r3
 800d7f2:	617b      	str	r3, [r7, #20]
      break;
 800d7f4:	e00c      	b.n	800d810 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800d7f6:	4a13      	ldr	r2, [pc, #76]	@ (800d844 <HAL_RCC_GetSysClockFreq+0xbc>)
 800d7f8:	68bb      	ldr	r3, [r7, #8]
 800d7fa:	fbb2 f3f3 	udiv	r3, r2, r3
 800d7fe:	4a10      	ldr	r2, [pc, #64]	@ (800d840 <HAL_RCC_GetSysClockFreq+0xb8>)
 800d800:	68d2      	ldr	r2, [r2, #12]
 800d802:	0a12      	lsrs	r2, r2, #8
 800d804:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800d808:	fb02 f303 	mul.w	r3, r2, r3
 800d80c:	617b      	str	r3, [r7, #20]
      break;
 800d80e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800d810:	4b0b      	ldr	r3, [pc, #44]	@ (800d840 <HAL_RCC_GetSysClockFreq+0xb8>)
 800d812:	68db      	ldr	r3, [r3, #12]
 800d814:	0e5b      	lsrs	r3, r3, #25
 800d816:	f003 0303 	and.w	r3, r3, #3
 800d81a:	3301      	adds	r3, #1
 800d81c:	005b      	lsls	r3, r3, #1
 800d81e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800d820:	697a      	ldr	r2, [r7, #20]
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	fbb2 f3f3 	udiv	r3, r2, r3
 800d828:	613b      	str	r3, [r7, #16]
 800d82a:	e001      	b.n	800d830 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800d82c:	2300      	movs	r3, #0
 800d82e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800d830:	693b      	ldr	r3, [r7, #16]
}
 800d832:	4618      	mov	r0, r3
 800d834:	371c      	adds	r7, #28
 800d836:	46bd      	mov	sp, r7
 800d838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d83c:	4770      	bx	lr
 800d83e:	bf00      	nop
 800d840:	40021000 	.word	0x40021000
 800d844:	00f42400 	.word	0x00f42400
 800d848:	016e3600 	.word	0x016e3600

0800d84c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d84c:	b480      	push	{r7}
 800d84e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800d850:	4b03      	ldr	r3, [pc, #12]	@ (800d860 <HAL_RCC_GetHCLKFreq+0x14>)
 800d852:	681b      	ldr	r3, [r3, #0]
}
 800d854:	4618      	mov	r0, r3
 800d856:	46bd      	mov	sp, r7
 800d858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d85c:	4770      	bx	lr
 800d85e:	bf00      	nop
 800d860:	20000338 	.word	0x20000338

0800d864 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d864:	b580      	push	{r7, lr}
 800d866:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800d868:	f7ff fff0 	bl	800d84c <HAL_RCC_GetHCLKFreq>
 800d86c:	4602      	mov	r2, r0
 800d86e:	4b06      	ldr	r3, [pc, #24]	@ (800d888 <HAL_RCC_GetPCLK1Freq+0x24>)
 800d870:	689b      	ldr	r3, [r3, #8]
 800d872:	0a1b      	lsrs	r3, r3, #8
 800d874:	f003 0307 	and.w	r3, r3, #7
 800d878:	4904      	ldr	r1, [pc, #16]	@ (800d88c <HAL_RCC_GetPCLK1Freq+0x28>)
 800d87a:	5ccb      	ldrb	r3, [r1, r3]
 800d87c:	f003 031f 	and.w	r3, r3, #31
 800d880:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d884:	4618      	mov	r0, r3
 800d886:	bd80      	pop	{r7, pc}
 800d888:	40021000 	.word	0x40021000
 800d88c:	08014848 	.word	0x08014848

0800d890 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d890:	b580      	push	{r7, lr}
 800d892:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800d894:	f7ff ffda 	bl	800d84c <HAL_RCC_GetHCLKFreq>
 800d898:	4602      	mov	r2, r0
 800d89a:	4b06      	ldr	r3, [pc, #24]	@ (800d8b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800d89c:	689b      	ldr	r3, [r3, #8]
 800d89e:	0adb      	lsrs	r3, r3, #11
 800d8a0:	f003 0307 	and.w	r3, r3, #7
 800d8a4:	4904      	ldr	r1, [pc, #16]	@ (800d8b8 <HAL_RCC_GetPCLK2Freq+0x28>)
 800d8a6:	5ccb      	ldrb	r3, [r1, r3]
 800d8a8:	f003 031f 	and.w	r3, r3, #31
 800d8ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d8b0:	4618      	mov	r0, r3
 800d8b2:	bd80      	pop	{r7, pc}
 800d8b4:	40021000 	.word	0x40021000
 800d8b8:	08014848 	.word	0x08014848

0800d8bc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800d8bc:	b480      	push	{r7}
 800d8be:	b087      	sub	sp, #28
 800d8c0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800d8c2:	4b1e      	ldr	r3, [pc, #120]	@ (800d93c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800d8c4:	68db      	ldr	r3, [r3, #12]
 800d8c6:	f003 0303 	and.w	r3, r3, #3
 800d8ca:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800d8cc:	4b1b      	ldr	r3, [pc, #108]	@ (800d93c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800d8ce:	68db      	ldr	r3, [r3, #12]
 800d8d0:	091b      	lsrs	r3, r3, #4
 800d8d2:	f003 030f 	and.w	r3, r3, #15
 800d8d6:	3301      	adds	r3, #1
 800d8d8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800d8da:	693b      	ldr	r3, [r7, #16]
 800d8dc:	2b03      	cmp	r3, #3
 800d8de:	d10c      	bne.n	800d8fa <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800d8e0:	4a17      	ldr	r2, [pc, #92]	@ (800d940 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	fbb2 f3f3 	udiv	r3, r2, r3
 800d8e8:	4a14      	ldr	r2, [pc, #80]	@ (800d93c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800d8ea:	68d2      	ldr	r2, [r2, #12]
 800d8ec:	0a12      	lsrs	r2, r2, #8
 800d8ee:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800d8f2:	fb02 f303 	mul.w	r3, r2, r3
 800d8f6:	617b      	str	r3, [r7, #20]
    break;
 800d8f8:	e00c      	b.n	800d914 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800d8fa:	4a12      	ldr	r2, [pc, #72]	@ (800d944 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	fbb2 f3f3 	udiv	r3, r2, r3
 800d902:	4a0e      	ldr	r2, [pc, #56]	@ (800d93c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800d904:	68d2      	ldr	r2, [r2, #12]
 800d906:	0a12      	lsrs	r2, r2, #8
 800d908:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800d90c:	fb02 f303 	mul.w	r3, r2, r3
 800d910:	617b      	str	r3, [r7, #20]
    break;
 800d912:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800d914:	4b09      	ldr	r3, [pc, #36]	@ (800d93c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800d916:	68db      	ldr	r3, [r3, #12]
 800d918:	0e5b      	lsrs	r3, r3, #25
 800d91a:	f003 0303 	and.w	r3, r3, #3
 800d91e:	3301      	adds	r3, #1
 800d920:	005b      	lsls	r3, r3, #1
 800d922:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800d924:	697a      	ldr	r2, [r7, #20]
 800d926:	68bb      	ldr	r3, [r7, #8]
 800d928:	fbb2 f3f3 	udiv	r3, r2, r3
 800d92c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800d92e:	687b      	ldr	r3, [r7, #4]
}
 800d930:	4618      	mov	r0, r3
 800d932:	371c      	adds	r7, #28
 800d934:	46bd      	mov	sp, r7
 800d936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d93a:	4770      	bx	lr
 800d93c:	40021000 	.word	0x40021000
 800d940:	016e3600 	.word	0x016e3600
 800d944:	00f42400 	.word	0x00f42400

0800d948 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800d948:	b580      	push	{r7, lr}
 800d94a:	b086      	sub	sp, #24
 800d94c:	af00      	add	r7, sp, #0
 800d94e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800d950:	2300      	movs	r3, #0
 800d952:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800d954:	2300      	movs	r3, #0
 800d956:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800d960:	2b00      	cmp	r3, #0
 800d962:	f000 8098 	beq.w	800da96 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800d966:	2300      	movs	r3, #0
 800d968:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d96a:	4b43      	ldr	r3, [pc, #268]	@ (800da78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d96c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d96e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d972:	2b00      	cmp	r3, #0
 800d974:	d10d      	bne.n	800d992 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d976:	4b40      	ldr	r3, [pc, #256]	@ (800da78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d978:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d97a:	4a3f      	ldr	r2, [pc, #252]	@ (800da78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d97c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d980:	6593      	str	r3, [r2, #88]	@ 0x58
 800d982:	4b3d      	ldr	r3, [pc, #244]	@ (800da78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d984:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d986:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d98a:	60bb      	str	r3, [r7, #8]
 800d98c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800d98e:	2301      	movs	r3, #1
 800d990:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800d992:	4b3a      	ldr	r3, [pc, #232]	@ (800da7c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	4a39      	ldr	r2, [pc, #228]	@ (800da7c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800d998:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d99c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800d99e:	f7fc ff47 	bl	800a830 <HAL_GetTick>
 800d9a2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d9a4:	e009      	b.n	800d9ba <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d9a6:	f7fc ff43 	bl	800a830 <HAL_GetTick>
 800d9aa:	4602      	mov	r2, r0
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	1ad3      	subs	r3, r2, r3
 800d9b0:	2b02      	cmp	r3, #2
 800d9b2:	d902      	bls.n	800d9ba <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800d9b4:	2303      	movs	r3, #3
 800d9b6:	74fb      	strb	r3, [r7, #19]
        break;
 800d9b8:	e005      	b.n	800d9c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d9ba:	4b30      	ldr	r3, [pc, #192]	@ (800da7c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d0ef      	beq.n	800d9a6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800d9c6:	7cfb      	ldrb	r3, [r7, #19]
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d159      	bne.n	800da80 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800d9cc:	4b2a      	ldr	r3, [pc, #168]	@ (800da78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d9ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d9d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d9d6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800d9d8:	697b      	ldr	r3, [r7, #20]
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d01e      	beq.n	800da1c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d9e2:	697a      	ldr	r2, [r7, #20]
 800d9e4:	429a      	cmp	r2, r3
 800d9e6:	d019      	beq.n	800da1c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800d9e8:	4b23      	ldr	r3, [pc, #140]	@ (800da78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d9ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d9ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d9f2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800d9f4:	4b20      	ldr	r3, [pc, #128]	@ (800da78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d9f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d9fa:	4a1f      	ldr	r2, [pc, #124]	@ (800da78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d9fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800da00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800da04:	4b1c      	ldr	r3, [pc, #112]	@ (800da78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800da06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800da0a:	4a1b      	ldr	r2, [pc, #108]	@ (800da78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800da0c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800da10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800da14:	4a18      	ldr	r2, [pc, #96]	@ (800da78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800da16:	697b      	ldr	r3, [r7, #20]
 800da18:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800da1c:	697b      	ldr	r3, [r7, #20]
 800da1e:	f003 0301 	and.w	r3, r3, #1
 800da22:	2b00      	cmp	r3, #0
 800da24:	d016      	beq.n	800da54 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800da26:	f7fc ff03 	bl	800a830 <HAL_GetTick>
 800da2a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800da2c:	e00b      	b.n	800da46 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800da2e:	f7fc feff 	bl	800a830 <HAL_GetTick>
 800da32:	4602      	mov	r2, r0
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	1ad3      	subs	r3, r2, r3
 800da38:	f241 3288 	movw	r2, #5000	@ 0x1388
 800da3c:	4293      	cmp	r3, r2
 800da3e:	d902      	bls.n	800da46 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800da40:	2303      	movs	r3, #3
 800da42:	74fb      	strb	r3, [r7, #19]
            break;
 800da44:	e006      	b.n	800da54 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800da46:	4b0c      	ldr	r3, [pc, #48]	@ (800da78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800da48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800da4c:	f003 0302 	and.w	r3, r3, #2
 800da50:	2b00      	cmp	r3, #0
 800da52:	d0ec      	beq.n	800da2e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800da54:	7cfb      	ldrb	r3, [r7, #19]
 800da56:	2b00      	cmp	r3, #0
 800da58:	d10b      	bne.n	800da72 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800da5a:	4b07      	ldr	r3, [pc, #28]	@ (800da78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800da5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800da60:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800da68:	4903      	ldr	r1, [pc, #12]	@ (800da78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800da6a:	4313      	orrs	r3, r2
 800da6c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800da70:	e008      	b.n	800da84 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800da72:	7cfb      	ldrb	r3, [r7, #19]
 800da74:	74bb      	strb	r3, [r7, #18]
 800da76:	e005      	b.n	800da84 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800da78:	40021000 	.word	0x40021000
 800da7c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800da80:	7cfb      	ldrb	r3, [r7, #19]
 800da82:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800da84:	7c7b      	ldrb	r3, [r7, #17]
 800da86:	2b01      	cmp	r3, #1
 800da88:	d105      	bne.n	800da96 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800da8a:	4ba7      	ldr	r3, [pc, #668]	@ (800dd28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800da8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800da8e:	4aa6      	ldr	r2, [pc, #664]	@ (800dd28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800da90:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800da94:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	f003 0301 	and.w	r3, r3, #1
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d00a      	beq.n	800dab8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800daa2:	4ba1      	ldr	r3, [pc, #644]	@ (800dd28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800daa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800daa8:	f023 0203 	bic.w	r2, r3, #3
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	685b      	ldr	r3, [r3, #4]
 800dab0:	499d      	ldr	r1, [pc, #628]	@ (800dd28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dab2:	4313      	orrs	r3, r2
 800dab4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	f003 0302 	and.w	r3, r3, #2
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d00a      	beq.n	800dada <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800dac4:	4b98      	ldr	r3, [pc, #608]	@ (800dd28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800daca:	f023 020c 	bic.w	r2, r3, #12
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	689b      	ldr	r3, [r3, #8]
 800dad2:	4995      	ldr	r1, [pc, #596]	@ (800dd28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dad4:	4313      	orrs	r3, r2
 800dad6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	f003 0304 	and.w	r3, r3, #4
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d00a      	beq.n	800dafc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800dae6:	4b90      	ldr	r3, [pc, #576]	@ (800dd28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800daec:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	68db      	ldr	r3, [r3, #12]
 800daf4:	498c      	ldr	r1, [pc, #560]	@ (800dd28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800daf6:	4313      	orrs	r3, r2
 800daf8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	f003 0308 	and.w	r3, r3, #8
 800db04:	2b00      	cmp	r3, #0
 800db06:	d00a      	beq.n	800db1e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800db08:	4b87      	ldr	r3, [pc, #540]	@ (800dd28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800db0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800db0e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	691b      	ldr	r3, [r3, #16]
 800db16:	4984      	ldr	r1, [pc, #528]	@ (800dd28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800db18:	4313      	orrs	r3, r2
 800db1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	f003 0310 	and.w	r3, r3, #16
 800db26:	2b00      	cmp	r3, #0
 800db28:	d00a      	beq.n	800db40 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800db2a:	4b7f      	ldr	r3, [pc, #508]	@ (800dd28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800db2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800db30:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	695b      	ldr	r3, [r3, #20]
 800db38:	497b      	ldr	r1, [pc, #492]	@ (800dd28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800db3a:	4313      	orrs	r3, r2
 800db3c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	f003 0320 	and.w	r3, r3, #32
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d00a      	beq.n	800db62 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800db4c:	4b76      	ldr	r3, [pc, #472]	@ (800dd28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800db4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800db52:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	699b      	ldr	r3, [r3, #24]
 800db5a:	4973      	ldr	r1, [pc, #460]	@ (800dd28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800db5c:	4313      	orrs	r3, r2
 800db5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d00a      	beq.n	800db84 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800db6e:	4b6e      	ldr	r3, [pc, #440]	@ (800dd28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800db70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800db74:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	69db      	ldr	r3, [r3, #28]
 800db7c:	496a      	ldr	r1, [pc, #424]	@ (800dd28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800db7e:	4313      	orrs	r3, r2
 800db80:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d00a      	beq.n	800dba6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800db90:	4b65      	ldr	r3, [pc, #404]	@ (800dd28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800db92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800db96:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	6a1b      	ldr	r3, [r3, #32]
 800db9e:	4962      	ldr	r1, [pc, #392]	@ (800dd28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dba0:	4313      	orrs	r3, r2
 800dba2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d00a      	beq.n	800dbc8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800dbb2:	4b5d      	ldr	r3, [pc, #372]	@ (800dd28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dbb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800dbb8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dbc0:	4959      	ldr	r1, [pc, #356]	@ (800dd28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dbc2:	4313      	orrs	r3, r2
 800dbc4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d00a      	beq.n	800dbea <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800dbd4:	4b54      	ldr	r3, [pc, #336]	@ (800dd28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dbd6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800dbda:	f023 0203 	bic.w	r2, r3, #3
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dbe2:	4951      	ldr	r1, [pc, #324]	@ (800dd28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dbe4:	4313      	orrs	r3, r2
 800dbe6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d00a      	beq.n	800dc0c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800dbf6:	4b4c      	ldr	r3, [pc, #304]	@ (800dd28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dbf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800dbfc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc04:	4948      	ldr	r1, [pc, #288]	@ (800dd28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dc06:	4313      	orrs	r3, r2
 800dc08:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d015      	beq.n	800dc44 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800dc18:	4b43      	ldr	r3, [pc, #268]	@ (800dd28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dc1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800dc1e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dc26:	4940      	ldr	r1, [pc, #256]	@ (800dd28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dc28:	4313      	orrs	r3, r2
 800dc2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dc32:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800dc36:	d105      	bne.n	800dc44 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800dc38:	4b3b      	ldr	r3, [pc, #236]	@ (800dd28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dc3a:	68db      	ldr	r3, [r3, #12]
 800dc3c:	4a3a      	ldr	r2, [pc, #232]	@ (800dd28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dc3e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800dc42:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d015      	beq.n	800dc7c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800dc50:	4b35      	ldr	r3, [pc, #212]	@ (800dd28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dc52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800dc56:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dc5e:	4932      	ldr	r1, [pc, #200]	@ (800dd28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dc60:	4313      	orrs	r3, r2
 800dc62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dc6a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800dc6e:	d105      	bne.n	800dc7c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800dc70:	4b2d      	ldr	r3, [pc, #180]	@ (800dd28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dc72:	68db      	ldr	r3, [r3, #12]
 800dc74:	4a2c      	ldr	r2, [pc, #176]	@ (800dd28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dc76:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800dc7a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d015      	beq.n	800dcb4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800dc88:	4b27      	ldr	r3, [pc, #156]	@ (800dd28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dc8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800dc8e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dc96:	4924      	ldr	r1, [pc, #144]	@ (800dd28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dc98:	4313      	orrs	r3, r2
 800dc9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dca2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800dca6:	d105      	bne.n	800dcb4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800dca8:	4b1f      	ldr	r3, [pc, #124]	@ (800dd28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dcaa:	68db      	ldr	r3, [r3, #12]
 800dcac:	4a1e      	ldr	r2, [pc, #120]	@ (800dd28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dcae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800dcb2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d015      	beq.n	800dcec <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800dcc0:	4b19      	ldr	r3, [pc, #100]	@ (800dd28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dcc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800dcc6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dcce:	4916      	ldr	r1, [pc, #88]	@ (800dd28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dcd0:	4313      	orrs	r3, r2
 800dcd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dcda:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800dcde:	d105      	bne.n	800dcec <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800dce0:	4b11      	ldr	r3, [pc, #68]	@ (800dd28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dce2:	68db      	ldr	r3, [r3, #12]
 800dce4:	4a10      	ldr	r2, [pc, #64]	@ (800dd28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dce6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800dcea:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d019      	beq.n	800dd2c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800dcf8:	4b0b      	ldr	r3, [pc, #44]	@ (800dd28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dcfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800dcfe:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dd06:	4908      	ldr	r1, [pc, #32]	@ (800dd28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dd08:	4313      	orrs	r3, r2
 800dd0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dd12:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800dd16:	d109      	bne.n	800dd2c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800dd18:	4b03      	ldr	r3, [pc, #12]	@ (800dd28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dd1a:	68db      	ldr	r3, [r3, #12]
 800dd1c:	4a02      	ldr	r2, [pc, #8]	@ (800dd28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dd1e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800dd22:	60d3      	str	r3, [r2, #12]
 800dd24:	e002      	b.n	800dd2c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800dd26:	bf00      	nop
 800dd28:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d015      	beq.n	800dd64 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800dd38:	4b29      	ldr	r3, [pc, #164]	@ (800dde0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800dd3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800dd3e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dd46:	4926      	ldr	r1, [pc, #152]	@ (800dde0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800dd48:	4313      	orrs	r3, r2
 800dd4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dd52:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800dd56:	d105      	bne.n	800dd64 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800dd58:	4b21      	ldr	r3, [pc, #132]	@ (800dde0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800dd5a:	68db      	ldr	r3, [r3, #12]
 800dd5c:	4a20      	ldr	r2, [pc, #128]	@ (800dde0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800dd5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800dd62:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d015      	beq.n	800dd9c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800dd70:	4b1b      	ldr	r3, [pc, #108]	@ (800dde0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800dd72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800dd76:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800dd7e:	4918      	ldr	r1, [pc, #96]	@ (800dde0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800dd80:	4313      	orrs	r3, r2
 800dd82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800dd8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dd8e:	d105      	bne.n	800dd9c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800dd90:	4b13      	ldr	r3, [pc, #76]	@ (800dde0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800dd92:	68db      	ldr	r3, [r3, #12]
 800dd94:	4a12      	ldr	r2, [pc, #72]	@ (800dde0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800dd96:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800dd9a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d015      	beq.n	800ddd4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800dda8:	4b0d      	ldr	r3, [pc, #52]	@ (800dde0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800ddaa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ddae:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ddb6:	490a      	ldr	r1, [pc, #40]	@ (800dde0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800ddb8:	4313      	orrs	r3, r2
 800ddba:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ddc2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ddc6:	d105      	bne.n	800ddd4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800ddc8:	4b05      	ldr	r3, [pc, #20]	@ (800dde0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800ddca:	68db      	ldr	r3, [r3, #12]
 800ddcc:	4a04      	ldr	r2, [pc, #16]	@ (800dde0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800ddce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ddd2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800ddd4:	7cbb      	ldrb	r3, [r7, #18]
}
 800ddd6:	4618      	mov	r0, r3
 800ddd8:	3718      	adds	r7, #24
 800ddda:	46bd      	mov	sp, r7
 800dddc:	bd80      	pop	{r7, pc}
 800ddde:	bf00      	nop
 800dde0:	40021000 	.word	0x40021000

0800dde4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800dde4:	b580      	push	{r7, lr}
 800dde6:	b082      	sub	sp, #8
 800dde8:	af00      	add	r7, sp, #0
 800ddea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d101      	bne.n	800ddf6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ddf2:	2301      	movs	r3, #1
 800ddf4:	e054      	b.n	800dea0 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ddfc:	b2db      	uxtb	r3, r3
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d111      	bne.n	800de26 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	2200      	movs	r2, #0
 800de06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800de0a:	6878      	ldr	r0, [r7, #4]
 800de0c:	f001 fee2 	bl	800fbd4 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800de14:	2b00      	cmp	r3, #0
 800de16:	d102      	bne.n	800de1e <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	4a23      	ldr	r2, [pc, #140]	@ (800dea8 <HAL_TIM_Base_Init+0xc4>)
 800de1c:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800de22:	6878      	ldr	r0, [r7, #4]
 800de24:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	2202      	movs	r2, #2
 800de2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	681a      	ldr	r2, [r3, #0]
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	3304      	adds	r3, #4
 800de36:	4619      	mov	r1, r3
 800de38:	4610      	mov	r0, r2
 800de3a:	f001 fa2b 	bl	800f294 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	2201      	movs	r2, #1
 800de42:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	2201      	movs	r2, #1
 800de4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	2201      	movs	r2, #1
 800de52:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	2201      	movs	r2, #1
 800de5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	2201      	movs	r2, #1
 800de62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	2201      	movs	r2, #1
 800de6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	2201      	movs	r2, #1
 800de72:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	2201      	movs	r2, #1
 800de7a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	2201      	movs	r2, #1
 800de82:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	2201      	movs	r2, #1
 800de8a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	2201      	movs	r2, #1
 800de92:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	2201      	movs	r2, #1
 800de9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800de9e:	2300      	movs	r3, #0
}
 800dea0:	4618      	mov	r0, r3
 800dea2:	3708      	adds	r7, #8
 800dea4:	46bd      	mov	sp, r7
 800dea6:	bd80      	pop	{r7, pc}
 800dea8:	0800a059 	.word	0x0800a059

0800deac <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800deac:	b480      	push	{r7}
 800deae:	b085      	sub	sp, #20
 800deb0:	af00      	add	r7, sp, #0
 800deb2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800deba:	b2db      	uxtb	r3, r3
 800debc:	2b01      	cmp	r3, #1
 800debe:	d001      	beq.n	800dec4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800dec0:	2301      	movs	r3, #1
 800dec2:	e04c      	b.n	800df5e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	2202      	movs	r2, #2
 800dec8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	4a26      	ldr	r2, [pc, #152]	@ (800df6c <HAL_TIM_Base_Start+0xc0>)
 800ded2:	4293      	cmp	r3, r2
 800ded4:	d022      	beq.n	800df1c <HAL_TIM_Base_Start+0x70>
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dede:	d01d      	beq.n	800df1c <HAL_TIM_Base_Start+0x70>
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	4a22      	ldr	r2, [pc, #136]	@ (800df70 <HAL_TIM_Base_Start+0xc4>)
 800dee6:	4293      	cmp	r3, r2
 800dee8:	d018      	beq.n	800df1c <HAL_TIM_Base_Start+0x70>
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	4a21      	ldr	r2, [pc, #132]	@ (800df74 <HAL_TIM_Base_Start+0xc8>)
 800def0:	4293      	cmp	r3, r2
 800def2:	d013      	beq.n	800df1c <HAL_TIM_Base_Start+0x70>
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	4a1f      	ldr	r2, [pc, #124]	@ (800df78 <HAL_TIM_Base_Start+0xcc>)
 800defa:	4293      	cmp	r3, r2
 800defc:	d00e      	beq.n	800df1c <HAL_TIM_Base_Start+0x70>
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	4a1e      	ldr	r2, [pc, #120]	@ (800df7c <HAL_TIM_Base_Start+0xd0>)
 800df04:	4293      	cmp	r3, r2
 800df06:	d009      	beq.n	800df1c <HAL_TIM_Base_Start+0x70>
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	4a1c      	ldr	r2, [pc, #112]	@ (800df80 <HAL_TIM_Base_Start+0xd4>)
 800df0e:	4293      	cmp	r3, r2
 800df10:	d004      	beq.n	800df1c <HAL_TIM_Base_Start+0x70>
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	4a1b      	ldr	r2, [pc, #108]	@ (800df84 <HAL_TIM_Base_Start+0xd8>)
 800df18:	4293      	cmp	r3, r2
 800df1a:	d115      	bne.n	800df48 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	689a      	ldr	r2, [r3, #8]
 800df22:	4b19      	ldr	r3, [pc, #100]	@ (800df88 <HAL_TIM_Base_Start+0xdc>)
 800df24:	4013      	ands	r3, r2
 800df26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	2b06      	cmp	r3, #6
 800df2c:	d015      	beq.n	800df5a <HAL_TIM_Base_Start+0xae>
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800df34:	d011      	beq.n	800df5a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	681a      	ldr	r2, [r3, #0]
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	f042 0201 	orr.w	r2, r2, #1
 800df44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800df46:	e008      	b.n	800df5a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	681a      	ldr	r2, [r3, #0]
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	f042 0201 	orr.w	r2, r2, #1
 800df56:	601a      	str	r2, [r3, #0]
 800df58:	e000      	b.n	800df5c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800df5a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800df5c:	2300      	movs	r3, #0
}
 800df5e:	4618      	mov	r0, r3
 800df60:	3714      	adds	r7, #20
 800df62:	46bd      	mov	sp, r7
 800df64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df68:	4770      	bx	lr
 800df6a:	bf00      	nop
 800df6c:	40012c00 	.word	0x40012c00
 800df70:	40000400 	.word	0x40000400
 800df74:	40000800 	.word	0x40000800
 800df78:	40000c00 	.word	0x40000c00
 800df7c:	40013400 	.word	0x40013400
 800df80:	40014000 	.word	0x40014000
 800df84:	40015000 	.word	0x40015000
 800df88:	00010007 	.word	0x00010007

0800df8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800df8c:	b480      	push	{r7}
 800df8e:	b085      	sub	sp, #20
 800df90:	af00      	add	r7, sp, #0
 800df92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800df9a:	b2db      	uxtb	r3, r3
 800df9c:	2b01      	cmp	r3, #1
 800df9e:	d001      	beq.n	800dfa4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800dfa0:	2301      	movs	r3, #1
 800dfa2:	e054      	b.n	800e04e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	2202      	movs	r2, #2
 800dfa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	68da      	ldr	r2, [r3, #12]
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	f042 0201 	orr.w	r2, r2, #1
 800dfba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	4a26      	ldr	r2, [pc, #152]	@ (800e05c <HAL_TIM_Base_Start_IT+0xd0>)
 800dfc2:	4293      	cmp	r3, r2
 800dfc4:	d022      	beq.n	800e00c <HAL_TIM_Base_Start_IT+0x80>
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dfce:	d01d      	beq.n	800e00c <HAL_TIM_Base_Start_IT+0x80>
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	4a22      	ldr	r2, [pc, #136]	@ (800e060 <HAL_TIM_Base_Start_IT+0xd4>)
 800dfd6:	4293      	cmp	r3, r2
 800dfd8:	d018      	beq.n	800e00c <HAL_TIM_Base_Start_IT+0x80>
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	4a21      	ldr	r2, [pc, #132]	@ (800e064 <HAL_TIM_Base_Start_IT+0xd8>)
 800dfe0:	4293      	cmp	r3, r2
 800dfe2:	d013      	beq.n	800e00c <HAL_TIM_Base_Start_IT+0x80>
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	4a1f      	ldr	r2, [pc, #124]	@ (800e068 <HAL_TIM_Base_Start_IT+0xdc>)
 800dfea:	4293      	cmp	r3, r2
 800dfec:	d00e      	beq.n	800e00c <HAL_TIM_Base_Start_IT+0x80>
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	4a1e      	ldr	r2, [pc, #120]	@ (800e06c <HAL_TIM_Base_Start_IT+0xe0>)
 800dff4:	4293      	cmp	r3, r2
 800dff6:	d009      	beq.n	800e00c <HAL_TIM_Base_Start_IT+0x80>
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	4a1c      	ldr	r2, [pc, #112]	@ (800e070 <HAL_TIM_Base_Start_IT+0xe4>)
 800dffe:	4293      	cmp	r3, r2
 800e000:	d004      	beq.n	800e00c <HAL_TIM_Base_Start_IT+0x80>
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	4a1b      	ldr	r2, [pc, #108]	@ (800e074 <HAL_TIM_Base_Start_IT+0xe8>)
 800e008:	4293      	cmp	r3, r2
 800e00a:	d115      	bne.n	800e038 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	689a      	ldr	r2, [r3, #8]
 800e012:	4b19      	ldr	r3, [pc, #100]	@ (800e078 <HAL_TIM_Base_Start_IT+0xec>)
 800e014:	4013      	ands	r3, r2
 800e016:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	2b06      	cmp	r3, #6
 800e01c:	d015      	beq.n	800e04a <HAL_TIM_Base_Start_IT+0xbe>
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e024:	d011      	beq.n	800e04a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	681a      	ldr	r2, [r3, #0]
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	f042 0201 	orr.w	r2, r2, #1
 800e034:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e036:	e008      	b.n	800e04a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	681a      	ldr	r2, [r3, #0]
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	f042 0201 	orr.w	r2, r2, #1
 800e046:	601a      	str	r2, [r3, #0]
 800e048:	e000      	b.n	800e04c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e04a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e04c:	2300      	movs	r3, #0
}
 800e04e:	4618      	mov	r0, r3
 800e050:	3714      	adds	r7, #20
 800e052:	46bd      	mov	sp, r7
 800e054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e058:	4770      	bx	lr
 800e05a:	bf00      	nop
 800e05c:	40012c00 	.word	0x40012c00
 800e060:	40000400 	.word	0x40000400
 800e064:	40000800 	.word	0x40000800
 800e068:	40000c00 	.word	0x40000c00
 800e06c:	40013400 	.word	0x40013400
 800e070:	40014000 	.word	0x40014000
 800e074:	40015000 	.word	0x40015000
 800e078:	00010007 	.word	0x00010007

0800e07c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e07c:	b580      	push	{r7, lr}
 800e07e:	b082      	sub	sp, #8
 800e080:	af00      	add	r7, sp, #0
 800e082:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	2b00      	cmp	r3, #0
 800e088:	d101      	bne.n	800e08e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e08a:	2301      	movs	r3, #1
 800e08c:	e054      	b.n	800e138 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e094:	b2db      	uxtb	r3, r3
 800e096:	2b00      	cmp	r3, #0
 800e098:	d111      	bne.n	800e0be <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	2200      	movs	r2, #0
 800e09e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800e0a2:	6878      	ldr	r0, [r7, #4]
 800e0a4:	f001 fd96 	bl	800fbd4 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d102      	bne.n	800e0b6 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	4a23      	ldr	r2, [pc, #140]	@ (800e140 <HAL_TIM_PWM_Init+0xc4>)
 800e0b4:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e0ba:	6878      	ldr	r0, [r7, #4]
 800e0bc:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	2202      	movs	r2, #2
 800e0c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	681a      	ldr	r2, [r3, #0]
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	3304      	adds	r3, #4
 800e0ce:	4619      	mov	r1, r3
 800e0d0:	4610      	mov	r0, r2
 800e0d2:	f001 f8df 	bl	800f294 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	2201      	movs	r2, #1
 800e0da:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	2201      	movs	r2, #1
 800e0e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	2201      	movs	r2, #1
 800e0ea:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	2201      	movs	r2, #1
 800e0f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	2201      	movs	r2, #1
 800e0fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	2201      	movs	r2, #1
 800e102:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	2201      	movs	r2, #1
 800e10a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	2201      	movs	r2, #1
 800e112:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	2201      	movs	r2, #1
 800e11a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	2201      	movs	r2, #1
 800e122:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	2201      	movs	r2, #1
 800e12a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	2201      	movs	r2, #1
 800e132:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e136:	2300      	movs	r3, #0
}
 800e138:	4618      	mov	r0, r3
 800e13a:	3708      	adds	r7, #8
 800e13c:	46bd      	mov	sp, r7
 800e13e:	bd80      	pop	{r7, pc}
 800e140:	0800a00d 	.word	0x0800a00d

0800e144 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e144:	b580      	push	{r7, lr}
 800e146:	b084      	sub	sp, #16
 800e148:	af00      	add	r7, sp, #0
 800e14a:	6078      	str	r0, [r7, #4]
 800e14c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800e14e:	683b      	ldr	r3, [r7, #0]
 800e150:	2b00      	cmp	r3, #0
 800e152:	d109      	bne.n	800e168 <HAL_TIM_PWM_Start+0x24>
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800e15a:	b2db      	uxtb	r3, r3
 800e15c:	2b01      	cmp	r3, #1
 800e15e:	bf14      	ite	ne
 800e160:	2301      	movne	r3, #1
 800e162:	2300      	moveq	r3, #0
 800e164:	b2db      	uxtb	r3, r3
 800e166:	e03c      	b.n	800e1e2 <HAL_TIM_PWM_Start+0x9e>
 800e168:	683b      	ldr	r3, [r7, #0]
 800e16a:	2b04      	cmp	r3, #4
 800e16c:	d109      	bne.n	800e182 <HAL_TIM_PWM_Start+0x3e>
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800e174:	b2db      	uxtb	r3, r3
 800e176:	2b01      	cmp	r3, #1
 800e178:	bf14      	ite	ne
 800e17a:	2301      	movne	r3, #1
 800e17c:	2300      	moveq	r3, #0
 800e17e:	b2db      	uxtb	r3, r3
 800e180:	e02f      	b.n	800e1e2 <HAL_TIM_PWM_Start+0x9e>
 800e182:	683b      	ldr	r3, [r7, #0]
 800e184:	2b08      	cmp	r3, #8
 800e186:	d109      	bne.n	800e19c <HAL_TIM_PWM_Start+0x58>
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e18e:	b2db      	uxtb	r3, r3
 800e190:	2b01      	cmp	r3, #1
 800e192:	bf14      	ite	ne
 800e194:	2301      	movne	r3, #1
 800e196:	2300      	moveq	r3, #0
 800e198:	b2db      	uxtb	r3, r3
 800e19a:	e022      	b.n	800e1e2 <HAL_TIM_PWM_Start+0x9e>
 800e19c:	683b      	ldr	r3, [r7, #0]
 800e19e:	2b0c      	cmp	r3, #12
 800e1a0:	d109      	bne.n	800e1b6 <HAL_TIM_PWM_Start+0x72>
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e1a8:	b2db      	uxtb	r3, r3
 800e1aa:	2b01      	cmp	r3, #1
 800e1ac:	bf14      	ite	ne
 800e1ae:	2301      	movne	r3, #1
 800e1b0:	2300      	moveq	r3, #0
 800e1b2:	b2db      	uxtb	r3, r3
 800e1b4:	e015      	b.n	800e1e2 <HAL_TIM_PWM_Start+0x9e>
 800e1b6:	683b      	ldr	r3, [r7, #0]
 800e1b8:	2b10      	cmp	r3, #16
 800e1ba:	d109      	bne.n	800e1d0 <HAL_TIM_PWM_Start+0x8c>
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e1c2:	b2db      	uxtb	r3, r3
 800e1c4:	2b01      	cmp	r3, #1
 800e1c6:	bf14      	ite	ne
 800e1c8:	2301      	movne	r3, #1
 800e1ca:	2300      	moveq	r3, #0
 800e1cc:	b2db      	uxtb	r3, r3
 800e1ce:	e008      	b.n	800e1e2 <HAL_TIM_PWM_Start+0x9e>
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800e1d6:	b2db      	uxtb	r3, r3
 800e1d8:	2b01      	cmp	r3, #1
 800e1da:	bf14      	ite	ne
 800e1dc:	2301      	movne	r3, #1
 800e1de:	2300      	moveq	r3, #0
 800e1e0:	b2db      	uxtb	r3, r3
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d001      	beq.n	800e1ea <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800e1e6:	2301      	movs	r3, #1
 800e1e8:	e0a6      	b.n	800e338 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e1ea:	683b      	ldr	r3, [r7, #0]
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d104      	bne.n	800e1fa <HAL_TIM_PWM_Start+0xb6>
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	2202      	movs	r2, #2
 800e1f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e1f8:	e023      	b.n	800e242 <HAL_TIM_PWM_Start+0xfe>
 800e1fa:	683b      	ldr	r3, [r7, #0]
 800e1fc:	2b04      	cmp	r3, #4
 800e1fe:	d104      	bne.n	800e20a <HAL_TIM_PWM_Start+0xc6>
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	2202      	movs	r2, #2
 800e204:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e208:	e01b      	b.n	800e242 <HAL_TIM_PWM_Start+0xfe>
 800e20a:	683b      	ldr	r3, [r7, #0]
 800e20c:	2b08      	cmp	r3, #8
 800e20e:	d104      	bne.n	800e21a <HAL_TIM_PWM_Start+0xd6>
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	2202      	movs	r2, #2
 800e214:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e218:	e013      	b.n	800e242 <HAL_TIM_PWM_Start+0xfe>
 800e21a:	683b      	ldr	r3, [r7, #0]
 800e21c:	2b0c      	cmp	r3, #12
 800e21e:	d104      	bne.n	800e22a <HAL_TIM_PWM_Start+0xe6>
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	2202      	movs	r2, #2
 800e224:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e228:	e00b      	b.n	800e242 <HAL_TIM_PWM_Start+0xfe>
 800e22a:	683b      	ldr	r3, [r7, #0]
 800e22c:	2b10      	cmp	r3, #16
 800e22e:	d104      	bne.n	800e23a <HAL_TIM_PWM_Start+0xf6>
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	2202      	movs	r2, #2
 800e234:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e238:	e003      	b.n	800e242 <HAL_TIM_PWM_Start+0xfe>
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	2202      	movs	r2, #2
 800e23e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	2201      	movs	r2, #1
 800e248:	6839      	ldr	r1, [r7, #0]
 800e24a:	4618      	mov	r0, r3
 800e24c:	f001 fc9c 	bl	800fb88 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	4a3a      	ldr	r2, [pc, #232]	@ (800e340 <HAL_TIM_PWM_Start+0x1fc>)
 800e256:	4293      	cmp	r3, r2
 800e258:	d018      	beq.n	800e28c <HAL_TIM_PWM_Start+0x148>
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	4a39      	ldr	r2, [pc, #228]	@ (800e344 <HAL_TIM_PWM_Start+0x200>)
 800e260:	4293      	cmp	r3, r2
 800e262:	d013      	beq.n	800e28c <HAL_TIM_PWM_Start+0x148>
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	4a37      	ldr	r2, [pc, #220]	@ (800e348 <HAL_TIM_PWM_Start+0x204>)
 800e26a:	4293      	cmp	r3, r2
 800e26c:	d00e      	beq.n	800e28c <HAL_TIM_PWM_Start+0x148>
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	4a36      	ldr	r2, [pc, #216]	@ (800e34c <HAL_TIM_PWM_Start+0x208>)
 800e274:	4293      	cmp	r3, r2
 800e276:	d009      	beq.n	800e28c <HAL_TIM_PWM_Start+0x148>
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	4a34      	ldr	r2, [pc, #208]	@ (800e350 <HAL_TIM_PWM_Start+0x20c>)
 800e27e:	4293      	cmp	r3, r2
 800e280:	d004      	beq.n	800e28c <HAL_TIM_PWM_Start+0x148>
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	4a33      	ldr	r2, [pc, #204]	@ (800e354 <HAL_TIM_PWM_Start+0x210>)
 800e288:	4293      	cmp	r3, r2
 800e28a:	d101      	bne.n	800e290 <HAL_TIM_PWM_Start+0x14c>
 800e28c:	2301      	movs	r3, #1
 800e28e:	e000      	b.n	800e292 <HAL_TIM_PWM_Start+0x14e>
 800e290:	2300      	movs	r3, #0
 800e292:	2b00      	cmp	r3, #0
 800e294:	d007      	beq.n	800e2a6 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800e2a4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	4a25      	ldr	r2, [pc, #148]	@ (800e340 <HAL_TIM_PWM_Start+0x1fc>)
 800e2ac:	4293      	cmp	r3, r2
 800e2ae:	d022      	beq.n	800e2f6 <HAL_TIM_PWM_Start+0x1b2>
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e2b8:	d01d      	beq.n	800e2f6 <HAL_TIM_PWM_Start+0x1b2>
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	4a26      	ldr	r2, [pc, #152]	@ (800e358 <HAL_TIM_PWM_Start+0x214>)
 800e2c0:	4293      	cmp	r3, r2
 800e2c2:	d018      	beq.n	800e2f6 <HAL_TIM_PWM_Start+0x1b2>
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	4a24      	ldr	r2, [pc, #144]	@ (800e35c <HAL_TIM_PWM_Start+0x218>)
 800e2ca:	4293      	cmp	r3, r2
 800e2cc:	d013      	beq.n	800e2f6 <HAL_TIM_PWM_Start+0x1b2>
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	4a23      	ldr	r2, [pc, #140]	@ (800e360 <HAL_TIM_PWM_Start+0x21c>)
 800e2d4:	4293      	cmp	r3, r2
 800e2d6:	d00e      	beq.n	800e2f6 <HAL_TIM_PWM_Start+0x1b2>
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	4a19      	ldr	r2, [pc, #100]	@ (800e344 <HAL_TIM_PWM_Start+0x200>)
 800e2de:	4293      	cmp	r3, r2
 800e2e0:	d009      	beq.n	800e2f6 <HAL_TIM_PWM_Start+0x1b2>
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	4a18      	ldr	r2, [pc, #96]	@ (800e348 <HAL_TIM_PWM_Start+0x204>)
 800e2e8:	4293      	cmp	r3, r2
 800e2ea:	d004      	beq.n	800e2f6 <HAL_TIM_PWM_Start+0x1b2>
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	4a18      	ldr	r2, [pc, #96]	@ (800e354 <HAL_TIM_PWM_Start+0x210>)
 800e2f2:	4293      	cmp	r3, r2
 800e2f4:	d115      	bne.n	800e322 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	689a      	ldr	r2, [r3, #8]
 800e2fc:	4b19      	ldr	r3, [pc, #100]	@ (800e364 <HAL_TIM_PWM_Start+0x220>)
 800e2fe:	4013      	ands	r3, r2
 800e300:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e302:	68fb      	ldr	r3, [r7, #12]
 800e304:	2b06      	cmp	r3, #6
 800e306:	d015      	beq.n	800e334 <HAL_TIM_PWM_Start+0x1f0>
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e30e:	d011      	beq.n	800e334 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	681a      	ldr	r2, [r3, #0]
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	f042 0201 	orr.w	r2, r2, #1
 800e31e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e320:	e008      	b.n	800e334 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	681a      	ldr	r2, [r3, #0]
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	f042 0201 	orr.w	r2, r2, #1
 800e330:	601a      	str	r2, [r3, #0]
 800e332:	e000      	b.n	800e336 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e334:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e336:	2300      	movs	r3, #0
}
 800e338:	4618      	mov	r0, r3
 800e33a:	3710      	adds	r7, #16
 800e33c:	46bd      	mov	sp, r7
 800e33e:	bd80      	pop	{r7, pc}
 800e340:	40012c00 	.word	0x40012c00
 800e344:	40013400 	.word	0x40013400
 800e348:	40014000 	.word	0x40014000
 800e34c:	40014400 	.word	0x40014400
 800e350:	40014800 	.word	0x40014800
 800e354:	40015000 	.word	0x40015000
 800e358:	40000400 	.word	0x40000400
 800e35c:	40000800 	.word	0x40000800
 800e360:	40000c00 	.word	0x40000c00
 800e364:	00010007 	.word	0x00010007

0800e368 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800e368:	b580      	push	{r7, lr}
 800e36a:	b082      	sub	sp, #8
 800e36c:	af00      	add	r7, sp, #0
 800e36e:	6078      	str	r0, [r7, #4]
 800e370:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	2b00      	cmp	r3, #0
 800e376:	d101      	bne.n	800e37c <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800e378:	2301      	movs	r3, #1
 800e37a:	e04c      	b.n	800e416 <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e382:	b2db      	uxtb	r3, r3
 800e384:	2b00      	cmp	r3, #0
 800e386:	d111      	bne.n	800e3ac <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	2200      	movs	r2, #0
 800e38c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800e390:	6878      	ldr	r0, [r7, #4]
 800e392:	f001 fc1f 	bl	800fbd4 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d102      	bne.n	800e3a4 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	4a1f      	ldr	r2, [pc, #124]	@ (800e420 <HAL_TIM_OnePulse_Init+0xb8>)
 800e3a2:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e3a8:	6878      	ldr	r0, [r7, #4]
 800e3aa:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	2202      	movs	r2, #2
 800e3b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	681a      	ldr	r2, [r3, #0]
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	3304      	adds	r3, #4
 800e3bc:	4619      	mov	r1, r3
 800e3be:	4610      	mov	r0, r2
 800e3c0:	f000 ff68 	bl	800f294 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	681a      	ldr	r2, [r3, #0]
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	f022 0208 	bic.w	r2, r2, #8
 800e3d2:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	681b      	ldr	r3, [r3, #0]
 800e3d8:	6819      	ldr	r1, [r3, #0]
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	683a      	ldr	r2, [r7, #0]
 800e3e0:	430a      	orrs	r2, r1
 800e3e2:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	2201      	movs	r2, #1
 800e3e8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	2201      	movs	r2, #1
 800e3f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	2201      	movs	r2, #1
 800e3f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	2201      	movs	r2, #1
 800e400:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	2201      	movs	r2, #1
 800e408:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	2201      	movs	r2, #1
 800e410:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e414:	2300      	movs	r3, #0
}
 800e416:	4618      	mov	r0, r3
 800e418:	3708      	adds	r7, #8
 800e41a:	46bd      	mov	sp, r7
 800e41c:	bd80      	pop	{r7, pc}
 800e41e:	bf00      	nop
 800e420:	0800e425 	.word	0x0800e425

0800e424 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800e424:	b480      	push	{r7}
 800e426:	b083      	sub	sp, #12
 800e428:	af00      	add	r7, sp, #0
 800e42a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800e42c:	bf00      	nop
 800e42e:	370c      	adds	r7, #12
 800e430:	46bd      	mov	sp, r7
 800e432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e436:	4770      	bx	lr

0800e438 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800e438:	b580      	push	{r7, lr}
 800e43a:	b084      	sub	sp, #16
 800e43c:	af00      	add	r7, sp, #0
 800e43e:	6078      	str	r0, [r7, #4]
 800e440:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800e448:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800e450:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e458:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e460:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800e462:	7bfb      	ldrb	r3, [r7, #15]
 800e464:	2b01      	cmp	r3, #1
 800e466:	d108      	bne.n	800e47a <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800e468:	7bbb      	ldrb	r3, [r7, #14]
 800e46a:	2b01      	cmp	r3, #1
 800e46c:	d105      	bne.n	800e47a <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800e46e:	7b7b      	ldrb	r3, [r7, #13]
 800e470:	2b01      	cmp	r3, #1
 800e472:	d102      	bne.n	800e47a <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800e474:	7b3b      	ldrb	r3, [r7, #12]
 800e476:	2b01      	cmp	r3, #1
 800e478:	d001      	beq.n	800e47e <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 800e47a:	2301      	movs	r3, #1
 800e47c:	e059      	b.n	800e532 <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	2202      	movs	r2, #2
 800e482:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	2202      	movs	r2, #2
 800e48a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	2202      	movs	r2, #2
 800e492:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	2202      	movs	r2, #2
 800e49a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	68da      	ldr	r2, [r3, #12]
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	f042 0202 	orr.w	r2, r2, #2
 800e4ac:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	68da      	ldr	r2, [r3, #12]
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	f042 0204 	orr.w	r2, r2, #4
 800e4bc:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	2201      	movs	r2, #1
 800e4c4:	2100      	movs	r1, #0
 800e4c6:	4618      	mov	r0, r3
 800e4c8:	f001 fb5e 	bl	800fb88 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	2201      	movs	r2, #1
 800e4d2:	2104      	movs	r1, #4
 800e4d4:	4618      	mov	r0, r3
 800e4d6:	f001 fb57 	bl	800fb88 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	4a17      	ldr	r2, [pc, #92]	@ (800e53c <HAL_TIM_OnePulse_Start_IT+0x104>)
 800e4e0:	4293      	cmp	r3, r2
 800e4e2:	d018      	beq.n	800e516 <HAL_TIM_OnePulse_Start_IT+0xde>
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	4a15      	ldr	r2, [pc, #84]	@ (800e540 <HAL_TIM_OnePulse_Start_IT+0x108>)
 800e4ea:	4293      	cmp	r3, r2
 800e4ec:	d013      	beq.n	800e516 <HAL_TIM_OnePulse_Start_IT+0xde>
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	4a14      	ldr	r2, [pc, #80]	@ (800e544 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 800e4f4:	4293      	cmp	r3, r2
 800e4f6:	d00e      	beq.n	800e516 <HAL_TIM_OnePulse_Start_IT+0xde>
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	4a12      	ldr	r2, [pc, #72]	@ (800e548 <HAL_TIM_OnePulse_Start_IT+0x110>)
 800e4fe:	4293      	cmp	r3, r2
 800e500:	d009      	beq.n	800e516 <HAL_TIM_OnePulse_Start_IT+0xde>
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	4a11      	ldr	r2, [pc, #68]	@ (800e54c <HAL_TIM_OnePulse_Start_IT+0x114>)
 800e508:	4293      	cmp	r3, r2
 800e50a:	d004      	beq.n	800e516 <HAL_TIM_OnePulse_Start_IT+0xde>
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	4a0f      	ldr	r2, [pc, #60]	@ (800e550 <HAL_TIM_OnePulse_Start_IT+0x118>)
 800e512:	4293      	cmp	r3, r2
 800e514:	d101      	bne.n	800e51a <HAL_TIM_OnePulse_Start_IT+0xe2>
 800e516:	2301      	movs	r3, #1
 800e518:	e000      	b.n	800e51c <HAL_TIM_OnePulse_Start_IT+0xe4>
 800e51a:	2300      	movs	r3, #0
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d007      	beq.n	800e530 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800e52e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800e530:	2300      	movs	r3, #0
}
 800e532:	4618      	mov	r0, r3
 800e534:	3710      	adds	r7, #16
 800e536:	46bd      	mov	sp, r7
 800e538:	bd80      	pop	{r7, pc}
 800e53a:	bf00      	nop
 800e53c:	40012c00 	.word	0x40012c00
 800e540:	40013400 	.word	0x40013400
 800e544:	40014000 	.word	0x40014000
 800e548:	40014400 	.word	0x40014400
 800e54c:	40014800 	.word	0x40014800
 800e550:	40015000 	.word	0x40015000

0800e554 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800e554:	b580      	push	{r7, lr}
 800e556:	b086      	sub	sp, #24
 800e558:	af00      	add	r7, sp, #0
 800e55a:	6078      	str	r0, [r7, #4]
 800e55c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	2b00      	cmp	r3, #0
 800e562:	d101      	bne.n	800e568 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800e564:	2301      	movs	r3, #1
 800e566:	e0a2      	b.n	800e6ae <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e56e:	b2db      	uxtb	r3, r3
 800e570:	2b00      	cmp	r3, #0
 800e572:	d111      	bne.n	800e598 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	2200      	movs	r2, #0
 800e578:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800e57c:	6878      	ldr	r0, [r7, #4]
 800e57e:	f001 fb29 	bl	800fbd4 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e586:	2b00      	cmp	r3, #0
 800e588:	d102      	bne.n	800e590 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	4a4a      	ldr	r2, [pc, #296]	@ (800e6b8 <HAL_TIM_Encoder_Init+0x164>)
 800e58e:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e594:	6878      	ldr	r0, [r7, #4]
 800e596:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	2202      	movs	r2, #2
 800e59c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	689b      	ldr	r3, [r3, #8]
 800e5a6:	687a      	ldr	r2, [r7, #4]
 800e5a8:	6812      	ldr	r2, [r2, #0]
 800e5aa:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800e5ae:	f023 0307 	bic.w	r3, r3, #7
 800e5b2:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	681a      	ldr	r2, [r3, #0]
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	3304      	adds	r3, #4
 800e5bc:	4619      	mov	r1, r3
 800e5be:	4610      	mov	r0, r2
 800e5c0:	f000 fe68 	bl	800f294 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	689b      	ldr	r3, [r3, #8]
 800e5ca:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	699b      	ldr	r3, [r3, #24]
 800e5d2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	6a1b      	ldr	r3, [r3, #32]
 800e5da:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800e5dc:	683b      	ldr	r3, [r7, #0]
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	697a      	ldr	r2, [r7, #20]
 800e5e2:	4313      	orrs	r3, r2
 800e5e4:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800e5e6:	693b      	ldr	r3, [r7, #16]
 800e5e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e5ec:	f023 0303 	bic.w	r3, r3, #3
 800e5f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800e5f2:	683b      	ldr	r3, [r7, #0]
 800e5f4:	689a      	ldr	r2, [r3, #8]
 800e5f6:	683b      	ldr	r3, [r7, #0]
 800e5f8:	699b      	ldr	r3, [r3, #24]
 800e5fa:	021b      	lsls	r3, r3, #8
 800e5fc:	4313      	orrs	r3, r2
 800e5fe:	693a      	ldr	r2, [r7, #16]
 800e600:	4313      	orrs	r3, r2
 800e602:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800e604:	693b      	ldr	r3, [r7, #16]
 800e606:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800e60a:	f023 030c 	bic.w	r3, r3, #12
 800e60e:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800e610:	693b      	ldr	r3, [r7, #16]
 800e612:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800e616:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800e61a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800e61c:	683b      	ldr	r3, [r7, #0]
 800e61e:	68da      	ldr	r2, [r3, #12]
 800e620:	683b      	ldr	r3, [r7, #0]
 800e622:	69db      	ldr	r3, [r3, #28]
 800e624:	021b      	lsls	r3, r3, #8
 800e626:	4313      	orrs	r3, r2
 800e628:	693a      	ldr	r2, [r7, #16]
 800e62a:	4313      	orrs	r3, r2
 800e62c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800e62e:	683b      	ldr	r3, [r7, #0]
 800e630:	691b      	ldr	r3, [r3, #16]
 800e632:	011a      	lsls	r2, r3, #4
 800e634:	683b      	ldr	r3, [r7, #0]
 800e636:	6a1b      	ldr	r3, [r3, #32]
 800e638:	031b      	lsls	r3, r3, #12
 800e63a:	4313      	orrs	r3, r2
 800e63c:	693a      	ldr	r2, [r7, #16]
 800e63e:	4313      	orrs	r3, r2
 800e640:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800e648:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800e650:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800e652:	683b      	ldr	r3, [r7, #0]
 800e654:	685a      	ldr	r2, [r3, #4]
 800e656:	683b      	ldr	r3, [r7, #0]
 800e658:	695b      	ldr	r3, [r3, #20]
 800e65a:	011b      	lsls	r3, r3, #4
 800e65c:	4313      	orrs	r3, r2
 800e65e:	68fa      	ldr	r2, [r7, #12]
 800e660:	4313      	orrs	r3, r2
 800e662:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	697a      	ldr	r2, [r7, #20]
 800e66a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	693a      	ldr	r2, [r7, #16]
 800e672:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	68fa      	ldr	r2, [r7, #12]
 800e67a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	2201      	movs	r2, #1
 800e680:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	2201      	movs	r2, #1
 800e688:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	2201      	movs	r2, #1
 800e690:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	2201      	movs	r2, #1
 800e698:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	2201      	movs	r2, #1
 800e6a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	2201      	movs	r2, #1
 800e6a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e6ac:	2300      	movs	r3, #0
}
 800e6ae:	4618      	mov	r0, r3
 800e6b0:	3718      	adds	r7, #24
 800e6b2:	46bd      	mov	sp, r7
 800e6b4:	bd80      	pop	{r7, pc}
 800e6b6:	bf00      	nop
 800e6b8:	0800a101 	.word	0x0800a101

0800e6bc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e6bc:	b580      	push	{r7, lr}
 800e6be:	b084      	sub	sp, #16
 800e6c0:	af00      	add	r7, sp, #0
 800e6c2:	6078      	str	r0, [r7, #4]
 800e6c4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800e6cc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800e6d4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e6dc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e6e4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800e6e6:	683b      	ldr	r3, [r7, #0]
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d110      	bne.n	800e70e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800e6ec:	7bfb      	ldrb	r3, [r7, #15]
 800e6ee:	2b01      	cmp	r3, #1
 800e6f0:	d102      	bne.n	800e6f8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800e6f2:	7b7b      	ldrb	r3, [r7, #13]
 800e6f4:	2b01      	cmp	r3, #1
 800e6f6:	d001      	beq.n	800e6fc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800e6f8:	2301      	movs	r3, #1
 800e6fa:	e069      	b.n	800e7d0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	2202      	movs	r2, #2
 800e700:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	2202      	movs	r2, #2
 800e708:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e70c:	e031      	b.n	800e772 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800e70e:	683b      	ldr	r3, [r7, #0]
 800e710:	2b04      	cmp	r3, #4
 800e712:	d110      	bne.n	800e736 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800e714:	7bbb      	ldrb	r3, [r7, #14]
 800e716:	2b01      	cmp	r3, #1
 800e718:	d102      	bne.n	800e720 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800e71a:	7b3b      	ldrb	r3, [r7, #12]
 800e71c:	2b01      	cmp	r3, #1
 800e71e:	d001      	beq.n	800e724 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800e720:	2301      	movs	r3, #1
 800e722:	e055      	b.n	800e7d0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	2202      	movs	r2, #2
 800e728:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	2202      	movs	r2, #2
 800e730:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e734:	e01d      	b.n	800e772 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800e736:	7bfb      	ldrb	r3, [r7, #15]
 800e738:	2b01      	cmp	r3, #1
 800e73a:	d108      	bne.n	800e74e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800e73c:	7bbb      	ldrb	r3, [r7, #14]
 800e73e:	2b01      	cmp	r3, #1
 800e740:	d105      	bne.n	800e74e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800e742:	7b7b      	ldrb	r3, [r7, #13]
 800e744:	2b01      	cmp	r3, #1
 800e746:	d102      	bne.n	800e74e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800e748:	7b3b      	ldrb	r3, [r7, #12]
 800e74a:	2b01      	cmp	r3, #1
 800e74c:	d001      	beq.n	800e752 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800e74e:	2301      	movs	r3, #1
 800e750:	e03e      	b.n	800e7d0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	2202      	movs	r2, #2
 800e756:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	2202      	movs	r2, #2
 800e75e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	2202      	movs	r2, #2
 800e766:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	2202      	movs	r2, #2
 800e76e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800e772:	683b      	ldr	r3, [r7, #0]
 800e774:	2b00      	cmp	r3, #0
 800e776:	d003      	beq.n	800e780 <HAL_TIM_Encoder_Start+0xc4>
 800e778:	683b      	ldr	r3, [r7, #0]
 800e77a:	2b04      	cmp	r3, #4
 800e77c:	d008      	beq.n	800e790 <HAL_TIM_Encoder_Start+0xd4>
 800e77e:	e00f      	b.n	800e7a0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	2201      	movs	r2, #1
 800e786:	2100      	movs	r1, #0
 800e788:	4618      	mov	r0, r3
 800e78a:	f001 f9fd 	bl	800fb88 <TIM_CCxChannelCmd>
      break;
 800e78e:	e016      	b.n	800e7be <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	2201      	movs	r2, #1
 800e796:	2104      	movs	r1, #4
 800e798:	4618      	mov	r0, r3
 800e79a:	f001 f9f5 	bl	800fb88 <TIM_CCxChannelCmd>
      break;
 800e79e:	e00e      	b.n	800e7be <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	681b      	ldr	r3, [r3, #0]
 800e7a4:	2201      	movs	r2, #1
 800e7a6:	2100      	movs	r1, #0
 800e7a8:	4618      	mov	r0, r3
 800e7aa:	f001 f9ed 	bl	800fb88 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	2201      	movs	r2, #1
 800e7b4:	2104      	movs	r1, #4
 800e7b6:	4618      	mov	r0, r3
 800e7b8:	f001 f9e6 	bl	800fb88 <TIM_CCxChannelCmd>
      break;
 800e7bc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	681a      	ldr	r2, [r3, #0]
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	f042 0201 	orr.w	r2, r2, #1
 800e7cc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800e7ce:	2300      	movs	r3, #0
}
 800e7d0:	4618      	mov	r0, r3
 800e7d2:	3710      	adds	r7, #16
 800e7d4:	46bd      	mov	sp, r7
 800e7d6:	bd80      	pop	{r7, pc}

0800e7d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e7d8:	b580      	push	{r7, lr}
 800e7da:	b084      	sub	sp, #16
 800e7dc:	af00      	add	r7, sp, #0
 800e7de:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	681b      	ldr	r3, [r3, #0]
 800e7e4:	68db      	ldr	r3, [r3, #12]
 800e7e6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	691b      	ldr	r3, [r3, #16]
 800e7ee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800e7f0:	68bb      	ldr	r3, [r7, #8]
 800e7f2:	f003 0302 	and.w	r3, r3, #2
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d026      	beq.n	800e848 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	f003 0302 	and.w	r3, r3, #2
 800e800:	2b00      	cmp	r3, #0
 800e802:	d021      	beq.n	800e848 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	f06f 0202 	mvn.w	r2, #2
 800e80c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	2201      	movs	r2, #1
 800e812:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	699b      	ldr	r3, [r3, #24]
 800e81a:	f003 0303 	and.w	r3, r3, #3
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d005      	beq.n	800e82e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e828:	6878      	ldr	r0, [r7, #4]
 800e82a:	4798      	blx	r3
 800e82c:	e009      	b.n	800e842 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800e834:	6878      	ldr	r0, [r7, #4]
 800e836:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800e83e:	6878      	ldr	r0, [r7, #4]
 800e840:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	2200      	movs	r2, #0
 800e846:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800e848:	68bb      	ldr	r3, [r7, #8]
 800e84a:	f003 0304 	and.w	r3, r3, #4
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d026      	beq.n	800e8a0 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	f003 0304 	and.w	r3, r3, #4
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d021      	beq.n	800e8a0 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	f06f 0204 	mvn.w	r2, #4
 800e864:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	2202      	movs	r2, #2
 800e86a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	699b      	ldr	r3, [r3, #24]
 800e872:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e876:	2b00      	cmp	r3, #0
 800e878:	d005      	beq.n	800e886 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e880:	6878      	ldr	r0, [r7, #4]
 800e882:	4798      	blx	r3
 800e884:	e009      	b.n	800e89a <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800e88c:	6878      	ldr	r0, [r7, #4]
 800e88e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800e896:	6878      	ldr	r0, [r7, #4]
 800e898:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	2200      	movs	r2, #0
 800e89e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800e8a0:	68bb      	ldr	r3, [r7, #8]
 800e8a2:	f003 0308 	and.w	r3, r3, #8
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d026      	beq.n	800e8f8 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	f003 0308 	and.w	r3, r3, #8
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d021      	beq.n	800e8f8 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	f06f 0208 	mvn.w	r2, #8
 800e8bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	2204      	movs	r2, #4
 800e8c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	69db      	ldr	r3, [r3, #28]
 800e8ca:	f003 0303 	and.w	r3, r3, #3
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d005      	beq.n	800e8de <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e8d8:	6878      	ldr	r0, [r7, #4]
 800e8da:	4798      	blx	r3
 800e8dc:	e009      	b.n	800e8f2 <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800e8e4:	6878      	ldr	r0, [r7, #4]
 800e8e6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800e8ee:	6878      	ldr	r0, [r7, #4]
 800e8f0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	2200      	movs	r2, #0
 800e8f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800e8f8:	68bb      	ldr	r3, [r7, #8]
 800e8fa:	f003 0310 	and.w	r3, r3, #16
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d026      	beq.n	800e950 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800e902:	68fb      	ldr	r3, [r7, #12]
 800e904:	f003 0310 	and.w	r3, r3, #16
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d021      	beq.n	800e950 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	f06f 0210 	mvn.w	r2, #16
 800e914:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	2208      	movs	r2, #8
 800e91a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	69db      	ldr	r3, [r3, #28]
 800e922:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e926:	2b00      	cmp	r3, #0
 800e928:	d005      	beq.n	800e936 <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e930:	6878      	ldr	r0, [r7, #4]
 800e932:	4798      	blx	r3
 800e934:	e009      	b.n	800e94a <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800e93c:	6878      	ldr	r0, [r7, #4]
 800e93e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800e946:	6878      	ldr	r0, [r7, #4]
 800e948:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	2200      	movs	r2, #0
 800e94e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800e950:	68bb      	ldr	r3, [r7, #8]
 800e952:	f003 0301 	and.w	r3, r3, #1
 800e956:	2b00      	cmp	r3, #0
 800e958:	d00e      	beq.n	800e978 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800e95a:	68fb      	ldr	r3, [r7, #12]
 800e95c:	f003 0301 	and.w	r3, r3, #1
 800e960:	2b00      	cmp	r3, #0
 800e962:	d009      	beq.n	800e978 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	f06f 0201 	mvn.w	r2, #1
 800e96c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e974:	6878      	ldr	r0, [r7, #4]
 800e976:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800e978:	68bb      	ldr	r3, [r7, #8]
 800e97a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d104      	bne.n	800e98c <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800e982:	68bb      	ldr	r3, [r7, #8]
 800e984:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d00e      	beq.n	800e9aa <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e992:	2b00      	cmp	r3, #0
 800e994:	d009      	beq.n	800e9aa <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800e99e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800e9a6:	6878      	ldr	r0, [r7, #4]
 800e9a8:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800e9aa:	68bb      	ldr	r3, [r7, #8]
 800e9ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d00e      	beq.n	800e9d2 <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e9b4:	68fb      	ldr	r3, [r7, #12]
 800e9b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	d009      	beq.n	800e9d2 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800e9c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800e9ce:	6878      	ldr	r0, [r7, #4]
 800e9d0:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800e9d2:	68bb      	ldr	r3, [r7, #8]
 800e9d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d00e      	beq.n	800e9fa <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d009      	beq.n	800e9fa <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800e9ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e9f6:	6878      	ldr	r0, [r7, #4]
 800e9f8:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800e9fa:	68bb      	ldr	r3, [r7, #8]
 800e9fc:	f003 0320 	and.w	r3, r3, #32
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d00e      	beq.n	800ea22 <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	f003 0320 	and.w	r3, r3, #32
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d009      	beq.n	800ea22 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	f06f 0220 	mvn.w	r2, #32
 800ea16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800ea1e:	6878      	ldr	r0, [r7, #4]
 800ea20:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800ea22:	68bb      	ldr	r3, [r7, #8]
 800ea24:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d00e      	beq.n	800ea4a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d009      	beq.n	800ea4a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800ea3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800ea46:	6878      	ldr	r0, [r7, #4]
 800ea48:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800ea4a:	68bb      	ldr	r3, [r7, #8]
 800ea4c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d00e      	beq.n	800ea72 <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d009      	beq.n	800ea72 <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800ea66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800ea6e:	6878      	ldr	r0, [r7, #4]
 800ea70:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800ea72:	68bb      	ldr	r3, [r7, #8]
 800ea74:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d00e      	beq.n	800ea9a <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d009      	beq.n	800ea9a <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800ea8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800ea96:	6878      	ldr	r0, [r7, #4]
 800ea98:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800ea9a:	68bb      	ldr	r3, [r7, #8]
 800ea9c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d00e      	beq.n	800eac2 <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d009      	beq.n	800eac2 <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800eab6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800eabe:	6878      	ldr	r0, [r7, #4]
 800eac0:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800eac2:	bf00      	nop
 800eac4:	3710      	adds	r7, #16
 800eac6:	46bd      	mov	sp, r7
 800eac8:	bd80      	pop	{r7, pc}
	...

0800eacc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800eacc:	b580      	push	{r7, lr}
 800eace:	b086      	sub	sp, #24
 800ead0:	af00      	add	r7, sp, #0
 800ead2:	60f8      	str	r0, [r7, #12]
 800ead4:	60b9      	str	r1, [r7, #8]
 800ead6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ead8:	2300      	movs	r3, #0
 800eada:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800eadc:	68fb      	ldr	r3, [r7, #12]
 800eade:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800eae2:	2b01      	cmp	r3, #1
 800eae4:	d101      	bne.n	800eaea <HAL_TIM_PWM_ConfigChannel+0x1e>
 800eae6:	2302      	movs	r3, #2
 800eae8:	e0ff      	b.n	800ecea <HAL_TIM_PWM_ConfigChannel+0x21e>
 800eaea:	68fb      	ldr	r3, [r7, #12]
 800eaec:	2201      	movs	r2, #1
 800eaee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	2b14      	cmp	r3, #20
 800eaf6:	f200 80f0 	bhi.w	800ecda <HAL_TIM_PWM_ConfigChannel+0x20e>
 800eafa:	a201      	add	r2, pc, #4	@ (adr r2, 800eb00 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800eafc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb00:	0800eb55 	.word	0x0800eb55
 800eb04:	0800ecdb 	.word	0x0800ecdb
 800eb08:	0800ecdb 	.word	0x0800ecdb
 800eb0c:	0800ecdb 	.word	0x0800ecdb
 800eb10:	0800eb95 	.word	0x0800eb95
 800eb14:	0800ecdb 	.word	0x0800ecdb
 800eb18:	0800ecdb 	.word	0x0800ecdb
 800eb1c:	0800ecdb 	.word	0x0800ecdb
 800eb20:	0800ebd7 	.word	0x0800ebd7
 800eb24:	0800ecdb 	.word	0x0800ecdb
 800eb28:	0800ecdb 	.word	0x0800ecdb
 800eb2c:	0800ecdb 	.word	0x0800ecdb
 800eb30:	0800ec17 	.word	0x0800ec17
 800eb34:	0800ecdb 	.word	0x0800ecdb
 800eb38:	0800ecdb 	.word	0x0800ecdb
 800eb3c:	0800ecdb 	.word	0x0800ecdb
 800eb40:	0800ec59 	.word	0x0800ec59
 800eb44:	0800ecdb 	.word	0x0800ecdb
 800eb48:	0800ecdb 	.word	0x0800ecdb
 800eb4c:	0800ecdb 	.word	0x0800ecdb
 800eb50:	0800ec99 	.word	0x0800ec99
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	68b9      	ldr	r1, [r7, #8]
 800eb5a:	4618      	mov	r0, r3
 800eb5c:	f000 fc4e 	bl	800f3fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	699a      	ldr	r2, [r3, #24]
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	f042 0208 	orr.w	r2, r2, #8
 800eb6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	699a      	ldr	r2, [r3, #24]
 800eb76:	68fb      	ldr	r3, [r7, #12]
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	f022 0204 	bic.w	r2, r2, #4
 800eb7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800eb80:	68fb      	ldr	r3, [r7, #12]
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	6999      	ldr	r1, [r3, #24]
 800eb86:	68bb      	ldr	r3, [r7, #8]
 800eb88:	691a      	ldr	r2, [r3, #16]
 800eb8a:	68fb      	ldr	r3, [r7, #12]
 800eb8c:	681b      	ldr	r3, [r3, #0]
 800eb8e:	430a      	orrs	r2, r1
 800eb90:	619a      	str	r2, [r3, #24]
      break;
 800eb92:	e0a5      	b.n	800ece0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800eb94:	68fb      	ldr	r3, [r7, #12]
 800eb96:	681b      	ldr	r3, [r3, #0]
 800eb98:	68b9      	ldr	r1, [r7, #8]
 800eb9a:	4618      	mov	r0, r3
 800eb9c:	f000 fcc8 	bl	800f530 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	699a      	ldr	r2, [r3, #24]
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ebae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	699a      	ldr	r2, [r3, #24]
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ebbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	681b      	ldr	r3, [r3, #0]
 800ebc4:	6999      	ldr	r1, [r3, #24]
 800ebc6:	68bb      	ldr	r3, [r7, #8]
 800ebc8:	691b      	ldr	r3, [r3, #16]
 800ebca:	021a      	lsls	r2, r3, #8
 800ebcc:	68fb      	ldr	r3, [r7, #12]
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	430a      	orrs	r2, r1
 800ebd2:	619a      	str	r2, [r3, #24]
      break;
 800ebd4:	e084      	b.n	800ece0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	681b      	ldr	r3, [r3, #0]
 800ebda:	68b9      	ldr	r1, [r7, #8]
 800ebdc:	4618      	mov	r0, r3
 800ebde:	f000 fd3b 	bl	800f658 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	69da      	ldr	r2, [r3, #28]
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	f042 0208 	orr.w	r2, r2, #8
 800ebf0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ebf2:	68fb      	ldr	r3, [r7, #12]
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	69da      	ldr	r2, [r3, #28]
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	f022 0204 	bic.w	r2, r2, #4
 800ec00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	69d9      	ldr	r1, [r3, #28]
 800ec08:	68bb      	ldr	r3, [r7, #8]
 800ec0a:	691a      	ldr	r2, [r3, #16]
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	430a      	orrs	r2, r1
 800ec12:	61da      	str	r2, [r3, #28]
      break;
 800ec14:	e064      	b.n	800ece0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	68b9      	ldr	r1, [r7, #8]
 800ec1c:	4618      	mov	r0, r3
 800ec1e:	f000 fdad 	bl	800f77c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ec22:	68fb      	ldr	r3, [r7, #12]
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	69da      	ldr	r2, [r3, #28]
 800ec28:	68fb      	ldr	r3, [r7, #12]
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ec30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ec32:	68fb      	ldr	r3, [r7, #12]
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	69da      	ldr	r2, [r3, #28]
 800ec38:	68fb      	ldr	r3, [r7, #12]
 800ec3a:	681b      	ldr	r3, [r3, #0]
 800ec3c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ec40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	681b      	ldr	r3, [r3, #0]
 800ec46:	69d9      	ldr	r1, [r3, #28]
 800ec48:	68bb      	ldr	r3, [r7, #8]
 800ec4a:	691b      	ldr	r3, [r3, #16]
 800ec4c:	021a      	lsls	r2, r3, #8
 800ec4e:	68fb      	ldr	r3, [r7, #12]
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	430a      	orrs	r2, r1
 800ec54:	61da      	str	r2, [r3, #28]
      break;
 800ec56:	e043      	b.n	800ece0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ec58:	68fb      	ldr	r3, [r7, #12]
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	68b9      	ldr	r1, [r7, #8]
 800ec5e:	4618      	mov	r0, r3
 800ec60:	f000 fe20 	bl	800f8a4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ec6a:	68fb      	ldr	r3, [r7, #12]
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	f042 0208 	orr.w	r2, r2, #8
 800ec72:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	f022 0204 	bic.w	r2, r2, #4
 800ec82:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800ec8a:	68bb      	ldr	r3, [r7, #8]
 800ec8c:	691a      	ldr	r2, [r3, #16]
 800ec8e:	68fb      	ldr	r3, [r7, #12]
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	430a      	orrs	r2, r1
 800ec94:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800ec96:	e023      	b.n	800ece0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	68b9      	ldr	r1, [r7, #8]
 800ec9e:	4618      	mov	r0, r3
 800eca0:	f000 fe6a 	bl	800f978 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ecb2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ecc2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800ecca:	68bb      	ldr	r3, [r7, #8]
 800eccc:	691b      	ldr	r3, [r3, #16]
 800ecce:	021a      	lsls	r2, r3, #8
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	430a      	orrs	r2, r1
 800ecd6:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800ecd8:	e002      	b.n	800ece0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800ecda:	2301      	movs	r3, #1
 800ecdc:	75fb      	strb	r3, [r7, #23]
      break;
 800ecde:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ece0:	68fb      	ldr	r3, [r7, #12]
 800ece2:	2200      	movs	r2, #0
 800ece4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ece8:	7dfb      	ldrb	r3, [r7, #23]
}
 800ecea:	4618      	mov	r0, r3
 800ecec:	3718      	adds	r7, #24
 800ecee:	46bd      	mov	sp, r7
 800ecf0:	bd80      	pop	{r7, pc}
 800ecf2:	bf00      	nop

0800ecf4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ecf4:	b580      	push	{r7, lr}
 800ecf6:	b084      	sub	sp, #16
 800ecf8:	af00      	add	r7, sp, #0
 800ecfa:	6078      	str	r0, [r7, #4]
 800ecfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ecfe:	2300      	movs	r3, #0
 800ed00:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ed08:	2b01      	cmp	r3, #1
 800ed0a:	d101      	bne.n	800ed10 <HAL_TIM_ConfigClockSource+0x1c>
 800ed0c:	2302      	movs	r3, #2
 800ed0e:	e0f6      	b.n	800eefe <HAL_TIM_ConfigClockSource+0x20a>
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	2201      	movs	r2, #1
 800ed14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	2202      	movs	r2, #2
 800ed1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	689b      	ldr	r3, [r3, #8]
 800ed26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ed28:	68bb      	ldr	r3, [r7, #8]
 800ed2a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800ed2e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800ed32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ed34:	68bb      	ldr	r3, [r7, #8]
 800ed36:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ed3a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	68ba      	ldr	r2, [r7, #8]
 800ed42:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ed44:	683b      	ldr	r3, [r7, #0]
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	4a6f      	ldr	r2, [pc, #444]	@ (800ef08 <HAL_TIM_ConfigClockSource+0x214>)
 800ed4a:	4293      	cmp	r3, r2
 800ed4c:	f000 80c1 	beq.w	800eed2 <HAL_TIM_ConfigClockSource+0x1de>
 800ed50:	4a6d      	ldr	r2, [pc, #436]	@ (800ef08 <HAL_TIM_ConfigClockSource+0x214>)
 800ed52:	4293      	cmp	r3, r2
 800ed54:	f200 80c6 	bhi.w	800eee4 <HAL_TIM_ConfigClockSource+0x1f0>
 800ed58:	4a6c      	ldr	r2, [pc, #432]	@ (800ef0c <HAL_TIM_ConfigClockSource+0x218>)
 800ed5a:	4293      	cmp	r3, r2
 800ed5c:	f000 80b9 	beq.w	800eed2 <HAL_TIM_ConfigClockSource+0x1de>
 800ed60:	4a6a      	ldr	r2, [pc, #424]	@ (800ef0c <HAL_TIM_ConfigClockSource+0x218>)
 800ed62:	4293      	cmp	r3, r2
 800ed64:	f200 80be 	bhi.w	800eee4 <HAL_TIM_ConfigClockSource+0x1f0>
 800ed68:	4a69      	ldr	r2, [pc, #420]	@ (800ef10 <HAL_TIM_ConfigClockSource+0x21c>)
 800ed6a:	4293      	cmp	r3, r2
 800ed6c:	f000 80b1 	beq.w	800eed2 <HAL_TIM_ConfigClockSource+0x1de>
 800ed70:	4a67      	ldr	r2, [pc, #412]	@ (800ef10 <HAL_TIM_ConfigClockSource+0x21c>)
 800ed72:	4293      	cmp	r3, r2
 800ed74:	f200 80b6 	bhi.w	800eee4 <HAL_TIM_ConfigClockSource+0x1f0>
 800ed78:	4a66      	ldr	r2, [pc, #408]	@ (800ef14 <HAL_TIM_ConfigClockSource+0x220>)
 800ed7a:	4293      	cmp	r3, r2
 800ed7c:	f000 80a9 	beq.w	800eed2 <HAL_TIM_ConfigClockSource+0x1de>
 800ed80:	4a64      	ldr	r2, [pc, #400]	@ (800ef14 <HAL_TIM_ConfigClockSource+0x220>)
 800ed82:	4293      	cmp	r3, r2
 800ed84:	f200 80ae 	bhi.w	800eee4 <HAL_TIM_ConfigClockSource+0x1f0>
 800ed88:	4a63      	ldr	r2, [pc, #396]	@ (800ef18 <HAL_TIM_ConfigClockSource+0x224>)
 800ed8a:	4293      	cmp	r3, r2
 800ed8c:	f000 80a1 	beq.w	800eed2 <HAL_TIM_ConfigClockSource+0x1de>
 800ed90:	4a61      	ldr	r2, [pc, #388]	@ (800ef18 <HAL_TIM_ConfigClockSource+0x224>)
 800ed92:	4293      	cmp	r3, r2
 800ed94:	f200 80a6 	bhi.w	800eee4 <HAL_TIM_ConfigClockSource+0x1f0>
 800ed98:	4a60      	ldr	r2, [pc, #384]	@ (800ef1c <HAL_TIM_ConfigClockSource+0x228>)
 800ed9a:	4293      	cmp	r3, r2
 800ed9c:	f000 8099 	beq.w	800eed2 <HAL_TIM_ConfigClockSource+0x1de>
 800eda0:	4a5e      	ldr	r2, [pc, #376]	@ (800ef1c <HAL_TIM_ConfigClockSource+0x228>)
 800eda2:	4293      	cmp	r3, r2
 800eda4:	f200 809e 	bhi.w	800eee4 <HAL_TIM_ConfigClockSource+0x1f0>
 800eda8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800edac:	f000 8091 	beq.w	800eed2 <HAL_TIM_ConfigClockSource+0x1de>
 800edb0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800edb4:	f200 8096 	bhi.w	800eee4 <HAL_TIM_ConfigClockSource+0x1f0>
 800edb8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800edbc:	f000 8089 	beq.w	800eed2 <HAL_TIM_ConfigClockSource+0x1de>
 800edc0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800edc4:	f200 808e 	bhi.w	800eee4 <HAL_TIM_ConfigClockSource+0x1f0>
 800edc8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800edcc:	d03e      	beq.n	800ee4c <HAL_TIM_ConfigClockSource+0x158>
 800edce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800edd2:	f200 8087 	bhi.w	800eee4 <HAL_TIM_ConfigClockSource+0x1f0>
 800edd6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800edda:	f000 8086 	beq.w	800eeea <HAL_TIM_ConfigClockSource+0x1f6>
 800edde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ede2:	d87f      	bhi.n	800eee4 <HAL_TIM_ConfigClockSource+0x1f0>
 800ede4:	2b70      	cmp	r3, #112	@ 0x70
 800ede6:	d01a      	beq.n	800ee1e <HAL_TIM_ConfigClockSource+0x12a>
 800ede8:	2b70      	cmp	r3, #112	@ 0x70
 800edea:	d87b      	bhi.n	800eee4 <HAL_TIM_ConfigClockSource+0x1f0>
 800edec:	2b60      	cmp	r3, #96	@ 0x60
 800edee:	d050      	beq.n	800ee92 <HAL_TIM_ConfigClockSource+0x19e>
 800edf0:	2b60      	cmp	r3, #96	@ 0x60
 800edf2:	d877      	bhi.n	800eee4 <HAL_TIM_ConfigClockSource+0x1f0>
 800edf4:	2b50      	cmp	r3, #80	@ 0x50
 800edf6:	d03c      	beq.n	800ee72 <HAL_TIM_ConfigClockSource+0x17e>
 800edf8:	2b50      	cmp	r3, #80	@ 0x50
 800edfa:	d873      	bhi.n	800eee4 <HAL_TIM_ConfigClockSource+0x1f0>
 800edfc:	2b40      	cmp	r3, #64	@ 0x40
 800edfe:	d058      	beq.n	800eeb2 <HAL_TIM_ConfigClockSource+0x1be>
 800ee00:	2b40      	cmp	r3, #64	@ 0x40
 800ee02:	d86f      	bhi.n	800eee4 <HAL_TIM_ConfigClockSource+0x1f0>
 800ee04:	2b30      	cmp	r3, #48	@ 0x30
 800ee06:	d064      	beq.n	800eed2 <HAL_TIM_ConfigClockSource+0x1de>
 800ee08:	2b30      	cmp	r3, #48	@ 0x30
 800ee0a:	d86b      	bhi.n	800eee4 <HAL_TIM_ConfigClockSource+0x1f0>
 800ee0c:	2b20      	cmp	r3, #32
 800ee0e:	d060      	beq.n	800eed2 <HAL_TIM_ConfigClockSource+0x1de>
 800ee10:	2b20      	cmp	r3, #32
 800ee12:	d867      	bhi.n	800eee4 <HAL_TIM_ConfigClockSource+0x1f0>
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d05c      	beq.n	800eed2 <HAL_TIM_ConfigClockSource+0x1de>
 800ee18:	2b10      	cmp	r3, #16
 800ee1a:	d05a      	beq.n	800eed2 <HAL_TIM_ConfigClockSource+0x1de>
 800ee1c:	e062      	b.n	800eee4 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ee22:	683b      	ldr	r3, [r7, #0]
 800ee24:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ee26:	683b      	ldr	r3, [r7, #0]
 800ee28:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ee2a:	683b      	ldr	r3, [r7, #0]
 800ee2c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ee2e:	f000 fe8b 	bl	800fb48 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	681b      	ldr	r3, [r3, #0]
 800ee36:	689b      	ldr	r3, [r3, #8]
 800ee38:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ee3a:	68bb      	ldr	r3, [r7, #8]
 800ee3c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800ee40:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	681b      	ldr	r3, [r3, #0]
 800ee46:	68ba      	ldr	r2, [r7, #8]
 800ee48:	609a      	str	r2, [r3, #8]
      break;
 800ee4a:	e04f      	b.n	800eeec <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ee50:	683b      	ldr	r3, [r7, #0]
 800ee52:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ee54:	683b      	ldr	r3, [r7, #0]
 800ee56:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ee58:	683b      	ldr	r3, [r7, #0]
 800ee5a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ee5c:	f000 fe74 	bl	800fb48 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	689a      	ldr	r2, [r3, #8]
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ee6e:	609a      	str	r2, [r3, #8]
      break;
 800ee70:	e03c      	b.n	800eeec <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ee76:	683b      	ldr	r3, [r7, #0]
 800ee78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ee7a:	683b      	ldr	r3, [r7, #0]
 800ee7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ee7e:	461a      	mov	r2, r3
 800ee80:	f000 fde6 	bl	800fa50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	681b      	ldr	r3, [r3, #0]
 800ee88:	2150      	movs	r1, #80	@ 0x50
 800ee8a:	4618      	mov	r0, r3
 800ee8c:	f000 fe3f 	bl	800fb0e <TIM_ITRx_SetConfig>
      break;
 800ee90:	e02c      	b.n	800eeec <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ee96:	683b      	ldr	r3, [r7, #0]
 800ee98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ee9a:	683b      	ldr	r3, [r7, #0]
 800ee9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ee9e:	461a      	mov	r2, r3
 800eea0:	f000 fe05 	bl	800faae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	681b      	ldr	r3, [r3, #0]
 800eea8:	2160      	movs	r1, #96	@ 0x60
 800eeaa:	4618      	mov	r0, r3
 800eeac:	f000 fe2f 	bl	800fb0e <TIM_ITRx_SetConfig>
      break;
 800eeb0:	e01c      	b.n	800eeec <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800eeb6:	683b      	ldr	r3, [r7, #0]
 800eeb8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800eeba:	683b      	ldr	r3, [r7, #0]
 800eebc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800eebe:	461a      	mov	r2, r3
 800eec0:	f000 fdc6 	bl	800fa50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	2140      	movs	r1, #64	@ 0x40
 800eeca:	4618      	mov	r0, r3
 800eecc:	f000 fe1f 	bl	800fb0e <TIM_ITRx_SetConfig>
      break;
 800eed0:	e00c      	b.n	800eeec <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	681a      	ldr	r2, [r3, #0]
 800eed6:	683b      	ldr	r3, [r7, #0]
 800eed8:	681b      	ldr	r3, [r3, #0]
 800eeda:	4619      	mov	r1, r3
 800eedc:	4610      	mov	r0, r2
 800eede:	f000 fe16 	bl	800fb0e <TIM_ITRx_SetConfig>
      break;
 800eee2:	e003      	b.n	800eeec <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800eee4:	2301      	movs	r3, #1
 800eee6:	73fb      	strb	r3, [r7, #15]
      break;
 800eee8:	e000      	b.n	800eeec <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800eeea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	2201      	movs	r2, #1
 800eef0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	2200      	movs	r2, #0
 800eef8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800eefc:	7bfb      	ldrb	r3, [r7, #15]
}
 800eefe:	4618      	mov	r0, r3
 800ef00:	3710      	adds	r7, #16
 800ef02:	46bd      	mov	sp, r7
 800ef04:	bd80      	pop	{r7, pc}
 800ef06:	bf00      	nop
 800ef08:	00100070 	.word	0x00100070
 800ef0c:	00100060 	.word	0x00100060
 800ef10:	00100050 	.word	0x00100050
 800ef14:	00100040 	.word	0x00100040
 800ef18:	00100030 	.word	0x00100030
 800ef1c:	00100020 	.word	0x00100020

0800ef20 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800ef20:	b480      	push	{r7}
 800ef22:	b083      	sub	sp, #12
 800ef24:	af00      	add	r7, sp, #0
 800ef26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800ef28:	bf00      	nop
 800ef2a:	370c      	adds	r7, #12
 800ef2c:	46bd      	mov	sp, r7
 800ef2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef32:	4770      	bx	lr

0800ef34 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ef34:	b480      	push	{r7}
 800ef36:	b083      	sub	sp, #12
 800ef38:	af00      	add	r7, sp, #0
 800ef3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ef3c:	bf00      	nop
 800ef3e:	370c      	adds	r7, #12
 800ef40:	46bd      	mov	sp, r7
 800ef42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef46:	4770      	bx	lr

0800ef48 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ef48:	b480      	push	{r7}
 800ef4a:	b083      	sub	sp, #12
 800ef4c:	af00      	add	r7, sp, #0
 800ef4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ef50:	bf00      	nop
 800ef52:	370c      	adds	r7, #12
 800ef54:	46bd      	mov	sp, r7
 800ef56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef5a:	4770      	bx	lr

0800ef5c <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800ef5c:	b480      	push	{r7}
 800ef5e:	b083      	sub	sp, #12
 800ef60:	af00      	add	r7, sp, #0
 800ef62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800ef64:	bf00      	nop
 800ef66:	370c      	adds	r7, #12
 800ef68:	46bd      	mov	sp, r7
 800ef6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef6e:	4770      	bx	lr

0800ef70 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ef70:	b480      	push	{r7}
 800ef72:	b083      	sub	sp, #12
 800ef74:	af00      	add	r7, sp, #0
 800ef76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ef78:	bf00      	nop
 800ef7a:	370c      	adds	r7, #12
 800ef7c:	46bd      	mov	sp, r7
 800ef7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef82:	4770      	bx	lr

0800ef84 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800ef84:	b480      	push	{r7}
 800ef86:	b083      	sub	sp, #12
 800ef88:	af00      	add	r7, sp, #0
 800ef8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800ef8c:	bf00      	nop
 800ef8e:	370c      	adds	r7, #12
 800ef90:	46bd      	mov	sp, r7
 800ef92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef96:	4770      	bx	lr

0800ef98 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ef98:	b480      	push	{r7}
 800ef9a:	b083      	sub	sp, #12
 800ef9c:	af00      	add	r7, sp, #0
 800ef9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800efa0:	bf00      	nop
 800efa2:	370c      	adds	r7, #12
 800efa4:	46bd      	mov	sp, r7
 800efa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efaa:	4770      	bx	lr

0800efac <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800efac:	b480      	push	{r7}
 800efae:	b083      	sub	sp, #12
 800efb0:	af00      	add	r7, sp, #0
 800efb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800efb4:	bf00      	nop
 800efb6:	370c      	adds	r7, #12
 800efb8:	46bd      	mov	sp, r7
 800efba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efbe:	4770      	bx	lr

0800efc0 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800efc0:	b480      	push	{r7}
 800efc2:	b083      	sub	sp, #12
 800efc4:	af00      	add	r7, sp, #0
 800efc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800efc8:	bf00      	nop
 800efca:	370c      	adds	r7, #12
 800efcc:	46bd      	mov	sp, r7
 800efce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efd2:	4770      	bx	lr

0800efd4 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 800efd4:	b480      	push	{r7}
 800efd6:	b087      	sub	sp, #28
 800efd8:	af00      	add	r7, sp, #0
 800efda:	60f8      	str	r0, [r7, #12]
 800efdc:	460b      	mov	r3, r1
 800efde:	607a      	str	r2, [r7, #4]
 800efe0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800efe2:	2300      	movs	r3, #0
 800efe4:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d101      	bne.n	800eff0 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 800efec:	2301      	movs	r3, #1
 800efee:	e14a      	b.n	800f286 <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 800eff0:	68fb      	ldr	r3, [r7, #12]
 800eff2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800eff6:	b2db      	uxtb	r3, r3
 800eff8:	2b01      	cmp	r3, #1
 800effa:	f040 80dd 	bne.w	800f1b8 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 800effe:	7afb      	ldrb	r3, [r7, #11]
 800f000:	2b1f      	cmp	r3, #31
 800f002:	f200 80d6 	bhi.w	800f1b2 <HAL_TIM_RegisterCallback+0x1de>
 800f006:	a201      	add	r2, pc, #4	@ (adr r2, 800f00c <HAL_TIM_RegisterCallback+0x38>)
 800f008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f00c:	0800f08d 	.word	0x0800f08d
 800f010:	0800f095 	.word	0x0800f095
 800f014:	0800f09d 	.word	0x0800f09d
 800f018:	0800f0a5 	.word	0x0800f0a5
 800f01c:	0800f0ad 	.word	0x0800f0ad
 800f020:	0800f0b5 	.word	0x0800f0b5
 800f024:	0800f0bd 	.word	0x0800f0bd
 800f028:	0800f0c5 	.word	0x0800f0c5
 800f02c:	0800f0cd 	.word	0x0800f0cd
 800f030:	0800f0d5 	.word	0x0800f0d5
 800f034:	0800f0dd 	.word	0x0800f0dd
 800f038:	0800f0e5 	.word	0x0800f0e5
 800f03c:	0800f0ed 	.word	0x0800f0ed
 800f040:	0800f0f5 	.word	0x0800f0f5
 800f044:	0800f0ff 	.word	0x0800f0ff
 800f048:	0800f109 	.word	0x0800f109
 800f04c:	0800f113 	.word	0x0800f113
 800f050:	0800f11d 	.word	0x0800f11d
 800f054:	0800f127 	.word	0x0800f127
 800f058:	0800f131 	.word	0x0800f131
 800f05c:	0800f13b 	.word	0x0800f13b
 800f060:	0800f145 	.word	0x0800f145
 800f064:	0800f14f 	.word	0x0800f14f
 800f068:	0800f159 	.word	0x0800f159
 800f06c:	0800f163 	.word	0x0800f163
 800f070:	0800f16d 	.word	0x0800f16d
 800f074:	0800f177 	.word	0x0800f177
 800f078:	0800f181 	.word	0x0800f181
 800f07c:	0800f18b 	.word	0x0800f18b
 800f080:	0800f195 	.word	0x0800f195
 800f084:	0800f19f 	.word	0x0800f19f
 800f088:	0800f1a9 	.word	0x0800f1a9
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 800f08c:	68fb      	ldr	r3, [r7, #12]
 800f08e:	687a      	ldr	r2, [r7, #4]
 800f090:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800f092:	e0f7      	b.n	800f284 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 800f094:	68fb      	ldr	r3, [r7, #12]
 800f096:	687a      	ldr	r2, [r7, #4]
 800f098:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800f09a:	e0f3      	b.n	800f284 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 800f09c:	68fb      	ldr	r3, [r7, #12]
 800f09e:	687a      	ldr	r2, [r7, #4]
 800f0a0:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800f0a2:	e0ef      	b.n	800f284 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	687a      	ldr	r2, [r7, #4]
 800f0a8:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800f0aa:	e0eb      	b.n	800f284 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	687a      	ldr	r2, [r7, #4]
 800f0b0:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800f0b2:	e0e7      	b.n	800f284 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 800f0b4:	68fb      	ldr	r3, [r7, #12]
 800f0b6:	687a      	ldr	r2, [r7, #4]
 800f0b8:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800f0ba:	e0e3      	b.n	800f284 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 800f0bc:	68fb      	ldr	r3, [r7, #12]
 800f0be:	687a      	ldr	r2, [r7, #4]
 800f0c0:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800f0c2:	e0df      	b.n	800f284 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 800f0c4:	68fb      	ldr	r3, [r7, #12]
 800f0c6:	687a      	ldr	r2, [r7, #4]
 800f0c8:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800f0ca:	e0db      	b.n	800f284 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	687a      	ldr	r2, [r7, #4]
 800f0d0:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800f0d2:	e0d7      	b.n	800f284 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	687a      	ldr	r2, [r7, #4]
 800f0d8:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800f0da:	e0d3      	b.n	800f284 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	687a      	ldr	r2, [r7, #4]
 800f0e0:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800f0e2:	e0cf      	b.n	800f284 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 800f0e4:	68fb      	ldr	r3, [r7, #12]
 800f0e6:	687a      	ldr	r2, [r7, #4]
 800f0e8:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800f0ea:	e0cb      	b.n	800f284 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 800f0ec:	68fb      	ldr	r3, [r7, #12]
 800f0ee:	687a      	ldr	r2, [r7, #4]
 800f0f0:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800f0f2:	e0c7      	b.n	800f284 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 800f0f4:	68fb      	ldr	r3, [r7, #12]
 800f0f6:	687a      	ldr	r2, [r7, #4]
 800f0f8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800f0fc:	e0c2      	b.n	800f284 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	687a      	ldr	r2, [r7, #4]
 800f102:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 800f106:	e0bd      	b.n	800f284 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800f108:	68fb      	ldr	r3, [r7, #12]
 800f10a:	687a      	ldr	r2, [r7, #4]
 800f10c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 800f110:	e0b8      	b.n	800f284 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 800f112:	68fb      	ldr	r3, [r7, #12]
 800f114:	687a      	ldr	r2, [r7, #4]
 800f116:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 800f11a:	e0b3      	b.n	800f284 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	687a      	ldr	r2, [r7, #4]
 800f120:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 800f124:	e0ae      	b.n	800f284 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	687a      	ldr	r2, [r7, #4]
 800f12a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800f12e:	e0a9      	b.n	800f284 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 800f130:	68fb      	ldr	r3, [r7, #12]
 800f132:	687a      	ldr	r2, [r7, #4]
 800f134:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800f138:	e0a4      	b.n	800f284 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	687a      	ldr	r2, [r7, #4]
 800f13e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800f142:	e09f      	b.n	800f284 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 800f144:	68fb      	ldr	r3, [r7, #12]
 800f146:	687a      	ldr	r2, [r7, #4]
 800f148:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800f14c:	e09a      	b.n	800f284 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	687a      	ldr	r2, [r7, #4]
 800f152:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800f156:	e095      	b.n	800f284 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 800f158:	68fb      	ldr	r3, [r7, #12]
 800f15a:	687a      	ldr	r2, [r7, #4]
 800f15c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800f160:	e090      	b.n	800f284 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 800f162:	68fb      	ldr	r3, [r7, #12]
 800f164:	687a      	ldr	r2, [r7, #4]
 800f166:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800f16a:	e08b      	b.n	800f284 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 800f16c:	68fb      	ldr	r3, [r7, #12]
 800f16e:	687a      	ldr	r2, [r7, #4]
 800f170:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800f174:	e086      	b.n	800f284 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 800f176:	68fb      	ldr	r3, [r7, #12]
 800f178:	687a      	ldr	r2, [r7, #4]
 800f17a:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800f17e:	e081      	b.n	800f284 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	687a      	ldr	r2, [r7, #4]
 800f184:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800f188:	e07c      	b.n	800f284 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	687a      	ldr	r2, [r7, #4]
 800f18e:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800f192:	e077      	b.n	800f284 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 800f194:	68fb      	ldr	r3, [r7, #12]
 800f196:	687a      	ldr	r2, [r7, #4]
 800f198:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 800f19c:	e072      	b.n	800f284 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 800f19e:	68fb      	ldr	r3, [r7, #12]
 800f1a0:	687a      	ldr	r2, [r7, #4]
 800f1a2:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800f1a6:	e06d      	b.n	800f284 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 800f1a8:	68fb      	ldr	r3, [r7, #12]
 800f1aa:	687a      	ldr	r2, [r7, #4]
 800f1ac:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800f1b0:	e068      	b.n	800f284 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800f1b2:	2301      	movs	r3, #1
 800f1b4:	75fb      	strb	r3, [r7, #23]
        break;
 800f1b6:	e065      	b.n	800f284 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f1be:	b2db      	uxtb	r3, r3
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d15d      	bne.n	800f280 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 800f1c4:	7afb      	ldrb	r3, [r7, #11]
 800f1c6:	2b0d      	cmp	r3, #13
 800f1c8:	d857      	bhi.n	800f27a <HAL_TIM_RegisterCallback+0x2a6>
 800f1ca:	a201      	add	r2, pc, #4	@ (adr r2, 800f1d0 <HAL_TIM_RegisterCallback+0x1fc>)
 800f1cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1d0:	0800f209 	.word	0x0800f209
 800f1d4:	0800f211 	.word	0x0800f211
 800f1d8:	0800f219 	.word	0x0800f219
 800f1dc:	0800f221 	.word	0x0800f221
 800f1e0:	0800f229 	.word	0x0800f229
 800f1e4:	0800f231 	.word	0x0800f231
 800f1e8:	0800f239 	.word	0x0800f239
 800f1ec:	0800f241 	.word	0x0800f241
 800f1f0:	0800f249 	.word	0x0800f249
 800f1f4:	0800f251 	.word	0x0800f251
 800f1f8:	0800f259 	.word	0x0800f259
 800f1fc:	0800f261 	.word	0x0800f261
 800f200:	0800f269 	.word	0x0800f269
 800f204:	0800f271 	.word	0x0800f271
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 800f208:	68fb      	ldr	r3, [r7, #12]
 800f20a:	687a      	ldr	r2, [r7, #4]
 800f20c:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800f20e:	e039      	b.n	800f284 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 800f210:	68fb      	ldr	r3, [r7, #12]
 800f212:	687a      	ldr	r2, [r7, #4]
 800f214:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800f216:	e035      	b.n	800f284 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	687a      	ldr	r2, [r7, #4]
 800f21c:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800f21e:	e031      	b.n	800f284 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	687a      	ldr	r2, [r7, #4]
 800f224:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800f226:	e02d      	b.n	800f284 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	687a      	ldr	r2, [r7, #4]
 800f22c:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800f22e:	e029      	b.n	800f284 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 800f230:	68fb      	ldr	r3, [r7, #12]
 800f232:	687a      	ldr	r2, [r7, #4]
 800f234:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800f236:	e025      	b.n	800f284 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 800f238:	68fb      	ldr	r3, [r7, #12]
 800f23a:	687a      	ldr	r2, [r7, #4]
 800f23c:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800f23e:	e021      	b.n	800f284 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 800f240:	68fb      	ldr	r3, [r7, #12]
 800f242:	687a      	ldr	r2, [r7, #4]
 800f244:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800f246:	e01d      	b.n	800f284 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	687a      	ldr	r2, [r7, #4]
 800f24c:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800f24e:	e019      	b.n	800f284 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 800f250:	68fb      	ldr	r3, [r7, #12]
 800f252:	687a      	ldr	r2, [r7, #4]
 800f254:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800f256:	e015      	b.n	800f284 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 800f258:	68fb      	ldr	r3, [r7, #12]
 800f25a:	687a      	ldr	r2, [r7, #4]
 800f25c:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800f25e:	e011      	b.n	800f284 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	687a      	ldr	r2, [r7, #4]
 800f264:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800f266:	e00d      	b.n	800f284 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 800f268:	68fb      	ldr	r3, [r7, #12]
 800f26a:	687a      	ldr	r2, [r7, #4]
 800f26c:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800f26e:	e009      	b.n	800f284 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	687a      	ldr	r2, [r7, #4]
 800f274:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800f278:	e004      	b.n	800f284 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800f27a:	2301      	movs	r3, #1
 800f27c:	75fb      	strb	r3, [r7, #23]
        break;
 800f27e:	e001      	b.n	800f284 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 800f280:	2301      	movs	r3, #1
 800f282:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800f284:	7dfb      	ldrb	r3, [r7, #23]
}
 800f286:	4618      	mov	r0, r3
 800f288:	371c      	adds	r7, #28
 800f28a:	46bd      	mov	sp, r7
 800f28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f290:	4770      	bx	lr
 800f292:	bf00      	nop

0800f294 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800f294:	b480      	push	{r7}
 800f296:	b085      	sub	sp, #20
 800f298:	af00      	add	r7, sp, #0
 800f29a:	6078      	str	r0, [r7, #4]
 800f29c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	681b      	ldr	r3, [r3, #0]
 800f2a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	4a4c      	ldr	r2, [pc, #304]	@ (800f3d8 <TIM_Base_SetConfig+0x144>)
 800f2a8:	4293      	cmp	r3, r2
 800f2aa:	d017      	beq.n	800f2dc <TIM_Base_SetConfig+0x48>
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f2b2:	d013      	beq.n	800f2dc <TIM_Base_SetConfig+0x48>
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	4a49      	ldr	r2, [pc, #292]	@ (800f3dc <TIM_Base_SetConfig+0x148>)
 800f2b8:	4293      	cmp	r3, r2
 800f2ba:	d00f      	beq.n	800f2dc <TIM_Base_SetConfig+0x48>
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	4a48      	ldr	r2, [pc, #288]	@ (800f3e0 <TIM_Base_SetConfig+0x14c>)
 800f2c0:	4293      	cmp	r3, r2
 800f2c2:	d00b      	beq.n	800f2dc <TIM_Base_SetConfig+0x48>
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	4a47      	ldr	r2, [pc, #284]	@ (800f3e4 <TIM_Base_SetConfig+0x150>)
 800f2c8:	4293      	cmp	r3, r2
 800f2ca:	d007      	beq.n	800f2dc <TIM_Base_SetConfig+0x48>
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	4a46      	ldr	r2, [pc, #280]	@ (800f3e8 <TIM_Base_SetConfig+0x154>)
 800f2d0:	4293      	cmp	r3, r2
 800f2d2:	d003      	beq.n	800f2dc <TIM_Base_SetConfig+0x48>
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	4a45      	ldr	r2, [pc, #276]	@ (800f3ec <TIM_Base_SetConfig+0x158>)
 800f2d8:	4293      	cmp	r3, r2
 800f2da:	d108      	bne.n	800f2ee <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f2dc:	68fb      	ldr	r3, [r7, #12]
 800f2de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f2e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f2e4:	683b      	ldr	r3, [r7, #0]
 800f2e6:	685b      	ldr	r3, [r3, #4]
 800f2e8:	68fa      	ldr	r2, [r7, #12]
 800f2ea:	4313      	orrs	r3, r2
 800f2ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	4a39      	ldr	r2, [pc, #228]	@ (800f3d8 <TIM_Base_SetConfig+0x144>)
 800f2f2:	4293      	cmp	r3, r2
 800f2f4:	d023      	beq.n	800f33e <TIM_Base_SetConfig+0xaa>
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f2fc:	d01f      	beq.n	800f33e <TIM_Base_SetConfig+0xaa>
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	4a36      	ldr	r2, [pc, #216]	@ (800f3dc <TIM_Base_SetConfig+0x148>)
 800f302:	4293      	cmp	r3, r2
 800f304:	d01b      	beq.n	800f33e <TIM_Base_SetConfig+0xaa>
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	4a35      	ldr	r2, [pc, #212]	@ (800f3e0 <TIM_Base_SetConfig+0x14c>)
 800f30a:	4293      	cmp	r3, r2
 800f30c:	d017      	beq.n	800f33e <TIM_Base_SetConfig+0xaa>
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	4a34      	ldr	r2, [pc, #208]	@ (800f3e4 <TIM_Base_SetConfig+0x150>)
 800f312:	4293      	cmp	r3, r2
 800f314:	d013      	beq.n	800f33e <TIM_Base_SetConfig+0xaa>
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	4a33      	ldr	r2, [pc, #204]	@ (800f3e8 <TIM_Base_SetConfig+0x154>)
 800f31a:	4293      	cmp	r3, r2
 800f31c:	d00f      	beq.n	800f33e <TIM_Base_SetConfig+0xaa>
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	4a33      	ldr	r2, [pc, #204]	@ (800f3f0 <TIM_Base_SetConfig+0x15c>)
 800f322:	4293      	cmp	r3, r2
 800f324:	d00b      	beq.n	800f33e <TIM_Base_SetConfig+0xaa>
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	4a32      	ldr	r2, [pc, #200]	@ (800f3f4 <TIM_Base_SetConfig+0x160>)
 800f32a:	4293      	cmp	r3, r2
 800f32c:	d007      	beq.n	800f33e <TIM_Base_SetConfig+0xaa>
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	4a31      	ldr	r2, [pc, #196]	@ (800f3f8 <TIM_Base_SetConfig+0x164>)
 800f332:	4293      	cmp	r3, r2
 800f334:	d003      	beq.n	800f33e <TIM_Base_SetConfig+0xaa>
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	4a2c      	ldr	r2, [pc, #176]	@ (800f3ec <TIM_Base_SetConfig+0x158>)
 800f33a:	4293      	cmp	r3, r2
 800f33c:	d108      	bne.n	800f350 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f344:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f346:	683b      	ldr	r3, [r7, #0]
 800f348:	68db      	ldr	r3, [r3, #12]
 800f34a:	68fa      	ldr	r2, [r7, #12]
 800f34c:	4313      	orrs	r3, r2
 800f34e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800f356:	683b      	ldr	r3, [r7, #0]
 800f358:	695b      	ldr	r3, [r3, #20]
 800f35a:	4313      	orrs	r3, r2
 800f35c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	68fa      	ldr	r2, [r7, #12]
 800f362:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f364:	683b      	ldr	r3, [r7, #0]
 800f366:	689a      	ldr	r2, [r3, #8]
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f36c:	683b      	ldr	r3, [r7, #0]
 800f36e:	681a      	ldr	r2, [r3, #0]
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	4a18      	ldr	r2, [pc, #96]	@ (800f3d8 <TIM_Base_SetConfig+0x144>)
 800f378:	4293      	cmp	r3, r2
 800f37a:	d013      	beq.n	800f3a4 <TIM_Base_SetConfig+0x110>
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	4a1a      	ldr	r2, [pc, #104]	@ (800f3e8 <TIM_Base_SetConfig+0x154>)
 800f380:	4293      	cmp	r3, r2
 800f382:	d00f      	beq.n	800f3a4 <TIM_Base_SetConfig+0x110>
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	4a1a      	ldr	r2, [pc, #104]	@ (800f3f0 <TIM_Base_SetConfig+0x15c>)
 800f388:	4293      	cmp	r3, r2
 800f38a:	d00b      	beq.n	800f3a4 <TIM_Base_SetConfig+0x110>
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	4a19      	ldr	r2, [pc, #100]	@ (800f3f4 <TIM_Base_SetConfig+0x160>)
 800f390:	4293      	cmp	r3, r2
 800f392:	d007      	beq.n	800f3a4 <TIM_Base_SetConfig+0x110>
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	4a18      	ldr	r2, [pc, #96]	@ (800f3f8 <TIM_Base_SetConfig+0x164>)
 800f398:	4293      	cmp	r3, r2
 800f39a:	d003      	beq.n	800f3a4 <TIM_Base_SetConfig+0x110>
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	4a13      	ldr	r2, [pc, #76]	@ (800f3ec <TIM_Base_SetConfig+0x158>)
 800f3a0:	4293      	cmp	r3, r2
 800f3a2:	d103      	bne.n	800f3ac <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f3a4:	683b      	ldr	r3, [r7, #0]
 800f3a6:	691a      	ldr	r2, [r3, #16]
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	2201      	movs	r2, #1
 800f3b0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	691b      	ldr	r3, [r3, #16]
 800f3b6:	f003 0301 	and.w	r3, r3, #1
 800f3ba:	2b01      	cmp	r3, #1
 800f3bc:	d105      	bne.n	800f3ca <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	691b      	ldr	r3, [r3, #16]
 800f3c2:	f023 0201 	bic.w	r2, r3, #1
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	611a      	str	r2, [r3, #16]
  }
}
 800f3ca:	bf00      	nop
 800f3cc:	3714      	adds	r7, #20
 800f3ce:	46bd      	mov	sp, r7
 800f3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3d4:	4770      	bx	lr
 800f3d6:	bf00      	nop
 800f3d8:	40012c00 	.word	0x40012c00
 800f3dc:	40000400 	.word	0x40000400
 800f3e0:	40000800 	.word	0x40000800
 800f3e4:	40000c00 	.word	0x40000c00
 800f3e8:	40013400 	.word	0x40013400
 800f3ec:	40015000 	.word	0x40015000
 800f3f0:	40014000 	.word	0x40014000
 800f3f4:	40014400 	.word	0x40014400
 800f3f8:	40014800 	.word	0x40014800

0800f3fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f3fc:	b480      	push	{r7}
 800f3fe:	b087      	sub	sp, #28
 800f400:	af00      	add	r7, sp, #0
 800f402:	6078      	str	r0, [r7, #4]
 800f404:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	6a1b      	ldr	r3, [r3, #32]
 800f40a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	6a1b      	ldr	r3, [r3, #32]
 800f410:	f023 0201 	bic.w	r2, r3, #1
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	685b      	ldr	r3, [r3, #4]
 800f41c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	699b      	ldr	r3, [r3, #24]
 800f422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f424:	68fb      	ldr	r3, [r7, #12]
 800f426:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f42a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f42e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f430:	68fb      	ldr	r3, [r7, #12]
 800f432:	f023 0303 	bic.w	r3, r3, #3
 800f436:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f438:	683b      	ldr	r3, [r7, #0]
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	68fa      	ldr	r2, [r7, #12]
 800f43e:	4313      	orrs	r3, r2
 800f440:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f442:	697b      	ldr	r3, [r7, #20]
 800f444:	f023 0302 	bic.w	r3, r3, #2
 800f448:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f44a:	683b      	ldr	r3, [r7, #0]
 800f44c:	689b      	ldr	r3, [r3, #8]
 800f44e:	697a      	ldr	r2, [r7, #20]
 800f450:	4313      	orrs	r3, r2
 800f452:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	4a30      	ldr	r2, [pc, #192]	@ (800f518 <TIM_OC1_SetConfig+0x11c>)
 800f458:	4293      	cmp	r3, r2
 800f45a:	d013      	beq.n	800f484 <TIM_OC1_SetConfig+0x88>
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	4a2f      	ldr	r2, [pc, #188]	@ (800f51c <TIM_OC1_SetConfig+0x120>)
 800f460:	4293      	cmp	r3, r2
 800f462:	d00f      	beq.n	800f484 <TIM_OC1_SetConfig+0x88>
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	4a2e      	ldr	r2, [pc, #184]	@ (800f520 <TIM_OC1_SetConfig+0x124>)
 800f468:	4293      	cmp	r3, r2
 800f46a:	d00b      	beq.n	800f484 <TIM_OC1_SetConfig+0x88>
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	4a2d      	ldr	r2, [pc, #180]	@ (800f524 <TIM_OC1_SetConfig+0x128>)
 800f470:	4293      	cmp	r3, r2
 800f472:	d007      	beq.n	800f484 <TIM_OC1_SetConfig+0x88>
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	4a2c      	ldr	r2, [pc, #176]	@ (800f528 <TIM_OC1_SetConfig+0x12c>)
 800f478:	4293      	cmp	r3, r2
 800f47a:	d003      	beq.n	800f484 <TIM_OC1_SetConfig+0x88>
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	4a2b      	ldr	r2, [pc, #172]	@ (800f52c <TIM_OC1_SetConfig+0x130>)
 800f480:	4293      	cmp	r3, r2
 800f482:	d10c      	bne.n	800f49e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f484:	697b      	ldr	r3, [r7, #20]
 800f486:	f023 0308 	bic.w	r3, r3, #8
 800f48a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f48c:	683b      	ldr	r3, [r7, #0]
 800f48e:	68db      	ldr	r3, [r3, #12]
 800f490:	697a      	ldr	r2, [r7, #20]
 800f492:	4313      	orrs	r3, r2
 800f494:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f496:	697b      	ldr	r3, [r7, #20]
 800f498:	f023 0304 	bic.w	r3, r3, #4
 800f49c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	4a1d      	ldr	r2, [pc, #116]	@ (800f518 <TIM_OC1_SetConfig+0x11c>)
 800f4a2:	4293      	cmp	r3, r2
 800f4a4:	d013      	beq.n	800f4ce <TIM_OC1_SetConfig+0xd2>
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	4a1c      	ldr	r2, [pc, #112]	@ (800f51c <TIM_OC1_SetConfig+0x120>)
 800f4aa:	4293      	cmp	r3, r2
 800f4ac:	d00f      	beq.n	800f4ce <TIM_OC1_SetConfig+0xd2>
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	4a1b      	ldr	r2, [pc, #108]	@ (800f520 <TIM_OC1_SetConfig+0x124>)
 800f4b2:	4293      	cmp	r3, r2
 800f4b4:	d00b      	beq.n	800f4ce <TIM_OC1_SetConfig+0xd2>
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	4a1a      	ldr	r2, [pc, #104]	@ (800f524 <TIM_OC1_SetConfig+0x128>)
 800f4ba:	4293      	cmp	r3, r2
 800f4bc:	d007      	beq.n	800f4ce <TIM_OC1_SetConfig+0xd2>
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	4a19      	ldr	r2, [pc, #100]	@ (800f528 <TIM_OC1_SetConfig+0x12c>)
 800f4c2:	4293      	cmp	r3, r2
 800f4c4:	d003      	beq.n	800f4ce <TIM_OC1_SetConfig+0xd2>
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	4a18      	ldr	r2, [pc, #96]	@ (800f52c <TIM_OC1_SetConfig+0x130>)
 800f4ca:	4293      	cmp	r3, r2
 800f4cc:	d111      	bne.n	800f4f2 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f4ce:	693b      	ldr	r3, [r7, #16]
 800f4d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f4d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f4d6:	693b      	ldr	r3, [r7, #16]
 800f4d8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800f4dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f4de:	683b      	ldr	r3, [r7, #0]
 800f4e0:	695b      	ldr	r3, [r3, #20]
 800f4e2:	693a      	ldr	r2, [r7, #16]
 800f4e4:	4313      	orrs	r3, r2
 800f4e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f4e8:	683b      	ldr	r3, [r7, #0]
 800f4ea:	699b      	ldr	r3, [r3, #24]
 800f4ec:	693a      	ldr	r2, [r7, #16]
 800f4ee:	4313      	orrs	r3, r2
 800f4f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	693a      	ldr	r2, [r7, #16]
 800f4f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	68fa      	ldr	r2, [r7, #12]
 800f4fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f4fe:	683b      	ldr	r3, [r7, #0]
 800f500:	685a      	ldr	r2, [r3, #4]
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	697a      	ldr	r2, [r7, #20]
 800f50a:	621a      	str	r2, [r3, #32]
}
 800f50c:	bf00      	nop
 800f50e:	371c      	adds	r7, #28
 800f510:	46bd      	mov	sp, r7
 800f512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f516:	4770      	bx	lr
 800f518:	40012c00 	.word	0x40012c00
 800f51c:	40013400 	.word	0x40013400
 800f520:	40014000 	.word	0x40014000
 800f524:	40014400 	.word	0x40014400
 800f528:	40014800 	.word	0x40014800
 800f52c:	40015000 	.word	0x40015000

0800f530 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f530:	b480      	push	{r7}
 800f532:	b087      	sub	sp, #28
 800f534:	af00      	add	r7, sp, #0
 800f536:	6078      	str	r0, [r7, #4]
 800f538:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	6a1b      	ldr	r3, [r3, #32]
 800f53e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	6a1b      	ldr	r3, [r3, #32]
 800f544:	f023 0210 	bic.w	r2, r3, #16
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	685b      	ldr	r3, [r3, #4]
 800f550:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	699b      	ldr	r3, [r3, #24]
 800f556:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f558:	68fb      	ldr	r3, [r7, #12]
 800f55a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800f55e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f562:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f56a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f56c:	683b      	ldr	r3, [r7, #0]
 800f56e:	681b      	ldr	r3, [r3, #0]
 800f570:	021b      	lsls	r3, r3, #8
 800f572:	68fa      	ldr	r2, [r7, #12]
 800f574:	4313      	orrs	r3, r2
 800f576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f578:	697b      	ldr	r3, [r7, #20]
 800f57a:	f023 0320 	bic.w	r3, r3, #32
 800f57e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f580:	683b      	ldr	r3, [r7, #0]
 800f582:	689b      	ldr	r3, [r3, #8]
 800f584:	011b      	lsls	r3, r3, #4
 800f586:	697a      	ldr	r2, [r7, #20]
 800f588:	4313      	orrs	r3, r2
 800f58a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	4a2c      	ldr	r2, [pc, #176]	@ (800f640 <TIM_OC2_SetConfig+0x110>)
 800f590:	4293      	cmp	r3, r2
 800f592:	d007      	beq.n	800f5a4 <TIM_OC2_SetConfig+0x74>
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	4a2b      	ldr	r2, [pc, #172]	@ (800f644 <TIM_OC2_SetConfig+0x114>)
 800f598:	4293      	cmp	r3, r2
 800f59a:	d003      	beq.n	800f5a4 <TIM_OC2_SetConfig+0x74>
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	4a2a      	ldr	r2, [pc, #168]	@ (800f648 <TIM_OC2_SetConfig+0x118>)
 800f5a0:	4293      	cmp	r3, r2
 800f5a2:	d10d      	bne.n	800f5c0 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f5a4:	697b      	ldr	r3, [r7, #20]
 800f5a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f5aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f5ac:	683b      	ldr	r3, [r7, #0]
 800f5ae:	68db      	ldr	r3, [r3, #12]
 800f5b0:	011b      	lsls	r3, r3, #4
 800f5b2:	697a      	ldr	r2, [r7, #20]
 800f5b4:	4313      	orrs	r3, r2
 800f5b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f5b8:	697b      	ldr	r3, [r7, #20]
 800f5ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f5be:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	4a1f      	ldr	r2, [pc, #124]	@ (800f640 <TIM_OC2_SetConfig+0x110>)
 800f5c4:	4293      	cmp	r3, r2
 800f5c6:	d013      	beq.n	800f5f0 <TIM_OC2_SetConfig+0xc0>
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	4a1e      	ldr	r2, [pc, #120]	@ (800f644 <TIM_OC2_SetConfig+0x114>)
 800f5cc:	4293      	cmp	r3, r2
 800f5ce:	d00f      	beq.n	800f5f0 <TIM_OC2_SetConfig+0xc0>
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	4a1e      	ldr	r2, [pc, #120]	@ (800f64c <TIM_OC2_SetConfig+0x11c>)
 800f5d4:	4293      	cmp	r3, r2
 800f5d6:	d00b      	beq.n	800f5f0 <TIM_OC2_SetConfig+0xc0>
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	4a1d      	ldr	r2, [pc, #116]	@ (800f650 <TIM_OC2_SetConfig+0x120>)
 800f5dc:	4293      	cmp	r3, r2
 800f5de:	d007      	beq.n	800f5f0 <TIM_OC2_SetConfig+0xc0>
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	4a1c      	ldr	r2, [pc, #112]	@ (800f654 <TIM_OC2_SetConfig+0x124>)
 800f5e4:	4293      	cmp	r3, r2
 800f5e6:	d003      	beq.n	800f5f0 <TIM_OC2_SetConfig+0xc0>
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	4a17      	ldr	r2, [pc, #92]	@ (800f648 <TIM_OC2_SetConfig+0x118>)
 800f5ec:	4293      	cmp	r3, r2
 800f5ee:	d113      	bne.n	800f618 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f5f0:	693b      	ldr	r3, [r7, #16]
 800f5f2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800f5f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f5f8:	693b      	ldr	r3, [r7, #16]
 800f5fa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800f5fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f600:	683b      	ldr	r3, [r7, #0]
 800f602:	695b      	ldr	r3, [r3, #20]
 800f604:	009b      	lsls	r3, r3, #2
 800f606:	693a      	ldr	r2, [r7, #16]
 800f608:	4313      	orrs	r3, r2
 800f60a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f60c:	683b      	ldr	r3, [r7, #0]
 800f60e:	699b      	ldr	r3, [r3, #24]
 800f610:	009b      	lsls	r3, r3, #2
 800f612:	693a      	ldr	r2, [r7, #16]
 800f614:	4313      	orrs	r3, r2
 800f616:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	693a      	ldr	r2, [r7, #16]
 800f61c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	68fa      	ldr	r2, [r7, #12]
 800f622:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f624:	683b      	ldr	r3, [r7, #0]
 800f626:	685a      	ldr	r2, [r3, #4]
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	697a      	ldr	r2, [r7, #20]
 800f630:	621a      	str	r2, [r3, #32]
}
 800f632:	bf00      	nop
 800f634:	371c      	adds	r7, #28
 800f636:	46bd      	mov	sp, r7
 800f638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f63c:	4770      	bx	lr
 800f63e:	bf00      	nop
 800f640:	40012c00 	.word	0x40012c00
 800f644:	40013400 	.word	0x40013400
 800f648:	40015000 	.word	0x40015000
 800f64c:	40014000 	.word	0x40014000
 800f650:	40014400 	.word	0x40014400
 800f654:	40014800 	.word	0x40014800

0800f658 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f658:	b480      	push	{r7}
 800f65a:	b087      	sub	sp, #28
 800f65c:	af00      	add	r7, sp, #0
 800f65e:	6078      	str	r0, [r7, #4]
 800f660:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	6a1b      	ldr	r3, [r3, #32]
 800f666:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	6a1b      	ldr	r3, [r3, #32]
 800f66c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	685b      	ldr	r3, [r3, #4]
 800f678:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	69db      	ldr	r3, [r3, #28]
 800f67e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f680:	68fb      	ldr	r3, [r7, #12]
 800f682:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f686:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f68a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f68c:	68fb      	ldr	r3, [r7, #12]
 800f68e:	f023 0303 	bic.w	r3, r3, #3
 800f692:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f694:	683b      	ldr	r3, [r7, #0]
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	68fa      	ldr	r2, [r7, #12]
 800f69a:	4313      	orrs	r3, r2
 800f69c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f69e:	697b      	ldr	r3, [r7, #20]
 800f6a0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800f6a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f6a6:	683b      	ldr	r3, [r7, #0]
 800f6a8:	689b      	ldr	r3, [r3, #8]
 800f6aa:	021b      	lsls	r3, r3, #8
 800f6ac:	697a      	ldr	r2, [r7, #20]
 800f6ae:	4313      	orrs	r3, r2
 800f6b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	4a2b      	ldr	r2, [pc, #172]	@ (800f764 <TIM_OC3_SetConfig+0x10c>)
 800f6b6:	4293      	cmp	r3, r2
 800f6b8:	d007      	beq.n	800f6ca <TIM_OC3_SetConfig+0x72>
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	4a2a      	ldr	r2, [pc, #168]	@ (800f768 <TIM_OC3_SetConfig+0x110>)
 800f6be:	4293      	cmp	r3, r2
 800f6c0:	d003      	beq.n	800f6ca <TIM_OC3_SetConfig+0x72>
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	4a29      	ldr	r2, [pc, #164]	@ (800f76c <TIM_OC3_SetConfig+0x114>)
 800f6c6:	4293      	cmp	r3, r2
 800f6c8:	d10d      	bne.n	800f6e6 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f6ca:	697b      	ldr	r3, [r7, #20]
 800f6cc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800f6d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f6d2:	683b      	ldr	r3, [r7, #0]
 800f6d4:	68db      	ldr	r3, [r3, #12]
 800f6d6:	021b      	lsls	r3, r3, #8
 800f6d8:	697a      	ldr	r2, [r7, #20]
 800f6da:	4313      	orrs	r3, r2
 800f6dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f6de:	697b      	ldr	r3, [r7, #20]
 800f6e0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800f6e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	4a1e      	ldr	r2, [pc, #120]	@ (800f764 <TIM_OC3_SetConfig+0x10c>)
 800f6ea:	4293      	cmp	r3, r2
 800f6ec:	d013      	beq.n	800f716 <TIM_OC3_SetConfig+0xbe>
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	4a1d      	ldr	r2, [pc, #116]	@ (800f768 <TIM_OC3_SetConfig+0x110>)
 800f6f2:	4293      	cmp	r3, r2
 800f6f4:	d00f      	beq.n	800f716 <TIM_OC3_SetConfig+0xbe>
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	4a1d      	ldr	r2, [pc, #116]	@ (800f770 <TIM_OC3_SetConfig+0x118>)
 800f6fa:	4293      	cmp	r3, r2
 800f6fc:	d00b      	beq.n	800f716 <TIM_OC3_SetConfig+0xbe>
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	4a1c      	ldr	r2, [pc, #112]	@ (800f774 <TIM_OC3_SetConfig+0x11c>)
 800f702:	4293      	cmp	r3, r2
 800f704:	d007      	beq.n	800f716 <TIM_OC3_SetConfig+0xbe>
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	4a1b      	ldr	r2, [pc, #108]	@ (800f778 <TIM_OC3_SetConfig+0x120>)
 800f70a:	4293      	cmp	r3, r2
 800f70c:	d003      	beq.n	800f716 <TIM_OC3_SetConfig+0xbe>
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	4a16      	ldr	r2, [pc, #88]	@ (800f76c <TIM_OC3_SetConfig+0x114>)
 800f712:	4293      	cmp	r3, r2
 800f714:	d113      	bne.n	800f73e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f716:	693b      	ldr	r3, [r7, #16]
 800f718:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f71c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f71e:	693b      	ldr	r3, [r7, #16]
 800f720:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800f724:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f726:	683b      	ldr	r3, [r7, #0]
 800f728:	695b      	ldr	r3, [r3, #20]
 800f72a:	011b      	lsls	r3, r3, #4
 800f72c:	693a      	ldr	r2, [r7, #16]
 800f72e:	4313      	orrs	r3, r2
 800f730:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f732:	683b      	ldr	r3, [r7, #0]
 800f734:	699b      	ldr	r3, [r3, #24]
 800f736:	011b      	lsls	r3, r3, #4
 800f738:	693a      	ldr	r2, [r7, #16]
 800f73a:	4313      	orrs	r3, r2
 800f73c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	693a      	ldr	r2, [r7, #16]
 800f742:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	68fa      	ldr	r2, [r7, #12]
 800f748:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f74a:	683b      	ldr	r3, [r7, #0]
 800f74c:	685a      	ldr	r2, [r3, #4]
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	697a      	ldr	r2, [r7, #20]
 800f756:	621a      	str	r2, [r3, #32]
}
 800f758:	bf00      	nop
 800f75a:	371c      	adds	r7, #28
 800f75c:	46bd      	mov	sp, r7
 800f75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f762:	4770      	bx	lr
 800f764:	40012c00 	.word	0x40012c00
 800f768:	40013400 	.word	0x40013400
 800f76c:	40015000 	.word	0x40015000
 800f770:	40014000 	.word	0x40014000
 800f774:	40014400 	.word	0x40014400
 800f778:	40014800 	.word	0x40014800

0800f77c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f77c:	b480      	push	{r7}
 800f77e:	b087      	sub	sp, #28
 800f780:	af00      	add	r7, sp, #0
 800f782:	6078      	str	r0, [r7, #4]
 800f784:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	6a1b      	ldr	r3, [r3, #32]
 800f78a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	6a1b      	ldr	r3, [r3, #32]
 800f790:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	685b      	ldr	r3, [r3, #4]
 800f79c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	69db      	ldr	r3, [r3, #28]
 800f7a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f7a4:	68fb      	ldr	r3, [r7, #12]
 800f7a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800f7aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f7ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f7b0:	68fb      	ldr	r3, [r7, #12]
 800f7b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f7b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f7b8:	683b      	ldr	r3, [r7, #0]
 800f7ba:	681b      	ldr	r3, [r3, #0]
 800f7bc:	021b      	lsls	r3, r3, #8
 800f7be:	68fa      	ldr	r2, [r7, #12]
 800f7c0:	4313      	orrs	r3, r2
 800f7c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f7c4:	697b      	ldr	r3, [r7, #20]
 800f7c6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800f7ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f7cc:	683b      	ldr	r3, [r7, #0]
 800f7ce:	689b      	ldr	r3, [r3, #8]
 800f7d0:	031b      	lsls	r3, r3, #12
 800f7d2:	697a      	ldr	r2, [r7, #20]
 800f7d4:	4313      	orrs	r3, r2
 800f7d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	4a2c      	ldr	r2, [pc, #176]	@ (800f88c <TIM_OC4_SetConfig+0x110>)
 800f7dc:	4293      	cmp	r3, r2
 800f7de:	d007      	beq.n	800f7f0 <TIM_OC4_SetConfig+0x74>
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	4a2b      	ldr	r2, [pc, #172]	@ (800f890 <TIM_OC4_SetConfig+0x114>)
 800f7e4:	4293      	cmp	r3, r2
 800f7e6:	d003      	beq.n	800f7f0 <TIM_OC4_SetConfig+0x74>
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	4a2a      	ldr	r2, [pc, #168]	@ (800f894 <TIM_OC4_SetConfig+0x118>)
 800f7ec:	4293      	cmp	r3, r2
 800f7ee:	d10d      	bne.n	800f80c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800f7f0:	697b      	ldr	r3, [r7, #20]
 800f7f2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800f7f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800f7f8:	683b      	ldr	r3, [r7, #0]
 800f7fa:	68db      	ldr	r3, [r3, #12]
 800f7fc:	031b      	lsls	r3, r3, #12
 800f7fe:	697a      	ldr	r2, [r7, #20]
 800f800:	4313      	orrs	r3, r2
 800f802:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800f804:	697b      	ldr	r3, [r7, #20]
 800f806:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800f80a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	4a1f      	ldr	r2, [pc, #124]	@ (800f88c <TIM_OC4_SetConfig+0x110>)
 800f810:	4293      	cmp	r3, r2
 800f812:	d013      	beq.n	800f83c <TIM_OC4_SetConfig+0xc0>
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	4a1e      	ldr	r2, [pc, #120]	@ (800f890 <TIM_OC4_SetConfig+0x114>)
 800f818:	4293      	cmp	r3, r2
 800f81a:	d00f      	beq.n	800f83c <TIM_OC4_SetConfig+0xc0>
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	4a1e      	ldr	r2, [pc, #120]	@ (800f898 <TIM_OC4_SetConfig+0x11c>)
 800f820:	4293      	cmp	r3, r2
 800f822:	d00b      	beq.n	800f83c <TIM_OC4_SetConfig+0xc0>
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	4a1d      	ldr	r2, [pc, #116]	@ (800f89c <TIM_OC4_SetConfig+0x120>)
 800f828:	4293      	cmp	r3, r2
 800f82a:	d007      	beq.n	800f83c <TIM_OC4_SetConfig+0xc0>
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	4a1c      	ldr	r2, [pc, #112]	@ (800f8a0 <TIM_OC4_SetConfig+0x124>)
 800f830:	4293      	cmp	r3, r2
 800f832:	d003      	beq.n	800f83c <TIM_OC4_SetConfig+0xc0>
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	4a17      	ldr	r2, [pc, #92]	@ (800f894 <TIM_OC4_SetConfig+0x118>)
 800f838:	4293      	cmp	r3, r2
 800f83a:	d113      	bne.n	800f864 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f83c:	693b      	ldr	r3, [r7, #16]
 800f83e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800f842:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800f844:	693b      	ldr	r3, [r7, #16]
 800f846:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800f84a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f84c:	683b      	ldr	r3, [r7, #0]
 800f84e:	695b      	ldr	r3, [r3, #20]
 800f850:	019b      	lsls	r3, r3, #6
 800f852:	693a      	ldr	r2, [r7, #16]
 800f854:	4313      	orrs	r3, r2
 800f856:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800f858:	683b      	ldr	r3, [r7, #0]
 800f85a:	699b      	ldr	r3, [r3, #24]
 800f85c:	019b      	lsls	r3, r3, #6
 800f85e:	693a      	ldr	r2, [r7, #16]
 800f860:	4313      	orrs	r3, r2
 800f862:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	693a      	ldr	r2, [r7, #16]
 800f868:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	68fa      	ldr	r2, [r7, #12]
 800f86e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f870:	683b      	ldr	r3, [r7, #0]
 800f872:	685a      	ldr	r2, [r3, #4]
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	697a      	ldr	r2, [r7, #20]
 800f87c:	621a      	str	r2, [r3, #32]
}
 800f87e:	bf00      	nop
 800f880:	371c      	adds	r7, #28
 800f882:	46bd      	mov	sp, r7
 800f884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f888:	4770      	bx	lr
 800f88a:	bf00      	nop
 800f88c:	40012c00 	.word	0x40012c00
 800f890:	40013400 	.word	0x40013400
 800f894:	40015000 	.word	0x40015000
 800f898:	40014000 	.word	0x40014000
 800f89c:	40014400 	.word	0x40014400
 800f8a0:	40014800 	.word	0x40014800

0800f8a4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f8a4:	b480      	push	{r7}
 800f8a6:	b087      	sub	sp, #28
 800f8a8:	af00      	add	r7, sp, #0
 800f8aa:	6078      	str	r0, [r7, #4]
 800f8ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	6a1b      	ldr	r3, [r3, #32]
 800f8b2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	6a1b      	ldr	r3, [r3, #32]
 800f8b8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	685b      	ldr	r3, [r3, #4]
 800f8c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f8ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800f8cc:	68fb      	ldr	r3, [r7, #12]
 800f8ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f8d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f8d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f8d8:	683b      	ldr	r3, [r7, #0]
 800f8da:	681b      	ldr	r3, [r3, #0]
 800f8dc:	68fa      	ldr	r2, [r7, #12]
 800f8de:	4313      	orrs	r3, r2
 800f8e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800f8e2:	693b      	ldr	r3, [r7, #16]
 800f8e4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800f8e8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800f8ea:	683b      	ldr	r3, [r7, #0]
 800f8ec:	689b      	ldr	r3, [r3, #8]
 800f8ee:	041b      	lsls	r3, r3, #16
 800f8f0:	693a      	ldr	r2, [r7, #16]
 800f8f2:	4313      	orrs	r3, r2
 800f8f4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	4a19      	ldr	r2, [pc, #100]	@ (800f960 <TIM_OC5_SetConfig+0xbc>)
 800f8fa:	4293      	cmp	r3, r2
 800f8fc:	d013      	beq.n	800f926 <TIM_OC5_SetConfig+0x82>
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	4a18      	ldr	r2, [pc, #96]	@ (800f964 <TIM_OC5_SetConfig+0xc0>)
 800f902:	4293      	cmp	r3, r2
 800f904:	d00f      	beq.n	800f926 <TIM_OC5_SetConfig+0x82>
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	4a17      	ldr	r2, [pc, #92]	@ (800f968 <TIM_OC5_SetConfig+0xc4>)
 800f90a:	4293      	cmp	r3, r2
 800f90c:	d00b      	beq.n	800f926 <TIM_OC5_SetConfig+0x82>
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	4a16      	ldr	r2, [pc, #88]	@ (800f96c <TIM_OC5_SetConfig+0xc8>)
 800f912:	4293      	cmp	r3, r2
 800f914:	d007      	beq.n	800f926 <TIM_OC5_SetConfig+0x82>
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	4a15      	ldr	r2, [pc, #84]	@ (800f970 <TIM_OC5_SetConfig+0xcc>)
 800f91a:	4293      	cmp	r3, r2
 800f91c:	d003      	beq.n	800f926 <TIM_OC5_SetConfig+0x82>
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	4a14      	ldr	r2, [pc, #80]	@ (800f974 <TIM_OC5_SetConfig+0xd0>)
 800f922:	4293      	cmp	r3, r2
 800f924:	d109      	bne.n	800f93a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800f926:	697b      	ldr	r3, [r7, #20]
 800f928:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f92c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800f92e:	683b      	ldr	r3, [r7, #0]
 800f930:	695b      	ldr	r3, [r3, #20]
 800f932:	021b      	lsls	r3, r3, #8
 800f934:	697a      	ldr	r2, [r7, #20]
 800f936:	4313      	orrs	r3, r2
 800f938:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	697a      	ldr	r2, [r7, #20]
 800f93e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	68fa      	ldr	r2, [r7, #12]
 800f944:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800f946:	683b      	ldr	r3, [r7, #0]
 800f948:	685a      	ldr	r2, [r3, #4]
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	693a      	ldr	r2, [r7, #16]
 800f952:	621a      	str	r2, [r3, #32]
}
 800f954:	bf00      	nop
 800f956:	371c      	adds	r7, #28
 800f958:	46bd      	mov	sp, r7
 800f95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f95e:	4770      	bx	lr
 800f960:	40012c00 	.word	0x40012c00
 800f964:	40013400 	.word	0x40013400
 800f968:	40014000 	.word	0x40014000
 800f96c:	40014400 	.word	0x40014400
 800f970:	40014800 	.word	0x40014800
 800f974:	40015000 	.word	0x40015000

0800f978 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f978:	b480      	push	{r7}
 800f97a:	b087      	sub	sp, #28
 800f97c:	af00      	add	r7, sp, #0
 800f97e:	6078      	str	r0, [r7, #4]
 800f980:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	6a1b      	ldr	r3, [r3, #32]
 800f986:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	6a1b      	ldr	r3, [r3, #32]
 800f98c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	685b      	ldr	r3, [r3, #4]
 800f998:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f99e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800f9a0:	68fb      	ldr	r3, [r7, #12]
 800f9a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800f9a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f9aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f9ac:	683b      	ldr	r3, [r7, #0]
 800f9ae:	681b      	ldr	r3, [r3, #0]
 800f9b0:	021b      	lsls	r3, r3, #8
 800f9b2:	68fa      	ldr	r2, [r7, #12]
 800f9b4:	4313      	orrs	r3, r2
 800f9b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800f9b8:	693b      	ldr	r3, [r7, #16]
 800f9ba:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800f9be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800f9c0:	683b      	ldr	r3, [r7, #0]
 800f9c2:	689b      	ldr	r3, [r3, #8]
 800f9c4:	051b      	lsls	r3, r3, #20
 800f9c6:	693a      	ldr	r2, [r7, #16]
 800f9c8:	4313      	orrs	r3, r2
 800f9ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	4a1a      	ldr	r2, [pc, #104]	@ (800fa38 <TIM_OC6_SetConfig+0xc0>)
 800f9d0:	4293      	cmp	r3, r2
 800f9d2:	d013      	beq.n	800f9fc <TIM_OC6_SetConfig+0x84>
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	4a19      	ldr	r2, [pc, #100]	@ (800fa3c <TIM_OC6_SetConfig+0xc4>)
 800f9d8:	4293      	cmp	r3, r2
 800f9da:	d00f      	beq.n	800f9fc <TIM_OC6_SetConfig+0x84>
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	4a18      	ldr	r2, [pc, #96]	@ (800fa40 <TIM_OC6_SetConfig+0xc8>)
 800f9e0:	4293      	cmp	r3, r2
 800f9e2:	d00b      	beq.n	800f9fc <TIM_OC6_SetConfig+0x84>
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	4a17      	ldr	r2, [pc, #92]	@ (800fa44 <TIM_OC6_SetConfig+0xcc>)
 800f9e8:	4293      	cmp	r3, r2
 800f9ea:	d007      	beq.n	800f9fc <TIM_OC6_SetConfig+0x84>
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	4a16      	ldr	r2, [pc, #88]	@ (800fa48 <TIM_OC6_SetConfig+0xd0>)
 800f9f0:	4293      	cmp	r3, r2
 800f9f2:	d003      	beq.n	800f9fc <TIM_OC6_SetConfig+0x84>
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	4a15      	ldr	r2, [pc, #84]	@ (800fa4c <TIM_OC6_SetConfig+0xd4>)
 800f9f8:	4293      	cmp	r3, r2
 800f9fa:	d109      	bne.n	800fa10 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800f9fc:	697b      	ldr	r3, [r7, #20]
 800f9fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800fa02:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800fa04:	683b      	ldr	r3, [r7, #0]
 800fa06:	695b      	ldr	r3, [r3, #20]
 800fa08:	029b      	lsls	r3, r3, #10
 800fa0a:	697a      	ldr	r2, [r7, #20]
 800fa0c:	4313      	orrs	r3, r2
 800fa0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	697a      	ldr	r2, [r7, #20]
 800fa14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	68fa      	ldr	r2, [r7, #12]
 800fa1a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800fa1c:	683b      	ldr	r3, [r7, #0]
 800fa1e:	685a      	ldr	r2, [r3, #4]
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	693a      	ldr	r2, [r7, #16]
 800fa28:	621a      	str	r2, [r3, #32]
}
 800fa2a:	bf00      	nop
 800fa2c:	371c      	adds	r7, #28
 800fa2e:	46bd      	mov	sp, r7
 800fa30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa34:	4770      	bx	lr
 800fa36:	bf00      	nop
 800fa38:	40012c00 	.word	0x40012c00
 800fa3c:	40013400 	.word	0x40013400
 800fa40:	40014000 	.word	0x40014000
 800fa44:	40014400 	.word	0x40014400
 800fa48:	40014800 	.word	0x40014800
 800fa4c:	40015000 	.word	0x40015000

0800fa50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fa50:	b480      	push	{r7}
 800fa52:	b087      	sub	sp, #28
 800fa54:	af00      	add	r7, sp, #0
 800fa56:	60f8      	str	r0, [r7, #12]
 800fa58:	60b9      	str	r1, [r7, #8]
 800fa5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800fa5c:	68fb      	ldr	r3, [r7, #12]
 800fa5e:	6a1b      	ldr	r3, [r3, #32]
 800fa60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fa62:	68fb      	ldr	r3, [r7, #12]
 800fa64:	6a1b      	ldr	r3, [r3, #32]
 800fa66:	f023 0201 	bic.w	r2, r3, #1
 800fa6a:	68fb      	ldr	r3, [r7, #12]
 800fa6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fa6e:	68fb      	ldr	r3, [r7, #12]
 800fa70:	699b      	ldr	r3, [r3, #24]
 800fa72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800fa74:	693b      	ldr	r3, [r7, #16]
 800fa76:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800fa7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	011b      	lsls	r3, r3, #4
 800fa80:	693a      	ldr	r2, [r7, #16]
 800fa82:	4313      	orrs	r3, r2
 800fa84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800fa86:	697b      	ldr	r3, [r7, #20]
 800fa88:	f023 030a 	bic.w	r3, r3, #10
 800fa8c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800fa8e:	697a      	ldr	r2, [r7, #20]
 800fa90:	68bb      	ldr	r3, [r7, #8]
 800fa92:	4313      	orrs	r3, r2
 800fa94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800fa96:	68fb      	ldr	r3, [r7, #12]
 800fa98:	693a      	ldr	r2, [r7, #16]
 800fa9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fa9c:	68fb      	ldr	r3, [r7, #12]
 800fa9e:	697a      	ldr	r2, [r7, #20]
 800faa0:	621a      	str	r2, [r3, #32]
}
 800faa2:	bf00      	nop
 800faa4:	371c      	adds	r7, #28
 800faa6:	46bd      	mov	sp, r7
 800faa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faac:	4770      	bx	lr

0800faae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800faae:	b480      	push	{r7}
 800fab0:	b087      	sub	sp, #28
 800fab2:	af00      	add	r7, sp, #0
 800fab4:	60f8      	str	r0, [r7, #12]
 800fab6:	60b9      	str	r1, [r7, #8]
 800fab8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800faba:	68fb      	ldr	r3, [r7, #12]
 800fabc:	6a1b      	ldr	r3, [r3, #32]
 800fabe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fac0:	68fb      	ldr	r3, [r7, #12]
 800fac2:	6a1b      	ldr	r3, [r3, #32]
 800fac4:	f023 0210 	bic.w	r2, r3, #16
 800fac8:	68fb      	ldr	r3, [r7, #12]
 800faca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800facc:	68fb      	ldr	r3, [r7, #12]
 800face:	699b      	ldr	r3, [r3, #24]
 800fad0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800fad2:	693b      	ldr	r3, [r7, #16]
 800fad4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800fad8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	031b      	lsls	r3, r3, #12
 800fade:	693a      	ldr	r2, [r7, #16]
 800fae0:	4313      	orrs	r3, r2
 800fae2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800fae4:	697b      	ldr	r3, [r7, #20]
 800fae6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800faea:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800faec:	68bb      	ldr	r3, [r7, #8]
 800faee:	011b      	lsls	r3, r3, #4
 800faf0:	697a      	ldr	r2, [r7, #20]
 800faf2:	4313      	orrs	r3, r2
 800faf4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800faf6:	68fb      	ldr	r3, [r7, #12]
 800faf8:	693a      	ldr	r2, [r7, #16]
 800fafa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fafc:	68fb      	ldr	r3, [r7, #12]
 800fafe:	697a      	ldr	r2, [r7, #20]
 800fb00:	621a      	str	r2, [r3, #32]
}
 800fb02:	bf00      	nop
 800fb04:	371c      	adds	r7, #28
 800fb06:	46bd      	mov	sp, r7
 800fb08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb0c:	4770      	bx	lr

0800fb0e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800fb0e:	b480      	push	{r7}
 800fb10:	b085      	sub	sp, #20
 800fb12:	af00      	add	r7, sp, #0
 800fb14:	6078      	str	r0, [r7, #4]
 800fb16:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	689b      	ldr	r3, [r3, #8]
 800fb1c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800fb1e:	68fb      	ldr	r3, [r7, #12]
 800fb20:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800fb24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fb28:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800fb2a:	683a      	ldr	r2, [r7, #0]
 800fb2c:	68fb      	ldr	r3, [r7, #12]
 800fb2e:	4313      	orrs	r3, r2
 800fb30:	f043 0307 	orr.w	r3, r3, #7
 800fb34:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	68fa      	ldr	r2, [r7, #12]
 800fb3a:	609a      	str	r2, [r3, #8]
}
 800fb3c:	bf00      	nop
 800fb3e:	3714      	adds	r7, #20
 800fb40:	46bd      	mov	sp, r7
 800fb42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb46:	4770      	bx	lr

0800fb48 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800fb48:	b480      	push	{r7}
 800fb4a:	b087      	sub	sp, #28
 800fb4c:	af00      	add	r7, sp, #0
 800fb4e:	60f8      	str	r0, [r7, #12]
 800fb50:	60b9      	str	r1, [r7, #8]
 800fb52:	607a      	str	r2, [r7, #4]
 800fb54:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800fb56:	68fb      	ldr	r3, [r7, #12]
 800fb58:	689b      	ldr	r3, [r3, #8]
 800fb5a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800fb5c:	697b      	ldr	r3, [r7, #20]
 800fb5e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800fb62:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800fb64:	683b      	ldr	r3, [r7, #0]
 800fb66:	021a      	lsls	r2, r3, #8
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	431a      	orrs	r2, r3
 800fb6c:	68bb      	ldr	r3, [r7, #8]
 800fb6e:	4313      	orrs	r3, r2
 800fb70:	697a      	ldr	r2, [r7, #20]
 800fb72:	4313      	orrs	r3, r2
 800fb74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fb76:	68fb      	ldr	r3, [r7, #12]
 800fb78:	697a      	ldr	r2, [r7, #20]
 800fb7a:	609a      	str	r2, [r3, #8]
}
 800fb7c:	bf00      	nop
 800fb7e:	371c      	adds	r7, #28
 800fb80:	46bd      	mov	sp, r7
 800fb82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb86:	4770      	bx	lr

0800fb88 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800fb88:	b480      	push	{r7}
 800fb8a:	b087      	sub	sp, #28
 800fb8c:	af00      	add	r7, sp, #0
 800fb8e:	60f8      	str	r0, [r7, #12]
 800fb90:	60b9      	str	r1, [r7, #8]
 800fb92:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800fb94:	68bb      	ldr	r3, [r7, #8]
 800fb96:	f003 031f 	and.w	r3, r3, #31
 800fb9a:	2201      	movs	r2, #1
 800fb9c:	fa02 f303 	lsl.w	r3, r2, r3
 800fba0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800fba2:	68fb      	ldr	r3, [r7, #12]
 800fba4:	6a1a      	ldr	r2, [r3, #32]
 800fba6:	697b      	ldr	r3, [r7, #20]
 800fba8:	43db      	mvns	r3, r3
 800fbaa:	401a      	ands	r2, r3
 800fbac:	68fb      	ldr	r3, [r7, #12]
 800fbae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800fbb0:	68fb      	ldr	r3, [r7, #12]
 800fbb2:	6a1a      	ldr	r2, [r3, #32]
 800fbb4:	68bb      	ldr	r3, [r7, #8]
 800fbb6:	f003 031f 	and.w	r3, r3, #31
 800fbba:	6879      	ldr	r1, [r7, #4]
 800fbbc:	fa01 f303 	lsl.w	r3, r1, r3
 800fbc0:	431a      	orrs	r2, r3
 800fbc2:	68fb      	ldr	r3, [r7, #12]
 800fbc4:	621a      	str	r2, [r3, #32]
}
 800fbc6:	bf00      	nop
 800fbc8:	371c      	adds	r7, #28
 800fbca:	46bd      	mov	sp, r7
 800fbcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbd0:	4770      	bx	lr
	...

0800fbd4 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800fbd4:	b480      	push	{r7}
 800fbd6:	b083      	sub	sp, #12
 800fbd8:	af00      	add	r7, sp, #0
 800fbda:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	4a26      	ldr	r2, [pc, #152]	@ (800fc78 <TIM_ResetCallback+0xa4>)
 800fbe0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	4a25      	ldr	r2, [pc, #148]	@ (800fc7c <TIM_ResetCallback+0xa8>)
 800fbe8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	4a24      	ldr	r2, [pc, #144]	@ (800fc80 <TIM_ResetCallback+0xac>)
 800fbf0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	4a23      	ldr	r2, [pc, #140]	@ (800fc84 <TIM_ResetCallback+0xb0>)
 800fbf8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	4a22      	ldr	r2, [pc, #136]	@ (800fc88 <TIM_ResetCallback+0xb4>)
 800fc00:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	4a21      	ldr	r2, [pc, #132]	@ (800fc8c <TIM_ResetCallback+0xb8>)
 800fc08:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	4a20      	ldr	r2, [pc, #128]	@ (800fc90 <TIM_ResetCallback+0xbc>)
 800fc10:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	4a1f      	ldr	r2, [pc, #124]	@ (800fc94 <TIM_ResetCallback+0xc0>)
 800fc18:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	4a1e      	ldr	r2, [pc, #120]	@ (800fc98 <TIM_ResetCallback+0xc4>)
 800fc20:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	4a1d      	ldr	r2, [pc, #116]	@ (800fc9c <TIM_ResetCallback+0xc8>)
 800fc28:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	4a1c      	ldr	r2, [pc, #112]	@ (800fca0 <TIM_ResetCallback+0xcc>)
 800fc30:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	4a1b      	ldr	r2, [pc, #108]	@ (800fca4 <TIM_ResetCallback+0xd0>)
 800fc38:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	4a1a      	ldr	r2, [pc, #104]	@ (800fca8 <TIM_ResetCallback+0xd4>)
 800fc40:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	4a19      	ldr	r2, [pc, #100]	@ (800fcac <TIM_ResetCallback+0xd8>)
 800fc48:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	4a18      	ldr	r2, [pc, #96]	@ (800fcb0 <TIM_ResetCallback+0xdc>)
 800fc50:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	4a17      	ldr	r2, [pc, #92]	@ (800fcb4 <TIM_ResetCallback+0xe0>)
 800fc58:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	4a16      	ldr	r2, [pc, #88]	@ (800fcb8 <TIM_ResetCallback+0xe4>)
 800fc60:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	4a15      	ldr	r2, [pc, #84]	@ (800fcbc <TIM_ResetCallback+0xe8>)
 800fc68:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 800fc6c:	bf00      	nop
 800fc6e:	370c      	adds	r7, #12
 800fc70:	46bd      	mov	sp, r7
 800fc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc76:	4770      	bx	lr
 800fc78:	08008845 	.word	0x08008845
 800fc7c:	0800ef21 	.word	0x0800ef21
 800fc80:	0800ef99 	.word	0x0800ef99
 800fc84:	0800efad 	.word	0x0800efad
 800fc88:	0800ef49 	.word	0x0800ef49
 800fc8c:	0800ef5d 	.word	0x0800ef5d
 800fc90:	0800ef35 	.word	0x0800ef35
 800fc94:	0800ef71 	.word	0x0800ef71
 800fc98:	0800ef85 	.word	0x0800ef85
 800fc9c:	0800efc1 	.word	0x0800efc1
 800fca0:	0800ff15 	.word	0x0800ff15
 800fca4:	0800ff29 	.word	0x0800ff29
 800fca8:	0800ff3d 	.word	0x0800ff3d
 800fcac:	0800ff51 	.word	0x0800ff51
 800fcb0:	0800ff65 	.word	0x0800ff65
 800fcb4:	0800ff79 	.word	0x0800ff79
 800fcb8:	0800ff8d 	.word	0x0800ff8d
 800fcbc:	0800ffa1 	.word	0x0800ffa1

0800fcc0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800fcc0:	b480      	push	{r7}
 800fcc2:	b085      	sub	sp, #20
 800fcc4:	af00      	add	r7, sp, #0
 800fcc6:	6078      	str	r0, [r7, #4]
 800fcc8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800fcd0:	2b01      	cmp	r3, #1
 800fcd2:	d101      	bne.n	800fcd8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800fcd4:	2302      	movs	r3, #2
 800fcd6:	e074      	b.n	800fdc2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	2201      	movs	r2, #1
 800fcdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	2202      	movs	r2, #2
 800fce4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	681b      	ldr	r3, [r3, #0]
 800fcec:	685b      	ldr	r3, [r3, #4]
 800fcee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	689b      	ldr	r3, [r3, #8]
 800fcf6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	681b      	ldr	r3, [r3, #0]
 800fcfc:	4a34      	ldr	r2, [pc, #208]	@ (800fdd0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800fcfe:	4293      	cmp	r3, r2
 800fd00:	d009      	beq.n	800fd16 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	681b      	ldr	r3, [r3, #0]
 800fd06:	4a33      	ldr	r2, [pc, #204]	@ (800fdd4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800fd08:	4293      	cmp	r3, r2
 800fd0a:	d004      	beq.n	800fd16 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	681b      	ldr	r3, [r3, #0]
 800fd10:	4a31      	ldr	r2, [pc, #196]	@ (800fdd8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800fd12:	4293      	cmp	r3, r2
 800fd14:	d108      	bne.n	800fd28 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800fd16:	68fb      	ldr	r3, [r7, #12]
 800fd18:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800fd1c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800fd1e:	683b      	ldr	r3, [r7, #0]
 800fd20:	685b      	ldr	r3, [r3, #4]
 800fd22:	68fa      	ldr	r2, [r7, #12]
 800fd24:	4313      	orrs	r3, r2
 800fd26:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800fd28:	68fb      	ldr	r3, [r7, #12]
 800fd2a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800fd2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fd32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800fd34:	683b      	ldr	r3, [r7, #0]
 800fd36:	681b      	ldr	r3, [r3, #0]
 800fd38:	68fa      	ldr	r2, [r7, #12]
 800fd3a:	4313      	orrs	r3, r2
 800fd3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	681b      	ldr	r3, [r3, #0]
 800fd42:	68fa      	ldr	r2, [r7, #12]
 800fd44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	681b      	ldr	r3, [r3, #0]
 800fd4a:	4a21      	ldr	r2, [pc, #132]	@ (800fdd0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800fd4c:	4293      	cmp	r3, r2
 800fd4e:	d022      	beq.n	800fd96 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	681b      	ldr	r3, [r3, #0]
 800fd54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fd58:	d01d      	beq.n	800fd96 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	681b      	ldr	r3, [r3, #0]
 800fd5e:	4a1f      	ldr	r2, [pc, #124]	@ (800fddc <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800fd60:	4293      	cmp	r3, r2
 800fd62:	d018      	beq.n	800fd96 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	681b      	ldr	r3, [r3, #0]
 800fd68:	4a1d      	ldr	r2, [pc, #116]	@ (800fde0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800fd6a:	4293      	cmp	r3, r2
 800fd6c:	d013      	beq.n	800fd96 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	681b      	ldr	r3, [r3, #0]
 800fd72:	4a1c      	ldr	r2, [pc, #112]	@ (800fde4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800fd74:	4293      	cmp	r3, r2
 800fd76:	d00e      	beq.n	800fd96 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	681b      	ldr	r3, [r3, #0]
 800fd7c:	4a15      	ldr	r2, [pc, #84]	@ (800fdd4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800fd7e:	4293      	cmp	r3, r2
 800fd80:	d009      	beq.n	800fd96 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	681b      	ldr	r3, [r3, #0]
 800fd86:	4a18      	ldr	r2, [pc, #96]	@ (800fde8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800fd88:	4293      	cmp	r3, r2
 800fd8a:	d004      	beq.n	800fd96 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	681b      	ldr	r3, [r3, #0]
 800fd90:	4a11      	ldr	r2, [pc, #68]	@ (800fdd8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800fd92:	4293      	cmp	r3, r2
 800fd94:	d10c      	bne.n	800fdb0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800fd96:	68bb      	ldr	r3, [r7, #8]
 800fd98:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800fd9c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800fd9e:	683b      	ldr	r3, [r7, #0]
 800fda0:	689b      	ldr	r3, [r3, #8]
 800fda2:	68ba      	ldr	r2, [r7, #8]
 800fda4:	4313      	orrs	r3, r2
 800fda6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	681b      	ldr	r3, [r3, #0]
 800fdac:	68ba      	ldr	r2, [r7, #8]
 800fdae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	2201      	movs	r2, #1
 800fdb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	2200      	movs	r2, #0
 800fdbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800fdc0:	2300      	movs	r3, #0
}
 800fdc2:	4618      	mov	r0, r3
 800fdc4:	3714      	adds	r7, #20
 800fdc6:	46bd      	mov	sp, r7
 800fdc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdcc:	4770      	bx	lr
 800fdce:	bf00      	nop
 800fdd0:	40012c00 	.word	0x40012c00
 800fdd4:	40013400 	.word	0x40013400
 800fdd8:	40015000 	.word	0x40015000
 800fddc:	40000400 	.word	0x40000400
 800fde0:	40000800 	.word	0x40000800
 800fde4:	40000c00 	.word	0x40000c00
 800fde8:	40014000 	.word	0x40014000

0800fdec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800fdec:	b480      	push	{r7}
 800fdee:	b085      	sub	sp, #20
 800fdf0:	af00      	add	r7, sp, #0
 800fdf2:	6078      	str	r0, [r7, #4]
 800fdf4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800fdf6:	2300      	movs	r3, #0
 800fdf8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800fe00:	2b01      	cmp	r3, #1
 800fe02:	d101      	bne.n	800fe08 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800fe04:	2302      	movs	r3, #2
 800fe06:	e078      	b.n	800fefa <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	2201      	movs	r2, #1
 800fe0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800fe10:	68fb      	ldr	r3, [r7, #12]
 800fe12:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800fe16:	683b      	ldr	r3, [r7, #0]
 800fe18:	68db      	ldr	r3, [r3, #12]
 800fe1a:	4313      	orrs	r3, r2
 800fe1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800fe1e:	68fb      	ldr	r3, [r7, #12]
 800fe20:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800fe24:	683b      	ldr	r3, [r7, #0]
 800fe26:	689b      	ldr	r3, [r3, #8]
 800fe28:	4313      	orrs	r3, r2
 800fe2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800fe2c:	68fb      	ldr	r3, [r7, #12]
 800fe2e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800fe32:	683b      	ldr	r3, [r7, #0]
 800fe34:	685b      	ldr	r3, [r3, #4]
 800fe36:	4313      	orrs	r3, r2
 800fe38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800fe3a:	68fb      	ldr	r3, [r7, #12]
 800fe3c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800fe40:	683b      	ldr	r3, [r7, #0]
 800fe42:	681b      	ldr	r3, [r3, #0]
 800fe44:	4313      	orrs	r3, r2
 800fe46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800fe48:	68fb      	ldr	r3, [r7, #12]
 800fe4a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800fe4e:	683b      	ldr	r3, [r7, #0]
 800fe50:	691b      	ldr	r3, [r3, #16]
 800fe52:	4313      	orrs	r3, r2
 800fe54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800fe56:	68fb      	ldr	r3, [r7, #12]
 800fe58:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800fe5c:	683b      	ldr	r3, [r7, #0]
 800fe5e:	695b      	ldr	r3, [r3, #20]
 800fe60:	4313      	orrs	r3, r2
 800fe62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800fe64:	68fb      	ldr	r3, [r7, #12]
 800fe66:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800fe6a:	683b      	ldr	r3, [r7, #0]
 800fe6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fe6e:	4313      	orrs	r3, r2
 800fe70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800fe72:	68fb      	ldr	r3, [r7, #12]
 800fe74:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800fe78:	683b      	ldr	r3, [r7, #0]
 800fe7a:	699b      	ldr	r3, [r3, #24]
 800fe7c:	041b      	lsls	r3, r3, #16
 800fe7e:	4313      	orrs	r3, r2
 800fe80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800fe82:	68fb      	ldr	r3, [r7, #12]
 800fe84:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800fe88:	683b      	ldr	r3, [r7, #0]
 800fe8a:	69db      	ldr	r3, [r3, #28]
 800fe8c:	4313      	orrs	r3, r2
 800fe8e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	681b      	ldr	r3, [r3, #0]
 800fe94:	4a1c      	ldr	r2, [pc, #112]	@ (800ff08 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800fe96:	4293      	cmp	r3, r2
 800fe98:	d009      	beq.n	800feae <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	681b      	ldr	r3, [r3, #0]
 800fe9e:	4a1b      	ldr	r2, [pc, #108]	@ (800ff0c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800fea0:	4293      	cmp	r3, r2
 800fea2:	d004      	beq.n	800feae <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	681b      	ldr	r3, [r3, #0]
 800fea8:	4a19      	ldr	r2, [pc, #100]	@ (800ff10 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800feaa:	4293      	cmp	r3, r2
 800feac:	d11c      	bne.n	800fee8 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800feae:	68fb      	ldr	r3, [r7, #12]
 800feb0:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800feb4:	683b      	ldr	r3, [r7, #0]
 800feb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800feb8:	051b      	lsls	r3, r3, #20
 800feba:	4313      	orrs	r3, r2
 800febc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800febe:	68fb      	ldr	r3, [r7, #12]
 800fec0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800fec4:	683b      	ldr	r3, [r7, #0]
 800fec6:	6a1b      	ldr	r3, [r3, #32]
 800fec8:	4313      	orrs	r3, r2
 800feca:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800fecc:	68fb      	ldr	r3, [r7, #12]
 800fece:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800fed2:	683b      	ldr	r3, [r7, #0]
 800fed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fed6:	4313      	orrs	r3, r2
 800fed8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800feda:	68fb      	ldr	r3, [r7, #12]
 800fedc:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800fee0:	683b      	ldr	r3, [r7, #0]
 800fee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fee4:	4313      	orrs	r3, r2
 800fee6:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	681b      	ldr	r3, [r3, #0]
 800feec:	68fa      	ldr	r2, [r7, #12]
 800feee:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	2200      	movs	r2, #0
 800fef4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800fef8:	2300      	movs	r3, #0
}
 800fefa:	4618      	mov	r0, r3
 800fefc:	3714      	adds	r7, #20
 800fefe:	46bd      	mov	sp, r7
 800ff00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff04:	4770      	bx	lr
 800ff06:	bf00      	nop
 800ff08:	40012c00 	.word	0x40012c00
 800ff0c:	40013400 	.word	0x40013400
 800ff10:	40015000 	.word	0x40015000

0800ff14 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ff14:	b480      	push	{r7}
 800ff16:	b083      	sub	sp, #12
 800ff18:	af00      	add	r7, sp, #0
 800ff1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ff1c:	bf00      	nop
 800ff1e:	370c      	adds	r7, #12
 800ff20:	46bd      	mov	sp, r7
 800ff22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff26:	4770      	bx	lr

0800ff28 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800ff28:	b480      	push	{r7}
 800ff2a:	b083      	sub	sp, #12
 800ff2c:	af00      	add	r7, sp, #0
 800ff2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800ff30:	bf00      	nop
 800ff32:	370c      	adds	r7, #12
 800ff34:	46bd      	mov	sp, r7
 800ff36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff3a:	4770      	bx	lr

0800ff3c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ff3c:	b480      	push	{r7}
 800ff3e:	b083      	sub	sp, #12
 800ff40:	af00      	add	r7, sp, #0
 800ff42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ff44:	bf00      	nop
 800ff46:	370c      	adds	r7, #12
 800ff48:	46bd      	mov	sp, r7
 800ff4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff4e:	4770      	bx	lr

0800ff50 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ff50:	b480      	push	{r7}
 800ff52:	b083      	sub	sp, #12
 800ff54:	af00      	add	r7, sp, #0
 800ff56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ff58:	bf00      	nop
 800ff5a:	370c      	adds	r7, #12
 800ff5c:	46bd      	mov	sp, r7
 800ff5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff62:	4770      	bx	lr

0800ff64 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800ff64:	b480      	push	{r7}
 800ff66:	b083      	sub	sp, #12
 800ff68:	af00      	add	r7, sp, #0
 800ff6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800ff6c:	bf00      	nop
 800ff6e:	370c      	adds	r7, #12
 800ff70:	46bd      	mov	sp, r7
 800ff72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff76:	4770      	bx	lr

0800ff78 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800ff78:	b480      	push	{r7}
 800ff7a:	b083      	sub	sp, #12
 800ff7c:	af00      	add	r7, sp, #0
 800ff7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800ff80:	bf00      	nop
 800ff82:	370c      	adds	r7, #12
 800ff84:	46bd      	mov	sp, r7
 800ff86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff8a:	4770      	bx	lr

0800ff8c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800ff8c:	b480      	push	{r7}
 800ff8e:	b083      	sub	sp, #12
 800ff90:	af00      	add	r7, sp, #0
 800ff92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800ff94:	bf00      	nop
 800ff96:	370c      	adds	r7, #12
 800ff98:	46bd      	mov	sp, r7
 800ff9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff9e:	4770      	bx	lr

0800ffa0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800ffa0:	b480      	push	{r7}
 800ffa2:	b083      	sub	sp, #12
 800ffa4:	af00      	add	r7, sp, #0
 800ffa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800ffa8:	bf00      	nop
 800ffaa:	370c      	adds	r7, #12
 800ffac:	46bd      	mov	sp, r7
 800ffae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffb2:	4770      	bx	lr

0800ffb4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ffb4:	b580      	push	{r7, lr}
 800ffb6:	b082      	sub	sp, #8
 800ffb8:	af00      	add	r7, sp, #0
 800ffba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	d101      	bne.n	800ffc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ffc2:	2301      	movs	r3, #1
 800ffc4:	e050      	b.n	8010068 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ffcc:	2b00      	cmp	r3, #0
 800ffce:	d114      	bne.n	800fffa <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	2200      	movs	r2, #0
 800ffd4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800ffd8:	6878      	ldr	r0, [r7, #4]
 800ffda:	f000 fde5 	bl	8010ba8 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	d103      	bne.n	800fff0 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	4a21      	ldr	r2, [pc, #132]	@ (8010070 <HAL_UART_Init+0xbc>)
 800ffec:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800fff6:	6878      	ldr	r0, [r7, #4]
 800fff8:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	2224      	movs	r2, #36	@ 0x24
 800fffe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	681b      	ldr	r3, [r3, #0]
 8010006:	681a      	ldr	r2, [r3, #0]
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	681b      	ldr	r3, [r3, #0]
 801000c:	f022 0201 	bic.w	r2, r2, #1
 8010010:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010016:	2b00      	cmp	r3, #0
 8010018:	d002      	beq.n	8010020 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 801001a:	6878      	ldr	r0, [r7, #4]
 801001c:	f001 f912 	bl	8011244 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8010020:	6878      	ldr	r0, [r7, #4]
 8010022:	f000 fe13 	bl	8010c4c <UART_SetConfig>
 8010026:	4603      	mov	r3, r0
 8010028:	2b01      	cmp	r3, #1
 801002a:	d101      	bne.n	8010030 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 801002c:	2301      	movs	r3, #1
 801002e:	e01b      	b.n	8010068 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	681b      	ldr	r3, [r3, #0]
 8010034:	685a      	ldr	r2, [r3, #4]
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	681b      	ldr	r3, [r3, #0]
 801003a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 801003e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	681b      	ldr	r3, [r3, #0]
 8010044:	689a      	ldr	r2, [r3, #8]
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	681b      	ldr	r3, [r3, #0]
 801004a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 801004e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	681b      	ldr	r3, [r3, #0]
 8010054:	681a      	ldr	r2, [r3, #0]
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	681b      	ldr	r3, [r3, #0]
 801005a:	f042 0201 	orr.w	r2, r2, #1
 801005e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8010060:	6878      	ldr	r0, [r7, #4]
 8010062:	f001 f991 	bl	8011388 <UART_CheckIdleState>
 8010066:	4603      	mov	r3, r0
}
 8010068:	4618      	mov	r0, r3
 801006a:	3708      	adds	r7, #8
 801006c:	46bd      	mov	sp, r7
 801006e:	bd80      	pop	{r7, pc}
 8010070:	0800a455 	.word	0x0800a455

08010074 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 8010074:	b480      	push	{r7}
 8010076:	b087      	sub	sp, #28
 8010078:	af00      	add	r7, sp, #0
 801007a:	60f8      	str	r0, [r7, #12]
 801007c:	460b      	mov	r3, r1
 801007e:	607a      	str	r2, [r7, #4]
 8010080:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8010082:	2300      	movs	r3, #0
 8010084:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	2b00      	cmp	r3, #0
 801008a:	d109      	bne.n	80100a0 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 801008c:	68fb      	ldr	r3, [r7, #12]
 801008e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010092:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8010096:	68fb      	ldr	r3, [r7, #12]
 8010098:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 801009c:	2301      	movs	r3, #1
 801009e:	e09c      	b.n	80101da <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 80100a0:	68fb      	ldr	r3, [r7, #12]
 80100a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80100a6:	2b20      	cmp	r3, #32
 80100a8:	d16c      	bne.n	8010184 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 80100aa:	7afb      	ldrb	r3, [r7, #11]
 80100ac:	2b0c      	cmp	r3, #12
 80100ae:	d85e      	bhi.n	801016e <HAL_UART_RegisterCallback+0xfa>
 80100b0:	a201      	add	r2, pc, #4	@ (adr r2, 80100b8 <HAL_UART_RegisterCallback+0x44>)
 80100b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80100b6:	bf00      	nop
 80100b8:	080100ed 	.word	0x080100ed
 80100bc:	080100f7 	.word	0x080100f7
 80100c0:	08010101 	.word	0x08010101
 80100c4:	0801010b 	.word	0x0801010b
 80100c8:	08010115 	.word	0x08010115
 80100cc:	0801011f 	.word	0x0801011f
 80100d0:	08010129 	.word	0x08010129
 80100d4:	08010133 	.word	0x08010133
 80100d8:	0801013d 	.word	0x0801013d
 80100dc:	08010147 	.word	0x08010147
 80100e0:	08010151 	.word	0x08010151
 80100e4:	0801015b 	.word	0x0801015b
 80100e8:	08010165 	.word	0x08010165
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 80100ec:	68fb      	ldr	r3, [r7, #12]
 80100ee:	687a      	ldr	r2, [r7, #4]
 80100f0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 80100f4:	e070      	b.n	80101d8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 80100f6:	68fb      	ldr	r3, [r7, #12]
 80100f8:	687a      	ldr	r2, [r7, #4]
 80100fa:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 80100fe:	e06b      	b.n	80101d8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8010100:	68fb      	ldr	r3, [r7, #12]
 8010102:	687a      	ldr	r2, [r7, #4]
 8010104:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8010108:	e066      	b.n	80101d8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 801010a:	68fb      	ldr	r3, [r7, #12]
 801010c:	687a      	ldr	r2, [r7, #4]
 801010e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8010112:	e061      	b.n	80101d8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8010114:	68fb      	ldr	r3, [r7, #12]
 8010116:	687a      	ldr	r2, [r7, #4]
 8010118:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 801011c:	e05c      	b.n	80101d8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 801011e:	68fb      	ldr	r3, [r7, #12]
 8010120:	687a      	ldr	r2, [r7, #4]
 8010122:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8010126:	e057      	b.n	80101d8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 8010128:	68fb      	ldr	r3, [r7, #12]
 801012a:	687a      	ldr	r2, [r7, #4]
 801012c:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8010130:	e052      	b.n	80101d8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 8010132:	68fb      	ldr	r3, [r7, #12]
 8010134:	687a      	ldr	r2, [r7, #4]
 8010136:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 801013a:	e04d      	b.n	80101d8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 801013c:	68fb      	ldr	r3, [r7, #12]
 801013e:	687a      	ldr	r2, [r7, #4]
 8010140:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8010144:	e048      	b.n	80101d8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 8010146:	68fb      	ldr	r3, [r7, #12]
 8010148:	687a      	ldr	r2, [r7, #4]
 801014a:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 801014e:	e043      	b.n	80101d8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 8010150:	68fb      	ldr	r3, [r7, #12]
 8010152:	687a      	ldr	r2, [r7, #4]
 8010154:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8010158:	e03e      	b.n	80101d8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 801015a:	68fb      	ldr	r3, [r7, #12]
 801015c:	687a      	ldr	r2, [r7, #4]
 801015e:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8010162:	e039      	b.n	80101d8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8010164:	68fb      	ldr	r3, [r7, #12]
 8010166:	687a      	ldr	r2, [r7, #4]
 8010168:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 801016c:	e034      	b.n	80101d8 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 801016e:	68fb      	ldr	r3, [r7, #12]
 8010170:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010174:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8010178:	68fb      	ldr	r3, [r7, #12]
 801017a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 801017e:	2301      	movs	r3, #1
 8010180:	75fb      	strb	r3, [r7, #23]
        break;
 8010182:	e029      	b.n	80101d8 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 8010184:	68fb      	ldr	r3, [r7, #12]
 8010186:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801018a:	2b00      	cmp	r3, #0
 801018c:	d11a      	bne.n	80101c4 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 801018e:	7afb      	ldrb	r3, [r7, #11]
 8010190:	2b0b      	cmp	r3, #11
 8010192:	d002      	beq.n	801019a <HAL_UART_RegisterCallback+0x126>
 8010194:	2b0c      	cmp	r3, #12
 8010196:	d005      	beq.n	80101a4 <HAL_UART_RegisterCallback+0x130>
 8010198:	e009      	b.n	80101ae <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 801019a:	68fb      	ldr	r3, [r7, #12]
 801019c:	687a      	ldr	r2, [r7, #4]
 801019e:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 80101a2:	e019      	b.n	80101d8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 80101a4:	68fb      	ldr	r3, [r7, #12]
 80101a6:	687a      	ldr	r2, [r7, #4]
 80101a8:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 80101ac:	e014      	b.n	80101d8 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80101ae:	68fb      	ldr	r3, [r7, #12]
 80101b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80101b4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80101b8:	68fb      	ldr	r3, [r7, #12]
 80101ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 80101be:	2301      	movs	r3, #1
 80101c0:	75fb      	strb	r3, [r7, #23]
        break;
 80101c2:	e009      	b.n	80101d8 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80101c4:	68fb      	ldr	r3, [r7, #12]
 80101c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80101ca:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80101ce:	68fb      	ldr	r3, [r7, #12]
 80101d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 80101d4:	2301      	movs	r3, #1
 80101d6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80101d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80101da:	4618      	mov	r0, r3
 80101dc:	371c      	adds	r7, #28
 80101de:	46bd      	mov	sp, r7
 80101e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101e4:	4770      	bx	lr
 80101e6:	bf00      	nop

080101e8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80101e8:	b580      	push	{r7, lr}
 80101ea:	b08a      	sub	sp, #40	@ 0x28
 80101ec:	af00      	add	r7, sp, #0
 80101ee:	60f8      	str	r0, [r7, #12]
 80101f0:	60b9      	str	r1, [r7, #8]
 80101f2:	4613      	mov	r3, r2
 80101f4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80101f6:	68fb      	ldr	r3, [r7, #12]
 80101f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80101fc:	2b20      	cmp	r3, #32
 80101fe:	d167      	bne.n	80102d0 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8010200:	68bb      	ldr	r3, [r7, #8]
 8010202:	2b00      	cmp	r3, #0
 8010204:	d002      	beq.n	801020c <HAL_UART_Transmit_DMA+0x24>
 8010206:	88fb      	ldrh	r3, [r7, #6]
 8010208:	2b00      	cmp	r3, #0
 801020a:	d101      	bne.n	8010210 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 801020c:	2301      	movs	r3, #1
 801020e:	e060      	b.n	80102d2 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8010210:	68fb      	ldr	r3, [r7, #12]
 8010212:	68ba      	ldr	r2, [r7, #8]
 8010214:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8010216:	68fb      	ldr	r3, [r7, #12]
 8010218:	88fa      	ldrh	r2, [r7, #6]
 801021a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 801021e:	68fb      	ldr	r3, [r7, #12]
 8010220:	88fa      	ldrh	r2, [r7, #6]
 8010222:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010226:	68fb      	ldr	r3, [r7, #12]
 8010228:	2200      	movs	r2, #0
 801022a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801022e:	68fb      	ldr	r3, [r7, #12]
 8010230:	2221      	movs	r2, #33	@ 0x21
 8010232:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8010236:	68fb      	ldr	r3, [r7, #12]
 8010238:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801023a:	2b00      	cmp	r3, #0
 801023c:	d028      	beq.n	8010290 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 801023e:	68fb      	ldr	r3, [r7, #12]
 8010240:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010242:	4a26      	ldr	r2, [pc, #152]	@ (80102dc <HAL_UART_Transmit_DMA+0xf4>)
 8010244:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8010246:	68fb      	ldr	r3, [r7, #12]
 8010248:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801024a:	4a25      	ldr	r2, [pc, #148]	@ (80102e0 <HAL_UART_Transmit_DMA+0xf8>)
 801024c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 801024e:	68fb      	ldr	r3, [r7, #12]
 8010250:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010252:	4a24      	ldr	r2, [pc, #144]	@ (80102e4 <HAL_UART_Transmit_DMA+0xfc>)
 8010254:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8010256:	68fb      	ldr	r3, [r7, #12]
 8010258:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801025a:	2200      	movs	r2, #0
 801025c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 801025e:	68fb      	ldr	r3, [r7, #12]
 8010260:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8010262:	68fb      	ldr	r3, [r7, #12]
 8010264:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010266:	4619      	mov	r1, r3
 8010268:	68fb      	ldr	r3, [r7, #12]
 801026a:	681b      	ldr	r3, [r3, #0]
 801026c:	3328      	adds	r3, #40	@ 0x28
 801026e:	461a      	mov	r2, r3
 8010270:	88fb      	ldrh	r3, [r7, #6]
 8010272:	f7fc f919 	bl	800c4a8 <HAL_DMA_Start_IT>
 8010276:	4603      	mov	r3, r0
 8010278:	2b00      	cmp	r3, #0
 801027a:	d009      	beq.n	8010290 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 801027c:	68fb      	ldr	r3, [r7, #12]
 801027e:	2210      	movs	r2, #16
 8010280:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8010284:	68fb      	ldr	r3, [r7, #12]
 8010286:	2220      	movs	r2, #32
 8010288:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 801028c:	2301      	movs	r3, #1
 801028e:	e020      	b.n	80102d2 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8010290:	68fb      	ldr	r3, [r7, #12]
 8010292:	681b      	ldr	r3, [r3, #0]
 8010294:	2240      	movs	r2, #64	@ 0x40
 8010296:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8010298:	68fb      	ldr	r3, [r7, #12]
 801029a:	681b      	ldr	r3, [r3, #0]
 801029c:	3308      	adds	r3, #8
 801029e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80102a0:	697b      	ldr	r3, [r7, #20]
 80102a2:	e853 3f00 	ldrex	r3, [r3]
 80102a6:	613b      	str	r3, [r7, #16]
   return(result);
 80102a8:	693b      	ldr	r3, [r7, #16]
 80102aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80102ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80102b0:	68fb      	ldr	r3, [r7, #12]
 80102b2:	681b      	ldr	r3, [r3, #0]
 80102b4:	3308      	adds	r3, #8
 80102b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80102b8:	623a      	str	r2, [r7, #32]
 80102ba:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80102bc:	69f9      	ldr	r1, [r7, #28]
 80102be:	6a3a      	ldr	r2, [r7, #32]
 80102c0:	e841 2300 	strex	r3, r2, [r1]
 80102c4:	61bb      	str	r3, [r7, #24]
   return(result);
 80102c6:	69bb      	ldr	r3, [r7, #24]
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	d1e5      	bne.n	8010298 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 80102cc:	2300      	movs	r3, #0
 80102ce:	e000      	b.n	80102d2 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80102d0:	2302      	movs	r3, #2
  }
}
 80102d2:	4618      	mov	r0, r3
 80102d4:	3728      	adds	r7, #40	@ 0x28
 80102d6:	46bd      	mov	sp, r7
 80102d8:	bd80      	pop	{r7, pc}
 80102da:	bf00      	nop
 80102dc:	08011853 	.word	0x08011853
 80102e0:	080118f1 	.word	0x080118f1
 80102e4:	08011a8b 	.word	0x08011a8b

080102e8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80102e8:	b580      	push	{r7, lr}
 80102ea:	b08a      	sub	sp, #40	@ 0x28
 80102ec:	af00      	add	r7, sp, #0
 80102ee:	60f8      	str	r0, [r7, #12]
 80102f0:	60b9      	str	r1, [r7, #8]
 80102f2:	4613      	mov	r3, r2
 80102f4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80102f6:	68fb      	ldr	r3, [r7, #12]
 80102f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80102fc:	2b20      	cmp	r3, #32
 80102fe:	d137      	bne.n	8010370 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8010300:	68bb      	ldr	r3, [r7, #8]
 8010302:	2b00      	cmp	r3, #0
 8010304:	d002      	beq.n	801030c <HAL_UART_Receive_DMA+0x24>
 8010306:	88fb      	ldrh	r3, [r7, #6]
 8010308:	2b00      	cmp	r3, #0
 801030a:	d101      	bne.n	8010310 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 801030c:	2301      	movs	r3, #1
 801030e:	e030      	b.n	8010372 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010310:	68fb      	ldr	r3, [r7, #12]
 8010312:	2200      	movs	r2, #0
 8010314:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8010316:	68fb      	ldr	r3, [r7, #12]
 8010318:	681b      	ldr	r3, [r3, #0]
 801031a:	4a18      	ldr	r2, [pc, #96]	@ (801037c <HAL_UART_Receive_DMA+0x94>)
 801031c:	4293      	cmp	r3, r2
 801031e:	d01f      	beq.n	8010360 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010320:	68fb      	ldr	r3, [r7, #12]
 8010322:	681b      	ldr	r3, [r3, #0]
 8010324:	685b      	ldr	r3, [r3, #4]
 8010326:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801032a:	2b00      	cmp	r3, #0
 801032c:	d018      	beq.n	8010360 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	681b      	ldr	r3, [r3, #0]
 8010332:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010334:	697b      	ldr	r3, [r7, #20]
 8010336:	e853 3f00 	ldrex	r3, [r3]
 801033a:	613b      	str	r3, [r7, #16]
   return(result);
 801033c:	693b      	ldr	r3, [r7, #16]
 801033e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8010342:	627b      	str	r3, [r7, #36]	@ 0x24
 8010344:	68fb      	ldr	r3, [r7, #12]
 8010346:	681b      	ldr	r3, [r3, #0]
 8010348:	461a      	mov	r2, r3
 801034a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801034c:	623b      	str	r3, [r7, #32]
 801034e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010350:	69f9      	ldr	r1, [r7, #28]
 8010352:	6a3a      	ldr	r2, [r7, #32]
 8010354:	e841 2300 	strex	r3, r2, [r1]
 8010358:	61bb      	str	r3, [r7, #24]
   return(result);
 801035a:	69bb      	ldr	r3, [r7, #24]
 801035c:	2b00      	cmp	r3, #0
 801035e:	d1e6      	bne.n	801032e <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8010360:	88fb      	ldrh	r3, [r7, #6]
 8010362:	461a      	mov	r2, r3
 8010364:	68b9      	ldr	r1, [r7, #8]
 8010366:	68f8      	ldr	r0, [r7, #12]
 8010368:	f001 f926 	bl	80115b8 <UART_Start_Receive_DMA>
 801036c:	4603      	mov	r3, r0
 801036e:	e000      	b.n	8010372 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8010370:	2302      	movs	r3, #2
  }
}
 8010372:	4618      	mov	r0, r3
 8010374:	3728      	adds	r7, #40	@ 0x28
 8010376:	46bd      	mov	sp, r7
 8010378:	bd80      	pop	{r7, pc}
 801037a:	bf00      	nop
 801037c:	40008000 	.word	0x40008000

08010380 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8010380:	b580      	push	{r7, lr}
 8010382:	b0ba      	sub	sp, #232	@ 0xe8
 8010384:	af00      	add	r7, sp, #0
 8010386:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	69db      	ldr	r3, [r3, #28]
 801038e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	681b      	ldr	r3, [r3, #0]
 8010396:	681b      	ldr	r3, [r3, #0]
 8010398:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	681b      	ldr	r3, [r3, #0]
 80103a0:	689b      	ldr	r3, [r3, #8]
 80103a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80103a6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80103aa:	f640 030f 	movw	r3, #2063	@ 0x80f
 80103ae:	4013      	ands	r3, r2
 80103b0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80103b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d11b      	bne.n	80103f4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80103bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80103c0:	f003 0320 	and.w	r3, r3, #32
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d015      	beq.n	80103f4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80103c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80103cc:	f003 0320 	and.w	r3, r3, #32
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d105      	bne.n	80103e0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80103d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80103d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80103dc:	2b00      	cmp	r3, #0
 80103de:	d009      	beq.n	80103f4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80103e4:	2b00      	cmp	r3, #0
 80103e6:	f000 8312 	beq.w	8010a0e <HAL_UART_IRQHandler+0x68e>
      {
        huart->RxISR(huart);
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80103ee:	6878      	ldr	r0, [r7, #4]
 80103f0:	4798      	blx	r3
      }
      return;
 80103f2:	e30c      	b.n	8010a0e <HAL_UART_IRQHandler+0x68e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80103f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80103f8:	2b00      	cmp	r3, #0
 80103fa:	f000 8129 	beq.w	8010650 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80103fe:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8010402:	4b90      	ldr	r3, [pc, #576]	@ (8010644 <HAL_UART_IRQHandler+0x2c4>)
 8010404:	4013      	ands	r3, r2
 8010406:	2b00      	cmp	r3, #0
 8010408:	d106      	bne.n	8010418 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 801040a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 801040e:	4b8e      	ldr	r3, [pc, #568]	@ (8010648 <HAL_UART_IRQHandler+0x2c8>)
 8010410:	4013      	ands	r3, r2
 8010412:	2b00      	cmp	r3, #0
 8010414:	f000 811c 	beq.w	8010650 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010418:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801041c:	f003 0301 	and.w	r3, r3, #1
 8010420:	2b00      	cmp	r3, #0
 8010422:	d011      	beq.n	8010448 <HAL_UART_IRQHandler+0xc8>
 8010424:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010428:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801042c:	2b00      	cmp	r3, #0
 801042e:	d00b      	beq.n	8010448 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	681b      	ldr	r3, [r3, #0]
 8010434:	2201      	movs	r2, #1
 8010436:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801043e:	f043 0201 	orr.w	r2, r3, #1
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010448:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801044c:	f003 0302 	and.w	r3, r3, #2
 8010450:	2b00      	cmp	r3, #0
 8010452:	d011      	beq.n	8010478 <HAL_UART_IRQHandler+0xf8>
 8010454:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010458:	f003 0301 	and.w	r3, r3, #1
 801045c:	2b00      	cmp	r3, #0
 801045e:	d00b      	beq.n	8010478 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	681b      	ldr	r3, [r3, #0]
 8010464:	2202      	movs	r2, #2
 8010466:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801046e:	f043 0204 	orr.w	r2, r3, #4
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010478:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801047c:	f003 0304 	and.w	r3, r3, #4
 8010480:	2b00      	cmp	r3, #0
 8010482:	d011      	beq.n	80104a8 <HAL_UART_IRQHandler+0x128>
 8010484:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010488:	f003 0301 	and.w	r3, r3, #1
 801048c:	2b00      	cmp	r3, #0
 801048e:	d00b      	beq.n	80104a8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	681b      	ldr	r3, [r3, #0]
 8010494:	2204      	movs	r2, #4
 8010496:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801049e:	f043 0202 	orr.w	r2, r3, #2
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80104a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80104ac:	f003 0308 	and.w	r3, r3, #8
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	d017      	beq.n	80104e4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80104b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80104b8:	f003 0320 	and.w	r3, r3, #32
 80104bc:	2b00      	cmp	r3, #0
 80104be:	d105      	bne.n	80104cc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80104c0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80104c4:	4b5f      	ldr	r3, [pc, #380]	@ (8010644 <HAL_UART_IRQHandler+0x2c4>)
 80104c6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	d00b      	beq.n	80104e4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	681b      	ldr	r3, [r3, #0]
 80104d0:	2208      	movs	r2, #8
 80104d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80104da:	f043 0208 	orr.w	r2, r3, #8
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80104e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80104e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	d012      	beq.n	8010516 <HAL_UART_IRQHandler+0x196>
 80104f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80104f4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	d00c      	beq.n	8010516 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	681b      	ldr	r3, [r3, #0]
 8010500:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8010504:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801050c:	f043 0220 	orr.w	r2, r3, #32
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801051c:	2b00      	cmp	r3, #0
 801051e:	f000 8278 	beq.w	8010a12 <HAL_UART_IRQHandler+0x692>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8010522:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010526:	f003 0320 	and.w	r3, r3, #32
 801052a:	2b00      	cmp	r3, #0
 801052c:	d013      	beq.n	8010556 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801052e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010532:	f003 0320 	and.w	r3, r3, #32
 8010536:	2b00      	cmp	r3, #0
 8010538:	d105      	bne.n	8010546 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801053a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801053e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8010542:	2b00      	cmp	r3, #0
 8010544:	d007      	beq.n	8010556 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801054a:	2b00      	cmp	r3, #0
 801054c:	d003      	beq.n	8010556 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010552:	6878      	ldr	r0, [r7, #4]
 8010554:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801055c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	681b      	ldr	r3, [r3, #0]
 8010564:	689b      	ldr	r3, [r3, #8]
 8010566:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801056a:	2b40      	cmp	r3, #64	@ 0x40
 801056c:	d005      	beq.n	801057a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801056e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8010572:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010576:	2b00      	cmp	r3, #0
 8010578:	d058      	beq.n	801062c <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801057a:	6878      	ldr	r0, [r7, #4]
 801057c:	f001 f903 	bl	8011786 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	681b      	ldr	r3, [r3, #0]
 8010584:	689b      	ldr	r3, [r3, #8]
 8010586:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801058a:	2b40      	cmp	r3, #64	@ 0x40
 801058c:	d148      	bne.n	8010620 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	681b      	ldr	r3, [r3, #0]
 8010592:	3308      	adds	r3, #8
 8010594:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010598:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801059c:	e853 3f00 	ldrex	r3, [r3]
 80105a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80105a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80105a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80105ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	681b      	ldr	r3, [r3, #0]
 80105b4:	3308      	adds	r3, #8
 80105b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80105ba:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80105be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80105c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80105ca:	e841 2300 	strex	r3, r2, [r1]
 80105ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80105d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	d1d9      	bne.n	801058e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d017      	beq.n	8010614 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80105ea:	4a18      	ldr	r2, [pc, #96]	@ (801064c <HAL_UART_IRQHandler+0x2cc>)
 80105ec:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80105f4:	4618      	mov	r0, r3
 80105f6:	f7fc f82b 	bl	800c650 <HAL_DMA_Abort_IT>
 80105fa:	4603      	mov	r3, r0
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d01f      	beq.n	8010640 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010606:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010608:	687a      	ldr	r2, [r7, #4]
 801060a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 801060e:	4610      	mov	r0, r2
 8010610:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010612:	e015      	b.n	8010640 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 801061a:	6878      	ldr	r0, [r7, #4]
 801061c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801061e:	e00f      	b.n	8010640 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8010626:	6878      	ldr	r0, [r7, #4]
 8010628:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801062a:	e009      	b.n	8010640 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8010632:	6878      	ldr	r0, [r7, #4]
 8010634:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	2200      	movs	r2, #0
 801063a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 801063e:	e1e8      	b.n	8010a12 <HAL_UART_IRQHandler+0x692>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010640:	bf00      	nop
    return;
 8010642:	e1e6      	b.n	8010a12 <HAL_UART_IRQHandler+0x692>
 8010644:	10000001 	.word	0x10000001
 8010648:	04000120 	.word	0x04000120
 801064c:	08011b0f 	.word	0x08011b0f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010654:	2b01      	cmp	r3, #1
 8010656:	f040 8176 	bne.w	8010946 <HAL_UART_IRQHandler+0x5c6>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801065a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801065e:	f003 0310 	and.w	r3, r3, #16
 8010662:	2b00      	cmp	r3, #0
 8010664:	f000 816f 	beq.w	8010946 <HAL_UART_IRQHandler+0x5c6>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8010668:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801066c:	f003 0310 	and.w	r3, r3, #16
 8010670:	2b00      	cmp	r3, #0
 8010672:	f000 8168 	beq.w	8010946 <HAL_UART_IRQHandler+0x5c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	681b      	ldr	r3, [r3, #0]
 801067a:	2210      	movs	r2, #16
 801067c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	681b      	ldr	r3, [r3, #0]
 8010682:	689b      	ldr	r3, [r3, #8]
 8010684:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010688:	2b40      	cmp	r3, #64	@ 0x40
 801068a:	f040 80dc 	bne.w	8010846 <HAL_UART_IRQHandler+0x4c6>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010694:	681b      	ldr	r3, [r3, #0]
 8010696:	685b      	ldr	r3, [r3, #4]
 8010698:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 801069c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	f000 80b1 	beq.w	8010808 <HAL_UART_IRQHandler+0x488>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80106ac:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80106b0:	429a      	cmp	r2, r3
 80106b2:	f080 80a9 	bcs.w	8010808 <HAL_UART_IRQHandler+0x488>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80106bc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80106c6:	681b      	ldr	r3, [r3, #0]
 80106c8:	681b      	ldr	r3, [r3, #0]
 80106ca:	f003 0320 	and.w	r3, r3, #32
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	f040 8087 	bne.w	80107e2 <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	681b      	ldr	r3, [r3, #0]
 80106d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80106e0:	e853 3f00 	ldrex	r3, [r3]
 80106e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80106e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80106ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80106f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	681b      	ldr	r3, [r3, #0]
 80106f8:	461a      	mov	r2, r3
 80106fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80106fe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8010702:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010706:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 801070a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 801070e:	e841 2300 	strex	r3, r2, [r1]
 8010712:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8010716:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801071a:	2b00      	cmp	r3, #0
 801071c:	d1da      	bne.n	80106d4 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	681b      	ldr	r3, [r3, #0]
 8010722:	3308      	adds	r3, #8
 8010724:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010726:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010728:	e853 3f00 	ldrex	r3, [r3]
 801072c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 801072e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010730:	f023 0301 	bic.w	r3, r3, #1
 8010734:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	681b      	ldr	r3, [r3, #0]
 801073c:	3308      	adds	r3, #8
 801073e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8010742:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8010746:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010748:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 801074a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801074e:	e841 2300 	strex	r3, r2, [r1]
 8010752:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8010754:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010756:	2b00      	cmp	r3, #0
 8010758:	d1e1      	bne.n	801071e <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	681b      	ldr	r3, [r3, #0]
 801075e:	3308      	adds	r3, #8
 8010760:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010762:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010764:	e853 3f00 	ldrex	r3, [r3]
 8010768:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 801076a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801076c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010770:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	681b      	ldr	r3, [r3, #0]
 8010778:	3308      	adds	r3, #8
 801077a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 801077e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8010780:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010782:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8010784:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8010786:	e841 2300 	strex	r3, r2, [r1]
 801078a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 801078c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801078e:	2b00      	cmp	r3, #0
 8010790:	d1e3      	bne.n	801075a <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	2220      	movs	r2, #32
 8010796:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	2200      	movs	r2, #0
 801079e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	681b      	ldr	r3, [r3, #0]
 80107a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80107a8:	e853 3f00 	ldrex	r3, [r3]
 80107ac:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80107ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80107b0:	f023 0310 	bic.w	r3, r3, #16
 80107b4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	681b      	ldr	r3, [r3, #0]
 80107bc:	461a      	mov	r2, r3
 80107be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80107c2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80107c4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107c6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80107c8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80107ca:	e841 2300 	strex	r3, r2, [r1]
 80107ce:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80107d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	d1e4      	bne.n	80107a0 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80107dc:	4618      	mov	r0, r3
 80107de:	f7fb fede 	bl	800c59e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	2202      	movs	r2, #2
 80107e6:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80107ee:	687a      	ldr	r2, [r7, #4]
 80107f0:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 80107f4:	687a      	ldr	r2, [r7, #4]
 80107f6:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 80107fa:	b292      	uxth	r2, r2
 80107fc:	1a8a      	subs	r2, r1, r2
 80107fe:	b292      	uxth	r2, r2
 8010800:	4611      	mov	r1, r2
 8010802:	6878      	ldr	r0, [r7, #4]
 8010804:	4798      	blx	r3
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8010806:	e106      	b.n	8010a16 <HAL_UART_IRQHandler+0x696>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801080e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8010812:	429a      	cmp	r2, r3
 8010814:	f040 80ff 	bne.w	8010a16 <HAL_UART_IRQHandler+0x696>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801081e:	681b      	ldr	r3, [r3, #0]
 8010820:	681b      	ldr	r3, [r3, #0]
 8010822:	f003 0320 	and.w	r3, r3, #32
 8010826:	2b20      	cmp	r3, #32
 8010828:	f040 80f5 	bne.w	8010a16 <HAL_UART_IRQHandler+0x696>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	2202      	movs	r2, #2
 8010830:	671a      	str	r2, [r3, #112]	@ 0x70
            huart->RxEventCallback(huart, huart->RxXferSize);
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8010838:	687a      	ldr	r2, [r7, #4]
 801083a:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 801083e:	4611      	mov	r1, r2
 8010840:	6878      	ldr	r0, [r7, #4]
 8010842:	4798      	blx	r3
      return;
 8010844:	e0e7      	b.n	8010a16 <HAL_UART_IRQHandler+0x696>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010852:	b29b      	uxth	r3, r3
 8010854:	1ad3      	subs	r3, r2, r3
 8010856:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010860:	b29b      	uxth	r3, r3
 8010862:	2b00      	cmp	r3, #0
 8010864:	f000 80d9 	beq.w	8010a1a <HAL_UART_IRQHandler+0x69a>
          && (nb_rx_data > 0U))
 8010868:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 801086c:	2b00      	cmp	r3, #0
 801086e:	f000 80d4 	beq.w	8010a1a <HAL_UART_IRQHandler+0x69a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	681b      	ldr	r3, [r3, #0]
 8010876:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010878:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801087a:	e853 3f00 	ldrex	r3, [r3]
 801087e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010880:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010882:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010886:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	681b      	ldr	r3, [r3, #0]
 801088e:	461a      	mov	r2, r3
 8010890:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8010894:	647b      	str	r3, [r7, #68]	@ 0x44
 8010896:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010898:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801089a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801089c:	e841 2300 	strex	r3, r2, [r1]
 80108a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80108a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	d1e4      	bne.n	8010872 <HAL_UART_IRQHandler+0x4f2>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	681b      	ldr	r3, [r3, #0]
 80108ac:	3308      	adds	r3, #8
 80108ae:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80108b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80108b2:	e853 3f00 	ldrex	r3, [r3]
 80108b6:	623b      	str	r3, [r7, #32]
   return(result);
 80108b8:	6a3b      	ldr	r3, [r7, #32]
 80108ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80108be:	f023 0301 	bic.w	r3, r3, #1
 80108c2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	681b      	ldr	r3, [r3, #0]
 80108ca:	3308      	adds	r3, #8
 80108cc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80108d0:	633a      	str	r2, [r7, #48]	@ 0x30
 80108d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80108d4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80108d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80108d8:	e841 2300 	strex	r3, r2, [r1]
 80108dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80108de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d1e1      	bne.n	80108a8 <HAL_UART_IRQHandler+0x528>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	2220      	movs	r2, #32
 80108e8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	2200      	movs	r2, #0
 80108f0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	2200      	movs	r2, #0
 80108f6:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	681b      	ldr	r3, [r3, #0]
 80108fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80108fe:	693b      	ldr	r3, [r7, #16]
 8010900:	e853 3f00 	ldrex	r3, [r3]
 8010904:	60fb      	str	r3, [r7, #12]
   return(result);
 8010906:	68fb      	ldr	r3, [r7, #12]
 8010908:	f023 0310 	bic.w	r3, r3, #16
 801090c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	681b      	ldr	r3, [r3, #0]
 8010914:	461a      	mov	r2, r3
 8010916:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 801091a:	61fb      	str	r3, [r7, #28]
 801091c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801091e:	69b9      	ldr	r1, [r7, #24]
 8010920:	69fa      	ldr	r2, [r7, #28]
 8010922:	e841 2300 	strex	r3, r2, [r1]
 8010926:	617b      	str	r3, [r7, #20]
   return(result);
 8010928:	697b      	ldr	r3, [r7, #20]
 801092a:	2b00      	cmp	r3, #0
 801092c:	d1e4      	bne.n	80108f8 <HAL_UART_IRQHandler+0x578>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	2202      	movs	r2, #2
 8010932:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 801093a:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 801093e:	4611      	mov	r1, r2
 8010940:	6878      	ldr	r0, [r7, #4]
 8010942:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8010944:	e069      	b.n	8010a1a <HAL_UART_IRQHandler+0x69a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8010946:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801094a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801094e:	2b00      	cmp	r3, #0
 8010950:	d010      	beq.n	8010974 <HAL_UART_IRQHandler+0x5f4>
 8010952:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010956:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801095a:	2b00      	cmp	r3, #0
 801095c:	d00a      	beq.n	8010974 <HAL_UART_IRQHandler+0x5f4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	681b      	ldr	r3, [r3, #0]
 8010962:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8010966:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801096e:	6878      	ldr	r0, [r7, #4]
 8010970:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010972:	e055      	b.n	8010a20 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8010974:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010978:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801097c:	2b00      	cmp	r3, #0
 801097e:	d014      	beq.n	80109aa <HAL_UART_IRQHandler+0x62a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8010980:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010984:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010988:	2b00      	cmp	r3, #0
 801098a:	d105      	bne.n	8010998 <HAL_UART_IRQHandler+0x618>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 801098c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010990:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8010994:	2b00      	cmp	r3, #0
 8010996:	d008      	beq.n	80109aa <HAL_UART_IRQHandler+0x62a>
  {
    if (huart->TxISR != NULL)
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801099c:	2b00      	cmp	r3, #0
 801099e:	d03e      	beq.n	8010a1e <HAL_UART_IRQHandler+0x69e>
    {
      huart->TxISR(huart);
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80109a4:	6878      	ldr	r0, [r7, #4]
 80109a6:	4798      	blx	r3
    }
    return;
 80109a8:	e039      	b.n	8010a1e <HAL_UART_IRQHandler+0x69e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80109aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80109ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	d009      	beq.n	80109ca <HAL_UART_IRQHandler+0x64a>
 80109b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80109ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80109be:	2b00      	cmp	r3, #0
 80109c0:	d003      	beq.n	80109ca <HAL_UART_IRQHandler+0x64a>
  {
    UART_EndTransmit_IT(huart);
 80109c2:	6878      	ldr	r0, [r7, #4]
 80109c4:	f001 f8b7 	bl	8011b36 <UART_EndTransmit_IT>
    return;
 80109c8:	e02a      	b.n	8010a20 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80109ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80109ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d00b      	beq.n	80109ee <HAL_UART_IRQHandler+0x66e>
 80109d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80109da:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80109de:	2b00      	cmp	r3, #0
 80109e0:	d005      	beq.n	80109ee <HAL_UART_IRQHandler+0x66e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80109e8:	6878      	ldr	r0, [r7, #4]
 80109ea:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80109ec:	e018      	b.n	8010a20 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80109ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80109f2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80109f6:	2b00      	cmp	r3, #0
 80109f8:	d012      	beq.n	8010a20 <HAL_UART_IRQHandler+0x6a0>
 80109fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	da0e      	bge.n	8010a20 <HAL_UART_IRQHandler+0x6a0>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8010a08:	6878      	ldr	r0, [r7, #4]
 8010a0a:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010a0c:	e008      	b.n	8010a20 <HAL_UART_IRQHandler+0x6a0>
      return;
 8010a0e:	bf00      	nop
 8010a10:	e006      	b.n	8010a20 <HAL_UART_IRQHandler+0x6a0>
    return;
 8010a12:	bf00      	nop
 8010a14:	e004      	b.n	8010a20 <HAL_UART_IRQHandler+0x6a0>
      return;
 8010a16:	bf00      	nop
 8010a18:	e002      	b.n	8010a20 <HAL_UART_IRQHandler+0x6a0>
      return;
 8010a1a:	bf00      	nop
 8010a1c:	e000      	b.n	8010a20 <HAL_UART_IRQHandler+0x6a0>
    return;
 8010a1e:	bf00      	nop
  }
}
 8010a20:	37e8      	adds	r7, #232	@ 0xe8
 8010a22:	46bd      	mov	sp, r7
 8010a24:	bd80      	pop	{r7, pc}
 8010a26:	bf00      	nop

08010a28 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8010a28:	b480      	push	{r7}
 8010a2a:	b083      	sub	sp, #12
 8010a2c:	af00      	add	r7, sp, #0
 8010a2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8010a30:	bf00      	nop
 8010a32:	370c      	adds	r7, #12
 8010a34:	46bd      	mov	sp, r7
 8010a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a3a:	4770      	bx	lr

08010a3c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8010a3c:	b480      	push	{r7}
 8010a3e:	b083      	sub	sp, #12
 8010a40:	af00      	add	r7, sp, #0
 8010a42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8010a44:	bf00      	nop
 8010a46:	370c      	adds	r7, #12
 8010a48:	46bd      	mov	sp, r7
 8010a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a4e:	4770      	bx	lr

08010a50 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8010a50:	b480      	push	{r7}
 8010a52:	b083      	sub	sp, #12
 8010a54:	af00      	add	r7, sp, #0
 8010a56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8010a58:	bf00      	nop
 8010a5a:	370c      	adds	r7, #12
 8010a5c:	46bd      	mov	sp, r7
 8010a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a62:	4770      	bx	lr

08010a64 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8010a64:	b480      	push	{r7}
 8010a66:	b083      	sub	sp, #12
 8010a68:	af00      	add	r7, sp, #0
 8010a6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8010a6c:	bf00      	nop
 8010a6e:	370c      	adds	r7, #12
 8010a70:	46bd      	mov	sp, r7
 8010a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a76:	4770      	bx	lr

08010a78 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8010a78:	b480      	push	{r7}
 8010a7a:	b083      	sub	sp, #12
 8010a7c:	af00      	add	r7, sp, #0
 8010a7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8010a80:	bf00      	nop
 8010a82:	370c      	adds	r7, #12
 8010a84:	46bd      	mov	sp, r7
 8010a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a8a:	4770      	bx	lr

08010a8c <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8010a8c:	b480      	push	{r7}
 8010a8e:	b083      	sub	sp, #12
 8010a90:	af00      	add	r7, sp, #0
 8010a92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8010a94:	bf00      	nop
 8010a96:	370c      	adds	r7, #12
 8010a98:	46bd      	mov	sp, r7
 8010a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a9e:	4770      	bx	lr

08010aa0 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8010aa0:	b480      	push	{r7}
 8010aa2:	b083      	sub	sp, #12
 8010aa4:	af00      	add	r7, sp, #0
 8010aa6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8010aa8:	bf00      	nop
 8010aaa:	370c      	adds	r7, #12
 8010aac:	46bd      	mov	sp, r7
 8010aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ab2:	4770      	bx	lr

08010ab4 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8010ab4:	b480      	push	{r7}
 8010ab6:	b083      	sub	sp, #12
 8010ab8:	af00      	add	r7, sp, #0
 8010aba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8010abc:	bf00      	nop
 8010abe:	370c      	adds	r7, #12
 8010ac0:	46bd      	mov	sp, r7
 8010ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ac6:	4770      	bx	lr

08010ac8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8010ac8:	b480      	push	{r7}
 8010aca:	b083      	sub	sp, #12
 8010acc:	af00      	add	r7, sp, #0
 8010ace:	6078      	str	r0, [r7, #4]
 8010ad0:	460b      	mov	r3, r1
 8010ad2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8010ad4:	bf00      	nop
 8010ad6:	370c      	adds	r7, #12
 8010ad8:	46bd      	mov	sp, r7
 8010ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ade:	4770      	bx	lr

08010ae0 <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 8010ae0:	b480      	push	{r7}
 8010ae2:	b083      	sub	sp, #12
 8010ae4:	af00      	add	r7, sp, #0
 8010ae6:	6078      	str	r0, [r7, #4]
 8010ae8:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	681b      	ldr	r3, [r3, #0]
 8010aee:	4a09      	ldr	r2, [pc, #36]	@ (8010b14 <HAL_UART_ReceiverTimeout_Config+0x34>)
 8010af0:	4293      	cmp	r3, r2
 8010af2:	d009      	beq.n	8010b08 <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	681b      	ldr	r3, [r3, #0]
 8010af8:	695b      	ldr	r3, [r3, #20]
 8010afa:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	681b      	ldr	r3, [r3, #0]
 8010b02:	683a      	ldr	r2, [r7, #0]
 8010b04:	430a      	orrs	r2, r1
 8010b06:	615a      	str	r2, [r3, #20]
  }
}
 8010b08:	bf00      	nop
 8010b0a:	370c      	adds	r7, #12
 8010b0c:	46bd      	mov	sp, r7
 8010b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b12:	4770      	bx	lr
 8010b14:	40008000 	.word	0x40008000

08010b18 <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 8010b18:	b480      	push	{r7}
 8010b1a:	b083      	sub	sp, #12
 8010b1c:	af00      	add	r7, sp, #0
 8010b1e:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	681b      	ldr	r3, [r3, #0]
 8010b24:	4a18      	ldr	r2, [pc, #96]	@ (8010b88 <HAL_UART_EnableReceiverTimeout+0x70>)
 8010b26:	4293      	cmp	r3, r2
 8010b28:	d027      	beq.n	8010b7a <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010b30:	2b20      	cmp	r3, #32
 8010b32:	d120      	bne.n	8010b76 <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010b3a:	2b01      	cmp	r3, #1
 8010b3c:	d101      	bne.n	8010b42 <HAL_UART_EnableReceiverTimeout+0x2a>
 8010b3e:	2302      	movs	r3, #2
 8010b40:	e01c      	b.n	8010b7c <HAL_UART_EnableReceiverTimeout+0x64>
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	2201      	movs	r2, #1
 8010b46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	2224      	movs	r2, #36	@ 0x24
 8010b4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	681b      	ldr	r3, [r3, #0]
 8010b56:	685a      	ldr	r2, [r3, #4]
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	681b      	ldr	r3, [r3, #0]
 8010b5c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8010b60:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	2220      	movs	r2, #32
 8010b66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	2200      	movs	r2, #0
 8010b6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 8010b72:	2300      	movs	r3, #0
 8010b74:	e002      	b.n	8010b7c <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 8010b76:	2302      	movs	r3, #2
 8010b78:	e000      	b.n	8010b7c <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 8010b7a:	2301      	movs	r3, #1
  }
}
 8010b7c:	4618      	mov	r0, r3
 8010b7e:	370c      	adds	r7, #12
 8010b80:	46bd      	mov	sp, r7
 8010b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b86:	4770      	bx	lr
 8010b88:	40008000 	.word	0x40008000

08010b8c <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 8010b8c:	b480      	push	{r7}
 8010b8e:	b083      	sub	sp, #12
 8010b90:	af00      	add	r7, sp, #0
 8010b92:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 8010b9a:	4618      	mov	r0, r3
 8010b9c:	370c      	adds	r7, #12
 8010b9e:	46bd      	mov	sp, r7
 8010ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ba4:	4770      	bx	lr
	...

08010ba8 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8010ba8:	b480      	push	{r7}
 8010baa:	b083      	sub	sp, #12
 8010bac:	af00      	add	r7, sp, #0
 8010bae:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	4a1a      	ldr	r2, [pc, #104]	@ (8010c1c <UART_InitCallbacksToDefault+0x74>)
 8010bb4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	4a19      	ldr	r2, [pc, #100]	@ (8010c20 <UART_InitCallbacksToDefault+0x78>)
 8010bbc:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	4a18      	ldr	r2, [pc, #96]	@ (8010c24 <UART_InitCallbacksToDefault+0x7c>)
 8010bc4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	4a17      	ldr	r2, [pc, #92]	@ (8010c28 <UART_InitCallbacksToDefault+0x80>)
 8010bcc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	4a16      	ldr	r2, [pc, #88]	@ (8010c2c <UART_InitCallbacksToDefault+0x84>)
 8010bd4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	4a15      	ldr	r2, [pc, #84]	@ (8010c30 <UART_InitCallbacksToDefault+0x88>)
 8010bdc:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	4a14      	ldr	r2, [pc, #80]	@ (8010c34 <UART_InitCallbacksToDefault+0x8c>)
 8010be4:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	4a13      	ldr	r2, [pc, #76]	@ (8010c38 <UART_InitCallbacksToDefault+0x90>)
 8010bec:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	4a12      	ldr	r2, [pc, #72]	@ (8010c3c <UART_InitCallbacksToDefault+0x94>)
 8010bf4:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	4a11      	ldr	r2, [pc, #68]	@ (8010c40 <UART_InitCallbacksToDefault+0x98>)
 8010bfc:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	4a10      	ldr	r2, [pc, #64]	@ (8010c44 <UART_InitCallbacksToDefault+0x9c>)
 8010c04:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	4a0f      	ldr	r2, [pc, #60]	@ (8010c48 <UART_InitCallbacksToDefault+0xa0>)
 8010c0c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 8010c10:	bf00      	nop
 8010c12:	370c      	adds	r7, #12
 8010c14:	46bd      	mov	sp, r7
 8010c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c1a:	4770      	bx	lr
 8010c1c:	08010a3d 	.word	0x08010a3d
 8010c20:	08010a29 	.word	0x08010a29
 8010c24:	08010a65 	.word	0x08010a65
 8010c28:	08010a51 	.word	0x08010a51
 8010c2c:	08010a79 	.word	0x08010a79
 8010c30:	08010a8d 	.word	0x08010a8d
 8010c34:	08010aa1 	.word	0x08010aa1
 8010c38:	08010ab5 	.word	0x08010ab5
 8010c3c:	08011b91 	.word	0x08011b91
 8010c40:	08011ba5 	.word	0x08011ba5
 8010c44:	08011bb9 	.word	0x08011bb9
 8010c48:	08010ac9 	.word	0x08010ac9

08010c4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010c4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010c50:	b08c      	sub	sp, #48	@ 0x30
 8010c52:	af00      	add	r7, sp, #0
 8010c54:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8010c56:	2300      	movs	r3, #0
 8010c58:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010c5c:	697b      	ldr	r3, [r7, #20]
 8010c5e:	689a      	ldr	r2, [r3, #8]
 8010c60:	697b      	ldr	r3, [r7, #20]
 8010c62:	691b      	ldr	r3, [r3, #16]
 8010c64:	431a      	orrs	r2, r3
 8010c66:	697b      	ldr	r3, [r7, #20]
 8010c68:	695b      	ldr	r3, [r3, #20]
 8010c6a:	431a      	orrs	r2, r3
 8010c6c:	697b      	ldr	r3, [r7, #20]
 8010c6e:	69db      	ldr	r3, [r3, #28]
 8010c70:	4313      	orrs	r3, r2
 8010c72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010c74:	697b      	ldr	r3, [r7, #20]
 8010c76:	681b      	ldr	r3, [r3, #0]
 8010c78:	681a      	ldr	r2, [r3, #0]
 8010c7a:	4baa      	ldr	r3, [pc, #680]	@ (8010f24 <UART_SetConfig+0x2d8>)
 8010c7c:	4013      	ands	r3, r2
 8010c7e:	697a      	ldr	r2, [r7, #20]
 8010c80:	6812      	ldr	r2, [r2, #0]
 8010c82:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010c84:	430b      	orrs	r3, r1
 8010c86:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010c88:	697b      	ldr	r3, [r7, #20]
 8010c8a:	681b      	ldr	r3, [r3, #0]
 8010c8c:	685b      	ldr	r3, [r3, #4]
 8010c8e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8010c92:	697b      	ldr	r3, [r7, #20]
 8010c94:	68da      	ldr	r2, [r3, #12]
 8010c96:	697b      	ldr	r3, [r7, #20]
 8010c98:	681b      	ldr	r3, [r3, #0]
 8010c9a:	430a      	orrs	r2, r1
 8010c9c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010c9e:	697b      	ldr	r3, [r7, #20]
 8010ca0:	699b      	ldr	r3, [r3, #24]
 8010ca2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8010ca4:	697b      	ldr	r3, [r7, #20]
 8010ca6:	681b      	ldr	r3, [r3, #0]
 8010ca8:	4a9f      	ldr	r2, [pc, #636]	@ (8010f28 <UART_SetConfig+0x2dc>)
 8010caa:	4293      	cmp	r3, r2
 8010cac:	d004      	beq.n	8010cb8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8010cae:	697b      	ldr	r3, [r7, #20]
 8010cb0:	6a1b      	ldr	r3, [r3, #32]
 8010cb2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010cb4:	4313      	orrs	r3, r2
 8010cb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010cb8:	697b      	ldr	r3, [r7, #20]
 8010cba:	681b      	ldr	r3, [r3, #0]
 8010cbc:	689b      	ldr	r3, [r3, #8]
 8010cbe:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8010cc2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8010cc6:	697a      	ldr	r2, [r7, #20]
 8010cc8:	6812      	ldr	r2, [r2, #0]
 8010cca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010ccc:	430b      	orrs	r3, r1
 8010cce:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8010cd0:	697b      	ldr	r3, [r7, #20]
 8010cd2:	681b      	ldr	r3, [r3, #0]
 8010cd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010cd6:	f023 010f 	bic.w	r1, r3, #15
 8010cda:	697b      	ldr	r3, [r7, #20]
 8010cdc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010cde:	697b      	ldr	r3, [r7, #20]
 8010ce0:	681b      	ldr	r3, [r3, #0]
 8010ce2:	430a      	orrs	r2, r1
 8010ce4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010ce6:	697b      	ldr	r3, [r7, #20]
 8010ce8:	681b      	ldr	r3, [r3, #0]
 8010cea:	4a90      	ldr	r2, [pc, #576]	@ (8010f2c <UART_SetConfig+0x2e0>)
 8010cec:	4293      	cmp	r3, r2
 8010cee:	d125      	bne.n	8010d3c <UART_SetConfig+0xf0>
 8010cf0:	4b8f      	ldr	r3, [pc, #572]	@ (8010f30 <UART_SetConfig+0x2e4>)
 8010cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010cf6:	f003 0303 	and.w	r3, r3, #3
 8010cfa:	2b03      	cmp	r3, #3
 8010cfc:	d81a      	bhi.n	8010d34 <UART_SetConfig+0xe8>
 8010cfe:	a201      	add	r2, pc, #4	@ (adr r2, 8010d04 <UART_SetConfig+0xb8>)
 8010d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d04:	08010d15 	.word	0x08010d15
 8010d08:	08010d25 	.word	0x08010d25
 8010d0c:	08010d1d 	.word	0x08010d1d
 8010d10:	08010d2d 	.word	0x08010d2d
 8010d14:	2301      	movs	r3, #1
 8010d16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010d1a:	e116      	b.n	8010f4a <UART_SetConfig+0x2fe>
 8010d1c:	2302      	movs	r3, #2
 8010d1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010d22:	e112      	b.n	8010f4a <UART_SetConfig+0x2fe>
 8010d24:	2304      	movs	r3, #4
 8010d26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010d2a:	e10e      	b.n	8010f4a <UART_SetConfig+0x2fe>
 8010d2c:	2308      	movs	r3, #8
 8010d2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010d32:	e10a      	b.n	8010f4a <UART_SetConfig+0x2fe>
 8010d34:	2310      	movs	r3, #16
 8010d36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010d3a:	e106      	b.n	8010f4a <UART_SetConfig+0x2fe>
 8010d3c:	697b      	ldr	r3, [r7, #20]
 8010d3e:	681b      	ldr	r3, [r3, #0]
 8010d40:	4a7c      	ldr	r2, [pc, #496]	@ (8010f34 <UART_SetConfig+0x2e8>)
 8010d42:	4293      	cmp	r3, r2
 8010d44:	d138      	bne.n	8010db8 <UART_SetConfig+0x16c>
 8010d46:	4b7a      	ldr	r3, [pc, #488]	@ (8010f30 <UART_SetConfig+0x2e4>)
 8010d48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010d4c:	f003 030c 	and.w	r3, r3, #12
 8010d50:	2b0c      	cmp	r3, #12
 8010d52:	d82d      	bhi.n	8010db0 <UART_SetConfig+0x164>
 8010d54:	a201      	add	r2, pc, #4	@ (adr r2, 8010d5c <UART_SetConfig+0x110>)
 8010d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d5a:	bf00      	nop
 8010d5c:	08010d91 	.word	0x08010d91
 8010d60:	08010db1 	.word	0x08010db1
 8010d64:	08010db1 	.word	0x08010db1
 8010d68:	08010db1 	.word	0x08010db1
 8010d6c:	08010da1 	.word	0x08010da1
 8010d70:	08010db1 	.word	0x08010db1
 8010d74:	08010db1 	.word	0x08010db1
 8010d78:	08010db1 	.word	0x08010db1
 8010d7c:	08010d99 	.word	0x08010d99
 8010d80:	08010db1 	.word	0x08010db1
 8010d84:	08010db1 	.word	0x08010db1
 8010d88:	08010db1 	.word	0x08010db1
 8010d8c:	08010da9 	.word	0x08010da9
 8010d90:	2300      	movs	r3, #0
 8010d92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010d96:	e0d8      	b.n	8010f4a <UART_SetConfig+0x2fe>
 8010d98:	2302      	movs	r3, #2
 8010d9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010d9e:	e0d4      	b.n	8010f4a <UART_SetConfig+0x2fe>
 8010da0:	2304      	movs	r3, #4
 8010da2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010da6:	e0d0      	b.n	8010f4a <UART_SetConfig+0x2fe>
 8010da8:	2308      	movs	r3, #8
 8010daa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010dae:	e0cc      	b.n	8010f4a <UART_SetConfig+0x2fe>
 8010db0:	2310      	movs	r3, #16
 8010db2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010db6:	e0c8      	b.n	8010f4a <UART_SetConfig+0x2fe>
 8010db8:	697b      	ldr	r3, [r7, #20]
 8010dba:	681b      	ldr	r3, [r3, #0]
 8010dbc:	4a5e      	ldr	r2, [pc, #376]	@ (8010f38 <UART_SetConfig+0x2ec>)
 8010dbe:	4293      	cmp	r3, r2
 8010dc0:	d125      	bne.n	8010e0e <UART_SetConfig+0x1c2>
 8010dc2:	4b5b      	ldr	r3, [pc, #364]	@ (8010f30 <UART_SetConfig+0x2e4>)
 8010dc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010dc8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8010dcc:	2b30      	cmp	r3, #48	@ 0x30
 8010dce:	d016      	beq.n	8010dfe <UART_SetConfig+0x1b2>
 8010dd0:	2b30      	cmp	r3, #48	@ 0x30
 8010dd2:	d818      	bhi.n	8010e06 <UART_SetConfig+0x1ba>
 8010dd4:	2b20      	cmp	r3, #32
 8010dd6:	d00a      	beq.n	8010dee <UART_SetConfig+0x1a2>
 8010dd8:	2b20      	cmp	r3, #32
 8010dda:	d814      	bhi.n	8010e06 <UART_SetConfig+0x1ba>
 8010ddc:	2b00      	cmp	r3, #0
 8010dde:	d002      	beq.n	8010de6 <UART_SetConfig+0x19a>
 8010de0:	2b10      	cmp	r3, #16
 8010de2:	d008      	beq.n	8010df6 <UART_SetConfig+0x1aa>
 8010de4:	e00f      	b.n	8010e06 <UART_SetConfig+0x1ba>
 8010de6:	2300      	movs	r3, #0
 8010de8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010dec:	e0ad      	b.n	8010f4a <UART_SetConfig+0x2fe>
 8010dee:	2302      	movs	r3, #2
 8010df0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010df4:	e0a9      	b.n	8010f4a <UART_SetConfig+0x2fe>
 8010df6:	2304      	movs	r3, #4
 8010df8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010dfc:	e0a5      	b.n	8010f4a <UART_SetConfig+0x2fe>
 8010dfe:	2308      	movs	r3, #8
 8010e00:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010e04:	e0a1      	b.n	8010f4a <UART_SetConfig+0x2fe>
 8010e06:	2310      	movs	r3, #16
 8010e08:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010e0c:	e09d      	b.n	8010f4a <UART_SetConfig+0x2fe>
 8010e0e:	697b      	ldr	r3, [r7, #20]
 8010e10:	681b      	ldr	r3, [r3, #0]
 8010e12:	4a4a      	ldr	r2, [pc, #296]	@ (8010f3c <UART_SetConfig+0x2f0>)
 8010e14:	4293      	cmp	r3, r2
 8010e16:	d125      	bne.n	8010e64 <UART_SetConfig+0x218>
 8010e18:	4b45      	ldr	r3, [pc, #276]	@ (8010f30 <UART_SetConfig+0x2e4>)
 8010e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010e1e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8010e22:	2bc0      	cmp	r3, #192	@ 0xc0
 8010e24:	d016      	beq.n	8010e54 <UART_SetConfig+0x208>
 8010e26:	2bc0      	cmp	r3, #192	@ 0xc0
 8010e28:	d818      	bhi.n	8010e5c <UART_SetConfig+0x210>
 8010e2a:	2b80      	cmp	r3, #128	@ 0x80
 8010e2c:	d00a      	beq.n	8010e44 <UART_SetConfig+0x1f8>
 8010e2e:	2b80      	cmp	r3, #128	@ 0x80
 8010e30:	d814      	bhi.n	8010e5c <UART_SetConfig+0x210>
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	d002      	beq.n	8010e3c <UART_SetConfig+0x1f0>
 8010e36:	2b40      	cmp	r3, #64	@ 0x40
 8010e38:	d008      	beq.n	8010e4c <UART_SetConfig+0x200>
 8010e3a:	e00f      	b.n	8010e5c <UART_SetConfig+0x210>
 8010e3c:	2300      	movs	r3, #0
 8010e3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010e42:	e082      	b.n	8010f4a <UART_SetConfig+0x2fe>
 8010e44:	2302      	movs	r3, #2
 8010e46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010e4a:	e07e      	b.n	8010f4a <UART_SetConfig+0x2fe>
 8010e4c:	2304      	movs	r3, #4
 8010e4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010e52:	e07a      	b.n	8010f4a <UART_SetConfig+0x2fe>
 8010e54:	2308      	movs	r3, #8
 8010e56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010e5a:	e076      	b.n	8010f4a <UART_SetConfig+0x2fe>
 8010e5c:	2310      	movs	r3, #16
 8010e5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010e62:	e072      	b.n	8010f4a <UART_SetConfig+0x2fe>
 8010e64:	697b      	ldr	r3, [r7, #20]
 8010e66:	681b      	ldr	r3, [r3, #0]
 8010e68:	4a35      	ldr	r2, [pc, #212]	@ (8010f40 <UART_SetConfig+0x2f4>)
 8010e6a:	4293      	cmp	r3, r2
 8010e6c:	d12a      	bne.n	8010ec4 <UART_SetConfig+0x278>
 8010e6e:	4b30      	ldr	r3, [pc, #192]	@ (8010f30 <UART_SetConfig+0x2e4>)
 8010e70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010e74:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8010e78:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8010e7c:	d01a      	beq.n	8010eb4 <UART_SetConfig+0x268>
 8010e7e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8010e82:	d81b      	bhi.n	8010ebc <UART_SetConfig+0x270>
 8010e84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010e88:	d00c      	beq.n	8010ea4 <UART_SetConfig+0x258>
 8010e8a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010e8e:	d815      	bhi.n	8010ebc <UART_SetConfig+0x270>
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	d003      	beq.n	8010e9c <UART_SetConfig+0x250>
 8010e94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010e98:	d008      	beq.n	8010eac <UART_SetConfig+0x260>
 8010e9a:	e00f      	b.n	8010ebc <UART_SetConfig+0x270>
 8010e9c:	2300      	movs	r3, #0
 8010e9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010ea2:	e052      	b.n	8010f4a <UART_SetConfig+0x2fe>
 8010ea4:	2302      	movs	r3, #2
 8010ea6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010eaa:	e04e      	b.n	8010f4a <UART_SetConfig+0x2fe>
 8010eac:	2304      	movs	r3, #4
 8010eae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010eb2:	e04a      	b.n	8010f4a <UART_SetConfig+0x2fe>
 8010eb4:	2308      	movs	r3, #8
 8010eb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010eba:	e046      	b.n	8010f4a <UART_SetConfig+0x2fe>
 8010ebc:	2310      	movs	r3, #16
 8010ebe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010ec2:	e042      	b.n	8010f4a <UART_SetConfig+0x2fe>
 8010ec4:	697b      	ldr	r3, [r7, #20]
 8010ec6:	681b      	ldr	r3, [r3, #0]
 8010ec8:	4a17      	ldr	r2, [pc, #92]	@ (8010f28 <UART_SetConfig+0x2dc>)
 8010eca:	4293      	cmp	r3, r2
 8010ecc:	d13a      	bne.n	8010f44 <UART_SetConfig+0x2f8>
 8010ece:	4b18      	ldr	r3, [pc, #96]	@ (8010f30 <UART_SetConfig+0x2e4>)
 8010ed0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010ed4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8010ed8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8010edc:	d01a      	beq.n	8010f14 <UART_SetConfig+0x2c8>
 8010ede:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8010ee2:	d81b      	bhi.n	8010f1c <UART_SetConfig+0x2d0>
 8010ee4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010ee8:	d00c      	beq.n	8010f04 <UART_SetConfig+0x2b8>
 8010eea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010eee:	d815      	bhi.n	8010f1c <UART_SetConfig+0x2d0>
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	d003      	beq.n	8010efc <UART_SetConfig+0x2b0>
 8010ef4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010ef8:	d008      	beq.n	8010f0c <UART_SetConfig+0x2c0>
 8010efa:	e00f      	b.n	8010f1c <UART_SetConfig+0x2d0>
 8010efc:	2300      	movs	r3, #0
 8010efe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010f02:	e022      	b.n	8010f4a <UART_SetConfig+0x2fe>
 8010f04:	2302      	movs	r3, #2
 8010f06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010f0a:	e01e      	b.n	8010f4a <UART_SetConfig+0x2fe>
 8010f0c:	2304      	movs	r3, #4
 8010f0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010f12:	e01a      	b.n	8010f4a <UART_SetConfig+0x2fe>
 8010f14:	2308      	movs	r3, #8
 8010f16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010f1a:	e016      	b.n	8010f4a <UART_SetConfig+0x2fe>
 8010f1c:	2310      	movs	r3, #16
 8010f1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010f22:	e012      	b.n	8010f4a <UART_SetConfig+0x2fe>
 8010f24:	cfff69f3 	.word	0xcfff69f3
 8010f28:	40008000 	.word	0x40008000
 8010f2c:	40013800 	.word	0x40013800
 8010f30:	40021000 	.word	0x40021000
 8010f34:	40004400 	.word	0x40004400
 8010f38:	40004800 	.word	0x40004800
 8010f3c:	40004c00 	.word	0x40004c00
 8010f40:	40005000 	.word	0x40005000
 8010f44:	2310      	movs	r3, #16
 8010f46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8010f4a:	697b      	ldr	r3, [r7, #20]
 8010f4c:	681b      	ldr	r3, [r3, #0]
 8010f4e:	4aae      	ldr	r2, [pc, #696]	@ (8011208 <UART_SetConfig+0x5bc>)
 8010f50:	4293      	cmp	r3, r2
 8010f52:	f040 8097 	bne.w	8011084 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8010f56:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8010f5a:	2b08      	cmp	r3, #8
 8010f5c:	d823      	bhi.n	8010fa6 <UART_SetConfig+0x35a>
 8010f5e:	a201      	add	r2, pc, #4	@ (adr r2, 8010f64 <UART_SetConfig+0x318>)
 8010f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f64:	08010f89 	.word	0x08010f89
 8010f68:	08010fa7 	.word	0x08010fa7
 8010f6c:	08010f91 	.word	0x08010f91
 8010f70:	08010fa7 	.word	0x08010fa7
 8010f74:	08010f97 	.word	0x08010f97
 8010f78:	08010fa7 	.word	0x08010fa7
 8010f7c:	08010fa7 	.word	0x08010fa7
 8010f80:	08010fa7 	.word	0x08010fa7
 8010f84:	08010f9f 	.word	0x08010f9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010f88:	f7fc fc6c 	bl	800d864 <HAL_RCC_GetPCLK1Freq>
 8010f8c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8010f8e:	e010      	b.n	8010fb2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010f90:	4b9e      	ldr	r3, [pc, #632]	@ (801120c <UART_SetConfig+0x5c0>)
 8010f92:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8010f94:	e00d      	b.n	8010fb2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010f96:	f7fc fbf7 	bl	800d788 <HAL_RCC_GetSysClockFreq>
 8010f9a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8010f9c:	e009      	b.n	8010fb2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010f9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010fa2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8010fa4:	e005      	b.n	8010fb2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8010fa6:	2300      	movs	r3, #0
 8010fa8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8010faa:	2301      	movs	r3, #1
 8010fac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8010fb0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8010fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010fb4:	2b00      	cmp	r3, #0
 8010fb6:	f000 8130 	beq.w	801121a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8010fba:	697b      	ldr	r3, [r7, #20]
 8010fbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010fbe:	4a94      	ldr	r2, [pc, #592]	@ (8011210 <UART_SetConfig+0x5c4>)
 8010fc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010fc4:	461a      	mov	r2, r3
 8010fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010fc8:	fbb3 f3f2 	udiv	r3, r3, r2
 8010fcc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010fce:	697b      	ldr	r3, [r7, #20]
 8010fd0:	685a      	ldr	r2, [r3, #4]
 8010fd2:	4613      	mov	r3, r2
 8010fd4:	005b      	lsls	r3, r3, #1
 8010fd6:	4413      	add	r3, r2
 8010fd8:	69ba      	ldr	r2, [r7, #24]
 8010fda:	429a      	cmp	r2, r3
 8010fdc:	d305      	bcc.n	8010fea <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8010fde:	697b      	ldr	r3, [r7, #20]
 8010fe0:	685b      	ldr	r3, [r3, #4]
 8010fe2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010fe4:	69ba      	ldr	r2, [r7, #24]
 8010fe6:	429a      	cmp	r2, r3
 8010fe8:	d903      	bls.n	8010ff2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8010fea:	2301      	movs	r3, #1
 8010fec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8010ff0:	e113      	b.n	801121a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ff4:	2200      	movs	r2, #0
 8010ff6:	60bb      	str	r3, [r7, #8]
 8010ff8:	60fa      	str	r2, [r7, #12]
 8010ffa:	697b      	ldr	r3, [r7, #20]
 8010ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010ffe:	4a84      	ldr	r2, [pc, #528]	@ (8011210 <UART_SetConfig+0x5c4>)
 8011000:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011004:	b29b      	uxth	r3, r3
 8011006:	2200      	movs	r2, #0
 8011008:	603b      	str	r3, [r7, #0]
 801100a:	607a      	str	r2, [r7, #4]
 801100c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011010:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8011014:	f7ef fdee 	bl	8000bf4 <__aeabi_uldivmod>
 8011018:	4602      	mov	r2, r0
 801101a:	460b      	mov	r3, r1
 801101c:	4610      	mov	r0, r2
 801101e:	4619      	mov	r1, r3
 8011020:	f04f 0200 	mov.w	r2, #0
 8011024:	f04f 0300 	mov.w	r3, #0
 8011028:	020b      	lsls	r3, r1, #8
 801102a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801102e:	0202      	lsls	r2, r0, #8
 8011030:	6979      	ldr	r1, [r7, #20]
 8011032:	6849      	ldr	r1, [r1, #4]
 8011034:	0849      	lsrs	r1, r1, #1
 8011036:	2000      	movs	r0, #0
 8011038:	460c      	mov	r4, r1
 801103a:	4605      	mov	r5, r0
 801103c:	eb12 0804 	adds.w	r8, r2, r4
 8011040:	eb43 0905 	adc.w	r9, r3, r5
 8011044:	697b      	ldr	r3, [r7, #20]
 8011046:	685b      	ldr	r3, [r3, #4]
 8011048:	2200      	movs	r2, #0
 801104a:	469a      	mov	sl, r3
 801104c:	4693      	mov	fp, r2
 801104e:	4652      	mov	r2, sl
 8011050:	465b      	mov	r3, fp
 8011052:	4640      	mov	r0, r8
 8011054:	4649      	mov	r1, r9
 8011056:	f7ef fdcd 	bl	8000bf4 <__aeabi_uldivmod>
 801105a:	4602      	mov	r2, r0
 801105c:	460b      	mov	r3, r1
 801105e:	4613      	mov	r3, r2
 8011060:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8011062:	6a3b      	ldr	r3, [r7, #32]
 8011064:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8011068:	d308      	bcc.n	801107c <UART_SetConfig+0x430>
 801106a:	6a3b      	ldr	r3, [r7, #32]
 801106c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8011070:	d204      	bcs.n	801107c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8011072:	697b      	ldr	r3, [r7, #20]
 8011074:	681b      	ldr	r3, [r3, #0]
 8011076:	6a3a      	ldr	r2, [r7, #32]
 8011078:	60da      	str	r2, [r3, #12]
 801107a:	e0ce      	b.n	801121a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 801107c:	2301      	movs	r3, #1
 801107e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8011082:	e0ca      	b.n	801121a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011084:	697b      	ldr	r3, [r7, #20]
 8011086:	69db      	ldr	r3, [r3, #28]
 8011088:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801108c:	d166      	bne.n	801115c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 801108e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8011092:	2b08      	cmp	r3, #8
 8011094:	d827      	bhi.n	80110e6 <UART_SetConfig+0x49a>
 8011096:	a201      	add	r2, pc, #4	@ (adr r2, 801109c <UART_SetConfig+0x450>)
 8011098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801109c:	080110c1 	.word	0x080110c1
 80110a0:	080110c9 	.word	0x080110c9
 80110a4:	080110d1 	.word	0x080110d1
 80110a8:	080110e7 	.word	0x080110e7
 80110ac:	080110d7 	.word	0x080110d7
 80110b0:	080110e7 	.word	0x080110e7
 80110b4:	080110e7 	.word	0x080110e7
 80110b8:	080110e7 	.word	0x080110e7
 80110bc:	080110df 	.word	0x080110df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80110c0:	f7fc fbd0 	bl	800d864 <HAL_RCC_GetPCLK1Freq>
 80110c4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80110c6:	e014      	b.n	80110f2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80110c8:	f7fc fbe2 	bl	800d890 <HAL_RCC_GetPCLK2Freq>
 80110cc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80110ce:	e010      	b.n	80110f2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80110d0:	4b4e      	ldr	r3, [pc, #312]	@ (801120c <UART_SetConfig+0x5c0>)
 80110d2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80110d4:	e00d      	b.n	80110f2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80110d6:	f7fc fb57 	bl	800d788 <HAL_RCC_GetSysClockFreq>
 80110da:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80110dc:	e009      	b.n	80110f2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80110de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80110e2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80110e4:	e005      	b.n	80110f2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80110e6:	2300      	movs	r3, #0
 80110e8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80110ea:	2301      	movs	r3, #1
 80110ec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80110f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80110f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110f4:	2b00      	cmp	r3, #0
 80110f6:	f000 8090 	beq.w	801121a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80110fa:	697b      	ldr	r3, [r7, #20]
 80110fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80110fe:	4a44      	ldr	r2, [pc, #272]	@ (8011210 <UART_SetConfig+0x5c4>)
 8011100:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011104:	461a      	mov	r2, r3
 8011106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011108:	fbb3 f3f2 	udiv	r3, r3, r2
 801110c:	005a      	lsls	r2, r3, #1
 801110e:	697b      	ldr	r3, [r7, #20]
 8011110:	685b      	ldr	r3, [r3, #4]
 8011112:	085b      	lsrs	r3, r3, #1
 8011114:	441a      	add	r2, r3
 8011116:	697b      	ldr	r3, [r7, #20]
 8011118:	685b      	ldr	r3, [r3, #4]
 801111a:	fbb2 f3f3 	udiv	r3, r2, r3
 801111e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011120:	6a3b      	ldr	r3, [r7, #32]
 8011122:	2b0f      	cmp	r3, #15
 8011124:	d916      	bls.n	8011154 <UART_SetConfig+0x508>
 8011126:	6a3b      	ldr	r3, [r7, #32]
 8011128:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801112c:	d212      	bcs.n	8011154 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801112e:	6a3b      	ldr	r3, [r7, #32]
 8011130:	b29b      	uxth	r3, r3
 8011132:	f023 030f 	bic.w	r3, r3, #15
 8011136:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8011138:	6a3b      	ldr	r3, [r7, #32]
 801113a:	085b      	lsrs	r3, r3, #1
 801113c:	b29b      	uxth	r3, r3
 801113e:	f003 0307 	and.w	r3, r3, #7
 8011142:	b29a      	uxth	r2, r3
 8011144:	8bfb      	ldrh	r3, [r7, #30]
 8011146:	4313      	orrs	r3, r2
 8011148:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 801114a:	697b      	ldr	r3, [r7, #20]
 801114c:	681b      	ldr	r3, [r3, #0]
 801114e:	8bfa      	ldrh	r2, [r7, #30]
 8011150:	60da      	str	r2, [r3, #12]
 8011152:	e062      	b.n	801121a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8011154:	2301      	movs	r3, #1
 8011156:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 801115a:	e05e      	b.n	801121a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 801115c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8011160:	2b08      	cmp	r3, #8
 8011162:	d828      	bhi.n	80111b6 <UART_SetConfig+0x56a>
 8011164:	a201      	add	r2, pc, #4	@ (adr r2, 801116c <UART_SetConfig+0x520>)
 8011166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801116a:	bf00      	nop
 801116c:	08011191 	.word	0x08011191
 8011170:	08011199 	.word	0x08011199
 8011174:	080111a1 	.word	0x080111a1
 8011178:	080111b7 	.word	0x080111b7
 801117c:	080111a7 	.word	0x080111a7
 8011180:	080111b7 	.word	0x080111b7
 8011184:	080111b7 	.word	0x080111b7
 8011188:	080111b7 	.word	0x080111b7
 801118c:	080111af 	.word	0x080111af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011190:	f7fc fb68 	bl	800d864 <HAL_RCC_GetPCLK1Freq>
 8011194:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8011196:	e014      	b.n	80111c2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011198:	f7fc fb7a 	bl	800d890 <HAL_RCC_GetPCLK2Freq>
 801119c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 801119e:	e010      	b.n	80111c2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80111a0:	4b1a      	ldr	r3, [pc, #104]	@ (801120c <UART_SetConfig+0x5c0>)
 80111a2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80111a4:	e00d      	b.n	80111c2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80111a6:	f7fc faef 	bl	800d788 <HAL_RCC_GetSysClockFreq>
 80111aa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80111ac:	e009      	b.n	80111c2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80111ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80111b2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80111b4:	e005      	b.n	80111c2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80111b6:	2300      	movs	r3, #0
 80111b8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80111ba:	2301      	movs	r3, #1
 80111bc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80111c0:	bf00      	nop
    }

    if (pclk != 0U)
 80111c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111c4:	2b00      	cmp	r3, #0
 80111c6:	d028      	beq.n	801121a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80111c8:	697b      	ldr	r3, [r7, #20]
 80111ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80111cc:	4a10      	ldr	r2, [pc, #64]	@ (8011210 <UART_SetConfig+0x5c4>)
 80111ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80111d2:	461a      	mov	r2, r3
 80111d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111d6:	fbb3 f2f2 	udiv	r2, r3, r2
 80111da:	697b      	ldr	r3, [r7, #20]
 80111dc:	685b      	ldr	r3, [r3, #4]
 80111de:	085b      	lsrs	r3, r3, #1
 80111e0:	441a      	add	r2, r3
 80111e2:	697b      	ldr	r3, [r7, #20]
 80111e4:	685b      	ldr	r3, [r3, #4]
 80111e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80111ea:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80111ec:	6a3b      	ldr	r3, [r7, #32]
 80111ee:	2b0f      	cmp	r3, #15
 80111f0:	d910      	bls.n	8011214 <UART_SetConfig+0x5c8>
 80111f2:	6a3b      	ldr	r3, [r7, #32]
 80111f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80111f8:	d20c      	bcs.n	8011214 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80111fa:	6a3b      	ldr	r3, [r7, #32]
 80111fc:	b29a      	uxth	r2, r3
 80111fe:	697b      	ldr	r3, [r7, #20]
 8011200:	681b      	ldr	r3, [r3, #0]
 8011202:	60da      	str	r2, [r3, #12]
 8011204:	e009      	b.n	801121a <UART_SetConfig+0x5ce>
 8011206:	bf00      	nop
 8011208:	40008000 	.word	0x40008000
 801120c:	00f42400 	.word	0x00f42400
 8011210:	08014850 	.word	0x08014850
      }
      else
      {
        ret = HAL_ERROR;
 8011214:	2301      	movs	r3, #1
 8011216:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801121a:	697b      	ldr	r3, [r7, #20]
 801121c:	2201      	movs	r2, #1
 801121e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8011222:	697b      	ldr	r3, [r7, #20]
 8011224:	2201      	movs	r2, #1
 8011226:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801122a:	697b      	ldr	r3, [r7, #20]
 801122c:	2200      	movs	r2, #0
 801122e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8011230:	697b      	ldr	r3, [r7, #20]
 8011232:	2200      	movs	r2, #0
 8011234:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8011236:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 801123a:	4618      	mov	r0, r3
 801123c:	3730      	adds	r7, #48	@ 0x30
 801123e:	46bd      	mov	sp, r7
 8011240:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08011244 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8011244:	b480      	push	{r7}
 8011246:	b083      	sub	sp, #12
 8011248:	af00      	add	r7, sp, #0
 801124a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011250:	f003 0308 	and.w	r3, r3, #8
 8011254:	2b00      	cmp	r3, #0
 8011256:	d00a      	beq.n	801126e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	681b      	ldr	r3, [r3, #0]
 801125c:	685b      	ldr	r3, [r3, #4]
 801125e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	681b      	ldr	r3, [r3, #0]
 801126a:	430a      	orrs	r2, r1
 801126c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011272:	f003 0301 	and.w	r3, r3, #1
 8011276:	2b00      	cmp	r3, #0
 8011278:	d00a      	beq.n	8011290 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	681b      	ldr	r3, [r3, #0]
 801127e:	685b      	ldr	r3, [r3, #4]
 8011280:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	681b      	ldr	r3, [r3, #0]
 801128c:	430a      	orrs	r2, r1
 801128e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011294:	f003 0302 	and.w	r3, r3, #2
 8011298:	2b00      	cmp	r3, #0
 801129a:	d00a      	beq.n	80112b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	681b      	ldr	r3, [r3, #0]
 80112a0:	685b      	ldr	r3, [r3, #4]
 80112a2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	681b      	ldr	r3, [r3, #0]
 80112ae:	430a      	orrs	r2, r1
 80112b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80112b6:	f003 0304 	and.w	r3, r3, #4
 80112ba:	2b00      	cmp	r3, #0
 80112bc:	d00a      	beq.n	80112d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	681b      	ldr	r3, [r3, #0]
 80112c2:	685b      	ldr	r3, [r3, #4]
 80112c4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	681b      	ldr	r3, [r3, #0]
 80112d0:	430a      	orrs	r2, r1
 80112d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80112d8:	f003 0310 	and.w	r3, r3, #16
 80112dc:	2b00      	cmp	r3, #0
 80112de:	d00a      	beq.n	80112f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	681b      	ldr	r3, [r3, #0]
 80112e4:	689b      	ldr	r3, [r3, #8]
 80112e6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	681b      	ldr	r3, [r3, #0]
 80112f2:	430a      	orrs	r2, r1
 80112f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80112fa:	f003 0320 	and.w	r3, r3, #32
 80112fe:	2b00      	cmp	r3, #0
 8011300:	d00a      	beq.n	8011318 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	681b      	ldr	r3, [r3, #0]
 8011306:	689b      	ldr	r3, [r3, #8]
 8011308:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	681b      	ldr	r3, [r3, #0]
 8011314:	430a      	orrs	r2, r1
 8011316:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801131c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011320:	2b00      	cmp	r3, #0
 8011322:	d01a      	beq.n	801135a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	681b      	ldr	r3, [r3, #0]
 8011328:	685b      	ldr	r3, [r3, #4]
 801132a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	681b      	ldr	r3, [r3, #0]
 8011336:	430a      	orrs	r2, r1
 8011338:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801133e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8011342:	d10a      	bne.n	801135a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	681b      	ldr	r3, [r3, #0]
 8011348:	685b      	ldr	r3, [r3, #4]
 801134a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	681b      	ldr	r3, [r3, #0]
 8011356:	430a      	orrs	r2, r1
 8011358:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801135e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011362:	2b00      	cmp	r3, #0
 8011364:	d00a      	beq.n	801137c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	681b      	ldr	r3, [r3, #0]
 801136a:	685b      	ldr	r3, [r3, #4]
 801136c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	681b      	ldr	r3, [r3, #0]
 8011378:	430a      	orrs	r2, r1
 801137a:	605a      	str	r2, [r3, #4]
  }
}
 801137c:	bf00      	nop
 801137e:	370c      	adds	r7, #12
 8011380:	46bd      	mov	sp, r7
 8011382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011386:	4770      	bx	lr

08011388 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011388:	b580      	push	{r7, lr}
 801138a:	b098      	sub	sp, #96	@ 0x60
 801138c:	af02      	add	r7, sp, #8
 801138e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	2200      	movs	r2, #0
 8011394:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011398:	f7f9 fa4a 	bl	800a830 <HAL_GetTick>
 801139c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	681b      	ldr	r3, [r3, #0]
 80113a2:	681b      	ldr	r3, [r3, #0]
 80113a4:	f003 0308 	and.w	r3, r3, #8
 80113a8:	2b08      	cmp	r3, #8
 80113aa:	d12f      	bne.n	801140c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80113ac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80113b0:	9300      	str	r3, [sp, #0]
 80113b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80113b4:	2200      	movs	r2, #0
 80113b6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80113ba:	6878      	ldr	r0, [r7, #4]
 80113bc:	f000 f88e 	bl	80114dc <UART_WaitOnFlagUntilTimeout>
 80113c0:	4603      	mov	r3, r0
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	d022      	beq.n	801140c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	681b      	ldr	r3, [r3, #0]
 80113ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80113cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80113ce:	e853 3f00 	ldrex	r3, [r3]
 80113d2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80113d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80113d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80113da:	653b      	str	r3, [r7, #80]	@ 0x50
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	681b      	ldr	r3, [r3, #0]
 80113e0:	461a      	mov	r2, r3
 80113e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80113e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80113e6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80113e8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80113ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80113ec:	e841 2300 	strex	r3, r2, [r1]
 80113f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80113f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80113f4:	2b00      	cmp	r3, #0
 80113f6:	d1e6      	bne.n	80113c6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	2220      	movs	r2, #32
 80113fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	2200      	movs	r2, #0
 8011404:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011408:	2303      	movs	r3, #3
 801140a:	e063      	b.n	80114d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	681b      	ldr	r3, [r3, #0]
 8011410:	681b      	ldr	r3, [r3, #0]
 8011412:	f003 0304 	and.w	r3, r3, #4
 8011416:	2b04      	cmp	r3, #4
 8011418:	d149      	bne.n	80114ae <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801141a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 801141e:	9300      	str	r3, [sp, #0]
 8011420:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011422:	2200      	movs	r2, #0
 8011424:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8011428:	6878      	ldr	r0, [r7, #4]
 801142a:	f000 f857 	bl	80114dc <UART_WaitOnFlagUntilTimeout>
 801142e:	4603      	mov	r3, r0
 8011430:	2b00      	cmp	r3, #0
 8011432:	d03c      	beq.n	80114ae <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	681b      	ldr	r3, [r3, #0]
 8011438:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801143a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801143c:	e853 3f00 	ldrex	r3, [r3]
 8011440:	623b      	str	r3, [r7, #32]
   return(result);
 8011442:	6a3b      	ldr	r3, [r7, #32]
 8011444:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8011448:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	681b      	ldr	r3, [r3, #0]
 801144e:	461a      	mov	r2, r3
 8011450:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011452:	633b      	str	r3, [r7, #48]	@ 0x30
 8011454:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011456:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011458:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801145a:	e841 2300 	strex	r3, r2, [r1]
 801145e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8011460:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011462:	2b00      	cmp	r3, #0
 8011464:	d1e6      	bne.n	8011434 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	681b      	ldr	r3, [r3, #0]
 801146a:	3308      	adds	r3, #8
 801146c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801146e:	693b      	ldr	r3, [r7, #16]
 8011470:	e853 3f00 	ldrex	r3, [r3]
 8011474:	60fb      	str	r3, [r7, #12]
   return(result);
 8011476:	68fb      	ldr	r3, [r7, #12]
 8011478:	f023 0301 	bic.w	r3, r3, #1
 801147c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	681b      	ldr	r3, [r3, #0]
 8011482:	3308      	adds	r3, #8
 8011484:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011486:	61fa      	str	r2, [r7, #28]
 8011488:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801148a:	69b9      	ldr	r1, [r7, #24]
 801148c:	69fa      	ldr	r2, [r7, #28]
 801148e:	e841 2300 	strex	r3, r2, [r1]
 8011492:	617b      	str	r3, [r7, #20]
   return(result);
 8011494:	697b      	ldr	r3, [r7, #20]
 8011496:	2b00      	cmp	r3, #0
 8011498:	d1e5      	bne.n	8011466 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	2220      	movs	r2, #32
 801149e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	2200      	movs	r2, #0
 80114a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80114aa:	2303      	movs	r3, #3
 80114ac:	e012      	b.n	80114d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	2220      	movs	r2, #32
 80114b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	2220      	movs	r2, #32
 80114ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	2200      	movs	r2, #0
 80114c2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	2200      	movs	r2, #0
 80114c8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	2200      	movs	r2, #0
 80114ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80114d2:	2300      	movs	r3, #0
}
 80114d4:	4618      	mov	r0, r3
 80114d6:	3758      	adds	r7, #88	@ 0x58
 80114d8:	46bd      	mov	sp, r7
 80114da:	bd80      	pop	{r7, pc}

080114dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80114dc:	b580      	push	{r7, lr}
 80114de:	b084      	sub	sp, #16
 80114e0:	af00      	add	r7, sp, #0
 80114e2:	60f8      	str	r0, [r7, #12]
 80114e4:	60b9      	str	r1, [r7, #8]
 80114e6:	603b      	str	r3, [r7, #0]
 80114e8:	4613      	mov	r3, r2
 80114ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80114ec:	e04f      	b.n	801158e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80114ee:	69bb      	ldr	r3, [r7, #24]
 80114f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80114f4:	d04b      	beq.n	801158e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80114f6:	f7f9 f99b 	bl	800a830 <HAL_GetTick>
 80114fa:	4602      	mov	r2, r0
 80114fc:	683b      	ldr	r3, [r7, #0]
 80114fe:	1ad3      	subs	r3, r2, r3
 8011500:	69ba      	ldr	r2, [r7, #24]
 8011502:	429a      	cmp	r2, r3
 8011504:	d302      	bcc.n	801150c <UART_WaitOnFlagUntilTimeout+0x30>
 8011506:	69bb      	ldr	r3, [r7, #24]
 8011508:	2b00      	cmp	r3, #0
 801150a:	d101      	bne.n	8011510 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 801150c:	2303      	movs	r3, #3
 801150e:	e04e      	b.n	80115ae <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8011510:	68fb      	ldr	r3, [r7, #12]
 8011512:	681b      	ldr	r3, [r3, #0]
 8011514:	681b      	ldr	r3, [r3, #0]
 8011516:	f003 0304 	and.w	r3, r3, #4
 801151a:	2b00      	cmp	r3, #0
 801151c:	d037      	beq.n	801158e <UART_WaitOnFlagUntilTimeout+0xb2>
 801151e:	68bb      	ldr	r3, [r7, #8]
 8011520:	2b80      	cmp	r3, #128	@ 0x80
 8011522:	d034      	beq.n	801158e <UART_WaitOnFlagUntilTimeout+0xb2>
 8011524:	68bb      	ldr	r3, [r7, #8]
 8011526:	2b40      	cmp	r3, #64	@ 0x40
 8011528:	d031      	beq.n	801158e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801152a:	68fb      	ldr	r3, [r7, #12]
 801152c:	681b      	ldr	r3, [r3, #0]
 801152e:	69db      	ldr	r3, [r3, #28]
 8011530:	f003 0308 	and.w	r3, r3, #8
 8011534:	2b08      	cmp	r3, #8
 8011536:	d110      	bne.n	801155a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011538:	68fb      	ldr	r3, [r7, #12]
 801153a:	681b      	ldr	r3, [r3, #0]
 801153c:	2208      	movs	r2, #8
 801153e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011540:	68f8      	ldr	r0, [r7, #12]
 8011542:	f000 f920 	bl	8011786 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8011546:	68fb      	ldr	r3, [r7, #12]
 8011548:	2208      	movs	r2, #8
 801154a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801154e:	68fb      	ldr	r3, [r7, #12]
 8011550:	2200      	movs	r2, #0
 8011552:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8011556:	2301      	movs	r3, #1
 8011558:	e029      	b.n	80115ae <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801155a:	68fb      	ldr	r3, [r7, #12]
 801155c:	681b      	ldr	r3, [r3, #0]
 801155e:	69db      	ldr	r3, [r3, #28]
 8011560:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8011564:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8011568:	d111      	bne.n	801158e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801156a:	68fb      	ldr	r3, [r7, #12]
 801156c:	681b      	ldr	r3, [r3, #0]
 801156e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8011572:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011574:	68f8      	ldr	r0, [r7, #12]
 8011576:	f000 f906 	bl	8011786 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801157a:	68fb      	ldr	r3, [r7, #12]
 801157c:	2220      	movs	r2, #32
 801157e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011582:	68fb      	ldr	r3, [r7, #12]
 8011584:	2200      	movs	r2, #0
 8011586:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 801158a:	2303      	movs	r3, #3
 801158c:	e00f      	b.n	80115ae <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801158e:	68fb      	ldr	r3, [r7, #12]
 8011590:	681b      	ldr	r3, [r3, #0]
 8011592:	69da      	ldr	r2, [r3, #28]
 8011594:	68bb      	ldr	r3, [r7, #8]
 8011596:	4013      	ands	r3, r2
 8011598:	68ba      	ldr	r2, [r7, #8]
 801159a:	429a      	cmp	r2, r3
 801159c:	bf0c      	ite	eq
 801159e:	2301      	moveq	r3, #1
 80115a0:	2300      	movne	r3, #0
 80115a2:	b2db      	uxtb	r3, r3
 80115a4:	461a      	mov	r2, r3
 80115a6:	79fb      	ldrb	r3, [r7, #7]
 80115a8:	429a      	cmp	r2, r3
 80115aa:	d0a0      	beq.n	80114ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80115ac:	2300      	movs	r3, #0
}
 80115ae:	4618      	mov	r0, r3
 80115b0:	3710      	adds	r7, #16
 80115b2:	46bd      	mov	sp, r7
 80115b4:	bd80      	pop	{r7, pc}
	...

080115b8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80115b8:	b580      	push	{r7, lr}
 80115ba:	b096      	sub	sp, #88	@ 0x58
 80115bc:	af00      	add	r7, sp, #0
 80115be:	60f8      	str	r0, [r7, #12]
 80115c0:	60b9      	str	r1, [r7, #8]
 80115c2:	4613      	mov	r3, r2
 80115c4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80115c6:	68fb      	ldr	r3, [r7, #12]
 80115c8:	68ba      	ldr	r2, [r7, #8]
 80115ca:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 80115cc:	68fb      	ldr	r3, [r7, #12]
 80115ce:	88fa      	ldrh	r2, [r7, #6]
 80115d0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80115d4:	68fb      	ldr	r3, [r7, #12]
 80115d6:	2200      	movs	r2, #0
 80115d8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80115dc:	68fb      	ldr	r3, [r7, #12]
 80115de:	2222      	movs	r2, #34	@ 0x22
 80115e0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 80115e4:	68fb      	ldr	r3, [r7, #12]
 80115e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80115ea:	2b00      	cmp	r3, #0
 80115ec:	d02d      	beq.n	801164a <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80115ee:	68fb      	ldr	r3, [r7, #12]
 80115f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80115f4:	4a40      	ldr	r2, [pc, #256]	@ (80116f8 <UART_Start_Receive_DMA+0x140>)
 80115f6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80115f8:	68fb      	ldr	r3, [r7, #12]
 80115fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80115fe:	4a3f      	ldr	r2, [pc, #252]	@ (80116fc <UART_Start_Receive_DMA+0x144>)
 8011600:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8011602:	68fb      	ldr	r3, [r7, #12]
 8011604:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011608:	4a3d      	ldr	r2, [pc, #244]	@ (8011700 <UART_Start_Receive_DMA+0x148>)
 801160a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 801160c:	68fb      	ldr	r3, [r7, #12]
 801160e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011612:	2200      	movs	r2, #0
 8011614:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8011616:	68fb      	ldr	r3, [r7, #12]
 8011618:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 801161c:	68fb      	ldr	r3, [r7, #12]
 801161e:	681b      	ldr	r3, [r3, #0]
 8011620:	3324      	adds	r3, #36	@ 0x24
 8011622:	4619      	mov	r1, r3
 8011624:	68fb      	ldr	r3, [r7, #12]
 8011626:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011628:	461a      	mov	r2, r3
 801162a:	88fb      	ldrh	r3, [r7, #6]
 801162c:	f7fa ff3c 	bl	800c4a8 <HAL_DMA_Start_IT>
 8011630:	4603      	mov	r3, r0
 8011632:	2b00      	cmp	r3, #0
 8011634:	d009      	beq.n	801164a <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8011636:	68fb      	ldr	r3, [r7, #12]
 8011638:	2210      	movs	r2, #16
 801163a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 801163e:	68fb      	ldr	r3, [r7, #12]
 8011640:	2220      	movs	r2, #32
 8011642:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8011646:	2301      	movs	r3, #1
 8011648:	e051      	b.n	80116ee <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 801164a:	68fb      	ldr	r3, [r7, #12]
 801164c:	691b      	ldr	r3, [r3, #16]
 801164e:	2b00      	cmp	r3, #0
 8011650:	d018      	beq.n	8011684 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011652:	68fb      	ldr	r3, [r7, #12]
 8011654:	681b      	ldr	r3, [r3, #0]
 8011656:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011658:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801165a:	e853 3f00 	ldrex	r3, [r3]
 801165e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8011660:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011662:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8011666:	657b      	str	r3, [r7, #84]	@ 0x54
 8011668:	68fb      	ldr	r3, [r7, #12]
 801166a:	681b      	ldr	r3, [r3, #0]
 801166c:	461a      	mov	r2, r3
 801166e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011670:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011672:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011674:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8011676:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011678:	e841 2300 	strex	r3, r2, [r1]
 801167c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 801167e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011680:	2b00      	cmp	r3, #0
 8011682:	d1e6      	bne.n	8011652 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011684:	68fb      	ldr	r3, [r7, #12]
 8011686:	681b      	ldr	r3, [r3, #0]
 8011688:	3308      	adds	r3, #8
 801168a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801168c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801168e:	e853 3f00 	ldrex	r3, [r3]
 8011692:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8011694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011696:	f043 0301 	orr.w	r3, r3, #1
 801169a:	653b      	str	r3, [r7, #80]	@ 0x50
 801169c:	68fb      	ldr	r3, [r7, #12]
 801169e:	681b      	ldr	r3, [r3, #0]
 80116a0:	3308      	adds	r3, #8
 80116a2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80116a4:	637a      	str	r2, [r7, #52]	@ 0x34
 80116a6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80116a8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80116aa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80116ac:	e841 2300 	strex	r3, r2, [r1]
 80116b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80116b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	d1e5      	bne.n	8011684 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80116b8:	68fb      	ldr	r3, [r7, #12]
 80116ba:	681b      	ldr	r3, [r3, #0]
 80116bc:	3308      	adds	r3, #8
 80116be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80116c0:	697b      	ldr	r3, [r7, #20]
 80116c2:	e853 3f00 	ldrex	r3, [r3]
 80116c6:	613b      	str	r3, [r7, #16]
   return(result);
 80116c8:	693b      	ldr	r3, [r7, #16]
 80116ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80116ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80116d0:	68fb      	ldr	r3, [r7, #12]
 80116d2:	681b      	ldr	r3, [r3, #0]
 80116d4:	3308      	adds	r3, #8
 80116d6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80116d8:	623a      	str	r2, [r7, #32]
 80116da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80116dc:	69f9      	ldr	r1, [r7, #28]
 80116de:	6a3a      	ldr	r2, [r7, #32]
 80116e0:	e841 2300 	strex	r3, r2, [r1]
 80116e4:	61bb      	str	r3, [r7, #24]
   return(result);
 80116e6:	69bb      	ldr	r3, [r7, #24]
 80116e8:	2b00      	cmp	r3, #0
 80116ea:	d1e5      	bne.n	80116b8 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 80116ec:	2300      	movs	r3, #0
}
 80116ee:	4618      	mov	r0, r3
 80116f0:	3758      	adds	r7, #88	@ 0x58
 80116f2:	46bd      	mov	sp, r7
 80116f4:	bd80      	pop	{r7, pc}
 80116f6:	bf00      	nop
 80116f8:	08011911 	.word	0x08011911
 80116fc:	08011a45 	.word	0x08011a45
 8011700:	08011a8b 	.word	0x08011a8b

08011704 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8011704:	b480      	push	{r7}
 8011706:	b08f      	sub	sp, #60	@ 0x3c
 8011708:	af00      	add	r7, sp, #0
 801170a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	681b      	ldr	r3, [r3, #0]
 8011710:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011712:	6a3b      	ldr	r3, [r7, #32]
 8011714:	e853 3f00 	ldrex	r3, [r3]
 8011718:	61fb      	str	r3, [r7, #28]
   return(result);
 801171a:	69fb      	ldr	r3, [r7, #28]
 801171c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8011720:	637b      	str	r3, [r7, #52]	@ 0x34
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	681b      	ldr	r3, [r3, #0]
 8011726:	461a      	mov	r2, r3
 8011728:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801172a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801172c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801172e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011730:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011732:	e841 2300 	strex	r3, r2, [r1]
 8011736:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8011738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801173a:	2b00      	cmp	r3, #0
 801173c:	d1e6      	bne.n	801170c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	681b      	ldr	r3, [r3, #0]
 8011742:	3308      	adds	r3, #8
 8011744:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011746:	68fb      	ldr	r3, [r7, #12]
 8011748:	e853 3f00 	ldrex	r3, [r3]
 801174c:	60bb      	str	r3, [r7, #8]
   return(result);
 801174e:	68bb      	ldr	r3, [r7, #8]
 8011750:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8011754:	633b      	str	r3, [r7, #48]	@ 0x30
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	681b      	ldr	r3, [r3, #0]
 801175a:	3308      	adds	r3, #8
 801175c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801175e:	61ba      	str	r2, [r7, #24]
 8011760:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011762:	6979      	ldr	r1, [r7, #20]
 8011764:	69ba      	ldr	r2, [r7, #24]
 8011766:	e841 2300 	strex	r3, r2, [r1]
 801176a:	613b      	str	r3, [r7, #16]
   return(result);
 801176c:	693b      	ldr	r3, [r7, #16]
 801176e:	2b00      	cmp	r3, #0
 8011770:	d1e5      	bne.n	801173e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	2220      	movs	r2, #32
 8011776:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 801177a:	bf00      	nop
 801177c:	373c      	adds	r7, #60	@ 0x3c
 801177e:	46bd      	mov	sp, r7
 8011780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011784:	4770      	bx	lr

08011786 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011786:	b480      	push	{r7}
 8011788:	b095      	sub	sp, #84	@ 0x54
 801178a:	af00      	add	r7, sp, #0
 801178c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	681b      	ldr	r3, [r3, #0]
 8011792:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011794:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011796:	e853 3f00 	ldrex	r3, [r3]
 801179a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801179c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801179e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80117a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	681b      	ldr	r3, [r3, #0]
 80117a8:	461a      	mov	r2, r3
 80117aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80117ac:	643b      	str	r3, [r7, #64]	@ 0x40
 80117ae:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80117b0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80117b2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80117b4:	e841 2300 	strex	r3, r2, [r1]
 80117b8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80117ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80117bc:	2b00      	cmp	r3, #0
 80117be:	d1e6      	bne.n	801178e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	681b      	ldr	r3, [r3, #0]
 80117c4:	3308      	adds	r3, #8
 80117c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80117c8:	6a3b      	ldr	r3, [r7, #32]
 80117ca:	e853 3f00 	ldrex	r3, [r3]
 80117ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80117d0:	69fb      	ldr	r3, [r7, #28]
 80117d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80117d6:	f023 0301 	bic.w	r3, r3, #1
 80117da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	681b      	ldr	r3, [r3, #0]
 80117e0:	3308      	adds	r3, #8
 80117e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80117e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80117e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80117e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80117ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80117ec:	e841 2300 	strex	r3, r2, [r1]
 80117f0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80117f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80117f4:	2b00      	cmp	r3, #0
 80117f6:	d1e3      	bne.n	80117c0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80117fc:	2b01      	cmp	r3, #1
 80117fe:	d118      	bne.n	8011832 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	681b      	ldr	r3, [r3, #0]
 8011804:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011806:	68fb      	ldr	r3, [r7, #12]
 8011808:	e853 3f00 	ldrex	r3, [r3]
 801180c:	60bb      	str	r3, [r7, #8]
   return(result);
 801180e:	68bb      	ldr	r3, [r7, #8]
 8011810:	f023 0310 	bic.w	r3, r3, #16
 8011814:	647b      	str	r3, [r7, #68]	@ 0x44
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	681b      	ldr	r3, [r3, #0]
 801181a:	461a      	mov	r2, r3
 801181c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801181e:	61bb      	str	r3, [r7, #24]
 8011820:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011822:	6979      	ldr	r1, [r7, #20]
 8011824:	69ba      	ldr	r2, [r7, #24]
 8011826:	e841 2300 	strex	r3, r2, [r1]
 801182a:	613b      	str	r3, [r7, #16]
   return(result);
 801182c:	693b      	ldr	r3, [r7, #16]
 801182e:	2b00      	cmp	r3, #0
 8011830:	d1e6      	bne.n	8011800 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	2220      	movs	r2, #32
 8011836:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	2200      	movs	r2, #0
 801183e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	2200      	movs	r2, #0
 8011844:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8011846:	bf00      	nop
 8011848:	3754      	adds	r7, #84	@ 0x54
 801184a:	46bd      	mov	sp, r7
 801184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011850:	4770      	bx	lr

08011852 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8011852:	b580      	push	{r7, lr}
 8011854:	b090      	sub	sp, #64	@ 0x40
 8011856:	af00      	add	r7, sp, #0
 8011858:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801185e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	681b      	ldr	r3, [r3, #0]
 8011864:	681b      	ldr	r3, [r3, #0]
 8011866:	f003 0320 	and.w	r3, r3, #32
 801186a:	2b00      	cmp	r3, #0
 801186c:	d137      	bne.n	80118de <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 801186e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011870:	2200      	movs	r2, #0
 8011872:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8011876:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011878:	681b      	ldr	r3, [r3, #0]
 801187a:	3308      	adds	r3, #8
 801187c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801187e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011880:	e853 3f00 	ldrex	r3, [r3]
 8011884:	623b      	str	r3, [r7, #32]
   return(result);
 8011886:	6a3b      	ldr	r3, [r7, #32]
 8011888:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801188c:	63bb      	str	r3, [r7, #56]	@ 0x38
 801188e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011890:	681b      	ldr	r3, [r3, #0]
 8011892:	3308      	adds	r3, #8
 8011894:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011896:	633a      	str	r2, [r7, #48]	@ 0x30
 8011898:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801189a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801189c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801189e:	e841 2300 	strex	r3, r2, [r1]
 80118a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80118a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80118a6:	2b00      	cmp	r3, #0
 80118a8:	d1e5      	bne.n	8011876 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80118aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80118ac:	681b      	ldr	r3, [r3, #0]
 80118ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80118b0:	693b      	ldr	r3, [r7, #16]
 80118b2:	e853 3f00 	ldrex	r3, [r3]
 80118b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80118b8:	68fb      	ldr	r3, [r7, #12]
 80118ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80118be:	637b      	str	r3, [r7, #52]	@ 0x34
 80118c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80118c2:	681b      	ldr	r3, [r3, #0]
 80118c4:	461a      	mov	r2, r3
 80118c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80118c8:	61fb      	str	r3, [r7, #28]
 80118ca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80118cc:	69b9      	ldr	r1, [r7, #24]
 80118ce:	69fa      	ldr	r2, [r7, #28]
 80118d0:	e841 2300 	strex	r3, r2, [r1]
 80118d4:	617b      	str	r3, [r7, #20]
   return(result);
 80118d6:	697b      	ldr	r3, [r7, #20]
 80118d8:	2b00      	cmp	r3, #0
 80118da:	d1e6      	bne.n	80118aa <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80118dc:	e004      	b.n	80118e8 <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 80118de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80118e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80118e4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80118e6:	4798      	blx	r3
}
 80118e8:	bf00      	nop
 80118ea:	3740      	adds	r7, #64	@ 0x40
 80118ec:	46bd      	mov	sp, r7
 80118ee:	bd80      	pop	{r7, pc}

080118f0 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80118f0:	b580      	push	{r7, lr}
 80118f2:	b084      	sub	sp, #16
 80118f4:	af00      	add	r7, sp, #0
 80118f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80118fc:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 80118fe:	68fb      	ldr	r3, [r7, #12]
 8011900:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8011904:	68f8      	ldr	r0, [r7, #12]
 8011906:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011908:	bf00      	nop
 801190a:	3710      	adds	r7, #16
 801190c:	46bd      	mov	sp, r7
 801190e:	bd80      	pop	{r7, pc}

08011910 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8011910:	b580      	push	{r7, lr}
 8011912:	b09c      	sub	sp, #112	@ 0x70
 8011914:	af00      	add	r7, sp, #0
 8011916:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801191c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	681b      	ldr	r3, [r3, #0]
 8011922:	681b      	ldr	r3, [r3, #0]
 8011924:	f003 0320 	and.w	r3, r3, #32
 8011928:	2b00      	cmp	r3, #0
 801192a:	d171      	bne.n	8011a10 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 801192c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801192e:	2200      	movs	r2, #0
 8011930:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011934:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011936:	681b      	ldr	r3, [r3, #0]
 8011938:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801193a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801193c:	e853 3f00 	ldrex	r3, [r3]
 8011940:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8011942:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011944:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8011948:	66bb      	str	r3, [r7, #104]	@ 0x68
 801194a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801194c:	681b      	ldr	r3, [r3, #0]
 801194e:	461a      	mov	r2, r3
 8011950:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011952:	65bb      	str	r3, [r7, #88]	@ 0x58
 8011954:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011956:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8011958:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801195a:	e841 2300 	strex	r3, r2, [r1]
 801195e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8011960:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011962:	2b00      	cmp	r3, #0
 8011964:	d1e6      	bne.n	8011934 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011966:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011968:	681b      	ldr	r3, [r3, #0]
 801196a:	3308      	adds	r3, #8
 801196c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801196e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011970:	e853 3f00 	ldrex	r3, [r3]
 8011974:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8011976:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011978:	f023 0301 	bic.w	r3, r3, #1
 801197c:	667b      	str	r3, [r7, #100]	@ 0x64
 801197e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011980:	681b      	ldr	r3, [r3, #0]
 8011982:	3308      	adds	r3, #8
 8011984:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8011986:	647a      	str	r2, [r7, #68]	@ 0x44
 8011988:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801198a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801198c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801198e:	e841 2300 	strex	r3, r2, [r1]
 8011992:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8011994:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011996:	2b00      	cmp	r3, #0
 8011998:	d1e5      	bne.n	8011966 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801199a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801199c:	681b      	ldr	r3, [r3, #0]
 801199e:	3308      	adds	r3, #8
 80119a0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80119a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80119a4:	e853 3f00 	ldrex	r3, [r3]
 80119a8:	623b      	str	r3, [r7, #32]
   return(result);
 80119aa:	6a3b      	ldr	r3, [r7, #32]
 80119ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80119b0:	663b      	str	r3, [r7, #96]	@ 0x60
 80119b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80119b4:	681b      	ldr	r3, [r3, #0]
 80119b6:	3308      	adds	r3, #8
 80119b8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80119ba:	633a      	str	r2, [r7, #48]	@ 0x30
 80119bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80119be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80119c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80119c2:	e841 2300 	strex	r3, r2, [r1]
 80119c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80119c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80119ca:	2b00      	cmp	r3, #0
 80119cc:	d1e5      	bne.n	801199a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80119ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80119d0:	2220      	movs	r2, #32
 80119d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80119d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80119d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80119da:	2b01      	cmp	r3, #1
 80119dc:	d118      	bne.n	8011a10 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80119de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80119e0:	681b      	ldr	r3, [r3, #0]
 80119e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80119e4:	693b      	ldr	r3, [r7, #16]
 80119e6:	e853 3f00 	ldrex	r3, [r3]
 80119ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80119ec:	68fb      	ldr	r3, [r7, #12]
 80119ee:	f023 0310 	bic.w	r3, r3, #16
 80119f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80119f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80119f6:	681b      	ldr	r3, [r3, #0]
 80119f8:	461a      	mov	r2, r3
 80119fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80119fc:	61fb      	str	r3, [r7, #28]
 80119fe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a00:	69b9      	ldr	r1, [r7, #24]
 8011a02:	69fa      	ldr	r2, [r7, #28]
 8011a04:	e841 2300 	strex	r3, r2, [r1]
 8011a08:	617b      	str	r3, [r7, #20]
   return(result);
 8011a0a:	697b      	ldr	r3, [r7, #20]
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	d1e6      	bne.n	80119de <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011a10:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011a12:	2200      	movs	r2, #0
 8011a14:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011a16:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011a18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011a1a:	2b01      	cmp	r3, #1
 8011a1c:	d109      	bne.n	8011a32 <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 8011a1e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011a20:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8011a24:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8011a26:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8011a2a:	4611      	mov	r1, r2
 8011a2c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8011a2e:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8011a30:	e004      	b.n	8011a3c <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 8011a32:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011a34:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8011a38:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8011a3a:	4798      	blx	r3
}
 8011a3c:	bf00      	nop
 8011a3e:	3770      	adds	r7, #112	@ 0x70
 8011a40:	46bd      	mov	sp, r7
 8011a42:	bd80      	pop	{r7, pc}

08011a44 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8011a44:	b580      	push	{r7, lr}
 8011a46:	b084      	sub	sp, #16
 8011a48:	af00      	add	r7, sp, #0
 8011a4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011a50:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8011a52:	68fb      	ldr	r3, [r7, #12]
 8011a54:	2201      	movs	r2, #1
 8011a56:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011a58:	68fb      	ldr	r3, [r7, #12]
 8011a5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011a5c:	2b01      	cmp	r3, #1
 8011a5e:	d10b      	bne.n	8011a78 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 8011a60:	68fb      	ldr	r3, [r7, #12]
 8011a62:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8011a66:	68fa      	ldr	r2, [r7, #12]
 8011a68:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8011a6c:	0852      	lsrs	r2, r2, #1
 8011a6e:	b292      	uxth	r2, r2
 8011a70:	4611      	mov	r1, r2
 8011a72:	68f8      	ldr	r0, [r7, #12]
 8011a74:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8011a76:	e004      	b.n	8011a82 <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 8011a78:	68fb      	ldr	r3, [r7, #12]
 8011a7a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8011a7e:	68f8      	ldr	r0, [r7, #12]
 8011a80:	4798      	blx	r3
}
 8011a82:	bf00      	nop
 8011a84:	3710      	adds	r7, #16
 8011a86:	46bd      	mov	sp, r7
 8011a88:	bd80      	pop	{r7, pc}

08011a8a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8011a8a:	b580      	push	{r7, lr}
 8011a8c:	b086      	sub	sp, #24
 8011a8e:	af00      	add	r7, sp, #0
 8011a90:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011a96:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8011a98:	697b      	ldr	r3, [r7, #20]
 8011a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011a9e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8011aa0:	697b      	ldr	r3, [r7, #20]
 8011aa2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8011aa6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8011aa8:	697b      	ldr	r3, [r7, #20]
 8011aaa:	681b      	ldr	r3, [r3, #0]
 8011aac:	689b      	ldr	r3, [r3, #8]
 8011aae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011ab2:	2b80      	cmp	r3, #128	@ 0x80
 8011ab4:	d109      	bne.n	8011aca <UART_DMAError+0x40>
 8011ab6:	693b      	ldr	r3, [r7, #16]
 8011ab8:	2b21      	cmp	r3, #33	@ 0x21
 8011aba:	d106      	bne.n	8011aca <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8011abc:	697b      	ldr	r3, [r7, #20]
 8011abe:	2200      	movs	r2, #0
 8011ac0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8011ac4:	6978      	ldr	r0, [r7, #20]
 8011ac6:	f7ff fe1d 	bl	8011704 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8011aca:	697b      	ldr	r3, [r7, #20]
 8011acc:	681b      	ldr	r3, [r3, #0]
 8011ace:	689b      	ldr	r3, [r3, #8]
 8011ad0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011ad4:	2b40      	cmp	r3, #64	@ 0x40
 8011ad6:	d109      	bne.n	8011aec <UART_DMAError+0x62>
 8011ad8:	68fb      	ldr	r3, [r7, #12]
 8011ada:	2b22      	cmp	r3, #34	@ 0x22
 8011adc:	d106      	bne.n	8011aec <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8011ade:	697b      	ldr	r3, [r7, #20]
 8011ae0:	2200      	movs	r2, #0
 8011ae2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8011ae6:	6978      	ldr	r0, [r7, #20]
 8011ae8:	f7ff fe4d 	bl	8011786 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8011aec:	697b      	ldr	r3, [r7, #20]
 8011aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011af2:	f043 0210 	orr.w	r2, r3, #16
 8011af6:	697b      	ldr	r3, [r7, #20]
 8011af8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8011afc:	697b      	ldr	r3, [r7, #20]
 8011afe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8011b02:	6978      	ldr	r0, [r7, #20]
 8011b04:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011b06:	bf00      	nop
 8011b08:	3718      	adds	r7, #24
 8011b0a:	46bd      	mov	sp, r7
 8011b0c:	bd80      	pop	{r7, pc}

08011b0e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8011b0e:	b580      	push	{r7, lr}
 8011b10:	b084      	sub	sp, #16
 8011b12:	af00      	add	r7, sp, #0
 8011b14:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011b1a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8011b1c:	68fb      	ldr	r3, [r7, #12]
 8011b1e:	2200      	movs	r2, #0
 8011b20:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8011b24:	68fb      	ldr	r3, [r7, #12]
 8011b26:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8011b2a:	68f8      	ldr	r0, [r7, #12]
 8011b2c:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011b2e:	bf00      	nop
 8011b30:	3710      	adds	r7, #16
 8011b32:	46bd      	mov	sp, r7
 8011b34:	bd80      	pop	{r7, pc}

08011b36 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8011b36:	b580      	push	{r7, lr}
 8011b38:	b088      	sub	sp, #32
 8011b3a:	af00      	add	r7, sp, #0
 8011b3c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	681b      	ldr	r3, [r3, #0]
 8011b42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b44:	68fb      	ldr	r3, [r7, #12]
 8011b46:	e853 3f00 	ldrex	r3, [r3]
 8011b4a:	60bb      	str	r3, [r7, #8]
   return(result);
 8011b4c:	68bb      	ldr	r3, [r7, #8]
 8011b4e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011b52:	61fb      	str	r3, [r7, #28]
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	681b      	ldr	r3, [r3, #0]
 8011b58:	461a      	mov	r2, r3
 8011b5a:	69fb      	ldr	r3, [r7, #28]
 8011b5c:	61bb      	str	r3, [r7, #24]
 8011b5e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b60:	6979      	ldr	r1, [r7, #20]
 8011b62:	69ba      	ldr	r2, [r7, #24]
 8011b64:	e841 2300 	strex	r3, r2, [r1]
 8011b68:	613b      	str	r3, [r7, #16]
   return(result);
 8011b6a:	693b      	ldr	r3, [r7, #16]
 8011b6c:	2b00      	cmp	r3, #0
 8011b6e:	d1e6      	bne.n	8011b3e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	2220      	movs	r2, #32
 8011b74:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	2200      	movs	r2, #0
 8011b7c:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8011b84:	6878      	ldr	r0, [r7, #4]
 8011b86:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011b88:	bf00      	nop
 8011b8a:	3720      	adds	r7, #32
 8011b8c:	46bd      	mov	sp, r7
 8011b8e:	bd80      	pop	{r7, pc}

08011b90 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8011b90:	b480      	push	{r7}
 8011b92:	b083      	sub	sp, #12
 8011b94:	af00      	add	r7, sp, #0
 8011b96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8011b98:	bf00      	nop
 8011b9a:	370c      	adds	r7, #12
 8011b9c:	46bd      	mov	sp, r7
 8011b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ba2:	4770      	bx	lr

08011ba4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8011ba4:	b480      	push	{r7}
 8011ba6:	b083      	sub	sp, #12
 8011ba8:	af00      	add	r7, sp, #0
 8011baa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8011bac:	bf00      	nop
 8011bae:	370c      	adds	r7, #12
 8011bb0:	46bd      	mov	sp, r7
 8011bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bb6:	4770      	bx	lr

08011bb8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8011bb8:	b480      	push	{r7}
 8011bba:	b083      	sub	sp, #12
 8011bbc:	af00      	add	r7, sp, #0
 8011bbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8011bc0:	bf00      	nop
 8011bc2:	370c      	adds	r7, #12
 8011bc4:	46bd      	mov	sp, r7
 8011bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bca:	4770      	bx	lr

08011bcc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8011bcc:	b480      	push	{r7}
 8011bce:	b085      	sub	sp, #20
 8011bd0:	af00      	add	r7, sp, #0
 8011bd2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8011bda:	2b01      	cmp	r3, #1
 8011bdc:	d101      	bne.n	8011be2 <HAL_UARTEx_DisableFifoMode+0x16>
 8011bde:	2302      	movs	r3, #2
 8011be0:	e027      	b.n	8011c32 <HAL_UARTEx_DisableFifoMode+0x66>
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	2201      	movs	r2, #1
 8011be6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	2224      	movs	r2, #36	@ 0x24
 8011bee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011bf2:	687b      	ldr	r3, [r7, #4]
 8011bf4:	681b      	ldr	r3, [r3, #0]
 8011bf6:	681b      	ldr	r3, [r3, #0]
 8011bf8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	681b      	ldr	r3, [r3, #0]
 8011bfe:	681a      	ldr	r2, [r3, #0]
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	681b      	ldr	r3, [r3, #0]
 8011c04:	f022 0201 	bic.w	r2, r2, #1
 8011c08:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8011c0a:	68fb      	ldr	r3, [r7, #12]
 8011c0c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8011c10:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	2200      	movs	r2, #0
 8011c16:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	681b      	ldr	r3, [r3, #0]
 8011c1c:	68fa      	ldr	r2, [r7, #12]
 8011c1e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	2220      	movs	r2, #32
 8011c24:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	2200      	movs	r2, #0
 8011c2c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011c30:	2300      	movs	r3, #0
}
 8011c32:	4618      	mov	r0, r3
 8011c34:	3714      	adds	r7, #20
 8011c36:	46bd      	mov	sp, r7
 8011c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c3c:	4770      	bx	lr

08011c3e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011c3e:	b580      	push	{r7, lr}
 8011c40:	b084      	sub	sp, #16
 8011c42:	af00      	add	r7, sp, #0
 8011c44:	6078      	str	r0, [r7, #4]
 8011c46:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8011c4e:	2b01      	cmp	r3, #1
 8011c50:	d101      	bne.n	8011c56 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8011c52:	2302      	movs	r3, #2
 8011c54:	e02d      	b.n	8011cb2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	2201      	movs	r2, #1
 8011c5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	2224      	movs	r2, #36	@ 0x24
 8011c62:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	681b      	ldr	r3, [r3, #0]
 8011c6a:	681b      	ldr	r3, [r3, #0]
 8011c6c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	681b      	ldr	r3, [r3, #0]
 8011c72:	681a      	ldr	r2, [r3, #0]
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	681b      	ldr	r3, [r3, #0]
 8011c78:	f022 0201 	bic.w	r2, r2, #1
 8011c7c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	681b      	ldr	r3, [r3, #0]
 8011c82:	689b      	ldr	r3, [r3, #8]
 8011c84:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	681b      	ldr	r3, [r3, #0]
 8011c8c:	683a      	ldr	r2, [r7, #0]
 8011c8e:	430a      	orrs	r2, r1
 8011c90:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011c92:	6878      	ldr	r0, [r7, #4]
 8011c94:	f000 f850 	bl	8011d38 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	681b      	ldr	r3, [r3, #0]
 8011c9c:	68fa      	ldr	r2, [r7, #12]
 8011c9e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	2220      	movs	r2, #32
 8011ca4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	2200      	movs	r2, #0
 8011cac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011cb0:	2300      	movs	r3, #0
}
 8011cb2:	4618      	mov	r0, r3
 8011cb4:	3710      	adds	r7, #16
 8011cb6:	46bd      	mov	sp, r7
 8011cb8:	bd80      	pop	{r7, pc}

08011cba <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011cba:	b580      	push	{r7, lr}
 8011cbc:	b084      	sub	sp, #16
 8011cbe:	af00      	add	r7, sp, #0
 8011cc0:	6078      	str	r0, [r7, #4]
 8011cc2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8011cca:	2b01      	cmp	r3, #1
 8011ccc:	d101      	bne.n	8011cd2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8011cce:	2302      	movs	r3, #2
 8011cd0:	e02d      	b.n	8011d2e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	2201      	movs	r2, #1
 8011cd6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	2224      	movs	r2, #36	@ 0x24
 8011cde:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	681b      	ldr	r3, [r3, #0]
 8011ce6:	681b      	ldr	r3, [r3, #0]
 8011ce8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011cea:	687b      	ldr	r3, [r7, #4]
 8011cec:	681b      	ldr	r3, [r3, #0]
 8011cee:	681a      	ldr	r2, [r3, #0]
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	681b      	ldr	r3, [r3, #0]
 8011cf4:	f022 0201 	bic.w	r2, r2, #1
 8011cf8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	681b      	ldr	r3, [r3, #0]
 8011cfe:	689b      	ldr	r3, [r3, #8]
 8011d00:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	681b      	ldr	r3, [r3, #0]
 8011d08:	683a      	ldr	r2, [r7, #0]
 8011d0a:	430a      	orrs	r2, r1
 8011d0c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011d0e:	6878      	ldr	r0, [r7, #4]
 8011d10:	f000 f812 	bl	8011d38 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	681b      	ldr	r3, [r3, #0]
 8011d18:	68fa      	ldr	r2, [r7, #12]
 8011d1a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	2220      	movs	r2, #32
 8011d20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	2200      	movs	r2, #0
 8011d28:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011d2c:	2300      	movs	r3, #0
}
 8011d2e:	4618      	mov	r0, r3
 8011d30:	3710      	adds	r7, #16
 8011d32:	46bd      	mov	sp, r7
 8011d34:	bd80      	pop	{r7, pc}
	...

08011d38 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8011d38:	b480      	push	{r7}
 8011d3a:	b085      	sub	sp, #20
 8011d3c:	af00      	add	r7, sp, #0
 8011d3e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8011d40:	687b      	ldr	r3, [r7, #4]
 8011d42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011d44:	2b00      	cmp	r3, #0
 8011d46:	d108      	bne.n	8011d5a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	2201      	movs	r2, #1
 8011d4c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	2201      	movs	r2, #1
 8011d54:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8011d58:	e031      	b.n	8011dbe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8011d5a:	2308      	movs	r3, #8
 8011d5c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8011d5e:	2308      	movs	r3, #8
 8011d60:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	681b      	ldr	r3, [r3, #0]
 8011d66:	689b      	ldr	r3, [r3, #8]
 8011d68:	0e5b      	lsrs	r3, r3, #25
 8011d6a:	b2db      	uxtb	r3, r3
 8011d6c:	f003 0307 	and.w	r3, r3, #7
 8011d70:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	681b      	ldr	r3, [r3, #0]
 8011d76:	689b      	ldr	r3, [r3, #8]
 8011d78:	0f5b      	lsrs	r3, r3, #29
 8011d7a:	b2db      	uxtb	r3, r3
 8011d7c:	f003 0307 	and.w	r3, r3, #7
 8011d80:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011d82:	7bbb      	ldrb	r3, [r7, #14]
 8011d84:	7b3a      	ldrb	r2, [r7, #12]
 8011d86:	4911      	ldr	r1, [pc, #68]	@ (8011dcc <UARTEx_SetNbDataToProcess+0x94>)
 8011d88:	5c8a      	ldrb	r2, [r1, r2]
 8011d8a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8011d8e:	7b3a      	ldrb	r2, [r7, #12]
 8011d90:	490f      	ldr	r1, [pc, #60]	@ (8011dd0 <UARTEx_SetNbDataToProcess+0x98>)
 8011d92:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011d94:	fb93 f3f2 	sdiv	r3, r3, r2
 8011d98:	b29a      	uxth	r2, r3
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011da0:	7bfb      	ldrb	r3, [r7, #15]
 8011da2:	7b7a      	ldrb	r2, [r7, #13]
 8011da4:	4909      	ldr	r1, [pc, #36]	@ (8011dcc <UARTEx_SetNbDataToProcess+0x94>)
 8011da6:	5c8a      	ldrb	r2, [r1, r2]
 8011da8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8011dac:	7b7a      	ldrb	r2, [r7, #13]
 8011dae:	4908      	ldr	r1, [pc, #32]	@ (8011dd0 <UARTEx_SetNbDataToProcess+0x98>)
 8011db0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011db2:	fb93 f3f2 	sdiv	r3, r3, r2
 8011db6:	b29a      	uxth	r2, r3
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8011dbe:	bf00      	nop
 8011dc0:	3714      	adds	r7, #20
 8011dc2:	46bd      	mov	sp, r7
 8011dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dc8:	4770      	bx	lr
 8011dca:	bf00      	nop
 8011dcc:	08014868 	.word	0x08014868
 8011dd0:	08014870 	.word	0x08014870

08011dd4 <arm_mat_add_f32>:
#else
arm_status arm_mat_add_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 8011dd4:	b480      	push	{r7}
 8011dd6:	b08b      	sub	sp, #44	@ 0x2c
 8011dd8:	af00      	add	r7, sp, #0
 8011dda:	60f8      	str	r0, [r7, #12]
 8011ddc:	60b9      	str	r1, [r7, #8]
 8011dde:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 8011de0:	68fb      	ldr	r3, [r7, #12]
 8011de2:	685b      	ldr	r3, [r3, #4]
 8011de4:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 8011de6:	68bb      	ldr	r3, [r7, #8]
 8011de8:	685b      	ldr	r3, [r3, #4]
 8011dea:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	685b      	ldr	r3, [r3, #4]
 8011df0:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 8011df2:	68fb      	ldr	r3, [r7, #12]
 8011df4:	881b      	ldrh	r3, [r3, #0]
 8011df6:	461a      	mov	r2, r3
 8011df8:	68fb      	ldr	r3, [r7, #12]
 8011dfa:	885b      	ldrh	r3, [r3, #2]
 8011dfc:	fb02 f303 	mul.w	r3, r2, r3
 8011e00:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 8011e02:	697b      	ldr	r3, [r7, #20]
 8011e04:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 8011e06:	e013      	b.n	8011e30 <arm_mat_add_f32+0x5c>
    {
      /* C(m,n) = A(m,n) + B(m,n) */

      /* Add and store result in destination buffer. */
      *pOut++ = *pInA++ + *pInB++;
 8011e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e0a:	1d1a      	adds	r2, r3, #4
 8011e0c:	627a      	str	r2, [r7, #36]	@ 0x24
 8011e0e:	ed93 7a00 	vldr	s14, [r3]
 8011e12:	6a3b      	ldr	r3, [r7, #32]
 8011e14:	1d1a      	adds	r2, r3, #4
 8011e16:	623a      	str	r2, [r7, #32]
 8011e18:	edd3 7a00 	vldr	s15, [r3]
 8011e1c:	69fb      	ldr	r3, [r7, #28]
 8011e1e:	1d1a      	adds	r2, r3, #4
 8011e20:	61fa      	str	r2, [r7, #28]
 8011e22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011e26:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 8011e2a:	69bb      	ldr	r3, [r7, #24]
 8011e2c:	3b01      	subs	r3, #1
 8011e2e:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 8011e30:	69bb      	ldr	r3, [r7, #24]
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	d1e8      	bne.n	8011e08 <arm_mat_add_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8011e36:	2300      	movs	r3, #0
 8011e38:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 8011e3a:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8011e3e:	4618      	mov	r0, r3
 8011e40:	372c      	adds	r7, #44	@ 0x2c
 8011e42:	46bd      	mov	sp, r7
 8011e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e48:	4770      	bx	lr

08011e4a <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 8011e4a:	b480      	push	{r7}
 8011e4c:	b085      	sub	sp, #20
 8011e4e:	af00      	add	r7, sp, #0
 8011e50:	60f8      	str	r0, [r7, #12]
 8011e52:	607b      	str	r3, [r7, #4]
 8011e54:	460b      	mov	r3, r1
 8011e56:	817b      	strh	r3, [r7, #10]
 8011e58:	4613      	mov	r3, r2
 8011e5a:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 8011e5c:	68fb      	ldr	r3, [r7, #12]
 8011e5e:	897a      	ldrh	r2, [r7, #10]
 8011e60:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 8011e62:	68fb      	ldr	r3, [r7, #12]
 8011e64:	893a      	ldrh	r2, [r7, #8]
 8011e66:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 8011e68:	68fb      	ldr	r3, [r7, #12]
 8011e6a:	687a      	ldr	r2, [r7, #4]
 8011e6c:	605a      	str	r2, [r3, #4]
}
 8011e6e:	bf00      	nop
 8011e70:	3714      	adds	r7, #20
 8011e72:	46bd      	mov	sp, r7
 8011e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e78:	4770      	bx	lr

08011e7a <arm_mat_inverse_f32>:
                   - \ref ARM_MATH_SINGULAR      : Input matrix is found to be singular (non-invertible)
 */
arm_status arm_mat_inverse_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 8011e7a:	b480      	push	{r7}
 8011e7c:	b0bb      	sub	sp, #236	@ 0xec
 8011e7e:	af00      	add	r7, sp, #0
 8011e80:	6078      	str	r0, [r7, #4]
 8011e82:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	685b      	ldr	r3, [r3, #4]
 8011e88:	667b      	str	r3, [r7, #100]	@ 0x64
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8011e8a:	683b      	ldr	r3, [r7, #0]
 8011e8c:	685b      	ldr	r3, [r3, #4]
 8011e8e:	663b      	str	r3, [r7, #96]	@ 0x60
  
  float32_t *pTmp;
  uint32_t numRows = pSrc->numRows;              /* Number of rows in the matrix  */
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	881b      	ldrh	r3, [r3, #0]
 8011e94:	65fb      	str	r3, [r7, #92]	@ 0x5c
  uint32_t numCols = pSrc->numCols;              /* Number of Cols in the matrix  */
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	885b      	ldrh	r3, [r3, #2]
 8011e9a:	65bb      	str	r3, [r7, #88]	@ 0x58


  float32_t pivot = 0.0f, newPivot=0.0f;                /* Temporary input values  */
 8011e9c:	f04f 0300 	mov.w	r3, #0
 8011ea0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8011ea4:	f04f 0300 	mov.w	r3, #0
 8011ea8:	657b      	str	r3, [r7, #84]	@ 0x54
  uint32_t selectedRow,pivotRow,i, rowNb, rowCnt, flag = 0U, j,column;      /* loop counters */
 8011eaa:	2300      	movs	r3, #0
 8011eac:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
     *      8. Now an identical matrix is formed to the left of the bar(input matrix, pSrc).
     *         Therefore, the matrix to the right of the bar is our solution(pDst matrix, pDst).
     *----------------------------------------------------------------------------------------------------------------*/

    /* Working pointer for destination matrix */
    pTmp = pOut;
 8011eb0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011eb2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

    /* Loop over the number of rows */
    rowCnt = numRows;
 8011eb6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011eb8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

    /* Making the destination matrix as identity matrix */
    while (rowCnt > 0U)
 8011ebc:	e03b      	b.n	8011f36 <arm_mat_inverse_f32+0xbc>
    {
      /* Writing all zeroes in lower triangle of the destination matrix */
      j = numRows - rowCnt;
 8011ebe:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8011ec0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8011ec4:	1ad3      	subs	r3, r2, r3
 8011ec6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 8011eca:	e00c      	b.n	8011ee6 <arm_mat_inverse_f32+0x6c>
      {
        *pTmp++ = 0.0f;
 8011ecc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011ed0:	1d1a      	adds	r2, r3, #4
 8011ed2:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8011ed6:	f04f 0200 	mov.w	r2, #0
 8011eda:	601a      	str	r2, [r3, #0]
        j--;
 8011edc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8011ee0:	3b01      	subs	r3, #1
 8011ee2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 8011ee6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8011eea:	2b00      	cmp	r3, #0
 8011eec:	d1ee      	bne.n	8011ecc <arm_mat_inverse_f32+0x52>
      }

      /* Writing all ones in the diagonal of the destination matrix */
      *pTmp++ = 1.0f;
 8011eee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011ef2:	1d1a      	adds	r2, r3, #4
 8011ef4:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8011ef8:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8011efc:	601a      	str	r2, [r3, #0]

      /* Writing all zeroes in upper triangle of the destination matrix */
      j = rowCnt - 1U;
 8011efe:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8011f02:	3b01      	subs	r3, #1
 8011f04:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 8011f08:	e00c      	b.n	8011f24 <arm_mat_inverse_f32+0xaa>
      {
        *pTmp++ = 0.0f;
 8011f0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011f0e:	1d1a      	adds	r2, r3, #4
 8011f10:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8011f14:	f04f 0200 	mov.w	r2, #0
 8011f18:	601a      	str	r2, [r3, #0]
        j--;
 8011f1a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8011f1e:	3b01      	subs	r3, #1
 8011f20:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 8011f24:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8011f28:	2b00      	cmp	r3, #0
 8011f2a:	d1ee      	bne.n	8011f0a <arm_mat_inverse_f32+0x90>
      }

      /* Decrement loop counter */
      rowCnt--;
 8011f2c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8011f30:	3b01      	subs	r3, #1
 8011f32:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    while (rowCnt > 0U)
 8011f36:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8011f3a:	2b00      	cmp	r3, #0
 8011f3c:	d1bf      	bne.n	8011ebe <arm_mat_inverse_f32+0x44>

    /* Loop over the number of columns of the input matrix.
       All the elements in each column are processed by the row operations */

    /* Index modifier to navigate through the columns */
    for(column = 0U; column < numCols; column++)
 8011f3e:	2300      	movs	r3, #0
 8011f40:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8011f44:	e2c7      	b.n	80124d6 <arm_mat_inverse_f32+0x65c>
      /* Check if the pivot element is zero..
       * If it is zero then interchange the row with non zero row below.
       * If there is no non zero element to replace in the rows below,
       * then the matrix is Singular. */

      pivotRow = column;
 8011f46:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8011f4a:	653b      	str	r3, [r7, #80]	@ 0x50

      /* Temporary variable to hold the pivot value */
      pTmp = ELEM(pSrc,column,column) ;
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	685a      	ldr	r2, [r3, #4]
 8011f50:	687b      	ldr	r3, [r7, #4]
 8011f52:	885b      	ldrh	r3, [r3, #2]
 8011f54:	3301      	adds	r3, #1
 8011f56:	f8d7 10c4 	ldr.w	r1, [r7, #196]	@ 0xc4
 8011f5a:	fb01 f303 	mul.w	r3, r1, r3
 8011f5e:	009b      	lsls	r3, r3, #2
 8011f60:	4413      	add	r3, r2
 8011f62:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
      pivot = *pTmp;
 8011f66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011f6a:	681b      	ldr	r3, [r3, #0]
 8011f6c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      selectedRow = column;
 8011f70:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8011f74:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

      /* Find maximum pivot in column */
      
        /* Loop over the number rows present below */

      for (rowNb = column+1; rowNb < numRows; rowNb++)
 8011f78:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8011f7c:	3301      	adds	r3, #1
 8011f7e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8011f82:	e02c      	b.n	8011fde <arm_mat_inverse_f32+0x164>
      {
          /* Update the input and destination pointers */
          pTmp = ELEM(pSrc,rowNb,column);
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	685a      	ldr	r2, [r3, #4]
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	885b      	ldrh	r3, [r3, #2]
 8011f8c:	4619      	mov	r1, r3
 8011f8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8011f92:	fb03 f101 	mul.w	r1, r3, r1
 8011f96:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8011f9a:	440b      	add	r3, r1
 8011f9c:	009b      	lsls	r3, r3, #2
 8011f9e:	4413      	add	r3, r2
 8011fa0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
          newPivot = *pTmp;
 8011fa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011fa8:	681b      	ldr	r3, [r3, #0]
 8011faa:	657b      	str	r3, [r7, #84]	@ 0x54
          if (fabsf(newPivot) > fabsf(pivot))
 8011fac:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8011fb0:	eeb0 7ae7 	vabs.f32	s14, s15
 8011fb4:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8011fb8:	eef0 7ae7 	vabs.f32	s15, s15
 8011fbc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011fc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011fc4:	dd06      	ble.n	8011fd4 <arm_mat_inverse_f32+0x15a>
          {
            selectedRow = rowNb; 
 8011fc6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8011fca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
            pivot = newPivot;
 8011fce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011fd0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      for (rowNb = column+1; rowNb < numRows; rowNb++)
 8011fd4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8011fd8:	3301      	adds	r3, #1
 8011fda:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8011fde:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8011fe2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011fe4:	429a      	cmp	r2, r3
 8011fe6:	d3cd      	bcc.n	8011f84 <arm_mat_inverse_f32+0x10a>
          }
      }
        
      /* Check if there is a non zero pivot element to
       * replace in the rows below */
      if ((pivot != 0.0f) && (selectedRow != column))
 8011fe8:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8011fec:	eef5 7a40 	vcmp.f32	s15, #0.0
 8011ff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ff4:	f000 809b 	beq.w	801212e <arm_mat_inverse_f32+0x2b4>
 8011ff8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8011ffc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8012000:	429a      	cmp	r2, r3
 8012002:	f000 8094 	beq.w	801212e <arm_mat_inverse_f32+0x2b4>
      {
            
            SWAP_ROWS_F32(pSrc,column, pivotRow,selectedRow);
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	685b      	ldr	r3, [r3, #4]
 801200a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 801200e:	687b      	ldr	r3, [r7, #4]
 8012010:	685b      	ldr	r3, [r3, #4]
 8012012:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	885b      	ldrh	r3, [r3, #2]
 801201a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801201c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801201e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8012022:	1ad3      	subs	r3, r2, r3
 8012024:	64bb      	str	r3, [r7, #72]	@ 0x48
 8012026:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012028:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801202a:	fb03 f202 	mul.w	r2, r3, r2
 801202e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8012032:	4413      	add	r3, r2
 8012034:	009b      	lsls	r3, r3, #2
 8012036:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 801203a:	4413      	add	r3, r2
 801203c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8012040:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012042:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8012046:	fb03 f202 	mul.w	r2, r3, r2
 801204a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801204e:	4413      	add	r3, r2
 8012050:	009b      	lsls	r3, r3, #2
 8012052:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8012056:	4413      	add	r3, r2
 8012058:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 801205c:	2300      	movs	r3, #0
 801205e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8012062:	e018      	b.n	8012096 <arm_mat_inverse_f32+0x21c>
 8012064:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8012068:	681b      	ldr	r3, [r3, #0]
 801206a:	63bb      	str	r3, [r7, #56]	@ 0x38
 801206c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8012070:	1d1a      	adds	r2, r3, #4
 8012072:	f8c7 20b8 	str.w	r2, [r7, #184]	@ 0xb8
 8012076:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 801207a:	6812      	ldr	r2, [r2, #0]
 801207c:	601a      	str	r2, [r3, #0]
 801207e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8012082:	1d1a      	adds	r2, r3, #4
 8012084:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8012088:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801208a:	601a      	str	r2, [r3, #0]
 801208c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8012090:	3301      	adds	r3, #1
 8012092:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8012096:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 801209a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801209c:	429a      	cmp	r2, r3
 801209e:	dbe1      	blt.n	8012064 <arm_mat_inverse_f32+0x1ea>
            SWAP_ROWS_F32(pDst,0, pivotRow,selectedRow);
 80120a0:	683b      	ldr	r3, [r7, #0]
 80120a2:	685b      	ldr	r3, [r3, #4]
 80120a4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80120a8:	683b      	ldr	r3, [r7, #0]
 80120aa:	685b      	ldr	r3, [r3, #4]
 80120ac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80120b0:	683b      	ldr	r3, [r7, #0]
 80120b2:	885b      	ldrh	r3, [r3, #2]
 80120b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80120b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80120b8:	643b      	str	r3, [r7, #64]	@ 0x40
 80120ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80120bc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80120be:	fb02 f303 	mul.w	r3, r2, r3
 80120c2:	009b      	lsls	r3, r3, #2
 80120c4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80120c8:	4413      	add	r3, r2
 80120ca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80120ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80120d0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80120d4:	fb02 f303 	mul.w	r3, r2, r3
 80120d8:	009b      	lsls	r3, r3, #2
 80120da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80120de:	4413      	add	r3, r2
 80120e0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80120e4:	2300      	movs	r3, #0
 80120e6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80120ea:	e018      	b.n	801211e <arm_mat_inverse_f32+0x2a4>
 80120ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80120f0:	681b      	ldr	r3, [r3, #0]
 80120f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80120f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80120f8:	1d1a      	adds	r2, r3, #4
 80120fa:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80120fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8012102:	6812      	ldr	r2, [r2, #0]
 8012104:	601a      	str	r2, [r3, #0]
 8012106:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801210a:	1d1a      	adds	r2, r3, #4
 801210c:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8012110:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8012112:	601a      	str	r2, [r3, #0]
 8012114:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8012118:	3301      	adds	r3, #1
 801211a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 801211e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8012122:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012124:	429a      	cmp	r2, r3
 8012126:	dbe1      	blt.n	80120ec <arm_mat_inverse_f32+0x272>

    
            /* Flag to indicate whether exchange is done or not */
            flag = 1U;
 8012128:	2301      	movs	r3, #1
 801212a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc

      
      

      /* Update the status if the matrix is singular */
      if ((flag != 1U) && (pivot == 0.0f))
 801212e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8012132:	2b01      	cmp	r3, #1
 8012134:	d009      	beq.n	801214a <arm_mat_inverse_f32+0x2d0>
 8012136:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 801213a:	eef5 7a40 	vcmp.f32	s15, #0.0
 801213e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012142:	d102      	bne.n	801214a <arm_mat_inverse_f32+0x2d0>
      {
        return ARM_MATH_SINGULAR;
 8012144:	f06f 0304 	mvn.w	r3, #4
 8012148:	e208      	b.n	801255c <arm_mat_inverse_f32+0x6e2>
      }

     
      /* Pivot element of the row */
      pivot = 1.0f / pivot;
 801214a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801214e:	ed97 7a38 	vldr	s14, [r7, #224]	@ 0xe0
 8012152:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012156:	edc7 7a38 	vstr	s15, [r7, #224]	@ 0xe0

      SCALE_ROW_F32(pSrc,column,pivot,pivotRow);
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	685b      	ldr	r3, [r3, #4]
 801215e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8012162:	687b      	ldr	r3, [r7, #4]
 8012164:	885b      	ldrh	r3, [r3, #2]
 8012166:	637b      	str	r3, [r7, #52]	@ 0x34
 8012168:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801216a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801216e:	1ad3      	subs	r3, r2, r3
 8012170:	633b      	str	r3, [r7, #48]	@ 0x30
 8012172:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012174:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8012176:	fb03 f202 	mul.w	r2, r3, r2
 801217a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801217e:	4413      	add	r3, r2
 8012180:	009b      	lsls	r3, r3, #2
 8012182:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8012186:	4413      	add	r3, r2
 8012188:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 801218c:	2300      	movs	r3, #0
 801218e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8012192:	e011      	b.n	80121b8 <arm_mat_inverse_f32+0x33e>
 8012194:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8012198:	1d1a      	adds	r2, r3, #4
 801219a:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 801219e:	ed93 7a00 	vldr	s14, [r3]
 80121a2:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 80121a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80121aa:	edc3 7a00 	vstr	s15, [r3]
 80121ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80121b2:	3301      	adds	r3, #1
 80121b4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80121b8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 80121bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80121be:	429a      	cmp	r2, r3
 80121c0:	dbe8      	blt.n	8012194 <arm_mat_inverse_f32+0x31a>
      SCALE_ROW_F32(pDst,0,pivot,pivotRow);
 80121c2:	683b      	ldr	r3, [r7, #0]
 80121c4:	685b      	ldr	r3, [r3, #4]
 80121c6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80121ca:	683b      	ldr	r3, [r7, #0]
 80121cc:	885b      	ldrh	r3, [r3, #2]
 80121ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80121d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80121d2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80121d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80121d6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80121d8:	fb02 f303 	mul.w	r3, r2, r3
 80121dc:	009b      	lsls	r3, r3, #2
 80121de:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80121e2:	4413      	add	r3, r2
 80121e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80121e8:	2300      	movs	r3, #0
 80121ea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80121ee:	e011      	b.n	8012214 <arm_mat_inverse_f32+0x39a>
 80121f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80121f4:	1d1a      	adds	r2, r3, #4
 80121f6:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 80121fa:	ed93 7a00 	vldr	s14, [r3]
 80121fe:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8012202:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012206:	edc3 7a00 	vstr	s15, [r3]
 801220a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801220e:	3301      	adds	r3, #1
 8012210:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8012214:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8012218:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801221a:	429a      	cmp	r2, r3
 801221c:	dbe8      	blt.n	80121f0 <arm_mat_inverse_f32+0x376>

      
      /* Replace the rows with the sum of that row and a multiple of row i
       * so that each new element in column i above row i is zero.*/

      rowNb = 0;
 801221e:	2300      	movs	r3, #0
 8012220:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      for (;rowNb < pivotRow; rowNb++)
 8012224:	e0ae      	b.n	8012384 <arm_mat_inverse_f32+0x50a>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	685a      	ldr	r2, [r3, #4]
 801222a:	687b      	ldr	r3, [r7, #4]
 801222c:	885b      	ldrh	r3, [r3, #2]
 801222e:	4619      	mov	r1, r3
 8012230:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8012234:	fb03 f101 	mul.w	r1, r3, r1
 8012238:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801223c:	440b      	add	r3, r1
 801223e:	009b      	lsls	r3, r3, #2
 8012240:	4413      	add	r3, r2
 8012242:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
           pivot = *pTmp;
 8012246:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801224a:	681b      	ldr	r3, [r3, #0]
 801224c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 8012250:	687b      	ldr	r3, [r7, #4]
 8012252:	685b      	ldr	r3, [r3, #4]
 8012254:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8012258:	687b      	ldr	r3, [r7, #4]
 801225a:	685b      	ldr	r3, [r3, #4]
 801225c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	885b      	ldrh	r3, [r3, #2]
 8012264:	617b      	str	r3, [r7, #20]
 8012266:	697a      	ldr	r2, [r7, #20]
 8012268:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801226c:	1ad3      	subs	r3, r2, r3
 801226e:	613b      	str	r3, [r7, #16]
 8012270:	697b      	ldr	r3, [r7, #20]
 8012272:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8012276:	fb03 f202 	mul.w	r2, r3, r2
 801227a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801227e:	4413      	add	r3, r2
 8012280:	009b      	lsls	r3, r3, #2
 8012282:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8012286:	4413      	add	r3, r2
 8012288:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801228c:	697b      	ldr	r3, [r7, #20]
 801228e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8012290:	fb03 f202 	mul.w	r2, r3, r2
 8012294:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8012298:	4413      	add	r3, r2
 801229a:	009b      	lsls	r3, r3, #2
 801229c:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80122a0:	4413      	add	r3, r2
 80122a2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80122a6:	2300      	movs	r3, #0
 80122a8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80122ac:	e01a      	b.n	80122e4 <arm_mat_inverse_f32+0x46a>
 80122ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80122b2:	1d1a      	adds	r2, r3, #4
 80122b4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80122b8:	ed93 7a00 	vldr	s14, [r3]
 80122bc:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 80122c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80122c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80122c8:	1d1a      	adds	r2, r3, #4
 80122ca:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 80122ce:	ed93 7a00 	vldr	s14, [r3]
 80122d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80122d6:	edc3 7a00 	vstr	s15, [r3]
 80122da:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80122de:	3301      	adds	r3, #1
 80122e0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80122e4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80122e8:	693b      	ldr	r3, [r7, #16]
 80122ea:	429a      	cmp	r2, r3
 80122ec:	dbdf      	blt.n	80122ae <arm_mat_inverse_f32+0x434>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 80122ee:	683b      	ldr	r3, [r7, #0]
 80122f0:	685b      	ldr	r3, [r3, #4]
 80122f2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80122f6:	683b      	ldr	r3, [r7, #0]
 80122f8:	685b      	ldr	r3, [r3, #4]
 80122fa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80122fe:	683b      	ldr	r3, [r7, #0]
 8012300:	885b      	ldrh	r3, [r3, #2]
 8012302:	60fb      	str	r3, [r7, #12]
 8012304:	68fb      	ldr	r3, [r7, #12]
 8012306:	60bb      	str	r3, [r7, #8]
 8012308:	68fb      	ldr	r3, [r7, #12]
 801230a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 801230e:	fb02 f303 	mul.w	r3, r2, r3
 8012312:	009b      	lsls	r3, r3, #2
 8012314:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8012318:	4413      	add	r3, r2
 801231a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801231e:	68fb      	ldr	r3, [r7, #12]
 8012320:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8012322:	fb02 f303 	mul.w	r3, r2, r3
 8012326:	009b      	lsls	r3, r3, #2
 8012328:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801232c:	4413      	add	r3, r2
 801232e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8012332:	2300      	movs	r3, #0
 8012334:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8012338:	e01a      	b.n	8012370 <arm_mat_inverse_f32+0x4f6>
 801233a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801233e:	1d1a      	adds	r2, r3, #4
 8012340:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8012344:	ed93 7a00 	vldr	s14, [r3]
 8012348:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 801234c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012350:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8012354:	1d1a      	adds	r2, r3, #4
 8012356:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 801235a:	ed93 7a00 	vldr	s14, [r3]
 801235e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012362:	edc3 7a00 	vstr	s15, [r3]
 8012366:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801236a:	3301      	adds	r3, #1
 801236c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8012370:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8012374:	68bb      	ldr	r3, [r7, #8]
 8012376:	429a      	cmp	r2, r3
 8012378:	dbdf      	blt.n	801233a <arm_mat_inverse_f32+0x4c0>
      for (;rowNb < pivotRow; rowNb++)
 801237a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801237e:	3301      	adds	r3, #1
 8012380:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8012384:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8012388:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801238a:	429a      	cmp	r2, r3
 801238c:	f4ff af4b 	bcc.w	8012226 <arm_mat_inverse_f32+0x3ac>


      }

      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 8012390:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012392:	3301      	adds	r3, #1
 8012394:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8012398:	e092      	b.n	80124c0 <arm_mat_inverse_f32+0x646>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	685a      	ldr	r2, [r3, #4]
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	885b      	ldrh	r3, [r3, #2]
 80123a2:	4619      	mov	r1, r3
 80123a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80123a8:	fb03 f101 	mul.w	r1, r3, r1
 80123ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80123b0:	440b      	add	r3, r1
 80123b2:	009b      	lsls	r3, r3, #2
 80123b4:	4413      	add	r3, r2
 80123b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
           pivot = *pTmp;
 80123ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80123be:	681b      	ldr	r3, [r3, #0]
 80123c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	685b      	ldr	r3, [r3, #4]
 80123c8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	685b      	ldr	r3, [r3, #4]
 80123ce:	677b      	str	r3, [r7, #116]	@ 0x74
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	885b      	ldrh	r3, [r3, #2]
 80123d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80123d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80123d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80123dc:	1ad3      	subs	r3, r2, r3
 80123de:	623b      	str	r3, [r7, #32]
 80123e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80123e2:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80123e6:	fb03 f202 	mul.w	r2, r3, r2
 80123ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80123ee:	4413      	add	r3, r2
 80123f0:	009b      	lsls	r3, r3, #2
 80123f2:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80123f4:	4413      	add	r3, r2
 80123f6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80123f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80123fa:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80123fc:	fb03 f202 	mul.w	r2, r3, r2
 8012400:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8012404:	4413      	add	r3, r2
 8012406:	009b      	lsls	r3, r3, #2
 8012408:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 801240a:	4413      	add	r3, r2
 801240c:	677b      	str	r3, [r7, #116]	@ 0x74
 801240e:	2300      	movs	r3, #0
 8012410:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8012412:	e014      	b.n	801243e <arm_mat_inverse_f32+0x5c4>
 8012414:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8012416:	1d1a      	adds	r2, r3, #4
 8012418:	677a      	str	r2, [r7, #116]	@ 0x74
 801241a:	ed93 7a00 	vldr	s14, [r3]
 801241e:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8012422:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012426:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012428:	1d1a      	adds	r2, r3, #4
 801242a:	67ba      	str	r2, [r7, #120]	@ 0x78
 801242c:	ed93 7a00 	vldr	s14, [r3]
 8012430:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012434:	edc3 7a00 	vstr	s15, [r3]
 8012438:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801243a:	3301      	adds	r3, #1
 801243c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801243e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8012440:	6a3b      	ldr	r3, [r7, #32]
 8012442:	429a      	cmp	r2, r3
 8012444:	dbe6      	blt.n	8012414 <arm_mat_inverse_f32+0x59a>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 8012446:	683b      	ldr	r3, [r7, #0]
 8012448:	685b      	ldr	r3, [r3, #4]
 801244a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801244c:	683b      	ldr	r3, [r7, #0]
 801244e:	685b      	ldr	r3, [r3, #4]
 8012450:	66bb      	str	r3, [r7, #104]	@ 0x68
 8012452:	683b      	ldr	r3, [r7, #0]
 8012454:	885b      	ldrh	r3, [r3, #2]
 8012456:	61fb      	str	r3, [r7, #28]
 8012458:	69fb      	ldr	r3, [r7, #28]
 801245a:	61bb      	str	r3, [r7, #24]
 801245c:	69fb      	ldr	r3, [r7, #28]
 801245e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8012462:	fb02 f303 	mul.w	r3, r2, r3
 8012466:	009b      	lsls	r3, r3, #2
 8012468:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801246a:	4413      	add	r3, r2
 801246c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801246e:	69fb      	ldr	r3, [r7, #28]
 8012470:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8012472:	fb02 f303 	mul.w	r3, r2, r3
 8012476:	009b      	lsls	r3, r3, #2
 8012478:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801247a:	4413      	add	r3, r2
 801247c:	66bb      	str	r3, [r7, #104]	@ 0x68
 801247e:	2300      	movs	r3, #0
 8012480:	673b      	str	r3, [r7, #112]	@ 0x70
 8012482:	e014      	b.n	80124ae <arm_mat_inverse_f32+0x634>
 8012484:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8012486:	1d1a      	adds	r2, r3, #4
 8012488:	66ba      	str	r2, [r7, #104]	@ 0x68
 801248a:	ed93 7a00 	vldr	s14, [r3]
 801248e:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8012492:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012496:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012498:	1d1a      	adds	r2, r3, #4
 801249a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 801249c:	ed93 7a00 	vldr	s14, [r3]
 80124a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80124a4:	edc3 7a00 	vstr	s15, [r3]
 80124a8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80124aa:	3301      	adds	r3, #1
 80124ac:	673b      	str	r3, [r7, #112]	@ 0x70
 80124ae:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80124b0:	69bb      	ldr	r3, [r7, #24]
 80124b2:	429a      	cmp	r2, r3
 80124b4:	dbe6      	blt.n	8012484 <arm_mat_inverse_f32+0x60a>
      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 80124b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80124ba:	3301      	adds	r3, #1
 80124bc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80124c0:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80124c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80124c6:	429a      	cmp	r2, r3
 80124c8:	f4ff af67 	bcc.w	801239a <arm_mat_inverse_f32+0x520>
    for(column = 0U; column < numCols; column++)
 80124cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80124d0:	3301      	adds	r3, #1
 80124d2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80124d6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80124da:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80124dc:	429a      	cmp	r2, r3
 80124de:	f4ff ad32 	bcc.w	8011f46 <arm_mat_inverse_f32+0xcc>
      }

    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 80124e2:	2300      	movs	r3, #0
 80124e4:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3

    if ((flag != 1U) && (pivot == 0.0f))
 80124e8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80124ec:	2b01      	cmp	r3, #1
 80124ee:	d033      	beq.n	8012558 <arm_mat_inverse_f32+0x6de>
 80124f0:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 80124f4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80124f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124fc:	d12c      	bne.n	8012558 <arm_mat_inverse_f32+0x6de>
    {
      pIn = pSrc->pData;
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	685b      	ldr	r3, [r3, #4]
 8012502:	667b      	str	r3, [r7, #100]	@ 0x64
      for (i = 0; i < numRows * numCols; i++)
 8012504:	2300      	movs	r3, #0
 8012506:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 801250a:	e010      	b.n	801252e <arm_mat_inverse_f32+0x6b4>
      {
        if (pIn[i] != 0.0f)
 801250c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8012510:	009b      	lsls	r3, r3, #2
 8012512:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8012514:	4413      	add	r3, r2
 8012516:	edd3 7a00 	vldr	s15, [r3]
 801251a:	eef5 7a40 	vcmp.f32	s15, #0.0
 801251e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012522:	d10d      	bne.n	8012540 <arm_mat_inverse_f32+0x6c6>
      for (i = 0; i < numRows * numCols; i++)
 8012524:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8012528:	3301      	adds	r3, #1
 801252a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 801252e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012530:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8012532:	fb02 f303 	mul.w	r3, r2, r3
 8012536:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 801253a:	429a      	cmp	r2, r3
 801253c:	d3e6      	bcc.n	801250c <arm_mat_inverse_f32+0x692>
 801253e:	e000      	b.n	8012542 <arm_mat_inverse_f32+0x6c8>
            break;
 8012540:	bf00      	nop
      }

      if (i == numRows * numCols)
 8012542:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012544:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8012546:	fb02 f303 	mul.w	r3, r2, r3
 801254a:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 801254e:	429a      	cmp	r2, r3
 8012550:	d102      	bne.n	8012558 <arm_mat_inverse_f32+0x6de>
        status = ARM_MATH_SINGULAR;
 8012552:	23fb      	movs	r3, #251	@ 0xfb
 8012554:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
    }
  }

  /* Return to application */
  return (status);
 8012558:	f997 30c3 	ldrsb.w	r3, [r7, #195]	@ 0xc3
}
 801255c:	4618      	mov	r0, r3
 801255e:	37ec      	adds	r7, #236	@ 0xec
 8012560:	46bd      	mov	sp, r7
 8012562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012566:	4770      	bx	lr

08012568 <arm_mat_mult_f32>:
 */
arm_status arm_mat_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 8012568:	b480      	push	{r7}
 801256a:	b093      	sub	sp, #76	@ 0x4c
 801256c:	af00      	add	r7, sp, #0
 801256e:	60f8      	str	r0, [r7, #12]
 8012570:	60b9      	str	r1, [r7, #8]
 8012572:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* Input data matrix pointer A */
 8012574:	68fb      	ldr	r3, [r7, #12]
 8012576:	685b      	ldr	r3, [r3, #4]
 8012578:	647b      	str	r3, [r7, #68]	@ 0x44
  float32_t *pIn2 = pSrcB->pData;                /* Input data matrix pointer B */
 801257a:	68bb      	ldr	r3, [r7, #8]
 801257c:	685b      	ldr	r3, [r3, #4]
 801257e:	643b      	str	r3, [r7, #64]	@ 0x40
  float32_t *pInA = pSrcA->pData;                /* Input data matrix pointer A */
 8012580:	68fb      	ldr	r3, [r7, #12]
 8012582:	685b      	ldr	r3, [r3, #4]
 8012584:	63fb      	str	r3, [r7, #60]	@ 0x3c
  float32_t *pInB = pSrcB->pData;                /* Input data matrix pointer B */
 8012586:	68bb      	ldr	r3, [r7, #8]
 8012588:	685b      	ldr	r3, [r3, #4]
 801258a:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 801258c:	687b      	ldr	r3, [r7, #4]
 801258e:	685b      	ldr	r3, [r3, #4]
 8012590:	61fb      	str	r3, [r7, #28]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  float32_t sum;                                 /* Accumulator */
  uint16_t numRowsA = pSrcA->numRows;            /* Number of rows of input matrix A */
 8012592:	68fb      	ldr	r3, [r7, #12]
 8012594:	881b      	ldrh	r3, [r3, #0]
 8012596:	837b      	strh	r3, [r7, #26]
  uint16_t numColsB = pSrcB->numCols;            /* Number of columns of input matrix B */
 8012598:	68bb      	ldr	r3, [r7, #8]
 801259a:	885b      	ldrh	r3, [r3, #2]
 801259c:	833b      	strh	r3, [r7, #24]
  uint16_t numColsA = pSrcA->numCols;            /* Number of columns of input matrix A */
 801259e:	68fb      	ldr	r3, [r7, #12]
 80125a0:	885b      	ldrh	r3, [r3, #2]
 80125a2:	82fb      	strh	r3, [r7, #22]
  uint32_t col, i = 0U, row = numRowsA, colCnt;  /* Loop counters */
 80125a4:	2300      	movs	r3, #0
 80125a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80125a8:	8b7b      	ldrh	r3, [r7, #26]
 80125aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB */
    /* row loop */
    do
    {
      /* Output pointer is set to starting address of row being processed */
      px = pOut + i;
 80125ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80125ae:	009b      	lsls	r3, r3, #2
 80125b0:	69fa      	ldr	r2, [r7, #28]
 80125b2:	4413      	add	r3, r2
 80125b4:	63bb      	str	r3, [r7, #56]	@ 0x38

      /* For every row wise process, column loop counter is to be initiated */
      col = numColsB;
 80125b6:	8b3b      	ldrh	r3, [r7, #24]
 80125b8:	633b      	str	r3, [r7, #48]	@ 0x30

      /* For every row wise process, pIn2 pointer is set to starting address of pSrcB data */
      pIn2 = pSrcB->pData;
 80125ba:	68bb      	ldr	r3, [r7, #8]
 80125bc:	685b      	ldr	r3, [r3, #4]
 80125be:	643b      	str	r3, [r7, #64]	@ 0x40

      /* column loop */
      do
      {
        /* Set the variable sum, that acts as accumulator, to zero */
        sum = 0.0f;
 80125c0:	f04f 0300 	mov.w	r3, #0
 80125c4:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Initialize pointer pIn1 to point to starting address of column being processed */
        pIn1 = pInA;
 80125c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80125c8:	647b      	str	r3, [r7, #68]	@ 0x44
        colCnt = numColsA % 0x4U;

#else

        /* Initialize cntCnt with number of columns */
        colCnt = numColsA;
 80125ca:	8afb      	ldrh	r3, [r7, #22]
 80125cc:	627b      	str	r3, [r7, #36]	@ 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

        while (colCnt > 0U)
 80125ce:	e017      	b.n	8012600 <arm_mat_mult_f32+0x98>
        {
          /* c(m,p) = a(m,1) * b(1,p) + a(m,2) * b(2,p) + .... + a(m,n) * b(n,p) */

          /* Perform the multiply-accumulates */
          sum += *pIn1++ * *pIn2;
 80125d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80125d2:	1d1a      	adds	r2, r3, #4
 80125d4:	647a      	str	r2, [r7, #68]	@ 0x44
 80125d6:	ed93 7a00 	vldr	s14, [r3]
 80125da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80125dc:	edd3 7a00 	vldr	s15, [r3]
 80125e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80125e4:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80125e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80125ec:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
          pIn2 += numColsB;
 80125f0:	8b3b      	ldrh	r3, [r7, #24]
 80125f2:	009b      	lsls	r3, r3, #2
 80125f4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80125f6:	4413      	add	r3, r2
 80125f8:	643b      	str	r3, [r7, #64]	@ 0x40

          /* Decrement loop counter */
          colCnt--;
 80125fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80125fc:	3b01      	subs	r3, #1
 80125fe:	627b      	str	r3, [r7, #36]	@ 0x24
        while (colCnt > 0U)
 8012600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012602:	2b00      	cmp	r3, #0
 8012604:	d1e4      	bne.n	80125d0 <arm_mat_mult_f32+0x68>
        }

        /* Store result in destination buffer */
        *px++ = sum;
 8012606:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012608:	1d1a      	adds	r2, r3, #4
 801260a:	63ba      	str	r2, [r7, #56]	@ 0x38
 801260c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801260e:	601a      	str	r2, [r3, #0]

        /* Decrement column loop counter */
        col--;
 8012610:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012612:	3b01      	subs	r3, #1
 8012614:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Update pointer pIn2 to point to starting address of next column */
        pIn2 = pInB + (numColsB - col);
 8012616:	8b3a      	ldrh	r2, [r7, #24]
 8012618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801261a:	1ad3      	subs	r3, r2, r3
 801261c:	009b      	lsls	r3, r3, #2
 801261e:	6a3a      	ldr	r2, [r7, #32]
 8012620:	4413      	add	r3, r2
 8012622:	643b      	str	r3, [r7, #64]	@ 0x40

      } while (col > 0U);
 8012624:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012626:	2b00      	cmp	r3, #0
 8012628:	d1ca      	bne.n	80125c0 <arm_mat_mult_f32+0x58>

      /* Update pointer pInA to point to starting address of next row */
      i = i + numColsB;
 801262a:	8b3b      	ldrh	r3, [r7, #24]
 801262c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801262e:	4413      	add	r3, r2
 8012630:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pInA = pInA + numColsA;
 8012632:	8afb      	ldrh	r3, [r7, #22]
 8012634:	009b      	lsls	r3, r3, #2
 8012636:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8012638:	4413      	add	r3, r2
 801263a:	63fb      	str	r3, [r7, #60]	@ 0x3c

      /* Decrement row loop counter */
      row--;
 801263c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801263e:	3b01      	subs	r3, #1
 8012640:	62bb      	str	r3, [r7, #40]	@ 0x28

    } while (row > 0U);
 8012642:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012644:	2b00      	cmp	r3, #0
 8012646:	d1b1      	bne.n	80125ac <arm_mat_mult_f32+0x44>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8012648:	2300      	movs	r3, #0
 801264a:	757b      	strb	r3, [r7, #21]
  }

  /* Return to application */
  return (status);
 801264c:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 8012650:	4618      	mov	r0, r3
 8012652:	374c      	adds	r7, #76	@ 0x4c
 8012654:	46bd      	mov	sp, r7
 8012656:	f85d 7b04 	ldr.w	r7, [sp], #4
 801265a:	4770      	bx	lr

0801265c <arm_mat_scale_f32>:
#else
arm_status arm_mat_scale_f32(
  const arm_matrix_instance_f32 * pSrc,
        float32_t                 scale,
        arm_matrix_instance_f32 * pDst)
{
 801265c:	b480      	push	{r7}
 801265e:	b08b      	sub	sp, #44	@ 0x2c
 8012660:	af00      	add	r7, sp, #0
 8012662:	60f8      	str	r0, [r7, #12]
 8012664:	ed87 0a02 	vstr	s0, [r7, #8]
 8012668:	6079      	str	r1, [r7, #4]
  float32_t *pIn = pSrc->pData;                  /* Input data matrix pointer */
 801266a:	68fb      	ldr	r3, [r7, #12]
 801266c:	685b      	ldr	r3, [r3, #4]
 801266e:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	685b      	ldr	r3, [r3, #4]
 8012674:	623b      	str	r3, [r7, #32]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
 8012676:	68fb      	ldr	r3, [r7, #12]
 8012678:	881b      	ldrh	r3, [r3, #0]
 801267a:	461a      	mov	r2, r3
 801267c:	68fb      	ldr	r3, [r7, #12]
 801267e:	885b      	ldrh	r3, [r3, #2]
 8012680:	fb02 f303 	mul.w	r3, r2, r3
 8012684:	61bb      	str	r3, [r7, #24]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 8012686:	69bb      	ldr	r3, [r7, #24]
 8012688:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 801268a:	e010      	b.n	80126ae <arm_mat_scale_f32+0x52>
    {
      /* C(m,n) = A(m,n) * scale */

      /* Scale and store result in destination buffer. */
      *pOut++ = (*pIn++) * scale;
 801268c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801268e:	1d1a      	adds	r2, r3, #4
 8012690:	627a      	str	r2, [r7, #36]	@ 0x24
 8012692:	ed93 7a00 	vldr	s14, [r3]
 8012696:	6a3b      	ldr	r3, [r7, #32]
 8012698:	1d1a      	adds	r2, r3, #4
 801269a:	623a      	str	r2, [r7, #32]
 801269c:	edd7 7a02 	vldr	s15, [r7, #8]
 80126a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80126a4:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 80126a8:	69fb      	ldr	r3, [r7, #28]
 80126aa:	3b01      	subs	r3, #1
 80126ac:	61fb      	str	r3, [r7, #28]
    while (blkCnt > 0U)
 80126ae:	69fb      	ldr	r3, [r7, #28]
 80126b0:	2b00      	cmp	r3, #0
 80126b2:	d1eb      	bne.n	801268c <arm_mat_scale_f32+0x30>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 80126b4:	2300      	movs	r3, #0
 80126b6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return to application */
  return (status);
 80126b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80126bc:	4618      	mov	r0, r3
 80126be:	372c      	adds	r7, #44	@ 0x2c
 80126c0:	46bd      	mov	sp, r7
 80126c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126c6:	4770      	bx	lr

080126c8 <arm_mat_sub_f32>:
#else
arm_status arm_mat_sub_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 80126c8:	b480      	push	{r7}
 80126ca:	b08b      	sub	sp, #44	@ 0x2c
 80126cc:	af00      	add	r7, sp, #0
 80126ce:	60f8      	str	r0, [r7, #12]
 80126d0:	60b9      	str	r1, [r7, #8]
 80126d2:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 80126d4:	68fb      	ldr	r3, [r7, #12]
 80126d6:	685b      	ldr	r3, [r3, #4]
 80126d8:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 80126da:	68bb      	ldr	r3, [r7, #8]
 80126dc:	685b      	ldr	r3, [r3, #4]
 80126de:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	685b      	ldr	r3, [r3, #4]
 80126e4:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 80126e6:	68fb      	ldr	r3, [r7, #12]
 80126e8:	881b      	ldrh	r3, [r3, #0]
 80126ea:	461a      	mov	r2, r3
 80126ec:	68fb      	ldr	r3, [r7, #12]
 80126ee:	885b      	ldrh	r3, [r3, #2]
 80126f0:	fb02 f303 	mul.w	r3, r2, r3
 80126f4:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 80126f6:	697b      	ldr	r3, [r7, #20]
 80126f8:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 80126fa:	e013      	b.n	8012724 <arm_mat_sub_f32+0x5c>
    {
      /* C(m,n) = A(m,n) - B(m,n) */

      /* Subtract and store result in destination buffer. */
      *pOut++ = (*pInA++) - (*pInB++);
 80126fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80126fe:	1d1a      	adds	r2, r3, #4
 8012700:	627a      	str	r2, [r7, #36]	@ 0x24
 8012702:	ed93 7a00 	vldr	s14, [r3]
 8012706:	6a3b      	ldr	r3, [r7, #32]
 8012708:	1d1a      	adds	r2, r3, #4
 801270a:	623a      	str	r2, [r7, #32]
 801270c:	edd3 7a00 	vldr	s15, [r3]
 8012710:	69fb      	ldr	r3, [r7, #28]
 8012712:	1d1a      	adds	r2, r3, #4
 8012714:	61fa      	str	r2, [r7, #28]
 8012716:	ee77 7a67 	vsub.f32	s15, s14, s15
 801271a:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 801271e:	69bb      	ldr	r3, [r7, #24]
 8012720:	3b01      	subs	r3, #1
 8012722:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 8012724:	69bb      	ldr	r3, [r7, #24]
 8012726:	2b00      	cmp	r3, #0
 8012728:	d1e8      	bne.n	80126fc <arm_mat_sub_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 801272a:	2300      	movs	r3, #0
 801272c:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 801272e:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8012732:	4618      	mov	r0, r3
 8012734:	372c      	adds	r7, #44	@ 0x2c
 8012736:	46bd      	mov	sp, r7
 8012738:	f85d 7b04 	ldr.w	r7, [sp], #4
 801273c:	4770      	bx	lr

0801273e <arm_mat_trans_f32>:
}
#else
arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 801273e:	b480      	push	{r7}
 8012740:	b08b      	sub	sp, #44	@ 0x2c
 8012742:	af00      	add	r7, sp, #0
 8012744:	6078      	str	r0, [r7, #4]
 8012746:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	685b      	ldr	r3, [r3, #4]
 801274c:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 801274e:	683b      	ldr	r3, [r7, #0]
 8012750:	685b      	ldr	r3, [r3, #4]
 8012752:	613b      	str	r3, [r7, #16]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	881b      	ldrh	r3, [r3, #0]
 8012758:	81fb      	strh	r3, [r7, #14]
  uint16_t nCols = pSrc->numCols;                /* number of columns */
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	885b      	ldrh	r3, [r3, #2]
 801275e:	81bb      	strh	r3, [r7, #12]
  uint32_t col, row = nRows, i = 0U;             /* Loop counters */
 8012760:	89fb      	ldrh	r3, [r7, #14]
 8012762:	61bb      	str	r3, [r7, #24]
 8012764:	2300      	movs	r3, #0
 8012766:	617b      	str	r3, [r7, #20]
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop */
    do
    {
      /* Pointer px is set to starting address of column being processed */
      px = pOut + i;
 8012768:	697b      	ldr	r3, [r7, #20]
 801276a:	009b      	lsls	r3, r3, #2
 801276c:	693a      	ldr	r2, [r7, #16]
 801276e:	4413      	add	r3, r2
 8012770:	623b      	str	r3, [r7, #32]
      col = nCols % 0x4U;

#else

      /* Initialize col with number of samples */
      col = nCols;
 8012772:	89bb      	ldrh	r3, [r7, #12]
 8012774:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (col > 0U)
 8012776:	e00d      	b.n	8012794 <arm_mat_trans_f32+0x56>
      {
        /* Read and store input element in destination */
        *px = *pIn++;
 8012778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801277a:	1d1a      	adds	r2, r3, #4
 801277c:	627a      	str	r2, [r7, #36]	@ 0x24
 801277e:	681a      	ldr	r2, [r3, #0]
 8012780:	6a3b      	ldr	r3, [r7, #32]
 8012782:	601a      	str	r2, [r3, #0]

        /* Update pointer px to point to next row of transposed matrix */
        px += nRows;
 8012784:	89fb      	ldrh	r3, [r7, #14]
 8012786:	009b      	lsls	r3, r3, #2
 8012788:	6a3a      	ldr	r2, [r7, #32]
 801278a:	4413      	add	r3, r2
 801278c:	623b      	str	r3, [r7, #32]

        /* Decrement column loop counter */
        col--;
 801278e:	69fb      	ldr	r3, [r7, #28]
 8012790:	3b01      	subs	r3, #1
 8012792:	61fb      	str	r3, [r7, #28]
      while (col > 0U)
 8012794:	69fb      	ldr	r3, [r7, #28]
 8012796:	2b00      	cmp	r3, #0
 8012798:	d1ee      	bne.n	8012778 <arm_mat_trans_f32+0x3a>
      }

      i++;
 801279a:	697b      	ldr	r3, [r7, #20]
 801279c:	3301      	adds	r3, #1
 801279e:	617b      	str	r3, [r7, #20]

      /* Decrement row loop counter */
      row--;
 80127a0:	69bb      	ldr	r3, [r7, #24]
 80127a2:	3b01      	subs	r3, #1
 80127a4:	61bb      	str	r3, [r7, #24]

    } while (row > 0U);          /* row loop end */
 80127a6:	69bb      	ldr	r3, [r7, #24]
 80127a8:	2b00      	cmp	r3, #0
 80127aa:	d1dd      	bne.n	8012768 <arm_mat_trans_f32+0x2a>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 80127ac:	2300      	movs	r3, #0
 80127ae:	72fb      	strb	r3, [r7, #11]
  }

  /* Return to application */
  return (status);
 80127b0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80127b4:	4618      	mov	r0, r3
 80127b6:	372c      	adds	r7, #44	@ 0x2c
 80127b8:	46bd      	mov	sp, r7
 80127ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127be:	4770      	bx	lr

080127c0 <malloc>:
 80127c0:	4b02      	ldr	r3, [pc, #8]	@ (80127cc <malloc+0xc>)
 80127c2:	4601      	mov	r1, r0
 80127c4:	6818      	ldr	r0, [r3, #0]
 80127c6:	f000 b825 	b.w	8012814 <_malloc_r>
 80127ca:	bf00      	nop
 80127cc:	20000344 	.word	0x20000344

080127d0 <sbrk_aligned>:
 80127d0:	b570      	push	{r4, r5, r6, lr}
 80127d2:	4e0f      	ldr	r6, [pc, #60]	@ (8012810 <sbrk_aligned+0x40>)
 80127d4:	460c      	mov	r4, r1
 80127d6:	6831      	ldr	r1, [r6, #0]
 80127d8:	4605      	mov	r5, r0
 80127da:	b911      	cbnz	r1, 80127e2 <sbrk_aligned+0x12>
 80127dc:	f000 f8ae 	bl	801293c <_sbrk_r>
 80127e0:	6030      	str	r0, [r6, #0]
 80127e2:	4621      	mov	r1, r4
 80127e4:	4628      	mov	r0, r5
 80127e6:	f000 f8a9 	bl	801293c <_sbrk_r>
 80127ea:	1c43      	adds	r3, r0, #1
 80127ec:	d103      	bne.n	80127f6 <sbrk_aligned+0x26>
 80127ee:	f04f 34ff 	mov.w	r4, #4294967295
 80127f2:	4620      	mov	r0, r4
 80127f4:	bd70      	pop	{r4, r5, r6, pc}
 80127f6:	1cc4      	adds	r4, r0, #3
 80127f8:	f024 0403 	bic.w	r4, r4, #3
 80127fc:	42a0      	cmp	r0, r4
 80127fe:	d0f8      	beq.n	80127f2 <sbrk_aligned+0x22>
 8012800:	1a21      	subs	r1, r4, r0
 8012802:	4628      	mov	r0, r5
 8012804:	f000 f89a 	bl	801293c <_sbrk_r>
 8012808:	3001      	adds	r0, #1
 801280a:	d1f2      	bne.n	80127f2 <sbrk_aligned+0x22>
 801280c:	e7ef      	b.n	80127ee <sbrk_aligned+0x1e>
 801280e:	bf00      	nop
 8012810:	20002484 	.word	0x20002484

08012814 <_malloc_r>:
 8012814:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012818:	1ccd      	adds	r5, r1, #3
 801281a:	f025 0503 	bic.w	r5, r5, #3
 801281e:	3508      	adds	r5, #8
 8012820:	2d0c      	cmp	r5, #12
 8012822:	bf38      	it	cc
 8012824:	250c      	movcc	r5, #12
 8012826:	2d00      	cmp	r5, #0
 8012828:	4606      	mov	r6, r0
 801282a:	db01      	blt.n	8012830 <_malloc_r+0x1c>
 801282c:	42a9      	cmp	r1, r5
 801282e:	d904      	bls.n	801283a <_malloc_r+0x26>
 8012830:	230c      	movs	r3, #12
 8012832:	6033      	str	r3, [r6, #0]
 8012834:	2000      	movs	r0, #0
 8012836:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801283a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012910 <_malloc_r+0xfc>
 801283e:	f000 f869 	bl	8012914 <__malloc_lock>
 8012842:	f8d8 3000 	ldr.w	r3, [r8]
 8012846:	461c      	mov	r4, r3
 8012848:	bb44      	cbnz	r4, 801289c <_malloc_r+0x88>
 801284a:	4629      	mov	r1, r5
 801284c:	4630      	mov	r0, r6
 801284e:	f7ff ffbf 	bl	80127d0 <sbrk_aligned>
 8012852:	1c43      	adds	r3, r0, #1
 8012854:	4604      	mov	r4, r0
 8012856:	d158      	bne.n	801290a <_malloc_r+0xf6>
 8012858:	f8d8 4000 	ldr.w	r4, [r8]
 801285c:	4627      	mov	r7, r4
 801285e:	2f00      	cmp	r7, #0
 8012860:	d143      	bne.n	80128ea <_malloc_r+0xd6>
 8012862:	2c00      	cmp	r4, #0
 8012864:	d04b      	beq.n	80128fe <_malloc_r+0xea>
 8012866:	6823      	ldr	r3, [r4, #0]
 8012868:	4639      	mov	r1, r7
 801286a:	4630      	mov	r0, r6
 801286c:	eb04 0903 	add.w	r9, r4, r3
 8012870:	f000 f864 	bl	801293c <_sbrk_r>
 8012874:	4581      	cmp	r9, r0
 8012876:	d142      	bne.n	80128fe <_malloc_r+0xea>
 8012878:	6821      	ldr	r1, [r4, #0]
 801287a:	1a6d      	subs	r5, r5, r1
 801287c:	4629      	mov	r1, r5
 801287e:	4630      	mov	r0, r6
 8012880:	f7ff ffa6 	bl	80127d0 <sbrk_aligned>
 8012884:	3001      	adds	r0, #1
 8012886:	d03a      	beq.n	80128fe <_malloc_r+0xea>
 8012888:	6823      	ldr	r3, [r4, #0]
 801288a:	442b      	add	r3, r5
 801288c:	6023      	str	r3, [r4, #0]
 801288e:	f8d8 3000 	ldr.w	r3, [r8]
 8012892:	685a      	ldr	r2, [r3, #4]
 8012894:	bb62      	cbnz	r2, 80128f0 <_malloc_r+0xdc>
 8012896:	f8c8 7000 	str.w	r7, [r8]
 801289a:	e00f      	b.n	80128bc <_malloc_r+0xa8>
 801289c:	6822      	ldr	r2, [r4, #0]
 801289e:	1b52      	subs	r2, r2, r5
 80128a0:	d420      	bmi.n	80128e4 <_malloc_r+0xd0>
 80128a2:	2a0b      	cmp	r2, #11
 80128a4:	d917      	bls.n	80128d6 <_malloc_r+0xc2>
 80128a6:	1961      	adds	r1, r4, r5
 80128a8:	42a3      	cmp	r3, r4
 80128aa:	6025      	str	r5, [r4, #0]
 80128ac:	bf18      	it	ne
 80128ae:	6059      	strne	r1, [r3, #4]
 80128b0:	6863      	ldr	r3, [r4, #4]
 80128b2:	bf08      	it	eq
 80128b4:	f8c8 1000 	streq.w	r1, [r8]
 80128b8:	5162      	str	r2, [r4, r5]
 80128ba:	604b      	str	r3, [r1, #4]
 80128bc:	4630      	mov	r0, r6
 80128be:	f000 f82f 	bl	8012920 <__malloc_unlock>
 80128c2:	f104 000b 	add.w	r0, r4, #11
 80128c6:	1d23      	adds	r3, r4, #4
 80128c8:	f020 0007 	bic.w	r0, r0, #7
 80128cc:	1ac2      	subs	r2, r0, r3
 80128ce:	bf1c      	itt	ne
 80128d0:	1a1b      	subne	r3, r3, r0
 80128d2:	50a3      	strne	r3, [r4, r2]
 80128d4:	e7af      	b.n	8012836 <_malloc_r+0x22>
 80128d6:	6862      	ldr	r2, [r4, #4]
 80128d8:	42a3      	cmp	r3, r4
 80128da:	bf0c      	ite	eq
 80128dc:	f8c8 2000 	streq.w	r2, [r8]
 80128e0:	605a      	strne	r2, [r3, #4]
 80128e2:	e7eb      	b.n	80128bc <_malloc_r+0xa8>
 80128e4:	4623      	mov	r3, r4
 80128e6:	6864      	ldr	r4, [r4, #4]
 80128e8:	e7ae      	b.n	8012848 <_malloc_r+0x34>
 80128ea:	463c      	mov	r4, r7
 80128ec:	687f      	ldr	r7, [r7, #4]
 80128ee:	e7b6      	b.n	801285e <_malloc_r+0x4a>
 80128f0:	461a      	mov	r2, r3
 80128f2:	685b      	ldr	r3, [r3, #4]
 80128f4:	42a3      	cmp	r3, r4
 80128f6:	d1fb      	bne.n	80128f0 <_malloc_r+0xdc>
 80128f8:	2300      	movs	r3, #0
 80128fa:	6053      	str	r3, [r2, #4]
 80128fc:	e7de      	b.n	80128bc <_malloc_r+0xa8>
 80128fe:	230c      	movs	r3, #12
 8012900:	6033      	str	r3, [r6, #0]
 8012902:	4630      	mov	r0, r6
 8012904:	f000 f80c 	bl	8012920 <__malloc_unlock>
 8012908:	e794      	b.n	8012834 <_malloc_r+0x20>
 801290a:	6005      	str	r5, [r0, #0]
 801290c:	e7d6      	b.n	80128bc <_malloc_r+0xa8>
 801290e:	bf00      	nop
 8012910:	20002488 	.word	0x20002488

08012914 <__malloc_lock>:
 8012914:	4801      	ldr	r0, [pc, #4]	@ (801291c <__malloc_lock+0x8>)
 8012916:	f000 b84b 	b.w	80129b0 <__retarget_lock_acquire_recursive>
 801291a:	bf00      	nop
 801291c:	200025c8 	.word	0x200025c8

08012920 <__malloc_unlock>:
 8012920:	4801      	ldr	r0, [pc, #4]	@ (8012928 <__malloc_unlock+0x8>)
 8012922:	f000 b846 	b.w	80129b2 <__retarget_lock_release_recursive>
 8012926:	bf00      	nop
 8012928:	200025c8 	.word	0x200025c8

0801292c <memset>:
 801292c:	4402      	add	r2, r0
 801292e:	4603      	mov	r3, r0
 8012930:	4293      	cmp	r3, r2
 8012932:	d100      	bne.n	8012936 <memset+0xa>
 8012934:	4770      	bx	lr
 8012936:	f803 1b01 	strb.w	r1, [r3], #1
 801293a:	e7f9      	b.n	8012930 <memset+0x4>

0801293c <_sbrk_r>:
 801293c:	b538      	push	{r3, r4, r5, lr}
 801293e:	4d06      	ldr	r5, [pc, #24]	@ (8012958 <_sbrk_r+0x1c>)
 8012940:	2300      	movs	r3, #0
 8012942:	4604      	mov	r4, r0
 8012944:	4608      	mov	r0, r1
 8012946:	602b      	str	r3, [r5, #0]
 8012948:	f7f7 f846 	bl	80099d8 <_sbrk>
 801294c:	1c43      	adds	r3, r0, #1
 801294e:	d102      	bne.n	8012956 <_sbrk_r+0x1a>
 8012950:	682b      	ldr	r3, [r5, #0]
 8012952:	b103      	cbz	r3, 8012956 <_sbrk_r+0x1a>
 8012954:	6023      	str	r3, [r4, #0]
 8012956:	bd38      	pop	{r3, r4, r5, pc}
 8012958:	200025c4 	.word	0x200025c4

0801295c <__errno>:
 801295c:	4b01      	ldr	r3, [pc, #4]	@ (8012964 <__errno+0x8>)
 801295e:	6818      	ldr	r0, [r3, #0]
 8012960:	4770      	bx	lr
 8012962:	bf00      	nop
 8012964:	20000344 	.word	0x20000344

08012968 <__libc_init_array>:
 8012968:	b570      	push	{r4, r5, r6, lr}
 801296a:	4d0d      	ldr	r5, [pc, #52]	@ (80129a0 <__libc_init_array+0x38>)
 801296c:	4c0d      	ldr	r4, [pc, #52]	@ (80129a4 <__libc_init_array+0x3c>)
 801296e:	1b64      	subs	r4, r4, r5
 8012970:	10a4      	asrs	r4, r4, #2
 8012972:	2600      	movs	r6, #0
 8012974:	42a6      	cmp	r6, r4
 8012976:	d109      	bne.n	801298c <__libc_init_array+0x24>
 8012978:	4d0b      	ldr	r5, [pc, #44]	@ (80129a8 <__libc_init_array+0x40>)
 801297a:	4c0c      	ldr	r4, [pc, #48]	@ (80129ac <__libc_init_array+0x44>)
 801297c:	f001 ff30 	bl	80147e0 <_init>
 8012980:	1b64      	subs	r4, r4, r5
 8012982:	10a4      	asrs	r4, r4, #2
 8012984:	2600      	movs	r6, #0
 8012986:	42a6      	cmp	r6, r4
 8012988:	d105      	bne.n	8012996 <__libc_init_array+0x2e>
 801298a:	bd70      	pop	{r4, r5, r6, pc}
 801298c:	f855 3b04 	ldr.w	r3, [r5], #4
 8012990:	4798      	blx	r3
 8012992:	3601      	adds	r6, #1
 8012994:	e7ee      	b.n	8012974 <__libc_init_array+0xc>
 8012996:	f855 3b04 	ldr.w	r3, [r5], #4
 801299a:	4798      	blx	r3
 801299c:	3601      	adds	r6, #1
 801299e:	e7f2      	b.n	8012986 <__libc_init_array+0x1e>
 80129a0:	08014e30 	.word	0x08014e30
 80129a4:	08014e30 	.word	0x08014e30
 80129a8:	08014e30 	.word	0x08014e30
 80129ac:	08014e34 	.word	0x08014e34

080129b0 <__retarget_lock_acquire_recursive>:
 80129b0:	4770      	bx	lr

080129b2 <__retarget_lock_release_recursive>:
 80129b2:	4770      	bx	lr

080129b4 <memcpy>:
 80129b4:	440a      	add	r2, r1
 80129b6:	4291      	cmp	r1, r2
 80129b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80129bc:	d100      	bne.n	80129c0 <memcpy+0xc>
 80129be:	4770      	bx	lr
 80129c0:	b510      	push	{r4, lr}
 80129c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80129c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80129ca:	4291      	cmp	r1, r2
 80129cc:	d1f9      	bne.n	80129c2 <memcpy+0xe>
 80129ce:	bd10      	pop	{r4, pc}

080129d0 <cos>:
 80129d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80129d2:	ec53 2b10 	vmov	r2, r3, d0
 80129d6:	4826      	ldr	r0, [pc, #152]	@ (8012a70 <cos+0xa0>)
 80129d8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80129dc:	4281      	cmp	r1, r0
 80129de:	d806      	bhi.n	80129ee <cos+0x1e>
 80129e0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8012a68 <cos+0x98>
 80129e4:	b005      	add	sp, #20
 80129e6:	f85d eb04 	ldr.w	lr, [sp], #4
 80129ea:	f000 b9bd 	b.w	8012d68 <__kernel_cos>
 80129ee:	4821      	ldr	r0, [pc, #132]	@ (8012a74 <cos+0xa4>)
 80129f0:	4281      	cmp	r1, r0
 80129f2:	d908      	bls.n	8012a06 <cos+0x36>
 80129f4:	4610      	mov	r0, r2
 80129f6:	4619      	mov	r1, r3
 80129f8:	f7ed fc12 	bl	8000220 <__aeabi_dsub>
 80129fc:	ec41 0b10 	vmov	d0, r0, r1
 8012a00:	b005      	add	sp, #20
 8012a02:	f85d fb04 	ldr.w	pc, [sp], #4
 8012a06:	4668      	mov	r0, sp
 8012a08:	f000 fb32 	bl	8013070 <__ieee754_rem_pio2>
 8012a0c:	f000 0003 	and.w	r0, r0, #3
 8012a10:	2801      	cmp	r0, #1
 8012a12:	d00b      	beq.n	8012a2c <cos+0x5c>
 8012a14:	2802      	cmp	r0, #2
 8012a16:	d015      	beq.n	8012a44 <cos+0x74>
 8012a18:	b9d8      	cbnz	r0, 8012a52 <cos+0x82>
 8012a1a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012a1e:	ed9d 0b00 	vldr	d0, [sp]
 8012a22:	f000 f9a1 	bl	8012d68 <__kernel_cos>
 8012a26:	ec51 0b10 	vmov	r0, r1, d0
 8012a2a:	e7e7      	b.n	80129fc <cos+0x2c>
 8012a2c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012a30:	ed9d 0b00 	vldr	d0, [sp]
 8012a34:	f000 fa60 	bl	8012ef8 <__kernel_sin>
 8012a38:	ec53 2b10 	vmov	r2, r3, d0
 8012a3c:	4610      	mov	r0, r2
 8012a3e:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8012a42:	e7db      	b.n	80129fc <cos+0x2c>
 8012a44:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012a48:	ed9d 0b00 	vldr	d0, [sp]
 8012a4c:	f000 f98c 	bl	8012d68 <__kernel_cos>
 8012a50:	e7f2      	b.n	8012a38 <cos+0x68>
 8012a52:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012a56:	ed9d 0b00 	vldr	d0, [sp]
 8012a5a:	2001      	movs	r0, #1
 8012a5c:	f000 fa4c 	bl	8012ef8 <__kernel_sin>
 8012a60:	e7e1      	b.n	8012a26 <cos+0x56>
 8012a62:	bf00      	nop
 8012a64:	f3af 8000 	nop.w
	...
 8012a70:	3fe921fb 	.word	0x3fe921fb
 8012a74:	7fefffff 	.word	0x7fefffff

08012a78 <sin>:
 8012a78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012a7a:	ec53 2b10 	vmov	r2, r3, d0
 8012a7e:	4826      	ldr	r0, [pc, #152]	@ (8012b18 <sin+0xa0>)
 8012a80:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8012a84:	4281      	cmp	r1, r0
 8012a86:	d807      	bhi.n	8012a98 <sin+0x20>
 8012a88:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8012b10 <sin+0x98>
 8012a8c:	2000      	movs	r0, #0
 8012a8e:	b005      	add	sp, #20
 8012a90:	f85d eb04 	ldr.w	lr, [sp], #4
 8012a94:	f000 ba30 	b.w	8012ef8 <__kernel_sin>
 8012a98:	4820      	ldr	r0, [pc, #128]	@ (8012b1c <sin+0xa4>)
 8012a9a:	4281      	cmp	r1, r0
 8012a9c:	d908      	bls.n	8012ab0 <sin+0x38>
 8012a9e:	4610      	mov	r0, r2
 8012aa0:	4619      	mov	r1, r3
 8012aa2:	f7ed fbbd 	bl	8000220 <__aeabi_dsub>
 8012aa6:	ec41 0b10 	vmov	d0, r0, r1
 8012aaa:	b005      	add	sp, #20
 8012aac:	f85d fb04 	ldr.w	pc, [sp], #4
 8012ab0:	4668      	mov	r0, sp
 8012ab2:	f000 fadd 	bl	8013070 <__ieee754_rem_pio2>
 8012ab6:	f000 0003 	and.w	r0, r0, #3
 8012aba:	2801      	cmp	r0, #1
 8012abc:	d00c      	beq.n	8012ad8 <sin+0x60>
 8012abe:	2802      	cmp	r0, #2
 8012ac0:	d011      	beq.n	8012ae6 <sin+0x6e>
 8012ac2:	b9e8      	cbnz	r0, 8012b00 <sin+0x88>
 8012ac4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012ac8:	ed9d 0b00 	vldr	d0, [sp]
 8012acc:	2001      	movs	r0, #1
 8012ace:	f000 fa13 	bl	8012ef8 <__kernel_sin>
 8012ad2:	ec51 0b10 	vmov	r0, r1, d0
 8012ad6:	e7e6      	b.n	8012aa6 <sin+0x2e>
 8012ad8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012adc:	ed9d 0b00 	vldr	d0, [sp]
 8012ae0:	f000 f942 	bl	8012d68 <__kernel_cos>
 8012ae4:	e7f5      	b.n	8012ad2 <sin+0x5a>
 8012ae6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012aea:	ed9d 0b00 	vldr	d0, [sp]
 8012aee:	2001      	movs	r0, #1
 8012af0:	f000 fa02 	bl	8012ef8 <__kernel_sin>
 8012af4:	ec53 2b10 	vmov	r2, r3, d0
 8012af8:	4610      	mov	r0, r2
 8012afa:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8012afe:	e7d2      	b.n	8012aa6 <sin+0x2e>
 8012b00:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012b04:	ed9d 0b00 	vldr	d0, [sp]
 8012b08:	f000 f92e 	bl	8012d68 <__kernel_cos>
 8012b0c:	e7f2      	b.n	8012af4 <sin+0x7c>
 8012b0e:	bf00      	nop
	...
 8012b18:	3fe921fb 	.word	0x3fe921fb
 8012b1c:	7fefffff 	.word	0x7fefffff

08012b20 <fmodf>:
 8012b20:	b508      	push	{r3, lr}
 8012b22:	ed2d 8b02 	vpush	{d8}
 8012b26:	eef0 8a40 	vmov.f32	s17, s0
 8012b2a:	eeb0 8a60 	vmov.f32	s16, s1
 8012b2e:	f000 fd43 	bl	80135b8 <__ieee754_fmodf>
 8012b32:	eef4 8a48 	vcmp.f32	s17, s16
 8012b36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b3a:	d60c      	bvs.n	8012b56 <fmodf+0x36>
 8012b3c:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8012b5c <fmodf+0x3c>
 8012b40:	eeb4 8a68 	vcmp.f32	s16, s17
 8012b44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b48:	d105      	bne.n	8012b56 <fmodf+0x36>
 8012b4a:	f7ff ff07 	bl	801295c <__errno>
 8012b4e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8012b52:	2321      	movs	r3, #33	@ 0x21
 8012b54:	6003      	str	r3, [r0, #0]
 8012b56:	ecbd 8b02 	vpop	{d8}
 8012b5a:	bd08      	pop	{r3, pc}
 8012b5c:	00000000 	.word	0x00000000

08012b60 <sqrtf>:
 8012b60:	b508      	push	{r3, lr}
 8012b62:	ed2d 8b02 	vpush	{d8}
 8012b66:	eeb0 8a40 	vmov.f32	s16, s0
 8012b6a:	f000 f8f7 	bl	8012d5c <__ieee754_sqrtf>
 8012b6e:	eeb4 8a48 	vcmp.f32	s16, s16
 8012b72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b76:	d60c      	bvs.n	8012b92 <sqrtf+0x32>
 8012b78:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8012b98 <sqrtf+0x38>
 8012b7c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8012b80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b84:	d505      	bpl.n	8012b92 <sqrtf+0x32>
 8012b86:	f7ff fee9 	bl	801295c <__errno>
 8012b8a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8012b8e:	2321      	movs	r3, #33	@ 0x21
 8012b90:	6003      	str	r3, [r0, #0]
 8012b92:	ecbd 8b02 	vpop	{d8}
 8012b96:	bd08      	pop	{r3, pc}
 8012b98:	00000000 	.word	0x00000000

08012b9c <cosf>:
 8012b9c:	ee10 3a10 	vmov	r3, s0
 8012ba0:	b507      	push	{r0, r1, r2, lr}
 8012ba2:	4a1e      	ldr	r2, [pc, #120]	@ (8012c1c <cosf+0x80>)
 8012ba4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8012ba8:	4293      	cmp	r3, r2
 8012baa:	d806      	bhi.n	8012bba <cosf+0x1e>
 8012bac:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8012c20 <cosf+0x84>
 8012bb0:	b003      	add	sp, #12
 8012bb2:	f85d eb04 	ldr.w	lr, [sp], #4
 8012bb6:	f000 bc5f 	b.w	8013478 <__kernel_cosf>
 8012bba:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8012bbe:	d304      	bcc.n	8012bca <cosf+0x2e>
 8012bc0:	ee30 0a40 	vsub.f32	s0, s0, s0
 8012bc4:	b003      	add	sp, #12
 8012bc6:	f85d fb04 	ldr.w	pc, [sp], #4
 8012bca:	4668      	mov	r0, sp
 8012bcc:	f000 fd76 	bl	80136bc <__ieee754_rem_pio2f>
 8012bd0:	f000 0003 	and.w	r0, r0, #3
 8012bd4:	2801      	cmp	r0, #1
 8012bd6:	d009      	beq.n	8012bec <cosf+0x50>
 8012bd8:	2802      	cmp	r0, #2
 8012bda:	d010      	beq.n	8012bfe <cosf+0x62>
 8012bdc:	b9b0      	cbnz	r0, 8012c0c <cosf+0x70>
 8012bde:	eddd 0a01 	vldr	s1, [sp, #4]
 8012be2:	ed9d 0a00 	vldr	s0, [sp]
 8012be6:	f000 fc47 	bl	8013478 <__kernel_cosf>
 8012bea:	e7eb      	b.n	8012bc4 <cosf+0x28>
 8012bec:	eddd 0a01 	vldr	s1, [sp, #4]
 8012bf0:	ed9d 0a00 	vldr	s0, [sp]
 8012bf4:	f000 fc98 	bl	8013528 <__kernel_sinf>
 8012bf8:	eeb1 0a40 	vneg.f32	s0, s0
 8012bfc:	e7e2      	b.n	8012bc4 <cosf+0x28>
 8012bfe:	eddd 0a01 	vldr	s1, [sp, #4]
 8012c02:	ed9d 0a00 	vldr	s0, [sp]
 8012c06:	f000 fc37 	bl	8013478 <__kernel_cosf>
 8012c0a:	e7f5      	b.n	8012bf8 <cosf+0x5c>
 8012c0c:	eddd 0a01 	vldr	s1, [sp, #4]
 8012c10:	ed9d 0a00 	vldr	s0, [sp]
 8012c14:	2001      	movs	r0, #1
 8012c16:	f000 fc87 	bl	8013528 <__kernel_sinf>
 8012c1a:	e7d3      	b.n	8012bc4 <cosf+0x28>
 8012c1c:	3f490fd8 	.word	0x3f490fd8
 8012c20:	00000000 	.word	0x00000000

08012c24 <sinf>:
 8012c24:	ee10 3a10 	vmov	r3, s0
 8012c28:	b507      	push	{r0, r1, r2, lr}
 8012c2a:	4a1f      	ldr	r2, [pc, #124]	@ (8012ca8 <sinf+0x84>)
 8012c2c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8012c30:	4293      	cmp	r3, r2
 8012c32:	d807      	bhi.n	8012c44 <sinf+0x20>
 8012c34:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8012cac <sinf+0x88>
 8012c38:	2000      	movs	r0, #0
 8012c3a:	b003      	add	sp, #12
 8012c3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8012c40:	f000 bc72 	b.w	8013528 <__kernel_sinf>
 8012c44:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8012c48:	d304      	bcc.n	8012c54 <sinf+0x30>
 8012c4a:	ee30 0a40 	vsub.f32	s0, s0, s0
 8012c4e:	b003      	add	sp, #12
 8012c50:	f85d fb04 	ldr.w	pc, [sp], #4
 8012c54:	4668      	mov	r0, sp
 8012c56:	f000 fd31 	bl	80136bc <__ieee754_rem_pio2f>
 8012c5a:	f000 0003 	and.w	r0, r0, #3
 8012c5e:	2801      	cmp	r0, #1
 8012c60:	d00a      	beq.n	8012c78 <sinf+0x54>
 8012c62:	2802      	cmp	r0, #2
 8012c64:	d00f      	beq.n	8012c86 <sinf+0x62>
 8012c66:	b9c0      	cbnz	r0, 8012c9a <sinf+0x76>
 8012c68:	eddd 0a01 	vldr	s1, [sp, #4]
 8012c6c:	ed9d 0a00 	vldr	s0, [sp]
 8012c70:	2001      	movs	r0, #1
 8012c72:	f000 fc59 	bl	8013528 <__kernel_sinf>
 8012c76:	e7ea      	b.n	8012c4e <sinf+0x2a>
 8012c78:	eddd 0a01 	vldr	s1, [sp, #4]
 8012c7c:	ed9d 0a00 	vldr	s0, [sp]
 8012c80:	f000 fbfa 	bl	8013478 <__kernel_cosf>
 8012c84:	e7e3      	b.n	8012c4e <sinf+0x2a>
 8012c86:	eddd 0a01 	vldr	s1, [sp, #4]
 8012c8a:	ed9d 0a00 	vldr	s0, [sp]
 8012c8e:	2001      	movs	r0, #1
 8012c90:	f000 fc4a 	bl	8013528 <__kernel_sinf>
 8012c94:	eeb1 0a40 	vneg.f32	s0, s0
 8012c98:	e7d9      	b.n	8012c4e <sinf+0x2a>
 8012c9a:	eddd 0a01 	vldr	s1, [sp, #4]
 8012c9e:	ed9d 0a00 	vldr	s0, [sp]
 8012ca2:	f000 fbe9 	bl	8013478 <__kernel_cosf>
 8012ca6:	e7f5      	b.n	8012c94 <sinf+0x70>
 8012ca8:	3f490fd8 	.word	0x3f490fd8
 8012cac:	00000000 	.word	0x00000000

08012cb0 <fmaxf>:
 8012cb0:	b508      	push	{r3, lr}
 8012cb2:	ed2d 8b02 	vpush	{d8}
 8012cb6:	eeb0 8a40 	vmov.f32	s16, s0
 8012cba:	eef0 8a60 	vmov.f32	s17, s1
 8012cbe:	f000 f831 	bl	8012d24 <__fpclassifyf>
 8012cc2:	b930      	cbnz	r0, 8012cd2 <fmaxf+0x22>
 8012cc4:	eeb0 8a68 	vmov.f32	s16, s17
 8012cc8:	eeb0 0a48 	vmov.f32	s0, s16
 8012ccc:	ecbd 8b02 	vpop	{d8}
 8012cd0:	bd08      	pop	{r3, pc}
 8012cd2:	eeb0 0a68 	vmov.f32	s0, s17
 8012cd6:	f000 f825 	bl	8012d24 <__fpclassifyf>
 8012cda:	2800      	cmp	r0, #0
 8012cdc:	d0f4      	beq.n	8012cc8 <fmaxf+0x18>
 8012cde:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8012ce2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ce6:	dded      	ble.n	8012cc4 <fmaxf+0x14>
 8012ce8:	e7ee      	b.n	8012cc8 <fmaxf+0x18>

08012cea <fminf>:
 8012cea:	b508      	push	{r3, lr}
 8012cec:	ed2d 8b02 	vpush	{d8}
 8012cf0:	eeb0 8a40 	vmov.f32	s16, s0
 8012cf4:	eef0 8a60 	vmov.f32	s17, s1
 8012cf8:	f000 f814 	bl	8012d24 <__fpclassifyf>
 8012cfc:	b930      	cbnz	r0, 8012d0c <fminf+0x22>
 8012cfe:	eeb0 8a68 	vmov.f32	s16, s17
 8012d02:	eeb0 0a48 	vmov.f32	s0, s16
 8012d06:	ecbd 8b02 	vpop	{d8}
 8012d0a:	bd08      	pop	{r3, pc}
 8012d0c:	eeb0 0a68 	vmov.f32	s0, s17
 8012d10:	f000 f808 	bl	8012d24 <__fpclassifyf>
 8012d14:	2800      	cmp	r0, #0
 8012d16:	d0f4      	beq.n	8012d02 <fminf+0x18>
 8012d18:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8012d1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d20:	d5ed      	bpl.n	8012cfe <fminf+0x14>
 8012d22:	e7ee      	b.n	8012d02 <fminf+0x18>

08012d24 <__fpclassifyf>:
 8012d24:	ee10 3a10 	vmov	r3, s0
 8012d28:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 8012d2c:	d00d      	beq.n	8012d4a <__fpclassifyf+0x26>
 8012d2e:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 8012d32:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 8012d36:	d30a      	bcc.n	8012d4e <__fpclassifyf+0x2a>
 8012d38:	4b07      	ldr	r3, [pc, #28]	@ (8012d58 <__fpclassifyf+0x34>)
 8012d3a:	1e42      	subs	r2, r0, #1
 8012d3c:	429a      	cmp	r2, r3
 8012d3e:	d908      	bls.n	8012d52 <__fpclassifyf+0x2e>
 8012d40:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 8012d44:	4258      	negs	r0, r3
 8012d46:	4158      	adcs	r0, r3
 8012d48:	4770      	bx	lr
 8012d4a:	2002      	movs	r0, #2
 8012d4c:	4770      	bx	lr
 8012d4e:	2004      	movs	r0, #4
 8012d50:	4770      	bx	lr
 8012d52:	2003      	movs	r0, #3
 8012d54:	4770      	bx	lr
 8012d56:	bf00      	nop
 8012d58:	007ffffe 	.word	0x007ffffe

08012d5c <__ieee754_sqrtf>:
 8012d5c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8012d60:	4770      	bx	lr
 8012d62:	0000      	movs	r0, r0
 8012d64:	0000      	movs	r0, r0
	...

08012d68 <__kernel_cos>:
 8012d68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d6c:	ec57 6b10 	vmov	r6, r7, d0
 8012d70:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8012d74:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8012d78:	ed8d 1b00 	vstr	d1, [sp]
 8012d7c:	d206      	bcs.n	8012d8c <__kernel_cos+0x24>
 8012d7e:	4630      	mov	r0, r6
 8012d80:	4639      	mov	r1, r7
 8012d82:	f7ed fe9f 	bl	8000ac4 <__aeabi_d2iz>
 8012d86:	2800      	cmp	r0, #0
 8012d88:	f000 8088 	beq.w	8012e9c <__kernel_cos+0x134>
 8012d8c:	4632      	mov	r2, r6
 8012d8e:	463b      	mov	r3, r7
 8012d90:	4630      	mov	r0, r6
 8012d92:	4639      	mov	r1, r7
 8012d94:	f7ed fbfc 	bl	8000590 <__aeabi_dmul>
 8012d98:	4b51      	ldr	r3, [pc, #324]	@ (8012ee0 <__kernel_cos+0x178>)
 8012d9a:	2200      	movs	r2, #0
 8012d9c:	4604      	mov	r4, r0
 8012d9e:	460d      	mov	r5, r1
 8012da0:	f7ed fbf6 	bl	8000590 <__aeabi_dmul>
 8012da4:	a340      	add	r3, pc, #256	@ (adr r3, 8012ea8 <__kernel_cos+0x140>)
 8012da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012daa:	4682      	mov	sl, r0
 8012dac:	468b      	mov	fp, r1
 8012dae:	4620      	mov	r0, r4
 8012db0:	4629      	mov	r1, r5
 8012db2:	f7ed fbed 	bl	8000590 <__aeabi_dmul>
 8012db6:	a33e      	add	r3, pc, #248	@ (adr r3, 8012eb0 <__kernel_cos+0x148>)
 8012db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dbc:	f7ed fa32 	bl	8000224 <__adddf3>
 8012dc0:	4622      	mov	r2, r4
 8012dc2:	462b      	mov	r3, r5
 8012dc4:	f7ed fbe4 	bl	8000590 <__aeabi_dmul>
 8012dc8:	a33b      	add	r3, pc, #236	@ (adr r3, 8012eb8 <__kernel_cos+0x150>)
 8012dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dce:	f7ed fa27 	bl	8000220 <__aeabi_dsub>
 8012dd2:	4622      	mov	r2, r4
 8012dd4:	462b      	mov	r3, r5
 8012dd6:	f7ed fbdb 	bl	8000590 <__aeabi_dmul>
 8012dda:	a339      	add	r3, pc, #228	@ (adr r3, 8012ec0 <__kernel_cos+0x158>)
 8012ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012de0:	f7ed fa20 	bl	8000224 <__adddf3>
 8012de4:	4622      	mov	r2, r4
 8012de6:	462b      	mov	r3, r5
 8012de8:	f7ed fbd2 	bl	8000590 <__aeabi_dmul>
 8012dec:	a336      	add	r3, pc, #216	@ (adr r3, 8012ec8 <__kernel_cos+0x160>)
 8012dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012df2:	f7ed fa15 	bl	8000220 <__aeabi_dsub>
 8012df6:	4622      	mov	r2, r4
 8012df8:	462b      	mov	r3, r5
 8012dfa:	f7ed fbc9 	bl	8000590 <__aeabi_dmul>
 8012dfe:	a334      	add	r3, pc, #208	@ (adr r3, 8012ed0 <__kernel_cos+0x168>)
 8012e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e04:	f7ed fa0e 	bl	8000224 <__adddf3>
 8012e08:	4622      	mov	r2, r4
 8012e0a:	462b      	mov	r3, r5
 8012e0c:	f7ed fbc0 	bl	8000590 <__aeabi_dmul>
 8012e10:	4622      	mov	r2, r4
 8012e12:	462b      	mov	r3, r5
 8012e14:	f7ed fbbc 	bl	8000590 <__aeabi_dmul>
 8012e18:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012e1c:	4604      	mov	r4, r0
 8012e1e:	460d      	mov	r5, r1
 8012e20:	4630      	mov	r0, r6
 8012e22:	4639      	mov	r1, r7
 8012e24:	f7ed fbb4 	bl	8000590 <__aeabi_dmul>
 8012e28:	460b      	mov	r3, r1
 8012e2a:	4602      	mov	r2, r0
 8012e2c:	4629      	mov	r1, r5
 8012e2e:	4620      	mov	r0, r4
 8012e30:	f7ed f9f6 	bl	8000220 <__aeabi_dsub>
 8012e34:	4b2b      	ldr	r3, [pc, #172]	@ (8012ee4 <__kernel_cos+0x17c>)
 8012e36:	4598      	cmp	r8, r3
 8012e38:	4606      	mov	r6, r0
 8012e3a:	460f      	mov	r7, r1
 8012e3c:	d810      	bhi.n	8012e60 <__kernel_cos+0xf8>
 8012e3e:	4602      	mov	r2, r0
 8012e40:	460b      	mov	r3, r1
 8012e42:	4650      	mov	r0, sl
 8012e44:	4659      	mov	r1, fp
 8012e46:	f7ed f9eb 	bl	8000220 <__aeabi_dsub>
 8012e4a:	460b      	mov	r3, r1
 8012e4c:	4926      	ldr	r1, [pc, #152]	@ (8012ee8 <__kernel_cos+0x180>)
 8012e4e:	4602      	mov	r2, r0
 8012e50:	2000      	movs	r0, #0
 8012e52:	f7ed f9e5 	bl	8000220 <__aeabi_dsub>
 8012e56:	ec41 0b10 	vmov	d0, r0, r1
 8012e5a:	b003      	add	sp, #12
 8012e5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e60:	4b22      	ldr	r3, [pc, #136]	@ (8012eec <__kernel_cos+0x184>)
 8012e62:	4921      	ldr	r1, [pc, #132]	@ (8012ee8 <__kernel_cos+0x180>)
 8012e64:	4598      	cmp	r8, r3
 8012e66:	bf8c      	ite	hi
 8012e68:	4d21      	ldrhi	r5, [pc, #132]	@ (8012ef0 <__kernel_cos+0x188>)
 8012e6a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8012e6e:	2400      	movs	r4, #0
 8012e70:	4622      	mov	r2, r4
 8012e72:	462b      	mov	r3, r5
 8012e74:	2000      	movs	r0, #0
 8012e76:	f7ed f9d3 	bl	8000220 <__aeabi_dsub>
 8012e7a:	4622      	mov	r2, r4
 8012e7c:	4680      	mov	r8, r0
 8012e7e:	4689      	mov	r9, r1
 8012e80:	462b      	mov	r3, r5
 8012e82:	4650      	mov	r0, sl
 8012e84:	4659      	mov	r1, fp
 8012e86:	f7ed f9cb 	bl	8000220 <__aeabi_dsub>
 8012e8a:	4632      	mov	r2, r6
 8012e8c:	463b      	mov	r3, r7
 8012e8e:	f7ed f9c7 	bl	8000220 <__aeabi_dsub>
 8012e92:	4602      	mov	r2, r0
 8012e94:	460b      	mov	r3, r1
 8012e96:	4640      	mov	r0, r8
 8012e98:	4649      	mov	r1, r9
 8012e9a:	e7da      	b.n	8012e52 <__kernel_cos+0xea>
 8012e9c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8012ed8 <__kernel_cos+0x170>
 8012ea0:	e7db      	b.n	8012e5a <__kernel_cos+0xf2>
 8012ea2:	bf00      	nop
 8012ea4:	f3af 8000 	nop.w
 8012ea8:	be8838d4 	.word	0xbe8838d4
 8012eac:	bda8fae9 	.word	0xbda8fae9
 8012eb0:	bdb4b1c4 	.word	0xbdb4b1c4
 8012eb4:	3e21ee9e 	.word	0x3e21ee9e
 8012eb8:	809c52ad 	.word	0x809c52ad
 8012ebc:	3e927e4f 	.word	0x3e927e4f
 8012ec0:	19cb1590 	.word	0x19cb1590
 8012ec4:	3efa01a0 	.word	0x3efa01a0
 8012ec8:	16c15177 	.word	0x16c15177
 8012ecc:	3f56c16c 	.word	0x3f56c16c
 8012ed0:	5555554c 	.word	0x5555554c
 8012ed4:	3fa55555 	.word	0x3fa55555
 8012ed8:	00000000 	.word	0x00000000
 8012edc:	3ff00000 	.word	0x3ff00000
 8012ee0:	3fe00000 	.word	0x3fe00000
 8012ee4:	3fd33332 	.word	0x3fd33332
 8012ee8:	3ff00000 	.word	0x3ff00000
 8012eec:	3fe90000 	.word	0x3fe90000
 8012ef0:	3fd20000 	.word	0x3fd20000
 8012ef4:	00000000 	.word	0x00000000

08012ef8 <__kernel_sin>:
 8012ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012efc:	ec55 4b10 	vmov	r4, r5, d0
 8012f00:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8012f04:	b085      	sub	sp, #20
 8012f06:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8012f0a:	ed8d 1b02 	vstr	d1, [sp, #8]
 8012f0e:	4680      	mov	r8, r0
 8012f10:	d205      	bcs.n	8012f1e <__kernel_sin+0x26>
 8012f12:	4620      	mov	r0, r4
 8012f14:	4629      	mov	r1, r5
 8012f16:	f7ed fdd5 	bl	8000ac4 <__aeabi_d2iz>
 8012f1a:	2800      	cmp	r0, #0
 8012f1c:	d052      	beq.n	8012fc4 <__kernel_sin+0xcc>
 8012f1e:	4622      	mov	r2, r4
 8012f20:	462b      	mov	r3, r5
 8012f22:	4620      	mov	r0, r4
 8012f24:	4629      	mov	r1, r5
 8012f26:	f7ed fb33 	bl	8000590 <__aeabi_dmul>
 8012f2a:	4682      	mov	sl, r0
 8012f2c:	468b      	mov	fp, r1
 8012f2e:	4602      	mov	r2, r0
 8012f30:	460b      	mov	r3, r1
 8012f32:	4620      	mov	r0, r4
 8012f34:	4629      	mov	r1, r5
 8012f36:	f7ed fb2b 	bl	8000590 <__aeabi_dmul>
 8012f3a:	a342      	add	r3, pc, #264	@ (adr r3, 8013044 <__kernel_sin+0x14c>)
 8012f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f40:	e9cd 0100 	strd	r0, r1, [sp]
 8012f44:	4650      	mov	r0, sl
 8012f46:	4659      	mov	r1, fp
 8012f48:	f7ed fb22 	bl	8000590 <__aeabi_dmul>
 8012f4c:	a33f      	add	r3, pc, #252	@ (adr r3, 801304c <__kernel_sin+0x154>)
 8012f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f52:	f7ed f965 	bl	8000220 <__aeabi_dsub>
 8012f56:	4652      	mov	r2, sl
 8012f58:	465b      	mov	r3, fp
 8012f5a:	f7ed fb19 	bl	8000590 <__aeabi_dmul>
 8012f5e:	a33d      	add	r3, pc, #244	@ (adr r3, 8013054 <__kernel_sin+0x15c>)
 8012f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f64:	f7ed f95e 	bl	8000224 <__adddf3>
 8012f68:	4652      	mov	r2, sl
 8012f6a:	465b      	mov	r3, fp
 8012f6c:	f7ed fb10 	bl	8000590 <__aeabi_dmul>
 8012f70:	a33a      	add	r3, pc, #232	@ (adr r3, 801305c <__kernel_sin+0x164>)
 8012f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f76:	f7ed f953 	bl	8000220 <__aeabi_dsub>
 8012f7a:	4652      	mov	r2, sl
 8012f7c:	465b      	mov	r3, fp
 8012f7e:	f7ed fb07 	bl	8000590 <__aeabi_dmul>
 8012f82:	a338      	add	r3, pc, #224	@ (adr r3, 8013064 <__kernel_sin+0x16c>)
 8012f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f88:	f7ed f94c 	bl	8000224 <__adddf3>
 8012f8c:	4606      	mov	r6, r0
 8012f8e:	460f      	mov	r7, r1
 8012f90:	f1b8 0f00 	cmp.w	r8, #0
 8012f94:	d11b      	bne.n	8012fce <__kernel_sin+0xd6>
 8012f96:	4602      	mov	r2, r0
 8012f98:	460b      	mov	r3, r1
 8012f9a:	4650      	mov	r0, sl
 8012f9c:	4659      	mov	r1, fp
 8012f9e:	f7ed faf7 	bl	8000590 <__aeabi_dmul>
 8012fa2:	a325      	add	r3, pc, #148	@ (adr r3, 8013038 <__kernel_sin+0x140>)
 8012fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fa8:	f7ed f93a 	bl	8000220 <__aeabi_dsub>
 8012fac:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012fb0:	f7ed faee 	bl	8000590 <__aeabi_dmul>
 8012fb4:	4602      	mov	r2, r0
 8012fb6:	460b      	mov	r3, r1
 8012fb8:	4620      	mov	r0, r4
 8012fba:	4629      	mov	r1, r5
 8012fbc:	f7ed f932 	bl	8000224 <__adddf3>
 8012fc0:	4604      	mov	r4, r0
 8012fc2:	460d      	mov	r5, r1
 8012fc4:	ec45 4b10 	vmov	d0, r4, r5
 8012fc8:	b005      	add	sp, #20
 8012fca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012fce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012fd2:	4b1b      	ldr	r3, [pc, #108]	@ (8013040 <__kernel_sin+0x148>)
 8012fd4:	2200      	movs	r2, #0
 8012fd6:	f7ed fadb 	bl	8000590 <__aeabi_dmul>
 8012fda:	4632      	mov	r2, r6
 8012fdc:	4680      	mov	r8, r0
 8012fde:	4689      	mov	r9, r1
 8012fe0:	463b      	mov	r3, r7
 8012fe2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012fe6:	f7ed fad3 	bl	8000590 <__aeabi_dmul>
 8012fea:	4602      	mov	r2, r0
 8012fec:	460b      	mov	r3, r1
 8012fee:	4640      	mov	r0, r8
 8012ff0:	4649      	mov	r1, r9
 8012ff2:	f7ed f915 	bl	8000220 <__aeabi_dsub>
 8012ff6:	4652      	mov	r2, sl
 8012ff8:	465b      	mov	r3, fp
 8012ffa:	f7ed fac9 	bl	8000590 <__aeabi_dmul>
 8012ffe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013002:	f7ed f90d 	bl	8000220 <__aeabi_dsub>
 8013006:	a30c      	add	r3, pc, #48	@ (adr r3, 8013038 <__kernel_sin+0x140>)
 8013008:	e9d3 2300 	ldrd	r2, r3, [r3]
 801300c:	4606      	mov	r6, r0
 801300e:	460f      	mov	r7, r1
 8013010:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013014:	f7ed fabc 	bl	8000590 <__aeabi_dmul>
 8013018:	4602      	mov	r2, r0
 801301a:	460b      	mov	r3, r1
 801301c:	4630      	mov	r0, r6
 801301e:	4639      	mov	r1, r7
 8013020:	f7ed f900 	bl	8000224 <__adddf3>
 8013024:	4602      	mov	r2, r0
 8013026:	460b      	mov	r3, r1
 8013028:	4620      	mov	r0, r4
 801302a:	4629      	mov	r1, r5
 801302c:	f7ed f8f8 	bl	8000220 <__aeabi_dsub>
 8013030:	e7c6      	b.n	8012fc0 <__kernel_sin+0xc8>
 8013032:	bf00      	nop
 8013034:	f3af 8000 	nop.w
 8013038:	55555549 	.word	0x55555549
 801303c:	3fc55555 	.word	0x3fc55555
 8013040:	3fe00000 	.word	0x3fe00000
 8013044:	5acfd57c 	.word	0x5acfd57c
 8013048:	3de5d93a 	.word	0x3de5d93a
 801304c:	8a2b9ceb 	.word	0x8a2b9ceb
 8013050:	3e5ae5e6 	.word	0x3e5ae5e6
 8013054:	57b1fe7d 	.word	0x57b1fe7d
 8013058:	3ec71de3 	.word	0x3ec71de3
 801305c:	19c161d5 	.word	0x19c161d5
 8013060:	3f2a01a0 	.word	0x3f2a01a0
 8013064:	1110f8a6 	.word	0x1110f8a6
 8013068:	3f811111 	.word	0x3f811111
 801306c:	00000000 	.word	0x00000000

08013070 <__ieee754_rem_pio2>:
 8013070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013074:	ec57 6b10 	vmov	r6, r7, d0
 8013078:	4bc5      	ldr	r3, [pc, #788]	@ (8013390 <__ieee754_rem_pio2+0x320>)
 801307a:	b08d      	sub	sp, #52	@ 0x34
 801307c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8013080:	4598      	cmp	r8, r3
 8013082:	4604      	mov	r4, r0
 8013084:	9704      	str	r7, [sp, #16]
 8013086:	d807      	bhi.n	8013098 <__ieee754_rem_pio2+0x28>
 8013088:	2200      	movs	r2, #0
 801308a:	2300      	movs	r3, #0
 801308c:	ed80 0b00 	vstr	d0, [r0]
 8013090:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8013094:	2500      	movs	r5, #0
 8013096:	e028      	b.n	80130ea <__ieee754_rem_pio2+0x7a>
 8013098:	4bbe      	ldr	r3, [pc, #760]	@ (8013394 <__ieee754_rem_pio2+0x324>)
 801309a:	4598      	cmp	r8, r3
 801309c:	d878      	bhi.n	8013190 <__ieee754_rem_pio2+0x120>
 801309e:	9b04      	ldr	r3, [sp, #16]
 80130a0:	4dbd      	ldr	r5, [pc, #756]	@ (8013398 <__ieee754_rem_pio2+0x328>)
 80130a2:	2b00      	cmp	r3, #0
 80130a4:	4630      	mov	r0, r6
 80130a6:	a3ac      	add	r3, pc, #688	@ (adr r3, 8013358 <__ieee754_rem_pio2+0x2e8>)
 80130a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130ac:	4639      	mov	r1, r7
 80130ae:	dd38      	ble.n	8013122 <__ieee754_rem_pio2+0xb2>
 80130b0:	f7ed f8b6 	bl	8000220 <__aeabi_dsub>
 80130b4:	45a8      	cmp	r8, r5
 80130b6:	4606      	mov	r6, r0
 80130b8:	460f      	mov	r7, r1
 80130ba:	d01a      	beq.n	80130f2 <__ieee754_rem_pio2+0x82>
 80130bc:	a3a8      	add	r3, pc, #672	@ (adr r3, 8013360 <__ieee754_rem_pio2+0x2f0>)
 80130be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130c2:	f7ed f8ad 	bl	8000220 <__aeabi_dsub>
 80130c6:	4602      	mov	r2, r0
 80130c8:	460b      	mov	r3, r1
 80130ca:	4680      	mov	r8, r0
 80130cc:	4689      	mov	r9, r1
 80130ce:	4630      	mov	r0, r6
 80130d0:	4639      	mov	r1, r7
 80130d2:	f7ed f8a5 	bl	8000220 <__aeabi_dsub>
 80130d6:	a3a2      	add	r3, pc, #648	@ (adr r3, 8013360 <__ieee754_rem_pio2+0x2f0>)
 80130d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130dc:	f7ed f8a0 	bl	8000220 <__aeabi_dsub>
 80130e0:	e9c4 8900 	strd	r8, r9, [r4]
 80130e4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80130e8:	2501      	movs	r5, #1
 80130ea:	4628      	mov	r0, r5
 80130ec:	b00d      	add	sp, #52	@ 0x34
 80130ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80130f2:	a39d      	add	r3, pc, #628	@ (adr r3, 8013368 <__ieee754_rem_pio2+0x2f8>)
 80130f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130f8:	f7ed f892 	bl	8000220 <__aeabi_dsub>
 80130fc:	a39c      	add	r3, pc, #624	@ (adr r3, 8013370 <__ieee754_rem_pio2+0x300>)
 80130fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013102:	4606      	mov	r6, r0
 8013104:	460f      	mov	r7, r1
 8013106:	f7ed f88b 	bl	8000220 <__aeabi_dsub>
 801310a:	4602      	mov	r2, r0
 801310c:	460b      	mov	r3, r1
 801310e:	4680      	mov	r8, r0
 8013110:	4689      	mov	r9, r1
 8013112:	4630      	mov	r0, r6
 8013114:	4639      	mov	r1, r7
 8013116:	f7ed f883 	bl	8000220 <__aeabi_dsub>
 801311a:	a395      	add	r3, pc, #596	@ (adr r3, 8013370 <__ieee754_rem_pio2+0x300>)
 801311c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013120:	e7dc      	b.n	80130dc <__ieee754_rem_pio2+0x6c>
 8013122:	f7ed f87f 	bl	8000224 <__adddf3>
 8013126:	45a8      	cmp	r8, r5
 8013128:	4606      	mov	r6, r0
 801312a:	460f      	mov	r7, r1
 801312c:	d018      	beq.n	8013160 <__ieee754_rem_pio2+0xf0>
 801312e:	a38c      	add	r3, pc, #560	@ (adr r3, 8013360 <__ieee754_rem_pio2+0x2f0>)
 8013130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013134:	f7ed f876 	bl	8000224 <__adddf3>
 8013138:	4602      	mov	r2, r0
 801313a:	460b      	mov	r3, r1
 801313c:	4680      	mov	r8, r0
 801313e:	4689      	mov	r9, r1
 8013140:	4630      	mov	r0, r6
 8013142:	4639      	mov	r1, r7
 8013144:	f7ed f86c 	bl	8000220 <__aeabi_dsub>
 8013148:	a385      	add	r3, pc, #532	@ (adr r3, 8013360 <__ieee754_rem_pio2+0x2f0>)
 801314a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801314e:	f7ed f869 	bl	8000224 <__adddf3>
 8013152:	f04f 35ff 	mov.w	r5, #4294967295
 8013156:	e9c4 8900 	strd	r8, r9, [r4]
 801315a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801315e:	e7c4      	b.n	80130ea <__ieee754_rem_pio2+0x7a>
 8013160:	a381      	add	r3, pc, #516	@ (adr r3, 8013368 <__ieee754_rem_pio2+0x2f8>)
 8013162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013166:	f7ed f85d 	bl	8000224 <__adddf3>
 801316a:	a381      	add	r3, pc, #516	@ (adr r3, 8013370 <__ieee754_rem_pio2+0x300>)
 801316c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013170:	4606      	mov	r6, r0
 8013172:	460f      	mov	r7, r1
 8013174:	f7ed f856 	bl	8000224 <__adddf3>
 8013178:	4602      	mov	r2, r0
 801317a:	460b      	mov	r3, r1
 801317c:	4680      	mov	r8, r0
 801317e:	4689      	mov	r9, r1
 8013180:	4630      	mov	r0, r6
 8013182:	4639      	mov	r1, r7
 8013184:	f7ed f84c 	bl	8000220 <__aeabi_dsub>
 8013188:	a379      	add	r3, pc, #484	@ (adr r3, 8013370 <__ieee754_rem_pio2+0x300>)
 801318a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801318e:	e7de      	b.n	801314e <__ieee754_rem_pio2+0xde>
 8013190:	4b82      	ldr	r3, [pc, #520]	@ (801339c <__ieee754_rem_pio2+0x32c>)
 8013192:	4598      	cmp	r8, r3
 8013194:	f200 80d1 	bhi.w	801333a <__ieee754_rem_pio2+0x2ca>
 8013198:	f000 f966 	bl	8013468 <fabs>
 801319c:	ec57 6b10 	vmov	r6, r7, d0
 80131a0:	a375      	add	r3, pc, #468	@ (adr r3, 8013378 <__ieee754_rem_pio2+0x308>)
 80131a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131a6:	4630      	mov	r0, r6
 80131a8:	4639      	mov	r1, r7
 80131aa:	f7ed f9f1 	bl	8000590 <__aeabi_dmul>
 80131ae:	4b7c      	ldr	r3, [pc, #496]	@ (80133a0 <__ieee754_rem_pio2+0x330>)
 80131b0:	2200      	movs	r2, #0
 80131b2:	f7ed f837 	bl	8000224 <__adddf3>
 80131b6:	f7ed fc85 	bl	8000ac4 <__aeabi_d2iz>
 80131ba:	4605      	mov	r5, r0
 80131bc:	f7ed f97e 	bl	80004bc <__aeabi_i2d>
 80131c0:	4602      	mov	r2, r0
 80131c2:	460b      	mov	r3, r1
 80131c4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80131c8:	a363      	add	r3, pc, #396	@ (adr r3, 8013358 <__ieee754_rem_pio2+0x2e8>)
 80131ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131ce:	f7ed f9df 	bl	8000590 <__aeabi_dmul>
 80131d2:	4602      	mov	r2, r0
 80131d4:	460b      	mov	r3, r1
 80131d6:	4630      	mov	r0, r6
 80131d8:	4639      	mov	r1, r7
 80131da:	f7ed f821 	bl	8000220 <__aeabi_dsub>
 80131de:	a360      	add	r3, pc, #384	@ (adr r3, 8013360 <__ieee754_rem_pio2+0x2f0>)
 80131e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131e4:	4682      	mov	sl, r0
 80131e6:	468b      	mov	fp, r1
 80131e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80131ec:	f7ed f9d0 	bl	8000590 <__aeabi_dmul>
 80131f0:	2d1f      	cmp	r5, #31
 80131f2:	4606      	mov	r6, r0
 80131f4:	460f      	mov	r7, r1
 80131f6:	dc0c      	bgt.n	8013212 <__ieee754_rem_pio2+0x1a2>
 80131f8:	4b6a      	ldr	r3, [pc, #424]	@ (80133a4 <__ieee754_rem_pio2+0x334>)
 80131fa:	1e6a      	subs	r2, r5, #1
 80131fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013200:	4543      	cmp	r3, r8
 8013202:	d006      	beq.n	8013212 <__ieee754_rem_pio2+0x1a2>
 8013204:	4632      	mov	r2, r6
 8013206:	463b      	mov	r3, r7
 8013208:	4650      	mov	r0, sl
 801320a:	4659      	mov	r1, fp
 801320c:	f7ed f808 	bl	8000220 <__aeabi_dsub>
 8013210:	e00e      	b.n	8013230 <__ieee754_rem_pio2+0x1c0>
 8013212:	463b      	mov	r3, r7
 8013214:	4632      	mov	r2, r6
 8013216:	4650      	mov	r0, sl
 8013218:	4659      	mov	r1, fp
 801321a:	f7ed f801 	bl	8000220 <__aeabi_dsub>
 801321e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8013222:	9305      	str	r3, [sp, #20]
 8013224:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8013228:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 801322c:	2b10      	cmp	r3, #16
 801322e:	dc02      	bgt.n	8013236 <__ieee754_rem_pio2+0x1c6>
 8013230:	e9c4 0100 	strd	r0, r1, [r4]
 8013234:	e039      	b.n	80132aa <__ieee754_rem_pio2+0x23a>
 8013236:	a34c      	add	r3, pc, #304	@ (adr r3, 8013368 <__ieee754_rem_pio2+0x2f8>)
 8013238:	e9d3 2300 	ldrd	r2, r3, [r3]
 801323c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013240:	f7ed f9a6 	bl	8000590 <__aeabi_dmul>
 8013244:	4606      	mov	r6, r0
 8013246:	460f      	mov	r7, r1
 8013248:	4602      	mov	r2, r0
 801324a:	460b      	mov	r3, r1
 801324c:	4650      	mov	r0, sl
 801324e:	4659      	mov	r1, fp
 8013250:	f7ec ffe6 	bl	8000220 <__aeabi_dsub>
 8013254:	4602      	mov	r2, r0
 8013256:	460b      	mov	r3, r1
 8013258:	4680      	mov	r8, r0
 801325a:	4689      	mov	r9, r1
 801325c:	4650      	mov	r0, sl
 801325e:	4659      	mov	r1, fp
 8013260:	f7ec ffde 	bl	8000220 <__aeabi_dsub>
 8013264:	4632      	mov	r2, r6
 8013266:	463b      	mov	r3, r7
 8013268:	f7ec ffda 	bl	8000220 <__aeabi_dsub>
 801326c:	a340      	add	r3, pc, #256	@ (adr r3, 8013370 <__ieee754_rem_pio2+0x300>)
 801326e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013272:	4606      	mov	r6, r0
 8013274:	460f      	mov	r7, r1
 8013276:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801327a:	f7ed f989 	bl	8000590 <__aeabi_dmul>
 801327e:	4632      	mov	r2, r6
 8013280:	463b      	mov	r3, r7
 8013282:	f7ec ffcd 	bl	8000220 <__aeabi_dsub>
 8013286:	4602      	mov	r2, r0
 8013288:	460b      	mov	r3, r1
 801328a:	4606      	mov	r6, r0
 801328c:	460f      	mov	r7, r1
 801328e:	4640      	mov	r0, r8
 8013290:	4649      	mov	r1, r9
 8013292:	f7ec ffc5 	bl	8000220 <__aeabi_dsub>
 8013296:	9a05      	ldr	r2, [sp, #20]
 8013298:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801329c:	1ad3      	subs	r3, r2, r3
 801329e:	2b31      	cmp	r3, #49	@ 0x31
 80132a0:	dc20      	bgt.n	80132e4 <__ieee754_rem_pio2+0x274>
 80132a2:	e9c4 0100 	strd	r0, r1, [r4]
 80132a6:	46c2      	mov	sl, r8
 80132a8:	46cb      	mov	fp, r9
 80132aa:	e9d4 8900 	ldrd	r8, r9, [r4]
 80132ae:	4650      	mov	r0, sl
 80132b0:	4642      	mov	r2, r8
 80132b2:	464b      	mov	r3, r9
 80132b4:	4659      	mov	r1, fp
 80132b6:	f7ec ffb3 	bl	8000220 <__aeabi_dsub>
 80132ba:	463b      	mov	r3, r7
 80132bc:	4632      	mov	r2, r6
 80132be:	f7ec ffaf 	bl	8000220 <__aeabi_dsub>
 80132c2:	9b04      	ldr	r3, [sp, #16]
 80132c4:	2b00      	cmp	r3, #0
 80132c6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80132ca:	f6bf af0e 	bge.w	80130ea <__ieee754_rem_pio2+0x7a>
 80132ce:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 80132d2:	6063      	str	r3, [r4, #4]
 80132d4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80132d8:	f8c4 8000 	str.w	r8, [r4]
 80132dc:	60a0      	str	r0, [r4, #8]
 80132de:	60e3      	str	r3, [r4, #12]
 80132e0:	426d      	negs	r5, r5
 80132e2:	e702      	b.n	80130ea <__ieee754_rem_pio2+0x7a>
 80132e4:	a326      	add	r3, pc, #152	@ (adr r3, 8013380 <__ieee754_rem_pio2+0x310>)
 80132e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80132ee:	f7ed f94f 	bl	8000590 <__aeabi_dmul>
 80132f2:	4606      	mov	r6, r0
 80132f4:	460f      	mov	r7, r1
 80132f6:	4602      	mov	r2, r0
 80132f8:	460b      	mov	r3, r1
 80132fa:	4640      	mov	r0, r8
 80132fc:	4649      	mov	r1, r9
 80132fe:	f7ec ff8f 	bl	8000220 <__aeabi_dsub>
 8013302:	4602      	mov	r2, r0
 8013304:	460b      	mov	r3, r1
 8013306:	4682      	mov	sl, r0
 8013308:	468b      	mov	fp, r1
 801330a:	4640      	mov	r0, r8
 801330c:	4649      	mov	r1, r9
 801330e:	f7ec ff87 	bl	8000220 <__aeabi_dsub>
 8013312:	4632      	mov	r2, r6
 8013314:	463b      	mov	r3, r7
 8013316:	f7ec ff83 	bl	8000220 <__aeabi_dsub>
 801331a:	a31b      	add	r3, pc, #108	@ (adr r3, 8013388 <__ieee754_rem_pio2+0x318>)
 801331c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013320:	4606      	mov	r6, r0
 8013322:	460f      	mov	r7, r1
 8013324:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013328:	f7ed f932 	bl	8000590 <__aeabi_dmul>
 801332c:	4632      	mov	r2, r6
 801332e:	463b      	mov	r3, r7
 8013330:	f7ec ff76 	bl	8000220 <__aeabi_dsub>
 8013334:	4606      	mov	r6, r0
 8013336:	460f      	mov	r7, r1
 8013338:	e764      	b.n	8013204 <__ieee754_rem_pio2+0x194>
 801333a:	4b1b      	ldr	r3, [pc, #108]	@ (80133a8 <__ieee754_rem_pio2+0x338>)
 801333c:	4598      	cmp	r8, r3
 801333e:	d935      	bls.n	80133ac <__ieee754_rem_pio2+0x33c>
 8013340:	4632      	mov	r2, r6
 8013342:	463b      	mov	r3, r7
 8013344:	4630      	mov	r0, r6
 8013346:	4639      	mov	r1, r7
 8013348:	f7ec ff6a 	bl	8000220 <__aeabi_dsub>
 801334c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8013350:	e9c4 0100 	strd	r0, r1, [r4]
 8013354:	e69e      	b.n	8013094 <__ieee754_rem_pio2+0x24>
 8013356:	bf00      	nop
 8013358:	54400000 	.word	0x54400000
 801335c:	3ff921fb 	.word	0x3ff921fb
 8013360:	1a626331 	.word	0x1a626331
 8013364:	3dd0b461 	.word	0x3dd0b461
 8013368:	1a600000 	.word	0x1a600000
 801336c:	3dd0b461 	.word	0x3dd0b461
 8013370:	2e037073 	.word	0x2e037073
 8013374:	3ba3198a 	.word	0x3ba3198a
 8013378:	6dc9c883 	.word	0x6dc9c883
 801337c:	3fe45f30 	.word	0x3fe45f30
 8013380:	2e000000 	.word	0x2e000000
 8013384:	3ba3198a 	.word	0x3ba3198a
 8013388:	252049c1 	.word	0x252049c1
 801338c:	397b839a 	.word	0x397b839a
 8013390:	3fe921fb 	.word	0x3fe921fb
 8013394:	4002d97b 	.word	0x4002d97b
 8013398:	3ff921fb 	.word	0x3ff921fb
 801339c:	413921fb 	.word	0x413921fb
 80133a0:	3fe00000 	.word	0x3fe00000
 80133a4:	08014878 	.word	0x08014878
 80133a8:	7fefffff 	.word	0x7fefffff
 80133ac:	ea4f 5528 	mov.w	r5, r8, asr #20
 80133b0:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 80133b4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80133b8:	4630      	mov	r0, r6
 80133ba:	460f      	mov	r7, r1
 80133bc:	f7ed fb82 	bl	8000ac4 <__aeabi_d2iz>
 80133c0:	f7ed f87c 	bl	80004bc <__aeabi_i2d>
 80133c4:	4602      	mov	r2, r0
 80133c6:	460b      	mov	r3, r1
 80133c8:	4630      	mov	r0, r6
 80133ca:	4639      	mov	r1, r7
 80133cc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80133d0:	f7ec ff26 	bl	8000220 <__aeabi_dsub>
 80133d4:	4b22      	ldr	r3, [pc, #136]	@ (8013460 <__ieee754_rem_pio2+0x3f0>)
 80133d6:	2200      	movs	r2, #0
 80133d8:	f7ed f8da 	bl	8000590 <__aeabi_dmul>
 80133dc:	460f      	mov	r7, r1
 80133de:	4606      	mov	r6, r0
 80133e0:	f7ed fb70 	bl	8000ac4 <__aeabi_d2iz>
 80133e4:	f7ed f86a 	bl	80004bc <__aeabi_i2d>
 80133e8:	4602      	mov	r2, r0
 80133ea:	460b      	mov	r3, r1
 80133ec:	4630      	mov	r0, r6
 80133ee:	4639      	mov	r1, r7
 80133f0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80133f4:	f7ec ff14 	bl	8000220 <__aeabi_dsub>
 80133f8:	4b19      	ldr	r3, [pc, #100]	@ (8013460 <__ieee754_rem_pio2+0x3f0>)
 80133fa:	2200      	movs	r2, #0
 80133fc:	f7ed f8c8 	bl	8000590 <__aeabi_dmul>
 8013400:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8013404:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8013408:	f04f 0803 	mov.w	r8, #3
 801340c:	2600      	movs	r6, #0
 801340e:	2700      	movs	r7, #0
 8013410:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8013414:	4632      	mov	r2, r6
 8013416:	463b      	mov	r3, r7
 8013418:	46c2      	mov	sl, r8
 801341a:	f108 38ff 	add.w	r8, r8, #4294967295
 801341e:	f7ed fb1f 	bl	8000a60 <__aeabi_dcmpeq>
 8013422:	2800      	cmp	r0, #0
 8013424:	d1f4      	bne.n	8013410 <__ieee754_rem_pio2+0x3a0>
 8013426:	4b0f      	ldr	r3, [pc, #60]	@ (8013464 <__ieee754_rem_pio2+0x3f4>)
 8013428:	9301      	str	r3, [sp, #4]
 801342a:	2302      	movs	r3, #2
 801342c:	9300      	str	r3, [sp, #0]
 801342e:	462a      	mov	r2, r5
 8013430:	4653      	mov	r3, sl
 8013432:	4621      	mov	r1, r4
 8013434:	a806      	add	r0, sp, #24
 8013436:	f000 fb5b 	bl	8013af0 <__kernel_rem_pio2>
 801343a:	9b04      	ldr	r3, [sp, #16]
 801343c:	2b00      	cmp	r3, #0
 801343e:	4605      	mov	r5, r0
 8013440:	f6bf ae53 	bge.w	80130ea <__ieee754_rem_pio2+0x7a>
 8013444:	e9d4 2100 	ldrd	r2, r1, [r4]
 8013448:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801344c:	e9c4 2300 	strd	r2, r3, [r4]
 8013450:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8013454:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013458:	e9c4 2302 	strd	r2, r3, [r4, #8]
 801345c:	e740      	b.n	80132e0 <__ieee754_rem_pio2+0x270>
 801345e:	bf00      	nop
 8013460:	41700000 	.word	0x41700000
 8013464:	080148f8 	.word	0x080148f8

08013468 <fabs>:
 8013468:	ec51 0b10 	vmov	r0, r1, d0
 801346c:	4602      	mov	r2, r0
 801346e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8013472:	ec43 2b10 	vmov	d0, r2, r3
 8013476:	4770      	bx	lr

08013478 <__kernel_cosf>:
 8013478:	ee10 3a10 	vmov	r3, s0
 801347c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8013480:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8013484:	eef0 6a40 	vmov.f32	s13, s0
 8013488:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801348c:	d204      	bcs.n	8013498 <__kernel_cosf+0x20>
 801348e:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8013492:	ee17 2a90 	vmov	r2, s15
 8013496:	b342      	cbz	r2, 80134ea <__kernel_cosf+0x72>
 8013498:	ee26 7aa6 	vmul.f32	s14, s13, s13
 801349c:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8013508 <__kernel_cosf+0x90>
 80134a0:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 801350c <__kernel_cosf+0x94>
 80134a4:	4a1a      	ldr	r2, [pc, #104]	@ (8013510 <__kernel_cosf+0x98>)
 80134a6:	eea7 6a27 	vfma.f32	s12, s14, s15
 80134aa:	4293      	cmp	r3, r2
 80134ac:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8013514 <__kernel_cosf+0x9c>
 80134b0:	eee6 7a07 	vfma.f32	s15, s12, s14
 80134b4:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8013518 <__kernel_cosf+0xa0>
 80134b8:	eea7 6a87 	vfma.f32	s12, s15, s14
 80134bc:	eddf 7a17 	vldr	s15, [pc, #92]	@ 801351c <__kernel_cosf+0xa4>
 80134c0:	eee6 7a07 	vfma.f32	s15, s12, s14
 80134c4:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8013520 <__kernel_cosf+0xa8>
 80134c8:	eea7 6a87 	vfma.f32	s12, s15, s14
 80134cc:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 80134d0:	ee26 6a07 	vmul.f32	s12, s12, s14
 80134d4:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80134d8:	eee7 0a06 	vfma.f32	s1, s14, s12
 80134dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80134e0:	d804      	bhi.n	80134ec <__kernel_cosf+0x74>
 80134e2:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80134e6:	ee30 0a67 	vsub.f32	s0, s0, s15
 80134ea:	4770      	bx	lr
 80134ec:	4a0d      	ldr	r2, [pc, #52]	@ (8013524 <__kernel_cosf+0xac>)
 80134ee:	4293      	cmp	r3, r2
 80134f0:	bf9a      	itte	ls
 80134f2:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 80134f6:	ee07 3a10 	vmovls	s14, r3
 80134fa:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 80134fe:	ee30 0a47 	vsub.f32	s0, s0, s14
 8013502:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013506:	e7ec      	b.n	80134e2 <__kernel_cosf+0x6a>
 8013508:	ad47d74e 	.word	0xad47d74e
 801350c:	310f74f6 	.word	0x310f74f6
 8013510:	3e999999 	.word	0x3e999999
 8013514:	b493f27c 	.word	0xb493f27c
 8013518:	37d00d01 	.word	0x37d00d01
 801351c:	bab60b61 	.word	0xbab60b61
 8013520:	3d2aaaab 	.word	0x3d2aaaab
 8013524:	3f480000 	.word	0x3f480000

08013528 <__kernel_sinf>:
 8013528:	ee10 3a10 	vmov	r3, s0
 801352c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8013530:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8013534:	d204      	bcs.n	8013540 <__kernel_sinf+0x18>
 8013536:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801353a:	ee17 3a90 	vmov	r3, s15
 801353e:	b35b      	cbz	r3, 8013598 <__kernel_sinf+0x70>
 8013540:	ee20 7a00 	vmul.f32	s14, s0, s0
 8013544:	eddf 7a15 	vldr	s15, [pc, #84]	@ 801359c <__kernel_sinf+0x74>
 8013548:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 80135a0 <__kernel_sinf+0x78>
 801354c:	eea7 6a27 	vfma.f32	s12, s14, s15
 8013550:	eddf 7a14 	vldr	s15, [pc, #80]	@ 80135a4 <__kernel_sinf+0x7c>
 8013554:	eee6 7a07 	vfma.f32	s15, s12, s14
 8013558:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 80135a8 <__kernel_sinf+0x80>
 801355c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8013560:	eddf 7a12 	vldr	s15, [pc, #72]	@ 80135ac <__kernel_sinf+0x84>
 8013564:	ee60 6a07 	vmul.f32	s13, s0, s14
 8013568:	eee6 7a07 	vfma.f32	s15, s12, s14
 801356c:	b930      	cbnz	r0, 801357c <__kernel_sinf+0x54>
 801356e:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 80135b0 <__kernel_sinf+0x88>
 8013572:	eea7 6a27 	vfma.f32	s12, s14, s15
 8013576:	eea6 0a26 	vfma.f32	s0, s12, s13
 801357a:	4770      	bx	lr
 801357c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8013580:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8013584:	eee0 7a86 	vfma.f32	s15, s1, s12
 8013588:	eed7 0a87 	vfnms.f32	s1, s15, s14
 801358c:	eddf 7a09 	vldr	s15, [pc, #36]	@ 80135b4 <__kernel_sinf+0x8c>
 8013590:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8013594:	ee30 0a60 	vsub.f32	s0, s0, s1
 8013598:	4770      	bx	lr
 801359a:	bf00      	nop
 801359c:	2f2ec9d3 	.word	0x2f2ec9d3
 80135a0:	b2d72f34 	.word	0xb2d72f34
 80135a4:	3638ef1b 	.word	0x3638ef1b
 80135a8:	b9500d01 	.word	0xb9500d01
 80135ac:	3c088889 	.word	0x3c088889
 80135b0:	be2aaaab 	.word	0xbe2aaaab
 80135b4:	3e2aaaab 	.word	0x3e2aaaab

080135b8 <__ieee754_fmodf>:
 80135b8:	b570      	push	{r4, r5, r6, lr}
 80135ba:	ee10 6a90 	vmov	r6, s1
 80135be:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 80135c2:	1e5a      	subs	r2, r3, #1
 80135c4:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80135c8:	d206      	bcs.n	80135d8 <__ieee754_fmodf+0x20>
 80135ca:	ee10 4a10 	vmov	r4, s0
 80135ce:	f024 4100 	bic.w	r1, r4, #2147483648	@ 0x80000000
 80135d2:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80135d6:	d304      	bcc.n	80135e2 <__ieee754_fmodf+0x2a>
 80135d8:	ee60 0a20 	vmul.f32	s1, s0, s1
 80135dc:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 80135e0:	bd70      	pop	{r4, r5, r6, pc}
 80135e2:	4299      	cmp	r1, r3
 80135e4:	dbfc      	blt.n	80135e0 <__ieee754_fmodf+0x28>
 80135e6:	f004 4500 	and.w	r5, r4, #2147483648	@ 0x80000000
 80135ea:	d105      	bne.n	80135f8 <__ieee754_fmodf+0x40>
 80135ec:	4b32      	ldr	r3, [pc, #200]	@ (80136b8 <__ieee754_fmodf+0x100>)
 80135ee:	eb03 7355 	add.w	r3, r3, r5, lsr #29
 80135f2:	ed93 0a00 	vldr	s0, [r3]
 80135f6:	e7f3      	b.n	80135e0 <__ieee754_fmodf+0x28>
 80135f8:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 80135fc:	d146      	bne.n	801368c <__ieee754_fmodf+0xd4>
 80135fe:	020a      	lsls	r2, r1, #8
 8013600:	f06f 007d 	mvn.w	r0, #125	@ 0x7d
 8013604:	2a00      	cmp	r2, #0
 8013606:	dc3e      	bgt.n	8013686 <__ieee754_fmodf+0xce>
 8013608:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 801360c:	bf01      	itttt	eq
 801360e:	021a      	lsleq	r2, r3, #8
 8013610:	fab2 f282 	clzeq	r2, r2
 8013614:	f1c2 22ff 	rsbeq	r2, r2, #4278255360	@ 0xff00ff00
 8013618:	f502 027f 	addeq.w	r2, r2, #16711680	@ 0xff0000
 801361c:	bf16      	itet	ne
 801361e:	15da      	asrne	r2, r3, #23
 8013620:	3282      	addeq	r2, #130	@ 0x82
 8013622:	3a7f      	subne	r2, #127	@ 0x7f
 8013624:	f110 0f7e 	cmn.w	r0, #126	@ 0x7e
 8013628:	bfbb      	ittet	lt
 801362a:	f06f 047d 	mvnlt.w	r4, #125	@ 0x7d
 801362e:	1a24      	sublt	r4, r4, r0
 8013630:	f3c4 0416 	ubfxge	r4, r4, #0, #23
 8013634:	40a1      	lsllt	r1, r4
 8013636:	bfa8      	it	ge
 8013638:	f444 0100 	orrge.w	r1, r4, #8388608	@ 0x800000
 801363c:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 8013640:	bfb5      	itete	lt
 8013642:	f06f 047d 	mvnlt.w	r4, #125	@ 0x7d
 8013646:	f3c6 0616 	ubfxge	r6, r6, #0, #23
 801364a:	1aa4      	sublt	r4, r4, r2
 801364c:	f446 0400 	orrge.w	r4, r6, #8388608	@ 0x800000
 8013650:	bfb8      	it	lt
 8013652:	fa03 f404 	lsllt.w	r4, r3, r4
 8013656:	1a80      	subs	r0, r0, r2
 8013658:	1b0b      	subs	r3, r1, r4
 801365a:	b9d0      	cbnz	r0, 8013692 <__ieee754_fmodf+0xda>
 801365c:	ea33 0323 	bics.w	r3, r3, r3, asr #32
 8013660:	bf28      	it	cs
 8013662:	460b      	movcs	r3, r1
 8013664:	2b00      	cmp	r3, #0
 8013666:	d0c1      	beq.n	80135ec <__ieee754_fmodf+0x34>
 8013668:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801366c:	db19      	blt.n	80136a2 <__ieee754_fmodf+0xea>
 801366e:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 8013672:	db19      	blt.n	80136a8 <__ieee754_fmodf+0xf0>
 8013674:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8013678:	327f      	adds	r2, #127	@ 0x7f
 801367a:	432b      	orrs	r3, r5
 801367c:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8013680:	ee00 3a10 	vmov	s0, r3
 8013684:	e7ac      	b.n	80135e0 <__ieee754_fmodf+0x28>
 8013686:	3801      	subs	r0, #1
 8013688:	0052      	lsls	r2, r2, #1
 801368a:	e7bb      	b.n	8013604 <__ieee754_fmodf+0x4c>
 801368c:	15c8      	asrs	r0, r1, #23
 801368e:	387f      	subs	r0, #127	@ 0x7f
 8013690:	e7ba      	b.n	8013608 <__ieee754_fmodf+0x50>
 8013692:	2b00      	cmp	r3, #0
 8013694:	da02      	bge.n	801369c <__ieee754_fmodf+0xe4>
 8013696:	0049      	lsls	r1, r1, #1
 8013698:	3801      	subs	r0, #1
 801369a:	e7dd      	b.n	8013658 <__ieee754_fmodf+0xa0>
 801369c:	d0a6      	beq.n	80135ec <__ieee754_fmodf+0x34>
 801369e:	0059      	lsls	r1, r3, #1
 80136a0:	e7fa      	b.n	8013698 <__ieee754_fmodf+0xe0>
 80136a2:	005b      	lsls	r3, r3, #1
 80136a4:	3a01      	subs	r2, #1
 80136a6:	e7df      	b.n	8013668 <__ieee754_fmodf+0xb0>
 80136a8:	f1c2 22ff 	rsb	r2, r2, #4278255360	@ 0xff00ff00
 80136ac:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 80136b0:	3282      	adds	r2, #130	@ 0x82
 80136b2:	4113      	asrs	r3, r2
 80136b4:	432b      	orrs	r3, r5
 80136b6:	e7e3      	b.n	8013680 <__ieee754_fmodf+0xc8>
 80136b8:	08014a00 	.word	0x08014a00

080136bc <__ieee754_rem_pio2f>:
 80136bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80136be:	ee10 6a10 	vmov	r6, s0
 80136c2:	4b88      	ldr	r3, [pc, #544]	@ (80138e4 <__ieee754_rem_pio2f+0x228>)
 80136c4:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 80136c8:	429d      	cmp	r5, r3
 80136ca:	b087      	sub	sp, #28
 80136cc:	4604      	mov	r4, r0
 80136ce:	d805      	bhi.n	80136dc <__ieee754_rem_pio2f+0x20>
 80136d0:	2300      	movs	r3, #0
 80136d2:	ed80 0a00 	vstr	s0, [r0]
 80136d6:	6043      	str	r3, [r0, #4]
 80136d8:	2000      	movs	r0, #0
 80136da:	e022      	b.n	8013722 <__ieee754_rem_pio2f+0x66>
 80136dc:	4b82      	ldr	r3, [pc, #520]	@ (80138e8 <__ieee754_rem_pio2f+0x22c>)
 80136de:	429d      	cmp	r5, r3
 80136e0:	d83a      	bhi.n	8013758 <__ieee754_rem_pio2f+0x9c>
 80136e2:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 80136e6:	2e00      	cmp	r6, #0
 80136e8:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 80138ec <__ieee754_rem_pio2f+0x230>
 80136ec:	4a80      	ldr	r2, [pc, #512]	@ (80138f0 <__ieee754_rem_pio2f+0x234>)
 80136ee:	f023 030f 	bic.w	r3, r3, #15
 80136f2:	dd18      	ble.n	8013726 <__ieee754_rem_pio2f+0x6a>
 80136f4:	4293      	cmp	r3, r2
 80136f6:	ee70 7a47 	vsub.f32	s15, s0, s14
 80136fa:	bf09      	itett	eq
 80136fc:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 80138f4 <__ieee754_rem_pio2f+0x238>
 8013700:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 80138f8 <__ieee754_rem_pio2f+0x23c>
 8013704:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 80138fc <__ieee754_rem_pio2f+0x240>
 8013708:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 801370c:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8013710:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013714:	ed80 7a00 	vstr	s14, [r0]
 8013718:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801371c:	edc0 7a01 	vstr	s15, [r0, #4]
 8013720:	2001      	movs	r0, #1
 8013722:	b007      	add	sp, #28
 8013724:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013726:	4293      	cmp	r3, r2
 8013728:	ee70 7a07 	vadd.f32	s15, s0, s14
 801372c:	bf09      	itett	eq
 801372e:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 80138f4 <__ieee754_rem_pio2f+0x238>
 8013732:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 80138f8 <__ieee754_rem_pio2f+0x23c>
 8013736:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 80138fc <__ieee754_rem_pio2f+0x240>
 801373a:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 801373e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8013742:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013746:	ed80 7a00 	vstr	s14, [r0]
 801374a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801374e:	edc0 7a01 	vstr	s15, [r0, #4]
 8013752:	f04f 30ff 	mov.w	r0, #4294967295
 8013756:	e7e4      	b.n	8013722 <__ieee754_rem_pio2f+0x66>
 8013758:	4b69      	ldr	r3, [pc, #420]	@ (8013900 <__ieee754_rem_pio2f+0x244>)
 801375a:	429d      	cmp	r5, r3
 801375c:	d873      	bhi.n	8013846 <__ieee754_rem_pio2f+0x18a>
 801375e:	f000 f8dd 	bl	801391c <fabsf>
 8013762:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8013904 <__ieee754_rem_pio2f+0x248>
 8013766:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801376a:	eee0 7a07 	vfma.f32	s15, s0, s14
 801376e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013772:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8013776:	ee17 0a90 	vmov	r0, s15
 801377a:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 80138ec <__ieee754_rem_pio2f+0x230>
 801377e:	eea7 0a67 	vfms.f32	s0, s14, s15
 8013782:	281f      	cmp	r0, #31
 8013784:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 80138f8 <__ieee754_rem_pio2f+0x23c>
 8013788:	ee67 7a27 	vmul.f32	s15, s14, s15
 801378c:	eeb1 6a47 	vneg.f32	s12, s14
 8013790:	ee70 6a67 	vsub.f32	s13, s0, s15
 8013794:	ee16 1a90 	vmov	r1, s13
 8013798:	dc09      	bgt.n	80137ae <__ieee754_rem_pio2f+0xf2>
 801379a:	4a5b      	ldr	r2, [pc, #364]	@ (8013908 <__ieee754_rem_pio2f+0x24c>)
 801379c:	1e47      	subs	r7, r0, #1
 801379e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 80137a2:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 80137a6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80137aa:	4293      	cmp	r3, r2
 80137ac:	d107      	bne.n	80137be <__ieee754_rem_pio2f+0x102>
 80137ae:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 80137b2:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 80137b6:	2a08      	cmp	r2, #8
 80137b8:	ea4f 53e5 	mov.w	r3, r5, asr #23
 80137bc:	dc14      	bgt.n	80137e8 <__ieee754_rem_pio2f+0x12c>
 80137be:	6021      	str	r1, [r4, #0]
 80137c0:	ed94 7a00 	vldr	s14, [r4]
 80137c4:	ee30 0a47 	vsub.f32	s0, s0, s14
 80137c8:	2e00      	cmp	r6, #0
 80137ca:	ee30 0a67 	vsub.f32	s0, s0, s15
 80137ce:	ed84 0a01 	vstr	s0, [r4, #4]
 80137d2:	daa6      	bge.n	8013722 <__ieee754_rem_pio2f+0x66>
 80137d4:	eeb1 7a47 	vneg.f32	s14, s14
 80137d8:	eeb1 0a40 	vneg.f32	s0, s0
 80137dc:	ed84 7a00 	vstr	s14, [r4]
 80137e0:	ed84 0a01 	vstr	s0, [r4, #4]
 80137e4:	4240      	negs	r0, r0
 80137e6:	e79c      	b.n	8013722 <__ieee754_rem_pio2f+0x66>
 80137e8:	eddf 5a42 	vldr	s11, [pc, #264]	@ 80138f4 <__ieee754_rem_pio2f+0x238>
 80137ec:	eef0 6a40 	vmov.f32	s13, s0
 80137f0:	eee6 6a25 	vfma.f32	s13, s12, s11
 80137f4:	ee70 7a66 	vsub.f32	s15, s0, s13
 80137f8:	eee6 7a25 	vfma.f32	s15, s12, s11
 80137fc:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80138fc <__ieee754_rem_pio2f+0x240>
 8013800:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8013804:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8013808:	ee15 2a90 	vmov	r2, s11
 801380c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8013810:	1a5b      	subs	r3, r3, r1
 8013812:	2b19      	cmp	r3, #25
 8013814:	dc04      	bgt.n	8013820 <__ieee754_rem_pio2f+0x164>
 8013816:	edc4 5a00 	vstr	s11, [r4]
 801381a:	eeb0 0a66 	vmov.f32	s0, s13
 801381e:	e7cf      	b.n	80137c0 <__ieee754_rem_pio2f+0x104>
 8013820:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 801390c <__ieee754_rem_pio2f+0x250>
 8013824:	eeb0 0a66 	vmov.f32	s0, s13
 8013828:	eea6 0a25 	vfma.f32	s0, s12, s11
 801382c:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8013830:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8013910 <__ieee754_rem_pio2f+0x254>
 8013834:	eee6 7a25 	vfma.f32	s15, s12, s11
 8013838:	eed7 7a26 	vfnms.f32	s15, s14, s13
 801383c:	ee30 7a67 	vsub.f32	s14, s0, s15
 8013840:	ed84 7a00 	vstr	s14, [r4]
 8013844:	e7bc      	b.n	80137c0 <__ieee754_rem_pio2f+0x104>
 8013846:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 801384a:	d306      	bcc.n	801385a <__ieee754_rem_pio2f+0x19e>
 801384c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8013850:	edc0 7a01 	vstr	s15, [r0, #4]
 8013854:	edc0 7a00 	vstr	s15, [r0]
 8013858:	e73e      	b.n	80136d8 <__ieee754_rem_pio2f+0x1c>
 801385a:	15ea      	asrs	r2, r5, #23
 801385c:	3a86      	subs	r2, #134	@ 0x86
 801385e:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8013862:	ee07 3a90 	vmov	s15, r3
 8013866:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801386a:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8013914 <__ieee754_rem_pio2f+0x258>
 801386e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013872:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013876:	ed8d 7a03 	vstr	s14, [sp, #12]
 801387a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801387e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8013882:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013886:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801388a:	ed8d 7a04 	vstr	s14, [sp, #16]
 801388e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013892:	eef5 7a40 	vcmp.f32	s15, #0.0
 8013896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801389a:	edcd 7a05 	vstr	s15, [sp, #20]
 801389e:	d11e      	bne.n	80138de <__ieee754_rem_pio2f+0x222>
 80138a0:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80138a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80138a8:	bf0c      	ite	eq
 80138aa:	2301      	moveq	r3, #1
 80138ac:	2302      	movne	r3, #2
 80138ae:	491a      	ldr	r1, [pc, #104]	@ (8013918 <__ieee754_rem_pio2f+0x25c>)
 80138b0:	9101      	str	r1, [sp, #4]
 80138b2:	2102      	movs	r1, #2
 80138b4:	9100      	str	r1, [sp, #0]
 80138b6:	a803      	add	r0, sp, #12
 80138b8:	4621      	mov	r1, r4
 80138ba:	f000 fc69 	bl	8014190 <__kernel_rem_pio2f>
 80138be:	2e00      	cmp	r6, #0
 80138c0:	f6bf af2f 	bge.w	8013722 <__ieee754_rem_pio2f+0x66>
 80138c4:	edd4 7a00 	vldr	s15, [r4]
 80138c8:	eef1 7a67 	vneg.f32	s15, s15
 80138cc:	edc4 7a00 	vstr	s15, [r4]
 80138d0:	edd4 7a01 	vldr	s15, [r4, #4]
 80138d4:	eef1 7a67 	vneg.f32	s15, s15
 80138d8:	edc4 7a01 	vstr	s15, [r4, #4]
 80138dc:	e782      	b.n	80137e4 <__ieee754_rem_pio2f+0x128>
 80138de:	2303      	movs	r3, #3
 80138e0:	e7e5      	b.n	80138ae <__ieee754_rem_pio2f+0x1f2>
 80138e2:	bf00      	nop
 80138e4:	3f490fd8 	.word	0x3f490fd8
 80138e8:	4016cbe3 	.word	0x4016cbe3
 80138ec:	3fc90f80 	.word	0x3fc90f80
 80138f0:	3fc90fd0 	.word	0x3fc90fd0
 80138f4:	37354400 	.word	0x37354400
 80138f8:	37354443 	.word	0x37354443
 80138fc:	2e85a308 	.word	0x2e85a308
 8013900:	43490f80 	.word	0x43490f80
 8013904:	3f22f984 	.word	0x3f22f984
 8013908:	08014a08 	.word	0x08014a08
 801390c:	2e85a300 	.word	0x2e85a300
 8013910:	248d3132 	.word	0x248d3132
 8013914:	43800000 	.word	0x43800000
 8013918:	08014a88 	.word	0x08014a88

0801391c <fabsf>:
 801391c:	ee10 3a10 	vmov	r3, s0
 8013920:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8013924:	ee00 3a10 	vmov	s0, r3
 8013928:	4770      	bx	lr
 801392a:	0000      	movs	r0, r0
 801392c:	0000      	movs	r0, r0
	...

08013930 <scalbn>:
 8013930:	b570      	push	{r4, r5, r6, lr}
 8013932:	ec55 4b10 	vmov	r4, r5, d0
 8013936:	f3c5 510a 	ubfx	r1, r5, #20, #11
 801393a:	4606      	mov	r6, r0
 801393c:	462b      	mov	r3, r5
 801393e:	b991      	cbnz	r1, 8013966 <scalbn+0x36>
 8013940:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8013944:	4323      	orrs	r3, r4
 8013946:	d03b      	beq.n	80139c0 <scalbn+0x90>
 8013948:	4b33      	ldr	r3, [pc, #204]	@ (8013a18 <scalbn+0xe8>)
 801394a:	4620      	mov	r0, r4
 801394c:	4629      	mov	r1, r5
 801394e:	2200      	movs	r2, #0
 8013950:	f7ec fe1e 	bl	8000590 <__aeabi_dmul>
 8013954:	4b31      	ldr	r3, [pc, #196]	@ (8013a1c <scalbn+0xec>)
 8013956:	429e      	cmp	r6, r3
 8013958:	4604      	mov	r4, r0
 801395a:	460d      	mov	r5, r1
 801395c:	da0f      	bge.n	801397e <scalbn+0x4e>
 801395e:	a326      	add	r3, pc, #152	@ (adr r3, 80139f8 <scalbn+0xc8>)
 8013960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013964:	e01e      	b.n	80139a4 <scalbn+0x74>
 8013966:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801396a:	4291      	cmp	r1, r2
 801396c:	d10b      	bne.n	8013986 <scalbn+0x56>
 801396e:	4622      	mov	r2, r4
 8013970:	4620      	mov	r0, r4
 8013972:	4629      	mov	r1, r5
 8013974:	f7ec fc56 	bl	8000224 <__adddf3>
 8013978:	4604      	mov	r4, r0
 801397a:	460d      	mov	r5, r1
 801397c:	e020      	b.n	80139c0 <scalbn+0x90>
 801397e:	460b      	mov	r3, r1
 8013980:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8013984:	3936      	subs	r1, #54	@ 0x36
 8013986:	f24c 3250 	movw	r2, #50000	@ 0xc350
 801398a:	4296      	cmp	r6, r2
 801398c:	dd0d      	ble.n	80139aa <scalbn+0x7a>
 801398e:	2d00      	cmp	r5, #0
 8013990:	a11b      	add	r1, pc, #108	@ (adr r1, 8013a00 <scalbn+0xd0>)
 8013992:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013996:	da02      	bge.n	801399e <scalbn+0x6e>
 8013998:	a11b      	add	r1, pc, #108	@ (adr r1, 8013a08 <scalbn+0xd8>)
 801399a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801399e:	a318      	add	r3, pc, #96	@ (adr r3, 8013a00 <scalbn+0xd0>)
 80139a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139a4:	f7ec fdf4 	bl	8000590 <__aeabi_dmul>
 80139a8:	e7e6      	b.n	8013978 <scalbn+0x48>
 80139aa:	1872      	adds	r2, r6, r1
 80139ac:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80139b0:	428a      	cmp	r2, r1
 80139b2:	dcec      	bgt.n	801398e <scalbn+0x5e>
 80139b4:	2a00      	cmp	r2, #0
 80139b6:	dd06      	ble.n	80139c6 <scalbn+0x96>
 80139b8:	f36f 531e 	bfc	r3, #20, #11
 80139bc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80139c0:	ec45 4b10 	vmov	d0, r4, r5
 80139c4:	bd70      	pop	{r4, r5, r6, pc}
 80139c6:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80139ca:	da08      	bge.n	80139de <scalbn+0xae>
 80139cc:	2d00      	cmp	r5, #0
 80139ce:	a10a      	add	r1, pc, #40	@ (adr r1, 80139f8 <scalbn+0xc8>)
 80139d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80139d4:	dac3      	bge.n	801395e <scalbn+0x2e>
 80139d6:	a10e      	add	r1, pc, #56	@ (adr r1, 8013a10 <scalbn+0xe0>)
 80139d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80139dc:	e7bf      	b.n	801395e <scalbn+0x2e>
 80139de:	3236      	adds	r2, #54	@ 0x36
 80139e0:	f36f 531e 	bfc	r3, #20, #11
 80139e4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80139e8:	4620      	mov	r0, r4
 80139ea:	4b0d      	ldr	r3, [pc, #52]	@ (8013a20 <scalbn+0xf0>)
 80139ec:	4629      	mov	r1, r5
 80139ee:	2200      	movs	r2, #0
 80139f0:	e7d8      	b.n	80139a4 <scalbn+0x74>
 80139f2:	bf00      	nop
 80139f4:	f3af 8000 	nop.w
 80139f8:	c2f8f359 	.word	0xc2f8f359
 80139fc:	01a56e1f 	.word	0x01a56e1f
 8013a00:	8800759c 	.word	0x8800759c
 8013a04:	7e37e43c 	.word	0x7e37e43c
 8013a08:	8800759c 	.word	0x8800759c
 8013a0c:	fe37e43c 	.word	0xfe37e43c
 8013a10:	c2f8f359 	.word	0xc2f8f359
 8013a14:	81a56e1f 	.word	0x81a56e1f
 8013a18:	43500000 	.word	0x43500000
 8013a1c:	ffff3cb0 	.word	0xffff3cb0
 8013a20:	3c900000 	.word	0x3c900000

08013a24 <scalbnf>:
 8013a24:	ee10 3a10 	vmov	r3, s0
 8013a28:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8013a2c:	d02b      	beq.n	8013a86 <scalbnf+0x62>
 8013a2e:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8013a32:	d302      	bcc.n	8013a3a <scalbnf+0x16>
 8013a34:	ee30 0a00 	vadd.f32	s0, s0, s0
 8013a38:	4770      	bx	lr
 8013a3a:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8013a3e:	d123      	bne.n	8013a88 <scalbnf+0x64>
 8013a40:	4b24      	ldr	r3, [pc, #144]	@ (8013ad4 <scalbnf+0xb0>)
 8013a42:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8013ad8 <scalbnf+0xb4>
 8013a46:	4298      	cmp	r0, r3
 8013a48:	ee20 0a27 	vmul.f32	s0, s0, s15
 8013a4c:	db17      	blt.n	8013a7e <scalbnf+0x5a>
 8013a4e:	ee10 3a10 	vmov	r3, s0
 8013a52:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8013a56:	3a19      	subs	r2, #25
 8013a58:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8013a5c:	4288      	cmp	r0, r1
 8013a5e:	dd15      	ble.n	8013a8c <scalbnf+0x68>
 8013a60:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8013adc <scalbnf+0xb8>
 8013a64:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8013ae0 <scalbnf+0xbc>
 8013a68:	ee10 3a10 	vmov	r3, s0
 8013a6c:	eeb0 7a67 	vmov.f32	s14, s15
 8013a70:	2b00      	cmp	r3, #0
 8013a72:	bfb8      	it	lt
 8013a74:	eef0 7a66 	vmovlt.f32	s15, s13
 8013a78:	ee27 0a87 	vmul.f32	s0, s15, s14
 8013a7c:	4770      	bx	lr
 8013a7e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8013ae4 <scalbnf+0xc0>
 8013a82:	ee27 0a80 	vmul.f32	s0, s15, s0
 8013a86:	4770      	bx	lr
 8013a88:	0dd2      	lsrs	r2, r2, #23
 8013a8a:	e7e5      	b.n	8013a58 <scalbnf+0x34>
 8013a8c:	4410      	add	r0, r2
 8013a8e:	28fe      	cmp	r0, #254	@ 0xfe
 8013a90:	dce6      	bgt.n	8013a60 <scalbnf+0x3c>
 8013a92:	2800      	cmp	r0, #0
 8013a94:	dd06      	ble.n	8013aa4 <scalbnf+0x80>
 8013a96:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8013a9a:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8013a9e:	ee00 3a10 	vmov	s0, r3
 8013aa2:	4770      	bx	lr
 8013aa4:	f110 0f16 	cmn.w	r0, #22
 8013aa8:	da09      	bge.n	8013abe <scalbnf+0x9a>
 8013aaa:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8013ae4 <scalbnf+0xc0>
 8013aae:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8013ae8 <scalbnf+0xc4>
 8013ab2:	ee10 3a10 	vmov	r3, s0
 8013ab6:	eeb0 7a67 	vmov.f32	s14, s15
 8013aba:	2b00      	cmp	r3, #0
 8013abc:	e7d9      	b.n	8013a72 <scalbnf+0x4e>
 8013abe:	3019      	adds	r0, #25
 8013ac0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8013ac4:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8013ac8:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8013aec <scalbnf+0xc8>
 8013acc:	ee07 3a90 	vmov	s15, r3
 8013ad0:	e7d7      	b.n	8013a82 <scalbnf+0x5e>
 8013ad2:	bf00      	nop
 8013ad4:	ffff3cb0 	.word	0xffff3cb0
 8013ad8:	4c000000 	.word	0x4c000000
 8013adc:	7149f2ca 	.word	0x7149f2ca
 8013ae0:	f149f2ca 	.word	0xf149f2ca
 8013ae4:	0da24260 	.word	0x0da24260
 8013ae8:	8da24260 	.word	0x8da24260
 8013aec:	33000000 	.word	0x33000000

08013af0 <__kernel_rem_pio2>:
 8013af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013af4:	ed2d 8b02 	vpush	{d8}
 8013af8:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8013afc:	f112 0f14 	cmn.w	r2, #20
 8013b00:	9306      	str	r3, [sp, #24]
 8013b02:	9104      	str	r1, [sp, #16]
 8013b04:	4bc2      	ldr	r3, [pc, #776]	@ (8013e10 <__kernel_rem_pio2+0x320>)
 8013b06:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8013b08:	9008      	str	r0, [sp, #32]
 8013b0a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013b0e:	9300      	str	r3, [sp, #0]
 8013b10:	9b06      	ldr	r3, [sp, #24]
 8013b12:	f103 33ff 	add.w	r3, r3, #4294967295
 8013b16:	bfa8      	it	ge
 8013b18:	1ed4      	subge	r4, r2, #3
 8013b1a:	9305      	str	r3, [sp, #20]
 8013b1c:	bfb2      	itee	lt
 8013b1e:	2400      	movlt	r4, #0
 8013b20:	2318      	movge	r3, #24
 8013b22:	fb94 f4f3 	sdivge	r4, r4, r3
 8013b26:	f06f 0317 	mvn.w	r3, #23
 8013b2a:	fb04 3303 	mla	r3, r4, r3, r3
 8013b2e:	eb03 0b02 	add.w	fp, r3, r2
 8013b32:	9b00      	ldr	r3, [sp, #0]
 8013b34:	9a05      	ldr	r2, [sp, #20]
 8013b36:	ed9f 8bb2 	vldr	d8, [pc, #712]	@ 8013e00 <__kernel_rem_pio2+0x310>
 8013b3a:	eb03 0802 	add.w	r8, r3, r2
 8013b3e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8013b40:	1aa7      	subs	r7, r4, r2
 8013b42:	ae20      	add	r6, sp, #128	@ 0x80
 8013b44:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8013b48:	2500      	movs	r5, #0
 8013b4a:	4545      	cmp	r5, r8
 8013b4c:	dd12      	ble.n	8013b74 <__kernel_rem_pio2+0x84>
 8013b4e:	9b06      	ldr	r3, [sp, #24]
 8013b50:	aa20      	add	r2, sp, #128	@ 0x80
 8013b52:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8013b56:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8013b5a:	2700      	movs	r7, #0
 8013b5c:	9b00      	ldr	r3, [sp, #0]
 8013b5e:	429f      	cmp	r7, r3
 8013b60:	dc2e      	bgt.n	8013bc0 <__kernel_rem_pio2+0xd0>
 8013b62:	ed9f 7ba7 	vldr	d7, [pc, #668]	@ 8013e00 <__kernel_rem_pio2+0x310>
 8013b66:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8013b6a:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013b6e:	46a8      	mov	r8, r5
 8013b70:	2600      	movs	r6, #0
 8013b72:	e01b      	b.n	8013bac <__kernel_rem_pio2+0xbc>
 8013b74:	42ef      	cmn	r7, r5
 8013b76:	d407      	bmi.n	8013b88 <__kernel_rem_pio2+0x98>
 8013b78:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8013b7c:	f7ec fc9e 	bl	80004bc <__aeabi_i2d>
 8013b80:	e8e6 0102 	strd	r0, r1, [r6], #8
 8013b84:	3501      	adds	r5, #1
 8013b86:	e7e0      	b.n	8013b4a <__kernel_rem_pio2+0x5a>
 8013b88:	ec51 0b18 	vmov	r0, r1, d8
 8013b8c:	e7f8      	b.n	8013b80 <__kernel_rem_pio2+0x90>
 8013b8e:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 8013b92:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8013b96:	f7ec fcfb 	bl	8000590 <__aeabi_dmul>
 8013b9a:	4602      	mov	r2, r0
 8013b9c:	460b      	mov	r3, r1
 8013b9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013ba2:	f7ec fb3f 	bl	8000224 <__adddf3>
 8013ba6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013baa:	3601      	adds	r6, #1
 8013bac:	9b05      	ldr	r3, [sp, #20]
 8013bae:	429e      	cmp	r6, r3
 8013bb0:	dded      	ble.n	8013b8e <__kernel_rem_pio2+0x9e>
 8013bb2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013bb6:	3701      	adds	r7, #1
 8013bb8:	ecaa 7b02 	vstmia	sl!, {d7}
 8013bbc:	3508      	adds	r5, #8
 8013bbe:	e7cd      	b.n	8013b5c <__kernel_rem_pio2+0x6c>
 8013bc0:	9b00      	ldr	r3, [sp, #0]
 8013bc2:	f8dd 8000 	ldr.w	r8, [sp]
 8013bc6:	aa0c      	add	r2, sp, #48	@ 0x30
 8013bc8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013bcc:	930a      	str	r3, [sp, #40]	@ 0x28
 8013bce:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8013bd0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8013bd4:	9309      	str	r3, [sp, #36]	@ 0x24
 8013bd6:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8013bda:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013bdc:	ab98      	add	r3, sp, #608	@ 0x260
 8013bde:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8013be2:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8013be6:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013bea:	ac0c      	add	r4, sp, #48	@ 0x30
 8013bec:	ab70      	add	r3, sp, #448	@ 0x1c0
 8013bee:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8013bf2:	46a1      	mov	r9, r4
 8013bf4:	46c2      	mov	sl, r8
 8013bf6:	f1ba 0f00 	cmp.w	sl, #0
 8013bfa:	dc77      	bgt.n	8013cec <__kernel_rem_pio2+0x1fc>
 8013bfc:	4658      	mov	r0, fp
 8013bfe:	ed9d 0b02 	vldr	d0, [sp, #8]
 8013c02:	f7ff fe95 	bl	8013930 <scalbn>
 8013c06:	ec57 6b10 	vmov	r6, r7, d0
 8013c0a:	2200      	movs	r2, #0
 8013c0c:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8013c10:	4630      	mov	r0, r6
 8013c12:	4639      	mov	r1, r7
 8013c14:	f7ec fcbc 	bl	8000590 <__aeabi_dmul>
 8013c18:	ec41 0b10 	vmov	d0, r0, r1
 8013c1c:	f000 fd20 	bl	8014660 <floor>
 8013c20:	4b7c      	ldr	r3, [pc, #496]	@ (8013e14 <__kernel_rem_pio2+0x324>)
 8013c22:	ec51 0b10 	vmov	r0, r1, d0
 8013c26:	2200      	movs	r2, #0
 8013c28:	f7ec fcb2 	bl	8000590 <__aeabi_dmul>
 8013c2c:	4602      	mov	r2, r0
 8013c2e:	460b      	mov	r3, r1
 8013c30:	4630      	mov	r0, r6
 8013c32:	4639      	mov	r1, r7
 8013c34:	f7ec faf4 	bl	8000220 <__aeabi_dsub>
 8013c38:	460f      	mov	r7, r1
 8013c3a:	4606      	mov	r6, r0
 8013c3c:	f7ec ff42 	bl	8000ac4 <__aeabi_d2iz>
 8013c40:	9002      	str	r0, [sp, #8]
 8013c42:	f7ec fc3b 	bl	80004bc <__aeabi_i2d>
 8013c46:	4602      	mov	r2, r0
 8013c48:	460b      	mov	r3, r1
 8013c4a:	4630      	mov	r0, r6
 8013c4c:	4639      	mov	r1, r7
 8013c4e:	f7ec fae7 	bl	8000220 <__aeabi_dsub>
 8013c52:	f1bb 0f00 	cmp.w	fp, #0
 8013c56:	4606      	mov	r6, r0
 8013c58:	460f      	mov	r7, r1
 8013c5a:	dd6c      	ble.n	8013d36 <__kernel_rem_pio2+0x246>
 8013c5c:	f108 31ff 	add.w	r1, r8, #4294967295
 8013c60:	ab0c      	add	r3, sp, #48	@ 0x30
 8013c62:	9d02      	ldr	r5, [sp, #8]
 8013c64:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013c68:	f1cb 0018 	rsb	r0, fp, #24
 8013c6c:	fa43 f200 	asr.w	r2, r3, r0
 8013c70:	4415      	add	r5, r2
 8013c72:	4082      	lsls	r2, r0
 8013c74:	1a9b      	subs	r3, r3, r2
 8013c76:	aa0c      	add	r2, sp, #48	@ 0x30
 8013c78:	9502      	str	r5, [sp, #8]
 8013c7a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8013c7e:	f1cb 0217 	rsb	r2, fp, #23
 8013c82:	fa43 f902 	asr.w	r9, r3, r2
 8013c86:	f1b9 0f00 	cmp.w	r9, #0
 8013c8a:	dd64      	ble.n	8013d56 <__kernel_rem_pio2+0x266>
 8013c8c:	9b02      	ldr	r3, [sp, #8]
 8013c8e:	2200      	movs	r2, #0
 8013c90:	3301      	adds	r3, #1
 8013c92:	9302      	str	r3, [sp, #8]
 8013c94:	4615      	mov	r5, r2
 8013c96:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8013c9a:	4590      	cmp	r8, r2
 8013c9c:	f300 80a1 	bgt.w	8013de2 <__kernel_rem_pio2+0x2f2>
 8013ca0:	f1bb 0f00 	cmp.w	fp, #0
 8013ca4:	dd07      	ble.n	8013cb6 <__kernel_rem_pio2+0x1c6>
 8013ca6:	f1bb 0f01 	cmp.w	fp, #1
 8013caa:	f000 80c1 	beq.w	8013e30 <__kernel_rem_pio2+0x340>
 8013cae:	f1bb 0f02 	cmp.w	fp, #2
 8013cb2:	f000 80c8 	beq.w	8013e46 <__kernel_rem_pio2+0x356>
 8013cb6:	f1b9 0f02 	cmp.w	r9, #2
 8013cba:	d14c      	bne.n	8013d56 <__kernel_rem_pio2+0x266>
 8013cbc:	4632      	mov	r2, r6
 8013cbe:	463b      	mov	r3, r7
 8013cc0:	4955      	ldr	r1, [pc, #340]	@ (8013e18 <__kernel_rem_pio2+0x328>)
 8013cc2:	2000      	movs	r0, #0
 8013cc4:	f7ec faac 	bl	8000220 <__aeabi_dsub>
 8013cc8:	4606      	mov	r6, r0
 8013cca:	460f      	mov	r7, r1
 8013ccc:	2d00      	cmp	r5, #0
 8013cce:	d042      	beq.n	8013d56 <__kernel_rem_pio2+0x266>
 8013cd0:	4658      	mov	r0, fp
 8013cd2:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 8013e08 <__kernel_rem_pio2+0x318>
 8013cd6:	f7ff fe2b 	bl	8013930 <scalbn>
 8013cda:	4630      	mov	r0, r6
 8013cdc:	4639      	mov	r1, r7
 8013cde:	ec53 2b10 	vmov	r2, r3, d0
 8013ce2:	f7ec fa9d 	bl	8000220 <__aeabi_dsub>
 8013ce6:	4606      	mov	r6, r0
 8013ce8:	460f      	mov	r7, r1
 8013cea:	e034      	b.n	8013d56 <__kernel_rem_pio2+0x266>
 8013cec:	4b4b      	ldr	r3, [pc, #300]	@ (8013e1c <__kernel_rem_pio2+0x32c>)
 8013cee:	2200      	movs	r2, #0
 8013cf0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013cf4:	f7ec fc4c 	bl	8000590 <__aeabi_dmul>
 8013cf8:	f7ec fee4 	bl	8000ac4 <__aeabi_d2iz>
 8013cfc:	f7ec fbde 	bl	80004bc <__aeabi_i2d>
 8013d00:	4b47      	ldr	r3, [pc, #284]	@ (8013e20 <__kernel_rem_pio2+0x330>)
 8013d02:	2200      	movs	r2, #0
 8013d04:	4606      	mov	r6, r0
 8013d06:	460f      	mov	r7, r1
 8013d08:	f7ec fc42 	bl	8000590 <__aeabi_dmul>
 8013d0c:	4602      	mov	r2, r0
 8013d0e:	460b      	mov	r3, r1
 8013d10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013d14:	f7ec fa84 	bl	8000220 <__aeabi_dsub>
 8013d18:	f7ec fed4 	bl	8000ac4 <__aeabi_d2iz>
 8013d1c:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8013d20:	f849 0b04 	str.w	r0, [r9], #4
 8013d24:	4639      	mov	r1, r7
 8013d26:	4630      	mov	r0, r6
 8013d28:	f7ec fa7c 	bl	8000224 <__adddf3>
 8013d2c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013d30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013d34:	e75f      	b.n	8013bf6 <__kernel_rem_pio2+0x106>
 8013d36:	d107      	bne.n	8013d48 <__kernel_rem_pio2+0x258>
 8013d38:	f108 33ff 	add.w	r3, r8, #4294967295
 8013d3c:	aa0c      	add	r2, sp, #48	@ 0x30
 8013d3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013d42:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8013d46:	e79e      	b.n	8013c86 <__kernel_rem_pio2+0x196>
 8013d48:	4b36      	ldr	r3, [pc, #216]	@ (8013e24 <__kernel_rem_pio2+0x334>)
 8013d4a:	2200      	movs	r2, #0
 8013d4c:	f7ec fea6 	bl	8000a9c <__aeabi_dcmpge>
 8013d50:	2800      	cmp	r0, #0
 8013d52:	d143      	bne.n	8013ddc <__kernel_rem_pio2+0x2ec>
 8013d54:	4681      	mov	r9, r0
 8013d56:	2200      	movs	r2, #0
 8013d58:	2300      	movs	r3, #0
 8013d5a:	4630      	mov	r0, r6
 8013d5c:	4639      	mov	r1, r7
 8013d5e:	f7ec fe7f 	bl	8000a60 <__aeabi_dcmpeq>
 8013d62:	2800      	cmp	r0, #0
 8013d64:	f000 80c1 	beq.w	8013eea <__kernel_rem_pio2+0x3fa>
 8013d68:	f108 33ff 	add.w	r3, r8, #4294967295
 8013d6c:	2200      	movs	r2, #0
 8013d6e:	9900      	ldr	r1, [sp, #0]
 8013d70:	428b      	cmp	r3, r1
 8013d72:	da70      	bge.n	8013e56 <__kernel_rem_pio2+0x366>
 8013d74:	2a00      	cmp	r2, #0
 8013d76:	f000 808b 	beq.w	8013e90 <__kernel_rem_pio2+0x3a0>
 8013d7a:	f108 38ff 	add.w	r8, r8, #4294967295
 8013d7e:	ab0c      	add	r3, sp, #48	@ 0x30
 8013d80:	f1ab 0b18 	sub.w	fp, fp, #24
 8013d84:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8013d88:	2b00      	cmp	r3, #0
 8013d8a:	d0f6      	beq.n	8013d7a <__kernel_rem_pio2+0x28a>
 8013d8c:	4658      	mov	r0, fp
 8013d8e:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 8013e08 <__kernel_rem_pio2+0x318>
 8013d92:	f7ff fdcd 	bl	8013930 <scalbn>
 8013d96:	f108 0301 	add.w	r3, r8, #1
 8013d9a:	00da      	lsls	r2, r3, #3
 8013d9c:	9205      	str	r2, [sp, #20]
 8013d9e:	ec55 4b10 	vmov	r4, r5, d0
 8013da2:	aa70      	add	r2, sp, #448	@ 0x1c0
 8013da4:	f8df b074 	ldr.w	fp, [pc, #116]	@ 8013e1c <__kernel_rem_pio2+0x32c>
 8013da8:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8013dac:	4646      	mov	r6, r8
 8013dae:	f04f 0a00 	mov.w	sl, #0
 8013db2:	2e00      	cmp	r6, #0
 8013db4:	f280 80d1 	bge.w	8013f5a <__kernel_rem_pio2+0x46a>
 8013db8:	4644      	mov	r4, r8
 8013dba:	2c00      	cmp	r4, #0
 8013dbc:	f2c0 80ff 	blt.w	8013fbe <__kernel_rem_pio2+0x4ce>
 8013dc0:	4b19      	ldr	r3, [pc, #100]	@ (8013e28 <__kernel_rem_pio2+0x338>)
 8013dc2:	461f      	mov	r7, r3
 8013dc4:	ab70      	add	r3, sp, #448	@ 0x1c0
 8013dc6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8013dca:	9306      	str	r3, [sp, #24]
 8013dcc:	f04f 0a00 	mov.w	sl, #0
 8013dd0:	f04f 0b00 	mov.w	fp, #0
 8013dd4:	2600      	movs	r6, #0
 8013dd6:	eba8 0504 	sub.w	r5, r8, r4
 8013dda:	e0e4      	b.n	8013fa6 <__kernel_rem_pio2+0x4b6>
 8013ddc:	f04f 0902 	mov.w	r9, #2
 8013de0:	e754      	b.n	8013c8c <__kernel_rem_pio2+0x19c>
 8013de2:	f854 3b04 	ldr.w	r3, [r4], #4
 8013de6:	bb0d      	cbnz	r5, 8013e2c <__kernel_rem_pio2+0x33c>
 8013de8:	b123      	cbz	r3, 8013df4 <__kernel_rem_pio2+0x304>
 8013dea:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8013dee:	f844 3c04 	str.w	r3, [r4, #-4]
 8013df2:	2301      	movs	r3, #1
 8013df4:	3201      	adds	r2, #1
 8013df6:	461d      	mov	r5, r3
 8013df8:	e74f      	b.n	8013c9a <__kernel_rem_pio2+0x1aa>
 8013dfa:	bf00      	nop
 8013dfc:	f3af 8000 	nop.w
	...
 8013e0c:	3ff00000 	.word	0x3ff00000
 8013e10:	08014de0 	.word	0x08014de0
 8013e14:	40200000 	.word	0x40200000
 8013e18:	3ff00000 	.word	0x3ff00000
 8013e1c:	3e700000 	.word	0x3e700000
 8013e20:	41700000 	.word	0x41700000
 8013e24:	3fe00000 	.word	0x3fe00000
 8013e28:	08014da0 	.word	0x08014da0
 8013e2c:	1acb      	subs	r3, r1, r3
 8013e2e:	e7de      	b.n	8013dee <__kernel_rem_pio2+0x2fe>
 8013e30:	f108 32ff 	add.w	r2, r8, #4294967295
 8013e34:	ab0c      	add	r3, sp, #48	@ 0x30
 8013e36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013e3a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8013e3e:	a90c      	add	r1, sp, #48	@ 0x30
 8013e40:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8013e44:	e737      	b.n	8013cb6 <__kernel_rem_pio2+0x1c6>
 8013e46:	f108 32ff 	add.w	r2, r8, #4294967295
 8013e4a:	ab0c      	add	r3, sp, #48	@ 0x30
 8013e4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013e50:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8013e54:	e7f3      	b.n	8013e3e <__kernel_rem_pio2+0x34e>
 8013e56:	a90c      	add	r1, sp, #48	@ 0x30
 8013e58:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8013e5c:	3b01      	subs	r3, #1
 8013e5e:	430a      	orrs	r2, r1
 8013e60:	e785      	b.n	8013d6e <__kernel_rem_pio2+0x27e>
 8013e62:	3401      	adds	r4, #1
 8013e64:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8013e68:	2a00      	cmp	r2, #0
 8013e6a:	d0fa      	beq.n	8013e62 <__kernel_rem_pio2+0x372>
 8013e6c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013e6e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8013e72:	eb0d 0503 	add.w	r5, sp, r3
 8013e76:	9b06      	ldr	r3, [sp, #24]
 8013e78:	aa20      	add	r2, sp, #128	@ 0x80
 8013e7a:	4443      	add	r3, r8
 8013e7c:	f108 0701 	add.w	r7, r8, #1
 8013e80:	3d98      	subs	r5, #152	@ 0x98
 8013e82:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8013e86:	4444      	add	r4, r8
 8013e88:	42bc      	cmp	r4, r7
 8013e8a:	da04      	bge.n	8013e96 <__kernel_rem_pio2+0x3a6>
 8013e8c:	46a0      	mov	r8, r4
 8013e8e:	e6a2      	b.n	8013bd6 <__kernel_rem_pio2+0xe6>
 8013e90:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013e92:	2401      	movs	r4, #1
 8013e94:	e7e6      	b.n	8013e64 <__kernel_rem_pio2+0x374>
 8013e96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013e98:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8013e9c:	f7ec fb0e 	bl	80004bc <__aeabi_i2d>
 8013ea0:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 8014160 <__kernel_rem_pio2+0x670>
 8013ea4:	e8e6 0102 	strd	r0, r1, [r6], #8
 8013ea8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013eac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8013eb0:	46b2      	mov	sl, r6
 8013eb2:	f04f 0800 	mov.w	r8, #0
 8013eb6:	9b05      	ldr	r3, [sp, #20]
 8013eb8:	4598      	cmp	r8, r3
 8013eba:	dd05      	ble.n	8013ec8 <__kernel_rem_pio2+0x3d8>
 8013ebc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013ec0:	3701      	adds	r7, #1
 8013ec2:	eca5 7b02 	vstmia	r5!, {d7}
 8013ec6:	e7df      	b.n	8013e88 <__kernel_rem_pio2+0x398>
 8013ec8:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8013ecc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8013ed0:	f7ec fb5e 	bl	8000590 <__aeabi_dmul>
 8013ed4:	4602      	mov	r2, r0
 8013ed6:	460b      	mov	r3, r1
 8013ed8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013edc:	f7ec f9a2 	bl	8000224 <__adddf3>
 8013ee0:	f108 0801 	add.w	r8, r8, #1
 8013ee4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013ee8:	e7e5      	b.n	8013eb6 <__kernel_rem_pio2+0x3c6>
 8013eea:	f1cb 0000 	rsb	r0, fp, #0
 8013eee:	ec47 6b10 	vmov	d0, r6, r7
 8013ef2:	f7ff fd1d 	bl	8013930 <scalbn>
 8013ef6:	ec55 4b10 	vmov	r4, r5, d0
 8013efa:	4b9b      	ldr	r3, [pc, #620]	@ (8014168 <__kernel_rem_pio2+0x678>)
 8013efc:	2200      	movs	r2, #0
 8013efe:	4620      	mov	r0, r4
 8013f00:	4629      	mov	r1, r5
 8013f02:	f7ec fdcb 	bl	8000a9c <__aeabi_dcmpge>
 8013f06:	b300      	cbz	r0, 8013f4a <__kernel_rem_pio2+0x45a>
 8013f08:	4b98      	ldr	r3, [pc, #608]	@ (801416c <__kernel_rem_pio2+0x67c>)
 8013f0a:	2200      	movs	r2, #0
 8013f0c:	4620      	mov	r0, r4
 8013f0e:	4629      	mov	r1, r5
 8013f10:	f7ec fb3e 	bl	8000590 <__aeabi_dmul>
 8013f14:	f7ec fdd6 	bl	8000ac4 <__aeabi_d2iz>
 8013f18:	4606      	mov	r6, r0
 8013f1a:	f7ec facf 	bl	80004bc <__aeabi_i2d>
 8013f1e:	4b92      	ldr	r3, [pc, #584]	@ (8014168 <__kernel_rem_pio2+0x678>)
 8013f20:	2200      	movs	r2, #0
 8013f22:	f7ec fb35 	bl	8000590 <__aeabi_dmul>
 8013f26:	460b      	mov	r3, r1
 8013f28:	4602      	mov	r2, r0
 8013f2a:	4629      	mov	r1, r5
 8013f2c:	4620      	mov	r0, r4
 8013f2e:	f7ec f977 	bl	8000220 <__aeabi_dsub>
 8013f32:	f7ec fdc7 	bl	8000ac4 <__aeabi_d2iz>
 8013f36:	ab0c      	add	r3, sp, #48	@ 0x30
 8013f38:	f10b 0b18 	add.w	fp, fp, #24
 8013f3c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8013f40:	f108 0801 	add.w	r8, r8, #1
 8013f44:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8013f48:	e720      	b.n	8013d8c <__kernel_rem_pio2+0x29c>
 8013f4a:	4620      	mov	r0, r4
 8013f4c:	4629      	mov	r1, r5
 8013f4e:	f7ec fdb9 	bl	8000ac4 <__aeabi_d2iz>
 8013f52:	ab0c      	add	r3, sp, #48	@ 0x30
 8013f54:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8013f58:	e718      	b.n	8013d8c <__kernel_rem_pio2+0x29c>
 8013f5a:	ab0c      	add	r3, sp, #48	@ 0x30
 8013f5c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8013f60:	f7ec faac 	bl	80004bc <__aeabi_i2d>
 8013f64:	4622      	mov	r2, r4
 8013f66:	462b      	mov	r3, r5
 8013f68:	f7ec fb12 	bl	8000590 <__aeabi_dmul>
 8013f6c:	4652      	mov	r2, sl
 8013f6e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8013f72:	465b      	mov	r3, fp
 8013f74:	4620      	mov	r0, r4
 8013f76:	4629      	mov	r1, r5
 8013f78:	f7ec fb0a 	bl	8000590 <__aeabi_dmul>
 8013f7c:	3e01      	subs	r6, #1
 8013f7e:	4604      	mov	r4, r0
 8013f80:	460d      	mov	r5, r1
 8013f82:	e716      	b.n	8013db2 <__kernel_rem_pio2+0x2c2>
 8013f84:	9906      	ldr	r1, [sp, #24]
 8013f86:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8013f8a:	9106      	str	r1, [sp, #24]
 8013f8c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8013f90:	f7ec fafe 	bl	8000590 <__aeabi_dmul>
 8013f94:	4602      	mov	r2, r0
 8013f96:	460b      	mov	r3, r1
 8013f98:	4650      	mov	r0, sl
 8013f9a:	4659      	mov	r1, fp
 8013f9c:	f7ec f942 	bl	8000224 <__adddf3>
 8013fa0:	3601      	adds	r6, #1
 8013fa2:	4682      	mov	sl, r0
 8013fa4:	468b      	mov	fp, r1
 8013fa6:	9b00      	ldr	r3, [sp, #0]
 8013fa8:	429e      	cmp	r6, r3
 8013faa:	dc01      	bgt.n	8013fb0 <__kernel_rem_pio2+0x4c0>
 8013fac:	42ae      	cmp	r6, r5
 8013fae:	dde9      	ble.n	8013f84 <__kernel_rem_pio2+0x494>
 8013fb0:	ab48      	add	r3, sp, #288	@ 0x120
 8013fb2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8013fb6:	e9c5 ab00 	strd	sl, fp, [r5]
 8013fba:	3c01      	subs	r4, #1
 8013fbc:	e6fd      	b.n	8013dba <__kernel_rem_pio2+0x2ca>
 8013fbe:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8013fc0:	2b02      	cmp	r3, #2
 8013fc2:	dc0b      	bgt.n	8013fdc <__kernel_rem_pio2+0x4ec>
 8013fc4:	2b00      	cmp	r3, #0
 8013fc6:	dc35      	bgt.n	8014034 <__kernel_rem_pio2+0x544>
 8013fc8:	d059      	beq.n	801407e <__kernel_rem_pio2+0x58e>
 8013fca:	9b02      	ldr	r3, [sp, #8]
 8013fcc:	f003 0007 	and.w	r0, r3, #7
 8013fd0:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8013fd4:	ecbd 8b02 	vpop	{d8}
 8013fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013fdc:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8013fde:	2b03      	cmp	r3, #3
 8013fe0:	d1f3      	bne.n	8013fca <__kernel_rem_pio2+0x4da>
 8013fe2:	9b05      	ldr	r3, [sp, #20]
 8013fe4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8013fe8:	eb0d 0403 	add.w	r4, sp, r3
 8013fec:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8013ff0:	4625      	mov	r5, r4
 8013ff2:	46c2      	mov	sl, r8
 8013ff4:	f1ba 0f00 	cmp.w	sl, #0
 8013ff8:	dc69      	bgt.n	80140ce <__kernel_rem_pio2+0x5de>
 8013ffa:	4645      	mov	r5, r8
 8013ffc:	2d01      	cmp	r5, #1
 8013ffe:	f300 8087 	bgt.w	8014110 <__kernel_rem_pio2+0x620>
 8014002:	9c05      	ldr	r4, [sp, #20]
 8014004:	ab48      	add	r3, sp, #288	@ 0x120
 8014006:	441c      	add	r4, r3
 8014008:	2000      	movs	r0, #0
 801400a:	2100      	movs	r1, #0
 801400c:	f1b8 0f01 	cmp.w	r8, #1
 8014010:	f300 809c 	bgt.w	801414c <__kernel_rem_pio2+0x65c>
 8014014:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 8014018:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 801401c:	f1b9 0f00 	cmp.w	r9, #0
 8014020:	f040 80a6 	bne.w	8014170 <__kernel_rem_pio2+0x680>
 8014024:	9b04      	ldr	r3, [sp, #16]
 8014026:	e9c3 5600 	strd	r5, r6, [r3]
 801402a:	e9c3 7802 	strd	r7, r8, [r3, #8]
 801402e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8014032:	e7ca      	b.n	8013fca <__kernel_rem_pio2+0x4da>
 8014034:	9d05      	ldr	r5, [sp, #20]
 8014036:	ab48      	add	r3, sp, #288	@ 0x120
 8014038:	441d      	add	r5, r3
 801403a:	4644      	mov	r4, r8
 801403c:	2000      	movs	r0, #0
 801403e:	2100      	movs	r1, #0
 8014040:	2c00      	cmp	r4, #0
 8014042:	da35      	bge.n	80140b0 <__kernel_rem_pio2+0x5c0>
 8014044:	f1b9 0f00 	cmp.w	r9, #0
 8014048:	d038      	beq.n	80140bc <__kernel_rem_pio2+0x5cc>
 801404a:	4602      	mov	r2, r0
 801404c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8014050:	9c04      	ldr	r4, [sp, #16]
 8014052:	e9c4 2300 	strd	r2, r3, [r4]
 8014056:	4602      	mov	r2, r0
 8014058:	460b      	mov	r3, r1
 801405a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 801405e:	f7ec f8df 	bl	8000220 <__aeabi_dsub>
 8014062:	ad4a      	add	r5, sp, #296	@ 0x128
 8014064:	2401      	movs	r4, #1
 8014066:	45a0      	cmp	r8, r4
 8014068:	da2b      	bge.n	80140c2 <__kernel_rem_pio2+0x5d2>
 801406a:	f1b9 0f00 	cmp.w	r9, #0
 801406e:	d002      	beq.n	8014076 <__kernel_rem_pio2+0x586>
 8014070:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8014074:	4619      	mov	r1, r3
 8014076:	9b04      	ldr	r3, [sp, #16]
 8014078:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801407c:	e7a5      	b.n	8013fca <__kernel_rem_pio2+0x4da>
 801407e:	9c05      	ldr	r4, [sp, #20]
 8014080:	ab48      	add	r3, sp, #288	@ 0x120
 8014082:	441c      	add	r4, r3
 8014084:	2000      	movs	r0, #0
 8014086:	2100      	movs	r1, #0
 8014088:	f1b8 0f00 	cmp.w	r8, #0
 801408c:	da09      	bge.n	80140a2 <__kernel_rem_pio2+0x5b2>
 801408e:	f1b9 0f00 	cmp.w	r9, #0
 8014092:	d002      	beq.n	801409a <__kernel_rem_pio2+0x5aa>
 8014094:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8014098:	4619      	mov	r1, r3
 801409a:	9b04      	ldr	r3, [sp, #16]
 801409c:	e9c3 0100 	strd	r0, r1, [r3]
 80140a0:	e793      	b.n	8013fca <__kernel_rem_pio2+0x4da>
 80140a2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80140a6:	f7ec f8bd 	bl	8000224 <__adddf3>
 80140aa:	f108 38ff 	add.w	r8, r8, #4294967295
 80140ae:	e7eb      	b.n	8014088 <__kernel_rem_pio2+0x598>
 80140b0:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80140b4:	f7ec f8b6 	bl	8000224 <__adddf3>
 80140b8:	3c01      	subs	r4, #1
 80140ba:	e7c1      	b.n	8014040 <__kernel_rem_pio2+0x550>
 80140bc:	4602      	mov	r2, r0
 80140be:	460b      	mov	r3, r1
 80140c0:	e7c6      	b.n	8014050 <__kernel_rem_pio2+0x560>
 80140c2:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 80140c6:	f7ec f8ad 	bl	8000224 <__adddf3>
 80140ca:	3401      	adds	r4, #1
 80140cc:	e7cb      	b.n	8014066 <__kernel_rem_pio2+0x576>
 80140ce:	ed35 7b02 	vldmdb	r5!, {d7}
 80140d2:	ed8d 7b00 	vstr	d7, [sp]
 80140d6:	ed95 7b02 	vldr	d7, [r5, #8]
 80140da:	e9dd 0100 	ldrd	r0, r1, [sp]
 80140de:	ec53 2b17 	vmov	r2, r3, d7
 80140e2:	ed8d 7b06 	vstr	d7, [sp, #24]
 80140e6:	f7ec f89d 	bl	8000224 <__adddf3>
 80140ea:	4602      	mov	r2, r0
 80140ec:	460b      	mov	r3, r1
 80140ee:	4606      	mov	r6, r0
 80140f0:	460f      	mov	r7, r1
 80140f2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80140f6:	f7ec f893 	bl	8000220 <__aeabi_dsub>
 80140fa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80140fe:	f7ec f891 	bl	8000224 <__adddf3>
 8014102:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014106:	e9c5 0102 	strd	r0, r1, [r5, #8]
 801410a:	e9c5 6700 	strd	r6, r7, [r5]
 801410e:	e771      	b.n	8013ff4 <__kernel_rem_pio2+0x504>
 8014110:	ed34 7b02 	vldmdb	r4!, {d7}
 8014114:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8014118:	ec51 0b17 	vmov	r0, r1, d7
 801411c:	4652      	mov	r2, sl
 801411e:	465b      	mov	r3, fp
 8014120:	ed8d 7b00 	vstr	d7, [sp]
 8014124:	f7ec f87e 	bl	8000224 <__adddf3>
 8014128:	4602      	mov	r2, r0
 801412a:	460b      	mov	r3, r1
 801412c:	4606      	mov	r6, r0
 801412e:	460f      	mov	r7, r1
 8014130:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014134:	f7ec f874 	bl	8000220 <__aeabi_dsub>
 8014138:	4652      	mov	r2, sl
 801413a:	465b      	mov	r3, fp
 801413c:	f7ec f872 	bl	8000224 <__adddf3>
 8014140:	3d01      	subs	r5, #1
 8014142:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8014146:	e9c4 6700 	strd	r6, r7, [r4]
 801414a:	e757      	b.n	8013ffc <__kernel_rem_pio2+0x50c>
 801414c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8014150:	f7ec f868 	bl	8000224 <__adddf3>
 8014154:	f108 38ff 	add.w	r8, r8, #4294967295
 8014158:	e758      	b.n	801400c <__kernel_rem_pio2+0x51c>
 801415a:	bf00      	nop
 801415c:	f3af 8000 	nop.w
	...
 8014168:	41700000 	.word	0x41700000
 801416c:	3e700000 	.word	0x3e700000
 8014170:	9b04      	ldr	r3, [sp, #16]
 8014172:	9a04      	ldr	r2, [sp, #16]
 8014174:	601d      	str	r5, [r3, #0]
 8014176:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 801417a:	605c      	str	r4, [r3, #4]
 801417c:	609f      	str	r7, [r3, #8]
 801417e:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 8014182:	60d3      	str	r3, [r2, #12]
 8014184:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8014188:	6110      	str	r0, [r2, #16]
 801418a:	6153      	str	r3, [r2, #20]
 801418c:	e71d      	b.n	8013fca <__kernel_rem_pio2+0x4da>
 801418e:	bf00      	nop

08014190 <__kernel_rem_pio2f>:
 8014190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014194:	ed2d 8b04 	vpush	{d8-d9}
 8014198:	b0d9      	sub	sp, #356	@ 0x164
 801419a:	4690      	mov	r8, r2
 801419c:	9001      	str	r0, [sp, #4]
 801419e:	4ab6      	ldr	r2, [pc, #728]	@ (8014478 <__kernel_rem_pio2f+0x2e8>)
 80141a0:	9866      	ldr	r0, [sp, #408]	@ 0x198
 80141a2:	f118 0f04 	cmn.w	r8, #4
 80141a6:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 80141aa:	460f      	mov	r7, r1
 80141ac:	f103 3bff 	add.w	fp, r3, #4294967295
 80141b0:	db26      	blt.n	8014200 <__kernel_rem_pio2f+0x70>
 80141b2:	f1b8 0203 	subs.w	r2, r8, #3
 80141b6:	bf48      	it	mi
 80141b8:	f108 0204 	addmi.w	r2, r8, #4
 80141bc:	10d2      	asrs	r2, r2, #3
 80141be:	1c55      	adds	r5, r2, #1
 80141c0:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 80141c2:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 8014488 <__kernel_rem_pio2f+0x2f8>
 80141c6:	00e8      	lsls	r0, r5, #3
 80141c8:	eba2 060b 	sub.w	r6, r2, fp
 80141cc:	9002      	str	r0, [sp, #8]
 80141ce:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 80141d2:	eb0a 0c0b 	add.w	ip, sl, fp
 80141d6:	ac1c      	add	r4, sp, #112	@ 0x70
 80141d8:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 80141dc:	2000      	movs	r0, #0
 80141de:	4560      	cmp	r0, ip
 80141e0:	dd10      	ble.n	8014204 <__kernel_rem_pio2f+0x74>
 80141e2:	a91c      	add	r1, sp, #112	@ 0x70
 80141e4:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 80141e8:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 80141ec:	2600      	movs	r6, #0
 80141ee:	4556      	cmp	r6, sl
 80141f0:	dc24      	bgt.n	801423c <__kernel_rem_pio2f+0xac>
 80141f2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80141f6:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 8014488 <__kernel_rem_pio2f+0x2f8>
 80141fa:	4684      	mov	ip, r0
 80141fc:	2400      	movs	r4, #0
 80141fe:	e016      	b.n	801422e <__kernel_rem_pio2f+0x9e>
 8014200:	2200      	movs	r2, #0
 8014202:	e7dc      	b.n	80141be <__kernel_rem_pio2f+0x2e>
 8014204:	42c6      	cmn	r6, r0
 8014206:	bf5d      	ittte	pl
 8014208:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 801420c:	ee07 1a90 	vmovpl	s15, r1
 8014210:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8014214:	eef0 7a47 	vmovmi.f32	s15, s14
 8014218:	ece4 7a01 	vstmia	r4!, {s15}
 801421c:	3001      	adds	r0, #1
 801421e:	e7de      	b.n	80141de <__kernel_rem_pio2f+0x4e>
 8014220:	ecfe 6a01 	vldmia	lr!, {s13}
 8014224:	ed3c 7a01 	vldmdb	ip!, {s14}
 8014228:	eee6 7a87 	vfma.f32	s15, s13, s14
 801422c:	3401      	adds	r4, #1
 801422e:	455c      	cmp	r4, fp
 8014230:	ddf6      	ble.n	8014220 <__kernel_rem_pio2f+0x90>
 8014232:	ece9 7a01 	vstmia	r9!, {s15}
 8014236:	3601      	adds	r6, #1
 8014238:	3004      	adds	r0, #4
 801423a:	e7d8      	b.n	80141ee <__kernel_rem_pio2f+0x5e>
 801423c:	a908      	add	r1, sp, #32
 801423e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014242:	9104      	str	r1, [sp, #16]
 8014244:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8014246:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 8014484 <__kernel_rem_pio2f+0x2f4>
 801424a:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 8014480 <__kernel_rem_pio2f+0x2f0>
 801424e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8014252:	9203      	str	r2, [sp, #12]
 8014254:	4654      	mov	r4, sl
 8014256:	00a2      	lsls	r2, r4, #2
 8014258:	9205      	str	r2, [sp, #20]
 801425a:	aa58      	add	r2, sp, #352	@ 0x160
 801425c:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8014260:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8014264:	a944      	add	r1, sp, #272	@ 0x110
 8014266:	aa08      	add	r2, sp, #32
 8014268:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 801426c:	4694      	mov	ip, r2
 801426e:	4626      	mov	r6, r4
 8014270:	2e00      	cmp	r6, #0
 8014272:	dc4c      	bgt.n	801430e <__kernel_rem_pio2f+0x17e>
 8014274:	4628      	mov	r0, r5
 8014276:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801427a:	f7ff fbd3 	bl	8013a24 <scalbnf>
 801427e:	eeb0 8a40 	vmov.f32	s16, s0
 8014282:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 8014286:	ee28 0a00 	vmul.f32	s0, s16, s0
 801428a:	f000 fa65 	bl	8014758 <floorf>
 801428e:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8014292:	eea0 8a67 	vfms.f32	s16, s0, s15
 8014296:	2d00      	cmp	r5, #0
 8014298:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801429c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80142a0:	ee17 9a90 	vmov	r9, s15
 80142a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80142a8:	ee38 8a67 	vsub.f32	s16, s16, s15
 80142ac:	dd41      	ble.n	8014332 <__kernel_rem_pio2f+0x1a2>
 80142ae:	f104 3cff 	add.w	ip, r4, #4294967295
 80142b2:	a908      	add	r1, sp, #32
 80142b4:	f1c5 0e08 	rsb	lr, r5, #8
 80142b8:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 80142bc:	fa46 f00e 	asr.w	r0, r6, lr
 80142c0:	4481      	add	r9, r0
 80142c2:	fa00 f00e 	lsl.w	r0, r0, lr
 80142c6:	1a36      	subs	r6, r6, r0
 80142c8:	f1c5 0007 	rsb	r0, r5, #7
 80142cc:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 80142d0:	4106      	asrs	r6, r0
 80142d2:	2e00      	cmp	r6, #0
 80142d4:	dd3c      	ble.n	8014350 <__kernel_rem_pio2f+0x1c0>
 80142d6:	f04f 0e00 	mov.w	lr, #0
 80142da:	f109 0901 	add.w	r9, r9, #1
 80142de:	4670      	mov	r0, lr
 80142e0:	4574      	cmp	r4, lr
 80142e2:	dc68      	bgt.n	80143b6 <__kernel_rem_pio2f+0x226>
 80142e4:	2d00      	cmp	r5, #0
 80142e6:	dd03      	ble.n	80142f0 <__kernel_rem_pio2f+0x160>
 80142e8:	2d01      	cmp	r5, #1
 80142ea:	d074      	beq.n	80143d6 <__kernel_rem_pio2f+0x246>
 80142ec:	2d02      	cmp	r5, #2
 80142ee:	d07d      	beq.n	80143ec <__kernel_rem_pio2f+0x25c>
 80142f0:	2e02      	cmp	r6, #2
 80142f2:	d12d      	bne.n	8014350 <__kernel_rem_pio2f+0x1c0>
 80142f4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80142f8:	ee30 8a48 	vsub.f32	s16, s0, s16
 80142fc:	b340      	cbz	r0, 8014350 <__kernel_rem_pio2f+0x1c0>
 80142fe:	4628      	mov	r0, r5
 8014300:	9306      	str	r3, [sp, #24]
 8014302:	f7ff fb8f 	bl	8013a24 <scalbnf>
 8014306:	9b06      	ldr	r3, [sp, #24]
 8014308:	ee38 8a40 	vsub.f32	s16, s16, s0
 801430c:	e020      	b.n	8014350 <__kernel_rem_pio2f+0x1c0>
 801430e:	ee60 7a28 	vmul.f32	s15, s0, s17
 8014312:	3e01      	subs	r6, #1
 8014314:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014318:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801431c:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8014320:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8014324:	ecac 0a01 	vstmia	ip!, {s0}
 8014328:	ed30 0a01 	vldmdb	r0!, {s0}
 801432c:	ee37 0a80 	vadd.f32	s0, s15, s0
 8014330:	e79e      	b.n	8014270 <__kernel_rem_pio2f+0xe0>
 8014332:	d105      	bne.n	8014340 <__kernel_rem_pio2f+0x1b0>
 8014334:	1e60      	subs	r0, r4, #1
 8014336:	a908      	add	r1, sp, #32
 8014338:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 801433c:	11f6      	asrs	r6, r6, #7
 801433e:	e7c8      	b.n	80142d2 <__kernel_rem_pio2f+0x142>
 8014340:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8014344:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8014348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801434c:	da31      	bge.n	80143b2 <__kernel_rem_pio2f+0x222>
 801434e:	2600      	movs	r6, #0
 8014350:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8014354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014358:	f040 8098 	bne.w	801448c <__kernel_rem_pio2f+0x2fc>
 801435c:	1e60      	subs	r0, r4, #1
 801435e:	2200      	movs	r2, #0
 8014360:	4550      	cmp	r0, sl
 8014362:	da4b      	bge.n	80143fc <__kernel_rem_pio2f+0x26c>
 8014364:	2a00      	cmp	r2, #0
 8014366:	d065      	beq.n	8014434 <__kernel_rem_pio2f+0x2a4>
 8014368:	3c01      	subs	r4, #1
 801436a:	ab08      	add	r3, sp, #32
 801436c:	3d08      	subs	r5, #8
 801436e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8014372:	2b00      	cmp	r3, #0
 8014374:	d0f8      	beq.n	8014368 <__kernel_rem_pio2f+0x1d8>
 8014376:	4628      	mov	r0, r5
 8014378:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801437c:	f7ff fb52 	bl	8013a24 <scalbnf>
 8014380:	1c63      	adds	r3, r4, #1
 8014382:	aa44      	add	r2, sp, #272	@ 0x110
 8014384:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8014484 <__kernel_rem_pio2f+0x2f4>
 8014388:	0099      	lsls	r1, r3, #2
 801438a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801438e:	4623      	mov	r3, r4
 8014390:	2b00      	cmp	r3, #0
 8014392:	f280 80a9 	bge.w	80144e8 <__kernel_rem_pio2f+0x358>
 8014396:	4623      	mov	r3, r4
 8014398:	2b00      	cmp	r3, #0
 801439a:	f2c0 80c7 	blt.w	801452c <__kernel_rem_pio2f+0x39c>
 801439e:	aa44      	add	r2, sp, #272	@ 0x110
 80143a0:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 80143a4:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 801447c <__kernel_rem_pio2f+0x2ec>
 80143a8:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8014488 <__kernel_rem_pio2f+0x2f8>
 80143ac:	2000      	movs	r0, #0
 80143ae:	1ae2      	subs	r2, r4, r3
 80143b0:	e0b1      	b.n	8014516 <__kernel_rem_pio2f+0x386>
 80143b2:	2602      	movs	r6, #2
 80143b4:	e78f      	b.n	80142d6 <__kernel_rem_pio2f+0x146>
 80143b6:	f852 1b04 	ldr.w	r1, [r2], #4
 80143ba:	b948      	cbnz	r0, 80143d0 <__kernel_rem_pio2f+0x240>
 80143bc:	b121      	cbz	r1, 80143c8 <__kernel_rem_pio2f+0x238>
 80143be:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 80143c2:	f842 1c04 	str.w	r1, [r2, #-4]
 80143c6:	2101      	movs	r1, #1
 80143c8:	f10e 0e01 	add.w	lr, lr, #1
 80143cc:	4608      	mov	r0, r1
 80143ce:	e787      	b.n	80142e0 <__kernel_rem_pio2f+0x150>
 80143d0:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 80143d4:	e7f5      	b.n	80143c2 <__kernel_rem_pio2f+0x232>
 80143d6:	f104 3cff 	add.w	ip, r4, #4294967295
 80143da:	aa08      	add	r2, sp, #32
 80143dc:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80143e0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80143e4:	a908      	add	r1, sp, #32
 80143e6:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 80143ea:	e781      	b.n	80142f0 <__kernel_rem_pio2f+0x160>
 80143ec:	f104 3cff 	add.w	ip, r4, #4294967295
 80143f0:	aa08      	add	r2, sp, #32
 80143f2:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80143f6:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80143fa:	e7f3      	b.n	80143e4 <__kernel_rem_pio2f+0x254>
 80143fc:	a908      	add	r1, sp, #32
 80143fe:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8014402:	3801      	subs	r0, #1
 8014404:	430a      	orrs	r2, r1
 8014406:	e7ab      	b.n	8014360 <__kernel_rem_pio2f+0x1d0>
 8014408:	3201      	adds	r2, #1
 801440a:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 801440e:	2e00      	cmp	r6, #0
 8014410:	d0fa      	beq.n	8014408 <__kernel_rem_pio2f+0x278>
 8014412:	9905      	ldr	r1, [sp, #20]
 8014414:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8014418:	eb0d 0001 	add.w	r0, sp, r1
 801441c:	18e6      	adds	r6, r4, r3
 801441e:	a91c      	add	r1, sp, #112	@ 0x70
 8014420:	f104 0c01 	add.w	ip, r4, #1
 8014424:	384c      	subs	r0, #76	@ 0x4c
 8014426:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 801442a:	4422      	add	r2, r4
 801442c:	4562      	cmp	r2, ip
 801442e:	da04      	bge.n	801443a <__kernel_rem_pio2f+0x2aa>
 8014430:	4614      	mov	r4, r2
 8014432:	e710      	b.n	8014256 <__kernel_rem_pio2f+0xc6>
 8014434:	9804      	ldr	r0, [sp, #16]
 8014436:	2201      	movs	r2, #1
 8014438:	e7e7      	b.n	801440a <__kernel_rem_pio2f+0x27a>
 801443a:	9903      	ldr	r1, [sp, #12]
 801443c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8014440:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8014444:	9105      	str	r1, [sp, #20]
 8014446:	ee07 1a90 	vmov	s15, r1
 801444a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801444e:	2400      	movs	r4, #0
 8014450:	ece6 7a01 	vstmia	r6!, {s15}
 8014454:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8014488 <__kernel_rem_pio2f+0x2f8>
 8014458:	46b1      	mov	r9, r6
 801445a:	455c      	cmp	r4, fp
 801445c:	dd04      	ble.n	8014468 <__kernel_rem_pio2f+0x2d8>
 801445e:	ece0 7a01 	vstmia	r0!, {s15}
 8014462:	f10c 0c01 	add.w	ip, ip, #1
 8014466:	e7e1      	b.n	801442c <__kernel_rem_pio2f+0x29c>
 8014468:	ecfe 6a01 	vldmia	lr!, {s13}
 801446c:	ed39 7a01 	vldmdb	r9!, {s14}
 8014470:	3401      	adds	r4, #1
 8014472:	eee6 7a87 	vfma.f32	s15, s13, s14
 8014476:	e7f0      	b.n	801445a <__kernel_rem_pio2f+0x2ca>
 8014478:	08014e1c 	.word	0x08014e1c
 801447c:	08014df0 	.word	0x08014df0
 8014480:	43800000 	.word	0x43800000
 8014484:	3b800000 	.word	0x3b800000
 8014488:	00000000 	.word	0x00000000
 801448c:	9b02      	ldr	r3, [sp, #8]
 801448e:	eeb0 0a48 	vmov.f32	s0, s16
 8014492:	eba3 0008 	sub.w	r0, r3, r8
 8014496:	f7ff fac5 	bl	8013a24 <scalbnf>
 801449a:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8014480 <__kernel_rem_pio2f+0x2f0>
 801449e:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80144a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144a6:	db19      	blt.n	80144dc <__kernel_rem_pio2f+0x34c>
 80144a8:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8014484 <__kernel_rem_pio2f+0x2f4>
 80144ac:	ee60 7a27 	vmul.f32	s15, s0, s15
 80144b0:	aa08      	add	r2, sp, #32
 80144b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80144b6:	3508      	adds	r5, #8
 80144b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80144bc:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80144c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80144c4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80144c8:	ee10 3a10 	vmov	r3, s0
 80144cc:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80144d0:	ee17 3a90 	vmov	r3, s15
 80144d4:	3401      	adds	r4, #1
 80144d6:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80144da:	e74c      	b.n	8014376 <__kernel_rem_pio2f+0x1e6>
 80144dc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80144e0:	aa08      	add	r2, sp, #32
 80144e2:	ee10 3a10 	vmov	r3, s0
 80144e6:	e7f6      	b.n	80144d6 <__kernel_rem_pio2f+0x346>
 80144e8:	a808      	add	r0, sp, #32
 80144ea:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 80144ee:	9001      	str	r0, [sp, #4]
 80144f0:	ee07 0a90 	vmov	s15, r0
 80144f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80144f8:	3b01      	subs	r3, #1
 80144fa:	ee67 7a80 	vmul.f32	s15, s15, s0
 80144fe:	ee20 0a07 	vmul.f32	s0, s0, s14
 8014502:	ed62 7a01 	vstmdb	r2!, {s15}
 8014506:	e743      	b.n	8014390 <__kernel_rem_pio2f+0x200>
 8014508:	ecfc 6a01 	vldmia	ip!, {s13}
 801450c:	ecb5 7a01 	vldmia	r5!, {s14}
 8014510:	eee6 7a87 	vfma.f32	s15, s13, s14
 8014514:	3001      	adds	r0, #1
 8014516:	4550      	cmp	r0, sl
 8014518:	dc01      	bgt.n	801451e <__kernel_rem_pio2f+0x38e>
 801451a:	4290      	cmp	r0, r2
 801451c:	ddf4      	ble.n	8014508 <__kernel_rem_pio2f+0x378>
 801451e:	a858      	add	r0, sp, #352	@ 0x160
 8014520:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8014524:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8014528:	3b01      	subs	r3, #1
 801452a:	e735      	b.n	8014398 <__kernel_rem_pio2f+0x208>
 801452c:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 801452e:	2b02      	cmp	r3, #2
 8014530:	dc09      	bgt.n	8014546 <__kernel_rem_pio2f+0x3b6>
 8014532:	2b00      	cmp	r3, #0
 8014534:	dc27      	bgt.n	8014586 <__kernel_rem_pio2f+0x3f6>
 8014536:	d040      	beq.n	80145ba <__kernel_rem_pio2f+0x42a>
 8014538:	f009 0007 	and.w	r0, r9, #7
 801453c:	b059      	add	sp, #356	@ 0x164
 801453e:	ecbd 8b04 	vpop	{d8-d9}
 8014542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014546:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8014548:	2b03      	cmp	r3, #3
 801454a:	d1f5      	bne.n	8014538 <__kernel_rem_pio2f+0x3a8>
 801454c:	aa30      	add	r2, sp, #192	@ 0xc0
 801454e:	1f0b      	subs	r3, r1, #4
 8014550:	4413      	add	r3, r2
 8014552:	461a      	mov	r2, r3
 8014554:	4620      	mov	r0, r4
 8014556:	2800      	cmp	r0, #0
 8014558:	dc50      	bgt.n	80145fc <__kernel_rem_pio2f+0x46c>
 801455a:	4622      	mov	r2, r4
 801455c:	2a01      	cmp	r2, #1
 801455e:	dc5d      	bgt.n	801461c <__kernel_rem_pio2f+0x48c>
 8014560:	ab30      	add	r3, sp, #192	@ 0xc0
 8014562:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 8014488 <__kernel_rem_pio2f+0x2f8>
 8014566:	440b      	add	r3, r1
 8014568:	2c01      	cmp	r4, #1
 801456a:	dc67      	bgt.n	801463c <__kernel_rem_pio2f+0x4ac>
 801456c:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8014570:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8014574:	2e00      	cmp	r6, #0
 8014576:	d167      	bne.n	8014648 <__kernel_rem_pio2f+0x4b8>
 8014578:	edc7 6a00 	vstr	s13, [r7]
 801457c:	ed87 7a01 	vstr	s14, [r7, #4]
 8014580:	edc7 7a02 	vstr	s15, [r7, #8]
 8014584:	e7d8      	b.n	8014538 <__kernel_rem_pio2f+0x3a8>
 8014586:	ab30      	add	r3, sp, #192	@ 0xc0
 8014588:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 8014488 <__kernel_rem_pio2f+0x2f8>
 801458c:	440b      	add	r3, r1
 801458e:	4622      	mov	r2, r4
 8014590:	2a00      	cmp	r2, #0
 8014592:	da24      	bge.n	80145de <__kernel_rem_pio2f+0x44e>
 8014594:	b34e      	cbz	r6, 80145ea <__kernel_rem_pio2f+0x45a>
 8014596:	eef1 7a47 	vneg.f32	s15, s14
 801459a:	edc7 7a00 	vstr	s15, [r7]
 801459e:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 80145a2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80145a6:	aa31      	add	r2, sp, #196	@ 0xc4
 80145a8:	2301      	movs	r3, #1
 80145aa:	429c      	cmp	r4, r3
 80145ac:	da20      	bge.n	80145f0 <__kernel_rem_pio2f+0x460>
 80145ae:	b10e      	cbz	r6, 80145b4 <__kernel_rem_pio2f+0x424>
 80145b0:	eef1 7a67 	vneg.f32	s15, s15
 80145b4:	edc7 7a01 	vstr	s15, [r7, #4]
 80145b8:	e7be      	b.n	8014538 <__kernel_rem_pio2f+0x3a8>
 80145ba:	ab30      	add	r3, sp, #192	@ 0xc0
 80145bc:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 8014488 <__kernel_rem_pio2f+0x2f8>
 80145c0:	440b      	add	r3, r1
 80145c2:	2c00      	cmp	r4, #0
 80145c4:	da05      	bge.n	80145d2 <__kernel_rem_pio2f+0x442>
 80145c6:	b10e      	cbz	r6, 80145cc <__kernel_rem_pio2f+0x43c>
 80145c8:	eef1 7a67 	vneg.f32	s15, s15
 80145cc:	edc7 7a00 	vstr	s15, [r7]
 80145d0:	e7b2      	b.n	8014538 <__kernel_rem_pio2f+0x3a8>
 80145d2:	ed33 7a01 	vldmdb	r3!, {s14}
 80145d6:	3c01      	subs	r4, #1
 80145d8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80145dc:	e7f1      	b.n	80145c2 <__kernel_rem_pio2f+0x432>
 80145de:	ed73 7a01 	vldmdb	r3!, {s15}
 80145e2:	3a01      	subs	r2, #1
 80145e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80145e8:	e7d2      	b.n	8014590 <__kernel_rem_pio2f+0x400>
 80145ea:	eef0 7a47 	vmov.f32	s15, s14
 80145ee:	e7d4      	b.n	801459a <__kernel_rem_pio2f+0x40a>
 80145f0:	ecb2 7a01 	vldmia	r2!, {s14}
 80145f4:	3301      	adds	r3, #1
 80145f6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80145fa:	e7d6      	b.n	80145aa <__kernel_rem_pio2f+0x41a>
 80145fc:	ed72 7a01 	vldmdb	r2!, {s15}
 8014600:	edd2 6a01 	vldr	s13, [r2, #4]
 8014604:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8014608:	3801      	subs	r0, #1
 801460a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801460e:	ed82 7a00 	vstr	s14, [r2]
 8014612:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014616:	edc2 7a01 	vstr	s15, [r2, #4]
 801461a:	e79c      	b.n	8014556 <__kernel_rem_pio2f+0x3c6>
 801461c:	ed73 7a01 	vldmdb	r3!, {s15}
 8014620:	edd3 6a01 	vldr	s13, [r3, #4]
 8014624:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8014628:	3a01      	subs	r2, #1
 801462a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801462e:	ed83 7a00 	vstr	s14, [r3]
 8014632:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014636:	edc3 7a01 	vstr	s15, [r3, #4]
 801463a:	e78f      	b.n	801455c <__kernel_rem_pio2f+0x3cc>
 801463c:	ed33 7a01 	vldmdb	r3!, {s14}
 8014640:	3c01      	subs	r4, #1
 8014642:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014646:	e78f      	b.n	8014568 <__kernel_rem_pio2f+0x3d8>
 8014648:	eef1 6a66 	vneg.f32	s13, s13
 801464c:	eeb1 7a47 	vneg.f32	s14, s14
 8014650:	edc7 6a00 	vstr	s13, [r7]
 8014654:	ed87 7a01 	vstr	s14, [r7, #4]
 8014658:	eef1 7a67 	vneg.f32	s15, s15
 801465c:	e790      	b.n	8014580 <__kernel_rem_pio2f+0x3f0>
 801465e:	bf00      	nop

08014660 <floor>:
 8014660:	ec51 0b10 	vmov	r0, r1, d0
 8014664:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8014668:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801466c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8014670:	2e13      	cmp	r6, #19
 8014672:	460c      	mov	r4, r1
 8014674:	4605      	mov	r5, r0
 8014676:	4680      	mov	r8, r0
 8014678:	dc34      	bgt.n	80146e4 <floor+0x84>
 801467a:	2e00      	cmp	r6, #0
 801467c:	da17      	bge.n	80146ae <floor+0x4e>
 801467e:	a332      	add	r3, pc, #200	@ (adr r3, 8014748 <floor+0xe8>)
 8014680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014684:	f7eb fdce 	bl	8000224 <__adddf3>
 8014688:	2200      	movs	r2, #0
 801468a:	2300      	movs	r3, #0
 801468c:	f7ec fa10 	bl	8000ab0 <__aeabi_dcmpgt>
 8014690:	b150      	cbz	r0, 80146a8 <floor+0x48>
 8014692:	2c00      	cmp	r4, #0
 8014694:	da55      	bge.n	8014742 <floor+0xe2>
 8014696:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 801469a:	432c      	orrs	r4, r5
 801469c:	2500      	movs	r5, #0
 801469e:	42ac      	cmp	r4, r5
 80146a0:	4c2b      	ldr	r4, [pc, #172]	@ (8014750 <floor+0xf0>)
 80146a2:	bf08      	it	eq
 80146a4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 80146a8:	4621      	mov	r1, r4
 80146aa:	4628      	mov	r0, r5
 80146ac:	e023      	b.n	80146f6 <floor+0x96>
 80146ae:	4f29      	ldr	r7, [pc, #164]	@ (8014754 <floor+0xf4>)
 80146b0:	4137      	asrs	r7, r6
 80146b2:	ea01 0307 	and.w	r3, r1, r7
 80146b6:	4303      	orrs	r3, r0
 80146b8:	d01d      	beq.n	80146f6 <floor+0x96>
 80146ba:	a323      	add	r3, pc, #140	@ (adr r3, 8014748 <floor+0xe8>)
 80146bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146c0:	f7eb fdb0 	bl	8000224 <__adddf3>
 80146c4:	2200      	movs	r2, #0
 80146c6:	2300      	movs	r3, #0
 80146c8:	f7ec f9f2 	bl	8000ab0 <__aeabi_dcmpgt>
 80146cc:	2800      	cmp	r0, #0
 80146ce:	d0eb      	beq.n	80146a8 <floor+0x48>
 80146d0:	2c00      	cmp	r4, #0
 80146d2:	bfbe      	ittt	lt
 80146d4:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 80146d8:	4133      	asrlt	r3, r6
 80146da:	18e4      	addlt	r4, r4, r3
 80146dc:	ea24 0407 	bic.w	r4, r4, r7
 80146e0:	2500      	movs	r5, #0
 80146e2:	e7e1      	b.n	80146a8 <floor+0x48>
 80146e4:	2e33      	cmp	r6, #51	@ 0x33
 80146e6:	dd0a      	ble.n	80146fe <floor+0x9e>
 80146e8:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 80146ec:	d103      	bne.n	80146f6 <floor+0x96>
 80146ee:	4602      	mov	r2, r0
 80146f0:	460b      	mov	r3, r1
 80146f2:	f7eb fd97 	bl	8000224 <__adddf3>
 80146f6:	ec41 0b10 	vmov	d0, r0, r1
 80146fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80146fe:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8014702:	f04f 37ff 	mov.w	r7, #4294967295
 8014706:	40df      	lsrs	r7, r3
 8014708:	4207      	tst	r7, r0
 801470a:	d0f4      	beq.n	80146f6 <floor+0x96>
 801470c:	a30e      	add	r3, pc, #56	@ (adr r3, 8014748 <floor+0xe8>)
 801470e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014712:	f7eb fd87 	bl	8000224 <__adddf3>
 8014716:	2200      	movs	r2, #0
 8014718:	2300      	movs	r3, #0
 801471a:	f7ec f9c9 	bl	8000ab0 <__aeabi_dcmpgt>
 801471e:	2800      	cmp	r0, #0
 8014720:	d0c2      	beq.n	80146a8 <floor+0x48>
 8014722:	2c00      	cmp	r4, #0
 8014724:	da0a      	bge.n	801473c <floor+0xdc>
 8014726:	2e14      	cmp	r6, #20
 8014728:	d101      	bne.n	801472e <floor+0xce>
 801472a:	3401      	adds	r4, #1
 801472c:	e006      	b.n	801473c <floor+0xdc>
 801472e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8014732:	2301      	movs	r3, #1
 8014734:	40b3      	lsls	r3, r6
 8014736:	441d      	add	r5, r3
 8014738:	4545      	cmp	r5, r8
 801473a:	d3f6      	bcc.n	801472a <floor+0xca>
 801473c:	ea25 0507 	bic.w	r5, r5, r7
 8014740:	e7b2      	b.n	80146a8 <floor+0x48>
 8014742:	2500      	movs	r5, #0
 8014744:	462c      	mov	r4, r5
 8014746:	e7af      	b.n	80146a8 <floor+0x48>
 8014748:	8800759c 	.word	0x8800759c
 801474c:	7e37e43c 	.word	0x7e37e43c
 8014750:	bff00000 	.word	0xbff00000
 8014754:	000fffff 	.word	0x000fffff

08014758 <floorf>:
 8014758:	ee10 3a10 	vmov	r3, s0
 801475c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8014760:	3a7f      	subs	r2, #127	@ 0x7f
 8014762:	2a16      	cmp	r2, #22
 8014764:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8014768:	dc2b      	bgt.n	80147c2 <floorf+0x6a>
 801476a:	2a00      	cmp	r2, #0
 801476c:	da12      	bge.n	8014794 <floorf+0x3c>
 801476e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80147d4 <floorf+0x7c>
 8014772:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014776:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801477a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801477e:	dd06      	ble.n	801478e <floorf+0x36>
 8014780:	2b00      	cmp	r3, #0
 8014782:	da24      	bge.n	80147ce <floorf+0x76>
 8014784:	2900      	cmp	r1, #0
 8014786:	4b14      	ldr	r3, [pc, #80]	@ (80147d8 <floorf+0x80>)
 8014788:	bf08      	it	eq
 801478a:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 801478e:	ee00 3a10 	vmov	s0, r3
 8014792:	4770      	bx	lr
 8014794:	4911      	ldr	r1, [pc, #68]	@ (80147dc <floorf+0x84>)
 8014796:	4111      	asrs	r1, r2
 8014798:	420b      	tst	r3, r1
 801479a:	d0fa      	beq.n	8014792 <floorf+0x3a>
 801479c:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 80147d4 <floorf+0x7c>
 80147a0:	ee30 0a27 	vadd.f32	s0, s0, s15
 80147a4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80147a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80147ac:	ddef      	ble.n	801478e <floorf+0x36>
 80147ae:	2b00      	cmp	r3, #0
 80147b0:	bfbe      	ittt	lt
 80147b2:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 80147b6:	fa40 f202 	asrlt.w	r2, r0, r2
 80147ba:	189b      	addlt	r3, r3, r2
 80147bc:	ea23 0301 	bic.w	r3, r3, r1
 80147c0:	e7e5      	b.n	801478e <floorf+0x36>
 80147c2:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80147c6:	d3e4      	bcc.n	8014792 <floorf+0x3a>
 80147c8:	ee30 0a00 	vadd.f32	s0, s0, s0
 80147cc:	4770      	bx	lr
 80147ce:	2300      	movs	r3, #0
 80147d0:	e7dd      	b.n	801478e <floorf+0x36>
 80147d2:	bf00      	nop
 80147d4:	7149f2ca 	.word	0x7149f2ca
 80147d8:	bf800000 	.word	0xbf800000
 80147dc:	007fffff 	.word	0x007fffff

080147e0 <_init>:
 80147e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80147e2:	bf00      	nop
 80147e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80147e6:	bc08      	pop	{r3}
 80147e8:	469e      	mov	lr, r3
 80147ea:	4770      	bx	lr

080147ec <_fini>:
 80147ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80147ee:	bf00      	nop
 80147f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80147f2:	bc08      	pop	{r3}
 80147f4:	469e      	mov	lr, r3
 80147f6:	4770      	bx	lr
