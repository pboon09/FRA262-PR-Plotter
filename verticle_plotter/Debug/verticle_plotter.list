
verticle_plotter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000129b8  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000660  08012b90  08012b90  00013b90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080131f0  080131f0  0001518c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080131f0  080131f0  000141f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080131f8  080131f8  0001518c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080131f8  080131f8  000141f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080131fc  080131fc  000141fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000018c  20000000  08013200  00015000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000218c  2000018c  0801338c  0001518c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002318  0801338c  00015318  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001518c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002bee3  00000000  00000000  000151bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005581  00000000  00000000  0004109f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ca8  00000000  00000000  00046620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001647  00000000  00000000  000482c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002db7e  00000000  00000000  0004990f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002b4d7  00000000  00000000  0007748d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00119e06  00000000  00000000  000a2964  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001bc76a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000082a4  00000000  00000000  001bc7b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  001c4a54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000018c 	.word	0x2000018c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08012b78 	.word	0x08012b78

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000190 	.word	0x20000190
 8000214:	08012b78 	.word	0x08012b78

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2iz>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000acc:	d215      	bcs.n	8000afa <__aeabi_d2iz+0x36>
 8000ace:	d511      	bpl.n	8000af4 <__aeabi_d2iz+0x30>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d912      	bls.n	8000b00 <__aeabi_d2iz+0x3c>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d105      	bne.n	8000b0c <__aeabi_d2iz+0x48>
 8000b00:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b04:	bf08      	it	eq
 8000b06:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_d2uiz>:
 8000b14:	004a      	lsls	r2, r1, #1
 8000b16:	d211      	bcs.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b18:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b1c:	d211      	bcs.n	8000b42 <__aeabi_d2uiz+0x2e>
 8000b1e:	d50d      	bpl.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b20:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b24:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b28:	d40e      	bmi.n	8000b48 <__aeabi_d2uiz+0x34>
 8000b2a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b32:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	4770      	bx	lr
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b46:	d102      	bne.n	8000b4e <__aeabi_d2uiz+0x3a>
 8000b48:	f04f 30ff 	mov.w	r0, #4294967295
 8000b4c:	4770      	bx	lr
 8000b4e:	f04f 0000 	mov.w	r0, #0
 8000b52:	4770      	bx	lr

08000b54 <__aeabi_d2f>:
 8000b54:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b58:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b5c:	bf24      	itt	cs
 8000b5e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b62:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b66:	d90d      	bls.n	8000b84 <__aeabi_d2f+0x30>
 8000b68:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b6c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b70:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b74:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b78:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b7c:	bf08      	it	eq
 8000b7e:	f020 0001 	biceq.w	r0, r0, #1
 8000b82:	4770      	bx	lr
 8000b84:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b88:	d121      	bne.n	8000bce <__aeabi_d2f+0x7a>
 8000b8a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b8e:	bfbc      	itt	lt
 8000b90:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b94:	4770      	bxlt	lr
 8000b96:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b9a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b9e:	f1c2 0218 	rsb	r2, r2, #24
 8000ba2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ba6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000baa:	fa20 f002 	lsr.w	r0, r0, r2
 8000bae:	bf18      	it	ne
 8000bb0:	f040 0001 	orrne.w	r0, r0, #1
 8000bb4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bbc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc0:	ea40 000c 	orr.w	r0, r0, ip
 8000bc4:	fa23 f302 	lsr.w	r3, r3, r2
 8000bc8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bcc:	e7cc      	b.n	8000b68 <__aeabi_d2f+0x14>
 8000bce:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd2:	d107      	bne.n	8000be4 <__aeabi_d2f+0x90>
 8000bd4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bd8:	bf1e      	ittt	ne
 8000bda:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bde:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000be2:	4770      	bxne	lr
 8000be4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bec:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop

08000bf4 <__aeabi_uldivmod>:
 8000bf4:	b953      	cbnz	r3, 8000c0c <__aeabi_uldivmod+0x18>
 8000bf6:	b94a      	cbnz	r2, 8000c0c <__aeabi_uldivmod+0x18>
 8000bf8:	2900      	cmp	r1, #0
 8000bfa:	bf08      	it	eq
 8000bfc:	2800      	cmpeq	r0, #0
 8000bfe:	bf1c      	itt	ne
 8000c00:	f04f 31ff 	movne.w	r1, #4294967295
 8000c04:	f04f 30ff 	movne.w	r0, #4294967295
 8000c08:	f000 b988 	b.w	8000f1c <__aeabi_idiv0>
 8000c0c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c10:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c14:	f000 f806 	bl	8000c24 <__udivmoddi4>
 8000c18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c20:	b004      	add	sp, #16
 8000c22:	4770      	bx	lr

08000c24 <__udivmoddi4>:
 8000c24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c28:	9d08      	ldr	r5, [sp, #32]
 8000c2a:	468e      	mov	lr, r1
 8000c2c:	4604      	mov	r4, r0
 8000c2e:	4688      	mov	r8, r1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d14a      	bne.n	8000cca <__udivmoddi4+0xa6>
 8000c34:	428a      	cmp	r2, r1
 8000c36:	4617      	mov	r7, r2
 8000c38:	d962      	bls.n	8000d00 <__udivmoddi4+0xdc>
 8000c3a:	fab2 f682 	clz	r6, r2
 8000c3e:	b14e      	cbz	r6, 8000c54 <__udivmoddi4+0x30>
 8000c40:	f1c6 0320 	rsb	r3, r6, #32
 8000c44:	fa01 f806 	lsl.w	r8, r1, r6
 8000c48:	fa20 f303 	lsr.w	r3, r0, r3
 8000c4c:	40b7      	lsls	r7, r6
 8000c4e:	ea43 0808 	orr.w	r8, r3, r8
 8000c52:	40b4      	lsls	r4, r6
 8000c54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c58:	fa1f fc87 	uxth.w	ip, r7
 8000c5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c60:	0c23      	lsrs	r3, r4, #16
 8000c62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000c6e:	429a      	cmp	r2, r3
 8000c70:	d909      	bls.n	8000c86 <__udivmoddi4+0x62>
 8000c72:	18fb      	adds	r3, r7, r3
 8000c74:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c78:	f080 80ea 	bcs.w	8000e50 <__udivmoddi4+0x22c>
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	f240 80e7 	bls.w	8000e50 <__udivmoddi4+0x22c>
 8000c82:	3902      	subs	r1, #2
 8000c84:	443b      	add	r3, r7
 8000c86:	1a9a      	subs	r2, r3, r2
 8000c88:	b2a3      	uxth	r3, r4
 8000c8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c9a:	459c      	cmp	ip, r3
 8000c9c:	d909      	bls.n	8000cb2 <__udivmoddi4+0x8e>
 8000c9e:	18fb      	adds	r3, r7, r3
 8000ca0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ca4:	f080 80d6 	bcs.w	8000e54 <__udivmoddi4+0x230>
 8000ca8:	459c      	cmp	ip, r3
 8000caa:	f240 80d3 	bls.w	8000e54 <__udivmoddi4+0x230>
 8000cae:	443b      	add	r3, r7
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cb6:	eba3 030c 	sub.w	r3, r3, ip
 8000cba:	2100      	movs	r1, #0
 8000cbc:	b11d      	cbz	r5, 8000cc6 <__udivmoddi4+0xa2>
 8000cbe:	40f3      	lsrs	r3, r6
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	428b      	cmp	r3, r1
 8000ccc:	d905      	bls.n	8000cda <__udivmoddi4+0xb6>
 8000cce:	b10d      	cbz	r5, 8000cd4 <__udivmoddi4+0xb0>
 8000cd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	4608      	mov	r0, r1
 8000cd8:	e7f5      	b.n	8000cc6 <__udivmoddi4+0xa2>
 8000cda:	fab3 f183 	clz	r1, r3
 8000cde:	2900      	cmp	r1, #0
 8000ce0:	d146      	bne.n	8000d70 <__udivmoddi4+0x14c>
 8000ce2:	4573      	cmp	r3, lr
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xc8>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 8105 	bhi.w	8000ef6 <__udivmoddi4+0x2d2>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	4690      	mov	r8, r2
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e5      	beq.n	8000cc6 <__udivmoddi4+0xa2>
 8000cfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000cfe:	e7e2      	b.n	8000cc6 <__udivmoddi4+0xa2>
 8000d00:	2a00      	cmp	r2, #0
 8000d02:	f000 8090 	beq.w	8000e26 <__udivmoddi4+0x202>
 8000d06:	fab2 f682 	clz	r6, r2
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	f040 80a4 	bne.w	8000e58 <__udivmoddi4+0x234>
 8000d10:	1a8a      	subs	r2, r1, r2
 8000d12:	0c03      	lsrs	r3, r0, #16
 8000d14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d18:	b280      	uxth	r0, r0
 8000d1a:	b2bc      	uxth	r4, r7
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	d907      	bls.n	8000d42 <__udivmoddi4+0x11e>
 8000d32:	18fb      	adds	r3, r7, r3
 8000d34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d38:	d202      	bcs.n	8000d40 <__udivmoddi4+0x11c>
 8000d3a:	429a      	cmp	r2, r3
 8000d3c:	f200 80e0 	bhi.w	8000f00 <__udivmoddi4+0x2dc>
 8000d40:	46c4      	mov	ip, r8
 8000d42:	1a9b      	subs	r3, r3, r2
 8000d44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d50:	fb02 f404 	mul.w	r4, r2, r4
 8000d54:	429c      	cmp	r4, r3
 8000d56:	d907      	bls.n	8000d68 <__udivmoddi4+0x144>
 8000d58:	18fb      	adds	r3, r7, r3
 8000d5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d5e:	d202      	bcs.n	8000d66 <__udivmoddi4+0x142>
 8000d60:	429c      	cmp	r4, r3
 8000d62:	f200 80ca 	bhi.w	8000efa <__udivmoddi4+0x2d6>
 8000d66:	4602      	mov	r2, r0
 8000d68:	1b1b      	subs	r3, r3, r4
 8000d6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d6e:	e7a5      	b.n	8000cbc <__udivmoddi4+0x98>
 8000d70:	f1c1 0620 	rsb	r6, r1, #32
 8000d74:	408b      	lsls	r3, r1
 8000d76:	fa22 f706 	lsr.w	r7, r2, r6
 8000d7a:	431f      	orrs	r7, r3
 8000d7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000d80:	fa20 f306 	lsr.w	r3, r0, r6
 8000d84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d8c:	4323      	orrs	r3, r4
 8000d8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000d92:	fa1f fc87 	uxth.w	ip, r7
 8000d96:	fbbe f0f9 	udiv	r0, lr, r9
 8000d9a:	0c1c      	lsrs	r4, r3, #16
 8000d9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000da0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000da4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000da8:	45a6      	cmp	lr, r4
 8000daa:	fa02 f201 	lsl.w	r2, r2, r1
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x1a0>
 8000db0:	193c      	adds	r4, r7, r4
 8000db2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000db6:	f080 809c 	bcs.w	8000ef2 <__udivmoddi4+0x2ce>
 8000dba:	45a6      	cmp	lr, r4
 8000dbc:	f240 8099 	bls.w	8000ef2 <__udivmoddi4+0x2ce>
 8000dc0:	3802      	subs	r0, #2
 8000dc2:	443c      	add	r4, r7
 8000dc4:	eba4 040e 	sub.w	r4, r4, lr
 8000dc8:	fa1f fe83 	uxth.w	lr, r3
 8000dcc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dd0:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dd8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ddc:	45a4      	cmp	ip, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x1ce>
 8000de0:	193c      	adds	r4, r7, r4
 8000de2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000de6:	f080 8082 	bcs.w	8000eee <__udivmoddi4+0x2ca>
 8000dea:	45a4      	cmp	ip, r4
 8000dec:	d97f      	bls.n	8000eee <__udivmoddi4+0x2ca>
 8000dee:	3b02      	subs	r3, #2
 8000df0:	443c      	add	r4, r7
 8000df2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000df6:	eba4 040c 	sub.w	r4, r4, ip
 8000dfa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000dfe:	4564      	cmp	r4, ip
 8000e00:	4673      	mov	r3, lr
 8000e02:	46e1      	mov	r9, ip
 8000e04:	d362      	bcc.n	8000ecc <__udivmoddi4+0x2a8>
 8000e06:	d05f      	beq.n	8000ec8 <__udivmoddi4+0x2a4>
 8000e08:	b15d      	cbz	r5, 8000e22 <__udivmoddi4+0x1fe>
 8000e0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000e0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000e12:	fa04 f606 	lsl.w	r6, r4, r6
 8000e16:	fa22 f301 	lsr.w	r3, r2, r1
 8000e1a:	431e      	orrs	r6, r3
 8000e1c:	40cc      	lsrs	r4, r1
 8000e1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000e22:	2100      	movs	r1, #0
 8000e24:	e74f      	b.n	8000cc6 <__udivmoddi4+0xa2>
 8000e26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e2a:	0c01      	lsrs	r1, r0, #16
 8000e2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e30:	b280      	uxth	r0, r0
 8000e32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e36:	463b      	mov	r3, r7
 8000e38:	4638      	mov	r0, r7
 8000e3a:	463c      	mov	r4, r7
 8000e3c:	46b8      	mov	r8, r7
 8000e3e:	46be      	mov	lr, r7
 8000e40:	2620      	movs	r6, #32
 8000e42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e46:	eba2 0208 	sub.w	r2, r2, r8
 8000e4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e4e:	e766      	b.n	8000d1e <__udivmoddi4+0xfa>
 8000e50:	4601      	mov	r1, r0
 8000e52:	e718      	b.n	8000c86 <__udivmoddi4+0x62>
 8000e54:	4610      	mov	r0, r2
 8000e56:	e72c      	b.n	8000cb2 <__udivmoddi4+0x8e>
 8000e58:	f1c6 0220 	rsb	r2, r6, #32
 8000e5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000e60:	40b7      	lsls	r7, r6
 8000e62:	40b1      	lsls	r1, r6
 8000e64:	fa20 f202 	lsr.w	r2, r0, r2
 8000e68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e6c:	430a      	orrs	r2, r1
 8000e6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e72:	b2bc      	uxth	r4, r7
 8000e74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e78:	0c11      	lsrs	r1, r2, #16
 8000e7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e7e:	fb08 f904 	mul.w	r9, r8, r4
 8000e82:	40b0      	lsls	r0, r6
 8000e84:	4589      	cmp	r9, r1
 8000e86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e8a:	b280      	uxth	r0, r0
 8000e8c:	d93e      	bls.n	8000f0c <__udivmoddi4+0x2e8>
 8000e8e:	1879      	adds	r1, r7, r1
 8000e90:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e94:	d201      	bcs.n	8000e9a <__udivmoddi4+0x276>
 8000e96:	4589      	cmp	r9, r1
 8000e98:	d81f      	bhi.n	8000eda <__udivmoddi4+0x2b6>
 8000e9a:	eba1 0109 	sub.w	r1, r1, r9
 8000e9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ea2:	fb09 f804 	mul.w	r8, r9, r4
 8000ea6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eaa:	b292      	uxth	r2, r2
 8000eac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000eb0:	4542      	cmp	r2, r8
 8000eb2:	d229      	bcs.n	8000f08 <__udivmoddi4+0x2e4>
 8000eb4:	18ba      	adds	r2, r7, r2
 8000eb6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000eba:	d2c4      	bcs.n	8000e46 <__udivmoddi4+0x222>
 8000ebc:	4542      	cmp	r2, r8
 8000ebe:	d2c2      	bcs.n	8000e46 <__udivmoddi4+0x222>
 8000ec0:	f1a9 0102 	sub.w	r1, r9, #2
 8000ec4:	443a      	add	r2, r7
 8000ec6:	e7be      	b.n	8000e46 <__udivmoddi4+0x222>
 8000ec8:	45f0      	cmp	r8, lr
 8000eca:	d29d      	bcs.n	8000e08 <__udivmoddi4+0x1e4>
 8000ecc:	ebbe 0302 	subs.w	r3, lr, r2
 8000ed0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	46e1      	mov	r9, ip
 8000ed8:	e796      	b.n	8000e08 <__udivmoddi4+0x1e4>
 8000eda:	eba7 0909 	sub.w	r9, r7, r9
 8000ede:	4449      	add	r1, r9
 8000ee0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ee4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ee8:	fb09 f804 	mul.w	r8, r9, r4
 8000eec:	e7db      	b.n	8000ea6 <__udivmoddi4+0x282>
 8000eee:	4673      	mov	r3, lr
 8000ef0:	e77f      	b.n	8000df2 <__udivmoddi4+0x1ce>
 8000ef2:	4650      	mov	r0, sl
 8000ef4:	e766      	b.n	8000dc4 <__udivmoddi4+0x1a0>
 8000ef6:	4608      	mov	r0, r1
 8000ef8:	e6fd      	b.n	8000cf6 <__udivmoddi4+0xd2>
 8000efa:	443b      	add	r3, r7
 8000efc:	3a02      	subs	r2, #2
 8000efe:	e733      	b.n	8000d68 <__udivmoddi4+0x144>
 8000f00:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f04:	443b      	add	r3, r7
 8000f06:	e71c      	b.n	8000d42 <__udivmoddi4+0x11e>
 8000f08:	4649      	mov	r1, r9
 8000f0a:	e79c      	b.n	8000e46 <__udivmoddi4+0x222>
 8000f0c:	eba1 0109 	sub.w	r1, r1, r9
 8000f10:	46c4      	mov	ip, r8
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fb09 f804 	mul.w	r8, r9, r4
 8000f1a:	e7c4      	b.n	8000ea6 <__udivmoddi4+0x282>

08000f1c <__aeabi_idiv0>:
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop

08000f20 <ADC_DMA_Init>:

#include "ADC_DMA.h"

void ADC_DMA_Init(ADC_DMA *adc_dma, ADC_HandleTypeDef *hadc,
                 uint16_t *buffer, uint32_t buffer_length,
                 uint8_t num_channels, float vref, float resolution) {
 8000f20:	b480      	push	{r7}
 8000f22:	b089      	sub	sp, #36	@ 0x24
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6178      	str	r0, [r7, #20]
 8000f28:	6139      	str	r1, [r7, #16]
 8000f2a:	60fa      	str	r2, [r7, #12]
 8000f2c:	60bb      	str	r3, [r7, #8]
 8000f2e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000f32:	edc7 0a00 	vstr	s1, [r7]

    adc_dma->hadc = hadc;
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	693a      	ldr	r2, [r7, #16]
 8000f3a:	601a      	str	r2, [r3, #0]
    adc_dma->dma_buffer = buffer;
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	68fa      	ldr	r2, [r7, #12]
 8000f40:	605a      	str	r2, [r3, #4]
    adc_dma->buffer_length = buffer_length;
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	68ba      	ldr	r2, [r7, #8]
 8000f46:	609a      	str	r2, [r3, #8]
    adc_dma->num_channels = num_channels;
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8000f4e:	731a      	strb	r2, [r3, #12]
    adc_dma->adc_vref = vref;
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	687a      	ldr	r2, [r7, #4]
 8000f54:	611a      	str	r2, [r3, #16]
    adc_dma->adc_resolution = resolution;
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	683a      	ldr	r2, [r7, #0]
 8000f5a:	615a      	str	r2, [r3, #20]

    // Default center point and error percentage
    adc_dma->center_point = resolution / 2.0f;  // Typically 2048 for 12-bit ADC
 8000f5c:	ed97 7a00 	vldr	s14, [r7]
 8000f60:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8000f64:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	edc3 7a06 	vstr	s15, [r3, #24]
    adc_dma->error_percentage = 5;              // 5% error by default
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	2205      	movs	r2, #5
 8000f72:	f883 2020 	strb.w	r2, [r3, #32]
    adc_dma->threshold = (adc_dma->error_percentage / 100.0f) * adc_dma->center_point;
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f7c:	ee07 3a90 	vmov	s15, r3
 8000f80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f84:	eddf 6a11 	vldr	s13, [pc, #68]	@ 8000fcc <ADC_DMA_Init+0xac>
 8000f88:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	edd3 7a06 	vldr	s15, [r3, #24]
 8000f92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	edc3 7a07 	vstr	s15, [r3, #28]

    // Initialize DMA buffer
    for (uint32_t i = 0; i < buffer_length; i++) {
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	61fb      	str	r3, [r7, #28]
 8000fa0:	e008      	b.n	8000fb4 <ADC_DMA_Init+0x94>
        buffer[i] = 0;
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	68fa      	ldr	r2, [r7, #12]
 8000fa8:	4413      	add	r3, r2
 8000faa:	2200      	movs	r2, #0
 8000fac:	801a      	strh	r2, [r3, #0]
    for (uint32_t i = 0; i < buffer_length; i++) {
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	61fb      	str	r3, [r7, #28]
 8000fb4:	69fa      	ldr	r2, [r7, #28]
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d3f2      	bcc.n	8000fa2 <ADC_DMA_Init+0x82>
    }
}
 8000fbc:	bf00      	nop
 8000fbe:	bf00      	nop
 8000fc0:	3724      	adds	r7, #36	@ 0x24
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	42c80000 	.word	0x42c80000

08000fd0 <ADC_DMA_Start>:

void ADC_DMA_Start(ADC_DMA *adc_dma) {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
    // Perform ADC calibration
    HAL_ADCEx_Calibration_Start(adc_dma->hadc, ADC_SINGLE_ENDED);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	217f      	movs	r1, #127	@ 0x7f
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f009 f9ea 	bl	800a3b8 <HAL_ADCEx_Calibration_Start>

    // Start ADC with DMA
    HAL_ADC_Start_DMA(adc_dma->hadc, (uint32_t*)adc_dma->dma_buffer, adc_dma->buffer_length);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6818      	ldr	r0, [r3, #0]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6859      	ldr	r1, [r3, #4]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	f008 fad3 	bl	800959c <HAL_ADC_Start_DMA>
}
 8000ff6:	bf00      	nop
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
	...

08001000 <ADC_DMA_GetValue>:

void ADC_DMA_Stop(ADC_DMA *adc_dma) {
    HAL_ADC_Stop_DMA(adc_dma->hadc);
}

float ADC_DMA_GetValue(ADC_DMA *adc_dma, uint8_t channel_index) {
 8001000:	b480      	push	{r7}
 8001002:	b087      	sub	sp, #28
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	460b      	mov	r3, r1
 800100a:	70fb      	strb	r3, [r7, #3]
    uint32_t sum = 0;
 800100c:	2300      	movs	r3, #0
 800100e:	617b      	str	r3, [r7, #20]
    uint32_t samples = 0;
 8001010:	2300      	movs	r3, #0
 8001012:	613b      	str	r3, [r7, #16]

    // Average all samples for this channel
    for (uint32_t j = channel_index; j < adc_dma->buffer_length; j += adc_dma->num_channels) {
 8001014:	78fb      	ldrb	r3, [r7, #3]
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	e012      	b.n	8001040 <ADC_DMA_GetValue+0x40>
        sum += adc_dma->dma_buffer[j];
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	685a      	ldr	r2, [r3, #4]
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	4413      	add	r3, r2
 8001024:	881b      	ldrh	r3, [r3, #0]
 8001026:	461a      	mov	r2, r3
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	4413      	add	r3, r2
 800102c:	617b      	str	r3, [r7, #20]
        samples++;
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	3301      	adds	r3, #1
 8001032:	613b      	str	r3, [r7, #16]
    for (uint32_t j = channel_index; j < adc_dma->buffer_length; j += adc_dma->num_channels) {
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	7b1b      	ldrb	r3, [r3, #12]
 8001038:	461a      	mov	r2, r3
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	4413      	add	r3, r2
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	689b      	ldr	r3, [r3, #8]
 8001044:	68fa      	ldr	r2, [r7, #12]
 8001046:	429a      	cmp	r2, r3
 8001048:	d3e7      	bcc.n	800101a <ADC_DMA_GetValue+0x1a>
    }

    // Calculate raw ADC value
    if (samples > 0) {
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d00c      	beq.n	800106a <ADC_DMA_GetValue+0x6a>
        return (float)sum / samples;
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	ee07 3a90 	vmov	s15, r3
 8001056:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	ee07 3a90 	vmov	s15, r3
 8001060:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001064:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001068:	e001      	b.n	800106e <ADC_DMA_GetValue+0x6e>
    }

    return 0.0f;
 800106a:	eddf 6a05 	vldr	s13, [pc, #20]	@ 8001080 <ADC_DMA_GetValue+0x80>
}
 800106e:	eef0 7a66 	vmov.f32	s15, s13
 8001072:	eeb0 0a67 	vmov.f32	s0, s15
 8001076:	371c      	adds	r7, #28
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	00000000 	.word	0x00000000

08001084 <ADC_DMA_SetCenterPoint>:

void ADC_DMA_SetCenterPoint(ADC_DMA *adc_dma, float center_point, uint8_t error_percentage) {
 8001084:	b480      	push	{r7}
 8001086:	b085      	sub	sp, #20
 8001088:	af00      	add	r7, sp, #0
 800108a:	60f8      	str	r0, [r7, #12]
 800108c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001090:	460b      	mov	r3, r1
 8001092:	71fb      	strb	r3, [r7, #7]
    adc_dma->center_point = center_point;
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	68ba      	ldr	r2, [r7, #8]
 8001098:	619a      	str	r2, [r3, #24]
    adc_dma->error_percentage = error_percentage;
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	79fa      	ldrb	r2, [r7, #7]
 800109e:	f883 2020 	strb.w	r2, [r3, #32]
    // Update threshold
    adc_dma->threshold = (adc_dma->error_percentage / 100.0f) * adc_dma->center_point;
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010a8:	ee07 3a90 	vmov	s15, r3
 80010ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010b0:	eddf 6a08 	vldr	s13, [pc, #32]	@ 80010d4 <ADC_DMA_SetCenterPoint+0x50>
 80010b4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	edd3 7a06 	vldr	s15, [r3, #24]
 80010be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	edc3 7a07 	vstr	s15, [r3, #28]
}
 80010c8:	bf00      	nop
 80010ca:	3714      	adds	r7, #20
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	42c80000 	.word	0x42c80000

080010d8 <ADC_DMA_GetJoystickValue>:

float ADC_DMA_GetJoystickValue(ADC_DMA *adc_dma, uint8_t channel_index, float min_output, float max_output) {
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	60f8      	str	r0, [r7, #12]
 80010e0:	460b      	mov	r3, r1
 80010e2:	ed87 0a01 	vstr	s0, [r7, #4]
 80010e6:	edc7 0a00 	vstr	s1, [r7]
 80010ea:	72fb      	strb	r3, [r7, #11]
    // Get raw value
    float value = ADC_DMA_GetValue(adc_dma, channel_index);
 80010ec:	7afb      	ldrb	r3, [r7, #11]
 80010ee:	4619      	mov	r1, r3
 80010f0:	68f8      	ldr	r0, [r7, #12]
 80010f2:	f7ff ff85 	bl	8001000 <ADC_DMA_GetValue>
 80010f6:	ed87 0a05 	vstr	s0, [r7, #20]

    // Apply threshold (dead zone) as in XYAnalog
    if (fabsf(value - adc_dma->center_point) < adc_dma->threshold) {
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	edd3 7a06 	vldr	s15, [r3, #24]
 8001100:	ed97 7a05 	vldr	s14, [r7, #20]
 8001104:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001108:	eeb0 7ae7 	vabs.f32	s14, s15
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	edd3 7a07 	vldr	s15, [r3, #28]
 8001112:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800111a:	d502      	bpl.n	8001122 <ADC_DMA_GetJoystickValue+0x4a>
        value = adc_dma->center_point;
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	699b      	ldr	r3, [r3, #24]
 8001120:	617b      	str	r3, [r7, #20]
    }

    // Map to desired output range
    return mapf(value, 0.0f, adc_dma->adc_resolution, min_output, max_output);
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	edd3 7a05 	vldr	s15, [r3, #20]
 8001128:	ed97 2a00 	vldr	s4, [r7]
 800112c:	edd7 1a01 	vldr	s3, [r7, #4]
 8001130:	eeb0 1a67 	vmov.f32	s2, s15
 8001134:	eddf 0a06 	vldr	s1, [pc, #24]	@ 8001150 <ADC_DMA_GetJoystickValue+0x78>
 8001138:	ed97 0a05 	vldr	s0, [r7, #20]
 800113c:	f000 fe1c 	bl	8001d78 <mapf>
 8001140:	eef0 7a40 	vmov.f32	s15, s0
}
 8001144:	eeb0 0a67 	vmov.f32	s0, s15
 8001148:	3718      	adds	r7, #24
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	00000000 	.word	0x00000000

08001154 <PWM_Satuation>:
 *  Created on: Apr 14, 2024
 *      Author: beamk
 */
#include "Controller.h"

int32_t PWM_Satuation(float _u, int32_t _upper_limit, int32_t _lower_limit) {
 8001154:	b480      	push	{r7}
 8001156:	b085      	sub	sp, #20
 8001158:	af00      	add	r7, sp, #0
 800115a:	ed87 0a03 	vstr	s0, [r7, #12]
 800115e:	60b8      	str	r0, [r7, #8]
 8001160:	6079      	str	r1, [r7, #4]
	if (_u > _upper_limit)
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	ee07 3a90 	vmov	s15, r3
 8001168:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800116c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001170:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001178:	dd01      	ble.n	800117e <PWM_Satuation+0x2a>
		return _upper_limit;
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	e013      	b.n	80011a6 <PWM_Satuation+0x52>
	else if (_u < _lower_limit)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	ee07 3a90 	vmov	s15, r3
 8001184:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001188:	ed97 7a03 	vldr	s14, [r7, #12]
 800118c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001194:	d501      	bpl.n	800119a <PWM_Satuation+0x46>
		return _lower_limit;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	e005      	b.n	80011a6 <PWM_Satuation+0x52>
	return (int32_t) _u;
 800119a:	edd7 7a03 	vldr	s15, [r7, #12]
 800119e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011a2:	ee17 3a90 	vmov	r3, s15
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3714      	adds	r7, #20
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr

080011b2 <PID_CONTROLLER_Init>:

void PID_CONTROLLER_Init(PID_CONTROLLER *controller, float _Kp, float _Ki,
		float _Kd, float _u_max) {
 80011b2:	b480      	push	{r7}
 80011b4:	b087      	sub	sp, #28
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6178      	str	r0, [r7, #20]
 80011ba:	ed87 0a04 	vstr	s0, [r7, #16]
 80011be:	edc7 0a03 	vstr	s1, [r7, #12]
 80011c2:	ed87 1a02 	vstr	s2, [r7, #8]
 80011c6:	edc7 1a01 	vstr	s3, [r7, #4]
	controller->Kp = _Kp;
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	601a      	str	r2, [r3, #0]
	controller->Ki = _Ki;
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	68fa      	ldr	r2, [r7, #12]
 80011d4:	605a      	str	r2, [r3, #4]
	controller->Kd = _Kd;
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	68ba      	ldr	r2, [r7, #8]
 80011da:	609a      	str	r2, [r3, #8]
	controller->prev_Kp = _Kp;
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	60da      	str	r2, [r3, #12]
	controller->prev_Ki = _Ki;
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	68fa      	ldr	r2, [r7, #12]
 80011e6:	611a      	str	r2, [r3, #16]
	controller->prev_Kd = _Kd;
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	68ba      	ldr	r2, [r7, #8]
 80011ec:	615a      	str	r2, [r3, #20]
	controller->u_max = _u_max;
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	619a      	str	r2, [r3, #24]
	controller->ek_1 = 0.0;
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	f04f 0200 	mov.w	r2, #0
 80011fa:	61da      	str	r2, [r3, #28]
	controller->ek_2 = 0.0;
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	f04f 0200 	mov.w	r2, #0
 8001202:	621a      	str	r2, [r3, #32]
	controller->u = 0.0;
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	f04f 0200 	mov.w	r2, #0
 800120a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800120c:	bf00      	nop
 800120e:	371c      	adds	r7, #28
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr

08001218 <PID_CONTROLLER_Compute>:

float PID_CONTROLLER_Compute(PID_CONTROLLER *controller, float ek) {
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	ed87 0a00 	vstr	s0, [r7]
	if (!((controller->u >= controller->u_max && ek > 0)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	edd3 7a06 	vldr	s15, [r3, #24]
 8001230:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001238:	bfac      	ite	ge
 800123a:	2301      	movge	r3, #1
 800123c:	2300      	movlt	r3, #0
 800123e:	b2db      	uxtb	r3, r3
 8001240:	f083 0301 	eor.w	r3, r3, #1
 8001244:	b2db      	uxtb	r3, r3
 8001246:	2b00      	cmp	r3, #0
 8001248:	d10e      	bne.n	8001268 <PID_CONTROLLER_Compute+0x50>
 800124a:	edd7 7a00 	vldr	s15, [r7]
 800124e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001256:	bfcc      	ite	gt
 8001258:	2301      	movgt	r3, #1
 800125a:	2300      	movle	r3, #0
 800125c:	b2db      	uxtb	r3, r3
 800125e:	f083 0301 	eor.w	r3, r3, #1
 8001262:	b2db      	uxtb	r3, r3
 8001264:	2b00      	cmp	r3, #0
 8001266:	d057      	beq.n	8001318 <PID_CONTROLLER_Compute+0x100>
			|| (controller->u <= -controller->u_max && ek < 0))) {
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	edd3 7a06 	vldr	s15, [r3, #24]
 8001274:	eef1 7a67 	vneg.f32	s15, s15
 8001278:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800127c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001280:	bf94      	ite	ls
 8001282:	2301      	movls	r3, #1
 8001284:	2300      	movhi	r3, #0
 8001286:	b2db      	uxtb	r3, r3
 8001288:	f083 0301 	eor.w	r3, r3, #1
 800128c:	b2db      	uxtb	r3, r3
	if (!((controller->u >= controller->u_max && ek > 0)
 800128e:	2b00      	cmp	r3, #0
 8001290:	d10e      	bne.n	80012b0 <PID_CONTROLLER_Compute+0x98>
			|| (controller->u <= -controller->u_max && ek < 0))) {
 8001292:	edd7 7a00 	vldr	s15, [r7]
 8001296:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800129a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800129e:	bf4c      	ite	mi
 80012a0:	2301      	movmi	r3, #1
 80012a2:	2300      	movpl	r3, #0
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	f083 0301 	eor.w	r3, r3, #1
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d033      	beq.n	8001318 <PID_CONTROLLER_Compute+0x100>
		controller->u += ((controller->Kp + controller->Ki + controller->Kd)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	edd3 6a00 	vldr	s13, [r3]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	edd3 7a01 	vldr	s15, [r3, #4]
 80012c2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	edd3 7a02 	vldr	s15, [r3, #8]
 80012cc:	ee76 6aa7 	vadd.f32	s13, s13, s15
				* ek)
 80012d0:	edd7 7a00 	vldr	s15, [r7]
 80012d4:	ee66 6aa7 	vmul.f32	s13, s13, s15
				- ((controller->Kp + (2 * controller->Kd)) * controller->ek_1)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	ed93 6a00 	vldr	s12, [r3]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	edd3 7a02 	vldr	s15, [r3, #8]
 80012e4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80012e8:	ee36 6a27 	vadd.f32	s12, s12, s15
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	edd3 7a07 	vldr	s15, [r3, #28]
 80012f2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80012f6:	ee76 6ae7 	vsub.f32	s13, s13, s15
				+ (controller->Kd * controller->ek_2);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	ed93 6a02 	vldr	s12, [r3, #8]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	edd3 7a08 	vldr	s15, [r3, #32]
 8001306:	ee66 7a27 	vmul.f32	s15, s12, s15
 800130a:	ee76 7aa7 	vadd.f32	s15, s13, s15
		controller->u += ((controller->Kp + controller->Ki + controller->Kd)
 800130e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	}
	controller->ek_2 = controller->ek_1;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	69da      	ldr	r2, [r3, #28]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	621a      	str	r2, [r3, #32]
	controller->ek_1 = ek;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	683a      	ldr	r2, [r7, #0]
 8001324:	61da      	str	r2, [r3, #28]
	return controller->u;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800132a:	ee07 3a90 	vmov	s15, r3
}
 800132e:	eeb0 0a67 	vmov.f32	s0, s15
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <PID_CONTROLLER_Reset>:

void PID_CONTROLLER_Reset(PID_CONTROLLER *controller) {
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
    controller->ek_1 = 0.0f;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	f04f 0200 	mov.w	r2, #0
 800134a:	61da      	str	r2, [r3, #28]
    controller->ek_2 = 0.0f;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	f04f 0200 	mov.w	r2, #0
 8001352:	621a      	str	r2, [r3, #32]
    controller->u = 0.0f;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	f04f 0200 	mov.w	r2, #0
 800135a:	625a      	str	r2, [r3, #36]	@ 0x24
    controller->prev_Kp = controller->Kp;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	60da      	str	r2, [r3, #12]
    controller->prev_Ki = controller->Ki;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	685a      	ldr	r2, [r3, #4]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	611a      	str	r2, [r3, #16]
    controller->prev_Kd = controller->Kd;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	689a      	ldr	r2, [r3, #8]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	615a      	str	r2, [r3, #20]
}
 8001374:	bf00      	nop
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr

08001380 <MDXX_GPIO_init>:
	PWM_init(&(mdxx->pwm), htimp, timp_chx);
	mdxx->mode = 0;
}

void MDXX_GPIO_init(MDXX *mdxx, TIM_HandleTypeDef *htimp, uint16_t timp_chx,
		GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	60f8      	str	r0, [r7, #12]
 8001388:	60b9      	str	r1, [r7, #8]
 800138a:	603b      	str	r3, [r7, #0]
 800138c:	4613      	mov	r3, r2
 800138e:	80fb      	strh	r3, [r7, #6]
	mdxx->htimp = htimp;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	68ba      	ldr	r2, [r7, #8]
 8001394:	609a      	str	r2, [r3, #8]
	mdxx->timp_chx = timp_chx;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	88fa      	ldrh	r2, [r7, #6]
 800139a:	819a      	strh	r2, [r3, #12]
	PWM_init(&(mdxx->pwm), htimp, timp_chx);
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	3328      	adds	r3, #40	@ 0x28
 80013a0:	88fa      	ldrh	r2, [r7, #6]
 80013a2:	68b9      	ldr	r1, [r7, #8]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f002 f819 	bl	80033dc <PWM_init>
	mdxx->GPIOx = GPIOx;
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	683a      	ldr	r2, [r7, #0]
 80013ae:	645a      	str	r2, [r3, #68]	@ 0x44
	mdxx->GPIO_Pin = GPIO_Pin;
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	8b3a      	ldrh	r2, [r7, #24]
 80013b4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
	mdxx->mode = 1;
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	2201      	movs	r2, #1
 80013bc:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
}
 80013c0:	bf00      	nop
 80013c2:	3710      	adds	r7, #16
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <MDXX_set_range>:
			mdxx->cmd = fabs(duty);
		}
	}
}

void MDXX_set_range(MDXX *mdxx, float freq, float duty) {
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	60f8      	str	r0, [r7, #12]
 80013d0:	ed87 0a02 	vstr	s0, [r7, #8]
 80013d4:	edc7 0a01 	vstr	s1, [r7, #4]
	if (mdxx->mode == 0) {
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d15f      	bne.n	80014a2 <MDXX_set_range+0xda>
		if (duty == 0) {
 80013e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80013e6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80013ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ee:	d115      	bne.n	800141c <MDXX_set_range+0x54>
			PWM_write_range(&(mdxx->dir), freq, 0);
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	3310      	adds	r3, #16
 80013f4:	eddf 0a5f 	vldr	s1, [pc, #380]	@ 8001574 <MDXX_set_range+0x1ac>
 80013f8:	ed97 0a02 	vldr	s0, [r7, #8]
 80013fc:	4618      	mov	r0, r3
 80013fe:	f002 f913 	bl	8003628 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, 0);
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	3328      	adds	r3, #40	@ 0x28
 8001406:	eddf 0a5b 	vldr	s1, [pc, #364]	@ 8001574 <MDXX_set_range+0x1ac>
 800140a:	ed97 0a02 	vldr	s0, [r7, #8]
 800140e:	4618      	mov	r0, r3
 8001410:	f002 f90a 	bl	8003628 <PWM_write_range>
			mdxx->cmd = 0;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	2200      	movs	r2, #0
 8001418:	641a      	str	r2, [r3, #64]	@ 0x40
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 1);
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
			mdxx->cmd = fabs(duty);
		}
	}
}
 800141a:	e0a6      	b.n	800156a <MDXX_set_range+0x1a2>
		} else if (duty > 0) {
 800141c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001420:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001428:	dd1a      	ble.n	8001460 <MDXX_set_range+0x98>
			PWM_write_range(&(mdxx->dir), freq, 0);
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	3310      	adds	r3, #16
 800142e:	eddf 0a51 	vldr	s1, [pc, #324]	@ 8001574 <MDXX_set_range+0x1ac>
 8001432:	ed97 0a02 	vldr	s0, [r7, #8]
 8001436:	4618      	mov	r0, r3
 8001438:	f002 f8f6 	bl	8003628 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, duty);
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	3328      	adds	r3, #40	@ 0x28
 8001440:	edd7 0a01 	vldr	s1, [r7, #4]
 8001444:	ed97 0a02 	vldr	s0, [r7, #8]
 8001448:	4618      	mov	r0, r3
 800144a:	f002 f8ed 	bl	8003628 <PWM_write_range>
			mdxx->cmd = duty;
 800144e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001452:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001456:	ee17 2a90 	vmov	r2, s15
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800145e:	e084      	b.n	800156a <MDXX_set_range+0x1a2>
			PWM_write_range(&(mdxx->dir), freq, 100);
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	3310      	adds	r3, #16
 8001464:	eddf 0a44 	vldr	s1, [pc, #272]	@ 8001578 <MDXX_set_range+0x1b0>
 8001468:	ed97 0a02 	vldr	s0, [r7, #8]
 800146c:	4618      	mov	r0, r3
 800146e:	f002 f8db 	bl	8003628 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	3328      	adds	r3, #40	@ 0x28
 8001476:	edd7 7a01 	vldr	s15, [r7, #4]
 800147a:	eef0 7ae7 	vabs.f32	s15, s15
 800147e:	eef0 0a67 	vmov.f32	s1, s15
 8001482:	ed97 0a02 	vldr	s0, [r7, #8]
 8001486:	4618      	mov	r0, r3
 8001488:	f002 f8ce 	bl	8003628 <PWM_write_range>
			mdxx->cmd = fabs(duty);
 800148c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001490:	eef0 7ae7 	vabs.f32	s15, s15
 8001494:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001498:	ee17 2a90 	vmov	r2, s15
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80014a0:	e063      	b.n	800156a <MDXX_set_range+0x1a2>
	} else if (mdxx->mode == 1) {
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d15e      	bne.n	800156a <MDXX_set_range+0x1a2>
		if (duty == 0) {
 80014ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80014b0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80014b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014b8:	d115      	bne.n	80014e6 <MDXX_set_range+0x11e>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 0);
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80014c4:	2200      	movs	r2, #0
 80014c6:	4619      	mov	r1, r3
 80014c8:	f009 febc 	bl	800b244 <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, 0);
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	3328      	adds	r3, #40	@ 0x28
 80014d0:	eddf 0a28 	vldr	s1, [pc, #160]	@ 8001574 <MDXX_set_range+0x1ac>
 80014d4:	ed97 0a02 	vldr	s0, [r7, #8]
 80014d8:	4618      	mov	r0, r3
 80014da:	f002 f8a5 	bl	8003628 <PWM_write_range>
			mdxx->cmd = 0;
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	2200      	movs	r2, #0
 80014e2:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80014e4:	e041      	b.n	800156a <MDXX_set_range+0x1a2>
		} else if (duty > 0) {
 80014e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80014ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014f2:	dd1a      	ble.n	800152a <MDXX_set_range+0x162>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 0);
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80014fe:	2200      	movs	r2, #0
 8001500:	4619      	mov	r1, r3
 8001502:	f009 fe9f 	bl	800b244 <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, duty);
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	3328      	adds	r3, #40	@ 0x28
 800150a:	edd7 0a01 	vldr	s1, [r7, #4]
 800150e:	ed97 0a02 	vldr	s0, [r7, #8]
 8001512:	4618      	mov	r0, r3
 8001514:	f002 f888 	bl	8003628 <PWM_write_range>
			mdxx->cmd = duty;
 8001518:	edd7 7a01 	vldr	s15, [r7, #4]
 800151c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001520:	ee17 2a90 	vmov	r2, s15
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001528:	e01f      	b.n	800156a <MDXX_set_range+0x1a2>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 1);
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8001534:	2201      	movs	r2, #1
 8001536:	4619      	mov	r1, r3
 8001538:	f009 fe84 	bl	800b244 <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	3328      	adds	r3, #40	@ 0x28
 8001540:	edd7 7a01 	vldr	s15, [r7, #4]
 8001544:	eef0 7ae7 	vabs.f32	s15, s15
 8001548:	eef0 0a67 	vmov.f32	s1, s15
 800154c:	ed97 0a02 	vldr	s0, [r7, #8]
 8001550:	4618      	mov	r0, r3
 8001552:	f002 f869 	bl	8003628 <PWM_write_range>
			mdxx->cmd = fabs(duty);
 8001556:	edd7 7a01 	vldr	s15, [r7, #4]
 800155a:	eef0 7ae7 	vabs.f32	s15, s15
 800155e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001562:	ee17 2a90 	vmov	r2, s15
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800156a:	bf00      	nop
 800156c:	3710      	adds	r7, #16
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	00000000 	.word	0x00000000
 8001578:	42c80000 	.word	0x42c80000

0800157c <REVOLUTE_MOTOR_FFD_Init>:
    .slide_rail_mass = 1893.96e-3, 		// kg
    .c = 64.83e-3,           			// m
    .prismatic_pulley_radius = 1.5915e-2 		// m
};

void REVOLUTE_MOTOR_FFD_Init(DC_MOTOR_FFeedward *motor, Motor_Constant_Structure *_Mx){
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	6039      	str	r1, [r7, #0]
    motor->Mx = _Mx;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	683a      	ldr	r2, [r7, #0]
 800158a:	601a      	str	r2, [r3, #0]
}
 800158c:	bf00      	nop
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <REVOLUTE_MOTOR_FFD_Compute>:

float REVOLUTE_MOTOR_FFD_Compute(DC_MOTOR_FFeedward *motor, float qd){
 8001598:	b5b0      	push	{r4, r5, r7, lr}
 800159a:	ed2d 8b02 	vpush	{d8}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	ed87 0a00 	vstr	s0, [r7]
    float transfer_function = (motor->Mx->B * motor->Mx->R + motor->Mx->Ke * motor->Mx->Kt) / motor->Mx->Kt;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80015b8:	f7fe ffea 	bl	8000590 <__aeabi_dmul>
 80015bc:	4602      	mov	r2, r0
 80015be:	460b      	mov	r3, r1
 80015c0:	4614      	mov	r4, r2
 80015c2:	461d      	mov	r5, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80015d4:	f7fe ffdc 	bl	8000590 <__aeabi_dmul>
 80015d8:	4602      	mov	r2, r0
 80015da:	460b      	mov	r3, r1
 80015dc:	4620      	mov	r0, r4
 80015de:	4629      	mov	r1, r5
 80015e0:	f7fe fe20 	bl	8000224 <__adddf3>
 80015e4:	4602      	mov	r2, r0
 80015e6:	460b      	mov	r3, r1
 80015e8:	4610      	mov	r0, r2
 80015ea:	4619      	mov	r1, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80015f4:	f7ff f8f6 	bl	80007e4 <__aeabi_ddiv>
 80015f8:	4602      	mov	r2, r0
 80015fa:	460b      	mov	r3, r1
 80015fc:	4610      	mov	r0, r2
 80015fe:	4619      	mov	r1, r3
 8001600:	f7ff faa8 	bl	8000b54 <__aeabi_d2f>
 8001604:	4603      	mov	r3, r0
 8001606:	60fb      	str	r3, [r7, #12]

    float v = qd * transfer_function;
 8001608:	ed97 7a00 	vldr	s14, [r7]
 800160c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001610:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001614:	edc7 7a02 	vstr	s15, [r7, #8]

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001620:	4610      	mov	r0, r2
 8001622:	4619      	mov	r1, r3
 8001624:	f7ff fa96 	bl	8000b54 <__aeabi_d2f>
 8001628:	4603      	mov	r3, r0
 800162a:	ee07 3a90 	vmov	s15, r3
 800162e:	eeb1 8a67 	vneg.f32	s16, s15
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800163a:	4610      	mov	r0, r2
 800163c:	4619      	mov	r1, r3
 800163e:	f7ff fa89 	bl	8000b54 <__aeabi_d2f>
 8001642:	4604      	mov	r4, r0
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800164c:	4610      	mov	r0, r2
 800164e:	4619      	mov	r1, r3
 8001650:	f7ff fa80 	bl	8000b54 <__aeabi_d2f>
 8001654:	4603      	mov	r3, r0
 8001656:	ee07 3a90 	vmov	s15, r3
 800165a:	eef1 8a67 	vneg.f32	s17, s15
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001666:	4610      	mov	r0, r2
 8001668:	4619      	mov	r1, r3
 800166a:	f7ff fa73 	bl	8000b54 <__aeabi_d2f>
 800166e:	4603      	mov	r3, r0
 8001670:	ee02 3a10 	vmov	s4, r3
 8001674:	eef0 1a68 	vmov.f32	s3, s17
 8001678:	ee01 4a10 	vmov	s2, r4
 800167c:	eef0 0a48 	vmov.f32	s1, s16
 8001680:	ed97 0a02 	vldr	s0, [r7, #8]
 8001684:	f000 fb78 	bl	8001d78 <mapf>
 8001688:	eef0 7a40 	vmov.f32	s15, s0
}
 800168c:	eeb0 0a67 	vmov.f32	s0, s15
 8001690:	3710      	adds	r7, #16
 8001692:	46bd      	mov	sp, r7
 8001694:	ecbd 8b02 	vpop	{d8}
 8001698:	bdb0      	pop	{r4, r5, r7, pc}

0800169a <REVOLUTE_MOTOR_DFD_Init>:

void REVOLUTE_MOTOR_DFD_Init(DC_MOTOR_DFeedward *motor, Motor_Constant_Structure *_Mx, Environment *_En){
 800169a:	b480      	push	{r7}
 800169c:	b085      	sub	sp, #20
 800169e:	af00      	add	r7, sp, #0
 80016a0:	60f8      	str	r0, [r7, #12]
 80016a2:	60b9      	str	r1, [r7, #8]
 80016a4:	607a      	str	r2, [r7, #4]
    motor->Mx = _Mx;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	68ba      	ldr	r2, [r7, #8]
 80016aa:	601a      	str	r2, [r3, #0]
    motor->En = _En;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	605a      	str	r2, [r3, #4]
}
 80016b2:	bf00      	nop
 80016b4:	3714      	adds	r7, #20
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
	...

080016c0 <REVOLUTE_MOTOR_DFD_Compute>:

float REVOLUTE_MOTOR_DFD_Compute(DC_MOTOR_DFeedward *motor, float q, float qdd, float s){
 80016c0:	b5b0      	push	{r4, r5, r7, lr}
 80016c2:	ed2d 8b02 	vpush	{d8}
 80016c6:	b088      	sub	sp, #32
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	60f8      	str	r0, [r7, #12]
 80016cc:	ed87 0a02 	vstr	s0, [r7, #8]
 80016d0:	edc7 0a01 	vstr	s1, [r7, #4]
 80016d4:	ed87 1a00 	vstr	s2, [r7]
    float gravity_compensate_plotter = motor->En->plotter_mass * motor->En->g * sin(q) * (s - 0.17);
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	ed93 7a01 	vldr	s14, [r3, #4]
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	edd3 7a00 	vldr	s15, [r3]
 80016e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016ec:	ee17 0a90 	vmov	r0, s15
 80016f0:	f7fe fef6 	bl	80004e0 <__aeabi_f2d>
 80016f4:	4604      	mov	r4, r0
 80016f6:	460d      	mov	r5, r1
 80016f8:	68b8      	ldr	r0, [r7, #8]
 80016fa:	f7fe fef1 	bl	80004e0 <__aeabi_f2d>
 80016fe:	4602      	mov	r2, r0
 8001700:	460b      	mov	r3, r1
 8001702:	ec43 2b10 	vmov	d0, r2, r3
 8001706:	f00f fb83 	bl	8010e10 <sin>
 800170a:	ec53 2b10 	vmov	r2, r3, d0
 800170e:	4620      	mov	r0, r4
 8001710:	4629      	mov	r1, r5
 8001712:	f7fe ff3d 	bl	8000590 <__aeabi_dmul>
 8001716:	4602      	mov	r2, r0
 8001718:	460b      	mov	r3, r1
 800171a:	4614      	mov	r4, r2
 800171c:	461d      	mov	r5, r3
 800171e:	6838      	ldr	r0, [r7, #0]
 8001720:	f7fe fede 	bl	80004e0 <__aeabi_f2d>
 8001724:	a357      	add	r3, pc, #348	@ (adr r3, 8001884 <REVOLUTE_MOTOR_DFD_Compute+0x1c4>)
 8001726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800172a:	f7fe fd79 	bl	8000220 <__aeabi_dsub>
 800172e:	4602      	mov	r2, r0
 8001730:	460b      	mov	r3, r1
 8001732:	4620      	mov	r0, r4
 8001734:	4629      	mov	r1, r5
 8001736:	f7fe ff2b 	bl	8000590 <__aeabi_dmul>
 800173a:	4602      	mov	r2, r0
 800173c:	460b      	mov	r3, r1
 800173e:	4610      	mov	r0, r2
 8001740:	4619      	mov	r1, r3
 8001742:	f7ff fa07 	bl	8000b54 <__aeabi_d2f>
 8001746:	4603      	mov	r3, r0
 8001748:	61fb      	str	r3, [r7, #28]

    float gravity_compensate_rail = motor->En->plotter_mass * motor->En->g * sin(q) * motor->En->c;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	ed93 7a01 	vldr	s14, [r3, #4]
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	edd3 7a00 	vldr	s15, [r3]
 800175a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800175e:	ee17 0a90 	vmov	r0, s15
 8001762:	f7fe febd 	bl	80004e0 <__aeabi_f2d>
 8001766:	4604      	mov	r4, r0
 8001768:	460d      	mov	r5, r1
 800176a:	68b8      	ldr	r0, [r7, #8]
 800176c:	f7fe feb8 	bl	80004e0 <__aeabi_f2d>
 8001770:	4602      	mov	r2, r0
 8001772:	460b      	mov	r3, r1
 8001774:	ec43 2b10 	vmov	d0, r2, r3
 8001778:	f00f fb4a 	bl	8010e10 <sin>
 800177c:	ec53 2b10 	vmov	r2, r3, d0
 8001780:	4620      	mov	r0, r4
 8001782:	4629      	mov	r1, r5
 8001784:	f7fe ff04 	bl	8000590 <__aeabi_dmul>
 8001788:	4602      	mov	r2, r0
 800178a:	460b      	mov	r3, r1
 800178c:	4614      	mov	r4, r2
 800178e:	461d      	mov	r5, r3
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	68db      	ldr	r3, [r3, #12]
 8001796:	4618      	mov	r0, r3
 8001798:	f7fe fea2 	bl	80004e0 <__aeabi_f2d>
 800179c:	4602      	mov	r2, r0
 800179e:	460b      	mov	r3, r1
 80017a0:	4620      	mov	r0, r4
 80017a2:	4629      	mov	r1, r5
 80017a4:	f7fe fef4 	bl	8000590 <__aeabi_dmul>
 80017a8:	4602      	mov	r2, r0
 80017aa:	460b      	mov	r3, r1
 80017ac:	4610      	mov	r0, r2
 80017ae:	4619      	mov	r1, r3
 80017b0:	f7ff f9d0 	bl	8000b54 <__aeabi_d2f>
 80017b4:	4603      	mov	r3, r0
 80017b6:	61bb      	str	r3, [r7, #24]
//    float mass_torque = motor->En->plotter_mass * s*s * qdd;

    float transfer_function = motor->Mx->R / motor->Mx->Kt;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80017c8:	f7ff f80c 	bl	80007e4 <__aeabi_ddiv>
 80017cc:	4602      	mov	r2, r0
 80017ce:	460b      	mov	r3, r1
 80017d0:	4610      	mov	r0, r2
 80017d2:	4619      	mov	r1, r3
 80017d4:	f7ff f9be 	bl	8000b54 <__aeabi_d2f>
 80017d8:	4603      	mov	r3, r0
 80017da:	617b      	str	r3, [r7, #20]

    float v = (gravity_compensate_plotter + gravity_compensate_rail + 0) * transfer_function;
 80017dc:	ed97 7a07 	vldr	s14, [r7, #28]
 80017e0:	edd7 7a06 	vldr	s15, [r7, #24]
 80017e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017e8:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8001880 <REVOLUTE_MOTOR_DFD_Compute+0x1c0>
 80017ec:	ee77 7a87 	vadd.f32	s15, s15, s14
 80017f0:	ed97 7a05 	vldr	s14, [r7, #20]
 80017f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017f8:	edc7 7a04 	vstr	s15, [r7, #16]

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001804:	4610      	mov	r0, r2
 8001806:	4619      	mov	r1, r3
 8001808:	f7ff f9a4 	bl	8000b54 <__aeabi_d2f>
 800180c:	4603      	mov	r3, r0
 800180e:	ee07 3a90 	vmov	s15, r3
 8001812:	eeb1 8a67 	vneg.f32	s16, s15
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800181e:	4610      	mov	r0, r2
 8001820:	4619      	mov	r1, r3
 8001822:	f7ff f997 	bl	8000b54 <__aeabi_d2f>
 8001826:	4604      	mov	r4, r0
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001830:	4610      	mov	r0, r2
 8001832:	4619      	mov	r1, r3
 8001834:	f7ff f98e 	bl	8000b54 <__aeabi_d2f>
 8001838:	4603      	mov	r3, r0
 800183a:	ee07 3a90 	vmov	s15, r3
 800183e:	eef1 8a67 	vneg.f32	s17, s15
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800184a:	4610      	mov	r0, r2
 800184c:	4619      	mov	r1, r3
 800184e:	f7ff f981 	bl	8000b54 <__aeabi_d2f>
 8001852:	4603      	mov	r3, r0
 8001854:	ee02 3a10 	vmov	s4, r3
 8001858:	eef0 1a68 	vmov.f32	s3, s17
 800185c:	ee01 4a10 	vmov	s2, r4
 8001860:	eef0 0a48 	vmov.f32	s1, s16
 8001864:	ed97 0a04 	vldr	s0, [r7, #16]
 8001868:	f000 fa86 	bl	8001d78 <mapf>
 800186c:	eef0 7a40 	vmov.f32	s15, s0
}
 8001870:	eeb0 0a67 	vmov.f32	s0, s15
 8001874:	3720      	adds	r7, #32
 8001876:	46bd      	mov	sp, r7
 8001878:	ecbd 8b02 	vpop	{d8}
 800187c:	bdb0      	pop	{r4, r5, r7, pc}
 800187e:	bf00      	nop
 8001880:	00000000 	.word	0x00000000
 8001884:	5c28f5c3 	.word	0x5c28f5c3
 8001888:	3fc5c28f 	.word	0x3fc5c28f

0800188c <PRISMATIC_MOTOR_FFD_Init>:

void PRISMATIC_MOTOR_FFD_Init(DC_MOTOR_FFeedward *motor, Motor_Constant_Structure *_Mx) {
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	6039      	str	r1, [r7, #0]
    motor->Mx = _Mx;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	683a      	ldr	r2, [r7, #0]
 800189a:	601a      	str	r2, [r3, #0]
}
 800189c:	bf00      	nop
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr

080018a8 <PRISMATIC_MOTOR_FFD_Compute>:

float PRISMATIC_MOTOR_FFD_Compute(DC_MOTOR_FFeedward *motor, float sd) {
 80018a8:	b5b0      	push	{r4, r5, r7, lr}
 80018aa:	ed2d 8b02 	vpush	{d8}
 80018ae:	b084      	sub	sp, #16
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	ed87 0a00 	vstr	s0, [r7]
    float transfer_function = (motor->Mx->B * motor->Mx->R  + motor->Mx->Ke * motor->Mx->Kt) / motor->Mx->Kt;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80018c8:	f7fe fe62 	bl	8000590 <__aeabi_dmul>
 80018cc:	4602      	mov	r2, r0
 80018ce:	460b      	mov	r3, r1
 80018d0:	4614      	mov	r4, r2
 80018d2:	461d      	mov	r5, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80018e4:	f7fe fe54 	bl	8000590 <__aeabi_dmul>
 80018e8:	4602      	mov	r2, r0
 80018ea:	460b      	mov	r3, r1
 80018ec:	4620      	mov	r0, r4
 80018ee:	4629      	mov	r1, r5
 80018f0:	f7fe fc98 	bl	8000224 <__adddf3>
 80018f4:	4602      	mov	r2, r0
 80018f6:	460b      	mov	r3, r1
 80018f8:	4610      	mov	r0, r2
 80018fa:	4619      	mov	r1, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001904:	f7fe ff6e 	bl	80007e4 <__aeabi_ddiv>
 8001908:	4602      	mov	r2, r0
 800190a:	460b      	mov	r3, r1
 800190c:	4610      	mov	r0, r2
 800190e:	4619      	mov	r1, r3
 8001910:	f7ff f920 	bl	8000b54 <__aeabi_d2f>
 8001914:	4603      	mov	r3, r0
 8001916:	60fb      	str	r3, [r7, #12]

    float v = sd * transfer_function;
 8001918:	ed97 7a00 	vldr	s14, [r7]
 800191c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001920:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001924:	edc7 7a02 	vstr	s15, [r7, #8]

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001930:	4610      	mov	r0, r2
 8001932:	4619      	mov	r1, r3
 8001934:	f7ff f90e 	bl	8000b54 <__aeabi_d2f>
 8001938:	4603      	mov	r3, r0
 800193a:	ee07 3a90 	vmov	s15, r3
 800193e:	eeb1 8a67 	vneg.f32	s16, s15
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800194a:	4610      	mov	r0, r2
 800194c:	4619      	mov	r1, r3
 800194e:	f7ff f901 	bl	8000b54 <__aeabi_d2f>
 8001952:	4604      	mov	r4, r0
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800195c:	4610      	mov	r0, r2
 800195e:	4619      	mov	r1, r3
 8001960:	f7ff f8f8 	bl	8000b54 <__aeabi_d2f>
 8001964:	4603      	mov	r3, r0
 8001966:	ee07 3a90 	vmov	s15, r3
 800196a:	eef1 8a67 	vneg.f32	s17, s15
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001976:	4610      	mov	r0, r2
 8001978:	4619      	mov	r1, r3
 800197a:	f7ff f8eb 	bl	8000b54 <__aeabi_d2f>
 800197e:	4603      	mov	r3, r0
 8001980:	ee02 3a10 	vmov	s4, r3
 8001984:	eef0 1a68 	vmov.f32	s3, s17
 8001988:	ee01 4a10 	vmov	s2, r4
 800198c:	eef0 0a48 	vmov.f32	s1, s16
 8001990:	ed97 0a02 	vldr	s0, [r7, #8]
 8001994:	f000 f9f0 	bl	8001d78 <mapf>
 8001998:	eef0 7a40 	vmov.f32	s15, s0
}
 800199c:	eeb0 0a67 	vmov.f32	s0, s15
 80019a0:	3710      	adds	r7, #16
 80019a2:	46bd      	mov	sp, r7
 80019a4:	ecbd 8b02 	vpop	{d8}
 80019a8:	bdb0      	pop	{r4, r5, r7, pc}

080019aa <PRISMATIC_MOTOR_DFD_Init>:

void PRISMATIC_MOTOR_DFD_Init(DC_MOTOR_DFeedward *motor, Motor_Constant_Structure *_Mx, Environment *_En){
 80019aa:	b480      	push	{r7}
 80019ac:	b085      	sub	sp, #20
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	60f8      	str	r0, [r7, #12]
 80019b2:	60b9      	str	r1, [r7, #8]
 80019b4:	607a      	str	r2, [r7, #4]
    motor->Mx = _Mx;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	68ba      	ldr	r2, [r7, #8]
 80019ba:	601a      	str	r2, [r3, #0]
    motor->En = _En;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	605a      	str	r2, [r3, #4]
}
 80019c2:	bf00      	nop
 80019c4:	3714      	adds	r7, #20
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr

080019ce <PRISMATIC_MOTOR_DFD_Compute>:

float PRISMATIC_MOTOR_DFD_Compute(DC_MOTOR_DFeedward *motor, float q, float qd, float s){
 80019ce:	b5b0      	push	{r4, r5, r7, lr}
 80019d0:	ed2d 8b02 	vpush	{d8}
 80019d4:	b088      	sub	sp, #32
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	60f8      	str	r0, [r7, #12]
 80019da:	ed87 0a02 	vstr	s0, [r7, #8]
 80019de:	edc7 0a01 	vstr	s1, [r7, #4]
 80019e2:	ed87 1a00 	vstr	s2, [r7]
    float gravity_compensate_plotter = motor->En->plotter_mass * motor->En->g * cos(q);
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	ed93 7a01 	vldr	s14, [r3, #4]
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	edd3 7a00 	vldr	s15, [r3]
 80019f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019fa:	ee17 0a90 	vmov	r0, s15
 80019fe:	f7fe fd6f 	bl	80004e0 <__aeabi_f2d>
 8001a02:	4604      	mov	r4, r0
 8001a04:	460d      	mov	r5, r1
 8001a06:	68b8      	ldr	r0, [r7, #8]
 8001a08:	f7fe fd6a 	bl	80004e0 <__aeabi_f2d>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	460b      	mov	r3, r1
 8001a10:	ec43 2b10 	vmov	d0, r2, r3
 8001a14:	f00f f9a8 	bl	8010d68 <cos>
 8001a18:	ec53 2b10 	vmov	r2, r3, d0
 8001a1c:	4620      	mov	r0, r4
 8001a1e:	4629      	mov	r1, r5
 8001a20:	f7fe fdb6 	bl	8000590 <__aeabi_dmul>
 8001a24:	4602      	mov	r2, r0
 8001a26:	460b      	mov	r3, r1
 8001a28:	4610      	mov	r0, r2
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	f7ff f892 	bl	8000b54 <__aeabi_d2f>
 8001a30:	4603      	mov	r3, r0
 8001a32:	61fb      	str	r3, [r7, #28]

    float centrifugal_force = motor->En->plotter_mass * qd * qd * s;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	ed93 7a01 	vldr	s14, [r3, #4]
 8001a3c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a40:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a44:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a4c:	ed97 7a00 	vldr	s14, [r7]
 8001a50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a54:	edc7 7a06 	vstr	s15, [r7, #24]

    float transfer_function = (motor->Mx->R * motor->En->prismatic_pulley_radius) / motor->Mx->Kt;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	691b      	ldr	r3, [r3, #16]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7fe fd3a 	bl	80004e0 <__aeabi_f2d>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	460b      	mov	r3, r1
 8001a70:	4620      	mov	r0, r4
 8001a72:	4629      	mov	r1, r5
 8001a74:	f7fe fd8c 	bl	8000590 <__aeabi_dmul>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	460b      	mov	r3, r1
 8001a7c:	4610      	mov	r0, r2
 8001a7e:	4619      	mov	r1, r3
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001a88:	f7fe feac 	bl	80007e4 <__aeabi_ddiv>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	460b      	mov	r3, r1
 8001a90:	4610      	mov	r0, r2
 8001a92:	4619      	mov	r1, r3
 8001a94:	f7ff f85e 	bl	8000b54 <__aeabi_d2f>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	617b      	str	r3, [r7, #20]

    float v = (gravity_compensate_plotter + centrifugal_force) * transfer_function;
 8001a9c:	ed97 7a07 	vldr	s14, [r7, #28]
 8001aa0:	edd7 7a06 	vldr	s15, [r7, #24]
 8001aa4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001aa8:	ed97 7a05 	vldr	s14, [r7, #20]
 8001aac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ab0:	edc7 7a04 	vstr	s15, [r7, #16]

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001abc:	4610      	mov	r0, r2
 8001abe:	4619      	mov	r1, r3
 8001ac0:	f7ff f848 	bl	8000b54 <__aeabi_d2f>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	ee07 3a90 	vmov	s15, r3
 8001aca:	eeb1 8a67 	vneg.f32	s16, s15
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001ad6:	4610      	mov	r0, r2
 8001ad8:	4619      	mov	r1, r3
 8001ada:	f7ff f83b 	bl	8000b54 <__aeabi_d2f>
 8001ade:	4604      	mov	r4, r0
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001ae8:	4610      	mov	r0, r2
 8001aea:	4619      	mov	r1, r3
 8001aec:	f7ff f832 	bl	8000b54 <__aeabi_d2f>
 8001af0:	4603      	mov	r3, r0
 8001af2:	ee07 3a90 	vmov	s15, r3
 8001af6:	eef1 8a67 	vneg.f32	s17, s15
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001b02:	4610      	mov	r0, r2
 8001b04:	4619      	mov	r1, r3
 8001b06:	f7ff f825 	bl	8000b54 <__aeabi_d2f>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	ee02 3a10 	vmov	s4, r3
 8001b10:	eef0 1a68 	vmov.f32	s3, s17
 8001b14:	ee01 4a10 	vmov	s2, r4
 8001b18:	eef0 0a48 	vmov.f32	s1, s16
 8001b1c:	ed97 0a04 	vldr	s0, [r7, #16]
 8001b20:	f000 f92a 	bl	8001d78 <mapf>
 8001b24:	eef0 7a40 	vmov.f32	s15, s0
}
 8001b28:	eeb0 0a67 	vmov.f32	s0, s15
 8001b2c:	3720      	adds	r7, #32
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	ecbd 8b02 	vpop	{d8}
 8001b34:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001b38 <FIR_init>:
 *      Author: transporter
 */
#include "FIR.h"
#include "arm_math.h"

void FIR_init(FIR *fir, uint16_t numTaps, float cutoffFreq, float samplingFreq) {
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	ed2d 8b02 	vpush	{d8}
 8001b3e:	b08a      	sub	sp, #40	@ 0x28
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	60f8      	str	r0, [r7, #12]
 8001b44:	460b      	mov	r3, r1
 8001b46:	ed87 0a01 	vstr	s0, [r7, #4]
 8001b4a:	edc7 0a00 	vstr	s1, [r7]
 8001b4e:	817b      	strh	r3, [r7, #10]
    // Make sure numTaps is odd
    if (numTaps % 2 == 0) {
 8001b50:	897b      	ldrh	r3, [r7, #10]
 8001b52:	f003 0301 	and.w	r3, r3, #1
 8001b56:	b29b      	uxth	r3, r3
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d102      	bne.n	8001b62 <FIR_init+0x2a>
        numTaps += 1;
 8001b5c:	897b      	ldrh	r3, [r7, #10]
 8001b5e:	3301      	adds	r3, #1
 8001b60:	817b      	strh	r3, [r7, #10]
    }

    fir->numTaps = numTaps;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	897a      	ldrh	r2, [r7, #10]
 8001b66:	811a      	strh	r2, [r3, #8]
    fir->bufferIndex = 0;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	815a      	strh	r2, [r3, #10]

    // Allocate memory for coefficients and buffer
    fir->coeffs = (float*)malloc(numTaps * sizeof(float));
 8001b6e:	897b      	ldrh	r3, [r7, #10]
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	4618      	mov	r0, r3
 8001b74:	f00e ffee 	bl	8010b54 <malloc>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	601a      	str	r2, [r3, #0]
    fir->buffer = (float*)malloc(numTaps * sizeof(float));
 8001b80:	897b      	ldrh	r3, [r7, #10]
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	4618      	mov	r0, r3
 8001b86:	f00e ffe5 	bl	8010b54 <malloc>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	605a      	str	r2, [r3, #4]

    if (fir->coeffs != NULL && fir->buffer != NULL) {
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	f000 80e0 	beq.w	8001d5c <FIR_init+0x224>
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	f000 80db 	beq.w	8001d5c <FIR_init+0x224>
        // Clear buffer
        for (uint16_t i = 0; i < numTaps; i++) {
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001baa:	e00a      	b.n	8001bc2 <FIR_init+0x8a>
            fir->buffer[i] = 0.0f;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	685a      	ldr	r2, [r3, #4]
 8001bb0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	4413      	add	r3, r2
 8001bb6:	f04f 0200 	mov.w	r2, #0
 8001bba:	601a      	str	r2, [r3, #0]
        for (uint16_t i = 0; i < numTaps; i++) {
 8001bbc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001bc2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001bc4:	897b      	ldrh	r3, [r7, #10]
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d3f0      	bcc.n	8001bac <FIR_init+0x74>
        }

        // Calculate normalized cutoff frequency (0 to 0.5)
        float omega = cutoffFreq / samplingFreq;
 8001bca:	edd7 6a01 	vldr	s13, [r7, #4]
 8001bce:	ed97 7a00 	vldr	s14, [r7]
 8001bd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bd6:	edc7 7a06 	vstr	s15, [r7, #24]

        // Calculate filter coefficients (low-pass)
        int16_t half_taps = numTaps / 2;
 8001bda:	897b      	ldrh	r3, [r7, #10]
 8001bdc:	085b      	lsrs	r3, r3, #1
 8001bde:	b29b      	uxth	r3, r3
 8001be0:	82fb      	strh	r3, [r7, #22]
        for (int16_t i = 0; i < numTaps; i++) {
 8001be2:	2300      	movs	r3, #0
 8001be4:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001be6:	e077      	b.n	8001cd8 <FIR_init+0x1a0>
            if (i == half_taps) {
 8001be8:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8001bec:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d10c      	bne.n	8001c0e <FIR_init+0xd6>
                // Center tap
                fir->coeffs[i] = 2.0f * omega;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	4413      	add	r3, r2
 8001c00:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c04:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001c08:	edc3 7a00 	vstr	s15, [r3]
 8001c0c:	e02c      	b.n	8001c68 <FIR_init+0x130>
            } else {
                // Side taps
                int16_t n = i - half_taps;
 8001c0e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001c10:	8afb      	ldrh	r3, [r7, #22]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	b29b      	uxth	r3, r3
 8001c16:	82bb      	strh	r3, [r7, #20]
                fir->coeffs[i] = sinf(2.0f * PI * omega * n) / (PI * n);
 8001c18:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c1c:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8001d68 <FIR_init+0x230>
 8001c20:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c24:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001c28:	ee07 3a90 	vmov	s15, r3
 8001c2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c34:	eeb0 0a67 	vmov.f32	s0, s15
 8001c38:	f00f f9c0 	bl	8010fbc <sinf>
 8001c3c:	eef0 6a40 	vmov.f32	s13, s0
 8001c40:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001c44:	ee07 3a90 	vmov	s15, r3
 8001c48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c4c:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8001d6c <FIR_init+0x234>
 8001c50:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	4413      	add	r3, r2
 8001c60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c64:	edc3 7a00 	vstr	s15, [r3]
            }

            // Apply Hamming window
            fir->coeffs[i] *= (0.54f - 0.46f * cosf(2.0f * PI * i / (numTaps - 1)));
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001c70:	009b      	lsls	r3, r3, #2
 8001c72:	4413      	add	r3, r2
 8001c74:	ed93 8a00 	vldr	s16, [r3]
 8001c78:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001c7c:	ee07 3a90 	vmov	s15, r3
 8001c80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c84:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8001d68 <FIR_init+0x230>
 8001c88:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c8c:	897b      	ldrh	r3, [r7, #10]
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	ee07 3a90 	vmov	s15, r3
 8001c94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c98:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001c9c:	eeb0 0a66 	vmov.f32	s0, s13
 8001ca0:	f00f f948 	bl	8010f34 <cosf>
 8001ca4:	eef0 7a40 	vmov.f32	s15, s0
 8001ca8:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8001d70 <FIR_init+0x238>
 8001cac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cb0:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8001d74 <FIR_init+0x23c>
 8001cb4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	4413      	add	r3, r2
 8001cc4:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001cc8:	edc3 7a00 	vstr	s15, [r3]
        for (int16_t i = 0; i < numTaps; i++) {
 8001ccc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	b29b      	uxth	r3, r3
 8001cd6:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001cd8:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8001cdc:	897b      	ldrh	r3, [r7, #10]
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	db82      	blt.n	8001be8 <FIR_init+0xb0>
        }

        // Normalize gain
        float sum = 0.0f;
 8001ce2:	f04f 0300 	mov.w	r3, #0
 8001ce6:	623b      	str	r3, [r7, #32]
        for (uint16_t i = 0; i < numTaps; i++) {
 8001ce8:	2300      	movs	r3, #0
 8001cea:	83fb      	strh	r3, [r7, #30]
 8001cec:	e00f      	b.n	8001d0e <FIR_init+0x1d6>
            sum += fir->coeffs[i];
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	8bfb      	ldrh	r3, [r7, #30]
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	4413      	add	r3, r2
 8001cf8:	edd3 7a00 	vldr	s15, [r3]
 8001cfc:	ed97 7a08 	vldr	s14, [r7, #32]
 8001d00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d04:	edc7 7a08 	vstr	s15, [r7, #32]
        for (uint16_t i = 0; i < numTaps; i++) {
 8001d08:	8bfb      	ldrh	r3, [r7, #30]
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	83fb      	strh	r3, [r7, #30]
 8001d0e:	8bfa      	ldrh	r2, [r7, #30]
 8001d10:	897b      	ldrh	r3, [r7, #10]
 8001d12:	429a      	cmp	r2, r3
 8001d14:	d3eb      	bcc.n	8001cee <FIR_init+0x1b6>
        }

        if (sum != 0.0f) {
 8001d16:	edd7 7a08 	vldr	s15, [r7, #32]
 8001d1a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001d1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d22:	d01b      	beq.n	8001d5c <FIR_init+0x224>
            for (uint16_t i = 0; i < numTaps; i++) {
 8001d24:	2300      	movs	r3, #0
 8001d26:	83bb      	strh	r3, [r7, #28]
 8001d28:	e014      	b.n	8001d54 <FIR_init+0x21c>
                fir->coeffs[i] /= sum;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	8bbb      	ldrh	r3, [r7, #28]
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	4413      	add	r3, r2
 8001d34:	edd3 6a00 	vldr	s13, [r3]
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	8bbb      	ldrh	r3, [r7, #28]
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	4413      	add	r3, r2
 8001d42:	ed97 7a08 	vldr	s14, [r7, #32]
 8001d46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d4a:	edc3 7a00 	vstr	s15, [r3]
            for (uint16_t i = 0; i < numTaps; i++) {
 8001d4e:	8bbb      	ldrh	r3, [r7, #28]
 8001d50:	3301      	adds	r3, #1
 8001d52:	83bb      	strh	r3, [r7, #28]
 8001d54:	8bba      	ldrh	r2, [r7, #28]
 8001d56:	897b      	ldrh	r3, [r7, #10]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d3e6      	bcc.n	8001d2a <FIR_init+0x1f2>
            }
        }
    }
}
 8001d5c:	bf00      	nop
 8001d5e:	3728      	adds	r7, #40	@ 0x28
 8001d60:	46bd      	mov	sp, r7
 8001d62:	ecbd 8b02 	vpop	{d8}
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	40c90fdb 	.word	0x40c90fdb
 8001d6c:	40490fdb 	.word	0x40490fdb
 8001d70:	3eeb851f 	.word	0x3eeb851f
 8001d74:	3f0a3d71 	.word	0x3f0a3d71

08001d78 <mapf>:

}

//Scaling a range of value
float mapf(float input, float min_input, float max_input, float min_output,
		float max_output) {
 8001d78:	b480      	push	{r7}
 8001d7a:	b089      	sub	sp, #36	@ 0x24
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	ed87 0a05 	vstr	s0, [r7, #20]
 8001d82:	edc7 0a04 	vstr	s1, [r7, #16]
 8001d86:	ed87 1a03 	vstr	s2, [r7, #12]
 8001d8a:	edc7 1a02 	vstr	s3, [r7, #8]
 8001d8e:	ed87 2a01 	vstr	s4, [r7, #4]

	// First, find the ratio of the input within the input range
	float input_ratio = (input - min_input) / (max_input - min_input);
 8001d92:	ed97 7a05 	vldr	s14, [r7, #20]
 8001d96:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d9a:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001d9e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001da2:	edd7 7a04 	vldr	s15, [r7, #16]
 8001da6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001daa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001dae:	edc7 7a07 	vstr	s15, [r7, #28]
	// Then, scale this ratio to the output range
	float output = (input_ratio * (max_output - min_output)) + min_output;
 8001db2:	ed97 7a01 	vldr	s14, [r7, #4]
 8001db6:	edd7 7a02 	vldr	s15, [r7, #8]
 8001dba:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001dbe:	edd7 7a07 	vldr	s15, [r7, #28]
 8001dc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dc6:	ed97 7a02 	vldr	s14, [r7, #8]
 8001dca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dce:	edc7 7a06 	vstr	s15, [r7, #24]

	return output;
 8001dd2:	69bb      	ldr	r3, [r7, #24]
 8001dd4:	ee07 3a90 	vmov	s15, r3
}
 8001dd8:	eeb0 0a67 	vmov.f32	s0, s15
 8001ddc:	3724      	adds	r7, #36	@ 0x24
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
	...

08001de8 <modbus_1t5_Timeout>:
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);

// function for interrupt
void modbus_1t5_Timeout()
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8001dec:	4b0d      	ldr	r3, [pc, #52]	@ (8001e24 <modbus_1t5_Timeout+0x3c>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2201      	movs	r2, #1
 8001df2:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8001df4:	4b0b      	ldr	r3, [pc, #44]	@ (8001e24 <modbus_1t5_Timeout+0x3c>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	691b      	ldr	r3, [r3, #16]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 8001e00:	4b08      	ldr	r3, [pc, #32]	@ (8001e24 <modbus_1t5_Timeout+0x3c>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	691b      	ldr	r3, [r3, #16]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	4b06      	ldr	r3, [pc, #24]	@ (8001e24 <modbus_1t5_Timeout+0x3c>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	691b      	ldr	r3, [r3, #16]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f042 0201 	orr.w	r2, r2, #1
 8001e16:	601a      	str	r2, [r3, #0]
}
 8001e18:	bf00      	nop
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	200001a8 	.word	0x200001a8

08001e28 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8001e30:	4b04      	ldr	r3, [pc, #16]	@ (8001e44 <modbus_3t5_Timeout+0x1c>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	2201      	movs	r2, #1
 8001e36:	755a      	strb	r2, [r3, #21]

}
 8001e38:	bf00      	nop
 8001e3a:	370c      	adds	r7, #12
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr
 8001e44:	200001a8 	.word	0x200001a8

08001e48 <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f00d f8c5 	bl	800efe0 <HAL_UART_GetError>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b20      	cmp	r3, #32
 8001e5a:	d101      	bne.n	8001e60 <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 8001e5c:	f7ff ffc4 	bl	8001de8 <modbus_1t5_Timeout>

	}
}
 8001e60:	bf00      	nop
 8001e62:	3708      	adds	r7, #8
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}

08001e68 <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,UART_HandleTypeDef* huart,TIM_HandleTypeDef* htim ,u16u8_t* RegisterStartAddress,uint8_t slaveAddress,uint32_t RegisterSize)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	60f8      	str	r0, [r7, #12]
 8001e70:	60b9      	str	r1, [r7, #8]
 8001e72:	607a      	str	r2, [r7, #4]
 8001e74:	603b      	str	r3, [r7, #0]
	hModbus = hmodbus;
 8001e76:	4a2d      	ldr	r2, [pc, #180]	@ (8001f2c <Modbus_init+0xc4>)
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	6013      	str	r3, [r2, #0]

	hModbus->huart = huart;
 8001e7c:	4b2b      	ldr	r3, [pc, #172]	@ (8001f2c <Modbus_init+0xc4>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	68ba      	ldr	r2, [r7, #8]
 8001e82:	60da      	str	r2, [r3, #12]
	hModbus->htim = htim;
 8001e84:	4b29      	ldr	r3, [pc, #164]	@ (8001f2c <Modbus_init+0xc4>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	687a      	ldr	r2, [r7, #4]
 8001e8a:	611a      	str	r2, [r3, #16]
	hModbus->RegisterAddress = RegisterStartAddress;
 8001e8c:	4b27      	ldr	r3, [pc, #156]	@ (8001f2c <Modbus_init+0xc4>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	683a      	ldr	r2, [r7, #0]
 8001e92:	605a      	str	r2, [r3, #4]
	hModbus->slaveAddress = slaveAddress;
 8001e94:	4b25      	ldr	r3, [pc, #148]	@ (8001f2c <Modbus_init+0xc4>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	7e3a      	ldrb	r2, [r7, #24]
 8001e9a:	701a      	strb	r2, [r3, #0]
	hModbus->RegisterSize = RegisterSize;
 8001e9c:	4b23      	ldr	r3, [pc, #140]	@ (8001f2c <Modbus_init+0xc4>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	69fa      	ldr	r2, [r7, #28]
 8001ea2:	609a      	str	r2, [r3, #8]
	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	691b      	ldr	r3, [r3, #16]
 8001ea8:	4a21      	ldr	r2, [pc, #132]	@ (8001f30 <Modbus_init+0xc8>)
 8001eaa:	210e      	movs	r1, #14
 8001eac:	4618      	mov	r0, r3
 8001eae:	f00b fb3b 	bl	800d528 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	68db      	ldr	r3, [r3, #12]
 8001eb6:	2110      	movs	r1, #16
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f00d f83b 	bl	800ef34 <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	68db      	ldr	r3, [r3, #12]
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f00d f852 	bl	800ef6c <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	4a19      	ldr	r2, [pc, #100]	@ (8001f34 <Modbus_init+0xcc>)
 8001ece:	2104      	movs	r1, #4
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f00c fb79 	bl	800e5c8 <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 8001ed6:	4b15      	ldr	r3, [pc, #84]	@ (8001f2c <Modbus_init+0xc4>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 8001edc:	4b13      	ldr	r3, [pc, #76]	@ (8001f2c <Modbus_init+0xc4>)
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	4b12      	ldr	r3, [pc, #72]	@ (8001f2c <Modbus_init+0xc4>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 8001ee8:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8001eec:	4413      	add	r3, r2
 8001eee:	3302      	adds	r3, #2
 8001ef0:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	f00c fc21 	bl	800e73c <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 8001efa:	4b0c      	ldr	r3, [pc, #48]	@ (8001f2c <Modbus_init+0xc4>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	691b      	ldr	r3, [r3, #16]
 8001f00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d10c      	bne.n	8001f24 <Modbus_init+0xbc>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8001f0a:	4b08      	ldr	r3, [pc, #32]	@ (8001f2c <Modbus_init+0xc4>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	691b      	ldr	r3, [r3, #16]
 8001f10:	4618      	mov	r0, r3
 8001f12:	f00a fae5 	bl	800c4e0 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8001f16:	4b05      	ldr	r3, [pc, #20]	@ (8001f2c <Modbus_init+0xc4>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	691b      	ldr	r3, [r3, #16]
 8001f1c:	2100      	movs	r1, #0
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f00a fd34 	bl	800c98c <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8001f24:	bf00      	nop
 8001f26:	3710      	adds	r7, #16
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	200001a8 	.word	0x200001a8
 8001f30:	08001e29 	.word	0x08001e29
 8001f34:	08001e49 	.word	0x08001e49

08001f38 <MotorKalman_Init>:
#include <string.h>
#include "MotorMatrixGenerator.h"

void MotorKalman_Init(MotorKalman* filter, float32_t dt, float32_t J, float32_t b,
                      float32_t K_t, float32_t K_e, float32_t R_a, float32_t L_a,
                      float32_t Q, float32_t R) {
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b08c      	sub	sp, #48	@ 0x30
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6278      	str	r0, [r7, #36]	@ 0x24
 8001f40:	ed87 0a08 	vstr	s0, [r7, #32]
 8001f44:	edc7 0a07 	vstr	s1, [r7, #28]
 8001f48:	ed87 1a06 	vstr	s2, [r7, #24]
 8001f4c:	edc7 1a05 	vstr	s3, [r7, #20]
 8001f50:	ed87 2a04 	vstr	s4, [r7, #16]
 8001f54:	edc7 2a03 	vstr	s5, [r7, #12]
 8001f58:	ed87 3a02 	vstr	s6, [r7, #8]
 8001f5c:	edc7 3a01 	vstr	s7, [r7, #4]
 8001f60:	ed87 4a00 	vstr	s8, [r7]
    // Store motor parameters
    filter->dt = dt;
 8001f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f66:	6a3a      	ldr	r2, [r7, #32]
 8001f68:	f8c3 2338 	str.w	r2, [r3, #824]	@ 0x338
    filter->J = J;
 8001f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f6e:	69fa      	ldr	r2, [r7, #28]
 8001f70:	f8c3 233c 	str.w	r2, [r3, #828]	@ 0x33c
    filter->b = b;
 8001f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f76:	69ba      	ldr	r2, [r7, #24]
 8001f78:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
    filter->K_t = K_t;
 8001f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f7e:	697a      	ldr	r2, [r7, #20]
 8001f80:	f8c3 2344 	str.w	r2, [r3, #836]	@ 0x344
    filter->K_e = K_e;
 8001f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f86:	693a      	ldr	r2, [r7, #16]
 8001f88:	f8c3 2348 	str.w	r2, [r3, #840]	@ 0x348
    filter->R_a = R_a;
 8001f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f8e:	68fa      	ldr	r2, [r7, #12]
 8001f90:	f8c3 234c 	str.w	r2, [r3, #844]	@ 0x34c
    filter->L_a = L_a;
 8001f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f96:	68ba      	ldr	r2, [r7, #8]
 8001f98:	f8c3 2350 	str.w	r2, [r3, #848]	@ 0x350

    // Initialize state vector to zeros
    memset(filter->X, 0, sizeof(filter->X));
 8001f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f9e:	2210      	movs	r2, #16
 8001fa0:	2100      	movs	r1, #0
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f00e fe8c 	bl	8010cc0 <memset>

    // Initialize covariance matrix with high values on diagonal to reflect uncertainty
    memset(filter->P, 0, sizeof(filter->P));
 8001fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001faa:	3310      	adds	r3, #16
 8001fac:	2240      	movs	r2, #64	@ 0x40
 8001fae:	2100      	movs	r1, #0
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f00e fe85 	bl	8010cc0 <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001fba:	e00c      	b.n	8001fd6 <MotorKalman_Init+0x9e>
        filter->P[i * MOTOR_KALMAN_NUM_STATES + i] = 100.0f;
 8001fbc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001fbe:	4613      	mov	r3, r2
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	4413      	add	r3, r2
 8001fc4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fc6:	3304      	adds	r3, #4
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	4413      	add	r3, r2
 8001fcc:	4a79      	ldr	r2, [pc, #484]	@ (80021b4 <MotorKalman_Init+0x27c>)
 8001fce:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001fd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001fd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fd8:	2b03      	cmp	r3, #3
 8001fda:	ddef      	ble.n	8001fbc <MotorKalman_Init+0x84>
    }

    // Initialize identity matrix
    memset(filter->I_data, 0, sizeof(filter->I_data));
 8001fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fde:	f503 733e 	add.w	r3, r3, #760	@ 0x2f8
 8001fe2:	2240      	movs	r2, #64	@ 0x40
 8001fe4:	2100      	movs	r1, #0
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f00e fe6a 	bl	8010cc0 <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001fec:	2300      	movs	r3, #0
 8001fee:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001ff0:	e00d      	b.n	800200e <MotorKalman_Init+0xd6>
        filter->I_data[i * MOTOR_KALMAN_NUM_STATES + i] = 1.0f;
 8001ff2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001ff4:	4613      	mov	r3, r2
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	4413      	add	r3, r2
 8001ffa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ffc:	33be      	adds	r3, #190	@ 0xbe
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	4413      	add	r3, r2
 8002002:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002006:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002008:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800200a:	3301      	adds	r3, #1
 800200c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800200e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002010:	2b03      	cmp	r3, #3
 8002012:	ddee      	ble.n	8001ff2 <MotorKalman_Init+0xba>
    }

    // Initialize output matrix C - measuring only position by default
    memset(filter->C, 0, sizeof(filter->C));
 8002014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002016:	33f0      	adds	r3, #240	@ 0xf0
 8002018:	2210      	movs	r2, #16
 800201a:	2100      	movs	r1, #0
 800201c:	4618      	mov	r0, r3
 800201e:	f00e fe4f 	bl	8010cc0 <memset>
    filter->C[0] = 1.0f; // We only measure the position (first state) by default
 8002022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002024:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002028:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

    // Initialize process noise input matrix G
    memset(filter->G, 0, sizeof(filter->G));
 800202c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800202e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002032:	2210      	movs	r2, #16
 8002034:	2100      	movs	r1, #0
 8002036:	4618      	mov	r0, r3
 8002038:	f00e fe42 	bl	8010cc0 <memset>
    filter->G[1] = 1.0f; // Process noise primarily affects the velocity state (index 1)
 800203c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800203e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002042:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104


    // Set process and measurement noise values
    MotorKalman_SetProcessNoise(filter, Q);
 8002046:	ed97 0a01 	vldr	s0, [r7, #4]
 800204a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800204c:	f000 f922 	bl	8002294 <MotorKalman_SetProcessNoise>
    MotorKalman_SetMeasurementNoise(filter, R);
 8002050:	ed97 0a00 	vldr	s0, [r7]
 8002054:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002056:	f000 f94d 	bl	80022f4 <MotorKalman_SetMeasurementNoise>

    // Initialize ARM CMSIS DSP matrix instances - essential for safely using the functions
    arm_mat_init_f32(&filter->X_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->X);
 800205a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800205c:	f503 70d2 	add.w	r0, r3, #420	@ 0x1a4
 8002060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002062:	2201      	movs	r2, #1
 8002064:	2104      	movs	r1, #4
 8002066:	f00e f8ba 	bl	80101de <arm_mat_init_f32>
    arm_mat_init_f32(&filter->P_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->P);
 800206a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800206c:	f503 70d6 	add.w	r0, r3, #428	@ 0x1ac
 8002070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002072:	3310      	adds	r3, #16
 8002074:	2204      	movs	r2, #4
 8002076:	2104      	movs	r1, #4
 8002078:	f00e f8b1 	bl	80101de <arm_mat_init_f32>
    arm_mat_init_f32(&filter->I_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->I_data);
 800207c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800207e:	f503 703c 	add.w	r0, r3, #752	@ 0x2f0
 8002082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002084:	f503 733e 	add.w	r3, r3, #760	@ 0x2f8
 8002088:	2204      	movs	r2, #4
 800208a:	2104      	movs	r1, #4
 800208c:	f00e f8a7 	bl	80101de <arm_mat_init_f32>
    arm_mat_init_f32(&filter->R_matrix, MOTOR_KALMAN_NUM_OUTPUTS, MOTOR_KALMAN_NUM_OUTPUTS, filter->R);
 8002090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002092:	f503 70e6 	add.w	r0, r3, #460	@ 0x1cc
 8002096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002098:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 800209c:	2201      	movs	r2, #1
 800209e:	2101      	movs	r1, #1
 80020a0:	f00e f89d 	bl	80101de <arm_mat_init_f32>
    arm_mat_init_f32(&filter->measurement_matrix, MOTOR_KALMAN_NUM_OUTPUTS, 1, filter->measurement_data);
 80020a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020a6:	f503 7036 	add.w	r0, r3, #728	@ 0x2d8
 80020aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ac:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 80020b0:	2201      	movs	r2, #1
 80020b2:	2101      	movs	r1, #1
 80020b4:	f00e f893 	bl	80101de <arm_mat_init_f32>
    arm_mat_init_f32(&filter->input_matrix, MOTOR_KALMAN_NUM_INPUTS, 1, filter->input_data);
 80020b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ba:	f503 7038 	add.w	r0, r3, #736	@ 0x2e0
 80020be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020c0:	f503 733b 	add.w	r3, r3, #748	@ 0x2ec
 80020c4:	2201      	movs	r2, #1
 80020c6:	2101      	movs	r1, #1
 80020c8:	f00e f889 	bl	80101de <arm_mat_init_f32>

    // Initialize matrices for transposed versions
    arm_mat_init_f32(&filter->A_transpose_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->A_transpose_data);
 80020cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ce:	f503 70ee 	add.w	r0, r3, #476	@ 0x1dc
 80020d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020d4:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 80020d8:	2204      	movs	r2, #4
 80020da:	2104      	movs	r1, #4
 80020dc:	f00e f87f 	bl	80101de <arm_mat_init_f32>
    arm_mat_init_f32(&filter->C_transpose_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_OUTPUTS, filter->C_transpose_data);
 80020e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020e2:	f503 70f2 	add.w	r0, r3, #484	@ 0x1e4
 80020e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020e8:	f503 730b 	add.w	r3, r3, #556	@ 0x22c
 80020ec:	2201      	movs	r2, #1
 80020ee:	2104      	movs	r1, #4
 80020f0:	f00e f875 	bl	80101de <arm_mat_init_f32>

    // Initialize temp matrices essential for calculations
    arm_mat_init_f32(&filter->temp_state_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->temp_state_data);
 80020f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020f6:	f503 700f 	add.w	r0, r3, #572	@ 0x23c
 80020fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020fc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002100:	2201      	movs	r2, #1
 8002102:	2104      	movs	r1, #4
 8002104:	f00e f86b 	bl	80101de <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_state_state_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->temp_state_state_data);
 8002108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800210a:	f503 7011 	add.w	r0, r3, #580	@ 0x244
 800210e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002110:	f503 731d 	add.w	r3, r3, #628	@ 0x274
 8002114:	2204      	movs	r2, #4
 8002116:	2104      	movs	r1, #4
 8002118:	f00e f861 	bl	80101de <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_output_state_matrix, MOTOR_KALMAN_NUM_OUTPUTS, MOTOR_KALMAN_NUM_STATES, filter->temp_output_state_data);
 800211c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800211e:	f503 7013 	add.w	r0, r3, #588	@ 0x24c
 8002122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002124:	f503 732d 	add.w	r3, r3, #692	@ 0x2b4
 8002128:	2204      	movs	r2, #4
 800212a:	2101      	movs	r1, #1
 800212c:	f00e f857 	bl	80101de <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_output_output_matrix, MOTOR_KALMAN_NUM_OUTPUTS, MOTOR_KALMAN_NUM_OUTPUTS, filter->temp_output_output_data);
 8002130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002132:	f503 7015 	add.w	r0, r3, #596	@ 0x254
 8002136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002138:	f503 7331 	add.w	r3, r3, #708	@ 0x2c4
 800213c:	2201      	movs	r2, #1
 800213e:	2101      	movs	r1, #1
 8002140:	f00e f84d 	bl	80101de <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_state_output_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_OUTPUTS, filter->temp_state_output_data);
 8002144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002146:	f503 7017 	add.w	r0, r3, #604	@ 0x25c
 800214a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800214c:	f503 7332 	add.w	r3, r3, #712	@ 0x2c8
 8002150:	2201      	movs	r2, #1
 8002152:	2104      	movs	r1, #4
 8002154:	f00e f843 	bl	80101de <arm_mat_init_f32>

    // Generate continuous-time matrices and discretize the model
    MotorKalman_DiscretizeModel(filter);
 8002158:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800215a:	f000 f82d 	bl	80021b8 <MotorKalman_DiscretizeModel>

    // Initialize system matrices after discretization
    arm_mat_init_f32(&filter->A_d_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->A_d);
 800215e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002160:	f503 70da 	add.w	r0, r3, #436	@ 0x1b4
 8002164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002166:	3390      	adds	r3, #144	@ 0x90
 8002168:	2204      	movs	r2, #4
 800216a:	2104      	movs	r1, #4
 800216c:	f00e f837 	bl	80101de <arm_mat_init_f32>
    arm_mat_init_f32(&filter->B_d_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_INPUTS, filter->B_d);
 8002170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002172:	f503 70de 	add.w	r0, r3, #444	@ 0x1bc
 8002176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002178:	33e0      	adds	r3, #224	@ 0xe0
 800217a:	2201      	movs	r2, #1
 800217c:	2104      	movs	r1, #4
 800217e:	f00e f82e 	bl	80101de <arm_mat_init_f32>
    arm_mat_init_f32(&filter->Q_d_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->Q_d);
 8002182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002184:	f503 70e2 	add.w	r0, r3, #452	@ 0x1c4
 8002188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800218a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800218e:	2204      	movs	r2, #4
 8002190:	2104      	movs	r1, #4
 8002192:	f00e f824 	bl	80101de <arm_mat_init_f32>
    arm_mat_init_f32(&filter->K_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_OUTPUTS, filter->K);
 8002196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002198:	f503 70ea 	add.w	r0, r3, #468	@ 0x1d4
 800219c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800219e:	f503 73ca 	add.w	r3, r3, #404	@ 0x194
 80021a2:	2201      	movs	r2, #1
 80021a4:	2104      	movs	r1, #4
 80021a6:	f00e f81a 	bl	80101de <arm_mat_init_f32>
}
 80021aa:	bf00      	nop
 80021ac:	3730      	adds	r7, #48	@ 0x30
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	42c80000 	.word	0x42c80000

080021b8 <MotorKalman_DiscretizeModel>:

void MotorKalman_DiscretizeModel(MotorKalman* filter) {
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
    // Use the GenerateMotorMatrices function to discretize the model
    GenerateMotorMatrices(
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	edd3 7ad3 	vldr	s15, [r3, #844]	@ 0x34c
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	ed93 7ad4 	vldr	s14, [r3, #848]	@ 0x350
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	edd3 6acf 	vldr	s13, [r3, #828]	@ 0x33c
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	ed93 6ad0 	vldr	s12, [r3, #832]	@ 0x340
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	edd3 5ad2 	vldr	s11, [r3, #840]	@ 0x348
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	ed93 5ad1 	vldr	s10, [r3, #836]	@ 0x344
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	edd3 4ace 	vldr	s9, [r3, #824]	@ 0x338
        filter->J,       // Motor inertia
        filter->b,       // Viscous friction coefficient
        filter->K_e,     // Back-EMF constant
        filter->K_t,     // Torque constant
        filter->dt,      // Sample time
        filter->A_d,     // Output discrete state matrix
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	f103 0290 	add.w	r2, r3, #144	@ 0x90
        filter->B_d      // Output discrete input matrix
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	33e0      	adds	r3, #224	@ 0xe0
    GenerateMotorMatrices(
 80021f4:	4619      	mov	r1, r3
 80021f6:	4610      	mov	r0, r2
 80021f8:	eeb0 3a64 	vmov.f32	s6, s9
 80021fc:	eef0 2a45 	vmov.f32	s5, s10
 8002200:	eeb0 2a65 	vmov.f32	s4, s11
 8002204:	eef0 1a46 	vmov.f32	s3, s12
 8002208:	eeb0 1a66 	vmov.f32	s2, s13
 800220c:	eef0 0a47 	vmov.f32	s1, s14
 8002210:	eeb0 0a67 	vmov.f32	s0, s15
 8002214:	f001 f87a 	bl	800330c <GenerateMotorMatrices>
    );

    // Initialize discrete process noise matrix Q_d (simplified for stability)
    memset(filter->Q_d, 0, sizeof(filter->Q_d));
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800221e:	2240      	movs	r2, #64	@ 0x40
 8002220:	2100      	movs	r1, #0
 8002222:	4618      	mov	r0, r3
 8002224:	f00e fd4c 	bl	8010cc0 <memset>

    // Set diagonal elements for process noise (simpler but reliable approach)
    filter->Q_d[0 * MOTOR_KALMAN_NUM_STATES + 0] = 0.01f * filter->dt * filter->dt; // Position noise
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 800222e:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 800228c <MotorKalman_DiscretizeModel+0xd4>
 8002232:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 800223c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	edc3 7a54 	vstr	s15, [r3, #336]	@ 0x150
    filter->Q_d[1 * MOTOR_KALMAN_NUM_STATES + 1] = filter->Q[1 * MOTOR_KALMAN_NUM_STATES + 1] * filter->dt; // Velocity noise (main process noise)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	ed93 7a49 	vldr	s14, [r3, #292]	@ 0x124
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 8002252:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	edc3 7a59 	vstr	s15, [r3, #356]	@ 0x164
    filter->Q_d[2 * MOTOR_KALMAN_NUM_STATES + 2] = 0.1f * filter->dt; // Load torque noise
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 8002262:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8002290 <MotorKalman_DiscretizeModel+0xd8>
 8002266:	ee67 7a87 	vmul.f32	s15, s15, s14
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	edc3 7a5e 	vstr	s15, [r3, #376]	@ 0x178
    filter->Q_d[3 * MOTOR_KALMAN_NUM_STATES + 3] = 0.01f * filter->dt; // Current noise
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 8002276:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 800228c <MotorKalman_DiscretizeModel+0xd4>
 800227a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	edc3 7a63 	vstr	s15, [r3, #396]	@ 0x18c
}
 8002284:	bf00      	nop
 8002286:	3708      	adds	r7, #8
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	3c23d70a 	.word	0x3c23d70a
 8002290:	3dcccccd 	.word	0x3dcccccd

08002294 <MotorKalman_SetProcessNoise>:

void MotorKalman_SetProcessNoise(MotorKalman* filter, float32_t Q) {
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	ed87 0a00 	vstr	s0, [r7]
    // Set the process noise covariance matrix Q (continuous)
    memset(filter->Q, 0, sizeof(filter->Q));
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 80022a6:	2240      	movs	r2, #64	@ 0x40
 80022a8:	2100      	movs	r1, #0
 80022aa:	4618      	mov	r0, r3
 80022ac:	f00e fd08 	bl	8010cc0 <memset>

    // Only the velocity state (index 1) has process noise per G = [0;1;0;0]
    filter->Q[1 * MOTOR_KALMAN_NUM_STATES + 1] = Q * Q;
 80022b0:	edd7 7a00 	vldr	s15, [r7]
 80022b4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	edc3 7a49 	vstr	s15, [r3, #292]	@ 0x124
    filter->sigma_ml = Q;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	683a      	ldr	r2, [r7, #0]
 80022c2:	f8c3 2354 	str.w	r2, [r3, #852]	@ 0x354

    // Update the discrete process noise matrix if A_d has already been initialized
    if (filter->A_d[0] != 0.0f || filter->A_d[1] != 0.0f) {
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	edd3 7a24 	vldr	s15, [r3, #144]	@ 0x90
 80022cc:	eef5 7a40 	vcmp.f32	s15, #0.0
 80022d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022d4:	d107      	bne.n	80022e6 <MotorKalman_SetProcessNoise+0x52>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	edd3 7a25 	vldr	s15, [r3, #148]	@ 0x94
 80022dc:	eef5 7a40 	vcmp.f32	s15, #0.0
 80022e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022e4:	d002      	beq.n	80022ec <MotorKalman_SetProcessNoise+0x58>
        MotorKalman_DiscretizeModel(filter); // Recompute discretization with new Q
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f7ff ff66 	bl	80021b8 <MotorKalman_DiscretizeModel>
    }
}
 80022ec:	bf00      	nop
 80022ee:	3708      	adds	r7, #8
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}

080022f4 <MotorKalman_SetMeasurementNoise>:

void MotorKalman_SetMeasurementNoise(MotorKalman* filter, float32_t R) {
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	ed87 0a00 	vstr	s0, [r7]
    // Store the noise value
    filter->sigma_pos = sqrtf(R);
 8002300:	ed97 0a00 	vldr	s0, [r7]
 8002304:	f00e fdf8 	bl	8010ef8 <sqrtf>
 8002308:	eef0 7a40 	vmov.f32	s15, s0
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	edc3 7ad6 	vstr	s15, [r3, #856]	@ 0x358

    // Set the measurement noise covariance matrix R
    filter->R[0] = R;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	683a      	ldr	r2, [r7, #0]
 8002316:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
}
 800231a:	bf00      	nop
 800231c:	3708      	adds	r7, #8
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
	...

08002324 <MotorKalman_Reset>:

void MotorKalman_Reset(MotorKalman* filter) {
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
    // Reset state vector to zeros
    memset(filter->X, 0, sizeof(filter->X));
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2210      	movs	r2, #16
 8002330:	2100      	movs	r1, #0
 8002332:	4618      	mov	r0, r3
 8002334:	f00e fcc4 	bl	8010cc0 <memset>

    // Reset covariance matrix with high values on diagonal to reflect uncertainty
    memset(filter->P, 0, sizeof(filter->P));
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	3310      	adds	r3, #16
 800233c:	2240      	movs	r2, #64	@ 0x40
 800233e:	2100      	movs	r1, #0
 8002340:	4618      	mov	r0, r3
 8002342:	f00e fcbd 	bl	8010cc0 <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002346:	2300      	movs	r3, #0
 8002348:	60fb      	str	r3, [r7, #12]
 800234a:	e00c      	b.n	8002366 <MotorKalman_Reset+0x42>
        filter->P[i * MOTOR_KALMAN_NUM_STATES + i] = 100.0f;
 800234c:	68fa      	ldr	r2, [r7, #12]
 800234e:	4613      	mov	r3, r2
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	4413      	add	r3, r2
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	3304      	adds	r3, #4
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	4413      	add	r3, r2
 800235c:	4a0f      	ldr	r2, [pc, #60]	@ (800239c <MotorKalman_Reset+0x78>)
 800235e:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	3301      	adds	r3, #1
 8002364:	60fb      	str	r3, [r7, #12]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2b03      	cmp	r3, #3
 800236a:	ddef      	ble.n	800234c <MotorKalman_Reset+0x28>
    }

    // Reset estimated values
    filter->position = 0.0f;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f04f 0200 	mov.w	r2, #0
 8002372:	f8c3 235c 	str.w	r2, [r3, #860]	@ 0x35c
    filter->velocity = 0.0f;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	f04f 0200 	mov.w	r2, #0
 800237c:	f8c3 2360 	str.w	r2, [r3, #864]	@ 0x360
    filter->load_torque = 0.0f;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	f04f 0200 	mov.w	r2, #0
 8002386:	f8c3 2364 	str.w	r2, [r3, #868]	@ 0x364
    filter->current = 0.0f;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	f04f 0200 	mov.w	r2, #0
 8002390:	f8c3 2368 	str.w	r2, [r3, #872]	@ 0x368
}
 8002394:	bf00      	nop
 8002396:	3710      	adds	r7, #16
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	42c80000 	.word	0x42c80000

080023a0 <MotorKalman_Predict>:

void MotorKalman_Predict(MotorKalman* filter, float32_t voltage_input) {
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b0b2      	sub	sp, #200	@ 0xc8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	ed87 0a00 	vstr	s0, [r7]
    // Store input for next step
    filter->input_data[0] = voltage_input;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	683a      	ldr	r2, [r7, #0]
 80023b0:	f8c3 22ec 	str.w	r2, [r3, #748]	@ 0x2ec

    // 1. State prediction using simplified method (more stable in embedded systems)
    // Compute x = A*x + B*u directly without using matrix operations
    float32_t new_state[MOTOR_KALMAN_NUM_STATES] = {0};
 80023b4:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80023b8:	2200      	movs	r2, #0
 80023ba:	601a      	str	r2, [r3, #0]
 80023bc:	605a      	str	r2, [r3, #4]
 80023be:	609a      	str	r2, [r3, #8]
 80023c0:	60da      	str	r2, [r3, #12]

    // Calculate A*x (manually)
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80023c2:	2300      	movs	r3, #0
 80023c4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80023c8:	e041      	b.n	800244e <MotorKalman_Predict+0xae>
        new_state[i] = 0;
 80023ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	33c8      	adds	r3, #200	@ 0xc8
 80023d2:	443b      	add	r3, r7
 80023d4:	3b3c      	subs	r3, #60	@ 0x3c
 80023d6:	f04f 0200 	mov.w	r2, #0
 80023da:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80023dc:	2300      	movs	r3, #0
 80023de:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80023e2:	e02b      	b.n	800243c <MotorKalman_Predict+0x9c>
            new_state[i] += filter->A_d[i * MOTOR_KALMAN_NUM_STATES + j] * filter->X[j];
 80023e4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	33c8      	adds	r3, #200	@ 0xc8
 80023ec:	443b      	add	r3, r7
 80023ee:	3b3c      	subs	r3, #60	@ 0x3c
 80023f0:	ed93 7a00 	vldr	s14, [r3]
 80023f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80023f8:	009a      	lsls	r2, r3, #2
 80023fa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80023fe:	4413      	add	r3, r2
 8002400:	687a      	ldr	r2, [r7, #4]
 8002402:	3324      	adds	r3, #36	@ 0x24
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	4413      	add	r3, r2
 8002408:	edd3 6a00 	vldr	s13, [r3]
 800240c:	687a      	ldr	r2, [r7, #4]
 800240e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	4413      	add	r3, r2
 8002416:	edd3 7a00 	vldr	s15, [r3]
 800241a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800241e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002422:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	33c8      	adds	r3, #200	@ 0xc8
 800242a:	443b      	add	r3, r7
 800242c:	3b3c      	subs	r3, #60	@ 0x3c
 800242e:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002432:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002436:	3301      	adds	r3, #1
 8002438:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800243c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002440:	2b03      	cmp	r3, #3
 8002442:	ddcf      	ble.n	80023e4 <MotorKalman_Predict+0x44>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002444:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002448:	3301      	adds	r3, #1
 800244a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800244e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002452:	2b03      	cmp	r3, #3
 8002454:	ddb9      	ble.n	80023ca <MotorKalman_Predict+0x2a>
        }
    }

    // Add B*u (manually)
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002456:	2300      	movs	r3, #0
 8002458:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800245c:	e021      	b.n	80024a2 <MotorKalman_Predict+0x102>
        filter->X[i] = new_state[i] + filter->B_d[i] * voltage_input;
 800245e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	33c8      	adds	r3, #200	@ 0xc8
 8002466:	443b      	add	r3, r7
 8002468:	3b3c      	subs	r3, #60	@ 0x3c
 800246a:	ed93 7a00 	vldr	s14, [r3]
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002474:	3338      	adds	r3, #56	@ 0x38
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	4413      	add	r3, r2
 800247a:	edd3 6a00 	vldr	s13, [r3]
 800247e:	edd7 7a00 	vldr	s15, [r7]
 8002482:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002486:	ee77 7a27 	vadd.f32	s15, s14, s15
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	4413      	add	r3, r2
 8002494:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002498:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800249c:	3301      	adds	r3, #1
 800249e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80024a2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80024a6:	2b03      	cmp	r3, #3
 80024a8:	ddd9      	ble.n	800245e <MotorKalman_Predict+0xbe>
    }

    // 2. Covariance prediction using simplified method (Joseph form for stability)
    // Using direct matrix computation for P = A*P*A' + Q
    float32_t AP[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES] = {0};
 80024aa:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80024ae:	2240      	movs	r2, #64	@ 0x40
 80024b0:	2100      	movs	r1, #0
 80024b2:	4618      	mov	r0, r3
 80024b4:	f00e fc04 	bl	8010cc0 <memset>
    float32_t APAT[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES] = {0};
 80024b8:	f107 030c 	add.w	r3, r7, #12
 80024bc:	2240      	movs	r2, #64	@ 0x40
 80024be:	2100      	movs	r1, #0
 80024c0:	4618      	mov	r0, r3
 80024c2:	f00e fbfd 	bl	8010cc0 <memset>

    // Compute A*P
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80024c6:	2300      	movs	r3, #0
 80024c8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80024cc:	e05f      	b.n	800258e <MotorKalman_Predict+0x1ee>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80024ce:	2300      	movs	r3, #0
 80024d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80024d4:	e052      	b.n	800257c <MotorKalman_Predict+0x1dc>
            AP[i * MOTOR_KALMAN_NUM_STATES + j] = 0;
 80024d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80024da:	009a      	lsls	r2, r3, #2
 80024dc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80024e0:	4413      	add	r3, r2
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	33c8      	adds	r3, #200	@ 0xc8
 80024e6:	443b      	add	r3, r7
 80024e8:	3b7c      	subs	r3, #124	@ 0x7c
 80024ea:	f04f 0200 	mov.w	r2, #0
 80024ee:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 80024f0:	2300      	movs	r3, #0
 80024f2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80024f6:	e038      	b.n	800256a <MotorKalman_Predict+0x1ca>
                AP[i * MOTOR_KALMAN_NUM_STATES + j] +=
 80024f8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80024fc:	009a      	lsls	r2, r3, #2
 80024fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002502:	4413      	add	r3, r2
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	33c8      	adds	r3, #200	@ 0xc8
 8002508:	443b      	add	r3, r7
 800250a:	3b7c      	subs	r3, #124	@ 0x7c
 800250c:	ed93 7a00 	vldr	s14, [r3]
                    filter->A_d[i * MOTOR_KALMAN_NUM_STATES + k] * filter->P[k * MOTOR_KALMAN_NUM_STATES + j];
 8002510:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002514:	009a      	lsls	r2, r3, #2
 8002516:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800251a:	4413      	add	r3, r2
 800251c:	687a      	ldr	r2, [r7, #4]
 800251e:	3324      	adds	r3, #36	@ 0x24
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	4413      	add	r3, r2
 8002524:	edd3 6a00 	vldr	s13, [r3]
 8002528:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800252c:	009a      	lsls	r2, r3, #2
 800252e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002532:	4413      	add	r3, r2
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	3304      	adds	r3, #4
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	4413      	add	r3, r2
 800253c:	edd3 7a00 	vldr	s15, [r3]
 8002540:	ee66 7aa7 	vmul.f32	s15, s13, s15
                AP[i * MOTOR_KALMAN_NUM_STATES + j] +=
 8002544:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002548:	009a      	lsls	r2, r3, #2
 800254a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800254e:	4413      	add	r3, r2
 8002550:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	33c8      	adds	r3, #200	@ 0xc8
 8002558:	443b      	add	r3, r7
 800255a:	3b7c      	subs	r3, #124	@ 0x7c
 800255c:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 8002560:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002564:	3301      	adds	r3, #1
 8002566:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800256a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800256e:	2b03      	cmp	r3, #3
 8002570:	ddc2      	ble.n	80024f8 <MotorKalman_Predict+0x158>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002572:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002576:	3301      	adds	r3, #1
 8002578:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800257c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002580:	2b03      	cmp	r3, #3
 8002582:	dda8      	ble.n	80024d6 <MotorKalman_Predict+0x136>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002584:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002588:	3301      	adds	r3, #1
 800258a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800258e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002592:	2b03      	cmp	r3, #3
 8002594:	dd9b      	ble.n	80024ce <MotorKalman_Predict+0x12e>
            }
        }
    }

    // Compute (A*P)*A'
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002596:	2300      	movs	r3, #0
 8002598:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800259c:	e05f      	b.n	800265e <MotorKalman_Predict+0x2be>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 800259e:	2300      	movs	r3, #0
 80025a0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80025a4:	e052      	b.n	800264c <MotorKalman_Predict+0x2ac>
            APAT[i * MOTOR_KALMAN_NUM_STATES + j] = 0;
 80025a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80025aa:	009a      	lsls	r2, r3, #2
 80025ac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80025b0:	4413      	add	r3, r2
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	33c8      	adds	r3, #200	@ 0xc8
 80025b6:	443b      	add	r3, r7
 80025b8:	3bbc      	subs	r3, #188	@ 0xbc
 80025ba:	f04f 0200 	mov.w	r2, #0
 80025be:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 80025c0:	2300      	movs	r3, #0
 80025c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80025c6:	e038      	b.n	800263a <MotorKalman_Predict+0x29a>
                APAT[i * MOTOR_KALMAN_NUM_STATES + j] +=
 80025c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80025cc:	009a      	lsls	r2, r3, #2
 80025ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80025d2:	4413      	add	r3, r2
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	33c8      	adds	r3, #200	@ 0xc8
 80025d8:	443b      	add	r3, r7
 80025da:	3bbc      	subs	r3, #188	@ 0xbc
 80025dc:	ed93 7a00 	vldr	s14, [r3]
                    AP[i * MOTOR_KALMAN_NUM_STATES + k] * filter->A_d[j * MOTOR_KALMAN_NUM_STATES + k];
 80025e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80025e4:	009a      	lsls	r2, r3, #2
 80025e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80025ea:	4413      	add	r3, r2
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	33c8      	adds	r3, #200	@ 0xc8
 80025f0:	443b      	add	r3, r7
 80025f2:	3b7c      	subs	r3, #124	@ 0x7c
 80025f4:	edd3 6a00 	vldr	s13, [r3]
 80025f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80025fc:	009a      	lsls	r2, r3, #2
 80025fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002602:	4413      	add	r3, r2
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	3324      	adds	r3, #36	@ 0x24
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	4413      	add	r3, r2
 800260c:	edd3 7a00 	vldr	s15, [r3]
 8002610:	ee66 7aa7 	vmul.f32	s15, s13, s15
                APAT[i * MOTOR_KALMAN_NUM_STATES + j] +=
 8002614:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002618:	009a      	lsls	r2, r3, #2
 800261a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800261e:	4413      	add	r3, r2
 8002620:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	33c8      	adds	r3, #200	@ 0xc8
 8002628:	443b      	add	r3, r7
 800262a:	3bbc      	subs	r3, #188	@ 0xbc
 800262c:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 8002630:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002634:	3301      	adds	r3, #1
 8002636:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800263a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800263e:	2b03      	cmp	r3, #3
 8002640:	ddc2      	ble.n	80025c8 <MotorKalman_Predict+0x228>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002642:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002646:	3301      	adds	r3, #1
 8002648:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800264c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002650:	2b03      	cmp	r3, #3
 8002652:	dda8      	ble.n	80025a6 <MotorKalman_Predict+0x206>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002654:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002658:	3301      	adds	r3, #1
 800265a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800265e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002662:	2b03      	cmp	r3, #3
 8002664:	dd9b      	ble.n	800259e <MotorKalman_Predict+0x1fe>
            }
        }
    }

    // Add Q to get P = A*P*A' + Q
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002666:	2300      	movs	r3, #0
 8002668:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800266c:	e037      	b.n	80026de <MotorKalman_Predict+0x33e>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 800266e:	2300      	movs	r3, #0
 8002670:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002674:	e02a      	b.n	80026cc <MotorKalman_Predict+0x32c>
            filter->P[i * MOTOR_KALMAN_NUM_STATES + j] =
                APAT[i * MOTOR_KALMAN_NUM_STATES + j] + filter->Q_d[i * MOTOR_KALMAN_NUM_STATES + j];
 8002676:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800267a:	009a      	lsls	r2, r3, #2
 800267c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002680:	4413      	add	r3, r2
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	33c8      	adds	r3, #200	@ 0xc8
 8002686:	443b      	add	r3, r7
 8002688:	3bbc      	subs	r3, #188	@ 0xbc
 800268a:	ed93 7a00 	vldr	s14, [r3]
 800268e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002692:	009a      	lsls	r2, r3, #2
 8002694:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002698:	4413      	add	r3, r2
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	3354      	adds	r3, #84	@ 0x54
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	4413      	add	r3, r2
 80026a2:	edd3 7a00 	vldr	s15, [r3]
            filter->P[i * MOTOR_KALMAN_NUM_STATES + j] =
 80026a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80026aa:	009a      	lsls	r2, r3, #2
 80026ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80026b0:	4413      	add	r3, r2
                APAT[i * MOTOR_KALMAN_NUM_STATES + j] + filter->Q_d[i * MOTOR_KALMAN_NUM_STATES + j];
 80026b2:	ee77 7a27 	vadd.f32	s15, s14, s15
            filter->P[i * MOTOR_KALMAN_NUM_STATES + j] =
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	3304      	adds	r3, #4
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	4413      	add	r3, r2
 80026be:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80026c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80026c6:	3301      	adds	r3, #1
 80026c8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80026cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80026d0:	2b03      	cmp	r3, #3
 80026d2:	ddd0      	ble.n	8002676 <MotorKalman_Predict+0x2d6>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80026d4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80026d8:	3301      	adds	r3, #1
 80026da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80026de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80026e2:	2b03      	cmp	r3, #3
 80026e4:	ddc3      	ble.n	800266e <MotorKalman_Predict+0x2ce>
        }
    }

    // Update state estimates for easy access
    filter->position = filter->X[0];
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	f8c3 235c 	str.w	r2, [r3, #860]	@ 0x35c
    filter->velocity = filter->X[1];
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	685a      	ldr	r2, [r3, #4]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f8c3 2360 	str.w	r2, [r3, #864]	@ 0x360
    filter->load_torque = filter->X[2];
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	689a      	ldr	r2, [r3, #8]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	f8c3 2364 	str.w	r2, [r3, #868]	@ 0x364
    filter->current = filter->X[3];
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	68da      	ldr	r2, [r3, #12]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	f8c3 2368 	str.w	r2, [r3, #872]	@ 0x368

    // Update CMSIS DSP matrices for next update step
    arm_mat_init_f32(&filter->X_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->X);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	f503 70d2 	add.w	r0, r3, #420	@ 0x1a4
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2201      	movs	r2, #1
 8002718:	2104      	movs	r1, #4
 800271a:	f00d fd60 	bl	80101de <arm_mat_init_f32>
    arm_mat_init_f32(&filter->P_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->P);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	f503 70d6 	add.w	r0, r3, #428	@ 0x1ac
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	3310      	adds	r3, #16
 8002728:	2204      	movs	r2, #4
 800272a:	2104      	movs	r1, #4
 800272c:	f00d fd57 	bl	80101de <arm_mat_init_f32>
}
 8002730:	bf00      	nop
 8002732:	37c8      	adds	r7, #200	@ 0xc8
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}

08002738 <MotorKalman_Update>:

void MotorKalman_Update(MotorKalman* filter, float32_t position) {
 8002738:	b580      	push	{r7, lr}
 800273a:	b0d0      	sub	sp, #320	@ 0x140
 800273c:	af00      	add	r7, sp, #0
 800273e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002742:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002746:	6018      	str	r0, [r3, #0]
 8002748:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800274c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002750:	ed83 0a00 	vstr	s0, [r3]
    // Store the position measurement
    filter->measurement_data[0] = position;
 8002754:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002758:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8002762:	f5a2 72a0 	sub.w	r2, r2, #320	@ 0x140
 8002766:	6812      	ldr	r2, [r2, #0]
 8002768:	f8c3 22e8 	str.w	r2, [r3, #744]	@ 0x2e8

    // 1. Compute innovation: y - C*x (directly, no matrix operations)
    float32_t Cx = filter->C[0] * filter->X[0] + filter->C[1] * filter->X[1] +
 800276c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002770:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	ed93 7a3c 	vldr	s14, [r3, #240]	@ 0xf0
 800277a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800277e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	edd3 7a00 	vldr	s15, [r3]
 8002788:	ee27 7a27 	vmul.f32	s14, s14, s15
 800278c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002790:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	edd3 6a3d 	vldr	s13, [r3, #244]	@ 0xf4
 800279a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800279e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	edd3 7a01 	vldr	s15, [r3, #4]
 80027a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027ac:	ee37 7a27 	vadd.f32	s14, s14, s15
                  filter->C[2] * filter->X[2] + filter->C[3] * filter->X[3];
 80027b0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80027b4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	edd3 6a3e 	vldr	s13, [r3, #248]	@ 0xf8
 80027be:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80027c2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	edd3 7a02 	vldr	s15, [r3, #8]
 80027cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
    float32_t Cx = filter->C[0] * filter->X[0] + filter->C[1] * filter->X[1] +
 80027d0:	ee37 7a27 	vadd.f32	s14, s14, s15
                  filter->C[2] * filter->X[2] + filter->C[3] * filter->X[3];
 80027d4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80027d8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	edd3 6a3f 	vldr	s13, [r3, #252]	@ 0xfc
 80027e2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80027e6:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	edd3 7a03 	vldr	s15, [r3, #12]
 80027f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
    float32_t Cx = filter->C[0] * filter->X[0] + filter->C[1] * filter->X[1] +
 80027f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027f8:	edc7 7a40 	vstr	s15, [r7, #256]	@ 0x100
    float32_t innovation = position - Cx;
 80027fc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002800:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002804:	ed93 7a00 	vldr	s14, [r3]
 8002808:	edd7 7a40 	vldr	s15, [r7, #256]	@ 0x100
 800280c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002810:	edc7 7a3f 	vstr	s15, [r7, #252]	@ 0xfc

    // 2. Compute innovation covariance: S = C*P*C' + R (directly)
    float32_t CP[MOTOR_KALMAN_NUM_STATES] = {0};
 8002814:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8002818:	2200      	movs	r2, #0
 800281a:	601a      	str	r2, [r3, #0]
 800281c:	605a      	str	r2, [r3, #4]
 800281e:	609a      	str	r2, [r3, #8]
 8002820:	60da      	str	r2, [r3, #12]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002822:	2300      	movs	r3, #0
 8002824:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8002828:	e04d      	b.n	80028c6 <MotorKalman_Update+0x18e>
        CP[i] = 0;
 800282a:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002834:	443b      	add	r3, r7
 8002836:	3b58      	subs	r3, #88	@ 0x58
 8002838:	f04f 0200 	mov.w	r2, #0
 800283c:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 800283e:	2300      	movs	r3, #0
 8002840:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8002844:	e036      	b.n	80028b4 <MotorKalman_Update+0x17c>
            CP[i] += filter->C[j] * filter->P[j * MOTOR_KALMAN_NUM_STATES + i];
 8002846:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002850:	443b      	add	r3, r7
 8002852:	3b58      	subs	r3, #88	@ 0x58
 8002854:	ed93 7a00 	vldr	s14, [r3]
 8002858:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800285c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002866:	333c      	adds	r3, #60	@ 0x3c
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	4413      	add	r3, r2
 800286c:	edd3 6a00 	vldr	s13, [r3]
 8002870:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002874:	009a      	lsls	r2, r3, #2
 8002876:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800287a:	4413      	add	r3, r2
 800287c:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8002880:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8002884:	6812      	ldr	r2, [r2, #0]
 8002886:	3304      	adds	r3, #4
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	4413      	add	r3, r2
 800288c:	edd3 7a00 	vldr	s15, [r3]
 8002890:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002894:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002898:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80028a2:	443b      	add	r3, r7
 80028a4:	3b58      	subs	r3, #88	@ 0x58
 80028a6:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80028aa:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80028ae:	3301      	adds	r3, #1
 80028b0:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 80028b4:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80028b8:	2b03      	cmp	r3, #3
 80028ba:	ddc4      	ble.n	8002846 <MotorKalman_Update+0x10e>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80028bc:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80028c0:	3301      	adds	r3, #1
 80028c2:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 80028c6:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80028ca:	2b03      	cmp	r3, #3
 80028cc:	ddad      	ble.n	800282a <MotorKalman_Update+0xf2>
        }
    }

    float32_t CPCT = 0;
 80028ce:	f04f 0300 	mov.w	r3, #0
 80028d2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80028d6:	2300      	movs	r3, #0
 80028d8:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80028dc:	e021      	b.n	8002922 <MotorKalman_Update+0x1ea>
        CPCT += CP[i] * filter->C[i];
 80028de:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80028e8:	443b      	add	r3, r7
 80028ea:	3b58      	subs	r3, #88	@ 0x58
 80028ec:	ed93 7a00 	vldr	s14, [r3]
 80028f0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80028f4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80028fe:	333c      	adds	r3, #60	@ 0x3c
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	4413      	add	r3, r2
 8002904:	edd3 7a00 	vldr	s15, [r3]
 8002908:	ee67 7a27 	vmul.f32	s15, s14, s15
 800290c:	ed97 7a4d 	vldr	s14, [r7, #308]	@ 0x134
 8002910:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002914:	edc7 7a4d 	vstr	s15, [r7, #308]	@ 0x134
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002918:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800291c:	3301      	adds	r3, #1
 800291e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8002922:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002926:	2b03      	cmp	r3, #3
 8002928:	ddd9      	ble.n	80028de <MotorKalman_Update+0x1a6>
    }

    float32_t S = CPCT + filter->R[0];
 800292a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800292e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	edd3 7a64 	vldr	s15, [r3, #400]	@ 0x190
 8002938:	ed97 7a4d 	vldr	s14, [r7, #308]	@ 0x134
 800293c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002940:	edc7 7a3e 	vstr	s15, [r7, #248]	@ 0xf8

    // 3. Compute Kalman gain: K = P*C'/S (directly)
    float32_t PC[MOTOR_KALMAN_NUM_STATES] = {0};
 8002944:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8002948:	2200      	movs	r2, #0
 800294a:	601a      	str	r2, [r3, #0]
 800294c:	605a      	str	r2, [r3, #4]
 800294e:	609a      	str	r2, [r3, #8]
 8002950:	60da      	str	r2, [r3, #12]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002952:	2300      	movs	r3, #0
 8002954:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8002958:	e04d      	b.n	80029f6 <MotorKalman_Update+0x2be>
        PC[i] = 0;
 800295a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002964:	443b      	add	r3, r7
 8002966:	3b68      	subs	r3, #104	@ 0x68
 8002968:	f04f 0200 	mov.w	r2, #0
 800296c:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 800296e:	2300      	movs	r3, #0
 8002970:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8002974:	e036      	b.n	80029e4 <MotorKalman_Update+0x2ac>
            PC[i] += filter->P[i * MOTOR_KALMAN_NUM_STATES + j] * filter->C[j];
 8002976:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002980:	443b      	add	r3, r7
 8002982:	3b68      	subs	r3, #104	@ 0x68
 8002984:	ed93 7a00 	vldr	s14, [r3]
 8002988:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800298c:	009a      	lsls	r2, r3, #2
 800298e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002992:	4413      	add	r3, r2
 8002994:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8002998:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 800299c:	6812      	ldr	r2, [r2, #0]
 800299e:	3304      	adds	r3, #4
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	4413      	add	r3, r2
 80029a4:	edd3 6a00 	vldr	s13, [r3]
 80029a8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80029ac:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80029b6:	333c      	adds	r3, #60	@ 0x3c
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	4413      	add	r3, r2
 80029bc:	edd3 7a00 	vldr	s15, [r3]
 80029c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80029d2:	443b      	add	r3, r7
 80029d4:	3b68      	subs	r3, #104	@ 0x68
 80029d6:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80029da:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80029de:	3301      	adds	r3, #1
 80029e0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80029e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80029e8:	2b03      	cmp	r3, #3
 80029ea:	ddc4      	ble.n	8002976 <MotorKalman_Update+0x23e>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80029ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80029f0:	3301      	adds	r3, #1
 80029f2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80029f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80029fa:	2b03      	cmp	r3, #3
 80029fc:	ddad      	ble.n	800295a <MotorKalman_Update+0x222>
        }
    }

    float32_t K[MOTOR_KALMAN_NUM_STATES] = {0};
 80029fe:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8002a02:	2200      	movs	r2, #0
 8002a04:	601a      	str	r2, [r3, #0]
 8002a06:	605a      	str	r2, [r3, #4]
 8002a08:	609a      	str	r2, [r3, #8]
 8002a0a:	60da      	str	r2, [r3, #12]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002a12:	e01a      	b.n	8002a4a <MotorKalman_Update+0x312>
        K[i] = PC[i] / S;
 8002a14:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002a18:	009b      	lsls	r3, r3, #2
 8002a1a:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002a1e:	443b      	add	r3, r7
 8002a20:	3b68      	subs	r3, #104	@ 0x68
 8002a22:	edd3 6a00 	vldr	s13, [r3]
 8002a26:	ed97 7a3e 	vldr	s14, [r7, #248]	@ 0xf8
 8002a2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a2e:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002a38:	443b      	add	r3, r7
 8002a3a:	3b78      	subs	r3, #120	@ 0x78
 8002a3c:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002a40:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002a44:	3301      	adds	r3, #1
 8002a46:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002a4a:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002a4e:	2b03      	cmp	r3, #3
 8002a50:	dde0      	ble.n	8002a14 <MotorKalman_Update+0x2dc>
    }

    // 4. Update state estimate: x = x + K*innovation (directly)
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002a52:	2300      	movs	r3, #0
 8002a54:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002a58:	e029      	b.n	8002aae <MotorKalman_Update+0x376>
        filter->X[i] += K[i] * innovation;
 8002a5a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002a5e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	4413      	add	r3, r2
 8002a6c:	ed93 7a00 	vldr	s14, [r3]
 8002a70:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002a7a:	443b      	add	r3, r7
 8002a7c:	3b78      	subs	r3, #120	@ 0x78
 8002a7e:	edd3 6a00 	vldr	s13, [r3]
 8002a82:	edd7 7a3f 	vldr	s15, [r7, #252]	@ 0xfc
 8002a86:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a8e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002a92:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	4413      	add	r3, r2
 8002aa0:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002aa4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002aae:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002ab2:	2b03      	cmp	r3, #3
 8002ab4:	ddd1      	ble.n	8002a5a <MotorKalman_Update+0x322>
    }

    // 5. Update covariance matrix: P = (I - K*C)*P (Joseph form for better stability)
    float32_t KC[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES] = {0};
 8002ab6:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8002aba:	2240      	movs	r2, #64	@ 0x40
 8002abc:	2100      	movs	r1, #0
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f00e f8fe 	bl	8010cc0 <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002aca:	e035      	b.n	8002b38 <MotorKalman_Update+0x400>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002acc:	2300      	movs	r3, #0
 8002ace:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8002ad2:	e028      	b.n	8002b26 <MotorKalman_Update+0x3ee>
            KC[i * MOTOR_KALMAN_NUM_STATES + j] = K[i] * filter->C[j];
 8002ad4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002ade:	443b      	add	r3, r7
 8002ae0:	3b78      	subs	r3, #120	@ 0x78
 8002ae2:	ed93 7a00 	vldr	s14, [r3]
 8002ae6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002aea:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002af4:	333c      	adds	r3, #60	@ 0x3c
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	4413      	add	r3, r2
 8002afa:	edd3 7a00 	vldr	s15, [r3]
 8002afe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002b02:	009a      	lsls	r2, r3, #2
 8002b04:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002b08:	4413      	add	r3, r2
 8002b0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002b14:	443b      	add	r3, r7
 8002b16:	3bb8      	subs	r3, #184	@ 0xb8
 8002b18:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002b1c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002b20:	3301      	adds	r3, #1
 8002b22:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8002b26:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002b2a:	2b03      	cmp	r3, #3
 8002b2c:	ddd2      	ble.n	8002ad4 <MotorKalman_Update+0x39c>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002b2e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002b32:	3301      	adds	r3, #1
 8002b34:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002b38:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002b3c:	2b03      	cmp	r3, #3
 8002b3e:	ddc5      	ble.n	8002acc <MotorKalman_Update+0x394>
        }
    }

    float32_t IKC[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES] = {0};
 8002b40:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002b44:	2240      	movs	r2, #64	@ 0x40
 8002b46:	2100      	movs	r1, #0
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f00e f8b9 	bl	8010cc0 <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002b4e:	2300      	movs	r3, #0
 8002b50:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8002b54:	e038      	b.n	8002bc8 <MotorKalman_Update+0x490>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002b56:	2300      	movs	r3, #0
 8002b58:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8002b5c:	e02b      	b.n	8002bb6 <MotorKalman_Update+0x47e>
            IKC[i * MOTOR_KALMAN_NUM_STATES + j] = (i == j ? 1.0f : 0.0f) - KC[i * MOTOR_KALMAN_NUM_STATES + j];
 8002b5e:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002b62:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d102      	bne.n	8002b70 <MotorKalman_Update+0x438>
 8002b6a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002b6e:	e001      	b.n	8002b74 <MotorKalman_Update+0x43c>
 8002b70:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 8002d8c <MotorKalman_Update+0x654>
 8002b74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b78:	009a      	lsls	r2, r3, #2
 8002b7a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002b7e:	4413      	add	r3, r2
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002b86:	443b      	add	r3, r7
 8002b88:	3bb8      	subs	r3, #184	@ 0xb8
 8002b8a:	edd3 7a00 	vldr	s15, [r3]
 8002b8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b92:	009a      	lsls	r2, r3, #2
 8002b94:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002b98:	4413      	add	r3, r2
 8002b9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002ba4:	443b      	add	r3, r7
 8002ba6:	3bf8      	subs	r3, #248	@ 0xf8
 8002ba8:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002bac:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8002bb6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002bba:	2b03      	cmp	r3, #3
 8002bbc:	ddcf      	ble.n	8002b5e <MotorKalman_Update+0x426>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002bbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8002bc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bcc:	2b03      	cmp	r3, #3
 8002bce:	ddc2      	ble.n	8002b56 <MotorKalman_Update+0x41e>
        }
    }

    // Store P temporarily
    float32_t P_temp[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES];
    memcpy(P_temp, filter->P, sizeof(P_temp));
 8002bd0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002bd4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f103 0110 	add.w	r1, r3, #16
 8002bde:	f107 0308 	add.w	r3, r7, #8
 8002be2:	2240      	movs	r2, #64	@ 0x40
 8002be4:	4618      	mov	r0, r3
 8002be6:	f00e f8af 	bl	8010d48 <memcpy>

    // Compute (I - K*C)*P
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002bea:	2300      	movs	r3, #0
 8002bec:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002bf0:	e06e      	b.n	8002cd0 <MotorKalman_Update+0x598>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002bf8:	e061      	b.n	8002cbe <MotorKalman_Update+0x586>
            filter->P[i * MOTOR_KALMAN_NUM_STATES + j] = 0;
 8002bfa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002bfe:	009a      	lsls	r2, r3, #2
 8002c00:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002c04:	4413      	add	r3, r2
 8002c06:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8002c0a:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8002c0e:	6812      	ldr	r2, [r2, #0]
 8002c10:	3304      	adds	r3, #4
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	4413      	add	r3, r2
 8002c16:	f04f 0200 	mov.w	r2, #0
 8002c1a:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002c22:	e043      	b.n	8002cac <MotorKalman_Update+0x574>
                filter->P[i * MOTOR_KALMAN_NUM_STATES + j] +=
 8002c24:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002c28:	009a      	lsls	r2, r3, #2
 8002c2a:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002c2e:	4413      	add	r3, r2
 8002c30:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8002c34:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8002c38:	6812      	ldr	r2, [r2, #0]
 8002c3a:	3304      	adds	r3, #4
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	4413      	add	r3, r2
 8002c40:	ed93 7a00 	vldr	s14, [r3]
                    IKC[i * MOTOR_KALMAN_NUM_STATES + k] * P_temp[k * MOTOR_KALMAN_NUM_STATES + j];
 8002c44:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002c48:	009a      	lsls	r2, r3, #2
 8002c4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002c4e:	4413      	add	r3, r2
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002c56:	443b      	add	r3, r7
 8002c58:	3bf8      	subs	r3, #248	@ 0xf8
 8002c5a:	edd3 6a00 	vldr	s13, [r3]
 8002c5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002c62:	009a      	lsls	r2, r3, #2
 8002c64:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002c68:	4413      	add	r3, r2
 8002c6a:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8002c6e:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	4413      	add	r3, r2
 8002c76:	edd3 7a00 	vldr	s15, [r3]
 8002c7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
                filter->P[i * MOTOR_KALMAN_NUM_STATES + j] +=
 8002c7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002c82:	009a      	lsls	r2, r3, #2
 8002c84:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002c88:	4413      	add	r3, r2
 8002c8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c8e:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8002c92:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8002c96:	6812      	ldr	r2, [r2, #0]
 8002c98:	3304      	adds	r3, #4
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	4413      	add	r3, r2
 8002c9e:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 8002ca2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002cac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002cb0:	2b03      	cmp	r3, #3
 8002cb2:	ddb7      	ble.n	8002c24 <MotorKalman_Update+0x4ec>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002cb4:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002cb8:	3301      	adds	r3, #1
 8002cba:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002cbe:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002cc2:	2b03      	cmp	r3, #3
 8002cc4:	dd99      	ble.n	8002bfa <MotorKalman_Update+0x4c2>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002cc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002cca:	3301      	adds	r3, #1
 8002ccc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002cd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002cd4:	2b03      	cmp	r3, #3
 8002cd6:	dd8c      	ble.n	8002bf2 <MotorKalman_Update+0x4ba>
            }
        }
    }

    // Update state estimates for easy access
    filter->position = filter->X[0];
 8002cd8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002cdc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002ce8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f8c3 235c 	str.w	r2, [r3, #860]	@ 0x35c
    filter->velocity = filter->X[1];
 8002cf2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002cf6:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	685a      	ldr	r2, [r3, #4]
 8002cfe:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002d02:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f8c3 2360 	str.w	r2, [r3, #864]	@ 0x360
    filter->load_torque = filter->X[2];
 8002d0c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002d10:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	689a      	ldr	r2, [r3, #8]
 8002d18:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002d1c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f8c3 2364 	str.w	r2, [r3, #868]	@ 0x364
    filter->current = filter->X[3];
 8002d26:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002d2a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	68da      	ldr	r2, [r3, #12]
 8002d32:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002d36:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f8c3 2368 	str.w	r2, [r3, #872]	@ 0x368

    // Update CMSIS DSP matrices for next time
    arm_mat_init_f32(&filter->X_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->X);
 8002d40:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002d44:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f503 70d2 	add.w	r0, r3, #420	@ 0x1a4
 8002d4e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002d52:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	2201      	movs	r2, #1
 8002d5a:	2104      	movs	r1, #4
 8002d5c:	f00d fa3f 	bl	80101de <arm_mat_init_f32>
    arm_mat_init_f32(&filter->P_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->P);
 8002d60:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002d64:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f503 70d6 	add.w	r0, r3, #428	@ 0x1ac
 8002d6e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002d72:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	3310      	adds	r3, #16
 8002d7a:	2204      	movs	r2, #4
 8002d7c:	2104      	movs	r1, #4
 8002d7e:	f00d fa2e 	bl	80101de <arm_mat_init_f32>
}
 8002d82:	bf00      	nop
 8002d84:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	00000000 	.word	0x00000000

08002d90 <MotorKalman_Estimate>:

float MotorKalman_Estimate(MotorKalman* filter, float32_t voltage_input, float32_t position) {
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b084      	sub	sp, #16
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	ed87 0a02 	vstr	s0, [r7, #8]
 8002d9c:	edc7 0a01 	vstr	s1, [r7, #4]
    // Execute the predict and update steps
    MotorKalman_Predict(filter, voltage_input);
 8002da0:	ed97 0a02 	vldr	s0, [r7, #8]
 8002da4:	68f8      	ldr	r0, [r7, #12]
 8002da6:	f7ff fafb 	bl	80023a0 <MotorKalman_Predict>
    MotorKalman_Update(filter, position);
 8002daa:	ed97 0a01 	vldr	s0, [r7, #4]
 8002dae:	68f8      	ldr	r0, [r7, #12]
 8002db0:	f7ff fcc2 	bl	8002738 <MotorKalman_Update>

    return filter->velocity;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	f8d3 3360 	ldr.w	r3, [r3, #864]	@ 0x360
 8002dba:	ee07 3a90 	vmov	s15, r3
}
 8002dbe:	eeb0 0a67 	vmov.f32	s0, s15
 8002dc2:	3710      	adds	r7, #16
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}

08002dc8 <matrix_copy>:

#include "MotorMatrixGenerator.h"
#include <math.h>
#include <string.h>

static void matrix_copy(float32_t *src, float32_t *dst, int size) {
 8002dc8:	b480      	push	{r7}
 8002dca:	b087      	sub	sp, #28
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	60b9      	str	r1, [r7, #8]
 8002dd2:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < size; i++) {
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	617b      	str	r3, [r7, #20]
 8002dd8:	e00c      	b.n	8002df4 <matrix_copy+0x2c>
        dst[i] = src[i];
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	68fa      	ldr	r2, [r7, #12]
 8002de0:	441a      	add	r2, r3
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	68b9      	ldr	r1, [r7, #8]
 8002de8:	440b      	add	r3, r1
 8002dea:	6812      	ldr	r2, [r2, #0]
 8002dec:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < size; i++) {
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	3301      	adds	r3, #1
 8002df2:	617b      	str	r3, [r7, #20]
 8002df4:	697a      	ldr	r2, [r7, #20]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	dbee      	blt.n	8002dda <matrix_copy+0x12>
    }
}
 8002dfc:	bf00      	nop
 8002dfe:	bf00      	nop
 8002e00:	371c      	adds	r7, #28
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr
	...

08002e0c <discretize_system_with_arm>:

static void discretize_system_with_arm(float32_t *A_c, float32_t *B_c, float32_t dt,
                                      float32_t *A_d, float32_t *B_d) {
 8002e0c:	b590      	push	{r4, r7, lr}
 8002e0e:	f5ad 7d2f 	sub.w	sp, sp, #700	@ 0x2bc
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	f507 742e 	add.w	r4, r7, #696	@ 0x2b8
 8002e18:	f5a4 7429 	sub.w	r4, r4, #676	@ 0x2a4
 8002e1c:	6020      	str	r0, [r4, #0]
 8002e1e:	f507 702e 	add.w	r0, r7, #696	@ 0x2b8
 8002e22:	f5a0 702a 	sub.w	r0, r0, #680	@ 0x2a8
 8002e26:	6001      	str	r1, [r0, #0]
 8002e28:	f507 712e 	add.w	r1, r7, #696	@ 0x2b8
 8002e2c:	f5a1 712b 	sub.w	r1, r1, #684	@ 0x2ac
 8002e30:	ed81 0a00 	vstr	s0, [r1]
 8002e34:	f507 712e 	add.w	r1, r7, #696	@ 0x2b8
 8002e38:	f5a1 712c 	sub.w	r1, r1, #688	@ 0x2b0
 8002e3c:	600a      	str	r2, [r1, #0]
 8002e3e:	f507 722e 	add.w	r2, r7, #696	@ 0x2b8
 8002e42:	f5a2 722d 	sub.w	r2, r2, #692	@ 0x2b4
 8002e46:	6013      	str	r3, [r2, #0]
    // Initialize ARM matrix instances
    arm_matrix_instance_f32 A_c_matrix, A_d_matrix, B_c_matrix, B_d_matrix;
    arm_mat_init_f32(&A_c_matrix, 4, 4, A_c);
 8002e48:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002e4c:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8002e50:	f507 7029 	add.w	r0, r7, #676	@ 0x2a4
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	2204      	movs	r2, #4
 8002e58:	2104      	movs	r1, #4
 8002e5a:	f00d f9c0 	bl	80101de <arm_mat_init_f32>
    arm_mat_init_f32(&A_d_matrix, 4, 4, A_d);
 8002e5e:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002e62:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 8002e66:	f507 7027 	add.w	r0, r7, #668	@ 0x29c
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	2204      	movs	r2, #4
 8002e6e:	2104      	movs	r1, #4
 8002e70:	f00d f9b5 	bl	80101de <arm_mat_init_f32>
    arm_mat_init_f32(&B_c_matrix, 4, 1, B_c);
 8002e74:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002e78:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8002e7c:	f507 7025 	add.w	r0, r7, #660	@ 0x294
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	2201      	movs	r2, #1
 8002e84:	2104      	movs	r1, #4
 8002e86:	f00d f9aa 	bl	80101de <arm_mat_init_f32>
    arm_mat_init_f32(&B_d_matrix, 4, 1, B_d);
 8002e8a:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002e8e:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8002e92:	f507 7023 	add.w	r0, r7, #652	@ 0x28c
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	2201      	movs	r2, #1
 8002e9a:	2104      	movs	r1, #4
 8002e9c:	f00d f99f 	bl	80101de <arm_mat_init_f32>

    // Create identity matrix
    float32_t I_data[16] = {0};
 8002ea0:	f507 7313 	add.w	r3, r7, #588	@ 0x24c
 8002ea4:	2240      	movs	r2, #64	@ 0x40
 8002ea6:	2100      	movs	r1, #0
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f00d ff09 	bl	8010cc0 <memset>
    arm_matrix_instance_f32 I_matrix;
    arm_mat_init_f32(&I_matrix, 4, 4, I_data);
 8002eae:	f507 7313 	add.w	r3, r7, #588	@ 0x24c
 8002eb2:	f507 7011 	add.w	r0, r7, #580	@ 0x244
 8002eb6:	2204      	movs	r2, #4
 8002eb8:	2104      	movs	r1, #4
 8002eba:	f00d f990 	bl	80101de <arm_mat_init_f32>
    for (int i = 0; i < 4; i++) {
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
 8002ec4:	e011      	b.n	8002eea <discretize_system_with_arm+0xde>
        I_data[i*4 + i] = 1.0f;
 8002ec6:	f8d7 22b4 	ldr.w	r2, [r7, #692]	@ 0x2b4
 8002eca:	4613      	mov	r3, r2
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	4413      	add	r3, r2
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	f503 732e 	add.w	r3, r3, #696	@ 0x2b8
 8002ed6:	443b      	add	r3, r7
 8002ed8:	3b6c      	subs	r3, #108	@ 0x6c
 8002eda:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002ede:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 4; i++) {
 8002ee0:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
 8002eea:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 8002eee:	2b03      	cmp	r3, #3
 8002ef0:	dde9      	ble.n	8002ec6 <discretize_system_with_arm+0xba>
    }

    // Create scaled A matrix (A*dt)
    float32_t A_dt_data[16];
    arm_matrix_instance_f32 A_dt_matrix;
    arm_mat_init_f32(&A_dt_matrix, 4, 4, A_dt_data);
 8002ef2:	f507 7301 	add.w	r3, r7, #516	@ 0x204
 8002ef6:	f507 70fe 	add.w	r0, r7, #508	@ 0x1fc
 8002efa:	2204      	movs	r2, #4
 8002efc:	2104      	movs	r1, #4
 8002efe:	f00d f96e 	bl	80101de <arm_mat_init_f32>
    arm_mat_scale_f32(&A_c_matrix, dt, &A_dt_matrix);
 8002f02:	f507 71fe 	add.w	r1, r7, #508	@ 0x1fc
 8002f06:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002f0a:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8002f0e:	f507 7229 	add.w	r2, r7, #676	@ 0x2a4
 8002f12:	ed93 0a00 	vldr	s0, [r3]
 8002f16:	4610      	mov	r0, r2
 8002f18:	f00d fd6a 	bl	80109f0 <arm_mat_scale_f32>

    // Calculate A_d = exp(A*dt) using Taylor series approximation
    // Initialize A_d to identity matrix
    matrix_copy(I_data, A_d, 16);
 8002f1c:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002f20:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 8002f24:	f507 7013 	add.w	r0, r7, #588	@ 0x24c
 8002f28:	2210      	movs	r2, #16
 8002f2a:	6819      	ldr	r1, [r3, #0]
 8002f2c:	f7ff ff4c 	bl	8002dc8 <matrix_copy>

    // Calculate powers of A*dt and add them to A_d
    float32_t A_power_data[16];
    float32_t temp_data[16];
    arm_matrix_instance_f32 A_power_matrix, temp_matrix;
    arm_mat_init_f32(&A_power_matrix, 4, 4, A_power_data);
 8002f30:	f507 73de 	add.w	r3, r7, #444	@ 0x1bc
 8002f34:	f507 70ba 	add.w	r0, r7, #372	@ 0x174
 8002f38:	2204      	movs	r2, #4
 8002f3a:	2104      	movs	r1, #4
 8002f3c:	f00d f94f 	bl	80101de <arm_mat_init_f32>
    arm_mat_init_f32(&temp_matrix, 4, 4, temp_data);
 8002f40:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 8002f44:	f507 70b6 	add.w	r0, r7, #364	@ 0x16c
 8002f48:	2204      	movs	r2, #4
 8002f4a:	2104      	movs	r1, #4
 8002f4c:	f00d f947 	bl	80101de <arm_mat_init_f32>

    // First term: I + A*dt
    arm_mat_add_f32(&I_matrix, &A_dt_matrix, &A_d_matrix);
 8002f50:	f507 7227 	add.w	r2, r7, #668	@ 0x29c
 8002f54:	f507 71fe 	add.w	r1, r7, #508	@ 0x1fc
 8002f58:	f507 7311 	add.w	r3, r7, #580	@ 0x244
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f00d f903 	bl	8010168 <arm_mat_add_f32>

    // Copy A*dt to A_power for computing higher powers
    matrix_copy(A_dt_data, A_power_data, 16);
 8002f62:	f507 71de 	add.w	r1, r7, #444	@ 0x1bc
 8002f66:	f507 7301 	add.w	r3, r7, #516	@ 0x204
 8002f6a:	2210      	movs	r2, #16
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f7ff ff2b 	bl	8002dc8 <matrix_copy>

    // Compute higher order terms using Taylor series
    // A_d = I + A*dt + (A*dt)^2/2 + (A*dt)^3/6 + ...
    float32_t factorial = 1.0f;
 8002f72:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002f76:	f8c7 32b0 	str.w	r3, [r7, #688]	@ 0x2b0
    for (int term = 2; term <= 10; term++) {  // Using more terms for better accuracy
 8002f7a:	2302      	movs	r3, #2
 8002f7c:	f8c7 32ac 	str.w	r3, [r7, #684]	@ 0x2ac
 8002f80:	e03a      	b.n	8002ff8 <discretize_system_with_arm+0x1ec>
        factorial *= term;
 8002f82:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 8002f86:	ee07 3a90 	vmov	s15, r3
 8002f8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f8e:	ed97 7aac 	vldr	s14, [r7, #688]	@ 0x2b0
 8002f92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f96:	edc7 7aac 	vstr	s15, [r7, #688]	@ 0x2b0

        // Compute next power: A_power = A_power * A_dt
        arm_mat_mult_f32(&A_power_matrix, &A_dt_matrix, &temp_matrix);
 8002f9a:	f507 72b6 	add.w	r2, r7, #364	@ 0x16c
 8002f9e:	f507 71fe 	add.w	r1, r7, #508	@ 0x1fc
 8002fa2:	f507 73ba 	add.w	r3, r7, #372	@ 0x174
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f00d fca8 	bl	80108fc <arm_mat_mult_f32>
        matrix_copy(temp_data, A_power_data, 16);
 8002fac:	f507 71de 	add.w	r1, r7, #444	@ 0x1bc
 8002fb0:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 8002fb4:	2210      	movs	r2, #16
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f7ff ff06 	bl	8002dc8 <matrix_copy>

        // Scale by 1/factorial
        arm_mat_scale_f32(&A_power_matrix, 1.0f/factorial, &temp_matrix);
 8002fbc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002fc0:	edd7 7aac 	vldr	s15, [r7, #688]	@ 0x2b0
 8002fc4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002fc8:	f507 72b6 	add.w	r2, r7, #364	@ 0x16c
 8002fcc:	f507 73ba 	add.w	r3, r7, #372	@ 0x174
 8002fd0:	4611      	mov	r1, r2
 8002fd2:	eeb0 0a47 	vmov.f32	s0, s14
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f00d fd0a 	bl	80109f0 <arm_mat_scale_f32>

        // Add to A_d
        arm_mat_add_f32(&A_d_matrix, &temp_matrix, &A_d_matrix);
 8002fdc:	f507 7227 	add.w	r2, r7, #668	@ 0x29c
 8002fe0:	f507 71b6 	add.w	r1, r7, #364	@ 0x16c
 8002fe4:	f507 7327 	add.w	r3, r7, #668	@ 0x29c
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f00d f8bd 	bl	8010168 <arm_mat_add_f32>
    for (int term = 2; term <= 10; term++) {  // Using more terms for better accuracy
 8002fee:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	f8c7 32ac 	str.w	r3, [r7, #684]	@ 0x2ac
 8002ff8:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 8002ffc:	2b0a      	cmp	r3, #10
 8002ffe:	ddc0      	ble.n	8002f82 <discretize_system_with_arm+0x176>

    // We can approximate this integral using the Taylor series for e^(A*s):
    // B_d = [dt*I + (A*dt^2)/2 + (A^2*dt^3)/6 + (A^3*dt^4)/24 + ...] * B_c

    // First term: dt*I * B_c = dt * B_c
    arm_mat_scale_f32(&B_c_matrix, dt, &B_d_matrix);
 8003000:	f507 7123 	add.w	r1, r7, #652	@ 0x28c
 8003004:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003008:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800300c:	f507 7225 	add.w	r2, r7, #660	@ 0x294
 8003010:	ed93 0a00 	vldr	s0, [r3]
 8003014:	4610      	mov	r0, r2
 8003016:	f00d fceb 	bl	80109f0 <arm_mat_scale_f32>

    // Second term: (A*dt^2)/2 * B_c
    float32_t AB_c[4] = {0};
 800301a:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800301e:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8003022:	461a      	mov	r2, r3
 8003024:	2300      	movs	r3, #0
 8003026:	6013      	str	r3, [r2, #0]
 8003028:	6053      	str	r3, [r2, #4]
 800302a:	6093      	str	r3, [r2, #8]
 800302c:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 AB_c_matrix;
    arm_mat_init_f32(&AB_c_matrix, 4, 1, AB_c);
 800302e:	f507 73ae 	add.w	r3, r7, #348	@ 0x15c
 8003032:	f507 70aa 	add.w	r0, r7, #340	@ 0x154
 8003036:	2201      	movs	r2, #1
 8003038:	2104      	movs	r1, #4
 800303a:	f00d f8d0 	bl	80101de <arm_mat_init_f32>
    arm_mat_mult_f32(&A_c_matrix, &B_c_matrix, &AB_c_matrix);
 800303e:	f507 72aa 	add.w	r2, r7, #340	@ 0x154
 8003042:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 8003046:	f507 7329 	add.w	r3, r7, #676	@ 0x2a4
 800304a:	4618      	mov	r0, r3
 800304c:	f00d fc56 	bl	80108fc <arm_mat_mult_f32>

    float32_t temp_B[4];
    arm_matrix_instance_f32 temp_B_matrix;
    arm_mat_init_f32(&temp_B_matrix, 4, 1, temp_B);
 8003050:	f507 73a2 	add.w	r3, r7, #324	@ 0x144
 8003054:	f507 709e 	add.w	r0, r7, #316	@ 0x13c
 8003058:	2201      	movs	r2, #1
 800305a:	2104      	movs	r1, #4
 800305c:	f00d f8bf 	bl	80101de <arm_mat_init_f32>
    arm_mat_scale_f32(&AB_c_matrix, dt*dt/2.0f, &temp_B_matrix);
 8003060:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003064:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003068:	edd3 7a00 	vldr	s15, [r3]
 800306c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003070:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8003074:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003078:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 800307c:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 8003080:	4611      	mov	r1, r2
 8003082:	eeb0 0a47 	vmov.f32	s0, s14
 8003086:	4618      	mov	r0, r3
 8003088:	f00d fcb2 	bl	80109f0 <arm_mat_scale_f32>

    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 800308c:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 8003090:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 8003094:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 8003098:	4618      	mov	r0, r3
 800309a:	f00d f865 	bl	8010168 <arm_mat_add_f32>

    // Third term: (A^2*dt^3)/6 * B_c
    float32_t A2_data[16] = {0};
 800309e:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80030a2:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80030a6:	4618      	mov	r0, r3
 80030a8:	2340      	movs	r3, #64	@ 0x40
 80030aa:	461a      	mov	r2, r3
 80030ac:	2100      	movs	r1, #0
 80030ae:	f00d fe07 	bl	8010cc0 <memset>
    arm_matrix_instance_f32 A2_matrix;
    arm_mat_init_f32(&A2_matrix, 4, 4, A2_data);
 80030b2:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 80030b6:	f107 00f4 	add.w	r0, r7, #244	@ 0xf4
 80030ba:	2204      	movs	r2, #4
 80030bc:	2104      	movs	r1, #4
 80030be:	f00d f88e 	bl	80101de <arm_mat_init_f32>
    arm_mat_mult_f32(&A_c_matrix, &A_c_matrix, &A2_matrix);
 80030c2:	f107 02f4 	add.w	r2, r7, #244	@ 0xf4
 80030c6:	f507 7129 	add.w	r1, r7, #676	@ 0x2a4
 80030ca:	f507 7329 	add.w	r3, r7, #676	@ 0x2a4
 80030ce:	4618      	mov	r0, r3
 80030d0:	f00d fc14 	bl	80108fc <arm_mat_mult_f32>

    float32_t A2B_c[4] = {0};
 80030d4:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80030d8:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80030dc:	461a      	mov	r2, r3
 80030de:	2300      	movs	r3, #0
 80030e0:	6013      	str	r3, [r2, #0]
 80030e2:	6053      	str	r3, [r2, #4]
 80030e4:	6093      	str	r3, [r2, #8]
 80030e6:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 A2B_c_matrix;
    arm_mat_init_f32(&A2B_c_matrix, 4, 1, A2B_c);
 80030e8:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80030ec:	f107 00dc 	add.w	r0, r7, #220	@ 0xdc
 80030f0:	2201      	movs	r2, #1
 80030f2:	2104      	movs	r1, #4
 80030f4:	f00d f873 	bl	80101de <arm_mat_init_f32>
    arm_mat_mult_f32(&A2_matrix, &B_c_matrix, &A2B_c_matrix);
 80030f8:	f107 02dc 	add.w	r2, r7, #220	@ 0xdc
 80030fc:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 8003100:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8003104:	4618      	mov	r0, r3
 8003106:	f00d fbf9 	bl	80108fc <arm_mat_mult_f32>

    arm_mat_scale_f32(&A2B_c_matrix, dt*dt*dt/6.0f, &temp_B_matrix);
 800310a:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800310e:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003112:	edd3 7a00 	vldr	s15, [r3]
 8003116:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800311a:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800311e:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003122:	edd3 7a00 	vldr	s15, [r3]
 8003126:	ee67 7a27 	vmul.f32	s15, s14, s15
 800312a:	eef1 6a08 	vmov.f32	s13, #24	@ 0x40c00000  6.0
 800312e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003132:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 8003136:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800313a:	4611      	mov	r1, r2
 800313c:	eeb0 0a47 	vmov.f32	s0, s14
 8003140:	4618      	mov	r0, r3
 8003142:	f00d fc55 	bl	80109f0 <arm_mat_scale_f32>
    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 8003146:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 800314a:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 800314e:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 8003152:	4618      	mov	r0, r3
 8003154:	f00d f808 	bl	8010168 <arm_mat_add_f32>

    // Fourth term: (A^3*dt^4)/24 * B_c
    float32_t A3_data[16] = {0};
 8003158:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800315c:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8003160:	4618      	mov	r0, r3
 8003162:	2340      	movs	r3, #64	@ 0x40
 8003164:	461a      	mov	r2, r3
 8003166:	2100      	movs	r1, #0
 8003168:	f00d fdaa 	bl	8010cc0 <memset>
    arm_matrix_instance_f32 A3_matrix;
    arm_mat_init_f32(&A3_matrix, 4, 4, A3_data);
 800316c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003170:	f107 0094 	add.w	r0, r7, #148	@ 0x94
 8003174:	2204      	movs	r2, #4
 8003176:	2104      	movs	r1, #4
 8003178:	f00d f831 	bl	80101de <arm_mat_init_f32>
    arm_mat_mult_f32(&A2_matrix, &A_c_matrix, &A3_matrix);
 800317c:	f107 0294 	add.w	r2, r7, #148	@ 0x94
 8003180:	f507 7129 	add.w	r1, r7, #676	@ 0x2a4
 8003184:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8003188:	4618      	mov	r0, r3
 800318a:	f00d fbb7 	bl	80108fc <arm_mat_mult_f32>

    float32_t A3B_c[4] = {0};
 800318e:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003192:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 8003196:	461a      	mov	r2, r3
 8003198:	2300      	movs	r3, #0
 800319a:	6013      	str	r3, [r2, #0]
 800319c:	6053      	str	r3, [r2, #4]
 800319e:	6093      	str	r3, [r2, #8]
 80031a0:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 A3B_c_matrix;
    arm_mat_init_f32(&A3B_c_matrix, 4, 1, A3B_c);
 80031a2:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80031a6:	f107 007c 	add.w	r0, r7, #124	@ 0x7c
 80031aa:	2201      	movs	r2, #1
 80031ac:	2104      	movs	r1, #4
 80031ae:	f00d f816 	bl	80101de <arm_mat_init_f32>
    arm_mat_mult_f32(&A3_matrix, &B_c_matrix, &A3B_c_matrix);
 80031b2:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 80031b6:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 80031ba:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80031be:	4618      	mov	r0, r3
 80031c0:	f00d fb9c 	bl	80108fc <arm_mat_mult_f32>

    arm_mat_scale_f32(&A3B_c_matrix, dt*dt*dt*dt/24.0f, &temp_B_matrix);
 80031c4:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80031c8:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80031cc:	edd3 7a00 	vldr	s15, [r3]
 80031d0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80031d4:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80031d8:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80031dc:	edd3 7a00 	vldr	s15, [r3]
 80031e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80031e4:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80031e8:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80031ec:	edd3 7a00 	vldr	s15, [r3]
 80031f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031f4:	eef3 6a08 	vmov.f32	s13, #56	@ 0x41c00000  24.0
 80031f8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80031fc:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 8003200:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8003204:	4611      	mov	r1, r2
 8003206:	eeb0 0a47 	vmov.f32	s0, s14
 800320a:	4618      	mov	r0, r3
 800320c:	f00d fbf0 	bl	80109f0 <arm_mat_scale_f32>
    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 8003210:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 8003214:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 8003218:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 800321c:	4618      	mov	r0, r3
 800321e:	f00c ffa3 	bl	8010168 <arm_mat_add_f32>

    // Fifth term: (A^4*dt^5)/120 * B_c
    float32_t A4_data[16] = {0};
 8003222:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003226:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800322a:	4618      	mov	r0, r3
 800322c:	2340      	movs	r3, #64	@ 0x40
 800322e:	461a      	mov	r2, r3
 8003230:	2100      	movs	r1, #0
 8003232:	f00d fd45 	bl	8010cc0 <memset>
    arm_matrix_instance_f32 A4_matrix;
    arm_mat_init_f32(&A4_matrix, 4, 4, A4_data);
 8003236:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800323a:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 800323e:	2204      	movs	r2, #4
 8003240:	2104      	movs	r1, #4
 8003242:	f00c ffcc 	bl	80101de <arm_mat_init_f32>
    arm_mat_mult_f32(&A3_matrix, &A_c_matrix, &A4_matrix);
 8003246:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800324a:	f507 7129 	add.w	r1, r7, #676	@ 0x2a4
 800324e:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8003252:	4618      	mov	r0, r3
 8003254:	f00d fb52 	bl	80108fc <arm_mat_mult_f32>

    float32_t A4B_c[4] = {0};
 8003258:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800325c:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 8003260:	461a      	mov	r2, r3
 8003262:	2300      	movs	r3, #0
 8003264:	6013      	str	r3, [r2, #0]
 8003266:	6053      	str	r3, [r2, #4]
 8003268:	6093      	str	r3, [r2, #8]
 800326a:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 A4B_c_matrix;
    arm_mat_init_f32(&A4B_c_matrix, 4, 1, A4B_c);
 800326c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003270:	f107 001c 	add.w	r0, r7, #28
 8003274:	2201      	movs	r2, #1
 8003276:	2104      	movs	r1, #4
 8003278:	f00c ffb1 	bl	80101de <arm_mat_init_f32>
    arm_mat_mult_f32(&A4_matrix, &B_c_matrix, &A4B_c_matrix);
 800327c:	f107 021c 	add.w	r2, r7, #28
 8003280:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 8003284:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003288:	4618      	mov	r0, r3
 800328a:	f00d fb37 	bl	80108fc <arm_mat_mult_f32>

    arm_mat_scale_f32(&A4B_c_matrix, dt*dt*dt*dt*dt/120.0f, &temp_B_matrix);
 800328e:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003292:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003296:	edd3 7a00 	vldr	s15, [r3]
 800329a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800329e:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80032a2:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80032a6:	edd3 7a00 	vldr	s15, [r3]
 80032aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80032ae:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80032b2:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80032b6:	edd3 7a00 	vldr	s15, [r3]
 80032ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80032be:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80032c2:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80032c6:	edd3 7a00 	vldr	s15, [r3]
 80032ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032ce:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8003308 <discretize_system_with_arm+0x4fc>
 80032d2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80032d6:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 80032da:	f107 031c 	add.w	r3, r7, #28
 80032de:	4611      	mov	r1, r2
 80032e0:	eeb0 0a47 	vmov.f32	s0, s14
 80032e4:	4618      	mov	r0, r3
 80032e6:	f00d fb83 	bl	80109f0 <arm_mat_scale_f32>
    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 80032ea:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 80032ee:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 80032f2:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 80032f6:	4618      	mov	r0, r3
 80032f8:	f00c ff36 	bl	8010168 <arm_mat_add_f32>
}
 80032fc:	bf00      	nop
 80032fe:	f507 772f 	add.w	r7, r7, #700	@ 0x2bc
 8003302:	46bd      	mov	sp, r7
 8003304:	bd90      	pop	{r4, r7, pc}
 8003306:	bf00      	nop
 8003308:	42f00000 	.word	0x42f00000

0800330c <GenerateMotorMatrices>:

void GenerateMotorMatrices(float32_t R_a, float32_t L_a, float32_t J, float32_t b,
                          float32_t ke, float32_t kt, float32_t dt,
                          float32_t *A, float32_t *B) {
 800330c:	b580      	push	{r7, lr}
 800330e:	b09e      	sub	sp, #120	@ 0x78
 8003310:	af00      	add	r7, sp, #0
 8003312:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
 8003316:	edc7 0a08 	vstr	s1, [r7, #32]
 800331a:	ed87 1a07 	vstr	s2, [r7, #28]
 800331e:	edc7 1a06 	vstr	s3, [r7, #24]
 8003322:	ed87 2a05 	vstr	s4, [r7, #20]
 8003326:	edc7 2a04 	vstr	s5, [r7, #16]
 800332a:	ed87 3a03 	vstr	s6, [r7, #12]
 800332e:	60b8      	str	r0, [r7, #8]
 8003330:	6079      	str	r1, [r7, #4]
    // Generate continuous time matrices
    float32_t A_c[16] = {0}; // 4x4 matrix
 8003332:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003336:	2240      	movs	r2, #64	@ 0x40
 8003338:	2100      	movs	r1, #0
 800333a:	4618      	mov	r0, r3
 800333c:	f00d fcc0 	bl	8010cc0 <memset>
    float32_t B_c[4] = {0};  // 4x1 matrix
 8003340:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003344:	2200      	movs	r2, #0
 8003346:	601a      	str	r2, [r3, #0]
 8003348:	605a      	str	r2, [r3, #4]
 800334a:	609a      	str	r2, [r3, #8]
 800334c:	60da      	str	r2, [r3, #12]
    // State Transition Matrix
    // Ac = [0 1 0 0;
    //       0 -b/J -1/J kt/J;
    //       0 0 0 0;
    //       0 -ke/L 0 -R/L];
    A_c[0*4 + 1] = 1.0f;
 800334e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8003352:	63fb      	str	r3, [r7, #60]	@ 0x3c

    A_c[1*4 + 1] = -b/J;
 8003354:	edd7 7a06 	vldr	s15, [r7, #24]
 8003358:	eef1 6a67 	vneg.f32	s13, s15
 800335c:	ed97 7a07 	vldr	s14, [r7, #28]
 8003360:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003364:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    A_c[1*4 + 2] = -1.0f/J;
 8003368:	eeff 6a00 	vmov.f32	s13, #240	@ 0xbf800000 -1.0
 800336c:	ed97 7a07 	vldr	s14, [r7, #28]
 8003370:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003374:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    A_c[1*4 + 3] = kt/J;
 8003378:	edd7 6a04 	vldr	s13, [r7, #16]
 800337c:	ed97 7a07 	vldr	s14, [r7, #28]
 8003380:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003384:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54

    // Third row all zeros (for load torque state)

    A_c[3*4 + 1] = -ke/L_a;
 8003388:	edd7 7a05 	vldr	s15, [r7, #20]
 800338c:	eef1 6a67 	vneg.f32	s13, s15
 8003390:	ed97 7a08 	vldr	s14, [r7, #32]
 8003394:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003398:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
    A_c[3*4 + 3] = -R_a/L_a;
 800339c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80033a0:	eef1 6a67 	vneg.f32	s13, s15
 80033a4:	ed97 7a08 	vldr	s14, [r7, #32]
 80033a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80033ac:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74

    // Input Matrix
    // Bc = [0; 0; 0; 1/L];
    B_c[3] = 1.0f/L_a;
 80033b0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80033b4:	ed97 7a08 	vldr	s14, [r7, #32]
 80033b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80033bc:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

    // Discretize the system using ARM CMSIS DSP
    discretize_system_with_arm(A_c, B_c, dt, A, B);
 80033c0:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80033c4:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	68ba      	ldr	r2, [r7, #8]
 80033cc:	ed97 0a03 	vldr	s0, [r7, #12]
 80033d0:	f7ff fd1c 	bl	8002e0c <discretize_system_with_arm>
}
 80033d4:	bf00      	nop
 80033d6:	3778      	adds	r7, #120	@ 0x78
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}

080033dc <PWM_init>:
 *      Author: beamk
 */

#include "PWM.h"

void PWM_init(PWM* pwm, TIM_HandleTypeDef* htimx, uint16_t tim_chx){
 80033dc:	b580      	push	{r7, lr}
 80033de:	b084      	sub	sp, #16
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	60f8      	str	r0, [r7, #12]
 80033e4:	60b9      	str	r1, [r7, #8]
 80033e6:	4613      	mov	r3, r2
 80033e8:	80fb      	strh	r3, [r7, #6]
	pwm->CPU_FREQ = 170e6;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	4a0b      	ldr	r2, [pc, #44]	@ (800341c <PWM_init+0x40>)
 80033ee:	611a      	str	r2, [r3, #16]
	pwm->htimx = htimx;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	68ba      	ldr	r2, [r7, #8]
 80033f4:	601a      	str	r2, [r3, #0]
	pwm->tim_chx = tim_chx;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	88fa      	ldrh	r2, [r7, #6]
 80033fa:	809a      	strh	r2, [r3, #4]
	pwm->OC = 0;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2200      	movs	r2, #0
 8003400:	615a      	str	r2, [r3, #20]
	HAL_TIM_Base_Start(htimx);
 8003402:	68b8      	ldr	r0, [r7, #8]
 8003404:	f008 fffc 	bl	800c400 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(htimx, tim_chx);
 8003408:	88fb      	ldrh	r3, [r7, #6]
 800340a:	4619      	mov	r1, r3
 800340c:	68b8      	ldr	r0, [r7, #8]
 800340e:	f009 f943 	bl	800c698 <HAL_TIM_PWM_Start>
}
 8003412:	bf00      	nop
 8003414:	3710      	adds	r7, #16
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	0a21fe80 	.word	0x0a21fe80

08003420 <PWM_write_duty>:

void PWM_write_duty(PWM* pwm, float freq, float percent_duty){
 8003420:	b5b0      	push	{r4, r5, r7, lr}
 8003422:	b084      	sub	sp, #16
 8003424:	af00      	add	r7, sp, #0
 8003426:	60f8      	str	r0, [r7, #12]
 8003428:	ed87 0a02 	vstr	s0, [r7, #8]
 800342c:	edc7 0a01 	vstr	s1, [r7, #4]
    if (freq == 0) {
 8003430:	edd7 7a02 	vldr	s15, [r7, #8]
 8003434:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800343c:	d137      	bne.n	80034ae <PWM_write_duty+0x8e>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	889b      	ldrh	r3, [r3, #4]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d105      	bne.n	8003452 <PWM_write_duty+0x32>
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	2200      	movs	r2, #0
 800344e:	635a      	str	r2, [r3, #52]	@ 0x34
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(percent_duty) / 100.0);
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}
 8003450:	e0e1      	b.n	8003616 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	889b      	ldrh	r3, [r3, #4]
 8003456:	2b04      	cmp	r3, #4
 8003458:	d105      	bne.n	8003466 <PWM_write_duty+0x46>
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	2300      	movs	r3, #0
 8003462:	6393      	str	r3, [r2, #56]	@ 0x38
 8003464:	e0d7      	b.n	8003616 <PWM_write_duty+0x1f6>
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	889b      	ldrh	r3, [r3, #4]
 800346a:	2b08      	cmp	r3, #8
 800346c:	d105      	bne.n	800347a <PWM_write_duty+0x5a>
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	2300      	movs	r3, #0
 8003476:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8003478:	e0cd      	b.n	8003616 <PWM_write_duty+0x1f6>
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	889b      	ldrh	r3, [r3, #4]
 800347e:	2b0c      	cmp	r3, #12
 8003480:	d105      	bne.n	800348e <PWM_write_duty+0x6e>
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	2300      	movs	r3, #0
 800348a:	6413      	str	r3, [r2, #64]	@ 0x40
 800348c:	e0c3      	b.n	8003616 <PWM_write_duty+0x1f6>
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	889b      	ldrh	r3, [r3, #4]
 8003492:	2b10      	cmp	r3, #16
 8003494:	d105      	bne.n	80034a2 <PWM_write_duty+0x82>
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	2300      	movs	r3, #0
 800349e:	6493      	str	r3, [r2, #72]	@ 0x48
 80034a0:	e0b9      	b.n	8003616 <PWM_write_duty+0x1f6>
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	2300      	movs	r3, #0
 80034aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80034ac:	e0b3      	b.n	8003616 <PWM_write_duty+0x1f6>
    	pwm->period_cyc = (uint32_t) (pwm->CPU_FREQ / freq);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	691b      	ldr	r3, [r3, #16]
 80034b2:	ee07 3a90 	vmov	s15, r3
 80034b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034ba:	ed97 7a02 	vldr	s14, [r7, #8]
 80034be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80034c6:	ee17 2a90 	vmov	r2, s15
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	609a      	str	r2, [r3, #8]
    	pwm->prescaler = (uint16_t) ((pwm->period_cyc + 65535 - 1) / 65535) - 1; // Subtracting 1 since prescaler is zero-based
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 80034d6:	33fe      	adds	r3, #254	@ 0xfe
 80034d8:	4a51      	ldr	r2, [pc, #324]	@ (8003620 <PWM_write_duty+0x200>)
 80034da:	fba2 2303 	umull	r2, r3, r2, r3
 80034de:	0bdb      	lsrs	r3, r3, #15
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	3b01      	subs	r3, #1
 80034e4:	b29a      	uxth	r2, r3
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	819a      	strh	r2, [r3, #12]
    	pwm->overflow = (uint16_t) ((pwm->CPU_FREQ / (float)(pwm->prescaler + 1) / freq) - 1);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	691b      	ldr	r3, [r3, #16]
 80034ee:	ee07 3a90 	vmov	s15, r3
 80034f2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	899b      	ldrh	r3, [r3, #12]
 80034fa:	3301      	adds	r3, #1
 80034fc:	ee07 3a90 	vmov	s15, r3
 8003500:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003504:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003508:	ed97 7a02 	vldr	s14, [r7, #8]
 800350c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003510:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003514:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003518:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800351c:	ee17 3a90 	vmov	r3, s15
 8003520:	b29a      	uxth	r2, r3
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	81da      	strh	r2, [r3, #14]
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(percent_duty) / 100.0);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	89db      	ldrh	r3, [r3, #14]
 800352a:	4618      	mov	r0, r3
 800352c:	f7fc ffc6 	bl	80004bc <__aeabi_i2d>
 8003530:	4604      	mov	r4, r0
 8003532:	460d      	mov	r5, r1
 8003534:	edd7 7a01 	vldr	s15, [r7, #4]
 8003538:	eef0 7ae7 	vabs.f32	s15, s15
 800353c:	ee17 0a90 	vmov	r0, s15
 8003540:	f7fc ffce 	bl	80004e0 <__aeabi_f2d>
 8003544:	4602      	mov	r2, r0
 8003546:	460b      	mov	r3, r1
 8003548:	4620      	mov	r0, r4
 800354a:	4629      	mov	r1, r5
 800354c:	f7fd f820 	bl	8000590 <__aeabi_dmul>
 8003550:	4602      	mov	r2, r0
 8003552:	460b      	mov	r3, r1
 8003554:	4610      	mov	r0, r2
 8003556:	4619      	mov	r1, r3
 8003558:	f04f 0200 	mov.w	r2, #0
 800355c:	4b31      	ldr	r3, [pc, #196]	@ (8003624 <PWM_write_duty+0x204>)
 800355e:	f7fd f941 	bl	80007e4 <__aeabi_ddiv>
 8003562:	4602      	mov	r2, r0
 8003564:	460b      	mov	r3, r1
 8003566:	4610      	mov	r0, r2
 8003568:	4619      	mov	r1, r3
 800356a:	f7fd fad3 	bl	8000b14 <__aeabi_d2uiz>
 800356e:	4603      	mov	r3, r0
 8003570:	b29b      	uxth	r3, r3
 8003572:	461a      	mov	r2, r3
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	615a      	str	r2, [r3, #20]
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	899a      	ldrh	r2, [r3, #12]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	629a      	str	r2, [r3, #40]	@ 0x28
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	89da      	ldrh	r2, [r3, #14]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	89da      	ldrh	r2, [r3, #14]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	60da      	str	r2, [r3, #12]
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	889b      	ldrh	r3, [r3, #4]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d106      	bne.n	80035b0 <PWM_write_duty+0x190>
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	68fa      	ldr	r2, [r7, #12]
 80035aa:	6952      	ldr	r2, [r2, #20]
 80035ac:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80035ae:	e032      	b.n	8003616 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	889b      	ldrh	r3, [r3, #4]
 80035b4:	2b04      	cmp	r3, #4
 80035b6:	d106      	bne.n	80035c6 <PWM_write_duty+0x1a6>
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	695b      	ldr	r3, [r3, #20]
 80035c2:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80035c4:	e027      	b.n	8003616 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	889b      	ldrh	r3, [r3, #4]
 80035ca:	2b08      	cmp	r3, #8
 80035cc:	d106      	bne.n	80035dc <PWM_write_duty+0x1bc>
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	695b      	ldr	r3, [r3, #20]
 80035d8:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80035da:	e01c      	b.n	8003616 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	889b      	ldrh	r3, [r3, #4]
 80035e0:	2b0c      	cmp	r3, #12
 80035e2:	d106      	bne.n	80035f2 <PWM_write_duty+0x1d2>
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	695b      	ldr	r3, [r3, #20]
 80035ee:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80035f0:	e011      	b.n	8003616 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	889b      	ldrh	r3, [r3, #4]
 80035f6:	2b10      	cmp	r3, #16
 80035f8:	d106      	bne.n	8003608 <PWM_write_duty+0x1e8>
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	695b      	ldr	r3, [r3, #20]
 8003604:	6493      	str	r3, [r2, #72]	@ 0x48
}
 8003606:	e006      	b.n	8003616 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	695b      	ldr	r3, [r3, #20]
 8003612:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8003614:	e7ff      	b.n	8003616 <PWM_write_duty+0x1f6>
 8003616:	bf00      	nop
 8003618:	3710      	adds	r7, #16
 800361a:	46bd      	mov	sp, r7
 800361c:	bdb0      	pop	{r4, r5, r7, pc}
 800361e:	bf00      	nop
 8003620:	80008001 	.word	0x80008001
 8003624:	40590000 	.word	0x40590000

08003628 <PWM_write_range>:

void PWM_write_range(PWM* pwm, float freq, float duty){
 8003628:	b5b0      	push	{r4, r5, r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	60f8      	str	r0, [r7, #12]
 8003630:	ed87 0a02 	vstr	s0, [r7, #8]
 8003634:	edc7 0a01 	vstr	s1, [r7, #4]
    if (freq == 0) {
 8003638:	edd7 7a02 	vldr	s15, [r7, #8]
 800363c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003644:	d137      	bne.n	80036b6 <PWM_write_range+0x8e>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	889b      	ldrh	r3, [r3, #4]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d105      	bne.n	800365a <PWM_write_range+0x32>
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	2200      	movs	r2, #0
 8003656:	635a      	str	r2, [r3, #52]	@ 0x34
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(duty) / 65535.0);
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}
 8003658:	e0e1      	b.n	800381e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	889b      	ldrh	r3, [r3, #4]
 800365e:	2b04      	cmp	r3, #4
 8003660:	d105      	bne.n	800366e <PWM_write_range+0x46>
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	2300      	movs	r3, #0
 800366a:	6393      	str	r3, [r2, #56]	@ 0x38
 800366c:	e0d7      	b.n	800381e <PWM_write_range+0x1f6>
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	889b      	ldrh	r3, [r3, #4]
 8003672:	2b08      	cmp	r3, #8
 8003674:	d105      	bne.n	8003682 <PWM_write_range+0x5a>
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	2300      	movs	r3, #0
 800367e:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8003680:	e0cd      	b.n	800381e <PWM_write_range+0x1f6>
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	889b      	ldrh	r3, [r3, #4]
 8003686:	2b0c      	cmp	r3, #12
 8003688:	d105      	bne.n	8003696 <PWM_write_range+0x6e>
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	2300      	movs	r3, #0
 8003692:	6413      	str	r3, [r2, #64]	@ 0x40
 8003694:	e0c3      	b.n	800381e <PWM_write_range+0x1f6>
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	889b      	ldrh	r3, [r3, #4]
 800369a:	2b10      	cmp	r3, #16
 800369c:	d105      	bne.n	80036aa <PWM_write_range+0x82>
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	2300      	movs	r3, #0
 80036a6:	6493      	str	r3, [r2, #72]	@ 0x48
 80036a8:	e0b9      	b.n	800381e <PWM_write_range+0x1f6>
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	2300      	movs	r3, #0
 80036b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80036b4:	e0b3      	b.n	800381e <PWM_write_range+0x1f6>
    	pwm->period_cyc = (uint32_t) (pwm->CPU_FREQ / freq);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	691b      	ldr	r3, [r3, #16]
 80036ba:	ee07 3a90 	vmov	s15, r3
 80036be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036c2:	ed97 7a02 	vldr	s14, [r7, #8]
 80036c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80036ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036ce:	ee17 2a90 	vmov	r2, s15
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	609a      	str	r2, [r3, #8]
    	pwm->prescaler = (uint16_t) ((pwm->period_cyc + 65535 - 1) / 65535) - 1; // Subtracting 1 since prescaler is zero-based
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 80036de:	33fe      	adds	r3, #254	@ 0xfe
 80036e0:	4a53      	ldr	r2, [pc, #332]	@ (8003830 <PWM_write_range+0x208>)
 80036e2:	fba2 2303 	umull	r2, r3, r2, r3
 80036e6:	0bdb      	lsrs	r3, r3, #15
 80036e8:	b29b      	uxth	r3, r3
 80036ea:	3b01      	subs	r3, #1
 80036ec:	b29a      	uxth	r2, r3
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	819a      	strh	r2, [r3, #12]
    	pwm->overflow = (uint16_t) ((pwm->CPU_FREQ / (float)(pwm->prescaler + 1) / freq) - 1);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	691b      	ldr	r3, [r3, #16]
 80036f6:	ee07 3a90 	vmov	s15, r3
 80036fa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	899b      	ldrh	r3, [r3, #12]
 8003702:	3301      	adds	r3, #1
 8003704:	ee07 3a90 	vmov	s15, r3
 8003708:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800370c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003710:	ed97 7a02 	vldr	s14, [r7, #8]
 8003714:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003718:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800371c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003720:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003724:	ee17 3a90 	vmov	r3, s15
 8003728:	b29a      	uxth	r2, r3
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	81da      	strh	r2, [r3, #14]
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(duty) / 65535.0);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	89db      	ldrh	r3, [r3, #14]
 8003732:	4618      	mov	r0, r3
 8003734:	f7fc fec2 	bl	80004bc <__aeabi_i2d>
 8003738:	4604      	mov	r4, r0
 800373a:	460d      	mov	r5, r1
 800373c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003740:	eef0 7ae7 	vabs.f32	s15, s15
 8003744:	ee17 0a90 	vmov	r0, s15
 8003748:	f7fc feca 	bl	80004e0 <__aeabi_f2d>
 800374c:	4602      	mov	r2, r0
 800374e:	460b      	mov	r3, r1
 8003750:	4620      	mov	r0, r4
 8003752:	4629      	mov	r1, r5
 8003754:	f7fc ff1c 	bl	8000590 <__aeabi_dmul>
 8003758:	4602      	mov	r2, r0
 800375a:	460b      	mov	r3, r1
 800375c:	4610      	mov	r0, r2
 800375e:	4619      	mov	r1, r3
 8003760:	a331      	add	r3, pc, #196	@ (adr r3, 8003828 <PWM_write_range+0x200>)
 8003762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003766:	f7fd f83d 	bl	80007e4 <__aeabi_ddiv>
 800376a:	4602      	mov	r2, r0
 800376c:	460b      	mov	r3, r1
 800376e:	4610      	mov	r0, r2
 8003770:	4619      	mov	r1, r3
 8003772:	f7fd f9cf 	bl	8000b14 <__aeabi_d2uiz>
 8003776:	4603      	mov	r3, r0
 8003778:	b29b      	uxth	r3, r3
 800377a:	461a      	mov	r2, r3
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	615a      	str	r2, [r3, #20]
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	899a      	ldrh	r2, [r3, #12]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	629a      	str	r2, [r3, #40]	@ 0x28
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	89da      	ldrh	r2, [r3, #14]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	89da      	ldrh	r2, [r3, #14]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	60da      	str	r2, [r3, #12]
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	889b      	ldrh	r3, [r3, #4]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d106      	bne.n	80037b8 <PWM_write_range+0x190>
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	68fa      	ldr	r2, [r7, #12]
 80037b2:	6952      	ldr	r2, [r2, #20]
 80037b4:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80037b6:	e032      	b.n	800381e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	889b      	ldrh	r3, [r3, #4]
 80037bc:	2b04      	cmp	r3, #4
 80037be:	d106      	bne.n	80037ce <PWM_write_range+0x1a6>
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	695b      	ldr	r3, [r3, #20]
 80037ca:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80037cc:	e027      	b.n	800381e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	889b      	ldrh	r3, [r3, #4]
 80037d2:	2b08      	cmp	r3, #8
 80037d4:	d106      	bne.n	80037e4 <PWM_write_range+0x1bc>
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	695b      	ldr	r3, [r3, #20]
 80037e0:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80037e2:	e01c      	b.n	800381e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	889b      	ldrh	r3, [r3, #4]
 80037e8:	2b0c      	cmp	r3, #12
 80037ea:	d106      	bne.n	80037fa <PWM_write_range+0x1d2>
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	695b      	ldr	r3, [r3, #20]
 80037f6:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80037f8:	e011      	b.n	800381e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	889b      	ldrh	r3, [r3, #4]
 80037fe:	2b10      	cmp	r3, #16
 8003800:	d106      	bne.n	8003810 <PWM_write_range+0x1e8>
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	695b      	ldr	r3, [r3, #20]
 800380c:	6493      	str	r3, [r2, #72]	@ 0x48
}
 800380e:	e006      	b.n	800381e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	695b      	ldr	r3, [r3, #20]
 800381a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800381c:	e7ff      	b.n	800381e <PWM_write_range+0x1f6>
 800381e:	bf00      	nop
 8003820:	3710      	adds	r7, #16
 8003822:	46bd      	mov	sp, r7
 8003824:	bdb0      	pop	{r4, r5, r7, pc}
 8003826:	bf00      	nop
 8003828:	00000000 	.word	0x00000000
 800382c:	40efffe0 	.word	0x40efffe0
 8003830:	80008001 	.word	0x80008001

08003834 <QEI_init>:
* Author: pboon
*/

#include "QEI.h"

void QEI_init(QEI *qei, TIM_HandleTypeDef *htimx, int32_t ppr, uint32_t freq, float ratio, float pulley_diameter) {
 8003834:	b580      	push	{r7, lr}
 8003836:	b086      	sub	sp, #24
 8003838:	af00      	add	r7, sp, #0
 800383a:	6178      	str	r0, [r7, #20]
 800383c:	6139      	str	r1, [r7, #16]
 800383e:	60fa      	str	r2, [r7, #12]
 8003840:	60bb      	str	r3, [r7, #8]
 8003842:	ed87 0a01 	vstr	s0, [r7, #4]
 8003846:	edc7 0a00 	vstr	s1, [r7]
    qei->htimx = htimx;
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	693a      	ldr	r2, [r7, #16]
 800384e:	619a      	str	r2, [r3, #24]
    qei->ppr = ppr;
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	68fa      	ldr	r2, [r7, #12]
 8003854:	621a      	str	r2, [r3, #32]
    qei->freq = freq;
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	68ba      	ldr	r2, [r7, #8]
 800385a:	629a      	str	r2, [r3, #40]	@ 0x28
    qei->gear_ratio = ratio;
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	655a      	str	r2, [r3, #84]	@ 0x54
    qei->pulley_diameter = pulley_diameter;
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	683a      	ldr	r2, [r7, #0]
 8003866:	659a      	str	r2, [r3, #88]	@ 0x58

    qei->c[NOW] = 0;
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	2200      	movs	r2, #0
 800386c:	601a      	str	r2, [r3, #0]
    qei->c[PREV] = 0;
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	2200      	movs	r2, #0
 8003872:	605a      	str	r2, [r3, #4]
    qei->r[NOW] = 0;
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	f04f 0200 	mov.w	r2, #0
 800387a:	609a      	str	r2, [r3, #8]
    qei->r[PREV] = 0;
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	f04f 0200 	mov.w	r2, #0
 8003882:	60da      	str	r2, [r3, #12]
    qei->m[NOW] = 0;
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	f04f 0200 	mov.w	r2, #0
 800388a:	611a      	str	r2, [r3, #16]
    qei->m[PREV] = 0;
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	f04f 0200 	mov.w	r2, #0
 8003892:	615a      	str	r2, [r3, #20]

    qei->enc_period = 65536 - (65536 % ppr);
 8003894:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003898:	68fa      	ldr	r2, [r7, #12]
 800389a:	fb93 f2f2 	sdiv	r2, r3, r2
 800389e:	68f9      	ldr	r1, [r7, #12]
 80038a0:	fb01 f202 	mul.w	r2, r1, r2
 80038a4:	1a9b      	subs	r3, r3, r2
 80038a6:	f5c3 3280 	rsb	r2, r3, #65536	@ 0x10000
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	61da      	str	r2, [r3, #28]

    qei->diff_counts = 0;
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	2200      	movs	r2, #0
 80038b2:	625a      	str	r2, [r3, #36]	@ 0x24
    qei->pulses = 0;
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	2200      	movs	r2, #0
 80038b8:	639a      	str	r2, [r3, #56]	@ 0x38
    qei->rads = 0;
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	f04f 0200 	mov.w	r2, #0
 80038c0:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->mm = 0;
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	f04f 0200 	mov.w	r2, #0
 80038c8:	649a      	str	r2, [r3, #72]	@ 0x48
    qei->revs = 0;
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	f04f 0200 	mov.w	r2, #0
 80038d0:	63da      	str	r2, [r3, #60]	@ 0x3c

    qei->pps = 0;
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	f04f 0200 	mov.w	r2, #0
 80038d8:	62da      	str	r2, [r3, #44]	@ 0x2c
    qei->radps = 0;
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	f04f 0200 	mov.w	r2, #0
 80038e0:	635a      	str	r2, [r3, #52]	@ 0x34
    qei->mmps = 0;
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	f04f 0200 	mov.w	r2, #0
 80038e8:	64da      	str	r2, [r3, #76]	@ 0x4c
    qei->rpm = 0;
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	f04f 0200 	mov.w	r2, #0
 80038f0:	631a      	str	r2, [r3, #48]	@ 0x30

    qei->radpss = 0;
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	f04f 0200 	mov.w	r2, #0
 80038f8:	645a      	str	r2, [r3, #68]	@ 0x44
    qei->mmpss = 0;
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	f04f 0200 	mov.w	r2, #0
 8003900:	651a      	str	r2, [r3, #80]	@ 0x50

    HAL_TIM_Encoder_Start(htimx, TIM_CHANNEL_ALL);
 8003902:	213c      	movs	r1, #60	@ 0x3c
 8003904:	6938      	ldr	r0, [r7, #16]
 8003906:	f009 f983 	bl	800cc10 <HAL_TIM_Encoder_Start>
}
 800390a:	bf00      	nop
 800390c:	3718      	adds	r7, #24
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
 8003912:	0000      	movs	r0, r0
 8003914:	0000      	movs	r0, r0
	...

08003918 <QEI_get_diff_count>:

void QEI_get_diff_count(QEI *qei) {
 8003918:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800391c:	b084      	sub	sp, #16
 800391e:	af00      	add	r7, sp, #0
 8003920:	6078      	str	r0, [r7, #4]
    // Get current counter value
    qei->c[NOW] = __HAL_TIM_GET_COUNTER(qei->htimx);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	699b      	ldr	r3, [r3, #24]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	601a      	str	r2, [r3, #0]

    // Calculate difference with handling for timer overflow/underflow
    int32_t diff_counts = qei->c[NOW] - qei->c[PREV];
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	60fb      	str	r3, [r7, #12]

    // Handle counter overflow/underflow
    if (diff_counts > qei->enc_period / 2) {
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	69db      	ldr	r3, [r3, #28]
 800393e:	0fda      	lsrs	r2, r3, #31
 8003940:	4413      	add	r3, r2
 8003942:	105b      	asrs	r3, r3, #1
 8003944:	461a      	mov	r2, r3
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	4293      	cmp	r3, r2
 800394a:	dd05      	ble.n	8003958 <QEI_get_diff_count+0x40>
        diff_counts -= qei->enc_period;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	69db      	ldr	r3, [r3, #28]
 8003950:	68fa      	ldr	r2, [r7, #12]
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	60fb      	str	r3, [r7, #12]
 8003956:	e00e      	b.n	8003976 <QEI_get_diff_count+0x5e>
    } else if (diff_counts < -(qei->enc_period / 2)) {
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	69db      	ldr	r3, [r3, #28]
 800395c:	0fda      	lsrs	r2, r3, #31
 800395e:	4413      	add	r3, r2
 8003960:	105b      	asrs	r3, r3, #1
 8003962:	425b      	negs	r3, r3
 8003964:	461a      	mov	r2, r3
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	4293      	cmp	r3, r2
 800396a:	da04      	bge.n	8003976 <QEI_get_diff_count+0x5e>
        diff_counts += qei->enc_period;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	69db      	ldr	r3, [r3, #28]
 8003970:	68fa      	ldr	r2, [r7, #12]
 8003972:	4413      	add	r3, r2
 8003974:	60fb      	str	r3, [r7, #12]
    }

    qei->diff_counts = diff_counts;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	68fa      	ldr	r2, [r7, #12]
 800397a:	625a      	str	r2, [r3, #36]	@ 0x24

    // Update position counters
    qei->pulses += qei->diff_counts;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003984:	441a      	add	r2, r3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	639a      	str	r2, [r3, #56]	@ 0x38
    qei->revs += (qei->diff_counts / (float)(qei->ppr)) * qei->gear_ratio;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003994:	ee07 3a90 	vmov	s15, r3
 8003998:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6a1b      	ldr	r3, [r3, #32]
 80039a0:	ee07 3a90 	vmov	s15, r3
 80039a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80039a8:	eec6 6a27 	vdiv.f32	s13, s12, s15
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 80039b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80039b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
    qei->rads += (qei->diff_counts / (float)(qei->ppr)) * 2 * M_PI * qei->gear_ratio;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039c4:	4618      	mov	r0, r3
 80039c6:	f7fc fd8b 	bl	80004e0 <__aeabi_f2d>
 80039ca:	4604      	mov	r4, r0
 80039cc:	460d      	mov	r5, r1
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039d2:	ee07 3a90 	vmov	s15, r3
 80039d6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6a1b      	ldr	r3, [r3, #32]
 80039de:	ee07 3a90 	vmov	s15, r3
 80039e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80039e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039ea:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80039ee:	ee17 0a90 	vmov	r0, s15
 80039f2:	f7fc fd75 	bl	80004e0 <__aeabi_f2d>
 80039f6:	a33c      	add	r3, pc, #240	@ (adr r3, 8003ae8 <QEI_get_diff_count+0x1d0>)
 80039f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039fc:	f7fc fdc8 	bl	8000590 <__aeabi_dmul>
 8003a00:	4602      	mov	r2, r0
 8003a02:	460b      	mov	r3, r1
 8003a04:	4690      	mov	r8, r2
 8003a06:	4699      	mov	r9, r3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f7fc fd67 	bl	80004e0 <__aeabi_f2d>
 8003a12:	4602      	mov	r2, r0
 8003a14:	460b      	mov	r3, r1
 8003a16:	4640      	mov	r0, r8
 8003a18:	4649      	mov	r1, r9
 8003a1a:	f7fc fdb9 	bl	8000590 <__aeabi_dmul>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	460b      	mov	r3, r1
 8003a22:	4620      	mov	r0, r4
 8003a24:	4629      	mov	r1, r5
 8003a26:	f7fc fbfd 	bl	8000224 <__adddf3>
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	460b      	mov	r3, r1
 8003a2e:	4610      	mov	r0, r2
 8003a30:	4619      	mov	r1, r3
 8003a32:	f7fd f88f 	bl	8000b54 <__aeabi_d2f>
 8003a36:	4602      	mov	r2, r0
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->mm += (qei->diff_counts / (float)(qei->ppr)) * M_PI * qei->pulley_diameter * qei->gear_ratio;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a40:	4618      	mov	r0, r3
 8003a42:	f7fc fd4d 	bl	80004e0 <__aeabi_f2d>
 8003a46:	4604      	mov	r4, r0
 8003a48:	460d      	mov	r5, r1
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a4e:	ee07 3a90 	vmov	s15, r3
 8003a52:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6a1b      	ldr	r3, [r3, #32]
 8003a5a:	ee07 3a90 	vmov	s15, r3
 8003a5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a62:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003a66:	ee16 0a90 	vmov	r0, s13
 8003a6a:	f7fc fd39 	bl	80004e0 <__aeabi_f2d>
 8003a6e:	a31e      	add	r3, pc, #120	@ (adr r3, 8003ae8 <QEI_get_diff_count+0x1d0>)
 8003a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a74:	f7fc fd8c 	bl	8000590 <__aeabi_dmul>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	460b      	mov	r3, r1
 8003a7c:	4690      	mov	r8, r2
 8003a7e:	4699      	mov	r9, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a84:	4618      	mov	r0, r3
 8003a86:	f7fc fd2b 	bl	80004e0 <__aeabi_f2d>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	460b      	mov	r3, r1
 8003a8e:	4640      	mov	r0, r8
 8003a90:	4649      	mov	r1, r9
 8003a92:	f7fc fd7d 	bl	8000590 <__aeabi_dmul>
 8003a96:	4602      	mov	r2, r0
 8003a98:	460b      	mov	r3, r1
 8003a9a:	4690      	mov	r8, r2
 8003a9c:	4699      	mov	r9, r3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f7fc fd1c 	bl	80004e0 <__aeabi_f2d>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	460b      	mov	r3, r1
 8003aac:	4640      	mov	r0, r8
 8003aae:	4649      	mov	r1, r9
 8003ab0:	f7fc fd6e 	bl	8000590 <__aeabi_dmul>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	460b      	mov	r3, r1
 8003ab8:	4620      	mov	r0, r4
 8003aba:	4629      	mov	r1, r5
 8003abc:	f7fc fbb2 	bl	8000224 <__adddf3>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	460b      	mov	r3, r1
 8003ac4:	4610      	mov	r0, r2
 8003ac6:	4619      	mov	r1, r3
 8003ac8:	f7fd f844 	bl	8000b54 <__aeabi_d2f>
 8003acc:	4602      	mov	r2, r0
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	649a      	str	r2, [r3, #72]	@ 0x48

    // Store the current counter value for next calculation
    qei->c[PREV] = qei->c[NOW];
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	605a      	str	r2, [r3, #4]
}
 8003ada:	bf00      	nop
 8003adc:	3710      	adds	r7, #16
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003ae4:	f3af 8000 	nop.w
 8003ae8:	54442d18 	.word	0x54442d18
 8003aec:	400921fb 	.word	0x400921fb

08003af0 <QEI_compute_data>:

void QEI_compute_data(QEI *qei) {
 8003af0:	b5b0      	push	{r4, r5, r7, lr}
 8003af2:	b084      	sub	sp, #16
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
    // Calculate velocity in pulses per second
    qei->pps = qei->diff_counts * ((int)(qei->freq));
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003b00:	fb02 f303 	mul.w	r3, r2, r3
 8003b04:	ee07 3a90 	vmov	s15, r3
 8003b08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

    // Calculate angular velocity in different units
    qei->rpm = qei->pps * 60.0 / (float)(qei->ppr) * qei->gear_ratio;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b16:	4618      	mov	r0, r3
 8003b18:	f7fc fce2 	bl	80004e0 <__aeabi_f2d>
 8003b1c:	f04f 0200 	mov.w	r2, #0
 8003b20:	4b83      	ldr	r3, [pc, #524]	@ (8003d30 <QEI_compute_data+0x240>)
 8003b22:	f7fc fd35 	bl	8000590 <__aeabi_dmul>
 8003b26:	4602      	mov	r2, r0
 8003b28:	460b      	mov	r3, r1
 8003b2a:	4614      	mov	r4, r2
 8003b2c:	461d      	mov	r5, r3
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6a1b      	ldr	r3, [r3, #32]
 8003b32:	ee07 3a90 	vmov	s15, r3
 8003b36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b3a:	ee17 0a90 	vmov	r0, s15
 8003b3e:	f7fc fccf 	bl	80004e0 <__aeabi_f2d>
 8003b42:	4602      	mov	r2, r0
 8003b44:	460b      	mov	r3, r1
 8003b46:	4620      	mov	r0, r4
 8003b48:	4629      	mov	r1, r5
 8003b4a:	f7fc fe4b 	bl	80007e4 <__aeabi_ddiv>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	460b      	mov	r3, r1
 8003b52:	4614      	mov	r4, r2
 8003b54:	461d      	mov	r5, r3
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f7fc fcc0 	bl	80004e0 <__aeabi_f2d>
 8003b60:	4602      	mov	r2, r0
 8003b62:	460b      	mov	r3, r1
 8003b64:	4620      	mov	r0, r4
 8003b66:	4629      	mov	r1, r5
 8003b68:	f7fc fd12 	bl	8000590 <__aeabi_dmul>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	460b      	mov	r3, r1
 8003b70:	4610      	mov	r0, r2
 8003b72:	4619      	mov	r1, r3
 8003b74:	f7fc ffee 	bl	8000b54 <__aeabi_d2f>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	631a      	str	r2, [r3, #48]	@ 0x30
    qei->radps = qei->pps * 2 * M_PI / (float)(qei->ppr) * qei->gear_ratio;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8003b84:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003b88:	ee17 0a90 	vmov	r0, s15
 8003b8c:	f7fc fca8 	bl	80004e0 <__aeabi_f2d>
 8003b90:	a365      	add	r3, pc, #404	@ (adr r3, 8003d28 <QEI_compute_data+0x238>)
 8003b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b96:	f7fc fcfb 	bl	8000590 <__aeabi_dmul>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	460b      	mov	r3, r1
 8003b9e:	4614      	mov	r4, r2
 8003ba0:	461d      	mov	r5, r3
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a1b      	ldr	r3, [r3, #32]
 8003ba6:	ee07 3a90 	vmov	s15, r3
 8003baa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003bae:	ee17 0a90 	vmov	r0, s15
 8003bb2:	f7fc fc95 	bl	80004e0 <__aeabi_f2d>
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	460b      	mov	r3, r1
 8003bba:	4620      	mov	r0, r4
 8003bbc:	4629      	mov	r1, r5
 8003bbe:	f7fc fe11 	bl	80007e4 <__aeabi_ddiv>
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	460b      	mov	r3, r1
 8003bc6:	4614      	mov	r4, r2
 8003bc8:	461d      	mov	r5, r3
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f7fc fc86 	bl	80004e0 <__aeabi_f2d>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	460b      	mov	r3, r1
 8003bd8:	4620      	mov	r0, r4
 8003bda:	4629      	mov	r1, r5
 8003bdc:	f7fc fcd8 	bl	8000590 <__aeabi_dmul>
 8003be0:	4602      	mov	r2, r0
 8003be2:	460b      	mov	r3, r1
 8003be4:	4610      	mov	r0, r2
 8003be6:	4619      	mov	r1, r3
 8003be8:	f7fc ffb4 	bl	8000b54 <__aeabi_d2f>
 8003bec:	4602      	mov	r2, r0
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	635a      	str	r2, [r3, #52]	@ 0x34

    // Calculate linear velocity
    qei->mmps = qei->pps * M_PI * qei->pulley_diameter / (float)(qei->ppr) * qei->gear_ratio;  // Assuming 10mm per rev
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f7fc fc72 	bl	80004e0 <__aeabi_f2d>
 8003bfc:	a34a      	add	r3, pc, #296	@ (adr r3, 8003d28 <QEI_compute_data+0x238>)
 8003bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c02:	f7fc fcc5 	bl	8000590 <__aeabi_dmul>
 8003c06:	4602      	mov	r2, r0
 8003c08:	460b      	mov	r3, r1
 8003c0a:	4614      	mov	r4, r2
 8003c0c:	461d      	mov	r5, r3
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c12:	4618      	mov	r0, r3
 8003c14:	f7fc fc64 	bl	80004e0 <__aeabi_f2d>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	460b      	mov	r3, r1
 8003c1c:	4620      	mov	r0, r4
 8003c1e:	4629      	mov	r1, r5
 8003c20:	f7fc fcb6 	bl	8000590 <__aeabi_dmul>
 8003c24:	4602      	mov	r2, r0
 8003c26:	460b      	mov	r3, r1
 8003c28:	4614      	mov	r4, r2
 8003c2a:	461d      	mov	r5, r3
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6a1b      	ldr	r3, [r3, #32]
 8003c30:	ee07 3a90 	vmov	s15, r3
 8003c34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c38:	ee17 0a90 	vmov	r0, s15
 8003c3c:	f7fc fc50 	bl	80004e0 <__aeabi_f2d>
 8003c40:	4602      	mov	r2, r0
 8003c42:	460b      	mov	r3, r1
 8003c44:	4620      	mov	r0, r4
 8003c46:	4629      	mov	r1, r5
 8003c48:	f7fc fdcc 	bl	80007e4 <__aeabi_ddiv>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	460b      	mov	r3, r1
 8003c50:	4614      	mov	r4, r2
 8003c52:	461d      	mov	r5, r3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f7fc fc41 	bl	80004e0 <__aeabi_f2d>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	460b      	mov	r3, r1
 8003c62:	4620      	mov	r0, r4
 8003c64:	4629      	mov	r1, r5
 8003c66:	f7fc fc93 	bl	8000590 <__aeabi_dmul>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	460b      	mov	r3, r1
 8003c6e:	4610      	mov	r0, r2
 8003c70:	4619      	mov	r1, r3
 8003c72:	f7fc ff6f 	bl	8000b54 <__aeabi_d2f>
 8003c76:	4602      	mov	r2, r0
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	64da      	str	r2, [r3, #76]	@ 0x4c

    // Store current angular velocity for acceleration calculation
    qei->r[NOW] = qei->radps;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	609a      	str	r2, [r3, #8]

    // Store current linear velocity for acceleration calculation
    qei->m[NOW] = qei->mmps;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	611a      	str	r2, [r3, #16]

    // Calculate acceleration
    float diff_angular_velocity = qei->r[NOW] - qei->r[PREV];
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	ed93 7a02 	vldr	s14, [r3, #8]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	edd3 7a03 	vldr	s15, [r3, #12]
 8003c98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c9c:	edc7 7a03 	vstr	s15, [r7, #12]
    qei->radpss = (diff_angular_velocity == 0) ? 0 : diff_angular_velocity * qei->freq;
 8003ca0:	edd7 7a03 	vldr	s15, [r7, #12]
 8003ca4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003ca8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cac:	d00a      	beq.n	8003cc4 <QEI_compute_data+0x1d4>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cb2:	ee07 3a90 	vmov	s15, r3
 8003cb6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003cba:	edd7 7a03 	vldr	s15, [r7, #12]
 8003cbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cc2:	e001      	b.n	8003cc8 <QEI_compute_data+0x1d8>
 8003cc4:	eddf 7a1b 	vldr	s15, [pc, #108]	@ 8003d34 <QEI_compute_data+0x244>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44

    float diff_linear_velocity = qei->m[NOW] - qei->m[PREV];
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	ed93 7a04 	vldr	s14, [r3, #16]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	edd3 7a05 	vldr	s15, [r3, #20]
 8003cda:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003cde:	edc7 7a02 	vstr	s15, [r7, #8]
    qei->mmpss = (diff_linear_velocity == 0) ? 0 : diff_linear_velocity * qei->freq;
 8003ce2:	edd7 7a02 	vldr	s15, [r7, #8]
 8003ce6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003cea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cee:	d00a      	beq.n	8003d06 <QEI_compute_data+0x216>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cf4:	ee07 3a90 	vmov	s15, r3
 8003cf8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003cfc:	edd7 7a02 	vldr	s15, [r7, #8]
 8003d00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d04:	e001      	b.n	8003d0a <QEI_compute_data+0x21a>
 8003d06:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8003d34 <QEI_compute_data+0x244>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50

    // Store current velocity for next acceleration calculation
    qei->r[PREV] = qei->r[NOW];
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	689a      	ldr	r2, [r3, #8]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	60da      	str	r2, [r3, #12]
    qei->m[PREV] = qei->m[NOW];
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	691a      	ldr	r2, [r3, #16]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	615a      	str	r2, [r3, #20]
}
 8003d20:	bf00      	nop
 8003d22:	3710      	adds	r7, #16
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bdb0      	pop	{r4, r5, r7, pc}
 8003d28:	54442d18 	.word	0x54442d18
 8003d2c:	400921fb 	.word	0x400921fb
 8003d30:	404e0000 	.word	0x404e0000
 8003d34:	00000000 	.word	0x00000000

08003d38 <Trapezoidal_Generator>:
 */

#include "Trapezoidal.h"

void Trapezoidal_Generator(volatile Trapezoidal_GenStruct *trapGen,
        float32_t initial_p, float32_t target_p, float32_t vmax, float32_t amax) {
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b08e      	sub	sp, #56	@ 0x38
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6178      	str	r0, [r7, #20]
 8003d40:	ed87 0a04 	vstr	s0, [r7, #16]
 8003d44:	edc7 0a03 	vstr	s1, [r7, #12]
 8003d48:	ed87 1a02 	vstr	s2, [r7, #8]
 8003d4c:	edc7 1a01 	vstr	s3, [r7, #4]
    // Set default values
    trapGen->dir = 0;
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	2200      	movs	r2, #0
 8003d54:	741a      	strb	r2, [r3, #16]
    trapGen->time_total = 0.0f;
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	f04f 0200 	mov.w	r2, #0
 8003d5c:	60da      	str	r2, [r3, #12]
    trapGen->t1 = 0.0f;
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	f04f 0200 	mov.w	r2, #0
 8003d64:	601a      	str	r2, [r3, #0]
    trapGen->t2 = 0.0f;
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	f04f 0200 	mov.w	r2, #0
 8003d6c:	605a      	str	r2, [r3, #4]
    trapGen->t3 = 0.0f;
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	f04f 0200 	mov.w	r2, #0
 8003d74:	609a      	str	r2, [r3, #8]

    // Calculate the distance to travel
    float32_t distance = fabsf(target_p - initial_p);
 8003d76:	ed97 7a03 	vldr	s14, [r7, #12]
 8003d7a:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d82:	eef0 7ae7 	vabs.f32	s15, s15
 8003d86:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

    // Determine the direction of the motion
    if (target_p - initial_p < 0) {
 8003d8a:	ed97 7a03 	vldr	s14, [r7, #12]
 8003d8e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d96:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003d9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d9e:	d503      	bpl.n	8003da8 <Trapezoidal_Generator+0x70>
        trapGen->dir = -1;
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	22ff      	movs	r2, #255	@ 0xff
 8003da4:	741a      	strb	r2, [r3, #16]
 8003da6:	e002      	b.n	8003dae <Trapezoidal_Generator+0x76>
    } else {
        trapGen->dir = 1;
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	2201      	movs	r2, #1
 8003dac:	741a      	strb	r2, [r3, #16]
    }

    // If no movement required or zero acceleration
    if (distance == 0.0f || amax == 0.0f) {
 8003dae:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8003db2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003db6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dba:	d006      	beq.n	8003dca <Trapezoidal_Generator+0x92>
 8003dbc:	edd7 7a01 	vldr	s15, [r7, #4]
 8003dc0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003dc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dc8:	d104      	bne.n	8003dd4 <Trapezoidal_Generator+0x9c>
        trapGen->time_total = 0.0f;
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	f04f 0200 	mov.w	r2, #0
 8003dd0:	60da      	str	r2, [r3, #12]
        return;
 8003dd2:	e06f      	b.n	8003eb4 <Trapezoidal_Generator+0x17c>
    }

    // Time to reach maximum velocity (assuming we can)
    float32_t ta = vmax / amax;
 8003dd4:	edd7 6a02 	vldr	s13, [r7, #8]
 8003dd8:	ed97 7a01 	vldr	s14, [r7, #4]
 8003ddc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003de0:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

    // Distance traveled during acceleration and deceleration phases
    float32_t sa = 0.5f * amax * ta * ta;  // Distance in acceleration phase
 8003de4:	edd7 7a01 	vldr	s15, [r7, #4]
 8003de8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003dec:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003df0:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8003df4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003df8:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8003dfc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e00:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    float32_t sd = sa;                     // Distance in deceleration phase (same as acceleration)
 8003e04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e06:	62bb      	str	r3, [r7, #40]	@ 0x28
    float32_t s_accdec = sa + sd;          // Total distance for acceleration + deceleration
 8003e08:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8003e0c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8003e10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e14:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    // Check if we have enough distance to reach maximum velocity
    if (distance >= s_accdec) {
 8003e18:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003e1c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003e20:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003e24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e28:	db27      	blt.n	8003e7a <Trapezoidal_Generator+0x142>
        // Trapezoidal profile - we can reach maximum velocity
        float32_t sc = distance - s_accdec;  // Distance at constant velocity
 8003e2a:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003e2e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003e32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e36:	edc7 7a07 	vstr	s15, [r7, #28]
        float32_t tc = sc / vmax;            // Time at constant velocity
 8003e3a:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e3e:	ed97 7a02 	vldr	s14, [r7, #8]
 8003e42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e46:	edc7 7a06 	vstr	s15, [r7, #24]

        trapGen->t1 = ta;                    // End of acceleration phase
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e4e:	601a      	str	r2, [r3, #0]
        trapGen->t2 = ta + tc;               // End of constant velocity phase
 8003e50:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8003e54:	edd7 7a06 	vldr	s15, [r7, #24]
 8003e58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	edc3 7a01 	vstr	s15, [r3, #4]
        trapGen->t3 = 2 * ta + tc;           // End of deceleration phase
 8003e62:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8003e66:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003e6a:	edd7 7a06 	vldr	s15, [r7, #24]
 8003e6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	edc3 7a02 	vstr	s15, [r3, #8]
 8003e78:	e018      	b.n	8003eac <Trapezoidal_Generator+0x174>
        // For a triangular profile, we need to find the time to reach peak velocity
        // and the peak velocity itself

        // Using distance = 2 * (0.5 * amax * tp^2) and solving for tp
        // where tp is the time to reach peak velocity (half the total time)
        float32_t tp = sqrtf(distance / amax);
 8003e7a:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003e7e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003e82:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003e86:	eeb0 0a66 	vmov.f32	s0, s13
 8003e8a:	f00d f835 	bl	8010ef8 <sqrtf>
 8003e8e:	ed87 0a08 	vstr	s0, [r7, #32]

        trapGen->t1 = tp;                    // End of acceleration phase
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	6a3a      	ldr	r2, [r7, #32]
 8003e96:	601a      	str	r2, [r3, #0]
        trapGen->t2 = tp;                    // No constant velocity phase
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	6a3a      	ldr	r2, [r7, #32]
 8003e9c:	605a      	str	r2, [r3, #4]
        trapGen->t3 = 2 * tp;                // End of deceleration phase
 8003e9e:	edd7 7a08 	vldr	s15, [r7, #32]
 8003ea2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	edc3 7a02 	vstr	s15, [r3, #8]
    }

    trapGen->time_total = trapGen->t3;
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	689a      	ldr	r2, [r3, #8]
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	60da      	str	r2, [r3, #12]
}
 8003eb4:	3738      	adds	r7, #56	@ 0x38
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}
	...

08003ebc <Trapezoidal_Evaluated>:

void Trapezoidal_Evaluated(volatile Trapezoidal_GenStruct *trapGen,
        volatile Trapezoidal_EvaStruct *evaTrapezoidal, float32_t initial_p,
        float32_t target_p, float32_t vmax, float32_t amax) {
 8003ebc:	b480      	push	{r7}
 8003ebe:	b08d      	sub	sp, #52	@ 0x34
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6178      	str	r0, [r7, #20]
 8003ec4:	6139      	str	r1, [r7, #16]
 8003ec6:	ed87 0a03 	vstr	s0, [r7, #12]
 8003eca:	edc7 0a02 	vstr	s1, [r7, #8]
 8003ece:	ed87 1a01 	vstr	s2, [r7, #4]
 8003ed2:	edc7 1a00 	vstr	s3, [r7]

    // Update current time (assuming 1ms intervals)
    evaTrapezoidal->t += 1.0f / 1000.0f;
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	edd3 7a03 	vldr	s15, [r3, #12]
 8003edc:	ed9f 7aa0 	vldr	s14, [pc, #640]	@ 8004160 <Trapezoidal_Evaluated+0x2a4>
 8003ee0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	edc3 7a03 	vstr	s15, [r3, #12]

    // Check if trajectory is still active
    if (evaTrapezoidal->t <= trapGen->time_total) {
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	ed93 7a03 	vldr	s14, [r3, #12]
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	edd3 7a03 	vldr	s15, [r3, #12]
 8003ef6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003efa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003efe:	f200 811b 	bhi.w	8004138 <Trapezoidal_Evaluated+0x27c>
        evaTrapezoidal->isFinised = false;
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	2200      	movs	r2, #0
 8003f06:	741a      	strb	r2, [r3, #16]

        // Calculate direction-adjusted acceleration
        float32_t accel = amax * trapGen->dir;
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	7c1b      	ldrb	r3, [r3, #16]
 8003f0c:	b25b      	sxtb	r3, r3
 8003f0e:	ee07 3a90 	vmov	s15, r3
 8003f12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f16:	ed97 7a00 	vldr	s14, [r7]
 8003f1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f1e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

        // Calculate peak velocity (might be vmax or lower for triangular profile)
        float32_t peak_vel;
        if (trapGen->t1 == trapGen->t2) {
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	ed93 7a00 	vldr	s14, [r3]
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	edd3 7a01 	vldr	s15, [r3, #4]
 8003f2e:	eeb4 7a67 	vcmp.f32	s14, s15
 8003f32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f36:	d109      	bne.n	8003f4c <Trapezoidal_Evaluated+0x90>
            // Triangular profile - peak velocity is at t1
            peak_vel = accel * trapGen->t1;
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	edd3 7a00 	vldr	s15, [r3]
 8003f3e:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8003f42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f46:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
 8003f4a:	e00c      	b.n	8003f66 <Trapezoidal_Evaluated+0xaa>
        } else {
            // Trapezoidal profile - peak velocity is vmax with direction
            peak_vel = vmax * trapGen->dir;
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	7c1b      	ldrb	r3, [r3, #16]
 8003f50:	b25b      	sxtb	r3, r3
 8003f52:	ee07 3a90 	vmov	s15, r3
 8003f56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f5a:	ed97 7a01 	vldr	s14, [r7, #4]
 8003f5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f62:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
        }

        // Acceleration phase
        if (evaTrapezoidal->t <= trapGen->t1) {
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	ed93 7a03 	vldr	s14, [r3, #12]
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	edd3 7a00 	vldr	s15, [r3]
 8003f72:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003f76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f7a:	d824      	bhi.n	8003fc6 <Trapezoidal_Evaluated+0x10a>
            // Position calculation: p = p0 + 0.5*a*t²
            evaTrapezoidal->setposition = initial_p + 0.5f * accel * evaTrapezoidal->t * evaTrapezoidal->t;
 8003f7c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003f80:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003f84:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	edd3 7a03 	vldr	s15, [r3, #12]
 8003f8e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	edd3 7a03 	vldr	s15, [r3, #12]
 8003f98:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f9c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003fa0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	edc3 7a00 	vstr	s15, [r3]

            // Velocity calculation: v = a*t
            evaTrapezoidal->setvelocity = accel * evaTrapezoidal->t;
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	ed93 7a03 	vldr	s14, [r3, #12]
 8003fb0:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003fb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	edc3 7a01 	vstr	s15, [r3, #4]

            // Constant acceleration
            evaTrapezoidal->setacceleration = accel;
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fc2:	609a      	str	r2, [r3, #8]
        // Ensure final position is exactly target_p
        evaTrapezoidal->setposition = target_p;
        evaTrapezoidal->setvelocity = 0.0f;
        evaTrapezoidal->setacceleration = 0.0f;
    }
}
 8003fc4:	e0c6      	b.n	8004154 <Trapezoidal_Evaluated+0x298>
        else if (evaTrapezoidal->t <= trapGen->t2) {
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	ed93 7a03 	vldr	s14, [r3, #12]
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	edd3 7a01 	vldr	s15, [r3, #4]
 8003fd2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003fd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fda:	d830      	bhi.n	800403e <Trapezoidal_Evaluated+0x182>
            float32_t p1 = initial_p + 0.5f * accel * trapGen->t1 * trapGen->t1;
 8003fdc:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003fe0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003fe4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	edd3 7a00 	vldr	s15, [r3]
 8003fee:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	edd3 7a00 	vldr	s15, [r3]
 8003ff8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ffc:	ed97 7a03 	vldr	s14, [r7, #12]
 8004000:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004004:	edc7 7a06 	vstr	s15, [r7, #24]
            evaTrapezoidal->setposition = p1 + peak_vel * (evaTrapezoidal->t - trapGen->t1);
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	ed93 7a03 	vldr	s14, [r3, #12]
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	edd3 7a00 	vldr	s15, [r3]
 8004014:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004018:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800401c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004020:	edd7 7a06 	vldr	s15, [r7, #24]
 8004024:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	edc3 7a00 	vstr	s15, [r3]
            evaTrapezoidal->setvelocity = peak_vel;
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004032:	605a      	str	r2, [r3, #4]
            evaTrapezoidal->setacceleration = 0.0f;
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	f04f 0200 	mov.w	r2, #0
 800403a:	609a      	str	r2, [r3, #8]
}
 800403c:	e08a      	b.n	8004154 <Trapezoidal_Evaluated+0x298>
        else if (evaTrapezoidal->t <= trapGen->t3) {
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	ed93 7a03 	vldr	s14, [r3, #12]
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	edd3 7a02 	vldr	s15, [r3, #8]
 800404a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800404e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004052:	d900      	bls.n	8004056 <Trapezoidal_Evaluated+0x19a>
}
 8004054:	e07e      	b.n	8004154 <Trapezoidal_Evaluated+0x298>
            float32_t p1 = initial_p + 0.5f * accel * trapGen->t1 * trapGen->t1;
 8004056:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800405a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800405e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	edd3 7a00 	vldr	s15, [r3]
 8004068:	ee27 7a27 	vmul.f32	s14, s14, s15
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	edd3 7a00 	vldr	s15, [r3]
 8004072:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004076:	ed97 7a03 	vldr	s14, [r7, #12]
 800407a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800407e:	edc7 7a08 	vstr	s15, [r7, #32]
            float32_t p2 = p1;
 8004082:	6a3b      	ldr	r3, [r7, #32]
 8004084:	62bb      	str	r3, [r7, #40]	@ 0x28
            if (trapGen->t2 > trapGen->t1) {
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	ed93 7a01 	vldr	s14, [r3, #4]
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	edd3 7a00 	vldr	s15, [r3]
 8004092:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800409a:	dd11      	ble.n	80040c0 <Trapezoidal_Evaluated+0x204>
                p2 += peak_vel * (trapGen->t2 - trapGen->t1);
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	ed93 7a01 	vldr	s14, [r3, #4]
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	edd3 7a00 	vldr	s15, [r3]
 80040a8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80040ac:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80040b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040b4:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80040b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040bc:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            float32_t td = evaTrapezoidal->t - trapGen->t2;
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	ed93 7a03 	vldr	s14, [r3, #12]
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	edd3 7a01 	vldr	s15, [r3, #4]
 80040cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80040d0:	edc7 7a07 	vstr	s15, [r7, #28]
            evaTrapezoidal->setposition = p2 + peak_vel * td - 0.5f * accel * td * td;
 80040d4:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80040d8:	edd7 7a07 	vldr	s15, [r7, #28]
 80040dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80040e0:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80040e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80040e8:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80040ec:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 80040f0:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80040f4:	edd7 7a07 	vldr	s15, [r7, #28]
 80040f8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80040fc:	edd7 7a07 	vldr	s15, [r7, #28]
 8004100:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004104:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	edc3 7a00 	vstr	s15, [r3]
            evaTrapezoidal->setvelocity = peak_vel - accel * td;
 800410e:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8004112:	edd7 7a07 	vldr	s15, [r7, #28]
 8004116:	ee67 7a27 	vmul.f32	s15, s14, s15
 800411a:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800411e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	edc3 7a01 	vstr	s15, [r3, #4]
            evaTrapezoidal->setacceleration = -accel;
 8004128:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800412c:	eef1 7a67 	vneg.f32	s15, s15
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8004136:	e00d      	b.n	8004154 <Trapezoidal_Evaluated+0x298>
        evaTrapezoidal->isFinised = true;
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	2201      	movs	r2, #1
 800413c:	741a      	strb	r2, [r3, #16]
        evaTrapezoidal->setposition = target_p;
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	68ba      	ldr	r2, [r7, #8]
 8004142:	601a      	str	r2, [r3, #0]
        evaTrapezoidal->setvelocity = 0.0f;
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	f04f 0200 	mov.w	r2, #0
 800414a:	605a      	str	r2, [r3, #4]
        evaTrapezoidal->setacceleration = 0.0f;
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	f04f 0200 	mov.w	r2, #0
 8004152:	609a      	str	r2, [r3, #8]
}
 8004154:	bf00      	nop
 8004156:	3734      	adds	r7, #52	@ 0x34
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr
 8004160:	3a83126f 	.word	0x3a83126f

08004164 <temperature_to_base>:
    "ns", "us", "ms", "s", "min", "hour", "day",
    "C", "F", "K"
};

/* Custom conversion functions for temperature */
static float temperature_to_base(float value, Unit from_unit) {
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	ed87 0a01 	vstr	s0, [r7, #4]
 800416e:	4603      	mov	r3, r0
 8004170:	70fb      	strb	r3, [r7, #3]
    switch (from_unit) {
 8004172:	78fb      	ldrb	r3, [r7, #3]
 8004174:	2b1a      	cmp	r3, #26
 8004176:	d018      	beq.n	80041aa <temperature_to_base+0x46>
 8004178:	2b1a      	cmp	r3, #26
 800417a:	dc1d      	bgt.n	80041b8 <temperature_to_base+0x54>
 800417c:	2b18      	cmp	r3, #24
 800417e:	d002      	beq.n	8004186 <temperature_to_base+0x22>
 8004180:	2b19      	cmp	r3, #25
 8004182:	d003      	beq.n	800418c <temperature_to_base+0x28>
 8004184:	e018      	b.n	80041b8 <temperature_to_base+0x54>
        case UNIT_CELSIUS:
            return value;  /* Base unit is Celsius */
 8004186:	edd7 7a01 	vldr	s15, [r7, #4]
 800418a:	e017      	b.n	80041bc <temperature_to_base+0x58>
        case UNIT_FAHRENHEIT:
            return (value - 32.0f) * 5.0f / 9.0f;
 800418c:	edd7 7a01 	vldr	s15, [r7, #4]
 8004190:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80041cc <temperature_to_base+0x68>
 8004194:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004198:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800419c:	ee27 7a87 	vmul.f32	s14, s15, s14
 80041a0:	eef2 6a02 	vmov.f32	s13, #34	@ 0x41100000  9.0
 80041a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80041a8:	e008      	b.n	80041bc <temperature_to_base+0x58>
        case UNIT_KELVIN:
            return value - 273.15f;
 80041aa:	edd7 7a01 	vldr	s15, [r7, #4]
 80041ae:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 80041d0 <temperature_to_base+0x6c>
 80041b2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80041b6:	e001      	b.n	80041bc <temperature_to_base+0x58>
        default:
            return value;
 80041b8:	edd7 7a01 	vldr	s15, [r7, #4]
    }
}
 80041bc:	eeb0 0a67 	vmov.f32	s0, s15
 80041c0:	370c      	adds	r7, #12
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr
 80041ca:	bf00      	nop
 80041cc:	42000000 	.word	0x42000000
 80041d0:	43889333 	.word	0x43889333

080041d4 <temperature_from_base>:

static float temperature_from_base(float value, Unit to_unit) {
 80041d4:	b480      	push	{r7}
 80041d6:	b083      	sub	sp, #12
 80041d8:	af00      	add	r7, sp, #0
 80041da:	ed87 0a01 	vstr	s0, [r7, #4]
 80041de:	4603      	mov	r3, r0
 80041e0:	70fb      	strb	r3, [r7, #3]
    switch (to_unit) {
 80041e2:	78fb      	ldrb	r3, [r7, #3]
 80041e4:	2b1a      	cmp	r3, #26
 80041e6:	d018      	beq.n	800421a <temperature_from_base+0x46>
 80041e8:	2b1a      	cmp	r3, #26
 80041ea:	dc1d      	bgt.n	8004228 <temperature_from_base+0x54>
 80041ec:	2b18      	cmp	r3, #24
 80041ee:	d002      	beq.n	80041f6 <temperature_from_base+0x22>
 80041f0:	2b19      	cmp	r3, #25
 80041f2:	d003      	beq.n	80041fc <temperature_from_base+0x28>
 80041f4:	e018      	b.n	8004228 <temperature_from_base+0x54>
        case UNIT_CELSIUS:
            return value;  /* Base unit is Celsius */
 80041f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80041fa:	e017      	b.n	800422c <temperature_from_base+0x58>
        case UNIT_FAHRENHEIT:
            return (value * 9.0f / 5.0f) + 32.0f;
 80041fc:	edd7 7a01 	vldr	s15, [r7, #4]
 8004200:	eeb2 7a02 	vmov.f32	s14, #34	@ 0x41100000  9.0
 8004204:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004208:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 800420c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004210:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 800423c <temperature_from_base+0x68>
 8004214:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004218:	e008      	b.n	800422c <temperature_from_base+0x58>
        case UNIT_KELVIN:
            return value + 273.15f;
 800421a:	edd7 7a01 	vldr	s15, [r7, #4]
 800421e:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8004240 <temperature_from_base+0x6c>
 8004222:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004226:	e001      	b.n	800422c <temperature_from_base+0x58>
        default:
            return value;
 8004228:	edd7 7a01 	vldr	s15, [r7, #4]
    }
}
 800422c:	eeb0 0a67 	vmov.f32	s0, s15
 8004230:	370c      	adds	r7, #12
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr
 800423a:	bf00      	nop
 800423c:	42000000 	.word	0x42000000
 8004240:	43889333 	.word	0x43889333

08004244 <init_length_converter>:

/* Initialize unit converters with conversion factors */
static void init_length_converter(UnitConverter *converter) {
 8004244:	b480      	push	{r7}
 8004246:	b085      	sub	sp, #20
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_LENGTH;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2200      	movs	r2, #0
 8004250:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_M;  /* Meter is the base unit */
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2202      	movs	r2, #2
 8004256:	705a      	strb	r2, [r3, #1]

    /* Initialize all conversion factors to 0.0 */
    for (int i = 0; i < UNIT_COUNT; i++) {
 8004258:	2300      	movs	r3, #0
 800425a:	60fb      	str	r3, [r7, #12]
 800425c:	e00a      	b.n	8004274 <init_length_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	4413      	add	r3, r2
 8004266:	3304      	adds	r3, #4
 8004268:	f04f 0200 	mov.w	r2, #0
 800426c:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	3301      	adds	r3, #1
 8004272:	60fb      	str	r3, [r7, #12]
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2b1a      	cmp	r3, #26
 8004278:	ddf1      	ble.n	800425e <init_length_converter+0x1a>
    }

    /* Set conversion factors for length units (to convert to meters) */
    converter->conversion_factors[UNIT_MM] = 0.001f;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4a11      	ldr	r2, [pc, #68]	@ (80042c4 <init_length_converter+0x80>)
 800427e:	605a      	str	r2, [r3, #4]
    converter->conversion_factors[UNIT_CM] = 0.01f;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	4a11      	ldr	r2, [pc, #68]	@ (80042c8 <init_length_converter+0x84>)
 8004284:	609a      	str	r2, [r3, #8]
    converter->conversion_factors[UNIT_M] = 1.0f;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800428c:	60da      	str	r2, [r3, #12]
    converter->conversion_factors[UNIT_KM] = 1000.0f;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4a0e      	ldr	r2, [pc, #56]	@ (80042cc <init_length_converter+0x88>)
 8004292:	611a      	str	r2, [r3, #16]
    converter->conversion_factors[UNIT_INCH] = 0.0254f;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	4a0e      	ldr	r2, [pc, #56]	@ (80042d0 <init_length_converter+0x8c>)
 8004298:	615a      	str	r2, [r3, #20]
    converter->conversion_factors[UNIT_FOOT] = 0.3048f;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4a0d      	ldr	r2, [pc, #52]	@ (80042d4 <init_length_converter+0x90>)
 800429e:	619a      	str	r2, [r3, #24]
    converter->conversion_factors[UNIT_YARD] = 0.9144f;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	4a0d      	ldr	r2, [pc, #52]	@ (80042d8 <init_length_converter+0x94>)
 80042a4:	61da      	str	r2, [r3, #28]
    converter->conversion_factors[UNIT_MILE] = 1609.344f;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4a0c      	ldr	r2, [pc, #48]	@ (80042dc <init_length_converter+0x98>)
 80042aa:	621a      	str	r2, [r3, #32]

    converter->to_base = NULL;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2200      	movs	r2, #0
 80042b0:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = NULL;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80042b8:	bf00      	nop
 80042ba:	3714      	adds	r7, #20
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr
 80042c4:	3a83126f 	.word	0x3a83126f
 80042c8:	3c23d70a 	.word	0x3c23d70a
 80042cc:	447a0000 	.word	0x447a0000
 80042d0:	3cd013a9 	.word	0x3cd013a9
 80042d4:	3e9c0ebf 	.word	0x3e9c0ebf
 80042d8:	3f6a161e 	.word	0x3f6a161e
 80042dc:	44c92b02 	.word	0x44c92b02

080042e0 <init_mass_converter>:

static void init_mass_converter(UnitConverter *converter) {
 80042e0:	b480      	push	{r7}
 80042e2:	b085      	sub	sp, #20
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_MASS;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_KG;  /* Kilogram is the base unit */
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	220a      	movs	r2, #10
 80042f2:	705a      	strb	r2, [r3, #1]

    /* Initialize all conversion factors to 0.0 */
    for (int i = 0; i < UNIT_COUNT; i++) {
 80042f4:	2300      	movs	r3, #0
 80042f6:	60fb      	str	r3, [r7, #12]
 80042f8:	e00a      	b.n	8004310 <init_mass_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	4413      	add	r3, r2
 8004302:	3304      	adds	r3, #4
 8004304:	f04f 0200 	mov.w	r2, #0
 8004308:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	3301      	adds	r3, #1
 800430e:	60fb      	str	r3, [r7, #12]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2b1a      	cmp	r3, #26
 8004314:	ddf1      	ble.n	80042fa <init_mass_converter+0x1a>
    }

    /* Set conversion factors for mass units (to convert to kilograms) */
    converter->conversion_factors[UNIT_MG] = 0.000001f;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	4a0e      	ldr	r2, [pc, #56]	@ (8004354 <init_mass_converter+0x74>)
 800431a:	625a      	str	r2, [r3, #36]	@ 0x24
    converter->conversion_factors[UNIT_G] = 0.001f;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	4a0e      	ldr	r2, [pc, #56]	@ (8004358 <init_mass_converter+0x78>)
 8004320:	629a      	str	r2, [r3, #40]	@ 0x28
    converter->conversion_factors[UNIT_KG] = 1.0f;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004328:	62da      	str	r2, [r3, #44]	@ 0x2c
    converter->conversion_factors[UNIT_TON] = 1000.0f;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	4a0b      	ldr	r2, [pc, #44]	@ (800435c <init_mass_converter+0x7c>)
 800432e:	631a      	str	r2, [r3, #48]	@ 0x30
    converter->conversion_factors[UNIT_OZ] = 0.0283495f;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	4a0b      	ldr	r2, [pc, #44]	@ (8004360 <init_mass_converter+0x80>)
 8004334:	635a      	str	r2, [r3, #52]	@ 0x34
    converter->conversion_factors[UNIT_LB] = 0.453592f;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	4a0a      	ldr	r2, [pc, #40]	@ (8004364 <init_mass_converter+0x84>)
 800433a:	639a      	str	r2, [r3, #56]	@ 0x38

    converter->to_base = NULL;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2200      	movs	r2, #0
 8004340:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = NULL;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2200      	movs	r2, #0
 8004346:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004348:	bf00      	nop
 800434a:	3714      	adds	r7, #20
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr
 8004354:	358637bd 	.word	0x358637bd
 8004358:	3a83126f 	.word	0x3a83126f
 800435c:	447a0000 	.word	0x447a0000
 8004360:	3ce83d36 	.word	0x3ce83d36
 8004364:	3ee83d36 	.word	0x3ee83d36

08004368 <init_angle_converter>:

static void init_angle_converter(UnitConverter *converter) {
 8004368:	b480      	push	{r7}
 800436a:	b085      	sub	sp, #20
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_ANGLE;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2202      	movs	r2, #2
 8004374:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_RADIAN;  /* Radian is the base unit */
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	220f      	movs	r2, #15
 800437a:	705a      	strb	r2, [r3, #1]

    /* Initialize all conversion factors to 0.0 */
    for (int i = 0; i < UNIT_COUNT; i++) {
 800437c:	2300      	movs	r3, #0
 800437e:	60fb      	str	r3, [r7, #12]
 8004380:	e00a      	b.n	8004398 <init_angle_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	4413      	add	r3, r2
 800438a:	3304      	adds	r3, #4
 800438c:	f04f 0200 	mov.w	r2, #0
 8004390:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	3301      	adds	r3, #1
 8004396:	60fb      	str	r3, [r7, #12]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2b1a      	cmp	r3, #26
 800439c:	ddf1      	ble.n	8004382 <init_angle_converter+0x1a>
    }

    /* Set conversion factors for angle units (to convert to radians) */
    converter->conversion_factors[UNIT_DEGREE] = M_PI / 180.0f;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4a0a      	ldr	r2, [pc, #40]	@ (80043cc <init_angle_converter+0x64>)
 80043a2:	63da      	str	r2, [r3, #60]	@ 0x3c
    converter->conversion_factors[UNIT_RADIAN] = 1.0f;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80043aa:	641a      	str	r2, [r3, #64]	@ 0x40
    converter->conversion_factors[UNIT_GRADIAN] = M_PI / 200.0f;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	4a08      	ldr	r2, [pc, #32]	@ (80043d0 <init_angle_converter+0x68>)
 80043b0:	645a      	str	r2, [r3, #68]	@ 0x44

    converter->to_base = NULL;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2200      	movs	r2, #0
 80043b6:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = NULL;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80043be:	bf00      	nop
 80043c0:	3714      	adds	r7, #20
 80043c2:	46bd      	mov	sp, r7
 80043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c8:	4770      	bx	lr
 80043ca:	bf00      	nop
 80043cc:	3c8efa35 	.word	0x3c8efa35
 80043d0:	3c80adfd 	.word	0x3c80adfd

080043d4 <init_time_converter>:

static void init_time_converter(UnitConverter *converter) {
 80043d4:	b480      	push	{r7}
 80043d6:	b085      	sub	sp, #20
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_TIME;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2203      	movs	r2, #3
 80043e0:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_SECOND;  /* Second is the base unit */
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2214      	movs	r2, #20
 80043e6:	705a      	strb	r2, [r3, #1]

    /* Initialize all conversion factors to 0.0 */
    for (int i = 0; i < UNIT_COUNT; i++) {
 80043e8:	2300      	movs	r3, #0
 80043ea:	60fb      	str	r3, [r7, #12]
 80043ec:	e00a      	b.n	8004404 <init_time_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 80043ee:	687a      	ldr	r2, [r7, #4]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	4413      	add	r3, r2
 80043f6:	3304      	adds	r3, #4
 80043f8:	f04f 0200 	mov.w	r2, #0
 80043fc:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	3301      	adds	r3, #1
 8004402:	60fb      	str	r3, [r7, #12]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2b1a      	cmp	r3, #26
 8004408:	ddf1      	ble.n	80043ee <init_time_converter+0x1a>
    }

    /* Set conversion factors for time units (to convert to seconds) */
    converter->conversion_factors[UNIT_NANOSECOND] = 1e-9f;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	4a10      	ldr	r2, [pc, #64]	@ (8004450 <init_time_converter+0x7c>)
 800440e:	649a      	str	r2, [r3, #72]	@ 0x48
    converter->conversion_factors[UNIT_MICROSECOND] = 1e-6f;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	4a10      	ldr	r2, [pc, #64]	@ (8004454 <init_time_converter+0x80>)
 8004414:	64da      	str	r2, [r3, #76]	@ 0x4c
    converter->conversion_factors[UNIT_MILLISECOND] = 1e-3f;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4a0f      	ldr	r2, [pc, #60]	@ (8004458 <init_time_converter+0x84>)
 800441a:	651a      	str	r2, [r3, #80]	@ 0x50
    converter->conversion_factors[UNIT_SECOND] = 1.0f;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004422:	655a      	str	r2, [r3, #84]	@ 0x54
    converter->conversion_factors[UNIT_MINUTE] = 60.0f;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	4a0d      	ldr	r2, [pc, #52]	@ (800445c <init_time_converter+0x88>)
 8004428:	659a      	str	r2, [r3, #88]	@ 0x58
    converter->conversion_factors[UNIT_HOUR] = 3600.0f;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	4a0c      	ldr	r2, [pc, #48]	@ (8004460 <init_time_converter+0x8c>)
 800442e:	65da      	str	r2, [r3, #92]	@ 0x5c
    converter->conversion_factors[UNIT_DAY] = 86400.0f;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	4a0c      	ldr	r2, [pc, #48]	@ (8004464 <init_time_converter+0x90>)
 8004434:	661a      	str	r2, [r3, #96]	@ 0x60

    converter->to_base = NULL;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2200      	movs	r2, #0
 800443a:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = NULL;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2200      	movs	r2, #0
 8004440:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004442:	bf00      	nop
 8004444:	3714      	adds	r7, #20
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr
 800444e:	bf00      	nop
 8004450:	3089705f 	.word	0x3089705f
 8004454:	358637bd 	.word	0x358637bd
 8004458:	3a83126f 	.word	0x3a83126f
 800445c:	42700000 	.word	0x42700000
 8004460:	45610000 	.word	0x45610000
 8004464:	47a8c000 	.word	0x47a8c000

08004468 <init_temperature_converter>:

static void init_temperature_converter(UnitConverter *converter) {
 8004468:	b480      	push	{r7}
 800446a:	b085      	sub	sp, #20
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_TEMPERATURE;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2204      	movs	r2, #4
 8004474:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_CELSIUS;  /* Celsius is the base unit */
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2218      	movs	r2, #24
 800447a:	705a      	strb	r2, [r3, #1]

    /* For temperature, all conversion factors are 0 because we use custom functions */
    for (int i = 0; i < UNIT_COUNT; i++) {
 800447c:	2300      	movs	r3, #0
 800447e:	60fb      	str	r3, [r7, #12]
 8004480:	e00a      	b.n	8004498 <init_temperature_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	009b      	lsls	r3, r3, #2
 8004488:	4413      	add	r3, r2
 800448a:	3304      	adds	r3, #4
 800448c:	f04f 0200 	mov.w	r2, #0
 8004490:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	3301      	adds	r3, #1
 8004496:	60fb      	str	r3, [r7, #12]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2b1a      	cmp	r3, #26
 800449c:	ddf1      	ble.n	8004482 <init_temperature_converter+0x1a>
    }

    /* Set custom conversion functions for temperature */
    converter->to_base = temperature_to_base;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	4a05      	ldr	r2, [pc, #20]	@ (80044b8 <init_temperature_converter+0x50>)
 80044a2:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = temperature_from_base;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	4a05      	ldr	r2, [pc, #20]	@ (80044bc <init_temperature_converter+0x54>)
 80044a8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80044aa:	bf00      	nop
 80044ac:	3714      	adds	r7, #20
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr
 80044b6:	bf00      	nop
 80044b8:	08004165 	.word	0x08004165
 80044bc:	080041d5 	.word	0x080041d5

080044c0 <UnitConverter_init>:

/* Initialize the unit converter system */
void UnitConverter_init(UnitConverterSystem *system) {
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b082      	sub	sp, #8
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
    /* Initialize each unit type converter */
    init_length_converter(&system->converters[UNIT_TYPE_LENGTH]);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	4618      	mov	r0, r3
 80044cc:	f7ff feba 	bl	8004244 <init_length_converter>
    init_mass_converter(&system->converters[UNIT_TYPE_MASS]);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	3378      	adds	r3, #120	@ 0x78
 80044d4:	4618      	mov	r0, r3
 80044d6:	f7ff ff03 	bl	80042e0 <init_mass_converter>
    init_angle_converter(&system->converters[UNIT_TYPE_ANGLE]);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	33f0      	adds	r3, #240	@ 0xf0
 80044de:	4618      	mov	r0, r3
 80044e0:	f7ff ff42 	bl	8004368 <init_angle_converter>
    init_time_converter(&system->converters[UNIT_TYPE_TIME]);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80044ea:	4618      	mov	r0, r3
 80044ec:	f7ff ff72 	bl	80043d4 <init_time_converter>
    init_temperature_converter(&system->converters[UNIT_TYPE_TEMPERATURE]);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 80044f6:	4618      	mov	r0, r3
 80044f8:	f7ff ffb6 	bl	8004468 <init_temperature_converter>
}
 80044fc:	bf00      	nop
 80044fe:	3708      	adds	r7, #8
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}

08004504 <UnitConverter_get_unit_type>:

/* Get the unit type for a given unit */
UnitType UnitConverter_get_unit_type(Unit unit) {
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	4603      	mov	r3, r0
 800450c:	71fb      	strb	r3, [r7, #7]
    if (unit < UNIT_COUNT) {
 800450e:	79fb      	ldrb	r3, [r7, #7]
 8004510:	2b1a      	cmp	r3, #26
 8004512:	d803      	bhi.n	800451c <UnitConverter_get_unit_type+0x18>
        return unit_types[unit];
 8004514:	79fb      	ldrb	r3, [r7, #7]
 8004516:	4a05      	ldr	r2, [pc, #20]	@ (800452c <UnitConverter_get_unit_type+0x28>)
 8004518:	5cd3      	ldrb	r3, [r2, r3]
 800451a:	e000      	b.n	800451e <UnitConverter_get_unit_type+0x1a>
    }
    return UNIT_TYPE_LENGTH; /* Default to length if invalid */
 800451c:	2300      	movs	r3, #0
}
 800451e:	4618      	mov	r0, r3
 8004520:	370c      	adds	r7, #12
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr
 800452a:	bf00      	nop
 800452c:	20000114 	.word	0x20000114

08004530 <UnitConverter_convert>:

/* Convert a value from one unit to another */
float UnitConverter_convert(UnitConverterSystem *system, float value, Unit from_unit, Unit to_unit) {
 8004530:	b580      	push	{r7, lr}
 8004532:	b088      	sub	sp, #32
 8004534:	af00      	add	r7, sp, #0
 8004536:	60f8      	str	r0, [r7, #12]
 8004538:	ed87 0a02 	vstr	s0, [r7, #8]
 800453c:	460b      	mov	r3, r1
 800453e:	71fb      	strb	r3, [r7, #7]
 8004540:	4613      	mov	r3, r2
 8004542:	71bb      	strb	r3, [r7, #6]
    /* Check if units are of the same type */
    UnitType from_type = UnitConverter_get_unit_type(from_unit);
 8004544:	79fb      	ldrb	r3, [r7, #7]
 8004546:	4618      	mov	r0, r3
 8004548:	f7ff ffdc 	bl	8004504 <UnitConverter_get_unit_type>
 800454c:	4603      	mov	r3, r0
 800454e:	76fb      	strb	r3, [r7, #27]
    UnitType to_type = UnitConverter_get_unit_type(to_unit);
 8004550:	79bb      	ldrb	r3, [r7, #6]
 8004552:	4618      	mov	r0, r3
 8004554:	f7ff ffd6 	bl	8004504 <UnitConverter_get_unit_type>
 8004558:	4603      	mov	r3, r0
 800455a:	76bb      	strb	r3, [r7, #26]

    if (from_type != to_type) {
 800455c:	7efa      	ldrb	r2, [r7, #27]
 800455e:	7ebb      	ldrb	r3, [r7, #26]
 8004560:	429a      	cmp	r2, r3
 8004562:	d002      	beq.n	800456a <UnitConverter_convert+0x3a>
        /* Cannot convert between different unit types */
        return value;
 8004564:	edd7 7a02 	vldr	s15, [r7, #8]
 8004568:	e03b      	b.n	80045e2 <UnitConverter_convert+0xb2>
    }

    /* Get the appropriate converter */
    UnitConverter *converter = &system->converters[from_type];
 800456a:	7efa      	ldrb	r2, [r7, #27]
 800456c:	4613      	mov	r3, r2
 800456e:	011b      	lsls	r3, r3, #4
 8004570:	1a9b      	subs	r3, r3, r2
 8004572:	00db      	lsls	r3, r3, #3
 8004574:	68fa      	ldr	r2, [r7, #12]
 8004576:	4413      	add	r3, r2
 8004578:	617b      	str	r3, [r7, #20]

    /* Convert to base unit */
    float base_value;
    if (converter->to_base) {
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800457e:	2b00      	cmp	r3, #0
 8004580:	d009      	beq.n	8004596 <UnitConverter_convert+0x66>
        /* Use custom function if available */
        base_value = converter->to_base(value, from_unit);
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004586:	79fa      	ldrb	r2, [r7, #7]
 8004588:	4610      	mov	r0, r2
 800458a:	ed97 0a02 	vldr	s0, [r7, #8]
 800458e:	4798      	blx	r3
 8004590:	ed87 0a07 	vstr	s0, [r7, #28]
 8004594:	e00c      	b.n	80045b0 <UnitConverter_convert+0x80>
    } else {
        /* Use conversion factor */
        base_value = value * converter->conversion_factors[from_unit];
 8004596:	79fb      	ldrb	r3, [r7, #7]
 8004598:	697a      	ldr	r2, [r7, #20]
 800459a:	009b      	lsls	r3, r3, #2
 800459c:	4413      	add	r3, r2
 800459e:	3304      	adds	r3, #4
 80045a0:	edd3 7a00 	vldr	s15, [r3]
 80045a4:	ed97 7a02 	vldr	s14, [r7, #8]
 80045a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045ac:	edc7 7a07 	vstr	s15, [r7, #28]
    }

    /* Convert from base unit to target unit */
    if (converter->from_base) {
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d009      	beq.n	80045cc <UnitConverter_convert+0x9c>
        /* Use custom function if available */
        return converter->from_base(base_value, to_unit);
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045bc:	79ba      	ldrb	r2, [r7, #6]
 80045be:	4610      	mov	r0, r2
 80045c0:	ed97 0a07 	vldr	s0, [r7, #28]
 80045c4:	4798      	blx	r3
 80045c6:	eef0 7a40 	vmov.f32	s15, s0
 80045ca:	e00a      	b.n	80045e2 <UnitConverter_convert+0xb2>
    } else {
        /* Use conversion factor */
        return base_value / converter->conversion_factors[to_unit];
 80045cc:	79bb      	ldrb	r3, [r7, #6]
 80045ce:	697a      	ldr	r2, [r7, #20]
 80045d0:	009b      	lsls	r3, r3, #2
 80045d2:	4413      	add	r3, r2
 80045d4:	3304      	adds	r3, #4
 80045d6:	ed93 7a00 	vldr	s14, [r3]
 80045da:	edd7 6a07 	vldr	s13, [r7, #28]
 80045de:	eec6 7a87 	vdiv.f32	s15, s13, s14
    }
}
 80045e2:	eeb0 0a67 	vmov.f32	s0, s15
 80045e6:	3720      	adds	r7, #32
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}

080045ec <UnitConverter_angle>:
        return UnitConverter_convert(system, value, from_unit, to_unit);
    }
    return value;
}

float UnitConverter_angle(UnitConverterSystem *system, float value, Unit from_unit, Unit to_unit) {
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b084      	sub	sp, #16
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	60f8      	str	r0, [r7, #12]
 80045f4:	ed87 0a02 	vstr	s0, [r7, #8]
 80045f8:	460b      	mov	r3, r1
 80045fa:	71fb      	strb	r3, [r7, #7]
 80045fc:	4613      	mov	r3, r2
 80045fe:	71bb      	strb	r3, [r7, #6]
    if (UnitConverter_get_unit_type(from_unit) == UNIT_TYPE_ANGLE &&
 8004600:	79fb      	ldrb	r3, [r7, #7]
 8004602:	4618      	mov	r0, r3
 8004604:	f7ff ff7e 	bl	8004504 <UnitConverter_get_unit_type>
 8004608:	4603      	mov	r3, r0
 800460a:	2b02      	cmp	r3, #2
 800460c:	d111      	bne.n	8004632 <UnitConverter_angle+0x46>
        UnitConverter_get_unit_type(to_unit) == UNIT_TYPE_ANGLE) {
 800460e:	79bb      	ldrb	r3, [r7, #6]
 8004610:	4618      	mov	r0, r3
 8004612:	f7ff ff77 	bl	8004504 <UnitConverter_get_unit_type>
 8004616:	4603      	mov	r3, r0
    if (UnitConverter_get_unit_type(from_unit) == UNIT_TYPE_ANGLE &&
 8004618:	2b02      	cmp	r3, #2
 800461a:	d10a      	bne.n	8004632 <UnitConverter_angle+0x46>
        return UnitConverter_convert(system, value, from_unit, to_unit);
 800461c:	79ba      	ldrb	r2, [r7, #6]
 800461e:	79fb      	ldrb	r3, [r7, #7]
 8004620:	4619      	mov	r1, r3
 8004622:	ed97 0a02 	vldr	s0, [r7, #8]
 8004626:	68f8      	ldr	r0, [r7, #12]
 8004628:	f7ff ff82 	bl	8004530 <UnitConverter_convert>
 800462c:	eef0 7a40 	vmov.f32	s15, s0
 8004630:	e001      	b.n	8004636 <UnitConverter_angle+0x4a>
    }
    return value;
 8004632:	edd7 7a02 	vldr	s15, [r7, #8]
}
 8004636:	eeb0 0a67 	vmov.f32	s0, s15
 800463a:	3710      	adds	r7, #16
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}

08004640 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b08c      	sub	sp, #48	@ 0x30
 8004644:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8004646:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800464a:	2200      	movs	r2, #0
 800464c:	601a      	str	r2, [r3, #0]
 800464e:	605a      	str	r2, [r3, #4]
 8004650:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8004652:	1d3b      	adds	r3, r7, #4
 8004654:	2220      	movs	r2, #32
 8004656:	2100      	movs	r1, #0
 8004658:	4618      	mov	r0, r3
 800465a:	f00c fb31 	bl	8010cc0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800465e:	4b39      	ldr	r3, [pc, #228]	@ (8004744 <MX_ADC1_Init+0x104>)
 8004660:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8004664:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004666:	4b37      	ldr	r3, [pc, #220]	@ (8004744 <MX_ADC1_Init+0x104>)
 8004668:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800466c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800466e:	4b35      	ldr	r3, [pc, #212]	@ (8004744 <MX_ADC1_Init+0x104>)
 8004670:	2200      	movs	r2, #0
 8004672:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004674:	4b33      	ldr	r3, [pc, #204]	@ (8004744 <MX_ADC1_Init+0x104>)
 8004676:	2200      	movs	r2, #0
 8004678:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800467a:	4b32      	ldr	r3, [pc, #200]	@ (8004744 <MX_ADC1_Init+0x104>)
 800467c:	2200      	movs	r2, #0
 800467e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8004680:	4b30      	ldr	r3, [pc, #192]	@ (8004744 <MX_ADC1_Init+0x104>)
 8004682:	2201      	movs	r2, #1
 8004684:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004686:	4b2f      	ldr	r3, [pc, #188]	@ (8004744 <MX_ADC1_Init+0x104>)
 8004688:	2204      	movs	r2, #4
 800468a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800468c:	4b2d      	ldr	r3, [pc, #180]	@ (8004744 <MX_ADC1_Init+0x104>)
 800468e:	2200      	movs	r2, #0
 8004690:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8004692:	4b2c      	ldr	r3, [pc, #176]	@ (8004744 <MX_ADC1_Init+0x104>)
 8004694:	2201      	movs	r2, #1
 8004696:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 8004698:	4b2a      	ldr	r3, [pc, #168]	@ (8004744 <MX_ADC1_Init+0x104>)
 800469a:	2202      	movs	r2, #2
 800469c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800469e:	4b29      	ldr	r3, [pc, #164]	@ (8004744 <MX_ADC1_Init+0x104>)
 80046a0:	2200      	movs	r2, #0
 80046a2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80046a6:	4b27      	ldr	r3, [pc, #156]	@ (8004744 <MX_ADC1_Init+0x104>)
 80046a8:	2200      	movs	r2, #0
 80046aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80046ac:	4b25      	ldr	r3, [pc, #148]	@ (8004744 <MX_ADC1_Init+0x104>)
 80046ae:	2200      	movs	r2, #0
 80046b0:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80046b2:	4b24      	ldr	r3, [pc, #144]	@ (8004744 <MX_ADC1_Init+0x104>)
 80046b4:	2201      	movs	r2, #1
 80046b6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80046ba:	4b22      	ldr	r3, [pc, #136]	@ (8004744 <MX_ADC1_Init+0x104>)
 80046bc:	2200      	movs	r2, #0
 80046be:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80046c0:	4b20      	ldr	r3, [pc, #128]	@ (8004744 <MX_ADC1_Init+0x104>)
 80046c2:	2200      	movs	r2, #0
 80046c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80046c8:	481e      	ldr	r0, [pc, #120]	@ (8004744 <MX_ADC1_Init+0x104>)
 80046ca:	f004 fdab 	bl	8009224 <HAL_ADC_Init>
 80046ce:	4603      	mov	r3, r0
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d001      	beq.n	80046d8 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80046d4:	f002 fdd8 	bl	8007288 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80046d8:	2300      	movs	r3, #0
 80046da:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80046dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80046e0:	4619      	mov	r1, r3
 80046e2:	4818      	ldr	r0, [pc, #96]	@ (8004744 <MX_ADC1_Init+0x104>)
 80046e4:	f005 feca 	bl	800a47c <HAL_ADCEx_MultiModeConfigChannel>
 80046e8:	4603      	mov	r3, r0
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d001      	beq.n	80046f2 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80046ee:	f002 fdcb 	bl	8007288 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80046f2:	4b15      	ldr	r3, [pc, #84]	@ (8004748 <MX_ADC1_Init+0x108>)
 80046f4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80046f6:	2306      	movs	r3, #6
 80046f8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80046fa:	2307      	movs	r3, #7
 80046fc:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80046fe:	237f      	movs	r3, #127	@ 0x7f
 8004700:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004702:	2304      	movs	r3, #4
 8004704:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8004706:	2300      	movs	r3, #0
 8004708:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800470a:	1d3b      	adds	r3, r7, #4
 800470c:	4619      	mov	r1, r3
 800470e:	480d      	ldr	r0, [pc, #52]	@ (8004744 <MX_ADC1_Init+0x104>)
 8004710:	f005 f836 	bl	8009780 <HAL_ADC_ConfigChannel>
 8004714:	4603      	mov	r3, r0
 8004716:	2b00      	cmp	r3, #0
 8004718:	d001      	beq.n	800471e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800471a:	f002 fdb5 	bl	8007288 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800471e:	4b0b      	ldr	r3, [pc, #44]	@ (800474c <MX_ADC1_Init+0x10c>)
 8004720:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8004722:	230c      	movs	r3, #12
 8004724:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004726:	1d3b      	adds	r3, r7, #4
 8004728:	4619      	mov	r1, r3
 800472a:	4806      	ldr	r0, [pc, #24]	@ (8004744 <MX_ADC1_Init+0x104>)
 800472c:	f005 f828 	bl	8009780 <HAL_ADC_ConfigChannel>
 8004730:	4603      	mov	r3, r0
 8004732:	2b00      	cmp	r3, #0
 8004734:	d001      	beq.n	800473a <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8004736:	f002 fda7 	bl	8007288 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800473a:	bf00      	nop
 800473c:	3730      	adds	r7, #48	@ 0x30
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
 8004742:	bf00      	nop
 8004744:	200001ac 	.word	0x200001ac
 8004748:	19200040 	.word	0x19200040
 800474c:	1d500080 	.word	0x1d500080

08004750 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b09e      	sub	sp, #120	@ 0x78
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004758:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800475c:	2200      	movs	r2, #0
 800475e:	601a      	str	r2, [r3, #0]
 8004760:	605a      	str	r2, [r3, #4]
 8004762:	609a      	str	r2, [r3, #8]
 8004764:	60da      	str	r2, [r3, #12]
 8004766:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004768:	f107 0310 	add.w	r3, r7, #16
 800476c:	2254      	movs	r2, #84	@ 0x54
 800476e:	2100      	movs	r1, #0
 8004770:	4618      	mov	r0, r3
 8004772:	f00c faa5 	bl	8010cc0 <memset>
  if(adcHandle->Instance==ADC1)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800477e:	d15e      	bne.n	800483e <HAL_ADC_MspInit+0xee>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8004780:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004784:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8004786:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800478a:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800478c:	f107 0310 	add.w	r3, r7, #16
 8004790:	4618      	mov	r0, r3
 8004792:	f007 fb83 	bl	800be9c <HAL_RCCEx_PeriphCLKConfig>
 8004796:	4603      	mov	r3, r0
 8004798:	2b00      	cmp	r3, #0
 800479a:	d001      	beq.n	80047a0 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800479c:	f002 fd74 	bl	8007288 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80047a0:	4b29      	ldr	r3, [pc, #164]	@ (8004848 <HAL_ADC_MspInit+0xf8>)
 80047a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047a4:	4a28      	ldr	r2, [pc, #160]	@ (8004848 <HAL_ADC_MspInit+0xf8>)
 80047a6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80047aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80047ac:	4b26      	ldr	r3, [pc, #152]	@ (8004848 <HAL_ADC_MspInit+0xf8>)
 80047ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80047b4:	60fb      	str	r3, [r7, #12]
 80047b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80047b8:	4b23      	ldr	r3, [pc, #140]	@ (8004848 <HAL_ADC_MspInit+0xf8>)
 80047ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047bc:	4a22      	ldr	r2, [pc, #136]	@ (8004848 <HAL_ADC_MspInit+0xf8>)
 80047be:	f043 0304 	orr.w	r3, r3, #4
 80047c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80047c4:	4b20      	ldr	r3, [pc, #128]	@ (8004848 <HAL_ADC_MspInit+0xf8>)
 80047c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047c8:	f003 0304 	and.w	r3, r3, #4
 80047cc:	60bb      	str	r3, [r7, #8]
 80047ce:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN6
    PC1     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80047d0:	2303      	movs	r3, #3
 80047d2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80047d4:	2303      	movs	r3, #3
 80047d6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047d8:	2300      	movs	r3, #0
 80047da:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80047dc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80047e0:	4619      	mov	r1, r3
 80047e2:	481a      	ldr	r0, [pc, #104]	@ (800484c <HAL_ADC_MspInit+0xfc>)
 80047e4:	f006 fb94 	bl	800af10 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80047e8:	4b19      	ldr	r3, [pc, #100]	@ (8004850 <HAL_ADC_MspInit+0x100>)
 80047ea:	4a1a      	ldr	r2, [pc, #104]	@ (8004854 <HAL_ADC_MspInit+0x104>)
 80047ec:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80047ee:	4b18      	ldr	r3, [pc, #96]	@ (8004850 <HAL_ADC_MspInit+0x100>)
 80047f0:	2205      	movs	r2, #5
 80047f2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80047f4:	4b16      	ldr	r3, [pc, #88]	@ (8004850 <HAL_ADC_MspInit+0x100>)
 80047f6:	2200      	movs	r2, #0
 80047f8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80047fa:	4b15      	ldr	r3, [pc, #84]	@ (8004850 <HAL_ADC_MspInit+0x100>)
 80047fc:	2200      	movs	r2, #0
 80047fe:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004800:	4b13      	ldr	r3, [pc, #76]	@ (8004850 <HAL_ADC_MspInit+0x100>)
 8004802:	2280      	movs	r2, #128	@ 0x80
 8004804:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004806:	4b12      	ldr	r3, [pc, #72]	@ (8004850 <HAL_ADC_MspInit+0x100>)
 8004808:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800480c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800480e:	4b10      	ldr	r3, [pc, #64]	@ (8004850 <HAL_ADC_MspInit+0x100>)
 8004810:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004814:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004816:	4b0e      	ldr	r3, [pc, #56]	@ (8004850 <HAL_ADC_MspInit+0x100>)
 8004818:	2220      	movs	r2, #32
 800481a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800481c:	4b0c      	ldr	r3, [pc, #48]	@ (8004850 <HAL_ADC_MspInit+0x100>)
 800481e:	2200      	movs	r2, #0
 8004820:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004822:	480b      	ldr	r0, [pc, #44]	@ (8004850 <HAL_ADC_MspInit+0x100>)
 8004824:	f006 f842 	bl	800a8ac <HAL_DMA_Init>
 8004828:	4603      	mov	r3, r0
 800482a:	2b00      	cmp	r3, #0
 800482c:	d001      	beq.n	8004832 <HAL_ADC_MspInit+0xe2>
    {
      Error_Handler();
 800482e:	f002 fd2b 	bl	8007288 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	4a06      	ldr	r2, [pc, #24]	@ (8004850 <HAL_ADC_MspInit+0x100>)
 8004836:	655a      	str	r2, [r3, #84]	@ 0x54
 8004838:	4a05      	ldr	r2, [pc, #20]	@ (8004850 <HAL_ADC_MspInit+0x100>)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800483e:	bf00      	nop
 8004840:	3778      	adds	r7, #120	@ 0x78
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}
 8004846:	bf00      	nop
 8004848:	40021000 	.word	0x40021000
 800484c:	48000800 	.word	0x48000800
 8004850:	20000218 	.word	0x20000218
 8004854:	40020008 	.word	0x40020008

08004858 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b082      	sub	sp, #8
 800485c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800485e:	4b22      	ldr	r3, [pc, #136]	@ (80048e8 <MX_DMA_Init+0x90>)
 8004860:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004862:	4a21      	ldr	r2, [pc, #132]	@ (80048e8 <MX_DMA_Init+0x90>)
 8004864:	f043 0304 	orr.w	r3, r3, #4
 8004868:	6493      	str	r3, [r2, #72]	@ 0x48
 800486a:	4b1f      	ldr	r3, [pc, #124]	@ (80048e8 <MX_DMA_Init+0x90>)
 800486c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800486e:	f003 0304 	and.w	r3, r3, #4
 8004872:	607b      	str	r3, [r7, #4]
 8004874:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004876:	4b1c      	ldr	r3, [pc, #112]	@ (80048e8 <MX_DMA_Init+0x90>)
 8004878:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800487a:	4a1b      	ldr	r2, [pc, #108]	@ (80048e8 <MX_DMA_Init+0x90>)
 800487c:	f043 0301 	orr.w	r3, r3, #1
 8004880:	6493      	str	r3, [r2, #72]	@ 0x48
 8004882:	4b19      	ldr	r3, [pc, #100]	@ (80048e8 <MX_DMA_Init+0x90>)
 8004884:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004886:	f003 0301 	and.w	r3, r3, #1
 800488a:	603b      	str	r3, [r7, #0]
 800488c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800488e:	2200      	movs	r2, #0
 8004890:	2100      	movs	r1, #0
 8004892:	200b      	movs	r0, #11
 8004894:	f005 ffd5 	bl	800a842 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8004898:	200b      	movs	r0, #11
 800489a:	f005 ffec 	bl	800a876 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800489e:	2200      	movs	r2, #0
 80048a0:	2100      	movs	r1, #0
 80048a2:	200c      	movs	r0, #12
 80048a4:	f005 ffcd 	bl	800a842 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80048a8:	200c      	movs	r0, #12
 80048aa:	f005 ffe4 	bl	800a876 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80048ae:	2200      	movs	r2, #0
 80048b0:	2100      	movs	r1, #0
 80048b2:	200d      	movs	r0, #13
 80048b4:	f005 ffc5 	bl	800a842 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80048b8:	200d      	movs	r0, #13
 80048ba:	f005 ffdc 	bl	800a876 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80048be:	2200      	movs	r2, #0
 80048c0:	2100      	movs	r1, #0
 80048c2:	200e      	movs	r0, #14
 80048c4:	f005 ffbd 	bl	800a842 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80048c8:	200e      	movs	r0, #14
 80048ca:	f005 ffd4 	bl	800a876 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80048ce:	2200      	movs	r2, #0
 80048d0:	2100      	movs	r1, #0
 80048d2:	200f      	movs	r0, #15
 80048d4:	f005 ffb5 	bl	800a842 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80048d8:	200f      	movs	r0, #15
 80048da:	f005 ffcc 	bl	800a876 <HAL_NVIC_EnableIRQ>

}
 80048de:	bf00      	nop
 80048e0:	3708      	adds	r7, #8
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	bf00      	nop
 80048e8:	40021000 	.word	0x40021000

080048ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b08a      	sub	sp, #40	@ 0x28
 80048f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048f2:	f107 0314 	add.w	r3, r7, #20
 80048f6:	2200      	movs	r2, #0
 80048f8:	601a      	str	r2, [r3, #0]
 80048fa:	605a      	str	r2, [r3, #4]
 80048fc:	609a      	str	r2, [r3, #8]
 80048fe:	60da      	str	r2, [r3, #12]
 8004900:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004902:	4b67      	ldr	r3, [pc, #412]	@ (8004aa0 <MX_GPIO_Init+0x1b4>)
 8004904:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004906:	4a66      	ldr	r2, [pc, #408]	@ (8004aa0 <MX_GPIO_Init+0x1b4>)
 8004908:	f043 0304 	orr.w	r3, r3, #4
 800490c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800490e:	4b64      	ldr	r3, [pc, #400]	@ (8004aa0 <MX_GPIO_Init+0x1b4>)
 8004910:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004912:	f003 0304 	and.w	r3, r3, #4
 8004916:	613b      	str	r3, [r7, #16]
 8004918:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800491a:	4b61      	ldr	r3, [pc, #388]	@ (8004aa0 <MX_GPIO_Init+0x1b4>)
 800491c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800491e:	4a60      	ldr	r2, [pc, #384]	@ (8004aa0 <MX_GPIO_Init+0x1b4>)
 8004920:	f043 0320 	orr.w	r3, r3, #32
 8004924:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004926:	4b5e      	ldr	r3, [pc, #376]	@ (8004aa0 <MX_GPIO_Init+0x1b4>)
 8004928:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800492a:	f003 0320 	and.w	r3, r3, #32
 800492e:	60fb      	str	r3, [r7, #12]
 8004930:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004932:	4b5b      	ldr	r3, [pc, #364]	@ (8004aa0 <MX_GPIO_Init+0x1b4>)
 8004934:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004936:	4a5a      	ldr	r2, [pc, #360]	@ (8004aa0 <MX_GPIO_Init+0x1b4>)
 8004938:	f043 0301 	orr.w	r3, r3, #1
 800493c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800493e:	4b58      	ldr	r3, [pc, #352]	@ (8004aa0 <MX_GPIO_Init+0x1b4>)
 8004940:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004942:	f003 0301 	and.w	r3, r3, #1
 8004946:	60bb      	str	r3, [r7, #8]
 8004948:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800494a:	4b55      	ldr	r3, [pc, #340]	@ (8004aa0 <MX_GPIO_Init+0x1b4>)
 800494c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800494e:	4a54      	ldr	r2, [pc, #336]	@ (8004aa0 <MX_GPIO_Init+0x1b4>)
 8004950:	f043 0302 	orr.w	r3, r3, #2
 8004954:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004956:	4b52      	ldr	r3, [pc, #328]	@ (8004aa0 <MX_GPIO_Init+0x1b4>)
 8004958:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800495a:	f003 0302 	and.w	r3, r3, #2
 800495e:	607b      	str	r3, [r7, #4]
 8004960:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9|PILOT_Pin, GPIO_PIN_RESET);
 8004962:	2200      	movs	r2, #0
 8004964:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 8004968:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800496c:	f006 fc6a 	bl	800b244 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8004970:	2200      	movs	r2, #0
 8004972:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004976:	484b      	ldr	r0, [pc, #300]	@ (8004aa4 <MX_GPIO_Init+0x1b8>)
 8004978:	f006 fc64 	bl	800b244 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : B1_Pin J3_Pin J4_Pin */
  GPIO_InitStruct.Pin = B1_Pin|J3_Pin|J4_Pin;
 800497c:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 8004980:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004982:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004986:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004988:	2300      	movs	r3, #0
 800498a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800498c:	f107 0314 	add.w	r3, r7, #20
 8004990:	4619      	mov	r1, r3
 8004992:	4844      	ldr	r0, [pc, #272]	@ (8004aa4 <MX_GPIO_Init+0x1b8>)
 8004994:	f006 fabc 	bl	800af10 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA9 PILOT_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_9|PILOT_Pin;
 8004998:	f44f 63c4 	mov.w	r3, #1568	@ 0x620
 800499c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800499e:	2301      	movs	r3, #1
 80049a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049a2:	2300      	movs	r3, #0
 80049a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049a6:	2300      	movs	r3, #0
 80049a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049aa:	f107 0314 	add.w	r3, r7, #20
 80049ae:	4619      	mov	r1, r3
 80049b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80049b4:	f006 faac 	bl	800af10 <HAL_GPIO_Init>

  /*Configure GPIO pins : UPPER_PHOTO_Pin LOWER_PHOTO_Pin J1_Pin */
  GPIO_InitStruct.Pin = UPPER_PHOTO_Pin|LOWER_PHOTO_Pin|J1_Pin;
 80049b8:	f241 0381 	movw	r3, #4225	@ 0x1081
 80049bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80049be:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80049c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049c4:	2300      	movs	r3, #0
 80049c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049c8:	f107 0314 	add.w	r3, r7, #20
 80049cc:	4619      	mov	r1, r3
 80049ce:	4836      	ldr	r0, [pc, #216]	@ (8004aa8 <MX_GPIO_Init+0x1bc>)
 80049d0:	f006 fa9e 	bl	800af10 <HAL_GPIO_Init>

  /*Configure GPIO pins : LOWER_LIM_Pin UPPER_LIM_Pin */
  GPIO_InitStruct.Pin = LOWER_LIM_Pin|UPPER_LIM_Pin;
 80049d4:	2306      	movs	r3, #6
 80049d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80049d8:	2300      	movs	r3, #0
 80049da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80049dc:	2302      	movs	r3, #2
 80049de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049e0:	f107 0314 	add.w	r3, r7, #20
 80049e4:	4619      	mov	r1, r3
 80049e6:	4830      	ldr	r0, [pc, #192]	@ (8004aa8 <MX_GPIO_Init+0x1bc>)
 80049e8:	f006 fa92 	bl	800af10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80049ec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80049f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80049f2:	2301      	movs	r3, #1
 80049f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049f6:	2300      	movs	r3, #0
 80049f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049fa:	2300      	movs	r3, #0
 80049fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80049fe:	f107 0314 	add.w	r3, r7, #20
 8004a02:	4619      	mov	r1, r3
 8004a04:	4827      	ldr	r0, [pc, #156]	@ (8004aa4 <MX_GPIO_Init+0x1b8>)
 8004a06:	f006 fa83 	bl	800af10 <HAL_GPIO_Init>

  /*Configure GPIO pin : J2_Pin */
  GPIO_InitStruct.Pin = J2_Pin;
 8004a0a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004a0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004a10:	2300      	movs	r3, #0
 8004a12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a14:	2300      	movs	r3, #0
 8004a16:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(J2_GPIO_Port, &GPIO_InitStruct);
 8004a18:	f107 0314 	add.w	r3, r7, #20
 8004a1c:	4619      	mov	r1, r3
 8004a1e:	4821      	ldr	r0, [pc, #132]	@ (8004aa4 <MX_GPIO_Init+0x1b8>)
 8004a20:	f006 fa76 	bl	800af10 <HAL_GPIO_Init>

  /*Configure GPIO pin : EMER_Pin */
  GPIO_InitStruct.Pin = EMER_Pin;
 8004a24:	2310      	movs	r3, #16
 8004a26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004a28:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8004a2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EMER_GPIO_Port, &GPIO_InitStruct);
 8004a32:	f107 0314 	add.w	r3, r7, #20
 8004a36:	4619      	mov	r1, r3
 8004a38:	481b      	ldr	r0, [pc, #108]	@ (8004aa8 <MX_GPIO_Init+0x1bc>)
 8004a3a:	f006 fa69 	bl	800af10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PROX_Pin */
  GPIO_InitStruct.Pin = PROX_Pin;
 8004a3e:	2340      	movs	r3, #64	@ 0x40
 8004a40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004a42:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004a46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PROX_GPIO_Port, &GPIO_InitStruct);
 8004a4c:	f107 0314 	add.w	r3, r7, #20
 8004a50:	4619      	mov	r1, r3
 8004a52:	4815      	ldr	r0, [pc, #84]	@ (8004aa8 <MX_GPIO_Init+0x1bc>)
 8004a54:	f006 fa5c 	bl	800af10 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8004a58:	2200      	movs	r2, #0
 8004a5a:	2100      	movs	r1, #0
 8004a5c:	2006      	movs	r0, #6
 8004a5e:	f005 fef0 	bl	800a842 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8004a62:	2006      	movs	r0, #6
 8004a64:	f005 ff07 	bl	800a876 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8004a68:	2200      	movs	r2, #0
 8004a6a:	2100      	movs	r1, #0
 8004a6c:	200a      	movs	r0, #10
 8004a6e:	f005 fee8 	bl	800a842 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8004a72:	200a      	movs	r0, #10
 8004a74:	f005 feff 	bl	800a876 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8004a78:	2200      	movs	r2, #0
 8004a7a:	2100      	movs	r1, #0
 8004a7c:	2017      	movs	r0, #23
 8004a7e:	f005 fee0 	bl	800a842 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004a82:	2017      	movs	r0, #23
 8004a84:	f005 fef7 	bl	800a876 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8004a88:	2200      	movs	r2, #0
 8004a8a:	2100      	movs	r1, #0
 8004a8c:	2028      	movs	r0, #40	@ 0x28
 8004a8e:	f005 fed8 	bl	800a842 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004a92:	2028      	movs	r0, #40	@ 0x28
 8004a94:	f005 feef 	bl	800a876 <HAL_NVIC_EnableIRQ>

}
 8004a98:	bf00      	nop
 8004a9a:	3728      	adds	r7, #40	@ 0x28
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}
 8004aa0:	40021000 	.word	0x40021000
 8004aa4:	48000800 	.word	0x48000800
 8004aa8:	48000400 	.word	0x48000400

08004aac <SteadyStateKalmanFilter>:
//arm_matrix_instance_f32 R_matrix;
//arm_matrix_instance_f32 Z_matrix;
//arm_matrix_instance_f32 Velocity_matrix;


float SteadyStateKalmanFilter(KalmanFilter* filter, float32_t Vin,float32_t Velocity){
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b096      	sub	sp, #88	@ 0x58
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	60f8      	str	r0, [r7, #12]
 8004ab4:	ed87 0a02 	vstr	s0, [r7, #8]
 8004ab8:	edc7 0a01 	vstr	s1, [r7, #4]
	  arm_mat_init_f32(&filter->Velocity_matrix, 1, 1,(float32_t*) &Velocity);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f503 705d 	add.w	r0, r3, #884	@ 0x374
 8004ac2:	1d3b      	adds	r3, r7, #4
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	2101      	movs	r1, #1
 8004ac8:	f00b fb89 	bl	80101de <arm_mat_init_f32>
	  arm_mat_trans_f32(&filter->A_matrix, &filter->A_transpose_matrix);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f503 722d 	add.w	r2, r3, #692	@ 0x2b4
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	f503 732f 	add.w	r3, r3, #700	@ 0x2bc
 8004ad8:	4619      	mov	r1, r3
 8004ada:	4610      	mov	r0, r2
 8004adc:	f00b fff9 	bl	8010ad2 <arm_mat_trans_f32>
	  arm_mat_trans_f32(&filter->C_matrix, &filter->C_transpose_matrix);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f503 7235 	add.w	r2, r3, #724	@ 0x2d4
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	f503 7337 	add.w	r3, r3, #732	@ 0x2dc
 8004aec:	4619      	mov	r1, r3
 8004aee:	4610      	mov	r0, r2
 8004af0:	f00b ffef 	bl	8010ad2 <arm_mat_trans_f32>
	  arm_mat_trans_f32(&filter->G_matrix, &filter->G_transpose_matrix);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f503 7239 	add.w	r2, r3, #740	@ 0x2e4
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	f503 733b 	add.w	r3, r3, #748	@ 0x2ec
 8004b00:	4619      	mov	r1, r3
 8004b02:	4610      	mov	r0, r2
 8004b04:	f00b ffe5 	bl	8010ad2 <arm_mat_trans_f32>
	  // Compute Xk = Ax + Bu
	  arm_mat_scale_f32(&filter->B_matrix, Vin, &filter->Bu_matrix); 		   				// Bu
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f503 7233 	add.w	r2, r3, #716	@ 0x2cc
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	f503 7343 	add.w	r3, r3, #780	@ 0x30c
 8004b14:	4619      	mov	r1, r3
 8004b16:	ed97 0a02 	vldr	s0, [r7, #8]
 8004b1a:	4610      	mov	r0, r2
 8004b1c:	f00b ff68 	bl	80109f0 <arm_mat_scale_f32>
	  arm_mat_mult_f32(&filter->A_matrix, &filter->X_k_matrix, &filter->Ax_matrix);  		   		// Ax
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f503 702d 	add.w	r0, r3, #692	@ 0x2b4
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	f503 7129 	add.w	r1, r3, #676	@ 0x2a4
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	f503 7345 	add.w	r3, r3, #788	@ 0x314
 8004b32:	461a      	mov	r2, r3
 8004b34:	f00b fee2 	bl	80108fc <arm_mat_mult_f32>
	  arm_mat_add_f32(&filter->Ax_matrix, &filter->Bu_matrix, &filter->X_k_matrix); 		   		// Xk = Ax + Bu
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f503 7045 	add.w	r0, r3, #788	@ 0x314
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	f503 7143 	add.w	r1, r3, #780	@ 0x30c
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f503 7329 	add.w	r3, r3, #676	@ 0x2a4
 8004b4a:	461a      	mov	r2, r3
 8004b4c:	f00b fb0c 	bl	8010168 <arm_mat_add_f32>

	  // Compute (A * P_pk * A^T + G * Q * G^T)
	  arm_mat_mult_f32(&filter->A_matrix, &filter->P_k_matrix, &filter->P_k_matrix);  		   		// Pk = A * P_pk
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f503 702d 	add.w	r0, r3, #692	@ 0x2b4
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	f503 712b 	add.w	r1, r3, #684	@ 0x2ac
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f503 732b 	add.w	r3, r3, #684	@ 0x2ac
 8004b62:	461a      	mov	r2, r3
 8004b64:	f00b feca 	bl	80108fc <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->P_k_matrix, &filter->A_transpose_matrix, &filter->P_k_matrix); 		// Pk = A * P_pk * A^T
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	f503 712f 	add.w	r1, r3, #700	@ 0x2bc
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f503 732b 	add.w	r3, r3, #684	@ 0x2ac
 8004b7a:	461a      	mov	r2, r3
 8004b7c:	f00b febe 	bl	80108fc <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->G_matrix, &filter->G_transpose_matrix, &filter->GGT_matrix);        // G * G^T
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f503 7039 	add.w	r0, r3, #740	@ 0x2e4
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	f503 713b 	add.w	r1, r3, #748	@ 0x2ec
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f503 733f 	add.w	r3, r3, #764	@ 0x2fc
 8004b92:	461a      	mov	r2, r3
 8004b94:	f00b feb2 	bl	80108fc <arm_mat_mult_f32>
	  arm_mat_scale_f32(&filter->GGT_matrix, filter->Q, &filter->GQGT_matrix); 				   	   	// G * Q
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f503 723f 	add.w	r2, r3, #764	@ 0x2fc
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	edd3 7a30 	vldr	s15, [r3, #192]	@ 0xc0
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 8004baa:	4619      	mov	r1, r3
 8004bac:	eeb0 0a67 	vmov.f32	s0, s15
 8004bb0:	4610      	mov	r0, r2
 8004bb2:	f00b ff1d 	bl	80109f0 <arm_mat_scale_f32>
	  arm_mat_add_f32(&filter->P_k_matrix, &filter->GQGT_matrix, &filter->P_k_matrix); 	       		// A * P_pk * A^T + G * Q * G^T
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f503 7141 	add.w	r1, r3, #772	@ 0x304
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	f503 732b 	add.w	r3, r3, #684	@ 0x2ac
 8004bc8:	461a      	mov	r2, r3
 8004bca:	f00b facd 	bl	8010168 <arm_mat_add_f32>

	  // Compute (C * P_k * C^T + R)
	  arm_mat_mult_f32(&filter->C_matrix, &filter->P_k_matrix, &filter->CP_matrix);			     // C * Pk
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f503 712b 	add.w	r1, r3, #684	@ 0x2ac
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	f503 7347 	add.w	r3, r3, #796	@ 0x31c
 8004be0:	461a      	mov	r2, r3
 8004be2:	f00b fe8b 	bl	80108fc <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->CP_matrix, &filter->C_transpose_matrix, &filter->CPCT_matrix);   // C * Pk * C^T
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	f503 7047 	add.w	r0, r3, #796	@ 0x31c
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f503 7137 	add.w	r1, r3, #732	@ 0x2dc
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	f503 7349 	add.w	r3, r3, #804	@ 0x324
 8004bf8:	461a      	mov	r2, r3
 8004bfa:	f00b fe7f 	bl	80108fc <arm_mat_mult_f32>
	  arm_mat_add_f32(&filter->CPCT_matrix, &filter->R_matrix, &filter->CPCTR_matrix);			 // C * P_k * C^T + R
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	f503 7049 	add.w	r0, r3, #804	@ 0x324
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f503 7159 	add.w	r1, r3, #868	@ 0x364
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	f503 734b 	add.w	r3, r3, #812	@ 0x32c
 8004c10:	461a      	mov	r2, r3
 8004c12:	f00b faa9 	bl	8010168 <arm_mat_add_f32>

	  // Compute inverse of (C * P_k * C^T + R)
	  arm_mat_inverse_f32(&filter->CPCTR_matrix, &filter->CPCTRinv_matrix);					 // inverse of (C * P_k * C^T + R)
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	f503 724b 	add.w	r2, r3, #812	@ 0x32c
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f503 7351 	add.w	r3, r3, #836	@ 0x344
 8004c22:	4619      	mov	r1, r3
 8004c24:	4610      	mov	r0, r2
 8004c26:	f00b faf2 	bl	801020e <arm_mat_inverse_f32>

	  // Compute Kalman Gain: K = P_k * C^T * inv(C * P_k * C^T + R)
	  arm_mat_mult_f32(&filter->P_k_matrix, &filter->C_transpose_matrix, &filter->PCT_matrix); 		 // P_k * C^T
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f503 7137 	add.w	r1, r3, #732	@ 0x2dc
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	f503 734f 	add.w	r3, r3, #828	@ 0x33c
 8004c3c:	461a      	mov	r2, r3
 8004c3e:	f00b fe5d 	bl	80108fc <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->PCT_matrix, &filter->CPCTRinv_matrix, &filter->K_matrix);  			 // P_k * C^T * inv(C * P_k * C^T + R)
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	f503 704f 	add.w	r0, r3, #828	@ 0x33c
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f503 7151 	add.w	r1, r3, #836	@ 0x344
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	f503 734d 	add.w	r3, r3, #820	@ 0x334
 8004c54:	461a      	mov	r2, r3
 8004c56:	f00b fe51 	bl	80108fc <arm_mat_mult_f32>

	  // Computation of the estimated state
	  arm_mat_mult_f32(&filter->C_matrix, &filter->X_k_matrix, &filter->Cx_matrix);				 // C * X_k
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f503 7129 	add.w	r1, r3, #676	@ 0x2a4
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	f503 7353 	add.w	r3, r3, #844	@ 0x34c
 8004c6c:	461a      	mov	r2, r3
 8004c6e:	f00b fe45 	bl	80108fc <arm_mat_mult_f32>
	  arm_mat_sub_f32(&filter->Velocity_matrix,  &filter->Cx_matrix, &filter->yCx_matrix);			  // y - ( C * X_k )
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	f503 705d 	add.w	r0, r3, #884	@ 0x374
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	f503 7153 	add.w	r1, r3, #844	@ 0x34c
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	f503 7355 	add.w	r3, r3, #852	@ 0x354
 8004c84:	461a      	mov	r2, r3
 8004c86:	f00b fee9 	bl	8010a5c <arm_mat_sub_f32>
	  arm_mat_mult_f32(&filter->K_matrix, &filter->yCx_matrix, &filter->KyCx_matrix);		     // K( y - ( C * X_k ) )
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	f503 704d 	add.w	r0, r3, #820	@ 0x334
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f503 7155 	add.w	r1, r3, #852	@ 0x354
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	f503 7357 	add.w	r3, r3, #860	@ 0x35c
 8004c9c:	461a      	mov	r2, r3
 8004c9e:	f00b fe2d 	bl	80108fc <arm_mat_mult_f32>
	  arm_mat_add_f32(&filter->X_k_matrix, &filter->KyCx_matrix, &filter->X_k_matrix);		 	 // X_k + K( y - ( C * X_k ) )
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	f503 7029 	add.w	r0, r3, #676	@ 0x2a4
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f503 7157 	add.w	r1, r3, #860	@ 0x35c
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	f503 7329 	add.w	r3, r3, #676	@ 0x2a4
 8004cb4:	461a      	mov	r2, r3
 8004cb6:	f00b fa57 	bl	8010168 <arm_mat_add_f32>

	  // Computation of the estimated output
	  arm_mat_mult_f32(&filter->C_matrix, &filter->X_k_matrix, &filter->Output_matrix);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f503 7129 	add.w	r1, r3, #676	@ 0x2a4
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	f503 733d 	add.w	r3, r3, #756	@ 0x2f4
 8004ccc:	461a      	mov	r2, r3
 8004cce:	f00b fe15 	bl	80108fc <arm_mat_mult_f32>

	  // Computation of the state covariance error
	  arm_matrix_instance_f32 temp_matrix4;
	  float32_t temp_data4[16];
	  arm_mat_init_f32(&temp_matrix4, 4, 4,(float32_t*) &temp_data4);
 8004cd2:	f107 0310 	add.w	r3, r7, #16
 8004cd6:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8004cda:	2204      	movs	r2, #4
 8004cdc:	2104      	movs	r1, #4
 8004cde:	f00b fa7e 	bl	80101de <arm_mat_init_f32>

	  arm_mat_mult_f32(&filter->K_matrix, &filter->C_matrix, &temp_matrix4);				// K * C
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	f503 704d 	add.w	r0, r3, #820	@ 0x334
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f503 7335 	add.w	r3, r3, #724	@ 0x2d4
 8004cee:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8004cf2:	4619      	mov	r1, r3
 8004cf4:	f00b fe02 	bl	80108fc <arm_mat_mult_f32>
	  arm_mat_sub_f32(&filter->eye_matrix, &temp_matrix4, &temp_matrix4);			// (I - (K * C))
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f503 7331 	add.w	r3, r3, #708	@ 0x2c4
 8004cfe:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8004d02:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8004d06:	4618      	mov	r0, r3
 8004d08:	f00b fea8 	bl	8010a5c <arm_mat_sub_f32>
	  arm_mat_mult_f32(&temp_matrix4, &filter->P_k_matrix, &filter->P_k_matrix);			// (I - (K * C)) * P_k
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f503 712b 	add.w	r1, r3, #684	@ 0x2ac
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	f503 722b 	add.w	r2, r3, #684	@ 0x2ac
 8004d18:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	f00b fded 	bl	80108fc <arm_mat_mult_f32>
	  filter->Kalman_Speed = filter->X_k[1];
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	685a      	ldr	r2, [r3, #4]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
	  return  filter->Kalman_Speed;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8004d32:	ee07 3a90 	vmov	s15, r3
}
 8004d36:	eeb0 0a67 	vmov.f32	s0, s15
 8004d3a:	3758      	adds	r7, #88	@ 0x58
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}

08004d40 <Kalman_Start>:

void Kalman_Start(KalmanFilter* filter, float32_t* A_matrix, float32_t* B_matrix, float32_t Q, float32_t R){
 8004d40:	b5b0      	push	{r4, r5, r7, lr}
 8004d42:	b0a4      	sub	sp, #144	@ 0x90
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6178      	str	r0, [r7, #20]
 8004d48:	6139      	str	r1, [r7, #16]
 8004d4a:	60fa      	str	r2, [r7, #12]
 8004d4c:	ed87 0a02 	vstr	s0, [r7, #8]
 8004d50:	edc7 0a01 	vstr	s1, [r7, #4]
	filter->Q = Q; //1.0
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	68ba      	ldr	r2, [r7, #8]
 8004d58:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
	filter->R[0] = R; //0.05
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4

	float32_t c[4] = {1.0f, 0.0f, 0.0f, 0.0f};
 8004d64:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8004d68:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004d6a:	f04f 0300 	mov.w	r3, #0
 8004d6e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004d72:	f04f 0300 	mov.w	r3, #0
 8004d76:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004d7a:	f04f 0300 	mov.w	r3, #0
 8004d7e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

	float32_t g[4] = {0.0f,
 8004d82:	f04f 0300 	mov.w	r3, #0
 8004d86:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004d88:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8004d8c:	673b      	str	r3, [r7, #112]	@ 0x70
 8004d8e:	f04f 0300 	mov.w	r3, #0
 8004d92:	677b      	str	r3, [r7, #116]	@ 0x74
 8004d94:	f04f 0300 	mov.w	r3, #0
 8004d98:	67bb      	str	r3, [r7, #120]	@ 0x78
					  1.0f,
					  0.0f,
					  0.0f};

	float32_t iden[16] = {1.0f, 0.0f, 0.0f, 0.0f,
 8004d9a:	4bc6      	ldr	r3, [pc, #792]	@ (80050b4 <Kalman_Start+0x374>)
 8004d9c:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 8004da0:	461d      	mov	r5, r3
 8004da2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004da4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004da6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004da8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004daa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004dac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004dae:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004db2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			  	  	 0.0f, 1.0f, 0.0f, 0.0f,
					 0.0f, 0.0f, 1.0f, 0.0f,
					 0.0f, 0.0f, 0.0f, 1.0f,};

	float32_t x_k[4] = {0.0f, 0.0f, 0.0f, 0.0f};
 8004db6:	f107 031c 	add.w	r3, r7, #28
 8004dba:	2200      	movs	r2, #0
 8004dbc:	601a      	str	r2, [r3, #0]
 8004dbe:	605a      	str	r2, [r3, #4]
 8004dc0:	609a      	str	r2, [r3, #8]
 8004dc2:	60da      	str	r2, [r3, #12]

	filter->Es_velocity[1] = 0.0f;
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	f04f 0200 	mov.w	r2, #0
 8004dca:	f8c3 2260 	str.w	r2, [r3, #608]	@ 0x260

	int i;
	for(i=0;i<16;i++)
 8004dce:	2300      	movs	r3, #0
 8004dd0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004dd4:	e028      	b.n	8004e28 <Kalman_Start+0xe8>
	{
		filter->A[i] = A_matrix[i];
 8004dd6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004dda:	009b      	lsls	r3, r3, #2
 8004ddc:	693a      	ldr	r2, [r7, #16]
 8004dde:	4413      	add	r3, r2
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	6979      	ldr	r1, [r7, #20]
 8004de4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004de8:	3314      	adds	r3, #20
 8004dea:	009b      	lsls	r3, r3, #2
 8004dec:	440b      	add	r3, r1
 8004dee:	601a      	str	r2, [r3, #0]
		filter->eye[i] = iden[i];
 8004df0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004df4:	009b      	lsls	r3, r3, #2
 8004df6:	3390      	adds	r3, #144	@ 0x90
 8004df8:	443b      	add	r3, r7
 8004dfa:	3b64      	subs	r3, #100	@ 0x64
 8004dfc:	681a      	ldr	r2, [r3, #0]
 8004dfe:	6979      	ldr	r1, [r7, #20]
 8004e00:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e04:	3398      	adds	r3, #152	@ 0x98
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	440b      	add	r3, r1
 8004e0a:	601a      	str	r2, [r3, #0]
		filter->P_k[i] = 0.0f;
 8004e0c:	697a      	ldr	r2, [r7, #20]
 8004e0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e12:	3304      	adds	r3, #4
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	4413      	add	r3, r2
 8004e18:	f04f 0200 	mov.w	r2, #0
 8004e1c:	601a      	str	r2, [r3, #0]
	for(i=0;i<16;i++)
 8004e1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e22:	3301      	adds	r3, #1
 8004e24:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004e28:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e2c:	2b0f      	cmp	r3, #15
 8004e2e:	ddd2      	ble.n	8004dd6 <Kalman_Start+0x96>
	}

	for(i=0;i<4;i++)
 8004e30:	2300      	movs	r3, #0
 8004e32:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004e36:	e03a      	b.n	8004eae <Kalman_Start+0x16e>
	{
		filter->X_k[i] = x_k[i];
 8004e38:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	3390      	adds	r3, #144	@ 0x90
 8004e40:	443b      	add	r3, r7
 8004e42:	3b74      	subs	r3, #116	@ 0x74
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	6979      	ldr	r1, [r7, #20]
 8004e48:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e4c:	009b      	lsls	r3, r3, #2
 8004e4e:	440b      	add	r3, r1
 8004e50:	601a      	str	r2, [r3, #0]
		filter->B[i] = B_matrix[i];
 8004e52:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e56:	009b      	lsls	r3, r3, #2
 8004e58:	68fa      	ldr	r2, [r7, #12]
 8004e5a:	4413      	add	r3, r2
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	6979      	ldr	r1, [r7, #20]
 8004e60:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e64:	3324      	adds	r3, #36	@ 0x24
 8004e66:	009b      	lsls	r3, r3, #2
 8004e68:	440b      	add	r3, r1
 8004e6a:	601a      	str	r2, [r3, #0]
		filter->C[i] = c[i];
 8004e6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e70:	009b      	lsls	r3, r3, #2
 8004e72:	3390      	adds	r3, #144	@ 0x90
 8004e74:	443b      	add	r3, r7
 8004e76:	3b14      	subs	r3, #20
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	6979      	ldr	r1, [r7, #20]
 8004e7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e80:	3328      	adds	r3, #40	@ 0x28
 8004e82:	009b      	lsls	r3, r3, #2
 8004e84:	440b      	add	r3, r1
 8004e86:	601a      	str	r2, [r3, #0]
		filter->G[i] = g[i];
 8004e88:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e8c:	009b      	lsls	r3, r3, #2
 8004e8e:	3390      	adds	r3, #144	@ 0x90
 8004e90:	443b      	add	r3, r7
 8004e92:	3b24      	subs	r3, #36	@ 0x24
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	6979      	ldr	r1, [r7, #20]
 8004e98:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e9c:	332c      	adds	r3, #44	@ 0x2c
 8004e9e:	009b      	lsls	r3, r3, #2
 8004ea0:	440b      	add	r3, r1
 8004ea2:	601a      	str	r2, [r3, #0]
	for(i=0;i<4;i++)
 8004ea4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004ea8:	3301      	adds	r3, #1
 8004eaa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004eae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004eb2:	2b03      	cmp	r3, #3
 8004eb4:	ddc0      	ble.n	8004e38 <Kalman_Start+0xf8>

	}

	arm_mat_init_f32(&filter->X_k_matrix, 4, 1,filter->X_k);
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	f503 7029 	add.w	r0, r3, #676	@ 0x2a4
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	2104      	movs	r1, #4
 8004ec2:	f00b f98c 	bl	80101de <arm_mat_init_f32>
	arm_mat_init_f32(&filter->P_k_matrix, 4, 4,filter->P_k);
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	3310      	adds	r3, #16
 8004ed0:	2204      	movs	r2, #4
 8004ed2:	2104      	movs	r1, #4
 8004ed4:	f00b f983 	bl	80101de <arm_mat_init_f32>

	arm_mat_init_f32(&filter->A_matrix, 4, 4,filter->A);
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	f503 702d 	add.w	r0, r3, #692	@ 0x2b4
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	3350      	adds	r3, #80	@ 0x50
 8004ee2:	2204      	movs	r2, #4
 8004ee4:	2104      	movs	r1, #4
 8004ee6:	f00b f97a 	bl	80101de <arm_mat_init_f32>
	arm_mat_init_f32(&filter->B_matrix, 4, 1,filter->B);
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	f503 7033 	add.w	r0, r3, #716	@ 0x2cc
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	3390      	adds	r3, #144	@ 0x90
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	2104      	movs	r1, #4
 8004ef8:	f00b f971 	bl	80101de <arm_mat_init_f32>
	arm_mat_init_f32(&filter->C_matrix, 1, 4,filter->C);
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	33a0      	adds	r3, #160	@ 0xa0
 8004f06:	2204      	movs	r2, #4
 8004f08:	2101      	movs	r1, #1
 8004f0a:	f00b f968 	bl	80101de <arm_mat_init_f32>
	arm_mat_init_f32(&filter->G_matrix, 4, 1,filter->G);
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	f503 7039 	add.w	r0, r3, #740	@ 0x2e4
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	33b0      	adds	r3, #176	@ 0xb0
 8004f18:	2201      	movs	r2, #1
 8004f1a:	2104      	movs	r1, #4
 8004f1c:	f00b f95f 	bl	80101de <arm_mat_init_f32>

	arm_mat_init_f32(&filter->A_transpose_matrix, 4, 4, filter->A_transpose);
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	f503 702f 	add.w	r0, r3, #700	@ 0x2bc
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	33c8      	adds	r3, #200	@ 0xc8
 8004f2a:	2204      	movs	r2, #4
 8004f2c:	2104      	movs	r1, #4
 8004f2e:	f00b f956 	bl	80101de <arm_mat_init_f32>
	arm_mat_init_f32(&filter->C_transpose_matrix, 4, 1, filter->C_transpose);
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	f503 7037 	add.w	r0, r3, #732	@ 0x2dc
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8004f3e:	2201      	movs	r2, #1
 8004f40:	2104      	movs	r1, #4
 8004f42:	f00b f94c 	bl	80101de <arm_mat_init_f32>
	arm_mat_init_f32(&filter->G_transpose_matrix, 1, 4, filter->G_transpose);
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	f503 703b 	add.w	r0, r3, #748	@ 0x2ec
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 8004f52:	2204      	movs	r2, #4
 8004f54:	2101      	movs	r1, #1
 8004f56:	f00b f942 	bl	80101de <arm_mat_init_f32>

	arm_mat_init_f32(&filter->GGT_matrix, 4, 4, filter->GGT);
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	f503 703f 	add.w	r0, r3, #764	@ 0x2fc
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8004f66:	2204      	movs	r2, #4
 8004f68:	2104      	movs	r1, #4
 8004f6a:	f00b f938 	bl	80101de <arm_mat_init_f32>
	arm_mat_init_f32(&filter->GQGT_matrix, 4, 4, filter->GQGT);
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8004f7a:	2204      	movs	r2, #4
 8004f7c:	2104      	movs	r1, #4
 8004f7e:	f00b f92e 	bl	80101de <arm_mat_init_f32>

	// Compute Xk = Ax + Bu
	arm_mat_init_f32(&filter->Bu_matrix, 4, 1, filter->Bu_data);
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	f503 7043 	add.w	r0, r3, #780	@ 0x30c
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8004f8e:	2201      	movs	r2, #1
 8004f90:	2104      	movs	r1, #4
 8004f92:	f00b f924 	bl	80101de <arm_mat_init_f32>
	arm_mat_init_f32(&filter->Ax_matrix, 4, 1, filter->Ax_data);
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	f503 7045 	add.w	r0, r3, #788	@ 0x314
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	f503 73d4 	add.w	r3, r3, #424	@ 0x1a8
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	2104      	movs	r1, #4
 8004fa6:	f00b f91a 	bl	80101de <arm_mat_init_f32>

	// Compute (C * P_k * C^T + R)
	arm_mat_init_f32(&filter->CP_matrix, 1, 4, filter->CP);
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	f503 7047 	add.w	r0, r3, #796	@ 0x31c
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8004fb6:	2204      	movs	r2, #4
 8004fb8:	2101      	movs	r1, #1
 8004fba:	f00b f910 	bl	80101de <arm_mat_init_f32>
	arm_mat_init_f32(&filter->CPCT_matrix, 1, 1, filter->CPCT);
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	f503 7049 	add.w	r0, r3, #804	@ 0x324
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 8004fca:	2201      	movs	r2, #1
 8004fcc:	2101      	movs	r1, #1
 8004fce:	f00b f906 	bl	80101de <arm_mat_init_f32>
	arm_mat_init_f32(&filter->CPCTR_matrix, 1, 1, filter->CPCTR);
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	f503 704b 	add.w	r0, r3, #812	@ 0x32c
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 8004fde:	2201      	movs	r2, #1
 8004fe0:	2101      	movs	r1, #1
 8004fe2:	f00b f8fc 	bl	80101de <arm_mat_init_f32>

	// Compute Kalman Gain: K = P_k * C^T * inv(C * P_k * C^T + R)
	arm_mat_init_f32(&filter->K_matrix, 4, 1, filter->K);
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	f503 704d 	add.w	r0, r3, #820	@ 0x334
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	2104      	movs	r1, #4
 8004ff6:	f00b f8f2 	bl	80101de <arm_mat_init_f32>
	arm_mat_init_f32(&filter->PCT_matrix, 4, 1,filter->PCT);
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	f503 704f 	add.w	r0, r3, #828	@ 0x33c
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8005006:	2201      	movs	r2, #1
 8005008:	2104      	movs	r1, #4
 800500a:	f00b f8e8 	bl	80101de <arm_mat_init_f32>

	// Compute inverse of (C * P_k * C^T + R)
	arm_mat_init_f32(&filter->CPCTRinv_matrix, 1, 1,filter->CPCTRinv);
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	f503 7051 	add.w	r0, r3, #836	@ 0x344
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 800501a:	2201      	movs	r2, #1
 800501c:	2101      	movs	r1, #1
 800501e:	f00b f8de 	bl	80101de <arm_mat_init_f32>

	// Computation of the estimated state
	arm_mat_init_f32(&filter->Cx_matrix, 1, 1, filter->Cx);
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	f503 7053 	add.w	r0, r3, #844	@ 0x34c
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	f503 7311 	add.w	r3, r3, #580	@ 0x244
 800502e:	2201      	movs	r2, #1
 8005030:	2101      	movs	r1, #1
 8005032:	f00b f8d4 	bl	80101de <arm_mat_init_f32>
	arm_mat_init_f32(&filter->yCx_matrix, 1, 1, filter->yCx);
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	f503 7055 	add.w	r0, r3, #852	@ 0x354
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8005042:	2201      	movs	r2, #1
 8005044:	2101      	movs	r1, #1
 8005046:	f00b f8ca 	bl	80101de <arm_mat_init_f32>
	arm_mat_init_f32(&filter->KyCx_matrix, 4, 1, filter->KyCx);
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	f503 7057 	add.w	r0, r3, #860	@ 0x35c
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8005056:	2201      	movs	r2, #1
 8005058:	2104      	movs	r1, #4
 800505a:	f00b f8c0 	bl	80101de <arm_mat_init_f32>

	arm_mat_init_f32(&filter->Output_matrix, 1, 1, filter->Es_velocity);
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	f503 703d 	add.w	r0, r3, #756	@ 0x2f4
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800506a:	2201      	movs	r2, #1
 800506c:	2101      	movs	r1, #1
 800506e:	f00b f8b6 	bl	80101de <arm_mat_init_f32>
	arm_mat_init_f32(&filter->eye_matrix, 4, 4, filter->eye);
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	f503 7031 	add.w	r0, r3, #708	@ 0x2c4
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800507e:	2204      	movs	r2, #4
 8005080:	2104      	movs	r1, #4
 8005082:	f00b f8ac 	bl	80101de <arm_mat_init_f32>

	arm_mat_init_f32(&filter->R_matrix, 1, 1, filter->R);
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	f503 7059 	add.w	r0, r3, #868	@ 0x364
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	33c4      	adds	r3, #196	@ 0xc4
 8005090:	2201      	movs	r2, #1
 8005092:	2101      	movs	r1, #1
 8005094:	f00b f8a3 	bl	80101de <arm_mat_init_f32>
	arm_mat_init_f32(&filter->Z_matrix, 1, 1, filter->Z);
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	f503 705b 	add.w	r0, r3, #876	@ 0x36c
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	f503 7328 	add.w	r3, r3, #672	@ 0x2a0
 80050a4:	2201      	movs	r2, #1
 80050a6:	2101      	movs	r1, #1
 80050a8:	f00b f899 	bl	80101de <arm_mat_init_f32>
}
 80050ac:	bf00      	nop
 80050ae:	3790      	adds	r7, #144	@ 0x90
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bdb0      	pop	{r4, r5, r7, pc}
 80050b4:	08012b90 	.word	0x08012b90

080050b8 <Kalman_Reset>:

void Kalman_Reset(KalmanFilter* filter) {
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b084      	sub	sp, #16
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
    // Reset state vector X_k (it's an array of 4 elements)
    memset(filter->X_k, 0, sizeof(filter->X_k));
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2210      	movs	r2, #16
 80050c4:	2100      	movs	r1, #0
 80050c6:	4618      	mov	r0, r3
 80050c8:	f00b fdfa 	bl	8010cc0 <memset>

    // Reset covariance matrix P_k to high uncertainty
    memset(filter->P_k, 0, sizeof(filter->P_k));
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	3310      	adds	r3, #16
 80050d0:	2240      	movs	r2, #64	@ 0x40
 80050d2:	2100      	movs	r1, #0
 80050d4:	4618      	mov	r0, r3
 80050d6:	f00b fdf3 	bl	8010cc0 <memset>
    for(int i = 0; i < 4; i++) {
 80050da:	2300      	movs	r3, #0
 80050dc:	60fb      	str	r3, [r7, #12]
 80050de:	e00c      	b.n	80050fa <Kalman_Reset+0x42>
        filter->P_k[i * 4 + i] = 100.0f; // High diagonal values = high uncertainty
 80050e0:	68fa      	ldr	r2, [r7, #12]
 80050e2:	4613      	mov	r3, r2
 80050e4:	009b      	lsls	r3, r3, #2
 80050e6:	4413      	add	r3, r2
 80050e8:	687a      	ldr	r2, [r7, #4]
 80050ea:	3304      	adds	r3, #4
 80050ec:	009b      	lsls	r3, r3, #2
 80050ee:	4413      	add	r3, r2
 80050f0:	4a18      	ldr	r2, [pc, #96]	@ (8005154 <Kalman_Reset+0x9c>)
 80050f2:	601a      	str	r2, [r3, #0]
    for(int i = 0; i < 4; i++) {
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	3301      	adds	r3, #1
 80050f8:	60fb      	str	r3, [r7, #12]
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2b03      	cmp	r3, #3
 80050fe:	ddef      	ble.n	80050e0 <Kalman_Reset+0x28>
    }

    // Reset other important states
    filter->Kalman_Speed = 0.0f;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f04f 0200 	mov.w	r2, #0
 8005106:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
    memset(filter->Es_velocity, 0, sizeof(filter->Es_velocity));
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8005110:	2204      	movs	r2, #4
 8005112:	2100      	movs	r1, #0
 8005114:	4618      	mov	r0, r3
 8005116:	f00b fdd3 	bl	8010cc0 <memset>

    // You may also want to reset temp calculation arrays
    memset(filter->Bu_data, 0, sizeof(filter->Bu_data));
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8005120:	2210      	movs	r2, #16
 8005122:	2100      	movs	r1, #0
 8005124:	4618      	mov	r0, r3
 8005126:	f00b fdcb 	bl	8010cc0 <memset>
    memset(filter->Ax_data, 0, sizeof(filter->Ax_data));
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f503 73d4 	add.w	r3, r3, #424	@ 0x1a8
 8005130:	2240      	movs	r2, #64	@ 0x40
 8005132:	2100      	movs	r1, #0
 8005134:	4618      	mov	r0, r3
 8005136:	f00b fdc3 	bl	8010cc0 <memset>
    memset(filter->K, 0, sizeof(filter->K));
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 8005140:	2210      	movs	r2, #16
 8005142:	2100      	movs	r1, #0
 8005144:	4618      	mov	r0, r3
 8005146:	f00b fdbb 	bl	8010cc0 <memset>
}
 800514a:	bf00      	nop
 800514c:	3710      	adds	r7, #16
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}
 8005152:	bf00      	nop
 8005154:	42c80000 	.word	0x42c80000

08005158 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8005158:	b580      	push	{r7, lr}
 800515a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800515c:	f003 fdad 	bl	8008cba <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8005160:	f000 f862 	bl	8005228 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8005164:	f7ff fbc2 	bl	80048ec <MX_GPIO_Init>
	MX_DMA_Init();
 8005168:	f7ff fb76 	bl	8004858 <MX_DMA_Init>
	MX_ADC1_Init();
 800516c:	f7ff fa68 	bl	8004640 <MX_ADC1_Init>
	MX_TIM2_Init();
 8005170:	f002 ffb8 	bl	80080e4 <MX_TIM2_Init>
	MX_TIM3_Init();
 8005174:	f003 f804 	bl	8008180 <MX_TIM3_Init>
	MX_TIM4_Init();
 8005178:	f003 f858 	bl	800822c <MX_TIM4_Init>
	MX_TIM5_Init();
 800517c:	f003 f8ac 	bl	80082d8 <MX_TIM5_Init>
	MX_TIM8_Init();
 8005180:	f003 f900 	bl	8008384 <MX_TIM8_Init>
	MX_USART2_UART_Init();
 8005184:	f003 fbc2 	bl	800890c <MX_USART2_UART_Init>
	MX_TIM16_Init();
 8005188:	f003 f9ba 	bl	8008500 <MX_TIM16_Init>
	MX_TIM1_Init();
 800518c:	f002 ff16 	bl	8007fbc <MX_TIM1_Init>
	MX_LPUART1_UART_Init();
 8005190:	f003 fb72 	bl	8008878 <MX_LPUART1_UART_Init>
	/* USER CODE BEGIN 2 */
	plotter_begin();
 8005194:	f002 f880 	bl	8007298 <plotter_begin>

	// Initialize position setpoints to current position to prevent startup errors
	prismatic_axis.position = prismatic_encoder.mm;
 8005198:	4b1a      	ldr	r3, [pc, #104]	@ (8005204 <main+0xac>)
 800519a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800519c:	4a1a      	ldr	r2, [pc, #104]	@ (8005208 <main+0xb0>)
 800519e:	6013      	str	r3, [r2, #0]
	revolute_axis.position = revolute_encoder.rads;
 80051a0:	4b1a      	ldr	r3, [pc, #104]	@ (800520c <main+0xb4>)
 80051a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051a4:	4a1a      	ldr	r2, [pc, #104]	@ (8005210 <main+0xb8>)
 80051a6:	6013      	str	r3, [r2, #0]

	// Reset all error terms and flags
	prismatic_axis.pos_error = 0.0f;
 80051a8:	4b17      	ldr	r3, [pc, #92]	@ (8005208 <main+0xb0>)
 80051aa:	f04f 0200 	mov.w	r2, #0
 80051ae:	615a      	str	r2, [r3, #20]
	prismatic_axis.vel_error = 0.0f;
 80051b0:	4b15      	ldr	r3, [pc, #84]	@ (8005208 <main+0xb0>)
 80051b2:	f04f 0200 	mov.w	r2, #0
 80051b6:	619a      	str	r2, [r3, #24]
	revolute_axis.pos_error = 0.0f;
 80051b8:	4b15      	ldr	r3, [pc, #84]	@ (8005210 <main+0xb8>)
 80051ba:	f04f 0200 	mov.w	r2, #0
 80051be:	615a      	str	r2, [r3, #20]
	revolute_axis.vel_error = 0.0f;
 80051c0:	4b13      	ldr	r3, [pc, #76]	@ (8005210 <main+0xb8>)
 80051c2:	f04f 0200 	mov.w	r2, #0
 80051c6:	619a      	str	r2, [r3, #24]
	prismatic_axis.trajectory_active = false;
 80051c8:	4b0f      	ldr	r3, [pc, #60]	@ (8005208 <main+0xb0>)
 80051ca:	2200      	movs	r2, #0
 80051cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	revolute_axis.trajectory_active = false;
 80051d0:	4b0f      	ldr	r3, [pc, #60]	@ (8005210 <main+0xb8>)
 80051d2:	2200      	movs	r2, #0
 80051d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

	// Initialize safety system
	safety_state = SAFETY_NORMAL;
 80051d8:	4b0e      	ldr	r3, [pc, #56]	@ (8005214 <main+0xbc>)
 80051da:	2200      	movs	r2, #0
 80051dc:	701a      	strb	r2, [r3, #0]
	hardware_emergency_triggered = false;
 80051de:	4b0e      	ldr	r3, [pc, #56]	@ (8005218 <main+0xc0>)
 80051e0:	2200      	movs	r2, #0
 80051e2:	701a      	strb	r2, [r3, #0]
	pilot_light_state = false;
 80051e4:	4b0d      	ldr	r3, [pc, #52]	@ (800521c <main+0xc4>)
 80051e6:	2200      	movs	r2, #0
 80051e8:	701a      	strb	r2, [r3, #0]
	safety_toggle_timer = 0;
 80051ea:	4b0d      	ldr	r3, [pc, #52]	@ (8005220 <main+0xc8>)
 80051ec:	2200      	movs	r2, #0
 80051ee:	601a      	str	r2, [r3, #0]

	// Start homing automatically on first startup
	if (first_startup) {
 80051f0:	4b0c      	ldr	r3, [pc, #48]	@ (8005224 <main+0xcc>)
 80051f2:	781b      	ldrb	r3, [r3, #0]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d003      	beq.n	8005200 <main+0xa8>
		start_homing_sequence(true);
 80051f8:	2001      	movs	r0, #1
 80051fa:	f000 f861 	bl	80052c0 <start_homing_sequence>
	}
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80051fe:	bf00      	nop
 8005200:	bf00      	nop
 8005202:	e7fd      	b.n	8005200 <main+0xa8>
 8005204:	2000043c 	.word	0x2000043c
 8005208:	20000278 	.word	0x20000278
 800520c:	20000498 	.word	0x20000498
 8005210:	200002b8 	.word	0x200002b8
 8005214:	20000368 	.word	0x20000368
 8005218:	20000371 	.word	0x20000371
 800521c:	20000370 	.word	0x20000370
 8005220:	2000036c 	.word	0x2000036c
 8005224:	2000012f 	.word	0x2000012f

08005228 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8005228:	b580      	push	{r7, lr}
 800522a:	b094      	sub	sp, #80	@ 0x50
 800522c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800522e:	f107 0318 	add.w	r3, r7, #24
 8005232:	2238      	movs	r2, #56	@ 0x38
 8005234:	2100      	movs	r1, #0
 8005236:	4618      	mov	r0, r3
 8005238:	f00b fd42 	bl	8010cc0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800523c:	1d3b      	adds	r3, r7, #4
 800523e:	2200      	movs	r2, #0
 8005240:	601a      	str	r2, [r3, #0]
 8005242:	605a      	str	r2, [r3, #4]
 8005244:	609a      	str	r2, [r3, #8]
 8005246:	60da      	str	r2, [r3, #12]
 8005248:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800524a:	2000      	movs	r0, #0
 800524c:	f006 f844 	bl	800b2d8 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005250:	2302      	movs	r3, #2
 8005252:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005254:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005258:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800525a:	2340      	movs	r3, #64	@ 0x40
 800525c:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800525e:	2302      	movs	r3, #2
 8005260:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8005262:	2302      	movs	r3, #2
 8005264:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8005266:	2304      	movs	r3, #4
 8005268:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 800526a:	2355      	movs	r3, #85	@ 0x55
 800526c:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800526e:	2302      	movs	r3, #2
 8005270:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8005272:	2302      	movs	r3, #2
 8005274:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8005276:	2302      	movs	r3, #2
 8005278:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800527a:	f107 0318 	add.w	r3, r7, #24
 800527e:	4618      	mov	r0, r3
 8005280:	f006 f8de 	bl	800b440 <HAL_RCC_OscConfig>
 8005284:	4603      	mov	r3, r0
 8005286:	2b00      	cmp	r3, #0
 8005288:	d001      	beq.n	800528e <SystemClock_Config+0x66>
		Error_Handler();
 800528a:	f001 fffd 	bl	8007288 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800528e:	230f      	movs	r3, #15
 8005290:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005292:	2303      	movs	r3, #3
 8005294:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005296:	2300      	movs	r3, #0
 8005298:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800529a:	2300      	movs	r3, #0
 800529c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800529e:	2300      	movs	r3, #0
 80052a0:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 80052a2:	1d3b      	adds	r3, r7, #4
 80052a4:	2104      	movs	r1, #4
 80052a6:	4618      	mov	r0, r3
 80052a8:	f006 fbdc 	bl	800ba64 <HAL_RCC_ClockConfig>
 80052ac:	4603      	mov	r3, r0
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d001      	beq.n	80052b6 <SystemClock_Config+0x8e>
		Error_Handler();
 80052b2:	f001 ffe9 	bl	8007288 <Error_Handler>
	}
}
 80052b6:	bf00      	nop
 80052b8:	3750      	adds	r7, #80	@ 0x50
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}
	...

080052c0 <start_homing_sequence>:

/* USER CODE BEGIN 4 */
void start_homing_sequence(bool is_startup) {
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b082      	sub	sp, #8
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	4603      	mov	r3, r0
 80052c8:	71fb      	strb	r3, [r7, #7]
	if (homing_active)
 80052ca:	4b1b      	ldr	r3, [pc, #108]	@ (8005338 <start_homing_sequence+0x78>)
 80052cc:	781b      	ldrb	r3, [r3, #0]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d12e      	bne.n	8005330 <start_homing_sequence+0x70>
		return; // Already homing

	homing_active = true;
 80052d2:	4b19      	ldr	r3, [pc, #100]	@ (8005338 <start_homing_sequence+0x78>)
 80052d4:	2201      	movs	r2, #1
 80052d6:	701a      	strb	r2, [r3, #0]
	motion_sequence_state = MOTION_IDLE; // Stop any current motion
 80052d8:	4b18      	ldr	r3, [pc, #96]	@ (800533c <start_homing_sequence+0x7c>)
 80052da:	2200      	movs	r2, #0
 80052dc:	701a      	strb	r2, [r3, #0]

	// Reset prox counter and photo flags for homing
	prox_count = 0;
 80052de:	4b18      	ldr	r3, [pc, #96]	@ (8005340 <start_homing_sequence+0x80>)
 80052e0:	2200      	movs	r2, #0
 80052e2:	601a      	str	r2, [r3, #0]
	up_photo = false;
 80052e4:	4b17      	ldr	r3, [pc, #92]	@ (8005344 <start_homing_sequence+0x84>)
 80052e6:	2200      	movs	r2, #0
 80052e8:	701a      	strb	r2, [r3, #0]
	low_photo = false;
 80052ea:	4b17      	ldr	r3, [pc, #92]	@ (8005348 <start_homing_sequence+0x88>)
 80052ec:	2200      	movs	r2, #0
 80052ee:	701a      	strb	r2, [r3, #0]

	if (is_startup) {
 80052f0:	79fb      	ldrb	r3, [r7, #7]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d003      	beq.n	80052fe <start_homing_sequence+0x3e>
		// First time startup - do full homing sequence starting with pen up
		homing_state = HOMING_PEN_UP;
 80052f6:	4b15      	ldr	r3, [pc, #84]	@ (800534c <start_homing_sequence+0x8c>)
 80052f8:	2201      	movs	r2, #1
 80052fa:	701a      	strb	r2, [r3, #0]
 80052fc:	e019      	b.n	8005332 <start_homing_sequence+0x72>
	} else {
		// J2 pressed - system already knows reference, can go to 0° first
		up_photo = HAL_GPIO_ReadPin(UPPER_PHOTO_GPIO_Port, UPPER_PHOTO_Pin);
 80052fe:	2101      	movs	r1, #1
 8005300:	4813      	ldr	r0, [pc, #76]	@ (8005350 <start_homing_sequence+0x90>)
 8005302:	f005 ff87 	bl	800b214 <HAL_GPIO_ReadPin>
 8005306:	4603      	mov	r3, r0
 8005308:	2b00      	cmp	r3, #0
 800530a:	bf14      	ite	ne
 800530c:	2301      	movne	r3, #1
 800530e:	2300      	moveq	r3, #0
 8005310:	b2da      	uxtb	r2, r3
 8005312:	4b0c      	ldr	r3, [pc, #48]	@ (8005344 <start_homing_sequence+0x84>)
 8005314:	701a      	strb	r2, [r3, #0]

		if (up_photo) {
 8005316:	4b0b      	ldr	r3, [pc, #44]	@ (8005344 <start_homing_sequence+0x84>)
 8005318:	781b      	ldrb	r3, [r3, #0]
 800531a:	b2db      	uxtb	r3, r3
 800531c:	2b00      	cmp	r3, #0
 800531e:	d003      	beq.n	8005328 <start_homing_sequence+0x68>
			// Already at up photo, go to 0° then find prox
			homing_state = HOMING_REV_TO_ZERO_DEG;
 8005320:	4b0a      	ldr	r3, [pc, #40]	@ (800534c <start_homing_sequence+0x8c>)
 8005322:	2209      	movs	r2, #9
 8005324:	701a      	strb	r2, [r3, #0]
 8005326:	e004      	b.n	8005332 <start_homing_sequence+0x72>
		} else {
			// Not at up photo, need to do prismatic homing first
			homing_state = HOMING_PEN_UP;
 8005328:	4b08      	ldr	r3, [pc, #32]	@ (800534c <start_homing_sequence+0x8c>)
 800532a:	2201      	movs	r2, #1
 800532c:	701a      	strb	r2, [r3, #0]
 800532e:	e000      	b.n	8005332 <start_homing_sequence+0x72>
		return; // Already homing
 8005330:	bf00      	nop
		}
	}
}
 8005332:	3708      	adds	r7, #8
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}
 8005338:	20000367 	.word	0x20000367
 800533c:	200002f8 	.word	0x200002f8
 8005340:	20000360 	.word	0x20000360
 8005344:	20000364 	.word	0x20000364
 8005348:	20000365 	.word	0x20000365
 800534c:	20000366 	.word	0x20000366
 8005350:	48000400 	.word	0x48000400
 8005354:	00000000 	.word	0x00000000

08005358 <update_homing_sequence>:

void update_homing_sequence(void) {
 8005358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800535c:	ed2d 8b02 	vpush	{d8}
 8005360:	b09b      	sub	sp, #108	@ 0x6c
 8005362:	af00      	add	r7, sp, #0
	if (!homing_active)
 8005364:	4b9b      	ldr	r3, [pc, #620]	@ (80055d4 <update_homing_sequence+0x27c>)
 8005366:	781b      	ldrb	r3, [r3, #0]
 8005368:	f083 0301 	eor.w	r3, r3, #1
 800536c:	b2db      	uxtb	r3, r3
 800536e:	2b00      	cmp	r3, #0
 8005370:	f040 8631 	bne.w	8005fd6 <update_homing_sequence+0xc7e>
		return;

	switch (homing_state) {
 8005374:	4b98      	ldr	r3, [pc, #608]	@ (80055d8 <update_homing_sequence+0x280>)
 8005376:	781b      	ldrb	r3, [r3, #0]
 8005378:	3b01      	subs	r3, #1
 800537a:	2b0c      	cmp	r3, #12
 800537c:	f200 862d 	bhi.w	8005fda <update_homing_sequence+0xc82>
 8005380:	a201      	add	r2, pc, #4	@ (adr r2, 8005388 <update_homing_sequence+0x30>)
 8005382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005386:	bf00      	nop
 8005388:	080053bd 	.word	0x080053bd
 800538c:	080053e1 	.word	0x080053e1
 8005390:	08005453 	.word	0x08005453
 8005394:	080055a1 	.word	0x080055a1
 8005398:	08005619 	.word	0x08005619
 800539c:	08005761 	.word	0x08005761
 80053a0:	08005793 	.word	0x08005793
 80053a4:	08005939 	.word	0x08005939
 80053a8:	08005999 	.word	0x08005999
 80053ac:	08005d5b 	.word	0x08005d5b
 80053b0:	08005d8b 	.word	0x08005d8b
 80053b4:	08005ec5 	.word	0x08005ec5
 80053b8:	08005ef5 	.word	0x08005ef5
	case HOMING_PEN_UP:
		// Ensure pen is up
		plotter_pen_up();
 80053bc:	f002 fbea 	bl	8007b94 <plotter_pen_up>
		prismatic_axis.command_pos = 0.0f;
 80053c0:	4b86      	ldr	r3, [pc, #536]	@ (80055dc <update_homing_sequence+0x284>)
 80053c2:	f04f 0200 	mov.w	r2, #0
 80053c6:	625a      	str	r2, [r3, #36]	@ 0x24
		revolute_axis.command_pos = 0.0f;
 80053c8:	4b85      	ldr	r3, [pc, #532]	@ (80055e0 <update_homing_sequence+0x288>)
 80053ca:	f04f 0200 	mov.w	r2, #0
 80053ce:	625a      	str	r2, [r3, #36]	@ 0x24
		motion_delay_timer = 0;
 80053d0:	4b84      	ldr	r3, [pc, #528]	@ (80055e4 <update_homing_sequence+0x28c>)
 80053d2:	2200      	movs	r2, #0
 80053d4:	601a      	str	r2, [r3, #0]
		homing_state = HOMING_DELAY_AFTER_PEN_UP;
 80053d6:	4b80      	ldr	r3, [pc, #512]	@ (80055d8 <update_homing_sequence+0x280>)
 80053d8:	2202      	movs	r2, #2
 80053da:	701a      	strb	r2, [r3, #0]
		break;
 80053dc:	f000 be4d 	b.w	800607a <update_homing_sequence+0xd22>

	case HOMING_DELAY_AFTER_PEN_UP:
		// Stop motors and wait
		prismatic_axis.command_pos = 0.0f;
 80053e0:	4b7e      	ldr	r3, [pc, #504]	@ (80055dc <update_homing_sequence+0x284>)
 80053e2:	f04f 0200 	mov.w	r2, #0
 80053e6:	625a      	str	r2, [r3, #36]	@ 0x24
		revolute_axis.command_pos = 0.0f;
 80053e8:	4b7d      	ldr	r3, [pc, #500]	@ (80055e0 <update_homing_sequence+0x288>)
 80053ea:	f04f 0200 	mov.w	r2, #0
 80053ee:	625a      	str	r2, [r3, #36]	@ 0x24
		motion_delay_timer++;
 80053f0:	4b7c      	ldr	r3, [pc, #496]	@ (80055e4 <update_homing_sequence+0x28c>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	3301      	adds	r3, #1
 80053f6:	4a7b      	ldr	r2, [pc, #492]	@ (80055e4 <update_homing_sequence+0x28c>)
 80053f8:	6013      	str	r3, [r2, #0]
		if (motion_delay_timer >= 1500) {
 80053fa:	4b7a      	ldr	r3, [pc, #488]	@ (80055e4 <update_homing_sequence+0x28c>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f240 52db 	movw	r2, #1499	@ 0x5db
 8005402:	4293      	cmp	r3, r2
 8005404:	f240 85eb 	bls.w	8005fde <update_homing_sequence+0xc86>
			// Check if already at low photo sensor
			low_photo = HAL_GPIO_ReadPin(LOWER_PHOTO_GPIO_Port,
 8005408:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800540c:	4876      	ldr	r0, [pc, #472]	@ (80055e8 <update_homing_sequence+0x290>)
 800540e:	f005 ff01 	bl	800b214 <HAL_GPIO_ReadPin>
 8005412:	4603      	mov	r3, r0
 8005414:	2b00      	cmp	r3, #0
 8005416:	bf14      	ite	ne
 8005418:	2301      	movne	r3, #1
 800541a:	2300      	moveq	r3, #0
 800541c:	b2da      	uxtb	r2, r3
 800541e:	4b73      	ldr	r3, [pc, #460]	@ (80055ec <update_homing_sequence+0x294>)
 8005420:	701a      	strb	r2, [r3, #0]
					LOWER_PHOTO_Pin);

			if (low_photo) {
 8005422:	4b72      	ldr	r3, [pc, #456]	@ (80055ec <update_homing_sequence+0x294>)
 8005424:	781b      	ldrb	r3, [r3, #0]
 8005426:	b2db      	uxtb	r3, r3
 8005428:	2b00      	cmp	r3, #0
 800542a:	d00d      	beq.n	8005448 <update_homing_sequence+0xf0>
				// Already at low photo, skip moving down and go directly to delay
				motion_delay_timer = 0;
 800542c:	4b6d      	ldr	r3, [pc, #436]	@ (80055e4 <update_homing_sequence+0x28c>)
 800542e:	2200      	movs	r2, #0
 8005430:	601a      	str	r2, [r3, #0]
				homing_state = HOMING_DELAY_AFTER_LOW_PHOTO;
 8005432:	4b69      	ldr	r3, [pc, #420]	@ (80055d8 <update_homing_sequence+0x280>)
 8005434:	2204      	movs	r2, #4
 8005436:	701a      	strb	r2, [r3, #0]
				low_photo = false; // Reset flag
 8005438:	4b6c      	ldr	r3, [pc, #432]	@ (80055ec <update_homing_sequence+0x294>)
 800543a:	2200      	movs	r2, #0
 800543c:	701a      	strb	r2, [r3, #0]
				up_photo = false;  // Reset for next detection
 800543e:	4b6c      	ldr	r3, [pc, #432]	@ (80055f0 <update_homing_sequence+0x298>)
 8005440:	2200      	movs	r2, #0
 8005442:	701a      	strb	r2, [r3, #0]
			} else {
				// Not at low photo, need to move down
				homing_state = HOMING_PRIS_DOWN_TO_LOW_PHOTO;
			}
		}
		break;
 8005444:	f000 bdcb 	b.w	8005fde <update_homing_sequence+0xc86>
				homing_state = HOMING_PRIS_DOWN_TO_LOW_PHOTO;
 8005448:	4b63      	ldr	r3, [pc, #396]	@ (80055d8 <update_homing_sequence+0x280>)
 800544a:	2203      	movs	r2, #3
 800544c:	701a      	strb	r2, [r3, #0]
		break;
 800544e:	f000 bdc6 	b.w	8005fde <update_homing_sequence+0xc86>

	case HOMING_PRIS_DOWN_TO_LOW_PHOTO:
		// Move prismatic down at constant velocity
		prismatic_axis.vel_error = HOMING_PRIS_VELOCITY
				- prismatic_axis.kalman_velocity;
 8005452:	4b62      	ldr	r3, [pc, #392]	@ (80055dc <update_homing_sequence+0x284>)
 8005454:	edd3 7a07 	vldr	s15, [r3, #28]
 8005458:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 80055f4 <update_homing_sequence+0x29c>
 800545c:	ee77 7a67 	vsub.f32	s15, s14, s15
		prismatic_axis.vel_error = HOMING_PRIS_VELOCITY
 8005460:	4b5e      	ldr	r3, [pc, #376]	@ (80055dc <update_homing_sequence+0x284>)
 8005462:	edc3 7a06 	vstr	s15, [r3, #24]
		prismatic_axis.command_pos = PWM_Satuation(
 8005466:	4b5d      	ldr	r3, [pc, #372]	@ (80055dc <update_homing_sequence+0x284>)
 8005468:	edd3 7a06 	vldr	s15, [r3, #24]
 800546c:	eeb0 0a67 	vmov.f32	s0, s15
 8005470:	4861      	ldr	r0, [pc, #388]	@ (80055f8 <update_homing_sequence+0x2a0>)
 8005472:	f7fb fed1 	bl	8001218 <PID_CONTROLLER_Compute>
 8005476:	eeb0 8a40 	vmov.f32	s16, s0
				PID_CONTROLLER_Compute(&prismatic_velocity_pid,
						prismatic_axis.vel_error),
				ZGX45RGG_400RPM_Constant.U_max,
 800547a:	4b60      	ldr	r3, [pc, #384]	@ (80055fc <update_homing_sequence+0x2a4>)
 800547c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		prismatic_axis.command_pos = PWM_Satuation(
 8005480:	4610      	mov	r0, r2
 8005482:	4619      	mov	r1, r3
 8005484:	f7fb fb1e 	bl	8000ac4 <__aeabi_d2iz>
 8005488:	4604      	mov	r4, r0
				-ZGX45RGG_400RPM_Constant.U_max);
 800548a:	4b5c      	ldr	r3, [pc, #368]	@ (80055fc <update_homing_sequence+0x2a4>)
 800548c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8005490:	63ba      	str	r2, [r7, #56]	@ 0x38
 8005492:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8005496:	63fb      	str	r3, [r7, #60]	@ 0x3c
		prismatic_axis.command_pos = PWM_Satuation(
 8005498:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800549c:	f7fb fb12 	bl	8000ac4 <__aeabi_d2iz>
 80054a0:	4603      	mov	r3, r0
 80054a2:	4619      	mov	r1, r3
 80054a4:	4620      	mov	r0, r4
 80054a6:	eeb0 0a48 	vmov.f32	s0, s16
 80054aa:	f7fb fe53 	bl	8001154 <PWM_Satuation>
 80054ae:	ee07 0a90 	vmov	s15, r0
 80054b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80054b6:	4b49      	ldr	r3, [pc, #292]	@ (80055dc <update_homing_sequence+0x284>)
 80054b8:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		// Add feedforward compensation during homing
		prismatic_axis.ffd = PRISMATIC_MOTOR_FFD_Compute(&prismatic_motor_ffd,
 80054bc:	eeb5 0a00 	vmov.f32	s0, #80	@ 0x3e800000  0.250
 80054c0:	484f      	ldr	r0, [pc, #316]	@ (8005600 <update_homing_sequence+0x2a8>)
 80054c2:	f7fc f9f1 	bl	80018a8 <PRISMATIC_MOTOR_FFD_Compute>
 80054c6:	eef0 7a40 	vmov.f32	s15, s0
 80054ca:	4b44      	ldr	r3, [pc, #272]	@ (80055dc <update_homing_sequence+0x284>)
 80054cc:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
				HOMING_PRIS_VELOCITY / 1000.0f);
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 80054d0:	4b4c      	ldr	r3, [pc, #304]	@ (8005604 <update_homing_sequence+0x2ac>)
 80054d2:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
				revolute_encoder.rads, 0.0f, prismatic_encoder.mm / 1000.0f);
 80054d6:	4b4c      	ldr	r3, [pc, #304]	@ (8005608 <update_homing_sequence+0x2b0>)
 80054d8:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 80054dc:	ed9f 6a4b 	vldr	s12, [pc, #300]	@ 800560c <update_homing_sequence+0x2b4>
 80054e0:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80054e4:	eeb0 1a66 	vmov.f32	s2, s13
 80054e8:	eddf 0a49 	vldr	s1, [pc, #292]	@ 8005610 <update_homing_sequence+0x2b8>
 80054ec:	eeb0 0a47 	vmov.f32	s0, s14
 80054f0:	4848      	ldr	r0, [pc, #288]	@ (8005614 <update_homing_sequence+0x2bc>)
 80054f2:	f7fc fa6c 	bl	80019ce <PRISMATIC_MOTOR_DFD_Compute>
 80054f6:	eef0 7a40 	vmov.f32	s15, s0
 80054fa:	4b38      	ldr	r3, [pc, #224]	@ (80055dc <update_homing_sequence+0x284>)
 80054fc:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
		prismatic_axis.command_pos += prismatic_axis.ffd + prismatic_axis.dfd;
 8005500:	4b36      	ldr	r3, [pc, #216]	@ (80055dc <update_homing_sequence+0x284>)
 8005502:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8005506:	4b35      	ldr	r3, [pc, #212]	@ (80055dc <update_homing_sequence+0x284>)
 8005508:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 800550c:	4b33      	ldr	r3, [pc, #204]	@ (80055dc <update_homing_sequence+0x284>)
 800550e:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8005512:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005516:	ee77 7a27 	vadd.f32	s15, s14, s15
 800551a:	4b30      	ldr	r3, [pc, #192]	@ (80055dc <update_homing_sequence+0x284>)
 800551c:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8005520:	4b2e      	ldr	r3, [pc, #184]	@ (80055dc <update_homing_sequence+0x284>)
 8005522:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
				ZGX45RGG_400RPM_Constant.U_max,
 8005526:	4b35      	ldr	r3, [pc, #212]	@ (80055fc <update_homing_sequence+0x2a4>)
 8005528:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 800552c:	4610      	mov	r0, r2
 800552e:	4619      	mov	r1, r3
 8005530:	f7fb fac8 	bl	8000ac4 <__aeabi_d2iz>
 8005534:	4604      	mov	r4, r0
				-ZGX45RGG_400RPM_Constant.U_max);
 8005536:	4b31      	ldr	r3, [pc, #196]	@ (80055fc <update_homing_sequence+0x2a4>)
 8005538:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800553c:	633a      	str	r2, [r7, #48]	@ 0x30
 800553e:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8005542:	637b      	str	r3, [r7, #52]	@ 0x34
		prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8005544:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8005548:	f7fb fabc 	bl	8000ac4 <__aeabi_d2iz>
 800554c:	4603      	mov	r3, r0
 800554e:	4619      	mov	r1, r3
 8005550:	4620      	mov	r0, r4
 8005552:	eeb0 0a48 	vmov.f32	s0, s16
 8005556:	f7fb fdfd 	bl	8001154 <PWM_Satuation>
 800555a:	ee07 0a90 	vmov	s15, r0
 800555e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005562:	4b1e      	ldr	r3, [pc, #120]	@ (80055dc <update_homing_sequence+0x284>)
 8005564:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		if (low_photo) {
 8005568:	4b20      	ldr	r3, [pc, #128]	@ (80055ec <update_homing_sequence+0x294>)
 800556a:	781b      	ldrb	r3, [r3, #0]
 800556c:	b2db      	uxtb	r3, r3
 800556e:	2b00      	cmp	r3, #0
 8005570:	f000 8537 	beq.w	8005fe2 <update_homing_sequence+0xc8a>
			// Found low photo, stop and start delay
			prismatic_axis.command_pos = 0.0f;
 8005574:	4b19      	ldr	r3, [pc, #100]	@ (80055dc <update_homing_sequence+0x284>)
 8005576:	f04f 0200 	mov.w	r2, #0
 800557a:	625a      	str	r2, [r3, #36]	@ 0x24
			revolute_axis.command_pos = 0.0f;
 800557c:	4b18      	ldr	r3, [pc, #96]	@ (80055e0 <update_homing_sequence+0x288>)
 800557e:	f04f 0200 	mov.w	r2, #0
 8005582:	625a      	str	r2, [r3, #36]	@ 0x24
			motion_delay_timer = 0;
 8005584:	4b17      	ldr	r3, [pc, #92]	@ (80055e4 <update_homing_sequence+0x28c>)
 8005586:	2200      	movs	r2, #0
 8005588:	601a      	str	r2, [r3, #0]
			homing_state = HOMING_DELAY_AFTER_LOW_PHOTO;
 800558a:	4b13      	ldr	r3, [pc, #76]	@ (80055d8 <update_homing_sequence+0x280>)
 800558c:	2204      	movs	r2, #4
 800558e:	701a      	strb	r2, [r3, #0]
			low_photo = false; // Reset flag after use
 8005590:	4b16      	ldr	r3, [pc, #88]	@ (80055ec <update_homing_sequence+0x294>)
 8005592:	2200      	movs	r2, #0
 8005594:	701a      	strb	r2, [r3, #0]
			up_photo = false;  // Reset for next detection
 8005596:	4b16      	ldr	r3, [pc, #88]	@ (80055f0 <update_homing_sequence+0x298>)
 8005598:	2200      	movs	r2, #0
 800559a:	701a      	strb	r2, [r3, #0]
		}
		break;
 800559c:	f000 bd21 	b.w	8005fe2 <update_homing_sequence+0xc8a>

	case HOMING_DELAY_AFTER_LOW_PHOTO:
		// Stop motors and wait
		prismatic_axis.command_pos = 0.0f;
 80055a0:	4b0e      	ldr	r3, [pc, #56]	@ (80055dc <update_homing_sequence+0x284>)
 80055a2:	f04f 0200 	mov.w	r2, #0
 80055a6:	625a      	str	r2, [r3, #36]	@ 0x24
		revolute_axis.command_pos = 0.0f;
 80055a8:	4b0d      	ldr	r3, [pc, #52]	@ (80055e0 <update_homing_sequence+0x288>)
 80055aa:	f04f 0200 	mov.w	r2, #0
 80055ae:	625a      	str	r2, [r3, #36]	@ 0x24
		motion_delay_timer++;
 80055b0:	4b0c      	ldr	r3, [pc, #48]	@ (80055e4 <update_homing_sequence+0x28c>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	3301      	adds	r3, #1
 80055b6:	4a0b      	ldr	r2, [pc, #44]	@ (80055e4 <update_homing_sequence+0x28c>)
 80055b8:	6013      	str	r3, [r2, #0]
		if (motion_delay_timer >= 1500) {
 80055ba:	4b0a      	ldr	r3, [pc, #40]	@ (80055e4 <update_homing_sequence+0x28c>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f240 52db 	movw	r2, #1499	@ 0x5db
 80055c2:	4293      	cmp	r3, r2
 80055c4:	f240 850f 	bls.w	8005fe6 <update_homing_sequence+0xc8e>
			homing_state = HOMING_PRIS_UP_TO_UP_PHOTO;
 80055c8:	4b03      	ldr	r3, [pc, #12]	@ (80055d8 <update_homing_sequence+0x280>)
 80055ca:	2205      	movs	r2, #5
 80055cc:	701a      	strb	r2, [r3, #0]
		}
		break;
 80055ce:	f000 bd0a 	b.w	8005fe6 <update_homing_sequence+0xc8e>
 80055d2:	bf00      	nop
 80055d4:	20000367 	.word	0x20000367
 80055d8:	20000366 	.word	0x20000366
 80055dc:	20000278 	.word	0x20000278
 80055e0:	200002b8 	.word	0x200002b8
 80055e4:	20000350 	.word	0x20000350
 80055e8:	48000400 	.word	0x48000400
 80055ec:	20000365 	.word	0x20000365
 80055f0:	20000364 	.word	0x20000364
 80055f4:	437a0000 	.word	0x437a0000
 80055f8:	2000051c 	.word	0x2000051c
 80055fc:	20000080 	.word	0x20000080
 8005600:	20000594 	.word	0x20000594
 8005604:	20000498 	.word	0x20000498
 8005608:	2000043c 	.word	0x2000043c
 800560c:	447a0000 	.word	0x447a0000
 8005610:	00000000 	.word	0x00000000
 8005614:	20000598 	.word	0x20000598

	case HOMING_PRIS_UP_TO_UP_PHOTO:
		// Move prismatic up at constant velocity
		prismatic_axis.vel_error = -HOMING_PRIS_VELOCITY
				- prismatic_axis.kalman_velocity;
 8005618:	4bb6      	ldr	r3, [pc, #728]	@ (80058f4 <update_homing_sequence+0x59c>)
 800561a:	edd3 7a07 	vldr	s15, [r3, #28]
 800561e:	ed9f 7ab6 	vldr	s14, [pc, #728]	@ 80058f8 <update_homing_sequence+0x5a0>
 8005622:	ee77 7a67 	vsub.f32	s15, s14, s15
		prismatic_axis.vel_error = -HOMING_PRIS_VELOCITY
 8005626:	4bb3      	ldr	r3, [pc, #716]	@ (80058f4 <update_homing_sequence+0x59c>)
 8005628:	edc3 7a06 	vstr	s15, [r3, #24]
		prismatic_axis.command_pos = PWM_Satuation(
 800562c:	4bb1      	ldr	r3, [pc, #708]	@ (80058f4 <update_homing_sequence+0x59c>)
 800562e:	edd3 7a06 	vldr	s15, [r3, #24]
 8005632:	eeb0 0a67 	vmov.f32	s0, s15
 8005636:	48b1      	ldr	r0, [pc, #708]	@ (80058fc <update_homing_sequence+0x5a4>)
 8005638:	f7fb fdee 	bl	8001218 <PID_CONTROLLER_Compute>
 800563c:	eeb0 8a40 	vmov.f32	s16, s0
				PID_CONTROLLER_Compute(&prismatic_velocity_pid,
						prismatic_axis.vel_error),
				ZGX45RGG_400RPM_Constant.U_max,
 8005640:	4baf      	ldr	r3, [pc, #700]	@ (8005900 <update_homing_sequence+0x5a8>)
 8005642:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		prismatic_axis.command_pos = PWM_Satuation(
 8005646:	4610      	mov	r0, r2
 8005648:	4619      	mov	r1, r3
 800564a:	f7fb fa3b 	bl	8000ac4 <__aeabi_d2iz>
 800564e:	4604      	mov	r4, r0
				-ZGX45RGG_400RPM_Constant.U_max);
 8005650:	4bab      	ldr	r3, [pc, #684]	@ (8005900 <update_homing_sequence+0x5a8>)
 8005652:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8005656:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005658:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800565c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		prismatic_axis.command_pos = PWM_Satuation(
 800565e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8005662:	f7fb fa2f 	bl	8000ac4 <__aeabi_d2iz>
 8005666:	4603      	mov	r3, r0
 8005668:	4619      	mov	r1, r3
 800566a:	4620      	mov	r0, r4
 800566c:	eeb0 0a48 	vmov.f32	s0, s16
 8005670:	f7fb fd70 	bl	8001154 <PWM_Satuation>
 8005674:	ee07 0a90 	vmov	s15, r0
 8005678:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800567c:	4b9d      	ldr	r3, [pc, #628]	@ (80058f4 <update_homing_sequence+0x59c>)
 800567e:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		// Add feedforward compensation during homing
		prismatic_axis.ffd = PRISMATIC_MOTOR_FFD_Compute(&prismatic_motor_ffd,
 8005682:	eebd 0a00 	vmov.f32	s0, #208	@ 0xbe800000 -0.250
 8005686:	489f      	ldr	r0, [pc, #636]	@ (8005904 <update_homing_sequence+0x5ac>)
 8005688:	f7fc f90e 	bl	80018a8 <PRISMATIC_MOTOR_FFD_Compute>
 800568c:	eef0 7a40 	vmov.f32	s15, s0
 8005690:	4b98      	ldr	r3, [pc, #608]	@ (80058f4 <update_homing_sequence+0x59c>)
 8005692:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
				-HOMING_PRIS_VELOCITY / 1000.0f);
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 8005696:	4b9c      	ldr	r3, [pc, #624]	@ (8005908 <update_homing_sequence+0x5b0>)
 8005698:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
				revolute_encoder.rads, 0.0f, prismatic_encoder.mm / 1000.0f);
 800569c:	4b9b      	ldr	r3, [pc, #620]	@ (800590c <update_homing_sequence+0x5b4>)
 800569e:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 80056a2:	ed9f 6a9b 	vldr	s12, [pc, #620]	@ 8005910 <update_homing_sequence+0x5b8>
 80056a6:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80056aa:	eeb0 1a66 	vmov.f32	s2, s13
 80056ae:	eddf 0a99 	vldr	s1, [pc, #612]	@ 8005914 <update_homing_sequence+0x5bc>
 80056b2:	eeb0 0a47 	vmov.f32	s0, s14
 80056b6:	4898      	ldr	r0, [pc, #608]	@ (8005918 <update_homing_sequence+0x5c0>)
 80056b8:	f7fc f989 	bl	80019ce <PRISMATIC_MOTOR_DFD_Compute>
 80056bc:	eef0 7a40 	vmov.f32	s15, s0
 80056c0:	4b8c      	ldr	r3, [pc, #560]	@ (80058f4 <update_homing_sequence+0x59c>)
 80056c2:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
		prismatic_axis.command_pos += prismatic_axis.ffd + prismatic_axis.dfd;
 80056c6:	4b8b      	ldr	r3, [pc, #556]	@ (80058f4 <update_homing_sequence+0x59c>)
 80056c8:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80056cc:	4b89      	ldr	r3, [pc, #548]	@ (80058f4 <update_homing_sequence+0x59c>)
 80056ce:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 80056d2:	4b88      	ldr	r3, [pc, #544]	@ (80058f4 <update_homing_sequence+0x59c>)
 80056d4:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80056d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80056e0:	4b84      	ldr	r3, [pc, #528]	@ (80058f4 <update_homing_sequence+0x59c>)
 80056e2:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 80056e6:	4b83      	ldr	r3, [pc, #524]	@ (80058f4 <update_homing_sequence+0x59c>)
 80056e8:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
				ZGX45RGG_400RPM_Constant.U_max,
 80056ec:	4b84      	ldr	r3, [pc, #528]	@ (8005900 <update_homing_sequence+0x5a8>)
 80056ee:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 80056f2:	4610      	mov	r0, r2
 80056f4:	4619      	mov	r1, r3
 80056f6:	f7fb f9e5 	bl	8000ac4 <__aeabi_d2iz>
 80056fa:	4604      	mov	r4, r0
				-ZGX45RGG_400RPM_Constant.U_max);
 80056fc:	4b80      	ldr	r3, [pc, #512]	@ (8005900 <update_homing_sequence+0x5a8>)
 80056fe:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8005702:	623a      	str	r2, [r7, #32]
 8005704:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8005708:	627b      	str	r3, [r7, #36]	@ 0x24
		prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 800570a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800570e:	f7fb f9d9 	bl	8000ac4 <__aeabi_d2iz>
 8005712:	4603      	mov	r3, r0
 8005714:	4619      	mov	r1, r3
 8005716:	4620      	mov	r0, r4
 8005718:	eeb0 0a48 	vmov.f32	s0, s16
 800571c:	f7fb fd1a 	bl	8001154 <PWM_Satuation>
 8005720:	ee07 0a90 	vmov	s15, r0
 8005724:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005728:	4b72      	ldr	r3, [pc, #456]	@ (80058f4 <update_homing_sequence+0x59c>)
 800572a:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		if (up_photo) {
 800572e:	4b7b      	ldr	r3, [pc, #492]	@ (800591c <update_homing_sequence+0x5c4>)
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	b2db      	uxtb	r3, r3
 8005734:	2b00      	cmp	r3, #0
 8005736:	f000 8458 	beq.w	8005fea <update_homing_sequence+0xc92>
			// Found up photo, stop and start delay before backup
			prismatic_axis.command_pos = 0.0f;
 800573a:	4b6e      	ldr	r3, [pc, #440]	@ (80058f4 <update_homing_sequence+0x59c>)
 800573c:	f04f 0200 	mov.w	r2, #0
 8005740:	625a      	str	r2, [r3, #36]	@ 0x24
			revolute_axis.command_pos = 0.0f;
 8005742:	4b77      	ldr	r3, [pc, #476]	@ (8005920 <update_homing_sequence+0x5c8>)
 8005744:	f04f 0200 	mov.w	r2, #0
 8005748:	625a      	str	r2, [r3, #36]	@ 0x24
			motion_delay_timer = 0;
 800574a:	4b76      	ldr	r3, [pc, #472]	@ (8005924 <update_homing_sequence+0x5cc>)
 800574c:	2200      	movs	r2, #0
 800574e:	601a      	str	r2, [r3, #0]
			homing_state = HOMING_DELAY_AFTER_UP_PHOTO;
 8005750:	4b75      	ldr	r3, [pc, #468]	@ (8005928 <update_homing_sequence+0x5d0>)
 8005752:	2206      	movs	r2, #6
 8005754:	701a      	strb	r2, [r3, #0]
			up_photo = false; // Reset flag after use
 8005756:	4b71      	ldr	r3, [pc, #452]	@ (800591c <update_homing_sequence+0x5c4>)
 8005758:	2200      	movs	r2, #0
 800575a:	701a      	strb	r2, [r3, #0]
		}
		break;
 800575c:	f000 bc45 	b.w	8005fea <update_homing_sequence+0xc92>

	case HOMING_DELAY_AFTER_UP_PHOTO:
		// Stop motors and wait before starting backup procedure
		prismatic_axis.command_pos = 0.0f;
 8005760:	4b64      	ldr	r3, [pc, #400]	@ (80058f4 <update_homing_sequence+0x59c>)
 8005762:	f04f 0200 	mov.w	r2, #0
 8005766:	625a      	str	r2, [r3, #36]	@ 0x24
		revolute_axis.command_pos = 0.0f;
 8005768:	4b6d      	ldr	r3, [pc, #436]	@ (8005920 <update_homing_sequence+0x5c8>)
 800576a:	f04f 0200 	mov.w	r2, #0
 800576e:	625a      	str	r2, [r3, #36]	@ 0x24
		motion_delay_timer++;
 8005770:	4b6c      	ldr	r3, [pc, #432]	@ (8005924 <update_homing_sequence+0x5cc>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	3301      	adds	r3, #1
 8005776:	4a6b      	ldr	r2, [pc, #428]	@ (8005924 <update_homing_sequence+0x5cc>)
 8005778:	6013      	str	r3, [r2, #0]
		if (motion_delay_timer >= 1500) {
 800577a:	4b6a      	ldr	r3, [pc, #424]	@ (8005924 <update_homing_sequence+0x5cc>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f240 52db 	movw	r2, #1499	@ 0x5db
 8005782:	4293      	cmp	r3, r2
 8005784:	f240 846c 	bls.w	8006060 <update_homing_sequence+0xd08>
			// Start backup procedure to move away from photo sensor
			homing_state = HOMING_PRIS_BACKUP_FROM_UP_PHOTO;
 8005788:	4b67      	ldr	r3, [pc, #412]	@ (8005928 <update_homing_sequence+0x5d0>)
 800578a:	2207      	movs	r2, #7
 800578c:	701a      	strb	r2, [r3, #0]
		}
		break;
 800578e:	f000 bc67 	b.w	8006060 <update_homing_sequence+0xd08>

		// =================== NEW BACKUP STATE ===================
	case HOMING_PRIS_BACKUP_FROM_UP_PHOTO:
		// Move prismatic down slowly until photo sensor is no longer triggered
		prismatic_axis.vel_error = HOMING_BACKUP_VELOCITY
				- prismatic_axis.kalman_velocity;
 8005792:	4b58      	ldr	r3, [pc, #352]	@ (80058f4 <update_homing_sequence+0x59c>)
 8005794:	edd3 7a07 	vldr	s15, [r3, #28]
 8005798:	ed9f 7a64 	vldr	s14, [pc, #400]	@ 800592c <update_homing_sequence+0x5d4>
 800579c:	ee77 7a67 	vsub.f32	s15, s14, s15
		prismatic_axis.vel_error = HOMING_BACKUP_VELOCITY
 80057a0:	4b54      	ldr	r3, [pc, #336]	@ (80058f4 <update_homing_sequence+0x59c>)
 80057a2:	edc3 7a06 	vstr	s15, [r3, #24]
		prismatic_axis.command_pos = PWM_Satuation(
 80057a6:	4b53      	ldr	r3, [pc, #332]	@ (80058f4 <update_homing_sequence+0x59c>)
 80057a8:	edd3 7a06 	vldr	s15, [r3, #24]
 80057ac:	eeb0 0a67 	vmov.f32	s0, s15
 80057b0:	4852      	ldr	r0, [pc, #328]	@ (80058fc <update_homing_sequence+0x5a4>)
 80057b2:	f7fb fd31 	bl	8001218 <PID_CONTROLLER_Compute>
 80057b6:	eeb0 8a40 	vmov.f32	s16, s0
				PID_CONTROLLER_Compute(&prismatic_velocity_pid,
						prismatic_axis.vel_error),
				ZGX45RGG_400RPM_Constant.U_max,
 80057ba:	4b51      	ldr	r3, [pc, #324]	@ (8005900 <update_homing_sequence+0x5a8>)
 80057bc:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		prismatic_axis.command_pos = PWM_Satuation(
 80057c0:	4610      	mov	r0, r2
 80057c2:	4619      	mov	r1, r3
 80057c4:	f7fb f97e 	bl	8000ac4 <__aeabi_d2iz>
 80057c8:	4604      	mov	r4, r0
				-ZGX45RGG_400RPM_Constant.U_max);
 80057ca:	4b4d      	ldr	r3, [pc, #308]	@ (8005900 <update_homing_sequence+0x5a8>)
 80057cc:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80057d0:	61ba      	str	r2, [r7, #24]
 80057d2:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80057d6:	61fb      	str	r3, [r7, #28]
		prismatic_axis.command_pos = PWM_Satuation(
 80057d8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80057dc:	f7fb f972 	bl	8000ac4 <__aeabi_d2iz>
 80057e0:	4603      	mov	r3, r0
 80057e2:	4619      	mov	r1, r3
 80057e4:	4620      	mov	r0, r4
 80057e6:	eeb0 0a48 	vmov.f32	s0, s16
 80057ea:	f7fb fcb3 	bl	8001154 <PWM_Satuation>
 80057ee:	ee07 0a90 	vmov	s15, r0
 80057f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80057f6:	4b3f      	ldr	r3, [pc, #252]	@ (80058f4 <update_homing_sequence+0x59c>)
 80057f8:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		// Add feedforward compensation during backup
		prismatic_axis.ffd = PRISMATIC_MOTOR_FFD_Compute(&prismatic_motor_ffd,
 80057fc:	ed9f 0a4c 	vldr	s0, [pc, #304]	@ 8005930 <update_homing_sequence+0x5d8>
 8005800:	4840      	ldr	r0, [pc, #256]	@ (8005904 <update_homing_sequence+0x5ac>)
 8005802:	f7fc f851 	bl	80018a8 <PRISMATIC_MOTOR_FFD_Compute>
 8005806:	eef0 7a40 	vmov.f32	s15, s0
 800580a:	4b3a      	ldr	r3, [pc, #232]	@ (80058f4 <update_homing_sequence+0x59c>)
 800580c:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
				HOMING_BACKUP_VELOCITY / 1000.0f);
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 8005810:	4b3d      	ldr	r3, [pc, #244]	@ (8005908 <update_homing_sequence+0x5b0>)
 8005812:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
				revolute_encoder.rads, 0.0f, prismatic_encoder.mm / 1000.0f);
 8005816:	4b3d      	ldr	r3, [pc, #244]	@ (800590c <update_homing_sequence+0x5b4>)
 8005818:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 800581c:	ed9f 6a3c 	vldr	s12, [pc, #240]	@ 8005910 <update_homing_sequence+0x5b8>
 8005820:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8005824:	eeb0 1a66 	vmov.f32	s2, s13
 8005828:	eddf 0a3a 	vldr	s1, [pc, #232]	@ 8005914 <update_homing_sequence+0x5bc>
 800582c:	eeb0 0a47 	vmov.f32	s0, s14
 8005830:	4839      	ldr	r0, [pc, #228]	@ (8005918 <update_homing_sequence+0x5c0>)
 8005832:	f7fc f8cc 	bl	80019ce <PRISMATIC_MOTOR_DFD_Compute>
 8005836:	eef0 7a40 	vmov.f32	s15, s0
 800583a:	4b2e      	ldr	r3, [pc, #184]	@ (80058f4 <update_homing_sequence+0x59c>)
 800583c:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
		prismatic_axis.command_pos += prismatic_axis.ffd + prismatic_axis.dfd;
 8005840:	4b2c      	ldr	r3, [pc, #176]	@ (80058f4 <update_homing_sequence+0x59c>)
 8005842:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8005846:	4b2b      	ldr	r3, [pc, #172]	@ (80058f4 <update_homing_sequence+0x59c>)
 8005848:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 800584c:	4b29      	ldr	r3, [pc, #164]	@ (80058f4 <update_homing_sequence+0x59c>)
 800584e:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8005852:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005856:	ee77 7a27 	vadd.f32	s15, s14, s15
 800585a:	4b26      	ldr	r3, [pc, #152]	@ (80058f4 <update_homing_sequence+0x59c>)
 800585c:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8005860:	4b24      	ldr	r3, [pc, #144]	@ (80058f4 <update_homing_sequence+0x59c>)
 8005862:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
				ZGX45RGG_400RPM_Constant.U_max,
 8005866:	4b26      	ldr	r3, [pc, #152]	@ (8005900 <update_homing_sequence+0x5a8>)
 8005868:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 800586c:	4610      	mov	r0, r2
 800586e:	4619      	mov	r1, r3
 8005870:	f7fb f928 	bl	8000ac4 <__aeabi_d2iz>
 8005874:	4604      	mov	r4, r0
				-ZGX45RGG_400RPM_Constant.U_max);
 8005876:	4b22      	ldr	r3, [pc, #136]	@ (8005900 <update_homing_sequence+0x5a8>)
 8005878:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800587c:	613a      	str	r2, [r7, #16]
 800587e:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8005882:	617b      	str	r3, [r7, #20]
		prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8005884:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005888:	f7fb f91c 	bl	8000ac4 <__aeabi_d2iz>
 800588c:	4603      	mov	r3, r0
 800588e:	4619      	mov	r1, r3
 8005890:	4620      	mov	r0, r4
 8005892:	eeb0 0a48 	vmov.f32	s0, s16
 8005896:	f7fb fc5d 	bl	8001154 <PWM_Satuation>
 800589a:	ee07 0a90 	vmov	s15, r0
 800589e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80058a2:	4b14      	ldr	r3, [pc, #80]	@ (80058f4 <update_homing_sequence+0x59c>)
 80058a4:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		// Check if photo sensor is no longer triggered
		bool current_up_photo = HAL_GPIO_ReadPin(UPPER_PHOTO_GPIO_Port,
 80058a8:	2101      	movs	r1, #1
 80058aa:	4822      	ldr	r0, [pc, #136]	@ (8005934 <update_homing_sequence+0x5dc>)
 80058ac:	f005 fcb2 	bl	800b214 <HAL_GPIO_ReadPin>
 80058b0:	4603      	mov	r3, r0
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	bf14      	ite	ne
 80058b6:	2301      	movne	r3, #1
 80058b8:	2300      	moveq	r3, #0
 80058ba:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
				UPPER_PHOTO_Pin);
		if (!current_up_photo) {
 80058be:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80058c2:	f083 0301 	eor.w	r3, r3, #1
 80058c6:	b2db      	uxtb	r3, r3
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	f000 83cb 	beq.w	8006064 <update_homing_sequence+0xd0c>
			// Photo sensor no longer triggered, stop and proceed
			prismatic_axis.command_pos = 0.0f;
 80058ce:	4b09      	ldr	r3, [pc, #36]	@ (80058f4 <update_homing_sequence+0x59c>)
 80058d0:	f04f 0200 	mov.w	r2, #0
 80058d4:	625a      	str	r2, [r3, #36]	@ 0x24
			revolute_axis.command_pos = 0.0f;
 80058d6:	4b12      	ldr	r3, [pc, #72]	@ (8005920 <update_homing_sequence+0x5c8>)
 80058d8:	f04f 0200 	mov.w	r2, #0
 80058dc:	625a      	str	r2, [r3, #36]	@ 0x24
			motion_delay_timer = 0;
 80058de:	4b11      	ldr	r3, [pc, #68]	@ (8005924 <update_homing_sequence+0x5cc>)
 80058e0:	2200      	movs	r2, #0
 80058e2:	601a      	str	r2, [r3, #0]
			homing_state = HOMING_DELAY_AFTER_BACKUP;
 80058e4:	4b10      	ldr	r3, [pc, #64]	@ (8005928 <update_homing_sequence+0x5d0>)
 80058e6:	2208      	movs	r2, #8
 80058e8:	701a      	strb	r2, [r3, #0]
			up_photo = false; // Reset flag
 80058ea:	4b0c      	ldr	r3, [pc, #48]	@ (800591c <update_homing_sequence+0x5c4>)
 80058ec:	2200      	movs	r2, #0
 80058ee:	701a      	strb	r2, [r3, #0]
		}
		break;
 80058f0:	e3b8      	b.n	8006064 <update_homing_sequence+0xd0c>
 80058f2:	bf00      	nop
 80058f4:	20000278 	.word	0x20000278
 80058f8:	c37a0000 	.word	0xc37a0000
 80058fc:	2000051c 	.word	0x2000051c
 8005900:	20000080 	.word	0x20000080
 8005904:	20000594 	.word	0x20000594
 8005908:	20000498 	.word	0x20000498
 800590c:	2000043c 	.word	0x2000043c
 8005910:	447a0000 	.word	0x447a0000
 8005914:	00000000 	.word	0x00000000
 8005918:	20000598 	.word	0x20000598
 800591c:	20000364 	.word	0x20000364
 8005920:	200002b8 	.word	0x200002b8
 8005924:	20000350 	.word	0x20000350
 8005928:	20000366 	.word	0x20000366
 800592c:	42480000 	.word	0x42480000
 8005930:	3d4ccccd 	.word	0x3d4ccccd
 8005934:	48000400 	.word	0x48000400

		// =================== NEW DELAY STATE ===================
	case HOMING_DELAY_AFTER_BACKUP:
		// Stop motors and wait after backup
		prismatic_axis.command_pos = 0.0f;
 8005938:	4b11      	ldr	r3, [pc, #68]	@ (8005980 <update_homing_sequence+0x628>)
 800593a:	f04f 0200 	mov.w	r2, #0
 800593e:	625a      	str	r2, [r3, #36]	@ 0x24
		revolute_axis.command_pos = 0.0f;
 8005940:	4b10      	ldr	r3, [pc, #64]	@ (8005984 <update_homing_sequence+0x62c>)
 8005942:	f04f 0200 	mov.w	r2, #0
 8005946:	625a      	str	r2, [r3, #36]	@ 0x24
		motion_delay_timer++;
 8005948:	4b0f      	ldr	r3, [pc, #60]	@ (8005988 <update_homing_sequence+0x630>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	3301      	adds	r3, #1
 800594e:	4a0e      	ldr	r2, [pc, #56]	@ (8005988 <update_homing_sequence+0x630>)
 8005950:	6013      	str	r3, [r2, #0]
		if (motion_delay_timer >= 1500) {
 8005952:	4b0d      	ldr	r3, [pc, #52]	@ (8005988 <update_homing_sequence+0x630>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f240 52db 	movw	r2, #1499	@ 0x5db
 800595a:	4293      	cmp	r3, r2
 800595c:	f240 8384 	bls.w	8006068 <update_homing_sequence+0xd10>
			if (first_startup) {
 8005960:	4b0a      	ldr	r3, [pc, #40]	@ (800598c <update_homing_sequence+0x634>)
 8005962:	781b      	ldrb	r3, [r3, #0]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d006      	beq.n	8005976 <update_homing_sequence+0x61e>
				// First startup - find prox sensor first (don't know where 0° is yet)
				homing_state = HOMING_REV_CW_TO_PROX1;
 8005968:	4b09      	ldr	r3, [pc, #36]	@ (8005990 <update_homing_sequence+0x638>)
 800596a:	220b      	movs	r2, #11
 800596c:	701a      	strb	r2, [r3, #0]
				prox_count = 0; // Reset prox counter
 800596e:	4b09      	ldr	r3, [pc, #36]	@ (8005994 <update_homing_sequence+0x63c>)
 8005970:	2200      	movs	r2, #0
 8005972:	601a      	str	r2, [r3, #0]
			} else {
				// Subsequent homing - go to 0° first (we know where it is)
				homing_state = HOMING_REV_TO_ZERO_DEG;
			}
		}
		break;
 8005974:	e378      	b.n	8006068 <update_homing_sequence+0xd10>
				homing_state = HOMING_REV_TO_ZERO_DEG;
 8005976:	4b06      	ldr	r3, [pc, #24]	@ (8005990 <update_homing_sequence+0x638>)
 8005978:	2209      	movs	r2, #9
 800597a:	701a      	strb	r2, [r3, #0]
		break;
 800597c:	e374      	b.n	8006068 <update_homing_sequence+0xd10>
 800597e:	bf00      	nop
 8005980:	20000278 	.word	0x20000278
 8005984:	200002b8 	.word	0x200002b8
 8005988:	20000350 	.word	0x20000350
 800598c:	2000012f 	.word	0x2000012f
 8005990:	20000366 	.word	0x20000366
 8005994:	20000360 	.word	0x20000360
		static Trapezoidal_EvaStruct revZeroEva;
		static Trapezoidal_GenStruct revZeroGen;
		static float rev_zero_initial_pos;
		static float rev_zero_target_pos;

		if (!rev_to_zero_trajectory_started) {
 8005998:	4bc4      	ldr	r3, [pc, #784]	@ (8005cac <update_homing_sequence+0x954>)
 800599a:	781b      	ldrb	r3, [r3, #0]
 800599c:	f083 0301 	eor.w	r3, r3, #1
 80059a0:	b2db      	uxtb	r3, r3
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d062      	beq.n	8005a6c <update_homing_sequence+0x714>
			// Get current position and calculate shortest path to 0 degrees
			float current_rev_pos = revolute_encoder.rads;
 80059a6:	4bc2      	ldr	r3, [pc, #776]	@ (8005cb0 <update_homing_sequence+0x958>)
 80059a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
			float normalized_current = normalize_angle(current_rev_pos);
 80059ac:	ed97 0a17 	vldr	s0, [r7, #92]	@ 0x5c
 80059b0:	f000 fb6a 	bl	8006088 <normalize_angle>
 80059b4:	ed87 0a16 	vstr	s0, [r7, #88]	@ 0x58
			float current_deg = normalized_current * 180.0f / PI;
 80059b8:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 80059bc:	ed9f 7abd 	vldr	s14, [pc, #756]	@ 8005cb4 <update_homing_sequence+0x95c>
 80059c0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80059c4:	eddf 6abc 	vldr	s13, [pc, #752]	@ 8005cb8 <update_homing_sequence+0x960>
 80059c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80059cc:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54

			// Calculate shortest movement to 0 degrees
			float target_deg = 0.0f;
 80059d0:	f04f 0300 	mov.w	r3, #0
 80059d4:	653b      	str	r3, [r7, #80]	@ 0x50
			float movement_deg = calculate_movement_deg(current_deg,
 80059d6:	edd7 0a14 	vldr	s1, [r7, #80]	@ 0x50
 80059da:	ed97 0a15 	vldr	s0, [r7, #84]	@ 0x54
 80059de:	f000 fb79 	bl	80060d4 <calculate_movement_deg>
 80059e2:	ed87 0a13 	vstr	s0, [r7, #76]	@ 0x4c
					target_deg);

			// Convert movement to radians and apply to absolute position
			float movement_rad = movement_deg * PI / 180.0f;
 80059e6:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 80059ea:	ed9f 7ab3 	vldr	s14, [pc, #716]	@ 8005cb8 <update_homing_sequence+0x960>
 80059ee:	ee27 7a87 	vmul.f32	s14, s15, s14
 80059f2:	eddf 6ab0 	vldr	s13, [pc, #704]	@ 8005cb4 <update_homing_sequence+0x95c>
 80059f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80059fa:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

			// Store initial and target positions
			rev_zero_initial_pos = current_rev_pos;
 80059fe:	4aaf      	ldr	r2, [pc, #700]	@ (8005cbc <update_homing_sequence+0x964>)
 8005a00:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005a02:	6013      	str	r3, [r2, #0]
			rev_zero_target_pos = current_rev_pos + movement_rad;
 8005a04:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8005a08:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8005a0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a10:	4bab      	ldr	r3, [pc, #684]	@ (8005cc0 <update_homing_sequence+0x968>)
 8005a12:	edc3 7a00 	vstr	s15, [r3]

			// Generate trajectory from current position to calculated target
			Trapezoidal_Generator(&revZeroGen, rev_zero_initial_pos,
 8005a16:	4ba9      	ldr	r3, [pc, #676]	@ (8005cbc <update_homing_sequence+0x964>)
 8005a18:	ed93 8a00 	vldr	s16, [r3]
 8005a1c:	4ba8      	ldr	r3, [pc, #672]	@ (8005cc0 <update_homing_sequence+0x968>)
 8005a1e:	edd3 8a00 	vldr	s17, [r3]
					rev_zero_target_pos,
					ZGX45RGG_150RPM_Constant.traject_qd_max,
 8005a22:	4ba8      	ldr	r3, [pc, #672]	@ (8005cc4 <update_homing_sequence+0x96c>)
 8005a24:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
			Trapezoidal_Generator(&revZeroGen, rev_zero_initial_pos,
 8005a28:	4610      	mov	r0, r2
 8005a2a:	4619      	mov	r1, r3
 8005a2c:	f7fb f892 	bl	8000b54 <__aeabi_d2f>
 8005a30:	4604      	mov	r4, r0
					ZGX45RGG_150RPM_Constant.traject_qdd_max);
 8005a32:	4ba4      	ldr	r3, [pc, #656]	@ (8005cc4 <update_homing_sequence+0x96c>)
 8005a34:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
			Trapezoidal_Generator(&revZeroGen, rev_zero_initial_pos,
 8005a38:	4610      	mov	r0, r2
 8005a3a:	4619      	mov	r1, r3
 8005a3c:	f7fb f88a 	bl	8000b54 <__aeabi_d2f>
 8005a40:	4603      	mov	r3, r0
 8005a42:	ee01 3a90 	vmov	s3, r3
 8005a46:	ee01 4a10 	vmov	s2, r4
 8005a4a:	eef0 0a68 	vmov.f32	s1, s17
 8005a4e:	eeb0 0a48 	vmov.f32	s0, s16
 8005a52:	489d      	ldr	r0, [pc, #628]	@ (8005cc8 <update_homing_sequence+0x970>)
 8005a54:	f7fe f970 	bl	8003d38 <Trapezoidal_Generator>

			// Reset trajectory evaluation
			revZeroEva.t = 0.0f;
 8005a58:	4b9c      	ldr	r3, [pc, #624]	@ (8005ccc <update_homing_sequence+0x974>)
 8005a5a:	f04f 0200 	mov.w	r2, #0
 8005a5e:	60da      	str	r2, [r3, #12]
			revZeroEva.isFinised = false;
 8005a60:	4b9a      	ldr	r3, [pc, #616]	@ (8005ccc <update_homing_sequence+0x974>)
 8005a62:	2200      	movs	r2, #0
 8005a64:	741a      	strb	r2, [r3, #16]

			rev_to_zero_trajectory_started = true;
 8005a66:	4b91      	ldr	r3, [pc, #580]	@ (8005cac <update_homing_sequence+0x954>)
 8005a68:	2201      	movs	r2, #1
 8005a6a:	701a      	strb	r2, [r3, #0]
		}

		// Update trajectory
		if (!revZeroEva.isFinised) {
 8005a6c:	4b97      	ldr	r3, [pc, #604]	@ (8005ccc <update_homing_sequence+0x974>)
 8005a6e:	7c1b      	ldrb	r3, [r3, #16]
 8005a70:	f083 0301 	eor.w	r3, r3, #1
 8005a74:	b2db      	uxtb	r3, r3
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	f000 82f8 	beq.w	800606c <update_homing_sequence+0xd14>
			Trapezoidal_Evaluated(&revZeroGen, &revZeroEva,
 8005a7c:	4b8f      	ldr	r3, [pc, #572]	@ (8005cbc <update_homing_sequence+0x964>)
 8005a7e:	ed93 8a00 	vldr	s16, [r3]
 8005a82:	4b8f      	ldr	r3, [pc, #572]	@ (8005cc0 <update_homing_sequence+0x968>)
 8005a84:	edd3 8a00 	vldr	s17, [r3]
					rev_zero_initial_pos, rev_zero_target_pos,
					ZGX45RGG_150RPM_Constant.traject_qd_max,
 8005a88:	4b8e      	ldr	r3, [pc, #568]	@ (8005cc4 <update_homing_sequence+0x96c>)
 8005a8a:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
			Trapezoidal_Evaluated(&revZeroGen, &revZeroEva,
 8005a8e:	4610      	mov	r0, r2
 8005a90:	4619      	mov	r1, r3
 8005a92:	f7fb f85f 	bl	8000b54 <__aeabi_d2f>
 8005a96:	4604      	mov	r4, r0
					ZGX45RGG_150RPM_Constant.traject_qdd_max);
 8005a98:	4b8a      	ldr	r3, [pc, #552]	@ (8005cc4 <update_homing_sequence+0x96c>)
 8005a9a:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
			Trapezoidal_Evaluated(&revZeroGen, &revZeroEva,
 8005a9e:	4610      	mov	r0, r2
 8005aa0:	4619      	mov	r1, r3
 8005aa2:	f7fb f857 	bl	8000b54 <__aeabi_d2f>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	ee01 3a90 	vmov	s3, r3
 8005aac:	ee01 4a10 	vmov	s2, r4
 8005ab0:	eef0 0a68 	vmov.f32	s1, s17
 8005ab4:	eeb0 0a48 	vmov.f32	s0, s16
 8005ab8:	4984      	ldr	r1, [pc, #528]	@ (8005ccc <update_homing_sequence+0x974>)
 8005aba:	4883      	ldr	r0, [pc, #524]	@ (8005cc8 <update_homing_sequence+0x970>)
 8005abc:	f7fe f9fe 	bl	8003ebc <Trapezoidal_Evaluated>

			revolute_axis.position = revZeroEva.setposition;
 8005ac0:	4b82      	ldr	r3, [pc, #520]	@ (8005ccc <update_homing_sequence+0x974>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a82      	ldr	r2, [pc, #520]	@ (8005cd0 <update_homing_sequence+0x978>)
 8005ac6:	6013      	str	r3, [r2, #0]
			revolute_axis.velocity = revZeroEva.setvelocity;
 8005ac8:	4b80      	ldr	r3, [pc, #512]	@ (8005ccc <update_homing_sequence+0x974>)
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	4a80      	ldr	r2, [pc, #512]	@ (8005cd0 <update_homing_sequence+0x978>)
 8005ace:	6053      	str	r3, [r2, #4]

			// Use normal revolute control with trajectory
			revolute_axis.pos_error = revolute_axis.position
 8005ad0:	4b7f      	ldr	r3, [pc, #508]	@ (8005cd0 <update_homing_sequence+0x978>)
 8005ad2:	ed93 8a00 	vldr	s16, [r3]
					- normalize_angle(revolute_encoder.rads);
 8005ad6:	4b76      	ldr	r3, [pc, #472]	@ (8005cb0 <update_homing_sequence+0x958>)
 8005ad8:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8005adc:	eeb0 0a67 	vmov.f32	s0, s15
 8005ae0:	f000 fad2 	bl	8006088 <normalize_angle>
 8005ae4:	eef0 7a40 	vmov.f32	s15, s0
 8005ae8:	ee78 7a67 	vsub.f32	s15, s16, s15
			revolute_axis.pos_error = revolute_axis.position
 8005aec:	4b78      	ldr	r3, [pc, #480]	@ (8005cd0 <update_homing_sequence+0x978>)
 8005aee:	edc3 7a05 	vstr	s15, [r3, #20]

			// Ensure error uses the shortest path for control
			if (revolute_axis.pos_error > PI) {
 8005af2:	4b77      	ldr	r3, [pc, #476]	@ (8005cd0 <update_homing_sequence+0x978>)
 8005af4:	edd3 7a05 	vldr	s15, [r3, #20]
 8005af8:	ed9f 7a6f 	vldr	s14, [pc, #444]	@ 8005cb8 <update_homing_sequence+0x960>
 8005afc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b04:	dd09      	ble.n	8005b1a <update_homing_sequence+0x7c2>
				revolute_axis.pos_error -= 2.0f * PI;
 8005b06:	4b72      	ldr	r3, [pc, #456]	@ (8005cd0 <update_homing_sequence+0x978>)
 8005b08:	edd3 7a05 	vldr	s15, [r3, #20]
 8005b0c:	ed9f 7a71 	vldr	s14, [pc, #452]	@ 8005cd4 <update_homing_sequence+0x97c>
 8005b10:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005b14:	4b6e      	ldr	r3, [pc, #440]	@ (8005cd0 <update_homing_sequence+0x978>)
 8005b16:	edc3 7a05 	vstr	s15, [r3, #20]
			}
			if (revolute_axis.pos_error < -PI) {
 8005b1a:	4b6d      	ldr	r3, [pc, #436]	@ (8005cd0 <update_homing_sequence+0x978>)
 8005b1c:	edd3 7a05 	vldr	s15, [r3, #20]
 8005b20:	ed9f 7a6d 	vldr	s14, [pc, #436]	@ 8005cd8 <update_homing_sequence+0x980>
 8005b24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b2c:	d509      	bpl.n	8005b42 <update_homing_sequence+0x7ea>
				revolute_axis.pos_error += 2.0f * PI;
 8005b2e:	4b68      	ldr	r3, [pc, #416]	@ (8005cd0 <update_homing_sequence+0x978>)
 8005b30:	edd3 7a05 	vldr	s15, [r3, #20]
 8005b34:	ed9f 7a67 	vldr	s14, [pc, #412]	@ 8005cd4 <update_homing_sequence+0x97c>
 8005b38:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005b3c:	4b64      	ldr	r3, [pc, #400]	@ (8005cd0 <update_homing_sequence+0x978>)
 8005b3e:	edc3 7a05 	vstr	s15, [r3, #20]
			}

			revolute_axis.command_vel = PWM_Satuation(
 8005b42:	4b63      	ldr	r3, [pc, #396]	@ (8005cd0 <update_homing_sequence+0x978>)
 8005b44:	edd3 7a05 	vldr	s15, [r3, #20]
 8005b48:	eeb0 0a67 	vmov.f32	s0, s15
 8005b4c:	4863      	ldr	r0, [pc, #396]	@ (8005cdc <update_homing_sequence+0x984>)
 8005b4e:	f7fb fb63 	bl	8001218 <PID_CONTROLLER_Compute>
 8005b52:	eeb0 8a40 	vmov.f32	s16, s0
					PID_CONTROLLER_Compute(&revolute_position_pid,
							revolute_axis.pos_error),
					ZGX45RGG_150RPM_Constant.qd_max,
 8005b56:	4b5b      	ldr	r3, [pc, #364]	@ (8005cc4 <update_homing_sequence+0x96c>)
 8005b58:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
			revolute_axis.command_vel = PWM_Satuation(
 8005b5c:	4610      	mov	r0, r2
 8005b5e:	4619      	mov	r1, r3
 8005b60:	f7fa ffb0 	bl	8000ac4 <__aeabi_d2iz>
 8005b64:	4604      	mov	r4, r0
					-ZGX45RGG_150RPM_Constant.qd_max);
 8005b66:	4b57      	ldr	r3, [pc, #348]	@ (8005cc4 <update_homing_sequence+0x96c>)
 8005b68:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8005b6c:	60ba      	str	r2, [r7, #8]
 8005b6e:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8005b72:	60fb      	str	r3, [r7, #12]
			revolute_axis.command_vel = PWM_Satuation(
 8005b74:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005b78:	f7fa ffa4 	bl	8000ac4 <__aeabi_d2iz>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	4619      	mov	r1, r3
 8005b80:	4620      	mov	r0, r4
 8005b82:	eeb0 0a48 	vmov.f32	s0, s16
 8005b86:	f7fb fae5 	bl	8001154 <PWM_Satuation>
 8005b8a:	ee07 0a90 	vmov	s15, r0
 8005b8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b92:	4b4f      	ldr	r3, [pc, #316]	@ (8005cd0 <update_homing_sequence+0x978>)
 8005b94:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

			// Add velocity feedforward for trajectory
			revolute_axis.vel_error = revolute_axis.command_vel
 8005b98:	4b4d      	ldr	r3, [pc, #308]	@ (8005cd0 <update_homing_sequence+0x978>)
 8005b9a:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
					+ revolute_axis.velocity - revolute_axis.kalman_velocity;
 8005b9e:	4b4c      	ldr	r3, [pc, #304]	@ (8005cd0 <update_homing_sequence+0x978>)
 8005ba0:	edd3 7a01 	vldr	s15, [r3, #4]
 8005ba4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005ba8:	4b49      	ldr	r3, [pc, #292]	@ (8005cd0 <update_homing_sequence+0x978>)
 8005baa:	edd3 7a07 	vldr	s15, [r3, #28]
 8005bae:	ee77 7a67 	vsub.f32	s15, s14, s15
			revolute_axis.vel_error = revolute_axis.command_vel
 8005bb2:	4b47      	ldr	r3, [pc, #284]	@ (8005cd0 <update_homing_sequence+0x978>)
 8005bb4:	edc3 7a06 	vstr	s15, [r3, #24]

			revolute_axis.command_pos = PWM_Satuation(
 8005bb8:	4b45      	ldr	r3, [pc, #276]	@ (8005cd0 <update_homing_sequence+0x978>)
 8005bba:	edd3 7a06 	vldr	s15, [r3, #24]
 8005bbe:	eeb0 0a67 	vmov.f32	s0, s15
 8005bc2:	4847      	ldr	r0, [pc, #284]	@ (8005ce0 <update_homing_sequence+0x988>)
 8005bc4:	f7fb fb28 	bl	8001218 <PID_CONTROLLER_Compute>
 8005bc8:	eeb0 8a40 	vmov.f32	s16, s0
					PID_CONTROLLER_Compute(&revolute_velocity_pid,
							revolute_axis.vel_error),
					ZGX45RGG_150RPM_Constant.U_max,
 8005bcc:	4b3d      	ldr	r3, [pc, #244]	@ (8005cc4 <update_homing_sequence+0x96c>)
 8005bce:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
			revolute_axis.command_pos = PWM_Satuation(
 8005bd2:	4610      	mov	r0, r2
 8005bd4:	4619      	mov	r1, r3
 8005bd6:	f7fa ff75 	bl	8000ac4 <__aeabi_d2iz>
 8005bda:	4604      	mov	r4, r0
					-ZGX45RGG_150RPM_Constant.U_max);
 8005bdc:	4b39      	ldr	r3, [pc, #228]	@ (8005cc4 <update_homing_sequence+0x96c>)
 8005bde:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8005be2:	603a      	str	r2, [r7, #0]
 8005be4:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8005be8:	607b      	str	r3, [r7, #4]
			revolute_axis.command_pos = PWM_Satuation(
 8005bea:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005bee:	f7fa ff69 	bl	8000ac4 <__aeabi_d2iz>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	4619      	mov	r1, r3
 8005bf6:	4620      	mov	r0, r4
 8005bf8:	eeb0 0a48 	vmov.f32	s0, s16
 8005bfc:	f7fb faaa 	bl	8001154 <PWM_Satuation>
 8005c00:	ee07 0a90 	vmov	s15, r0
 8005c04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c08:	4b31      	ldr	r3, [pc, #196]	@ (8005cd0 <update_homing_sequence+0x978>)
 8005c0a:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

			// Add feedforward compensation
			revolute_axis.ffd = REVOLUTE_MOTOR_FFD_Compute(&revolute_motor_ffd,
 8005c0e:	4b30      	ldr	r3, [pc, #192]	@ (8005cd0 <update_homing_sequence+0x978>)
 8005c10:	edd3 7a01 	vldr	s15, [r3, #4]
 8005c14:	eeb0 0a67 	vmov.f32	s0, s15
 8005c18:	4832      	ldr	r0, [pc, #200]	@ (8005ce4 <update_homing_sequence+0x98c>)
 8005c1a:	f7fb fcbd 	bl	8001598 <REVOLUTE_MOTOR_FFD_Compute>
 8005c1e:	eef0 7a40 	vmov.f32	s15, s0
 8005c22:	4b2b      	ldr	r3, [pc, #172]	@ (8005cd0 <update_homing_sequence+0x978>)
 8005c24:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
					revolute_axis.velocity);
			revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8005c28:	4b21      	ldr	r3, [pc, #132]	@ (8005cb0 <update_homing_sequence+0x958>)
 8005c2a:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
					revolute_encoder.rads, 0.0f,
					prismatic_encoder.mm / 1000.0f);
 8005c2e:	4b2e      	ldr	r3, [pc, #184]	@ (8005ce8 <update_homing_sequence+0x990>)
 8005c30:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
			revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8005c34:	ed9f 6a2d 	vldr	s12, [pc, #180]	@ 8005cec <update_homing_sequence+0x994>
 8005c38:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8005c3c:	eeb0 1a66 	vmov.f32	s2, s13
 8005c40:	eddf 0a2b 	vldr	s1, [pc, #172]	@ 8005cf0 <update_homing_sequence+0x998>
 8005c44:	eeb0 0a47 	vmov.f32	s0, s14
 8005c48:	482a      	ldr	r0, [pc, #168]	@ (8005cf4 <update_homing_sequence+0x99c>)
 8005c4a:	f7fb fd39 	bl	80016c0 <REVOLUTE_MOTOR_DFD_Compute>
 8005c4e:	eef0 7a40 	vmov.f32	s15, s0
 8005c52:	4b1f      	ldr	r3, [pc, #124]	@ (8005cd0 <update_homing_sequence+0x978>)
 8005c54:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
			revolute_axis.command_pos += revolute_axis.ffd + revolute_axis.dfd;
 8005c58:	4b1d      	ldr	r3, [pc, #116]	@ (8005cd0 <update_homing_sequence+0x978>)
 8005c5a:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8005c5e:	4b1c      	ldr	r3, [pc, #112]	@ (8005cd0 <update_homing_sequence+0x978>)
 8005c60:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 8005c64:	4b1a      	ldr	r3, [pc, #104]	@ (8005cd0 <update_homing_sequence+0x978>)
 8005c66:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8005c6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c72:	4b17      	ldr	r3, [pc, #92]	@ (8005cd0 <update_homing_sequence+0x978>)
 8005c74:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

			revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8005c78:	4b15      	ldr	r3, [pc, #84]	@ (8005cd0 <update_homing_sequence+0x978>)
 8005c7a:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
					ZGX45RGG_150RPM_Constant.U_max,
 8005c7e:	4b11      	ldr	r3, [pc, #68]	@ (8005cc4 <update_homing_sequence+0x96c>)
 8005c80:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
			revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8005c84:	4610      	mov	r0, r2
 8005c86:	4619      	mov	r1, r3
 8005c88:	f7fa ff1c 	bl	8000ac4 <__aeabi_d2iz>
 8005c8c:	4604      	mov	r4, r0
					-ZGX45RGG_150RPM_Constant.U_max);
 8005c8e:	4b0d      	ldr	r3, [pc, #52]	@ (8005cc4 <update_homing_sequence+0x96c>)
 8005c90:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8005c94:	4615      	mov	r5, r2
 8005c96:	f083 4600 	eor.w	r6, r3, #2147483648	@ 0x80000000
			revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8005c9a:	4628      	mov	r0, r5
 8005c9c:	4631      	mov	r1, r6
 8005c9e:	f7fa ff11 	bl	8000ac4 <__aeabi_d2iz>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	4619      	mov	r1, r3
 8005ca6:	4620      	mov	r0, r4
 8005ca8:	e026      	b.n	8005cf8 <update_homing_sequence+0x9a0>
 8005caa:	bf00      	nop
 8005cac:	20000372 	.word	0x20000372
 8005cb0:	20000498 	.word	0x20000498
 8005cb4:	43340000 	.word	0x43340000
 8005cb8:	40490fdb 	.word	0x40490fdb
 8005cbc:	20000374 	.word	0x20000374
 8005cc0:	20000378 	.word	0x20000378
 8005cc4:	20000000 	.word	0x20000000
 8005cc8:	2000037c 	.word	0x2000037c
 8005ccc:	20000390 	.word	0x20000390
 8005cd0:	200002b8 	.word	0x200002b8
 8005cd4:	40c90fdb 	.word	0x40c90fdb
 8005cd8:	c0490fdb 	.word	0xc0490fdb
 8005cdc:	20000544 	.word	0x20000544
 8005ce0:	2000056c 	.word	0x2000056c
 8005ce4:	200005a0 	.word	0x200005a0
 8005ce8:	2000043c 	.word	0x2000043c
 8005cec:	447a0000 	.word	0x447a0000
 8005cf0:	00000000 	.word	0x00000000
 8005cf4:	200005a4 	.word	0x200005a4
 8005cf8:	eeb0 0a48 	vmov.f32	s0, s16
 8005cfc:	f7fb fa2a 	bl	8001154 <PWM_Satuation>
 8005d00:	ee07 0a90 	vmov	s15, r0
 8005d04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d08:	4bbb      	ldr	r3, [pc, #748]	@ (8005ff8 <update_homing_sequence+0xca0>)
 8005d0a:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

			if (revZeroEva.isFinised) {
 8005d0e:	4bbb      	ldr	r3, [pc, #748]	@ (8005ffc <update_homing_sequence+0xca4>)
 8005d10:	7c1b      	ldrb	r3, [r3, #16]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	f000 81aa 	beq.w	800606c <update_homing_sequence+0xd14>
				// Trajectory complete, stop and start delay
				revolute_axis.command_pos = 0.0f;
 8005d18:	4bb7      	ldr	r3, [pc, #732]	@ (8005ff8 <update_homing_sequence+0xca0>)
 8005d1a:	f04f 0200 	mov.w	r2, #0
 8005d1e:	625a      	str	r2, [r3, #36]	@ 0x24
				prismatic_axis.command_pos = 0.0f;
 8005d20:	4bb7      	ldr	r3, [pc, #732]	@ (8006000 <update_homing_sequence+0xca8>)
 8005d22:	f04f 0200 	mov.w	r2, #0
 8005d26:	625a      	str	r2, [r3, #36]	@ 0x24
				revolute_axis.velocity = 0.0f;
 8005d28:	4bb3      	ldr	r3, [pc, #716]	@ (8005ff8 <update_homing_sequence+0xca0>)
 8005d2a:	f04f 0200 	mov.w	r2, #0
 8005d2e:	605a      	str	r2, [r3, #4]
				revolute_axis.ffd = 0.0f;
 8005d30:	4bb1      	ldr	r3, [pc, #708]	@ (8005ff8 <update_homing_sequence+0xca0>)
 8005d32:	f04f 0200 	mov.w	r2, #0
 8005d36:	631a      	str	r2, [r3, #48]	@ 0x30
				revolute_axis.dfd = 0.0f;
 8005d38:	4baf      	ldr	r3, [pc, #700]	@ (8005ff8 <update_homing_sequence+0xca0>)
 8005d3a:	f04f 0200 	mov.w	r2, #0
 8005d3e:	62da      	str	r2, [r3, #44]	@ 0x2c

				motion_delay_timer = 0;
 8005d40:	4bb0      	ldr	r3, [pc, #704]	@ (8006004 <update_homing_sequence+0xcac>)
 8005d42:	2200      	movs	r2, #0
 8005d44:	601a      	str	r2, [r3, #0]
				homing_state = HOMING_DELAY_AFTER_ZERO_DEG;
 8005d46:	4bb0      	ldr	r3, [pc, #704]	@ (8006008 <update_homing_sequence+0xcb0>)
 8005d48:	220a      	movs	r2, #10
 8005d4a:	701a      	strb	r2, [r3, #0]
				prox_count = 0; // Reset prox counter for next stage
 8005d4c:	4baf      	ldr	r3, [pc, #700]	@ (800600c <update_homing_sequence+0xcb4>)
 8005d4e:	2200      	movs	r2, #0
 8005d50:	601a      	str	r2, [r3, #0]
				rev_to_zero_trajectory_started = false; // Reset for next time
 8005d52:	4baf      	ldr	r3, [pc, #700]	@ (8006010 <update_homing_sequence+0xcb8>)
 8005d54:	2200      	movs	r2, #0
 8005d56:	701a      	strb	r2, [r3, #0]
			}
		}
		break;
 8005d58:	e188      	b.n	800606c <update_homing_sequence+0xd14>

	case HOMING_DELAY_AFTER_ZERO_DEG:
		// Stop motors and wait
		prismatic_axis.command_pos = 0.0f;
 8005d5a:	4ba9      	ldr	r3, [pc, #676]	@ (8006000 <update_homing_sequence+0xca8>)
 8005d5c:	f04f 0200 	mov.w	r2, #0
 8005d60:	625a      	str	r2, [r3, #36]	@ 0x24
		revolute_axis.command_pos = 0.0f;
 8005d62:	4ba5      	ldr	r3, [pc, #660]	@ (8005ff8 <update_homing_sequence+0xca0>)
 8005d64:	f04f 0200 	mov.w	r2, #0
 8005d68:	625a      	str	r2, [r3, #36]	@ 0x24
		motion_delay_timer++;
 8005d6a:	4ba6      	ldr	r3, [pc, #664]	@ (8006004 <update_homing_sequence+0xcac>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	3301      	adds	r3, #1
 8005d70:	4aa4      	ldr	r2, [pc, #656]	@ (8006004 <update_homing_sequence+0xcac>)
 8005d72:	6013      	str	r3, [r2, #0]
		if (motion_delay_timer >= 1500) {
 8005d74:	4ba3      	ldr	r3, [pc, #652]	@ (8006004 <update_homing_sequence+0xcac>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f240 52db 	movw	r2, #1499	@ 0x5db
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	f240 8177 	bls.w	8006070 <update_homing_sequence+0xd18>
			homing_state = HOMING_REV_CW_TO_PROX1;
 8005d82:	4ba1      	ldr	r3, [pc, #644]	@ (8006008 <update_homing_sequence+0xcb0>)
 8005d84:	220b      	movs	r2, #11
 8005d86:	701a      	strb	r2, [r3, #0]
		}
		break;
 8005d88:	e172      	b.n	8006070 <update_homing_sequence+0xd18>

	case HOMING_REV_CW_TO_PROX1:
		// Move revolute clockwise with velocity control until prox count = 1
		revolute_axis.vel_error = -HOMING_REV_VELOCITY
				- revolute_axis.kalman_velocity;
 8005d8a:	4b9b      	ldr	r3, [pc, #620]	@ (8005ff8 <update_homing_sequence+0xca0>)
 8005d8c:	edd3 7a07 	vldr	s15, [r3, #28]
 8005d90:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8005d94:	ee77 7a67 	vsub.f32	s15, s14, s15
		revolute_axis.vel_error = -HOMING_REV_VELOCITY
 8005d98:	4b97      	ldr	r3, [pc, #604]	@ (8005ff8 <update_homing_sequence+0xca0>)
 8005d9a:	edc3 7a06 	vstr	s15, [r3, #24]
		revolute_axis.command_pos = PWM_Satuation(
 8005d9e:	4b96      	ldr	r3, [pc, #600]	@ (8005ff8 <update_homing_sequence+0xca0>)
 8005da0:	edd3 7a06 	vldr	s15, [r3, #24]
 8005da4:	eeb0 0a67 	vmov.f32	s0, s15
 8005da8:	489a      	ldr	r0, [pc, #616]	@ (8006014 <update_homing_sequence+0xcbc>)
 8005daa:	f7fb fa35 	bl	8001218 <PID_CONTROLLER_Compute>
 8005dae:	eeb0 8a40 	vmov.f32	s16, s0
				PID_CONTROLLER_Compute(&revolute_velocity_pid,
						revolute_axis.vel_error),
				ZGX45RGG_150RPM_Constant.U_max,
 8005db2:	4b99      	ldr	r3, [pc, #612]	@ (8006018 <update_homing_sequence+0xcc0>)
 8005db4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		revolute_axis.command_pos = PWM_Satuation(
 8005db8:	4610      	mov	r0, r2
 8005dba:	4619      	mov	r1, r3
 8005dbc:	f7fa fe82 	bl	8000ac4 <__aeabi_d2iz>
 8005dc0:	4604      	mov	r4, r0
				-ZGX45RGG_150RPM_Constant.U_max);
 8005dc2:	4b95      	ldr	r3, [pc, #596]	@ (8006018 <update_homing_sequence+0xcc0>)
 8005dc4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8005dc8:	4692      	mov	sl, r2
 8005dca:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
		revolute_axis.command_pos = PWM_Satuation(
 8005dce:	4650      	mov	r0, sl
 8005dd0:	4659      	mov	r1, fp
 8005dd2:	f7fa fe77 	bl	8000ac4 <__aeabi_d2iz>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	4619      	mov	r1, r3
 8005dda:	4620      	mov	r0, r4
 8005ddc:	eeb0 0a48 	vmov.f32	s0, s16
 8005de0:	f7fb f9b8 	bl	8001154 <PWM_Satuation>
 8005de4:	ee07 0a90 	vmov	s15, r0
 8005de8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005dec:	4b82      	ldr	r3, [pc, #520]	@ (8005ff8 <update_homing_sequence+0xca0>)
 8005dee:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		// Add feedforward compensation during homing
		revolute_axis.ffd = REVOLUTE_MOTOR_FFD_Compute(&revolute_motor_ffd,
 8005df2:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
 8005df6:	4889      	ldr	r0, [pc, #548]	@ (800601c <update_homing_sequence+0xcc4>)
 8005df8:	f7fb fbce 	bl	8001598 <REVOLUTE_MOTOR_FFD_Compute>
 8005dfc:	eef0 7a40 	vmov.f32	s15, s0
 8005e00:	4b7d      	ldr	r3, [pc, #500]	@ (8005ff8 <update_homing_sequence+0xca0>)
 8005e02:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
				-HOMING_REV_VELOCITY);
		revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8005e06:	4b86      	ldr	r3, [pc, #536]	@ (8006020 <update_homing_sequence+0xcc8>)
 8005e08:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
				revolute_encoder.rads, 0.0f, prismatic_encoder.mm / 1000.0f);
 8005e0c:	4b85      	ldr	r3, [pc, #532]	@ (8006024 <update_homing_sequence+0xccc>)
 8005e0e:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8005e12:	ed9f 6a85 	vldr	s12, [pc, #532]	@ 8006028 <update_homing_sequence+0xcd0>
 8005e16:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8005e1a:	eeb0 1a66 	vmov.f32	s2, s13
 8005e1e:	eddf 0a83 	vldr	s1, [pc, #524]	@ 800602c <update_homing_sequence+0xcd4>
 8005e22:	eeb0 0a47 	vmov.f32	s0, s14
 8005e26:	4882      	ldr	r0, [pc, #520]	@ (8006030 <update_homing_sequence+0xcd8>)
 8005e28:	f7fb fc4a 	bl	80016c0 <REVOLUTE_MOTOR_DFD_Compute>
 8005e2c:	eef0 7a40 	vmov.f32	s15, s0
 8005e30:	4b71      	ldr	r3, [pc, #452]	@ (8005ff8 <update_homing_sequence+0xca0>)
 8005e32:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
		revolute_axis.command_pos += revolute_axis.ffd + revolute_axis.dfd;
 8005e36:	4b70      	ldr	r3, [pc, #448]	@ (8005ff8 <update_homing_sequence+0xca0>)
 8005e38:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8005e3c:	4b6e      	ldr	r3, [pc, #440]	@ (8005ff8 <update_homing_sequence+0xca0>)
 8005e3e:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 8005e42:	4b6d      	ldr	r3, [pc, #436]	@ (8005ff8 <update_homing_sequence+0xca0>)
 8005e44:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8005e48:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005e50:	4b69      	ldr	r3, [pc, #420]	@ (8005ff8 <update_homing_sequence+0xca0>)
 8005e52:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8005e56:	4b68      	ldr	r3, [pc, #416]	@ (8005ff8 <update_homing_sequence+0xca0>)
 8005e58:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
				ZGX45RGG_150RPM_Constant.U_max,
 8005e5c:	4b6e      	ldr	r3, [pc, #440]	@ (8006018 <update_homing_sequence+0xcc0>)
 8005e5e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8005e62:	4610      	mov	r0, r2
 8005e64:	4619      	mov	r1, r3
 8005e66:	f7fa fe2d 	bl	8000ac4 <__aeabi_d2iz>
 8005e6a:	4604      	mov	r4, r0
				-ZGX45RGG_150RPM_Constant.U_max);
 8005e6c:	4b6a      	ldr	r3, [pc, #424]	@ (8006018 <update_homing_sequence+0xcc0>)
 8005e6e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8005e72:	4690      	mov	r8, r2
 8005e74:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
		revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8005e78:	4640      	mov	r0, r8
 8005e7a:	4649      	mov	r1, r9
 8005e7c:	f7fa fe22 	bl	8000ac4 <__aeabi_d2iz>
 8005e80:	4603      	mov	r3, r0
 8005e82:	4619      	mov	r1, r3
 8005e84:	4620      	mov	r0, r4
 8005e86:	eeb0 0a48 	vmov.f32	s0, s16
 8005e8a:	f7fb f963 	bl	8001154 <PWM_Satuation>
 8005e8e:	ee07 0a90 	vmov	s15, r0
 8005e92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e96:	4b58      	ldr	r3, [pc, #352]	@ (8005ff8 <update_homing_sequence+0xca0>)
 8005e98:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		if (prox_count >= 1) {
 8005e9c:	4b5b      	ldr	r3, [pc, #364]	@ (800600c <update_homing_sequence+0xcb4>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	f000 80e7 	beq.w	8006074 <update_homing_sequence+0xd1c>
			// Found prox sensor, stop and start delay
			prismatic_axis.command_pos = 0.0f;
 8005ea6:	4b56      	ldr	r3, [pc, #344]	@ (8006000 <update_homing_sequence+0xca8>)
 8005ea8:	f04f 0200 	mov.w	r2, #0
 8005eac:	625a      	str	r2, [r3, #36]	@ 0x24
			revolute_axis.command_pos = 0.0f;
 8005eae:	4b52      	ldr	r3, [pc, #328]	@ (8005ff8 <update_homing_sequence+0xca0>)
 8005eb0:	f04f 0200 	mov.w	r2, #0
 8005eb4:	625a      	str	r2, [r3, #36]	@ 0x24
			motion_delay_timer = 0;
 8005eb6:	4b53      	ldr	r3, [pc, #332]	@ (8006004 <update_homing_sequence+0xcac>)
 8005eb8:	2200      	movs	r2, #0
 8005eba:	601a      	str	r2, [r3, #0]
			homing_state = HOMING_DELAY_AFTER_PROX;
 8005ebc:	4b52      	ldr	r3, [pc, #328]	@ (8006008 <update_homing_sequence+0xcb0>)
 8005ebe:	220c      	movs	r2, #12
 8005ec0:	701a      	strb	r2, [r3, #0]
		}
		break;
 8005ec2:	e0d7      	b.n	8006074 <update_homing_sequence+0xd1c>

	case HOMING_DELAY_AFTER_PROX:
		// Stop motors and wait
		prismatic_axis.command_pos = 0.0f;
 8005ec4:	4b4e      	ldr	r3, [pc, #312]	@ (8006000 <update_homing_sequence+0xca8>)
 8005ec6:	f04f 0200 	mov.w	r2, #0
 8005eca:	625a      	str	r2, [r3, #36]	@ 0x24
		revolute_axis.command_pos = 0.0f;
 8005ecc:	4b4a      	ldr	r3, [pc, #296]	@ (8005ff8 <update_homing_sequence+0xca0>)
 8005ece:	f04f 0200 	mov.w	r2, #0
 8005ed2:	625a      	str	r2, [r3, #36]	@ 0x24
		motion_delay_timer++;
 8005ed4:	4b4b      	ldr	r3, [pc, #300]	@ (8006004 <update_homing_sequence+0xcac>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	3301      	adds	r3, #1
 8005eda:	4a4a      	ldr	r2, [pc, #296]	@ (8006004 <update_homing_sequence+0xcac>)
 8005edc:	6013      	str	r3, [r2, #0]
		if (motion_delay_timer >= 1500) {
 8005ede:	4b49      	ldr	r3, [pc, #292]	@ (8006004 <update_homing_sequence+0xcac>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f240 52db 	movw	r2, #1499	@ 0x5db
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	f240 80c6 	bls.w	8006078 <update_homing_sequence+0xd20>
			homing_state = HOMING_COMPLETE;
 8005eec:	4b46      	ldr	r3, [pc, #280]	@ (8006008 <update_homing_sequence+0xcb0>)
 8005eee:	220d      	movs	r2, #13
 8005ef0:	701a      	strb	r2, [r3, #0]
		}
		break;
 8005ef2:	e0c1      	b.n	8006078 <update_homing_sequence+0xd20>

	case HOMING_COMPLETE:
		memset(&prismatic_axis, 0, sizeof(AxisState_t));
 8005ef4:	2240      	movs	r2, #64	@ 0x40
 8005ef6:	2100      	movs	r1, #0
 8005ef8:	4841      	ldr	r0, [pc, #260]	@ (8006000 <update_homing_sequence+0xca8>)
 8005efa:	f00a fee1 	bl	8010cc0 <memset>
		memset(&revolute_axis, 0, sizeof(AxisState_t));
 8005efe:	2240      	movs	r2, #64	@ 0x40
 8005f00:	2100      	movs	r1, #0
 8005f02:	483d      	ldr	r0, [pc, #244]	@ (8005ff8 <update_homing_sequence+0xca0>)
 8005f04:	f00a fedc 	bl	8010cc0 <memset>

		Kalman_Reset(&revolute_kalman);
 8005f08:	484a      	ldr	r0, [pc, #296]	@ (8006034 <update_homing_sequence+0xcdc>)
 8005f0a:	f7ff f8d5 	bl	80050b8 <Kalman_Reset>
		MotorKalman_Reset(&prismatic_kalman);
 8005f0e:	484a      	ldr	r0, [pc, #296]	@ (8006038 <update_homing_sequence+0xce0>)
 8005f10:	f7fc fa08 	bl	8002324 <MotorKalman_Reset>

		// Prismatic: 0.0mm (up photo position - after backup)
		prismatic_encoder.mm = 0.0f;
 8005f14:	4b43      	ldr	r3, [pc, #268]	@ (8006024 <update_homing_sequence+0xccc>)
 8005f16:	f04f 0200 	mov.w	r2, #0
 8005f1a:	649a      	str	r2, [r3, #72]	@ 0x48
		prismatic_encoder.pulses = 0;
 8005f1c:	4b41      	ldr	r3, [pc, #260]	@ (8006024 <update_homing_sequence+0xccc>)
 8005f1e:	2200      	movs	r2, #0
 8005f20:	639a      	str	r2, [r3, #56]	@ 0x38
		prismatic_encoder.revs = 0.0f;
 8005f22:	4b40      	ldr	r3, [pc, #256]	@ (8006024 <update_homing_sequence+0xccc>)
 8005f24:	f04f 0200 	mov.w	r2, #0
 8005f28:	63da      	str	r2, [r3, #60]	@ 0x3c
		prismatic_encoder.rads = 0.0f;
 8005f2a:	4b3e      	ldr	r3, [pc, #248]	@ (8006024 <update_homing_sequence+0xccc>)
 8005f2c:	f04f 0200 	mov.w	r2, #0
 8005f30:	641a      	str	r2, [r3, #64]	@ 0x40

		// Revolute: -5.18° (prox sensor position)
		float target_home_deg = -5.18f;
 8005f32:	4b42      	ldr	r3, [pc, #264]	@ (800603c <update_homing_sequence+0xce4>)
 8005f34:	667b      	str	r3, [r7, #100]	@ 0x64
		float target_home_rad = target_home_deg * PI / 180.0f;
 8005f36:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8005f3a:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 8006040 <update_homing_sequence+0xce8>
 8005f3e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005f42:	eddf 6a40 	vldr	s13, [pc, #256]	@ 8006044 <update_homing_sequence+0xcec>
 8005f46:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005f4a:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
		revolute_encoder.rads = target_home_rad;
 8005f4e:	4a34      	ldr	r2, [pc, #208]	@ (8006020 <update_homing_sequence+0xcc8>)
 8005f50:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005f52:	6413      	str	r3, [r2, #64]	@ 0x40
		revolute_encoder.revs = target_home_rad / (2.0f * PI);
 8005f54:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8005f58:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8006048 <update_homing_sequence+0xcf0>
 8005f5c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005f60:	4b2f      	ldr	r3, [pc, #188]	@ (8006020 <update_homing_sequence+0xcc8>)
 8005f62:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
		revolute_encoder.pulses = (int32_t) (target_home_rad * ENC_PPR
				* MOTOR2_RATIO / (2.0f * PI));
 8005f66:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8005f68:	f7fa faba 	bl	80004e0 <__aeabi_f2d>
 8005f6c:	f04f 0200 	mov.w	r2, #0
 8005f70:	4b36      	ldr	r3, [pc, #216]	@ (800604c <update_homing_sequence+0xcf4>)
 8005f72:	f7fa fb0d 	bl	8000590 <__aeabi_dmul>
 8005f76:	4602      	mov	r2, r0
 8005f78:	460b      	mov	r3, r1
 8005f7a:	4610      	mov	r0, r2
 8005f7c:	4619      	mov	r1, r3
 8005f7e:	a31c      	add	r3, pc, #112	@ (adr r3, 8005ff0 <update_homing_sequence+0xc98>)
 8005f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f84:	f7fa fc2e 	bl	80007e4 <__aeabi_ddiv>
 8005f88:	4602      	mov	r2, r0
 8005f8a:	460b      	mov	r3, r1
		revolute_encoder.pulses = (int32_t) (target_home_rad * ENC_PPR
 8005f8c:	4610      	mov	r0, r2
 8005f8e:	4619      	mov	r1, r3
 8005f90:	f7fa fd98 	bl	8000ac4 <__aeabi_d2iz>
 8005f94:	4603      	mov	r3, r0
 8005f96:	4a22      	ldr	r2, [pc, #136]	@ (8006020 <update_homing_sequence+0xcc8>)
 8005f98:	6393      	str	r3, [r2, #56]	@ 0x38
		revolute_encoder.mm = 0.0f;
 8005f9a:	4b21      	ldr	r3, [pc, #132]	@ (8006020 <update_homing_sequence+0xcc8>)
 8005f9c:	f04f 0200 	mov.w	r2, #0
 8005fa0:	649a      	str	r2, [r3, #72]	@ 0x48

		// Set axis position setpoints to match encoder values
		prismatic_axis.position = 0.0f;
 8005fa2:	4b17      	ldr	r3, [pc, #92]	@ (8006000 <update_homing_sequence+0xca8>)
 8005fa4:	f04f 0200 	mov.w	r2, #0
 8005fa8:	601a      	str	r2, [r3, #0]
		revolute_axis.position = target_home_rad;
 8005faa:	4a13      	ldr	r2, [pc, #76]	@ (8005ff8 <update_homing_sequence+0xca0>)
 8005fac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005fae:	6013      	str	r3, [r2, #0]

		// Complete homing sequence
		homing_active = false;
 8005fb0:	4b27      	ldr	r3, [pc, #156]	@ (8006050 <update_homing_sequence+0xcf8>)
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	701a      	strb	r2, [r3, #0]
		first_startup = false;
 8005fb6:	4b27      	ldr	r3, [pc, #156]	@ (8006054 <update_homing_sequence+0xcfc>)
 8005fb8:	2200      	movs	r2, #0
 8005fba:	701a      	strb	r2, [r3, #0]
		homing_state = HOMING_IDLE;
 8005fbc:	4b12      	ldr	r3, [pc, #72]	@ (8006008 <update_homing_sequence+0xcb0>)
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	701a      	strb	r2, [r3, #0]

		// Reset all flags and counters
		up_photo = false;
 8005fc2:	4b25      	ldr	r3, [pc, #148]	@ (8006058 <update_homing_sequence+0xd00>)
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	701a      	strb	r2, [r3, #0]
		low_photo = false;
 8005fc8:	4b24      	ldr	r3, [pc, #144]	@ (800605c <update_homing_sequence+0xd04>)
 8005fca:	2200      	movs	r2, #0
 8005fcc:	701a      	strb	r2, [r3, #0]
		prox_count = 0;
 8005fce:	4b0f      	ldr	r3, [pc, #60]	@ (800600c <update_homing_sequence+0xcb4>)
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	601a      	str	r2, [r3, #0]
		break;
 8005fd4:	e051      	b.n	800607a <update_homing_sequence+0xd22>
		return;
 8005fd6:	bf00      	nop
 8005fd8:	e04f      	b.n	800607a <update_homing_sequence+0xd22>

	case HOMING_IDLE:
	default:
		break;
 8005fda:	bf00      	nop
 8005fdc:	e04d      	b.n	800607a <update_homing_sequence+0xd22>
		break;
 8005fde:	bf00      	nop
 8005fe0:	e04b      	b.n	800607a <update_homing_sequence+0xd22>
		break;
 8005fe2:	bf00      	nop
 8005fe4:	e049      	b.n	800607a <update_homing_sequence+0xd22>
		break;
 8005fe6:	bf00      	nop
 8005fe8:	e047      	b.n	800607a <update_homing_sequence+0xd22>
		break;
 8005fea:	bf00      	nop
 8005fec:	e045      	b.n	800607a <update_homing_sequence+0xd22>
 8005fee:	bf00      	nop
 8005ff0:	60000000 	.word	0x60000000
 8005ff4:	401921fb 	.word	0x401921fb
 8005ff8:	200002b8 	.word	0x200002b8
 8005ffc:	20000390 	.word	0x20000390
 8006000:	20000278 	.word	0x20000278
 8006004:	20000350 	.word	0x20000350
 8006008:	20000366 	.word	0x20000366
 800600c:	20000360 	.word	0x20000360
 8006010:	20000372 	.word	0x20000372
 8006014:	2000056c 	.word	0x2000056c
 8006018:	20000000 	.word	0x20000000
 800601c:	200005a0 	.word	0x200005a0
 8006020:	20000498 	.word	0x20000498
 8006024:	2000043c 	.word	0x2000043c
 8006028:	447a0000 	.word	0x447a0000
 800602c:	00000000 	.word	0x00000000
 8006030:	200005a4 	.word	0x200005a4
 8006034:	2000152c 	.word	0x2000152c
 8006038:	200011c0 	.word	0x200011c0
 800603c:	c0a5c28f 	.word	0xc0a5c28f
 8006040:	40490fdb 	.word	0x40490fdb
 8006044:	43340000 	.word	0x43340000
 8006048:	40c90fdb 	.word	0x40c90fdb
 800604c:	40c00000 	.word	0x40c00000
 8006050:	20000367 	.word	0x20000367
 8006054:	2000012f 	.word	0x2000012f
 8006058:	20000364 	.word	0x20000364
 800605c:	20000365 	.word	0x20000365
		break;
 8006060:	bf00      	nop
 8006062:	e00a      	b.n	800607a <update_homing_sequence+0xd22>
		break;
 8006064:	bf00      	nop
 8006066:	e008      	b.n	800607a <update_homing_sequence+0xd22>
		break;
 8006068:	bf00      	nop
 800606a:	e006      	b.n	800607a <update_homing_sequence+0xd22>
		break;
 800606c:	bf00      	nop
 800606e:	e004      	b.n	800607a <update_homing_sequence+0xd22>
		break;
 8006070:	bf00      	nop
 8006072:	e002      	b.n	800607a <update_homing_sequence+0xd22>
		break;
 8006074:	bf00      	nop
 8006076:	e000      	b.n	800607a <update_homing_sequence+0xd22>
		break;
 8006078:	bf00      	nop
	}
}
 800607a:	376c      	adds	r7, #108	@ 0x6c
 800607c:	46bd      	mov	sp, r7
 800607e:	ecbd 8b02 	vpop	{d8}
 8006082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006086:	bf00      	nop

08006088 <normalize_angle>:

float normalize_angle(float angle_rad) {
 8006088:	b580      	push	{r7, lr}
 800608a:	b084      	sub	sp, #16
 800608c:	af00      	add	r7, sp, #0
 800608e:	ed87 0a01 	vstr	s0, [r7, #4]
	float result = fmodf(angle_rad, 2.0f * PI);
 8006092:	eddf 0a0f 	vldr	s1, [pc, #60]	@ 80060d0 <normalize_angle+0x48>
 8006096:	ed97 0a01 	vldr	s0, [r7, #4]
 800609a:	f00a ff0d 	bl	8010eb8 <fmodf>
 800609e:	ed87 0a03 	vstr	s0, [r7, #12]
	if (result < 0.0f) {
 80060a2:	edd7 7a03 	vldr	s15, [r7, #12]
 80060a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80060aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060ae:	d507      	bpl.n	80060c0 <normalize_angle+0x38>
		result += 2.0f * PI;
 80060b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80060b4:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 80060d0 <normalize_angle+0x48>
 80060b8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80060bc:	edc7 7a03 	vstr	s15, [r7, #12]
	}
	return result;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	ee07 3a90 	vmov	s15, r3
}
 80060c6:	eeb0 0a67 	vmov.f32	s0, s15
 80060ca:	3710      	adds	r7, #16
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}
 80060d0:	40c90fdb 	.word	0x40c90fdb

080060d4 <calculate_movement_deg>:

float calculate_movement_deg(float current_deg, float target_deg) {
 80060d4:	b480      	push	{r7}
 80060d6:	b085      	sub	sp, #20
 80060d8:	af00      	add	r7, sp, #0
 80060da:	ed87 0a01 	vstr	s0, [r7, #4]
 80060de:	edc7 0a00 	vstr	s1, [r7]
	float movement = 0.0f;
 80060e2:	f04f 0300 	mov.w	r3, #0
 80060e6:	60fb      	str	r3, [r7, #12]

	// If both angles are on the same side of 180°
	if ((current_deg < 180.0f && target_deg < 180.0f)
 80060e8:	edd7 7a01 	vldr	s15, [r7, #4]
 80060ec:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8006250 <calculate_movement_deg+0x17c>
 80060f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80060f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060f8:	d508      	bpl.n	800610c <calculate_movement_deg+0x38>
 80060fa:	edd7 7a00 	vldr	s15, [r7]
 80060fe:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 8006250 <calculate_movement_deg+0x17c>
 8006102:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800610a:	d411      	bmi.n	8006130 <calculate_movement_deg+0x5c>
			|| (current_deg >= 180.0f && target_deg >= 180.0f)) {
 800610c:	edd7 7a01 	vldr	s15, [r7, #4]
 8006110:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 8006250 <calculate_movement_deg+0x17c>
 8006114:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800611c:	db33      	blt.n	8006186 <calculate_movement_deg+0xb2>
 800611e:	edd7 7a00 	vldr	s15, [r7]
 8006122:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8006250 <calculate_movement_deg+0x17c>
 8006126:	eef4 7ac7 	vcmpe.f32	s15, s14
 800612a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800612e:	db2a      	blt.n	8006186 <calculate_movement_deg+0xb2>
		// Simple case - take shortest path
		movement = target_deg - current_deg;
 8006130:	ed97 7a00 	vldr	s14, [r7]
 8006134:	edd7 7a01 	vldr	s15, [r7, #4]
 8006138:	ee77 7a67 	vsub.f32	s15, s14, s15
 800613c:	edc7 7a03 	vstr	s15, [r7, #12]

		// Ensure shortest path
		if (movement > 180.0f)
 8006140:	edd7 7a03 	vldr	s15, [r7, #12]
 8006144:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8006250 <calculate_movement_deg+0x17c>
 8006148:	eef4 7ac7 	vcmpe.f32	s15, s14
 800614c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006150:	dd07      	ble.n	8006162 <calculate_movement_deg+0x8e>
			movement -= 360.0f;
 8006152:	edd7 7a03 	vldr	s15, [r7, #12]
 8006156:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8006254 <calculate_movement_deg+0x180>
 800615a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800615e:	edc7 7a03 	vstr	s15, [r7, #12]
		if (movement < -180.0f)
 8006162:	edd7 7a03 	vldr	s15, [r7, #12]
 8006166:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 8006258 <calculate_movement_deg+0x184>
 800616a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800616e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006172:	d562      	bpl.n	800623a <calculate_movement_deg+0x166>
			movement += 360.0f;
 8006174:	edd7 7a03 	vldr	s15, [r7, #12]
 8006178:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8006254 <calculate_movement_deg+0x180>
 800617c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006180:	edc7 7a03 	vstr	s15, [r7, #12]
		if (movement < -180.0f)
 8006184:	e059      	b.n	800623a <calculate_movement_deg+0x166>
	}
	// If we need to cross the 180° boundary
	else {
		// If we need to cross the 180° boundary
		if (current_deg < 180.0f) {
 8006186:	edd7 7a01 	vldr	s15, [r7, #4]
 800618a:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8006250 <calculate_movement_deg+0x17c>
 800618e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006196:	d52a      	bpl.n	80061ee <calculate_movement_deg+0x11a>
			// Current < 180, target > 180
			// Go counterclockwise through 0°
			if (current_deg < target_deg - 180.0f) {
 8006198:	edd7 7a00 	vldr	s15, [r7]
 800619c:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8006250 <calculate_movement_deg+0x17c>
 80061a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80061a4:	ed97 7a01 	vldr	s14, [r7, #4]
 80061a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80061ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061b0:	d50e      	bpl.n	80061d0 <calculate_movement_deg+0xfc>
				movement = -(current_deg + (360.0f - target_deg)); // Negative = clockwise
 80061b2:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8006254 <calculate_movement_deg+0x180>
 80061b6:	edd7 7a00 	vldr	s15, [r7]
 80061ba:	ee37 7a67 	vsub.f32	s14, s14, s15
 80061be:	edd7 7a01 	vldr	s15, [r7, #4]
 80061c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80061c6:	eef1 7a67 	vneg.f32	s15, s15
 80061ca:	edc7 7a03 	vstr	s15, [r7, #12]
 80061ce:	e034      	b.n	800623a <calculate_movement_deg+0x166>
			} else {
				movement = -(current_deg - target_deg + 360.0f); // Negative = clockwise
 80061d0:	ed97 7a01 	vldr	s14, [r7, #4]
 80061d4:	edd7 7a00 	vldr	s15, [r7]
 80061d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80061dc:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8006254 <calculate_movement_deg+0x180>
 80061e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80061e4:	eef1 7a67 	vneg.f32	s15, s15
 80061e8:	edc7 7a03 	vstr	s15, [r7, #12]
 80061ec:	e025      	b.n	800623a <calculate_movement_deg+0x166>
			}
		} else {
			// Current > 180, target < 180
			// Go clockwise through 0°
			if (target_deg < current_deg - 180.0f) {
 80061ee:	edd7 7a01 	vldr	s15, [r7, #4]
 80061f2:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8006250 <calculate_movement_deg+0x17c>
 80061f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80061fa:	ed97 7a00 	vldr	s14, [r7]
 80061fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006206:	d50c      	bpl.n	8006222 <calculate_movement_deg+0x14e>
				movement = 360.0f - current_deg + target_deg; // Positive = counterclockwise
 8006208:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8006254 <calculate_movement_deg+0x180>
 800620c:	edd7 7a01 	vldr	s15, [r7, #4]
 8006210:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006214:	ed97 7a00 	vldr	s14, [r7]
 8006218:	ee77 7a27 	vadd.f32	s15, s14, s15
 800621c:	edc7 7a03 	vstr	s15, [r7, #12]
 8006220:	e00b      	b.n	800623a <calculate_movement_deg+0x166>
			} else {
				movement = target_deg - current_deg + 360.0f; // Positive = counterclockwise
 8006222:	ed97 7a00 	vldr	s14, [r7]
 8006226:	edd7 7a01 	vldr	s15, [r7, #4]
 800622a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800622e:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8006254 <calculate_movement_deg+0x180>
 8006232:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006236:	edc7 7a03 	vstr	s15, [r7, #12]
			}
		}
	}

	return movement;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	ee07 3a90 	vmov	s15, r3
}
 8006240:	eeb0 0a67 	vmov.f32	s0, s15
 8006244:	3714      	adds	r7, #20
 8006246:	46bd      	mov	sp, r7
 8006248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624c:	4770      	bx	lr
 800624e:	bf00      	nop
 8006250:	43340000 	.word	0x43340000
 8006254:	43b40000 	.word	0x43b40000
 8006258:	c3340000 	.word	0xc3340000

0800625c <start_combined_trajectory>:

void start_combined_trajectory(float prismatic_target_mm,
		float revolute_target_deg) {
 800625c:	b590      	push	{r4, r7, lr}
 800625e:	ed2d 8b02 	vpush	{d8}
 8006262:	b089      	sub	sp, #36	@ 0x24
 8006264:	af00      	add	r7, sp, #0
 8006266:	ed87 0a01 	vstr	s0, [r7, #4]
 800626a:	edc7 0a00 	vstr	s1, [r7]
	// Get current positions
	float pris_current = prismatic_encoder.mm;
 800626e:	4b4c      	ldr	r3, [pc, #304]	@ (80063a0 <start_combined_trajectory+0x144>)
 8006270:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006272:	61fb      	str	r3, [r7, #28]
	float rev_current = revolute_encoder.rads;
 8006274:	4b4b      	ldr	r3, [pc, #300]	@ (80063a4 <start_combined_trajectory+0x148>)
 8006276:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006278:	61bb      	str	r3, [r7, #24]

	// Reset trajectory evaluation structs
	prisEva.t = 0.0f;
 800627a:	4b4b      	ldr	r3, [pc, #300]	@ (80063a8 <start_combined_trajectory+0x14c>)
 800627c:	f04f 0200 	mov.w	r2, #0
 8006280:	60da      	str	r2, [r3, #12]
	prisEva.isFinised = false;
 8006282:	4b49      	ldr	r3, [pc, #292]	@ (80063a8 <start_combined_trajectory+0x14c>)
 8006284:	2200      	movs	r2, #0
 8006286:	741a      	strb	r2, [r3, #16]
	revEva.t = 0.0f;
 8006288:	4b48      	ldr	r3, [pc, #288]	@ (80063ac <start_combined_trajectory+0x150>)
 800628a:	f04f 0200 	mov.w	r2, #0
 800628e:	60da      	str	r2, [r3, #12]
	revEva.isFinised = false;
 8006290:	4b46      	ldr	r3, [pc, #280]	@ (80063ac <start_combined_trajectory+0x150>)
 8006292:	2200      	movs	r2, #0
 8006294:	741a      	strb	r2, [r3, #16]

	// Save initial positions
	prismatic_axis.initial_pos = pris_current;
 8006296:	4a46      	ldr	r2, [pc, #280]	@ (80063b0 <start_combined_trajectory+0x154>)
 8006298:	69fb      	ldr	r3, [r7, #28]
 800629a:	60d3      	str	r3, [r2, #12]
	revolute_axis.initial_pos = rev_current;
 800629c:	4a45      	ldr	r2, [pc, #276]	@ (80063b4 <start_combined_trajectory+0x158>)
 800629e:	69bb      	ldr	r3, [r7, #24]
 80062a0:	60d3      	str	r3, [r2, #12]

	// For prismatic axis - direct target with bounds checking
	prismatic_axis.target_pos = fminf(
 80062a2:	eddf 0a45 	vldr	s1, [pc, #276]	@ 80063b8 <start_combined_trajectory+0x15c>
 80062a6:	ed97 0a01 	vldr	s0, [r7, #4]
 80062aa:	f00a fecd 	bl	8011048 <fmaxf>
 80062ae:	eef0 7a40 	vmov.f32	s15, s0
 80062b2:	eddf 0a42 	vldr	s1, [pc, #264]	@ 80063bc <start_combined_trajectory+0x160>
 80062b6:	eeb0 0a67 	vmov.f32	s0, s15
 80062ba:	f00a fee2 	bl	8011082 <fminf>
 80062be:	eef0 7a40 	vmov.f32	s15, s0
 80062c2:	4b3b      	ldr	r3, [pc, #236]	@ (80063b0 <start_combined_trajectory+0x154>)
 80062c4:	edc3 7a04 	vstr	s15, [r3, #16]
			fmaxf(prismatic_target_mm, PRISMATIC_MIN_POS), PRISMATIC_MAX_POS);

	// For revolute axis - calculate target but don't start yet
	// Normalize current position to [0, 2π]
	float normalized_current = normalize_angle(rev_current);
 80062c8:	ed97 0a06 	vldr	s0, [r7, #24]
 80062cc:	f7ff fedc 	bl	8006088 <normalize_angle>
 80062d0:	ed87 0a05 	vstr	s0, [r7, #20]

	// Convert to degrees for movement calculation
	float current_deg = normalized_current * 180.0f / PI;
 80062d4:	edd7 7a05 	vldr	s15, [r7, #20]
 80062d8:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 80063c0 <start_combined_trajectory+0x164>
 80062dc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80062e0:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80063c4 <start_combined_trajectory+0x168>
 80062e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80062e8:	edc7 7a04 	vstr	s15, [r7, #16]

	// Calculate movement in degrees
	movement_deg = calculate_movement_deg(current_deg, revolute_target_deg);
 80062ec:	edd7 0a00 	vldr	s1, [r7]
 80062f0:	ed97 0a04 	vldr	s0, [r7, #16]
 80062f4:	f7ff feee 	bl	80060d4 <calculate_movement_deg>
 80062f8:	eef0 7a40 	vmov.f32	s15, s0
 80062fc:	4b32      	ldr	r3, [pc, #200]	@ (80063c8 <start_combined_trajectory+0x16c>)
 80062fe:	edc3 7a00 	vstr	s15, [r3]

	// Convert to radians and apply to absolute position
	float movement_rad = movement_deg * PI / 180.0f;
 8006302:	4b31      	ldr	r3, [pc, #196]	@ (80063c8 <start_combined_trajectory+0x16c>)
 8006304:	edd3 7a00 	vldr	s15, [r3]
 8006308:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 80063c4 <start_combined_trajectory+0x168>
 800630c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006310:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 80063c0 <start_combined_trajectory+0x164>
 8006314:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006318:	edc7 7a03 	vstr	s15, [r7, #12]
	revolute_axis.target_pos = revolute_axis.initial_pos + movement_rad;
 800631c:	4b25      	ldr	r3, [pc, #148]	@ (80063b4 <start_combined_trajectory+0x158>)
 800631e:	ed93 7a03 	vldr	s14, [r3, #12]
 8006322:	edd7 7a03 	vldr	s15, [r7, #12]
 8006326:	ee77 7a27 	vadd.f32	s15, s14, s15
 800632a:	4b22      	ldr	r3, [pc, #136]	@ (80063b4 <start_combined_trajectory+0x158>)
 800632c:	edc3 7a04 	vstr	s15, [r3, #16]

	// Generate ONLY prismatic trajectory first
	Trapezoidal_Generator(&prisGen, prismatic_axis.initial_pos,
 8006330:	4b1f      	ldr	r3, [pc, #124]	@ (80063b0 <start_combined_trajectory+0x154>)
 8006332:	ed93 8a03 	vldr	s16, [r3, #12]
 8006336:	4b1e      	ldr	r3, [pc, #120]	@ (80063b0 <start_combined_trajectory+0x154>)
 8006338:	edd3 8a04 	vldr	s17, [r3, #16]
			prismatic_axis.target_pos, ZGX45RGG_400RPM_Constant.traject_sd_max,
 800633c:	4b23      	ldr	r3, [pc, #140]	@ (80063cc <start_combined_trajectory+0x170>)
 800633e:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
	Trapezoidal_Generator(&prisGen, prismatic_axis.initial_pos,
 8006342:	4610      	mov	r0, r2
 8006344:	4619      	mov	r1, r3
 8006346:	f7fa fc05 	bl	8000b54 <__aeabi_d2f>
 800634a:	4604      	mov	r4, r0
			ZGX45RGG_400RPM_Constant.traject_sdd_max);
 800634c:	4b1f      	ldr	r3, [pc, #124]	@ (80063cc <start_combined_trajectory+0x170>)
 800634e:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
	Trapezoidal_Generator(&prisGen, prismatic_axis.initial_pos,
 8006352:	4610      	mov	r0, r2
 8006354:	4619      	mov	r1, r3
 8006356:	f7fa fbfd 	bl	8000b54 <__aeabi_d2f>
 800635a:	4603      	mov	r3, r0
 800635c:	ee01 3a90 	vmov	s3, r3
 8006360:	ee01 4a10 	vmov	s2, r4
 8006364:	eef0 0a68 	vmov.f32	s1, s17
 8006368:	eeb0 0a48 	vmov.f32	s0, s16
 800636c:	4818      	ldr	r0, [pc, #96]	@ (80063d0 <start_combined_trajectory+0x174>)
 800636e:	f7fd fce3 	bl	8003d38 <Trapezoidal_Generator>

	// Start with prismatic motion only
	prismatic_axis.trajectory_active = true;
 8006372:	4b0f      	ldr	r3, [pc, #60]	@ (80063b0 <start_combined_trajectory+0x154>)
 8006374:	2201      	movs	r2, #1
 8006376:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	revolute_axis.trajectory_active = false;  // Don't start revolute yet
 800637a:	4b0e      	ldr	r3, [pc, #56]	@ (80063b4 <start_combined_trajectory+0x158>)
 800637c:	2200      	movs	r2, #0
 800637e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

	// Set sequence state
	plotter_pen_up();
 8006382:	f001 fc07 	bl	8007b94 <plotter_pen_up>
	motion_delay_timer = 0;
 8006386:	4b13      	ldr	r3, [pc, #76]	@ (80063d4 <start_combined_trajectory+0x178>)
 8006388:	2200      	movs	r2, #0
 800638a:	601a      	str	r2, [r3, #0]
	motion_sequence_state = MOTION_PEN_UP_DELAY;
 800638c:	4b12      	ldr	r3, [pc, #72]	@ (80063d8 <start_combined_trajectory+0x17c>)
 800638e:	2201      	movs	r2, #1
 8006390:	701a      	strb	r2, [r3, #0]
}
 8006392:	bf00      	nop
 8006394:	3724      	adds	r7, #36	@ 0x24
 8006396:	46bd      	mov	sp, r7
 8006398:	ecbd 8b02 	vpop	{d8}
 800639c:	bd90      	pop	{r4, r7, pc}
 800639e:	bf00      	nop
 80063a0:	2000043c 	.word	0x2000043c
 80063a4:	20000498 	.word	0x20000498
 80063a8:	20000324 	.word	0x20000324
 80063ac:	20000338 	.word	0x20000338
 80063b0:	20000278 	.word	0x20000278
 80063b4:	200002b8 	.word	0x200002b8
 80063b8:	00000000 	.word	0x00000000
 80063bc:	43960000 	.word	0x43960000
 80063c0:	43340000 	.word	0x43340000
 80063c4:	40490fdb 	.word	0x40490fdb
 80063c8:	20000358 	.word	0x20000358
 80063cc:	20000080 	.word	0x20000080
 80063d0:	200002fc 	.word	0x200002fc
 80063d4:	20000350 	.word	0x20000350
 80063d8:	200002f8 	.word	0x200002f8

080063dc <update_control_loops>:

void update_control_loops(void) {
 80063dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063e0:	ed2d 8b02 	vpush	{d8}
 80063e4:	b087      	sub	sp, #28
 80063e6:	af00      	add	r7, sp, #0
	// Normalize revolute position
	normalized_position = normalize_angle(revolute_encoder.rads);
 80063e8:	4b89      	ldr	r3, [pc, #548]	@ (8006610 <update_control_loops+0x234>)
 80063ea:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80063ee:	eeb0 0a67 	vmov.f32	s0, s15
 80063f2:	f7ff fe49 	bl	8006088 <normalize_angle>
 80063f6:	eef0 7a40 	vmov.f32	s15, s0
 80063fa:	4b86      	ldr	r3, [pc, #536]	@ (8006614 <update_control_loops+0x238>)
 80063fc:	edc3 7a00 	vstr	s15, [r3]
	angle_deg = normalize_angle(revolute_axis.target_pos);
 8006400:	4b85      	ldr	r3, [pc, #532]	@ (8006618 <update_control_loops+0x23c>)
 8006402:	edd3 7a04 	vldr	s15, [r3, #16]
 8006406:	eeb0 0a67 	vmov.f32	s0, s15
 800640a:	f7ff fe3d 	bl	8006088 <normalize_angle>
 800640e:	eef0 7a40 	vmov.f32	s15, s0
 8006412:	4b82      	ldr	r3, [pc, #520]	@ (800661c <update_control_loops+0x240>)
 8006414:	edc3 7a00 	vstr	s15, [r3]

	if (is_emergency_active()) {
 8006418:	f000 fdc8 	bl	8006fac <is_emergency_active>
 800641c:	4603      	mov	r3, r0
 800641e:	2b00      	cmp	r3, #0
 8006420:	d01b      	beq.n	800645a <update_control_loops+0x7e>
		emergency_stop_all_motors();
 8006422:	f000 fd01 	bl	8006e28 <emergency_stop_all_motors>

		// Update display values but don't control motors
		prismatic_axis.mm = prismatic_encoder.mm;
 8006426:	4b7e      	ldr	r3, [pc, #504]	@ (8006620 <update_control_loops+0x244>)
 8006428:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800642a:	4a7e      	ldr	r2, [pc, #504]	@ (8006624 <update_control_loops+0x248>)
 800642c:	6393      	str	r3, [r2, #56]	@ 0x38
		revolute_axis.deg = UnitConverter_angle(&converter_system,
 800642e:	4b78      	ldr	r3, [pc, #480]	@ (8006610 <update_control_loops+0x234>)
 8006430:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8006434:	eeb0 0a67 	vmov.f32	s0, s15
 8006438:	f7ff fe26 	bl	8006088 <normalize_angle>
 800643c:	eef0 7a40 	vmov.f32	s15, s0
 8006440:	220e      	movs	r2, #14
 8006442:	210f      	movs	r1, #15
 8006444:	eeb0 0a67 	vmov.f32	s0, s15
 8006448:	4877      	ldr	r0, [pc, #476]	@ (8006628 <update_control_loops+0x24c>)
 800644a:	f7fe f8cf 	bl	80045ec <UnitConverter_angle>
 800644e:	eef0 7a40 	vmov.f32	s15, s0
 8006452:	4b71      	ldr	r3, [pc, #452]	@ (8006618 <update_control_loops+0x23c>)
 8006454:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
				normalize_angle(revolute_encoder.rads), UNIT_RADIAN,
				UNIT_DEGREE);
		return;
 8006458:	e3ff      	b.n	8006c5a <update_control_loops+0x87e>
	}

	if (homing_active) {
 800645a:	4b74      	ldr	r3, [pc, #464]	@ (800662c <update_control_loops+0x250>)
 800645c:	781b      	ldrb	r3, [r3, #0]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d029      	beq.n	80064b6 <update_control_loops+0xda>
		update_homing_sequence();
 8006462:	f7fe ff79 	bl	8005358 <update_homing_sequence>

		// Apply homing commands directly to motors
		MDXX_set_range(&prismatic_motor, 2000, prismatic_axis.command_pos);
 8006466:	4b6f      	ldr	r3, [pc, #444]	@ (8006624 <update_control_loops+0x248>)
 8006468:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800646c:	eef0 0a67 	vmov.f32	s1, s15
 8006470:	ed9f 0a6f 	vldr	s0, [pc, #444]	@ 8006630 <update_control_loops+0x254>
 8006474:	486f      	ldr	r0, [pc, #444]	@ (8006634 <update_control_loops+0x258>)
 8006476:	f7fa ffa7 	bl	80013c8 <MDXX_set_range>
		MDXX_set_range(&revolute_motor, 2000, revolute_axis.command_pos);
 800647a:	4b67      	ldr	r3, [pc, #412]	@ (8006618 <update_control_loops+0x23c>)
 800647c:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8006480:	eef0 0a67 	vmov.f32	s1, s15
 8006484:	ed9f 0a6a 	vldr	s0, [pc, #424]	@ 8006630 <update_control_loops+0x254>
 8006488:	486b      	ldr	r0, [pc, #428]	@ (8006638 <update_control_loops+0x25c>)
 800648a:	f7fa ff9d 	bl	80013c8 <MDXX_set_range>

		// Update display values during homing
		prismatic_axis.mm = prismatic_encoder.mm;
 800648e:	4b64      	ldr	r3, [pc, #400]	@ (8006620 <update_control_loops+0x244>)
 8006490:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006492:	4a64      	ldr	r2, [pc, #400]	@ (8006624 <update_control_loops+0x248>)
 8006494:	6393      	str	r3, [r2, #56]	@ 0x38
		revolute_axis.deg = UnitConverter_angle(&converter_system,
 8006496:	4b5f      	ldr	r3, [pc, #380]	@ (8006614 <update_control_loops+0x238>)
 8006498:	edd3 7a00 	vldr	s15, [r3]
 800649c:	220e      	movs	r2, #14
 800649e:	210f      	movs	r1, #15
 80064a0:	eeb0 0a67 	vmov.f32	s0, s15
 80064a4:	4860      	ldr	r0, [pc, #384]	@ (8006628 <update_control_loops+0x24c>)
 80064a6:	f7fe f8a1 	bl	80045ec <UnitConverter_angle>
 80064aa:	eef0 7a40 	vmov.f32	s15, s0
 80064ae:	4b5a      	ldr	r3, [pc, #360]	@ (8006618 <update_control_loops+0x23c>)
 80064b0:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
				normalized_position, UNIT_RADIAN, UNIT_DEGREE);
		return; // Skip normal control when homing
 80064b4:	e3d1      	b.n	8006c5a <update_control_loops+0x87e>
	}

	// Handle motion sequence state machine
	switch (motion_sequence_state) {
 80064b6:	4b61      	ldr	r3, [pc, #388]	@ (800663c <update_control_loops+0x260>)
 80064b8:	781b      	ldrb	r3, [r3, #0]
 80064ba:	3b01      	subs	r3, #1
 80064bc:	2b04      	cmp	r3, #4
 80064be:	f200 814a 	bhi.w	8006756 <update_control_loops+0x37a>
 80064c2:	a201      	add	r2, pc, #4	@ (adr r2, 80064c8 <update_control_loops+0xec>)
 80064c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064c8:	080064dd 	.word	0x080064dd
 80064cc:	080064fb 	.word	0x080064fb
 80064d0:	08006659 	.word	0x08006659
 80064d4:	0800672f 	.word	0x0800672f
 80064d8:	0800674f 	.word	0x0800674f
	case MOTION_PEN_UP_DELAY:
		motion_delay_timer++;
 80064dc:	4b58      	ldr	r3, [pc, #352]	@ (8006640 <update_control_loops+0x264>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	3301      	adds	r3, #1
 80064e2:	4a57      	ldr	r2, [pc, #348]	@ (8006640 <update_control_loops+0x264>)
 80064e4:	6013      	str	r3, [r2, #0]
		if (motion_delay_timer >= 2000) {
 80064e6:	4b56      	ldr	r3, [pc, #344]	@ (8006640 <update_control_loops+0x264>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80064ee:	f0c0 8134 	bcc.w	800675a <update_control_loops+0x37e>
			motion_sequence_state = MOTION_PRISMATIC_ACTIVE;
 80064f2:	4a52      	ldr	r2, [pc, #328]	@ (800663c <update_control_loops+0x260>)
 80064f4:	2302      	movs	r3, #2
 80064f6:	7013      	strb	r3, [r2, #0]
		}
		break;
 80064f8:	e12f      	b.n	800675a <update_control_loops+0x37e>

	case MOTION_PRISMATIC_ACTIVE:
		// Update prismatic trajectory
		if (prismatic_axis.trajectory_active && !prisEva.isFinised) {
 80064fa:	4b4a      	ldr	r3, [pc, #296]	@ (8006624 <update_control_loops+0x248>)
 80064fc:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006500:	2b00      	cmp	r3, #0
 8006502:	f000 812c 	beq.w	800675e <update_control_loops+0x382>
 8006506:	4b4f      	ldr	r3, [pc, #316]	@ (8006644 <update_control_loops+0x268>)
 8006508:	7c1b      	ldrb	r3, [r3, #16]
 800650a:	f083 0301 	eor.w	r3, r3, #1
 800650e:	b2db      	uxtb	r3, r3
 8006510:	2b00      	cmp	r3, #0
 8006512:	f000 8124 	beq.w	800675e <update_control_loops+0x382>
			Trapezoidal_Evaluated(&prisGen, &prisEva,
 8006516:	4b43      	ldr	r3, [pc, #268]	@ (8006624 <update_control_loops+0x248>)
 8006518:	ed93 8a03 	vldr	s16, [r3, #12]
 800651c:	4b41      	ldr	r3, [pc, #260]	@ (8006624 <update_control_loops+0x248>)
 800651e:	edd3 8a04 	vldr	s17, [r3, #16]
					prismatic_axis.initial_pos, prismatic_axis.target_pos,
					ZGX45RGG_400RPM_Constant.traject_sd_max,
 8006522:	4b49      	ldr	r3, [pc, #292]	@ (8006648 <update_control_loops+0x26c>)
 8006524:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
			Trapezoidal_Evaluated(&prisGen, &prisEva,
 8006528:	4610      	mov	r0, r2
 800652a:	4619      	mov	r1, r3
 800652c:	f7fa fb12 	bl	8000b54 <__aeabi_d2f>
 8006530:	4604      	mov	r4, r0
					ZGX45RGG_400RPM_Constant.traject_sdd_max);
 8006532:	4b45      	ldr	r3, [pc, #276]	@ (8006648 <update_control_loops+0x26c>)
 8006534:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
			Trapezoidal_Evaluated(&prisGen, &prisEva,
 8006538:	4610      	mov	r0, r2
 800653a:	4619      	mov	r1, r3
 800653c:	f7fa fb0a 	bl	8000b54 <__aeabi_d2f>
 8006540:	4603      	mov	r3, r0
 8006542:	ee01 3a90 	vmov	s3, r3
 8006546:	ee01 4a10 	vmov	s2, r4
 800654a:	eef0 0a68 	vmov.f32	s1, s17
 800654e:	eeb0 0a48 	vmov.f32	s0, s16
 8006552:	493c      	ldr	r1, [pc, #240]	@ (8006644 <update_control_loops+0x268>)
 8006554:	483d      	ldr	r0, [pc, #244]	@ (800664c <update_control_loops+0x270>)
 8006556:	f7fd fcb1 	bl	8003ebc <Trapezoidal_Evaluated>

			prismatic_axis.position = prisEva.setposition;
 800655a:	4b3a      	ldr	r3, [pc, #232]	@ (8006644 <update_control_loops+0x268>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a31      	ldr	r2, [pc, #196]	@ (8006624 <update_control_loops+0x248>)
 8006560:	6013      	str	r3, [r2, #0]
			prismatic_axis.velocity = prisEva.setvelocity;
 8006562:	4b38      	ldr	r3, [pc, #224]	@ (8006644 <update_control_loops+0x268>)
 8006564:	685b      	ldr	r3, [r3, #4]
 8006566:	4a2f      	ldr	r2, [pc, #188]	@ (8006624 <update_control_loops+0x248>)
 8006568:	6053      	str	r3, [r2, #4]

			if (prisEva.isFinised) {
 800656a:	4b36      	ldr	r3, [pc, #216]	@ (8006644 <update_control_loops+0x268>)
 800656c:	7c1b      	ldrb	r3, [r3, #16]
 800656e:	2b00      	cmp	r3, #0
 8006570:	f000 80f5 	beq.w	800675e <update_control_loops+0x382>
				// Prismatic motion complete - start revolute motion
				prismatic_axis.trajectory_active = false;
 8006574:	4a2b      	ldr	r2, [pc, #172]	@ (8006624 <update_control_loops+0x248>)
 8006576:	2300      	movs	r3, #0
 8006578:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
				prismatic_axis.position = prisEva.setposition;
 800657c:	4b31      	ldr	r3, [pc, #196]	@ (8006644 <update_control_loops+0x268>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a28      	ldr	r2, [pc, #160]	@ (8006624 <update_control_loops+0x248>)
 8006582:	6013      	str	r3, [r2, #0]
				prismatic_axis.velocity = 0.0f;
 8006584:	4b27      	ldr	r3, [pc, #156]	@ (8006624 <update_control_loops+0x248>)
 8006586:	f04f 0200 	mov.w	r2, #0
 800658a:	605a      	str	r2, [r3, #4]
				prismatic_axis.dfd = 0.0f;
 800658c:	4b25      	ldr	r3, [pc, #148]	@ (8006624 <update_control_loops+0x248>)
 800658e:	f04f 0200 	mov.w	r2, #0
 8006592:	62da      	str	r2, [r3, #44]	@ 0x2c
				prismatic_axis.ffd = 0.0f;
 8006594:	4b23      	ldr	r3, [pc, #140]	@ (8006624 <update_control_loops+0x248>)
 8006596:	f04f 0200 	mov.w	r2, #0
 800659a:	631a      	str	r2, [r3, #48]	@ 0x30

				// Reset prismatic control variables
				prismatic_axis.pos_error = 0.0f;
 800659c:	4b21      	ldr	r3, [pc, #132]	@ (8006624 <update_control_loops+0x248>)
 800659e:	f04f 0200 	mov.w	r2, #0
 80065a2:	615a      	str	r2, [r3, #20]
				prismatic_axis.vel_error = 0.0f;
 80065a4:	4b1f      	ldr	r3, [pc, #124]	@ (8006624 <update_control_loops+0x248>)
 80065a6:	f04f 0200 	mov.w	r2, #0
 80065aa:	619a      	str	r2, [r3, #24]
				prismatic_axis.command_vel = 0.0f;
 80065ac:	4b1d      	ldr	r3, [pc, #116]	@ (8006624 <update_control_loops+0x248>)
 80065ae:	f04f 0200 	mov.w	r2, #0
 80065b2:	629a      	str	r2, [r3, #40]	@ 0x28
				prismatic_axis.command_pos = 0.0f;
 80065b4:	4b1b      	ldr	r3, [pc, #108]	@ (8006624 <update_control_loops+0x248>)
 80065b6:	f04f 0200 	mov.w	r2, #0
 80065ba:	625a      	str	r2, [r3, #36]	@ 0x24

				// Now start revolute trajectory
				Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 80065bc:	4b16      	ldr	r3, [pc, #88]	@ (8006618 <update_control_loops+0x23c>)
 80065be:	ed93 8a03 	vldr	s16, [r3, #12]
 80065c2:	4b15      	ldr	r3, [pc, #84]	@ (8006618 <update_control_loops+0x23c>)
 80065c4:	edd3 8a04 	vldr	s17, [r3, #16]
						revolute_axis.target_pos,
						ZGX45RGG_150RPM_Constant.traject_qd_max,
 80065c8:	4b21      	ldr	r3, [pc, #132]	@ (8006650 <update_control_loops+0x274>)
 80065ca:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
				Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 80065ce:	4610      	mov	r0, r2
 80065d0:	4619      	mov	r1, r3
 80065d2:	f7fa fabf 	bl	8000b54 <__aeabi_d2f>
 80065d6:	4604      	mov	r4, r0
						ZGX45RGG_150RPM_Constant.traject_qdd_max);
 80065d8:	4b1d      	ldr	r3, [pc, #116]	@ (8006650 <update_control_loops+0x274>)
 80065da:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
				Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 80065de:	4610      	mov	r0, r2
 80065e0:	4619      	mov	r1, r3
 80065e2:	f7fa fab7 	bl	8000b54 <__aeabi_d2f>
 80065e6:	4603      	mov	r3, r0
 80065e8:	ee01 3a90 	vmov	s3, r3
 80065ec:	ee01 4a10 	vmov	s2, r4
 80065f0:	eef0 0a68 	vmov.f32	s1, s17
 80065f4:	eeb0 0a48 	vmov.f32	s0, s16
 80065f8:	4816      	ldr	r0, [pc, #88]	@ (8006654 <update_control_loops+0x278>)
 80065fa:	f7fd fb9d 	bl	8003d38 <Trapezoidal_Generator>

				revolute_axis.trajectory_active = true;
 80065fe:	4a06      	ldr	r2, [pc, #24]	@ (8006618 <update_control_loops+0x23c>)
 8006600:	2301      	movs	r3, #1
 8006602:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
				motion_sequence_state = MOTION_REVOLUTE_ACTIVE;
 8006606:	4a0d      	ldr	r2, [pc, #52]	@ (800663c <update_control_loops+0x260>)
 8006608:	2303      	movs	r3, #3
 800660a:	7013      	strb	r3, [r2, #0]
			}
		}
		break;
 800660c:	e0a7      	b.n	800675e <update_control_loops+0x382>
 800660e:	bf00      	nop
 8006610:	20000498 	.word	0x20000498
 8006614:	20000354 	.word	0x20000354
 8006618:	200002b8 	.word	0x200002b8
 800661c:	2000035c 	.word	0x2000035c
 8006620:	2000043c 	.word	0x2000043c
 8006624:	20000278 	.word	0x20000278
 8006628:	20000808 	.word	0x20000808
 800662c:	20000367 	.word	0x20000367
 8006630:	44fa0000 	.word	0x44fa0000
 8006634:	200003a4 	.word	0x200003a4
 8006638:	200003f0 	.word	0x200003f0
 800663c:	200002f8 	.word	0x200002f8
 8006640:	20000350 	.word	0x20000350
 8006644:	20000324 	.word	0x20000324
 8006648:	20000080 	.word	0x20000080
 800664c:	200002fc 	.word	0x200002fc
 8006650:	20000000 	.word	0x20000000
 8006654:	20000310 	.word	0x20000310

	case MOTION_REVOLUTE_ACTIVE:
		// Update revolute trajectory
		if (revolute_axis.trajectory_active && !revEva.isFinised) {
 8006658:	4b69      	ldr	r3, [pc, #420]	@ (8006800 <update_control_loops+0x424>)
 800665a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800665e:	2b00      	cmp	r3, #0
 8006660:	d07f      	beq.n	8006762 <update_control_loops+0x386>
 8006662:	4b68      	ldr	r3, [pc, #416]	@ (8006804 <update_control_loops+0x428>)
 8006664:	7c1b      	ldrb	r3, [r3, #16]
 8006666:	f083 0301 	eor.w	r3, r3, #1
 800666a:	b2db      	uxtb	r3, r3
 800666c:	2b00      	cmp	r3, #0
 800666e:	d078      	beq.n	8006762 <update_control_loops+0x386>
			Trapezoidal_Evaluated(&revGen, &revEva, revolute_axis.initial_pos,
 8006670:	4b63      	ldr	r3, [pc, #396]	@ (8006800 <update_control_loops+0x424>)
 8006672:	ed93 8a03 	vldr	s16, [r3, #12]
 8006676:	4b62      	ldr	r3, [pc, #392]	@ (8006800 <update_control_loops+0x424>)
 8006678:	edd3 8a04 	vldr	s17, [r3, #16]
					revolute_axis.target_pos,
					ZGX45RGG_150RPM_Constant.traject_qd_max,
 800667c:	4b62      	ldr	r3, [pc, #392]	@ (8006808 <update_control_loops+0x42c>)
 800667e:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
			Trapezoidal_Evaluated(&revGen, &revEva, revolute_axis.initial_pos,
 8006682:	4610      	mov	r0, r2
 8006684:	4619      	mov	r1, r3
 8006686:	f7fa fa65 	bl	8000b54 <__aeabi_d2f>
 800668a:	4604      	mov	r4, r0
					ZGX45RGG_150RPM_Constant.traject_qdd_max);
 800668c:	4b5e      	ldr	r3, [pc, #376]	@ (8006808 <update_control_loops+0x42c>)
 800668e:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
			Trapezoidal_Evaluated(&revGen, &revEva, revolute_axis.initial_pos,
 8006692:	4610      	mov	r0, r2
 8006694:	4619      	mov	r1, r3
 8006696:	f7fa fa5d 	bl	8000b54 <__aeabi_d2f>
 800669a:	4603      	mov	r3, r0
 800669c:	ee01 3a90 	vmov	s3, r3
 80066a0:	ee01 4a10 	vmov	s2, r4
 80066a4:	eef0 0a68 	vmov.f32	s1, s17
 80066a8:	eeb0 0a48 	vmov.f32	s0, s16
 80066ac:	4955      	ldr	r1, [pc, #340]	@ (8006804 <update_control_loops+0x428>)
 80066ae:	4857      	ldr	r0, [pc, #348]	@ (800680c <update_control_loops+0x430>)
 80066b0:	f7fd fc04 	bl	8003ebc <Trapezoidal_Evaluated>

			revolute_axis.position = revEva.setposition;
 80066b4:	4b53      	ldr	r3, [pc, #332]	@ (8006804 <update_control_loops+0x428>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a51      	ldr	r2, [pc, #324]	@ (8006800 <update_control_loops+0x424>)
 80066ba:	6013      	str	r3, [r2, #0]
			revolute_axis.velocity = revEva.setvelocity;
 80066bc:	4b51      	ldr	r3, [pc, #324]	@ (8006804 <update_control_loops+0x428>)
 80066be:	685b      	ldr	r3, [r3, #4]
 80066c0:	4a4f      	ldr	r2, [pc, #316]	@ (8006800 <update_control_loops+0x424>)
 80066c2:	6053      	str	r3, [r2, #4]

			if (revEva.isFinised) {
 80066c4:	4b4f      	ldr	r3, [pc, #316]	@ (8006804 <update_control_loops+0x428>)
 80066c6:	7c1b      	ldrb	r3, [r3, #16]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d04a      	beq.n	8006762 <update_control_loops+0x386>
				// Revolute motion complete - start pen down delay
				revolute_axis.trajectory_active = false;
 80066cc:	4a4c      	ldr	r2, [pc, #304]	@ (8006800 <update_control_loops+0x424>)
 80066ce:	2300      	movs	r3, #0
 80066d0:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
				revolute_axis.position = revEva.setposition;
 80066d4:	4b4b      	ldr	r3, [pc, #300]	@ (8006804 <update_control_loops+0x428>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a49      	ldr	r2, [pc, #292]	@ (8006800 <update_control_loops+0x424>)
 80066da:	6013      	str	r3, [r2, #0]
				revolute_axis.velocity = 0.0f;
 80066dc:	4b48      	ldr	r3, [pc, #288]	@ (8006800 <update_control_loops+0x424>)
 80066de:	f04f 0200 	mov.w	r2, #0
 80066e2:	605a      	str	r2, [r3, #4]
				revolute_axis.dfd = 0.0f;
 80066e4:	4b46      	ldr	r3, [pc, #280]	@ (8006800 <update_control_loops+0x424>)
 80066e6:	f04f 0200 	mov.w	r2, #0
 80066ea:	62da      	str	r2, [r3, #44]	@ 0x2c
				revolute_axis.ffd = 0.0f;
 80066ec:	4b44      	ldr	r3, [pc, #272]	@ (8006800 <update_control_loops+0x424>)
 80066ee:	f04f 0200 	mov.w	r2, #0
 80066f2:	631a      	str	r2, [r3, #48]	@ 0x30

				// Reset revolute control variables
				revolute_axis.pos_error = 0.0f;
 80066f4:	4b42      	ldr	r3, [pc, #264]	@ (8006800 <update_control_loops+0x424>)
 80066f6:	f04f 0200 	mov.w	r2, #0
 80066fa:	615a      	str	r2, [r3, #20]
				revolute_axis.vel_error = 0.0f;
 80066fc:	4b40      	ldr	r3, [pc, #256]	@ (8006800 <update_control_loops+0x424>)
 80066fe:	f04f 0200 	mov.w	r2, #0
 8006702:	619a      	str	r2, [r3, #24]
				revolute_axis.command_vel = 0.0f;
 8006704:	4b3e      	ldr	r3, [pc, #248]	@ (8006800 <update_control_loops+0x424>)
 8006706:	f04f 0200 	mov.w	r2, #0
 800670a:	629a      	str	r2, [r3, #40]	@ 0x28
				revolute_axis.command_pos = 0.0f;
 800670c:	4b3c      	ldr	r3, [pc, #240]	@ (8006800 <update_control_loops+0x424>)
 800670e:	f04f 0200 	mov.w	r2, #0
 8006712:	625a      	str	r2, [r3, #36]	@ 0x24

				PID_CONTROLLER_Reset(&revolute_position_pid);
 8006714:	483e      	ldr	r0, [pc, #248]	@ (8006810 <update_control_loops+0x434>)
 8006716:	f7fa fe11 	bl	800133c <PID_CONTROLLER_Reset>
				PID_CONTROLLER_Reset(&revolute_velocity_pid);
 800671a:	483e      	ldr	r0, [pc, #248]	@ (8006814 <update_control_loops+0x438>)
 800671c:	f7fa fe0e 	bl	800133c <PID_CONTROLLER_Reset>

				motion_delay_timer = 0;
 8006720:	4b3d      	ldr	r3, [pc, #244]	@ (8006818 <update_control_loops+0x43c>)
 8006722:	2200      	movs	r2, #0
 8006724:	601a      	str	r2, [r3, #0]
				motion_sequence_state = MOTION_PEN_DOWN_DELAY;
 8006726:	4a3d      	ldr	r2, [pc, #244]	@ (800681c <update_control_loops+0x440>)
 8006728:	2304      	movs	r3, #4
 800672a:	7013      	strb	r3, [r2, #0]
			}
		}
		break;
 800672c:	e019      	b.n	8006762 <update_control_loops+0x386>

	case MOTION_PEN_DOWN_DELAY:
		motion_delay_timer++;
 800672e:	4b3a      	ldr	r3, [pc, #232]	@ (8006818 <update_control_loops+0x43c>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	3301      	adds	r3, #1
 8006734:	4a38      	ldr	r2, [pc, #224]	@ (8006818 <update_control_loops+0x43c>)
 8006736:	6013      	str	r3, [r2, #0]
		if (motion_delay_timer >= 2000) {
 8006738:	4b37      	ldr	r3, [pc, #220]	@ (8006818 <update_control_loops+0x43c>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8006740:	d311      	bcc.n	8006766 <update_control_loops+0x38a>
			plotter_pen_down();
 8006742:	f001 fa37 	bl	8007bb4 <plotter_pen_down>
			motion_sequence_state = MOTION_COMPLETE;
 8006746:	4a35      	ldr	r2, [pc, #212]	@ (800681c <update_control_loops+0x440>)
 8006748:	2305      	movs	r3, #5
 800674a:	7013      	strb	r3, [r2, #0]
		}
		break;
 800674c:	e00b      	b.n	8006766 <update_control_loops+0x38a>

	case MOTION_COMPLETE:
		// Both motions complete - ready for next command
		motion_sequence_state = MOTION_IDLE;
 800674e:	4a33      	ldr	r2, [pc, #204]	@ (800681c <update_control_loops+0x440>)
 8006750:	2300      	movs	r3, #0
 8006752:	7013      	strb	r3, [r2, #0]
		break;
 8006754:	e008      	b.n	8006768 <update_control_loops+0x38c>

	case MOTION_IDLE:
	default:
		// No active motion
		break;
 8006756:	bf00      	nop
 8006758:	e006      	b.n	8006768 <update_control_loops+0x38c>
		break;
 800675a:	bf00      	nop
 800675c:	e004      	b.n	8006768 <update_control_loops+0x38c>
		break;
 800675e:	bf00      	nop
 8006760:	e002      	b.n	8006768 <update_control_loops+0x38c>
		break;
 8006762:	bf00      	nop
 8006764:	e000      	b.n	8006768 <update_control_loops+0x38c>
		break;
 8006766:	bf00      	nop
	}

	// *** PRISMATIC CONTROL ***
	prismatic_axis.pos_error = prismatic_axis.position - prismatic_encoder.mm;
 8006768:	4b2d      	ldr	r3, [pc, #180]	@ (8006820 <update_control_loops+0x444>)
 800676a:	ed93 7a00 	vldr	s14, [r3]
 800676e:	4b2d      	ldr	r3, [pc, #180]	@ (8006824 <update_control_loops+0x448>)
 8006770:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8006774:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006778:	4b29      	ldr	r3, [pc, #164]	@ (8006820 <update_control_loops+0x444>)
 800677a:	edc3 7a05 	vstr	s15, [r3, #20]

	prismatic_axis.command_vel = PWM_Satuation(
 800677e:	4b28      	ldr	r3, [pc, #160]	@ (8006820 <update_control_loops+0x444>)
 8006780:	edd3 7a05 	vldr	s15, [r3, #20]
 8006784:	eeb0 0a67 	vmov.f32	s0, s15
 8006788:	4827      	ldr	r0, [pc, #156]	@ (8006828 <update_control_loops+0x44c>)
 800678a:	f7fa fd45 	bl	8001218 <PID_CONTROLLER_Compute>
 800678e:	eeb0 8a40 	vmov.f32	s16, s0
			PID_CONTROLLER_Compute(&prismatic_position_pid,
					prismatic_axis.pos_error), ZGX45RGG_400RPM_Constant.sd_max,
 8006792:	4b26      	ldr	r3, [pc, #152]	@ (800682c <update_control_loops+0x450>)
 8006794:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
	prismatic_axis.command_vel = PWM_Satuation(
 8006798:	4610      	mov	r0, r2
 800679a:	4619      	mov	r1, r3
 800679c:	f7fa f992 	bl	8000ac4 <__aeabi_d2iz>
 80067a0:	4604      	mov	r4, r0
			-ZGX45RGG_400RPM_Constant.sd_max);
 80067a2:	4b22      	ldr	r3, [pc, #136]	@ (800682c <update_control_loops+0x450>)
 80067a4:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 80067a8:	4690      	mov	r8, r2
 80067aa:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
	prismatic_axis.command_vel = PWM_Satuation(
 80067ae:	4640      	mov	r0, r8
 80067b0:	4649      	mov	r1, r9
 80067b2:	f7fa f987 	bl	8000ac4 <__aeabi_d2iz>
 80067b6:	4603      	mov	r3, r0
 80067b8:	4619      	mov	r1, r3
 80067ba:	4620      	mov	r0, r4
 80067bc:	eeb0 0a48 	vmov.f32	s0, s16
 80067c0:	f7fa fcc8 	bl	8001154 <PWM_Satuation>
 80067c4:	ee07 0a90 	vmov	s15, r0
 80067c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80067cc:	4b14      	ldr	r3, [pc, #80]	@ (8006820 <update_control_loops+0x444>)
 80067ce:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

	// Add velocity feedforward for trajectory
	if (prismatic_axis.trajectory_active) {
 80067d2:	4b13      	ldr	r3, [pc, #76]	@ (8006820 <update_control_loops+0x444>)
 80067d4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d029      	beq.n	8006830 <update_control_loops+0x454>
		prismatic_axis.vel_error = prismatic_axis.command_vel
 80067dc:	4b10      	ldr	r3, [pc, #64]	@ (8006820 <update_control_loops+0x444>)
 80067de:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
				+ prismatic_axis.velocity - prismatic_axis.kalman_velocity;
 80067e2:	4b0f      	ldr	r3, [pc, #60]	@ (8006820 <update_control_loops+0x444>)
 80067e4:	edd3 7a01 	vldr	s15, [r3, #4]
 80067e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80067ec:	4b0c      	ldr	r3, [pc, #48]	@ (8006820 <update_control_loops+0x444>)
 80067ee:	edd3 7a07 	vldr	s15, [r3, #28]
 80067f2:	ee77 7a67 	vsub.f32	s15, s14, s15
		prismatic_axis.vel_error = prismatic_axis.command_vel
 80067f6:	4b0a      	ldr	r3, [pc, #40]	@ (8006820 <update_control_loops+0x444>)
 80067f8:	edc3 7a06 	vstr	s15, [r3, #24]
 80067fc:	e023      	b.n	8006846 <update_control_loops+0x46a>
 80067fe:	bf00      	nop
 8006800:	200002b8 	.word	0x200002b8
 8006804:	20000338 	.word	0x20000338
 8006808:	20000000 	.word	0x20000000
 800680c:	20000310 	.word	0x20000310
 8006810:	20000544 	.word	0x20000544
 8006814:	2000056c 	.word	0x2000056c
 8006818:	20000350 	.word	0x20000350
 800681c:	200002f8 	.word	0x200002f8
 8006820:	20000278 	.word	0x20000278
 8006824:	2000043c 	.word	0x2000043c
 8006828:	200004f4 	.word	0x200004f4
 800682c:	20000080 	.word	0x20000080
	} else {
		prismatic_axis.vel_error = prismatic_axis.command_vel
 8006830:	4ba2      	ldr	r3, [pc, #648]	@ (8006abc <update_control_loops+0x6e0>)
 8006832:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
				- prismatic_axis.kalman_velocity;
 8006836:	4ba1      	ldr	r3, [pc, #644]	@ (8006abc <update_control_loops+0x6e0>)
 8006838:	edd3 7a07 	vldr	s15, [r3, #28]
 800683c:	ee77 7a67 	vsub.f32	s15, s14, s15
		prismatic_axis.vel_error = prismatic_axis.command_vel
 8006840:	4b9e      	ldr	r3, [pc, #632]	@ (8006abc <update_control_loops+0x6e0>)
 8006842:	edc3 7a06 	vstr	s15, [r3, #24]
	}

	prismatic_axis.command_pos = PWM_Satuation(
 8006846:	4b9d      	ldr	r3, [pc, #628]	@ (8006abc <update_control_loops+0x6e0>)
 8006848:	edd3 7a06 	vldr	s15, [r3, #24]
 800684c:	eeb0 0a67 	vmov.f32	s0, s15
 8006850:	489b      	ldr	r0, [pc, #620]	@ (8006ac0 <update_control_loops+0x6e4>)
 8006852:	f7fa fce1 	bl	8001218 <PID_CONTROLLER_Compute>
 8006856:	eeb0 8a40 	vmov.f32	s16, s0
			PID_CONTROLLER_Compute(&prismatic_velocity_pid,
					prismatic_axis.vel_error), ZGX45RGG_400RPM_Constant.U_max,
 800685a:	4b9a      	ldr	r3, [pc, #616]	@ (8006ac4 <update_control_loops+0x6e8>)
 800685c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	prismatic_axis.command_pos = PWM_Satuation(
 8006860:	4610      	mov	r0, r2
 8006862:	4619      	mov	r1, r3
 8006864:	f7fa f92e 	bl	8000ac4 <__aeabi_d2iz>
 8006868:	4604      	mov	r4, r0
			-ZGX45RGG_400RPM_Constant.U_max);
 800686a:	4b96      	ldr	r3, [pc, #600]	@ (8006ac4 <update_control_loops+0x6e8>)
 800686c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8006870:	613a      	str	r2, [r7, #16]
 8006872:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8006876:	617b      	str	r3, [r7, #20]
	prismatic_axis.command_pos = PWM_Satuation(
 8006878:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800687c:	f7fa f922 	bl	8000ac4 <__aeabi_d2iz>
 8006880:	4603      	mov	r3, r0
 8006882:	4619      	mov	r1, r3
 8006884:	4620      	mov	r0, r4
 8006886:	eeb0 0a48 	vmov.f32	s0, s16
 800688a:	f7fa fc63 	bl	8001154 <PWM_Satuation>
 800688e:	ee07 0a90 	vmov	s15, r0
 8006892:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006896:	4b89      	ldr	r3, [pc, #548]	@ (8006abc <update_control_loops+0x6e0>)
 8006898:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	// *** REVOLUTE CONTROL ***
	revolute_axis.pos_error = revolute_axis.position - normalized_position;
 800689c:	4b8a      	ldr	r3, [pc, #552]	@ (8006ac8 <update_control_loops+0x6ec>)
 800689e:	ed93 7a00 	vldr	s14, [r3]
 80068a2:	4b8a      	ldr	r3, [pc, #552]	@ (8006acc <update_control_loops+0x6f0>)
 80068a4:	edd3 7a00 	vldr	s15, [r3]
 80068a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80068ac:	4b86      	ldr	r3, [pc, #536]	@ (8006ac8 <update_control_loops+0x6ec>)
 80068ae:	edc3 7a05 	vstr	s15, [r3, #20]

	// Ensure error uses the shortest path for control
	if (revolute_axis.pos_error > PI) {
 80068b2:	4b85      	ldr	r3, [pc, #532]	@ (8006ac8 <update_control_loops+0x6ec>)
 80068b4:	edd3 7a05 	vldr	s15, [r3, #20]
 80068b8:	ed9f 7a85 	vldr	s14, [pc, #532]	@ 8006ad0 <update_control_loops+0x6f4>
 80068bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80068c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068c4:	dd09      	ble.n	80068da <update_control_loops+0x4fe>
		revolute_axis.pos_error -= 2.0f * PI;
 80068c6:	4b80      	ldr	r3, [pc, #512]	@ (8006ac8 <update_control_loops+0x6ec>)
 80068c8:	edd3 7a05 	vldr	s15, [r3, #20]
 80068cc:	ed9f 7a81 	vldr	s14, [pc, #516]	@ 8006ad4 <update_control_loops+0x6f8>
 80068d0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80068d4:	4b7c      	ldr	r3, [pc, #496]	@ (8006ac8 <update_control_loops+0x6ec>)
 80068d6:	edc3 7a05 	vstr	s15, [r3, #20]
	}
	if (revolute_axis.pos_error < -PI) {
 80068da:	4b7b      	ldr	r3, [pc, #492]	@ (8006ac8 <update_control_loops+0x6ec>)
 80068dc:	edd3 7a05 	vldr	s15, [r3, #20]
 80068e0:	ed9f 7a7d 	vldr	s14, [pc, #500]	@ 8006ad8 <update_control_loops+0x6fc>
 80068e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80068e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068ec:	d509      	bpl.n	8006902 <update_control_loops+0x526>
		revolute_axis.pos_error += 2.0f * PI;
 80068ee:	4b76      	ldr	r3, [pc, #472]	@ (8006ac8 <update_control_loops+0x6ec>)
 80068f0:	edd3 7a05 	vldr	s15, [r3, #20]
 80068f4:	ed9f 7a77 	vldr	s14, [pc, #476]	@ 8006ad4 <update_control_loops+0x6f8>
 80068f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80068fc:	4b72      	ldr	r3, [pc, #456]	@ (8006ac8 <update_control_loops+0x6ec>)
 80068fe:	edc3 7a05 	vstr	s15, [r3, #20]
	}

	revolute_axis.command_vel = PWM_Satuation(
 8006902:	4b71      	ldr	r3, [pc, #452]	@ (8006ac8 <update_control_loops+0x6ec>)
 8006904:	edd3 7a05 	vldr	s15, [r3, #20]
 8006908:	eeb0 0a67 	vmov.f32	s0, s15
 800690c:	4873      	ldr	r0, [pc, #460]	@ (8006adc <update_control_loops+0x700>)
 800690e:	f7fa fc83 	bl	8001218 <PID_CONTROLLER_Compute>
 8006912:	eeb0 8a40 	vmov.f32	s16, s0
			PID_CONTROLLER_Compute(&revolute_position_pid,
					revolute_axis.pos_error), ZGX45RGG_150RPM_Constant.qd_max,
 8006916:	4b72      	ldr	r3, [pc, #456]	@ (8006ae0 <update_control_loops+0x704>)
 8006918:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	revolute_axis.command_vel = PWM_Satuation(
 800691c:	4610      	mov	r0, r2
 800691e:	4619      	mov	r1, r3
 8006920:	f7fa f8d0 	bl	8000ac4 <__aeabi_d2iz>
 8006924:	4604      	mov	r4, r0
			-ZGX45RGG_150RPM_Constant.qd_max);
 8006926:	4b6e      	ldr	r3, [pc, #440]	@ (8006ae0 <update_control_loops+0x704>)
 8006928:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 800692c:	60ba      	str	r2, [r7, #8]
 800692e:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8006932:	60fb      	str	r3, [r7, #12]
	revolute_axis.command_vel = PWM_Satuation(
 8006934:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006938:	f7fa f8c4 	bl	8000ac4 <__aeabi_d2iz>
 800693c:	4603      	mov	r3, r0
 800693e:	4619      	mov	r1, r3
 8006940:	4620      	mov	r0, r4
 8006942:	eeb0 0a48 	vmov.f32	s0, s16
 8006946:	f7fa fc05 	bl	8001154 <PWM_Satuation>
 800694a:	ee07 0a90 	vmov	s15, r0
 800694e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006952:	4b5d      	ldr	r3, [pc, #372]	@ (8006ac8 <update_control_loops+0x6ec>)
 8006954:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

	// Add velocity feedforward for trajectory
	if (revolute_axis.trajectory_active) {
 8006958:	4b5b      	ldr	r3, [pc, #364]	@ (8006ac8 <update_control_loops+0x6ec>)
 800695a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800695e:	2b00      	cmp	r3, #0
 8006960:	d010      	beq.n	8006984 <update_control_loops+0x5a8>
		revolute_axis.vel_error = revolute_axis.command_vel
 8006962:	4b59      	ldr	r3, [pc, #356]	@ (8006ac8 <update_control_loops+0x6ec>)
 8006964:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
				+ revolute_axis.velocity - revolute_axis.kalman_velocity;
 8006968:	4b57      	ldr	r3, [pc, #348]	@ (8006ac8 <update_control_loops+0x6ec>)
 800696a:	edd3 7a01 	vldr	s15, [r3, #4]
 800696e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006972:	4b55      	ldr	r3, [pc, #340]	@ (8006ac8 <update_control_loops+0x6ec>)
 8006974:	edd3 7a07 	vldr	s15, [r3, #28]
 8006978:	ee77 7a67 	vsub.f32	s15, s14, s15
		revolute_axis.vel_error = revolute_axis.command_vel
 800697c:	4b52      	ldr	r3, [pc, #328]	@ (8006ac8 <update_control_loops+0x6ec>)
 800697e:	edc3 7a06 	vstr	s15, [r3, #24]
 8006982:	e00a      	b.n	800699a <update_control_loops+0x5be>
	} else {
		revolute_axis.vel_error = revolute_axis.command_vel
 8006984:	4b50      	ldr	r3, [pc, #320]	@ (8006ac8 <update_control_loops+0x6ec>)
 8006986:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
				- revolute_axis.kalman_velocity;
 800698a:	4b4f      	ldr	r3, [pc, #316]	@ (8006ac8 <update_control_loops+0x6ec>)
 800698c:	edd3 7a07 	vldr	s15, [r3, #28]
 8006990:	ee77 7a67 	vsub.f32	s15, s14, s15
		revolute_axis.vel_error = revolute_axis.command_vel
 8006994:	4b4c      	ldr	r3, [pc, #304]	@ (8006ac8 <update_control_loops+0x6ec>)
 8006996:	edc3 7a06 	vstr	s15, [r3, #24]
	}

	revolute_axis.command_pos = PWM_Satuation(
 800699a:	4b4b      	ldr	r3, [pc, #300]	@ (8006ac8 <update_control_loops+0x6ec>)
 800699c:	edd3 7a06 	vldr	s15, [r3, #24]
 80069a0:	eeb0 0a67 	vmov.f32	s0, s15
 80069a4:	484f      	ldr	r0, [pc, #316]	@ (8006ae4 <update_control_loops+0x708>)
 80069a6:	f7fa fc37 	bl	8001218 <PID_CONTROLLER_Compute>
 80069aa:	eeb0 8a40 	vmov.f32	s16, s0
			PID_CONTROLLER_Compute(&revolute_velocity_pid,
					revolute_axis.vel_error), ZGX45RGG_150RPM_Constant.U_max,
 80069ae:	4b4c      	ldr	r3, [pc, #304]	@ (8006ae0 <update_control_loops+0x704>)
 80069b0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	revolute_axis.command_pos = PWM_Satuation(
 80069b4:	4610      	mov	r0, r2
 80069b6:	4619      	mov	r1, r3
 80069b8:	f7fa f884 	bl	8000ac4 <__aeabi_d2iz>
 80069bc:	4604      	mov	r4, r0
			-ZGX45RGG_150RPM_Constant.U_max);
 80069be:	4b48      	ldr	r3, [pc, #288]	@ (8006ae0 <update_control_loops+0x704>)
 80069c0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80069c4:	603a      	str	r2, [r7, #0]
 80069c6:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80069ca:	607b      	str	r3, [r7, #4]
	revolute_axis.command_pos = PWM_Satuation(
 80069cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80069d0:	f7fa f878 	bl	8000ac4 <__aeabi_d2iz>
 80069d4:	4603      	mov	r3, r0
 80069d6:	4619      	mov	r1, r3
 80069d8:	4620      	mov	r0, r4
 80069da:	eeb0 0a48 	vmov.f32	s0, s16
 80069de:	f7fa fbb9 	bl	8001154 <PWM_Satuation>
 80069e2:	ee07 0a90 	vmov	s15, r0
 80069e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80069ea:	4b37      	ldr	r3, [pc, #220]	@ (8006ac8 <update_control_loops+0x6ec>)
 80069ec:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	// *** FEEDFORWARD COMPENSATION ***
	// Add feed-forward compensation for prismatic axis
	if (prismatic_axis.trajectory_active) {
 80069f0:	4b32      	ldr	r3, [pc, #200]	@ (8006abc <update_control_loops+0x6e0>)
 80069f2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d02c      	beq.n	8006a54 <update_control_loops+0x678>
		prismatic_axis.ffd = PRISMATIC_MOTOR_FFD_Compute(&prismatic_motor_ffd,
				prismatic_axis.velocity / 1000.0f);
 80069fa:	4b30      	ldr	r3, [pc, #192]	@ (8006abc <update_control_loops+0x6e0>)
 80069fc:	edd3 7a01 	vldr	s15, [r3, #4]
		prismatic_axis.ffd = PRISMATIC_MOTOR_FFD_Compute(&prismatic_motor_ffd,
 8006a00:	eddf 6a39 	vldr	s13, [pc, #228]	@ 8006ae8 <update_control_loops+0x70c>
 8006a04:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8006a08:	eeb0 0a47 	vmov.f32	s0, s14
 8006a0c:	4837      	ldr	r0, [pc, #220]	@ (8006aec <update_control_loops+0x710>)
 8006a0e:	f7fa ff4b 	bl	80018a8 <PRISMATIC_MOTOR_FFD_Compute>
 8006a12:	eef0 7a40 	vmov.f32	s15, s0
 8006a16:	4b29      	ldr	r3, [pc, #164]	@ (8006abc <update_control_loops+0x6e0>)
 8006a18:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 8006a1c:	4b34      	ldr	r3, [pc, #208]	@ (8006af0 <update_control_loops+0x714>)
 8006a1e:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8006a22:	4b29      	ldr	r3, [pc, #164]	@ (8006ac8 <update_control_loops+0x6ec>)
 8006a24:	edd3 6a01 	vldr	s13, [r3, #4]
				revolute_encoder.rads, revolute_axis.velocity,
				prismatic_encoder.mm / 1000.0f);
 8006a28:	4b32      	ldr	r3, [pc, #200]	@ (8006af4 <update_control_loops+0x718>)
 8006a2a:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 8006a2e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8006ae8 <update_control_loops+0x70c>
 8006a32:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 8006a36:	eeb0 1a46 	vmov.f32	s2, s12
 8006a3a:	eef0 0a66 	vmov.f32	s1, s13
 8006a3e:	eeb0 0a47 	vmov.f32	s0, s14
 8006a42:	482d      	ldr	r0, [pc, #180]	@ (8006af8 <update_control_loops+0x71c>)
 8006a44:	f7fa ffc3 	bl	80019ce <PRISMATIC_MOTOR_DFD_Compute>
 8006a48:	eef0 7a40 	vmov.f32	s15, s0
 8006a4c:	4b1b      	ldr	r3, [pc, #108]	@ (8006abc <update_control_loops+0x6e0>)
 8006a4e:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
 8006a52:	e007      	b.n	8006a64 <update_control_loops+0x688>
	} else {
		prismatic_axis.ffd = 0.0f;
 8006a54:	4b19      	ldr	r3, [pc, #100]	@ (8006abc <update_control_loops+0x6e0>)
 8006a56:	f04f 0200 	mov.w	r2, #0
 8006a5a:	631a      	str	r2, [r3, #48]	@ 0x30
		prismatic_axis.dfd = 0.0f;
 8006a5c:	4b17      	ldr	r3, [pc, #92]	@ (8006abc <update_control_loops+0x6e0>)
 8006a5e:	f04f 0200 	mov.w	r2, #0
 8006a62:	62da      	str	r2, [r3, #44]	@ 0x2c
	}

	if (revolute_axis.trajectory_active) {
 8006a64:	4b18      	ldr	r3, [pc, #96]	@ (8006ac8 <update_control_loops+0x6ec>)
 8006a66:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d04c      	beq.n	8006b08 <update_control_loops+0x72c>
		revolute_axis.ffd = REVOLUTE_MOTOR_FFD_Compute(&revolute_motor_ffd,
 8006a6e:	4b16      	ldr	r3, [pc, #88]	@ (8006ac8 <update_control_loops+0x6ec>)
 8006a70:	edd3 7a01 	vldr	s15, [r3, #4]
 8006a74:	eeb0 0a67 	vmov.f32	s0, s15
 8006a78:	4820      	ldr	r0, [pc, #128]	@ (8006afc <update_control_loops+0x720>)
 8006a7a:	f7fa fd8d 	bl	8001598 <REVOLUTE_MOTOR_FFD_Compute>
 8006a7e:	eef0 7a40 	vmov.f32	s15, s0
 8006a82:	4b11      	ldr	r3, [pc, #68]	@ (8006ac8 <update_control_loops+0x6ec>)
 8006a84:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
				revolute_axis.velocity);
		revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8006a88:	4b19      	ldr	r3, [pc, #100]	@ (8006af0 <update_control_loops+0x714>)
 8006a8a:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
				revolute_encoder.rads, 0.0f, prismatic_encoder.mm / 1000.0f);
 8006a8e:	4b19      	ldr	r3, [pc, #100]	@ (8006af4 <update_control_loops+0x718>)
 8006a90:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8006a94:	ed9f 6a14 	vldr	s12, [pc, #80]	@ 8006ae8 <update_control_loops+0x70c>
 8006a98:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8006a9c:	eeb0 1a66 	vmov.f32	s2, s13
 8006aa0:	eddf 0a17 	vldr	s1, [pc, #92]	@ 8006b00 <update_control_loops+0x724>
 8006aa4:	eeb0 0a47 	vmov.f32	s0, s14
 8006aa8:	4816      	ldr	r0, [pc, #88]	@ (8006b04 <update_control_loops+0x728>)
 8006aaa:	f7fa fe09 	bl	80016c0 <REVOLUTE_MOTOR_DFD_Compute>
 8006aae:	eef0 7a40 	vmov.f32	s15, s0
 8006ab2:	4b05      	ldr	r3, [pc, #20]	@ (8006ac8 <update_control_loops+0x6ec>)
 8006ab4:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
 8006ab8:	e042      	b.n	8006b40 <update_control_loops+0x764>
 8006aba:	bf00      	nop
 8006abc:	20000278 	.word	0x20000278
 8006ac0:	2000051c 	.word	0x2000051c
 8006ac4:	20000080 	.word	0x20000080
 8006ac8:	200002b8 	.word	0x200002b8
 8006acc:	20000354 	.word	0x20000354
 8006ad0:	40490fdb 	.word	0x40490fdb
 8006ad4:	40c90fdb 	.word	0x40c90fdb
 8006ad8:	c0490fdb 	.word	0xc0490fdb
 8006adc:	20000544 	.word	0x20000544
 8006ae0:	20000000 	.word	0x20000000
 8006ae4:	2000056c 	.word	0x2000056c
 8006ae8:	447a0000 	.word	0x447a0000
 8006aec:	20000594 	.word	0x20000594
 8006af0:	20000498 	.word	0x20000498
 8006af4:	2000043c 	.word	0x2000043c
 8006af8:	20000598 	.word	0x20000598
 8006afc:	200005a0 	.word	0x200005a0
 8006b00:	00000000 	.word	0x00000000
 8006b04:	200005a4 	.word	0x200005a4
	} else {
		revolute_axis.ffd = 0.0f;
 8006b08:	4b57      	ldr	r3, [pc, #348]	@ (8006c68 <update_control_loops+0x88c>)
 8006b0a:	f04f 0200 	mov.w	r2, #0
 8006b0e:	631a      	str	r2, [r3, #48]	@ 0x30
		revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8006b10:	4b56      	ldr	r3, [pc, #344]	@ (8006c6c <update_control_loops+0x890>)
 8006b12:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
				revolute_encoder.rads, 0.0f, prismatic_encoder.mm / 1000.0f);
 8006b16:	4b56      	ldr	r3, [pc, #344]	@ (8006c70 <update_control_loops+0x894>)
 8006b18:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8006b1c:	ed9f 6a55 	vldr	s12, [pc, #340]	@ 8006c74 <update_control_loops+0x898>
 8006b20:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8006b24:	eeb0 1a66 	vmov.f32	s2, s13
 8006b28:	eddf 0a53 	vldr	s1, [pc, #332]	@ 8006c78 <update_control_loops+0x89c>
 8006b2c:	eeb0 0a47 	vmov.f32	s0, s14
 8006b30:	4852      	ldr	r0, [pc, #328]	@ (8006c7c <update_control_loops+0x8a0>)
 8006b32:	f7fa fdc5 	bl	80016c0 <REVOLUTE_MOTOR_DFD_Compute>
 8006b36:	eef0 7a40 	vmov.f32	s15, s0
 8006b3a:	4b4b      	ldr	r3, [pc, #300]	@ (8006c68 <update_control_loops+0x88c>)
 8006b3c:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	}

	// Add feedforward terms to commands
	prismatic_axis.command_pos += prismatic_axis.dfd + prismatic_axis.ffd;
 8006b40:	4b4f      	ldr	r3, [pc, #316]	@ (8006c80 <update_control_loops+0x8a4>)
 8006b42:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8006b46:	4b4e      	ldr	r3, [pc, #312]	@ (8006c80 <update_control_loops+0x8a4>)
 8006b48:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 8006b4c:	4b4c      	ldr	r3, [pc, #304]	@ (8006c80 <update_control_loops+0x8a4>)
 8006b4e:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8006b52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006b5a:	4b49      	ldr	r3, [pc, #292]	@ (8006c80 <update_control_loops+0x8a4>)
 8006b5c:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	revolute_axis.command_pos += revolute_axis.dfd + revolute_axis.ffd;
 8006b60:	4b41      	ldr	r3, [pc, #260]	@ (8006c68 <update_control_loops+0x88c>)
 8006b62:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8006b66:	4b40      	ldr	r3, [pc, #256]	@ (8006c68 <update_control_loops+0x88c>)
 8006b68:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 8006b6c:	4b3e      	ldr	r3, [pc, #248]	@ (8006c68 <update_control_loops+0x88c>)
 8006b6e:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8006b72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006b7a:	4b3b      	ldr	r3, [pc, #236]	@ (8006c68 <update_control_loops+0x88c>)
 8006b7c:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	// Final saturation
	prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8006b80:	4b3f      	ldr	r3, [pc, #252]	@ (8006c80 <update_control_loops+0x8a4>)
 8006b82:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
			ZGX45RGG_400RPM_Constant.U_max, -ZGX45RGG_400RPM_Constant.U_max);
 8006b86:	4b3f      	ldr	r3, [pc, #252]	@ (8006c84 <update_control_loops+0x8a8>)
 8006b88:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8006b8c:	4610      	mov	r0, r2
 8006b8e:	4619      	mov	r1, r3
 8006b90:	f7f9 ff98 	bl	8000ac4 <__aeabi_d2iz>
 8006b94:	4604      	mov	r4, r0
			ZGX45RGG_400RPM_Constant.U_max, -ZGX45RGG_400RPM_Constant.U_max);
 8006b96:	4b3b      	ldr	r3, [pc, #236]	@ (8006c84 <update_control_loops+0x8a8>)
 8006b98:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8006b9c:	4615      	mov	r5, r2
 8006b9e:	f083 4600 	eor.w	r6, r3, #2147483648	@ 0x80000000
	prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8006ba2:	4628      	mov	r0, r5
 8006ba4:	4631      	mov	r1, r6
 8006ba6:	f7f9 ff8d 	bl	8000ac4 <__aeabi_d2iz>
 8006baa:	4603      	mov	r3, r0
 8006bac:	4619      	mov	r1, r3
 8006bae:	4620      	mov	r0, r4
 8006bb0:	eeb0 0a48 	vmov.f32	s0, s16
 8006bb4:	f7fa face 	bl	8001154 <PWM_Satuation>
 8006bb8:	ee07 0a90 	vmov	s15, r0
 8006bbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006bc0:	4b2f      	ldr	r3, [pc, #188]	@ (8006c80 <update_control_loops+0x8a4>)
 8006bc2:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8006bc6:	4b28      	ldr	r3, [pc, #160]	@ (8006c68 <update_control_loops+0x88c>)
 8006bc8:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
			ZGX45RGG_150RPM_Constant.U_max, -ZGX45RGG_150RPM_Constant.U_max);
 8006bcc:	4b2e      	ldr	r3, [pc, #184]	@ (8006c88 <update_control_loops+0x8ac>)
 8006bce:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8006bd2:	4610      	mov	r0, r2
 8006bd4:	4619      	mov	r1, r3
 8006bd6:	f7f9 ff75 	bl	8000ac4 <__aeabi_d2iz>
 8006bda:	4604      	mov	r4, r0
			ZGX45RGG_150RPM_Constant.U_max, -ZGX45RGG_150RPM_Constant.U_max);
 8006bdc:	4b2a      	ldr	r3, [pc, #168]	@ (8006c88 <update_control_loops+0x8ac>)
 8006bde:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8006be2:	4692      	mov	sl, r2
 8006be4:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
	revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8006be8:	4650      	mov	r0, sl
 8006bea:	4659      	mov	r1, fp
 8006bec:	f7f9 ff6a 	bl	8000ac4 <__aeabi_d2iz>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	4619      	mov	r1, r3
 8006bf4:	4620      	mov	r0, r4
 8006bf6:	eeb0 0a48 	vmov.f32	s0, s16
 8006bfa:	f7fa faab 	bl	8001154 <PWM_Satuation>
 8006bfe:	ee07 0a90 	vmov	s15, r0
 8006c02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006c06:	4b18      	ldr	r3, [pc, #96]	@ (8006c68 <update_control_loops+0x88c>)
 8006c08:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	// Apply commands to motors
	MDXX_set_range(&prismatic_motor, 2000, prismatic_axis.command_pos);
 8006c0c:	4b1c      	ldr	r3, [pc, #112]	@ (8006c80 <update_control_loops+0x8a4>)
 8006c0e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8006c12:	eef0 0a67 	vmov.f32	s1, s15
 8006c16:	ed9f 0a1d 	vldr	s0, [pc, #116]	@ 8006c8c <update_control_loops+0x8b0>
 8006c1a:	481d      	ldr	r0, [pc, #116]	@ (8006c90 <update_control_loops+0x8b4>)
 8006c1c:	f7fa fbd4 	bl	80013c8 <MDXX_set_range>
	MDXX_set_range(&revolute_motor, 2000, revolute_axis.command_pos);
 8006c20:	4b11      	ldr	r3, [pc, #68]	@ (8006c68 <update_control_loops+0x88c>)
 8006c22:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8006c26:	eef0 0a67 	vmov.f32	s1, s15
 8006c2a:	ed9f 0a18 	vldr	s0, [pc, #96]	@ 8006c8c <update_control_loops+0x8b0>
 8006c2e:	4819      	ldr	r0, [pc, #100]	@ (8006c94 <update_control_loops+0x8b8>)
 8006c30:	f7fa fbca 	bl	80013c8 <MDXX_set_range>

	// Update display values
	prismatic_axis.mm = prismatic_encoder.mm;
 8006c34:	4b0e      	ldr	r3, [pc, #56]	@ (8006c70 <update_control_loops+0x894>)
 8006c36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c38:	4a11      	ldr	r2, [pc, #68]	@ (8006c80 <update_control_loops+0x8a4>)
 8006c3a:	6393      	str	r3, [r2, #56]	@ 0x38
	revolute_axis.deg = UnitConverter_angle(&converter_system,
 8006c3c:	4b16      	ldr	r3, [pc, #88]	@ (8006c98 <update_control_loops+0x8bc>)
 8006c3e:	edd3 7a00 	vldr	s15, [r3]
 8006c42:	220e      	movs	r2, #14
 8006c44:	210f      	movs	r1, #15
 8006c46:	eeb0 0a67 	vmov.f32	s0, s15
 8006c4a:	4814      	ldr	r0, [pc, #80]	@ (8006c9c <update_control_loops+0x8c0>)
 8006c4c:	f7fd fcce 	bl	80045ec <UnitConverter_angle>
 8006c50:	eef0 7a40 	vmov.f32	s15, s0
 8006c54:	4b04      	ldr	r3, [pc, #16]	@ (8006c68 <update_control_loops+0x88c>)
 8006c56:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
			normalized_position, UNIT_RADIAN, UNIT_DEGREE);
}
 8006c5a:	371c      	adds	r7, #28
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	ecbd 8b02 	vpop	{d8}
 8006c62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c66:	bf00      	nop
 8006c68:	200002b8 	.word	0x200002b8
 8006c6c:	20000498 	.word	0x20000498
 8006c70:	2000043c 	.word	0x2000043c
 8006c74:	447a0000 	.word	0x447a0000
 8006c78:	00000000 	.word	0x00000000
 8006c7c:	200005a4 	.word	0x200005a4
 8006c80:	20000278 	.word	0x20000278
 8006c84:	20000080 	.word	0x20000080
 8006c88:	20000000 	.word	0x20000000
 8006c8c:	44fa0000 	.word	0x44fa0000
 8006c90:	200003a4 	.word	0x200003a4
 8006c94:	200003f0 	.word	0x200003f0
 8006c98:	20000354 	.word	0x20000354
 8006c9c:	20000808 	.word	0x20000808

08006ca0 <check_safety_conditions>:

void check_safety_conditions(void) {
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	af00      	add	r7, sp, #0
    if (safety_state != SAFETY_NORMAL) {
 8006ca4:	4b16      	ldr	r3, [pc, #88]	@ (8006d00 <check_safety_conditions+0x60>)
 8006ca6:	781b      	ldrb	r3, [r3, #0]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d126      	bne.n	8006cfa <check_safety_conditions+0x5a>
        return; // Already in emergency state
    }

    // Check if motor is trying to move beyond physical limits when not homing
    if (!homing_active) {
 8006cac:	4b15      	ldr	r3, [pc, #84]	@ (8006d04 <check_safety_conditions+0x64>)
 8006cae:	781b      	ldrb	r3, [r3, #0]
 8006cb0:	f083 0301 	eor.w	r3, r3, #1
 8006cb4:	b2db      	uxtb	r3, r3
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d020      	beq.n	8006cfc <check_safety_conditions+0x5c>
        // Check upper photo sensor limit - PWM negative means moving up
        if (up_photo && prismatic_axis.command_pos < 0.0f) {
 8006cba:	4b13      	ldr	r3, [pc, #76]	@ (8006d08 <check_safety_conditions+0x68>)
 8006cbc:	781b      	ldrb	r3, [r3, #0]
 8006cbe:	b2db      	uxtb	r3, r3
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d00a      	beq.n	8006cda <check_safety_conditions+0x3a>
 8006cc4:	4b11      	ldr	r3, [pc, #68]	@ (8006d0c <check_safety_conditions+0x6c>)
 8006cc6:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8006cca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006cce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cd2:	d502      	bpl.n	8006cda <check_safety_conditions+0x3a>
            // At upper limit but trying to move up (negative PWM command)
            trigger_software_emergency();
 8006cd4:	f000 f81e 	bl	8006d14 <trigger_software_emergency>
            return;
 8006cd8:	e010      	b.n	8006cfc <check_safety_conditions+0x5c>
        }

        // Check lower photo sensor limit - PWM positive means moving down
        if (low_photo && prismatic_axis.command_pos > 0.0f) {
 8006cda:	4b0d      	ldr	r3, [pc, #52]	@ (8006d10 <check_safety_conditions+0x70>)
 8006cdc:	781b      	ldrb	r3, [r3, #0]
 8006cde:	b2db      	uxtb	r3, r3
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d00b      	beq.n	8006cfc <check_safety_conditions+0x5c>
 8006ce4:	4b09      	ldr	r3, [pc, #36]	@ (8006d0c <check_safety_conditions+0x6c>)
 8006ce6:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8006cea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006cee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cf2:	dd03      	ble.n	8006cfc <check_safety_conditions+0x5c>
            // At lower limit but trying to move down (positive PWM command)
            trigger_software_emergency();
 8006cf4:	f000 f80e 	bl	8006d14 <trigger_software_emergency>
            return;
 8006cf8:	e000      	b.n	8006cfc <check_safety_conditions+0x5c>
        return; // Already in emergency state
 8006cfa:	bf00      	nop

    // =================== REMOVED ALL REVOLUTE SAFETY CHECKS ===================
    // No more 180° crossing detection
    // No more distance from home checks
    // Only prismatic photo sensor safety remains
}
 8006cfc:	bd80      	pop	{r7, pc}
 8006cfe:	bf00      	nop
 8006d00:	20000368 	.word	0x20000368
 8006d04:	20000367 	.word	0x20000367
 8006d08:	20000364 	.word	0x20000364
 8006d0c:	20000278 	.word	0x20000278
 8006d10:	20000365 	.word	0x20000365

08006d14 <trigger_software_emergency>:

void trigger_software_emergency(void) {
 8006d14:	b580      	push	{r7, lr}
 8006d16:	af00      	add	r7, sp, #0
    if (safety_state == SAFETY_NORMAL) {
 8006d18:	4b0d      	ldr	r3, [pc, #52]	@ (8006d50 <trigger_software_emergency+0x3c>)
 8006d1a:	781b      	ldrb	r3, [r3, #0]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d115      	bne.n	8006d4c <trigger_software_emergency+0x38>
        safety_state = SAFETY_SOFTWARE_EMERGENCY;
 8006d20:	4b0b      	ldr	r3, [pc, #44]	@ (8006d50 <trigger_software_emergency+0x3c>)
 8006d22:	2201      	movs	r2, #1
 8006d24:	701a      	strb	r2, [r3, #0]
        emergency_stop_all_motors();
 8006d26:	f000 f87f 	bl	8006e28 <emergency_stop_all_motors>
        safety_toggle_timer = 0;
 8006d2a:	4b0a      	ldr	r3, [pc, #40]	@ (8006d54 <trigger_software_emergency+0x40>)
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	601a      	str	r2, [r3, #0]
        pilot_light_state = false;
 8006d30:	4b09      	ldr	r3, [pc, #36]	@ (8006d58 <trigger_software_emergency+0x44>)
 8006d32:	2200      	movs	r2, #0
 8006d34:	701a      	strb	r2, [r3, #0]

        // Stop any active motion sequences
        motion_sequence_state = MOTION_IDLE;
 8006d36:	4b09      	ldr	r3, [pc, #36]	@ (8006d5c <trigger_software_emergency+0x48>)
 8006d38:	2200      	movs	r2, #0
 8006d3a:	701a      	strb	r2, [r3, #0]

        // Reset trajectory flags
        prismatic_axis.trajectory_active = false;
 8006d3c:	4b08      	ldr	r3, [pc, #32]	@ (8006d60 <trigger_software_emergency+0x4c>)
 8006d3e:	2200      	movs	r2, #0
 8006d40:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        revolute_axis.trajectory_active = false;
 8006d44:	4b07      	ldr	r3, [pc, #28]	@ (8006d64 <trigger_software_emergency+0x50>)
 8006d46:	2200      	movs	r2, #0
 8006d48:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }
}
 8006d4c:	bf00      	nop
 8006d4e:	bd80      	pop	{r7, pc}
 8006d50:	20000368 	.word	0x20000368
 8006d54:	2000036c 	.word	0x2000036c
 8006d58:	20000370 	.word	0x20000370
 8006d5c:	200002f8 	.word	0x200002f8
 8006d60:	20000278 	.word	0x20000278
 8006d64:	200002b8 	.word	0x200002b8

08006d68 <trigger_hardware_emergency>:

void trigger_hardware_emergency(void) {
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	af00      	add	r7, sp, #0
    safety_state = SAFETY_HARDWARE_EMERGENCY;
 8006d6c:	4b10      	ldr	r3, [pc, #64]	@ (8006db0 <trigger_hardware_emergency+0x48>)
 8006d6e:	2202      	movs	r2, #2
 8006d70:	701a      	strb	r2, [r3, #0]
    hardware_emergency_triggered = true;
 8006d72:	4b10      	ldr	r3, [pc, #64]	@ (8006db4 <trigger_hardware_emergency+0x4c>)
 8006d74:	2201      	movs	r2, #1
 8006d76:	701a      	strb	r2, [r3, #0]
    emergency_stop_all_motors();
 8006d78:	f000 f856 	bl	8006e28 <emergency_stop_all_motors>
    safety_toggle_timer = 0;
 8006d7c:	4b0e      	ldr	r3, [pc, #56]	@ (8006db8 <trigger_hardware_emergency+0x50>)
 8006d7e:	2200      	movs	r2, #0
 8006d80:	601a      	str	r2, [r3, #0]
    pilot_light_state = false;
 8006d82:	4b0e      	ldr	r3, [pc, #56]	@ (8006dbc <trigger_hardware_emergency+0x54>)
 8006d84:	2200      	movs	r2, #0
 8006d86:	701a      	strb	r2, [r3, #0]

    // Stop homing if active
    homing_active = false;
 8006d88:	4b0d      	ldr	r3, [pc, #52]	@ (8006dc0 <trigger_hardware_emergency+0x58>)
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	701a      	strb	r2, [r3, #0]
    homing_state = HOMING_IDLE;
 8006d8e:	4b0d      	ldr	r3, [pc, #52]	@ (8006dc4 <trigger_hardware_emergency+0x5c>)
 8006d90:	2200      	movs	r2, #0
 8006d92:	701a      	strb	r2, [r3, #0]

    // Stop any active motion sequences
    motion_sequence_state = MOTION_IDLE;
 8006d94:	4b0c      	ldr	r3, [pc, #48]	@ (8006dc8 <trigger_hardware_emergency+0x60>)
 8006d96:	2200      	movs	r2, #0
 8006d98:	701a      	strb	r2, [r3, #0]

    // Reset trajectory flags
    prismatic_axis.trajectory_active = false;
 8006d9a:	4b0c      	ldr	r3, [pc, #48]	@ (8006dcc <trigger_hardware_emergency+0x64>)
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    revolute_axis.trajectory_active = false;
 8006da2:	4b0b      	ldr	r3, [pc, #44]	@ (8006dd0 <trigger_hardware_emergency+0x68>)
 8006da4:	2200      	movs	r2, #0
 8006da6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
}
 8006daa:	bf00      	nop
 8006dac:	bd80      	pop	{r7, pc}
 8006dae:	bf00      	nop
 8006db0:	20000368 	.word	0x20000368
 8006db4:	20000371 	.word	0x20000371
 8006db8:	2000036c 	.word	0x2000036c
 8006dbc:	20000370 	.word	0x20000370
 8006dc0:	20000367 	.word	0x20000367
 8006dc4:	20000366 	.word	0x20000366
 8006dc8:	200002f8 	.word	0x200002f8
 8006dcc:	20000278 	.word	0x20000278
 8006dd0:	200002b8 	.word	0x200002b8

08006dd4 <clear_emergency_state>:

void clear_emergency_state(void) {
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	af00      	add	r7, sp, #0
    safety_state = SAFETY_NORMAL;
 8006dd8:	4b0d      	ldr	r3, [pc, #52]	@ (8006e10 <clear_emergency_state+0x3c>)
 8006dda:	2200      	movs	r2, #0
 8006ddc:	701a      	strb	r2, [r3, #0]
    hardware_emergency_triggered = false;
 8006dde:	4b0d      	ldr	r3, [pc, #52]	@ (8006e14 <clear_emergency_state+0x40>)
 8006de0:	2200      	movs	r2, #0
 8006de2:	701a      	strb	r2, [r3, #0]
    safety_toggle_timer = 0;
 8006de4:	4b0c      	ldr	r3, [pc, #48]	@ (8006e18 <clear_emergency_state+0x44>)
 8006de6:	2200      	movs	r2, #0
 8006de8:	601a      	str	r2, [r3, #0]
    pilot_light_state = false;
 8006dea:	4b0c      	ldr	r3, [pc, #48]	@ (8006e1c <clear_emergency_state+0x48>)
 8006dec:	2200      	movs	r2, #0
 8006dee:	701a      	strb	r2, [r3, #0]

    // Turn off pilot light
    HAL_GPIO_WritePin(PILOT_GPIO_Port, PILOT_Pin, GPIO_PIN_RESET);
 8006df0:	2200      	movs	r2, #0
 8006df2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006df6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006dfa:	f004 fa23 	bl	800b244 <HAL_GPIO_WritePin>

    // Reset photo sensor flags
    up_photo = false;
 8006dfe:	4b08      	ldr	r3, [pc, #32]	@ (8006e20 <clear_emergency_state+0x4c>)
 8006e00:	2200      	movs	r2, #0
 8006e02:	701a      	strb	r2, [r3, #0]
    low_photo = false;
 8006e04:	4b07      	ldr	r3, [pc, #28]	@ (8006e24 <clear_emergency_state+0x50>)
 8006e06:	2200      	movs	r2, #0
 8006e08:	701a      	strb	r2, [r3, #0]
}
 8006e0a:	bf00      	nop
 8006e0c:	bd80      	pop	{r7, pc}
 8006e0e:	bf00      	nop
 8006e10:	20000368 	.word	0x20000368
 8006e14:	20000371 	.word	0x20000371
 8006e18:	2000036c 	.word	0x2000036c
 8006e1c:	20000370 	.word	0x20000370
 8006e20:	20000364 	.word	0x20000364
 8006e24:	20000365 	.word	0x20000365

08006e28 <emergency_stop_all_motors>:

void emergency_stop_all_motors(void) {
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	af00      	add	r7, sp, #0
    // Stop all motors immediately
    MDXX_set_range(&prismatic_motor, 2000, 0);
 8006e2c:	eddf 0a15 	vldr	s1, [pc, #84]	@ 8006e84 <emergency_stop_all_motors+0x5c>
 8006e30:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 8006e88 <emergency_stop_all_motors+0x60>
 8006e34:	4815      	ldr	r0, [pc, #84]	@ (8006e8c <emergency_stop_all_motors+0x64>)
 8006e36:	f7fa fac7 	bl	80013c8 <MDXX_set_range>
    MDXX_set_range(&revolute_motor, 2000, 0);
 8006e3a:	eddf 0a12 	vldr	s1, [pc, #72]	@ 8006e84 <emergency_stop_all_motors+0x5c>
 8006e3e:	ed9f 0a12 	vldr	s0, [pc, #72]	@ 8006e88 <emergency_stop_all_motors+0x60>
 8006e42:	4813      	ldr	r0, [pc, #76]	@ (8006e90 <emergency_stop_all_motors+0x68>)
 8006e44:	f7fa fac0 	bl	80013c8 <MDXX_set_range>

    // Reset control commands
    prismatic_axis.command_pos = 0.0f;
 8006e48:	4b12      	ldr	r3, [pc, #72]	@ (8006e94 <emergency_stop_all_motors+0x6c>)
 8006e4a:	f04f 0200 	mov.w	r2, #0
 8006e4e:	625a      	str	r2, [r3, #36]	@ 0x24
    revolute_axis.command_pos = 0.0f;
 8006e50:	4b11      	ldr	r3, [pc, #68]	@ (8006e98 <emergency_stop_all_motors+0x70>)
 8006e52:	f04f 0200 	mov.w	r2, #0
 8006e56:	625a      	str	r2, [r3, #36]	@ 0x24
    prismatic_axis.command_vel = 0.0f;
 8006e58:	4b0e      	ldr	r3, [pc, #56]	@ (8006e94 <emergency_stop_all_motors+0x6c>)
 8006e5a:	f04f 0200 	mov.w	r2, #0
 8006e5e:	629a      	str	r2, [r3, #40]	@ 0x28
    revolute_axis.command_vel = 0.0f;
 8006e60:	4b0d      	ldr	r3, [pc, #52]	@ (8006e98 <emergency_stop_all_motors+0x70>)
 8006e62:	f04f 0200 	mov.w	r2, #0
 8006e66:	629a      	str	r2, [r3, #40]	@ 0x28

    // Reset PID controllers
    PID_CONTROLLER_Reset(&prismatic_position_pid);
 8006e68:	480c      	ldr	r0, [pc, #48]	@ (8006e9c <emergency_stop_all_motors+0x74>)
 8006e6a:	f7fa fa67 	bl	800133c <PID_CONTROLLER_Reset>
    PID_CONTROLLER_Reset(&prismatic_velocity_pid);
 8006e6e:	480c      	ldr	r0, [pc, #48]	@ (8006ea0 <emergency_stop_all_motors+0x78>)
 8006e70:	f7fa fa64 	bl	800133c <PID_CONTROLLER_Reset>
    PID_CONTROLLER_Reset(&revolute_position_pid);
 8006e74:	480b      	ldr	r0, [pc, #44]	@ (8006ea4 <emergency_stop_all_motors+0x7c>)
 8006e76:	f7fa fa61 	bl	800133c <PID_CONTROLLER_Reset>
    PID_CONTROLLER_Reset(&revolute_velocity_pid);
 8006e7a:	480b      	ldr	r0, [pc, #44]	@ (8006ea8 <emergency_stop_all_motors+0x80>)
 8006e7c:	f7fa fa5e 	bl	800133c <PID_CONTROLLER_Reset>
}
 8006e80:	bf00      	nop
 8006e82:	bd80      	pop	{r7, pc}
 8006e84:	00000000 	.word	0x00000000
 8006e88:	44fa0000 	.word	0x44fa0000
 8006e8c:	200003a4 	.word	0x200003a4
 8006e90:	200003f0 	.word	0x200003f0
 8006e94:	20000278 	.word	0x20000278
 8006e98:	200002b8 	.word	0x200002b8
 8006e9c:	200004f4 	.word	0x200004f4
 8006ea0:	2000051c 	.word	0x2000051c
 8006ea4:	20000544 	.word	0x20000544
 8006ea8:	2000056c 	.word	0x2000056c

08006eac <update_safety_system>:

// =================== MODIFIED SAFETY SYSTEM UPDATE ===================

void update_safety_system(void) {
 8006eac:	b580      	push	{r7, lr}
 8006eae:	af00      	add	r7, sp, #0
    // SOFTWARE emergency - toggle pilot light at 1Hz
    if (safety_state == SAFETY_SOFTWARE_EMERGENCY) {
 8006eb0:	4b3a      	ldr	r3, [pc, #232]	@ (8006f9c <update_safety_system+0xf0>)
 8006eb2:	781b      	ldrb	r3, [r3, #0]
 8006eb4:	2b01      	cmp	r3, #1
 8006eb6:	d122      	bne.n	8006efe <update_safety_system+0x52>
        safety_toggle_timer++;
 8006eb8:	4b39      	ldr	r3, [pc, #228]	@ (8006fa0 <update_safety_system+0xf4>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	3301      	adds	r3, #1
 8006ebe:	4a38      	ldr	r2, [pc, #224]	@ (8006fa0 <update_safety_system+0xf4>)
 8006ec0:	6013      	str	r3, [r2, #0]
        if (safety_toggle_timer >= SAFETY_TOGGLE_PERIOD) {
 8006ec2:	4b37      	ldr	r3, [pc, #220]	@ (8006fa0 <update_safety_system+0xf4>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006eca:	d318      	bcc.n	8006efe <update_safety_system+0x52>
            HAL_GPIO_TogglePin(PILOT_GPIO_Port, PILOT_Pin);
 8006ecc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006ed0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006ed4:	f004 f9ce 	bl	800b274 <HAL_GPIO_TogglePin>
            pilot_light_state = !pilot_light_state;
 8006ed8:	4b32      	ldr	r3, [pc, #200]	@ (8006fa4 <update_safety_system+0xf8>)
 8006eda:	781b      	ldrb	r3, [r3, #0]
 8006edc:	b2db      	uxtb	r3, r3
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	bf14      	ite	ne
 8006ee2:	2301      	movne	r3, #1
 8006ee4:	2300      	moveq	r3, #0
 8006ee6:	b2db      	uxtb	r3, r3
 8006ee8:	f083 0301 	eor.w	r3, r3, #1
 8006eec:	b2db      	uxtb	r3, r3
 8006eee:	f003 0301 	and.w	r3, r3, #1
 8006ef2:	b2da      	uxtb	r2, r3
 8006ef4:	4b2b      	ldr	r3, [pc, #172]	@ (8006fa4 <update_safety_system+0xf8>)
 8006ef6:	701a      	strb	r2, [r3, #0]
            safety_toggle_timer = 0;
 8006ef8:	4b29      	ldr	r3, [pc, #164]	@ (8006fa0 <update_safety_system+0xf4>)
 8006efa:	2200      	movs	r2, #0
 8006efc:	601a      	str	r2, [r3, #0]
        }
    }

    // =================== MODIFIED HARDWARE EMERGENCY BEHAVIOR ===================
    if (safety_state == SAFETY_HARDWARE_EMERGENCY) {
 8006efe:	4b27      	ldr	r3, [pc, #156]	@ (8006f9c <update_safety_system+0xf0>)
 8006f00:	781b      	ldrb	r3, [r3, #0]
 8006f02:	2b02      	cmp	r3, #2
 8006f04:	d137      	bne.n	8006f76 <update_safety_system+0xca>
        // Check if emergency button is released
        if (HAL_GPIO_ReadPin(EMER_GPIO_Port, EMER_Pin) == GPIO_PIN_SET) {
 8006f06:	2110      	movs	r1, #16
 8006f08:	4827      	ldr	r0, [pc, #156]	@ (8006fa8 <update_safety_system+0xfc>)
 8006f0a:	f004 f983 	bl	800b214 <HAL_GPIO_ReadPin>
 8006f0e:	4603      	mov	r3, r0
 8006f10:	2b01      	cmp	r3, #1
 8006f12:	d123      	bne.n	8006f5c <update_safety_system+0xb0>
            // Emergency button not pressed (released) - toggle pilot light to indicate B4 needed
            safety_toggle_timer++;
 8006f14:	4b22      	ldr	r3, [pc, #136]	@ (8006fa0 <update_safety_system+0xf4>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	3301      	adds	r3, #1
 8006f1a:	4a21      	ldr	r2, [pc, #132]	@ (8006fa0 <update_safety_system+0xf4>)
 8006f1c:	6013      	str	r3, [r2, #0]
            if (safety_toggle_timer >= SAFETY_TOGGLE_PERIOD) {
 8006f1e:	4b20      	ldr	r3, [pc, #128]	@ (8006fa0 <update_safety_system+0xf4>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006f26:	d326      	bcc.n	8006f76 <update_safety_system+0xca>
                HAL_GPIO_TogglePin(PILOT_GPIO_Port, PILOT_Pin);
 8006f28:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006f2c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006f30:	f004 f9a0 	bl	800b274 <HAL_GPIO_TogglePin>
                pilot_light_state = !pilot_light_state;
 8006f34:	4b1b      	ldr	r3, [pc, #108]	@ (8006fa4 <update_safety_system+0xf8>)
 8006f36:	781b      	ldrb	r3, [r3, #0]
 8006f38:	b2db      	uxtb	r3, r3
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	bf14      	ite	ne
 8006f3e:	2301      	movne	r3, #1
 8006f40:	2300      	moveq	r3, #0
 8006f42:	b2db      	uxtb	r3, r3
 8006f44:	f083 0301 	eor.w	r3, r3, #1
 8006f48:	b2db      	uxtb	r3, r3
 8006f4a:	f003 0301 	and.w	r3, r3, #1
 8006f4e:	b2da      	uxtb	r2, r3
 8006f50:	4b14      	ldr	r3, [pc, #80]	@ (8006fa4 <update_safety_system+0xf8>)
 8006f52:	701a      	strb	r2, [r3, #0]
                safety_toggle_timer = 0;
 8006f54:	4b12      	ldr	r3, [pc, #72]	@ (8006fa0 <update_safety_system+0xf4>)
 8006f56:	2200      	movs	r2, #0
 8006f58:	601a      	str	r2, [r3, #0]
 8006f5a:	e00c      	b.n	8006f76 <update_safety_system+0xca>
            }
        } else {
            // Emergency button still pressed - keep pilot light off
            HAL_GPIO_WritePin(PILOT_GPIO_Port, PILOT_Pin, GPIO_PIN_RESET);
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006f62:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006f66:	f004 f96d 	bl	800b244 <HAL_GPIO_WritePin>
            pilot_light_state = false;
 8006f6a:	4b0e      	ldr	r3, [pc, #56]	@ (8006fa4 <update_safety_system+0xf8>)
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	701a      	strb	r2, [r3, #0]
            safety_toggle_timer = 0; // Reset timer while button pressed
 8006f70:	4b0b      	ldr	r3, [pc, #44]	@ (8006fa0 <update_safety_system+0xf4>)
 8006f72:	2200      	movs	r2, #0
 8006f74:	601a      	str	r2, [r3, #0]
        }
    }

    // NORMAL state - ensure pilot light is off
    if (safety_state == SAFETY_NORMAL) {
 8006f76:	4b09      	ldr	r3, [pc, #36]	@ (8006f9c <update_safety_system+0xf0>)
 8006f78:	781b      	ldrb	r3, [r3, #0]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d10c      	bne.n	8006f98 <update_safety_system+0xec>
        HAL_GPIO_WritePin(PILOT_GPIO_Port, PILOT_Pin, GPIO_PIN_RESET);
 8006f7e:	2200      	movs	r2, #0
 8006f80:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006f84:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006f88:	f004 f95c 	bl	800b244 <HAL_GPIO_WritePin>
        pilot_light_state = false;
 8006f8c:	4b05      	ldr	r3, [pc, #20]	@ (8006fa4 <update_safety_system+0xf8>)
 8006f8e:	2200      	movs	r2, #0
 8006f90:	701a      	strb	r2, [r3, #0]
        safety_toggle_timer = 0;
 8006f92:	4b03      	ldr	r3, [pc, #12]	@ (8006fa0 <update_safety_system+0xf4>)
 8006f94:	2200      	movs	r2, #0
 8006f96:	601a      	str	r2, [r3, #0]
    }
}
 8006f98:	bf00      	nop
 8006f9a:	bd80      	pop	{r7, pc}
 8006f9c:	20000368 	.word	0x20000368
 8006fa0:	2000036c 	.word	0x2000036c
 8006fa4:	20000370 	.word	0x20000370
 8006fa8:	48000400 	.word	0x48000400

08006fac <is_emergency_active>:

bool is_emergency_active(void) {
 8006fac:	b480      	push	{r7}
 8006fae:	af00      	add	r7, sp, #0
    return (safety_state != SAFETY_NORMAL);
 8006fb0:	4b05      	ldr	r3, [pc, #20]	@ (8006fc8 <is_emergency_active+0x1c>)
 8006fb2:	781b      	ldrb	r3, [r3, #0]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	bf14      	ite	ne
 8006fb8:	2301      	movne	r3, #1
 8006fba:	2300      	moveq	r3, #0
 8006fbc:	b2db      	uxtb	r3, r3
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc6:	4770      	bx	lr
 8006fc8:	20000368 	.word	0x20000368

08006fcc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b082      	sub	sp, #8
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == PROX_Pin) {
 8006fd6:	88fb      	ldrh	r3, [r7, #6]
 8006fd8:	2b40      	cmp	r3, #64	@ 0x40
 8006fda:	d105      	bne.n	8006fe8 <HAL_GPIO_EXTI_Callback+0x1c>
        prox_count++;
 8006fdc:	4b49      	ldr	r3, [pc, #292]	@ (8007104 <HAL_GPIO_EXTI_Callback+0x138>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	3301      	adds	r3, #1
 8006fe2:	4a48      	ldr	r2, [pc, #288]	@ (8007104 <HAL_GPIO_EXTI_Callback+0x138>)
 8006fe4:	6013      	str	r3, [r2, #0]
        return; // Exit after handling prox
 8006fe6:	e08a      	b.n	80070fe <HAL_GPIO_EXTI_Callback+0x132>
    }

    if (GPIO_Pin == UPPER_PHOTO_Pin) {
 8006fe8:	88fb      	ldrh	r3, [r7, #6]
 8006fea:	2b01      	cmp	r3, #1
 8006fec:	d103      	bne.n	8006ff6 <HAL_GPIO_EXTI_Callback+0x2a>
        up_photo = true;
 8006fee:	4b46      	ldr	r3, [pc, #280]	@ (8007108 <HAL_GPIO_EXTI_Callback+0x13c>)
 8006ff0:	2201      	movs	r2, #1
 8006ff2:	701a      	strb	r2, [r3, #0]
        return; // Exit after handling photo sensor
 8006ff4:	e083      	b.n	80070fe <HAL_GPIO_EXTI_Callback+0x132>
    }

    if (GPIO_Pin == LOWER_PHOTO_Pin) {
 8006ff6:	88fb      	ldrh	r3, [r7, #6]
 8006ff8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ffc:	d103      	bne.n	8007006 <HAL_GPIO_EXTI_Callback+0x3a>
        low_photo = true;
 8006ffe:	4b43      	ldr	r3, [pc, #268]	@ (800710c <HAL_GPIO_EXTI_Callback+0x140>)
 8007000:	2201      	movs	r2, #1
 8007002:	701a      	strb	r2, [r3, #0]
        return; // Exit after handling photo sensor
 8007004:	e07b      	b.n	80070fe <HAL_GPIO_EXTI_Callback+0x132>
    }

    if (GPIO_Pin == EMER_Pin) {
 8007006:	88fb      	ldrh	r3, [r7, #6]
 8007008:	2b10      	cmp	r3, #16
 800700a:	d109      	bne.n	8007020 <HAL_GPIO_EXTI_Callback+0x54>
        // Hardware emergency button pressed (value 0 = pressed, 1 = not pressed)
        if (HAL_GPIO_ReadPin(EMER_GPIO_Port, EMER_Pin) == GPIO_PIN_RESET) {
 800700c:	2110      	movs	r1, #16
 800700e:	4840      	ldr	r0, [pc, #256]	@ (8007110 <HAL_GPIO_EXTI_Callback+0x144>)
 8007010:	f004 f900 	bl	800b214 <HAL_GPIO_ReadPin>
 8007014:	4603      	mov	r3, r0
 8007016:	2b00      	cmp	r3, #0
 8007018:	d16a      	bne.n	80070f0 <HAL_GPIO_EXTI_Callback+0x124>
            trigger_hardware_emergency();
 800701a:	f7ff fea5 	bl	8006d68 <trigger_hardware_emergency>
        }
        return; // Exit after handling emergency
 800701e:	e067      	b.n	80070f0 <HAL_GPIO_EXTI_Callback+0x124>
    }

    // =================== BUTTON HANDLING ===================

    // B1 button - normal trajectory (only if not emergency and not homing)
    if (GPIO_Pin == J1_Pin) {
 8007020:	88fb      	ldrh	r3, [r7, #6]
 8007022:	2b80      	cmp	r3, #128	@ 0x80
 8007024:	d137      	bne.n	8007096 <HAL_GPIO_EXTI_Callback+0xca>
        // Only proceed if system is ready
        if (!is_emergency_active() && !homing_active &&
 8007026:	f7ff ffc1 	bl	8006fac <is_emergency_active>
 800702a:	4603      	mov	r3, r0
 800702c:	f083 0301 	eor.w	r3, r3, #1
 8007030:	b2db      	uxtb	r3, r3
 8007032:	2b00      	cmp	r3, #0
 8007034:	d05e      	beq.n	80070f4 <HAL_GPIO_EXTI_Callback+0x128>
 8007036:	4b37      	ldr	r3, [pc, #220]	@ (8007114 <HAL_GPIO_EXTI_Callback+0x148>)
 8007038:	781b      	ldrb	r3, [r3, #0]
 800703a:	f083 0301 	eor.w	r3, r3, #1
 800703e:	b2db      	uxtb	r3, r3
 8007040:	2b00      	cmp	r3, #0
 8007042:	d057      	beq.n	80070f4 <HAL_GPIO_EXTI_Callback+0x128>
            motion_sequence_state == MOTION_IDLE) {
 8007044:	4b34      	ldr	r3, [pc, #208]	@ (8007118 <HAL_GPIO_EXTI_Callback+0x14c>)
 8007046:	781b      	ldrb	r3, [r3, #0]
        if (!is_emergency_active() && !homing_active &&
 8007048:	2b00      	cmp	r3, #0
 800704a:	d153      	bne.n	80070f4 <HAL_GPIO_EXTI_Callback+0x128>

            start_combined_trajectory(
 800704c:	4b33      	ldr	r3, [pc, #204]	@ (800711c <HAL_GPIO_EXTI_Callback+0x150>)
 800704e:	781b      	ldrb	r3, [r3, #0]
                sequence_pris_points[trajectory_sequence_index],
 8007050:	4a33      	ldr	r2, [pc, #204]	@ (8007120 <HAL_GPIO_EXTI_Callback+0x154>)
 8007052:	009b      	lsls	r3, r3, #2
 8007054:	4413      	add	r3, r2
 8007056:	edd3 7a00 	vldr	s15, [r3]
            start_combined_trajectory(
 800705a:	4b30      	ldr	r3, [pc, #192]	@ (800711c <HAL_GPIO_EXTI_Callback+0x150>)
 800705c:	781b      	ldrb	r3, [r3, #0]
                sequence_rev_points[trajectory_sequence_index]);
 800705e:	4a31      	ldr	r2, [pc, #196]	@ (8007124 <HAL_GPIO_EXTI_Callback+0x158>)
 8007060:	009b      	lsls	r3, r3, #2
 8007062:	4413      	add	r3, r2
 8007064:	ed93 7a00 	vldr	s14, [r3]
            start_combined_trajectory(
 8007068:	eef0 0a47 	vmov.f32	s1, s14
 800706c:	eeb0 0a67 	vmov.f32	s0, s15
 8007070:	f7ff f8f4 	bl	800625c <start_combined_trajectory>
            trajectory_sequence_index = (trajectory_sequence_index + 1) % SEQUENCE_MAX_POINTS;
 8007074:	4b29      	ldr	r3, [pc, #164]	@ (800711c <HAL_GPIO_EXTI_Callback+0x150>)
 8007076:	781b      	ldrb	r3, [r3, #0]
 8007078:	1c5a      	adds	r2, r3, #1
 800707a:	4b2b      	ldr	r3, [pc, #172]	@ (8007128 <HAL_GPIO_EXTI_Callback+0x15c>)
 800707c:	fb83 3102 	smull	r3, r1, r3, r2
 8007080:	17d3      	asrs	r3, r2, #31
 8007082:	1ac9      	subs	r1, r1, r3
 8007084:	460b      	mov	r3, r1
 8007086:	005b      	lsls	r3, r3, #1
 8007088:	440b      	add	r3, r1
 800708a:	005b      	lsls	r3, r3, #1
 800708c:	1ad1      	subs	r1, r2, r3
 800708e:	b2ca      	uxtb	r2, r1
 8007090:	4b22      	ldr	r3, [pc, #136]	@ (800711c <HAL_GPIO_EXTI_Callback+0x150>)
 8007092:	701a      	strb	r2, [r3, #0]
        }
        return; // Exit after handling B1
 8007094:	e02e      	b.n	80070f4 <HAL_GPIO_EXTI_Callback+0x128>
    }

    // B3 button - manual homing (only if not emergency)
    if (GPIO_Pin == J3_Pin) {
 8007096:	88fb      	ldrh	r3, [r7, #6]
 8007098:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800709c:	d116      	bne.n	80070cc <HAL_GPIO_EXTI_Callback+0x100>
        // Only proceed if not in emergency and not already homing
        if (!is_emergency_active() && !homing_active &&
 800709e:	f7ff ff85 	bl	8006fac <is_emergency_active>
 80070a2:	4603      	mov	r3, r0
 80070a4:	f083 0301 	eor.w	r3, r3, #1
 80070a8:	b2db      	uxtb	r3, r3
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d024      	beq.n	80070f8 <HAL_GPIO_EXTI_Callback+0x12c>
 80070ae:	4b19      	ldr	r3, [pc, #100]	@ (8007114 <HAL_GPIO_EXTI_Callback+0x148>)
 80070b0:	781b      	ldrb	r3, [r3, #0]
 80070b2:	f083 0301 	eor.w	r3, r3, #1
 80070b6:	b2db      	uxtb	r3, r3
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d01d      	beq.n	80070f8 <HAL_GPIO_EXTI_Callback+0x12c>
            motion_sequence_state == MOTION_IDLE) {
 80070bc:	4b16      	ldr	r3, [pc, #88]	@ (8007118 <HAL_GPIO_EXTI_Callback+0x14c>)
 80070be:	781b      	ldrb	r3, [r3, #0]
        if (!is_emergency_active() && !homing_active &&
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d119      	bne.n	80070f8 <HAL_GPIO_EXTI_Callback+0x12c>
            start_homing_sequence(false);
 80070c4:	2000      	movs	r0, #0
 80070c6:	f7fe f8fb 	bl	80052c0 <start_homing_sequence>
        }
        return; // Exit after handling B3
 80070ca:	e015      	b.n	80070f8 <HAL_GPIO_EXTI_Callback+0x12c>
    }

    // B4 button - emergency recovery (works in any emergency state)
    if (GPIO_Pin == J4_Pin) {
 80070cc:	88fb      	ldrh	r3, [r7, #6]
 80070ce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80070d2:	d114      	bne.n	80070fe <HAL_GPIO_EXTI_Callback+0x132>
        // Only proceed if in emergency state
        if (is_emergency_active()) {
 80070d4:	f7ff ff6a 	bl	8006fac <is_emergency_active>
 80070d8:	4603      	mov	r3, r0
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d00e      	beq.n	80070fc <HAL_GPIO_EXTI_Callback+0x130>
            // Clear emergency and start homing like first startup
            clear_emergency_state();
 80070de:	f7ff fe79 	bl	8006dd4 <clear_emergency_state>
            first_startup = true;  // Force full homing sequence
 80070e2:	4b12      	ldr	r3, [pc, #72]	@ (800712c <HAL_GPIO_EXTI_Callback+0x160>)
 80070e4:	2201      	movs	r2, #1
 80070e6:	701a      	strb	r2, [r3, #0]
            start_homing_sequence(true);
 80070e8:	2001      	movs	r0, #1
 80070ea:	f7fe f8e9 	bl	80052c0 <start_homing_sequence>
        }
        return; // Exit after handling B4
 80070ee:	e005      	b.n	80070fc <HAL_GPIO_EXTI_Callback+0x130>
        return; // Exit after handling emergency
 80070f0:	bf00      	nop
 80070f2:	e004      	b.n	80070fe <HAL_GPIO_EXTI_Callback+0x132>
        return; // Exit after handling B1
 80070f4:	bf00      	nop
 80070f6:	e002      	b.n	80070fe <HAL_GPIO_EXTI_Callback+0x132>
        return; // Exit after handling B3
 80070f8:	bf00      	nop
 80070fa:	e000      	b.n	80070fe <HAL_GPIO_EXTI_Callback+0x132>
        return; // Exit after handling B4
 80070fc:	bf00      	nop
    }
}
 80070fe:	3708      	adds	r7, #8
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}
 8007104:	20000360 	.word	0x20000360
 8007108:	20000364 	.word	0x20000364
 800710c:	20000365 	.word	0x20000365
 8007110:	48000400 	.word	0x48000400
 8007114:	20000367 	.word	0x20000367
 8007118:	200002f8 	.word	0x200002f8
 800711c:	2000034c 	.word	0x2000034c
 8007120:	08012bd0 	.word	0x08012bd0
 8007124:	08012be8 	.word	0x08012be8
 8007128:	2aaaaaab 	.word	0x2aaaaaab
 800712c:	2000012f 	.word	0x2000012f

08007130 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8007130:	b580      	push	{r7, lr}
 8007132:	b082      	sub	sp, #8
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
	if (htim == &htim2) {
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	4a48      	ldr	r2, [pc, #288]	@ (800725c <HAL_TIM_PeriodElapsedCallback+0x12c>)
 800713c:	4293      	cmp	r3, r2
 800713e:	f040 8089 	bne.w	8007254 <HAL_TIM_PeriodElapsedCallback+0x124>
		// Update sensor readings
		plotter_update_sensors();
 8007142:	f000 fc81 	bl	8007a48 <plotter_update_sensors>

		QEI_get_diff_count(&prismatic_encoder);
 8007146:	4846      	ldr	r0, [pc, #280]	@ (8007260 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8007148:	f7fc fbe6 	bl	8003918 <QEI_get_diff_count>
		QEI_compute_data(&prismatic_encoder);
 800714c:	4844      	ldr	r0, [pc, #272]	@ (8007260 <HAL_TIM_PeriodElapsedCallback+0x130>)
 800714e:	f7fc fccf 	bl	8003af0 <QEI_compute_data>
		QEI_get_diff_count(&revolute_encoder);
 8007152:	4844      	ldr	r0, [pc, #272]	@ (8007264 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8007154:	f7fc fbe0 	bl	8003918 <QEI_get_diff_count>
		QEI_compute_data(&revolute_encoder);
 8007158:	4842      	ldr	r0, [pc, #264]	@ (8007264 <HAL_TIM_PeriodElapsedCallback+0x134>)
 800715a:	f7fc fcc9 	bl	8003af0 <QEI_compute_data>

		// Calculate control signals for revolute axis
		revolute_axis.input_voltage = mapf(revolute_axis.command_pos, -65535.0f,
 800715e:	4b42      	ldr	r3, [pc, #264]	@ (8007268 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8007160:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8007164:	eeb2 2a08 	vmov.f32	s4, #40	@ 0x41400000  12.0
 8007168:	eefa 1a08 	vmov.f32	s3, #168	@ 0xc1400000 -12.0
 800716c:	ed9f 1a3f 	vldr	s2, [pc, #252]	@ 800726c <HAL_TIM_PeriodElapsedCallback+0x13c>
 8007170:	eddf 0a3f 	vldr	s1, [pc, #252]	@ 8007270 <HAL_TIM_PeriodElapsedCallback+0x140>
 8007174:	eeb0 0a67 	vmov.f32	s0, s15
 8007178:	f7fa fdfe 	bl	8001d78 <mapf>
 800717c:	eef0 7a40 	vmov.f32	s15, s0
 8007180:	4b39      	ldr	r3, [pc, #228]	@ (8007268 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8007182:	edc3 7a08 	vstr	s15, [r3, #32]
				65535.0f, -12.0f, 12.0f);

		revolute_axis.kalman_velocity = SteadyStateKalmanFilter(
 8007186:	4b38      	ldr	r3, [pc, #224]	@ (8007268 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8007188:	edd3 7a08 	vldr	s15, [r3, #32]
 800718c:	4b35      	ldr	r3, [pc, #212]	@ (8007264 <HAL_TIM_PeriodElapsedCallback+0x134>)
 800718e:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8007192:	eef0 0a47 	vmov.f32	s1, s14
 8007196:	eeb0 0a67 	vmov.f32	s0, s15
 800719a:	4836      	ldr	r0, [pc, #216]	@ (8007274 <HAL_TIM_PeriodElapsedCallback+0x144>)
 800719c:	f7fd fc86 	bl	8004aac <SteadyStateKalmanFilter>
 80071a0:	eef0 7a40 	vmov.f32	s15, s0
 80071a4:	4b30      	ldr	r3, [pc, #192]	@ (8007268 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80071a6:	edc3 7a07 	vstr	s15, [r3, #28]
				&revolute_kalman, revolute_axis.input_voltage,
				revolute_encoder.rads);

		if (isnan(revolute_axis.kalman_velocity)) {
 80071aa:	4b2f      	ldr	r3, [pc, #188]	@ (8007268 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80071ac:	edd3 7a07 	vldr	s15, [r3, #28]
 80071b0:	eef4 7a67 	vcmp.f32	s15, s15
 80071b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071b8:	d703      	bvc.n	80071c2 <HAL_TIM_PeriodElapsedCallback+0x92>
			revolute_axis.kalman_velocity = 0.0f;
 80071ba:	4b2b      	ldr	r3, [pc, #172]	@ (8007268 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80071bc:	f04f 0200 	mov.w	r2, #0
 80071c0:	61da      	str	r2, [r3, #28]
		}

		// Calculate control signals for prismatic axis
		prismatic_axis.input_voltage = mapf(prismatic_axis.command_pos,
 80071c2:	4b2d      	ldr	r3, [pc, #180]	@ (8007278 <HAL_TIM_PeriodElapsedCallback+0x148>)
 80071c4:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80071c8:	eeb2 2a08 	vmov.f32	s4, #40	@ 0x41400000  12.0
 80071cc:	eefa 1a08 	vmov.f32	s3, #168	@ 0xc1400000 -12.0
 80071d0:	ed9f 1a26 	vldr	s2, [pc, #152]	@ 800726c <HAL_TIM_PeriodElapsedCallback+0x13c>
 80071d4:	eddf 0a26 	vldr	s1, [pc, #152]	@ 8007270 <HAL_TIM_PeriodElapsedCallback+0x140>
 80071d8:	eeb0 0a67 	vmov.f32	s0, s15
 80071dc:	f7fa fdcc 	bl	8001d78 <mapf>
 80071e0:	eef0 7a40 	vmov.f32	s15, s0
 80071e4:	4b24      	ldr	r3, [pc, #144]	@ (8007278 <HAL_TIM_PeriodElapsedCallback+0x148>)
 80071e6:	edc3 7a08 	vstr	s15, [r3, #32]
				-65535.0f, 65535.0f, -12.0f, 12.0f);

		prismatic_axis.kalman_velocity = MotorKalman_Estimate(&prismatic_kalman,
 80071ea:	4b23      	ldr	r3, [pc, #140]	@ (8007278 <HAL_TIM_PeriodElapsedCallback+0x148>)
 80071ec:	edd3 7a08 	vldr	s15, [r3, #32]
 80071f0:	4b1b      	ldr	r3, [pc, #108]	@ (8007260 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80071f2:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 80071f6:	eef0 0a47 	vmov.f32	s1, s14
 80071fa:	eeb0 0a67 	vmov.f32	s0, s15
 80071fe:	481f      	ldr	r0, [pc, #124]	@ (800727c <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8007200:	f7fb fdc6 	bl	8002d90 <MotorKalman_Estimate>
 8007204:	eeb0 7a40 	vmov.f32	s14, s0
				prismatic_axis.input_voltage, prismatic_encoder.rads)
				* Disturbance_Constant.prismatic_pulley_radius * 1000.0f;
 8007208:	4b1d      	ldr	r3, [pc, #116]	@ (8007280 <HAL_TIM_PeriodElapsedCallback+0x150>)
 800720a:	edd3 7a04 	vldr	s15, [r3, #16]
 800720e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007212:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8007284 <HAL_TIM_PeriodElapsedCallback+0x154>
 8007216:	ee67 7a87 	vmul.f32	s15, s15, s14
		prismatic_axis.kalman_velocity = MotorKalman_Estimate(&prismatic_kalman,
 800721a:	4b17      	ldr	r3, [pc, #92]	@ (8007278 <HAL_TIM_PeriodElapsedCallback+0x148>)
 800721c:	edc3 7a07 	vstr	s15, [r3, #28]

		if (isnan(prismatic_axis.kalman_velocity)) {
 8007220:	4b15      	ldr	r3, [pc, #84]	@ (8007278 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8007222:	edd3 7a07 	vldr	s15, [r3, #28]
 8007226:	eef4 7a67 	vcmp.f32	s15, s15
 800722a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800722e:	d703      	bvc.n	8007238 <HAL_TIM_PeriodElapsedCallback+0x108>
			prismatic_axis.kalman_velocity = 0.0f;
 8007230:	4b11      	ldr	r3, [pc, #68]	@ (8007278 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8007232:	f04f 0200 	mov.w	r2, #0
 8007236:	61da      	str	r2, [r3, #28]
		}

		// Update safety system
		update_safety_system();
 8007238:	f7ff fe38 	bl	8006eac <update_safety_system>

		// Check safety conditions if not in emergency
		if (!is_emergency_active()) {
 800723c:	f7ff feb6 	bl	8006fac <is_emergency_active>
 8007240:	4603      	mov	r3, r0
 8007242:	f083 0301 	eor.w	r3, r3, #1
 8007246:	b2db      	uxtb	r3, r3
 8007248:	2b00      	cmp	r3, #0
 800724a:	d001      	beq.n	8007250 <HAL_TIM_PeriodElapsedCallback+0x120>
			check_safety_conditions();
 800724c:	f7ff fd28 	bl	8006ca0 <check_safety_conditions>
		}

		// Update control loops
		update_control_loops();
 8007250:	f7ff f8c4 	bl	80063dc <update_control_loops>
	}
}
 8007254:	bf00      	nop
 8007256:	3708      	adds	r7, #8
 8007258:	46bd      	mov	sp, r7
 800725a:	bd80      	pop	{r7, pc}
 800725c:	200019ec 	.word	0x200019ec
 8007260:	2000043c 	.word	0x2000043c
 8007264:	20000498 	.word	0x20000498
 8007268:	200002b8 	.word	0x200002b8
 800726c:	477fff00 	.word	0x477fff00
 8007270:	c77fff00 	.word	0xc77fff00
 8007274:	2000152c 	.word	0x2000152c
 8007278:	20000278 	.word	0x20000278
 800727c:	200011c0 	.word	0x200011c0
 8007280:	20000100 	.word	0x20000100
 8007284:	447a0000 	.word	0x447a0000

08007288 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8007288:	b480      	push	{r7}
 800728a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800728c:	b672      	cpsid	i
}
 800728e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8007290:	bf00      	nop
 8007292:	e7fd      	b.n	8007290 <Error_Handler+0x8>
 8007294:	0000      	movs	r0, r0
	...

08007298 <plotter_begin>:
float prismatic_current = 0.0f;
float revolute_current = 0.0f;

int up_lim, low_lim, b1, b2, b3, b4;

void plotter_begin() {
 8007298:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800729c:	ed2d 8b02 	vpush	{d8}
 80072a0:	b083      	sub	sp, #12
 80072a2:	af02      	add	r7, sp, #8
	ZGX45RGG_400RPM_Constant.sd_max = 500;
 80072a4:	49c4      	ldr	r1, [pc, #784]	@ (80075b8 <plotter_begin+0x320>)
 80072a6:	f04f 0200 	mov.w	r2, #0
 80072aa:	4bc4      	ldr	r3, [pc, #784]	@ (80075bc <plotter_begin+0x324>)
 80072ac:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
	ZGX45RGG_400RPM_Constant.sdd_max = ZGX45RGG_400RPM_Constant.sd_max * 2;
 80072b0:	4bc1      	ldr	r3, [pc, #772]	@ (80075b8 <plotter_begin+0x320>)
 80072b2:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 80072b6:	4602      	mov	r2, r0
 80072b8:	460b      	mov	r3, r1
 80072ba:	f7f8 ffb3 	bl	8000224 <__adddf3>
 80072be:	4602      	mov	r2, r0
 80072c0:	460b      	mov	r3, r1
 80072c2:	49bd      	ldr	r1, [pc, #756]	@ (80075b8 <plotter_begin+0x320>)
 80072c4:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58

	ZGX45RGG_400RPM_Constant.traject_sd_max = 500;
 80072c8:	49bb      	ldr	r1, [pc, #748]	@ (80075b8 <plotter_begin+0x320>)
 80072ca:	f04f 0200 	mov.w	r2, #0
 80072ce:	4bbb      	ldr	r3, [pc, #748]	@ (80075bc <plotter_begin+0x324>)
 80072d0:	e9c1 231c 	strd	r2, r3, [r1, #112]	@ 0x70
	ZGX45RGG_400RPM_Constant.traject_sdd_max = ZGX45RGG_400RPM_Constant.sdd_max;
 80072d4:	4bb8      	ldr	r3, [pc, #736]	@ (80075b8 <plotter_begin+0x320>)
 80072d6:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 80072da:	49b7      	ldr	r1, [pc, #732]	@ (80075b8 <plotter_begin+0x320>)
 80072dc:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78

	ZGX45RGG_150RPM_Constant.qd_max = ZGX45RGG_150RPM_Constant.qd_max
 80072e0:	4bb7      	ldr	r3, [pc, #732]	@ (80075c0 <plotter_begin+0x328>)
 80072e2:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
			* (24.0 / 36.0) - 2.0;
 80072e6:	a3b0      	add	r3, pc, #704	@ (adr r3, 80075a8 <plotter_begin+0x310>)
 80072e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ec:	f7f9 f950 	bl	8000590 <__aeabi_dmul>
 80072f0:	4602      	mov	r2, r0
 80072f2:	460b      	mov	r3, r1
 80072f4:	4610      	mov	r0, r2
 80072f6:	4619      	mov	r1, r3
 80072f8:	f04f 0200 	mov.w	r2, #0
 80072fc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007300:	f7f8 ff8e 	bl	8000220 <__aeabi_dsub>
 8007304:	4602      	mov	r2, r0
 8007306:	460b      	mov	r3, r1
	ZGX45RGG_150RPM_Constant.qd_max = ZGX45RGG_150RPM_Constant.qd_max
 8007308:	49ad      	ldr	r1, [pc, #692]	@ (80075c0 <plotter_begin+0x328>)
 800730a:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
	ZGX45RGG_150RPM_Constant.qdd_max = ZGX45RGG_150RPM_Constant.qd_max * 0.4;
 800730e:	4bac      	ldr	r3, [pc, #688]	@ (80075c0 <plotter_begin+0x328>)
 8007310:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8007314:	a3a6      	add	r3, pc, #664	@ (adr r3, 80075b0 <plotter_begin+0x318>)
 8007316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800731a:	f7f9 f939 	bl	8000590 <__aeabi_dmul>
 800731e:	4602      	mov	r2, r0
 8007320:	460b      	mov	r3, r1
 8007322:	49a7      	ldr	r1, [pc, #668]	@ (80075c0 <plotter_begin+0x328>)
 8007324:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48

	ZGX45RGG_150RPM_Constant.traject_qd_max = ZGX45RGG_150RPM_Constant.qd_max;
 8007328:	4ba5      	ldr	r3, [pc, #660]	@ (80075c0 <plotter_begin+0x328>)
 800732a:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 800732e:	49a4      	ldr	r1, [pc, #656]	@ (80075c0 <plotter_begin+0x328>)
 8007330:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
	ZGX45RGG_150RPM_Constant.traject_qdd_max = ZGX45RGG_150RPM_Constant.qdd_max;
 8007334:	4ba2      	ldr	r3, [pc, #648]	@ (80075c0 <plotter_begin+0x328>)
 8007336:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 800733a:	49a1      	ldr	r1, [pc, #644]	@ (80075c0 <plotter_begin+0x328>)
 800733c:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68

	SIGNAL_init(&sine_sg_PWM, SIGNAL_SINE);
 8007340:	2100      	movs	r1, #0
 8007342:	48a0      	ldr	r0, [pc, #640]	@ (80075c4 <plotter_begin+0x32c>)
 8007344:	f000 fc46 	bl	8007bd4 <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_PWM, SINE_AMPLITUDE, SINE_FREQUENCY, SINE_PHASE,
 8007348:	eddf 2a9f 	vldr	s5, [pc, #636]	@ 80075c8 <plotter_begin+0x330>
 800734c:	ed9f 2a9f 	vldr	s4, [pc, #636]	@ 80075cc <plotter_begin+0x334>
 8007350:	eddf 1a9f 	vldr	s3, [pc, #636]	@ 80075d0 <plotter_begin+0x338>
 8007354:	ed9f 1a9e 	vldr	s2, [pc, #632]	@ 80075d0 <plotter_begin+0x338>
 8007358:	eddf 0a9e 	vldr	s1, [pc, #632]	@ 80075d4 <plotter_begin+0x33c>
 800735c:	ed9f 0a9a 	vldr	s0, [pc, #616]	@ 80075c8 <plotter_begin+0x330>
 8007360:	4898      	ldr	r0, [pc, #608]	@ (80075c4 <plotter_begin+0x32c>)
 8007362:	f000 fc95 	bl	8007c90 <SIGNAL_config_sine>
	SINE_OFFSET, SINE_MIN_SETPOINT, SINE_MAX_SETPOINT);

	SIGNAL_init(&square_sg_PWM, SIGNAL_SQUARE);
 8007366:	2102      	movs	r1, #2
 8007368:	489b      	ldr	r0, [pc, #620]	@ (80075d8 <plotter_begin+0x340>)
 800736a:	f000 fc33 	bl	8007bd4 <SIGNAL_init>
	SIGNAL_config_square(&square_sg_PWM, SQUARE_AMPLITUDE, SQUARE_FREQUENCY,
 800736e:	ed9f 3a96 	vldr	s6, [pc, #600]	@ 80075c8 <plotter_begin+0x330>
 8007372:	eddf 2a96 	vldr	s5, [pc, #600]	@ 80075cc <plotter_begin+0x334>
 8007376:	ed9f 2a96 	vldr	s4, [pc, #600]	@ 80075d0 <plotter_begin+0x338>
 800737a:	eddf 1a95 	vldr	s3, [pc, #596]	@ 80075d0 <plotter_begin+0x338>
 800737e:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8007382:	eddf 0a94 	vldr	s1, [pc, #592]	@ 80075d4 <plotter_begin+0x33c>
 8007386:	ed9f 0a90 	vldr	s0, [pc, #576]	@ 80075c8 <plotter_begin+0x330>
 800738a:	4893      	ldr	r0, [pc, #588]	@ (80075d8 <plotter_begin+0x340>)
 800738c:	f000 fcab 	bl	8007ce6 <SIGNAL_config_square>
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
	SQUARE_MIN_SETPOINT, SQUARE_MAX_SETPOINT);

	SIGNAL_init(&sine_sg_cascade, SIGNAL_SINE);
 8007390:	2100      	movs	r1, #0
 8007392:	4892      	ldr	r0, [pc, #584]	@ (80075dc <plotter_begin+0x344>)
 8007394:	f000 fc1e 	bl	8007bd4 <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_cascade, SINE_AMPLITUDE_CASCADE, SINE_FREQUENCY,
 8007398:	eddf 2a91 	vldr	s5, [pc, #580]	@ 80075e0 <plotter_begin+0x348>
 800739c:	ed9f 2a91 	vldr	s4, [pc, #580]	@ 80075e4 <plotter_begin+0x34c>
 80073a0:	eddf 1a8b 	vldr	s3, [pc, #556]	@ 80075d0 <plotter_begin+0x338>
 80073a4:	ed9f 1a8a 	vldr	s2, [pc, #552]	@ 80075d0 <plotter_begin+0x338>
 80073a8:	eddf 0a8a 	vldr	s1, [pc, #552]	@ 80075d4 <plotter_begin+0x33c>
 80073ac:	ed9f 0a8c 	vldr	s0, [pc, #560]	@ 80075e0 <plotter_begin+0x348>
 80073b0:	488a      	ldr	r0, [pc, #552]	@ (80075dc <plotter_begin+0x344>)
 80073b2:	f000 fc6d 	bl	8007c90 <SIGNAL_config_sine>
	SINE_PHASE,
	SINE_OFFSET, SINE_MIN_SETPOINT_CASCADE, SINE_MAX_SETPOINT_CASCADE);

	SIGNAL_init(&square_sg_cascade, SIGNAL_SQUARE);
 80073b6:	2102      	movs	r1, #2
 80073b8:	488b      	ldr	r0, [pc, #556]	@ (80075e8 <plotter_begin+0x350>)
 80073ba:	f000 fc0b 	bl	8007bd4 <SIGNAL_init>
	SIGNAL_config_square(&square_sg_cascade, SQUARE_AMPLITUDE_CASCADE,
 80073be:	eeb3 3a09 	vmov.f32	s6, #57	@ 0x41c80000  25.0
 80073c2:	eefb 2a09 	vmov.f32	s5, #185	@ 0xc1c80000 -25.0
 80073c6:	ed9f 2a82 	vldr	s4, [pc, #520]	@ 80075d0 <plotter_begin+0x338>
 80073ca:	eddf 1a81 	vldr	s3, [pc, #516]	@ 80075d0 <plotter_begin+0x338>
 80073ce:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 80073d2:	eddf 0a80 	vldr	s1, [pc, #512]	@ 80075d4 <plotter_begin+0x33c>
 80073d6:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 80073da:	4883      	ldr	r0, [pc, #524]	@ (80075e8 <plotter_begin+0x350>)
 80073dc:	f000 fc83 	bl	8007ce6 <SIGNAL_config_square>
	SQUARE_FREQUENCY,
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
	SQUARE_MIN_SETPOINT_CASCADE, SQUARE_MAX_SETPOINT_CASCADE);

	SIGNAL_init(&sine_sg_prismatic, SIGNAL_SINE);
 80073e0:	2100      	movs	r1, #0
 80073e2:	4882      	ldr	r0, [pc, #520]	@ (80075ec <plotter_begin+0x354>)
 80073e4:	f000 fbf6 	bl	8007bd4 <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 80073e8:	4b73      	ldr	r3, [pc, #460]	@ (80075b8 <plotter_begin+0x320>)
 80073ea:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80073ee:	4610      	mov	r0, r2
 80073f0:	4619      	mov	r1, r3
 80073f2:	f7f9 fbaf 	bl	8000b54 <__aeabi_d2f>
 80073f6:	4604      	mov	r4, r0
	SINE_FREQUENCY, SINE_PHASE,
	SINE_OFFSET, -ZGX45RGG_400RPM_Constant.qd_max,
 80073f8:	4b6f      	ldr	r3, [pc, #444]	@ (80075b8 <plotter_begin+0x320>)
 80073fa:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80073fe:	4610      	mov	r0, r2
 8007400:	4619      	mov	r1, r3
 8007402:	f7f9 fba7 	bl	8000b54 <__aeabi_d2f>
 8007406:	4603      	mov	r3, r0
	SIGNAL_config_sine(&sine_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8007408:	ee07 3a90 	vmov	s15, r3
 800740c:	eeb1 8a67 	vneg.f32	s16, s15
			ZGX45RGG_400RPM_Constant.qd_max);
 8007410:	4b69      	ldr	r3, [pc, #420]	@ (80075b8 <plotter_begin+0x320>)
 8007412:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_sine(&sine_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8007416:	4610      	mov	r0, r2
 8007418:	4619      	mov	r1, r3
 800741a:	f7f9 fb9b 	bl	8000b54 <__aeabi_d2f>
 800741e:	4603      	mov	r3, r0
 8007420:	ee02 3a90 	vmov	s5, r3
 8007424:	eeb0 2a48 	vmov.f32	s4, s16
 8007428:	eddf 1a69 	vldr	s3, [pc, #420]	@ 80075d0 <plotter_begin+0x338>
 800742c:	ed9f 1a68 	vldr	s2, [pc, #416]	@ 80075d0 <plotter_begin+0x338>
 8007430:	eddf 0a68 	vldr	s1, [pc, #416]	@ 80075d4 <plotter_begin+0x33c>
 8007434:	ee00 4a10 	vmov	s0, r4
 8007438:	486c      	ldr	r0, [pc, #432]	@ (80075ec <plotter_begin+0x354>)
 800743a:	f000 fc29 	bl	8007c90 <SIGNAL_config_sine>

	SIGNAL_init(&square_sg_prismatic, SIGNAL_SQUARE);
 800743e:	2102      	movs	r1, #2
 8007440:	486b      	ldr	r0, [pc, #428]	@ (80075f0 <plotter_begin+0x358>)
 8007442:	f000 fbc7 	bl	8007bd4 <SIGNAL_init>
	SIGNAL_config_square(&square_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8007446:	4b5c      	ldr	r3, [pc, #368]	@ (80075b8 <plotter_begin+0x320>)
 8007448:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 800744c:	4610      	mov	r0, r2
 800744e:	4619      	mov	r1, r3
 8007450:	f7f9 fb80 	bl	8000b54 <__aeabi_d2f>
 8007454:	4604      	mov	r4, r0
	SQUARE_FREQUENCY,
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
			-ZGX45RGG_400RPM_Constant.qd_max, ZGX45RGG_400RPM_Constant.qd_max);
 8007456:	4b58      	ldr	r3, [pc, #352]	@ (80075b8 <plotter_begin+0x320>)
 8007458:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 800745c:	4610      	mov	r0, r2
 800745e:	4619      	mov	r1, r3
 8007460:	f7f9 fb78 	bl	8000b54 <__aeabi_d2f>
 8007464:	4603      	mov	r3, r0
	SIGNAL_config_square(&square_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8007466:	ee07 3a90 	vmov	s15, r3
 800746a:	eeb1 8a67 	vneg.f32	s16, s15
			-ZGX45RGG_400RPM_Constant.qd_max, ZGX45RGG_400RPM_Constant.qd_max);
 800746e:	4b52      	ldr	r3, [pc, #328]	@ (80075b8 <plotter_begin+0x320>)
 8007470:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_square(&square_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8007474:	4610      	mov	r0, r2
 8007476:	4619      	mov	r1, r3
 8007478:	f7f9 fb6c 	bl	8000b54 <__aeabi_d2f>
 800747c:	4603      	mov	r3, r0
 800747e:	ee03 3a10 	vmov	s6, r3
 8007482:	eef0 2a48 	vmov.f32	s5, s16
 8007486:	ed9f 2a52 	vldr	s4, [pc, #328]	@ 80075d0 <plotter_begin+0x338>
 800748a:	eddf 1a51 	vldr	s3, [pc, #324]	@ 80075d0 <plotter_begin+0x338>
 800748e:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8007492:	eddf 0a50 	vldr	s1, [pc, #320]	@ 80075d4 <plotter_begin+0x33c>
 8007496:	ee00 4a10 	vmov	s0, r4
 800749a:	4855      	ldr	r0, [pc, #340]	@ (80075f0 <plotter_begin+0x358>)
 800749c:	f000 fc23 	bl	8007ce6 <SIGNAL_config_square>

	SIGNAL_init(&sine_sg_revolute, SIGNAL_SINE);
 80074a0:	2100      	movs	r1, #0
 80074a2:	4854      	ldr	r0, [pc, #336]	@ (80075f4 <plotter_begin+0x35c>)
 80074a4:	f000 fb96 	bl	8007bd4 <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 80074a8:	4b45      	ldr	r3, [pc, #276]	@ (80075c0 <plotter_begin+0x328>)
 80074aa:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80074ae:	4610      	mov	r0, r2
 80074b0:	4619      	mov	r1, r3
 80074b2:	f7f9 fb4f 	bl	8000b54 <__aeabi_d2f>
 80074b6:	4604      	mov	r4, r0
	SINE_FREQUENCY, SINE_PHASE,
	SINE_OFFSET, -ZGX45RGG_150RPM_Constant.qd_max,
 80074b8:	4b41      	ldr	r3, [pc, #260]	@ (80075c0 <plotter_begin+0x328>)
 80074ba:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80074be:	4610      	mov	r0, r2
 80074c0:	4619      	mov	r1, r3
 80074c2:	f7f9 fb47 	bl	8000b54 <__aeabi_d2f>
 80074c6:	4603      	mov	r3, r0
	SIGNAL_config_sine(&sine_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 80074c8:	ee07 3a90 	vmov	s15, r3
 80074cc:	eeb1 8a67 	vneg.f32	s16, s15
			ZGX45RGG_150RPM_Constant.qd_max);
 80074d0:	4b3b      	ldr	r3, [pc, #236]	@ (80075c0 <plotter_begin+0x328>)
 80074d2:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_sine(&sine_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 80074d6:	4610      	mov	r0, r2
 80074d8:	4619      	mov	r1, r3
 80074da:	f7f9 fb3b 	bl	8000b54 <__aeabi_d2f>
 80074de:	4603      	mov	r3, r0
 80074e0:	ee02 3a90 	vmov	s5, r3
 80074e4:	eeb0 2a48 	vmov.f32	s4, s16
 80074e8:	eddf 1a39 	vldr	s3, [pc, #228]	@ 80075d0 <plotter_begin+0x338>
 80074ec:	ed9f 1a38 	vldr	s2, [pc, #224]	@ 80075d0 <plotter_begin+0x338>
 80074f0:	eddf 0a38 	vldr	s1, [pc, #224]	@ 80075d4 <plotter_begin+0x33c>
 80074f4:	ee00 4a10 	vmov	s0, r4
 80074f8:	483e      	ldr	r0, [pc, #248]	@ (80075f4 <plotter_begin+0x35c>)
 80074fa:	f000 fbc9 	bl	8007c90 <SIGNAL_config_sine>

	SIGNAL_init(&square_sg_revolute, SIGNAL_SQUARE);
 80074fe:	2102      	movs	r1, #2
 8007500:	483d      	ldr	r0, [pc, #244]	@ (80075f8 <plotter_begin+0x360>)
 8007502:	f000 fb67 	bl	8007bd4 <SIGNAL_init>
	SIGNAL_config_square(&square_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8007506:	4b2e      	ldr	r3, [pc, #184]	@ (80075c0 <plotter_begin+0x328>)
 8007508:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 800750c:	4610      	mov	r0, r2
 800750e:	4619      	mov	r1, r3
 8007510:	f7f9 fb20 	bl	8000b54 <__aeabi_d2f>
 8007514:	4604      	mov	r4, r0
	SQUARE_FREQUENCY,
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
			-ZGX45RGG_150RPM_Constant.qd_max, ZGX45RGG_150RPM_Constant.qd_max);
 8007516:	4b2a      	ldr	r3, [pc, #168]	@ (80075c0 <plotter_begin+0x328>)
 8007518:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 800751c:	4610      	mov	r0, r2
 800751e:	4619      	mov	r1, r3
 8007520:	f7f9 fb18 	bl	8000b54 <__aeabi_d2f>
 8007524:	4603      	mov	r3, r0
	SIGNAL_config_square(&square_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8007526:	ee07 3a90 	vmov	s15, r3
 800752a:	eeb1 8a67 	vneg.f32	s16, s15
			-ZGX45RGG_150RPM_Constant.qd_max, ZGX45RGG_150RPM_Constant.qd_max);
 800752e:	4b24      	ldr	r3, [pc, #144]	@ (80075c0 <plotter_begin+0x328>)
 8007530:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_square(&square_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8007534:	4610      	mov	r0, r2
 8007536:	4619      	mov	r1, r3
 8007538:	f7f9 fb0c 	bl	8000b54 <__aeabi_d2f>
 800753c:	4603      	mov	r3, r0
 800753e:	ee03 3a10 	vmov	s6, r3
 8007542:	eef0 2a48 	vmov.f32	s5, s16
 8007546:	ed9f 2a22 	vldr	s4, [pc, #136]	@ 80075d0 <plotter_begin+0x338>
 800754a:	eddf 1a21 	vldr	s3, [pc, #132]	@ 80075d0 <plotter_begin+0x338>
 800754e:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8007552:	eddf 0a20 	vldr	s1, [pc, #128]	@ 80075d4 <plotter_begin+0x33c>
 8007556:	ee00 4a10 	vmov	s0, r4
 800755a:	4827      	ldr	r0, [pc, #156]	@ (80075f8 <plotter_begin+0x360>)
 800755c:	f000 fbc3 	bl	8007ce6 <SIGNAL_config_square>

	UnitConverter_init(&converter_system);
 8007560:	4826      	ldr	r0, [pc, #152]	@ (80075fc <plotter_begin+0x364>)
 8007562:	f7fc ffad 	bl	80044c0 <UnitConverter_init>

	QEI_init(&prismatic_encoder, ENC_TIM1, ENC_PPR, ENC_FREQ, MOTOR1_RATIO,
			Disturbance_Constant.prismatic_pulley_radius * 2.0 * 1000.0);
 8007566:	4b26      	ldr	r3, [pc, #152]	@ (8007600 <plotter_begin+0x368>)
 8007568:	691b      	ldr	r3, [r3, #16]
 800756a:	4618      	mov	r0, r3
 800756c:	f7f8 ffb8 	bl	80004e0 <__aeabi_f2d>
 8007570:	4602      	mov	r2, r0
 8007572:	460b      	mov	r3, r1
 8007574:	f7f8 fe56 	bl	8000224 <__adddf3>
 8007578:	4602      	mov	r2, r0
 800757a:	460b      	mov	r3, r1
 800757c:	4610      	mov	r0, r2
 800757e:	4619      	mov	r1, r3
 8007580:	f04f 0200 	mov.w	r2, #0
 8007584:	4b1f      	ldr	r3, [pc, #124]	@ (8007604 <plotter_begin+0x36c>)
 8007586:	f7f9 f803 	bl	8000590 <__aeabi_dmul>
 800758a:	4602      	mov	r2, r0
 800758c:	460b      	mov	r3, r1
	QEI_init(&prismatic_encoder, ENC_TIM1, ENC_PPR, ENC_FREQ, MOTOR1_RATIO,
 800758e:	4610      	mov	r0, r2
 8007590:	4619      	mov	r1, r3
 8007592:	f7f9 fadf 	bl	8000b54 <__aeabi_d2f>
 8007596:	4603      	mov	r3, r0
 8007598:	ee00 3a90 	vmov	s1, r3
 800759c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80075a0:	e032      	b.n	8007608 <plotter_begin+0x370>
 80075a2:	bf00      	nop
 80075a4:	f3af 8000 	nop.w
 80075a8:	55555555 	.word	0x55555555
 80075ac:	3fe55555 	.word	0x3fe55555
 80075b0:	9999999a 	.word	0x9999999a
 80075b4:	3fd99999 	.word	0x3fd99999
 80075b8:	20000080 	.word	0x20000080
 80075bc:	407f4000 	.word	0x407f4000
 80075c0:	20000000 	.word	0x20000000
 80075c4:	200005e8 	.word	0x200005e8
 80075c8:	477fff00 	.word	0x477fff00
 80075cc:	c77fff00 	.word	0xc77fff00
 80075d0:	00000000 	.word	0x00000000
 80075d4:	3dcccccd 	.word	0x3dcccccd
 80075d8:	2000062c 	.word	0x2000062c
 80075dc:	20000670 	.word	0x20000670
 80075e0:	43480000 	.word	0x43480000
 80075e4:	c3480000 	.word	0xc3480000
 80075e8:	200006b4 	.word	0x200006b4
 80075ec:	200006f8 	.word	0x200006f8
 80075f0:	2000073c 	.word	0x2000073c
 80075f4:	20000780 	.word	0x20000780
 80075f8:	200007c4 	.word	0x200007c4
 80075fc:	20000808 	.word	0x20000808
 8007600:	20000100 	.word	0x20000100
 8007604:	408f4000 	.word	0x408f4000
 8007608:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800760c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8007610:	49bd      	ldr	r1, [pc, #756]	@ (8007908 <plotter_begin+0x670>)
 8007612:	48be      	ldr	r0, [pc, #760]	@ (800790c <plotter_begin+0x674>)
 8007614:	f7fc f90e 	bl	8003834 <QEI_init>
	QEI_init(&revolute_encoder, ENC_TIM2, ENC_PPR, ENC_FREQ, MOTOR2_RATIO,
 8007618:	eddf 0abd 	vldr	s1, [pc, #756]	@ 8007910 <plotter_begin+0x678>
 800761c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8007620:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007624:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8007628:	49ba      	ldr	r1, [pc, #744]	@ (8007914 <plotter_begin+0x67c>)
 800762a:	48bb      	ldr	r0, [pc, #748]	@ (8007918 <plotter_begin+0x680>)
 800762c:	f7fc f902 	bl	8003834 <QEI_init>
	MOTOR2_PULLEY_DIAMETER);

	MDXX_GPIO_init(&prismatic_motor, MOTOR1_TIM, MOTOR1_TIM_CH, MOTOR1_GPIOx,
 8007630:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007634:	9300      	str	r3, [sp, #0]
 8007636:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800763a:	2204      	movs	r2, #4
 800763c:	49b7      	ldr	r1, [pc, #732]	@ (800791c <plotter_begin+0x684>)
 800763e:	48b8      	ldr	r0, [pc, #736]	@ (8007920 <plotter_begin+0x688>)
 8007640:	f7f9 fe9e 	bl	8001380 <MDXX_GPIO_init>
	MOTOR1_GPIO_Pin);
	MDXX_GPIO_init(&revolute_motor, MOTOR2_TIM, MOTOR2_TIM_CH, MOTOR2_GPIOx,
 8007644:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007648:	9300      	str	r3, [sp, #0]
 800764a:	4bb6      	ldr	r3, [pc, #728]	@ (8007924 <plotter_begin+0x68c>)
 800764c:	2200      	movs	r2, #0
 800764e:	49b3      	ldr	r1, [pc, #716]	@ (800791c <plotter_begin+0x684>)
 8007650:	48b5      	ldr	r0, [pc, #724]	@ (8007928 <plotter_begin+0x690>)
 8007652:	f7f9 fe95 	bl	8001380 <MDXX_GPIO_init>
	MOTOR2_GPIO_Pin);

	PWM_init(&servo, SERVO_TIM, SERVO_TIM_CH);
 8007656:	220c      	movs	r2, #12
 8007658:	49b4      	ldr	r1, [pc, #720]	@ (800792c <plotter_begin+0x694>)
 800765a:	48b5      	ldr	r0, [pc, #724]	@ (8007930 <plotter_begin+0x698>)
 800765c:	f7fb febe 	bl	80033dc <PWM_init>

	MDXX_set_range(&prismatic_motor, 2000, 0);
 8007660:	eddf 0aab 	vldr	s1, [pc, #684]	@ 8007910 <plotter_begin+0x678>
 8007664:	ed9f 0ab3 	vldr	s0, [pc, #716]	@ 8007934 <plotter_begin+0x69c>
 8007668:	48ad      	ldr	r0, [pc, #692]	@ (8007920 <plotter_begin+0x688>)
 800766a:	f7f9 fead 	bl	80013c8 <MDXX_set_range>
	MDXX_set_range(&revolute_motor, 2000, 0);
 800766e:	eddf 0aa8 	vldr	s1, [pc, #672]	@ 8007910 <plotter_begin+0x678>
 8007672:	ed9f 0ab0 	vldr	s0, [pc, #704]	@ 8007934 <plotter_begin+0x69c>
 8007676:	48ac      	ldr	r0, [pc, #688]	@ (8007928 <plotter_begin+0x690>)
 8007678:	f7f9 fea6 	bl	80013c8 <MDXX_set_range>

	PID_CONTROLLER_Init(&prismatic_position_pid, 75, 1e-10, 120,
			ZGX45RGG_400RPM_Constant.sd_max);
 800767c:	4bae      	ldr	r3, [pc, #696]	@ (8007938 <plotter_begin+0x6a0>)
 800767e:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
	PID_CONTROLLER_Init(&prismatic_position_pid, 75, 1e-10, 120,
 8007682:	4610      	mov	r0, r2
 8007684:	4619      	mov	r1, r3
 8007686:	f7f9 fa65 	bl	8000b54 <__aeabi_d2f>
 800768a:	4603      	mov	r3, r0
 800768c:	ee01 3a90 	vmov	s3, r3
 8007690:	ed9f 1aaa 	vldr	s2, [pc, #680]	@ 800793c <plotter_begin+0x6a4>
 8007694:	eddf 0aaa 	vldr	s1, [pc, #680]	@ 8007940 <plotter_begin+0x6a8>
 8007698:	ed9f 0aaa 	vldr	s0, [pc, #680]	@ 8007944 <plotter_begin+0x6ac>
 800769c:	48aa      	ldr	r0, [pc, #680]	@ (8007948 <plotter_begin+0x6b0>)
 800769e:	f7f9 fd88 	bl	80011b2 <PID_CONTROLLER_Init>
	PID_CONTROLLER_Init(&prismatic_velocity_pid, 150, 1e-5, 0,
			ZGX45RGG_400RPM_Constant.U_max);
 80076a2:	4ba5      	ldr	r3, [pc, #660]	@ (8007938 <plotter_begin+0x6a0>)
 80076a4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	PID_CONTROLLER_Init(&prismatic_velocity_pid, 150, 1e-5, 0,
 80076a8:	4610      	mov	r0, r2
 80076aa:	4619      	mov	r1, r3
 80076ac:	f7f9 fa52 	bl	8000b54 <__aeabi_d2f>
 80076b0:	4603      	mov	r3, r0
 80076b2:	ee01 3a90 	vmov	s3, r3
 80076b6:	ed9f 1a96 	vldr	s2, [pc, #600]	@ 8007910 <plotter_begin+0x678>
 80076ba:	eddf 0aa4 	vldr	s1, [pc, #656]	@ 800794c <plotter_begin+0x6b4>
 80076be:	ed9f 0aa4 	vldr	s0, [pc, #656]	@ 8007950 <plotter_begin+0x6b8>
 80076c2:	48a4      	ldr	r0, [pc, #656]	@ (8007954 <plotter_begin+0x6bc>)
 80076c4:	f7f9 fd75 	bl	80011b2 <PID_CONTROLLER_Init>

	PID_CONTROLLER_Init(&revolute_position_pid, 150, 5e-2, 2000,
			ZGX45RGG_150RPM_Constant.qd_max);
 80076c8:	4ba3      	ldr	r3, [pc, #652]	@ (8007958 <plotter_begin+0x6c0>)
 80076ca:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	PID_CONTROLLER_Init(&revolute_position_pid, 150, 5e-2, 2000,
 80076ce:	4610      	mov	r0, r2
 80076d0:	4619      	mov	r1, r3
 80076d2:	f7f9 fa3f 	bl	8000b54 <__aeabi_d2f>
 80076d6:	4603      	mov	r3, r0
 80076d8:	ee01 3a90 	vmov	s3, r3
 80076dc:	ed9f 1a95 	vldr	s2, [pc, #596]	@ 8007934 <plotter_begin+0x69c>
 80076e0:	eddf 0a9e 	vldr	s1, [pc, #632]	@ 800795c <plotter_begin+0x6c4>
 80076e4:	ed9f 0a9a 	vldr	s0, [pc, #616]	@ 8007950 <plotter_begin+0x6b8>
 80076e8:	489d      	ldr	r0, [pc, #628]	@ (8007960 <plotter_begin+0x6c8>)
 80076ea:	f7f9 fd62 	bl	80011b2 <PID_CONTROLLER_Init>

	PID_CONTROLLER_Init(&revolute_velocity_pid, 4500, 50, 0,
			ZGX45RGG_150RPM_Constant.U_max);
 80076ee:	4b9a      	ldr	r3, [pc, #616]	@ (8007958 <plotter_begin+0x6c0>)
 80076f0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	PID_CONTROLLER_Init(&revolute_velocity_pid, 4500, 50, 0,
 80076f4:	4610      	mov	r0, r2
 80076f6:	4619      	mov	r1, r3
 80076f8:	f7f9 fa2c 	bl	8000b54 <__aeabi_d2f>
 80076fc:	4603      	mov	r3, r0
 80076fe:	ee01 3a90 	vmov	s3, r3
 8007702:	ed9f 1a83 	vldr	s2, [pc, #524]	@ 8007910 <plotter_begin+0x678>
 8007706:	eddf 0a97 	vldr	s1, [pc, #604]	@ 8007964 <plotter_begin+0x6cc>
 800770a:	ed9f 0a97 	vldr	s0, [pc, #604]	@ 8007968 <plotter_begin+0x6d0>
 800770e:	4897      	ldr	r0, [pc, #604]	@ (800796c <plotter_begin+0x6d4>)
 8007710:	f7f9 fd4f 	bl	80011b2 <PID_CONTROLLER_Init>

	REVOLUTE_MOTOR_FFD_Init(&revolute_motor_ffd, &ZGX45RGG_150RPM_Constant);
 8007714:	4990      	ldr	r1, [pc, #576]	@ (8007958 <plotter_begin+0x6c0>)
 8007716:	4896      	ldr	r0, [pc, #600]	@ (8007970 <plotter_begin+0x6d8>)
 8007718:	f7f9 ff30 	bl	800157c <REVOLUTE_MOTOR_FFD_Init>
	PRISMATIC_MOTOR_FFD_Init(&prismatic_motor_ffd, &ZGX45RGG_400RPM_Constant);
 800771c:	4986      	ldr	r1, [pc, #536]	@ (8007938 <plotter_begin+0x6a0>)
 800771e:	4895      	ldr	r0, [pc, #596]	@ (8007974 <plotter_begin+0x6dc>)
 8007720:	f7fa f8b4 	bl	800188c <PRISMATIC_MOTOR_FFD_Init>

	REVOLUTE_MOTOR_DFD_Init(&revolute_motor_dfd, &ZGX45RGG_150RPM_Constant,
 8007724:	4a94      	ldr	r2, [pc, #592]	@ (8007978 <plotter_begin+0x6e0>)
 8007726:	498c      	ldr	r1, [pc, #560]	@ (8007958 <plotter_begin+0x6c0>)
 8007728:	4894      	ldr	r0, [pc, #592]	@ (800797c <plotter_begin+0x6e4>)
 800772a:	f7f9 ffb6 	bl	800169a <REVOLUTE_MOTOR_DFD_Init>
			&Disturbance_Constant);
	PRISMATIC_MOTOR_DFD_Init(&prismatic_motor_dfd, &ZGX45RGG_400RPM_Constant,
 800772e:	4a92      	ldr	r2, [pc, #584]	@ (8007978 <plotter_begin+0x6e0>)
 8007730:	4981      	ldr	r1, [pc, #516]	@ (8007938 <plotter_begin+0x6a0>)
 8007732:	4893      	ldr	r0, [pc, #588]	@ (8007980 <plotter_begin+0x6e8>)
 8007734:	f7fa f939 	bl	80019aa <PRISMATIC_MOTOR_DFD_Init>
			&Disturbance_Constant);

	ADC_DMA_Init(&joystick, &hadc1, joystick_buffer, ADC_BUFFER_SIZE,
 8007738:	2302      	movs	r3, #2
 800773a:	9300      	str	r3, [sp, #0]
 800773c:	eddf 0a91 	vldr	s1, [pc, #580]	@ 8007984 <plotter_begin+0x6ec>
 8007740:	ed9f 0a91 	vldr	s0, [pc, #580]	@ 8007988 <plotter_begin+0x6f0>
 8007744:	2364      	movs	r3, #100	@ 0x64
 8007746:	4a91      	ldr	r2, [pc, #580]	@ (800798c <plotter_begin+0x6f4>)
 8007748:	4991      	ldr	r1, [pc, #580]	@ (8007990 <plotter_begin+0x6f8>)
 800774a:	4892      	ldr	r0, [pc, #584]	@ (8007994 <plotter_begin+0x6fc>)
 800774c:	f7f9 fbe8 	bl	8000f20 <ADC_DMA_Init>
	ADC_CHANNELS, ADC_VREF, ADC_RESOLUTION);
	ADC_DMA_SetCenterPoint(&joystick, ADC_CENTERPOINT, ADC_ERROR);
 8007750:	2105      	movs	r1, #5
 8007752:	ed9f 0a91 	vldr	s0, [pc, #580]	@ 8007998 <plotter_begin+0x700>
 8007756:	488f      	ldr	r0, [pc, #572]	@ (8007994 <plotter_begin+0x6fc>)
 8007758:	f7f9 fc94 	bl	8001084 <ADC_DMA_SetCenterPoint>
	ADC_DMA_Start(&joystick);
 800775c:	488d      	ldr	r0, [pc, #564]	@ (8007994 <plotter_begin+0x6fc>)
 800775e:	f7f9 fc37 	bl	8000fd0 <ADC_DMA_Start>

	FIR_init(&prismatic_lp_current, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 8007762:	eddf 0a8e 	vldr	s1, [pc, #568]	@ 800799c <plotter_begin+0x704>
 8007766:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 800776a:	211f      	movs	r1, #31
 800776c:	488c      	ldr	r0, [pc, #560]	@ (80079a0 <plotter_begin+0x708>)
 800776e:	f7fa f9e3 	bl	8001b38 <FIR_init>
	FIR_init(&prismatic_lp_velocity, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 8007772:	eddf 0a8a 	vldr	s1, [pc, #552]	@ 800799c <plotter_begin+0x704>
 8007776:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 800777a:	211f      	movs	r1, #31
 800777c:	4889      	ldr	r0, [pc, #548]	@ (80079a4 <plotter_begin+0x70c>)
 800777e:	f7fa f9db 	bl	8001b38 <FIR_init>
	FIR_init(&revolute_lp_current, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 8007782:	eddf 0a86 	vldr	s1, [pc, #536]	@ 800799c <plotter_begin+0x704>
 8007786:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 800778a:	211f      	movs	r1, #31
 800778c:	4886      	ldr	r0, [pc, #536]	@ (80079a8 <plotter_begin+0x710>)
 800778e:	f7fa f9d3 	bl	8001b38 <FIR_init>
	FIR_init(&revolute_lp_velocity, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 8007792:	eddf 0a82 	vldr	s1, [pc, #520]	@ 800799c <plotter_begin+0x704>
 8007796:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 800779a:	211f      	movs	r1, #31
 800779c:	4883      	ldr	r0, [pc, #524]	@ (80079ac <plotter_begin+0x714>)
 800779e:	f7fa f9cb 	bl	8001b38 <FIR_init>

	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 80077a2:	4b65      	ldr	r3, [pc, #404]	@ (8007938 <plotter_begin+0x6a0>)
 80077a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80077a8:	4610      	mov	r0, r2
 80077aa:	4619      	mov	r1, r3
 80077ac:	f7f9 f9d2 	bl	8000b54 <__aeabi_d2f>
 80077b0:	4604      	mov	r4, r0
			ZGX45RGG_400RPM_Constant.B, ZGX45RGG_400RPM_Constant.Kt,
 80077b2:	4b61      	ldr	r3, [pc, #388]	@ (8007938 <plotter_begin+0x6a0>)
 80077b4:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 80077b8:	4610      	mov	r0, r2
 80077ba:	4619      	mov	r1, r3
 80077bc:	f7f9 f9ca 	bl	8000b54 <__aeabi_d2f>
 80077c0:	4605      	mov	r5, r0
			ZGX45RGG_400RPM_Constant.B, ZGX45RGG_400RPM_Constant.Kt,
 80077c2:	4b5d      	ldr	r3, [pc, #372]	@ (8007938 <plotter_begin+0x6a0>)
 80077c4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 80077c8:	4610      	mov	r0, r2
 80077ca:	4619      	mov	r1, r3
 80077cc:	f7f9 f9c2 	bl	8000b54 <__aeabi_d2f>
 80077d0:	4606      	mov	r6, r0
			ZGX45RGG_400RPM_Constant.Ke, ZGX45RGG_400RPM_Constant.R,
 80077d2:	4b59      	ldr	r3, [pc, #356]	@ (8007938 <plotter_begin+0x6a0>)
 80077d4:	e9d3 2300 	ldrd	r2, r3, [r3]
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 80077d8:	4610      	mov	r0, r2
 80077da:	4619      	mov	r1, r3
 80077dc:	f7f9 f9ba 	bl	8000b54 <__aeabi_d2f>
 80077e0:	4680      	mov	r8, r0
			ZGX45RGG_400RPM_Constant.Ke, ZGX45RGG_400RPM_Constant.R,
 80077e2:	4b55      	ldr	r3, [pc, #340]	@ (8007938 <plotter_begin+0x6a0>)
 80077e4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 80077e8:	4610      	mov	r0, r2
 80077ea:	4619      	mov	r1, r3
 80077ec:	f7f9 f9b2 	bl	8000b54 <__aeabi_d2f>
 80077f0:	4681      	mov	r9, r0
			ZGX45RGG_400RPM_Constant.L, 1.0, 1.0);
 80077f2:	4b51      	ldr	r3, [pc, #324]	@ (8007938 <plotter_begin+0x6a0>)
 80077f4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 80077f8:	4610      	mov	r0, r2
 80077fa:	4619      	mov	r1, r3
 80077fc:	f7f9 f9aa 	bl	8000b54 <__aeabi_d2f>
 8007800:	4603      	mov	r3, r0
 8007802:	eeb7 4a00 	vmov.f32	s8, #112	@ 0x3f800000  1.0
 8007806:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 800780a:	ee03 3a10 	vmov	s6, r3
 800780e:	ee02 9a90 	vmov	s5, r9
 8007812:	ee02 8a10 	vmov	s4, r8
 8007816:	ee01 6a90 	vmov	s3, r6
 800781a:	ee01 5a10 	vmov	s2, r5
 800781e:	ee00 4a90 	vmov	s1, r4
 8007822:	ed9f 0a63 	vldr	s0, [pc, #396]	@ 80079b0 <plotter_begin+0x718>
 8007826:	4863      	ldr	r0, [pc, #396]	@ (80079b4 <plotter_begin+0x71c>)
 8007828:	f7fa fb86 	bl	8001f38 <MotorKalman_Init>

	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 800782c:	4b4a      	ldr	r3, [pc, #296]	@ (8007958 <plotter_begin+0x6c0>)
 800782e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8007832:	4610      	mov	r0, r2
 8007834:	4619      	mov	r1, r3
 8007836:	f7f9 f98d 	bl	8000b54 <__aeabi_d2f>
 800783a:	4604      	mov	r4, r0
			ZGX45RGG_150RPM_Constant.L,
 800783c:	4b46      	ldr	r3, [pc, #280]	@ (8007958 <plotter_begin+0x6c0>)
 800783e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 8007842:	4610      	mov	r0, r2
 8007844:	4619      	mov	r1, r3
 8007846:	f7f9 f985 	bl	8000b54 <__aeabi_d2f>
 800784a:	4605      	mov	r5, r0
			ZGX45RGG_150RPM_Constant.J,
 800784c:	4b42      	ldr	r3, [pc, #264]	@ (8007958 <plotter_begin+0x6c0>)
 800784e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 8007852:	4610      	mov	r0, r2
 8007854:	4619      	mov	r1, r3
 8007856:	f7f9 f97d 	bl	8000b54 <__aeabi_d2f>
 800785a:	4606      	mov	r6, r0
			ZGX45RGG_150RPM_Constant.B * 2.2,
 800785c:	4b3e      	ldr	r3, [pc, #248]	@ (8007958 <plotter_begin+0x6c0>)
 800785e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8007862:	a327      	add	r3, pc, #156	@ (adr r3, 8007900 <plotter_begin+0x668>)
 8007864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007868:	f7f8 fe92 	bl	8000590 <__aeabi_dmul>
 800786c:	4602      	mov	r2, r0
 800786e:	460b      	mov	r3, r1
	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 8007870:	4610      	mov	r0, r2
 8007872:	4619      	mov	r1, r3
 8007874:	f7f9 f96e 	bl	8000b54 <__aeabi_d2f>
 8007878:	4680      	mov	r8, r0
			ZGX45RGG_150RPM_Constant.Ke,
 800787a:	4b37      	ldr	r3, [pc, #220]	@ (8007958 <plotter_begin+0x6c0>)
 800787c:	e9d3 2300 	ldrd	r2, r3, [r3]
	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 8007880:	4610      	mov	r0, r2
 8007882:	4619      	mov	r1, r3
 8007884:	f7f9 f966 	bl	8000b54 <__aeabi_d2f>
 8007888:	4681      	mov	r9, r0
			ZGX45RGG_150RPM_Constant.Kt,
 800788a:	4b33      	ldr	r3, [pc, #204]	@ (8007958 <plotter_begin+0x6c0>)
 800788c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 8007890:	4610      	mov	r0, r2
 8007892:	4619      	mov	r1, r3
 8007894:	f7f9 f95e 	bl	8000b54 <__aeabi_d2f>
 8007898:	4603      	mov	r3, r0
 800789a:	4947      	ldr	r1, [pc, #284]	@ (80079b8 <plotter_begin+0x720>)
 800789c:	4847      	ldr	r0, [pc, #284]	@ (80079bc <plotter_begin+0x724>)
 800789e:	ed9f 3a44 	vldr	s6, [pc, #272]	@ 80079b0 <plotter_begin+0x718>
 80078a2:	ee02 3a90 	vmov	s5, r3
 80078a6:	ee02 9a10 	vmov	s4, r9
 80078aa:	ee01 8a90 	vmov	s3, r8
 80078ae:	ee01 6a10 	vmov	s2, r6
 80078b2:	ee00 5a90 	vmov	s1, r5
 80078b6:	ee00 4a10 	vmov	s0, r4
 80078ba:	f7fb fd27 	bl	800330c <GenerateMotorMatrices>
			0.001,
			&revolute_A,
			&revolute_B
			);

	Kalman_Start(&revolute_kalman, revolute_A, revolute_B, REVOLUTE_Q,
 80078be:	eddf 0a27 	vldr	s1, [pc, #156]	@ 800795c <plotter_begin+0x6c4>
 80078c2:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80078c6:	4a3c      	ldr	r2, [pc, #240]	@ (80079b8 <plotter_begin+0x720>)
 80078c8:	493c      	ldr	r1, [pc, #240]	@ (80079bc <plotter_begin+0x724>)
 80078ca:	483d      	ldr	r0, [pc, #244]	@ (80079c0 <plotter_begin+0x728>)
 80078cc:	f7fd fa38 	bl	8004d40 <Kalman_Start>
	REVOLUTE_R);

	Modbus_init(&ModBus, MODBUS_USART, MODBUS_DATA_SENDING_PERIOD_TIM,
 80078d0:	23c8      	movs	r3, #200	@ 0xc8
 80078d2:	9301      	str	r3, [sp, #4]
 80078d4:	2315      	movs	r3, #21
 80078d6:	9300      	str	r3, [sp, #0]
 80078d8:	4b3a      	ldr	r3, [pc, #232]	@ (80079c4 <plotter_begin+0x72c>)
 80078da:	4a3b      	ldr	r2, [pc, #236]	@ (80079c8 <plotter_begin+0x730>)
 80078dc:	493b      	ldr	r1, [pc, #236]	@ (80079cc <plotter_begin+0x734>)
 80078de:	483c      	ldr	r0, [pc, #240]	@ (80079d0 <plotter_begin+0x738>)
 80078e0:	f7fa fac2 	bl	8001e68 <Modbus_init>
			registerFrame, MODBUS_SLAVE_ADDRESS, MODBUS_REGISTER_FRAME_SIZE);

	HAL_TIM_Base_Start_IT(CONTROL_TIM);
 80078e4:	483b      	ldr	r0, [pc, #236]	@ (80079d4 <plotter_begin+0x73c>)
 80078e6:	f004 fdfb 	bl	800c4e0 <HAL_TIM_Base_Start_IT>

	plotter_reset();
 80078ea:	f000 f875 	bl	80079d8 <plotter_reset>
}
 80078ee:	bf00      	nop
 80078f0:	3704      	adds	r7, #4
 80078f2:	46bd      	mov	sp, r7
 80078f4:	ecbd 8b02 	vpop	{d8}
 80078f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80078fc:	f3af 8000 	nop.w
 8007900:	9999999a 	.word	0x9999999a
 8007904:	40019999 	.word	0x40019999
 8007908:	20001c50 	.word	0x20001c50
 800790c:	2000043c 	.word	0x2000043c
 8007910:	00000000 	.word	0x00000000
 8007914:	20001b84 	.word	0x20001b84
 8007918:	20000498 	.word	0x20000498
 800791c:	20001d1c 	.word	0x20001d1c
 8007920:	200003a4 	.word	0x200003a4
 8007924:	48000800 	.word	0x48000800
 8007928:	200003f0 	.word	0x200003f0
 800792c:	20001920 	.word	0x20001920
 8007930:	200005ac 	.word	0x200005ac
 8007934:	44fa0000 	.word	0x44fa0000
 8007938:	20000080 	.word	0x20000080
 800793c:	42f00000 	.word	0x42f00000
 8007940:	2edbe6ff 	.word	0x2edbe6ff
 8007944:	42960000 	.word	0x42960000
 8007948:	200004f4 	.word	0x200004f4
 800794c:	3727c5ac 	.word	0x3727c5ac
 8007950:	43160000 	.word	0x43160000
 8007954:	2000051c 	.word	0x2000051c
 8007958:	20000000 	.word	0x20000000
 800795c:	3d4ccccd 	.word	0x3d4ccccd
 8007960:	20000544 	.word	0x20000544
 8007964:	42480000 	.word	0x42480000
 8007968:	458ca000 	.word	0x458ca000
 800796c:	2000056c 	.word	0x2000056c
 8007970:	200005a0 	.word	0x200005a0
 8007974:	20000594 	.word	0x20000594
 8007978:	20000100 	.word	0x20000100
 800797c:	200005a4 	.word	0x200005a4
 8007980:	20000598 	.word	0x20000598
 8007984:	457ff000 	.word	0x457ff000
 8007988:	40533333 	.word	0x40533333
 800798c:	20000a90 	.word	0x20000a90
 8007990:	200001ac 	.word	0x200001ac
 8007994:	200005c4 	.word	0x200005c4
 8007998:	45000000 	.word	0x45000000
 800799c:	447a0000 	.word	0x447a0000
 80079a0:	20000a6c 	.word	0x20000a6c
 80079a4:	20000a60 	.word	0x20000a60
 80079a8:	20000a84 	.word	0x20000a84
 80079ac:	20000a78 	.word	0x20000a78
 80079b0:	3a83126f 	.word	0x3a83126f
 80079b4:	200011c0 	.word	0x200011c0
 80079b8:	200018ec 	.word	0x200018ec
 80079bc:	200018ac 	.word	0x200018ac
 80079c0:	2000152c 	.word	0x2000152c
 80079c4:	20001030 	.word	0x20001030
 80079c8:	20001de8 	.word	0x20001de8
 80079cc:	20001f80 	.word	0x20001f80
 80079d0:	20000b58 	.word	0x20000b58
 80079d4:	200019ec 	.word	0x200019ec

080079d8 <plotter_reset>:

void plotter_reset() {
 80079d8:	b480      	push	{r7}
 80079da:	af00      	add	r7, sp, #0
	prismatic_encoder.diff_counts = 0;
 80079dc:	4b18      	ldr	r3, [pc, #96]	@ (8007a40 <plotter_reset+0x68>)
 80079de:	2200      	movs	r2, #0
 80079e0:	625a      	str	r2, [r3, #36]	@ 0x24
	prismatic_encoder.rpm = 0;
 80079e2:	4b17      	ldr	r3, [pc, #92]	@ (8007a40 <plotter_reset+0x68>)
 80079e4:	f04f 0200 	mov.w	r2, #0
 80079e8:	631a      	str	r2, [r3, #48]	@ 0x30
	prismatic_encoder.pulses = 0;
 80079ea:	4b15      	ldr	r3, [pc, #84]	@ (8007a40 <plotter_reset+0x68>)
 80079ec:	2200      	movs	r2, #0
 80079ee:	639a      	str	r2, [r3, #56]	@ 0x38
	prismatic_encoder.revs = 0;
 80079f0:	4b13      	ldr	r3, [pc, #76]	@ (8007a40 <plotter_reset+0x68>)
 80079f2:	f04f 0200 	mov.w	r2, #0
 80079f6:	63da      	str	r2, [r3, #60]	@ 0x3c
	prismatic_encoder.rads = 0;
 80079f8:	4b11      	ldr	r3, [pc, #68]	@ (8007a40 <plotter_reset+0x68>)
 80079fa:	f04f 0200 	mov.w	r2, #0
 80079fe:	641a      	str	r2, [r3, #64]	@ 0x40
	prismatic_encoder.mm = 0;
 8007a00:	4b0f      	ldr	r3, [pc, #60]	@ (8007a40 <plotter_reset+0x68>)
 8007a02:	f04f 0200 	mov.w	r2, #0
 8007a06:	649a      	str	r2, [r3, #72]	@ 0x48

	revolute_encoder.diff_counts = 0;
 8007a08:	4b0e      	ldr	r3, [pc, #56]	@ (8007a44 <plotter_reset+0x6c>)
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	625a      	str	r2, [r3, #36]	@ 0x24
	revolute_encoder.rpm = 0;
 8007a0e:	4b0d      	ldr	r3, [pc, #52]	@ (8007a44 <plotter_reset+0x6c>)
 8007a10:	f04f 0200 	mov.w	r2, #0
 8007a14:	631a      	str	r2, [r3, #48]	@ 0x30
	revolute_encoder.pulses = 0;
 8007a16:	4b0b      	ldr	r3, [pc, #44]	@ (8007a44 <plotter_reset+0x6c>)
 8007a18:	2200      	movs	r2, #0
 8007a1a:	639a      	str	r2, [r3, #56]	@ 0x38
	revolute_encoder.revs = 0;
 8007a1c:	4b09      	ldr	r3, [pc, #36]	@ (8007a44 <plotter_reset+0x6c>)
 8007a1e:	f04f 0200 	mov.w	r2, #0
 8007a22:	63da      	str	r2, [r3, #60]	@ 0x3c
	revolute_encoder.rads = 0;
 8007a24:	4b07      	ldr	r3, [pc, #28]	@ (8007a44 <plotter_reset+0x6c>)
 8007a26:	f04f 0200 	mov.w	r2, #0
 8007a2a:	641a      	str	r2, [r3, #64]	@ 0x40
	revolute_encoder.mm = 0;
 8007a2c:	4b05      	ldr	r3, [pc, #20]	@ (8007a44 <plotter_reset+0x6c>)
 8007a2e:	f04f 0200 	mov.w	r2, #0
 8007a32:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8007a34:	bf00      	nop
 8007a36:	46bd      	mov	sp, r7
 8007a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3c:	4770      	bx	lr
 8007a3e:	bf00      	nop
 8007a40:	2000043c 	.word	0x2000043c
 8007a44:	20000498 	.word	0x20000498

08007a48 <plotter_update_sensors>:

void plotter_update_sensors() {
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	af00      	add	r7, sp, #0
    joystick_x = ADC_DMA_GetJoystickValue(&joystick, JOYSTICK_X_CHANNEL, -50, 50);
 8007a4c:	eddf 0a41 	vldr	s1, [pc, #260]	@ 8007b54 <plotter_update_sensors+0x10c>
 8007a50:	ed9f 0a41 	vldr	s0, [pc, #260]	@ 8007b58 <plotter_update_sensors+0x110>
 8007a54:	2106      	movs	r1, #6
 8007a56:	4841      	ldr	r0, [pc, #260]	@ (8007b5c <plotter_update_sensors+0x114>)
 8007a58:	f7f9 fb3e 	bl	80010d8 <ADC_DMA_GetJoystickValue>
 8007a5c:	eef0 7a40 	vmov.f32	s15, s0
 8007a60:	4b3f      	ldr	r3, [pc, #252]	@ (8007b60 <plotter_update_sensors+0x118>)
 8007a62:	edc3 7a00 	vstr	s15, [r3]
    joystick_y = ADC_DMA_GetJoystickValue(&joystick, JOYSTICK_Y_CHANNEL, -50, 50);
 8007a66:	eddf 0a3b 	vldr	s1, [pc, #236]	@ 8007b54 <plotter_update_sensors+0x10c>
 8007a6a:	ed9f 0a3b 	vldr	s0, [pc, #236]	@ 8007b58 <plotter_update_sensors+0x110>
 8007a6e:	2107      	movs	r1, #7
 8007a70:	483a      	ldr	r0, [pc, #232]	@ (8007b5c <plotter_update_sensors+0x114>)
 8007a72:	f7f9 fb31 	bl	80010d8 <ADC_DMA_GetJoystickValue>
 8007a76:	eef0 7a40 	vmov.f32	s15, s0
 8007a7a:	4b3a      	ldr	r3, [pc, #232]	@ (8007b64 <plotter_update_sensors+0x11c>)
 8007a7c:	edc3 7a00 	vstr	s15, [r3]

    b1 = !HAL_GPIO_ReadPin(J1_GPIO_Port, J1_Pin);
 8007a80:	2180      	movs	r1, #128	@ 0x80
 8007a82:	4839      	ldr	r0, [pc, #228]	@ (8007b68 <plotter_update_sensors+0x120>)
 8007a84:	f003 fbc6 	bl	800b214 <HAL_GPIO_ReadPin>
 8007a88:	4603      	mov	r3, r0
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	bf0c      	ite	eq
 8007a8e:	2301      	moveq	r3, #1
 8007a90:	2300      	movne	r3, #0
 8007a92:	b2db      	uxtb	r3, r3
 8007a94:	461a      	mov	r2, r3
 8007a96:	4b35      	ldr	r3, [pc, #212]	@ (8007b6c <plotter_update_sensors+0x124>)
 8007a98:	601a      	str	r2, [r3, #0]
    b2 = !HAL_GPIO_ReadPin(J2_GPIO_Port, J2_Pin);
 8007a9a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8007a9e:	4834      	ldr	r0, [pc, #208]	@ (8007b70 <plotter_update_sensors+0x128>)
 8007aa0:	f003 fbb8 	bl	800b214 <HAL_GPIO_ReadPin>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	bf0c      	ite	eq
 8007aaa:	2301      	moveq	r3, #1
 8007aac:	2300      	movne	r3, #0
 8007aae:	b2db      	uxtb	r3, r3
 8007ab0:	461a      	mov	r2, r3
 8007ab2:	4b30      	ldr	r3, [pc, #192]	@ (8007b74 <plotter_update_sensors+0x12c>)
 8007ab4:	601a      	str	r2, [r3, #0]
    b3 = !HAL_GPIO_ReadPin(J3_GPIO_Port, J3_Pin);
 8007ab6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007aba:	482d      	ldr	r0, [pc, #180]	@ (8007b70 <plotter_update_sensors+0x128>)
 8007abc:	f003 fbaa 	bl	800b214 <HAL_GPIO_ReadPin>
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	bf0c      	ite	eq
 8007ac6:	2301      	moveq	r3, #1
 8007ac8:	2300      	movne	r3, #0
 8007aca:	b2db      	uxtb	r3, r3
 8007acc:	461a      	mov	r2, r3
 8007ace:	4b2a      	ldr	r3, [pc, #168]	@ (8007b78 <plotter_update_sensors+0x130>)
 8007ad0:	601a      	str	r2, [r3, #0]
    b4 = !HAL_GPIO_ReadPin(J4_GPIO_Port, J4_Pin);
 8007ad2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8007ad6:	4826      	ldr	r0, [pc, #152]	@ (8007b70 <plotter_update_sensors+0x128>)
 8007ad8:	f003 fb9c 	bl	800b214 <HAL_GPIO_ReadPin>
 8007adc:	4603      	mov	r3, r0
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	bf0c      	ite	eq
 8007ae2:	2301      	moveq	r3, #1
 8007ae4:	2300      	movne	r3, #0
 8007ae6:	b2db      	uxtb	r3, r3
 8007ae8:	461a      	mov	r2, r3
 8007aea:	4b24      	ldr	r3, [pc, #144]	@ (8007b7c <plotter_update_sensors+0x134>)
 8007aec:	601a      	str	r2, [r3, #0]

    up_lim = HAL_GPIO_ReadPin(UPPER_LIM_GPIO_Port, UPPER_LIM_Pin);
 8007aee:	2104      	movs	r1, #4
 8007af0:	481d      	ldr	r0, [pc, #116]	@ (8007b68 <plotter_update_sensors+0x120>)
 8007af2:	f003 fb8f 	bl	800b214 <HAL_GPIO_ReadPin>
 8007af6:	4603      	mov	r3, r0
 8007af8:	461a      	mov	r2, r3
 8007afa:	4b21      	ldr	r3, [pc, #132]	@ (8007b80 <plotter_update_sensors+0x138>)
 8007afc:	601a      	str	r2, [r3, #0]
    low_lim = HAL_GPIO_ReadPin(LOWER_LIM_GPIO_Port, LOWER_LIM_Pin);
 8007afe:	2102      	movs	r1, #2
 8007b00:	4819      	ldr	r0, [pc, #100]	@ (8007b68 <plotter_update_sensors+0x120>)
 8007b02:	f003 fb87 	bl	800b214 <HAL_GPIO_ReadPin>
 8007b06:	4603      	mov	r3, r0
 8007b08:	461a      	mov	r2, r3
 8007b0a:	4b1e      	ldr	r3, [pc, #120]	@ (8007b84 <plotter_update_sensors+0x13c>)
 8007b0c:	601a      	str	r2, [r3, #0]

    // Check current photo sensor states (these will be overridden by EXTI when triggered during homing)
    // Only update from GPIO when not homing to preserve EXTI-triggered states during homing
    extern bool homing_active; // Reference to homing_active from main.c
    if (!homing_active) {
 8007b0e:	4b1e      	ldr	r3, [pc, #120]	@ (8007b88 <plotter_update_sensors+0x140>)
 8007b10:	781b      	ldrb	r3, [r3, #0]
 8007b12:	f083 0301 	eor.w	r3, r3, #1
 8007b16:	b2db      	uxtb	r3, r3
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d018      	beq.n	8007b4e <plotter_update_sensors+0x106>
        extern volatile bool up_photo, low_photo; // Reference to photo flags from main.c
        up_photo = HAL_GPIO_ReadPin(UPPER_PHOTO_GPIO_Port, UPPER_PHOTO_Pin);
 8007b1c:	2101      	movs	r1, #1
 8007b1e:	4812      	ldr	r0, [pc, #72]	@ (8007b68 <plotter_update_sensors+0x120>)
 8007b20:	f003 fb78 	bl	800b214 <HAL_GPIO_ReadPin>
 8007b24:	4603      	mov	r3, r0
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	bf14      	ite	ne
 8007b2a:	2301      	movne	r3, #1
 8007b2c:	2300      	moveq	r3, #0
 8007b2e:	b2da      	uxtb	r2, r3
 8007b30:	4b16      	ldr	r3, [pc, #88]	@ (8007b8c <plotter_update_sensors+0x144>)
 8007b32:	701a      	strb	r2, [r3, #0]
        low_photo = HAL_GPIO_ReadPin(LOWER_PHOTO_GPIO_Port, LOWER_PHOTO_Pin);
 8007b34:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8007b38:	480b      	ldr	r0, [pc, #44]	@ (8007b68 <plotter_update_sensors+0x120>)
 8007b3a:	f003 fb6b 	bl	800b214 <HAL_GPIO_ReadPin>
 8007b3e:	4603      	mov	r3, r0
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	bf14      	ite	ne
 8007b44:	2301      	movne	r3, #1
 8007b46:	2300      	moveq	r3, #0
 8007b48:	b2da      	uxtb	r2, r3
 8007b4a:	4b11      	ldr	r3, [pc, #68]	@ (8007b90 <plotter_update_sensors+0x148>)
 8007b4c:	701a      	strb	r2, [r3, #0]
    }
}
 8007b4e:	bf00      	nop
 8007b50:	bd80      	pop	{r7, pc}
 8007b52:	bf00      	nop
 8007b54:	42480000 	.word	0x42480000
 8007b58:	c2480000 	.word	0xc2480000
 8007b5c:	200005c4 	.word	0x200005c4
 8007b60:	200018fc 	.word	0x200018fc
 8007b64:	20001900 	.word	0x20001900
 8007b68:	48000400 	.word	0x48000400
 8007b6c:	2000190c 	.word	0x2000190c
 8007b70:	48000800 	.word	0x48000800
 8007b74:	20001910 	.word	0x20001910
 8007b78:	20001914 	.word	0x20001914
 8007b7c:	20001918 	.word	0x20001918
 8007b80:	20001904 	.word	0x20001904
 8007b84:	20001908 	.word	0x20001908
 8007b88:	20000367 	.word	0x20000367
 8007b8c:	20000364 	.word	0x20000364
 8007b90:	20000365 	.word	0x20000365

08007b94 <plotter_pen_up>:

void plotter_pen_up() {
 8007b94:	b580      	push	{r7, lr}
 8007b96:	af00      	add	r7, sp, #0
	PWM_write_duty(&servo, 50, 7);
 8007b98:	eef1 0a0c 	vmov.f32	s1, #28	@ 0x40e00000  7.0
 8007b9c:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 8007bac <plotter_pen_up+0x18>
 8007ba0:	4803      	ldr	r0, [pc, #12]	@ (8007bb0 <plotter_pen_up+0x1c>)
 8007ba2:	f7fb fc3d 	bl	8003420 <PWM_write_duty>
}
 8007ba6:	bf00      	nop
 8007ba8:	bd80      	pop	{r7, pc}
 8007baa:	bf00      	nop
 8007bac:	42480000 	.word	0x42480000
 8007bb0:	200005ac 	.word	0x200005ac

08007bb4 <plotter_pen_down>:

void plotter_pen_down() {
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	af00      	add	r7, sp, #0
	PWM_write_duty(&servo, 50, 12);
 8007bb8:	eef2 0a08 	vmov.f32	s1, #40	@ 0x41400000  12.0
 8007bbc:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 8007bcc <plotter_pen_down+0x18>
 8007bc0:	4803      	ldr	r0, [pc, #12]	@ (8007bd0 <plotter_pen_down+0x1c>)
 8007bc2:	f7fb fc2d 	bl	8003420 <PWM_write_duty>
}
 8007bc6:	bf00      	nop
 8007bc8:	bd80      	pop	{r7, pc}
 8007bca:	bf00      	nop
 8007bcc:	42480000 	.word	0x42480000
 8007bd0:	200005ac 	.word	0x200005ac

08007bd4 <SIGNAL_init>:
    if (value > max_setpoint) return max_setpoint;
    return value;
}

// Initialization function
void SIGNAL_init(SignalGenerator* sg, SignalType type) {
 8007bd4:	b480      	push	{r7}
 8007bd6:	b083      	sub	sp, #12
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
 8007bdc:	460b      	mov	r3, r1
 8007bde:	70fb      	strb	r3, [r7, #3]
    // Reset all parameters
    sg->type = type;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	78fa      	ldrb	r2, [r7, #3]
 8007be4:	701a      	strb	r2, [r3, #0]
    sg->amplitude = 1.0f;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8007bec:	605a      	str	r2, [r3, #4]
    sg->frequency = 1.0f;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8007bf4:	609a      	str	r2, [r3, #8]
    sg->phase = 0.0f;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f04f 0200 	mov.w	r2, #0
 8007bfc:	60da      	str	r2, [r3, #12]
    sg->offset = 0.0f;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f04f 0200 	mov.w	r2, #0
 8007c04:	611a      	str	r2, [r3, #16]
    sg->current_phase = 0.0f;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f04f 0200 	mov.w	r2, #0
 8007c0c:	635a      	str	r2, [r3, #52]	@ 0x34
    sg->time_elapsed = 0.0f;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f04f 0200 	mov.w	r2, #0
 8007c14:	639a      	str	r2, [r3, #56]	@ 0x38
    sg->min_setpoint = -1.0f;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	4a1b      	ldr	r2, [pc, #108]	@ (8007c88 <SIGNAL_init+0xb4>)
 8007c1a:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = 1.0f;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8007c22:	641a      	str	r2, [r3, #64]	@ 0x40

    // Type-specific initializations
    switch (type) {
 8007c24:	78fb      	ldrb	r3, [r7, #3]
 8007c26:	2b03      	cmp	r3, #3
 8007c28:	d828      	bhi.n	8007c7c <SIGNAL_init+0xa8>
 8007c2a:	a201      	add	r2, pc, #4	@ (adr r2, 8007c30 <SIGNAL_init+0x5c>)
 8007c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c30:	08007c7b 	.word	0x08007c7b
 8007c34:	08007c41 	.word	0x08007c41
 8007c38:	08007c5f 	.word	0x08007c5f
 8007c3c:	08007c69 	.word	0x08007c69
        case SIGNAL_SINE:
            break;
        case SIGNAL_CHIRP:
            sg->chirp_type = CHIRP_LINEAR;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2200      	movs	r2, #0
 8007c44:	751a      	strb	r2, [r3, #20]
            sg->f_start = 1.0f;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8007c4c:	619a      	str	r2, [r3, #24]
            sg->f_end = 10.0f;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	4a0e      	ldr	r2, [pc, #56]	@ (8007c8c <SIGNAL_init+0xb8>)
 8007c52:	61da      	str	r2, [r3, #28]
            sg->duration = 1.0f;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8007c5a:	621a      	str	r2, [r3, #32]
            break;
 8007c5c:	e00e      	b.n	8007c7c <SIGNAL_init+0xa8>
        case SIGNAL_SQUARE:
            sg->duty_cycle = 0.5f;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8007c64:	629a      	str	r2, [r3, #40]	@ 0x28
            break;
 8007c66:	e009      	b.n	8007c7c <SIGNAL_init+0xa8>
        case SIGNAL_RAMP:
            sg->ramp_start = 0.0f;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f04f 0200 	mov.w	r2, #0
 8007c6e:	62da      	str	r2, [r3, #44]	@ 0x2c
            sg->ramp_end = 1.0f;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8007c76:	631a      	str	r2, [r3, #48]	@ 0x30
            break;
 8007c78:	e000      	b.n	8007c7c <SIGNAL_init+0xa8>
            break;
 8007c7a:	bf00      	nop
    }
}
 8007c7c:	bf00      	nop
 8007c7e:	370c      	adds	r7, #12
 8007c80:	46bd      	mov	sp, r7
 8007c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c86:	4770      	bx	lr
 8007c88:	bf800000 	.word	0xbf800000
 8007c8c:	41200000 	.word	0x41200000

08007c90 <SIGNAL_config_sine>:
                        float32_t amplitude,
                        float32_t frequency,
                        float32_t phase,
                        float32_t offset,
                        float32_t min_setpoint,
                        float32_t max_setpoint) {
 8007c90:	b480      	push	{r7}
 8007c92:	b089      	sub	sp, #36	@ 0x24
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	61f8      	str	r0, [r7, #28]
 8007c98:	ed87 0a06 	vstr	s0, [r7, #24]
 8007c9c:	edc7 0a05 	vstr	s1, [r7, #20]
 8007ca0:	ed87 1a04 	vstr	s2, [r7, #16]
 8007ca4:	edc7 1a03 	vstr	s3, [r7, #12]
 8007ca8:	ed87 2a02 	vstr	s4, [r7, #8]
 8007cac:	edc7 2a01 	vstr	s5, [r7, #4]
    sg->type = SIGNAL_SINE;
 8007cb0:	69fb      	ldr	r3, [r7, #28]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 8007cb6:	69fb      	ldr	r3, [r7, #28]
 8007cb8:	69ba      	ldr	r2, [r7, #24]
 8007cba:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 8007cbc:	69fb      	ldr	r3, [r7, #28]
 8007cbe:	697a      	ldr	r2, [r7, #20]
 8007cc0:	609a      	str	r2, [r3, #8]
    sg->phase = phase;
 8007cc2:	69fb      	ldr	r3, [r7, #28]
 8007cc4:	693a      	ldr	r2, [r7, #16]
 8007cc6:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 8007cc8:	69fb      	ldr	r3, [r7, #28]
 8007cca:	68fa      	ldr	r2, [r7, #12]
 8007ccc:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 8007cce:	69fb      	ldr	r3, [r7, #28]
 8007cd0:	68ba      	ldr	r2, [r7, #8]
 8007cd2:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 8007cd4:	69fb      	ldr	r3, [r7, #28]
 8007cd6:	687a      	ldr	r2, [r7, #4]
 8007cd8:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8007cda:	bf00      	nop
 8007cdc:	3724      	adds	r7, #36	@ 0x24
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce4:	4770      	bx	lr

08007ce6 <SIGNAL_config_square>:
                          float32_t frequency,
                          float32_t duty_cycle,
                          float32_t phase,
                          float32_t offset,
                          float32_t min_setpoint,
                          float32_t max_setpoint) {
 8007ce6:	b480      	push	{r7}
 8007ce8:	b089      	sub	sp, #36	@ 0x24
 8007cea:	af00      	add	r7, sp, #0
 8007cec:	61f8      	str	r0, [r7, #28]
 8007cee:	ed87 0a06 	vstr	s0, [r7, #24]
 8007cf2:	edc7 0a05 	vstr	s1, [r7, #20]
 8007cf6:	ed87 1a04 	vstr	s2, [r7, #16]
 8007cfa:	edc7 1a03 	vstr	s3, [r7, #12]
 8007cfe:	ed87 2a02 	vstr	s4, [r7, #8]
 8007d02:	edc7 2a01 	vstr	s5, [r7, #4]
 8007d06:	ed87 3a00 	vstr	s6, [r7]
    sg->type = SIGNAL_SQUARE;
 8007d0a:	69fb      	ldr	r3, [r7, #28]
 8007d0c:	2202      	movs	r2, #2
 8007d0e:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 8007d10:	69fb      	ldr	r3, [r7, #28]
 8007d12:	69ba      	ldr	r2, [r7, #24]
 8007d14:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 8007d16:	69fb      	ldr	r3, [r7, #28]
 8007d18:	697a      	ldr	r2, [r7, #20]
 8007d1a:	609a      	str	r2, [r3, #8]
    sg->duty_cycle = duty_cycle;
 8007d1c:	69fb      	ldr	r3, [r7, #28]
 8007d1e:	693a      	ldr	r2, [r7, #16]
 8007d20:	629a      	str	r2, [r3, #40]	@ 0x28
    sg->phase = phase;
 8007d22:	69fb      	ldr	r3, [r7, #28]
 8007d24:	68fa      	ldr	r2, [r7, #12]
 8007d26:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 8007d28:	69fb      	ldr	r3, [r7, #28]
 8007d2a:	68ba      	ldr	r2, [r7, #8]
 8007d2c:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 8007d2e:	69fb      	ldr	r3, [r7, #28]
 8007d30:	687a      	ldr	r2, [r7, #4]
 8007d32:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 8007d34:	69fb      	ldr	r3, [r7, #28]
 8007d36:	683a      	ldr	r2, [r7, #0]
 8007d38:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8007d3a:	bf00      	nop
 8007d3c:	3724      	adds	r7, #36	@ 0x24
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d44:	4770      	bx	lr
	...

08007d48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b082      	sub	sp, #8
 8007d4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007d4e:	4b0f      	ldr	r3, [pc, #60]	@ (8007d8c <HAL_MspInit+0x44>)
 8007d50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d52:	4a0e      	ldr	r2, [pc, #56]	@ (8007d8c <HAL_MspInit+0x44>)
 8007d54:	f043 0301 	orr.w	r3, r3, #1
 8007d58:	6613      	str	r3, [r2, #96]	@ 0x60
 8007d5a:	4b0c      	ldr	r3, [pc, #48]	@ (8007d8c <HAL_MspInit+0x44>)
 8007d5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d5e:	f003 0301 	and.w	r3, r3, #1
 8007d62:	607b      	str	r3, [r7, #4]
 8007d64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007d66:	4b09      	ldr	r3, [pc, #36]	@ (8007d8c <HAL_MspInit+0x44>)
 8007d68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d6a:	4a08      	ldr	r2, [pc, #32]	@ (8007d8c <HAL_MspInit+0x44>)
 8007d6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007d70:	6593      	str	r3, [r2, #88]	@ 0x58
 8007d72:	4b06      	ldr	r3, [pc, #24]	@ (8007d8c <HAL_MspInit+0x44>)
 8007d74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007d7a:	603b      	str	r3, [r7, #0]
 8007d7c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8007d7e:	f003 fb4f 	bl	800b420 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007d82:	bf00      	nop
 8007d84:	3708      	adds	r7, #8
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}
 8007d8a:	bf00      	nop
 8007d8c:	40021000 	.word	0x40021000

08007d90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007d90:	b480      	push	{r7}
 8007d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8007d94:	bf00      	nop
 8007d96:	e7fd      	b.n	8007d94 <NMI_Handler+0x4>

08007d98 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007d98:	b480      	push	{r7}
 8007d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007d9c:	bf00      	nop
 8007d9e:	e7fd      	b.n	8007d9c <HardFault_Handler+0x4>

08007da0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007da0:	b480      	push	{r7}
 8007da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007da4:	bf00      	nop
 8007da6:	e7fd      	b.n	8007da4 <MemManage_Handler+0x4>

08007da8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007da8:	b480      	push	{r7}
 8007daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007dac:	bf00      	nop
 8007dae:	e7fd      	b.n	8007dac <BusFault_Handler+0x4>

08007db0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007db0:	b480      	push	{r7}
 8007db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007db4:	bf00      	nop
 8007db6:	e7fd      	b.n	8007db4 <UsageFault_Handler+0x4>

08007db8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007db8:	b480      	push	{r7}
 8007dba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007dbc:	bf00      	nop
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc4:	4770      	bx	lr

08007dc6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007dc6:	b480      	push	{r7}
 8007dc8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007dca:	bf00      	nop
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd2:	4770      	bx	lr

08007dd4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007dd8:	bf00      	nop
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de0:	4770      	bx	lr

08007de2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007de2:	b580      	push	{r7, lr}
 8007de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007de6:	f000 ffbb 	bl	8008d60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007dea:	bf00      	nop
 8007dec:	bd80      	pop	{r7, pc}

08007dee <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8007dee:	b580      	push	{r7, lr}
 8007df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(UPPER_PHOTO_Pin);
 8007df2:	2001      	movs	r0, #1
 8007df4:	f003 fa58 	bl	800b2a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8007df8:	bf00      	nop
 8007dfa:	bd80      	pop	{r7, pc}

08007dfc <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EMER_Pin);
 8007e00:	2010      	movs	r0, #16
 8007e02:	f003 fa51 	bl	800b2a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8007e06:	bf00      	nop
 8007e08:	bd80      	pop	{r7, pc}
	...

08007e0c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8007e10:	4802      	ldr	r0, [pc, #8]	@ (8007e1c <DMA1_Channel1_IRQHandler+0x10>)
 8007e12:	f002 ff2e 	bl	800ac72 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8007e16:	bf00      	nop
 8007e18:	bd80      	pop	{r7, pc}
 8007e1a:	bf00      	nop
 8007e1c:	20000218 	.word	0x20000218

08007e20 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8007e24:	4802      	ldr	r0, [pc, #8]	@ (8007e30 <DMA1_Channel2_IRQHandler+0x10>)
 8007e26:	f002 ff24 	bl	800ac72 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8007e2a:	bf00      	nop
 8007e2c:	bd80      	pop	{r7, pc}
 8007e2e:	bf00      	nop
 8007e30:	2000210c 	.word	0x2000210c

08007e34 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8007e38:	4802      	ldr	r0, [pc, #8]	@ (8007e44 <DMA1_Channel3_IRQHandler+0x10>)
 8007e3a:	f002 ff1a 	bl	800ac72 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8007e3e:	bf00      	nop
 8007e40:	bd80      	pop	{r7, pc}
 8007e42:	bf00      	nop
 8007e44:	2000216c 	.word	0x2000216c

08007e48 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8007e4c:	4802      	ldr	r0, [pc, #8]	@ (8007e58 <DMA1_Channel4_IRQHandler+0x10>)
 8007e4e:	f002 ff10 	bl	800ac72 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8007e52:	bf00      	nop
 8007e54:	bd80      	pop	{r7, pc}
 8007e56:	bf00      	nop
 8007e58:	2000204c 	.word	0x2000204c

08007e5c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8007e60:	4802      	ldr	r0, [pc, #8]	@ (8007e6c <DMA1_Channel5_IRQHandler+0x10>)
 8007e62:	f002 ff06 	bl	800ac72 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8007e66:	bf00      	nop
 8007e68:	bd80      	pop	{r7, pc}
 8007e6a:	bf00      	nop
 8007e6c:	200020ac 	.word	0x200020ac

08007e70 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PROX_Pin);
 8007e74:	2040      	movs	r0, #64	@ 0x40
 8007e76:	f003 fa17 	bl	800b2a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(J1_Pin);
 8007e7a:	2080      	movs	r0, #128	@ 0x80
 8007e7c:	f003 fa14 	bl	800b2a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8007e80:	bf00      	nop
 8007e82:	bd80      	pop	{r7, pc}

08007e84 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8007e88:	4803      	ldr	r0, [pc, #12]	@ (8007e98 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8007e8a:	f004 ff4f 	bl	800cd2c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8007e8e:	4803      	ldr	r0, [pc, #12]	@ (8007e9c <TIM1_UP_TIM16_IRQHandler+0x18>)
 8007e90:	f004 ff4c 	bl	800cd2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8007e94:	bf00      	nop
 8007e96:	bd80      	pop	{r7, pc}
 8007e98:	20001920 	.word	0x20001920
 8007e9c:	20001de8 	.word	0x20001de8

08007ea0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8007ea4:	4802      	ldr	r0, [pc, #8]	@ (8007eb0 <TIM2_IRQHandler+0x10>)
 8007ea6:	f004 ff41 	bl	800cd2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8007eaa:	bf00      	nop
 8007eac:	bd80      	pop	{r7, pc}
 8007eae:	bf00      	nop
 8007eb0:	200019ec 	.word	0x200019ec

08007eb4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8007eb8:	4802      	ldr	r0, [pc, #8]	@ (8007ec4 <TIM3_IRQHandler+0x10>)
 8007eba:	f004 ff37 	bl	800cd2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8007ebe:	bf00      	nop
 8007ec0:	bd80      	pop	{r7, pc}
 8007ec2:	bf00      	nop
 8007ec4:	20001ab8 	.word	0x20001ab8

08007ec8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8007ecc:	4802      	ldr	r0, [pc, #8]	@ (8007ed8 <TIM4_IRQHandler+0x10>)
 8007ece:	f004 ff2d 	bl	800cd2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8007ed2:	bf00      	nop
 8007ed4:	bd80      	pop	{r7, pc}
 8007ed6:	bf00      	nop
 8007ed8:	20001b84 	.word	0x20001b84

08007edc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8007ee0:	4802      	ldr	r0, [pc, #8]	@ (8007eec <USART2_IRQHandler+0x10>)
 8007ee2:	f006 fc77 	bl	800e7d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8007ee6:	bf00      	nop
 8007ee8:	bd80      	pop	{r7, pc}
 8007eea:	bf00      	nop
 8007eec:	20001f80 	.word	0x20001f80

08007ef0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(J3_Pin);
 8007ef4:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8007ef8:	f003 f9d6 	bl	800b2a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(J4_Pin);
 8007efc:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8007f00:	f003 f9d2 	bl	800b2a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LOWER_PHOTO_Pin);
 8007f04:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8007f08:	f003 f9ce 	bl	800b2a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8007f0c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8007f10:	f003 f9ca 	bl	800b2a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8007f14:	bf00      	nop
 8007f16:	bd80      	pop	{r7, pc}

08007f18 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8007f1c:	4802      	ldr	r0, [pc, #8]	@ (8007f28 <LPUART1_IRQHandler+0x10>)
 8007f1e:	f006 fc59 	bl	800e7d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8007f22:	bf00      	nop
 8007f24:	bd80      	pop	{r7, pc}
 8007f26:	bf00      	nop
 8007f28:	20001eb4 	.word	0x20001eb4

08007f2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b086      	sub	sp, #24
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007f34:	4a14      	ldr	r2, [pc, #80]	@ (8007f88 <_sbrk+0x5c>)
 8007f36:	4b15      	ldr	r3, [pc, #84]	@ (8007f8c <_sbrk+0x60>)
 8007f38:	1ad3      	subs	r3, r2, r3
 8007f3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007f3c:	697b      	ldr	r3, [r7, #20]
 8007f3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007f40:	4b13      	ldr	r3, [pc, #76]	@ (8007f90 <_sbrk+0x64>)
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d102      	bne.n	8007f4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007f48:	4b11      	ldr	r3, [pc, #68]	@ (8007f90 <_sbrk+0x64>)
 8007f4a:	4a12      	ldr	r2, [pc, #72]	@ (8007f94 <_sbrk+0x68>)
 8007f4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007f4e:	4b10      	ldr	r3, [pc, #64]	@ (8007f90 <_sbrk+0x64>)
 8007f50:	681a      	ldr	r2, [r3, #0]
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	4413      	add	r3, r2
 8007f56:	693a      	ldr	r2, [r7, #16]
 8007f58:	429a      	cmp	r2, r3
 8007f5a:	d207      	bcs.n	8007f6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007f5c:	f008 fec8 	bl	8010cf0 <__errno>
 8007f60:	4603      	mov	r3, r0
 8007f62:	220c      	movs	r2, #12
 8007f64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007f66:	f04f 33ff 	mov.w	r3, #4294967295
 8007f6a:	e009      	b.n	8007f80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007f6c:	4b08      	ldr	r3, [pc, #32]	@ (8007f90 <_sbrk+0x64>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007f72:	4b07      	ldr	r3, [pc, #28]	@ (8007f90 <_sbrk+0x64>)
 8007f74:	681a      	ldr	r2, [r3, #0]
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	4413      	add	r3, r2
 8007f7a:	4a05      	ldr	r2, [pc, #20]	@ (8007f90 <_sbrk+0x64>)
 8007f7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	3718      	adds	r7, #24
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd80      	pop	{r7, pc}
 8007f88:	20020000 	.word	0x20020000
 8007f8c:	00000400 	.word	0x00000400
 8007f90:	2000191c 	.word	0x2000191c
 8007f94:	20002318 	.word	0x20002318

08007f98 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8007f98:	b480      	push	{r7}
 8007f9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8007f9c:	4b06      	ldr	r3, [pc, #24]	@ (8007fb8 <SystemInit+0x20>)
 8007f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007fa2:	4a05      	ldr	r2, [pc, #20]	@ (8007fb8 <SystemInit+0x20>)
 8007fa4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007fa8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007fac:	bf00      	nop
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb4:	4770      	bx	lr
 8007fb6:	bf00      	nop
 8007fb8:	e000ed00 	.word	0xe000ed00

08007fbc <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b098      	sub	sp, #96	@ 0x60
 8007fc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007fc2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	601a      	str	r2, [r3, #0]
 8007fca:	605a      	str	r2, [r3, #4]
 8007fcc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007fce:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	601a      	str	r2, [r3, #0]
 8007fd6:	605a      	str	r2, [r3, #4]
 8007fd8:	609a      	str	r2, [r3, #8]
 8007fda:	60da      	str	r2, [r3, #12]
 8007fdc:	611a      	str	r2, [r3, #16]
 8007fde:	615a      	str	r2, [r3, #20]
 8007fe0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8007fe2:	1d3b      	adds	r3, r7, #4
 8007fe4:	2234      	movs	r2, #52	@ 0x34
 8007fe6:	2100      	movs	r1, #0
 8007fe8:	4618      	mov	r0, r3
 8007fea:	f008 fe69 	bl	8010cc0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8007fee:	4b3b      	ldr	r3, [pc, #236]	@ (80080dc <MX_TIM1_Init+0x120>)
 8007ff0:	4a3b      	ldr	r2, [pc, #236]	@ (80080e0 <MX_TIM1_Init+0x124>)
 8007ff2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8007ff4:	4b39      	ldr	r3, [pc, #228]	@ (80080dc <MX_TIM1_Init+0x120>)
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007ffa:	4b38      	ldr	r3, [pc, #224]	@ (80080dc <MX_TIM1_Init+0x120>)
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8008000:	4b36      	ldr	r3, [pc, #216]	@ (80080dc <MX_TIM1_Init+0x120>)
 8008002:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008006:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008008:	4b34      	ldr	r3, [pc, #208]	@ (80080dc <MX_TIM1_Init+0x120>)
 800800a:	2200      	movs	r2, #0
 800800c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800800e:	4b33      	ldr	r3, [pc, #204]	@ (80080dc <MX_TIM1_Init+0x120>)
 8008010:	2200      	movs	r2, #0
 8008012:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008014:	4b31      	ldr	r3, [pc, #196]	@ (80080dc <MX_TIM1_Init+0x120>)
 8008016:	2200      	movs	r2, #0
 8008018:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800801a:	4830      	ldr	r0, [pc, #192]	@ (80080dc <MX_TIM1_Init+0x120>)
 800801c:	f004 fad8 	bl	800c5d0 <HAL_TIM_PWM_Init>
 8008020:	4603      	mov	r3, r0
 8008022:	2b00      	cmp	r3, #0
 8008024:	d001      	beq.n	800802a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8008026:	f7ff f92f 	bl	8007288 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800802a:	2300      	movs	r3, #0
 800802c:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800802e:	2300      	movs	r3, #0
 8008030:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008032:	2300      	movs	r3, #0
 8008034:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8008036:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800803a:	4619      	mov	r1, r3
 800803c:	4827      	ldr	r0, [pc, #156]	@ (80080dc <MX_TIM1_Init+0x120>)
 800803e:	f006 f8e9 	bl	800e214 <HAL_TIMEx_MasterConfigSynchronization>
 8008042:	4603      	mov	r3, r0
 8008044:	2b00      	cmp	r3, #0
 8008046:	d001      	beq.n	800804c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8008048:	f7ff f91e 	bl	8007288 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800804c:	2360      	movs	r3, #96	@ 0x60
 800804e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8008050:	2300      	movs	r3, #0
 8008052:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008054:	2300      	movs	r3, #0
 8008056:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8008058:	2300      	movs	r3, #0
 800805a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800805c:	2300      	movs	r3, #0
 800805e:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8008060:	2300      	movs	r3, #0
 8008062:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8008064:	2300      	movs	r3, #0
 8008066:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8008068:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800806c:	220c      	movs	r2, #12
 800806e:	4619      	mov	r1, r3
 8008070:	481a      	ldr	r0, [pc, #104]	@ (80080dc <MX_TIM1_Init+0x120>)
 8008072:	f004 ffd5 	bl	800d020 <HAL_TIM_PWM_ConfigChannel>
 8008076:	4603      	mov	r3, r0
 8008078:	2b00      	cmp	r3, #0
 800807a:	d001      	beq.n	8008080 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800807c:	f7ff f904 	bl	8007288 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8008080:	2300      	movs	r3, #0
 8008082:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8008084:	2300      	movs	r3, #0
 8008086:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8008088:	2300      	movs	r3, #0
 800808a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800808c:	2300      	movs	r3, #0
 800808e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8008090:	2300      	movs	r3, #0
 8008092:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8008094:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8008098:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800809a:	2300      	movs	r3, #0
 800809c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800809e:	2300      	movs	r3, #0
 80080a0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80080a2:	2300      	movs	r3, #0
 80080a4:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80080a6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80080aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80080ac:	2300      	movs	r3, #0
 80080ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80080b0:	2300      	movs	r3, #0
 80080b2:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80080b4:	2300      	movs	r3, #0
 80080b6:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80080b8:	1d3b      	adds	r3, r7, #4
 80080ba:	4619      	mov	r1, r3
 80080bc:	4807      	ldr	r0, [pc, #28]	@ (80080dc <MX_TIM1_Init+0x120>)
 80080be:	f006 f93f 	bl	800e340 <HAL_TIMEx_ConfigBreakDeadTime>
 80080c2:	4603      	mov	r3, r0
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d001      	beq.n	80080cc <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80080c8:	f7ff f8de 	bl	8007288 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80080cc:	4803      	ldr	r0, [pc, #12]	@ (80080dc <MX_TIM1_Init+0x120>)
 80080ce:	f000 fb77 	bl	80087c0 <HAL_TIM_MspPostInit>

}
 80080d2:	bf00      	nop
 80080d4:	3760      	adds	r7, #96	@ 0x60
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}
 80080da:	bf00      	nop
 80080dc:	20001920 	.word	0x20001920
 80080e0:	40012c00 	.word	0x40012c00

080080e4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b088      	sub	sp, #32
 80080e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80080ea:	f107 0310 	add.w	r3, r7, #16
 80080ee:	2200      	movs	r2, #0
 80080f0:	601a      	str	r2, [r3, #0]
 80080f2:	605a      	str	r2, [r3, #4]
 80080f4:	609a      	str	r2, [r3, #8]
 80080f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80080f8:	1d3b      	adds	r3, r7, #4
 80080fa:	2200      	movs	r2, #0
 80080fc:	601a      	str	r2, [r3, #0]
 80080fe:	605a      	str	r2, [r3, #4]
 8008100:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8008102:	4b1e      	ldr	r3, [pc, #120]	@ (800817c <MX_TIM2_Init+0x98>)
 8008104:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8008108:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 800810a:	4b1c      	ldr	r3, [pc, #112]	@ (800817c <MX_TIM2_Init+0x98>)
 800810c:	22a9      	movs	r2, #169	@ 0xa9
 800810e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008110:	4b1a      	ldr	r3, [pc, #104]	@ (800817c <MX_TIM2_Init+0x98>)
 8008112:	2200      	movs	r2, #0
 8008114:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8008116:	4b19      	ldr	r3, [pc, #100]	@ (800817c <MX_TIM2_Init+0x98>)
 8008118:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800811c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800811e:	4b17      	ldr	r3, [pc, #92]	@ (800817c <MX_TIM2_Init+0x98>)
 8008120:	2200      	movs	r2, #0
 8008122:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008124:	4b15      	ldr	r3, [pc, #84]	@ (800817c <MX_TIM2_Init+0x98>)
 8008126:	2200      	movs	r2, #0
 8008128:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800812a:	4814      	ldr	r0, [pc, #80]	@ (800817c <MX_TIM2_Init+0x98>)
 800812c:	f004 f904 	bl	800c338 <HAL_TIM_Base_Init>
 8008130:	4603      	mov	r3, r0
 8008132:	2b00      	cmp	r3, #0
 8008134:	d001      	beq.n	800813a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8008136:	f7ff f8a7 	bl	8007288 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800813a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800813e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8008140:	f107 0310 	add.w	r3, r7, #16
 8008144:	4619      	mov	r1, r3
 8008146:	480d      	ldr	r0, [pc, #52]	@ (800817c <MX_TIM2_Init+0x98>)
 8008148:	f005 f87e 	bl	800d248 <HAL_TIM_ConfigClockSource>
 800814c:	4603      	mov	r3, r0
 800814e:	2b00      	cmp	r3, #0
 8008150:	d001      	beq.n	8008156 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8008152:	f7ff f899 	bl	8007288 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008156:	2300      	movs	r3, #0
 8008158:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800815a:	2300      	movs	r3, #0
 800815c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800815e:	1d3b      	adds	r3, r7, #4
 8008160:	4619      	mov	r1, r3
 8008162:	4806      	ldr	r0, [pc, #24]	@ (800817c <MX_TIM2_Init+0x98>)
 8008164:	f006 f856 	bl	800e214 <HAL_TIMEx_MasterConfigSynchronization>
 8008168:	4603      	mov	r3, r0
 800816a:	2b00      	cmp	r3, #0
 800816c:	d001      	beq.n	8008172 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800816e:	f7ff f88b 	bl	8007288 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8008172:	bf00      	nop
 8008174:	3720      	adds	r7, #32
 8008176:	46bd      	mov	sp, r7
 8008178:	bd80      	pop	{r7, pc}
 800817a:	bf00      	nop
 800817c:	200019ec 	.word	0x200019ec

08008180 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b08c      	sub	sp, #48	@ 0x30
 8008184:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8008186:	f107 030c 	add.w	r3, r7, #12
 800818a:	2224      	movs	r2, #36	@ 0x24
 800818c:	2100      	movs	r1, #0
 800818e:	4618      	mov	r0, r3
 8008190:	f008 fd96 	bl	8010cc0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008194:	463b      	mov	r3, r7
 8008196:	2200      	movs	r2, #0
 8008198:	601a      	str	r2, [r3, #0]
 800819a:	605a      	str	r2, [r3, #4]
 800819c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800819e:	4b21      	ldr	r3, [pc, #132]	@ (8008224 <MX_TIM3_Init+0xa4>)
 80081a0:	4a21      	ldr	r2, [pc, #132]	@ (8008228 <MX_TIM3_Init+0xa8>)
 80081a2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80081a4:	4b1f      	ldr	r3, [pc, #124]	@ (8008224 <MX_TIM3_Init+0xa4>)
 80081a6:	2200      	movs	r2, #0
 80081a8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80081aa:	4b1e      	ldr	r3, [pc, #120]	@ (8008224 <MX_TIM3_Init+0xa4>)
 80081ac:	2200      	movs	r2, #0
 80081ae:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80081b0:	4b1c      	ldr	r3, [pc, #112]	@ (8008224 <MX_TIM3_Init+0xa4>)
 80081b2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80081b6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80081b8:	4b1a      	ldr	r3, [pc, #104]	@ (8008224 <MX_TIM3_Init+0xa4>)
 80081ba:	2200      	movs	r2, #0
 80081bc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80081be:	4b19      	ldr	r3, [pc, #100]	@ (8008224 <MX_TIM3_Init+0xa4>)
 80081c0:	2200      	movs	r2, #0
 80081c2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80081c4:	2303      	movs	r3, #3
 80081c6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80081c8:	2300      	movs	r3, #0
 80081ca:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80081cc:	2301      	movs	r3, #1
 80081ce:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80081d0:	2300      	movs	r3, #0
 80081d2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80081d4:	2300      	movs	r3, #0
 80081d6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80081d8:	2300      	movs	r3, #0
 80081da:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80081dc:	2301      	movs	r3, #1
 80081de:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80081e0:	2300      	movs	r3, #0
 80081e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80081e4:	2300      	movs	r3, #0
 80081e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80081e8:	f107 030c 	add.w	r3, r7, #12
 80081ec:	4619      	mov	r1, r3
 80081ee:	480d      	ldr	r0, [pc, #52]	@ (8008224 <MX_TIM3_Init+0xa4>)
 80081f0:	f004 fc5a 	bl	800caa8 <HAL_TIM_Encoder_Init>
 80081f4:	4603      	mov	r3, r0
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d001      	beq.n	80081fe <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80081fa:	f7ff f845 	bl	8007288 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80081fe:	2300      	movs	r3, #0
 8008200:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008202:	2300      	movs	r3, #0
 8008204:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8008206:	463b      	mov	r3, r7
 8008208:	4619      	mov	r1, r3
 800820a:	4806      	ldr	r0, [pc, #24]	@ (8008224 <MX_TIM3_Init+0xa4>)
 800820c:	f006 f802 	bl	800e214 <HAL_TIMEx_MasterConfigSynchronization>
 8008210:	4603      	mov	r3, r0
 8008212:	2b00      	cmp	r3, #0
 8008214:	d001      	beq.n	800821a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8008216:	f7ff f837 	bl	8007288 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800821a:	bf00      	nop
 800821c:	3730      	adds	r7, #48	@ 0x30
 800821e:	46bd      	mov	sp, r7
 8008220:	bd80      	pop	{r7, pc}
 8008222:	bf00      	nop
 8008224:	20001ab8 	.word	0x20001ab8
 8008228:	40000400 	.word	0x40000400

0800822c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b08c      	sub	sp, #48	@ 0x30
 8008230:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8008232:	f107 030c 	add.w	r3, r7, #12
 8008236:	2224      	movs	r2, #36	@ 0x24
 8008238:	2100      	movs	r1, #0
 800823a:	4618      	mov	r0, r3
 800823c:	f008 fd40 	bl	8010cc0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008240:	463b      	mov	r3, r7
 8008242:	2200      	movs	r2, #0
 8008244:	601a      	str	r2, [r3, #0]
 8008246:	605a      	str	r2, [r3, #4]
 8008248:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800824a:	4b21      	ldr	r3, [pc, #132]	@ (80082d0 <MX_TIM4_Init+0xa4>)
 800824c:	4a21      	ldr	r2, [pc, #132]	@ (80082d4 <MX_TIM4_Init+0xa8>)
 800824e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8008250:	4b1f      	ldr	r3, [pc, #124]	@ (80082d0 <MX_TIM4_Init+0xa4>)
 8008252:	2200      	movs	r2, #0
 8008254:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008256:	4b1e      	ldr	r3, [pc, #120]	@ (80082d0 <MX_TIM4_Init+0xa4>)
 8008258:	2200      	movs	r2, #0
 800825a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800825c:	4b1c      	ldr	r3, [pc, #112]	@ (80082d0 <MX_TIM4_Init+0xa4>)
 800825e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008262:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008264:	4b1a      	ldr	r3, [pc, #104]	@ (80082d0 <MX_TIM4_Init+0xa4>)
 8008266:	2200      	movs	r2, #0
 8008268:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800826a:	4b19      	ldr	r3, [pc, #100]	@ (80082d0 <MX_TIM4_Init+0xa4>)
 800826c:	2200      	movs	r2, #0
 800826e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8008270:	2303      	movs	r3, #3
 8008272:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8008274:	2300      	movs	r3, #0
 8008276:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8008278:	2301      	movs	r3, #1
 800827a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800827c:	2300      	movs	r3, #0
 800827e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8008280:	2300      	movs	r3, #0
 8008282:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8008284:	2300      	movs	r3, #0
 8008286:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8008288:	2301      	movs	r3, #1
 800828a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800828c:	2300      	movs	r3, #0
 800828e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8008290:	2300      	movs	r3, #0
 8008292:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8008294:	f107 030c 	add.w	r3, r7, #12
 8008298:	4619      	mov	r1, r3
 800829a:	480d      	ldr	r0, [pc, #52]	@ (80082d0 <MX_TIM4_Init+0xa4>)
 800829c:	f004 fc04 	bl	800caa8 <HAL_TIM_Encoder_Init>
 80082a0:	4603      	mov	r3, r0
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d001      	beq.n	80082aa <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80082a6:	f7fe ffef 	bl	8007288 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80082aa:	2300      	movs	r3, #0
 80082ac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80082ae:	2300      	movs	r3, #0
 80082b0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80082b2:	463b      	mov	r3, r7
 80082b4:	4619      	mov	r1, r3
 80082b6:	4806      	ldr	r0, [pc, #24]	@ (80082d0 <MX_TIM4_Init+0xa4>)
 80082b8:	f005 ffac 	bl	800e214 <HAL_TIMEx_MasterConfigSynchronization>
 80082bc:	4603      	mov	r3, r0
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d001      	beq.n	80082c6 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80082c2:	f7fe ffe1 	bl	8007288 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80082c6:	bf00      	nop
 80082c8:	3730      	adds	r7, #48	@ 0x30
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}
 80082ce:	bf00      	nop
 80082d0:	20001b84 	.word	0x20001b84
 80082d4:	40000800 	.word	0x40000800

080082d8 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b08c      	sub	sp, #48	@ 0x30
 80082dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80082de:	f107 030c 	add.w	r3, r7, #12
 80082e2:	2224      	movs	r2, #36	@ 0x24
 80082e4:	2100      	movs	r1, #0
 80082e6:	4618      	mov	r0, r3
 80082e8:	f008 fcea 	bl	8010cc0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80082ec:	463b      	mov	r3, r7
 80082ee:	2200      	movs	r2, #0
 80082f0:	601a      	str	r2, [r3, #0]
 80082f2:	605a      	str	r2, [r3, #4]
 80082f4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80082f6:	4b21      	ldr	r3, [pc, #132]	@ (800837c <MX_TIM5_Init+0xa4>)
 80082f8:	4a21      	ldr	r2, [pc, #132]	@ (8008380 <MX_TIM5_Init+0xa8>)
 80082fa:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80082fc:	4b1f      	ldr	r3, [pc, #124]	@ (800837c <MX_TIM5_Init+0xa4>)
 80082fe:	2200      	movs	r2, #0
 8008300:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008302:	4b1e      	ldr	r3, [pc, #120]	@ (800837c <MX_TIM5_Init+0xa4>)
 8008304:	2200      	movs	r2, #0
 8008306:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8008308:	4b1c      	ldr	r3, [pc, #112]	@ (800837c <MX_TIM5_Init+0xa4>)
 800830a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800830e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008310:	4b1a      	ldr	r3, [pc, #104]	@ (800837c <MX_TIM5_Init+0xa4>)
 8008312:	2200      	movs	r2, #0
 8008314:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008316:	4b19      	ldr	r3, [pc, #100]	@ (800837c <MX_TIM5_Init+0xa4>)
 8008318:	2200      	movs	r2, #0
 800831a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800831c:	2303      	movs	r3, #3
 800831e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8008320:	2300      	movs	r3, #0
 8008322:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8008324:	2301      	movs	r3, #1
 8008326:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8008328:	2300      	movs	r3, #0
 800832a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800832c:	2300      	movs	r3, #0
 800832e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8008330:	2300      	movs	r3, #0
 8008332:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8008334:	2301      	movs	r3, #1
 8008336:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8008338:	2300      	movs	r3, #0
 800833a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800833c:	2300      	movs	r3, #0
 800833e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8008340:	f107 030c 	add.w	r3, r7, #12
 8008344:	4619      	mov	r1, r3
 8008346:	480d      	ldr	r0, [pc, #52]	@ (800837c <MX_TIM5_Init+0xa4>)
 8008348:	f004 fbae 	bl	800caa8 <HAL_TIM_Encoder_Init>
 800834c:	4603      	mov	r3, r0
 800834e:	2b00      	cmp	r3, #0
 8008350:	d001      	beq.n	8008356 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8008352:	f7fe ff99 	bl	8007288 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008356:	2300      	movs	r3, #0
 8008358:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800835a:	2300      	movs	r3, #0
 800835c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800835e:	463b      	mov	r3, r7
 8008360:	4619      	mov	r1, r3
 8008362:	4806      	ldr	r0, [pc, #24]	@ (800837c <MX_TIM5_Init+0xa4>)
 8008364:	f005 ff56 	bl	800e214 <HAL_TIMEx_MasterConfigSynchronization>
 8008368:	4603      	mov	r3, r0
 800836a:	2b00      	cmp	r3, #0
 800836c:	d001      	beq.n	8008372 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 800836e:	f7fe ff8b 	bl	8007288 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8008372:	bf00      	nop
 8008374:	3730      	adds	r7, #48	@ 0x30
 8008376:	46bd      	mov	sp, r7
 8008378:	bd80      	pop	{r7, pc}
 800837a:	bf00      	nop
 800837c:	20001c50 	.word	0x20001c50
 8008380:	40000c00 	.word	0x40000c00

08008384 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b09c      	sub	sp, #112	@ 0x70
 8008388:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800838a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800838e:	2200      	movs	r2, #0
 8008390:	601a      	str	r2, [r3, #0]
 8008392:	605a      	str	r2, [r3, #4]
 8008394:	609a      	str	r2, [r3, #8]
 8008396:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008398:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800839c:	2200      	movs	r2, #0
 800839e:	601a      	str	r2, [r3, #0]
 80083a0:	605a      	str	r2, [r3, #4]
 80083a2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80083a4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80083a8:	2200      	movs	r2, #0
 80083aa:	601a      	str	r2, [r3, #0]
 80083ac:	605a      	str	r2, [r3, #4]
 80083ae:	609a      	str	r2, [r3, #8]
 80083b0:	60da      	str	r2, [r3, #12]
 80083b2:	611a      	str	r2, [r3, #16]
 80083b4:	615a      	str	r2, [r3, #20]
 80083b6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80083b8:	1d3b      	adds	r3, r7, #4
 80083ba:	2234      	movs	r2, #52	@ 0x34
 80083bc:	2100      	movs	r1, #0
 80083be:	4618      	mov	r0, r3
 80083c0:	f008 fc7e 	bl	8010cc0 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80083c4:	4b4c      	ldr	r3, [pc, #304]	@ (80084f8 <MX_TIM8_Init+0x174>)
 80083c6:	4a4d      	ldr	r2, [pc, #308]	@ (80084fc <MX_TIM8_Init+0x178>)
 80083c8:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80083ca:	4b4b      	ldr	r3, [pc, #300]	@ (80084f8 <MX_TIM8_Init+0x174>)
 80083cc:	2200      	movs	r2, #0
 80083ce:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80083d0:	4b49      	ldr	r3, [pc, #292]	@ (80084f8 <MX_TIM8_Init+0x174>)
 80083d2:	2200      	movs	r2, #0
 80083d4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80083d6:	4b48      	ldr	r3, [pc, #288]	@ (80084f8 <MX_TIM8_Init+0x174>)
 80083d8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80083dc:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80083de:	4b46      	ldr	r3, [pc, #280]	@ (80084f8 <MX_TIM8_Init+0x174>)
 80083e0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80083e4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80083e6:	4b44      	ldr	r3, [pc, #272]	@ (80084f8 <MX_TIM8_Init+0x174>)
 80083e8:	2200      	movs	r2, #0
 80083ea:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80083ec:	4b42      	ldr	r3, [pc, #264]	@ (80084f8 <MX_TIM8_Init+0x174>)
 80083ee:	2200      	movs	r2, #0
 80083f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80083f2:	4841      	ldr	r0, [pc, #260]	@ (80084f8 <MX_TIM8_Init+0x174>)
 80083f4:	f003 ffa0 	bl	800c338 <HAL_TIM_Base_Init>
 80083f8:	4603      	mov	r3, r0
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d001      	beq.n	8008402 <MX_TIM8_Init+0x7e>
  {
    Error_Handler();
 80083fe:	f7fe ff43 	bl	8007288 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008402:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008406:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8008408:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800840c:	4619      	mov	r1, r3
 800840e:	483a      	ldr	r0, [pc, #232]	@ (80084f8 <MX_TIM8_Init+0x174>)
 8008410:	f004 ff1a 	bl	800d248 <HAL_TIM_ConfigClockSource>
 8008414:	4603      	mov	r3, r0
 8008416:	2b00      	cmp	r3, #0
 8008418:	d001      	beq.n	800841e <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 800841a:	f7fe ff35 	bl	8007288 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800841e:	4836      	ldr	r0, [pc, #216]	@ (80084f8 <MX_TIM8_Init+0x174>)
 8008420:	f004 f8d6 	bl	800c5d0 <HAL_TIM_PWM_Init>
 8008424:	4603      	mov	r3, r0
 8008426:	2b00      	cmp	r3, #0
 8008428:	d001      	beq.n	800842e <MX_TIM8_Init+0xaa>
  {
    Error_Handler();
 800842a:	f7fe ff2d 	bl	8007288 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800842e:	2300      	movs	r3, #0
 8008430:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8008432:	2300      	movs	r3, #0
 8008434:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008436:	2300      	movs	r3, #0
 8008438:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800843a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800843e:	4619      	mov	r1, r3
 8008440:	482d      	ldr	r0, [pc, #180]	@ (80084f8 <MX_TIM8_Init+0x174>)
 8008442:	f005 fee7 	bl	800e214 <HAL_TIMEx_MasterConfigSynchronization>
 8008446:	4603      	mov	r3, r0
 8008448:	2b00      	cmp	r3, #0
 800844a:	d001      	beq.n	8008450 <MX_TIM8_Init+0xcc>
  {
    Error_Handler();
 800844c:	f7fe ff1c 	bl	8007288 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008450:	2360      	movs	r3, #96	@ 0x60
 8008452:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8008454:	2300      	movs	r3, #0
 8008456:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008458:	2300      	movs	r3, #0
 800845a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800845c:	2300      	movs	r3, #0
 800845e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008460:	2300      	movs	r3, #0
 8008462:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8008464:	2300      	movs	r3, #0
 8008466:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8008468:	2300      	movs	r3, #0
 800846a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800846c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8008470:	2200      	movs	r2, #0
 8008472:	4619      	mov	r1, r3
 8008474:	4820      	ldr	r0, [pc, #128]	@ (80084f8 <MX_TIM8_Init+0x174>)
 8008476:	f004 fdd3 	bl	800d020 <HAL_TIM_PWM_ConfigChannel>
 800847a:	4603      	mov	r3, r0
 800847c:	2b00      	cmp	r3, #0
 800847e:	d001      	beq.n	8008484 <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 8008480:	f7fe ff02 	bl	8007288 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8008484:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8008488:	2204      	movs	r2, #4
 800848a:	4619      	mov	r1, r3
 800848c:	481a      	ldr	r0, [pc, #104]	@ (80084f8 <MX_TIM8_Init+0x174>)
 800848e:	f004 fdc7 	bl	800d020 <HAL_TIM_PWM_ConfigChannel>
 8008492:	4603      	mov	r3, r0
 8008494:	2b00      	cmp	r3, #0
 8008496:	d001      	beq.n	800849c <MX_TIM8_Init+0x118>
  {
    Error_Handler();
 8008498:	f7fe fef6 	bl	8007288 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800849c:	2300      	movs	r3, #0
 800849e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80084a0:	2300      	movs	r3, #0
 80084a2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80084a4:	2300      	movs	r3, #0
 80084a6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80084a8:	2300      	movs	r3, #0
 80084aa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80084ac:	2300      	movs	r3, #0
 80084ae:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80084b0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80084b4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80084b6:	2300      	movs	r3, #0
 80084b8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80084ba:	2300      	movs	r3, #0
 80084bc:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80084be:	2300      	movs	r3, #0
 80084c0:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80084c2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80084c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80084c8:	2300      	movs	r3, #0
 80084ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80084cc:	2300      	movs	r3, #0
 80084ce:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80084d0:	2300      	movs	r3, #0
 80084d2:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80084d4:	1d3b      	adds	r3, r7, #4
 80084d6:	4619      	mov	r1, r3
 80084d8:	4807      	ldr	r0, [pc, #28]	@ (80084f8 <MX_TIM8_Init+0x174>)
 80084da:	f005 ff31 	bl	800e340 <HAL_TIMEx_ConfigBreakDeadTime>
 80084de:	4603      	mov	r3, r0
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d001      	beq.n	80084e8 <MX_TIM8_Init+0x164>
  {
    Error_Handler();
 80084e4:	f7fe fed0 	bl	8007288 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80084e8:	4803      	ldr	r0, [pc, #12]	@ (80084f8 <MX_TIM8_Init+0x174>)
 80084ea:	f000 f969 	bl	80087c0 <HAL_TIM_MspPostInit>

}
 80084ee:	bf00      	nop
 80084f0:	3770      	adds	r7, #112	@ 0x70
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd80      	pop	{r7, pc}
 80084f6:	bf00      	nop
 80084f8:	20001d1c 	.word	0x20001d1c
 80084fc:	40013400 	.word	0x40013400

08008500 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8008504:	4b14      	ldr	r3, [pc, #80]	@ (8008558 <MX_TIM16_Init+0x58>)
 8008506:	4a15      	ldr	r2, [pc, #84]	@ (800855c <MX_TIM16_Init+0x5c>)
 8008508:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 800850a:	4b13      	ldr	r3, [pc, #76]	@ (8008558 <MX_TIM16_Init+0x58>)
 800850c:	22a9      	movs	r2, #169	@ 0xa9
 800850e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008510:	4b11      	ldr	r3, [pc, #68]	@ (8008558 <MX_TIM16_Init+0x58>)
 8008512:	2200      	movs	r2, #0
 8008514:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1145;
 8008516:	4b10      	ldr	r3, [pc, #64]	@ (8008558 <MX_TIM16_Init+0x58>)
 8008518:	f240 4279 	movw	r2, #1145	@ 0x479
 800851c:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800851e:	4b0e      	ldr	r3, [pc, #56]	@ (8008558 <MX_TIM16_Init+0x58>)
 8008520:	2200      	movs	r2, #0
 8008522:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8008524:	4b0c      	ldr	r3, [pc, #48]	@ (8008558 <MX_TIM16_Init+0x58>)
 8008526:	2200      	movs	r2, #0
 8008528:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800852a:	4b0b      	ldr	r3, [pc, #44]	@ (8008558 <MX_TIM16_Init+0x58>)
 800852c:	2200      	movs	r2, #0
 800852e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8008530:	4809      	ldr	r0, [pc, #36]	@ (8008558 <MX_TIM16_Init+0x58>)
 8008532:	f003 ff01 	bl	800c338 <HAL_TIM_Base_Init>
 8008536:	4603      	mov	r3, r0
 8008538:	2b00      	cmp	r3, #0
 800853a:	d001      	beq.n	8008540 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 800853c:	f7fe fea4 	bl	8007288 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8008540:	2108      	movs	r1, #8
 8008542:	4805      	ldr	r0, [pc, #20]	@ (8008558 <MX_TIM16_Init+0x58>)
 8008544:	f004 f9ba 	bl	800c8bc <HAL_TIM_OnePulse_Init>
 8008548:	4603      	mov	r3, r0
 800854a:	2b00      	cmp	r3, #0
 800854c:	d001      	beq.n	8008552 <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 800854e:	f7fe fe9b 	bl	8007288 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8008552:	bf00      	nop
 8008554:	bd80      	pop	{r7, pc}
 8008556:	bf00      	nop
 8008558:	20001de8 	.word	0x20001de8
 800855c:	40014400 	.word	0x40014400

08008560 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b084      	sub	sp, #16
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	4a0d      	ldr	r2, [pc, #52]	@ (80085a4 <HAL_TIM_PWM_MspInit+0x44>)
 800856e:	4293      	cmp	r3, r2
 8008570:	d113      	bne.n	800859a <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8008572:	4b0d      	ldr	r3, [pc, #52]	@ (80085a8 <HAL_TIM_PWM_MspInit+0x48>)
 8008574:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008576:	4a0c      	ldr	r2, [pc, #48]	@ (80085a8 <HAL_TIM_PWM_MspInit+0x48>)
 8008578:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800857c:	6613      	str	r3, [r2, #96]	@ 0x60
 800857e:	4b0a      	ldr	r3, [pc, #40]	@ (80085a8 <HAL_TIM_PWM_MspInit+0x48>)
 8008580:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008582:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008586:	60fb      	str	r3, [r7, #12]
 8008588:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800858a:	2200      	movs	r2, #0
 800858c:	2100      	movs	r1, #0
 800858e:	2019      	movs	r0, #25
 8008590:	f002 f957 	bl	800a842 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8008594:	2019      	movs	r0, #25
 8008596:	f002 f96e 	bl	800a876 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800859a:	bf00      	nop
 800859c:	3710      	adds	r7, #16
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}
 80085a2:	bf00      	nop
 80085a4:	40012c00 	.word	0x40012c00
 80085a8:	40021000 	.word	0x40021000

080085ac <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b086      	sub	sp, #24
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80085bc:	d114      	bne.n	80085e8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80085be:	4b22      	ldr	r3, [pc, #136]	@ (8008648 <HAL_TIM_Base_MspInit+0x9c>)
 80085c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80085c2:	4a21      	ldr	r2, [pc, #132]	@ (8008648 <HAL_TIM_Base_MspInit+0x9c>)
 80085c4:	f043 0301 	orr.w	r3, r3, #1
 80085c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80085ca:	4b1f      	ldr	r3, [pc, #124]	@ (8008648 <HAL_TIM_Base_MspInit+0x9c>)
 80085cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80085ce:	f003 0301 	and.w	r3, r3, #1
 80085d2:	617b      	str	r3, [r7, #20]
 80085d4:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80085d6:	2200      	movs	r2, #0
 80085d8:	2100      	movs	r1, #0
 80085da:	201c      	movs	r0, #28
 80085dc:	f002 f931 	bl	800a842 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80085e0:	201c      	movs	r0, #28
 80085e2:	f002 f948 	bl	800a876 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 80085e6:	e02a      	b.n	800863e <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM8)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	4a17      	ldr	r2, [pc, #92]	@ (800864c <HAL_TIM_Base_MspInit+0xa0>)
 80085ee:	4293      	cmp	r3, r2
 80085f0:	d10c      	bne.n	800860c <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80085f2:	4b15      	ldr	r3, [pc, #84]	@ (8008648 <HAL_TIM_Base_MspInit+0x9c>)
 80085f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80085f6:	4a14      	ldr	r2, [pc, #80]	@ (8008648 <HAL_TIM_Base_MspInit+0x9c>)
 80085f8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80085fc:	6613      	str	r3, [r2, #96]	@ 0x60
 80085fe:	4b12      	ldr	r3, [pc, #72]	@ (8008648 <HAL_TIM_Base_MspInit+0x9c>)
 8008600:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008602:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008606:	613b      	str	r3, [r7, #16]
 8008608:	693b      	ldr	r3, [r7, #16]
}
 800860a:	e018      	b.n	800863e <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM16)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	4a0f      	ldr	r2, [pc, #60]	@ (8008650 <HAL_TIM_Base_MspInit+0xa4>)
 8008612:	4293      	cmp	r3, r2
 8008614:	d113      	bne.n	800863e <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8008616:	4b0c      	ldr	r3, [pc, #48]	@ (8008648 <HAL_TIM_Base_MspInit+0x9c>)
 8008618:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800861a:	4a0b      	ldr	r2, [pc, #44]	@ (8008648 <HAL_TIM_Base_MspInit+0x9c>)
 800861c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008620:	6613      	str	r3, [r2, #96]	@ 0x60
 8008622:	4b09      	ldr	r3, [pc, #36]	@ (8008648 <HAL_TIM_Base_MspInit+0x9c>)
 8008624:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008626:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800862a:	60fb      	str	r3, [r7, #12]
 800862c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800862e:	2200      	movs	r2, #0
 8008630:	2100      	movs	r1, #0
 8008632:	2019      	movs	r0, #25
 8008634:	f002 f905 	bl	800a842 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8008638:	2019      	movs	r0, #25
 800863a:	f002 f91c 	bl	800a876 <HAL_NVIC_EnableIRQ>
}
 800863e:	bf00      	nop
 8008640:	3718      	adds	r7, #24
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}
 8008646:	bf00      	nop
 8008648:	40021000 	.word	0x40021000
 800864c:	40013400 	.word	0x40013400
 8008650:	40014400 	.word	0x40014400

08008654 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b08e      	sub	sp, #56	@ 0x38
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800865c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008660:	2200      	movs	r2, #0
 8008662:	601a      	str	r2, [r3, #0]
 8008664:	605a      	str	r2, [r3, #4]
 8008666:	609a      	str	r2, [r3, #8]
 8008668:	60da      	str	r2, [r3, #12]
 800866a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	4a4f      	ldr	r2, [pc, #316]	@ (80087b0 <HAL_TIM_Encoder_MspInit+0x15c>)
 8008672:	4293      	cmp	r3, r2
 8008674:	d131      	bne.n	80086da <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8008676:	4b4f      	ldr	r3, [pc, #316]	@ (80087b4 <HAL_TIM_Encoder_MspInit+0x160>)
 8008678:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800867a:	4a4e      	ldr	r2, [pc, #312]	@ (80087b4 <HAL_TIM_Encoder_MspInit+0x160>)
 800867c:	f043 0302 	orr.w	r3, r3, #2
 8008680:	6593      	str	r3, [r2, #88]	@ 0x58
 8008682:	4b4c      	ldr	r3, [pc, #304]	@ (80087b4 <HAL_TIM_Encoder_MspInit+0x160>)
 8008684:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008686:	f003 0302 	and.w	r3, r3, #2
 800868a:	623b      	str	r3, [r7, #32]
 800868c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800868e:	4b49      	ldr	r3, [pc, #292]	@ (80087b4 <HAL_TIM_Encoder_MspInit+0x160>)
 8008690:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008692:	4a48      	ldr	r2, [pc, #288]	@ (80087b4 <HAL_TIM_Encoder_MspInit+0x160>)
 8008694:	f043 0301 	orr.w	r3, r3, #1
 8008698:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800869a:	4b46      	ldr	r3, [pc, #280]	@ (80087b4 <HAL_TIM_Encoder_MspInit+0x160>)
 800869c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800869e:	f003 0301 	and.w	r3, r3, #1
 80086a2:	61fb      	str	r3, [r7, #28]
 80086a4:	69fb      	ldr	r3, [r7, #28]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80086a6:	23c0      	movs	r3, #192	@ 0xc0
 80086a8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80086aa:	2302      	movs	r3, #2
 80086ac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086ae:	2300      	movs	r3, #0
 80086b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80086b2:	2300      	movs	r3, #0
 80086b4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80086b6:	2302      	movs	r3, #2
 80086b8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80086ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80086be:	4619      	mov	r1, r3
 80086c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80086c4:	f002 fc24 	bl	800af10 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80086c8:	2200      	movs	r2, #0
 80086ca:	2100      	movs	r1, #0
 80086cc:	201d      	movs	r0, #29
 80086ce:	f002 f8b8 	bl	800a842 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80086d2:	201d      	movs	r0, #29
 80086d4:	f002 f8cf 	bl	800a876 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 80086d8:	e065      	b.n	80087a6 <HAL_TIM_Encoder_MspInit+0x152>
  else if(tim_encoderHandle->Instance==TIM4)
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	4a36      	ldr	r2, [pc, #216]	@ (80087b8 <HAL_TIM_Encoder_MspInit+0x164>)
 80086e0:	4293      	cmp	r3, r2
 80086e2:	d132      	bne.n	800874a <HAL_TIM_Encoder_MspInit+0xf6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80086e4:	4b33      	ldr	r3, [pc, #204]	@ (80087b4 <HAL_TIM_Encoder_MspInit+0x160>)
 80086e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80086e8:	4a32      	ldr	r2, [pc, #200]	@ (80087b4 <HAL_TIM_Encoder_MspInit+0x160>)
 80086ea:	f043 0304 	orr.w	r3, r3, #4
 80086ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80086f0:	4b30      	ldr	r3, [pc, #192]	@ (80087b4 <HAL_TIM_Encoder_MspInit+0x160>)
 80086f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80086f4:	f003 0304 	and.w	r3, r3, #4
 80086f8:	61bb      	str	r3, [r7, #24]
 80086fa:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80086fc:	4b2d      	ldr	r3, [pc, #180]	@ (80087b4 <HAL_TIM_Encoder_MspInit+0x160>)
 80086fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008700:	4a2c      	ldr	r2, [pc, #176]	@ (80087b4 <HAL_TIM_Encoder_MspInit+0x160>)
 8008702:	f043 0301 	orr.w	r3, r3, #1
 8008706:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008708:	4b2a      	ldr	r3, [pc, #168]	@ (80087b4 <HAL_TIM_Encoder_MspInit+0x160>)
 800870a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800870c:	f003 0301 	and.w	r3, r3, #1
 8008710:	617b      	str	r3, [r7, #20]
 8008712:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008714:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8008718:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800871a:	2302      	movs	r3, #2
 800871c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800871e:	2300      	movs	r3, #0
 8008720:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008722:	2300      	movs	r3, #0
 8008724:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8008726:	230a      	movs	r3, #10
 8008728:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800872a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800872e:	4619      	mov	r1, r3
 8008730:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8008734:	f002 fbec 	bl	800af10 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8008738:	2200      	movs	r2, #0
 800873a:	2100      	movs	r1, #0
 800873c:	201e      	movs	r0, #30
 800873e:	f002 f880 	bl	800a842 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8008742:	201e      	movs	r0, #30
 8008744:	f002 f897 	bl	800a876 <HAL_NVIC_EnableIRQ>
}
 8008748:	e02d      	b.n	80087a6 <HAL_TIM_Encoder_MspInit+0x152>
  else if(tim_encoderHandle->Instance==TIM5)
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	4a1b      	ldr	r2, [pc, #108]	@ (80087bc <HAL_TIM_Encoder_MspInit+0x168>)
 8008750:	4293      	cmp	r3, r2
 8008752:	d128      	bne.n	80087a6 <HAL_TIM_Encoder_MspInit+0x152>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8008754:	4b17      	ldr	r3, [pc, #92]	@ (80087b4 <HAL_TIM_Encoder_MspInit+0x160>)
 8008756:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008758:	4a16      	ldr	r2, [pc, #88]	@ (80087b4 <HAL_TIM_Encoder_MspInit+0x160>)
 800875a:	f043 0308 	orr.w	r3, r3, #8
 800875e:	6593      	str	r3, [r2, #88]	@ 0x58
 8008760:	4b14      	ldr	r3, [pc, #80]	@ (80087b4 <HAL_TIM_Encoder_MspInit+0x160>)
 8008762:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008764:	f003 0308 	and.w	r3, r3, #8
 8008768:	613b      	str	r3, [r7, #16]
 800876a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800876c:	4b11      	ldr	r3, [pc, #68]	@ (80087b4 <HAL_TIM_Encoder_MspInit+0x160>)
 800876e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008770:	4a10      	ldr	r2, [pc, #64]	@ (80087b4 <HAL_TIM_Encoder_MspInit+0x160>)
 8008772:	f043 0301 	orr.w	r3, r3, #1
 8008776:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008778:	4b0e      	ldr	r3, [pc, #56]	@ (80087b4 <HAL_TIM_Encoder_MspInit+0x160>)
 800877a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800877c:	f003 0301 	and.w	r3, r3, #1
 8008780:	60fb      	str	r3, [r7, #12]
 8008782:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8008784:	2303      	movs	r3, #3
 8008786:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008788:	2302      	movs	r3, #2
 800878a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800878c:	2300      	movs	r3, #0
 800878e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008790:	2300      	movs	r3, #0
 8008792:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8008794:	2302      	movs	r3, #2
 8008796:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008798:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800879c:	4619      	mov	r1, r3
 800879e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80087a2:	f002 fbb5 	bl	800af10 <HAL_GPIO_Init>
}
 80087a6:	bf00      	nop
 80087a8:	3738      	adds	r7, #56	@ 0x38
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bd80      	pop	{r7, pc}
 80087ae:	bf00      	nop
 80087b0:	40000400 	.word	0x40000400
 80087b4:	40021000 	.word	0x40021000
 80087b8:	40000800 	.word	0x40000800
 80087bc:	40000c00 	.word	0x40000c00

080087c0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b08a      	sub	sp, #40	@ 0x28
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80087c8:	f107 0314 	add.w	r3, r7, #20
 80087cc:	2200      	movs	r2, #0
 80087ce:	601a      	str	r2, [r3, #0]
 80087d0:	605a      	str	r2, [r3, #4]
 80087d2:	609a      	str	r2, [r3, #8]
 80087d4:	60da      	str	r2, [r3, #12]
 80087d6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	4a22      	ldr	r2, [pc, #136]	@ (8008868 <HAL_TIM_MspPostInit+0xa8>)
 80087de:	4293      	cmp	r3, r2
 80087e0:	d11c      	bne.n	800881c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80087e2:	4b22      	ldr	r3, [pc, #136]	@ (800886c <HAL_TIM_MspPostInit+0xac>)
 80087e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80087e6:	4a21      	ldr	r2, [pc, #132]	@ (800886c <HAL_TIM_MspPostInit+0xac>)
 80087e8:	f043 0304 	orr.w	r3, r3, #4
 80087ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80087ee:	4b1f      	ldr	r3, [pc, #124]	@ (800886c <HAL_TIM_MspPostInit+0xac>)
 80087f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80087f2:	f003 0304 	and.w	r3, r3, #4
 80087f6:	613b      	str	r3, [r7, #16]
 80087f8:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC3     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80087fa:	2308      	movs	r3, #8
 80087fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80087fe:	2302      	movs	r3, #2
 8008800:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008802:	2300      	movs	r3, #0
 8008804:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008806:	2300      	movs	r3, #0
 8008808:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800880a:	2302      	movs	r3, #2
 800880c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800880e:	f107 0314 	add.w	r3, r7, #20
 8008812:	4619      	mov	r1, r3
 8008814:	4816      	ldr	r0, [pc, #88]	@ (8008870 <HAL_TIM_MspPostInit+0xb0>)
 8008816:	f002 fb7b 	bl	800af10 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800881a:	e020      	b.n	800885e <HAL_TIM_MspPostInit+0x9e>
  else if(timHandle->Instance==TIM8)
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	4a14      	ldr	r2, [pc, #80]	@ (8008874 <HAL_TIM_MspPostInit+0xb4>)
 8008822:	4293      	cmp	r3, r2
 8008824:	d11b      	bne.n	800885e <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008826:	4b11      	ldr	r3, [pc, #68]	@ (800886c <HAL_TIM_MspPostInit+0xac>)
 8008828:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800882a:	4a10      	ldr	r2, [pc, #64]	@ (800886c <HAL_TIM_MspPostInit+0xac>)
 800882c:	f043 0304 	orr.w	r3, r3, #4
 8008830:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008832:	4b0e      	ldr	r3, [pc, #56]	@ (800886c <HAL_TIM_MspPostInit+0xac>)
 8008834:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008836:	f003 0304 	and.w	r3, r3, #4
 800883a:	60fb      	str	r3, [r7, #12]
 800883c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800883e:	23c0      	movs	r3, #192	@ 0xc0
 8008840:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008842:	2302      	movs	r3, #2
 8008844:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008846:	2300      	movs	r3, #0
 8008848:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800884a:	2300      	movs	r3, #0
 800884c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 800884e:	2304      	movs	r3, #4
 8008850:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008852:	f107 0314 	add.w	r3, r7, #20
 8008856:	4619      	mov	r1, r3
 8008858:	4805      	ldr	r0, [pc, #20]	@ (8008870 <HAL_TIM_MspPostInit+0xb0>)
 800885a:	f002 fb59 	bl	800af10 <HAL_GPIO_Init>
}
 800885e:	bf00      	nop
 8008860:	3728      	adds	r7, #40	@ 0x28
 8008862:	46bd      	mov	sp, r7
 8008864:	bd80      	pop	{r7, pc}
 8008866:	bf00      	nop
 8008868:	40012c00 	.word	0x40012c00
 800886c:	40021000 	.word	0x40021000
 8008870:	48000800 	.word	0x48000800
 8008874:	40013400 	.word	0x40013400

08008878 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800887c:	4b20      	ldr	r3, [pc, #128]	@ (8008900 <MX_LPUART1_UART_Init+0x88>)
 800887e:	4a21      	ldr	r2, [pc, #132]	@ (8008904 <MX_LPUART1_UART_Init+0x8c>)
 8008880:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 2000000;
 8008882:	4b1f      	ldr	r3, [pc, #124]	@ (8008900 <MX_LPUART1_UART_Init+0x88>)
 8008884:	4a20      	ldr	r2, [pc, #128]	@ (8008908 <MX_LPUART1_UART_Init+0x90>)
 8008886:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008888:	4b1d      	ldr	r3, [pc, #116]	@ (8008900 <MX_LPUART1_UART_Init+0x88>)
 800888a:	2200      	movs	r2, #0
 800888c:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800888e:	4b1c      	ldr	r3, [pc, #112]	@ (8008900 <MX_LPUART1_UART_Init+0x88>)
 8008890:	2200      	movs	r2, #0
 8008892:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8008894:	4b1a      	ldr	r3, [pc, #104]	@ (8008900 <MX_LPUART1_UART_Init+0x88>)
 8008896:	2200      	movs	r2, #0
 8008898:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800889a:	4b19      	ldr	r3, [pc, #100]	@ (8008900 <MX_LPUART1_UART_Init+0x88>)
 800889c:	220c      	movs	r2, #12
 800889e:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80088a0:	4b17      	ldr	r3, [pc, #92]	@ (8008900 <MX_LPUART1_UART_Init+0x88>)
 80088a2:	2200      	movs	r2, #0
 80088a4:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80088a6:	4b16      	ldr	r3, [pc, #88]	@ (8008900 <MX_LPUART1_UART_Init+0x88>)
 80088a8:	2200      	movs	r2, #0
 80088aa:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80088ac:	4b14      	ldr	r3, [pc, #80]	@ (8008900 <MX_LPUART1_UART_Init+0x88>)
 80088ae:	2200      	movs	r2, #0
 80088b0:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80088b2:	4b13      	ldr	r3, [pc, #76]	@ (8008900 <MX_LPUART1_UART_Init+0x88>)
 80088b4:	2200      	movs	r2, #0
 80088b6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80088b8:	4811      	ldr	r0, [pc, #68]	@ (8008900 <MX_LPUART1_UART_Init+0x88>)
 80088ba:	f005 fe25 	bl	800e508 <HAL_UART_Init>
 80088be:	4603      	mov	r3, r0
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d001      	beq.n	80088c8 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 80088c4:	f7fe fce0 	bl	8007288 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80088c8:	2100      	movs	r1, #0
 80088ca:	480d      	ldr	r0, [pc, #52]	@ (8008900 <MX_LPUART1_UART_Init+0x88>)
 80088cc:	f007 fb82 	bl	800ffd4 <HAL_UARTEx_SetTxFifoThreshold>
 80088d0:	4603      	mov	r3, r0
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d001      	beq.n	80088da <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 80088d6:	f7fe fcd7 	bl	8007288 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80088da:	2100      	movs	r1, #0
 80088dc:	4808      	ldr	r0, [pc, #32]	@ (8008900 <MX_LPUART1_UART_Init+0x88>)
 80088de:	f007 fbb7 	bl	8010050 <HAL_UARTEx_SetRxFifoThreshold>
 80088e2:	4603      	mov	r3, r0
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d001      	beq.n	80088ec <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 80088e8:	f7fe fcce 	bl	8007288 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80088ec:	4804      	ldr	r0, [pc, #16]	@ (8008900 <MX_LPUART1_UART_Init+0x88>)
 80088ee:	f007 fb38 	bl	800ff62 <HAL_UARTEx_DisableFifoMode>
 80088f2:	4603      	mov	r3, r0
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d001      	beq.n	80088fc <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 80088f8:	f7fe fcc6 	bl	8007288 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80088fc:	bf00      	nop
 80088fe:	bd80      	pop	{r7, pc}
 8008900:	20001eb4 	.word	0x20001eb4
 8008904:	40008000 	.word	0x40008000
 8008908:	001e8480 	.word	0x001e8480

0800890c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8008910:	4b23      	ldr	r3, [pc, #140]	@ (80089a0 <MX_USART2_UART_Init+0x94>)
 8008912:	4a24      	ldr	r2, [pc, #144]	@ (80089a4 <MX_USART2_UART_Init+0x98>)
 8008914:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8008916:	4b22      	ldr	r3, [pc, #136]	@ (80089a0 <MX_USART2_UART_Init+0x94>)
 8008918:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 800891c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800891e:	4b20      	ldr	r3, [pc, #128]	@ (80089a0 <MX_USART2_UART_Init+0x94>)
 8008920:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8008924:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8008926:	4b1e      	ldr	r3, [pc, #120]	@ (80089a0 <MX_USART2_UART_Init+0x94>)
 8008928:	2200      	movs	r2, #0
 800892a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 800892c:	4b1c      	ldr	r3, [pc, #112]	@ (80089a0 <MX_USART2_UART_Init+0x94>)
 800892e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008932:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8008934:	4b1a      	ldr	r3, [pc, #104]	@ (80089a0 <MX_USART2_UART_Init+0x94>)
 8008936:	220c      	movs	r2, #12
 8008938:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800893a:	4b19      	ldr	r3, [pc, #100]	@ (80089a0 <MX_USART2_UART_Init+0x94>)
 800893c:	2200      	movs	r2, #0
 800893e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8008940:	4b17      	ldr	r3, [pc, #92]	@ (80089a0 <MX_USART2_UART_Init+0x94>)
 8008942:	2200      	movs	r2, #0
 8008944:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8008946:	4b16      	ldr	r3, [pc, #88]	@ (80089a0 <MX_USART2_UART_Init+0x94>)
 8008948:	2200      	movs	r2, #0
 800894a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800894c:	4b14      	ldr	r3, [pc, #80]	@ (80089a0 <MX_USART2_UART_Init+0x94>)
 800894e:	2200      	movs	r2, #0
 8008950:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8008952:	4b13      	ldr	r3, [pc, #76]	@ (80089a0 <MX_USART2_UART_Init+0x94>)
 8008954:	2200      	movs	r2, #0
 8008956:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8008958:	4811      	ldr	r0, [pc, #68]	@ (80089a0 <MX_USART2_UART_Init+0x94>)
 800895a:	f005 fdd5 	bl	800e508 <HAL_UART_Init>
 800895e:	4603      	mov	r3, r0
 8008960:	2b00      	cmp	r3, #0
 8008962:	d001      	beq.n	8008968 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8008964:	f7fe fc90 	bl	8007288 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008968:	2100      	movs	r1, #0
 800896a:	480d      	ldr	r0, [pc, #52]	@ (80089a0 <MX_USART2_UART_Init+0x94>)
 800896c:	f007 fb32 	bl	800ffd4 <HAL_UARTEx_SetTxFifoThreshold>
 8008970:	4603      	mov	r3, r0
 8008972:	2b00      	cmp	r3, #0
 8008974:	d001      	beq.n	800897a <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 8008976:	f7fe fc87 	bl	8007288 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800897a:	2100      	movs	r1, #0
 800897c:	4808      	ldr	r0, [pc, #32]	@ (80089a0 <MX_USART2_UART_Init+0x94>)
 800897e:	f007 fb67 	bl	8010050 <HAL_UARTEx_SetRxFifoThreshold>
 8008982:	4603      	mov	r3, r0
 8008984:	2b00      	cmp	r3, #0
 8008986:	d001      	beq.n	800898c <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8008988:	f7fe fc7e 	bl	8007288 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800898c:	4804      	ldr	r0, [pc, #16]	@ (80089a0 <MX_USART2_UART_Init+0x94>)
 800898e:	f007 fae8 	bl	800ff62 <HAL_UARTEx_DisableFifoMode>
 8008992:	4603      	mov	r3, r0
 8008994:	2b00      	cmp	r3, #0
 8008996:	d001      	beq.n	800899c <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8008998:	f7fe fc76 	bl	8007288 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800899c:	bf00      	nop
 800899e:	bd80      	pop	{r7, pc}
 80089a0:	20001f80 	.word	0x20001f80
 80089a4:	40004400 	.word	0x40004400

080089a8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b0a0      	sub	sp, #128	@ 0x80
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80089b0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80089b4:	2200      	movs	r2, #0
 80089b6:	601a      	str	r2, [r3, #0]
 80089b8:	605a      	str	r2, [r3, #4]
 80089ba:	609a      	str	r2, [r3, #8]
 80089bc:	60da      	str	r2, [r3, #12]
 80089be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80089c0:	f107 0318 	add.w	r3, r7, #24
 80089c4:	2254      	movs	r2, #84	@ 0x54
 80089c6:	2100      	movs	r1, #0
 80089c8:	4618      	mov	r0, r3
 80089ca:	f008 f979 	bl	8010cc0 <memset>
  if(uartHandle->Instance==LPUART1)
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	4a99      	ldr	r2, [pc, #612]	@ (8008c38 <HAL_UART_MspInit+0x290>)
 80089d4:	4293      	cmp	r3, r2
 80089d6:	f040 8093 	bne.w	8008b00 <HAL_UART_MspInit+0x158>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80089da:	2320      	movs	r3, #32
 80089dc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80089de:	2300      	movs	r3, #0
 80089e0:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80089e2:	f107 0318 	add.w	r3, r7, #24
 80089e6:	4618      	mov	r0, r3
 80089e8:	f003 fa58 	bl	800be9c <HAL_RCCEx_PeriphCLKConfig>
 80089ec:	4603      	mov	r3, r0
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d001      	beq.n	80089f6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80089f2:	f7fe fc49 	bl	8007288 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80089f6:	4b91      	ldr	r3, [pc, #580]	@ (8008c3c <HAL_UART_MspInit+0x294>)
 80089f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80089fa:	4a90      	ldr	r2, [pc, #576]	@ (8008c3c <HAL_UART_MspInit+0x294>)
 80089fc:	f043 0301 	orr.w	r3, r3, #1
 8008a00:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8008a02:	4b8e      	ldr	r3, [pc, #568]	@ (8008c3c <HAL_UART_MspInit+0x294>)
 8008a04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008a06:	f003 0301 	and.w	r3, r3, #1
 8008a0a:	617b      	str	r3, [r7, #20]
 8008a0c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008a0e:	4b8b      	ldr	r3, [pc, #556]	@ (8008c3c <HAL_UART_MspInit+0x294>)
 8008a10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008a12:	4a8a      	ldr	r2, [pc, #552]	@ (8008c3c <HAL_UART_MspInit+0x294>)
 8008a14:	f043 0302 	orr.w	r3, r3, #2
 8008a18:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008a1a:	4b88      	ldr	r3, [pc, #544]	@ (8008c3c <HAL_UART_MspInit+0x294>)
 8008a1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008a1e:	f003 0302 	and.w	r3, r3, #2
 8008a22:	613b      	str	r3, [r7, #16]
 8008a24:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8008a26:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8008a2a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a2c:	2302      	movs	r3, #2
 8008a2e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a30:	2300      	movs	r3, #0
 8008a32:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008a34:	2300      	movs	r3, #0
 8008a36:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8008a38:	2308      	movs	r3, #8
 8008a3a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008a3c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8008a40:	4619      	mov	r1, r3
 8008a42:	487f      	ldr	r0, [pc, #508]	@ (8008c40 <HAL_UART_MspInit+0x298>)
 8008a44:	f002 fa64 	bl	800af10 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel4;
 8008a48:	4b7e      	ldr	r3, [pc, #504]	@ (8008c44 <HAL_UART_MspInit+0x29c>)
 8008a4a:	4a7f      	ldr	r2, [pc, #508]	@ (8008c48 <HAL_UART_MspInit+0x2a0>)
 8008a4c:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8008a4e:	4b7d      	ldr	r3, [pc, #500]	@ (8008c44 <HAL_UART_MspInit+0x29c>)
 8008a50:	2222      	movs	r2, #34	@ 0x22
 8008a52:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008a54:	4b7b      	ldr	r3, [pc, #492]	@ (8008c44 <HAL_UART_MspInit+0x29c>)
 8008a56:	2200      	movs	r2, #0
 8008a58:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008a5a:	4b7a      	ldr	r3, [pc, #488]	@ (8008c44 <HAL_UART_MspInit+0x29c>)
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008a60:	4b78      	ldr	r3, [pc, #480]	@ (8008c44 <HAL_UART_MspInit+0x29c>)
 8008a62:	2280      	movs	r2, #128	@ 0x80
 8008a64:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008a66:	4b77      	ldr	r3, [pc, #476]	@ (8008c44 <HAL_UART_MspInit+0x29c>)
 8008a68:	2200      	movs	r2, #0
 8008a6a:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008a6c:	4b75      	ldr	r3, [pc, #468]	@ (8008c44 <HAL_UART_MspInit+0x29c>)
 8008a6e:	2200      	movs	r2, #0
 8008a70:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 8008a72:	4b74      	ldr	r3, [pc, #464]	@ (8008c44 <HAL_UART_MspInit+0x29c>)
 8008a74:	2200      	movs	r2, #0
 8008a76:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8008a78:	4b72      	ldr	r3, [pc, #456]	@ (8008c44 <HAL_UART_MspInit+0x29c>)
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8008a7e:	4871      	ldr	r0, [pc, #452]	@ (8008c44 <HAL_UART_MspInit+0x29c>)
 8008a80:	f001 ff14 	bl	800a8ac <HAL_DMA_Init>
 8008a84:	4603      	mov	r3, r0
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d001      	beq.n	8008a8e <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8008a8a:	f7fe fbfd 	bl	8007288 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	4a6c      	ldr	r2, [pc, #432]	@ (8008c44 <HAL_UART_MspInit+0x29c>)
 8008a92:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8008a96:	4a6b      	ldr	r2, [pc, #428]	@ (8008c44 <HAL_UART_MspInit+0x29c>)
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel5;
 8008a9c:	4b6b      	ldr	r3, [pc, #428]	@ (8008c4c <HAL_UART_MspInit+0x2a4>)
 8008a9e:	4a6c      	ldr	r2, [pc, #432]	@ (8008c50 <HAL_UART_MspInit+0x2a8>)
 8008aa0:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8008aa2:	4b6a      	ldr	r3, [pc, #424]	@ (8008c4c <HAL_UART_MspInit+0x2a4>)
 8008aa4:	2223      	movs	r2, #35	@ 0x23
 8008aa6:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008aa8:	4b68      	ldr	r3, [pc, #416]	@ (8008c4c <HAL_UART_MspInit+0x2a4>)
 8008aaa:	2210      	movs	r2, #16
 8008aac:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008aae:	4b67      	ldr	r3, [pc, #412]	@ (8008c4c <HAL_UART_MspInit+0x2a4>)
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008ab4:	4b65      	ldr	r3, [pc, #404]	@ (8008c4c <HAL_UART_MspInit+0x2a4>)
 8008ab6:	2280      	movs	r2, #128	@ 0x80
 8008ab8:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008aba:	4b64      	ldr	r3, [pc, #400]	@ (8008c4c <HAL_UART_MspInit+0x2a4>)
 8008abc:	2200      	movs	r2, #0
 8008abe:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008ac0:	4b62      	ldr	r3, [pc, #392]	@ (8008c4c <HAL_UART_MspInit+0x2a4>)
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8008ac6:	4b61      	ldr	r3, [pc, #388]	@ (8008c4c <HAL_UART_MspInit+0x2a4>)
 8008ac8:	2200      	movs	r2, #0
 8008aca:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8008acc:	4b5f      	ldr	r3, [pc, #380]	@ (8008c4c <HAL_UART_MspInit+0x2a4>)
 8008ace:	2200      	movs	r2, #0
 8008ad0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8008ad2:	485e      	ldr	r0, [pc, #376]	@ (8008c4c <HAL_UART_MspInit+0x2a4>)
 8008ad4:	f001 feea 	bl	800a8ac <HAL_DMA_Init>
 8008ad8:	4603      	mov	r3, r0
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d001      	beq.n	8008ae2 <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 8008ade:	f7fe fbd3 	bl	8007288 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	4a59      	ldr	r2, [pc, #356]	@ (8008c4c <HAL_UART_MspInit+0x2a4>)
 8008ae6:	67da      	str	r2, [r3, #124]	@ 0x7c
 8008ae8:	4a58      	ldr	r2, [pc, #352]	@ (8008c4c <HAL_UART_MspInit+0x2a4>)
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8008aee:	2200      	movs	r2, #0
 8008af0:	2100      	movs	r1, #0
 8008af2:	205b      	movs	r0, #91	@ 0x5b
 8008af4:	f001 fea5 	bl	800a842 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8008af8:	205b      	movs	r0, #91	@ 0x5b
 8008afa:	f001 febc 	bl	800a876 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8008afe:	e097      	b.n	8008c30 <HAL_UART_MspInit+0x288>
  else if(uartHandle->Instance==USART2)
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	4a53      	ldr	r2, [pc, #332]	@ (8008c54 <HAL_UART_MspInit+0x2ac>)
 8008b06:	4293      	cmp	r3, r2
 8008b08:	f040 8092 	bne.w	8008c30 <HAL_UART_MspInit+0x288>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8008b0c:	2302      	movs	r3, #2
 8008b0e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8008b10:	2300      	movs	r3, #0
 8008b12:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008b14:	f107 0318 	add.w	r3, r7, #24
 8008b18:	4618      	mov	r0, r3
 8008b1a:	f003 f9bf 	bl	800be9c <HAL_RCCEx_PeriphCLKConfig>
 8008b1e:	4603      	mov	r3, r0
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d001      	beq.n	8008b28 <HAL_UART_MspInit+0x180>
      Error_Handler();
 8008b24:	f7fe fbb0 	bl	8007288 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8008b28:	4b44      	ldr	r3, [pc, #272]	@ (8008c3c <HAL_UART_MspInit+0x294>)
 8008b2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b2c:	4a43      	ldr	r2, [pc, #268]	@ (8008c3c <HAL_UART_MspInit+0x294>)
 8008b2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008b32:	6593      	str	r3, [r2, #88]	@ 0x58
 8008b34:	4b41      	ldr	r3, [pc, #260]	@ (8008c3c <HAL_UART_MspInit+0x294>)
 8008b36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b3c:	60fb      	str	r3, [r7, #12]
 8008b3e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008b40:	4b3e      	ldr	r3, [pc, #248]	@ (8008c3c <HAL_UART_MspInit+0x294>)
 8008b42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008b44:	4a3d      	ldr	r2, [pc, #244]	@ (8008c3c <HAL_UART_MspInit+0x294>)
 8008b46:	f043 0301 	orr.w	r3, r3, #1
 8008b4a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008b4c:	4b3b      	ldr	r3, [pc, #236]	@ (8008c3c <HAL_UART_MspInit+0x294>)
 8008b4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008b50:	f003 0301 	and.w	r3, r3, #1
 8008b54:	60bb      	str	r3, [r7, #8]
 8008b56:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8008b58:	230c      	movs	r3, #12
 8008b5a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008b5c:	2302      	movs	r3, #2
 8008b5e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b60:	2300      	movs	r3, #0
 8008b62:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008b64:	2300      	movs	r3, #0
 8008b66:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8008b68:	2307      	movs	r3, #7
 8008b6a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008b6c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8008b70:	4619      	mov	r1, r3
 8008b72:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8008b76:	f002 f9cb 	bl	800af10 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel2;
 8008b7a:	4b37      	ldr	r3, [pc, #220]	@ (8008c58 <HAL_UART_MspInit+0x2b0>)
 8008b7c:	4a37      	ldr	r2, [pc, #220]	@ (8008c5c <HAL_UART_MspInit+0x2b4>)
 8008b7e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8008b80:	4b35      	ldr	r3, [pc, #212]	@ (8008c58 <HAL_UART_MspInit+0x2b0>)
 8008b82:	221a      	movs	r2, #26
 8008b84:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008b86:	4b34      	ldr	r3, [pc, #208]	@ (8008c58 <HAL_UART_MspInit+0x2b0>)
 8008b88:	2200      	movs	r2, #0
 8008b8a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008b8c:	4b32      	ldr	r3, [pc, #200]	@ (8008c58 <HAL_UART_MspInit+0x2b0>)
 8008b8e:	2200      	movs	r2, #0
 8008b90:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008b92:	4b31      	ldr	r3, [pc, #196]	@ (8008c58 <HAL_UART_MspInit+0x2b0>)
 8008b94:	2280      	movs	r2, #128	@ 0x80
 8008b96:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008b98:	4b2f      	ldr	r3, [pc, #188]	@ (8008c58 <HAL_UART_MspInit+0x2b0>)
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008b9e:	4b2e      	ldr	r3, [pc, #184]	@ (8008c58 <HAL_UART_MspInit+0x2b0>)
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8008ba4:	4b2c      	ldr	r3, [pc, #176]	@ (8008c58 <HAL_UART_MspInit+0x2b0>)
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8008baa:	4b2b      	ldr	r3, [pc, #172]	@ (8008c58 <HAL_UART_MspInit+0x2b0>)
 8008bac:	2200      	movs	r2, #0
 8008bae:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8008bb0:	4829      	ldr	r0, [pc, #164]	@ (8008c58 <HAL_UART_MspInit+0x2b0>)
 8008bb2:	f001 fe7b 	bl	800a8ac <HAL_DMA_Init>
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d001      	beq.n	8008bc0 <HAL_UART_MspInit+0x218>
      Error_Handler();
 8008bbc:	f7fe fb64 	bl	8007288 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	4a25      	ldr	r2, [pc, #148]	@ (8008c58 <HAL_UART_MspInit+0x2b0>)
 8008bc4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8008bc8:	4a23      	ldr	r2, [pc, #140]	@ (8008c58 <HAL_UART_MspInit+0x2b0>)
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart2_tx.Instance = DMA1_Channel3;
 8008bce:	4b24      	ldr	r3, [pc, #144]	@ (8008c60 <HAL_UART_MspInit+0x2b8>)
 8008bd0:	4a24      	ldr	r2, [pc, #144]	@ (8008c64 <HAL_UART_MspInit+0x2bc>)
 8008bd2:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8008bd4:	4b22      	ldr	r3, [pc, #136]	@ (8008c60 <HAL_UART_MspInit+0x2b8>)
 8008bd6:	221b      	movs	r2, #27
 8008bd8:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008bda:	4b21      	ldr	r3, [pc, #132]	@ (8008c60 <HAL_UART_MspInit+0x2b8>)
 8008bdc:	2210      	movs	r2, #16
 8008bde:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008be0:	4b1f      	ldr	r3, [pc, #124]	@ (8008c60 <HAL_UART_MspInit+0x2b8>)
 8008be2:	2200      	movs	r2, #0
 8008be4:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008be6:	4b1e      	ldr	r3, [pc, #120]	@ (8008c60 <HAL_UART_MspInit+0x2b8>)
 8008be8:	2280      	movs	r2, #128	@ 0x80
 8008bea:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008bec:	4b1c      	ldr	r3, [pc, #112]	@ (8008c60 <HAL_UART_MspInit+0x2b8>)
 8008bee:	2200      	movs	r2, #0
 8008bf0:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008bf2:	4b1b      	ldr	r3, [pc, #108]	@ (8008c60 <HAL_UART_MspInit+0x2b8>)
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8008bf8:	4b19      	ldr	r3, [pc, #100]	@ (8008c60 <HAL_UART_MspInit+0x2b8>)
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8008bfe:	4b18      	ldr	r3, [pc, #96]	@ (8008c60 <HAL_UART_MspInit+0x2b8>)
 8008c00:	2200      	movs	r2, #0
 8008c02:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8008c04:	4816      	ldr	r0, [pc, #88]	@ (8008c60 <HAL_UART_MspInit+0x2b8>)
 8008c06:	f001 fe51 	bl	800a8ac <HAL_DMA_Init>
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d001      	beq.n	8008c14 <HAL_UART_MspInit+0x26c>
      Error_Handler();
 8008c10:	f7fe fb3a 	bl	8007288 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	4a12      	ldr	r2, [pc, #72]	@ (8008c60 <HAL_UART_MspInit+0x2b8>)
 8008c18:	67da      	str	r2, [r3, #124]	@ 0x7c
 8008c1a:	4a11      	ldr	r2, [pc, #68]	@ (8008c60 <HAL_UART_MspInit+0x2b8>)
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8008c20:	2200      	movs	r2, #0
 8008c22:	2100      	movs	r1, #0
 8008c24:	2026      	movs	r0, #38	@ 0x26
 8008c26:	f001 fe0c 	bl	800a842 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8008c2a:	2026      	movs	r0, #38	@ 0x26
 8008c2c:	f001 fe23 	bl	800a876 <HAL_NVIC_EnableIRQ>
}
 8008c30:	bf00      	nop
 8008c32:	3780      	adds	r7, #128	@ 0x80
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}
 8008c38:	40008000 	.word	0x40008000
 8008c3c:	40021000 	.word	0x40021000
 8008c40:	48000400 	.word	0x48000400
 8008c44:	2000204c 	.word	0x2000204c
 8008c48:	40020044 	.word	0x40020044
 8008c4c:	200020ac 	.word	0x200020ac
 8008c50:	40020058 	.word	0x40020058
 8008c54:	40004400 	.word	0x40004400
 8008c58:	2000210c 	.word	0x2000210c
 8008c5c:	4002001c 	.word	0x4002001c
 8008c60:	2000216c 	.word	0x2000216c
 8008c64:	40020030 	.word	0x40020030

08008c68 <Reset_Handler>:
*/

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:  ldr   r0, =_estack
 8008c68:	480d      	ldr	r0, [pc, #52]	@ (8008ca0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8008c6a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8008c6c:	f7ff f994 	bl	8007f98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008c70:	480c      	ldr	r0, [pc, #48]	@ (8008ca4 <LoopForever+0x6>)
  ldr r1, =_edata
 8008c72:	490d      	ldr	r1, [pc, #52]	@ (8008ca8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8008c74:	4a0d      	ldr	r2, [pc, #52]	@ (8008cac <LoopForever+0xe>)
  movs r3, #0
 8008c76:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8008c78:	e002      	b.n	8008c80 <LoopCopyDataInit>

08008c7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008c7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008c7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008c7e:	3304      	adds	r3, #4

08008c80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008c80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008c82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008c84:	d3f9      	bcc.n	8008c7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008c86:	4a0a      	ldr	r2, [pc, #40]	@ (8008cb0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8008c88:	4c0a      	ldr	r4, [pc, #40]	@ (8008cb4 <LoopForever+0x16>)
  movs r3, #0
 8008c8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008c8c:	e001      	b.n	8008c92 <LoopFillZerobss>

08008c8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008c8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008c90:	3204      	adds	r2, #4

08008c92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008c92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008c94:	d3fb      	bcc.n	8008c8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8008c96:	f008 f831 	bl	8010cfc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8008c9a:	f7fc fa5d 	bl	8005158 <main>

08008c9e <LoopForever>:

LoopForever:
    b LoopForever
 8008c9e:	e7fe      	b.n	8008c9e <LoopForever>
Reset_Handler:  ldr   r0, =_estack
 8008ca0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8008ca4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008ca8:	2000018c 	.word	0x2000018c
  ldr r2, =_sidata
 8008cac:	08013200 	.word	0x08013200
  ldr r2, =_sbss
 8008cb0:	2000018c 	.word	0x2000018c
  ldr r4, =_ebss
 8008cb4:	20002318 	.word	0x20002318

08008cb8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8008cb8:	e7fe      	b.n	8008cb8 <ADC1_2_IRQHandler>

08008cba <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008cba:	b580      	push	{r7, lr}
 8008cbc:	b082      	sub	sp, #8
 8008cbe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008cc4:	2003      	movs	r0, #3
 8008cc6:	f001 fdb1 	bl	800a82c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8008cca:	2000      	movs	r0, #0
 8008ccc:	f000 f80e 	bl	8008cec <HAL_InitTick>
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d002      	beq.n	8008cdc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8008cd6:	2301      	movs	r3, #1
 8008cd8:	71fb      	strb	r3, [r7, #7]
 8008cda:	e001      	b.n	8008ce0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8008cdc:	f7ff f834 	bl	8007d48 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8008ce0:	79fb      	ldrb	r3, [r7, #7]

}
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	3708      	adds	r7, #8
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bd80      	pop	{r7, pc}
	...

08008cec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b084      	sub	sp, #16
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8008cf8:	4b16      	ldr	r3, [pc, #88]	@ (8008d54 <HAL_InitTick+0x68>)
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d022      	beq.n	8008d46 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8008d00:	4b15      	ldr	r3, [pc, #84]	@ (8008d58 <HAL_InitTick+0x6c>)
 8008d02:	681a      	ldr	r2, [r3, #0]
 8008d04:	4b13      	ldr	r3, [pc, #76]	@ (8008d54 <HAL_InitTick+0x68>)
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8008d0c:	fbb1 f3f3 	udiv	r3, r1, r3
 8008d10:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d14:	4618      	mov	r0, r3
 8008d16:	f001 fdbc 	bl	800a892 <HAL_SYSTICK_Config>
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d10f      	bne.n	8008d40 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2b0f      	cmp	r3, #15
 8008d24:	d809      	bhi.n	8008d3a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008d26:	2200      	movs	r2, #0
 8008d28:	6879      	ldr	r1, [r7, #4]
 8008d2a:	f04f 30ff 	mov.w	r0, #4294967295
 8008d2e:	f001 fd88 	bl	800a842 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8008d32:	4a0a      	ldr	r2, [pc, #40]	@ (8008d5c <HAL_InitTick+0x70>)
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	6013      	str	r3, [r2, #0]
 8008d38:	e007      	b.n	8008d4a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8008d3a:	2301      	movs	r3, #1
 8008d3c:	73fb      	strb	r3, [r7, #15]
 8008d3e:	e004      	b.n	8008d4a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8008d40:	2301      	movs	r3, #1
 8008d42:	73fb      	strb	r3, [r7, #15]
 8008d44:	e001      	b.n	8008d4a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8008d46:	2301      	movs	r3, #1
 8008d48:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8008d4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	3710      	adds	r7, #16
 8008d50:	46bd      	mov	sp, r7
 8008d52:	bd80      	pop	{r7, pc}
 8008d54:	20000138 	.word	0x20000138
 8008d58:	20000130 	.word	0x20000130
 8008d5c:	20000134 	.word	0x20000134

08008d60 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008d60:	b480      	push	{r7}
 8008d62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008d64:	4b05      	ldr	r3, [pc, #20]	@ (8008d7c <HAL_IncTick+0x1c>)
 8008d66:	681a      	ldr	r2, [r3, #0]
 8008d68:	4b05      	ldr	r3, [pc, #20]	@ (8008d80 <HAL_IncTick+0x20>)
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	4413      	add	r3, r2
 8008d6e:	4a03      	ldr	r2, [pc, #12]	@ (8008d7c <HAL_IncTick+0x1c>)
 8008d70:	6013      	str	r3, [r2, #0]
}
 8008d72:	bf00      	nop
 8008d74:	46bd      	mov	sp, r7
 8008d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7a:	4770      	bx	lr
 8008d7c:	200021cc 	.word	0x200021cc
 8008d80:	20000138 	.word	0x20000138

08008d84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008d84:	b480      	push	{r7}
 8008d86:	af00      	add	r7, sp, #0
  return uwTick;
 8008d88:	4b03      	ldr	r3, [pc, #12]	@ (8008d98 <HAL_GetTick+0x14>)
 8008d8a:	681b      	ldr	r3, [r3, #0]
}
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d94:	4770      	bx	lr
 8008d96:	bf00      	nop
 8008d98:	200021cc 	.word	0x200021cc

08008d9c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8008d9c:	b480      	push	{r7}
 8008d9e:	b083      	sub	sp, #12
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
 8008da4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	689b      	ldr	r3, [r3, #8]
 8008daa:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	431a      	orrs	r2, r3
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	609a      	str	r2, [r3, #8]
}
 8008db6:	bf00      	nop
 8008db8:	370c      	adds	r7, #12
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc0:	4770      	bx	lr

08008dc2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8008dc2:	b480      	push	{r7}
 8008dc4:	b083      	sub	sp, #12
 8008dc6:	af00      	add	r7, sp, #0
 8008dc8:	6078      	str	r0, [r7, #4]
 8008dca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	689b      	ldr	r3, [r3, #8]
 8008dd0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	431a      	orrs	r2, r3
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	609a      	str	r2, [r3, #8]
}
 8008ddc:	bf00      	nop
 8008dde:	370c      	adds	r7, #12
 8008de0:	46bd      	mov	sp, r7
 8008de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de6:	4770      	bx	lr

08008de8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8008de8:	b480      	push	{r7}
 8008dea:	b083      	sub	sp, #12
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	689b      	ldr	r3, [r3, #8]
 8008df4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8008df8:	4618      	mov	r0, r3
 8008dfa:	370c      	adds	r7, #12
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e02:	4770      	bx	lr

08008e04 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8008e04:	b480      	push	{r7}
 8008e06:	b087      	sub	sp, #28
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	60f8      	str	r0, [r7, #12]
 8008e0c:	60b9      	str	r1, [r7, #8]
 8008e0e:	607a      	str	r2, [r7, #4]
 8008e10:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	3360      	adds	r3, #96	@ 0x60
 8008e16:	461a      	mov	r2, r3
 8008e18:	68bb      	ldr	r3, [r7, #8]
 8008e1a:	009b      	lsls	r3, r3, #2
 8008e1c:	4413      	add	r3, r2
 8008e1e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8008e20:	697b      	ldr	r3, [r7, #20]
 8008e22:	681a      	ldr	r2, [r3, #0]
 8008e24:	4b08      	ldr	r3, [pc, #32]	@ (8008e48 <LL_ADC_SetOffset+0x44>)
 8008e26:	4013      	ands	r3, r2
 8008e28:	687a      	ldr	r2, [r7, #4]
 8008e2a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8008e2e:	683a      	ldr	r2, [r7, #0]
 8008e30:	430a      	orrs	r2, r1
 8008e32:	4313      	orrs	r3, r2
 8008e34:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8008e38:	697b      	ldr	r3, [r7, #20]
 8008e3a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8008e3c:	bf00      	nop
 8008e3e:	371c      	adds	r7, #28
 8008e40:	46bd      	mov	sp, r7
 8008e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e46:	4770      	bx	lr
 8008e48:	03fff000 	.word	0x03fff000

08008e4c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8008e4c:	b480      	push	{r7}
 8008e4e:	b085      	sub	sp, #20
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
 8008e54:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	3360      	adds	r3, #96	@ 0x60
 8008e5a:	461a      	mov	r2, r3
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	009b      	lsls	r3, r3, #2
 8008e60:	4413      	add	r3, r2
 8008e62:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	3714      	adds	r7, #20
 8008e70:	46bd      	mov	sp, r7
 8008e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e76:	4770      	bx	lr

08008e78 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8008e78:	b480      	push	{r7}
 8008e7a:	b087      	sub	sp, #28
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	60f8      	str	r0, [r7, #12]
 8008e80:	60b9      	str	r1, [r7, #8]
 8008e82:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	3360      	adds	r3, #96	@ 0x60
 8008e88:	461a      	mov	r2, r3
 8008e8a:	68bb      	ldr	r3, [r7, #8]
 8008e8c:	009b      	lsls	r3, r3, #2
 8008e8e:	4413      	add	r3, r2
 8008e90:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8008e92:	697b      	ldr	r3, [r7, #20]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	431a      	orrs	r2, r3
 8008e9e:	697b      	ldr	r3, [r7, #20]
 8008ea0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8008ea2:	bf00      	nop
 8008ea4:	371c      	adds	r7, #28
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eac:	4770      	bx	lr

08008eae <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8008eae:	b480      	push	{r7}
 8008eb0:	b087      	sub	sp, #28
 8008eb2:	af00      	add	r7, sp, #0
 8008eb4:	60f8      	str	r0, [r7, #12]
 8008eb6:	60b9      	str	r1, [r7, #8]
 8008eb8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	3360      	adds	r3, #96	@ 0x60
 8008ebe:	461a      	mov	r2, r3
 8008ec0:	68bb      	ldr	r3, [r7, #8]
 8008ec2:	009b      	lsls	r3, r3, #2
 8008ec4:	4413      	add	r3, r2
 8008ec6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8008ec8:	697b      	ldr	r3, [r7, #20]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	431a      	orrs	r2, r3
 8008ed4:	697b      	ldr	r3, [r7, #20]
 8008ed6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8008ed8:	bf00      	nop
 8008eda:	371c      	adds	r7, #28
 8008edc:	46bd      	mov	sp, r7
 8008ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee2:	4770      	bx	lr

08008ee4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8008ee4:	b480      	push	{r7}
 8008ee6:	b087      	sub	sp, #28
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	60f8      	str	r0, [r7, #12]
 8008eec:	60b9      	str	r1, [r7, #8]
 8008eee:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	3360      	adds	r3, #96	@ 0x60
 8008ef4:	461a      	mov	r2, r3
 8008ef6:	68bb      	ldr	r3, [r7, #8]
 8008ef8:	009b      	lsls	r3, r3, #2
 8008efa:	4413      	add	r3, r2
 8008efc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8008efe:	697b      	ldr	r3, [r7, #20]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	431a      	orrs	r2, r3
 8008f0a:	697b      	ldr	r3, [r7, #20]
 8008f0c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8008f0e:	bf00      	nop
 8008f10:	371c      	adds	r7, #28
 8008f12:	46bd      	mov	sp, r7
 8008f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f18:	4770      	bx	lr

08008f1a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8008f1a:	b480      	push	{r7}
 8008f1c:	b083      	sub	sp, #12
 8008f1e:	af00      	add	r7, sp, #0
 8008f20:	6078      	str	r0, [r7, #4]
 8008f22:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	695b      	ldr	r3, [r3, #20]
 8008f28:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	431a      	orrs	r2, r3
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	615a      	str	r2, [r3, #20]
}
 8008f34:	bf00      	nop
 8008f36:	370c      	adds	r7, #12
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3e:	4770      	bx	lr

08008f40 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8008f40:	b480      	push	{r7}
 8008f42:	b083      	sub	sp, #12
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	68db      	ldr	r3, [r3, #12]
 8008f4c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d101      	bne.n	8008f58 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8008f54:	2301      	movs	r3, #1
 8008f56:	e000      	b.n	8008f5a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8008f58:	2300      	movs	r3, #0
}
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	370c      	adds	r7, #12
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f64:	4770      	bx	lr

08008f66 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8008f66:	b480      	push	{r7}
 8008f68:	b087      	sub	sp, #28
 8008f6a:	af00      	add	r7, sp, #0
 8008f6c:	60f8      	str	r0, [r7, #12]
 8008f6e:	60b9      	str	r1, [r7, #8]
 8008f70:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	3330      	adds	r3, #48	@ 0x30
 8008f76:	461a      	mov	r2, r3
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	0a1b      	lsrs	r3, r3, #8
 8008f7c:	009b      	lsls	r3, r3, #2
 8008f7e:	f003 030c 	and.w	r3, r3, #12
 8008f82:	4413      	add	r3, r2
 8008f84:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8008f86:	697b      	ldr	r3, [r7, #20]
 8008f88:	681a      	ldr	r2, [r3, #0]
 8008f8a:	68bb      	ldr	r3, [r7, #8]
 8008f8c:	f003 031f 	and.w	r3, r3, #31
 8008f90:	211f      	movs	r1, #31
 8008f92:	fa01 f303 	lsl.w	r3, r1, r3
 8008f96:	43db      	mvns	r3, r3
 8008f98:	401a      	ands	r2, r3
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	0e9b      	lsrs	r3, r3, #26
 8008f9e:	f003 011f 	and.w	r1, r3, #31
 8008fa2:	68bb      	ldr	r3, [r7, #8]
 8008fa4:	f003 031f 	and.w	r3, r3, #31
 8008fa8:	fa01 f303 	lsl.w	r3, r1, r3
 8008fac:	431a      	orrs	r2, r3
 8008fae:	697b      	ldr	r3, [r7, #20]
 8008fb0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8008fb2:	bf00      	nop
 8008fb4:	371c      	adds	r7, #28
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fbc:	4770      	bx	lr

08008fbe <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8008fbe:	b480      	push	{r7}
 8008fc0:	b087      	sub	sp, #28
 8008fc2:	af00      	add	r7, sp, #0
 8008fc4:	60f8      	str	r0, [r7, #12]
 8008fc6:	60b9      	str	r1, [r7, #8]
 8008fc8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	3314      	adds	r3, #20
 8008fce:	461a      	mov	r2, r3
 8008fd0:	68bb      	ldr	r3, [r7, #8]
 8008fd2:	0e5b      	lsrs	r3, r3, #25
 8008fd4:	009b      	lsls	r3, r3, #2
 8008fd6:	f003 0304 	and.w	r3, r3, #4
 8008fda:	4413      	add	r3, r2
 8008fdc:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8008fde:	697b      	ldr	r3, [r7, #20]
 8008fe0:	681a      	ldr	r2, [r3, #0]
 8008fe2:	68bb      	ldr	r3, [r7, #8]
 8008fe4:	0d1b      	lsrs	r3, r3, #20
 8008fe6:	f003 031f 	and.w	r3, r3, #31
 8008fea:	2107      	movs	r1, #7
 8008fec:	fa01 f303 	lsl.w	r3, r1, r3
 8008ff0:	43db      	mvns	r3, r3
 8008ff2:	401a      	ands	r2, r3
 8008ff4:	68bb      	ldr	r3, [r7, #8]
 8008ff6:	0d1b      	lsrs	r3, r3, #20
 8008ff8:	f003 031f 	and.w	r3, r3, #31
 8008ffc:	6879      	ldr	r1, [r7, #4]
 8008ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8009002:	431a      	orrs	r2, r3
 8009004:	697b      	ldr	r3, [r7, #20]
 8009006:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8009008:	bf00      	nop
 800900a:	371c      	adds	r7, #28
 800900c:	46bd      	mov	sp, r7
 800900e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009012:	4770      	bx	lr

08009014 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8009014:	b480      	push	{r7}
 8009016:	b085      	sub	sp, #20
 8009018:	af00      	add	r7, sp, #0
 800901a:	60f8      	str	r0, [r7, #12]
 800901c:	60b9      	str	r1, [r7, #8]
 800901e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8009026:	68bb      	ldr	r3, [r7, #8]
 8009028:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800902c:	43db      	mvns	r3, r3
 800902e:	401a      	ands	r2, r3
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	f003 0318 	and.w	r3, r3, #24
 8009036:	4908      	ldr	r1, [pc, #32]	@ (8009058 <LL_ADC_SetChannelSingleDiff+0x44>)
 8009038:	40d9      	lsrs	r1, r3
 800903a:	68bb      	ldr	r3, [r7, #8]
 800903c:	400b      	ands	r3, r1
 800903e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009042:	431a      	orrs	r2, r3
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800904a:	bf00      	nop
 800904c:	3714      	adds	r7, #20
 800904e:	46bd      	mov	sp, r7
 8009050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009054:	4770      	bx	lr
 8009056:	bf00      	nop
 8009058:	0007ffff 	.word	0x0007ffff

0800905c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800905c:	b480      	push	{r7}
 800905e:	b083      	sub	sp, #12
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	689b      	ldr	r3, [r3, #8]
 8009068:	f003 031f 	and.w	r3, r3, #31
}
 800906c:	4618      	mov	r0, r3
 800906e:	370c      	adds	r7, #12
 8009070:	46bd      	mov	sp, r7
 8009072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009076:	4770      	bx	lr

08009078 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8009078:	b480      	push	{r7}
 800907a:	b083      	sub	sp, #12
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	689b      	ldr	r3, [r3, #8]
 8009084:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8009088:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800908c:	687a      	ldr	r2, [r7, #4]
 800908e:	6093      	str	r3, [r2, #8]
}
 8009090:	bf00      	nop
 8009092:	370c      	adds	r7, #12
 8009094:	46bd      	mov	sp, r7
 8009096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909a:	4770      	bx	lr

0800909c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800909c:	b480      	push	{r7}
 800909e:	b083      	sub	sp, #12
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	689b      	ldr	r3, [r3, #8]
 80090a8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80090ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80090b0:	d101      	bne.n	80090b6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80090b2:	2301      	movs	r3, #1
 80090b4:	e000      	b.n	80090b8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80090b6:	2300      	movs	r3, #0
}
 80090b8:	4618      	mov	r0, r3
 80090ba:	370c      	adds	r7, #12
 80090bc:	46bd      	mov	sp, r7
 80090be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c2:	4770      	bx	lr

080090c4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80090c4:	b480      	push	{r7}
 80090c6:	b083      	sub	sp, #12
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	689b      	ldr	r3, [r3, #8]
 80090d0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80090d4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80090d8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80090e0:	bf00      	nop
 80090e2:	370c      	adds	r7, #12
 80090e4:	46bd      	mov	sp, r7
 80090e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ea:	4770      	bx	lr

080090ec <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80090ec:	b480      	push	{r7}
 80090ee:	b083      	sub	sp, #12
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	689b      	ldr	r3, [r3, #8]
 80090f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80090fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009100:	d101      	bne.n	8009106 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8009102:	2301      	movs	r3, #1
 8009104:	e000      	b.n	8009108 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8009106:	2300      	movs	r3, #0
}
 8009108:	4618      	mov	r0, r3
 800910a:	370c      	adds	r7, #12
 800910c:	46bd      	mov	sp, r7
 800910e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009112:	4770      	bx	lr

08009114 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8009114:	b480      	push	{r7}
 8009116:	b083      	sub	sp, #12
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	689b      	ldr	r3, [r3, #8]
 8009120:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009124:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8009128:	f043 0201 	orr.w	r2, r3, #1
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8009130:	bf00      	nop
 8009132:	370c      	adds	r7, #12
 8009134:	46bd      	mov	sp, r7
 8009136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913a:	4770      	bx	lr

0800913c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800913c:	b480      	push	{r7}
 800913e:	b083      	sub	sp, #12
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	689b      	ldr	r3, [r3, #8]
 8009148:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800914c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8009150:	f043 0202 	orr.w	r2, r3, #2
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8009158:	bf00      	nop
 800915a:	370c      	adds	r7, #12
 800915c:	46bd      	mov	sp, r7
 800915e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009162:	4770      	bx	lr

08009164 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8009164:	b480      	push	{r7}
 8009166:	b083      	sub	sp, #12
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	689b      	ldr	r3, [r3, #8]
 8009170:	f003 0301 	and.w	r3, r3, #1
 8009174:	2b01      	cmp	r3, #1
 8009176:	d101      	bne.n	800917c <LL_ADC_IsEnabled+0x18>
 8009178:	2301      	movs	r3, #1
 800917a:	e000      	b.n	800917e <LL_ADC_IsEnabled+0x1a>
 800917c:	2300      	movs	r3, #0
}
 800917e:	4618      	mov	r0, r3
 8009180:	370c      	adds	r7, #12
 8009182:	46bd      	mov	sp, r7
 8009184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009188:	4770      	bx	lr

0800918a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800918a:	b480      	push	{r7}
 800918c:	b083      	sub	sp, #12
 800918e:	af00      	add	r7, sp, #0
 8009190:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	689b      	ldr	r3, [r3, #8]
 8009196:	f003 0302 	and.w	r3, r3, #2
 800919a:	2b02      	cmp	r3, #2
 800919c:	d101      	bne.n	80091a2 <LL_ADC_IsDisableOngoing+0x18>
 800919e:	2301      	movs	r3, #1
 80091a0:	e000      	b.n	80091a4 <LL_ADC_IsDisableOngoing+0x1a>
 80091a2:	2300      	movs	r3, #0
}
 80091a4:	4618      	mov	r0, r3
 80091a6:	370c      	adds	r7, #12
 80091a8:	46bd      	mov	sp, r7
 80091aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ae:	4770      	bx	lr

080091b0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80091b0:	b480      	push	{r7}
 80091b2:	b083      	sub	sp, #12
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	689b      	ldr	r3, [r3, #8]
 80091bc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80091c0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80091c4:	f043 0204 	orr.w	r2, r3, #4
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80091cc:	bf00      	nop
 80091ce:	370c      	adds	r7, #12
 80091d0:	46bd      	mov	sp, r7
 80091d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d6:	4770      	bx	lr

080091d8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80091d8:	b480      	push	{r7}
 80091da:	b083      	sub	sp, #12
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	689b      	ldr	r3, [r3, #8]
 80091e4:	f003 0304 	and.w	r3, r3, #4
 80091e8:	2b04      	cmp	r3, #4
 80091ea:	d101      	bne.n	80091f0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80091ec:	2301      	movs	r3, #1
 80091ee:	e000      	b.n	80091f2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80091f0:	2300      	movs	r3, #0
}
 80091f2:	4618      	mov	r0, r3
 80091f4:	370c      	adds	r7, #12
 80091f6:	46bd      	mov	sp, r7
 80091f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fc:	4770      	bx	lr

080091fe <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80091fe:	b480      	push	{r7}
 8009200:	b083      	sub	sp, #12
 8009202:	af00      	add	r7, sp, #0
 8009204:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	689b      	ldr	r3, [r3, #8]
 800920a:	f003 0308 	and.w	r3, r3, #8
 800920e:	2b08      	cmp	r3, #8
 8009210:	d101      	bne.n	8009216 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8009212:	2301      	movs	r3, #1
 8009214:	e000      	b.n	8009218 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8009216:	2300      	movs	r3, #0
}
 8009218:	4618      	mov	r0, r3
 800921a:	370c      	adds	r7, #12
 800921c:	46bd      	mov	sp, r7
 800921e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009222:	4770      	bx	lr

08009224 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8009224:	b590      	push	{r4, r7, lr}
 8009226:	b089      	sub	sp, #36	@ 0x24
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800922c:	2300      	movs	r3, #0
 800922e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8009230:	2300      	movs	r3, #0
 8009232:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d101      	bne.n	800923e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800923a:	2301      	movs	r3, #1
 800923c:	e1a9      	b.n	8009592 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	695b      	ldr	r3, [r3, #20]
 8009242:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009248:	2b00      	cmp	r3, #0
 800924a:	d109      	bne.n	8009260 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800924c:	6878      	ldr	r0, [r7, #4]
 800924e:	f7fb fa7f 	bl	8004750 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	2200      	movs	r2, #0
 8009256:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2200      	movs	r2, #0
 800925c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	4618      	mov	r0, r3
 8009266:	f7ff ff19 	bl	800909c <LL_ADC_IsDeepPowerDownEnabled>
 800926a:	4603      	mov	r3, r0
 800926c:	2b00      	cmp	r3, #0
 800926e:	d004      	beq.n	800927a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	4618      	mov	r0, r3
 8009276:	f7ff feff 	bl	8009078 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	4618      	mov	r0, r3
 8009280:	f7ff ff34 	bl	80090ec <LL_ADC_IsInternalRegulatorEnabled>
 8009284:	4603      	mov	r3, r0
 8009286:	2b00      	cmp	r3, #0
 8009288:	d115      	bne.n	80092b6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	4618      	mov	r0, r3
 8009290:	f7ff ff18 	bl	80090c4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8009294:	4b9c      	ldr	r3, [pc, #624]	@ (8009508 <HAL_ADC_Init+0x2e4>)
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	099b      	lsrs	r3, r3, #6
 800929a:	4a9c      	ldr	r2, [pc, #624]	@ (800950c <HAL_ADC_Init+0x2e8>)
 800929c:	fba2 2303 	umull	r2, r3, r2, r3
 80092a0:	099b      	lsrs	r3, r3, #6
 80092a2:	3301      	adds	r3, #1
 80092a4:	005b      	lsls	r3, r3, #1
 80092a6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80092a8:	e002      	b.n	80092b0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	3b01      	subs	r3, #1
 80092ae:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d1f9      	bne.n	80092aa <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	4618      	mov	r0, r3
 80092bc:	f7ff ff16 	bl	80090ec <LL_ADC_IsInternalRegulatorEnabled>
 80092c0:	4603      	mov	r3, r0
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d10d      	bne.n	80092e2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80092ca:	f043 0210 	orr.w	r2, r3, #16
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80092d6:	f043 0201 	orr.w	r2, r3, #1
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80092de:	2301      	movs	r3, #1
 80092e0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	4618      	mov	r0, r3
 80092e8:	f7ff ff76 	bl	80091d8 <LL_ADC_REG_IsConversionOngoing>
 80092ec:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80092f2:	f003 0310 	and.w	r3, r3, #16
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	f040 8142 	bne.w	8009580 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80092fc:	697b      	ldr	r3, [r7, #20]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	f040 813e 	bne.w	8009580 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009308:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800930c:	f043 0202 	orr.w	r2, r3, #2
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	4618      	mov	r0, r3
 800931a:	f7ff ff23 	bl	8009164 <LL_ADC_IsEnabled>
 800931e:	4603      	mov	r3, r0
 8009320:	2b00      	cmp	r3, #0
 8009322:	d141      	bne.n	80093a8 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800932c:	d004      	beq.n	8009338 <HAL_ADC_Init+0x114>
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	4a77      	ldr	r2, [pc, #476]	@ (8009510 <HAL_ADC_Init+0x2ec>)
 8009334:	4293      	cmp	r3, r2
 8009336:	d10f      	bne.n	8009358 <HAL_ADC_Init+0x134>
 8009338:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800933c:	f7ff ff12 	bl	8009164 <LL_ADC_IsEnabled>
 8009340:	4604      	mov	r4, r0
 8009342:	4873      	ldr	r0, [pc, #460]	@ (8009510 <HAL_ADC_Init+0x2ec>)
 8009344:	f7ff ff0e 	bl	8009164 <LL_ADC_IsEnabled>
 8009348:	4603      	mov	r3, r0
 800934a:	4323      	orrs	r3, r4
 800934c:	2b00      	cmp	r3, #0
 800934e:	bf0c      	ite	eq
 8009350:	2301      	moveq	r3, #1
 8009352:	2300      	movne	r3, #0
 8009354:	b2db      	uxtb	r3, r3
 8009356:	e012      	b.n	800937e <HAL_ADC_Init+0x15a>
 8009358:	486e      	ldr	r0, [pc, #440]	@ (8009514 <HAL_ADC_Init+0x2f0>)
 800935a:	f7ff ff03 	bl	8009164 <LL_ADC_IsEnabled>
 800935e:	4604      	mov	r4, r0
 8009360:	486d      	ldr	r0, [pc, #436]	@ (8009518 <HAL_ADC_Init+0x2f4>)
 8009362:	f7ff feff 	bl	8009164 <LL_ADC_IsEnabled>
 8009366:	4603      	mov	r3, r0
 8009368:	431c      	orrs	r4, r3
 800936a:	486c      	ldr	r0, [pc, #432]	@ (800951c <HAL_ADC_Init+0x2f8>)
 800936c:	f7ff fefa 	bl	8009164 <LL_ADC_IsEnabled>
 8009370:	4603      	mov	r3, r0
 8009372:	4323      	orrs	r3, r4
 8009374:	2b00      	cmp	r3, #0
 8009376:	bf0c      	ite	eq
 8009378:	2301      	moveq	r3, #1
 800937a:	2300      	movne	r3, #0
 800937c:	b2db      	uxtb	r3, r3
 800937e:	2b00      	cmp	r3, #0
 8009380:	d012      	beq.n	80093a8 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800938a:	d004      	beq.n	8009396 <HAL_ADC_Init+0x172>
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	4a5f      	ldr	r2, [pc, #380]	@ (8009510 <HAL_ADC_Init+0x2ec>)
 8009392:	4293      	cmp	r3, r2
 8009394:	d101      	bne.n	800939a <HAL_ADC_Init+0x176>
 8009396:	4a62      	ldr	r2, [pc, #392]	@ (8009520 <HAL_ADC_Init+0x2fc>)
 8009398:	e000      	b.n	800939c <HAL_ADC_Init+0x178>
 800939a:	4a62      	ldr	r2, [pc, #392]	@ (8009524 <HAL_ADC_Init+0x300>)
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	685b      	ldr	r3, [r3, #4]
 80093a0:	4619      	mov	r1, r3
 80093a2:	4610      	mov	r0, r2
 80093a4:	f7ff fcfa 	bl	8008d9c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	7f5b      	ldrb	r3, [r3, #29]
 80093ac:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80093b2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80093b8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80093be:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80093c6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80093c8:	4313      	orrs	r3, r2
 80093ca:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80093d2:	2b01      	cmp	r3, #1
 80093d4:	d106      	bne.n	80093e4 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093da:	3b01      	subs	r3, #1
 80093dc:	045b      	lsls	r3, r3, #17
 80093de:	69ba      	ldr	r2, [r7, #24]
 80093e0:	4313      	orrs	r3, r2
 80093e2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d009      	beq.n	8009400 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093f0:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093f8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80093fa:	69ba      	ldr	r2, [r7, #24]
 80093fc:	4313      	orrs	r3, r2
 80093fe:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	68da      	ldr	r2, [r3, #12]
 8009406:	4b48      	ldr	r3, [pc, #288]	@ (8009528 <HAL_ADC_Init+0x304>)
 8009408:	4013      	ands	r3, r2
 800940a:	687a      	ldr	r2, [r7, #4]
 800940c:	6812      	ldr	r2, [r2, #0]
 800940e:	69b9      	ldr	r1, [r7, #24]
 8009410:	430b      	orrs	r3, r1
 8009412:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	691b      	ldr	r3, [r3, #16]
 800941a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	430a      	orrs	r2, r1
 8009428:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	4618      	mov	r0, r3
 8009430:	f7ff fee5 	bl	80091fe <LL_ADC_INJ_IsConversionOngoing>
 8009434:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8009436:	697b      	ldr	r3, [r7, #20]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d17f      	bne.n	800953c <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800943c:	693b      	ldr	r3, [r7, #16]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d17c      	bne.n	800953c <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8009446:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800944e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8009450:	4313      	orrs	r3, r2
 8009452:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	68db      	ldr	r3, [r3, #12]
 800945a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800945e:	f023 0302 	bic.w	r3, r3, #2
 8009462:	687a      	ldr	r2, [r7, #4]
 8009464:	6812      	ldr	r2, [r2, #0]
 8009466:	69b9      	ldr	r1, [r7, #24]
 8009468:	430b      	orrs	r3, r1
 800946a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	691b      	ldr	r3, [r3, #16]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d017      	beq.n	80094a4 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	691a      	ldr	r2, [r3, #16]
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8009482:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800948c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8009490:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8009494:	687a      	ldr	r2, [r7, #4]
 8009496:	6911      	ldr	r1, [r2, #16]
 8009498:	687a      	ldr	r2, [r7, #4]
 800949a:	6812      	ldr	r2, [r2, #0]
 800949c:	430b      	orrs	r3, r1
 800949e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80094a2:	e013      	b.n	80094cc <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	691a      	ldr	r2, [r3, #16]
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80094b2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80094bc:	687a      	ldr	r2, [r7, #4]
 80094be:	6812      	ldr	r2, [r2, #0]
 80094c0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80094c4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80094c8:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80094d2:	2b01      	cmp	r3, #1
 80094d4:	d12a      	bne.n	800952c <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	691b      	ldr	r3, [r3, #16]
 80094dc:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80094e0:	f023 0304 	bic.w	r3, r3, #4
 80094e4:	687a      	ldr	r2, [r7, #4]
 80094e6:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80094e8:	687a      	ldr	r2, [r7, #4]
 80094ea:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80094ec:	4311      	orrs	r1, r2
 80094ee:	687a      	ldr	r2, [r7, #4]
 80094f0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80094f2:	4311      	orrs	r1, r2
 80094f4:	687a      	ldr	r2, [r7, #4]
 80094f6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80094f8:	430a      	orrs	r2, r1
 80094fa:	431a      	orrs	r2, r3
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f042 0201 	orr.w	r2, r2, #1
 8009504:	611a      	str	r2, [r3, #16]
 8009506:	e019      	b.n	800953c <HAL_ADC_Init+0x318>
 8009508:	20000130 	.word	0x20000130
 800950c:	053e2d63 	.word	0x053e2d63
 8009510:	50000100 	.word	0x50000100
 8009514:	50000400 	.word	0x50000400
 8009518:	50000500 	.word	0x50000500
 800951c:	50000600 	.word	0x50000600
 8009520:	50000300 	.word	0x50000300
 8009524:	50000700 	.word	0x50000700
 8009528:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	691a      	ldr	r2, [r3, #16]
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	f022 0201 	bic.w	r2, r2, #1
 800953a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	695b      	ldr	r3, [r3, #20]
 8009540:	2b01      	cmp	r3, #1
 8009542:	d10c      	bne.n	800955e <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800954a:	f023 010f 	bic.w	r1, r3, #15
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	6a1b      	ldr	r3, [r3, #32]
 8009552:	1e5a      	subs	r2, r3, #1
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	430a      	orrs	r2, r1
 800955a:	631a      	str	r2, [r3, #48]	@ 0x30
 800955c:	e007      	b.n	800956e <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	f022 020f 	bic.w	r2, r2, #15
 800956c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009572:	f023 0303 	bic.w	r3, r3, #3
 8009576:	f043 0201 	orr.w	r2, r3, #1
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800957e:	e007      	b.n	8009590 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009584:	f043 0210 	orr.w	r2, r3, #16
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800958c:	2301      	movs	r3, #1
 800958e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8009590:	7ffb      	ldrb	r3, [r7, #31]
}
 8009592:	4618      	mov	r0, r3
 8009594:	3724      	adds	r7, #36	@ 0x24
 8009596:	46bd      	mov	sp, r7
 8009598:	bd90      	pop	{r4, r7, pc}
 800959a:	bf00      	nop

0800959c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800959c:	b580      	push	{r7, lr}
 800959e:	b086      	sub	sp, #24
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	60f8      	str	r0, [r7, #12]
 80095a4:	60b9      	str	r1, [r7, #8]
 80095a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80095b0:	d004      	beq.n	80095bc <HAL_ADC_Start_DMA+0x20>
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	4a5a      	ldr	r2, [pc, #360]	@ (8009720 <HAL_ADC_Start_DMA+0x184>)
 80095b8:	4293      	cmp	r3, r2
 80095ba:	d101      	bne.n	80095c0 <HAL_ADC_Start_DMA+0x24>
 80095bc:	4b59      	ldr	r3, [pc, #356]	@ (8009724 <HAL_ADC_Start_DMA+0x188>)
 80095be:	e000      	b.n	80095c2 <HAL_ADC_Start_DMA+0x26>
 80095c0:	4b59      	ldr	r3, [pc, #356]	@ (8009728 <HAL_ADC_Start_DMA+0x18c>)
 80095c2:	4618      	mov	r0, r3
 80095c4:	f7ff fd4a 	bl	800905c <LL_ADC_GetMultimode>
 80095c8:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	4618      	mov	r0, r3
 80095d0:	f7ff fe02 	bl	80091d8 <LL_ADC_REG_IsConversionOngoing>
 80095d4:	4603      	mov	r3, r0
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	f040 809b 	bne.w	8009712 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80095e2:	2b01      	cmp	r3, #1
 80095e4:	d101      	bne.n	80095ea <HAL_ADC_Start_DMA+0x4e>
 80095e6:	2302      	movs	r3, #2
 80095e8:	e096      	b.n	8009718 <HAL_ADC_Start_DMA+0x17c>
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	2201      	movs	r2, #1
 80095ee:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	4a4d      	ldr	r2, [pc, #308]	@ (800972c <HAL_ADC_Start_DMA+0x190>)
 80095f8:	4293      	cmp	r3, r2
 80095fa:	d008      	beq.n	800960e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80095fc:	693b      	ldr	r3, [r7, #16]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d005      	beq.n	800960e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8009602:	693b      	ldr	r3, [r7, #16]
 8009604:	2b05      	cmp	r3, #5
 8009606:	d002      	beq.n	800960e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8009608:	693b      	ldr	r3, [r7, #16]
 800960a:	2b09      	cmp	r3, #9
 800960c:	d17a      	bne.n	8009704 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800960e:	68f8      	ldr	r0, [r7, #12]
 8009610:	f000 fcf6 	bl	800a000 <ADC_Enable>
 8009614:	4603      	mov	r3, r0
 8009616:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8009618:	7dfb      	ldrb	r3, [r7, #23]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d16d      	bne.n	80096fa <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009622:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8009626:	f023 0301 	bic.w	r3, r3, #1
 800962a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	4a3a      	ldr	r2, [pc, #232]	@ (8009720 <HAL_ADC_Start_DMA+0x184>)
 8009638:	4293      	cmp	r3, r2
 800963a:	d009      	beq.n	8009650 <HAL_ADC_Start_DMA+0xb4>
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	4a3b      	ldr	r2, [pc, #236]	@ (8009730 <HAL_ADC_Start_DMA+0x194>)
 8009642:	4293      	cmp	r3, r2
 8009644:	d002      	beq.n	800964c <HAL_ADC_Start_DMA+0xb0>
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	e003      	b.n	8009654 <HAL_ADC_Start_DMA+0xb8>
 800964c:	4b39      	ldr	r3, [pc, #228]	@ (8009734 <HAL_ADC_Start_DMA+0x198>)
 800964e:	e001      	b.n	8009654 <HAL_ADC_Start_DMA+0xb8>
 8009650:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8009654:	68fa      	ldr	r2, [r7, #12]
 8009656:	6812      	ldr	r2, [r2, #0]
 8009658:	4293      	cmp	r3, r2
 800965a:	d002      	beq.n	8009662 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800965c:	693b      	ldr	r3, [r7, #16]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d105      	bne.n	800966e <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009666:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009672:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009676:	2b00      	cmp	r3, #0
 8009678:	d006      	beq.n	8009688 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800967e:	f023 0206 	bic.w	r2, r3, #6
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	661a      	str	r2, [r3, #96]	@ 0x60
 8009686:	e002      	b.n	800968e <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	2200      	movs	r2, #0
 800968c:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009692:	4a29      	ldr	r2, [pc, #164]	@ (8009738 <HAL_ADC_Start_DMA+0x19c>)
 8009694:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800969a:	4a28      	ldr	r2, [pc, #160]	@ (800973c <HAL_ADC_Start_DMA+0x1a0>)
 800969c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096a2:	4a27      	ldr	r2, [pc, #156]	@ (8009740 <HAL_ADC_Start_DMA+0x1a4>)
 80096a4:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	221c      	movs	r2, #28
 80096ac:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	2200      	movs	r2, #0
 80096b2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	685a      	ldr	r2, [r3, #4]
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	f042 0210 	orr.w	r2, r2, #16
 80096c4:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	68da      	ldr	r2, [r3, #12]
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f042 0201 	orr.w	r2, r2, #1
 80096d4:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	3340      	adds	r3, #64	@ 0x40
 80096e0:	4619      	mov	r1, r3
 80096e2:	68ba      	ldr	r2, [r7, #8]
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	f001 f989 	bl	800a9fc <HAL_DMA_Start_IT>
 80096ea:	4603      	mov	r3, r0
 80096ec:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	4618      	mov	r0, r3
 80096f4:	f7ff fd5c 	bl	80091b0 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80096f8:	e00d      	b.n	8009716 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	2200      	movs	r2, #0
 80096fe:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8009702:	e008      	b.n	8009716 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8009704:	2301      	movs	r3, #1
 8009706:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	2200      	movs	r2, #0
 800970c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8009710:	e001      	b.n	8009716 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8009712:	2302      	movs	r3, #2
 8009714:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8009716:	7dfb      	ldrb	r3, [r7, #23]
}
 8009718:	4618      	mov	r0, r3
 800971a:	3718      	adds	r7, #24
 800971c:	46bd      	mov	sp, r7
 800971e:	bd80      	pop	{r7, pc}
 8009720:	50000100 	.word	0x50000100
 8009724:	50000300 	.word	0x50000300
 8009728:	50000700 	.word	0x50000700
 800972c:	50000600 	.word	0x50000600
 8009730:	50000500 	.word	0x50000500
 8009734:	50000400 	.word	0x50000400
 8009738:	0800a1eb 	.word	0x0800a1eb
 800973c:	0800a2c3 	.word	0x0800a2c3
 8009740:	0800a2df 	.word	0x0800a2df

08009744 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8009744:	b480      	push	{r7}
 8009746:	b083      	sub	sp, #12
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800974c:	bf00      	nop
 800974e:	370c      	adds	r7, #12
 8009750:	46bd      	mov	sp, r7
 8009752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009756:	4770      	bx	lr

08009758 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8009758:	b480      	push	{r7}
 800975a:	b083      	sub	sp, #12
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8009760:	bf00      	nop
 8009762:	370c      	adds	r7, #12
 8009764:	46bd      	mov	sp, r7
 8009766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976a:	4770      	bx	lr

0800976c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800976c:	b480      	push	{r7}
 800976e:	b083      	sub	sp, #12
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8009774:	bf00      	nop
 8009776:	370c      	adds	r7, #12
 8009778:	46bd      	mov	sp, r7
 800977a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977e:	4770      	bx	lr

08009780 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b0b6      	sub	sp, #216	@ 0xd8
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
 8009788:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800978a:	2300      	movs	r3, #0
 800978c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8009790:	2300      	movs	r3, #0
 8009792:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800979a:	2b01      	cmp	r3, #1
 800979c:	d102      	bne.n	80097a4 <HAL_ADC_ConfigChannel+0x24>
 800979e:	2302      	movs	r3, #2
 80097a0:	f000 bc13 	b.w	8009fca <HAL_ADC_ConfigChannel+0x84a>
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2201      	movs	r2, #1
 80097a8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	4618      	mov	r0, r3
 80097b2:	f7ff fd11 	bl	80091d8 <LL_ADC_REG_IsConversionOngoing>
 80097b6:	4603      	mov	r3, r0
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	f040 83f3 	bne.w	8009fa4 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	6818      	ldr	r0, [r3, #0]
 80097c2:	683b      	ldr	r3, [r7, #0]
 80097c4:	6859      	ldr	r1, [r3, #4]
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	461a      	mov	r2, r3
 80097cc:	f7ff fbcb 	bl	8008f66 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	4618      	mov	r0, r3
 80097d6:	f7ff fcff 	bl	80091d8 <LL_ADC_REG_IsConversionOngoing>
 80097da:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	4618      	mov	r0, r3
 80097e4:	f7ff fd0b 	bl	80091fe <LL_ADC_INJ_IsConversionOngoing>
 80097e8:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80097ec:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	f040 81d9 	bne.w	8009ba8 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80097f6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	f040 81d4 	bne.w	8009ba8 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	689b      	ldr	r3, [r3, #8]
 8009804:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009808:	d10f      	bne.n	800982a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	6818      	ldr	r0, [r3, #0]
 800980e:	683b      	ldr	r3, [r7, #0]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	2200      	movs	r2, #0
 8009814:	4619      	mov	r1, r3
 8009816:	f7ff fbd2 	bl	8008fbe <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8009822:	4618      	mov	r0, r3
 8009824:	f7ff fb79 	bl	8008f1a <LL_ADC_SetSamplingTimeCommonConfig>
 8009828:	e00e      	b.n	8009848 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	6818      	ldr	r0, [r3, #0]
 800982e:	683b      	ldr	r3, [r7, #0]
 8009830:	6819      	ldr	r1, [r3, #0]
 8009832:	683b      	ldr	r3, [r7, #0]
 8009834:	689b      	ldr	r3, [r3, #8]
 8009836:	461a      	mov	r2, r3
 8009838:	f7ff fbc1 	bl	8008fbe <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	2100      	movs	r1, #0
 8009842:	4618      	mov	r0, r3
 8009844:	f7ff fb69 	bl	8008f1a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8009848:	683b      	ldr	r3, [r7, #0]
 800984a:	695a      	ldr	r2, [r3, #20]
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	68db      	ldr	r3, [r3, #12]
 8009852:	08db      	lsrs	r3, r3, #3
 8009854:	f003 0303 	and.w	r3, r3, #3
 8009858:	005b      	lsls	r3, r3, #1
 800985a:	fa02 f303 	lsl.w	r3, r2, r3
 800985e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	691b      	ldr	r3, [r3, #16]
 8009866:	2b04      	cmp	r3, #4
 8009868:	d022      	beq.n	80098b0 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	6818      	ldr	r0, [r3, #0]
 800986e:	683b      	ldr	r3, [r7, #0]
 8009870:	6919      	ldr	r1, [r3, #16]
 8009872:	683b      	ldr	r3, [r7, #0]
 8009874:	681a      	ldr	r2, [r3, #0]
 8009876:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800987a:	f7ff fac3 	bl	8008e04 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	6818      	ldr	r0, [r3, #0]
 8009882:	683b      	ldr	r3, [r7, #0]
 8009884:	6919      	ldr	r1, [r3, #16]
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	699b      	ldr	r3, [r3, #24]
 800988a:	461a      	mov	r2, r3
 800988c:	f7ff fb0f 	bl	8008eae <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	6818      	ldr	r0, [r3, #0]
 8009894:	683b      	ldr	r3, [r7, #0]
 8009896:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800989c:	2b01      	cmp	r3, #1
 800989e:	d102      	bne.n	80098a6 <HAL_ADC_ConfigChannel+0x126>
 80098a0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80098a4:	e000      	b.n	80098a8 <HAL_ADC_ConfigChannel+0x128>
 80098a6:	2300      	movs	r3, #0
 80098a8:	461a      	mov	r2, r3
 80098aa:	f7ff fb1b 	bl	8008ee4 <LL_ADC_SetOffsetSaturation>
 80098ae:	e17b      	b.n	8009ba8 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	2100      	movs	r1, #0
 80098b6:	4618      	mov	r0, r3
 80098b8:	f7ff fac8 	bl	8008e4c <LL_ADC_GetOffsetChannel>
 80098bc:	4603      	mov	r3, r0
 80098be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d10a      	bne.n	80098dc <HAL_ADC_ConfigChannel+0x15c>
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	2100      	movs	r1, #0
 80098cc:	4618      	mov	r0, r3
 80098ce:	f7ff fabd 	bl	8008e4c <LL_ADC_GetOffsetChannel>
 80098d2:	4603      	mov	r3, r0
 80098d4:	0e9b      	lsrs	r3, r3, #26
 80098d6:	f003 021f 	and.w	r2, r3, #31
 80098da:	e01e      	b.n	800991a <HAL_ADC_ConfigChannel+0x19a>
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	2100      	movs	r1, #0
 80098e2:	4618      	mov	r0, r3
 80098e4:	f7ff fab2 	bl	8008e4c <LL_ADC_GetOffsetChannel>
 80098e8:	4603      	mov	r3, r0
 80098ea:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80098ee:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80098f2:	fa93 f3a3 	rbit	r3, r3
 80098f6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80098fa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80098fe:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8009902:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009906:	2b00      	cmp	r3, #0
 8009908:	d101      	bne.n	800990e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800990a:	2320      	movs	r3, #32
 800990c:	e004      	b.n	8009918 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800990e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009912:	fab3 f383 	clz	r3, r3
 8009916:	b2db      	uxtb	r3, r3
 8009918:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800991a:	683b      	ldr	r3, [r7, #0]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009922:	2b00      	cmp	r3, #0
 8009924:	d105      	bne.n	8009932 <HAL_ADC_ConfigChannel+0x1b2>
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	0e9b      	lsrs	r3, r3, #26
 800992c:	f003 031f 	and.w	r3, r3, #31
 8009930:	e018      	b.n	8009964 <HAL_ADC_ConfigChannel+0x1e4>
 8009932:	683b      	ldr	r3, [r7, #0]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800993a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800993e:	fa93 f3a3 	rbit	r3, r3
 8009942:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8009946:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800994a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800994e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009952:	2b00      	cmp	r3, #0
 8009954:	d101      	bne.n	800995a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8009956:	2320      	movs	r3, #32
 8009958:	e004      	b.n	8009964 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800995a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800995e:	fab3 f383 	clz	r3, r3
 8009962:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8009964:	429a      	cmp	r2, r3
 8009966:	d106      	bne.n	8009976 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	2200      	movs	r2, #0
 800996e:	2100      	movs	r1, #0
 8009970:	4618      	mov	r0, r3
 8009972:	f7ff fa81 	bl	8008e78 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	2101      	movs	r1, #1
 800997c:	4618      	mov	r0, r3
 800997e:	f7ff fa65 	bl	8008e4c <LL_ADC_GetOffsetChannel>
 8009982:	4603      	mov	r3, r0
 8009984:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009988:	2b00      	cmp	r3, #0
 800998a:	d10a      	bne.n	80099a2 <HAL_ADC_ConfigChannel+0x222>
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	2101      	movs	r1, #1
 8009992:	4618      	mov	r0, r3
 8009994:	f7ff fa5a 	bl	8008e4c <LL_ADC_GetOffsetChannel>
 8009998:	4603      	mov	r3, r0
 800999a:	0e9b      	lsrs	r3, r3, #26
 800999c:	f003 021f 	and.w	r2, r3, #31
 80099a0:	e01e      	b.n	80099e0 <HAL_ADC_ConfigChannel+0x260>
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	2101      	movs	r1, #1
 80099a8:	4618      	mov	r0, r3
 80099aa:	f7ff fa4f 	bl	8008e4c <LL_ADC_GetOffsetChannel>
 80099ae:	4603      	mov	r3, r0
 80099b0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80099b4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80099b8:	fa93 f3a3 	rbit	r3, r3
 80099bc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80099c0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80099c4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80099c8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d101      	bne.n	80099d4 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80099d0:	2320      	movs	r3, #32
 80099d2:	e004      	b.n	80099de <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80099d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80099d8:	fab3 f383 	clz	r3, r3
 80099dc:	b2db      	uxtb	r3, r3
 80099de:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80099e0:	683b      	ldr	r3, [r7, #0]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d105      	bne.n	80099f8 <HAL_ADC_ConfigChannel+0x278>
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	0e9b      	lsrs	r3, r3, #26
 80099f2:	f003 031f 	and.w	r3, r3, #31
 80099f6:	e018      	b.n	8009a2a <HAL_ADC_ConfigChannel+0x2aa>
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009a00:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009a04:	fa93 f3a3 	rbit	r3, r3
 8009a08:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8009a0c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009a10:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8009a14:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d101      	bne.n	8009a20 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8009a1c:	2320      	movs	r3, #32
 8009a1e:	e004      	b.n	8009a2a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8009a20:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009a24:	fab3 f383 	clz	r3, r3
 8009a28:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8009a2a:	429a      	cmp	r2, r3
 8009a2c:	d106      	bne.n	8009a3c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	2200      	movs	r2, #0
 8009a34:	2101      	movs	r1, #1
 8009a36:	4618      	mov	r0, r3
 8009a38:	f7ff fa1e 	bl	8008e78 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	2102      	movs	r1, #2
 8009a42:	4618      	mov	r0, r3
 8009a44:	f7ff fa02 	bl	8008e4c <LL_ADC_GetOffsetChannel>
 8009a48:	4603      	mov	r3, r0
 8009a4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d10a      	bne.n	8009a68 <HAL_ADC_ConfigChannel+0x2e8>
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	2102      	movs	r1, #2
 8009a58:	4618      	mov	r0, r3
 8009a5a:	f7ff f9f7 	bl	8008e4c <LL_ADC_GetOffsetChannel>
 8009a5e:	4603      	mov	r3, r0
 8009a60:	0e9b      	lsrs	r3, r3, #26
 8009a62:	f003 021f 	and.w	r2, r3, #31
 8009a66:	e01e      	b.n	8009aa6 <HAL_ADC_ConfigChannel+0x326>
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	2102      	movs	r1, #2
 8009a6e:	4618      	mov	r0, r3
 8009a70:	f7ff f9ec 	bl	8008e4c <LL_ADC_GetOffsetChannel>
 8009a74:	4603      	mov	r3, r0
 8009a76:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009a7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009a7e:	fa93 f3a3 	rbit	r3, r3
 8009a82:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8009a86:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009a8a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8009a8e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d101      	bne.n	8009a9a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8009a96:	2320      	movs	r3, #32
 8009a98:	e004      	b.n	8009aa4 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8009a9a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009a9e:	fab3 f383 	clz	r3, r3
 8009aa2:	b2db      	uxtb	r3, r3
 8009aa4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d105      	bne.n	8009abe <HAL_ADC_ConfigChannel+0x33e>
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	0e9b      	lsrs	r3, r3, #26
 8009ab8:	f003 031f 	and.w	r3, r3, #31
 8009abc:	e016      	b.n	8009aec <HAL_ADC_ConfigChannel+0x36c>
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009ac6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009aca:	fa93 f3a3 	rbit	r3, r3
 8009ace:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8009ad0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009ad2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8009ad6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d101      	bne.n	8009ae2 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8009ade:	2320      	movs	r3, #32
 8009ae0:	e004      	b.n	8009aec <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8009ae2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009ae6:	fab3 f383 	clz	r3, r3
 8009aea:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8009aec:	429a      	cmp	r2, r3
 8009aee:	d106      	bne.n	8009afe <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	2200      	movs	r2, #0
 8009af6:	2102      	movs	r1, #2
 8009af8:	4618      	mov	r0, r3
 8009afa:	f7ff f9bd 	bl	8008e78 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	2103      	movs	r1, #3
 8009b04:	4618      	mov	r0, r3
 8009b06:	f7ff f9a1 	bl	8008e4c <LL_ADC_GetOffsetChannel>
 8009b0a:	4603      	mov	r3, r0
 8009b0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d10a      	bne.n	8009b2a <HAL_ADC_ConfigChannel+0x3aa>
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	2103      	movs	r1, #3
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	f7ff f996 	bl	8008e4c <LL_ADC_GetOffsetChannel>
 8009b20:	4603      	mov	r3, r0
 8009b22:	0e9b      	lsrs	r3, r3, #26
 8009b24:	f003 021f 	and.w	r2, r3, #31
 8009b28:	e017      	b.n	8009b5a <HAL_ADC_ConfigChannel+0x3da>
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	2103      	movs	r1, #3
 8009b30:	4618      	mov	r0, r3
 8009b32:	f7ff f98b 	bl	8008e4c <LL_ADC_GetOffsetChannel>
 8009b36:	4603      	mov	r3, r0
 8009b38:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009b3a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009b3c:	fa93 f3a3 	rbit	r3, r3
 8009b40:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8009b42:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009b44:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8009b46:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d101      	bne.n	8009b50 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8009b4c:	2320      	movs	r3, #32
 8009b4e:	e003      	b.n	8009b58 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8009b50:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009b52:	fab3 f383 	clz	r3, r3
 8009b56:	b2db      	uxtb	r3, r3
 8009b58:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8009b5a:	683b      	ldr	r3, [r7, #0]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d105      	bne.n	8009b72 <HAL_ADC_ConfigChannel+0x3f2>
 8009b66:	683b      	ldr	r3, [r7, #0]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	0e9b      	lsrs	r3, r3, #26
 8009b6c:	f003 031f 	and.w	r3, r3, #31
 8009b70:	e011      	b.n	8009b96 <HAL_ADC_ConfigChannel+0x416>
 8009b72:	683b      	ldr	r3, [r7, #0]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009b78:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009b7a:	fa93 f3a3 	rbit	r3, r3
 8009b7e:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8009b80:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009b82:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8009b84:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d101      	bne.n	8009b8e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8009b8a:	2320      	movs	r3, #32
 8009b8c:	e003      	b.n	8009b96 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8009b8e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009b90:	fab3 f383 	clz	r3, r3
 8009b94:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8009b96:	429a      	cmp	r2, r3
 8009b98:	d106      	bne.n	8009ba8 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	2103      	movs	r1, #3
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	f7ff f968 	bl	8008e78 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	4618      	mov	r0, r3
 8009bae:	f7ff fad9 	bl	8009164 <LL_ADC_IsEnabled>
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	f040 813d 	bne.w	8009e34 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	6818      	ldr	r0, [r3, #0]
 8009bbe:	683b      	ldr	r3, [r7, #0]
 8009bc0:	6819      	ldr	r1, [r3, #0]
 8009bc2:	683b      	ldr	r3, [r7, #0]
 8009bc4:	68db      	ldr	r3, [r3, #12]
 8009bc6:	461a      	mov	r2, r3
 8009bc8:	f7ff fa24 	bl	8009014 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8009bcc:	683b      	ldr	r3, [r7, #0]
 8009bce:	68db      	ldr	r3, [r3, #12]
 8009bd0:	4aa2      	ldr	r2, [pc, #648]	@ (8009e5c <HAL_ADC_ConfigChannel+0x6dc>)
 8009bd2:	4293      	cmp	r3, r2
 8009bd4:	f040 812e 	bne.w	8009e34 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8009bdc:	683b      	ldr	r3, [r7, #0]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d10b      	bne.n	8009c00 <HAL_ADC_ConfigChannel+0x480>
 8009be8:	683b      	ldr	r3, [r7, #0]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	0e9b      	lsrs	r3, r3, #26
 8009bee:	3301      	adds	r3, #1
 8009bf0:	f003 031f 	and.w	r3, r3, #31
 8009bf4:	2b09      	cmp	r3, #9
 8009bf6:	bf94      	ite	ls
 8009bf8:	2301      	movls	r3, #1
 8009bfa:	2300      	movhi	r3, #0
 8009bfc:	b2db      	uxtb	r3, r3
 8009bfe:	e019      	b.n	8009c34 <HAL_ADC_ConfigChannel+0x4b4>
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009c06:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009c08:	fa93 f3a3 	rbit	r3, r3
 8009c0c:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8009c0e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009c10:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8009c12:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d101      	bne.n	8009c1c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8009c18:	2320      	movs	r3, #32
 8009c1a:	e003      	b.n	8009c24 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8009c1c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009c1e:	fab3 f383 	clz	r3, r3
 8009c22:	b2db      	uxtb	r3, r3
 8009c24:	3301      	adds	r3, #1
 8009c26:	f003 031f 	and.w	r3, r3, #31
 8009c2a:	2b09      	cmp	r3, #9
 8009c2c:	bf94      	ite	ls
 8009c2e:	2301      	movls	r3, #1
 8009c30:	2300      	movhi	r3, #0
 8009c32:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d079      	beq.n	8009d2c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8009c38:	683b      	ldr	r3, [r7, #0]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d107      	bne.n	8009c54 <HAL_ADC_ConfigChannel+0x4d4>
 8009c44:	683b      	ldr	r3, [r7, #0]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	0e9b      	lsrs	r3, r3, #26
 8009c4a:	3301      	adds	r3, #1
 8009c4c:	069b      	lsls	r3, r3, #26
 8009c4e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8009c52:	e015      	b.n	8009c80 <HAL_ADC_ConfigChannel+0x500>
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009c5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009c5c:	fa93 f3a3 	rbit	r3, r3
 8009c60:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8009c62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c64:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8009c66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d101      	bne.n	8009c70 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8009c6c:	2320      	movs	r3, #32
 8009c6e:	e003      	b.n	8009c78 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8009c70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009c72:	fab3 f383 	clz	r3, r3
 8009c76:	b2db      	uxtb	r3, r3
 8009c78:	3301      	adds	r3, #1
 8009c7a:	069b      	lsls	r3, r3, #26
 8009c7c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d109      	bne.n	8009ca0 <HAL_ADC_ConfigChannel+0x520>
 8009c8c:	683b      	ldr	r3, [r7, #0]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	0e9b      	lsrs	r3, r3, #26
 8009c92:	3301      	adds	r3, #1
 8009c94:	f003 031f 	and.w	r3, r3, #31
 8009c98:	2101      	movs	r1, #1
 8009c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8009c9e:	e017      	b.n	8009cd0 <HAL_ADC_ConfigChannel+0x550>
 8009ca0:	683b      	ldr	r3, [r7, #0]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009ca6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009ca8:	fa93 f3a3 	rbit	r3, r3
 8009cac:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8009cae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009cb0:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8009cb2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d101      	bne.n	8009cbc <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8009cb8:	2320      	movs	r3, #32
 8009cba:	e003      	b.n	8009cc4 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8009cbc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009cbe:	fab3 f383 	clz	r3, r3
 8009cc2:	b2db      	uxtb	r3, r3
 8009cc4:	3301      	adds	r3, #1
 8009cc6:	f003 031f 	and.w	r3, r3, #31
 8009cca:	2101      	movs	r1, #1
 8009ccc:	fa01 f303 	lsl.w	r3, r1, r3
 8009cd0:	ea42 0103 	orr.w	r1, r2, r3
 8009cd4:	683b      	ldr	r3, [r7, #0]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d10a      	bne.n	8009cf6 <HAL_ADC_ConfigChannel+0x576>
 8009ce0:	683b      	ldr	r3, [r7, #0]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	0e9b      	lsrs	r3, r3, #26
 8009ce6:	3301      	adds	r3, #1
 8009ce8:	f003 021f 	and.w	r2, r3, #31
 8009cec:	4613      	mov	r3, r2
 8009cee:	005b      	lsls	r3, r3, #1
 8009cf0:	4413      	add	r3, r2
 8009cf2:	051b      	lsls	r3, r3, #20
 8009cf4:	e018      	b.n	8009d28 <HAL_ADC_ConfigChannel+0x5a8>
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009cfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cfe:	fa93 f3a3 	rbit	r3, r3
 8009d02:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8009d04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d06:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8009d08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d101      	bne.n	8009d12 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8009d0e:	2320      	movs	r3, #32
 8009d10:	e003      	b.n	8009d1a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8009d12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d14:	fab3 f383 	clz	r3, r3
 8009d18:	b2db      	uxtb	r3, r3
 8009d1a:	3301      	adds	r3, #1
 8009d1c:	f003 021f 	and.w	r2, r3, #31
 8009d20:	4613      	mov	r3, r2
 8009d22:	005b      	lsls	r3, r3, #1
 8009d24:	4413      	add	r3, r2
 8009d26:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009d28:	430b      	orrs	r3, r1
 8009d2a:	e07e      	b.n	8009e2a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d107      	bne.n	8009d48 <HAL_ADC_ConfigChannel+0x5c8>
 8009d38:	683b      	ldr	r3, [r7, #0]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	0e9b      	lsrs	r3, r3, #26
 8009d3e:	3301      	adds	r3, #1
 8009d40:	069b      	lsls	r3, r3, #26
 8009d42:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8009d46:	e015      	b.n	8009d74 <HAL_ADC_ConfigChannel+0x5f4>
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009d4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d50:	fa93 f3a3 	rbit	r3, r3
 8009d54:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8009d56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d58:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8009d5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d101      	bne.n	8009d64 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8009d60:	2320      	movs	r3, #32
 8009d62:	e003      	b.n	8009d6c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8009d64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d66:	fab3 f383 	clz	r3, r3
 8009d6a:	b2db      	uxtb	r3, r3
 8009d6c:	3301      	adds	r3, #1
 8009d6e:	069b      	lsls	r3, r3, #26
 8009d70:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d109      	bne.n	8009d94 <HAL_ADC_ConfigChannel+0x614>
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	0e9b      	lsrs	r3, r3, #26
 8009d86:	3301      	adds	r3, #1
 8009d88:	f003 031f 	and.w	r3, r3, #31
 8009d8c:	2101      	movs	r1, #1
 8009d8e:	fa01 f303 	lsl.w	r3, r1, r3
 8009d92:	e017      	b.n	8009dc4 <HAL_ADC_ConfigChannel+0x644>
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009d9a:	6a3b      	ldr	r3, [r7, #32]
 8009d9c:	fa93 f3a3 	rbit	r3, r3
 8009da0:	61fb      	str	r3, [r7, #28]
  return result;
 8009da2:	69fb      	ldr	r3, [r7, #28]
 8009da4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8009da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d101      	bne.n	8009db0 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8009dac:	2320      	movs	r3, #32
 8009dae:	e003      	b.n	8009db8 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8009db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009db2:	fab3 f383 	clz	r3, r3
 8009db6:	b2db      	uxtb	r3, r3
 8009db8:	3301      	adds	r3, #1
 8009dba:	f003 031f 	and.w	r3, r3, #31
 8009dbe:	2101      	movs	r1, #1
 8009dc0:	fa01 f303 	lsl.w	r3, r1, r3
 8009dc4:	ea42 0103 	orr.w	r1, r2, r3
 8009dc8:	683b      	ldr	r3, [r7, #0]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d10d      	bne.n	8009df0 <HAL_ADC_ConfigChannel+0x670>
 8009dd4:	683b      	ldr	r3, [r7, #0]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	0e9b      	lsrs	r3, r3, #26
 8009dda:	3301      	adds	r3, #1
 8009ddc:	f003 021f 	and.w	r2, r3, #31
 8009de0:	4613      	mov	r3, r2
 8009de2:	005b      	lsls	r3, r3, #1
 8009de4:	4413      	add	r3, r2
 8009de6:	3b1e      	subs	r3, #30
 8009de8:	051b      	lsls	r3, r3, #20
 8009dea:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8009dee:	e01b      	b.n	8009e28 <HAL_ADC_ConfigChannel+0x6a8>
 8009df0:	683b      	ldr	r3, [r7, #0]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009df6:	697b      	ldr	r3, [r7, #20]
 8009df8:	fa93 f3a3 	rbit	r3, r3
 8009dfc:	613b      	str	r3, [r7, #16]
  return result;
 8009dfe:	693b      	ldr	r3, [r7, #16]
 8009e00:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009e02:	69bb      	ldr	r3, [r7, #24]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d101      	bne.n	8009e0c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8009e08:	2320      	movs	r3, #32
 8009e0a:	e003      	b.n	8009e14 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8009e0c:	69bb      	ldr	r3, [r7, #24]
 8009e0e:	fab3 f383 	clz	r3, r3
 8009e12:	b2db      	uxtb	r3, r3
 8009e14:	3301      	adds	r3, #1
 8009e16:	f003 021f 	and.w	r2, r3, #31
 8009e1a:	4613      	mov	r3, r2
 8009e1c:	005b      	lsls	r3, r3, #1
 8009e1e:	4413      	add	r3, r2
 8009e20:	3b1e      	subs	r3, #30
 8009e22:	051b      	lsls	r3, r3, #20
 8009e24:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009e28:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8009e2a:	683a      	ldr	r2, [r7, #0]
 8009e2c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009e2e:	4619      	mov	r1, r3
 8009e30:	f7ff f8c5 	bl	8008fbe <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8009e34:	683b      	ldr	r3, [r7, #0]
 8009e36:	681a      	ldr	r2, [r3, #0]
 8009e38:	4b09      	ldr	r3, [pc, #36]	@ (8009e60 <HAL_ADC_ConfigChannel+0x6e0>)
 8009e3a:	4013      	ands	r3, r2
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	f000 80be 	beq.w	8009fbe <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009e4a:	d004      	beq.n	8009e56 <HAL_ADC_ConfigChannel+0x6d6>
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	4a04      	ldr	r2, [pc, #16]	@ (8009e64 <HAL_ADC_ConfigChannel+0x6e4>)
 8009e52:	4293      	cmp	r3, r2
 8009e54:	d10a      	bne.n	8009e6c <HAL_ADC_ConfigChannel+0x6ec>
 8009e56:	4b04      	ldr	r3, [pc, #16]	@ (8009e68 <HAL_ADC_ConfigChannel+0x6e8>)
 8009e58:	e009      	b.n	8009e6e <HAL_ADC_ConfigChannel+0x6ee>
 8009e5a:	bf00      	nop
 8009e5c:	407f0000 	.word	0x407f0000
 8009e60:	80080000 	.word	0x80080000
 8009e64:	50000100 	.word	0x50000100
 8009e68:	50000300 	.word	0x50000300
 8009e6c:	4b59      	ldr	r3, [pc, #356]	@ (8009fd4 <HAL_ADC_ConfigChannel+0x854>)
 8009e6e:	4618      	mov	r0, r3
 8009e70:	f7fe ffba 	bl	8008de8 <LL_ADC_GetCommonPathInternalCh>
 8009e74:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8009e78:	683b      	ldr	r3, [r7, #0]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	4a56      	ldr	r2, [pc, #344]	@ (8009fd8 <HAL_ADC_ConfigChannel+0x858>)
 8009e7e:	4293      	cmp	r3, r2
 8009e80:	d004      	beq.n	8009e8c <HAL_ADC_ConfigChannel+0x70c>
 8009e82:	683b      	ldr	r3, [r7, #0]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	4a55      	ldr	r2, [pc, #340]	@ (8009fdc <HAL_ADC_ConfigChannel+0x85c>)
 8009e88:	4293      	cmp	r3, r2
 8009e8a:	d13a      	bne.n	8009f02 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8009e8c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8009e90:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d134      	bne.n	8009f02 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009ea0:	d005      	beq.n	8009eae <HAL_ADC_ConfigChannel+0x72e>
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	4a4e      	ldr	r2, [pc, #312]	@ (8009fe0 <HAL_ADC_ConfigChannel+0x860>)
 8009ea8:	4293      	cmp	r3, r2
 8009eaa:	f040 8085 	bne.w	8009fb8 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009eb6:	d004      	beq.n	8009ec2 <HAL_ADC_ConfigChannel+0x742>
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	4a49      	ldr	r2, [pc, #292]	@ (8009fe4 <HAL_ADC_ConfigChannel+0x864>)
 8009ebe:	4293      	cmp	r3, r2
 8009ec0:	d101      	bne.n	8009ec6 <HAL_ADC_ConfigChannel+0x746>
 8009ec2:	4a49      	ldr	r2, [pc, #292]	@ (8009fe8 <HAL_ADC_ConfigChannel+0x868>)
 8009ec4:	e000      	b.n	8009ec8 <HAL_ADC_ConfigChannel+0x748>
 8009ec6:	4a43      	ldr	r2, [pc, #268]	@ (8009fd4 <HAL_ADC_ConfigChannel+0x854>)
 8009ec8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8009ecc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009ed0:	4619      	mov	r1, r3
 8009ed2:	4610      	mov	r0, r2
 8009ed4:	f7fe ff75 	bl	8008dc2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8009ed8:	4b44      	ldr	r3, [pc, #272]	@ (8009fec <HAL_ADC_ConfigChannel+0x86c>)
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	099b      	lsrs	r3, r3, #6
 8009ede:	4a44      	ldr	r2, [pc, #272]	@ (8009ff0 <HAL_ADC_ConfigChannel+0x870>)
 8009ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8009ee4:	099b      	lsrs	r3, r3, #6
 8009ee6:	1c5a      	adds	r2, r3, #1
 8009ee8:	4613      	mov	r3, r2
 8009eea:	005b      	lsls	r3, r3, #1
 8009eec:	4413      	add	r3, r2
 8009eee:	009b      	lsls	r3, r3, #2
 8009ef0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8009ef2:	e002      	b.n	8009efa <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	3b01      	subs	r3, #1
 8009ef8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d1f9      	bne.n	8009ef4 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8009f00:	e05a      	b.n	8009fb8 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	4a3b      	ldr	r2, [pc, #236]	@ (8009ff4 <HAL_ADC_ConfigChannel+0x874>)
 8009f08:	4293      	cmp	r3, r2
 8009f0a:	d125      	bne.n	8009f58 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8009f0c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8009f10:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d11f      	bne.n	8009f58 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	4a31      	ldr	r2, [pc, #196]	@ (8009fe4 <HAL_ADC_ConfigChannel+0x864>)
 8009f1e:	4293      	cmp	r3, r2
 8009f20:	d104      	bne.n	8009f2c <HAL_ADC_ConfigChannel+0x7ac>
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	4a34      	ldr	r2, [pc, #208]	@ (8009ff8 <HAL_ADC_ConfigChannel+0x878>)
 8009f28:	4293      	cmp	r3, r2
 8009f2a:	d047      	beq.n	8009fbc <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009f34:	d004      	beq.n	8009f40 <HAL_ADC_ConfigChannel+0x7c0>
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	4a2a      	ldr	r2, [pc, #168]	@ (8009fe4 <HAL_ADC_ConfigChannel+0x864>)
 8009f3c:	4293      	cmp	r3, r2
 8009f3e:	d101      	bne.n	8009f44 <HAL_ADC_ConfigChannel+0x7c4>
 8009f40:	4a29      	ldr	r2, [pc, #164]	@ (8009fe8 <HAL_ADC_ConfigChannel+0x868>)
 8009f42:	e000      	b.n	8009f46 <HAL_ADC_ConfigChannel+0x7c6>
 8009f44:	4a23      	ldr	r2, [pc, #140]	@ (8009fd4 <HAL_ADC_ConfigChannel+0x854>)
 8009f46:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8009f4a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009f4e:	4619      	mov	r1, r3
 8009f50:	4610      	mov	r0, r2
 8009f52:	f7fe ff36 	bl	8008dc2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8009f56:	e031      	b.n	8009fbc <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8009f58:	683b      	ldr	r3, [r7, #0]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	4a27      	ldr	r2, [pc, #156]	@ (8009ffc <HAL_ADC_ConfigChannel+0x87c>)
 8009f5e:	4293      	cmp	r3, r2
 8009f60:	d12d      	bne.n	8009fbe <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8009f62:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8009f66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d127      	bne.n	8009fbe <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	4a1c      	ldr	r2, [pc, #112]	@ (8009fe4 <HAL_ADC_ConfigChannel+0x864>)
 8009f74:	4293      	cmp	r3, r2
 8009f76:	d022      	beq.n	8009fbe <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009f80:	d004      	beq.n	8009f8c <HAL_ADC_ConfigChannel+0x80c>
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	4a17      	ldr	r2, [pc, #92]	@ (8009fe4 <HAL_ADC_ConfigChannel+0x864>)
 8009f88:	4293      	cmp	r3, r2
 8009f8a:	d101      	bne.n	8009f90 <HAL_ADC_ConfigChannel+0x810>
 8009f8c:	4a16      	ldr	r2, [pc, #88]	@ (8009fe8 <HAL_ADC_ConfigChannel+0x868>)
 8009f8e:	e000      	b.n	8009f92 <HAL_ADC_ConfigChannel+0x812>
 8009f90:	4a10      	ldr	r2, [pc, #64]	@ (8009fd4 <HAL_ADC_ConfigChannel+0x854>)
 8009f92:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8009f96:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8009f9a:	4619      	mov	r1, r3
 8009f9c:	4610      	mov	r0, r2
 8009f9e:	f7fe ff10 	bl	8008dc2 <LL_ADC_SetCommonPathInternalCh>
 8009fa2:	e00c      	b.n	8009fbe <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009fa8:	f043 0220 	orr.w	r2, r3, #32
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8009fb0:	2301      	movs	r3, #1
 8009fb2:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8009fb6:	e002      	b.n	8009fbe <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8009fb8:	bf00      	nop
 8009fba:	e000      	b.n	8009fbe <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8009fbc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8009fc6:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8009fca:	4618      	mov	r0, r3
 8009fcc:	37d8      	adds	r7, #216	@ 0xd8
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	bd80      	pop	{r7, pc}
 8009fd2:	bf00      	nop
 8009fd4:	50000700 	.word	0x50000700
 8009fd8:	c3210000 	.word	0xc3210000
 8009fdc:	90c00010 	.word	0x90c00010
 8009fe0:	50000600 	.word	0x50000600
 8009fe4:	50000100 	.word	0x50000100
 8009fe8:	50000300 	.word	0x50000300
 8009fec:	20000130 	.word	0x20000130
 8009ff0:	053e2d63 	.word	0x053e2d63
 8009ff4:	c7520000 	.word	0xc7520000
 8009ff8:	50000500 	.word	0x50000500
 8009ffc:	cb840000 	.word	0xcb840000

0800a000 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800a000:	b580      	push	{r7, lr}
 800a002:	b084      	sub	sp, #16
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800a008:	2300      	movs	r3, #0
 800a00a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	4618      	mov	r0, r3
 800a012:	f7ff f8a7 	bl	8009164 <LL_ADC_IsEnabled>
 800a016:	4603      	mov	r3, r0
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d176      	bne.n	800a10a <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	689a      	ldr	r2, [r3, #8]
 800a022:	4b3c      	ldr	r3, [pc, #240]	@ (800a114 <ADC_Enable+0x114>)
 800a024:	4013      	ands	r3, r2
 800a026:	2b00      	cmp	r3, #0
 800a028:	d00d      	beq.n	800a046 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a02e:	f043 0210 	orr.w	r2, r3, #16
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a03a:	f043 0201 	orr.w	r2, r3, #1
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800a042:	2301      	movs	r3, #1
 800a044:	e062      	b.n	800a10c <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	4618      	mov	r0, r3
 800a04c:	f7ff f862 	bl	8009114 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a058:	d004      	beq.n	800a064 <ADC_Enable+0x64>
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	4a2e      	ldr	r2, [pc, #184]	@ (800a118 <ADC_Enable+0x118>)
 800a060:	4293      	cmp	r3, r2
 800a062:	d101      	bne.n	800a068 <ADC_Enable+0x68>
 800a064:	4b2d      	ldr	r3, [pc, #180]	@ (800a11c <ADC_Enable+0x11c>)
 800a066:	e000      	b.n	800a06a <ADC_Enable+0x6a>
 800a068:	4b2d      	ldr	r3, [pc, #180]	@ (800a120 <ADC_Enable+0x120>)
 800a06a:	4618      	mov	r0, r3
 800a06c:	f7fe febc 	bl	8008de8 <LL_ADC_GetCommonPathInternalCh>
 800a070:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800a072:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800a076:	2b00      	cmp	r3, #0
 800a078:	d013      	beq.n	800a0a2 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800a07a:	4b2a      	ldr	r3, [pc, #168]	@ (800a124 <ADC_Enable+0x124>)
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	099b      	lsrs	r3, r3, #6
 800a080:	4a29      	ldr	r2, [pc, #164]	@ (800a128 <ADC_Enable+0x128>)
 800a082:	fba2 2303 	umull	r2, r3, r2, r3
 800a086:	099b      	lsrs	r3, r3, #6
 800a088:	1c5a      	adds	r2, r3, #1
 800a08a:	4613      	mov	r3, r2
 800a08c:	005b      	lsls	r3, r3, #1
 800a08e:	4413      	add	r3, r2
 800a090:	009b      	lsls	r3, r3, #2
 800a092:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800a094:	e002      	b.n	800a09c <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 800a096:	68bb      	ldr	r3, [r7, #8]
 800a098:	3b01      	subs	r3, #1
 800a09a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800a09c:	68bb      	ldr	r3, [r7, #8]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d1f9      	bne.n	800a096 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800a0a2:	f7fe fe6f 	bl	8008d84 <HAL_GetTick>
 800a0a6:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800a0a8:	e028      	b.n	800a0fc <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	f7ff f858 	bl	8009164 <LL_ADC_IsEnabled>
 800a0b4:	4603      	mov	r3, r0
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d104      	bne.n	800a0c4 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	4618      	mov	r0, r3
 800a0c0:	f7ff f828 	bl	8009114 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800a0c4:	f7fe fe5e 	bl	8008d84 <HAL_GetTick>
 800a0c8:	4602      	mov	r2, r0
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	1ad3      	subs	r3, r2, r3
 800a0ce:	2b02      	cmp	r3, #2
 800a0d0:	d914      	bls.n	800a0fc <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	f003 0301 	and.w	r3, r3, #1
 800a0dc:	2b01      	cmp	r3, #1
 800a0de:	d00d      	beq.n	800a0fc <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a0e4:	f043 0210 	orr.w	r2, r3, #16
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a0f0:	f043 0201 	orr.w	r2, r3, #1
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800a0f8:	2301      	movs	r3, #1
 800a0fa:	e007      	b.n	800a10c <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	f003 0301 	and.w	r3, r3, #1
 800a106:	2b01      	cmp	r3, #1
 800a108:	d1cf      	bne.n	800a0aa <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800a10a:	2300      	movs	r3, #0
}
 800a10c:	4618      	mov	r0, r3
 800a10e:	3710      	adds	r7, #16
 800a110:	46bd      	mov	sp, r7
 800a112:	bd80      	pop	{r7, pc}
 800a114:	8000003f 	.word	0x8000003f
 800a118:	50000100 	.word	0x50000100
 800a11c:	50000300 	.word	0x50000300
 800a120:	50000700 	.word	0x50000700
 800a124:	20000130 	.word	0x20000130
 800a128:	053e2d63 	.word	0x053e2d63

0800a12c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800a12c:	b580      	push	{r7, lr}
 800a12e:	b084      	sub	sp, #16
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	4618      	mov	r0, r3
 800a13a:	f7ff f826 	bl	800918a <LL_ADC_IsDisableOngoing>
 800a13e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	4618      	mov	r0, r3
 800a146:	f7ff f80d 	bl	8009164 <LL_ADC_IsEnabled>
 800a14a:	4603      	mov	r3, r0
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d047      	beq.n	800a1e0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	2b00      	cmp	r3, #0
 800a154:	d144      	bne.n	800a1e0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	689b      	ldr	r3, [r3, #8]
 800a15c:	f003 030d 	and.w	r3, r3, #13
 800a160:	2b01      	cmp	r3, #1
 800a162:	d10c      	bne.n	800a17e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	4618      	mov	r0, r3
 800a16a:	f7fe ffe7 	bl	800913c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	2203      	movs	r2, #3
 800a174:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800a176:	f7fe fe05 	bl	8008d84 <HAL_GetTick>
 800a17a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800a17c:	e029      	b.n	800a1d2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a182:	f043 0210 	orr.w	r2, r3, #16
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a18e:	f043 0201 	orr.w	r2, r3, #1
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 800a196:	2301      	movs	r3, #1
 800a198:	e023      	b.n	800a1e2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800a19a:	f7fe fdf3 	bl	8008d84 <HAL_GetTick>
 800a19e:	4602      	mov	r2, r0
 800a1a0:	68bb      	ldr	r3, [r7, #8]
 800a1a2:	1ad3      	subs	r3, r2, r3
 800a1a4:	2b02      	cmp	r3, #2
 800a1a6:	d914      	bls.n	800a1d2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	689b      	ldr	r3, [r3, #8]
 800a1ae:	f003 0301 	and.w	r3, r3, #1
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d00d      	beq.n	800a1d2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a1ba:	f043 0210 	orr.w	r2, r3, #16
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a1c6:	f043 0201 	orr.w	r2, r3, #1
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800a1ce:	2301      	movs	r3, #1
 800a1d0:	e007      	b.n	800a1e2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	689b      	ldr	r3, [r3, #8]
 800a1d8:	f003 0301 	and.w	r3, r3, #1
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d1dc      	bne.n	800a19a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800a1e0:	2300      	movs	r3, #0
}
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	3710      	adds	r7, #16
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	bd80      	pop	{r7, pc}

0800a1ea <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800a1ea:	b580      	push	{r7, lr}
 800a1ec:	b084      	sub	sp, #16
 800a1ee:	af00      	add	r7, sp, #0
 800a1f0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1f6:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a1fc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a200:	2b00      	cmp	r3, #0
 800a202:	d14b      	bne.n	800a29c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a208:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	f003 0308 	and.w	r3, r3, #8
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d021      	beq.n	800a262 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	4618      	mov	r0, r3
 800a224:	f7fe fe8c 	bl	8008f40 <LL_ADC_REG_IsTriggerSourceSWStart>
 800a228:	4603      	mov	r3, r0
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d032      	beq.n	800a294 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	68db      	ldr	r3, [r3, #12]
 800a234:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d12b      	bne.n	800a294 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a240:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a24c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a250:	2b00      	cmp	r3, #0
 800a252:	d11f      	bne.n	800a294 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a258:	f043 0201 	orr.w	r2, r3, #1
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a260:	e018      	b.n	800a294 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	68db      	ldr	r3, [r3, #12]
 800a268:	f003 0302 	and.w	r3, r3, #2
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d111      	bne.n	800a294 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a274:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a280:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a284:	2b00      	cmp	r3, #0
 800a286:	d105      	bne.n	800a294 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a28c:	f043 0201 	orr.w	r2, r3, #1
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800a294:	68f8      	ldr	r0, [r7, #12]
 800a296:	f7ff fa55 	bl	8009744 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800a29a:	e00e      	b.n	800a2ba <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a2a0:	f003 0310 	and.w	r3, r3, #16
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d003      	beq.n	800a2b0 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800a2a8:	68f8      	ldr	r0, [r7, #12]
 800a2aa:	f7ff fa5f 	bl	800976c <HAL_ADC_ErrorCallback>
}
 800a2ae:	e004      	b.n	800a2ba <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a2b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a2b6:	6878      	ldr	r0, [r7, #4]
 800a2b8:	4798      	blx	r3
}
 800a2ba:	bf00      	nop
 800a2bc:	3710      	adds	r7, #16
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	bd80      	pop	{r7, pc}

0800a2c2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800a2c2:	b580      	push	{r7, lr}
 800a2c4:	b084      	sub	sp, #16
 800a2c6:	af00      	add	r7, sp, #0
 800a2c8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2ce:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800a2d0:	68f8      	ldr	r0, [r7, #12]
 800a2d2:	f7ff fa41 	bl	8009758 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a2d6:	bf00      	nop
 800a2d8:	3710      	adds	r7, #16
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	bd80      	pop	{r7, pc}

0800a2de <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800a2de:	b580      	push	{r7, lr}
 800a2e0:	b084      	sub	sp, #16
 800a2e2:	af00      	add	r7, sp, #0
 800a2e4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2ea:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a2f0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a2fc:	f043 0204 	orr.w	r2, r3, #4
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800a304:	68f8      	ldr	r0, [r7, #12]
 800a306:	f7ff fa31 	bl	800976c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a30a:	bf00      	nop
 800a30c:	3710      	adds	r7, #16
 800a30e:	46bd      	mov	sp, r7
 800a310:	bd80      	pop	{r7, pc}

0800a312 <LL_ADC_IsEnabled>:
{
 800a312:	b480      	push	{r7}
 800a314:	b083      	sub	sp, #12
 800a316:	af00      	add	r7, sp, #0
 800a318:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	689b      	ldr	r3, [r3, #8]
 800a31e:	f003 0301 	and.w	r3, r3, #1
 800a322:	2b01      	cmp	r3, #1
 800a324:	d101      	bne.n	800a32a <LL_ADC_IsEnabled+0x18>
 800a326:	2301      	movs	r3, #1
 800a328:	e000      	b.n	800a32c <LL_ADC_IsEnabled+0x1a>
 800a32a:	2300      	movs	r3, #0
}
 800a32c:	4618      	mov	r0, r3
 800a32e:	370c      	adds	r7, #12
 800a330:	46bd      	mov	sp, r7
 800a332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a336:	4770      	bx	lr

0800a338 <LL_ADC_StartCalibration>:
{
 800a338:	b480      	push	{r7}
 800a33a:	b083      	sub	sp, #12
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
 800a340:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	689b      	ldr	r3, [r3, #8]
 800a346:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800a34a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800a34e:	683a      	ldr	r2, [r7, #0]
 800a350:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800a354:	4313      	orrs	r3, r2
 800a356:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	609a      	str	r2, [r3, #8]
}
 800a35e:	bf00      	nop
 800a360:	370c      	adds	r7, #12
 800a362:	46bd      	mov	sp, r7
 800a364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a368:	4770      	bx	lr

0800a36a <LL_ADC_IsCalibrationOnGoing>:
{
 800a36a:	b480      	push	{r7}
 800a36c:	b083      	sub	sp, #12
 800a36e:	af00      	add	r7, sp, #0
 800a370:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	689b      	ldr	r3, [r3, #8]
 800a376:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a37a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a37e:	d101      	bne.n	800a384 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800a380:	2301      	movs	r3, #1
 800a382:	e000      	b.n	800a386 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800a384:	2300      	movs	r3, #0
}
 800a386:	4618      	mov	r0, r3
 800a388:	370c      	adds	r7, #12
 800a38a:	46bd      	mov	sp, r7
 800a38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a390:	4770      	bx	lr

0800a392 <LL_ADC_REG_IsConversionOngoing>:
{
 800a392:	b480      	push	{r7}
 800a394:	b083      	sub	sp, #12
 800a396:	af00      	add	r7, sp, #0
 800a398:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	689b      	ldr	r3, [r3, #8]
 800a39e:	f003 0304 	and.w	r3, r3, #4
 800a3a2:	2b04      	cmp	r3, #4
 800a3a4:	d101      	bne.n	800a3aa <LL_ADC_REG_IsConversionOngoing+0x18>
 800a3a6:	2301      	movs	r3, #1
 800a3a8:	e000      	b.n	800a3ac <LL_ADC_REG_IsConversionOngoing+0x1a>
 800a3aa:	2300      	movs	r3, #0
}
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	370c      	adds	r7, #12
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b6:	4770      	bx	lr

0800a3b8 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b084      	sub	sp, #16
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
 800a3c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800a3cc:	2b01      	cmp	r3, #1
 800a3ce:	d101      	bne.n	800a3d4 <HAL_ADCEx_Calibration_Start+0x1c>
 800a3d0:	2302      	movs	r3, #2
 800a3d2:	e04d      	b.n	800a470 <HAL_ADCEx_Calibration_Start+0xb8>
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	2201      	movs	r2, #1
 800a3d8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800a3dc:	6878      	ldr	r0, [r7, #4]
 800a3de:	f7ff fea5 	bl	800a12c <ADC_Disable>
 800a3e2:	4603      	mov	r3, r0
 800a3e4:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800a3e6:	7bfb      	ldrb	r3, [r7, #15]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d136      	bne.n	800a45a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a3f0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800a3f4:	f023 0302 	bic.w	r3, r3, #2
 800a3f8:	f043 0202 	orr.w	r2, r3, #2
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	6839      	ldr	r1, [r7, #0]
 800a406:	4618      	mov	r0, r3
 800a408:	f7ff ff96 	bl	800a338 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800a40c:	e014      	b.n	800a438 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800a40e:	68bb      	ldr	r3, [r7, #8]
 800a410:	3301      	adds	r3, #1
 800a412:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800a414:	68bb      	ldr	r3, [r7, #8]
 800a416:	4a18      	ldr	r2, [pc, #96]	@ (800a478 <HAL_ADCEx_Calibration_Start+0xc0>)
 800a418:	4293      	cmp	r3, r2
 800a41a:	d90d      	bls.n	800a438 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a420:	f023 0312 	bic.w	r3, r3, #18
 800a424:	f043 0210 	orr.w	r2, r3, #16
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	2200      	movs	r2, #0
 800a430:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 800a434:	2301      	movs	r3, #1
 800a436:	e01b      	b.n	800a470 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	4618      	mov	r0, r3
 800a43e:	f7ff ff94 	bl	800a36a <LL_ADC_IsCalibrationOnGoing>
 800a442:	4603      	mov	r3, r0
 800a444:	2b00      	cmp	r3, #0
 800a446:	d1e2      	bne.n	800a40e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a44c:	f023 0303 	bic.w	r3, r3, #3
 800a450:	f043 0201 	orr.w	r2, r3, #1
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a458:	e005      	b.n	800a466 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a45e:	f043 0210 	orr.w	r2, r3, #16
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	2200      	movs	r2, #0
 800a46a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800a46e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a470:	4618      	mov	r0, r3
 800a472:	3710      	adds	r7, #16
 800a474:	46bd      	mov	sp, r7
 800a476:	bd80      	pop	{r7, pc}
 800a478:	0004de01 	.word	0x0004de01

0800a47c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800a47c:	b590      	push	{r4, r7, lr}
 800a47e:	b0a1      	sub	sp, #132	@ 0x84
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
 800a484:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a486:	2300      	movs	r3, #0
 800a488:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800a492:	2b01      	cmp	r3, #1
 800a494:	d101      	bne.n	800a49a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800a496:	2302      	movs	r3, #2
 800a498:	e0e7      	b.n	800a66a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	2201      	movs	r2, #1
 800a49e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a4b2:	d102      	bne.n	800a4ba <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800a4b4:	4b6f      	ldr	r3, [pc, #444]	@ (800a674 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800a4b6:	60bb      	str	r3, [r7, #8]
 800a4b8:	e009      	b.n	800a4ce <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	4a6e      	ldr	r2, [pc, #440]	@ (800a678 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800a4c0:	4293      	cmp	r3, r2
 800a4c2:	d102      	bne.n	800a4ca <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 800a4c4:	4b6d      	ldr	r3, [pc, #436]	@ (800a67c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800a4c6:	60bb      	str	r3, [r7, #8]
 800a4c8:	e001      	b.n	800a4ce <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800a4ce:	68bb      	ldr	r3, [r7, #8]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d10b      	bne.n	800a4ec <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a4d8:	f043 0220 	orr.w	r2, r3, #32
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 800a4e8:	2301      	movs	r3, #1
 800a4ea:	e0be      	b.n	800a66a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800a4ec:	68bb      	ldr	r3, [r7, #8]
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	f7ff ff4f 	bl	800a392 <LL_ADC_REG_IsConversionOngoing>
 800a4f4:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	f7ff ff49 	bl	800a392 <LL_ADC_REG_IsConversionOngoing>
 800a500:	4603      	mov	r3, r0
 800a502:	2b00      	cmp	r3, #0
 800a504:	f040 80a0 	bne.w	800a648 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800a508:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	f040 809c 	bne.w	800a648 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a518:	d004      	beq.n	800a524 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	4a55      	ldr	r2, [pc, #340]	@ (800a674 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800a520:	4293      	cmp	r3, r2
 800a522:	d101      	bne.n	800a528 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800a524:	4b56      	ldr	r3, [pc, #344]	@ (800a680 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800a526:	e000      	b.n	800a52a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800a528:	4b56      	ldr	r3, [pc, #344]	@ (800a684 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800a52a:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800a52c:	683b      	ldr	r3, [r7, #0]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d04b      	beq.n	800a5cc <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800a534:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a536:	689b      	ldr	r3, [r3, #8]
 800a538:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800a53c:	683b      	ldr	r3, [r7, #0]
 800a53e:	6859      	ldr	r1, [r3, #4]
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800a546:	035b      	lsls	r3, r3, #13
 800a548:	430b      	orrs	r3, r1
 800a54a:	431a      	orrs	r2, r3
 800a54c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a54e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a558:	d004      	beq.n	800a564 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	4a45      	ldr	r2, [pc, #276]	@ (800a674 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800a560:	4293      	cmp	r3, r2
 800a562:	d10f      	bne.n	800a584 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 800a564:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800a568:	f7ff fed3 	bl	800a312 <LL_ADC_IsEnabled>
 800a56c:	4604      	mov	r4, r0
 800a56e:	4841      	ldr	r0, [pc, #260]	@ (800a674 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800a570:	f7ff fecf 	bl	800a312 <LL_ADC_IsEnabled>
 800a574:	4603      	mov	r3, r0
 800a576:	4323      	orrs	r3, r4
 800a578:	2b00      	cmp	r3, #0
 800a57a:	bf0c      	ite	eq
 800a57c:	2301      	moveq	r3, #1
 800a57e:	2300      	movne	r3, #0
 800a580:	b2db      	uxtb	r3, r3
 800a582:	e012      	b.n	800a5aa <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800a584:	483c      	ldr	r0, [pc, #240]	@ (800a678 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800a586:	f7ff fec4 	bl	800a312 <LL_ADC_IsEnabled>
 800a58a:	4604      	mov	r4, r0
 800a58c:	483b      	ldr	r0, [pc, #236]	@ (800a67c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800a58e:	f7ff fec0 	bl	800a312 <LL_ADC_IsEnabled>
 800a592:	4603      	mov	r3, r0
 800a594:	431c      	orrs	r4, r3
 800a596:	483c      	ldr	r0, [pc, #240]	@ (800a688 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800a598:	f7ff febb 	bl	800a312 <LL_ADC_IsEnabled>
 800a59c:	4603      	mov	r3, r0
 800a59e:	4323      	orrs	r3, r4
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	bf0c      	ite	eq
 800a5a4:	2301      	moveq	r3, #1
 800a5a6:	2300      	movne	r3, #0
 800a5a8:	b2db      	uxtb	r3, r3
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d056      	beq.n	800a65c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800a5ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a5b0:	689b      	ldr	r3, [r3, #8]
 800a5b2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800a5b6:	f023 030f 	bic.w	r3, r3, #15
 800a5ba:	683a      	ldr	r2, [r7, #0]
 800a5bc:	6811      	ldr	r1, [r2, #0]
 800a5be:	683a      	ldr	r2, [r7, #0]
 800a5c0:	6892      	ldr	r2, [r2, #8]
 800a5c2:	430a      	orrs	r2, r1
 800a5c4:	431a      	orrs	r2, r3
 800a5c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a5c8:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800a5ca:	e047      	b.n	800a65c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800a5cc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a5ce:	689b      	ldr	r3, [r3, #8]
 800a5d0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800a5d4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a5d6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a5e0:	d004      	beq.n	800a5ec <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	4a23      	ldr	r2, [pc, #140]	@ (800a674 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800a5e8:	4293      	cmp	r3, r2
 800a5ea:	d10f      	bne.n	800a60c <HAL_ADCEx_MultiModeConfigChannel+0x190>
 800a5ec:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800a5f0:	f7ff fe8f 	bl	800a312 <LL_ADC_IsEnabled>
 800a5f4:	4604      	mov	r4, r0
 800a5f6:	481f      	ldr	r0, [pc, #124]	@ (800a674 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800a5f8:	f7ff fe8b 	bl	800a312 <LL_ADC_IsEnabled>
 800a5fc:	4603      	mov	r3, r0
 800a5fe:	4323      	orrs	r3, r4
 800a600:	2b00      	cmp	r3, #0
 800a602:	bf0c      	ite	eq
 800a604:	2301      	moveq	r3, #1
 800a606:	2300      	movne	r3, #0
 800a608:	b2db      	uxtb	r3, r3
 800a60a:	e012      	b.n	800a632 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 800a60c:	481a      	ldr	r0, [pc, #104]	@ (800a678 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800a60e:	f7ff fe80 	bl	800a312 <LL_ADC_IsEnabled>
 800a612:	4604      	mov	r4, r0
 800a614:	4819      	ldr	r0, [pc, #100]	@ (800a67c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800a616:	f7ff fe7c 	bl	800a312 <LL_ADC_IsEnabled>
 800a61a:	4603      	mov	r3, r0
 800a61c:	431c      	orrs	r4, r3
 800a61e:	481a      	ldr	r0, [pc, #104]	@ (800a688 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800a620:	f7ff fe77 	bl	800a312 <LL_ADC_IsEnabled>
 800a624:	4603      	mov	r3, r0
 800a626:	4323      	orrs	r3, r4
 800a628:	2b00      	cmp	r3, #0
 800a62a:	bf0c      	ite	eq
 800a62c:	2301      	moveq	r3, #1
 800a62e:	2300      	movne	r3, #0
 800a630:	b2db      	uxtb	r3, r3
 800a632:	2b00      	cmp	r3, #0
 800a634:	d012      	beq.n	800a65c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800a636:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a638:	689b      	ldr	r3, [r3, #8]
 800a63a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800a63e:	f023 030f 	bic.w	r3, r3, #15
 800a642:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800a644:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800a646:	e009      	b.n	800a65c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a64c:	f043 0220 	orr.w	r2, r3, #32
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800a654:	2301      	movs	r3, #1
 800a656:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800a65a:	e000      	b.n	800a65e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800a65c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	2200      	movs	r2, #0
 800a662:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800a666:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800a66a:	4618      	mov	r0, r3
 800a66c:	3784      	adds	r7, #132	@ 0x84
 800a66e:	46bd      	mov	sp, r7
 800a670:	bd90      	pop	{r4, r7, pc}
 800a672:	bf00      	nop
 800a674:	50000100 	.word	0x50000100
 800a678:	50000400 	.word	0x50000400
 800a67c:	50000500 	.word	0x50000500
 800a680:	50000300 	.word	0x50000300
 800a684:	50000700 	.word	0x50000700
 800a688:	50000600 	.word	0x50000600

0800a68c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a68c:	b480      	push	{r7}
 800a68e:	b085      	sub	sp, #20
 800a690:	af00      	add	r7, sp, #0
 800a692:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	f003 0307 	and.w	r3, r3, #7
 800a69a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a69c:	4b0c      	ldr	r3, [pc, #48]	@ (800a6d0 <__NVIC_SetPriorityGrouping+0x44>)
 800a69e:	68db      	ldr	r3, [r3, #12]
 800a6a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a6a2:	68ba      	ldr	r2, [r7, #8]
 800a6a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800a6a8:	4013      	ands	r3, r2
 800a6aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a6b0:	68bb      	ldr	r3, [r7, #8]
 800a6b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a6b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800a6b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a6bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a6be:	4a04      	ldr	r2, [pc, #16]	@ (800a6d0 <__NVIC_SetPriorityGrouping+0x44>)
 800a6c0:	68bb      	ldr	r3, [r7, #8]
 800a6c2:	60d3      	str	r3, [r2, #12]
}
 800a6c4:	bf00      	nop
 800a6c6:	3714      	adds	r7, #20
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ce:	4770      	bx	lr
 800a6d0:	e000ed00 	.word	0xe000ed00

0800a6d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800a6d4:	b480      	push	{r7}
 800a6d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a6d8:	4b04      	ldr	r3, [pc, #16]	@ (800a6ec <__NVIC_GetPriorityGrouping+0x18>)
 800a6da:	68db      	ldr	r3, [r3, #12]
 800a6dc:	0a1b      	lsrs	r3, r3, #8
 800a6de:	f003 0307 	and.w	r3, r3, #7
}
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ea:	4770      	bx	lr
 800a6ec:	e000ed00 	.word	0xe000ed00

0800a6f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a6f0:	b480      	push	{r7}
 800a6f2:	b083      	sub	sp, #12
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	4603      	mov	r3, r0
 800a6f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a6fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	db0b      	blt.n	800a71a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a702:	79fb      	ldrb	r3, [r7, #7]
 800a704:	f003 021f 	and.w	r2, r3, #31
 800a708:	4907      	ldr	r1, [pc, #28]	@ (800a728 <__NVIC_EnableIRQ+0x38>)
 800a70a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a70e:	095b      	lsrs	r3, r3, #5
 800a710:	2001      	movs	r0, #1
 800a712:	fa00 f202 	lsl.w	r2, r0, r2
 800a716:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800a71a:	bf00      	nop
 800a71c:	370c      	adds	r7, #12
 800a71e:	46bd      	mov	sp, r7
 800a720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a724:	4770      	bx	lr
 800a726:	bf00      	nop
 800a728:	e000e100 	.word	0xe000e100

0800a72c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a72c:	b480      	push	{r7}
 800a72e:	b083      	sub	sp, #12
 800a730:	af00      	add	r7, sp, #0
 800a732:	4603      	mov	r3, r0
 800a734:	6039      	str	r1, [r7, #0]
 800a736:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a738:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	db0a      	blt.n	800a756 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a740:	683b      	ldr	r3, [r7, #0]
 800a742:	b2da      	uxtb	r2, r3
 800a744:	490c      	ldr	r1, [pc, #48]	@ (800a778 <__NVIC_SetPriority+0x4c>)
 800a746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a74a:	0112      	lsls	r2, r2, #4
 800a74c:	b2d2      	uxtb	r2, r2
 800a74e:	440b      	add	r3, r1
 800a750:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800a754:	e00a      	b.n	800a76c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a756:	683b      	ldr	r3, [r7, #0]
 800a758:	b2da      	uxtb	r2, r3
 800a75a:	4908      	ldr	r1, [pc, #32]	@ (800a77c <__NVIC_SetPriority+0x50>)
 800a75c:	79fb      	ldrb	r3, [r7, #7]
 800a75e:	f003 030f 	and.w	r3, r3, #15
 800a762:	3b04      	subs	r3, #4
 800a764:	0112      	lsls	r2, r2, #4
 800a766:	b2d2      	uxtb	r2, r2
 800a768:	440b      	add	r3, r1
 800a76a:	761a      	strb	r2, [r3, #24]
}
 800a76c:	bf00      	nop
 800a76e:	370c      	adds	r7, #12
 800a770:	46bd      	mov	sp, r7
 800a772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a776:	4770      	bx	lr
 800a778:	e000e100 	.word	0xe000e100
 800a77c:	e000ed00 	.word	0xe000ed00

0800a780 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a780:	b480      	push	{r7}
 800a782:	b089      	sub	sp, #36	@ 0x24
 800a784:	af00      	add	r7, sp, #0
 800a786:	60f8      	str	r0, [r7, #12]
 800a788:	60b9      	str	r1, [r7, #8]
 800a78a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	f003 0307 	and.w	r3, r3, #7
 800a792:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a794:	69fb      	ldr	r3, [r7, #28]
 800a796:	f1c3 0307 	rsb	r3, r3, #7
 800a79a:	2b04      	cmp	r3, #4
 800a79c:	bf28      	it	cs
 800a79e:	2304      	movcs	r3, #4
 800a7a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a7a2:	69fb      	ldr	r3, [r7, #28]
 800a7a4:	3304      	adds	r3, #4
 800a7a6:	2b06      	cmp	r3, #6
 800a7a8:	d902      	bls.n	800a7b0 <NVIC_EncodePriority+0x30>
 800a7aa:	69fb      	ldr	r3, [r7, #28]
 800a7ac:	3b03      	subs	r3, #3
 800a7ae:	e000      	b.n	800a7b2 <NVIC_EncodePriority+0x32>
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a7b4:	f04f 32ff 	mov.w	r2, #4294967295
 800a7b8:	69bb      	ldr	r3, [r7, #24]
 800a7ba:	fa02 f303 	lsl.w	r3, r2, r3
 800a7be:	43da      	mvns	r2, r3
 800a7c0:	68bb      	ldr	r3, [r7, #8]
 800a7c2:	401a      	ands	r2, r3
 800a7c4:	697b      	ldr	r3, [r7, #20]
 800a7c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a7c8:	f04f 31ff 	mov.w	r1, #4294967295
 800a7cc:	697b      	ldr	r3, [r7, #20]
 800a7ce:	fa01 f303 	lsl.w	r3, r1, r3
 800a7d2:	43d9      	mvns	r1, r3
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a7d8:	4313      	orrs	r3, r2
         );
}
 800a7da:	4618      	mov	r0, r3
 800a7dc:	3724      	adds	r7, #36	@ 0x24
 800a7de:	46bd      	mov	sp, r7
 800a7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e4:	4770      	bx	lr
	...

0800a7e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	b082      	sub	sp, #8
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	3b01      	subs	r3, #1
 800a7f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a7f8:	d301      	bcc.n	800a7fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a7fa:	2301      	movs	r3, #1
 800a7fc:	e00f      	b.n	800a81e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a7fe:	4a0a      	ldr	r2, [pc, #40]	@ (800a828 <SysTick_Config+0x40>)
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	3b01      	subs	r3, #1
 800a804:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a806:	210f      	movs	r1, #15
 800a808:	f04f 30ff 	mov.w	r0, #4294967295
 800a80c:	f7ff ff8e 	bl	800a72c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a810:	4b05      	ldr	r3, [pc, #20]	@ (800a828 <SysTick_Config+0x40>)
 800a812:	2200      	movs	r2, #0
 800a814:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a816:	4b04      	ldr	r3, [pc, #16]	@ (800a828 <SysTick_Config+0x40>)
 800a818:	2207      	movs	r2, #7
 800a81a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a81c:	2300      	movs	r3, #0
}
 800a81e:	4618      	mov	r0, r3
 800a820:	3708      	adds	r7, #8
 800a822:	46bd      	mov	sp, r7
 800a824:	bd80      	pop	{r7, pc}
 800a826:	bf00      	nop
 800a828:	e000e010 	.word	0xe000e010

0800a82c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b082      	sub	sp, #8
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a834:	6878      	ldr	r0, [r7, #4]
 800a836:	f7ff ff29 	bl	800a68c <__NVIC_SetPriorityGrouping>
}
 800a83a:	bf00      	nop
 800a83c:	3708      	adds	r7, #8
 800a83e:	46bd      	mov	sp, r7
 800a840:	bd80      	pop	{r7, pc}

0800a842 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a842:	b580      	push	{r7, lr}
 800a844:	b086      	sub	sp, #24
 800a846:	af00      	add	r7, sp, #0
 800a848:	4603      	mov	r3, r0
 800a84a:	60b9      	str	r1, [r7, #8]
 800a84c:	607a      	str	r2, [r7, #4]
 800a84e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800a850:	f7ff ff40 	bl	800a6d4 <__NVIC_GetPriorityGrouping>
 800a854:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a856:	687a      	ldr	r2, [r7, #4]
 800a858:	68b9      	ldr	r1, [r7, #8]
 800a85a:	6978      	ldr	r0, [r7, #20]
 800a85c:	f7ff ff90 	bl	800a780 <NVIC_EncodePriority>
 800a860:	4602      	mov	r2, r0
 800a862:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a866:	4611      	mov	r1, r2
 800a868:	4618      	mov	r0, r3
 800a86a:	f7ff ff5f 	bl	800a72c <__NVIC_SetPriority>
}
 800a86e:	bf00      	nop
 800a870:	3718      	adds	r7, #24
 800a872:	46bd      	mov	sp, r7
 800a874:	bd80      	pop	{r7, pc}

0800a876 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a876:	b580      	push	{r7, lr}
 800a878:	b082      	sub	sp, #8
 800a87a:	af00      	add	r7, sp, #0
 800a87c:	4603      	mov	r3, r0
 800a87e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a880:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a884:	4618      	mov	r0, r3
 800a886:	f7ff ff33 	bl	800a6f0 <__NVIC_EnableIRQ>
}
 800a88a:	bf00      	nop
 800a88c:	3708      	adds	r7, #8
 800a88e:	46bd      	mov	sp, r7
 800a890:	bd80      	pop	{r7, pc}

0800a892 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a892:	b580      	push	{r7, lr}
 800a894:	b082      	sub	sp, #8
 800a896:	af00      	add	r7, sp, #0
 800a898:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a89a:	6878      	ldr	r0, [r7, #4]
 800a89c:	f7ff ffa4 	bl	800a7e8 <SysTick_Config>
 800a8a0:	4603      	mov	r3, r0
}
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	3708      	adds	r7, #8
 800a8a6:	46bd      	mov	sp, r7
 800a8a8:	bd80      	pop	{r7, pc}
	...

0800a8ac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a8ac:	b580      	push	{r7, lr}
 800a8ae:	b084      	sub	sp, #16
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d101      	bne.n	800a8be <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800a8ba:	2301      	movs	r3, #1
 800a8bc:	e08d      	b.n	800a9da <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	461a      	mov	r2, r3
 800a8c4:	4b47      	ldr	r3, [pc, #284]	@ (800a9e4 <HAL_DMA_Init+0x138>)
 800a8c6:	429a      	cmp	r2, r3
 800a8c8:	d80f      	bhi.n	800a8ea <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	461a      	mov	r2, r3
 800a8d0:	4b45      	ldr	r3, [pc, #276]	@ (800a9e8 <HAL_DMA_Init+0x13c>)
 800a8d2:	4413      	add	r3, r2
 800a8d4:	4a45      	ldr	r2, [pc, #276]	@ (800a9ec <HAL_DMA_Init+0x140>)
 800a8d6:	fba2 2303 	umull	r2, r3, r2, r3
 800a8da:	091b      	lsrs	r3, r3, #4
 800a8dc:	009a      	lsls	r2, r3, #2
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	4a42      	ldr	r2, [pc, #264]	@ (800a9f0 <HAL_DMA_Init+0x144>)
 800a8e6:	641a      	str	r2, [r3, #64]	@ 0x40
 800a8e8:	e00e      	b.n	800a908 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	461a      	mov	r2, r3
 800a8f0:	4b40      	ldr	r3, [pc, #256]	@ (800a9f4 <HAL_DMA_Init+0x148>)
 800a8f2:	4413      	add	r3, r2
 800a8f4:	4a3d      	ldr	r2, [pc, #244]	@ (800a9ec <HAL_DMA_Init+0x140>)
 800a8f6:	fba2 2303 	umull	r2, r3, r2, r3
 800a8fa:	091b      	lsrs	r3, r3, #4
 800a8fc:	009a      	lsls	r2, r3, #2
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	4a3c      	ldr	r2, [pc, #240]	@ (800a9f8 <HAL_DMA_Init+0x14c>)
 800a906:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	2202      	movs	r2, #2
 800a90c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800a91e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a922:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800a92c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	691b      	ldr	r3, [r3, #16]
 800a932:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a938:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	699b      	ldr	r3, [r3, #24]
 800a93e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a944:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	6a1b      	ldr	r3, [r3, #32]
 800a94a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800a94c:	68fa      	ldr	r2, [r7, #12]
 800a94e:	4313      	orrs	r3, r2
 800a950:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	68fa      	ldr	r2, [r7, #12]
 800a958:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800a95a:	6878      	ldr	r0, [r7, #4]
 800a95c:	f000 fa76 	bl	800ae4c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	689b      	ldr	r3, [r3, #8]
 800a964:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a968:	d102      	bne.n	800a970 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	2200      	movs	r2, #0
 800a96e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	685a      	ldr	r2, [r3, #4]
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a978:	b2d2      	uxtb	r2, r2
 800a97a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a980:	687a      	ldr	r2, [r7, #4]
 800a982:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800a984:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	685b      	ldr	r3, [r3, #4]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d010      	beq.n	800a9b0 <HAL_DMA_Init+0x104>
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	685b      	ldr	r3, [r3, #4]
 800a992:	2b04      	cmp	r3, #4
 800a994:	d80c      	bhi.n	800a9b0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800a996:	6878      	ldr	r0, [r7, #4]
 800a998:	f000 fa96 	bl	800aec8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a9a8:	687a      	ldr	r2, [r7, #4]
 800a9aa:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800a9ac:	605a      	str	r2, [r3, #4]
 800a9ae:	e008      	b.n	800a9c2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	2200      	movs	r2, #0
 800a9c0:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	2201      	movs	r2, #1
 800a9cc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800a9d8:	2300      	movs	r3, #0
}
 800a9da:	4618      	mov	r0, r3
 800a9dc:	3710      	adds	r7, #16
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	bd80      	pop	{r7, pc}
 800a9e2:	bf00      	nop
 800a9e4:	40020407 	.word	0x40020407
 800a9e8:	bffdfff8 	.word	0xbffdfff8
 800a9ec:	cccccccd 	.word	0xcccccccd
 800a9f0:	40020000 	.word	0x40020000
 800a9f4:	bffdfbf8 	.word	0xbffdfbf8
 800a9f8:	40020400 	.word	0x40020400

0800a9fc <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800a9fc:	b580      	push	{r7, lr}
 800a9fe:	b086      	sub	sp, #24
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	60f8      	str	r0, [r7, #12]
 800aa04:	60b9      	str	r1, [r7, #8]
 800aa06:	607a      	str	r2, [r7, #4]
 800aa08:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800aa14:	2b01      	cmp	r3, #1
 800aa16:	d101      	bne.n	800aa1c <HAL_DMA_Start_IT+0x20>
 800aa18:	2302      	movs	r3, #2
 800aa1a:	e066      	b.n	800aaea <HAL_DMA_Start_IT+0xee>
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	2201      	movs	r2, #1
 800aa20:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800aa2a:	b2db      	uxtb	r3, r3
 800aa2c:	2b01      	cmp	r3, #1
 800aa2e:	d155      	bne.n	800aadc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	2202      	movs	r2, #2
 800aa34:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	2200      	movs	r2, #0
 800aa3c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	681a      	ldr	r2, [r3, #0]
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	f022 0201 	bic.w	r2, r2, #1
 800aa4c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800aa4e:	683b      	ldr	r3, [r7, #0]
 800aa50:	687a      	ldr	r2, [r7, #4]
 800aa52:	68b9      	ldr	r1, [r7, #8]
 800aa54:	68f8      	ldr	r0, [r7, #12]
 800aa56:	f000 f9bb 	bl	800add0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d008      	beq.n	800aa74 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	681a      	ldr	r2, [r3, #0]
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	f042 020e 	orr.w	r2, r2, #14
 800aa70:	601a      	str	r2, [r3, #0]
 800aa72:	e00f      	b.n	800aa94 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	681a      	ldr	r2, [r3, #0]
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	f022 0204 	bic.w	r2, r2, #4
 800aa82:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	681a      	ldr	r2, [r3, #0]
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	f042 020a 	orr.w	r2, r2, #10
 800aa92:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d007      	beq.n	800aab2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800aaa6:	681a      	ldr	r2, [r3, #0]
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800aaac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800aab0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d007      	beq.n	800aaca <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aabe:	681a      	ldr	r2, [r3, #0]
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aac4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800aac8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	681a      	ldr	r2, [r3, #0]
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	f042 0201 	orr.w	r2, r2, #1
 800aad8:	601a      	str	r2, [r3, #0]
 800aada:	e005      	b.n	800aae8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	2200      	movs	r2, #0
 800aae0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800aae4:	2302      	movs	r3, #2
 800aae6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800aae8:	7dfb      	ldrb	r3, [r7, #23]
}
 800aaea:	4618      	mov	r0, r3
 800aaec:	3718      	adds	r7, #24
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	bd80      	pop	{r7, pc}

0800aaf2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800aaf2:	b480      	push	{r7}
 800aaf4:	b085      	sub	sp, #20
 800aaf6:	af00      	add	r7, sp, #0
 800aaf8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800aafa:	2300      	movs	r3, #0
 800aafc:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800ab04:	b2db      	uxtb	r3, r3
 800ab06:	2b02      	cmp	r3, #2
 800ab08:	d005      	beq.n	800ab16 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	2204      	movs	r2, #4
 800ab0e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800ab10:	2301      	movs	r3, #1
 800ab12:	73fb      	strb	r3, [r7, #15]
 800ab14:	e037      	b.n	800ab86 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	681a      	ldr	r2, [r3, #0]
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	f022 020e 	bic.w	r2, r2, #14
 800ab24:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ab2a:	681a      	ldr	r2, [r3, #0]
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ab30:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800ab34:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	681a      	ldr	r2, [r3, #0]
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	f022 0201 	bic.w	r2, r2, #1
 800ab44:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab4a:	f003 021f 	and.w	r2, r3, #31
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab52:	2101      	movs	r1, #1
 800ab54:	fa01 f202 	lsl.w	r2, r1, r2
 800ab58:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ab5e:	687a      	ldr	r2, [r7, #4]
 800ab60:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800ab62:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d00c      	beq.n	800ab86 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab70:	681a      	ldr	r2, [r3, #0]
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab76:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800ab7a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ab80:	687a      	ldr	r2, [r7, #4]
 800ab82:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800ab84:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	2201      	movs	r2, #1
 800ab8a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	2200      	movs	r2, #0
 800ab92:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800ab96:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab98:	4618      	mov	r0, r3
 800ab9a:	3714      	adds	r7, #20
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba2:	4770      	bx	lr

0800aba4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b084      	sub	sp, #16
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800abac:	2300      	movs	r3, #0
 800abae:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800abb6:	b2db      	uxtb	r3, r3
 800abb8:	2b02      	cmp	r3, #2
 800abba:	d00d      	beq.n	800abd8 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	2204      	movs	r2, #4
 800abc0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	2201      	movs	r2, #1
 800abc6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	2200      	movs	r2, #0
 800abce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800abd2:	2301      	movs	r3, #1
 800abd4:	73fb      	strb	r3, [r7, #15]
 800abd6:	e047      	b.n	800ac68 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	681a      	ldr	r2, [r3, #0]
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	f022 020e 	bic.w	r2, r2, #14
 800abe6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	681a      	ldr	r2, [r3, #0]
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	f022 0201 	bic.w	r2, r2, #1
 800abf6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800abfc:	681a      	ldr	r2, [r3, #0]
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ac02:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800ac06:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac0c:	f003 021f 	and.w	r2, r3, #31
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac14:	2101      	movs	r1, #1
 800ac16:	fa01 f202 	lsl.w	r2, r1, r2
 800ac1a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ac20:	687a      	ldr	r2, [r7, #4]
 800ac22:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800ac24:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d00c      	beq.n	800ac48 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac32:	681a      	ldr	r2, [r3, #0]
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac38:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800ac3c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ac42:	687a      	ldr	r2, [r7, #4]
 800ac44:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800ac46:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	2201      	movs	r2, #1
 800ac4c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	2200      	movs	r2, #0
 800ac54:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d003      	beq.n	800ac68 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac64:	6878      	ldr	r0, [r7, #4]
 800ac66:	4798      	blx	r3
    }
  }
  return status;
 800ac68:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	3710      	adds	r7, #16
 800ac6e:	46bd      	mov	sp, r7
 800ac70:	bd80      	pop	{r7, pc}

0800ac72 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800ac72:	b580      	push	{r7, lr}
 800ac74:	b084      	sub	sp, #16
 800ac76:	af00      	add	r7, sp, #0
 800ac78:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac8e:	f003 031f 	and.w	r3, r3, #31
 800ac92:	2204      	movs	r2, #4
 800ac94:	409a      	lsls	r2, r3
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	4013      	ands	r3, r2
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d026      	beq.n	800acec <HAL_DMA_IRQHandler+0x7a>
 800ac9e:	68bb      	ldr	r3, [r7, #8]
 800aca0:	f003 0304 	and.w	r3, r3, #4
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d021      	beq.n	800acec <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	f003 0320 	and.w	r3, r3, #32
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d107      	bne.n	800acc6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	681a      	ldr	r2, [r3, #0]
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	f022 0204 	bic.w	r2, r2, #4
 800acc4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800acca:	f003 021f 	and.w	r2, r3, #31
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800acd2:	2104      	movs	r1, #4
 800acd4:	fa01 f202 	lsl.w	r2, r1, r2
 800acd8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d071      	beq.n	800adc6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ace6:	6878      	ldr	r0, [r7, #4]
 800ace8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800acea:	e06c      	b.n	800adc6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800acf0:	f003 031f 	and.w	r3, r3, #31
 800acf4:	2202      	movs	r2, #2
 800acf6:	409a      	lsls	r2, r3
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	4013      	ands	r3, r2
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d02e      	beq.n	800ad5e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800ad00:	68bb      	ldr	r3, [r7, #8]
 800ad02:	f003 0302 	and.w	r3, r3, #2
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d029      	beq.n	800ad5e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	f003 0320 	and.w	r3, r3, #32
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d10b      	bne.n	800ad30 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	681a      	ldr	r2, [r3, #0]
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	f022 020a 	bic.w	r2, r2, #10
 800ad26:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	2201      	movs	r2, #1
 800ad2c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad34:	f003 021f 	and.w	r2, r3, #31
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad3c:	2102      	movs	r1, #2
 800ad3e:	fa01 f202 	lsl.w	r2, r1, r2
 800ad42:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	2200      	movs	r2, #0
 800ad48:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d038      	beq.n	800adc6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad58:	6878      	ldr	r0, [r7, #4]
 800ad5a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800ad5c:	e033      	b.n	800adc6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad62:	f003 031f 	and.w	r3, r3, #31
 800ad66:	2208      	movs	r2, #8
 800ad68:	409a      	lsls	r2, r3
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	4013      	ands	r3, r2
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d02a      	beq.n	800adc8 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800ad72:	68bb      	ldr	r3, [r7, #8]
 800ad74:	f003 0308 	and.w	r3, r3, #8
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d025      	beq.n	800adc8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	681a      	ldr	r2, [r3, #0]
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	f022 020e 	bic.w	r2, r2, #14
 800ad8a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad90:	f003 021f 	and.w	r2, r3, #31
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad98:	2101      	movs	r1, #1
 800ad9a:	fa01 f202 	lsl.w	r2, r1, r2
 800ad9e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	2201      	movs	r2, #1
 800ada4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	2201      	movs	r2, #1
 800adaa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	2200      	movs	r2, #0
 800adb2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d004      	beq.n	800adc8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800adc2:	6878      	ldr	r0, [r7, #4]
 800adc4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800adc6:	bf00      	nop
 800adc8:	bf00      	nop
}
 800adca:	3710      	adds	r7, #16
 800adcc:	46bd      	mov	sp, r7
 800adce:	bd80      	pop	{r7, pc}

0800add0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800add0:	b480      	push	{r7}
 800add2:	b085      	sub	sp, #20
 800add4:	af00      	add	r7, sp, #0
 800add6:	60f8      	str	r0, [r7, #12]
 800add8:	60b9      	str	r1, [r7, #8]
 800adda:	607a      	str	r2, [r7, #4]
 800addc:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ade2:	68fa      	ldr	r2, [r7, #12]
 800ade4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800ade6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800adec:	2b00      	cmp	r3, #0
 800adee:	d004      	beq.n	800adfa <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800adf4:	68fa      	ldr	r2, [r7, #12]
 800adf6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800adf8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800adfe:	f003 021f 	and.w	r2, r3, #31
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae06:	2101      	movs	r1, #1
 800ae08:	fa01 f202 	lsl.w	r2, r1, r2
 800ae0c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	683a      	ldr	r2, [r7, #0]
 800ae14:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	689b      	ldr	r3, [r3, #8]
 800ae1a:	2b10      	cmp	r3, #16
 800ae1c:	d108      	bne.n	800ae30 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	687a      	ldr	r2, [r7, #4]
 800ae24:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	68ba      	ldr	r2, [r7, #8]
 800ae2c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800ae2e:	e007      	b.n	800ae40 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	68ba      	ldr	r2, [r7, #8]
 800ae36:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	687a      	ldr	r2, [r7, #4]
 800ae3e:	60da      	str	r2, [r3, #12]
}
 800ae40:	bf00      	nop
 800ae42:	3714      	adds	r7, #20
 800ae44:	46bd      	mov	sp, r7
 800ae46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4a:	4770      	bx	lr

0800ae4c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800ae4c:	b480      	push	{r7}
 800ae4e:	b087      	sub	sp, #28
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	461a      	mov	r2, r3
 800ae5a:	4b16      	ldr	r3, [pc, #88]	@ (800aeb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800ae5c:	429a      	cmp	r2, r3
 800ae5e:	d802      	bhi.n	800ae66 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800ae60:	4b15      	ldr	r3, [pc, #84]	@ (800aeb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800ae62:	617b      	str	r3, [r7, #20]
 800ae64:	e001      	b.n	800ae6a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800ae66:	4b15      	ldr	r3, [pc, #84]	@ (800aebc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800ae68:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800ae6a:	697b      	ldr	r3, [r7, #20]
 800ae6c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	b2db      	uxtb	r3, r3
 800ae74:	3b08      	subs	r3, #8
 800ae76:	4a12      	ldr	r2, [pc, #72]	@ (800aec0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800ae78:	fba2 2303 	umull	r2, r3, r2, r3
 800ae7c:	091b      	lsrs	r3, r3, #4
 800ae7e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ae84:	089b      	lsrs	r3, r3, #2
 800ae86:	009a      	lsls	r2, r3, #2
 800ae88:	693b      	ldr	r3, [r7, #16]
 800ae8a:	4413      	add	r3, r2
 800ae8c:	461a      	mov	r2, r3
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	4a0b      	ldr	r2, [pc, #44]	@ (800aec4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800ae96:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	f003 031f 	and.w	r3, r3, #31
 800ae9e:	2201      	movs	r2, #1
 800aea0:	409a      	lsls	r2, r3
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800aea6:	bf00      	nop
 800aea8:	371c      	adds	r7, #28
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb0:	4770      	bx	lr
 800aeb2:	bf00      	nop
 800aeb4:	40020407 	.word	0x40020407
 800aeb8:	40020800 	.word	0x40020800
 800aebc:	40020820 	.word	0x40020820
 800aec0:	cccccccd 	.word	0xcccccccd
 800aec4:	40020880 	.word	0x40020880

0800aec8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800aec8:	b480      	push	{r7}
 800aeca:	b085      	sub	sp, #20
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	685b      	ldr	r3, [r3, #4]
 800aed4:	b2db      	uxtb	r3, r3
 800aed6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800aed8:	68fa      	ldr	r2, [r7, #12]
 800aeda:	4b0b      	ldr	r3, [pc, #44]	@ (800af08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800aedc:	4413      	add	r3, r2
 800aede:	009b      	lsls	r3, r3, #2
 800aee0:	461a      	mov	r2, r3
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	4a08      	ldr	r2, [pc, #32]	@ (800af0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800aeea:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	3b01      	subs	r3, #1
 800aef0:	f003 031f 	and.w	r3, r3, #31
 800aef4:	2201      	movs	r2, #1
 800aef6:	409a      	lsls	r2, r3
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800aefc:	bf00      	nop
 800aefe:	3714      	adds	r7, #20
 800af00:	46bd      	mov	sp, r7
 800af02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af06:	4770      	bx	lr
 800af08:	1000823f 	.word	0x1000823f
 800af0c:	40020940 	.word	0x40020940

0800af10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800af10:	b480      	push	{r7}
 800af12:	b087      	sub	sp, #28
 800af14:	af00      	add	r7, sp, #0
 800af16:	6078      	str	r0, [r7, #4]
 800af18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800af1a:	2300      	movs	r3, #0
 800af1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800af1e:	e15a      	b.n	800b1d6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800af20:	683b      	ldr	r3, [r7, #0]
 800af22:	681a      	ldr	r2, [r3, #0]
 800af24:	2101      	movs	r1, #1
 800af26:	697b      	ldr	r3, [r7, #20]
 800af28:	fa01 f303 	lsl.w	r3, r1, r3
 800af2c:	4013      	ands	r3, r2
 800af2e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	2b00      	cmp	r3, #0
 800af34:	f000 814c 	beq.w	800b1d0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800af38:	683b      	ldr	r3, [r7, #0]
 800af3a:	685b      	ldr	r3, [r3, #4]
 800af3c:	f003 0303 	and.w	r3, r3, #3
 800af40:	2b01      	cmp	r3, #1
 800af42:	d005      	beq.n	800af50 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800af44:	683b      	ldr	r3, [r7, #0]
 800af46:	685b      	ldr	r3, [r3, #4]
 800af48:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800af4c:	2b02      	cmp	r3, #2
 800af4e:	d130      	bne.n	800afb2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	689b      	ldr	r3, [r3, #8]
 800af54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800af56:	697b      	ldr	r3, [r7, #20]
 800af58:	005b      	lsls	r3, r3, #1
 800af5a:	2203      	movs	r2, #3
 800af5c:	fa02 f303 	lsl.w	r3, r2, r3
 800af60:	43db      	mvns	r3, r3
 800af62:	693a      	ldr	r2, [r7, #16]
 800af64:	4013      	ands	r3, r2
 800af66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800af68:	683b      	ldr	r3, [r7, #0]
 800af6a:	68da      	ldr	r2, [r3, #12]
 800af6c:	697b      	ldr	r3, [r7, #20]
 800af6e:	005b      	lsls	r3, r3, #1
 800af70:	fa02 f303 	lsl.w	r3, r2, r3
 800af74:	693a      	ldr	r2, [r7, #16]
 800af76:	4313      	orrs	r3, r2
 800af78:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	693a      	ldr	r2, [r7, #16]
 800af7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	685b      	ldr	r3, [r3, #4]
 800af84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800af86:	2201      	movs	r2, #1
 800af88:	697b      	ldr	r3, [r7, #20]
 800af8a:	fa02 f303 	lsl.w	r3, r2, r3
 800af8e:	43db      	mvns	r3, r3
 800af90:	693a      	ldr	r2, [r7, #16]
 800af92:	4013      	ands	r3, r2
 800af94:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800af96:	683b      	ldr	r3, [r7, #0]
 800af98:	685b      	ldr	r3, [r3, #4]
 800af9a:	091b      	lsrs	r3, r3, #4
 800af9c:	f003 0201 	and.w	r2, r3, #1
 800afa0:	697b      	ldr	r3, [r7, #20]
 800afa2:	fa02 f303 	lsl.w	r3, r2, r3
 800afa6:	693a      	ldr	r2, [r7, #16]
 800afa8:	4313      	orrs	r3, r2
 800afaa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	693a      	ldr	r2, [r7, #16]
 800afb0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800afb2:	683b      	ldr	r3, [r7, #0]
 800afb4:	685b      	ldr	r3, [r3, #4]
 800afb6:	f003 0303 	and.w	r3, r3, #3
 800afba:	2b03      	cmp	r3, #3
 800afbc:	d017      	beq.n	800afee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	68db      	ldr	r3, [r3, #12]
 800afc2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800afc4:	697b      	ldr	r3, [r7, #20]
 800afc6:	005b      	lsls	r3, r3, #1
 800afc8:	2203      	movs	r2, #3
 800afca:	fa02 f303 	lsl.w	r3, r2, r3
 800afce:	43db      	mvns	r3, r3
 800afd0:	693a      	ldr	r2, [r7, #16]
 800afd2:	4013      	ands	r3, r2
 800afd4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800afd6:	683b      	ldr	r3, [r7, #0]
 800afd8:	689a      	ldr	r2, [r3, #8]
 800afda:	697b      	ldr	r3, [r7, #20]
 800afdc:	005b      	lsls	r3, r3, #1
 800afde:	fa02 f303 	lsl.w	r3, r2, r3
 800afe2:	693a      	ldr	r2, [r7, #16]
 800afe4:	4313      	orrs	r3, r2
 800afe6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	693a      	ldr	r2, [r7, #16]
 800afec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800afee:	683b      	ldr	r3, [r7, #0]
 800aff0:	685b      	ldr	r3, [r3, #4]
 800aff2:	f003 0303 	and.w	r3, r3, #3
 800aff6:	2b02      	cmp	r3, #2
 800aff8:	d123      	bne.n	800b042 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800affa:	697b      	ldr	r3, [r7, #20]
 800affc:	08da      	lsrs	r2, r3, #3
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	3208      	adds	r2, #8
 800b002:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b006:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800b008:	697b      	ldr	r3, [r7, #20]
 800b00a:	f003 0307 	and.w	r3, r3, #7
 800b00e:	009b      	lsls	r3, r3, #2
 800b010:	220f      	movs	r2, #15
 800b012:	fa02 f303 	lsl.w	r3, r2, r3
 800b016:	43db      	mvns	r3, r3
 800b018:	693a      	ldr	r2, [r7, #16]
 800b01a:	4013      	ands	r3, r2
 800b01c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800b01e:	683b      	ldr	r3, [r7, #0]
 800b020:	691a      	ldr	r2, [r3, #16]
 800b022:	697b      	ldr	r3, [r7, #20]
 800b024:	f003 0307 	and.w	r3, r3, #7
 800b028:	009b      	lsls	r3, r3, #2
 800b02a:	fa02 f303 	lsl.w	r3, r2, r3
 800b02e:	693a      	ldr	r2, [r7, #16]
 800b030:	4313      	orrs	r3, r2
 800b032:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800b034:	697b      	ldr	r3, [r7, #20]
 800b036:	08da      	lsrs	r2, r3, #3
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	3208      	adds	r2, #8
 800b03c:	6939      	ldr	r1, [r7, #16]
 800b03e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800b048:	697b      	ldr	r3, [r7, #20]
 800b04a:	005b      	lsls	r3, r3, #1
 800b04c:	2203      	movs	r2, #3
 800b04e:	fa02 f303 	lsl.w	r3, r2, r3
 800b052:	43db      	mvns	r3, r3
 800b054:	693a      	ldr	r2, [r7, #16]
 800b056:	4013      	ands	r3, r2
 800b058:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b05a:	683b      	ldr	r3, [r7, #0]
 800b05c:	685b      	ldr	r3, [r3, #4]
 800b05e:	f003 0203 	and.w	r2, r3, #3
 800b062:	697b      	ldr	r3, [r7, #20]
 800b064:	005b      	lsls	r3, r3, #1
 800b066:	fa02 f303 	lsl.w	r3, r2, r3
 800b06a:	693a      	ldr	r2, [r7, #16]
 800b06c:	4313      	orrs	r3, r2
 800b06e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	693a      	ldr	r2, [r7, #16]
 800b074:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800b076:	683b      	ldr	r3, [r7, #0]
 800b078:	685b      	ldr	r3, [r3, #4]
 800b07a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800b07e:	2b00      	cmp	r3, #0
 800b080:	f000 80a6 	beq.w	800b1d0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b084:	4b5b      	ldr	r3, [pc, #364]	@ (800b1f4 <HAL_GPIO_Init+0x2e4>)
 800b086:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b088:	4a5a      	ldr	r2, [pc, #360]	@ (800b1f4 <HAL_GPIO_Init+0x2e4>)
 800b08a:	f043 0301 	orr.w	r3, r3, #1
 800b08e:	6613      	str	r3, [r2, #96]	@ 0x60
 800b090:	4b58      	ldr	r3, [pc, #352]	@ (800b1f4 <HAL_GPIO_Init+0x2e4>)
 800b092:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b094:	f003 0301 	and.w	r3, r3, #1
 800b098:	60bb      	str	r3, [r7, #8]
 800b09a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800b09c:	4a56      	ldr	r2, [pc, #344]	@ (800b1f8 <HAL_GPIO_Init+0x2e8>)
 800b09e:	697b      	ldr	r3, [r7, #20]
 800b0a0:	089b      	lsrs	r3, r3, #2
 800b0a2:	3302      	adds	r3, #2
 800b0a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b0a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800b0aa:	697b      	ldr	r3, [r7, #20]
 800b0ac:	f003 0303 	and.w	r3, r3, #3
 800b0b0:	009b      	lsls	r3, r3, #2
 800b0b2:	220f      	movs	r2, #15
 800b0b4:	fa02 f303 	lsl.w	r3, r2, r3
 800b0b8:	43db      	mvns	r3, r3
 800b0ba:	693a      	ldr	r2, [r7, #16]
 800b0bc:	4013      	ands	r3, r2
 800b0be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800b0c6:	d01f      	beq.n	800b108 <HAL_GPIO_Init+0x1f8>
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	4a4c      	ldr	r2, [pc, #304]	@ (800b1fc <HAL_GPIO_Init+0x2ec>)
 800b0cc:	4293      	cmp	r3, r2
 800b0ce:	d019      	beq.n	800b104 <HAL_GPIO_Init+0x1f4>
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	4a4b      	ldr	r2, [pc, #300]	@ (800b200 <HAL_GPIO_Init+0x2f0>)
 800b0d4:	4293      	cmp	r3, r2
 800b0d6:	d013      	beq.n	800b100 <HAL_GPIO_Init+0x1f0>
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	4a4a      	ldr	r2, [pc, #296]	@ (800b204 <HAL_GPIO_Init+0x2f4>)
 800b0dc:	4293      	cmp	r3, r2
 800b0de:	d00d      	beq.n	800b0fc <HAL_GPIO_Init+0x1ec>
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	4a49      	ldr	r2, [pc, #292]	@ (800b208 <HAL_GPIO_Init+0x2f8>)
 800b0e4:	4293      	cmp	r3, r2
 800b0e6:	d007      	beq.n	800b0f8 <HAL_GPIO_Init+0x1e8>
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	4a48      	ldr	r2, [pc, #288]	@ (800b20c <HAL_GPIO_Init+0x2fc>)
 800b0ec:	4293      	cmp	r3, r2
 800b0ee:	d101      	bne.n	800b0f4 <HAL_GPIO_Init+0x1e4>
 800b0f0:	2305      	movs	r3, #5
 800b0f2:	e00a      	b.n	800b10a <HAL_GPIO_Init+0x1fa>
 800b0f4:	2306      	movs	r3, #6
 800b0f6:	e008      	b.n	800b10a <HAL_GPIO_Init+0x1fa>
 800b0f8:	2304      	movs	r3, #4
 800b0fa:	e006      	b.n	800b10a <HAL_GPIO_Init+0x1fa>
 800b0fc:	2303      	movs	r3, #3
 800b0fe:	e004      	b.n	800b10a <HAL_GPIO_Init+0x1fa>
 800b100:	2302      	movs	r3, #2
 800b102:	e002      	b.n	800b10a <HAL_GPIO_Init+0x1fa>
 800b104:	2301      	movs	r3, #1
 800b106:	e000      	b.n	800b10a <HAL_GPIO_Init+0x1fa>
 800b108:	2300      	movs	r3, #0
 800b10a:	697a      	ldr	r2, [r7, #20]
 800b10c:	f002 0203 	and.w	r2, r2, #3
 800b110:	0092      	lsls	r2, r2, #2
 800b112:	4093      	lsls	r3, r2
 800b114:	693a      	ldr	r2, [r7, #16]
 800b116:	4313      	orrs	r3, r2
 800b118:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b11a:	4937      	ldr	r1, [pc, #220]	@ (800b1f8 <HAL_GPIO_Init+0x2e8>)
 800b11c:	697b      	ldr	r3, [r7, #20]
 800b11e:	089b      	lsrs	r3, r3, #2
 800b120:	3302      	adds	r3, #2
 800b122:	693a      	ldr	r2, [r7, #16]
 800b124:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800b128:	4b39      	ldr	r3, [pc, #228]	@ (800b210 <HAL_GPIO_Init+0x300>)
 800b12a:	689b      	ldr	r3, [r3, #8]
 800b12c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	43db      	mvns	r3, r3
 800b132:	693a      	ldr	r2, [r7, #16]
 800b134:	4013      	ands	r3, r2
 800b136:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800b138:	683b      	ldr	r3, [r7, #0]
 800b13a:	685b      	ldr	r3, [r3, #4]
 800b13c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b140:	2b00      	cmp	r3, #0
 800b142:	d003      	beq.n	800b14c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800b144:	693a      	ldr	r2, [r7, #16]
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	4313      	orrs	r3, r2
 800b14a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800b14c:	4a30      	ldr	r2, [pc, #192]	@ (800b210 <HAL_GPIO_Init+0x300>)
 800b14e:	693b      	ldr	r3, [r7, #16]
 800b150:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800b152:	4b2f      	ldr	r3, [pc, #188]	@ (800b210 <HAL_GPIO_Init+0x300>)
 800b154:	68db      	ldr	r3, [r3, #12]
 800b156:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	43db      	mvns	r3, r3
 800b15c:	693a      	ldr	r2, [r7, #16]
 800b15e:	4013      	ands	r3, r2
 800b160:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800b162:	683b      	ldr	r3, [r7, #0]
 800b164:	685b      	ldr	r3, [r3, #4]
 800b166:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d003      	beq.n	800b176 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800b16e:	693a      	ldr	r2, [r7, #16]
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	4313      	orrs	r3, r2
 800b174:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800b176:	4a26      	ldr	r2, [pc, #152]	@ (800b210 <HAL_GPIO_Init+0x300>)
 800b178:	693b      	ldr	r3, [r7, #16]
 800b17a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800b17c:	4b24      	ldr	r3, [pc, #144]	@ (800b210 <HAL_GPIO_Init+0x300>)
 800b17e:	685b      	ldr	r3, [r3, #4]
 800b180:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	43db      	mvns	r3, r3
 800b186:	693a      	ldr	r2, [r7, #16]
 800b188:	4013      	ands	r3, r2
 800b18a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800b18c:	683b      	ldr	r3, [r7, #0]
 800b18e:	685b      	ldr	r3, [r3, #4]
 800b190:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b194:	2b00      	cmp	r3, #0
 800b196:	d003      	beq.n	800b1a0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800b198:	693a      	ldr	r2, [r7, #16]
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	4313      	orrs	r3, r2
 800b19e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800b1a0:	4a1b      	ldr	r2, [pc, #108]	@ (800b210 <HAL_GPIO_Init+0x300>)
 800b1a2:	693b      	ldr	r3, [r7, #16]
 800b1a4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800b1a6:	4b1a      	ldr	r3, [pc, #104]	@ (800b210 <HAL_GPIO_Init+0x300>)
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	43db      	mvns	r3, r3
 800b1b0:	693a      	ldr	r2, [r7, #16]
 800b1b2:	4013      	ands	r3, r2
 800b1b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800b1b6:	683b      	ldr	r3, [r7, #0]
 800b1b8:	685b      	ldr	r3, [r3, #4]
 800b1ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d003      	beq.n	800b1ca <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800b1c2:	693a      	ldr	r2, [r7, #16]
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	4313      	orrs	r3, r2
 800b1c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800b1ca:	4a11      	ldr	r2, [pc, #68]	@ (800b210 <HAL_GPIO_Init+0x300>)
 800b1cc:	693b      	ldr	r3, [r7, #16]
 800b1ce:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800b1d0:	697b      	ldr	r3, [r7, #20]
 800b1d2:	3301      	adds	r3, #1
 800b1d4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800b1d6:	683b      	ldr	r3, [r7, #0]
 800b1d8:	681a      	ldr	r2, [r3, #0]
 800b1da:	697b      	ldr	r3, [r7, #20]
 800b1dc:	fa22 f303 	lsr.w	r3, r2, r3
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	f47f ae9d 	bne.w	800af20 <HAL_GPIO_Init+0x10>
  }
}
 800b1e6:	bf00      	nop
 800b1e8:	bf00      	nop
 800b1ea:	371c      	adds	r7, #28
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f2:	4770      	bx	lr
 800b1f4:	40021000 	.word	0x40021000
 800b1f8:	40010000 	.word	0x40010000
 800b1fc:	48000400 	.word	0x48000400
 800b200:	48000800 	.word	0x48000800
 800b204:	48000c00 	.word	0x48000c00
 800b208:	48001000 	.word	0x48001000
 800b20c:	48001400 	.word	0x48001400
 800b210:	40010400 	.word	0x40010400

0800b214 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800b214:	b480      	push	{r7}
 800b216:	b085      	sub	sp, #20
 800b218:	af00      	add	r7, sp, #0
 800b21a:	6078      	str	r0, [r7, #4]
 800b21c:	460b      	mov	r3, r1
 800b21e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	691a      	ldr	r2, [r3, #16]
 800b224:	887b      	ldrh	r3, [r7, #2]
 800b226:	4013      	ands	r3, r2
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d002      	beq.n	800b232 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800b22c:	2301      	movs	r3, #1
 800b22e:	73fb      	strb	r3, [r7, #15]
 800b230:	e001      	b.n	800b236 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800b232:	2300      	movs	r3, #0
 800b234:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800b236:	7bfb      	ldrb	r3, [r7, #15]
}
 800b238:	4618      	mov	r0, r3
 800b23a:	3714      	adds	r7, #20
 800b23c:	46bd      	mov	sp, r7
 800b23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b242:	4770      	bx	lr

0800b244 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b244:	b480      	push	{r7}
 800b246:	b083      	sub	sp, #12
 800b248:	af00      	add	r7, sp, #0
 800b24a:	6078      	str	r0, [r7, #4]
 800b24c:	460b      	mov	r3, r1
 800b24e:	807b      	strh	r3, [r7, #2]
 800b250:	4613      	mov	r3, r2
 800b252:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800b254:	787b      	ldrb	r3, [r7, #1]
 800b256:	2b00      	cmp	r3, #0
 800b258:	d003      	beq.n	800b262 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800b25a:	887a      	ldrh	r2, [r7, #2]
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800b260:	e002      	b.n	800b268 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800b262:	887a      	ldrh	r2, [r7, #2]
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800b268:	bf00      	nop
 800b26a:	370c      	adds	r7, #12
 800b26c:	46bd      	mov	sp, r7
 800b26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b272:	4770      	bx	lr

0800b274 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800b274:	b480      	push	{r7}
 800b276:	b085      	sub	sp, #20
 800b278:	af00      	add	r7, sp, #0
 800b27a:	6078      	str	r0, [r7, #4]
 800b27c:	460b      	mov	r3, r1
 800b27e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	695b      	ldr	r3, [r3, #20]
 800b284:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800b286:	887a      	ldrh	r2, [r7, #2]
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	4013      	ands	r3, r2
 800b28c:	041a      	lsls	r2, r3, #16
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	43d9      	mvns	r1, r3
 800b292:	887b      	ldrh	r3, [r7, #2]
 800b294:	400b      	ands	r3, r1
 800b296:	431a      	orrs	r2, r3
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	619a      	str	r2, [r3, #24]
}
 800b29c:	bf00      	nop
 800b29e:	3714      	adds	r7, #20
 800b2a0:	46bd      	mov	sp, r7
 800b2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a6:	4770      	bx	lr

0800b2a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800b2a8:	b580      	push	{r7, lr}
 800b2aa:	b082      	sub	sp, #8
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	4603      	mov	r3, r0
 800b2b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800b2b2:	4b08      	ldr	r3, [pc, #32]	@ (800b2d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800b2b4:	695a      	ldr	r2, [r3, #20]
 800b2b6:	88fb      	ldrh	r3, [r7, #6]
 800b2b8:	4013      	ands	r3, r2
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d006      	beq.n	800b2cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800b2be:	4a05      	ldr	r2, [pc, #20]	@ (800b2d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800b2c0:	88fb      	ldrh	r3, [r7, #6]
 800b2c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800b2c4:	88fb      	ldrh	r3, [r7, #6]
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	f7fb fe80 	bl	8006fcc <HAL_GPIO_EXTI_Callback>
  }
}
 800b2cc:	bf00      	nop
 800b2ce:	3708      	adds	r7, #8
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	bd80      	pop	{r7, pc}
 800b2d4:	40010400 	.word	0x40010400

0800b2d8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800b2d8:	b480      	push	{r7}
 800b2da:	b085      	sub	sp, #20
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d141      	bne.n	800b36a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800b2e6:	4b4b      	ldr	r3, [pc, #300]	@ (800b414 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800b2ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b2f2:	d131      	bne.n	800b358 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b2f4:	4b47      	ldr	r3, [pc, #284]	@ (800b414 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b2f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b2fa:	4a46      	ldr	r2, [pc, #280]	@ (800b414 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b2fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b300:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800b304:	4b43      	ldr	r3, [pc, #268]	@ (800b414 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800b30c:	4a41      	ldr	r2, [pc, #260]	@ (800b414 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b30e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800b312:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800b314:	4b40      	ldr	r3, [pc, #256]	@ (800b418 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	2232      	movs	r2, #50	@ 0x32
 800b31a:	fb02 f303 	mul.w	r3, r2, r3
 800b31e:	4a3f      	ldr	r2, [pc, #252]	@ (800b41c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800b320:	fba2 2303 	umull	r2, r3, r2, r3
 800b324:	0c9b      	lsrs	r3, r3, #18
 800b326:	3301      	adds	r3, #1
 800b328:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b32a:	e002      	b.n	800b332 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	3b01      	subs	r3, #1
 800b330:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b332:	4b38      	ldr	r3, [pc, #224]	@ (800b414 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b334:	695b      	ldr	r3, [r3, #20]
 800b336:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b33a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b33e:	d102      	bne.n	800b346 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d1f2      	bne.n	800b32c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800b346:	4b33      	ldr	r3, [pc, #204]	@ (800b414 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b348:	695b      	ldr	r3, [r3, #20]
 800b34a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b34e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b352:	d158      	bne.n	800b406 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800b354:	2303      	movs	r3, #3
 800b356:	e057      	b.n	800b408 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b358:	4b2e      	ldr	r3, [pc, #184]	@ (800b414 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b35a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b35e:	4a2d      	ldr	r2, [pc, #180]	@ (800b414 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b360:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b364:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800b368:	e04d      	b.n	800b406 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b370:	d141      	bne.n	800b3f6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800b372:	4b28      	ldr	r3, [pc, #160]	@ (800b414 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800b37a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b37e:	d131      	bne.n	800b3e4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b380:	4b24      	ldr	r3, [pc, #144]	@ (800b414 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b382:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b386:	4a23      	ldr	r2, [pc, #140]	@ (800b414 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b388:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b38c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800b390:	4b20      	ldr	r3, [pc, #128]	@ (800b414 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800b398:	4a1e      	ldr	r2, [pc, #120]	@ (800b414 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b39a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800b39e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800b3a0:	4b1d      	ldr	r3, [pc, #116]	@ (800b418 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	2232      	movs	r2, #50	@ 0x32
 800b3a6:	fb02 f303 	mul.w	r3, r2, r3
 800b3aa:	4a1c      	ldr	r2, [pc, #112]	@ (800b41c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800b3ac:	fba2 2303 	umull	r2, r3, r2, r3
 800b3b0:	0c9b      	lsrs	r3, r3, #18
 800b3b2:	3301      	adds	r3, #1
 800b3b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b3b6:	e002      	b.n	800b3be <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	3b01      	subs	r3, #1
 800b3bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b3be:	4b15      	ldr	r3, [pc, #84]	@ (800b414 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b3c0:	695b      	ldr	r3, [r3, #20]
 800b3c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b3c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b3ca:	d102      	bne.n	800b3d2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d1f2      	bne.n	800b3b8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800b3d2:	4b10      	ldr	r3, [pc, #64]	@ (800b414 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b3d4:	695b      	ldr	r3, [r3, #20]
 800b3d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b3da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b3de:	d112      	bne.n	800b406 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800b3e0:	2303      	movs	r3, #3
 800b3e2:	e011      	b.n	800b408 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b3e4:	4b0b      	ldr	r3, [pc, #44]	@ (800b414 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b3e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b3ea:	4a0a      	ldr	r2, [pc, #40]	@ (800b414 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b3ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b3f0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800b3f4:	e007      	b.n	800b406 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800b3f6:	4b07      	ldr	r3, [pc, #28]	@ (800b414 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800b3fe:	4a05      	ldr	r2, [pc, #20]	@ (800b414 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b400:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800b404:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800b406:	2300      	movs	r3, #0
}
 800b408:	4618      	mov	r0, r3
 800b40a:	3714      	adds	r7, #20
 800b40c:	46bd      	mov	sp, r7
 800b40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b412:	4770      	bx	lr
 800b414:	40007000 	.word	0x40007000
 800b418:	20000130 	.word	0x20000130
 800b41c:	431bde83 	.word	0x431bde83

0800b420 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800b420:	b480      	push	{r7}
 800b422:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800b424:	4b05      	ldr	r3, [pc, #20]	@ (800b43c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800b426:	689b      	ldr	r3, [r3, #8]
 800b428:	4a04      	ldr	r2, [pc, #16]	@ (800b43c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800b42a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800b42e:	6093      	str	r3, [r2, #8]
}
 800b430:	bf00      	nop
 800b432:	46bd      	mov	sp, r7
 800b434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b438:	4770      	bx	lr
 800b43a:	bf00      	nop
 800b43c:	40007000 	.word	0x40007000

0800b440 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b440:	b580      	push	{r7, lr}
 800b442:	b088      	sub	sp, #32
 800b444:	af00      	add	r7, sp, #0
 800b446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d101      	bne.n	800b452 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b44e:	2301      	movs	r3, #1
 800b450:	e2fe      	b.n	800ba50 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	f003 0301 	and.w	r3, r3, #1
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d075      	beq.n	800b54a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b45e:	4b97      	ldr	r3, [pc, #604]	@ (800b6bc <HAL_RCC_OscConfig+0x27c>)
 800b460:	689b      	ldr	r3, [r3, #8]
 800b462:	f003 030c 	and.w	r3, r3, #12
 800b466:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b468:	4b94      	ldr	r3, [pc, #592]	@ (800b6bc <HAL_RCC_OscConfig+0x27c>)
 800b46a:	68db      	ldr	r3, [r3, #12]
 800b46c:	f003 0303 	and.w	r3, r3, #3
 800b470:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800b472:	69bb      	ldr	r3, [r7, #24]
 800b474:	2b0c      	cmp	r3, #12
 800b476:	d102      	bne.n	800b47e <HAL_RCC_OscConfig+0x3e>
 800b478:	697b      	ldr	r3, [r7, #20]
 800b47a:	2b03      	cmp	r3, #3
 800b47c:	d002      	beq.n	800b484 <HAL_RCC_OscConfig+0x44>
 800b47e:	69bb      	ldr	r3, [r7, #24]
 800b480:	2b08      	cmp	r3, #8
 800b482:	d10b      	bne.n	800b49c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b484:	4b8d      	ldr	r3, [pc, #564]	@ (800b6bc <HAL_RCC_OscConfig+0x27c>)
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d05b      	beq.n	800b548 <HAL_RCC_OscConfig+0x108>
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	685b      	ldr	r3, [r3, #4]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d157      	bne.n	800b548 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800b498:	2301      	movs	r3, #1
 800b49a:	e2d9      	b.n	800ba50 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	685b      	ldr	r3, [r3, #4]
 800b4a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b4a4:	d106      	bne.n	800b4b4 <HAL_RCC_OscConfig+0x74>
 800b4a6:	4b85      	ldr	r3, [pc, #532]	@ (800b6bc <HAL_RCC_OscConfig+0x27c>)
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	4a84      	ldr	r2, [pc, #528]	@ (800b6bc <HAL_RCC_OscConfig+0x27c>)
 800b4ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b4b0:	6013      	str	r3, [r2, #0]
 800b4b2:	e01d      	b.n	800b4f0 <HAL_RCC_OscConfig+0xb0>
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	685b      	ldr	r3, [r3, #4]
 800b4b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b4bc:	d10c      	bne.n	800b4d8 <HAL_RCC_OscConfig+0x98>
 800b4be:	4b7f      	ldr	r3, [pc, #508]	@ (800b6bc <HAL_RCC_OscConfig+0x27c>)
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	4a7e      	ldr	r2, [pc, #504]	@ (800b6bc <HAL_RCC_OscConfig+0x27c>)
 800b4c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800b4c8:	6013      	str	r3, [r2, #0]
 800b4ca:	4b7c      	ldr	r3, [pc, #496]	@ (800b6bc <HAL_RCC_OscConfig+0x27c>)
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	4a7b      	ldr	r2, [pc, #492]	@ (800b6bc <HAL_RCC_OscConfig+0x27c>)
 800b4d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b4d4:	6013      	str	r3, [r2, #0]
 800b4d6:	e00b      	b.n	800b4f0 <HAL_RCC_OscConfig+0xb0>
 800b4d8:	4b78      	ldr	r3, [pc, #480]	@ (800b6bc <HAL_RCC_OscConfig+0x27c>)
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	4a77      	ldr	r2, [pc, #476]	@ (800b6bc <HAL_RCC_OscConfig+0x27c>)
 800b4de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b4e2:	6013      	str	r3, [r2, #0]
 800b4e4:	4b75      	ldr	r3, [pc, #468]	@ (800b6bc <HAL_RCC_OscConfig+0x27c>)
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	4a74      	ldr	r2, [pc, #464]	@ (800b6bc <HAL_RCC_OscConfig+0x27c>)
 800b4ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b4ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	685b      	ldr	r3, [r3, #4]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d013      	beq.n	800b520 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b4f8:	f7fd fc44 	bl	8008d84 <HAL_GetTick>
 800b4fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b4fe:	e008      	b.n	800b512 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b500:	f7fd fc40 	bl	8008d84 <HAL_GetTick>
 800b504:	4602      	mov	r2, r0
 800b506:	693b      	ldr	r3, [r7, #16]
 800b508:	1ad3      	subs	r3, r2, r3
 800b50a:	2b64      	cmp	r3, #100	@ 0x64
 800b50c:	d901      	bls.n	800b512 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800b50e:	2303      	movs	r3, #3
 800b510:	e29e      	b.n	800ba50 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b512:	4b6a      	ldr	r3, [pc, #424]	@ (800b6bc <HAL_RCC_OscConfig+0x27c>)
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d0f0      	beq.n	800b500 <HAL_RCC_OscConfig+0xc0>
 800b51e:	e014      	b.n	800b54a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b520:	f7fd fc30 	bl	8008d84 <HAL_GetTick>
 800b524:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b526:	e008      	b.n	800b53a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b528:	f7fd fc2c 	bl	8008d84 <HAL_GetTick>
 800b52c:	4602      	mov	r2, r0
 800b52e:	693b      	ldr	r3, [r7, #16]
 800b530:	1ad3      	subs	r3, r2, r3
 800b532:	2b64      	cmp	r3, #100	@ 0x64
 800b534:	d901      	bls.n	800b53a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800b536:	2303      	movs	r3, #3
 800b538:	e28a      	b.n	800ba50 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b53a:	4b60      	ldr	r3, [pc, #384]	@ (800b6bc <HAL_RCC_OscConfig+0x27c>)
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b542:	2b00      	cmp	r3, #0
 800b544:	d1f0      	bne.n	800b528 <HAL_RCC_OscConfig+0xe8>
 800b546:	e000      	b.n	800b54a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b548:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	f003 0302 	and.w	r3, r3, #2
 800b552:	2b00      	cmp	r3, #0
 800b554:	d075      	beq.n	800b642 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b556:	4b59      	ldr	r3, [pc, #356]	@ (800b6bc <HAL_RCC_OscConfig+0x27c>)
 800b558:	689b      	ldr	r3, [r3, #8]
 800b55a:	f003 030c 	and.w	r3, r3, #12
 800b55e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b560:	4b56      	ldr	r3, [pc, #344]	@ (800b6bc <HAL_RCC_OscConfig+0x27c>)
 800b562:	68db      	ldr	r3, [r3, #12]
 800b564:	f003 0303 	and.w	r3, r3, #3
 800b568:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800b56a:	69bb      	ldr	r3, [r7, #24]
 800b56c:	2b0c      	cmp	r3, #12
 800b56e:	d102      	bne.n	800b576 <HAL_RCC_OscConfig+0x136>
 800b570:	697b      	ldr	r3, [r7, #20]
 800b572:	2b02      	cmp	r3, #2
 800b574:	d002      	beq.n	800b57c <HAL_RCC_OscConfig+0x13c>
 800b576:	69bb      	ldr	r3, [r7, #24]
 800b578:	2b04      	cmp	r3, #4
 800b57a:	d11f      	bne.n	800b5bc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b57c:	4b4f      	ldr	r3, [pc, #316]	@ (800b6bc <HAL_RCC_OscConfig+0x27c>)
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b584:	2b00      	cmp	r3, #0
 800b586:	d005      	beq.n	800b594 <HAL_RCC_OscConfig+0x154>
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	68db      	ldr	r3, [r3, #12]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d101      	bne.n	800b594 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800b590:	2301      	movs	r3, #1
 800b592:	e25d      	b.n	800ba50 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b594:	4b49      	ldr	r3, [pc, #292]	@ (800b6bc <HAL_RCC_OscConfig+0x27c>)
 800b596:	685b      	ldr	r3, [r3, #4]
 800b598:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	691b      	ldr	r3, [r3, #16]
 800b5a0:	061b      	lsls	r3, r3, #24
 800b5a2:	4946      	ldr	r1, [pc, #280]	@ (800b6bc <HAL_RCC_OscConfig+0x27c>)
 800b5a4:	4313      	orrs	r3, r2
 800b5a6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800b5a8:	4b45      	ldr	r3, [pc, #276]	@ (800b6c0 <HAL_RCC_OscConfig+0x280>)
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	f7fd fb9d 	bl	8008cec <HAL_InitTick>
 800b5b2:	4603      	mov	r3, r0
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d043      	beq.n	800b640 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800b5b8:	2301      	movs	r3, #1
 800b5ba:	e249      	b.n	800ba50 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	68db      	ldr	r3, [r3, #12]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d023      	beq.n	800b60c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b5c4:	4b3d      	ldr	r3, [pc, #244]	@ (800b6bc <HAL_RCC_OscConfig+0x27c>)
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	4a3c      	ldr	r2, [pc, #240]	@ (800b6bc <HAL_RCC_OscConfig+0x27c>)
 800b5ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b5ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b5d0:	f7fd fbd8 	bl	8008d84 <HAL_GetTick>
 800b5d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b5d6:	e008      	b.n	800b5ea <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b5d8:	f7fd fbd4 	bl	8008d84 <HAL_GetTick>
 800b5dc:	4602      	mov	r2, r0
 800b5de:	693b      	ldr	r3, [r7, #16]
 800b5e0:	1ad3      	subs	r3, r2, r3
 800b5e2:	2b02      	cmp	r3, #2
 800b5e4:	d901      	bls.n	800b5ea <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800b5e6:	2303      	movs	r3, #3
 800b5e8:	e232      	b.n	800ba50 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b5ea:	4b34      	ldr	r3, [pc, #208]	@ (800b6bc <HAL_RCC_OscConfig+0x27c>)
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d0f0      	beq.n	800b5d8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b5f6:	4b31      	ldr	r3, [pc, #196]	@ (800b6bc <HAL_RCC_OscConfig+0x27c>)
 800b5f8:	685b      	ldr	r3, [r3, #4]
 800b5fa:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	691b      	ldr	r3, [r3, #16]
 800b602:	061b      	lsls	r3, r3, #24
 800b604:	492d      	ldr	r1, [pc, #180]	@ (800b6bc <HAL_RCC_OscConfig+0x27c>)
 800b606:	4313      	orrs	r3, r2
 800b608:	604b      	str	r3, [r1, #4]
 800b60a:	e01a      	b.n	800b642 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b60c:	4b2b      	ldr	r3, [pc, #172]	@ (800b6bc <HAL_RCC_OscConfig+0x27c>)
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	4a2a      	ldr	r2, [pc, #168]	@ (800b6bc <HAL_RCC_OscConfig+0x27c>)
 800b612:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b616:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b618:	f7fd fbb4 	bl	8008d84 <HAL_GetTick>
 800b61c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b61e:	e008      	b.n	800b632 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b620:	f7fd fbb0 	bl	8008d84 <HAL_GetTick>
 800b624:	4602      	mov	r2, r0
 800b626:	693b      	ldr	r3, [r7, #16]
 800b628:	1ad3      	subs	r3, r2, r3
 800b62a:	2b02      	cmp	r3, #2
 800b62c:	d901      	bls.n	800b632 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800b62e:	2303      	movs	r3, #3
 800b630:	e20e      	b.n	800ba50 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b632:	4b22      	ldr	r3, [pc, #136]	@ (800b6bc <HAL_RCC_OscConfig+0x27c>)
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d1f0      	bne.n	800b620 <HAL_RCC_OscConfig+0x1e0>
 800b63e:	e000      	b.n	800b642 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b640:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	f003 0308 	and.w	r3, r3, #8
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d041      	beq.n	800b6d2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	695b      	ldr	r3, [r3, #20]
 800b652:	2b00      	cmp	r3, #0
 800b654:	d01c      	beq.n	800b690 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b656:	4b19      	ldr	r3, [pc, #100]	@ (800b6bc <HAL_RCC_OscConfig+0x27c>)
 800b658:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b65c:	4a17      	ldr	r2, [pc, #92]	@ (800b6bc <HAL_RCC_OscConfig+0x27c>)
 800b65e:	f043 0301 	orr.w	r3, r3, #1
 800b662:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b666:	f7fd fb8d 	bl	8008d84 <HAL_GetTick>
 800b66a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b66c:	e008      	b.n	800b680 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b66e:	f7fd fb89 	bl	8008d84 <HAL_GetTick>
 800b672:	4602      	mov	r2, r0
 800b674:	693b      	ldr	r3, [r7, #16]
 800b676:	1ad3      	subs	r3, r2, r3
 800b678:	2b02      	cmp	r3, #2
 800b67a:	d901      	bls.n	800b680 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800b67c:	2303      	movs	r3, #3
 800b67e:	e1e7      	b.n	800ba50 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b680:	4b0e      	ldr	r3, [pc, #56]	@ (800b6bc <HAL_RCC_OscConfig+0x27c>)
 800b682:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b686:	f003 0302 	and.w	r3, r3, #2
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d0ef      	beq.n	800b66e <HAL_RCC_OscConfig+0x22e>
 800b68e:	e020      	b.n	800b6d2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b690:	4b0a      	ldr	r3, [pc, #40]	@ (800b6bc <HAL_RCC_OscConfig+0x27c>)
 800b692:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b696:	4a09      	ldr	r2, [pc, #36]	@ (800b6bc <HAL_RCC_OscConfig+0x27c>)
 800b698:	f023 0301 	bic.w	r3, r3, #1
 800b69c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b6a0:	f7fd fb70 	bl	8008d84 <HAL_GetTick>
 800b6a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b6a6:	e00d      	b.n	800b6c4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b6a8:	f7fd fb6c 	bl	8008d84 <HAL_GetTick>
 800b6ac:	4602      	mov	r2, r0
 800b6ae:	693b      	ldr	r3, [r7, #16]
 800b6b0:	1ad3      	subs	r3, r2, r3
 800b6b2:	2b02      	cmp	r3, #2
 800b6b4:	d906      	bls.n	800b6c4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800b6b6:	2303      	movs	r3, #3
 800b6b8:	e1ca      	b.n	800ba50 <HAL_RCC_OscConfig+0x610>
 800b6ba:	bf00      	nop
 800b6bc:	40021000 	.word	0x40021000
 800b6c0:	20000134 	.word	0x20000134
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b6c4:	4b8c      	ldr	r3, [pc, #560]	@ (800b8f8 <HAL_RCC_OscConfig+0x4b8>)
 800b6c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b6ca:	f003 0302 	and.w	r3, r3, #2
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d1ea      	bne.n	800b6a8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	f003 0304 	and.w	r3, r3, #4
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	f000 80a6 	beq.w	800b82c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800b6e4:	4b84      	ldr	r3, [pc, #528]	@ (800b8f8 <HAL_RCC_OscConfig+0x4b8>)
 800b6e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b6e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d101      	bne.n	800b6f4 <HAL_RCC_OscConfig+0x2b4>
 800b6f0:	2301      	movs	r3, #1
 800b6f2:	e000      	b.n	800b6f6 <HAL_RCC_OscConfig+0x2b6>
 800b6f4:	2300      	movs	r3, #0
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d00d      	beq.n	800b716 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b6fa:	4b7f      	ldr	r3, [pc, #508]	@ (800b8f8 <HAL_RCC_OscConfig+0x4b8>)
 800b6fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b6fe:	4a7e      	ldr	r2, [pc, #504]	@ (800b8f8 <HAL_RCC_OscConfig+0x4b8>)
 800b700:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b704:	6593      	str	r3, [r2, #88]	@ 0x58
 800b706:	4b7c      	ldr	r3, [pc, #496]	@ (800b8f8 <HAL_RCC_OscConfig+0x4b8>)
 800b708:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b70a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b70e:	60fb      	str	r3, [r7, #12]
 800b710:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800b712:	2301      	movs	r3, #1
 800b714:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b716:	4b79      	ldr	r3, [pc, #484]	@ (800b8fc <HAL_RCC_OscConfig+0x4bc>)
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d118      	bne.n	800b754 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b722:	4b76      	ldr	r3, [pc, #472]	@ (800b8fc <HAL_RCC_OscConfig+0x4bc>)
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	4a75      	ldr	r2, [pc, #468]	@ (800b8fc <HAL_RCC_OscConfig+0x4bc>)
 800b728:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b72c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b72e:	f7fd fb29 	bl	8008d84 <HAL_GetTick>
 800b732:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b734:	e008      	b.n	800b748 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b736:	f7fd fb25 	bl	8008d84 <HAL_GetTick>
 800b73a:	4602      	mov	r2, r0
 800b73c:	693b      	ldr	r3, [r7, #16]
 800b73e:	1ad3      	subs	r3, r2, r3
 800b740:	2b02      	cmp	r3, #2
 800b742:	d901      	bls.n	800b748 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800b744:	2303      	movs	r3, #3
 800b746:	e183      	b.n	800ba50 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b748:	4b6c      	ldr	r3, [pc, #432]	@ (800b8fc <HAL_RCC_OscConfig+0x4bc>)
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b750:	2b00      	cmp	r3, #0
 800b752:	d0f0      	beq.n	800b736 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	689b      	ldr	r3, [r3, #8]
 800b758:	2b01      	cmp	r3, #1
 800b75a:	d108      	bne.n	800b76e <HAL_RCC_OscConfig+0x32e>
 800b75c:	4b66      	ldr	r3, [pc, #408]	@ (800b8f8 <HAL_RCC_OscConfig+0x4b8>)
 800b75e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b762:	4a65      	ldr	r2, [pc, #404]	@ (800b8f8 <HAL_RCC_OscConfig+0x4b8>)
 800b764:	f043 0301 	orr.w	r3, r3, #1
 800b768:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800b76c:	e024      	b.n	800b7b8 <HAL_RCC_OscConfig+0x378>
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	689b      	ldr	r3, [r3, #8]
 800b772:	2b05      	cmp	r3, #5
 800b774:	d110      	bne.n	800b798 <HAL_RCC_OscConfig+0x358>
 800b776:	4b60      	ldr	r3, [pc, #384]	@ (800b8f8 <HAL_RCC_OscConfig+0x4b8>)
 800b778:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b77c:	4a5e      	ldr	r2, [pc, #376]	@ (800b8f8 <HAL_RCC_OscConfig+0x4b8>)
 800b77e:	f043 0304 	orr.w	r3, r3, #4
 800b782:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800b786:	4b5c      	ldr	r3, [pc, #368]	@ (800b8f8 <HAL_RCC_OscConfig+0x4b8>)
 800b788:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b78c:	4a5a      	ldr	r2, [pc, #360]	@ (800b8f8 <HAL_RCC_OscConfig+0x4b8>)
 800b78e:	f043 0301 	orr.w	r3, r3, #1
 800b792:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800b796:	e00f      	b.n	800b7b8 <HAL_RCC_OscConfig+0x378>
 800b798:	4b57      	ldr	r3, [pc, #348]	@ (800b8f8 <HAL_RCC_OscConfig+0x4b8>)
 800b79a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b79e:	4a56      	ldr	r2, [pc, #344]	@ (800b8f8 <HAL_RCC_OscConfig+0x4b8>)
 800b7a0:	f023 0301 	bic.w	r3, r3, #1
 800b7a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800b7a8:	4b53      	ldr	r3, [pc, #332]	@ (800b8f8 <HAL_RCC_OscConfig+0x4b8>)
 800b7aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b7ae:	4a52      	ldr	r2, [pc, #328]	@ (800b8f8 <HAL_RCC_OscConfig+0x4b8>)
 800b7b0:	f023 0304 	bic.w	r3, r3, #4
 800b7b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	689b      	ldr	r3, [r3, #8]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d016      	beq.n	800b7ee <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b7c0:	f7fd fae0 	bl	8008d84 <HAL_GetTick>
 800b7c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b7c6:	e00a      	b.n	800b7de <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b7c8:	f7fd fadc 	bl	8008d84 <HAL_GetTick>
 800b7cc:	4602      	mov	r2, r0
 800b7ce:	693b      	ldr	r3, [r7, #16]
 800b7d0:	1ad3      	subs	r3, r2, r3
 800b7d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b7d6:	4293      	cmp	r3, r2
 800b7d8:	d901      	bls.n	800b7de <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800b7da:	2303      	movs	r3, #3
 800b7dc:	e138      	b.n	800ba50 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b7de:	4b46      	ldr	r3, [pc, #280]	@ (800b8f8 <HAL_RCC_OscConfig+0x4b8>)
 800b7e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b7e4:	f003 0302 	and.w	r3, r3, #2
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d0ed      	beq.n	800b7c8 <HAL_RCC_OscConfig+0x388>
 800b7ec:	e015      	b.n	800b81a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b7ee:	f7fd fac9 	bl	8008d84 <HAL_GetTick>
 800b7f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b7f4:	e00a      	b.n	800b80c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b7f6:	f7fd fac5 	bl	8008d84 <HAL_GetTick>
 800b7fa:	4602      	mov	r2, r0
 800b7fc:	693b      	ldr	r3, [r7, #16]
 800b7fe:	1ad3      	subs	r3, r2, r3
 800b800:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b804:	4293      	cmp	r3, r2
 800b806:	d901      	bls.n	800b80c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800b808:	2303      	movs	r3, #3
 800b80a:	e121      	b.n	800ba50 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b80c:	4b3a      	ldr	r3, [pc, #232]	@ (800b8f8 <HAL_RCC_OscConfig+0x4b8>)
 800b80e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b812:	f003 0302 	and.w	r3, r3, #2
 800b816:	2b00      	cmp	r3, #0
 800b818:	d1ed      	bne.n	800b7f6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800b81a:	7ffb      	ldrb	r3, [r7, #31]
 800b81c:	2b01      	cmp	r3, #1
 800b81e:	d105      	bne.n	800b82c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b820:	4b35      	ldr	r3, [pc, #212]	@ (800b8f8 <HAL_RCC_OscConfig+0x4b8>)
 800b822:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b824:	4a34      	ldr	r2, [pc, #208]	@ (800b8f8 <HAL_RCC_OscConfig+0x4b8>)
 800b826:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b82a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	f003 0320 	and.w	r3, r3, #32
 800b834:	2b00      	cmp	r3, #0
 800b836:	d03c      	beq.n	800b8b2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	699b      	ldr	r3, [r3, #24]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d01c      	beq.n	800b87a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800b840:	4b2d      	ldr	r3, [pc, #180]	@ (800b8f8 <HAL_RCC_OscConfig+0x4b8>)
 800b842:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b846:	4a2c      	ldr	r2, [pc, #176]	@ (800b8f8 <HAL_RCC_OscConfig+0x4b8>)
 800b848:	f043 0301 	orr.w	r3, r3, #1
 800b84c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b850:	f7fd fa98 	bl	8008d84 <HAL_GetTick>
 800b854:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800b856:	e008      	b.n	800b86a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b858:	f7fd fa94 	bl	8008d84 <HAL_GetTick>
 800b85c:	4602      	mov	r2, r0
 800b85e:	693b      	ldr	r3, [r7, #16]
 800b860:	1ad3      	subs	r3, r2, r3
 800b862:	2b02      	cmp	r3, #2
 800b864:	d901      	bls.n	800b86a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800b866:	2303      	movs	r3, #3
 800b868:	e0f2      	b.n	800ba50 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800b86a:	4b23      	ldr	r3, [pc, #140]	@ (800b8f8 <HAL_RCC_OscConfig+0x4b8>)
 800b86c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b870:	f003 0302 	and.w	r3, r3, #2
 800b874:	2b00      	cmp	r3, #0
 800b876:	d0ef      	beq.n	800b858 <HAL_RCC_OscConfig+0x418>
 800b878:	e01b      	b.n	800b8b2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800b87a:	4b1f      	ldr	r3, [pc, #124]	@ (800b8f8 <HAL_RCC_OscConfig+0x4b8>)
 800b87c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b880:	4a1d      	ldr	r2, [pc, #116]	@ (800b8f8 <HAL_RCC_OscConfig+0x4b8>)
 800b882:	f023 0301 	bic.w	r3, r3, #1
 800b886:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b88a:	f7fd fa7b 	bl	8008d84 <HAL_GetTick>
 800b88e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800b890:	e008      	b.n	800b8a4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b892:	f7fd fa77 	bl	8008d84 <HAL_GetTick>
 800b896:	4602      	mov	r2, r0
 800b898:	693b      	ldr	r3, [r7, #16]
 800b89a:	1ad3      	subs	r3, r2, r3
 800b89c:	2b02      	cmp	r3, #2
 800b89e:	d901      	bls.n	800b8a4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800b8a0:	2303      	movs	r3, #3
 800b8a2:	e0d5      	b.n	800ba50 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800b8a4:	4b14      	ldr	r3, [pc, #80]	@ (800b8f8 <HAL_RCC_OscConfig+0x4b8>)
 800b8a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b8aa:	f003 0302 	and.w	r3, r3, #2
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d1ef      	bne.n	800b892 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	69db      	ldr	r3, [r3, #28]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	f000 80c9 	beq.w	800ba4e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b8bc:	4b0e      	ldr	r3, [pc, #56]	@ (800b8f8 <HAL_RCC_OscConfig+0x4b8>)
 800b8be:	689b      	ldr	r3, [r3, #8]
 800b8c0:	f003 030c 	and.w	r3, r3, #12
 800b8c4:	2b0c      	cmp	r3, #12
 800b8c6:	f000 8083 	beq.w	800b9d0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	69db      	ldr	r3, [r3, #28]
 800b8ce:	2b02      	cmp	r3, #2
 800b8d0:	d15e      	bne.n	800b990 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b8d2:	4b09      	ldr	r3, [pc, #36]	@ (800b8f8 <HAL_RCC_OscConfig+0x4b8>)
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	4a08      	ldr	r2, [pc, #32]	@ (800b8f8 <HAL_RCC_OscConfig+0x4b8>)
 800b8d8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b8dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b8de:	f7fd fa51 	bl	8008d84 <HAL_GetTick>
 800b8e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b8e4:	e00c      	b.n	800b900 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b8e6:	f7fd fa4d 	bl	8008d84 <HAL_GetTick>
 800b8ea:	4602      	mov	r2, r0
 800b8ec:	693b      	ldr	r3, [r7, #16]
 800b8ee:	1ad3      	subs	r3, r2, r3
 800b8f0:	2b02      	cmp	r3, #2
 800b8f2:	d905      	bls.n	800b900 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800b8f4:	2303      	movs	r3, #3
 800b8f6:	e0ab      	b.n	800ba50 <HAL_RCC_OscConfig+0x610>
 800b8f8:	40021000 	.word	0x40021000
 800b8fc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b900:	4b55      	ldr	r3, [pc, #340]	@ (800ba58 <HAL_RCC_OscConfig+0x618>)
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d1ec      	bne.n	800b8e6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b90c:	4b52      	ldr	r3, [pc, #328]	@ (800ba58 <HAL_RCC_OscConfig+0x618>)
 800b90e:	68da      	ldr	r2, [r3, #12]
 800b910:	4b52      	ldr	r3, [pc, #328]	@ (800ba5c <HAL_RCC_OscConfig+0x61c>)
 800b912:	4013      	ands	r3, r2
 800b914:	687a      	ldr	r2, [r7, #4]
 800b916:	6a11      	ldr	r1, [r2, #32]
 800b918:	687a      	ldr	r2, [r7, #4]
 800b91a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800b91c:	3a01      	subs	r2, #1
 800b91e:	0112      	lsls	r2, r2, #4
 800b920:	4311      	orrs	r1, r2
 800b922:	687a      	ldr	r2, [r7, #4]
 800b924:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800b926:	0212      	lsls	r2, r2, #8
 800b928:	4311      	orrs	r1, r2
 800b92a:	687a      	ldr	r2, [r7, #4]
 800b92c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800b92e:	0852      	lsrs	r2, r2, #1
 800b930:	3a01      	subs	r2, #1
 800b932:	0552      	lsls	r2, r2, #21
 800b934:	4311      	orrs	r1, r2
 800b936:	687a      	ldr	r2, [r7, #4]
 800b938:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800b93a:	0852      	lsrs	r2, r2, #1
 800b93c:	3a01      	subs	r2, #1
 800b93e:	0652      	lsls	r2, r2, #25
 800b940:	4311      	orrs	r1, r2
 800b942:	687a      	ldr	r2, [r7, #4]
 800b944:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800b946:	06d2      	lsls	r2, r2, #27
 800b948:	430a      	orrs	r2, r1
 800b94a:	4943      	ldr	r1, [pc, #268]	@ (800ba58 <HAL_RCC_OscConfig+0x618>)
 800b94c:	4313      	orrs	r3, r2
 800b94e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b950:	4b41      	ldr	r3, [pc, #260]	@ (800ba58 <HAL_RCC_OscConfig+0x618>)
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	4a40      	ldr	r2, [pc, #256]	@ (800ba58 <HAL_RCC_OscConfig+0x618>)
 800b956:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b95a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800b95c:	4b3e      	ldr	r3, [pc, #248]	@ (800ba58 <HAL_RCC_OscConfig+0x618>)
 800b95e:	68db      	ldr	r3, [r3, #12]
 800b960:	4a3d      	ldr	r2, [pc, #244]	@ (800ba58 <HAL_RCC_OscConfig+0x618>)
 800b962:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b966:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b968:	f7fd fa0c 	bl	8008d84 <HAL_GetTick>
 800b96c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b96e:	e008      	b.n	800b982 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b970:	f7fd fa08 	bl	8008d84 <HAL_GetTick>
 800b974:	4602      	mov	r2, r0
 800b976:	693b      	ldr	r3, [r7, #16]
 800b978:	1ad3      	subs	r3, r2, r3
 800b97a:	2b02      	cmp	r3, #2
 800b97c:	d901      	bls.n	800b982 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800b97e:	2303      	movs	r3, #3
 800b980:	e066      	b.n	800ba50 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b982:	4b35      	ldr	r3, [pc, #212]	@ (800ba58 <HAL_RCC_OscConfig+0x618>)
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d0f0      	beq.n	800b970 <HAL_RCC_OscConfig+0x530>
 800b98e:	e05e      	b.n	800ba4e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b990:	4b31      	ldr	r3, [pc, #196]	@ (800ba58 <HAL_RCC_OscConfig+0x618>)
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	4a30      	ldr	r2, [pc, #192]	@ (800ba58 <HAL_RCC_OscConfig+0x618>)
 800b996:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b99a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b99c:	f7fd f9f2 	bl	8008d84 <HAL_GetTick>
 800b9a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b9a2:	e008      	b.n	800b9b6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b9a4:	f7fd f9ee 	bl	8008d84 <HAL_GetTick>
 800b9a8:	4602      	mov	r2, r0
 800b9aa:	693b      	ldr	r3, [r7, #16]
 800b9ac:	1ad3      	subs	r3, r2, r3
 800b9ae:	2b02      	cmp	r3, #2
 800b9b0:	d901      	bls.n	800b9b6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800b9b2:	2303      	movs	r3, #3
 800b9b4:	e04c      	b.n	800ba50 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b9b6:	4b28      	ldr	r3, [pc, #160]	@ (800ba58 <HAL_RCC_OscConfig+0x618>)
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d1f0      	bne.n	800b9a4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800b9c2:	4b25      	ldr	r3, [pc, #148]	@ (800ba58 <HAL_RCC_OscConfig+0x618>)
 800b9c4:	68da      	ldr	r2, [r3, #12]
 800b9c6:	4924      	ldr	r1, [pc, #144]	@ (800ba58 <HAL_RCC_OscConfig+0x618>)
 800b9c8:	4b25      	ldr	r3, [pc, #148]	@ (800ba60 <HAL_RCC_OscConfig+0x620>)
 800b9ca:	4013      	ands	r3, r2
 800b9cc:	60cb      	str	r3, [r1, #12]
 800b9ce:	e03e      	b.n	800ba4e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	69db      	ldr	r3, [r3, #28]
 800b9d4:	2b01      	cmp	r3, #1
 800b9d6:	d101      	bne.n	800b9dc <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800b9d8:	2301      	movs	r3, #1
 800b9da:	e039      	b.n	800ba50 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800b9dc:	4b1e      	ldr	r3, [pc, #120]	@ (800ba58 <HAL_RCC_OscConfig+0x618>)
 800b9de:	68db      	ldr	r3, [r3, #12]
 800b9e0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b9e2:	697b      	ldr	r3, [r7, #20]
 800b9e4:	f003 0203 	and.w	r2, r3, #3
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	6a1b      	ldr	r3, [r3, #32]
 800b9ec:	429a      	cmp	r2, r3
 800b9ee:	d12c      	bne.n	800ba4a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b9f0:	697b      	ldr	r3, [r7, #20]
 800b9f2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b9fa:	3b01      	subs	r3, #1
 800b9fc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b9fe:	429a      	cmp	r2, r3
 800ba00:	d123      	bne.n	800ba4a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800ba02:	697b      	ldr	r3, [r7, #20]
 800ba04:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba0c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800ba0e:	429a      	cmp	r2, r3
 800ba10:	d11b      	bne.n	800ba4a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800ba12:	697b      	ldr	r3, [r7, #20]
 800ba14:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba1c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800ba1e:	429a      	cmp	r2, r3
 800ba20:	d113      	bne.n	800ba4a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800ba22:	697b      	ldr	r3, [r7, #20]
 800ba24:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba2c:	085b      	lsrs	r3, r3, #1
 800ba2e:	3b01      	subs	r3, #1
 800ba30:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800ba32:	429a      	cmp	r2, r3
 800ba34:	d109      	bne.n	800ba4a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800ba36:	697b      	ldr	r3, [r7, #20]
 800ba38:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba40:	085b      	lsrs	r3, r3, #1
 800ba42:	3b01      	subs	r3, #1
 800ba44:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800ba46:	429a      	cmp	r2, r3
 800ba48:	d001      	beq.n	800ba4e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800ba4a:	2301      	movs	r3, #1
 800ba4c:	e000      	b.n	800ba50 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800ba4e:	2300      	movs	r3, #0
}
 800ba50:	4618      	mov	r0, r3
 800ba52:	3720      	adds	r7, #32
 800ba54:	46bd      	mov	sp, r7
 800ba56:	bd80      	pop	{r7, pc}
 800ba58:	40021000 	.word	0x40021000
 800ba5c:	019f800c 	.word	0x019f800c
 800ba60:	feeefffc 	.word	0xfeeefffc

0800ba64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ba64:	b580      	push	{r7, lr}
 800ba66:	b086      	sub	sp, #24
 800ba68:	af00      	add	r7, sp, #0
 800ba6a:	6078      	str	r0, [r7, #4]
 800ba6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800ba6e:	2300      	movs	r3, #0
 800ba70:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d101      	bne.n	800ba7c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800ba78:	2301      	movs	r3, #1
 800ba7a:	e11e      	b.n	800bcba <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ba7c:	4b91      	ldr	r3, [pc, #580]	@ (800bcc4 <HAL_RCC_ClockConfig+0x260>)
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	f003 030f 	and.w	r3, r3, #15
 800ba84:	683a      	ldr	r2, [r7, #0]
 800ba86:	429a      	cmp	r2, r3
 800ba88:	d910      	bls.n	800baac <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ba8a:	4b8e      	ldr	r3, [pc, #568]	@ (800bcc4 <HAL_RCC_ClockConfig+0x260>)
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	f023 020f 	bic.w	r2, r3, #15
 800ba92:	498c      	ldr	r1, [pc, #560]	@ (800bcc4 <HAL_RCC_ClockConfig+0x260>)
 800ba94:	683b      	ldr	r3, [r7, #0]
 800ba96:	4313      	orrs	r3, r2
 800ba98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ba9a:	4b8a      	ldr	r3, [pc, #552]	@ (800bcc4 <HAL_RCC_ClockConfig+0x260>)
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	f003 030f 	and.w	r3, r3, #15
 800baa2:	683a      	ldr	r2, [r7, #0]
 800baa4:	429a      	cmp	r2, r3
 800baa6:	d001      	beq.n	800baac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800baa8:	2301      	movs	r3, #1
 800baaa:	e106      	b.n	800bcba <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	f003 0301 	and.w	r3, r3, #1
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d073      	beq.n	800bba0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	685b      	ldr	r3, [r3, #4]
 800babc:	2b03      	cmp	r3, #3
 800babe:	d129      	bne.n	800bb14 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800bac0:	4b81      	ldr	r3, [pc, #516]	@ (800bcc8 <HAL_RCC_ClockConfig+0x264>)
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d101      	bne.n	800bad0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800bacc:	2301      	movs	r3, #1
 800bace:	e0f4      	b.n	800bcba <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800bad0:	f000 f99e 	bl	800be10 <RCC_GetSysClockFreqFromPLLSource>
 800bad4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800bad6:	693b      	ldr	r3, [r7, #16]
 800bad8:	4a7c      	ldr	r2, [pc, #496]	@ (800bccc <HAL_RCC_ClockConfig+0x268>)
 800bada:	4293      	cmp	r3, r2
 800badc:	d93f      	bls.n	800bb5e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800bade:	4b7a      	ldr	r3, [pc, #488]	@ (800bcc8 <HAL_RCC_ClockConfig+0x264>)
 800bae0:	689b      	ldr	r3, [r3, #8]
 800bae2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d009      	beq.n	800bafe <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d033      	beq.n	800bb5e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d12f      	bne.n	800bb5e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800bafe:	4b72      	ldr	r3, [pc, #456]	@ (800bcc8 <HAL_RCC_ClockConfig+0x264>)
 800bb00:	689b      	ldr	r3, [r3, #8]
 800bb02:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800bb06:	4a70      	ldr	r2, [pc, #448]	@ (800bcc8 <HAL_RCC_ClockConfig+0x264>)
 800bb08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bb0c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800bb0e:	2380      	movs	r3, #128	@ 0x80
 800bb10:	617b      	str	r3, [r7, #20]
 800bb12:	e024      	b.n	800bb5e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	685b      	ldr	r3, [r3, #4]
 800bb18:	2b02      	cmp	r3, #2
 800bb1a:	d107      	bne.n	800bb2c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800bb1c:	4b6a      	ldr	r3, [pc, #424]	@ (800bcc8 <HAL_RCC_ClockConfig+0x264>)
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d109      	bne.n	800bb3c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800bb28:	2301      	movs	r3, #1
 800bb2a:	e0c6      	b.n	800bcba <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800bb2c:	4b66      	ldr	r3, [pc, #408]	@ (800bcc8 <HAL_RCC_ClockConfig+0x264>)
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d101      	bne.n	800bb3c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800bb38:	2301      	movs	r3, #1
 800bb3a:	e0be      	b.n	800bcba <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800bb3c:	f000 f8ce 	bl	800bcdc <HAL_RCC_GetSysClockFreq>
 800bb40:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800bb42:	693b      	ldr	r3, [r7, #16]
 800bb44:	4a61      	ldr	r2, [pc, #388]	@ (800bccc <HAL_RCC_ClockConfig+0x268>)
 800bb46:	4293      	cmp	r3, r2
 800bb48:	d909      	bls.n	800bb5e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800bb4a:	4b5f      	ldr	r3, [pc, #380]	@ (800bcc8 <HAL_RCC_ClockConfig+0x264>)
 800bb4c:	689b      	ldr	r3, [r3, #8]
 800bb4e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800bb52:	4a5d      	ldr	r2, [pc, #372]	@ (800bcc8 <HAL_RCC_ClockConfig+0x264>)
 800bb54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bb58:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800bb5a:	2380      	movs	r3, #128	@ 0x80
 800bb5c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800bb5e:	4b5a      	ldr	r3, [pc, #360]	@ (800bcc8 <HAL_RCC_ClockConfig+0x264>)
 800bb60:	689b      	ldr	r3, [r3, #8]
 800bb62:	f023 0203 	bic.w	r2, r3, #3
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	685b      	ldr	r3, [r3, #4]
 800bb6a:	4957      	ldr	r1, [pc, #348]	@ (800bcc8 <HAL_RCC_ClockConfig+0x264>)
 800bb6c:	4313      	orrs	r3, r2
 800bb6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bb70:	f7fd f908 	bl	8008d84 <HAL_GetTick>
 800bb74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bb76:	e00a      	b.n	800bb8e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bb78:	f7fd f904 	bl	8008d84 <HAL_GetTick>
 800bb7c:	4602      	mov	r2, r0
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	1ad3      	subs	r3, r2, r3
 800bb82:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bb86:	4293      	cmp	r3, r2
 800bb88:	d901      	bls.n	800bb8e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800bb8a:	2303      	movs	r3, #3
 800bb8c:	e095      	b.n	800bcba <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bb8e:	4b4e      	ldr	r3, [pc, #312]	@ (800bcc8 <HAL_RCC_ClockConfig+0x264>)
 800bb90:	689b      	ldr	r3, [r3, #8]
 800bb92:	f003 020c 	and.w	r2, r3, #12
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	685b      	ldr	r3, [r3, #4]
 800bb9a:	009b      	lsls	r3, r3, #2
 800bb9c:	429a      	cmp	r2, r3
 800bb9e:	d1eb      	bne.n	800bb78 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	f003 0302 	and.w	r3, r3, #2
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d023      	beq.n	800bbf4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	f003 0304 	and.w	r3, r3, #4
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d005      	beq.n	800bbc4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800bbb8:	4b43      	ldr	r3, [pc, #268]	@ (800bcc8 <HAL_RCC_ClockConfig+0x264>)
 800bbba:	689b      	ldr	r3, [r3, #8]
 800bbbc:	4a42      	ldr	r2, [pc, #264]	@ (800bcc8 <HAL_RCC_ClockConfig+0x264>)
 800bbbe:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800bbc2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	f003 0308 	and.w	r3, r3, #8
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d007      	beq.n	800bbe0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800bbd0:	4b3d      	ldr	r3, [pc, #244]	@ (800bcc8 <HAL_RCC_ClockConfig+0x264>)
 800bbd2:	689b      	ldr	r3, [r3, #8]
 800bbd4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800bbd8:	4a3b      	ldr	r2, [pc, #236]	@ (800bcc8 <HAL_RCC_ClockConfig+0x264>)
 800bbda:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800bbde:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bbe0:	4b39      	ldr	r3, [pc, #228]	@ (800bcc8 <HAL_RCC_ClockConfig+0x264>)
 800bbe2:	689b      	ldr	r3, [r3, #8]
 800bbe4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	689b      	ldr	r3, [r3, #8]
 800bbec:	4936      	ldr	r1, [pc, #216]	@ (800bcc8 <HAL_RCC_ClockConfig+0x264>)
 800bbee:	4313      	orrs	r3, r2
 800bbf0:	608b      	str	r3, [r1, #8]
 800bbf2:	e008      	b.n	800bc06 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800bbf4:	697b      	ldr	r3, [r7, #20]
 800bbf6:	2b80      	cmp	r3, #128	@ 0x80
 800bbf8:	d105      	bne.n	800bc06 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800bbfa:	4b33      	ldr	r3, [pc, #204]	@ (800bcc8 <HAL_RCC_ClockConfig+0x264>)
 800bbfc:	689b      	ldr	r3, [r3, #8]
 800bbfe:	4a32      	ldr	r2, [pc, #200]	@ (800bcc8 <HAL_RCC_ClockConfig+0x264>)
 800bc00:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800bc04:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800bc06:	4b2f      	ldr	r3, [pc, #188]	@ (800bcc4 <HAL_RCC_ClockConfig+0x260>)
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	f003 030f 	and.w	r3, r3, #15
 800bc0e:	683a      	ldr	r2, [r7, #0]
 800bc10:	429a      	cmp	r2, r3
 800bc12:	d21d      	bcs.n	800bc50 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bc14:	4b2b      	ldr	r3, [pc, #172]	@ (800bcc4 <HAL_RCC_ClockConfig+0x260>)
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	f023 020f 	bic.w	r2, r3, #15
 800bc1c:	4929      	ldr	r1, [pc, #164]	@ (800bcc4 <HAL_RCC_ClockConfig+0x260>)
 800bc1e:	683b      	ldr	r3, [r7, #0]
 800bc20:	4313      	orrs	r3, r2
 800bc22:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800bc24:	f7fd f8ae 	bl	8008d84 <HAL_GetTick>
 800bc28:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bc2a:	e00a      	b.n	800bc42 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bc2c:	f7fd f8aa 	bl	8008d84 <HAL_GetTick>
 800bc30:	4602      	mov	r2, r0
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	1ad3      	subs	r3, r2, r3
 800bc36:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bc3a:	4293      	cmp	r3, r2
 800bc3c:	d901      	bls.n	800bc42 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800bc3e:	2303      	movs	r3, #3
 800bc40:	e03b      	b.n	800bcba <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bc42:	4b20      	ldr	r3, [pc, #128]	@ (800bcc4 <HAL_RCC_ClockConfig+0x260>)
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	f003 030f 	and.w	r3, r3, #15
 800bc4a:	683a      	ldr	r2, [r7, #0]
 800bc4c:	429a      	cmp	r2, r3
 800bc4e:	d1ed      	bne.n	800bc2c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	f003 0304 	and.w	r3, r3, #4
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d008      	beq.n	800bc6e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800bc5c:	4b1a      	ldr	r3, [pc, #104]	@ (800bcc8 <HAL_RCC_ClockConfig+0x264>)
 800bc5e:	689b      	ldr	r3, [r3, #8]
 800bc60:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	68db      	ldr	r3, [r3, #12]
 800bc68:	4917      	ldr	r1, [pc, #92]	@ (800bcc8 <HAL_RCC_ClockConfig+0x264>)
 800bc6a:	4313      	orrs	r3, r2
 800bc6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	f003 0308 	and.w	r3, r3, #8
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d009      	beq.n	800bc8e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800bc7a:	4b13      	ldr	r3, [pc, #76]	@ (800bcc8 <HAL_RCC_ClockConfig+0x264>)
 800bc7c:	689b      	ldr	r3, [r3, #8]
 800bc7e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	691b      	ldr	r3, [r3, #16]
 800bc86:	00db      	lsls	r3, r3, #3
 800bc88:	490f      	ldr	r1, [pc, #60]	@ (800bcc8 <HAL_RCC_ClockConfig+0x264>)
 800bc8a:	4313      	orrs	r3, r2
 800bc8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800bc8e:	f000 f825 	bl	800bcdc <HAL_RCC_GetSysClockFreq>
 800bc92:	4602      	mov	r2, r0
 800bc94:	4b0c      	ldr	r3, [pc, #48]	@ (800bcc8 <HAL_RCC_ClockConfig+0x264>)
 800bc96:	689b      	ldr	r3, [r3, #8]
 800bc98:	091b      	lsrs	r3, r3, #4
 800bc9a:	f003 030f 	and.w	r3, r3, #15
 800bc9e:	490c      	ldr	r1, [pc, #48]	@ (800bcd0 <HAL_RCC_ClockConfig+0x26c>)
 800bca0:	5ccb      	ldrb	r3, [r1, r3]
 800bca2:	f003 031f 	and.w	r3, r3, #31
 800bca6:	fa22 f303 	lsr.w	r3, r2, r3
 800bcaa:	4a0a      	ldr	r2, [pc, #40]	@ (800bcd4 <HAL_RCC_ClockConfig+0x270>)
 800bcac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800bcae:	4b0a      	ldr	r3, [pc, #40]	@ (800bcd8 <HAL_RCC_ClockConfig+0x274>)
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	4618      	mov	r0, r3
 800bcb4:	f7fd f81a 	bl	8008cec <HAL_InitTick>
 800bcb8:	4603      	mov	r3, r0
}
 800bcba:	4618      	mov	r0, r3
 800bcbc:	3718      	adds	r7, #24
 800bcbe:	46bd      	mov	sp, r7
 800bcc0:	bd80      	pop	{r7, pc}
 800bcc2:	bf00      	nop
 800bcc4:	40022000 	.word	0x40022000
 800bcc8:	40021000 	.word	0x40021000
 800bccc:	04c4b400 	.word	0x04c4b400
 800bcd0:	08012c00 	.word	0x08012c00
 800bcd4:	20000130 	.word	0x20000130
 800bcd8:	20000134 	.word	0x20000134

0800bcdc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800bcdc:	b480      	push	{r7}
 800bcde:	b087      	sub	sp, #28
 800bce0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800bce2:	4b2c      	ldr	r3, [pc, #176]	@ (800bd94 <HAL_RCC_GetSysClockFreq+0xb8>)
 800bce4:	689b      	ldr	r3, [r3, #8]
 800bce6:	f003 030c 	and.w	r3, r3, #12
 800bcea:	2b04      	cmp	r3, #4
 800bcec:	d102      	bne.n	800bcf4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800bcee:	4b2a      	ldr	r3, [pc, #168]	@ (800bd98 <HAL_RCC_GetSysClockFreq+0xbc>)
 800bcf0:	613b      	str	r3, [r7, #16]
 800bcf2:	e047      	b.n	800bd84 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800bcf4:	4b27      	ldr	r3, [pc, #156]	@ (800bd94 <HAL_RCC_GetSysClockFreq+0xb8>)
 800bcf6:	689b      	ldr	r3, [r3, #8]
 800bcf8:	f003 030c 	and.w	r3, r3, #12
 800bcfc:	2b08      	cmp	r3, #8
 800bcfe:	d102      	bne.n	800bd06 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800bd00:	4b26      	ldr	r3, [pc, #152]	@ (800bd9c <HAL_RCC_GetSysClockFreq+0xc0>)
 800bd02:	613b      	str	r3, [r7, #16]
 800bd04:	e03e      	b.n	800bd84 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800bd06:	4b23      	ldr	r3, [pc, #140]	@ (800bd94 <HAL_RCC_GetSysClockFreq+0xb8>)
 800bd08:	689b      	ldr	r3, [r3, #8]
 800bd0a:	f003 030c 	and.w	r3, r3, #12
 800bd0e:	2b0c      	cmp	r3, #12
 800bd10:	d136      	bne.n	800bd80 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800bd12:	4b20      	ldr	r3, [pc, #128]	@ (800bd94 <HAL_RCC_GetSysClockFreq+0xb8>)
 800bd14:	68db      	ldr	r3, [r3, #12]
 800bd16:	f003 0303 	and.w	r3, r3, #3
 800bd1a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800bd1c:	4b1d      	ldr	r3, [pc, #116]	@ (800bd94 <HAL_RCC_GetSysClockFreq+0xb8>)
 800bd1e:	68db      	ldr	r3, [r3, #12]
 800bd20:	091b      	lsrs	r3, r3, #4
 800bd22:	f003 030f 	and.w	r3, r3, #15
 800bd26:	3301      	adds	r3, #1
 800bd28:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	2b03      	cmp	r3, #3
 800bd2e:	d10c      	bne.n	800bd4a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800bd30:	4a1a      	ldr	r2, [pc, #104]	@ (800bd9c <HAL_RCC_GetSysClockFreq+0xc0>)
 800bd32:	68bb      	ldr	r3, [r7, #8]
 800bd34:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd38:	4a16      	ldr	r2, [pc, #88]	@ (800bd94 <HAL_RCC_GetSysClockFreq+0xb8>)
 800bd3a:	68d2      	ldr	r2, [r2, #12]
 800bd3c:	0a12      	lsrs	r2, r2, #8
 800bd3e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800bd42:	fb02 f303 	mul.w	r3, r2, r3
 800bd46:	617b      	str	r3, [r7, #20]
      break;
 800bd48:	e00c      	b.n	800bd64 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800bd4a:	4a13      	ldr	r2, [pc, #76]	@ (800bd98 <HAL_RCC_GetSysClockFreq+0xbc>)
 800bd4c:	68bb      	ldr	r3, [r7, #8]
 800bd4e:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd52:	4a10      	ldr	r2, [pc, #64]	@ (800bd94 <HAL_RCC_GetSysClockFreq+0xb8>)
 800bd54:	68d2      	ldr	r2, [r2, #12]
 800bd56:	0a12      	lsrs	r2, r2, #8
 800bd58:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800bd5c:	fb02 f303 	mul.w	r3, r2, r3
 800bd60:	617b      	str	r3, [r7, #20]
      break;
 800bd62:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800bd64:	4b0b      	ldr	r3, [pc, #44]	@ (800bd94 <HAL_RCC_GetSysClockFreq+0xb8>)
 800bd66:	68db      	ldr	r3, [r3, #12]
 800bd68:	0e5b      	lsrs	r3, r3, #25
 800bd6a:	f003 0303 	and.w	r3, r3, #3
 800bd6e:	3301      	adds	r3, #1
 800bd70:	005b      	lsls	r3, r3, #1
 800bd72:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800bd74:	697a      	ldr	r2, [r7, #20]
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd7c:	613b      	str	r3, [r7, #16]
 800bd7e:	e001      	b.n	800bd84 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800bd80:	2300      	movs	r3, #0
 800bd82:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800bd84:	693b      	ldr	r3, [r7, #16]
}
 800bd86:	4618      	mov	r0, r3
 800bd88:	371c      	adds	r7, #28
 800bd8a:	46bd      	mov	sp, r7
 800bd8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd90:	4770      	bx	lr
 800bd92:	bf00      	nop
 800bd94:	40021000 	.word	0x40021000
 800bd98:	00f42400 	.word	0x00f42400
 800bd9c:	016e3600 	.word	0x016e3600

0800bda0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800bda0:	b480      	push	{r7}
 800bda2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800bda4:	4b03      	ldr	r3, [pc, #12]	@ (800bdb4 <HAL_RCC_GetHCLKFreq+0x14>)
 800bda6:	681b      	ldr	r3, [r3, #0]
}
 800bda8:	4618      	mov	r0, r3
 800bdaa:	46bd      	mov	sp, r7
 800bdac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb0:	4770      	bx	lr
 800bdb2:	bf00      	nop
 800bdb4:	20000130 	.word	0x20000130

0800bdb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800bdb8:	b580      	push	{r7, lr}
 800bdba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800bdbc:	f7ff fff0 	bl	800bda0 <HAL_RCC_GetHCLKFreq>
 800bdc0:	4602      	mov	r2, r0
 800bdc2:	4b06      	ldr	r3, [pc, #24]	@ (800bddc <HAL_RCC_GetPCLK1Freq+0x24>)
 800bdc4:	689b      	ldr	r3, [r3, #8]
 800bdc6:	0a1b      	lsrs	r3, r3, #8
 800bdc8:	f003 0307 	and.w	r3, r3, #7
 800bdcc:	4904      	ldr	r1, [pc, #16]	@ (800bde0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800bdce:	5ccb      	ldrb	r3, [r1, r3]
 800bdd0:	f003 031f 	and.w	r3, r3, #31
 800bdd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800bdd8:	4618      	mov	r0, r3
 800bdda:	bd80      	pop	{r7, pc}
 800bddc:	40021000 	.word	0x40021000
 800bde0:	08012c10 	.word	0x08012c10

0800bde4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800bde4:	b580      	push	{r7, lr}
 800bde6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800bde8:	f7ff ffda 	bl	800bda0 <HAL_RCC_GetHCLKFreq>
 800bdec:	4602      	mov	r2, r0
 800bdee:	4b06      	ldr	r3, [pc, #24]	@ (800be08 <HAL_RCC_GetPCLK2Freq+0x24>)
 800bdf0:	689b      	ldr	r3, [r3, #8]
 800bdf2:	0adb      	lsrs	r3, r3, #11
 800bdf4:	f003 0307 	and.w	r3, r3, #7
 800bdf8:	4904      	ldr	r1, [pc, #16]	@ (800be0c <HAL_RCC_GetPCLK2Freq+0x28>)
 800bdfa:	5ccb      	ldrb	r3, [r1, r3]
 800bdfc:	f003 031f 	and.w	r3, r3, #31
 800be00:	fa22 f303 	lsr.w	r3, r2, r3
}
 800be04:	4618      	mov	r0, r3
 800be06:	bd80      	pop	{r7, pc}
 800be08:	40021000 	.word	0x40021000
 800be0c:	08012c10 	.word	0x08012c10

0800be10 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800be10:	b480      	push	{r7}
 800be12:	b087      	sub	sp, #28
 800be14:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800be16:	4b1e      	ldr	r3, [pc, #120]	@ (800be90 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800be18:	68db      	ldr	r3, [r3, #12]
 800be1a:	f003 0303 	and.w	r3, r3, #3
 800be1e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800be20:	4b1b      	ldr	r3, [pc, #108]	@ (800be90 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800be22:	68db      	ldr	r3, [r3, #12]
 800be24:	091b      	lsrs	r3, r3, #4
 800be26:	f003 030f 	and.w	r3, r3, #15
 800be2a:	3301      	adds	r3, #1
 800be2c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800be2e:	693b      	ldr	r3, [r7, #16]
 800be30:	2b03      	cmp	r3, #3
 800be32:	d10c      	bne.n	800be4e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800be34:	4a17      	ldr	r2, [pc, #92]	@ (800be94 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	fbb2 f3f3 	udiv	r3, r2, r3
 800be3c:	4a14      	ldr	r2, [pc, #80]	@ (800be90 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800be3e:	68d2      	ldr	r2, [r2, #12]
 800be40:	0a12      	lsrs	r2, r2, #8
 800be42:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800be46:	fb02 f303 	mul.w	r3, r2, r3
 800be4a:	617b      	str	r3, [r7, #20]
    break;
 800be4c:	e00c      	b.n	800be68 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800be4e:	4a12      	ldr	r2, [pc, #72]	@ (800be98 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	fbb2 f3f3 	udiv	r3, r2, r3
 800be56:	4a0e      	ldr	r2, [pc, #56]	@ (800be90 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800be58:	68d2      	ldr	r2, [r2, #12]
 800be5a:	0a12      	lsrs	r2, r2, #8
 800be5c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800be60:	fb02 f303 	mul.w	r3, r2, r3
 800be64:	617b      	str	r3, [r7, #20]
    break;
 800be66:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800be68:	4b09      	ldr	r3, [pc, #36]	@ (800be90 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800be6a:	68db      	ldr	r3, [r3, #12]
 800be6c:	0e5b      	lsrs	r3, r3, #25
 800be6e:	f003 0303 	and.w	r3, r3, #3
 800be72:	3301      	adds	r3, #1
 800be74:	005b      	lsls	r3, r3, #1
 800be76:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800be78:	697a      	ldr	r2, [r7, #20]
 800be7a:	68bb      	ldr	r3, [r7, #8]
 800be7c:	fbb2 f3f3 	udiv	r3, r2, r3
 800be80:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800be82:	687b      	ldr	r3, [r7, #4]
}
 800be84:	4618      	mov	r0, r3
 800be86:	371c      	adds	r7, #28
 800be88:	46bd      	mov	sp, r7
 800be8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be8e:	4770      	bx	lr
 800be90:	40021000 	.word	0x40021000
 800be94:	016e3600 	.word	0x016e3600
 800be98:	00f42400 	.word	0x00f42400

0800be9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800be9c:	b580      	push	{r7, lr}
 800be9e:	b086      	sub	sp, #24
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800bea4:	2300      	movs	r3, #0
 800bea6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800bea8:	2300      	movs	r3, #0
 800beaa:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	f000 8098 	beq.w	800bfea <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800beba:	2300      	movs	r3, #0
 800bebc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800bebe:	4b43      	ldr	r3, [pc, #268]	@ (800bfcc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bec0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bec2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d10d      	bne.n	800bee6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800beca:	4b40      	ldr	r3, [pc, #256]	@ (800bfcc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800becc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bece:	4a3f      	ldr	r2, [pc, #252]	@ (800bfcc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bed0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bed4:	6593      	str	r3, [r2, #88]	@ 0x58
 800bed6:	4b3d      	ldr	r3, [pc, #244]	@ (800bfcc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bed8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800beda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bede:	60bb      	str	r3, [r7, #8]
 800bee0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800bee2:	2301      	movs	r3, #1
 800bee4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bee6:	4b3a      	ldr	r3, [pc, #232]	@ (800bfd0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	4a39      	ldr	r2, [pc, #228]	@ (800bfd0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800beec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bef0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800bef2:	f7fc ff47 	bl	8008d84 <HAL_GetTick>
 800bef6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bef8:	e009      	b.n	800bf0e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800befa:	f7fc ff43 	bl	8008d84 <HAL_GetTick>
 800befe:	4602      	mov	r2, r0
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	1ad3      	subs	r3, r2, r3
 800bf04:	2b02      	cmp	r3, #2
 800bf06:	d902      	bls.n	800bf0e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800bf08:	2303      	movs	r3, #3
 800bf0a:	74fb      	strb	r3, [r7, #19]
        break;
 800bf0c:	e005      	b.n	800bf1a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bf0e:	4b30      	ldr	r3, [pc, #192]	@ (800bfd0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d0ef      	beq.n	800befa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800bf1a:	7cfb      	ldrb	r3, [r7, #19]
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d159      	bne.n	800bfd4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800bf20:	4b2a      	ldr	r3, [pc, #168]	@ (800bfcc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bf22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bf26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bf2a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800bf2c:	697b      	ldr	r3, [r7, #20]
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d01e      	beq.n	800bf70 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bf36:	697a      	ldr	r2, [r7, #20]
 800bf38:	429a      	cmp	r2, r3
 800bf3a:	d019      	beq.n	800bf70 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800bf3c:	4b23      	ldr	r3, [pc, #140]	@ (800bfcc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bf3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bf42:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bf46:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800bf48:	4b20      	ldr	r3, [pc, #128]	@ (800bfcc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bf4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bf4e:	4a1f      	ldr	r2, [pc, #124]	@ (800bfcc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bf50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bf54:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800bf58:	4b1c      	ldr	r3, [pc, #112]	@ (800bfcc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bf5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bf5e:	4a1b      	ldr	r2, [pc, #108]	@ (800bfcc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bf60:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bf64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800bf68:	4a18      	ldr	r2, [pc, #96]	@ (800bfcc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bf6a:	697b      	ldr	r3, [r7, #20]
 800bf6c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800bf70:	697b      	ldr	r3, [r7, #20]
 800bf72:	f003 0301 	and.w	r3, r3, #1
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d016      	beq.n	800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bf7a:	f7fc ff03 	bl	8008d84 <HAL_GetTick>
 800bf7e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bf80:	e00b      	b.n	800bf9a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bf82:	f7fc feff 	bl	8008d84 <HAL_GetTick>
 800bf86:	4602      	mov	r2, r0
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	1ad3      	subs	r3, r2, r3
 800bf8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bf90:	4293      	cmp	r3, r2
 800bf92:	d902      	bls.n	800bf9a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800bf94:	2303      	movs	r3, #3
 800bf96:	74fb      	strb	r3, [r7, #19]
            break;
 800bf98:	e006      	b.n	800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bf9a:	4b0c      	ldr	r3, [pc, #48]	@ (800bfcc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bf9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bfa0:	f003 0302 	and.w	r3, r3, #2
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d0ec      	beq.n	800bf82 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800bfa8:	7cfb      	ldrb	r3, [r7, #19]
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d10b      	bne.n	800bfc6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bfae:	4b07      	ldr	r3, [pc, #28]	@ (800bfcc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bfb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bfb4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bfbc:	4903      	ldr	r1, [pc, #12]	@ (800bfcc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bfbe:	4313      	orrs	r3, r2
 800bfc0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800bfc4:	e008      	b.n	800bfd8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800bfc6:	7cfb      	ldrb	r3, [r7, #19]
 800bfc8:	74bb      	strb	r3, [r7, #18]
 800bfca:	e005      	b.n	800bfd8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800bfcc:	40021000 	.word	0x40021000
 800bfd0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bfd4:	7cfb      	ldrb	r3, [r7, #19]
 800bfd6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800bfd8:	7c7b      	ldrb	r3, [r7, #17]
 800bfda:	2b01      	cmp	r3, #1
 800bfdc:	d105      	bne.n	800bfea <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bfde:	4ba7      	ldr	r3, [pc, #668]	@ (800c27c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bfe0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bfe2:	4aa6      	ldr	r2, [pc, #664]	@ (800c27c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bfe4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800bfe8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	f003 0301 	and.w	r3, r3, #1
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d00a      	beq.n	800c00c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800bff6:	4ba1      	ldr	r3, [pc, #644]	@ (800c27c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bffc:	f023 0203 	bic.w	r2, r3, #3
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	685b      	ldr	r3, [r3, #4]
 800c004:	499d      	ldr	r1, [pc, #628]	@ (800c27c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c006:	4313      	orrs	r3, r2
 800c008:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	f003 0302 	and.w	r3, r3, #2
 800c014:	2b00      	cmp	r3, #0
 800c016:	d00a      	beq.n	800c02e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800c018:	4b98      	ldr	r3, [pc, #608]	@ (800c27c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c01a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c01e:	f023 020c 	bic.w	r2, r3, #12
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	689b      	ldr	r3, [r3, #8]
 800c026:	4995      	ldr	r1, [pc, #596]	@ (800c27c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c028:	4313      	orrs	r3, r2
 800c02a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	f003 0304 	and.w	r3, r3, #4
 800c036:	2b00      	cmp	r3, #0
 800c038:	d00a      	beq.n	800c050 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800c03a:	4b90      	ldr	r3, [pc, #576]	@ (800c27c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c03c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c040:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	68db      	ldr	r3, [r3, #12]
 800c048:	498c      	ldr	r1, [pc, #560]	@ (800c27c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c04a:	4313      	orrs	r3, r2
 800c04c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	f003 0308 	and.w	r3, r3, #8
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d00a      	beq.n	800c072 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800c05c:	4b87      	ldr	r3, [pc, #540]	@ (800c27c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c05e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c062:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	691b      	ldr	r3, [r3, #16]
 800c06a:	4984      	ldr	r1, [pc, #528]	@ (800c27c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c06c:	4313      	orrs	r3, r2
 800c06e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	f003 0310 	and.w	r3, r3, #16
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d00a      	beq.n	800c094 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800c07e:	4b7f      	ldr	r3, [pc, #508]	@ (800c27c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c080:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c084:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	695b      	ldr	r3, [r3, #20]
 800c08c:	497b      	ldr	r1, [pc, #492]	@ (800c27c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c08e:	4313      	orrs	r3, r2
 800c090:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	f003 0320 	and.w	r3, r3, #32
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d00a      	beq.n	800c0b6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c0a0:	4b76      	ldr	r3, [pc, #472]	@ (800c27c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c0a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c0a6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	699b      	ldr	r3, [r3, #24]
 800c0ae:	4973      	ldr	r1, [pc, #460]	@ (800c27c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c0b0:	4313      	orrs	r3, r2
 800c0b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d00a      	beq.n	800c0d8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800c0c2:	4b6e      	ldr	r3, [pc, #440]	@ (800c27c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c0c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c0c8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	69db      	ldr	r3, [r3, #28]
 800c0d0:	496a      	ldr	r1, [pc, #424]	@ (800c27c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c0d2:	4313      	orrs	r3, r2
 800c0d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d00a      	beq.n	800c0fa <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800c0e4:	4b65      	ldr	r3, [pc, #404]	@ (800c27c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c0e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c0ea:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	6a1b      	ldr	r3, [r3, #32]
 800c0f2:	4962      	ldr	r1, [pc, #392]	@ (800c27c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c0f4:	4313      	orrs	r3, r2
 800c0f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c102:	2b00      	cmp	r3, #0
 800c104:	d00a      	beq.n	800c11c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800c106:	4b5d      	ldr	r3, [pc, #372]	@ (800c27c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c108:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c10c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c114:	4959      	ldr	r1, [pc, #356]	@ (800c27c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c116:	4313      	orrs	r3, r2
 800c118:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c124:	2b00      	cmp	r3, #0
 800c126:	d00a      	beq.n	800c13e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c128:	4b54      	ldr	r3, [pc, #336]	@ (800c27c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c12a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800c12e:	f023 0203 	bic.w	r2, r3, #3
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c136:	4951      	ldr	r1, [pc, #324]	@ (800c27c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c138:	4313      	orrs	r3, r2
 800c13a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c146:	2b00      	cmp	r3, #0
 800c148:	d00a      	beq.n	800c160 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c14a:	4b4c      	ldr	r3, [pc, #304]	@ (800c27c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c14c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c150:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c158:	4948      	ldr	r1, [pc, #288]	@ (800c27c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c15a:	4313      	orrs	r3, r2
 800c15c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d015      	beq.n	800c198 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c16c:	4b43      	ldr	r3, [pc, #268]	@ (800c27c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c16e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c172:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c17a:	4940      	ldr	r1, [pc, #256]	@ (800c27c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c17c:	4313      	orrs	r3, r2
 800c17e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c186:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c18a:	d105      	bne.n	800c198 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c18c:	4b3b      	ldr	r3, [pc, #236]	@ (800c27c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c18e:	68db      	ldr	r3, [r3, #12]
 800c190:	4a3a      	ldr	r2, [pc, #232]	@ (800c27c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c192:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c196:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d015      	beq.n	800c1d0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800c1a4:	4b35      	ldr	r3, [pc, #212]	@ (800c27c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c1a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c1aa:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c1b2:	4932      	ldr	r1, [pc, #200]	@ (800c27c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c1b4:	4313      	orrs	r3, r2
 800c1b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c1be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c1c2:	d105      	bne.n	800c1d0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c1c4:	4b2d      	ldr	r3, [pc, #180]	@ (800c27c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c1c6:	68db      	ldr	r3, [r3, #12]
 800c1c8:	4a2c      	ldr	r2, [pc, #176]	@ (800c27c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c1ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c1ce:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d015      	beq.n	800c208 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800c1dc:	4b27      	ldr	r3, [pc, #156]	@ (800c27c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c1de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c1e2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c1ea:	4924      	ldr	r1, [pc, #144]	@ (800c27c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c1ec:	4313      	orrs	r3, r2
 800c1ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c1f6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c1fa:	d105      	bne.n	800c208 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c1fc:	4b1f      	ldr	r3, [pc, #124]	@ (800c27c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c1fe:	68db      	ldr	r3, [r3, #12]
 800c200:	4a1e      	ldr	r2, [pc, #120]	@ (800c27c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c202:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c206:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c210:	2b00      	cmp	r3, #0
 800c212:	d015      	beq.n	800c240 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c214:	4b19      	ldr	r3, [pc, #100]	@ (800c27c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c216:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c21a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c222:	4916      	ldr	r1, [pc, #88]	@ (800c27c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c224:	4313      	orrs	r3, r2
 800c226:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c22e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c232:	d105      	bne.n	800c240 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c234:	4b11      	ldr	r3, [pc, #68]	@ (800c27c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c236:	68db      	ldr	r3, [r3, #12]
 800c238:	4a10      	ldr	r2, [pc, #64]	@ (800c27c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c23a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c23e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d019      	beq.n	800c280 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c24c:	4b0b      	ldr	r3, [pc, #44]	@ (800c27c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c24e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c252:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c25a:	4908      	ldr	r1, [pc, #32]	@ (800c27c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c25c:	4313      	orrs	r3, r2
 800c25e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c266:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c26a:	d109      	bne.n	800c280 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c26c:	4b03      	ldr	r3, [pc, #12]	@ (800c27c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c26e:	68db      	ldr	r3, [r3, #12]
 800c270:	4a02      	ldr	r2, [pc, #8]	@ (800c27c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c272:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c276:	60d3      	str	r3, [r2, #12]
 800c278:	e002      	b.n	800c280 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800c27a:	bf00      	nop
 800c27c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d015      	beq.n	800c2b8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800c28c:	4b29      	ldr	r3, [pc, #164]	@ (800c334 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800c28e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c292:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c29a:	4926      	ldr	r1, [pc, #152]	@ (800c334 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800c29c:	4313      	orrs	r3, r2
 800c29e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c2a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c2aa:	d105      	bne.n	800c2b8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800c2ac:	4b21      	ldr	r3, [pc, #132]	@ (800c334 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800c2ae:	68db      	ldr	r3, [r3, #12]
 800c2b0:	4a20      	ldr	r2, [pc, #128]	@ (800c334 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800c2b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c2b6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d015      	beq.n	800c2f0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800c2c4:	4b1b      	ldr	r3, [pc, #108]	@ (800c334 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800c2c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c2ca:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c2d2:	4918      	ldr	r1, [pc, #96]	@ (800c334 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800c2d4:	4313      	orrs	r3, r2
 800c2d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c2de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c2e2:	d105      	bne.n	800c2f0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800c2e4:	4b13      	ldr	r3, [pc, #76]	@ (800c334 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800c2e6:	68db      	ldr	r3, [r3, #12]
 800c2e8:	4a12      	ldr	r2, [pc, #72]	@ (800c334 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800c2ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c2ee:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d015      	beq.n	800c328 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800c2fc:	4b0d      	ldr	r3, [pc, #52]	@ (800c334 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800c2fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800c302:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c30a:	490a      	ldr	r1, [pc, #40]	@ (800c334 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800c30c:	4313      	orrs	r3, r2
 800c30e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c316:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c31a:	d105      	bne.n	800c328 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c31c:	4b05      	ldr	r3, [pc, #20]	@ (800c334 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800c31e:	68db      	ldr	r3, [r3, #12]
 800c320:	4a04      	ldr	r2, [pc, #16]	@ (800c334 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800c322:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c326:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800c328:	7cbb      	ldrb	r3, [r7, #18]
}
 800c32a:	4618      	mov	r0, r3
 800c32c:	3718      	adds	r7, #24
 800c32e:	46bd      	mov	sp, r7
 800c330:	bd80      	pop	{r7, pc}
 800c332:	bf00      	nop
 800c334:	40021000 	.word	0x40021000

0800c338 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c338:	b580      	push	{r7, lr}
 800c33a:	b082      	sub	sp, #8
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	2b00      	cmp	r3, #0
 800c344:	d101      	bne.n	800c34a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c346:	2301      	movs	r3, #1
 800c348:	e054      	b.n	800c3f4 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c350:	b2db      	uxtb	r3, r3
 800c352:	2b00      	cmp	r3, #0
 800c354:	d111      	bne.n	800c37a <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	2200      	movs	r2, #0
 800c35a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800c35e:	6878      	ldr	r0, [r7, #4]
 800c360:	f001 fee2 	bl	800e128 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d102      	bne.n	800c372 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	4a23      	ldr	r2, [pc, #140]	@ (800c3fc <HAL_TIM_Base_Init+0xc4>)
 800c370:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c376:	6878      	ldr	r0, [r7, #4]
 800c378:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	2202      	movs	r2, #2
 800c37e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	681a      	ldr	r2, [r3, #0]
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	3304      	adds	r3, #4
 800c38a:	4619      	mov	r1, r3
 800c38c:	4610      	mov	r0, r2
 800c38e:	f001 fa2b 	bl	800d7e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	2201      	movs	r2, #1
 800c396:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	2201      	movs	r2, #1
 800c39e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	2201      	movs	r2, #1
 800c3a6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	2201      	movs	r2, #1
 800c3ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	2201      	movs	r2, #1
 800c3b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	2201      	movs	r2, #1
 800c3be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	2201      	movs	r2, #1
 800c3c6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	2201      	movs	r2, #1
 800c3ce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	2201      	movs	r2, #1
 800c3d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	2201      	movs	r2, #1
 800c3de:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	2201      	movs	r2, #1
 800c3e6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	2201      	movs	r2, #1
 800c3ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c3f2:	2300      	movs	r3, #0
}
 800c3f4:	4618      	mov	r0, r3
 800c3f6:	3708      	adds	r7, #8
 800c3f8:	46bd      	mov	sp, r7
 800c3fa:	bd80      	pop	{r7, pc}
 800c3fc:	080085ad 	.word	0x080085ad

0800c400 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800c400:	b480      	push	{r7}
 800c402:	b085      	sub	sp, #20
 800c404:	af00      	add	r7, sp, #0
 800c406:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c40e:	b2db      	uxtb	r3, r3
 800c410:	2b01      	cmp	r3, #1
 800c412:	d001      	beq.n	800c418 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800c414:	2301      	movs	r3, #1
 800c416:	e04c      	b.n	800c4b2 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	2202      	movs	r2, #2
 800c41c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	4a26      	ldr	r2, [pc, #152]	@ (800c4c0 <HAL_TIM_Base_Start+0xc0>)
 800c426:	4293      	cmp	r3, r2
 800c428:	d022      	beq.n	800c470 <HAL_TIM_Base_Start+0x70>
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c432:	d01d      	beq.n	800c470 <HAL_TIM_Base_Start+0x70>
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	4a22      	ldr	r2, [pc, #136]	@ (800c4c4 <HAL_TIM_Base_Start+0xc4>)
 800c43a:	4293      	cmp	r3, r2
 800c43c:	d018      	beq.n	800c470 <HAL_TIM_Base_Start+0x70>
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	4a21      	ldr	r2, [pc, #132]	@ (800c4c8 <HAL_TIM_Base_Start+0xc8>)
 800c444:	4293      	cmp	r3, r2
 800c446:	d013      	beq.n	800c470 <HAL_TIM_Base_Start+0x70>
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	4a1f      	ldr	r2, [pc, #124]	@ (800c4cc <HAL_TIM_Base_Start+0xcc>)
 800c44e:	4293      	cmp	r3, r2
 800c450:	d00e      	beq.n	800c470 <HAL_TIM_Base_Start+0x70>
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	4a1e      	ldr	r2, [pc, #120]	@ (800c4d0 <HAL_TIM_Base_Start+0xd0>)
 800c458:	4293      	cmp	r3, r2
 800c45a:	d009      	beq.n	800c470 <HAL_TIM_Base_Start+0x70>
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	4a1c      	ldr	r2, [pc, #112]	@ (800c4d4 <HAL_TIM_Base_Start+0xd4>)
 800c462:	4293      	cmp	r3, r2
 800c464:	d004      	beq.n	800c470 <HAL_TIM_Base_Start+0x70>
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	4a1b      	ldr	r2, [pc, #108]	@ (800c4d8 <HAL_TIM_Base_Start+0xd8>)
 800c46c:	4293      	cmp	r3, r2
 800c46e:	d115      	bne.n	800c49c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	689a      	ldr	r2, [r3, #8]
 800c476:	4b19      	ldr	r3, [pc, #100]	@ (800c4dc <HAL_TIM_Base_Start+0xdc>)
 800c478:	4013      	ands	r3, r2
 800c47a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	2b06      	cmp	r3, #6
 800c480:	d015      	beq.n	800c4ae <HAL_TIM_Base_Start+0xae>
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c488:	d011      	beq.n	800c4ae <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	681a      	ldr	r2, [r3, #0]
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	f042 0201 	orr.w	r2, r2, #1
 800c498:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c49a:	e008      	b.n	800c4ae <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	681a      	ldr	r2, [r3, #0]
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	f042 0201 	orr.w	r2, r2, #1
 800c4aa:	601a      	str	r2, [r3, #0]
 800c4ac:	e000      	b.n	800c4b0 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c4ae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c4b0:	2300      	movs	r3, #0
}
 800c4b2:	4618      	mov	r0, r3
 800c4b4:	3714      	adds	r7, #20
 800c4b6:	46bd      	mov	sp, r7
 800c4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4bc:	4770      	bx	lr
 800c4be:	bf00      	nop
 800c4c0:	40012c00 	.word	0x40012c00
 800c4c4:	40000400 	.word	0x40000400
 800c4c8:	40000800 	.word	0x40000800
 800c4cc:	40000c00 	.word	0x40000c00
 800c4d0:	40013400 	.word	0x40013400
 800c4d4:	40014000 	.word	0x40014000
 800c4d8:	40015000 	.word	0x40015000
 800c4dc:	00010007 	.word	0x00010007

0800c4e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c4e0:	b480      	push	{r7}
 800c4e2:	b085      	sub	sp, #20
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c4ee:	b2db      	uxtb	r3, r3
 800c4f0:	2b01      	cmp	r3, #1
 800c4f2:	d001      	beq.n	800c4f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c4f4:	2301      	movs	r3, #1
 800c4f6:	e054      	b.n	800c5a2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	2202      	movs	r2, #2
 800c4fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	68da      	ldr	r2, [r3, #12]
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	f042 0201 	orr.w	r2, r2, #1
 800c50e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	4a26      	ldr	r2, [pc, #152]	@ (800c5b0 <HAL_TIM_Base_Start_IT+0xd0>)
 800c516:	4293      	cmp	r3, r2
 800c518:	d022      	beq.n	800c560 <HAL_TIM_Base_Start_IT+0x80>
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c522:	d01d      	beq.n	800c560 <HAL_TIM_Base_Start_IT+0x80>
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	4a22      	ldr	r2, [pc, #136]	@ (800c5b4 <HAL_TIM_Base_Start_IT+0xd4>)
 800c52a:	4293      	cmp	r3, r2
 800c52c:	d018      	beq.n	800c560 <HAL_TIM_Base_Start_IT+0x80>
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	4a21      	ldr	r2, [pc, #132]	@ (800c5b8 <HAL_TIM_Base_Start_IT+0xd8>)
 800c534:	4293      	cmp	r3, r2
 800c536:	d013      	beq.n	800c560 <HAL_TIM_Base_Start_IT+0x80>
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	4a1f      	ldr	r2, [pc, #124]	@ (800c5bc <HAL_TIM_Base_Start_IT+0xdc>)
 800c53e:	4293      	cmp	r3, r2
 800c540:	d00e      	beq.n	800c560 <HAL_TIM_Base_Start_IT+0x80>
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	4a1e      	ldr	r2, [pc, #120]	@ (800c5c0 <HAL_TIM_Base_Start_IT+0xe0>)
 800c548:	4293      	cmp	r3, r2
 800c54a:	d009      	beq.n	800c560 <HAL_TIM_Base_Start_IT+0x80>
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	4a1c      	ldr	r2, [pc, #112]	@ (800c5c4 <HAL_TIM_Base_Start_IT+0xe4>)
 800c552:	4293      	cmp	r3, r2
 800c554:	d004      	beq.n	800c560 <HAL_TIM_Base_Start_IT+0x80>
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	4a1b      	ldr	r2, [pc, #108]	@ (800c5c8 <HAL_TIM_Base_Start_IT+0xe8>)
 800c55c:	4293      	cmp	r3, r2
 800c55e:	d115      	bne.n	800c58c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	689a      	ldr	r2, [r3, #8]
 800c566:	4b19      	ldr	r3, [pc, #100]	@ (800c5cc <HAL_TIM_Base_Start_IT+0xec>)
 800c568:	4013      	ands	r3, r2
 800c56a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	2b06      	cmp	r3, #6
 800c570:	d015      	beq.n	800c59e <HAL_TIM_Base_Start_IT+0xbe>
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c578:	d011      	beq.n	800c59e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	681a      	ldr	r2, [r3, #0]
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	f042 0201 	orr.w	r2, r2, #1
 800c588:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c58a:	e008      	b.n	800c59e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	681a      	ldr	r2, [r3, #0]
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	f042 0201 	orr.w	r2, r2, #1
 800c59a:	601a      	str	r2, [r3, #0]
 800c59c:	e000      	b.n	800c5a0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c59e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c5a0:	2300      	movs	r3, #0
}
 800c5a2:	4618      	mov	r0, r3
 800c5a4:	3714      	adds	r7, #20
 800c5a6:	46bd      	mov	sp, r7
 800c5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ac:	4770      	bx	lr
 800c5ae:	bf00      	nop
 800c5b0:	40012c00 	.word	0x40012c00
 800c5b4:	40000400 	.word	0x40000400
 800c5b8:	40000800 	.word	0x40000800
 800c5bc:	40000c00 	.word	0x40000c00
 800c5c0:	40013400 	.word	0x40013400
 800c5c4:	40014000 	.word	0x40014000
 800c5c8:	40015000 	.word	0x40015000
 800c5cc:	00010007 	.word	0x00010007

0800c5d0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c5d0:	b580      	push	{r7, lr}
 800c5d2:	b082      	sub	sp, #8
 800c5d4:	af00      	add	r7, sp, #0
 800c5d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d101      	bne.n	800c5e2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c5de:	2301      	movs	r3, #1
 800c5e0:	e054      	b.n	800c68c <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c5e8:	b2db      	uxtb	r3, r3
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d111      	bne.n	800c612 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	2200      	movs	r2, #0
 800c5f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800c5f6:	6878      	ldr	r0, [r7, #4]
 800c5f8:	f001 fd96 	bl	800e128 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c600:	2b00      	cmp	r3, #0
 800c602:	d102      	bne.n	800c60a <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	4a23      	ldr	r2, [pc, #140]	@ (800c694 <HAL_TIM_PWM_Init+0xc4>)
 800c608:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c60e:	6878      	ldr	r0, [r7, #4]
 800c610:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	2202      	movs	r2, #2
 800c616:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	681a      	ldr	r2, [r3, #0]
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	3304      	adds	r3, #4
 800c622:	4619      	mov	r1, r3
 800c624:	4610      	mov	r0, r2
 800c626:	f001 f8df 	bl	800d7e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	2201      	movs	r2, #1
 800c62e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	2201      	movs	r2, #1
 800c636:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	2201      	movs	r2, #1
 800c63e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	2201      	movs	r2, #1
 800c646:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	2201      	movs	r2, #1
 800c64e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	2201      	movs	r2, #1
 800c656:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	2201      	movs	r2, #1
 800c65e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	2201      	movs	r2, #1
 800c666:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	2201      	movs	r2, #1
 800c66e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	2201      	movs	r2, #1
 800c676:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	2201      	movs	r2, #1
 800c67e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	2201      	movs	r2, #1
 800c686:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c68a:	2300      	movs	r3, #0
}
 800c68c:	4618      	mov	r0, r3
 800c68e:	3708      	adds	r7, #8
 800c690:	46bd      	mov	sp, r7
 800c692:	bd80      	pop	{r7, pc}
 800c694:	08008561 	.word	0x08008561

0800c698 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c698:	b580      	push	{r7, lr}
 800c69a:	b084      	sub	sp, #16
 800c69c:	af00      	add	r7, sp, #0
 800c69e:	6078      	str	r0, [r7, #4]
 800c6a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c6a2:	683b      	ldr	r3, [r7, #0]
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d109      	bne.n	800c6bc <HAL_TIM_PWM_Start+0x24>
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800c6ae:	b2db      	uxtb	r3, r3
 800c6b0:	2b01      	cmp	r3, #1
 800c6b2:	bf14      	ite	ne
 800c6b4:	2301      	movne	r3, #1
 800c6b6:	2300      	moveq	r3, #0
 800c6b8:	b2db      	uxtb	r3, r3
 800c6ba:	e03c      	b.n	800c736 <HAL_TIM_PWM_Start+0x9e>
 800c6bc:	683b      	ldr	r3, [r7, #0]
 800c6be:	2b04      	cmp	r3, #4
 800c6c0:	d109      	bne.n	800c6d6 <HAL_TIM_PWM_Start+0x3e>
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800c6c8:	b2db      	uxtb	r3, r3
 800c6ca:	2b01      	cmp	r3, #1
 800c6cc:	bf14      	ite	ne
 800c6ce:	2301      	movne	r3, #1
 800c6d0:	2300      	moveq	r3, #0
 800c6d2:	b2db      	uxtb	r3, r3
 800c6d4:	e02f      	b.n	800c736 <HAL_TIM_PWM_Start+0x9e>
 800c6d6:	683b      	ldr	r3, [r7, #0]
 800c6d8:	2b08      	cmp	r3, #8
 800c6da:	d109      	bne.n	800c6f0 <HAL_TIM_PWM_Start+0x58>
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800c6e2:	b2db      	uxtb	r3, r3
 800c6e4:	2b01      	cmp	r3, #1
 800c6e6:	bf14      	ite	ne
 800c6e8:	2301      	movne	r3, #1
 800c6ea:	2300      	moveq	r3, #0
 800c6ec:	b2db      	uxtb	r3, r3
 800c6ee:	e022      	b.n	800c736 <HAL_TIM_PWM_Start+0x9e>
 800c6f0:	683b      	ldr	r3, [r7, #0]
 800c6f2:	2b0c      	cmp	r3, #12
 800c6f4:	d109      	bne.n	800c70a <HAL_TIM_PWM_Start+0x72>
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c6fc:	b2db      	uxtb	r3, r3
 800c6fe:	2b01      	cmp	r3, #1
 800c700:	bf14      	ite	ne
 800c702:	2301      	movne	r3, #1
 800c704:	2300      	moveq	r3, #0
 800c706:	b2db      	uxtb	r3, r3
 800c708:	e015      	b.n	800c736 <HAL_TIM_PWM_Start+0x9e>
 800c70a:	683b      	ldr	r3, [r7, #0]
 800c70c:	2b10      	cmp	r3, #16
 800c70e:	d109      	bne.n	800c724 <HAL_TIM_PWM_Start+0x8c>
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c716:	b2db      	uxtb	r3, r3
 800c718:	2b01      	cmp	r3, #1
 800c71a:	bf14      	ite	ne
 800c71c:	2301      	movne	r3, #1
 800c71e:	2300      	moveq	r3, #0
 800c720:	b2db      	uxtb	r3, r3
 800c722:	e008      	b.n	800c736 <HAL_TIM_PWM_Start+0x9e>
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800c72a:	b2db      	uxtb	r3, r3
 800c72c:	2b01      	cmp	r3, #1
 800c72e:	bf14      	ite	ne
 800c730:	2301      	movne	r3, #1
 800c732:	2300      	moveq	r3, #0
 800c734:	b2db      	uxtb	r3, r3
 800c736:	2b00      	cmp	r3, #0
 800c738:	d001      	beq.n	800c73e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800c73a:	2301      	movs	r3, #1
 800c73c:	e0a6      	b.n	800c88c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c73e:	683b      	ldr	r3, [r7, #0]
 800c740:	2b00      	cmp	r3, #0
 800c742:	d104      	bne.n	800c74e <HAL_TIM_PWM_Start+0xb6>
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	2202      	movs	r2, #2
 800c748:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c74c:	e023      	b.n	800c796 <HAL_TIM_PWM_Start+0xfe>
 800c74e:	683b      	ldr	r3, [r7, #0]
 800c750:	2b04      	cmp	r3, #4
 800c752:	d104      	bne.n	800c75e <HAL_TIM_PWM_Start+0xc6>
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	2202      	movs	r2, #2
 800c758:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c75c:	e01b      	b.n	800c796 <HAL_TIM_PWM_Start+0xfe>
 800c75e:	683b      	ldr	r3, [r7, #0]
 800c760:	2b08      	cmp	r3, #8
 800c762:	d104      	bne.n	800c76e <HAL_TIM_PWM_Start+0xd6>
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	2202      	movs	r2, #2
 800c768:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c76c:	e013      	b.n	800c796 <HAL_TIM_PWM_Start+0xfe>
 800c76e:	683b      	ldr	r3, [r7, #0]
 800c770:	2b0c      	cmp	r3, #12
 800c772:	d104      	bne.n	800c77e <HAL_TIM_PWM_Start+0xe6>
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	2202      	movs	r2, #2
 800c778:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c77c:	e00b      	b.n	800c796 <HAL_TIM_PWM_Start+0xfe>
 800c77e:	683b      	ldr	r3, [r7, #0]
 800c780:	2b10      	cmp	r3, #16
 800c782:	d104      	bne.n	800c78e <HAL_TIM_PWM_Start+0xf6>
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	2202      	movs	r2, #2
 800c788:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c78c:	e003      	b.n	800c796 <HAL_TIM_PWM_Start+0xfe>
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	2202      	movs	r2, #2
 800c792:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	2201      	movs	r2, #1
 800c79c:	6839      	ldr	r1, [r7, #0]
 800c79e:	4618      	mov	r0, r3
 800c7a0:	f001 fc9c 	bl	800e0dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	4a3a      	ldr	r2, [pc, #232]	@ (800c894 <HAL_TIM_PWM_Start+0x1fc>)
 800c7aa:	4293      	cmp	r3, r2
 800c7ac:	d018      	beq.n	800c7e0 <HAL_TIM_PWM_Start+0x148>
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	4a39      	ldr	r2, [pc, #228]	@ (800c898 <HAL_TIM_PWM_Start+0x200>)
 800c7b4:	4293      	cmp	r3, r2
 800c7b6:	d013      	beq.n	800c7e0 <HAL_TIM_PWM_Start+0x148>
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	4a37      	ldr	r2, [pc, #220]	@ (800c89c <HAL_TIM_PWM_Start+0x204>)
 800c7be:	4293      	cmp	r3, r2
 800c7c0:	d00e      	beq.n	800c7e0 <HAL_TIM_PWM_Start+0x148>
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	4a36      	ldr	r2, [pc, #216]	@ (800c8a0 <HAL_TIM_PWM_Start+0x208>)
 800c7c8:	4293      	cmp	r3, r2
 800c7ca:	d009      	beq.n	800c7e0 <HAL_TIM_PWM_Start+0x148>
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	4a34      	ldr	r2, [pc, #208]	@ (800c8a4 <HAL_TIM_PWM_Start+0x20c>)
 800c7d2:	4293      	cmp	r3, r2
 800c7d4:	d004      	beq.n	800c7e0 <HAL_TIM_PWM_Start+0x148>
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	4a33      	ldr	r2, [pc, #204]	@ (800c8a8 <HAL_TIM_PWM_Start+0x210>)
 800c7dc:	4293      	cmp	r3, r2
 800c7de:	d101      	bne.n	800c7e4 <HAL_TIM_PWM_Start+0x14c>
 800c7e0:	2301      	movs	r3, #1
 800c7e2:	e000      	b.n	800c7e6 <HAL_TIM_PWM_Start+0x14e>
 800c7e4:	2300      	movs	r3, #0
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d007      	beq.n	800c7fa <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800c7f8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	4a25      	ldr	r2, [pc, #148]	@ (800c894 <HAL_TIM_PWM_Start+0x1fc>)
 800c800:	4293      	cmp	r3, r2
 800c802:	d022      	beq.n	800c84a <HAL_TIM_PWM_Start+0x1b2>
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c80c:	d01d      	beq.n	800c84a <HAL_TIM_PWM_Start+0x1b2>
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	4a26      	ldr	r2, [pc, #152]	@ (800c8ac <HAL_TIM_PWM_Start+0x214>)
 800c814:	4293      	cmp	r3, r2
 800c816:	d018      	beq.n	800c84a <HAL_TIM_PWM_Start+0x1b2>
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	4a24      	ldr	r2, [pc, #144]	@ (800c8b0 <HAL_TIM_PWM_Start+0x218>)
 800c81e:	4293      	cmp	r3, r2
 800c820:	d013      	beq.n	800c84a <HAL_TIM_PWM_Start+0x1b2>
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	4a23      	ldr	r2, [pc, #140]	@ (800c8b4 <HAL_TIM_PWM_Start+0x21c>)
 800c828:	4293      	cmp	r3, r2
 800c82a:	d00e      	beq.n	800c84a <HAL_TIM_PWM_Start+0x1b2>
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	4a19      	ldr	r2, [pc, #100]	@ (800c898 <HAL_TIM_PWM_Start+0x200>)
 800c832:	4293      	cmp	r3, r2
 800c834:	d009      	beq.n	800c84a <HAL_TIM_PWM_Start+0x1b2>
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	4a18      	ldr	r2, [pc, #96]	@ (800c89c <HAL_TIM_PWM_Start+0x204>)
 800c83c:	4293      	cmp	r3, r2
 800c83e:	d004      	beq.n	800c84a <HAL_TIM_PWM_Start+0x1b2>
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	4a18      	ldr	r2, [pc, #96]	@ (800c8a8 <HAL_TIM_PWM_Start+0x210>)
 800c846:	4293      	cmp	r3, r2
 800c848:	d115      	bne.n	800c876 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	689a      	ldr	r2, [r3, #8]
 800c850:	4b19      	ldr	r3, [pc, #100]	@ (800c8b8 <HAL_TIM_PWM_Start+0x220>)
 800c852:	4013      	ands	r3, r2
 800c854:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	2b06      	cmp	r3, #6
 800c85a:	d015      	beq.n	800c888 <HAL_TIM_PWM_Start+0x1f0>
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c862:	d011      	beq.n	800c888 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	681a      	ldr	r2, [r3, #0]
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	f042 0201 	orr.w	r2, r2, #1
 800c872:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c874:	e008      	b.n	800c888 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	681a      	ldr	r2, [r3, #0]
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	f042 0201 	orr.w	r2, r2, #1
 800c884:	601a      	str	r2, [r3, #0]
 800c886:	e000      	b.n	800c88a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c888:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c88a:	2300      	movs	r3, #0
}
 800c88c:	4618      	mov	r0, r3
 800c88e:	3710      	adds	r7, #16
 800c890:	46bd      	mov	sp, r7
 800c892:	bd80      	pop	{r7, pc}
 800c894:	40012c00 	.word	0x40012c00
 800c898:	40013400 	.word	0x40013400
 800c89c:	40014000 	.word	0x40014000
 800c8a0:	40014400 	.word	0x40014400
 800c8a4:	40014800 	.word	0x40014800
 800c8a8:	40015000 	.word	0x40015000
 800c8ac:	40000400 	.word	0x40000400
 800c8b0:	40000800 	.word	0x40000800
 800c8b4:	40000c00 	.word	0x40000c00
 800c8b8:	00010007 	.word	0x00010007

0800c8bc <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800c8bc:	b580      	push	{r7, lr}
 800c8be:	b082      	sub	sp, #8
 800c8c0:	af00      	add	r7, sp, #0
 800c8c2:	6078      	str	r0, [r7, #4]
 800c8c4:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d101      	bne.n	800c8d0 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800c8cc:	2301      	movs	r3, #1
 800c8ce:	e04c      	b.n	800c96a <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c8d6:	b2db      	uxtb	r3, r3
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d111      	bne.n	800c900 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	2200      	movs	r2, #0
 800c8e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800c8e4:	6878      	ldr	r0, [r7, #4]
 800c8e6:	f001 fc1f 	bl	800e128 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d102      	bne.n	800c8f8 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	4a1f      	ldr	r2, [pc, #124]	@ (800c974 <HAL_TIM_OnePulse_Init+0xb8>)
 800c8f6:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c8fc:	6878      	ldr	r0, [r7, #4]
 800c8fe:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	2202      	movs	r2, #2
 800c904:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	681a      	ldr	r2, [r3, #0]
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	3304      	adds	r3, #4
 800c910:	4619      	mov	r1, r3
 800c912:	4610      	mov	r0, r2
 800c914:	f000 ff68 	bl	800d7e8 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	681a      	ldr	r2, [r3, #0]
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	f022 0208 	bic.w	r2, r2, #8
 800c926:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	6819      	ldr	r1, [r3, #0]
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	683a      	ldr	r2, [r7, #0]
 800c934:	430a      	orrs	r2, r1
 800c936:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	2201      	movs	r2, #1
 800c93c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	2201      	movs	r2, #1
 800c944:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	2201      	movs	r2, #1
 800c94c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	2201      	movs	r2, #1
 800c954:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	2201      	movs	r2, #1
 800c95c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	2201      	movs	r2, #1
 800c964:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c968:	2300      	movs	r3, #0
}
 800c96a:	4618      	mov	r0, r3
 800c96c:	3708      	adds	r7, #8
 800c96e:	46bd      	mov	sp, r7
 800c970:	bd80      	pop	{r7, pc}
 800c972:	bf00      	nop
 800c974:	0800c979 	.word	0x0800c979

0800c978 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800c978:	b480      	push	{r7}
 800c97a:	b083      	sub	sp, #12
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800c980:	bf00      	nop
 800c982:	370c      	adds	r7, #12
 800c984:	46bd      	mov	sp, r7
 800c986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c98a:	4770      	bx	lr

0800c98c <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800c98c:	b580      	push	{r7, lr}
 800c98e:	b084      	sub	sp, #16
 800c990:	af00      	add	r7, sp, #0
 800c992:	6078      	str	r0, [r7, #4]
 800c994:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800c99c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800c9a4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c9ac:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c9b4:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800c9b6:	7bfb      	ldrb	r3, [r7, #15]
 800c9b8:	2b01      	cmp	r3, #1
 800c9ba:	d108      	bne.n	800c9ce <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800c9bc:	7bbb      	ldrb	r3, [r7, #14]
 800c9be:	2b01      	cmp	r3, #1
 800c9c0:	d105      	bne.n	800c9ce <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800c9c2:	7b7b      	ldrb	r3, [r7, #13]
 800c9c4:	2b01      	cmp	r3, #1
 800c9c6:	d102      	bne.n	800c9ce <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800c9c8:	7b3b      	ldrb	r3, [r7, #12]
 800c9ca:	2b01      	cmp	r3, #1
 800c9cc:	d001      	beq.n	800c9d2 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 800c9ce:	2301      	movs	r3, #1
 800c9d0:	e059      	b.n	800ca86 <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	2202      	movs	r2, #2
 800c9d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	2202      	movs	r2, #2
 800c9de:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	2202      	movs	r2, #2
 800c9e6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	2202      	movs	r2, #2
 800c9ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	68da      	ldr	r2, [r3, #12]
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	f042 0202 	orr.w	r2, r2, #2
 800ca00:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	68da      	ldr	r2, [r3, #12]
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	f042 0204 	orr.w	r2, r2, #4
 800ca10:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	2201      	movs	r2, #1
 800ca18:	2100      	movs	r1, #0
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	f001 fb5e 	bl	800e0dc <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	2201      	movs	r2, #1
 800ca26:	2104      	movs	r1, #4
 800ca28:	4618      	mov	r0, r3
 800ca2a:	f001 fb57 	bl	800e0dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	4a17      	ldr	r2, [pc, #92]	@ (800ca90 <HAL_TIM_OnePulse_Start_IT+0x104>)
 800ca34:	4293      	cmp	r3, r2
 800ca36:	d018      	beq.n	800ca6a <HAL_TIM_OnePulse_Start_IT+0xde>
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	4a15      	ldr	r2, [pc, #84]	@ (800ca94 <HAL_TIM_OnePulse_Start_IT+0x108>)
 800ca3e:	4293      	cmp	r3, r2
 800ca40:	d013      	beq.n	800ca6a <HAL_TIM_OnePulse_Start_IT+0xde>
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	4a14      	ldr	r2, [pc, #80]	@ (800ca98 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 800ca48:	4293      	cmp	r3, r2
 800ca4a:	d00e      	beq.n	800ca6a <HAL_TIM_OnePulse_Start_IT+0xde>
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	4a12      	ldr	r2, [pc, #72]	@ (800ca9c <HAL_TIM_OnePulse_Start_IT+0x110>)
 800ca52:	4293      	cmp	r3, r2
 800ca54:	d009      	beq.n	800ca6a <HAL_TIM_OnePulse_Start_IT+0xde>
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	4a11      	ldr	r2, [pc, #68]	@ (800caa0 <HAL_TIM_OnePulse_Start_IT+0x114>)
 800ca5c:	4293      	cmp	r3, r2
 800ca5e:	d004      	beq.n	800ca6a <HAL_TIM_OnePulse_Start_IT+0xde>
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	4a0f      	ldr	r2, [pc, #60]	@ (800caa4 <HAL_TIM_OnePulse_Start_IT+0x118>)
 800ca66:	4293      	cmp	r3, r2
 800ca68:	d101      	bne.n	800ca6e <HAL_TIM_OnePulse_Start_IT+0xe2>
 800ca6a:	2301      	movs	r3, #1
 800ca6c:	e000      	b.n	800ca70 <HAL_TIM_OnePulse_Start_IT+0xe4>
 800ca6e:	2300      	movs	r3, #0
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d007      	beq.n	800ca84 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800ca82:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800ca84:	2300      	movs	r3, #0
}
 800ca86:	4618      	mov	r0, r3
 800ca88:	3710      	adds	r7, #16
 800ca8a:	46bd      	mov	sp, r7
 800ca8c:	bd80      	pop	{r7, pc}
 800ca8e:	bf00      	nop
 800ca90:	40012c00 	.word	0x40012c00
 800ca94:	40013400 	.word	0x40013400
 800ca98:	40014000 	.word	0x40014000
 800ca9c:	40014400 	.word	0x40014400
 800caa0:	40014800 	.word	0x40014800
 800caa4:	40015000 	.word	0x40015000

0800caa8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800caa8:	b580      	push	{r7, lr}
 800caaa:	b086      	sub	sp, #24
 800caac:	af00      	add	r7, sp, #0
 800caae:	6078      	str	r0, [r7, #4]
 800cab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d101      	bne.n	800cabc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800cab8:	2301      	movs	r3, #1
 800caba:	e0a2      	b.n	800cc02 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800cac2:	b2db      	uxtb	r3, r3
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d111      	bne.n	800caec <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	2200      	movs	r2, #0
 800cacc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800cad0:	6878      	ldr	r0, [r7, #4]
 800cad2:	f001 fb29 	bl	800e128 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d102      	bne.n	800cae4 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	4a4a      	ldr	r2, [pc, #296]	@ (800cc0c <HAL_TIM_Encoder_Init+0x164>)
 800cae2:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cae8:	6878      	ldr	r0, [r7, #4]
 800caea:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	2202      	movs	r2, #2
 800caf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	689b      	ldr	r3, [r3, #8]
 800cafa:	687a      	ldr	r2, [r7, #4]
 800cafc:	6812      	ldr	r2, [r2, #0]
 800cafe:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800cb02:	f023 0307 	bic.w	r3, r3, #7
 800cb06:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	681a      	ldr	r2, [r3, #0]
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	3304      	adds	r3, #4
 800cb10:	4619      	mov	r1, r3
 800cb12:	4610      	mov	r0, r2
 800cb14:	f000 fe68 	bl	800d7e8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	689b      	ldr	r3, [r3, #8]
 800cb1e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	699b      	ldr	r3, [r3, #24]
 800cb26:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	6a1b      	ldr	r3, [r3, #32]
 800cb2e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800cb30:	683b      	ldr	r3, [r7, #0]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	697a      	ldr	r2, [r7, #20]
 800cb36:	4313      	orrs	r3, r2
 800cb38:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800cb3a:	693b      	ldr	r3, [r7, #16]
 800cb3c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800cb40:	f023 0303 	bic.w	r3, r3, #3
 800cb44:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800cb46:	683b      	ldr	r3, [r7, #0]
 800cb48:	689a      	ldr	r2, [r3, #8]
 800cb4a:	683b      	ldr	r3, [r7, #0]
 800cb4c:	699b      	ldr	r3, [r3, #24]
 800cb4e:	021b      	lsls	r3, r3, #8
 800cb50:	4313      	orrs	r3, r2
 800cb52:	693a      	ldr	r2, [r7, #16]
 800cb54:	4313      	orrs	r3, r2
 800cb56:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800cb58:	693b      	ldr	r3, [r7, #16]
 800cb5a:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800cb5e:	f023 030c 	bic.w	r3, r3, #12
 800cb62:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800cb64:	693b      	ldr	r3, [r7, #16]
 800cb66:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800cb6a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800cb6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800cb70:	683b      	ldr	r3, [r7, #0]
 800cb72:	68da      	ldr	r2, [r3, #12]
 800cb74:	683b      	ldr	r3, [r7, #0]
 800cb76:	69db      	ldr	r3, [r3, #28]
 800cb78:	021b      	lsls	r3, r3, #8
 800cb7a:	4313      	orrs	r3, r2
 800cb7c:	693a      	ldr	r2, [r7, #16]
 800cb7e:	4313      	orrs	r3, r2
 800cb80:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800cb82:	683b      	ldr	r3, [r7, #0]
 800cb84:	691b      	ldr	r3, [r3, #16]
 800cb86:	011a      	lsls	r2, r3, #4
 800cb88:	683b      	ldr	r3, [r7, #0]
 800cb8a:	6a1b      	ldr	r3, [r3, #32]
 800cb8c:	031b      	lsls	r3, r3, #12
 800cb8e:	4313      	orrs	r3, r2
 800cb90:	693a      	ldr	r2, [r7, #16]
 800cb92:	4313      	orrs	r3, r2
 800cb94:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800cb9c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800cba4:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800cba6:	683b      	ldr	r3, [r7, #0]
 800cba8:	685a      	ldr	r2, [r3, #4]
 800cbaa:	683b      	ldr	r3, [r7, #0]
 800cbac:	695b      	ldr	r3, [r3, #20]
 800cbae:	011b      	lsls	r3, r3, #4
 800cbb0:	4313      	orrs	r3, r2
 800cbb2:	68fa      	ldr	r2, [r7, #12]
 800cbb4:	4313      	orrs	r3, r2
 800cbb6:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	697a      	ldr	r2, [r7, #20]
 800cbbe:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	693a      	ldr	r2, [r7, #16]
 800cbc6:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	68fa      	ldr	r2, [r7, #12]
 800cbce:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	2201      	movs	r2, #1
 800cbd4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	2201      	movs	r2, #1
 800cbdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	2201      	movs	r2, #1
 800cbe4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	2201      	movs	r2, #1
 800cbec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	2201      	movs	r2, #1
 800cbf4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	2201      	movs	r2, #1
 800cbfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800cc00:	2300      	movs	r3, #0
}
 800cc02:	4618      	mov	r0, r3
 800cc04:	3718      	adds	r7, #24
 800cc06:	46bd      	mov	sp, r7
 800cc08:	bd80      	pop	{r7, pc}
 800cc0a:	bf00      	nop
 800cc0c:	08008655 	.word	0x08008655

0800cc10 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800cc10:	b580      	push	{r7, lr}
 800cc12:	b084      	sub	sp, #16
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	6078      	str	r0, [r7, #4]
 800cc18:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800cc20:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800cc28:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cc30:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cc38:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800cc3a:	683b      	ldr	r3, [r7, #0]
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d110      	bne.n	800cc62 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800cc40:	7bfb      	ldrb	r3, [r7, #15]
 800cc42:	2b01      	cmp	r3, #1
 800cc44:	d102      	bne.n	800cc4c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800cc46:	7b7b      	ldrb	r3, [r7, #13]
 800cc48:	2b01      	cmp	r3, #1
 800cc4a:	d001      	beq.n	800cc50 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800cc4c:	2301      	movs	r3, #1
 800cc4e:	e069      	b.n	800cd24 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	2202      	movs	r2, #2
 800cc54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	2202      	movs	r2, #2
 800cc5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cc60:	e031      	b.n	800ccc6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800cc62:	683b      	ldr	r3, [r7, #0]
 800cc64:	2b04      	cmp	r3, #4
 800cc66:	d110      	bne.n	800cc8a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800cc68:	7bbb      	ldrb	r3, [r7, #14]
 800cc6a:	2b01      	cmp	r3, #1
 800cc6c:	d102      	bne.n	800cc74 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800cc6e:	7b3b      	ldrb	r3, [r7, #12]
 800cc70:	2b01      	cmp	r3, #1
 800cc72:	d001      	beq.n	800cc78 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800cc74:	2301      	movs	r3, #1
 800cc76:	e055      	b.n	800cd24 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	2202      	movs	r2, #2
 800cc7c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	2202      	movs	r2, #2
 800cc84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800cc88:	e01d      	b.n	800ccc6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800cc8a:	7bfb      	ldrb	r3, [r7, #15]
 800cc8c:	2b01      	cmp	r3, #1
 800cc8e:	d108      	bne.n	800cca2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800cc90:	7bbb      	ldrb	r3, [r7, #14]
 800cc92:	2b01      	cmp	r3, #1
 800cc94:	d105      	bne.n	800cca2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800cc96:	7b7b      	ldrb	r3, [r7, #13]
 800cc98:	2b01      	cmp	r3, #1
 800cc9a:	d102      	bne.n	800cca2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800cc9c:	7b3b      	ldrb	r3, [r7, #12]
 800cc9e:	2b01      	cmp	r3, #1
 800cca0:	d001      	beq.n	800cca6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800cca2:	2301      	movs	r3, #1
 800cca4:	e03e      	b.n	800cd24 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	2202      	movs	r2, #2
 800ccaa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	2202      	movs	r2, #2
 800ccb2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	2202      	movs	r2, #2
 800ccba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	2202      	movs	r2, #2
 800ccc2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800ccc6:	683b      	ldr	r3, [r7, #0]
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d003      	beq.n	800ccd4 <HAL_TIM_Encoder_Start+0xc4>
 800cccc:	683b      	ldr	r3, [r7, #0]
 800ccce:	2b04      	cmp	r3, #4
 800ccd0:	d008      	beq.n	800cce4 <HAL_TIM_Encoder_Start+0xd4>
 800ccd2:	e00f      	b.n	800ccf4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	2201      	movs	r2, #1
 800ccda:	2100      	movs	r1, #0
 800ccdc:	4618      	mov	r0, r3
 800ccde:	f001 f9fd 	bl	800e0dc <TIM_CCxChannelCmd>
      break;
 800cce2:	e016      	b.n	800cd12 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	2201      	movs	r2, #1
 800ccea:	2104      	movs	r1, #4
 800ccec:	4618      	mov	r0, r3
 800ccee:	f001 f9f5 	bl	800e0dc <TIM_CCxChannelCmd>
      break;
 800ccf2:	e00e      	b.n	800cd12 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	2201      	movs	r2, #1
 800ccfa:	2100      	movs	r1, #0
 800ccfc:	4618      	mov	r0, r3
 800ccfe:	f001 f9ed 	bl	800e0dc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	2201      	movs	r2, #1
 800cd08:	2104      	movs	r1, #4
 800cd0a:	4618      	mov	r0, r3
 800cd0c:	f001 f9e6 	bl	800e0dc <TIM_CCxChannelCmd>
      break;
 800cd10:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	681a      	ldr	r2, [r3, #0]
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	f042 0201 	orr.w	r2, r2, #1
 800cd20:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800cd22:	2300      	movs	r3, #0
}
 800cd24:	4618      	mov	r0, r3
 800cd26:	3710      	adds	r7, #16
 800cd28:	46bd      	mov	sp, r7
 800cd2a:	bd80      	pop	{r7, pc}

0800cd2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800cd2c:	b580      	push	{r7, lr}
 800cd2e:	b084      	sub	sp, #16
 800cd30:	af00      	add	r7, sp, #0
 800cd32:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	68db      	ldr	r3, [r3, #12]
 800cd3a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	691b      	ldr	r3, [r3, #16]
 800cd42:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800cd44:	68bb      	ldr	r3, [r7, #8]
 800cd46:	f003 0302 	and.w	r3, r3, #2
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d026      	beq.n	800cd9c <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	f003 0302 	and.w	r3, r3, #2
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d021      	beq.n	800cd9c <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	f06f 0202 	mvn.w	r2, #2
 800cd60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	2201      	movs	r2, #1
 800cd66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	699b      	ldr	r3, [r3, #24]
 800cd6e:	f003 0303 	and.w	r3, r3, #3
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d005      	beq.n	800cd82 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800cd7c:	6878      	ldr	r0, [r7, #4]
 800cd7e:	4798      	blx	r3
 800cd80:	e009      	b.n	800cd96 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800cd88:	6878      	ldr	r0, [r7, #4]
 800cd8a:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800cd92:	6878      	ldr	r0, [r7, #4]
 800cd94:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	2200      	movs	r2, #0
 800cd9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800cd9c:	68bb      	ldr	r3, [r7, #8]
 800cd9e:	f003 0304 	and.w	r3, r3, #4
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d026      	beq.n	800cdf4 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	f003 0304 	and.w	r3, r3, #4
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d021      	beq.n	800cdf4 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	f06f 0204 	mvn.w	r2, #4
 800cdb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	2202      	movs	r2, #2
 800cdbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	699b      	ldr	r3, [r3, #24]
 800cdc6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d005      	beq.n	800cdda <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800cdd4:	6878      	ldr	r0, [r7, #4]
 800cdd6:	4798      	blx	r3
 800cdd8:	e009      	b.n	800cdee <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800cde0:	6878      	ldr	r0, [r7, #4]
 800cde2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800cdea:	6878      	ldr	r0, [r7, #4]
 800cdec:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	2200      	movs	r2, #0
 800cdf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800cdf4:	68bb      	ldr	r3, [r7, #8]
 800cdf6:	f003 0308 	and.w	r3, r3, #8
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d026      	beq.n	800ce4c <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	f003 0308 	and.w	r3, r3, #8
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d021      	beq.n	800ce4c <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	f06f 0208 	mvn.w	r2, #8
 800ce10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	2204      	movs	r2, #4
 800ce16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	69db      	ldr	r3, [r3, #28]
 800ce1e:	f003 0303 	and.w	r3, r3, #3
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d005      	beq.n	800ce32 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ce2c:	6878      	ldr	r0, [r7, #4]
 800ce2e:	4798      	blx	r3
 800ce30:	e009      	b.n	800ce46 <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ce38:	6878      	ldr	r0, [r7, #4]
 800ce3a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ce42:	6878      	ldr	r0, [r7, #4]
 800ce44:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	2200      	movs	r2, #0
 800ce4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800ce4c:	68bb      	ldr	r3, [r7, #8]
 800ce4e:	f003 0310 	and.w	r3, r3, #16
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d026      	beq.n	800cea4 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	f003 0310 	and.w	r3, r3, #16
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d021      	beq.n	800cea4 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	f06f 0210 	mvn.w	r2, #16
 800ce68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	2208      	movs	r2, #8
 800ce6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	69db      	ldr	r3, [r3, #28]
 800ce76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d005      	beq.n	800ce8a <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ce84:	6878      	ldr	r0, [r7, #4]
 800ce86:	4798      	blx	r3
 800ce88:	e009      	b.n	800ce9e <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ce90:	6878      	ldr	r0, [r7, #4]
 800ce92:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ce9a:	6878      	ldr	r0, [r7, #4]
 800ce9c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	2200      	movs	r2, #0
 800cea2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800cea4:	68bb      	ldr	r3, [r7, #8]
 800cea6:	f003 0301 	and.w	r3, r3, #1
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d00e      	beq.n	800cecc <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	f003 0301 	and.w	r3, r3, #1
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d009      	beq.n	800cecc <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	f06f 0201 	mvn.w	r2, #1
 800cec0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cec8:	6878      	ldr	r0, [r7, #4]
 800ceca:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800cecc:	68bb      	ldr	r3, [r7, #8]
 800cece:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d104      	bne.n	800cee0 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800ced6:	68bb      	ldr	r3, [r7, #8]
 800ced8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d00e      	beq.n	800cefe <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d009      	beq.n	800cefe <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800cef2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800cefa:	6878      	ldr	r0, [r7, #4]
 800cefc:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800cefe:	68bb      	ldr	r3, [r7, #8]
 800cf00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d00e      	beq.n	800cf26 <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d009      	beq.n	800cf26 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800cf1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800cf22:	6878      	ldr	r0, [r7, #4]
 800cf24:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800cf26:	68bb      	ldr	r3, [r7, #8]
 800cf28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d00e      	beq.n	800cf4e <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d009      	beq.n	800cf4e <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800cf42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cf4a:	6878      	ldr	r0, [r7, #4]
 800cf4c:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800cf4e:	68bb      	ldr	r3, [r7, #8]
 800cf50:	f003 0320 	and.w	r3, r3, #32
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d00e      	beq.n	800cf76 <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	f003 0320 	and.w	r3, r3, #32
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d009      	beq.n	800cf76 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	f06f 0220 	mvn.w	r2, #32
 800cf6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800cf72:	6878      	ldr	r0, [r7, #4]
 800cf74:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800cf76:	68bb      	ldr	r3, [r7, #8]
 800cf78:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d00e      	beq.n	800cf9e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d009      	beq.n	800cf9e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800cf92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800cf9a:	6878      	ldr	r0, [r7, #4]
 800cf9c:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800cf9e:	68bb      	ldr	r3, [r7, #8]
 800cfa0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d00e      	beq.n	800cfc6 <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d009      	beq.n	800cfc6 <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800cfba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800cfc2:	6878      	ldr	r0, [r7, #4]
 800cfc4:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800cfc6:	68bb      	ldr	r3, [r7, #8]
 800cfc8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d00e      	beq.n	800cfee <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d009      	beq.n	800cfee <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800cfe2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800cfea:	6878      	ldr	r0, [r7, #4]
 800cfec:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800cfee:	68bb      	ldr	r3, [r7, #8]
 800cff0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d00e      	beq.n	800d016 <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d009      	beq.n	800d016 <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800d00a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800d012:	6878      	ldr	r0, [r7, #4]
 800d014:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d016:	bf00      	nop
 800d018:	3710      	adds	r7, #16
 800d01a:	46bd      	mov	sp, r7
 800d01c:	bd80      	pop	{r7, pc}
	...

0800d020 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d020:	b580      	push	{r7, lr}
 800d022:	b086      	sub	sp, #24
 800d024:	af00      	add	r7, sp, #0
 800d026:	60f8      	str	r0, [r7, #12]
 800d028:	60b9      	str	r1, [r7, #8]
 800d02a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d02c:	2300      	movs	r3, #0
 800d02e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d036:	2b01      	cmp	r3, #1
 800d038:	d101      	bne.n	800d03e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800d03a:	2302      	movs	r3, #2
 800d03c:	e0ff      	b.n	800d23e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	2201      	movs	r2, #1
 800d042:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	2b14      	cmp	r3, #20
 800d04a:	f200 80f0 	bhi.w	800d22e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800d04e:	a201      	add	r2, pc, #4	@ (adr r2, 800d054 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800d050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d054:	0800d0a9 	.word	0x0800d0a9
 800d058:	0800d22f 	.word	0x0800d22f
 800d05c:	0800d22f 	.word	0x0800d22f
 800d060:	0800d22f 	.word	0x0800d22f
 800d064:	0800d0e9 	.word	0x0800d0e9
 800d068:	0800d22f 	.word	0x0800d22f
 800d06c:	0800d22f 	.word	0x0800d22f
 800d070:	0800d22f 	.word	0x0800d22f
 800d074:	0800d12b 	.word	0x0800d12b
 800d078:	0800d22f 	.word	0x0800d22f
 800d07c:	0800d22f 	.word	0x0800d22f
 800d080:	0800d22f 	.word	0x0800d22f
 800d084:	0800d16b 	.word	0x0800d16b
 800d088:	0800d22f 	.word	0x0800d22f
 800d08c:	0800d22f 	.word	0x0800d22f
 800d090:	0800d22f 	.word	0x0800d22f
 800d094:	0800d1ad 	.word	0x0800d1ad
 800d098:	0800d22f 	.word	0x0800d22f
 800d09c:	0800d22f 	.word	0x0800d22f
 800d0a0:	0800d22f 	.word	0x0800d22f
 800d0a4:	0800d1ed 	.word	0x0800d1ed
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	68b9      	ldr	r1, [r7, #8]
 800d0ae:	4618      	mov	r0, r3
 800d0b0:	f000 fc4e 	bl	800d950 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	699a      	ldr	r2, [r3, #24]
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	f042 0208 	orr.w	r2, r2, #8
 800d0c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	699a      	ldr	r2, [r3, #24]
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	f022 0204 	bic.w	r2, r2, #4
 800d0d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	6999      	ldr	r1, [r3, #24]
 800d0da:	68bb      	ldr	r3, [r7, #8]
 800d0dc:	691a      	ldr	r2, [r3, #16]
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	430a      	orrs	r2, r1
 800d0e4:	619a      	str	r2, [r3, #24]
      break;
 800d0e6:	e0a5      	b.n	800d234 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	68b9      	ldr	r1, [r7, #8]
 800d0ee:	4618      	mov	r0, r3
 800d0f0:	f000 fcc8 	bl	800da84 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	699a      	ldr	r2, [r3, #24]
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d102:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	699a      	ldr	r2, [r3, #24]
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d112:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	6999      	ldr	r1, [r3, #24]
 800d11a:	68bb      	ldr	r3, [r7, #8]
 800d11c:	691b      	ldr	r3, [r3, #16]
 800d11e:	021a      	lsls	r2, r3, #8
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	430a      	orrs	r2, r1
 800d126:	619a      	str	r2, [r3, #24]
      break;
 800d128:	e084      	b.n	800d234 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	68b9      	ldr	r1, [r7, #8]
 800d130:	4618      	mov	r0, r3
 800d132:	f000 fd3b 	bl	800dbac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	69da      	ldr	r2, [r3, #28]
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	f042 0208 	orr.w	r2, r2, #8
 800d144:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	69da      	ldr	r2, [r3, #28]
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	f022 0204 	bic.w	r2, r2, #4
 800d154:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	69d9      	ldr	r1, [r3, #28]
 800d15c:	68bb      	ldr	r3, [r7, #8]
 800d15e:	691a      	ldr	r2, [r3, #16]
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	430a      	orrs	r2, r1
 800d166:	61da      	str	r2, [r3, #28]
      break;
 800d168:	e064      	b.n	800d234 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	68b9      	ldr	r1, [r7, #8]
 800d170:	4618      	mov	r0, r3
 800d172:	f000 fdad 	bl	800dcd0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	69da      	ldr	r2, [r3, #28]
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d184:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	69da      	ldr	r2, [r3, #28]
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d194:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	69d9      	ldr	r1, [r3, #28]
 800d19c:	68bb      	ldr	r3, [r7, #8]
 800d19e:	691b      	ldr	r3, [r3, #16]
 800d1a0:	021a      	lsls	r2, r3, #8
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	430a      	orrs	r2, r1
 800d1a8:	61da      	str	r2, [r3, #28]
      break;
 800d1aa:	e043      	b.n	800d234 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	68b9      	ldr	r1, [r7, #8]
 800d1b2:	4618      	mov	r0, r3
 800d1b4:	f000 fe20 	bl	800ddf8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	f042 0208 	orr.w	r2, r2, #8
 800d1c6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	f022 0204 	bic.w	r2, r2, #4
 800d1d6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800d1de:	68bb      	ldr	r3, [r7, #8]
 800d1e0:	691a      	ldr	r2, [r3, #16]
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	430a      	orrs	r2, r1
 800d1e8:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800d1ea:	e023      	b.n	800d234 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	68b9      	ldr	r1, [r7, #8]
 800d1f2:	4618      	mov	r0, r3
 800d1f4:	f000 fe6a 	bl	800decc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d206:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d216:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800d21e:	68bb      	ldr	r3, [r7, #8]
 800d220:	691b      	ldr	r3, [r3, #16]
 800d222:	021a      	lsls	r2, r3, #8
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	430a      	orrs	r2, r1
 800d22a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800d22c:	e002      	b.n	800d234 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800d22e:	2301      	movs	r3, #1
 800d230:	75fb      	strb	r3, [r7, #23]
      break;
 800d232:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	2200      	movs	r2, #0
 800d238:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800d23c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d23e:	4618      	mov	r0, r3
 800d240:	3718      	adds	r7, #24
 800d242:	46bd      	mov	sp, r7
 800d244:	bd80      	pop	{r7, pc}
 800d246:	bf00      	nop

0800d248 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d248:	b580      	push	{r7, lr}
 800d24a:	b084      	sub	sp, #16
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	6078      	str	r0, [r7, #4]
 800d250:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d252:	2300      	movs	r3, #0
 800d254:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d25c:	2b01      	cmp	r3, #1
 800d25e:	d101      	bne.n	800d264 <HAL_TIM_ConfigClockSource+0x1c>
 800d260:	2302      	movs	r3, #2
 800d262:	e0f6      	b.n	800d452 <HAL_TIM_ConfigClockSource+0x20a>
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	2201      	movs	r2, #1
 800d268:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	2202      	movs	r2, #2
 800d270:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	689b      	ldr	r3, [r3, #8]
 800d27a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d27c:	68bb      	ldr	r3, [r7, #8]
 800d27e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800d282:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800d286:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d288:	68bb      	ldr	r3, [r7, #8]
 800d28a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800d28e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	68ba      	ldr	r2, [r7, #8]
 800d296:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d298:	683b      	ldr	r3, [r7, #0]
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	4a6f      	ldr	r2, [pc, #444]	@ (800d45c <HAL_TIM_ConfigClockSource+0x214>)
 800d29e:	4293      	cmp	r3, r2
 800d2a0:	f000 80c1 	beq.w	800d426 <HAL_TIM_ConfigClockSource+0x1de>
 800d2a4:	4a6d      	ldr	r2, [pc, #436]	@ (800d45c <HAL_TIM_ConfigClockSource+0x214>)
 800d2a6:	4293      	cmp	r3, r2
 800d2a8:	f200 80c6 	bhi.w	800d438 <HAL_TIM_ConfigClockSource+0x1f0>
 800d2ac:	4a6c      	ldr	r2, [pc, #432]	@ (800d460 <HAL_TIM_ConfigClockSource+0x218>)
 800d2ae:	4293      	cmp	r3, r2
 800d2b0:	f000 80b9 	beq.w	800d426 <HAL_TIM_ConfigClockSource+0x1de>
 800d2b4:	4a6a      	ldr	r2, [pc, #424]	@ (800d460 <HAL_TIM_ConfigClockSource+0x218>)
 800d2b6:	4293      	cmp	r3, r2
 800d2b8:	f200 80be 	bhi.w	800d438 <HAL_TIM_ConfigClockSource+0x1f0>
 800d2bc:	4a69      	ldr	r2, [pc, #420]	@ (800d464 <HAL_TIM_ConfigClockSource+0x21c>)
 800d2be:	4293      	cmp	r3, r2
 800d2c0:	f000 80b1 	beq.w	800d426 <HAL_TIM_ConfigClockSource+0x1de>
 800d2c4:	4a67      	ldr	r2, [pc, #412]	@ (800d464 <HAL_TIM_ConfigClockSource+0x21c>)
 800d2c6:	4293      	cmp	r3, r2
 800d2c8:	f200 80b6 	bhi.w	800d438 <HAL_TIM_ConfigClockSource+0x1f0>
 800d2cc:	4a66      	ldr	r2, [pc, #408]	@ (800d468 <HAL_TIM_ConfigClockSource+0x220>)
 800d2ce:	4293      	cmp	r3, r2
 800d2d0:	f000 80a9 	beq.w	800d426 <HAL_TIM_ConfigClockSource+0x1de>
 800d2d4:	4a64      	ldr	r2, [pc, #400]	@ (800d468 <HAL_TIM_ConfigClockSource+0x220>)
 800d2d6:	4293      	cmp	r3, r2
 800d2d8:	f200 80ae 	bhi.w	800d438 <HAL_TIM_ConfigClockSource+0x1f0>
 800d2dc:	4a63      	ldr	r2, [pc, #396]	@ (800d46c <HAL_TIM_ConfigClockSource+0x224>)
 800d2de:	4293      	cmp	r3, r2
 800d2e0:	f000 80a1 	beq.w	800d426 <HAL_TIM_ConfigClockSource+0x1de>
 800d2e4:	4a61      	ldr	r2, [pc, #388]	@ (800d46c <HAL_TIM_ConfigClockSource+0x224>)
 800d2e6:	4293      	cmp	r3, r2
 800d2e8:	f200 80a6 	bhi.w	800d438 <HAL_TIM_ConfigClockSource+0x1f0>
 800d2ec:	4a60      	ldr	r2, [pc, #384]	@ (800d470 <HAL_TIM_ConfigClockSource+0x228>)
 800d2ee:	4293      	cmp	r3, r2
 800d2f0:	f000 8099 	beq.w	800d426 <HAL_TIM_ConfigClockSource+0x1de>
 800d2f4:	4a5e      	ldr	r2, [pc, #376]	@ (800d470 <HAL_TIM_ConfigClockSource+0x228>)
 800d2f6:	4293      	cmp	r3, r2
 800d2f8:	f200 809e 	bhi.w	800d438 <HAL_TIM_ConfigClockSource+0x1f0>
 800d2fc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800d300:	f000 8091 	beq.w	800d426 <HAL_TIM_ConfigClockSource+0x1de>
 800d304:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800d308:	f200 8096 	bhi.w	800d438 <HAL_TIM_ConfigClockSource+0x1f0>
 800d30c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d310:	f000 8089 	beq.w	800d426 <HAL_TIM_ConfigClockSource+0x1de>
 800d314:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d318:	f200 808e 	bhi.w	800d438 <HAL_TIM_ConfigClockSource+0x1f0>
 800d31c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d320:	d03e      	beq.n	800d3a0 <HAL_TIM_ConfigClockSource+0x158>
 800d322:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d326:	f200 8087 	bhi.w	800d438 <HAL_TIM_ConfigClockSource+0x1f0>
 800d32a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d32e:	f000 8086 	beq.w	800d43e <HAL_TIM_ConfigClockSource+0x1f6>
 800d332:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d336:	d87f      	bhi.n	800d438 <HAL_TIM_ConfigClockSource+0x1f0>
 800d338:	2b70      	cmp	r3, #112	@ 0x70
 800d33a:	d01a      	beq.n	800d372 <HAL_TIM_ConfigClockSource+0x12a>
 800d33c:	2b70      	cmp	r3, #112	@ 0x70
 800d33e:	d87b      	bhi.n	800d438 <HAL_TIM_ConfigClockSource+0x1f0>
 800d340:	2b60      	cmp	r3, #96	@ 0x60
 800d342:	d050      	beq.n	800d3e6 <HAL_TIM_ConfigClockSource+0x19e>
 800d344:	2b60      	cmp	r3, #96	@ 0x60
 800d346:	d877      	bhi.n	800d438 <HAL_TIM_ConfigClockSource+0x1f0>
 800d348:	2b50      	cmp	r3, #80	@ 0x50
 800d34a:	d03c      	beq.n	800d3c6 <HAL_TIM_ConfigClockSource+0x17e>
 800d34c:	2b50      	cmp	r3, #80	@ 0x50
 800d34e:	d873      	bhi.n	800d438 <HAL_TIM_ConfigClockSource+0x1f0>
 800d350:	2b40      	cmp	r3, #64	@ 0x40
 800d352:	d058      	beq.n	800d406 <HAL_TIM_ConfigClockSource+0x1be>
 800d354:	2b40      	cmp	r3, #64	@ 0x40
 800d356:	d86f      	bhi.n	800d438 <HAL_TIM_ConfigClockSource+0x1f0>
 800d358:	2b30      	cmp	r3, #48	@ 0x30
 800d35a:	d064      	beq.n	800d426 <HAL_TIM_ConfigClockSource+0x1de>
 800d35c:	2b30      	cmp	r3, #48	@ 0x30
 800d35e:	d86b      	bhi.n	800d438 <HAL_TIM_ConfigClockSource+0x1f0>
 800d360:	2b20      	cmp	r3, #32
 800d362:	d060      	beq.n	800d426 <HAL_TIM_ConfigClockSource+0x1de>
 800d364:	2b20      	cmp	r3, #32
 800d366:	d867      	bhi.n	800d438 <HAL_TIM_ConfigClockSource+0x1f0>
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d05c      	beq.n	800d426 <HAL_TIM_ConfigClockSource+0x1de>
 800d36c:	2b10      	cmp	r3, #16
 800d36e:	d05a      	beq.n	800d426 <HAL_TIM_ConfigClockSource+0x1de>
 800d370:	e062      	b.n	800d438 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d376:	683b      	ldr	r3, [r7, #0]
 800d378:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d37a:	683b      	ldr	r3, [r7, #0]
 800d37c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d37e:	683b      	ldr	r3, [r7, #0]
 800d380:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d382:	f000 fe8b 	bl	800e09c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	689b      	ldr	r3, [r3, #8]
 800d38c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d38e:	68bb      	ldr	r3, [r7, #8]
 800d390:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800d394:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	68ba      	ldr	r2, [r7, #8]
 800d39c:	609a      	str	r2, [r3, #8]
      break;
 800d39e:	e04f      	b.n	800d440 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d3a4:	683b      	ldr	r3, [r7, #0]
 800d3a6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d3a8:	683b      	ldr	r3, [r7, #0]
 800d3aa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d3ac:	683b      	ldr	r3, [r7, #0]
 800d3ae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d3b0:	f000 fe74 	bl	800e09c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	689a      	ldr	r2, [r3, #8]
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800d3c2:	609a      	str	r2, [r3, #8]
      break;
 800d3c4:	e03c      	b.n	800d440 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d3ca:	683b      	ldr	r3, [r7, #0]
 800d3cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d3ce:	683b      	ldr	r3, [r7, #0]
 800d3d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d3d2:	461a      	mov	r2, r3
 800d3d4:	f000 fde6 	bl	800dfa4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	2150      	movs	r1, #80	@ 0x50
 800d3de:	4618      	mov	r0, r3
 800d3e0:	f000 fe3f 	bl	800e062 <TIM_ITRx_SetConfig>
      break;
 800d3e4:	e02c      	b.n	800d440 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d3ea:	683b      	ldr	r3, [r7, #0]
 800d3ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d3ee:	683b      	ldr	r3, [r7, #0]
 800d3f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d3f2:	461a      	mov	r2, r3
 800d3f4:	f000 fe05 	bl	800e002 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	2160      	movs	r1, #96	@ 0x60
 800d3fe:	4618      	mov	r0, r3
 800d400:	f000 fe2f 	bl	800e062 <TIM_ITRx_SetConfig>
      break;
 800d404:	e01c      	b.n	800d440 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d40a:	683b      	ldr	r3, [r7, #0]
 800d40c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d40e:	683b      	ldr	r3, [r7, #0]
 800d410:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d412:	461a      	mov	r2, r3
 800d414:	f000 fdc6 	bl	800dfa4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	2140      	movs	r1, #64	@ 0x40
 800d41e:	4618      	mov	r0, r3
 800d420:	f000 fe1f 	bl	800e062 <TIM_ITRx_SetConfig>
      break;
 800d424:	e00c      	b.n	800d440 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	681a      	ldr	r2, [r3, #0]
 800d42a:	683b      	ldr	r3, [r7, #0]
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	4619      	mov	r1, r3
 800d430:	4610      	mov	r0, r2
 800d432:	f000 fe16 	bl	800e062 <TIM_ITRx_SetConfig>
      break;
 800d436:	e003      	b.n	800d440 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800d438:	2301      	movs	r3, #1
 800d43a:	73fb      	strb	r3, [r7, #15]
      break;
 800d43c:	e000      	b.n	800d440 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800d43e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	2201      	movs	r2, #1
 800d444:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	2200      	movs	r2, #0
 800d44c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800d450:	7bfb      	ldrb	r3, [r7, #15]
}
 800d452:	4618      	mov	r0, r3
 800d454:	3710      	adds	r7, #16
 800d456:	46bd      	mov	sp, r7
 800d458:	bd80      	pop	{r7, pc}
 800d45a:	bf00      	nop
 800d45c:	00100070 	.word	0x00100070
 800d460:	00100060 	.word	0x00100060
 800d464:	00100050 	.word	0x00100050
 800d468:	00100040 	.word	0x00100040
 800d46c:	00100030 	.word	0x00100030
 800d470:	00100020 	.word	0x00100020

0800d474 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800d474:	b480      	push	{r7}
 800d476:	b083      	sub	sp, #12
 800d478:	af00      	add	r7, sp, #0
 800d47a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800d47c:	bf00      	nop
 800d47e:	370c      	adds	r7, #12
 800d480:	46bd      	mov	sp, r7
 800d482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d486:	4770      	bx	lr

0800d488 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d488:	b480      	push	{r7}
 800d48a:	b083      	sub	sp, #12
 800d48c:	af00      	add	r7, sp, #0
 800d48e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d490:	bf00      	nop
 800d492:	370c      	adds	r7, #12
 800d494:	46bd      	mov	sp, r7
 800d496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d49a:	4770      	bx	lr

0800d49c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d49c:	b480      	push	{r7}
 800d49e:	b083      	sub	sp, #12
 800d4a0:	af00      	add	r7, sp, #0
 800d4a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d4a4:	bf00      	nop
 800d4a6:	370c      	adds	r7, #12
 800d4a8:	46bd      	mov	sp, r7
 800d4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ae:	4770      	bx	lr

0800d4b0 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800d4b0:	b480      	push	{r7}
 800d4b2:	b083      	sub	sp, #12
 800d4b4:	af00      	add	r7, sp, #0
 800d4b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800d4b8:	bf00      	nop
 800d4ba:	370c      	adds	r7, #12
 800d4bc:	46bd      	mov	sp, r7
 800d4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c2:	4770      	bx	lr

0800d4c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d4c4:	b480      	push	{r7}
 800d4c6:	b083      	sub	sp, #12
 800d4c8:	af00      	add	r7, sp, #0
 800d4ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d4cc:	bf00      	nop
 800d4ce:	370c      	adds	r7, #12
 800d4d0:	46bd      	mov	sp, r7
 800d4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d6:	4770      	bx	lr

0800d4d8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800d4d8:	b480      	push	{r7}
 800d4da:	b083      	sub	sp, #12
 800d4dc:	af00      	add	r7, sp, #0
 800d4de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800d4e0:	bf00      	nop
 800d4e2:	370c      	adds	r7, #12
 800d4e4:	46bd      	mov	sp, r7
 800d4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ea:	4770      	bx	lr

0800d4ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d4ec:	b480      	push	{r7}
 800d4ee:	b083      	sub	sp, #12
 800d4f0:	af00      	add	r7, sp, #0
 800d4f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d4f4:	bf00      	nop
 800d4f6:	370c      	adds	r7, #12
 800d4f8:	46bd      	mov	sp, r7
 800d4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4fe:	4770      	bx	lr

0800d500 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800d500:	b480      	push	{r7}
 800d502:	b083      	sub	sp, #12
 800d504:	af00      	add	r7, sp, #0
 800d506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800d508:	bf00      	nop
 800d50a:	370c      	adds	r7, #12
 800d50c:	46bd      	mov	sp, r7
 800d50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d512:	4770      	bx	lr

0800d514 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800d514:	b480      	push	{r7}
 800d516:	b083      	sub	sp, #12
 800d518:	af00      	add	r7, sp, #0
 800d51a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800d51c:	bf00      	nop
 800d51e:	370c      	adds	r7, #12
 800d520:	46bd      	mov	sp, r7
 800d522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d526:	4770      	bx	lr

0800d528 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 800d528:	b480      	push	{r7}
 800d52a:	b087      	sub	sp, #28
 800d52c:	af00      	add	r7, sp, #0
 800d52e:	60f8      	str	r0, [r7, #12]
 800d530:	460b      	mov	r3, r1
 800d532:	607a      	str	r2, [r7, #4]
 800d534:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800d536:	2300      	movs	r3, #0
 800d538:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d101      	bne.n	800d544 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 800d540:	2301      	movs	r3, #1
 800d542:	e14a      	b.n	800d7da <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d54a:	b2db      	uxtb	r3, r3
 800d54c:	2b01      	cmp	r3, #1
 800d54e:	f040 80dd 	bne.w	800d70c <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 800d552:	7afb      	ldrb	r3, [r7, #11]
 800d554:	2b1f      	cmp	r3, #31
 800d556:	f200 80d6 	bhi.w	800d706 <HAL_TIM_RegisterCallback+0x1de>
 800d55a:	a201      	add	r2, pc, #4	@ (adr r2, 800d560 <HAL_TIM_RegisterCallback+0x38>)
 800d55c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d560:	0800d5e1 	.word	0x0800d5e1
 800d564:	0800d5e9 	.word	0x0800d5e9
 800d568:	0800d5f1 	.word	0x0800d5f1
 800d56c:	0800d5f9 	.word	0x0800d5f9
 800d570:	0800d601 	.word	0x0800d601
 800d574:	0800d609 	.word	0x0800d609
 800d578:	0800d611 	.word	0x0800d611
 800d57c:	0800d619 	.word	0x0800d619
 800d580:	0800d621 	.word	0x0800d621
 800d584:	0800d629 	.word	0x0800d629
 800d588:	0800d631 	.word	0x0800d631
 800d58c:	0800d639 	.word	0x0800d639
 800d590:	0800d641 	.word	0x0800d641
 800d594:	0800d649 	.word	0x0800d649
 800d598:	0800d653 	.word	0x0800d653
 800d59c:	0800d65d 	.word	0x0800d65d
 800d5a0:	0800d667 	.word	0x0800d667
 800d5a4:	0800d671 	.word	0x0800d671
 800d5a8:	0800d67b 	.word	0x0800d67b
 800d5ac:	0800d685 	.word	0x0800d685
 800d5b0:	0800d68f 	.word	0x0800d68f
 800d5b4:	0800d699 	.word	0x0800d699
 800d5b8:	0800d6a3 	.word	0x0800d6a3
 800d5bc:	0800d6ad 	.word	0x0800d6ad
 800d5c0:	0800d6b7 	.word	0x0800d6b7
 800d5c4:	0800d6c1 	.word	0x0800d6c1
 800d5c8:	0800d6cb 	.word	0x0800d6cb
 800d5cc:	0800d6d5 	.word	0x0800d6d5
 800d5d0:	0800d6df 	.word	0x0800d6df
 800d5d4:	0800d6e9 	.word	0x0800d6e9
 800d5d8:	0800d6f3 	.word	0x0800d6f3
 800d5dc:	0800d6fd 	.word	0x0800d6fd
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	687a      	ldr	r2, [r7, #4]
 800d5e4:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800d5e6:	e0f7      	b.n	800d7d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	687a      	ldr	r2, [r7, #4]
 800d5ec:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800d5ee:	e0f3      	b.n	800d7d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	687a      	ldr	r2, [r7, #4]
 800d5f4:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800d5f6:	e0ef      	b.n	800d7d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	687a      	ldr	r2, [r7, #4]
 800d5fc:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800d5fe:	e0eb      	b.n	800d7d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	687a      	ldr	r2, [r7, #4]
 800d604:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800d606:	e0e7      	b.n	800d7d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	687a      	ldr	r2, [r7, #4]
 800d60c:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800d60e:	e0e3      	b.n	800d7d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	687a      	ldr	r2, [r7, #4]
 800d614:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800d616:	e0df      	b.n	800d7d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	687a      	ldr	r2, [r7, #4]
 800d61c:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800d61e:	e0db      	b.n	800d7d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	687a      	ldr	r2, [r7, #4]
 800d624:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800d626:	e0d7      	b.n	800d7d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	687a      	ldr	r2, [r7, #4]
 800d62c:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800d62e:	e0d3      	b.n	800d7d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	687a      	ldr	r2, [r7, #4]
 800d634:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800d636:	e0cf      	b.n	800d7d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	687a      	ldr	r2, [r7, #4]
 800d63c:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800d63e:	e0cb      	b.n	800d7d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	687a      	ldr	r2, [r7, #4]
 800d644:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800d646:	e0c7      	b.n	800d7d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	687a      	ldr	r2, [r7, #4]
 800d64c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800d650:	e0c2      	b.n	800d7d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	687a      	ldr	r2, [r7, #4]
 800d656:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 800d65a:	e0bd      	b.n	800d7d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	687a      	ldr	r2, [r7, #4]
 800d660:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 800d664:	e0b8      	b.n	800d7d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	687a      	ldr	r2, [r7, #4]
 800d66a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 800d66e:	e0b3      	b.n	800d7d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	687a      	ldr	r2, [r7, #4]
 800d674:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 800d678:	e0ae      	b.n	800d7d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	687a      	ldr	r2, [r7, #4]
 800d67e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800d682:	e0a9      	b.n	800d7d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	687a      	ldr	r2, [r7, #4]
 800d688:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800d68c:	e0a4      	b.n	800d7d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	687a      	ldr	r2, [r7, #4]
 800d692:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800d696:	e09f      	b.n	800d7d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	687a      	ldr	r2, [r7, #4]
 800d69c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800d6a0:	e09a      	b.n	800d7d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	687a      	ldr	r2, [r7, #4]
 800d6a6:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800d6aa:	e095      	b.n	800d7d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	687a      	ldr	r2, [r7, #4]
 800d6b0:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800d6b4:	e090      	b.n	800d7d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	687a      	ldr	r2, [r7, #4]
 800d6ba:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800d6be:	e08b      	b.n	800d7d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	687a      	ldr	r2, [r7, #4]
 800d6c4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800d6c8:	e086      	b.n	800d7d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	687a      	ldr	r2, [r7, #4]
 800d6ce:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800d6d2:	e081      	b.n	800d7d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	687a      	ldr	r2, [r7, #4]
 800d6d8:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800d6dc:	e07c      	b.n	800d7d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	687a      	ldr	r2, [r7, #4]
 800d6e2:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800d6e6:	e077      	b.n	800d7d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	687a      	ldr	r2, [r7, #4]
 800d6ec:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 800d6f0:	e072      	b.n	800d7d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	687a      	ldr	r2, [r7, #4]
 800d6f6:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800d6fa:	e06d      	b.n	800d7d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	687a      	ldr	r2, [r7, #4]
 800d700:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800d704:	e068      	b.n	800d7d8 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800d706:	2301      	movs	r3, #1
 800d708:	75fb      	strb	r3, [r7, #23]
        break;
 800d70a:	e065      	b.n	800d7d8 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d712:	b2db      	uxtb	r3, r3
 800d714:	2b00      	cmp	r3, #0
 800d716:	d15d      	bne.n	800d7d4 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 800d718:	7afb      	ldrb	r3, [r7, #11]
 800d71a:	2b0d      	cmp	r3, #13
 800d71c:	d857      	bhi.n	800d7ce <HAL_TIM_RegisterCallback+0x2a6>
 800d71e:	a201      	add	r2, pc, #4	@ (adr r2, 800d724 <HAL_TIM_RegisterCallback+0x1fc>)
 800d720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d724:	0800d75d 	.word	0x0800d75d
 800d728:	0800d765 	.word	0x0800d765
 800d72c:	0800d76d 	.word	0x0800d76d
 800d730:	0800d775 	.word	0x0800d775
 800d734:	0800d77d 	.word	0x0800d77d
 800d738:	0800d785 	.word	0x0800d785
 800d73c:	0800d78d 	.word	0x0800d78d
 800d740:	0800d795 	.word	0x0800d795
 800d744:	0800d79d 	.word	0x0800d79d
 800d748:	0800d7a5 	.word	0x0800d7a5
 800d74c:	0800d7ad 	.word	0x0800d7ad
 800d750:	0800d7b5 	.word	0x0800d7b5
 800d754:	0800d7bd 	.word	0x0800d7bd
 800d758:	0800d7c5 	.word	0x0800d7c5
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	687a      	ldr	r2, [r7, #4]
 800d760:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800d762:	e039      	b.n	800d7d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	687a      	ldr	r2, [r7, #4]
 800d768:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800d76a:	e035      	b.n	800d7d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	687a      	ldr	r2, [r7, #4]
 800d770:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800d772:	e031      	b.n	800d7d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	687a      	ldr	r2, [r7, #4]
 800d778:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800d77a:	e02d      	b.n	800d7d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	687a      	ldr	r2, [r7, #4]
 800d780:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800d782:	e029      	b.n	800d7d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	687a      	ldr	r2, [r7, #4]
 800d788:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800d78a:	e025      	b.n	800d7d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	687a      	ldr	r2, [r7, #4]
 800d790:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800d792:	e021      	b.n	800d7d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	687a      	ldr	r2, [r7, #4]
 800d798:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800d79a:	e01d      	b.n	800d7d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	687a      	ldr	r2, [r7, #4]
 800d7a0:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800d7a2:	e019      	b.n	800d7d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	687a      	ldr	r2, [r7, #4]
 800d7a8:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800d7aa:	e015      	b.n	800d7d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	687a      	ldr	r2, [r7, #4]
 800d7b0:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800d7b2:	e011      	b.n	800d7d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	687a      	ldr	r2, [r7, #4]
 800d7b8:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800d7ba:	e00d      	b.n	800d7d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	687a      	ldr	r2, [r7, #4]
 800d7c0:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800d7c2:	e009      	b.n	800d7d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	687a      	ldr	r2, [r7, #4]
 800d7c8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800d7cc:	e004      	b.n	800d7d8 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800d7ce:	2301      	movs	r3, #1
 800d7d0:	75fb      	strb	r3, [r7, #23]
        break;
 800d7d2:	e001      	b.n	800d7d8 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 800d7d4:	2301      	movs	r3, #1
 800d7d6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800d7d8:	7dfb      	ldrb	r3, [r7, #23]
}
 800d7da:	4618      	mov	r0, r3
 800d7dc:	371c      	adds	r7, #28
 800d7de:	46bd      	mov	sp, r7
 800d7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7e4:	4770      	bx	lr
 800d7e6:	bf00      	nop

0800d7e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d7e8:	b480      	push	{r7}
 800d7ea:	b085      	sub	sp, #20
 800d7ec:	af00      	add	r7, sp, #0
 800d7ee:	6078      	str	r0, [r7, #4]
 800d7f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	4a4c      	ldr	r2, [pc, #304]	@ (800d92c <TIM_Base_SetConfig+0x144>)
 800d7fc:	4293      	cmp	r3, r2
 800d7fe:	d017      	beq.n	800d830 <TIM_Base_SetConfig+0x48>
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d806:	d013      	beq.n	800d830 <TIM_Base_SetConfig+0x48>
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	4a49      	ldr	r2, [pc, #292]	@ (800d930 <TIM_Base_SetConfig+0x148>)
 800d80c:	4293      	cmp	r3, r2
 800d80e:	d00f      	beq.n	800d830 <TIM_Base_SetConfig+0x48>
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	4a48      	ldr	r2, [pc, #288]	@ (800d934 <TIM_Base_SetConfig+0x14c>)
 800d814:	4293      	cmp	r3, r2
 800d816:	d00b      	beq.n	800d830 <TIM_Base_SetConfig+0x48>
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	4a47      	ldr	r2, [pc, #284]	@ (800d938 <TIM_Base_SetConfig+0x150>)
 800d81c:	4293      	cmp	r3, r2
 800d81e:	d007      	beq.n	800d830 <TIM_Base_SetConfig+0x48>
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	4a46      	ldr	r2, [pc, #280]	@ (800d93c <TIM_Base_SetConfig+0x154>)
 800d824:	4293      	cmp	r3, r2
 800d826:	d003      	beq.n	800d830 <TIM_Base_SetConfig+0x48>
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	4a45      	ldr	r2, [pc, #276]	@ (800d940 <TIM_Base_SetConfig+0x158>)
 800d82c:	4293      	cmp	r3, r2
 800d82e:	d108      	bne.n	800d842 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d836:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d838:	683b      	ldr	r3, [r7, #0]
 800d83a:	685b      	ldr	r3, [r3, #4]
 800d83c:	68fa      	ldr	r2, [r7, #12]
 800d83e:	4313      	orrs	r3, r2
 800d840:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	4a39      	ldr	r2, [pc, #228]	@ (800d92c <TIM_Base_SetConfig+0x144>)
 800d846:	4293      	cmp	r3, r2
 800d848:	d023      	beq.n	800d892 <TIM_Base_SetConfig+0xaa>
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d850:	d01f      	beq.n	800d892 <TIM_Base_SetConfig+0xaa>
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	4a36      	ldr	r2, [pc, #216]	@ (800d930 <TIM_Base_SetConfig+0x148>)
 800d856:	4293      	cmp	r3, r2
 800d858:	d01b      	beq.n	800d892 <TIM_Base_SetConfig+0xaa>
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	4a35      	ldr	r2, [pc, #212]	@ (800d934 <TIM_Base_SetConfig+0x14c>)
 800d85e:	4293      	cmp	r3, r2
 800d860:	d017      	beq.n	800d892 <TIM_Base_SetConfig+0xaa>
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	4a34      	ldr	r2, [pc, #208]	@ (800d938 <TIM_Base_SetConfig+0x150>)
 800d866:	4293      	cmp	r3, r2
 800d868:	d013      	beq.n	800d892 <TIM_Base_SetConfig+0xaa>
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	4a33      	ldr	r2, [pc, #204]	@ (800d93c <TIM_Base_SetConfig+0x154>)
 800d86e:	4293      	cmp	r3, r2
 800d870:	d00f      	beq.n	800d892 <TIM_Base_SetConfig+0xaa>
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	4a33      	ldr	r2, [pc, #204]	@ (800d944 <TIM_Base_SetConfig+0x15c>)
 800d876:	4293      	cmp	r3, r2
 800d878:	d00b      	beq.n	800d892 <TIM_Base_SetConfig+0xaa>
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	4a32      	ldr	r2, [pc, #200]	@ (800d948 <TIM_Base_SetConfig+0x160>)
 800d87e:	4293      	cmp	r3, r2
 800d880:	d007      	beq.n	800d892 <TIM_Base_SetConfig+0xaa>
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	4a31      	ldr	r2, [pc, #196]	@ (800d94c <TIM_Base_SetConfig+0x164>)
 800d886:	4293      	cmp	r3, r2
 800d888:	d003      	beq.n	800d892 <TIM_Base_SetConfig+0xaa>
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	4a2c      	ldr	r2, [pc, #176]	@ (800d940 <TIM_Base_SetConfig+0x158>)
 800d88e:	4293      	cmp	r3, r2
 800d890:	d108      	bne.n	800d8a4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d898:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d89a:	683b      	ldr	r3, [r7, #0]
 800d89c:	68db      	ldr	r3, [r3, #12]
 800d89e:	68fa      	ldr	r2, [r7, #12]
 800d8a0:	4313      	orrs	r3, r2
 800d8a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800d8aa:	683b      	ldr	r3, [r7, #0]
 800d8ac:	695b      	ldr	r3, [r3, #20]
 800d8ae:	4313      	orrs	r3, r2
 800d8b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	68fa      	ldr	r2, [r7, #12]
 800d8b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d8b8:	683b      	ldr	r3, [r7, #0]
 800d8ba:	689a      	ldr	r2, [r3, #8]
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d8c0:	683b      	ldr	r3, [r7, #0]
 800d8c2:	681a      	ldr	r2, [r3, #0]
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	4a18      	ldr	r2, [pc, #96]	@ (800d92c <TIM_Base_SetConfig+0x144>)
 800d8cc:	4293      	cmp	r3, r2
 800d8ce:	d013      	beq.n	800d8f8 <TIM_Base_SetConfig+0x110>
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	4a1a      	ldr	r2, [pc, #104]	@ (800d93c <TIM_Base_SetConfig+0x154>)
 800d8d4:	4293      	cmp	r3, r2
 800d8d6:	d00f      	beq.n	800d8f8 <TIM_Base_SetConfig+0x110>
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	4a1a      	ldr	r2, [pc, #104]	@ (800d944 <TIM_Base_SetConfig+0x15c>)
 800d8dc:	4293      	cmp	r3, r2
 800d8de:	d00b      	beq.n	800d8f8 <TIM_Base_SetConfig+0x110>
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	4a19      	ldr	r2, [pc, #100]	@ (800d948 <TIM_Base_SetConfig+0x160>)
 800d8e4:	4293      	cmp	r3, r2
 800d8e6:	d007      	beq.n	800d8f8 <TIM_Base_SetConfig+0x110>
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	4a18      	ldr	r2, [pc, #96]	@ (800d94c <TIM_Base_SetConfig+0x164>)
 800d8ec:	4293      	cmp	r3, r2
 800d8ee:	d003      	beq.n	800d8f8 <TIM_Base_SetConfig+0x110>
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	4a13      	ldr	r2, [pc, #76]	@ (800d940 <TIM_Base_SetConfig+0x158>)
 800d8f4:	4293      	cmp	r3, r2
 800d8f6:	d103      	bne.n	800d900 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d8f8:	683b      	ldr	r3, [r7, #0]
 800d8fa:	691a      	ldr	r2, [r3, #16]
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	2201      	movs	r2, #1
 800d904:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	691b      	ldr	r3, [r3, #16]
 800d90a:	f003 0301 	and.w	r3, r3, #1
 800d90e:	2b01      	cmp	r3, #1
 800d910:	d105      	bne.n	800d91e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	691b      	ldr	r3, [r3, #16]
 800d916:	f023 0201 	bic.w	r2, r3, #1
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	611a      	str	r2, [r3, #16]
  }
}
 800d91e:	bf00      	nop
 800d920:	3714      	adds	r7, #20
 800d922:	46bd      	mov	sp, r7
 800d924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d928:	4770      	bx	lr
 800d92a:	bf00      	nop
 800d92c:	40012c00 	.word	0x40012c00
 800d930:	40000400 	.word	0x40000400
 800d934:	40000800 	.word	0x40000800
 800d938:	40000c00 	.word	0x40000c00
 800d93c:	40013400 	.word	0x40013400
 800d940:	40015000 	.word	0x40015000
 800d944:	40014000 	.word	0x40014000
 800d948:	40014400 	.word	0x40014400
 800d94c:	40014800 	.word	0x40014800

0800d950 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d950:	b480      	push	{r7}
 800d952:	b087      	sub	sp, #28
 800d954:	af00      	add	r7, sp, #0
 800d956:	6078      	str	r0, [r7, #4]
 800d958:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	6a1b      	ldr	r3, [r3, #32]
 800d95e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	6a1b      	ldr	r3, [r3, #32]
 800d964:	f023 0201 	bic.w	r2, r3, #1
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	685b      	ldr	r3, [r3, #4]
 800d970:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	699b      	ldr	r3, [r3, #24]
 800d976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d97e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d982:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	f023 0303 	bic.w	r3, r3, #3
 800d98a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d98c:	683b      	ldr	r3, [r7, #0]
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	68fa      	ldr	r2, [r7, #12]
 800d992:	4313      	orrs	r3, r2
 800d994:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d996:	697b      	ldr	r3, [r7, #20]
 800d998:	f023 0302 	bic.w	r3, r3, #2
 800d99c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d99e:	683b      	ldr	r3, [r7, #0]
 800d9a0:	689b      	ldr	r3, [r3, #8]
 800d9a2:	697a      	ldr	r2, [r7, #20]
 800d9a4:	4313      	orrs	r3, r2
 800d9a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	4a30      	ldr	r2, [pc, #192]	@ (800da6c <TIM_OC1_SetConfig+0x11c>)
 800d9ac:	4293      	cmp	r3, r2
 800d9ae:	d013      	beq.n	800d9d8 <TIM_OC1_SetConfig+0x88>
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	4a2f      	ldr	r2, [pc, #188]	@ (800da70 <TIM_OC1_SetConfig+0x120>)
 800d9b4:	4293      	cmp	r3, r2
 800d9b6:	d00f      	beq.n	800d9d8 <TIM_OC1_SetConfig+0x88>
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	4a2e      	ldr	r2, [pc, #184]	@ (800da74 <TIM_OC1_SetConfig+0x124>)
 800d9bc:	4293      	cmp	r3, r2
 800d9be:	d00b      	beq.n	800d9d8 <TIM_OC1_SetConfig+0x88>
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	4a2d      	ldr	r2, [pc, #180]	@ (800da78 <TIM_OC1_SetConfig+0x128>)
 800d9c4:	4293      	cmp	r3, r2
 800d9c6:	d007      	beq.n	800d9d8 <TIM_OC1_SetConfig+0x88>
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	4a2c      	ldr	r2, [pc, #176]	@ (800da7c <TIM_OC1_SetConfig+0x12c>)
 800d9cc:	4293      	cmp	r3, r2
 800d9ce:	d003      	beq.n	800d9d8 <TIM_OC1_SetConfig+0x88>
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	4a2b      	ldr	r2, [pc, #172]	@ (800da80 <TIM_OC1_SetConfig+0x130>)
 800d9d4:	4293      	cmp	r3, r2
 800d9d6:	d10c      	bne.n	800d9f2 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d9d8:	697b      	ldr	r3, [r7, #20]
 800d9da:	f023 0308 	bic.w	r3, r3, #8
 800d9de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d9e0:	683b      	ldr	r3, [r7, #0]
 800d9e2:	68db      	ldr	r3, [r3, #12]
 800d9e4:	697a      	ldr	r2, [r7, #20]
 800d9e6:	4313      	orrs	r3, r2
 800d9e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d9ea:	697b      	ldr	r3, [r7, #20]
 800d9ec:	f023 0304 	bic.w	r3, r3, #4
 800d9f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	4a1d      	ldr	r2, [pc, #116]	@ (800da6c <TIM_OC1_SetConfig+0x11c>)
 800d9f6:	4293      	cmp	r3, r2
 800d9f8:	d013      	beq.n	800da22 <TIM_OC1_SetConfig+0xd2>
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	4a1c      	ldr	r2, [pc, #112]	@ (800da70 <TIM_OC1_SetConfig+0x120>)
 800d9fe:	4293      	cmp	r3, r2
 800da00:	d00f      	beq.n	800da22 <TIM_OC1_SetConfig+0xd2>
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	4a1b      	ldr	r2, [pc, #108]	@ (800da74 <TIM_OC1_SetConfig+0x124>)
 800da06:	4293      	cmp	r3, r2
 800da08:	d00b      	beq.n	800da22 <TIM_OC1_SetConfig+0xd2>
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	4a1a      	ldr	r2, [pc, #104]	@ (800da78 <TIM_OC1_SetConfig+0x128>)
 800da0e:	4293      	cmp	r3, r2
 800da10:	d007      	beq.n	800da22 <TIM_OC1_SetConfig+0xd2>
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	4a19      	ldr	r2, [pc, #100]	@ (800da7c <TIM_OC1_SetConfig+0x12c>)
 800da16:	4293      	cmp	r3, r2
 800da18:	d003      	beq.n	800da22 <TIM_OC1_SetConfig+0xd2>
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	4a18      	ldr	r2, [pc, #96]	@ (800da80 <TIM_OC1_SetConfig+0x130>)
 800da1e:	4293      	cmp	r3, r2
 800da20:	d111      	bne.n	800da46 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800da22:	693b      	ldr	r3, [r7, #16]
 800da24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800da28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800da2a:	693b      	ldr	r3, [r7, #16]
 800da2c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800da30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800da32:	683b      	ldr	r3, [r7, #0]
 800da34:	695b      	ldr	r3, [r3, #20]
 800da36:	693a      	ldr	r2, [r7, #16]
 800da38:	4313      	orrs	r3, r2
 800da3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800da3c:	683b      	ldr	r3, [r7, #0]
 800da3e:	699b      	ldr	r3, [r3, #24]
 800da40:	693a      	ldr	r2, [r7, #16]
 800da42:	4313      	orrs	r3, r2
 800da44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	693a      	ldr	r2, [r7, #16]
 800da4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	68fa      	ldr	r2, [r7, #12]
 800da50:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800da52:	683b      	ldr	r3, [r7, #0]
 800da54:	685a      	ldr	r2, [r3, #4]
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	697a      	ldr	r2, [r7, #20]
 800da5e:	621a      	str	r2, [r3, #32]
}
 800da60:	bf00      	nop
 800da62:	371c      	adds	r7, #28
 800da64:	46bd      	mov	sp, r7
 800da66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da6a:	4770      	bx	lr
 800da6c:	40012c00 	.word	0x40012c00
 800da70:	40013400 	.word	0x40013400
 800da74:	40014000 	.word	0x40014000
 800da78:	40014400 	.word	0x40014400
 800da7c:	40014800 	.word	0x40014800
 800da80:	40015000 	.word	0x40015000

0800da84 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800da84:	b480      	push	{r7}
 800da86:	b087      	sub	sp, #28
 800da88:	af00      	add	r7, sp, #0
 800da8a:	6078      	str	r0, [r7, #4]
 800da8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	6a1b      	ldr	r3, [r3, #32]
 800da92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	6a1b      	ldr	r3, [r3, #32]
 800da98:	f023 0210 	bic.w	r2, r3, #16
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	685b      	ldr	r3, [r3, #4]
 800daa4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	699b      	ldr	r3, [r3, #24]
 800daaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800dab2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800dab6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800dabe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800dac0:	683b      	ldr	r3, [r7, #0]
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	021b      	lsls	r3, r3, #8
 800dac6:	68fa      	ldr	r2, [r7, #12]
 800dac8:	4313      	orrs	r3, r2
 800daca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800dacc:	697b      	ldr	r3, [r7, #20]
 800dace:	f023 0320 	bic.w	r3, r3, #32
 800dad2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800dad4:	683b      	ldr	r3, [r7, #0]
 800dad6:	689b      	ldr	r3, [r3, #8]
 800dad8:	011b      	lsls	r3, r3, #4
 800dada:	697a      	ldr	r2, [r7, #20]
 800dadc:	4313      	orrs	r3, r2
 800dade:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	4a2c      	ldr	r2, [pc, #176]	@ (800db94 <TIM_OC2_SetConfig+0x110>)
 800dae4:	4293      	cmp	r3, r2
 800dae6:	d007      	beq.n	800daf8 <TIM_OC2_SetConfig+0x74>
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	4a2b      	ldr	r2, [pc, #172]	@ (800db98 <TIM_OC2_SetConfig+0x114>)
 800daec:	4293      	cmp	r3, r2
 800daee:	d003      	beq.n	800daf8 <TIM_OC2_SetConfig+0x74>
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	4a2a      	ldr	r2, [pc, #168]	@ (800db9c <TIM_OC2_SetConfig+0x118>)
 800daf4:	4293      	cmp	r3, r2
 800daf6:	d10d      	bne.n	800db14 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800daf8:	697b      	ldr	r3, [r7, #20]
 800dafa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800dafe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800db00:	683b      	ldr	r3, [r7, #0]
 800db02:	68db      	ldr	r3, [r3, #12]
 800db04:	011b      	lsls	r3, r3, #4
 800db06:	697a      	ldr	r2, [r7, #20]
 800db08:	4313      	orrs	r3, r2
 800db0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800db0c:	697b      	ldr	r3, [r7, #20]
 800db0e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800db12:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	4a1f      	ldr	r2, [pc, #124]	@ (800db94 <TIM_OC2_SetConfig+0x110>)
 800db18:	4293      	cmp	r3, r2
 800db1a:	d013      	beq.n	800db44 <TIM_OC2_SetConfig+0xc0>
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	4a1e      	ldr	r2, [pc, #120]	@ (800db98 <TIM_OC2_SetConfig+0x114>)
 800db20:	4293      	cmp	r3, r2
 800db22:	d00f      	beq.n	800db44 <TIM_OC2_SetConfig+0xc0>
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	4a1e      	ldr	r2, [pc, #120]	@ (800dba0 <TIM_OC2_SetConfig+0x11c>)
 800db28:	4293      	cmp	r3, r2
 800db2a:	d00b      	beq.n	800db44 <TIM_OC2_SetConfig+0xc0>
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	4a1d      	ldr	r2, [pc, #116]	@ (800dba4 <TIM_OC2_SetConfig+0x120>)
 800db30:	4293      	cmp	r3, r2
 800db32:	d007      	beq.n	800db44 <TIM_OC2_SetConfig+0xc0>
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	4a1c      	ldr	r2, [pc, #112]	@ (800dba8 <TIM_OC2_SetConfig+0x124>)
 800db38:	4293      	cmp	r3, r2
 800db3a:	d003      	beq.n	800db44 <TIM_OC2_SetConfig+0xc0>
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	4a17      	ldr	r2, [pc, #92]	@ (800db9c <TIM_OC2_SetConfig+0x118>)
 800db40:	4293      	cmp	r3, r2
 800db42:	d113      	bne.n	800db6c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800db44:	693b      	ldr	r3, [r7, #16]
 800db46:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800db4a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800db4c:	693b      	ldr	r3, [r7, #16]
 800db4e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800db52:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800db54:	683b      	ldr	r3, [r7, #0]
 800db56:	695b      	ldr	r3, [r3, #20]
 800db58:	009b      	lsls	r3, r3, #2
 800db5a:	693a      	ldr	r2, [r7, #16]
 800db5c:	4313      	orrs	r3, r2
 800db5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800db60:	683b      	ldr	r3, [r7, #0]
 800db62:	699b      	ldr	r3, [r3, #24]
 800db64:	009b      	lsls	r3, r3, #2
 800db66:	693a      	ldr	r2, [r7, #16]
 800db68:	4313      	orrs	r3, r2
 800db6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	693a      	ldr	r2, [r7, #16]
 800db70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	68fa      	ldr	r2, [r7, #12]
 800db76:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800db78:	683b      	ldr	r3, [r7, #0]
 800db7a:	685a      	ldr	r2, [r3, #4]
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	697a      	ldr	r2, [r7, #20]
 800db84:	621a      	str	r2, [r3, #32]
}
 800db86:	bf00      	nop
 800db88:	371c      	adds	r7, #28
 800db8a:	46bd      	mov	sp, r7
 800db8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db90:	4770      	bx	lr
 800db92:	bf00      	nop
 800db94:	40012c00 	.word	0x40012c00
 800db98:	40013400 	.word	0x40013400
 800db9c:	40015000 	.word	0x40015000
 800dba0:	40014000 	.word	0x40014000
 800dba4:	40014400 	.word	0x40014400
 800dba8:	40014800 	.word	0x40014800

0800dbac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800dbac:	b480      	push	{r7}
 800dbae:	b087      	sub	sp, #28
 800dbb0:	af00      	add	r7, sp, #0
 800dbb2:	6078      	str	r0, [r7, #4]
 800dbb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	6a1b      	ldr	r3, [r3, #32]
 800dbba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	6a1b      	ldr	r3, [r3, #32]
 800dbc0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	685b      	ldr	r3, [r3, #4]
 800dbcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	69db      	ldr	r3, [r3, #28]
 800dbd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800dbda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dbde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	f023 0303 	bic.w	r3, r3, #3
 800dbe6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800dbe8:	683b      	ldr	r3, [r7, #0]
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	68fa      	ldr	r2, [r7, #12]
 800dbee:	4313      	orrs	r3, r2
 800dbf0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800dbf2:	697b      	ldr	r3, [r7, #20]
 800dbf4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800dbf8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800dbfa:	683b      	ldr	r3, [r7, #0]
 800dbfc:	689b      	ldr	r3, [r3, #8]
 800dbfe:	021b      	lsls	r3, r3, #8
 800dc00:	697a      	ldr	r2, [r7, #20]
 800dc02:	4313      	orrs	r3, r2
 800dc04:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	4a2b      	ldr	r2, [pc, #172]	@ (800dcb8 <TIM_OC3_SetConfig+0x10c>)
 800dc0a:	4293      	cmp	r3, r2
 800dc0c:	d007      	beq.n	800dc1e <TIM_OC3_SetConfig+0x72>
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	4a2a      	ldr	r2, [pc, #168]	@ (800dcbc <TIM_OC3_SetConfig+0x110>)
 800dc12:	4293      	cmp	r3, r2
 800dc14:	d003      	beq.n	800dc1e <TIM_OC3_SetConfig+0x72>
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	4a29      	ldr	r2, [pc, #164]	@ (800dcc0 <TIM_OC3_SetConfig+0x114>)
 800dc1a:	4293      	cmp	r3, r2
 800dc1c:	d10d      	bne.n	800dc3a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800dc1e:	697b      	ldr	r3, [r7, #20]
 800dc20:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800dc24:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800dc26:	683b      	ldr	r3, [r7, #0]
 800dc28:	68db      	ldr	r3, [r3, #12]
 800dc2a:	021b      	lsls	r3, r3, #8
 800dc2c:	697a      	ldr	r2, [r7, #20]
 800dc2e:	4313      	orrs	r3, r2
 800dc30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800dc32:	697b      	ldr	r3, [r7, #20]
 800dc34:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800dc38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	4a1e      	ldr	r2, [pc, #120]	@ (800dcb8 <TIM_OC3_SetConfig+0x10c>)
 800dc3e:	4293      	cmp	r3, r2
 800dc40:	d013      	beq.n	800dc6a <TIM_OC3_SetConfig+0xbe>
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	4a1d      	ldr	r2, [pc, #116]	@ (800dcbc <TIM_OC3_SetConfig+0x110>)
 800dc46:	4293      	cmp	r3, r2
 800dc48:	d00f      	beq.n	800dc6a <TIM_OC3_SetConfig+0xbe>
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	4a1d      	ldr	r2, [pc, #116]	@ (800dcc4 <TIM_OC3_SetConfig+0x118>)
 800dc4e:	4293      	cmp	r3, r2
 800dc50:	d00b      	beq.n	800dc6a <TIM_OC3_SetConfig+0xbe>
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	4a1c      	ldr	r2, [pc, #112]	@ (800dcc8 <TIM_OC3_SetConfig+0x11c>)
 800dc56:	4293      	cmp	r3, r2
 800dc58:	d007      	beq.n	800dc6a <TIM_OC3_SetConfig+0xbe>
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	4a1b      	ldr	r2, [pc, #108]	@ (800dccc <TIM_OC3_SetConfig+0x120>)
 800dc5e:	4293      	cmp	r3, r2
 800dc60:	d003      	beq.n	800dc6a <TIM_OC3_SetConfig+0xbe>
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	4a16      	ldr	r2, [pc, #88]	@ (800dcc0 <TIM_OC3_SetConfig+0x114>)
 800dc66:	4293      	cmp	r3, r2
 800dc68:	d113      	bne.n	800dc92 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800dc6a:	693b      	ldr	r3, [r7, #16]
 800dc6c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800dc70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800dc72:	693b      	ldr	r3, [r7, #16]
 800dc74:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800dc78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800dc7a:	683b      	ldr	r3, [r7, #0]
 800dc7c:	695b      	ldr	r3, [r3, #20]
 800dc7e:	011b      	lsls	r3, r3, #4
 800dc80:	693a      	ldr	r2, [r7, #16]
 800dc82:	4313      	orrs	r3, r2
 800dc84:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800dc86:	683b      	ldr	r3, [r7, #0]
 800dc88:	699b      	ldr	r3, [r3, #24]
 800dc8a:	011b      	lsls	r3, r3, #4
 800dc8c:	693a      	ldr	r2, [r7, #16]
 800dc8e:	4313      	orrs	r3, r2
 800dc90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	693a      	ldr	r2, [r7, #16]
 800dc96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	68fa      	ldr	r2, [r7, #12]
 800dc9c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800dc9e:	683b      	ldr	r3, [r7, #0]
 800dca0:	685a      	ldr	r2, [r3, #4]
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	697a      	ldr	r2, [r7, #20]
 800dcaa:	621a      	str	r2, [r3, #32]
}
 800dcac:	bf00      	nop
 800dcae:	371c      	adds	r7, #28
 800dcb0:	46bd      	mov	sp, r7
 800dcb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb6:	4770      	bx	lr
 800dcb8:	40012c00 	.word	0x40012c00
 800dcbc:	40013400 	.word	0x40013400
 800dcc0:	40015000 	.word	0x40015000
 800dcc4:	40014000 	.word	0x40014000
 800dcc8:	40014400 	.word	0x40014400
 800dccc:	40014800 	.word	0x40014800

0800dcd0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800dcd0:	b480      	push	{r7}
 800dcd2:	b087      	sub	sp, #28
 800dcd4:	af00      	add	r7, sp, #0
 800dcd6:	6078      	str	r0, [r7, #4]
 800dcd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	6a1b      	ldr	r3, [r3, #32]
 800dcde:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	6a1b      	ldr	r3, [r3, #32]
 800dce4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	685b      	ldr	r3, [r3, #4]
 800dcf0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	69db      	ldr	r3, [r3, #28]
 800dcf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800dcfe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800dd02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800dd0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800dd0c:	683b      	ldr	r3, [r7, #0]
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	021b      	lsls	r3, r3, #8
 800dd12:	68fa      	ldr	r2, [r7, #12]
 800dd14:	4313      	orrs	r3, r2
 800dd16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800dd18:	697b      	ldr	r3, [r7, #20]
 800dd1a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800dd1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800dd20:	683b      	ldr	r3, [r7, #0]
 800dd22:	689b      	ldr	r3, [r3, #8]
 800dd24:	031b      	lsls	r3, r3, #12
 800dd26:	697a      	ldr	r2, [r7, #20]
 800dd28:	4313      	orrs	r3, r2
 800dd2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	4a2c      	ldr	r2, [pc, #176]	@ (800dde0 <TIM_OC4_SetConfig+0x110>)
 800dd30:	4293      	cmp	r3, r2
 800dd32:	d007      	beq.n	800dd44 <TIM_OC4_SetConfig+0x74>
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	4a2b      	ldr	r2, [pc, #172]	@ (800dde4 <TIM_OC4_SetConfig+0x114>)
 800dd38:	4293      	cmp	r3, r2
 800dd3a:	d003      	beq.n	800dd44 <TIM_OC4_SetConfig+0x74>
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	4a2a      	ldr	r2, [pc, #168]	@ (800dde8 <TIM_OC4_SetConfig+0x118>)
 800dd40:	4293      	cmp	r3, r2
 800dd42:	d10d      	bne.n	800dd60 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800dd44:	697b      	ldr	r3, [r7, #20]
 800dd46:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800dd4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800dd4c:	683b      	ldr	r3, [r7, #0]
 800dd4e:	68db      	ldr	r3, [r3, #12]
 800dd50:	031b      	lsls	r3, r3, #12
 800dd52:	697a      	ldr	r2, [r7, #20]
 800dd54:	4313      	orrs	r3, r2
 800dd56:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800dd58:	697b      	ldr	r3, [r7, #20]
 800dd5a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800dd5e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	4a1f      	ldr	r2, [pc, #124]	@ (800dde0 <TIM_OC4_SetConfig+0x110>)
 800dd64:	4293      	cmp	r3, r2
 800dd66:	d013      	beq.n	800dd90 <TIM_OC4_SetConfig+0xc0>
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	4a1e      	ldr	r2, [pc, #120]	@ (800dde4 <TIM_OC4_SetConfig+0x114>)
 800dd6c:	4293      	cmp	r3, r2
 800dd6e:	d00f      	beq.n	800dd90 <TIM_OC4_SetConfig+0xc0>
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	4a1e      	ldr	r2, [pc, #120]	@ (800ddec <TIM_OC4_SetConfig+0x11c>)
 800dd74:	4293      	cmp	r3, r2
 800dd76:	d00b      	beq.n	800dd90 <TIM_OC4_SetConfig+0xc0>
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	4a1d      	ldr	r2, [pc, #116]	@ (800ddf0 <TIM_OC4_SetConfig+0x120>)
 800dd7c:	4293      	cmp	r3, r2
 800dd7e:	d007      	beq.n	800dd90 <TIM_OC4_SetConfig+0xc0>
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	4a1c      	ldr	r2, [pc, #112]	@ (800ddf4 <TIM_OC4_SetConfig+0x124>)
 800dd84:	4293      	cmp	r3, r2
 800dd86:	d003      	beq.n	800dd90 <TIM_OC4_SetConfig+0xc0>
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	4a17      	ldr	r2, [pc, #92]	@ (800dde8 <TIM_OC4_SetConfig+0x118>)
 800dd8c:	4293      	cmp	r3, r2
 800dd8e:	d113      	bne.n	800ddb8 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800dd90:	693b      	ldr	r3, [r7, #16]
 800dd92:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800dd96:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800dd98:	693b      	ldr	r3, [r7, #16]
 800dd9a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800dd9e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800dda0:	683b      	ldr	r3, [r7, #0]
 800dda2:	695b      	ldr	r3, [r3, #20]
 800dda4:	019b      	lsls	r3, r3, #6
 800dda6:	693a      	ldr	r2, [r7, #16]
 800dda8:	4313      	orrs	r3, r2
 800ddaa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800ddac:	683b      	ldr	r3, [r7, #0]
 800ddae:	699b      	ldr	r3, [r3, #24]
 800ddb0:	019b      	lsls	r3, r3, #6
 800ddb2:	693a      	ldr	r2, [r7, #16]
 800ddb4:	4313      	orrs	r3, r2
 800ddb6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	693a      	ldr	r2, [r7, #16]
 800ddbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	68fa      	ldr	r2, [r7, #12]
 800ddc2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ddc4:	683b      	ldr	r3, [r7, #0]
 800ddc6:	685a      	ldr	r2, [r3, #4]
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	697a      	ldr	r2, [r7, #20]
 800ddd0:	621a      	str	r2, [r3, #32]
}
 800ddd2:	bf00      	nop
 800ddd4:	371c      	adds	r7, #28
 800ddd6:	46bd      	mov	sp, r7
 800ddd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dddc:	4770      	bx	lr
 800ddde:	bf00      	nop
 800dde0:	40012c00 	.word	0x40012c00
 800dde4:	40013400 	.word	0x40013400
 800dde8:	40015000 	.word	0x40015000
 800ddec:	40014000 	.word	0x40014000
 800ddf0:	40014400 	.word	0x40014400
 800ddf4:	40014800 	.word	0x40014800

0800ddf8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ddf8:	b480      	push	{r7}
 800ddfa:	b087      	sub	sp, #28
 800ddfc:	af00      	add	r7, sp, #0
 800ddfe:	6078      	str	r0, [r7, #4]
 800de00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	6a1b      	ldr	r3, [r3, #32]
 800de06:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	6a1b      	ldr	r3, [r3, #32]
 800de0c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	685b      	ldr	r3, [r3, #4]
 800de18:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800de1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800de26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800de2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800de2c:	683b      	ldr	r3, [r7, #0]
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	68fa      	ldr	r2, [r7, #12]
 800de32:	4313      	orrs	r3, r2
 800de34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800de36:	693b      	ldr	r3, [r7, #16]
 800de38:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800de3c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800de3e:	683b      	ldr	r3, [r7, #0]
 800de40:	689b      	ldr	r3, [r3, #8]
 800de42:	041b      	lsls	r3, r3, #16
 800de44:	693a      	ldr	r2, [r7, #16]
 800de46:	4313      	orrs	r3, r2
 800de48:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	4a19      	ldr	r2, [pc, #100]	@ (800deb4 <TIM_OC5_SetConfig+0xbc>)
 800de4e:	4293      	cmp	r3, r2
 800de50:	d013      	beq.n	800de7a <TIM_OC5_SetConfig+0x82>
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	4a18      	ldr	r2, [pc, #96]	@ (800deb8 <TIM_OC5_SetConfig+0xc0>)
 800de56:	4293      	cmp	r3, r2
 800de58:	d00f      	beq.n	800de7a <TIM_OC5_SetConfig+0x82>
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	4a17      	ldr	r2, [pc, #92]	@ (800debc <TIM_OC5_SetConfig+0xc4>)
 800de5e:	4293      	cmp	r3, r2
 800de60:	d00b      	beq.n	800de7a <TIM_OC5_SetConfig+0x82>
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	4a16      	ldr	r2, [pc, #88]	@ (800dec0 <TIM_OC5_SetConfig+0xc8>)
 800de66:	4293      	cmp	r3, r2
 800de68:	d007      	beq.n	800de7a <TIM_OC5_SetConfig+0x82>
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	4a15      	ldr	r2, [pc, #84]	@ (800dec4 <TIM_OC5_SetConfig+0xcc>)
 800de6e:	4293      	cmp	r3, r2
 800de70:	d003      	beq.n	800de7a <TIM_OC5_SetConfig+0x82>
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	4a14      	ldr	r2, [pc, #80]	@ (800dec8 <TIM_OC5_SetConfig+0xd0>)
 800de76:	4293      	cmp	r3, r2
 800de78:	d109      	bne.n	800de8e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800de7a:	697b      	ldr	r3, [r7, #20]
 800de7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800de80:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800de82:	683b      	ldr	r3, [r7, #0]
 800de84:	695b      	ldr	r3, [r3, #20]
 800de86:	021b      	lsls	r3, r3, #8
 800de88:	697a      	ldr	r2, [r7, #20]
 800de8a:	4313      	orrs	r3, r2
 800de8c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	697a      	ldr	r2, [r7, #20]
 800de92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	68fa      	ldr	r2, [r7, #12]
 800de98:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800de9a:	683b      	ldr	r3, [r7, #0]
 800de9c:	685a      	ldr	r2, [r3, #4]
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	693a      	ldr	r2, [r7, #16]
 800dea6:	621a      	str	r2, [r3, #32]
}
 800dea8:	bf00      	nop
 800deaa:	371c      	adds	r7, #28
 800deac:	46bd      	mov	sp, r7
 800deae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deb2:	4770      	bx	lr
 800deb4:	40012c00 	.word	0x40012c00
 800deb8:	40013400 	.word	0x40013400
 800debc:	40014000 	.word	0x40014000
 800dec0:	40014400 	.word	0x40014400
 800dec4:	40014800 	.word	0x40014800
 800dec8:	40015000 	.word	0x40015000

0800decc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800decc:	b480      	push	{r7}
 800dece:	b087      	sub	sp, #28
 800ded0:	af00      	add	r7, sp, #0
 800ded2:	6078      	str	r0, [r7, #4]
 800ded4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	6a1b      	ldr	r3, [r3, #32]
 800deda:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	6a1b      	ldr	r3, [r3, #32]
 800dee0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	685b      	ldr	r3, [r3, #4]
 800deec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800def2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800defa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800defe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800df00:	683b      	ldr	r3, [r7, #0]
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	021b      	lsls	r3, r3, #8
 800df06:	68fa      	ldr	r2, [r7, #12]
 800df08:	4313      	orrs	r3, r2
 800df0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800df0c:	693b      	ldr	r3, [r7, #16]
 800df0e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800df12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800df14:	683b      	ldr	r3, [r7, #0]
 800df16:	689b      	ldr	r3, [r3, #8]
 800df18:	051b      	lsls	r3, r3, #20
 800df1a:	693a      	ldr	r2, [r7, #16]
 800df1c:	4313      	orrs	r3, r2
 800df1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	4a1a      	ldr	r2, [pc, #104]	@ (800df8c <TIM_OC6_SetConfig+0xc0>)
 800df24:	4293      	cmp	r3, r2
 800df26:	d013      	beq.n	800df50 <TIM_OC6_SetConfig+0x84>
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	4a19      	ldr	r2, [pc, #100]	@ (800df90 <TIM_OC6_SetConfig+0xc4>)
 800df2c:	4293      	cmp	r3, r2
 800df2e:	d00f      	beq.n	800df50 <TIM_OC6_SetConfig+0x84>
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	4a18      	ldr	r2, [pc, #96]	@ (800df94 <TIM_OC6_SetConfig+0xc8>)
 800df34:	4293      	cmp	r3, r2
 800df36:	d00b      	beq.n	800df50 <TIM_OC6_SetConfig+0x84>
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	4a17      	ldr	r2, [pc, #92]	@ (800df98 <TIM_OC6_SetConfig+0xcc>)
 800df3c:	4293      	cmp	r3, r2
 800df3e:	d007      	beq.n	800df50 <TIM_OC6_SetConfig+0x84>
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	4a16      	ldr	r2, [pc, #88]	@ (800df9c <TIM_OC6_SetConfig+0xd0>)
 800df44:	4293      	cmp	r3, r2
 800df46:	d003      	beq.n	800df50 <TIM_OC6_SetConfig+0x84>
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	4a15      	ldr	r2, [pc, #84]	@ (800dfa0 <TIM_OC6_SetConfig+0xd4>)
 800df4c:	4293      	cmp	r3, r2
 800df4e:	d109      	bne.n	800df64 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800df50:	697b      	ldr	r3, [r7, #20]
 800df52:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800df56:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800df58:	683b      	ldr	r3, [r7, #0]
 800df5a:	695b      	ldr	r3, [r3, #20]
 800df5c:	029b      	lsls	r3, r3, #10
 800df5e:	697a      	ldr	r2, [r7, #20]
 800df60:	4313      	orrs	r3, r2
 800df62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	697a      	ldr	r2, [r7, #20]
 800df68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	68fa      	ldr	r2, [r7, #12]
 800df6e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800df70:	683b      	ldr	r3, [r7, #0]
 800df72:	685a      	ldr	r2, [r3, #4]
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	693a      	ldr	r2, [r7, #16]
 800df7c:	621a      	str	r2, [r3, #32]
}
 800df7e:	bf00      	nop
 800df80:	371c      	adds	r7, #28
 800df82:	46bd      	mov	sp, r7
 800df84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df88:	4770      	bx	lr
 800df8a:	bf00      	nop
 800df8c:	40012c00 	.word	0x40012c00
 800df90:	40013400 	.word	0x40013400
 800df94:	40014000 	.word	0x40014000
 800df98:	40014400 	.word	0x40014400
 800df9c:	40014800 	.word	0x40014800
 800dfa0:	40015000 	.word	0x40015000

0800dfa4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800dfa4:	b480      	push	{r7}
 800dfa6:	b087      	sub	sp, #28
 800dfa8:	af00      	add	r7, sp, #0
 800dfaa:	60f8      	str	r0, [r7, #12]
 800dfac:	60b9      	str	r1, [r7, #8]
 800dfae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	6a1b      	ldr	r3, [r3, #32]
 800dfb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	6a1b      	ldr	r3, [r3, #32]
 800dfba:	f023 0201 	bic.w	r2, r3, #1
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	699b      	ldr	r3, [r3, #24]
 800dfc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800dfc8:	693b      	ldr	r3, [r7, #16]
 800dfca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800dfce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	011b      	lsls	r3, r3, #4
 800dfd4:	693a      	ldr	r2, [r7, #16]
 800dfd6:	4313      	orrs	r3, r2
 800dfd8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800dfda:	697b      	ldr	r3, [r7, #20]
 800dfdc:	f023 030a 	bic.w	r3, r3, #10
 800dfe0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800dfe2:	697a      	ldr	r2, [r7, #20]
 800dfe4:	68bb      	ldr	r3, [r7, #8]
 800dfe6:	4313      	orrs	r3, r2
 800dfe8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	693a      	ldr	r2, [r7, #16]
 800dfee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	697a      	ldr	r2, [r7, #20]
 800dff4:	621a      	str	r2, [r3, #32]
}
 800dff6:	bf00      	nop
 800dff8:	371c      	adds	r7, #28
 800dffa:	46bd      	mov	sp, r7
 800dffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e000:	4770      	bx	lr

0800e002 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e002:	b480      	push	{r7}
 800e004:	b087      	sub	sp, #28
 800e006:	af00      	add	r7, sp, #0
 800e008:	60f8      	str	r0, [r7, #12]
 800e00a:	60b9      	str	r1, [r7, #8]
 800e00c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	6a1b      	ldr	r3, [r3, #32]
 800e012:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	6a1b      	ldr	r3, [r3, #32]
 800e018:	f023 0210 	bic.w	r2, r3, #16
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	699b      	ldr	r3, [r3, #24]
 800e024:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e026:	693b      	ldr	r3, [r7, #16]
 800e028:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800e02c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	031b      	lsls	r3, r3, #12
 800e032:	693a      	ldr	r2, [r7, #16]
 800e034:	4313      	orrs	r3, r2
 800e036:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e038:	697b      	ldr	r3, [r7, #20]
 800e03a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800e03e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e040:	68bb      	ldr	r3, [r7, #8]
 800e042:	011b      	lsls	r3, r3, #4
 800e044:	697a      	ldr	r2, [r7, #20]
 800e046:	4313      	orrs	r3, r2
 800e048:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	693a      	ldr	r2, [r7, #16]
 800e04e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	697a      	ldr	r2, [r7, #20]
 800e054:	621a      	str	r2, [r3, #32]
}
 800e056:	bf00      	nop
 800e058:	371c      	adds	r7, #28
 800e05a:	46bd      	mov	sp, r7
 800e05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e060:	4770      	bx	lr

0800e062 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e062:	b480      	push	{r7}
 800e064:	b085      	sub	sp, #20
 800e066:	af00      	add	r7, sp, #0
 800e068:	6078      	str	r0, [r7, #4]
 800e06a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	689b      	ldr	r3, [r3, #8]
 800e070:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800e078:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e07c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e07e:	683a      	ldr	r2, [r7, #0]
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	4313      	orrs	r3, r2
 800e084:	f043 0307 	orr.w	r3, r3, #7
 800e088:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	68fa      	ldr	r2, [r7, #12]
 800e08e:	609a      	str	r2, [r3, #8]
}
 800e090:	bf00      	nop
 800e092:	3714      	adds	r7, #20
 800e094:	46bd      	mov	sp, r7
 800e096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e09a:	4770      	bx	lr

0800e09c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e09c:	b480      	push	{r7}
 800e09e:	b087      	sub	sp, #28
 800e0a0:	af00      	add	r7, sp, #0
 800e0a2:	60f8      	str	r0, [r7, #12]
 800e0a4:	60b9      	str	r1, [r7, #8]
 800e0a6:	607a      	str	r2, [r7, #4]
 800e0a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	689b      	ldr	r3, [r3, #8]
 800e0ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e0b0:	697b      	ldr	r3, [r7, #20]
 800e0b2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800e0b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e0b8:	683b      	ldr	r3, [r7, #0]
 800e0ba:	021a      	lsls	r2, r3, #8
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	431a      	orrs	r2, r3
 800e0c0:	68bb      	ldr	r3, [r7, #8]
 800e0c2:	4313      	orrs	r3, r2
 800e0c4:	697a      	ldr	r2, [r7, #20]
 800e0c6:	4313      	orrs	r3, r2
 800e0c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	697a      	ldr	r2, [r7, #20]
 800e0ce:	609a      	str	r2, [r3, #8]
}
 800e0d0:	bf00      	nop
 800e0d2:	371c      	adds	r7, #28
 800e0d4:	46bd      	mov	sp, r7
 800e0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0da:	4770      	bx	lr

0800e0dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800e0dc:	b480      	push	{r7}
 800e0de:	b087      	sub	sp, #28
 800e0e0:	af00      	add	r7, sp, #0
 800e0e2:	60f8      	str	r0, [r7, #12]
 800e0e4:	60b9      	str	r1, [r7, #8]
 800e0e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800e0e8:	68bb      	ldr	r3, [r7, #8]
 800e0ea:	f003 031f 	and.w	r3, r3, #31
 800e0ee:	2201      	movs	r2, #1
 800e0f0:	fa02 f303 	lsl.w	r3, r2, r3
 800e0f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	6a1a      	ldr	r2, [r3, #32]
 800e0fa:	697b      	ldr	r3, [r7, #20]
 800e0fc:	43db      	mvns	r3, r3
 800e0fe:	401a      	ands	r2, r3
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	6a1a      	ldr	r2, [r3, #32]
 800e108:	68bb      	ldr	r3, [r7, #8]
 800e10a:	f003 031f 	and.w	r3, r3, #31
 800e10e:	6879      	ldr	r1, [r7, #4]
 800e110:	fa01 f303 	lsl.w	r3, r1, r3
 800e114:	431a      	orrs	r2, r3
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	621a      	str	r2, [r3, #32]
}
 800e11a:	bf00      	nop
 800e11c:	371c      	adds	r7, #28
 800e11e:	46bd      	mov	sp, r7
 800e120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e124:	4770      	bx	lr
	...

0800e128 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800e128:	b480      	push	{r7}
 800e12a:	b083      	sub	sp, #12
 800e12c:	af00      	add	r7, sp, #0
 800e12e:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	4a26      	ldr	r2, [pc, #152]	@ (800e1cc <TIM_ResetCallback+0xa4>)
 800e134:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	4a25      	ldr	r2, [pc, #148]	@ (800e1d0 <TIM_ResetCallback+0xa8>)
 800e13c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	4a24      	ldr	r2, [pc, #144]	@ (800e1d4 <TIM_ResetCallback+0xac>)
 800e144:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	4a23      	ldr	r2, [pc, #140]	@ (800e1d8 <TIM_ResetCallback+0xb0>)
 800e14c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	4a22      	ldr	r2, [pc, #136]	@ (800e1dc <TIM_ResetCallback+0xb4>)
 800e154:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	4a21      	ldr	r2, [pc, #132]	@ (800e1e0 <TIM_ResetCallback+0xb8>)
 800e15c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	4a20      	ldr	r2, [pc, #128]	@ (800e1e4 <TIM_ResetCallback+0xbc>)
 800e164:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	4a1f      	ldr	r2, [pc, #124]	@ (800e1e8 <TIM_ResetCallback+0xc0>)
 800e16c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	4a1e      	ldr	r2, [pc, #120]	@ (800e1ec <TIM_ResetCallback+0xc4>)
 800e174:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	4a1d      	ldr	r2, [pc, #116]	@ (800e1f0 <TIM_ResetCallback+0xc8>)
 800e17c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	4a1c      	ldr	r2, [pc, #112]	@ (800e1f4 <TIM_ResetCallback+0xcc>)
 800e184:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	4a1b      	ldr	r2, [pc, #108]	@ (800e1f8 <TIM_ResetCallback+0xd0>)
 800e18c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	4a1a      	ldr	r2, [pc, #104]	@ (800e1fc <TIM_ResetCallback+0xd4>)
 800e194:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	4a19      	ldr	r2, [pc, #100]	@ (800e200 <TIM_ResetCallback+0xd8>)
 800e19c:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	4a18      	ldr	r2, [pc, #96]	@ (800e204 <TIM_ResetCallback+0xdc>)
 800e1a4:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	4a17      	ldr	r2, [pc, #92]	@ (800e208 <TIM_ResetCallback+0xe0>)
 800e1ac:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	4a16      	ldr	r2, [pc, #88]	@ (800e20c <TIM_ResetCallback+0xe4>)
 800e1b4:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	4a15      	ldr	r2, [pc, #84]	@ (800e210 <TIM_ResetCallback+0xe8>)
 800e1bc:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 800e1c0:	bf00      	nop
 800e1c2:	370c      	adds	r7, #12
 800e1c4:	46bd      	mov	sp, r7
 800e1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ca:	4770      	bx	lr
 800e1cc:	08007131 	.word	0x08007131
 800e1d0:	0800d475 	.word	0x0800d475
 800e1d4:	0800d4ed 	.word	0x0800d4ed
 800e1d8:	0800d501 	.word	0x0800d501
 800e1dc:	0800d49d 	.word	0x0800d49d
 800e1e0:	0800d4b1 	.word	0x0800d4b1
 800e1e4:	0800d489 	.word	0x0800d489
 800e1e8:	0800d4c5 	.word	0x0800d4c5
 800e1ec:	0800d4d9 	.word	0x0800d4d9
 800e1f0:	0800d515 	.word	0x0800d515
 800e1f4:	0800e469 	.word	0x0800e469
 800e1f8:	0800e47d 	.word	0x0800e47d
 800e1fc:	0800e491 	.word	0x0800e491
 800e200:	0800e4a5 	.word	0x0800e4a5
 800e204:	0800e4b9 	.word	0x0800e4b9
 800e208:	0800e4cd 	.word	0x0800e4cd
 800e20c:	0800e4e1 	.word	0x0800e4e1
 800e210:	0800e4f5 	.word	0x0800e4f5

0800e214 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e214:	b480      	push	{r7}
 800e216:	b085      	sub	sp, #20
 800e218:	af00      	add	r7, sp, #0
 800e21a:	6078      	str	r0, [r7, #4]
 800e21c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e224:	2b01      	cmp	r3, #1
 800e226:	d101      	bne.n	800e22c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e228:	2302      	movs	r3, #2
 800e22a:	e074      	b.n	800e316 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	2201      	movs	r2, #1
 800e230:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	2202      	movs	r2, #2
 800e238:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	685b      	ldr	r3, [r3, #4]
 800e242:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	689b      	ldr	r3, [r3, #8]
 800e24a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	4a34      	ldr	r2, [pc, #208]	@ (800e324 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800e252:	4293      	cmp	r3, r2
 800e254:	d009      	beq.n	800e26a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	4a33      	ldr	r2, [pc, #204]	@ (800e328 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e25c:	4293      	cmp	r3, r2
 800e25e:	d004      	beq.n	800e26a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	4a31      	ldr	r2, [pc, #196]	@ (800e32c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e266:	4293      	cmp	r3, r2
 800e268:	d108      	bne.n	800e27c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800e270:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e272:	683b      	ldr	r3, [r7, #0]
 800e274:	685b      	ldr	r3, [r3, #4]
 800e276:	68fa      	ldr	r2, [r7, #12]
 800e278:	4313      	orrs	r3, r2
 800e27a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800e282:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e286:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e288:	683b      	ldr	r3, [r7, #0]
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	68fa      	ldr	r2, [r7, #12]
 800e28e:	4313      	orrs	r3, r2
 800e290:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	68fa      	ldr	r2, [r7, #12]
 800e298:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	4a21      	ldr	r2, [pc, #132]	@ (800e324 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800e2a0:	4293      	cmp	r3, r2
 800e2a2:	d022      	beq.n	800e2ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e2ac:	d01d      	beq.n	800e2ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	4a1f      	ldr	r2, [pc, #124]	@ (800e330 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800e2b4:	4293      	cmp	r3, r2
 800e2b6:	d018      	beq.n	800e2ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	4a1d      	ldr	r2, [pc, #116]	@ (800e334 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800e2be:	4293      	cmp	r3, r2
 800e2c0:	d013      	beq.n	800e2ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	4a1c      	ldr	r2, [pc, #112]	@ (800e338 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800e2c8:	4293      	cmp	r3, r2
 800e2ca:	d00e      	beq.n	800e2ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	4a15      	ldr	r2, [pc, #84]	@ (800e328 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e2d2:	4293      	cmp	r3, r2
 800e2d4:	d009      	beq.n	800e2ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	4a18      	ldr	r2, [pc, #96]	@ (800e33c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800e2dc:	4293      	cmp	r3, r2
 800e2de:	d004      	beq.n	800e2ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	4a11      	ldr	r2, [pc, #68]	@ (800e32c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e2e6:	4293      	cmp	r3, r2
 800e2e8:	d10c      	bne.n	800e304 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e2ea:	68bb      	ldr	r3, [r7, #8]
 800e2ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e2f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e2f2:	683b      	ldr	r3, [r7, #0]
 800e2f4:	689b      	ldr	r3, [r3, #8]
 800e2f6:	68ba      	ldr	r2, [r7, #8]
 800e2f8:	4313      	orrs	r3, r2
 800e2fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	68ba      	ldr	r2, [r7, #8]
 800e302:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	2201      	movs	r2, #1
 800e308:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	2200      	movs	r2, #0
 800e310:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800e314:	2300      	movs	r3, #0
}
 800e316:	4618      	mov	r0, r3
 800e318:	3714      	adds	r7, #20
 800e31a:	46bd      	mov	sp, r7
 800e31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e320:	4770      	bx	lr
 800e322:	bf00      	nop
 800e324:	40012c00 	.word	0x40012c00
 800e328:	40013400 	.word	0x40013400
 800e32c:	40015000 	.word	0x40015000
 800e330:	40000400 	.word	0x40000400
 800e334:	40000800 	.word	0x40000800
 800e338:	40000c00 	.word	0x40000c00
 800e33c:	40014000 	.word	0x40014000

0800e340 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800e340:	b480      	push	{r7}
 800e342:	b085      	sub	sp, #20
 800e344:	af00      	add	r7, sp, #0
 800e346:	6078      	str	r0, [r7, #4]
 800e348:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800e34a:	2300      	movs	r3, #0
 800e34c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e354:	2b01      	cmp	r3, #1
 800e356:	d101      	bne.n	800e35c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800e358:	2302      	movs	r3, #2
 800e35a:	e078      	b.n	800e44e <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	2201      	movs	r2, #1
 800e360:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800e36a:	683b      	ldr	r3, [r7, #0]
 800e36c:	68db      	ldr	r3, [r3, #12]
 800e36e:	4313      	orrs	r3, r2
 800e370:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800e378:	683b      	ldr	r3, [r7, #0]
 800e37a:	689b      	ldr	r3, [r3, #8]
 800e37c:	4313      	orrs	r3, r2
 800e37e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800e386:	683b      	ldr	r3, [r7, #0]
 800e388:	685b      	ldr	r3, [r3, #4]
 800e38a:	4313      	orrs	r3, r2
 800e38c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800e394:	683b      	ldr	r3, [r7, #0]
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	4313      	orrs	r3, r2
 800e39a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800e3a2:	683b      	ldr	r3, [r7, #0]
 800e3a4:	691b      	ldr	r3, [r3, #16]
 800e3a6:	4313      	orrs	r3, r2
 800e3a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800e3b0:	683b      	ldr	r3, [r7, #0]
 800e3b2:	695b      	ldr	r3, [r3, #20]
 800e3b4:	4313      	orrs	r3, r2
 800e3b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800e3be:	683b      	ldr	r3, [r7, #0]
 800e3c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e3c2:	4313      	orrs	r3, r2
 800e3c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800e3cc:	683b      	ldr	r3, [r7, #0]
 800e3ce:	699b      	ldr	r3, [r3, #24]
 800e3d0:	041b      	lsls	r3, r3, #16
 800e3d2:	4313      	orrs	r3, r2
 800e3d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800e3dc:	683b      	ldr	r3, [r7, #0]
 800e3de:	69db      	ldr	r3, [r3, #28]
 800e3e0:	4313      	orrs	r3, r2
 800e3e2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	4a1c      	ldr	r2, [pc, #112]	@ (800e45c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800e3ea:	4293      	cmp	r3, r2
 800e3ec:	d009      	beq.n	800e402 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	4a1b      	ldr	r2, [pc, #108]	@ (800e460 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800e3f4:	4293      	cmp	r3, r2
 800e3f6:	d004      	beq.n	800e402 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	4a19      	ldr	r2, [pc, #100]	@ (800e464 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800e3fe:	4293      	cmp	r3, r2
 800e400:	d11c      	bne.n	800e43c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800e408:	683b      	ldr	r3, [r7, #0]
 800e40a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e40c:	051b      	lsls	r3, r3, #20
 800e40e:	4313      	orrs	r3, r2
 800e410:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800e418:	683b      	ldr	r3, [r7, #0]
 800e41a:	6a1b      	ldr	r3, [r3, #32]
 800e41c:	4313      	orrs	r3, r2
 800e41e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800e426:	683b      	ldr	r3, [r7, #0]
 800e428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e42a:	4313      	orrs	r3, r2
 800e42c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800e434:	683b      	ldr	r3, [r7, #0]
 800e436:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e438:	4313      	orrs	r3, r2
 800e43a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	68fa      	ldr	r2, [r7, #12]
 800e442:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	2200      	movs	r2, #0
 800e448:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800e44c:	2300      	movs	r3, #0
}
 800e44e:	4618      	mov	r0, r3
 800e450:	3714      	adds	r7, #20
 800e452:	46bd      	mov	sp, r7
 800e454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e458:	4770      	bx	lr
 800e45a:	bf00      	nop
 800e45c:	40012c00 	.word	0x40012c00
 800e460:	40013400 	.word	0x40013400
 800e464:	40015000 	.word	0x40015000

0800e468 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e468:	b480      	push	{r7}
 800e46a:	b083      	sub	sp, #12
 800e46c:	af00      	add	r7, sp, #0
 800e46e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e470:	bf00      	nop
 800e472:	370c      	adds	r7, #12
 800e474:	46bd      	mov	sp, r7
 800e476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e47a:	4770      	bx	lr

0800e47c <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800e47c:	b480      	push	{r7}
 800e47e:	b083      	sub	sp, #12
 800e480:	af00      	add	r7, sp, #0
 800e482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800e484:	bf00      	nop
 800e486:	370c      	adds	r7, #12
 800e488:	46bd      	mov	sp, r7
 800e48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e48e:	4770      	bx	lr

0800e490 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e490:	b480      	push	{r7}
 800e492:	b083      	sub	sp, #12
 800e494:	af00      	add	r7, sp, #0
 800e496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e498:	bf00      	nop
 800e49a:	370c      	adds	r7, #12
 800e49c:	46bd      	mov	sp, r7
 800e49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4a2:	4770      	bx	lr

0800e4a4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e4a4:	b480      	push	{r7}
 800e4a6:	b083      	sub	sp, #12
 800e4a8:	af00      	add	r7, sp, #0
 800e4aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e4ac:	bf00      	nop
 800e4ae:	370c      	adds	r7, #12
 800e4b0:	46bd      	mov	sp, r7
 800e4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4b6:	4770      	bx	lr

0800e4b8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800e4b8:	b480      	push	{r7}
 800e4ba:	b083      	sub	sp, #12
 800e4bc:	af00      	add	r7, sp, #0
 800e4be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800e4c0:	bf00      	nop
 800e4c2:	370c      	adds	r7, #12
 800e4c4:	46bd      	mov	sp, r7
 800e4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ca:	4770      	bx	lr

0800e4cc <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800e4cc:	b480      	push	{r7}
 800e4ce:	b083      	sub	sp, #12
 800e4d0:	af00      	add	r7, sp, #0
 800e4d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800e4d4:	bf00      	nop
 800e4d6:	370c      	adds	r7, #12
 800e4d8:	46bd      	mov	sp, r7
 800e4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4de:	4770      	bx	lr

0800e4e0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800e4e0:	b480      	push	{r7}
 800e4e2:	b083      	sub	sp, #12
 800e4e4:	af00      	add	r7, sp, #0
 800e4e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800e4e8:	bf00      	nop
 800e4ea:	370c      	adds	r7, #12
 800e4ec:	46bd      	mov	sp, r7
 800e4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4f2:	4770      	bx	lr

0800e4f4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800e4f4:	b480      	push	{r7}
 800e4f6:	b083      	sub	sp, #12
 800e4f8:	af00      	add	r7, sp, #0
 800e4fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800e4fc:	bf00      	nop
 800e4fe:	370c      	adds	r7, #12
 800e500:	46bd      	mov	sp, r7
 800e502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e506:	4770      	bx	lr

0800e508 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e508:	b580      	push	{r7, lr}
 800e50a:	b082      	sub	sp, #8
 800e50c:	af00      	add	r7, sp, #0
 800e50e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	2b00      	cmp	r3, #0
 800e514:	d101      	bne.n	800e51a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e516:	2301      	movs	r3, #1
 800e518:	e050      	b.n	800e5bc <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e520:	2b00      	cmp	r3, #0
 800e522:	d114      	bne.n	800e54e <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	2200      	movs	r2, #0
 800e528:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800e52c:	6878      	ldr	r0, [r7, #4]
 800e52e:	f000 fd65 	bl	800effc <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d103      	bne.n	800e544 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	4a21      	ldr	r2, [pc, #132]	@ (800e5c4 <HAL_UART_Init+0xbc>)
 800e540:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800e54a:	6878      	ldr	r0, [r7, #4]
 800e54c:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	2224      	movs	r2, #36	@ 0x24
 800e552:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	681a      	ldr	r2, [r3, #0]
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	f022 0201 	bic.w	r2, r2, #1
 800e564:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d002      	beq.n	800e574 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 800e56e:	6878      	ldr	r0, [r7, #4]
 800e570:	f001 f892 	bl	800f698 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e574:	6878      	ldr	r0, [r7, #4]
 800e576:	f000 fd93 	bl	800f0a0 <UART_SetConfig>
 800e57a:	4603      	mov	r3, r0
 800e57c:	2b01      	cmp	r3, #1
 800e57e:	d101      	bne.n	800e584 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 800e580:	2301      	movs	r3, #1
 800e582:	e01b      	b.n	800e5bc <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	685a      	ldr	r2, [r3, #4]
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	681b      	ldr	r3, [r3, #0]
 800e58e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800e592:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	689a      	ldr	r2, [r3, #8]
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800e5a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	681a      	ldr	r2, [r3, #0]
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	f042 0201 	orr.w	r2, r2, #1
 800e5b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e5b4:	6878      	ldr	r0, [r7, #4]
 800e5b6:	f001 f911 	bl	800f7dc <UART_CheckIdleState>
 800e5ba:	4603      	mov	r3, r0
}
 800e5bc:	4618      	mov	r0, r3
 800e5be:	3708      	adds	r7, #8
 800e5c0:	46bd      	mov	sp, r7
 800e5c2:	bd80      	pop	{r7, pc}
 800e5c4:	080089a9 	.word	0x080089a9

0800e5c8 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 800e5c8:	b480      	push	{r7}
 800e5ca:	b087      	sub	sp, #28
 800e5cc:	af00      	add	r7, sp, #0
 800e5ce:	60f8      	str	r0, [r7, #12]
 800e5d0:	460b      	mov	r3, r1
 800e5d2:	607a      	str	r2, [r7, #4]
 800e5d4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800e5d6:	2300      	movs	r3, #0
 800e5d8:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d109      	bne.n	800e5f4 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e5e6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 800e5f0:	2301      	movs	r3, #1
 800e5f2:	e09c      	b.n	800e72e <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e5fa:	2b20      	cmp	r3, #32
 800e5fc:	d16c      	bne.n	800e6d8 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 800e5fe:	7afb      	ldrb	r3, [r7, #11]
 800e600:	2b0c      	cmp	r3, #12
 800e602:	d85e      	bhi.n	800e6c2 <HAL_UART_RegisterCallback+0xfa>
 800e604:	a201      	add	r2, pc, #4	@ (adr r2, 800e60c <HAL_UART_RegisterCallback+0x44>)
 800e606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e60a:	bf00      	nop
 800e60c:	0800e641 	.word	0x0800e641
 800e610:	0800e64b 	.word	0x0800e64b
 800e614:	0800e655 	.word	0x0800e655
 800e618:	0800e65f 	.word	0x0800e65f
 800e61c:	0800e669 	.word	0x0800e669
 800e620:	0800e673 	.word	0x0800e673
 800e624:	0800e67d 	.word	0x0800e67d
 800e628:	0800e687 	.word	0x0800e687
 800e62c:	0800e691 	.word	0x0800e691
 800e630:	0800e69b 	.word	0x0800e69b
 800e634:	0800e6a5 	.word	0x0800e6a5
 800e638:	0800e6af 	.word	0x0800e6af
 800e63c:	0800e6b9 	.word	0x0800e6b9
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	687a      	ldr	r2, [r7, #4]
 800e644:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800e648:	e070      	b.n	800e72c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	687a      	ldr	r2, [r7, #4]
 800e64e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800e652:	e06b      	b.n	800e72c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	687a      	ldr	r2, [r7, #4]
 800e658:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800e65c:	e066      	b.n	800e72c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	687a      	ldr	r2, [r7, #4]
 800e662:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800e666:	e061      	b.n	800e72c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	687a      	ldr	r2, [r7, #4]
 800e66c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800e670:	e05c      	b.n	800e72c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	687a      	ldr	r2, [r7, #4]
 800e676:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800e67a:	e057      	b.n	800e72c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	687a      	ldr	r2, [r7, #4]
 800e680:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800e684:	e052      	b.n	800e72c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	687a      	ldr	r2, [r7, #4]
 800e68a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800e68e:	e04d      	b.n	800e72c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 800e690:	68fb      	ldr	r3, [r7, #12]
 800e692:	687a      	ldr	r2, [r7, #4]
 800e694:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800e698:	e048      	b.n	800e72c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	687a      	ldr	r2, [r7, #4]
 800e69e:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800e6a2:	e043      	b.n	800e72c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	687a      	ldr	r2, [r7, #4]
 800e6a8:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800e6ac:	e03e      	b.n	800e72c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	687a      	ldr	r2, [r7, #4]
 800e6b2:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800e6b6:	e039      	b.n	800e72c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800e6b8:	68fb      	ldr	r3, [r7, #12]
 800e6ba:	687a      	ldr	r2, [r7, #4]
 800e6bc:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800e6c0:	e034      	b.n	800e72c <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e6c8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800e6cc:	68fb      	ldr	r3, [r7, #12]
 800e6ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800e6d2:	2301      	movs	r3, #1
 800e6d4:	75fb      	strb	r3, [r7, #23]
        break;
 800e6d6:	e029      	b.n	800e72c <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d11a      	bne.n	800e718 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 800e6e2:	7afb      	ldrb	r3, [r7, #11]
 800e6e4:	2b0b      	cmp	r3, #11
 800e6e6:	d002      	beq.n	800e6ee <HAL_UART_RegisterCallback+0x126>
 800e6e8:	2b0c      	cmp	r3, #12
 800e6ea:	d005      	beq.n	800e6f8 <HAL_UART_RegisterCallback+0x130>
 800e6ec:	e009      	b.n	800e702 <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	687a      	ldr	r2, [r7, #4]
 800e6f2:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800e6f6:	e019      	b.n	800e72c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	687a      	ldr	r2, [r7, #4]
 800e6fc:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800e700:	e014      	b.n	800e72c <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e708:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800e712:	2301      	movs	r3, #1
 800e714:	75fb      	strb	r3, [r7, #23]
        break;
 800e716:	e009      	b.n	800e72c <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e71e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800e722:	68fb      	ldr	r3, [r7, #12]
 800e724:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 800e728:	2301      	movs	r3, #1
 800e72a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800e72c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e72e:	4618      	mov	r0, r3
 800e730:	371c      	adds	r7, #28
 800e732:	46bd      	mov	sp, r7
 800e734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e738:	4770      	bx	lr
 800e73a:	bf00      	nop

0800e73c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e73c:	b580      	push	{r7, lr}
 800e73e:	b08a      	sub	sp, #40	@ 0x28
 800e740:	af00      	add	r7, sp, #0
 800e742:	60f8      	str	r0, [r7, #12]
 800e744:	60b9      	str	r1, [r7, #8]
 800e746:	4613      	mov	r3, r2
 800e748:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e750:	2b20      	cmp	r3, #32
 800e752:	d137      	bne.n	800e7c4 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800e754:	68bb      	ldr	r3, [r7, #8]
 800e756:	2b00      	cmp	r3, #0
 800e758:	d002      	beq.n	800e760 <HAL_UART_Receive_DMA+0x24>
 800e75a:	88fb      	ldrh	r3, [r7, #6]
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d101      	bne.n	800e764 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800e760:	2301      	movs	r3, #1
 800e762:	e030      	b.n	800e7c6 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	2200      	movs	r2, #0
 800e768:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	4a18      	ldr	r2, [pc, #96]	@ (800e7d0 <HAL_UART_Receive_DMA+0x94>)
 800e770:	4293      	cmp	r3, r2
 800e772:	d01f      	beq.n	800e7b4 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	685b      	ldr	r3, [r3, #4]
 800e77a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d018      	beq.n	800e7b4 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e788:	697b      	ldr	r3, [r7, #20]
 800e78a:	e853 3f00 	ldrex	r3, [r3]
 800e78e:	613b      	str	r3, [r7, #16]
   return(result);
 800e790:	693b      	ldr	r3, [r7, #16]
 800e792:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800e796:	627b      	str	r3, [r7, #36]	@ 0x24
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	461a      	mov	r2, r3
 800e79e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7a0:	623b      	str	r3, [r7, #32]
 800e7a2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7a4:	69f9      	ldr	r1, [r7, #28]
 800e7a6:	6a3a      	ldr	r2, [r7, #32]
 800e7a8:	e841 2300 	strex	r3, r2, [r1]
 800e7ac:	61bb      	str	r3, [r7, #24]
   return(result);
 800e7ae:	69bb      	ldr	r3, [r7, #24]
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d1e6      	bne.n	800e782 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800e7b4:	88fb      	ldrh	r3, [r7, #6]
 800e7b6:	461a      	mov	r2, r3
 800e7b8:	68b9      	ldr	r1, [r7, #8]
 800e7ba:	68f8      	ldr	r0, [r7, #12]
 800e7bc:	f001 f926 	bl	800fa0c <UART_Start_Receive_DMA>
 800e7c0:	4603      	mov	r3, r0
 800e7c2:	e000      	b.n	800e7c6 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800e7c4:	2302      	movs	r3, #2
  }
}
 800e7c6:	4618      	mov	r0, r3
 800e7c8:	3728      	adds	r7, #40	@ 0x28
 800e7ca:	46bd      	mov	sp, r7
 800e7cc:	bd80      	pop	{r7, pc}
 800e7ce:	bf00      	nop
 800e7d0:	40008000 	.word	0x40008000

0800e7d4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e7d4:	b580      	push	{r7, lr}
 800e7d6:	b0ba      	sub	sp, #232	@ 0xe8
 800e7d8:	af00      	add	r7, sp, #0
 800e7da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	69db      	ldr	r3, [r3, #28]
 800e7e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	689b      	ldr	r3, [r3, #8]
 800e7f6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800e7fa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800e7fe:	f640 030f 	movw	r3, #2063	@ 0x80f
 800e802:	4013      	ands	r3, r2
 800e804:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800e808:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d11b      	bne.n	800e848 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e810:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e814:	f003 0320 	and.w	r3, r3, #32
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d015      	beq.n	800e848 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e81c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e820:	f003 0320 	and.w	r3, r3, #32
 800e824:	2b00      	cmp	r3, #0
 800e826:	d105      	bne.n	800e834 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e828:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e82c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e830:	2b00      	cmp	r3, #0
 800e832:	d009      	beq.n	800e848 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e838:	2b00      	cmp	r3, #0
 800e83a:	f000 8312 	beq.w	800ee62 <HAL_UART_IRQHandler+0x68e>
      {
        huart->RxISR(huart);
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e842:	6878      	ldr	r0, [r7, #4]
 800e844:	4798      	blx	r3
      }
      return;
 800e846:	e30c      	b.n	800ee62 <HAL_UART_IRQHandler+0x68e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800e848:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	f000 8129 	beq.w	800eaa4 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800e852:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800e856:	4b90      	ldr	r3, [pc, #576]	@ (800ea98 <HAL_UART_IRQHandler+0x2c4>)
 800e858:	4013      	ands	r3, r2
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d106      	bne.n	800e86c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800e85e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800e862:	4b8e      	ldr	r3, [pc, #568]	@ (800ea9c <HAL_UART_IRQHandler+0x2c8>)
 800e864:	4013      	ands	r3, r2
 800e866:	2b00      	cmp	r3, #0
 800e868:	f000 811c 	beq.w	800eaa4 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e86c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e870:	f003 0301 	and.w	r3, r3, #1
 800e874:	2b00      	cmp	r3, #0
 800e876:	d011      	beq.n	800e89c <HAL_UART_IRQHandler+0xc8>
 800e878:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e87c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e880:	2b00      	cmp	r3, #0
 800e882:	d00b      	beq.n	800e89c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	2201      	movs	r2, #1
 800e88a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e892:	f043 0201 	orr.w	r2, r3, #1
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e89c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e8a0:	f003 0302 	and.w	r3, r3, #2
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d011      	beq.n	800e8cc <HAL_UART_IRQHandler+0xf8>
 800e8a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e8ac:	f003 0301 	and.w	r3, r3, #1
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d00b      	beq.n	800e8cc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	2202      	movs	r2, #2
 800e8ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e8c2:	f043 0204 	orr.w	r2, r3, #4
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e8cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e8d0:	f003 0304 	and.w	r3, r3, #4
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d011      	beq.n	800e8fc <HAL_UART_IRQHandler+0x128>
 800e8d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e8dc:	f003 0301 	and.w	r3, r3, #1
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d00b      	beq.n	800e8fc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	2204      	movs	r2, #4
 800e8ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e8f2:	f043 0202 	orr.w	r2, r3, #2
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e8fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e900:	f003 0308 	and.w	r3, r3, #8
 800e904:	2b00      	cmp	r3, #0
 800e906:	d017      	beq.n	800e938 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e908:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e90c:	f003 0320 	and.w	r3, r3, #32
 800e910:	2b00      	cmp	r3, #0
 800e912:	d105      	bne.n	800e920 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800e914:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800e918:	4b5f      	ldr	r3, [pc, #380]	@ (800ea98 <HAL_UART_IRQHandler+0x2c4>)
 800e91a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d00b      	beq.n	800e938 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	2208      	movs	r2, #8
 800e926:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e92e:	f043 0208 	orr.w	r2, r3, #8
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e938:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e93c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e940:	2b00      	cmp	r3, #0
 800e942:	d012      	beq.n	800e96a <HAL_UART_IRQHandler+0x196>
 800e944:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e948:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d00c      	beq.n	800e96a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e958:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e960:	f043 0220 	orr.w	r2, r3, #32
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e970:	2b00      	cmp	r3, #0
 800e972:	f000 8278 	beq.w	800ee66 <HAL_UART_IRQHandler+0x692>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e976:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e97a:	f003 0320 	and.w	r3, r3, #32
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d013      	beq.n	800e9aa <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e982:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e986:	f003 0320 	and.w	r3, r3, #32
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d105      	bne.n	800e99a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e98e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e992:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e996:	2b00      	cmp	r3, #0
 800e998:	d007      	beq.n	800e9aa <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d003      	beq.n	800e9aa <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e9a6:	6878      	ldr	r0, [r7, #4]
 800e9a8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e9b0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	689b      	ldr	r3, [r3, #8]
 800e9ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e9be:	2b40      	cmp	r3, #64	@ 0x40
 800e9c0:	d005      	beq.n	800e9ce <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e9c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e9c6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d058      	beq.n	800ea80 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e9ce:	6878      	ldr	r0, [r7, #4]
 800e9d0:	f001 f903 	bl	800fbda <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	689b      	ldr	r3, [r3, #8]
 800e9da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e9de:	2b40      	cmp	r3, #64	@ 0x40
 800e9e0:	d148      	bne.n	800ea74 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	3308      	adds	r3, #8
 800e9e8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800e9f0:	e853 3f00 	ldrex	r3, [r3]
 800e9f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800e9f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e9fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ea00:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	3308      	adds	r3, #8
 800ea0a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800ea0e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800ea12:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea16:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800ea1a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800ea1e:	e841 2300 	strex	r3, r2, [r1]
 800ea22:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800ea26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d1d9      	bne.n	800e9e2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d017      	beq.n	800ea68 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ea3e:	4a18      	ldr	r2, [pc, #96]	@ (800eaa0 <HAL_UART_IRQHandler+0x2cc>)
 800ea40:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ea48:	4618      	mov	r0, r3
 800ea4a:	f7fc f8ab 	bl	800aba4 <HAL_DMA_Abort_IT>
 800ea4e:	4603      	mov	r3, r0
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d01f      	beq.n	800ea94 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ea5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ea5c:	687a      	ldr	r2, [r7, #4]
 800ea5e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800ea62:	4610      	mov	r0, r2
 800ea64:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ea66:	e015      	b.n	800ea94 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800ea6e:	6878      	ldr	r0, [r7, #4]
 800ea70:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ea72:	e00f      	b.n	800ea94 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800ea7a:	6878      	ldr	r0, [r7, #4]
 800ea7c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ea7e:	e009      	b.n	800ea94 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800ea86:	6878      	ldr	r0, [r7, #4]
 800ea88:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	2200      	movs	r2, #0
 800ea8e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800ea92:	e1e8      	b.n	800ee66 <HAL_UART_IRQHandler+0x692>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ea94:	bf00      	nop
    return;
 800ea96:	e1e6      	b.n	800ee66 <HAL_UART_IRQHandler+0x692>
 800ea98:	10000001 	.word	0x10000001
 800ea9c:	04000120 	.word	0x04000120
 800eaa0:	0800fea5 	.word	0x0800fea5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800eaa8:	2b01      	cmp	r3, #1
 800eaaa:	f040 8176 	bne.w	800ed9a <HAL_UART_IRQHandler+0x5c6>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800eaae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800eab2:	f003 0310 	and.w	r3, r3, #16
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	f000 816f 	beq.w	800ed9a <HAL_UART_IRQHandler+0x5c6>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800eabc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800eac0:	f003 0310 	and.w	r3, r3, #16
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	f000 8168 	beq.w	800ed9a <HAL_UART_IRQHandler+0x5c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	2210      	movs	r2, #16
 800ead0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	689b      	ldr	r3, [r3, #8]
 800ead8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800eadc:	2b40      	cmp	r3, #64	@ 0x40
 800eade:	f040 80dc 	bne.w	800ec9a <HAL_UART_IRQHandler+0x4c6>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	685b      	ldr	r3, [r3, #4]
 800eaec:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800eaf0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	f000 80b1 	beq.w	800ec5c <HAL_UART_IRQHandler+0x488>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800eb00:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800eb04:	429a      	cmp	r2, r3
 800eb06:	f080 80a9 	bcs.w	800ec5c <HAL_UART_IRQHandler+0x488>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800eb10:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800eb1a:	681b      	ldr	r3, [r3, #0]
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	f003 0320 	and.w	r3, r3, #32
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	f040 8087 	bne.w	800ec36 <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb30:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800eb34:	e853 3f00 	ldrex	r3, [r3]
 800eb38:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800eb3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800eb40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800eb44:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	461a      	mov	r2, r3
 800eb4e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800eb52:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800eb56:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb5a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800eb5e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800eb62:	e841 2300 	strex	r3, r2, [r1]
 800eb66:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800eb6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d1da      	bne.n	800eb28 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	3308      	adds	r3, #8
 800eb78:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb7a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800eb7c:	e853 3f00 	ldrex	r3, [r3]
 800eb80:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800eb82:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800eb84:	f023 0301 	bic.w	r3, r3, #1
 800eb88:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	3308      	adds	r3, #8
 800eb92:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800eb96:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800eb9a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb9c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800eb9e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800eba2:	e841 2300 	strex	r3, r2, [r1]
 800eba6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800eba8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d1e1      	bne.n	800eb72 <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	3308      	adds	r3, #8
 800ebb4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebb6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ebb8:	e853 3f00 	ldrex	r3, [r3]
 800ebbc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800ebbe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ebc0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ebc4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	3308      	adds	r3, #8
 800ebce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800ebd2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800ebd4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ebd6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800ebd8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ebda:	e841 2300 	strex	r3, r2, [r1]
 800ebde:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800ebe0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d1e3      	bne.n	800ebae <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	2220      	movs	r2, #32
 800ebea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	2200      	movs	r2, #0
 800ebf2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebfa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ebfc:	e853 3f00 	ldrex	r3, [r3]
 800ec00:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ec02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ec04:	f023 0310 	bic.w	r3, r3, #16
 800ec08:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	461a      	mov	r2, r3
 800ec12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ec16:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ec18:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec1a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ec1c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ec1e:	e841 2300 	strex	r3, r2, [r1]
 800ec22:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ec24:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d1e4      	bne.n	800ebf4 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ec30:	4618      	mov	r0, r3
 800ec32:	f7fb ff5e 	bl	800aaf2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	2202      	movs	r2, #2
 800ec3a:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800ec42:	687a      	ldr	r2, [r7, #4]
 800ec44:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 800ec48:	687a      	ldr	r2, [r7, #4]
 800ec4a:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 800ec4e:	b292      	uxth	r2, r2
 800ec50:	1a8a      	subs	r2, r1, r2
 800ec52:	b292      	uxth	r2, r2
 800ec54:	4611      	mov	r1, r2
 800ec56:	6878      	ldr	r0, [r7, #4]
 800ec58:	4798      	blx	r3
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800ec5a:	e106      	b.n	800ee6a <HAL_UART_IRQHandler+0x696>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ec62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ec66:	429a      	cmp	r2, r3
 800ec68:	f040 80ff 	bne.w	800ee6a <HAL_UART_IRQHandler+0x696>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	f003 0320 	and.w	r3, r3, #32
 800ec7a:	2b20      	cmp	r3, #32
 800ec7c:	f040 80f5 	bne.w	800ee6a <HAL_UART_IRQHandler+0x696>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	2202      	movs	r2, #2
 800ec84:	671a      	str	r2, [r3, #112]	@ 0x70
            huart->RxEventCallback(huart, huart->RxXferSize);
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800ec8c:	687a      	ldr	r2, [r7, #4]
 800ec8e:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800ec92:	4611      	mov	r1, r2
 800ec94:	6878      	ldr	r0, [r7, #4]
 800ec96:	4798      	blx	r3
      return;
 800ec98:	e0e7      	b.n	800ee6a <HAL_UART_IRQHandler+0x696>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800eca6:	b29b      	uxth	r3, r3
 800eca8:	1ad3      	subs	r3, r2, r3
 800ecaa:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ecb4:	b29b      	uxth	r3, r3
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	f000 80d9 	beq.w	800ee6e <HAL_UART_IRQHandler+0x69a>
          && (nb_rx_data > 0U))
 800ecbc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	f000 80d4 	beq.w	800ee6e <HAL_UART_IRQHandler+0x69a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eccc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ecce:	e853 3f00 	ldrex	r3, [r3]
 800ecd2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ecd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ecd6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ecda:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	681b      	ldr	r3, [r3, #0]
 800ece2:	461a      	mov	r2, r3
 800ece4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ece8:	647b      	str	r3, [r7, #68]	@ 0x44
 800ecea:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ecec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ecee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ecf0:	e841 2300 	strex	r3, r2, [r1]
 800ecf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ecf6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d1e4      	bne.n	800ecc6 <HAL_UART_IRQHandler+0x4f2>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	3308      	adds	r3, #8
 800ed02:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed06:	e853 3f00 	ldrex	r3, [r3]
 800ed0a:	623b      	str	r3, [r7, #32]
   return(result);
 800ed0c:	6a3b      	ldr	r3, [r7, #32]
 800ed0e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ed12:	f023 0301 	bic.w	r3, r3, #1
 800ed16:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	3308      	adds	r3, #8
 800ed20:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800ed24:	633a      	str	r2, [r7, #48]	@ 0x30
 800ed26:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed28:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ed2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ed2c:	e841 2300 	strex	r3, r2, [r1]
 800ed30:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ed32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d1e1      	bne.n	800ecfc <HAL_UART_IRQHandler+0x528>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	2220      	movs	r2, #32
 800ed3c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	2200      	movs	r2, #0
 800ed44:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	2200      	movs	r2, #0
 800ed4a:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed52:	693b      	ldr	r3, [r7, #16]
 800ed54:	e853 3f00 	ldrex	r3, [r3]
 800ed58:	60fb      	str	r3, [r7, #12]
   return(result);
 800ed5a:	68fb      	ldr	r3, [r7, #12]
 800ed5c:	f023 0310 	bic.w	r3, r3, #16
 800ed60:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	461a      	mov	r2, r3
 800ed6a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800ed6e:	61fb      	str	r3, [r7, #28]
 800ed70:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed72:	69b9      	ldr	r1, [r7, #24]
 800ed74:	69fa      	ldr	r2, [r7, #28]
 800ed76:	e841 2300 	strex	r3, r2, [r1]
 800ed7a:	617b      	str	r3, [r7, #20]
   return(result);
 800ed7c:	697b      	ldr	r3, [r7, #20]
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d1e4      	bne.n	800ed4c <HAL_UART_IRQHandler+0x578>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	2202      	movs	r2, #2
 800ed86:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800ed8e:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 800ed92:	4611      	mov	r1, r2
 800ed94:	6878      	ldr	r0, [r7, #4]
 800ed96:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ed98:	e069      	b.n	800ee6e <HAL_UART_IRQHandler+0x69a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ed9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ed9e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	d010      	beq.n	800edc8 <HAL_UART_IRQHandler+0x5f4>
 800eda6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800edaa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d00a      	beq.n	800edc8 <HAL_UART_IRQHandler+0x5f4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	681b      	ldr	r3, [r3, #0]
 800edb6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800edba:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800edc2:	6878      	ldr	r0, [r7, #4]
 800edc4:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800edc6:	e055      	b.n	800ee74 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800edc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800edcc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d014      	beq.n	800edfe <HAL_UART_IRQHandler+0x62a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800edd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800edd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d105      	bne.n	800edec <HAL_UART_IRQHandler+0x618>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800ede0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ede4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d008      	beq.n	800edfe <HAL_UART_IRQHandler+0x62a>
  {
    if (huart->TxISR != NULL)
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d03e      	beq.n	800ee72 <HAL_UART_IRQHandler+0x69e>
    {
      huart->TxISR(huart);
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800edf8:	6878      	ldr	r0, [r7, #4]
 800edfa:	4798      	blx	r3
    }
    return;
 800edfc:	e039      	b.n	800ee72 <HAL_UART_IRQHandler+0x69e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800edfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ee02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d009      	beq.n	800ee1e <HAL_UART_IRQHandler+0x64a>
 800ee0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ee0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d003      	beq.n	800ee1e <HAL_UART_IRQHandler+0x64a>
  {
    UART_EndTransmit_IT(huart);
 800ee16:	6878      	ldr	r0, [r7, #4]
 800ee18:	f001 f858 	bl	800fecc <UART_EndTransmit_IT>
    return;
 800ee1c:	e02a      	b.n	800ee74 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800ee1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ee22:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d00b      	beq.n	800ee42 <HAL_UART_IRQHandler+0x66e>
 800ee2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ee2e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d005      	beq.n	800ee42 <HAL_UART_IRQHandler+0x66e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800ee3c:	6878      	ldr	r0, [r7, #4]
 800ee3e:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ee40:	e018      	b.n	800ee74 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800ee42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ee46:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800ee4a:	2b00      	cmp	r3, #0
 800ee4c:	d012      	beq.n	800ee74 <HAL_UART_IRQHandler+0x6a0>
 800ee4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	da0e      	bge.n	800ee74 <HAL_UART_IRQHandler+0x6a0>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800ee5c:	6878      	ldr	r0, [r7, #4]
 800ee5e:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ee60:	e008      	b.n	800ee74 <HAL_UART_IRQHandler+0x6a0>
      return;
 800ee62:	bf00      	nop
 800ee64:	e006      	b.n	800ee74 <HAL_UART_IRQHandler+0x6a0>
    return;
 800ee66:	bf00      	nop
 800ee68:	e004      	b.n	800ee74 <HAL_UART_IRQHandler+0x6a0>
      return;
 800ee6a:	bf00      	nop
 800ee6c:	e002      	b.n	800ee74 <HAL_UART_IRQHandler+0x6a0>
      return;
 800ee6e:	bf00      	nop
 800ee70:	e000      	b.n	800ee74 <HAL_UART_IRQHandler+0x6a0>
    return;
 800ee72:	bf00      	nop
  }
}
 800ee74:	37e8      	adds	r7, #232	@ 0xe8
 800ee76:	46bd      	mov	sp, r7
 800ee78:	bd80      	pop	{r7, pc}
 800ee7a:	bf00      	nop

0800ee7c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ee7c:	b480      	push	{r7}
 800ee7e:	b083      	sub	sp, #12
 800ee80:	af00      	add	r7, sp, #0
 800ee82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800ee84:	bf00      	nop
 800ee86:	370c      	adds	r7, #12
 800ee88:	46bd      	mov	sp, r7
 800ee8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee8e:	4770      	bx	lr

0800ee90 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ee90:	b480      	push	{r7}
 800ee92:	b083      	sub	sp, #12
 800ee94:	af00      	add	r7, sp, #0
 800ee96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800ee98:	bf00      	nop
 800ee9a:	370c      	adds	r7, #12
 800ee9c:	46bd      	mov	sp, r7
 800ee9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eea2:	4770      	bx	lr

0800eea4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800eea4:	b480      	push	{r7}
 800eea6:	b083      	sub	sp, #12
 800eea8:	af00      	add	r7, sp, #0
 800eeaa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800eeac:	bf00      	nop
 800eeae:	370c      	adds	r7, #12
 800eeb0:	46bd      	mov	sp, r7
 800eeb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeb6:	4770      	bx	lr

0800eeb8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800eeb8:	b480      	push	{r7}
 800eeba:	b083      	sub	sp, #12
 800eebc:	af00      	add	r7, sp, #0
 800eebe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800eec0:	bf00      	nop
 800eec2:	370c      	adds	r7, #12
 800eec4:	46bd      	mov	sp, r7
 800eec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeca:	4770      	bx	lr

0800eecc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800eecc:	b480      	push	{r7}
 800eece:	b083      	sub	sp, #12
 800eed0:	af00      	add	r7, sp, #0
 800eed2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800eed4:	bf00      	nop
 800eed6:	370c      	adds	r7, #12
 800eed8:	46bd      	mov	sp, r7
 800eeda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eede:	4770      	bx	lr

0800eee0 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800eee0:	b480      	push	{r7}
 800eee2:	b083      	sub	sp, #12
 800eee4:	af00      	add	r7, sp, #0
 800eee6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800eee8:	bf00      	nop
 800eeea:	370c      	adds	r7, #12
 800eeec:	46bd      	mov	sp, r7
 800eeee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eef2:	4770      	bx	lr

0800eef4 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800eef4:	b480      	push	{r7}
 800eef6:	b083      	sub	sp, #12
 800eef8:	af00      	add	r7, sp, #0
 800eefa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800eefc:	bf00      	nop
 800eefe:	370c      	adds	r7, #12
 800ef00:	46bd      	mov	sp, r7
 800ef02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef06:	4770      	bx	lr

0800ef08 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800ef08:	b480      	push	{r7}
 800ef0a:	b083      	sub	sp, #12
 800ef0c:	af00      	add	r7, sp, #0
 800ef0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800ef10:	bf00      	nop
 800ef12:	370c      	adds	r7, #12
 800ef14:	46bd      	mov	sp, r7
 800ef16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef1a:	4770      	bx	lr

0800ef1c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ef1c:	b480      	push	{r7}
 800ef1e:	b083      	sub	sp, #12
 800ef20:	af00      	add	r7, sp, #0
 800ef22:	6078      	str	r0, [r7, #4]
 800ef24:	460b      	mov	r3, r1
 800ef26:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ef28:	bf00      	nop
 800ef2a:	370c      	adds	r7, #12
 800ef2c:	46bd      	mov	sp, r7
 800ef2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef32:	4770      	bx	lr

0800ef34 <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 800ef34:	b480      	push	{r7}
 800ef36:	b083      	sub	sp, #12
 800ef38:	af00      	add	r7, sp, #0
 800ef3a:	6078      	str	r0, [r7, #4]
 800ef3c:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	4a09      	ldr	r2, [pc, #36]	@ (800ef68 <HAL_UART_ReceiverTimeout_Config+0x34>)
 800ef44:	4293      	cmp	r3, r2
 800ef46:	d009      	beq.n	800ef5c <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	695b      	ldr	r3, [r3, #20]
 800ef4e:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	683a      	ldr	r2, [r7, #0]
 800ef58:	430a      	orrs	r2, r1
 800ef5a:	615a      	str	r2, [r3, #20]
  }
}
 800ef5c:	bf00      	nop
 800ef5e:	370c      	adds	r7, #12
 800ef60:	46bd      	mov	sp, r7
 800ef62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef66:	4770      	bx	lr
 800ef68:	40008000 	.word	0x40008000

0800ef6c <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 800ef6c:	b480      	push	{r7}
 800ef6e:	b083      	sub	sp, #12
 800ef70:	af00      	add	r7, sp, #0
 800ef72:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	4a18      	ldr	r2, [pc, #96]	@ (800efdc <HAL_UART_EnableReceiverTimeout+0x70>)
 800ef7a:	4293      	cmp	r3, r2
 800ef7c:	d027      	beq.n	800efce <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ef84:	2b20      	cmp	r3, #32
 800ef86:	d120      	bne.n	800efca <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ef8e:	2b01      	cmp	r3, #1
 800ef90:	d101      	bne.n	800ef96 <HAL_UART_EnableReceiverTimeout+0x2a>
 800ef92:	2302      	movs	r3, #2
 800ef94:	e01c      	b.n	800efd0 <HAL_UART_EnableReceiverTimeout+0x64>
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	2201      	movs	r2, #1
 800ef9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	2224      	movs	r2, #36	@ 0x24
 800efa2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	685a      	ldr	r2, [r3, #4]
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800efb4:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	2220      	movs	r2, #32
 800efba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	2200      	movs	r2, #0
 800efc2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 800efc6:	2300      	movs	r3, #0
 800efc8:	e002      	b.n	800efd0 <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 800efca:	2302      	movs	r3, #2
 800efcc:	e000      	b.n	800efd0 <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 800efce:	2301      	movs	r3, #1
  }
}
 800efd0:	4618      	mov	r0, r3
 800efd2:	370c      	adds	r7, #12
 800efd4:	46bd      	mov	sp, r7
 800efd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efda:	4770      	bx	lr
 800efdc:	40008000 	.word	0x40008000

0800efe0 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 800efe0:	b480      	push	{r7}
 800efe2:	b083      	sub	sp, #12
 800efe4:	af00      	add	r7, sp, #0
 800efe6:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 800efee:	4618      	mov	r0, r3
 800eff0:	370c      	adds	r7, #12
 800eff2:	46bd      	mov	sp, r7
 800eff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eff8:	4770      	bx	lr
	...

0800effc <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800effc:	b480      	push	{r7}
 800effe:	b083      	sub	sp, #12
 800f000:	af00      	add	r7, sp, #0
 800f002:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	4a1a      	ldr	r2, [pc, #104]	@ (800f070 <UART_InitCallbacksToDefault+0x74>)
 800f008:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	4a19      	ldr	r2, [pc, #100]	@ (800f074 <UART_InitCallbacksToDefault+0x78>)
 800f010:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	4a18      	ldr	r2, [pc, #96]	@ (800f078 <UART_InitCallbacksToDefault+0x7c>)
 800f018:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	4a17      	ldr	r2, [pc, #92]	@ (800f07c <UART_InitCallbacksToDefault+0x80>)
 800f020:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	4a16      	ldr	r2, [pc, #88]	@ (800f080 <UART_InitCallbacksToDefault+0x84>)
 800f028:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	4a15      	ldr	r2, [pc, #84]	@ (800f084 <UART_InitCallbacksToDefault+0x88>)
 800f030:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	4a14      	ldr	r2, [pc, #80]	@ (800f088 <UART_InitCallbacksToDefault+0x8c>)
 800f038:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	4a13      	ldr	r2, [pc, #76]	@ (800f08c <UART_InitCallbacksToDefault+0x90>)
 800f040:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	4a12      	ldr	r2, [pc, #72]	@ (800f090 <UART_InitCallbacksToDefault+0x94>)
 800f048:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	4a11      	ldr	r2, [pc, #68]	@ (800f094 <UART_InitCallbacksToDefault+0x98>)
 800f050:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	4a10      	ldr	r2, [pc, #64]	@ (800f098 <UART_InitCallbacksToDefault+0x9c>)
 800f058:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	4a0f      	ldr	r2, [pc, #60]	@ (800f09c <UART_InitCallbacksToDefault+0xa0>)
 800f060:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 800f064:	bf00      	nop
 800f066:	370c      	adds	r7, #12
 800f068:	46bd      	mov	sp, r7
 800f06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f06e:	4770      	bx	lr
 800f070:	0800ee91 	.word	0x0800ee91
 800f074:	0800ee7d 	.word	0x0800ee7d
 800f078:	0800eeb9 	.word	0x0800eeb9
 800f07c:	0800eea5 	.word	0x0800eea5
 800f080:	0800eecd 	.word	0x0800eecd
 800f084:	0800eee1 	.word	0x0800eee1
 800f088:	0800eef5 	.word	0x0800eef5
 800f08c:	0800ef09 	.word	0x0800ef09
 800f090:	0800ff27 	.word	0x0800ff27
 800f094:	0800ff3b 	.word	0x0800ff3b
 800f098:	0800ff4f 	.word	0x0800ff4f
 800f09c:	0800ef1d 	.word	0x0800ef1d

0800f0a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f0a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f0a4:	b08c      	sub	sp, #48	@ 0x30
 800f0a6:	af00      	add	r7, sp, #0
 800f0a8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f0aa:	2300      	movs	r3, #0
 800f0ac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f0b0:	697b      	ldr	r3, [r7, #20]
 800f0b2:	689a      	ldr	r2, [r3, #8]
 800f0b4:	697b      	ldr	r3, [r7, #20]
 800f0b6:	691b      	ldr	r3, [r3, #16]
 800f0b8:	431a      	orrs	r2, r3
 800f0ba:	697b      	ldr	r3, [r7, #20]
 800f0bc:	695b      	ldr	r3, [r3, #20]
 800f0be:	431a      	orrs	r2, r3
 800f0c0:	697b      	ldr	r3, [r7, #20]
 800f0c2:	69db      	ldr	r3, [r3, #28]
 800f0c4:	4313      	orrs	r3, r2
 800f0c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f0c8:	697b      	ldr	r3, [r7, #20]
 800f0ca:	681b      	ldr	r3, [r3, #0]
 800f0cc:	681a      	ldr	r2, [r3, #0]
 800f0ce:	4baa      	ldr	r3, [pc, #680]	@ (800f378 <UART_SetConfig+0x2d8>)
 800f0d0:	4013      	ands	r3, r2
 800f0d2:	697a      	ldr	r2, [r7, #20]
 800f0d4:	6812      	ldr	r2, [r2, #0]
 800f0d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f0d8:	430b      	orrs	r3, r1
 800f0da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f0dc:	697b      	ldr	r3, [r7, #20]
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	685b      	ldr	r3, [r3, #4]
 800f0e2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800f0e6:	697b      	ldr	r3, [r7, #20]
 800f0e8:	68da      	ldr	r2, [r3, #12]
 800f0ea:	697b      	ldr	r3, [r7, #20]
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	430a      	orrs	r2, r1
 800f0f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f0f2:	697b      	ldr	r3, [r7, #20]
 800f0f4:	699b      	ldr	r3, [r3, #24]
 800f0f6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f0f8:	697b      	ldr	r3, [r7, #20]
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	4a9f      	ldr	r2, [pc, #636]	@ (800f37c <UART_SetConfig+0x2dc>)
 800f0fe:	4293      	cmp	r3, r2
 800f100:	d004      	beq.n	800f10c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f102:	697b      	ldr	r3, [r7, #20]
 800f104:	6a1b      	ldr	r3, [r3, #32]
 800f106:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f108:	4313      	orrs	r3, r2
 800f10a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f10c:	697b      	ldr	r3, [r7, #20]
 800f10e:	681b      	ldr	r3, [r3, #0]
 800f110:	689b      	ldr	r3, [r3, #8]
 800f112:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800f116:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800f11a:	697a      	ldr	r2, [r7, #20]
 800f11c:	6812      	ldr	r2, [r2, #0]
 800f11e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f120:	430b      	orrs	r3, r1
 800f122:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800f124:	697b      	ldr	r3, [r7, #20]
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f12a:	f023 010f 	bic.w	r1, r3, #15
 800f12e:	697b      	ldr	r3, [r7, #20]
 800f130:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f132:	697b      	ldr	r3, [r7, #20]
 800f134:	681b      	ldr	r3, [r3, #0]
 800f136:	430a      	orrs	r2, r1
 800f138:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f13a:	697b      	ldr	r3, [r7, #20]
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	4a90      	ldr	r2, [pc, #576]	@ (800f380 <UART_SetConfig+0x2e0>)
 800f140:	4293      	cmp	r3, r2
 800f142:	d125      	bne.n	800f190 <UART_SetConfig+0xf0>
 800f144:	4b8f      	ldr	r3, [pc, #572]	@ (800f384 <UART_SetConfig+0x2e4>)
 800f146:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f14a:	f003 0303 	and.w	r3, r3, #3
 800f14e:	2b03      	cmp	r3, #3
 800f150:	d81a      	bhi.n	800f188 <UART_SetConfig+0xe8>
 800f152:	a201      	add	r2, pc, #4	@ (adr r2, 800f158 <UART_SetConfig+0xb8>)
 800f154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f158:	0800f169 	.word	0x0800f169
 800f15c:	0800f179 	.word	0x0800f179
 800f160:	0800f171 	.word	0x0800f171
 800f164:	0800f181 	.word	0x0800f181
 800f168:	2301      	movs	r3, #1
 800f16a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f16e:	e116      	b.n	800f39e <UART_SetConfig+0x2fe>
 800f170:	2302      	movs	r3, #2
 800f172:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f176:	e112      	b.n	800f39e <UART_SetConfig+0x2fe>
 800f178:	2304      	movs	r3, #4
 800f17a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f17e:	e10e      	b.n	800f39e <UART_SetConfig+0x2fe>
 800f180:	2308      	movs	r3, #8
 800f182:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f186:	e10a      	b.n	800f39e <UART_SetConfig+0x2fe>
 800f188:	2310      	movs	r3, #16
 800f18a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f18e:	e106      	b.n	800f39e <UART_SetConfig+0x2fe>
 800f190:	697b      	ldr	r3, [r7, #20]
 800f192:	681b      	ldr	r3, [r3, #0]
 800f194:	4a7c      	ldr	r2, [pc, #496]	@ (800f388 <UART_SetConfig+0x2e8>)
 800f196:	4293      	cmp	r3, r2
 800f198:	d138      	bne.n	800f20c <UART_SetConfig+0x16c>
 800f19a:	4b7a      	ldr	r3, [pc, #488]	@ (800f384 <UART_SetConfig+0x2e4>)
 800f19c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f1a0:	f003 030c 	and.w	r3, r3, #12
 800f1a4:	2b0c      	cmp	r3, #12
 800f1a6:	d82d      	bhi.n	800f204 <UART_SetConfig+0x164>
 800f1a8:	a201      	add	r2, pc, #4	@ (adr r2, 800f1b0 <UART_SetConfig+0x110>)
 800f1aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1ae:	bf00      	nop
 800f1b0:	0800f1e5 	.word	0x0800f1e5
 800f1b4:	0800f205 	.word	0x0800f205
 800f1b8:	0800f205 	.word	0x0800f205
 800f1bc:	0800f205 	.word	0x0800f205
 800f1c0:	0800f1f5 	.word	0x0800f1f5
 800f1c4:	0800f205 	.word	0x0800f205
 800f1c8:	0800f205 	.word	0x0800f205
 800f1cc:	0800f205 	.word	0x0800f205
 800f1d0:	0800f1ed 	.word	0x0800f1ed
 800f1d4:	0800f205 	.word	0x0800f205
 800f1d8:	0800f205 	.word	0x0800f205
 800f1dc:	0800f205 	.word	0x0800f205
 800f1e0:	0800f1fd 	.word	0x0800f1fd
 800f1e4:	2300      	movs	r3, #0
 800f1e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f1ea:	e0d8      	b.n	800f39e <UART_SetConfig+0x2fe>
 800f1ec:	2302      	movs	r3, #2
 800f1ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f1f2:	e0d4      	b.n	800f39e <UART_SetConfig+0x2fe>
 800f1f4:	2304      	movs	r3, #4
 800f1f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f1fa:	e0d0      	b.n	800f39e <UART_SetConfig+0x2fe>
 800f1fc:	2308      	movs	r3, #8
 800f1fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f202:	e0cc      	b.n	800f39e <UART_SetConfig+0x2fe>
 800f204:	2310      	movs	r3, #16
 800f206:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f20a:	e0c8      	b.n	800f39e <UART_SetConfig+0x2fe>
 800f20c:	697b      	ldr	r3, [r7, #20]
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	4a5e      	ldr	r2, [pc, #376]	@ (800f38c <UART_SetConfig+0x2ec>)
 800f212:	4293      	cmp	r3, r2
 800f214:	d125      	bne.n	800f262 <UART_SetConfig+0x1c2>
 800f216:	4b5b      	ldr	r3, [pc, #364]	@ (800f384 <UART_SetConfig+0x2e4>)
 800f218:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f21c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800f220:	2b30      	cmp	r3, #48	@ 0x30
 800f222:	d016      	beq.n	800f252 <UART_SetConfig+0x1b2>
 800f224:	2b30      	cmp	r3, #48	@ 0x30
 800f226:	d818      	bhi.n	800f25a <UART_SetConfig+0x1ba>
 800f228:	2b20      	cmp	r3, #32
 800f22a:	d00a      	beq.n	800f242 <UART_SetConfig+0x1a2>
 800f22c:	2b20      	cmp	r3, #32
 800f22e:	d814      	bhi.n	800f25a <UART_SetConfig+0x1ba>
 800f230:	2b00      	cmp	r3, #0
 800f232:	d002      	beq.n	800f23a <UART_SetConfig+0x19a>
 800f234:	2b10      	cmp	r3, #16
 800f236:	d008      	beq.n	800f24a <UART_SetConfig+0x1aa>
 800f238:	e00f      	b.n	800f25a <UART_SetConfig+0x1ba>
 800f23a:	2300      	movs	r3, #0
 800f23c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f240:	e0ad      	b.n	800f39e <UART_SetConfig+0x2fe>
 800f242:	2302      	movs	r3, #2
 800f244:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f248:	e0a9      	b.n	800f39e <UART_SetConfig+0x2fe>
 800f24a:	2304      	movs	r3, #4
 800f24c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f250:	e0a5      	b.n	800f39e <UART_SetConfig+0x2fe>
 800f252:	2308      	movs	r3, #8
 800f254:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f258:	e0a1      	b.n	800f39e <UART_SetConfig+0x2fe>
 800f25a:	2310      	movs	r3, #16
 800f25c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f260:	e09d      	b.n	800f39e <UART_SetConfig+0x2fe>
 800f262:	697b      	ldr	r3, [r7, #20]
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	4a4a      	ldr	r2, [pc, #296]	@ (800f390 <UART_SetConfig+0x2f0>)
 800f268:	4293      	cmp	r3, r2
 800f26a:	d125      	bne.n	800f2b8 <UART_SetConfig+0x218>
 800f26c:	4b45      	ldr	r3, [pc, #276]	@ (800f384 <UART_SetConfig+0x2e4>)
 800f26e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f272:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800f276:	2bc0      	cmp	r3, #192	@ 0xc0
 800f278:	d016      	beq.n	800f2a8 <UART_SetConfig+0x208>
 800f27a:	2bc0      	cmp	r3, #192	@ 0xc0
 800f27c:	d818      	bhi.n	800f2b0 <UART_SetConfig+0x210>
 800f27e:	2b80      	cmp	r3, #128	@ 0x80
 800f280:	d00a      	beq.n	800f298 <UART_SetConfig+0x1f8>
 800f282:	2b80      	cmp	r3, #128	@ 0x80
 800f284:	d814      	bhi.n	800f2b0 <UART_SetConfig+0x210>
 800f286:	2b00      	cmp	r3, #0
 800f288:	d002      	beq.n	800f290 <UART_SetConfig+0x1f0>
 800f28a:	2b40      	cmp	r3, #64	@ 0x40
 800f28c:	d008      	beq.n	800f2a0 <UART_SetConfig+0x200>
 800f28e:	e00f      	b.n	800f2b0 <UART_SetConfig+0x210>
 800f290:	2300      	movs	r3, #0
 800f292:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f296:	e082      	b.n	800f39e <UART_SetConfig+0x2fe>
 800f298:	2302      	movs	r3, #2
 800f29a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f29e:	e07e      	b.n	800f39e <UART_SetConfig+0x2fe>
 800f2a0:	2304      	movs	r3, #4
 800f2a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f2a6:	e07a      	b.n	800f39e <UART_SetConfig+0x2fe>
 800f2a8:	2308      	movs	r3, #8
 800f2aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f2ae:	e076      	b.n	800f39e <UART_SetConfig+0x2fe>
 800f2b0:	2310      	movs	r3, #16
 800f2b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f2b6:	e072      	b.n	800f39e <UART_SetConfig+0x2fe>
 800f2b8:	697b      	ldr	r3, [r7, #20]
 800f2ba:	681b      	ldr	r3, [r3, #0]
 800f2bc:	4a35      	ldr	r2, [pc, #212]	@ (800f394 <UART_SetConfig+0x2f4>)
 800f2be:	4293      	cmp	r3, r2
 800f2c0:	d12a      	bne.n	800f318 <UART_SetConfig+0x278>
 800f2c2:	4b30      	ldr	r3, [pc, #192]	@ (800f384 <UART_SetConfig+0x2e4>)
 800f2c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f2c8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800f2cc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f2d0:	d01a      	beq.n	800f308 <UART_SetConfig+0x268>
 800f2d2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f2d6:	d81b      	bhi.n	800f310 <UART_SetConfig+0x270>
 800f2d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f2dc:	d00c      	beq.n	800f2f8 <UART_SetConfig+0x258>
 800f2de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f2e2:	d815      	bhi.n	800f310 <UART_SetConfig+0x270>
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d003      	beq.n	800f2f0 <UART_SetConfig+0x250>
 800f2e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f2ec:	d008      	beq.n	800f300 <UART_SetConfig+0x260>
 800f2ee:	e00f      	b.n	800f310 <UART_SetConfig+0x270>
 800f2f0:	2300      	movs	r3, #0
 800f2f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f2f6:	e052      	b.n	800f39e <UART_SetConfig+0x2fe>
 800f2f8:	2302      	movs	r3, #2
 800f2fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f2fe:	e04e      	b.n	800f39e <UART_SetConfig+0x2fe>
 800f300:	2304      	movs	r3, #4
 800f302:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f306:	e04a      	b.n	800f39e <UART_SetConfig+0x2fe>
 800f308:	2308      	movs	r3, #8
 800f30a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f30e:	e046      	b.n	800f39e <UART_SetConfig+0x2fe>
 800f310:	2310      	movs	r3, #16
 800f312:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f316:	e042      	b.n	800f39e <UART_SetConfig+0x2fe>
 800f318:	697b      	ldr	r3, [r7, #20]
 800f31a:	681b      	ldr	r3, [r3, #0]
 800f31c:	4a17      	ldr	r2, [pc, #92]	@ (800f37c <UART_SetConfig+0x2dc>)
 800f31e:	4293      	cmp	r3, r2
 800f320:	d13a      	bne.n	800f398 <UART_SetConfig+0x2f8>
 800f322:	4b18      	ldr	r3, [pc, #96]	@ (800f384 <UART_SetConfig+0x2e4>)
 800f324:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f328:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800f32c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800f330:	d01a      	beq.n	800f368 <UART_SetConfig+0x2c8>
 800f332:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800f336:	d81b      	bhi.n	800f370 <UART_SetConfig+0x2d0>
 800f338:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f33c:	d00c      	beq.n	800f358 <UART_SetConfig+0x2b8>
 800f33e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f342:	d815      	bhi.n	800f370 <UART_SetConfig+0x2d0>
 800f344:	2b00      	cmp	r3, #0
 800f346:	d003      	beq.n	800f350 <UART_SetConfig+0x2b0>
 800f348:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f34c:	d008      	beq.n	800f360 <UART_SetConfig+0x2c0>
 800f34e:	e00f      	b.n	800f370 <UART_SetConfig+0x2d0>
 800f350:	2300      	movs	r3, #0
 800f352:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f356:	e022      	b.n	800f39e <UART_SetConfig+0x2fe>
 800f358:	2302      	movs	r3, #2
 800f35a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f35e:	e01e      	b.n	800f39e <UART_SetConfig+0x2fe>
 800f360:	2304      	movs	r3, #4
 800f362:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f366:	e01a      	b.n	800f39e <UART_SetConfig+0x2fe>
 800f368:	2308      	movs	r3, #8
 800f36a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f36e:	e016      	b.n	800f39e <UART_SetConfig+0x2fe>
 800f370:	2310      	movs	r3, #16
 800f372:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f376:	e012      	b.n	800f39e <UART_SetConfig+0x2fe>
 800f378:	cfff69f3 	.word	0xcfff69f3
 800f37c:	40008000 	.word	0x40008000
 800f380:	40013800 	.word	0x40013800
 800f384:	40021000 	.word	0x40021000
 800f388:	40004400 	.word	0x40004400
 800f38c:	40004800 	.word	0x40004800
 800f390:	40004c00 	.word	0x40004c00
 800f394:	40005000 	.word	0x40005000
 800f398:	2310      	movs	r3, #16
 800f39a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f39e:	697b      	ldr	r3, [r7, #20]
 800f3a0:	681b      	ldr	r3, [r3, #0]
 800f3a2:	4aae      	ldr	r2, [pc, #696]	@ (800f65c <UART_SetConfig+0x5bc>)
 800f3a4:	4293      	cmp	r3, r2
 800f3a6:	f040 8097 	bne.w	800f4d8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f3aa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800f3ae:	2b08      	cmp	r3, #8
 800f3b0:	d823      	bhi.n	800f3fa <UART_SetConfig+0x35a>
 800f3b2:	a201      	add	r2, pc, #4	@ (adr r2, 800f3b8 <UART_SetConfig+0x318>)
 800f3b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3b8:	0800f3dd 	.word	0x0800f3dd
 800f3bc:	0800f3fb 	.word	0x0800f3fb
 800f3c0:	0800f3e5 	.word	0x0800f3e5
 800f3c4:	0800f3fb 	.word	0x0800f3fb
 800f3c8:	0800f3eb 	.word	0x0800f3eb
 800f3cc:	0800f3fb 	.word	0x0800f3fb
 800f3d0:	0800f3fb 	.word	0x0800f3fb
 800f3d4:	0800f3fb 	.word	0x0800f3fb
 800f3d8:	0800f3f3 	.word	0x0800f3f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f3dc:	f7fc fcec 	bl	800bdb8 <HAL_RCC_GetPCLK1Freq>
 800f3e0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800f3e2:	e010      	b.n	800f406 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f3e4:	4b9e      	ldr	r3, [pc, #632]	@ (800f660 <UART_SetConfig+0x5c0>)
 800f3e6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800f3e8:	e00d      	b.n	800f406 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f3ea:	f7fc fc77 	bl	800bcdc <HAL_RCC_GetSysClockFreq>
 800f3ee:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800f3f0:	e009      	b.n	800f406 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f3f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f3f6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800f3f8:	e005      	b.n	800f406 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800f3fa:	2300      	movs	r3, #0
 800f3fc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800f3fe:	2301      	movs	r3, #1
 800f400:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800f404:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f408:	2b00      	cmp	r3, #0
 800f40a:	f000 8130 	beq.w	800f66e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800f40e:	697b      	ldr	r3, [r7, #20]
 800f410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f412:	4a94      	ldr	r2, [pc, #592]	@ (800f664 <UART_SetConfig+0x5c4>)
 800f414:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f418:	461a      	mov	r2, r3
 800f41a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f41c:	fbb3 f3f2 	udiv	r3, r3, r2
 800f420:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f422:	697b      	ldr	r3, [r7, #20]
 800f424:	685a      	ldr	r2, [r3, #4]
 800f426:	4613      	mov	r3, r2
 800f428:	005b      	lsls	r3, r3, #1
 800f42a:	4413      	add	r3, r2
 800f42c:	69ba      	ldr	r2, [r7, #24]
 800f42e:	429a      	cmp	r2, r3
 800f430:	d305      	bcc.n	800f43e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800f432:	697b      	ldr	r3, [r7, #20]
 800f434:	685b      	ldr	r3, [r3, #4]
 800f436:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f438:	69ba      	ldr	r2, [r7, #24]
 800f43a:	429a      	cmp	r2, r3
 800f43c:	d903      	bls.n	800f446 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800f43e:	2301      	movs	r3, #1
 800f440:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800f444:	e113      	b.n	800f66e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f448:	2200      	movs	r2, #0
 800f44a:	60bb      	str	r3, [r7, #8]
 800f44c:	60fa      	str	r2, [r7, #12]
 800f44e:	697b      	ldr	r3, [r7, #20]
 800f450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f452:	4a84      	ldr	r2, [pc, #528]	@ (800f664 <UART_SetConfig+0x5c4>)
 800f454:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f458:	b29b      	uxth	r3, r3
 800f45a:	2200      	movs	r2, #0
 800f45c:	603b      	str	r3, [r7, #0]
 800f45e:	607a      	str	r2, [r7, #4]
 800f460:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f464:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f468:	f7f1 fbc4 	bl	8000bf4 <__aeabi_uldivmod>
 800f46c:	4602      	mov	r2, r0
 800f46e:	460b      	mov	r3, r1
 800f470:	4610      	mov	r0, r2
 800f472:	4619      	mov	r1, r3
 800f474:	f04f 0200 	mov.w	r2, #0
 800f478:	f04f 0300 	mov.w	r3, #0
 800f47c:	020b      	lsls	r3, r1, #8
 800f47e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f482:	0202      	lsls	r2, r0, #8
 800f484:	6979      	ldr	r1, [r7, #20]
 800f486:	6849      	ldr	r1, [r1, #4]
 800f488:	0849      	lsrs	r1, r1, #1
 800f48a:	2000      	movs	r0, #0
 800f48c:	460c      	mov	r4, r1
 800f48e:	4605      	mov	r5, r0
 800f490:	eb12 0804 	adds.w	r8, r2, r4
 800f494:	eb43 0905 	adc.w	r9, r3, r5
 800f498:	697b      	ldr	r3, [r7, #20]
 800f49a:	685b      	ldr	r3, [r3, #4]
 800f49c:	2200      	movs	r2, #0
 800f49e:	469a      	mov	sl, r3
 800f4a0:	4693      	mov	fp, r2
 800f4a2:	4652      	mov	r2, sl
 800f4a4:	465b      	mov	r3, fp
 800f4a6:	4640      	mov	r0, r8
 800f4a8:	4649      	mov	r1, r9
 800f4aa:	f7f1 fba3 	bl	8000bf4 <__aeabi_uldivmod>
 800f4ae:	4602      	mov	r2, r0
 800f4b0:	460b      	mov	r3, r1
 800f4b2:	4613      	mov	r3, r2
 800f4b4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f4b6:	6a3b      	ldr	r3, [r7, #32]
 800f4b8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f4bc:	d308      	bcc.n	800f4d0 <UART_SetConfig+0x430>
 800f4be:	6a3b      	ldr	r3, [r7, #32]
 800f4c0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f4c4:	d204      	bcs.n	800f4d0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800f4c6:	697b      	ldr	r3, [r7, #20]
 800f4c8:	681b      	ldr	r3, [r3, #0]
 800f4ca:	6a3a      	ldr	r2, [r7, #32]
 800f4cc:	60da      	str	r2, [r3, #12]
 800f4ce:	e0ce      	b.n	800f66e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800f4d0:	2301      	movs	r3, #1
 800f4d2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800f4d6:	e0ca      	b.n	800f66e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f4d8:	697b      	ldr	r3, [r7, #20]
 800f4da:	69db      	ldr	r3, [r3, #28]
 800f4dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f4e0:	d166      	bne.n	800f5b0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800f4e2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800f4e6:	2b08      	cmp	r3, #8
 800f4e8:	d827      	bhi.n	800f53a <UART_SetConfig+0x49a>
 800f4ea:	a201      	add	r2, pc, #4	@ (adr r2, 800f4f0 <UART_SetConfig+0x450>)
 800f4ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4f0:	0800f515 	.word	0x0800f515
 800f4f4:	0800f51d 	.word	0x0800f51d
 800f4f8:	0800f525 	.word	0x0800f525
 800f4fc:	0800f53b 	.word	0x0800f53b
 800f500:	0800f52b 	.word	0x0800f52b
 800f504:	0800f53b 	.word	0x0800f53b
 800f508:	0800f53b 	.word	0x0800f53b
 800f50c:	0800f53b 	.word	0x0800f53b
 800f510:	0800f533 	.word	0x0800f533
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f514:	f7fc fc50 	bl	800bdb8 <HAL_RCC_GetPCLK1Freq>
 800f518:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800f51a:	e014      	b.n	800f546 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f51c:	f7fc fc62 	bl	800bde4 <HAL_RCC_GetPCLK2Freq>
 800f520:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800f522:	e010      	b.n	800f546 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f524:	4b4e      	ldr	r3, [pc, #312]	@ (800f660 <UART_SetConfig+0x5c0>)
 800f526:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800f528:	e00d      	b.n	800f546 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f52a:	f7fc fbd7 	bl	800bcdc <HAL_RCC_GetSysClockFreq>
 800f52e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800f530:	e009      	b.n	800f546 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f532:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f536:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800f538:	e005      	b.n	800f546 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800f53a:	2300      	movs	r3, #0
 800f53c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800f53e:	2301      	movs	r3, #1
 800f540:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800f544:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f548:	2b00      	cmp	r3, #0
 800f54a:	f000 8090 	beq.w	800f66e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f54e:	697b      	ldr	r3, [r7, #20]
 800f550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f552:	4a44      	ldr	r2, [pc, #272]	@ (800f664 <UART_SetConfig+0x5c4>)
 800f554:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f558:	461a      	mov	r2, r3
 800f55a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f55c:	fbb3 f3f2 	udiv	r3, r3, r2
 800f560:	005a      	lsls	r2, r3, #1
 800f562:	697b      	ldr	r3, [r7, #20]
 800f564:	685b      	ldr	r3, [r3, #4]
 800f566:	085b      	lsrs	r3, r3, #1
 800f568:	441a      	add	r2, r3
 800f56a:	697b      	ldr	r3, [r7, #20]
 800f56c:	685b      	ldr	r3, [r3, #4]
 800f56e:	fbb2 f3f3 	udiv	r3, r2, r3
 800f572:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f574:	6a3b      	ldr	r3, [r7, #32]
 800f576:	2b0f      	cmp	r3, #15
 800f578:	d916      	bls.n	800f5a8 <UART_SetConfig+0x508>
 800f57a:	6a3b      	ldr	r3, [r7, #32]
 800f57c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f580:	d212      	bcs.n	800f5a8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f582:	6a3b      	ldr	r3, [r7, #32]
 800f584:	b29b      	uxth	r3, r3
 800f586:	f023 030f 	bic.w	r3, r3, #15
 800f58a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f58c:	6a3b      	ldr	r3, [r7, #32]
 800f58e:	085b      	lsrs	r3, r3, #1
 800f590:	b29b      	uxth	r3, r3
 800f592:	f003 0307 	and.w	r3, r3, #7
 800f596:	b29a      	uxth	r2, r3
 800f598:	8bfb      	ldrh	r3, [r7, #30]
 800f59a:	4313      	orrs	r3, r2
 800f59c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800f59e:	697b      	ldr	r3, [r7, #20]
 800f5a0:	681b      	ldr	r3, [r3, #0]
 800f5a2:	8bfa      	ldrh	r2, [r7, #30]
 800f5a4:	60da      	str	r2, [r3, #12]
 800f5a6:	e062      	b.n	800f66e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800f5a8:	2301      	movs	r3, #1
 800f5aa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800f5ae:	e05e      	b.n	800f66e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800f5b0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800f5b4:	2b08      	cmp	r3, #8
 800f5b6:	d828      	bhi.n	800f60a <UART_SetConfig+0x56a>
 800f5b8:	a201      	add	r2, pc, #4	@ (adr r2, 800f5c0 <UART_SetConfig+0x520>)
 800f5ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5be:	bf00      	nop
 800f5c0:	0800f5e5 	.word	0x0800f5e5
 800f5c4:	0800f5ed 	.word	0x0800f5ed
 800f5c8:	0800f5f5 	.word	0x0800f5f5
 800f5cc:	0800f60b 	.word	0x0800f60b
 800f5d0:	0800f5fb 	.word	0x0800f5fb
 800f5d4:	0800f60b 	.word	0x0800f60b
 800f5d8:	0800f60b 	.word	0x0800f60b
 800f5dc:	0800f60b 	.word	0x0800f60b
 800f5e0:	0800f603 	.word	0x0800f603
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f5e4:	f7fc fbe8 	bl	800bdb8 <HAL_RCC_GetPCLK1Freq>
 800f5e8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800f5ea:	e014      	b.n	800f616 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f5ec:	f7fc fbfa 	bl	800bde4 <HAL_RCC_GetPCLK2Freq>
 800f5f0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800f5f2:	e010      	b.n	800f616 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f5f4:	4b1a      	ldr	r3, [pc, #104]	@ (800f660 <UART_SetConfig+0x5c0>)
 800f5f6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800f5f8:	e00d      	b.n	800f616 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f5fa:	f7fc fb6f 	bl	800bcdc <HAL_RCC_GetSysClockFreq>
 800f5fe:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800f600:	e009      	b.n	800f616 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f602:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f606:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800f608:	e005      	b.n	800f616 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800f60a:	2300      	movs	r3, #0
 800f60c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800f60e:	2301      	movs	r3, #1
 800f610:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800f614:	bf00      	nop
    }

    if (pclk != 0U)
 800f616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f618:	2b00      	cmp	r3, #0
 800f61a:	d028      	beq.n	800f66e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f61c:	697b      	ldr	r3, [r7, #20]
 800f61e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f620:	4a10      	ldr	r2, [pc, #64]	@ (800f664 <UART_SetConfig+0x5c4>)
 800f622:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f626:	461a      	mov	r2, r3
 800f628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f62a:	fbb3 f2f2 	udiv	r2, r3, r2
 800f62e:	697b      	ldr	r3, [r7, #20]
 800f630:	685b      	ldr	r3, [r3, #4]
 800f632:	085b      	lsrs	r3, r3, #1
 800f634:	441a      	add	r2, r3
 800f636:	697b      	ldr	r3, [r7, #20]
 800f638:	685b      	ldr	r3, [r3, #4]
 800f63a:	fbb2 f3f3 	udiv	r3, r2, r3
 800f63e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f640:	6a3b      	ldr	r3, [r7, #32]
 800f642:	2b0f      	cmp	r3, #15
 800f644:	d910      	bls.n	800f668 <UART_SetConfig+0x5c8>
 800f646:	6a3b      	ldr	r3, [r7, #32]
 800f648:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f64c:	d20c      	bcs.n	800f668 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f64e:	6a3b      	ldr	r3, [r7, #32]
 800f650:	b29a      	uxth	r2, r3
 800f652:	697b      	ldr	r3, [r7, #20]
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	60da      	str	r2, [r3, #12]
 800f658:	e009      	b.n	800f66e <UART_SetConfig+0x5ce>
 800f65a:	bf00      	nop
 800f65c:	40008000 	.word	0x40008000
 800f660:	00f42400 	.word	0x00f42400
 800f664:	08012c18 	.word	0x08012c18
      }
      else
      {
        ret = HAL_ERROR;
 800f668:	2301      	movs	r3, #1
 800f66a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f66e:	697b      	ldr	r3, [r7, #20]
 800f670:	2201      	movs	r2, #1
 800f672:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800f676:	697b      	ldr	r3, [r7, #20]
 800f678:	2201      	movs	r2, #1
 800f67a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f67e:	697b      	ldr	r3, [r7, #20]
 800f680:	2200      	movs	r2, #0
 800f682:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800f684:	697b      	ldr	r3, [r7, #20]
 800f686:	2200      	movs	r2, #0
 800f688:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800f68a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800f68e:	4618      	mov	r0, r3
 800f690:	3730      	adds	r7, #48	@ 0x30
 800f692:	46bd      	mov	sp, r7
 800f694:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800f698 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f698:	b480      	push	{r7}
 800f69a:	b083      	sub	sp, #12
 800f69c:	af00      	add	r7, sp, #0
 800f69e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f6a4:	f003 0308 	and.w	r3, r3, #8
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	d00a      	beq.n	800f6c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	681b      	ldr	r3, [r3, #0]
 800f6b0:	685b      	ldr	r3, [r3, #4]
 800f6b2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	681b      	ldr	r3, [r3, #0]
 800f6be:	430a      	orrs	r2, r1
 800f6c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f6c6:	f003 0301 	and.w	r3, r3, #1
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	d00a      	beq.n	800f6e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	681b      	ldr	r3, [r3, #0]
 800f6d2:	685b      	ldr	r3, [r3, #4]
 800f6d4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	681b      	ldr	r3, [r3, #0]
 800f6e0:	430a      	orrs	r2, r1
 800f6e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f6e8:	f003 0302 	and.w	r3, r3, #2
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d00a      	beq.n	800f706 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	681b      	ldr	r3, [r3, #0]
 800f6f4:	685b      	ldr	r3, [r3, #4]
 800f6f6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	681b      	ldr	r3, [r3, #0]
 800f702:	430a      	orrs	r2, r1
 800f704:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f70a:	f003 0304 	and.w	r3, r3, #4
 800f70e:	2b00      	cmp	r3, #0
 800f710:	d00a      	beq.n	800f728 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	681b      	ldr	r3, [r3, #0]
 800f716:	685b      	ldr	r3, [r3, #4]
 800f718:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	430a      	orrs	r2, r1
 800f726:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f72c:	f003 0310 	and.w	r3, r3, #16
 800f730:	2b00      	cmp	r3, #0
 800f732:	d00a      	beq.n	800f74a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	689b      	ldr	r3, [r3, #8]
 800f73a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	681b      	ldr	r3, [r3, #0]
 800f746:	430a      	orrs	r2, r1
 800f748:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f74e:	f003 0320 	and.w	r3, r3, #32
 800f752:	2b00      	cmp	r3, #0
 800f754:	d00a      	beq.n	800f76c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	681b      	ldr	r3, [r3, #0]
 800f75a:	689b      	ldr	r3, [r3, #8]
 800f75c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	681b      	ldr	r3, [r3, #0]
 800f768:	430a      	orrs	r2, r1
 800f76a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f770:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f774:	2b00      	cmp	r3, #0
 800f776:	d01a      	beq.n	800f7ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	681b      	ldr	r3, [r3, #0]
 800f77c:	685b      	ldr	r3, [r3, #4]
 800f77e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	681b      	ldr	r3, [r3, #0]
 800f78a:	430a      	orrs	r2, r1
 800f78c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f792:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f796:	d10a      	bne.n	800f7ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	681b      	ldr	r3, [r3, #0]
 800f79c:	685b      	ldr	r3, [r3, #4]
 800f79e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	681b      	ldr	r3, [r3, #0]
 800f7aa:	430a      	orrs	r2, r1
 800f7ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f7b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d00a      	beq.n	800f7d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	681b      	ldr	r3, [r3, #0]
 800f7be:	685b      	ldr	r3, [r3, #4]
 800f7c0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	681b      	ldr	r3, [r3, #0]
 800f7cc:	430a      	orrs	r2, r1
 800f7ce:	605a      	str	r2, [r3, #4]
  }
}
 800f7d0:	bf00      	nop
 800f7d2:	370c      	adds	r7, #12
 800f7d4:	46bd      	mov	sp, r7
 800f7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7da:	4770      	bx	lr

0800f7dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f7dc:	b580      	push	{r7, lr}
 800f7de:	b098      	sub	sp, #96	@ 0x60
 800f7e0:	af02      	add	r7, sp, #8
 800f7e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	2200      	movs	r2, #0
 800f7e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f7ec:	f7f9 faca 	bl	8008d84 <HAL_GetTick>
 800f7f0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	681b      	ldr	r3, [r3, #0]
 800f7f6:	681b      	ldr	r3, [r3, #0]
 800f7f8:	f003 0308 	and.w	r3, r3, #8
 800f7fc:	2b08      	cmp	r3, #8
 800f7fe:	d12f      	bne.n	800f860 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f800:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800f804:	9300      	str	r3, [sp, #0]
 800f806:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f808:	2200      	movs	r2, #0
 800f80a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800f80e:	6878      	ldr	r0, [r7, #4]
 800f810:	f000 f88e 	bl	800f930 <UART_WaitOnFlagUntilTimeout>
 800f814:	4603      	mov	r3, r0
 800f816:	2b00      	cmp	r3, #0
 800f818:	d022      	beq.n	800f860 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	681b      	ldr	r3, [r3, #0]
 800f81e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f820:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f822:	e853 3f00 	ldrex	r3, [r3]
 800f826:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f828:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f82a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f82e:	653b      	str	r3, [r7, #80]	@ 0x50
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	681b      	ldr	r3, [r3, #0]
 800f834:	461a      	mov	r2, r3
 800f836:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f838:	647b      	str	r3, [r7, #68]	@ 0x44
 800f83a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f83c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f83e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f840:	e841 2300 	strex	r3, r2, [r1]
 800f844:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f846:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f848:	2b00      	cmp	r3, #0
 800f84a:	d1e6      	bne.n	800f81a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	2220      	movs	r2, #32
 800f850:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	2200      	movs	r2, #0
 800f858:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f85c:	2303      	movs	r3, #3
 800f85e:	e063      	b.n	800f928 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	681b      	ldr	r3, [r3, #0]
 800f864:	681b      	ldr	r3, [r3, #0]
 800f866:	f003 0304 	and.w	r3, r3, #4
 800f86a:	2b04      	cmp	r3, #4
 800f86c:	d149      	bne.n	800f902 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f86e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800f872:	9300      	str	r3, [sp, #0]
 800f874:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f876:	2200      	movs	r2, #0
 800f878:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800f87c:	6878      	ldr	r0, [r7, #4]
 800f87e:	f000 f857 	bl	800f930 <UART_WaitOnFlagUntilTimeout>
 800f882:	4603      	mov	r3, r0
 800f884:	2b00      	cmp	r3, #0
 800f886:	d03c      	beq.n	800f902 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	681b      	ldr	r3, [r3, #0]
 800f88c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f88e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f890:	e853 3f00 	ldrex	r3, [r3]
 800f894:	623b      	str	r3, [r7, #32]
   return(result);
 800f896:	6a3b      	ldr	r3, [r7, #32]
 800f898:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f89c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	681b      	ldr	r3, [r3, #0]
 800f8a2:	461a      	mov	r2, r3
 800f8a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f8a6:	633b      	str	r3, [r7, #48]	@ 0x30
 800f8a8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f8ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f8ae:	e841 2300 	strex	r3, r2, [r1]
 800f8b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f8b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d1e6      	bne.n	800f888 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	681b      	ldr	r3, [r3, #0]
 800f8be:	3308      	adds	r3, #8
 800f8c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8c2:	693b      	ldr	r3, [r7, #16]
 800f8c4:	e853 3f00 	ldrex	r3, [r3]
 800f8c8:	60fb      	str	r3, [r7, #12]
   return(result);
 800f8ca:	68fb      	ldr	r3, [r7, #12]
 800f8cc:	f023 0301 	bic.w	r3, r3, #1
 800f8d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	681b      	ldr	r3, [r3, #0]
 800f8d6:	3308      	adds	r3, #8
 800f8d8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f8da:	61fa      	str	r2, [r7, #28]
 800f8dc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8de:	69b9      	ldr	r1, [r7, #24]
 800f8e0:	69fa      	ldr	r2, [r7, #28]
 800f8e2:	e841 2300 	strex	r3, r2, [r1]
 800f8e6:	617b      	str	r3, [r7, #20]
   return(result);
 800f8e8:	697b      	ldr	r3, [r7, #20]
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d1e5      	bne.n	800f8ba <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	2220      	movs	r2, #32
 800f8f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	2200      	movs	r2, #0
 800f8fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f8fe:	2303      	movs	r3, #3
 800f900:	e012      	b.n	800f928 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	2220      	movs	r2, #32
 800f906:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	2220      	movs	r2, #32
 800f90e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	2200      	movs	r2, #0
 800f916:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	2200      	movs	r2, #0
 800f91c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	2200      	movs	r2, #0
 800f922:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f926:	2300      	movs	r3, #0
}
 800f928:	4618      	mov	r0, r3
 800f92a:	3758      	adds	r7, #88	@ 0x58
 800f92c:	46bd      	mov	sp, r7
 800f92e:	bd80      	pop	{r7, pc}

0800f930 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f930:	b580      	push	{r7, lr}
 800f932:	b084      	sub	sp, #16
 800f934:	af00      	add	r7, sp, #0
 800f936:	60f8      	str	r0, [r7, #12]
 800f938:	60b9      	str	r1, [r7, #8]
 800f93a:	603b      	str	r3, [r7, #0]
 800f93c:	4613      	mov	r3, r2
 800f93e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f940:	e04f      	b.n	800f9e2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f942:	69bb      	ldr	r3, [r7, #24]
 800f944:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f948:	d04b      	beq.n	800f9e2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f94a:	f7f9 fa1b 	bl	8008d84 <HAL_GetTick>
 800f94e:	4602      	mov	r2, r0
 800f950:	683b      	ldr	r3, [r7, #0]
 800f952:	1ad3      	subs	r3, r2, r3
 800f954:	69ba      	ldr	r2, [r7, #24]
 800f956:	429a      	cmp	r2, r3
 800f958:	d302      	bcc.n	800f960 <UART_WaitOnFlagUntilTimeout+0x30>
 800f95a:	69bb      	ldr	r3, [r7, #24]
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d101      	bne.n	800f964 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800f960:	2303      	movs	r3, #3
 800f962:	e04e      	b.n	800fa02 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800f964:	68fb      	ldr	r3, [r7, #12]
 800f966:	681b      	ldr	r3, [r3, #0]
 800f968:	681b      	ldr	r3, [r3, #0]
 800f96a:	f003 0304 	and.w	r3, r3, #4
 800f96e:	2b00      	cmp	r3, #0
 800f970:	d037      	beq.n	800f9e2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800f972:	68bb      	ldr	r3, [r7, #8]
 800f974:	2b80      	cmp	r3, #128	@ 0x80
 800f976:	d034      	beq.n	800f9e2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800f978:	68bb      	ldr	r3, [r7, #8]
 800f97a:	2b40      	cmp	r3, #64	@ 0x40
 800f97c:	d031      	beq.n	800f9e2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800f97e:	68fb      	ldr	r3, [r7, #12]
 800f980:	681b      	ldr	r3, [r3, #0]
 800f982:	69db      	ldr	r3, [r3, #28]
 800f984:	f003 0308 	and.w	r3, r3, #8
 800f988:	2b08      	cmp	r3, #8
 800f98a:	d110      	bne.n	800f9ae <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f98c:	68fb      	ldr	r3, [r7, #12]
 800f98e:	681b      	ldr	r3, [r3, #0]
 800f990:	2208      	movs	r2, #8
 800f992:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f994:	68f8      	ldr	r0, [r7, #12]
 800f996:	f000 f920 	bl	800fbda <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800f99a:	68fb      	ldr	r3, [r7, #12]
 800f99c:	2208      	movs	r2, #8
 800f99e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f9a2:	68fb      	ldr	r3, [r7, #12]
 800f9a4:	2200      	movs	r2, #0
 800f9a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800f9aa:	2301      	movs	r3, #1
 800f9ac:	e029      	b.n	800fa02 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f9ae:	68fb      	ldr	r3, [r7, #12]
 800f9b0:	681b      	ldr	r3, [r3, #0]
 800f9b2:	69db      	ldr	r3, [r3, #28]
 800f9b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f9b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f9bc:	d111      	bne.n	800f9e2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f9be:	68fb      	ldr	r3, [r7, #12]
 800f9c0:	681b      	ldr	r3, [r3, #0]
 800f9c2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800f9c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f9c8:	68f8      	ldr	r0, [r7, #12]
 800f9ca:	f000 f906 	bl	800fbda <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f9ce:	68fb      	ldr	r3, [r7, #12]
 800f9d0:	2220      	movs	r2, #32
 800f9d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f9d6:	68fb      	ldr	r3, [r7, #12]
 800f9d8:	2200      	movs	r2, #0
 800f9da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800f9de:	2303      	movs	r3, #3
 800f9e0:	e00f      	b.n	800fa02 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f9e2:	68fb      	ldr	r3, [r7, #12]
 800f9e4:	681b      	ldr	r3, [r3, #0]
 800f9e6:	69da      	ldr	r2, [r3, #28]
 800f9e8:	68bb      	ldr	r3, [r7, #8]
 800f9ea:	4013      	ands	r3, r2
 800f9ec:	68ba      	ldr	r2, [r7, #8]
 800f9ee:	429a      	cmp	r2, r3
 800f9f0:	bf0c      	ite	eq
 800f9f2:	2301      	moveq	r3, #1
 800f9f4:	2300      	movne	r3, #0
 800f9f6:	b2db      	uxtb	r3, r3
 800f9f8:	461a      	mov	r2, r3
 800f9fa:	79fb      	ldrb	r3, [r7, #7]
 800f9fc:	429a      	cmp	r2, r3
 800f9fe:	d0a0      	beq.n	800f942 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800fa00:	2300      	movs	r3, #0
}
 800fa02:	4618      	mov	r0, r3
 800fa04:	3710      	adds	r7, #16
 800fa06:	46bd      	mov	sp, r7
 800fa08:	bd80      	pop	{r7, pc}
	...

0800fa0c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800fa0c:	b580      	push	{r7, lr}
 800fa0e:	b096      	sub	sp, #88	@ 0x58
 800fa10:	af00      	add	r7, sp, #0
 800fa12:	60f8      	str	r0, [r7, #12]
 800fa14:	60b9      	str	r1, [r7, #8]
 800fa16:	4613      	mov	r3, r2
 800fa18:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800fa1a:	68fb      	ldr	r3, [r7, #12]
 800fa1c:	68ba      	ldr	r2, [r7, #8]
 800fa1e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800fa20:	68fb      	ldr	r3, [r7, #12]
 800fa22:	88fa      	ldrh	r2, [r7, #6]
 800fa24:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fa28:	68fb      	ldr	r3, [r7, #12]
 800fa2a:	2200      	movs	r2, #0
 800fa2c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800fa30:	68fb      	ldr	r3, [r7, #12]
 800fa32:	2222      	movs	r2, #34	@ 0x22
 800fa34:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800fa38:	68fb      	ldr	r3, [r7, #12]
 800fa3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d02d      	beq.n	800fa9e <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800fa42:	68fb      	ldr	r3, [r7, #12]
 800fa44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fa48:	4a40      	ldr	r2, [pc, #256]	@ (800fb4c <UART_Start_Receive_DMA+0x140>)
 800fa4a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800fa4c:	68fb      	ldr	r3, [r7, #12]
 800fa4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fa52:	4a3f      	ldr	r2, [pc, #252]	@ (800fb50 <UART_Start_Receive_DMA+0x144>)
 800fa54:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800fa56:	68fb      	ldr	r3, [r7, #12]
 800fa58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fa5c:	4a3d      	ldr	r2, [pc, #244]	@ (800fb54 <UART_Start_Receive_DMA+0x148>)
 800fa5e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800fa60:	68fb      	ldr	r3, [r7, #12]
 800fa62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fa66:	2200      	movs	r2, #0
 800fa68:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800fa6a:	68fb      	ldr	r3, [r7, #12]
 800fa6c:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800fa70:	68fb      	ldr	r3, [r7, #12]
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	3324      	adds	r3, #36	@ 0x24
 800fa76:	4619      	mov	r1, r3
 800fa78:	68fb      	ldr	r3, [r7, #12]
 800fa7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fa7c:	461a      	mov	r2, r3
 800fa7e:	88fb      	ldrh	r3, [r7, #6]
 800fa80:	f7fa ffbc 	bl	800a9fc <HAL_DMA_Start_IT>
 800fa84:	4603      	mov	r3, r0
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	d009      	beq.n	800fa9e <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800fa8a:	68fb      	ldr	r3, [r7, #12]
 800fa8c:	2210      	movs	r2, #16
 800fa8e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800fa92:	68fb      	ldr	r3, [r7, #12]
 800fa94:	2220      	movs	r2, #32
 800fa96:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800fa9a:	2301      	movs	r3, #1
 800fa9c:	e051      	b.n	800fb42 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	691b      	ldr	r3, [r3, #16]
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d018      	beq.n	800fad8 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	681b      	ldr	r3, [r3, #0]
 800faaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800faac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800faae:	e853 3f00 	ldrex	r3, [r3]
 800fab2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800fab4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fab6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800faba:	657b      	str	r3, [r7, #84]	@ 0x54
 800fabc:	68fb      	ldr	r3, [r7, #12]
 800fabe:	681b      	ldr	r3, [r3, #0]
 800fac0:	461a      	mov	r2, r3
 800fac2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fac4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800fac6:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fac8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800faca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800facc:	e841 2300 	strex	r3, r2, [r1]
 800fad0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800fad2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d1e6      	bne.n	800faa6 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fad8:	68fb      	ldr	r3, [r7, #12]
 800fada:	681b      	ldr	r3, [r3, #0]
 800fadc:	3308      	adds	r3, #8
 800fade:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fae0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fae2:	e853 3f00 	ldrex	r3, [r3]
 800fae6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800fae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800faea:	f043 0301 	orr.w	r3, r3, #1
 800faee:	653b      	str	r3, [r7, #80]	@ 0x50
 800faf0:	68fb      	ldr	r3, [r7, #12]
 800faf2:	681b      	ldr	r3, [r3, #0]
 800faf4:	3308      	adds	r3, #8
 800faf6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800faf8:	637a      	str	r2, [r7, #52]	@ 0x34
 800fafa:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fafc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800fafe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fb00:	e841 2300 	strex	r3, r2, [r1]
 800fb04:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800fb06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	d1e5      	bne.n	800fad8 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fb0c:	68fb      	ldr	r3, [r7, #12]
 800fb0e:	681b      	ldr	r3, [r3, #0]
 800fb10:	3308      	adds	r3, #8
 800fb12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb14:	697b      	ldr	r3, [r7, #20]
 800fb16:	e853 3f00 	ldrex	r3, [r3]
 800fb1a:	613b      	str	r3, [r7, #16]
   return(result);
 800fb1c:	693b      	ldr	r3, [r7, #16]
 800fb1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fb22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800fb24:	68fb      	ldr	r3, [r7, #12]
 800fb26:	681b      	ldr	r3, [r3, #0]
 800fb28:	3308      	adds	r3, #8
 800fb2a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800fb2c:	623a      	str	r2, [r7, #32]
 800fb2e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb30:	69f9      	ldr	r1, [r7, #28]
 800fb32:	6a3a      	ldr	r2, [r7, #32]
 800fb34:	e841 2300 	strex	r3, r2, [r1]
 800fb38:	61bb      	str	r3, [r7, #24]
   return(result);
 800fb3a:	69bb      	ldr	r3, [r7, #24]
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d1e5      	bne.n	800fb0c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800fb40:	2300      	movs	r3, #0
}
 800fb42:	4618      	mov	r0, r3
 800fb44:	3758      	adds	r7, #88	@ 0x58
 800fb46:	46bd      	mov	sp, r7
 800fb48:	bd80      	pop	{r7, pc}
 800fb4a:	bf00      	nop
 800fb4c:	0800fca7 	.word	0x0800fca7
 800fb50:	0800fddb 	.word	0x0800fddb
 800fb54:	0800fe21 	.word	0x0800fe21

0800fb58 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800fb58:	b480      	push	{r7}
 800fb5a:	b08f      	sub	sp, #60	@ 0x3c
 800fb5c:	af00      	add	r7, sp, #0
 800fb5e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	681b      	ldr	r3, [r3, #0]
 800fb64:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb66:	6a3b      	ldr	r3, [r7, #32]
 800fb68:	e853 3f00 	ldrex	r3, [r3]
 800fb6c:	61fb      	str	r3, [r7, #28]
   return(result);
 800fb6e:	69fb      	ldr	r3, [r7, #28]
 800fb70:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800fb74:	637b      	str	r3, [r7, #52]	@ 0x34
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	681b      	ldr	r3, [r3, #0]
 800fb7a:	461a      	mov	r2, r3
 800fb7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fb7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800fb80:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb82:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800fb84:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fb86:	e841 2300 	strex	r3, r2, [r1]
 800fb8a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800fb8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d1e6      	bne.n	800fb60 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	681b      	ldr	r3, [r3, #0]
 800fb96:	3308      	adds	r3, #8
 800fb98:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb9a:	68fb      	ldr	r3, [r7, #12]
 800fb9c:	e853 3f00 	ldrex	r3, [r3]
 800fba0:	60bb      	str	r3, [r7, #8]
   return(result);
 800fba2:	68bb      	ldr	r3, [r7, #8]
 800fba4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800fba8:	633b      	str	r3, [r7, #48]	@ 0x30
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	681b      	ldr	r3, [r3, #0]
 800fbae:	3308      	adds	r3, #8
 800fbb0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fbb2:	61ba      	str	r2, [r7, #24]
 800fbb4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbb6:	6979      	ldr	r1, [r7, #20]
 800fbb8:	69ba      	ldr	r2, [r7, #24]
 800fbba:	e841 2300 	strex	r3, r2, [r1]
 800fbbe:	613b      	str	r3, [r7, #16]
   return(result);
 800fbc0:	693b      	ldr	r3, [r7, #16]
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	d1e5      	bne.n	800fb92 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	2220      	movs	r2, #32
 800fbca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800fbce:	bf00      	nop
 800fbd0:	373c      	adds	r7, #60	@ 0x3c
 800fbd2:	46bd      	mov	sp, r7
 800fbd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbd8:	4770      	bx	lr

0800fbda <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800fbda:	b480      	push	{r7}
 800fbdc:	b095      	sub	sp, #84	@ 0x54
 800fbde:	af00      	add	r7, sp, #0
 800fbe0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	681b      	ldr	r3, [r3, #0]
 800fbe6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fbe8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fbea:	e853 3f00 	ldrex	r3, [r3]
 800fbee:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800fbf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fbf2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800fbf6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	681b      	ldr	r3, [r3, #0]
 800fbfc:	461a      	mov	r2, r3
 800fbfe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fc00:	643b      	str	r3, [r7, #64]	@ 0x40
 800fc02:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc04:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800fc06:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800fc08:	e841 2300 	strex	r3, r2, [r1]
 800fc0c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800fc0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	d1e6      	bne.n	800fbe2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	681b      	ldr	r3, [r3, #0]
 800fc18:	3308      	adds	r3, #8
 800fc1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc1c:	6a3b      	ldr	r3, [r7, #32]
 800fc1e:	e853 3f00 	ldrex	r3, [r3]
 800fc22:	61fb      	str	r3, [r7, #28]
   return(result);
 800fc24:	69fb      	ldr	r3, [r7, #28]
 800fc26:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800fc2a:	f023 0301 	bic.w	r3, r3, #1
 800fc2e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	681b      	ldr	r3, [r3, #0]
 800fc34:	3308      	adds	r3, #8
 800fc36:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800fc38:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800fc3a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc3c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800fc3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fc40:	e841 2300 	strex	r3, r2, [r1]
 800fc44:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800fc46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	d1e3      	bne.n	800fc14 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fc50:	2b01      	cmp	r3, #1
 800fc52:	d118      	bne.n	800fc86 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	681b      	ldr	r3, [r3, #0]
 800fc58:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc5a:	68fb      	ldr	r3, [r7, #12]
 800fc5c:	e853 3f00 	ldrex	r3, [r3]
 800fc60:	60bb      	str	r3, [r7, #8]
   return(result);
 800fc62:	68bb      	ldr	r3, [r7, #8]
 800fc64:	f023 0310 	bic.w	r3, r3, #16
 800fc68:	647b      	str	r3, [r7, #68]	@ 0x44
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	681b      	ldr	r3, [r3, #0]
 800fc6e:	461a      	mov	r2, r3
 800fc70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fc72:	61bb      	str	r3, [r7, #24]
 800fc74:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc76:	6979      	ldr	r1, [r7, #20]
 800fc78:	69ba      	ldr	r2, [r7, #24]
 800fc7a:	e841 2300 	strex	r3, r2, [r1]
 800fc7e:	613b      	str	r3, [r7, #16]
   return(result);
 800fc80:	693b      	ldr	r3, [r7, #16]
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	d1e6      	bne.n	800fc54 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	2220      	movs	r2, #32
 800fc8a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	2200      	movs	r2, #0
 800fc92:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	2200      	movs	r2, #0
 800fc98:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800fc9a:	bf00      	nop
 800fc9c:	3754      	adds	r7, #84	@ 0x54
 800fc9e:	46bd      	mov	sp, r7
 800fca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fca4:	4770      	bx	lr

0800fca6 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800fca6:	b580      	push	{r7, lr}
 800fca8:	b09c      	sub	sp, #112	@ 0x70
 800fcaa:	af00      	add	r7, sp, #0
 800fcac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fcb2:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	681b      	ldr	r3, [r3, #0]
 800fcb8:	681b      	ldr	r3, [r3, #0]
 800fcba:	f003 0320 	and.w	r3, r3, #32
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d171      	bne.n	800fda6 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800fcc2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fcc4:	2200      	movs	r2, #0
 800fcc6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fcca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fccc:	681b      	ldr	r3, [r3, #0]
 800fcce:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fcd0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fcd2:	e853 3f00 	ldrex	r3, [r3]
 800fcd6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800fcd8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fcda:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800fcde:	66bb      	str	r3, [r7, #104]	@ 0x68
 800fce0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fce2:	681b      	ldr	r3, [r3, #0]
 800fce4:	461a      	mov	r2, r3
 800fce6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800fce8:	65bb      	str	r3, [r7, #88]	@ 0x58
 800fcea:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fcec:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800fcee:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800fcf0:	e841 2300 	strex	r3, r2, [r1]
 800fcf4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800fcf6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d1e6      	bne.n	800fcca <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fcfc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fcfe:	681b      	ldr	r3, [r3, #0]
 800fd00:	3308      	adds	r3, #8
 800fd02:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd06:	e853 3f00 	ldrex	r3, [r3]
 800fd0a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800fd0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fd0e:	f023 0301 	bic.w	r3, r3, #1
 800fd12:	667b      	str	r3, [r7, #100]	@ 0x64
 800fd14:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fd16:	681b      	ldr	r3, [r3, #0]
 800fd18:	3308      	adds	r3, #8
 800fd1a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800fd1c:	647a      	str	r2, [r7, #68]	@ 0x44
 800fd1e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd20:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800fd22:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800fd24:	e841 2300 	strex	r3, r2, [r1]
 800fd28:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800fd2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d1e5      	bne.n	800fcfc <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fd30:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fd32:	681b      	ldr	r3, [r3, #0]
 800fd34:	3308      	adds	r3, #8
 800fd36:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd3a:	e853 3f00 	ldrex	r3, [r3]
 800fd3e:	623b      	str	r3, [r7, #32]
   return(result);
 800fd40:	6a3b      	ldr	r3, [r7, #32]
 800fd42:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fd46:	663b      	str	r3, [r7, #96]	@ 0x60
 800fd48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	3308      	adds	r3, #8
 800fd4e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800fd50:	633a      	str	r2, [r7, #48]	@ 0x30
 800fd52:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd54:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800fd56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fd58:	e841 2300 	strex	r3, r2, [r1]
 800fd5c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800fd5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	d1e5      	bne.n	800fd30 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800fd64:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fd66:	2220      	movs	r2, #32
 800fd68:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fd6c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fd6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fd70:	2b01      	cmp	r3, #1
 800fd72:	d118      	bne.n	800fda6 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fd74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fd76:	681b      	ldr	r3, [r3, #0]
 800fd78:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd7a:	693b      	ldr	r3, [r7, #16]
 800fd7c:	e853 3f00 	ldrex	r3, [r3]
 800fd80:	60fb      	str	r3, [r7, #12]
   return(result);
 800fd82:	68fb      	ldr	r3, [r7, #12]
 800fd84:	f023 0310 	bic.w	r3, r3, #16
 800fd88:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800fd8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fd8c:	681b      	ldr	r3, [r3, #0]
 800fd8e:	461a      	mov	r2, r3
 800fd90:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fd92:	61fb      	str	r3, [r7, #28]
 800fd94:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd96:	69b9      	ldr	r1, [r7, #24]
 800fd98:	69fa      	ldr	r2, [r7, #28]
 800fd9a:	e841 2300 	strex	r3, r2, [r1]
 800fd9e:	617b      	str	r3, [r7, #20]
   return(result);
 800fda0:	697b      	ldr	r3, [r7, #20]
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	d1e6      	bne.n	800fd74 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800fda6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fda8:	2200      	movs	r2, #0
 800fdaa:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fdac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fdae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fdb0:	2b01      	cmp	r3, #1
 800fdb2:	d109      	bne.n	800fdc8 <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800fdb4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fdb6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800fdba:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800fdbc:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800fdc0:	4611      	mov	r1, r2
 800fdc2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800fdc4:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800fdc6:	e004      	b.n	800fdd2 <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 800fdc8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fdca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800fdce:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800fdd0:	4798      	blx	r3
}
 800fdd2:	bf00      	nop
 800fdd4:	3770      	adds	r7, #112	@ 0x70
 800fdd6:	46bd      	mov	sp, r7
 800fdd8:	bd80      	pop	{r7, pc}

0800fdda <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800fdda:	b580      	push	{r7, lr}
 800fddc:	b084      	sub	sp, #16
 800fdde:	af00      	add	r7, sp, #0
 800fde0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fde6:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800fde8:	68fb      	ldr	r3, [r7, #12]
 800fdea:	2201      	movs	r2, #1
 800fdec:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fdee:	68fb      	ldr	r3, [r7, #12]
 800fdf0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fdf2:	2b01      	cmp	r3, #1
 800fdf4:	d10b      	bne.n	800fe0e <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800fdf6:	68fb      	ldr	r3, [r7, #12]
 800fdf8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800fdfc:	68fa      	ldr	r2, [r7, #12]
 800fdfe:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800fe02:	0852      	lsrs	r2, r2, #1
 800fe04:	b292      	uxth	r2, r2
 800fe06:	4611      	mov	r1, r2
 800fe08:	68f8      	ldr	r0, [r7, #12]
 800fe0a:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800fe0c:	e004      	b.n	800fe18 <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 800fe0e:	68fb      	ldr	r3, [r7, #12]
 800fe10:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800fe14:	68f8      	ldr	r0, [r7, #12]
 800fe16:	4798      	blx	r3
}
 800fe18:	bf00      	nop
 800fe1a:	3710      	adds	r7, #16
 800fe1c:	46bd      	mov	sp, r7
 800fe1e:	bd80      	pop	{r7, pc}

0800fe20 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800fe20:	b580      	push	{r7, lr}
 800fe22:	b086      	sub	sp, #24
 800fe24:	af00      	add	r7, sp, #0
 800fe26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fe2c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800fe2e:	697b      	ldr	r3, [r7, #20]
 800fe30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800fe34:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800fe36:	697b      	ldr	r3, [r7, #20]
 800fe38:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800fe3c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800fe3e:	697b      	ldr	r3, [r7, #20]
 800fe40:	681b      	ldr	r3, [r3, #0]
 800fe42:	689b      	ldr	r3, [r3, #8]
 800fe44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fe48:	2b80      	cmp	r3, #128	@ 0x80
 800fe4a:	d109      	bne.n	800fe60 <UART_DMAError+0x40>
 800fe4c:	693b      	ldr	r3, [r7, #16]
 800fe4e:	2b21      	cmp	r3, #33	@ 0x21
 800fe50:	d106      	bne.n	800fe60 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800fe52:	697b      	ldr	r3, [r7, #20]
 800fe54:	2200      	movs	r2, #0
 800fe56:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800fe5a:	6978      	ldr	r0, [r7, #20]
 800fe5c:	f7ff fe7c 	bl	800fb58 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800fe60:	697b      	ldr	r3, [r7, #20]
 800fe62:	681b      	ldr	r3, [r3, #0]
 800fe64:	689b      	ldr	r3, [r3, #8]
 800fe66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fe6a:	2b40      	cmp	r3, #64	@ 0x40
 800fe6c:	d109      	bne.n	800fe82 <UART_DMAError+0x62>
 800fe6e:	68fb      	ldr	r3, [r7, #12]
 800fe70:	2b22      	cmp	r3, #34	@ 0x22
 800fe72:	d106      	bne.n	800fe82 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800fe74:	697b      	ldr	r3, [r7, #20]
 800fe76:	2200      	movs	r2, #0
 800fe78:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800fe7c:	6978      	ldr	r0, [r7, #20]
 800fe7e:	f7ff feac 	bl	800fbda <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800fe82:	697b      	ldr	r3, [r7, #20]
 800fe84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fe88:	f043 0210 	orr.w	r2, r3, #16
 800fe8c:	697b      	ldr	r3, [r7, #20]
 800fe8e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800fe92:	697b      	ldr	r3, [r7, #20]
 800fe94:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800fe98:	6978      	ldr	r0, [r7, #20]
 800fe9a:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fe9c:	bf00      	nop
 800fe9e:	3718      	adds	r7, #24
 800fea0:	46bd      	mov	sp, r7
 800fea2:	bd80      	pop	{r7, pc}

0800fea4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800fea4:	b580      	push	{r7, lr}
 800fea6:	b084      	sub	sp, #16
 800fea8:	af00      	add	r7, sp, #0
 800feaa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800feb0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800feb2:	68fb      	ldr	r3, [r7, #12]
 800feb4:	2200      	movs	r2, #0
 800feb6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800feba:	68fb      	ldr	r3, [r7, #12]
 800febc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800fec0:	68f8      	ldr	r0, [r7, #12]
 800fec2:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fec4:	bf00      	nop
 800fec6:	3710      	adds	r7, #16
 800fec8:	46bd      	mov	sp, r7
 800feca:	bd80      	pop	{r7, pc}

0800fecc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800fecc:	b580      	push	{r7, lr}
 800fece:	b088      	sub	sp, #32
 800fed0:	af00      	add	r7, sp, #0
 800fed2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	681b      	ldr	r3, [r3, #0]
 800fed8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800feda:	68fb      	ldr	r3, [r7, #12]
 800fedc:	e853 3f00 	ldrex	r3, [r3]
 800fee0:	60bb      	str	r3, [r7, #8]
   return(result);
 800fee2:	68bb      	ldr	r3, [r7, #8]
 800fee4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fee8:	61fb      	str	r3, [r7, #28]
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	681b      	ldr	r3, [r3, #0]
 800feee:	461a      	mov	r2, r3
 800fef0:	69fb      	ldr	r3, [r7, #28]
 800fef2:	61bb      	str	r3, [r7, #24]
 800fef4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fef6:	6979      	ldr	r1, [r7, #20]
 800fef8:	69ba      	ldr	r2, [r7, #24]
 800fefa:	e841 2300 	strex	r3, r2, [r1]
 800fefe:	613b      	str	r3, [r7, #16]
   return(result);
 800ff00:	693b      	ldr	r3, [r7, #16]
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	d1e6      	bne.n	800fed4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	2220      	movs	r2, #32
 800ff0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	2200      	movs	r2, #0
 800ff12:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800ff1a:	6878      	ldr	r0, [r7, #4]
 800ff1c:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ff1e:	bf00      	nop
 800ff20:	3720      	adds	r7, #32
 800ff22:	46bd      	mov	sp, r7
 800ff24:	bd80      	pop	{r7, pc}

0800ff26 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ff26:	b480      	push	{r7}
 800ff28:	b083      	sub	sp, #12
 800ff2a:	af00      	add	r7, sp, #0
 800ff2c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ff2e:	bf00      	nop
 800ff30:	370c      	adds	r7, #12
 800ff32:	46bd      	mov	sp, r7
 800ff34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff38:	4770      	bx	lr

0800ff3a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ff3a:	b480      	push	{r7}
 800ff3c:	b083      	sub	sp, #12
 800ff3e:	af00      	add	r7, sp, #0
 800ff40:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ff42:	bf00      	nop
 800ff44:	370c      	adds	r7, #12
 800ff46:	46bd      	mov	sp, r7
 800ff48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff4c:	4770      	bx	lr

0800ff4e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ff4e:	b480      	push	{r7}
 800ff50:	b083      	sub	sp, #12
 800ff52:	af00      	add	r7, sp, #0
 800ff54:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ff56:	bf00      	nop
 800ff58:	370c      	adds	r7, #12
 800ff5a:	46bd      	mov	sp, r7
 800ff5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff60:	4770      	bx	lr

0800ff62 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ff62:	b480      	push	{r7}
 800ff64:	b085      	sub	sp, #20
 800ff66:	af00      	add	r7, sp, #0
 800ff68:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ff70:	2b01      	cmp	r3, #1
 800ff72:	d101      	bne.n	800ff78 <HAL_UARTEx_DisableFifoMode+0x16>
 800ff74:	2302      	movs	r3, #2
 800ff76:	e027      	b.n	800ffc8 <HAL_UARTEx_DisableFifoMode+0x66>
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	2201      	movs	r2, #1
 800ff7c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	2224      	movs	r2, #36	@ 0x24
 800ff84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	681b      	ldr	r3, [r3, #0]
 800ff8e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	681b      	ldr	r3, [r3, #0]
 800ff94:	681a      	ldr	r2, [r3, #0]
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	681b      	ldr	r3, [r3, #0]
 800ff9a:	f022 0201 	bic.w	r2, r2, #1
 800ff9e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ffa0:	68fb      	ldr	r3, [r7, #12]
 800ffa2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800ffa6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	2200      	movs	r2, #0
 800ffac:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	681b      	ldr	r3, [r3, #0]
 800ffb2:	68fa      	ldr	r2, [r7, #12]
 800ffb4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	2220      	movs	r2, #32
 800ffba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	2200      	movs	r2, #0
 800ffc2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ffc6:	2300      	movs	r3, #0
}
 800ffc8:	4618      	mov	r0, r3
 800ffca:	3714      	adds	r7, #20
 800ffcc:	46bd      	mov	sp, r7
 800ffce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffd2:	4770      	bx	lr

0800ffd4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ffd4:	b580      	push	{r7, lr}
 800ffd6:	b084      	sub	sp, #16
 800ffd8:	af00      	add	r7, sp, #0
 800ffda:	6078      	str	r0, [r7, #4]
 800ffdc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ffe4:	2b01      	cmp	r3, #1
 800ffe6:	d101      	bne.n	800ffec <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ffe8:	2302      	movs	r3, #2
 800ffea:	e02d      	b.n	8010048 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	2201      	movs	r2, #1
 800fff0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	2224      	movs	r2, #36	@ 0x24
 800fff8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	681b      	ldr	r3, [r3, #0]
 8010000:	681b      	ldr	r3, [r3, #0]
 8010002:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	681b      	ldr	r3, [r3, #0]
 8010008:	681a      	ldr	r2, [r3, #0]
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	681b      	ldr	r3, [r3, #0]
 801000e:	f022 0201 	bic.w	r2, r2, #1
 8010012:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	681b      	ldr	r3, [r3, #0]
 8010018:	689b      	ldr	r3, [r3, #8]
 801001a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	681b      	ldr	r3, [r3, #0]
 8010022:	683a      	ldr	r2, [r7, #0]
 8010024:	430a      	orrs	r2, r1
 8010026:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010028:	6878      	ldr	r0, [r7, #4]
 801002a:	f000 f84f 	bl	80100cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	681b      	ldr	r3, [r3, #0]
 8010032:	68fa      	ldr	r2, [r7, #12]
 8010034:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	2220      	movs	r2, #32
 801003a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	2200      	movs	r2, #0
 8010042:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010046:	2300      	movs	r3, #0
}
 8010048:	4618      	mov	r0, r3
 801004a:	3710      	adds	r7, #16
 801004c:	46bd      	mov	sp, r7
 801004e:	bd80      	pop	{r7, pc}

08010050 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010050:	b580      	push	{r7, lr}
 8010052:	b084      	sub	sp, #16
 8010054:	af00      	add	r7, sp, #0
 8010056:	6078      	str	r0, [r7, #4]
 8010058:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010060:	2b01      	cmp	r3, #1
 8010062:	d101      	bne.n	8010068 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8010064:	2302      	movs	r3, #2
 8010066:	e02d      	b.n	80100c4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	2201      	movs	r2, #1
 801006c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	2224      	movs	r2, #36	@ 0x24
 8010074:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	681b      	ldr	r3, [r3, #0]
 801007c:	681b      	ldr	r3, [r3, #0]
 801007e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	681b      	ldr	r3, [r3, #0]
 8010084:	681a      	ldr	r2, [r3, #0]
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	681b      	ldr	r3, [r3, #0]
 801008a:	f022 0201 	bic.w	r2, r2, #1
 801008e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	681b      	ldr	r3, [r3, #0]
 8010094:	689b      	ldr	r3, [r3, #8]
 8010096:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	681b      	ldr	r3, [r3, #0]
 801009e:	683a      	ldr	r2, [r7, #0]
 80100a0:	430a      	orrs	r2, r1
 80100a2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80100a4:	6878      	ldr	r0, [r7, #4]
 80100a6:	f000 f811 	bl	80100cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	681b      	ldr	r3, [r3, #0]
 80100ae:	68fa      	ldr	r2, [r7, #12]
 80100b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	2220      	movs	r2, #32
 80100b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	2200      	movs	r2, #0
 80100be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80100c2:	2300      	movs	r3, #0
}
 80100c4:	4618      	mov	r0, r3
 80100c6:	3710      	adds	r7, #16
 80100c8:	46bd      	mov	sp, r7
 80100ca:	bd80      	pop	{r7, pc}

080100cc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80100cc:	b480      	push	{r7}
 80100ce:	b085      	sub	sp, #20
 80100d0:	af00      	add	r7, sp, #0
 80100d2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d108      	bne.n	80100ee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	2201      	movs	r2, #1
 80100e0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	2201      	movs	r2, #1
 80100e8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80100ec:	e031      	b.n	8010152 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80100ee:	2308      	movs	r3, #8
 80100f0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80100f2:	2308      	movs	r3, #8
 80100f4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	681b      	ldr	r3, [r3, #0]
 80100fa:	689b      	ldr	r3, [r3, #8]
 80100fc:	0e5b      	lsrs	r3, r3, #25
 80100fe:	b2db      	uxtb	r3, r3
 8010100:	f003 0307 	and.w	r3, r3, #7
 8010104:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	681b      	ldr	r3, [r3, #0]
 801010a:	689b      	ldr	r3, [r3, #8]
 801010c:	0f5b      	lsrs	r3, r3, #29
 801010e:	b2db      	uxtb	r3, r3
 8010110:	f003 0307 	and.w	r3, r3, #7
 8010114:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010116:	7bbb      	ldrb	r3, [r7, #14]
 8010118:	7b3a      	ldrb	r2, [r7, #12]
 801011a:	4911      	ldr	r1, [pc, #68]	@ (8010160 <UARTEx_SetNbDataToProcess+0x94>)
 801011c:	5c8a      	ldrb	r2, [r1, r2]
 801011e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8010122:	7b3a      	ldrb	r2, [r7, #12]
 8010124:	490f      	ldr	r1, [pc, #60]	@ (8010164 <UARTEx_SetNbDataToProcess+0x98>)
 8010126:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010128:	fb93 f3f2 	sdiv	r3, r3, r2
 801012c:	b29a      	uxth	r2, r3
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010134:	7bfb      	ldrb	r3, [r7, #15]
 8010136:	7b7a      	ldrb	r2, [r7, #13]
 8010138:	4909      	ldr	r1, [pc, #36]	@ (8010160 <UARTEx_SetNbDataToProcess+0x94>)
 801013a:	5c8a      	ldrb	r2, [r1, r2]
 801013c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8010140:	7b7a      	ldrb	r2, [r7, #13]
 8010142:	4908      	ldr	r1, [pc, #32]	@ (8010164 <UARTEx_SetNbDataToProcess+0x98>)
 8010144:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010146:	fb93 f3f2 	sdiv	r3, r3, r2
 801014a:	b29a      	uxth	r2, r3
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8010152:	bf00      	nop
 8010154:	3714      	adds	r7, #20
 8010156:	46bd      	mov	sp, r7
 8010158:	f85d 7b04 	ldr.w	r7, [sp], #4
 801015c:	4770      	bx	lr
 801015e:	bf00      	nop
 8010160:	08012c30 	.word	0x08012c30
 8010164:	08012c38 	.word	0x08012c38

08010168 <arm_mat_add_f32>:
#else
arm_status arm_mat_add_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 8010168:	b480      	push	{r7}
 801016a:	b08b      	sub	sp, #44	@ 0x2c
 801016c:	af00      	add	r7, sp, #0
 801016e:	60f8      	str	r0, [r7, #12]
 8010170:	60b9      	str	r1, [r7, #8]
 8010172:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 8010174:	68fb      	ldr	r3, [r7, #12]
 8010176:	685b      	ldr	r3, [r3, #4]
 8010178:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 801017a:	68bb      	ldr	r3, [r7, #8]
 801017c:	685b      	ldr	r3, [r3, #4]
 801017e:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	685b      	ldr	r3, [r3, #4]
 8010184:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 8010186:	68fb      	ldr	r3, [r7, #12]
 8010188:	881b      	ldrh	r3, [r3, #0]
 801018a:	461a      	mov	r2, r3
 801018c:	68fb      	ldr	r3, [r7, #12]
 801018e:	885b      	ldrh	r3, [r3, #2]
 8010190:	fb02 f303 	mul.w	r3, r2, r3
 8010194:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 8010196:	697b      	ldr	r3, [r7, #20]
 8010198:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 801019a:	e013      	b.n	80101c4 <arm_mat_add_f32+0x5c>
    {
      /* C(m,n) = A(m,n) + B(m,n) */

      /* Add and store result in destination buffer. */
      *pOut++ = *pInA++ + *pInB++;
 801019c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801019e:	1d1a      	adds	r2, r3, #4
 80101a0:	627a      	str	r2, [r7, #36]	@ 0x24
 80101a2:	ed93 7a00 	vldr	s14, [r3]
 80101a6:	6a3b      	ldr	r3, [r7, #32]
 80101a8:	1d1a      	adds	r2, r3, #4
 80101aa:	623a      	str	r2, [r7, #32]
 80101ac:	edd3 7a00 	vldr	s15, [r3]
 80101b0:	69fb      	ldr	r3, [r7, #28]
 80101b2:	1d1a      	adds	r2, r3, #4
 80101b4:	61fa      	str	r2, [r7, #28]
 80101b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80101ba:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 80101be:	69bb      	ldr	r3, [r7, #24]
 80101c0:	3b01      	subs	r3, #1
 80101c2:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 80101c4:	69bb      	ldr	r3, [r7, #24]
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	d1e8      	bne.n	801019c <arm_mat_add_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 80101ca:	2300      	movs	r3, #0
 80101cc:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 80101ce:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 80101d2:	4618      	mov	r0, r3
 80101d4:	372c      	adds	r7, #44	@ 0x2c
 80101d6:	46bd      	mov	sp, r7
 80101d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101dc:	4770      	bx	lr

080101de <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 80101de:	b480      	push	{r7}
 80101e0:	b085      	sub	sp, #20
 80101e2:	af00      	add	r7, sp, #0
 80101e4:	60f8      	str	r0, [r7, #12]
 80101e6:	607b      	str	r3, [r7, #4]
 80101e8:	460b      	mov	r3, r1
 80101ea:	817b      	strh	r3, [r7, #10]
 80101ec:	4613      	mov	r3, r2
 80101ee:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 80101f0:	68fb      	ldr	r3, [r7, #12]
 80101f2:	897a      	ldrh	r2, [r7, #10]
 80101f4:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 80101f6:	68fb      	ldr	r3, [r7, #12]
 80101f8:	893a      	ldrh	r2, [r7, #8]
 80101fa:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 80101fc:	68fb      	ldr	r3, [r7, #12]
 80101fe:	687a      	ldr	r2, [r7, #4]
 8010200:	605a      	str	r2, [r3, #4]
}
 8010202:	bf00      	nop
 8010204:	3714      	adds	r7, #20
 8010206:	46bd      	mov	sp, r7
 8010208:	f85d 7b04 	ldr.w	r7, [sp], #4
 801020c:	4770      	bx	lr

0801020e <arm_mat_inverse_f32>:
                   - \ref ARM_MATH_SINGULAR      : Input matrix is found to be singular (non-invertible)
 */
arm_status arm_mat_inverse_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 801020e:	b480      	push	{r7}
 8010210:	b0bb      	sub	sp, #236	@ 0xec
 8010212:	af00      	add	r7, sp, #0
 8010214:	6078      	str	r0, [r7, #4]
 8010216:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	685b      	ldr	r3, [r3, #4]
 801021c:	667b      	str	r3, [r7, #100]	@ 0x64
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 801021e:	683b      	ldr	r3, [r7, #0]
 8010220:	685b      	ldr	r3, [r3, #4]
 8010222:	663b      	str	r3, [r7, #96]	@ 0x60
  
  float32_t *pTmp;
  uint32_t numRows = pSrc->numRows;              /* Number of rows in the matrix  */
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	881b      	ldrh	r3, [r3, #0]
 8010228:	65fb      	str	r3, [r7, #92]	@ 0x5c
  uint32_t numCols = pSrc->numCols;              /* Number of Cols in the matrix  */
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	885b      	ldrh	r3, [r3, #2]
 801022e:	65bb      	str	r3, [r7, #88]	@ 0x58


  float32_t pivot = 0.0f, newPivot=0.0f;                /* Temporary input values  */
 8010230:	f04f 0300 	mov.w	r3, #0
 8010234:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8010238:	f04f 0300 	mov.w	r3, #0
 801023c:	657b      	str	r3, [r7, #84]	@ 0x54
  uint32_t selectedRow,pivotRow,i, rowNb, rowCnt, flag = 0U, j,column;      /* loop counters */
 801023e:	2300      	movs	r3, #0
 8010240:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
     *      8. Now an identical matrix is formed to the left of the bar(input matrix, pSrc).
     *         Therefore, the matrix to the right of the bar is our solution(pDst matrix, pDst).
     *----------------------------------------------------------------------------------------------------------------*/

    /* Working pointer for destination matrix */
    pTmp = pOut;
 8010244:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010246:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

    /* Loop over the number of rows */
    rowCnt = numRows;
 801024a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801024c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

    /* Making the destination matrix as identity matrix */
    while (rowCnt > 0U)
 8010250:	e03b      	b.n	80102ca <arm_mat_inverse_f32+0xbc>
    {
      /* Writing all zeroes in lower triangle of the destination matrix */
      j = numRows - rowCnt;
 8010252:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8010254:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8010258:	1ad3      	subs	r3, r2, r3
 801025a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 801025e:	e00c      	b.n	801027a <arm_mat_inverse_f32+0x6c>
      {
        *pTmp++ = 0.0f;
 8010260:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010264:	1d1a      	adds	r2, r3, #4
 8010266:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 801026a:	f04f 0200 	mov.w	r2, #0
 801026e:	601a      	str	r2, [r3, #0]
        j--;
 8010270:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8010274:	3b01      	subs	r3, #1
 8010276:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 801027a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 801027e:	2b00      	cmp	r3, #0
 8010280:	d1ee      	bne.n	8010260 <arm_mat_inverse_f32+0x52>
      }

      /* Writing all ones in the diagonal of the destination matrix */
      *pTmp++ = 1.0f;
 8010282:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010286:	1d1a      	adds	r2, r3, #4
 8010288:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 801028c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8010290:	601a      	str	r2, [r3, #0]

      /* Writing all zeroes in upper triangle of the destination matrix */
      j = rowCnt - 1U;
 8010292:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8010296:	3b01      	subs	r3, #1
 8010298:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 801029c:	e00c      	b.n	80102b8 <arm_mat_inverse_f32+0xaa>
      {
        *pTmp++ = 0.0f;
 801029e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80102a2:	1d1a      	adds	r2, r3, #4
 80102a4:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 80102a8:	f04f 0200 	mov.w	r2, #0
 80102ac:	601a      	str	r2, [r3, #0]
        j--;
 80102ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80102b2:	3b01      	subs	r3, #1
 80102b4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 80102b8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80102bc:	2b00      	cmp	r3, #0
 80102be:	d1ee      	bne.n	801029e <arm_mat_inverse_f32+0x90>
      }

      /* Decrement loop counter */
      rowCnt--;
 80102c0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80102c4:	3b01      	subs	r3, #1
 80102c6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    while (rowCnt > 0U)
 80102ca:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d1bf      	bne.n	8010252 <arm_mat_inverse_f32+0x44>

    /* Loop over the number of columns of the input matrix.
       All the elements in each column are processed by the row operations */

    /* Index modifier to navigate through the columns */
    for(column = 0U; column < numCols; column++)
 80102d2:	2300      	movs	r3, #0
 80102d4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80102d8:	e2c7      	b.n	801086a <arm_mat_inverse_f32+0x65c>
      /* Check if the pivot element is zero..
       * If it is zero then interchange the row with non zero row below.
       * If there is no non zero element to replace in the rows below,
       * then the matrix is Singular. */

      pivotRow = column;
 80102da:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80102de:	653b      	str	r3, [r7, #80]	@ 0x50

      /* Temporary variable to hold the pivot value */
      pTmp = ELEM(pSrc,column,column) ;
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	685a      	ldr	r2, [r3, #4]
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	885b      	ldrh	r3, [r3, #2]
 80102e8:	3301      	adds	r3, #1
 80102ea:	f8d7 10c4 	ldr.w	r1, [r7, #196]	@ 0xc4
 80102ee:	fb01 f303 	mul.w	r3, r1, r3
 80102f2:	009b      	lsls	r3, r3, #2
 80102f4:	4413      	add	r3, r2
 80102f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
      pivot = *pTmp;
 80102fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80102fe:	681b      	ldr	r3, [r3, #0]
 8010300:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      selectedRow = column;
 8010304:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8010308:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

      /* Find maximum pivot in column */
      
        /* Loop over the number rows present below */

      for (rowNb = column+1; rowNb < numRows; rowNb++)
 801030c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8010310:	3301      	adds	r3, #1
 8010312:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8010316:	e02c      	b.n	8010372 <arm_mat_inverse_f32+0x164>
      {
          /* Update the input and destination pointers */
          pTmp = ELEM(pSrc,rowNb,column);
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	685a      	ldr	r2, [r3, #4]
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	885b      	ldrh	r3, [r3, #2]
 8010320:	4619      	mov	r1, r3
 8010322:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8010326:	fb03 f101 	mul.w	r1, r3, r1
 801032a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801032e:	440b      	add	r3, r1
 8010330:	009b      	lsls	r3, r3, #2
 8010332:	4413      	add	r3, r2
 8010334:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
          newPivot = *pTmp;
 8010338:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801033c:	681b      	ldr	r3, [r3, #0]
 801033e:	657b      	str	r3, [r7, #84]	@ 0x54
          if (fabsf(newPivot) > fabsf(pivot))
 8010340:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8010344:	eeb0 7ae7 	vabs.f32	s14, s15
 8010348:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 801034c:	eef0 7ae7 	vabs.f32	s15, s15
 8010350:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010358:	dd06      	ble.n	8010368 <arm_mat_inverse_f32+0x15a>
          {
            selectedRow = rowNb; 
 801035a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801035e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
            pivot = newPivot;
 8010362:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010364:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      for (rowNb = column+1; rowNb < numRows; rowNb++)
 8010368:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801036c:	3301      	adds	r3, #1
 801036e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8010372:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8010376:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010378:	429a      	cmp	r2, r3
 801037a:	d3cd      	bcc.n	8010318 <arm_mat_inverse_f32+0x10a>
          }
      }
        
      /* Check if there is a non zero pivot element to
       * replace in the rows below */
      if ((pivot != 0.0f) && (selectedRow != column))
 801037c:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8010380:	eef5 7a40 	vcmp.f32	s15, #0.0
 8010384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010388:	f000 809b 	beq.w	80104c2 <arm_mat_inverse_f32+0x2b4>
 801038c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8010390:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8010394:	429a      	cmp	r2, r3
 8010396:	f000 8094 	beq.w	80104c2 <arm_mat_inverse_f32+0x2b4>
      {
            
            SWAP_ROWS_F32(pSrc,column, pivotRow,selectedRow);
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	685b      	ldr	r3, [r3, #4]
 801039e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	685b      	ldr	r3, [r3, #4]
 80103a6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	885b      	ldrh	r3, [r3, #2]
 80103ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80103b0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80103b2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80103b6:	1ad3      	subs	r3, r2, r3
 80103b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80103ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80103bc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80103be:	fb03 f202 	mul.w	r2, r3, r2
 80103c2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80103c6:	4413      	add	r3, r2
 80103c8:	009b      	lsls	r3, r3, #2
 80103ca:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80103ce:	4413      	add	r3, r2
 80103d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80103d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80103d6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80103da:	fb03 f202 	mul.w	r2, r3, r2
 80103de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80103e2:	4413      	add	r3, r2
 80103e4:	009b      	lsls	r3, r3, #2
 80103e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80103ea:	4413      	add	r3, r2
 80103ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80103f0:	2300      	movs	r3, #0
 80103f2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80103f6:	e018      	b.n	801042a <arm_mat_inverse_f32+0x21c>
 80103f8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80103fc:	681b      	ldr	r3, [r3, #0]
 80103fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010400:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8010404:	1d1a      	adds	r2, r3, #4
 8010406:	f8c7 20b8 	str.w	r2, [r7, #184]	@ 0xb8
 801040a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 801040e:	6812      	ldr	r2, [r2, #0]
 8010410:	601a      	str	r2, [r3, #0]
 8010412:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8010416:	1d1a      	adds	r2, r3, #4
 8010418:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 801041c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801041e:	601a      	str	r2, [r3, #0]
 8010420:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8010424:	3301      	adds	r3, #1
 8010426:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 801042a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 801042e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010430:	429a      	cmp	r2, r3
 8010432:	dbe1      	blt.n	80103f8 <arm_mat_inverse_f32+0x1ea>
            SWAP_ROWS_F32(pDst,0, pivotRow,selectedRow);
 8010434:	683b      	ldr	r3, [r7, #0]
 8010436:	685b      	ldr	r3, [r3, #4]
 8010438:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 801043c:	683b      	ldr	r3, [r7, #0]
 801043e:	685b      	ldr	r3, [r3, #4]
 8010440:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8010444:	683b      	ldr	r3, [r7, #0]
 8010446:	885b      	ldrh	r3, [r3, #2]
 8010448:	647b      	str	r3, [r7, #68]	@ 0x44
 801044a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801044c:	643b      	str	r3, [r7, #64]	@ 0x40
 801044e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010450:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010452:	fb02 f303 	mul.w	r3, r2, r3
 8010456:	009b      	lsls	r3, r3, #2
 8010458:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 801045c:	4413      	add	r3, r2
 801045e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8010462:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010464:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8010468:	fb02 f303 	mul.w	r3, r2, r3
 801046c:	009b      	lsls	r3, r3, #2
 801046e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8010472:	4413      	add	r3, r2
 8010474:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8010478:	2300      	movs	r3, #0
 801047a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 801047e:	e018      	b.n	80104b2 <arm_mat_inverse_f32+0x2a4>
 8010480:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010484:	681b      	ldr	r3, [r3, #0]
 8010486:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010488:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801048c:	1d1a      	adds	r2, r3, #4
 801048e:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8010492:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8010496:	6812      	ldr	r2, [r2, #0]
 8010498:	601a      	str	r2, [r3, #0]
 801049a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801049e:	1d1a      	adds	r2, r3, #4
 80104a0:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80104a4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80104a6:	601a      	str	r2, [r3, #0]
 80104a8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80104ac:	3301      	adds	r3, #1
 80104ae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80104b2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80104b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80104b8:	429a      	cmp	r2, r3
 80104ba:	dbe1      	blt.n	8010480 <arm_mat_inverse_f32+0x272>

    
            /* Flag to indicate whether exchange is done or not */
            flag = 1U;
 80104bc:	2301      	movs	r3, #1
 80104be:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc

      
      

      /* Update the status if the matrix is singular */
      if ((flag != 1U) && (pivot == 0.0f))
 80104c2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80104c6:	2b01      	cmp	r3, #1
 80104c8:	d009      	beq.n	80104de <arm_mat_inverse_f32+0x2d0>
 80104ca:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 80104ce:	eef5 7a40 	vcmp.f32	s15, #0.0
 80104d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104d6:	d102      	bne.n	80104de <arm_mat_inverse_f32+0x2d0>
      {
        return ARM_MATH_SINGULAR;
 80104d8:	f06f 0304 	mvn.w	r3, #4
 80104dc:	e208      	b.n	80108f0 <arm_mat_inverse_f32+0x6e2>
      }

     
      /* Pivot element of the row */
      pivot = 1.0f / pivot;
 80104de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80104e2:	ed97 7a38 	vldr	s14, [r7, #224]	@ 0xe0
 80104e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80104ea:	edc7 7a38 	vstr	s15, [r7, #224]	@ 0xe0

      SCALE_ROW_F32(pSrc,column,pivot,pivotRow);
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	685b      	ldr	r3, [r3, #4]
 80104f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	885b      	ldrh	r3, [r3, #2]
 80104fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80104fc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80104fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8010502:	1ad3      	subs	r3, r2, r3
 8010504:	633b      	str	r3, [r7, #48]	@ 0x30
 8010506:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010508:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801050a:	fb03 f202 	mul.w	r2, r3, r2
 801050e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8010512:	4413      	add	r3, r2
 8010514:	009b      	lsls	r3, r3, #2
 8010516:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 801051a:	4413      	add	r3, r2
 801051c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8010520:	2300      	movs	r3, #0
 8010522:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8010526:	e011      	b.n	801054c <arm_mat_inverse_f32+0x33e>
 8010528:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801052c:	1d1a      	adds	r2, r3, #4
 801052e:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 8010532:	ed93 7a00 	vldr	s14, [r3]
 8010536:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 801053a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801053e:	edc3 7a00 	vstr	s15, [r3]
 8010542:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8010546:	3301      	adds	r3, #1
 8010548:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 801054c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8010550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010552:	429a      	cmp	r2, r3
 8010554:	dbe8      	blt.n	8010528 <arm_mat_inverse_f32+0x31a>
      SCALE_ROW_F32(pDst,0,pivot,pivotRow);
 8010556:	683b      	ldr	r3, [r7, #0]
 8010558:	685b      	ldr	r3, [r3, #4]
 801055a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801055e:	683b      	ldr	r3, [r7, #0]
 8010560:	885b      	ldrh	r3, [r3, #2]
 8010562:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010564:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010566:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010568:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801056a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801056c:	fb02 f303 	mul.w	r3, r2, r3
 8010570:	009b      	lsls	r3, r3, #2
 8010572:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8010576:	4413      	add	r3, r2
 8010578:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801057c:	2300      	movs	r3, #0
 801057e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8010582:	e011      	b.n	80105a8 <arm_mat_inverse_f32+0x39a>
 8010584:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8010588:	1d1a      	adds	r2, r3, #4
 801058a:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 801058e:	ed93 7a00 	vldr	s14, [r3]
 8010592:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8010596:	ee67 7a27 	vmul.f32	s15, s14, s15
 801059a:	edc3 7a00 	vstr	s15, [r3]
 801059e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80105a2:	3301      	adds	r3, #1
 80105a4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80105a8:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 80105ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80105ae:	429a      	cmp	r2, r3
 80105b0:	dbe8      	blt.n	8010584 <arm_mat_inverse_f32+0x376>

      
      /* Replace the rows with the sum of that row and a multiple of row i
       * so that each new element in column i above row i is zero.*/

      rowNb = 0;
 80105b2:	2300      	movs	r3, #0
 80105b4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      for (;rowNb < pivotRow; rowNb++)
 80105b8:	e0ae      	b.n	8010718 <arm_mat_inverse_f32+0x50a>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	685a      	ldr	r2, [r3, #4]
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	885b      	ldrh	r3, [r3, #2]
 80105c2:	4619      	mov	r1, r3
 80105c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80105c8:	fb03 f101 	mul.w	r1, r3, r1
 80105cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80105d0:	440b      	add	r3, r1
 80105d2:	009b      	lsls	r3, r3, #2
 80105d4:	4413      	add	r3, r2
 80105d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
           pivot = *pTmp;
 80105da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80105de:	681b      	ldr	r3, [r3, #0]
 80105e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	685b      	ldr	r3, [r3, #4]
 80105e8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	685b      	ldr	r3, [r3, #4]
 80105f0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	885b      	ldrh	r3, [r3, #2]
 80105f8:	617b      	str	r3, [r7, #20]
 80105fa:	697a      	ldr	r2, [r7, #20]
 80105fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8010600:	1ad3      	subs	r3, r2, r3
 8010602:	613b      	str	r3, [r7, #16]
 8010604:	697b      	ldr	r3, [r7, #20]
 8010606:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 801060a:	fb03 f202 	mul.w	r2, r3, r2
 801060e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8010612:	4413      	add	r3, r2
 8010614:	009b      	lsls	r3, r3, #2
 8010616:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 801061a:	4413      	add	r3, r2
 801061c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8010620:	697b      	ldr	r3, [r7, #20]
 8010622:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010624:	fb03 f202 	mul.w	r2, r3, r2
 8010628:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801062c:	4413      	add	r3, r2
 801062e:	009b      	lsls	r3, r3, #2
 8010630:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8010634:	4413      	add	r3, r2
 8010636:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801063a:	2300      	movs	r3, #0
 801063c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8010640:	e01a      	b.n	8010678 <arm_mat_inverse_f32+0x46a>
 8010642:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010646:	1d1a      	adds	r2, r3, #4
 8010648:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 801064c:	ed93 7a00 	vldr	s14, [r3]
 8010650:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8010654:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010658:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801065c:	1d1a      	adds	r2, r3, #4
 801065e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8010662:	ed93 7a00 	vldr	s14, [r3]
 8010666:	ee77 7a67 	vsub.f32	s15, s14, s15
 801066a:	edc3 7a00 	vstr	s15, [r3]
 801066e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8010672:	3301      	adds	r3, #1
 8010674:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8010678:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 801067c:	693b      	ldr	r3, [r7, #16]
 801067e:	429a      	cmp	r2, r3
 8010680:	dbdf      	blt.n	8010642 <arm_mat_inverse_f32+0x434>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 8010682:	683b      	ldr	r3, [r7, #0]
 8010684:	685b      	ldr	r3, [r3, #4]
 8010686:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801068a:	683b      	ldr	r3, [r7, #0]
 801068c:	685b      	ldr	r3, [r3, #4]
 801068e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8010692:	683b      	ldr	r3, [r7, #0]
 8010694:	885b      	ldrh	r3, [r3, #2]
 8010696:	60fb      	str	r3, [r7, #12]
 8010698:	68fb      	ldr	r3, [r7, #12]
 801069a:	60bb      	str	r3, [r7, #8]
 801069c:	68fb      	ldr	r3, [r7, #12]
 801069e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80106a2:	fb02 f303 	mul.w	r3, r2, r3
 80106a6:	009b      	lsls	r3, r3, #2
 80106a8:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80106ac:	4413      	add	r3, r2
 80106ae:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80106b2:	68fb      	ldr	r3, [r7, #12]
 80106b4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80106b6:	fb02 f303 	mul.w	r3, r2, r3
 80106ba:	009b      	lsls	r3, r3, #2
 80106bc:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80106c0:	4413      	add	r3, r2
 80106c2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80106c6:	2300      	movs	r3, #0
 80106c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80106cc:	e01a      	b.n	8010704 <arm_mat_inverse_f32+0x4f6>
 80106ce:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80106d2:	1d1a      	adds	r2, r3, #4
 80106d4:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80106d8:	ed93 7a00 	vldr	s14, [r3]
 80106dc:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 80106e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80106e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80106e8:	1d1a      	adds	r2, r3, #4
 80106ea:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80106ee:	ed93 7a00 	vldr	s14, [r3]
 80106f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80106f6:	edc3 7a00 	vstr	s15, [r3]
 80106fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80106fe:	3301      	adds	r3, #1
 8010700:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8010704:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8010708:	68bb      	ldr	r3, [r7, #8]
 801070a:	429a      	cmp	r2, r3
 801070c:	dbdf      	blt.n	80106ce <arm_mat_inverse_f32+0x4c0>
      for (;rowNb < pivotRow; rowNb++)
 801070e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8010712:	3301      	adds	r3, #1
 8010714:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8010718:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 801071c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801071e:	429a      	cmp	r2, r3
 8010720:	f4ff af4b 	bcc.w	80105ba <arm_mat_inverse_f32+0x3ac>


      }

      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 8010724:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010726:	3301      	adds	r3, #1
 8010728:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 801072c:	e092      	b.n	8010854 <arm_mat_inverse_f32+0x646>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	685a      	ldr	r2, [r3, #4]
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	885b      	ldrh	r3, [r3, #2]
 8010736:	4619      	mov	r1, r3
 8010738:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801073c:	fb03 f101 	mul.w	r1, r3, r1
 8010740:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8010744:	440b      	add	r3, r1
 8010746:	009b      	lsls	r3, r3, #2
 8010748:	4413      	add	r3, r2
 801074a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
           pivot = *pTmp;
 801074e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010752:	681b      	ldr	r3, [r3, #0]
 8010754:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	685b      	ldr	r3, [r3, #4]
 801075c:	67bb      	str	r3, [r7, #120]	@ 0x78
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	685b      	ldr	r3, [r3, #4]
 8010762:	677b      	str	r3, [r7, #116]	@ 0x74
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	885b      	ldrh	r3, [r3, #2]
 8010768:	627b      	str	r3, [r7, #36]	@ 0x24
 801076a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801076c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8010770:	1ad3      	subs	r3, r2, r3
 8010772:	623b      	str	r3, [r7, #32]
 8010774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010776:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 801077a:	fb03 f202 	mul.w	r2, r3, r2
 801077e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8010782:	4413      	add	r3, r2
 8010784:	009b      	lsls	r3, r3, #2
 8010786:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8010788:	4413      	add	r3, r2
 801078a:	67bb      	str	r3, [r7, #120]	@ 0x78
 801078c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801078e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010790:	fb03 f202 	mul.w	r2, r3, r2
 8010794:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8010798:	4413      	add	r3, r2
 801079a:	009b      	lsls	r3, r3, #2
 801079c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 801079e:	4413      	add	r3, r2
 80107a0:	677b      	str	r3, [r7, #116]	@ 0x74
 80107a2:	2300      	movs	r3, #0
 80107a4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80107a6:	e014      	b.n	80107d2 <arm_mat_inverse_f32+0x5c4>
 80107a8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80107aa:	1d1a      	adds	r2, r3, #4
 80107ac:	677a      	str	r2, [r7, #116]	@ 0x74
 80107ae:	ed93 7a00 	vldr	s14, [r3]
 80107b2:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 80107b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80107ba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80107bc:	1d1a      	adds	r2, r3, #4
 80107be:	67ba      	str	r2, [r7, #120]	@ 0x78
 80107c0:	ed93 7a00 	vldr	s14, [r3]
 80107c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80107c8:	edc3 7a00 	vstr	s15, [r3]
 80107cc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80107ce:	3301      	adds	r3, #1
 80107d0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80107d2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80107d4:	6a3b      	ldr	r3, [r7, #32]
 80107d6:	429a      	cmp	r2, r3
 80107d8:	dbe6      	blt.n	80107a8 <arm_mat_inverse_f32+0x59a>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 80107da:	683b      	ldr	r3, [r7, #0]
 80107dc:	685b      	ldr	r3, [r3, #4]
 80107de:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80107e0:	683b      	ldr	r3, [r7, #0]
 80107e2:	685b      	ldr	r3, [r3, #4]
 80107e4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80107e6:	683b      	ldr	r3, [r7, #0]
 80107e8:	885b      	ldrh	r3, [r3, #2]
 80107ea:	61fb      	str	r3, [r7, #28]
 80107ec:	69fb      	ldr	r3, [r7, #28]
 80107ee:	61bb      	str	r3, [r7, #24]
 80107f0:	69fb      	ldr	r3, [r7, #28]
 80107f2:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80107f6:	fb02 f303 	mul.w	r3, r2, r3
 80107fa:	009b      	lsls	r3, r3, #2
 80107fc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80107fe:	4413      	add	r3, r2
 8010800:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8010802:	69fb      	ldr	r3, [r7, #28]
 8010804:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010806:	fb02 f303 	mul.w	r3, r2, r3
 801080a:	009b      	lsls	r3, r3, #2
 801080c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801080e:	4413      	add	r3, r2
 8010810:	66bb      	str	r3, [r7, #104]	@ 0x68
 8010812:	2300      	movs	r3, #0
 8010814:	673b      	str	r3, [r7, #112]	@ 0x70
 8010816:	e014      	b.n	8010842 <arm_mat_inverse_f32+0x634>
 8010818:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801081a:	1d1a      	adds	r2, r3, #4
 801081c:	66ba      	str	r2, [r7, #104]	@ 0x68
 801081e:	ed93 7a00 	vldr	s14, [r3]
 8010822:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8010826:	ee67 7a27 	vmul.f32	s15, s14, s15
 801082a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801082c:	1d1a      	adds	r2, r3, #4
 801082e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8010830:	ed93 7a00 	vldr	s14, [r3]
 8010834:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010838:	edc3 7a00 	vstr	s15, [r3]
 801083c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801083e:	3301      	adds	r3, #1
 8010840:	673b      	str	r3, [r7, #112]	@ 0x70
 8010842:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8010844:	69bb      	ldr	r3, [r7, #24]
 8010846:	429a      	cmp	r2, r3
 8010848:	dbe6      	blt.n	8010818 <arm_mat_inverse_f32+0x60a>
      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 801084a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801084e:	3301      	adds	r3, #1
 8010850:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8010854:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8010858:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801085a:	429a      	cmp	r2, r3
 801085c:	f4ff af67 	bcc.w	801072e <arm_mat_inverse_f32+0x520>
    for(column = 0U; column < numCols; column++)
 8010860:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8010864:	3301      	adds	r3, #1
 8010866:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 801086a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 801086e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8010870:	429a      	cmp	r2, r3
 8010872:	f4ff ad32 	bcc.w	80102da <arm_mat_inverse_f32+0xcc>
      }

    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8010876:	2300      	movs	r3, #0
 8010878:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3

    if ((flag != 1U) && (pivot == 0.0f))
 801087c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8010880:	2b01      	cmp	r3, #1
 8010882:	d033      	beq.n	80108ec <arm_mat_inverse_f32+0x6de>
 8010884:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8010888:	eef5 7a40 	vcmp.f32	s15, #0.0
 801088c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010890:	d12c      	bne.n	80108ec <arm_mat_inverse_f32+0x6de>
    {
      pIn = pSrc->pData;
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	685b      	ldr	r3, [r3, #4]
 8010896:	667b      	str	r3, [r7, #100]	@ 0x64
      for (i = 0; i < numRows * numCols; i++)
 8010898:	2300      	movs	r3, #0
 801089a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 801089e:	e010      	b.n	80108c2 <arm_mat_inverse_f32+0x6b4>
      {
        if (pIn[i] != 0.0f)
 80108a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80108a4:	009b      	lsls	r3, r3, #2
 80108a6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80108a8:	4413      	add	r3, r2
 80108aa:	edd3 7a00 	vldr	s15, [r3]
 80108ae:	eef5 7a40 	vcmp.f32	s15, #0.0
 80108b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108b6:	d10d      	bne.n	80108d4 <arm_mat_inverse_f32+0x6c6>
      for (i = 0; i < numRows * numCols; i++)
 80108b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80108bc:	3301      	adds	r3, #1
 80108be:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80108c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80108c4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80108c6:	fb02 f303 	mul.w	r3, r2, r3
 80108ca:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 80108ce:	429a      	cmp	r2, r3
 80108d0:	d3e6      	bcc.n	80108a0 <arm_mat_inverse_f32+0x692>
 80108d2:	e000      	b.n	80108d6 <arm_mat_inverse_f32+0x6c8>
            break;
 80108d4:	bf00      	nop
      }

      if (i == numRows * numCols)
 80108d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80108d8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80108da:	fb02 f303 	mul.w	r3, r2, r3
 80108de:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 80108e2:	429a      	cmp	r2, r3
 80108e4:	d102      	bne.n	80108ec <arm_mat_inverse_f32+0x6de>
        status = ARM_MATH_SINGULAR;
 80108e6:	23fb      	movs	r3, #251	@ 0xfb
 80108e8:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
    }
  }

  /* Return to application */
  return (status);
 80108ec:	f997 30c3 	ldrsb.w	r3, [r7, #195]	@ 0xc3
}
 80108f0:	4618      	mov	r0, r3
 80108f2:	37ec      	adds	r7, #236	@ 0xec
 80108f4:	46bd      	mov	sp, r7
 80108f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108fa:	4770      	bx	lr

080108fc <arm_mat_mult_f32>:
 */
arm_status arm_mat_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 80108fc:	b480      	push	{r7}
 80108fe:	b093      	sub	sp, #76	@ 0x4c
 8010900:	af00      	add	r7, sp, #0
 8010902:	60f8      	str	r0, [r7, #12]
 8010904:	60b9      	str	r1, [r7, #8]
 8010906:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* Input data matrix pointer A */
 8010908:	68fb      	ldr	r3, [r7, #12]
 801090a:	685b      	ldr	r3, [r3, #4]
 801090c:	647b      	str	r3, [r7, #68]	@ 0x44
  float32_t *pIn2 = pSrcB->pData;                /* Input data matrix pointer B */
 801090e:	68bb      	ldr	r3, [r7, #8]
 8010910:	685b      	ldr	r3, [r3, #4]
 8010912:	643b      	str	r3, [r7, #64]	@ 0x40
  float32_t *pInA = pSrcA->pData;                /* Input data matrix pointer A */
 8010914:	68fb      	ldr	r3, [r7, #12]
 8010916:	685b      	ldr	r3, [r3, #4]
 8010918:	63fb      	str	r3, [r7, #60]	@ 0x3c
  float32_t *pInB = pSrcB->pData;                /* Input data matrix pointer B */
 801091a:	68bb      	ldr	r3, [r7, #8]
 801091c:	685b      	ldr	r3, [r3, #4]
 801091e:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	685b      	ldr	r3, [r3, #4]
 8010924:	61fb      	str	r3, [r7, #28]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  float32_t sum;                                 /* Accumulator */
  uint16_t numRowsA = pSrcA->numRows;            /* Number of rows of input matrix A */
 8010926:	68fb      	ldr	r3, [r7, #12]
 8010928:	881b      	ldrh	r3, [r3, #0]
 801092a:	837b      	strh	r3, [r7, #26]
  uint16_t numColsB = pSrcB->numCols;            /* Number of columns of input matrix B */
 801092c:	68bb      	ldr	r3, [r7, #8]
 801092e:	885b      	ldrh	r3, [r3, #2]
 8010930:	833b      	strh	r3, [r7, #24]
  uint16_t numColsA = pSrcA->numCols;            /* Number of columns of input matrix A */
 8010932:	68fb      	ldr	r3, [r7, #12]
 8010934:	885b      	ldrh	r3, [r3, #2]
 8010936:	82fb      	strh	r3, [r7, #22]
  uint32_t col, i = 0U, row = numRowsA, colCnt;  /* Loop counters */
 8010938:	2300      	movs	r3, #0
 801093a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801093c:	8b7b      	ldrh	r3, [r7, #26]
 801093e:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB */
    /* row loop */
    do
    {
      /* Output pointer is set to starting address of row being processed */
      px = pOut + i;
 8010940:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010942:	009b      	lsls	r3, r3, #2
 8010944:	69fa      	ldr	r2, [r7, #28]
 8010946:	4413      	add	r3, r2
 8010948:	63bb      	str	r3, [r7, #56]	@ 0x38

      /* For every row wise process, column loop counter is to be initiated */
      col = numColsB;
 801094a:	8b3b      	ldrh	r3, [r7, #24]
 801094c:	633b      	str	r3, [r7, #48]	@ 0x30

      /* For every row wise process, pIn2 pointer is set to starting address of pSrcB data */
      pIn2 = pSrcB->pData;
 801094e:	68bb      	ldr	r3, [r7, #8]
 8010950:	685b      	ldr	r3, [r3, #4]
 8010952:	643b      	str	r3, [r7, #64]	@ 0x40

      /* column loop */
      do
      {
        /* Set the variable sum, that acts as accumulator, to zero */
        sum = 0.0f;
 8010954:	f04f 0300 	mov.w	r3, #0
 8010958:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Initialize pointer pIn1 to point to starting address of column being processed */
        pIn1 = pInA;
 801095a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801095c:	647b      	str	r3, [r7, #68]	@ 0x44
        colCnt = numColsA % 0x4U;

#else

        /* Initialize cntCnt with number of columns */
        colCnt = numColsA;
 801095e:	8afb      	ldrh	r3, [r7, #22]
 8010960:	627b      	str	r3, [r7, #36]	@ 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

        while (colCnt > 0U)
 8010962:	e017      	b.n	8010994 <arm_mat_mult_f32+0x98>
        {
          /* c(m,p) = a(m,1) * b(1,p) + a(m,2) * b(2,p) + .... + a(m,n) * b(n,p) */

          /* Perform the multiply-accumulates */
          sum += *pIn1++ * *pIn2;
 8010964:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010966:	1d1a      	adds	r2, r3, #4
 8010968:	647a      	str	r2, [r7, #68]	@ 0x44
 801096a:	ed93 7a00 	vldr	s14, [r3]
 801096e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010970:	edd3 7a00 	vldr	s15, [r3]
 8010974:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010978:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 801097c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010980:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
          pIn2 += numColsB;
 8010984:	8b3b      	ldrh	r3, [r7, #24]
 8010986:	009b      	lsls	r3, r3, #2
 8010988:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801098a:	4413      	add	r3, r2
 801098c:	643b      	str	r3, [r7, #64]	@ 0x40

          /* Decrement loop counter */
          colCnt--;
 801098e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010990:	3b01      	subs	r3, #1
 8010992:	627b      	str	r3, [r7, #36]	@ 0x24
        while (colCnt > 0U)
 8010994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010996:	2b00      	cmp	r3, #0
 8010998:	d1e4      	bne.n	8010964 <arm_mat_mult_f32+0x68>
        }

        /* Store result in destination buffer */
        *px++ = sum;
 801099a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801099c:	1d1a      	adds	r2, r3, #4
 801099e:	63ba      	str	r2, [r7, #56]	@ 0x38
 80109a0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80109a2:	601a      	str	r2, [r3, #0]

        /* Decrement column loop counter */
        col--;
 80109a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80109a6:	3b01      	subs	r3, #1
 80109a8:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Update pointer pIn2 to point to starting address of next column */
        pIn2 = pInB + (numColsB - col);
 80109aa:	8b3a      	ldrh	r2, [r7, #24]
 80109ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80109ae:	1ad3      	subs	r3, r2, r3
 80109b0:	009b      	lsls	r3, r3, #2
 80109b2:	6a3a      	ldr	r2, [r7, #32]
 80109b4:	4413      	add	r3, r2
 80109b6:	643b      	str	r3, [r7, #64]	@ 0x40

      } while (col > 0U);
 80109b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	d1ca      	bne.n	8010954 <arm_mat_mult_f32+0x58>

      /* Update pointer pInA to point to starting address of next row */
      i = i + numColsB;
 80109be:	8b3b      	ldrh	r3, [r7, #24]
 80109c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80109c2:	4413      	add	r3, r2
 80109c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pInA = pInA + numColsA;
 80109c6:	8afb      	ldrh	r3, [r7, #22]
 80109c8:	009b      	lsls	r3, r3, #2
 80109ca:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80109cc:	4413      	add	r3, r2
 80109ce:	63fb      	str	r3, [r7, #60]	@ 0x3c

      /* Decrement row loop counter */
      row--;
 80109d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80109d2:	3b01      	subs	r3, #1
 80109d4:	62bb      	str	r3, [r7, #40]	@ 0x28

    } while (row > 0U);
 80109d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80109d8:	2b00      	cmp	r3, #0
 80109da:	d1b1      	bne.n	8010940 <arm_mat_mult_f32+0x44>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 80109dc:	2300      	movs	r3, #0
 80109de:	757b      	strb	r3, [r7, #21]
  }

  /* Return to application */
  return (status);
 80109e0:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 80109e4:	4618      	mov	r0, r3
 80109e6:	374c      	adds	r7, #76	@ 0x4c
 80109e8:	46bd      	mov	sp, r7
 80109ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109ee:	4770      	bx	lr

080109f0 <arm_mat_scale_f32>:
#else
arm_status arm_mat_scale_f32(
  const arm_matrix_instance_f32 * pSrc,
        float32_t                 scale,
        arm_matrix_instance_f32 * pDst)
{
 80109f0:	b480      	push	{r7}
 80109f2:	b08b      	sub	sp, #44	@ 0x2c
 80109f4:	af00      	add	r7, sp, #0
 80109f6:	60f8      	str	r0, [r7, #12]
 80109f8:	ed87 0a02 	vstr	s0, [r7, #8]
 80109fc:	6079      	str	r1, [r7, #4]
  float32_t *pIn = pSrc->pData;                  /* Input data matrix pointer */
 80109fe:	68fb      	ldr	r3, [r7, #12]
 8010a00:	685b      	ldr	r3, [r3, #4]
 8010a02:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	685b      	ldr	r3, [r3, #4]
 8010a08:	623b      	str	r3, [r7, #32]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
 8010a0a:	68fb      	ldr	r3, [r7, #12]
 8010a0c:	881b      	ldrh	r3, [r3, #0]
 8010a0e:	461a      	mov	r2, r3
 8010a10:	68fb      	ldr	r3, [r7, #12]
 8010a12:	885b      	ldrh	r3, [r3, #2]
 8010a14:	fb02 f303 	mul.w	r3, r2, r3
 8010a18:	61bb      	str	r3, [r7, #24]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 8010a1a:	69bb      	ldr	r3, [r7, #24]
 8010a1c:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 8010a1e:	e010      	b.n	8010a42 <arm_mat_scale_f32+0x52>
    {
      /* C(m,n) = A(m,n) * scale */

      /* Scale and store result in destination buffer. */
      *pOut++ = (*pIn++) * scale;
 8010a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a22:	1d1a      	adds	r2, r3, #4
 8010a24:	627a      	str	r2, [r7, #36]	@ 0x24
 8010a26:	ed93 7a00 	vldr	s14, [r3]
 8010a2a:	6a3b      	ldr	r3, [r7, #32]
 8010a2c:	1d1a      	adds	r2, r3, #4
 8010a2e:	623a      	str	r2, [r7, #32]
 8010a30:	edd7 7a02 	vldr	s15, [r7, #8]
 8010a34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010a38:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 8010a3c:	69fb      	ldr	r3, [r7, #28]
 8010a3e:	3b01      	subs	r3, #1
 8010a40:	61fb      	str	r3, [r7, #28]
    while (blkCnt > 0U)
 8010a42:	69fb      	ldr	r3, [r7, #28]
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	d1eb      	bne.n	8010a20 <arm_mat_scale_f32+0x30>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8010a48:	2300      	movs	r3, #0
 8010a4a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return to application */
  return (status);
 8010a4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010a50:	4618      	mov	r0, r3
 8010a52:	372c      	adds	r7, #44	@ 0x2c
 8010a54:	46bd      	mov	sp, r7
 8010a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a5a:	4770      	bx	lr

08010a5c <arm_mat_sub_f32>:
#else
arm_status arm_mat_sub_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 8010a5c:	b480      	push	{r7}
 8010a5e:	b08b      	sub	sp, #44	@ 0x2c
 8010a60:	af00      	add	r7, sp, #0
 8010a62:	60f8      	str	r0, [r7, #12]
 8010a64:	60b9      	str	r1, [r7, #8]
 8010a66:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 8010a68:	68fb      	ldr	r3, [r7, #12]
 8010a6a:	685b      	ldr	r3, [r3, #4]
 8010a6c:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 8010a6e:	68bb      	ldr	r3, [r7, #8]
 8010a70:	685b      	ldr	r3, [r3, #4]
 8010a72:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	685b      	ldr	r3, [r3, #4]
 8010a78:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 8010a7a:	68fb      	ldr	r3, [r7, #12]
 8010a7c:	881b      	ldrh	r3, [r3, #0]
 8010a7e:	461a      	mov	r2, r3
 8010a80:	68fb      	ldr	r3, [r7, #12]
 8010a82:	885b      	ldrh	r3, [r3, #2]
 8010a84:	fb02 f303 	mul.w	r3, r2, r3
 8010a88:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 8010a8a:	697b      	ldr	r3, [r7, #20]
 8010a8c:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 8010a8e:	e013      	b.n	8010ab8 <arm_mat_sub_f32+0x5c>
    {
      /* C(m,n) = A(m,n) - B(m,n) */

      /* Subtract and store result in destination buffer. */
      *pOut++ = (*pInA++) - (*pInB++);
 8010a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a92:	1d1a      	adds	r2, r3, #4
 8010a94:	627a      	str	r2, [r7, #36]	@ 0x24
 8010a96:	ed93 7a00 	vldr	s14, [r3]
 8010a9a:	6a3b      	ldr	r3, [r7, #32]
 8010a9c:	1d1a      	adds	r2, r3, #4
 8010a9e:	623a      	str	r2, [r7, #32]
 8010aa0:	edd3 7a00 	vldr	s15, [r3]
 8010aa4:	69fb      	ldr	r3, [r7, #28]
 8010aa6:	1d1a      	adds	r2, r3, #4
 8010aa8:	61fa      	str	r2, [r7, #28]
 8010aaa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010aae:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 8010ab2:	69bb      	ldr	r3, [r7, #24]
 8010ab4:	3b01      	subs	r3, #1
 8010ab6:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 8010ab8:	69bb      	ldr	r3, [r7, #24]
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	d1e8      	bne.n	8010a90 <arm_mat_sub_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8010abe:	2300      	movs	r3, #0
 8010ac0:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 8010ac2:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8010ac6:	4618      	mov	r0, r3
 8010ac8:	372c      	adds	r7, #44	@ 0x2c
 8010aca:	46bd      	mov	sp, r7
 8010acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ad0:	4770      	bx	lr

08010ad2 <arm_mat_trans_f32>:
}
#else
arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 8010ad2:	b480      	push	{r7}
 8010ad4:	b08b      	sub	sp, #44	@ 0x2c
 8010ad6:	af00      	add	r7, sp, #0
 8010ad8:	6078      	str	r0, [r7, #4]
 8010ada:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	685b      	ldr	r3, [r3, #4]
 8010ae0:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8010ae2:	683b      	ldr	r3, [r7, #0]
 8010ae4:	685b      	ldr	r3, [r3, #4]
 8010ae6:	613b      	str	r3, [r7, #16]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	881b      	ldrh	r3, [r3, #0]
 8010aec:	81fb      	strh	r3, [r7, #14]
  uint16_t nCols = pSrc->numCols;                /* number of columns */
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	885b      	ldrh	r3, [r3, #2]
 8010af2:	81bb      	strh	r3, [r7, #12]
  uint32_t col, row = nRows, i = 0U;             /* Loop counters */
 8010af4:	89fb      	ldrh	r3, [r7, #14]
 8010af6:	61bb      	str	r3, [r7, #24]
 8010af8:	2300      	movs	r3, #0
 8010afa:	617b      	str	r3, [r7, #20]
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop */
    do
    {
      /* Pointer px is set to starting address of column being processed */
      px = pOut + i;
 8010afc:	697b      	ldr	r3, [r7, #20]
 8010afe:	009b      	lsls	r3, r3, #2
 8010b00:	693a      	ldr	r2, [r7, #16]
 8010b02:	4413      	add	r3, r2
 8010b04:	623b      	str	r3, [r7, #32]
      col = nCols % 0x4U;

#else

      /* Initialize col with number of samples */
      col = nCols;
 8010b06:	89bb      	ldrh	r3, [r7, #12]
 8010b08:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (col > 0U)
 8010b0a:	e00d      	b.n	8010b28 <arm_mat_trans_f32+0x56>
      {
        /* Read and store input element in destination */
        *px = *pIn++;
 8010b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b0e:	1d1a      	adds	r2, r3, #4
 8010b10:	627a      	str	r2, [r7, #36]	@ 0x24
 8010b12:	681a      	ldr	r2, [r3, #0]
 8010b14:	6a3b      	ldr	r3, [r7, #32]
 8010b16:	601a      	str	r2, [r3, #0]

        /* Update pointer px to point to next row of transposed matrix */
        px += nRows;
 8010b18:	89fb      	ldrh	r3, [r7, #14]
 8010b1a:	009b      	lsls	r3, r3, #2
 8010b1c:	6a3a      	ldr	r2, [r7, #32]
 8010b1e:	4413      	add	r3, r2
 8010b20:	623b      	str	r3, [r7, #32]

        /* Decrement column loop counter */
        col--;
 8010b22:	69fb      	ldr	r3, [r7, #28]
 8010b24:	3b01      	subs	r3, #1
 8010b26:	61fb      	str	r3, [r7, #28]
      while (col > 0U)
 8010b28:	69fb      	ldr	r3, [r7, #28]
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	d1ee      	bne.n	8010b0c <arm_mat_trans_f32+0x3a>
      }

      i++;
 8010b2e:	697b      	ldr	r3, [r7, #20]
 8010b30:	3301      	adds	r3, #1
 8010b32:	617b      	str	r3, [r7, #20]

      /* Decrement row loop counter */
      row--;
 8010b34:	69bb      	ldr	r3, [r7, #24]
 8010b36:	3b01      	subs	r3, #1
 8010b38:	61bb      	str	r3, [r7, #24]

    } while (row > 0U);          /* row loop end */
 8010b3a:	69bb      	ldr	r3, [r7, #24]
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	d1dd      	bne.n	8010afc <arm_mat_trans_f32+0x2a>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8010b40:	2300      	movs	r3, #0
 8010b42:	72fb      	strb	r3, [r7, #11]
  }

  /* Return to application */
  return (status);
 8010b44:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8010b48:	4618      	mov	r0, r3
 8010b4a:	372c      	adds	r7, #44	@ 0x2c
 8010b4c:	46bd      	mov	sp, r7
 8010b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b52:	4770      	bx	lr

08010b54 <malloc>:
 8010b54:	4b02      	ldr	r3, [pc, #8]	@ (8010b60 <malloc+0xc>)
 8010b56:	4601      	mov	r1, r0
 8010b58:	6818      	ldr	r0, [r3, #0]
 8010b5a:	f000 b825 	b.w	8010ba8 <_malloc_r>
 8010b5e:	bf00      	nop
 8010b60:	2000013c 	.word	0x2000013c

08010b64 <sbrk_aligned>:
 8010b64:	b570      	push	{r4, r5, r6, lr}
 8010b66:	4e0f      	ldr	r6, [pc, #60]	@ (8010ba4 <sbrk_aligned+0x40>)
 8010b68:	460c      	mov	r4, r1
 8010b6a:	6831      	ldr	r1, [r6, #0]
 8010b6c:	4605      	mov	r5, r0
 8010b6e:	b911      	cbnz	r1, 8010b76 <sbrk_aligned+0x12>
 8010b70:	f000 f8ae 	bl	8010cd0 <_sbrk_r>
 8010b74:	6030      	str	r0, [r6, #0]
 8010b76:	4621      	mov	r1, r4
 8010b78:	4628      	mov	r0, r5
 8010b7a:	f000 f8a9 	bl	8010cd0 <_sbrk_r>
 8010b7e:	1c43      	adds	r3, r0, #1
 8010b80:	d103      	bne.n	8010b8a <sbrk_aligned+0x26>
 8010b82:	f04f 34ff 	mov.w	r4, #4294967295
 8010b86:	4620      	mov	r0, r4
 8010b88:	bd70      	pop	{r4, r5, r6, pc}
 8010b8a:	1cc4      	adds	r4, r0, #3
 8010b8c:	f024 0403 	bic.w	r4, r4, #3
 8010b90:	42a0      	cmp	r0, r4
 8010b92:	d0f8      	beq.n	8010b86 <sbrk_aligned+0x22>
 8010b94:	1a21      	subs	r1, r4, r0
 8010b96:	4628      	mov	r0, r5
 8010b98:	f000 f89a 	bl	8010cd0 <_sbrk_r>
 8010b9c:	3001      	adds	r0, #1
 8010b9e:	d1f2      	bne.n	8010b86 <sbrk_aligned+0x22>
 8010ba0:	e7ef      	b.n	8010b82 <sbrk_aligned+0x1e>
 8010ba2:	bf00      	nop
 8010ba4:	200021d0 	.word	0x200021d0

08010ba8 <_malloc_r>:
 8010ba8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010bac:	1ccd      	adds	r5, r1, #3
 8010bae:	f025 0503 	bic.w	r5, r5, #3
 8010bb2:	3508      	adds	r5, #8
 8010bb4:	2d0c      	cmp	r5, #12
 8010bb6:	bf38      	it	cc
 8010bb8:	250c      	movcc	r5, #12
 8010bba:	2d00      	cmp	r5, #0
 8010bbc:	4606      	mov	r6, r0
 8010bbe:	db01      	blt.n	8010bc4 <_malloc_r+0x1c>
 8010bc0:	42a9      	cmp	r1, r5
 8010bc2:	d904      	bls.n	8010bce <_malloc_r+0x26>
 8010bc4:	230c      	movs	r3, #12
 8010bc6:	6033      	str	r3, [r6, #0]
 8010bc8:	2000      	movs	r0, #0
 8010bca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010bce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010ca4 <_malloc_r+0xfc>
 8010bd2:	f000 f869 	bl	8010ca8 <__malloc_lock>
 8010bd6:	f8d8 3000 	ldr.w	r3, [r8]
 8010bda:	461c      	mov	r4, r3
 8010bdc:	bb44      	cbnz	r4, 8010c30 <_malloc_r+0x88>
 8010bde:	4629      	mov	r1, r5
 8010be0:	4630      	mov	r0, r6
 8010be2:	f7ff ffbf 	bl	8010b64 <sbrk_aligned>
 8010be6:	1c43      	adds	r3, r0, #1
 8010be8:	4604      	mov	r4, r0
 8010bea:	d158      	bne.n	8010c9e <_malloc_r+0xf6>
 8010bec:	f8d8 4000 	ldr.w	r4, [r8]
 8010bf0:	4627      	mov	r7, r4
 8010bf2:	2f00      	cmp	r7, #0
 8010bf4:	d143      	bne.n	8010c7e <_malloc_r+0xd6>
 8010bf6:	2c00      	cmp	r4, #0
 8010bf8:	d04b      	beq.n	8010c92 <_malloc_r+0xea>
 8010bfa:	6823      	ldr	r3, [r4, #0]
 8010bfc:	4639      	mov	r1, r7
 8010bfe:	4630      	mov	r0, r6
 8010c00:	eb04 0903 	add.w	r9, r4, r3
 8010c04:	f000 f864 	bl	8010cd0 <_sbrk_r>
 8010c08:	4581      	cmp	r9, r0
 8010c0a:	d142      	bne.n	8010c92 <_malloc_r+0xea>
 8010c0c:	6821      	ldr	r1, [r4, #0]
 8010c0e:	1a6d      	subs	r5, r5, r1
 8010c10:	4629      	mov	r1, r5
 8010c12:	4630      	mov	r0, r6
 8010c14:	f7ff ffa6 	bl	8010b64 <sbrk_aligned>
 8010c18:	3001      	adds	r0, #1
 8010c1a:	d03a      	beq.n	8010c92 <_malloc_r+0xea>
 8010c1c:	6823      	ldr	r3, [r4, #0]
 8010c1e:	442b      	add	r3, r5
 8010c20:	6023      	str	r3, [r4, #0]
 8010c22:	f8d8 3000 	ldr.w	r3, [r8]
 8010c26:	685a      	ldr	r2, [r3, #4]
 8010c28:	bb62      	cbnz	r2, 8010c84 <_malloc_r+0xdc>
 8010c2a:	f8c8 7000 	str.w	r7, [r8]
 8010c2e:	e00f      	b.n	8010c50 <_malloc_r+0xa8>
 8010c30:	6822      	ldr	r2, [r4, #0]
 8010c32:	1b52      	subs	r2, r2, r5
 8010c34:	d420      	bmi.n	8010c78 <_malloc_r+0xd0>
 8010c36:	2a0b      	cmp	r2, #11
 8010c38:	d917      	bls.n	8010c6a <_malloc_r+0xc2>
 8010c3a:	1961      	adds	r1, r4, r5
 8010c3c:	42a3      	cmp	r3, r4
 8010c3e:	6025      	str	r5, [r4, #0]
 8010c40:	bf18      	it	ne
 8010c42:	6059      	strne	r1, [r3, #4]
 8010c44:	6863      	ldr	r3, [r4, #4]
 8010c46:	bf08      	it	eq
 8010c48:	f8c8 1000 	streq.w	r1, [r8]
 8010c4c:	5162      	str	r2, [r4, r5]
 8010c4e:	604b      	str	r3, [r1, #4]
 8010c50:	4630      	mov	r0, r6
 8010c52:	f000 f82f 	bl	8010cb4 <__malloc_unlock>
 8010c56:	f104 000b 	add.w	r0, r4, #11
 8010c5a:	1d23      	adds	r3, r4, #4
 8010c5c:	f020 0007 	bic.w	r0, r0, #7
 8010c60:	1ac2      	subs	r2, r0, r3
 8010c62:	bf1c      	itt	ne
 8010c64:	1a1b      	subne	r3, r3, r0
 8010c66:	50a3      	strne	r3, [r4, r2]
 8010c68:	e7af      	b.n	8010bca <_malloc_r+0x22>
 8010c6a:	6862      	ldr	r2, [r4, #4]
 8010c6c:	42a3      	cmp	r3, r4
 8010c6e:	bf0c      	ite	eq
 8010c70:	f8c8 2000 	streq.w	r2, [r8]
 8010c74:	605a      	strne	r2, [r3, #4]
 8010c76:	e7eb      	b.n	8010c50 <_malloc_r+0xa8>
 8010c78:	4623      	mov	r3, r4
 8010c7a:	6864      	ldr	r4, [r4, #4]
 8010c7c:	e7ae      	b.n	8010bdc <_malloc_r+0x34>
 8010c7e:	463c      	mov	r4, r7
 8010c80:	687f      	ldr	r7, [r7, #4]
 8010c82:	e7b6      	b.n	8010bf2 <_malloc_r+0x4a>
 8010c84:	461a      	mov	r2, r3
 8010c86:	685b      	ldr	r3, [r3, #4]
 8010c88:	42a3      	cmp	r3, r4
 8010c8a:	d1fb      	bne.n	8010c84 <_malloc_r+0xdc>
 8010c8c:	2300      	movs	r3, #0
 8010c8e:	6053      	str	r3, [r2, #4]
 8010c90:	e7de      	b.n	8010c50 <_malloc_r+0xa8>
 8010c92:	230c      	movs	r3, #12
 8010c94:	6033      	str	r3, [r6, #0]
 8010c96:	4630      	mov	r0, r6
 8010c98:	f000 f80c 	bl	8010cb4 <__malloc_unlock>
 8010c9c:	e794      	b.n	8010bc8 <_malloc_r+0x20>
 8010c9e:	6005      	str	r5, [r0, #0]
 8010ca0:	e7d6      	b.n	8010c50 <_malloc_r+0xa8>
 8010ca2:	bf00      	nop
 8010ca4:	200021d4 	.word	0x200021d4

08010ca8 <__malloc_lock>:
 8010ca8:	4801      	ldr	r0, [pc, #4]	@ (8010cb0 <__malloc_lock+0x8>)
 8010caa:	f000 b84b 	b.w	8010d44 <__retarget_lock_acquire_recursive>
 8010cae:	bf00      	nop
 8010cb0:	20002314 	.word	0x20002314

08010cb4 <__malloc_unlock>:
 8010cb4:	4801      	ldr	r0, [pc, #4]	@ (8010cbc <__malloc_unlock+0x8>)
 8010cb6:	f000 b846 	b.w	8010d46 <__retarget_lock_release_recursive>
 8010cba:	bf00      	nop
 8010cbc:	20002314 	.word	0x20002314

08010cc0 <memset>:
 8010cc0:	4402      	add	r2, r0
 8010cc2:	4603      	mov	r3, r0
 8010cc4:	4293      	cmp	r3, r2
 8010cc6:	d100      	bne.n	8010cca <memset+0xa>
 8010cc8:	4770      	bx	lr
 8010cca:	f803 1b01 	strb.w	r1, [r3], #1
 8010cce:	e7f9      	b.n	8010cc4 <memset+0x4>

08010cd0 <_sbrk_r>:
 8010cd0:	b538      	push	{r3, r4, r5, lr}
 8010cd2:	4d06      	ldr	r5, [pc, #24]	@ (8010cec <_sbrk_r+0x1c>)
 8010cd4:	2300      	movs	r3, #0
 8010cd6:	4604      	mov	r4, r0
 8010cd8:	4608      	mov	r0, r1
 8010cda:	602b      	str	r3, [r5, #0]
 8010cdc:	f7f7 f926 	bl	8007f2c <_sbrk>
 8010ce0:	1c43      	adds	r3, r0, #1
 8010ce2:	d102      	bne.n	8010cea <_sbrk_r+0x1a>
 8010ce4:	682b      	ldr	r3, [r5, #0]
 8010ce6:	b103      	cbz	r3, 8010cea <_sbrk_r+0x1a>
 8010ce8:	6023      	str	r3, [r4, #0]
 8010cea:	bd38      	pop	{r3, r4, r5, pc}
 8010cec:	20002310 	.word	0x20002310

08010cf0 <__errno>:
 8010cf0:	4b01      	ldr	r3, [pc, #4]	@ (8010cf8 <__errno+0x8>)
 8010cf2:	6818      	ldr	r0, [r3, #0]
 8010cf4:	4770      	bx	lr
 8010cf6:	bf00      	nop
 8010cf8:	2000013c 	.word	0x2000013c

08010cfc <__libc_init_array>:
 8010cfc:	b570      	push	{r4, r5, r6, lr}
 8010cfe:	4d0d      	ldr	r5, [pc, #52]	@ (8010d34 <__libc_init_array+0x38>)
 8010d00:	4c0d      	ldr	r4, [pc, #52]	@ (8010d38 <__libc_init_array+0x3c>)
 8010d02:	1b64      	subs	r4, r4, r5
 8010d04:	10a4      	asrs	r4, r4, #2
 8010d06:	2600      	movs	r6, #0
 8010d08:	42a6      	cmp	r6, r4
 8010d0a:	d109      	bne.n	8010d20 <__libc_init_array+0x24>
 8010d0c:	4d0b      	ldr	r5, [pc, #44]	@ (8010d3c <__libc_init_array+0x40>)
 8010d0e:	4c0c      	ldr	r4, [pc, #48]	@ (8010d40 <__libc_init_array+0x44>)
 8010d10:	f001 ff32 	bl	8012b78 <_init>
 8010d14:	1b64      	subs	r4, r4, r5
 8010d16:	10a4      	asrs	r4, r4, #2
 8010d18:	2600      	movs	r6, #0
 8010d1a:	42a6      	cmp	r6, r4
 8010d1c:	d105      	bne.n	8010d2a <__libc_init_array+0x2e>
 8010d1e:	bd70      	pop	{r4, r5, r6, pc}
 8010d20:	f855 3b04 	ldr.w	r3, [r5], #4
 8010d24:	4798      	blx	r3
 8010d26:	3601      	adds	r6, #1
 8010d28:	e7ee      	b.n	8010d08 <__libc_init_array+0xc>
 8010d2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8010d2e:	4798      	blx	r3
 8010d30:	3601      	adds	r6, #1
 8010d32:	e7f2      	b.n	8010d1a <__libc_init_array+0x1e>
 8010d34:	080131f8 	.word	0x080131f8
 8010d38:	080131f8 	.word	0x080131f8
 8010d3c:	080131f8 	.word	0x080131f8
 8010d40:	080131fc 	.word	0x080131fc

08010d44 <__retarget_lock_acquire_recursive>:
 8010d44:	4770      	bx	lr

08010d46 <__retarget_lock_release_recursive>:
 8010d46:	4770      	bx	lr

08010d48 <memcpy>:
 8010d48:	440a      	add	r2, r1
 8010d4a:	4291      	cmp	r1, r2
 8010d4c:	f100 33ff 	add.w	r3, r0, #4294967295
 8010d50:	d100      	bne.n	8010d54 <memcpy+0xc>
 8010d52:	4770      	bx	lr
 8010d54:	b510      	push	{r4, lr}
 8010d56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010d5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010d5e:	4291      	cmp	r1, r2
 8010d60:	d1f9      	bne.n	8010d56 <memcpy+0xe>
 8010d62:	bd10      	pop	{r4, pc}
 8010d64:	0000      	movs	r0, r0
	...

08010d68 <cos>:
 8010d68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010d6a:	ec53 2b10 	vmov	r2, r3, d0
 8010d6e:	4826      	ldr	r0, [pc, #152]	@ (8010e08 <cos+0xa0>)
 8010d70:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8010d74:	4281      	cmp	r1, r0
 8010d76:	d806      	bhi.n	8010d86 <cos+0x1e>
 8010d78:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8010e00 <cos+0x98>
 8010d7c:	b005      	add	sp, #20
 8010d7e:	f85d eb04 	ldr.w	lr, [sp], #4
 8010d82:	f000 b9bd 	b.w	8011100 <__kernel_cos>
 8010d86:	4821      	ldr	r0, [pc, #132]	@ (8010e0c <cos+0xa4>)
 8010d88:	4281      	cmp	r1, r0
 8010d8a:	d908      	bls.n	8010d9e <cos+0x36>
 8010d8c:	4610      	mov	r0, r2
 8010d8e:	4619      	mov	r1, r3
 8010d90:	f7ef fa46 	bl	8000220 <__aeabi_dsub>
 8010d94:	ec41 0b10 	vmov	d0, r0, r1
 8010d98:	b005      	add	sp, #20
 8010d9a:	f85d fb04 	ldr.w	pc, [sp], #4
 8010d9e:	4668      	mov	r0, sp
 8010da0:	f000 fb32 	bl	8011408 <__ieee754_rem_pio2>
 8010da4:	f000 0003 	and.w	r0, r0, #3
 8010da8:	2801      	cmp	r0, #1
 8010daa:	d00b      	beq.n	8010dc4 <cos+0x5c>
 8010dac:	2802      	cmp	r0, #2
 8010dae:	d015      	beq.n	8010ddc <cos+0x74>
 8010db0:	b9d8      	cbnz	r0, 8010dea <cos+0x82>
 8010db2:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010db6:	ed9d 0b00 	vldr	d0, [sp]
 8010dba:	f000 f9a1 	bl	8011100 <__kernel_cos>
 8010dbe:	ec51 0b10 	vmov	r0, r1, d0
 8010dc2:	e7e7      	b.n	8010d94 <cos+0x2c>
 8010dc4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010dc8:	ed9d 0b00 	vldr	d0, [sp]
 8010dcc:	f000 fa60 	bl	8011290 <__kernel_sin>
 8010dd0:	ec53 2b10 	vmov	r2, r3, d0
 8010dd4:	4610      	mov	r0, r2
 8010dd6:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8010dda:	e7db      	b.n	8010d94 <cos+0x2c>
 8010ddc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010de0:	ed9d 0b00 	vldr	d0, [sp]
 8010de4:	f000 f98c 	bl	8011100 <__kernel_cos>
 8010de8:	e7f2      	b.n	8010dd0 <cos+0x68>
 8010dea:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010dee:	ed9d 0b00 	vldr	d0, [sp]
 8010df2:	2001      	movs	r0, #1
 8010df4:	f000 fa4c 	bl	8011290 <__kernel_sin>
 8010df8:	e7e1      	b.n	8010dbe <cos+0x56>
 8010dfa:	bf00      	nop
 8010dfc:	f3af 8000 	nop.w
	...
 8010e08:	3fe921fb 	.word	0x3fe921fb
 8010e0c:	7fefffff 	.word	0x7fefffff

08010e10 <sin>:
 8010e10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010e12:	ec53 2b10 	vmov	r2, r3, d0
 8010e16:	4826      	ldr	r0, [pc, #152]	@ (8010eb0 <sin+0xa0>)
 8010e18:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8010e1c:	4281      	cmp	r1, r0
 8010e1e:	d807      	bhi.n	8010e30 <sin+0x20>
 8010e20:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8010ea8 <sin+0x98>
 8010e24:	2000      	movs	r0, #0
 8010e26:	b005      	add	sp, #20
 8010e28:	f85d eb04 	ldr.w	lr, [sp], #4
 8010e2c:	f000 ba30 	b.w	8011290 <__kernel_sin>
 8010e30:	4820      	ldr	r0, [pc, #128]	@ (8010eb4 <sin+0xa4>)
 8010e32:	4281      	cmp	r1, r0
 8010e34:	d908      	bls.n	8010e48 <sin+0x38>
 8010e36:	4610      	mov	r0, r2
 8010e38:	4619      	mov	r1, r3
 8010e3a:	f7ef f9f1 	bl	8000220 <__aeabi_dsub>
 8010e3e:	ec41 0b10 	vmov	d0, r0, r1
 8010e42:	b005      	add	sp, #20
 8010e44:	f85d fb04 	ldr.w	pc, [sp], #4
 8010e48:	4668      	mov	r0, sp
 8010e4a:	f000 fadd 	bl	8011408 <__ieee754_rem_pio2>
 8010e4e:	f000 0003 	and.w	r0, r0, #3
 8010e52:	2801      	cmp	r0, #1
 8010e54:	d00c      	beq.n	8010e70 <sin+0x60>
 8010e56:	2802      	cmp	r0, #2
 8010e58:	d011      	beq.n	8010e7e <sin+0x6e>
 8010e5a:	b9e8      	cbnz	r0, 8010e98 <sin+0x88>
 8010e5c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010e60:	ed9d 0b00 	vldr	d0, [sp]
 8010e64:	2001      	movs	r0, #1
 8010e66:	f000 fa13 	bl	8011290 <__kernel_sin>
 8010e6a:	ec51 0b10 	vmov	r0, r1, d0
 8010e6e:	e7e6      	b.n	8010e3e <sin+0x2e>
 8010e70:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010e74:	ed9d 0b00 	vldr	d0, [sp]
 8010e78:	f000 f942 	bl	8011100 <__kernel_cos>
 8010e7c:	e7f5      	b.n	8010e6a <sin+0x5a>
 8010e7e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010e82:	ed9d 0b00 	vldr	d0, [sp]
 8010e86:	2001      	movs	r0, #1
 8010e88:	f000 fa02 	bl	8011290 <__kernel_sin>
 8010e8c:	ec53 2b10 	vmov	r2, r3, d0
 8010e90:	4610      	mov	r0, r2
 8010e92:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8010e96:	e7d2      	b.n	8010e3e <sin+0x2e>
 8010e98:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010e9c:	ed9d 0b00 	vldr	d0, [sp]
 8010ea0:	f000 f92e 	bl	8011100 <__kernel_cos>
 8010ea4:	e7f2      	b.n	8010e8c <sin+0x7c>
 8010ea6:	bf00      	nop
	...
 8010eb0:	3fe921fb 	.word	0x3fe921fb
 8010eb4:	7fefffff 	.word	0x7fefffff

08010eb8 <fmodf>:
 8010eb8:	b508      	push	{r3, lr}
 8010eba:	ed2d 8b02 	vpush	{d8}
 8010ebe:	eef0 8a40 	vmov.f32	s17, s0
 8010ec2:	eeb0 8a60 	vmov.f32	s16, s1
 8010ec6:	f000 fd43 	bl	8011950 <__ieee754_fmodf>
 8010eca:	eef4 8a48 	vcmp.f32	s17, s16
 8010ece:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ed2:	d60c      	bvs.n	8010eee <fmodf+0x36>
 8010ed4:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8010ef4 <fmodf+0x3c>
 8010ed8:	eeb4 8a68 	vcmp.f32	s16, s17
 8010edc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ee0:	d105      	bne.n	8010eee <fmodf+0x36>
 8010ee2:	f7ff ff05 	bl	8010cf0 <__errno>
 8010ee6:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8010eea:	2321      	movs	r3, #33	@ 0x21
 8010eec:	6003      	str	r3, [r0, #0]
 8010eee:	ecbd 8b02 	vpop	{d8}
 8010ef2:	bd08      	pop	{r3, pc}
 8010ef4:	00000000 	.word	0x00000000

08010ef8 <sqrtf>:
 8010ef8:	b508      	push	{r3, lr}
 8010efa:	ed2d 8b02 	vpush	{d8}
 8010efe:	eeb0 8a40 	vmov.f32	s16, s0
 8010f02:	f000 f8f7 	bl	80110f4 <__ieee754_sqrtf>
 8010f06:	eeb4 8a48 	vcmp.f32	s16, s16
 8010f0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f0e:	d60c      	bvs.n	8010f2a <sqrtf+0x32>
 8010f10:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8010f30 <sqrtf+0x38>
 8010f14:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8010f18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f1c:	d505      	bpl.n	8010f2a <sqrtf+0x32>
 8010f1e:	f7ff fee7 	bl	8010cf0 <__errno>
 8010f22:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8010f26:	2321      	movs	r3, #33	@ 0x21
 8010f28:	6003      	str	r3, [r0, #0]
 8010f2a:	ecbd 8b02 	vpop	{d8}
 8010f2e:	bd08      	pop	{r3, pc}
 8010f30:	00000000 	.word	0x00000000

08010f34 <cosf>:
 8010f34:	ee10 3a10 	vmov	r3, s0
 8010f38:	b507      	push	{r0, r1, r2, lr}
 8010f3a:	4a1e      	ldr	r2, [pc, #120]	@ (8010fb4 <cosf+0x80>)
 8010f3c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010f40:	4293      	cmp	r3, r2
 8010f42:	d806      	bhi.n	8010f52 <cosf+0x1e>
 8010f44:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8010fb8 <cosf+0x84>
 8010f48:	b003      	add	sp, #12
 8010f4a:	f85d eb04 	ldr.w	lr, [sp], #4
 8010f4e:	f000 bc5f 	b.w	8011810 <__kernel_cosf>
 8010f52:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8010f56:	d304      	bcc.n	8010f62 <cosf+0x2e>
 8010f58:	ee30 0a40 	vsub.f32	s0, s0, s0
 8010f5c:	b003      	add	sp, #12
 8010f5e:	f85d fb04 	ldr.w	pc, [sp], #4
 8010f62:	4668      	mov	r0, sp
 8010f64:	f000 fd76 	bl	8011a54 <__ieee754_rem_pio2f>
 8010f68:	f000 0003 	and.w	r0, r0, #3
 8010f6c:	2801      	cmp	r0, #1
 8010f6e:	d009      	beq.n	8010f84 <cosf+0x50>
 8010f70:	2802      	cmp	r0, #2
 8010f72:	d010      	beq.n	8010f96 <cosf+0x62>
 8010f74:	b9b0      	cbnz	r0, 8010fa4 <cosf+0x70>
 8010f76:	eddd 0a01 	vldr	s1, [sp, #4]
 8010f7a:	ed9d 0a00 	vldr	s0, [sp]
 8010f7e:	f000 fc47 	bl	8011810 <__kernel_cosf>
 8010f82:	e7eb      	b.n	8010f5c <cosf+0x28>
 8010f84:	eddd 0a01 	vldr	s1, [sp, #4]
 8010f88:	ed9d 0a00 	vldr	s0, [sp]
 8010f8c:	f000 fc98 	bl	80118c0 <__kernel_sinf>
 8010f90:	eeb1 0a40 	vneg.f32	s0, s0
 8010f94:	e7e2      	b.n	8010f5c <cosf+0x28>
 8010f96:	eddd 0a01 	vldr	s1, [sp, #4]
 8010f9a:	ed9d 0a00 	vldr	s0, [sp]
 8010f9e:	f000 fc37 	bl	8011810 <__kernel_cosf>
 8010fa2:	e7f5      	b.n	8010f90 <cosf+0x5c>
 8010fa4:	eddd 0a01 	vldr	s1, [sp, #4]
 8010fa8:	ed9d 0a00 	vldr	s0, [sp]
 8010fac:	2001      	movs	r0, #1
 8010fae:	f000 fc87 	bl	80118c0 <__kernel_sinf>
 8010fb2:	e7d3      	b.n	8010f5c <cosf+0x28>
 8010fb4:	3f490fd8 	.word	0x3f490fd8
 8010fb8:	00000000 	.word	0x00000000

08010fbc <sinf>:
 8010fbc:	ee10 3a10 	vmov	r3, s0
 8010fc0:	b507      	push	{r0, r1, r2, lr}
 8010fc2:	4a1f      	ldr	r2, [pc, #124]	@ (8011040 <sinf+0x84>)
 8010fc4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010fc8:	4293      	cmp	r3, r2
 8010fca:	d807      	bhi.n	8010fdc <sinf+0x20>
 8010fcc:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8011044 <sinf+0x88>
 8010fd0:	2000      	movs	r0, #0
 8010fd2:	b003      	add	sp, #12
 8010fd4:	f85d eb04 	ldr.w	lr, [sp], #4
 8010fd8:	f000 bc72 	b.w	80118c0 <__kernel_sinf>
 8010fdc:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8010fe0:	d304      	bcc.n	8010fec <sinf+0x30>
 8010fe2:	ee30 0a40 	vsub.f32	s0, s0, s0
 8010fe6:	b003      	add	sp, #12
 8010fe8:	f85d fb04 	ldr.w	pc, [sp], #4
 8010fec:	4668      	mov	r0, sp
 8010fee:	f000 fd31 	bl	8011a54 <__ieee754_rem_pio2f>
 8010ff2:	f000 0003 	and.w	r0, r0, #3
 8010ff6:	2801      	cmp	r0, #1
 8010ff8:	d00a      	beq.n	8011010 <sinf+0x54>
 8010ffa:	2802      	cmp	r0, #2
 8010ffc:	d00f      	beq.n	801101e <sinf+0x62>
 8010ffe:	b9c0      	cbnz	r0, 8011032 <sinf+0x76>
 8011000:	eddd 0a01 	vldr	s1, [sp, #4]
 8011004:	ed9d 0a00 	vldr	s0, [sp]
 8011008:	2001      	movs	r0, #1
 801100a:	f000 fc59 	bl	80118c0 <__kernel_sinf>
 801100e:	e7ea      	b.n	8010fe6 <sinf+0x2a>
 8011010:	eddd 0a01 	vldr	s1, [sp, #4]
 8011014:	ed9d 0a00 	vldr	s0, [sp]
 8011018:	f000 fbfa 	bl	8011810 <__kernel_cosf>
 801101c:	e7e3      	b.n	8010fe6 <sinf+0x2a>
 801101e:	eddd 0a01 	vldr	s1, [sp, #4]
 8011022:	ed9d 0a00 	vldr	s0, [sp]
 8011026:	2001      	movs	r0, #1
 8011028:	f000 fc4a 	bl	80118c0 <__kernel_sinf>
 801102c:	eeb1 0a40 	vneg.f32	s0, s0
 8011030:	e7d9      	b.n	8010fe6 <sinf+0x2a>
 8011032:	eddd 0a01 	vldr	s1, [sp, #4]
 8011036:	ed9d 0a00 	vldr	s0, [sp]
 801103a:	f000 fbe9 	bl	8011810 <__kernel_cosf>
 801103e:	e7f5      	b.n	801102c <sinf+0x70>
 8011040:	3f490fd8 	.word	0x3f490fd8
 8011044:	00000000 	.word	0x00000000

08011048 <fmaxf>:
 8011048:	b508      	push	{r3, lr}
 801104a:	ed2d 8b02 	vpush	{d8}
 801104e:	eeb0 8a40 	vmov.f32	s16, s0
 8011052:	eef0 8a60 	vmov.f32	s17, s1
 8011056:	f000 f831 	bl	80110bc <__fpclassifyf>
 801105a:	b930      	cbnz	r0, 801106a <fmaxf+0x22>
 801105c:	eeb0 8a68 	vmov.f32	s16, s17
 8011060:	eeb0 0a48 	vmov.f32	s0, s16
 8011064:	ecbd 8b02 	vpop	{d8}
 8011068:	bd08      	pop	{r3, pc}
 801106a:	eeb0 0a68 	vmov.f32	s0, s17
 801106e:	f000 f825 	bl	80110bc <__fpclassifyf>
 8011072:	2800      	cmp	r0, #0
 8011074:	d0f4      	beq.n	8011060 <fmaxf+0x18>
 8011076:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801107a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801107e:	dded      	ble.n	801105c <fmaxf+0x14>
 8011080:	e7ee      	b.n	8011060 <fmaxf+0x18>

08011082 <fminf>:
 8011082:	b508      	push	{r3, lr}
 8011084:	ed2d 8b02 	vpush	{d8}
 8011088:	eeb0 8a40 	vmov.f32	s16, s0
 801108c:	eef0 8a60 	vmov.f32	s17, s1
 8011090:	f000 f814 	bl	80110bc <__fpclassifyf>
 8011094:	b930      	cbnz	r0, 80110a4 <fminf+0x22>
 8011096:	eeb0 8a68 	vmov.f32	s16, s17
 801109a:	eeb0 0a48 	vmov.f32	s0, s16
 801109e:	ecbd 8b02 	vpop	{d8}
 80110a2:	bd08      	pop	{r3, pc}
 80110a4:	eeb0 0a68 	vmov.f32	s0, s17
 80110a8:	f000 f808 	bl	80110bc <__fpclassifyf>
 80110ac:	2800      	cmp	r0, #0
 80110ae:	d0f4      	beq.n	801109a <fminf+0x18>
 80110b0:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80110b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110b8:	d5ed      	bpl.n	8011096 <fminf+0x14>
 80110ba:	e7ee      	b.n	801109a <fminf+0x18>

080110bc <__fpclassifyf>:
 80110bc:	ee10 3a10 	vmov	r3, s0
 80110c0:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 80110c4:	d00d      	beq.n	80110e2 <__fpclassifyf+0x26>
 80110c6:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 80110ca:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 80110ce:	d30a      	bcc.n	80110e6 <__fpclassifyf+0x2a>
 80110d0:	4b07      	ldr	r3, [pc, #28]	@ (80110f0 <__fpclassifyf+0x34>)
 80110d2:	1e42      	subs	r2, r0, #1
 80110d4:	429a      	cmp	r2, r3
 80110d6:	d908      	bls.n	80110ea <__fpclassifyf+0x2e>
 80110d8:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 80110dc:	4258      	negs	r0, r3
 80110de:	4158      	adcs	r0, r3
 80110e0:	4770      	bx	lr
 80110e2:	2002      	movs	r0, #2
 80110e4:	4770      	bx	lr
 80110e6:	2004      	movs	r0, #4
 80110e8:	4770      	bx	lr
 80110ea:	2003      	movs	r0, #3
 80110ec:	4770      	bx	lr
 80110ee:	bf00      	nop
 80110f0:	007ffffe 	.word	0x007ffffe

080110f4 <__ieee754_sqrtf>:
 80110f4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80110f8:	4770      	bx	lr
 80110fa:	0000      	movs	r0, r0
 80110fc:	0000      	movs	r0, r0
	...

08011100 <__kernel_cos>:
 8011100:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011104:	ec57 6b10 	vmov	r6, r7, d0
 8011108:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 801110c:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8011110:	ed8d 1b00 	vstr	d1, [sp]
 8011114:	d206      	bcs.n	8011124 <__kernel_cos+0x24>
 8011116:	4630      	mov	r0, r6
 8011118:	4639      	mov	r1, r7
 801111a:	f7ef fcd3 	bl	8000ac4 <__aeabi_d2iz>
 801111e:	2800      	cmp	r0, #0
 8011120:	f000 8088 	beq.w	8011234 <__kernel_cos+0x134>
 8011124:	4632      	mov	r2, r6
 8011126:	463b      	mov	r3, r7
 8011128:	4630      	mov	r0, r6
 801112a:	4639      	mov	r1, r7
 801112c:	f7ef fa30 	bl	8000590 <__aeabi_dmul>
 8011130:	4b51      	ldr	r3, [pc, #324]	@ (8011278 <__kernel_cos+0x178>)
 8011132:	2200      	movs	r2, #0
 8011134:	4604      	mov	r4, r0
 8011136:	460d      	mov	r5, r1
 8011138:	f7ef fa2a 	bl	8000590 <__aeabi_dmul>
 801113c:	a340      	add	r3, pc, #256	@ (adr r3, 8011240 <__kernel_cos+0x140>)
 801113e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011142:	4682      	mov	sl, r0
 8011144:	468b      	mov	fp, r1
 8011146:	4620      	mov	r0, r4
 8011148:	4629      	mov	r1, r5
 801114a:	f7ef fa21 	bl	8000590 <__aeabi_dmul>
 801114e:	a33e      	add	r3, pc, #248	@ (adr r3, 8011248 <__kernel_cos+0x148>)
 8011150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011154:	f7ef f866 	bl	8000224 <__adddf3>
 8011158:	4622      	mov	r2, r4
 801115a:	462b      	mov	r3, r5
 801115c:	f7ef fa18 	bl	8000590 <__aeabi_dmul>
 8011160:	a33b      	add	r3, pc, #236	@ (adr r3, 8011250 <__kernel_cos+0x150>)
 8011162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011166:	f7ef f85b 	bl	8000220 <__aeabi_dsub>
 801116a:	4622      	mov	r2, r4
 801116c:	462b      	mov	r3, r5
 801116e:	f7ef fa0f 	bl	8000590 <__aeabi_dmul>
 8011172:	a339      	add	r3, pc, #228	@ (adr r3, 8011258 <__kernel_cos+0x158>)
 8011174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011178:	f7ef f854 	bl	8000224 <__adddf3>
 801117c:	4622      	mov	r2, r4
 801117e:	462b      	mov	r3, r5
 8011180:	f7ef fa06 	bl	8000590 <__aeabi_dmul>
 8011184:	a336      	add	r3, pc, #216	@ (adr r3, 8011260 <__kernel_cos+0x160>)
 8011186:	e9d3 2300 	ldrd	r2, r3, [r3]
 801118a:	f7ef f849 	bl	8000220 <__aeabi_dsub>
 801118e:	4622      	mov	r2, r4
 8011190:	462b      	mov	r3, r5
 8011192:	f7ef f9fd 	bl	8000590 <__aeabi_dmul>
 8011196:	a334      	add	r3, pc, #208	@ (adr r3, 8011268 <__kernel_cos+0x168>)
 8011198:	e9d3 2300 	ldrd	r2, r3, [r3]
 801119c:	f7ef f842 	bl	8000224 <__adddf3>
 80111a0:	4622      	mov	r2, r4
 80111a2:	462b      	mov	r3, r5
 80111a4:	f7ef f9f4 	bl	8000590 <__aeabi_dmul>
 80111a8:	4622      	mov	r2, r4
 80111aa:	462b      	mov	r3, r5
 80111ac:	f7ef f9f0 	bl	8000590 <__aeabi_dmul>
 80111b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80111b4:	4604      	mov	r4, r0
 80111b6:	460d      	mov	r5, r1
 80111b8:	4630      	mov	r0, r6
 80111ba:	4639      	mov	r1, r7
 80111bc:	f7ef f9e8 	bl	8000590 <__aeabi_dmul>
 80111c0:	460b      	mov	r3, r1
 80111c2:	4602      	mov	r2, r0
 80111c4:	4629      	mov	r1, r5
 80111c6:	4620      	mov	r0, r4
 80111c8:	f7ef f82a 	bl	8000220 <__aeabi_dsub>
 80111cc:	4b2b      	ldr	r3, [pc, #172]	@ (801127c <__kernel_cos+0x17c>)
 80111ce:	4598      	cmp	r8, r3
 80111d0:	4606      	mov	r6, r0
 80111d2:	460f      	mov	r7, r1
 80111d4:	d810      	bhi.n	80111f8 <__kernel_cos+0xf8>
 80111d6:	4602      	mov	r2, r0
 80111d8:	460b      	mov	r3, r1
 80111da:	4650      	mov	r0, sl
 80111dc:	4659      	mov	r1, fp
 80111de:	f7ef f81f 	bl	8000220 <__aeabi_dsub>
 80111e2:	460b      	mov	r3, r1
 80111e4:	4926      	ldr	r1, [pc, #152]	@ (8011280 <__kernel_cos+0x180>)
 80111e6:	4602      	mov	r2, r0
 80111e8:	2000      	movs	r0, #0
 80111ea:	f7ef f819 	bl	8000220 <__aeabi_dsub>
 80111ee:	ec41 0b10 	vmov	d0, r0, r1
 80111f2:	b003      	add	sp, #12
 80111f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111f8:	4b22      	ldr	r3, [pc, #136]	@ (8011284 <__kernel_cos+0x184>)
 80111fa:	4921      	ldr	r1, [pc, #132]	@ (8011280 <__kernel_cos+0x180>)
 80111fc:	4598      	cmp	r8, r3
 80111fe:	bf8c      	ite	hi
 8011200:	4d21      	ldrhi	r5, [pc, #132]	@ (8011288 <__kernel_cos+0x188>)
 8011202:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8011206:	2400      	movs	r4, #0
 8011208:	4622      	mov	r2, r4
 801120a:	462b      	mov	r3, r5
 801120c:	2000      	movs	r0, #0
 801120e:	f7ef f807 	bl	8000220 <__aeabi_dsub>
 8011212:	4622      	mov	r2, r4
 8011214:	4680      	mov	r8, r0
 8011216:	4689      	mov	r9, r1
 8011218:	462b      	mov	r3, r5
 801121a:	4650      	mov	r0, sl
 801121c:	4659      	mov	r1, fp
 801121e:	f7ee ffff 	bl	8000220 <__aeabi_dsub>
 8011222:	4632      	mov	r2, r6
 8011224:	463b      	mov	r3, r7
 8011226:	f7ee fffb 	bl	8000220 <__aeabi_dsub>
 801122a:	4602      	mov	r2, r0
 801122c:	460b      	mov	r3, r1
 801122e:	4640      	mov	r0, r8
 8011230:	4649      	mov	r1, r9
 8011232:	e7da      	b.n	80111ea <__kernel_cos+0xea>
 8011234:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8011270 <__kernel_cos+0x170>
 8011238:	e7db      	b.n	80111f2 <__kernel_cos+0xf2>
 801123a:	bf00      	nop
 801123c:	f3af 8000 	nop.w
 8011240:	be8838d4 	.word	0xbe8838d4
 8011244:	bda8fae9 	.word	0xbda8fae9
 8011248:	bdb4b1c4 	.word	0xbdb4b1c4
 801124c:	3e21ee9e 	.word	0x3e21ee9e
 8011250:	809c52ad 	.word	0x809c52ad
 8011254:	3e927e4f 	.word	0x3e927e4f
 8011258:	19cb1590 	.word	0x19cb1590
 801125c:	3efa01a0 	.word	0x3efa01a0
 8011260:	16c15177 	.word	0x16c15177
 8011264:	3f56c16c 	.word	0x3f56c16c
 8011268:	5555554c 	.word	0x5555554c
 801126c:	3fa55555 	.word	0x3fa55555
 8011270:	00000000 	.word	0x00000000
 8011274:	3ff00000 	.word	0x3ff00000
 8011278:	3fe00000 	.word	0x3fe00000
 801127c:	3fd33332 	.word	0x3fd33332
 8011280:	3ff00000 	.word	0x3ff00000
 8011284:	3fe90000 	.word	0x3fe90000
 8011288:	3fd20000 	.word	0x3fd20000
 801128c:	00000000 	.word	0x00000000

08011290 <__kernel_sin>:
 8011290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011294:	ec55 4b10 	vmov	r4, r5, d0
 8011298:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801129c:	b085      	sub	sp, #20
 801129e:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 80112a2:	ed8d 1b02 	vstr	d1, [sp, #8]
 80112a6:	4680      	mov	r8, r0
 80112a8:	d205      	bcs.n	80112b6 <__kernel_sin+0x26>
 80112aa:	4620      	mov	r0, r4
 80112ac:	4629      	mov	r1, r5
 80112ae:	f7ef fc09 	bl	8000ac4 <__aeabi_d2iz>
 80112b2:	2800      	cmp	r0, #0
 80112b4:	d052      	beq.n	801135c <__kernel_sin+0xcc>
 80112b6:	4622      	mov	r2, r4
 80112b8:	462b      	mov	r3, r5
 80112ba:	4620      	mov	r0, r4
 80112bc:	4629      	mov	r1, r5
 80112be:	f7ef f967 	bl	8000590 <__aeabi_dmul>
 80112c2:	4682      	mov	sl, r0
 80112c4:	468b      	mov	fp, r1
 80112c6:	4602      	mov	r2, r0
 80112c8:	460b      	mov	r3, r1
 80112ca:	4620      	mov	r0, r4
 80112cc:	4629      	mov	r1, r5
 80112ce:	f7ef f95f 	bl	8000590 <__aeabi_dmul>
 80112d2:	a342      	add	r3, pc, #264	@ (adr r3, 80113dc <__kernel_sin+0x14c>)
 80112d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112d8:	e9cd 0100 	strd	r0, r1, [sp]
 80112dc:	4650      	mov	r0, sl
 80112de:	4659      	mov	r1, fp
 80112e0:	f7ef f956 	bl	8000590 <__aeabi_dmul>
 80112e4:	a33f      	add	r3, pc, #252	@ (adr r3, 80113e4 <__kernel_sin+0x154>)
 80112e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112ea:	f7ee ff99 	bl	8000220 <__aeabi_dsub>
 80112ee:	4652      	mov	r2, sl
 80112f0:	465b      	mov	r3, fp
 80112f2:	f7ef f94d 	bl	8000590 <__aeabi_dmul>
 80112f6:	a33d      	add	r3, pc, #244	@ (adr r3, 80113ec <__kernel_sin+0x15c>)
 80112f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112fc:	f7ee ff92 	bl	8000224 <__adddf3>
 8011300:	4652      	mov	r2, sl
 8011302:	465b      	mov	r3, fp
 8011304:	f7ef f944 	bl	8000590 <__aeabi_dmul>
 8011308:	a33a      	add	r3, pc, #232	@ (adr r3, 80113f4 <__kernel_sin+0x164>)
 801130a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801130e:	f7ee ff87 	bl	8000220 <__aeabi_dsub>
 8011312:	4652      	mov	r2, sl
 8011314:	465b      	mov	r3, fp
 8011316:	f7ef f93b 	bl	8000590 <__aeabi_dmul>
 801131a:	a338      	add	r3, pc, #224	@ (adr r3, 80113fc <__kernel_sin+0x16c>)
 801131c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011320:	f7ee ff80 	bl	8000224 <__adddf3>
 8011324:	4606      	mov	r6, r0
 8011326:	460f      	mov	r7, r1
 8011328:	f1b8 0f00 	cmp.w	r8, #0
 801132c:	d11b      	bne.n	8011366 <__kernel_sin+0xd6>
 801132e:	4602      	mov	r2, r0
 8011330:	460b      	mov	r3, r1
 8011332:	4650      	mov	r0, sl
 8011334:	4659      	mov	r1, fp
 8011336:	f7ef f92b 	bl	8000590 <__aeabi_dmul>
 801133a:	a325      	add	r3, pc, #148	@ (adr r3, 80113d0 <__kernel_sin+0x140>)
 801133c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011340:	f7ee ff6e 	bl	8000220 <__aeabi_dsub>
 8011344:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011348:	f7ef f922 	bl	8000590 <__aeabi_dmul>
 801134c:	4602      	mov	r2, r0
 801134e:	460b      	mov	r3, r1
 8011350:	4620      	mov	r0, r4
 8011352:	4629      	mov	r1, r5
 8011354:	f7ee ff66 	bl	8000224 <__adddf3>
 8011358:	4604      	mov	r4, r0
 801135a:	460d      	mov	r5, r1
 801135c:	ec45 4b10 	vmov	d0, r4, r5
 8011360:	b005      	add	sp, #20
 8011362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011366:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801136a:	4b1b      	ldr	r3, [pc, #108]	@ (80113d8 <__kernel_sin+0x148>)
 801136c:	2200      	movs	r2, #0
 801136e:	f7ef f90f 	bl	8000590 <__aeabi_dmul>
 8011372:	4632      	mov	r2, r6
 8011374:	4680      	mov	r8, r0
 8011376:	4689      	mov	r9, r1
 8011378:	463b      	mov	r3, r7
 801137a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801137e:	f7ef f907 	bl	8000590 <__aeabi_dmul>
 8011382:	4602      	mov	r2, r0
 8011384:	460b      	mov	r3, r1
 8011386:	4640      	mov	r0, r8
 8011388:	4649      	mov	r1, r9
 801138a:	f7ee ff49 	bl	8000220 <__aeabi_dsub>
 801138e:	4652      	mov	r2, sl
 8011390:	465b      	mov	r3, fp
 8011392:	f7ef f8fd 	bl	8000590 <__aeabi_dmul>
 8011396:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801139a:	f7ee ff41 	bl	8000220 <__aeabi_dsub>
 801139e:	a30c      	add	r3, pc, #48	@ (adr r3, 80113d0 <__kernel_sin+0x140>)
 80113a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113a4:	4606      	mov	r6, r0
 80113a6:	460f      	mov	r7, r1
 80113a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80113ac:	f7ef f8f0 	bl	8000590 <__aeabi_dmul>
 80113b0:	4602      	mov	r2, r0
 80113b2:	460b      	mov	r3, r1
 80113b4:	4630      	mov	r0, r6
 80113b6:	4639      	mov	r1, r7
 80113b8:	f7ee ff34 	bl	8000224 <__adddf3>
 80113bc:	4602      	mov	r2, r0
 80113be:	460b      	mov	r3, r1
 80113c0:	4620      	mov	r0, r4
 80113c2:	4629      	mov	r1, r5
 80113c4:	f7ee ff2c 	bl	8000220 <__aeabi_dsub>
 80113c8:	e7c6      	b.n	8011358 <__kernel_sin+0xc8>
 80113ca:	bf00      	nop
 80113cc:	f3af 8000 	nop.w
 80113d0:	55555549 	.word	0x55555549
 80113d4:	3fc55555 	.word	0x3fc55555
 80113d8:	3fe00000 	.word	0x3fe00000
 80113dc:	5acfd57c 	.word	0x5acfd57c
 80113e0:	3de5d93a 	.word	0x3de5d93a
 80113e4:	8a2b9ceb 	.word	0x8a2b9ceb
 80113e8:	3e5ae5e6 	.word	0x3e5ae5e6
 80113ec:	57b1fe7d 	.word	0x57b1fe7d
 80113f0:	3ec71de3 	.word	0x3ec71de3
 80113f4:	19c161d5 	.word	0x19c161d5
 80113f8:	3f2a01a0 	.word	0x3f2a01a0
 80113fc:	1110f8a6 	.word	0x1110f8a6
 8011400:	3f811111 	.word	0x3f811111
 8011404:	00000000 	.word	0x00000000

08011408 <__ieee754_rem_pio2>:
 8011408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801140c:	ec57 6b10 	vmov	r6, r7, d0
 8011410:	4bc5      	ldr	r3, [pc, #788]	@ (8011728 <__ieee754_rem_pio2+0x320>)
 8011412:	b08d      	sub	sp, #52	@ 0x34
 8011414:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8011418:	4598      	cmp	r8, r3
 801141a:	4604      	mov	r4, r0
 801141c:	9704      	str	r7, [sp, #16]
 801141e:	d807      	bhi.n	8011430 <__ieee754_rem_pio2+0x28>
 8011420:	2200      	movs	r2, #0
 8011422:	2300      	movs	r3, #0
 8011424:	ed80 0b00 	vstr	d0, [r0]
 8011428:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801142c:	2500      	movs	r5, #0
 801142e:	e028      	b.n	8011482 <__ieee754_rem_pio2+0x7a>
 8011430:	4bbe      	ldr	r3, [pc, #760]	@ (801172c <__ieee754_rem_pio2+0x324>)
 8011432:	4598      	cmp	r8, r3
 8011434:	d878      	bhi.n	8011528 <__ieee754_rem_pio2+0x120>
 8011436:	9b04      	ldr	r3, [sp, #16]
 8011438:	4dbd      	ldr	r5, [pc, #756]	@ (8011730 <__ieee754_rem_pio2+0x328>)
 801143a:	2b00      	cmp	r3, #0
 801143c:	4630      	mov	r0, r6
 801143e:	a3ac      	add	r3, pc, #688	@ (adr r3, 80116f0 <__ieee754_rem_pio2+0x2e8>)
 8011440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011444:	4639      	mov	r1, r7
 8011446:	dd38      	ble.n	80114ba <__ieee754_rem_pio2+0xb2>
 8011448:	f7ee feea 	bl	8000220 <__aeabi_dsub>
 801144c:	45a8      	cmp	r8, r5
 801144e:	4606      	mov	r6, r0
 8011450:	460f      	mov	r7, r1
 8011452:	d01a      	beq.n	801148a <__ieee754_rem_pio2+0x82>
 8011454:	a3a8      	add	r3, pc, #672	@ (adr r3, 80116f8 <__ieee754_rem_pio2+0x2f0>)
 8011456:	e9d3 2300 	ldrd	r2, r3, [r3]
 801145a:	f7ee fee1 	bl	8000220 <__aeabi_dsub>
 801145e:	4602      	mov	r2, r0
 8011460:	460b      	mov	r3, r1
 8011462:	4680      	mov	r8, r0
 8011464:	4689      	mov	r9, r1
 8011466:	4630      	mov	r0, r6
 8011468:	4639      	mov	r1, r7
 801146a:	f7ee fed9 	bl	8000220 <__aeabi_dsub>
 801146e:	a3a2      	add	r3, pc, #648	@ (adr r3, 80116f8 <__ieee754_rem_pio2+0x2f0>)
 8011470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011474:	f7ee fed4 	bl	8000220 <__aeabi_dsub>
 8011478:	e9c4 8900 	strd	r8, r9, [r4]
 801147c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011480:	2501      	movs	r5, #1
 8011482:	4628      	mov	r0, r5
 8011484:	b00d      	add	sp, #52	@ 0x34
 8011486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801148a:	a39d      	add	r3, pc, #628	@ (adr r3, 8011700 <__ieee754_rem_pio2+0x2f8>)
 801148c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011490:	f7ee fec6 	bl	8000220 <__aeabi_dsub>
 8011494:	a39c      	add	r3, pc, #624	@ (adr r3, 8011708 <__ieee754_rem_pio2+0x300>)
 8011496:	e9d3 2300 	ldrd	r2, r3, [r3]
 801149a:	4606      	mov	r6, r0
 801149c:	460f      	mov	r7, r1
 801149e:	f7ee febf 	bl	8000220 <__aeabi_dsub>
 80114a2:	4602      	mov	r2, r0
 80114a4:	460b      	mov	r3, r1
 80114a6:	4680      	mov	r8, r0
 80114a8:	4689      	mov	r9, r1
 80114aa:	4630      	mov	r0, r6
 80114ac:	4639      	mov	r1, r7
 80114ae:	f7ee feb7 	bl	8000220 <__aeabi_dsub>
 80114b2:	a395      	add	r3, pc, #596	@ (adr r3, 8011708 <__ieee754_rem_pio2+0x300>)
 80114b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114b8:	e7dc      	b.n	8011474 <__ieee754_rem_pio2+0x6c>
 80114ba:	f7ee feb3 	bl	8000224 <__adddf3>
 80114be:	45a8      	cmp	r8, r5
 80114c0:	4606      	mov	r6, r0
 80114c2:	460f      	mov	r7, r1
 80114c4:	d018      	beq.n	80114f8 <__ieee754_rem_pio2+0xf0>
 80114c6:	a38c      	add	r3, pc, #560	@ (adr r3, 80116f8 <__ieee754_rem_pio2+0x2f0>)
 80114c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114cc:	f7ee feaa 	bl	8000224 <__adddf3>
 80114d0:	4602      	mov	r2, r0
 80114d2:	460b      	mov	r3, r1
 80114d4:	4680      	mov	r8, r0
 80114d6:	4689      	mov	r9, r1
 80114d8:	4630      	mov	r0, r6
 80114da:	4639      	mov	r1, r7
 80114dc:	f7ee fea0 	bl	8000220 <__aeabi_dsub>
 80114e0:	a385      	add	r3, pc, #532	@ (adr r3, 80116f8 <__ieee754_rem_pio2+0x2f0>)
 80114e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114e6:	f7ee fe9d 	bl	8000224 <__adddf3>
 80114ea:	f04f 35ff 	mov.w	r5, #4294967295
 80114ee:	e9c4 8900 	strd	r8, r9, [r4]
 80114f2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80114f6:	e7c4      	b.n	8011482 <__ieee754_rem_pio2+0x7a>
 80114f8:	a381      	add	r3, pc, #516	@ (adr r3, 8011700 <__ieee754_rem_pio2+0x2f8>)
 80114fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114fe:	f7ee fe91 	bl	8000224 <__adddf3>
 8011502:	a381      	add	r3, pc, #516	@ (adr r3, 8011708 <__ieee754_rem_pio2+0x300>)
 8011504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011508:	4606      	mov	r6, r0
 801150a:	460f      	mov	r7, r1
 801150c:	f7ee fe8a 	bl	8000224 <__adddf3>
 8011510:	4602      	mov	r2, r0
 8011512:	460b      	mov	r3, r1
 8011514:	4680      	mov	r8, r0
 8011516:	4689      	mov	r9, r1
 8011518:	4630      	mov	r0, r6
 801151a:	4639      	mov	r1, r7
 801151c:	f7ee fe80 	bl	8000220 <__aeabi_dsub>
 8011520:	a379      	add	r3, pc, #484	@ (adr r3, 8011708 <__ieee754_rem_pio2+0x300>)
 8011522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011526:	e7de      	b.n	80114e6 <__ieee754_rem_pio2+0xde>
 8011528:	4b82      	ldr	r3, [pc, #520]	@ (8011734 <__ieee754_rem_pio2+0x32c>)
 801152a:	4598      	cmp	r8, r3
 801152c:	f200 80d1 	bhi.w	80116d2 <__ieee754_rem_pio2+0x2ca>
 8011530:	f000 f966 	bl	8011800 <fabs>
 8011534:	ec57 6b10 	vmov	r6, r7, d0
 8011538:	a375      	add	r3, pc, #468	@ (adr r3, 8011710 <__ieee754_rem_pio2+0x308>)
 801153a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801153e:	4630      	mov	r0, r6
 8011540:	4639      	mov	r1, r7
 8011542:	f7ef f825 	bl	8000590 <__aeabi_dmul>
 8011546:	4b7c      	ldr	r3, [pc, #496]	@ (8011738 <__ieee754_rem_pio2+0x330>)
 8011548:	2200      	movs	r2, #0
 801154a:	f7ee fe6b 	bl	8000224 <__adddf3>
 801154e:	f7ef fab9 	bl	8000ac4 <__aeabi_d2iz>
 8011552:	4605      	mov	r5, r0
 8011554:	f7ee ffb2 	bl	80004bc <__aeabi_i2d>
 8011558:	4602      	mov	r2, r0
 801155a:	460b      	mov	r3, r1
 801155c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011560:	a363      	add	r3, pc, #396	@ (adr r3, 80116f0 <__ieee754_rem_pio2+0x2e8>)
 8011562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011566:	f7ef f813 	bl	8000590 <__aeabi_dmul>
 801156a:	4602      	mov	r2, r0
 801156c:	460b      	mov	r3, r1
 801156e:	4630      	mov	r0, r6
 8011570:	4639      	mov	r1, r7
 8011572:	f7ee fe55 	bl	8000220 <__aeabi_dsub>
 8011576:	a360      	add	r3, pc, #384	@ (adr r3, 80116f8 <__ieee754_rem_pio2+0x2f0>)
 8011578:	e9d3 2300 	ldrd	r2, r3, [r3]
 801157c:	4682      	mov	sl, r0
 801157e:	468b      	mov	fp, r1
 8011580:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011584:	f7ef f804 	bl	8000590 <__aeabi_dmul>
 8011588:	2d1f      	cmp	r5, #31
 801158a:	4606      	mov	r6, r0
 801158c:	460f      	mov	r7, r1
 801158e:	dc0c      	bgt.n	80115aa <__ieee754_rem_pio2+0x1a2>
 8011590:	4b6a      	ldr	r3, [pc, #424]	@ (801173c <__ieee754_rem_pio2+0x334>)
 8011592:	1e6a      	subs	r2, r5, #1
 8011594:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011598:	4543      	cmp	r3, r8
 801159a:	d006      	beq.n	80115aa <__ieee754_rem_pio2+0x1a2>
 801159c:	4632      	mov	r2, r6
 801159e:	463b      	mov	r3, r7
 80115a0:	4650      	mov	r0, sl
 80115a2:	4659      	mov	r1, fp
 80115a4:	f7ee fe3c 	bl	8000220 <__aeabi_dsub>
 80115a8:	e00e      	b.n	80115c8 <__ieee754_rem_pio2+0x1c0>
 80115aa:	463b      	mov	r3, r7
 80115ac:	4632      	mov	r2, r6
 80115ae:	4650      	mov	r0, sl
 80115b0:	4659      	mov	r1, fp
 80115b2:	f7ee fe35 	bl	8000220 <__aeabi_dsub>
 80115b6:	ea4f 5328 	mov.w	r3, r8, asr #20
 80115ba:	9305      	str	r3, [sp, #20]
 80115bc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80115c0:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 80115c4:	2b10      	cmp	r3, #16
 80115c6:	dc02      	bgt.n	80115ce <__ieee754_rem_pio2+0x1c6>
 80115c8:	e9c4 0100 	strd	r0, r1, [r4]
 80115cc:	e039      	b.n	8011642 <__ieee754_rem_pio2+0x23a>
 80115ce:	a34c      	add	r3, pc, #304	@ (adr r3, 8011700 <__ieee754_rem_pio2+0x2f8>)
 80115d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80115d8:	f7ee ffda 	bl	8000590 <__aeabi_dmul>
 80115dc:	4606      	mov	r6, r0
 80115de:	460f      	mov	r7, r1
 80115e0:	4602      	mov	r2, r0
 80115e2:	460b      	mov	r3, r1
 80115e4:	4650      	mov	r0, sl
 80115e6:	4659      	mov	r1, fp
 80115e8:	f7ee fe1a 	bl	8000220 <__aeabi_dsub>
 80115ec:	4602      	mov	r2, r0
 80115ee:	460b      	mov	r3, r1
 80115f0:	4680      	mov	r8, r0
 80115f2:	4689      	mov	r9, r1
 80115f4:	4650      	mov	r0, sl
 80115f6:	4659      	mov	r1, fp
 80115f8:	f7ee fe12 	bl	8000220 <__aeabi_dsub>
 80115fc:	4632      	mov	r2, r6
 80115fe:	463b      	mov	r3, r7
 8011600:	f7ee fe0e 	bl	8000220 <__aeabi_dsub>
 8011604:	a340      	add	r3, pc, #256	@ (adr r3, 8011708 <__ieee754_rem_pio2+0x300>)
 8011606:	e9d3 2300 	ldrd	r2, r3, [r3]
 801160a:	4606      	mov	r6, r0
 801160c:	460f      	mov	r7, r1
 801160e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011612:	f7ee ffbd 	bl	8000590 <__aeabi_dmul>
 8011616:	4632      	mov	r2, r6
 8011618:	463b      	mov	r3, r7
 801161a:	f7ee fe01 	bl	8000220 <__aeabi_dsub>
 801161e:	4602      	mov	r2, r0
 8011620:	460b      	mov	r3, r1
 8011622:	4606      	mov	r6, r0
 8011624:	460f      	mov	r7, r1
 8011626:	4640      	mov	r0, r8
 8011628:	4649      	mov	r1, r9
 801162a:	f7ee fdf9 	bl	8000220 <__aeabi_dsub>
 801162e:	9a05      	ldr	r2, [sp, #20]
 8011630:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8011634:	1ad3      	subs	r3, r2, r3
 8011636:	2b31      	cmp	r3, #49	@ 0x31
 8011638:	dc20      	bgt.n	801167c <__ieee754_rem_pio2+0x274>
 801163a:	e9c4 0100 	strd	r0, r1, [r4]
 801163e:	46c2      	mov	sl, r8
 8011640:	46cb      	mov	fp, r9
 8011642:	e9d4 8900 	ldrd	r8, r9, [r4]
 8011646:	4650      	mov	r0, sl
 8011648:	4642      	mov	r2, r8
 801164a:	464b      	mov	r3, r9
 801164c:	4659      	mov	r1, fp
 801164e:	f7ee fde7 	bl	8000220 <__aeabi_dsub>
 8011652:	463b      	mov	r3, r7
 8011654:	4632      	mov	r2, r6
 8011656:	f7ee fde3 	bl	8000220 <__aeabi_dsub>
 801165a:	9b04      	ldr	r3, [sp, #16]
 801165c:	2b00      	cmp	r3, #0
 801165e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011662:	f6bf af0e 	bge.w	8011482 <__ieee754_rem_pio2+0x7a>
 8011666:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 801166a:	6063      	str	r3, [r4, #4]
 801166c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011670:	f8c4 8000 	str.w	r8, [r4]
 8011674:	60a0      	str	r0, [r4, #8]
 8011676:	60e3      	str	r3, [r4, #12]
 8011678:	426d      	negs	r5, r5
 801167a:	e702      	b.n	8011482 <__ieee754_rem_pio2+0x7a>
 801167c:	a326      	add	r3, pc, #152	@ (adr r3, 8011718 <__ieee754_rem_pio2+0x310>)
 801167e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011682:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011686:	f7ee ff83 	bl	8000590 <__aeabi_dmul>
 801168a:	4606      	mov	r6, r0
 801168c:	460f      	mov	r7, r1
 801168e:	4602      	mov	r2, r0
 8011690:	460b      	mov	r3, r1
 8011692:	4640      	mov	r0, r8
 8011694:	4649      	mov	r1, r9
 8011696:	f7ee fdc3 	bl	8000220 <__aeabi_dsub>
 801169a:	4602      	mov	r2, r0
 801169c:	460b      	mov	r3, r1
 801169e:	4682      	mov	sl, r0
 80116a0:	468b      	mov	fp, r1
 80116a2:	4640      	mov	r0, r8
 80116a4:	4649      	mov	r1, r9
 80116a6:	f7ee fdbb 	bl	8000220 <__aeabi_dsub>
 80116aa:	4632      	mov	r2, r6
 80116ac:	463b      	mov	r3, r7
 80116ae:	f7ee fdb7 	bl	8000220 <__aeabi_dsub>
 80116b2:	a31b      	add	r3, pc, #108	@ (adr r3, 8011720 <__ieee754_rem_pio2+0x318>)
 80116b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116b8:	4606      	mov	r6, r0
 80116ba:	460f      	mov	r7, r1
 80116bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80116c0:	f7ee ff66 	bl	8000590 <__aeabi_dmul>
 80116c4:	4632      	mov	r2, r6
 80116c6:	463b      	mov	r3, r7
 80116c8:	f7ee fdaa 	bl	8000220 <__aeabi_dsub>
 80116cc:	4606      	mov	r6, r0
 80116ce:	460f      	mov	r7, r1
 80116d0:	e764      	b.n	801159c <__ieee754_rem_pio2+0x194>
 80116d2:	4b1b      	ldr	r3, [pc, #108]	@ (8011740 <__ieee754_rem_pio2+0x338>)
 80116d4:	4598      	cmp	r8, r3
 80116d6:	d935      	bls.n	8011744 <__ieee754_rem_pio2+0x33c>
 80116d8:	4632      	mov	r2, r6
 80116da:	463b      	mov	r3, r7
 80116dc:	4630      	mov	r0, r6
 80116de:	4639      	mov	r1, r7
 80116e0:	f7ee fd9e 	bl	8000220 <__aeabi_dsub>
 80116e4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80116e8:	e9c4 0100 	strd	r0, r1, [r4]
 80116ec:	e69e      	b.n	801142c <__ieee754_rem_pio2+0x24>
 80116ee:	bf00      	nop
 80116f0:	54400000 	.word	0x54400000
 80116f4:	3ff921fb 	.word	0x3ff921fb
 80116f8:	1a626331 	.word	0x1a626331
 80116fc:	3dd0b461 	.word	0x3dd0b461
 8011700:	1a600000 	.word	0x1a600000
 8011704:	3dd0b461 	.word	0x3dd0b461
 8011708:	2e037073 	.word	0x2e037073
 801170c:	3ba3198a 	.word	0x3ba3198a
 8011710:	6dc9c883 	.word	0x6dc9c883
 8011714:	3fe45f30 	.word	0x3fe45f30
 8011718:	2e000000 	.word	0x2e000000
 801171c:	3ba3198a 	.word	0x3ba3198a
 8011720:	252049c1 	.word	0x252049c1
 8011724:	397b839a 	.word	0x397b839a
 8011728:	3fe921fb 	.word	0x3fe921fb
 801172c:	4002d97b 	.word	0x4002d97b
 8011730:	3ff921fb 	.word	0x3ff921fb
 8011734:	413921fb 	.word	0x413921fb
 8011738:	3fe00000 	.word	0x3fe00000
 801173c:	08012c40 	.word	0x08012c40
 8011740:	7fefffff 	.word	0x7fefffff
 8011744:	ea4f 5528 	mov.w	r5, r8, asr #20
 8011748:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 801174c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8011750:	4630      	mov	r0, r6
 8011752:	460f      	mov	r7, r1
 8011754:	f7ef f9b6 	bl	8000ac4 <__aeabi_d2iz>
 8011758:	f7ee feb0 	bl	80004bc <__aeabi_i2d>
 801175c:	4602      	mov	r2, r0
 801175e:	460b      	mov	r3, r1
 8011760:	4630      	mov	r0, r6
 8011762:	4639      	mov	r1, r7
 8011764:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8011768:	f7ee fd5a 	bl	8000220 <__aeabi_dsub>
 801176c:	4b22      	ldr	r3, [pc, #136]	@ (80117f8 <__ieee754_rem_pio2+0x3f0>)
 801176e:	2200      	movs	r2, #0
 8011770:	f7ee ff0e 	bl	8000590 <__aeabi_dmul>
 8011774:	460f      	mov	r7, r1
 8011776:	4606      	mov	r6, r0
 8011778:	f7ef f9a4 	bl	8000ac4 <__aeabi_d2iz>
 801177c:	f7ee fe9e 	bl	80004bc <__aeabi_i2d>
 8011780:	4602      	mov	r2, r0
 8011782:	460b      	mov	r3, r1
 8011784:	4630      	mov	r0, r6
 8011786:	4639      	mov	r1, r7
 8011788:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801178c:	f7ee fd48 	bl	8000220 <__aeabi_dsub>
 8011790:	4b19      	ldr	r3, [pc, #100]	@ (80117f8 <__ieee754_rem_pio2+0x3f0>)
 8011792:	2200      	movs	r2, #0
 8011794:	f7ee fefc 	bl	8000590 <__aeabi_dmul>
 8011798:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 801179c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 80117a0:	f04f 0803 	mov.w	r8, #3
 80117a4:	2600      	movs	r6, #0
 80117a6:	2700      	movs	r7, #0
 80117a8:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80117ac:	4632      	mov	r2, r6
 80117ae:	463b      	mov	r3, r7
 80117b0:	46c2      	mov	sl, r8
 80117b2:	f108 38ff 	add.w	r8, r8, #4294967295
 80117b6:	f7ef f953 	bl	8000a60 <__aeabi_dcmpeq>
 80117ba:	2800      	cmp	r0, #0
 80117bc:	d1f4      	bne.n	80117a8 <__ieee754_rem_pio2+0x3a0>
 80117be:	4b0f      	ldr	r3, [pc, #60]	@ (80117fc <__ieee754_rem_pio2+0x3f4>)
 80117c0:	9301      	str	r3, [sp, #4]
 80117c2:	2302      	movs	r3, #2
 80117c4:	9300      	str	r3, [sp, #0]
 80117c6:	462a      	mov	r2, r5
 80117c8:	4653      	mov	r3, sl
 80117ca:	4621      	mov	r1, r4
 80117cc:	a806      	add	r0, sp, #24
 80117ce:	f000 fb5b 	bl	8011e88 <__kernel_rem_pio2>
 80117d2:	9b04      	ldr	r3, [sp, #16]
 80117d4:	2b00      	cmp	r3, #0
 80117d6:	4605      	mov	r5, r0
 80117d8:	f6bf ae53 	bge.w	8011482 <__ieee754_rem_pio2+0x7a>
 80117dc:	e9d4 2100 	ldrd	r2, r1, [r4]
 80117e0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80117e4:	e9c4 2300 	strd	r2, r3, [r4]
 80117e8:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 80117ec:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80117f0:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80117f4:	e740      	b.n	8011678 <__ieee754_rem_pio2+0x270>
 80117f6:	bf00      	nop
 80117f8:	41700000 	.word	0x41700000
 80117fc:	08012cc0 	.word	0x08012cc0

08011800 <fabs>:
 8011800:	ec51 0b10 	vmov	r0, r1, d0
 8011804:	4602      	mov	r2, r0
 8011806:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801180a:	ec43 2b10 	vmov	d0, r2, r3
 801180e:	4770      	bx	lr

08011810 <__kernel_cosf>:
 8011810:	ee10 3a10 	vmov	r3, s0
 8011814:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011818:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 801181c:	eef0 6a40 	vmov.f32	s13, s0
 8011820:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8011824:	d204      	bcs.n	8011830 <__kernel_cosf+0x20>
 8011826:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 801182a:	ee17 2a90 	vmov	r2, s15
 801182e:	b342      	cbz	r2, 8011882 <__kernel_cosf+0x72>
 8011830:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8011834:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 80118a0 <__kernel_cosf+0x90>
 8011838:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 80118a4 <__kernel_cosf+0x94>
 801183c:	4a1a      	ldr	r2, [pc, #104]	@ (80118a8 <__kernel_cosf+0x98>)
 801183e:	eea7 6a27 	vfma.f32	s12, s14, s15
 8011842:	4293      	cmp	r3, r2
 8011844:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80118ac <__kernel_cosf+0x9c>
 8011848:	eee6 7a07 	vfma.f32	s15, s12, s14
 801184c:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 80118b0 <__kernel_cosf+0xa0>
 8011850:	eea7 6a87 	vfma.f32	s12, s15, s14
 8011854:	eddf 7a17 	vldr	s15, [pc, #92]	@ 80118b4 <__kernel_cosf+0xa4>
 8011858:	eee6 7a07 	vfma.f32	s15, s12, s14
 801185c:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 80118b8 <__kernel_cosf+0xa8>
 8011860:	eea7 6a87 	vfma.f32	s12, s15, s14
 8011864:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8011868:	ee26 6a07 	vmul.f32	s12, s12, s14
 801186c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8011870:	eee7 0a06 	vfma.f32	s1, s14, s12
 8011874:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011878:	d804      	bhi.n	8011884 <__kernel_cosf+0x74>
 801187a:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801187e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8011882:	4770      	bx	lr
 8011884:	4a0d      	ldr	r2, [pc, #52]	@ (80118bc <__kernel_cosf+0xac>)
 8011886:	4293      	cmp	r3, r2
 8011888:	bf9a      	itte	ls
 801188a:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 801188e:	ee07 3a10 	vmovls	s14, r3
 8011892:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 8011896:	ee30 0a47 	vsub.f32	s0, s0, s14
 801189a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801189e:	e7ec      	b.n	801187a <__kernel_cosf+0x6a>
 80118a0:	ad47d74e 	.word	0xad47d74e
 80118a4:	310f74f6 	.word	0x310f74f6
 80118a8:	3e999999 	.word	0x3e999999
 80118ac:	b493f27c 	.word	0xb493f27c
 80118b0:	37d00d01 	.word	0x37d00d01
 80118b4:	bab60b61 	.word	0xbab60b61
 80118b8:	3d2aaaab 	.word	0x3d2aaaab
 80118bc:	3f480000 	.word	0x3f480000

080118c0 <__kernel_sinf>:
 80118c0:	ee10 3a10 	vmov	r3, s0
 80118c4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80118c8:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 80118cc:	d204      	bcs.n	80118d8 <__kernel_sinf+0x18>
 80118ce:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80118d2:	ee17 3a90 	vmov	r3, s15
 80118d6:	b35b      	cbz	r3, 8011930 <__kernel_sinf+0x70>
 80118d8:	ee20 7a00 	vmul.f32	s14, s0, s0
 80118dc:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8011934 <__kernel_sinf+0x74>
 80118e0:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8011938 <__kernel_sinf+0x78>
 80118e4:	eea7 6a27 	vfma.f32	s12, s14, s15
 80118e8:	eddf 7a14 	vldr	s15, [pc, #80]	@ 801193c <__kernel_sinf+0x7c>
 80118ec:	eee6 7a07 	vfma.f32	s15, s12, s14
 80118f0:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8011940 <__kernel_sinf+0x80>
 80118f4:	eea7 6a87 	vfma.f32	s12, s15, s14
 80118f8:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8011944 <__kernel_sinf+0x84>
 80118fc:	ee60 6a07 	vmul.f32	s13, s0, s14
 8011900:	eee6 7a07 	vfma.f32	s15, s12, s14
 8011904:	b930      	cbnz	r0, 8011914 <__kernel_sinf+0x54>
 8011906:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8011948 <__kernel_sinf+0x88>
 801190a:	eea7 6a27 	vfma.f32	s12, s14, s15
 801190e:	eea6 0a26 	vfma.f32	s0, s12, s13
 8011912:	4770      	bx	lr
 8011914:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8011918:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 801191c:	eee0 7a86 	vfma.f32	s15, s1, s12
 8011920:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8011924:	eddf 7a09 	vldr	s15, [pc, #36]	@ 801194c <__kernel_sinf+0x8c>
 8011928:	eee6 0aa7 	vfma.f32	s1, s13, s15
 801192c:	ee30 0a60 	vsub.f32	s0, s0, s1
 8011930:	4770      	bx	lr
 8011932:	bf00      	nop
 8011934:	2f2ec9d3 	.word	0x2f2ec9d3
 8011938:	b2d72f34 	.word	0xb2d72f34
 801193c:	3638ef1b 	.word	0x3638ef1b
 8011940:	b9500d01 	.word	0xb9500d01
 8011944:	3c088889 	.word	0x3c088889
 8011948:	be2aaaab 	.word	0xbe2aaaab
 801194c:	3e2aaaab 	.word	0x3e2aaaab

08011950 <__ieee754_fmodf>:
 8011950:	b570      	push	{r4, r5, r6, lr}
 8011952:	ee10 6a90 	vmov	r6, s1
 8011956:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 801195a:	1e5a      	subs	r2, r3, #1
 801195c:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8011960:	d206      	bcs.n	8011970 <__ieee754_fmodf+0x20>
 8011962:	ee10 4a10 	vmov	r4, s0
 8011966:	f024 4100 	bic.w	r1, r4, #2147483648	@ 0x80000000
 801196a:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 801196e:	d304      	bcc.n	801197a <__ieee754_fmodf+0x2a>
 8011970:	ee60 0a20 	vmul.f32	s1, s0, s1
 8011974:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 8011978:	bd70      	pop	{r4, r5, r6, pc}
 801197a:	4299      	cmp	r1, r3
 801197c:	dbfc      	blt.n	8011978 <__ieee754_fmodf+0x28>
 801197e:	f004 4500 	and.w	r5, r4, #2147483648	@ 0x80000000
 8011982:	d105      	bne.n	8011990 <__ieee754_fmodf+0x40>
 8011984:	4b32      	ldr	r3, [pc, #200]	@ (8011a50 <__ieee754_fmodf+0x100>)
 8011986:	eb03 7355 	add.w	r3, r3, r5, lsr #29
 801198a:	ed93 0a00 	vldr	s0, [r3]
 801198e:	e7f3      	b.n	8011978 <__ieee754_fmodf+0x28>
 8011990:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 8011994:	d146      	bne.n	8011a24 <__ieee754_fmodf+0xd4>
 8011996:	020a      	lsls	r2, r1, #8
 8011998:	f06f 007d 	mvn.w	r0, #125	@ 0x7d
 801199c:	2a00      	cmp	r2, #0
 801199e:	dc3e      	bgt.n	8011a1e <__ieee754_fmodf+0xce>
 80119a0:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 80119a4:	bf01      	itttt	eq
 80119a6:	021a      	lsleq	r2, r3, #8
 80119a8:	fab2 f282 	clzeq	r2, r2
 80119ac:	f1c2 22ff 	rsbeq	r2, r2, #4278255360	@ 0xff00ff00
 80119b0:	f502 027f 	addeq.w	r2, r2, #16711680	@ 0xff0000
 80119b4:	bf16      	itet	ne
 80119b6:	15da      	asrne	r2, r3, #23
 80119b8:	3282      	addeq	r2, #130	@ 0x82
 80119ba:	3a7f      	subne	r2, #127	@ 0x7f
 80119bc:	f110 0f7e 	cmn.w	r0, #126	@ 0x7e
 80119c0:	bfbb      	ittet	lt
 80119c2:	f06f 047d 	mvnlt.w	r4, #125	@ 0x7d
 80119c6:	1a24      	sublt	r4, r4, r0
 80119c8:	f3c4 0416 	ubfxge	r4, r4, #0, #23
 80119cc:	40a1      	lsllt	r1, r4
 80119ce:	bfa8      	it	ge
 80119d0:	f444 0100 	orrge.w	r1, r4, #8388608	@ 0x800000
 80119d4:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 80119d8:	bfb5      	itete	lt
 80119da:	f06f 047d 	mvnlt.w	r4, #125	@ 0x7d
 80119de:	f3c6 0616 	ubfxge	r6, r6, #0, #23
 80119e2:	1aa4      	sublt	r4, r4, r2
 80119e4:	f446 0400 	orrge.w	r4, r6, #8388608	@ 0x800000
 80119e8:	bfb8      	it	lt
 80119ea:	fa03 f404 	lsllt.w	r4, r3, r4
 80119ee:	1a80      	subs	r0, r0, r2
 80119f0:	1b0b      	subs	r3, r1, r4
 80119f2:	b9d0      	cbnz	r0, 8011a2a <__ieee754_fmodf+0xda>
 80119f4:	ea33 0323 	bics.w	r3, r3, r3, asr #32
 80119f8:	bf28      	it	cs
 80119fa:	460b      	movcs	r3, r1
 80119fc:	2b00      	cmp	r3, #0
 80119fe:	d0c1      	beq.n	8011984 <__ieee754_fmodf+0x34>
 8011a00:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8011a04:	db19      	blt.n	8011a3a <__ieee754_fmodf+0xea>
 8011a06:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 8011a0a:	db19      	blt.n	8011a40 <__ieee754_fmodf+0xf0>
 8011a0c:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8011a10:	327f      	adds	r2, #127	@ 0x7f
 8011a12:	432b      	orrs	r3, r5
 8011a14:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8011a18:	ee00 3a10 	vmov	s0, r3
 8011a1c:	e7ac      	b.n	8011978 <__ieee754_fmodf+0x28>
 8011a1e:	3801      	subs	r0, #1
 8011a20:	0052      	lsls	r2, r2, #1
 8011a22:	e7bb      	b.n	801199c <__ieee754_fmodf+0x4c>
 8011a24:	15c8      	asrs	r0, r1, #23
 8011a26:	387f      	subs	r0, #127	@ 0x7f
 8011a28:	e7ba      	b.n	80119a0 <__ieee754_fmodf+0x50>
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	da02      	bge.n	8011a34 <__ieee754_fmodf+0xe4>
 8011a2e:	0049      	lsls	r1, r1, #1
 8011a30:	3801      	subs	r0, #1
 8011a32:	e7dd      	b.n	80119f0 <__ieee754_fmodf+0xa0>
 8011a34:	d0a6      	beq.n	8011984 <__ieee754_fmodf+0x34>
 8011a36:	0059      	lsls	r1, r3, #1
 8011a38:	e7fa      	b.n	8011a30 <__ieee754_fmodf+0xe0>
 8011a3a:	005b      	lsls	r3, r3, #1
 8011a3c:	3a01      	subs	r2, #1
 8011a3e:	e7df      	b.n	8011a00 <__ieee754_fmodf+0xb0>
 8011a40:	f1c2 22ff 	rsb	r2, r2, #4278255360	@ 0xff00ff00
 8011a44:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 8011a48:	3282      	adds	r2, #130	@ 0x82
 8011a4a:	4113      	asrs	r3, r2
 8011a4c:	432b      	orrs	r3, r5
 8011a4e:	e7e3      	b.n	8011a18 <__ieee754_fmodf+0xc8>
 8011a50:	08012dc8 	.word	0x08012dc8

08011a54 <__ieee754_rem_pio2f>:
 8011a54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011a56:	ee10 6a10 	vmov	r6, s0
 8011a5a:	4b88      	ldr	r3, [pc, #544]	@ (8011c7c <__ieee754_rem_pio2f+0x228>)
 8011a5c:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8011a60:	429d      	cmp	r5, r3
 8011a62:	b087      	sub	sp, #28
 8011a64:	4604      	mov	r4, r0
 8011a66:	d805      	bhi.n	8011a74 <__ieee754_rem_pio2f+0x20>
 8011a68:	2300      	movs	r3, #0
 8011a6a:	ed80 0a00 	vstr	s0, [r0]
 8011a6e:	6043      	str	r3, [r0, #4]
 8011a70:	2000      	movs	r0, #0
 8011a72:	e022      	b.n	8011aba <__ieee754_rem_pio2f+0x66>
 8011a74:	4b82      	ldr	r3, [pc, #520]	@ (8011c80 <__ieee754_rem_pio2f+0x22c>)
 8011a76:	429d      	cmp	r5, r3
 8011a78:	d83a      	bhi.n	8011af0 <__ieee754_rem_pio2f+0x9c>
 8011a7a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8011a7e:	2e00      	cmp	r6, #0
 8011a80:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8011c84 <__ieee754_rem_pio2f+0x230>
 8011a84:	4a80      	ldr	r2, [pc, #512]	@ (8011c88 <__ieee754_rem_pio2f+0x234>)
 8011a86:	f023 030f 	bic.w	r3, r3, #15
 8011a8a:	dd18      	ble.n	8011abe <__ieee754_rem_pio2f+0x6a>
 8011a8c:	4293      	cmp	r3, r2
 8011a8e:	ee70 7a47 	vsub.f32	s15, s0, s14
 8011a92:	bf09      	itett	eq
 8011a94:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8011c8c <__ieee754_rem_pio2f+0x238>
 8011a98:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8011c90 <__ieee754_rem_pio2f+0x23c>
 8011a9c:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8011c94 <__ieee754_rem_pio2f+0x240>
 8011aa0:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8011aa4:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8011aa8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011aac:	ed80 7a00 	vstr	s14, [r0]
 8011ab0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8011ab4:	edc0 7a01 	vstr	s15, [r0, #4]
 8011ab8:	2001      	movs	r0, #1
 8011aba:	b007      	add	sp, #28
 8011abc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011abe:	4293      	cmp	r3, r2
 8011ac0:	ee70 7a07 	vadd.f32	s15, s0, s14
 8011ac4:	bf09      	itett	eq
 8011ac6:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8011c8c <__ieee754_rem_pio2f+0x238>
 8011aca:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8011c90 <__ieee754_rem_pio2f+0x23c>
 8011ace:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8011c94 <__ieee754_rem_pio2f+0x240>
 8011ad2:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8011ad6:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8011ada:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011ade:	ed80 7a00 	vstr	s14, [r0]
 8011ae2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011ae6:	edc0 7a01 	vstr	s15, [r0, #4]
 8011aea:	f04f 30ff 	mov.w	r0, #4294967295
 8011aee:	e7e4      	b.n	8011aba <__ieee754_rem_pio2f+0x66>
 8011af0:	4b69      	ldr	r3, [pc, #420]	@ (8011c98 <__ieee754_rem_pio2f+0x244>)
 8011af2:	429d      	cmp	r5, r3
 8011af4:	d873      	bhi.n	8011bde <__ieee754_rem_pio2f+0x18a>
 8011af6:	f000 f8dd 	bl	8011cb4 <fabsf>
 8011afa:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8011c9c <__ieee754_rem_pio2f+0x248>
 8011afe:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8011b02:	eee0 7a07 	vfma.f32	s15, s0, s14
 8011b06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011b0a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8011b0e:	ee17 0a90 	vmov	r0, s15
 8011b12:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8011c84 <__ieee754_rem_pio2f+0x230>
 8011b16:	eea7 0a67 	vfms.f32	s0, s14, s15
 8011b1a:	281f      	cmp	r0, #31
 8011b1c:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8011c90 <__ieee754_rem_pio2f+0x23c>
 8011b20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011b24:	eeb1 6a47 	vneg.f32	s12, s14
 8011b28:	ee70 6a67 	vsub.f32	s13, s0, s15
 8011b2c:	ee16 1a90 	vmov	r1, s13
 8011b30:	dc09      	bgt.n	8011b46 <__ieee754_rem_pio2f+0xf2>
 8011b32:	4a5b      	ldr	r2, [pc, #364]	@ (8011ca0 <__ieee754_rem_pio2f+0x24c>)
 8011b34:	1e47      	subs	r7, r0, #1
 8011b36:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8011b3a:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 8011b3e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8011b42:	4293      	cmp	r3, r2
 8011b44:	d107      	bne.n	8011b56 <__ieee754_rem_pio2f+0x102>
 8011b46:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 8011b4a:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 8011b4e:	2a08      	cmp	r2, #8
 8011b50:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8011b54:	dc14      	bgt.n	8011b80 <__ieee754_rem_pio2f+0x12c>
 8011b56:	6021      	str	r1, [r4, #0]
 8011b58:	ed94 7a00 	vldr	s14, [r4]
 8011b5c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8011b60:	2e00      	cmp	r6, #0
 8011b62:	ee30 0a67 	vsub.f32	s0, s0, s15
 8011b66:	ed84 0a01 	vstr	s0, [r4, #4]
 8011b6a:	daa6      	bge.n	8011aba <__ieee754_rem_pio2f+0x66>
 8011b6c:	eeb1 7a47 	vneg.f32	s14, s14
 8011b70:	eeb1 0a40 	vneg.f32	s0, s0
 8011b74:	ed84 7a00 	vstr	s14, [r4]
 8011b78:	ed84 0a01 	vstr	s0, [r4, #4]
 8011b7c:	4240      	negs	r0, r0
 8011b7e:	e79c      	b.n	8011aba <__ieee754_rem_pio2f+0x66>
 8011b80:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8011c8c <__ieee754_rem_pio2f+0x238>
 8011b84:	eef0 6a40 	vmov.f32	s13, s0
 8011b88:	eee6 6a25 	vfma.f32	s13, s12, s11
 8011b8c:	ee70 7a66 	vsub.f32	s15, s0, s13
 8011b90:	eee6 7a25 	vfma.f32	s15, s12, s11
 8011b94:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8011c94 <__ieee754_rem_pio2f+0x240>
 8011b98:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8011b9c:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8011ba0:	ee15 2a90 	vmov	r2, s11
 8011ba4:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8011ba8:	1a5b      	subs	r3, r3, r1
 8011baa:	2b19      	cmp	r3, #25
 8011bac:	dc04      	bgt.n	8011bb8 <__ieee754_rem_pio2f+0x164>
 8011bae:	edc4 5a00 	vstr	s11, [r4]
 8011bb2:	eeb0 0a66 	vmov.f32	s0, s13
 8011bb6:	e7cf      	b.n	8011b58 <__ieee754_rem_pio2f+0x104>
 8011bb8:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8011ca4 <__ieee754_rem_pio2f+0x250>
 8011bbc:	eeb0 0a66 	vmov.f32	s0, s13
 8011bc0:	eea6 0a25 	vfma.f32	s0, s12, s11
 8011bc4:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8011bc8:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8011ca8 <__ieee754_rem_pio2f+0x254>
 8011bcc:	eee6 7a25 	vfma.f32	s15, s12, s11
 8011bd0:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8011bd4:	ee30 7a67 	vsub.f32	s14, s0, s15
 8011bd8:	ed84 7a00 	vstr	s14, [r4]
 8011bdc:	e7bc      	b.n	8011b58 <__ieee754_rem_pio2f+0x104>
 8011bde:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8011be2:	d306      	bcc.n	8011bf2 <__ieee754_rem_pio2f+0x19e>
 8011be4:	ee70 7a40 	vsub.f32	s15, s0, s0
 8011be8:	edc0 7a01 	vstr	s15, [r0, #4]
 8011bec:	edc0 7a00 	vstr	s15, [r0]
 8011bf0:	e73e      	b.n	8011a70 <__ieee754_rem_pio2f+0x1c>
 8011bf2:	15ea      	asrs	r2, r5, #23
 8011bf4:	3a86      	subs	r2, #134	@ 0x86
 8011bf6:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8011bfa:	ee07 3a90 	vmov	s15, r3
 8011bfe:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8011c02:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8011cac <__ieee754_rem_pio2f+0x258>
 8011c06:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011c0a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011c0e:	ed8d 7a03 	vstr	s14, [sp, #12]
 8011c12:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011c16:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8011c1a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011c1e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011c22:	ed8d 7a04 	vstr	s14, [sp, #16]
 8011c26:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011c2a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8011c2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c32:	edcd 7a05 	vstr	s15, [sp, #20]
 8011c36:	d11e      	bne.n	8011c76 <__ieee754_rem_pio2f+0x222>
 8011c38:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8011c3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c40:	bf0c      	ite	eq
 8011c42:	2301      	moveq	r3, #1
 8011c44:	2302      	movne	r3, #2
 8011c46:	491a      	ldr	r1, [pc, #104]	@ (8011cb0 <__ieee754_rem_pio2f+0x25c>)
 8011c48:	9101      	str	r1, [sp, #4]
 8011c4a:	2102      	movs	r1, #2
 8011c4c:	9100      	str	r1, [sp, #0]
 8011c4e:	a803      	add	r0, sp, #12
 8011c50:	4621      	mov	r1, r4
 8011c52:	f000 fc69 	bl	8012528 <__kernel_rem_pio2f>
 8011c56:	2e00      	cmp	r6, #0
 8011c58:	f6bf af2f 	bge.w	8011aba <__ieee754_rem_pio2f+0x66>
 8011c5c:	edd4 7a00 	vldr	s15, [r4]
 8011c60:	eef1 7a67 	vneg.f32	s15, s15
 8011c64:	edc4 7a00 	vstr	s15, [r4]
 8011c68:	edd4 7a01 	vldr	s15, [r4, #4]
 8011c6c:	eef1 7a67 	vneg.f32	s15, s15
 8011c70:	edc4 7a01 	vstr	s15, [r4, #4]
 8011c74:	e782      	b.n	8011b7c <__ieee754_rem_pio2f+0x128>
 8011c76:	2303      	movs	r3, #3
 8011c78:	e7e5      	b.n	8011c46 <__ieee754_rem_pio2f+0x1f2>
 8011c7a:	bf00      	nop
 8011c7c:	3f490fd8 	.word	0x3f490fd8
 8011c80:	4016cbe3 	.word	0x4016cbe3
 8011c84:	3fc90f80 	.word	0x3fc90f80
 8011c88:	3fc90fd0 	.word	0x3fc90fd0
 8011c8c:	37354400 	.word	0x37354400
 8011c90:	37354443 	.word	0x37354443
 8011c94:	2e85a308 	.word	0x2e85a308
 8011c98:	43490f80 	.word	0x43490f80
 8011c9c:	3f22f984 	.word	0x3f22f984
 8011ca0:	08012dd0 	.word	0x08012dd0
 8011ca4:	2e85a300 	.word	0x2e85a300
 8011ca8:	248d3132 	.word	0x248d3132
 8011cac:	43800000 	.word	0x43800000
 8011cb0:	08012e50 	.word	0x08012e50

08011cb4 <fabsf>:
 8011cb4:	ee10 3a10 	vmov	r3, s0
 8011cb8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011cbc:	ee00 3a10 	vmov	s0, r3
 8011cc0:	4770      	bx	lr
 8011cc2:	0000      	movs	r0, r0
 8011cc4:	0000      	movs	r0, r0
	...

08011cc8 <scalbn>:
 8011cc8:	b570      	push	{r4, r5, r6, lr}
 8011cca:	ec55 4b10 	vmov	r4, r5, d0
 8011cce:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8011cd2:	4606      	mov	r6, r0
 8011cd4:	462b      	mov	r3, r5
 8011cd6:	b991      	cbnz	r1, 8011cfe <scalbn+0x36>
 8011cd8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8011cdc:	4323      	orrs	r3, r4
 8011cde:	d03b      	beq.n	8011d58 <scalbn+0x90>
 8011ce0:	4b33      	ldr	r3, [pc, #204]	@ (8011db0 <scalbn+0xe8>)
 8011ce2:	4620      	mov	r0, r4
 8011ce4:	4629      	mov	r1, r5
 8011ce6:	2200      	movs	r2, #0
 8011ce8:	f7ee fc52 	bl	8000590 <__aeabi_dmul>
 8011cec:	4b31      	ldr	r3, [pc, #196]	@ (8011db4 <scalbn+0xec>)
 8011cee:	429e      	cmp	r6, r3
 8011cf0:	4604      	mov	r4, r0
 8011cf2:	460d      	mov	r5, r1
 8011cf4:	da0f      	bge.n	8011d16 <scalbn+0x4e>
 8011cf6:	a326      	add	r3, pc, #152	@ (adr r3, 8011d90 <scalbn+0xc8>)
 8011cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cfc:	e01e      	b.n	8011d3c <scalbn+0x74>
 8011cfe:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8011d02:	4291      	cmp	r1, r2
 8011d04:	d10b      	bne.n	8011d1e <scalbn+0x56>
 8011d06:	4622      	mov	r2, r4
 8011d08:	4620      	mov	r0, r4
 8011d0a:	4629      	mov	r1, r5
 8011d0c:	f7ee fa8a 	bl	8000224 <__adddf3>
 8011d10:	4604      	mov	r4, r0
 8011d12:	460d      	mov	r5, r1
 8011d14:	e020      	b.n	8011d58 <scalbn+0x90>
 8011d16:	460b      	mov	r3, r1
 8011d18:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8011d1c:	3936      	subs	r1, #54	@ 0x36
 8011d1e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8011d22:	4296      	cmp	r6, r2
 8011d24:	dd0d      	ble.n	8011d42 <scalbn+0x7a>
 8011d26:	2d00      	cmp	r5, #0
 8011d28:	a11b      	add	r1, pc, #108	@ (adr r1, 8011d98 <scalbn+0xd0>)
 8011d2a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011d2e:	da02      	bge.n	8011d36 <scalbn+0x6e>
 8011d30:	a11b      	add	r1, pc, #108	@ (adr r1, 8011da0 <scalbn+0xd8>)
 8011d32:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011d36:	a318      	add	r3, pc, #96	@ (adr r3, 8011d98 <scalbn+0xd0>)
 8011d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d3c:	f7ee fc28 	bl	8000590 <__aeabi_dmul>
 8011d40:	e7e6      	b.n	8011d10 <scalbn+0x48>
 8011d42:	1872      	adds	r2, r6, r1
 8011d44:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8011d48:	428a      	cmp	r2, r1
 8011d4a:	dcec      	bgt.n	8011d26 <scalbn+0x5e>
 8011d4c:	2a00      	cmp	r2, #0
 8011d4e:	dd06      	ble.n	8011d5e <scalbn+0x96>
 8011d50:	f36f 531e 	bfc	r3, #20, #11
 8011d54:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8011d58:	ec45 4b10 	vmov	d0, r4, r5
 8011d5c:	bd70      	pop	{r4, r5, r6, pc}
 8011d5e:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8011d62:	da08      	bge.n	8011d76 <scalbn+0xae>
 8011d64:	2d00      	cmp	r5, #0
 8011d66:	a10a      	add	r1, pc, #40	@ (adr r1, 8011d90 <scalbn+0xc8>)
 8011d68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011d6c:	dac3      	bge.n	8011cf6 <scalbn+0x2e>
 8011d6e:	a10e      	add	r1, pc, #56	@ (adr r1, 8011da8 <scalbn+0xe0>)
 8011d70:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011d74:	e7bf      	b.n	8011cf6 <scalbn+0x2e>
 8011d76:	3236      	adds	r2, #54	@ 0x36
 8011d78:	f36f 531e 	bfc	r3, #20, #11
 8011d7c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8011d80:	4620      	mov	r0, r4
 8011d82:	4b0d      	ldr	r3, [pc, #52]	@ (8011db8 <scalbn+0xf0>)
 8011d84:	4629      	mov	r1, r5
 8011d86:	2200      	movs	r2, #0
 8011d88:	e7d8      	b.n	8011d3c <scalbn+0x74>
 8011d8a:	bf00      	nop
 8011d8c:	f3af 8000 	nop.w
 8011d90:	c2f8f359 	.word	0xc2f8f359
 8011d94:	01a56e1f 	.word	0x01a56e1f
 8011d98:	8800759c 	.word	0x8800759c
 8011d9c:	7e37e43c 	.word	0x7e37e43c
 8011da0:	8800759c 	.word	0x8800759c
 8011da4:	fe37e43c 	.word	0xfe37e43c
 8011da8:	c2f8f359 	.word	0xc2f8f359
 8011dac:	81a56e1f 	.word	0x81a56e1f
 8011db0:	43500000 	.word	0x43500000
 8011db4:	ffff3cb0 	.word	0xffff3cb0
 8011db8:	3c900000 	.word	0x3c900000

08011dbc <scalbnf>:
 8011dbc:	ee10 3a10 	vmov	r3, s0
 8011dc0:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8011dc4:	d02b      	beq.n	8011e1e <scalbnf+0x62>
 8011dc6:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8011dca:	d302      	bcc.n	8011dd2 <scalbnf+0x16>
 8011dcc:	ee30 0a00 	vadd.f32	s0, s0, s0
 8011dd0:	4770      	bx	lr
 8011dd2:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8011dd6:	d123      	bne.n	8011e20 <scalbnf+0x64>
 8011dd8:	4b24      	ldr	r3, [pc, #144]	@ (8011e6c <scalbnf+0xb0>)
 8011dda:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8011e70 <scalbnf+0xb4>
 8011dde:	4298      	cmp	r0, r3
 8011de0:	ee20 0a27 	vmul.f32	s0, s0, s15
 8011de4:	db17      	blt.n	8011e16 <scalbnf+0x5a>
 8011de6:	ee10 3a10 	vmov	r3, s0
 8011dea:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8011dee:	3a19      	subs	r2, #25
 8011df0:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8011df4:	4288      	cmp	r0, r1
 8011df6:	dd15      	ble.n	8011e24 <scalbnf+0x68>
 8011df8:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8011e74 <scalbnf+0xb8>
 8011dfc:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8011e78 <scalbnf+0xbc>
 8011e00:	ee10 3a10 	vmov	r3, s0
 8011e04:	eeb0 7a67 	vmov.f32	s14, s15
 8011e08:	2b00      	cmp	r3, #0
 8011e0a:	bfb8      	it	lt
 8011e0c:	eef0 7a66 	vmovlt.f32	s15, s13
 8011e10:	ee27 0a87 	vmul.f32	s0, s15, s14
 8011e14:	4770      	bx	lr
 8011e16:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8011e7c <scalbnf+0xc0>
 8011e1a:	ee27 0a80 	vmul.f32	s0, s15, s0
 8011e1e:	4770      	bx	lr
 8011e20:	0dd2      	lsrs	r2, r2, #23
 8011e22:	e7e5      	b.n	8011df0 <scalbnf+0x34>
 8011e24:	4410      	add	r0, r2
 8011e26:	28fe      	cmp	r0, #254	@ 0xfe
 8011e28:	dce6      	bgt.n	8011df8 <scalbnf+0x3c>
 8011e2a:	2800      	cmp	r0, #0
 8011e2c:	dd06      	ble.n	8011e3c <scalbnf+0x80>
 8011e2e:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8011e32:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8011e36:	ee00 3a10 	vmov	s0, r3
 8011e3a:	4770      	bx	lr
 8011e3c:	f110 0f16 	cmn.w	r0, #22
 8011e40:	da09      	bge.n	8011e56 <scalbnf+0x9a>
 8011e42:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8011e7c <scalbnf+0xc0>
 8011e46:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8011e80 <scalbnf+0xc4>
 8011e4a:	ee10 3a10 	vmov	r3, s0
 8011e4e:	eeb0 7a67 	vmov.f32	s14, s15
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	e7d9      	b.n	8011e0a <scalbnf+0x4e>
 8011e56:	3019      	adds	r0, #25
 8011e58:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8011e5c:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8011e60:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8011e84 <scalbnf+0xc8>
 8011e64:	ee07 3a90 	vmov	s15, r3
 8011e68:	e7d7      	b.n	8011e1a <scalbnf+0x5e>
 8011e6a:	bf00      	nop
 8011e6c:	ffff3cb0 	.word	0xffff3cb0
 8011e70:	4c000000 	.word	0x4c000000
 8011e74:	7149f2ca 	.word	0x7149f2ca
 8011e78:	f149f2ca 	.word	0xf149f2ca
 8011e7c:	0da24260 	.word	0x0da24260
 8011e80:	8da24260 	.word	0x8da24260
 8011e84:	33000000 	.word	0x33000000

08011e88 <__kernel_rem_pio2>:
 8011e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e8c:	ed2d 8b02 	vpush	{d8}
 8011e90:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8011e94:	f112 0f14 	cmn.w	r2, #20
 8011e98:	9306      	str	r3, [sp, #24]
 8011e9a:	9104      	str	r1, [sp, #16]
 8011e9c:	4bc2      	ldr	r3, [pc, #776]	@ (80121a8 <__kernel_rem_pio2+0x320>)
 8011e9e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8011ea0:	9008      	str	r0, [sp, #32]
 8011ea2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011ea6:	9300      	str	r3, [sp, #0]
 8011ea8:	9b06      	ldr	r3, [sp, #24]
 8011eaa:	f103 33ff 	add.w	r3, r3, #4294967295
 8011eae:	bfa8      	it	ge
 8011eb0:	1ed4      	subge	r4, r2, #3
 8011eb2:	9305      	str	r3, [sp, #20]
 8011eb4:	bfb2      	itee	lt
 8011eb6:	2400      	movlt	r4, #0
 8011eb8:	2318      	movge	r3, #24
 8011eba:	fb94 f4f3 	sdivge	r4, r4, r3
 8011ebe:	f06f 0317 	mvn.w	r3, #23
 8011ec2:	fb04 3303 	mla	r3, r4, r3, r3
 8011ec6:	eb03 0b02 	add.w	fp, r3, r2
 8011eca:	9b00      	ldr	r3, [sp, #0]
 8011ecc:	9a05      	ldr	r2, [sp, #20]
 8011ece:	ed9f 8bb2 	vldr	d8, [pc, #712]	@ 8012198 <__kernel_rem_pio2+0x310>
 8011ed2:	eb03 0802 	add.w	r8, r3, r2
 8011ed6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8011ed8:	1aa7      	subs	r7, r4, r2
 8011eda:	ae20      	add	r6, sp, #128	@ 0x80
 8011edc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8011ee0:	2500      	movs	r5, #0
 8011ee2:	4545      	cmp	r5, r8
 8011ee4:	dd12      	ble.n	8011f0c <__kernel_rem_pio2+0x84>
 8011ee6:	9b06      	ldr	r3, [sp, #24]
 8011ee8:	aa20      	add	r2, sp, #128	@ 0x80
 8011eea:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8011eee:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8011ef2:	2700      	movs	r7, #0
 8011ef4:	9b00      	ldr	r3, [sp, #0]
 8011ef6:	429f      	cmp	r7, r3
 8011ef8:	dc2e      	bgt.n	8011f58 <__kernel_rem_pio2+0xd0>
 8011efa:	ed9f 7ba7 	vldr	d7, [pc, #668]	@ 8012198 <__kernel_rem_pio2+0x310>
 8011efe:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011f02:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011f06:	46a8      	mov	r8, r5
 8011f08:	2600      	movs	r6, #0
 8011f0a:	e01b      	b.n	8011f44 <__kernel_rem_pio2+0xbc>
 8011f0c:	42ef      	cmn	r7, r5
 8011f0e:	d407      	bmi.n	8011f20 <__kernel_rem_pio2+0x98>
 8011f10:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8011f14:	f7ee fad2 	bl	80004bc <__aeabi_i2d>
 8011f18:	e8e6 0102 	strd	r0, r1, [r6], #8
 8011f1c:	3501      	adds	r5, #1
 8011f1e:	e7e0      	b.n	8011ee2 <__kernel_rem_pio2+0x5a>
 8011f20:	ec51 0b18 	vmov	r0, r1, d8
 8011f24:	e7f8      	b.n	8011f18 <__kernel_rem_pio2+0x90>
 8011f26:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 8011f2a:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8011f2e:	f7ee fb2f 	bl	8000590 <__aeabi_dmul>
 8011f32:	4602      	mov	r2, r0
 8011f34:	460b      	mov	r3, r1
 8011f36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011f3a:	f7ee f973 	bl	8000224 <__adddf3>
 8011f3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011f42:	3601      	adds	r6, #1
 8011f44:	9b05      	ldr	r3, [sp, #20]
 8011f46:	429e      	cmp	r6, r3
 8011f48:	dded      	ble.n	8011f26 <__kernel_rem_pio2+0x9e>
 8011f4a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011f4e:	3701      	adds	r7, #1
 8011f50:	ecaa 7b02 	vstmia	sl!, {d7}
 8011f54:	3508      	adds	r5, #8
 8011f56:	e7cd      	b.n	8011ef4 <__kernel_rem_pio2+0x6c>
 8011f58:	9b00      	ldr	r3, [sp, #0]
 8011f5a:	f8dd 8000 	ldr.w	r8, [sp]
 8011f5e:	aa0c      	add	r2, sp, #48	@ 0x30
 8011f60:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011f64:	930a      	str	r3, [sp, #40]	@ 0x28
 8011f66:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8011f68:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8011f6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8011f6e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8011f72:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011f74:	ab98      	add	r3, sp, #608	@ 0x260
 8011f76:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8011f7a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8011f7e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011f82:	ac0c      	add	r4, sp, #48	@ 0x30
 8011f84:	ab70      	add	r3, sp, #448	@ 0x1c0
 8011f86:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8011f8a:	46a1      	mov	r9, r4
 8011f8c:	46c2      	mov	sl, r8
 8011f8e:	f1ba 0f00 	cmp.w	sl, #0
 8011f92:	dc77      	bgt.n	8012084 <__kernel_rem_pio2+0x1fc>
 8011f94:	4658      	mov	r0, fp
 8011f96:	ed9d 0b02 	vldr	d0, [sp, #8]
 8011f9a:	f7ff fe95 	bl	8011cc8 <scalbn>
 8011f9e:	ec57 6b10 	vmov	r6, r7, d0
 8011fa2:	2200      	movs	r2, #0
 8011fa4:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8011fa8:	4630      	mov	r0, r6
 8011faa:	4639      	mov	r1, r7
 8011fac:	f7ee faf0 	bl	8000590 <__aeabi_dmul>
 8011fb0:	ec41 0b10 	vmov	d0, r0, r1
 8011fb4:	f000 fd20 	bl	80129f8 <floor>
 8011fb8:	4b7c      	ldr	r3, [pc, #496]	@ (80121ac <__kernel_rem_pio2+0x324>)
 8011fba:	ec51 0b10 	vmov	r0, r1, d0
 8011fbe:	2200      	movs	r2, #0
 8011fc0:	f7ee fae6 	bl	8000590 <__aeabi_dmul>
 8011fc4:	4602      	mov	r2, r0
 8011fc6:	460b      	mov	r3, r1
 8011fc8:	4630      	mov	r0, r6
 8011fca:	4639      	mov	r1, r7
 8011fcc:	f7ee f928 	bl	8000220 <__aeabi_dsub>
 8011fd0:	460f      	mov	r7, r1
 8011fd2:	4606      	mov	r6, r0
 8011fd4:	f7ee fd76 	bl	8000ac4 <__aeabi_d2iz>
 8011fd8:	9002      	str	r0, [sp, #8]
 8011fda:	f7ee fa6f 	bl	80004bc <__aeabi_i2d>
 8011fde:	4602      	mov	r2, r0
 8011fe0:	460b      	mov	r3, r1
 8011fe2:	4630      	mov	r0, r6
 8011fe4:	4639      	mov	r1, r7
 8011fe6:	f7ee f91b 	bl	8000220 <__aeabi_dsub>
 8011fea:	f1bb 0f00 	cmp.w	fp, #0
 8011fee:	4606      	mov	r6, r0
 8011ff0:	460f      	mov	r7, r1
 8011ff2:	dd6c      	ble.n	80120ce <__kernel_rem_pio2+0x246>
 8011ff4:	f108 31ff 	add.w	r1, r8, #4294967295
 8011ff8:	ab0c      	add	r3, sp, #48	@ 0x30
 8011ffa:	9d02      	ldr	r5, [sp, #8]
 8011ffc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012000:	f1cb 0018 	rsb	r0, fp, #24
 8012004:	fa43 f200 	asr.w	r2, r3, r0
 8012008:	4415      	add	r5, r2
 801200a:	4082      	lsls	r2, r0
 801200c:	1a9b      	subs	r3, r3, r2
 801200e:	aa0c      	add	r2, sp, #48	@ 0x30
 8012010:	9502      	str	r5, [sp, #8]
 8012012:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8012016:	f1cb 0217 	rsb	r2, fp, #23
 801201a:	fa43 f902 	asr.w	r9, r3, r2
 801201e:	f1b9 0f00 	cmp.w	r9, #0
 8012022:	dd64      	ble.n	80120ee <__kernel_rem_pio2+0x266>
 8012024:	9b02      	ldr	r3, [sp, #8]
 8012026:	2200      	movs	r2, #0
 8012028:	3301      	adds	r3, #1
 801202a:	9302      	str	r3, [sp, #8]
 801202c:	4615      	mov	r5, r2
 801202e:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8012032:	4590      	cmp	r8, r2
 8012034:	f300 80a1 	bgt.w	801217a <__kernel_rem_pio2+0x2f2>
 8012038:	f1bb 0f00 	cmp.w	fp, #0
 801203c:	dd07      	ble.n	801204e <__kernel_rem_pio2+0x1c6>
 801203e:	f1bb 0f01 	cmp.w	fp, #1
 8012042:	f000 80c1 	beq.w	80121c8 <__kernel_rem_pio2+0x340>
 8012046:	f1bb 0f02 	cmp.w	fp, #2
 801204a:	f000 80c8 	beq.w	80121de <__kernel_rem_pio2+0x356>
 801204e:	f1b9 0f02 	cmp.w	r9, #2
 8012052:	d14c      	bne.n	80120ee <__kernel_rem_pio2+0x266>
 8012054:	4632      	mov	r2, r6
 8012056:	463b      	mov	r3, r7
 8012058:	4955      	ldr	r1, [pc, #340]	@ (80121b0 <__kernel_rem_pio2+0x328>)
 801205a:	2000      	movs	r0, #0
 801205c:	f7ee f8e0 	bl	8000220 <__aeabi_dsub>
 8012060:	4606      	mov	r6, r0
 8012062:	460f      	mov	r7, r1
 8012064:	2d00      	cmp	r5, #0
 8012066:	d042      	beq.n	80120ee <__kernel_rem_pio2+0x266>
 8012068:	4658      	mov	r0, fp
 801206a:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 80121a0 <__kernel_rem_pio2+0x318>
 801206e:	f7ff fe2b 	bl	8011cc8 <scalbn>
 8012072:	4630      	mov	r0, r6
 8012074:	4639      	mov	r1, r7
 8012076:	ec53 2b10 	vmov	r2, r3, d0
 801207a:	f7ee f8d1 	bl	8000220 <__aeabi_dsub>
 801207e:	4606      	mov	r6, r0
 8012080:	460f      	mov	r7, r1
 8012082:	e034      	b.n	80120ee <__kernel_rem_pio2+0x266>
 8012084:	4b4b      	ldr	r3, [pc, #300]	@ (80121b4 <__kernel_rem_pio2+0x32c>)
 8012086:	2200      	movs	r2, #0
 8012088:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801208c:	f7ee fa80 	bl	8000590 <__aeabi_dmul>
 8012090:	f7ee fd18 	bl	8000ac4 <__aeabi_d2iz>
 8012094:	f7ee fa12 	bl	80004bc <__aeabi_i2d>
 8012098:	4b47      	ldr	r3, [pc, #284]	@ (80121b8 <__kernel_rem_pio2+0x330>)
 801209a:	2200      	movs	r2, #0
 801209c:	4606      	mov	r6, r0
 801209e:	460f      	mov	r7, r1
 80120a0:	f7ee fa76 	bl	8000590 <__aeabi_dmul>
 80120a4:	4602      	mov	r2, r0
 80120a6:	460b      	mov	r3, r1
 80120a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80120ac:	f7ee f8b8 	bl	8000220 <__aeabi_dsub>
 80120b0:	f7ee fd08 	bl	8000ac4 <__aeabi_d2iz>
 80120b4:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80120b8:	f849 0b04 	str.w	r0, [r9], #4
 80120bc:	4639      	mov	r1, r7
 80120be:	4630      	mov	r0, r6
 80120c0:	f7ee f8b0 	bl	8000224 <__adddf3>
 80120c4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80120c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80120cc:	e75f      	b.n	8011f8e <__kernel_rem_pio2+0x106>
 80120ce:	d107      	bne.n	80120e0 <__kernel_rem_pio2+0x258>
 80120d0:	f108 33ff 	add.w	r3, r8, #4294967295
 80120d4:	aa0c      	add	r2, sp, #48	@ 0x30
 80120d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80120da:	ea4f 59e3 	mov.w	r9, r3, asr #23
 80120de:	e79e      	b.n	801201e <__kernel_rem_pio2+0x196>
 80120e0:	4b36      	ldr	r3, [pc, #216]	@ (80121bc <__kernel_rem_pio2+0x334>)
 80120e2:	2200      	movs	r2, #0
 80120e4:	f7ee fcda 	bl	8000a9c <__aeabi_dcmpge>
 80120e8:	2800      	cmp	r0, #0
 80120ea:	d143      	bne.n	8012174 <__kernel_rem_pio2+0x2ec>
 80120ec:	4681      	mov	r9, r0
 80120ee:	2200      	movs	r2, #0
 80120f0:	2300      	movs	r3, #0
 80120f2:	4630      	mov	r0, r6
 80120f4:	4639      	mov	r1, r7
 80120f6:	f7ee fcb3 	bl	8000a60 <__aeabi_dcmpeq>
 80120fa:	2800      	cmp	r0, #0
 80120fc:	f000 80c1 	beq.w	8012282 <__kernel_rem_pio2+0x3fa>
 8012100:	f108 33ff 	add.w	r3, r8, #4294967295
 8012104:	2200      	movs	r2, #0
 8012106:	9900      	ldr	r1, [sp, #0]
 8012108:	428b      	cmp	r3, r1
 801210a:	da70      	bge.n	80121ee <__kernel_rem_pio2+0x366>
 801210c:	2a00      	cmp	r2, #0
 801210e:	f000 808b 	beq.w	8012228 <__kernel_rem_pio2+0x3a0>
 8012112:	f108 38ff 	add.w	r8, r8, #4294967295
 8012116:	ab0c      	add	r3, sp, #48	@ 0x30
 8012118:	f1ab 0b18 	sub.w	fp, fp, #24
 801211c:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8012120:	2b00      	cmp	r3, #0
 8012122:	d0f6      	beq.n	8012112 <__kernel_rem_pio2+0x28a>
 8012124:	4658      	mov	r0, fp
 8012126:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 80121a0 <__kernel_rem_pio2+0x318>
 801212a:	f7ff fdcd 	bl	8011cc8 <scalbn>
 801212e:	f108 0301 	add.w	r3, r8, #1
 8012132:	00da      	lsls	r2, r3, #3
 8012134:	9205      	str	r2, [sp, #20]
 8012136:	ec55 4b10 	vmov	r4, r5, d0
 801213a:	aa70      	add	r2, sp, #448	@ 0x1c0
 801213c:	f8df b074 	ldr.w	fp, [pc, #116]	@ 80121b4 <__kernel_rem_pio2+0x32c>
 8012140:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8012144:	4646      	mov	r6, r8
 8012146:	f04f 0a00 	mov.w	sl, #0
 801214a:	2e00      	cmp	r6, #0
 801214c:	f280 80d1 	bge.w	80122f2 <__kernel_rem_pio2+0x46a>
 8012150:	4644      	mov	r4, r8
 8012152:	2c00      	cmp	r4, #0
 8012154:	f2c0 80ff 	blt.w	8012356 <__kernel_rem_pio2+0x4ce>
 8012158:	4b19      	ldr	r3, [pc, #100]	@ (80121c0 <__kernel_rem_pio2+0x338>)
 801215a:	461f      	mov	r7, r3
 801215c:	ab70      	add	r3, sp, #448	@ 0x1c0
 801215e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012162:	9306      	str	r3, [sp, #24]
 8012164:	f04f 0a00 	mov.w	sl, #0
 8012168:	f04f 0b00 	mov.w	fp, #0
 801216c:	2600      	movs	r6, #0
 801216e:	eba8 0504 	sub.w	r5, r8, r4
 8012172:	e0e4      	b.n	801233e <__kernel_rem_pio2+0x4b6>
 8012174:	f04f 0902 	mov.w	r9, #2
 8012178:	e754      	b.n	8012024 <__kernel_rem_pio2+0x19c>
 801217a:	f854 3b04 	ldr.w	r3, [r4], #4
 801217e:	bb0d      	cbnz	r5, 80121c4 <__kernel_rem_pio2+0x33c>
 8012180:	b123      	cbz	r3, 801218c <__kernel_rem_pio2+0x304>
 8012182:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8012186:	f844 3c04 	str.w	r3, [r4, #-4]
 801218a:	2301      	movs	r3, #1
 801218c:	3201      	adds	r2, #1
 801218e:	461d      	mov	r5, r3
 8012190:	e74f      	b.n	8012032 <__kernel_rem_pio2+0x1aa>
 8012192:	bf00      	nop
 8012194:	f3af 8000 	nop.w
	...
 80121a4:	3ff00000 	.word	0x3ff00000
 80121a8:	080131a8 	.word	0x080131a8
 80121ac:	40200000 	.word	0x40200000
 80121b0:	3ff00000 	.word	0x3ff00000
 80121b4:	3e700000 	.word	0x3e700000
 80121b8:	41700000 	.word	0x41700000
 80121bc:	3fe00000 	.word	0x3fe00000
 80121c0:	08013168 	.word	0x08013168
 80121c4:	1acb      	subs	r3, r1, r3
 80121c6:	e7de      	b.n	8012186 <__kernel_rem_pio2+0x2fe>
 80121c8:	f108 32ff 	add.w	r2, r8, #4294967295
 80121cc:	ab0c      	add	r3, sp, #48	@ 0x30
 80121ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80121d2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80121d6:	a90c      	add	r1, sp, #48	@ 0x30
 80121d8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80121dc:	e737      	b.n	801204e <__kernel_rem_pio2+0x1c6>
 80121de:	f108 32ff 	add.w	r2, r8, #4294967295
 80121e2:	ab0c      	add	r3, sp, #48	@ 0x30
 80121e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80121e8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80121ec:	e7f3      	b.n	80121d6 <__kernel_rem_pio2+0x34e>
 80121ee:	a90c      	add	r1, sp, #48	@ 0x30
 80121f0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80121f4:	3b01      	subs	r3, #1
 80121f6:	430a      	orrs	r2, r1
 80121f8:	e785      	b.n	8012106 <__kernel_rem_pio2+0x27e>
 80121fa:	3401      	adds	r4, #1
 80121fc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8012200:	2a00      	cmp	r2, #0
 8012202:	d0fa      	beq.n	80121fa <__kernel_rem_pio2+0x372>
 8012204:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012206:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 801220a:	eb0d 0503 	add.w	r5, sp, r3
 801220e:	9b06      	ldr	r3, [sp, #24]
 8012210:	aa20      	add	r2, sp, #128	@ 0x80
 8012212:	4443      	add	r3, r8
 8012214:	f108 0701 	add.w	r7, r8, #1
 8012218:	3d98      	subs	r5, #152	@ 0x98
 801221a:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 801221e:	4444      	add	r4, r8
 8012220:	42bc      	cmp	r4, r7
 8012222:	da04      	bge.n	801222e <__kernel_rem_pio2+0x3a6>
 8012224:	46a0      	mov	r8, r4
 8012226:	e6a2      	b.n	8011f6e <__kernel_rem_pio2+0xe6>
 8012228:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801222a:	2401      	movs	r4, #1
 801222c:	e7e6      	b.n	80121fc <__kernel_rem_pio2+0x374>
 801222e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012230:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8012234:	f7ee f942 	bl	80004bc <__aeabi_i2d>
 8012238:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 80124f8 <__kernel_rem_pio2+0x670>
 801223c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8012240:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012244:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012248:	46b2      	mov	sl, r6
 801224a:	f04f 0800 	mov.w	r8, #0
 801224e:	9b05      	ldr	r3, [sp, #20]
 8012250:	4598      	cmp	r8, r3
 8012252:	dd05      	ble.n	8012260 <__kernel_rem_pio2+0x3d8>
 8012254:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012258:	3701      	adds	r7, #1
 801225a:	eca5 7b02 	vstmia	r5!, {d7}
 801225e:	e7df      	b.n	8012220 <__kernel_rem_pio2+0x398>
 8012260:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8012264:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8012268:	f7ee f992 	bl	8000590 <__aeabi_dmul>
 801226c:	4602      	mov	r2, r0
 801226e:	460b      	mov	r3, r1
 8012270:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012274:	f7ed ffd6 	bl	8000224 <__adddf3>
 8012278:	f108 0801 	add.w	r8, r8, #1
 801227c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012280:	e7e5      	b.n	801224e <__kernel_rem_pio2+0x3c6>
 8012282:	f1cb 0000 	rsb	r0, fp, #0
 8012286:	ec47 6b10 	vmov	d0, r6, r7
 801228a:	f7ff fd1d 	bl	8011cc8 <scalbn>
 801228e:	ec55 4b10 	vmov	r4, r5, d0
 8012292:	4b9b      	ldr	r3, [pc, #620]	@ (8012500 <__kernel_rem_pio2+0x678>)
 8012294:	2200      	movs	r2, #0
 8012296:	4620      	mov	r0, r4
 8012298:	4629      	mov	r1, r5
 801229a:	f7ee fbff 	bl	8000a9c <__aeabi_dcmpge>
 801229e:	b300      	cbz	r0, 80122e2 <__kernel_rem_pio2+0x45a>
 80122a0:	4b98      	ldr	r3, [pc, #608]	@ (8012504 <__kernel_rem_pio2+0x67c>)
 80122a2:	2200      	movs	r2, #0
 80122a4:	4620      	mov	r0, r4
 80122a6:	4629      	mov	r1, r5
 80122a8:	f7ee f972 	bl	8000590 <__aeabi_dmul>
 80122ac:	f7ee fc0a 	bl	8000ac4 <__aeabi_d2iz>
 80122b0:	4606      	mov	r6, r0
 80122b2:	f7ee f903 	bl	80004bc <__aeabi_i2d>
 80122b6:	4b92      	ldr	r3, [pc, #584]	@ (8012500 <__kernel_rem_pio2+0x678>)
 80122b8:	2200      	movs	r2, #0
 80122ba:	f7ee f969 	bl	8000590 <__aeabi_dmul>
 80122be:	460b      	mov	r3, r1
 80122c0:	4602      	mov	r2, r0
 80122c2:	4629      	mov	r1, r5
 80122c4:	4620      	mov	r0, r4
 80122c6:	f7ed ffab 	bl	8000220 <__aeabi_dsub>
 80122ca:	f7ee fbfb 	bl	8000ac4 <__aeabi_d2iz>
 80122ce:	ab0c      	add	r3, sp, #48	@ 0x30
 80122d0:	f10b 0b18 	add.w	fp, fp, #24
 80122d4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80122d8:	f108 0801 	add.w	r8, r8, #1
 80122dc:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 80122e0:	e720      	b.n	8012124 <__kernel_rem_pio2+0x29c>
 80122e2:	4620      	mov	r0, r4
 80122e4:	4629      	mov	r1, r5
 80122e6:	f7ee fbed 	bl	8000ac4 <__aeabi_d2iz>
 80122ea:	ab0c      	add	r3, sp, #48	@ 0x30
 80122ec:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80122f0:	e718      	b.n	8012124 <__kernel_rem_pio2+0x29c>
 80122f2:	ab0c      	add	r3, sp, #48	@ 0x30
 80122f4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80122f8:	f7ee f8e0 	bl	80004bc <__aeabi_i2d>
 80122fc:	4622      	mov	r2, r4
 80122fe:	462b      	mov	r3, r5
 8012300:	f7ee f946 	bl	8000590 <__aeabi_dmul>
 8012304:	4652      	mov	r2, sl
 8012306:	e967 0102 	strd	r0, r1, [r7, #-8]!
 801230a:	465b      	mov	r3, fp
 801230c:	4620      	mov	r0, r4
 801230e:	4629      	mov	r1, r5
 8012310:	f7ee f93e 	bl	8000590 <__aeabi_dmul>
 8012314:	3e01      	subs	r6, #1
 8012316:	4604      	mov	r4, r0
 8012318:	460d      	mov	r5, r1
 801231a:	e716      	b.n	801214a <__kernel_rem_pio2+0x2c2>
 801231c:	9906      	ldr	r1, [sp, #24]
 801231e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8012322:	9106      	str	r1, [sp, #24]
 8012324:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8012328:	f7ee f932 	bl	8000590 <__aeabi_dmul>
 801232c:	4602      	mov	r2, r0
 801232e:	460b      	mov	r3, r1
 8012330:	4650      	mov	r0, sl
 8012332:	4659      	mov	r1, fp
 8012334:	f7ed ff76 	bl	8000224 <__adddf3>
 8012338:	3601      	adds	r6, #1
 801233a:	4682      	mov	sl, r0
 801233c:	468b      	mov	fp, r1
 801233e:	9b00      	ldr	r3, [sp, #0]
 8012340:	429e      	cmp	r6, r3
 8012342:	dc01      	bgt.n	8012348 <__kernel_rem_pio2+0x4c0>
 8012344:	42ae      	cmp	r6, r5
 8012346:	dde9      	ble.n	801231c <__kernel_rem_pio2+0x494>
 8012348:	ab48      	add	r3, sp, #288	@ 0x120
 801234a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 801234e:	e9c5 ab00 	strd	sl, fp, [r5]
 8012352:	3c01      	subs	r4, #1
 8012354:	e6fd      	b.n	8012152 <__kernel_rem_pio2+0x2ca>
 8012356:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8012358:	2b02      	cmp	r3, #2
 801235a:	dc0b      	bgt.n	8012374 <__kernel_rem_pio2+0x4ec>
 801235c:	2b00      	cmp	r3, #0
 801235e:	dc35      	bgt.n	80123cc <__kernel_rem_pio2+0x544>
 8012360:	d059      	beq.n	8012416 <__kernel_rem_pio2+0x58e>
 8012362:	9b02      	ldr	r3, [sp, #8]
 8012364:	f003 0007 	and.w	r0, r3, #7
 8012368:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 801236c:	ecbd 8b02 	vpop	{d8}
 8012370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012374:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8012376:	2b03      	cmp	r3, #3
 8012378:	d1f3      	bne.n	8012362 <__kernel_rem_pio2+0x4da>
 801237a:	9b05      	ldr	r3, [sp, #20]
 801237c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8012380:	eb0d 0403 	add.w	r4, sp, r3
 8012384:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8012388:	4625      	mov	r5, r4
 801238a:	46c2      	mov	sl, r8
 801238c:	f1ba 0f00 	cmp.w	sl, #0
 8012390:	dc69      	bgt.n	8012466 <__kernel_rem_pio2+0x5de>
 8012392:	4645      	mov	r5, r8
 8012394:	2d01      	cmp	r5, #1
 8012396:	f300 8087 	bgt.w	80124a8 <__kernel_rem_pio2+0x620>
 801239a:	9c05      	ldr	r4, [sp, #20]
 801239c:	ab48      	add	r3, sp, #288	@ 0x120
 801239e:	441c      	add	r4, r3
 80123a0:	2000      	movs	r0, #0
 80123a2:	2100      	movs	r1, #0
 80123a4:	f1b8 0f01 	cmp.w	r8, #1
 80123a8:	f300 809c 	bgt.w	80124e4 <__kernel_rem_pio2+0x65c>
 80123ac:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 80123b0:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 80123b4:	f1b9 0f00 	cmp.w	r9, #0
 80123b8:	f040 80a6 	bne.w	8012508 <__kernel_rem_pio2+0x680>
 80123bc:	9b04      	ldr	r3, [sp, #16]
 80123be:	e9c3 5600 	strd	r5, r6, [r3]
 80123c2:	e9c3 7802 	strd	r7, r8, [r3, #8]
 80123c6:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80123ca:	e7ca      	b.n	8012362 <__kernel_rem_pio2+0x4da>
 80123cc:	9d05      	ldr	r5, [sp, #20]
 80123ce:	ab48      	add	r3, sp, #288	@ 0x120
 80123d0:	441d      	add	r5, r3
 80123d2:	4644      	mov	r4, r8
 80123d4:	2000      	movs	r0, #0
 80123d6:	2100      	movs	r1, #0
 80123d8:	2c00      	cmp	r4, #0
 80123da:	da35      	bge.n	8012448 <__kernel_rem_pio2+0x5c0>
 80123dc:	f1b9 0f00 	cmp.w	r9, #0
 80123e0:	d038      	beq.n	8012454 <__kernel_rem_pio2+0x5cc>
 80123e2:	4602      	mov	r2, r0
 80123e4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80123e8:	9c04      	ldr	r4, [sp, #16]
 80123ea:	e9c4 2300 	strd	r2, r3, [r4]
 80123ee:	4602      	mov	r2, r0
 80123f0:	460b      	mov	r3, r1
 80123f2:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 80123f6:	f7ed ff13 	bl	8000220 <__aeabi_dsub>
 80123fa:	ad4a      	add	r5, sp, #296	@ 0x128
 80123fc:	2401      	movs	r4, #1
 80123fe:	45a0      	cmp	r8, r4
 8012400:	da2b      	bge.n	801245a <__kernel_rem_pio2+0x5d2>
 8012402:	f1b9 0f00 	cmp.w	r9, #0
 8012406:	d002      	beq.n	801240e <__kernel_rem_pio2+0x586>
 8012408:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801240c:	4619      	mov	r1, r3
 801240e:	9b04      	ldr	r3, [sp, #16]
 8012410:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8012414:	e7a5      	b.n	8012362 <__kernel_rem_pio2+0x4da>
 8012416:	9c05      	ldr	r4, [sp, #20]
 8012418:	ab48      	add	r3, sp, #288	@ 0x120
 801241a:	441c      	add	r4, r3
 801241c:	2000      	movs	r0, #0
 801241e:	2100      	movs	r1, #0
 8012420:	f1b8 0f00 	cmp.w	r8, #0
 8012424:	da09      	bge.n	801243a <__kernel_rem_pio2+0x5b2>
 8012426:	f1b9 0f00 	cmp.w	r9, #0
 801242a:	d002      	beq.n	8012432 <__kernel_rem_pio2+0x5aa>
 801242c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8012430:	4619      	mov	r1, r3
 8012432:	9b04      	ldr	r3, [sp, #16]
 8012434:	e9c3 0100 	strd	r0, r1, [r3]
 8012438:	e793      	b.n	8012362 <__kernel_rem_pio2+0x4da>
 801243a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801243e:	f7ed fef1 	bl	8000224 <__adddf3>
 8012442:	f108 38ff 	add.w	r8, r8, #4294967295
 8012446:	e7eb      	b.n	8012420 <__kernel_rem_pio2+0x598>
 8012448:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 801244c:	f7ed feea 	bl	8000224 <__adddf3>
 8012450:	3c01      	subs	r4, #1
 8012452:	e7c1      	b.n	80123d8 <__kernel_rem_pio2+0x550>
 8012454:	4602      	mov	r2, r0
 8012456:	460b      	mov	r3, r1
 8012458:	e7c6      	b.n	80123e8 <__kernel_rem_pio2+0x560>
 801245a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 801245e:	f7ed fee1 	bl	8000224 <__adddf3>
 8012462:	3401      	adds	r4, #1
 8012464:	e7cb      	b.n	80123fe <__kernel_rem_pio2+0x576>
 8012466:	ed35 7b02 	vldmdb	r5!, {d7}
 801246a:	ed8d 7b00 	vstr	d7, [sp]
 801246e:	ed95 7b02 	vldr	d7, [r5, #8]
 8012472:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012476:	ec53 2b17 	vmov	r2, r3, d7
 801247a:	ed8d 7b06 	vstr	d7, [sp, #24]
 801247e:	f7ed fed1 	bl	8000224 <__adddf3>
 8012482:	4602      	mov	r2, r0
 8012484:	460b      	mov	r3, r1
 8012486:	4606      	mov	r6, r0
 8012488:	460f      	mov	r7, r1
 801248a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801248e:	f7ed fec7 	bl	8000220 <__aeabi_dsub>
 8012492:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012496:	f7ed fec5 	bl	8000224 <__adddf3>
 801249a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801249e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 80124a2:	e9c5 6700 	strd	r6, r7, [r5]
 80124a6:	e771      	b.n	801238c <__kernel_rem_pio2+0x504>
 80124a8:	ed34 7b02 	vldmdb	r4!, {d7}
 80124ac:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 80124b0:	ec51 0b17 	vmov	r0, r1, d7
 80124b4:	4652      	mov	r2, sl
 80124b6:	465b      	mov	r3, fp
 80124b8:	ed8d 7b00 	vstr	d7, [sp]
 80124bc:	f7ed feb2 	bl	8000224 <__adddf3>
 80124c0:	4602      	mov	r2, r0
 80124c2:	460b      	mov	r3, r1
 80124c4:	4606      	mov	r6, r0
 80124c6:	460f      	mov	r7, r1
 80124c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80124cc:	f7ed fea8 	bl	8000220 <__aeabi_dsub>
 80124d0:	4652      	mov	r2, sl
 80124d2:	465b      	mov	r3, fp
 80124d4:	f7ed fea6 	bl	8000224 <__adddf3>
 80124d8:	3d01      	subs	r5, #1
 80124da:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80124de:	e9c4 6700 	strd	r6, r7, [r4]
 80124e2:	e757      	b.n	8012394 <__kernel_rem_pio2+0x50c>
 80124e4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80124e8:	f7ed fe9c 	bl	8000224 <__adddf3>
 80124ec:	f108 38ff 	add.w	r8, r8, #4294967295
 80124f0:	e758      	b.n	80123a4 <__kernel_rem_pio2+0x51c>
 80124f2:	bf00      	nop
 80124f4:	f3af 8000 	nop.w
	...
 8012500:	41700000 	.word	0x41700000
 8012504:	3e700000 	.word	0x3e700000
 8012508:	9b04      	ldr	r3, [sp, #16]
 801250a:	9a04      	ldr	r2, [sp, #16]
 801250c:	601d      	str	r5, [r3, #0]
 801250e:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 8012512:	605c      	str	r4, [r3, #4]
 8012514:	609f      	str	r7, [r3, #8]
 8012516:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 801251a:	60d3      	str	r3, [r2, #12]
 801251c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8012520:	6110      	str	r0, [r2, #16]
 8012522:	6153      	str	r3, [r2, #20]
 8012524:	e71d      	b.n	8012362 <__kernel_rem_pio2+0x4da>
 8012526:	bf00      	nop

08012528 <__kernel_rem_pio2f>:
 8012528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801252c:	ed2d 8b04 	vpush	{d8-d9}
 8012530:	b0d9      	sub	sp, #356	@ 0x164
 8012532:	4690      	mov	r8, r2
 8012534:	9001      	str	r0, [sp, #4]
 8012536:	4ab6      	ldr	r2, [pc, #728]	@ (8012810 <__kernel_rem_pio2f+0x2e8>)
 8012538:	9866      	ldr	r0, [sp, #408]	@ 0x198
 801253a:	f118 0f04 	cmn.w	r8, #4
 801253e:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 8012542:	460f      	mov	r7, r1
 8012544:	f103 3bff 	add.w	fp, r3, #4294967295
 8012548:	db26      	blt.n	8012598 <__kernel_rem_pio2f+0x70>
 801254a:	f1b8 0203 	subs.w	r2, r8, #3
 801254e:	bf48      	it	mi
 8012550:	f108 0204 	addmi.w	r2, r8, #4
 8012554:	10d2      	asrs	r2, r2, #3
 8012556:	1c55      	adds	r5, r2, #1
 8012558:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 801255a:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 8012820 <__kernel_rem_pio2f+0x2f8>
 801255e:	00e8      	lsls	r0, r5, #3
 8012560:	eba2 060b 	sub.w	r6, r2, fp
 8012564:	9002      	str	r0, [sp, #8]
 8012566:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 801256a:	eb0a 0c0b 	add.w	ip, sl, fp
 801256e:	ac1c      	add	r4, sp, #112	@ 0x70
 8012570:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8012574:	2000      	movs	r0, #0
 8012576:	4560      	cmp	r0, ip
 8012578:	dd10      	ble.n	801259c <__kernel_rem_pio2f+0x74>
 801257a:	a91c      	add	r1, sp, #112	@ 0x70
 801257c:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8012580:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8012584:	2600      	movs	r6, #0
 8012586:	4556      	cmp	r6, sl
 8012588:	dc24      	bgt.n	80125d4 <__kernel_rem_pio2f+0xac>
 801258a:	f8dd e004 	ldr.w	lr, [sp, #4]
 801258e:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 8012820 <__kernel_rem_pio2f+0x2f8>
 8012592:	4684      	mov	ip, r0
 8012594:	2400      	movs	r4, #0
 8012596:	e016      	b.n	80125c6 <__kernel_rem_pio2f+0x9e>
 8012598:	2200      	movs	r2, #0
 801259a:	e7dc      	b.n	8012556 <__kernel_rem_pio2f+0x2e>
 801259c:	42c6      	cmn	r6, r0
 801259e:	bf5d      	ittte	pl
 80125a0:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 80125a4:	ee07 1a90 	vmovpl	s15, r1
 80125a8:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80125ac:	eef0 7a47 	vmovmi.f32	s15, s14
 80125b0:	ece4 7a01 	vstmia	r4!, {s15}
 80125b4:	3001      	adds	r0, #1
 80125b6:	e7de      	b.n	8012576 <__kernel_rem_pio2f+0x4e>
 80125b8:	ecfe 6a01 	vldmia	lr!, {s13}
 80125bc:	ed3c 7a01 	vldmdb	ip!, {s14}
 80125c0:	eee6 7a87 	vfma.f32	s15, s13, s14
 80125c4:	3401      	adds	r4, #1
 80125c6:	455c      	cmp	r4, fp
 80125c8:	ddf6      	ble.n	80125b8 <__kernel_rem_pio2f+0x90>
 80125ca:	ece9 7a01 	vstmia	r9!, {s15}
 80125ce:	3601      	adds	r6, #1
 80125d0:	3004      	adds	r0, #4
 80125d2:	e7d8      	b.n	8012586 <__kernel_rem_pio2f+0x5e>
 80125d4:	a908      	add	r1, sp, #32
 80125d6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80125da:	9104      	str	r1, [sp, #16]
 80125dc:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 80125de:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 801281c <__kernel_rem_pio2f+0x2f4>
 80125e2:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 8012818 <__kernel_rem_pio2f+0x2f0>
 80125e6:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80125ea:	9203      	str	r2, [sp, #12]
 80125ec:	4654      	mov	r4, sl
 80125ee:	00a2      	lsls	r2, r4, #2
 80125f0:	9205      	str	r2, [sp, #20]
 80125f2:	aa58      	add	r2, sp, #352	@ 0x160
 80125f4:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 80125f8:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 80125fc:	a944      	add	r1, sp, #272	@ 0x110
 80125fe:	aa08      	add	r2, sp, #32
 8012600:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8012604:	4694      	mov	ip, r2
 8012606:	4626      	mov	r6, r4
 8012608:	2e00      	cmp	r6, #0
 801260a:	dc4c      	bgt.n	80126a6 <__kernel_rem_pio2f+0x17e>
 801260c:	4628      	mov	r0, r5
 801260e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8012612:	f7ff fbd3 	bl	8011dbc <scalbnf>
 8012616:	eeb0 8a40 	vmov.f32	s16, s0
 801261a:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 801261e:	ee28 0a00 	vmul.f32	s0, s16, s0
 8012622:	f000 fa65 	bl	8012af0 <floorf>
 8012626:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 801262a:	eea0 8a67 	vfms.f32	s16, s0, s15
 801262e:	2d00      	cmp	r5, #0
 8012630:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012634:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8012638:	ee17 9a90 	vmov	r9, s15
 801263c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012640:	ee38 8a67 	vsub.f32	s16, s16, s15
 8012644:	dd41      	ble.n	80126ca <__kernel_rem_pio2f+0x1a2>
 8012646:	f104 3cff 	add.w	ip, r4, #4294967295
 801264a:	a908      	add	r1, sp, #32
 801264c:	f1c5 0e08 	rsb	lr, r5, #8
 8012650:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8012654:	fa46 f00e 	asr.w	r0, r6, lr
 8012658:	4481      	add	r9, r0
 801265a:	fa00 f00e 	lsl.w	r0, r0, lr
 801265e:	1a36      	subs	r6, r6, r0
 8012660:	f1c5 0007 	rsb	r0, r5, #7
 8012664:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8012668:	4106      	asrs	r6, r0
 801266a:	2e00      	cmp	r6, #0
 801266c:	dd3c      	ble.n	80126e8 <__kernel_rem_pio2f+0x1c0>
 801266e:	f04f 0e00 	mov.w	lr, #0
 8012672:	f109 0901 	add.w	r9, r9, #1
 8012676:	4670      	mov	r0, lr
 8012678:	4574      	cmp	r4, lr
 801267a:	dc68      	bgt.n	801274e <__kernel_rem_pio2f+0x226>
 801267c:	2d00      	cmp	r5, #0
 801267e:	dd03      	ble.n	8012688 <__kernel_rem_pio2f+0x160>
 8012680:	2d01      	cmp	r5, #1
 8012682:	d074      	beq.n	801276e <__kernel_rem_pio2f+0x246>
 8012684:	2d02      	cmp	r5, #2
 8012686:	d07d      	beq.n	8012784 <__kernel_rem_pio2f+0x25c>
 8012688:	2e02      	cmp	r6, #2
 801268a:	d12d      	bne.n	80126e8 <__kernel_rem_pio2f+0x1c0>
 801268c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8012690:	ee30 8a48 	vsub.f32	s16, s0, s16
 8012694:	b340      	cbz	r0, 80126e8 <__kernel_rem_pio2f+0x1c0>
 8012696:	4628      	mov	r0, r5
 8012698:	9306      	str	r3, [sp, #24]
 801269a:	f7ff fb8f 	bl	8011dbc <scalbnf>
 801269e:	9b06      	ldr	r3, [sp, #24]
 80126a0:	ee38 8a40 	vsub.f32	s16, s16, s0
 80126a4:	e020      	b.n	80126e8 <__kernel_rem_pio2f+0x1c0>
 80126a6:	ee60 7a28 	vmul.f32	s15, s0, s17
 80126aa:	3e01      	subs	r6, #1
 80126ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80126b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80126b4:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80126b8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80126bc:	ecac 0a01 	vstmia	ip!, {s0}
 80126c0:	ed30 0a01 	vldmdb	r0!, {s0}
 80126c4:	ee37 0a80 	vadd.f32	s0, s15, s0
 80126c8:	e79e      	b.n	8012608 <__kernel_rem_pio2f+0xe0>
 80126ca:	d105      	bne.n	80126d8 <__kernel_rem_pio2f+0x1b0>
 80126cc:	1e60      	subs	r0, r4, #1
 80126ce:	a908      	add	r1, sp, #32
 80126d0:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 80126d4:	11f6      	asrs	r6, r6, #7
 80126d6:	e7c8      	b.n	801266a <__kernel_rem_pio2f+0x142>
 80126d8:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80126dc:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80126e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126e4:	da31      	bge.n	801274a <__kernel_rem_pio2f+0x222>
 80126e6:	2600      	movs	r6, #0
 80126e8:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80126ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126f0:	f040 8098 	bne.w	8012824 <__kernel_rem_pio2f+0x2fc>
 80126f4:	1e60      	subs	r0, r4, #1
 80126f6:	2200      	movs	r2, #0
 80126f8:	4550      	cmp	r0, sl
 80126fa:	da4b      	bge.n	8012794 <__kernel_rem_pio2f+0x26c>
 80126fc:	2a00      	cmp	r2, #0
 80126fe:	d065      	beq.n	80127cc <__kernel_rem_pio2f+0x2a4>
 8012700:	3c01      	subs	r4, #1
 8012702:	ab08      	add	r3, sp, #32
 8012704:	3d08      	subs	r5, #8
 8012706:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801270a:	2b00      	cmp	r3, #0
 801270c:	d0f8      	beq.n	8012700 <__kernel_rem_pio2f+0x1d8>
 801270e:	4628      	mov	r0, r5
 8012710:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8012714:	f7ff fb52 	bl	8011dbc <scalbnf>
 8012718:	1c63      	adds	r3, r4, #1
 801271a:	aa44      	add	r2, sp, #272	@ 0x110
 801271c:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 801281c <__kernel_rem_pio2f+0x2f4>
 8012720:	0099      	lsls	r1, r3, #2
 8012722:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8012726:	4623      	mov	r3, r4
 8012728:	2b00      	cmp	r3, #0
 801272a:	f280 80a9 	bge.w	8012880 <__kernel_rem_pio2f+0x358>
 801272e:	4623      	mov	r3, r4
 8012730:	2b00      	cmp	r3, #0
 8012732:	f2c0 80c7 	blt.w	80128c4 <__kernel_rem_pio2f+0x39c>
 8012736:	aa44      	add	r2, sp, #272	@ 0x110
 8012738:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 801273c:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8012814 <__kernel_rem_pio2f+0x2ec>
 8012740:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8012820 <__kernel_rem_pio2f+0x2f8>
 8012744:	2000      	movs	r0, #0
 8012746:	1ae2      	subs	r2, r4, r3
 8012748:	e0b1      	b.n	80128ae <__kernel_rem_pio2f+0x386>
 801274a:	2602      	movs	r6, #2
 801274c:	e78f      	b.n	801266e <__kernel_rem_pio2f+0x146>
 801274e:	f852 1b04 	ldr.w	r1, [r2], #4
 8012752:	b948      	cbnz	r0, 8012768 <__kernel_rem_pio2f+0x240>
 8012754:	b121      	cbz	r1, 8012760 <__kernel_rem_pio2f+0x238>
 8012756:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 801275a:	f842 1c04 	str.w	r1, [r2, #-4]
 801275e:	2101      	movs	r1, #1
 8012760:	f10e 0e01 	add.w	lr, lr, #1
 8012764:	4608      	mov	r0, r1
 8012766:	e787      	b.n	8012678 <__kernel_rem_pio2f+0x150>
 8012768:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 801276c:	e7f5      	b.n	801275a <__kernel_rem_pio2f+0x232>
 801276e:	f104 3cff 	add.w	ip, r4, #4294967295
 8012772:	aa08      	add	r2, sp, #32
 8012774:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8012778:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 801277c:	a908      	add	r1, sp, #32
 801277e:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8012782:	e781      	b.n	8012688 <__kernel_rem_pio2f+0x160>
 8012784:	f104 3cff 	add.w	ip, r4, #4294967295
 8012788:	aa08      	add	r2, sp, #32
 801278a:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801278e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8012792:	e7f3      	b.n	801277c <__kernel_rem_pio2f+0x254>
 8012794:	a908      	add	r1, sp, #32
 8012796:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 801279a:	3801      	subs	r0, #1
 801279c:	430a      	orrs	r2, r1
 801279e:	e7ab      	b.n	80126f8 <__kernel_rem_pio2f+0x1d0>
 80127a0:	3201      	adds	r2, #1
 80127a2:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 80127a6:	2e00      	cmp	r6, #0
 80127a8:	d0fa      	beq.n	80127a0 <__kernel_rem_pio2f+0x278>
 80127aa:	9905      	ldr	r1, [sp, #20]
 80127ac:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 80127b0:	eb0d 0001 	add.w	r0, sp, r1
 80127b4:	18e6      	adds	r6, r4, r3
 80127b6:	a91c      	add	r1, sp, #112	@ 0x70
 80127b8:	f104 0c01 	add.w	ip, r4, #1
 80127bc:	384c      	subs	r0, #76	@ 0x4c
 80127be:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 80127c2:	4422      	add	r2, r4
 80127c4:	4562      	cmp	r2, ip
 80127c6:	da04      	bge.n	80127d2 <__kernel_rem_pio2f+0x2aa>
 80127c8:	4614      	mov	r4, r2
 80127ca:	e710      	b.n	80125ee <__kernel_rem_pio2f+0xc6>
 80127cc:	9804      	ldr	r0, [sp, #16]
 80127ce:	2201      	movs	r2, #1
 80127d0:	e7e7      	b.n	80127a2 <__kernel_rem_pio2f+0x27a>
 80127d2:	9903      	ldr	r1, [sp, #12]
 80127d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80127d8:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 80127dc:	9105      	str	r1, [sp, #20]
 80127de:	ee07 1a90 	vmov	s15, r1
 80127e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80127e6:	2400      	movs	r4, #0
 80127e8:	ece6 7a01 	vstmia	r6!, {s15}
 80127ec:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8012820 <__kernel_rem_pio2f+0x2f8>
 80127f0:	46b1      	mov	r9, r6
 80127f2:	455c      	cmp	r4, fp
 80127f4:	dd04      	ble.n	8012800 <__kernel_rem_pio2f+0x2d8>
 80127f6:	ece0 7a01 	vstmia	r0!, {s15}
 80127fa:	f10c 0c01 	add.w	ip, ip, #1
 80127fe:	e7e1      	b.n	80127c4 <__kernel_rem_pio2f+0x29c>
 8012800:	ecfe 6a01 	vldmia	lr!, {s13}
 8012804:	ed39 7a01 	vldmdb	r9!, {s14}
 8012808:	3401      	adds	r4, #1
 801280a:	eee6 7a87 	vfma.f32	s15, s13, s14
 801280e:	e7f0      	b.n	80127f2 <__kernel_rem_pio2f+0x2ca>
 8012810:	080131e4 	.word	0x080131e4
 8012814:	080131b8 	.word	0x080131b8
 8012818:	43800000 	.word	0x43800000
 801281c:	3b800000 	.word	0x3b800000
 8012820:	00000000 	.word	0x00000000
 8012824:	9b02      	ldr	r3, [sp, #8]
 8012826:	eeb0 0a48 	vmov.f32	s0, s16
 801282a:	eba3 0008 	sub.w	r0, r3, r8
 801282e:	f7ff fac5 	bl	8011dbc <scalbnf>
 8012832:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8012818 <__kernel_rem_pio2f+0x2f0>
 8012836:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801283a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801283e:	db19      	blt.n	8012874 <__kernel_rem_pio2f+0x34c>
 8012840:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 801281c <__kernel_rem_pio2f+0x2f4>
 8012844:	ee60 7a27 	vmul.f32	s15, s0, s15
 8012848:	aa08      	add	r2, sp, #32
 801284a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801284e:	3508      	adds	r5, #8
 8012850:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012854:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8012858:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801285c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8012860:	ee10 3a10 	vmov	r3, s0
 8012864:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8012868:	ee17 3a90 	vmov	r3, s15
 801286c:	3401      	adds	r4, #1
 801286e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8012872:	e74c      	b.n	801270e <__kernel_rem_pio2f+0x1e6>
 8012874:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8012878:	aa08      	add	r2, sp, #32
 801287a:	ee10 3a10 	vmov	r3, s0
 801287e:	e7f6      	b.n	801286e <__kernel_rem_pio2f+0x346>
 8012880:	a808      	add	r0, sp, #32
 8012882:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8012886:	9001      	str	r0, [sp, #4]
 8012888:	ee07 0a90 	vmov	s15, r0
 801288c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012890:	3b01      	subs	r3, #1
 8012892:	ee67 7a80 	vmul.f32	s15, s15, s0
 8012896:	ee20 0a07 	vmul.f32	s0, s0, s14
 801289a:	ed62 7a01 	vstmdb	r2!, {s15}
 801289e:	e743      	b.n	8012728 <__kernel_rem_pio2f+0x200>
 80128a0:	ecfc 6a01 	vldmia	ip!, {s13}
 80128a4:	ecb5 7a01 	vldmia	r5!, {s14}
 80128a8:	eee6 7a87 	vfma.f32	s15, s13, s14
 80128ac:	3001      	adds	r0, #1
 80128ae:	4550      	cmp	r0, sl
 80128b0:	dc01      	bgt.n	80128b6 <__kernel_rem_pio2f+0x38e>
 80128b2:	4290      	cmp	r0, r2
 80128b4:	ddf4      	ble.n	80128a0 <__kernel_rem_pio2f+0x378>
 80128b6:	a858      	add	r0, sp, #352	@ 0x160
 80128b8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80128bc:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 80128c0:	3b01      	subs	r3, #1
 80128c2:	e735      	b.n	8012730 <__kernel_rem_pio2f+0x208>
 80128c4:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 80128c6:	2b02      	cmp	r3, #2
 80128c8:	dc09      	bgt.n	80128de <__kernel_rem_pio2f+0x3b6>
 80128ca:	2b00      	cmp	r3, #0
 80128cc:	dc27      	bgt.n	801291e <__kernel_rem_pio2f+0x3f6>
 80128ce:	d040      	beq.n	8012952 <__kernel_rem_pio2f+0x42a>
 80128d0:	f009 0007 	and.w	r0, r9, #7
 80128d4:	b059      	add	sp, #356	@ 0x164
 80128d6:	ecbd 8b04 	vpop	{d8-d9}
 80128da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80128de:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 80128e0:	2b03      	cmp	r3, #3
 80128e2:	d1f5      	bne.n	80128d0 <__kernel_rem_pio2f+0x3a8>
 80128e4:	aa30      	add	r2, sp, #192	@ 0xc0
 80128e6:	1f0b      	subs	r3, r1, #4
 80128e8:	4413      	add	r3, r2
 80128ea:	461a      	mov	r2, r3
 80128ec:	4620      	mov	r0, r4
 80128ee:	2800      	cmp	r0, #0
 80128f0:	dc50      	bgt.n	8012994 <__kernel_rem_pio2f+0x46c>
 80128f2:	4622      	mov	r2, r4
 80128f4:	2a01      	cmp	r2, #1
 80128f6:	dc5d      	bgt.n	80129b4 <__kernel_rem_pio2f+0x48c>
 80128f8:	ab30      	add	r3, sp, #192	@ 0xc0
 80128fa:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 8012820 <__kernel_rem_pio2f+0x2f8>
 80128fe:	440b      	add	r3, r1
 8012900:	2c01      	cmp	r4, #1
 8012902:	dc67      	bgt.n	80129d4 <__kernel_rem_pio2f+0x4ac>
 8012904:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8012908:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 801290c:	2e00      	cmp	r6, #0
 801290e:	d167      	bne.n	80129e0 <__kernel_rem_pio2f+0x4b8>
 8012910:	edc7 6a00 	vstr	s13, [r7]
 8012914:	ed87 7a01 	vstr	s14, [r7, #4]
 8012918:	edc7 7a02 	vstr	s15, [r7, #8]
 801291c:	e7d8      	b.n	80128d0 <__kernel_rem_pio2f+0x3a8>
 801291e:	ab30      	add	r3, sp, #192	@ 0xc0
 8012920:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 8012820 <__kernel_rem_pio2f+0x2f8>
 8012924:	440b      	add	r3, r1
 8012926:	4622      	mov	r2, r4
 8012928:	2a00      	cmp	r2, #0
 801292a:	da24      	bge.n	8012976 <__kernel_rem_pio2f+0x44e>
 801292c:	b34e      	cbz	r6, 8012982 <__kernel_rem_pio2f+0x45a>
 801292e:	eef1 7a47 	vneg.f32	s15, s14
 8012932:	edc7 7a00 	vstr	s15, [r7]
 8012936:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 801293a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801293e:	aa31      	add	r2, sp, #196	@ 0xc4
 8012940:	2301      	movs	r3, #1
 8012942:	429c      	cmp	r4, r3
 8012944:	da20      	bge.n	8012988 <__kernel_rem_pio2f+0x460>
 8012946:	b10e      	cbz	r6, 801294c <__kernel_rem_pio2f+0x424>
 8012948:	eef1 7a67 	vneg.f32	s15, s15
 801294c:	edc7 7a01 	vstr	s15, [r7, #4]
 8012950:	e7be      	b.n	80128d0 <__kernel_rem_pio2f+0x3a8>
 8012952:	ab30      	add	r3, sp, #192	@ 0xc0
 8012954:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 8012820 <__kernel_rem_pio2f+0x2f8>
 8012958:	440b      	add	r3, r1
 801295a:	2c00      	cmp	r4, #0
 801295c:	da05      	bge.n	801296a <__kernel_rem_pio2f+0x442>
 801295e:	b10e      	cbz	r6, 8012964 <__kernel_rem_pio2f+0x43c>
 8012960:	eef1 7a67 	vneg.f32	s15, s15
 8012964:	edc7 7a00 	vstr	s15, [r7]
 8012968:	e7b2      	b.n	80128d0 <__kernel_rem_pio2f+0x3a8>
 801296a:	ed33 7a01 	vldmdb	r3!, {s14}
 801296e:	3c01      	subs	r4, #1
 8012970:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012974:	e7f1      	b.n	801295a <__kernel_rem_pio2f+0x432>
 8012976:	ed73 7a01 	vldmdb	r3!, {s15}
 801297a:	3a01      	subs	r2, #1
 801297c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012980:	e7d2      	b.n	8012928 <__kernel_rem_pio2f+0x400>
 8012982:	eef0 7a47 	vmov.f32	s15, s14
 8012986:	e7d4      	b.n	8012932 <__kernel_rem_pio2f+0x40a>
 8012988:	ecb2 7a01 	vldmia	r2!, {s14}
 801298c:	3301      	adds	r3, #1
 801298e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012992:	e7d6      	b.n	8012942 <__kernel_rem_pio2f+0x41a>
 8012994:	ed72 7a01 	vldmdb	r2!, {s15}
 8012998:	edd2 6a01 	vldr	s13, [r2, #4]
 801299c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80129a0:	3801      	subs	r0, #1
 80129a2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80129a6:	ed82 7a00 	vstr	s14, [r2]
 80129aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80129ae:	edc2 7a01 	vstr	s15, [r2, #4]
 80129b2:	e79c      	b.n	80128ee <__kernel_rem_pio2f+0x3c6>
 80129b4:	ed73 7a01 	vldmdb	r3!, {s15}
 80129b8:	edd3 6a01 	vldr	s13, [r3, #4]
 80129bc:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80129c0:	3a01      	subs	r2, #1
 80129c2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80129c6:	ed83 7a00 	vstr	s14, [r3]
 80129ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80129ce:	edc3 7a01 	vstr	s15, [r3, #4]
 80129d2:	e78f      	b.n	80128f4 <__kernel_rem_pio2f+0x3cc>
 80129d4:	ed33 7a01 	vldmdb	r3!, {s14}
 80129d8:	3c01      	subs	r4, #1
 80129da:	ee77 7a87 	vadd.f32	s15, s15, s14
 80129de:	e78f      	b.n	8012900 <__kernel_rem_pio2f+0x3d8>
 80129e0:	eef1 6a66 	vneg.f32	s13, s13
 80129e4:	eeb1 7a47 	vneg.f32	s14, s14
 80129e8:	edc7 6a00 	vstr	s13, [r7]
 80129ec:	ed87 7a01 	vstr	s14, [r7, #4]
 80129f0:	eef1 7a67 	vneg.f32	s15, s15
 80129f4:	e790      	b.n	8012918 <__kernel_rem_pio2f+0x3f0>
 80129f6:	bf00      	nop

080129f8 <floor>:
 80129f8:	ec51 0b10 	vmov	r0, r1, d0
 80129fc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8012a00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a04:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8012a08:	2e13      	cmp	r6, #19
 8012a0a:	460c      	mov	r4, r1
 8012a0c:	4605      	mov	r5, r0
 8012a0e:	4680      	mov	r8, r0
 8012a10:	dc34      	bgt.n	8012a7c <floor+0x84>
 8012a12:	2e00      	cmp	r6, #0
 8012a14:	da17      	bge.n	8012a46 <floor+0x4e>
 8012a16:	a332      	add	r3, pc, #200	@ (adr r3, 8012ae0 <floor+0xe8>)
 8012a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a1c:	f7ed fc02 	bl	8000224 <__adddf3>
 8012a20:	2200      	movs	r2, #0
 8012a22:	2300      	movs	r3, #0
 8012a24:	f7ee f844 	bl	8000ab0 <__aeabi_dcmpgt>
 8012a28:	b150      	cbz	r0, 8012a40 <floor+0x48>
 8012a2a:	2c00      	cmp	r4, #0
 8012a2c:	da55      	bge.n	8012ada <floor+0xe2>
 8012a2e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8012a32:	432c      	orrs	r4, r5
 8012a34:	2500      	movs	r5, #0
 8012a36:	42ac      	cmp	r4, r5
 8012a38:	4c2b      	ldr	r4, [pc, #172]	@ (8012ae8 <floor+0xf0>)
 8012a3a:	bf08      	it	eq
 8012a3c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8012a40:	4621      	mov	r1, r4
 8012a42:	4628      	mov	r0, r5
 8012a44:	e023      	b.n	8012a8e <floor+0x96>
 8012a46:	4f29      	ldr	r7, [pc, #164]	@ (8012aec <floor+0xf4>)
 8012a48:	4137      	asrs	r7, r6
 8012a4a:	ea01 0307 	and.w	r3, r1, r7
 8012a4e:	4303      	orrs	r3, r0
 8012a50:	d01d      	beq.n	8012a8e <floor+0x96>
 8012a52:	a323      	add	r3, pc, #140	@ (adr r3, 8012ae0 <floor+0xe8>)
 8012a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a58:	f7ed fbe4 	bl	8000224 <__adddf3>
 8012a5c:	2200      	movs	r2, #0
 8012a5e:	2300      	movs	r3, #0
 8012a60:	f7ee f826 	bl	8000ab0 <__aeabi_dcmpgt>
 8012a64:	2800      	cmp	r0, #0
 8012a66:	d0eb      	beq.n	8012a40 <floor+0x48>
 8012a68:	2c00      	cmp	r4, #0
 8012a6a:	bfbe      	ittt	lt
 8012a6c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8012a70:	4133      	asrlt	r3, r6
 8012a72:	18e4      	addlt	r4, r4, r3
 8012a74:	ea24 0407 	bic.w	r4, r4, r7
 8012a78:	2500      	movs	r5, #0
 8012a7a:	e7e1      	b.n	8012a40 <floor+0x48>
 8012a7c:	2e33      	cmp	r6, #51	@ 0x33
 8012a7e:	dd0a      	ble.n	8012a96 <floor+0x9e>
 8012a80:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8012a84:	d103      	bne.n	8012a8e <floor+0x96>
 8012a86:	4602      	mov	r2, r0
 8012a88:	460b      	mov	r3, r1
 8012a8a:	f7ed fbcb 	bl	8000224 <__adddf3>
 8012a8e:	ec41 0b10 	vmov	d0, r0, r1
 8012a92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a96:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8012a9a:	f04f 37ff 	mov.w	r7, #4294967295
 8012a9e:	40df      	lsrs	r7, r3
 8012aa0:	4207      	tst	r7, r0
 8012aa2:	d0f4      	beq.n	8012a8e <floor+0x96>
 8012aa4:	a30e      	add	r3, pc, #56	@ (adr r3, 8012ae0 <floor+0xe8>)
 8012aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012aaa:	f7ed fbbb 	bl	8000224 <__adddf3>
 8012aae:	2200      	movs	r2, #0
 8012ab0:	2300      	movs	r3, #0
 8012ab2:	f7ed fffd 	bl	8000ab0 <__aeabi_dcmpgt>
 8012ab6:	2800      	cmp	r0, #0
 8012ab8:	d0c2      	beq.n	8012a40 <floor+0x48>
 8012aba:	2c00      	cmp	r4, #0
 8012abc:	da0a      	bge.n	8012ad4 <floor+0xdc>
 8012abe:	2e14      	cmp	r6, #20
 8012ac0:	d101      	bne.n	8012ac6 <floor+0xce>
 8012ac2:	3401      	adds	r4, #1
 8012ac4:	e006      	b.n	8012ad4 <floor+0xdc>
 8012ac6:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8012aca:	2301      	movs	r3, #1
 8012acc:	40b3      	lsls	r3, r6
 8012ace:	441d      	add	r5, r3
 8012ad0:	4545      	cmp	r5, r8
 8012ad2:	d3f6      	bcc.n	8012ac2 <floor+0xca>
 8012ad4:	ea25 0507 	bic.w	r5, r5, r7
 8012ad8:	e7b2      	b.n	8012a40 <floor+0x48>
 8012ada:	2500      	movs	r5, #0
 8012adc:	462c      	mov	r4, r5
 8012ade:	e7af      	b.n	8012a40 <floor+0x48>
 8012ae0:	8800759c 	.word	0x8800759c
 8012ae4:	7e37e43c 	.word	0x7e37e43c
 8012ae8:	bff00000 	.word	0xbff00000
 8012aec:	000fffff 	.word	0x000fffff

08012af0 <floorf>:
 8012af0:	ee10 3a10 	vmov	r3, s0
 8012af4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8012af8:	3a7f      	subs	r2, #127	@ 0x7f
 8012afa:	2a16      	cmp	r2, #22
 8012afc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8012b00:	dc2b      	bgt.n	8012b5a <floorf+0x6a>
 8012b02:	2a00      	cmp	r2, #0
 8012b04:	da12      	bge.n	8012b2c <floorf+0x3c>
 8012b06:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8012b6c <floorf+0x7c>
 8012b0a:	ee30 0a27 	vadd.f32	s0, s0, s15
 8012b0e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8012b12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b16:	dd06      	ble.n	8012b26 <floorf+0x36>
 8012b18:	2b00      	cmp	r3, #0
 8012b1a:	da24      	bge.n	8012b66 <floorf+0x76>
 8012b1c:	2900      	cmp	r1, #0
 8012b1e:	4b14      	ldr	r3, [pc, #80]	@ (8012b70 <floorf+0x80>)
 8012b20:	bf08      	it	eq
 8012b22:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8012b26:	ee00 3a10 	vmov	s0, r3
 8012b2a:	4770      	bx	lr
 8012b2c:	4911      	ldr	r1, [pc, #68]	@ (8012b74 <floorf+0x84>)
 8012b2e:	4111      	asrs	r1, r2
 8012b30:	420b      	tst	r3, r1
 8012b32:	d0fa      	beq.n	8012b2a <floorf+0x3a>
 8012b34:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8012b6c <floorf+0x7c>
 8012b38:	ee30 0a27 	vadd.f32	s0, s0, s15
 8012b3c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8012b40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b44:	ddef      	ble.n	8012b26 <floorf+0x36>
 8012b46:	2b00      	cmp	r3, #0
 8012b48:	bfbe      	ittt	lt
 8012b4a:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8012b4e:	fa40 f202 	asrlt.w	r2, r0, r2
 8012b52:	189b      	addlt	r3, r3, r2
 8012b54:	ea23 0301 	bic.w	r3, r3, r1
 8012b58:	e7e5      	b.n	8012b26 <floorf+0x36>
 8012b5a:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8012b5e:	d3e4      	bcc.n	8012b2a <floorf+0x3a>
 8012b60:	ee30 0a00 	vadd.f32	s0, s0, s0
 8012b64:	4770      	bx	lr
 8012b66:	2300      	movs	r3, #0
 8012b68:	e7dd      	b.n	8012b26 <floorf+0x36>
 8012b6a:	bf00      	nop
 8012b6c:	7149f2ca 	.word	0x7149f2ca
 8012b70:	bf800000 	.word	0xbf800000
 8012b74:	007fffff 	.word	0x007fffff

08012b78 <_init>:
 8012b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b7a:	bf00      	nop
 8012b7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012b7e:	bc08      	pop	{r3}
 8012b80:	469e      	mov	lr, r3
 8012b82:	4770      	bx	lr

08012b84 <_fini>:
 8012b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b86:	bf00      	nop
 8012b88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012b8a:	bc08      	pop	{r3}
 8012b8c:	469e      	mov	lr, r3
 8012b8e:	4770      	bx	lr
