
verticle_plotter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014dd0  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000650  08014fa8  08014fa8  00015fa8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080155f8  080155f8  00017618  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080155f8  080155f8  000165f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015600  08015600  00017618  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015600  08015600  00016600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08015604  08015604  00016604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000618  20000000  08015608  00017000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002274  20000618  08015c20  00017618  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000288c  08015c20  0001788c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00017618  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002ccdd  00000000  00000000  00017648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005616  00000000  00000000  00044325  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d90  00000000  00000000  00049940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001735  00000000  00000000  0004b6d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002dbc2  00000000  00000000  0004ce05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002c33a  00000000  00000000  0007a9c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011a688  00000000  00000000  000a6d01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001c1389  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000868c  00000000  00000000  001c13cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  001c9a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000618 	.word	0x20000618
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08014f90 	.word	0x08014f90

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000061c 	.word	0x2000061c
 8000214:	08014f90 	.word	0x08014f90

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2iz>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000acc:	d215      	bcs.n	8000afa <__aeabi_d2iz+0x36>
 8000ace:	d511      	bpl.n	8000af4 <__aeabi_d2iz+0x30>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d912      	bls.n	8000b00 <__aeabi_d2iz+0x3c>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d105      	bne.n	8000b0c <__aeabi_d2iz+0x48>
 8000b00:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b04:	bf08      	it	eq
 8000b06:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_d2uiz>:
 8000b14:	004a      	lsls	r2, r1, #1
 8000b16:	d211      	bcs.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b18:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b1c:	d211      	bcs.n	8000b42 <__aeabi_d2uiz+0x2e>
 8000b1e:	d50d      	bpl.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b20:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b24:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b28:	d40e      	bmi.n	8000b48 <__aeabi_d2uiz+0x34>
 8000b2a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b32:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	4770      	bx	lr
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b46:	d102      	bne.n	8000b4e <__aeabi_d2uiz+0x3a>
 8000b48:	f04f 30ff 	mov.w	r0, #4294967295
 8000b4c:	4770      	bx	lr
 8000b4e:	f04f 0000 	mov.w	r0, #0
 8000b52:	4770      	bx	lr

08000b54 <__aeabi_d2f>:
 8000b54:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b58:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b5c:	bf24      	itt	cs
 8000b5e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b62:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b66:	d90d      	bls.n	8000b84 <__aeabi_d2f+0x30>
 8000b68:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b6c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b70:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b74:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b78:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b7c:	bf08      	it	eq
 8000b7e:	f020 0001 	biceq.w	r0, r0, #1
 8000b82:	4770      	bx	lr
 8000b84:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b88:	d121      	bne.n	8000bce <__aeabi_d2f+0x7a>
 8000b8a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b8e:	bfbc      	itt	lt
 8000b90:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b94:	4770      	bxlt	lr
 8000b96:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b9a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b9e:	f1c2 0218 	rsb	r2, r2, #24
 8000ba2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ba6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000baa:	fa20 f002 	lsr.w	r0, r0, r2
 8000bae:	bf18      	it	ne
 8000bb0:	f040 0001 	orrne.w	r0, r0, #1
 8000bb4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bbc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc0:	ea40 000c 	orr.w	r0, r0, ip
 8000bc4:	fa23 f302 	lsr.w	r3, r3, r2
 8000bc8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bcc:	e7cc      	b.n	8000b68 <__aeabi_d2f+0x14>
 8000bce:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd2:	d107      	bne.n	8000be4 <__aeabi_d2f+0x90>
 8000bd4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bd8:	bf1e      	ittt	ne
 8000bda:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bde:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000be2:	4770      	bxne	lr
 8000be4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bec:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop

08000bf4 <__aeabi_uldivmod>:
 8000bf4:	b953      	cbnz	r3, 8000c0c <__aeabi_uldivmod+0x18>
 8000bf6:	b94a      	cbnz	r2, 8000c0c <__aeabi_uldivmod+0x18>
 8000bf8:	2900      	cmp	r1, #0
 8000bfa:	bf08      	it	eq
 8000bfc:	2800      	cmpeq	r0, #0
 8000bfe:	bf1c      	itt	ne
 8000c00:	f04f 31ff 	movne.w	r1, #4294967295
 8000c04:	f04f 30ff 	movne.w	r0, #4294967295
 8000c08:	f000 b988 	b.w	8000f1c <__aeabi_idiv0>
 8000c0c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c10:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c14:	f000 f806 	bl	8000c24 <__udivmoddi4>
 8000c18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c20:	b004      	add	sp, #16
 8000c22:	4770      	bx	lr

08000c24 <__udivmoddi4>:
 8000c24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c28:	9d08      	ldr	r5, [sp, #32]
 8000c2a:	468e      	mov	lr, r1
 8000c2c:	4604      	mov	r4, r0
 8000c2e:	4688      	mov	r8, r1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d14a      	bne.n	8000cca <__udivmoddi4+0xa6>
 8000c34:	428a      	cmp	r2, r1
 8000c36:	4617      	mov	r7, r2
 8000c38:	d962      	bls.n	8000d00 <__udivmoddi4+0xdc>
 8000c3a:	fab2 f682 	clz	r6, r2
 8000c3e:	b14e      	cbz	r6, 8000c54 <__udivmoddi4+0x30>
 8000c40:	f1c6 0320 	rsb	r3, r6, #32
 8000c44:	fa01 f806 	lsl.w	r8, r1, r6
 8000c48:	fa20 f303 	lsr.w	r3, r0, r3
 8000c4c:	40b7      	lsls	r7, r6
 8000c4e:	ea43 0808 	orr.w	r8, r3, r8
 8000c52:	40b4      	lsls	r4, r6
 8000c54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c58:	fa1f fc87 	uxth.w	ip, r7
 8000c5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c60:	0c23      	lsrs	r3, r4, #16
 8000c62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000c6e:	429a      	cmp	r2, r3
 8000c70:	d909      	bls.n	8000c86 <__udivmoddi4+0x62>
 8000c72:	18fb      	adds	r3, r7, r3
 8000c74:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c78:	f080 80ea 	bcs.w	8000e50 <__udivmoddi4+0x22c>
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	f240 80e7 	bls.w	8000e50 <__udivmoddi4+0x22c>
 8000c82:	3902      	subs	r1, #2
 8000c84:	443b      	add	r3, r7
 8000c86:	1a9a      	subs	r2, r3, r2
 8000c88:	b2a3      	uxth	r3, r4
 8000c8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c9a:	459c      	cmp	ip, r3
 8000c9c:	d909      	bls.n	8000cb2 <__udivmoddi4+0x8e>
 8000c9e:	18fb      	adds	r3, r7, r3
 8000ca0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ca4:	f080 80d6 	bcs.w	8000e54 <__udivmoddi4+0x230>
 8000ca8:	459c      	cmp	ip, r3
 8000caa:	f240 80d3 	bls.w	8000e54 <__udivmoddi4+0x230>
 8000cae:	443b      	add	r3, r7
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cb6:	eba3 030c 	sub.w	r3, r3, ip
 8000cba:	2100      	movs	r1, #0
 8000cbc:	b11d      	cbz	r5, 8000cc6 <__udivmoddi4+0xa2>
 8000cbe:	40f3      	lsrs	r3, r6
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	428b      	cmp	r3, r1
 8000ccc:	d905      	bls.n	8000cda <__udivmoddi4+0xb6>
 8000cce:	b10d      	cbz	r5, 8000cd4 <__udivmoddi4+0xb0>
 8000cd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	4608      	mov	r0, r1
 8000cd8:	e7f5      	b.n	8000cc6 <__udivmoddi4+0xa2>
 8000cda:	fab3 f183 	clz	r1, r3
 8000cde:	2900      	cmp	r1, #0
 8000ce0:	d146      	bne.n	8000d70 <__udivmoddi4+0x14c>
 8000ce2:	4573      	cmp	r3, lr
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xc8>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 8105 	bhi.w	8000ef6 <__udivmoddi4+0x2d2>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	4690      	mov	r8, r2
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e5      	beq.n	8000cc6 <__udivmoddi4+0xa2>
 8000cfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000cfe:	e7e2      	b.n	8000cc6 <__udivmoddi4+0xa2>
 8000d00:	2a00      	cmp	r2, #0
 8000d02:	f000 8090 	beq.w	8000e26 <__udivmoddi4+0x202>
 8000d06:	fab2 f682 	clz	r6, r2
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	f040 80a4 	bne.w	8000e58 <__udivmoddi4+0x234>
 8000d10:	1a8a      	subs	r2, r1, r2
 8000d12:	0c03      	lsrs	r3, r0, #16
 8000d14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d18:	b280      	uxth	r0, r0
 8000d1a:	b2bc      	uxth	r4, r7
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	d907      	bls.n	8000d42 <__udivmoddi4+0x11e>
 8000d32:	18fb      	adds	r3, r7, r3
 8000d34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d38:	d202      	bcs.n	8000d40 <__udivmoddi4+0x11c>
 8000d3a:	429a      	cmp	r2, r3
 8000d3c:	f200 80e0 	bhi.w	8000f00 <__udivmoddi4+0x2dc>
 8000d40:	46c4      	mov	ip, r8
 8000d42:	1a9b      	subs	r3, r3, r2
 8000d44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d50:	fb02 f404 	mul.w	r4, r2, r4
 8000d54:	429c      	cmp	r4, r3
 8000d56:	d907      	bls.n	8000d68 <__udivmoddi4+0x144>
 8000d58:	18fb      	adds	r3, r7, r3
 8000d5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d5e:	d202      	bcs.n	8000d66 <__udivmoddi4+0x142>
 8000d60:	429c      	cmp	r4, r3
 8000d62:	f200 80ca 	bhi.w	8000efa <__udivmoddi4+0x2d6>
 8000d66:	4602      	mov	r2, r0
 8000d68:	1b1b      	subs	r3, r3, r4
 8000d6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d6e:	e7a5      	b.n	8000cbc <__udivmoddi4+0x98>
 8000d70:	f1c1 0620 	rsb	r6, r1, #32
 8000d74:	408b      	lsls	r3, r1
 8000d76:	fa22 f706 	lsr.w	r7, r2, r6
 8000d7a:	431f      	orrs	r7, r3
 8000d7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000d80:	fa20 f306 	lsr.w	r3, r0, r6
 8000d84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d8c:	4323      	orrs	r3, r4
 8000d8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000d92:	fa1f fc87 	uxth.w	ip, r7
 8000d96:	fbbe f0f9 	udiv	r0, lr, r9
 8000d9a:	0c1c      	lsrs	r4, r3, #16
 8000d9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000da0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000da4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000da8:	45a6      	cmp	lr, r4
 8000daa:	fa02 f201 	lsl.w	r2, r2, r1
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x1a0>
 8000db0:	193c      	adds	r4, r7, r4
 8000db2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000db6:	f080 809c 	bcs.w	8000ef2 <__udivmoddi4+0x2ce>
 8000dba:	45a6      	cmp	lr, r4
 8000dbc:	f240 8099 	bls.w	8000ef2 <__udivmoddi4+0x2ce>
 8000dc0:	3802      	subs	r0, #2
 8000dc2:	443c      	add	r4, r7
 8000dc4:	eba4 040e 	sub.w	r4, r4, lr
 8000dc8:	fa1f fe83 	uxth.w	lr, r3
 8000dcc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dd0:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dd8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ddc:	45a4      	cmp	ip, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x1ce>
 8000de0:	193c      	adds	r4, r7, r4
 8000de2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000de6:	f080 8082 	bcs.w	8000eee <__udivmoddi4+0x2ca>
 8000dea:	45a4      	cmp	ip, r4
 8000dec:	d97f      	bls.n	8000eee <__udivmoddi4+0x2ca>
 8000dee:	3b02      	subs	r3, #2
 8000df0:	443c      	add	r4, r7
 8000df2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000df6:	eba4 040c 	sub.w	r4, r4, ip
 8000dfa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000dfe:	4564      	cmp	r4, ip
 8000e00:	4673      	mov	r3, lr
 8000e02:	46e1      	mov	r9, ip
 8000e04:	d362      	bcc.n	8000ecc <__udivmoddi4+0x2a8>
 8000e06:	d05f      	beq.n	8000ec8 <__udivmoddi4+0x2a4>
 8000e08:	b15d      	cbz	r5, 8000e22 <__udivmoddi4+0x1fe>
 8000e0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000e0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000e12:	fa04 f606 	lsl.w	r6, r4, r6
 8000e16:	fa22 f301 	lsr.w	r3, r2, r1
 8000e1a:	431e      	orrs	r6, r3
 8000e1c:	40cc      	lsrs	r4, r1
 8000e1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000e22:	2100      	movs	r1, #0
 8000e24:	e74f      	b.n	8000cc6 <__udivmoddi4+0xa2>
 8000e26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e2a:	0c01      	lsrs	r1, r0, #16
 8000e2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e30:	b280      	uxth	r0, r0
 8000e32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e36:	463b      	mov	r3, r7
 8000e38:	4638      	mov	r0, r7
 8000e3a:	463c      	mov	r4, r7
 8000e3c:	46b8      	mov	r8, r7
 8000e3e:	46be      	mov	lr, r7
 8000e40:	2620      	movs	r6, #32
 8000e42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e46:	eba2 0208 	sub.w	r2, r2, r8
 8000e4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e4e:	e766      	b.n	8000d1e <__udivmoddi4+0xfa>
 8000e50:	4601      	mov	r1, r0
 8000e52:	e718      	b.n	8000c86 <__udivmoddi4+0x62>
 8000e54:	4610      	mov	r0, r2
 8000e56:	e72c      	b.n	8000cb2 <__udivmoddi4+0x8e>
 8000e58:	f1c6 0220 	rsb	r2, r6, #32
 8000e5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000e60:	40b7      	lsls	r7, r6
 8000e62:	40b1      	lsls	r1, r6
 8000e64:	fa20 f202 	lsr.w	r2, r0, r2
 8000e68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e6c:	430a      	orrs	r2, r1
 8000e6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e72:	b2bc      	uxth	r4, r7
 8000e74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e78:	0c11      	lsrs	r1, r2, #16
 8000e7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e7e:	fb08 f904 	mul.w	r9, r8, r4
 8000e82:	40b0      	lsls	r0, r6
 8000e84:	4589      	cmp	r9, r1
 8000e86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e8a:	b280      	uxth	r0, r0
 8000e8c:	d93e      	bls.n	8000f0c <__udivmoddi4+0x2e8>
 8000e8e:	1879      	adds	r1, r7, r1
 8000e90:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e94:	d201      	bcs.n	8000e9a <__udivmoddi4+0x276>
 8000e96:	4589      	cmp	r9, r1
 8000e98:	d81f      	bhi.n	8000eda <__udivmoddi4+0x2b6>
 8000e9a:	eba1 0109 	sub.w	r1, r1, r9
 8000e9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ea2:	fb09 f804 	mul.w	r8, r9, r4
 8000ea6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eaa:	b292      	uxth	r2, r2
 8000eac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000eb0:	4542      	cmp	r2, r8
 8000eb2:	d229      	bcs.n	8000f08 <__udivmoddi4+0x2e4>
 8000eb4:	18ba      	adds	r2, r7, r2
 8000eb6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000eba:	d2c4      	bcs.n	8000e46 <__udivmoddi4+0x222>
 8000ebc:	4542      	cmp	r2, r8
 8000ebe:	d2c2      	bcs.n	8000e46 <__udivmoddi4+0x222>
 8000ec0:	f1a9 0102 	sub.w	r1, r9, #2
 8000ec4:	443a      	add	r2, r7
 8000ec6:	e7be      	b.n	8000e46 <__udivmoddi4+0x222>
 8000ec8:	45f0      	cmp	r8, lr
 8000eca:	d29d      	bcs.n	8000e08 <__udivmoddi4+0x1e4>
 8000ecc:	ebbe 0302 	subs.w	r3, lr, r2
 8000ed0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	46e1      	mov	r9, ip
 8000ed8:	e796      	b.n	8000e08 <__udivmoddi4+0x1e4>
 8000eda:	eba7 0909 	sub.w	r9, r7, r9
 8000ede:	4449      	add	r1, r9
 8000ee0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ee4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ee8:	fb09 f804 	mul.w	r8, r9, r4
 8000eec:	e7db      	b.n	8000ea6 <__udivmoddi4+0x282>
 8000eee:	4673      	mov	r3, lr
 8000ef0:	e77f      	b.n	8000df2 <__udivmoddi4+0x1ce>
 8000ef2:	4650      	mov	r0, sl
 8000ef4:	e766      	b.n	8000dc4 <__udivmoddi4+0x1a0>
 8000ef6:	4608      	mov	r0, r1
 8000ef8:	e6fd      	b.n	8000cf6 <__udivmoddi4+0xd2>
 8000efa:	443b      	add	r3, r7
 8000efc:	3a02      	subs	r2, #2
 8000efe:	e733      	b.n	8000d68 <__udivmoddi4+0x144>
 8000f00:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f04:	443b      	add	r3, r7
 8000f06:	e71c      	b.n	8000d42 <__udivmoddi4+0x11e>
 8000f08:	4649      	mov	r1, r9
 8000f0a:	e79c      	b.n	8000e46 <__udivmoddi4+0x222>
 8000f0c:	eba1 0109 	sub.w	r1, r1, r9
 8000f10:	46c4      	mov	ip, r8
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fb09 f804 	mul.w	r8, r9, r4
 8000f1a:	e7c4      	b.n	8000ea6 <__udivmoddi4+0x282>

08000f1c <__aeabi_idiv0>:
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop

08000f20 <ADC_DMA_Init>:

#include "ADC_DMA.h"

void ADC_DMA_Init(ADC_DMA *adc_dma, ADC_HandleTypeDef *hadc,
                 uint16_t *buffer, uint32_t buffer_length,
                 uint8_t num_channels, float vref, float resolution) {
 8000f20:	b480      	push	{r7}
 8000f22:	b089      	sub	sp, #36	@ 0x24
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6178      	str	r0, [r7, #20]
 8000f28:	6139      	str	r1, [r7, #16]
 8000f2a:	60fa      	str	r2, [r7, #12]
 8000f2c:	60bb      	str	r3, [r7, #8]
 8000f2e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000f32:	edc7 0a00 	vstr	s1, [r7]

    adc_dma->hadc = hadc;
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	693a      	ldr	r2, [r7, #16]
 8000f3a:	601a      	str	r2, [r3, #0]
    adc_dma->dma_buffer = buffer;
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	68fa      	ldr	r2, [r7, #12]
 8000f40:	605a      	str	r2, [r3, #4]
    adc_dma->buffer_length = buffer_length;
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	68ba      	ldr	r2, [r7, #8]
 8000f46:	609a      	str	r2, [r3, #8]
    adc_dma->num_channels = num_channels;
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8000f4e:	731a      	strb	r2, [r3, #12]
    adc_dma->adc_vref = vref;
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	687a      	ldr	r2, [r7, #4]
 8000f54:	611a      	str	r2, [r3, #16]
    adc_dma->adc_resolution = resolution;
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	683a      	ldr	r2, [r7, #0]
 8000f5a:	615a      	str	r2, [r3, #20]

    // Default center point and error percentage
    adc_dma->center_point = resolution / 2.0f;  // Typically 2048 for 12-bit ADC
 8000f5c:	ed97 7a00 	vldr	s14, [r7]
 8000f60:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8000f64:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	edc3 7a06 	vstr	s15, [r3, #24]
    adc_dma->error_percentage = 5;              // 5% error by default
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	2205      	movs	r2, #5
 8000f72:	f883 2020 	strb.w	r2, [r3, #32]
    adc_dma->threshold = (adc_dma->error_percentage / 100.0f) * adc_dma->center_point;
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f7c:	ee07 3a90 	vmov	s15, r3
 8000f80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f84:	eddf 6a11 	vldr	s13, [pc, #68]	@ 8000fcc <ADC_DMA_Init+0xac>
 8000f88:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	edd3 7a06 	vldr	s15, [r3, #24]
 8000f92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	edc3 7a07 	vstr	s15, [r3, #28]

    // Initialize DMA buffer
    for (uint32_t i = 0; i < buffer_length; i++) {
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	61fb      	str	r3, [r7, #28]
 8000fa0:	e008      	b.n	8000fb4 <ADC_DMA_Init+0x94>
        buffer[i] = 0;
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	68fa      	ldr	r2, [r7, #12]
 8000fa8:	4413      	add	r3, r2
 8000faa:	2200      	movs	r2, #0
 8000fac:	801a      	strh	r2, [r3, #0]
    for (uint32_t i = 0; i < buffer_length; i++) {
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	61fb      	str	r3, [r7, #28]
 8000fb4:	69fa      	ldr	r2, [r7, #28]
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d3f2      	bcc.n	8000fa2 <ADC_DMA_Init+0x82>
    }
}
 8000fbc:	bf00      	nop
 8000fbe:	bf00      	nop
 8000fc0:	3724      	adds	r7, #36	@ 0x24
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	42c80000 	.word	0x42c80000

08000fd0 <ADC_DMA_Start>:

void ADC_DMA_Start(ADC_DMA *adc_dma) {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
    // Perform ADC calibration
    HAL_ADCEx_Calibration_Start(adc_dma->hadc, ADC_SINGLE_ENDED);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	217f      	movs	r1, #127	@ 0x7f
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f00b fb18 	bl	800c614 <HAL_ADCEx_Calibration_Start>

    // Start ADC with DMA
    HAL_ADC_Start_DMA(adc_dma->hadc, (uint32_t*)adc_dma->dma_buffer, adc_dma->buffer_length);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6818      	ldr	r0, [r3, #0]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6859      	ldr	r1, [r3, #4]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	f00a fc01 	bl	800b7f8 <HAL_ADC_Start_DMA>
}
 8000ff6:	bf00      	nop
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
	...

08001000 <ADC_DMA_GetValue>:

void ADC_DMA_Stop(ADC_DMA *adc_dma) {
    HAL_ADC_Stop_DMA(adc_dma->hadc);
}

float ADC_DMA_GetValue(ADC_DMA *adc_dma, uint8_t channel_index) {
 8001000:	b480      	push	{r7}
 8001002:	b087      	sub	sp, #28
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	460b      	mov	r3, r1
 800100a:	70fb      	strb	r3, [r7, #3]
    uint32_t sum = 0;
 800100c:	2300      	movs	r3, #0
 800100e:	617b      	str	r3, [r7, #20]
    uint32_t samples = 0;
 8001010:	2300      	movs	r3, #0
 8001012:	613b      	str	r3, [r7, #16]

    // Average all samples for this channel
    for (uint32_t j = channel_index; j < adc_dma->buffer_length; j += adc_dma->num_channels) {
 8001014:	78fb      	ldrb	r3, [r7, #3]
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	e012      	b.n	8001040 <ADC_DMA_GetValue+0x40>
        sum += adc_dma->dma_buffer[j];
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	685a      	ldr	r2, [r3, #4]
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	4413      	add	r3, r2
 8001024:	881b      	ldrh	r3, [r3, #0]
 8001026:	461a      	mov	r2, r3
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	4413      	add	r3, r2
 800102c:	617b      	str	r3, [r7, #20]
        samples++;
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	3301      	adds	r3, #1
 8001032:	613b      	str	r3, [r7, #16]
    for (uint32_t j = channel_index; j < adc_dma->buffer_length; j += adc_dma->num_channels) {
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	7b1b      	ldrb	r3, [r3, #12]
 8001038:	461a      	mov	r2, r3
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	4413      	add	r3, r2
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	689b      	ldr	r3, [r3, #8]
 8001044:	68fa      	ldr	r2, [r7, #12]
 8001046:	429a      	cmp	r2, r3
 8001048:	d3e7      	bcc.n	800101a <ADC_DMA_GetValue+0x1a>
    }

    // Calculate raw ADC value
    if (samples > 0) {
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d00c      	beq.n	800106a <ADC_DMA_GetValue+0x6a>
        return (float)sum / samples;
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	ee07 3a90 	vmov	s15, r3
 8001056:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	ee07 3a90 	vmov	s15, r3
 8001060:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001064:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001068:	e001      	b.n	800106e <ADC_DMA_GetValue+0x6e>
    }

    return 0.0f;
 800106a:	eddf 6a05 	vldr	s13, [pc, #20]	@ 8001080 <ADC_DMA_GetValue+0x80>
}
 800106e:	eef0 7a66 	vmov.f32	s15, s13
 8001072:	eeb0 0a67 	vmov.f32	s0, s15
 8001076:	371c      	adds	r7, #28
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	00000000 	.word	0x00000000

08001084 <ADC_DMA_SetCenterPoint>:

void ADC_DMA_SetCenterPoint(ADC_DMA *adc_dma, float center_point, uint8_t error_percentage) {
 8001084:	b480      	push	{r7}
 8001086:	b085      	sub	sp, #20
 8001088:	af00      	add	r7, sp, #0
 800108a:	60f8      	str	r0, [r7, #12]
 800108c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001090:	460b      	mov	r3, r1
 8001092:	71fb      	strb	r3, [r7, #7]
    adc_dma->center_point = center_point;
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	68ba      	ldr	r2, [r7, #8]
 8001098:	619a      	str	r2, [r3, #24]
    adc_dma->error_percentage = error_percentage;
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	79fa      	ldrb	r2, [r7, #7]
 800109e:	f883 2020 	strb.w	r2, [r3, #32]
    // Update threshold
    adc_dma->threshold = (adc_dma->error_percentage / 100.0f) * adc_dma->center_point;
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010a8:	ee07 3a90 	vmov	s15, r3
 80010ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010b0:	eddf 6a08 	vldr	s13, [pc, #32]	@ 80010d4 <ADC_DMA_SetCenterPoint+0x50>
 80010b4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	edd3 7a06 	vldr	s15, [r3, #24]
 80010be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	edc3 7a07 	vstr	s15, [r3, #28]
}
 80010c8:	bf00      	nop
 80010ca:	3714      	adds	r7, #20
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	42c80000 	.word	0x42c80000

080010d8 <ADC_DMA_GetJoystickValue>:

float ADC_DMA_GetJoystickValue(ADC_DMA *adc_dma, uint8_t channel_index, float min_output, float max_output) {
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	60f8      	str	r0, [r7, #12]
 80010e0:	460b      	mov	r3, r1
 80010e2:	ed87 0a01 	vstr	s0, [r7, #4]
 80010e6:	edc7 0a00 	vstr	s1, [r7]
 80010ea:	72fb      	strb	r3, [r7, #11]
    // Get raw value
    float value = ADC_DMA_GetValue(adc_dma, channel_index);
 80010ec:	7afb      	ldrb	r3, [r7, #11]
 80010ee:	4619      	mov	r1, r3
 80010f0:	68f8      	ldr	r0, [r7, #12]
 80010f2:	f7ff ff85 	bl	8001000 <ADC_DMA_GetValue>
 80010f6:	ed87 0a05 	vstr	s0, [r7, #20]

    // Apply threshold (dead zone) as in XYAnalog
    if (fabsf(value - adc_dma->center_point) < adc_dma->threshold) {
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	edd3 7a06 	vldr	s15, [r3, #24]
 8001100:	ed97 7a05 	vldr	s14, [r7, #20]
 8001104:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001108:	eeb0 7ae7 	vabs.f32	s14, s15
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	edd3 7a07 	vldr	s15, [r3, #28]
 8001112:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800111a:	d502      	bpl.n	8001122 <ADC_DMA_GetJoystickValue+0x4a>
        value = adc_dma->center_point;
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	699b      	ldr	r3, [r3, #24]
 8001120:	617b      	str	r3, [r7, #20]
    }

    // Map to desired output range
    return mapf(value, 0.0f, adc_dma->adc_resolution, min_output, max_output);
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	edd3 7a05 	vldr	s15, [r3, #20]
 8001128:	ed97 2a00 	vldr	s4, [r7]
 800112c:	edd7 1a01 	vldr	s3, [r7, #4]
 8001130:	eeb0 1a67 	vmov.f32	s2, s15
 8001134:	eddf 0a06 	vldr	s1, [pc, #24]	@ 8001150 <ADC_DMA_GetJoystickValue+0x78>
 8001138:	ed97 0a05 	vldr	s0, [r7, #20]
 800113c:	f000 fe49 	bl	8001dd2 <mapf>
 8001140:	eef0 7a40 	vmov.f32	s15, s0
}
 8001144:	eeb0 0a67 	vmov.f32	s0, s15
 8001148:	3718      	adds	r7, #24
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	00000000 	.word	0x00000000

08001154 <PWM_Satuation>:
 *  Created on: Apr 14, 2024
 *      Author: beamk
 */
#include "Controller.h"

int32_t PWM_Satuation(float _u, int32_t _upper_limit, int32_t _lower_limit) {
 8001154:	b480      	push	{r7}
 8001156:	b085      	sub	sp, #20
 8001158:	af00      	add	r7, sp, #0
 800115a:	ed87 0a03 	vstr	s0, [r7, #12]
 800115e:	60b8      	str	r0, [r7, #8]
 8001160:	6079      	str	r1, [r7, #4]
	if (_u > _upper_limit)
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	ee07 3a90 	vmov	s15, r3
 8001168:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800116c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001170:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001178:	dd01      	ble.n	800117e <PWM_Satuation+0x2a>
		return _upper_limit;
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	e013      	b.n	80011a6 <PWM_Satuation+0x52>
	else if (_u < _lower_limit)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	ee07 3a90 	vmov	s15, r3
 8001184:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001188:	ed97 7a03 	vldr	s14, [r7, #12]
 800118c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001194:	d501      	bpl.n	800119a <PWM_Satuation+0x46>
		return _lower_limit;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	e005      	b.n	80011a6 <PWM_Satuation+0x52>
	return (int32_t) _u;
 800119a:	edd7 7a03 	vldr	s15, [r7, #12]
 800119e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011a2:	ee17 3a90 	vmov	r3, s15
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3714      	adds	r7, #20
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr

080011b2 <PID_CONTROLLER_Init>:

void PID_CONTROLLER_Init(PID_CONTROLLER *controller, float _Kp, float _Ki,
		float _Kd, float _u_max) {
 80011b2:	b480      	push	{r7}
 80011b4:	b087      	sub	sp, #28
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6178      	str	r0, [r7, #20]
 80011ba:	ed87 0a04 	vstr	s0, [r7, #16]
 80011be:	edc7 0a03 	vstr	s1, [r7, #12]
 80011c2:	ed87 1a02 	vstr	s2, [r7, #8]
 80011c6:	edc7 1a01 	vstr	s3, [r7, #4]
	controller->Kp = _Kp;
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	601a      	str	r2, [r3, #0]
	controller->Ki = _Ki;
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	68fa      	ldr	r2, [r7, #12]
 80011d4:	605a      	str	r2, [r3, #4]
	controller->Kd = _Kd;
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	68ba      	ldr	r2, [r7, #8]
 80011da:	609a      	str	r2, [r3, #8]
	controller->prev_Kp = _Kp;
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	60da      	str	r2, [r3, #12]
	controller->prev_Ki = _Ki;
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	68fa      	ldr	r2, [r7, #12]
 80011e6:	611a      	str	r2, [r3, #16]
	controller->prev_Kd = _Kd;
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	68ba      	ldr	r2, [r7, #8]
 80011ec:	615a      	str	r2, [r3, #20]
	controller->u_max = _u_max;
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	619a      	str	r2, [r3, #24]
	controller->ek_1 = 0.0;
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	f04f 0200 	mov.w	r2, #0
 80011fa:	61da      	str	r2, [r3, #28]
	controller->ek_2 = 0.0;
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	f04f 0200 	mov.w	r2, #0
 8001202:	621a      	str	r2, [r3, #32]
	controller->u = 0.0;
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	f04f 0200 	mov.w	r2, #0
 800120a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800120c:	bf00      	nop
 800120e:	371c      	adds	r7, #28
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr

08001218 <PID_CONTROLLER_Compute>:

float PID_CONTROLLER_Compute(PID_CONTROLLER *controller, float ek) {
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	ed87 0a00 	vstr	s0, [r7]
	if (!((controller->u >= controller->u_max && ek > 0)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	edd3 7a06 	vldr	s15, [r3, #24]
 8001230:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001238:	bfac      	ite	ge
 800123a:	2301      	movge	r3, #1
 800123c:	2300      	movlt	r3, #0
 800123e:	b2db      	uxtb	r3, r3
 8001240:	f083 0301 	eor.w	r3, r3, #1
 8001244:	b2db      	uxtb	r3, r3
 8001246:	2b00      	cmp	r3, #0
 8001248:	d10e      	bne.n	8001268 <PID_CONTROLLER_Compute+0x50>
 800124a:	edd7 7a00 	vldr	s15, [r7]
 800124e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001256:	bfcc      	ite	gt
 8001258:	2301      	movgt	r3, #1
 800125a:	2300      	movle	r3, #0
 800125c:	b2db      	uxtb	r3, r3
 800125e:	f083 0301 	eor.w	r3, r3, #1
 8001262:	b2db      	uxtb	r3, r3
 8001264:	2b00      	cmp	r3, #0
 8001266:	d057      	beq.n	8001318 <PID_CONTROLLER_Compute+0x100>
			|| (controller->u <= -controller->u_max && ek < 0))) {
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	edd3 7a06 	vldr	s15, [r3, #24]
 8001274:	eef1 7a67 	vneg.f32	s15, s15
 8001278:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800127c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001280:	bf94      	ite	ls
 8001282:	2301      	movls	r3, #1
 8001284:	2300      	movhi	r3, #0
 8001286:	b2db      	uxtb	r3, r3
 8001288:	f083 0301 	eor.w	r3, r3, #1
 800128c:	b2db      	uxtb	r3, r3
	if (!((controller->u >= controller->u_max && ek > 0)
 800128e:	2b00      	cmp	r3, #0
 8001290:	d10e      	bne.n	80012b0 <PID_CONTROLLER_Compute+0x98>
			|| (controller->u <= -controller->u_max && ek < 0))) {
 8001292:	edd7 7a00 	vldr	s15, [r7]
 8001296:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800129a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800129e:	bf4c      	ite	mi
 80012a0:	2301      	movmi	r3, #1
 80012a2:	2300      	movpl	r3, #0
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	f083 0301 	eor.w	r3, r3, #1
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d033      	beq.n	8001318 <PID_CONTROLLER_Compute+0x100>
		controller->u += ((controller->Kp + controller->Ki + controller->Kd)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	edd3 6a00 	vldr	s13, [r3]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	edd3 7a01 	vldr	s15, [r3, #4]
 80012c2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	edd3 7a02 	vldr	s15, [r3, #8]
 80012cc:	ee76 6aa7 	vadd.f32	s13, s13, s15
				* ek)
 80012d0:	edd7 7a00 	vldr	s15, [r7]
 80012d4:	ee66 6aa7 	vmul.f32	s13, s13, s15
				- ((controller->Kp + (2 * controller->Kd)) * controller->ek_1)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	ed93 6a00 	vldr	s12, [r3]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	edd3 7a02 	vldr	s15, [r3, #8]
 80012e4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80012e8:	ee36 6a27 	vadd.f32	s12, s12, s15
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	edd3 7a07 	vldr	s15, [r3, #28]
 80012f2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80012f6:	ee76 6ae7 	vsub.f32	s13, s13, s15
				+ (controller->Kd * controller->ek_2);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	ed93 6a02 	vldr	s12, [r3, #8]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	edd3 7a08 	vldr	s15, [r3, #32]
 8001306:	ee66 7a27 	vmul.f32	s15, s12, s15
 800130a:	ee76 7aa7 	vadd.f32	s15, s13, s15
		controller->u += ((controller->Kp + controller->Ki + controller->Kd)
 800130e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	}
	controller->ek_2 = controller->ek_1;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	69da      	ldr	r2, [r3, #28]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	621a      	str	r2, [r3, #32]
	controller->ek_1 = ek;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	683a      	ldr	r2, [r7, #0]
 8001324:	61da      	str	r2, [r3, #28]
	return controller->u;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800132a:	ee07 3a90 	vmov	s15, r3
}
 800132e:	eeb0 0a67 	vmov.f32	s0, s15
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <MDXX_GPIO_init>:
	PWM_init(&(mdxx->pwm), htimp, timp_chx);
	mdxx->mode = 0;
}

void MDXX_GPIO_init(MDXX *mdxx, TIM_HandleTypeDef *htimp, uint16_t timp_chx,
		GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	60f8      	str	r0, [r7, #12]
 8001344:	60b9      	str	r1, [r7, #8]
 8001346:	603b      	str	r3, [r7, #0]
 8001348:	4613      	mov	r3, r2
 800134a:	80fb      	strh	r3, [r7, #6]
	mdxx->htimp = htimp;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	68ba      	ldr	r2, [r7, #8]
 8001350:	609a      	str	r2, [r3, #8]
	mdxx->timp_chx = timp_chx;
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	88fa      	ldrh	r2, [r7, #6]
 8001356:	819a      	strh	r2, [r3, #12]
	PWM_init(&(mdxx->pwm), htimp, timp_chx);
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	3328      	adds	r3, #40	@ 0x28
 800135c:	88fa      	ldrh	r2, [r7, #6]
 800135e:	68b9      	ldr	r1, [r7, #8]
 8001360:	4618      	mov	r0, r3
 8001362:	f002 fac9 	bl	80038f8 <PWM_init>
	mdxx->GPIOx = GPIOx;
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	683a      	ldr	r2, [r7, #0]
 800136a:	645a      	str	r2, [r3, #68]	@ 0x44
	mdxx->GPIO_Pin = GPIO_Pin;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	8b3a      	ldrh	r2, [r7, #24]
 8001370:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
	mdxx->mode = 1;
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	2201      	movs	r2, #1
 8001378:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
}
 800137c:	bf00      	nop
 800137e:	3710      	adds	r7, #16
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}

08001384 <MDXX_set_range>:
			mdxx->cmd = fabs(duty);
		}
	}
}

void MDXX_set_range(MDXX *mdxx, float freq, float duty) {
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	60f8      	str	r0, [r7, #12]
 800138c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001390:	edc7 0a01 	vstr	s1, [r7, #4]
	if (mdxx->mode == 0) {
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 800139a:	2b00      	cmp	r3, #0
 800139c:	d15f      	bne.n	800145e <MDXX_set_range+0xda>
		if (duty == 0) {
 800139e:	edd7 7a01 	vldr	s15, [r7, #4]
 80013a2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80013a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013aa:	d115      	bne.n	80013d8 <MDXX_set_range+0x54>
			PWM_write_range(&(mdxx->dir), freq, 0);
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	3310      	adds	r3, #16
 80013b0:	eddf 0a5f 	vldr	s1, [pc, #380]	@ 8001530 <MDXX_set_range+0x1ac>
 80013b4:	ed97 0a02 	vldr	s0, [r7, #8]
 80013b8:	4618      	mov	r0, r3
 80013ba:	f002 fbc5 	bl	8003b48 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, 0);
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	3328      	adds	r3, #40	@ 0x28
 80013c2:	eddf 0a5b 	vldr	s1, [pc, #364]	@ 8001530 <MDXX_set_range+0x1ac>
 80013c6:	ed97 0a02 	vldr	s0, [r7, #8]
 80013ca:	4618      	mov	r0, r3
 80013cc:	f002 fbbc 	bl	8003b48 <PWM_write_range>
			mdxx->cmd = 0;
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	2200      	movs	r2, #0
 80013d4:	641a      	str	r2, [r3, #64]	@ 0x40
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 1);
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
			mdxx->cmd = fabs(duty);
		}
	}
}
 80013d6:	e0a6      	b.n	8001526 <MDXX_set_range+0x1a2>
		} else if (duty > 0) {
 80013d8:	edd7 7a01 	vldr	s15, [r7, #4]
 80013dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013e4:	dd1a      	ble.n	800141c <MDXX_set_range+0x98>
			PWM_write_range(&(mdxx->dir), freq, 0);
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	3310      	adds	r3, #16
 80013ea:	eddf 0a51 	vldr	s1, [pc, #324]	@ 8001530 <MDXX_set_range+0x1ac>
 80013ee:	ed97 0a02 	vldr	s0, [r7, #8]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f002 fba8 	bl	8003b48 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, duty);
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	3328      	adds	r3, #40	@ 0x28
 80013fc:	edd7 0a01 	vldr	s1, [r7, #4]
 8001400:	ed97 0a02 	vldr	s0, [r7, #8]
 8001404:	4618      	mov	r0, r3
 8001406:	f002 fb9f 	bl	8003b48 <PWM_write_range>
			mdxx->cmd = duty;
 800140a:	edd7 7a01 	vldr	s15, [r7, #4]
 800140e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001412:	ee17 2a90 	vmov	r2, s15
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800141a:	e084      	b.n	8001526 <MDXX_set_range+0x1a2>
			PWM_write_range(&(mdxx->dir), freq, 100);
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	3310      	adds	r3, #16
 8001420:	eddf 0a44 	vldr	s1, [pc, #272]	@ 8001534 <MDXX_set_range+0x1b0>
 8001424:	ed97 0a02 	vldr	s0, [r7, #8]
 8001428:	4618      	mov	r0, r3
 800142a:	f002 fb8d 	bl	8003b48 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	3328      	adds	r3, #40	@ 0x28
 8001432:	edd7 7a01 	vldr	s15, [r7, #4]
 8001436:	eef0 7ae7 	vabs.f32	s15, s15
 800143a:	eef0 0a67 	vmov.f32	s1, s15
 800143e:	ed97 0a02 	vldr	s0, [r7, #8]
 8001442:	4618      	mov	r0, r3
 8001444:	f002 fb80 	bl	8003b48 <PWM_write_range>
			mdxx->cmd = fabs(duty);
 8001448:	edd7 7a01 	vldr	s15, [r7, #4]
 800144c:	eef0 7ae7 	vabs.f32	s15, s15
 8001450:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001454:	ee17 2a90 	vmov	r2, s15
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800145c:	e063      	b.n	8001526 <MDXX_set_range+0x1a2>
	} else if (mdxx->mode == 1) {
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8001464:	2b01      	cmp	r3, #1
 8001466:	d15e      	bne.n	8001526 <MDXX_set_range+0x1a2>
		if (duty == 0) {
 8001468:	edd7 7a01 	vldr	s15, [r7, #4]
 800146c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001474:	d115      	bne.n	80014a2 <MDXX_set_range+0x11e>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 0);
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8001480:	2200      	movs	r2, #0
 8001482:	4619      	mov	r1, r3
 8001484:	f00c f80c 	bl	800d4a0 <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, 0);
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	3328      	adds	r3, #40	@ 0x28
 800148c:	eddf 0a28 	vldr	s1, [pc, #160]	@ 8001530 <MDXX_set_range+0x1ac>
 8001490:	ed97 0a02 	vldr	s0, [r7, #8]
 8001494:	4618      	mov	r0, r3
 8001496:	f002 fb57 	bl	8003b48 <PWM_write_range>
			mdxx->cmd = 0;
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	2200      	movs	r2, #0
 800149e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80014a0:	e041      	b.n	8001526 <MDXX_set_range+0x1a2>
		} else if (duty > 0) {
 80014a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80014a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ae:	dd1a      	ble.n	80014e6 <MDXX_set_range+0x162>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 0);
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80014ba:	2200      	movs	r2, #0
 80014bc:	4619      	mov	r1, r3
 80014be:	f00b ffef 	bl	800d4a0 <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, duty);
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	3328      	adds	r3, #40	@ 0x28
 80014c6:	edd7 0a01 	vldr	s1, [r7, #4]
 80014ca:	ed97 0a02 	vldr	s0, [r7, #8]
 80014ce:	4618      	mov	r0, r3
 80014d0:	f002 fb3a 	bl	8003b48 <PWM_write_range>
			mdxx->cmd = duty;
 80014d4:	edd7 7a01 	vldr	s15, [r7, #4]
 80014d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014dc:	ee17 2a90 	vmov	r2, s15
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80014e4:	e01f      	b.n	8001526 <MDXX_set_range+0x1a2>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 1);
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80014f0:	2201      	movs	r2, #1
 80014f2:	4619      	mov	r1, r3
 80014f4:	f00b ffd4 	bl	800d4a0 <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	3328      	adds	r3, #40	@ 0x28
 80014fc:	edd7 7a01 	vldr	s15, [r7, #4]
 8001500:	eef0 7ae7 	vabs.f32	s15, s15
 8001504:	eef0 0a67 	vmov.f32	s1, s15
 8001508:	ed97 0a02 	vldr	s0, [r7, #8]
 800150c:	4618      	mov	r0, r3
 800150e:	f002 fb1b 	bl	8003b48 <PWM_write_range>
			mdxx->cmd = fabs(duty);
 8001512:	edd7 7a01 	vldr	s15, [r7, #4]
 8001516:	eef0 7ae7 	vabs.f32	s15, s15
 800151a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800151e:	ee17 2a90 	vmov	r2, s15
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001526:	bf00      	nop
 8001528:	3710      	adds	r7, #16
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	00000000 	.word	0x00000000
 8001534:	42c80000 	.word	0x42c80000

08001538 <REVOLUTE_MOTOR_FFD_Init>:
	.offset = 30.07e-3,
    .c = 24.13e-3,
    .prismatic_pulley_radius = 1.5915e-2 		// m
};

void REVOLUTE_MOTOR_FFD_Init(DC_MOTOR_FFeedward *motor, Motor_Constant_Structure *_Mx){
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	6039      	str	r1, [r7, #0]
    motor->Mx = _Mx;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	683a      	ldr	r2, [r7, #0]
 8001546:	601a      	str	r2, [r3, #0]
}
 8001548:	bf00      	nop
 800154a:	370c      	adds	r7, #12
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr

08001554 <REVOLUTE_MOTOR_FFD_Compute>:

float REVOLUTE_MOTOR_FFD_Compute(DC_MOTOR_FFeedward *motor, float qd){
 8001554:	b5b0      	push	{r4, r5, r7, lr}
 8001556:	ed2d 8b02 	vpush	{d8}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	ed87 0a00 	vstr	s0, [r7]
    float transfer_function = (motor->Mx->B * motor->Mx->R + motor->Mx->Ke * motor->Mx->Kt) / motor->Mx->Kt;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001574:	f7ff f80c 	bl	8000590 <__aeabi_dmul>
 8001578:	4602      	mov	r2, r0
 800157a:	460b      	mov	r3, r1
 800157c:	4614      	mov	r4, r2
 800157e:	461d      	mov	r5, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001590:	f7fe fffe 	bl	8000590 <__aeabi_dmul>
 8001594:	4602      	mov	r2, r0
 8001596:	460b      	mov	r3, r1
 8001598:	4620      	mov	r0, r4
 800159a:	4629      	mov	r1, r5
 800159c:	f7fe fe42 	bl	8000224 <__adddf3>
 80015a0:	4602      	mov	r2, r0
 80015a2:	460b      	mov	r3, r1
 80015a4:	4610      	mov	r0, r2
 80015a6:	4619      	mov	r1, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80015b0:	f7ff f918 	bl	80007e4 <__aeabi_ddiv>
 80015b4:	4602      	mov	r2, r0
 80015b6:	460b      	mov	r3, r1
 80015b8:	4610      	mov	r0, r2
 80015ba:	4619      	mov	r1, r3
 80015bc:	f7ff faca 	bl	8000b54 <__aeabi_d2f>
 80015c0:	4603      	mov	r3, r0
 80015c2:	60fb      	str	r3, [r7, #12]

    float v = qd * transfer_function;
 80015c4:	ed97 7a00 	vldr	s14, [r7]
 80015c8:	edd7 7a03 	vldr	s15, [r7, #12]
 80015cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015d0:	edc7 7a02 	vstr	s15, [r7, #8]

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80015dc:	4610      	mov	r0, r2
 80015de:	4619      	mov	r1, r3
 80015e0:	f7ff fab8 	bl	8000b54 <__aeabi_d2f>
 80015e4:	4603      	mov	r3, r0
 80015e6:	ee07 3a90 	vmov	s15, r3
 80015ea:	eeb1 8a67 	vneg.f32	s16, s15
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80015f6:	4610      	mov	r0, r2
 80015f8:	4619      	mov	r1, r3
 80015fa:	f7ff faab 	bl	8000b54 <__aeabi_d2f>
 80015fe:	4604      	mov	r4, r0
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001608:	4610      	mov	r0, r2
 800160a:	4619      	mov	r1, r3
 800160c:	f7ff faa2 	bl	8000b54 <__aeabi_d2f>
 8001610:	4603      	mov	r3, r0
 8001612:	ee07 3a90 	vmov	s15, r3
 8001616:	eef1 8a67 	vneg.f32	s17, s15
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001622:	4610      	mov	r0, r2
 8001624:	4619      	mov	r1, r3
 8001626:	f7ff fa95 	bl	8000b54 <__aeabi_d2f>
 800162a:	4603      	mov	r3, r0
 800162c:	ee02 3a10 	vmov	s4, r3
 8001630:	eef0 1a68 	vmov.f32	s3, s17
 8001634:	ee01 4a10 	vmov	s2, r4
 8001638:	eef0 0a48 	vmov.f32	s1, s16
 800163c:	ed97 0a02 	vldr	s0, [r7, #8]
 8001640:	f000 fbc7 	bl	8001dd2 <mapf>
 8001644:	eef0 7a40 	vmov.f32	s15, s0
}
 8001648:	eeb0 0a67 	vmov.f32	s0, s15
 800164c:	3710      	adds	r7, #16
 800164e:	46bd      	mov	sp, r7
 8001650:	ecbd 8b02 	vpop	{d8}
 8001654:	bdb0      	pop	{r4, r5, r7, pc}

08001656 <REVOLUTE_MOTOR_DFD_Init>:

void REVOLUTE_MOTOR_DFD_Init(DC_MOTOR_DFeedward *motor, Motor_Constant_Structure *_Mx, Environment *_En){
 8001656:	b480      	push	{r7}
 8001658:	b085      	sub	sp, #20
 800165a:	af00      	add	r7, sp, #0
 800165c:	60f8      	str	r0, [r7, #12]
 800165e:	60b9      	str	r1, [r7, #8]
 8001660:	607a      	str	r2, [r7, #4]
    motor->Mx = _Mx;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	68ba      	ldr	r2, [r7, #8]
 8001666:	601a      	str	r2, [r3, #0]
    motor->En = _En;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	687a      	ldr	r2, [r7, #4]
 800166c:	605a      	str	r2, [r3, #4]
}
 800166e:	bf00      	nop
 8001670:	3714      	adds	r7, #20
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr

0800167a <REVOLUTE_MOTOR_DFD_Compute>:

float REVOLUTE_MOTOR_DFD_Compute(DC_MOTOR_DFeedward *motor, float q, float s){
 800167a:	b5b0      	push	{r4, r5, r7, lr}
 800167c:	ed2d 8b02 	vpush	{d8}
 8001680:	b088      	sub	sp, #32
 8001682:	af00      	add	r7, sp, #0
 8001684:	60f8      	str	r0, [r7, #12]
 8001686:	ed87 0a02 	vstr	s0, [r7, #8]
 800168a:	edc7 0a01 	vstr	s1, [r7, #4]
    float gravity_compensate_plotter = motor->En->plotter_mass * motor->En->g * sin(q) * (s + motor->En->offset);
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	ed93 7a01 	vldr	s14, [r3, #4]
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	edd3 7a00 	vldr	s15, [r3]
 800169e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016a2:	ee17 0a90 	vmov	r0, s15
 80016a6:	f7fe ff1b 	bl	80004e0 <__aeabi_f2d>
 80016aa:	4604      	mov	r4, r0
 80016ac:	460d      	mov	r5, r1
 80016ae:	68b8      	ldr	r0, [r7, #8]
 80016b0:	f7fe ff16 	bl	80004e0 <__aeabi_f2d>
 80016b4:	4602      	mov	r2, r0
 80016b6:	460b      	mov	r3, r1
 80016b8:	ec43 2b10 	vmov	d0, r2, r3
 80016bc:	f011 fdb4 	bl	8013228 <sin>
 80016c0:	ec53 2b10 	vmov	r2, r3, d0
 80016c4:	4620      	mov	r0, r4
 80016c6:	4629      	mov	r1, r5
 80016c8:	f7fe ff62 	bl	8000590 <__aeabi_dmul>
 80016cc:	4602      	mov	r2, r0
 80016ce:	460b      	mov	r3, r1
 80016d0:	4614      	mov	r4, r2
 80016d2:	461d      	mov	r5, r3
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	ed93 7a05 	vldr	s14, [r3, #20]
 80016dc:	edd7 7a01 	vldr	s15, [r7, #4]
 80016e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016e4:	ee17 0a90 	vmov	r0, s15
 80016e8:	f7fe fefa 	bl	80004e0 <__aeabi_f2d>
 80016ec:	4602      	mov	r2, r0
 80016ee:	460b      	mov	r3, r1
 80016f0:	4620      	mov	r0, r4
 80016f2:	4629      	mov	r1, r5
 80016f4:	f7fe ff4c 	bl	8000590 <__aeabi_dmul>
 80016f8:	4602      	mov	r2, r0
 80016fa:	460b      	mov	r3, r1
 80016fc:	4610      	mov	r0, r2
 80016fe:	4619      	mov	r1, r3
 8001700:	f7ff fa28 	bl	8000b54 <__aeabi_d2f>
 8001704:	4603      	mov	r3, r0
 8001706:	61fb      	str	r3, [r7, #28]

    float gravity_compensate_rail = motor->En->slide_rail_mass * motor->En->g * sin(q) * (motor->En->c);
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	ed93 7a02 	vldr	s14, [r3, #8]
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	edd3 7a00 	vldr	s15, [r3]
 8001718:	ee67 7a27 	vmul.f32	s15, s14, s15
 800171c:	ee17 0a90 	vmov	r0, s15
 8001720:	f7fe fede 	bl	80004e0 <__aeabi_f2d>
 8001724:	4604      	mov	r4, r0
 8001726:	460d      	mov	r5, r1
 8001728:	68b8      	ldr	r0, [r7, #8]
 800172a:	f7fe fed9 	bl	80004e0 <__aeabi_f2d>
 800172e:	4602      	mov	r2, r0
 8001730:	460b      	mov	r3, r1
 8001732:	ec43 2b10 	vmov	d0, r2, r3
 8001736:	f011 fd77 	bl	8013228 <sin>
 800173a:	ec53 2b10 	vmov	r2, r3, d0
 800173e:	4620      	mov	r0, r4
 8001740:	4629      	mov	r1, r5
 8001742:	f7fe ff25 	bl	8000590 <__aeabi_dmul>
 8001746:	4602      	mov	r2, r0
 8001748:	460b      	mov	r3, r1
 800174a:	4614      	mov	r4, r2
 800174c:	461d      	mov	r5, r3
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	4618      	mov	r0, r3
 8001756:	f7fe fec3 	bl	80004e0 <__aeabi_f2d>
 800175a:	4602      	mov	r2, r0
 800175c:	460b      	mov	r3, r1
 800175e:	4620      	mov	r0, r4
 8001760:	4629      	mov	r1, r5
 8001762:	f7fe ff15 	bl	8000590 <__aeabi_dmul>
 8001766:	4602      	mov	r2, r0
 8001768:	460b      	mov	r3, r1
 800176a:	4610      	mov	r0, r2
 800176c:	4619      	mov	r1, r3
 800176e:	f7ff f9f1 	bl	8000b54 <__aeabi_d2f>
 8001772:	4603      	mov	r3, r0
 8001774:	61bb      	str	r3, [r7, #24]

    float transfer_function = motor->Mx->R / motor->Mx->Kt;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001786:	f7ff f82d 	bl	80007e4 <__aeabi_ddiv>
 800178a:	4602      	mov	r2, r0
 800178c:	460b      	mov	r3, r1
 800178e:	4610      	mov	r0, r2
 8001790:	4619      	mov	r1, r3
 8001792:	f7ff f9df 	bl	8000b54 <__aeabi_d2f>
 8001796:	4603      	mov	r3, r0
 8001798:	617b      	str	r3, [r7, #20]

    float v = (gravity_compensate_plotter - gravity_compensate_rail) * transfer_function;
 800179a:	ed97 7a07 	vldr	s14, [r7, #28]
 800179e:	edd7 7a06 	vldr	s15, [r7, #24]
 80017a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017a6:	ed97 7a05 	vldr	s14, [r7, #20]
 80017aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017ae:	edc7 7a04 	vstr	s15, [r7, #16]

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80017ba:	4610      	mov	r0, r2
 80017bc:	4619      	mov	r1, r3
 80017be:	f7ff f9c9 	bl	8000b54 <__aeabi_d2f>
 80017c2:	4603      	mov	r3, r0
 80017c4:	ee07 3a90 	vmov	s15, r3
 80017c8:	eeb1 8a67 	vneg.f32	s16, s15
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80017d4:	4610      	mov	r0, r2
 80017d6:	4619      	mov	r1, r3
 80017d8:	f7ff f9bc 	bl	8000b54 <__aeabi_d2f>
 80017dc:	4604      	mov	r4, r0
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80017e6:	4610      	mov	r0, r2
 80017e8:	4619      	mov	r1, r3
 80017ea:	f7ff f9b3 	bl	8000b54 <__aeabi_d2f>
 80017ee:	4603      	mov	r3, r0
 80017f0:	ee07 3a90 	vmov	s15, r3
 80017f4:	eef1 8a67 	vneg.f32	s17, s15
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001800:	4610      	mov	r0, r2
 8001802:	4619      	mov	r1, r3
 8001804:	f7ff f9a6 	bl	8000b54 <__aeabi_d2f>
 8001808:	4603      	mov	r3, r0
 800180a:	ee02 3a10 	vmov	s4, r3
 800180e:	eef0 1a68 	vmov.f32	s3, s17
 8001812:	ee01 4a10 	vmov	s2, r4
 8001816:	eef0 0a48 	vmov.f32	s1, s16
 800181a:	ed97 0a04 	vldr	s0, [r7, #16]
 800181e:	f000 fad8 	bl	8001dd2 <mapf>
 8001822:	eef0 7a40 	vmov.f32	s15, s0
}
 8001826:	eeb0 0a67 	vmov.f32	s0, s15
 800182a:	3720      	adds	r7, #32
 800182c:	46bd      	mov	sp, r7
 800182e:	ecbd 8b02 	vpop	{d8}
 8001832:	bdb0      	pop	{r4, r5, r7, pc}

08001834 <PRISMATIC_MOTOR_FFD_Init>:

void PRISMATIC_MOTOR_FFD_Init(DC_MOTOR_FFeedward *motor, Motor_Constant_Structure *_Mx) {
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	6039      	str	r1, [r7, #0]
    motor->Mx = _Mx;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	683a      	ldr	r2, [r7, #0]
 8001842:	601a      	str	r2, [r3, #0]
}
 8001844:	bf00      	nop
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <PRISMATIC_MOTOR_FFD_Compute>:

float PRISMATIC_MOTOR_FFD_Compute(DC_MOTOR_FFeedward *motor, float sd) {
 8001850:	b5b0      	push	{r4, r5, r7, lr}
 8001852:	ed2d 8b02 	vpush	{d8}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	ed87 0a00 	vstr	s0, [r7]
    float transfer_function = (motor->Mx->B * motor->Mx->R  + motor->Mx->Ke * motor->Mx->Kt) / motor->Mx->Kt;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001870:	f7fe fe8e 	bl	8000590 <__aeabi_dmul>
 8001874:	4602      	mov	r2, r0
 8001876:	460b      	mov	r3, r1
 8001878:	4614      	mov	r4, r2
 800187a:	461d      	mov	r5, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800188c:	f7fe fe80 	bl	8000590 <__aeabi_dmul>
 8001890:	4602      	mov	r2, r0
 8001892:	460b      	mov	r3, r1
 8001894:	4620      	mov	r0, r4
 8001896:	4629      	mov	r1, r5
 8001898:	f7fe fcc4 	bl	8000224 <__adddf3>
 800189c:	4602      	mov	r2, r0
 800189e:	460b      	mov	r3, r1
 80018a0:	4610      	mov	r0, r2
 80018a2:	4619      	mov	r1, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80018ac:	f7fe ff9a 	bl	80007e4 <__aeabi_ddiv>
 80018b0:	4602      	mov	r2, r0
 80018b2:	460b      	mov	r3, r1
 80018b4:	4610      	mov	r0, r2
 80018b6:	4619      	mov	r1, r3
 80018b8:	f7ff f94c 	bl	8000b54 <__aeabi_d2f>
 80018bc:	4603      	mov	r3, r0
 80018be:	60fb      	str	r3, [r7, #12]

    float v = sd * transfer_function;
 80018c0:	ed97 7a00 	vldr	s14, [r7]
 80018c4:	edd7 7a03 	vldr	s15, [r7, #12]
 80018c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018cc:	edc7 7a02 	vstr	s15, [r7, #8]

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80018d8:	4610      	mov	r0, r2
 80018da:	4619      	mov	r1, r3
 80018dc:	f7ff f93a 	bl	8000b54 <__aeabi_d2f>
 80018e0:	4603      	mov	r3, r0
 80018e2:	ee07 3a90 	vmov	s15, r3
 80018e6:	eeb1 8a67 	vneg.f32	s16, s15
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80018f2:	4610      	mov	r0, r2
 80018f4:	4619      	mov	r1, r3
 80018f6:	f7ff f92d 	bl	8000b54 <__aeabi_d2f>
 80018fa:	4604      	mov	r4, r0
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001904:	4610      	mov	r0, r2
 8001906:	4619      	mov	r1, r3
 8001908:	f7ff f924 	bl	8000b54 <__aeabi_d2f>
 800190c:	4603      	mov	r3, r0
 800190e:	ee07 3a90 	vmov	s15, r3
 8001912:	eef1 8a67 	vneg.f32	s17, s15
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800191e:	4610      	mov	r0, r2
 8001920:	4619      	mov	r1, r3
 8001922:	f7ff f917 	bl	8000b54 <__aeabi_d2f>
 8001926:	4603      	mov	r3, r0
 8001928:	ee02 3a10 	vmov	s4, r3
 800192c:	eef0 1a68 	vmov.f32	s3, s17
 8001930:	ee01 4a10 	vmov	s2, r4
 8001934:	eef0 0a48 	vmov.f32	s1, s16
 8001938:	ed97 0a02 	vldr	s0, [r7, #8]
 800193c:	f000 fa49 	bl	8001dd2 <mapf>
 8001940:	eef0 7a40 	vmov.f32	s15, s0
}
 8001944:	eeb0 0a67 	vmov.f32	s0, s15
 8001948:	3710      	adds	r7, #16
 800194a:	46bd      	mov	sp, r7
 800194c:	ecbd 8b02 	vpop	{d8}
 8001950:	bdb0      	pop	{r4, r5, r7, pc}

08001952 <PRISMATIC_MOTOR_DFD_Init>:

void PRISMATIC_MOTOR_DFD_Init(DC_MOTOR_DFeedward *motor, Motor_Constant_Structure *_Mx, Environment *_En){
 8001952:	b480      	push	{r7}
 8001954:	b085      	sub	sp, #20
 8001956:	af00      	add	r7, sp, #0
 8001958:	60f8      	str	r0, [r7, #12]
 800195a:	60b9      	str	r1, [r7, #8]
 800195c:	607a      	str	r2, [r7, #4]
    motor->Mx = _Mx;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	68ba      	ldr	r2, [r7, #8]
 8001962:	601a      	str	r2, [r3, #0]
    motor->En = _En;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	687a      	ldr	r2, [r7, #4]
 8001968:	605a      	str	r2, [r3, #4]
}
 800196a:	bf00      	nop
 800196c:	3714      	adds	r7, #20
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr

08001976 <PRISMATIC_MOTOR_DFD_Compute>:

float PRISMATIC_MOTOR_DFD_Compute(DC_MOTOR_DFeedward *motor, float q, float qd, float s){
 8001976:	b5b0      	push	{r4, r5, r7, lr}
 8001978:	ed2d 8b02 	vpush	{d8}
 800197c:	b088      	sub	sp, #32
 800197e:	af00      	add	r7, sp, #0
 8001980:	60f8      	str	r0, [r7, #12]
 8001982:	ed87 0a02 	vstr	s0, [r7, #8]
 8001986:	edc7 0a01 	vstr	s1, [r7, #4]
 800198a:	ed87 1a00 	vstr	s2, [r7]
    float gravity_compensate_plotter = motor->En->plotter_mass * motor->En->g * cos(q);
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	ed93 7a01 	vldr	s14, [r3, #4]
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	edd3 7a00 	vldr	s15, [r3]
 800199e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019a2:	ee17 0a90 	vmov	r0, s15
 80019a6:	f7fe fd9b 	bl	80004e0 <__aeabi_f2d>
 80019aa:	4604      	mov	r4, r0
 80019ac:	460d      	mov	r5, r1
 80019ae:	68b8      	ldr	r0, [r7, #8]
 80019b0:	f7fe fd96 	bl	80004e0 <__aeabi_f2d>
 80019b4:	4602      	mov	r2, r0
 80019b6:	460b      	mov	r3, r1
 80019b8:	ec43 2b10 	vmov	d0, r2, r3
 80019bc:	f011 fbe0 	bl	8013180 <cos>
 80019c0:	ec53 2b10 	vmov	r2, r3, d0
 80019c4:	4620      	mov	r0, r4
 80019c6:	4629      	mov	r1, r5
 80019c8:	f7fe fde2 	bl	8000590 <__aeabi_dmul>
 80019cc:	4602      	mov	r2, r0
 80019ce:	460b      	mov	r3, r1
 80019d0:	4610      	mov	r0, r2
 80019d2:	4619      	mov	r1, r3
 80019d4:	f7ff f8be 	bl	8000b54 <__aeabi_d2f>
 80019d8:	4603      	mov	r3, r0
 80019da:	61fb      	str	r3, [r7, #28]

    float centrifugal_force = motor->En->plotter_mass * qd * qd * s;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	ed93 7a01 	vldr	s14, [r3, #4]
 80019e4:	edd7 7a01 	vldr	s15, [r7, #4]
 80019e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019ec:	edd7 7a01 	vldr	s15, [r7, #4]
 80019f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019f4:	ed97 7a00 	vldr	s14, [r7]
 80019f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019fc:	edc7 7a06 	vstr	s15, [r7, #24]

    float transfer_function = (motor->Mx->R * motor->En->prismatic_pulley_radius) / motor->Mx->Kt;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	691b      	ldr	r3, [r3, #16]
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7fe fd66 	bl	80004e0 <__aeabi_f2d>
 8001a14:	4602      	mov	r2, r0
 8001a16:	460b      	mov	r3, r1
 8001a18:	4620      	mov	r0, r4
 8001a1a:	4629      	mov	r1, r5
 8001a1c:	f7fe fdb8 	bl	8000590 <__aeabi_dmul>
 8001a20:	4602      	mov	r2, r0
 8001a22:	460b      	mov	r3, r1
 8001a24:	4610      	mov	r0, r2
 8001a26:	4619      	mov	r1, r3
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001a30:	f7fe fed8 	bl	80007e4 <__aeabi_ddiv>
 8001a34:	4602      	mov	r2, r0
 8001a36:	460b      	mov	r3, r1
 8001a38:	4610      	mov	r0, r2
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	f7ff f88a 	bl	8000b54 <__aeabi_d2f>
 8001a40:	4603      	mov	r3, r0
 8001a42:	617b      	str	r3, [r7, #20]

    float v = (gravity_compensate_plotter + centrifugal_force) * transfer_function;
 8001a44:	ed97 7a07 	vldr	s14, [r7, #28]
 8001a48:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a50:	ed97 7a05 	vldr	s14, [r7, #20]
 8001a54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a58:	edc7 7a04 	vstr	s15, [r7, #16]

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001a64:	4610      	mov	r0, r2
 8001a66:	4619      	mov	r1, r3
 8001a68:	f7ff f874 	bl	8000b54 <__aeabi_d2f>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	ee07 3a90 	vmov	s15, r3
 8001a72:	eeb1 8a67 	vneg.f32	s16, s15
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001a7e:	4610      	mov	r0, r2
 8001a80:	4619      	mov	r1, r3
 8001a82:	f7ff f867 	bl	8000b54 <__aeabi_d2f>
 8001a86:	4604      	mov	r4, r0
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001a90:	4610      	mov	r0, r2
 8001a92:	4619      	mov	r1, r3
 8001a94:	f7ff f85e 	bl	8000b54 <__aeabi_d2f>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	ee07 3a90 	vmov	s15, r3
 8001a9e:	eef1 8a67 	vneg.f32	s17, s15
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001aaa:	4610      	mov	r0, r2
 8001aac:	4619      	mov	r1, r3
 8001aae:	f7ff f851 	bl	8000b54 <__aeabi_d2f>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	ee02 3a10 	vmov	s4, r3
 8001ab8:	eef0 1a68 	vmov.f32	s3, s17
 8001abc:	ee01 4a10 	vmov	s2, r4
 8001ac0:	eef0 0a48 	vmov.f32	s1, s16
 8001ac4:	ed97 0a04 	vldr	s0, [r7, #16]
 8001ac8:	f000 f983 	bl	8001dd2 <mapf>
 8001acc:	eef0 7a40 	vmov.f32	s15, s0
}
 8001ad0:	eeb0 0a67 	vmov.f32	s0, s15
 8001ad4:	3720      	adds	r7, #32
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	ecbd 8b02 	vpop	{d8}
 8001adc:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001ae0 <FIR_init>:
 *      Author: transporter
 */
#include "FIR.h"
#include "arm_math.h"

void FIR_init(FIR *fir, uint16_t numTaps, float cutoffFreq, float samplingFreq) {
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	ed2d 8b02 	vpush	{d8}
 8001ae6:	b08a      	sub	sp, #40	@ 0x28
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	60f8      	str	r0, [r7, #12]
 8001aec:	460b      	mov	r3, r1
 8001aee:	ed87 0a01 	vstr	s0, [r7, #4]
 8001af2:	edc7 0a00 	vstr	s1, [r7]
 8001af6:	817b      	strh	r3, [r7, #10]
    // Make sure numTaps is odd
    if (numTaps % 2 == 0) {
 8001af8:	897b      	ldrh	r3, [r7, #10]
 8001afa:	f003 0301 	and.w	r3, r3, #1
 8001afe:	b29b      	uxth	r3, r3
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d102      	bne.n	8001b0a <FIR_init+0x2a>
        numTaps += 1;
 8001b04:	897b      	ldrh	r3, [r7, #10]
 8001b06:	3301      	adds	r3, #1
 8001b08:	817b      	strh	r3, [r7, #10]
    }

    fir->numTaps = numTaps;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	897a      	ldrh	r2, [r7, #10]
 8001b0e:	811a      	strh	r2, [r3, #8]
    fir->bufferIndex = 0;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	2200      	movs	r2, #0
 8001b14:	815a      	strh	r2, [r3, #10]

    // Allocate memory for coefficients and buffer
    fir->coeffs = (float*)malloc(numTaps * sizeof(float));
 8001b16:	897b      	ldrh	r3, [r7, #10]
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f011 fa28 	bl	8012f70 <malloc>
 8001b20:	4603      	mov	r3, r0
 8001b22:	461a      	mov	r2, r3
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	601a      	str	r2, [r3, #0]
    fir->buffer = (float*)malloc(numTaps * sizeof(float));
 8001b28:	897b      	ldrh	r3, [r7, #10]
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f011 fa1f 	bl	8012f70 <malloc>
 8001b32:	4603      	mov	r3, r0
 8001b34:	461a      	mov	r2, r3
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	605a      	str	r2, [r3, #4]

    if (fir->coeffs != NULL && fir->buffer != NULL) {
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	f000 80e0 	beq.w	8001d04 <FIR_init+0x224>
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	f000 80db 	beq.w	8001d04 <FIR_init+0x224>
        // Clear buffer
        for (uint16_t i = 0; i < numTaps; i++) {
 8001b4e:	2300      	movs	r3, #0
 8001b50:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001b52:	e00a      	b.n	8001b6a <FIR_init+0x8a>
            fir->buffer[i] = 0.0f;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	685a      	ldr	r2, [r3, #4]
 8001b58:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	4413      	add	r3, r2
 8001b5e:	f04f 0200 	mov.w	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]
        for (uint16_t i = 0; i < numTaps; i++) {
 8001b64:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001b66:	3301      	adds	r3, #1
 8001b68:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001b6a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001b6c:	897b      	ldrh	r3, [r7, #10]
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d3f0      	bcc.n	8001b54 <FIR_init+0x74>
        }

        // Calculate normalized cutoff frequency (0 to 0.5)
        float omega = cutoffFreq / samplingFreq;
 8001b72:	edd7 6a01 	vldr	s13, [r7, #4]
 8001b76:	ed97 7a00 	vldr	s14, [r7]
 8001b7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b7e:	edc7 7a06 	vstr	s15, [r7, #24]

        // Calculate filter coefficients (low-pass)
        int16_t half_taps = numTaps / 2;
 8001b82:	897b      	ldrh	r3, [r7, #10]
 8001b84:	085b      	lsrs	r3, r3, #1
 8001b86:	b29b      	uxth	r3, r3
 8001b88:	82fb      	strh	r3, [r7, #22]
        for (int16_t i = 0; i < numTaps; i++) {
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001b8e:	e077      	b.n	8001c80 <FIR_init+0x1a0>
            if (i == half_taps) {
 8001b90:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8001b94:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d10c      	bne.n	8001bb6 <FIR_init+0xd6>
                // Center tap
                fir->coeffs[i] = 2.0f * omega;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	4413      	add	r3, r2
 8001ba8:	edd7 7a06 	vldr	s15, [r7, #24]
 8001bac:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001bb0:	edc3 7a00 	vstr	s15, [r3]
 8001bb4:	e02c      	b.n	8001c10 <FIR_init+0x130>
            } else {
                // Side taps
                int16_t n = i - half_taps;
 8001bb6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001bb8:	8afb      	ldrh	r3, [r7, #22]
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	b29b      	uxth	r3, r3
 8001bbe:	82bb      	strh	r3, [r7, #20]
                fir->coeffs[i] = sinf(2.0f * PI * omega * n) / (PI * n);
 8001bc0:	edd7 7a06 	vldr	s15, [r7, #24]
 8001bc4:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8001d10 <FIR_init+0x230>
 8001bc8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001bcc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001bd0:	ee07 3a90 	vmov	s15, r3
 8001bd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bdc:	eeb0 0a67 	vmov.f32	s0, s15
 8001be0:	f011 fbf8 	bl	80133d4 <sinf>
 8001be4:	eef0 6a40 	vmov.f32	s13, s0
 8001be8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001bec:	ee07 3a90 	vmov	s15, r3
 8001bf0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bf4:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8001d14 <FIR_init+0x234>
 8001bf8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	4413      	add	r3, r2
 8001c08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c0c:	edc3 7a00 	vstr	s15, [r3]
            }

            // Apply Hamming window
            fir->coeffs[i] *= (0.54f - 0.46f * cosf(2.0f * PI * i / (numTaps - 1)));
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	4413      	add	r3, r2
 8001c1c:	ed93 8a00 	vldr	s16, [r3]
 8001c20:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001c24:	ee07 3a90 	vmov	s15, r3
 8001c28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c2c:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8001d10 <FIR_init+0x230>
 8001c30:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c34:	897b      	ldrh	r3, [r7, #10]
 8001c36:	3b01      	subs	r3, #1
 8001c38:	ee07 3a90 	vmov	s15, r3
 8001c3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c40:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001c44:	eeb0 0a66 	vmov.f32	s0, s13
 8001c48:	f011 fb80 	bl	801334c <cosf>
 8001c4c:	eef0 7a40 	vmov.f32	s15, s0
 8001c50:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8001d18 <FIR_init+0x238>
 8001c54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c58:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8001d1c <FIR_init+0x23c>
 8001c5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	4413      	add	r3, r2
 8001c6c:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001c70:	edc3 7a00 	vstr	s15, [r3]
        for (int16_t i = 0; i < numTaps; i++) {
 8001c74:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001c78:	b29b      	uxth	r3, r3
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	b29b      	uxth	r3, r3
 8001c7e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001c80:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8001c84:	897b      	ldrh	r3, [r7, #10]
 8001c86:	429a      	cmp	r2, r3
 8001c88:	db82      	blt.n	8001b90 <FIR_init+0xb0>
        }

        // Normalize gain
        float sum = 0.0f;
 8001c8a:	f04f 0300 	mov.w	r3, #0
 8001c8e:	623b      	str	r3, [r7, #32]
        for (uint16_t i = 0; i < numTaps; i++) {
 8001c90:	2300      	movs	r3, #0
 8001c92:	83fb      	strh	r3, [r7, #30]
 8001c94:	e00f      	b.n	8001cb6 <FIR_init+0x1d6>
            sum += fir->coeffs[i];
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	8bfb      	ldrh	r3, [r7, #30]
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	4413      	add	r3, r2
 8001ca0:	edd3 7a00 	vldr	s15, [r3]
 8001ca4:	ed97 7a08 	vldr	s14, [r7, #32]
 8001ca8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cac:	edc7 7a08 	vstr	s15, [r7, #32]
        for (uint16_t i = 0; i < numTaps; i++) {
 8001cb0:	8bfb      	ldrh	r3, [r7, #30]
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	83fb      	strh	r3, [r7, #30]
 8001cb6:	8bfa      	ldrh	r2, [r7, #30]
 8001cb8:	897b      	ldrh	r3, [r7, #10]
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d3eb      	bcc.n	8001c96 <FIR_init+0x1b6>
        }

        if (sum != 0.0f) {
 8001cbe:	edd7 7a08 	vldr	s15, [r7, #32]
 8001cc2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001cc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cca:	d01b      	beq.n	8001d04 <FIR_init+0x224>
            for (uint16_t i = 0; i < numTaps; i++) {
 8001ccc:	2300      	movs	r3, #0
 8001cce:	83bb      	strh	r3, [r7, #28]
 8001cd0:	e014      	b.n	8001cfc <FIR_init+0x21c>
                fir->coeffs[i] /= sum;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	8bbb      	ldrh	r3, [r7, #28]
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	4413      	add	r3, r2
 8001cdc:	edd3 6a00 	vldr	s13, [r3]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	8bbb      	ldrh	r3, [r7, #28]
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	4413      	add	r3, r2
 8001cea:	ed97 7a08 	vldr	s14, [r7, #32]
 8001cee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001cf2:	edc3 7a00 	vstr	s15, [r3]
            for (uint16_t i = 0; i < numTaps; i++) {
 8001cf6:	8bbb      	ldrh	r3, [r7, #28]
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	83bb      	strh	r3, [r7, #28]
 8001cfc:	8bba      	ldrh	r2, [r7, #28]
 8001cfe:	897b      	ldrh	r3, [r7, #10]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d3e6      	bcc.n	8001cd2 <FIR_init+0x1f2>
            }
        }
    }
}
 8001d04:	bf00      	nop
 8001d06:	3728      	adds	r7, #40	@ 0x28
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	ecbd 8b02 	vpop	{d8}
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	40c90fdb 	.word	0x40c90fdb
 8001d14:	40490fdb 	.word	0x40490fdb
 8001d18:	3eeb851f 	.word	0x3eeb851f
 8001d1c:	3f0a3d71 	.word	0x3f0a3d71

08001d20 <FIR_process>:

float FIR_process(FIR *fir, float input) {
 8001d20:	b480      	push	{r7}
 8001d22:	b085      	sub	sp, #20
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	ed87 0a00 	vstr	s0, [r7]
    // Update circular buffer with new input
    fir->buffer[fir->bufferIndex] = input;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	685a      	ldr	r2, [r3, #4]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	895b      	ldrh	r3, [r3, #10]
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	4413      	add	r3, r2
 8001d38:	683a      	ldr	r2, [r7, #0]
 8001d3a:	601a      	str	r2, [r3, #0]

    // Compute output (convolution)
    float output = 0.0f;
 8001d3c:	f04f 0300 	mov.w	r3, #0
 8001d40:	60fb      	str	r3, [r7, #12]
    uint16_t index = fir->bufferIndex;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	895b      	ldrh	r3, [r3, #10]
 8001d46:	817b      	strh	r3, [r7, #10]

    for (uint16_t i = 0; i < fir->numTaps; i++) {
 8001d48:	2300      	movs	r3, #0
 8001d4a:	813b      	strh	r3, [r7, #8]
 8001d4c:	e023      	b.n	8001d96 <FIR_process+0x76>
        output += fir->buffer[index] * fir->coeffs[i];
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	685a      	ldr	r2, [r3, #4]
 8001d52:	897b      	ldrh	r3, [r7, #10]
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	4413      	add	r3, r2
 8001d58:	ed93 7a00 	vldr	s14, [r3]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	893b      	ldrh	r3, [r7, #8]
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	4413      	add	r3, r2
 8001d66:	edd3 7a00 	vldr	s15, [r3]
 8001d6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d6e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001d72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d76:	edc7 7a03 	vstr	s15, [r7, #12]

        // Move back in circular buffer
        if (index == 0) {
 8001d7a:	897b      	ldrh	r3, [r7, #10]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d104      	bne.n	8001d8a <FIR_process+0x6a>
            index = fir->numTaps - 1;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	891b      	ldrh	r3, [r3, #8]
 8001d84:	3b01      	subs	r3, #1
 8001d86:	817b      	strh	r3, [r7, #10]
 8001d88:	e002      	b.n	8001d90 <FIR_process+0x70>
        } else {
            index--;
 8001d8a:	897b      	ldrh	r3, [r7, #10]
 8001d8c:	3b01      	subs	r3, #1
 8001d8e:	817b      	strh	r3, [r7, #10]
    for (uint16_t i = 0; i < fir->numTaps; i++) {
 8001d90:	893b      	ldrh	r3, [r7, #8]
 8001d92:	3301      	adds	r3, #1
 8001d94:	813b      	strh	r3, [r7, #8]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	891b      	ldrh	r3, [r3, #8]
 8001d9a:	893a      	ldrh	r2, [r7, #8]
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d3d6      	bcc.n	8001d4e <FIR_process+0x2e>
        }
    }

    // Update buffer index for next input
    fir->bufferIndex++;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	895b      	ldrh	r3, [r3, #10]
 8001da4:	3301      	adds	r3, #1
 8001da6:	b29a      	uxth	r2, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	815a      	strh	r2, [r3, #10]
    if (fir->bufferIndex >= fir->numTaps) {
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	895a      	ldrh	r2, [r3, #10]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	891b      	ldrh	r3, [r3, #8]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d302      	bcc.n	8001dbe <FIR_process+0x9e>
        fir->bufferIndex = 0;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	815a      	strh	r2, [r3, #10]
    }

    return output;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	ee07 3a90 	vmov	s15, r3
}
 8001dc4:	eeb0 0a67 	vmov.f32	s0, s15
 8001dc8:	3714      	adds	r7, #20
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr

08001dd2 <mapf>:

}

//Scaling a range of value
float mapf(float input, float min_input, float max_input, float min_output,
		float max_output) {
 8001dd2:	b480      	push	{r7}
 8001dd4:	b089      	sub	sp, #36	@ 0x24
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	ed87 0a05 	vstr	s0, [r7, #20]
 8001ddc:	edc7 0a04 	vstr	s1, [r7, #16]
 8001de0:	ed87 1a03 	vstr	s2, [r7, #12]
 8001de4:	edc7 1a02 	vstr	s3, [r7, #8]
 8001de8:	ed87 2a01 	vstr	s4, [r7, #4]

	// First, find the ratio of the input within the input range
	float input_ratio = (input - min_input) / (max_input - min_input);
 8001dec:	ed97 7a05 	vldr	s14, [r7, #20]
 8001df0:	edd7 7a04 	vldr	s15, [r7, #16]
 8001df4:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001df8:	ed97 7a03 	vldr	s14, [r7, #12]
 8001dfc:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e00:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e08:	edc7 7a07 	vstr	s15, [r7, #28]
	// Then, scale this ratio to the output range
	float output = (input_ratio * (max_output - min_output)) + min_output;
 8001e0c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001e10:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e14:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e18:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e20:	ed97 7a02 	vldr	s14, [r7, #8]
 8001e24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e28:	edc7 7a06 	vstr	s15, [r7, #24]

	return output;
 8001e2c:	69bb      	ldr	r3, [r7, #24]
 8001e2e:	ee07 3a90 	vmov	s15, r3
}
 8001e32:	eeb0 0a67 	vmov.f32	s0, s15
 8001e36:	3724      	adds	r7, #36	@ 0x24
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <modbus_1t5_Timeout>:
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);

// function for interrupt
void modbus_1t5_Timeout()
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8001e44:	4b0d      	ldr	r3, [pc, #52]	@ (8001e7c <modbus_1t5_Timeout+0x3c>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2201      	movs	r2, #1
 8001e4a:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8001e4c:	4b0b      	ldr	r3, [pc, #44]	@ (8001e7c <modbus_1t5_Timeout+0x3c>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	691b      	ldr	r3, [r3, #16]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	2200      	movs	r2, #0
 8001e56:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 8001e58:	4b08      	ldr	r3, [pc, #32]	@ (8001e7c <modbus_1t5_Timeout+0x3c>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	691b      	ldr	r3, [r3, #16]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	4b06      	ldr	r3, [pc, #24]	@ (8001e7c <modbus_1t5_Timeout+0x3c>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	691b      	ldr	r3, [r3, #16]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f042 0201 	orr.w	r2, r2, #1
 8001e6e:	601a      	str	r2, [r3, #0]
}
 8001e70:	bf00      	nop
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	20000634 	.word	0x20000634

08001e80 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8001e88:	4b04      	ldr	r3, [pc, #16]	@ (8001e9c <modbus_3t5_Timeout+0x1c>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	755a      	strb	r2, [r3, #21]

}
 8001e90:	bf00      	nop
 8001e92:	370c      	adds	r7, #12
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr
 8001e9c:	20000634 	.word	0x20000634

08001ea0 <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f00f fa47 	bl	801133c <HAL_UART_GetError>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b20      	cmp	r3, #32
 8001eb2:	d101      	bne.n	8001eb8 <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 8001eb4:	f7ff ffc4 	bl	8001e40 <modbus_1t5_Timeout>

	}
}
 8001eb8:	bf00      	nop
 8001eba:	3708      	adds	r7, #8
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,UART_HandleTypeDef* huart,TIM_HandleTypeDef* htim ,u16u8_t* RegisterStartAddress,uint8_t slaveAddress,uint32_t RegisterSize)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b084      	sub	sp, #16
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	60b9      	str	r1, [r7, #8]
 8001eca:	607a      	str	r2, [r7, #4]
 8001ecc:	603b      	str	r3, [r7, #0]
	hModbus = hmodbus;
 8001ece:	4a2d      	ldr	r2, [pc, #180]	@ (8001f84 <Modbus_init+0xc4>)
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	6013      	str	r3, [r2, #0]

	hModbus->huart = huart;
 8001ed4:	4b2b      	ldr	r3, [pc, #172]	@ (8001f84 <Modbus_init+0xc4>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	68ba      	ldr	r2, [r7, #8]
 8001eda:	60da      	str	r2, [r3, #12]
	hModbus->htim = htim;
 8001edc:	4b29      	ldr	r3, [pc, #164]	@ (8001f84 <Modbus_init+0xc4>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	687a      	ldr	r2, [r7, #4]
 8001ee2:	611a      	str	r2, [r3, #16]
	hModbus->RegisterAddress = RegisterStartAddress;
 8001ee4:	4b27      	ldr	r3, [pc, #156]	@ (8001f84 <Modbus_init+0xc4>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	683a      	ldr	r2, [r7, #0]
 8001eea:	605a      	str	r2, [r3, #4]
	hModbus->slaveAddress = slaveAddress;
 8001eec:	4b25      	ldr	r3, [pc, #148]	@ (8001f84 <Modbus_init+0xc4>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	7e3a      	ldrb	r2, [r7, #24]
 8001ef2:	701a      	strb	r2, [r3, #0]
	hModbus->RegisterSize = RegisterSize;
 8001ef4:	4b23      	ldr	r3, [pc, #140]	@ (8001f84 <Modbus_init+0xc4>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	69fa      	ldr	r2, [r7, #28]
 8001efa:	609a      	str	r2, [r3, #8]
	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	691b      	ldr	r3, [r3, #16]
 8001f00:	4a21      	ldr	r2, [pc, #132]	@ (8001f88 <Modbus_init+0xc8>)
 8001f02:	210e      	movs	r1, #14
 8001f04:	4618      	mov	r0, r3
 8001f06:	f00d fc3d 	bl	800f784 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	2110      	movs	r1, #16
 8001f10:	4618      	mov	r0, r3
 8001f12:	f00f f9bd 	bl	8011290 <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	68db      	ldr	r3, [r3, #12]
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f00f f9d4 	bl	80112c8 <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	4a19      	ldr	r2, [pc, #100]	@ (8001f8c <Modbus_init+0xcc>)
 8001f26:	2104      	movs	r1, #4
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f00e fc7b 	bl	8010824 <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 8001f2e:	4b15      	ldr	r3, [pc, #84]	@ (8001f84 <Modbus_init+0xc4>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 8001f34:	4b13      	ldr	r3, [pc, #76]	@ (8001f84 <Modbus_init+0xc4>)
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	4b12      	ldr	r3, [pc, #72]	@ (8001f84 <Modbus_init+0xc4>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 8001f40:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8001f44:	4413      	add	r3, r2
 8001f46:	3302      	adds	r3, #2
 8001f48:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	f00e fda3 	bl	8010a98 <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 8001f52:	4b0c      	ldr	r3, [pc, #48]	@ (8001f84 <Modbus_init+0xc4>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	691b      	ldr	r3, [r3, #16]
 8001f58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d10c      	bne.n	8001f7c <Modbus_init+0xbc>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8001f62:	4b08      	ldr	r3, [pc, #32]	@ (8001f84 <Modbus_init+0xc4>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	691b      	ldr	r3, [r3, #16]
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f00c fbe7 	bl	800e73c <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8001f6e:	4b05      	ldr	r3, [pc, #20]	@ (8001f84 <Modbus_init+0xc4>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	691b      	ldr	r3, [r3, #16]
 8001f74:	2100      	movs	r1, #0
 8001f76:	4618      	mov	r0, r3
 8001f78:	f00c fe36 	bl	800ebe8 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8001f7c:	bf00      	nop
 8001f7e:	3710      	adds	r7, #16
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	20000634 	.word	0x20000634
 8001f88:	08001e81 	.word	0x08001e81
 8001f8c:	08001ea1 	.word	0x08001ea1

08001f90 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8001f90:	b480      	push	{r7}
 8001f92:	b085      	sub	sp, #20
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	460b      	mov	r3, r1
 8001f9a:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8001f9c:	23ff      	movs	r3, #255	@ 0xff
 8001f9e:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8001fa0:	23ff      	movs	r3, #255	@ 0xff
 8001fa2:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 8001fa4:	e013      	b.n	8001fce <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	1c5a      	adds	r2, r3, #1
 8001faa:	607a      	str	r2, [r7, #4]
 8001fac:	781a      	ldrb	r2, [r3, #0]
 8001fae:	7bbb      	ldrb	r3, [r7, #14]
 8001fb0:	4053      	eors	r3, r2
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 8001fb6:	4a10      	ldr	r2, [pc, #64]	@ (8001ff8 <CRC16+0x68>)
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	4413      	add	r3, r2
 8001fbc:	781a      	ldrb	r2, [r3, #0]
 8001fbe:	7bfb      	ldrb	r3, [r7, #15]
 8001fc0:	4053      	eors	r3, r2
 8001fc2:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 8001fc4:	4a0d      	ldr	r2, [pc, #52]	@ (8001ffc <CRC16+0x6c>)
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	4413      	add	r3, r2
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 8001fce:	883b      	ldrh	r3, [r7, #0]
 8001fd0:	1e5a      	subs	r2, r3, #1
 8001fd2:	803a      	strh	r2, [r7, #0]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d1e6      	bne.n	8001fa6 <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 8001fd8:	7bfb      	ldrb	r3, [r7, #15]
 8001fda:	b21b      	sxth	r3, r3
 8001fdc:	021b      	lsls	r3, r3, #8
 8001fde:	b21a      	sxth	r2, r3
 8001fe0:	7bbb      	ldrb	r3, [r7, #14]
 8001fe2:	b21b      	sxth	r3, r3
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	b21b      	sxth	r3, r3
 8001fe8:	b29b      	uxth	r3, r3
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3714      	adds	r7, #20
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	20000218 	.word	0x20000218
 8001ffc:	20000118 	.word	0x20000118

08002000 <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 8002006:	4b7e      	ldr	r3, [pc, #504]	@ (8002200 <Modbus_Protocal_Worker+0x200>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	7ddb      	ldrb	r3, [r3, #23]
 800200c:	3b01      	subs	r3, #1
 800200e:	2b03      	cmp	r3, #3
 8002010:	d80a      	bhi.n	8002028 <Modbus_Protocal_Worker+0x28>
 8002012:	a201      	add	r2, pc, #4	@ (adr r2, 8002018 <Modbus_Protocal_Worker+0x18>)
 8002014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002018:	08002033 	.word	0x08002033
 800201c:	080021c7 	.word	0x080021c7
 8002020:	080020bf 	.word	0x080020bf
 8002024:	08002103 	.word	0x08002103
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 8002028:	4b75      	ldr	r3, [pc, #468]	@ (8002200 <Modbus_Protocal_Worker+0x200>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2201      	movs	r2, #1
 800202e:	75da      	strb	r2, [r3, #23]
		break;
 8002030:	e0e1      	b.n	80021f6 <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 8002032:	4b73      	ldr	r3, [pc, #460]	@ (8002200 <Modbus_Protocal_Worker+0x200>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 800203a:	2b00      	cmp	r3, #0
 800203c:	d006      	beq.n	800204c <Modbus_Protocal_Worker+0x4c>
		{
			/*set state*/
			hModbus->Mstatus= Modbus_state_Emission;
 800203e:	4b70      	ldr	r3, [pc, #448]	@ (8002200 <Modbus_Protocal_Worker+0x200>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	2202      	movs	r2, #2
 8002044:	75da      	strb	r2, [r3, #23]
			Modbus_Emission();
 8002046:	f000 f9cd 	bl	80023e4 <Modbus_Emission>
 800204a:	e018      	b.n	800207e <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->huart->RxXferSize!=hModbus->huart->RxXferCount)
 800204c:	4b6c      	ldr	r3, [pc, #432]	@ (8002200 <Modbus_Protocal_Worker+0x200>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8002056:	4b6a      	ldr	r3, [pc, #424]	@ (8002200 <Modbus_Protocal_Worker+0x200>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8002060:	b29b      	uxth	r3, r3
 8002062:	429a      	cmp	r2, r3
 8002064:	d00b      	beq.n	800207e <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 8002066:	4b66      	ldr	r3, [pc, #408]	@ (8002200 <Modbus_Protocal_Worker+0x200>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	2200      	movs	r2, #0
 800206c:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 800206e:	4b64      	ldr	r3, [pc, #400]	@ (8002200 <Modbus_Protocal_Worker+0x200>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	2200      	movs	r2, #0
 8002074:	755a      	strb	r2, [r3, #21]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 8002076:	4b62      	ldr	r3, [pc, #392]	@ (8002200 <Modbus_Protocal_Worker+0x200>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	2203      	movs	r2, #3
 800207c:	75da      	strb	r2, [r3, #23]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 800207e:	4b60      	ldr	r3, [pc, #384]	@ (8002200 <Modbus_Protocal_Worker+0x200>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002088:	2b20      	cmp	r3, #32
 800208a:	f040 80ad 	bne.w	80021e8 <Modbus_Protocal_Worker+0x1e8>
		{
			hModbus->modbusUartStructure.RxTail =0;
 800208e:	4b5c      	ldr	r3, [pc, #368]	@ (8002200 <Modbus_Protocal_Worker+0x200>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	2200      	movs	r2, #0
 8002094:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 8002098:	4b59      	ldr	r3, [pc, #356]	@ (8002200 <Modbus_Protocal_Worker+0x200>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	68d8      	ldr	r0, [r3, #12]
		    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 800209e:	4b58      	ldr	r3, [pc, #352]	@ (8002200 <Modbus_Protocal_Worker+0x200>)
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	4b57      	ldr	r3, [pc, #348]	@ (8002200 <Modbus_Protocal_Worker+0x200>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 80020aa:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 80020ae:	4413      	add	r3, r2
 80020b0:	3302      	adds	r3, #2
 80020b2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80020b6:	4619      	mov	r1, r3
 80020b8:	f00e fcee 	bl	8010a98 <HAL_UART_Receive_DMA>
					MODBUS_UART_BUFFER_SIZE );


		}
		break;
 80020bc:	e094      	b.n	80021e8 <Modbus_Protocal_Worker+0x1e8>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 80020be:	4b50      	ldr	r3, [pc, #320]	@ (8002200 <Modbus_Protocal_Worker+0x200>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	7d1b      	ldrb	r3, [r3, #20]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	f000 8091 	beq.w	80021ec <Modbus_Protocal_Worker+0x1ec>
		{
			/*reset recived flag*/
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 80020ca:	4b4d      	ldr	r3, [pc, #308]	@ (8002200 <Modbus_Protocal_Worker+0x200>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	22fe      	movs	r2, #254	@ 0xfe
 80020d0:	759a      	strb	r2, [r3, #22]
			hModbus->modbusUartStructure.RxTail =
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 80020d2:	4b4b      	ldr	r3, [pc, #300]	@ (8002200 <Modbus_Protocal_Worker+0x200>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	f8b3 105c 	ldrh.w	r1, [r3, #92]	@ 0x5c
 80020dc:	4b48      	ldr	r3, [pc, #288]	@ (8002200 <Modbus_Protocal_Worker+0x200>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	b29a      	uxth	r2, r3
			hModbus->modbusUartStructure.RxTail =
 80020ec:	4b44      	ldr	r3, [pc, #272]	@ (8002200 <Modbus_Protocal_Worker+0x200>)
 80020ee:	681b      	ldr	r3, [r3, #0]
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 80020f0:	1a8a      	subs	r2, r1, r2
 80020f2:	b292      	uxth	r2, r2
			hModbus->modbusUartStructure.RxTail =
 80020f4:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 80020f8:	4b41      	ldr	r3, [pc, #260]	@ (8002200 <Modbus_Protocal_Worker+0x200>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	2204      	movs	r2, #4
 80020fe:	75da      	strb	r2, [r3, #23]
		}
		break;
 8002100:	e074      	b.n	80021ec <Modbus_Protocal_Worker+0x1ec>
	case Modbus_state_ControlAndWaiting:

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 8002102:	4b3f      	ldr	r3, [pc, #252]	@ (8002200 <Modbus_Protocal_Worker+0x200>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f993 3016 	ldrsb.w	r3, [r3, #22]
 800210a:	f113 0f02 	cmn.w	r3, #2
 800210e:	d150      	bne.n	80021b2 <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 8002110:	4b3b      	ldr	r3, [pc, #236]	@ (8002200 <Modbus_Protocal_Worker+0x200>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	2200      	movs	r2, #0
 8002116:	759a      	strb	r2, [r3, #22]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 8002118:	4b39      	ldr	r3, [pc, #228]	@ (8002200 <Modbus_Protocal_Worker+0x200>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f203 2272 	addw	r2, r3, #626	@ 0x272
 8002120:	4b37      	ldr	r3, [pc, #220]	@ (8002200 <Modbus_Protocal_Worker+0x200>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8002128:	3b02      	subs	r3, #2
 800212a:	4619      	mov	r1, r3
 800212c:	4610      	mov	r0, r2
 800212e:	f7ff ff2f 	bl	8001f90 <CRC16>
 8002132:	4603      	mov	r3, r0
 8002134:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8002136:	793a      	ldrb	r2, [r7, #4]
 8002138:	4b31      	ldr	r3, [pc, #196]	@ (8002200 <Modbus_Protocal_Worker+0x200>)
 800213a:	6819      	ldr	r1, [r3, #0]
 800213c:	4b30      	ldr	r3, [pc, #192]	@ (8002200 <Modbus_Protocal_Worker+0x200>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8002144:	3b02      	subs	r3, #2
 8002146:	440b      	add	r3, r1
 8002148:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
 800214c:	429a      	cmp	r2, r3
 800214e:	d10c      	bne.n	800216a <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 8002150:	797a      	ldrb	r2, [r7, #5]
 8002152:	4b2b      	ldr	r3, [pc, #172]	@ (8002200 <Modbus_Protocal_Worker+0x200>)
 8002154:	6819      	ldr	r1, [r3, #0]
 8002156:	4b2a      	ldr	r3, [pc, #168]	@ (8002200 <Modbus_Protocal_Worker+0x200>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 800215e:	3b01      	subs	r3, #1
 8002160:	440b      	add	r3, r1
 8002162:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8002166:	429a      	cmp	r2, r3
 8002168:	d004      	beq.n	8002174 <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 800216a:	4b25      	ldr	r3, [pc, #148]	@ (8002200 <Modbus_Protocal_Worker+0x200>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	22ff      	movs	r2, #255	@ 0xff
 8002170:	759a      	strb	r2, [r3, #22]
				break;
 8002172:	e040      	b.n	80021f6 <Modbus_Protocal_Worker+0x1f6>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 8002174:	4b22      	ldr	r3, [pc, #136]	@ (8002200 <Modbus_Protocal_Worker+0x200>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f893 2272 	ldrb.w	r2, [r3, #626]	@ 0x272
 800217c:	4b20      	ldr	r3, [pc, #128]	@ (8002200 <Modbus_Protocal_Worker+0x200>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	429a      	cmp	r2, r3
 8002184:	d113      	bne.n	80021ae <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 8002186:	4b1e      	ldr	r3, [pc, #120]	@ (8002200 <Modbus_Protocal_Worker+0x200>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f103 0018 	add.w	r0, r3, #24
					hModbus->modbusUartStructure.MessageBufferRx+1,
 800218e:	4b1c      	ldr	r3, [pc, #112]	@ (8002200 <Modbus_Protocal_Worker+0x200>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f203 2372 	addw	r3, r3, #626	@ 0x272
			memcpy(hModbus->Rxframe,
 8002196:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 8002198:	4b19      	ldr	r3, [pc, #100]	@ (8002200 <Modbus_Protocal_Worker+0x200>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80021a0:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 80021a2:	461a      	mov	r2, r3
 80021a4:	f010 ffde 	bl	8013164 <memcpy>

			//execute command
			Modbus_frame_response();
 80021a8:	f000 f904 	bl	80023b4 <Modbus_frame_response>
 80021ac:	e001      	b.n	80021b2 <Modbus_Protocal_Worker+0x1b2>
				break;
 80021ae:	bf00      	nop
					}
		break;


	}
}
 80021b0:	e021      	b.n	80021f6 <Modbus_Protocal_Worker+0x1f6>
		if(hModbus->Flag_T35TimeOut)
 80021b2:	4b13      	ldr	r3, [pc, #76]	@ (8002200 <Modbus_Protocal_Worker+0x200>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	7d5b      	ldrb	r3, [r3, #21]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d019      	beq.n	80021f0 <Modbus_Protocal_Worker+0x1f0>
			hModbus->Mstatus = Modbus_state_Idle;
 80021bc:	4b10      	ldr	r3, [pc, #64]	@ (8002200 <Modbus_Protocal_Worker+0x200>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2201      	movs	r2, #1
 80021c2:	75da      	strb	r2, [r3, #23]
		break;
 80021c4:	e014      	b.n	80021f0 <Modbus_Protocal_Worker+0x1f0>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 80021c6:	4b0e      	ldr	r3, [pc, #56]	@ (8002200 <Modbus_Protocal_Worker+0x200>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021d0:	2b20      	cmp	r3, #32
 80021d2:	d10f      	bne.n	80021f4 <Modbus_Protocal_Worker+0x1f4>
			hModbus->TxCount=0;
 80021d4:	4b0a      	ldr	r3, [pc, #40]	@ (8002200 <Modbus_Protocal_Worker+0x200>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2200      	movs	r2, #0
 80021da:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
			hModbus->Mstatus = Modbus_state_Idle;
 80021de:	4b08      	ldr	r3, [pc, #32]	@ (8002200 <Modbus_Protocal_Worker+0x200>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	2201      	movs	r2, #1
 80021e4:	75da      	strb	r2, [r3, #23]
		break;
 80021e6:	e005      	b.n	80021f4 <Modbus_Protocal_Worker+0x1f4>
		break;
 80021e8:	bf00      	nop
 80021ea:	e004      	b.n	80021f6 <Modbus_Protocal_Worker+0x1f6>
		break;
 80021ec:	bf00      	nop
 80021ee:	e002      	b.n	80021f6 <Modbus_Protocal_Worker+0x1f6>
		break;
 80021f0:	bf00      	nop
 80021f2:	e000      	b.n	80021f6 <Modbus_Protocal_Worker+0x1f6>
		break;
 80021f4:	bf00      	nop
}
 80021f6:	bf00      	nop
 80021f8:	3708      	adds	r7, #8
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	20000634 	.word	0x20000634

08002204 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 800220a:	4b1d      	ldr	r3, [pc, #116]	@ (8002280 <modbusWrite1Register+0x7c>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	7e5b      	ldrb	r3, [r3, #25]
 8002210:	021b      	lsls	r3, r3, #8
 8002212:	b29b      	uxth	r3, r3
 8002214:	4a1a      	ldr	r2, [pc, #104]	@ (8002280 <modbusWrite1Register+0x7c>)
 8002216:	6812      	ldr	r2, [r2, #0]
 8002218:	7e92      	ldrb	r2, [r2, #26]
 800221a:	4413      	add	r3, r2
 800221c:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 800221e:	88fa      	ldrh	r2, [r7, #6]
 8002220:	4b17      	ldr	r3, [pc, #92]	@ (8002280 <modbusWrite1Register+0x7c>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	429a      	cmp	r2, r3
 8002228:	d903      	bls.n	8002232 <modbusWrite1Register+0x2e>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 800222a:	2002      	movs	r0, #2
 800222c:	f000 f8a0 	bl	8002370 <ModbusErrorReply>
			 return;
 8002230:	e023      	b.n	800227a <modbusWrite1Register+0x76>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 8002232:	4b13      	ldr	r3, [pc, #76]	@ (8002280 <modbusWrite1Register+0x7c>)
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	4b12      	ldr	r3, [pc, #72]	@ (8002280 <modbusWrite1Register+0x7c>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	6859      	ldr	r1, [r3, #4]
 800223c:	88fb      	ldrh	r3, [r7, #6]
 800223e:	005b      	lsls	r3, r3, #1
 8002240:	440b      	add	r3, r1
 8002242:	7ed2      	ldrb	r2, [r2, #27]
 8002244:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 8002246:	4b0e      	ldr	r3, [pc, #56]	@ (8002280 <modbusWrite1Register+0x7c>)
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	4b0d      	ldr	r3, [pc, #52]	@ (8002280 <modbusWrite1Register+0x7c>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	6859      	ldr	r1, [r3, #4]
 8002250:	88fb      	ldrh	r3, [r7, #6]
 8002252:	005b      	lsls	r3, r3, #1
 8002254:	440b      	add	r3, r1
 8002256:	7f12      	ldrb	r2, [r2, #28]
 8002258:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 800225a:	4b09      	ldr	r3, [pc, #36]	@ (8002280 <modbusWrite1Register+0x7c>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f503 70a2 	add.w	r0, r3, #324	@ 0x144
			hModbus->Rxframe,
 8002262:	4b07      	ldr	r3, [pc, #28]	@ (8002280 <modbusWrite1Register+0x7c>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	3318      	adds	r3, #24
	memcpy(hModbus->Txframe,
 8002268:	2208      	movs	r2, #8
 800226a:	4619      	mov	r1, r3
 800226c:	f010 ff7a 	bl	8013164 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 8002270:	4b03      	ldr	r3, [pc, #12]	@ (8002280 <modbusWrite1Register+0x7c>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2205      	movs	r2, #5
 8002276:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270



}
 800227a:	3708      	adds	r7, #8
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	20000634 	.word	0x20000634

08002284 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 8002284:	b590      	push	{r4, r7, lr}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 800228a:	4b38      	ldr	r3, [pc, #224]	@ (800236c <modbusRead1Register+0xe8>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	7edb      	ldrb	r3, [r3, #27]
 8002290:	021b      	lsls	r3, r3, #8
 8002292:	b29b      	uxth	r3, r3
 8002294:	4a35      	ldr	r2, [pc, #212]	@ (800236c <modbusRead1Register+0xe8>)
 8002296:	6812      	ldr	r2, [r2, #0]
 8002298:	7f12      	ldrb	r2, [r2, #28]
 800229a:	4413      	add	r3, r2
 800229c:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 800229e:	4b33      	ldr	r3, [pc, #204]	@ (800236c <modbusRead1Register+0xe8>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	7e5b      	ldrb	r3, [r3, #25]
 80022a4:	021b      	lsls	r3, r3, #8
 80022a6:	b29b      	uxth	r3, r3
 80022a8:	4a30      	ldr	r2, [pc, #192]	@ (800236c <modbusRead1Register+0xe8>)
 80022aa:	6812      	ldr	r2, [r2, #0]
 80022ac:	7e92      	ldrb	r2, [r2, #26]
 80022ae:	4413      	add	r3, r2
 80022b0:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 80022b2:	88fb      	ldrh	r3, [r7, #6]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d002      	beq.n	80022be <modbusRead1Register+0x3a>
 80022b8:	88fb      	ldrh	r3, [r7, #6]
 80022ba:	2b7d      	cmp	r3, #125	@ 0x7d
 80022bc:	d903      	bls.n	80022c6 <modbusRead1Register+0x42>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 80022be:	2003      	movs	r0, #3
 80022c0:	f000 f856 	bl	8002370 <ModbusErrorReply>
		 return;
 80022c4:	e04e      	b.n	8002364 <modbusRead1Register+0xe0>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 80022c6:	88ba      	ldrh	r2, [r7, #4]
 80022c8:	4b28      	ldr	r3, [pc, #160]	@ (800236c <modbusRead1Register+0xe8>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d808      	bhi.n	80022e4 <modbusRead1Register+0x60>
 80022d2:	88ba      	ldrh	r2, [r7, #4]
 80022d4:	88fb      	ldrh	r3, [r7, #6]
 80022d6:	4413      	add	r3, r2
 80022d8:	461a      	mov	r2, r3
 80022da:	4b24      	ldr	r3, [pc, #144]	@ (800236c <modbusRead1Register+0xe8>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d903      	bls.n	80022ec <modbusRead1Register+0x68>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 80022e4:	2002      	movs	r0, #2
 80022e6:	f000 f843 	bl	8002370 <ModbusErrorReply>
		 return;
 80022ea:	e03b      	b.n	8002364 <modbusRead1Register+0xe0>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 80022ec:	4b1f      	ldr	r3, [pc, #124]	@ (800236c <modbusRead1Register+0xe8>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	2203      	movs	r2, #3
 80022f2:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 80022f6:	88fb      	ldrh	r3, [r7, #6]
 80022f8:	b2da      	uxtb	r2, r3
 80022fa:	4b1c      	ldr	r3, [pc, #112]	@ (800236c <modbusRead1Register+0xe8>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	0052      	lsls	r2, r2, #1
 8002300:	b2d2      	uxtb	r2, r2
 8002302:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 8002306:	2400      	movs	r4, #0
 8002308:	e020      	b.n	800234c <modbusRead1Register+0xc8>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 800230a:	4b18      	ldr	r3, [pc, #96]	@ (800236c <modbusRead1Register+0xe8>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	685a      	ldr	r2, [r3, #4]
 8002310:	88bb      	ldrh	r3, [r7, #4]
 8002312:	4423      	add	r3, r4
 8002314:	005b      	lsls	r3, r3, #1
 8002316:	18d1      	adds	r1, r2, r3
 8002318:	4b14      	ldr	r3, [pc, #80]	@ (800236c <modbusRead1Register+0xe8>)
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	1c63      	adds	r3, r4, #1
 800231e:	005b      	lsls	r3, r3, #1
 8002320:	7849      	ldrb	r1, [r1, #1]
 8002322:	4413      	add	r3, r2
 8002324:	460a      	mov	r2, r1
 8002326:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 800232a:	4b10      	ldr	r3, [pc, #64]	@ (800236c <modbusRead1Register+0xe8>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	685a      	ldr	r2, [r3, #4]
 8002330:	88bb      	ldrh	r3, [r7, #4]
 8002332:	4423      	add	r3, r4
 8002334:	005b      	lsls	r3, r3, #1
 8002336:	18d1      	adds	r1, r2, r3
 8002338:	4b0c      	ldr	r3, [pc, #48]	@ (800236c <modbusRead1Register+0xe8>)
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	0063      	lsls	r3, r4, #1
 800233e:	3303      	adds	r3, #3
 8002340:	7809      	ldrb	r1, [r1, #0]
 8002342:	4413      	add	r3, r2
 8002344:	460a      	mov	r2, r1
 8002346:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	for(i=0; i<numberOfDataToRead;i++)
 800234a:	3401      	adds	r4, #1
 800234c:	88fb      	ldrh	r3, [r7, #6]
 800234e:	429c      	cmp	r4, r3
 8002350:	dbdb      	blt.n	800230a <modbusRead1Register+0x86>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 8002352:	88fb      	ldrh	r3, [r7, #6]
 8002354:	3301      	adds	r3, #1
 8002356:	b2da      	uxtb	r2, r3
 8002358:	4b04      	ldr	r3, [pc, #16]	@ (800236c <modbusRead1Register+0xe8>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	0052      	lsls	r2, r2, #1
 800235e:	b2d2      	uxtb	r2, r2
 8002360:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270

}
 8002364:	370c      	adds	r7, #12
 8002366:	46bd      	mov	sp, r7
 8002368:	bd90      	pop	{r4, r7, pc}
 800236a:	bf00      	nop
 800236c:	20000634 	.word	0x20000634

08002370 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	4603      	mov	r3, r0
 8002378:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 800237a:	4b0d      	ldr	r3, [pc, #52]	@ (80023b0 <ModbusErrorReply+0x40>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	7e1a      	ldrb	r2, [r3, #24]
 8002380:	4b0b      	ldr	r3, [pc, #44]	@ (80023b0 <ModbusErrorReply+0x40>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8002388:	b2d2      	uxtb	r2, r2
 800238a:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = Errorcode;
 800238e:	4b08      	ldr	r3, [pc, #32]	@ (80023b0 <ModbusErrorReply+0x40>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	79fa      	ldrb	r2, [r7, #7]
 8002394:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->TxCount = 2;
 8002398:	4b05      	ldr	r3, [pc, #20]	@ (80023b0 <ModbusErrorReply+0x40>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2202      	movs	r2, #2
 800239e:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
}
 80023a2:	bf00      	nop
 80023a4:	370c      	adds	r7, #12
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop
 80023b0:	20000634 	.word	0x20000634

080023b4 <Modbus_frame_response>:

void Modbus_frame_response()
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 80023b8:	4b09      	ldr	r3, [pc, #36]	@ (80023e0 <Modbus_frame_response+0x2c>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	7e1b      	ldrb	r3, [r3, #24]
 80023be:	2b03      	cmp	r3, #3
 80023c0:	d004      	beq.n	80023cc <Modbus_frame_response+0x18>
 80023c2:	2b06      	cmp	r3, #6
 80023c4:	d105      	bne.n	80023d2 <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 80023c6:	f7ff ff1d 	bl	8002204 <modbusWrite1Register>
		break;
 80023ca:	e006      	b.n	80023da <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 80023cc:	f7ff ff5a 	bl	8002284 <modbusRead1Register>
		break;
 80023d0:	e003      	b.n	80023da <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 80023d2:	2001      	movs	r0, #1
 80023d4:	f7ff ffcc 	bl	8002370 <ModbusErrorReply>
		break;
 80023d8:	bf00      	nop

	}
}
 80023da:	bf00      	nop
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	20000634 	.word	0x20000634

080023e4 <Modbus_Emission>:

void Modbus_Emission()
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 80023ea:	4b38      	ldr	r3, [pc, #224]	@ (80024cc <Modbus_Emission+0xe8>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023f4:	2b20      	cmp	r3, #32
 80023f6:	d15d      	bne.n	80024b4 <Modbus_Emission+0xd0>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 80023f8:	4b34      	ldr	r3, [pc, #208]	@ (80024cc <Modbus_Emission+0xe8>)
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	4b33      	ldr	r3, [pc, #204]	@ (80024cc <Modbus_Emission+0xe8>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	7812      	ldrb	r2, [r2, #0]
 8002402:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 8002406:	4b31      	ldr	r3, [pc, #196]	@ (80024cc <Modbus_Emission+0xe8>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
		memcpy
 800240e:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 8002410:	4b2e      	ldr	r3, [pc, #184]	@ (80024cc <Modbus_Emission+0xe8>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f503 71a2 	add.w	r1, r3, #324	@ 0x144
				hModbus->TxCount
 8002418:	4b2c      	ldr	r3, [pc, #176]	@ (80024cc <Modbus_Emission+0xe8>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
		memcpy
 8002420:	461a      	mov	r2, r3
 8002422:	f010 fe9f 	bl	8013164 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 8002426:	4b29      	ldr	r3, [pc, #164]	@ (80024cc <Modbus_Emission+0xe8>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 800242e:	461a      	mov	r2, r3
 8002430:	4b26      	ldr	r3, [pc, #152]	@ (80024cc <Modbus_Emission+0xe8>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	3203      	adds	r2, #3
 8002436:	b292      	uxth	r2, r2
 8002438:	f8a3 24d4 	strh.w	r2, [r3, #1236]	@ 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 800243c:	4b23      	ldr	r3, [pc, #140]	@ (80024cc <Modbus_Emission+0xe8>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 8002444:	4b21      	ldr	r3, [pc, #132]	@ (80024cc <Modbus_Emission+0xe8>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 800244c:	3b02      	subs	r3, #2
 800244e:	4619      	mov	r1, r3
 8002450:	4610      	mov	r0, r2
 8002452:	f7ff fd9d 	bl	8001f90 <CRC16>
 8002456:	4603      	mov	r3, r0
 8002458:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 800245a:	4b1c      	ldr	r3, [pc, #112]	@ (80024cc <Modbus_Emission+0xe8>)
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	4b1b      	ldr	r3, [pc, #108]	@ (80024cc <Modbus_Emission+0xe8>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8002466:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 8002468:	7939      	ldrb	r1, [r7, #4]
 800246a:	4413      	add	r3, r2
 800246c:	460a      	mov	r2, r1
 800246e:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 8002472:	4b16      	ldr	r3, [pc, #88]	@ (80024cc <Modbus_Emission+0xe8>)
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	4b15      	ldr	r3, [pc, #84]	@ (80024cc <Modbus_Emission+0xe8>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 800247e:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 8002480:	7979      	ldrb	r1, [r7, #5]
 8002482:	4413      	add	r3, r2
 8002484:	460a      	mov	r2, r1
 8002486:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 800248a:	4b10      	ldr	r3, [pc, #64]	@ (80024cc <Modbus_Emission+0xe8>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002494:	2b20      	cmp	r3, #32
 8002496:	d10d      	bne.n	80024b4 <Modbus_Emission+0xd0>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 8002498:	4b0c      	ldr	r3, [pc, #48]	@ (80024cc <Modbus_Emission+0xe8>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 800249e:	4b0b      	ldr	r3, [pc, #44]	@ (80024cc <Modbus_Emission+0xe8>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f503 7169 	add.w	r1, r3, #932	@ 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 80024a6:	4b09      	ldr	r3, [pc, #36]	@ (80024cc <Modbus_Emission+0xe8>)
 80024a8:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 80024aa:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 80024ae:	461a      	mov	r2, r3
 80024b0:	f00e fa72 	bl	8010998 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 80024b4:	4b05      	ldr	r3, [pc, #20]	@ (80024cc <Modbus_Emission+0xe8>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	2200      	movs	r2, #0
 80024ba:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 80024bc:	4b03      	ldr	r3, [pc, #12]	@ (80024cc <Modbus_Emission+0xe8>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2200      	movs	r2, #0
 80024c2:	755a      	strb	r2, [r3, #21]

}
 80024c4:	bf00      	nop
 80024c6:	3708      	adds	r7, #8
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	20000634 	.word	0x20000634

080024d0 <MotorKalman_Init>:
#include <string.h>
#include "MotorMatrixGenerator.h"

void MotorKalman_Init(MotorKalman* filter, float32_t dt, float32_t J, float32_t b,
                      float32_t K_t, float32_t K_e, float32_t R_a, float32_t L_a,
                      float32_t Q, float32_t R) {
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b08c      	sub	sp, #48	@ 0x30
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6278      	str	r0, [r7, #36]	@ 0x24
 80024d8:	ed87 0a08 	vstr	s0, [r7, #32]
 80024dc:	edc7 0a07 	vstr	s1, [r7, #28]
 80024e0:	ed87 1a06 	vstr	s2, [r7, #24]
 80024e4:	edc7 1a05 	vstr	s3, [r7, #20]
 80024e8:	ed87 2a04 	vstr	s4, [r7, #16]
 80024ec:	edc7 2a03 	vstr	s5, [r7, #12]
 80024f0:	ed87 3a02 	vstr	s6, [r7, #8]
 80024f4:	edc7 3a01 	vstr	s7, [r7, #4]
 80024f8:	ed87 4a00 	vstr	s8, [r7]
    // Store motor parameters
    filter->dt = dt;
 80024fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024fe:	6a3a      	ldr	r2, [r7, #32]
 8002500:	f8c3 2338 	str.w	r2, [r3, #824]	@ 0x338
    filter->J = J;
 8002504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002506:	69fa      	ldr	r2, [r7, #28]
 8002508:	f8c3 233c 	str.w	r2, [r3, #828]	@ 0x33c
    filter->b = b;
 800250c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800250e:	69ba      	ldr	r2, [r7, #24]
 8002510:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
    filter->K_t = K_t;
 8002514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002516:	697a      	ldr	r2, [r7, #20]
 8002518:	f8c3 2344 	str.w	r2, [r3, #836]	@ 0x344
    filter->K_e = K_e;
 800251c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800251e:	693a      	ldr	r2, [r7, #16]
 8002520:	f8c3 2348 	str.w	r2, [r3, #840]	@ 0x348
    filter->R_a = R_a;
 8002524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002526:	68fa      	ldr	r2, [r7, #12]
 8002528:	f8c3 234c 	str.w	r2, [r3, #844]	@ 0x34c
    filter->L_a = L_a;
 800252c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800252e:	68ba      	ldr	r2, [r7, #8]
 8002530:	f8c3 2350 	str.w	r2, [r3, #848]	@ 0x350

    // Initialize state vector to zeros
    memset(filter->X, 0, sizeof(filter->X));
 8002534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002536:	2210      	movs	r2, #16
 8002538:	2100      	movs	r1, #0
 800253a:	4618      	mov	r0, r3
 800253c:	f010 fdce 	bl	80130dc <memset>

    // Initialize covariance matrix with high values on diagonal to reflect uncertainty
    memset(filter->P, 0, sizeof(filter->P));
 8002540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002542:	3310      	adds	r3, #16
 8002544:	2240      	movs	r2, #64	@ 0x40
 8002546:	2100      	movs	r1, #0
 8002548:	4618      	mov	r0, r3
 800254a:	f010 fdc7 	bl	80130dc <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 800254e:	2300      	movs	r3, #0
 8002550:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002552:	e00c      	b.n	800256e <MotorKalman_Init+0x9e>
        filter->P[i * MOTOR_KALMAN_NUM_STATES + i] = 100.0f;
 8002554:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002556:	4613      	mov	r3, r2
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	4413      	add	r3, r2
 800255c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800255e:	3304      	adds	r3, #4
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	4413      	add	r3, r2
 8002564:	4a79      	ldr	r2, [pc, #484]	@ (800274c <MotorKalman_Init+0x27c>)
 8002566:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002568:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800256a:	3301      	adds	r3, #1
 800256c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800256e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002570:	2b03      	cmp	r3, #3
 8002572:	ddef      	ble.n	8002554 <MotorKalman_Init+0x84>
    }

    // Initialize identity matrix
    memset(filter->I_data, 0, sizeof(filter->I_data));
 8002574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002576:	f503 733e 	add.w	r3, r3, #760	@ 0x2f8
 800257a:	2240      	movs	r2, #64	@ 0x40
 800257c:	2100      	movs	r1, #0
 800257e:	4618      	mov	r0, r3
 8002580:	f010 fdac 	bl	80130dc <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002584:	2300      	movs	r3, #0
 8002586:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002588:	e00d      	b.n	80025a6 <MotorKalman_Init+0xd6>
        filter->I_data[i * MOTOR_KALMAN_NUM_STATES + i] = 1.0f;
 800258a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800258c:	4613      	mov	r3, r2
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	4413      	add	r3, r2
 8002592:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002594:	33be      	adds	r3, #190	@ 0xbe
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	4413      	add	r3, r2
 800259a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800259e:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80025a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025a2:	3301      	adds	r3, #1
 80025a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80025a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025a8:	2b03      	cmp	r3, #3
 80025aa:	ddee      	ble.n	800258a <MotorKalman_Init+0xba>
    }

    // Initialize output matrix C - measuring only position by default
    memset(filter->C, 0, sizeof(filter->C));
 80025ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ae:	33f0      	adds	r3, #240	@ 0xf0
 80025b0:	2210      	movs	r2, #16
 80025b2:	2100      	movs	r1, #0
 80025b4:	4618      	mov	r0, r3
 80025b6:	f010 fd91 	bl	80130dc <memset>
    filter->C[0] = 1.0f; // We only measure the position (first state) by default
 80025ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025bc:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80025c0:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

    // Initialize process noise input matrix G
    memset(filter->G, 0, sizeof(filter->G));
 80025c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025c6:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80025ca:	2210      	movs	r2, #16
 80025cc:	2100      	movs	r1, #0
 80025ce:	4618      	mov	r0, r3
 80025d0:	f010 fd84 	bl	80130dc <memset>
    filter->G[1] = 1.0f; // Process noise primarily affects the velocity state (index 1)
 80025d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025d6:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80025da:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104


    // Set process and measurement noise values
    MotorKalman_SetProcessNoise(filter, Q);
 80025de:	ed97 0a01 	vldr	s0, [r7, #4]
 80025e2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80025e4:	f000 f922 	bl	800282c <MotorKalman_SetProcessNoise>
    MotorKalman_SetMeasurementNoise(filter, R);
 80025e8:	ed97 0a00 	vldr	s0, [r7]
 80025ec:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80025ee:	f000 f94d 	bl	800288c <MotorKalman_SetMeasurementNoise>

    // Initialize ARM CMSIS DSP matrix instances - essential for safely using the functions
    arm_mat_init_f32(&filter->X_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->X);
 80025f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025f4:	f503 70d2 	add.w	r0, r3, #420	@ 0x1a4
 80025f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025fa:	2201      	movs	r2, #1
 80025fc:	2104      	movs	r1, #4
 80025fe:	f00f fffc 	bl	80125fa <arm_mat_init_f32>
    arm_mat_init_f32(&filter->P_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->P);
 8002602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002604:	f503 70d6 	add.w	r0, r3, #428	@ 0x1ac
 8002608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800260a:	3310      	adds	r3, #16
 800260c:	2204      	movs	r2, #4
 800260e:	2104      	movs	r1, #4
 8002610:	f00f fff3 	bl	80125fa <arm_mat_init_f32>
    arm_mat_init_f32(&filter->I_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->I_data);
 8002614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002616:	f503 703c 	add.w	r0, r3, #752	@ 0x2f0
 800261a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800261c:	f503 733e 	add.w	r3, r3, #760	@ 0x2f8
 8002620:	2204      	movs	r2, #4
 8002622:	2104      	movs	r1, #4
 8002624:	f00f ffe9 	bl	80125fa <arm_mat_init_f32>
    arm_mat_init_f32(&filter->R_matrix, MOTOR_KALMAN_NUM_OUTPUTS, MOTOR_KALMAN_NUM_OUTPUTS, filter->R);
 8002628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800262a:	f503 70e6 	add.w	r0, r3, #460	@ 0x1cc
 800262e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002630:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8002634:	2201      	movs	r2, #1
 8002636:	2101      	movs	r1, #1
 8002638:	f00f ffdf 	bl	80125fa <arm_mat_init_f32>
    arm_mat_init_f32(&filter->measurement_matrix, MOTOR_KALMAN_NUM_OUTPUTS, 1, filter->measurement_data);
 800263c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800263e:	f503 7036 	add.w	r0, r3, #728	@ 0x2d8
 8002642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002644:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 8002648:	2201      	movs	r2, #1
 800264a:	2101      	movs	r1, #1
 800264c:	f00f ffd5 	bl	80125fa <arm_mat_init_f32>
    arm_mat_init_f32(&filter->input_matrix, MOTOR_KALMAN_NUM_INPUTS, 1, filter->input_data);
 8002650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002652:	f503 7038 	add.w	r0, r3, #736	@ 0x2e0
 8002656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002658:	f503 733b 	add.w	r3, r3, #748	@ 0x2ec
 800265c:	2201      	movs	r2, #1
 800265e:	2101      	movs	r1, #1
 8002660:	f00f ffcb 	bl	80125fa <arm_mat_init_f32>

    // Initialize matrices for transposed versions
    arm_mat_init_f32(&filter->A_transpose_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->A_transpose_data);
 8002664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002666:	f503 70ee 	add.w	r0, r3, #476	@ 0x1dc
 800266a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800266c:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8002670:	2204      	movs	r2, #4
 8002672:	2104      	movs	r1, #4
 8002674:	f00f ffc1 	bl	80125fa <arm_mat_init_f32>
    arm_mat_init_f32(&filter->C_transpose_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_OUTPUTS, filter->C_transpose_data);
 8002678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800267a:	f503 70f2 	add.w	r0, r3, #484	@ 0x1e4
 800267e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002680:	f503 730b 	add.w	r3, r3, #556	@ 0x22c
 8002684:	2201      	movs	r2, #1
 8002686:	2104      	movs	r1, #4
 8002688:	f00f ffb7 	bl	80125fa <arm_mat_init_f32>

    // Initialize temp matrices essential for calculations
    arm_mat_init_f32(&filter->temp_state_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->temp_state_data);
 800268c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800268e:	f503 700f 	add.w	r0, r3, #572	@ 0x23c
 8002692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002694:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002698:	2201      	movs	r2, #1
 800269a:	2104      	movs	r1, #4
 800269c:	f00f ffad 	bl	80125fa <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_state_state_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->temp_state_state_data);
 80026a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026a2:	f503 7011 	add.w	r0, r3, #580	@ 0x244
 80026a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026a8:	f503 731d 	add.w	r3, r3, #628	@ 0x274
 80026ac:	2204      	movs	r2, #4
 80026ae:	2104      	movs	r1, #4
 80026b0:	f00f ffa3 	bl	80125fa <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_output_state_matrix, MOTOR_KALMAN_NUM_OUTPUTS, MOTOR_KALMAN_NUM_STATES, filter->temp_output_state_data);
 80026b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026b6:	f503 7013 	add.w	r0, r3, #588	@ 0x24c
 80026ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026bc:	f503 732d 	add.w	r3, r3, #692	@ 0x2b4
 80026c0:	2204      	movs	r2, #4
 80026c2:	2101      	movs	r1, #1
 80026c4:	f00f ff99 	bl	80125fa <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_output_output_matrix, MOTOR_KALMAN_NUM_OUTPUTS, MOTOR_KALMAN_NUM_OUTPUTS, filter->temp_output_output_data);
 80026c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ca:	f503 7015 	add.w	r0, r3, #596	@ 0x254
 80026ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d0:	f503 7331 	add.w	r3, r3, #708	@ 0x2c4
 80026d4:	2201      	movs	r2, #1
 80026d6:	2101      	movs	r1, #1
 80026d8:	f00f ff8f 	bl	80125fa <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_state_output_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_OUTPUTS, filter->temp_state_output_data);
 80026dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026de:	f503 7017 	add.w	r0, r3, #604	@ 0x25c
 80026e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026e4:	f503 7332 	add.w	r3, r3, #712	@ 0x2c8
 80026e8:	2201      	movs	r2, #1
 80026ea:	2104      	movs	r1, #4
 80026ec:	f00f ff85 	bl	80125fa <arm_mat_init_f32>

    // Generate continuous-time matrices and discretize the model
    MotorKalman_DiscretizeModel(filter);
 80026f0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80026f2:	f000 f82d 	bl	8002750 <MotorKalman_DiscretizeModel>

    // Initialize system matrices after discretization
    arm_mat_init_f32(&filter->A_d_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->A_d);
 80026f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026f8:	f503 70da 	add.w	r0, r3, #436	@ 0x1b4
 80026fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026fe:	3390      	adds	r3, #144	@ 0x90
 8002700:	2204      	movs	r2, #4
 8002702:	2104      	movs	r1, #4
 8002704:	f00f ff79 	bl	80125fa <arm_mat_init_f32>
    arm_mat_init_f32(&filter->B_d_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_INPUTS, filter->B_d);
 8002708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800270a:	f503 70de 	add.w	r0, r3, #444	@ 0x1bc
 800270e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002710:	33e0      	adds	r3, #224	@ 0xe0
 8002712:	2201      	movs	r2, #1
 8002714:	2104      	movs	r1, #4
 8002716:	f00f ff70 	bl	80125fa <arm_mat_init_f32>
    arm_mat_init_f32(&filter->Q_d_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->Q_d);
 800271a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800271c:	f503 70e2 	add.w	r0, r3, #452	@ 0x1c4
 8002720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002722:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002726:	2204      	movs	r2, #4
 8002728:	2104      	movs	r1, #4
 800272a:	f00f ff66 	bl	80125fa <arm_mat_init_f32>
    arm_mat_init_f32(&filter->K_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_OUTPUTS, filter->K);
 800272e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002730:	f503 70ea 	add.w	r0, r3, #468	@ 0x1d4
 8002734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002736:	f503 73ca 	add.w	r3, r3, #404	@ 0x194
 800273a:	2201      	movs	r2, #1
 800273c:	2104      	movs	r1, #4
 800273e:	f00f ff5c 	bl	80125fa <arm_mat_init_f32>
}
 8002742:	bf00      	nop
 8002744:	3730      	adds	r7, #48	@ 0x30
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	42c80000 	.word	0x42c80000

08002750 <MotorKalman_DiscretizeModel>:

void MotorKalman_DiscretizeModel(MotorKalman* filter) {
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
    // Use the GenerateMotorMatrices function to discretize the model
    GenerateMotorMatrices(
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	edd3 7ad3 	vldr	s15, [r3, #844]	@ 0x34c
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	ed93 7ad4 	vldr	s14, [r3, #848]	@ 0x350
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	edd3 6acf 	vldr	s13, [r3, #828]	@ 0x33c
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	ed93 6ad0 	vldr	s12, [r3, #832]	@ 0x340
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	edd3 5ad2 	vldr	s11, [r3, #840]	@ 0x348
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	ed93 5ad1 	vldr	s10, [r3, #836]	@ 0x344
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	edd3 4ace 	vldr	s9, [r3, #824]	@ 0x338
        filter->J,       // Motor inertia
        filter->b,       // Viscous friction coefficient
        filter->K_e,     // Back-EMF constant
        filter->K_t,     // Torque constant
        filter->dt,      // Sample time
        filter->A_d,     // Output discrete state matrix
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f103 0290 	add.w	r2, r3, #144	@ 0x90
        filter->B_d      // Output discrete input matrix
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	33e0      	adds	r3, #224	@ 0xe0
    GenerateMotorMatrices(
 800278c:	4619      	mov	r1, r3
 800278e:	4610      	mov	r0, r2
 8002790:	eeb0 3a64 	vmov.f32	s6, s9
 8002794:	eef0 2a45 	vmov.f32	s5, s10
 8002798:	eeb0 2a65 	vmov.f32	s4, s11
 800279c:	eef0 1a46 	vmov.f32	s3, s12
 80027a0:	eeb0 1a66 	vmov.f32	s2, s13
 80027a4:	eef0 0a47 	vmov.f32	s1, s14
 80027a8:	eeb0 0a67 	vmov.f32	s0, s15
 80027ac:	f001 f83c 	bl	8003828 <GenerateMotorMatrices>
    );

    // Initialize discrete process noise matrix Q_d (simplified for stability)
    memset(filter->Q_d, 0, sizeof(filter->Q_d));
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80027b6:	2240      	movs	r2, #64	@ 0x40
 80027b8:	2100      	movs	r1, #0
 80027ba:	4618      	mov	r0, r3
 80027bc:	f010 fc8e 	bl	80130dc <memset>

    // Set diagonal elements for process noise (simpler but reliable approach)
    filter->Q_d[0 * MOTOR_KALMAN_NUM_STATES + 0] = 0.01f * filter->dt * filter->dt; // Position noise
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 80027c6:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8002824 <MotorKalman_DiscretizeModel+0xd4>
 80027ca:	ee27 7a87 	vmul.f32	s14, s15, s14
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 80027d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	edc3 7a54 	vstr	s15, [r3, #336]	@ 0x150
    filter->Q_d[1 * MOTOR_KALMAN_NUM_STATES + 1] = filter->Q[1 * MOTOR_KALMAN_NUM_STATES + 1] * filter->dt; // Velocity noise (main process noise)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	ed93 7a49 	vldr	s14, [r3, #292]	@ 0x124
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 80027ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	edc3 7a59 	vstr	s15, [r3, #356]	@ 0x164
    filter->Q_d[2 * MOTOR_KALMAN_NUM_STATES + 2] = 0.1f * filter->dt; // Load torque noise
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 80027fa:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8002828 <MotorKalman_DiscretizeModel+0xd8>
 80027fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	edc3 7a5e 	vstr	s15, [r3, #376]	@ 0x178
    filter->Q_d[3 * MOTOR_KALMAN_NUM_STATES + 3] = 0.01f * filter->dt; // Current noise
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 800280e:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8002824 <MotorKalman_DiscretizeModel+0xd4>
 8002812:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	edc3 7a63 	vstr	s15, [r3, #396]	@ 0x18c
}
 800281c:	bf00      	nop
 800281e:	3708      	adds	r7, #8
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	3c23d70a 	.word	0x3c23d70a
 8002828:	3dcccccd 	.word	0x3dcccccd

0800282c <MotorKalman_SetProcessNoise>:

void MotorKalman_SetProcessNoise(MotorKalman* filter, float32_t Q) {
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	ed87 0a00 	vstr	s0, [r7]
    // Set the process noise covariance matrix Q (continuous)
    memset(filter->Q, 0, sizeof(filter->Q));
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 800283e:	2240      	movs	r2, #64	@ 0x40
 8002840:	2100      	movs	r1, #0
 8002842:	4618      	mov	r0, r3
 8002844:	f010 fc4a 	bl	80130dc <memset>

    // Only the velocity state (index 1) has process noise per G = [0;1;0;0]
    filter->Q[1 * MOTOR_KALMAN_NUM_STATES + 1] = Q * Q;
 8002848:	edd7 7a00 	vldr	s15, [r7]
 800284c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	edc3 7a49 	vstr	s15, [r3, #292]	@ 0x124
    filter->sigma_ml = Q;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	683a      	ldr	r2, [r7, #0]
 800285a:	f8c3 2354 	str.w	r2, [r3, #852]	@ 0x354

    // Update the discrete process noise matrix if A_d has already been initialized
    if (filter->A_d[0] != 0.0f || filter->A_d[1] != 0.0f) {
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	edd3 7a24 	vldr	s15, [r3, #144]	@ 0x90
 8002864:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002868:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800286c:	d107      	bne.n	800287e <MotorKalman_SetProcessNoise+0x52>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	edd3 7a25 	vldr	s15, [r3, #148]	@ 0x94
 8002874:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800287c:	d002      	beq.n	8002884 <MotorKalman_SetProcessNoise+0x58>
        MotorKalman_DiscretizeModel(filter); // Recompute discretization with new Q
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f7ff ff66 	bl	8002750 <MotorKalman_DiscretizeModel>
    }
}
 8002884:	bf00      	nop
 8002886:	3708      	adds	r7, #8
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}

0800288c <MotorKalman_SetMeasurementNoise>:

void MotorKalman_SetMeasurementNoise(MotorKalman* filter, float32_t R) {
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	ed87 0a00 	vstr	s0, [r7]
    // Store the noise value
    filter->sigma_pos = sqrtf(R);
 8002898:	ed97 0a00 	vldr	s0, [r7]
 800289c:	f010 fd38 	bl	8013310 <sqrtf>
 80028a0:	eef0 7a40 	vmov.f32	s15, s0
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	edc3 7ad6 	vstr	s15, [r3, #856]	@ 0x358

    // Set the measurement noise covariance matrix R
    filter->R[0] = R;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	683a      	ldr	r2, [r7, #0]
 80028ae:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
}
 80028b2:	bf00      	nop
 80028b4:	3708      	adds	r7, #8
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}

080028ba <MotorKalman_Predict>:
    filter->velocity = 0.0f;
    filter->load_torque = 0.0f;
    filter->current = 0.0f;
}

void MotorKalman_Predict(MotorKalman* filter, float32_t voltage_input) {
 80028ba:	b580      	push	{r7, lr}
 80028bc:	b0b2      	sub	sp, #200	@ 0xc8
 80028be:	af00      	add	r7, sp, #0
 80028c0:	6078      	str	r0, [r7, #4]
 80028c2:	ed87 0a00 	vstr	s0, [r7]
    // Store input for next step
    filter->input_data[0] = voltage_input;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	683a      	ldr	r2, [r7, #0]
 80028ca:	f8c3 22ec 	str.w	r2, [r3, #748]	@ 0x2ec

    // 1. State prediction using simplified method (more stable in embedded systems)
    // Compute x = A*x + B*u directly without using matrix operations
    float32_t new_state[MOTOR_KALMAN_NUM_STATES] = {0};
 80028ce:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80028d2:	2200      	movs	r2, #0
 80028d4:	601a      	str	r2, [r3, #0]
 80028d6:	605a      	str	r2, [r3, #4]
 80028d8:	609a      	str	r2, [r3, #8]
 80028da:	60da      	str	r2, [r3, #12]

    // Calculate A*x (manually)
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80028dc:	2300      	movs	r3, #0
 80028de:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80028e2:	e041      	b.n	8002968 <MotorKalman_Predict+0xae>
        new_state[i] = 0;
 80028e4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	33c8      	adds	r3, #200	@ 0xc8
 80028ec:	443b      	add	r3, r7
 80028ee:	3b3c      	subs	r3, #60	@ 0x3c
 80028f0:	f04f 0200 	mov.w	r2, #0
 80028f4:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80028f6:	2300      	movs	r3, #0
 80028f8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80028fc:	e02b      	b.n	8002956 <MotorKalman_Predict+0x9c>
            new_state[i] += filter->A_d[i * MOTOR_KALMAN_NUM_STATES + j] * filter->X[j];
 80028fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	33c8      	adds	r3, #200	@ 0xc8
 8002906:	443b      	add	r3, r7
 8002908:	3b3c      	subs	r3, #60	@ 0x3c
 800290a:	ed93 7a00 	vldr	s14, [r3]
 800290e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002912:	009a      	lsls	r2, r3, #2
 8002914:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002918:	4413      	add	r3, r2
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	3324      	adds	r3, #36	@ 0x24
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	4413      	add	r3, r2
 8002922:	edd3 6a00 	vldr	s13, [r3]
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	4413      	add	r3, r2
 8002930:	edd3 7a00 	vldr	s15, [r3]
 8002934:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002938:	ee77 7a27 	vadd.f32	s15, s14, s15
 800293c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	33c8      	adds	r3, #200	@ 0xc8
 8002944:	443b      	add	r3, r7
 8002946:	3b3c      	subs	r3, #60	@ 0x3c
 8002948:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 800294c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002950:	3301      	adds	r3, #1
 8002952:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002956:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800295a:	2b03      	cmp	r3, #3
 800295c:	ddcf      	ble.n	80028fe <MotorKalman_Predict+0x44>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 800295e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002962:	3301      	adds	r3, #1
 8002964:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002968:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800296c:	2b03      	cmp	r3, #3
 800296e:	ddb9      	ble.n	80028e4 <MotorKalman_Predict+0x2a>
        }
    }

    // Add B*u (manually)
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002970:	2300      	movs	r3, #0
 8002972:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002976:	e021      	b.n	80029bc <MotorKalman_Predict+0x102>
        filter->X[i] = new_state[i] + filter->B_d[i] * voltage_input;
 8002978:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	33c8      	adds	r3, #200	@ 0xc8
 8002980:	443b      	add	r3, r7
 8002982:	3b3c      	subs	r3, #60	@ 0x3c
 8002984:	ed93 7a00 	vldr	s14, [r3]
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800298e:	3338      	adds	r3, #56	@ 0x38
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	4413      	add	r3, r2
 8002994:	edd3 6a00 	vldr	s13, [r3]
 8002998:	edd7 7a00 	vldr	s15, [r7]
 800299c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	4413      	add	r3, r2
 80029ae:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80029b2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80029b6:	3301      	adds	r3, #1
 80029b8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80029bc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80029c0:	2b03      	cmp	r3, #3
 80029c2:	ddd9      	ble.n	8002978 <MotorKalman_Predict+0xbe>
    }

    // 2. Covariance prediction using simplified method (Joseph form for stability)
    // Using direct matrix computation for P = A*P*A' + Q
    float32_t AP[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES] = {0};
 80029c4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80029c8:	2240      	movs	r2, #64	@ 0x40
 80029ca:	2100      	movs	r1, #0
 80029cc:	4618      	mov	r0, r3
 80029ce:	f010 fb85 	bl	80130dc <memset>
    float32_t APAT[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES] = {0};
 80029d2:	f107 030c 	add.w	r3, r7, #12
 80029d6:	2240      	movs	r2, #64	@ 0x40
 80029d8:	2100      	movs	r1, #0
 80029da:	4618      	mov	r0, r3
 80029dc:	f010 fb7e 	bl	80130dc <memset>

    // Compute A*P
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80029e0:	2300      	movs	r3, #0
 80029e2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80029e6:	e05f      	b.n	8002aa8 <MotorKalman_Predict+0x1ee>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80029e8:	2300      	movs	r3, #0
 80029ea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80029ee:	e052      	b.n	8002a96 <MotorKalman_Predict+0x1dc>
            AP[i * MOTOR_KALMAN_NUM_STATES + j] = 0;
 80029f0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80029f4:	009a      	lsls	r2, r3, #2
 80029f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80029fa:	4413      	add	r3, r2
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	33c8      	adds	r3, #200	@ 0xc8
 8002a00:	443b      	add	r3, r7
 8002a02:	3b7c      	subs	r3, #124	@ 0x7c
 8002a04:	f04f 0200 	mov.w	r2, #0
 8002a08:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002a10:	e038      	b.n	8002a84 <MotorKalman_Predict+0x1ca>
                AP[i * MOTOR_KALMAN_NUM_STATES + j] +=
 8002a12:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002a16:	009a      	lsls	r2, r3, #2
 8002a18:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002a1c:	4413      	add	r3, r2
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	33c8      	adds	r3, #200	@ 0xc8
 8002a22:	443b      	add	r3, r7
 8002a24:	3b7c      	subs	r3, #124	@ 0x7c
 8002a26:	ed93 7a00 	vldr	s14, [r3]
                    filter->A_d[i * MOTOR_KALMAN_NUM_STATES + k] * filter->P[k * MOTOR_KALMAN_NUM_STATES + j];
 8002a2a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002a2e:	009a      	lsls	r2, r3, #2
 8002a30:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002a34:	4413      	add	r3, r2
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	3324      	adds	r3, #36	@ 0x24
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	4413      	add	r3, r2
 8002a3e:	edd3 6a00 	vldr	s13, [r3]
 8002a42:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002a46:	009a      	lsls	r2, r3, #2
 8002a48:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002a4c:	4413      	add	r3, r2
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	3304      	adds	r3, #4
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	4413      	add	r3, r2
 8002a56:	edd3 7a00 	vldr	s15, [r3]
 8002a5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
                AP[i * MOTOR_KALMAN_NUM_STATES + j] +=
 8002a5e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002a62:	009a      	lsls	r2, r3, #2
 8002a64:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002a68:	4413      	add	r3, r2
 8002a6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	33c8      	adds	r3, #200	@ 0xc8
 8002a72:	443b      	add	r3, r7
 8002a74:	3b7c      	subs	r3, #124	@ 0x7c
 8002a76:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 8002a7a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002a7e:	3301      	adds	r3, #1
 8002a80:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002a84:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002a88:	2b03      	cmp	r3, #3
 8002a8a:	ddc2      	ble.n	8002a12 <MotorKalman_Predict+0x158>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002a8c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002a90:	3301      	adds	r3, #1
 8002a92:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002a96:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002a9a:	2b03      	cmp	r3, #3
 8002a9c:	dda8      	ble.n	80029f0 <MotorKalman_Predict+0x136>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002a9e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002aa2:	3301      	adds	r3, #1
 8002aa4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002aa8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002aac:	2b03      	cmp	r3, #3
 8002aae:	dd9b      	ble.n	80029e8 <MotorKalman_Predict+0x12e>
            }
        }
    }

    // Compute (A*P)*A'
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002ab6:	e05f      	b.n	8002b78 <MotorKalman_Predict+0x2be>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002ab8:	2300      	movs	r3, #0
 8002aba:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002abe:	e052      	b.n	8002b66 <MotorKalman_Predict+0x2ac>
            APAT[i * MOTOR_KALMAN_NUM_STATES + j] = 0;
 8002ac0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002ac4:	009a      	lsls	r2, r3, #2
 8002ac6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002aca:	4413      	add	r3, r2
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	33c8      	adds	r3, #200	@ 0xc8
 8002ad0:	443b      	add	r3, r7
 8002ad2:	3bbc      	subs	r3, #188	@ 0xbc
 8002ad4:	f04f 0200 	mov.w	r2, #0
 8002ad8:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 8002ada:	2300      	movs	r3, #0
 8002adc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8002ae0:	e038      	b.n	8002b54 <MotorKalman_Predict+0x29a>
                APAT[i * MOTOR_KALMAN_NUM_STATES + j] +=
 8002ae2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002ae6:	009a      	lsls	r2, r3, #2
 8002ae8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002aec:	4413      	add	r3, r2
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	33c8      	adds	r3, #200	@ 0xc8
 8002af2:	443b      	add	r3, r7
 8002af4:	3bbc      	subs	r3, #188	@ 0xbc
 8002af6:	ed93 7a00 	vldr	s14, [r3]
                    AP[i * MOTOR_KALMAN_NUM_STATES + k] * filter->A_d[j * MOTOR_KALMAN_NUM_STATES + k];
 8002afa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002afe:	009a      	lsls	r2, r3, #2
 8002b00:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002b04:	4413      	add	r3, r2
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	33c8      	adds	r3, #200	@ 0xc8
 8002b0a:	443b      	add	r3, r7
 8002b0c:	3b7c      	subs	r3, #124	@ 0x7c
 8002b0e:	edd3 6a00 	vldr	s13, [r3]
 8002b12:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002b16:	009a      	lsls	r2, r3, #2
 8002b18:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002b1c:	4413      	add	r3, r2
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	3324      	adds	r3, #36	@ 0x24
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	4413      	add	r3, r2
 8002b26:	edd3 7a00 	vldr	s15, [r3]
 8002b2a:	ee66 7aa7 	vmul.f32	s15, s13, s15
                APAT[i * MOTOR_KALMAN_NUM_STATES + j] +=
 8002b2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002b32:	009a      	lsls	r2, r3, #2
 8002b34:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002b38:	4413      	add	r3, r2
 8002b3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	33c8      	adds	r3, #200	@ 0xc8
 8002b42:	443b      	add	r3, r7
 8002b44:	3bbc      	subs	r3, #188	@ 0xbc
 8002b46:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 8002b4a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002b4e:	3301      	adds	r3, #1
 8002b50:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8002b54:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002b58:	2b03      	cmp	r3, #3
 8002b5a:	ddc2      	ble.n	8002ae2 <MotorKalman_Predict+0x228>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002b5c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002b60:	3301      	adds	r3, #1
 8002b62:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002b66:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002b6a:	2b03      	cmp	r3, #3
 8002b6c:	dda8      	ble.n	8002ac0 <MotorKalman_Predict+0x206>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002b6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002b72:	3301      	adds	r3, #1
 8002b74:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002b78:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002b7c:	2b03      	cmp	r3, #3
 8002b7e:	dd9b      	ble.n	8002ab8 <MotorKalman_Predict+0x1fe>
            }
        }
    }

    // Add Q to get P = A*P*A' + Q
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002b80:	2300      	movs	r3, #0
 8002b82:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002b86:	e037      	b.n	8002bf8 <MotorKalman_Predict+0x33e>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002b88:	2300      	movs	r3, #0
 8002b8a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002b8e:	e02a      	b.n	8002be6 <MotorKalman_Predict+0x32c>
            filter->P[i * MOTOR_KALMAN_NUM_STATES + j] =
                APAT[i * MOTOR_KALMAN_NUM_STATES + j] + filter->Q_d[i * MOTOR_KALMAN_NUM_STATES + j];
 8002b90:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002b94:	009a      	lsls	r2, r3, #2
 8002b96:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002b9a:	4413      	add	r3, r2
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	33c8      	adds	r3, #200	@ 0xc8
 8002ba0:	443b      	add	r3, r7
 8002ba2:	3bbc      	subs	r3, #188	@ 0xbc
 8002ba4:	ed93 7a00 	vldr	s14, [r3]
 8002ba8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002bac:	009a      	lsls	r2, r3, #2
 8002bae:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002bb2:	4413      	add	r3, r2
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	3354      	adds	r3, #84	@ 0x54
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	4413      	add	r3, r2
 8002bbc:	edd3 7a00 	vldr	s15, [r3]
            filter->P[i * MOTOR_KALMAN_NUM_STATES + j] =
 8002bc0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002bc4:	009a      	lsls	r2, r3, #2
 8002bc6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002bca:	4413      	add	r3, r2
                APAT[i * MOTOR_KALMAN_NUM_STATES + j] + filter->Q_d[i * MOTOR_KALMAN_NUM_STATES + j];
 8002bcc:	ee77 7a27 	vadd.f32	s15, s14, s15
            filter->P[i * MOTOR_KALMAN_NUM_STATES + j] =
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	3304      	adds	r3, #4
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	4413      	add	r3, r2
 8002bd8:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002bdc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002be0:	3301      	adds	r3, #1
 8002be2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002be6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002bea:	2b03      	cmp	r3, #3
 8002bec:	ddd0      	ble.n	8002b90 <MotorKalman_Predict+0x2d6>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002bee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002bf2:	3301      	adds	r3, #1
 8002bf4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002bf8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002bfc:	2b03      	cmp	r3, #3
 8002bfe:	ddc3      	ble.n	8002b88 <MotorKalman_Predict+0x2ce>
        }
    }

    // Update state estimates for easy access
    filter->position = filter->X[0];
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f8c3 235c 	str.w	r2, [r3, #860]	@ 0x35c
    filter->velocity = filter->X[1];
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685a      	ldr	r2, [r3, #4]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	f8c3 2360 	str.w	r2, [r3, #864]	@ 0x360
    filter->load_torque = filter->X[2];
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	689a      	ldr	r2, [r3, #8]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f8c3 2364 	str.w	r2, [r3, #868]	@ 0x364
    filter->current = filter->X[3];
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	68da      	ldr	r2, [r3, #12]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f8c3 2368 	str.w	r2, [r3, #872]	@ 0x368

    // Update CMSIS DSP matrices for next update step
    arm_mat_init_f32(&filter->X_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->X);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f503 70d2 	add.w	r0, r3, #420	@ 0x1a4
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2201      	movs	r2, #1
 8002c32:	2104      	movs	r1, #4
 8002c34:	f00f fce1 	bl	80125fa <arm_mat_init_f32>
    arm_mat_init_f32(&filter->P_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->P);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	f503 70d6 	add.w	r0, r3, #428	@ 0x1ac
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	3310      	adds	r3, #16
 8002c42:	2204      	movs	r2, #4
 8002c44:	2104      	movs	r1, #4
 8002c46:	f00f fcd8 	bl	80125fa <arm_mat_init_f32>
}
 8002c4a:	bf00      	nop
 8002c4c:	37c8      	adds	r7, #200	@ 0xc8
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
	...

08002c54 <MotorKalman_Update>:

void MotorKalman_Update(MotorKalman* filter, float32_t position) {
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b0d0      	sub	sp, #320	@ 0x140
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002c5e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002c62:	6018      	str	r0, [r3, #0]
 8002c64:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002c68:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002c6c:	ed83 0a00 	vstr	s0, [r3]
    // Store the position measurement
    filter->measurement_data[0] = position;
 8002c70:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002c74:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8002c7e:	f5a2 72a0 	sub.w	r2, r2, #320	@ 0x140
 8002c82:	6812      	ldr	r2, [r2, #0]
 8002c84:	f8c3 22e8 	str.w	r2, [r3, #744]	@ 0x2e8

    // 1. Compute innovation: y - C*x (directly, no matrix operations)
    float32_t Cx = filter->C[0] * filter->X[0] + filter->C[1] * filter->X[1] +
 8002c88:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002c8c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	ed93 7a3c 	vldr	s14, [r3, #240]	@ 0xf0
 8002c96:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002c9a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	edd3 7a00 	vldr	s15, [r3]
 8002ca4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ca8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002cac:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	edd3 6a3d 	vldr	s13, [r3, #244]	@ 0xf4
 8002cb6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002cba:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	edd3 7a01 	vldr	s15, [r3, #4]
 8002cc4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002cc8:	ee37 7a27 	vadd.f32	s14, s14, s15
                  filter->C[2] * filter->X[2] + filter->C[3] * filter->X[3];
 8002ccc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002cd0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	edd3 6a3e 	vldr	s13, [r3, #248]	@ 0xf8
 8002cda:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002cde:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	edd3 7a02 	vldr	s15, [r3, #8]
 8002ce8:	ee66 7aa7 	vmul.f32	s15, s13, s15
    float32_t Cx = filter->C[0] * filter->X[0] + filter->C[1] * filter->X[1] +
 8002cec:	ee37 7a27 	vadd.f32	s14, s14, s15
                  filter->C[2] * filter->X[2] + filter->C[3] * filter->X[3];
 8002cf0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002cf4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	edd3 6a3f 	vldr	s13, [r3, #252]	@ 0xfc
 8002cfe:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002d02:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	edd3 7a03 	vldr	s15, [r3, #12]
 8002d0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
    float32_t Cx = filter->C[0] * filter->X[0] + filter->C[1] * filter->X[1] +
 8002d10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d14:	edc7 7a40 	vstr	s15, [r7, #256]	@ 0x100
    float32_t innovation = position - Cx;
 8002d18:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002d1c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002d20:	ed93 7a00 	vldr	s14, [r3]
 8002d24:	edd7 7a40 	vldr	s15, [r7, #256]	@ 0x100
 8002d28:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d2c:	edc7 7a3f 	vstr	s15, [r7, #252]	@ 0xfc

    // 2. Compute innovation covariance: S = C*P*C' + R (directly)
    float32_t CP[MOTOR_KALMAN_NUM_STATES] = {0};
 8002d30:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8002d34:	2200      	movs	r2, #0
 8002d36:	601a      	str	r2, [r3, #0]
 8002d38:	605a      	str	r2, [r3, #4]
 8002d3a:	609a      	str	r2, [r3, #8]
 8002d3c:	60da      	str	r2, [r3, #12]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002d3e:	2300      	movs	r3, #0
 8002d40:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8002d44:	e04d      	b.n	8002de2 <MotorKalman_Update+0x18e>
        CP[i] = 0;
 8002d46:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002d50:	443b      	add	r3, r7
 8002d52:	3b58      	subs	r3, #88	@ 0x58
 8002d54:	f04f 0200 	mov.w	r2, #0
 8002d58:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8002d60:	e036      	b.n	8002dd0 <MotorKalman_Update+0x17c>
            CP[i] += filter->C[j] * filter->P[j * MOTOR_KALMAN_NUM_STATES + i];
 8002d62:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002d6c:	443b      	add	r3, r7
 8002d6e:	3b58      	subs	r3, #88	@ 0x58
 8002d70:	ed93 7a00 	vldr	s14, [r3]
 8002d74:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002d78:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002d82:	333c      	adds	r3, #60	@ 0x3c
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	4413      	add	r3, r2
 8002d88:	edd3 6a00 	vldr	s13, [r3]
 8002d8c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002d90:	009a      	lsls	r2, r3, #2
 8002d92:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002d96:	4413      	add	r3, r2
 8002d98:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8002d9c:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8002da0:	6812      	ldr	r2, [r2, #0]
 8002da2:	3304      	adds	r3, #4
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	4413      	add	r3, r2
 8002da8:	edd3 7a00 	vldr	s15, [r3]
 8002dac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002db0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002db4:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002dbe:	443b      	add	r3, r7
 8002dc0:	3b58      	subs	r3, #88	@ 0x58
 8002dc2:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002dc6:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002dca:	3301      	adds	r3, #1
 8002dcc:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8002dd0:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002dd4:	2b03      	cmp	r3, #3
 8002dd6:	ddc4      	ble.n	8002d62 <MotorKalman_Update+0x10e>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002dd8:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002ddc:	3301      	adds	r3, #1
 8002dde:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8002de2:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002de6:	2b03      	cmp	r3, #3
 8002de8:	ddad      	ble.n	8002d46 <MotorKalman_Update+0xf2>
        }
    }

    float32_t CPCT = 0;
 8002dea:	f04f 0300 	mov.w	r3, #0
 8002dee:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002df2:	2300      	movs	r3, #0
 8002df4:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8002df8:	e021      	b.n	8002e3e <MotorKalman_Update+0x1ea>
        CPCT += CP[i] * filter->C[i];
 8002dfa:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002e04:	443b      	add	r3, r7
 8002e06:	3b58      	subs	r3, #88	@ 0x58
 8002e08:	ed93 7a00 	vldr	s14, [r3]
 8002e0c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002e10:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002e1a:	333c      	adds	r3, #60	@ 0x3c
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	4413      	add	r3, r2
 8002e20:	edd3 7a00 	vldr	s15, [r3]
 8002e24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e28:	ed97 7a4d 	vldr	s14, [r7, #308]	@ 0x134
 8002e2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e30:	edc7 7a4d 	vstr	s15, [r7, #308]	@ 0x134
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002e34:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002e38:	3301      	adds	r3, #1
 8002e3a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8002e3e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002e42:	2b03      	cmp	r3, #3
 8002e44:	ddd9      	ble.n	8002dfa <MotorKalman_Update+0x1a6>
    }

    float32_t S = CPCT + filter->R[0];
 8002e46:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002e4a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	edd3 7a64 	vldr	s15, [r3, #400]	@ 0x190
 8002e54:	ed97 7a4d 	vldr	s14, [r7, #308]	@ 0x134
 8002e58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e5c:	edc7 7a3e 	vstr	s15, [r7, #248]	@ 0xf8

    // 3. Compute Kalman gain: K = P*C'/S (directly)
    float32_t PC[MOTOR_KALMAN_NUM_STATES] = {0};
 8002e60:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8002e64:	2200      	movs	r2, #0
 8002e66:	601a      	str	r2, [r3, #0]
 8002e68:	605a      	str	r2, [r3, #4]
 8002e6a:	609a      	str	r2, [r3, #8]
 8002e6c:	60da      	str	r2, [r3, #12]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002e6e:	2300      	movs	r3, #0
 8002e70:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8002e74:	e04d      	b.n	8002f12 <MotorKalman_Update+0x2be>
        PC[i] = 0;
 8002e76:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002e80:	443b      	add	r3, r7
 8002e82:	3b68      	subs	r3, #104	@ 0x68
 8002e84:	f04f 0200 	mov.w	r2, #0
 8002e88:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8002e90:	e036      	b.n	8002f00 <MotorKalman_Update+0x2ac>
            PC[i] += filter->P[i * MOTOR_KALMAN_NUM_STATES + j] * filter->C[j];
 8002e92:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002e9c:	443b      	add	r3, r7
 8002e9e:	3b68      	subs	r3, #104	@ 0x68
 8002ea0:	ed93 7a00 	vldr	s14, [r3]
 8002ea4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002ea8:	009a      	lsls	r2, r3, #2
 8002eaa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002eae:	4413      	add	r3, r2
 8002eb0:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8002eb4:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8002eb8:	6812      	ldr	r2, [r2, #0]
 8002eba:	3304      	adds	r3, #4
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	4413      	add	r3, r2
 8002ec0:	edd3 6a00 	vldr	s13, [r3]
 8002ec4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002ec8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002ed2:	333c      	adds	r3, #60	@ 0x3c
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	4413      	add	r3, r2
 8002ed8:	edd3 7a00 	vldr	s15, [r3]
 8002edc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ee0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ee4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002eee:	443b      	add	r3, r7
 8002ef0:	3b68      	subs	r3, #104	@ 0x68
 8002ef2:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002ef6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002efa:	3301      	adds	r3, #1
 8002efc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8002f00:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002f04:	2b03      	cmp	r3, #3
 8002f06:	ddc4      	ble.n	8002e92 <MotorKalman_Update+0x23e>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002f08:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002f0c:	3301      	adds	r3, #1
 8002f0e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8002f12:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002f16:	2b03      	cmp	r3, #3
 8002f18:	ddad      	ble.n	8002e76 <MotorKalman_Update+0x222>
        }
    }

    float32_t K[MOTOR_KALMAN_NUM_STATES] = {0};
 8002f1a:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8002f1e:	2200      	movs	r2, #0
 8002f20:	601a      	str	r2, [r3, #0]
 8002f22:	605a      	str	r2, [r3, #4]
 8002f24:	609a      	str	r2, [r3, #8]
 8002f26:	60da      	str	r2, [r3, #12]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002f28:	2300      	movs	r3, #0
 8002f2a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002f2e:	e01a      	b.n	8002f66 <MotorKalman_Update+0x312>
        K[i] = PC[i] / S;
 8002f30:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002f3a:	443b      	add	r3, r7
 8002f3c:	3b68      	subs	r3, #104	@ 0x68
 8002f3e:	edd3 6a00 	vldr	s13, [r3]
 8002f42:	ed97 7a3e 	vldr	s14, [r7, #248]	@ 0xf8
 8002f46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f4a:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002f54:	443b      	add	r3, r7
 8002f56:	3b78      	subs	r3, #120	@ 0x78
 8002f58:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002f5c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002f60:	3301      	adds	r3, #1
 8002f62:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002f66:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002f6a:	2b03      	cmp	r3, #3
 8002f6c:	dde0      	ble.n	8002f30 <MotorKalman_Update+0x2dc>
    }

    // 4. Update state estimate: x = x + K*innovation (directly)
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002f6e:	2300      	movs	r3, #0
 8002f70:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002f74:	e029      	b.n	8002fca <MotorKalman_Update+0x376>
        filter->X[i] += K[i] * innovation;
 8002f76:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002f7a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	4413      	add	r3, r2
 8002f88:	ed93 7a00 	vldr	s14, [r3]
 8002f8c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002f96:	443b      	add	r3, r7
 8002f98:	3b78      	subs	r3, #120	@ 0x78
 8002f9a:	edd3 6a00 	vldr	s13, [r3]
 8002f9e:	edd7 7a3f 	vldr	s15, [r7, #252]	@ 0xfc
 8002fa2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002fa6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002faa:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002fae:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	4413      	add	r3, r2
 8002fbc:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002fc0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002fc4:	3301      	adds	r3, #1
 8002fc6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002fca:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002fce:	2b03      	cmp	r3, #3
 8002fd0:	ddd1      	ble.n	8002f76 <MotorKalman_Update+0x322>
    }

    // 5. Update covariance matrix: P = (I - K*C)*P (Joseph form for better stability)
    float32_t KC[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES] = {0};
 8002fd2:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8002fd6:	2240      	movs	r2, #64	@ 0x40
 8002fd8:	2100      	movs	r1, #0
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f010 f87e 	bl	80130dc <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002fe6:	e035      	b.n	8003054 <MotorKalman_Update+0x400>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002fe8:	2300      	movs	r3, #0
 8002fea:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8002fee:	e028      	b.n	8003042 <MotorKalman_Update+0x3ee>
            KC[i * MOTOR_KALMAN_NUM_STATES + j] = K[i] * filter->C[j];
 8002ff0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002ffa:	443b      	add	r3, r7
 8002ffc:	3b78      	subs	r3, #120	@ 0x78
 8002ffe:	ed93 7a00 	vldr	s14, [r3]
 8003002:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003006:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8003010:	333c      	adds	r3, #60	@ 0x3c
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	4413      	add	r3, r2
 8003016:	edd3 7a00 	vldr	s15, [r3]
 800301a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800301e:	009a      	lsls	r2, r3, #2
 8003020:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8003024:	4413      	add	r3, r2
 8003026:	ee67 7a27 	vmul.f32	s15, s14, s15
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8003030:	443b      	add	r3, r7
 8003032:	3bb8      	subs	r3, #184	@ 0xb8
 8003034:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8003038:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800303c:	3301      	adds	r3, #1
 800303e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8003042:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8003046:	2b03      	cmp	r3, #3
 8003048:	ddd2      	ble.n	8002ff0 <MotorKalman_Update+0x39c>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 800304a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800304e:	3301      	adds	r3, #1
 8003050:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8003054:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003058:	2b03      	cmp	r3, #3
 800305a:	ddc5      	ble.n	8002fe8 <MotorKalman_Update+0x394>
        }
    }

    float32_t IKC[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES] = {0};
 800305c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8003060:	2240      	movs	r2, #64	@ 0x40
 8003062:	2100      	movs	r1, #0
 8003064:	4618      	mov	r0, r3
 8003066:	f010 f839 	bl	80130dc <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 800306a:	2300      	movs	r3, #0
 800306c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8003070:	e038      	b.n	80030e4 <MotorKalman_Update+0x490>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8003072:	2300      	movs	r3, #0
 8003074:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8003078:	e02b      	b.n	80030d2 <MotorKalman_Update+0x47e>
            IKC[i * MOTOR_KALMAN_NUM_STATES + j] = (i == j ? 1.0f : 0.0f) - KC[i * MOTOR_KALMAN_NUM_STATES + j];
 800307a:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 800307e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003082:	429a      	cmp	r2, r3
 8003084:	d102      	bne.n	800308c <MotorKalman_Update+0x438>
 8003086:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800308a:	e001      	b.n	8003090 <MotorKalman_Update+0x43c>
 800308c:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 80032a8 <MotorKalman_Update+0x654>
 8003090:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003094:	009a      	lsls	r2, r3, #2
 8003096:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800309a:	4413      	add	r3, r2
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80030a2:	443b      	add	r3, r7
 80030a4:	3bb8      	subs	r3, #184	@ 0xb8
 80030a6:	edd3 7a00 	vldr	s15, [r3]
 80030aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030ae:	009a      	lsls	r2, r3, #2
 80030b0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80030b4:	4413      	add	r3, r2
 80030b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80030c0:	443b      	add	r3, r7
 80030c2:	3bf8      	subs	r3, #248	@ 0xf8
 80030c4:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80030c8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80030cc:	3301      	adds	r3, #1
 80030ce:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 80030d2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80030d6:	2b03      	cmp	r3, #3
 80030d8:	ddcf      	ble.n	800307a <MotorKalman_Update+0x426>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80030da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030de:	3301      	adds	r3, #1
 80030e0:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 80030e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030e8:	2b03      	cmp	r3, #3
 80030ea:	ddc2      	ble.n	8003072 <MotorKalman_Update+0x41e>
        }
    }

    // Store P temporarily
    float32_t P_temp[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES];
    memcpy(P_temp, filter->P, sizeof(P_temp));
 80030ec:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80030f0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f103 0110 	add.w	r1, r3, #16
 80030fa:	f107 0308 	add.w	r3, r7, #8
 80030fe:	2240      	movs	r2, #64	@ 0x40
 8003100:	4618      	mov	r0, r3
 8003102:	f010 f82f 	bl	8013164 <memcpy>

    // Compute (I - K*C)*P
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8003106:	2300      	movs	r3, #0
 8003108:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800310c:	e06e      	b.n	80031ec <MotorKalman_Update+0x598>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 800310e:	2300      	movs	r3, #0
 8003110:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003114:	e061      	b.n	80031da <MotorKalman_Update+0x586>
            filter->P[i * MOTOR_KALMAN_NUM_STATES + j] = 0;
 8003116:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800311a:	009a      	lsls	r2, r3, #2
 800311c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8003120:	4413      	add	r3, r2
 8003122:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8003126:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 800312a:	6812      	ldr	r2, [r2, #0]
 800312c:	3304      	adds	r3, #4
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	4413      	add	r3, r2
 8003132:	f04f 0200 	mov.w	r2, #0
 8003136:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 8003138:	2300      	movs	r3, #0
 800313a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800313e:	e043      	b.n	80031c8 <MotorKalman_Update+0x574>
                filter->P[i * MOTOR_KALMAN_NUM_STATES + j] +=
 8003140:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003144:	009a      	lsls	r2, r3, #2
 8003146:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800314a:	4413      	add	r3, r2
 800314c:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8003150:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8003154:	6812      	ldr	r2, [r2, #0]
 8003156:	3304      	adds	r3, #4
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	4413      	add	r3, r2
 800315c:	ed93 7a00 	vldr	s14, [r3]
                    IKC[i * MOTOR_KALMAN_NUM_STATES + k] * P_temp[k * MOTOR_KALMAN_NUM_STATES + j];
 8003160:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003164:	009a      	lsls	r2, r3, #2
 8003166:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800316a:	4413      	add	r3, r2
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8003172:	443b      	add	r3, r7
 8003174:	3bf8      	subs	r3, #248	@ 0xf8
 8003176:	edd3 6a00 	vldr	s13, [r3]
 800317a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800317e:	009a      	lsls	r2, r3, #2
 8003180:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8003184:	4413      	add	r3, r2
 8003186:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800318a:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	4413      	add	r3, r2
 8003192:	edd3 7a00 	vldr	s15, [r3]
 8003196:	ee66 7aa7 	vmul.f32	s15, s13, s15
                filter->P[i * MOTOR_KALMAN_NUM_STATES + j] +=
 800319a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800319e:	009a      	lsls	r2, r3, #2
 80031a0:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80031a4:	4413      	add	r3, r2
 80031a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031aa:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80031ae:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 80031b2:	6812      	ldr	r2, [r2, #0]
 80031b4:	3304      	adds	r3, #4
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	4413      	add	r3, r2
 80031ba:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 80031be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80031c2:	3301      	adds	r3, #1
 80031c4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80031c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80031cc:	2b03      	cmp	r3, #3
 80031ce:	ddb7      	ble.n	8003140 <MotorKalman_Update+0x4ec>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80031d0:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80031d4:	3301      	adds	r3, #1
 80031d6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80031da:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80031de:	2b03      	cmp	r3, #3
 80031e0:	dd99      	ble.n	8003116 <MotorKalman_Update+0x4c2>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80031e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80031e6:	3301      	adds	r3, #1
 80031e8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80031ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80031f0:	2b03      	cmp	r3, #3
 80031f2:	dd8c      	ble.n	800310e <MotorKalman_Update+0x4ba>
            }
        }
    }

    // Update state estimates for easy access
    filter->position = filter->X[0];
 80031f4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80031f8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003204:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f8c3 235c 	str.w	r2, [r3, #860]	@ 0x35c
    filter->velocity = filter->X[1];
 800320e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003212:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	685a      	ldr	r2, [r3, #4]
 800321a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800321e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f8c3 2360 	str.w	r2, [r3, #864]	@ 0x360
    filter->load_torque = filter->X[2];
 8003228:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800322c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	689a      	ldr	r2, [r3, #8]
 8003234:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003238:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f8c3 2364 	str.w	r2, [r3, #868]	@ 0x364
    filter->current = filter->X[3];
 8003242:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003246:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	68da      	ldr	r2, [r3, #12]
 800324e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003252:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f8c3 2368 	str.w	r2, [r3, #872]	@ 0x368

    // Update CMSIS DSP matrices for next time
    arm_mat_init_f32(&filter->X_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->X);
 800325c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003260:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f503 70d2 	add.w	r0, r3, #420	@ 0x1a4
 800326a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800326e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	2201      	movs	r2, #1
 8003276:	2104      	movs	r1, #4
 8003278:	f00f f9bf 	bl	80125fa <arm_mat_init_f32>
    arm_mat_init_f32(&filter->P_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->P);
 800327c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003280:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f503 70d6 	add.w	r0, r3, #428	@ 0x1ac
 800328a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800328e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	3310      	adds	r3, #16
 8003296:	2204      	movs	r2, #4
 8003298:	2104      	movs	r1, #4
 800329a:	f00f f9ae 	bl	80125fa <arm_mat_init_f32>
}
 800329e:	bf00      	nop
 80032a0:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	00000000 	.word	0x00000000

080032ac <MotorKalman_Estimate>:

float MotorKalman_Estimate(MotorKalman* filter, float32_t voltage_input, float32_t position) {
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	60f8      	str	r0, [r7, #12]
 80032b4:	ed87 0a02 	vstr	s0, [r7, #8]
 80032b8:	edc7 0a01 	vstr	s1, [r7, #4]
    // Execute the predict and update steps
    MotorKalman_Predict(filter, voltage_input);
 80032bc:	ed97 0a02 	vldr	s0, [r7, #8]
 80032c0:	68f8      	ldr	r0, [r7, #12]
 80032c2:	f7ff fafa 	bl	80028ba <MotorKalman_Predict>
    MotorKalman_Update(filter, position);
 80032c6:	ed97 0a01 	vldr	s0, [r7, #4]
 80032ca:	68f8      	ldr	r0, [r7, #12]
 80032cc:	f7ff fcc2 	bl	8002c54 <MotorKalman_Update>

    return filter->velocity;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f8d3 3360 	ldr.w	r3, [r3, #864]	@ 0x360
 80032d6:	ee07 3a90 	vmov	s15, r3
}
 80032da:	eeb0 0a67 	vmov.f32	s0, s15
 80032de:	3710      	adds	r7, #16
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}

080032e4 <matrix_copy>:

#include "MotorMatrixGenerator.h"
#include <math.h>
#include <string.h>

static void matrix_copy(float32_t *src, float32_t *dst, int size) {
 80032e4:	b480      	push	{r7}
 80032e6:	b087      	sub	sp, #28
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	60f8      	str	r0, [r7, #12]
 80032ec:	60b9      	str	r1, [r7, #8]
 80032ee:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < size; i++) {
 80032f0:	2300      	movs	r3, #0
 80032f2:	617b      	str	r3, [r7, #20]
 80032f4:	e00c      	b.n	8003310 <matrix_copy+0x2c>
        dst[i] = src[i];
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	68fa      	ldr	r2, [r7, #12]
 80032fc:	441a      	add	r2, r3
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	68b9      	ldr	r1, [r7, #8]
 8003304:	440b      	add	r3, r1
 8003306:	6812      	ldr	r2, [r2, #0]
 8003308:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < size; i++) {
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	3301      	adds	r3, #1
 800330e:	617b      	str	r3, [r7, #20]
 8003310:	697a      	ldr	r2, [r7, #20]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	429a      	cmp	r2, r3
 8003316:	dbee      	blt.n	80032f6 <matrix_copy+0x12>
    }
}
 8003318:	bf00      	nop
 800331a:	bf00      	nop
 800331c:	371c      	adds	r7, #28
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr
	...

08003328 <discretize_system_with_arm>:

static void discretize_system_with_arm(float32_t *A_c, float32_t *B_c, float32_t dt,
                                      float32_t *A_d, float32_t *B_d) {
 8003328:	b590      	push	{r4, r7, lr}
 800332a:	f5ad 7d2f 	sub.w	sp, sp, #700	@ 0x2bc
 800332e:	af00      	add	r7, sp, #0
 8003330:	f507 742e 	add.w	r4, r7, #696	@ 0x2b8
 8003334:	f5a4 7429 	sub.w	r4, r4, #676	@ 0x2a4
 8003338:	6020      	str	r0, [r4, #0]
 800333a:	f507 702e 	add.w	r0, r7, #696	@ 0x2b8
 800333e:	f5a0 702a 	sub.w	r0, r0, #680	@ 0x2a8
 8003342:	6001      	str	r1, [r0, #0]
 8003344:	f507 712e 	add.w	r1, r7, #696	@ 0x2b8
 8003348:	f5a1 712b 	sub.w	r1, r1, #684	@ 0x2ac
 800334c:	ed81 0a00 	vstr	s0, [r1]
 8003350:	f507 712e 	add.w	r1, r7, #696	@ 0x2b8
 8003354:	f5a1 712c 	sub.w	r1, r1, #688	@ 0x2b0
 8003358:	600a      	str	r2, [r1, #0]
 800335a:	f507 722e 	add.w	r2, r7, #696	@ 0x2b8
 800335e:	f5a2 722d 	sub.w	r2, r2, #692	@ 0x2b4
 8003362:	6013      	str	r3, [r2, #0]
    // Initialize ARM matrix instances
    arm_matrix_instance_f32 A_c_matrix, A_d_matrix, B_c_matrix, B_d_matrix;
    arm_mat_init_f32(&A_c_matrix, 4, 4, A_c);
 8003364:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003368:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 800336c:	f507 7029 	add.w	r0, r7, #676	@ 0x2a4
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	2204      	movs	r2, #4
 8003374:	2104      	movs	r1, #4
 8003376:	f00f f940 	bl	80125fa <arm_mat_init_f32>
    arm_mat_init_f32(&A_d_matrix, 4, 4, A_d);
 800337a:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800337e:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 8003382:	f507 7027 	add.w	r0, r7, #668	@ 0x29c
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	2204      	movs	r2, #4
 800338a:	2104      	movs	r1, #4
 800338c:	f00f f935 	bl	80125fa <arm_mat_init_f32>
    arm_mat_init_f32(&B_c_matrix, 4, 1, B_c);
 8003390:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003394:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8003398:	f507 7025 	add.w	r0, r7, #660	@ 0x294
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	2201      	movs	r2, #1
 80033a0:	2104      	movs	r1, #4
 80033a2:	f00f f92a 	bl	80125fa <arm_mat_init_f32>
    arm_mat_init_f32(&B_d_matrix, 4, 1, B_d);
 80033a6:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80033aa:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 80033ae:	f507 7023 	add.w	r0, r7, #652	@ 0x28c
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	2201      	movs	r2, #1
 80033b6:	2104      	movs	r1, #4
 80033b8:	f00f f91f 	bl	80125fa <arm_mat_init_f32>

    // Create identity matrix
    float32_t I_data[16] = {0};
 80033bc:	f507 7313 	add.w	r3, r7, #588	@ 0x24c
 80033c0:	2240      	movs	r2, #64	@ 0x40
 80033c2:	2100      	movs	r1, #0
 80033c4:	4618      	mov	r0, r3
 80033c6:	f00f fe89 	bl	80130dc <memset>
    arm_matrix_instance_f32 I_matrix;
    arm_mat_init_f32(&I_matrix, 4, 4, I_data);
 80033ca:	f507 7313 	add.w	r3, r7, #588	@ 0x24c
 80033ce:	f507 7011 	add.w	r0, r7, #580	@ 0x244
 80033d2:	2204      	movs	r2, #4
 80033d4:	2104      	movs	r1, #4
 80033d6:	f00f f910 	bl	80125fa <arm_mat_init_f32>
    for (int i = 0; i < 4; i++) {
 80033da:	2300      	movs	r3, #0
 80033dc:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
 80033e0:	e011      	b.n	8003406 <discretize_system_with_arm+0xde>
        I_data[i*4 + i] = 1.0f;
 80033e2:	f8d7 22b4 	ldr.w	r2, [r7, #692]	@ 0x2b4
 80033e6:	4613      	mov	r3, r2
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	4413      	add	r3, r2
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	f503 732e 	add.w	r3, r3, #696	@ 0x2b8
 80033f2:	443b      	add	r3, r7
 80033f4:	3b6c      	subs	r3, #108	@ 0x6c
 80033f6:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80033fa:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 4; i++) {
 80033fc:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 8003400:	3301      	adds	r3, #1
 8003402:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
 8003406:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 800340a:	2b03      	cmp	r3, #3
 800340c:	dde9      	ble.n	80033e2 <discretize_system_with_arm+0xba>
    }

    // Create scaled A matrix (A*dt)
    float32_t A_dt_data[16];
    arm_matrix_instance_f32 A_dt_matrix;
    arm_mat_init_f32(&A_dt_matrix, 4, 4, A_dt_data);
 800340e:	f507 7301 	add.w	r3, r7, #516	@ 0x204
 8003412:	f507 70fe 	add.w	r0, r7, #508	@ 0x1fc
 8003416:	2204      	movs	r2, #4
 8003418:	2104      	movs	r1, #4
 800341a:	f00f f8ee 	bl	80125fa <arm_mat_init_f32>
    arm_mat_scale_f32(&A_c_matrix, dt, &A_dt_matrix);
 800341e:	f507 71fe 	add.w	r1, r7, #508	@ 0x1fc
 8003422:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003426:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800342a:	f507 7229 	add.w	r2, r7, #676	@ 0x2a4
 800342e:	ed93 0a00 	vldr	s0, [r3]
 8003432:	4610      	mov	r0, r2
 8003434:	f00f fcea 	bl	8012e0c <arm_mat_scale_f32>

    // Calculate A_d = exp(A*dt) using Taylor series approximation
    // Initialize A_d to identity matrix
    matrix_copy(I_data, A_d, 16);
 8003438:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800343c:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 8003440:	f507 7013 	add.w	r0, r7, #588	@ 0x24c
 8003444:	2210      	movs	r2, #16
 8003446:	6819      	ldr	r1, [r3, #0]
 8003448:	f7ff ff4c 	bl	80032e4 <matrix_copy>

    // Calculate powers of A*dt and add them to A_d
    float32_t A_power_data[16];
    float32_t temp_data[16];
    arm_matrix_instance_f32 A_power_matrix, temp_matrix;
    arm_mat_init_f32(&A_power_matrix, 4, 4, A_power_data);
 800344c:	f507 73de 	add.w	r3, r7, #444	@ 0x1bc
 8003450:	f507 70ba 	add.w	r0, r7, #372	@ 0x174
 8003454:	2204      	movs	r2, #4
 8003456:	2104      	movs	r1, #4
 8003458:	f00f f8cf 	bl	80125fa <arm_mat_init_f32>
    arm_mat_init_f32(&temp_matrix, 4, 4, temp_data);
 800345c:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 8003460:	f507 70b6 	add.w	r0, r7, #364	@ 0x16c
 8003464:	2204      	movs	r2, #4
 8003466:	2104      	movs	r1, #4
 8003468:	f00f f8c7 	bl	80125fa <arm_mat_init_f32>

    // First term: I + A*dt
    arm_mat_add_f32(&I_matrix, &A_dt_matrix, &A_d_matrix);
 800346c:	f507 7227 	add.w	r2, r7, #668	@ 0x29c
 8003470:	f507 71fe 	add.w	r1, r7, #508	@ 0x1fc
 8003474:	f507 7311 	add.w	r3, r7, #580	@ 0x244
 8003478:	4618      	mov	r0, r3
 800347a:	f00f f883 	bl	8012584 <arm_mat_add_f32>

    // Copy A*dt to A_power for computing higher powers
    matrix_copy(A_dt_data, A_power_data, 16);
 800347e:	f507 71de 	add.w	r1, r7, #444	@ 0x1bc
 8003482:	f507 7301 	add.w	r3, r7, #516	@ 0x204
 8003486:	2210      	movs	r2, #16
 8003488:	4618      	mov	r0, r3
 800348a:	f7ff ff2b 	bl	80032e4 <matrix_copy>

    // Compute higher order terms using Taylor series
    // A_d = I + A*dt + (A*dt)^2/2 + (A*dt)^3/6 + ...
    float32_t factorial = 1.0f;
 800348e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8003492:	f8c7 32b0 	str.w	r3, [r7, #688]	@ 0x2b0
    for (int term = 2; term <= 10; term++) {  // Using more terms for better accuracy
 8003496:	2302      	movs	r3, #2
 8003498:	f8c7 32ac 	str.w	r3, [r7, #684]	@ 0x2ac
 800349c:	e03a      	b.n	8003514 <discretize_system_with_arm+0x1ec>
        factorial *= term;
 800349e:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 80034a2:	ee07 3a90 	vmov	s15, r3
 80034a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80034aa:	ed97 7aac 	vldr	s14, [r7, #688]	@ 0x2b0
 80034ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034b2:	edc7 7aac 	vstr	s15, [r7, #688]	@ 0x2b0

        // Compute next power: A_power = A_power * A_dt
        arm_mat_mult_f32(&A_power_matrix, &A_dt_matrix, &temp_matrix);
 80034b6:	f507 72b6 	add.w	r2, r7, #364	@ 0x16c
 80034ba:	f507 71fe 	add.w	r1, r7, #508	@ 0x1fc
 80034be:	f507 73ba 	add.w	r3, r7, #372	@ 0x174
 80034c2:	4618      	mov	r0, r3
 80034c4:	f00f fc28 	bl	8012d18 <arm_mat_mult_f32>
        matrix_copy(temp_data, A_power_data, 16);
 80034c8:	f507 71de 	add.w	r1, r7, #444	@ 0x1bc
 80034cc:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 80034d0:	2210      	movs	r2, #16
 80034d2:	4618      	mov	r0, r3
 80034d4:	f7ff ff06 	bl	80032e4 <matrix_copy>

        // Scale by 1/factorial
        arm_mat_scale_f32(&A_power_matrix, 1.0f/factorial, &temp_matrix);
 80034d8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80034dc:	edd7 7aac 	vldr	s15, [r7, #688]	@ 0x2b0
 80034e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034e4:	f507 72b6 	add.w	r2, r7, #364	@ 0x16c
 80034e8:	f507 73ba 	add.w	r3, r7, #372	@ 0x174
 80034ec:	4611      	mov	r1, r2
 80034ee:	eeb0 0a47 	vmov.f32	s0, s14
 80034f2:	4618      	mov	r0, r3
 80034f4:	f00f fc8a 	bl	8012e0c <arm_mat_scale_f32>

        // Add to A_d
        arm_mat_add_f32(&A_d_matrix, &temp_matrix, &A_d_matrix);
 80034f8:	f507 7227 	add.w	r2, r7, #668	@ 0x29c
 80034fc:	f507 71b6 	add.w	r1, r7, #364	@ 0x16c
 8003500:	f507 7327 	add.w	r3, r7, #668	@ 0x29c
 8003504:	4618      	mov	r0, r3
 8003506:	f00f f83d 	bl	8012584 <arm_mat_add_f32>
    for (int term = 2; term <= 10; term++) {  // Using more terms for better accuracy
 800350a:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 800350e:	3301      	adds	r3, #1
 8003510:	f8c7 32ac 	str.w	r3, [r7, #684]	@ 0x2ac
 8003514:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 8003518:	2b0a      	cmp	r3, #10
 800351a:	ddc0      	ble.n	800349e <discretize_system_with_arm+0x176>

    // We can approximate this integral using the Taylor series for e^(A*s):
    // B_d = [dt*I + (A*dt^2)/2 + (A^2*dt^3)/6 + (A^3*dt^4)/24 + ...] * B_c

    // First term: dt*I * B_c = dt * B_c
    arm_mat_scale_f32(&B_c_matrix, dt, &B_d_matrix);
 800351c:	f507 7123 	add.w	r1, r7, #652	@ 0x28c
 8003520:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003524:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003528:	f507 7225 	add.w	r2, r7, #660	@ 0x294
 800352c:	ed93 0a00 	vldr	s0, [r3]
 8003530:	4610      	mov	r0, r2
 8003532:	f00f fc6b 	bl	8012e0c <arm_mat_scale_f32>

    // Second term: (A*dt^2)/2 * B_c
    float32_t AB_c[4] = {0};
 8003536:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800353a:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800353e:	461a      	mov	r2, r3
 8003540:	2300      	movs	r3, #0
 8003542:	6013      	str	r3, [r2, #0]
 8003544:	6053      	str	r3, [r2, #4]
 8003546:	6093      	str	r3, [r2, #8]
 8003548:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 AB_c_matrix;
    arm_mat_init_f32(&AB_c_matrix, 4, 1, AB_c);
 800354a:	f507 73ae 	add.w	r3, r7, #348	@ 0x15c
 800354e:	f507 70aa 	add.w	r0, r7, #340	@ 0x154
 8003552:	2201      	movs	r2, #1
 8003554:	2104      	movs	r1, #4
 8003556:	f00f f850 	bl	80125fa <arm_mat_init_f32>
    arm_mat_mult_f32(&A_c_matrix, &B_c_matrix, &AB_c_matrix);
 800355a:	f507 72aa 	add.w	r2, r7, #340	@ 0x154
 800355e:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 8003562:	f507 7329 	add.w	r3, r7, #676	@ 0x2a4
 8003566:	4618      	mov	r0, r3
 8003568:	f00f fbd6 	bl	8012d18 <arm_mat_mult_f32>

    float32_t temp_B[4];
    arm_matrix_instance_f32 temp_B_matrix;
    arm_mat_init_f32(&temp_B_matrix, 4, 1, temp_B);
 800356c:	f507 73a2 	add.w	r3, r7, #324	@ 0x144
 8003570:	f507 709e 	add.w	r0, r7, #316	@ 0x13c
 8003574:	2201      	movs	r2, #1
 8003576:	2104      	movs	r1, #4
 8003578:	f00f f83f 	bl	80125fa <arm_mat_init_f32>
    arm_mat_scale_f32(&AB_c_matrix, dt*dt/2.0f, &temp_B_matrix);
 800357c:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003580:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003584:	edd3 7a00 	vldr	s15, [r3]
 8003588:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800358c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8003590:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003594:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 8003598:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 800359c:	4611      	mov	r1, r2
 800359e:	eeb0 0a47 	vmov.f32	s0, s14
 80035a2:	4618      	mov	r0, r3
 80035a4:	f00f fc32 	bl	8012e0c <arm_mat_scale_f32>

    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 80035a8:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 80035ac:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 80035b0:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 80035b4:	4618      	mov	r0, r3
 80035b6:	f00e ffe5 	bl	8012584 <arm_mat_add_f32>

    // Third term: (A^2*dt^3)/6 * B_c
    float32_t A2_data[16] = {0};
 80035ba:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80035be:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80035c2:	4618      	mov	r0, r3
 80035c4:	2340      	movs	r3, #64	@ 0x40
 80035c6:	461a      	mov	r2, r3
 80035c8:	2100      	movs	r1, #0
 80035ca:	f00f fd87 	bl	80130dc <memset>
    arm_matrix_instance_f32 A2_matrix;
    arm_mat_init_f32(&A2_matrix, 4, 4, A2_data);
 80035ce:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 80035d2:	f107 00f4 	add.w	r0, r7, #244	@ 0xf4
 80035d6:	2204      	movs	r2, #4
 80035d8:	2104      	movs	r1, #4
 80035da:	f00f f80e 	bl	80125fa <arm_mat_init_f32>
    arm_mat_mult_f32(&A_c_matrix, &A_c_matrix, &A2_matrix);
 80035de:	f107 02f4 	add.w	r2, r7, #244	@ 0xf4
 80035e2:	f507 7129 	add.w	r1, r7, #676	@ 0x2a4
 80035e6:	f507 7329 	add.w	r3, r7, #676	@ 0x2a4
 80035ea:	4618      	mov	r0, r3
 80035ec:	f00f fb94 	bl	8012d18 <arm_mat_mult_f32>

    float32_t A2B_c[4] = {0};
 80035f0:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80035f4:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80035f8:	461a      	mov	r2, r3
 80035fa:	2300      	movs	r3, #0
 80035fc:	6013      	str	r3, [r2, #0]
 80035fe:	6053      	str	r3, [r2, #4]
 8003600:	6093      	str	r3, [r2, #8]
 8003602:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 A2B_c_matrix;
    arm_mat_init_f32(&A2B_c_matrix, 4, 1, A2B_c);
 8003604:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8003608:	f107 00dc 	add.w	r0, r7, #220	@ 0xdc
 800360c:	2201      	movs	r2, #1
 800360e:	2104      	movs	r1, #4
 8003610:	f00e fff3 	bl	80125fa <arm_mat_init_f32>
    arm_mat_mult_f32(&A2_matrix, &B_c_matrix, &A2B_c_matrix);
 8003614:	f107 02dc 	add.w	r2, r7, #220	@ 0xdc
 8003618:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 800361c:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8003620:	4618      	mov	r0, r3
 8003622:	f00f fb79 	bl	8012d18 <arm_mat_mult_f32>

    arm_mat_scale_f32(&A2B_c_matrix, dt*dt*dt/6.0f, &temp_B_matrix);
 8003626:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800362a:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800362e:	edd3 7a00 	vldr	s15, [r3]
 8003632:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8003636:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800363a:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800363e:	edd3 7a00 	vldr	s15, [r3]
 8003642:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003646:	eef1 6a08 	vmov.f32	s13, #24	@ 0x40c00000  6.0
 800364a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800364e:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 8003652:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8003656:	4611      	mov	r1, r2
 8003658:	eeb0 0a47 	vmov.f32	s0, s14
 800365c:	4618      	mov	r0, r3
 800365e:	f00f fbd5 	bl	8012e0c <arm_mat_scale_f32>
    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 8003662:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 8003666:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 800366a:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 800366e:	4618      	mov	r0, r3
 8003670:	f00e ff88 	bl	8012584 <arm_mat_add_f32>

    // Fourth term: (A^3*dt^4)/24 * B_c
    float32_t A3_data[16] = {0};
 8003674:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003678:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 800367c:	4618      	mov	r0, r3
 800367e:	2340      	movs	r3, #64	@ 0x40
 8003680:	461a      	mov	r2, r3
 8003682:	2100      	movs	r1, #0
 8003684:	f00f fd2a 	bl	80130dc <memset>
    arm_matrix_instance_f32 A3_matrix;
    arm_mat_init_f32(&A3_matrix, 4, 4, A3_data);
 8003688:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800368c:	f107 0094 	add.w	r0, r7, #148	@ 0x94
 8003690:	2204      	movs	r2, #4
 8003692:	2104      	movs	r1, #4
 8003694:	f00e ffb1 	bl	80125fa <arm_mat_init_f32>
    arm_mat_mult_f32(&A2_matrix, &A_c_matrix, &A3_matrix);
 8003698:	f107 0294 	add.w	r2, r7, #148	@ 0x94
 800369c:	f507 7129 	add.w	r1, r7, #676	@ 0x2a4
 80036a0:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80036a4:	4618      	mov	r0, r3
 80036a6:	f00f fb37 	bl	8012d18 <arm_mat_mult_f32>

    float32_t A3B_c[4] = {0};
 80036aa:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80036ae:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 80036b2:	461a      	mov	r2, r3
 80036b4:	2300      	movs	r3, #0
 80036b6:	6013      	str	r3, [r2, #0]
 80036b8:	6053      	str	r3, [r2, #4]
 80036ba:	6093      	str	r3, [r2, #8]
 80036bc:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 A3B_c_matrix;
    arm_mat_init_f32(&A3B_c_matrix, 4, 1, A3B_c);
 80036be:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80036c2:	f107 007c 	add.w	r0, r7, #124	@ 0x7c
 80036c6:	2201      	movs	r2, #1
 80036c8:	2104      	movs	r1, #4
 80036ca:	f00e ff96 	bl	80125fa <arm_mat_init_f32>
    arm_mat_mult_f32(&A3_matrix, &B_c_matrix, &A3B_c_matrix);
 80036ce:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 80036d2:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 80036d6:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80036da:	4618      	mov	r0, r3
 80036dc:	f00f fb1c 	bl	8012d18 <arm_mat_mult_f32>

    arm_mat_scale_f32(&A3B_c_matrix, dt*dt*dt*dt/24.0f, &temp_B_matrix);
 80036e0:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80036e4:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80036e8:	edd3 7a00 	vldr	s15, [r3]
 80036ec:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80036f0:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80036f4:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80036f8:	edd3 7a00 	vldr	s15, [r3]
 80036fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003700:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003704:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003708:	edd3 7a00 	vldr	s15, [r3]
 800370c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003710:	eef3 6a08 	vmov.f32	s13, #56	@ 0x41c00000  24.0
 8003714:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003718:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 800371c:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8003720:	4611      	mov	r1, r2
 8003722:	eeb0 0a47 	vmov.f32	s0, s14
 8003726:	4618      	mov	r0, r3
 8003728:	f00f fb70 	bl	8012e0c <arm_mat_scale_f32>
    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 800372c:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 8003730:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 8003734:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 8003738:	4618      	mov	r0, r3
 800373a:	f00e ff23 	bl	8012584 <arm_mat_add_f32>

    // Fifth term: (A^4*dt^5)/120 * B_c
    float32_t A4_data[16] = {0};
 800373e:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003742:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8003746:	4618      	mov	r0, r3
 8003748:	2340      	movs	r3, #64	@ 0x40
 800374a:	461a      	mov	r2, r3
 800374c:	2100      	movs	r1, #0
 800374e:	f00f fcc5 	bl	80130dc <memset>
    arm_matrix_instance_f32 A4_matrix;
    arm_mat_init_f32(&A4_matrix, 4, 4, A4_data);
 8003752:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003756:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 800375a:	2204      	movs	r2, #4
 800375c:	2104      	movs	r1, #4
 800375e:	f00e ff4c 	bl	80125fa <arm_mat_init_f32>
    arm_mat_mult_f32(&A3_matrix, &A_c_matrix, &A4_matrix);
 8003762:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8003766:	f507 7129 	add.w	r1, r7, #676	@ 0x2a4
 800376a:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800376e:	4618      	mov	r0, r3
 8003770:	f00f fad2 	bl	8012d18 <arm_mat_mult_f32>

    float32_t A4B_c[4] = {0};
 8003774:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003778:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 800377c:	461a      	mov	r2, r3
 800377e:	2300      	movs	r3, #0
 8003780:	6013      	str	r3, [r2, #0]
 8003782:	6053      	str	r3, [r2, #4]
 8003784:	6093      	str	r3, [r2, #8]
 8003786:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 A4B_c_matrix;
    arm_mat_init_f32(&A4B_c_matrix, 4, 1, A4B_c);
 8003788:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800378c:	f107 001c 	add.w	r0, r7, #28
 8003790:	2201      	movs	r2, #1
 8003792:	2104      	movs	r1, #4
 8003794:	f00e ff31 	bl	80125fa <arm_mat_init_f32>
    arm_mat_mult_f32(&A4_matrix, &B_c_matrix, &A4B_c_matrix);
 8003798:	f107 021c 	add.w	r2, r7, #28
 800379c:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 80037a0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80037a4:	4618      	mov	r0, r3
 80037a6:	f00f fab7 	bl	8012d18 <arm_mat_mult_f32>

    arm_mat_scale_f32(&A4B_c_matrix, dt*dt*dt*dt*dt/120.0f, &temp_B_matrix);
 80037aa:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80037ae:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80037b2:	edd3 7a00 	vldr	s15, [r3]
 80037b6:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80037ba:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80037be:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80037c2:	edd3 7a00 	vldr	s15, [r3]
 80037c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80037ca:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80037ce:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80037d2:	edd3 7a00 	vldr	s15, [r3]
 80037d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80037da:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80037de:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80037e2:	edd3 7a00 	vldr	s15, [r3]
 80037e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037ea:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8003824 <discretize_system_with_arm+0x4fc>
 80037ee:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80037f2:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 80037f6:	f107 031c 	add.w	r3, r7, #28
 80037fa:	4611      	mov	r1, r2
 80037fc:	eeb0 0a47 	vmov.f32	s0, s14
 8003800:	4618      	mov	r0, r3
 8003802:	f00f fb03 	bl	8012e0c <arm_mat_scale_f32>
    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 8003806:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 800380a:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 800380e:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 8003812:	4618      	mov	r0, r3
 8003814:	f00e feb6 	bl	8012584 <arm_mat_add_f32>
}
 8003818:	bf00      	nop
 800381a:	f507 772f 	add.w	r7, r7, #700	@ 0x2bc
 800381e:	46bd      	mov	sp, r7
 8003820:	bd90      	pop	{r4, r7, pc}
 8003822:	bf00      	nop
 8003824:	42f00000 	.word	0x42f00000

08003828 <GenerateMotorMatrices>:

void GenerateMotorMatrices(float32_t R_a, float32_t L_a, float32_t J, float32_t b,
                          float32_t ke, float32_t kt, float32_t dt,
                          float32_t *A, float32_t *B) {
 8003828:	b580      	push	{r7, lr}
 800382a:	b09e      	sub	sp, #120	@ 0x78
 800382c:	af00      	add	r7, sp, #0
 800382e:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
 8003832:	edc7 0a08 	vstr	s1, [r7, #32]
 8003836:	ed87 1a07 	vstr	s2, [r7, #28]
 800383a:	edc7 1a06 	vstr	s3, [r7, #24]
 800383e:	ed87 2a05 	vstr	s4, [r7, #20]
 8003842:	edc7 2a04 	vstr	s5, [r7, #16]
 8003846:	ed87 3a03 	vstr	s6, [r7, #12]
 800384a:	60b8      	str	r0, [r7, #8]
 800384c:	6079      	str	r1, [r7, #4]
    // Generate continuous time matrices
    float32_t A_c[16] = {0}; // 4x4 matrix
 800384e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003852:	2240      	movs	r2, #64	@ 0x40
 8003854:	2100      	movs	r1, #0
 8003856:	4618      	mov	r0, r3
 8003858:	f00f fc40 	bl	80130dc <memset>
    float32_t B_c[4] = {0};  // 4x1 matrix
 800385c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003860:	2200      	movs	r2, #0
 8003862:	601a      	str	r2, [r3, #0]
 8003864:	605a      	str	r2, [r3, #4]
 8003866:	609a      	str	r2, [r3, #8]
 8003868:	60da      	str	r2, [r3, #12]
    // State Transition Matrix
    // Ac = [0 1 0 0;
    //       0 -b/J -1/J kt/J;
    //       0 0 0 0;
    //       0 -ke/L 0 -R/L];
    A_c[0*4 + 1] = 1.0f;
 800386a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800386e:	63fb      	str	r3, [r7, #60]	@ 0x3c

    A_c[1*4 + 1] = -b/J;
 8003870:	edd7 7a06 	vldr	s15, [r7, #24]
 8003874:	eef1 6a67 	vneg.f32	s13, s15
 8003878:	ed97 7a07 	vldr	s14, [r7, #28]
 800387c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003880:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    A_c[1*4 + 2] = -1.0f/J;
 8003884:	eeff 6a00 	vmov.f32	s13, #240	@ 0xbf800000 -1.0
 8003888:	ed97 7a07 	vldr	s14, [r7, #28]
 800388c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003890:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    A_c[1*4 + 3] = kt/J;
 8003894:	edd7 6a04 	vldr	s13, [r7, #16]
 8003898:	ed97 7a07 	vldr	s14, [r7, #28]
 800389c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038a0:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54

    // Third row all zeros (for load torque state)

    A_c[3*4 + 1] = -ke/L_a;
 80038a4:	edd7 7a05 	vldr	s15, [r7, #20]
 80038a8:	eef1 6a67 	vneg.f32	s13, s15
 80038ac:	ed97 7a08 	vldr	s14, [r7, #32]
 80038b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038b4:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
    A_c[3*4 + 3] = -R_a/L_a;
 80038b8:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80038bc:	eef1 6a67 	vneg.f32	s13, s15
 80038c0:	ed97 7a08 	vldr	s14, [r7, #32]
 80038c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038c8:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74

    // Input Matrix
    // Bc = [0; 0; 0; 1/L];
    B_c[3] = 1.0f/L_a;
 80038cc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80038d0:	ed97 7a08 	vldr	s14, [r7, #32]
 80038d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038d8:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

    discretize_system_with_arm(A_c, B_c, dt, A, B);
 80038dc:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80038e0:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	68ba      	ldr	r2, [r7, #8]
 80038e8:	ed97 0a03 	vldr	s0, [r7, #12]
 80038ec:	f7ff fd1c 	bl	8003328 <discretize_system_with_arm>
}
 80038f0:	bf00      	nop
 80038f2:	3778      	adds	r7, #120	@ 0x78
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}

080038f8 <PWM_init>:
 *      Author: beamk
 */

#include "PWM.h"

void PWM_init(PWM* pwm, TIM_HandleTypeDef* htimx, uint16_t tim_chx){
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b084      	sub	sp, #16
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	60f8      	str	r0, [r7, #12]
 8003900:	60b9      	str	r1, [r7, #8]
 8003902:	4613      	mov	r3, r2
 8003904:	80fb      	strh	r3, [r7, #6]
	pwm->CPU_FREQ = 170e6;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	4a0b      	ldr	r2, [pc, #44]	@ (8003938 <PWM_init+0x40>)
 800390a:	611a      	str	r2, [r3, #16]
	pwm->htimx = htimx;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	68ba      	ldr	r2, [r7, #8]
 8003910:	601a      	str	r2, [r3, #0]
	pwm->tim_chx = tim_chx;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	88fa      	ldrh	r2, [r7, #6]
 8003916:	809a      	strh	r2, [r3, #4]
	pwm->OC = 0;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2200      	movs	r2, #0
 800391c:	615a      	str	r2, [r3, #20]
	HAL_TIM_Base_Start(htimx);
 800391e:	68b8      	ldr	r0, [r7, #8]
 8003920:	f00a fe9c 	bl	800e65c <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(htimx, tim_chx);
 8003924:	88fb      	ldrh	r3, [r7, #6]
 8003926:	4619      	mov	r1, r3
 8003928:	68b8      	ldr	r0, [r7, #8]
 800392a:	f00a ffe3 	bl	800e8f4 <HAL_TIM_PWM_Start>
}
 800392e:	bf00      	nop
 8003930:	3710      	adds	r7, #16
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	0a21fe80 	.word	0x0a21fe80

0800393c <PWM_write_duty>:

void PWM_write_duty(PWM* pwm, float freq, float percent_duty){
 800393c:	b5b0      	push	{r4, r5, r7, lr}
 800393e:	b084      	sub	sp, #16
 8003940:	af00      	add	r7, sp, #0
 8003942:	60f8      	str	r0, [r7, #12]
 8003944:	ed87 0a02 	vstr	s0, [r7, #8]
 8003948:	edc7 0a01 	vstr	s1, [r7, #4]
    if (freq == 0) {
 800394c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003950:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003954:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003958:	d137      	bne.n	80039ca <PWM_write_duty+0x8e>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	889b      	ldrh	r3, [r3, #4]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d105      	bne.n	800396e <PWM_write_duty+0x32>
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	2200      	movs	r2, #0
 800396a:	635a      	str	r2, [r3, #52]	@ 0x34
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(percent_duty) / 100.0);
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}
 800396c:	e0e1      	b.n	8003b32 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	889b      	ldrh	r3, [r3, #4]
 8003972:	2b04      	cmp	r3, #4
 8003974:	d105      	bne.n	8003982 <PWM_write_duty+0x46>
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	2300      	movs	r3, #0
 800397e:	6393      	str	r3, [r2, #56]	@ 0x38
 8003980:	e0d7      	b.n	8003b32 <PWM_write_duty+0x1f6>
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	889b      	ldrh	r3, [r3, #4]
 8003986:	2b08      	cmp	r3, #8
 8003988:	d105      	bne.n	8003996 <PWM_write_duty+0x5a>
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	2300      	movs	r3, #0
 8003992:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8003994:	e0cd      	b.n	8003b32 <PWM_write_duty+0x1f6>
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	889b      	ldrh	r3, [r3, #4]
 800399a:	2b0c      	cmp	r3, #12
 800399c:	d105      	bne.n	80039aa <PWM_write_duty+0x6e>
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	2300      	movs	r3, #0
 80039a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80039a8:	e0c3      	b.n	8003b32 <PWM_write_duty+0x1f6>
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	889b      	ldrh	r3, [r3, #4]
 80039ae:	2b10      	cmp	r3, #16
 80039b0:	d105      	bne.n	80039be <PWM_write_duty+0x82>
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	2300      	movs	r3, #0
 80039ba:	6493      	str	r3, [r2, #72]	@ 0x48
 80039bc:	e0b9      	b.n	8003b32 <PWM_write_duty+0x1f6>
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	2300      	movs	r3, #0
 80039c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80039c8:	e0b3      	b.n	8003b32 <PWM_write_duty+0x1f6>
    	pwm->period_cyc = (uint32_t) (pwm->CPU_FREQ / freq);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	691b      	ldr	r3, [r3, #16]
 80039ce:	ee07 3a90 	vmov	s15, r3
 80039d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039d6:	ed97 7a02 	vldr	s14, [r7, #8]
 80039da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039e2:	ee17 2a90 	vmov	r2, s15
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	609a      	str	r2, [r3, #8]
    	pwm->prescaler = (uint16_t) ((pwm->period_cyc + 65535 - 1) / 65535) - 1; // Subtracting 1 since prescaler is zero-based
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 80039f2:	33fe      	adds	r3, #254	@ 0xfe
 80039f4:	4a51      	ldr	r2, [pc, #324]	@ (8003b3c <PWM_write_duty+0x200>)
 80039f6:	fba2 2303 	umull	r2, r3, r2, r3
 80039fa:	0bdb      	lsrs	r3, r3, #15
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	3b01      	subs	r3, #1
 8003a00:	b29a      	uxth	r2, r3
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	819a      	strh	r2, [r3, #12]
    	pwm->overflow = (uint16_t) ((pwm->CPU_FREQ / (float)(pwm->prescaler + 1) / freq) - 1);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	691b      	ldr	r3, [r3, #16]
 8003a0a:	ee07 3a90 	vmov	s15, r3
 8003a0e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	899b      	ldrh	r3, [r3, #12]
 8003a16:	3301      	adds	r3, #1
 8003a18:	ee07 3a90 	vmov	s15, r3
 8003a1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a20:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003a24:	ed97 7a02 	vldr	s14, [r7, #8]
 8003a28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a2c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003a30:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003a34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a38:	ee17 3a90 	vmov	r3, s15
 8003a3c:	b29a      	uxth	r2, r3
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	81da      	strh	r2, [r3, #14]
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(percent_duty) / 100.0);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	89db      	ldrh	r3, [r3, #14]
 8003a46:	4618      	mov	r0, r3
 8003a48:	f7fc fd38 	bl	80004bc <__aeabi_i2d>
 8003a4c:	4604      	mov	r4, r0
 8003a4e:	460d      	mov	r5, r1
 8003a50:	edd7 7a01 	vldr	s15, [r7, #4]
 8003a54:	eef0 7ae7 	vabs.f32	s15, s15
 8003a58:	ee17 0a90 	vmov	r0, s15
 8003a5c:	f7fc fd40 	bl	80004e0 <__aeabi_f2d>
 8003a60:	4602      	mov	r2, r0
 8003a62:	460b      	mov	r3, r1
 8003a64:	4620      	mov	r0, r4
 8003a66:	4629      	mov	r1, r5
 8003a68:	f7fc fd92 	bl	8000590 <__aeabi_dmul>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	460b      	mov	r3, r1
 8003a70:	4610      	mov	r0, r2
 8003a72:	4619      	mov	r1, r3
 8003a74:	f04f 0200 	mov.w	r2, #0
 8003a78:	4b31      	ldr	r3, [pc, #196]	@ (8003b40 <PWM_write_duty+0x204>)
 8003a7a:	f7fc feb3 	bl	80007e4 <__aeabi_ddiv>
 8003a7e:	4602      	mov	r2, r0
 8003a80:	460b      	mov	r3, r1
 8003a82:	4610      	mov	r0, r2
 8003a84:	4619      	mov	r1, r3
 8003a86:	f7fd f845 	bl	8000b14 <__aeabi_d2uiz>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	461a      	mov	r2, r3
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	615a      	str	r2, [r3, #20]
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	899a      	ldrh	r2, [r3, #12]
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	629a      	str	r2, [r3, #40]	@ 0x28
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	89da      	ldrh	r2, [r3, #14]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	89da      	ldrh	r2, [r3, #14]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	60da      	str	r2, [r3, #12]
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	889b      	ldrh	r3, [r3, #4]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d106      	bne.n	8003acc <PWM_write_duty+0x190>
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	68fa      	ldr	r2, [r7, #12]
 8003ac6:	6952      	ldr	r2, [r2, #20]
 8003ac8:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8003aca:	e032      	b.n	8003b32 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	889b      	ldrh	r3, [r3, #4]
 8003ad0:	2b04      	cmp	r3, #4
 8003ad2:	d106      	bne.n	8003ae2 <PWM_write_duty+0x1a6>
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	695b      	ldr	r3, [r3, #20]
 8003ade:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8003ae0:	e027      	b.n	8003b32 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	889b      	ldrh	r3, [r3, #4]
 8003ae6:	2b08      	cmp	r3, #8
 8003ae8:	d106      	bne.n	8003af8 <PWM_write_duty+0x1bc>
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	695b      	ldr	r3, [r3, #20]
 8003af4:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8003af6:	e01c      	b.n	8003b32 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	889b      	ldrh	r3, [r3, #4]
 8003afc:	2b0c      	cmp	r3, #12
 8003afe:	d106      	bne.n	8003b0e <PWM_write_duty+0x1d2>
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	695b      	ldr	r3, [r3, #20]
 8003b0a:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8003b0c:	e011      	b.n	8003b32 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	889b      	ldrh	r3, [r3, #4]
 8003b12:	2b10      	cmp	r3, #16
 8003b14:	d106      	bne.n	8003b24 <PWM_write_duty+0x1e8>
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	695b      	ldr	r3, [r3, #20]
 8003b20:	6493      	str	r3, [r2, #72]	@ 0x48
}
 8003b22:	e006      	b.n	8003b32 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	695b      	ldr	r3, [r3, #20]
 8003b2e:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8003b30:	e7ff      	b.n	8003b32 <PWM_write_duty+0x1f6>
 8003b32:	bf00      	nop
 8003b34:	3710      	adds	r7, #16
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bdb0      	pop	{r4, r5, r7, pc}
 8003b3a:	bf00      	nop
 8003b3c:	80008001 	.word	0x80008001
 8003b40:	40590000 	.word	0x40590000
 8003b44:	00000000 	.word	0x00000000

08003b48 <PWM_write_range>:

void PWM_write_range(PWM* pwm, float freq, float duty){
 8003b48:	b5b0      	push	{r4, r5, r7, lr}
 8003b4a:	b084      	sub	sp, #16
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	60f8      	str	r0, [r7, #12]
 8003b50:	ed87 0a02 	vstr	s0, [r7, #8]
 8003b54:	edc7 0a01 	vstr	s1, [r7, #4]
    if (freq == 0) {
 8003b58:	edd7 7a02 	vldr	s15, [r7, #8]
 8003b5c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003b60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b64:	d137      	bne.n	8003bd6 <PWM_write_range+0x8e>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	889b      	ldrh	r3, [r3, #4]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d105      	bne.n	8003b7a <PWM_write_range+0x32>
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	2200      	movs	r2, #0
 8003b76:	635a      	str	r2, [r3, #52]	@ 0x34
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(duty) / 65535.0);
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}
 8003b78:	e0e1      	b.n	8003d3e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	889b      	ldrh	r3, [r3, #4]
 8003b7e:	2b04      	cmp	r3, #4
 8003b80:	d105      	bne.n	8003b8e <PWM_write_range+0x46>
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	2300      	movs	r3, #0
 8003b8a:	6393      	str	r3, [r2, #56]	@ 0x38
 8003b8c:	e0d7      	b.n	8003d3e <PWM_write_range+0x1f6>
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	889b      	ldrh	r3, [r3, #4]
 8003b92:	2b08      	cmp	r3, #8
 8003b94:	d105      	bne.n	8003ba2 <PWM_write_range+0x5a>
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8003ba0:	e0cd      	b.n	8003d3e <PWM_write_range+0x1f6>
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	889b      	ldrh	r3, [r3, #4]
 8003ba6:	2b0c      	cmp	r3, #12
 8003ba8:	d105      	bne.n	8003bb6 <PWM_write_range+0x6e>
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	6413      	str	r3, [r2, #64]	@ 0x40
 8003bb4:	e0c3      	b.n	8003d3e <PWM_write_range+0x1f6>
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	889b      	ldrh	r3, [r3, #4]
 8003bba:	2b10      	cmp	r3, #16
 8003bbc:	d105      	bne.n	8003bca <PWM_write_range+0x82>
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	6493      	str	r3, [r2, #72]	@ 0x48
 8003bc8:	e0b9      	b.n	8003d3e <PWM_write_range+0x1f6>
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8003bd4:	e0b3      	b.n	8003d3e <PWM_write_range+0x1f6>
    	pwm->period_cyc = (uint32_t) (pwm->CPU_FREQ / freq);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	691b      	ldr	r3, [r3, #16]
 8003bda:	ee07 3a90 	vmov	s15, r3
 8003bde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003be2:	ed97 7a02 	vldr	s14, [r7, #8]
 8003be6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003bea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bee:	ee17 2a90 	vmov	r2, s15
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	609a      	str	r2, [r3, #8]
    	pwm->prescaler = (uint16_t) ((pwm->period_cyc + 65535 - 1) / 65535) - 1; // Subtracting 1 since prescaler is zero-based
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8003bfe:	33fe      	adds	r3, #254	@ 0xfe
 8003c00:	4a53      	ldr	r2, [pc, #332]	@ (8003d50 <PWM_write_range+0x208>)
 8003c02:	fba2 2303 	umull	r2, r3, r2, r3
 8003c06:	0bdb      	lsrs	r3, r3, #15
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	3b01      	subs	r3, #1
 8003c0c:	b29a      	uxth	r2, r3
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	819a      	strh	r2, [r3, #12]
    	pwm->overflow = (uint16_t) ((pwm->CPU_FREQ / (float)(pwm->prescaler + 1) / freq) - 1);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	691b      	ldr	r3, [r3, #16]
 8003c16:	ee07 3a90 	vmov	s15, r3
 8003c1a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	899b      	ldrh	r3, [r3, #12]
 8003c22:	3301      	adds	r3, #1
 8003c24:	ee07 3a90 	vmov	s15, r3
 8003c28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c2c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003c30:	ed97 7a02 	vldr	s14, [r7, #8]
 8003c34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c38:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003c3c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003c40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c44:	ee17 3a90 	vmov	r3, s15
 8003c48:	b29a      	uxth	r2, r3
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	81da      	strh	r2, [r3, #14]
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(duty) / 65535.0);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	89db      	ldrh	r3, [r3, #14]
 8003c52:	4618      	mov	r0, r3
 8003c54:	f7fc fc32 	bl	80004bc <__aeabi_i2d>
 8003c58:	4604      	mov	r4, r0
 8003c5a:	460d      	mov	r5, r1
 8003c5c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003c60:	eef0 7ae7 	vabs.f32	s15, s15
 8003c64:	ee17 0a90 	vmov	r0, s15
 8003c68:	f7fc fc3a 	bl	80004e0 <__aeabi_f2d>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	460b      	mov	r3, r1
 8003c70:	4620      	mov	r0, r4
 8003c72:	4629      	mov	r1, r5
 8003c74:	f7fc fc8c 	bl	8000590 <__aeabi_dmul>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	460b      	mov	r3, r1
 8003c7c:	4610      	mov	r0, r2
 8003c7e:	4619      	mov	r1, r3
 8003c80:	a331      	add	r3, pc, #196	@ (adr r3, 8003d48 <PWM_write_range+0x200>)
 8003c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c86:	f7fc fdad 	bl	80007e4 <__aeabi_ddiv>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	460b      	mov	r3, r1
 8003c8e:	4610      	mov	r0, r2
 8003c90:	4619      	mov	r1, r3
 8003c92:	f7fc ff3f 	bl	8000b14 <__aeabi_d2uiz>
 8003c96:	4603      	mov	r3, r0
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	615a      	str	r2, [r3, #20]
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	899a      	ldrh	r2, [r3, #12]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	629a      	str	r2, [r3, #40]	@ 0x28
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	89da      	ldrh	r2, [r3, #14]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	89da      	ldrh	r2, [r3, #14]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	60da      	str	r2, [r3, #12]
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	889b      	ldrh	r3, [r3, #4]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d106      	bne.n	8003cd8 <PWM_write_range+0x190>
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	68fa      	ldr	r2, [r7, #12]
 8003cd2:	6952      	ldr	r2, [r2, #20]
 8003cd4:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8003cd6:	e032      	b.n	8003d3e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	889b      	ldrh	r3, [r3, #4]
 8003cdc:	2b04      	cmp	r3, #4
 8003cde:	d106      	bne.n	8003cee <PWM_write_range+0x1a6>
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	695b      	ldr	r3, [r3, #20]
 8003cea:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8003cec:	e027      	b.n	8003d3e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	889b      	ldrh	r3, [r3, #4]
 8003cf2:	2b08      	cmp	r3, #8
 8003cf4:	d106      	bne.n	8003d04 <PWM_write_range+0x1bc>
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	695b      	ldr	r3, [r3, #20]
 8003d00:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8003d02:	e01c      	b.n	8003d3e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	889b      	ldrh	r3, [r3, #4]
 8003d08:	2b0c      	cmp	r3, #12
 8003d0a:	d106      	bne.n	8003d1a <PWM_write_range+0x1d2>
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	695b      	ldr	r3, [r3, #20]
 8003d16:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8003d18:	e011      	b.n	8003d3e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	889b      	ldrh	r3, [r3, #4]
 8003d1e:	2b10      	cmp	r3, #16
 8003d20:	d106      	bne.n	8003d30 <PWM_write_range+0x1e8>
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	695b      	ldr	r3, [r3, #20]
 8003d2c:	6493      	str	r3, [r2, #72]	@ 0x48
}
 8003d2e:	e006      	b.n	8003d3e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	695b      	ldr	r3, [r3, #20]
 8003d3a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8003d3c:	e7ff      	b.n	8003d3e <PWM_write_range+0x1f6>
 8003d3e:	bf00      	nop
 8003d40:	3710      	adds	r7, #16
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bdb0      	pop	{r4, r5, r7, pc}
 8003d46:	bf00      	nop
 8003d48:	00000000 	.word	0x00000000
 8003d4c:	40efffe0 	.word	0x40efffe0
 8003d50:	80008001 	.word	0x80008001

08003d54 <QEI_init>:
* Author: pboon
*/

#include "QEI.h"

void QEI_init(QEI *qei, TIM_HandleTypeDef *htimx, int32_t ppr, uint32_t freq, float ratio, float pulley_diameter) {
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b086      	sub	sp, #24
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6178      	str	r0, [r7, #20]
 8003d5c:	6139      	str	r1, [r7, #16]
 8003d5e:	60fa      	str	r2, [r7, #12]
 8003d60:	60bb      	str	r3, [r7, #8]
 8003d62:	ed87 0a01 	vstr	s0, [r7, #4]
 8003d66:	edc7 0a00 	vstr	s1, [r7]
    qei->htimx = htimx;
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	693a      	ldr	r2, [r7, #16]
 8003d6e:	619a      	str	r2, [r3, #24]
    qei->ppr = ppr;
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	68fa      	ldr	r2, [r7, #12]
 8003d74:	621a      	str	r2, [r3, #32]
    qei->freq = freq;
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	68ba      	ldr	r2, [r7, #8]
 8003d7a:	629a      	str	r2, [r3, #40]	@ 0x28
    qei->gear_ratio = ratio;
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	655a      	str	r2, [r3, #84]	@ 0x54
    qei->pulley_diameter = pulley_diameter;
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	683a      	ldr	r2, [r7, #0]
 8003d86:	659a      	str	r2, [r3, #88]	@ 0x58

    qei->c[NOW] = 0;
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	601a      	str	r2, [r3, #0]
    qei->c[PREV] = 0;
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	2200      	movs	r2, #0
 8003d92:	605a      	str	r2, [r3, #4]
    qei->r[NOW] = 0;
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	f04f 0200 	mov.w	r2, #0
 8003d9a:	609a      	str	r2, [r3, #8]
    qei->r[PREV] = 0;
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	f04f 0200 	mov.w	r2, #0
 8003da2:	60da      	str	r2, [r3, #12]
    qei->m[NOW] = 0;
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	f04f 0200 	mov.w	r2, #0
 8003daa:	611a      	str	r2, [r3, #16]
    qei->m[PREV] = 0;
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	f04f 0200 	mov.w	r2, #0
 8003db2:	615a      	str	r2, [r3, #20]

    qei->enc_period = 65536 - (65536 % ppr);
 8003db4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003db8:	68fa      	ldr	r2, [r7, #12]
 8003dba:	fb93 f2f2 	sdiv	r2, r3, r2
 8003dbe:	68f9      	ldr	r1, [r7, #12]
 8003dc0:	fb01 f202 	mul.w	r2, r1, r2
 8003dc4:	1a9b      	subs	r3, r3, r2
 8003dc6:	f5c3 3280 	rsb	r2, r3, #65536	@ 0x10000
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	61da      	str	r2, [r3, #28]

    qei->diff_counts = 0;
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	625a      	str	r2, [r3, #36]	@ 0x24
    qei->pulses = 0;
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	639a      	str	r2, [r3, #56]	@ 0x38
    qei->rads = 0;
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	f04f 0200 	mov.w	r2, #0
 8003de0:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->mm = 0;
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	f04f 0200 	mov.w	r2, #0
 8003de8:	649a      	str	r2, [r3, #72]	@ 0x48
    qei->revs = 0;
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	f04f 0200 	mov.w	r2, #0
 8003df0:	63da      	str	r2, [r3, #60]	@ 0x3c

    qei->pps = 0;
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	f04f 0200 	mov.w	r2, #0
 8003df8:	62da      	str	r2, [r3, #44]	@ 0x2c
    qei->radps = 0;
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	f04f 0200 	mov.w	r2, #0
 8003e00:	635a      	str	r2, [r3, #52]	@ 0x34
    qei->mmps = 0;
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	f04f 0200 	mov.w	r2, #0
 8003e08:	64da      	str	r2, [r3, #76]	@ 0x4c
    qei->rpm = 0;
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	f04f 0200 	mov.w	r2, #0
 8003e10:	631a      	str	r2, [r3, #48]	@ 0x30

    qei->radpss = 0;
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	f04f 0200 	mov.w	r2, #0
 8003e18:	645a      	str	r2, [r3, #68]	@ 0x44
    qei->mmpss = 0;
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	f04f 0200 	mov.w	r2, #0
 8003e20:	651a      	str	r2, [r3, #80]	@ 0x50

    HAL_TIM_Encoder_Start(htimx, TIM_CHANNEL_ALL);
 8003e22:	213c      	movs	r1, #60	@ 0x3c
 8003e24:	6938      	ldr	r0, [r7, #16]
 8003e26:	f00b f821 	bl	800ee6c <HAL_TIM_Encoder_Start>
}
 8003e2a:	bf00      	nop
 8003e2c:	3718      	adds	r7, #24
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	0000      	movs	r0, r0
 8003e34:	0000      	movs	r0, r0
	...

08003e38 <QEI_get_diff_count>:

void QEI_get_diff_count(QEI *qei) {
 8003e38:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003e3c:	b084      	sub	sp, #16
 8003e3e:	af00      	add	r7, sp, #0
 8003e40:	6078      	str	r0, [r7, #4]
    // Get current counter value
    qei->c[NOW] = __HAL_TIM_GET_COUNTER(qei->htimx);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	699b      	ldr	r3, [r3, #24]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	601a      	str	r2, [r3, #0]

    // Calculate difference with handling for timer overflow/underflow
    int32_t diff_counts = qei->c[NOW] - qei->c[PREV];
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	1ad3      	subs	r3, r2, r3
 8003e58:	60fb      	str	r3, [r7, #12]

    // Handle counter overflow/underflow
    if (diff_counts > qei->enc_period / 2) {
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	69db      	ldr	r3, [r3, #28]
 8003e5e:	0fda      	lsrs	r2, r3, #31
 8003e60:	4413      	add	r3, r2
 8003e62:	105b      	asrs	r3, r3, #1
 8003e64:	461a      	mov	r2, r3
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	dd05      	ble.n	8003e78 <QEI_get_diff_count+0x40>
        diff_counts -= qei->enc_period;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	69db      	ldr	r3, [r3, #28]
 8003e70:	68fa      	ldr	r2, [r7, #12]
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	60fb      	str	r3, [r7, #12]
 8003e76:	e00e      	b.n	8003e96 <QEI_get_diff_count+0x5e>
    } else if (diff_counts < -(qei->enc_period / 2)) {
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	69db      	ldr	r3, [r3, #28]
 8003e7c:	0fda      	lsrs	r2, r3, #31
 8003e7e:	4413      	add	r3, r2
 8003e80:	105b      	asrs	r3, r3, #1
 8003e82:	425b      	negs	r3, r3
 8003e84:	461a      	mov	r2, r3
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	da04      	bge.n	8003e96 <QEI_get_diff_count+0x5e>
        diff_counts += qei->enc_period;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	69db      	ldr	r3, [r3, #28]
 8003e90:	68fa      	ldr	r2, [r7, #12]
 8003e92:	4413      	add	r3, r2
 8003e94:	60fb      	str	r3, [r7, #12]
    }

    qei->diff_counts = diff_counts;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	68fa      	ldr	r2, [r7, #12]
 8003e9a:	625a      	str	r2, [r3, #36]	@ 0x24

    // Update position counters
    qei->pulses += qei->diff_counts;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ea4:	441a      	add	r2, r3
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	639a      	str	r2, [r3, #56]	@ 0x38
    qei->revs += (qei->diff_counts / (float)(qei->ppr)) * qei->gear_ratio;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eb4:	ee07 3a90 	vmov	s15, r3
 8003eb8:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6a1b      	ldr	r3, [r3, #32]
 8003ec0:	ee07 3a90 	vmov	s15, r3
 8003ec4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ec8:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8003ed2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ed6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
    qei->rads += (qei->diff_counts / (float)(qei->ppr)) * 2 * M_PI * qei->gear_ratio;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f7fc fafb 	bl	80004e0 <__aeabi_f2d>
 8003eea:	4604      	mov	r4, r0
 8003eec:	460d      	mov	r5, r1
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ef2:	ee07 3a90 	vmov	s15, r3
 8003ef6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6a1b      	ldr	r3, [r3, #32]
 8003efe:	ee07 3a90 	vmov	s15, r3
 8003f02:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f0a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003f0e:	ee17 0a90 	vmov	r0, s15
 8003f12:	f7fc fae5 	bl	80004e0 <__aeabi_f2d>
 8003f16:	a33c      	add	r3, pc, #240	@ (adr r3, 8004008 <QEI_get_diff_count+0x1d0>)
 8003f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f1c:	f7fc fb38 	bl	8000590 <__aeabi_dmul>
 8003f20:	4602      	mov	r2, r0
 8003f22:	460b      	mov	r3, r1
 8003f24:	4690      	mov	r8, r2
 8003f26:	4699      	mov	r9, r3
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f7fc fad7 	bl	80004e0 <__aeabi_f2d>
 8003f32:	4602      	mov	r2, r0
 8003f34:	460b      	mov	r3, r1
 8003f36:	4640      	mov	r0, r8
 8003f38:	4649      	mov	r1, r9
 8003f3a:	f7fc fb29 	bl	8000590 <__aeabi_dmul>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	460b      	mov	r3, r1
 8003f42:	4620      	mov	r0, r4
 8003f44:	4629      	mov	r1, r5
 8003f46:	f7fc f96d 	bl	8000224 <__adddf3>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	460b      	mov	r3, r1
 8003f4e:	4610      	mov	r0, r2
 8003f50:	4619      	mov	r1, r3
 8003f52:	f7fc fdff 	bl	8000b54 <__aeabi_d2f>
 8003f56:	4602      	mov	r2, r0
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->mm += (qei->diff_counts / (float)(qei->ppr)) * M_PI * qei->pulley_diameter * qei->gear_ratio;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f60:	4618      	mov	r0, r3
 8003f62:	f7fc fabd 	bl	80004e0 <__aeabi_f2d>
 8003f66:	4604      	mov	r4, r0
 8003f68:	460d      	mov	r5, r1
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f6e:	ee07 3a90 	vmov	s15, r3
 8003f72:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6a1b      	ldr	r3, [r3, #32]
 8003f7a:	ee07 3a90 	vmov	s15, r3
 8003f7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f82:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003f86:	ee16 0a90 	vmov	r0, s13
 8003f8a:	f7fc faa9 	bl	80004e0 <__aeabi_f2d>
 8003f8e:	a31e      	add	r3, pc, #120	@ (adr r3, 8004008 <QEI_get_diff_count+0x1d0>)
 8003f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f94:	f7fc fafc 	bl	8000590 <__aeabi_dmul>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	460b      	mov	r3, r1
 8003f9c:	4690      	mov	r8, r2
 8003f9e:	4699      	mov	r9, r3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f7fc fa9b 	bl	80004e0 <__aeabi_f2d>
 8003faa:	4602      	mov	r2, r0
 8003fac:	460b      	mov	r3, r1
 8003fae:	4640      	mov	r0, r8
 8003fb0:	4649      	mov	r1, r9
 8003fb2:	f7fc faed 	bl	8000590 <__aeabi_dmul>
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	460b      	mov	r3, r1
 8003fba:	4690      	mov	r8, r2
 8003fbc:	4699      	mov	r9, r3
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f7fc fa8c 	bl	80004e0 <__aeabi_f2d>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	460b      	mov	r3, r1
 8003fcc:	4640      	mov	r0, r8
 8003fce:	4649      	mov	r1, r9
 8003fd0:	f7fc fade 	bl	8000590 <__aeabi_dmul>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	460b      	mov	r3, r1
 8003fd8:	4620      	mov	r0, r4
 8003fda:	4629      	mov	r1, r5
 8003fdc:	f7fc f922 	bl	8000224 <__adddf3>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	460b      	mov	r3, r1
 8003fe4:	4610      	mov	r0, r2
 8003fe6:	4619      	mov	r1, r3
 8003fe8:	f7fc fdb4 	bl	8000b54 <__aeabi_d2f>
 8003fec:	4602      	mov	r2, r0
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	649a      	str	r2, [r3, #72]	@ 0x48

    // Store the current counter value for next calculation
    qei->c[PREV] = qei->c[NOW];
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	605a      	str	r2, [r3, #4]
}
 8003ffa:	bf00      	nop
 8003ffc:	3710      	adds	r7, #16
 8003ffe:	46bd      	mov	sp, r7
 8004000:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004004:	f3af 8000 	nop.w
 8004008:	54442d18 	.word	0x54442d18
 800400c:	400921fb 	.word	0x400921fb

08004010 <QEI_compute_data>:

void QEI_compute_data(QEI *qei) {
 8004010:	b5b0      	push	{r4, r5, r7, lr}
 8004012:	b084      	sub	sp, #16
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
    // Calculate velocity in pulses per second
    qei->pps = qei->diff_counts * ((int)(qei->freq));
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800401c:	687a      	ldr	r2, [r7, #4]
 800401e:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004020:	fb02 f303 	mul.w	r3, r2, r3
 8004024:	ee07 3a90 	vmov	s15, r3
 8004028:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

    // Calculate angular velocity in different units
    qei->rpm = qei->pps * 60.0 / (float)(qei->ppr) * qei->gear_ratio;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004036:	4618      	mov	r0, r3
 8004038:	f7fc fa52 	bl	80004e0 <__aeabi_f2d>
 800403c:	f04f 0200 	mov.w	r2, #0
 8004040:	4b83      	ldr	r3, [pc, #524]	@ (8004250 <QEI_compute_data+0x240>)
 8004042:	f7fc faa5 	bl	8000590 <__aeabi_dmul>
 8004046:	4602      	mov	r2, r0
 8004048:	460b      	mov	r3, r1
 800404a:	4614      	mov	r4, r2
 800404c:	461d      	mov	r5, r3
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6a1b      	ldr	r3, [r3, #32]
 8004052:	ee07 3a90 	vmov	s15, r3
 8004056:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800405a:	ee17 0a90 	vmov	r0, s15
 800405e:	f7fc fa3f 	bl	80004e0 <__aeabi_f2d>
 8004062:	4602      	mov	r2, r0
 8004064:	460b      	mov	r3, r1
 8004066:	4620      	mov	r0, r4
 8004068:	4629      	mov	r1, r5
 800406a:	f7fc fbbb 	bl	80007e4 <__aeabi_ddiv>
 800406e:	4602      	mov	r2, r0
 8004070:	460b      	mov	r3, r1
 8004072:	4614      	mov	r4, r2
 8004074:	461d      	mov	r5, r3
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800407a:	4618      	mov	r0, r3
 800407c:	f7fc fa30 	bl	80004e0 <__aeabi_f2d>
 8004080:	4602      	mov	r2, r0
 8004082:	460b      	mov	r3, r1
 8004084:	4620      	mov	r0, r4
 8004086:	4629      	mov	r1, r5
 8004088:	f7fc fa82 	bl	8000590 <__aeabi_dmul>
 800408c:	4602      	mov	r2, r0
 800408e:	460b      	mov	r3, r1
 8004090:	4610      	mov	r0, r2
 8004092:	4619      	mov	r1, r3
 8004094:	f7fc fd5e 	bl	8000b54 <__aeabi_d2f>
 8004098:	4602      	mov	r2, r0
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	631a      	str	r2, [r3, #48]	@ 0x30
    qei->radps = qei->pps * 2 * M_PI / (float)(qei->ppr) * qei->gear_ratio;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80040a4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80040a8:	ee17 0a90 	vmov	r0, s15
 80040ac:	f7fc fa18 	bl	80004e0 <__aeabi_f2d>
 80040b0:	a365      	add	r3, pc, #404	@ (adr r3, 8004248 <QEI_compute_data+0x238>)
 80040b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040b6:	f7fc fa6b 	bl	8000590 <__aeabi_dmul>
 80040ba:	4602      	mov	r2, r0
 80040bc:	460b      	mov	r3, r1
 80040be:	4614      	mov	r4, r2
 80040c0:	461d      	mov	r5, r3
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6a1b      	ldr	r3, [r3, #32]
 80040c6:	ee07 3a90 	vmov	s15, r3
 80040ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040ce:	ee17 0a90 	vmov	r0, s15
 80040d2:	f7fc fa05 	bl	80004e0 <__aeabi_f2d>
 80040d6:	4602      	mov	r2, r0
 80040d8:	460b      	mov	r3, r1
 80040da:	4620      	mov	r0, r4
 80040dc:	4629      	mov	r1, r5
 80040de:	f7fc fb81 	bl	80007e4 <__aeabi_ddiv>
 80040e2:	4602      	mov	r2, r0
 80040e4:	460b      	mov	r3, r1
 80040e6:	4614      	mov	r4, r2
 80040e8:	461d      	mov	r5, r3
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040ee:	4618      	mov	r0, r3
 80040f0:	f7fc f9f6 	bl	80004e0 <__aeabi_f2d>
 80040f4:	4602      	mov	r2, r0
 80040f6:	460b      	mov	r3, r1
 80040f8:	4620      	mov	r0, r4
 80040fa:	4629      	mov	r1, r5
 80040fc:	f7fc fa48 	bl	8000590 <__aeabi_dmul>
 8004100:	4602      	mov	r2, r0
 8004102:	460b      	mov	r3, r1
 8004104:	4610      	mov	r0, r2
 8004106:	4619      	mov	r1, r3
 8004108:	f7fc fd24 	bl	8000b54 <__aeabi_d2f>
 800410c:	4602      	mov	r2, r0
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	635a      	str	r2, [r3, #52]	@ 0x34

    // Calculate linear velocity
    qei->mmps = qei->pps * M_PI * qei->pulley_diameter / (float)(qei->ppr) * qei->gear_ratio;  // Assuming 10mm per rev
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004116:	4618      	mov	r0, r3
 8004118:	f7fc f9e2 	bl	80004e0 <__aeabi_f2d>
 800411c:	a34a      	add	r3, pc, #296	@ (adr r3, 8004248 <QEI_compute_data+0x238>)
 800411e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004122:	f7fc fa35 	bl	8000590 <__aeabi_dmul>
 8004126:	4602      	mov	r2, r0
 8004128:	460b      	mov	r3, r1
 800412a:	4614      	mov	r4, r2
 800412c:	461d      	mov	r5, r3
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004132:	4618      	mov	r0, r3
 8004134:	f7fc f9d4 	bl	80004e0 <__aeabi_f2d>
 8004138:	4602      	mov	r2, r0
 800413a:	460b      	mov	r3, r1
 800413c:	4620      	mov	r0, r4
 800413e:	4629      	mov	r1, r5
 8004140:	f7fc fa26 	bl	8000590 <__aeabi_dmul>
 8004144:	4602      	mov	r2, r0
 8004146:	460b      	mov	r3, r1
 8004148:	4614      	mov	r4, r2
 800414a:	461d      	mov	r5, r3
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6a1b      	ldr	r3, [r3, #32]
 8004150:	ee07 3a90 	vmov	s15, r3
 8004154:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004158:	ee17 0a90 	vmov	r0, s15
 800415c:	f7fc f9c0 	bl	80004e0 <__aeabi_f2d>
 8004160:	4602      	mov	r2, r0
 8004162:	460b      	mov	r3, r1
 8004164:	4620      	mov	r0, r4
 8004166:	4629      	mov	r1, r5
 8004168:	f7fc fb3c 	bl	80007e4 <__aeabi_ddiv>
 800416c:	4602      	mov	r2, r0
 800416e:	460b      	mov	r3, r1
 8004170:	4614      	mov	r4, r2
 8004172:	461d      	mov	r5, r3
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004178:	4618      	mov	r0, r3
 800417a:	f7fc f9b1 	bl	80004e0 <__aeabi_f2d>
 800417e:	4602      	mov	r2, r0
 8004180:	460b      	mov	r3, r1
 8004182:	4620      	mov	r0, r4
 8004184:	4629      	mov	r1, r5
 8004186:	f7fc fa03 	bl	8000590 <__aeabi_dmul>
 800418a:	4602      	mov	r2, r0
 800418c:	460b      	mov	r3, r1
 800418e:	4610      	mov	r0, r2
 8004190:	4619      	mov	r1, r3
 8004192:	f7fc fcdf 	bl	8000b54 <__aeabi_d2f>
 8004196:	4602      	mov	r2, r0
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	64da      	str	r2, [r3, #76]	@ 0x4c

    // Store current angular velocity for acceleration calculation
    qei->r[NOW] = qei->radps;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	609a      	str	r2, [r3, #8]

    // Store current linear velocity for acceleration calculation
    qei->m[NOW] = qei->mmps;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	611a      	str	r2, [r3, #16]

    // Calculate acceleration
    float diff_angular_velocity = qei->r[NOW] - qei->r[PREV];
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	ed93 7a02 	vldr	s14, [r3, #8]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	edd3 7a03 	vldr	s15, [r3, #12]
 80041b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80041bc:	edc7 7a03 	vstr	s15, [r7, #12]
    qei->radpss = (diff_angular_velocity == 0) ? 0 : diff_angular_velocity * qei->freq;
 80041c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80041c4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80041c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041cc:	d00a      	beq.n	80041e4 <QEI_compute_data+0x1d4>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041d2:	ee07 3a90 	vmov	s15, r3
 80041d6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80041da:	edd7 7a03 	vldr	s15, [r7, #12]
 80041de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041e2:	e001      	b.n	80041e8 <QEI_compute_data+0x1d8>
 80041e4:	eddf 7a1b 	vldr	s15, [pc, #108]	@ 8004254 <QEI_compute_data+0x244>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44

    float diff_linear_velocity = qei->m[NOW] - qei->m[PREV];
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	ed93 7a04 	vldr	s14, [r3, #16]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	edd3 7a05 	vldr	s15, [r3, #20]
 80041fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80041fe:	edc7 7a02 	vstr	s15, [r7, #8]
    qei->mmpss = (diff_linear_velocity == 0) ? 0 : diff_linear_velocity * qei->freq;
 8004202:	edd7 7a02 	vldr	s15, [r7, #8]
 8004206:	eef5 7a40 	vcmp.f32	s15, #0.0
 800420a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800420e:	d00a      	beq.n	8004226 <QEI_compute_data+0x216>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004214:	ee07 3a90 	vmov	s15, r3
 8004218:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800421c:	edd7 7a02 	vldr	s15, [r7, #8]
 8004220:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004224:	e001      	b.n	800422a <QEI_compute_data+0x21a>
 8004226:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8004254 <QEI_compute_data+0x244>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50

    // Store current velocity for next acceleration calculation
    qei->r[PREV] = qei->r[NOW];
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	689a      	ldr	r2, [r3, #8]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	60da      	str	r2, [r3, #12]
    qei->m[PREV] = qei->m[NOW];
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	691a      	ldr	r2, [r3, #16]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	615a      	str	r2, [r3, #20]
}
 8004240:	bf00      	nop
 8004242:	3710      	adds	r7, #16
 8004244:	46bd      	mov	sp, r7
 8004246:	bdb0      	pop	{r4, r5, r7, pc}
 8004248:	54442d18 	.word	0x54442d18
 800424c:	400921fb 	.word	0x400921fb
 8004250:	404e0000 	.word	0x404e0000
 8004254:	00000000 	.word	0x00000000

08004258 <QEI_reset>:

void QEI_reset(QEI *qei) {
 8004258:	b480      	push	{r7}
 800425a:	b083      	sub	sp, #12
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
    // Reset counter history
    qei->c[NOW] = 0;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2200      	movs	r2, #0
 8004264:	601a      	str	r2, [r3, #0]
    qei->c[PREV] = 0;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2200      	movs	r2, #0
 800426a:	605a      	str	r2, [r3, #4]

    // Reset all position and velocity values
    qei->diff_counts = 0;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	625a      	str	r2, [r3, #36]	@ 0x24
    qei->rpm = 0;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	f04f 0200 	mov.w	r2, #0
 8004278:	631a      	str	r2, [r3, #48]	@ 0x30
    qei->pulses = 0;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	639a      	str	r2, [r3, #56]	@ 0x38
    qei->revs = 0;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f04f 0200 	mov.w	r2, #0
 8004286:	63da      	str	r2, [r3, #60]	@ 0x3c
    qei->rads = 0;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	f04f 0200 	mov.w	r2, #0
 800428e:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->mm = 0;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f04f 0200 	mov.w	r2, #0
 8004296:	649a      	str	r2, [r3, #72]	@ 0x48

    // Reset velocity history
    qei->r[NOW] = 0;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	f04f 0200 	mov.w	r2, #0
 800429e:	609a      	str	r2, [r3, #8]
    qei->r[PREV] = 0;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f04f 0200 	mov.w	r2, #0
 80042a6:	60da      	str	r2, [r3, #12]
    qei->m[NOW] = 0;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	f04f 0200 	mov.w	r2, #0
 80042ae:	611a      	str	r2, [r3, #16]
    qei->m[PREV] = 0;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	f04f 0200 	mov.w	r2, #0
 80042b6:	615a      	str	r2, [r3, #20]
}
 80042b8:	bf00      	nop
 80042ba:	370c      	adds	r7, #12
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr

080042c4 <Trapezoidal_Generator>:
 */

#include "Trapezoidal.h"

void Trapezoidal_Generator(volatile Trapezoidal_GenStruct *trapGen,
        float32_t initial_p, float32_t target_p, float32_t vmax, float32_t amax) {
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b08e      	sub	sp, #56	@ 0x38
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6178      	str	r0, [r7, #20]
 80042cc:	ed87 0a04 	vstr	s0, [r7, #16]
 80042d0:	edc7 0a03 	vstr	s1, [r7, #12]
 80042d4:	ed87 1a02 	vstr	s2, [r7, #8]
 80042d8:	edc7 1a01 	vstr	s3, [r7, #4]
    // Set default values
    trapGen->dir = 0;
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	2200      	movs	r2, #0
 80042e0:	741a      	strb	r2, [r3, #16]
    trapGen->time_total = 0.0f;
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	f04f 0200 	mov.w	r2, #0
 80042e8:	60da      	str	r2, [r3, #12]
    trapGen->t1 = 0.0f;
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	f04f 0200 	mov.w	r2, #0
 80042f0:	601a      	str	r2, [r3, #0]
    trapGen->t2 = 0.0f;
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	f04f 0200 	mov.w	r2, #0
 80042f8:	605a      	str	r2, [r3, #4]
    trapGen->t3 = 0.0f;
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	f04f 0200 	mov.w	r2, #0
 8004300:	609a      	str	r2, [r3, #8]

    // Calculate the distance to travel
    float32_t distance = fabsf(target_p - initial_p);
 8004302:	ed97 7a03 	vldr	s14, [r7, #12]
 8004306:	edd7 7a04 	vldr	s15, [r7, #16]
 800430a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800430e:	eef0 7ae7 	vabs.f32	s15, s15
 8004312:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

    // Determine the direction of the motion
    if (target_p - initial_p < 0) {
 8004316:	ed97 7a03 	vldr	s14, [r7, #12]
 800431a:	edd7 7a04 	vldr	s15, [r7, #16]
 800431e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004322:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800432a:	d503      	bpl.n	8004334 <Trapezoidal_Generator+0x70>
        trapGen->dir = -1;
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	22ff      	movs	r2, #255	@ 0xff
 8004330:	741a      	strb	r2, [r3, #16]
 8004332:	e002      	b.n	800433a <Trapezoidal_Generator+0x76>
    } else {
        trapGen->dir = 1;
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	2201      	movs	r2, #1
 8004338:	741a      	strb	r2, [r3, #16]
    }

    // If no movement required or zero acceleration
    if (distance == 0.0f || amax == 0.0f) {
 800433a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800433e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004346:	d006      	beq.n	8004356 <Trapezoidal_Generator+0x92>
 8004348:	edd7 7a01 	vldr	s15, [r7, #4]
 800434c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004354:	d104      	bne.n	8004360 <Trapezoidal_Generator+0x9c>
        trapGen->time_total = 0.0f;
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	f04f 0200 	mov.w	r2, #0
 800435c:	60da      	str	r2, [r3, #12]
        return;
 800435e:	e06f      	b.n	8004440 <Trapezoidal_Generator+0x17c>
    }

    // Time to reach maximum velocity (assuming we can)
    float32_t ta = vmax / amax;
 8004360:	edd7 6a02 	vldr	s13, [r7, #8]
 8004364:	ed97 7a01 	vldr	s14, [r7, #4]
 8004368:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800436c:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

    // Distance traveled during acceleration and deceleration phases
    float32_t sa = 0.5f * amax * ta * ta;  // Distance in acceleration phase
 8004370:	edd7 7a01 	vldr	s15, [r7, #4]
 8004374:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004378:	ee27 7a87 	vmul.f32	s14, s15, s14
 800437c:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8004380:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004384:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8004388:	ee67 7a27 	vmul.f32	s15, s14, s15
 800438c:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    float32_t sd = sa;                     // Distance in deceleration phase (same as acceleration)
 8004390:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004392:	62bb      	str	r3, [r7, #40]	@ 0x28
    float32_t s_accdec = sa + sd;          // Total distance for acceleration + deceleration
 8004394:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8004398:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800439c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043a0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    // Check if we have enough distance to reach maximum velocity
    if (distance >= s_accdec) {
 80043a4:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80043a8:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80043ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80043b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043b4:	db27      	blt.n	8004406 <Trapezoidal_Generator+0x142>
        // Trapezoidal profile - we can reach maximum velocity
        float32_t sc = distance - s_accdec;  // Distance at constant velocity
 80043b6:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80043ba:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80043be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80043c2:	edc7 7a07 	vstr	s15, [r7, #28]
        float32_t tc = sc / vmax;            // Time at constant velocity
 80043c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80043ca:	ed97 7a02 	vldr	s14, [r7, #8]
 80043ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043d2:	edc7 7a06 	vstr	s15, [r7, #24]

        trapGen->t1 = ta;                    // End of acceleration phase
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043da:	601a      	str	r2, [r3, #0]
        trapGen->t2 = ta + tc;               // End of constant velocity phase
 80043dc:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 80043e0:	edd7 7a06 	vldr	s15, [r7, #24]
 80043e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	edc3 7a01 	vstr	s15, [r3, #4]
        trapGen->t3 = 2 * ta + tc;           // End of deceleration phase
 80043ee:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80043f2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80043f6:	edd7 7a06 	vldr	s15, [r7, #24]
 80043fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	edc3 7a02 	vstr	s15, [r3, #8]
 8004404:	e018      	b.n	8004438 <Trapezoidal_Generator+0x174>
        // For a triangular profile, we need to find the time to reach peak velocity
        // and the peak velocity itself

        // Using distance = 2 * (0.5 * amax * tp^2) and solving for tp
        // where tp is the time to reach peak velocity (half the total time)
        float32_t tp = sqrtf(distance / amax);
 8004406:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800440a:	edd7 7a01 	vldr	s15, [r7, #4]
 800440e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004412:	eeb0 0a66 	vmov.f32	s0, s13
 8004416:	f00e ff7b 	bl	8013310 <sqrtf>
 800441a:	ed87 0a08 	vstr	s0, [r7, #32]

        trapGen->t1 = tp;                    // End of acceleration phase
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	6a3a      	ldr	r2, [r7, #32]
 8004422:	601a      	str	r2, [r3, #0]
        trapGen->t2 = tp;                    // No constant velocity phase
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	6a3a      	ldr	r2, [r7, #32]
 8004428:	605a      	str	r2, [r3, #4]
        trapGen->t3 = 2 * tp;                // End of deceleration phase
 800442a:	edd7 7a08 	vldr	s15, [r7, #32]
 800442e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	edc3 7a02 	vstr	s15, [r3, #8]
    }

    trapGen->time_total = trapGen->t3;
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	689a      	ldr	r2, [r3, #8]
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	60da      	str	r2, [r3, #12]
}
 8004440:	3738      	adds	r7, #56	@ 0x38
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
	...

08004448 <Trapezoidal_Evaluated>:

void Trapezoidal_Evaluated(volatile Trapezoidal_GenStruct *trapGen,
        volatile Trapezoidal_EvaStruct *evaTrapezoidal, float32_t initial_p,
        float32_t target_p, float32_t vmax, float32_t amax) {
 8004448:	b480      	push	{r7}
 800444a:	b08d      	sub	sp, #52	@ 0x34
 800444c:	af00      	add	r7, sp, #0
 800444e:	6178      	str	r0, [r7, #20]
 8004450:	6139      	str	r1, [r7, #16]
 8004452:	ed87 0a03 	vstr	s0, [r7, #12]
 8004456:	edc7 0a02 	vstr	s1, [r7, #8]
 800445a:	ed87 1a01 	vstr	s2, [r7, #4]
 800445e:	edc7 1a00 	vstr	s3, [r7]

    // Update current time (assuming 1ms intervals)
    evaTrapezoidal->t += 1.0f / 1000.0f;
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	edd3 7a03 	vldr	s15, [r3, #12]
 8004468:	ed9f 7aa0 	vldr	s14, [pc, #640]	@ 80046ec <Trapezoidal_Evaluated+0x2a4>
 800446c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	edc3 7a03 	vstr	s15, [r3, #12]

    // Check if trajectory is still active
    if (evaTrapezoidal->t <= trapGen->time_total) {
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	ed93 7a03 	vldr	s14, [r3, #12]
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	edd3 7a03 	vldr	s15, [r3, #12]
 8004482:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004486:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800448a:	f200 811b 	bhi.w	80046c4 <Trapezoidal_Evaluated+0x27c>
        evaTrapezoidal->isFinised = false;
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	2200      	movs	r2, #0
 8004492:	741a      	strb	r2, [r3, #16]

        // Calculate direction-adjusted acceleration
        float32_t accel = amax * trapGen->dir;
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	7c1b      	ldrb	r3, [r3, #16]
 8004498:	b25b      	sxtb	r3, r3
 800449a:	ee07 3a90 	vmov	s15, r3
 800449e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80044a2:	ed97 7a00 	vldr	s14, [r7]
 80044a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044aa:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

        // Calculate peak velocity (might be vmax or lower for triangular profile)
        float32_t peak_vel;
        if (trapGen->t1 == trapGen->t2) {
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	ed93 7a00 	vldr	s14, [r3]
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	edd3 7a01 	vldr	s15, [r3, #4]
 80044ba:	eeb4 7a67 	vcmp.f32	s14, s15
 80044be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044c2:	d109      	bne.n	80044d8 <Trapezoidal_Evaluated+0x90>
            // Triangular profile - peak velocity is at t1
            peak_vel = accel * trapGen->t1;
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	edd3 7a00 	vldr	s15, [r3]
 80044ca:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80044ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044d2:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
 80044d6:	e00c      	b.n	80044f2 <Trapezoidal_Evaluated+0xaa>
        } else {
            // Trapezoidal profile - peak velocity is vmax with direction
            peak_vel = vmax * trapGen->dir;
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	7c1b      	ldrb	r3, [r3, #16]
 80044dc:	b25b      	sxtb	r3, r3
 80044de:	ee07 3a90 	vmov	s15, r3
 80044e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80044e6:	ed97 7a01 	vldr	s14, [r7, #4]
 80044ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044ee:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
        }

        // Acceleration phase
        if (evaTrapezoidal->t <= trapGen->t1) {
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	ed93 7a03 	vldr	s14, [r3, #12]
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	edd3 7a00 	vldr	s15, [r3]
 80044fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004502:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004506:	d824      	bhi.n	8004552 <Trapezoidal_Evaluated+0x10a>
            // Position calculation: p = p0 + 0.5*a*t²
            evaTrapezoidal->setposition = initial_p + 0.5f * accel * evaTrapezoidal->t * evaTrapezoidal->t;
 8004508:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800450c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004510:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	edd3 7a03 	vldr	s15, [r3, #12]
 800451a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	edd3 7a03 	vldr	s15, [r3, #12]
 8004524:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004528:	edd7 7a03 	vldr	s15, [r7, #12]
 800452c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	edc3 7a00 	vstr	s15, [r3]

            // Velocity calculation: v = a*t
            evaTrapezoidal->setvelocity = accel * evaTrapezoidal->t;
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	ed93 7a03 	vldr	s14, [r3, #12]
 800453c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004540:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	edc3 7a01 	vstr	s15, [r3, #4]

            // Constant acceleration
            evaTrapezoidal->setacceleration = accel;
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800454e:	609a      	str	r2, [r3, #8]
        // Ensure final position is exactly target_p
        evaTrapezoidal->setposition = target_p;
        evaTrapezoidal->setvelocity = 0.0f;
        evaTrapezoidal->setacceleration = 0.0f;
    }
}
 8004550:	e0c6      	b.n	80046e0 <Trapezoidal_Evaluated+0x298>
        else if (evaTrapezoidal->t <= trapGen->t2) {
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	ed93 7a03 	vldr	s14, [r3, #12]
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	edd3 7a01 	vldr	s15, [r3, #4]
 800455e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004566:	d830      	bhi.n	80045ca <Trapezoidal_Evaluated+0x182>
            float32_t p1 = initial_p + 0.5f * accel * trapGen->t1 * trapGen->t1;
 8004568:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800456c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004570:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	edd3 7a00 	vldr	s15, [r3]
 800457a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	edd3 7a00 	vldr	s15, [r3]
 8004584:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004588:	ed97 7a03 	vldr	s14, [r7, #12]
 800458c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004590:	edc7 7a06 	vstr	s15, [r7, #24]
            evaTrapezoidal->setposition = p1 + peak_vel * (evaTrapezoidal->t - trapGen->t1);
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	ed93 7a03 	vldr	s14, [r3, #12]
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	edd3 7a00 	vldr	s15, [r3]
 80045a0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80045a4:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80045a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80045ac:	edd7 7a06 	vldr	s15, [r7, #24]
 80045b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	edc3 7a00 	vstr	s15, [r3]
            evaTrapezoidal->setvelocity = peak_vel;
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80045be:	605a      	str	r2, [r3, #4]
            evaTrapezoidal->setacceleration = 0.0f;
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	f04f 0200 	mov.w	r2, #0
 80045c6:	609a      	str	r2, [r3, #8]
}
 80045c8:	e08a      	b.n	80046e0 <Trapezoidal_Evaluated+0x298>
        else if (evaTrapezoidal->t <= trapGen->t3) {
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	ed93 7a03 	vldr	s14, [r3, #12]
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	edd3 7a02 	vldr	s15, [r3, #8]
 80045d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80045da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045de:	d900      	bls.n	80045e2 <Trapezoidal_Evaluated+0x19a>
}
 80045e0:	e07e      	b.n	80046e0 <Trapezoidal_Evaluated+0x298>
            float32_t p1 = initial_p + 0.5f * accel * trapGen->t1 * trapGen->t1;
 80045e2:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80045e6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80045ea:	ee27 7a87 	vmul.f32	s14, s15, s14
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	edd3 7a00 	vldr	s15, [r3]
 80045f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	edd3 7a00 	vldr	s15, [r3]
 80045fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004602:	ed97 7a03 	vldr	s14, [r7, #12]
 8004606:	ee77 7a27 	vadd.f32	s15, s14, s15
 800460a:	edc7 7a08 	vstr	s15, [r7, #32]
            float32_t p2 = p1;
 800460e:	6a3b      	ldr	r3, [r7, #32]
 8004610:	62bb      	str	r3, [r7, #40]	@ 0x28
            if (trapGen->t2 > trapGen->t1) {
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	ed93 7a01 	vldr	s14, [r3, #4]
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	edd3 7a00 	vldr	s15, [r3]
 800461e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004622:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004626:	dd11      	ble.n	800464c <Trapezoidal_Evaluated+0x204>
                p2 += peak_vel * (trapGen->t2 - trapGen->t1);
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	ed93 7a01 	vldr	s14, [r3, #4]
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	edd3 7a00 	vldr	s15, [r3]
 8004634:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004638:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800463c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004640:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8004644:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004648:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            float32_t td = evaTrapezoidal->t - trapGen->t2;
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	ed93 7a03 	vldr	s14, [r3, #12]
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	edd3 7a01 	vldr	s15, [r3, #4]
 8004658:	ee77 7a67 	vsub.f32	s15, s14, s15
 800465c:	edc7 7a07 	vstr	s15, [r7, #28]
            evaTrapezoidal->setposition = p2 + peak_vel * td - 0.5f * accel * td * td;
 8004660:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8004664:	edd7 7a07 	vldr	s15, [r7, #28]
 8004668:	ee27 7a27 	vmul.f32	s14, s14, s15
 800466c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8004670:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004674:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004678:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 800467c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8004680:	edd7 7a07 	vldr	s15, [r7, #28]
 8004684:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004688:	edd7 7a07 	vldr	s15, [r7, #28]
 800468c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004690:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	edc3 7a00 	vstr	s15, [r3]
            evaTrapezoidal->setvelocity = peak_vel - accel * td;
 800469a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800469e:	edd7 7a07 	vldr	s15, [r7, #28]
 80046a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046a6:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80046aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	edc3 7a01 	vstr	s15, [r3, #4]
            evaTrapezoidal->setacceleration = -accel;
 80046b4:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80046b8:	eef1 7a67 	vneg.f32	s15, s15
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	edc3 7a02 	vstr	s15, [r3, #8]
}
 80046c2:	e00d      	b.n	80046e0 <Trapezoidal_Evaluated+0x298>
        evaTrapezoidal->isFinised = true;
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	2201      	movs	r2, #1
 80046c8:	741a      	strb	r2, [r3, #16]
        evaTrapezoidal->setposition = target_p;
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	68ba      	ldr	r2, [r7, #8]
 80046ce:	601a      	str	r2, [r3, #0]
        evaTrapezoidal->setvelocity = 0.0f;
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	f04f 0200 	mov.w	r2, #0
 80046d6:	605a      	str	r2, [r3, #4]
        evaTrapezoidal->setacceleration = 0.0f;
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	f04f 0200 	mov.w	r2, #0
 80046de:	609a      	str	r2, [r3, #8]
}
 80046e0:	bf00      	nop
 80046e2:	3734      	adds	r7, #52	@ 0x34
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr
 80046ec:	3a83126f 	.word	0x3a83126f

080046f0 <temperature_to_base>:
    "ns", "us", "ms", "s", "min", "hour", "day",
    "C", "F", "K"
};

/* Custom conversion functions for temperature */
static float temperature_to_base(float value, Unit from_unit) {
 80046f0:	b480      	push	{r7}
 80046f2:	b083      	sub	sp, #12
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	ed87 0a01 	vstr	s0, [r7, #4]
 80046fa:	4603      	mov	r3, r0
 80046fc:	70fb      	strb	r3, [r7, #3]
    switch (from_unit) {
 80046fe:	78fb      	ldrb	r3, [r7, #3]
 8004700:	2b1a      	cmp	r3, #26
 8004702:	d018      	beq.n	8004736 <temperature_to_base+0x46>
 8004704:	2b1a      	cmp	r3, #26
 8004706:	dc1d      	bgt.n	8004744 <temperature_to_base+0x54>
 8004708:	2b18      	cmp	r3, #24
 800470a:	d002      	beq.n	8004712 <temperature_to_base+0x22>
 800470c:	2b19      	cmp	r3, #25
 800470e:	d003      	beq.n	8004718 <temperature_to_base+0x28>
 8004710:	e018      	b.n	8004744 <temperature_to_base+0x54>
        case UNIT_CELSIUS:
            return value;  /* Base unit is Celsius */
 8004712:	edd7 7a01 	vldr	s15, [r7, #4]
 8004716:	e017      	b.n	8004748 <temperature_to_base+0x58>
        case UNIT_FAHRENHEIT:
            return (value - 32.0f) * 5.0f / 9.0f;
 8004718:	edd7 7a01 	vldr	s15, [r7, #4]
 800471c:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8004758 <temperature_to_base+0x68>
 8004720:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004724:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8004728:	ee27 7a87 	vmul.f32	s14, s15, s14
 800472c:	eef2 6a02 	vmov.f32	s13, #34	@ 0x41100000  9.0
 8004730:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004734:	e008      	b.n	8004748 <temperature_to_base+0x58>
        case UNIT_KELVIN:
            return value - 273.15f;
 8004736:	edd7 7a01 	vldr	s15, [r7, #4]
 800473a:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 800475c <temperature_to_base+0x6c>
 800473e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004742:	e001      	b.n	8004748 <temperature_to_base+0x58>
        default:
            return value;
 8004744:	edd7 7a01 	vldr	s15, [r7, #4]
    }
}
 8004748:	eeb0 0a67 	vmov.f32	s0, s15
 800474c:	370c      	adds	r7, #12
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr
 8004756:	bf00      	nop
 8004758:	42000000 	.word	0x42000000
 800475c:	43889333 	.word	0x43889333

08004760 <temperature_from_base>:

static float temperature_from_base(float value, Unit to_unit) {
 8004760:	b480      	push	{r7}
 8004762:	b083      	sub	sp, #12
 8004764:	af00      	add	r7, sp, #0
 8004766:	ed87 0a01 	vstr	s0, [r7, #4]
 800476a:	4603      	mov	r3, r0
 800476c:	70fb      	strb	r3, [r7, #3]
    switch (to_unit) {
 800476e:	78fb      	ldrb	r3, [r7, #3]
 8004770:	2b1a      	cmp	r3, #26
 8004772:	d018      	beq.n	80047a6 <temperature_from_base+0x46>
 8004774:	2b1a      	cmp	r3, #26
 8004776:	dc1d      	bgt.n	80047b4 <temperature_from_base+0x54>
 8004778:	2b18      	cmp	r3, #24
 800477a:	d002      	beq.n	8004782 <temperature_from_base+0x22>
 800477c:	2b19      	cmp	r3, #25
 800477e:	d003      	beq.n	8004788 <temperature_from_base+0x28>
 8004780:	e018      	b.n	80047b4 <temperature_from_base+0x54>
        case UNIT_CELSIUS:
            return value;  /* Base unit is Celsius */
 8004782:	edd7 7a01 	vldr	s15, [r7, #4]
 8004786:	e017      	b.n	80047b8 <temperature_from_base+0x58>
        case UNIT_FAHRENHEIT:
            return (value * 9.0f / 5.0f) + 32.0f;
 8004788:	edd7 7a01 	vldr	s15, [r7, #4]
 800478c:	eeb2 7a02 	vmov.f32	s14, #34	@ 0x41100000  9.0
 8004790:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004794:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 8004798:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800479c:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 80047c8 <temperature_from_base+0x68>
 80047a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80047a4:	e008      	b.n	80047b8 <temperature_from_base+0x58>
        case UNIT_KELVIN:
            return value + 273.15f;
 80047a6:	edd7 7a01 	vldr	s15, [r7, #4]
 80047aa:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 80047cc <temperature_from_base+0x6c>
 80047ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 80047b2:	e001      	b.n	80047b8 <temperature_from_base+0x58>
        default:
            return value;
 80047b4:	edd7 7a01 	vldr	s15, [r7, #4]
    }
}
 80047b8:	eeb0 0a67 	vmov.f32	s0, s15
 80047bc:	370c      	adds	r7, #12
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr
 80047c6:	bf00      	nop
 80047c8:	42000000 	.word	0x42000000
 80047cc:	43889333 	.word	0x43889333

080047d0 <init_length_converter>:

/* Initialize unit converters with conversion factors */
static void init_length_converter(UnitConverter *converter) {
 80047d0:	b480      	push	{r7}
 80047d2:	b085      	sub	sp, #20
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_LENGTH;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2200      	movs	r2, #0
 80047dc:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_M;  /* Meter is the base unit */
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2202      	movs	r2, #2
 80047e2:	705a      	strb	r2, [r3, #1]

    /* Initialize all conversion factors to 0.0 */
    for (int i = 0; i < UNIT_COUNT; i++) {
 80047e4:	2300      	movs	r3, #0
 80047e6:	60fb      	str	r3, [r7, #12]
 80047e8:	e00a      	b.n	8004800 <init_length_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 80047ea:	687a      	ldr	r2, [r7, #4]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	4413      	add	r3, r2
 80047f2:	3304      	adds	r3, #4
 80047f4:	f04f 0200 	mov.w	r2, #0
 80047f8:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	3301      	adds	r3, #1
 80047fe:	60fb      	str	r3, [r7, #12]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2b1a      	cmp	r3, #26
 8004804:	ddf1      	ble.n	80047ea <init_length_converter+0x1a>
    }

    /* Set conversion factors for length units (to convert to meters) */
    converter->conversion_factors[UNIT_MM] = 0.001f;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	4a11      	ldr	r2, [pc, #68]	@ (8004850 <init_length_converter+0x80>)
 800480a:	605a      	str	r2, [r3, #4]
    converter->conversion_factors[UNIT_CM] = 0.01f;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	4a11      	ldr	r2, [pc, #68]	@ (8004854 <init_length_converter+0x84>)
 8004810:	609a      	str	r2, [r3, #8]
    converter->conversion_factors[UNIT_M] = 1.0f;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004818:	60da      	str	r2, [r3, #12]
    converter->conversion_factors[UNIT_KM] = 1000.0f;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	4a0e      	ldr	r2, [pc, #56]	@ (8004858 <init_length_converter+0x88>)
 800481e:	611a      	str	r2, [r3, #16]
    converter->conversion_factors[UNIT_INCH] = 0.0254f;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	4a0e      	ldr	r2, [pc, #56]	@ (800485c <init_length_converter+0x8c>)
 8004824:	615a      	str	r2, [r3, #20]
    converter->conversion_factors[UNIT_FOOT] = 0.3048f;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4a0d      	ldr	r2, [pc, #52]	@ (8004860 <init_length_converter+0x90>)
 800482a:	619a      	str	r2, [r3, #24]
    converter->conversion_factors[UNIT_YARD] = 0.9144f;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	4a0d      	ldr	r2, [pc, #52]	@ (8004864 <init_length_converter+0x94>)
 8004830:	61da      	str	r2, [r3, #28]
    converter->conversion_factors[UNIT_MILE] = 1609.344f;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	4a0c      	ldr	r2, [pc, #48]	@ (8004868 <init_length_converter+0x98>)
 8004836:	621a      	str	r2, [r3, #32]

    converter->to_base = NULL;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2200      	movs	r2, #0
 800483c:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = NULL;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2200      	movs	r2, #0
 8004842:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004844:	bf00      	nop
 8004846:	3714      	adds	r7, #20
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr
 8004850:	3a83126f 	.word	0x3a83126f
 8004854:	3c23d70a 	.word	0x3c23d70a
 8004858:	447a0000 	.word	0x447a0000
 800485c:	3cd013a9 	.word	0x3cd013a9
 8004860:	3e9c0ebf 	.word	0x3e9c0ebf
 8004864:	3f6a161e 	.word	0x3f6a161e
 8004868:	44c92b02 	.word	0x44c92b02

0800486c <init_mass_converter>:

static void init_mass_converter(UnitConverter *converter) {
 800486c:	b480      	push	{r7}
 800486e:	b085      	sub	sp, #20
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_MASS;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2201      	movs	r2, #1
 8004878:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_KG;  /* Kilogram is the base unit */
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	220a      	movs	r2, #10
 800487e:	705a      	strb	r2, [r3, #1]

    /* Initialize all conversion factors to 0.0 */
    for (int i = 0; i < UNIT_COUNT; i++) {
 8004880:	2300      	movs	r3, #0
 8004882:	60fb      	str	r3, [r7, #12]
 8004884:	e00a      	b.n	800489c <init_mass_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	009b      	lsls	r3, r3, #2
 800488c:	4413      	add	r3, r2
 800488e:	3304      	adds	r3, #4
 8004890:	f04f 0200 	mov.w	r2, #0
 8004894:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	3301      	adds	r3, #1
 800489a:	60fb      	str	r3, [r7, #12]
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2b1a      	cmp	r3, #26
 80048a0:	ddf1      	ble.n	8004886 <init_mass_converter+0x1a>
    }

    /* Set conversion factors for mass units (to convert to kilograms) */
    converter->conversion_factors[UNIT_MG] = 0.000001f;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4a0e      	ldr	r2, [pc, #56]	@ (80048e0 <init_mass_converter+0x74>)
 80048a6:	625a      	str	r2, [r3, #36]	@ 0x24
    converter->conversion_factors[UNIT_G] = 0.001f;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	4a0e      	ldr	r2, [pc, #56]	@ (80048e4 <init_mass_converter+0x78>)
 80048ac:	629a      	str	r2, [r3, #40]	@ 0x28
    converter->conversion_factors[UNIT_KG] = 1.0f;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80048b4:	62da      	str	r2, [r3, #44]	@ 0x2c
    converter->conversion_factors[UNIT_TON] = 1000.0f;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	4a0b      	ldr	r2, [pc, #44]	@ (80048e8 <init_mass_converter+0x7c>)
 80048ba:	631a      	str	r2, [r3, #48]	@ 0x30
    converter->conversion_factors[UNIT_OZ] = 0.0283495f;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	4a0b      	ldr	r2, [pc, #44]	@ (80048ec <init_mass_converter+0x80>)
 80048c0:	635a      	str	r2, [r3, #52]	@ 0x34
    converter->conversion_factors[UNIT_LB] = 0.453592f;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	4a0a      	ldr	r2, [pc, #40]	@ (80048f0 <init_mass_converter+0x84>)
 80048c6:	639a      	str	r2, [r3, #56]	@ 0x38

    converter->to_base = NULL;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2200      	movs	r2, #0
 80048cc:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = NULL;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2200      	movs	r2, #0
 80048d2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80048d4:	bf00      	nop
 80048d6:	3714      	adds	r7, #20
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr
 80048e0:	358637bd 	.word	0x358637bd
 80048e4:	3a83126f 	.word	0x3a83126f
 80048e8:	447a0000 	.word	0x447a0000
 80048ec:	3ce83d36 	.word	0x3ce83d36
 80048f0:	3ee83d36 	.word	0x3ee83d36

080048f4 <init_angle_converter>:

static void init_angle_converter(UnitConverter *converter) {
 80048f4:	b480      	push	{r7}
 80048f6:	b085      	sub	sp, #20
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_ANGLE;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2202      	movs	r2, #2
 8004900:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_RADIAN;  /* Radian is the base unit */
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	220f      	movs	r2, #15
 8004906:	705a      	strb	r2, [r3, #1]

    /* Initialize all conversion factors to 0.0 */
    for (int i = 0; i < UNIT_COUNT; i++) {
 8004908:	2300      	movs	r3, #0
 800490a:	60fb      	str	r3, [r7, #12]
 800490c:	e00a      	b.n	8004924 <init_angle_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 800490e:	687a      	ldr	r2, [r7, #4]
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	4413      	add	r3, r2
 8004916:	3304      	adds	r3, #4
 8004918:	f04f 0200 	mov.w	r2, #0
 800491c:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	3301      	adds	r3, #1
 8004922:	60fb      	str	r3, [r7, #12]
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2b1a      	cmp	r3, #26
 8004928:	ddf1      	ble.n	800490e <init_angle_converter+0x1a>
    }

    /* Set conversion factors for angle units (to convert to radians) */
    converter->conversion_factors[UNIT_DEGREE] = M_PI / 180.0f;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	4a0a      	ldr	r2, [pc, #40]	@ (8004958 <init_angle_converter+0x64>)
 800492e:	63da      	str	r2, [r3, #60]	@ 0x3c
    converter->conversion_factors[UNIT_RADIAN] = 1.0f;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004936:	641a      	str	r2, [r3, #64]	@ 0x40
    converter->conversion_factors[UNIT_GRADIAN] = M_PI / 200.0f;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	4a08      	ldr	r2, [pc, #32]	@ (800495c <init_angle_converter+0x68>)
 800493c:	645a      	str	r2, [r3, #68]	@ 0x44

    converter->to_base = NULL;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2200      	movs	r2, #0
 8004942:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = NULL;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2200      	movs	r2, #0
 8004948:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800494a:	bf00      	nop
 800494c:	3714      	adds	r7, #20
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr
 8004956:	bf00      	nop
 8004958:	3c8efa35 	.word	0x3c8efa35
 800495c:	3c80adfd 	.word	0x3c80adfd

08004960 <init_time_converter>:

static void init_time_converter(UnitConverter *converter) {
 8004960:	b480      	push	{r7}
 8004962:	b085      	sub	sp, #20
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_TIME;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2203      	movs	r2, #3
 800496c:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_SECOND;  /* Second is the base unit */
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2214      	movs	r2, #20
 8004972:	705a      	strb	r2, [r3, #1]

    /* Initialize all conversion factors to 0.0 */
    for (int i = 0; i < UNIT_COUNT; i++) {
 8004974:	2300      	movs	r3, #0
 8004976:	60fb      	str	r3, [r7, #12]
 8004978:	e00a      	b.n	8004990 <init_time_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 800497a:	687a      	ldr	r2, [r7, #4]
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	009b      	lsls	r3, r3, #2
 8004980:	4413      	add	r3, r2
 8004982:	3304      	adds	r3, #4
 8004984:	f04f 0200 	mov.w	r2, #0
 8004988:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	3301      	adds	r3, #1
 800498e:	60fb      	str	r3, [r7, #12]
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2b1a      	cmp	r3, #26
 8004994:	ddf1      	ble.n	800497a <init_time_converter+0x1a>
    }

    /* Set conversion factors for time units (to convert to seconds) */
    converter->conversion_factors[UNIT_NANOSECOND] = 1e-9f;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	4a10      	ldr	r2, [pc, #64]	@ (80049dc <init_time_converter+0x7c>)
 800499a:	649a      	str	r2, [r3, #72]	@ 0x48
    converter->conversion_factors[UNIT_MICROSECOND] = 1e-6f;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	4a10      	ldr	r2, [pc, #64]	@ (80049e0 <init_time_converter+0x80>)
 80049a0:	64da      	str	r2, [r3, #76]	@ 0x4c
    converter->conversion_factors[UNIT_MILLISECOND] = 1e-3f;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	4a0f      	ldr	r2, [pc, #60]	@ (80049e4 <init_time_converter+0x84>)
 80049a6:	651a      	str	r2, [r3, #80]	@ 0x50
    converter->conversion_factors[UNIT_SECOND] = 1.0f;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80049ae:	655a      	str	r2, [r3, #84]	@ 0x54
    converter->conversion_factors[UNIT_MINUTE] = 60.0f;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	4a0d      	ldr	r2, [pc, #52]	@ (80049e8 <init_time_converter+0x88>)
 80049b4:	659a      	str	r2, [r3, #88]	@ 0x58
    converter->conversion_factors[UNIT_HOUR] = 3600.0f;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4a0c      	ldr	r2, [pc, #48]	@ (80049ec <init_time_converter+0x8c>)
 80049ba:	65da      	str	r2, [r3, #92]	@ 0x5c
    converter->conversion_factors[UNIT_DAY] = 86400.0f;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	4a0c      	ldr	r2, [pc, #48]	@ (80049f0 <init_time_converter+0x90>)
 80049c0:	661a      	str	r2, [r3, #96]	@ 0x60

    converter->to_base = NULL;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2200      	movs	r2, #0
 80049c6:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = NULL;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2200      	movs	r2, #0
 80049cc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80049ce:	bf00      	nop
 80049d0:	3714      	adds	r7, #20
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr
 80049da:	bf00      	nop
 80049dc:	3089705f 	.word	0x3089705f
 80049e0:	358637bd 	.word	0x358637bd
 80049e4:	3a83126f 	.word	0x3a83126f
 80049e8:	42700000 	.word	0x42700000
 80049ec:	45610000 	.word	0x45610000
 80049f0:	47a8c000 	.word	0x47a8c000

080049f4 <init_temperature_converter>:

static void init_temperature_converter(UnitConverter *converter) {
 80049f4:	b480      	push	{r7}
 80049f6:	b085      	sub	sp, #20
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_TEMPERATURE;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2204      	movs	r2, #4
 8004a00:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_CELSIUS;  /* Celsius is the base unit */
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2218      	movs	r2, #24
 8004a06:	705a      	strb	r2, [r3, #1]

    /* For temperature, all conversion factors are 0 because we use custom functions */
    for (int i = 0; i < UNIT_COUNT; i++) {
 8004a08:	2300      	movs	r3, #0
 8004a0a:	60fb      	str	r3, [r7, #12]
 8004a0c:	e00a      	b.n	8004a24 <init_temperature_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	4413      	add	r3, r2
 8004a16:	3304      	adds	r3, #4
 8004a18:	f04f 0200 	mov.w	r2, #0
 8004a1c:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	3301      	adds	r3, #1
 8004a22:	60fb      	str	r3, [r7, #12]
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2b1a      	cmp	r3, #26
 8004a28:	ddf1      	ble.n	8004a0e <init_temperature_converter+0x1a>
    }

    /* Set custom conversion functions for temperature */
    converter->to_base = temperature_to_base;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	4a05      	ldr	r2, [pc, #20]	@ (8004a44 <init_temperature_converter+0x50>)
 8004a2e:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = temperature_from_base;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	4a05      	ldr	r2, [pc, #20]	@ (8004a48 <init_temperature_converter+0x54>)
 8004a34:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004a36:	bf00      	nop
 8004a38:	3714      	adds	r7, #20
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr
 8004a42:	bf00      	nop
 8004a44:	080046f1 	.word	0x080046f1
 8004a48:	08004761 	.word	0x08004761

08004a4c <UnitConverter_init>:

/* Initialize the unit converter system */
void UnitConverter_init(UnitConverterSystem *system) {
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b082      	sub	sp, #8
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
    /* Initialize each unit type converter */
    init_length_converter(&system->converters[UNIT_TYPE_LENGTH]);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	4618      	mov	r0, r3
 8004a58:	f7ff feba 	bl	80047d0 <init_length_converter>
    init_mass_converter(&system->converters[UNIT_TYPE_MASS]);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	3378      	adds	r3, #120	@ 0x78
 8004a60:	4618      	mov	r0, r3
 8004a62:	f7ff ff03 	bl	800486c <init_mass_converter>
    init_angle_converter(&system->converters[UNIT_TYPE_ANGLE]);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	33f0      	adds	r3, #240	@ 0xf0
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f7ff ff42 	bl	80048f4 <init_angle_converter>
    init_time_converter(&system->converters[UNIT_TYPE_TIME]);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8004a76:	4618      	mov	r0, r3
 8004a78:	f7ff ff72 	bl	8004960 <init_time_converter>
    init_temperature_converter(&system->converters[UNIT_TYPE_TEMPERATURE]);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8004a82:	4618      	mov	r0, r3
 8004a84:	f7ff ffb6 	bl	80049f4 <init_temperature_converter>
}
 8004a88:	bf00      	nop
 8004a8a:	3708      	adds	r7, #8
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}

08004a90 <UnitConverter_get_unit_type>:

/* Get the unit type for a given unit */
UnitType UnitConverter_get_unit_type(Unit unit) {
 8004a90:	b480      	push	{r7}
 8004a92:	b083      	sub	sp, #12
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	4603      	mov	r3, r0
 8004a98:	71fb      	strb	r3, [r7, #7]
    if (unit < UNIT_COUNT) {
 8004a9a:	79fb      	ldrb	r3, [r7, #7]
 8004a9c:	2b1a      	cmp	r3, #26
 8004a9e:	d803      	bhi.n	8004aa8 <UnitConverter_get_unit_type+0x18>
        return unit_types[unit];
 8004aa0:	79fb      	ldrb	r3, [r7, #7]
 8004aa2:	4a05      	ldr	r2, [pc, #20]	@ (8004ab8 <UnitConverter_get_unit_type+0x28>)
 8004aa4:	5cd3      	ldrb	r3, [r2, r3]
 8004aa6:	e000      	b.n	8004aaa <UnitConverter_get_unit_type+0x1a>
    }
    return UNIT_TYPE_LENGTH; /* Default to length if invalid */
 8004aa8:	2300      	movs	r3, #0
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	370c      	adds	r7, #12
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr
 8004ab6:	bf00      	nop
 8004ab8:	20000318 	.word	0x20000318

08004abc <UnitConverter_convert>:

/* Convert a value from one unit to another */
float UnitConverter_convert(UnitConverterSystem *system, float value, Unit from_unit, Unit to_unit) {
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b088      	sub	sp, #32
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	60f8      	str	r0, [r7, #12]
 8004ac4:	ed87 0a02 	vstr	s0, [r7, #8]
 8004ac8:	460b      	mov	r3, r1
 8004aca:	71fb      	strb	r3, [r7, #7]
 8004acc:	4613      	mov	r3, r2
 8004ace:	71bb      	strb	r3, [r7, #6]
    /* Check if units are of the same type */
    UnitType from_type = UnitConverter_get_unit_type(from_unit);
 8004ad0:	79fb      	ldrb	r3, [r7, #7]
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f7ff ffdc 	bl	8004a90 <UnitConverter_get_unit_type>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	76fb      	strb	r3, [r7, #27]
    UnitType to_type = UnitConverter_get_unit_type(to_unit);
 8004adc:	79bb      	ldrb	r3, [r7, #6]
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f7ff ffd6 	bl	8004a90 <UnitConverter_get_unit_type>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	76bb      	strb	r3, [r7, #26]

    if (from_type != to_type) {
 8004ae8:	7efa      	ldrb	r2, [r7, #27]
 8004aea:	7ebb      	ldrb	r3, [r7, #26]
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d002      	beq.n	8004af6 <UnitConverter_convert+0x3a>
        /* Cannot convert between different unit types */
        return value;
 8004af0:	edd7 7a02 	vldr	s15, [r7, #8]
 8004af4:	e03b      	b.n	8004b6e <UnitConverter_convert+0xb2>
    }

    /* Get the appropriate converter */
    UnitConverter *converter = &system->converters[from_type];
 8004af6:	7efa      	ldrb	r2, [r7, #27]
 8004af8:	4613      	mov	r3, r2
 8004afa:	011b      	lsls	r3, r3, #4
 8004afc:	1a9b      	subs	r3, r3, r2
 8004afe:	00db      	lsls	r3, r3, #3
 8004b00:	68fa      	ldr	r2, [r7, #12]
 8004b02:	4413      	add	r3, r2
 8004b04:	617b      	str	r3, [r7, #20]

    /* Convert to base unit */
    float base_value;
    if (converter->to_base) {
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d009      	beq.n	8004b22 <UnitConverter_convert+0x66>
        /* Use custom function if available */
        base_value = converter->to_base(value, from_unit);
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b12:	79fa      	ldrb	r2, [r7, #7]
 8004b14:	4610      	mov	r0, r2
 8004b16:	ed97 0a02 	vldr	s0, [r7, #8]
 8004b1a:	4798      	blx	r3
 8004b1c:	ed87 0a07 	vstr	s0, [r7, #28]
 8004b20:	e00c      	b.n	8004b3c <UnitConverter_convert+0x80>
    } else {
        /* Use conversion factor */
        base_value = value * converter->conversion_factors[from_unit];
 8004b22:	79fb      	ldrb	r3, [r7, #7]
 8004b24:	697a      	ldr	r2, [r7, #20]
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	4413      	add	r3, r2
 8004b2a:	3304      	adds	r3, #4
 8004b2c:	edd3 7a00 	vldr	s15, [r3]
 8004b30:	ed97 7a02 	vldr	s14, [r7, #8]
 8004b34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b38:	edc7 7a07 	vstr	s15, [r7, #28]
    }

    /* Convert from base unit to target unit */
    if (converter->from_base) {
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d009      	beq.n	8004b58 <UnitConverter_convert+0x9c>
        /* Use custom function if available */
        return converter->from_base(base_value, to_unit);
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b48:	79ba      	ldrb	r2, [r7, #6]
 8004b4a:	4610      	mov	r0, r2
 8004b4c:	ed97 0a07 	vldr	s0, [r7, #28]
 8004b50:	4798      	blx	r3
 8004b52:	eef0 7a40 	vmov.f32	s15, s0
 8004b56:	e00a      	b.n	8004b6e <UnitConverter_convert+0xb2>
    } else {
        /* Use conversion factor */
        return base_value / converter->conversion_factors[to_unit];
 8004b58:	79bb      	ldrb	r3, [r7, #6]
 8004b5a:	697a      	ldr	r2, [r7, #20]
 8004b5c:	009b      	lsls	r3, r3, #2
 8004b5e:	4413      	add	r3, r2
 8004b60:	3304      	adds	r3, #4
 8004b62:	ed93 7a00 	vldr	s14, [r3]
 8004b66:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
    }
}
 8004b6e:	eeb0 0a67 	vmov.f32	s0, s15
 8004b72:	3720      	adds	r7, #32
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}

08004b78 <UnitConverter_angle>:
        return UnitConverter_convert(system, value, from_unit, to_unit);
    }
    return value;
}

float UnitConverter_angle(UnitConverterSystem *system, float value, Unit from_unit, Unit to_unit) {
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b084      	sub	sp, #16
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	60f8      	str	r0, [r7, #12]
 8004b80:	ed87 0a02 	vstr	s0, [r7, #8]
 8004b84:	460b      	mov	r3, r1
 8004b86:	71fb      	strb	r3, [r7, #7]
 8004b88:	4613      	mov	r3, r2
 8004b8a:	71bb      	strb	r3, [r7, #6]
    if (UnitConverter_get_unit_type(from_unit) == UNIT_TYPE_ANGLE &&
 8004b8c:	79fb      	ldrb	r3, [r7, #7]
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f7ff ff7e 	bl	8004a90 <UnitConverter_get_unit_type>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b02      	cmp	r3, #2
 8004b98:	d111      	bne.n	8004bbe <UnitConverter_angle+0x46>
        UnitConverter_get_unit_type(to_unit) == UNIT_TYPE_ANGLE) {
 8004b9a:	79bb      	ldrb	r3, [r7, #6]
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f7ff ff77 	bl	8004a90 <UnitConverter_get_unit_type>
 8004ba2:	4603      	mov	r3, r0
    if (UnitConverter_get_unit_type(from_unit) == UNIT_TYPE_ANGLE &&
 8004ba4:	2b02      	cmp	r3, #2
 8004ba6:	d10a      	bne.n	8004bbe <UnitConverter_angle+0x46>
        return UnitConverter_convert(system, value, from_unit, to_unit);
 8004ba8:	79ba      	ldrb	r2, [r7, #6]
 8004baa:	79fb      	ldrb	r3, [r7, #7]
 8004bac:	4619      	mov	r1, r3
 8004bae:	ed97 0a02 	vldr	s0, [r7, #8]
 8004bb2:	68f8      	ldr	r0, [r7, #12]
 8004bb4:	f7ff ff82 	bl	8004abc <UnitConverter_convert>
 8004bb8:	eef0 7a40 	vmov.f32	s15, s0
 8004bbc:	e001      	b.n	8004bc2 <UnitConverter_angle+0x4a>
    }
    return value;
 8004bbe:	edd7 7a02 	vldr	s15, [r7, #8]
}
 8004bc2:	eeb0 0a67 	vmov.f32	s0, s15
 8004bc6:	3710      	adds	r7, #16
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}

08004bcc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b08c      	sub	sp, #48	@ 0x30
 8004bd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8004bd2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	601a      	str	r2, [r3, #0]
 8004bda:	605a      	str	r2, [r3, #4]
 8004bdc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8004bde:	1d3b      	adds	r3, r7, #4
 8004be0:	2220      	movs	r2, #32
 8004be2:	2100      	movs	r1, #0
 8004be4:	4618      	mov	r0, r3
 8004be6:	f00e fa79 	bl	80130dc <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8004bea:	4b39      	ldr	r3, [pc, #228]	@ (8004cd0 <MX_ADC1_Init+0x104>)
 8004bec:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8004bf0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004bf2:	4b37      	ldr	r3, [pc, #220]	@ (8004cd0 <MX_ADC1_Init+0x104>)
 8004bf4:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8004bf8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004bfa:	4b35      	ldr	r3, [pc, #212]	@ (8004cd0 <MX_ADC1_Init+0x104>)
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004c00:	4b33      	ldr	r3, [pc, #204]	@ (8004cd0 <MX_ADC1_Init+0x104>)
 8004c02:	2200      	movs	r2, #0
 8004c04:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8004c06:	4b32      	ldr	r3, [pc, #200]	@ (8004cd0 <MX_ADC1_Init+0x104>)
 8004c08:	2200      	movs	r2, #0
 8004c0a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8004c0c:	4b30      	ldr	r3, [pc, #192]	@ (8004cd0 <MX_ADC1_Init+0x104>)
 8004c0e:	2201      	movs	r2, #1
 8004c10:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004c12:	4b2f      	ldr	r3, [pc, #188]	@ (8004cd0 <MX_ADC1_Init+0x104>)
 8004c14:	2204      	movs	r2, #4
 8004c16:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8004c18:	4b2d      	ldr	r3, [pc, #180]	@ (8004cd0 <MX_ADC1_Init+0x104>)
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8004c1e:	4b2c      	ldr	r3, [pc, #176]	@ (8004cd0 <MX_ADC1_Init+0x104>)
 8004c20:	2201      	movs	r2, #1
 8004c22:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 8004c24:	4b2a      	ldr	r3, [pc, #168]	@ (8004cd0 <MX_ADC1_Init+0x104>)
 8004c26:	2202      	movs	r2, #2
 8004c28:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004c2a:	4b29      	ldr	r3, [pc, #164]	@ (8004cd0 <MX_ADC1_Init+0x104>)
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004c32:	4b27      	ldr	r3, [pc, #156]	@ (8004cd0 <MX_ADC1_Init+0x104>)
 8004c34:	2200      	movs	r2, #0
 8004c36:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004c38:	4b25      	ldr	r3, [pc, #148]	@ (8004cd0 <MX_ADC1_Init+0x104>)
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8004c3e:	4b24      	ldr	r3, [pc, #144]	@ (8004cd0 <MX_ADC1_Init+0x104>)
 8004c40:	2201      	movs	r2, #1
 8004c42:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004c46:	4b22      	ldr	r3, [pc, #136]	@ (8004cd0 <MX_ADC1_Init+0x104>)
 8004c48:	2200      	movs	r2, #0
 8004c4a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8004c4c:	4b20      	ldr	r3, [pc, #128]	@ (8004cd0 <MX_ADC1_Init+0x104>)
 8004c4e:	2200      	movs	r2, #0
 8004c50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004c54:	481e      	ldr	r0, [pc, #120]	@ (8004cd0 <MX_ADC1_Init+0x104>)
 8004c56:	f006 fc13 	bl	800b480 <HAL_ADC_Init>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d001      	beq.n	8004c64 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8004c60:	f004 fbf8 	bl	8009454 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8004c64:	2300      	movs	r3, #0
 8004c66:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8004c68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004c6c:	4619      	mov	r1, r3
 8004c6e:	4818      	ldr	r0, [pc, #96]	@ (8004cd0 <MX_ADC1_Init+0x104>)
 8004c70:	f007 fd32 	bl	800c6d8 <HAL_ADCEx_MultiModeConfigChannel>
 8004c74:	4603      	mov	r3, r0
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d001      	beq.n	8004c7e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8004c7a:	f004 fbeb 	bl	8009454 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8004c7e:	4b15      	ldr	r3, [pc, #84]	@ (8004cd4 <MX_ADC1_Init+0x108>)
 8004c80:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004c82:	2306      	movs	r3, #6
 8004c84:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8004c86:	2307      	movs	r3, #7
 8004c88:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8004c8a:	237f      	movs	r3, #127	@ 0x7f
 8004c8c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004c8e:	2304      	movs	r3, #4
 8004c90:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8004c92:	2300      	movs	r3, #0
 8004c94:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004c96:	1d3b      	adds	r3, r7, #4
 8004c98:	4619      	mov	r1, r3
 8004c9a:	480d      	ldr	r0, [pc, #52]	@ (8004cd0 <MX_ADC1_Init+0x104>)
 8004c9c:	f006 fe9e 	bl	800b9dc <HAL_ADC_ConfigChannel>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d001      	beq.n	8004caa <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8004ca6:	f004 fbd5 	bl	8009454 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8004caa:	4b0b      	ldr	r3, [pc, #44]	@ (8004cd8 <MX_ADC1_Init+0x10c>)
 8004cac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8004cae:	230c      	movs	r3, #12
 8004cb0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004cb2:	1d3b      	adds	r3, r7, #4
 8004cb4:	4619      	mov	r1, r3
 8004cb6:	4806      	ldr	r0, [pc, #24]	@ (8004cd0 <MX_ADC1_Init+0x104>)
 8004cb8:	f006 fe90 	bl	800b9dc <HAL_ADC_ConfigChannel>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d001      	beq.n	8004cc6 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8004cc2:	f004 fbc7 	bl	8009454 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004cc6:	bf00      	nop
 8004cc8:	3730      	adds	r7, #48	@ 0x30
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
 8004cce:	bf00      	nop
 8004cd0:	20000638 	.word	0x20000638
 8004cd4:	19200040 	.word	0x19200040
 8004cd8:	1d500080 	.word	0x1d500080

08004cdc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b09e      	sub	sp, #120	@ 0x78
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ce4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004ce8:	2200      	movs	r2, #0
 8004cea:	601a      	str	r2, [r3, #0]
 8004cec:	605a      	str	r2, [r3, #4]
 8004cee:	609a      	str	r2, [r3, #8]
 8004cf0:	60da      	str	r2, [r3, #12]
 8004cf2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004cf4:	f107 0310 	add.w	r3, r7, #16
 8004cf8:	2254      	movs	r2, #84	@ 0x54
 8004cfa:	2100      	movs	r1, #0
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f00e f9ed 	bl	80130dc <memset>
  if(adcHandle->Instance==ADC1)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004d0a:	d15e      	bne.n	8004dca <HAL_ADC_MspInit+0xee>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8004d0c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d10:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8004d12:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8004d16:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004d18:	f107 0310 	add.w	r3, r7, #16
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	f009 f9eb 	bl	800e0f8 <HAL_RCCEx_PeriphCLKConfig>
 8004d22:	4603      	mov	r3, r0
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d001      	beq.n	8004d2c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8004d28:	f004 fb94 	bl	8009454 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8004d2c:	4b29      	ldr	r3, [pc, #164]	@ (8004dd4 <HAL_ADC_MspInit+0xf8>)
 8004d2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d30:	4a28      	ldr	r2, [pc, #160]	@ (8004dd4 <HAL_ADC_MspInit+0xf8>)
 8004d32:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004d36:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004d38:	4b26      	ldr	r3, [pc, #152]	@ (8004dd4 <HAL_ADC_MspInit+0xf8>)
 8004d3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d3c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004d40:	60fb      	str	r3, [r7, #12]
 8004d42:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004d44:	4b23      	ldr	r3, [pc, #140]	@ (8004dd4 <HAL_ADC_MspInit+0xf8>)
 8004d46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d48:	4a22      	ldr	r2, [pc, #136]	@ (8004dd4 <HAL_ADC_MspInit+0xf8>)
 8004d4a:	f043 0304 	orr.w	r3, r3, #4
 8004d4e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004d50:	4b20      	ldr	r3, [pc, #128]	@ (8004dd4 <HAL_ADC_MspInit+0xf8>)
 8004d52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d54:	f003 0304 	and.w	r3, r3, #4
 8004d58:	60bb      	str	r3, [r7, #8]
 8004d5a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN6
    PC1     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004d5c:	2303      	movs	r3, #3
 8004d5e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004d60:	2303      	movs	r3, #3
 8004d62:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d64:	2300      	movs	r3, #0
 8004d66:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004d68:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004d6c:	4619      	mov	r1, r3
 8004d6e:	481a      	ldr	r0, [pc, #104]	@ (8004dd8 <HAL_ADC_MspInit+0xfc>)
 8004d70:	f008 f9fc 	bl	800d16c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8004d74:	4b19      	ldr	r3, [pc, #100]	@ (8004ddc <HAL_ADC_MspInit+0x100>)
 8004d76:	4a1a      	ldr	r2, [pc, #104]	@ (8004de0 <HAL_ADC_MspInit+0x104>)
 8004d78:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8004d7a:	4b18      	ldr	r3, [pc, #96]	@ (8004ddc <HAL_ADC_MspInit+0x100>)
 8004d7c:	2205      	movs	r2, #5
 8004d7e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004d80:	4b16      	ldr	r3, [pc, #88]	@ (8004ddc <HAL_ADC_MspInit+0x100>)
 8004d82:	2200      	movs	r2, #0
 8004d84:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004d86:	4b15      	ldr	r3, [pc, #84]	@ (8004ddc <HAL_ADC_MspInit+0x100>)
 8004d88:	2200      	movs	r2, #0
 8004d8a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004d8c:	4b13      	ldr	r3, [pc, #76]	@ (8004ddc <HAL_ADC_MspInit+0x100>)
 8004d8e:	2280      	movs	r2, #128	@ 0x80
 8004d90:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004d92:	4b12      	ldr	r3, [pc, #72]	@ (8004ddc <HAL_ADC_MspInit+0x100>)
 8004d94:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004d98:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004d9a:	4b10      	ldr	r3, [pc, #64]	@ (8004ddc <HAL_ADC_MspInit+0x100>)
 8004d9c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004da0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004da2:	4b0e      	ldr	r3, [pc, #56]	@ (8004ddc <HAL_ADC_MspInit+0x100>)
 8004da4:	2220      	movs	r2, #32
 8004da6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004da8:	4b0c      	ldr	r3, [pc, #48]	@ (8004ddc <HAL_ADC_MspInit+0x100>)
 8004daa:	2200      	movs	r2, #0
 8004dac:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004dae:	480b      	ldr	r0, [pc, #44]	@ (8004ddc <HAL_ADC_MspInit+0x100>)
 8004db0:	f007 feaa 	bl	800cb08 <HAL_DMA_Init>
 8004db4:	4603      	mov	r3, r0
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d001      	beq.n	8004dbe <HAL_ADC_MspInit+0xe2>
    {
      Error_Handler();
 8004dba:	f004 fb4b 	bl	8009454 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	4a06      	ldr	r2, [pc, #24]	@ (8004ddc <HAL_ADC_MspInit+0x100>)
 8004dc2:	655a      	str	r2, [r3, #84]	@ 0x54
 8004dc4:	4a05      	ldr	r2, [pc, #20]	@ (8004ddc <HAL_ADC_MspInit+0x100>)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8004dca:	bf00      	nop
 8004dcc:	3778      	adds	r7, #120	@ 0x78
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}
 8004dd2:	bf00      	nop
 8004dd4:	40021000 	.word	0x40021000
 8004dd8:	48000800 	.word	0x48000800
 8004ddc:	200006a4 	.word	0x200006a4
 8004de0:	40020008 	.word	0x40020008

08004de4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b082      	sub	sp, #8
 8004de8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8004dea:	4b22      	ldr	r3, [pc, #136]	@ (8004e74 <MX_DMA_Init+0x90>)
 8004dec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004dee:	4a21      	ldr	r2, [pc, #132]	@ (8004e74 <MX_DMA_Init+0x90>)
 8004df0:	f043 0304 	orr.w	r3, r3, #4
 8004df4:	6493      	str	r3, [r2, #72]	@ 0x48
 8004df6:	4b1f      	ldr	r3, [pc, #124]	@ (8004e74 <MX_DMA_Init+0x90>)
 8004df8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004dfa:	f003 0304 	and.w	r3, r3, #4
 8004dfe:	607b      	str	r3, [r7, #4]
 8004e00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004e02:	4b1c      	ldr	r3, [pc, #112]	@ (8004e74 <MX_DMA_Init+0x90>)
 8004e04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e06:	4a1b      	ldr	r2, [pc, #108]	@ (8004e74 <MX_DMA_Init+0x90>)
 8004e08:	f043 0301 	orr.w	r3, r3, #1
 8004e0c:	6493      	str	r3, [r2, #72]	@ 0x48
 8004e0e:	4b19      	ldr	r3, [pc, #100]	@ (8004e74 <MX_DMA_Init+0x90>)
 8004e10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e12:	f003 0301 	and.w	r3, r3, #1
 8004e16:	603b      	str	r3, [r7, #0]
 8004e18:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	2100      	movs	r1, #0
 8004e1e:	200b      	movs	r0, #11
 8004e20:	f007 fe3d 	bl	800ca9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8004e24:	200b      	movs	r0, #11
 8004e26:	f007 fe54 	bl	800cad2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	2100      	movs	r1, #0
 8004e2e:	200c      	movs	r0, #12
 8004e30:	f007 fe35 	bl	800ca9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8004e34:	200c      	movs	r0, #12
 8004e36:	f007 fe4c 	bl	800cad2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	2100      	movs	r1, #0
 8004e3e:	200d      	movs	r0, #13
 8004e40:	f007 fe2d 	bl	800ca9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8004e44:	200d      	movs	r0, #13
 8004e46:	f007 fe44 	bl	800cad2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	2100      	movs	r1, #0
 8004e4e:	200e      	movs	r0, #14
 8004e50:	f007 fe25 	bl	800ca9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8004e54:	200e      	movs	r0, #14
 8004e56:	f007 fe3c 	bl	800cad2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	2100      	movs	r1, #0
 8004e5e:	200f      	movs	r0, #15
 8004e60:	f007 fe1d 	bl	800ca9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8004e64:	200f      	movs	r0, #15
 8004e66:	f007 fe34 	bl	800cad2 <HAL_NVIC_EnableIRQ>

}
 8004e6a:	bf00      	nop
 8004e6c:	3708      	adds	r7, #8
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
 8004e72:	bf00      	nop
 8004e74:	40021000 	.word	0x40021000

08004e78 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b08a      	sub	sp, #40	@ 0x28
 8004e7c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e7e:	f107 0314 	add.w	r3, r7, #20
 8004e82:	2200      	movs	r2, #0
 8004e84:	601a      	str	r2, [r3, #0]
 8004e86:	605a      	str	r2, [r3, #4]
 8004e88:	609a      	str	r2, [r3, #8]
 8004e8a:	60da      	str	r2, [r3, #12]
 8004e8c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004e8e:	4b7c      	ldr	r3, [pc, #496]	@ (8005080 <MX_GPIO_Init+0x208>)
 8004e90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e92:	4a7b      	ldr	r2, [pc, #492]	@ (8005080 <MX_GPIO_Init+0x208>)
 8004e94:	f043 0304 	orr.w	r3, r3, #4
 8004e98:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004e9a:	4b79      	ldr	r3, [pc, #484]	@ (8005080 <MX_GPIO_Init+0x208>)
 8004e9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e9e:	f003 0304 	and.w	r3, r3, #4
 8004ea2:	613b      	str	r3, [r7, #16]
 8004ea4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004ea6:	4b76      	ldr	r3, [pc, #472]	@ (8005080 <MX_GPIO_Init+0x208>)
 8004ea8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004eaa:	4a75      	ldr	r2, [pc, #468]	@ (8005080 <MX_GPIO_Init+0x208>)
 8004eac:	f043 0320 	orr.w	r3, r3, #32
 8004eb0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004eb2:	4b73      	ldr	r3, [pc, #460]	@ (8005080 <MX_GPIO_Init+0x208>)
 8004eb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004eb6:	f003 0320 	and.w	r3, r3, #32
 8004eba:	60fb      	str	r3, [r7, #12]
 8004ebc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ebe:	4b70      	ldr	r3, [pc, #448]	@ (8005080 <MX_GPIO_Init+0x208>)
 8004ec0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ec2:	4a6f      	ldr	r2, [pc, #444]	@ (8005080 <MX_GPIO_Init+0x208>)
 8004ec4:	f043 0301 	orr.w	r3, r3, #1
 8004ec8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004eca:	4b6d      	ldr	r3, [pc, #436]	@ (8005080 <MX_GPIO_Init+0x208>)
 8004ecc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ece:	f003 0301 	and.w	r3, r3, #1
 8004ed2:	60bb      	str	r3, [r7, #8]
 8004ed4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ed6:	4b6a      	ldr	r3, [pc, #424]	@ (8005080 <MX_GPIO_Init+0x208>)
 8004ed8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004eda:	4a69      	ldr	r2, [pc, #420]	@ (8005080 <MX_GPIO_Init+0x208>)
 8004edc:	f043 0302 	orr.w	r3, r3, #2
 8004ee0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004ee2:	4b67      	ldr	r3, [pc, #412]	@ (8005080 <MX_GPIO_Init+0x208>)
 8004ee4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ee6:	f003 0302 	and.w	r3, r3, #2
 8004eea:	607b      	str	r3, [r7, #4]
 8004eec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9|PILOT_Pin, GPIO_PIN_RESET);
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 8004ef4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004ef8:	f008 fad2 	bl	800d4a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8004efc:	2200      	movs	r2, #0
 8004efe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004f02:	4860      	ldr	r0, [pc, #384]	@ (8005084 <MX_GPIO_Init+0x20c>)
 8004f04:	f008 facc 	bl	800d4a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8004f08:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004f0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004f0e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004f12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f14:	2300      	movs	r3, #0
 8004f16:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004f18:	f107 0314 	add.w	r3, r7, #20
 8004f1c:	4619      	mov	r1, r3
 8004f1e:	4859      	ldr	r0, [pc, #356]	@ (8005084 <MX_GPIO_Init+0x20c>)
 8004f20:	f008 f924 	bl	800d16c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA9 PILOT_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_9|PILOT_Pin;
 8004f24:	f44f 63c4 	mov.w	r3, #1568	@ 0x620
 8004f28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f32:	2300      	movs	r3, #0
 8004f34:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f36:	f107 0314 	add.w	r3, r7, #20
 8004f3a:	4619      	mov	r1, r3
 8004f3c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004f40:	f008 f914 	bl	800d16c <HAL_GPIO_Init>

  /*Configure GPIO pins : UPPER_PHOTO_Pin LOWER_PHOTO_Pin */
  GPIO_InitStruct.Pin = UPPER_PHOTO_Pin|LOWER_PHOTO_Pin;
 8004f44:	f241 0301 	movw	r3, #4097	@ 0x1001
 8004f48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004f4a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004f4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f50:	2300      	movs	r3, #0
 8004f52:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f54:	f107 0314 	add.w	r3, r7, #20
 8004f58:	4619      	mov	r1, r3
 8004f5a:	484b      	ldr	r0, [pc, #300]	@ (8005088 <MX_GPIO_Init+0x210>)
 8004f5c:	f008 f906 	bl	800d16c <HAL_GPIO_Init>

  /*Configure GPIO pins : LOWER_LIM_Pin UPPER_LIM_Pin */
  GPIO_InitStruct.Pin = LOWER_LIM_Pin|UPPER_LIM_Pin;
 8004f60:	2306      	movs	r3, #6
 8004f62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004f64:	2300      	movs	r3, #0
 8004f66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004f68:	2302      	movs	r3, #2
 8004f6a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f6c:	f107 0314 	add.w	r3, r7, #20
 8004f70:	4619      	mov	r1, r3
 8004f72:	4845      	ldr	r0, [pc, #276]	@ (8005088 <MX_GPIO_Init+0x210>)
 8004f74:	f008 f8fa 	bl	800d16c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004f78:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004f7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f82:	2300      	movs	r3, #0
 8004f84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f86:	2300      	movs	r3, #0
 8004f88:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f8a:	f107 0314 	add.w	r3, r7, #20
 8004f8e:	4619      	mov	r1, r3
 8004f90:	483c      	ldr	r0, [pc, #240]	@ (8005084 <MX_GPIO_Init+0x20c>)
 8004f92:	f008 f8eb 	bl	800d16c <HAL_GPIO_Init>

  /*Configure GPIO pin : upperphoto_Pin */
  GPIO_InitStruct.Pin = upperphoto_Pin;
 8004f96:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004f9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004f9c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004fa0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(upperphoto_GPIO_Port, &GPIO_InitStruct);
 8004fa6:	f107 0314 	add.w	r3, r7, #20
 8004faa:	4619      	mov	r1, r3
 8004fac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004fb0:	f008 f8dc 	bl	800d16c <HAL_GPIO_Init>

  /*Configure GPIO pins : J3_Pin J4_Pin */
  GPIO_InitStruct.Pin = J3_Pin|J4_Pin;
 8004fb4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004fb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004fba:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004fbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004fc0:	2302      	movs	r3, #2
 8004fc2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004fc4:	f107 0314 	add.w	r3, r7, #20
 8004fc8:	4619      	mov	r1, r3
 8004fca:	482e      	ldr	r0, [pc, #184]	@ (8005084 <MX_GPIO_Init+0x20c>)
 8004fcc:	f008 f8ce 	bl	800d16c <HAL_GPIO_Init>

  /*Configure GPIO pin : J2_Pin */
  GPIO_InitStruct.Pin = J2_Pin;
 8004fd0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004fd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004fda:	2302      	movs	r3, #2
 8004fdc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(J2_GPIO_Port, &GPIO_InitStruct);
 8004fde:	f107 0314 	add.w	r3, r7, #20
 8004fe2:	4619      	mov	r1, r3
 8004fe4:	4827      	ldr	r0, [pc, #156]	@ (8005084 <MX_GPIO_Init+0x20c>)
 8004fe6:	f008 f8c1 	bl	800d16c <HAL_GPIO_Init>

  /*Configure GPIO pin : EMER_Pin */
  GPIO_InitStruct.Pin = EMER_Pin;
 8004fea:	2310      	movs	r3, #16
 8004fec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004fee:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8004ff2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EMER_GPIO_Port, &GPIO_InitStruct);
 8004ff8:	f107 0314 	add.w	r3, r7, #20
 8004ffc:	4619      	mov	r1, r3
 8004ffe:	4822      	ldr	r0, [pc, #136]	@ (8005088 <MX_GPIO_Init+0x210>)
 8005000:	f008 f8b4 	bl	800d16c <HAL_GPIO_Init>

  /*Configure GPIO pins : prox_Pin PROX_Pin */
  GPIO_InitStruct.Pin = prox_Pin|PROX_Pin;
 8005004:	2360      	movs	r3, #96	@ 0x60
 8005006:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005008:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800500c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800500e:	2301      	movs	r3, #1
 8005010:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005012:	f107 0314 	add.w	r3, r7, #20
 8005016:	4619      	mov	r1, r3
 8005018:	481b      	ldr	r0, [pc, #108]	@ (8005088 <MX_GPIO_Init+0x210>)
 800501a:	f008 f8a7 	bl	800d16c <HAL_GPIO_Init>

  /*Configure GPIO pin : J1_Pin */
  GPIO_InitStruct.Pin = J1_Pin;
 800501e:	2380      	movs	r3, #128	@ 0x80
 8005020:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005022:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8005026:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005028:	2302      	movs	r3, #2
 800502a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(J1_GPIO_Port, &GPIO_InitStruct);
 800502c:	f107 0314 	add.w	r3, r7, #20
 8005030:	4619      	mov	r1, r3
 8005032:	4815      	ldr	r0, [pc, #84]	@ (8005088 <MX_GPIO_Init+0x210>)
 8005034:	f008 f89a 	bl	800d16c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8005038:	2200      	movs	r2, #0
 800503a:	2100      	movs	r1, #0
 800503c:	2006      	movs	r0, #6
 800503e:	f007 fd2e 	bl	800ca9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8005042:	2006      	movs	r0, #6
 8005044:	f007 fd45 	bl	800cad2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8005048:	2200      	movs	r2, #0
 800504a:	2100      	movs	r1, #0
 800504c:	200a      	movs	r0, #10
 800504e:	f007 fd26 	bl	800ca9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8005052:	200a      	movs	r0, #10
 8005054:	f007 fd3d 	bl	800cad2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8005058:	2200      	movs	r2, #0
 800505a:	2100      	movs	r1, #0
 800505c:	2017      	movs	r0, #23
 800505e:	f007 fd1e 	bl	800ca9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8005062:	2017      	movs	r0, #23
 8005064:	f007 fd35 	bl	800cad2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8005068:	2200      	movs	r2, #0
 800506a:	2100      	movs	r1, #0
 800506c:	2028      	movs	r0, #40	@ 0x28
 800506e:	f007 fd16 	bl	800ca9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8005072:	2028      	movs	r0, #40	@ 0x28
 8005074:	f007 fd2d 	bl	800cad2 <HAL_NVIC_EnableIRQ>

}
 8005078:	bf00      	nop
 800507a:	3728      	adds	r7, #40	@ 0x28
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}
 8005080:	40021000 	.word	0x40021000
 8005084:	48000800 	.word	0x48000800
 8005088:	48000400 	.word	0x48000400

0800508c <SteadyStateKalmanFilter>:
//arm_matrix_instance_f32 R_matrix;
//arm_matrix_instance_f32 Z_matrix;
//arm_matrix_instance_f32 Velocity_matrix;


float SteadyStateKalmanFilter(KalmanFilter* filter, float32_t Vin,float32_t Velocity){
 800508c:	b580      	push	{r7, lr}
 800508e:	b096      	sub	sp, #88	@ 0x58
 8005090:	af00      	add	r7, sp, #0
 8005092:	60f8      	str	r0, [r7, #12]
 8005094:	ed87 0a02 	vstr	s0, [r7, #8]
 8005098:	edc7 0a01 	vstr	s1, [r7, #4]
	  arm_mat_init_f32(&filter->Velocity_matrix, 1, 1,(float32_t*) &Velocity);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	f503 705d 	add.w	r0, r3, #884	@ 0x374
 80050a2:	1d3b      	adds	r3, r7, #4
 80050a4:	2201      	movs	r2, #1
 80050a6:	2101      	movs	r1, #1
 80050a8:	f00d faa7 	bl	80125fa <arm_mat_init_f32>
	  arm_mat_trans_f32(&filter->A_matrix, &filter->A_transpose_matrix);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f503 722d 	add.w	r2, r3, #692	@ 0x2b4
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	f503 732f 	add.w	r3, r3, #700	@ 0x2bc
 80050b8:	4619      	mov	r1, r3
 80050ba:	4610      	mov	r0, r2
 80050bc:	f00d ff17 	bl	8012eee <arm_mat_trans_f32>
	  arm_mat_trans_f32(&filter->C_matrix, &filter->C_transpose_matrix);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f503 7235 	add.w	r2, r3, #724	@ 0x2d4
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	f503 7337 	add.w	r3, r3, #732	@ 0x2dc
 80050cc:	4619      	mov	r1, r3
 80050ce:	4610      	mov	r0, r2
 80050d0:	f00d ff0d 	bl	8012eee <arm_mat_trans_f32>
	  arm_mat_trans_f32(&filter->G_matrix, &filter->G_transpose_matrix);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f503 7239 	add.w	r2, r3, #740	@ 0x2e4
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	f503 733b 	add.w	r3, r3, #748	@ 0x2ec
 80050e0:	4619      	mov	r1, r3
 80050e2:	4610      	mov	r0, r2
 80050e4:	f00d ff03 	bl	8012eee <arm_mat_trans_f32>
	  // Compute Xk = Ax + Bu
	  arm_mat_scale_f32(&filter->B_matrix, Vin, &filter->Bu_matrix); 		   				// Bu
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	f503 7233 	add.w	r2, r3, #716	@ 0x2cc
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	f503 7343 	add.w	r3, r3, #780	@ 0x30c
 80050f4:	4619      	mov	r1, r3
 80050f6:	ed97 0a02 	vldr	s0, [r7, #8]
 80050fa:	4610      	mov	r0, r2
 80050fc:	f00d fe86 	bl	8012e0c <arm_mat_scale_f32>
	  arm_mat_mult_f32(&filter->A_matrix, &filter->X_k_matrix, &filter->Ax_matrix);  		   		// Ax
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f503 702d 	add.w	r0, r3, #692	@ 0x2b4
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	f503 7129 	add.w	r1, r3, #676	@ 0x2a4
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f503 7345 	add.w	r3, r3, #788	@ 0x314
 8005112:	461a      	mov	r2, r3
 8005114:	f00d fe00 	bl	8012d18 <arm_mat_mult_f32>
	  arm_mat_add_f32(&filter->Ax_matrix, &filter->Bu_matrix, &filter->X_k_matrix); 		   		// Xk = Ax + Bu
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f503 7045 	add.w	r0, r3, #788	@ 0x314
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	f503 7143 	add.w	r1, r3, #780	@ 0x30c
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f503 7329 	add.w	r3, r3, #676	@ 0x2a4
 800512a:	461a      	mov	r2, r3
 800512c:	f00d fa2a 	bl	8012584 <arm_mat_add_f32>

	  // Compute (A * P_pk * A^T + G * Q * G^T)
	  arm_mat_mult_f32(&filter->A_matrix, &filter->P_k_matrix, &filter->P_k_matrix);  		   		// Pk = A * P_pk
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f503 702d 	add.w	r0, r3, #692	@ 0x2b4
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	f503 712b 	add.w	r1, r3, #684	@ 0x2ac
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f503 732b 	add.w	r3, r3, #684	@ 0x2ac
 8005142:	461a      	mov	r2, r3
 8005144:	f00d fde8 	bl	8012d18 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->P_k_matrix, &filter->A_transpose_matrix, &filter->P_k_matrix); 		// Pk = A * P_pk * A^T
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	f503 712f 	add.w	r1, r3, #700	@ 0x2bc
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f503 732b 	add.w	r3, r3, #684	@ 0x2ac
 800515a:	461a      	mov	r2, r3
 800515c:	f00d fddc 	bl	8012d18 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->G_matrix, &filter->G_transpose_matrix, &filter->GGT_matrix);        // G * G^T
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	f503 7039 	add.w	r0, r3, #740	@ 0x2e4
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	f503 713b 	add.w	r1, r3, #748	@ 0x2ec
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f503 733f 	add.w	r3, r3, #764	@ 0x2fc
 8005172:	461a      	mov	r2, r3
 8005174:	f00d fdd0 	bl	8012d18 <arm_mat_mult_f32>
	  arm_mat_scale_f32(&filter->GGT_matrix, filter->Q, &filter->GQGT_matrix); 				   	   	// G * Q
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f503 723f 	add.w	r2, r3, #764	@ 0x2fc
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	edd3 7a30 	vldr	s15, [r3, #192]	@ 0xc0
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 800518a:	4619      	mov	r1, r3
 800518c:	eeb0 0a67 	vmov.f32	s0, s15
 8005190:	4610      	mov	r0, r2
 8005192:	f00d fe3b 	bl	8012e0c <arm_mat_scale_f32>
	  arm_mat_add_f32(&filter->P_k_matrix, &filter->GQGT_matrix, &filter->P_k_matrix); 	       		// A * P_pk * A^T + G * Q * G^T
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f503 7141 	add.w	r1, r3, #772	@ 0x304
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	f503 732b 	add.w	r3, r3, #684	@ 0x2ac
 80051a8:	461a      	mov	r2, r3
 80051aa:	f00d f9eb 	bl	8012584 <arm_mat_add_f32>

	  // Compute (C * P_k * C^T + R)
	  arm_mat_mult_f32(&filter->C_matrix, &filter->P_k_matrix, &filter->CP_matrix);			     // C * Pk
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f503 712b 	add.w	r1, r3, #684	@ 0x2ac
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	f503 7347 	add.w	r3, r3, #796	@ 0x31c
 80051c0:	461a      	mov	r2, r3
 80051c2:	f00d fda9 	bl	8012d18 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->CP_matrix, &filter->C_transpose_matrix, &filter->CPCT_matrix);   // C * Pk * C^T
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	f503 7047 	add.w	r0, r3, #796	@ 0x31c
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f503 7137 	add.w	r1, r3, #732	@ 0x2dc
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	f503 7349 	add.w	r3, r3, #804	@ 0x324
 80051d8:	461a      	mov	r2, r3
 80051da:	f00d fd9d 	bl	8012d18 <arm_mat_mult_f32>
	  arm_mat_add_f32(&filter->CPCT_matrix, &filter->R_matrix, &filter->CPCTR_matrix);			 // C * P_k * C^T + R
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	f503 7049 	add.w	r0, r3, #804	@ 0x324
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f503 7159 	add.w	r1, r3, #868	@ 0x364
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	f503 734b 	add.w	r3, r3, #812	@ 0x32c
 80051f0:	461a      	mov	r2, r3
 80051f2:	f00d f9c7 	bl	8012584 <arm_mat_add_f32>

	  // Compute inverse of (C * P_k * C^T + R)
	  arm_mat_inverse_f32(&filter->CPCTR_matrix, &filter->CPCTRinv_matrix);					 // inverse of (C * P_k * C^T + R)
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	f503 724b 	add.w	r2, r3, #812	@ 0x32c
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f503 7351 	add.w	r3, r3, #836	@ 0x344
 8005202:	4619      	mov	r1, r3
 8005204:	4610      	mov	r0, r2
 8005206:	f00d fa10 	bl	801262a <arm_mat_inverse_f32>

	  // Compute Kalman Gain: K = P_k * C^T * inv(C * P_k * C^T + R)
	  arm_mat_mult_f32(&filter->P_k_matrix, &filter->C_transpose_matrix, &filter->PCT_matrix); 		 // P_k * C^T
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f503 7137 	add.w	r1, r3, #732	@ 0x2dc
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	f503 734f 	add.w	r3, r3, #828	@ 0x33c
 800521c:	461a      	mov	r2, r3
 800521e:	f00d fd7b 	bl	8012d18 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->PCT_matrix, &filter->CPCTRinv_matrix, &filter->K_matrix);  			 // P_k * C^T * inv(C * P_k * C^T + R)
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	f503 704f 	add.w	r0, r3, #828	@ 0x33c
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f503 7151 	add.w	r1, r3, #836	@ 0x344
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	f503 734d 	add.w	r3, r3, #820	@ 0x334
 8005234:	461a      	mov	r2, r3
 8005236:	f00d fd6f 	bl	8012d18 <arm_mat_mult_f32>

	  // Computation of the estimated state
	  arm_mat_mult_f32(&filter->C_matrix, &filter->X_k_matrix, &filter->Cx_matrix);				 // C * X_k
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f503 7129 	add.w	r1, r3, #676	@ 0x2a4
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	f503 7353 	add.w	r3, r3, #844	@ 0x34c
 800524c:	461a      	mov	r2, r3
 800524e:	f00d fd63 	bl	8012d18 <arm_mat_mult_f32>
	  arm_mat_sub_f32(&filter->Velocity_matrix,  &filter->Cx_matrix, &filter->yCx_matrix);			  // y - ( C * X_k )
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	f503 705d 	add.w	r0, r3, #884	@ 0x374
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	f503 7153 	add.w	r1, r3, #844	@ 0x34c
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	f503 7355 	add.w	r3, r3, #852	@ 0x354
 8005264:	461a      	mov	r2, r3
 8005266:	f00d fe07 	bl	8012e78 <arm_mat_sub_f32>
	  arm_mat_mult_f32(&filter->K_matrix, &filter->yCx_matrix, &filter->KyCx_matrix);		     // K( y - ( C * X_k ) )
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	f503 704d 	add.w	r0, r3, #820	@ 0x334
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f503 7155 	add.w	r1, r3, #852	@ 0x354
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	f503 7357 	add.w	r3, r3, #860	@ 0x35c
 800527c:	461a      	mov	r2, r3
 800527e:	f00d fd4b 	bl	8012d18 <arm_mat_mult_f32>
	  arm_mat_add_f32(&filter->X_k_matrix, &filter->KyCx_matrix, &filter->X_k_matrix);		 	 // X_k + K( y - ( C * X_k ) )
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	f503 7029 	add.w	r0, r3, #676	@ 0x2a4
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f503 7157 	add.w	r1, r3, #860	@ 0x35c
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	f503 7329 	add.w	r3, r3, #676	@ 0x2a4
 8005294:	461a      	mov	r2, r3
 8005296:	f00d f975 	bl	8012584 <arm_mat_add_f32>

	  // Computation of the estimated output
	  arm_mat_mult_f32(&filter->C_matrix, &filter->X_k_matrix, &filter->Output_matrix);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f503 7129 	add.w	r1, r3, #676	@ 0x2a4
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	f503 733d 	add.w	r3, r3, #756	@ 0x2f4
 80052ac:	461a      	mov	r2, r3
 80052ae:	f00d fd33 	bl	8012d18 <arm_mat_mult_f32>

	  // Computation of the state covariance error
	  arm_matrix_instance_f32 temp_matrix4;
	  float32_t temp_data4[16];
	  arm_mat_init_f32(&temp_matrix4, 4, 4,(float32_t*) &temp_data4);
 80052b2:	f107 0310 	add.w	r3, r7, #16
 80052b6:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 80052ba:	2204      	movs	r2, #4
 80052bc:	2104      	movs	r1, #4
 80052be:	f00d f99c 	bl	80125fa <arm_mat_init_f32>

	  arm_mat_mult_f32(&filter->K_matrix, &filter->C_matrix, &temp_matrix4);				// K * C
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	f503 704d 	add.w	r0, r3, #820	@ 0x334
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f503 7335 	add.w	r3, r3, #724	@ 0x2d4
 80052ce:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 80052d2:	4619      	mov	r1, r3
 80052d4:	f00d fd20 	bl	8012d18 <arm_mat_mult_f32>
	  arm_mat_sub_f32(&filter->eye_matrix, &temp_matrix4, &temp_matrix4);			// (I - (K * C))
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f503 7331 	add.w	r3, r3, #708	@ 0x2c4
 80052de:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 80052e2:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 80052e6:	4618      	mov	r0, r3
 80052e8:	f00d fdc6 	bl	8012e78 <arm_mat_sub_f32>
	  arm_mat_mult_f32(&temp_matrix4, &filter->P_k_matrix, &filter->P_k_matrix);			// (I - (K * C)) * P_k
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f503 712b 	add.w	r1, r3, #684	@ 0x2ac
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	f503 722b 	add.w	r2, r3, #684	@ 0x2ac
 80052f8:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80052fc:	4618      	mov	r0, r3
 80052fe:	f00d fd0b 	bl	8012d18 <arm_mat_mult_f32>
	  filter->Kalman_Speed = filter->X_k[1];
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	685a      	ldr	r2, [r3, #4]
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
	  return  filter->Kalman_Speed;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8005312:	ee07 3a90 	vmov	s15, r3
}
 8005316:	eeb0 0a67 	vmov.f32	s0, s15
 800531a:	3758      	adds	r7, #88	@ 0x58
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}

08005320 <Kalman_Start>:

void Kalman_Start(KalmanFilter* filter, float32_t* A_matrix, float32_t* B_matrix, float32_t Q, float32_t R){
 8005320:	b5b0      	push	{r4, r5, r7, lr}
 8005322:	b0a4      	sub	sp, #144	@ 0x90
 8005324:	af00      	add	r7, sp, #0
 8005326:	6178      	str	r0, [r7, #20]
 8005328:	6139      	str	r1, [r7, #16]
 800532a:	60fa      	str	r2, [r7, #12]
 800532c:	ed87 0a02 	vstr	s0, [r7, #8]
 8005330:	edc7 0a01 	vstr	s1, [r7, #4]
	filter->Q = Q; //1.0
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	68ba      	ldr	r2, [r7, #8]
 8005338:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
	filter->R[0] = R; //0.05
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4

	float32_t c[4] = {1.0f, 0.0f, 0.0f, 0.0f};
 8005344:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8005348:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800534a:	f04f 0300 	mov.w	r3, #0
 800534e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005352:	f04f 0300 	mov.w	r3, #0
 8005356:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800535a:	f04f 0300 	mov.w	r3, #0
 800535e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

	float32_t g[4] = {0.0f,
 8005362:	f04f 0300 	mov.w	r3, #0
 8005366:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005368:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800536c:	673b      	str	r3, [r7, #112]	@ 0x70
 800536e:	f04f 0300 	mov.w	r3, #0
 8005372:	677b      	str	r3, [r7, #116]	@ 0x74
 8005374:	f04f 0300 	mov.w	r3, #0
 8005378:	67bb      	str	r3, [r7, #120]	@ 0x78
					  1.0f,
					  0.0f,
					  0.0f};

	float32_t iden[16] = {1.0f, 0.0f, 0.0f, 0.0f,
 800537a:	4bc6      	ldr	r3, [pc, #792]	@ (8005694 <Kalman_Start+0x374>)
 800537c:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 8005380:	461d      	mov	r5, r3
 8005382:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005384:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005386:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005388:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800538a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800538c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800538e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005392:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			  	  	 0.0f, 1.0f, 0.0f, 0.0f,
					 0.0f, 0.0f, 1.0f, 0.0f,
					 0.0f, 0.0f, 0.0f, 1.0f,};

	float32_t x_k[4] = {0.0f, 0.0f, 0.0f, 0.0f};
 8005396:	f107 031c 	add.w	r3, r7, #28
 800539a:	2200      	movs	r2, #0
 800539c:	601a      	str	r2, [r3, #0]
 800539e:	605a      	str	r2, [r3, #4]
 80053a0:	609a      	str	r2, [r3, #8]
 80053a2:	60da      	str	r2, [r3, #12]

	filter->Es_velocity[1] = 0.0f;
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	f04f 0200 	mov.w	r2, #0
 80053aa:	f8c3 2260 	str.w	r2, [r3, #608]	@ 0x260

	int i;
	for(i=0;i<16;i++)
 80053ae:	2300      	movs	r3, #0
 80053b0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80053b4:	e028      	b.n	8005408 <Kalman_Start+0xe8>
	{
		filter->A[i] = A_matrix[i];
 80053b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80053ba:	009b      	lsls	r3, r3, #2
 80053bc:	693a      	ldr	r2, [r7, #16]
 80053be:	4413      	add	r3, r2
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	6979      	ldr	r1, [r7, #20]
 80053c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80053c8:	3314      	adds	r3, #20
 80053ca:	009b      	lsls	r3, r3, #2
 80053cc:	440b      	add	r3, r1
 80053ce:	601a      	str	r2, [r3, #0]
		filter->eye[i] = iden[i];
 80053d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80053d4:	009b      	lsls	r3, r3, #2
 80053d6:	3390      	adds	r3, #144	@ 0x90
 80053d8:	443b      	add	r3, r7
 80053da:	3b64      	subs	r3, #100	@ 0x64
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	6979      	ldr	r1, [r7, #20]
 80053e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80053e4:	3398      	adds	r3, #152	@ 0x98
 80053e6:	009b      	lsls	r3, r3, #2
 80053e8:	440b      	add	r3, r1
 80053ea:	601a      	str	r2, [r3, #0]
		filter->P_k[i] = 0.0f;
 80053ec:	697a      	ldr	r2, [r7, #20]
 80053ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80053f2:	3304      	adds	r3, #4
 80053f4:	009b      	lsls	r3, r3, #2
 80053f6:	4413      	add	r3, r2
 80053f8:	f04f 0200 	mov.w	r2, #0
 80053fc:	601a      	str	r2, [r3, #0]
	for(i=0;i<16;i++)
 80053fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005402:	3301      	adds	r3, #1
 8005404:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005408:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800540c:	2b0f      	cmp	r3, #15
 800540e:	ddd2      	ble.n	80053b6 <Kalman_Start+0x96>
	}

	for(i=0;i<4;i++)
 8005410:	2300      	movs	r3, #0
 8005412:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005416:	e03a      	b.n	800548e <Kalman_Start+0x16e>
	{
		filter->X_k[i] = x_k[i];
 8005418:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800541c:	009b      	lsls	r3, r3, #2
 800541e:	3390      	adds	r3, #144	@ 0x90
 8005420:	443b      	add	r3, r7
 8005422:	3b74      	subs	r3, #116	@ 0x74
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	6979      	ldr	r1, [r7, #20]
 8005428:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	440b      	add	r3, r1
 8005430:	601a      	str	r2, [r3, #0]
		filter->B[i] = B_matrix[i];
 8005432:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005436:	009b      	lsls	r3, r3, #2
 8005438:	68fa      	ldr	r2, [r7, #12]
 800543a:	4413      	add	r3, r2
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	6979      	ldr	r1, [r7, #20]
 8005440:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005444:	3324      	adds	r3, #36	@ 0x24
 8005446:	009b      	lsls	r3, r3, #2
 8005448:	440b      	add	r3, r1
 800544a:	601a      	str	r2, [r3, #0]
		filter->C[i] = c[i];
 800544c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005450:	009b      	lsls	r3, r3, #2
 8005452:	3390      	adds	r3, #144	@ 0x90
 8005454:	443b      	add	r3, r7
 8005456:	3b14      	subs	r3, #20
 8005458:	681a      	ldr	r2, [r3, #0]
 800545a:	6979      	ldr	r1, [r7, #20]
 800545c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005460:	3328      	adds	r3, #40	@ 0x28
 8005462:	009b      	lsls	r3, r3, #2
 8005464:	440b      	add	r3, r1
 8005466:	601a      	str	r2, [r3, #0]
		filter->G[i] = g[i];
 8005468:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800546c:	009b      	lsls	r3, r3, #2
 800546e:	3390      	adds	r3, #144	@ 0x90
 8005470:	443b      	add	r3, r7
 8005472:	3b24      	subs	r3, #36	@ 0x24
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	6979      	ldr	r1, [r7, #20]
 8005478:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800547c:	332c      	adds	r3, #44	@ 0x2c
 800547e:	009b      	lsls	r3, r3, #2
 8005480:	440b      	add	r3, r1
 8005482:	601a      	str	r2, [r3, #0]
	for(i=0;i<4;i++)
 8005484:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005488:	3301      	adds	r3, #1
 800548a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800548e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005492:	2b03      	cmp	r3, #3
 8005494:	ddc0      	ble.n	8005418 <Kalman_Start+0xf8>

	}

	arm_mat_init_f32(&filter->X_k_matrix, 4, 1,filter->X_k);
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	f503 7029 	add.w	r0, r3, #676	@ 0x2a4
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	2201      	movs	r2, #1
 80054a0:	2104      	movs	r1, #4
 80054a2:	f00d f8aa 	bl	80125fa <arm_mat_init_f32>
	arm_mat_init_f32(&filter->P_k_matrix, 4, 4,filter->P_k);
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	3310      	adds	r3, #16
 80054b0:	2204      	movs	r2, #4
 80054b2:	2104      	movs	r1, #4
 80054b4:	f00d f8a1 	bl	80125fa <arm_mat_init_f32>

	arm_mat_init_f32(&filter->A_matrix, 4, 4,filter->A);
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	f503 702d 	add.w	r0, r3, #692	@ 0x2b4
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	3350      	adds	r3, #80	@ 0x50
 80054c2:	2204      	movs	r2, #4
 80054c4:	2104      	movs	r1, #4
 80054c6:	f00d f898 	bl	80125fa <arm_mat_init_f32>
	arm_mat_init_f32(&filter->B_matrix, 4, 1,filter->B);
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	f503 7033 	add.w	r0, r3, #716	@ 0x2cc
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	3390      	adds	r3, #144	@ 0x90
 80054d4:	2201      	movs	r2, #1
 80054d6:	2104      	movs	r1, #4
 80054d8:	f00d f88f 	bl	80125fa <arm_mat_init_f32>
	arm_mat_init_f32(&filter->C_matrix, 1, 4,filter->C);
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	33a0      	adds	r3, #160	@ 0xa0
 80054e6:	2204      	movs	r2, #4
 80054e8:	2101      	movs	r1, #1
 80054ea:	f00d f886 	bl	80125fa <arm_mat_init_f32>
	arm_mat_init_f32(&filter->G_matrix, 4, 1,filter->G);
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	f503 7039 	add.w	r0, r3, #740	@ 0x2e4
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	33b0      	adds	r3, #176	@ 0xb0
 80054f8:	2201      	movs	r2, #1
 80054fa:	2104      	movs	r1, #4
 80054fc:	f00d f87d 	bl	80125fa <arm_mat_init_f32>

	arm_mat_init_f32(&filter->A_transpose_matrix, 4, 4, filter->A_transpose);
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	f503 702f 	add.w	r0, r3, #700	@ 0x2bc
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	33c8      	adds	r3, #200	@ 0xc8
 800550a:	2204      	movs	r2, #4
 800550c:	2104      	movs	r1, #4
 800550e:	f00d f874 	bl	80125fa <arm_mat_init_f32>
	arm_mat_init_f32(&filter->C_transpose_matrix, 4, 1, filter->C_transpose);
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	f503 7037 	add.w	r0, r3, #732	@ 0x2dc
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 800551e:	2201      	movs	r2, #1
 8005520:	2104      	movs	r1, #4
 8005522:	f00d f86a 	bl	80125fa <arm_mat_init_f32>
	arm_mat_init_f32(&filter->G_transpose_matrix, 1, 4, filter->G_transpose);
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	f503 703b 	add.w	r0, r3, #748	@ 0x2ec
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 8005532:	2204      	movs	r2, #4
 8005534:	2101      	movs	r1, #1
 8005536:	f00d f860 	bl	80125fa <arm_mat_init_f32>

	arm_mat_init_f32(&filter->GGT_matrix, 4, 4, filter->GGT);
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	f503 703f 	add.w	r0, r3, #764	@ 0x2fc
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8005546:	2204      	movs	r2, #4
 8005548:	2104      	movs	r1, #4
 800554a:	f00d f856 	bl	80125fa <arm_mat_init_f32>
	arm_mat_init_f32(&filter->GQGT_matrix, 4, 4, filter->GQGT);
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800555a:	2204      	movs	r2, #4
 800555c:	2104      	movs	r1, #4
 800555e:	f00d f84c 	bl	80125fa <arm_mat_init_f32>

	// Compute Xk = Ax + Bu
	arm_mat_init_f32(&filter->Bu_matrix, 4, 1, filter->Bu_data);
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	f503 7043 	add.w	r0, r3, #780	@ 0x30c
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800556e:	2201      	movs	r2, #1
 8005570:	2104      	movs	r1, #4
 8005572:	f00d f842 	bl	80125fa <arm_mat_init_f32>
	arm_mat_init_f32(&filter->Ax_matrix, 4, 1, filter->Ax_data);
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	f503 7045 	add.w	r0, r3, #788	@ 0x314
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	f503 73d4 	add.w	r3, r3, #424	@ 0x1a8
 8005582:	2201      	movs	r2, #1
 8005584:	2104      	movs	r1, #4
 8005586:	f00d f838 	bl	80125fa <arm_mat_init_f32>

	// Compute (C * P_k * C^T + R)
	arm_mat_init_f32(&filter->CP_matrix, 1, 4, filter->CP);
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	f503 7047 	add.w	r0, r3, #796	@ 0x31c
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8005596:	2204      	movs	r2, #4
 8005598:	2101      	movs	r1, #1
 800559a:	f00d f82e 	bl	80125fa <arm_mat_init_f32>
	arm_mat_init_f32(&filter->CPCT_matrix, 1, 1, filter->CPCT);
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	f503 7049 	add.w	r0, r3, #804	@ 0x324
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 80055aa:	2201      	movs	r2, #1
 80055ac:	2101      	movs	r1, #1
 80055ae:	f00d f824 	bl	80125fa <arm_mat_init_f32>
	arm_mat_init_f32(&filter->CPCTR_matrix, 1, 1, filter->CPCTR);
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	f503 704b 	add.w	r0, r3, #812	@ 0x32c
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 80055be:	2201      	movs	r2, #1
 80055c0:	2101      	movs	r1, #1
 80055c2:	f00d f81a 	bl	80125fa <arm_mat_init_f32>

	// Compute Kalman Gain: K = P_k * C^T * inv(C * P_k * C^T + R)
	arm_mat_init_f32(&filter->K_matrix, 4, 1, filter->K);
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	f503 704d 	add.w	r0, r3, #820	@ 0x334
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 80055d2:	2201      	movs	r2, #1
 80055d4:	2104      	movs	r1, #4
 80055d6:	f00d f810 	bl	80125fa <arm_mat_init_f32>
	arm_mat_init_f32(&filter->PCT_matrix, 4, 1,filter->PCT);
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	f503 704f 	add.w	r0, r3, #828	@ 0x33c
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 80055e6:	2201      	movs	r2, #1
 80055e8:	2104      	movs	r1, #4
 80055ea:	f00d f806 	bl	80125fa <arm_mat_init_f32>

	// Compute inverse of (C * P_k * C^T + R)
	arm_mat_init_f32(&filter->CPCTRinv_matrix, 1, 1,filter->CPCTRinv);
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	f503 7051 	add.w	r0, r3, #836	@ 0x344
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 80055fa:	2201      	movs	r2, #1
 80055fc:	2101      	movs	r1, #1
 80055fe:	f00c fffc 	bl	80125fa <arm_mat_init_f32>

	// Computation of the estimated state
	arm_mat_init_f32(&filter->Cx_matrix, 1, 1, filter->Cx);
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	f503 7053 	add.w	r0, r3, #844	@ 0x34c
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	f503 7311 	add.w	r3, r3, #580	@ 0x244
 800560e:	2201      	movs	r2, #1
 8005610:	2101      	movs	r1, #1
 8005612:	f00c fff2 	bl	80125fa <arm_mat_init_f32>
	arm_mat_init_f32(&filter->yCx_matrix, 1, 1, filter->yCx);
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	f503 7055 	add.w	r0, r3, #852	@ 0x354
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8005622:	2201      	movs	r2, #1
 8005624:	2101      	movs	r1, #1
 8005626:	f00c ffe8 	bl	80125fa <arm_mat_init_f32>
	arm_mat_init_f32(&filter->KyCx_matrix, 4, 1, filter->KyCx);
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	f503 7057 	add.w	r0, r3, #860	@ 0x35c
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8005636:	2201      	movs	r2, #1
 8005638:	2104      	movs	r1, #4
 800563a:	f00c ffde 	bl	80125fa <arm_mat_init_f32>

	arm_mat_init_f32(&filter->Output_matrix, 1, 1, filter->Es_velocity);
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	f503 703d 	add.w	r0, r3, #756	@ 0x2f4
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800564a:	2201      	movs	r2, #1
 800564c:	2101      	movs	r1, #1
 800564e:	f00c ffd4 	bl	80125fa <arm_mat_init_f32>
	arm_mat_init_f32(&filter->eye_matrix, 4, 4, filter->eye);
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	f503 7031 	add.w	r0, r3, #708	@ 0x2c4
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800565e:	2204      	movs	r2, #4
 8005660:	2104      	movs	r1, #4
 8005662:	f00c ffca 	bl	80125fa <arm_mat_init_f32>

	arm_mat_init_f32(&filter->R_matrix, 1, 1, filter->R);
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	f503 7059 	add.w	r0, r3, #868	@ 0x364
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	33c4      	adds	r3, #196	@ 0xc4
 8005670:	2201      	movs	r2, #1
 8005672:	2101      	movs	r1, #1
 8005674:	f00c ffc1 	bl	80125fa <arm_mat_init_f32>
	arm_mat_init_f32(&filter->Z_matrix, 1, 1, filter->Z);
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	f503 705b 	add.w	r0, r3, #876	@ 0x36c
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	f503 7328 	add.w	r3, r3, #672	@ 0x2a0
 8005684:	2201      	movs	r2, #1
 8005686:	2101      	movs	r1, #1
 8005688:	f00c ffb7 	bl	80125fa <arm_mat_init_f32>
}
 800568c:	bf00      	nop
 800568e:	3790      	adds	r7, #144	@ 0x90
 8005690:	46bd      	mov	sp, r7
 8005692:	bdb0      	pop	{r4, r5, r7, pc}
 8005694:	08014fa8 	.word	0x08014fa8

08005698 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8005698:	b480      	push	{r7}
 800569a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800569c:	f3bf 8f4f 	dsb	sy
}
 80056a0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80056a2:	4b06      	ldr	r3, [pc, #24]	@ (80056bc <__NVIC_SystemReset+0x24>)
 80056a4:	68db      	ldr	r3, [r3, #12]
 80056a6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80056aa:	4904      	ldr	r1, [pc, #16]	@ (80056bc <__NVIC_SystemReset+0x24>)
 80056ac:	4b04      	ldr	r3, [pc, #16]	@ (80056c0 <__NVIC_SystemReset+0x28>)
 80056ae:	4313      	orrs	r3, r2
 80056b0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80056b2:	f3bf 8f4f 	dsb	sy
}
 80056b6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80056b8:	bf00      	nop
 80056ba:	e7fd      	b.n	80056b8 <__NVIC_SystemReset+0x20>
 80056bc:	e000ed00 	.word	0xe000ed00
 80056c0:	05fa0004 	.word	0x05fa0004

080056c4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b082      	sub	sp, #8
 80056c8:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80056ca:	f005 fc02 	bl	800aed2 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80056ce:	f000 f895 	bl	80057fc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80056d2:	f7ff fbd1 	bl	8004e78 <MX_GPIO_Init>
	MX_DMA_Init();
 80056d6:	f7ff fb85 	bl	8004de4 <MX_DMA_Init>
	MX_ADC1_Init();
 80056da:	f7ff fa77 	bl	8004bcc <MX_ADC1_Init>
	MX_TIM2_Init();
 80056de:	f004 fe0d 	bl	800a2fc <MX_TIM2_Init>
	MX_TIM3_Init();
 80056e2:	f004 fe59 	bl	800a398 <MX_TIM3_Init>
	MX_TIM4_Init();
 80056e6:	f004 fead 	bl	800a444 <MX_TIM4_Init>
	MX_TIM5_Init();
 80056ea:	f004 ff01 	bl	800a4f0 <MX_TIM5_Init>
	MX_TIM8_Init();
 80056ee:	f004 ff55 	bl	800a59c <MX_TIM8_Init>
	MX_USART2_UART_Init();
 80056f2:	f005 fa17 	bl	800ab24 <MX_USART2_UART_Init>
	MX_TIM16_Init();
 80056f6:	f005 f80f 	bl	800a718 <MX_TIM16_Init>
	MX_TIM1_Init();
 80056fa:	f004 fd6b 	bl	800a1d4 <MX_TIM1_Init>
	MX_LPUART1_UART_Init();
 80056fe:	f005 f9c7 	bl	800aa90 <MX_LPUART1_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_Delay(250);
 8005702:	20fa      	movs	r0, #250	@ 0xfa
 8005704:	f005 fc56 	bl	800afb4 <HAL_Delay>

	plotter_begin();
 8005708:	f003 feaa 	bl	8009460 <plotter_begin>

	plotter_pen_up();
 800570c:	f004 fb46 	bl	8009d9c <plotter_pen_up>

	prismatic_axis.position = prismatic_encoder.mm;
 8005710:	4b29      	ldr	r3, [pc, #164]	@ (80057b8 <main+0xf4>)
 8005712:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005714:	4a29      	ldr	r2, [pc, #164]	@ (80057bc <main+0xf8>)
 8005716:	6013      	str	r3, [r2, #0]
	revolute_axis.position = revolute_encoder.rads;
 8005718:	4b29      	ldr	r3, [pc, #164]	@ (80057c0 <main+0xfc>)
 800571a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800571c:	4a29      	ldr	r2, [pc, #164]	@ (80057c4 <main+0x100>)
 800571e:	6013      	str	r3, [r2, #0]

	safety_state = SAFETY_NORMAL;
 8005720:	4b29      	ldr	r3, [pc, #164]	@ (80057c8 <main+0x104>)
 8005722:	2200      	movs	r2, #0
 8005724:	701a      	strb	r2, [r3, #0]
	hardware_emergency_triggered = false;
 8005726:	4b29      	ldr	r3, [pc, #164]	@ (80057cc <main+0x108>)
 8005728:	2200      	movs	r2, #0
 800572a:	701a      	strb	r2, [r3, #0]
	pilot_light_state = false;
 800572c:	4b28      	ldr	r3, [pc, #160]	@ (80057d0 <main+0x10c>)
 800572e:	2200      	movs	r2, #0
 8005730:	701a      	strb	r2, [r3, #0]
	safety_toggle_timer = 0;
 8005732:	4b28      	ldr	r3, [pc, #160]	@ (80057d4 <main+0x110>)
 8005734:	2200      	movs	r2, #0
 8005736:	601a      	str	r2, [r3, #0]
	position_control_tick = 0;
 8005738:	4b27      	ldr	r3, [pc, #156]	@ (80057d8 <main+0x114>)
 800573a:	2200      	movs	r2, #0
 800573c:	601a      	str	r2, [r3, #0]

	if (first_startup) {
 800573e:	4b27      	ldr	r3, [pc, #156]	@ (80057dc <main+0x118>)
 8005740:	781b      	ldrb	r3, [r3, #0]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d034      	beq.n	80057b0 <main+0xec>
		// Check if already at home position
		bool up_photo_detected = HAL_GPIO_ReadPin(upperphoto_GPIO_Port,
 8005746:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800574a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800574e:	f007 fe8f 	bl	800d470 <HAL_GPIO_ReadPin>
 8005752:	4603      	mov	r3, r0
 8005754:	2b00      	cmp	r3, #0
 8005756:	bf14      	ite	ne
 8005758:	2301      	movne	r3, #1
 800575a:	2300      	moveq	r3, #0
 800575c:	71fb      	strb	r3, [r7, #7]
		upperphoto_Pin);
		bool prox_detected = HAL_GPIO_ReadPin(prox_GPIO_Port, prox_Pin);
 800575e:	2120      	movs	r1, #32
 8005760:	481f      	ldr	r0, [pc, #124]	@ (80057e0 <main+0x11c>)
 8005762:	f007 fe85 	bl	800d470 <HAL_GPIO_ReadPin>
 8005766:	4603      	mov	r3, r0
 8005768:	2b00      	cmp	r3, #0
 800576a:	bf14      	ite	ne
 800576c:	2301      	movne	r3, #1
 800576e:	2300      	moveq	r3, #0
 8005770:	71bb      	strb	r3, [r7, #6]

		if (up_photo_detected && prox_detected) {
 8005772:	79fb      	ldrb	r3, [r7, #7]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d018      	beq.n	80057aa <main+0xe6>
 8005778:	79bb      	ldrb	r3, [r7, #6]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d015      	beq.n	80057aa <main+0xe6>
			// Already at home position - no need to home
			first_startup = false;
 800577e:	4b17      	ldr	r3, [pc, #92]	@ (80057dc <main+0x118>)
 8005780:	2200      	movs	r2, #0
 8005782:	701a      	strb	r2, [r3, #0]
			homing_active = false;
 8005784:	4b17      	ldr	r3, [pc, #92]	@ (80057e4 <main+0x120>)
 8005786:	2200      	movs	r2, #0
 8005788:	701a      	strb	r2, [r3, #0]
			homing_state = HOMING_IDLE;
 800578a:	4b17      	ldr	r3, [pc, #92]	@ (80057e8 <main+0x124>)
 800578c:	2200      	movs	r2, #0
 800578e:	701a      	strb	r2, [r3, #0]

			// Clear any sensor flags
			up_photo = false;
 8005790:	4b16      	ldr	r3, [pc, #88]	@ (80057ec <main+0x128>)
 8005792:	2200      	movs	r2, #0
 8005794:	701a      	strb	r2, [r3, #0]
			low_photo = false;
 8005796:	4b16      	ldr	r3, [pc, #88]	@ (80057f0 <main+0x12c>)
 8005798:	2200      	movs	r2, #0
 800579a:	701a      	strb	r2, [r3, #0]
			prox_count = 0;
 800579c:	4b15      	ldr	r3, [pc, #84]	@ (80057f4 <main+0x130>)
 800579e:	2200      	movs	r2, #0
 80057a0:	601a      	str	r2, [r3, #0]

			// Set motion to idle
			motion_sequence_state = MOTION_IDLE;
 80057a2:	4b15      	ldr	r3, [pc, #84]	@ (80057f8 <main+0x134>)
 80057a4:	2200      	movs	r2, #0
 80057a6:	701a      	strb	r2, [r3, #0]
 80057a8:	e002      	b.n	80057b0 <main+0xec>

		} else {
			start_homing_sequence(true);
 80057aa:	2001      	movs	r0, #1
 80057ac:	f000 f872 	bl	8005894 <start_homing_sequence>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		handle_b2_button_polling();
 80057b0:	f002 fffe 	bl	80087b0 <handle_b2_button_polling>
 80057b4:	e7fc      	b.n	80057b0 <main+0xec>
 80057b6:	bf00      	nop
 80057b8:	20000988 	.word	0x20000988
 80057bc:	20000704 	.word	0x20000704
 80057c0:	200009e4 	.word	0x200009e4
 80057c4:	20000748 	.word	0x20000748
 80057c8:	200007ed 	.word	0x200007ed
 80057cc:	200007f5 	.word	0x200007f5
 80057d0:	200007f4 	.word	0x200007f4
 80057d4:	200007f0 	.word	0x200007f0
 80057d8:	200007f8 	.word	0x200007f8
 80057dc:	20000333 	.word	0x20000333
 80057e0:	48000400 	.word	0x48000400
 80057e4:	200007eb 	.word	0x200007eb
 80057e8:	200007ea 	.word	0x200007ea
 80057ec:	200007e8 	.word	0x200007e8
 80057f0:	200007e9 	.word	0x200007e9
 80057f4:	200007e4 	.word	0x200007e4
 80057f8:	2000078c 	.word	0x2000078c

080057fc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b094      	sub	sp, #80	@ 0x50
 8005800:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8005802:	f107 0318 	add.w	r3, r7, #24
 8005806:	2238      	movs	r2, #56	@ 0x38
 8005808:	2100      	movs	r1, #0
 800580a:	4618      	mov	r0, r3
 800580c:	f00d fc66 	bl	80130dc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8005810:	1d3b      	adds	r3, r7, #4
 8005812:	2200      	movs	r2, #0
 8005814:	601a      	str	r2, [r3, #0]
 8005816:	605a      	str	r2, [r3, #4]
 8005818:	609a      	str	r2, [r3, #8]
 800581a:	60da      	str	r2, [r3, #12]
 800581c:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800581e:	2000      	movs	r0, #0
 8005820:	f007 fe88 	bl	800d534 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005824:	2302      	movs	r3, #2
 8005826:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005828:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800582c:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800582e:	2340      	movs	r3, #64	@ 0x40
 8005830:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005832:	2302      	movs	r3, #2
 8005834:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8005836:	2302      	movs	r3, #2
 8005838:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800583a:	2304      	movs	r3, #4
 800583c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 800583e:	2355      	movs	r3, #85	@ 0x55
 8005840:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005842:	2302      	movs	r3, #2
 8005844:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8005846:	2302      	movs	r3, #2
 8005848:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800584a:	2302      	movs	r3, #2
 800584c:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800584e:	f107 0318 	add.w	r3, r7, #24
 8005852:	4618      	mov	r0, r3
 8005854:	f007 ff22 	bl	800d69c <HAL_RCC_OscConfig>
 8005858:	4603      	mov	r3, r0
 800585a:	2b00      	cmp	r3, #0
 800585c:	d001      	beq.n	8005862 <SystemClock_Config+0x66>
		Error_Handler();
 800585e:	f003 fdf9 	bl	8009454 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8005862:	230f      	movs	r3, #15
 8005864:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005866:	2303      	movs	r3, #3
 8005868:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800586a:	2300      	movs	r3, #0
 800586c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800586e:	2300      	movs	r3, #0
 8005870:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005872:	2300      	movs	r3, #0
 8005874:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8005876:	1d3b      	adds	r3, r7, #4
 8005878:	2104      	movs	r1, #4
 800587a:	4618      	mov	r0, r3
 800587c:	f008 fa20 	bl	800dcc0 <HAL_RCC_ClockConfig>
 8005880:	4603      	mov	r3, r0
 8005882:	2b00      	cmp	r3, #0
 8005884:	d001      	beq.n	800588a <SystemClock_Config+0x8e>
		Error_Handler();
 8005886:	f003 fde5 	bl	8009454 <Error_Handler>
	}
}
 800588a:	bf00      	nop
 800588c:	3750      	adds	r7, #80	@ 0x50
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}
	...

08005894 <start_homing_sequence>:

/* USER CODE BEGIN 4 */
void start_homing_sequence(bool is_startup) {
 8005894:	b580      	push	{r7, lr}
 8005896:	b084      	sub	sp, #16
 8005898:	af00      	add	r7, sp, #0
 800589a:	4603      	mov	r3, r0
 800589c:	71fb      	strb	r3, [r7, #7]
	//modbus set home state
	registerFrame[R_Theta_Status].U16 = 1;
 800589e:	4b53      	ldr	r3, [pc, #332]	@ (80059ec <start_homing_sequence+0x158>)
 80058a0:	2201      	movs	r2, #1
 80058a2:	841a      	strh	r2, [r3, #32]
	if (homing_active)
 80058a4:	4b52      	ldr	r3, [pc, #328]	@ (80059f0 <start_homing_sequence+0x15c>)
 80058a6:	781b      	ldrb	r3, [r3, #0]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	f040 809a 	bne.w	80059e2 <start_homing_sequence+0x14e>
		return;

	// Check current sensor states
	bool up_photo_detected = HAL_GPIO_ReadPin(upperphoto_GPIO_Port,
 80058ae:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80058b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80058b6:	f007 fddb 	bl	800d470 <HAL_GPIO_ReadPin>
 80058ba:	4603      	mov	r3, r0
 80058bc:	2b00      	cmp	r3, #0
 80058be:	bf14      	ite	ne
 80058c0:	2301      	movne	r3, #1
 80058c2:	2300      	moveq	r3, #0
 80058c4:	73fb      	strb	r3, [r7, #15]
	upperphoto_Pin);
	bool prox_detected = HAL_GPIO_ReadPin(prox_GPIO_Port, prox_Pin);
 80058c6:	2120      	movs	r1, #32
 80058c8:	484a      	ldr	r0, [pc, #296]	@ (80059f4 <start_homing_sequence+0x160>)
 80058ca:	f007 fdd1 	bl	800d470 <HAL_GPIO_ReadPin>
 80058ce:	4603      	mov	r3, r0
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	bf14      	ite	ne
 80058d4:	2301      	movne	r3, #1
 80058d6:	2300      	moveq	r3, #0
 80058d8:	73bb      	strb	r3, [r7, #14]

	// Different logic for startup vs manual homing
	if (is_startup || first_startup) {
 80058da:	79fb      	ldrb	r3, [r7, #7]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d103      	bne.n	80058e8 <start_homing_sequence+0x54>
 80058e0:	4b45      	ldr	r3, [pc, #276]	@ (80059f8 <start_homing_sequence+0x164>)
 80058e2:	781b      	ldrb	r3, [r3, #0]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d02e      	beq.n	8005946 <start_homing_sequence+0xb2>
		// STARTUP LOGIC: Skip homing if already at home position
		if (up_photo_detected && prox_detected) {
 80058e8:	7bfb      	ldrb	r3, [r7, #15]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d018      	beq.n	8005920 <start_homing_sequence+0x8c>
 80058ee:	7bbb      	ldrb	r3, [r7, #14]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d015      	beq.n	8005920 <start_homing_sequence+0x8c>
			// Already at home position - no need to home
			homing_active = false;
 80058f4:	4b3e      	ldr	r3, [pc, #248]	@ (80059f0 <start_homing_sequence+0x15c>)
 80058f6:	2200      	movs	r2, #0
 80058f8:	701a      	strb	r2, [r3, #0]
			homing_state = HOMING_IDLE;
 80058fa:	4b40      	ldr	r3, [pc, #256]	@ (80059fc <start_homing_sequence+0x168>)
 80058fc:	2200      	movs	r2, #0
 80058fe:	701a      	strb	r2, [r3, #0]
			first_startup = false;
 8005900:	4b3d      	ldr	r3, [pc, #244]	@ (80059f8 <start_homing_sequence+0x164>)
 8005902:	2200      	movs	r2, #0
 8005904:	701a      	strb	r2, [r3, #0]

			// Clear sensor flags
			up_photo = false;
 8005906:	4b3e      	ldr	r3, [pc, #248]	@ (8005a00 <start_homing_sequence+0x16c>)
 8005908:	2200      	movs	r2, #0
 800590a:	701a      	strb	r2, [r3, #0]
			low_photo = false;
 800590c:	4b3d      	ldr	r3, [pc, #244]	@ (8005a04 <start_homing_sequence+0x170>)
 800590e:	2200      	movs	r2, #0
 8005910:	701a      	strb	r2, [r3, #0]
			prox_count = 0;
 8005912:	4b3d      	ldr	r3, [pc, #244]	@ (8005a08 <start_homing_sequence+0x174>)
 8005914:	2200      	movs	r2, #0
 8005916:	601a      	str	r2, [r3, #0]

			// Set motion to idle
			motion_sequence_state = MOTION_IDLE;
 8005918:	4b3c      	ldr	r3, [pc, #240]	@ (8005a0c <start_homing_sequence+0x178>)
 800591a:	2200      	movs	r2, #0
 800591c:	701a      	strb	r2, [r3, #0]
			return;
 800591e:	e061      	b.n	80059e4 <start_homing_sequence+0x150>
		}

		// Not at home - start startup homing sequence (skip zero degrees)
		homing_active = true;
 8005920:	4b33      	ldr	r3, [pc, #204]	@ (80059f0 <start_homing_sequence+0x15c>)
 8005922:	2201      	movs	r2, #1
 8005924:	701a      	strb	r2, [r3, #0]
		motion_sequence_state = MOTION_IDLE;
 8005926:	4b39      	ldr	r3, [pc, #228]	@ (8005a0c <start_homing_sequence+0x178>)
 8005928:	2200      	movs	r2, #0
 800592a:	701a      	strb	r2, [r3, #0]
		prox_count = 0;
 800592c:	4b36      	ldr	r3, [pc, #216]	@ (8005a08 <start_homing_sequence+0x174>)
 800592e:	2200      	movs	r2, #0
 8005930:	601a      	str	r2, [r3, #0]
		up_photo = false;
 8005932:	4b33      	ldr	r3, [pc, #204]	@ (8005a00 <start_homing_sequence+0x16c>)
 8005934:	2200      	movs	r2, #0
 8005936:	701a      	strb	r2, [r3, #0]
		low_photo = false;
 8005938:	4b32      	ldr	r3, [pc, #200]	@ (8005a04 <start_homing_sequence+0x170>)
 800593a:	2200      	movs	r2, #0
 800593c:	701a      	strb	r2, [r3, #0]
		homing_state = HOMING_PEN_UP;
 800593e:	4b2f      	ldr	r3, [pc, #188]	@ (80059fc <start_homing_sequence+0x168>)
 8005940:	2201      	movs	r2, #1
 8005942:	701a      	strb	r2, [r3, #0]
 8005944:	e04e      	b.n	80059e4 <start_homing_sequence+0x150>

	} else {
		// MANUAL HOMING LOGIC: More sophisticated behavior
		if (up_photo_detected && prox_detected) {
 8005946:	7bfb      	ldrb	r3, [r7, #15]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d018      	beq.n	800597e <start_homing_sequence+0xea>
 800594c:	7bbb      	ldrb	r3, [r7, #14]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d015      	beq.n	800597e <start_homing_sequence+0xea>
			// Already perfectly homed - skip homing completely
			homing_active = false;
 8005952:	4b27      	ldr	r3, [pc, #156]	@ (80059f0 <start_homing_sequence+0x15c>)
 8005954:	2200      	movs	r2, #0
 8005956:	701a      	strb	r2, [r3, #0]
			homing_state = HOMING_IDLE;
 8005958:	4b28      	ldr	r3, [pc, #160]	@ (80059fc <start_homing_sequence+0x168>)
 800595a:	2200      	movs	r2, #0
 800595c:	701a      	strb	r2, [r3, #0]
			first_startup = false;  // ← ADDED THIS LINE
 800595e:	4b26      	ldr	r3, [pc, #152]	@ (80059f8 <start_homing_sequence+0x164>)
 8005960:	2200      	movs	r2, #0
 8005962:	701a      	strb	r2, [r3, #0]
			up_photo = false;
 8005964:	4b26      	ldr	r3, [pc, #152]	@ (8005a00 <start_homing_sequence+0x16c>)
 8005966:	2200      	movs	r2, #0
 8005968:	701a      	strb	r2, [r3, #0]
			low_photo = false;
 800596a:	4b26      	ldr	r3, [pc, #152]	@ (8005a04 <start_homing_sequence+0x170>)
 800596c:	2200      	movs	r2, #0
 800596e:	701a      	strb	r2, [r3, #0]
			prox_count = 0;
 8005970:	4b25      	ldr	r3, [pc, #148]	@ (8005a08 <start_homing_sequence+0x174>)
 8005972:	2200      	movs	r2, #0
 8005974:	601a      	str	r2, [r3, #0]
			motion_sequence_state = MOTION_IDLE;
 8005976:	4b25      	ldr	r3, [pc, #148]	@ (8005a0c <start_homing_sequence+0x178>)
 8005978:	2200      	movs	r2, #0
 800597a:	701a      	strb	r2, [r3, #0]
			return;
 800597c:	e032      	b.n	80059e4 <start_homing_sequence+0x150>
			 up_photo = false;
			 low_photo = false;
			 homing_state = HOMING_REV_TO_ZERO_DEG;
			 rev_to_zero_trajectory_started = false;
			 */
		} else if (up_photo_detected && !prox_detected) {
 800597e:	7bfb      	ldrb	r3, [r7, #15]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d01b      	beq.n	80059bc <start_homing_sequence+0x128>
 8005984:	7bbb      	ldrb	r3, [r7, #14]
 8005986:	f083 0301 	eor.w	r3, r3, #1
 800598a:	b2db      	uxtb	r3, r3
 800598c:	2b00      	cmp	r3, #0
 800598e:	d015      	beq.n	80059bc <start_homing_sequence+0x128>
			// At up photo but not at prox - go to zero degrees first
			homing_active = true;
 8005990:	4b17      	ldr	r3, [pc, #92]	@ (80059f0 <start_homing_sequence+0x15c>)
 8005992:	2201      	movs	r2, #1
 8005994:	701a      	strb	r2, [r3, #0]
			motion_sequence_state = MOTION_IDLE;
 8005996:	4b1d      	ldr	r3, [pc, #116]	@ (8005a0c <start_homing_sequence+0x178>)
 8005998:	2200      	movs	r2, #0
 800599a:	701a      	strb	r2, [r3, #0]
			prox_count = 0;
 800599c:	4b1a      	ldr	r3, [pc, #104]	@ (8005a08 <start_homing_sequence+0x174>)
 800599e:	2200      	movs	r2, #0
 80059a0:	601a      	str	r2, [r3, #0]
			up_photo = false;
 80059a2:	4b17      	ldr	r3, [pc, #92]	@ (8005a00 <start_homing_sequence+0x16c>)
 80059a4:	2200      	movs	r2, #0
 80059a6:	701a      	strb	r2, [r3, #0]
			low_photo = false;
 80059a8:	4b16      	ldr	r3, [pc, #88]	@ (8005a04 <start_homing_sequence+0x170>)
 80059aa:	2200      	movs	r2, #0
 80059ac:	701a      	strb	r2, [r3, #0]
			homing_state = HOMING_REV_TO_ZERO_DEG;
 80059ae:	4b13      	ldr	r3, [pc, #76]	@ (80059fc <start_homing_sequence+0x168>)
 80059b0:	2207      	movs	r2, #7
 80059b2:	701a      	strb	r2, [r3, #0]
			rev_to_zero_trajectory_started = false;
 80059b4:	4b16      	ldr	r3, [pc, #88]	@ (8005a10 <start_homing_sequence+0x17c>)
 80059b6:	2200      	movs	r2, #0
 80059b8:	701a      	strb	r2, [r3, #0]
 80059ba:	e013      	b.n	80059e4 <start_homing_sequence+0x150>
		} else {
			// Not at up photo - start full homing sequence
			homing_active = true;
 80059bc:	4b0c      	ldr	r3, [pc, #48]	@ (80059f0 <start_homing_sequence+0x15c>)
 80059be:	2201      	movs	r2, #1
 80059c0:	701a      	strb	r2, [r3, #0]
			motion_sequence_state = MOTION_IDLE;
 80059c2:	4b12      	ldr	r3, [pc, #72]	@ (8005a0c <start_homing_sequence+0x178>)
 80059c4:	2200      	movs	r2, #0
 80059c6:	701a      	strb	r2, [r3, #0]
			prox_count = 0;
 80059c8:	4b0f      	ldr	r3, [pc, #60]	@ (8005a08 <start_homing_sequence+0x174>)
 80059ca:	2200      	movs	r2, #0
 80059cc:	601a      	str	r2, [r3, #0]
			up_photo = false;
 80059ce:	4b0c      	ldr	r3, [pc, #48]	@ (8005a00 <start_homing_sequence+0x16c>)
 80059d0:	2200      	movs	r2, #0
 80059d2:	701a      	strb	r2, [r3, #0]
			low_photo = false;
 80059d4:	4b0b      	ldr	r3, [pc, #44]	@ (8005a04 <start_homing_sequence+0x170>)
 80059d6:	2200      	movs	r2, #0
 80059d8:	701a      	strb	r2, [r3, #0]
			homing_state = HOMING_PEN_UP;
 80059da:	4b08      	ldr	r3, [pc, #32]	@ (80059fc <start_homing_sequence+0x168>)
 80059dc:	2201      	movs	r2, #1
 80059de:	701a      	strb	r2, [r3, #0]
 80059e0:	e000      	b.n	80059e4 <start_homing_sequence+0x150>
		return;
 80059e2:	bf00      	nop
		}
	}
}
 80059e4:	3710      	adds	r7, #16
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}
 80059ea:	bf00      	nop
 80059ec:	200015a4 	.word	0x200015a4
 80059f0:	200007eb 	.word	0x200007eb
 80059f4:	48000400 	.word	0x48000400
 80059f8:	20000333 	.word	0x20000333
 80059fc:	200007ea 	.word	0x200007ea
 8005a00:	200007e8 	.word	0x200007e8
 8005a04:	200007e9 	.word	0x200007e9
 8005a08:	200007e4 	.word	0x200007e4
 8005a0c:	2000078c 	.word	0x2000078c
 8005a10:	200007f7 	.word	0x200007f7

08005a14 <update_homing_sequence>:

void update_homing_sequence(void) {
 8005a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a18:	ed2d 8b02 	vpush	{d8}
 8005a1c:	b08b      	sub	sp, #44	@ 0x2c
 8005a1e:	af00      	add	r7, sp, #0
	if (!homing_active)
 8005a20:	4b9e      	ldr	r3, [pc, #632]	@ (8005c9c <update_homing_sequence+0x288>)
 8005a22:	781b      	ldrb	r3, [r3, #0]
 8005a24:	f083 0301 	eor.w	r3, r3, #1
 8005a28:	b2db      	uxtb	r3, r3
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	f040 8371 	bne.w	8006112 <update_homing_sequence+0x6fe>
		return;

	if (is_emergency_active()) {
 8005a30:	f002 f846 	bl	8007ac0 <is_emergency_active>
 8005a34:	4603      	mov	r3, r0
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d00e      	beq.n	8005a58 <update_homing_sequence+0x44>
		homing_active = false;
 8005a3a:	4b98      	ldr	r3, [pc, #608]	@ (8005c9c <update_homing_sequence+0x288>)
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	701a      	strb	r2, [r3, #0]
		homing_state = HOMING_IDLE;
 8005a40:	4b97      	ldr	r3, [pc, #604]	@ (8005ca0 <update_homing_sequence+0x28c>)
 8005a42:	2200      	movs	r2, #0
 8005a44:	701a      	strb	r2, [r3, #0]
		prismatic_axis.command_pos = 0.0f;
 8005a46:	4b97      	ldr	r3, [pc, #604]	@ (8005ca4 <update_homing_sequence+0x290>)
 8005a48:	f04f 0200 	mov.w	r2, #0
 8005a4c:	625a      	str	r2, [r3, #36]	@ 0x24
		revolute_axis.command_pos = 0.0f;
 8005a4e:	4b96      	ldr	r3, [pc, #600]	@ (8005ca8 <update_homing_sequence+0x294>)
 8005a50:	f04f 0200 	mov.w	r2, #0
 8005a54:	625a      	str	r2, [r3, #36]	@ 0x24
		return;
 8005a56:	e371      	b.n	800613c <update_homing_sequence+0x728>
	}

	switch (homing_state) {
 8005a58:	4b91      	ldr	r3, [pc, #580]	@ (8005ca0 <update_homing_sequence+0x28c>)
 8005a5a:	781b      	ldrb	r3, [r3, #0]
 8005a5c:	3b01      	subs	r3, #1
 8005a5e:	2b0a      	cmp	r3, #10
 8005a60:	f200 8359 	bhi.w	8006116 <update_homing_sequence+0x702>
 8005a64:	a201      	add	r2, pc, #4	@ (adr r2, 8005a6c <update_homing_sequence+0x58>)
 8005a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a6a:	bf00      	nop
 8005a6c:	08005a99 	.word	0x08005a99
 8005a70:	08005abb 	.word	0x08005abb
 8005a74:	08005b25 	.word	0x08005b25
 8005a78:	08005c71 	.word	0x08005c71
 8005a7c:	08005ce1 	.word	0x08005ce1
 8005a80:	08005e25 	.word	0x08005e25
 8005a84:	08005e9b 	.word	0x08005e9b
 8005a88:	08005f27 	.word	0x08005f27
 8005a8c:	08005fd9 	.word	0x08005fd9
 8005a90:	080060df 	.word	0x080060df
 8005a94:	08006109 	.word	0x08006109
	case HOMING_PEN_UP:
		// Ensure pen is up
		plotter_pen_up();
 8005a98:	f004 f980 	bl	8009d9c <plotter_pen_up>
		prismatic_axis.command_pos = 0.0f;
 8005a9c:	4b81      	ldr	r3, [pc, #516]	@ (8005ca4 <update_homing_sequence+0x290>)
 8005a9e:	f04f 0200 	mov.w	r2, #0
 8005aa2:	625a      	str	r2, [r3, #36]	@ 0x24
		revolute_axis.command_pos = 0.0f;
 8005aa4:	4b80      	ldr	r3, [pc, #512]	@ (8005ca8 <update_homing_sequence+0x294>)
 8005aa6:	f04f 0200 	mov.w	r2, #0
 8005aaa:	625a      	str	r2, [r3, #36]	@ 0x24
		motion_delay_timer = 0;
 8005aac:	4b7f      	ldr	r3, [pc, #508]	@ (8005cac <update_homing_sequence+0x298>)
 8005aae:	2200      	movs	r2, #0
 8005ab0:	601a      	str	r2, [r3, #0]
		homing_state = HOMING_DELAY_AFTER_PEN_UP;
 8005ab2:	4b7b      	ldr	r3, [pc, #492]	@ (8005ca0 <update_homing_sequence+0x28c>)
 8005ab4:	2202      	movs	r2, #2
 8005ab6:	701a      	strb	r2, [r3, #0]
		break;
 8005ab8:	e340      	b.n	800613c <update_homing_sequence+0x728>

	case HOMING_DELAY_AFTER_PEN_UP:
		// Stop motors and wait
		prismatic_axis.command_pos = 0.0f;
 8005aba:	4b7a      	ldr	r3, [pc, #488]	@ (8005ca4 <update_homing_sequence+0x290>)
 8005abc:	f04f 0200 	mov.w	r2, #0
 8005ac0:	625a      	str	r2, [r3, #36]	@ 0x24
		revolute_axis.command_pos = 0.0f;
 8005ac2:	4b79      	ldr	r3, [pc, #484]	@ (8005ca8 <update_homing_sequence+0x294>)
 8005ac4:	f04f 0200 	mov.w	r2, #0
 8005ac8:	625a      	str	r2, [r3, #36]	@ 0x24
		motion_delay_timer++;
 8005aca:	4b78      	ldr	r3, [pc, #480]	@ (8005cac <update_homing_sequence+0x298>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	3301      	adds	r3, #1
 8005ad0:	4a76      	ldr	r2, [pc, #472]	@ (8005cac <update_homing_sequence+0x298>)
 8005ad2:	6013      	str	r3, [r2, #0]
		if (motion_delay_timer >= 150) {
 8005ad4:	4b75      	ldr	r3, [pc, #468]	@ (8005cac <update_homing_sequence+0x298>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	2b95      	cmp	r3, #149	@ 0x95
 8005ada:	f240 831e 	bls.w	800611a <update_homing_sequence+0x706>
			// Check if already at low photo sensor
			low_photo = HAL_GPIO_ReadPin(LOWER_PHOTO_GPIO_Port,
 8005ade:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005ae2:	4873      	ldr	r0, [pc, #460]	@ (8005cb0 <update_homing_sequence+0x29c>)
 8005ae4:	f007 fcc4 	bl	800d470 <HAL_GPIO_ReadPin>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	bf14      	ite	ne
 8005aee:	2301      	movne	r3, #1
 8005af0:	2300      	moveq	r3, #0
 8005af2:	b2da      	uxtb	r2, r3
 8005af4:	4b6f      	ldr	r3, [pc, #444]	@ (8005cb4 <update_homing_sequence+0x2a0>)
 8005af6:	701a      	strb	r2, [r3, #0]
			LOWER_PHOTO_Pin);

			if (low_photo) {
 8005af8:	4b6e      	ldr	r3, [pc, #440]	@ (8005cb4 <update_homing_sequence+0x2a0>)
 8005afa:	781b      	ldrb	r3, [r3, #0]
 8005afc:	b2db      	uxtb	r3, r3
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d00c      	beq.n	8005b1c <update_homing_sequence+0x108>
				// Already at low photo, skip moving down and go directly to delay
				motion_delay_timer = 0;
 8005b02:	4b6a      	ldr	r3, [pc, #424]	@ (8005cac <update_homing_sequence+0x298>)
 8005b04:	2200      	movs	r2, #0
 8005b06:	601a      	str	r2, [r3, #0]
				homing_state = HOMING_DELAY_AFTER_LOW_PHOTO;
 8005b08:	4b65      	ldr	r3, [pc, #404]	@ (8005ca0 <update_homing_sequence+0x28c>)
 8005b0a:	2204      	movs	r2, #4
 8005b0c:	701a      	strb	r2, [r3, #0]
				low_photo = false; // Reset flag
 8005b0e:	4b69      	ldr	r3, [pc, #420]	@ (8005cb4 <update_homing_sequence+0x2a0>)
 8005b10:	2200      	movs	r2, #0
 8005b12:	701a      	strb	r2, [r3, #0]
				up_photo = false;  // Reset for next detection
 8005b14:	4b68      	ldr	r3, [pc, #416]	@ (8005cb8 <update_homing_sequence+0x2a4>)
 8005b16:	2200      	movs	r2, #0
 8005b18:	701a      	strb	r2, [r3, #0]
			} else {
				// Not at low photo, need to move down
				homing_state = HOMING_PRIS_DOWN_TO_LOW_PHOTO;
			}
		}
		break;
 8005b1a:	e2fe      	b.n	800611a <update_homing_sequence+0x706>
				homing_state = HOMING_PRIS_DOWN_TO_LOW_PHOTO;
 8005b1c:	4b60      	ldr	r3, [pc, #384]	@ (8005ca0 <update_homing_sequence+0x28c>)
 8005b1e:	2203      	movs	r2, #3
 8005b20:	701a      	strb	r2, [r3, #0]
		break;
 8005b22:	e2fa      	b.n	800611a <update_homing_sequence+0x706>

	case HOMING_PRIS_DOWN_TO_LOW_PHOTO:
		// Move prismatic down at constant velocity
		prismatic_axis.vel_error = HOMING_PRIS_VELOCITY
				- prismatic_axis.kalman_velocity;
 8005b24:	4b5f      	ldr	r3, [pc, #380]	@ (8005ca4 <update_homing_sequence+0x290>)
 8005b26:	edd3 7a07 	vldr	s15, [r3, #28]
 8005b2a:	ed9f 7a64 	vldr	s14, [pc, #400]	@ 8005cbc <update_homing_sequence+0x2a8>
 8005b2e:	ee77 7a67 	vsub.f32	s15, s14, s15
		prismatic_axis.vel_error = HOMING_PRIS_VELOCITY
 8005b32:	4b5c      	ldr	r3, [pc, #368]	@ (8005ca4 <update_homing_sequence+0x290>)
 8005b34:	edc3 7a06 	vstr	s15, [r3, #24]
		prismatic_axis.command_pos = PWM_Satuation(
 8005b38:	4b5a      	ldr	r3, [pc, #360]	@ (8005ca4 <update_homing_sequence+0x290>)
 8005b3a:	edd3 7a06 	vldr	s15, [r3, #24]
 8005b3e:	eeb0 0a67 	vmov.f32	s0, s15
 8005b42:	485f      	ldr	r0, [pc, #380]	@ (8005cc0 <update_homing_sequence+0x2ac>)
 8005b44:	f7fb fb68 	bl	8001218 <PID_CONTROLLER_Compute>
 8005b48:	eeb0 8a40 	vmov.f32	s16, s0
				PID_CONTROLLER_Compute(&prismatic_velocity_pid,
						prismatic_axis.vel_error),
				ZGX45RGG_400RPM_Constant.U_max,
 8005b4c:	4b5d      	ldr	r3, [pc, #372]	@ (8005cc4 <update_homing_sequence+0x2b0>)
 8005b4e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		prismatic_axis.command_pos = PWM_Satuation(
 8005b52:	4610      	mov	r0, r2
 8005b54:	4619      	mov	r1, r3
 8005b56:	f7fa ffb5 	bl	8000ac4 <__aeabi_d2iz>
 8005b5a:	4604      	mov	r4, r0
				-ZGX45RGG_400RPM_Constant.U_max);
 8005b5c:	4b59      	ldr	r3, [pc, #356]	@ (8005cc4 <update_homing_sequence+0x2b0>)
 8005b5e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8005b62:	613a      	str	r2, [r7, #16]
 8005b64:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8005b68:	617b      	str	r3, [r7, #20]
		prismatic_axis.command_pos = PWM_Satuation(
 8005b6a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005b6e:	f7fa ffa9 	bl	8000ac4 <__aeabi_d2iz>
 8005b72:	4603      	mov	r3, r0
 8005b74:	4619      	mov	r1, r3
 8005b76:	4620      	mov	r0, r4
 8005b78:	eeb0 0a48 	vmov.f32	s0, s16
 8005b7c:	f7fb faea 	bl	8001154 <PWM_Satuation>
 8005b80:	ee07 0a90 	vmov	s15, r0
 8005b84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b88:	4b46      	ldr	r3, [pc, #280]	@ (8005ca4 <update_homing_sequence+0x290>)
 8005b8a:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		// Add feedforward compensation during homing
		prismatic_axis.ffd = PRISMATIC_MOTOR_FFD_Compute(&prismatic_motor_ffd,
 8005b8e:	eeb5 0a00 	vmov.f32	s0, #80	@ 0x3e800000  0.250
 8005b92:	484d      	ldr	r0, [pc, #308]	@ (8005cc8 <update_homing_sequence+0x2b4>)
 8005b94:	f7fb fe5c 	bl	8001850 <PRISMATIC_MOTOR_FFD_Compute>
 8005b98:	eef0 7a40 	vmov.f32	s15, s0
 8005b9c:	4b41      	ldr	r3, [pc, #260]	@ (8005ca4 <update_homing_sequence+0x290>)
 8005b9e:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
		HOMING_PRIS_VELOCITY / 1000.0f);
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 8005ba2:	4b4a      	ldr	r3, [pc, #296]	@ (8005ccc <update_homing_sequence+0x2b8>)
 8005ba4:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
				revolute_encoder.rads, 0.0f, prismatic_encoder.mm / 1000.0f);
 8005ba8:	4b49      	ldr	r3, [pc, #292]	@ (8005cd0 <update_homing_sequence+0x2bc>)
 8005baa:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 8005bae:	ed9f 6a49 	vldr	s12, [pc, #292]	@ 8005cd4 <update_homing_sequence+0x2c0>
 8005bb2:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8005bb6:	eeb0 1a66 	vmov.f32	s2, s13
 8005bba:	eddf 0a47 	vldr	s1, [pc, #284]	@ 8005cd8 <update_homing_sequence+0x2c4>
 8005bbe:	eeb0 0a47 	vmov.f32	s0, s14
 8005bc2:	4846      	ldr	r0, [pc, #280]	@ (8005cdc <update_homing_sequence+0x2c8>)
 8005bc4:	f7fb fed7 	bl	8001976 <PRISMATIC_MOTOR_DFD_Compute>
 8005bc8:	eef0 7a40 	vmov.f32	s15, s0
 8005bcc:	4b35      	ldr	r3, [pc, #212]	@ (8005ca4 <update_homing_sequence+0x290>)
 8005bce:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
		prismatic_axis.command_pos += prismatic_axis.ffd + prismatic_axis.dfd;
 8005bd2:	4b34      	ldr	r3, [pc, #208]	@ (8005ca4 <update_homing_sequence+0x290>)
 8005bd4:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8005bd8:	4b32      	ldr	r3, [pc, #200]	@ (8005ca4 <update_homing_sequence+0x290>)
 8005bda:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 8005bde:	4b31      	ldr	r3, [pc, #196]	@ (8005ca4 <update_homing_sequence+0x290>)
 8005be0:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8005be4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005be8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005bec:	4b2d      	ldr	r3, [pc, #180]	@ (8005ca4 <update_homing_sequence+0x290>)
 8005bee:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8005bf2:	4b2c      	ldr	r3, [pc, #176]	@ (8005ca4 <update_homing_sequence+0x290>)
 8005bf4:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
				ZGX45RGG_400RPM_Constant.U_max,
 8005bf8:	4b32      	ldr	r3, [pc, #200]	@ (8005cc4 <update_homing_sequence+0x2b0>)
 8005bfa:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8005bfe:	4610      	mov	r0, r2
 8005c00:	4619      	mov	r1, r3
 8005c02:	f7fa ff5f 	bl	8000ac4 <__aeabi_d2iz>
 8005c06:	4604      	mov	r4, r0
				-ZGX45RGG_400RPM_Constant.U_max);
 8005c08:	4b2e      	ldr	r3, [pc, #184]	@ (8005cc4 <update_homing_sequence+0x2b0>)
 8005c0a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8005c0e:	60ba      	str	r2, [r7, #8]
 8005c10:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8005c14:	60fb      	str	r3, [r7, #12]
		prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8005c16:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005c1a:	f7fa ff53 	bl	8000ac4 <__aeabi_d2iz>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	4619      	mov	r1, r3
 8005c22:	4620      	mov	r0, r4
 8005c24:	eeb0 0a48 	vmov.f32	s0, s16
 8005c28:	f7fb fa94 	bl	8001154 <PWM_Satuation>
 8005c2c:	ee07 0a90 	vmov	s15, r0
 8005c30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c34:	4b1b      	ldr	r3, [pc, #108]	@ (8005ca4 <update_homing_sequence+0x290>)
 8005c36:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		if (low_photo) {
 8005c3a:	4b1e      	ldr	r3, [pc, #120]	@ (8005cb4 <update_homing_sequence+0x2a0>)
 8005c3c:	781b      	ldrb	r3, [r3, #0]
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	f000 826c 	beq.w	800611e <update_homing_sequence+0x70a>
			// Found low photo, stop and start delay
			prismatic_axis.command_pos = 0.0f;
 8005c46:	4b17      	ldr	r3, [pc, #92]	@ (8005ca4 <update_homing_sequence+0x290>)
 8005c48:	f04f 0200 	mov.w	r2, #0
 8005c4c:	625a      	str	r2, [r3, #36]	@ 0x24
			revolute_axis.command_pos = 0.0f;
 8005c4e:	4b16      	ldr	r3, [pc, #88]	@ (8005ca8 <update_homing_sequence+0x294>)
 8005c50:	f04f 0200 	mov.w	r2, #0
 8005c54:	625a      	str	r2, [r3, #36]	@ 0x24
			motion_delay_timer = 0;
 8005c56:	4b15      	ldr	r3, [pc, #84]	@ (8005cac <update_homing_sequence+0x298>)
 8005c58:	2200      	movs	r2, #0
 8005c5a:	601a      	str	r2, [r3, #0]
			homing_state = HOMING_DELAY_AFTER_LOW_PHOTO;
 8005c5c:	4b10      	ldr	r3, [pc, #64]	@ (8005ca0 <update_homing_sequence+0x28c>)
 8005c5e:	2204      	movs	r2, #4
 8005c60:	701a      	strb	r2, [r3, #0]
			low_photo = false; // Reset flag after use
 8005c62:	4b14      	ldr	r3, [pc, #80]	@ (8005cb4 <update_homing_sequence+0x2a0>)
 8005c64:	2200      	movs	r2, #0
 8005c66:	701a      	strb	r2, [r3, #0]
			up_photo = false;  // Reset for next detection
 8005c68:	4b13      	ldr	r3, [pc, #76]	@ (8005cb8 <update_homing_sequence+0x2a4>)
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	701a      	strb	r2, [r3, #0]
		}
		break;
 8005c6e:	e256      	b.n	800611e <update_homing_sequence+0x70a>

	case HOMING_DELAY_AFTER_LOW_PHOTO:
		// Stop motors and wait
		prismatic_axis.command_pos = 0.0f;
 8005c70:	4b0c      	ldr	r3, [pc, #48]	@ (8005ca4 <update_homing_sequence+0x290>)
 8005c72:	f04f 0200 	mov.w	r2, #0
 8005c76:	625a      	str	r2, [r3, #36]	@ 0x24
		revolute_axis.command_pos = 0.0f;
 8005c78:	4b0b      	ldr	r3, [pc, #44]	@ (8005ca8 <update_homing_sequence+0x294>)
 8005c7a:	f04f 0200 	mov.w	r2, #0
 8005c7e:	625a      	str	r2, [r3, #36]	@ 0x24
		motion_delay_timer++;
 8005c80:	4b0a      	ldr	r3, [pc, #40]	@ (8005cac <update_homing_sequence+0x298>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	3301      	adds	r3, #1
 8005c86:	4a09      	ldr	r2, [pc, #36]	@ (8005cac <update_homing_sequence+0x298>)
 8005c88:	6013      	str	r3, [r2, #0]
		if (motion_delay_timer >= 150) {
 8005c8a:	4b08      	ldr	r3, [pc, #32]	@ (8005cac <update_homing_sequence+0x298>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	2b95      	cmp	r3, #149	@ 0x95
 8005c90:	f240 8247 	bls.w	8006122 <update_homing_sequence+0x70e>
			homing_state = HOMING_PRIS_UP_TO_UP_PHOTO;
 8005c94:	4b02      	ldr	r3, [pc, #8]	@ (8005ca0 <update_homing_sequence+0x28c>)
 8005c96:	2205      	movs	r2, #5
 8005c98:	701a      	strb	r2, [r3, #0]
		}
		break;
 8005c9a:	e242      	b.n	8006122 <update_homing_sequence+0x70e>
 8005c9c:	200007eb 	.word	0x200007eb
 8005ca0:	200007ea 	.word	0x200007ea
 8005ca4:	20000704 	.word	0x20000704
 8005ca8:	20000748 	.word	0x20000748
 8005cac:	200007e0 	.word	0x200007e0
 8005cb0:	48000400 	.word	0x48000400
 8005cb4:	200007e9 	.word	0x200007e9
 8005cb8:	200007e8 	.word	0x200007e8
 8005cbc:	437a0000 	.word	0x437a0000
 8005cc0:	20000a68 	.word	0x20000a68
 8005cc4:	20000080 	.word	0x20000080
 8005cc8:	20000b08 	.word	0x20000b08
 8005ccc:	200009e4 	.word	0x200009e4
 8005cd0:	20000988 	.word	0x20000988
 8005cd4:	447a0000 	.word	0x447a0000
 8005cd8:	00000000 	.word	0x00000000
 8005cdc:	20000b0c 	.word	0x20000b0c

	case HOMING_PRIS_UP_TO_UP_PHOTO:
		// Move prismatic up at constant velocity
		prismatic_axis.vel_error = -HOMING_PRIS_VELOCITY
				- prismatic_axis.kalman_velocity;
 8005ce0:	4ba6      	ldr	r3, [pc, #664]	@ (8005f7c <update_homing_sequence+0x568>)
 8005ce2:	edd3 7a07 	vldr	s15, [r3, #28]
 8005ce6:	ed9f 7aa6 	vldr	s14, [pc, #664]	@ 8005f80 <update_homing_sequence+0x56c>
 8005cea:	ee77 7a67 	vsub.f32	s15, s14, s15
		prismatic_axis.vel_error = -HOMING_PRIS_VELOCITY
 8005cee:	4ba3      	ldr	r3, [pc, #652]	@ (8005f7c <update_homing_sequence+0x568>)
 8005cf0:	edc3 7a06 	vstr	s15, [r3, #24]
		prismatic_axis.command_pos = PWM_Satuation(
 8005cf4:	4ba1      	ldr	r3, [pc, #644]	@ (8005f7c <update_homing_sequence+0x568>)
 8005cf6:	edd3 7a06 	vldr	s15, [r3, #24]
 8005cfa:	eeb0 0a67 	vmov.f32	s0, s15
 8005cfe:	48a1      	ldr	r0, [pc, #644]	@ (8005f84 <update_homing_sequence+0x570>)
 8005d00:	f7fb fa8a 	bl	8001218 <PID_CONTROLLER_Compute>
 8005d04:	eeb0 8a40 	vmov.f32	s16, s0
				PID_CONTROLLER_Compute(&prismatic_velocity_pid,
						prismatic_axis.vel_error),
				ZGX45RGG_400RPM_Constant.U_max,
 8005d08:	4b9f      	ldr	r3, [pc, #636]	@ (8005f88 <update_homing_sequence+0x574>)
 8005d0a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		prismatic_axis.command_pos = PWM_Satuation(
 8005d0e:	4610      	mov	r0, r2
 8005d10:	4619      	mov	r1, r3
 8005d12:	f7fa fed7 	bl	8000ac4 <__aeabi_d2iz>
 8005d16:	4604      	mov	r4, r0
				-ZGX45RGG_400RPM_Constant.U_max);
 8005d18:	4b9b      	ldr	r3, [pc, #620]	@ (8005f88 <update_homing_sequence+0x574>)
 8005d1a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8005d1e:	603a      	str	r2, [r7, #0]
 8005d20:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8005d24:	607b      	str	r3, [r7, #4]
		prismatic_axis.command_pos = PWM_Satuation(
 8005d26:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d2a:	f7fa fecb 	bl	8000ac4 <__aeabi_d2iz>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	4619      	mov	r1, r3
 8005d32:	4620      	mov	r0, r4
 8005d34:	eeb0 0a48 	vmov.f32	s0, s16
 8005d38:	f7fb fa0c 	bl	8001154 <PWM_Satuation>
 8005d3c:	ee07 0a90 	vmov	s15, r0
 8005d40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d44:	4b8d      	ldr	r3, [pc, #564]	@ (8005f7c <update_homing_sequence+0x568>)
 8005d46:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		// Add feedforward compensation during homing
		prismatic_axis.ffd = PRISMATIC_MOTOR_FFD_Compute(&prismatic_motor_ffd,
 8005d4a:	eebd 0a00 	vmov.f32	s0, #208	@ 0xbe800000 -0.250
 8005d4e:	488f      	ldr	r0, [pc, #572]	@ (8005f8c <update_homing_sequence+0x578>)
 8005d50:	f7fb fd7e 	bl	8001850 <PRISMATIC_MOTOR_FFD_Compute>
 8005d54:	eef0 7a40 	vmov.f32	s15, s0
 8005d58:	4b88      	ldr	r3, [pc, #544]	@ (8005f7c <update_homing_sequence+0x568>)
 8005d5a:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
				-HOMING_PRIS_VELOCITY / 1000.0f);
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 8005d5e:	4b8c      	ldr	r3, [pc, #560]	@ (8005f90 <update_homing_sequence+0x57c>)
 8005d60:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
				revolute_encoder.rads, 0.0f, prismatic_encoder.mm / 1000.0f);
 8005d64:	4b8b      	ldr	r3, [pc, #556]	@ (8005f94 <update_homing_sequence+0x580>)
 8005d66:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 8005d6a:	ed9f 6a8b 	vldr	s12, [pc, #556]	@ 8005f98 <update_homing_sequence+0x584>
 8005d6e:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8005d72:	eeb0 1a66 	vmov.f32	s2, s13
 8005d76:	eddf 0a89 	vldr	s1, [pc, #548]	@ 8005f9c <update_homing_sequence+0x588>
 8005d7a:	eeb0 0a47 	vmov.f32	s0, s14
 8005d7e:	4888      	ldr	r0, [pc, #544]	@ (8005fa0 <update_homing_sequence+0x58c>)
 8005d80:	f7fb fdf9 	bl	8001976 <PRISMATIC_MOTOR_DFD_Compute>
 8005d84:	eef0 7a40 	vmov.f32	s15, s0
 8005d88:	4b7c      	ldr	r3, [pc, #496]	@ (8005f7c <update_homing_sequence+0x568>)
 8005d8a:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
		prismatic_axis.command_pos += prismatic_axis.ffd + prismatic_axis.dfd;
 8005d8e:	4b7b      	ldr	r3, [pc, #492]	@ (8005f7c <update_homing_sequence+0x568>)
 8005d90:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8005d94:	4b79      	ldr	r3, [pc, #484]	@ (8005f7c <update_homing_sequence+0x568>)
 8005d96:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 8005d9a:	4b78      	ldr	r3, [pc, #480]	@ (8005f7c <update_homing_sequence+0x568>)
 8005d9c:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8005da0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005da4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005da8:	4b74      	ldr	r3, [pc, #464]	@ (8005f7c <update_homing_sequence+0x568>)
 8005daa:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8005dae:	4b73      	ldr	r3, [pc, #460]	@ (8005f7c <update_homing_sequence+0x568>)
 8005db0:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
				ZGX45RGG_400RPM_Constant.U_max,
 8005db4:	4b74      	ldr	r3, [pc, #464]	@ (8005f88 <update_homing_sequence+0x574>)
 8005db6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8005dba:	4610      	mov	r0, r2
 8005dbc:	4619      	mov	r1, r3
 8005dbe:	f7fa fe81 	bl	8000ac4 <__aeabi_d2iz>
 8005dc2:	4604      	mov	r4, r0
				-ZGX45RGG_400RPM_Constant.U_max);
 8005dc4:	4b70      	ldr	r3, [pc, #448]	@ (8005f88 <update_homing_sequence+0x574>)
 8005dc6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8005dca:	4615      	mov	r5, r2
 8005dcc:	f083 4600 	eor.w	r6, r3, #2147483648	@ 0x80000000
		prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8005dd0:	4628      	mov	r0, r5
 8005dd2:	4631      	mov	r1, r6
 8005dd4:	f7fa fe76 	bl	8000ac4 <__aeabi_d2iz>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	4619      	mov	r1, r3
 8005ddc:	4620      	mov	r0, r4
 8005dde:	eeb0 0a48 	vmov.f32	s0, s16
 8005de2:	f7fb f9b7 	bl	8001154 <PWM_Satuation>
 8005de6:	ee07 0a90 	vmov	s15, r0
 8005dea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005dee:	4b63      	ldr	r3, [pc, #396]	@ (8005f7c <update_homing_sequence+0x568>)
 8005df0:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		if (up_photo) {
 8005df4:	4b6b      	ldr	r3, [pc, #428]	@ (8005fa4 <update_homing_sequence+0x590>)
 8005df6:	781b      	ldrb	r3, [r3, #0]
 8005df8:	b2db      	uxtb	r3, r3
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	f000 8193 	beq.w	8006126 <update_homing_sequence+0x712>
			// Found up photo, stop and start delay before backup
			prismatic_axis.command_pos = 0.0f;
 8005e00:	4b5e      	ldr	r3, [pc, #376]	@ (8005f7c <update_homing_sequence+0x568>)
 8005e02:	f04f 0200 	mov.w	r2, #0
 8005e06:	625a      	str	r2, [r3, #36]	@ 0x24
			revolute_axis.command_pos = 0.0f;
 8005e08:	4b67      	ldr	r3, [pc, #412]	@ (8005fa8 <update_homing_sequence+0x594>)
 8005e0a:	f04f 0200 	mov.w	r2, #0
 8005e0e:	625a      	str	r2, [r3, #36]	@ 0x24
			motion_delay_timer = 0;
 8005e10:	4b66      	ldr	r3, [pc, #408]	@ (8005fac <update_homing_sequence+0x598>)
 8005e12:	2200      	movs	r2, #0
 8005e14:	601a      	str	r2, [r3, #0]
			homing_state = HOMING_DELAY_AFTER_UP_PHOTO;
 8005e16:	4b66      	ldr	r3, [pc, #408]	@ (8005fb0 <update_homing_sequence+0x59c>)
 8005e18:	2206      	movs	r2, #6
 8005e1a:	701a      	strb	r2, [r3, #0]
			up_photo = false; // Reset flag after use
 8005e1c:	4b61      	ldr	r3, [pc, #388]	@ (8005fa4 <update_homing_sequence+0x590>)
 8005e1e:	2200      	movs	r2, #0
 8005e20:	701a      	strb	r2, [r3, #0]
		}
		break;
 8005e22:	e180      	b.n	8006126 <update_homing_sequence+0x712>

	case HOMING_DELAY_AFTER_UP_PHOTO:
		// Stop motors and wait before starting backup procedure
		prismatic_axis.command_pos = 0.0f;
 8005e24:	4b55      	ldr	r3, [pc, #340]	@ (8005f7c <update_homing_sequence+0x568>)
 8005e26:	f04f 0200 	mov.w	r2, #0
 8005e2a:	625a      	str	r2, [r3, #36]	@ 0x24
		revolute_axis.command_pos = 0.0f;
 8005e2c:	4b5e      	ldr	r3, [pc, #376]	@ (8005fa8 <update_homing_sequence+0x594>)
 8005e2e:	f04f 0200 	mov.w	r2, #0
 8005e32:	625a      	str	r2, [r3, #36]	@ 0x24
		motion_delay_timer++;
 8005e34:	4b5d      	ldr	r3, [pc, #372]	@ (8005fac <update_homing_sequence+0x598>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	3301      	adds	r3, #1
 8005e3a:	4a5c      	ldr	r2, [pc, #368]	@ (8005fac <update_homing_sequence+0x598>)
 8005e3c:	6013      	str	r3, [r2, #0]
		if (motion_delay_timer >= 150) {
 8005e3e:	4b5b      	ldr	r3, [pc, #364]	@ (8005fac <update_homing_sequence+0x598>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	2b95      	cmp	r3, #149	@ 0x95
 8005e44:	f240 8171 	bls.w	800612a <update_homing_sequence+0x716>
			if (first_startup) {
 8005e48:	4b5a      	ldr	r3, [pc, #360]	@ (8005fb4 <update_homing_sequence+0x5a0>)
 8005e4a:	781b      	ldrb	r3, [r3, #0]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d01d      	beq.n	8005e8c <update_homing_sequence+0x478>
				// STARTUP: Check if prox is already detected before searching
				bool prox_detected = HAL_GPIO_ReadPin(prox_GPIO_Port, prox_Pin);
 8005e50:	2120      	movs	r1, #32
 8005e52:	4859      	ldr	r0, [pc, #356]	@ (8005fb8 <update_homing_sequence+0x5a4>)
 8005e54:	f007 fb0c 	bl	800d470 <HAL_GPIO_ReadPin>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	bf14      	ite	ne
 8005e5e:	2301      	movne	r3, #1
 8005e60:	2300      	moveq	r3, #0
 8005e62:	77fb      	strb	r3, [r7, #31]

				if (prox_detected) {
 8005e64:	7ffb      	ldrb	r3, [r7, #31]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d009      	beq.n	8005e7e <update_homing_sequence+0x46a>
					// Already at prox - skip search and go to completion
					motion_delay_timer = 0;
 8005e6a:	4b50      	ldr	r3, [pc, #320]	@ (8005fac <update_homing_sequence+0x598>)
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	601a      	str	r2, [r3, #0]
					homing_state = HOMING_DELAY_AFTER_PROX;
 8005e70:	4b4f      	ldr	r3, [pc, #316]	@ (8005fb0 <update_homing_sequence+0x59c>)
 8005e72:	220a      	movs	r2, #10
 8005e74:	701a      	strb	r2, [r3, #0]
					prox_count = 1; // Set count to indicate prox found
 8005e76:	4b51      	ldr	r3, [pc, #324]	@ (8005fbc <update_homing_sequence+0x5a8>)
 8005e78:	2201      	movs	r2, #1
 8005e7a:	601a      	str	r2, [r3, #0]
				homing_state = HOMING_REV_TO_ZERO_DEG;
				// Initialize trajectory variables for zero degree movement
				rev_to_zero_trajectory_started = false;
			}
		}
		break;
 8005e7c:	e155      	b.n	800612a <update_homing_sequence+0x716>
					homing_state = HOMING_REV_CW_TO_PROX1;
 8005e7e:	4b4c      	ldr	r3, [pc, #304]	@ (8005fb0 <update_homing_sequence+0x59c>)
 8005e80:	2209      	movs	r2, #9
 8005e82:	701a      	strb	r2, [r3, #0]
					prox_count = 0; // Reset prox counter
 8005e84:	4b4d      	ldr	r3, [pc, #308]	@ (8005fbc <update_homing_sequence+0x5a8>)
 8005e86:	2200      	movs	r2, #0
 8005e88:	601a      	str	r2, [r3, #0]
		break;
 8005e8a:	e14e      	b.n	800612a <update_homing_sequence+0x716>
				homing_state = HOMING_REV_TO_ZERO_DEG;
 8005e8c:	4b48      	ldr	r3, [pc, #288]	@ (8005fb0 <update_homing_sequence+0x59c>)
 8005e8e:	2207      	movs	r2, #7
 8005e90:	701a      	strb	r2, [r3, #0]
				rev_to_zero_trajectory_started = false;
 8005e92:	4b4b      	ldr	r3, [pc, #300]	@ (8005fc0 <update_homing_sequence+0x5ac>)
 8005e94:	2200      	movs	r2, #0
 8005e96:	701a      	strb	r2, [r3, #0]
		break;
 8005e98:	e147      	b.n	800612a <update_homing_sequence+0x716>

	case HOMING_REV_TO_ZERO_DEG:
		if (!rev_to_zero_trajectory_started) {
 8005e9a:	4b49      	ldr	r3, [pc, #292]	@ (8005fc0 <update_homing_sequence+0x5ac>)
 8005e9c:	781b      	ldrb	r3, [r3, #0]
 8005e9e:	f083 0301 	eor.w	r3, r3, #1
 8005ea2:	b2db      	uxtb	r3, r3
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d02c      	beq.n	8005f02 <update_homing_sequence+0x4ee>
			// Get current prismatic position (keep it where it is)
			float current_rev_deg = normalize_angle(revolute_encoder.rads)
 8005ea8:	4b39      	ldr	r3, [pc, #228]	@ (8005f90 <update_homing_sequence+0x57c>)
 8005eaa:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8005eae:	eeb0 0a67 	vmov.f32	s0, s15
 8005eb2:	f000 f95b 	bl	800616c <normalize_angle>
 8005eb6:	eef0 7a40 	vmov.f32	s15, s0
					* 180.0f / PI;
 8005eba:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8005fc4 <update_homing_sequence+0x5b0>
 8005ebe:	ee27 7a87 	vmul.f32	s14, s15, s14
			float current_rev_deg = normalize_angle(revolute_encoder.rads)
 8005ec2:	eddf 6a41 	vldr	s13, [pc, #260]	@ 8005fc8 <update_homing_sequence+0x5b4>
 8005ec6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005eca:	edc7 7a08 	vstr	s15, [r7, #32]

			check[0] = (int) current_rev_deg;
 8005ece:	edd7 7a08 	vldr	s15, [r7, #32]
 8005ed2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005ed6:	ee17 2a90 	vmov	r2, s15
 8005eda:	4b3c      	ldr	r3, [pc, #240]	@ (8005fcc <update_homing_sequence+0x5b8>)
 8005edc:	601a      	str	r2, [r3, #0]
			check[1] = (int) movement_deg;
 8005ede:	4b3c      	ldr	r3, [pc, #240]	@ (8005fd0 <update_homing_sequence+0x5bc>)
 8005ee0:	edd3 7a00 	vldr	s15, [r3]
 8005ee4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005ee8:	ee17 2a90 	vmov	r2, s15
 8005eec:	4b37      	ldr	r3, [pc, #220]	@ (8005fcc <update_homing_sequence+0x5b8>)
 8005eee:	605a      	str	r2, [r3, #4]

			// Start combined trajectory to move revolute to 0° while keeping prismatic position
			start_combined_trajectory(0.0, 0.0);
 8005ef0:	eddf 0a2a 	vldr	s1, [pc, #168]	@ 8005f9c <update_homing_sequence+0x588>
 8005ef4:	ed9f 0a29 	vldr	s0, [pc, #164]	@ 8005f9c <update_homing_sequence+0x588>
 8005ef8:	f000 faac 	bl	8006454 <start_combined_trajectory>

			rev_to_zero_trajectory_started = true;
 8005efc:	4b30      	ldr	r3, [pc, #192]	@ (8005fc0 <update_homing_sequence+0x5ac>)
 8005efe:	2201      	movs	r2, #1
 8005f00:	701a      	strb	r2, [r3, #0]
		}

		// Wait for trajectory to complete
		if (motion_sequence_state == MOTION_IDLE) {
 8005f02:	4b34      	ldr	r3, [pc, #208]	@ (8005fd4 <update_homing_sequence+0x5c0>)
 8005f04:	781b      	ldrb	r3, [r3, #0]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	f040 8111 	bne.w	800612e <update_homing_sequence+0x71a>
			// Trajectory completed, move to next homing state
			motion_delay_timer = 0;
 8005f0c:	4b27      	ldr	r3, [pc, #156]	@ (8005fac <update_homing_sequence+0x598>)
 8005f0e:	2200      	movs	r2, #0
 8005f10:	601a      	str	r2, [r3, #0]
			homing_state = HOMING_DELAY_AFTER_ZERO_DEG;
 8005f12:	4b27      	ldr	r3, [pc, #156]	@ (8005fb0 <update_homing_sequence+0x59c>)
 8005f14:	2208      	movs	r2, #8
 8005f16:	701a      	strb	r2, [r3, #0]
			prox_count = 0; // Reset prox counter for next stage
 8005f18:	4b28      	ldr	r3, [pc, #160]	@ (8005fbc <update_homing_sequence+0x5a8>)
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	601a      	str	r2, [r3, #0]
			rev_to_zero_trajectory_started = false; // Reset for next time
 8005f1e:	4b28      	ldr	r3, [pc, #160]	@ (8005fc0 <update_homing_sequence+0x5ac>)
 8005f20:	2200      	movs	r2, #0
 8005f22:	701a      	strb	r2, [r3, #0]
		}
		break;
 8005f24:	e103      	b.n	800612e <update_homing_sequence+0x71a>

	case HOMING_DELAY_AFTER_ZERO_DEG:
		// Stop motors and wait - let normal control handle this
		motion_delay_timer++;
 8005f26:	4b21      	ldr	r3, [pc, #132]	@ (8005fac <update_homing_sequence+0x598>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	3301      	adds	r3, #1
 8005f2c:	4a1f      	ldr	r2, [pc, #124]	@ (8005fac <update_homing_sequence+0x598>)
 8005f2e:	6013      	str	r3, [r2, #0]
		if (motion_delay_timer >= 150) {
 8005f30:	4b1e      	ldr	r3, [pc, #120]	@ (8005fac <update_homing_sequence+0x598>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	2b95      	cmp	r3, #149	@ 0x95
 8005f36:	f240 80fc 	bls.w	8006132 <update_homing_sequence+0x71e>
			// CHECK IF PROX IS ALREADY DETECTED BEFORE STARTING SEARCH
			bool prox_detected = HAL_GPIO_ReadPin(prox_GPIO_Port, prox_Pin);
 8005f3a:	2120      	movs	r1, #32
 8005f3c:	481e      	ldr	r0, [pc, #120]	@ (8005fb8 <update_homing_sequence+0x5a4>)
 8005f3e:	f007 fa97 	bl	800d470 <HAL_GPIO_ReadPin>
 8005f42:	4603      	mov	r3, r0
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	bf14      	ite	ne
 8005f48:	2301      	movne	r3, #1
 8005f4a:	2300      	moveq	r3, #0
 8005f4c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			if (prox_detected) {
 8005f50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d009      	beq.n	8005f6c <update_homing_sequence+0x558>
				// Already at proximity sensor - skip search and go directly to completion
				motion_delay_timer = 0;
 8005f58:	4b14      	ldr	r3, [pc, #80]	@ (8005fac <update_homing_sequence+0x598>)
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	601a      	str	r2, [r3, #0]
				homing_state = HOMING_COMPLETE;
 8005f5e:	4b14      	ldr	r3, [pc, #80]	@ (8005fb0 <update_homing_sequence+0x59c>)
 8005f60:	220b      	movs	r2, #11
 8005f62:	701a      	strb	r2, [r3, #0]
				prox_count = 1; // Set count to indicate prox found
 8005f64:	4b15      	ldr	r3, [pc, #84]	@ (8005fbc <update_homing_sequence+0x5a8>)
 8005f66:	2201      	movs	r2, #1
 8005f68:	601a      	str	r2, [r3, #0]
				// Not at prox - need to search for it
				homing_state = HOMING_REV_CW_TO_PROX1;
				prox_count = 0; // Reset counter for search
			}
		}
		break;
 8005f6a:	e0e2      	b.n	8006132 <update_homing_sequence+0x71e>
				homing_state = HOMING_REV_CW_TO_PROX1;
 8005f6c:	4b10      	ldr	r3, [pc, #64]	@ (8005fb0 <update_homing_sequence+0x59c>)
 8005f6e:	2209      	movs	r2, #9
 8005f70:	701a      	strb	r2, [r3, #0]
				prox_count = 0; // Reset counter for search
 8005f72:	4b12      	ldr	r3, [pc, #72]	@ (8005fbc <update_homing_sequence+0x5a8>)
 8005f74:	2200      	movs	r2, #0
 8005f76:	601a      	str	r2, [r3, #0]
		break;
 8005f78:	e0db      	b.n	8006132 <update_homing_sequence+0x71e>
 8005f7a:	bf00      	nop
 8005f7c:	20000704 	.word	0x20000704
 8005f80:	c37a0000 	.word	0xc37a0000
 8005f84:	20000a68 	.word	0x20000a68
 8005f88:	20000080 	.word	0x20000080
 8005f8c:	20000b08 	.word	0x20000b08
 8005f90:	200009e4 	.word	0x200009e4
 8005f94:	20000988 	.word	0x20000988
 8005f98:	447a0000 	.word	0x447a0000
 8005f9c:	00000000 	.word	0x00000000
 8005fa0:	20000b0c 	.word	0x20000b0c
 8005fa4:	200007e8 	.word	0x200007e8
 8005fa8:	20000748 	.word	0x20000748
 8005fac:	200007e0 	.word	0x200007e0
 8005fb0:	200007ea 	.word	0x200007ea
 8005fb4:	20000333 	.word	0x20000333
 8005fb8:	48000400 	.word	0x48000400
 8005fbc:	200007e4 	.word	0x200007e4
 8005fc0:	200007f7 	.word	0x200007f7
 8005fc4:	43340000 	.word	0x43340000
 8005fc8:	40490fdb 	.word	0x40490fdb
 8005fcc:	20000870 	.word	0x20000870
 8005fd0:	20000800 	.word	0x20000800
 8005fd4:	2000078c 	.word	0x2000078c

	case HOMING_REV_CW_TO_PROX1:
		// Move revolute clockwise with velocity control until prox count = 1
		revolute_axis.vel_error = -HOMING_REV_VELOCITY
				- revolute_axis.kalman_velocity;
 8005fd8:	4b5b      	ldr	r3, [pc, #364]	@ (8006148 <update_homing_sequence+0x734>)
 8005fda:	edd3 7a07 	vldr	s15, [r3, #28]
 8005fde:	eebf 7a08 	vmov.f32	s14, #248	@ 0xbfc00000 -1.5
 8005fe2:	ee77 7a67 	vsub.f32	s15, s14, s15
		revolute_axis.vel_error = -HOMING_REV_VELOCITY
 8005fe6:	4b58      	ldr	r3, [pc, #352]	@ (8006148 <update_homing_sequence+0x734>)
 8005fe8:	edc3 7a06 	vstr	s15, [r3, #24]
		revolute_axis.command_pos = PWM_Satuation(
 8005fec:	4b56      	ldr	r3, [pc, #344]	@ (8006148 <update_homing_sequence+0x734>)
 8005fee:	edd3 7a06 	vldr	s15, [r3, #24]
 8005ff2:	eeb0 0a67 	vmov.f32	s0, s15
 8005ff6:	4855      	ldr	r0, [pc, #340]	@ (800614c <update_homing_sequence+0x738>)
 8005ff8:	f7fb f90e 	bl	8001218 <PID_CONTROLLER_Compute>
 8005ffc:	eeb0 8a40 	vmov.f32	s16, s0
				PID_CONTROLLER_Compute(&revolute_velocity_pid,
						revolute_axis.vel_error),
				ZGX45RGG_150RPM_Constant.U_max,
 8006000:	4b53      	ldr	r3, [pc, #332]	@ (8006150 <update_homing_sequence+0x73c>)
 8006002:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		revolute_axis.command_pos = PWM_Satuation(
 8006006:	4610      	mov	r0, r2
 8006008:	4619      	mov	r1, r3
 800600a:	f7fa fd5b 	bl	8000ac4 <__aeabi_d2iz>
 800600e:	4604      	mov	r4, r0
				-ZGX45RGG_150RPM_Constant.U_max);
 8006010:	4b4f      	ldr	r3, [pc, #316]	@ (8006150 <update_homing_sequence+0x73c>)
 8006012:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8006016:	4692      	mov	sl, r2
 8006018:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
		revolute_axis.command_pos = PWM_Satuation(
 800601c:	4650      	mov	r0, sl
 800601e:	4659      	mov	r1, fp
 8006020:	f7fa fd50 	bl	8000ac4 <__aeabi_d2iz>
 8006024:	4603      	mov	r3, r0
 8006026:	4619      	mov	r1, r3
 8006028:	4620      	mov	r0, r4
 800602a:	eeb0 0a48 	vmov.f32	s0, s16
 800602e:	f7fb f891 	bl	8001154 <PWM_Satuation>
 8006032:	ee07 0a90 	vmov	s15, r0
 8006036:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800603a:	4b43      	ldr	r3, [pc, #268]	@ (8006148 <update_homing_sequence+0x734>)
 800603c:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		// Add feedforward compensation during homing
		revolute_axis.ffd = REVOLUTE_MOTOR_FFD_Compute(&revolute_motor_ffd,
 8006040:	eebf 0a08 	vmov.f32	s0, #248	@ 0xbfc00000 -1.5
 8006044:	4843      	ldr	r0, [pc, #268]	@ (8006154 <update_homing_sequence+0x740>)
 8006046:	f7fb fa85 	bl	8001554 <REVOLUTE_MOTOR_FFD_Compute>
 800604a:	eef0 7a40 	vmov.f32	s15, s0
 800604e:	4b3e      	ldr	r3, [pc, #248]	@ (8006148 <update_homing_sequence+0x734>)
 8006050:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
				-HOMING_REV_VELOCITY);
		revolute_axis.dfd = 0.0;
 8006054:	4b3c      	ldr	r3, [pc, #240]	@ (8006148 <update_homing_sequence+0x734>)
 8006056:	f04f 0200 	mov.w	r2, #0
 800605a:	62da      	str	r2, [r3, #44]	@ 0x2c

		revolute_axis.command_pos += revolute_axis.ffd;
 800605c:	4b3a      	ldr	r3, [pc, #232]	@ (8006148 <update_homing_sequence+0x734>)
 800605e:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8006062:	4b39      	ldr	r3, [pc, #228]	@ (8006148 <update_homing_sequence+0x734>)
 8006064:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8006068:	ee77 7a27 	vadd.f32	s15, s14, s15
 800606c:	4b36      	ldr	r3, [pc, #216]	@ (8006148 <update_homing_sequence+0x734>)
 800606e:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8006072:	4b35      	ldr	r3, [pc, #212]	@ (8006148 <update_homing_sequence+0x734>)
 8006074:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
				ZGX45RGG_150RPM_Constant.U_max,
 8006078:	4b35      	ldr	r3, [pc, #212]	@ (8006150 <update_homing_sequence+0x73c>)
 800607a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 800607e:	4610      	mov	r0, r2
 8006080:	4619      	mov	r1, r3
 8006082:	f7fa fd1f 	bl	8000ac4 <__aeabi_d2iz>
 8006086:	4604      	mov	r4, r0
				-ZGX45RGG_150RPM_Constant.U_max);
 8006088:	4b31      	ldr	r3, [pc, #196]	@ (8006150 <update_homing_sequence+0x73c>)
 800608a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800608e:	4690      	mov	r8, r2
 8006090:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
		revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8006094:	4640      	mov	r0, r8
 8006096:	4649      	mov	r1, r9
 8006098:	f7fa fd14 	bl	8000ac4 <__aeabi_d2iz>
 800609c:	4603      	mov	r3, r0
 800609e:	4619      	mov	r1, r3
 80060a0:	4620      	mov	r0, r4
 80060a2:	eeb0 0a48 	vmov.f32	s0, s16
 80060a6:	f7fb f855 	bl	8001154 <PWM_Satuation>
 80060aa:	ee07 0a90 	vmov	s15, r0
 80060ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80060b2:	4b25      	ldr	r3, [pc, #148]	@ (8006148 <update_homing_sequence+0x734>)
 80060b4:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		if (prox_count >= 1) {
 80060b8:	4b27      	ldr	r3, [pc, #156]	@ (8006158 <update_homing_sequence+0x744>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d03a      	beq.n	8006136 <update_homing_sequence+0x722>
			// Found prox sensor, stop and start delay
			prismatic_axis.command_pos = 0.0f;
 80060c0:	4b26      	ldr	r3, [pc, #152]	@ (800615c <update_homing_sequence+0x748>)
 80060c2:	f04f 0200 	mov.w	r2, #0
 80060c6:	625a      	str	r2, [r3, #36]	@ 0x24
			revolute_axis.command_pos = 0.0f;
 80060c8:	4b1f      	ldr	r3, [pc, #124]	@ (8006148 <update_homing_sequence+0x734>)
 80060ca:	f04f 0200 	mov.w	r2, #0
 80060ce:	625a      	str	r2, [r3, #36]	@ 0x24
			motion_delay_timer = 0;
 80060d0:	4b23      	ldr	r3, [pc, #140]	@ (8006160 <update_homing_sequence+0x74c>)
 80060d2:	2200      	movs	r2, #0
 80060d4:	601a      	str	r2, [r3, #0]
			homing_state = HOMING_DELAY_AFTER_PROX;
 80060d6:	4b23      	ldr	r3, [pc, #140]	@ (8006164 <update_homing_sequence+0x750>)
 80060d8:	220a      	movs	r2, #10
 80060da:	701a      	strb	r2, [r3, #0]
		}
		break;
 80060dc:	e02b      	b.n	8006136 <update_homing_sequence+0x722>

	case HOMING_DELAY_AFTER_PROX:
		// Stop motors and wait
		prismatic_axis.command_pos = 0.0f;
 80060de:	4b1f      	ldr	r3, [pc, #124]	@ (800615c <update_homing_sequence+0x748>)
 80060e0:	f04f 0200 	mov.w	r2, #0
 80060e4:	625a      	str	r2, [r3, #36]	@ 0x24
		revolute_axis.command_pos = 0.0f;
 80060e6:	4b18      	ldr	r3, [pc, #96]	@ (8006148 <update_homing_sequence+0x734>)
 80060e8:	f04f 0200 	mov.w	r2, #0
 80060ec:	625a      	str	r2, [r3, #36]	@ 0x24
		motion_delay_timer++;
 80060ee:	4b1c      	ldr	r3, [pc, #112]	@ (8006160 <update_homing_sequence+0x74c>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	3301      	adds	r3, #1
 80060f4:	4a1a      	ldr	r2, [pc, #104]	@ (8006160 <update_homing_sequence+0x74c>)
 80060f6:	6013      	str	r3, [r2, #0]
		if (motion_delay_timer >= 150) {
 80060f8:	4b19      	ldr	r3, [pc, #100]	@ (8006160 <update_homing_sequence+0x74c>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	2b95      	cmp	r3, #149	@ 0x95
 80060fe:	d91c      	bls.n	800613a <update_homing_sequence+0x726>
			homing_state = HOMING_COMPLETE;
 8006100:	4b18      	ldr	r3, [pc, #96]	@ (8006164 <update_homing_sequence+0x750>)
 8006102:	220b      	movs	r2, #11
 8006104:	701a      	strb	r2, [r3, #0]
		}
		break;
 8006106:	e018      	b.n	800613a <update_homing_sequence+0x726>

	case HOMING_COMPLETE:
		check[5] = 99;
 8006108:	4b17      	ldr	r3, [pc, #92]	@ (8006168 <update_homing_sequence+0x754>)
 800610a:	2263      	movs	r2, #99	@ 0x63
 800610c:	615a      	str	r2, [r3, #20]
		NVIC_SystemReset();
 800610e:	f7ff fac3 	bl	8005698 <__NVIC_SystemReset>
		return;
 8006112:	bf00      	nop
 8006114:	e012      	b.n	800613c <update_homing_sequence+0x728>
		break;

	case HOMING_IDLE:
	default:
		break;
 8006116:	bf00      	nop
 8006118:	e010      	b.n	800613c <update_homing_sequence+0x728>
		break;
 800611a:	bf00      	nop
 800611c:	e00e      	b.n	800613c <update_homing_sequence+0x728>
		break;
 800611e:	bf00      	nop
 8006120:	e00c      	b.n	800613c <update_homing_sequence+0x728>
		break;
 8006122:	bf00      	nop
 8006124:	e00a      	b.n	800613c <update_homing_sequence+0x728>
		break;
 8006126:	bf00      	nop
 8006128:	e008      	b.n	800613c <update_homing_sequence+0x728>
		break;
 800612a:	bf00      	nop
 800612c:	e006      	b.n	800613c <update_homing_sequence+0x728>
		break;
 800612e:	bf00      	nop
 8006130:	e004      	b.n	800613c <update_homing_sequence+0x728>
		break;
 8006132:	bf00      	nop
 8006134:	e002      	b.n	800613c <update_homing_sequence+0x728>
		break;
 8006136:	bf00      	nop
 8006138:	e000      	b.n	800613c <update_homing_sequence+0x728>
		break;
 800613a:	bf00      	nop
	}
}
 800613c:	372c      	adds	r7, #44	@ 0x2c
 800613e:	46bd      	mov	sp, r7
 8006140:	ecbd 8b02 	vpop	{d8}
 8006144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006148:	20000748 	.word	0x20000748
 800614c:	20000ab8 	.word	0x20000ab8
 8006150:	20000000 	.word	0x20000000
 8006154:	20000b14 	.word	0x20000b14
 8006158:	200007e4 	.word	0x200007e4
 800615c:	20000704 	.word	0x20000704
 8006160:	200007e0 	.word	0x200007e0
 8006164:	200007ea 	.word	0x200007ea
 8006168:	20000870 	.word	0x20000870

0800616c <normalize_angle>:

float normalize_angle(float angle_rad) {
 800616c:	b580      	push	{r7, lr}
 800616e:	b084      	sub	sp, #16
 8006170:	af00      	add	r7, sp, #0
 8006172:	ed87 0a01 	vstr	s0, [r7, #4]
	float result = fmodf(angle_rad, 2.0f * PI);
 8006176:	eddf 0a0f 	vldr	s1, [pc, #60]	@ 80061b4 <normalize_angle+0x48>
 800617a:	ed97 0a01 	vldr	s0, [r7, #4]
 800617e:	f00d f8a7 	bl	80132d0 <fmodf>
 8006182:	ed87 0a03 	vstr	s0, [r7, #12]
	if (result < 0.0f) {
 8006186:	edd7 7a03 	vldr	s15, [r7, #12]
 800618a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800618e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006192:	d507      	bpl.n	80061a4 <normalize_angle+0x38>
		result += 2.0f * PI;
 8006194:	edd7 7a03 	vldr	s15, [r7, #12]
 8006198:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 80061b4 <normalize_angle+0x48>
 800619c:	ee77 7a87 	vadd.f32	s15, s15, s14
 80061a0:	edc7 7a03 	vstr	s15, [r7, #12]
	}
	return result;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	ee07 3a90 	vmov	s15, r3
}
 80061aa:	eeb0 0a67 	vmov.f32	s0, s15
 80061ae:	3710      	adds	r7, #16
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}
 80061b4:	40c90fdb 	.word	0x40c90fdb

080061b8 <calculate_movement_deg>:

float calculate_movement_deg(float current_deg, float target_deg) {
 80061b8:	b480      	push	{r7}
 80061ba:	b085      	sub	sp, #20
 80061bc:	af00      	add	r7, sp, #0
 80061be:	ed87 0a01 	vstr	s0, [r7, #4]
 80061c2:	edc7 0a00 	vstr	s1, [r7]
	float movement = 0.0f;
 80061c6:	f04f 0300 	mov.w	r3, #0
 80061ca:	60fb      	str	r3, [r7, #12]

	// Validate inputs
	if (!isfinite(current_deg) || !isfinite(target_deg)) {
 80061cc:	edd7 7a01 	vldr	s15, [r7, #4]
 80061d0:	eef0 7ae7 	vabs.f32	s15, s15
 80061d4:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 8006434 <calculate_movement_deg+0x27c>
 80061d8:	eef4 7a47 	vcmp.f32	s15, s14
 80061dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061e0:	d80a      	bhi.n	80061f8 <calculate_movement_deg+0x40>
 80061e2:	edd7 7a00 	vldr	s15, [r7]
 80061e6:	eef0 7ae7 	vabs.f32	s15, s15
 80061ea:	ed9f 7a92 	vldr	s14, [pc, #584]	@ 8006434 <calculate_movement_deg+0x27c>
 80061ee:	eef4 7a47 	vcmp.f32	s15, s14
 80061f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061f6:	d902      	bls.n	80061fe <calculate_movement_deg+0x46>
		return 0.0f;
 80061f8:	f04f 0300 	mov.w	r3, #0
 80061fc:	e111      	b.n	8006422 <calculate_movement_deg+0x26a>
	}

	// Normalize angles to 0-360 range
	while (current_deg < 0.0f)
 80061fe:	e007      	b.n	8006210 <calculate_movement_deg+0x58>
		current_deg += 360.0f;
 8006200:	edd7 7a01 	vldr	s15, [r7, #4]
 8006204:	ed9f 7a8c 	vldr	s14, [pc, #560]	@ 8006438 <calculate_movement_deg+0x280>
 8006208:	ee77 7a87 	vadd.f32	s15, s15, s14
 800620c:	edc7 7a01 	vstr	s15, [r7, #4]
	while (current_deg < 0.0f)
 8006210:	edd7 7a01 	vldr	s15, [r7, #4]
 8006214:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800621c:	d4f0      	bmi.n	8006200 <calculate_movement_deg+0x48>
	while (current_deg >= 360.0f)
 800621e:	e007      	b.n	8006230 <calculate_movement_deg+0x78>
		current_deg -= 360.0f;
 8006220:	edd7 7a01 	vldr	s15, [r7, #4]
 8006224:	ed9f 7a84 	vldr	s14, [pc, #528]	@ 8006438 <calculate_movement_deg+0x280>
 8006228:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800622c:	edc7 7a01 	vstr	s15, [r7, #4]
	while (current_deg >= 360.0f)
 8006230:	edd7 7a01 	vldr	s15, [r7, #4]
 8006234:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8006438 <calculate_movement_deg+0x280>
 8006238:	eef4 7ac7 	vcmpe.f32	s15, s14
 800623c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006240:	daee      	bge.n	8006220 <calculate_movement_deg+0x68>
	while (target_deg < 0.0f)
 8006242:	e007      	b.n	8006254 <calculate_movement_deg+0x9c>
		target_deg += 360.0f;
 8006244:	edd7 7a00 	vldr	s15, [r7]
 8006248:	ed9f 7a7b 	vldr	s14, [pc, #492]	@ 8006438 <calculate_movement_deg+0x280>
 800624c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006250:	edc7 7a00 	vstr	s15, [r7]
	while (target_deg < 0.0f)
 8006254:	edd7 7a00 	vldr	s15, [r7]
 8006258:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800625c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006260:	d4f0      	bmi.n	8006244 <calculate_movement_deg+0x8c>
	while (target_deg >= 360.0f)
 8006262:	e007      	b.n	8006274 <calculate_movement_deg+0xbc>
		target_deg -= 360.0f;
 8006264:	edd7 7a00 	vldr	s15, [r7]
 8006268:	ed9f 7a73 	vldr	s14, [pc, #460]	@ 8006438 <calculate_movement_deg+0x280>
 800626c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006270:	edc7 7a00 	vstr	s15, [r7]
	while (target_deg >= 360.0f)
 8006274:	edd7 7a00 	vldr	s15, [r7]
 8006278:	ed9f 7a6f 	vldr	s14, [pc, #444]	@ 8006438 <calculate_movement_deg+0x280>
 800627c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006284:	daee      	bge.n	8006264 <calculate_movement_deg+0xac>

	// If both angles are on the same side of 180°
	if ((current_deg < 180.0f && target_deg < 180.0f)
 8006286:	edd7 7a01 	vldr	s15, [r7, #4]
 800628a:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 800643c <calculate_movement_deg+0x284>
 800628e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006296:	d508      	bpl.n	80062aa <calculate_movement_deg+0xf2>
 8006298:	edd7 7a00 	vldr	s15, [r7]
 800629c:	ed9f 7a67 	vldr	s14, [pc, #412]	@ 800643c <calculate_movement_deg+0x284>
 80062a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80062a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062a8:	d411      	bmi.n	80062ce <calculate_movement_deg+0x116>
			|| (current_deg >= 180.0f && target_deg >= 180.0f)) {
 80062aa:	edd7 7a01 	vldr	s15, [r7, #4]
 80062ae:	ed9f 7a63 	vldr	s14, [pc, #396]	@ 800643c <calculate_movement_deg+0x284>
 80062b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80062b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062ba:	db33      	blt.n	8006324 <calculate_movement_deg+0x16c>
 80062bc:	edd7 7a00 	vldr	s15, [r7]
 80062c0:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 800643c <calculate_movement_deg+0x284>
 80062c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80062c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062cc:	db2a      	blt.n	8006324 <calculate_movement_deg+0x16c>
		// Simple case - take shortest path
		movement = target_deg - current_deg;
 80062ce:	ed97 7a00 	vldr	s14, [r7]
 80062d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80062d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80062da:	edc7 7a03 	vstr	s15, [r7, #12]

		// Ensure shortest path
		if (movement > 180.0f)
 80062de:	edd7 7a03 	vldr	s15, [r7, #12]
 80062e2:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 800643c <calculate_movement_deg+0x284>
 80062e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80062ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062ee:	dd07      	ble.n	8006300 <calculate_movement_deg+0x148>
			movement -= 360.0f;
 80062f0:	edd7 7a03 	vldr	s15, [r7, #12]
 80062f4:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 8006438 <calculate_movement_deg+0x280>
 80062f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80062fc:	edc7 7a03 	vstr	s15, [r7, #12]
		if (movement < -180.0f)
 8006300:	edd7 7a03 	vldr	s15, [r7, #12]
 8006304:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 8006440 <calculate_movement_deg+0x288>
 8006308:	eef4 7ac7 	vcmpe.f32	s15, s14
 800630c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006310:	d562      	bpl.n	80063d8 <calculate_movement_deg+0x220>
			movement += 360.0f;
 8006312:	edd7 7a03 	vldr	s15, [r7, #12]
 8006316:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8006438 <calculate_movement_deg+0x280>
 800631a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800631e:	edc7 7a03 	vstr	s15, [r7, #12]
		if (movement < -180.0f)
 8006322:	e059      	b.n	80063d8 <calculate_movement_deg+0x220>
	}
	// If we need to cross the 180° boundary
	else {
		// If we need to cross the 180° boundary
		if (current_deg < 180.0f) {
 8006324:	edd7 7a01 	vldr	s15, [r7, #4]
 8006328:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 800643c <calculate_movement_deg+0x284>
 800632c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006334:	d52a      	bpl.n	800638c <calculate_movement_deg+0x1d4>
			// Current < 180, target > 180
			// Go counterclockwise through 0°
			if (current_deg < target_deg - 180.0f) {
 8006336:	edd7 7a00 	vldr	s15, [r7]
 800633a:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 800643c <calculate_movement_deg+0x284>
 800633e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006342:	ed97 7a01 	vldr	s14, [r7, #4]
 8006346:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800634a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800634e:	d50e      	bpl.n	800636e <calculate_movement_deg+0x1b6>
				movement = -(current_deg + (360.0f - target_deg)); // Negative = clockwise
 8006350:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8006438 <calculate_movement_deg+0x280>
 8006354:	edd7 7a00 	vldr	s15, [r7]
 8006358:	ee37 7a67 	vsub.f32	s14, s14, s15
 800635c:	edd7 7a01 	vldr	s15, [r7, #4]
 8006360:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006364:	eef1 7a67 	vneg.f32	s15, s15
 8006368:	edc7 7a03 	vstr	s15, [r7, #12]
 800636c:	e034      	b.n	80063d8 <calculate_movement_deg+0x220>
			} else {
				movement = -(current_deg - target_deg + 360.0f); // Negative = clockwise
 800636e:	ed97 7a01 	vldr	s14, [r7, #4]
 8006372:	edd7 7a00 	vldr	s15, [r7]
 8006376:	ee77 7a67 	vsub.f32	s15, s14, s15
 800637a:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8006438 <calculate_movement_deg+0x280>
 800637e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006382:	eef1 7a67 	vneg.f32	s15, s15
 8006386:	edc7 7a03 	vstr	s15, [r7, #12]
 800638a:	e025      	b.n	80063d8 <calculate_movement_deg+0x220>
			}
		} else {
			// Current > 180, target < 180
			// Go clockwise through 0°
			if (target_deg < current_deg - 180.0f) {
 800638c:	edd7 7a01 	vldr	s15, [r7, #4]
 8006390:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 800643c <calculate_movement_deg+0x284>
 8006394:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006398:	ed97 7a00 	vldr	s14, [r7]
 800639c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80063a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063a4:	d50c      	bpl.n	80063c0 <calculate_movement_deg+0x208>
				movement = 360.0f - current_deg + target_deg; // Positive = counterclockwise
 80063a6:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8006438 <calculate_movement_deg+0x280>
 80063aa:	edd7 7a01 	vldr	s15, [r7, #4]
 80063ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80063b2:	ed97 7a00 	vldr	s14, [r7]
 80063b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80063ba:	edc7 7a03 	vstr	s15, [r7, #12]
 80063be:	e00b      	b.n	80063d8 <calculate_movement_deg+0x220>
			} else {
				movement = target_deg - current_deg + 360.0f; // Positive = counterclockwise
 80063c0:	ed97 7a00 	vldr	s14, [r7]
 80063c4:	edd7 7a01 	vldr	s15, [r7, #4]
 80063c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80063cc:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8006438 <calculate_movement_deg+0x280>
 80063d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80063d4:	edc7 7a03 	vstr	s15, [r7, #12]
			}
		}
	}

	// Final validation
	if (!isfinite(movement)) {
 80063d8:	edd7 7a03 	vldr	s15, [r7, #12]
 80063dc:	eef0 7ae7 	vabs.f32	s15, s15
 80063e0:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8006434 <calculate_movement_deg+0x27c>
 80063e4:	eef4 7a47 	vcmp.f32	s15, s14
 80063e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063ec:	d902      	bls.n	80063f4 <calculate_movement_deg+0x23c>
		movement = 0.0f;
 80063ee:	f04f 0300 	mov.w	r3, #0
 80063f2:	60fb      	str	r3, [r7, #12]
	}

	// Clamp to reasonable range
	if (movement > 359.0f)
 80063f4:	edd7 7a03 	vldr	s15, [r7, #12]
 80063f8:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8006444 <calculate_movement_deg+0x28c>
 80063fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006404:	dd01      	ble.n	800640a <calculate_movement_deg+0x252>
		movement = 359.0f;
 8006406:	4b10      	ldr	r3, [pc, #64]	@ (8006448 <calculate_movement_deg+0x290>)
 8006408:	60fb      	str	r3, [r7, #12]
	if (movement < -359.0f)
 800640a:	edd7 7a03 	vldr	s15, [r7, #12]
 800640e:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 800644c <calculate_movement_deg+0x294>
 8006412:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800641a:	d501      	bpl.n	8006420 <calculate_movement_deg+0x268>
		movement = -359.0f;
 800641c:	4b0c      	ldr	r3, [pc, #48]	@ (8006450 <calculate_movement_deg+0x298>)
 800641e:	60fb      	str	r3, [r7, #12]

	return movement;
 8006420:	68fb      	ldr	r3, [r7, #12]
}
 8006422:	ee07 3a90 	vmov	s15, r3
 8006426:	eeb0 0a67 	vmov.f32	s0, s15
 800642a:	3714      	adds	r7, #20
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr
 8006434:	7f7fffff 	.word	0x7f7fffff
 8006438:	43b40000 	.word	0x43b40000
 800643c:	43340000 	.word	0x43340000
 8006440:	c3340000 	.word	0xc3340000
 8006444:	43b38000 	.word	0x43b38000
 8006448:	43b38000 	.word	0x43b38000
 800644c:	c3b38000 	.word	0xc3b38000
 8006450:	c3b38000 	.word	0xc3b38000

08006454 <start_combined_trajectory>:

void start_combined_trajectory(float prismatic_target_mm,
		float revolute_target_deg) {
 8006454:	b590      	push	{r4, r7, lr}
 8006456:	ed2d 8b02 	vpush	{d8}
 800645a:	b091      	sub	sp, #68	@ 0x44
 800645c:	af00      	add	r7, sp, #0
 800645e:	ed87 0a01 	vstr	s0, [r7, #4]
 8006462:	edc7 0a00 	vstr	s1, [r7]
	bool allow_during_homing = (homing_active
 8006466:	4bb5      	ldr	r3, [pc, #724]	@ (800673c <start_combined_trajectory+0x2e8>)
 8006468:	781b      	ldrb	r3, [r3, #0]
			&& homing_state == HOMING_REV_TO_ZERO_DEG);
 800646a:	2b00      	cmp	r3, #0
 800646c:	d005      	beq.n	800647a <start_combined_trajectory+0x26>
 800646e:	4bb4      	ldr	r3, [pc, #720]	@ (8006740 <start_combined_trajectory+0x2ec>)
 8006470:	781b      	ldrb	r3, [r3, #0]
 8006472:	2b07      	cmp	r3, #7
 8006474:	d101      	bne.n	800647a <start_combined_trajectory+0x26>
 8006476:	2301      	movs	r3, #1
 8006478:	e000      	b.n	800647c <start_combined_trajectory+0x28>
 800647a:	2300      	movs	r3, #0
	bool allow_during_homing = (homing_active
 800647c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8006480:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006484:	f003 0301 	and.w	r3, r3, #1
 8006488:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	if (is_emergency_active() || (homing_active && !allow_during_homing)) {
 800648c:	f001 fb18 	bl	8007ac0 <is_emergency_active>
 8006490:	4603      	mov	r3, r0
 8006492:	2b00      	cmp	r3, #0
 8006494:	f040 8258 	bne.w	8006948 <start_combined_trajectory+0x4f4>
 8006498:	4ba8      	ldr	r3, [pc, #672]	@ (800673c <start_combined_trajectory+0x2e8>)
 800649a:	781b      	ldrb	r3, [r3, #0]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d007      	beq.n	80064b0 <start_combined_trajectory+0x5c>
 80064a0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80064a4:	f083 0301 	eor.w	r3, r3, #1
 80064a8:	b2db      	uxtb	r3, r3
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	f040 824c 	bne.w	8006948 <start_combined_trajectory+0x4f4>
		return;
	}

	// Check if motion is already active
	if (motion_sequence_state != MOTION_IDLE) {
 80064b0:	4ba4      	ldr	r3, [pc, #656]	@ (8006744 <start_combined_trajectory+0x2f0>)
 80064b2:	781b      	ldrb	r3, [r3, #0]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	f040 8249 	bne.w	800694c <start_combined_trajectory+0x4f8>
		return; // Don't start new trajectory if one is active
	}

	float pris_current = prismatic_encoder.mm;
 80064ba:	4ba3      	ldr	r3, [pc, #652]	@ (8006748 <start_combined_trajectory+0x2f4>)
 80064bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80064be:	633b      	str	r3, [r7, #48]	@ 0x30
	float rev_current = revolute_encoder.rads;
 80064c0:	4ba2      	ldr	r3, [pc, #648]	@ (800674c <start_combined_trajectory+0x2f8>)
 80064c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064c4:	62fb      	str	r3, [r7, #44]	@ 0x2c

	// Reset trajectory structures completely
	memset(&prisEva, 0, sizeof(prisEva));
 80064c6:	2214      	movs	r2, #20
 80064c8:	2100      	movs	r1, #0
 80064ca:	48a1      	ldr	r0, [pc, #644]	@ (8006750 <start_combined_trajectory+0x2fc>)
 80064cc:	f00c fe06 	bl	80130dc <memset>
	memset(&revEva, 0, sizeof(revEva));
 80064d0:	2214      	movs	r2, #20
 80064d2:	2100      	movs	r1, #0
 80064d4:	489f      	ldr	r0, [pc, #636]	@ (8006754 <start_combined_trajectory+0x300>)
 80064d6:	f00c fe01 	bl	80130dc <memset>
	memset(&prisGen, 0, sizeof(prisGen));
 80064da:	2214      	movs	r2, #20
 80064dc:	2100      	movs	r1, #0
 80064de:	489e      	ldr	r0, [pc, #632]	@ (8006758 <start_combined_trajectory+0x304>)
 80064e0:	f00c fdfc 	bl	80130dc <memset>
	memset(&revGen, 0, sizeof(revGen));
 80064e4:	2214      	movs	r2, #20
 80064e6:	2100      	movs	r1, #0
 80064e8:	489c      	ldr	r0, [pc, #624]	@ (800675c <start_combined_trajectory+0x308>)
 80064ea:	f00c fdf7 	bl	80130dc <memset>

	prisEva.t = 0.0f;
 80064ee:	4b98      	ldr	r3, [pc, #608]	@ (8006750 <start_combined_trajectory+0x2fc>)
 80064f0:	f04f 0200 	mov.w	r2, #0
 80064f4:	60da      	str	r2, [r3, #12]
	prisEva.isFinised = false;
 80064f6:	4b96      	ldr	r3, [pc, #600]	@ (8006750 <start_combined_trajectory+0x2fc>)
 80064f8:	2200      	movs	r2, #0
 80064fa:	741a      	strb	r2, [r3, #16]
	revEva.t = 0.0f;
 80064fc:	4b95      	ldr	r3, [pc, #596]	@ (8006754 <start_combined_trajectory+0x300>)
 80064fe:	f04f 0200 	mov.w	r2, #0
 8006502:	60da      	str	r2, [r3, #12]
	revEva.isFinised = false;
 8006504:	4b93      	ldr	r3, [pc, #588]	@ (8006754 <start_combined_trajectory+0x300>)
 8006506:	2200      	movs	r2, #0
 8006508:	741a      	strb	r2, [r3, #16]

	prismatic_axis.initial_pos = pris_current;
 800650a:	4a95      	ldr	r2, [pc, #596]	@ (8006760 <start_combined_trajectory+0x30c>)
 800650c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800650e:	60d3      	str	r3, [r2, #12]
	revolute_axis.initial_pos = rev_current;
 8006510:	4a94      	ldr	r2, [pc, #592]	@ (8006764 <start_combined_trajectory+0x310>)
 8006512:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006514:	60d3      	str	r3, [r2, #12]

	prismatic_axis.target_pos = fminf(
 8006516:	eddf 0a94 	vldr	s1, [pc, #592]	@ 8006768 <start_combined_trajectory+0x314>
 800651a:	ed97 0a01 	vldr	s0, [r7, #4]
 800651e:	f00c ff9f 	bl	8013460 <fmaxf>
 8006522:	eef0 7a40 	vmov.f32	s15, s0
 8006526:	eddf 0a91 	vldr	s1, [pc, #580]	@ 800676c <start_combined_trajectory+0x318>
 800652a:	eeb0 0a67 	vmov.f32	s0, s15
 800652e:	f00c ffb4 	bl	801349a <fminf>
 8006532:	eef0 7a40 	vmov.f32	s15, s0
 8006536:	4b8a      	ldr	r3, [pc, #552]	@ (8006760 <start_combined_trajectory+0x30c>)
 8006538:	edc3 7a04 	vstr	s15, [r3, #16]
			fmaxf(prismatic_target_mm, PRISMATIC_MIN_POS), PRISMATIC_MAX_POS);

	// Check for NaN/infinity
	if (!isfinite(prismatic_axis.target_pos)) {
 800653c:	4b88      	ldr	r3, [pc, #544]	@ (8006760 <start_combined_trajectory+0x30c>)
 800653e:	edd3 7a04 	vldr	s15, [r3, #16]
 8006542:	eef0 7ae7 	vabs.f32	s15, s15
 8006546:	ed9f 7a8a 	vldr	s14, [pc, #552]	@ 8006770 <start_combined_trajectory+0x31c>
 800654a:	eef4 7a47 	vcmp.f32	s15, s14
 800654e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006552:	d903      	bls.n	800655c <start_combined_trajectory+0x108>
		prismatic_axis.target_pos = prismatic_axis.initial_pos;
 8006554:	4b82      	ldr	r3, [pc, #520]	@ (8006760 <start_combined_trajectory+0x30c>)
 8006556:	68db      	ldr	r3, [r3, #12]
 8006558:	4a81      	ldr	r2, [pc, #516]	@ (8006760 <start_combined_trajectory+0x30c>)
 800655a:	6113      	str	r3, [r2, #16]
	}

	float normalized_current = normalize_angle(rev_current);
 800655c:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 8006560:	f7ff fe04 	bl	800616c <normalize_angle>
 8006564:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28
	float current_deg = normalized_current * 180.0f / PI;
 8006568:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800656c:	ed9f 7a81 	vldr	s14, [pc, #516]	@ 8006774 <start_combined_trajectory+0x320>
 8006570:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006574:	eddf 6a80 	vldr	s13, [pc, #512]	@ 8006778 <start_combined_trajectory+0x324>
 8006578:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800657c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	movement_deg = calculate_movement_deg(current_deg, revolute_target_deg);
 8006580:	edd7 0a00 	vldr	s1, [r7]
 8006584:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8006588:	f7ff fe16 	bl	80061b8 <calculate_movement_deg>
 800658c:	eef0 7a40 	vmov.f32	s15, s0
 8006590:	4b7a      	ldr	r3, [pc, #488]	@ (800677c <start_combined_trajectory+0x328>)
 8006592:	edc3 7a00 	vstr	s15, [r3]

	// Validate movement_deg
	if (!isfinite(movement_deg)) {
 8006596:	4b79      	ldr	r3, [pc, #484]	@ (800677c <start_combined_trajectory+0x328>)
 8006598:	edd3 7a00 	vldr	s15, [r3]
 800659c:	eef0 7ae7 	vabs.f32	s15, s15
 80065a0:	ed9f 7a73 	vldr	s14, [pc, #460]	@ 8006770 <start_combined_trajectory+0x31c>
 80065a4:	eef4 7a47 	vcmp.f32	s15, s14
 80065a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065ac:	d903      	bls.n	80065b6 <start_combined_trajectory+0x162>
		movement_deg = 0.0f;
 80065ae:	4b73      	ldr	r3, [pc, #460]	@ (800677c <start_combined_trajectory+0x328>)
 80065b0:	f04f 0200 	mov.w	r2, #0
 80065b4:	601a      	str	r2, [r3, #0]
	}

	float movement_rad = movement_deg * PI / 180.0f;
 80065b6:	4b71      	ldr	r3, [pc, #452]	@ (800677c <start_combined_trajectory+0x328>)
 80065b8:	edd3 7a00 	vldr	s15, [r3]
 80065bc:	ed9f 7a6e 	vldr	s14, [pc, #440]	@ 8006778 <start_combined_trajectory+0x324>
 80065c0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80065c4:	eddf 6a6b 	vldr	s13, [pc, #428]	@ 8006774 <start_combined_trajectory+0x320>
 80065c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80065cc:	edc7 7a08 	vstr	s15, [r7, #32]
	revolute_axis.target_pos = revolute_axis.initial_pos + movement_rad;
 80065d0:	4b64      	ldr	r3, [pc, #400]	@ (8006764 <start_combined_trajectory+0x310>)
 80065d2:	ed93 7a03 	vldr	s14, [r3, #12]
 80065d6:	edd7 7a08 	vldr	s15, [r7, #32]
 80065da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80065de:	4b61      	ldr	r3, [pc, #388]	@ (8006764 <start_combined_trajectory+0x310>)
 80065e0:	edc3 7a04 	vstr	s15, [r3, #16]

	// Check if we're in HOMING_REV_TO_ZERO_DEG mode
	bool is_homing_zero_deg = (homing_active
 80065e4:	4b55      	ldr	r3, [pc, #340]	@ (800673c <start_combined_trajectory+0x2e8>)
 80065e6:	781b      	ldrb	r3, [r3, #0]
			&& homing_state == HOMING_REV_TO_ZERO_DEG);
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d005      	beq.n	80065f8 <start_combined_trajectory+0x1a4>
 80065ec:	4b54      	ldr	r3, [pc, #336]	@ (8006740 <start_combined_trajectory+0x2ec>)
 80065ee:	781b      	ldrb	r3, [r3, #0]
 80065f0:	2b07      	cmp	r3, #7
 80065f2:	d101      	bne.n	80065f8 <start_combined_trajectory+0x1a4>
 80065f4:	2301      	movs	r3, #1
 80065f6:	e000      	b.n	80065fa <start_combined_trajectory+0x1a6>
 80065f8:	2300      	movs	r3, #0
	bool is_homing_zero_deg = (homing_active
 80065fa:	77fb      	strb	r3, [r7, #31]
 80065fc:	7ffb      	ldrb	r3, [r7, #31]
 80065fe:	f003 0301 	and.w	r3, r3, #1
 8006602:	77fb      	strb	r3, [r7, #31]

	if (is_homing_zero_deg) {
 8006604:	7ffb      	ldrb	r3, [r7, #31]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d047      	beq.n	800669a <start_combined_trajectory+0x246>
		// HOMING_REV_TO_ZERO_DEG: Only generate revolute trajectory

		check[2]++;
 800660a:	4b5d      	ldr	r3, [pc, #372]	@ (8006780 <start_combined_trajectory+0x32c>)
 800660c:	689b      	ldr	r3, [r3, #8]
 800660e:	3301      	adds	r3, #1
 8006610:	4a5b      	ldr	r2, [pc, #364]	@ (8006780 <start_combined_trajectory+0x32c>)
 8006612:	6093      	str	r3, [r2, #8]

		Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 8006614:	4b53      	ldr	r3, [pc, #332]	@ (8006764 <start_combined_trajectory+0x310>)
 8006616:	ed93 8a03 	vldr	s16, [r3, #12]
 800661a:	4b52      	ldr	r3, [pc, #328]	@ (8006764 <start_combined_trajectory+0x310>)
 800661c:	edd3 8a04 	vldr	s17, [r3, #16]
				revolute_axis.target_pos,
				ZGX45RGG_150RPM_Constant.traject_qd_max,
 8006620:	4b58      	ldr	r3, [pc, #352]	@ (8006784 <start_combined_trajectory+0x330>)
 8006622:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
		Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 8006626:	4610      	mov	r0, r2
 8006628:	4619      	mov	r1, r3
 800662a:	f7fa fa93 	bl	8000b54 <__aeabi_d2f>
 800662e:	4604      	mov	r4, r0
				ZGX45RGG_150RPM_Constant.traject_qdd_max);
 8006630:	4b54      	ldr	r3, [pc, #336]	@ (8006784 <start_combined_trajectory+0x330>)
 8006632:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
		Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 8006636:	4610      	mov	r0, r2
 8006638:	4619      	mov	r1, r3
 800663a:	f7fa fa8b 	bl	8000b54 <__aeabi_d2f>
 800663e:	4603      	mov	r3, r0
 8006640:	ee01 3a90 	vmov	s3, r3
 8006644:	ee01 4a10 	vmov	s2, r4
 8006648:	eef0 0a68 	vmov.f32	s1, s17
 800664c:	eeb0 0a48 	vmov.f32	s0, s16
 8006650:	4842      	ldr	r0, [pc, #264]	@ (800675c <start_combined_trajectory+0x308>)
 8006652:	f7fd fe37 	bl	80042c4 <Trapezoidal_Generator>

		sync_motion_active = false;
 8006656:	4b4c      	ldr	r3, [pc, #304]	@ (8006788 <start_combined_trajectory+0x334>)
 8006658:	2200      	movs	r2, #0
 800665a:	701a      	strb	r2, [r3, #0]
		prismatic_axis.trajectory_active = false;
 800665c:	4b40      	ldr	r3, [pc, #256]	@ (8006760 <start_combined_trajectory+0x30c>)
 800665e:	2200      	movs	r2, #0
 8006660:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
		prismatic_axis.position = pris_current;
 8006664:	4a3e      	ldr	r2, [pc, #248]	@ (8006760 <start_combined_trajectory+0x30c>)
 8006666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006668:	6013      	str	r3, [r2, #0]
		prismatic_axis.velocity = 0.0f;
 800666a:	4b3d      	ldr	r3, [pc, #244]	@ (8006760 <start_combined_trajectory+0x30c>)
 800666c:	f04f 0200 	mov.w	r2, #0
 8006670:	605a      	str	r2, [r3, #4]

		revolute_axis.trajectory_active = true;
 8006672:	4b3c      	ldr	r3, [pc, #240]	@ (8006764 <start_combined_trajectory+0x310>)
 8006674:	2201      	movs	r2, #1
 8006676:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

		if (!current_drawing_sequence.sequence_active) {
 800667a:	4b44      	ldr	r3, [pc, #272]	@ (800678c <start_combined_trajectory+0x338>)
 800667c:	799b      	ldrb	r3, [r3, #6]
 800667e:	f083 0301 	eor.w	r3, r3, #1
 8006682:	b2db      	uxtb	r3, r3
 8006684:	2b00      	cmp	r3, #0
 8006686:	d001      	beq.n	800668c <start_combined_trajectory+0x238>
			plotter_pen_up();
 8006688:	f003 fb88 	bl	8009d9c <plotter_pen_up>
		}

		motion_delay_timer = 0;
 800668c:	4b40      	ldr	r3, [pc, #256]	@ (8006790 <start_combined_trajectory+0x33c>)
 800668e:	2200      	movs	r2, #0
 8006690:	601a      	str	r2, [r3, #0]
		motion_sequence_state = MOTION_PEN_UP_DELAY;
 8006692:	4b2c      	ldr	r3, [pc, #176]	@ (8006744 <start_combined_trajectory+0x2f0>)
 8006694:	2201      	movs	r2, #1
 8006696:	701a      	strb	r2, [r3, #0]
 8006698:	e159      	b.n	800694e <start_combined_trajectory+0x4fa>

	} else {
		// NORMAL TRAJECTORY: Check if this is for drawing or regular motion
		check[3]++;
 800669a:	4b39      	ldr	r3, [pc, #228]	@ (8006780 <start_combined_trajectory+0x32c>)
 800669c:	68db      	ldr	r3, [r3, #12]
 800669e:	3301      	adds	r3, #1
 80066a0:	4a37      	ldr	r2, [pc, #220]	@ (8006780 <start_combined_trajectory+0x32c>)
 80066a2:	60d3      	str	r3, [r2, #12]

		// Generate trajectories
		Trapezoidal_Generator(&prisGen, prismatic_axis.initial_pos,
 80066a4:	4b2e      	ldr	r3, [pc, #184]	@ (8006760 <start_combined_trajectory+0x30c>)
 80066a6:	ed93 8a03 	vldr	s16, [r3, #12]
 80066aa:	4b2d      	ldr	r3, [pc, #180]	@ (8006760 <start_combined_trajectory+0x30c>)
 80066ac:	edd3 8a04 	vldr	s17, [r3, #16]
				prismatic_axis.target_pos,
				ZGX45RGG_400RPM_Constant.traject_sd_max,
 80066b0:	4b38      	ldr	r3, [pc, #224]	@ (8006794 <start_combined_trajectory+0x340>)
 80066b2:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
		Trapezoidal_Generator(&prisGen, prismatic_axis.initial_pos,
 80066b6:	4610      	mov	r0, r2
 80066b8:	4619      	mov	r1, r3
 80066ba:	f7fa fa4b 	bl	8000b54 <__aeabi_d2f>
 80066be:	4604      	mov	r4, r0
				ZGX45RGG_400RPM_Constant.traject_sdd_max);
 80066c0:	4b34      	ldr	r3, [pc, #208]	@ (8006794 <start_combined_trajectory+0x340>)
 80066c2:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
		Trapezoidal_Generator(&prisGen, prismatic_axis.initial_pos,
 80066c6:	4610      	mov	r0, r2
 80066c8:	4619      	mov	r1, r3
 80066ca:	f7fa fa43 	bl	8000b54 <__aeabi_d2f>
 80066ce:	4603      	mov	r3, r0
 80066d0:	ee01 3a90 	vmov	s3, r3
 80066d4:	ee01 4a10 	vmov	s2, r4
 80066d8:	eef0 0a68 	vmov.f32	s1, s17
 80066dc:	eeb0 0a48 	vmov.f32	s0, s16
 80066e0:	481d      	ldr	r0, [pc, #116]	@ (8006758 <start_combined_trajectory+0x304>)
 80066e2:	f7fd fdef 	bl	80042c4 <Trapezoidal_Generator>

		Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 80066e6:	4b1f      	ldr	r3, [pc, #124]	@ (8006764 <start_combined_trajectory+0x310>)
 80066e8:	ed93 8a03 	vldr	s16, [r3, #12]
 80066ec:	4b1d      	ldr	r3, [pc, #116]	@ (8006764 <start_combined_trajectory+0x310>)
 80066ee:	edd3 8a04 	vldr	s17, [r3, #16]
				revolute_axis.target_pos,
				ZGX45RGG_150RPM_Constant.traject_qd_max,
 80066f2:	4b24      	ldr	r3, [pc, #144]	@ (8006784 <start_combined_trajectory+0x330>)
 80066f4:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
		Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 80066f8:	4610      	mov	r0, r2
 80066fa:	4619      	mov	r1, r3
 80066fc:	f7fa fa2a 	bl	8000b54 <__aeabi_d2f>
 8006700:	4604      	mov	r4, r0
				ZGX45RGG_150RPM_Constant.traject_qdd_max);
 8006702:	4b20      	ldr	r3, [pc, #128]	@ (8006784 <start_combined_trajectory+0x330>)
 8006704:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
		Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 8006708:	4610      	mov	r0, r2
 800670a:	4619      	mov	r1, r3
 800670c:	f7fa fa22 	bl	8000b54 <__aeabi_d2f>
 8006710:	4603      	mov	r3, r0
 8006712:	ee01 3a90 	vmov	s3, r3
 8006716:	ee01 4a10 	vmov	s2, r4
 800671a:	eef0 0a68 	vmov.f32	s1, s17
 800671e:	eeb0 0a48 	vmov.f32	s0, s16
 8006722:	480e      	ldr	r0, [pc, #56]	@ (800675c <start_combined_trajectory+0x308>)
 8006724:	f7fd fdce 	bl	80042c4 <Trapezoidal_Generator>

		// Determine if this is a drawing operation
		bool is_drawing_operation = current_drawing_sequence.sequence_active
 8006728:	4b18      	ldr	r3, [pc, #96]	@ (800678c <start_combined_trajectory+0x338>)
 800672a:	799b      	ldrb	r3, [r3, #6]
				|| word_drawing_active;
 800672c:	2b00      	cmp	r3, #0
 800672e:	d103      	bne.n	8006738 <start_combined_trajectory+0x2e4>
 8006730:	4b19      	ldr	r3, [pc, #100]	@ (8006798 <start_combined_trajectory+0x344>)
 8006732:	781b      	ldrb	r3, [r3, #0]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d031      	beq.n	800679c <start_combined_trajectory+0x348>
 8006738:	2301      	movs	r3, #1
 800673a:	e030      	b.n	800679e <start_combined_trajectory+0x34a>
 800673c:	200007eb 	.word	0x200007eb
 8006740:	200007ea 	.word	0x200007ea
 8006744:	2000078c 	.word	0x2000078c
 8006748:	20000988 	.word	0x20000988
 800674c:	200009e4 	.word	0x200009e4
 8006750:	200007b8 	.word	0x200007b8
 8006754:	200007cc 	.word	0x200007cc
 8006758:	20000790 	.word	0x20000790
 800675c:	200007a4 	.word	0x200007a4
 8006760:	20000704 	.word	0x20000704
 8006764:	20000748 	.word	0x20000748
 8006768:	00000000 	.word	0x00000000
 800676c:	43960000 	.word	0x43960000
 8006770:	7f7fffff 	.word	0x7f7fffff
 8006774:	43340000 	.word	0x43340000
 8006778:	40490fdb 	.word	0x40490fdb
 800677c:	20000800 	.word	0x20000800
 8006780:	20000870 	.word	0x20000870
 8006784:	20000000 	.word	0x20000000
 8006788:	200008b0 	.word	0x200008b0
 800678c:	200008b4 	.word	0x200008b4
 8006790:	200007e0 	.word	0x200007e0
 8006794:	20000080 	.word	0x20000080
 8006798:	200008c8 	.word	0x200008c8
 800679c:	2300      	movs	r3, #0
		bool is_drawing_operation = current_drawing_sequence.sequence_active
 800679e:	77bb      	strb	r3, [r7, #30]
 80067a0:	7fbb      	ldrb	r3, [r7, #30]
 80067a2:	f003 0301 	and.w	r3, r3, #1
 80067a6:	77bb      	strb	r3, [r7, #30]

		if (is_drawing_operation) {
 80067a8:	7fbb      	ldrb	r3, [r7, #30]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	f000 808b 	beq.w	80068c6 <start_combined_trajectory+0x472>
			// DRAWING MODE: Use synchronized motion
			// Calculate distances
			float pris_distance = fabsf(
					prismatic_axis.target_pos - prismatic_axis.initial_pos);
 80067b0:	4b69      	ldr	r3, [pc, #420]	@ (8006958 <start_combined_trajectory+0x504>)
 80067b2:	ed93 7a04 	vldr	s14, [r3, #16]
 80067b6:	4b68      	ldr	r3, [pc, #416]	@ (8006958 <start_combined_trajectory+0x504>)
 80067b8:	edd3 7a03 	vldr	s15, [r3, #12]
 80067bc:	ee77 7a67 	vsub.f32	s15, s14, s15
			float pris_distance = fabsf(
 80067c0:	eef0 7ae7 	vabs.f32	s15, s15
 80067c4:	edc7 7a06 	vstr	s15, [r7, #24]
			float rev_distance = fabsf(
					revolute_axis.target_pos - revolute_axis.initial_pos);
 80067c8:	4b64      	ldr	r3, [pc, #400]	@ (800695c <start_combined_trajectory+0x508>)
 80067ca:	ed93 7a04 	vldr	s14, [r3, #16]
 80067ce:	4b63      	ldr	r3, [pc, #396]	@ (800695c <start_combined_trajectory+0x508>)
 80067d0:	edd3 7a03 	vldr	s15, [r3, #12]
 80067d4:	ee77 7a67 	vsub.f32	s15, s14, s15
			float rev_distance = fabsf(
 80067d8:	eef0 7ae7 	vabs.f32	s15, s15
 80067dc:	edc7 7a05 	vstr	s15, [r7, #20]

			// Calculate time needed for each axis at their max speeds
			float pris_time_needed = 0.0f;
 80067e0:	f04f 0300 	mov.w	r3, #0
 80067e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
			float rev_time_needed = 0.0f;
 80067e6:	f04f 0300 	mov.w	r3, #0
 80067ea:	63bb      	str	r3, [r7, #56]	@ 0x38

			if (pris_distance > 0.1f) {
 80067ec:	edd7 7a06 	vldr	s15, [r7, #24]
 80067f0:	ed9f 7a5b 	vldr	s14, [pc, #364]	@ 8006960 <start_combined_trajectory+0x50c>
 80067f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80067f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067fc:	dd18      	ble.n	8006830 <start_combined_trajectory+0x3dc>
				// Time = distance / max_velocity, factor in acceleration/deceleration
				pris_time_needed = (pris_distance
						/ ZGX45RGG_400RPM_Constant.traject_sd_max) * 2.5f;
 80067fe:	69b8      	ldr	r0, [r7, #24]
 8006800:	f7f9 fe6e 	bl	80004e0 <__aeabi_f2d>
 8006804:	4b57      	ldr	r3, [pc, #348]	@ (8006964 <start_combined_trajectory+0x510>)
 8006806:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
 800680a:	f7f9 ffeb 	bl	80007e4 <__aeabi_ddiv>
 800680e:	4602      	mov	r2, r0
 8006810:	460b      	mov	r3, r1
 8006812:	4610      	mov	r0, r2
 8006814:	4619      	mov	r1, r3
 8006816:	f04f 0200 	mov.w	r2, #0
 800681a:	4b53      	ldr	r3, [pc, #332]	@ (8006968 <start_combined_trajectory+0x514>)
 800681c:	f7f9 feb8 	bl	8000590 <__aeabi_dmul>
 8006820:	4602      	mov	r2, r0
 8006822:	460b      	mov	r3, r1
				pris_time_needed = (pris_distance
 8006824:	4610      	mov	r0, r2
 8006826:	4619      	mov	r1, r3
 8006828:	f7fa f994 	bl	8000b54 <__aeabi_d2f>
 800682c:	4603      	mov	r3, r0
 800682e:	63fb      	str	r3, [r7, #60]	@ 0x3c
			}

			if (rev_distance > 0.01f) {
 8006830:	edd7 7a05 	vldr	s15, [r7, #20]
 8006834:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800696c <start_combined_trajectory+0x518>
 8006838:	eef4 7ac7 	vcmpe.f32	s15, s14
 800683c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006840:	dd18      	ble.n	8006874 <start_combined_trajectory+0x420>
				rev_time_needed = (rev_distance
						/ ZGX45RGG_150RPM_Constant.traject_qd_max) * 2.5f;
 8006842:	6978      	ldr	r0, [r7, #20]
 8006844:	f7f9 fe4c 	bl	80004e0 <__aeabi_f2d>
 8006848:	4b49      	ldr	r3, [pc, #292]	@ (8006970 <start_combined_trajectory+0x51c>)
 800684a:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 800684e:	f7f9 ffc9 	bl	80007e4 <__aeabi_ddiv>
 8006852:	4602      	mov	r2, r0
 8006854:	460b      	mov	r3, r1
 8006856:	4610      	mov	r0, r2
 8006858:	4619      	mov	r1, r3
 800685a:	f04f 0200 	mov.w	r2, #0
 800685e:	4b42      	ldr	r3, [pc, #264]	@ (8006968 <start_combined_trajectory+0x514>)
 8006860:	f7f9 fe96 	bl	8000590 <__aeabi_dmul>
 8006864:	4602      	mov	r2, r0
 8006866:	460b      	mov	r3, r1
				rev_time_needed = (rev_distance
 8006868:	4610      	mov	r0, r2
 800686a:	4619      	mov	r1, r3
 800686c:	f7fa f972 	bl	8000b54 <__aeabi_d2f>
 8006870:	4603      	mov	r3, r0
 8006872:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			// Use the longer time, with minimum time
			sync_total_time = fmaxf(pris_time_needed, rev_time_needed);
 8006874:	edd7 0a0e 	vldr	s1, [r7, #56]	@ 0x38
 8006878:	ed97 0a0f 	vldr	s0, [r7, #60]	@ 0x3c
 800687c:	f00c fdf0 	bl	8013460 <fmaxf>
 8006880:	eef0 7a40 	vmov.f32	s15, s0
 8006884:	4b3b      	ldr	r3, [pc, #236]	@ (8006974 <start_combined_trajectory+0x520>)
 8006886:	edc3 7a00 	vstr	s15, [r3]
			if (sync_total_time < 1.0f)
 800688a:	4b3a      	ldr	r3, [pc, #232]	@ (8006974 <start_combined_trajectory+0x520>)
 800688c:	edd3 7a00 	vldr	s15, [r3]
 8006890:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006894:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006898:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800689c:	d503      	bpl.n	80068a6 <start_combined_trajectory+0x452>
				sync_total_time = 1.0f; // Minimum 1 second
 800689e:	4b35      	ldr	r3, [pc, #212]	@ (8006974 <start_combined_trajectory+0x520>)
 80068a0:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80068a4:	601a      	str	r2, [r3, #0]

			// Initialize synchronized motion for drawing
			sync_motion_active = true;
 80068a6:	4b34      	ldr	r3, [pc, #208]	@ (8006978 <start_combined_trajectory+0x524>)
 80068a8:	2201      	movs	r2, #1
 80068aa:	701a      	strb	r2, [r3, #0]
			sync_start_time = 0.0f;
 80068ac:	4b33      	ldr	r3, [pc, #204]	@ (800697c <start_combined_trajectory+0x528>)
 80068ae:	f04f 0200 	mov.w	r2, #0
 80068b2:	601a      	str	r2, [r3, #0]
			prismatic_axis.trajectory_active = false;
 80068b4:	4b28      	ldr	r3, [pc, #160]	@ (8006958 <start_combined_trajectory+0x504>)
 80068b6:	2200      	movs	r2, #0
 80068b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
			revolute_axis.trajectory_active = false;
 80068bc:	4b27      	ldr	r3, [pc, #156]	@ (800695c <start_combined_trajectory+0x508>)
 80068be:	2200      	movs	r2, #0
 80068c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 80068c4:	e00e      	b.n	80068e4 <start_combined_trajectory+0x490>
		} else {
			// NORMAL MODE: Use independent trajectories
			sync_motion_active = false;
 80068c6:	4b2c      	ldr	r3, [pc, #176]	@ (8006978 <start_combined_trajectory+0x524>)
 80068c8:	2200      	movs	r2, #0
 80068ca:	701a      	strb	r2, [r3, #0]
			sync_start_time = 0.0f;
 80068cc:	4b2b      	ldr	r3, [pc, #172]	@ (800697c <start_combined_trajectory+0x528>)
 80068ce:	f04f 0200 	mov.w	r2, #0
 80068d2:	601a      	str	r2, [r3, #0]
			prismatic_axis.trajectory_active = true;
 80068d4:	4b20      	ldr	r3, [pc, #128]	@ (8006958 <start_combined_trajectory+0x504>)
 80068d6:	2201      	movs	r2, #1
 80068d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
			revolute_axis.trajectory_active = true;
 80068dc:	4b1f      	ldr	r3, [pc, #124]	@ (800695c <start_combined_trajectory+0x508>)
 80068de:	2201      	movs	r2, #1
 80068e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
		}

		// Handle pen up/down
		if (current_drawing_sequence.sequence_active
 80068e4:	4b26      	ldr	r3, [pc, #152]	@ (8006980 <start_combined_trajectory+0x52c>)
 80068e6:	799b      	ldrb	r3, [r3, #6]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d01c      	beq.n	8006926 <start_combined_trajectory+0x4d2>
				&& current_drawing_sequence.current_point > 0) {
 80068ec:	4b24      	ldr	r3, [pc, #144]	@ (8006980 <start_combined_trajectory+0x52c>)
 80068ee:	795b      	ldrb	r3, [r3, #5]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d018      	beq.n	8006926 <start_combined_trajectory+0x4d2>
			// ดูว่าจุดปัจจุบันต้องการวางปากกาหรือไม่
			DrawingPoint_t current =
					current_drawing_sequence.points[current_drawing_sequence.current_point
 80068f4:	4b22      	ldr	r3, [pc, #136]	@ (8006980 <start_combined_trajectory+0x52c>)
 80068f6:	681a      	ldr	r2, [r3, #0]
 80068f8:	4b21      	ldr	r3, [pc, #132]	@ (8006980 <start_combined_trajectory+0x52c>)
 80068fa:	795b      	ldrb	r3, [r3, #5]
 80068fc:	4619      	mov	r1, r3
 80068fe:	460b      	mov	r3, r1
 8006900:	005b      	lsls	r3, r3, #1
 8006902:	440b      	add	r3, r1
 8006904:	009b      	lsls	r3, r3, #2
 8006906:	3b0c      	subs	r3, #12
 8006908:	441a      	add	r2, r3
			DrawingPoint_t current =
 800690a:	f107 0308 	add.w	r3, r7, #8
 800690e:	ca07      	ldmia	r2, {r0, r1, r2}
 8006910:	e883 0007 	stmia.w	r3, {r0, r1, r2}
							- 1];

			// ถ้าต้องการวางปากกา ก็ไม่ต้องยกขึ้น
			if (!current.pen_down) {
 8006914:	7c3b      	ldrb	r3, [r7, #16]
 8006916:	f083 0301 	eor.w	r3, r3, #1
 800691a:	b2db      	uxtb	r3, r3
 800691c:	2b00      	cmp	r3, #0
 800691e:	d005      	beq.n	800692c <start_combined_trajectory+0x4d8>
				plotter_pen_up();
 8006920:	f003 fa3c 	bl	8009d9c <plotter_pen_up>
				&& current_drawing_sequence.current_point > 0) {
 8006924:	e002      	b.n	800692c <start_combined_trajectory+0x4d8>
			}
		} else {
			// ไม่ได้วาดตัวอักษร - ยกปากกาตามปกติ
			plotter_pen_up();
 8006926:	f003 fa39 	bl	8009d9c <plotter_pen_up>
 800692a:	e000      	b.n	800692e <start_combined_trajectory+0x4da>
				&& current_drawing_sequence.current_point > 0) {
 800692c:	bf00      	nop
		}

		motion_delay_timer = 0;
 800692e:	4b15      	ldr	r3, [pc, #84]	@ (8006984 <start_combined_trajectory+0x530>)
 8006930:	2200      	movs	r2, #0
 8006932:	601a      	str	r2, [r3, #0]
		motion_sequence_state = MOTION_PEN_UP_DELAY;
 8006934:	4b14      	ldr	r3, [pc, #80]	@ (8006988 <start_combined_trajectory+0x534>)
 8006936:	2201      	movs	r2, #1
 8006938:	701a      	strb	r2, [r3, #0]

		//modbus reset state
		registerFrame[BaseSystem_Status].U16 = 0;
 800693a:	4b14      	ldr	r3, [pc, #80]	@ (800698c <start_combined_trajectory+0x538>)
 800693c:	2200      	movs	r2, #0
 800693e:	805a      	strh	r2, [r3, #2]
		registerFrame[R_Theta_Status].U16 = 0;
 8006940:	4b12      	ldr	r3, [pc, #72]	@ (800698c <start_combined_trajectory+0x538>)
 8006942:	2200      	movs	r2, #0
 8006944:	841a      	strh	r2, [r3, #32]
 8006946:	e002      	b.n	800694e <start_combined_trajectory+0x4fa>
		return;
 8006948:	bf00      	nop
 800694a:	e000      	b.n	800694e <start_combined_trajectory+0x4fa>
		return; // Don't start new trajectory if one is active
 800694c:	bf00      	nop
	}
}
 800694e:	3744      	adds	r7, #68	@ 0x44
 8006950:	46bd      	mov	sp, r7
 8006952:	ecbd 8b02 	vpop	{d8}
 8006956:	bd90      	pop	{r4, r7, pc}
 8006958:	20000704 	.word	0x20000704
 800695c:	20000748 	.word	0x20000748
 8006960:	3dcccccd 	.word	0x3dcccccd
 8006964:	20000080 	.word	0x20000080
 8006968:	40040000 	.word	0x40040000
 800696c:	3c23d70a 	.word	0x3c23d70a
 8006970:	20000000 	.word	0x20000000
 8006974:	200008ac 	.word	0x200008ac
 8006978:	200008b0 	.word	0x200008b0
 800697c:	200008a8 	.word	0x200008a8
 8006980:	200008b4 	.word	0x200008b4
 8006984:	200007e0 	.word	0x200007e0
 8006988:	2000078c 	.word	0x2000078c
 800698c:	200015a4 	.word	0x200015a4

08006990 <update_position_control>:

void update_position_control(void) {
 8006990:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006994:	ed2d 8b02 	vpush	{d8}
 8006998:	b083      	sub	sp, #12
 800699a:	af00      	add	r7, sp, #0
	prismatic_axis.pos_error = prismatic_axis.position - prismatic_encoder.mm;
 800699c:	4b50      	ldr	r3, [pc, #320]	@ (8006ae0 <update_position_control+0x150>)
 800699e:	ed93 7a00 	vldr	s14, [r3]
 80069a2:	4b50      	ldr	r3, [pc, #320]	@ (8006ae4 <update_position_control+0x154>)
 80069a4:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 80069a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80069ac:	4b4c      	ldr	r3, [pc, #304]	@ (8006ae0 <update_position_control+0x150>)
 80069ae:	edc3 7a05 	vstr	s15, [r3, #20]
	prismatic_axis.command_vel = PWM_Satuation(
 80069b2:	4b4b      	ldr	r3, [pc, #300]	@ (8006ae0 <update_position_control+0x150>)
 80069b4:	edd3 7a05 	vldr	s15, [r3, #20]
 80069b8:	eeb0 0a67 	vmov.f32	s0, s15
 80069bc:	484a      	ldr	r0, [pc, #296]	@ (8006ae8 <update_position_control+0x158>)
 80069be:	f7fa fc2b 	bl	8001218 <PID_CONTROLLER_Compute>
 80069c2:	eeb0 8a40 	vmov.f32	s16, s0
			PID_CONTROLLER_Compute(&prismatic_position_pid,
					prismatic_axis.pos_error), ZGX45RGG_400RPM_Constant.sd_max,
 80069c6:	4b49      	ldr	r3, [pc, #292]	@ (8006aec <update_position_control+0x15c>)
 80069c8:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
	prismatic_axis.command_vel = PWM_Satuation(
 80069cc:	4610      	mov	r0, r2
 80069ce:	4619      	mov	r1, r3
 80069d0:	f7fa f878 	bl	8000ac4 <__aeabi_d2iz>
 80069d4:	4606      	mov	r6, r0
			-ZGX45RGG_400RPM_Constant.sd_max);
 80069d6:	4b45      	ldr	r3, [pc, #276]	@ (8006aec <update_position_control+0x15c>)
 80069d8:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 80069dc:	4690      	mov	r8, r2
 80069de:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
	prismatic_axis.command_vel = PWM_Satuation(
 80069e2:	4640      	mov	r0, r8
 80069e4:	4649      	mov	r1, r9
 80069e6:	f7fa f86d 	bl	8000ac4 <__aeabi_d2iz>
 80069ea:	4603      	mov	r3, r0
 80069ec:	4619      	mov	r1, r3
 80069ee:	4630      	mov	r0, r6
 80069f0:	eeb0 0a48 	vmov.f32	s0, s16
 80069f4:	f7fa fbae 	bl	8001154 <PWM_Satuation>
 80069f8:	ee07 0a90 	vmov	s15, r0
 80069fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006a00:	4b37      	ldr	r3, [pc, #220]	@ (8006ae0 <update_position_control+0x150>)
 8006a02:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

	float normalized_position = normalize_angle(revolute_encoder.rads);
 8006a06:	4b3a      	ldr	r3, [pc, #232]	@ (8006af0 <update_position_control+0x160>)
 8006a08:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8006a0c:	eeb0 0a67 	vmov.f32	s0, s15
 8006a10:	f7ff fbac 	bl	800616c <normalize_angle>
 8006a14:	ed87 0a01 	vstr	s0, [r7, #4]
	revolute_axis.pos_error = revolute_axis.position - normalized_position;
 8006a18:	4b36      	ldr	r3, [pc, #216]	@ (8006af4 <update_position_control+0x164>)
 8006a1a:	ed93 7a00 	vldr	s14, [r3]
 8006a1e:	edd7 7a01 	vldr	s15, [r7, #4]
 8006a22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006a26:	4b33      	ldr	r3, [pc, #204]	@ (8006af4 <update_position_control+0x164>)
 8006a28:	edc3 7a05 	vstr	s15, [r3, #20]

	if (revolute_axis.pos_error > PI)
 8006a2c:	4b31      	ldr	r3, [pc, #196]	@ (8006af4 <update_position_control+0x164>)
 8006a2e:	edd3 7a05 	vldr	s15, [r3, #20]
 8006a32:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8006af8 <update_position_control+0x168>
 8006a36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006a3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a3e:	dd09      	ble.n	8006a54 <update_position_control+0xc4>
		revolute_axis.pos_error -= 2.0f * PI;
 8006a40:	4b2c      	ldr	r3, [pc, #176]	@ (8006af4 <update_position_control+0x164>)
 8006a42:	edd3 7a05 	vldr	s15, [r3, #20]
 8006a46:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8006afc <update_position_control+0x16c>
 8006a4a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006a4e:	4b29      	ldr	r3, [pc, #164]	@ (8006af4 <update_position_control+0x164>)
 8006a50:	edc3 7a05 	vstr	s15, [r3, #20]
	if (revolute_axis.pos_error < -PI)
 8006a54:	4b27      	ldr	r3, [pc, #156]	@ (8006af4 <update_position_control+0x164>)
 8006a56:	edd3 7a05 	vldr	s15, [r3, #20]
 8006a5a:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8006b00 <update_position_control+0x170>
 8006a5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006a62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a66:	d509      	bpl.n	8006a7c <update_position_control+0xec>
		revolute_axis.pos_error += 2.0f * PI;
 8006a68:	4b22      	ldr	r3, [pc, #136]	@ (8006af4 <update_position_control+0x164>)
 8006a6a:	edd3 7a05 	vldr	s15, [r3, #20]
 8006a6e:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8006afc <update_position_control+0x16c>
 8006a72:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006a76:	4b1f      	ldr	r3, [pc, #124]	@ (8006af4 <update_position_control+0x164>)
 8006a78:	edc3 7a05 	vstr	s15, [r3, #20]

	revolute_axis.command_vel = PWM_Satuation(
 8006a7c:	4b1d      	ldr	r3, [pc, #116]	@ (8006af4 <update_position_control+0x164>)
 8006a7e:	edd3 7a05 	vldr	s15, [r3, #20]
 8006a82:	eeb0 0a67 	vmov.f32	s0, s15
 8006a86:	481f      	ldr	r0, [pc, #124]	@ (8006b04 <update_position_control+0x174>)
 8006a88:	f7fa fbc6 	bl	8001218 <PID_CONTROLLER_Compute>
 8006a8c:	eeb0 8a40 	vmov.f32	s16, s0
			PID_CONTROLLER_Compute(&revolute_position_pid,
					revolute_axis.pos_error), ZGX45RGG_150RPM_Constant.qd_max,
 8006a90:	4b1d      	ldr	r3, [pc, #116]	@ (8006b08 <update_position_control+0x178>)
 8006a92:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	revolute_axis.command_vel = PWM_Satuation(
 8006a96:	4610      	mov	r0, r2
 8006a98:	4619      	mov	r1, r3
 8006a9a:	f7fa f813 	bl	8000ac4 <__aeabi_d2iz>
 8006a9e:	4606      	mov	r6, r0
			-ZGX45RGG_150RPM_Constant.qd_max);
 8006aa0:	4b19      	ldr	r3, [pc, #100]	@ (8006b08 <update_position_control+0x178>)
 8006aa2:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8006aa6:	4614      	mov	r4, r2
 8006aa8:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
	revolute_axis.command_vel = PWM_Satuation(
 8006aac:	4620      	mov	r0, r4
 8006aae:	4629      	mov	r1, r5
 8006ab0:	f7fa f808 	bl	8000ac4 <__aeabi_d2iz>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	4619      	mov	r1, r3
 8006ab8:	4630      	mov	r0, r6
 8006aba:	eeb0 0a48 	vmov.f32	s0, s16
 8006abe:	f7fa fb49 	bl	8001154 <PWM_Satuation>
 8006ac2:	ee07 0a90 	vmov	s15, r0
 8006ac6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006aca:	4b0a      	ldr	r3, [pc, #40]	@ (8006af4 <update_position_control+0x164>)
 8006acc:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
}
 8006ad0:	bf00      	nop
 8006ad2:	370c      	adds	r7, #12
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	ecbd 8b02 	vpop	{d8}
 8006ada:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006ade:	bf00      	nop
 8006ae0:	20000704 	.word	0x20000704
 8006ae4:	20000988 	.word	0x20000988
 8006ae8:	20000a40 	.word	0x20000a40
 8006aec:	20000080 	.word	0x20000080
 8006af0:	200009e4 	.word	0x200009e4
 8006af4:	20000748 	.word	0x20000748
 8006af8:	40490fdb 	.word	0x40490fdb
 8006afc:	40c90fdb 	.word	0x40c90fdb
 8006b00:	c0490fdb 	.word	0xc0490fdb
 8006b04:	20000a90 	.word	0x20000a90
 8006b08:	20000000 	.word	0x20000000
 8006b0c:	00000000 	.word	0x00000000

08006b10 <update_velocity_control>:

void update_velocity_control(void) {
 8006b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b14:	ed2d 8b02 	vpush	{d8}
 8006b18:	b083      	sub	sp, #12
 8006b1a:	af00      	add	r7, sp, #0

	if (prismatic_axis.trajectory_active) {
 8006b1c:	4b96      	ldr	r3, [pc, #600]	@ (8006d78 <update_velocity_control+0x268>)
 8006b1e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d010      	beq.n	8006b48 <update_velocity_control+0x38>
		prismatic_axis.vel_error = prismatic_axis.command_vel
 8006b26:	4b94      	ldr	r3, [pc, #592]	@ (8006d78 <update_velocity_control+0x268>)
 8006b28:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
				+ prismatic_axis.velocity - prismatic_axis.kalman_velocity;
 8006b2c:	4b92      	ldr	r3, [pc, #584]	@ (8006d78 <update_velocity_control+0x268>)
 8006b2e:	edd3 7a01 	vldr	s15, [r3, #4]
 8006b32:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006b36:	4b90      	ldr	r3, [pc, #576]	@ (8006d78 <update_velocity_control+0x268>)
 8006b38:	edd3 7a07 	vldr	s15, [r3, #28]
 8006b3c:	ee77 7a67 	vsub.f32	s15, s14, s15
		prismatic_axis.vel_error = prismatic_axis.command_vel
 8006b40:	4b8d      	ldr	r3, [pc, #564]	@ (8006d78 <update_velocity_control+0x268>)
 8006b42:	edc3 7a06 	vstr	s15, [r3, #24]
 8006b46:	e00a      	b.n	8006b5e <update_velocity_control+0x4e>
	} else {
		prismatic_axis.vel_error = prismatic_axis.command_vel
 8006b48:	4b8b      	ldr	r3, [pc, #556]	@ (8006d78 <update_velocity_control+0x268>)
 8006b4a:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
				- prismatic_axis.kalman_velocity;
 8006b4e:	4b8a      	ldr	r3, [pc, #552]	@ (8006d78 <update_velocity_control+0x268>)
 8006b50:	edd3 7a07 	vldr	s15, [r3, #28]
 8006b54:	ee77 7a67 	vsub.f32	s15, s14, s15
		prismatic_axis.vel_error = prismatic_axis.command_vel
 8006b58:	4b87      	ldr	r3, [pc, #540]	@ (8006d78 <update_velocity_control+0x268>)
 8006b5a:	edc3 7a06 	vstr	s15, [r3, #24]
	}

	prismatic_axis.command_pos = PWM_Satuation(
 8006b5e:	4b86      	ldr	r3, [pc, #536]	@ (8006d78 <update_velocity_control+0x268>)
 8006b60:	edd3 7a06 	vldr	s15, [r3, #24]
 8006b64:	eeb0 0a67 	vmov.f32	s0, s15
 8006b68:	4884      	ldr	r0, [pc, #528]	@ (8006d7c <update_velocity_control+0x26c>)
 8006b6a:	f7fa fb55 	bl	8001218 <PID_CONTROLLER_Compute>
 8006b6e:	eeb0 8a40 	vmov.f32	s16, s0
			PID_CONTROLLER_Compute(&prismatic_velocity_pid,
					prismatic_axis.vel_error), ZGX45RGG_400RPM_Constant.U_max,
 8006b72:	4b83      	ldr	r3, [pc, #524]	@ (8006d80 <update_velocity_control+0x270>)
 8006b74:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	prismatic_axis.command_pos = PWM_Satuation(
 8006b78:	4610      	mov	r0, r2
 8006b7a:	4619      	mov	r1, r3
 8006b7c:	f7f9 ffa2 	bl	8000ac4 <__aeabi_d2iz>
 8006b80:	4606      	mov	r6, r0
			-ZGX45RGG_400RPM_Constant.U_max);
 8006b82:	4b7f      	ldr	r3, [pc, #508]	@ (8006d80 <update_velocity_control+0x270>)
 8006b84:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8006b88:	603a      	str	r2, [r7, #0]
 8006b8a:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8006b8e:	607b      	str	r3, [r7, #4]
	prismatic_axis.command_pos = PWM_Satuation(
 8006b90:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b94:	f7f9 ff96 	bl	8000ac4 <__aeabi_d2iz>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	4619      	mov	r1, r3
 8006b9c:	4630      	mov	r0, r6
 8006b9e:	eeb0 0a48 	vmov.f32	s0, s16
 8006ba2:	f7fa fad7 	bl	8001154 <PWM_Satuation>
 8006ba6:	ee07 0a90 	vmov	s15, r0
 8006baa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006bae:	4b72      	ldr	r3, [pc, #456]	@ (8006d78 <update_velocity_control+0x268>)
 8006bb0:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	if (prismatic_axis.trajectory_active) {
 8006bb4:	4b70      	ldr	r3, [pc, #448]	@ (8006d78 <update_velocity_control+0x268>)
 8006bb6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d02c      	beq.n	8006c18 <update_velocity_control+0x108>
		prismatic_axis.ffd = PRISMATIC_MOTOR_FFD_Compute(&prismatic_motor_ffd,
				prismatic_axis.velocity / 1000.0f);
 8006bbe:	4b6e      	ldr	r3, [pc, #440]	@ (8006d78 <update_velocity_control+0x268>)
 8006bc0:	edd3 7a01 	vldr	s15, [r3, #4]
		prismatic_axis.ffd = PRISMATIC_MOTOR_FFD_Compute(&prismatic_motor_ffd,
 8006bc4:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006d84 <update_velocity_control+0x274>
 8006bc8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8006bcc:	eeb0 0a47 	vmov.f32	s0, s14
 8006bd0:	486d      	ldr	r0, [pc, #436]	@ (8006d88 <update_velocity_control+0x278>)
 8006bd2:	f7fa fe3d 	bl	8001850 <PRISMATIC_MOTOR_FFD_Compute>
 8006bd6:	eef0 7a40 	vmov.f32	s15, s0
 8006bda:	4b67      	ldr	r3, [pc, #412]	@ (8006d78 <update_velocity_control+0x268>)
 8006bdc:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 8006be0:	4b6a      	ldr	r3, [pc, #424]	@ (8006d8c <update_velocity_control+0x27c>)
 8006be2:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8006be6:	4b6a      	ldr	r3, [pc, #424]	@ (8006d90 <update_velocity_control+0x280>)
 8006be8:	edd3 6a01 	vldr	s13, [r3, #4]
				revolute_encoder.rads, revolute_axis.velocity,
				prismatic_encoder.mm / 1000.0f);
 8006bec:	4b69      	ldr	r3, [pc, #420]	@ (8006d94 <update_velocity_control+0x284>)
 8006bee:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 8006bf2:	eddf 5a64 	vldr	s11, [pc, #400]	@ 8006d84 <update_velocity_control+0x274>
 8006bf6:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 8006bfa:	eeb0 1a46 	vmov.f32	s2, s12
 8006bfe:	eef0 0a66 	vmov.f32	s1, s13
 8006c02:	eeb0 0a47 	vmov.f32	s0, s14
 8006c06:	4864      	ldr	r0, [pc, #400]	@ (8006d98 <update_velocity_control+0x288>)
 8006c08:	f7fa feb5 	bl	8001976 <PRISMATIC_MOTOR_DFD_Compute>
 8006c0c:	eef0 7a40 	vmov.f32	s15, s0
 8006c10:	4b59      	ldr	r3, [pc, #356]	@ (8006d78 <update_velocity_control+0x268>)
 8006c12:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
 8006c16:	e007      	b.n	8006c28 <update_velocity_control+0x118>
	} else {
		prismatic_axis.ffd = 0.0f;
 8006c18:	4b57      	ldr	r3, [pc, #348]	@ (8006d78 <update_velocity_control+0x268>)
 8006c1a:	f04f 0200 	mov.w	r2, #0
 8006c1e:	631a      	str	r2, [r3, #48]	@ 0x30
		prismatic_axis.dfd = 0.0f;
 8006c20:	4b55      	ldr	r3, [pc, #340]	@ (8006d78 <update_velocity_control+0x268>)
 8006c22:	f04f 0200 	mov.w	r2, #0
 8006c26:	62da      	str	r2, [r3, #44]	@ 0x2c
	}

	prismatic_axis.command_pos += prismatic_axis.ffd + prismatic_axis.dfd;
 8006c28:	4b53      	ldr	r3, [pc, #332]	@ (8006d78 <update_velocity_control+0x268>)
 8006c2a:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8006c2e:	4b52      	ldr	r3, [pc, #328]	@ (8006d78 <update_velocity_control+0x268>)
 8006c30:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 8006c34:	4b50      	ldr	r3, [pc, #320]	@ (8006d78 <update_velocity_control+0x268>)
 8006c36:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8006c3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006c42:	4b4d      	ldr	r3, [pc, #308]	@ (8006d78 <update_velocity_control+0x268>)
 8006c44:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8006c48:	4b4b      	ldr	r3, [pc, #300]	@ (8006d78 <update_velocity_control+0x268>)
 8006c4a:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
			ZGX45RGG_400RPM_Constant.U_max, -ZGX45RGG_400RPM_Constant.U_max);
 8006c4e:	4b4c      	ldr	r3, [pc, #304]	@ (8006d80 <update_velocity_control+0x270>)
 8006c50:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8006c54:	4610      	mov	r0, r2
 8006c56:	4619      	mov	r1, r3
 8006c58:	f7f9 ff34 	bl	8000ac4 <__aeabi_d2iz>
 8006c5c:	4606      	mov	r6, r0
			ZGX45RGG_400RPM_Constant.U_max, -ZGX45RGG_400RPM_Constant.U_max);
 8006c5e:	4b48      	ldr	r3, [pc, #288]	@ (8006d80 <update_velocity_control+0x270>)
 8006c60:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8006c64:	4692      	mov	sl, r2
 8006c66:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
	prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8006c6a:	4650      	mov	r0, sl
 8006c6c:	4659      	mov	r1, fp
 8006c6e:	f7f9 ff29 	bl	8000ac4 <__aeabi_d2iz>
 8006c72:	4603      	mov	r3, r0
 8006c74:	4619      	mov	r1, r3
 8006c76:	4630      	mov	r0, r6
 8006c78:	eeb0 0a48 	vmov.f32	s0, s16
 8006c7c:	f7fa fa6a 	bl	8001154 <PWM_Satuation>
 8006c80:	ee07 0a90 	vmov	s15, r0
 8006c84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006c88:	4b3b      	ldr	r3, [pc, #236]	@ (8006d78 <update_velocity_control+0x268>)
 8006c8a:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	if (revolute_axis.trajectory_active) {
 8006c8e:	4b40      	ldr	r3, [pc, #256]	@ (8006d90 <update_velocity_control+0x280>)
 8006c90:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d010      	beq.n	8006cba <update_velocity_control+0x1aa>
		revolute_axis.vel_error = revolute_axis.command_vel
 8006c98:	4b3d      	ldr	r3, [pc, #244]	@ (8006d90 <update_velocity_control+0x280>)
 8006c9a:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
				+ revolute_axis.velocity - revolute_axis.kalman_velocity;
 8006c9e:	4b3c      	ldr	r3, [pc, #240]	@ (8006d90 <update_velocity_control+0x280>)
 8006ca0:	edd3 7a01 	vldr	s15, [r3, #4]
 8006ca4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006ca8:	4b39      	ldr	r3, [pc, #228]	@ (8006d90 <update_velocity_control+0x280>)
 8006caa:	edd3 7a07 	vldr	s15, [r3, #28]
 8006cae:	ee77 7a67 	vsub.f32	s15, s14, s15
		revolute_axis.vel_error = revolute_axis.command_vel
 8006cb2:	4b37      	ldr	r3, [pc, #220]	@ (8006d90 <update_velocity_control+0x280>)
 8006cb4:	edc3 7a06 	vstr	s15, [r3, #24]
 8006cb8:	e00a      	b.n	8006cd0 <update_velocity_control+0x1c0>
	} else {
		revolute_axis.vel_error = revolute_axis.command_vel
 8006cba:	4b35      	ldr	r3, [pc, #212]	@ (8006d90 <update_velocity_control+0x280>)
 8006cbc:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
				- revolute_axis.kalman_velocity;
 8006cc0:	4b33      	ldr	r3, [pc, #204]	@ (8006d90 <update_velocity_control+0x280>)
 8006cc2:	edd3 7a07 	vldr	s15, [r3, #28]
 8006cc6:	ee77 7a67 	vsub.f32	s15, s14, s15
		revolute_axis.vel_error = revolute_axis.command_vel
 8006cca:	4b31      	ldr	r3, [pc, #196]	@ (8006d90 <update_velocity_control+0x280>)
 8006ccc:	edc3 7a06 	vstr	s15, [r3, #24]
	}

	revolute_axis.command_pos = PWM_Satuation(
 8006cd0:	4b2f      	ldr	r3, [pc, #188]	@ (8006d90 <update_velocity_control+0x280>)
 8006cd2:	edd3 7a06 	vldr	s15, [r3, #24]
 8006cd6:	eeb0 0a67 	vmov.f32	s0, s15
 8006cda:	4830      	ldr	r0, [pc, #192]	@ (8006d9c <update_velocity_control+0x28c>)
 8006cdc:	f7fa fa9c 	bl	8001218 <PID_CONTROLLER_Compute>
 8006ce0:	eeb0 8a40 	vmov.f32	s16, s0
			PID_CONTROLLER_Compute(&revolute_velocity_pid,
					revolute_axis.vel_error), ZGX45RGG_150RPM_Constant.U_max,
 8006ce4:	4b2e      	ldr	r3, [pc, #184]	@ (8006da0 <update_velocity_control+0x290>)
 8006ce6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	revolute_axis.command_pos = PWM_Satuation(
 8006cea:	4610      	mov	r0, r2
 8006cec:	4619      	mov	r1, r3
 8006cee:	f7f9 fee9 	bl	8000ac4 <__aeabi_d2iz>
 8006cf2:	4606      	mov	r6, r0
			-ZGX45RGG_150RPM_Constant.U_max);
 8006cf4:	4b2a      	ldr	r3, [pc, #168]	@ (8006da0 <update_velocity_control+0x290>)
 8006cf6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8006cfa:	4690      	mov	r8, r2
 8006cfc:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
	revolute_axis.command_pos = PWM_Satuation(
 8006d00:	4640      	mov	r0, r8
 8006d02:	4649      	mov	r1, r9
 8006d04:	f7f9 fede 	bl	8000ac4 <__aeabi_d2iz>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	4619      	mov	r1, r3
 8006d0c:	4630      	mov	r0, r6
 8006d0e:	eeb0 0a48 	vmov.f32	s0, s16
 8006d12:	f7fa fa1f 	bl	8001154 <PWM_Satuation>
 8006d16:	ee07 0a90 	vmov	s15, r0
 8006d1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006d1e:	4b1c      	ldr	r3, [pc, #112]	@ (8006d90 <update_velocity_control+0x280>)
 8006d20:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	if (revolute_axis.trajectory_active) {
 8006d24:	4b1a      	ldr	r3, [pc, #104]	@ (8006d90 <update_velocity_control+0x280>)
 8006d26:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d03e      	beq.n	8006dac <update_velocity_control+0x29c>
		revolute_axis.ffd = REVOLUTE_MOTOR_FFD_Compute(&revolute_motor_ffd,
 8006d2e:	4b18      	ldr	r3, [pc, #96]	@ (8006d90 <update_velocity_control+0x280>)
 8006d30:	edd3 7a01 	vldr	s15, [r3, #4]
 8006d34:	eeb0 0a67 	vmov.f32	s0, s15
 8006d38:	481a      	ldr	r0, [pc, #104]	@ (8006da4 <update_velocity_control+0x294>)
 8006d3a:	f7fa fc0b 	bl	8001554 <REVOLUTE_MOTOR_FFD_Compute>
 8006d3e:	eef0 7a40 	vmov.f32	s15, s0
 8006d42:	4b13      	ldr	r3, [pc, #76]	@ (8006d90 <update_velocity_control+0x280>)
 8006d44:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
				revolute_axis.velocity);
		revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8006d48:	4b10      	ldr	r3, [pc, #64]	@ (8006d8c <update_velocity_control+0x27c>)
 8006d4a:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
				revolute_encoder.rads, prismatic_encoder.mm / 1000.0f);
 8006d4e:	4b11      	ldr	r3, [pc, #68]	@ (8006d94 <update_velocity_control+0x284>)
 8006d50:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8006d54:	ed9f 6a0b 	vldr	s12, [pc, #44]	@ 8006d84 <update_velocity_control+0x274>
 8006d58:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8006d5c:	eef0 0a66 	vmov.f32	s1, s13
 8006d60:	eeb0 0a47 	vmov.f32	s0, s14
 8006d64:	4810      	ldr	r0, [pc, #64]	@ (8006da8 <update_velocity_control+0x298>)
 8006d66:	f7fa fc88 	bl	800167a <REVOLUTE_MOTOR_DFD_Compute>
 8006d6a:	eef0 7a40 	vmov.f32	s15, s0
 8006d6e:	4b08      	ldr	r3, [pc, #32]	@ (8006d90 <update_velocity_control+0x280>)
 8006d70:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
 8006d74:	e034      	b.n	8006de0 <update_velocity_control+0x2d0>
 8006d76:	bf00      	nop
 8006d78:	20000704 	.word	0x20000704
 8006d7c:	20000a68 	.word	0x20000a68
 8006d80:	20000080 	.word	0x20000080
 8006d84:	447a0000 	.word	0x447a0000
 8006d88:	20000b08 	.word	0x20000b08
 8006d8c:	200009e4 	.word	0x200009e4
 8006d90:	20000748 	.word	0x20000748
 8006d94:	20000988 	.word	0x20000988
 8006d98:	20000b0c 	.word	0x20000b0c
 8006d9c:	20000ab8 	.word	0x20000ab8
 8006da0:	20000000 	.word	0x20000000
 8006da4:	20000b14 	.word	0x20000b14
 8006da8:	20000b18 	.word	0x20000b18
	} else {
		revolute_axis.ffd = 0.0f;
 8006dac:	4b54      	ldr	r3, [pc, #336]	@ (8006f00 <update_velocity_control+0x3f0>)
 8006dae:	f04f 0200 	mov.w	r2, #0
 8006db2:	631a      	str	r2, [r3, #48]	@ 0x30
		revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8006db4:	4b53      	ldr	r3, [pc, #332]	@ (8006f04 <update_velocity_control+0x3f4>)
 8006db6:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
				revolute_encoder.rads, prismatic_encoder.mm / 1000.0f);
 8006dba:	4b53      	ldr	r3, [pc, #332]	@ (8006f08 <update_velocity_control+0x3f8>)
 8006dbc:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8006dc0:	ed9f 6a52 	vldr	s12, [pc, #328]	@ 8006f0c <update_velocity_control+0x3fc>
 8006dc4:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8006dc8:	eef0 0a66 	vmov.f32	s1, s13
 8006dcc:	eeb0 0a47 	vmov.f32	s0, s14
 8006dd0:	484f      	ldr	r0, [pc, #316]	@ (8006f10 <update_velocity_control+0x400>)
 8006dd2:	f7fa fc52 	bl	800167a <REVOLUTE_MOTOR_DFD_Compute>
 8006dd6:	eef0 7a40 	vmov.f32	s15, s0
 8006dda:	4b49      	ldr	r3, [pc, #292]	@ (8006f00 <update_velocity_control+0x3f0>)
 8006ddc:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	}

	static float ffd_filtered = 0.0f;
	static float dfd_filtered = 0.0f;

	ffd_filtered = 0.8f * ffd_filtered + 0.2f * revolute_axis.ffd;
 8006de0:	4b4c      	ldr	r3, [pc, #304]	@ (8006f14 <update_velocity_control+0x404>)
 8006de2:	edd3 7a00 	vldr	s15, [r3]
 8006de6:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 8006f18 <update_velocity_control+0x408>
 8006dea:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006dee:	4b44      	ldr	r3, [pc, #272]	@ (8006f00 <update_velocity_control+0x3f0>)
 8006df0:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8006df4:	eddf 6a49 	vldr	s13, [pc, #292]	@ 8006f1c <update_velocity_control+0x40c>
 8006df8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006dfc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006e00:	4b44      	ldr	r3, [pc, #272]	@ (8006f14 <update_velocity_control+0x404>)
 8006e02:	edc3 7a00 	vstr	s15, [r3]
	dfd_filtered = 0.8f * dfd_filtered + 0.175f * revolute_axis.dfd; //dfd 0.175
 8006e06:	4b46      	ldr	r3, [pc, #280]	@ (8006f20 <update_velocity_control+0x410>)
 8006e08:	edd3 7a00 	vldr	s15, [r3]
 8006e0c:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8006f18 <update_velocity_control+0x408>
 8006e10:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006e14:	4b3a      	ldr	r3, [pc, #232]	@ (8006f00 <update_velocity_control+0x3f0>)
 8006e16:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8006e1a:	eddf 6a42 	vldr	s13, [pc, #264]	@ 8006f24 <update_velocity_control+0x414>
 8006e1e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006e22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006e26:	4b3e      	ldr	r3, [pc, #248]	@ (8006f20 <update_velocity_control+0x410>)
 8006e28:	edc3 7a00 	vstr	s15, [r3]

	revolute_axis.command_pos += 0.01 * (dfd_filtered + ffd_filtered);
 8006e2c:	4b34      	ldr	r3, [pc, #208]	@ (8006f00 <update_velocity_control+0x3f0>)
 8006e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e30:	4618      	mov	r0, r3
 8006e32:	f7f9 fb55 	bl	80004e0 <__aeabi_f2d>
 8006e36:	4680      	mov	r8, r0
 8006e38:	4689      	mov	r9, r1
 8006e3a:	4b39      	ldr	r3, [pc, #228]	@ (8006f20 <update_velocity_control+0x410>)
 8006e3c:	ed93 7a00 	vldr	s14, [r3]
 8006e40:	4b34      	ldr	r3, [pc, #208]	@ (8006f14 <update_velocity_control+0x404>)
 8006e42:	edd3 7a00 	vldr	s15, [r3]
 8006e46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006e4a:	ee17 0a90 	vmov	r0, s15
 8006e4e:	f7f9 fb47 	bl	80004e0 <__aeabi_f2d>
 8006e52:	a329      	add	r3, pc, #164	@ (adr r3, 8006ef8 <update_velocity_control+0x3e8>)
 8006e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e58:	f7f9 fb9a 	bl	8000590 <__aeabi_dmul>
 8006e5c:	4602      	mov	r2, r0
 8006e5e:	460b      	mov	r3, r1
 8006e60:	4640      	mov	r0, r8
 8006e62:	4649      	mov	r1, r9
 8006e64:	f7f9 f9de 	bl	8000224 <__adddf3>
 8006e68:	4602      	mov	r2, r0
 8006e6a:	460b      	mov	r3, r1
 8006e6c:	4610      	mov	r0, r2
 8006e6e:	4619      	mov	r1, r3
 8006e70:	f7f9 fe70 	bl	8000b54 <__aeabi_d2f>
 8006e74:	4603      	mov	r3, r0
 8006e76:	4a22      	ldr	r2, [pc, #136]	@ (8006f00 <update_velocity_control+0x3f0>)
 8006e78:	6253      	str	r3, [r2, #36]	@ 0x24

	revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8006e7a:	4b21      	ldr	r3, [pc, #132]	@ (8006f00 <update_velocity_control+0x3f0>)
 8006e7c:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
			ZGX45RGG_150RPM_Constant.U_max, -ZGX45RGG_150RPM_Constant.U_max);
 8006e80:	4b29      	ldr	r3, [pc, #164]	@ (8006f28 <update_velocity_control+0x418>)
 8006e82:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8006e86:	4610      	mov	r0, r2
 8006e88:	4619      	mov	r1, r3
 8006e8a:	f7f9 fe1b 	bl	8000ac4 <__aeabi_d2iz>
 8006e8e:	4606      	mov	r6, r0
			ZGX45RGG_150RPM_Constant.U_max, -ZGX45RGG_150RPM_Constant.U_max);
 8006e90:	4b25      	ldr	r3, [pc, #148]	@ (8006f28 <update_velocity_control+0x418>)
 8006e92:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8006e96:	4614      	mov	r4, r2
 8006e98:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
	revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8006e9c:	4620      	mov	r0, r4
 8006e9e:	4629      	mov	r1, r5
 8006ea0:	f7f9 fe10 	bl	8000ac4 <__aeabi_d2iz>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	4619      	mov	r1, r3
 8006ea8:	4630      	mov	r0, r6
 8006eaa:	eeb0 0a48 	vmov.f32	s0, s16
 8006eae:	f7fa f951 	bl	8001154 <PWM_Satuation>
 8006eb2:	ee07 0a90 	vmov	s15, r0
 8006eb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006eba:	4b11      	ldr	r3, [pc, #68]	@ (8006f00 <update_velocity_control+0x3f0>)
 8006ebc:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	MDXX_set_range(&prismatic_motor, 2000, prismatic_axis.command_pos);
 8006ec0:	4b1a      	ldr	r3, [pc, #104]	@ (8006f2c <update_velocity_control+0x41c>)
 8006ec2:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8006ec6:	eef0 0a67 	vmov.f32	s1, s15
 8006eca:	ed9f 0a19 	vldr	s0, [pc, #100]	@ 8006f30 <update_velocity_control+0x420>
 8006ece:	4819      	ldr	r0, [pc, #100]	@ (8006f34 <update_velocity_control+0x424>)
 8006ed0:	f7fa fa58 	bl	8001384 <MDXX_set_range>
	MDXX_set_range(&revolute_motor, 2000, revolute_axis.command_pos);
 8006ed4:	4b0a      	ldr	r3, [pc, #40]	@ (8006f00 <update_velocity_control+0x3f0>)
 8006ed6:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8006eda:	eef0 0a67 	vmov.f32	s1, s15
 8006ede:	ed9f 0a14 	vldr	s0, [pc, #80]	@ 8006f30 <update_velocity_control+0x420>
 8006ee2:	4815      	ldr	r0, [pc, #84]	@ (8006f38 <update_velocity_control+0x428>)
 8006ee4:	f7fa fa4e 	bl	8001384 <MDXX_set_range>
}
 8006ee8:	bf00      	nop
 8006eea:	370c      	adds	r7, #12
 8006eec:	46bd      	mov	sp, r7
 8006eee:	ecbd 8b02 	vpop	{d8}
 8006ef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ef6:	bf00      	nop
 8006ef8:	47ae147b 	.word	0x47ae147b
 8006efc:	3f847ae1 	.word	0x3f847ae1
 8006f00:	20000748 	.word	0x20000748
 8006f04:	200009e4 	.word	0x200009e4
 8006f08:	20000988 	.word	0x20000988
 8006f0c:	447a0000 	.word	0x447a0000
 8006f10:	20000b18 	.word	0x20000b18
 8006f14:	200008cc 	.word	0x200008cc
 8006f18:	3f4ccccd 	.word	0x3f4ccccd
 8006f1c:	3e4ccccd 	.word	0x3e4ccccd
 8006f20:	200008d0 	.word	0x200008d0
 8006f24:	3e333333 	.word	0x3e333333
 8006f28:	20000000 	.word	0x20000000
 8006f2c:	20000704 	.word	0x20000704
 8006f30:	44fa0000 	.word	0x44fa0000
 8006f34:	200008f0 	.word	0x200008f0
 8006f38:	2000093c 	.word	0x2000093c

08006f3c <update_control_loops>:

void update_control_loops(void) {
 8006f3c:	b590      	push	{r4, r7, lr}
 8006f3e:	ed2d 8b02 	vpush	{d8}
 8006f42:	b087      	sub	sp, #28
 8006f44:	af00      	add	r7, sp, #0
	normalized_position = normalize_angle(revolute_encoder.rads);
 8006f46:	4ba7      	ldr	r3, [pc, #668]	@ (80071e4 <update_control_loops+0x2a8>)
 8006f48:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8006f4c:	eeb0 0a67 	vmov.f32	s0, s15
 8006f50:	f7ff f90c 	bl	800616c <normalize_angle>
 8006f54:	eef0 7a40 	vmov.f32	s15, s0
 8006f58:	4ba3      	ldr	r3, [pc, #652]	@ (80071e8 <update_control_loops+0x2ac>)
 8006f5a:	edc3 7a00 	vstr	s15, [r3]

	if (is_emergency_active()) {
 8006f5e:	f000 fdaf 	bl	8007ac0 <is_emergency_active>
 8006f62:	4603      	mov	r3, r0
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d015      	beq.n	8006f94 <update_control_loops+0x58>
		emergency_stop_all_motors();
 8006f68:	f000 fcfa 	bl	8007960 <emergency_stop_all_motors>
		prismatic_axis.mm = prismatic_encoder.mm;
 8006f6c:	4b9f      	ldr	r3, [pc, #636]	@ (80071ec <update_control_loops+0x2b0>)
 8006f6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f70:	4a9f      	ldr	r2, [pc, #636]	@ (80071f0 <update_control_loops+0x2b4>)
 8006f72:	6393      	str	r3, [r2, #56]	@ 0x38
		revolute_axis.deg = UnitConverter_angle(&converter_system,
 8006f74:	4b9c      	ldr	r3, [pc, #624]	@ (80071e8 <update_control_loops+0x2ac>)
 8006f76:	edd3 7a00 	vldr	s15, [r3]
 8006f7a:	220e      	movs	r2, #14
 8006f7c:	210f      	movs	r1, #15
 8006f7e:	eeb0 0a67 	vmov.f32	s0, s15
 8006f82:	489c      	ldr	r0, [pc, #624]	@ (80071f4 <update_control_loops+0x2b8>)
 8006f84:	f7fd fdf8 	bl	8004b78 <UnitConverter_angle>
 8006f88:	eef0 7a40 	vmov.f32	s15, s0
 8006f8c:	4b9a      	ldr	r3, [pc, #616]	@ (80071f8 <update_control_loops+0x2bc>)
 8006f8e:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
				normalized_position, UNIT_RADIAN, UNIT_DEGREE);
		return;
 8006f92:	e33d      	b.n	8007610 <update_control_loops+0x6d4>
	}

	// Handle all homing states except HOMING_REV_TO_ZERO_DEG with direct motor control
	if (homing_active && homing_state != HOMING_REV_TO_ZERO_DEG) {
 8006f94:	4b99      	ldr	r3, [pc, #612]	@ (80071fc <update_control_loops+0x2c0>)
 8006f96:	781b      	ldrb	r3, [r3, #0]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d02d      	beq.n	8006ff8 <update_control_loops+0xbc>
 8006f9c:	4b98      	ldr	r3, [pc, #608]	@ (8007200 <update_control_loops+0x2c4>)
 8006f9e:	781b      	ldrb	r3, [r3, #0]
 8006fa0:	2b07      	cmp	r3, #7
 8006fa2:	d029      	beq.n	8006ff8 <update_control_loops+0xbc>
		update_homing_sequence();
 8006fa4:	f7fe fd36 	bl	8005a14 <update_homing_sequence>
		MDXX_set_range(&prismatic_motor, 2000, prismatic_axis.command_pos);
 8006fa8:	4b91      	ldr	r3, [pc, #580]	@ (80071f0 <update_control_loops+0x2b4>)
 8006faa:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8006fae:	eef0 0a67 	vmov.f32	s1, s15
 8006fb2:	ed9f 0a94 	vldr	s0, [pc, #592]	@ 8007204 <update_control_loops+0x2c8>
 8006fb6:	4894      	ldr	r0, [pc, #592]	@ (8007208 <update_control_loops+0x2cc>)
 8006fb8:	f7fa f9e4 	bl	8001384 <MDXX_set_range>
		MDXX_set_range(&revolute_motor, 2000, revolute_axis.command_pos);
 8006fbc:	4b8e      	ldr	r3, [pc, #568]	@ (80071f8 <update_control_loops+0x2bc>)
 8006fbe:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8006fc2:	eef0 0a67 	vmov.f32	s1, s15
 8006fc6:	ed9f 0a8f 	vldr	s0, [pc, #572]	@ 8007204 <update_control_loops+0x2c8>
 8006fca:	4890      	ldr	r0, [pc, #576]	@ (800720c <update_control_loops+0x2d0>)
 8006fcc:	f7fa f9da 	bl	8001384 <MDXX_set_range>
		prismatic_axis.mm = prismatic_encoder.mm;
 8006fd0:	4b86      	ldr	r3, [pc, #536]	@ (80071ec <update_control_loops+0x2b0>)
 8006fd2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006fd4:	4a86      	ldr	r2, [pc, #536]	@ (80071f0 <update_control_loops+0x2b4>)
 8006fd6:	6393      	str	r3, [r2, #56]	@ 0x38
		revolute_axis.deg = UnitConverter_angle(&converter_system,
 8006fd8:	4b83      	ldr	r3, [pc, #524]	@ (80071e8 <update_control_loops+0x2ac>)
 8006fda:	edd3 7a00 	vldr	s15, [r3]
 8006fde:	220e      	movs	r2, #14
 8006fe0:	210f      	movs	r1, #15
 8006fe2:	eeb0 0a67 	vmov.f32	s0, s15
 8006fe6:	4883      	ldr	r0, [pc, #524]	@ (80071f4 <update_control_loops+0x2b8>)
 8006fe8:	f7fd fdc6 	bl	8004b78 <UnitConverter_angle>
 8006fec:	eef0 7a40 	vmov.f32	s15, s0
 8006ff0:	4b81      	ldr	r3, [pc, #516]	@ (80071f8 <update_control_loops+0x2bc>)
 8006ff2:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
				normalized_position, UNIT_RADIAN, UNIT_DEGREE);
		return;
 8006ff6:	e30b      	b.n	8007610 <update_control_loops+0x6d4>
	}

	// Handle HOMING_REV_TO_ZERO_DEG: use trajectory system + check completion
	if (homing_active && homing_state == HOMING_REV_TO_ZERO_DEG) {
 8006ff8:	4b80      	ldr	r3, [pc, #512]	@ (80071fc <update_control_loops+0x2c0>)
 8006ffa:	781b      	ldrb	r3, [r3, #0]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d01d      	beq.n	800703c <update_control_loops+0x100>
 8007000:	4b7f      	ldr	r3, [pc, #508]	@ (8007200 <update_control_loops+0x2c4>)
 8007002:	781b      	ldrb	r3, [r3, #0]
 8007004:	2b07      	cmp	r3, #7
 8007006:	d119      	bne.n	800703c <update_control_loops+0x100>
		// First, update the homing sequence to handle trajectory start/completion
		update_homing_sequence();
 8007008:	f7fe fd04 	bl	8005a14 <update_homing_sequence>

		// If still in HOMING_REV_TO_ZERO_DEG after update, continue with trajectory control
		if (homing_state == HOMING_REV_TO_ZERO_DEG) {
 800700c:	4b7c      	ldr	r3, [pc, #496]	@ (8007200 <update_control_loops+0x2c4>)
 800700e:	781b      	ldrb	r3, [r3, #0]
 8007010:	2b07      	cmp	r3, #7
 8007012:	d013      	beq.n	800703c <update_control_loops+0x100>
			// Let the trajectory system handle the motion
			// Fall through to the switch statement below
		} else {
			// Homing sequence advanced to next state, return
			prismatic_axis.mm = prismatic_encoder.mm;
 8007014:	4b75      	ldr	r3, [pc, #468]	@ (80071ec <update_control_loops+0x2b0>)
 8007016:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007018:	4a75      	ldr	r2, [pc, #468]	@ (80071f0 <update_control_loops+0x2b4>)
 800701a:	6393      	str	r3, [r2, #56]	@ 0x38
			revolute_axis.deg = UnitConverter_angle(&converter_system,
 800701c:	4b72      	ldr	r3, [pc, #456]	@ (80071e8 <update_control_loops+0x2ac>)
 800701e:	edd3 7a00 	vldr	s15, [r3]
 8007022:	220e      	movs	r2, #14
 8007024:	210f      	movs	r1, #15
 8007026:	eeb0 0a67 	vmov.f32	s0, s15
 800702a:	4872      	ldr	r0, [pc, #456]	@ (80071f4 <update_control_loops+0x2b8>)
 800702c:	f7fd fda4 	bl	8004b78 <UnitConverter_angle>
 8007030:	eef0 7a40 	vmov.f32	s15, s0
 8007034:	4b70      	ldr	r3, [pc, #448]	@ (80071f8 <update_control_loops+0x2bc>)
 8007036:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
					normalized_position, UNIT_RADIAN, UNIT_DEGREE);
			return;
 800703a:	e2e9      	b.n	8007610 <update_control_loops+0x6d4>
		}
	}
	//100 point
	// Modify the J1 update logic in update_control_loops():
	if (j1_active && !j1_in_progress && motion_sequence_state == MOTION_IDLE
 800703c:	4b74      	ldr	r3, [pc, #464]	@ (8007210 <update_control_loops+0x2d4>)
 800703e:	781b      	ldrb	r3, [r3, #0]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d031      	beq.n	80070a8 <update_control_loops+0x16c>
 8007044:	4b73      	ldr	r3, [pc, #460]	@ (8007214 <update_control_loops+0x2d8>)
 8007046:	781b      	ldrb	r3, [r3, #0]
 8007048:	f083 0301 	eor.w	r3, r3, #1
 800704c:	b2db      	uxtb	r3, r3
 800704e:	2b00      	cmp	r3, #0
 8007050:	d02a      	beq.n	80070a8 <update_control_loops+0x16c>
 8007052:	4b71      	ldr	r3, [pc, #452]	@ (8007218 <update_control_loops+0x2dc>)
 8007054:	781b      	ldrb	r3, [r3, #0]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d126      	bne.n	80070a8 <update_control_loops+0x16c>
			&& !word_drawing_active
 800705a:	4b70      	ldr	r3, [pc, #448]	@ (800721c <update_control_loops+0x2e0>)
 800705c:	781b      	ldrb	r3, [r3, #0]
 800705e:	f083 0301 	eor.w	r3, r3, #1
 8007062:	b2db      	uxtb	r3, r3
 8007064:	2b00      	cmp	r3, #0
 8007066:	d01f      	beq.n	80070a8 <update_control_loops+0x16c>
			&& !current_drawing_sequence.sequence_active) {
 8007068:	4b6d      	ldr	r3, [pc, #436]	@ (8007220 <update_control_loops+0x2e4>)
 800706a:	799b      	ldrb	r3, [r3, #6]
 800706c:	f083 0301 	eor.w	r3, r3, #1
 8007070:	b2db      	uxtb	r3, r3
 8007072:	2b00      	cmp	r3, #0
 8007074:	d018      	beq.n	80070a8 <update_control_loops+0x16c>
		j1_in_progress = true;
 8007076:	4b67      	ldr	r3, [pc, #412]	@ (8007214 <update_control_loops+0x2d8>)
 8007078:	2201      	movs	r2, #1
 800707a:	701a      	strb	r2, [r3, #0]
		j1_cycle_count = 0;
 800707c:	4b69      	ldr	r3, [pc, #420]	@ (8007224 <update_control_loops+0x2e8>)
 800707e:	2200      	movs	r2, #0
 8007080:	701a      	strb	r2, [r3, #0]
		j1_going_to_target = true;
 8007082:	4b69      	ldr	r3, [pc, #420]	@ (8007228 <update_control_loops+0x2ec>)
 8007084:	2201      	movs	r2, #1
 8007086:	701a      	strb	r2, [r3, #0]
		j1_pen_down_complete = false;
 8007088:	4b68      	ldr	r3, [pc, #416]	@ (800722c <update_control_loops+0x2f0>)
 800708a:	2200      	movs	r2, #0
 800708c:	701a      	strb	r2, [r3, #0]
		j1_pen_delay = 0;  // Reset delay counter
 800708e:	4b68      	ldr	r3, [pc, #416]	@ (8007230 <update_control_loops+0x2f4>)
 8007090:	2200      	movs	r2, #0
 8007092:	601a      	str	r2, [r3, #0]
		start_combined_trajectory(J1_TARGET_PRIS, J1_TARGET_REV);
 8007094:	eddf 7a67 	vldr	s15, [pc, #412]	@ 8007234 <update_control_loops+0x2f8>
 8007098:	ed9f 7a67 	vldr	s14, [pc, #412]	@ 8007238 <update_control_loops+0x2fc>
 800709c:	eef0 0a47 	vmov.f32	s1, s14
 80070a0:	eeb0 0a67 	vmov.f32	s0, s15
 80070a4:	f7ff f9d6 	bl	8006454 <start_combined_trajectory>
	}

	// 2) ถ้าอยู่ใน sequence และ motion จบ (idle) แล้ว ให้เดิน state machine ต่อ
	if (j1_in_progress && motion_sequence_state == MOTION_IDLE) {
 80070a8:	4b5a      	ldr	r3, [pc, #360]	@ (8007214 <update_control_loops+0x2d8>)
 80070aa:	781b      	ldrb	r3, [r3, #0]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d05d      	beq.n	800716c <update_control_loops+0x230>
 80070b0:	4b59      	ldr	r3, [pc, #356]	@ (8007218 <update_control_loops+0x2dc>)
 80070b2:	781b      	ldrb	r3, [r3, #0]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d159      	bne.n	800716c <update_control_loops+0x230>
		if (j1_going_to_target) {
 80070b8:	4b5b      	ldr	r3, [pc, #364]	@ (8007228 <update_control_loops+0x2ec>)
 80070ba:	781b      	ldrb	r3, [r3, #0]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d026      	beq.n	800710e <update_control_loops+0x1d2>
			// At target position - handle pen down
			if (!j1_pen_down_complete) {
 80070c0:	4b5a      	ldr	r3, [pc, #360]	@ (800722c <update_control_loops+0x2f0>)
 80070c2:	781b      	ldrb	r3, [r3, #0]
 80070c4:	f083 0301 	eor.w	r3, r3, #1
 80070c8:	b2db      	uxtb	r3, r3
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d007      	beq.n	80070de <update_control_loops+0x1a2>
				plotter_pen_down();  // Actually put pen down
 80070ce:	f002 fe75 	bl	8009dbc <plotter_pen_down>
				j1_pen_down_complete = true;
 80070d2:	4b56      	ldr	r3, [pc, #344]	@ (800722c <update_control_loops+0x2f0>)
 80070d4:	2201      	movs	r2, #1
 80070d6:	701a      	strb	r2, [r3, #0]
				j1_pen_delay = 0;
 80070d8:	4b55      	ldr	r3, [pc, #340]	@ (8007230 <update_control_loops+0x2f4>)
 80070da:	2200      	movs	r2, #0
 80070dc:	601a      	str	r2, [r3, #0]
			}

			// Wait for pen down delay
			j1_pen_delay++;
 80070de:	4b54      	ldr	r3, [pc, #336]	@ (8007230 <update_control_loops+0x2f4>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	3301      	adds	r3, #1
 80070e4:	4a52      	ldr	r2, [pc, #328]	@ (8007230 <update_control_loops+0x2f4>)
 80070e6:	6013      	str	r3, [r2, #0]
			if (j1_pen_delay >= 250) {
 80070e8:	4b51      	ldr	r3, [pc, #324]	@ (8007230 <update_control_loops+0x2f4>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	2bf9      	cmp	r3, #249	@ 0xf9
 80070ee:	d93d      	bls.n	800716c <update_control_loops+0x230>
				j1_pen_delay = 0;
 80070f0:	4b4f      	ldr	r3, [pc, #316]	@ (8007230 <update_control_loops+0x2f4>)
 80070f2:	2200      	movs	r2, #0
 80070f4:	601a      	str	r2, [r3, #0]
				j1_going_to_target = false;
 80070f6:	4b4c      	ldr	r3, [pc, #304]	@ (8007228 <update_control_loops+0x2ec>)
 80070f8:	2200      	movs	r2, #0
 80070fa:	701a      	strb	r2, [r3, #0]
				plotter_pen_up();  // Lift pen before returning
 80070fc:	f002 fe4e 	bl	8009d9c <plotter_pen_up>
				// Return to 0,0
				start_combined_trajectory(0.0f, 0.0f);
 8007100:	eddf 0a4e 	vldr	s1, [pc, #312]	@ 800723c <update_control_loops+0x300>
 8007104:	ed9f 0a4d 	vldr	s0, [pc, #308]	@ 800723c <update_control_loops+0x300>
 8007108:	f7ff f9a4 	bl	8006454 <start_combined_trajectory>
 800710c:	e02e      	b.n	800716c <update_control_loops+0x230>
			}
		} else {
			// Returned to origin - prepare for next cycle or finish
			j1_pen_down_complete = false;
 800710e:	4b47      	ldr	r3, [pc, #284]	@ (800722c <update_control_loops+0x2f0>)
 8007110:	2200      	movs	r2, #0
 8007112:	701a      	strb	r2, [r3, #0]
			j1_cycle_count++;
 8007114:	4b43      	ldr	r3, [pc, #268]	@ (8007224 <update_control_loops+0x2e8>)
 8007116:	781b      	ldrb	r3, [r3, #0]
 8007118:	3301      	adds	r3, #1
 800711a:	b2da      	uxtb	r2, r3
 800711c:	4b41      	ldr	r3, [pc, #260]	@ (8007224 <update_control_loops+0x2e8>)
 800711e:	701a      	strb	r2, [r3, #0]

			if (j1_cycle_count < 10) {
 8007120:	4b40      	ldr	r3, [pc, #256]	@ (8007224 <update_control_loops+0x2e8>)
 8007122:	781b      	ldrb	r3, [r3, #0]
 8007124:	2b09      	cmp	r3, #9
 8007126:	d810      	bhi.n	800714a <update_control_loops+0x20e>
				// Continue to next cycle
				j1_going_to_target = true;
 8007128:	4b3f      	ldr	r3, [pc, #252]	@ (8007228 <update_control_loops+0x2ec>)
 800712a:	2201      	movs	r2, #1
 800712c:	701a      	strb	r2, [r3, #0]
				j1_pen_delay = 0;  // Reset delay for next cycle
 800712e:	4b40      	ldr	r3, [pc, #256]	@ (8007230 <update_control_loops+0x2f4>)
 8007130:	2200      	movs	r2, #0
 8007132:	601a      	str	r2, [r3, #0]
				start_combined_trajectory(J1_TARGET_PRIS, J1_TARGET_REV);
 8007134:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 8007234 <update_control_loops+0x2f8>
 8007138:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8007238 <update_control_loops+0x2fc>
 800713c:	eef0 0a47 	vmov.f32	s1, s14
 8007140:	eeb0 0a67 	vmov.f32	s0, s15
 8007144:	f7ff f986 	bl	8006454 <start_combined_trajectory>
 8007148:	e010      	b.n	800716c <update_control_loops+0x230>
			} else {
				// All 10 cycles complete - clean up
				j1_active = false;
 800714a:	4b31      	ldr	r3, [pc, #196]	@ (8007210 <update_control_loops+0x2d4>)
 800714c:	2200      	movs	r2, #0
 800714e:	701a      	strb	r2, [r3, #0]
				j1_in_progress = false;
 8007150:	4b30      	ldr	r3, [pc, #192]	@ (8007214 <update_control_loops+0x2d8>)
 8007152:	2200      	movs	r2, #0
 8007154:	701a      	strb	r2, [r3, #0]
				j1_cycle_count = 0;
 8007156:	4b33      	ldr	r3, [pc, #204]	@ (8007224 <update_control_loops+0x2e8>)
 8007158:	2200      	movs	r2, #0
 800715a:	701a      	strb	r2, [r3, #0]
				j1_pen_down_complete = false;
 800715c:	4b33      	ldr	r3, [pc, #204]	@ (800722c <update_control_loops+0x2f0>)
 800715e:	2200      	movs	r2, #0
 8007160:	701a      	strb	r2, [r3, #0]
				j1_pen_delay = 0;
 8007162:	4b33      	ldr	r3, [pc, #204]	@ (8007230 <update_control_loops+0x2f4>)
 8007164:	2200      	movs	r2, #0
 8007166:	601a      	str	r2, [r3, #0]
				plotter_pen_up();  // Ensure pen is up at end
 8007168:	f002 fe18 	bl	8009d9c <plotter_pen_up>
			}
		}
	}

	// Motion sequence handling
	switch (motion_sequence_state) {
 800716c:	4b2a      	ldr	r3, [pc, #168]	@ (8007218 <update_control_loops+0x2dc>)
 800716e:	781b      	ldrb	r3, [r3, #0]
 8007170:	3b01      	subs	r3, #1
 8007172:	2b05      	cmp	r3, #5
 8007174:	f200 8234 	bhi.w	80075e0 <update_control_loops+0x6a4>
 8007178:	a201      	add	r2, pc, #4	@ (adr r2, 8007180 <update_control_loops+0x244>)
 800717a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800717e:	bf00      	nop
 8007180:	08007199 	.word	0x08007199
 8007184:	080075e1 	.word	0x080075e1
 8007188:	080075e1 	.word	0x080075e1
 800718c:	0800724d 	.word	0x0800724d
 8007190:	0800757d 	.word	0x0800757d
 8007194:	080075d9 	.word	0x080075d9
	case MOTION_PEN_UP_DELAY:
		if (++motion_delay_timer >= 500) {
 8007198:	4b29      	ldr	r3, [pc, #164]	@ (8007240 <update_control_loops+0x304>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	3301      	adds	r3, #1
 800719e:	4a28      	ldr	r2, [pc, #160]	@ (8007240 <update_control_loops+0x304>)
 80071a0:	6013      	str	r3, [r2, #0]
 80071a2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80071a6:	f0c0 821d 	bcc.w	80075e4 <update_control_loops+0x6a8>
			// ใช้ sync motion สำหรับทุกกรณี รวมถึง homing
			if (current_drawing_sequence.sequence_active && drawing_pen_state) {
 80071aa:	4b1d      	ldr	r3, [pc, #116]	@ (8007220 <update_control_loops+0x2e4>)
 80071ac:	799b      	ldrb	r3, [r3, #6]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d005      	beq.n	80071be <update_control_loops+0x282>
 80071b2:	4b24      	ldr	r3, [pc, #144]	@ (8007244 <update_control_loops+0x308>)
 80071b4:	781b      	ldrb	r3, [r3, #0]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d001      	beq.n	80071be <update_control_loops+0x282>
				plotter_pen_down();
 80071ba:	f002 fdff 	bl	8009dbc <plotter_pen_down>
			}
			if (!sync_motion_active) {
 80071be:	4b22      	ldr	r3, [pc, #136]	@ (8007248 <update_control_loops+0x30c>)
 80071c0:	781b      	ldrb	r3, [r3, #0]
 80071c2:	f083 0301 	eor.w	r3, r3, #1
 80071c6:	b2db      	uxtb	r3, r3
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d007      	beq.n	80071dc <update_control_loops+0x2a0>
				prismatic_axis.trajectory_active = true;
 80071cc:	4b08      	ldr	r3, [pc, #32]	@ (80071f0 <update_control_loops+0x2b4>)
 80071ce:	2201      	movs	r2, #1
 80071d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
				revolute_axis.trajectory_active = true;
 80071d4:	4b08      	ldr	r3, [pc, #32]	@ (80071f8 <update_control_loops+0x2bc>)
 80071d6:	2201      	movs	r2, #1
 80071d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
			}
			motion_sequence_state = MOTION_BOTH_AXES_ACTIVE;
 80071dc:	4b0e      	ldr	r3, [pc, #56]	@ (8007218 <update_control_loops+0x2dc>)
 80071de:	2204      	movs	r2, #4
 80071e0:	701a      	strb	r2, [r3, #0]
		}
		break;
 80071e2:	e1ff      	b.n	80075e4 <update_control_loops+0x6a8>
 80071e4:	200009e4 	.word	0x200009e4
 80071e8:	200007fc 	.word	0x200007fc
 80071ec:	20000988 	.word	0x20000988
 80071f0:	20000704 	.word	0x20000704
 80071f4:	20000d7c 	.word	0x20000d7c
 80071f8:	20000748 	.word	0x20000748
 80071fc:	200007eb 	.word	0x200007eb
 8007200:	200007ea 	.word	0x200007ea
 8007204:	44fa0000 	.word	0x44fa0000
 8007208:	200008f0 	.word	0x200008f0
 800720c:	2000093c 	.word	0x2000093c
 8007210:	20000899 	.word	0x20000899
 8007214:	2000089a 	.word	0x2000089a
 8007218:	2000078c 	.word	0x2000078c
 800721c:	200008c8 	.word	0x200008c8
 8007220:	200008b4 	.word	0x200008b4
 8007224:	20000898 	.word	0x20000898
 8007228:	20000335 	.word	0x20000335
 800722c:	200007ec 	.word	0x200007ec
 8007230:	20000804 	.word	0x20000804
 8007234:	43480000 	.word	0x43480000
 8007238:	42b40000 	.word	0x42b40000
 800723c:	00000000 	.word	0x00000000
 8007240:	200007e0 	.word	0x200007e0
 8007244:	200008c0 	.word	0x200008c0
 8007248:	200008b0 	.word	0x200008b0

	case MOTION_BOTH_AXES_ACTIVE: {
		bool motion_finished = false;
 800724c:	2300      	movs	r3, #0
 800724e:	75fb      	strb	r3, [r7, #23]

		static float last_pris_pos_sync = -999999.0f;
		static float last_rev_pos_sync = -999999.0f;
		static bool last_sync_active = false;

		if (sync_motion_active) {
 8007250:	4b65      	ldr	r3, [pc, #404]	@ (80073e8 <update_control_loops+0x4ac>)
 8007252:	781b      	ldrb	r3, [r3, #0]
 8007254:	2b00      	cmp	r3, #0
 8007256:	f000 80e7 	beq.w	8007428 <update_control_loops+0x4ec>
			// Time-synchronized motion
			sync_start_time += 0.001f; // Assuming 1ms control loop
 800725a:	4b64      	ldr	r3, [pc, #400]	@ (80073ec <update_control_loops+0x4b0>)
 800725c:	edd3 7a00 	vldr	s15, [r3]
 8007260:	ed9f 7a63 	vldr	s14, [pc, #396]	@ 80073f0 <update_control_loops+0x4b4>
 8007264:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007268:	4b60      	ldr	r3, [pc, #384]	@ (80073ec <update_control_loops+0x4b0>)
 800726a:	edc3 7a00 	vstr	s15, [r3]

			float progress = sync_start_time / sync_total_time;
 800726e:	4b5f      	ldr	r3, [pc, #380]	@ (80073ec <update_control_loops+0x4b0>)
 8007270:	edd3 6a00 	vldr	s13, [r3]
 8007274:	4b5f      	ldr	r3, [pc, #380]	@ (80073f4 <update_control_loops+0x4b8>)
 8007276:	ed93 7a00 	vldr	s14, [r3]
 800727a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800727e:	edc7 7a04 	vstr	s15, [r7, #16]
			if (progress >= 1.0f) {
 8007282:	edd7 7a04 	vldr	s15, [r7, #16]
 8007286:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800728a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800728e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007292:	db04      	blt.n	800729e <update_control_loops+0x362>
				progress = 1.0f;
 8007294:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8007298:	613b      	str	r3, [r7, #16]
				motion_finished = true;
 800729a:	2301      	movs	r3, #1
 800729c:	75fb      	strb	r3, [r7, #23]
			}

			// Apply smooth S-curve to progress for better motion profile
			float smooth_progress = progress * progress
 800729e:	edd7 7a04 	vldr	s15, [r7, #16]
 80072a2:	ee27 7aa7 	vmul.f32	s14, s15, s15
					* (3.0f - 2.0f * progress); // Smoothstep function
 80072a6:	edd7 7a04 	vldr	s15, [r7, #16]
 80072aa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80072ae:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 80072b2:	ee76 7ae7 	vsub.f32	s15, s13, s15
			float smooth_progress = progress * progress
 80072b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072ba:	edc7 7a03 	vstr	s15, [r7, #12]

			// Calculate synchronized positions
			if (!(homing_active && homing_state == HOMING_REV_TO_ZERO_DEG)) {
 80072be:	4b4e      	ldr	r3, [pc, #312]	@ (80073f8 <update_control_loops+0x4bc>)
 80072c0:	781b      	ldrb	r3, [r3, #0]
 80072c2:	f083 0301 	eor.w	r3, r3, #1
 80072c6:	b2db      	uxtb	r3, r3
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d103      	bne.n	80072d4 <update_control_loops+0x398>
 80072cc:	4b4b      	ldr	r3, [pc, #300]	@ (80073fc <update_control_loops+0x4c0>)
 80072ce:	781b      	ldrb	r3, [r3, #0]
 80072d0:	2b07      	cmp	r3, #7
 80072d2:	d035      	beq.n	8007340 <update_control_loops+0x404>
				// Prismatic axis synchronized position
				prismatic_axis.position = prismatic_axis.initial_pos
 80072d4:	4b4a      	ldr	r3, [pc, #296]	@ (8007400 <update_control_loops+0x4c4>)
 80072d6:	ed93 7a03 	vldr	s14, [r3, #12]
						+ (prismatic_axis.target_pos
 80072da:	4b49      	ldr	r3, [pc, #292]	@ (8007400 <update_control_loops+0x4c4>)
 80072dc:	edd3 6a04 	vldr	s13, [r3, #16]
								- prismatic_axis.initial_pos) * smooth_progress;
 80072e0:	4b47      	ldr	r3, [pc, #284]	@ (8007400 <update_control_loops+0x4c4>)
 80072e2:	edd3 7a03 	vldr	s15, [r3, #12]
 80072e6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80072ea:	edd7 7a03 	vldr	s15, [r7, #12]
 80072ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
						+ (prismatic_axis.target_pos
 80072f2:	ee77 7a27 	vadd.f32	s15, s14, s15
				prismatic_axis.position = prismatic_axis.initial_pos
 80072f6:	4b42      	ldr	r3, [pc, #264]	@ (8007400 <update_control_loops+0x4c4>)
 80072f8:	edc3 7a00 	vstr	s15, [r3]

				// Calculate velocity (derivative of position)
				// FIX: Use instance-specific variables instead of static
				if (!last_sync_active) {
 80072fc:	4b41      	ldr	r3, [pc, #260]	@ (8007404 <update_control_loops+0x4c8>)
 80072fe:	781b      	ldrb	r3, [r3, #0]
 8007300:	f083 0301 	eor.w	r3, r3, #1
 8007304:	b2db      	uxtb	r3, r3
 8007306:	2b00      	cmp	r3, #0
 8007308:	d007      	beq.n	800731a <update_control_loops+0x3de>
					last_pris_pos_sync = prismatic_axis.position;
 800730a:	4b3d      	ldr	r3, [pc, #244]	@ (8007400 <update_control_loops+0x4c4>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4a3e      	ldr	r2, [pc, #248]	@ (8007408 <update_control_loops+0x4cc>)
 8007310:	6013      	str	r3, [r2, #0]
					last_rev_pos_sync = revolute_axis.position;
 8007312:	4b3e      	ldr	r3, [pc, #248]	@ (800740c <update_control_loops+0x4d0>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4a3e      	ldr	r2, [pc, #248]	@ (8007410 <update_control_loops+0x4d4>)
 8007318:	6013      	str	r3, [r2, #0]
				}
				prismatic_axis.velocity = (prismatic_axis.position
 800731a:	4b39      	ldr	r3, [pc, #228]	@ (8007400 <update_control_loops+0x4c4>)
 800731c:	ed93 7a00 	vldr	s14, [r3]
						- last_pris_pos_sync) / 0.001f; // mm/s
 8007320:	4b39      	ldr	r3, [pc, #228]	@ (8007408 <update_control_loops+0x4cc>)
 8007322:	edd3 7a00 	vldr	s15, [r3]
 8007326:	ee37 7a67 	vsub.f32	s14, s14, s15
 800732a:	eddf 6a31 	vldr	s13, [pc, #196]	@ 80073f0 <update_control_loops+0x4b4>
 800732e:	eec7 7a26 	vdiv.f32	s15, s14, s13
				prismatic_axis.velocity = (prismatic_axis.position
 8007332:	4b33      	ldr	r3, [pc, #204]	@ (8007400 <update_control_loops+0x4c4>)
 8007334:	edc3 7a01 	vstr	s15, [r3, #4]
				last_pris_pos_sync = prismatic_axis.position;
 8007338:	4b31      	ldr	r3, [pc, #196]	@ (8007400 <update_control_loops+0x4c4>)
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4a32      	ldr	r2, [pc, #200]	@ (8007408 <update_control_loops+0x4cc>)
 800733e:	6013      	str	r3, [r2, #0]
			}

			// Revolute axis synchronized position
			revolute_axis.position = revolute_axis.initial_pos
 8007340:	4b32      	ldr	r3, [pc, #200]	@ (800740c <update_control_loops+0x4d0>)
 8007342:	ed93 7a03 	vldr	s14, [r3, #12]
					+ (revolute_axis.target_pos - revolute_axis.initial_pos)
 8007346:	4b31      	ldr	r3, [pc, #196]	@ (800740c <update_control_loops+0x4d0>)
 8007348:	edd3 6a04 	vldr	s13, [r3, #16]
 800734c:	4b2f      	ldr	r3, [pc, #188]	@ (800740c <update_control_loops+0x4d0>)
 800734e:	edd3 7a03 	vldr	s15, [r3, #12]
 8007352:	ee76 6ae7 	vsub.f32	s13, s13, s15
							* smooth_progress;
 8007356:	edd7 7a03 	vldr	s15, [r7, #12]
 800735a:	ee66 7aa7 	vmul.f32	s15, s13, s15
					+ (revolute_axis.target_pos - revolute_axis.initial_pos)
 800735e:	ee77 7a27 	vadd.f32	s15, s14, s15
			revolute_axis.position = revolute_axis.initial_pos
 8007362:	4b2a      	ldr	r3, [pc, #168]	@ (800740c <update_control_loops+0x4d0>)
 8007364:	edc3 7a00 	vstr	s15, [r3]

			// Calculate velocity (derivative of position)
			// Initialize to impossible value
			if (last_rev_pos_sync == -999999.0f) {
 8007368:	4b29      	ldr	r3, [pc, #164]	@ (8007410 <update_control_loops+0x4d4>)
 800736a:	edd3 7a00 	vldr	s15, [r3]
 800736e:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8007414 <update_control_loops+0x4d8>
 8007372:	eef4 7a47 	vcmp.f32	s15, s14
 8007376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800737a:	d103      	bne.n	8007384 <update_control_loops+0x448>
				last_rev_pos_sync = revolute_axis.position;
 800737c:	4b23      	ldr	r3, [pc, #140]	@ (800740c <update_control_loops+0x4d0>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4a23      	ldr	r2, [pc, #140]	@ (8007410 <update_control_loops+0x4d4>)
 8007382:	6013      	str	r3, [r2, #0]
			}
			revolute_axis.velocity =
					(revolute_axis.position - last_rev_pos_sync) / 0.001f; // rad/s
 8007384:	4b21      	ldr	r3, [pc, #132]	@ (800740c <update_control_loops+0x4d0>)
 8007386:	ed93 7a00 	vldr	s14, [r3]
 800738a:	4b21      	ldr	r3, [pc, #132]	@ (8007410 <update_control_loops+0x4d4>)
 800738c:	edd3 7a00 	vldr	s15, [r3]
 8007390:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007394:	eddf 6a16 	vldr	s13, [pc, #88]	@ 80073f0 <update_control_loops+0x4b4>
 8007398:	eec7 7a26 	vdiv.f32	s15, s14, s13
			revolute_axis.velocity =
 800739c:	4b1b      	ldr	r3, [pc, #108]	@ (800740c <update_control_loops+0x4d0>)
 800739e:	edc3 7a01 	vstr	s15, [r3, #4]
			last_rev_pos_sync = revolute_axis.position;
 80073a2:	4b1a      	ldr	r3, [pc, #104]	@ (800740c <update_control_loops+0x4d0>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	4a1a      	ldr	r2, [pc, #104]	@ (8007410 <update_control_loops+0x4d4>)
 80073a8:	6013      	str	r3, [r2, #0]

			if (motion_finished) {
 80073aa:	7dfb      	ldrb	r3, [r7, #23]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	f000 80e0 	beq.w	8007572 <update_control_loops+0x636>
				// Motion completed
				prismatic_axis.position = prismatic_encoder.mm;
 80073b2:	4b19      	ldr	r3, [pc, #100]	@ (8007418 <update_control_loops+0x4dc>)
 80073b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80073b6:	4a12      	ldr	r2, [pc, #72]	@ (8007400 <update_control_loops+0x4c4>)
 80073b8:	6013      	str	r3, [r2, #0]
				revolute_axis.position = revolute_encoder.rads;
 80073ba:	4b18      	ldr	r3, [pc, #96]	@ (800741c <update_control_loops+0x4e0>)
 80073bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073be:	4a13      	ldr	r2, [pc, #76]	@ (800740c <update_control_loops+0x4d0>)
 80073c0:	6013      	str	r3, [r2, #0]
				prismatic_axis.velocity = 0.0f;
 80073c2:	4b0f      	ldr	r3, [pc, #60]	@ (8007400 <update_control_loops+0x4c4>)
 80073c4:	f04f 0200 	mov.w	r2, #0
 80073c8:	605a      	str	r2, [r3, #4]
				revolute_axis.velocity = 0.0f;
 80073ca:	4b10      	ldr	r3, [pc, #64]	@ (800740c <update_control_loops+0x4d0>)
 80073cc:	f04f 0200 	mov.w	r2, #0
 80073d0:	605a      	str	r2, [r3, #4]

				sync_motion_active = false;
 80073d2:	4b05      	ldr	r3, [pc, #20]	@ (80073e8 <update_control_loops+0x4ac>)
 80073d4:	2200      	movs	r2, #0
 80073d6:	701a      	strb	r2, [r3, #0]
				motion_delay_timer = 0;
 80073d8:	4b11      	ldr	r3, [pc, #68]	@ (8007420 <update_control_loops+0x4e4>)
 80073da:	2200      	movs	r2, #0
 80073dc:	601a      	str	r2, [r3, #0]
				motion_sequence_state = MOTION_PEN_DOWN_DELAY;
 80073de:	4b11      	ldr	r3, [pc, #68]	@ (8007424 <update_control_loops+0x4e8>)
 80073e0:	2205      	movs	r2, #5
 80073e2:	701a      	strb	r2, [r3, #0]
 80073e4:	e0c5      	b.n	8007572 <update_control_loops+0x636>
 80073e6:	bf00      	nop
 80073e8:	200008b0 	.word	0x200008b0
 80073ec:	200008a8 	.word	0x200008a8
 80073f0:	3a83126f 	.word	0x3a83126f
 80073f4:	200008ac 	.word	0x200008ac
 80073f8:	200007eb 	.word	0x200007eb
 80073fc:	200007ea 	.word	0x200007ea
 8007400:	20000704 	.word	0x20000704
 8007404:	200008d4 	.word	0x200008d4
 8007408:	200005b4 	.word	0x200005b4
 800740c:	20000748 	.word	0x20000748
 8007410:	200005b8 	.word	0x200005b8
 8007414:	c97423f0 	.word	0xc97423f0
 8007418:	20000988 	.word	0x20000988
 800741c:	200009e4 	.word	0x200009e4
 8007420:	200007e0 	.word	0x200007e0
 8007424:	2000078c 	.word	0x2000078c
			}

		} else {
			// Handle prismatic axis (skip if in homing mode)
			if (!(homing_active && homing_state == HOMING_REV_TO_ZERO_DEG)) {
 8007428:	4b7c      	ldr	r3, [pc, #496]	@ (800761c <update_control_loops+0x6e0>)
 800742a:	781b      	ldrb	r3, [r3, #0]
 800742c:	f083 0301 	eor.w	r3, r3, #1
 8007430:	b2db      	uxtb	r3, r3
 8007432:	2b00      	cmp	r3, #0
 8007434:	d103      	bne.n	800743e <update_control_loops+0x502>
 8007436:	4b7a      	ldr	r3, [pc, #488]	@ (8007620 <update_control_loops+0x6e4>)
 8007438:	781b      	ldrb	r3, [r3, #0]
 800743a:	2b07      	cmp	r3, #7
 800743c:	d045      	beq.n	80074ca <update_control_loops+0x58e>
				if (prismatic_axis.trajectory_active && !prisEva.isFinised) {
 800743e:	4b79      	ldr	r3, [pc, #484]	@ (8007624 <update_control_loops+0x6e8>)
 8007440:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007444:	2b00      	cmp	r3, #0
 8007446:	d040      	beq.n	80074ca <update_control_loops+0x58e>
 8007448:	4b77      	ldr	r3, [pc, #476]	@ (8007628 <update_control_loops+0x6ec>)
 800744a:	7c1b      	ldrb	r3, [r3, #16]
 800744c:	f083 0301 	eor.w	r3, r3, #1
 8007450:	b2db      	uxtb	r3, r3
 8007452:	2b00      	cmp	r3, #0
 8007454:	d039      	beq.n	80074ca <update_control_loops+0x58e>
					Trapezoidal_Evaluated(&prisGen, &prisEva,
 8007456:	4b73      	ldr	r3, [pc, #460]	@ (8007624 <update_control_loops+0x6e8>)
 8007458:	ed93 8a03 	vldr	s16, [r3, #12]
 800745c:	4b71      	ldr	r3, [pc, #452]	@ (8007624 <update_control_loops+0x6e8>)
 800745e:	edd3 8a04 	vldr	s17, [r3, #16]
							prismatic_axis.initial_pos,
							prismatic_axis.target_pos,
							ZGX45RGG_400RPM_Constant.traject_sd_max,
 8007462:	4b72      	ldr	r3, [pc, #456]	@ (800762c <update_control_loops+0x6f0>)
 8007464:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
					Trapezoidal_Evaluated(&prisGen, &prisEva,
 8007468:	4610      	mov	r0, r2
 800746a:	4619      	mov	r1, r3
 800746c:	f7f9 fb72 	bl	8000b54 <__aeabi_d2f>
 8007470:	4604      	mov	r4, r0
							ZGX45RGG_400RPM_Constant.traject_sdd_max);
 8007472:	4b6e      	ldr	r3, [pc, #440]	@ (800762c <update_control_loops+0x6f0>)
 8007474:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
					Trapezoidal_Evaluated(&prisGen, &prisEva,
 8007478:	4610      	mov	r0, r2
 800747a:	4619      	mov	r1, r3
 800747c:	f7f9 fb6a 	bl	8000b54 <__aeabi_d2f>
 8007480:	4603      	mov	r3, r0
 8007482:	ee01 3a90 	vmov	s3, r3
 8007486:	ee01 4a10 	vmov	s2, r4
 800748a:	eef0 0a68 	vmov.f32	s1, s17
 800748e:	eeb0 0a48 	vmov.f32	s0, s16
 8007492:	4965      	ldr	r1, [pc, #404]	@ (8007628 <update_control_loops+0x6ec>)
 8007494:	4866      	ldr	r0, [pc, #408]	@ (8007630 <update_control_loops+0x6f4>)
 8007496:	f7fc ffd7 	bl	8004448 <Trapezoidal_Evaluated>

					prismatic_axis.position = prisEva.setposition;
 800749a:	4b63      	ldr	r3, [pc, #396]	@ (8007628 <update_control_loops+0x6ec>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	4a61      	ldr	r2, [pc, #388]	@ (8007624 <update_control_loops+0x6e8>)
 80074a0:	6013      	str	r3, [r2, #0]
					prismatic_axis.velocity = prisEva.setvelocity;
 80074a2:	4b61      	ldr	r3, [pc, #388]	@ (8007628 <update_control_loops+0x6ec>)
 80074a4:	685b      	ldr	r3, [r3, #4]
 80074a6:	4a5f      	ldr	r2, [pc, #380]	@ (8007624 <update_control_loops+0x6e8>)
 80074a8:	6053      	str	r3, [r2, #4]

					if (prisEva.isFinised) {
 80074aa:	4b5f      	ldr	r3, [pc, #380]	@ (8007628 <update_control_loops+0x6ec>)
 80074ac:	7c1b      	ldrb	r3, [r3, #16]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d00b      	beq.n	80074ca <update_control_loops+0x58e>
						prismatic_axis.trajectory_active = false;
 80074b2:	4b5c      	ldr	r3, [pc, #368]	@ (8007624 <update_control_loops+0x6e8>)
 80074b4:	2200      	movs	r2, #0
 80074b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
//						prismatic_axis.position = prisEva.setposition;
						prismatic_axis.position = prismatic_encoder.mm;
 80074ba:	4b5e      	ldr	r3, [pc, #376]	@ (8007634 <update_control_loops+0x6f8>)
 80074bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80074be:	4a59      	ldr	r2, [pc, #356]	@ (8007624 <update_control_loops+0x6e8>)
 80074c0:	6013      	str	r3, [r2, #0]
						prismatic_axis.velocity = 0.0f;
 80074c2:	4b58      	ldr	r3, [pc, #352]	@ (8007624 <update_control_loops+0x6e8>)
 80074c4:	f04f 0200 	mov.w	r2, #0
 80074c8:	605a      	str	r2, [r3, #4]
					}
				}
			}

			// Handle revolute axis
			if (revolute_axis.trajectory_active && !revEva.isFinised) {
 80074ca:	4b5b      	ldr	r3, [pc, #364]	@ (8007638 <update_control_loops+0x6fc>)
 80074cc:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d040      	beq.n	8007556 <update_control_loops+0x61a>
 80074d4:	4b59      	ldr	r3, [pc, #356]	@ (800763c <update_control_loops+0x700>)
 80074d6:	7c1b      	ldrb	r3, [r3, #16]
 80074d8:	f083 0301 	eor.w	r3, r3, #1
 80074dc:	b2db      	uxtb	r3, r3
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d039      	beq.n	8007556 <update_control_loops+0x61a>
				Trapezoidal_Evaluated(&revGen, &revEva,
 80074e2:	4b55      	ldr	r3, [pc, #340]	@ (8007638 <update_control_loops+0x6fc>)
 80074e4:	ed93 8a03 	vldr	s16, [r3, #12]
 80074e8:	4b53      	ldr	r3, [pc, #332]	@ (8007638 <update_control_loops+0x6fc>)
 80074ea:	edd3 8a04 	vldr	s17, [r3, #16]
						revolute_axis.initial_pos, revolute_axis.target_pos,
						ZGX45RGG_150RPM_Constant.traject_qd_max,
 80074ee:	4b54      	ldr	r3, [pc, #336]	@ (8007640 <update_control_loops+0x704>)
 80074f0:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
				Trapezoidal_Evaluated(&revGen, &revEva,
 80074f4:	4610      	mov	r0, r2
 80074f6:	4619      	mov	r1, r3
 80074f8:	f7f9 fb2c 	bl	8000b54 <__aeabi_d2f>
 80074fc:	4604      	mov	r4, r0
						ZGX45RGG_150RPM_Constant.traject_qdd_max);
 80074fe:	4b50      	ldr	r3, [pc, #320]	@ (8007640 <update_control_loops+0x704>)
 8007500:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
				Trapezoidal_Evaluated(&revGen, &revEva,
 8007504:	4610      	mov	r0, r2
 8007506:	4619      	mov	r1, r3
 8007508:	f7f9 fb24 	bl	8000b54 <__aeabi_d2f>
 800750c:	4603      	mov	r3, r0
 800750e:	ee01 3a90 	vmov	s3, r3
 8007512:	ee01 4a10 	vmov	s2, r4
 8007516:	eef0 0a68 	vmov.f32	s1, s17
 800751a:	eeb0 0a48 	vmov.f32	s0, s16
 800751e:	4947      	ldr	r1, [pc, #284]	@ (800763c <update_control_loops+0x700>)
 8007520:	4848      	ldr	r0, [pc, #288]	@ (8007644 <update_control_loops+0x708>)
 8007522:	f7fc ff91 	bl	8004448 <Trapezoidal_Evaluated>

				revolute_axis.position = revEva.setposition;
 8007526:	4b45      	ldr	r3, [pc, #276]	@ (800763c <update_control_loops+0x700>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4a43      	ldr	r2, [pc, #268]	@ (8007638 <update_control_loops+0x6fc>)
 800752c:	6013      	str	r3, [r2, #0]
				revolute_axis.velocity = revEva.setvelocity;
 800752e:	4b43      	ldr	r3, [pc, #268]	@ (800763c <update_control_loops+0x700>)
 8007530:	685b      	ldr	r3, [r3, #4]
 8007532:	4a41      	ldr	r2, [pc, #260]	@ (8007638 <update_control_loops+0x6fc>)
 8007534:	6053      	str	r3, [r2, #4]

				if (revEva.isFinised) {
 8007536:	4b41      	ldr	r3, [pc, #260]	@ (800763c <update_control_loops+0x700>)
 8007538:	7c1b      	ldrb	r3, [r3, #16]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d00b      	beq.n	8007556 <update_control_loops+0x61a>
					revolute_axis.trajectory_active = false;
 800753e:	4b3e      	ldr	r3, [pc, #248]	@ (8007638 <update_control_loops+0x6fc>)
 8007540:	2200      	movs	r2, #0
 8007542:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
//					revolute_axis.position = revEva.setposition;
					revolute_axis.position = revolute_encoder.rads;
 8007546:	4b40      	ldr	r3, [pc, #256]	@ (8007648 <update_control_loops+0x70c>)
 8007548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800754a:	4a3b      	ldr	r2, [pc, #236]	@ (8007638 <update_control_loops+0x6fc>)
 800754c:	6013      	str	r3, [r2, #0]
					revolute_axis.velocity = 0.0f;
 800754e:	4b3a      	ldr	r3, [pc, #232]	@ (8007638 <update_control_loops+0x6fc>)
 8007550:	f04f 0200 	mov.w	r2, #0
 8007554:	605a      	str	r2, [r3, #4]
				}
			}

			// Check if BOTH axes are finished (or only revolute for homing)
			if (prisEva.isFinised && revEva.isFinised) {
 8007556:	4b34      	ldr	r3, [pc, #208]	@ (8007628 <update_control_loops+0x6ec>)
 8007558:	7c1b      	ldrb	r3, [r3, #16]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d009      	beq.n	8007572 <update_control_loops+0x636>
 800755e:	4b37      	ldr	r3, [pc, #220]	@ (800763c <update_control_loops+0x700>)
 8007560:	7c1b      	ldrb	r3, [r3, #16]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d005      	beq.n	8007572 <update_control_loops+0x636>
				motion_delay_timer = 0;
 8007566:	4b39      	ldr	r3, [pc, #228]	@ (800764c <update_control_loops+0x710>)
 8007568:	2200      	movs	r2, #0
 800756a:	601a      	str	r2, [r3, #0]
				motion_sequence_state = MOTION_PEN_DOWN_DELAY;
 800756c:	4b38      	ldr	r3, [pc, #224]	@ (8007650 <update_control_loops+0x714>)
 800756e:	2205      	movs	r2, #5
 8007570:	701a      	strb	r2, [r3, #0]
			}
		}
		last_sync_active = sync_motion_active;
 8007572:	4b38      	ldr	r3, [pc, #224]	@ (8007654 <update_control_loops+0x718>)
 8007574:	781a      	ldrb	r2, [r3, #0]
 8007576:	4b38      	ldr	r3, [pc, #224]	@ (8007658 <update_control_loops+0x71c>)
 8007578:	701a      	strb	r2, [r3, #0]
	}
		break;
 800757a:	e036      	b.n	80075ea <update_control_loops+0x6ae>

	case MOTION_PEN_DOWN_DELAY:
		if (++motion_delay_timer >= 500) {
 800757c:	4b33      	ldr	r3, [pc, #204]	@ (800764c <update_control_loops+0x710>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	3301      	adds	r3, #1
 8007582:	4a32      	ldr	r2, [pc, #200]	@ (800764c <update_control_loops+0x710>)
 8007584:	6013      	str	r3, [r2, #0]
 8007586:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800758a:	d32d      	bcc.n	80075e8 <update_control_loops+0x6ac>
			if (current_drawing_sequence.sequence_active
 800758c:	4b33      	ldr	r3, [pc, #204]	@ (800765c <update_control_loops+0x720>)
 800758e:	799b      	ldrb	r3, [r3, #6]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d01b      	beq.n	80075cc <update_control_loops+0x690>
					&& current_drawing_sequence.current_point > 0) {
 8007594:	4b31      	ldr	r3, [pc, #196]	@ (800765c <update_control_loops+0x720>)
 8007596:	795b      	ldrb	r3, [r3, #5]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d017      	beq.n	80075cc <update_control_loops+0x690>
				// ดูสถานะปากกาจากจุดปัจจุบัน
				DrawingPoint_t current =
						current_drawing_sequence.points[current_drawing_sequence.current_point
 800759c:	4b2f      	ldr	r3, [pc, #188]	@ (800765c <update_control_loops+0x720>)
 800759e:	681a      	ldr	r2, [r3, #0]
 80075a0:	4b2e      	ldr	r3, [pc, #184]	@ (800765c <update_control_loops+0x720>)
 80075a2:	795b      	ldrb	r3, [r3, #5]
 80075a4:	4619      	mov	r1, r3
 80075a6:	460b      	mov	r3, r1
 80075a8:	005b      	lsls	r3, r3, #1
 80075aa:	440b      	add	r3, r1
 80075ac:	009b      	lsls	r3, r3, #2
 80075ae:	3b0c      	subs	r3, #12
 80075b0:	441a      	add	r2, r3
				DrawingPoint_t current =
 80075b2:	463b      	mov	r3, r7
 80075b4:	ca07      	ldmia	r2, {r0, r1, r2}
 80075b6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
								- 1];

				if (current.pen_down) {
 80075ba:	7a3b      	ldrb	r3, [r7, #8]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d002      	beq.n	80075c6 <update_control_loops+0x68a>
					plotter_pen_down();
 80075c0:	f002 fbfc 	bl	8009dbc <plotter_pen_down>
					&& current_drawing_sequence.current_point > 0) {
 80075c4:	e004      	b.n	80075d0 <update_control_loops+0x694>
				} else {
					plotter_pen_up();
 80075c6:	f002 fbe9 	bl	8009d9c <plotter_pen_up>
					&& current_drawing_sequence.current_point > 0) {
 80075ca:	e001      	b.n	80075d0 <update_control_loops+0x694>
				}
			} else {
				// ไม่ได้วาดตัวอักษร - วางปากกาตามปกติ
				plotter_pen_down();
 80075cc:	f002 fbf6 	bl	8009dbc <plotter_pen_down>
			}
			motion_sequence_state = MOTION_COMPLETE;
 80075d0:	4b1f      	ldr	r3, [pc, #124]	@ (8007650 <update_control_loops+0x714>)
 80075d2:	2206      	movs	r2, #6
 80075d4:	701a      	strb	r2, [r3, #0]
		}
		break;
 80075d6:	e007      	b.n	80075e8 <update_control_loops+0x6ac>

	case MOTION_COMPLETE:
		motion_sequence_state = MOTION_IDLE;
 80075d8:	4b1d      	ldr	r3, [pc, #116]	@ (8007650 <update_control_loops+0x714>)
 80075da:	2200      	movs	r2, #0
 80075dc:	701a      	strb	r2, [r3, #0]
		break;
 80075de:	e004      	b.n	80075ea <update_control_loops+0x6ae>

	default:
		break;
 80075e0:	bf00      	nop
 80075e2:	e002      	b.n	80075ea <update_control_loops+0x6ae>
		break;
 80075e4:	bf00      	nop
 80075e6:	e000      	b.n	80075ea <update_control_loops+0x6ae>
		break;
 80075e8:	bf00      	nop
	}

	prismatic_axis.mm = prismatic_encoder.mm;
 80075ea:	4b12      	ldr	r3, [pc, #72]	@ (8007634 <update_control_loops+0x6f8>)
 80075ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80075ee:	4a0d      	ldr	r2, [pc, #52]	@ (8007624 <update_control_loops+0x6e8>)
 80075f0:	6393      	str	r3, [r2, #56]	@ 0x38
	revolute_axis.deg = UnitConverter_angle(&converter_system,
 80075f2:	4b1b      	ldr	r3, [pc, #108]	@ (8007660 <update_control_loops+0x724>)
 80075f4:	edd3 7a00 	vldr	s15, [r3]
 80075f8:	220e      	movs	r2, #14
 80075fa:	210f      	movs	r1, #15
 80075fc:	eeb0 0a67 	vmov.f32	s0, s15
 8007600:	4818      	ldr	r0, [pc, #96]	@ (8007664 <update_control_loops+0x728>)
 8007602:	f7fd fab9 	bl	8004b78 <UnitConverter_angle>
 8007606:	eef0 7a40 	vmov.f32	s15, s0
 800760a:	4b0b      	ldr	r3, [pc, #44]	@ (8007638 <update_control_loops+0x6fc>)
 800760c:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
			normalized_position, UNIT_RADIAN, UNIT_DEGREE);
}
 8007610:	371c      	adds	r7, #28
 8007612:	46bd      	mov	sp, r7
 8007614:	ecbd 8b02 	vpop	{d8}
 8007618:	bd90      	pop	{r4, r7, pc}
 800761a:	bf00      	nop
 800761c:	200007eb 	.word	0x200007eb
 8007620:	200007ea 	.word	0x200007ea
 8007624:	20000704 	.word	0x20000704
 8007628:	200007b8 	.word	0x200007b8
 800762c:	20000080 	.word	0x20000080
 8007630:	20000790 	.word	0x20000790
 8007634:	20000988 	.word	0x20000988
 8007638:	20000748 	.word	0x20000748
 800763c:	200007cc 	.word	0x200007cc
 8007640:	20000000 	.word	0x20000000
 8007644:	200007a4 	.word	0x200007a4
 8007648:	200009e4 	.word	0x200009e4
 800764c:	200007e0 	.word	0x200007e0
 8007650:	2000078c 	.word	0x2000078c
 8007654:	200008b0 	.word	0x200008b0
 8007658:	200008d4 	.word	0x200008d4
 800765c:	200008b4 	.word	0x200008b4
 8007660:	200007fc 	.word	0x200007fc
 8007664:	20000d7c 	.word	0x20000d7c

08007668 <check_emergency_button>:

void check_emergency_button(void) {
 8007668:	b580      	push	{r7, lr}
 800766a:	b082      	sub	sp, #8
 800766c:	af00      	add	r7, sp, #0
	static uint32_t emer_debounce_counter = 0;
	const uint32_t EMER_DEBOUNCE_TIME = 50; // 50ms
 800766e:	2332      	movs	r3, #50	@ 0x32
 8007670:	607b      	str	r3, [r7, #4]

	bool current_state = (HAL_GPIO_ReadPin(EMER_GPIO_Port, EMER_Pin)
 8007672:	2110      	movs	r1, #16
 8007674:	4813      	ldr	r0, [pc, #76]	@ (80076c4 <check_emergency_button+0x5c>)
 8007676:	f005 fefb 	bl	800d470 <HAL_GPIO_ReadPin>
 800767a:	4603      	mov	r3, r0
 800767c:	2b00      	cmp	r3, #0
 800767e:	bf0c      	ite	eq
 8007680:	2301      	moveq	r3, #1
 8007682:	2300      	movne	r3, #0
 8007684:	70fb      	strb	r3, [r7, #3]
			== GPIO_PIN_RESET);

	if (current_state) {
 8007686:	78fb      	ldrb	r3, [r7, #3]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d013      	beq.n	80076b4 <check_emergency_button+0x4c>
		emer_debounce_counter++;
 800768c:	4b0e      	ldr	r3, [pc, #56]	@ (80076c8 <check_emergency_button+0x60>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	3301      	adds	r3, #1
 8007692:	4a0d      	ldr	r2, [pc, #52]	@ (80076c8 <check_emergency_button+0x60>)
 8007694:	6013      	str	r3, [r2, #0]
		if (emer_debounce_counter >= EMER_DEBOUNCE_TIME) {
 8007696:	4b0c      	ldr	r3, [pc, #48]	@ (80076c8 <check_emergency_button+0x60>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	687a      	ldr	r2, [r7, #4]
 800769c:	429a      	cmp	r2, r3
 800769e:	d80c      	bhi.n	80076ba <check_emergency_button+0x52>
			if (safety_state != SAFETY_HARDWARE_EMERGENCY) {
 80076a0:	4b0a      	ldr	r3, [pc, #40]	@ (80076cc <check_emergency_button+0x64>)
 80076a2:	781b      	ldrb	r3, [r3, #0]
 80076a4:	2b02      	cmp	r3, #2
 80076a6:	d001      	beq.n	80076ac <check_emergency_button+0x44>
				trigger_hardware_emergency();
 80076a8:	f000 f880 	bl	80077ac <trigger_hardware_emergency>
			}
			emer_debounce_counter = EMER_DEBOUNCE_TIME; // Prevent overflow
 80076ac:	4a06      	ldr	r2, [pc, #24]	@ (80076c8 <check_emergency_button+0x60>)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6013      	str	r3, [r2, #0]
		}
	} else {
		emer_debounce_counter = 0;
	}
}
 80076b2:	e002      	b.n	80076ba <check_emergency_button+0x52>
		emer_debounce_counter = 0;
 80076b4:	4b04      	ldr	r3, [pc, #16]	@ (80076c8 <check_emergency_button+0x60>)
 80076b6:	2200      	movs	r2, #0
 80076b8:	601a      	str	r2, [r3, #0]
}
 80076ba:	bf00      	nop
 80076bc:	3708      	adds	r7, #8
 80076be:	46bd      	mov	sp, r7
 80076c0:	bd80      	pop	{r7, pc}
 80076c2:	bf00      	nop
 80076c4:	48000400 	.word	0x48000400
 80076c8:	200008d8 	.word	0x200008d8
 80076cc:	200007ed 	.word	0x200007ed

080076d0 <check_safety_conditions>:
//	 }
//	 }
//	 */
//}

void check_safety_conditions(void) {
 80076d0:	b580      	push	{r7, lr}
 80076d2:	af00      	add	r7, sp, #0
	if (tuning_mode || safety_state != SAFETY_NORMAL || homing_active)
 80076d4:	4b16      	ldr	r3, [pc, #88]	@ (8007730 <check_safety_conditions+0x60>)
 80076d6:	781b      	ldrb	r3, [r3, #0]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d127      	bne.n	800772c <check_safety_conditions+0x5c>
 80076dc:	4b15      	ldr	r3, [pc, #84]	@ (8007734 <check_safety_conditions+0x64>)
 80076de:	781b      	ldrb	r3, [r3, #0]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d123      	bne.n	800772c <check_safety_conditions+0x5c>
 80076e4:	4b14      	ldr	r3, [pc, #80]	@ (8007738 <check_safety_conditions+0x68>)
 80076e6:	781b      	ldrb	r3, [r3, #0]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d11f      	bne.n	800772c <check_safety_conditions+0x5c>
		return;

	if (up_photo && prismatic_axis.command_pos < 0.0f) {
 80076ec:	4b13      	ldr	r3, [pc, #76]	@ (800773c <check_safety_conditions+0x6c>)
 80076ee:	781b      	ldrb	r3, [r3, #0]
 80076f0:	b2db      	uxtb	r3, r3
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d00a      	beq.n	800770c <check_safety_conditions+0x3c>
 80076f6:	4b12      	ldr	r3, [pc, #72]	@ (8007740 <check_safety_conditions+0x70>)
 80076f8:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80076fc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007700:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007704:	d502      	bpl.n	800770c <check_safety_conditions+0x3c>
		trigger_software_emergency();
 8007706:	f000 f81f 	bl	8007748 <trigger_software_emergency>
		return;
 800770a:	e010      	b.n	800772e <check_safety_conditions+0x5e>
	}

	if (low_photo && prismatic_axis.command_pos > 0.0f) {
 800770c:	4b0d      	ldr	r3, [pc, #52]	@ (8007744 <check_safety_conditions+0x74>)
 800770e:	781b      	ldrb	r3, [r3, #0]
 8007710:	b2db      	uxtb	r3, r3
 8007712:	2b00      	cmp	r3, #0
 8007714:	d00b      	beq.n	800772e <check_safety_conditions+0x5e>
 8007716:	4b0a      	ldr	r3, [pc, #40]	@ (8007740 <check_safety_conditions+0x70>)
 8007718:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800771c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007724:	dd03      	ble.n	800772e <check_safety_conditions+0x5e>
		trigger_software_emergency();
 8007726:	f000 f80f 	bl	8007748 <trigger_software_emergency>
		return;
 800772a:	e000      	b.n	800772e <check_safety_conditions+0x5e>
		return;
 800772c:	bf00      	nop
	}
}
 800772e:	bd80      	pop	{r7, pc}
 8007730:	20000334 	.word	0x20000334
 8007734:	200007ed 	.word	0x200007ed
 8007738:	200007eb 	.word	0x200007eb
 800773c:	200007e8 	.word	0x200007e8
 8007740:	20000704 	.word	0x20000704
 8007744:	200007e9 	.word	0x200007e9

08007748 <trigger_software_emergency>:

void trigger_software_emergency(void) {
 8007748:	b580      	push	{r7, lr}
 800774a:	af00      	add	r7, sp, #0
	if (safety_state == SAFETY_NORMAL) {
 800774c:	4b10      	ldr	r3, [pc, #64]	@ (8007790 <trigger_software_emergency+0x48>)
 800774e:	781b      	ldrb	r3, [r3, #0]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d11b      	bne.n	800778c <trigger_software_emergency+0x44>
		safety_state = SAFETY_SOFTWARE_EMERGENCY;
 8007754:	4b0e      	ldr	r3, [pc, #56]	@ (8007790 <trigger_software_emergency+0x48>)
 8007756:	2201      	movs	r2, #1
 8007758:	701a      	strb	r2, [r3, #0]
		emergency_stop_all_motors();
 800775a:	f000 f901 	bl	8007960 <emergency_stop_all_motors>
		safety_toggle_timer = 0;
 800775e:	4b0d      	ldr	r3, [pc, #52]	@ (8007794 <trigger_software_emergency+0x4c>)
 8007760:	2200      	movs	r2, #0
 8007762:	601a      	str	r2, [r3, #0]
		pilot_light_state = false;
 8007764:	4b0c      	ldr	r3, [pc, #48]	@ (8007798 <trigger_software_emergency+0x50>)
 8007766:	2200      	movs	r2, #0
 8007768:	701a      	strb	r2, [r3, #0]
		motion_sequence_state = MOTION_IDLE;
 800776a:	4b0c      	ldr	r3, [pc, #48]	@ (800779c <trigger_software_emergency+0x54>)
 800776c:	2200      	movs	r2, #0
 800776e:	701a      	strb	r2, [r3, #0]
		prismatic_axis.trajectory_active = false;
 8007770:	4b0b      	ldr	r3, [pc, #44]	@ (80077a0 <trigger_software_emergency+0x58>)
 8007772:	2200      	movs	r2, #0
 8007774:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
		revolute_axis.trajectory_active = false;
 8007778:	4b0a      	ldr	r3, [pc, #40]	@ (80077a4 <trigger_software_emergency+0x5c>)
 800777a:	2200      	movs	r2, #0
 800777c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

		// Exit joy mode if active
		if (joy_mode_active) {
 8007780:	4b09      	ldr	r3, [pc, #36]	@ (80077a8 <trigger_software_emergency+0x60>)
 8007782:	781b      	ldrb	r3, [r3, #0]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d001      	beq.n	800778c <trigger_software_emergency+0x44>
			exit_joy_mode();
 8007788:	f000 fa0a 	bl	8007ba0 <exit_joy_mode>
		}
	}
}
 800778c:	bf00      	nop
 800778e:	bd80      	pop	{r7, pc}
 8007790:	200007ed 	.word	0x200007ed
 8007794:	200007f0 	.word	0x200007f0
 8007798:	200007f4 	.word	0x200007f4
 800779c:	2000078c 	.word	0x2000078c
 80077a0:	20000704 	.word	0x20000704
 80077a4:	20000748 	.word	0x20000748
 80077a8:	20000809 	.word	0x20000809

080077ac <trigger_hardware_emergency>:
//	// Exit joy mode if active
//	if (joy_mode_active) {
//		exit_joy_mode();
//	}
//}
void trigger_hardware_emergency(void) {
 80077ac:	b580      	push	{r7, lr}
 80077ae:	af00      	add	r7, sp, #0
	safety_state = SAFETY_HARDWARE_EMERGENCY;
 80077b0:	4b16      	ldr	r3, [pc, #88]	@ (800780c <trigger_hardware_emergency+0x60>)
 80077b2:	2202      	movs	r2, #2
 80077b4:	701a      	strb	r2, [r3, #0]
	hardware_emergency_triggered = true;
 80077b6:	4b16      	ldr	r3, [pc, #88]	@ (8007810 <trigger_hardware_emergency+0x64>)
 80077b8:	2201      	movs	r2, #1
 80077ba:	701a      	strb	r2, [r3, #0]
	emergency_stop_all_motors();
 80077bc:	f000 f8d0 	bl	8007960 <emergency_stop_all_motors>
	safety_toggle_timer = 0;
 80077c0:	4b14      	ldr	r3, [pc, #80]	@ (8007814 <trigger_hardware_emergency+0x68>)
 80077c2:	2200      	movs	r2, #0
 80077c4:	601a      	str	r2, [r3, #0]
	pilot_light_state = false;
 80077c6:	4b14      	ldr	r3, [pc, #80]	@ (8007818 <trigger_hardware_emergency+0x6c>)
 80077c8:	2200      	movs	r2, #0
 80077ca:	701a      	strb	r2, [r3, #0]

	// Ensure motion is completely stopped
	ensure_motion_idle();
 80077cc:	f001 fe04 	bl	80093d8 <ensure_motion_idle>

	// Reset trajectory structures
	memset(&prisEva, 0, sizeof(prisEva));
 80077d0:	2214      	movs	r2, #20
 80077d2:	2100      	movs	r1, #0
 80077d4:	4811      	ldr	r0, [pc, #68]	@ (800781c <trigger_hardware_emergency+0x70>)
 80077d6:	f00b fc81 	bl	80130dc <memset>
	memset(&revEva, 0, sizeof(revEva));
 80077da:	2214      	movs	r2, #20
 80077dc:	2100      	movs	r1, #0
 80077de:	4810      	ldr	r0, [pc, #64]	@ (8007820 <trigger_hardware_emergency+0x74>)
 80077e0:	f00b fc7c 	bl	80130dc <memset>
	prisEva.isFinised = true;
 80077e4:	4b0d      	ldr	r3, [pc, #52]	@ (800781c <trigger_hardware_emergency+0x70>)
 80077e6:	2201      	movs	r2, #1
 80077e8:	741a      	strb	r2, [r3, #16]
	revEva.isFinised = true;
 80077ea:	4b0d      	ldr	r3, [pc, #52]	@ (8007820 <trigger_hardware_emergency+0x74>)
 80077ec:	2201      	movs	r2, #1
 80077ee:	741a      	strb	r2, [r3, #16]

	homing_active = false;
 80077f0:	4b0c      	ldr	r3, [pc, #48]	@ (8007824 <trigger_hardware_emergency+0x78>)
 80077f2:	2200      	movs	r2, #0
 80077f4:	701a      	strb	r2, [r3, #0]
	homing_state = HOMING_IDLE;
 80077f6:	4b0c      	ldr	r3, [pc, #48]	@ (8007828 <trigger_hardware_emergency+0x7c>)
 80077f8:	2200      	movs	r2, #0
 80077fa:	701a      	strb	r2, [r3, #0]

	// Exit joy mode if active
	if (joy_mode_active) {
 80077fc:	4b0b      	ldr	r3, [pc, #44]	@ (800782c <trigger_hardware_emergency+0x80>)
 80077fe:	781b      	ldrb	r3, [r3, #0]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d001      	beq.n	8007808 <trigger_hardware_emergency+0x5c>
		exit_joy_mode();
 8007804:	f000 f9cc 	bl	8007ba0 <exit_joy_mode>
	}
}
 8007808:	bf00      	nop
 800780a:	bd80      	pop	{r7, pc}
 800780c:	200007ed 	.word	0x200007ed
 8007810:	200007f5 	.word	0x200007f5
 8007814:	200007f0 	.word	0x200007f0
 8007818:	200007f4 	.word	0x200007f4
 800781c:	200007b8 	.word	0x200007b8
 8007820:	200007cc 	.word	0x200007cc
 8007824:	200007eb 	.word	0x200007eb
 8007828:	200007ea 	.word	0x200007ea
 800782c:	20000809 	.word	0x20000809

08007830 <clear_emergency_state>:
//    // Keep DFD for revolute axis (gravity compensation)
//    revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
//            revolute_encoder.rads, prismatic_encoder.mm / 1000.0f);
//}

void clear_emergency_state(void) {
 8007830:	b580      	push	{r7, lr}
 8007832:	af00      	add	r7, sp, #0
	// First ensure everything is stopped
	ensure_motion_idle();
 8007834:	f001 fdd0 	bl	80093d8 <ensure_motion_idle>
	emergency_stop_all_motors();
 8007838:	f000 f892 	bl	8007960 <emergency_stop_all_motors>

	// Reset trajectory structures completely
	memset(&prisEva, 0, sizeof(prisEva));
 800783c:	2214      	movs	r2, #20
 800783e:	2100      	movs	r1, #0
 8007840:	4839      	ldr	r0, [pc, #228]	@ (8007928 <clear_emergency_state+0xf8>)
 8007842:	f00b fc4b 	bl	80130dc <memset>
	memset(&revEva, 0, sizeof(revEva));
 8007846:	2214      	movs	r2, #20
 8007848:	2100      	movs	r1, #0
 800784a:	4838      	ldr	r0, [pc, #224]	@ (800792c <clear_emergency_state+0xfc>)
 800784c:	f00b fc46 	bl	80130dc <memset>
	prisEva.isFinised = true;
 8007850:	4b35      	ldr	r3, [pc, #212]	@ (8007928 <clear_emergency_state+0xf8>)
 8007852:	2201      	movs	r2, #1
 8007854:	741a      	strb	r2, [r3, #16]
	revEva.isFinised = true;
 8007856:	4b35      	ldr	r3, [pc, #212]	@ (800792c <clear_emergency_state+0xfc>)
 8007858:	2201      	movs	r2, #1
 800785a:	741a      	strb	r2, [r3, #16]

	// Set positions for holding
	prismatic_axis.position = prismatic_encoder.mm;
 800785c:	4b34      	ldr	r3, [pc, #208]	@ (8007930 <clear_emergency_state+0x100>)
 800785e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007860:	4a34      	ldr	r2, [pc, #208]	@ (8007934 <clear_emergency_state+0x104>)
 8007862:	6013      	str	r3, [r2, #0]
	revolute_axis.position = revolute_encoder.rads;
 8007864:	4b34      	ldr	r3, [pc, #208]	@ (8007938 <clear_emergency_state+0x108>)
 8007866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007868:	4a34      	ldr	r2, [pc, #208]	@ (800793c <clear_emergency_state+0x10c>)
 800786a:	6013      	str	r3, [r2, #0]
	prismatic_axis.target_pos = prismatic_axis.position;
 800786c:	4b31      	ldr	r3, [pc, #196]	@ (8007934 <clear_emergency_state+0x104>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4a30      	ldr	r2, [pc, #192]	@ (8007934 <clear_emergency_state+0x104>)
 8007872:	6113      	str	r3, [r2, #16]
	revolute_axis.target_pos = revolute_axis.position;
 8007874:	4b31      	ldr	r3, [pc, #196]	@ (800793c <clear_emergency_state+0x10c>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	4a30      	ldr	r2, [pc, #192]	@ (800793c <clear_emergency_state+0x10c>)
 800787a:	6113      	str	r3, [r2, #16]

	// Clear all velocities and commands
	prismatic_axis.command_vel = 0.0f;
 800787c:	4b2d      	ldr	r3, [pc, #180]	@ (8007934 <clear_emergency_state+0x104>)
 800787e:	f04f 0200 	mov.w	r2, #0
 8007882:	629a      	str	r2, [r3, #40]	@ 0x28
	revolute_axis.command_vel = 0.0f;
 8007884:	4b2d      	ldr	r3, [pc, #180]	@ (800793c <clear_emergency_state+0x10c>)
 8007886:	f04f 0200 	mov.w	r2, #0
 800788a:	629a      	str	r2, [r3, #40]	@ 0x28
	prismatic_axis.velocity = 0.0f;
 800788c:	4b29      	ldr	r3, [pc, #164]	@ (8007934 <clear_emergency_state+0x104>)
 800788e:	f04f 0200 	mov.w	r2, #0
 8007892:	605a      	str	r2, [r3, #4]
	revolute_axis.velocity = 0.0f;
 8007894:	4b29      	ldr	r3, [pc, #164]	@ (800793c <clear_emergency_state+0x10c>)
 8007896:	f04f 0200 	mov.w	r2, #0
 800789a:	605a      	str	r2, [r3, #4]
	prismatic_axis.command_pos = 0.0f;
 800789c:	4b25      	ldr	r3, [pc, #148]	@ (8007934 <clear_emergency_state+0x104>)
 800789e:	f04f 0200 	mov.w	r2, #0
 80078a2:	625a      	str	r2, [r3, #36]	@ 0x24
	revolute_axis.command_pos = 0.0f;
 80078a4:	4b25      	ldr	r3, [pc, #148]	@ (800793c <clear_emergency_state+0x10c>)
 80078a6:	f04f 0200 	mov.w	r2, #0
 80078aa:	625a      	str	r2, [r3, #36]	@ 0x24

	// Clear feedforward
	prismatic_axis.ffd = 0.0f;
 80078ac:	4b21      	ldr	r3, [pc, #132]	@ (8007934 <clear_emergency_state+0x104>)
 80078ae:	f04f 0200 	mov.w	r2, #0
 80078b2:	631a      	str	r2, [r3, #48]	@ 0x30
	prismatic_axis.dfd = 0.0f;
 80078b4:	4b1f      	ldr	r3, [pc, #124]	@ (8007934 <clear_emergency_state+0x104>)
 80078b6:	f04f 0200 	mov.w	r2, #0
 80078ba:	62da      	str	r2, [r3, #44]	@ 0x2c
	revolute_axis.ffd = 0.0f;
 80078bc:	4b1f      	ldr	r3, [pc, #124]	@ (800793c <clear_emergency_state+0x10c>)
 80078be:	f04f 0200 	mov.w	r2, #0
 80078c2:	631a      	str	r2, [r3, #48]	@ 0x30
	revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 80078c4:	4b1c      	ldr	r3, [pc, #112]	@ (8007938 <clear_emergency_state+0x108>)
 80078c6:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
			revolute_encoder.rads, prismatic_encoder.mm / 1000.0f);
 80078ca:	4b19      	ldr	r3, [pc, #100]	@ (8007930 <clear_emergency_state+0x100>)
 80078cc:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
	revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 80078d0:	ed9f 6a1b 	vldr	s12, [pc, #108]	@ 8007940 <clear_emergency_state+0x110>
 80078d4:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80078d8:	eef0 0a66 	vmov.f32	s1, s13
 80078dc:	eeb0 0a47 	vmov.f32	s0, s14
 80078e0:	4818      	ldr	r0, [pc, #96]	@ (8007944 <clear_emergency_state+0x114>)
 80078e2:	f7f9 feca 	bl	800167a <REVOLUTE_MOTOR_DFD_Compute>
 80078e6:	eef0 7a40 	vmov.f32	s15, s0
 80078ea:	4b14      	ldr	r3, [pc, #80]	@ (800793c <clear_emergency_state+0x10c>)
 80078ec:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

	// Clear emergency state
	safety_state = SAFETY_NORMAL;
 80078f0:	4b15      	ldr	r3, [pc, #84]	@ (8007948 <clear_emergency_state+0x118>)
 80078f2:	2200      	movs	r2, #0
 80078f4:	701a      	strb	r2, [r3, #0]
	hardware_emergency_triggered = false;
 80078f6:	4b15      	ldr	r3, [pc, #84]	@ (800794c <clear_emergency_state+0x11c>)
 80078f8:	2200      	movs	r2, #0
 80078fa:	701a      	strb	r2, [r3, #0]
	safety_toggle_timer = 0;
 80078fc:	4b14      	ldr	r3, [pc, #80]	@ (8007950 <clear_emergency_state+0x120>)
 80078fe:	2200      	movs	r2, #0
 8007900:	601a      	str	r2, [r3, #0]
	pilot_light_state = false;
 8007902:	4b14      	ldr	r3, [pc, #80]	@ (8007954 <clear_emergency_state+0x124>)
 8007904:	2200      	movs	r2, #0
 8007906:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(PILOT_GPIO_Port, PILOT_Pin, GPIO_PIN_RESET);
 8007908:	2200      	movs	r2, #0
 800790a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800790e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007912:	f005 fdc5 	bl	800d4a0 <HAL_GPIO_WritePin>
	up_photo = false;
 8007916:	4b10      	ldr	r3, [pc, #64]	@ (8007958 <clear_emergency_state+0x128>)
 8007918:	2200      	movs	r2, #0
 800791a:	701a      	strb	r2, [r3, #0]
	low_photo = false;
 800791c:	4b0f      	ldr	r3, [pc, #60]	@ (800795c <clear_emergency_state+0x12c>)
 800791e:	2200      	movs	r2, #0
 8007920:	701a      	strb	r2, [r3, #0]
}
 8007922:	bf00      	nop
 8007924:	bd80      	pop	{r7, pc}
 8007926:	bf00      	nop
 8007928:	200007b8 	.word	0x200007b8
 800792c:	200007cc 	.word	0x200007cc
 8007930:	20000988 	.word	0x20000988
 8007934:	20000704 	.word	0x20000704
 8007938:	200009e4 	.word	0x200009e4
 800793c:	20000748 	.word	0x20000748
 8007940:	447a0000 	.word	0x447a0000
 8007944:	20000b18 	.word	0x20000b18
 8007948:	200007ed 	.word	0x200007ed
 800794c:	200007f5 	.word	0x200007f5
 8007950:	200007f0 	.word	0x200007f0
 8007954:	200007f4 	.word	0x200007f4
 8007958:	200007e8 	.word	0x200007e8
 800795c:	200007e9 	.word	0x200007e9

08007960 <emergency_stop_all_motors>:

void emergency_stop_all_motors(void) {
 8007960:	b580      	push	{r7, lr}
 8007962:	af00      	add	r7, sp, #0
	MDXX_set_range(&prismatic_motor, 2000, 0);
 8007964:	eddf 0a0f 	vldr	s1, [pc, #60]	@ 80079a4 <emergency_stop_all_motors+0x44>
 8007968:	ed9f 0a0f 	vldr	s0, [pc, #60]	@ 80079a8 <emergency_stop_all_motors+0x48>
 800796c:	480f      	ldr	r0, [pc, #60]	@ (80079ac <emergency_stop_all_motors+0x4c>)
 800796e:	f7f9 fd09 	bl	8001384 <MDXX_set_range>
	MDXX_set_range(&revolute_motor, 2000, 0);
 8007972:	eddf 0a0c 	vldr	s1, [pc, #48]	@ 80079a4 <emergency_stop_all_motors+0x44>
 8007976:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 80079a8 <emergency_stop_all_motors+0x48>
 800797a:	480d      	ldr	r0, [pc, #52]	@ (80079b0 <emergency_stop_all_motors+0x50>)
 800797c:	f7f9 fd02 	bl	8001384 <MDXX_set_range>

	prismatic_axis.command_pos = 0.0f;
 8007980:	4b0c      	ldr	r3, [pc, #48]	@ (80079b4 <emergency_stop_all_motors+0x54>)
 8007982:	f04f 0200 	mov.w	r2, #0
 8007986:	625a      	str	r2, [r3, #36]	@ 0x24
	revolute_axis.command_pos = 0.0f;
 8007988:	4b0b      	ldr	r3, [pc, #44]	@ (80079b8 <emergency_stop_all_motors+0x58>)
 800798a:	f04f 0200 	mov.w	r2, #0
 800798e:	625a      	str	r2, [r3, #36]	@ 0x24
	prismatic_axis.command_vel = 0.0f;
 8007990:	4b08      	ldr	r3, [pc, #32]	@ (80079b4 <emergency_stop_all_motors+0x54>)
 8007992:	f04f 0200 	mov.w	r2, #0
 8007996:	629a      	str	r2, [r3, #40]	@ 0x28
	revolute_axis.command_vel = 0.0f;
 8007998:	4b07      	ldr	r3, [pc, #28]	@ (80079b8 <emergency_stop_all_motors+0x58>)
 800799a:	f04f 0200 	mov.w	r2, #0
 800799e:	629a      	str	r2, [r3, #40]	@ 0x28
//	PID_CONTROLLER_Reset(&prismatic_velocity_pid);
//	PID_CONTROLLER_Reset(&revolute_position_pid);
//	PID_CONTROLLER_Reset(&revolute_velocity_pid);
//	PID_CONTROLLER_Reset(&revolute_velocity_pid);

}
 80079a0:	bf00      	nop
 80079a2:	bd80      	pop	{r7, pc}
 80079a4:	00000000 	.word	0x00000000
 80079a8:	44fa0000 	.word	0x44fa0000
 80079ac:	200008f0 	.word	0x200008f0
 80079b0:	2000093c 	.word	0x2000093c
 80079b4:	20000704 	.word	0x20000704
 80079b8:	20000748 	.word	0x20000748

080079bc <update_safety_system>:

void update_safety_system(void) {
 80079bc:	b580      	push	{r7, lr}
 80079be:	af00      	add	r7, sp, #0
	// Don't control pilot light if joy mode is active
	if (joy_mode_active) {
 80079c0:	4b3a      	ldr	r3, [pc, #232]	@ (8007aac <update_safety_system+0xf0>)
 80079c2:	781b      	ldrb	r3, [r3, #0]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d16e      	bne.n	8007aa6 <update_safety_system+0xea>
		return; // Let joy mode handle pilot light
	}

	if (safety_state == SAFETY_SOFTWARE_EMERGENCY) {
 80079c8:	4b39      	ldr	r3, [pc, #228]	@ (8007ab0 <update_safety_system+0xf4>)
 80079ca:	781b      	ldrb	r3, [r3, #0]
 80079cc:	2b01      	cmp	r3, #1
 80079ce:	d11f      	bne.n	8007a10 <update_safety_system+0x54>
		if (++safety_toggle_timer >= SAFETY_TOGGLE_PERIOD) {
 80079d0:	4b38      	ldr	r3, [pc, #224]	@ (8007ab4 <update_safety_system+0xf8>)
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	3301      	adds	r3, #1
 80079d6:	4a37      	ldr	r2, [pc, #220]	@ (8007ab4 <update_safety_system+0xf8>)
 80079d8:	6013      	str	r3, [r2, #0]
 80079da:	2bf9      	cmp	r3, #249	@ 0xf9
 80079dc:	d918      	bls.n	8007a10 <update_safety_system+0x54>
			HAL_GPIO_TogglePin(PILOT_GPIO_Port, PILOT_Pin);
 80079de:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80079e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80079e6:	f005 fd73 	bl	800d4d0 <HAL_GPIO_TogglePin>
			pilot_light_state = !pilot_light_state;
 80079ea:	4b33      	ldr	r3, [pc, #204]	@ (8007ab8 <update_safety_system+0xfc>)
 80079ec:	781b      	ldrb	r3, [r3, #0]
 80079ee:	b2db      	uxtb	r3, r3
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	bf14      	ite	ne
 80079f4:	2301      	movne	r3, #1
 80079f6:	2300      	moveq	r3, #0
 80079f8:	b2db      	uxtb	r3, r3
 80079fa:	f083 0301 	eor.w	r3, r3, #1
 80079fe:	b2db      	uxtb	r3, r3
 8007a00:	f003 0301 	and.w	r3, r3, #1
 8007a04:	b2da      	uxtb	r2, r3
 8007a06:	4b2c      	ldr	r3, [pc, #176]	@ (8007ab8 <update_safety_system+0xfc>)
 8007a08:	701a      	strb	r2, [r3, #0]
			safety_toggle_timer = 0;
 8007a0a:	4b2a      	ldr	r3, [pc, #168]	@ (8007ab4 <update_safety_system+0xf8>)
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	601a      	str	r2, [r3, #0]
		}
	}

	if (safety_state == SAFETY_HARDWARE_EMERGENCY) {
 8007a10:	4b27      	ldr	r3, [pc, #156]	@ (8007ab0 <update_safety_system+0xf4>)
 8007a12:	781b      	ldrb	r3, [r3, #0]
 8007a14:	2b02      	cmp	r3, #2
 8007a16:	d134      	bne.n	8007a82 <update_safety_system+0xc6>
		if (HAL_GPIO_ReadPin(EMER_GPIO_Port, EMER_Pin) == GPIO_PIN_SET) {
 8007a18:	2110      	movs	r1, #16
 8007a1a:	4828      	ldr	r0, [pc, #160]	@ (8007abc <update_safety_system+0x100>)
 8007a1c:	f005 fd28 	bl	800d470 <HAL_GPIO_ReadPin>
 8007a20:	4603      	mov	r3, r0
 8007a22:	2b01      	cmp	r3, #1
 8007a24:	d120      	bne.n	8007a68 <update_safety_system+0xac>
			if (++safety_toggle_timer >= SAFETY_TOGGLE_PERIOD) {
 8007a26:	4b23      	ldr	r3, [pc, #140]	@ (8007ab4 <update_safety_system+0xf8>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	3301      	adds	r3, #1
 8007a2c:	4a21      	ldr	r2, [pc, #132]	@ (8007ab4 <update_safety_system+0xf8>)
 8007a2e:	6013      	str	r3, [r2, #0]
 8007a30:	2bf9      	cmp	r3, #249	@ 0xf9
 8007a32:	d926      	bls.n	8007a82 <update_safety_system+0xc6>
				HAL_GPIO_TogglePin(PILOT_GPIO_Port, PILOT_Pin);
 8007a34:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007a38:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007a3c:	f005 fd48 	bl	800d4d0 <HAL_GPIO_TogglePin>
				pilot_light_state = !pilot_light_state;
 8007a40:	4b1d      	ldr	r3, [pc, #116]	@ (8007ab8 <update_safety_system+0xfc>)
 8007a42:	781b      	ldrb	r3, [r3, #0]
 8007a44:	b2db      	uxtb	r3, r3
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	bf14      	ite	ne
 8007a4a:	2301      	movne	r3, #1
 8007a4c:	2300      	moveq	r3, #0
 8007a4e:	b2db      	uxtb	r3, r3
 8007a50:	f083 0301 	eor.w	r3, r3, #1
 8007a54:	b2db      	uxtb	r3, r3
 8007a56:	f003 0301 	and.w	r3, r3, #1
 8007a5a:	b2da      	uxtb	r2, r3
 8007a5c:	4b16      	ldr	r3, [pc, #88]	@ (8007ab8 <update_safety_system+0xfc>)
 8007a5e:	701a      	strb	r2, [r3, #0]
				safety_toggle_timer = 0;
 8007a60:	4b14      	ldr	r3, [pc, #80]	@ (8007ab4 <update_safety_system+0xf8>)
 8007a62:	2200      	movs	r2, #0
 8007a64:	601a      	str	r2, [r3, #0]
 8007a66:	e00c      	b.n	8007a82 <update_safety_system+0xc6>
			}
		} else {
			HAL_GPIO_WritePin(PILOT_GPIO_Port, PILOT_Pin, GPIO_PIN_RESET);
 8007a68:	2200      	movs	r2, #0
 8007a6a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007a6e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007a72:	f005 fd15 	bl	800d4a0 <HAL_GPIO_WritePin>
			pilot_light_state = false;
 8007a76:	4b10      	ldr	r3, [pc, #64]	@ (8007ab8 <update_safety_system+0xfc>)
 8007a78:	2200      	movs	r2, #0
 8007a7a:	701a      	strb	r2, [r3, #0]
			safety_toggle_timer = 0;
 8007a7c:	4b0d      	ldr	r3, [pc, #52]	@ (8007ab4 <update_safety_system+0xf8>)
 8007a7e:	2200      	movs	r2, #0
 8007a80:	601a      	str	r2, [r3, #0]
		}
	}

	if (safety_state == SAFETY_NORMAL) {
 8007a82:	4b0b      	ldr	r3, [pc, #44]	@ (8007ab0 <update_safety_system+0xf4>)
 8007a84:	781b      	ldrb	r3, [r3, #0]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d10e      	bne.n	8007aa8 <update_safety_system+0xec>
		HAL_GPIO_WritePin(PILOT_GPIO_Port, PILOT_Pin, GPIO_PIN_RESET);
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007a90:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007a94:	f005 fd04 	bl	800d4a0 <HAL_GPIO_WritePin>
		pilot_light_state = false;
 8007a98:	4b07      	ldr	r3, [pc, #28]	@ (8007ab8 <update_safety_system+0xfc>)
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	701a      	strb	r2, [r3, #0]
		safety_toggle_timer = 0;
 8007a9e:	4b05      	ldr	r3, [pc, #20]	@ (8007ab4 <update_safety_system+0xf8>)
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	601a      	str	r2, [r3, #0]
 8007aa4:	e000      	b.n	8007aa8 <update_safety_system+0xec>
		return; // Let joy mode handle pilot light
 8007aa6:	bf00      	nop
	}
}
 8007aa8:	bd80      	pop	{r7, pc}
 8007aaa:	bf00      	nop
 8007aac:	20000809 	.word	0x20000809
 8007ab0:	200007ed 	.word	0x200007ed
 8007ab4:	200007f0 	.word	0x200007f0
 8007ab8:	200007f4 	.word	0x200007f4
 8007abc:	48000400 	.word	0x48000400

08007ac0 <is_emergency_active>:

bool is_emergency_active(void) {
 8007ac0:	b480      	push	{r7}
 8007ac2:	af00      	add	r7, sp, #0
	return (safety_state != SAFETY_NORMAL);
 8007ac4:	4b05      	ldr	r3, [pc, #20]	@ (8007adc <is_emergency_active+0x1c>)
 8007ac6:	781b      	ldrb	r3, [r3, #0]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	bf14      	ite	ne
 8007acc:	2301      	movne	r3, #1
 8007ace:	2300      	moveq	r3, #0
 8007ad0:	b2db      	uxtb	r3, r3
}
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ada:	4770      	bx	lr
 8007adc:	200007ed 	.word	0x200007ed

08007ae0 <enter_joy_mode>:

void enter_joy_mode(void) {
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	af00      	add	r7, sp, #0
	if (is_emergency_active() || homing_active || joy_mode_active) {
 8007ae4:	f7ff ffec 	bl	8007ac0 <is_emergency_active>
 8007ae8:	4603      	mov	r3, r0
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d142      	bne.n	8007b74 <enter_joy_mode+0x94>
 8007aee:	4b22      	ldr	r3, [pc, #136]	@ (8007b78 <enter_joy_mode+0x98>)
 8007af0:	781b      	ldrb	r3, [r3, #0]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d13e      	bne.n	8007b74 <enter_joy_mode+0x94>
 8007af6:	4b21      	ldr	r3, [pc, #132]	@ (8007b7c <enter_joy_mode+0x9c>)
 8007af8:	781b      	ldrb	r3, [r3, #0]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d13a      	bne.n	8007b74 <enter_joy_mode+0x94>
		return;
	}

	ensure_motion_idle();
 8007afe:	f001 fc6b 	bl	80093d8 <ensure_motion_idle>

	joy_mode_active = true;
 8007b02:	4b1e      	ldr	r3, [pc, #120]	@ (8007b7c <enter_joy_mode+0x9c>)
 8007b04:	2201      	movs	r2, #1
 8007b06:	701a      	strb	r2, [r3, #0]
	joy_mode_state = JOY_MODE_INITIAL_CONTROL; // Start in initial control state
 8007b08:	4b1d      	ldr	r3, [pc, #116]	@ (8007b80 <enter_joy_mode+0xa0>)
 8007b0a:	2201      	movs	r2, #1
 8007b0c:	701a      	strb	r2, [r3, #0]

	// Reset all joy mode data
	reset_joy_mode_data();
 8007b0e:	f000 f9b9 	bl	8007e84 <reset_joy_mode_data>

	// Turn on pilot light to indicate joy mode
	HAL_GPIO_WritePin(PILOT_GPIO_Port, PILOT_Pin, GPIO_PIN_SET);
 8007b12:	2201      	movs	r2, #1
 8007b14:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007b18:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007b1c:	f005 fcc0 	bl	800d4a0 <HAL_GPIO_WritePin>
	joy_mode_pilot_state = true;
 8007b20:	4b18      	ldr	r3, [pc, #96]	@ (8007b84 <enter_joy_mode+0xa4>)
 8007b22:	2201      	movs	r2, #1
 8007b24:	701a      	strb	r2, [r3, #0]
	joy_mode_pilot_timer = 0;
 8007b26:	4b18      	ldr	r3, [pc, #96]	@ (8007b88 <enter_joy_mode+0xa8>)
 8007b28:	2200      	movs	r2, #0
 8007b2a:	601a      	str	r2, [r3, #0]

	// Stop any current motion
	motion_sequence_state = MOTION_IDLE;
 8007b2c:	4b17      	ldr	r3, [pc, #92]	@ (8007b8c <enter_joy_mode+0xac>)
 8007b2e:	2200      	movs	r2, #0
 8007b30:	701a      	strb	r2, [r3, #0]
	prismatic_axis.trajectory_active = false;
 8007b32:	4b17      	ldr	r3, [pc, #92]	@ (8007b90 <enter_joy_mode+0xb0>)
 8007b34:	2200      	movs	r2, #0
 8007b36:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	revolute_axis.trajectory_active = false;
 8007b3a:	4b16      	ldr	r3, [pc, #88]	@ (8007b94 <enter_joy_mode+0xb4>)
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

	// Initialize position holding at current positions
	prismatic_axis.position = prismatic_encoder.mm;
 8007b42:	4b15      	ldr	r3, [pc, #84]	@ (8007b98 <enter_joy_mode+0xb8>)
 8007b44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b46:	4a12      	ldr	r2, [pc, #72]	@ (8007b90 <enter_joy_mode+0xb0>)
 8007b48:	6013      	str	r3, [r2, #0]
	revolute_axis.position = revolute_encoder.rads;
 8007b4a:	4b14      	ldr	r3, [pc, #80]	@ (8007b9c <enter_joy_mode+0xbc>)
 8007b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b4e:	4a11      	ldr	r2, [pc, #68]	@ (8007b94 <enter_joy_mode+0xb4>)
 8007b50:	6013      	str	r3, [r2, #0]

	// Reset motor commands
	prismatic_axis.command_pos = 0.0f;
 8007b52:	4b0f      	ldr	r3, [pc, #60]	@ (8007b90 <enter_joy_mode+0xb0>)
 8007b54:	f04f 0200 	mov.w	r2, #0
 8007b58:	625a      	str	r2, [r3, #36]	@ 0x24
	revolute_axis.command_pos = 0.0f;
 8007b5a:	4b0e      	ldr	r3, [pc, #56]	@ (8007b94 <enter_joy_mode+0xb4>)
 8007b5c:	f04f 0200 	mov.w	r2, #0
 8007b60:	625a      	str	r2, [r3, #36]	@ 0x24
	prismatic_axis.command_vel = 0.0f;
 8007b62:	4b0b      	ldr	r3, [pc, #44]	@ (8007b90 <enter_joy_mode+0xb0>)
 8007b64:	f04f 0200 	mov.w	r2, #0
 8007b68:	629a      	str	r2, [r3, #40]	@ 0x28
	revolute_axis.command_vel = 0.0f;
 8007b6a:	4b0a      	ldr	r3, [pc, #40]	@ (8007b94 <enter_joy_mode+0xb4>)
 8007b6c:	f04f 0200 	mov.w	r2, #0
 8007b70:	629a      	str	r2, [r3, #40]	@ 0x28
 8007b72:	e000      	b.n	8007b76 <enter_joy_mode+0x96>
		return;
 8007b74:	bf00      	nop
	// Reset PID controllers
//	PID_CONTROLLER_Reset(&prismatic_position_pid);
//	PID_CONTROLLER_Reset(&prismatic_velocity_pid);
//	PID_CONTROLLER_Reset(&revolute_position_pid);
//	PID_CONTROLLER_Reset(&revolute_velocity_pid);
}
 8007b76:	bd80      	pop	{r7, pc}
 8007b78:	200007eb 	.word	0x200007eb
 8007b7c:	20000809 	.word	0x20000809
 8007b80:	20000808 	.word	0x20000808
 8007b84:	20000864 	.word	0x20000864
 8007b88:	20000860 	.word	0x20000860
 8007b8c:	2000078c 	.word	0x2000078c
 8007b90:	20000704 	.word	0x20000704
 8007b94:	20000748 	.word	0x20000748
 8007b98:	20000988 	.word	0x20000988
 8007b9c:	200009e4 	.word	0x200009e4

08007ba0 <exit_joy_mode>:

/* Updated exit joy mode to handle cleanup properly */
void exit_joy_mode(void) {
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	af00      	add	r7, sp, #0
	joy_mode_active = false;
 8007ba4:	4b2c      	ldr	r3, [pc, #176]	@ (8007c58 <exit_joy_mode+0xb8>)
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	701a      	strb	r2, [r3, #0]
	joy_mode_state = JOY_MODE_IDLE;
 8007baa:	4b2c      	ldr	r3, [pc, #176]	@ (8007c5c <exit_joy_mode+0xbc>)
 8007bac:	2200      	movs	r2, #0
 8007bae:	701a      	strb	r2, [r3, #0]

	// Reset all data
	reset_joy_mode_data();
 8007bb0:	f000 f968 	bl	8007e84 <reset_joy_mode_data>

	// Turn off pilot light
	HAL_GPIO_WritePin(PILOT_GPIO_Port, PILOT_Pin, GPIO_PIN_RESET);
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007bba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007bbe:	f005 fc6f 	bl	800d4a0 <HAL_GPIO_WritePin>
	joy_mode_pilot_state = false;
 8007bc2:	4b27      	ldr	r3, [pc, #156]	@ (8007c60 <exit_joy_mode+0xc0>)
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	701a      	strb	r2, [r3, #0]
	joy_mode_pilot_timer = 0;
 8007bc8:	4b26      	ldr	r3, [pc, #152]	@ (8007c64 <exit_joy_mode+0xc4>)
 8007bca:	2200      	movs	r2, #0
 8007bcc:	601a      	str	r2, [r3, #0]

	// DON'T stop motors - hold current position
	// Set current positions as target positions for holding
	prismatic_axis.position = prismatic_encoder.mm;
 8007bce:	4b26      	ldr	r3, [pc, #152]	@ (8007c68 <exit_joy_mode+0xc8>)
 8007bd0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007bd2:	4a26      	ldr	r2, [pc, #152]	@ (8007c6c <exit_joy_mode+0xcc>)
 8007bd4:	6013      	str	r3, [r2, #0]
	revolute_axis.position = revolute_encoder.rads;
 8007bd6:	4b26      	ldr	r3, [pc, #152]	@ (8007c70 <exit_joy_mode+0xd0>)
 8007bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bda:	4a26      	ldr	r2, [pc, #152]	@ (8007c74 <exit_joy_mode+0xd4>)
 8007bdc:	6013      	str	r3, [r2, #0]

	// Reset velocities and feedforward terms
	prismatic_axis.command_vel = 0.0f;
 8007bde:	4b23      	ldr	r3, [pc, #140]	@ (8007c6c <exit_joy_mode+0xcc>)
 8007be0:	f04f 0200 	mov.w	r2, #0
 8007be4:	629a      	str	r2, [r3, #40]	@ 0x28
	revolute_axis.command_vel = 0.0f;
 8007be6:	4b23      	ldr	r3, [pc, #140]	@ (8007c74 <exit_joy_mode+0xd4>)
 8007be8:	f04f 0200 	mov.w	r2, #0
 8007bec:	629a      	str	r2, [r3, #40]	@ 0x28
	prismatic_axis.ffd = 0.0f;
 8007bee:	4b1f      	ldr	r3, [pc, #124]	@ (8007c6c <exit_joy_mode+0xcc>)
 8007bf0:	f04f 0200 	mov.w	r2, #0
 8007bf4:	631a      	str	r2, [r3, #48]	@ 0x30
	prismatic_axis.dfd = 0.0f;
 8007bf6:	4b1d      	ldr	r3, [pc, #116]	@ (8007c6c <exit_joy_mode+0xcc>)
 8007bf8:	f04f 0200 	mov.w	r2, #0
 8007bfc:	62da      	str	r2, [r3, #44]	@ 0x2c
	revolute_axis.ffd = 0.0f;
 8007bfe:	4b1d      	ldr	r3, [pc, #116]	@ (8007c74 <exit_joy_mode+0xd4>)
 8007c00:	f04f 0200 	mov.w	r2, #0
 8007c04:	631a      	str	r2, [r3, #48]	@ 0x30

	// Keep DFD for revolute axis (gravity compensation)
	revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8007c06:	4b1a      	ldr	r3, [pc, #104]	@ (8007c70 <exit_joy_mode+0xd0>)
 8007c08:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
			revolute_encoder.rads, prismatic_encoder.mm / 1000.0f);
 8007c0c:	4b16      	ldr	r3, [pc, #88]	@ (8007c68 <exit_joy_mode+0xc8>)
 8007c0e:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
	revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8007c12:	ed9f 6a19 	vldr	s12, [pc, #100]	@ 8007c78 <exit_joy_mode+0xd8>
 8007c16:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8007c1a:	eef0 0a66 	vmov.f32	s1, s13
 8007c1e:	eeb0 0a47 	vmov.f32	s0, s14
 8007c22:	4816      	ldr	r0, [pc, #88]	@ (8007c7c <exit_joy_mode+0xdc>)
 8007c24:	f7f9 fd29 	bl	800167a <REVOLUTE_MOTOR_DFD_Compute>
 8007c28:	eef0 7a40 	vmov.f32	s15, s0
 8007c2c:	4b11      	ldr	r3, [pc, #68]	@ (8007c74 <exit_joy_mode+0xd4>)
 8007c2e:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
//	PID_CONTROLLER_Reset(&revolute_position_pid);
//	PID_CONTROLLER_Reset(&revolute_velocity_pid);
//	PID_CONTROLLER_Reset(&revolute_velocity_pid);

	// Reset motion state
	motion_sequence_state = MOTION_IDLE;
 8007c32:	4b13      	ldr	r3, [pc, #76]	@ (8007c80 <exit_joy_mode+0xe0>)
 8007c34:	2200      	movs	r2, #0
 8007c36:	701a      	strb	r2, [r3, #0]
	prismatic_axis.trajectory_active = false;
 8007c38:	4b0c      	ldr	r3, [pc, #48]	@ (8007c6c <exit_joy_mode+0xcc>)
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	revolute_axis.trajectory_active = false;
 8007c40:	4b0c      	ldr	r3, [pc, #48]	@ (8007c74 <exit_joy_mode+0xd4>)
 8007c42:	2200      	movs	r2, #0
 8007c44:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

	//modbus reset state
	registerFrame[BaseSystem_Status].U16 = 0;
 8007c48:	4b0e      	ldr	r3, [pc, #56]	@ (8007c84 <exit_joy_mode+0xe4>)
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	805a      	strh	r2, [r3, #2]
	registerFrame[R_Theta_Status].U16 = 0;
 8007c4e:	4b0d      	ldr	r3, [pc, #52]	@ (8007c84 <exit_joy_mode+0xe4>)
 8007c50:	2200      	movs	r2, #0
 8007c52:	841a      	strh	r2, [r3, #32]
}
 8007c54:	bf00      	nop
 8007c56:	bd80      	pop	{r7, pc}
 8007c58:	20000809 	.word	0x20000809
 8007c5c:	20000808 	.word	0x20000808
 8007c60:	20000864 	.word	0x20000864
 8007c64:	20000860 	.word	0x20000860
 8007c68:	20000988 	.word	0x20000988
 8007c6c:	20000704 	.word	0x20000704
 8007c70:	200009e4 	.word	0x200009e4
 8007c74:	20000748 	.word	0x20000748
 8007c78:	447a0000 	.word	0x447a0000
 8007c7c:	20000b18 	.word	0x20000b18
 8007c80:	2000078c 	.word	0x2000078c
 8007c84:	200015a4 	.word	0x200015a4

08007c88 <save_current_position>:

void save_current_position(void) {
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b086      	sub	sp, #24
 8007c8c:	af00      	add	r7, sp, #0
	if (saved_position_count < JOY_MODE_MAX_POSITIONS) {
 8007c8e:	4b4f      	ldr	r3, [pc, #316]	@ (8007dcc <save_current_position+0x144>)
 8007c90:	781b      	ldrb	r3, [r3, #0]
 8007c92:	2b09      	cmp	r3, #9
 8007c94:	f200 8097 	bhi.w	8007dc6 <save_current_position+0x13e>
		float current_pris = prismatic_encoder.mm;
 8007c98:	4b4d      	ldr	r3, [pc, #308]	@ (8007dd0 <save_current_position+0x148>)
 8007c9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c9c:	617b      	str	r3, [r7, #20]
		float current_rev = revolute_encoder.rads;
 8007c9e:	4b4d      	ldr	r3, [pc, #308]	@ (8007dd4 <save_current_position+0x14c>)
 8007ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ca2:	613b      	str	r3, [r7, #16]

		if (saved_position_count > 0) {
 8007ca4:	4b49      	ldr	r3, [pc, #292]	@ (8007dcc <save_current_position+0x144>)
 8007ca6:	781b      	ldrb	r3, [r3, #0]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d032      	beq.n	8007d12 <save_current_position+0x8a>
			float last_pris =
					saved_positions[saved_position_count - 1].prismatic_pos;
 8007cac:	4b47      	ldr	r3, [pc, #284]	@ (8007dcc <save_current_position+0x144>)
 8007cae:	781b      	ldrb	r3, [r3, #0]
 8007cb0:	3b01      	subs	r3, #1
			float last_pris =
 8007cb2:	4a49      	ldr	r2, [pc, #292]	@ (8007dd8 <save_current_position+0x150>)
 8007cb4:	00db      	lsls	r3, r3, #3
 8007cb6:	4413      	add	r3, r2
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	60fb      	str	r3, [r7, #12]
			float last_rev =
					saved_positions[saved_position_count - 1].revolute_pos;
 8007cbc:	4b43      	ldr	r3, [pc, #268]	@ (8007dcc <save_current_position+0x144>)
 8007cbe:	781b      	ldrb	r3, [r3, #0]
 8007cc0:	3b01      	subs	r3, #1
			float last_rev =
 8007cc2:	4a45      	ldr	r2, [pc, #276]	@ (8007dd8 <save_current_position+0x150>)
 8007cc4:	00db      	lsls	r3, r3, #3
 8007cc6:	4413      	add	r3, r2
 8007cc8:	3304      	adds	r3, #4
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	60bb      	str	r3, [r7, #8]

			if (fabsf(current_pris - last_pris) < 5.0f
 8007cce:	ed97 7a05 	vldr	s14, [r7, #20]
 8007cd2:	edd7 7a03 	vldr	s15, [r7, #12]
 8007cd6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007cda:	eef0 7ae7 	vabs.f32	s15, s15
 8007cde:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8007ce2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007ce6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cea:	d512      	bpl.n	8007d12 <save_current_position+0x8a>
					&& fabsf(current_rev - last_rev) < 0.1f) {
 8007cec:	ed97 7a04 	vldr	s14, [r7, #16]
 8007cf0:	edd7 7a02 	vldr	s15, [r7, #8]
 8007cf4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007cf8:	eef0 7ae7 	vabs.f32	s15, s15
 8007cfc:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8007ddc <save_current_position+0x154>
 8007d00:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007d04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d08:	d503      	bpl.n	8007d12 <save_current_position+0x8a>
				too_similar = true;
 8007d0a:	4b35      	ldr	r3, [pc, #212]	@ (8007de0 <save_current_position+0x158>)
 8007d0c:	2201      	movs	r2, #1
 8007d0e:	701a      	strb	r2, [r3, #0]
				// DEBUG: Position too similar, not saving
				return;// Exit early if too similar
 8007d10:	e059      	b.n	8007dc6 <save_current_position+0x13e>
			}
		}

		// Only reach here if position should be saved
		saved_positions[saved_position_count].prismatic_pos = current_pris;
 8007d12:	4b2e      	ldr	r3, [pc, #184]	@ (8007dcc <save_current_position+0x144>)
 8007d14:	781b      	ldrb	r3, [r3, #0]
 8007d16:	4a30      	ldr	r2, [pc, #192]	@ (8007dd8 <save_current_position+0x150>)
 8007d18:	00db      	lsls	r3, r3, #3
 8007d1a:	4413      	add	r3, r2
 8007d1c:	697a      	ldr	r2, [r7, #20]
 8007d1e:	601a      	str	r2, [r3, #0]
		saved_positions[saved_position_count].revolute_pos = current_rev;
 8007d20:	4b2a      	ldr	r3, [pc, #168]	@ (8007dcc <save_current_position+0x144>)
 8007d22:	781b      	ldrb	r3, [r3, #0]
 8007d24:	4a2c      	ldr	r2, [pc, #176]	@ (8007dd8 <save_current_position+0x150>)
 8007d26:	00db      	lsls	r3, r3, #3
 8007d28:	4413      	add	r3, r2
 8007d2a:	3304      	adds	r3, #4
 8007d2c:	693a      	ldr	r2, [r7, #16]
 8007d2e:	601a      	str	r2, [r3, #0]

		uint8_t r_addr = 0x20 + saved_position_count * 2;
 8007d30:	4b26      	ldr	r3, [pc, #152]	@ (8007dcc <save_current_position+0x144>)
 8007d32:	781b      	ldrb	r3, [r3, #0]
 8007d34:	3310      	adds	r3, #16
 8007d36:	b2db      	uxtb	r3, r3
 8007d38:	005b      	lsls	r3, r3, #1
 8007d3a:	71fb      	strb	r3, [r7, #7]
		uint8_t t_addr = r_addr + 1;
 8007d3c:	79fb      	ldrb	r3, [r7, #7]
 8007d3e:	3301      	adds	r3, #1
 8007d40:	71bb      	strb	r3, [r7, #6]

		if (r_addr <= 0x38 && t_addr <= 0x39) {
 8007d42:	79fb      	ldrb	r3, [r7, #7]
 8007d44:	2b38      	cmp	r3, #56	@ 0x38
 8007d46:	d82e      	bhi.n	8007da6 <save_current_position+0x11e>
 8007d48:	79bb      	ldrb	r3, [r7, #6]
 8007d4a:	2b39      	cmp	r3, #57	@ 0x39
 8007d4c:	d82b      	bhi.n	8007da6 <save_current_position+0x11e>
			int16_t r_mm_fixed = (int16_t) (current_pris * 10.0);
 8007d4e:	6978      	ldr	r0, [r7, #20]
 8007d50:	f7f8 fbc6 	bl	80004e0 <__aeabi_f2d>
 8007d54:	f04f 0200 	mov.w	r2, #0
 8007d58:	4b22      	ldr	r3, [pc, #136]	@ (8007de4 <save_current_position+0x15c>)
 8007d5a:	f7f8 fc19 	bl	8000590 <__aeabi_dmul>
 8007d5e:	4602      	mov	r2, r0
 8007d60:	460b      	mov	r3, r1
 8007d62:	4610      	mov	r0, r2
 8007d64:	4619      	mov	r1, r3
 8007d66:	f7f8 fead 	bl	8000ac4 <__aeabi_d2iz>
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	80bb      	strh	r3, [r7, #4]
			int16_t t_deg_fixed = (int16_t) (revolute_axis.deg * 10.0);
 8007d6e:	4b1e      	ldr	r3, [pc, #120]	@ (8007de8 <save_current_position+0x160>)
 8007d70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d72:	4618      	mov	r0, r3
 8007d74:	f7f8 fbb4 	bl	80004e0 <__aeabi_f2d>
 8007d78:	f04f 0200 	mov.w	r2, #0
 8007d7c:	4b19      	ldr	r3, [pc, #100]	@ (8007de4 <save_current_position+0x15c>)
 8007d7e:	f7f8 fc07 	bl	8000590 <__aeabi_dmul>
 8007d82:	4602      	mov	r2, r0
 8007d84:	460b      	mov	r3, r1
 8007d86:	4610      	mov	r0, r2
 8007d88:	4619      	mov	r1, r3
 8007d8a:	f7f8 fe9b 	bl	8000ac4 <__aeabi_d2iz>
 8007d8e:	4603      	mov	r3, r0
 8007d90:	807b      	strh	r3, [r7, #2]

			registerFrame[r_addr].U16 = r_mm_fixed;
 8007d92:	79fb      	ldrb	r3, [r7, #7]
 8007d94:	88b9      	ldrh	r1, [r7, #4]
 8007d96:	4a15      	ldr	r2, [pc, #84]	@ (8007dec <save_current_position+0x164>)
 8007d98:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			registerFrame[t_addr].U16 = t_deg_fixed;
 8007d9c:	79bb      	ldrb	r3, [r7, #6]
 8007d9e:	8879      	ldrh	r1, [r7, #2]
 8007da0:	4a12      	ldr	r2, [pc, #72]	@ (8007dec <save_current_position+0x164>)
 8007da2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}

		saved_position_count++;
 8007da6:	4b09      	ldr	r3, [pc, #36]	@ (8007dcc <save_current_position+0x144>)
 8007da8:	781b      	ldrb	r3, [r3, #0]
 8007daa:	3301      	adds	r3, #1
 8007dac:	b2da      	uxtb	r2, r3
 8007dae:	4b07      	ldr	r3, [pc, #28]	@ (8007dcc <save_current_position+0x144>)
 8007db0:	701a      	strb	r2, [r3, #0]

		if (saved_position_count >= JOY_MODE_MAX_POSITIONS) {
 8007db2:	4b06      	ldr	r3, [pc, #24]	@ (8007dcc <save_current_position+0x144>)
 8007db4:	781b      	ldrb	r3, [r3, #0]
 8007db6:	2b09      	cmp	r3, #9
 8007db8:	d905      	bls.n	8007dc6 <save_current_position+0x13e>
			joy_mode_state = JOY_MODE_POSITION_SAVED;
 8007dba:	4b0d      	ldr	r3, [pc, #52]	@ (8007df0 <save_current_position+0x168>)
 8007dbc:	2203      	movs	r2, #3
 8007dbe:	701a      	strb	r2, [r3, #0]
			joy_mode_pilot_timer = 0;
 8007dc0:	4b0c      	ldr	r3, [pc, #48]	@ (8007df4 <save_current_position+0x16c>)
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	601a      	str	r2, [r3, #0]
		}
	}
}
 8007dc6:	3718      	adds	r7, #24
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	bd80      	pop	{r7, pc}
 8007dcc:	2000085c 	.word	0x2000085c
 8007dd0:	20000988 	.word	0x20000988
 8007dd4:	200009e4 	.word	0x200009e4
 8007dd8:	2000080c 	.word	0x2000080c
 8007ddc:	3dcccccd 	.word	0x3dcccccd
 8007de0:	200008c9 	.word	0x200008c9
 8007de4:	40240000 	.word	0x40240000
 8007de8:	20000748 	.word	0x20000748
 8007dec:	200015a4 	.word	0x200015a4
 8007df0:	20000808 	.word	0x20000808
 8007df4:	20000860 	.word	0x20000860

08007df8 <start_position_playback>:

void start_position_playback(void) {
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b084      	sub	sp, #16
 8007dfc:	af00      	add	r7, sp, #0

	if (saved_position_count > 0) {
 8007dfe:	4b19      	ldr	r3, [pc, #100]	@ (8007e64 <start_position_playback+0x6c>)
 8007e00:	781b      	ldrb	r3, [r3, #0]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d02a      	beq.n	8007e5c <start_position_playback+0x64>
		playback_position_index = 0;
 8007e06:	4b18      	ldr	r3, [pc, #96]	@ (8007e68 <start_position_playback+0x70>)
 8007e08:	2200      	movs	r2, #0
 8007e0a:	701a      	strb	r2, [r3, #0]
		joy_mode_playback_timer = 0;
 8007e0c:	4b17      	ldr	r3, [pc, #92]	@ (8007e6c <start_position_playback+0x74>)
 8007e0e:	2200      	movs	r2, #0
 8007e10:	601a      	str	r2, [r3, #0]
		joy_mode_state = JOY_MODE_PLAYBACK;
 8007e12:	4b17      	ldr	r3, [pc, #92]	@ (8007e70 <start_position_playback+0x78>)
 8007e14:	2204      	movs	r2, #4
 8007e16:	701a      	strb	r2, [r3, #0]
		// Keep pilot light ON during playback (don't turn it off)
		HAL_GPIO_WritePin(PILOT_GPIO_Port, PILOT_Pin, GPIO_PIN_SET);
 8007e18:	2201      	movs	r2, #1
 8007e1a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007e1e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007e22:	f005 fb3d 	bl	800d4a0 <HAL_GPIO_WritePin>
		joy_mode_pilot_state = true;
 8007e26:	4b13      	ldr	r3, [pc, #76]	@ (8007e74 <start_position_playback+0x7c>)
 8007e28:	2201      	movs	r2, #1
 8007e2a:	701a      	strb	r2, [r3, #0]

		// Start first trajectory
		float target_pris = saved_positions[0].prismatic_pos;
 8007e2c:	4b12      	ldr	r3, [pc, #72]	@ (8007e78 <start_position_playback+0x80>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	60fb      	str	r3, [r7, #12]
		float target_rev_rad = saved_positions[0].revolute_pos;
 8007e32:	4b11      	ldr	r3, [pc, #68]	@ (8007e78 <start_position_playback+0x80>)
 8007e34:	685b      	ldr	r3, [r3, #4]
 8007e36:	60bb      	str	r3, [r7, #8]
		float target_rev_deg = target_rev_rad * 180.0f / PI;
 8007e38:	edd7 7a02 	vldr	s15, [r7, #8]
 8007e3c:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8007e7c <start_position_playback+0x84>
 8007e40:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007e44:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8007e80 <start_position_playback+0x88>
 8007e48:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007e4c:	edc7 7a01 	vstr	s15, [r7, #4]

		start_combined_trajectory(target_pris, target_rev_deg);
 8007e50:	edd7 0a01 	vldr	s1, [r7, #4]
 8007e54:	ed97 0a03 	vldr	s0, [r7, #12]
 8007e58:	f7fe fafc 	bl	8006454 <start_combined_trajectory>

	}
}
 8007e5c:	bf00      	nop
 8007e5e:	3710      	adds	r7, #16
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}
 8007e64:	2000085c 	.word	0x2000085c
 8007e68:	2000085d 	.word	0x2000085d
 8007e6c:	20000868 	.word	0x20000868
 8007e70:	20000808 	.word	0x20000808
 8007e74:	20000864 	.word	0x20000864
 8007e78:	2000080c 	.word	0x2000080c
 8007e7c:	43340000 	.word	0x43340000
 8007e80:	40490fdb 	.word	0x40490fdb

08007e84 <reset_joy_mode_data>:

void reset_joy_mode_data(void) {
 8007e84:	b480      	push	{r7}
 8007e86:	b083      	sub	sp, #12
 8007e88:	af00      	add	r7, sp, #0
	// Reset saved position count
	saved_position_count = 0;
 8007e8a:	4b19      	ldr	r3, [pc, #100]	@ (8007ef0 <reset_joy_mode_data+0x6c>)
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	701a      	strb	r2, [r3, #0]

	// Reset playback index
	playback_position_index = 0;
 8007e90:	4b18      	ldr	r3, [pc, #96]	@ (8007ef4 <reset_joy_mode_data+0x70>)
 8007e92:	2200      	movs	r2, #0
 8007e94:	701a      	strb	r2, [r3, #0]

	// Clear all saved positions
	for (int i = 0; i < JOY_MODE_MAX_POSITIONS; i++) {
 8007e96:	2300      	movs	r3, #0
 8007e98:	607b      	str	r3, [r7, #4]
 8007e9a:	e011      	b.n	8007ec0 <reset_joy_mode_data+0x3c>
		saved_positions[i].prismatic_pos = 0.0f;
 8007e9c:	4a16      	ldr	r2, [pc, #88]	@ (8007ef8 <reset_joy_mode_data+0x74>)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	00db      	lsls	r3, r3, #3
 8007ea2:	4413      	add	r3, r2
 8007ea4:	f04f 0200 	mov.w	r2, #0
 8007ea8:	601a      	str	r2, [r3, #0]
		saved_positions[i].revolute_pos = 0.0f;
 8007eaa:	4a13      	ldr	r2, [pc, #76]	@ (8007ef8 <reset_joy_mode_data+0x74>)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	00db      	lsls	r3, r3, #3
 8007eb0:	4413      	add	r3, r2
 8007eb2:	3304      	adds	r3, #4
 8007eb4:	f04f 0200 	mov.w	r2, #0
 8007eb8:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < JOY_MODE_MAX_POSITIONS; i++) {
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	3301      	adds	r3, #1
 8007ebe:	607b      	str	r3, [r7, #4]
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2b09      	cmp	r3, #9
 8007ec4:	ddea      	ble.n	8007e9c <reset_joy_mode_data+0x18>
	}

	// Reset pilot light timers
	joy_mode_pilot_timer = 0;
 8007ec6:	4b0d      	ldr	r3, [pc, #52]	@ (8007efc <reset_joy_mode_data+0x78>)
 8007ec8:	2200      	movs	r2, #0
 8007eca:	601a      	str	r2, [r3, #0]
	joy_mode_pilot_state = false;
 8007ecc:	4b0c      	ldr	r3, [pc, #48]	@ (8007f00 <reset_joy_mode_data+0x7c>)
 8007ece:	2200      	movs	r2, #0
 8007ed0:	701a      	strb	r2, [r3, #0]

	// Reset playback timer
	joy_mode_playback_timer = 0;
 8007ed2:	4b0c      	ldr	r3, [pc, #48]	@ (8007f04 <reset_joy_mode_data+0x80>)
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	601a      	str	r2, [r3, #0]

	// Reset button states
	joy_mode_b2_pressed = false;
 8007ed8:	4b0b      	ldr	r3, [pc, #44]	@ (8007f08 <reset_joy_mode_data+0x84>)
 8007eda:	2200      	movs	r2, #0
 8007edc:	701a      	strb	r2, [r3, #0]
	joy_mode_b2_last_state = false;
 8007ede:	4b0b      	ldr	r3, [pc, #44]	@ (8007f0c <reset_joy_mode_data+0x88>)
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	701a      	strb	r2, [r3, #0]
}
 8007ee4:	bf00      	nop
 8007ee6:	370c      	adds	r7, #12
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eee:	4770      	bx	lr
 8007ef0:	2000085c 	.word	0x2000085c
 8007ef4:	2000085d 	.word	0x2000085d
 8007ef8:	2000080c 	.word	0x2000080c
 8007efc:	20000860 	.word	0x20000860
 8007f00:	20000864 	.word	0x20000864
 8007f04:	20000868 	.word	0x20000868
 8007f08:	2000086c 	.word	0x2000086c
 8007f0c:	2000086d 	.word	0x2000086d

08007f10 <update_joy_mode_velocity_control>:

void update_joy_mode_velocity_control(void) {
 8007f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f14:	ed2d 8b02 	vpush	{d8}
 8007f18:	b08d      	sub	sp, #52	@ 0x34
 8007f1a:	af00      	add	r7, sp, #0
	// Read current photo sensor states directly
	bool up_photo_detected = HAL_GPIO_ReadPin(upperphoto_GPIO_Port,
 8007f1c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8007f20:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007f24:	f005 faa4 	bl	800d470 <HAL_GPIO_ReadPin>
 8007f28:	4603      	mov	r3, r0
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	bf14      	ite	ne
 8007f2e:	2301      	movne	r3, #1
 8007f30:	2300      	moveq	r3, #0
 8007f32:	76fb      	strb	r3, [r7, #27]
	upperphoto_Pin);
	bool low_photo_detected = HAL_GPIO_ReadPin(LOWER_PHOTO_GPIO_Port,
 8007f34:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8007f38:	48a1      	ldr	r0, [pc, #644]	@ (80081c0 <update_joy_mode_velocity_control+0x2b0>)
 8007f3a:	f005 fa99 	bl	800d470 <HAL_GPIO_ReadPin>
 8007f3e:	4603      	mov	r3, r0
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	bf14      	ite	ne
 8007f44:	2301      	movne	r3, #1
 8007f46:	2300      	moveq	r3, #0
 8007f48:	76bb      	strb	r3, [r7, #26]
	LOWER_PHOTO_Pin);

	// Prismatic axis control based on joystick_x
	float pris_command_vel = 0.0f;
 8007f4a:	f04f 0300 	mov.w	r3, #0
 8007f4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	bool pris_moving = false;
 8007f50:	2300      	movs	r3, #0
 8007f52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	static bool pris_was_moving = false; // Track previous moving state

	// Process prismatic axis joystick control (FIXED LOGIC)
	if (up_photo_detected && joystick_x > JOY_MODE_VELOCITY_THRESHOLD) {
 8007f56:	7efb      	ldrb	r3, [r7, #27]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d00d      	beq.n	8007f78 <update_joy_mode_velocity_control+0x68>
 8007f5c:	4b99      	ldr	r3, [pc, #612]	@ (80081c4 <update_joy_mode_velocity_control+0x2b4>)
 8007f5e:	edd3 7a00 	vldr	s15, [r3]
 8007f62:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 80081c8 <update_joy_mode_velocity_control+0x2b8>
 8007f66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007f6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f6e:	dd03      	ble.n	8007f78 <update_joy_mode_velocity_control+0x68>
		// At up photo and trying to go up (negative direction) - block movement
		pris_command_vel = 0.0f;
 8007f70:	f04f 0300 	mov.w	r3, #0
 8007f74:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007f76:	e048      	b.n	800800a <update_joy_mode_velocity_control+0xfa>
	} else if (low_photo_detected && joystick_x < -JOY_MODE_VELOCITY_THRESHOLD) {
 8007f78:	7ebb      	ldrb	r3, [r7, #26]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d00d      	beq.n	8007f9a <update_joy_mode_velocity_control+0x8a>
 8007f7e:	4b91      	ldr	r3, [pc, #580]	@ (80081c4 <update_joy_mode_velocity_control+0x2b4>)
 8007f80:	edd3 7a00 	vldr	s15, [r3]
 8007f84:	ed9f 7a91 	vldr	s14, [pc, #580]	@ 80081cc <update_joy_mode_velocity_control+0x2bc>
 8007f88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007f8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f90:	d503      	bpl.n	8007f9a <update_joy_mode_velocity_control+0x8a>
		// At low photo and trying to go down (positive direction) - block movement
		pris_command_vel = 0.0f;
 8007f92:	f04f 0300 	mov.w	r3, #0
 8007f96:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007f98:	e037      	b.n	800800a <update_joy_mode_velocity_control+0xfa>
	} else if (joystick_x < -JOY_MODE_VELOCITY_THRESHOLD) {
 8007f9a:	4b8a      	ldr	r3, [pc, #552]	@ (80081c4 <update_joy_mode_velocity_control+0x2b4>)
 8007f9c:	edd3 7a00 	vldr	s15, [r3]
 8007fa0:	ed9f 7a8a 	vldr	s14, [pc, #552]	@ 80081cc <update_joy_mode_velocity_control+0x2bc>
 8007fa4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007fa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fac:	d50e      	bpl.n	8007fcc <update_joy_mode_velocity_control+0xbc>
		// Moving down (positive direction)
		pris_command_vel = JOY_MODE_CONSTANT_VELOCITY_PRIS;
 8007fae:	4b88      	ldr	r3, [pc, #544]	@ (80081d0 <update_joy_mode_velocity_control+0x2c0>)
 8007fb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
		pris_moving = true;
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
		// Clear flags when moving away from sensors
		if (!low_photo_detected) {
 8007fb8:	7ebb      	ldrb	r3, [r7, #26]
 8007fba:	f083 0301 	eor.w	r3, r3, #1
 8007fbe:	b2db      	uxtb	r3, r3
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d022      	beq.n	800800a <update_joy_mode_velocity_control+0xfa>
			up_photo = false;
 8007fc4:	4b83      	ldr	r3, [pc, #524]	@ (80081d4 <update_joy_mode_velocity_control+0x2c4>)
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	701a      	strb	r2, [r3, #0]
 8007fca:	e01e      	b.n	800800a <update_joy_mode_velocity_control+0xfa>
		}
	} else if (joystick_x > JOY_MODE_VELOCITY_THRESHOLD) {
 8007fcc:	4b7d      	ldr	r3, [pc, #500]	@ (80081c4 <update_joy_mode_velocity_control+0x2b4>)
 8007fce:	edd3 7a00 	vldr	s15, [r3]
 8007fd2:	ed9f 7a7d 	vldr	s14, [pc, #500]	@ 80081c8 <update_joy_mode_velocity_control+0x2b8>
 8007fd6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007fda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fde:	dd0e      	ble.n	8007ffe <update_joy_mode_velocity_control+0xee>
		// Moving up (negative direction)
		pris_command_vel = -JOY_MODE_CONSTANT_VELOCITY_PRIS;
 8007fe0:	4b7d      	ldr	r3, [pc, #500]	@ (80081d8 <update_joy_mode_velocity_control+0x2c8>)
 8007fe2:	62fb      	str	r3, [r7, #44]	@ 0x2c
		pris_moving = true;
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
		// Clear flags when moving away from sensors
		if (!up_photo_detected) {
 8007fea:	7efb      	ldrb	r3, [r7, #27]
 8007fec:	f083 0301 	eor.w	r3, r3, #1
 8007ff0:	b2db      	uxtb	r3, r3
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d009      	beq.n	800800a <update_joy_mode_velocity_control+0xfa>
			low_photo = false;
 8007ff6:	4b79      	ldr	r3, [pc, #484]	@ (80081dc <update_joy_mode_velocity_control+0x2cc>)
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	701a      	strb	r2, [r3, #0]
 8007ffc:	e005      	b.n	800800a <update_joy_mode_velocity_control+0xfa>
		}
	} else {
		// Joystick in deadband - hold position
		pris_command_vel = 0.0f;
 8007ffe:	f04f 0300 	mov.w	r3, #0
 8008002:	62fb      	str	r3, [r7, #44]	@ 0x2c
		pris_moving = false;
 8008004:	2300      	movs	r3, #0
 8008006:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	}

	// Revolute axis control based on joystick_y
	float rev_command_vel = 0.0f;
 800800a:	f04f 0300 	mov.w	r3, #0
 800800e:	627b      	str	r3, [r7, #36]	@ 0x24
	bool rev_moving = false;
 8008010:	2300      	movs	r3, #0
 8008012:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

	// Get current revolute position in degrees for limit checking
	float revolute_deg = UnitConverter_angle(&converter_system,
 8008016:	4b72      	ldr	r3, [pc, #456]	@ (80081e0 <update_joy_mode_velocity_control+0x2d0>)
 8008018:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 800801c:	220e      	movs	r2, #14
 800801e:	210f      	movs	r1, #15
 8008020:	eeb0 0a67 	vmov.f32	s0, s15
 8008024:	486f      	ldr	r0, [pc, #444]	@ (80081e4 <update_joy_mode_velocity_control+0x2d4>)
 8008026:	f7fc fda7 	bl	8004b78 <UnitConverter_angle>
 800802a:	ed87 0a05 	vstr	s0, [r7, #20]
			revolute_encoder.rads, UNIT_RADIAN, UNIT_DEGREE);

	// Process revolute axis joystick control with limits
	if ((revolute_deg > 175.0f && joystick_y > JOY_MODE_VELOCITY_THRESHOLD)
 800802e:	edd7 7a05 	vldr	s15, [r7, #20]
 8008032:	ed9f 7a6d 	vldr	s14, [pc, #436]	@ 80081e8 <update_joy_mode_velocity_control+0x2d8>
 8008036:	eef4 7ac7 	vcmpe.f32	s15, s14
 800803a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800803e:	dd09      	ble.n	8008054 <update_joy_mode_velocity_control+0x144>
 8008040:	4b6a      	ldr	r3, [pc, #424]	@ (80081ec <update_joy_mode_velocity_control+0x2dc>)
 8008042:	edd3 7a00 	vldr	s15, [r3]
 8008046:	ed9f 7a60 	vldr	s14, [pc, #384]	@ 80081c8 <update_joy_mode_velocity_control+0x2b8>
 800804a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800804e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008052:	dc12      	bgt.n	800807a <update_joy_mode_velocity_control+0x16a>
			|| (revolute_deg < -175.0f
 8008054:	edd7 7a05 	vldr	s15, [r7, #20]
 8008058:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 80081f0 <update_joy_mode_velocity_control+0x2e0>
 800805c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008064:	d510      	bpl.n	8008088 <update_joy_mode_velocity_control+0x178>
					&& joystick_y < -JOY_MODE_VELOCITY_THRESHOLD)) {
 8008066:	4b61      	ldr	r3, [pc, #388]	@ (80081ec <update_joy_mode_velocity_control+0x2dc>)
 8008068:	edd3 7a00 	vldr	s15, [r3]
 800806c:	ed9f 7a57 	vldr	s14, [pc, #348]	@ 80081cc <update_joy_mode_velocity_control+0x2bc>
 8008070:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008078:	d506      	bpl.n	8008088 <update_joy_mode_velocity_control+0x178>
		// At revolute limits - block movement
		rev_command_vel = 0.0f;
 800807a:	f04f 0300 	mov.w	r3, #0
 800807e:	627b      	str	r3, [r7, #36]	@ 0x24
		rev_moving = false;
 8008080:	2300      	movs	r3, #0
 8008082:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008086:	e025      	b.n	80080d4 <update_joy_mode_velocity_control+0x1c4>
	} else if (joystick_y > JOY_MODE_VELOCITY_THRESHOLD) {
 8008088:	4b58      	ldr	r3, [pc, #352]	@ (80081ec <update_joy_mode_velocity_control+0x2dc>)
 800808a:	edd3 7a00 	vldr	s15, [r3]
 800808e:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 80081c8 <update_joy_mode_velocity_control+0x2b8>
 8008092:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800809a:	dd05      	ble.n	80080a8 <update_joy_mode_velocity_control+0x198>
		rev_command_vel = JOY_MODE_CONSTANT_VELOCITY_REV;
 800809c:	4b55      	ldr	r3, [pc, #340]	@ (80081f4 <update_joy_mode_velocity_control+0x2e4>)
 800809e:	627b      	str	r3, [r7, #36]	@ 0x24
		rev_moving = true;
 80080a0:	2301      	movs	r3, #1
 80080a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80080a6:	e015      	b.n	80080d4 <update_joy_mode_velocity_control+0x1c4>
	} else if (joystick_y < -JOY_MODE_VELOCITY_THRESHOLD) {
 80080a8:	4b50      	ldr	r3, [pc, #320]	@ (80081ec <update_joy_mode_velocity_control+0x2dc>)
 80080aa:	edd3 7a00 	vldr	s15, [r3]
 80080ae:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 80081cc <update_joy_mode_velocity_control+0x2bc>
 80080b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80080b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080ba:	d505      	bpl.n	80080c8 <update_joy_mode_velocity_control+0x1b8>
		rev_command_vel = -JOY_MODE_CONSTANT_VELOCITY_REV;
 80080bc:	4b4e      	ldr	r3, [pc, #312]	@ (80081f8 <update_joy_mode_velocity_control+0x2e8>)
 80080be:	627b      	str	r3, [r7, #36]	@ 0x24
		rev_moving = true;
 80080c0:	2301      	movs	r3, #1
 80080c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80080c6:	e005      	b.n	80080d4 <update_joy_mode_velocity_control+0x1c4>
	} else {
		// Joystick in deadband - hold position
		rev_command_vel = 0.0f;
 80080c8:	f04f 0300 	mov.w	r3, #0
 80080cc:	627b      	str	r3, [r7, #36]	@ 0x24
		rev_moving = false;
 80080ce:	2300      	movs	r3, #0
 80080d0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	}

	/* PRISMATIC AXIS CONTROL - Keep existing PID-based control */
	// Detect transition from moving to stopped
	if (pris_was_moving && !pris_moving) {
 80080d4:	4b49      	ldr	r3, [pc, #292]	@ (80081fc <update_joy_mode_velocity_control+0x2ec>)
 80080d6:	781b      	ldrb	r3, [r3, #0]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d00a      	beq.n	80080f2 <update_joy_mode_velocity_control+0x1e2>
 80080dc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80080e0:	f083 0301 	eor.w	r3, r3, #1
 80080e4:	b2db      	uxtb	r3, r3
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d003      	beq.n	80080f2 <update_joy_mode_velocity_control+0x1e2>
		// Just stopped moving - capture current position as target
		prismatic_axis.position = prismatic_encoder.mm;
 80080ea:	4b45      	ldr	r3, [pc, #276]	@ (8008200 <update_joy_mode_velocity_control+0x2f0>)
 80080ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80080ee:	4a45      	ldr	r2, [pc, #276]	@ (8008204 <update_joy_mode_velocity_control+0x2f4>)
 80080f0:	6013      	str	r3, [r2, #0]
	}

	if (pris_moving) {
 80080f2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	f000 8092 	beq.w	8008220 <update_joy_mode_velocity_control+0x310>
		// Moving - use velocity control
		prismatic_axis.vel_error = pris_command_vel
				- prismatic_axis.kalman_velocity;
 80080fc:	4b41      	ldr	r3, [pc, #260]	@ (8008204 <update_joy_mode_velocity_control+0x2f4>)
 80080fe:	edd3 7a07 	vldr	s15, [r3, #28]
 8008102:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8008106:	ee77 7a67 	vsub.f32	s15, s14, s15
		prismatic_axis.vel_error = pris_command_vel
 800810a:	4b3e      	ldr	r3, [pc, #248]	@ (8008204 <update_joy_mode_velocity_control+0x2f4>)
 800810c:	edc3 7a06 	vstr	s15, [r3, #24]
		prismatic_axis.command_pos = PWM_Satuation(
 8008110:	4b3c      	ldr	r3, [pc, #240]	@ (8008204 <update_joy_mode_velocity_control+0x2f4>)
 8008112:	edd3 7a06 	vldr	s15, [r3, #24]
 8008116:	eeb0 0a67 	vmov.f32	s0, s15
 800811a:	483b      	ldr	r0, [pc, #236]	@ (8008208 <update_joy_mode_velocity_control+0x2f8>)
 800811c:	f7f9 f87c 	bl	8001218 <PID_CONTROLLER_Compute>
 8008120:	eeb0 8a40 	vmov.f32	s16, s0
				PID_CONTROLLER_Compute(&prismatic_velocity_pid,
						prismatic_axis.vel_error),
				ZGX45RGG_400RPM_Constant.U_max,
 8008124:	4b39      	ldr	r3, [pc, #228]	@ (800820c <update_joy_mode_velocity_control+0x2fc>)
 8008126:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		prismatic_axis.command_pos = PWM_Satuation(
 800812a:	4610      	mov	r0, r2
 800812c:	4619      	mov	r1, r3
 800812e:	f7f8 fcc9 	bl	8000ac4 <__aeabi_d2iz>
 8008132:	4604      	mov	r4, r0
				-ZGX45RGG_400RPM_Constant.U_max);
 8008134:	4b35      	ldr	r3, [pc, #212]	@ (800820c <update_joy_mode_velocity_control+0x2fc>)
 8008136:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800813a:	60ba      	str	r2, [r7, #8]
 800813c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8008140:	60fb      	str	r3, [r7, #12]
		prismatic_axis.command_pos = PWM_Satuation(
 8008142:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008146:	f7f8 fcbd 	bl	8000ac4 <__aeabi_d2iz>
 800814a:	4603      	mov	r3, r0
 800814c:	4619      	mov	r1, r3
 800814e:	4620      	mov	r0, r4
 8008150:	eeb0 0a48 	vmov.f32	s0, s16
 8008154:	f7f8 fffe 	bl	8001154 <PWM_Satuation>
 8008158:	ee07 0a90 	vmov	s15, r0
 800815c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008160:	4b28      	ldr	r3, [pc, #160]	@ (8008204 <update_joy_mode_velocity_control+0x2f4>)
 8008162:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		// Add feedforward for moving
		prismatic_axis.ffd = PRISMATIC_MOTOR_FFD_Compute(&prismatic_motor_ffd,
 8008166:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800816a:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8008210 <update_joy_mode_velocity_control+0x300>
 800816e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8008172:	eeb0 0a47 	vmov.f32	s0, s14
 8008176:	4827      	ldr	r0, [pc, #156]	@ (8008214 <update_joy_mode_velocity_control+0x304>)
 8008178:	f7f9 fb6a 	bl	8001850 <PRISMATIC_MOTOR_FFD_Compute>
 800817c:	eef0 7a40 	vmov.f32	s15, s0
 8008180:	4b20      	ldr	r3, [pc, #128]	@ (8008204 <update_joy_mode_velocity_control+0x2f4>)
 8008182:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
				pris_command_vel / 1000.0f);
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 8008186:	4b16      	ldr	r3, [pc, #88]	@ (80081e0 <update_joy_mode_velocity_control+0x2d0>)
 8008188:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
				revolute_encoder.rads, 0.0f, prismatic_encoder.mm / 1000.0f);
 800818c:	4b1c      	ldr	r3, [pc, #112]	@ (8008200 <update_joy_mode_velocity_control+0x2f0>)
 800818e:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 8008192:	ed9f 6a1f 	vldr	s12, [pc, #124]	@ 8008210 <update_joy_mode_velocity_control+0x300>
 8008196:	eec7 6a86 	vdiv.f32	s13, s15, s12
 800819a:	eeb0 1a66 	vmov.f32	s2, s13
 800819e:	eddf 0a1e 	vldr	s1, [pc, #120]	@ 8008218 <update_joy_mode_velocity_control+0x308>
 80081a2:	eeb0 0a47 	vmov.f32	s0, s14
 80081a6:	481d      	ldr	r0, [pc, #116]	@ (800821c <update_joy_mode_velocity_control+0x30c>)
 80081a8:	f7f9 fbe5 	bl	8001976 <PRISMATIC_MOTOR_DFD_Compute>
 80081ac:	eef0 7a40 	vmov.f32	s15, s0
 80081b0:	4b14      	ldr	r3, [pc, #80]	@ (8008204 <update_joy_mode_velocity_control+0x2f4>)
 80081b2:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

		// Continuously update target position while moving
		prismatic_axis.position = prismatic_encoder.mm;
 80081b6:	4b12      	ldr	r3, [pc, #72]	@ (8008200 <update_joy_mode_velocity_control+0x2f0>)
 80081b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80081ba:	4a12      	ldr	r2, [pc, #72]	@ (8008204 <update_joy_mode_velocity_control+0x2f4>)
 80081bc:	6013      	str	r3, [r2, #0]
 80081be:	e0a2      	b.n	8008306 <update_joy_mode_velocity_control+0x3f6>
 80081c0:	48000400 	.word	0x48000400
 80081c4:	20001e70 	.word	0x20001e70
 80081c8:	42200000 	.word	0x42200000
 80081cc:	c2200000 	.word	0xc2200000
 80081d0:	43160000 	.word	0x43160000
 80081d4:	200007e8 	.word	0x200007e8
 80081d8:	c3160000 	.word	0xc3160000
 80081dc:	200007e9 	.word	0x200007e9
 80081e0:	200009e4 	.word	0x200009e4
 80081e4:	20000d7c 	.word	0x20000d7c
 80081e8:	432f0000 	.word	0x432f0000
 80081ec:	20001e74 	.word	0x20001e74
 80081f0:	c32f0000 	.word	0xc32f0000
 80081f4:	40400000 	.word	0x40400000
 80081f8:	c0400000 	.word	0xc0400000
 80081fc:	200008dc 	.word	0x200008dc
 8008200:	20000988 	.word	0x20000988
 8008204:	20000704 	.word	0x20000704
 8008208:	20000a68 	.word	0x20000a68
 800820c:	20000080 	.word	0x20000080
 8008210:	447a0000 	.word	0x447a0000
 8008214:	20000b08 	.word	0x20000b08
 8008218:	00000000 	.word	0x00000000
 800821c:	20000b0c 	.word	0x20000b0c
	} else {
		// Not moving - hold target position with position control
		prismatic_axis.pos_error = prismatic_axis.position
 8008220:	4b8d      	ldr	r3, [pc, #564]	@ (8008458 <update_joy_mode_velocity_control+0x548>)
 8008222:	ed93 7a00 	vldr	s14, [r3]
				- prismatic_encoder.mm;
 8008226:	4b8d      	ldr	r3, [pc, #564]	@ (800845c <update_joy_mode_velocity_control+0x54c>)
 8008228:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 800822c:	ee77 7a67 	vsub.f32	s15, s14, s15
		prismatic_axis.pos_error = prismatic_axis.position
 8008230:	4b89      	ldr	r3, [pc, #548]	@ (8008458 <update_joy_mode_velocity_control+0x548>)
 8008232:	edc3 7a05 	vstr	s15, [r3, #20]
		prismatic_axis.command_vel = PWM_Satuation(
 8008236:	4b88      	ldr	r3, [pc, #544]	@ (8008458 <update_joy_mode_velocity_control+0x548>)
 8008238:	edd3 7a05 	vldr	s15, [r3, #20]
 800823c:	eeb0 0a67 	vmov.f32	s0, s15
 8008240:	4887      	ldr	r0, [pc, #540]	@ (8008460 <update_joy_mode_velocity_control+0x550>)
 8008242:	f7f8 ffe9 	bl	8001218 <PID_CONTROLLER_Compute>
 8008246:	eeb0 8a40 	vmov.f32	s16, s0
				PID_CONTROLLER_Compute(&prismatic_position_pid,
						prismatic_axis.pos_error),
				ZGX45RGG_400RPM_Constant.sd_max,
 800824a:	4b86      	ldr	r3, [pc, #536]	@ (8008464 <update_joy_mode_velocity_control+0x554>)
 800824c:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
		prismatic_axis.command_vel = PWM_Satuation(
 8008250:	4610      	mov	r0, r2
 8008252:	4619      	mov	r1, r3
 8008254:	f7f8 fc36 	bl	8000ac4 <__aeabi_d2iz>
 8008258:	4604      	mov	r4, r0
				-ZGX45RGG_400RPM_Constant.sd_max);
 800825a:	4b82      	ldr	r3, [pc, #520]	@ (8008464 <update_joy_mode_velocity_control+0x554>)
 800825c:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8008260:	603a      	str	r2, [r7, #0]
 8008262:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8008266:	607b      	str	r3, [r7, #4]
		prismatic_axis.command_vel = PWM_Satuation(
 8008268:	e9d7 0100 	ldrd	r0, r1, [r7]
 800826c:	f7f8 fc2a 	bl	8000ac4 <__aeabi_d2iz>
 8008270:	4603      	mov	r3, r0
 8008272:	4619      	mov	r1, r3
 8008274:	4620      	mov	r0, r4
 8008276:	eeb0 0a48 	vmov.f32	s0, s16
 800827a:	f7f8 ff6b 	bl	8001154 <PWM_Satuation>
 800827e:	ee07 0a90 	vmov	s15, r0
 8008282:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008286:	4b74      	ldr	r3, [pc, #464]	@ (8008458 <update_joy_mode_velocity_control+0x548>)
 8008288:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

		prismatic_axis.vel_error = prismatic_axis.command_vel
 800828c:	4b72      	ldr	r3, [pc, #456]	@ (8008458 <update_joy_mode_velocity_control+0x548>)
 800828e:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
				- prismatic_axis.kalman_velocity;
 8008292:	4b71      	ldr	r3, [pc, #452]	@ (8008458 <update_joy_mode_velocity_control+0x548>)
 8008294:	edd3 7a07 	vldr	s15, [r3, #28]
 8008298:	ee77 7a67 	vsub.f32	s15, s14, s15
		prismatic_axis.vel_error = prismatic_axis.command_vel
 800829c:	4b6e      	ldr	r3, [pc, #440]	@ (8008458 <update_joy_mode_velocity_control+0x548>)
 800829e:	edc3 7a06 	vstr	s15, [r3, #24]
		prismatic_axis.command_pos = PWM_Satuation(
 80082a2:	4b6d      	ldr	r3, [pc, #436]	@ (8008458 <update_joy_mode_velocity_control+0x548>)
 80082a4:	edd3 7a06 	vldr	s15, [r3, #24]
 80082a8:	eeb0 0a67 	vmov.f32	s0, s15
 80082ac:	486e      	ldr	r0, [pc, #440]	@ (8008468 <update_joy_mode_velocity_control+0x558>)
 80082ae:	f7f8 ffb3 	bl	8001218 <PID_CONTROLLER_Compute>
 80082b2:	eeb0 8a40 	vmov.f32	s16, s0
				PID_CONTROLLER_Compute(&prismatic_velocity_pid,
						prismatic_axis.vel_error),
				ZGX45RGG_400RPM_Constant.U_max,
 80082b6:	4b6b      	ldr	r3, [pc, #428]	@ (8008464 <update_joy_mode_velocity_control+0x554>)
 80082b8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		prismatic_axis.command_pos = PWM_Satuation(
 80082bc:	4610      	mov	r0, r2
 80082be:	4619      	mov	r1, r3
 80082c0:	f7f8 fc00 	bl	8000ac4 <__aeabi_d2iz>
 80082c4:	4604      	mov	r4, r0
				-ZGX45RGG_400RPM_Constant.U_max);
 80082c6:	4b67      	ldr	r3, [pc, #412]	@ (8008464 <update_joy_mode_velocity_control+0x554>)
 80082c8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80082cc:	4615      	mov	r5, r2
 80082ce:	f083 4600 	eor.w	r6, r3, #2147483648	@ 0x80000000
		prismatic_axis.command_pos = PWM_Satuation(
 80082d2:	4628      	mov	r0, r5
 80082d4:	4631      	mov	r1, r6
 80082d6:	f7f8 fbf5 	bl	8000ac4 <__aeabi_d2iz>
 80082da:	4603      	mov	r3, r0
 80082dc:	4619      	mov	r1, r3
 80082de:	4620      	mov	r0, r4
 80082e0:	eeb0 0a48 	vmov.f32	s0, s16
 80082e4:	f7f8 ff36 	bl	8001154 <PWM_Satuation>
 80082e8:	ee07 0a90 	vmov	s15, r0
 80082ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80082f0:	4b59      	ldr	r3, [pc, #356]	@ (8008458 <update_joy_mode_velocity_control+0x548>)
 80082f2:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		// No feedforward when holding position
		prismatic_axis.ffd = 0.0f;
 80082f6:	4b58      	ldr	r3, [pc, #352]	@ (8008458 <update_joy_mode_velocity_control+0x548>)
 80082f8:	f04f 0200 	mov.w	r2, #0
 80082fc:	631a      	str	r2, [r3, #48]	@ 0x30
		prismatic_axis.dfd = 0.0f;
 80082fe:	4b56      	ldr	r3, [pc, #344]	@ (8008458 <update_joy_mode_velocity_control+0x548>)
 8008300:	f04f 0200 	mov.w	r2, #0
 8008304:	62da      	str	r2, [r3, #44]	@ 0x2c
	}

	// Update previous state for next iteration
	pris_was_moving = pris_moving;
 8008306:	4a59      	ldr	r2, [pc, #356]	@ (800846c <update_joy_mode_velocity_control+0x55c>)
 8008308:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800830c:	7013      	strb	r3, [r2, #0]

	prismatic_axis.command_pos += prismatic_axis.ffd + prismatic_axis.dfd;
 800830e:	4b52      	ldr	r3, [pc, #328]	@ (8008458 <update_joy_mode_velocity_control+0x548>)
 8008310:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8008314:	4b50      	ldr	r3, [pc, #320]	@ (8008458 <update_joy_mode_velocity_control+0x548>)
 8008316:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 800831a:	4b4f      	ldr	r3, [pc, #316]	@ (8008458 <update_joy_mode_velocity_control+0x548>)
 800831c:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8008320:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008324:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008328:	4b4b      	ldr	r3, [pc, #300]	@ (8008458 <update_joy_mode_velocity_control+0x548>)
 800832a:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 800832e:	4b4a      	ldr	r3, [pc, #296]	@ (8008458 <update_joy_mode_velocity_control+0x548>)
 8008330:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
			ZGX45RGG_400RPM_Constant.U_max, -ZGX45RGG_400RPM_Constant.U_max);
 8008334:	4b4b      	ldr	r3, [pc, #300]	@ (8008464 <update_joy_mode_velocity_control+0x554>)
 8008336:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 800833a:	4610      	mov	r0, r2
 800833c:	4619      	mov	r1, r3
 800833e:	f7f8 fbc1 	bl	8000ac4 <__aeabi_d2iz>
 8008342:	4604      	mov	r4, r0
			ZGX45RGG_400RPM_Constant.U_max, -ZGX45RGG_400RPM_Constant.U_max);
 8008344:	4b47      	ldr	r3, [pc, #284]	@ (8008464 <update_joy_mode_velocity_control+0x554>)
 8008346:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800834a:	4692      	mov	sl, r2
 800834c:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
	prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8008350:	4650      	mov	r0, sl
 8008352:	4659      	mov	r1, fp
 8008354:	f7f8 fbb6 	bl	8000ac4 <__aeabi_d2iz>
 8008358:	4603      	mov	r3, r0
 800835a:	4619      	mov	r1, r3
 800835c:	4620      	mov	r0, r4
 800835e:	eeb0 0a48 	vmov.f32	s0, s16
 8008362:	f7f8 fef7 	bl	8001154 <PWM_Satuation>
 8008366:	ee07 0a90 	vmov	s15, r0
 800836a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800836e:	4b3a      	ldr	r3, [pc, #232]	@ (8008458 <update_joy_mode_velocity_control+0x548>)
 8008370:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	/* REVOLUTE AXIS CONTROL - SIMPLIFIED PURE PWM WITH FFD + DFD */
	float base_pwm = 0.0f;
 8008374:	f04f 0300 	mov.w	r3, #0
 8008378:	61fb      	str	r3, [r7, #28]

	if (rev_moving) {
 800837a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800837e:	2b00      	cmp	r3, #0
 8008380:	d02e      	beq.n	80083e0 <update_joy_mode_velocity_control+0x4d0>
		// Calculate base PWM proportional to joystick input
		// Scale joystick input (-50 to +50) to PWM range
		float joystick_normalized = joystick_y / 50.0f; // -1.0 to +1.0
 8008382:	4b3b      	ldr	r3, [pc, #236]	@ (8008470 <update_joy_mode_velocity_control+0x560>)
 8008384:	ed93 7a00 	vldr	s14, [r3]
 8008388:	eddf 6a3a 	vldr	s13, [pc, #232]	@ 8008474 <update_joy_mode_velocity_control+0x564>
 800838c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008390:	edc7 7a04 	vstr	s15, [r7, #16]
		base_pwm = joystick_normalized
				* (ZGX45RGG_150RPM_Constant.U_max * 0.3f); // Limit to 30% max PWM for safety
 8008394:	6938      	ldr	r0, [r7, #16]
 8008396:	f7f8 f8a3 	bl	80004e0 <__aeabi_f2d>
 800839a:	4604      	mov	r4, r0
 800839c:	460d      	mov	r5, r1
 800839e:	4b36      	ldr	r3, [pc, #216]	@ (8008478 <update_joy_mode_velocity_control+0x568>)
 80083a0:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 80083a4:	a32a      	add	r3, pc, #168	@ (adr r3, 8008450 <update_joy_mode_velocity_control+0x540>)
 80083a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083aa:	f7f8 f8f1 	bl	8000590 <__aeabi_dmul>
 80083ae:	4602      	mov	r2, r0
 80083b0:	460b      	mov	r3, r1
 80083b2:	4620      	mov	r0, r4
 80083b4:	4629      	mov	r1, r5
 80083b6:	f7f8 f8eb 	bl	8000590 <__aeabi_dmul>
 80083ba:	4602      	mov	r2, r0
 80083bc:	460b      	mov	r3, r1
		base_pwm = joystick_normalized
 80083be:	4610      	mov	r0, r2
 80083c0:	4619      	mov	r1, r3
 80083c2:	f7f8 fbc7 	bl	8000b54 <__aeabi_d2f>
 80083c6:	4603      	mov	r3, r0
 80083c8:	61fb      	str	r3, [r7, #28]

		// Add velocity feedforward
		revolute_axis.ffd = REVOLUTE_MOTOR_FFD_Compute(&revolute_motor_ffd,
 80083ca:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 80083ce:	482b      	ldr	r0, [pc, #172]	@ (800847c <update_joy_mode_velocity_control+0x56c>)
 80083d0:	f7f9 f8c0 	bl	8001554 <REVOLUTE_MOTOR_FFD_Compute>
 80083d4:	eef0 7a40 	vmov.f32	s15, s0
 80083d8:	4b29      	ldr	r3, [pc, #164]	@ (8008480 <update_joy_mode_velocity_control+0x570>)
 80083da:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
 80083de:	e006      	b.n	80083ee <update_joy_mode_velocity_control+0x4de>
				rev_command_vel);
	} else {
		// Joystick released - no base PWM, only compensation
		base_pwm = 0.0f;
 80083e0:	f04f 0300 	mov.w	r3, #0
 80083e4:	61fb      	str	r3, [r7, #28]
		revolute_axis.ffd = 0.0f;
 80083e6:	4b26      	ldr	r3, [pc, #152]	@ (8008480 <update_joy_mode_velocity_control+0x570>)
 80083e8:	f04f 0200 	mov.w	r2, #0
 80083ec:	631a      	str	r2, [r3, #48]	@ 0x30
	}

	if (prismatic_encoder.mm < 100.0) {
 80083ee:	4b1b      	ldr	r3, [pc, #108]	@ (800845c <update_joy_mode_velocity_control+0x54c>)
 80083f0:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 80083f4:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8008484 <update_joy_mode_velocity_control+0x574>
 80083f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80083fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008400:	d54a      	bpl.n	8008498 <update_joy_mode_velocity_control+0x588>

		// Always add gravity/disturbance compensation
		revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8008402:	4b21      	ldr	r3, [pc, #132]	@ (8008488 <update_joy_mode_velocity_control+0x578>)
 8008404:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
				revolute_encoder.rads, prismatic_encoder.mm / 1000.0f) * 2.5;
 8008408:	4b14      	ldr	r3, [pc, #80]	@ (800845c <update_joy_mode_velocity_control+0x54c>)
 800840a:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 800840e:	ed9f 6a1f 	vldr	s12, [pc, #124]	@ 800848c <update_joy_mode_velocity_control+0x57c>
 8008412:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8008416:	eef0 0a66 	vmov.f32	s1, s13
 800841a:	eeb0 0a47 	vmov.f32	s0, s14
 800841e:	481c      	ldr	r0, [pc, #112]	@ (8008490 <update_joy_mode_velocity_control+0x580>)
 8008420:	f7f9 f92b 	bl	800167a <REVOLUTE_MOTOR_DFD_Compute>
 8008424:	ee10 3a10 	vmov	r3, s0
 8008428:	4618      	mov	r0, r3
 800842a:	f7f8 f859 	bl	80004e0 <__aeabi_f2d>
				revolute_encoder.rads, prismatic_encoder.mm / 1000.0f) * 2.5;
 800842e:	f04f 0200 	mov.w	r2, #0
 8008432:	4b18      	ldr	r3, [pc, #96]	@ (8008494 <update_joy_mode_velocity_control+0x584>)
 8008434:	f7f8 f8ac 	bl	8000590 <__aeabi_dmul>
 8008438:	4602      	mov	r2, r0
 800843a:	460b      	mov	r3, r1
 800843c:	4610      	mov	r0, r2
 800843e:	4619      	mov	r1, r3
 8008440:	f7f8 fb88 	bl	8000b54 <__aeabi_d2f>
 8008444:	4603      	mov	r3, r0
		revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8008446:	4a0e      	ldr	r2, [pc, #56]	@ (8008480 <update_joy_mode_velocity_control+0x570>)
 8008448:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800844a:	e03b      	b.n	80084c4 <update_joy_mode_velocity_control+0x5b4>
 800844c:	f3af 8000 	nop.w
 8008450:	40000000 	.word	0x40000000
 8008454:	3fd33333 	.word	0x3fd33333
 8008458:	20000704 	.word	0x20000704
 800845c:	20000988 	.word	0x20000988
 8008460:	20000a40 	.word	0x20000a40
 8008464:	20000080 	.word	0x20000080
 8008468:	20000a68 	.word	0x20000a68
 800846c:	200008dc 	.word	0x200008dc
 8008470:	20001e74 	.word	0x20001e74
 8008474:	42480000 	.word	0x42480000
 8008478:	20000000 	.word	0x20000000
 800847c:	20000b14 	.word	0x20000b14
 8008480:	20000748 	.word	0x20000748
 8008484:	42c80000 	.word	0x42c80000
 8008488:	200009e4 	.word	0x200009e4
 800848c:	447a0000 	.word	0x447a0000
 8008490:	20000b18 	.word	0x20000b18
 8008494:	40040000 	.word	0x40040000
	} else {

		// Always add gravity/disturbance compensation
		revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8008498:	4b46      	ldr	r3, [pc, #280]	@ (80085b4 <update_joy_mode_velocity_control+0x6a4>)
 800849a:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
				revolute_encoder.rads, prismatic_encoder.mm / 1000.0f);
 800849e:	4b46      	ldr	r3, [pc, #280]	@ (80085b8 <update_joy_mode_velocity_control+0x6a8>)
 80084a0:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 80084a4:	ed9f 6a45 	vldr	s12, [pc, #276]	@ 80085bc <update_joy_mode_velocity_control+0x6ac>
 80084a8:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80084ac:	eef0 0a66 	vmov.f32	s1, s13
 80084b0:	eeb0 0a47 	vmov.f32	s0, s14
 80084b4:	4842      	ldr	r0, [pc, #264]	@ (80085c0 <update_joy_mode_velocity_control+0x6b0>)
 80084b6:	f7f9 f8e0 	bl	800167a <REVOLUTE_MOTOR_DFD_Compute>
 80084ba:	eef0 7a40 	vmov.f32	s15, s0
 80084be:	4b41      	ldr	r3, [pc, #260]	@ (80085c4 <update_joy_mode_velocity_control+0x6b4>)
 80084c0:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

	// Apply filtering to feedforward terms for stability
	static float ffd_filtered = 0.0f;
	static float dfd_filtered = 0.0f;

	ffd_filtered = 0.8f * ffd_filtered + 0.2f * revolute_axis.ffd;
 80084c4:	4b40      	ldr	r3, [pc, #256]	@ (80085c8 <update_joy_mode_velocity_control+0x6b8>)
 80084c6:	edd3 7a00 	vldr	s15, [r3]
 80084ca:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 80085cc <update_joy_mode_velocity_control+0x6bc>
 80084ce:	ee27 7a87 	vmul.f32	s14, s15, s14
 80084d2:	4b3c      	ldr	r3, [pc, #240]	@ (80085c4 <update_joy_mode_velocity_control+0x6b4>)
 80084d4:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80084d8:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80085d0 <update_joy_mode_velocity_control+0x6c0>
 80084dc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80084e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80084e4:	4b38      	ldr	r3, [pc, #224]	@ (80085c8 <update_joy_mode_velocity_control+0x6b8>)
 80084e6:	edc3 7a00 	vstr	s15, [r3]
	dfd_filtered = 0.2f * dfd_filtered + 0.8f * revolute_axis.dfd;
 80084ea:	4b3a      	ldr	r3, [pc, #232]	@ (80085d4 <update_joy_mode_velocity_control+0x6c4>)
 80084ec:	edd3 7a00 	vldr	s15, [r3]
 80084f0:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 80085d0 <update_joy_mode_velocity_control+0x6c0>
 80084f4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80084f8:	4b32      	ldr	r3, [pc, #200]	@ (80085c4 <update_joy_mode_velocity_control+0x6b4>)
 80084fa:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80084fe:	eddf 6a33 	vldr	s13, [pc, #204]	@ 80085cc <update_joy_mode_velocity_control+0x6bc>
 8008502:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008506:	ee77 7a27 	vadd.f32	s15, s14, s15
 800850a:	4b32      	ldr	r3, [pc, #200]	@ (80085d4 <update_joy_mode_velocity_control+0x6c4>)
 800850c:	edc3 7a00 	vstr	s15, [r3]

	// Combine base PWM with feedforward compensation
	revolute_axis.command_pos = base_pwm
			+ 0.01f * (ffd_filtered + dfd_filtered);
 8008510:	4b2d      	ldr	r3, [pc, #180]	@ (80085c8 <update_joy_mode_velocity_control+0x6b8>)
 8008512:	ed93 7a00 	vldr	s14, [r3]
 8008516:	4b2f      	ldr	r3, [pc, #188]	@ (80085d4 <update_joy_mode_velocity_control+0x6c4>)
 8008518:	edd3 7a00 	vldr	s15, [r3]
 800851c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008520:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 80085d8 <update_joy_mode_velocity_control+0x6c8>
 8008524:	ee27 7a87 	vmul.f32	s14, s15, s14
 8008528:	edd7 7a07 	vldr	s15, [r7, #28]
 800852c:	ee77 7a27 	vadd.f32	s15, s14, s15
	revolute_axis.command_pos = base_pwm
 8008530:	4b24      	ldr	r3, [pc, #144]	@ (80085c4 <update_joy_mode_velocity_control+0x6b4>)
 8008532:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	// Saturate final command
	revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8008536:	4b23      	ldr	r3, [pc, #140]	@ (80085c4 <update_joy_mode_velocity_control+0x6b4>)
 8008538:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
			ZGX45RGG_150RPM_Constant.U_max, -ZGX45RGG_150RPM_Constant.U_max);
 800853c:	4b27      	ldr	r3, [pc, #156]	@ (80085dc <update_joy_mode_velocity_control+0x6cc>)
 800853e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8008542:	4610      	mov	r0, r2
 8008544:	4619      	mov	r1, r3
 8008546:	f7f8 fabd 	bl	8000ac4 <__aeabi_d2iz>
 800854a:	4604      	mov	r4, r0
			ZGX45RGG_150RPM_Constant.U_max, -ZGX45RGG_150RPM_Constant.U_max);
 800854c:	4b23      	ldr	r3, [pc, #140]	@ (80085dc <update_joy_mode_velocity_control+0x6cc>)
 800854e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8008552:	4690      	mov	r8, r2
 8008554:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
	revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8008558:	4640      	mov	r0, r8
 800855a:	4649      	mov	r1, r9
 800855c:	f7f8 fab2 	bl	8000ac4 <__aeabi_d2iz>
 8008560:	4603      	mov	r3, r0
 8008562:	4619      	mov	r1, r3
 8008564:	4620      	mov	r0, r4
 8008566:	eeb0 0a48 	vmov.f32	s0, s16
 800856a:	f7f8 fdf3 	bl	8001154 <PWM_Satuation>
 800856e:	ee07 0a90 	vmov	s15, r0
 8008572:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008576:	4b13      	ldr	r3, [pc, #76]	@ (80085c4 <update_joy_mode_velocity_control+0x6b4>)
 8008578:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	// Apply motor commands
	MDXX_set_range(&prismatic_motor, 2000, prismatic_axis.command_pos);
 800857c:	4b18      	ldr	r3, [pc, #96]	@ (80085e0 <update_joy_mode_velocity_control+0x6d0>)
 800857e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8008582:	eef0 0a67 	vmov.f32	s1, s15
 8008586:	ed9f 0a17 	vldr	s0, [pc, #92]	@ 80085e4 <update_joy_mode_velocity_control+0x6d4>
 800858a:	4817      	ldr	r0, [pc, #92]	@ (80085e8 <update_joy_mode_velocity_control+0x6d8>)
 800858c:	f7f8 fefa 	bl	8001384 <MDXX_set_range>
	MDXX_set_range(&revolute_motor, 2000, revolute_axis.command_pos);
 8008590:	4b0c      	ldr	r3, [pc, #48]	@ (80085c4 <update_joy_mode_velocity_control+0x6b4>)
 8008592:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8008596:	eef0 0a67 	vmov.f32	s1, s15
 800859a:	ed9f 0a12 	vldr	s0, [pc, #72]	@ 80085e4 <update_joy_mode_velocity_control+0x6d4>
 800859e:	4813      	ldr	r0, [pc, #76]	@ (80085ec <update_joy_mode_velocity_control+0x6dc>)
 80085a0:	f7f8 fef0 	bl	8001384 <MDXX_set_range>
}
 80085a4:	bf00      	nop
 80085a6:	3734      	adds	r7, #52	@ 0x34
 80085a8:	46bd      	mov	sp, r7
 80085aa:	ecbd 8b02 	vpop	{d8}
 80085ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085b2:	bf00      	nop
 80085b4:	200009e4 	.word	0x200009e4
 80085b8:	20000988 	.word	0x20000988
 80085bc:	447a0000 	.word	0x447a0000
 80085c0:	20000b18 	.word	0x20000b18
 80085c4:	20000748 	.word	0x20000748
 80085c8:	200008e0 	.word	0x200008e0
 80085cc:	3f4ccccd 	.word	0x3f4ccccd
 80085d0:	3e4ccccd 	.word	0x3e4ccccd
 80085d4:	200008e4 	.word	0x200008e4
 80085d8:	3c23d70a 	.word	0x3c23d70a
 80085dc:	20000000 	.word	0x20000000
 80085e0:	20000704 	.word	0x20000704
 80085e4:	44fa0000 	.word	0x44fa0000
 80085e8:	200008f0 	.word	0x200008f0
 80085ec:	2000093c 	.word	0x2000093c

080085f0 <update_joy_mode_pilot_light>:

void update_joy_mode_pilot_light(void) {
 80085f0:	b580      	push	{r7, lr}
 80085f2:	af00      	add	r7, sp, #0
	if (joy_mode_state == JOY_MODE_POSITION_SAVED) {
 80085f4:	4b14      	ldr	r3, [pc, #80]	@ (8008648 <update_joy_mode_pilot_light+0x58>)
 80085f6:	781b      	ldrb	r3, [r3, #0]
 80085f8:	2b03      	cmp	r3, #3
 80085fa:	d122      	bne.n	8008642 <update_joy_mode_pilot_light+0x52>
		// Toggle pilot light every 1 second when 10 positions are saved
		joy_mode_pilot_timer++;
 80085fc:	4b13      	ldr	r3, [pc, #76]	@ (800864c <update_joy_mode_pilot_light+0x5c>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	3301      	adds	r3, #1
 8008602:	4a12      	ldr	r2, [pc, #72]	@ (800864c <update_joy_mode_pilot_light+0x5c>)
 8008604:	6013      	str	r3, [r2, #0]
		if (joy_mode_pilot_timer >= JOY_MODE_PILOT_TOGGLE_PERIOD) {
 8008606:	4b11      	ldr	r3, [pc, #68]	@ (800864c <update_joy_mode_pilot_light+0x5c>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800860e:	d318      	bcc.n	8008642 <update_joy_mode_pilot_light+0x52>
			HAL_GPIO_TogglePin(PILOT_GPIO_Port, PILOT_Pin);
 8008610:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8008614:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8008618:	f004 ff5a 	bl	800d4d0 <HAL_GPIO_TogglePin>
			joy_mode_pilot_state = !joy_mode_pilot_state;
 800861c:	4b0c      	ldr	r3, [pc, #48]	@ (8008650 <update_joy_mode_pilot_light+0x60>)
 800861e:	781b      	ldrb	r3, [r3, #0]
 8008620:	b2db      	uxtb	r3, r3
 8008622:	2b00      	cmp	r3, #0
 8008624:	bf14      	ite	ne
 8008626:	2301      	movne	r3, #1
 8008628:	2300      	moveq	r3, #0
 800862a:	b2db      	uxtb	r3, r3
 800862c:	f083 0301 	eor.w	r3, r3, #1
 8008630:	b2db      	uxtb	r3, r3
 8008632:	f003 0301 	and.w	r3, r3, #1
 8008636:	b2da      	uxtb	r2, r3
 8008638:	4b05      	ldr	r3, [pc, #20]	@ (8008650 <update_joy_mode_pilot_light+0x60>)
 800863a:	701a      	strb	r2, [r3, #0]
			joy_mode_pilot_timer = 0;
 800863c:	4b03      	ldr	r3, [pc, #12]	@ (800864c <update_joy_mode_pilot_light+0x5c>)
 800863e:	2200      	movs	r2, #0
 8008640:	601a      	str	r2, [r3, #0]
		}
	}
}
 8008642:	bf00      	nop
 8008644:	bd80      	pop	{r7, pc}
 8008646:	bf00      	nop
 8008648:	20000808 	.word	0x20000808
 800864c:	20000860 	.word	0x20000860
 8008650:	20000864 	.word	0x20000864

08008654 <update_joy_mode>:

void update_joy_mode(void) {
 8008654:	b580      	push	{r7, lr}
 8008656:	b084      	sub	sp, #16
 8008658:	af00      	add	r7, sp, #0
	if (!joy_mode_active) {
 800865a:	4b46      	ldr	r3, [pc, #280]	@ (8008774 <update_joy_mode+0x120>)
 800865c:	781b      	ldrb	r3, [r3, #0]
 800865e:	f083 0301 	eor.w	r3, r3, #1
 8008662:	b2db      	uxtb	r3, r3
 8008664:	2b00      	cmp	r3, #0
 8008666:	d17e      	bne.n	8008766 <update_joy_mode+0x112>
		return;
	}

	// ALWAYS update position display values when in joy mode
	normalized_position = normalize_angle(revolute_encoder.rads);
 8008668:	4b43      	ldr	r3, [pc, #268]	@ (8008778 <update_joy_mode+0x124>)
 800866a:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 800866e:	eeb0 0a67 	vmov.f32	s0, s15
 8008672:	f7fd fd7b 	bl	800616c <normalize_angle>
 8008676:	eef0 7a40 	vmov.f32	s15, s0
 800867a:	4b40      	ldr	r3, [pc, #256]	@ (800877c <update_joy_mode+0x128>)
 800867c:	edc3 7a00 	vstr	s15, [r3]
	prismatic_axis.mm = prismatic_encoder.mm;
 8008680:	4b3f      	ldr	r3, [pc, #252]	@ (8008780 <update_joy_mode+0x12c>)
 8008682:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008684:	4a3f      	ldr	r2, [pc, #252]	@ (8008784 <update_joy_mode+0x130>)
 8008686:	6393      	str	r3, [r2, #56]	@ 0x38
	revolute_axis.deg = UnitConverter_angle(&converter_system,
 8008688:	4b3c      	ldr	r3, [pc, #240]	@ (800877c <update_joy_mode+0x128>)
 800868a:	edd3 7a00 	vldr	s15, [r3]
 800868e:	220e      	movs	r2, #14
 8008690:	210f      	movs	r1, #15
 8008692:	eeb0 0a67 	vmov.f32	s0, s15
 8008696:	483c      	ldr	r0, [pc, #240]	@ (8008788 <update_joy_mode+0x134>)
 8008698:	f7fc fa6e 	bl	8004b78 <UnitConverter_angle>
 800869c:	eef0 7a40 	vmov.f32	s15, s0
 80086a0:	4b3a      	ldr	r3, [pc, #232]	@ (800878c <update_joy_mode+0x138>)
 80086a2:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
			normalized_position, UNIT_RADIAN, UNIT_DEGREE);

	switch (joy_mode_state) {
 80086a6:	4b3a      	ldr	r3, [pc, #232]	@ (8008790 <update_joy_mode+0x13c>)
 80086a8:	781b      	ldrb	r3, [r3, #0]
 80086aa:	3b01      	subs	r3, #1
 80086ac:	2b03      	cmp	r3, #3
 80086ae:	d85d      	bhi.n	800876c <update_joy_mode+0x118>
 80086b0:	a201      	add	r2, pc, #4	@ (adr r2, 80086b8 <update_joy_mode+0x64>)
 80086b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086b6:	bf00      	nop
 80086b8:	080086c9 	.word	0x080086c9
 80086bc:	080086cf 	.word	0x080086cf
 80086c0:	080086d5 	.word	0x080086d5
 80086c4:	080086e3 	.word	0x080086e3
	case JOY_MODE_INITIAL_CONTROL:
		// Initial manual joystick control - no position saving yet
		update_joy_mode_velocity_control();
 80086c8:	f7ff fc22 	bl	8007f10 <update_joy_mode_velocity_control>
		break;
 80086cc:	e04e      	b.n	800876c <update_joy_mode+0x118>

	case JOY_MODE_MANUAL_CONTROL:
		// Manual joystick control with position saving enabled
		update_joy_mode_velocity_control();
 80086ce:	f7ff fc1f 	bl	8007f10 <update_joy_mode_velocity_control>
		break;
 80086d2:	e04b      	b.n	800876c <update_joy_mode+0x118>

	case JOY_MODE_POSITION_SAVED:
		revolute_axis.position = revolute_encoder.rads;
 80086d4:	4b28      	ldr	r3, [pc, #160]	@ (8008778 <update_joy_mode+0x124>)
 80086d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086d8:	4a2c      	ldr	r2, [pc, #176]	@ (800878c <update_joy_mode+0x138>)
 80086da:	6013      	str	r3, [r2, #0]
		// 10 positions saved, pilot light toggling, waiting for B2 to start playback
		update_joy_mode_pilot_light();
 80086dc:	f7ff ff88 	bl	80085f0 <update_joy_mode_pilot_light>
		break;
 80086e0:	e044      	b.n	800876c <update_joy_mode+0x118>

	case JOY_MODE_PLAYBACK:
		// Playing back saved positions - let update_control_loops handle trajectory

		// Check if current trajectory is complete
		if (motion_sequence_state == MOTION_IDLE) {
 80086e2:	4b2c      	ldr	r3, [pc, #176]	@ (8008794 <update_joy_mode+0x140>)
 80086e4:	781b      	ldrb	r3, [r3, #0]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d13f      	bne.n	800876a <update_joy_mode+0x116>
			// Current trajectory finished, wait before starting next
			joy_mode_playback_timer++;
 80086ea:	4b2b      	ldr	r3, [pc, #172]	@ (8008798 <update_joy_mode+0x144>)
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	3301      	adds	r3, #1
 80086f0:	4a29      	ldr	r2, [pc, #164]	@ (8008798 <update_joy_mode+0x144>)
 80086f2:	6013      	str	r3, [r2, #0]

			if (joy_mode_playback_timer >= JOY_MODE_PLAYBACK_DELAY) {
 80086f4:	4b28      	ldr	r3, [pc, #160]	@ (8008798 <update_joy_mode+0x144>)
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80086fc:	d335      	bcc.n	800876a <update_joy_mode+0x116>
				playback_position_index++;
 80086fe:	4b27      	ldr	r3, [pc, #156]	@ (800879c <update_joy_mode+0x148>)
 8008700:	781b      	ldrb	r3, [r3, #0]
 8008702:	3301      	adds	r3, #1
 8008704:	b2da      	uxtb	r2, r3
 8008706:	4b25      	ldr	r3, [pc, #148]	@ (800879c <update_joy_mode+0x148>)
 8008708:	701a      	strb	r2, [r3, #0]

				if (playback_position_index < saved_position_count) {
 800870a:	4b24      	ldr	r3, [pc, #144]	@ (800879c <update_joy_mode+0x148>)
 800870c:	781a      	ldrb	r2, [r3, #0]
 800870e:	4b24      	ldr	r3, [pc, #144]	@ (80087a0 <update_joy_mode+0x14c>)
 8008710:	781b      	ldrb	r3, [r3, #0]
 8008712:	429a      	cmp	r2, r3
 8008714:	d224      	bcs.n	8008760 <update_joy_mode+0x10c>
					// Start next trajectory
					float target_pris =
							saved_positions[playback_position_index].prismatic_pos;
 8008716:	4b21      	ldr	r3, [pc, #132]	@ (800879c <update_joy_mode+0x148>)
 8008718:	781b      	ldrb	r3, [r3, #0]
					float target_pris =
 800871a:	4a22      	ldr	r2, [pc, #136]	@ (80087a4 <update_joy_mode+0x150>)
 800871c:	00db      	lsls	r3, r3, #3
 800871e:	4413      	add	r3, r2
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	60fb      	str	r3, [r7, #12]
					float target_rev_rad =
							saved_positions[playback_position_index].revolute_pos;
 8008724:	4b1d      	ldr	r3, [pc, #116]	@ (800879c <update_joy_mode+0x148>)
 8008726:	781b      	ldrb	r3, [r3, #0]
					float target_rev_rad =
 8008728:	4a1e      	ldr	r2, [pc, #120]	@ (80087a4 <update_joy_mode+0x150>)
 800872a:	00db      	lsls	r3, r3, #3
 800872c:	4413      	add	r3, r2
 800872e:	3304      	adds	r3, #4
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	60bb      	str	r3, [r7, #8]
					float target_rev_deg = target_rev_rad * 180.0f / PI;
 8008734:	edd7 7a02 	vldr	s15, [r7, #8]
 8008738:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 80087a8 <update_joy_mode+0x154>
 800873c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8008740:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 80087ac <update_joy_mode+0x158>
 8008744:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008748:	edc7 7a01 	vstr	s15, [r7, #4]

					start_combined_trajectory(target_pris, target_rev_deg);
 800874c:	edd7 0a01 	vldr	s1, [r7, #4]
 8008750:	ed97 0a03 	vldr	s0, [r7, #12]
 8008754:	f7fd fe7e 	bl	8006454 <start_combined_trajectory>
					joy_mode_playback_timer = 0;
 8008758:	4b0f      	ldr	r3, [pc, #60]	@ (8008798 <update_joy_mode+0x144>)
 800875a:	2200      	movs	r2, #0
 800875c:	601a      	str	r2, [r3, #0]
			}
		}

		// Let update_control_loops handle the actual motion control
		// No need to handle motion states here anymore
		break;
 800875e:	e004      	b.n	800876a <update_joy_mode+0x116>
					exit_joy_mode();
 8008760:	f7ff fa1e 	bl	8007ba0 <exit_joy_mode>
		break;
 8008764:	e001      	b.n	800876a <update_joy_mode+0x116>
		return;
 8008766:	bf00      	nop
 8008768:	e000      	b.n	800876c <update_joy_mode+0x118>
		break;
 800876a:	bf00      	nop

	}
}
 800876c:	3710      	adds	r7, #16
 800876e:	46bd      	mov	sp, r7
 8008770:	bd80      	pop	{r7, pc}
 8008772:	bf00      	nop
 8008774:	20000809 	.word	0x20000809
 8008778:	200009e4 	.word	0x200009e4
 800877c:	200007fc 	.word	0x200007fc
 8008780:	20000988 	.word	0x20000988
 8008784:	20000704 	.word	0x20000704
 8008788:	20000d7c 	.word	0x20000d7c
 800878c:	20000748 	.word	0x20000748
 8008790:	20000808 	.word	0x20000808
 8008794:	2000078c 	.word	0x2000078c
 8008798:	20000868 	.word	0x20000868
 800879c:	2000085d 	.word	0x2000085d
 80087a0:	2000085c 	.word	0x2000085c
 80087a4:	2000080c 	.word	0x2000080c
 80087a8:	43340000 	.word	0x43340000
 80087ac:	40490fdb 	.word	0x40490fdb

080087b0 <handle_b2_button_polling>:

void handle_b2_button_polling(void) {
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b082      	sub	sp, #8
 80087b4:	af00      	add	r7, sp, #0
	// Read current B2 button state (assuming active low like other buttons)
	bool b2_current_state = !HAL_GPIO_ReadPin(J2_GPIO_Port, J2_Pin);
 80087b6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80087ba:	4838      	ldr	r0, [pc, #224]	@ (800889c <handle_b2_button_polling+0xec>)
 80087bc:	f004 fe58 	bl	800d470 <HAL_GPIO_ReadPin>
 80087c0:	4603      	mov	r3, r0
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	bf0c      	ite	eq
 80087c6:	2301      	moveq	r3, #1
 80087c8:	2300      	movne	r3, #0
 80087ca:	71fb      	strb	r3, [r7, #7]

//	b2S[0] = !HAL_GPIO_ReadPin(J2_GPIO_Port, J2_Pin);
	static uint32_t last_press_time = 0;
	static uint32_t press_counter = 0;
	const uint32_t DEBOUNCE_TIME = 200; // 200ms debounce time
 80087cc:	23c8      	movs	r3, #200	@ 0xc8
 80087ce:	603b      	str	r3, [r7, #0]

	press_counter++; // Increment every timer tick (assuming 1ms timer)
 80087d0:	4b33      	ldr	r3, [pc, #204]	@ (80088a0 <handle_b2_button_polling+0xf0>)
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	3301      	adds	r3, #1
 80087d6:	4a32      	ldr	r2, [pc, #200]	@ (80088a0 <handle_b2_button_polling+0xf0>)
 80087d8:	6013      	str	r3, [r2, #0]

//	 Edge detection with debouncing
	if (b2_current_state && !joy_mode_b2_last_state) {
 80087da:	79fb      	ldrb	r3, [r7, #7]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d04d      	beq.n	800887c <handle_b2_button_polling+0xcc>
 80087e0:	4b30      	ldr	r3, [pc, #192]	@ (80088a4 <handle_b2_button_polling+0xf4>)
 80087e2:	781b      	ldrb	r3, [r3, #0]
 80087e4:	f083 0301 	eor.w	r3, r3, #1
 80087e8:	b2db      	uxtb	r3, r3
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d046      	beq.n	800887c <handle_b2_button_polling+0xcc>
//	 Button just pressed - check if enough time has passed since last press
		if ((press_counter - last_press_time) >= DEBOUNCE_TIME) {
 80087ee:	4b2c      	ldr	r3, [pc, #176]	@ (80088a0 <handle_b2_button_polling+0xf0>)
 80087f0:	681a      	ldr	r2, [r3, #0]
 80087f2:	4b2d      	ldr	r3, [pc, #180]	@ (80088a8 <handle_b2_button_polling+0xf8>)
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	1ad3      	subs	r3, r2, r3
 80087f8:	683a      	ldr	r2, [r7, #0]
 80087fa:	429a      	cmp	r2, r3
 80087fc:	d83e      	bhi.n	800887c <handle_b2_button_polling+0xcc>
			// Button press is valid - trigger action
			joy_mode_b2_pressed = true;
 80087fe:	4b2b      	ldr	r3, [pc, #172]	@ (80088ac <handle_b2_button_polling+0xfc>)
 8008800:	2201      	movs	r2, #1
 8008802:	701a      	strb	r2, [r3, #0]
			last_press_time = press_counter;
 8008804:	4b26      	ldr	r3, [pc, #152]	@ (80088a0 <handle_b2_button_polling+0xf0>)
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	4a27      	ldr	r2, [pc, #156]	@ (80088a8 <handle_b2_button_polling+0xf8>)
 800880a:	6013      	str	r3, [r2, #0]

//	if (b2S[0] != b2S[1] && b2S[0] == 1) {
			// Handle B2 button press logic
			if (!is_emergency_active() && !homing_active
 800880c:	f7ff f958 	bl	8007ac0 <is_emergency_active>
 8008810:	4603      	mov	r3, r0
 8008812:	f083 0301 	eor.w	r3, r3, #1
 8008816:	b2db      	uxtb	r3, r3
 8008818:	2b00      	cmp	r3, #0
 800881a:	d02f      	beq.n	800887c <handle_b2_button_polling+0xcc>
 800881c:	4b24      	ldr	r3, [pc, #144]	@ (80088b0 <handle_b2_button_polling+0x100>)
 800881e:	781b      	ldrb	r3, [r3, #0]
 8008820:	f083 0301 	eor.w	r3, r3, #1
 8008824:	b2db      	uxtb	r3, r3
 8008826:	2b00      	cmp	r3, #0
 8008828:	d028      	beq.n	800887c <handle_b2_button_polling+0xcc>
					&& motion_sequence_state == MOTION_IDLE) {
 800882a:	4b22      	ldr	r3, [pc, #136]	@ (80088b4 <handle_b2_button_polling+0x104>)
 800882c:	781b      	ldrb	r3, [r3, #0]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d124      	bne.n	800887c <handle_b2_button_polling+0xcc>
				if (!joy_mode_active) {
 8008832:	4b21      	ldr	r3, [pc, #132]	@ (80088b8 <handle_b2_button_polling+0x108>)
 8008834:	781b      	ldrb	r3, [r3, #0]
 8008836:	f083 0301 	eor.w	r3, r3, #1
 800883a:	b2db      	uxtb	r3, r3
 800883c:	2b00      	cmp	r3, #0
 800883e:	d002      	beq.n	8008846 <handle_b2_button_polling+0x96>
					// Enter joy mode (starts in JOY_MODE_INITIAL_CONTROL)
					enter_joy_mode();
 8008840:	f7ff f94e 	bl	8007ae0 <enter_joy_mode>
 8008844:	e01a      	b.n	800887c <handle_b2_button_polling+0xcc>
				} else {
					// Joy mode is active, handle button press based on current state
					if (joy_mode_state == JOY_MODE_INITIAL_CONTROL) {
 8008846:	4b1d      	ldr	r3, [pc, #116]	@ (80088bc <handle_b2_button_polling+0x10c>)
 8008848:	781b      	ldrb	r3, [r3, #0]
 800884a:	2b01      	cmp	r3, #1
 800884c:	d103      	bne.n	8008856 <handle_b2_button_polling+0xa6>
						// First B2 press in joy mode - start position saving mode
						joy_mode_state = JOY_MODE_MANUAL_CONTROL;
 800884e:	4b1b      	ldr	r3, [pc, #108]	@ (80088bc <handle_b2_button_polling+0x10c>)
 8008850:	2202      	movs	r2, #2
 8008852:	701a      	strb	r2, [r3, #0]
 8008854:	e012      	b.n	800887c <handle_b2_button_polling+0xcc>
					} else if (joy_mode_state == JOY_MODE_MANUAL_CONTROL) {
 8008856:	4b19      	ldr	r3, [pc, #100]	@ (80088bc <handle_b2_button_polling+0x10c>)
 8008858:	781b      	ldrb	r3, [r3, #0]
 800885a:	2b02      	cmp	r3, #2
 800885c:	d108      	bne.n	8008870 <handle_b2_button_polling+0xc0>
						HAL_GPIO_TogglePin(PILOT_GPIO_Port, PILOT_Pin);
 800885e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8008862:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8008866:	f004 fe33 	bl	800d4d0 <HAL_GPIO_TogglePin>
						save_current_position();
 800886a:	f7ff fa0d 	bl	8007c88 <save_current_position>
 800886e:	e005      	b.n	800887c <handle_b2_button_polling+0xcc>

						// Save current position
					} else if (joy_mode_state == JOY_MODE_POSITION_SAVED) {
 8008870:	4b12      	ldr	r3, [pc, #72]	@ (80088bc <handle_b2_button_polling+0x10c>)
 8008872:	781b      	ldrb	r3, [r3, #0]
 8008874:	2b03      	cmp	r3, #3
 8008876:	d101      	bne.n	800887c <handle_b2_button_polling+0xcc>
						start_position_playback();
 8008878:	f7ff fabe 	bl	8007df8 <start_position_playback>
//	b2S[1] = b2S[0];
		// If not enough time has passed, ignore this button press
	}

// Update last state
	joy_mode_b2_last_state = b2_current_state;
 800887c:	4a09      	ldr	r2, [pc, #36]	@ (80088a4 <handle_b2_button_polling+0xf4>)
 800887e:	79fb      	ldrb	r3, [r7, #7]
 8008880:	7013      	strb	r3, [r2, #0]
//
//// Reset pressed flag when button is released
	if (!b2_current_state) {
 8008882:	79fb      	ldrb	r3, [r7, #7]
 8008884:	f083 0301 	eor.w	r3, r3, #1
 8008888:	b2db      	uxtb	r3, r3
 800888a:	2b00      	cmp	r3, #0
 800888c:	d002      	beq.n	8008894 <handle_b2_button_polling+0xe4>
		joy_mode_b2_pressed = false;
 800888e:	4b07      	ldr	r3, [pc, #28]	@ (80088ac <handle_b2_button_polling+0xfc>)
 8008890:	2200      	movs	r2, #0
 8008892:	701a      	strb	r2, [r3, #0]
	}
}
 8008894:	bf00      	nop
 8008896:	3708      	adds	r7, #8
 8008898:	46bd      	mov	sp, r7
 800889a:	bd80      	pop	{r7, pc}
 800889c:	48000800 	.word	0x48000800
 80088a0:	200008e8 	.word	0x200008e8
 80088a4:	2000086d 	.word	0x2000086d
 80088a8:	200008ec 	.word	0x200008ec
 80088ac:	2000086c 	.word	0x2000086c
 80088b0:	200007eb 	.word	0x200007eb
 80088b4:	2000078c 	.word	0x2000078c
 80088b8:	20000809 	.word	0x20000809
 80088bc:	20000808 	.word	0x20000808

080088c0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b084      	sub	sp, #16
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	4603      	mov	r3, r0
 80088c8:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == prox_Pin) {
 80088ca:	88fb      	ldrh	r3, [r7, #6]
 80088cc:	2b20      	cmp	r3, #32
 80088ce:	d105      	bne.n	80088dc <HAL_GPIO_EXTI_Callback+0x1c>
		prox_count++;
 80088d0:	4b76      	ldr	r3, [pc, #472]	@ (8008aac <HAL_GPIO_EXTI_Callback+0x1ec>)
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	3301      	adds	r3, #1
 80088d6:	4a75      	ldr	r2, [pc, #468]	@ (8008aac <HAL_GPIO_EXTI_Callback+0x1ec>)
 80088d8:	6013      	str	r3, [r2, #0]
		return;
 80088da:	e0e3      	b.n	8008aa4 <HAL_GPIO_EXTI_Callback+0x1e4>
	}

	if (GPIO_Pin == upperphoto_Pin) {
 80088dc:	88fb      	ldrh	r3, [r7, #6]
 80088de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80088e2:	d103      	bne.n	80088ec <HAL_GPIO_EXTI_Callback+0x2c>
		up_photo = true;
 80088e4:	4b72      	ldr	r3, [pc, #456]	@ (8008ab0 <HAL_GPIO_EXTI_Callback+0x1f0>)
 80088e6:	2201      	movs	r2, #1
 80088e8:	701a      	strb	r2, [r3, #0]
		return;
 80088ea:	e0db      	b.n	8008aa4 <HAL_GPIO_EXTI_Callback+0x1e4>
	}

	if (GPIO_Pin == LOWER_PHOTO_Pin) {
 80088ec:	88fb      	ldrh	r3, [r7, #6]
 80088ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80088f2:	d103      	bne.n	80088fc <HAL_GPIO_EXTI_Callback+0x3c>
		low_photo = true;
 80088f4:	4b6f      	ldr	r3, [pc, #444]	@ (8008ab4 <HAL_GPIO_EXTI_Callback+0x1f4>)
 80088f6:	2201      	movs	r2, #1
 80088f8:	701a      	strb	r2, [r3, #0]
		return;
 80088fa:	e0d3      	b.n	8008aa4 <HAL_GPIO_EXTI_Callback+0x1e4>
	}

	if (GPIO_Pin == EMER_Pin) {
 80088fc:	88fb      	ldrh	r3, [r7, #6]
 80088fe:	2b10      	cmp	r3, #16
 8008900:	d102      	bne.n	8008908 <HAL_GPIO_EXTI_Callback+0x48>
		trigger_hardware_emergency();
 8008902:	f7fe ff53 	bl	80077ac <trigger_hardware_emergency>
		return;
 8008906:	e0cd      	b.n	8008aa4 <HAL_GPIO_EXTI_Callback+0x1e4>
	}

	if (GPIO_Pin == J1_Pin) {
 8008908:	88fb      	ldrh	r3, [r7, #6]
 800890a:	2b80      	cmp	r3, #128	@ 0x80
 800890c:	d174      	bne.n	80089f8 <HAL_GPIO_EXTI_Callback+0x138>
		uint32_t current_time = HAL_GetTick();
 800890e:	f002 fb45 	bl	800af9c <HAL_GetTick>
 8008912:	60f8      	str	r0, [r7, #12]

		if ((current_time - j1_interrupt_last_time)
 8008914:	4b68      	ldr	r3, [pc, #416]	@ (8008ab8 <HAL_GPIO_EXTI_Callback+0x1f8>)
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	68fa      	ldr	r2, [r7, #12]
 800891a:	1ad3      	subs	r3, r2, r3
				< J1_INTERRUPT_DEBOUNCE_MS) {
 800891c:	2296      	movs	r2, #150	@ 0x96
		if ((current_time - j1_interrupt_last_time)
 800891e:	4293      	cmp	r3, r2
 8008920:	f0c0 80bb 	bcc.w	8008a9a <HAL_GPIO_EXTI_Callback+0x1da>
			return;
		}
		j1_interrupt_last_time = current_time;
 8008924:	4a64      	ldr	r2, [pc, #400]	@ (8008ab8 <HAL_GPIO_EXTI_Callback+0x1f8>)
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	6013      	str	r3, [r2, #0]

		if (!is_emergency_active() && !homing_active && !joy_mode_active
 800892a:	f7ff f8c9 	bl	8007ac0 <is_emergency_active>
 800892e:	4603      	mov	r3, r0
 8008930:	f083 0301 	eor.w	r3, r3, #1
 8008934:	b2db      	uxtb	r3, r3
 8008936:	2b00      	cmp	r3, #0
 8008938:	d05e      	beq.n	80089f8 <HAL_GPIO_EXTI_Callback+0x138>
 800893a:	4b60      	ldr	r3, [pc, #384]	@ (8008abc <HAL_GPIO_EXTI_Callback+0x1fc>)
 800893c:	781b      	ldrb	r3, [r3, #0]
 800893e:	f083 0301 	eor.w	r3, r3, #1
 8008942:	b2db      	uxtb	r3, r3
 8008944:	2b00      	cmp	r3, #0
 8008946:	d057      	beq.n	80089f8 <HAL_GPIO_EXTI_Callback+0x138>
 8008948:	4b5d      	ldr	r3, [pc, #372]	@ (8008ac0 <HAL_GPIO_EXTI_Callback+0x200>)
 800894a:	781b      	ldrb	r3, [r3, #0]
 800894c:	f083 0301 	eor.w	r3, r3, #1
 8008950:	b2db      	uxtb	r3, r3
 8008952:	2b00      	cmp	r3, #0
 8008954:	d050      	beq.n	80089f8 <HAL_GPIO_EXTI_Callback+0x138>
				&& !first_startup && !word_drawing_active
 8008956:	4b5b      	ldr	r3, [pc, #364]	@ (8008ac4 <HAL_GPIO_EXTI_Callback+0x204>)
 8008958:	781b      	ldrb	r3, [r3, #0]
 800895a:	f083 0301 	eor.w	r3, r3, #1
 800895e:	b2db      	uxtb	r3, r3
 8008960:	2b00      	cmp	r3, #0
 8008962:	d049      	beq.n	80089f8 <HAL_GPIO_EXTI_Callback+0x138>
 8008964:	4b58      	ldr	r3, [pc, #352]	@ (8008ac8 <HAL_GPIO_EXTI_Callback+0x208>)
 8008966:	781b      	ldrb	r3, [r3, #0]
 8008968:	f083 0301 	eor.w	r3, r3, #1
 800896c:	b2db      	uxtb	r3, r3
 800896e:	2b00      	cmp	r3, #0
 8008970:	d042      	beq.n	80089f8 <HAL_GPIO_EXTI_Callback+0x138>
				&& !current_drawing_sequence.sequence_active) {
 8008972:	4b56      	ldr	r3, [pc, #344]	@ (8008acc <HAL_GPIO_EXTI_Callback+0x20c>)
 8008974:	799b      	ldrb	r3, [r3, #6]
 8008976:	f083 0301 	eor.w	r3, r3, #1
 800897a:	b2db      	uxtb	r3, r3
 800897c:	2b00      	cmp	r3, #0
 800897e:	d03b      	beq.n	80089f8 <HAL_GPIO_EXTI_Callback+0x138>

			if (!j1_active) {
 8008980:	4b53      	ldr	r3, [pc, #332]	@ (8008ad0 <HAL_GPIO_EXTI_Callback+0x210>)
 8008982:	781b      	ldrb	r3, [r3, #0]
 8008984:	f083 0301 	eor.w	r3, r3, #1
 8008988:	b2db      	uxtb	r3, r3
 800898a:	2b00      	cmp	r3, #0
 800898c:	d023      	beq.n	80089d6 <HAL_GPIO_EXTI_Callback+0x116>
				// Start 100 point sequence
				j1_active = true;
 800898e:	4b50      	ldr	r3, [pc, #320]	@ (8008ad0 <HAL_GPIO_EXTI_Callback+0x210>)
 8008990:	2201      	movs	r2, #1
 8008992:	701a      	strb	r2, [r3, #0]
				j1_in_progress = false;  // Will be set true when motion is idle
 8008994:	4b4f      	ldr	r3, [pc, #316]	@ (8008ad4 <HAL_GPIO_EXTI_Callback+0x214>)
 8008996:	2200      	movs	r2, #0
 8008998:	701a      	strb	r2, [r3, #0]
				j1_cycle_count = 0;
 800899a:	4b4f      	ldr	r3, [pc, #316]	@ (8008ad8 <HAL_GPIO_EXTI_Callback+0x218>)
 800899c:	2200      	movs	r2, #0
 800899e:	701a      	strb	r2, [r3, #0]
				j1_going_to_target = true;
 80089a0:	4b4e      	ldr	r3, [pc, #312]	@ (8008adc <HAL_GPIO_EXTI_Callback+0x21c>)
 80089a2:	2201      	movs	r2, #1
 80089a4:	701a      	strb	r2, [r3, #0]
				j1_pen_down_complete = false;
 80089a6:	4b4e      	ldr	r3, [pc, #312]	@ (8008ae0 <HAL_GPIO_EXTI_Callback+0x220>)
 80089a8:	2200      	movs	r2, #0
 80089aa:	701a      	strb	r2, [r3, #0]
				j1_pen_delay = 0;  // Reset delay counter
 80089ac:	4b4d      	ldr	r3, [pc, #308]	@ (8008ae4 <HAL_GPIO_EXTI_Callback+0x224>)
 80089ae:	2200      	movs	r2, #0
 80089b0:	601a      	str	r2, [r3, #0]

				// Only start if motion is idle
				if (motion_sequence_state == MOTION_IDLE) {
 80089b2:	4b4d      	ldr	r3, [pc, #308]	@ (8008ae8 <HAL_GPIO_EXTI_Callback+0x228>)
 80089b4:	781b      	ldrb	r3, [r3, #0]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d11e      	bne.n	80089f8 <HAL_GPIO_EXTI_Callback+0x138>
					j1_in_progress = true;
 80089ba:	4b46      	ldr	r3, [pc, #280]	@ (8008ad4 <HAL_GPIO_EXTI_Callback+0x214>)
 80089bc:	2201      	movs	r2, #1
 80089be:	701a      	strb	r2, [r3, #0]
					start_combined_trajectory(J1_TARGET_PRIS, J1_TARGET_REV);
 80089c0:	eddf 7a4a 	vldr	s15, [pc, #296]	@ 8008aec <HAL_GPIO_EXTI_Callback+0x22c>
 80089c4:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 8008af0 <HAL_GPIO_EXTI_Callback+0x230>
 80089c8:	eef0 0a47 	vmov.f32	s1, s14
 80089cc:	eeb0 0a67 	vmov.f32	s0, s15
 80089d0:	f7fd fd40 	bl	8006454 <start_combined_trajectory>
 80089d4:	e010      	b.n	80089f8 <HAL_GPIO_EXTI_Callback+0x138>
				}
			} else {
				// Stop 100 point sequence - full cleanup
				j1_active = false;
 80089d6:	4b3e      	ldr	r3, [pc, #248]	@ (8008ad0 <HAL_GPIO_EXTI_Callback+0x210>)
 80089d8:	2200      	movs	r2, #0
 80089da:	701a      	strb	r2, [r3, #0]
				j1_in_progress = false;
 80089dc:	4b3d      	ldr	r3, [pc, #244]	@ (8008ad4 <HAL_GPIO_EXTI_Callback+0x214>)
 80089de:	2200      	movs	r2, #0
 80089e0:	701a      	strb	r2, [r3, #0]
				j1_cycle_count = 0;
 80089e2:	4b3d      	ldr	r3, [pc, #244]	@ (8008ad8 <HAL_GPIO_EXTI_Callback+0x218>)
 80089e4:	2200      	movs	r2, #0
 80089e6:	701a      	strb	r2, [r3, #0]
				j1_pen_down_complete = false;
 80089e8:	4b3d      	ldr	r3, [pc, #244]	@ (8008ae0 <HAL_GPIO_EXTI_Callback+0x220>)
 80089ea:	2200      	movs	r2, #0
 80089ec:	701a      	strb	r2, [r3, #0]
				j1_pen_delay = 0;
 80089ee:	4b3d      	ldr	r3, [pc, #244]	@ (8008ae4 <HAL_GPIO_EXTI_Callback+0x224>)
 80089f0:	2200      	movs	r2, #0
 80089f2:	601a      	str	r2, [r3, #0]
				plotter_pen_up();
 80089f4:	f001 f9d2 	bl	8009d9c <plotter_pen_up>
			}
		}
	}
// J2 is NOT handled here anymore - it's polled in the main loop

	if (GPIO_Pin == J3_Pin) {
 80089f8:	88fb      	ldrh	r3, [r7, #6]
 80089fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80089fe:	d139      	bne.n	8008a74 <HAL_GPIO_EXTI_Callback+0x1b4>
		uint32_t current_time = HAL_GetTick();
 8008a00:	f002 facc 	bl	800af9c <HAL_GetTick>
 8008a04:	60b8      	str	r0, [r7, #8]

		// Reset counter if timeout exceeded
		if ((current_time - j3_last_press_time) > J3_PRESS_TIMEOUT) {
 8008a06:	4b3b      	ldr	r3, [pc, #236]	@ (8008af4 <HAL_GPIO_EXTI_Callback+0x234>)
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	68ba      	ldr	r2, [r7, #8]
 8008a0c:	1ad3      	subs	r3, r2, r3
 8008a0e:	2296      	movs	r2, #150	@ 0x96
 8008a10:	4293      	cmp	r3, r2
 8008a12:	d902      	bls.n	8008a1a <HAL_GPIO_EXTI_Callback+0x15a>
			j3_press_count = 0;
 8008a14:	4b38      	ldr	r3, [pc, #224]	@ (8008af8 <HAL_GPIO_EXTI_Callback+0x238>)
 8008a16:	2200      	movs	r2, #0
 8008a18:	701a      	strb	r2, [r3, #0]
		}

		j3_last_press_time = current_time;
 8008a1a:	4a36      	ldr	r2, [pc, #216]	@ (8008af4 <HAL_GPIO_EXTI_Callback+0x234>)
 8008a1c:	68bb      	ldr	r3, [r7, #8]
 8008a1e:	6013      	str	r3, [r2, #0]
		j3_press_count++;
 8008a20:	4b35      	ldr	r3, [pc, #212]	@ (8008af8 <HAL_GPIO_EXTI_Callback+0x238>)
 8008a22:	781b      	ldrb	r3, [r3, #0]
 8008a24:	3301      	adds	r3, #1
 8008a26:	b2da      	uxtb	r2, r3
 8008a28:	4b33      	ldr	r3, [pc, #204]	@ (8008af8 <HAL_GPIO_EXTI_Callback+0x238>)
 8008a2a:	701a      	strb	r2, [r3, #0]

		if (!is_emergency_active() && !joy_mode_active
 8008a2c:	f7ff f848 	bl	8007ac0 <is_emergency_active>
 8008a30:	4603      	mov	r3, r0
 8008a32:	f083 0301 	eor.w	r3, r3, #1
 8008a36:	b2db      	uxtb	r3, r3
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d030      	beq.n	8008a9e <HAL_GPIO_EXTI_Callback+0x1de>
 8008a3c:	4b20      	ldr	r3, [pc, #128]	@ (8008ac0 <HAL_GPIO_EXTI_Callback+0x200>)
 8008a3e:	781b      	ldrb	r3, [r3, #0]
 8008a40:	f083 0301 	eor.w	r3, r3, #1
 8008a44:	b2db      	uxtb	r3, r3
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d029      	beq.n	8008a9e <HAL_GPIO_EXTI_Callback+0x1de>
				&& motion_sequence_state == MOTION_IDLE) {
 8008a4a:	4b27      	ldr	r3, [pc, #156]	@ (8008ae8 <HAL_GPIO_EXTI_Callback+0x228>)
 8008a4c:	781b      	ldrb	r3, [r3, #0]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d125      	bne.n	8008a9e <HAL_GPIO_EXTI_Callback+0x1de>
			switch (j3_press_count) {
 8008a52:	4b29      	ldr	r3, [pc, #164]	@ (8008af8 <HAL_GPIO_EXTI_Callback+0x238>)
 8008a54:	781b      	ldrb	r3, [r3, #0]
 8008a56:	2b01      	cmp	r3, #1
 8008a58:	d105      	bne.n	8008a66 <HAL_GPIO_EXTI_Callback+0x1a6>
			case 1:
				// กดครั้งแรก: วาดคำ FIBO_G01
				start_word_FIBO_G01();
 8008a5a:	f000 fbff 	bl	800925c <start_word_FIBO_G01>
				j3_press_count = 0; // Reset counter
 8008a5e:	4b26      	ldr	r3, [pc, #152]	@ (8008af8 <HAL_GPIO_EXTI_Callback+0x238>)
 8008a60:	2200      	movs	r2, #0
 8008a62:	701a      	strb	r2, [r3, #0]
				break;
 8008a64:	e005      	b.n	8008a72 <HAL_GPIO_EXTI_Callback+0x1b2>

			default:
				// Reset if pressed too many times
				stop_character_drawing();
 8008a66:	f000 fbcf 	bl	8009208 <stop_character_drawing>
				j3_press_count = 0;
 8008a6a:	4b23      	ldr	r3, [pc, #140]	@ (8008af8 <HAL_GPIO_EXTI_Callback+0x238>)
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	701a      	strb	r2, [r3, #0]
				break;
 8008a70:	bf00      	nop
			}
		}
		return;
 8008a72:	e014      	b.n	8008a9e <HAL_GPIO_EXTI_Callback+0x1de>

	}

// Modified J4 button handler for joy mode exit
	if (GPIO_Pin == J4_Pin) {
 8008a74:	88fb      	ldrh	r3, [r7, #6]
 8008a76:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008a7a:	d113      	bne.n	8008aa4 <HAL_GPIO_EXTI_Callback+0x1e4>
		if (joy_mode_active) {
 8008a7c:	4b10      	ldr	r3, [pc, #64]	@ (8008ac0 <HAL_GPIO_EXTI_Callback+0x200>)
 8008a7e:	781b      	ldrb	r3, [r3, #0]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d002      	beq.n	8008a8a <HAL_GPIO_EXTI_Callback+0x1ca>
			// Exit joy mode and hold current position (don't move)
			exit_joy_mode();
 8008a84:	f7ff f88c 	bl	8007ba0 <exit_joy_mode>
		} else if (is_emergency_active()) {
			clear_emergency_state();
		}
		return;
 8008a88:	e00b      	b.n	8008aa2 <HAL_GPIO_EXTI_Callback+0x1e2>
		} else if (is_emergency_active()) {
 8008a8a:	f7ff f819 	bl	8007ac0 <is_emergency_active>
 8008a8e:	4603      	mov	r3, r0
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d006      	beq.n	8008aa2 <HAL_GPIO_EXTI_Callback+0x1e2>
			clear_emergency_state();
 8008a94:	f7fe fecc 	bl	8007830 <clear_emergency_state>
		return;
 8008a98:	e003      	b.n	8008aa2 <HAL_GPIO_EXTI_Callback+0x1e2>
			return;
 8008a9a:	bf00      	nop
 8008a9c:	e002      	b.n	8008aa4 <HAL_GPIO_EXTI_Callback+0x1e4>
		return;
 8008a9e:	bf00      	nop
 8008aa0:	e000      	b.n	8008aa4 <HAL_GPIO_EXTI_Callback+0x1e4>
		return;
 8008aa2:	bf00      	nop
	}
}
 8008aa4:	3710      	adds	r7, #16
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	bd80      	pop	{r7, pc}
 8008aaa:	bf00      	nop
 8008aac:	200007e4 	.word	0x200007e4
 8008ab0:	200007e8 	.word	0x200007e8
 8008ab4:	200007e9 	.word	0x200007e9
 8008ab8:	2000089c 	.word	0x2000089c
 8008abc:	200007eb 	.word	0x200007eb
 8008ac0:	20000809 	.word	0x20000809
 8008ac4:	20000333 	.word	0x20000333
 8008ac8:	200008c8 	.word	0x200008c8
 8008acc:	200008b4 	.word	0x200008b4
 8008ad0:	20000899 	.word	0x20000899
 8008ad4:	2000089a 	.word	0x2000089a
 8008ad8:	20000898 	.word	0x20000898
 8008adc:	20000335 	.word	0x20000335
 8008ae0:	200007ec 	.word	0x200007ec
 8008ae4:	20000804 	.word	0x20000804
 8008ae8:	2000078c 	.word	0x2000078c
 8008aec:	43480000 	.word	0x43480000
 8008af0:	42b40000 	.word	0x42b40000
 8008af4:	200008a4 	.word	0x200008a4
 8008af8:	200008a0 	.word	0x200008a0

08008afc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b082      	sub	sp, #8
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
	if (htim == &htim2) {
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	4a9e      	ldr	r2, [pc, #632]	@ (8008d80 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8008b08:	4293      	cmp	r3, r2
 8008b0a:	f040 8135 	bne.w	8008d78 <HAL_TIM_PeriodElapsedCallback+0x27c>
		Modbus_Protocal_Worker();
 8008b0e:	f7f9 fa77 	bl	8002000 <Modbus_Protocal_Worker>
		modbus_working();
 8008b12:	f000 f95d 	bl	8008dd0 <modbus_working>

		plotter_update_sensors();
 8008b16:	f001 f899 	bl	8009c4c <plotter_update_sensors>
		check_emergency_button();
 8008b1a:	f7fe fda5 	bl	8007668 <check_emergency_button>

		QEI_get_diff_count(&prismatic_encoder);
 8008b1e:	4899      	ldr	r0, [pc, #612]	@ (8008d84 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8008b20:	f7fb f98a 	bl	8003e38 <QEI_get_diff_count>
		QEI_compute_data(&prismatic_encoder);
 8008b24:	4897      	ldr	r0, [pc, #604]	@ (8008d84 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8008b26:	f7fb fa73 	bl	8004010 <QEI_compute_data>
		QEI_get_diff_count(&revolute_encoder);
 8008b2a:	4897      	ldr	r0, [pc, #604]	@ (8008d88 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8008b2c:	f7fb f984 	bl	8003e38 <QEI_get_diff_count>
		QEI_compute_data(&revolute_encoder);
 8008b30:	4895      	ldr	r0, [pc, #596]	@ (8008d88 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8008b32:	f7fb fa6d 	bl	8004010 <QEI_compute_data>

		revolute_axis.input_voltage = mapf(revolute_axis.command_pos, -65535.0f,
 8008b36:	4b95      	ldr	r3, [pc, #596]	@ (8008d8c <HAL_TIM_PeriodElapsedCallback+0x290>)
 8008b38:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8008b3c:	eeb2 2a08 	vmov.f32	s4, #40	@ 0x41400000  12.0
 8008b40:	eefa 1a08 	vmov.f32	s3, #168	@ 0xc1400000 -12.0
 8008b44:	ed9f 1a92 	vldr	s2, [pc, #584]	@ 8008d90 <HAL_TIM_PeriodElapsedCallback+0x294>
 8008b48:	eddf 0a92 	vldr	s1, [pc, #584]	@ 8008d94 <HAL_TIM_PeriodElapsedCallback+0x298>
 8008b4c:	eeb0 0a67 	vmov.f32	s0, s15
 8008b50:	f7f9 f93f 	bl	8001dd2 <mapf>
 8008b54:	eef0 7a40 	vmov.f32	s15, s0
 8008b58:	4b8c      	ldr	r3, [pc, #560]	@ (8008d8c <HAL_TIM_PeriodElapsedCallback+0x290>)
 8008b5a:	edc3 7a08 	vstr	s15, [r3, #32]
				65535.0f, -12.0f, 12.0f);
		revolute_axis.kalman_velocity = SteadyStateKalmanFilter(
 8008b5e:	4b8b      	ldr	r3, [pc, #556]	@ (8008d8c <HAL_TIM_PeriodElapsedCallback+0x290>)
 8008b60:	edd3 7a08 	vldr	s15, [r3, #32]
 8008b64:	4b88      	ldr	r3, [pc, #544]	@ (8008d88 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8008b66:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8008b6a:	eef0 0a47 	vmov.f32	s1, s14
 8008b6e:	eeb0 0a67 	vmov.f32	s0, s15
 8008b72:	4889      	ldr	r0, [pc, #548]	@ (8008d98 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8008b74:	f7fc fa8a 	bl	800508c <SteadyStateKalmanFilter>
 8008b78:	eef0 7a40 	vmov.f32	s15, s0
 8008b7c:	4b83      	ldr	r3, [pc, #524]	@ (8008d8c <HAL_TIM_PeriodElapsedCallback+0x290>)
 8008b7e:	edc3 7a07 	vstr	s15, [r3, #28]
				&revolute_kalman, revolute_axis.input_voltage,
				revolute_encoder.rads);
//		revolute_axis.kalman_velocity = FIR_process(&revolute_lp, revolute_encoder.radps);

		if (isnan(revolute_axis.kalman_velocity)) {
 8008b82:	4b82      	ldr	r3, [pc, #520]	@ (8008d8c <HAL_TIM_PeriodElapsedCallback+0x290>)
 8008b84:	edd3 7a07 	vldr	s15, [r3, #28]
 8008b88:	eef4 7a67 	vcmp.f32	s15, s15
 8008b8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b90:	d703      	bvc.n	8008b9a <HAL_TIM_PeriodElapsedCallback+0x9e>
			revolute_axis.kalman_velocity = 0.0f;
 8008b92:	4b7e      	ldr	r3, [pc, #504]	@ (8008d8c <HAL_TIM_PeriodElapsedCallback+0x290>)
 8008b94:	f04f 0200 	mov.w	r2, #0
 8008b98:	61da      	str	r2, [r3, #28]
		}

		prismatic_axis.input_voltage = mapf(prismatic_axis.command_pos,
 8008b9a:	4b80      	ldr	r3, [pc, #512]	@ (8008d9c <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8008b9c:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8008ba0:	eeb2 2a08 	vmov.f32	s4, #40	@ 0x41400000  12.0
 8008ba4:	eefa 1a08 	vmov.f32	s3, #168	@ 0xc1400000 -12.0
 8008ba8:	ed9f 1a79 	vldr	s2, [pc, #484]	@ 8008d90 <HAL_TIM_PeriodElapsedCallback+0x294>
 8008bac:	eddf 0a79 	vldr	s1, [pc, #484]	@ 8008d94 <HAL_TIM_PeriodElapsedCallback+0x298>
 8008bb0:	eeb0 0a67 	vmov.f32	s0, s15
 8008bb4:	f7f9 f90d 	bl	8001dd2 <mapf>
 8008bb8:	eef0 7a40 	vmov.f32	s15, s0
 8008bbc:	4b77      	ldr	r3, [pc, #476]	@ (8008d9c <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8008bbe:	edc3 7a08 	vstr	s15, [r3, #32]
				-65535.0f, 65535.0f, -12.0f, 12.0f);
		prismatic_axis.kalman_velocity = MotorKalman_Estimate(&prismatic_kalman,
 8008bc2:	4b76      	ldr	r3, [pc, #472]	@ (8008d9c <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8008bc4:	edd3 7a08 	vldr	s15, [r3, #32]
 8008bc8:	4b6e      	ldr	r3, [pc, #440]	@ (8008d84 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8008bca:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8008bce:	eef0 0a47 	vmov.f32	s1, s14
 8008bd2:	eeb0 0a67 	vmov.f32	s0, s15
 8008bd6:	4872      	ldr	r0, [pc, #456]	@ (8008da0 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8008bd8:	f7fa fb68 	bl	80032ac <MotorKalman_Estimate>
 8008bdc:	eeb0 7a40 	vmov.f32	s14, s0
				prismatic_axis.input_voltage, prismatic_encoder.rads)
				* Disturbance_Constant.prismatic_pulley_radius * 1000.0f;
 8008be0:	4b70      	ldr	r3, [pc, #448]	@ (8008da4 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8008be2:	edd3 7a04 	vldr	s15, [r3, #16]
 8008be6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bea:	ed9f 7a6f 	vldr	s14, [pc, #444]	@ 8008da8 <HAL_TIM_PeriodElapsedCallback+0x2ac>
 8008bee:	ee67 7a87 	vmul.f32	s15, s15, s14
		prismatic_axis.kalman_velocity = MotorKalman_Estimate(&prismatic_kalman,
 8008bf2:	4b6a      	ldr	r3, [pc, #424]	@ (8008d9c <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8008bf4:	edc3 7a07 	vstr	s15, [r3, #28]
//		prismatic_axis.kalman_velocity = FIR_process(&prismatic_lp, prismatic_encoder.radps) * Disturbance_Constant.prismatic_pulley_radius * 1000.0f;

		if (isnan(prismatic_axis.kalman_velocity)) {
 8008bf8:	4b68      	ldr	r3, [pc, #416]	@ (8008d9c <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8008bfa:	edd3 7a07 	vldr	s15, [r3, #28]
 8008bfe:	eef4 7a67 	vcmp.f32	s15, s15
 8008c02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c06:	d703      	bvc.n	8008c10 <HAL_TIM_PeriodElapsedCallback+0x114>
			prismatic_axis.kalman_velocity = 0.0f;
 8008c08:	4b64      	ldr	r3, [pc, #400]	@ (8008d9c <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8008c0a:	f04f 0200 	mov.w	r2, #0
 8008c0e:	61da      	str	r2, [r3, #28]
		}

		// Position control update - Allow during HOMING_REV_TO_ZERO_DEG
		if (++position_control_tick >= POSITION_CONTROL_DIVIDER) {
 8008c10:	4b66      	ldr	r3, [pc, #408]	@ (8008dac <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	3301      	adds	r3, #1
 8008c16:	4a65      	ldr	r2, [pc, #404]	@ (8008dac <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8008c18:	6013      	str	r3, [r2, #0]
 8008c1a:	2b09      	cmp	r3, #9
 8008c1c:	d922      	bls.n	8008c64 <HAL_TIM_PeriodElapsedCallback+0x168>
			position_control_tick = 0;
 8008c1e:	4b63      	ldr	r3, [pc, #396]	@ (8008dac <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8008c20:	2200      	movs	r2, #0
 8008c22:	601a      	str	r2, [r3, #0]

			if ((!homing_active || homing_state == HOMING_REV_TO_ZERO_DEG) // ← FIXED
 8008c24:	4b62      	ldr	r3, [pc, #392]	@ (8008db0 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8008c26:	781b      	ldrb	r3, [r3, #0]
 8008c28:	f083 0301 	eor.w	r3, r3, #1
 8008c2c:	b2db      	uxtb	r3, r3
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d103      	bne.n	8008c3a <HAL_TIM_PeriodElapsedCallback+0x13e>
 8008c32:	4b60      	ldr	r3, [pc, #384]	@ (8008db4 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8008c34:	781b      	ldrb	r3, [r3, #0]
 8008c36:	2b07      	cmp	r3, #7
 8008c38:	d114      	bne.n	8008c64 <HAL_TIM_PeriodElapsedCallback+0x168>
			&& (!joy_mode_active || joy_mode_state == JOY_MODE_PLAYBACK)
 8008c3a:	4b5f      	ldr	r3, [pc, #380]	@ (8008db8 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8008c3c:	781b      	ldrb	r3, [r3, #0]
 8008c3e:	f083 0301 	eor.w	r3, r3, #1
 8008c42:	b2db      	uxtb	r3, r3
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d103      	bne.n	8008c50 <HAL_TIM_PeriodElapsedCallback+0x154>
 8008c48:	4b5c      	ldr	r3, [pc, #368]	@ (8008dbc <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8008c4a:	781b      	ldrb	r3, [r3, #0]
 8008c4c:	2b04      	cmp	r3, #4
 8008c4e:	d109      	bne.n	8008c64 <HAL_TIM_PeriodElapsedCallback+0x168>
					&& (!is_emergency_active())) {
 8008c50:	f7fe ff36 	bl	8007ac0 <is_emergency_active>
 8008c54:	4603      	mov	r3, r0
 8008c56:	f083 0301 	eor.w	r3, r3, #1
 8008c5a:	b2db      	uxtb	r3, r3
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d001      	beq.n	8008c64 <HAL_TIM_PeriodElapsedCallback+0x168>
				update_position_control();
 8008c60:	f7fd fe96 	bl	8006990 <update_position_control>
			}
		}

		// Velocity control update - Allow during HOMING_REV_TO_ZERO_DEG
		if ((!homing_active || homing_state == HOMING_REV_TO_ZERO_DEG) // ← FIXED
 8008c64:	4b52      	ldr	r3, [pc, #328]	@ (8008db0 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8008c66:	781b      	ldrb	r3, [r3, #0]
 8008c68:	f083 0301 	eor.w	r3, r3, #1
 8008c6c:	b2db      	uxtb	r3, r3
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d103      	bne.n	8008c7a <HAL_TIM_PeriodElapsedCallback+0x17e>
 8008c72:	4b50      	ldr	r3, [pc, #320]	@ (8008db4 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8008c74:	781b      	ldrb	r3, [r3, #0]
 8008c76:	2b07      	cmp	r3, #7
 8008c78:	d114      	bne.n	8008ca4 <HAL_TIM_PeriodElapsedCallback+0x1a8>
		&& (!joy_mode_active || joy_mode_state == JOY_MODE_PLAYBACK)
 8008c7a:	4b4f      	ldr	r3, [pc, #316]	@ (8008db8 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8008c7c:	781b      	ldrb	r3, [r3, #0]
 8008c7e:	f083 0301 	eor.w	r3, r3, #1
 8008c82:	b2db      	uxtb	r3, r3
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d103      	bne.n	8008c90 <HAL_TIM_PeriodElapsedCallback+0x194>
 8008c88:	4b4c      	ldr	r3, [pc, #304]	@ (8008dbc <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8008c8a:	781b      	ldrb	r3, [r3, #0]
 8008c8c:	2b04      	cmp	r3, #4
 8008c8e:	d109      	bne.n	8008ca4 <HAL_TIM_PeriodElapsedCallback+0x1a8>
				&& (!is_emergency_active())) {
 8008c90:	f7fe ff16 	bl	8007ac0 <is_emergency_active>
 8008c94:	4603      	mov	r3, r0
 8008c96:	f083 0301 	eor.w	r3, r3, #1
 8008c9a:	b2db      	uxtb	r3, r3
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d001      	beq.n	8008ca4 <HAL_TIM_PeriodElapsedCallback+0x1a8>
			update_velocity_control();
 8008ca0:	f7fd ff36 	bl	8006b10 <update_velocity_control>
		}

		update_safety_system();
 8008ca4:	f7fe fe8a 	bl	80079bc <update_safety_system>

		if (!is_emergency_active()) {
 8008ca8:	f7fe ff0a 	bl	8007ac0 <is_emergency_active>
 8008cac:	4603      	mov	r3, r0
 8008cae:	f083 0301 	eor.w	r3, r3, #1
 8008cb2:	b2db      	uxtb	r3, r3
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d001      	beq.n	8008cbc <HAL_TIM_PeriodElapsedCallback+0x1c0>
			check_safety_conditions();
 8008cb8:	f7fe fd0a 	bl	80076d0 <check_safety_conditions>
		}

		// Control loops - joy mode handles its own control
		if (!joy_mode_active || joy_mode_state == JOY_MODE_PLAYBACK) {
 8008cbc:	4b3e      	ldr	r3, [pc, #248]	@ (8008db8 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8008cbe:	781b      	ldrb	r3, [r3, #0]
 8008cc0:	f083 0301 	eor.w	r3, r3, #1
 8008cc4:	b2db      	uxtb	r3, r3
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d103      	bne.n	8008cd2 <HAL_TIM_PeriodElapsedCallback+0x1d6>
 8008cca:	4b3c      	ldr	r3, [pc, #240]	@ (8008dbc <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8008ccc:	781b      	ldrb	r3, [r3, #0]
 8008cce:	2b04      	cmp	r3, #4
 8008cd0:	d102      	bne.n	8008cd8 <HAL_TIM_PeriodElapsedCallback+0x1dc>
			update_control_loops();
 8008cd2:	f7fe f933 	bl	8006f3c <update_control_loops>
 8008cd6:	e001      	b.n	8008cdc <HAL_TIM_PeriodElapsedCallback+0x1e0>
		} else {
			update_joy_mode();
 8008cd8:	f7ff fcbc 	bl	8008654 <update_joy_mode>
		}

		if (joy_mode_active && joy_mode_state == JOY_MODE_PLAYBACK) {
 8008cdc:	4b36      	ldr	r3, [pc, #216]	@ (8008db8 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8008cde:	781b      	ldrb	r3, [r3, #0]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d005      	beq.n	8008cf0 <HAL_TIM_PeriodElapsedCallback+0x1f4>
 8008ce4:	4b35      	ldr	r3, [pc, #212]	@ (8008dbc <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8008ce6:	781b      	ldrb	r3, [r3, #0]
 8008ce8:	2b04      	cmp	r3, #4
 8008cea:	d101      	bne.n	8008cf0 <HAL_TIM_PeriodElapsedCallback+0x1f4>
			update_joy_mode();
 8008cec:	f7ff fcb2 	bl	8008654 <update_joy_mode>
		}
		// ALWAYS update display values
		if (!joy_mode_active) {
 8008cf0:	4b31      	ldr	r3, [pc, #196]	@ (8008db8 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8008cf2:	781b      	ldrb	r3, [r3, #0]
 8008cf4:	f083 0301 	eor.w	r3, r3, #1
 8008cf8:	b2db      	uxtb	r3, r3
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d01e      	beq.n	8008d3c <HAL_TIM_PeriodElapsedCallback+0x240>
			// Update display values for normal operation
			normalized_position = normalize_angle(revolute_encoder.rads);
 8008cfe:	4b22      	ldr	r3, [pc, #136]	@ (8008d88 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8008d00:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8008d04:	eeb0 0a67 	vmov.f32	s0, s15
 8008d08:	f7fd fa30 	bl	800616c <normalize_angle>
 8008d0c:	eef0 7a40 	vmov.f32	s15, s0
 8008d10:	4b2b      	ldr	r3, [pc, #172]	@ (8008dc0 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8008d12:	edc3 7a00 	vstr	s15, [r3]
			prismatic_axis.mm = prismatic_encoder.mm;
 8008d16:	4b1b      	ldr	r3, [pc, #108]	@ (8008d84 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8008d18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008d1a:	4a20      	ldr	r2, [pc, #128]	@ (8008d9c <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8008d1c:	6393      	str	r3, [r2, #56]	@ 0x38
			revolute_axis.deg = UnitConverter_angle(&converter_system,
 8008d1e:	4b28      	ldr	r3, [pc, #160]	@ (8008dc0 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8008d20:	edd3 7a00 	vldr	s15, [r3]
 8008d24:	220e      	movs	r2, #14
 8008d26:	210f      	movs	r1, #15
 8008d28:	eeb0 0a67 	vmov.f32	s0, s15
 8008d2c:	4825      	ldr	r0, [pc, #148]	@ (8008dc4 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8008d2e:	f7fb ff23 	bl	8004b78 <UnitConverter_angle>
 8008d32:	eef0 7a40 	vmov.f32	s15, s0
 8008d36:	4b15      	ldr	r3, [pc, #84]	@ (8008d8c <HAL_TIM_PeriodElapsedCallback+0x290>)
 8008d38:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
					normalized_position, UNIT_RADIAN, UNIT_DEGREE);
		}
		// Note: joy mode updates its own display values in update_joy_mode()

		prismatic_axis.accel_show = FIR_process(&prismatic_lp_accel,
 8008d3c:	4b11      	ldr	r3, [pc, #68]	@ (8008d84 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8008d3e:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 8008d42:	eeb0 0a67 	vmov.f32	s0, s15
 8008d46:	4820      	ldr	r0, [pc, #128]	@ (8008dc8 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8008d48:	f7f8 ffea 	bl	8001d20 <FIR_process>
 8008d4c:	eef0 7a40 	vmov.f32	s15, s0
 8008d50:	4b12      	ldr	r3, [pc, #72]	@ (8008d9c <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8008d52:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
				prismatic_encoder.mmpss);
		revolute_axis.accel_show = FIR_process(&revolute_lp_accel,
 8008d56:	4b0c      	ldr	r3, [pc, #48]	@ (8008d88 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8008d58:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8008d5c:	eeb0 0a67 	vmov.f32	s0, s15
 8008d60:	481a      	ldr	r0, [pc, #104]	@ (8008dcc <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8008d62:	f7f8 ffdd 	bl	8001d20 <FIR_process>
 8008d66:	eef0 7a40 	vmov.f32	s15, s0
 8008d6a:	4b08      	ldr	r3, [pc, #32]	@ (8008d8c <HAL_TIM_PeriodElapsedCallback+0x290>)
 8008d6c:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
				revolute_encoder.radpss);

		update_character_drawing();
 8008d70:	f000 f9c8 	bl	8009104 <update_character_drawing>
		draw_word_FIBO_G01();
 8008d74:	f000 fa98 	bl	80092a8 <draw_word_FIBO_G01>
	}
}
 8008d78:	bf00      	nop
 8008d7a:	3708      	adds	r7, #8
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	bd80      	pop	{r7, pc}
 8008d80:	20001f60 	.word	0x20001f60
 8008d84:	20000988 	.word	0x20000988
 8008d88:	200009e4 	.word	0x200009e4
 8008d8c:	20000748 	.word	0x20000748
 8008d90:	477fff00 	.word	0x477fff00
 8008d94:	c77fff00 	.word	0xc77fff00
 8008d98:	20001aa0 	.word	0x20001aa0
 8008d9c:	20000704 	.word	0x20000704
 8008da0:	20001734 	.word	0x20001734
 8008da4:	20000100 	.word	0x20000100
 8008da8:	447a0000 	.word	0x447a0000
 8008dac:	200007f8 	.word	0x200007f8
 8008db0:	200007eb 	.word	0x200007eb
 8008db4:	200007ea 	.word	0x200007ea
 8008db8:	20000809 	.word	0x20000809
 8008dbc:	20000808 	.word	0x20000808
 8008dc0:	200007fc 	.word	0x200007fc
 8008dc4:	20000d7c 	.word	0x20000d7c
 8008dc8:	20000fd4 	.word	0x20000fd4
 8008dcc:	20000fe0 	.word	0x20000fe0

08008dd0 <modbus_working>:

// Modified modbus_working function
void modbus_working(void) {
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b086      	sub	sp, #24
 8008dd4:	af00      	add	r7, sp, #0
	uint16_t limit_switch_status = 0;
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	82fb      	strh	r3, [r7, #22]
	// heartbeat
	registerFrame[Heartbeat_Protocol].U16 = 22881;
 8008dda:	4b7e      	ldr	r3, [pc, #504]	@ (8008fd4 <modbus_working+0x204>)
 8008ddc:	f645 1261 	movw	r2, #22881	@ 0x5961
 8008de0:	801a      	strh	r2, [r3, #0]

	// servo write
	if (registerFrame[Servo_UP].U16 == 1) {
 8008de2:	4b7c      	ldr	r3, [pc, #496]	@ (8008fd4 <modbus_working+0x204>)
 8008de4:	891b      	ldrh	r3, [r3, #8]
 8008de6:	2b01      	cmp	r3, #1
 8008de8:	d102      	bne.n	8008df0 <modbus_working+0x20>
		plotter_pen_up();
 8008dea:	f000 ffd7 	bl	8009d9c <plotter_pen_up>
 8008dee:	e005      	b.n	8008dfc <modbus_working+0x2c>
	} else if (registerFrame[Servo_Down].U16 == 1) {
 8008df0:	4b78      	ldr	r3, [pc, #480]	@ (8008fd4 <modbus_working+0x204>)
 8008df2:	895b      	ldrh	r3, [r3, #10]
 8008df4:	2b01      	cmp	r3, #1
 8008df6:	d101      	bne.n	8008dfc <modbus_working+0x2c>
		plotter_pen_down();
 8008df8:	f000 ffe0 	bl	8009dbc <plotter_pen_down>
	}

	// limitSW
	if (up_lim == 1) {
 8008dfc:	4b76      	ldr	r3, [pc, #472]	@ (8008fd8 <modbus_working+0x208>)
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	2b01      	cmp	r3, #1
 8008e02:	d103      	bne.n	8008e0c <modbus_working+0x3c>
		limit_switch_status |= 0x02;  // Bit 1 = Limit UP
 8008e04:	8afb      	ldrh	r3, [r7, #22]
 8008e06:	f043 0302 	orr.w	r3, r3, #2
 8008e0a:	82fb      	strh	r3, [r7, #22]
	}
	if (low_lim == 1) {
 8008e0c:	4b73      	ldr	r3, [pc, #460]	@ (8008fdc <modbus_working+0x20c>)
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	2b01      	cmp	r3, #1
 8008e12:	d103      	bne.n	8008e1c <modbus_working+0x4c>
		limit_switch_status |= 0x01;  // Bit 0 = Limit DOWN
 8008e14:	8afb      	ldrh	r3, [r7, #22]
 8008e16:	f043 0301 	orr.w	r3, r3, #1
 8008e1a:	82fb      	strh	r3, [r7, #22]
	}
	registerFrame[LimitSwitch_Status].U16 = limit_switch_status;
 8008e1c:	4a6d      	ldr	r2, [pc, #436]	@ (8008fd4 <modbus_working+0x204>)
 8008e1e:	8afb      	ldrh	r3, [r7, #22]
 8008e20:	80d3      	strh	r3, [r2, #6]

	if (registerFrame[BaseSystem_Status].U16 == 1) {
 8008e22:	4b6c      	ldr	r3, [pc, #432]	@ (8008fd4 <modbus_working+0x204>)
 8008e24:	885b      	ldrh	r3, [r3, #2]
 8008e26:	2b01      	cmp	r3, #1
 8008e28:	d10e      	bne.n	8008e48 <modbus_working+0x78>
		exit_joy_mode();
 8008e2a:	f7fe feb9 	bl	8007ba0 <exit_joy_mode>
		registerFrame[R_Theta_Status].U16 = 1;
 8008e2e:	4b69      	ldr	r3, [pc, #420]	@ (8008fd4 <modbus_working+0x204>)
 8008e30:	2201      	movs	r2, #1
 8008e32:	841a      	strh	r2, [r3, #32]
		start_combined_trajectory(0.0, 0.0);
 8008e34:	eddf 0a6a 	vldr	s1, [pc, #424]	@ 8008fe0 <modbus_working+0x210>
 8008e38:	ed9f 0a69 	vldr	s0, [pc, #420]	@ 8008fe0 <modbus_working+0x210>
 8008e3c:	f7fd fb0a 	bl	8006454 <start_combined_trajectory>
		reset_on_zero_requested = true; // Set flag to trigger reset when reaching (0,0)
 8008e40:	4b68      	ldr	r3, [pc, #416]	@ (8008fe4 <modbus_working+0x214>)
 8008e42:	2201      	movs	r2, #1
 8008e44:	701a      	strb	r2, [r3, #0]
 8008e46:	e03d      	b.n	8008ec4 <modbus_working+0xf4>

	} else if (registerFrame[BaseSystem_Status].U16 == 2) {
 8008e48:	4b62      	ldr	r3, [pc, #392]	@ (8008fd4 <modbus_working+0x204>)
 8008e4a:	885b      	ldrh	r3, [r3, #2]
 8008e4c:	2b02      	cmp	r3, #2
 8008e4e:	d107      	bne.n	8008e60 <modbus_working+0x90>
		registerFrame[R_Theta_Status].U16 = 2;
 8008e50:	4b60      	ldr	r3, [pc, #384]	@ (8008fd4 <modbus_working+0x204>)
 8008e52:	2202      	movs	r2, #2
 8008e54:	841a      	strh	r2, [r3, #32]
		plotter_pen_up();
 8008e56:	f000 ffa1 	bl	8009d9c <plotter_pen_up>
		enter_joy_mode();
 8008e5a:	f7fe fe41 	bl	8007ae0 <enter_joy_mode>
 8008e5e:	e031      	b.n	8008ec4 <modbus_working+0xf4>
	} else if (registerFrame[BaseSystem_Status].U16 == 4) {
 8008e60:	4b5c      	ldr	r3, [pc, #368]	@ (8008fd4 <modbus_working+0x204>)
 8008e62:	885b      	ldrh	r3, [r3, #2]
 8008e64:	2b04      	cmp	r3, #4
 8008e66:	d102      	bne.n	8008e6e <modbus_working+0x9e>
		exit_joy_mode();
 8008e68:	f7fe fe9a 	bl	8007ba0 <exit_joy_mode>
 8008e6c:	e02a      	b.n	8008ec4 <modbus_working+0xf4>
	} else if (registerFrame[BaseSystem_Status].U16 == 8) {
 8008e6e:	4b59      	ldr	r3, [pc, #356]	@ (8008fd4 <modbus_working+0x204>)
 8008e70:	885b      	ldrh	r3, [r3, #2]
 8008e72:	2b08      	cmp	r3, #8
 8008e74:	d126      	bne.n	8008ec4 <modbus_working+0xf4>
		registerFrame[R_Theta_Status].U16 = 8;
 8008e76:	4b57      	ldr	r3, [pc, #348]	@ (8008fd4 <modbus_working+0x204>)
 8008e78:	2208      	movs	r2, #8
 8008e7a:	841a      	strh	r2, [r3, #32]
		exit_joy_mode();
 8008e7c:	f7fe fe90 	bl	8007ba0 <exit_joy_mode>
		float goal_r_mm = (float) (int16_t) registerFrame[Goal_R].U16 / 10.0;
 8008e80:	4b54      	ldr	r3, [pc, #336]	@ (8008fd4 <modbus_working+0x204>)
 8008e82:	f8b3 3080 	ldrh.w	r3, [r3, #128]	@ 0x80
 8008e86:	b21b      	sxth	r3, r3
 8008e88:	ee07 3a90 	vmov	s15, r3
 8008e8c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008e90:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8008e94:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008e98:	edc7 7a04 	vstr	s15, [r7, #16]
		float goal_theta_deg = (float) (int16_t) registerFrame[Goal_Theta].U16
 8008e9c:	4b4d      	ldr	r3, [pc, #308]	@ (8008fd4 <modbus_working+0x204>)
 8008e9e:	f8b3 3082 	ldrh.w	r3, [r3, #130]	@ 0x82
 8008ea2:	b21b      	sxth	r3, r3
 8008ea4:	ee07 3a90 	vmov	s15, r3
 8008ea8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008eac:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8008eb0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008eb4:	edc7 7a03 	vstr	s15, [r7, #12]
				/ 10.0;
		start_combined_trajectory(goal_r_mm, goal_theta_deg);
 8008eb8:	edd7 0a03 	vldr	s1, [r7, #12]
 8008ebc:	ed97 0a04 	vldr	s0, [r7, #16]
 8008ec0:	f7fd fac8 	bl	8006454 <start_combined_trajectory>
	}

	// Check if we need to reset when reaching (0,0)
	if (reset_on_zero_requested && motion_sequence_state == MOTION_IDLE) {
 8008ec4:	4b47      	ldr	r3, [pc, #284]	@ (8008fe4 <modbus_working+0x214>)
 8008ec6:	781b      	ldrb	r3, [r3, #0]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d005      	beq.n	8008ed8 <modbus_working+0x108>
 8008ecc:	4b46      	ldr	r3, [pc, #280]	@ (8008fe8 <modbus_working+0x218>)
 8008ece:	781b      	ldrb	r3, [r3, #0]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d101      	bne.n	8008ed8 <modbus_working+0x108>
		NVIC_SystemReset();
 8008ed4:	f7fc fbe0 	bl	8005698 <__NVIC_SystemReset>
	}

	registerFrame[R_Axis_Actual_Position].U16 = prismatic_encoder.mm * 10.0f;
 8008ed8:	4b44      	ldr	r3, [pc, #272]	@ (8008fec <modbus_working+0x21c>)
 8008eda:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8008ede:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8008ee2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008ee6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008eea:	ee17 3a90 	vmov	r3, s15
 8008eee:	b29a      	uxth	r2, r3
 8008ef0:	4b38      	ldr	r3, [pc, #224]	@ (8008fd4 <modbus_working+0x204>)
 8008ef2:	845a      	strh	r2, [r3, #34]	@ 0x22
	registerFrame[R_Axis_Actual_Speed].U16 = prismatic_axis.kalman_velocity
 8008ef4:	4b3e      	ldr	r3, [pc, #248]	@ (8008ff0 <modbus_working+0x220>)
 8008ef6:	edd3 7a07 	vldr	s15, [r3, #28]
			* 10.0f;
 8008efa:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8008efe:	ee67 7a87 	vmul.f32	s15, s15, s14
	registerFrame[R_Axis_Actual_Speed].U16 = prismatic_axis.kalman_velocity
 8008f02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f06:	ee17 3a90 	vmov	r3, s15
 8008f0a:	b29a      	uxth	r2, r3
 8008f0c:	4b31      	ldr	r3, [pc, #196]	@ (8008fd4 <modbus_working+0x204>)
 8008f0e:	84da      	strh	r2, [r3, #38]	@ 0x26

	float pris_accel = FIR_process(&prismatic_lp_accel,
 8008f10:	4b36      	ldr	r3, [pc, #216]	@ (8008fec <modbus_working+0x21c>)
 8008f12:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 8008f16:	eeb0 0a67 	vmov.f32	s0, s15
 8008f1a:	4836      	ldr	r0, [pc, #216]	@ (8008ff4 <modbus_working+0x224>)
 8008f1c:	f7f8 ff00 	bl	8001d20 <FIR_process>
 8008f20:	ed87 0a02 	vstr	s0, [r7, #8]
			prismatic_encoder.mmpss);
	registerFrame[R_Axis_Acceleration].U16 = pris_accel * 10.0f;
 8008f24:	edd7 7a02 	vldr	s15, [r7, #8]
 8008f28:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8008f2c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008f30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f34:	ee17 3a90 	vmov	r3, s15
 8008f38:	b29a      	uxth	r2, r3
 8008f3a:	4b26      	ldr	r3, [pc, #152]	@ (8008fd4 <modbus_working+0x204>)
 8008f3c:	855a      	strh	r2, [r3, #42]	@ 0x2a

	registerFrame[Theta_Axis_Actual_Position].U16 = revolute_axis.deg * 10.0f;
 8008f3e:	4b2e      	ldr	r3, [pc, #184]	@ (8008ff8 <modbus_working+0x228>)
 8008f40:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8008f44:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8008f48:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008f4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f50:	ee17 3a90 	vmov	r3, s15
 8008f54:	b29a      	uxth	r2, r3
 8008f56:	4b1f      	ldr	r3, [pc, #124]	@ (8008fd4 <modbus_working+0x204>)
 8008f58:	849a      	strh	r2, [r3, #36]	@ 0x24

	float rev_theta_vel = UnitConverter_angle(&converter_system,
 8008f5a:	4b27      	ldr	r3, [pc, #156]	@ (8008ff8 <modbus_working+0x228>)
 8008f5c:	edd3 7a07 	vldr	s15, [r3, #28]
 8008f60:	220e      	movs	r2, #14
 8008f62:	210f      	movs	r1, #15
 8008f64:	eeb0 0a67 	vmov.f32	s0, s15
 8008f68:	4824      	ldr	r0, [pc, #144]	@ (8008ffc <modbus_working+0x22c>)
 8008f6a:	f7fb fe05 	bl	8004b78 <UnitConverter_angle>
 8008f6e:	ed87 0a01 	vstr	s0, [r7, #4]
			revolute_axis.kalman_velocity, UNIT_RADIAN, UNIT_DEGREE);
	registerFrame[Theta_Axis_Actual_Speed].U16 = rev_theta_vel * 10.0f;
 8008f72:	edd7 7a01 	vldr	s15, [r7, #4]
 8008f76:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8008f7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008f7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f82:	ee17 3a90 	vmov	r3, s15
 8008f86:	b29a      	uxth	r2, r3
 8008f88:	4b12      	ldr	r3, [pc, #72]	@ (8008fd4 <modbus_working+0x204>)
 8008f8a:	851a      	strh	r2, [r3, #40]	@ 0x28

	float rev_theta_accel = UnitConverter_angle(&converter_system,
 8008f8c:	4b1c      	ldr	r3, [pc, #112]	@ (8009000 <modbus_working+0x230>)
 8008f8e:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8008f92:	eeb0 0a67 	vmov.f32	s0, s15
 8008f96:	481b      	ldr	r0, [pc, #108]	@ (8009004 <modbus_working+0x234>)
 8008f98:	f7f8 fec2 	bl	8001d20 <FIR_process>
 8008f9c:	eef0 7a40 	vmov.f32	s15, s0
 8008fa0:	220e      	movs	r2, #14
 8008fa2:	210f      	movs	r1, #15
 8008fa4:	eeb0 0a67 	vmov.f32	s0, s15
 8008fa8:	4814      	ldr	r0, [pc, #80]	@ (8008ffc <modbus_working+0x22c>)
 8008faa:	f7fb fde5 	bl	8004b78 <UnitConverter_angle>
 8008fae:	ed87 0a00 	vstr	s0, [r7]
			FIR_process(&revolute_lp_accel, revolute_encoder.radpss),
			UNIT_RADIAN, UNIT_DEGREE);
	registerFrame[Theta_Axis_Acceleration].U16 = rev_theta_accel * 10.0f;
 8008fb2:	edd7 7a00 	vldr	s15, [r7]
 8008fb6:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8008fba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008fbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008fc2:	ee17 3a90 	vmov	r3, s15
 8008fc6:	b29a      	uxth	r2, r3
 8008fc8:	4b02      	ldr	r3, [pc, #8]	@ (8008fd4 <modbus_working+0x204>)
 8008fca:	859a      	strh	r2, [r3, #44]	@ 0x2c
}
 8008fcc:	bf00      	nop
 8008fce:	3718      	adds	r7, #24
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	bd80      	pop	{r7, pc}
 8008fd4:	200015a4 	.word	0x200015a4
 8008fd8:	20001e78 	.word	0x20001e78
 8008fdc:	20001e7c 	.word	0x20001e7c
 8008fe0:	00000000 	.word	0x00000000
 8008fe4:	200007f6 	.word	0x200007f6
 8008fe8:	2000078c 	.word	0x2000078c
 8008fec:	20000988 	.word	0x20000988
 8008ff0:	20000704 	.word	0x20000704
 8008ff4:	20000fd4 	.word	0x20000fd4
 8008ff8:	20000748 	.word	0x20000748
 8008ffc:	20000d7c 	.word	0x20000d7c
 8009000:	200009e4 	.word	0x200009e4
 8009004:	20000fe0 	.word	0x20000fe0

08009008 <start_character_drawing>:

void start_character_drawing(DrawingPoint_t *points, uint8_t num_points,
		const char *character_name) {
 8009008:	b580      	push	{r7, lr}
 800900a:	b084      	sub	sp, #16
 800900c:	af00      	add	r7, sp, #0
 800900e:	60f8      	str	r0, [r7, #12]
 8009010:	460b      	mov	r3, r1
 8009012:	607a      	str	r2, [r7, #4]
 8009014:	72fb      	strb	r3, [r7, #11]
	if (is_emergency_active() || homing_active || joy_mode_active) {
 8009016:	f7fe fd53 	bl	8007ac0 <is_emergency_active>
 800901a:	4603      	mov	r3, r0
 800901c:	2b00      	cmp	r3, #0
 800901e:	d120      	bne.n	8009062 <start_character_drawing+0x5a>
 8009020:	4b12      	ldr	r3, [pc, #72]	@ (800906c <start_character_drawing+0x64>)
 8009022:	781b      	ldrb	r3, [r3, #0]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d11c      	bne.n	8009062 <start_character_drawing+0x5a>
 8009028:	4b11      	ldr	r3, [pc, #68]	@ (8009070 <start_character_drawing+0x68>)
 800902a:	781b      	ldrb	r3, [r3, #0]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d118      	bne.n	8009062 <start_character_drawing+0x5a>
		return;
	}

	// หยุดการวาดปัจจุบัน (ถ้ามี)
	current_drawing_sequence.sequence_active = false;
 8009030:	4b10      	ldr	r3, [pc, #64]	@ (8009074 <start_character_drawing+0x6c>)
 8009032:	2200      	movs	r2, #0
 8009034:	719a      	strb	r2, [r3, #6]

	// ตั้งค่าลำดับการวาดใหม่
	current_drawing_sequence.points = points;
 8009036:	4a0f      	ldr	r2, [pc, #60]	@ (8009074 <start_character_drawing+0x6c>)
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	6013      	str	r3, [r2, #0]
	current_drawing_sequence.num_points = num_points;
 800903c:	4a0d      	ldr	r2, [pc, #52]	@ (8009074 <start_character_drawing+0x6c>)
 800903e:	7afb      	ldrb	r3, [r7, #11]
 8009040:	7113      	strb	r3, [r2, #4]
	current_drawing_sequence.current_point = 0;
 8009042:	4b0c      	ldr	r3, [pc, #48]	@ (8009074 <start_character_drawing+0x6c>)
 8009044:	2200      	movs	r2, #0
 8009046:	715a      	strb	r2, [r3, #5]
	current_drawing_sequence.sequence_active = true;
 8009048:	4b0a      	ldr	r3, [pc, #40]	@ (8009074 <start_character_drawing+0x6c>)
 800904a:	2201      	movs	r2, #1
 800904c:	719a      	strb	r2, [r3, #6]
	current_drawing_sequence.character_name = character_name;
 800904e:	4a09      	ldr	r2, [pc, #36]	@ (8009074 <start_character_drawing+0x6c>)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	6093      	str	r3, [r2, #8]

	// รอให้ motion หยุดก่อนเริ่มใหม่
	if (motion_sequence_state == MOTION_IDLE) {
 8009054:	4b08      	ldr	r3, [pc, #32]	@ (8009078 <start_character_drawing+0x70>)
 8009056:	781b      	ldrb	r3, [r3, #0]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d103      	bne.n	8009064 <start_character_drawing+0x5c>
		execute_next_drawing_point();
 800905c:	f000 f80e 	bl	800907c <execute_next_drawing_point>
 8009060:	e000      	b.n	8009064 <start_character_drawing+0x5c>
		return;
 8009062:	bf00      	nop
	}
}
 8009064:	3710      	adds	r7, #16
 8009066:	46bd      	mov	sp, r7
 8009068:	bd80      	pop	{r7, pc}
 800906a:	bf00      	nop
 800906c:	200007eb 	.word	0x200007eb
 8009070:	20000809 	.word	0x20000809
 8009074:	200008b4 	.word	0x200008b4
 8009078:	2000078c 	.word	0x2000078c

0800907c <execute_next_drawing_point>:

void execute_next_drawing_point(void) {
 800907c:	b580      	push	{r7, lr}
 800907e:	b084      	sub	sp, #16
 8009080:	af00      	add	r7, sp, #0
	if (!current_drawing_sequence.sequence_active) {
 8009082:	4b1e      	ldr	r3, [pc, #120]	@ (80090fc <execute_next_drawing_point+0x80>)
 8009084:	799b      	ldrb	r3, [r3, #6]
 8009086:	f083 0301 	eor.w	r3, r3, #1
 800908a:	b2db      	uxtb	r3, r3
 800908c:	2b00      	cmp	r3, #0
 800908e:	d130      	bne.n	80090f2 <execute_next_drawing_point+0x76>
		return;
	}

	if (current_drawing_sequence.current_point
 8009090:	4b1a      	ldr	r3, [pc, #104]	@ (80090fc <execute_next_drawing_point+0x80>)
 8009092:	795a      	ldrb	r2, [r3, #5]
			< current_drawing_sequence.num_points) {
 8009094:	4b19      	ldr	r3, [pc, #100]	@ (80090fc <execute_next_drawing_point+0x80>)
 8009096:	791b      	ldrb	r3, [r3, #4]
	if (current_drawing_sequence.current_point
 8009098:	429a      	cmp	r2, r3
 800909a:	d221      	bcs.n	80090e0 <execute_next_drawing_point+0x64>
		DrawingPoint_t current_point =
				current_drawing_sequence.points[current_drawing_sequence.current_point];
 800909c:	4b17      	ldr	r3, [pc, #92]	@ (80090fc <execute_next_drawing_point+0x80>)
 800909e:	681a      	ldr	r2, [r3, #0]
 80090a0:	4b16      	ldr	r3, [pc, #88]	@ (80090fc <execute_next_drawing_point+0x80>)
 80090a2:	795b      	ldrb	r3, [r3, #5]
 80090a4:	4619      	mov	r1, r3
 80090a6:	460b      	mov	r3, r1
 80090a8:	005b      	lsls	r3, r3, #1
 80090aa:	440b      	add	r3, r1
 80090ac:	009b      	lsls	r3, r3, #2
 80090ae:	441a      	add	r2, r3
		DrawingPoint_t current_point =
 80090b0:	1d3b      	adds	r3, r7, #4
 80090b2:	ca07      	ldmia	r2, {r0, r1, r2}
 80090b4:	e883 0007 	stmia.w	r3, {r0, r1, r2}

		// ตั้งค่าปากกาก่อนเคลื่อนที่
		drawing_pen_state = current_point.pen_down;
 80090b8:	7b3a      	ldrb	r2, [r7, #12]
 80090ba:	4b11      	ldr	r3, [pc, #68]	@ (8009100 <execute_next_drawing_point+0x84>)
 80090bc:	701a      	strb	r2, [r3, #0]
		// เริ่มการเคลื่อนที่ไปจุดถัดไป
		start_combined_trajectory(current_point.r_mm, current_point.theta_deg);
 80090be:	edd7 7a01 	vldr	s15, [r7, #4]
 80090c2:	ed97 7a02 	vldr	s14, [r7, #8]
 80090c6:	eef0 0a47 	vmov.f32	s1, s14
 80090ca:	eeb0 0a67 	vmov.f32	s0, s15
 80090ce:	f7fd f9c1 	bl	8006454 <start_combined_trajectory>
		current_drawing_sequence.current_point++;
 80090d2:	4b0a      	ldr	r3, [pc, #40]	@ (80090fc <execute_next_drawing_point+0x80>)
 80090d4:	795b      	ldrb	r3, [r3, #5]
 80090d6:	3301      	adds	r3, #1
 80090d8:	b2da      	uxtb	r2, r3
 80090da:	4b08      	ldr	r3, [pc, #32]	@ (80090fc <execute_next_drawing_point+0x80>)
 80090dc:	715a      	strb	r2, [r3, #5]
 80090de:	e009      	b.n	80090f4 <execute_next_drawing_point+0x78>

	} else {
		// เสร็จสิ้นการวาดตัวอักษรนี้
		current_drawing_sequence.sequence_active = false;
 80090e0:	4b06      	ldr	r3, [pc, #24]	@ (80090fc <execute_next_drawing_point+0x80>)
 80090e2:	2200      	movs	r2, #0
 80090e4:	719a      	strb	r2, [r3, #6]
		current_drawing_sequence.current_point = 0;
 80090e6:	4b05      	ldr	r3, [pc, #20]	@ (80090fc <execute_next_drawing_point+0x80>)
 80090e8:	2200      	movs	r2, #0
 80090ea:	715a      	strb	r2, [r3, #5]

		// ยกปากกาเมื่อเสร็จ
		plotter_pen_up();
 80090ec:	f000 fe56 	bl	8009d9c <plotter_pen_up>
 80090f0:	e000      	b.n	80090f4 <execute_next_drawing_point+0x78>
		return;
 80090f2:	bf00      	nop
	}
}
 80090f4:	3710      	adds	r7, #16
 80090f6:	46bd      	mov	sp, r7
 80090f8:	bd80      	pop	{r7, pc}
 80090fa:	bf00      	nop
 80090fc:	200008b4 	.word	0x200008b4
 8009100:	200008c0 	.word	0x200008c0

08009104 <update_character_drawing>:

void update_character_drawing(void) {
 8009104:	b580      	push	{r7, lr}
 8009106:	af00      	add	r7, sp, #0
	// ถ้ามีลำดับการวาดที่กำลังทำงานและ motion เสร็จแล้ว
	if (current_drawing_sequence.sequence_active
 8009108:	4b05      	ldr	r3, [pc, #20]	@ (8009120 <update_character_drawing+0x1c>)
 800910a:	799b      	ldrb	r3, [r3, #6]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d005      	beq.n	800911c <update_character_drawing+0x18>
			&& motion_sequence_state == MOTION_IDLE) {
 8009110:	4b04      	ldr	r3, [pc, #16]	@ (8009124 <update_character_drawing+0x20>)
 8009112:	781b      	ldrb	r3, [r3, #0]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d101      	bne.n	800911c <update_character_drawing+0x18>
		execute_next_drawing_point();
 8009118:	f7ff ffb0 	bl	800907c <execute_next_drawing_point>
	}
}
 800911c:	bf00      	nop
 800911e:	bd80      	pop	{r7, pc}
 8009120:	200008b4 	.word	0x200008b4
 8009124:	2000078c 	.word	0x2000078c

08009128 <draw_letter_F>:

void draw_letter_F(void) {
 8009128:	b580      	push	{r7, lr}
 800912a:	af00      	add	r7, sp, #0
	start_character_drawing(letter_F, sizeof(letter_F) / sizeof(DrawingPoint_t),
 800912c:	4a03      	ldr	r2, [pc, #12]	@ (800913c <draw_letter_F+0x14>)
 800912e:	2108      	movs	r1, #8
 8009130:	4803      	ldr	r0, [pc, #12]	@ (8009140 <draw_letter_F+0x18>)
 8009132:	f7ff ff69 	bl	8009008 <start_character_drawing>
			"F");
}
 8009136:	bf00      	nop
 8009138:	bd80      	pop	{r7, pc}
 800913a:	bf00      	nop
 800913c:	08014fe8 	.word	0x08014fe8
 8009140:	20000338 	.word	0x20000338

08009144 <draw_letter_I>:

void draw_letter_I(void) {
 8009144:	b580      	push	{r7, lr}
 8009146:	af00      	add	r7, sp, #0
	start_character_drawing(letter_I, sizeof(letter_I) / sizeof(DrawingPoint_t),
 8009148:	4a03      	ldr	r2, [pc, #12]	@ (8009158 <draw_letter_I+0x14>)
 800914a:	2104      	movs	r1, #4
 800914c:	4803      	ldr	r0, [pc, #12]	@ (800915c <draw_letter_I+0x18>)
 800914e:	f7ff ff5b 	bl	8009008 <start_character_drawing>
			"I");
}
 8009152:	bf00      	nop
 8009154:	bd80      	pop	{r7, pc}
 8009156:	bf00      	nop
 8009158:	08014fec 	.word	0x08014fec
 800915c:	20000398 	.word	0x20000398

08009160 <draw_letter_B>:

void draw_letter_B(void) {
 8009160:	b580      	push	{r7, lr}
 8009162:	af00      	add	r7, sp, #0
	start_character_drawing(letter_B, sizeof(letter_B) / sizeof(DrawingPoint_t),
 8009164:	4a03      	ldr	r2, [pc, #12]	@ (8009174 <draw_letter_B+0x14>)
 8009166:	210a      	movs	r1, #10
 8009168:	4803      	ldr	r0, [pc, #12]	@ (8009178 <draw_letter_B+0x18>)
 800916a:	f7ff ff4d 	bl	8009008 <start_character_drawing>
			"B");
}
 800916e:	bf00      	nop
 8009170:	bd80      	pop	{r7, pc}
 8009172:	bf00      	nop
 8009174:	08014ff0 	.word	0x08014ff0
 8009178:	200003c8 	.word	0x200003c8

0800917c <draw_letter_O>:

void draw_letter_O(void) {
 800917c:	b580      	push	{r7, lr}
 800917e:	af00      	add	r7, sp, #0
	start_character_drawing(letter_O, sizeof(letter_O) / sizeof(DrawingPoint_t),
 8009180:	4a03      	ldr	r2, [pc, #12]	@ (8009190 <draw_letter_O+0x14>)
 8009182:	2107      	movs	r1, #7
 8009184:	4803      	ldr	r0, [pc, #12]	@ (8009194 <draw_letter_O+0x18>)
 8009186:	f7ff ff3f 	bl	8009008 <start_character_drawing>
			"O");
}
 800918a:	bf00      	nop
 800918c:	bd80      	pop	{r7, pc}
 800918e:	bf00      	nop
 8009190:	08014ff4 	.word	0x08014ff4
 8009194:	20000440 	.word	0x20000440

08009198 <draw_underscore>:

void draw_underscore(void) {
 8009198:	b580      	push	{r7, lr}
 800919a:	af00      	add	r7, sp, #0
	start_character_drawing(letter_underscore,
 800919c:	4a03      	ldr	r2, [pc, #12]	@ (80091ac <draw_underscore+0x14>)
 800919e:	2104      	movs	r1, #4
 80091a0:	4803      	ldr	r0, [pc, #12]	@ (80091b0 <draw_underscore+0x18>)
 80091a2:	f7ff ff31 	bl	8009008 <start_character_drawing>
			sizeof(letter_underscore) / sizeof(DrawingPoint_t), "_");
}
 80091a6:	bf00      	nop
 80091a8:	bd80      	pop	{r7, pc}
 80091aa:	bf00      	nop
 80091ac:	08014ff8 	.word	0x08014ff8
 80091b0:	20000494 	.word	0x20000494

080091b4 <draw_letter_G>:

void draw_letter_G(void) {
 80091b4:	b580      	push	{r7, lr}
 80091b6:	af00      	add	r7, sp, #0
	start_character_drawing(letter_G, sizeof(letter_G) / sizeof(DrawingPoint_t),
 80091b8:	4a03      	ldr	r2, [pc, #12]	@ (80091c8 <draw_letter_G+0x14>)
 80091ba:	2108      	movs	r1, #8
 80091bc:	4803      	ldr	r0, [pc, #12]	@ (80091cc <draw_letter_G+0x18>)
 80091be:	f7ff ff23 	bl	8009008 <start_character_drawing>
			"G");
}
 80091c2:	bf00      	nop
 80091c4:	bd80      	pop	{r7, pc}
 80091c6:	bf00      	nop
 80091c8:	08014ffc 	.word	0x08014ffc
 80091cc:	200004c4 	.word	0x200004c4

080091d0 <draw_number_0>:

void draw_number_0(void) {
 80091d0:	b580      	push	{r7, lr}
 80091d2:	af00      	add	r7, sp, #0
	start_character_drawing(number_0, sizeof(number_0) / sizeof(DrawingPoint_t),
 80091d4:	4a03      	ldr	r2, [pc, #12]	@ (80091e4 <draw_number_0+0x14>)
 80091d6:	2107      	movs	r1, #7
 80091d8:	4803      	ldr	r0, [pc, #12]	@ (80091e8 <draw_number_0+0x18>)
 80091da:	f7ff ff15 	bl	8009008 <start_character_drawing>
			"0");
}
 80091de:	bf00      	nop
 80091e0:	bd80      	pop	{r7, pc}
 80091e2:	bf00      	nop
 80091e4:	08015000 	.word	0x08015000
 80091e8:	20000524 	.word	0x20000524

080091ec <draw_number_1>:

void draw_number_1(void) {
 80091ec:	b580      	push	{r7, lr}
 80091ee:	af00      	add	r7, sp, #0
	start_character_drawing(number_1, sizeof(number_1) / sizeof(DrawingPoint_t),
 80091f0:	4a03      	ldr	r2, [pc, #12]	@ (8009200 <draw_number_1+0x14>)
 80091f2:	2105      	movs	r1, #5
 80091f4:	4803      	ldr	r0, [pc, #12]	@ (8009204 <draw_number_1+0x18>)
 80091f6:	f7ff ff07 	bl	8009008 <start_character_drawing>
			"1");
}
 80091fa:	bf00      	nop
 80091fc:	bd80      	pop	{r7, pc}
 80091fe:	bf00      	nop
 8009200:	08015004 	.word	0x08015004
 8009204:	20000578 	.word	0x20000578

08009208 <stop_character_drawing>:

void stop_character_drawing(void) {
 8009208:	b580      	push	{r7, lr}
 800920a:	af00      	add	r7, sp, #0
	current_drawing_sequence.sequence_active = false;
 800920c:	4b09      	ldr	r3, [pc, #36]	@ (8009234 <stop_character_drawing+0x2c>)
 800920e:	2200      	movs	r2, #0
 8009210:	719a      	strb	r2, [r3, #6]
	current_drawing_sequence.current_point = 0;
 8009212:	4b08      	ldr	r3, [pc, #32]	@ (8009234 <stop_character_drawing+0x2c>)
 8009214:	2200      	movs	r2, #0
 8009216:	715a      	strb	r2, [r3, #5]
	word_drawing_active = false;
 8009218:	4b07      	ldr	r3, [pc, #28]	@ (8009238 <stop_character_drawing+0x30>)
 800921a:	2200      	movs	r2, #0
 800921c:	701a      	strb	r2, [r3, #0]
	word_progress = 0;
 800921e:	4b07      	ldr	r3, [pc, #28]	@ (800923c <stop_character_drawing+0x34>)
 8009220:	2200      	movs	r2, #0
 8009222:	701a      	strb	r2, [r3, #0]
	drawing_pen_state = false;
 8009224:	4b06      	ldr	r3, [pc, #24]	@ (8009240 <stop_character_drawing+0x38>)
 8009226:	2200      	movs	r2, #0
 8009228:	701a      	strb	r2, [r3, #0]
	plotter_pen_up();
 800922a:	f000 fdb7 	bl	8009d9c <plotter_pen_up>
}
 800922e:	bf00      	nop
 8009230:	bd80      	pop	{r7, pc}
 8009232:	bf00      	nop
 8009234:	200008b4 	.word	0x200008b4
 8009238:	200008c8 	.word	0x200008c8
 800923c:	200008c1 	.word	0x200008c1
 8009240:	200008c0 	.word	0x200008c0

08009244 <is_drawing_active>:

bool is_drawing_active(void) {
 8009244:	b480      	push	{r7}
 8009246:	af00      	add	r7, sp, #0
	return current_drawing_sequence.sequence_active;
 8009248:	4b03      	ldr	r3, [pc, #12]	@ (8009258 <is_drawing_active+0x14>)
 800924a:	799b      	ldrb	r3, [r3, #6]
}
 800924c:	4618      	mov	r0, r3
 800924e:	46bd      	mov	sp, r7
 8009250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009254:	4770      	bx	lr
 8009256:	bf00      	nop
 8009258:	200008b4 	.word	0x200008b4

0800925c <start_word_FIBO_G01>:

void start_word_FIBO_G01(void) {
 800925c:	b580      	push	{r7, lr}
 800925e:	af00      	add	r7, sp, #0
	if (is_emergency_active() || homing_active || joy_mode_active) {
 8009260:	f7fe fc2e 	bl	8007ac0 <is_emergency_active>
 8009264:	4603      	mov	r3, r0
 8009266:	2b00      	cmp	r3, #0
 8009268:	d111      	bne.n	800928e <start_word_FIBO_G01+0x32>
 800926a:	4b0a      	ldr	r3, [pc, #40]	@ (8009294 <start_word_FIBO_G01+0x38>)
 800926c:	781b      	ldrb	r3, [r3, #0]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d10d      	bne.n	800928e <start_word_FIBO_G01+0x32>
 8009272:	4b09      	ldr	r3, [pc, #36]	@ (8009298 <start_word_FIBO_G01+0x3c>)
 8009274:	781b      	ldrb	r3, [r3, #0]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d109      	bne.n	800928e <start_word_FIBO_G01+0x32>
		return;
	}

//	stop_character_drawing();
//
	word_drawing_active = true;
 800927a:	4b08      	ldr	r3, [pc, #32]	@ (800929c <start_word_FIBO_G01+0x40>)
 800927c:	2201      	movs	r2, #1
 800927e:	701a      	strb	r2, [r3, #0]
	word_progress = 0;
 8009280:	4b07      	ldr	r3, [pc, #28]	@ (80092a0 <start_word_FIBO_G01+0x44>)
 8009282:	2200      	movs	r2, #0
 8009284:	701a      	strb	r2, [r3, #0]
	word_delay_timer = 0;
 8009286:	4b07      	ldr	r3, [pc, #28]	@ (80092a4 <start_word_FIBO_G01+0x48>)
 8009288:	2200      	movs	r2, #0
 800928a:	601a      	str	r2, [r3, #0]
 800928c:	e000      	b.n	8009290 <start_word_FIBO_G01+0x34>
		return;
 800928e:	bf00      	nop

}
 8009290:	bd80      	pop	{r7, pc}
 8009292:	bf00      	nop
 8009294:	200007eb 	.word	0x200007eb
 8009298:	20000809 	.word	0x20000809
 800929c:	200008c8 	.word	0x200008c8
 80092a0:	200008c1 	.word	0x200008c1
 80092a4:	200008c4 	.word	0x200008c4

080092a8 <draw_word_FIBO_G01>:

void draw_word_FIBO_G01(void) {
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b082      	sub	sp, #8
 80092ac:	af00      	add	r7, sp, #0
	const uint32_t LETTER_DELAY = 1; // หน่วงเวลา 3 วินาทีระหว่างตัวอักษร
 80092ae:	2301      	movs	r3, #1
 80092b0:	607b      	str	r3, [r7, #4]

	if (!word_drawing_active) {
 80092b2:	4b45      	ldr	r3, [pc, #276]	@ (80093c8 <draw_word_FIBO_G01+0x120>)
 80092b4:	781b      	ldrb	r3, [r3, #0]
 80092b6:	f083 0301 	eor.w	r3, r3, #1
 80092ba:	b2db      	uxtb	r3, r3
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d17e      	bne.n	80093be <draw_word_FIBO_G01+0x116>
		return;
	}

	if (!is_drawing_active() && motion_sequence_state == MOTION_IDLE) {
 80092c0:	f7ff ffc0 	bl	8009244 <is_drawing_active>
 80092c4:	4603      	mov	r3, r0
 80092c6:	f083 0301 	eor.w	r3, r3, #1
 80092ca:	b2db      	uxtb	r3, r3
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d077      	beq.n	80093c0 <draw_word_FIBO_G01+0x118>
 80092d0:	4b3e      	ldr	r3, [pc, #248]	@ (80093cc <draw_word_FIBO_G01+0x124>)
 80092d2:	781b      	ldrb	r3, [r3, #0]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d173      	bne.n	80093c0 <draw_word_FIBO_G01+0x118>
		word_delay_timer++;
 80092d8:	4b3d      	ldr	r3, [pc, #244]	@ (80093d0 <draw_word_FIBO_G01+0x128>)
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	3301      	adds	r3, #1
 80092de:	4a3c      	ldr	r2, [pc, #240]	@ (80093d0 <draw_word_FIBO_G01+0x128>)
 80092e0:	6013      	str	r3, [r2, #0]

		if (word_delay_timer >= LETTER_DELAY) {
 80092e2:	4b3b      	ldr	r3, [pc, #236]	@ (80093d0 <draw_word_FIBO_G01+0x128>)
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	687a      	ldr	r2, [r7, #4]
 80092e8:	429a      	cmp	r2, r3
 80092ea:	d869      	bhi.n	80093c0 <draw_word_FIBO_G01+0x118>
			word_delay_timer = 0;
 80092ec:	4b38      	ldr	r3, [pc, #224]	@ (80093d0 <draw_word_FIBO_G01+0x128>)
 80092ee:	2200      	movs	r2, #0
 80092f0:	601a      	str	r2, [r3, #0]

			switch (word_progress) {
 80092f2:	4b38      	ldr	r3, [pc, #224]	@ (80093d4 <draw_word_FIBO_G01+0x12c>)
 80092f4:	781b      	ldrb	r3, [r3, #0]
 80092f6:	2b07      	cmp	r3, #7
 80092f8:	d85a      	bhi.n	80093b0 <draw_word_FIBO_G01+0x108>
 80092fa:	a201      	add	r2, pc, #4	@ (adr r2, 8009300 <draw_word_FIBO_G01+0x58>)
 80092fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009300:	08009321 	.word	0x08009321
 8009304:	08009333 	.word	0x08009333
 8009308:	08009345 	.word	0x08009345
 800930c:	08009357 	.word	0x08009357
 8009310:	08009369 	.word	0x08009369
 8009314:	0800937b 	.word	0x0800937b
 8009318:	0800938d 	.word	0x0800938d
 800931c:	0800939f 	.word	0x0800939f
			case 0:
				draw_letter_F();
 8009320:	f7ff ff02 	bl	8009128 <draw_letter_F>
				word_progress++;
 8009324:	4b2b      	ldr	r3, [pc, #172]	@ (80093d4 <draw_word_FIBO_G01+0x12c>)
 8009326:	781b      	ldrb	r3, [r3, #0]
 8009328:	3301      	adds	r3, #1
 800932a:	b2da      	uxtb	r2, r3
 800932c:	4b29      	ldr	r3, [pc, #164]	@ (80093d4 <draw_word_FIBO_G01+0x12c>)
 800932e:	701a      	strb	r2, [r3, #0]
				break;
 8009330:	e046      	b.n	80093c0 <draw_word_FIBO_G01+0x118>
			case 1:
				draw_letter_I();
 8009332:	f7ff ff07 	bl	8009144 <draw_letter_I>
				word_progress++;
 8009336:	4b27      	ldr	r3, [pc, #156]	@ (80093d4 <draw_word_FIBO_G01+0x12c>)
 8009338:	781b      	ldrb	r3, [r3, #0]
 800933a:	3301      	adds	r3, #1
 800933c:	b2da      	uxtb	r2, r3
 800933e:	4b25      	ldr	r3, [pc, #148]	@ (80093d4 <draw_word_FIBO_G01+0x12c>)
 8009340:	701a      	strb	r2, [r3, #0]
				break;
 8009342:	e03d      	b.n	80093c0 <draw_word_FIBO_G01+0x118>
			case 2:
				draw_letter_B();
 8009344:	f7ff ff0c 	bl	8009160 <draw_letter_B>
				word_progress++;
 8009348:	4b22      	ldr	r3, [pc, #136]	@ (80093d4 <draw_word_FIBO_G01+0x12c>)
 800934a:	781b      	ldrb	r3, [r3, #0]
 800934c:	3301      	adds	r3, #1
 800934e:	b2da      	uxtb	r2, r3
 8009350:	4b20      	ldr	r3, [pc, #128]	@ (80093d4 <draw_word_FIBO_G01+0x12c>)
 8009352:	701a      	strb	r2, [r3, #0]
				break;
 8009354:	e034      	b.n	80093c0 <draw_word_FIBO_G01+0x118>
			case 3:
				draw_letter_O();
 8009356:	f7ff ff11 	bl	800917c <draw_letter_O>
				word_progress++;
 800935a:	4b1e      	ldr	r3, [pc, #120]	@ (80093d4 <draw_word_FIBO_G01+0x12c>)
 800935c:	781b      	ldrb	r3, [r3, #0]
 800935e:	3301      	adds	r3, #1
 8009360:	b2da      	uxtb	r2, r3
 8009362:	4b1c      	ldr	r3, [pc, #112]	@ (80093d4 <draw_word_FIBO_G01+0x12c>)
 8009364:	701a      	strb	r2, [r3, #0]
				break;
 8009366:	e02b      	b.n	80093c0 <draw_word_FIBO_G01+0x118>
			case 4:
				draw_underscore();
 8009368:	f7ff ff16 	bl	8009198 <draw_underscore>
				word_progress++;
 800936c:	4b19      	ldr	r3, [pc, #100]	@ (80093d4 <draw_word_FIBO_G01+0x12c>)
 800936e:	781b      	ldrb	r3, [r3, #0]
 8009370:	3301      	adds	r3, #1
 8009372:	b2da      	uxtb	r2, r3
 8009374:	4b17      	ldr	r3, [pc, #92]	@ (80093d4 <draw_word_FIBO_G01+0x12c>)
 8009376:	701a      	strb	r2, [r3, #0]
				break;
 8009378:	e022      	b.n	80093c0 <draw_word_FIBO_G01+0x118>
			case 5:
				draw_letter_G();
 800937a:	f7ff ff1b 	bl	80091b4 <draw_letter_G>
				word_progress++;
 800937e:	4b15      	ldr	r3, [pc, #84]	@ (80093d4 <draw_word_FIBO_G01+0x12c>)
 8009380:	781b      	ldrb	r3, [r3, #0]
 8009382:	3301      	adds	r3, #1
 8009384:	b2da      	uxtb	r2, r3
 8009386:	4b13      	ldr	r3, [pc, #76]	@ (80093d4 <draw_word_FIBO_G01+0x12c>)
 8009388:	701a      	strb	r2, [r3, #0]
				break;
 800938a:	e019      	b.n	80093c0 <draw_word_FIBO_G01+0x118>
			case 6:
				draw_number_0();
 800938c:	f7ff ff20 	bl	80091d0 <draw_number_0>
				word_progress++;
 8009390:	4b10      	ldr	r3, [pc, #64]	@ (80093d4 <draw_word_FIBO_G01+0x12c>)
 8009392:	781b      	ldrb	r3, [r3, #0]
 8009394:	3301      	adds	r3, #1
 8009396:	b2da      	uxtb	r2, r3
 8009398:	4b0e      	ldr	r3, [pc, #56]	@ (80093d4 <draw_word_FIBO_G01+0x12c>)
 800939a:	701a      	strb	r2, [r3, #0]
				break;
 800939c:	e010      	b.n	80093c0 <draw_word_FIBO_G01+0x118>
			case 7:
				draw_number_1();
 800939e:	f7ff ff25 	bl	80091ec <draw_number_1>
				word_progress++;
 80093a2:	4b0c      	ldr	r3, [pc, #48]	@ (80093d4 <draw_word_FIBO_G01+0x12c>)
 80093a4:	781b      	ldrb	r3, [r3, #0]
 80093a6:	3301      	adds	r3, #1
 80093a8:	b2da      	uxtb	r2, r3
 80093aa:	4b0a      	ldr	r3, [pc, #40]	@ (80093d4 <draw_word_FIBO_G01+0x12c>)
 80093ac:	701a      	strb	r2, [r3, #0]
				break;
 80093ae:	e007      	b.n	80093c0 <draw_word_FIBO_G01+0x118>
			default:
				// เสร็จสิ้นการวาดคำทั้งหมด
				word_drawing_active = false;
 80093b0:	4b05      	ldr	r3, [pc, #20]	@ (80093c8 <draw_word_FIBO_G01+0x120>)
 80093b2:	2200      	movs	r2, #0
 80093b4:	701a      	strb	r2, [r3, #0]
				word_progress = 0;
 80093b6:	4b07      	ldr	r3, [pc, #28]	@ (80093d4 <draw_word_FIBO_G01+0x12c>)
 80093b8:	2200      	movs	r2, #0
 80093ba:	701a      	strb	r2, [r3, #0]
				break;
 80093bc:	e000      	b.n	80093c0 <draw_word_FIBO_G01+0x118>
		return;
 80093be:	bf00      	nop
			}
		}
	}
}
 80093c0:	3708      	adds	r7, #8
 80093c2:	46bd      	mov	sp, r7
 80093c4:	bd80      	pop	{r7, pc}
 80093c6:	bf00      	nop
 80093c8:	200008c8 	.word	0x200008c8
 80093cc:	2000078c 	.word	0x2000078c
 80093d0:	200008c4 	.word	0x200008c4
 80093d4:	200008c1 	.word	0x200008c1

080093d8 <ensure_motion_idle>:

void ensure_motion_idle(void) {
 80093d8:	b480      	push	{r7}
 80093da:	af00      	add	r7, sp, #0
	// Force motion to idle state
	motion_sequence_state = MOTION_IDLE;
 80093dc:	4b16      	ldr	r3, [pc, #88]	@ (8009438 <ensure_motion_idle+0x60>)
 80093de:	2200      	movs	r2, #0
 80093e0:	701a      	strb	r2, [r3, #0]
	motion_delay_timer = 0;
 80093e2:	4b16      	ldr	r3, [pc, #88]	@ (800943c <ensure_motion_idle+0x64>)
 80093e4:	2200      	movs	r2, #0
 80093e6:	601a      	str	r2, [r3, #0]

	// Stop all trajectories
	prismatic_axis.trajectory_active = false;
 80093e8:	4b15      	ldr	r3, [pc, #84]	@ (8009440 <ensure_motion_idle+0x68>)
 80093ea:	2200      	movs	r2, #0
 80093ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	revolute_axis.trajectory_active = false;
 80093f0:	4b14      	ldr	r3, [pc, #80]	@ (8009444 <ensure_motion_idle+0x6c>)
 80093f2:	2200      	movs	r2, #0
 80093f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	sync_motion_active = false;
 80093f8:	4b13      	ldr	r3, [pc, #76]	@ (8009448 <ensure_motion_idle+0x70>)
 80093fa:	2200      	movs	r2, #0
 80093fc:	701a      	strb	r2, [r3, #0]

	// Reset velocities
	prismatic_axis.velocity = 0.0f;
 80093fe:	4b10      	ldr	r3, [pc, #64]	@ (8009440 <ensure_motion_idle+0x68>)
 8009400:	f04f 0200 	mov.w	r2, #0
 8009404:	605a      	str	r2, [r3, #4]
	revolute_axis.velocity = 0.0f;
 8009406:	4b0f      	ldr	r3, [pc, #60]	@ (8009444 <ensure_motion_idle+0x6c>)
 8009408:	f04f 0200 	mov.w	r2, #0
 800940c:	605a      	str	r2, [r3, #4]
	prismatic_axis.command_vel = 0.0f;
 800940e:	4b0c      	ldr	r3, [pc, #48]	@ (8009440 <ensure_motion_idle+0x68>)
 8009410:	f04f 0200 	mov.w	r2, #0
 8009414:	629a      	str	r2, [r3, #40]	@ 0x28
	revolute_axis.command_vel = 0.0f;
 8009416:	4b0b      	ldr	r3, [pc, #44]	@ (8009444 <ensure_motion_idle+0x6c>)
 8009418:	f04f 0200 	mov.w	r2, #0
 800941c:	629a      	str	r2, [r3, #40]	@ 0x28

	// Hold current positions
	prismatic_axis.position = prismatic_encoder.mm;
 800941e:	4b0b      	ldr	r3, [pc, #44]	@ (800944c <ensure_motion_idle+0x74>)
 8009420:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009422:	4a07      	ldr	r2, [pc, #28]	@ (8009440 <ensure_motion_idle+0x68>)
 8009424:	6013      	str	r3, [r2, #0]
	revolute_axis.position = revolute_encoder.rads;
 8009426:	4b0a      	ldr	r3, [pc, #40]	@ (8009450 <ensure_motion_idle+0x78>)
 8009428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800942a:	4a06      	ldr	r2, [pc, #24]	@ (8009444 <ensure_motion_idle+0x6c>)
 800942c:	6013      	str	r3, [r2, #0]
}
 800942e:	bf00      	nop
 8009430:	46bd      	mov	sp, r7
 8009432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009436:	4770      	bx	lr
 8009438:	2000078c 	.word	0x2000078c
 800943c:	200007e0 	.word	0x200007e0
 8009440:	20000704 	.word	0x20000704
 8009444:	20000748 	.word	0x20000748
 8009448:	200008b0 	.word	0x200008b0
 800944c:	20000988 	.word	0x20000988
 8009450:	200009e4 	.word	0x200009e4

08009454 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8009454:	b480      	push	{r7}
 8009456:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8009458:	b672      	cpsid	i
}
 800945a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800945c:	bf00      	nop
 800945e:	e7fd      	b.n	800945c <Error_Handler+0x8>

08009460 <plotter_begin>:
float prismatic_current = 0.0f;
float revolute_current = 0.0f;

int up_lim, low_lim, b1, b2, b3, b4;

void plotter_begin() {
 8009460:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009464:	ed2d 8b02 	vpush	{d8}
 8009468:	b083      	sub	sp, #12
 800946a:	af02      	add	r7, sp, #8
	ZGX45RGG_400RPM_Constant.sd_max = ZGX45RGG_400RPM_Constant.qd_max
 800946c:	4bc4      	ldr	r3, [pc, #784]	@ (8009780 <plotter_begin+0x320>)
 800946e:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
			* Disturbance_Constant.prismatic_pulley_radius * 1000;
 8009472:	4bc4      	ldr	r3, [pc, #784]	@ (8009784 <plotter_begin+0x324>)
 8009474:	691b      	ldr	r3, [r3, #16]
 8009476:	4618      	mov	r0, r3
 8009478:	f7f7 f832 	bl	80004e0 <__aeabi_f2d>
 800947c:	4602      	mov	r2, r0
 800947e:	460b      	mov	r3, r1
 8009480:	4620      	mov	r0, r4
 8009482:	4629      	mov	r1, r5
 8009484:	f7f7 f884 	bl	8000590 <__aeabi_dmul>
 8009488:	4602      	mov	r2, r0
 800948a:	460b      	mov	r3, r1
 800948c:	4610      	mov	r0, r2
 800948e:	4619      	mov	r1, r3
 8009490:	f04f 0200 	mov.w	r2, #0
 8009494:	4bbc      	ldr	r3, [pc, #752]	@ (8009788 <plotter_begin+0x328>)
 8009496:	f7f7 f87b 	bl	8000590 <__aeabi_dmul>
 800949a:	4602      	mov	r2, r0
 800949c:	460b      	mov	r3, r1
	ZGX45RGG_400RPM_Constant.sd_max = ZGX45RGG_400RPM_Constant.qd_max
 800949e:	49b8      	ldr	r1, [pc, #736]	@ (8009780 <plotter_begin+0x320>)
 80094a0:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
	ZGX45RGG_400RPM_Constant.sdd_max = ZGX45RGG_400RPM_Constant.sd_max * 2;
 80094a4:	4bb6      	ldr	r3, [pc, #728]	@ (8009780 <plotter_begin+0x320>)
 80094a6:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 80094aa:	4602      	mov	r2, r0
 80094ac:	460b      	mov	r3, r1
 80094ae:	f7f6 feb9 	bl	8000224 <__adddf3>
 80094b2:	4602      	mov	r2, r0
 80094b4:	460b      	mov	r3, r1
 80094b6:	49b2      	ldr	r1, [pc, #712]	@ (8009780 <plotter_begin+0x320>)
 80094b8:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58

	ZGX45RGG_400RPM_Constant.traject_sd_max = 500.0;
 80094bc:	49b0      	ldr	r1, [pc, #704]	@ (8009780 <plotter_begin+0x320>)
 80094be:	f04f 0200 	mov.w	r2, #0
 80094c2:	4bb2      	ldr	r3, [pc, #712]	@ (800978c <plotter_begin+0x32c>)
 80094c4:	e9c1 231c 	strd	r2, r3, [r1, #112]	@ 0x70
	ZGX45RGG_400RPM_Constant.traject_sdd_max = 1000.0;
 80094c8:	49ad      	ldr	r1, [pc, #692]	@ (8009780 <plotter_begin+0x320>)
 80094ca:	f04f 0200 	mov.w	r2, #0
 80094ce:	4bae      	ldr	r3, [pc, #696]	@ (8009788 <plotter_begin+0x328>)
 80094d0:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78

	ZGX45RGG_150RPM_Constant.qd_max = ZGX45RGG_150RPM_Constant.qd_max
 80094d4:	4bae      	ldr	r3, [pc, #696]	@ (8009790 <plotter_begin+0x330>)
 80094d6:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
			* (24.0 / 36.0);
 80094da:	a3a7      	add	r3, pc, #668	@ (adr r3, 8009778 <plotter_begin+0x318>)
 80094dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094e0:	f7f7 f856 	bl	8000590 <__aeabi_dmul>
 80094e4:	4602      	mov	r2, r0
 80094e6:	460b      	mov	r3, r1
	ZGX45RGG_150RPM_Constant.qd_max = ZGX45RGG_150RPM_Constant.qd_max
 80094e8:	49a9      	ldr	r1, [pc, #676]	@ (8009790 <plotter_begin+0x330>)
 80094ea:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

	ZGX45RGG_150RPM_Constant.traject_qd_max = 4.0;
 80094ee:	49a8      	ldr	r1, [pc, #672]	@ (8009790 <plotter_begin+0x330>)
 80094f0:	f04f 0200 	mov.w	r2, #0
 80094f4:	4ba7      	ldr	r3, [pc, #668]	@ (8009794 <plotter_begin+0x334>)
 80094f6:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
	ZGX45RGG_150RPM_Constant.traject_qdd_max = 2.5;
 80094fa:	49a5      	ldr	r1, [pc, #660]	@ (8009790 <plotter_begin+0x330>)
 80094fc:	f04f 0200 	mov.w	r2, #0
 8009500:	4ba5      	ldr	r3, [pc, #660]	@ (8009798 <plotter_begin+0x338>)
 8009502:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68

	SIGNAL_init(&sine_sg_PWM, SIGNAL_SINE);
 8009506:	2100      	movs	r1, #0
 8009508:	48a4      	ldr	r0, [pc, #656]	@ (800979c <plotter_begin+0x33c>)
 800950a:	f000 fc67 	bl	8009ddc <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_PWM, SINE_AMPLITUDE, SINE_FREQUENCY, SINE_PHASE,
 800950e:	eddf 2aa4 	vldr	s5, [pc, #656]	@ 80097a0 <plotter_begin+0x340>
 8009512:	ed9f 2aa4 	vldr	s4, [pc, #656]	@ 80097a4 <plotter_begin+0x344>
 8009516:	eddf 1ab1 	vldr	s3, [pc, #708]	@ 80097dc <plotter_begin+0x37c>
 800951a:	ed9f 1ab0 	vldr	s2, [pc, #704]	@ 80097dc <plotter_begin+0x37c>
 800951e:	eddf 0aa2 	vldr	s1, [pc, #648]	@ 80097a8 <plotter_begin+0x348>
 8009522:	ed9f 0a9f 	vldr	s0, [pc, #636]	@ 80097a0 <plotter_begin+0x340>
 8009526:	489d      	ldr	r0, [pc, #628]	@ (800979c <plotter_begin+0x33c>)
 8009528:	f000 fcb6 	bl	8009e98 <SIGNAL_config_sine>
	SINE_OFFSET, SINE_MIN_SETPOINT, SINE_MAX_SETPOINT);

	SIGNAL_init(&square_sg_PWM, SIGNAL_SQUARE);
 800952c:	2102      	movs	r1, #2
 800952e:	489f      	ldr	r0, [pc, #636]	@ (80097ac <plotter_begin+0x34c>)
 8009530:	f000 fc54 	bl	8009ddc <SIGNAL_init>
	SIGNAL_config_square(&square_sg_PWM, SQUARE_AMPLITUDE, SQUARE_FREQUENCY,
 8009534:	ed9f 3a9a 	vldr	s6, [pc, #616]	@ 80097a0 <plotter_begin+0x340>
 8009538:	eddf 2a9a 	vldr	s5, [pc, #616]	@ 80097a4 <plotter_begin+0x344>
 800953c:	ed9f 2aa7 	vldr	s4, [pc, #668]	@ 80097dc <plotter_begin+0x37c>
 8009540:	eddf 1aa6 	vldr	s3, [pc, #664]	@ 80097dc <plotter_begin+0x37c>
 8009544:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8009548:	eddf 0a97 	vldr	s1, [pc, #604]	@ 80097a8 <plotter_begin+0x348>
 800954c:	ed9f 0a94 	vldr	s0, [pc, #592]	@ 80097a0 <plotter_begin+0x340>
 8009550:	4896      	ldr	r0, [pc, #600]	@ (80097ac <plotter_begin+0x34c>)
 8009552:	f000 fccc 	bl	8009eee <SIGNAL_config_square>
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
	SQUARE_MIN_SETPOINT, SQUARE_MAX_SETPOINT);

	SIGNAL_init(&sine_sg_cascade, SIGNAL_SINE);
 8009556:	2100      	movs	r1, #0
 8009558:	4895      	ldr	r0, [pc, #596]	@ (80097b0 <plotter_begin+0x350>)
 800955a:	f000 fc3f 	bl	8009ddc <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_cascade, SINE_AMPLITUDE_CASCADE, SINE_FREQUENCY,
 800955e:	eddf 2a95 	vldr	s5, [pc, #596]	@ 80097b4 <plotter_begin+0x354>
 8009562:	ed9f 2a95 	vldr	s4, [pc, #596]	@ 80097b8 <plotter_begin+0x358>
 8009566:	eddf 1a9d 	vldr	s3, [pc, #628]	@ 80097dc <plotter_begin+0x37c>
 800956a:	ed9f 1a9c 	vldr	s2, [pc, #624]	@ 80097dc <plotter_begin+0x37c>
 800956e:	eddf 0a8e 	vldr	s1, [pc, #568]	@ 80097a8 <plotter_begin+0x348>
 8009572:	ed9f 0a90 	vldr	s0, [pc, #576]	@ 80097b4 <plotter_begin+0x354>
 8009576:	488e      	ldr	r0, [pc, #568]	@ (80097b0 <plotter_begin+0x350>)
 8009578:	f000 fc8e 	bl	8009e98 <SIGNAL_config_sine>
	SINE_PHASE,
	SINE_OFFSET, SINE_MIN_SETPOINT_CASCADE, SINE_MAX_SETPOINT_CASCADE);

	SIGNAL_init(&square_sg_cascade, SIGNAL_SQUARE);
 800957c:	2102      	movs	r1, #2
 800957e:	488f      	ldr	r0, [pc, #572]	@ (80097bc <plotter_begin+0x35c>)
 8009580:	f000 fc2c 	bl	8009ddc <SIGNAL_init>
	SIGNAL_config_square(&square_sg_cascade, SQUARE_AMPLITUDE_CASCADE,
 8009584:	eeb3 3a09 	vmov.f32	s6, #57	@ 0x41c80000  25.0
 8009588:	eefb 2a09 	vmov.f32	s5, #185	@ 0xc1c80000 -25.0
 800958c:	ed9f 2a93 	vldr	s4, [pc, #588]	@ 80097dc <plotter_begin+0x37c>
 8009590:	eddf 1a92 	vldr	s3, [pc, #584]	@ 80097dc <plotter_begin+0x37c>
 8009594:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8009598:	eddf 0a83 	vldr	s1, [pc, #524]	@ 80097a8 <plotter_begin+0x348>
 800959c:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 80095a0:	4886      	ldr	r0, [pc, #536]	@ (80097bc <plotter_begin+0x35c>)
 80095a2:	f000 fca4 	bl	8009eee <SIGNAL_config_square>
	SQUARE_FREQUENCY,
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
	SQUARE_MIN_SETPOINT_CASCADE, SQUARE_MAX_SETPOINT_CASCADE);

	SIGNAL_init(&sine_sg_prismatic, SIGNAL_SINE);
 80095a6:	2100      	movs	r1, #0
 80095a8:	4885      	ldr	r0, [pc, #532]	@ (80097c0 <plotter_begin+0x360>)
 80095aa:	f000 fc17 	bl	8009ddc <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 80095ae:	4b74      	ldr	r3, [pc, #464]	@ (8009780 <plotter_begin+0x320>)
 80095b0:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80095b4:	4610      	mov	r0, r2
 80095b6:	4619      	mov	r1, r3
 80095b8:	f7f7 facc 	bl	8000b54 <__aeabi_d2f>
 80095bc:	4604      	mov	r4, r0
	SINE_FREQUENCY, SINE_PHASE,
	SINE_OFFSET, -ZGX45RGG_400RPM_Constant.qd_max,
 80095be:	4b70      	ldr	r3, [pc, #448]	@ (8009780 <plotter_begin+0x320>)
 80095c0:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80095c4:	4610      	mov	r0, r2
 80095c6:	4619      	mov	r1, r3
 80095c8:	f7f7 fac4 	bl	8000b54 <__aeabi_d2f>
 80095cc:	4603      	mov	r3, r0
	SIGNAL_config_sine(&sine_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 80095ce:	ee07 3a90 	vmov	s15, r3
 80095d2:	eeb1 8a67 	vneg.f32	s16, s15
			ZGX45RGG_400RPM_Constant.qd_max);
 80095d6:	4b6a      	ldr	r3, [pc, #424]	@ (8009780 <plotter_begin+0x320>)
 80095d8:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_sine(&sine_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 80095dc:	4610      	mov	r0, r2
 80095de:	4619      	mov	r1, r3
 80095e0:	f7f7 fab8 	bl	8000b54 <__aeabi_d2f>
 80095e4:	4603      	mov	r3, r0
 80095e6:	ee02 3a90 	vmov	s5, r3
 80095ea:	eeb0 2a48 	vmov.f32	s4, s16
 80095ee:	eddf 1a7b 	vldr	s3, [pc, #492]	@ 80097dc <plotter_begin+0x37c>
 80095f2:	ed9f 1a7a 	vldr	s2, [pc, #488]	@ 80097dc <plotter_begin+0x37c>
 80095f6:	eddf 0a6c 	vldr	s1, [pc, #432]	@ 80097a8 <plotter_begin+0x348>
 80095fa:	ee00 4a10 	vmov	s0, r4
 80095fe:	4870      	ldr	r0, [pc, #448]	@ (80097c0 <plotter_begin+0x360>)
 8009600:	f000 fc4a 	bl	8009e98 <SIGNAL_config_sine>

	SIGNAL_init(&square_sg_prismatic, SIGNAL_SQUARE);
 8009604:	2102      	movs	r1, #2
 8009606:	486f      	ldr	r0, [pc, #444]	@ (80097c4 <plotter_begin+0x364>)
 8009608:	f000 fbe8 	bl	8009ddc <SIGNAL_init>
	SIGNAL_config_square(&square_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 800960c:	4b5c      	ldr	r3, [pc, #368]	@ (8009780 <plotter_begin+0x320>)
 800960e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8009612:	4610      	mov	r0, r2
 8009614:	4619      	mov	r1, r3
 8009616:	f7f7 fa9d 	bl	8000b54 <__aeabi_d2f>
 800961a:	4604      	mov	r4, r0
	SQUARE_FREQUENCY,
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
			-ZGX45RGG_400RPM_Constant.qd_max, ZGX45RGG_400RPM_Constant.qd_max);
 800961c:	4b58      	ldr	r3, [pc, #352]	@ (8009780 <plotter_begin+0x320>)
 800961e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8009622:	4610      	mov	r0, r2
 8009624:	4619      	mov	r1, r3
 8009626:	f7f7 fa95 	bl	8000b54 <__aeabi_d2f>
 800962a:	4603      	mov	r3, r0
	SIGNAL_config_square(&square_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 800962c:	ee07 3a90 	vmov	s15, r3
 8009630:	eeb1 8a67 	vneg.f32	s16, s15
			-ZGX45RGG_400RPM_Constant.qd_max, ZGX45RGG_400RPM_Constant.qd_max);
 8009634:	4b52      	ldr	r3, [pc, #328]	@ (8009780 <plotter_begin+0x320>)
 8009636:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_square(&square_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 800963a:	4610      	mov	r0, r2
 800963c:	4619      	mov	r1, r3
 800963e:	f7f7 fa89 	bl	8000b54 <__aeabi_d2f>
 8009642:	4603      	mov	r3, r0
 8009644:	ee03 3a10 	vmov	s6, r3
 8009648:	eef0 2a48 	vmov.f32	s5, s16
 800964c:	ed9f 2a63 	vldr	s4, [pc, #396]	@ 80097dc <plotter_begin+0x37c>
 8009650:	eddf 1a62 	vldr	s3, [pc, #392]	@ 80097dc <plotter_begin+0x37c>
 8009654:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8009658:	eddf 0a53 	vldr	s1, [pc, #332]	@ 80097a8 <plotter_begin+0x348>
 800965c:	ee00 4a10 	vmov	s0, r4
 8009660:	4858      	ldr	r0, [pc, #352]	@ (80097c4 <plotter_begin+0x364>)
 8009662:	f000 fc44 	bl	8009eee <SIGNAL_config_square>

	SIGNAL_init(&sine_sg_revolute, SIGNAL_SINE);
 8009666:	2100      	movs	r1, #0
 8009668:	4857      	ldr	r0, [pc, #348]	@ (80097c8 <plotter_begin+0x368>)
 800966a:	f000 fbb7 	bl	8009ddc <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 800966e:	4b48      	ldr	r3, [pc, #288]	@ (8009790 <plotter_begin+0x330>)
 8009670:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8009674:	4610      	mov	r0, r2
 8009676:	4619      	mov	r1, r3
 8009678:	f7f7 fa6c 	bl	8000b54 <__aeabi_d2f>
 800967c:	4604      	mov	r4, r0
	SINE_FREQUENCY, SINE_PHASE,
	SINE_OFFSET, -ZGX45RGG_150RPM_Constant.qd_max,
 800967e:	4b44      	ldr	r3, [pc, #272]	@ (8009790 <plotter_begin+0x330>)
 8009680:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8009684:	4610      	mov	r0, r2
 8009686:	4619      	mov	r1, r3
 8009688:	f7f7 fa64 	bl	8000b54 <__aeabi_d2f>
 800968c:	4603      	mov	r3, r0
	SIGNAL_config_sine(&sine_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 800968e:	ee07 3a90 	vmov	s15, r3
 8009692:	eeb1 8a67 	vneg.f32	s16, s15
			ZGX45RGG_150RPM_Constant.qd_max);
 8009696:	4b3e      	ldr	r3, [pc, #248]	@ (8009790 <plotter_begin+0x330>)
 8009698:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_sine(&sine_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 800969c:	4610      	mov	r0, r2
 800969e:	4619      	mov	r1, r3
 80096a0:	f7f7 fa58 	bl	8000b54 <__aeabi_d2f>
 80096a4:	4603      	mov	r3, r0
 80096a6:	ee02 3a90 	vmov	s5, r3
 80096aa:	eeb0 2a48 	vmov.f32	s4, s16
 80096ae:	eddf 1a4b 	vldr	s3, [pc, #300]	@ 80097dc <plotter_begin+0x37c>
 80096b2:	ed9f 1a4a 	vldr	s2, [pc, #296]	@ 80097dc <plotter_begin+0x37c>
 80096b6:	eddf 0a3c 	vldr	s1, [pc, #240]	@ 80097a8 <plotter_begin+0x348>
 80096ba:	ee00 4a10 	vmov	s0, r4
 80096be:	4842      	ldr	r0, [pc, #264]	@ (80097c8 <plotter_begin+0x368>)
 80096c0:	f000 fbea 	bl	8009e98 <SIGNAL_config_sine>

	SIGNAL_init(&square_sg_revolute, SIGNAL_SQUARE);
 80096c4:	2102      	movs	r1, #2
 80096c6:	4841      	ldr	r0, [pc, #260]	@ (80097cc <plotter_begin+0x36c>)
 80096c8:	f000 fb88 	bl	8009ddc <SIGNAL_init>
	SIGNAL_config_square(&square_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 80096cc:	4b30      	ldr	r3, [pc, #192]	@ (8009790 <plotter_begin+0x330>)
 80096ce:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80096d2:	4610      	mov	r0, r2
 80096d4:	4619      	mov	r1, r3
 80096d6:	f7f7 fa3d 	bl	8000b54 <__aeabi_d2f>
 80096da:	4604      	mov	r4, r0
	SQUARE_FREQUENCY,
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
			-ZGX45RGG_150RPM_Constant.qd_max, ZGX45RGG_150RPM_Constant.qd_max);
 80096dc:	4b2c      	ldr	r3, [pc, #176]	@ (8009790 <plotter_begin+0x330>)
 80096de:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80096e2:	4610      	mov	r0, r2
 80096e4:	4619      	mov	r1, r3
 80096e6:	f7f7 fa35 	bl	8000b54 <__aeabi_d2f>
 80096ea:	4603      	mov	r3, r0
	SIGNAL_config_square(&square_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 80096ec:	ee07 3a90 	vmov	s15, r3
 80096f0:	eeb1 8a67 	vneg.f32	s16, s15
			-ZGX45RGG_150RPM_Constant.qd_max, ZGX45RGG_150RPM_Constant.qd_max);
 80096f4:	4b26      	ldr	r3, [pc, #152]	@ (8009790 <plotter_begin+0x330>)
 80096f6:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_square(&square_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 80096fa:	4610      	mov	r0, r2
 80096fc:	4619      	mov	r1, r3
 80096fe:	f7f7 fa29 	bl	8000b54 <__aeabi_d2f>
 8009702:	4603      	mov	r3, r0
 8009704:	ee03 3a10 	vmov	s6, r3
 8009708:	eef0 2a48 	vmov.f32	s5, s16
 800970c:	ed9f 2a33 	vldr	s4, [pc, #204]	@ 80097dc <plotter_begin+0x37c>
 8009710:	eddf 1a32 	vldr	s3, [pc, #200]	@ 80097dc <plotter_begin+0x37c>
 8009714:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8009718:	eddf 0a23 	vldr	s1, [pc, #140]	@ 80097a8 <plotter_begin+0x348>
 800971c:	ee00 4a10 	vmov	s0, r4
 8009720:	482a      	ldr	r0, [pc, #168]	@ (80097cc <plotter_begin+0x36c>)
 8009722:	f000 fbe4 	bl	8009eee <SIGNAL_config_square>

	UnitConverter_init(&converter_system);
 8009726:	482a      	ldr	r0, [pc, #168]	@ (80097d0 <plotter_begin+0x370>)
 8009728:	f7fb f990 	bl	8004a4c <UnitConverter_init>

	QEI_init(&prismatic_encoder, ENC_TIM1, ENC_PPR, ENC_FREQ, MOTOR1_RATIO,
			Disturbance_Constant.prismatic_pulley_radius * 2.0 * 1000.0);
 800972c:	4b15      	ldr	r3, [pc, #84]	@ (8009784 <plotter_begin+0x324>)
 800972e:	691b      	ldr	r3, [r3, #16]
 8009730:	4618      	mov	r0, r3
 8009732:	f7f6 fed5 	bl	80004e0 <__aeabi_f2d>
 8009736:	4602      	mov	r2, r0
 8009738:	460b      	mov	r3, r1
 800973a:	f7f6 fd73 	bl	8000224 <__adddf3>
 800973e:	4602      	mov	r2, r0
 8009740:	460b      	mov	r3, r1
 8009742:	4610      	mov	r0, r2
 8009744:	4619      	mov	r1, r3
 8009746:	f04f 0200 	mov.w	r2, #0
 800974a:	4b0f      	ldr	r3, [pc, #60]	@ (8009788 <plotter_begin+0x328>)
 800974c:	f7f6 ff20 	bl	8000590 <__aeabi_dmul>
 8009750:	4602      	mov	r2, r0
 8009752:	460b      	mov	r3, r1
	QEI_init(&prismatic_encoder, ENC_TIM1, ENC_PPR, ENC_FREQ, MOTOR1_RATIO,
 8009754:	4610      	mov	r0, r2
 8009756:	4619      	mov	r1, r3
 8009758:	f7f7 f9fc 	bl	8000b54 <__aeabi_d2f>
 800975c:	4603      	mov	r3, r0
 800975e:	ee00 3a90 	vmov	s1, r3
 8009762:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8009766:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800976a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800976e:	4919      	ldr	r1, [pc, #100]	@ (80097d4 <plotter_begin+0x374>)
 8009770:	4819      	ldr	r0, [pc, #100]	@ (80097d8 <plotter_begin+0x378>)
 8009772:	f7fa faef 	bl	8003d54 <QEI_init>
 8009776:	e033      	b.n	80097e0 <plotter_begin+0x380>
 8009778:	55555555 	.word	0x55555555
 800977c:	3fe55555 	.word	0x3fe55555
 8009780:	20000080 	.word	0x20000080
 8009784:	20000100 	.word	0x20000100
 8009788:	408f4000 	.word	0x408f4000
 800978c:	407f4000 	.word	0x407f4000
 8009790:	20000000 	.word	0x20000000
 8009794:	40100000 	.word	0x40100000
 8009798:	40040000 	.word	0x40040000
 800979c:	20000b5c 	.word	0x20000b5c
 80097a0:	477fff00 	.word	0x477fff00
 80097a4:	c77fff00 	.word	0xc77fff00
 80097a8:	3dcccccd 	.word	0x3dcccccd
 80097ac:	20000ba0 	.word	0x20000ba0
 80097b0:	20000be4 	.word	0x20000be4
 80097b4:	43480000 	.word	0x43480000
 80097b8:	c3480000 	.word	0xc3480000
 80097bc:	20000c28 	.word	0x20000c28
 80097c0:	20000c6c 	.word	0x20000c6c
 80097c4:	20000cb0 	.word	0x20000cb0
 80097c8:	20000cf4 	.word	0x20000cf4
 80097cc:	20000d38 	.word	0x20000d38
 80097d0:	20000d7c 	.word	0x20000d7c
 80097d4:	2000202c 	.word	0x2000202c
 80097d8:	20000988 	.word	0x20000988
 80097dc:	00000000 	.word	0x00000000
	QEI_init(&revolute_encoder, ENC_TIM2, ENC_PPR, ENC_FREQ, MOTOR2_RATIO,
 80097e0:	ed5f 0a02 	vldr	s1, [pc, #-8]	@ 80097dc <plotter_begin+0x37c>
 80097e4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80097e8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80097ec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80097f0:	49c1      	ldr	r1, [pc, #772]	@ (8009af8 <plotter_begin+0x698>)
 80097f2:	48c2      	ldr	r0, [pc, #776]	@ (8009afc <plotter_begin+0x69c>)
 80097f4:	f7fa faae 	bl	8003d54 <QEI_init>
	MOTOR2_PULLEY_DIAMETER);

	MDXX_GPIO_init(&prismatic_motor, MOTOR1_TIM, MOTOR1_TIM_CH, MOTOR1_GPIOx,
 80097f8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80097fc:	9300      	str	r3, [sp, #0]
 80097fe:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009802:	2204      	movs	r2, #4
 8009804:	49be      	ldr	r1, [pc, #760]	@ (8009b00 <plotter_begin+0x6a0>)
 8009806:	48bf      	ldr	r0, [pc, #764]	@ (8009b04 <plotter_begin+0x6a4>)
 8009808:	f7f7 fd98 	bl	800133c <MDXX_GPIO_init>
	MOTOR1_GPIO_Pin);
	MDXX_GPIO_init(&revolute_motor, MOTOR2_TIM, MOTOR2_TIM_CH, MOTOR2_GPIOx,
 800980c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009810:	9300      	str	r3, [sp, #0]
 8009812:	4bbd      	ldr	r3, [pc, #756]	@ (8009b08 <plotter_begin+0x6a8>)
 8009814:	2200      	movs	r2, #0
 8009816:	49ba      	ldr	r1, [pc, #744]	@ (8009b00 <plotter_begin+0x6a0>)
 8009818:	48bc      	ldr	r0, [pc, #752]	@ (8009b0c <plotter_begin+0x6ac>)
 800981a:	f7f7 fd8f 	bl	800133c <MDXX_GPIO_init>
	MOTOR2_GPIO_Pin);

	PWM_init(&servo, SERVO_TIM, SERVO_TIM_CH);
 800981e:	220c      	movs	r2, #12
 8009820:	49bb      	ldr	r1, [pc, #748]	@ (8009b10 <plotter_begin+0x6b0>)
 8009822:	48bc      	ldr	r0, [pc, #752]	@ (8009b14 <plotter_begin+0x6b4>)
 8009824:	f7fa f868 	bl	80038f8 <PWM_init>

	MDXX_set_range(&prismatic_motor, 2000, 0);
 8009828:	eddf 0abb 	vldr	s1, [pc, #748]	@ 8009b18 <plotter_begin+0x6b8>
 800982c:	ed9f 0abb 	vldr	s0, [pc, #748]	@ 8009b1c <plotter_begin+0x6bc>
 8009830:	48b4      	ldr	r0, [pc, #720]	@ (8009b04 <plotter_begin+0x6a4>)
 8009832:	f7f7 fda7 	bl	8001384 <MDXX_set_range>
	MDXX_set_range(&revolute_motor, 2000, 0);
 8009836:	eddf 0ab8 	vldr	s1, [pc, #736]	@ 8009b18 <plotter_begin+0x6b8>
 800983a:	ed9f 0ab8 	vldr	s0, [pc, #736]	@ 8009b1c <plotter_begin+0x6bc>
 800983e:	48b3      	ldr	r0, [pc, #716]	@ (8009b0c <plotter_begin+0x6ac>)
 8009840:	f7f7 fda0 	bl	8001384 <MDXX_set_range>
//			ZGX45RGG_400RPM_Constant.sd_max);
//	PID_CONTROLLER_Init(&prismatic_velocity_pid, 148, 0.1, 110,
//			ZGX45RGG_400RPM_Constant.U_max);

	PID_CONTROLLER_Init(&prismatic_position_pid, 85, 2e-1, 200,
			ZGX45RGG_400RPM_Constant.sd_max);
 8009844:	4bb6      	ldr	r3, [pc, #728]	@ (8009b20 <plotter_begin+0x6c0>)
 8009846:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
	PID_CONTROLLER_Init(&prismatic_position_pid, 85, 2e-1, 200,
 800984a:	4610      	mov	r0, r2
 800984c:	4619      	mov	r1, r3
 800984e:	f7f7 f981 	bl	8000b54 <__aeabi_d2f>
 8009852:	4603      	mov	r3, r0
 8009854:	ee01 3a90 	vmov	s3, r3
 8009858:	ed9f 1ab2 	vldr	s2, [pc, #712]	@ 8009b24 <plotter_begin+0x6c4>
 800985c:	eddf 0ab2 	vldr	s1, [pc, #712]	@ 8009b28 <plotter_begin+0x6c8>
 8009860:	ed9f 0ab2 	vldr	s0, [pc, #712]	@ 8009b2c <plotter_begin+0x6cc>
 8009864:	48b2      	ldr	r0, [pc, #712]	@ (8009b30 <plotter_begin+0x6d0>)
 8009866:	f7f7 fca4 	bl	80011b2 <PID_CONTROLLER_Init>
	PID_CONTROLLER_Init(&prismatic_velocity_pid, 120, 2e-5, 0,
			ZGX45RGG_400RPM_Constant.U_max);
 800986a:	4bad      	ldr	r3, [pc, #692]	@ (8009b20 <plotter_begin+0x6c0>)
 800986c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	PID_CONTROLLER_Init(&prismatic_velocity_pid, 120, 2e-5, 0,
 8009870:	4610      	mov	r0, r2
 8009872:	4619      	mov	r1, r3
 8009874:	f7f7 f96e 	bl	8000b54 <__aeabi_d2f>
 8009878:	4603      	mov	r3, r0
 800987a:	ee01 3a90 	vmov	s3, r3
 800987e:	ed9f 1aa6 	vldr	s2, [pc, #664]	@ 8009b18 <plotter_begin+0x6b8>
 8009882:	eddf 0aac 	vldr	s1, [pc, #688]	@ 8009b34 <plotter_begin+0x6d4>
 8009886:	ed9f 0aac 	vldr	s0, [pc, #688]	@ 8009b38 <plotter_begin+0x6d8>
 800988a:	48ac      	ldr	r0, [pc, #688]	@ (8009b3c <plotter_begin+0x6dc>)
 800988c:	f7f7 fc91 	bl	80011b2 <PID_CONTROLLER_Init>

	PID_CONTROLLER_Init(&revolute_position_pid, 250, 0.005, 700,
			ZGX45RGG_150RPM_Constant.qd_max);
 8009890:	4bab      	ldr	r3, [pc, #684]	@ (8009b40 <plotter_begin+0x6e0>)
 8009892:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	PID_CONTROLLER_Init(&revolute_position_pid, 250, 0.005, 700,
 8009896:	4610      	mov	r0, r2
 8009898:	4619      	mov	r1, r3
 800989a:	f7f7 f95b 	bl	8000b54 <__aeabi_d2f>
 800989e:	4603      	mov	r3, r0
 80098a0:	ee01 3a90 	vmov	s3, r3
 80098a4:	ed9f 1aa7 	vldr	s2, [pc, #668]	@ 8009b44 <plotter_begin+0x6e4>
 80098a8:	eddf 0aa7 	vldr	s1, [pc, #668]	@ 8009b48 <plotter_begin+0x6e8>
 80098ac:	ed9f 0aa7 	vldr	s0, [pc, #668]	@ 8009b4c <plotter_begin+0x6ec>
 80098b0:	48a7      	ldr	r0, [pc, #668]	@ (8009b50 <plotter_begin+0x6f0>)
 80098b2:	f7f7 fc7e 	bl	80011b2 <PID_CONTROLLER_Init>
	PID_CONTROLLER_Init(&revolute_velocity_pid, 2280, 25, 3000, //2280->2275 (P), 25->30 (I), 3000 -> 2996 (D)
			ZGX45RGG_150RPM_Constant.U_max);
 80098b6:	4ba2      	ldr	r3, [pc, #648]	@ (8009b40 <plotter_begin+0x6e0>)
 80098b8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	PID_CONTROLLER_Init(&revolute_velocity_pid, 2280, 25, 3000, //2280->2275 (P), 25->30 (I), 3000 -> 2996 (D)
 80098bc:	4610      	mov	r0, r2
 80098be:	4619      	mov	r1, r3
 80098c0:	f7f7 f948 	bl	8000b54 <__aeabi_d2f>
 80098c4:	4603      	mov	r3, r0
 80098c6:	ee01 3a90 	vmov	s3, r3
 80098ca:	ed9f 1aa2 	vldr	s2, [pc, #648]	@ 8009b54 <plotter_begin+0x6f4>
 80098ce:	eef3 0a09 	vmov.f32	s1, #57	@ 0x41c80000  25.0
 80098d2:	ed9f 0aa1 	vldr	s0, [pc, #644]	@ 8009b58 <plotter_begin+0x6f8>
 80098d6:	48a1      	ldr	r0, [pc, #644]	@ (8009b5c <plotter_begin+0x6fc>)
 80098d8:	f7f7 fc6b 	bl	80011b2 <PID_CONTROLLER_Init>
//			ZGX45RGG_150RPM_Constant.qd_max);
//	PID_CONTROLLER_Init(&revolute_velocity_pid, 2275, 30.5, 2996, //2280->2275 (P), 25->30 (I), 3000 -> 2996 (D)
//			ZGX45RGG_150RPM_Constant.U_max);

	PID_CONTROLLER_Init(&revolute_joy_pid, 7500, 100, 2000,
			ZGX45RGG_150RPM_Constant.U_max);
 80098dc:	4b98      	ldr	r3, [pc, #608]	@ (8009b40 <plotter_begin+0x6e0>)
 80098de:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	PID_CONTROLLER_Init(&revolute_joy_pid, 7500, 100, 2000,
 80098e2:	4610      	mov	r0, r2
 80098e4:	4619      	mov	r1, r3
 80098e6:	f7f7 f935 	bl	8000b54 <__aeabi_d2f>
 80098ea:	4603      	mov	r3, r0
 80098ec:	ee01 3a90 	vmov	s3, r3
 80098f0:	ed9f 1a8a 	vldr	s2, [pc, #552]	@ 8009b1c <plotter_begin+0x6bc>
 80098f4:	eddf 0a9a 	vldr	s1, [pc, #616]	@ 8009b60 <plotter_begin+0x700>
 80098f8:	ed9f 0a9a 	vldr	s0, [pc, #616]	@ 8009b64 <plotter_begin+0x704>
 80098fc:	489a      	ldr	r0, [pc, #616]	@ (8009b68 <plotter_begin+0x708>)
 80098fe:	f7f7 fc58 	bl	80011b2 <PID_CONTROLLER_Init>

	REVOLUTE_MOTOR_FFD_Init(&revolute_motor_ffd, &ZGX45RGG_150RPM_Constant);
 8009902:	498f      	ldr	r1, [pc, #572]	@ (8009b40 <plotter_begin+0x6e0>)
 8009904:	4899      	ldr	r0, [pc, #612]	@ (8009b6c <plotter_begin+0x70c>)
 8009906:	f7f7 fe17 	bl	8001538 <REVOLUTE_MOTOR_FFD_Init>
	PRISMATIC_MOTOR_FFD_Init(&prismatic_motor_ffd, &ZGX45RGG_400RPM_Constant);
 800990a:	4985      	ldr	r1, [pc, #532]	@ (8009b20 <plotter_begin+0x6c0>)
 800990c:	4898      	ldr	r0, [pc, #608]	@ (8009b70 <plotter_begin+0x710>)
 800990e:	f7f7 ff91 	bl	8001834 <PRISMATIC_MOTOR_FFD_Init>

	REVOLUTE_MOTOR_DFD_Init(&revolute_motor_dfd, &ZGX45RGG_150RPM_Constant,
 8009912:	4a98      	ldr	r2, [pc, #608]	@ (8009b74 <plotter_begin+0x714>)
 8009914:	498a      	ldr	r1, [pc, #552]	@ (8009b40 <plotter_begin+0x6e0>)
 8009916:	4898      	ldr	r0, [pc, #608]	@ (8009b78 <plotter_begin+0x718>)
 8009918:	f7f7 fe9d 	bl	8001656 <REVOLUTE_MOTOR_DFD_Init>
			&Disturbance_Constant);
	PRISMATIC_MOTOR_DFD_Init(&prismatic_motor_dfd, &ZGX45RGG_400RPM_Constant,
 800991c:	4a95      	ldr	r2, [pc, #596]	@ (8009b74 <plotter_begin+0x714>)
 800991e:	4980      	ldr	r1, [pc, #512]	@ (8009b20 <plotter_begin+0x6c0>)
 8009920:	4896      	ldr	r0, [pc, #600]	@ (8009b7c <plotter_begin+0x71c>)
 8009922:	f7f8 f816 	bl	8001952 <PRISMATIC_MOTOR_DFD_Init>
			&Disturbance_Constant);

	ADC_DMA_Init(&joystick, &hadc1, joystick_buffer, ADC_BUFFER_SIZE,
 8009926:	2302      	movs	r3, #2
 8009928:	9300      	str	r3, [sp, #0]
 800992a:	eddf 0a95 	vldr	s1, [pc, #596]	@ 8009b80 <plotter_begin+0x720>
 800992e:	ed9f 0a95 	vldr	s0, [pc, #596]	@ 8009b84 <plotter_begin+0x724>
 8009932:	2364      	movs	r3, #100	@ 0x64
 8009934:	4a94      	ldr	r2, [pc, #592]	@ (8009b88 <plotter_begin+0x728>)
 8009936:	4995      	ldr	r1, [pc, #596]	@ (8009b8c <plotter_begin+0x72c>)
 8009938:	4895      	ldr	r0, [pc, #596]	@ (8009b90 <plotter_begin+0x730>)
 800993a:	f7f7 faf1 	bl	8000f20 <ADC_DMA_Init>
	ADC_CHANNELS, ADC_VREF, ADC_RESOLUTION);
	ADC_DMA_SetCenterPoint(&joystick, ADC_CENTERPOINT, ADC_ERROR);
 800993e:	2105      	movs	r1, #5
 8009940:	ed9f 0a94 	vldr	s0, [pc, #592]	@ 8009b94 <plotter_begin+0x734>
 8009944:	4892      	ldr	r0, [pc, #584]	@ (8009b90 <plotter_begin+0x730>)
 8009946:	f7f7 fb9d 	bl	8001084 <ADC_DMA_SetCenterPoint>
	ADC_DMA_Start(&joystick);
 800994a:	4891      	ldr	r0, [pc, #580]	@ (8009b90 <plotter_begin+0x730>)
 800994c:	f7f7 fb40 	bl	8000fd0 <ADC_DMA_Start>

	FIR_init(&prismatic_lp_accel, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 8009950:	eddf 0a91 	vldr	s1, [pc, #580]	@ 8009b98 <plotter_begin+0x738>
 8009954:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 8009958:	211f      	movs	r1, #31
 800995a:	4890      	ldr	r0, [pc, #576]	@ (8009b9c <plotter_begin+0x73c>)
 800995c:	f7f8 f8c0 	bl	8001ae0 <FIR_init>
	FIR_init(&revolute_lp_accel, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 8009960:	eddf 0a8d 	vldr	s1, [pc, #564]	@ 8009b98 <plotter_begin+0x738>
 8009964:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 8009968:	211f      	movs	r1, #31
 800996a:	488d      	ldr	r0, [pc, #564]	@ (8009ba0 <plotter_begin+0x740>)
 800996c:	f7f8 f8b8 	bl	8001ae0 <FIR_init>

	FIR_init(&prismatic_lp, NUM_TAPS, 25, SAMPLE_RATE);
 8009970:	eddf 0a89 	vldr	s1, [pc, #548]	@ 8009b98 <plotter_begin+0x738>
 8009974:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8009978:	211f      	movs	r1, #31
 800997a:	488a      	ldr	r0, [pc, #552]	@ (8009ba4 <plotter_begin+0x744>)
 800997c:	f7f8 f8b0 	bl	8001ae0 <FIR_init>
	FIR_init(&revolute_lp, NUM_TAPS, 25, SAMPLE_RATE);
 8009980:	eddf 0a85 	vldr	s1, [pc, #532]	@ 8009b98 <plotter_begin+0x738>
 8009984:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8009988:	211f      	movs	r1, #31
 800998a:	4887      	ldr	r0, [pc, #540]	@ (8009ba8 <plotter_begin+0x748>)
 800998c:	f7f8 f8a8 	bl	8001ae0 <FIR_init>

	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 8009990:	4b63      	ldr	r3, [pc, #396]	@ (8009b20 <plotter_begin+0x6c0>)
 8009992:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009996:	4610      	mov	r0, r2
 8009998:	4619      	mov	r1, r3
 800999a:	f7f7 f8db 	bl	8000b54 <__aeabi_d2f>
 800999e:	4604      	mov	r4, r0
			ZGX45RGG_400RPM_Constant.B, ZGX45RGG_400RPM_Constant.Kt,
 80099a0:	4b5f      	ldr	r3, [pc, #380]	@ (8009b20 <plotter_begin+0x6c0>)
 80099a2:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 80099a6:	4610      	mov	r0, r2
 80099a8:	4619      	mov	r1, r3
 80099aa:	f7f7 f8d3 	bl	8000b54 <__aeabi_d2f>
 80099ae:	4605      	mov	r5, r0
			ZGX45RGG_400RPM_Constant.B, ZGX45RGG_400RPM_Constant.Kt,
 80099b0:	4b5b      	ldr	r3, [pc, #364]	@ (8009b20 <plotter_begin+0x6c0>)
 80099b2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 80099b6:	4610      	mov	r0, r2
 80099b8:	4619      	mov	r1, r3
 80099ba:	f7f7 f8cb 	bl	8000b54 <__aeabi_d2f>
 80099be:	4606      	mov	r6, r0
			ZGX45RGG_400RPM_Constant.Ke, ZGX45RGG_400RPM_Constant.R,
 80099c0:	4b57      	ldr	r3, [pc, #348]	@ (8009b20 <plotter_begin+0x6c0>)
 80099c2:	e9d3 2300 	ldrd	r2, r3, [r3]
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 80099c6:	4610      	mov	r0, r2
 80099c8:	4619      	mov	r1, r3
 80099ca:	f7f7 f8c3 	bl	8000b54 <__aeabi_d2f>
 80099ce:	4680      	mov	r8, r0
			ZGX45RGG_400RPM_Constant.Ke, ZGX45RGG_400RPM_Constant.R,
 80099d0:	4b53      	ldr	r3, [pc, #332]	@ (8009b20 <plotter_begin+0x6c0>)
 80099d2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 80099d6:	4610      	mov	r0, r2
 80099d8:	4619      	mov	r1, r3
 80099da:	f7f7 f8bb 	bl	8000b54 <__aeabi_d2f>
 80099de:	4681      	mov	r9, r0
			ZGX45RGG_400RPM_Constant.L, 1.0, 1.0);
 80099e0:	4b4f      	ldr	r3, [pc, #316]	@ (8009b20 <plotter_begin+0x6c0>)
 80099e2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 80099e6:	4610      	mov	r0, r2
 80099e8:	4619      	mov	r1, r3
 80099ea:	f7f7 f8b3 	bl	8000b54 <__aeabi_d2f>
 80099ee:	4603      	mov	r3, r0
 80099f0:	eeb7 4a00 	vmov.f32	s8, #112	@ 0x3f800000  1.0
 80099f4:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 80099f8:	ee03 3a10 	vmov	s6, r3
 80099fc:	ee02 9a90 	vmov	s5, r9
 8009a00:	ee02 8a10 	vmov	s4, r8
 8009a04:	ee01 6a90 	vmov	s3, r6
 8009a08:	ee01 5a10 	vmov	s2, r5
 8009a0c:	ee00 4a90 	vmov	s1, r4
 8009a10:	ed9f 0a66 	vldr	s0, [pc, #408]	@ 8009bac <plotter_begin+0x74c>
 8009a14:	4866      	ldr	r0, [pc, #408]	@ (8009bb0 <plotter_begin+0x750>)
 8009a16:	f7f8 fd5b 	bl	80024d0 <MotorKalman_Init>

	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 8009a1a:	4b49      	ldr	r3, [pc, #292]	@ (8009b40 <plotter_begin+0x6e0>)
 8009a1c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8009a20:	4610      	mov	r0, r2
 8009a22:	4619      	mov	r1, r3
 8009a24:	f7f7 f896 	bl	8000b54 <__aeabi_d2f>
 8009a28:	4604      	mov	r4, r0
			ZGX45RGG_150RPM_Constant.L, ZGX45RGG_150RPM_Constant.J,
 8009a2a:	4b45      	ldr	r3, [pc, #276]	@ (8009b40 <plotter_begin+0x6e0>)
 8009a2c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 8009a30:	4610      	mov	r0, r2
 8009a32:	4619      	mov	r1, r3
 8009a34:	f7f7 f88e 	bl	8000b54 <__aeabi_d2f>
 8009a38:	4605      	mov	r5, r0
			ZGX45RGG_150RPM_Constant.L, ZGX45RGG_150RPM_Constant.J,
 8009a3a:	4b41      	ldr	r3, [pc, #260]	@ (8009b40 <plotter_begin+0x6e0>)
 8009a3c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 8009a40:	4610      	mov	r0, r2
 8009a42:	4619      	mov	r1, r3
 8009a44:	f7f7 f886 	bl	8000b54 <__aeabi_d2f>
 8009a48:	4606      	mov	r6, r0
			ZGX45RGG_150RPM_Constant.B * 2.2, ZGX45RGG_150RPM_Constant.Ke,
 8009a4a:	4b3d      	ldr	r3, [pc, #244]	@ (8009b40 <plotter_begin+0x6e0>)
 8009a4c:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8009a50:	a327      	add	r3, pc, #156	@ (adr r3, 8009af0 <plotter_begin+0x690>)
 8009a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a56:	f7f6 fd9b 	bl	8000590 <__aeabi_dmul>
 8009a5a:	4602      	mov	r2, r0
 8009a5c:	460b      	mov	r3, r1
	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 8009a5e:	4610      	mov	r0, r2
 8009a60:	4619      	mov	r1, r3
 8009a62:	f7f7 f877 	bl	8000b54 <__aeabi_d2f>
 8009a66:	4680      	mov	r8, r0
			ZGX45RGG_150RPM_Constant.B * 2.2, ZGX45RGG_150RPM_Constant.Ke,
 8009a68:	4b35      	ldr	r3, [pc, #212]	@ (8009b40 <plotter_begin+0x6e0>)
 8009a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 8009a6e:	4610      	mov	r0, r2
 8009a70:	4619      	mov	r1, r3
 8009a72:	f7f7 f86f 	bl	8000b54 <__aeabi_d2f>
 8009a76:	4681      	mov	r9, r0
			ZGX45RGG_150RPM_Constant.Kt, 0.001, &revolute_A, &revolute_B);
 8009a78:	4b31      	ldr	r3, [pc, #196]	@ (8009b40 <plotter_begin+0x6e0>)
 8009a7a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 8009a7e:	4610      	mov	r0, r2
 8009a80:	4619      	mov	r1, r3
 8009a82:	f7f7 f867 	bl	8000b54 <__aeabi_d2f>
 8009a86:	4603      	mov	r3, r0
 8009a88:	494a      	ldr	r1, [pc, #296]	@ (8009bb4 <plotter_begin+0x754>)
 8009a8a:	484b      	ldr	r0, [pc, #300]	@ (8009bb8 <plotter_begin+0x758>)
 8009a8c:	ed9f 3a47 	vldr	s6, [pc, #284]	@ 8009bac <plotter_begin+0x74c>
 8009a90:	ee02 3a90 	vmov	s5, r3
 8009a94:	ee02 9a10 	vmov	s4, r9
 8009a98:	ee01 8a90 	vmov	s3, r8
 8009a9c:	ee01 6a10 	vmov	s2, r6
 8009aa0:	ee00 5a90 	vmov	s1, r5
 8009aa4:	ee00 4a10 	vmov	s0, r4
 8009aa8:	f7f9 febe 	bl	8003828 <GenerateMotorMatrices>

	Kalman_Start(&revolute_kalman, revolute_A, revolute_B, REVOLUTE_Q,
 8009aac:	eddf 0a43 	vldr	s1, [pc, #268]	@ 8009bbc <plotter_begin+0x75c>
 8009ab0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8009ab4:	4a3f      	ldr	r2, [pc, #252]	@ (8009bb4 <plotter_begin+0x754>)
 8009ab6:	4940      	ldr	r1, [pc, #256]	@ (8009bb8 <plotter_begin+0x758>)
 8009ab8:	4841      	ldr	r0, [pc, #260]	@ (8009bc0 <plotter_begin+0x760>)
 8009aba:	f7fb fc31 	bl	8005320 <Kalman_Start>
	REVOLUTE_R);

	Modbus_init(&ModBus, MODBUS_USART, MODBUS_DATA_SENDING_PERIOD_TIM,
 8009abe:	23c8      	movs	r3, #200	@ 0xc8
 8009ac0:	9301      	str	r3, [sp, #4]
 8009ac2:	2315      	movs	r3, #21
 8009ac4:	9300      	str	r3, [sp, #0]
 8009ac6:	4b3f      	ldr	r3, [pc, #252]	@ (8009bc4 <plotter_begin+0x764>)
 8009ac8:	4a3f      	ldr	r2, [pc, #252]	@ (8009bc8 <plotter_begin+0x768>)
 8009aca:	4940      	ldr	r1, [pc, #256]	@ (8009bcc <plotter_begin+0x76c>)
 8009acc:	4840      	ldr	r0, [pc, #256]	@ (8009bd0 <plotter_begin+0x770>)
 8009ace:	f7f8 f9f7 	bl	8001ec0 <Modbus_init>
			registerFrame, MODBUS_SLAVE_ADDRESS, MODBUS_REGISTER_FRAME_SIZE);

	HAL_TIM_Base_Start_IT(CONTROL_TIM);
 8009ad2:	4840      	ldr	r0, [pc, #256]	@ (8009bd4 <plotter_begin+0x774>)
 8009ad4:	f004 fe32 	bl	800e73c <HAL_TIM_Base_Start_IT>

	plotter_reset();
 8009ad8:	f000 f87e 	bl	8009bd8 <plotter_reset>
}
 8009adc:	bf00      	nop
 8009ade:	3704      	adds	r7, #4
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	ecbd 8b02 	vpop	{d8}
 8009ae6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009aea:	bf00      	nop
 8009aec:	f3af 8000 	nop.w
 8009af0:	9999999a 	.word	0x9999999a
 8009af4:	40019999 	.word	0x40019999
 8009af8:	200020f8 	.word	0x200020f8
 8009afc:	200009e4 	.word	0x200009e4
 8009b00:	20002290 	.word	0x20002290
 8009b04:	200008f0 	.word	0x200008f0
 8009b08:	48000800 	.word	0x48000800
 8009b0c:	2000093c 	.word	0x2000093c
 8009b10:	20001e94 	.word	0x20001e94
 8009b14:	20000b20 	.word	0x20000b20
 8009b18:	00000000 	.word	0x00000000
 8009b1c:	44fa0000 	.word	0x44fa0000
 8009b20:	20000080 	.word	0x20000080
 8009b24:	43480000 	.word	0x43480000
 8009b28:	3e4ccccd 	.word	0x3e4ccccd
 8009b2c:	42aa0000 	.word	0x42aa0000
 8009b30:	20000a40 	.word	0x20000a40
 8009b34:	37a7c5ac 	.word	0x37a7c5ac
 8009b38:	42f00000 	.word	0x42f00000
 8009b3c:	20000a68 	.word	0x20000a68
 8009b40:	20000000 	.word	0x20000000
 8009b44:	442f0000 	.word	0x442f0000
 8009b48:	3ba3d70a 	.word	0x3ba3d70a
 8009b4c:	437a0000 	.word	0x437a0000
 8009b50:	20000a90 	.word	0x20000a90
 8009b54:	453b8000 	.word	0x453b8000
 8009b58:	450e8000 	.word	0x450e8000
 8009b5c:	20000ab8 	.word	0x20000ab8
 8009b60:	42c80000 	.word	0x42c80000
 8009b64:	45ea6000 	.word	0x45ea6000
 8009b68:	20000ae0 	.word	0x20000ae0
 8009b6c:	20000b14 	.word	0x20000b14
 8009b70:	20000b08 	.word	0x20000b08
 8009b74:	20000100 	.word	0x20000100
 8009b78:	20000b18 	.word	0x20000b18
 8009b7c:	20000b0c 	.word	0x20000b0c
 8009b80:	457ff000 	.word	0x457ff000
 8009b84:	40533333 	.word	0x40533333
 8009b88:	20001004 	.word	0x20001004
 8009b8c:	20000638 	.word	0x20000638
 8009b90:	20000b38 	.word	0x20000b38
 8009b94:	45000000 	.word	0x45000000
 8009b98:	447a0000 	.word	0x447a0000
 8009b9c:	20000fd4 	.word	0x20000fd4
 8009ba0:	20000fe0 	.word	0x20000fe0
 8009ba4:	20000fec 	.word	0x20000fec
 8009ba8:	20000ff8 	.word	0x20000ff8
 8009bac:	3a83126f 	.word	0x3a83126f
 8009bb0:	20001734 	.word	0x20001734
 8009bb4:	20001e60 	.word	0x20001e60
 8009bb8:	20001e20 	.word	0x20001e20
 8009bbc:	3d4ccccd 	.word	0x3d4ccccd
 8009bc0:	20001aa0 	.word	0x20001aa0
 8009bc4:	200015a4 	.word	0x200015a4
 8009bc8:	2000235c 	.word	0x2000235c
 8009bcc:	200024f4 	.word	0x200024f4
 8009bd0:	200010cc 	.word	0x200010cc
 8009bd4:	20001f60 	.word	0x20001f60

08009bd8 <plotter_reset>:

void plotter_reset() {
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	af00      	add	r7, sp, #0
	QEI_reset(&prismatic_encoder);
 8009bdc:	4819      	ldr	r0, [pc, #100]	@ (8009c44 <plotter_reset+0x6c>)
 8009bde:	f7fa fb3b 	bl	8004258 <QEI_reset>
	QEI_reset(&prismatic_encoder);
 8009be2:	4818      	ldr	r0, [pc, #96]	@ (8009c44 <plotter_reset+0x6c>)
 8009be4:	f7fa fb38 	bl	8004258 <QEI_reset>

	prismatic_encoder.diff_counts = 0;
 8009be8:	4b16      	ldr	r3, [pc, #88]	@ (8009c44 <plotter_reset+0x6c>)
 8009bea:	2200      	movs	r2, #0
 8009bec:	625a      	str	r2, [r3, #36]	@ 0x24
	prismatic_encoder.rpm = 0;
 8009bee:	4b15      	ldr	r3, [pc, #84]	@ (8009c44 <plotter_reset+0x6c>)
 8009bf0:	f04f 0200 	mov.w	r2, #0
 8009bf4:	631a      	str	r2, [r3, #48]	@ 0x30
	prismatic_encoder.pulses = 0;
 8009bf6:	4b13      	ldr	r3, [pc, #76]	@ (8009c44 <plotter_reset+0x6c>)
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	639a      	str	r2, [r3, #56]	@ 0x38
	prismatic_encoder.revs = 0;
 8009bfc:	4b11      	ldr	r3, [pc, #68]	@ (8009c44 <plotter_reset+0x6c>)
 8009bfe:	f04f 0200 	mov.w	r2, #0
 8009c02:	63da      	str	r2, [r3, #60]	@ 0x3c
	prismatic_encoder.rads = 0;
 8009c04:	4b0f      	ldr	r3, [pc, #60]	@ (8009c44 <plotter_reset+0x6c>)
 8009c06:	f04f 0200 	mov.w	r2, #0
 8009c0a:	641a      	str	r2, [r3, #64]	@ 0x40
	prismatic_encoder.mm = 0;
 8009c0c:	4b0d      	ldr	r3, [pc, #52]	@ (8009c44 <plotter_reset+0x6c>)
 8009c0e:	f04f 0200 	mov.w	r2, #0
 8009c12:	649a      	str	r2, [r3, #72]	@ 0x48

	revolute_encoder.diff_counts = 0;
 8009c14:	4b0c      	ldr	r3, [pc, #48]	@ (8009c48 <plotter_reset+0x70>)
 8009c16:	2200      	movs	r2, #0
 8009c18:	625a      	str	r2, [r3, #36]	@ 0x24
	revolute_encoder.rpm = 0;
 8009c1a:	4b0b      	ldr	r3, [pc, #44]	@ (8009c48 <plotter_reset+0x70>)
 8009c1c:	f04f 0200 	mov.w	r2, #0
 8009c20:	631a      	str	r2, [r3, #48]	@ 0x30
	revolute_encoder.pulses = 0;
 8009c22:	4b09      	ldr	r3, [pc, #36]	@ (8009c48 <plotter_reset+0x70>)
 8009c24:	2200      	movs	r2, #0
 8009c26:	639a      	str	r2, [r3, #56]	@ 0x38
	revolute_encoder.revs = 0;
 8009c28:	4b07      	ldr	r3, [pc, #28]	@ (8009c48 <plotter_reset+0x70>)
 8009c2a:	f04f 0200 	mov.w	r2, #0
 8009c2e:	63da      	str	r2, [r3, #60]	@ 0x3c
	revolute_encoder.rads = 0;
 8009c30:	4b05      	ldr	r3, [pc, #20]	@ (8009c48 <plotter_reset+0x70>)
 8009c32:	f04f 0200 	mov.w	r2, #0
 8009c36:	641a      	str	r2, [r3, #64]	@ 0x40
	revolute_encoder.mm = 0;
 8009c38:	4b03      	ldr	r3, [pc, #12]	@ (8009c48 <plotter_reset+0x70>)
 8009c3a:	f04f 0200 	mov.w	r2, #0
 8009c3e:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8009c40:	bf00      	nop
 8009c42:	bd80      	pop	{r7, pc}
 8009c44:	20000988 	.word	0x20000988
 8009c48:	200009e4 	.word	0x200009e4

08009c4c <plotter_update_sensors>:

void plotter_update_sensors() {
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	af00      	add	r7, sp, #0
	joystick_x = ADC_DMA_GetJoystickValue(&joystick, JOYSTICK_X_CHANNEL, -50,
 8009c50:	eddf 0a42 	vldr	s1, [pc, #264]	@ 8009d5c <plotter_update_sensors+0x110>
 8009c54:	ed9f 0a42 	vldr	s0, [pc, #264]	@ 8009d60 <plotter_update_sensors+0x114>
 8009c58:	2106      	movs	r1, #6
 8009c5a:	4842      	ldr	r0, [pc, #264]	@ (8009d64 <plotter_update_sensors+0x118>)
 8009c5c:	f7f7 fa3c 	bl	80010d8 <ADC_DMA_GetJoystickValue>
 8009c60:	eef0 7a40 	vmov.f32	s15, s0
 8009c64:	4b40      	ldr	r3, [pc, #256]	@ (8009d68 <plotter_update_sensors+0x11c>)
 8009c66:	edc3 7a00 	vstr	s15, [r3]
			50);
	joystick_y = ADC_DMA_GetJoystickValue(&joystick, JOYSTICK_Y_CHANNEL, -50,
 8009c6a:	eddf 0a3c 	vldr	s1, [pc, #240]	@ 8009d5c <plotter_update_sensors+0x110>
 8009c6e:	ed9f 0a3c 	vldr	s0, [pc, #240]	@ 8009d60 <plotter_update_sensors+0x114>
 8009c72:	2107      	movs	r1, #7
 8009c74:	483b      	ldr	r0, [pc, #236]	@ (8009d64 <plotter_update_sensors+0x118>)
 8009c76:	f7f7 fa2f 	bl	80010d8 <ADC_DMA_GetJoystickValue>
 8009c7a:	eef0 7a40 	vmov.f32	s15, s0
 8009c7e:	4b3b      	ldr	r3, [pc, #236]	@ (8009d6c <plotter_update_sensors+0x120>)
 8009c80:	edc3 7a00 	vstr	s15, [r3]
			50);

	b1 = !HAL_GPIO_ReadPin(J1_GPIO_Port, J1_Pin);
 8009c84:	2180      	movs	r1, #128	@ 0x80
 8009c86:	483a      	ldr	r0, [pc, #232]	@ (8009d70 <plotter_update_sensors+0x124>)
 8009c88:	f003 fbf2 	bl	800d470 <HAL_GPIO_ReadPin>
 8009c8c:	4603      	mov	r3, r0
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	bf0c      	ite	eq
 8009c92:	2301      	moveq	r3, #1
 8009c94:	2300      	movne	r3, #0
 8009c96:	b2db      	uxtb	r3, r3
 8009c98:	461a      	mov	r2, r3
 8009c9a:	4b36      	ldr	r3, [pc, #216]	@ (8009d74 <plotter_update_sensors+0x128>)
 8009c9c:	601a      	str	r2, [r3, #0]
	b2 = !HAL_GPIO_ReadPin(J2_GPIO_Port, J2_Pin);
 8009c9e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8009ca2:	4835      	ldr	r0, [pc, #212]	@ (8009d78 <plotter_update_sensors+0x12c>)
 8009ca4:	f003 fbe4 	bl	800d470 <HAL_GPIO_ReadPin>
 8009ca8:	4603      	mov	r3, r0
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	bf0c      	ite	eq
 8009cae:	2301      	moveq	r3, #1
 8009cb0:	2300      	movne	r3, #0
 8009cb2:	b2db      	uxtb	r3, r3
 8009cb4:	461a      	mov	r2, r3
 8009cb6:	4b31      	ldr	r3, [pc, #196]	@ (8009d7c <plotter_update_sensors+0x130>)
 8009cb8:	601a      	str	r2, [r3, #0]
	b3 = !HAL_GPIO_ReadPin(J3_GPIO_Port, J3_Pin);
 8009cba:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8009cbe:	482e      	ldr	r0, [pc, #184]	@ (8009d78 <plotter_update_sensors+0x12c>)
 8009cc0:	f003 fbd6 	bl	800d470 <HAL_GPIO_ReadPin>
 8009cc4:	4603      	mov	r3, r0
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	bf0c      	ite	eq
 8009cca:	2301      	moveq	r3, #1
 8009ccc:	2300      	movne	r3, #0
 8009cce:	b2db      	uxtb	r3, r3
 8009cd0:	461a      	mov	r2, r3
 8009cd2:	4b2b      	ldr	r3, [pc, #172]	@ (8009d80 <plotter_update_sensors+0x134>)
 8009cd4:	601a      	str	r2, [r3, #0]
	b4 = !HAL_GPIO_ReadPin(J4_GPIO_Port, J4_Pin);
 8009cd6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8009cda:	4827      	ldr	r0, [pc, #156]	@ (8009d78 <plotter_update_sensors+0x12c>)
 8009cdc:	f003 fbc8 	bl	800d470 <HAL_GPIO_ReadPin>
 8009ce0:	4603      	mov	r3, r0
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	bf0c      	ite	eq
 8009ce6:	2301      	moveq	r3, #1
 8009ce8:	2300      	movne	r3, #0
 8009cea:	b2db      	uxtb	r3, r3
 8009cec:	461a      	mov	r2, r3
 8009cee:	4b25      	ldr	r3, [pc, #148]	@ (8009d84 <plotter_update_sensors+0x138>)
 8009cf0:	601a      	str	r2, [r3, #0]

	up_lim = HAL_GPIO_ReadPin(UPPER_LIM_GPIO_Port, UPPER_LIM_Pin);
 8009cf2:	2104      	movs	r1, #4
 8009cf4:	481e      	ldr	r0, [pc, #120]	@ (8009d70 <plotter_update_sensors+0x124>)
 8009cf6:	f003 fbbb 	bl	800d470 <HAL_GPIO_ReadPin>
 8009cfa:	4603      	mov	r3, r0
 8009cfc:	461a      	mov	r2, r3
 8009cfe:	4b22      	ldr	r3, [pc, #136]	@ (8009d88 <plotter_update_sensors+0x13c>)
 8009d00:	601a      	str	r2, [r3, #0]
	low_lim = HAL_GPIO_ReadPin(LOWER_LIM_GPIO_Port, LOWER_LIM_Pin);
 8009d02:	2102      	movs	r1, #2
 8009d04:	481a      	ldr	r0, [pc, #104]	@ (8009d70 <plotter_update_sensors+0x124>)
 8009d06:	f003 fbb3 	bl	800d470 <HAL_GPIO_ReadPin>
 8009d0a:	4603      	mov	r3, r0
 8009d0c:	461a      	mov	r2, r3
 8009d0e:	4b1f      	ldr	r3, [pc, #124]	@ (8009d8c <plotter_update_sensors+0x140>)
 8009d10:	601a      	str	r2, [r3, #0]

	extern bool homing_active;
	if (!homing_active) {
 8009d12:	4b1f      	ldr	r3, [pc, #124]	@ (8009d90 <plotter_update_sensors+0x144>)
 8009d14:	781b      	ldrb	r3, [r3, #0]
 8009d16:	f083 0301 	eor.w	r3, r3, #1
 8009d1a:	b2db      	uxtb	r3, r3
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d01a      	beq.n	8009d56 <plotter_update_sensors+0x10a>
		extern volatile bool up_photo, low_photo;
		up_photo = HAL_GPIO_ReadPin(upperphoto_GPIO_Port, upperphoto_Pin);
 8009d20:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8009d24:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8009d28:	f003 fba2 	bl	800d470 <HAL_GPIO_ReadPin>
 8009d2c:	4603      	mov	r3, r0
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	bf14      	ite	ne
 8009d32:	2301      	movne	r3, #1
 8009d34:	2300      	moveq	r3, #0
 8009d36:	b2da      	uxtb	r2, r3
 8009d38:	4b16      	ldr	r3, [pc, #88]	@ (8009d94 <plotter_update_sensors+0x148>)
 8009d3a:	701a      	strb	r2, [r3, #0]
		low_photo = HAL_GPIO_ReadPin(LOWER_PHOTO_GPIO_Port, LOWER_PHOTO_Pin);
 8009d3c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8009d40:	480b      	ldr	r0, [pc, #44]	@ (8009d70 <plotter_update_sensors+0x124>)
 8009d42:	f003 fb95 	bl	800d470 <HAL_GPIO_ReadPin>
 8009d46:	4603      	mov	r3, r0
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	bf14      	ite	ne
 8009d4c:	2301      	movne	r3, #1
 8009d4e:	2300      	moveq	r3, #0
 8009d50:	b2da      	uxtb	r2, r3
 8009d52:	4b11      	ldr	r3, [pc, #68]	@ (8009d98 <plotter_update_sensors+0x14c>)
 8009d54:	701a      	strb	r2, [r3, #0]
	}
}
 8009d56:	bf00      	nop
 8009d58:	bd80      	pop	{r7, pc}
 8009d5a:	bf00      	nop
 8009d5c:	42480000 	.word	0x42480000
 8009d60:	c2480000 	.word	0xc2480000
 8009d64:	20000b38 	.word	0x20000b38
 8009d68:	20001e70 	.word	0x20001e70
 8009d6c:	20001e74 	.word	0x20001e74
 8009d70:	48000400 	.word	0x48000400
 8009d74:	20001e80 	.word	0x20001e80
 8009d78:	48000800 	.word	0x48000800
 8009d7c:	20001e84 	.word	0x20001e84
 8009d80:	20001e88 	.word	0x20001e88
 8009d84:	20001e8c 	.word	0x20001e8c
 8009d88:	20001e78 	.word	0x20001e78
 8009d8c:	20001e7c 	.word	0x20001e7c
 8009d90:	200007eb 	.word	0x200007eb
 8009d94:	200007e8 	.word	0x200007e8
 8009d98:	200007e9 	.word	0x200007e9

08009d9c <plotter_pen_up>:

void plotter_pen_up() {
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	af00      	add	r7, sp, #0
	PWM_write_duty(&servo, 50, 7);
 8009da0:	eef1 0a0c 	vmov.f32	s1, #28	@ 0x40e00000  7.0
 8009da4:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 8009db4 <plotter_pen_up+0x18>
 8009da8:	4803      	ldr	r0, [pc, #12]	@ (8009db8 <plotter_pen_up+0x1c>)
 8009daa:	f7f9 fdc7 	bl	800393c <PWM_write_duty>
}
 8009dae:	bf00      	nop
 8009db0:	bd80      	pop	{r7, pc}
 8009db2:	bf00      	nop
 8009db4:	42480000 	.word	0x42480000
 8009db8:	20000b20 	.word	0x20000b20

08009dbc <plotter_pen_down>:

void plotter_pen_down() {
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	af00      	add	r7, sp, #0
	PWM_write_duty(&servo, 50, 10);
 8009dc0:	eef2 0a04 	vmov.f32	s1, #36	@ 0x41200000  10.0
 8009dc4:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 8009dd4 <plotter_pen_down+0x18>
 8009dc8:	4803      	ldr	r0, [pc, #12]	@ (8009dd8 <plotter_pen_down+0x1c>)
 8009dca:	f7f9 fdb7 	bl	800393c <PWM_write_duty>
}
 8009dce:	bf00      	nop
 8009dd0:	bd80      	pop	{r7, pc}
 8009dd2:	bf00      	nop
 8009dd4:	42480000 	.word	0x42480000
 8009dd8:	20000b20 	.word	0x20000b20

08009ddc <SIGNAL_init>:
    if (value > max_setpoint) return max_setpoint;
    return value;
}

// Initialization function
void SIGNAL_init(SignalGenerator* sg, SignalType type) {
 8009ddc:	b480      	push	{r7}
 8009dde:	b083      	sub	sp, #12
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
 8009de4:	460b      	mov	r3, r1
 8009de6:	70fb      	strb	r3, [r7, #3]
    // Reset all parameters
    sg->type = type;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	78fa      	ldrb	r2, [r7, #3]
 8009dec:	701a      	strb	r2, [r3, #0]
    sg->amplitude = 1.0f;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8009df4:	605a      	str	r2, [r3, #4]
    sg->frequency = 1.0f;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8009dfc:	609a      	str	r2, [r3, #8]
    sg->phase = 0.0f;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	f04f 0200 	mov.w	r2, #0
 8009e04:	60da      	str	r2, [r3, #12]
    sg->offset = 0.0f;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	f04f 0200 	mov.w	r2, #0
 8009e0c:	611a      	str	r2, [r3, #16]
    sg->current_phase = 0.0f;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	f04f 0200 	mov.w	r2, #0
 8009e14:	635a      	str	r2, [r3, #52]	@ 0x34
    sg->time_elapsed = 0.0f;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	f04f 0200 	mov.w	r2, #0
 8009e1c:	639a      	str	r2, [r3, #56]	@ 0x38
    sg->min_setpoint = -1.0f;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	4a1b      	ldr	r2, [pc, #108]	@ (8009e90 <SIGNAL_init+0xb4>)
 8009e22:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = 1.0f;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8009e2a:	641a      	str	r2, [r3, #64]	@ 0x40

    // Type-specific initializations
    switch (type) {
 8009e2c:	78fb      	ldrb	r3, [r7, #3]
 8009e2e:	2b03      	cmp	r3, #3
 8009e30:	d828      	bhi.n	8009e84 <SIGNAL_init+0xa8>
 8009e32:	a201      	add	r2, pc, #4	@ (adr r2, 8009e38 <SIGNAL_init+0x5c>)
 8009e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e38:	08009e83 	.word	0x08009e83
 8009e3c:	08009e49 	.word	0x08009e49
 8009e40:	08009e67 	.word	0x08009e67
 8009e44:	08009e71 	.word	0x08009e71
        case SIGNAL_SINE:
            break;
        case SIGNAL_CHIRP:
            sg->chirp_type = CHIRP_LINEAR;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	751a      	strb	r2, [r3, #20]
            sg->f_start = 1.0f;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8009e54:	619a      	str	r2, [r3, #24]
            sg->f_end = 10.0f;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	4a0e      	ldr	r2, [pc, #56]	@ (8009e94 <SIGNAL_init+0xb8>)
 8009e5a:	61da      	str	r2, [r3, #28]
            sg->duration = 1.0f;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8009e62:	621a      	str	r2, [r3, #32]
            break;
 8009e64:	e00e      	b.n	8009e84 <SIGNAL_init+0xa8>
        case SIGNAL_SQUARE:
            sg->duty_cycle = 0.5f;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8009e6c:	629a      	str	r2, [r3, #40]	@ 0x28
            break;
 8009e6e:	e009      	b.n	8009e84 <SIGNAL_init+0xa8>
        case SIGNAL_RAMP:
            sg->ramp_start = 0.0f;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	f04f 0200 	mov.w	r2, #0
 8009e76:	62da      	str	r2, [r3, #44]	@ 0x2c
            sg->ramp_end = 1.0f;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8009e7e:	631a      	str	r2, [r3, #48]	@ 0x30
            break;
 8009e80:	e000      	b.n	8009e84 <SIGNAL_init+0xa8>
            break;
 8009e82:	bf00      	nop
    }
}
 8009e84:	bf00      	nop
 8009e86:	370c      	adds	r7, #12
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8e:	4770      	bx	lr
 8009e90:	bf800000 	.word	0xbf800000
 8009e94:	41200000 	.word	0x41200000

08009e98 <SIGNAL_config_sine>:
                        float32_t amplitude,
                        float32_t frequency,
                        float32_t phase,
                        float32_t offset,
                        float32_t min_setpoint,
                        float32_t max_setpoint) {
 8009e98:	b480      	push	{r7}
 8009e9a:	b089      	sub	sp, #36	@ 0x24
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	61f8      	str	r0, [r7, #28]
 8009ea0:	ed87 0a06 	vstr	s0, [r7, #24]
 8009ea4:	edc7 0a05 	vstr	s1, [r7, #20]
 8009ea8:	ed87 1a04 	vstr	s2, [r7, #16]
 8009eac:	edc7 1a03 	vstr	s3, [r7, #12]
 8009eb0:	ed87 2a02 	vstr	s4, [r7, #8]
 8009eb4:	edc7 2a01 	vstr	s5, [r7, #4]
    sg->type = SIGNAL_SINE;
 8009eb8:	69fb      	ldr	r3, [r7, #28]
 8009eba:	2200      	movs	r2, #0
 8009ebc:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 8009ebe:	69fb      	ldr	r3, [r7, #28]
 8009ec0:	69ba      	ldr	r2, [r7, #24]
 8009ec2:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 8009ec4:	69fb      	ldr	r3, [r7, #28]
 8009ec6:	697a      	ldr	r2, [r7, #20]
 8009ec8:	609a      	str	r2, [r3, #8]
    sg->phase = phase;
 8009eca:	69fb      	ldr	r3, [r7, #28]
 8009ecc:	693a      	ldr	r2, [r7, #16]
 8009ece:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 8009ed0:	69fb      	ldr	r3, [r7, #28]
 8009ed2:	68fa      	ldr	r2, [r7, #12]
 8009ed4:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 8009ed6:	69fb      	ldr	r3, [r7, #28]
 8009ed8:	68ba      	ldr	r2, [r7, #8]
 8009eda:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 8009edc:	69fb      	ldr	r3, [r7, #28]
 8009ede:	687a      	ldr	r2, [r7, #4]
 8009ee0:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8009ee2:	bf00      	nop
 8009ee4:	3724      	adds	r7, #36	@ 0x24
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eec:	4770      	bx	lr

08009eee <SIGNAL_config_square>:
                          float32_t frequency,
                          float32_t duty_cycle,
                          float32_t phase,
                          float32_t offset,
                          float32_t min_setpoint,
                          float32_t max_setpoint) {
 8009eee:	b480      	push	{r7}
 8009ef0:	b089      	sub	sp, #36	@ 0x24
 8009ef2:	af00      	add	r7, sp, #0
 8009ef4:	61f8      	str	r0, [r7, #28]
 8009ef6:	ed87 0a06 	vstr	s0, [r7, #24]
 8009efa:	edc7 0a05 	vstr	s1, [r7, #20]
 8009efe:	ed87 1a04 	vstr	s2, [r7, #16]
 8009f02:	edc7 1a03 	vstr	s3, [r7, #12]
 8009f06:	ed87 2a02 	vstr	s4, [r7, #8]
 8009f0a:	edc7 2a01 	vstr	s5, [r7, #4]
 8009f0e:	ed87 3a00 	vstr	s6, [r7]
    sg->type = SIGNAL_SQUARE;
 8009f12:	69fb      	ldr	r3, [r7, #28]
 8009f14:	2202      	movs	r2, #2
 8009f16:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 8009f18:	69fb      	ldr	r3, [r7, #28]
 8009f1a:	69ba      	ldr	r2, [r7, #24]
 8009f1c:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 8009f1e:	69fb      	ldr	r3, [r7, #28]
 8009f20:	697a      	ldr	r2, [r7, #20]
 8009f22:	609a      	str	r2, [r3, #8]
    sg->duty_cycle = duty_cycle;
 8009f24:	69fb      	ldr	r3, [r7, #28]
 8009f26:	693a      	ldr	r2, [r7, #16]
 8009f28:	629a      	str	r2, [r3, #40]	@ 0x28
    sg->phase = phase;
 8009f2a:	69fb      	ldr	r3, [r7, #28]
 8009f2c:	68fa      	ldr	r2, [r7, #12]
 8009f2e:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 8009f30:	69fb      	ldr	r3, [r7, #28]
 8009f32:	68ba      	ldr	r2, [r7, #8]
 8009f34:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 8009f36:	69fb      	ldr	r3, [r7, #28]
 8009f38:	687a      	ldr	r2, [r7, #4]
 8009f3a:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 8009f3c:	69fb      	ldr	r3, [r7, #28]
 8009f3e:	683a      	ldr	r2, [r7, #0]
 8009f40:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8009f42:	bf00      	nop
 8009f44:	3724      	adds	r7, #36	@ 0x24
 8009f46:	46bd      	mov	sp, r7
 8009f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4c:	4770      	bx	lr
	...

08009f50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b082      	sub	sp, #8
 8009f54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009f56:	4b0f      	ldr	r3, [pc, #60]	@ (8009f94 <HAL_MspInit+0x44>)
 8009f58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009f5a:	4a0e      	ldr	r2, [pc, #56]	@ (8009f94 <HAL_MspInit+0x44>)
 8009f5c:	f043 0301 	orr.w	r3, r3, #1
 8009f60:	6613      	str	r3, [r2, #96]	@ 0x60
 8009f62:	4b0c      	ldr	r3, [pc, #48]	@ (8009f94 <HAL_MspInit+0x44>)
 8009f64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009f66:	f003 0301 	and.w	r3, r3, #1
 8009f6a:	607b      	str	r3, [r7, #4]
 8009f6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8009f6e:	4b09      	ldr	r3, [pc, #36]	@ (8009f94 <HAL_MspInit+0x44>)
 8009f70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f72:	4a08      	ldr	r2, [pc, #32]	@ (8009f94 <HAL_MspInit+0x44>)
 8009f74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009f78:	6593      	str	r3, [r2, #88]	@ 0x58
 8009f7a:	4b06      	ldr	r3, [pc, #24]	@ (8009f94 <HAL_MspInit+0x44>)
 8009f7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009f82:	603b      	str	r3, [r7, #0]
 8009f84:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8009f86:	f003 fb79 	bl	800d67c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009f8a:	bf00      	nop
 8009f8c:	3708      	adds	r7, #8
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	bd80      	pop	{r7, pc}
 8009f92:	bf00      	nop
 8009f94:	40021000 	.word	0x40021000

08009f98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009f98:	b480      	push	{r7}
 8009f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8009f9c:	bf00      	nop
 8009f9e:	e7fd      	b.n	8009f9c <NMI_Handler+0x4>

08009fa0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009fa0:	b480      	push	{r7}
 8009fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009fa4:	bf00      	nop
 8009fa6:	e7fd      	b.n	8009fa4 <HardFault_Handler+0x4>

08009fa8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009fa8:	b480      	push	{r7}
 8009faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009fac:	bf00      	nop
 8009fae:	e7fd      	b.n	8009fac <MemManage_Handler+0x4>

08009fb0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009fb0:	b480      	push	{r7}
 8009fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8009fb4:	bf00      	nop
 8009fb6:	e7fd      	b.n	8009fb4 <BusFault_Handler+0x4>

08009fb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009fb8:	b480      	push	{r7}
 8009fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009fbc:	bf00      	nop
 8009fbe:	e7fd      	b.n	8009fbc <UsageFault_Handler+0x4>

08009fc0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8009fc0:	b480      	push	{r7}
 8009fc2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8009fc4:	bf00      	nop
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fcc:	4770      	bx	lr

08009fce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009fce:	b480      	push	{r7}
 8009fd0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009fd2:	bf00      	nop
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fda:	4770      	bx	lr

08009fdc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8009fdc:	b480      	push	{r7}
 8009fde:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8009fe0:	bf00      	nop
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe8:	4770      	bx	lr

08009fea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8009fea:	b580      	push	{r7, lr}
 8009fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8009fee:	f000 ffc3 	bl	800af78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009ff2:	bf00      	nop
 8009ff4:	bd80      	pop	{r7, pc}

08009ff6 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8009ff6:	b580      	push	{r7, lr}
 8009ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(UPPER_PHOTO_Pin);
 8009ffa:	2001      	movs	r0, #1
 8009ffc:	f003 fa82 	bl	800d504 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800a000:	bf00      	nop
 800a002:	bd80      	pop	{r7, pc}

0800a004 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800a004:	b580      	push	{r7, lr}
 800a006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EMER_Pin);
 800a008:	2010      	movs	r0, #16
 800a00a:	f003 fa7b 	bl	800d504 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800a00e:	bf00      	nop
 800a010:	bd80      	pop	{r7, pc}
	...

0800a014 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800a014:	b580      	push	{r7, lr}
 800a016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800a018:	4802      	ldr	r0, [pc, #8]	@ (800a024 <DMA1_Channel1_IRQHandler+0x10>)
 800a01a:	f002 ff58 	bl	800cece <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800a01e:	bf00      	nop
 800a020:	bd80      	pop	{r7, pc}
 800a022:	bf00      	nop
 800a024:	200006a4 	.word	0x200006a4

0800a028 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800a028:	b580      	push	{r7, lr}
 800a02a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800a02c:	4802      	ldr	r0, [pc, #8]	@ (800a038 <DMA1_Channel2_IRQHandler+0x10>)
 800a02e:	f002 ff4e 	bl	800cece <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800a032:	bf00      	nop
 800a034:	bd80      	pop	{r7, pc}
 800a036:	bf00      	nop
 800a038:	20002680 	.word	0x20002680

0800a03c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800a040:	4802      	ldr	r0, [pc, #8]	@ (800a04c <DMA1_Channel3_IRQHandler+0x10>)
 800a042:	f002 ff44 	bl	800cece <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800a046:	bf00      	nop
 800a048:	bd80      	pop	{r7, pc}
 800a04a:	bf00      	nop
 800a04c:	200026e0 	.word	0x200026e0

0800a050 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800a050:	b580      	push	{r7, lr}
 800a052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 800a054:	4802      	ldr	r0, [pc, #8]	@ (800a060 <DMA1_Channel4_IRQHandler+0x10>)
 800a056:	f002 ff3a 	bl	800cece <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800a05a:	bf00      	nop
 800a05c:	bd80      	pop	{r7, pc}
 800a05e:	bf00      	nop
 800a060:	200025c0 	.word	0x200025c0

0800a064 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800a064:	b580      	push	{r7, lr}
 800a066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 800a068:	4802      	ldr	r0, [pc, #8]	@ (800a074 <DMA1_Channel5_IRQHandler+0x10>)
 800a06a:	f002 ff30 	bl	800cece <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800a06e:	bf00      	nop
 800a070:	bd80      	pop	{r7, pc}
 800a072:	bf00      	nop
 800a074:	20002620 	.word	0x20002620

0800a078 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(prox_Pin);
 800a07c:	2020      	movs	r0, #32
 800a07e:	f003 fa41 	bl	800d504 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PROX_Pin);
 800a082:	2040      	movs	r0, #64	@ 0x40
 800a084:	f003 fa3e 	bl	800d504 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(J1_Pin);
 800a088:	2080      	movs	r0, #128	@ 0x80
 800a08a:	f003 fa3b 	bl	800d504 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(upperphoto_Pin);
 800a08e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800a092:	f003 fa37 	bl	800d504 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800a096:	bf00      	nop
 800a098:	bd80      	pop	{r7, pc}
	...

0800a09c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800a0a0:	4803      	ldr	r0, [pc, #12]	@ (800a0b0 <TIM1_UP_TIM16_IRQHandler+0x14>)
 800a0a2:	f004 ff71 	bl	800ef88 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 800a0a6:	4803      	ldr	r0, [pc, #12]	@ (800a0b4 <TIM1_UP_TIM16_IRQHandler+0x18>)
 800a0a8:	f004 ff6e 	bl	800ef88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800a0ac:	bf00      	nop
 800a0ae:	bd80      	pop	{r7, pc}
 800a0b0:	20001e94 	.word	0x20001e94
 800a0b4:	2000235c 	.word	0x2000235c

0800a0b8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800a0bc:	4802      	ldr	r0, [pc, #8]	@ (800a0c8 <TIM2_IRQHandler+0x10>)
 800a0be:	f004 ff63 	bl	800ef88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800a0c2:	bf00      	nop
 800a0c4:	bd80      	pop	{r7, pc}
 800a0c6:	bf00      	nop
 800a0c8:	20001f60 	.word	0x20001f60

0800a0cc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800a0d0:	4802      	ldr	r0, [pc, #8]	@ (800a0dc <TIM3_IRQHandler+0x10>)
 800a0d2:	f004 ff59 	bl	800ef88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800a0d6:	bf00      	nop
 800a0d8:	bd80      	pop	{r7, pc}
 800a0da:	bf00      	nop
 800a0dc:	2000202c 	.word	0x2000202c

0800a0e0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800a0e0:	b580      	push	{r7, lr}
 800a0e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800a0e4:	4802      	ldr	r0, [pc, #8]	@ (800a0f0 <TIM4_IRQHandler+0x10>)
 800a0e6:	f004 ff4f 	bl	800ef88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800a0ea:	bf00      	nop
 800a0ec:	bd80      	pop	{r7, pc}
 800a0ee:	bf00      	nop
 800a0f0:	200020f8 	.word	0x200020f8

0800a0f4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800a0f8:	4802      	ldr	r0, [pc, #8]	@ (800a104 <USART2_IRQHandler+0x10>)
 800a0fa:	f006 fd19 	bl	8010b30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800a0fe:	bf00      	nop
 800a100:	bd80      	pop	{r7, pc}
 800a102:	bf00      	nop
 800a104:	200024f4 	.word	0x200024f4

0800a108 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800a108:	b580      	push	{r7, lr}
 800a10a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(J3_Pin);
 800a10c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800a110:	f003 f9f8 	bl	800d504 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(J4_Pin);
 800a114:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800a118:	f003 f9f4 	bl	800d504 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LOWER_PHOTO_Pin);
 800a11c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800a120:	f003 f9f0 	bl	800d504 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800a124:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800a128:	f003 f9ec 	bl	800d504 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800a12c:	bf00      	nop
 800a12e:	bd80      	pop	{r7, pc}

0800a130 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 800a130:	b580      	push	{r7, lr}
 800a132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 800a134:	4802      	ldr	r0, [pc, #8]	@ (800a140 <LPUART1_IRQHandler+0x10>)
 800a136:	f006 fcfb 	bl	8010b30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800a13a:	bf00      	nop
 800a13c:	bd80      	pop	{r7, pc}
 800a13e:	bf00      	nop
 800a140:	20002428 	.word	0x20002428

0800a144 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800a144:	b580      	push	{r7, lr}
 800a146:	b086      	sub	sp, #24
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800a14c:	4a14      	ldr	r2, [pc, #80]	@ (800a1a0 <_sbrk+0x5c>)
 800a14e:	4b15      	ldr	r3, [pc, #84]	@ (800a1a4 <_sbrk+0x60>)
 800a150:	1ad3      	subs	r3, r2, r3
 800a152:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800a154:	697b      	ldr	r3, [r7, #20]
 800a156:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800a158:	4b13      	ldr	r3, [pc, #76]	@ (800a1a8 <_sbrk+0x64>)
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d102      	bne.n	800a166 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800a160:	4b11      	ldr	r3, [pc, #68]	@ (800a1a8 <_sbrk+0x64>)
 800a162:	4a12      	ldr	r2, [pc, #72]	@ (800a1ac <_sbrk+0x68>)
 800a164:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800a166:	4b10      	ldr	r3, [pc, #64]	@ (800a1a8 <_sbrk+0x64>)
 800a168:	681a      	ldr	r2, [r3, #0]
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	4413      	add	r3, r2
 800a16e:	693a      	ldr	r2, [r7, #16]
 800a170:	429a      	cmp	r2, r3
 800a172:	d207      	bcs.n	800a184 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800a174:	f008 ffca 	bl	801310c <__errno>
 800a178:	4603      	mov	r3, r0
 800a17a:	220c      	movs	r2, #12
 800a17c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800a17e:	f04f 33ff 	mov.w	r3, #4294967295
 800a182:	e009      	b.n	800a198 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800a184:	4b08      	ldr	r3, [pc, #32]	@ (800a1a8 <_sbrk+0x64>)
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800a18a:	4b07      	ldr	r3, [pc, #28]	@ (800a1a8 <_sbrk+0x64>)
 800a18c:	681a      	ldr	r2, [r3, #0]
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	4413      	add	r3, r2
 800a192:	4a05      	ldr	r2, [pc, #20]	@ (800a1a8 <_sbrk+0x64>)
 800a194:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800a196:	68fb      	ldr	r3, [r7, #12]
}
 800a198:	4618      	mov	r0, r3
 800a19a:	3718      	adds	r7, #24
 800a19c:	46bd      	mov	sp, r7
 800a19e:	bd80      	pop	{r7, pc}
 800a1a0:	20020000 	.word	0x20020000
 800a1a4:	00000400 	.word	0x00000400
 800a1a8:	20001e90 	.word	0x20001e90
 800a1ac:	20002890 	.word	0x20002890

0800a1b0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800a1b0:	b480      	push	{r7}
 800a1b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800a1b4:	4b06      	ldr	r3, [pc, #24]	@ (800a1d0 <SystemInit+0x20>)
 800a1b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a1ba:	4a05      	ldr	r2, [pc, #20]	@ (800a1d0 <SystemInit+0x20>)
 800a1bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a1c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800a1c4:	bf00      	nop
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1cc:	4770      	bx	lr
 800a1ce:	bf00      	nop
 800a1d0:	e000ed00 	.word	0xe000ed00

0800a1d4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	b098      	sub	sp, #96	@ 0x60
 800a1d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a1da:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800a1de:	2200      	movs	r2, #0
 800a1e0:	601a      	str	r2, [r3, #0]
 800a1e2:	605a      	str	r2, [r3, #4]
 800a1e4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800a1e6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	601a      	str	r2, [r3, #0]
 800a1ee:	605a      	str	r2, [r3, #4]
 800a1f0:	609a      	str	r2, [r3, #8]
 800a1f2:	60da      	str	r2, [r3, #12]
 800a1f4:	611a      	str	r2, [r3, #16]
 800a1f6:	615a      	str	r2, [r3, #20]
 800a1f8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800a1fa:	1d3b      	adds	r3, r7, #4
 800a1fc:	2234      	movs	r2, #52	@ 0x34
 800a1fe:	2100      	movs	r1, #0
 800a200:	4618      	mov	r0, r3
 800a202:	f008 ff6b 	bl	80130dc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800a206:	4b3b      	ldr	r3, [pc, #236]	@ (800a2f4 <MX_TIM1_Init+0x120>)
 800a208:	4a3b      	ldr	r2, [pc, #236]	@ (800a2f8 <MX_TIM1_Init+0x124>)
 800a20a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800a20c:	4b39      	ldr	r3, [pc, #228]	@ (800a2f4 <MX_TIM1_Init+0x120>)
 800a20e:	2200      	movs	r2, #0
 800a210:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a212:	4b38      	ldr	r3, [pc, #224]	@ (800a2f4 <MX_TIM1_Init+0x120>)
 800a214:	2200      	movs	r2, #0
 800a216:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800a218:	4b36      	ldr	r3, [pc, #216]	@ (800a2f4 <MX_TIM1_Init+0x120>)
 800a21a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a21e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a220:	4b34      	ldr	r3, [pc, #208]	@ (800a2f4 <MX_TIM1_Init+0x120>)
 800a222:	2200      	movs	r2, #0
 800a224:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800a226:	4b33      	ldr	r3, [pc, #204]	@ (800a2f4 <MX_TIM1_Init+0x120>)
 800a228:	2200      	movs	r2, #0
 800a22a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a22c:	4b31      	ldr	r3, [pc, #196]	@ (800a2f4 <MX_TIM1_Init+0x120>)
 800a22e:	2200      	movs	r2, #0
 800a230:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800a232:	4830      	ldr	r0, [pc, #192]	@ (800a2f4 <MX_TIM1_Init+0x120>)
 800a234:	f004 fafa 	bl	800e82c <HAL_TIM_PWM_Init>
 800a238:	4603      	mov	r3, r0
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d001      	beq.n	800a242 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800a23e:	f7ff f909 	bl	8009454 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a242:	2300      	movs	r3, #0
 800a244:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800a246:	2300      	movs	r3, #0
 800a248:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a24a:	2300      	movs	r3, #0
 800a24c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800a24e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800a252:	4619      	mov	r1, r3
 800a254:	4827      	ldr	r0, [pc, #156]	@ (800a2f4 <MX_TIM1_Init+0x120>)
 800a256:	f006 f90b 	bl	8010470 <HAL_TIMEx_MasterConfigSynchronization>
 800a25a:	4603      	mov	r3, r0
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d001      	beq.n	800a264 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800a260:	f7ff f8f8 	bl	8009454 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a264:	2360      	movs	r3, #96	@ 0x60
 800a266:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800a268:	2300      	movs	r3, #0
 800a26a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a26c:	2300      	movs	r3, #0
 800a26e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800a270:	2300      	movs	r3, #0
 800a272:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a274:	2300      	movs	r3, #0
 800a276:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800a278:	2300      	movs	r3, #0
 800a27a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800a27c:	2300      	movs	r3, #0
 800a27e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800a280:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800a284:	220c      	movs	r2, #12
 800a286:	4619      	mov	r1, r3
 800a288:	481a      	ldr	r0, [pc, #104]	@ (800a2f4 <MX_TIM1_Init+0x120>)
 800a28a:	f004 fff7 	bl	800f27c <HAL_TIM_PWM_ConfigChannel>
 800a28e:	4603      	mov	r3, r0
 800a290:	2b00      	cmp	r3, #0
 800a292:	d001      	beq.n	800a298 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800a294:	f7ff f8de 	bl	8009454 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800a298:	2300      	movs	r3, #0
 800a29a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800a29c:	2300      	movs	r3, #0
 800a29e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800a2ac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a2b0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800a2be:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a2c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800a2d0:	1d3b      	adds	r3, r7, #4
 800a2d2:	4619      	mov	r1, r3
 800a2d4:	4807      	ldr	r0, [pc, #28]	@ (800a2f4 <MX_TIM1_Init+0x120>)
 800a2d6:	f006 f961 	bl	801059c <HAL_TIMEx_ConfigBreakDeadTime>
 800a2da:	4603      	mov	r3, r0
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d001      	beq.n	800a2e4 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 800a2e0:	f7ff f8b8 	bl	8009454 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800a2e4:	4803      	ldr	r0, [pc, #12]	@ (800a2f4 <MX_TIM1_Init+0x120>)
 800a2e6:	f000 fb77 	bl	800a9d8 <HAL_TIM_MspPostInit>

}
 800a2ea:	bf00      	nop
 800a2ec:	3760      	adds	r7, #96	@ 0x60
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	bd80      	pop	{r7, pc}
 800a2f2:	bf00      	nop
 800a2f4:	20001e94 	.word	0x20001e94
 800a2f8:	40012c00 	.word	0x40012c00

0800a2fc <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	b088      	sub	sp, #32
 800a300:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a302:	f107 0310 	add.w	r3, r7, #16
 800a306:	2200      	movs	r2, #0
 800a308:	601a      	str	r2, [r3, #0]
 800a30a:	605a      	str	r2, [r3, #4]
 800a30c:	609a      	str	r2, [r3, #8]
 800a30e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a310:	1d3b      	adds	r3, r7, #4
 800a312:	2200      	movs	r2, #0
 800a314:	601a      	str	r2, [r3, #0]
 800a316:	605a      	str	r2, [r3, #4]
 800a318:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800a31a:	4b1e      	ldr	r3, [pc, #120]	@ (800a394 <MX_TIM2_Init+0x98>)
 800a31c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800a320:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 800a322:	4b1c      	ldr	r3, [pc, #112]	@ (800a394 <MX_TIM2_Init+0x98>)
 800a324:	22a9      	movs	r2, #169	@ 0xa9
 800a326:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a328:	4b1a      	ldr	r3, [pc, #104]	@ (800a394 <MX_TIM2_Init+0x98>)
 800a32a:	2200      	movs	r2, #0
 800a32c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 800a32e:	4b19      	ldr	r3, [pc, #100]	@ (800a394 <MX_TIM2_Init+0x98>)
 800a330:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800a334:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a336:	4b17      	ldr	r3, [pc, #92]	@ (800a394 <MX_TIM2_Init+0x98>)
 800a338:	2200      	movs	r2, #0
 800a33a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a33c:	4b15      	ldr	r3, [pc, #84]	@ (800a394 <MX_TIM2_Init+0x98>)
 800a33e:	2200      	movs	r2, #0
 800a340:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800a342:	4814      	ldr	r0, [pc, #80]	@ (800a394 <MX_TIM2_Init+0x98>)
 800a344:	f004 f926 	bl	800e594 <HAL_TIM_Base_Init>
 800a348:	4603      	mov	r3, r0
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d001      	beq.n	800a352 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800a34e:	f7ff f881 	bl	8009454 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a352:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a356:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800a358:	f107 0310 	add.w	r3, r7, #16
 800a35c:	4619      	mov	r1, r3
 800a35e:	480d      	ldr	r0, [pc, #52]	@ (800a394 <MX_TIM2_Init+0x98>)
 800a360:	f005 f8a0 	bl	800f4a4 <HAL_TIM_ConfigClockSource>
 800a364:	4603      	mov	r3, r0
 800a366:	2b00      	cmp	r3, #0
 800a368:	d001      	beq.n	800a36e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800a36a:	f7ff f873 	bl	8009454 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a36e:	2300      	movs	r3, #0
 800a370:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a372:	2300      	movs	r3, #0
 800a374:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800a376:	1d3b      	adds	r3, r7, #4
 800a378:	4619      	mov	r1, r3
 800a37a:	4806      	ldr	r0, [pc, #24]	@ (800a394 <MX_TIM2_Init+0x98>)
 800a37c:	f006 f878 	bl	8010470 <HAL_TIMEx_MasterConfigSynchronization>
 800a380:	4603      	mov	r3, r0
 800a382:	2b00      	cmp	r3, #0
 800a384:	d001      	beq.n	800a38a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800a386:	f7ff f865 	bl	8009454 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800a38a:	bf00      	nop
 800a38c:	3720      	adds	r7, #32
 800a38e:	46bd      	mov	sp, r7
 800a390:	bd80      	pop	{r7, pc}
 800a392:	bf00      	nop
 800a394:	20001f60 	.word	0x20001f60

0800a398 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b08c      	sub	sp, #48	@ 0x30
 800a39c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800a39e:	f107 030c 	add.w	r3, r7, #12
 800a3a2:	2224      	movs	r2, #36	@ 0x24
 800a3a4:	2100      	movs	r1, #0
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	f008 fe98 	bl	80130dc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a3ac:	463b      	mov	r3, r7
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	601a      	str	r2, [r3, #0]
 800a3b2:	605a      	str	r2, [r3, #4]
 800a3b4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800a3b6:	4b21      	ldr	r3, [pc, #132]	@ (800a43c <MX_TIM3_Init+0xa4>)
 800a3b8:	4a21      	ldr	r2, [pc, #132]	@ (800a440 <MX_TIM3_Init+0xa8>)
 800a3ba:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800a3bc:	4b1f      	ldr	r3, [pc, #124]	@ (800a43c <MX_TIM3_Init+0xa4>)
 800a3be:	2200      	movs	r2, #0
 800a3c0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a3c2:	4b1e      	ldr	r3, [pc, #120]	@ (800a43c <MX_TIM3_Init+0xa4>)
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800a3c8:	4b1c      	ldr	r3, [pc, #112]	@ (800a43c <MX_TIM3_Init+0xa4>)
 800a3ca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a3ce:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a3d0:	4b1a      	ldr	r3, [pc, #104]	@ (800a43c <MX_TIM3_Init+0xa4>)
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a3d6:	4b19      	ldr	r3, [pc, #100]	@ (800a43c <MX_TIM3_Init+0xa4>)
 800a3d8:	2200      	movs	r2, #0
 800a3da:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800a3dc:	2303      	movs	r3, #3
 800a3de:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800a3e4:	2301      	movs	r3, #1
 800a3e6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800a3f4:	2301      	movs	r3, #1
 800a3f6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800a400:	f107 030c 	add.w	r3, r7, #12
 800a404:	4619      	mov	r1, r3
 800a406:	480d      	ldr	r0, [pc, #52]	@ (800a43c <MX_TIM3_Init+0xa4>)
 800a408:	f004 fc7c 	bl	800ed04 <HAL_TIM_Encoder_Init>
 800a40c:	4603      	mov	r3, r0
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d001      	beq.n	800a416 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800a412:	f7ff f81f 	bl	8009454 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a416:	2300      	movs	r3, #0
 800a418:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a41a:	2300      	movs	r3, #0
 800a41c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800a41e:	463b      	mov	r3, r7
 800a420:	4619      	mov	r1, r3
 800a422:	4806      	ldr	r0, [pc, #24]	@ (800a43c <MX_TIM3_Init+0xa4>)
 800a424:	f006 f824 	bl	8010470 <HAL_TIMEx_MasterConfigSynchronization>
 800a428:	4603      	mov	r3, r0
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d001      	beq.n	800a432 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800a42e:	f7ff f811 	bl	8009454 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800a432:	bf00      	nop
 800a434:	3730      	adds	r7, #48	@ 0x30
 800a436:	46bd      	mov	sp, r7
 800a438:	bd80      	pop	{r7, pc}
 800a43a:	bf00      	nop
 800a43c:	2000202c 	.word	0x2000202c
 800a440:	40000400 	.word	0x40000400

0800a444 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b08c      	sub	sp, #48	@ 0x30
 800a448:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800a44a:	f107 030c 	add.w	r3, r7, #12
 800a44e:	2224      	movs	r2, #36	@ 0x24
 800a450:	2100      	movs	r1, #0
 800a452:	4618      	mov	r0, r3
 800a454:	f008 fe42 	bl	80130dc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a458:	463b      	mov	r3, r7
 800a45a:	2200      	movs	r2, #0
 800a45c:	601a      	str	r2, [r3, #0]
 800a45e:	605a      	str	r2, [r3, #4]
 800a460:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800a462:	4b21      	ldr	r3, [pc, #132]	@ (800a4e8 <MX_TIM4_Init+0xa4>)
 800a464:	4a21      	ldr	r2, [pc, #132]	@ (800a4ec <MX_TIM4_Init+0xa8>)
 800a466:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800a468:	4b1f      	ldr	r3, [pc, #124]	@ (800a4e8 <MX_TIM4_Init+0xa4>)
 800a46a:	2200      	movs	r2, #0
 800a46c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a46e:	4b1e      	ldr	r3, [pc, #120]	@ (800a4e8 <MX_TIM4_Init+0xa4>)
 800a470:	2200      	movs	r2, #0
 800a472:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800a474:	4b1c      	ldr	r3, [pc, #112]	@ (800a4e8 <MX_TIM4_Init+0xa4>)
 800a476:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a47a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a47c:	4b1a      	ldr	r3, [pc, #104]	@ (800a4e8 <MX_TIM4_Init+0xa4>)
 800a47e:	2200      	movs	r2, #0
 800a480:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a482:	4b19      	ldr	r3, [pc, #100]	@ (800a4e8 <MX_TIM4_Init+0xa4>)
 800a484:	2200      	movs	r2, #0
 800a486:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800a488:	2303      	movs	r3, #3
 800a48a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800a48c:	2300      	movs	r3, #0
 800a48e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800a490:	2301      	movs	r3, #1
 800a492:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800a494:	2300      	movs	r3, #0
 800a496:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800a498:	2300      	movs	r3, #0
 800a49a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800a49c:	2300      	movs	r3, #0
 800a49e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800a4a0:	2301      	movs	r3, #1
 800a4a2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800a4ac:	f107 030c 	add.w	r3, r7, #12
 800a4b0:	4619      	mov	r1, r3
 800a4b2:	480d      	ldr	r0, [pc, #52]	@ (800a4e8 <MX_TIM4_Init+0xa4>)
 800a4b4:	f004 fc26 	bl	800ed04 <HAL_TIM_Encoder_Init>
 800a4b8:	4603      	mov	r3, r0
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d001      	beq.n	800a4c2 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800a4be:	f7fe ffc9 	bl	8009454 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800a4ca:	463b      	mov	r3, r7
 800a4cc:	4619      	mov	r1, r3
 800a4ce:	4806      	ldr	r0, [pc, #24]	@ (800a4e8 <MX_TIM4_Init+0xa4>)
 800a4d0:	f005 ffce 	bl	8010470 <HAL_TIMEx_MasterConfigSynchronization>
 800a4d4:	4603      	mov	r3, r0
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d001      	beq.n	800a4de <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800a4da:	f7fe ffbb 	bl	8009454 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800a4de:	bf00      	nop
 800a4e0:	3730      	adds	r7, #48	@ 0x30
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	bd80      	pop	{r7, pc}
 800a4e6:	bf00      	nop
 800a4e8:	200020f8 	.word	0x200020f8
 800a4ec:	40000800 	.word	0x40000800

0800a4f0 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b08c      	sub	sp, #48	@ 0x30
 800a4f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800a4f6:	f107 030c 	add.w	r3, r7, #12
 800a4fa:	2224      	movs	r2, #36	@ 0x24
 800a4fc:	2100      	movs	r1, #0
 800a4fe:	4618      	mov	r0, r3
 800a500:	f008 fdec 	bl	80130dc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a504:	463b      	mov	r3, r7
 800a506:	2200      	movs	r2, #0
 800a508:	601a      	str	r2, [r3, #0]
 800a50a:	605a      	str	r2, [r3, #4]
 800a50c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800a50e:	4b21      	ldr	r3, [pc, #132]	@ (800a594 <MX_TIM5_Init+0xa4>)
 800a510:	4a21      	ldr	r2, [pc, #132]	@ (800a598 <MX_TIM5_Init+0xa8>)
 800a512:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800a514:	4b1f      	ldr	r3, [pc, #124]	@ (800a594 <MX_TIM5_Init+0xa4>)
 800a516:	2200      	movs	r2, #0
 800a518:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a51a:	4b1e      	ldr	r3, [pc, #120]	@ (800a594 <MX_TIM5_Init+0xa4>)
 800a51c:	2200      	movs	r2, #0
 800a51e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 800a520:	4b1c      	ldr	r3, [pc, #112]	@ (800a594 <MX_TIM5_Init+0xa4>)
 800a522:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a526:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a528:	4b1a      	ldr	r3, [pc, #104]	@ (800a594 <MX_TIM5_Init+0xa4>)
 800a52a:	2200      	movs	r2, #0
 800a52c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a52e:	4b19      	ldr	r3, [pc, #100]	@ (800a594 <MX_TIM5_Init+0xa4>)
 800a530:	2200      	movs	r2, #0
 800a532:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800a534:	2303      	movs	r3, #3
 800a536:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800a538:	2300      	movs	r3, #0
 800a53a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800a53c:	2301      	movs	r3, #1
 800a53e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800a540:	2300      	movs	r3, #0
 800a542:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800a544:	2300      	movs	r3, #0
 800a546:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800a548:	2300      	movs	r3, #0
 800a54a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800a54c:	2301      	movs	r3, #1
 800a54e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800a550:	2300      	movs	r3, #0
 800a552:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800a554:	2300      	movs	r3, #0
 800a556:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 800a558:	f107 030c 	add.w	r3, r7, #12
 800a55c:	4619      	mov	r1, r3
 800a55e:	480d      	ldr	r0, [pc, #52]	@ (800a594 <MX_TIM5_Init+0xa4>)
 800a560:	f004 fbd0 	bl	800ed04 <HAL_TIM_Encoder_Init>
 800a564:	4603      	mov	r3, r0
 800a566:	2b00      	cmp	r3, #0
 800a568:	d001      	beq.n	800a56e <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 800a56a:	f7fe ff73 	bl	8009454 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a56e:	2300      	movs	r3, #0
 800a570:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a572:	2300      	movs	r3, #0
 800a574:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800a576:	463b      	mov	r3, r7
 800a578:	4619      	mov	r1, r3
 800a57a:	4806      	ldr	r0, [pc, #24]	@ (800a594 <MX_TIM5_Init+0xa4>)
 800a57c:	f005 ff78 	bl	8010470 <HAL_TIMEx_MasterConfigSynchronization>
 800a580:	4603      	mov	r3, r0
 800a582:	2b00      	cmp	r3, #0
 800a584:	d001      	beq.n	800a58a <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 800a586:	f7fe ff65 	bl	8009454 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800a58a:	bf00      	nop
 800a58c:	3730      	adds	r7, #48	@ 0x30
 800a58e:	46bd      	mov	sp, r7
 800a590:	bd80      	pop	{r7, pc}
 800a592:	bf00      	nop
 800a594:	200021c4 	.word	0x200021c4
 800a598:	40000c00 	.word	0x40000c00

0800a59c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b09c      	sub	sp, #112	@ 0x70
 800a5a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a5a2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	601a      	str	r2, [r3, #0]
 800a5aa:	605a      	str	r2, [r3, #4]
 800a5ac:	609a      	str	r2, [r3, #8]
 800a5ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a5b0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800a5b4:	2200      	movs	r2, #0
 800a5b6:	601a      	str	r2, [r3, #0]
 800a5b8:	605a      	str	r2, [r3, #4]
 800a5ba:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800a5bc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	601a      	str	r2, [r3, #0]
 800a5c4:	605a      	str	r2, [r3, #4]
 800a5c6:	609a      	str	r2, [r3, #8]
 800a5c8:	60da      	str	r2, [r3, #12]
 800a5ca:	611a      	str	r2, [r3, #16]
 800a5cc:	615a      	str	r2, [r3, #20]
 800a5ce:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800a5d0:	1d3b      	adds	r3, r7, #4
 800a5d2:	2234      	movs	r2, #52	@ 0x34
 800a5d4:	2100      	movs	r1, #0
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	f008 fd80 	bl	80130dc <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800a5dc:	4b4c      	ldr	r3, [pc, #304]	@ (800a710 <MX_TIM8_Init+0x174>)
 800a5de:	4a4d      	ldr	r2, [pc, #308]	@ (800a714 <MX_TIM8_Init+0x178>)
 800a5e0:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800a5e2:	4b4b      	ldr	r3, [pc, #300]	@ (800a710 <MX_TIM8_Init+0x174>)
 800a5e4:	2200      	movs	r2, #0
 800a5e6:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a5e8:	4b49      	ldr	r3, [pc, #292]	@ (800a710 <MX_TIM8_Init+0x174>)
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800a5ee:	4b48      	ldr	r3, [pc, #288]	@ (800a710 <MX_TIM8_Init+0x174>)
 800a5f0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a5f4:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 800a5f6:	4b46      	ldr	r3, [pc, #280]	@ (800a710 <MX_TIM8_Init+0x174>)
 800a5f8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a5fc:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800a5fe:	4b44      	ldr	r3, [pc, #272]	@ (800a710 <MX_TIM8_Init+0x174>)
 800a600:	2200      	movs	r2, #0
 800a602:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a604:	4b42      	ldr	r3, [pc, #264]	@ (800a710 <MX_TIM8_Init+0x174>)
 800a606:	2200      	movs	r2, #0
 800a608:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800a60a:	4841      	ldr	r0, [pc, #260]	@ (800a710 <MX_TIM8_Init+0x174>)
 800a60c:	f003 ffc2 	bl	800e594 <HAL_TIM_Base_Init>
 800a610:	4603      	mov	r3, r0
 800a612:	2b00      	cmp	r3, #0
 800a614:	d001      	beq.n	800a61a <MX_TIM8_Init+0x7e>
  {
    Error_Handler();
 800a616:	f7fe ff1d 	bl	8009454 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a61a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a61e:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800a620:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800a624:	4619      	mov	r1, r3
 800a626:	483a      	ldr	r0, [pc, #232]	@ (800a710 <MX_TIM8_Init+0x174>)
 800a628:	f004 ff3c 	bl	800f4a4 <HAL_TIM_ConfigClockSource>
 800a62c:	4603      	mov	r3, r0
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d001      	beq.n	800a636 <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 800a632:	f7fe ff0f 	bl	8009454 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800a636:	4836      	ldr	r0, [pc, #216]	@ (800a710 <MX_TIM8_Init+0x174>)
 800a638:	f004 f8f8 	bl	800e82c <HAL_TIM_PWM_Init>
 800a63c:	4603      	mov	r3, r0
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d001      	beq.n	800a646 <MX_TIM8_Init+0xaa>
  {
    Error_Handler();
 800a642:	f7fe ff07 	bl	8009454 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a646:	2300      	movs	r3, #0
 800a648:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800a64a:	2300      	movs	r3, #0
 800a64c:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a64e:	2300      	movs	r3, #0
 800a650:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800a652:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800a656:	4619      	mov	r1, r3
 800a658:	482d      	ldr	r0, [pc, #180]	@ (800a710 <MX_TIM8_Init+0x174>)
 800a65a:	f005 ff09 	bl	8010470 <HAL_TIMEx_MasterConfigSynchronization>
 800a65e:	4603      	mov	r3, r0
 800a660:	2b00      	cmp	r3, #0
 800a662:	d001      	beq.n	800a668 <MX_TIM8_Init+0xcc>
  {
    Error_Handler();
 800a664:	f7fe fef6 	bl	8009454 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a668:	2360      	movs	r3, #96	@ 0x60
 800a66a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800a66c:	2300      	movs	r3, #0
 800a66e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a670:	2300      	movs	r3, #0
 800a672:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800a674:	2300      	movs	r3, #0
 800a676:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a678:	2300      	movs	r3, #0
 800a67a:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800a67c:	2300      	movs	r3, #0
 800a67e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800a680:	2300      	movs	r3, #0
 800a682:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800a684:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800a688:	2200      	movs	r2, #0
 800a68a:	4619      	mov	r1, r3
 800a68c:	4820      	ldr	r0, [pc, #128]	@ (800a710 <MX_TIM8_Init+0x174>)
 800a68e:	f004 fdf5 	bl	800f27c <HAL_TIM_PWM_ConfigChannel>
 800a692:	4603      	mov	r3, r0
 800a694:	2b00      	cmp	r3, #0
 800a696:	d001      	beq.n	800a69c <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 800a698:	f7fe fedc 	bl	8009454 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800a69c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800a6a0:	2204      	movs	r2, #4
 800a6a2:	4619      	mov	r1, r3
 800a6a4:	481a      	ldr	r0, [pc, #104]	@ (800a710 <MX_TIM8_Init+0x174>)
 800a6a6:	f004 fde9 	bl	800f27c <HAL_TIM_PWM_ConfigChannel>
 800a6aa:	4603      	mov	r3, r0
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d001      	beq.n	800a6b4 <MX_TIM8_Init+0x118>
  {
    Error_Handler();
 800a6b0:	f7fe fed0 	bl	8009454 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800a6bc:	2300      	movs	r3, #0
 800a6be:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800a6c8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a6cc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800a6da:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a6de:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800a6e4:	2300      	movs	r3, #0
 800a6e6:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800a6ec:	1d3b      	adds	r3, r7, #4
 800a6ee:	4619      	mov	r1, r3
 800a6f0:	4807      	ldr	r0, [pc, #28]	@ (800a710 <MX_TIM8_Init+0x174>)
 800a6f2:	f005 ff53 	bl	801059c <HAL_TIMEx_ConfigBreakDeadTime>
 800a6f6:	4603      	mov	r3, r0
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d001      	beq.n	800a700 <MX_TIM8_Init+0x164>
  {
    Error_Handler();
 800a6fc:	f7fe feaa 	bl	8009454 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800a700:	4803      	ldr	r0, [pc, #12]	@ (800a710 <MX_TIM8_Init+0x174>)
 800a702:	f000 f969 	bl	800a9d8 <HAL_TIM_MspPostInit>

}
 800a706:	bf00      	nop
 800a708:	3770      	adds	r7, #112	@ 0x70
 800a70a:	46bd      	mov	sp, r7
 800a70c:	bd80      	pop	{r7, pc}
 800a70e:	bf00      	nop
 800a710:	20002290 	.word	0x20002290
 800a714:	40013400 	.word	0x40013400

0800a718 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 800a718:	b580      	push	{r7, lr}
 800a71a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800a71c:	4b14      	ldr	r3, [pc, #80]	@ (800a770 <MX_TIM16_Init+0x58>)
 800a71e:	4a15      	ldr	r2, [pc, #84]	@ (800a774 <MX_TIM16_Init+0x5c>)
 800a720:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 800a722:	4b13      	ldr	r3, [pc, #76]	@ (800a770 <MX_TIM16_Init+0x58>)
 800a724:	22a9      	movs	r2, #169	@ 0xa9
 800a726:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a728:	4b11      	ldr	r3, [pc, #68]	@ (800a770 <MX_TIM16_Init+0x58>)
 800a72a:	2200      	movs	r2, #0
 800a72c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1145;
 800a72e:	4b10      	ldr	r3, [pc, #64]	@ (800a770 <MX_TIM16_Init+0x58>)
 800a730:	f240 4279 	movw	r2, #1145	@ 0x479
 800a734:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a736:	4b0e      	ldr	r3, [pc, #56]	@ (800a770 <MX_TIM16_Init+0x58>)
 800a738:	2200      	movs	r2, #0
 800a73a:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800a73c:	4b0c      	ldr	r3, [pc, #48]	@ (800a770 <MX_TIM16_Init+0x58>)
 800a73e:	2200      	movs	r2, #0
 800a740:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a742:	4b0b      	ldr	r3, [pc, #44]	@ (800a770 <MX_TIM16_Init+0x58>)
 800a744:	2200      	movs	r2, #0
 800a746:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800a748:	4809      	ldr	r0, [pc, #36]	@ (800a770 <MX_TIM16_Init+0x58>)
 800a74a:	f003 ff23 	bl	800e594 <HAL_TIM_Base_Init>
 800a74e:	4603      	mov	r3, r0
 800a750:	2b00      	cmp	r3, #0
 800a752:	d001      	beq.n	800a758 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 800a754:	f7fe fe7e 	bl	8009454 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 800a758:	2108      	movs	r1, #8
 800a75a:	4805      	ldr	r0, [pc, #20]	@ (800a770 <MX_TIM16_Init+0x58>)
 800a75c:	f004 f9dc 	bl	800eb18 <HAL_TIM_OnePulse_Init>
 800a760:	4603      	mov	r3, r0
 800a762:	2b00      	cmp	r3, #0
 800a764:	d001      	beq.n	800a76a <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 800a766:	f7fe fe75 	bl	8009454 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800a76a:	bf00      	nop
 800a76c:	bd80      	pop	{r7, pc}
 800a76e:	bf00      	nop
 800a770:	2000235c 	.word	0x2000235c
 800a774:	40014400 	.word	0x40014400

0800a778 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b084      	sub	sp, #16
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	4a0d      	ldr	r2, [pc, #52]	@ (800a7bc <HAL_TIM_PWM_MspInit+0x44>)
 800a786:	4293      	cmp	r3, r2
 800a788:	d113      	bne.n	800a7b2 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800a78a:	4b0d      	ldr	r3, [pc, #52]	@ (800a7c0 <HAL_TIM_PWM_MspInit+0x48>)
 800a78c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a78e:	4a0c      	ldr	r2, [pc, #48]	@ (800a7c0 <HAL_TIM_PWM_MspInit+0x48>)
 800a790:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800a794:	6613      	str	r3, [r2, #96]	@ 0x60
 800a796:	4b0a      	ldr	r3, [pc, #40]	@ (800a7c0 <HAL_TIM_PWM_MspInit+0x48>)
 800a798:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a79a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a79e:	60fb      	str	r3, [r7, #12]
 800a7a0:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	2100      	movs	r1, #0
 800a7a6:	2019      	movs	r0, #25
 800a7a8:	f002 f979 	bl	800ca9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800a7ac:	2019      	movs	r0, #25
 800a7ae:	f002 f990 	bl	800cad2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800a7b2:	bf00      	nop
 800a7b4:	3710      	adds	r7, #16
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	bd80      	pop	{r7, pc}
 800a7ba:	bf00      	nop
 800a7bc:	40012c00 	.word	0x40012c00
 800a7c0:	40021000 	.word	0x40021000

0800a7c4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	b086      	sub	sp, #24
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a7d4:	d114      	bne.n	800a800 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800a7d6:	4b22      	ldr	r3, [pc, #136]	@ (800a860 <HAL_TIM_Base_MspInit+0x9c>)
 800a7d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a7da:	4a21      	ldr	r2, [pc, #132]	@ (800a860 <HAL_TIM_Base_MspInit+0x9c>)
 800a7dc:	f043 0301 	orr.w	r3, r3, #1
 800a7e0:	6593      	str	r3, [r2, #88]	@ 0x58
 800a7e2:	4b1f      	ldr	r3, [pc, #124]	@ (800a860 <HAL_TIM_Base_MspInit+0x9c>)
 800a7e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a7e6:	f003 0301 	and.w	r3, r3, #1
 800a7ea:	617b      	str	r3, [r7, #20]
 800a7ec:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	2100      	movs	r1, #0
 800a7f2:	201c      	movs	r0, #28
 800a7f4:	f002 f953 	bl	800ca9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800a7f8:	201c      	movs	r0, #28
 800a7fa:	f002 f96a 	bl	800cad2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 800a7fe:	e02a      	b.n	800a856 <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM8)
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	4a17      	ldr	r2, [pc, #92]	@ (800a864 <HAL_TIM_Base_MspInit+0xa0>)
 800a806:	4293      	cmp	r3, r2
 800a808:	d10c      	bne.n	800a824 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800a80a:	4b15      	ldr	r3, [pc, #84]	@ (800a860 <HAL_TIM_Base_MspInit+0x9c>)
 800a80c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a80e:	4a14      	ldr	r2, [pc, #80]	@ (800a860 <HAL_TIM_Base_MspInit+0x9c>)
 800a810:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800a814:	6613      	str	r3, [r2, #96]	@ 0x60
 800a816:	4b12      	ldr	r3, [pc, #72]	@ (800a860 <HAL_TIM_Base_MspInit+0x9c>)
 800a818:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a81a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a81e:	613b      	str	r3, [r7, #16]
 800a820:	693b      	ldr	r3, [r7, #16]
}
 800a822:	e018      	b.n	800a856 <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM16)
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	4a0f      	ldr	r2, [pc, #60]	@ (800a868 <HAL_TIM_Base_MspInit+0xa4>)
 800a82a:	4293      	cmp	r3, r2
 800a82c:	d113      	bne.n	800a856 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800a82e:	4b0c      	ldr	r3, [pc, #48]	@ (800a860 <HAL_TIM_Base_MspInit+0x9c>)
 800a830:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a832:	4a0b      	ldr	r2, [pc, #44]	@ (800a860 <HAL_TIM_Base_MspInit+0x9c>)
 800a834:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a838:	6613      	str	r3, [r2, #96]	@ 0x60
 800a83a:	4b09      	ldr	r3, [pc, #36]	@ (800a860 <HAL_TIM_Base_MspInit+0x9c>)
 800a83c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a83e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a842:	60fb      	str	r3, [r7, #12]
 800a844:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800a846:	2200      	movs	r2, #0
 800a848:	2100      	movs	r1, #0
 800a84a:	2019      	movs	r0, #25
 800a84c:	f002 f927 	bl	800ca9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800a850:	2019      	movs	r0, #25
 800a852:	f002 f93e 	bl	800cad2 <HAL_NVIC_EnableIRQ>
}
 800a856:	bf00      	nop
 800a858:	3718      	adds	r7, #24
 800a85a:	46bd      	mov	sp, r7
 800a85c:	bd80      	pop	{r7, pc}
 800a85e:	bf00      	nop
 800a860:	40021000 	.word	0x40021000
 800a864:	40013400 	.word	0x40013400
 800a868:	40014400 	.word	0x40014400

0800a86c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b08e      	sub	sp, #56	@ 0x38
 800a870:	af00      	add	r7, sp, #0
 800a872:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a874:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a878:	2200      	movs	r2, #0
 800a87a:	601a      	str	r2, [r3, #0]
 800a87c:	605a      	str	r2, [r3, #4]
 800a87e:	609a      	str	r2, [r3, #8]
 800a880:	60da      	str	r2, [r3, #12]
 800a882:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	4a4f      	ldr	r2, [pc, #316]	@ (800a9c8 <HAL_TIM_Encoder_MspInit+0x15c>)
 800a88a:	4293      	cmp	r3, r2
 800a88c:	d131      	bne.n	800a8f2 <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800a88e:	4b4f      	ldr	r3, [pc, #316]	@ (800a9cc <HAL_TIM_Encoder_MspInit+0x160>)
 800a890:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a892:	4a4e      	ldr	r2, [pc, #312]	@ (800a9cc <HAL_TIM_Encoder_MspInit+0x160>)
 800a894:	f043 0302 	orr.w	r3, r3, #2
 800a898:	6593      	str	r3, [r2, #88]	@ 0x58
 800a89a:	4b4c      	ldr	r3, [pc, #304]	@ (800a9cc <HAL_TIM_Encoder_MspInit+0x160>)
 800a89c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a89e:	f003 0302 	and.w	r3, r3, #2
 800a8a2:	623b      	str	r3, [r7, #32]
 800a8a4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a8a6:	4b49      	ldr	r3, [pc, #292]	@ (800a9cc <HAL_TIM_Encoder_MspInit+0x160>)
 800a8a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a8aa:	4a48      	ldr	r2, [pc, #288]	@ (800a9cc <HAL_TIM_Encoder_MspInit+0x160>)
 800a8ac:	f043 0301 	orr.w	r3, r3, #1
 800a8b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a8b2:	4b46      	ldr	r3, [pc, #280]	@ (800a9cc <HAL_TIM_Encoder_MspInit+0x160>)
 800a8b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a8b6:	f003 0301 	and.w	r3, r3, #1
 800a8ba:	61fb      	str	r3, [r7, #28]
 800a8bc:	69fb      	ldr	r3, [r7, #28]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800a8be:	23c0      	movs	r3, #192	@ 0xc0
 800a8c0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a8c2:	2302      	movs	r3, #2
 800a8c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800a8ce:	2302      	movs	r3, #2
 800a8d0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a8d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a8d6:	4619      	mov	r1, r3
 800a8d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800a8dc:	f002 fc46 	bl	800d16c <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800a8e0:	2200      	movs	r2, #0
 800a8e2:	2100      	movs	r1, #0
 800a8e4:	201d      	movs	r0, #29
 800a8e6:	f002 f8da 	bl	800ca9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800a8ea:	201d      	movs	r0, #29
 800a8ec:	f002 f8f1 	bl	800cad2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 800a8f0:	e065      	b.n	800a9be <HAL_TIM_Encoder_MspInit+0x152>
  else if(tim_encoderHandle->Instance==TIM4)
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	4a36      	ldr	r2, [pc, #216]	@ (800a9d0 <HAL_TIM_Encoder_MspInit+0x164>)
 800a8f8:	4293      	cmp	r3, r2
 800a8fa:	d132      	bne.n	800a962 <HAL_TIM_Encoder_MspInit+0xf6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800a8fc:	4b33      	ldr	r3, [pc, #204]	@ (800a9cc <HAL_TIM_Encoder_MspInit+0x160>)
 800a8fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a900:	4a32      	ldr	r2, [pc, #200]	@ (800a9cc <HAL_TIM_Encoder_MspInit+0x160>)
 800a902:	f043 0304 	orr.w	r3, r3, #4
 800a906:	6593      	str	r3, [r2, #88]	@ 0x58
 800a908:	4b30      	ldr	r3, [pc, #192]	@ (800a9cc <HAL_TIM_Encoder_MspInit+0x160>)
 800a90a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a90c:	f003 0304 	and.w	r3, r3, #4
 800a910:	61bb      	str	r3, [r7, #24]
 800a912:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a914:	4b2d      	ldr	r3, [pc, #180]	@ (800a9cc <HAL_TIM_Encoder_MspInit+0x160>)
 800a916:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a918:	4a2c      	ldr	r2, [pc, #176]	@ (800a9cc <HAL_TIM_Encoder_MspInit+0x160>)
 800a91a:	f043 0301 	orr.w	r3, r3, #1
 800a91e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a920:	4b2a      	ldr	r3, [pc, #168]	@ (800a9cc <HAL_TIM_Encoder_MspInit+0x160>)
 800a922:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a924:	f003 0301 	and.w	r3, r3, #1
 800a928:	617b      	str	r3, [r7, #20]
 800a92a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a92c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800a930:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a932:	2302      	movs	r3, #2
 800a934:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a936:	2300      	movs	r3, #0
 800a938:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a93a:	2300      	movs	r3, #0
 800a93c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 800a93e:	230a      	movs	r3, #10
 800a940:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a942:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a946:	4619      	mov	r1, r3
 800a948:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800a94c:	f002 fc0e 	bl	800d16c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800a950:	2200      	movs	r2, #0
 800a952:	2100      	movs	r1, #0
 800a954:	201e      	movs	r0, #30
 800a956:	f002 f8a2 	bl	800ca9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800a95a:	201e      	movs	r0, #30
 800a95c:	f002 f8b9 	bl	800cad2 <HAL_NVIC_EnableIRQ>
}
 800a960:	e02d      	b.n	800a9be <HAL_TIM_Encoder_MspInit+0x152>
  else if(tim_encoderHandle->Instance==TIM5)
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	4a1b      	ldr	r2, [pc, #108]	@ (800a9d4 <HAL_TIM_Encoder_MspInit+0x168>)
 800a968:	4293      	cmp	r3, r2
 800a96a:	d128      	bne.n	800a9be <HAL_TIM_Encoder_MspInit+0x152>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800a96c:	4b17      	ldr	r3, [pc, #92]	@ (800a9cc <HAL_TIM_Encoder_MspInit+0x160>)
 800a96e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a970:	4a16      	ldr	r2, [pc, #88]	@ (800a9cc <HAL_TIM_Encoder_MspInit+0x160>)
 800a972:	f043 0308 	orr.w	r3, r3, #8
 800a976:	6593      	str	r3, [r2, #88]	@ 0x58
 800a978:	4b14      	ldr	r3, [pc, #80]	@ (800a9cc <HAL_TIM_Encoder_MspInit+0x160>)
 800a97a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a97c:	f003 0308 	and.w	r3, r3, #8
 800a980:	613b      	str	r3, [r7, #16]
 800a982:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a984:	4b11      	ldr	r3, [pc, #68]	@ (800a9cc <HAL_TIM_Encoder_MspInit+0x160>)
 800a986:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a988:	4a10      	ldr	r2, [pc, #64]	@ (800a9cc <HAL_TIM_Encoder_MspInit+0x160>)
 800a98a:	f043 0301 	orr.w	r3, r3, #1
 800a98e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a990:	4b0e      	ldr	r3, [pc, #56]	@ (800a9cc <HAL_TIM_Encoder_MspInit+0x160>)
 800a992:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a994:	f003 0301 	and.w	r3, r3, #1
 800a998:	60fb      	str	r3, [r7, #12]
 800a99a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800a99c:	2303      	movs	r3, #3
 800a99e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a9a0:	2302      	movs	r3, #2
 800a9a2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800a9ac:	2302      	movs	r3, #2
 800a9ae:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a9b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a9b4:	4619      	mov	r1, r3
 800a9b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800a9ba:	f002 fbd7 	bl	800d16c <HAL_GPIO_Init>
}
 800a9be:	bf00      	nop
 800a9c0:	3738      	adds	r7, #56	@ 0x38
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	bd80      	pop	{r7, pc}
 800a9c6:	bf00      	nop
 800a9c8:	40000400 	.word	0x40000400
 800a9cc:	40021000 	.word	0x40021000
 800a9d0:	40000800 	.word	0x40000800
 800a9d4:	40000c00 	.word	0x40000c00

0800a9d8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b08a      	sub	sp, #40	@ 0x28
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a9e0:	f107 0314 	add.w	r3, r7, #20
 800a9e4:	2200      	movs	r2, #0
 800a9e6:	601a      	str	r2, [r3, #0]
 800a9e8:	605a      	str	r2, [r3, #4]
 800a9ea:	609a      	str	r2, [r3, #8]
 800a9ec:	60da      	str	r2, [r3, #12]
 800a9ee:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	4a22      	ldr	r2, [pc, #136]	@ (800aa80 <HAL_TIM_MspPostInit+0xa8>)
 800a9f6:	4293      	cmp	r3, r2
 800a9f8:	d11c      	bne.n	800aa34 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a9fa:	4b22      	ldr	r3, [pc, #136]	@ (800aa84 <HAL_TIM_MspPostInit+0xac>)
 800a9fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a9fe:	4a21      	ldr	r2, [pc, #132]	@ (800aa84 <HAL_TIM_MspPostInit+0xac>)
 800aa00:	f043 0304 	orr.w	r3, r3, #4
 800aa04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800aa06:	4b1f      	ldr	r3, [pc, #124]	@ (800aa84 <HAL_TIM_MspPostInit+0xac>)
 800aa08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aa0a:	f003 0304 	and.w	r3, r3, #4
 800aa0e:	613b      	str	r3, [r7, #16]
 800aa10:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC3     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800aa12:	2308      	movs	r3, #8
 800aa14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aa16:	2302      	movs	r3, #2
 800aa18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aa1e:	2300      	movs	r3, #0
 800aa20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800aa22:	2302      	movs	r3, #2
 800aa24:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800aa26:	f107 0314 	add.w	r3, r7, #20
 800aa2a:	4619      	mov	r1, r3
 800aa2c:	4816      	ldr	r0, [pc, #88]	@ (800aa88 <HAL_TIM_MspPostInit+0xb0>)
 800aa2e:	f002 fb9d 	bl	800d16c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800aa32:	e020      	b.n	800aa76 <HAL_TIM_MspPostInit+0x9e>
  else if(timHandle->Instance==TIM8)
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	4a14      	ldr	r2, [pc, #80]	@ (800aa8c <HAL_TIM_MspPostInit+0xb4>)
 800aa3a:	4293      	cmp	r3, r2
 800aa3c:	d11b      	bne.n	800aa76 <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800aa3e:	4b11      	ldr	r3, [pc, #68]	@ (800aa84 <HAL_TIM_MspPostInit+0xac>)
 800aa40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aa42:	4a10      	ldr	r2, [pc, #64]	@ (800aa84 <HAL_TIM_MspPostInit+0xac>)
 800aa44:	f043 0304 	orr.w	r3, r3, #4
 800aa48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800aa4a:	4b0e      	ldr	r3, [pc, #56]	@ (800aa84 <HAL_TIM_MspPostInit+0xac>)
 800aa4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aa4e:	f003 0304 	and.w	r3, r3, #4
 800aa52:	60fb      	str	r3, [r7, #12]
 800aa54:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800aa56:	23c0      	movs	r3, #192	@ 0xc0
 800aa58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aa5a:	2302      	movs	r3, #2
 800aa5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aa5e:	2300      	movs	r3, #0
 800aa60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aa62:	2300      	movs	r3, #0
 800aa64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 800aa66:	2304      	movs	r3, #4
 800aa68:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800aa6a:	f107 0314 	add.w	r3, r7, #20
 800aa6e:	4619      	mov	r1, r3
 800aa70:	4805      	ldr	r0, [pc, #20]	@ (800aa88 <HAL_TIM_MspPostInit+0xb0>)
 800aa72:	f002 fb7b 	bl	800d16c <HAL_GPIO_Init>
}
 800aa76:	bf00      	nop
 800aa78:	3728      	adds	r7, #40	@ 0x28
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	bd80      	pop	{r7, pc}
 800aa7e:	bf00      	nop
 800aa80:	40012c00 	.word	0x40012c00
 800aa84:	40021000 	.word	0x40021000
 800aa88:	48000800 	.word	0x48000800
 800aa8c:	40013400 	.word	0x40013400

0800aa90 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 800aa90:	b580      	push	{r7, lr}
 800aa92:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800aa94:	4b20      	ldr	r3, [pc, #128]	@ (800ab18 <MX_LPUART1_UART_Init+0x88>)
 800aa96:	4a21      	ldr	r2, [pc, #132]	@ (800ab1c <MX_LPUART1_UART_Init+0x8c>)
 800aa98:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 2000000;
 800aa9a:	4b1f      	ldr	r3, [pc, #124]	@ (800ab18 <MX_LPUART1_UART_Init+0x88>)
 800aa9c:	4a20      	ldr	r2, [pc, #128]	@ (800ab20 <MX_LPUART1_UART_Init+0x90>)
 800aa9e:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800aaa0:	4b1d      	ldr	r3, [pc, #116]	@ (800ab18 <MX_LPUART1_UART_Init+0x88>)
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800aaa6:	4b1c      	ldr	r3, [pc, #112]	@ (800ab18 <MX_LPUART1_UART_Init+0x88>)
 800aaa8:	2200      	movs	r2, #0
 800aaaa:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800aaac:	4b1a      	ldr	r3, [pc, #104]	@ (800ab18 <MX_LPUART1_UART_Init+0x88>)
 800aaae:	2200      	movs	r2, #0
 800aab0:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800aab2:	4b19      	ldr	r3, [pc, #100]	@ (800ab18 <MX_LPUART1_UART_Init+0x88>)
 800aab4:	220c      	movs	r2, #12
 800aab6:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800aab8:	4b17      	ldr	r3, [pc, #92]	@ (800ab18 <MX_LPUART1_UART_Init+0x88>)
 800aaba:	2200      	movs	r2, #0
 800aabc:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800aabe:	4b16      	ldr	r3, [pc, #88]	@ (800ab18 <MX_LPUART1_UART_Init+0x88>)
 800aac0:	2200      	movs	r2, #0
 800aac2:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800aac4:	4b14      	ldr	r3, [pc, #80]	@ (800ab18 <MX_LPUART1_UART_Init+0x88>)
 800aac6:	2200      	movs	r2, #0
 800aac8:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800aaca:	4b13      	ldr	r3, [pc, #76]	@ (800ab18 <MX_LPUART1_UART_Init+0x88>)
 800aacc:	2200      	movs	r2, #0
 800aace:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800aad0:	4811      	ldr	r0, [pc, #68]	@ (800ab18 <MX_LPUART1_UART_Init+0x88>)
 800aad2:	f005 fe47 	bl	8010764 <HAL_UART_Init>
 800aad6:	4603      	mov	r3, r0
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d001      	beq.n	800aae0 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 800aadc:	f7fe fcba 	bl	8009454 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800aae0:	2100      	movs	r1, #0
 800aae2:	480d      	ldr	r0, [pc, #52]	@ (800ab18 <MX_LPUART1_UART_Init+0x88>)
 800aae4:	f007 fc83 	bl	80123ee <HAL_UARTEx_SetTxFifoThreshold>
 800aae8:	4603      	mov	r3, r0
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d001      	beq.n	800aaf2 <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 800aaee:	f7fe fcb1 	bl	8009454 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800aaf2:	2100      	movs	r1, #0
 800aaf4:	4808      	ldr	r0, [pc, #32]	@ (800ab18 <MX_LPUART1_UART_Init+0x88>)
 800aaf6:	f007 fcb8 	bl	801246a <HAL_UARTEx_SetRxFifoThreshold>
 800aafa:	4603      	mov	r3, r0
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d001      	beq.n	800ab04 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 800ab00:	f7fe fca8 	bl	8009454 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800ab04:	4804      	ldr	r0, [pc, #16]	@ (800ab18 <MX_LPUART1_UART_Init+0x88>)
 800ab06:	f007 fc39 	bl	801237c <HAL_UARTEx_DisableFifoMode>
 800ab0a:	4603      	mov	r3, r0
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d001      	beq.n	800ab14 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 800ab10:	f7fe fca0 	bl	8009454 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800ab14:	bf00      	nop
 800ab16:	bd80      	pop	{r7, pc}
 800ab18:	20002428 	.word	0x20002428
 800ab1c:	40008000 	.word	0x40008000
 800ab20:	001e8480 	.word	0x001e8480

0800ab24 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800ab24:	b580      	push	{r7, lr}
 800ab26:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800ab28:	4b23      	ldr	r3, [pc, #140]	@ (800abb8 <MX_USART2_UART_Init+0x94>)
 800ab2a:	4a24      	ldr	r2, [pc, #144]	@ (800abbc <MX_USART2_UART_Init+0x98>)
 800ab2c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800ab2e:	4b22      	ldr	r3, [pc, #136]	@ (800abb8 <MX_USART2_UART_Init+0x94>)
 800ab30:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800ab34:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800ab36:	4b20      	ldr	r3, [pc, #128]	@ (800abb8 <MX_USART2_UART_Init+0x94>)
 800ab38:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800ab3c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800ab3e:	4b1e      	ldr	r3, [pc, #120]	@ (800abb8 <MX_USART2_UART_Init+0x94>)
 800ab40:	2200      	movs	r2, #0
 800ab42:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 800ab44:	4b1c      	ldr	r3, [pc, #112]	@ (800abb8 <MX_USART2_UART_Init+0x94>)
 800ab46:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800ab4a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800ab4c:	4b1a      	ldr	r3, [pc, #104]	@ (800abb8 <MX_USART2_UART_Init+0x94>)
 800ab4e:	220c      	movs	r2, #12
 800ab50:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800ab52:	4b19      	ldr	r3, [pc, #100]	@ (800abb8 <MX_USART2_UART_Init+0x94>)
 800ab54:	2200      	movs	r2, #0
 800ab56:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800ab58:	4b17      	ldr	r3, [pc, #92]	@ (800abb8 <MX_USART2_UART_Init+0x94>)
 800ab5a:	2200      	movs	r2, #0
 800ab5c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800ab5e:	4b16      	ldr	r3, [pc, #88]	@ (800abb8 <MX_USART2_UART_Init+0x94>)
 800ab60:	2200      	movs	r2, #0
 800ab62:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800ab64:	4b14      	ldr	r3, [pc, #80]	@ (800abb8 <MX_USART2_UART_Init+0x94>)
 800ab66:	2200      	movs	r2, #0
 800ab68:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800ab6a:	4b13      	ldr	r3, [pc, #76]	@ (800abb8 <MX_USART2_UART_Init+0x94>)
 800ab6c:	2200      	movs	r2, #0
 800ab6e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800ab70:	4811      	ldr	r0, [pc, #68]	@ (800abb8 <MX_USART2_UART_Init+0x94>)
 800ab72:	f005 fdf7 	bl	8010764 <HAL_UART_Init>
 800ab76:	4603      	mov	r3, r0
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d001      	beq.n	800ab80 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 800ab7c:	f7fe fc6a 	bl	8009454 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800ab80:	2100      	movs	r1, #0
 800ab82:	480d      	ldr	r0, [pc, #52]	@ (800abb8 <MX_USART2_UART_Init+0x94>)
 800ab84:	f007 fc33 	bl	80123ee <HAL_UARTEx_SetTxFifoThreshold>
 800ab88:	4603      	mov	r3, r0
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d001      	beq.n	800ab92 <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 800ab8e:	f7fe fc61 	bl	8009454 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800ab92:	2100      	movs	r1, #0
 800ab94:	4808      	ldr	r0, [pc, #32]	@ (800abb8 <MX_USART2_UART_Init+0x94>)
 800ab96:	f007 fc68 	bl	801246a <HAL_UARTEx_SetRxFifoThreshold>
 800ab9a:	4603      	mov	r3, r0
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d001      	beq.n	800aba4 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 800aba0:	f7fe fc58 	bl	8009454 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800aba4:	4804      	ldr	r0, [pc, #16]	@ (800abb8 <MX_USART2_UART_Init+0x94>)
 800aba6:	f007 fbe9 	bl	801237c <HAL_UARTEx_DisableFifoMode>
 800abaa:	4603      	mov	r3, r0
 800abac:	2b00      	cmp	r3, #0
 800abae:	d001      	beq.n	800abb4 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 800abb0:	f7fe fc50 	bl	8009454 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800abb4:	bf00      	nop
 800abb6:	bd80      	pop	{r7, pc}
 800abb8:	200024f4 	.word	0x200024f4
 800abbc:	40004400 	.word	0x40004400

0800abc0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b0a0      	sub	sp, #128	@ 0x80
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800abc8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800abcc:	2200      	movs	r2, #0
 800abce:	601a      	str	r2, [r3, #0]
 800abd0:	605a      	str	r2, [r3, #4]
 800abd2:	609a      	str	r2, [r3, #8]
 800abd4:	60da      	str	r2, [r3, #12]
 800abd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800abd8:	f107 0318 	add.w	r3, r7, #24
 800abdc:	2254      	movs	r2, #84	@ 0x54
 800abde:	2100      	movs	r1, #0
 800abe0:	4618      	mov	r0, r3
 800abe2:	f008 fa7b 	bl	80130dc <memset>
  if(uartHandle->Instance==LPUART1)
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	4a99      	ldr	r2, [pc, #612]	@ (800ae50 <HAL_UART_MspInit+0x290>)
 800abec:	4293      	cmp	r3, r2
 800abee:	f040 8093 	bne.w	800ad18 <HAL_UART_MspInit+0x158>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800abf2:	2320      	movs	r3, #32
 800abf4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800abf6:	2300      	movs	r3, #0
 800abf8:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800abfa:	f107 0318 	add.w	r3, r7, #24
 800abfe:	4618      	mov	r0, r3
 800ac00:	f003 fa7a 	bl	800e0f8 <HAL_RCCEx_PeriphCLKConfig>
 800ac04:	4603      	mov	r3, r0
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d001      	beq.n	800ac0e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800ac0a:	f7fe fc23 	bl	8009454 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800ac0e:	4b91      	ldr	r3, [pc, #580]	@ (800ae54 <HAL_UART_MspInit+0x294>)
 800ac10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ac12:	4a90      	ldr	r2, [pc, #576]	@ (800ae54 <HAL_UART_MspInit+0x294>)
 800ac14:	f043 0301 	orr.w	r3, r3, #1
 800ac18:	65d3      	str	r3, [r2, #92]	@ 0x5c
 800ac1a:	4b8e      	ldr	r3, [pc, #568]	@ (800ae54 <HAL_UART_MspInit+0x294>)
 800ac1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ac1e:	f003 0301 	and.w	r3, r3, #1
 800ac22:	617b      	str	r3, [r7, #20]
 800ac24:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ac26:	4b8b      	ldr	r3, [pc, #556]	@ (800ae54 <HAL_UART_MspInit+0x294>)
 800ac28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ac2a:	4a8a      	ldr	r2, [pc, #552]	@ (800ae54 <HAL_UART_MspInit+0x294>)
 800ac2c:	f043 0302 	orr.w	r3, r3, #2
 800ac30:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800ac32:	4b88      	ldr	r3, [pc, #544]	@ (800ae54 <HAL_UART_MspInit+0x294>)
 800ac34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ac36:	f003 0302 	and.w	r3, r3, #2
 800ac3a:	613b      	str	r3, [r7, #16]
 800ac3c:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800ac3e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800ac42:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ac44:	2302      	movs	r3, #2
 800ac46:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ac48:	2300      	movs	r3, #0
 800ac4a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ac4c:	2300      	movs	r3, #0
 800ac4e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800ac50:	2308      	movs	r3, #8
 800ac52:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ac54:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800ac58:	4619      	mov	r1, r3
 800ac5a:	487f      	ldr	r0, [pc, #508]	@ (800ae58 <HAL_UART_MspInit+0x298>)
 800ac5c:	f002 fa86 	bl	800d16c <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel4;
 800ac60:	4b7e      	ldr	r3, [pc, #504]	@ (800ae5c <HAL_UART_MspInit+0x29c>)
 800ac62:	4a7f      	ldr	r2, [pc, #508]	@ (800ae60 <HAL_UART_MspInit+0x2a0>)
 800ac64:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 800ac66:	4b7d      	ldr	r3, [pc, #500]	@ (800ae5c <HAL_UART_MspInit+0x29c>)
 800ac68:	2222      	movs	r2, #34	@ 0x22
 800ac6a:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800ac6c:	4b7b      	ldr	r3, [pc, #492]	@ (800ae5c <HAL_UART_MspInit+0x29c>)
 800ac6e:	2200      	movs	r2, #0
 800ac70:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800ac72:	4b7a      	ldr	r3, [pc, #488]	@ (800ae5c <HAL_UART_MspInit+0x29c>)
 800ac74:	2200      	movs	r2, #0
 800ac76:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800ac78:	4b78      	ldr	r3, [pc, #480]	@ (800ae5c <HAL_UART_MspInit+0x29c>)
 800ac7a:	2280      	movs	r2, #128	@ 0x80
 800ac7c:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800ac7e:	4b77      	ldr	r3, [pc, #476]	@ (800ae5c <HAL_UART_MspInit+0x29c>)
 800ac80:	2200      	movs	r2, #0
 800ac82:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800ac84:	4b75      	ldr	r3, [pc, #468]	@ (800ae5c <HAL_UART_MspInit+0x29c>)
 800ac86:	2200      	movs	r2, #0
 800ac88:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 800ac8a:	4b74      	ldr	r3, [pc, #464]	@ (800ae5c <HAL_UART_MspInit+0x29c>)
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800ac90:	4b72      	ldr	r3, [pc, #456]	@ (800ae5c <HAL_UART_MspInit+0x29c>)
 800ac92:	2200      	movs	r2, #0
 800ac94:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 800ac96:	4871      	ldr	r0, [pc, #452]	@ (800ae5c <HAL_UART_MspInit+0x29c>)
 800ac98:	f001 ff36 	bl	800cb08 <HAL_DMA_Init>
 800ac9c:	4603      	mov	r3, r0
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d001      	beq.n	800aca6 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 800aca2:	f7fe fbd7 	bl	8009454 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	4a6c      	ldr	r2, [pc, #432]	@ (800ae5c <HAL_UART_MspInit+0x29c>)
 800acaa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800acae:	4a6b      	ldr	r2, [pc, #428]	@ (800ae5c <HAL_UART_MspInit+0x29c>)
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel5;
 800acb4:	4b6b      	ldr	r3, [pc, #428]	@ (800ae64 <HAL_UART_MspInit+0x2a4>)
 800acb6:	4a6c      	ldr	r2, [pc, #432]	@ (800ae68 <HAL_UART_MspInit+0x2a8>)
 800acb8:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 800acba:	4b6a      	ldr	r3, [pc, #424]	@ (800ae64 <HAL_UART_MspInit+0x2a4>)
 800acbc:	2223      	movs	r2, #35	@ 0x23
 800acbe:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800acc0:	4b68      	ldr	r3, [pc, #416]	@ (800ae64 <HAL_UART_MspInit+0x2a4>)
 800acc2:	2210      	movs	r2, #16
 800acc4:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800acc6:	4b67      	ldr	r3, [pc, #412]	@ (800ae64 <HAL_UART_MspInit+0x2a4>)
 800acc8:	2200      	movs	r2, #0
 800acca:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800accc:	4b65      	ldr	r3, [pc, #404]	@ (800ae64 <HAL_UART_MspInit+0x2a4>)
 800acce:	2280      	movs	r2, #128	@ 0x80
 800acd0:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800acd2:	4b64      	ldr	r3, [pc, #400]	@ (800ae64 <HAL_UART_MspInit+0x2a4>)
 800acd4:	2200      	movs	r2, #0
 800acd6:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800acd8:	4b62      	ldr	r3, [pc, #392]	@ (800ae64 <HAL_UART_MspInit+0x2a4>)
 800acda:	2200      	movs	r2, #0
 800acdc:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 800acde:	4b61      	ldr	r3, [pc, #388]	@ (800ae64 <HAL_UART_MspInit+0x2a4>)
 800ace0:	2200      	movs	r2, #0
 800ace2:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800ace4:	4b5f      	ldr	r3, [pc, #380]	@ (800ae64 <HAL_UART_MspInit+0x2a4>)
 800ace6:	2200      	movs	r2, #0
 800ace8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 800acea:	485e      	ldr	r0, [pc, #376]	@ (800ae64 <HAL_UART_MspInit+0x2a4>)
 800acec:	f001 ff0c 	bl	800cb08 <HAL_DMA_Init>
 800acf0:	4603      	mov	r3, r0
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d001      	beq.n	800acfa <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 800acf6:	f7fe fbad 	bl	8009454 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	4a59      	ldr	r2, [pc, #356]	@ (800ae64 <HAL_UART_MspInit+0x2a4>)
 800acfe:	67da      	str	r2, [r3, #124]	@ 0x7c
 800ad00:	4a58      	ldr	r2, [pc, #352]	@ (800ae64 <HAL_UART_MspInit+0x2a4>)
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 800ad06:	2200      	movs	r2, #0
 800ad08:	2100      	movs	r1, #0
 800ad0a:	205b      	movs	r0, #91	@ 0x5b
 800ad0c:	f001 fec7 	bl	800ca9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 800ad10:	205b      	movs	r0, #91	@ 0x5b
 800ad12:	f001 fede 	bl	800cad2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800ad16:	e097      	b.n	800ae48 <HAL_UART_MspInit+0x288>
  else if(uartHandle->Instance==USART2)
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	4a53      	ldr	r2, [pc, #332]	@ (800ae6c <HAL_UART_MspInit+0x2ac>)
 800ad1e:	4293      	cmp	r3, r2
 800ad20:	f040 8092 	bne.w	800ae48 <HAL_UART_MspInit+0x288>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800ad24:	2302      	movs	r3, #2
 800ad26:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800ad28:	2300      	movs	r3, #0
 800ad2a:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800ad2c:	f107 0318 	add.w	r3, r7, #24
 800ad30:	4618      	mov	r0, r3
 800ad32:	f003 f9e1 	bl	800e0f8 <HAL_RCCEx_PeriphCLKConfig>
 800ad36:	4603      	mov	r3, r0
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d001      	beq.n	800ad40 <HAL_UART_MspInit+0x180>
      Error_Handler();
 800ad3c:	f7fe fb8a 	bl	8009454 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800ad40:	4b44      	ldr	r3, [pc, #272]	@ (800ae54 <HAL_UART_MspInit+0x294>)
 800ad42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ad44:	4a43      	ldr	r2, [pc, #268]	@ (800ae54 <HAL_UART_MspInit+0x294>)
 800ad46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ad4a:	6593      	str	r3, [r2, #88]	@ 0x58
 800ad4c:	4b41      	ldr	r3, [pc, #260]	@ (800ae54 <HAL_UART_MspInit+0x294>)
 800ad4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ad50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ad54:	60fb      	str	r3, [r7, #12]
 800ad56:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ad58:	4b3e      	ldr	r3, [pc, #248]	@ (800ae54 <HAL_UART_MspInit+0x294>)
 800ad5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ad5c:	4a3d      	ldr	r2, [pc, #244]	@ (800ae54 <HAL_UART_MspInit+0x294>)
 800ad5e:	f043 0301 	orr.w	r3, r3, #1
 800ad62:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800ad64:	4b3b      	ldr	r3, [pc, #236]	@ (800ae54 <HAL_UART_MspInit+0x294>)
 800ad66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ad68:	f003 0301 	and.w	r3, r3, #1
 800ad6c:	60bb      	str	r3, [r7, #8]
 800ad6e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800ad70:	230c      	movs	r3, #12
 800ad72:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ad74:	2302      	movs	r3, #2
 800ad76:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad78:	2300      	movs	r3, #0
 800ad7a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800ad80:	2307      	movs	r3, #7
 800ad82:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ad84:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800ad88:	4619      	mov	r1, r3
 800ad8a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800ad8e:	f002 f9ed 	bl	800d16c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel2;
 800ad92:	4b37      	ldr	r3, [pc, #220]	@ (800ae70 <HAL_UART_MspInit+0x2b0>)
 800ad94:	4a37      	ldr	r2, [pc, #220]	@ (800ae74 <HAL_UART_MspInit+0x2b4>)
 800ad96:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 800ad98:	4b35      	ldr	r3, [pc, #212]	@ (800ae70 <HAL_UART_MspInit+0x2b0>)
 800ad9a:	221a      	movs	r2, #26
 800ad9c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800ad9e:	4b34      	ldr	r3, [pc, #208]	@ (800ae70 <HAL_UART_MspInit+0x2b0>)
 800ada0:	2200      	movs	r2, #0
 800ada2:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800ada4:	4b32      	ldr	r3, [pc, #200]	@ (800ae70 <HAL_UART_MspInit+0x2b0>)
 800ada6:	2200      	movs	r2, #0
 800ada8:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800adaa:	4b31      	ldr	r3, [pc, #196]	@ (800ae70 <HAL_UART_MspInit+0x2b0>)
 800adac:	2280      	movs	r2, #128	@ 0x80
 800adae:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800adb0:	4b2f      	ldr	r3, [pc, #188]	@ (800ae70 <HAL_UART_MspInit+0x2b0>)
 800adb2:	2200      	movs	r2, #0
 800adb4:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800adb6:	4b2e      	ldr	r3, [pc, #184]	@ (800ae70 <HAL_UART_MspInit+0x2b0>)
 800adb8:	2200      	movs	r2, #0
 800adba:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800adbc:	4b2c      	ldr	r3, [pc, #176]	@ (800ae70 <HAL_UART_MspInit+0x2b0>)
 800adbe:	2200      	movs	r2, #0
 800adc0:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800adc2:	4b2b      	ldr	r3, [pc, #172]	@ (800ae70 <HAL_UART_MspInit+0x2b0>)
 800adc4:	2200      	movs	r2, #0
 800adc6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800adc8:	4829      	ldr	r0, [pc, #164]	@ (800ae70 <HAL_UART_MspInit+0x2b0>)
 800adca:	f001 fe9d 	bl	800cb08 <HAL_DMA_Init>
 800adce:	4603      	mov	r3, r0
 800add0:	2b00      	cmp	r3, #0
 800add2:	d001      	beq.n	800add8 <HAL_UART_MspInit+0x218>
      Error_Handler();
 800add4:	f7fe fb3e 	bl	8009454 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	4a25      	ldr	r2, [pc, #148]	@ (800ae70 <HAL_UART_MspInit+0x2b0>)
 800addc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800ade0:	4a23      	ldr	r2, [pc, #140]	@ (800ae70 <HAL_UART_MspInit+0x2b0>)
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart2_tx.Instance = DMA1_Channel3;
 800ade6:	4b24      	ldr	r3, [pc, #144]	@ (800ae78 <HAL_UART_MspInit+0x2b8>)
 800ade8:	4a24      	ldr	r2, [pc, #144]	@ (800ae7c <HAL_UART_MspInit+0x2bc>)
 800adea:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 800adec:	4b22      	ldr	r3, [pc, #136]	@ (800ae78 <HAL_UART_MspInit+0x2b8>)
 800adee:	221b      	movs	r2, #27
 800adf0:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800adf2:	4b21      	ldr	r3, [pc, #132]	@ (800ae78 <HAL_UART_MspInit+0x2b8>)
 800adf4:	2210      	movs	r2, #16
 800adf6:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800adf8:	4b1f      	ldr	r3, [pc, #124]	@ (800ae78 <HAL_UART_MspInit+0x2b8>)
 800adfa:	2200      	movs	r2, #0
 800adfc:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800adfe:	4b1e      	ldr	r3, [pc, #120]	@ (800ae78 <HAL_UART_MspInit+0x2b8>)
 800ae00:	2280      	movs	r2, #128	@ 0x80
 800ae02:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800ae04:	4b1c      	ldr	r3, [pc, #112]	@ (800ae78 <HAL_UART_MspInit+0x2b8>)
 800ae06:	2200      	movs	r2, #0
 800ae08:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800ae0a:	4b1b      	ldr	r3, [pc, #108]	@ (800ae78 <HAL_UART_MspInit+0x2b8>)
 800ae0c:	2200      	movs	r2, #0
 800ae0e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800ae10:	4b19      	ldr	r3, [pc, #100]	@ (800ae78 <HAL_UART_MspInit+0x2b8>)
 800ae12:	2200      	movs	r2, #0
 800ae14:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800ae16:	4b18      	ldr	r3, [pc, #96]	@ (800ae78 <HAL_UART_MspInit+0x2b8>)
 800ae18:	2200      	movs	r2, #0
 800ae1a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800ae1c:	4816      	ldr	r0, [pc, #88]	@ (800ae78 <HAL_UART_MspInit+0x2b8>)
 800ae1e:	f001 fe73 	bl	800cb08 <HAL_DMA_Init>
 800ae22:	4603      	mov	r3, r0
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d001      	beq.n	800ae2c <HAL_UART_MspInit+0x26c>
      Error_Handler();
 800ae28:	f7fe fb14 	bl	8009454 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	4a12      	ldr	r2, [pc, #72]	@ (800ae78 <HAL_UART_MspInit+0x2b8>)
 800ae30:	67da      	str	r2, [r3, #124]	@ 0x7c
 800ae32:	4a11      	ldr	r2, [pc, #68]	@ (800ae78 <HAL_UART_MspInit+0x2b8>)
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800ae38:	2200      	movs	r2, #0
 800ae3a:	2100      	movs	r1, #0
 800ae3c:	2026      	movs	r0, #38	@ 0x26
 800ae3e:	f001 fe2e 	bl	800ca9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800ae42:	2026      	movs	r0, #38	@ 0x26
 800ae44:	f001 fe45 	bl	800cad2 <HAL_NVIC_EnableIRQ>
}
 800ae48:	bf00      	nop
 800ae4a:	3780      	adds	r7, #128	@ 0x80
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	bd80      	pop	{r7, pc}
 800ae50:	40008000 	.word	0x40008000
 800ae54:	40021000 	.word	0x40021000
 800ae58:	48000400 	.word	0x48000400
 800ae5c:	200025c0 	.word	0x200025c0
 800ae60:	40020044 	.word	0x40020044
 800ae64:	20002620 	.word	0x20002620
 800ae68:	40020058 	.word	0x40020058
 800ae6c:	40004400 	.word	0x40004400
 800ae70:	20002680 	.word	0x20002680
 800ae74:	4002001c 	.word	0x4002001c
 800ae78:	200026e0 	.word	0x200026e0
 800ae7c:	40020030 	.word	0x40020030

0800ae80 <Reset_Handler>:
*/

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
	Reset_Handler:  ldr   r0, =_estack
 800ae80:	480d      	ldr	r0, [pc, #52]	@ (800aeb8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800ae82:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/

    bl  SystemInit
 800ae84:	f7ff f994 	bl	800a1b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800ae88:	480c      	ldr	r0, [pc, #48]	@ (800aebc <LoopForever+0x6>)
  ldr r1, =_edata
 800ae8a:	490d      	ldr	r1, [pc, #52]	@ (800aec0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800ae8c:	4a0d      	ldr	r2, [pc, #52]	@ (800aec4 <LoopForever+0xe>)
  movs r3, #0
 800ae8e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800ae90:	e002      	b.n	800ae98 <LoopCopyDataInit>

0800ae92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800ae92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800ae94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800ae96:	3304      	adds	r3, #4

0800ae98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800ae98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800ae9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800ae9c:	d3f9      	bcc.n	800ae92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800ae9e:	4a0a      	ldr	r2, [pc, #40]	@ (800aec8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800aea0:	4c0a      	ldr	r4, [pc, #40]	@ (800aecc <LoopForever+0x16>)
  movs r3, #0
 800aea2:	2300      	movs	r3, #0
  b LoopFillZerobss
 800aea4:	e001      	b.n	800aeaa <LoopFillZerobss>

0800aea6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800aea6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800aea8:	3204      	adds	r2, #4

0800aeaa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800aeaa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800aeac:	d3fb      	bcc.n	800aea6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800aeae:	f008 f933 	bl	8013118 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800aeb2:	f7fa fc07 	bl	80056c4 <main>

0800aeb6 <LoopForever>:

LoopForever:
    b LoopForever
 800aeb6:	e7fe      	b.n	800aeb6 <LoopForever>
	Reset_Handler:  ldr   r0, =_estack
 800aeb8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800aebc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800aec0:	20000618 	.word	0x20000618
  ldr r2, =_sidata
 800aec4:	08015608 	.word	0x08015608
  ldr r2, =_sbss
 800aec8:	20000618 	.word	0x20000618
  ldr r4, =_ebss
 800aecc:	2000288c 	.word	0x2000288c

0800aed0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800aed0:	e7fe      	b.n	800aed0 <ADC1_2_IRQHandler>

0800aed2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800aed2:	b580      	push	{r7, lr}
 800aed4:	b082      	sub	sp, #8
 800aed6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800aed8:	2300      	movs	r3, #0
 800aeda:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800aedc:	2003      	movs	r0, #3
 800aede:	f001 fdd3 	bl	800ca88 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800aee2:	2000      	movs	r0, #0
 800aee4:	f000 f80e 	bl	800af04 <HAL_InitTick>
 800aee8:	4603      	mov	r3, r0
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d002      	beq.n	800aef4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800aeee:	2301      	movs	r3, #1
 800aef0:	71fb      	strb	r3, [r7, #7]
 800aef2:	e001      	b.n	800aef8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800aef4:	f7ff f82c 	bl	8009f50 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800aef8:	79fb      	ldrb	r3, [r7, #7]

}
 800aefa:	4618      	mov	r0, r3
 800aefc:	3708      	adds	r7, #8
 800aefe:	46bd      	mov	sp, r7
 800af00:	bd80      	pop	{r7, pc}
	...

0800af04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800af04:	b580      	push	{r7, lr}
 800af06:	b084      	sub	sp, #16
 800af08:	af00      	add	r7, sp, #0
 800af0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800af0c:	2300      	movs	r3, #0
 800af0e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800af10:	4b16      	ldr	r3, [pc, #88]	@ (800af6c <HAL_InitTick+0x68>)
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	2b00      	cmp	r3, #0
 800af16:	d022      	beq.n	800af5e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800af18:	4b15      	ldr	r3, [pc, #84]	@ (800af70 <HAL_InitTick+0x6c>)
 800af1a:	681a      	ldr	r2, [r3, #0]
 800af1c:	4b13      	ldr	r3, [pc, #76]	@ (800af6c <HAL_InitTick+0x68>)
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800af24:	fbb1 f3f3 	udiv	r3, r1, r3
 800af28:	fbb2 f3f3 	udiv	r3, r2, r3
 800af2c:	4618      	mov	r0, r3
 800af2e:	f001 fdde 	bl	800caee <HAL_SYSTICK_Config>
 800af32:	4603      	mov	r3, r0
 800af34:	2b00      	cmp	r3, #0
 800af36:	d10f      	bne.n	800af58 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	2b0f      	cmp	r3, #15
 800af3c:	d809      	bhi.n	800af52 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800af3e:	2200      	movs	r2, #0
 800af40:	6879      	ldr	r1, [r7, #4]
 800af42:	f04f 30ff 	mov.w	r0, #4294967295
 800af46:	f001 fdaa 	bl	800ca9e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800af4a:	4a0a      	ldr	r2, [pc, #40]	@ (800af74 <HAL_InitTick+0x70>)
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	6013      	str	r3, [r2, #0]
 800af50:	e007      	b.n	800af62 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800af52:	2301      	movs	r3, #1
 800af54:	73fb      	strb	r3, [r7, #15]
 800af56:	e004      	b.n	800af62 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800af58:	2301      	movs	r3, #1
 800af5a:	73fb      	strb	r3, [r7, #15]
 800af5c:	e001      	b.n	800af62 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800af5e:	2301      	movs	r3, #1
 800af60:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800af62:	7bfb      	ldrb	r3, [r7, #15]
}
 800af64:	4618      	mov	r0, r3
 800af66:	3710      	adds	r7, #16
 800af68:	46bd      	mov	sp, r7
 800af6a:	bd80      	pop	{r7, pc}
 800af6c:	200005c4 	.word	0x200005c4
 800af70:	200005bc 	.word	0x200005bc
 800af74:	200005c0 	.word	0x200005c0

0800af78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800af78:	b480      	push	{r7}
 800af7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800af7c:	4b05      	ldr	r3, [pc, #20]	@ (800af94 <HAL_IncTick+0x1c>)
 800af7e:	681a      	ldr	r2, [r3, #0]
 800af80:	4b05      	ldr	r3, [pc, #20]	@ (800af98 <HAL_IncTick+0x20>)
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	4413      	add	r3, r2
 800af86:	4a03      	ldr	r2, [pc, #12]	@ (800af94 <HAL_IncTick+0x1c>)
 800af88:	6013      	str	r3, [r2, #0]
}
 800af8a:	bf00      	nop
 800af8c:	46bd      	mov	sp, r7
 800af8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af92:	4770      	bx	lr
 800af94:	20002740 	.word	0x20002740
 800af98:	200005c4 	.word	0x200005c4

0800af9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800af9c:	b480      	push	{r7}
 800af9e:	af00      	add	r7, sp, #0
  return uwTick;
 800afa0:	4b03      	ldr	r3, [pc, #12]	@ (800afb0 <HAL_GetTick+0x14>)
 800afa2:	681b      	ldr	r3, [r3, #0]
}
 800afa4:	4618      	mov	r0, r3
 800afa6:	46bd      	mov	sp, r7
 800afa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afac:	4770      	bx	lr
 800afae:	bf00      	nop
 800afb0:	20002740 	.word	0x20002740

0800afb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b084      	sub	sp, #16
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800afbc:	f7ff ffee 	bl	800af9c <HAL_GetTick>
 800afc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afcc:	d004      	beq.n	800afd8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800afce:	4b09      	ldr	r3, [pc, #36]	@ (800aff4 <HAL_Delay+0x40>)
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	68fa      	ldr	r2, [r7, #12]
 800afd4:	4413      	add	r3, r2
 800afd6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800afd8:	bf00      	nop
 800afda:	f7ff ffdf 	bl	800af9c <HAL_GetTick>
 800afde:	4602      	mov	r2, r0
 800afe0:	68bb      	ldr	r3, [r7, #8]
 800afe2:	1ad3      	subs	r3, r2, r3
 800afe4:	68fa      	ldr	r2, [r7, #12]
 800afe6:	429a      	cmp	r2, r3
 800afe8:	d8f7      	bhi.n	800afda <HAL_Delay+0x26>
  {
  }
}
 800afea:	bf00      	nop
 800afec:	bf00      	nop
 800afee:	3710      	adds	r7, #16
 800aff0:	46bd      	mov	sp, r7
 800aff2:	bd80      	pop	{r7, pc}
 800aff4:	200005c4 	.word	0x200005c4

0800aff8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800aff8:	b480      	push	{r7}
 800affa:	b083      	sub	sp, #12
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]
 800b000:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	689b      	ldr	r3, [r3, #8]
 800b006:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800b00a:	683b      	ldr	r3, [r7, #0]
 800b00c:	431a      	orrs	r2, r3
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	609a      	str	r2, [r3, #8]
}
 800b012:	bf00      	nop
 800b014:	370c      	adds	r7, #12
 800b016:	46bd      	mov	sp, r7
 800b018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01c:	4770      	bx	lr

0800b01e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800b01e:	b480      	push	{r7}
 800b020:	b083      	sub	sp, #12
 800b022:	af00      	add	r7, sp, #0
 800b024:	6078      	str	r0, [r7, #4]
 800b026:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	689b      	ldr	r3, [r3, #8]
 800b02c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800b030:	683b      	ldr	r3, [r7, #0]
 800b032:	431a      	orrs	r2, r3
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	609a      	str	r2, [r3, #8]
}
 800b038:	bf00      	nop
 800b03a:	370c      	adds	r7, #12
 800b03c:	46bd      	mov	sp, r7
 800b03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b042:	4770      	bx	lr

0800b044 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800b044:	b480      	push	{r7}
 800b046:	b083      	sub	sp, #12
 800b048:	af00      	add	r7, sp, #0
 800b04a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	689b      	ldr	r3, [r3, #8]
 800b050:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800b054:	4618      	mov	r0, r3
 800b056:	370c      	adds	r7, #12
 800b058:	46bd      	mov	sp, r7
 800b05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b05e:	4770      	bx	lr

0800b060 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800b060:	b480      	push	{r7}
 800b062:	b087      	sub	sp, #28
 800b064:	af00      	add	r7, sp, #0
 800b066:	60f8      	str	r0, [r7, #12]
 800b068:	60b9      	str	r1, [r7, #8]
 800b06a:	607a      	str	r2, [r7, #4]
 800b06c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	3360      	adds	r3, #96	@ 0x60
 800b072:	461a      	mov	r2, r3
 800b074:	68bb      	ldr	r3, [r7, #8]
 800b076:	009b      	lsls	r3, r3, #2
 800b078:	4413      	add	r3, r2
 800b07a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800b07c:	697b      	ldr	r3, [r7, #20]
 800b07e:	681a      	ldr	r2, [r3, #0]
 800b080:	4b08      	ldr	r3, [pc, #32]	@ (800b0a4 <LL_ADC_SetOffset+0x44>)
 800b082:	4013      	ands	r3, r2
 800b084:	687a      	ldr	r2, [r7, #4]
 800b086:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800b08a:	683a      	ldr	r2, [r7, #0]
 800b08c:	430a      	orrs	r2, r1
 800b08e:	4313      	orrs	r3, r2
 800b090:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800b094:	697b      	ldr	r3, [r7, #20]
 800b096:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800b098:	bf00      	nop
 800b09a:	371c      	adds	r7, #28
 800b09c:	46bd      	mov	sp, r7
 800b09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a2:	4770      	bx	lr
 800b0a4:	03fff000 	.word	0x03fff000

0800b0a8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800b0a8:	b480      	push	{r7}
 800b0aa:	b085      	sub	sp, #20
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	6078      	str	r0, [r7, #4]
 800b0b0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	3360      	adds	r3, #96	@ 0x60
 800b0b6:	461a      	mov	r2, r3
 800b0b8:	683b      	ldr	r3, [r7, #0]
 800b0ba:	009b      	lsls	r3, r3, #2
 800b0bc:	4413      	add	r3, r2
 800b0be:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	3714      	adds	r7, #20
 800b0cc:	46bd      	mov	sp, r7
 800b0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d2:	4770      	bx	lr

0800b0d4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800b0d4:	b480      	push	{r7}
 800b0d6:	b087      	sub	sp, #28
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	60f8      	str	r0, [r7, #12]
 800b0dc:	60b9      	str	r1, [r7, #8]
 800b0de:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	3360      	adds	r3, #96	@ 0x60
 800b0e4:	461a      	mov	r2, r3
 800b0e6:	68bb      	ldr	r3, [r7, #8]
 800b0e8:	009b      	lsls	r3, r3, #2
 800b0ea:	4413      	add	r3, r2
 800b0ec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800b0ee:	697b      	ldr	r3, [r7, #20]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	431a      	orrs	r2, r3
 800b0fa:	697b      	ldr	r3, [r7, #20]
 800b0fc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800b0fe:	bf00      	nop
 800b100:	371c      	adds	r7, #28
 800b102:	46bd      	mov	sp, r7
 800b104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b108:	4770      	bx	lr

0800b10a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800b10a:	b480      	push	{r7}
 800b10c:	b087      	sub	sp, #28
 800b10e:	af00      	add	r7, sp, #0
 800b110:	60f8      	str	r0, [r7, #12]
 800b112:	60b9      	str	r1, [r7, #8]
 800b114:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	3360      	adds	r3, #96	@ 0x60
 800b11a:	461a      	mov	r2, r3
 800b11c:	68bb      	ldr	r3, [r7, #8]
 800b11e:	009b      	lsls	r3, r3, #2
 800b120:	4413      	add	r3, r2
 800b122:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800b124:	697b      	ldr	r3, [r7, #20]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	431a      	orrs	r2, r3
 800b130:	697b      	ldr	r3, [r7, #20]
 800b132:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800b134:	bf00      	nop
 800b136:	371c      	adds	r7, #28
 800b138:	46bd      	mov	sp, r7
 800b13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13e:	4770      	bx	lr

0800b140 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800b140:	b480      	push	{r7}
 800b142:	b087      	sub	sp, #28
 800b144:	af00      	add	r7, sp, #0
 800b146:	60f8      	str	r0, [r7, #12]
 800b148:	60b9      	str	r1, [r7, #8]
 800b14a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	3360      	adds	r3, #96	@ 0x60
 800b150:	461a      	mov	r2, r3
 800b152:	68bb      	ldr	r3, [r7, #8]
 800b154:	009b      	lsls	r3, r3, #2
 800b156:	4413      	add	r3, r2
 800b158:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800b15a:	697b      	ldr	r3, [r7, #20]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	431a      	orrs	r2, r3
 800b166:	697b      	ldr	r3, [r7, #20]
 800b168:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800b16a:	bf00      	nop
 800b16c:	371c      	adds	r7, #28
 800b16e:	46bd      	mov	sp, r7
 800b170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b174:	4770      	bx	lr

0800b176 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800b176:	b480      	push	{r7}
 800b178:	b083      	sub	sp, #12
 800b17a:	af00      	add	r7, sp, #0
 800b17c:	6078      	str	r0, [r7, #4]
 800b17e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	695b      	ldr	r3, [r3, #20]
 800b184:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800b188:	683b      	ldr	r3, [r7, #0]
 800b18a:	431a      	orrs	r2, r3
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	615a      	str	r2, [r3, #20]
}
 800b190:	bf00      	nop
 800b192:	370c      	adds	r7, #12
 800b194:	46bd      	mov	sp, r7
 800b196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19a:	4770      	bx	lr

0800b19c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800b19c:	b480      	push	{r7}
 800b19e:	b083      	sub	sp, #12
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	68db      	ldr	r3, [r3, #12]
 800b1a8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d101      	bne.n	800b1b4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800b1b0:	2301      	movs	r3, #1
 800b1b2:	e000      	b.n	800b1b6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800b1b4:	2300      	movs	r3, #0
}
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	370c      	adds	r7, #12
 800b1ba:	46bd      	mov	sp, r7
 800b1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c0:	4770      	bx	lr

0800b1c2 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800b1c2:	b480      	push	{r7}
 800b1c4:	b087      	sub	sp, #28
 800b1c6:	af00      	add	r7, sp, #0
 800b1c8:	60f8      	str	r0, [r7, #12]
 800b1ca:	60b9      	str	r1, [r7, #8]
 800b1cc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	3330      	adds	r3, #48	@ 0x30
 800b1d2:	461a      	mov	r2, r3
 800b1d4:	68bb      	ldr	r3, [r7, #8]
 800b1d6:	0a1b      	lsrs	r3, r3, #8
 800b1d8:	009b      	lsls	r3, r3, #2
 800b1da:	f003 030c 	and.w	r3, r3, #12
 800b1de:	4413      	add	r3, r2
 800b1e0:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800b1e2:	697b      	ldr	r3, [r7, #20]
 800b1e4:	681a      	ldr	r2, [r3, #0]
 800b1e6:	68bb      	ldr	r3, [r7, #8]
 800b1e8:	f003 031f 	and.w	r3, r3, #31
 800b1ec:	211f      	movs	r1, #31
 800b1ee:	fa01 f303 	lsl.w	r3, r1, r3
 800b1f2:	43db      	mvns	r3, r3
 800b1f4:	401a      	ands	r2, r3
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	0e9b      	lsrs	r3, r3, #26
 800b1fa:	f003 011f 	and.w	r1, r3, #31
 800b1fe:	68bb      	ldr	r3, [r7, #8]
 800b200:	f003 031f 	and.w	r3, r3, #31
 800b204:	fa01 f303 	lsl.w	r3, r1, r3
 800b208:	431a      	orrs	r2, r3
 800b20a:	697b      	ldr	r3, [r7, #20]
 800b20c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800b20e:	bf00      	nop
 800b210:	371c      	adds	r7, #28
 800b212:	46bd      	mov	sp, r7
 800b214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b218:	4770      	bx	lr

0800b21a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800b21a:	b480      	push	{r7}
 800b21c:	b087      	sub	sp, #28
 800b21e:	af00      	add	r7, sp, #0
 800b220:	60f8      	str	r0, [r7, #12]
 800b222:	60b9      	str	r1, [r7, #8]
 800b224:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	3314      	adds	r3, #20
 800b22a:	461a      	mov	r2, r3
 800b22c:	68bb      	ldr	r3, [r7, #8]
 800b22e:	0e5b      	lsrs	r3, r3, #25
 800b230:	009b      	lsls	r3, r3, #2
 800b232:	f003 0304 	and.w	r3, r3, #4
 800b236:	4413      	add	r3, r2
 800b238:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800b23a:	697b      	ldr	r3, [r7, #20]
 800b23c:	681a      	ldr	r2, [r3, #0]
 800b23e:	68bb      	ldr	r3, [r7, #8]
 800b240:	0d1b      	lsrs	r3, r3, #20
 800b242:	f003 031f 	and.w	r3, r3, #31
 800b246:	2107      	movs	r1, #7
 800b248:	fa01 f303 	lsl.w	r3, r1, r3
 800b24c:	43db      	mvns	r3, r3
 800b24e:	401a      	ands	r2, r3
 800b250:	68bb      	ldr	r3, [r7, #8]
 800b252:	0d1b      	lsrs	r3, r3, #20
 800b254:	f003 031f 	and.w	r3, r3, #31
 800b258:	6879      	ldr	r1, [r7, #4]
 800b25a:	fa01 f303 	lsl.w	r3, r1, r3
 800b25e:	431a      	orrs	r2, r3
 800b260:	697b      	ldr	r3, [r7, #20]
 800b262:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800b264:	bf00      	nop
 800b266:	371c      	adds	r7, #28
 800b268:	46bd      	mov	sp, r7
 800b26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26e:	4770      	bx	lr

0800b270 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800b270:	b480      	push	{r7}
 800b272:	b085      	sub	sp, #20
 800b274:	af00      	add	r7, sp, #0
 800b276:	60f8      	str	r0, [r7, #12]
 800b278:	60b9      	str	r1, [r7, #8]
 800b27a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800b282:	68bb      	ldr	r3, [r7, #8]
 800b284:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b288:	43db      	mvns	r3, r3
 800b28a:	401a      	ands	r2, r3
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	f003 0318 	and.w	r3, r3, #24
 800b292:	4908      	ldr	r1, [pc, #32]	@ (800b2b4 <LL_ADC_SetChannelSingleDiff+0x44>)
 800b294:	40d9      	lsrs	r1, r3
 800b296:	68bb      	ldr	r3, [r7, #8]
 800b298:	400b      	ands	r3, r1
 800b29a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b29e:	431a      	orrs	r2, r3
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800b2a6:	bf00      	nop
 800b2a8:	3714      	adds	r7, #20
 800b2aa:	46bd      	mov	sp, r7
 800b2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b0:	4770      	bx	lr
 800b2b2:	bf00      	nop
 800b2b4:	0007ffff 	.word	0x0007ffff

0800b2b8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800b2b8:	b480      	push	{r7}
 800b2ba:	b083      	sub	sp, #12
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	689b      	ldr	r3, [r3, #8]
 800b2c4:	f003 031f 	and.w	r3, r3, #31
}
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	370c      	adds	r7, #12
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d2:	4770      	bx	lr

0800b2d4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800b2d4:	b480      	push	{r7}
 800b2d6:	b083      	sub	sp, #12
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	689b      	ldr	r3, [r3, #8]
 800b2e0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800b2e4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800b2e8:	687a      	ldr	r2, [r7, #4]
 800b2ea:	6093      	str	r3, [r2, #8]
}
 800b2ec:	bf00      	nop
 800b2ee:	370c      	adds	r7, #12
 800b2f0:	46bd      	mov	sp, r7
 800b2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f6:	4770      	bx	lr

0800b2f8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800b2f8:	b480      	push	{r7}
 800b2fa:	b083      	sub	sp, #12
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	689b      	ldr	r3, [r3, #8]
 800b304:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b308:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b30c:	d101      	bne.n	800b312 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800b30e:	2301      	movs	r3, #1
 800b310:	e000      	b.n	800b314 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800b312:	2300      	movs	r3, #0
}
 800b314:	4618      	mov	r0, r3
 800b316:	370c      	adds	r7, #12
 800b318:	46bd      	mov	sp, r7
 800b31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b31e:	4770      	bx	lr

0800b320 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800b320:	b480      	push	{r7}
 800b322:	b083      	sub	sp, #12
 800b324:	af00      	add	r7, sp, #0
 800b326:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	689b      	ldr	r3, [r3, #8]
 800b32c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800b330:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800b334:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800b33c:	bf00      	nop
 800b33e:	370c      	adds	r7, #12
 800b340:	46bd      	mov	sp, r7
 800b342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b346:	4770      	bx	lr

0800b348 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800b348:	b480      	push	{r7}
 800b34a:	b083      	sub	sp, #12
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	689b      	ldr	r3, [r3, #8]
 800b354:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b358:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b35c:	d101      	bne.n	800b362 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800b35e:	2301      	movs	r3, #1
 800b360:	e000      	b.n	800b364 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800b362:	2300      	movs	r3, #0
}
 800b364:	4618      	mov	r0, r3
 800b366:	370c      	adds	r7, #12
 800b368:	46bd      	mov	sp, r7
 800b36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b36e:	4770      	bx	lr

0800b370 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800b370:	b480      	push	{r7}
 800b372:	b083      	sub	sp, #12
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	689b      	ldr	r3, [r3, #8]
 800b37c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b380:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800b384:	f043 0201 	orr.w	r2, r3, #1
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800b38c:	bf00      	nop
 800b38e:	370c      	adds	r7, #12
 800b390:	46bd      	mov	sp, r7
 800b392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b396:	4770      	bx	lr

0800b398 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800b398:	b480      	push	{r7}
 800b39a:	b083      	sub	sp, #12
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	689b      	ldr	r3, [r3, #8]
 800b3a4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b3a8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800b3ac:	f043 0202 	orr.w	r2, r3, #2
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800b3b4:	bf00      	nop
 800b3b6:	370c      	adds	r7, #12
 800b3b8:	46bd      	mov	sp, r7
 800b3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3be:	4770      	bx	lr

0800b3c0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800b3c0:	b480      	push	{r7}
 800b3c2:	b083      	sub	sp, #12
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	689b      	ldr	r3, [r3, #8]
 800b3cc:	f003 0301 	and.w	r3, r3, #1
 800b3d0:	2b01      	cmp	r3, #1
 800b3d2:	d101      	bne.n	800b3d8 <LL_ADC_IsEnabled+0x18>
 800b3d4:	2301      	movs	r3, #1
 800b3d6:	e000      	b.n	800b3da <LL_ADC_IsEnabled+0x1a>
 800b3d8:	2300      	movs	r3, #0
}
 800b3da:	4618      	mov	r0, r3
 800b3dc:	370c      	adds	r7, #12
 800b3de:	46bd      	mov	sp, r7
 800b3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e4:	4770      	bx	lr

0800b3e6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800b3e6:	b480      	push	{r7}
 800b3e8:	b083      	sub	sp, #12
 800b3ea:	af00      	add	r7, sp, #0
 800b3ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	689b      	ldr	r3, [r3, #8]
 800b3f2:	f003 0302 	and.w	r3, r3, #2
 800b3f6:	2b02      	cmp	r3, #2
 800b3f8:	d101      	bne.n	800b3fe <LL_ADC_IsDisableOngoing+0x18>
 800b3fa:	2301      	movs	r3, #1
 800b3fc:	e000      	b.n	800b400 <LL_ADC_IsDisableOngoing+0x1a>
 800b3fe:	2300      	movs	r3, #0
}
 800b400:	4618      	mov	r0, r3
 800b402:	370c      	adds	r7, #12
 800b404:	46bd      	mov	sp, r7
 800b406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40a:	4770      	bx	lr

0800b40c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800b40c:	b480      	push	{r7}
 800b40e:	b083      	sub	sp, #12
 800b410:	af00      	add	r7, sp, #0
 800b412:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	689b      	ldr	r3, [r3, #8]
 800b418:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b41c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800b420:	f043 0204 	orr.w	r2, r3, #4
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800b428:	bf00      	nop
 800b42a:	370c      	adds	r7, #12
 800b42c:	46bd      	mov	sp, r7
 800b42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b432:	4770      	bx	lr

0800b434 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800b434:	b480      	push	{r7}
 800b436:	b083      	sub	sp, #12
 800b438:	af00      	add	r7, sp, #0
 800b43a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	689b      	ldr	r3, [r3, #8]
 800b440:	f003 0304 	and.w	r3, r3, #4
 800b444:	2b04      	cmp	r3, #4
 800b446:	d101      	bne.n	800b44c <LL_ADC_REG_IsConversionOngoing+0x18>
 800b448:	2301      	movs	r3, #1
 800b44a:	e000      	b.n	800b44e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800b44c:	2300      	movs	r3, #0
}
 800b44e:	4618      	mov	r0, r3
 800b450:	370c      	adds	r7, #12
 800b452:	46bd      	mov	sp, r7
 800b454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b458:	4770      	bx	lr

0800b45a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800b45a:	b480      	push	{r7}
 800b45c:	b083      	sub	sp, #12
 800b45e:	af00      	add	r7, sp, #0
 800b460:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	689b      	ldr	r3, [r3, #8]
 800b466:	f003 0308 	and.w	r3, r3, #8
 800b46a:	2b08      	cmp	r3, #8
 800b46c:	d101      	bne.n	800b472 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800b46e:	2301      	movs	r3, #1
 800b470:	e000      	b.n	800b474 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800b472:	2300      	movs	r3, #0
}
 800b474:	4618      	mov	r0, r3
 800b476:	370c      	adds	r7, #12
 800b478:	46bd      	mov	sp, r7
 800b47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47e:	4770      	bx	lr

0800b480 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800b480:	b590      	push	{r4, r7, lr}
 800b482:	b089      	sub	sp, #36	@ 0x24
 800b484:	af00      	add	r7, sp, #0
 800b486:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800b488:	2300      	movs	r3, #0
 800b48a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800b48c:	2300      	movs	r3, #0
 800b48e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d101      	bne.n	800b49a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800b496:	2301      	movs	r3, #1
 800b498:	e1a9      	b.n	800b7ee <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	695b      	ldr	r3, [r3, #20]
 800b49e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d109      	bne.n	800b4bc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800b4a8:	6878      	ldr	r0, [r7, #4]
 800b4aa:	f7f9 fc17 	bl	8004cdc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	2200      	movs	r2, #0
 800b4b2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	2200      	movs	r2, #0
 800b4b8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	f7ff ff19 	bl	800b2f8 <LL_ADC_IsDeepPowerDownEnabled>
 800b4c6:	4603      	mov	r3, r0
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d004      	beq.n	800b4d6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	4618      	mov	r0, r3
 800b4d2:	f7ff feff 	bl	800b2d4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	4618      	mov	r0, r3
 800b4dc:	f7ff ff34 	bl	800b348 <LL_ADC_IsInternalRegulatorEnabled>
 800b4e0:	4603      	mov	r3, r0
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d115      	bne.n	800b512 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	f7ff ff18 	bl	800b320 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800b4f0:	4b9c      	ldr	r3, [pc, #624]	@ (800b764 <HAL_ADC_Init+0x2e4>)
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	099b      	lsrs	r3, r3, #6
 800b4f6:	4a9c      	ldr	r2, [pc, #624]	@ (800b768 <HAL_ADC_Init+0x2e8>)
 800b4f8:	fba2 2303 	umull	r2, r3, r2, r3
 800b4fc:	099b      	lsrs	r3, r3, #6
 800b4fe:	3301      	adds	r3, #1
 800b500:	005b      	lsls	r3, r3, #1
 800b502:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800b504:	e002      	b.n	800b50c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	3b01      	subs	r3, #1
 800b50a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d1f9      	bne.n	800b506 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	4618      	mov	r0, r3
 800b518:	f7ff ff16 	bl	800b348 <LL_ADC_IsInternalRegulatorEnabled>
 800b51c:	4603      	mov	r3, r0
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d10d      	bne.n	800b53e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b526:	f043 0210 	orr.w	r2, r3, #16
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b532:	f043 0201 	orr.w	r2, r3, #1
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800b53a:	2301      	movs	r3, #1
 800b53c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	4618      	mov	r0, r3
 800b544:	f7ff ff76 	bl	800b434 <LL_ADC_REG_IsConversionOngoing>
 800b548:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b54e:	f003 0310 	and.w	r3, r3, #16
 800b552:	2b00      	cmp	r3, #0
 800b554:	f040 8142 	bne.w	800b7dc <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800b558:	697b      	ldr	r3, [r7, #20]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	f040 813e 	bne.w	800b7dc <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b564:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800b568:	f043 0202 	orr.w	r2, r3, #2
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	4618      	mov	r0, r3
 800b576:	f7ff ff23 	bl	800b3c0 <LL_ADC_IsEnabled>
 800b57a:	4603      	mov	r3, r0
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d141      	bne.n	800b604 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b588:	d004      	beq.n	800b594 <HAL_ADC_Init+0x114>
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	4a77      	ldr	r2, [pc, #476]	@ (800b76c <HAL_ADC_Init+0x2ec>)
 800b590:	4293      	cmp	r3, r2
 800b592:	d10f      	bne.n	800b5b4 <HAL_ADC_Init+0x134>
 800b594:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800b598:	f7ff ff12 	bl	800b3c0 <LL_ADC_IsEnabled>
 800b59c:	4604      	mov	r4, r0
 800b59e:	4873      	ldr	r0, [pc, #460]	@ (800b76c <HAL_ADC_Init+0x2ec>)
 800b5a0:	f7ff ff0e 	bl	800b3c0 <LL_ADC_IsEnabled>
 800b5a4:	4603      	mov	r3, r0
 800b5a6:	4323      	orrs	r3, r4
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	bf0c      	ite	eq
 800b5ac:	2301      	moveq	r3, #1
 800b5ae:	2300      	movne	r3, #0
 800b5b0:	b2db      	uxtb	r3, r3
 800b5b2:	e012      	b.n	800b5da <HAL_ADC_Init+0x15a>
 800b5b4:	486e      	ldr	r0, [pc, #440]	@ (800b770 <HAL_ADC_Init+0x2f0>)
 800b5b6:	f7ff ff03 	bl	800b3c0 <LL_ADC_IsEnabled>
 800b5ba:	4604      	mov	r4, r0
 800b5bc:	486d      	ldr	r0, [pc, #436]	@ (800b774 <HAL_ADC_Init+0x2f4>)
 800b5be:	f7ff feff 	bl	800b3c0 <LL_ADC_IsEnabled>
 800b5c2:	4603      	mov	r3, r0
 800b5c4:	431c      	orrs	r4, r3
 800b5c6:	486c      	ldr	r0, [pc, #432]	@ (800b778 <HAL_ADC_Init+0x2f8>)
 800b5c8:	f7ff fefa 	bl	800b3c0 <LL_ADC_IsEnabled>
 800b5cc:	4603      	mov	r3, r0
 800b5ce:	4323      	orrs	r3, r4
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	bf0c      	ite	eq
 800b5d4:	2301      	moveq	r3, #1
 800b5d6:	2300      	movne	r3, #0
 800b5d8:	b2db      	uxtb	r3, r3
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d012      	beq.n	800b604 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b5e6:	d004      	beq.n	800b5f2 <HAL_ADC_Init+0x172>
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	4a5f      	ldr	r2, [pc, #380]	@ (800b76c <HAL_ADC_Init+0x2ec>)
 800b5ee:	4293      	cmp	r3, r2
 800b5f0:	d101      	bne.n	800b5f6 <HAL_ADC_Init+0x176>
 800b5f2:	4a62      	ldr	r2, [pc, #392]	@ (800b77c <HAL_ADC_Init+0x2fc>)
 800b5f4:	e000      	b.n	800b5f8 <HAL_ADC_Init+0x178>
 800b5f6:	4a62      	ldr	r2, [pc, #392]	@ (800b780 <HAL_ADC_Init+0x300>)
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	685b      	ldr	r3, [r3, #4]
 800b5fc:	4619      	mov	r1, r3
 800b5fe:	4610      	mov	r0, r2
 800b600:	f7ff fcfa 	bl	800aff8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	7f5b      	ldrb	r3, [r3, #29]
 800b608:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800b60e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800b614:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800b61a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800b622:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800b624:	4313      	orrs	r3, r2
 800b626:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800b62e:	2b01      	cmp	r3, #1
 800b630:	d106      	bne.n	800b640 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b636:	3b01      	subs	r3, #1
 800b638:	045b      	lsls	r3, r3, #17
 800b63a:	69ba      	ldr	r2, [r7, #24]
 800b63c:	4313      	orrs	r3, r2
 800b63e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b644:	2b00      	cmp	r3, #0
 800b646:	d009      	beq.n	800b65c <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b64c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b654:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800b656:	69ba      	ldr	r2, [r7, #24]
 800b658:	4313      	orrs	r3, r2
 800b65a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	68da      	ldr	r2, [r3, #12]
 800b662:	4b48      	ldr	r3, [pc, #288]	@ (800b784 <HAL_ADC_Init+0x304>)
 800b664:	4013      	ands	r3, r2
 800b666:	687a      	ldr	r2, [r7, #4]
 800b668:	6812      	ldr	r2, [r2, #0]
 800b66a:	69b9      	ldr	r1, [r7, #24]
 800b66c:	430b      	orrs	r3, r1
 800b66e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	691b      	ldr	r3, [r3, #16]
 800b676:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	430a      	orrs	r2, r1
 800b684:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	4618      	mov	r0, r3
 800b68c:	f7ff fee5 	bl	800b45a <LL_ADC_INJ_IsConversionOngoing>
 800b690:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800b692:	697b      	ldr	r3, [r7, #20]
 800b694:	2b00      	cmp	r3, #0
 800b696:	d17f      	bne.n	800b798 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800b698:	693b      	ldr	r3, [r7, #16]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d17c      	bne.n	800b798 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800b6a2:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800b6aa:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800b6ac:	4313      	orrs	r3, r2
 800b6ae:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	68db      	ldr	r3, [r3, #12]
 800b6b6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b6ba:	f023 0302 	bic.w	r3, r3, #2
 800b6be:	687a      	ldr	r2, [r7, #4]
 800b6c0:	6812      	ldr	r2, [r2, #0]
 800b6c2:	69b9      	ldr	r1, [r7, #24]
 800b6c4:	430b      	orrs	r3, r1
 800b6c6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	691b      	ldr	r3, [r3, #16]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d017      	beq.n	800b700 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	691a      	ldr	r2, [r3, #16]
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800b6de:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b6e8:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800b6ec:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800b6f0:	687a      	ldr	r2, [r7, #4]
 800b6f2:	6911      	ldr	r1, [r2, #16]
 800b6f4:	687a      	ldr	r2, [r7, #4]
 800b6f6:	6812      	ldr	r2, [r2, #0]
 800b6f8:	430b      	orrs	r3, r1
 800b6fa:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800b6fe:	e013      	b.n	800b728 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	691a      	ldr	r2, [r3, #16]
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800b70e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b718:	687a      	ldr	r2, [r7, #4]
 800b71a:	6812      	ldr	r2, [r2, #0]
 800b71c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800b720:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800b724:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b72e:	2b01      	cmp	r3, #1
 800b730:	d12a      	bne.n	800b788 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	691b      	ldr	r3, [r3, #16]
 800b738:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800b73c:	f023 0304 	bic.w	r3, r3, #4
 800b740:	687a      	ldr	r2, [r7, #4]
 800b742:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 800b744:	687a      	ldr	r2, [r7, #4]
 800b746:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800b748:	4311      	orrs	r1, r2
 800b74a:	687a      	ldr	r2, [r7, #4]
 800b74c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800b74e:	4311      	orrs	r1, r2
 800b750:	687a      	ldr	r2, [r7, #4]
 800b752:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800b754:	430a      	orrs	r2, r1
 800b756:	431a      	orrs	r2, r3
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	f042 0201 	orr.w	r2, r2, #1
 800b760:	611a      	str	r2, [r3, #16]
 800b762:	e019      	b.n	800b798 <HAL_ADC_Init+0x318>
 800b764:	200005bc 	.word	0x200005bc
 800b768:	053e2d63 	.word	0x053e2d63
 800b76c:	50000100 	.word	0x50000100
 800b770:	50000400 	.word	0x50000400
 800b774:	50000500 	.word	0x50000500
 800b778:	50000600 	.word	0x50000600
 800b77c:	50000300 	.word	0x50000300
 800b780:	50000700 	.word	0x50000700
 800b784:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	691a      	ldr	r2, [r3, #16]
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	f022 0201 	bic.w	r2, r2, #1
 800b796:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	695b      	ldr	r3, [r3, #20]
 800b79c:	2b01      	cmp	r3, #1
 800b79e:	d10c      	bne.n	800b7ba <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b7a6:	f023 010f 	bic.w	r1, r3, #15
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	6a1b      	ldr	r3, [r3, #32]
 800b7ae:	1e5a      	subs	r2, r3, #1
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	430a      	orrs	r2, r1
 800b7b6:	631a      	str	r2, [r3, #48]	@ 0x30
 800b7b8:	e007      	b.n	800b7ca <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	f022 020f 	bic.w	r2, r2, #15
 800b7c8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b7ce:	f023 0303 	bic.w	r3, r3, #3
 800b7d2:	f043 0201 	orr.w	r2, r3, #1
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	65da      	str	r2, [r3, #92]	@ 0x5c
 800b7da:	e007      	b.n	800b7ec <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b7e0:	f043 0210 	orr.w	r2, r3, #16
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800b7e8:	2301      	movs	r3, #1
 800b7ea:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800b7ec:	7ffb      	ldrb	r3, [r7, #31]
}
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	3724      	adds	r7, #36	@ 0x24
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	bd90      	pop	{r4, r7, pc}
 800b7f6:	bf00      	nop

0800b7f8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	b086      	sub	sp, #24
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	60f8      	str	r0, [r7, #12]
 800b800:	60b9      	str	r1, [r7, #8]
 800b802:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b80c:	d004      	beq.n	800b818 <HAL_ADC_Start_DMA+0x20>
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	4a5a      	ldr	r2, [pc, #360]	@ (800b97c <HAL_ADC_Start_DMA+0x184>)
 800b814:	4293      	cmp	r3, r2
 800b816:	d101      	bne.n	800b81c <HAL_ADC_Start_DMA+0x24>
 800b818:	4b59      	ldr	r3, [pc, #356]	@ (800b980 <HAL_ADC_Start_DMA+0x188>)
 800b81a:	e000      	b.n	800b81e <HAL_ADC_Start_DMA+0x26>
 800b81c:	4b59      	ldr	r3, [pc, #356]	@ (800b984 <HAL_ADC_Start_DMA+0x18c>)
 800b81e:	4618      	mov	r0, r3
 800b820:	f7ff fd4a 	bl	800b2b8 <LL_ADC_GetMultimode>
 800b824:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	4618      	mov	r0, r3
 800b82c:	f7ff fe02 	bl	800b434 <LL_ADC_REG_IsConversionOngoing>
 800b830:	4603      	mov	r3, r0
 800b832:	2b00      	cmp	r3, #0
 800b834:	f040 809b 	bne.w	800b96e <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800b83e:	2b01      	cmp	r3, #1
 800b840:	d101      	bne.n	800b846 <HAL_ADC_Start_DMA+0x4e>
 800b842:	2302      	movs	r3, #2
 800b844:	e096      	b.n	800b974 <HAL_ADC_Start_DMA+0x17c>
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	2201      	movs	r2, #1
 800b84a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	4a4d      	ldr	r2, [pc, #308]	@ (800b988 <HAL_ADC_Start_DMA+0x190>)
 800b854:	4293      	cmp	r3, r2
 800b856:	d008      	beq.n	800b86a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800b858:	693b      	ldr	r3, [r7, #16]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d005      	beq.n	800b86a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800b85e:	693b      	ldr	r3, [r7, #16]
 800b860:	2b05      	cmp	r3, #5
 800b862:	d002      	beq.n	800b86a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800b864:	693b      	ldr	r3, [r7, #16]
 800b866:	2b09      	cmp	r3, #9
 800b868:	d17a      	bne.n	800b960 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800b86a:	68f8      	ldr	r0, [r7, #12]
 800b86c:	f000 fcf6 	bl	800c25c <ADC_Enable>
 800b870:	4603      	mov	r3, r0
 800b872:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800b874:	7dfb      	ldrb	r3, [r7, #23]
 800b876:	2b00      	cmp	r3, #0
 800b878:	d16d      	bne.n	800b956 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b87e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800b882:	f023 0301 	bic.w	r3, r3, #1
 800b886:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	4a3a      	ldr	r2, [pc, #232]	@ (800b97c <HAL_ADC_Start_DMA+0x184>)
 800b894:	4293      	cmp	r3, r2
 800b896:	d009      	beq.n	800b8ac <HAL_ADC_Start_DMA+0xb4>
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	4a3b      	ldr	r2, [pc, #236]	@ (800b98c <HAL_ADC_Start_DMA+0x194>)
 800b89e:	4293      	cmp	r3, r2
 800b8a0:	d002      	beq.n	800b8a8 <HAL_ADC_Start_DMA+0xb0>
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	e003      	b.n	800b8b0 <HAL_ADC_Start_DMA+0xb8>
 800b8a8:	4b39      	ldr	r3, [pc, #228]	@ (800b990 <HAL_ADC_Start_DMA+0x198>)
 800b8aa:	e001      	b.n	800b8b0 <HAL_ADC_Start_DMA+0xb8>
 800b8ac:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800b8b0:	68fa      	ldr	r2, [r7, #12]
 800b8b2:	6812      	ldr	r2, [r2, #0]
 800b8b4:	4293      	cmp	r3, r2
 800b8b6:	d002      	beq.n	800b8be <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800b8b8:	693b      	ldr	r3, [r7, #16]
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d105      	bne.n	800b8ca <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b8c2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b8ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d006      	beq.n	800b8e4 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b8da:	f023 0206 	bic.w	r2, r3, #6
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	661a      	str	r2, [r3, #96]	@ 0x60
 800b8e2:	e002      	b.n	800b8ea <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	2200      	movs	r2, #0
 800b8e8:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b8ee:	4a29      	ldr	r2, [pc, #164]	@ (800b994 <HAL_ADC_Start_DMA+0x19c>)
 800b8f0:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b8f6:	4a28      	ldr	r2, [pc, #160]	@ (800b998 <HAL_ADC_Start_DMA+0x1a0>)
 800b8f8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b8fe:	4a27      	ldr	r2, [pc, #156]	@ (800b99c <HAL_ADC_Start_DMA+0x1a4>)
 800b900:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	221c      	movs	r2, #28
 800b908:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	2200      	movs	r2, #0
 800b90e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	685a      	ldr	r2, [r3, #4]
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	f042 0210 	orr.w	r2, r2, #16
 800b920:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	68da      	ldr	r2, [r3, #12]
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	f042 0201 	orr.w	r2, r2, #1
 800b930:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	3340      	adds	r3, #64	@ 0x40
 800b93c:	4619      	mov	r1, r3
 800b93e:	68ba      	ldr	r2, [r7, #8]
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	f001 f989 	bl	800cc58 <HAL_DMA_Start_IT>
 800b946:	4603      	mov	r3, r0
 800b948:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	4618      	mov	r0, r3
 800b950:	f7ff fd5c 	bl	800b40c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800b954:	e00d      	b.n	800b972 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	2200      	movs	r2, #0
 800b95a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 800b95e:	e008      	b.n	800b972 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800b960:	2301      	movs	r3, #1
 800b962:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	2200      	movs	r2, #0
 800b968:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 800b96c:	e001      	b.n	800b972 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800b96e:	2302      	movs	r3, #2
 800b970:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800b972:	7dfb      	ldrb	r3, [r7, #23]
}
 800b974:	4618      	mov	r0, r3
 800b976:	3718      	adds	r7, #24
 800b978:	46bd      	mov	sp, r7
 800b97a:	bd80      	pop	{r7, pc}
 800b97c:	50000100 	.word	0x50000100
 800b980:	50000300 	.word	0x50000300
 800b984:	50000700 	.word	0x50000700
 800b988:	50000600 	.word	0x50000600
 800b98c:	50000500 	.word	0x50000500
 800b990:	50000400 	.word	0x50000400
 800b994:	0800c447 	.word	0x0800c447
 800b998:	0800c51f 	.word	0x0800c51f
 800b99c:	0800c53b 	.word	0x0800c53b

0800b9a0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800b9a0:	b480      	push	{r7}
 800b9a2:	b083      	sub	sp, #12
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800b9a8:	bf00      	nop
 800b9aa:	370c      	adds	r7, #12
 800b9ac:	46bd      	mov	sp, r7
 800b9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b2:	4770      	bx	lr

0800b9b4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800b9b4:	b480      	push	{r7}
 800b9b6:	b083      	sub	sp, #12
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800b9bc:	bf00      	nop
 800b9be:	370c      	adds	r7, #12
 800b9c0:	46bd      	mov	sp, r7
 800b9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c6:	4770      	bx	lr

0800b9c8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800b9c8:	b480      	push	{r7}
 800b9ca:	b083      	sub	sp, #12
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800b9d0:	bf00      	nop
 800b9d2:	370c      	adds	r7, #12
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9da:	4770      	bx	lr

0800b9dc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800b9dc:	b580      	push	{r7, lr}
 800b9de:	b0b6      	sub	sp, #216	@ 0xd8
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	6078      	str	r0, [r7, #4]
 800b9e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800b9ec:	2300      	movs	r3, #0
 800b9ee:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800b9f6:	2b01      	cmp	r3, #1
 800b9f8:	d102      	bne.n	800ba00 <HAL_ADC_ConfigChannel+0x24>
 800b9fa:	2302      	movs	r3, #2
 800b9fc:	f000 bc13 	b.w	800c226 <HAL_ADC_ConfigChannel+0x84a>
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	2201      	movs	r2, #1
 800ba04:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	4618      	mov	r0, r3
 800ba0e:	f7ff fd11 	bl	800b434 <LL_ADC_REG_IsConversionOngoing>
 800ba12:	4603      	mov	r3, r0
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	f040 83f3 	bne.w	800c200 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	6818      	ldr	r0, [r3, #0]
 800ba1e:	683b      	ldr	r3, [r7, #0]
 800ba20:	6859      	ldr	r1, [r3, #4]
 800ba22:	683b      	ldr	r3, [r7, #0]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	461a      	mov	r2, r3
 800ba28:	f7ff fbcb 	bl	800b1c2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	4618      	mov	r0, r3
 800ba32:	f7ff fcff 	bl	800b434 <LL_ADC_REG_IsConversionOngoing>
 800ba36:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	4618      	mov	r0, r3
 800ba40:	f7ff fd0b 	bl	800b45a <LL_ADC_INJ_IsConversionOngoing>
 800ba44:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800ba48:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	f040 81d9 	bne.w	800be04 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800ba52:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	f040 81d4 	bne.w	800be04 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800ba5c:	683b      	ldr	r3, [r7, #0]
 800ba5e:	689b      	ldr	r3, [r3, #8]
 800ba60:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ba64:	d10f      	bne.n	800ba86 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	6818      	ldr	r0, [r3, #0]
 800ba6a:	683b      	ldr	r3, [r7, #0]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	2200      	movs	r2, #0
 800ba70:	4619      	mov	r1, r3
 800ba72:	f7ff fbd2 	bl	800b21a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800ba7e:	4618      	mov	r0, r3
 800ba80:	f7ff fb79 	bl	800b176 <LL_ADC_SetSamplingTimeCommonConfig>
 800ba84:	e00e      	b.n	800baa4 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	6818      	ldr	r0, [r3, #0]
 800ba8a:	683b      	ldr	r3, [r7, #0]
 800ba8c:	6819      	ldr	r1, [r3, #0]
 800ba8e:	683b      	ldr	r3, [r7, #0]
 800ba90:	689b      	ldr	r3, [r3, #8]
 800ba92:	461a      	mov	r2, r3
 800ba94:	f7ff fbc1 	bl	800b21a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	2100      	movs	r1, #0
 800ba9e:	4618      	mov	r0, r3
 800baa0:	f7ff fb69 	bl	800b176 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800baa4:	683b      	ldr	r3, [r7, #0]
 800baa6:	695a      	ldr	r2, [r3, #20]
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	68db      	ldr	r3, [r3, #12]
 800baae:	08db      	lsrs	r3, r3, #3
 800bab0:	f003 0303 	and.w	r3, r3, #3
 800bab4:	005b      	lsls	r3, r3, #1
 800bab6:	fa02 f303 	lsl.w	r3, r2, r3
 800baba:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800babe:	683b      	ldr	r3, [r7, #0]
 800bac0:	691b      	ldr	r3, [r3, #16]
 800bac2:	2b04      	cmp	r3, #4
 800bac4:	d022      	beq.n	800bb0c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	6818      	ldr	r0, [r3, #0]
 800baca:	683b      	ldr	r3, [r7, #0]
 800bacc:	6919      	ldr	r1, [r3, #16]
 800bace:	683b      	ldr	r3, [r7, #0]
 800bad0:	681a      	ldr	r2, [r3, #0]
 800bad2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800bad6:	f7ff fac3 	bl	800b060 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	6818      	ldr	r0, [r3, #0]
 800bade:	683b      	ldr	r3, [r7, #0]
 800bae0:	6919      	ldr	r1, [r3, #16]
 800bae2:	683b      	ldr	r3, [r7, #0]
 800bae4:	699b      	ldr	r3, [r3, #24]
 800bae6:	461a      	mov	r2, r3
 800bae8:	f7ff fb0f 	bl	800b10a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	6818      	ldr	r0, [r3, #0]
 800baf0:	683b      	ldr	r3, [r7, #0]
 800baf2:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800baf4:	683b      	ldr	r3, [r7, #0]
 800baf6:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800baf8:	2b01      	cmp	r3, #1
 800bafa:	d102      	bne.n	800bb02 <HAL_ADC_ConfigChannel+0x126>
 800bafc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800bb00:	e000      	b.n	800bb04 <HAL_ADC_ConfigChannel+0x128>
 800bb02:	2300      	movs	r3, #0
 800bb04:	461a      	mov	r2, r3
 800bb06:	f7ff fb1b 	bl	800b140 <LL_ADC_SetOffsetSaturation>
 800bb0a:	e17b      	b.n	800be04 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	2100      	movs	r1, #0
 800bb12:	4618      	mov	r0, r3
 800bb14:	f7ff fac8 	bl	800b0a8 <LL_ADC_GetOffsetChannel>
 800bb18:	4603      	mov	r3, r0
 800bb1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d10a      	bne.n	800bb38 <HAL_ADC_ConfigChannel+0x15c>
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	2100      	movs	r1, #0
 800bb28:	4618      	mov	r0, r3
 800bb2a:	f7ff fabd 	bl	800b0a8 <LL_ADC_GetOffsetChannel>
 800bb2e:	4603      	mov	r3, r0
 800bb30:	0e9b      	lsrs	r3, r3, #26
 800bb32:	f003 021f 	and.w	r2, r3, #31
 800bb36:	e01e      	b.n	800bb76 <HAL_ADC_ConfigChannel+0x19a>
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	2100      	movs	r1, #0
 800bb3e:	4618      	mov	r0, r3
 800bb40:	f7ff fab2 	bl	800b0a8 <LL_ADC_GetOffsetChannel>
 800bb44:	4603      	mov	r3, r0
 800bb46:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bb4a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800bb4e:	fa93 f3a3 	rbit	r3, r3
 800bb52:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800bb56:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800bb5a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800bb5e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d101      	bne.n	800bb6a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800bb66:	2320      	movs	r3, #32
 800bb68:	e004      	b.n	800bb74 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800bb6a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800bb6e:	fab3 f383 	clz	r3, r3
 800bb72:	b2db      	uxtb	r3, r3
 800bb74:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800bb76:	683b      	ldr	r3, [r7, #0]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d105      	bne.n	800bb8e <HAL_ADC_ConfigChannel+0x1b2>
 800bb82:	683b      	ldr	r3, [r7, #0]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	0e9b      	lsrs	r3, r3, #26
 800bb88:	f003 031f 	and.w	r3, r3, #31
 800bb8c:	e018      	b.n	800bbc0 <HAL_ADC_ConfigChannel+0x1e4>
 800bb8e:	683b      	ldr	r3, [r7, #0]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bb96:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800bb9a:	fa93 f3a3 	rbit	r3, r3
 800bb9e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800bba2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bba6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800bbaa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d101      	bne.n	800bbb6 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800bbb2:	2320      	movs	r3, #32
 800bbb4:	e004      	b.n	800bbc0 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800bbb6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800bbba:	fab3 f383 	clz	r3, r3
 800bbbe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800bbc0:	429a      	cmp	r2, r3
 800bbc2:	d106      	bne.n	800bbd2 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	2200      	movs	r2, #0
 800bbca:	2100      	movs	r1, #0
 800bbcc:	4618      	mov	r0, r3
 800bbce:	f7ff fa81 	bl	800b0d4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	2101      	movs	r1, #1
 800bbd8:	4618      	mov	r0, r3
 800bbda:	f7ff fa65 	bl	800b0a8 <LL_ADC_GetOffsetChannel>
 800bbde:	4603      	mov	r3, r0
 800bbe0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d10a      	bne.n	800bbfe <HAL_ADC_ConfigChannel+0x222>
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	2101      	movs	r1, #1
 800bbee:	4618      	mov	r0, r3
 800bbf0:	f7ff fa5a 	bl	800b0a8 <LL_ADC_GetOffsetChannel>
 800bbf4:	4603      	mov	r3, r0
 800bbf6:	0e9b      	lsrs	r3, r3, #26
 800bbf8:	f003 021f 	and.w	r2, r3, #31
 800bbfc:	e01e      	b.n	800bc3c <HAL_ADC_ConfigChannel+0x260>
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	2101      	movs	r1, #1
 800bc04:	4618      	mov	r0, r3
 800bc06:	f7ff fa4f 	bl	800b0a8 <LL_ADC_GetOffsetChannel>
 800bc0a:	4603      	mov	r3, r0
 800bc0c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bc10:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bc14:	fa93 f3a3 	rbit	r3, r3
 800bc18:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800bc1c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800bc20:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800bc24:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d101      	bne.n	800bc30 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 800bc2c:	2320      	movs	r3, #32
 800bc2e:	e004      	b.n	800bc3a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 800bc30:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800bc34:	fab3 f383 	clz	r3, r3
 800bc38:	b2db      	uxtb	r3, r3
 800bc3a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800bc3c:	683b      	ldr	r3, [r7, #0]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d105      	bne.n	800bc54 <HAL_ADC_ConfigChannel+0x278>
 800bc48:	683b      	ldr	r3, [r7, #0]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	0e9b      	lsrs	r3, r3, #26
 800bc4e:	f003 031f 	and.w	r3, r3, #31
 800bc52:	e018      	b.n	800bc86 <HAL_ADC_ConfigChannel+0x2aa>
 800bc54:	683b      	ldr	r3, [r7, #0]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bc5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bc60:	fa93 f3a3 	rbit	r3, r3
 800bc64:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800bc68:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800bc6c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 800bc70:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d101      	bne.n	800bc7c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 800bc78:	2320      	movs	r3, #32
 800bc7a:	e004      	b.n	800bc86 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 800bc7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800bc80:	fab3 f383 	clz	r3, r3
 800bc84:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800bc86:	429a      	cmp	r2, r3
 800bc88:	d106      	bne.n	800bc98 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	2200      	movs	r2, #0
 800bc90:	2101      	movs	r1, #1
 800bc92:	4618      	mov	r0, r3
 800bc94:	f7ff fa1e 	bl	800b0d4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	2102      	movs	r1, #2
 800bc9e:	4618      	mov	r0, r3
 800bca0:	f7ff fa02 	bl	800b0a8 <LL_ADC_GetOffsetChannel>
 800bca4:	4603      	mov	r3, r0
 800bca6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d10a      	bne.n	800bcc4 <HAL_ADC_ConfigChannel+0x2e8>
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	2102      	movs	r1, #2
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	f7ff f9f7 	bl	800b0a8 <LL_ADC_GetOffsetChannel>
 800bcba:	4603      	mov	r3, r0
 800bcbc:	0e9b      	lsrs	r3, r3, #26
 800bcbe:	f003 021f 	and.w	r2, r3, #31
 800bcc2:	e01e      	b.n	800bd02 <HAL_ADC_ConfigChannel+0x326>
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	2102      	movs	r1, #2
 800bcca:	4618      	mov	r0, r3
 800bccc:	f7ff f9ec 	bl	800b0a8 <LL_ADC_GetOffsetChannel>
 800bcd0:	4603      	mov	r3, r0
 800bcd2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bcd6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bcda:	fa93 f3a3 	rbit	r3, r3
 800bcde:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800bce2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800bce6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800bcea:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d101      	bne.n	800bcf6 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800bcf2:	2320      	movs	r3, #32
 800bcf4:	e004      	b.n	800bd00 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800bcf6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800bcfa:	fab3 f383 	clz	r3, r3
 800bcfe:	b2db      	uxtb	r3, r3
 800bd00:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800bd02:	683b      	ldr	r3, [r7, #0]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d105      	bne.n	800bd1a <HAL_ADC_ConfigChannel+0x33e>
 800bd0e:	683b      	ldr	r3, [r7, #0]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	0e9b      	lsrs	r3, r3, #26
 800bd14:	f003 031f 	and.w	r3, r3, #31
 800bd18:	e016      	b.n	800bd48 <HAL_ADC_ConfigChannel+0x36c>
 800bd1a:	683b      	ldr	r3, [r7, #0]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bd22:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800bd26:	fa93 f3a3 	rbit	r3, r3
 800bd2a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800bd2c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800bd2e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800bd32:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d101      	bne.n	800bd3e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800bd3a:	2320      	movs	r3, #32
 800bd3c:	e004      	b.n	800bd48 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800bd3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800bd42:	fab3 f383 	clz	r3, r3
 800bd46:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800bd48:	429a      	cmp	r2, r3
 800bd4a:	d106      	bne.n	800bd5a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	2200      	movs	r2, #0
 800bd52:	2102      	movs	r1, #2
 800bd54:	4618      	mov	r0, r3
 800bd56:	f7ff f9bd 	bl	800b0d4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	2103      	movs	r1, #3
 800bd60:	4618      	mov	r0, r3
 800bd62:	f7ff f9a1 	bl	800b0a8 <LL_ADC_GetOffsetChannel>
 800bd66:	4603      	mov	r3, r0
 800bd68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d10a      	bne.n	800bd86 <HAL_ADC_ConfigChannel+0x3aa>
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	2103      	movs	r1, #3
 800bd76:	4618      	mov	r0, r3
 800bd78:	f7ff f996 	bl	800b0a8 <LL_ADC_GetOffsetChannel>
 800bd7c:	4603      	mov	r3, r0
 800bd7e:	0e9b      	lsrs	r3, r3, #26
 800bd80:	f003 021f 	and.w	r2, r3, #31
 800bd84:	e017      	b.n	800bdb6 <HAL_ADC_ConfigChannel+0x3da>
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	2103      	movs	r1, #3
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	f7ff f98b 	bl	800b0a8 <LL_ADC_GetOffsetChannel>
 800bd92:	4603      	mov	r3, r0
 800bd94:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bd96:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bd98:	fa93 f3a3 	rbit	r3, r3
 800bd9c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800bd9e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bda0:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800bda2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d101      	bne.n	800bdac <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 800bda8:	2320      	movs	r3, #32
 800bdaa:	e003      	b.n	800bdb4 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 800bdac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bdae:	fab3 f383 	clz	r3, r3
 800bdb2:	b2db      	uxtb	r3, r3
 800bdb4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800bdb6:	683b      	ldr	r3, [r7, #0]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d105      	bne.n	800bdce <HAL_ADC_ConfigChannel+0x3f2>
 800bdc2:	683b      	ldr	r3, [r7, #0]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	0e9b      	lsrs	r3, r3, #26
 800bdc8:	f003 031f 	and.w	r3, r3, #31
 800bdcc:	e011      	b.n	800bdf2 <HAL_ADC_ConfigChannel+0x416>
 800bdce:	683b      	ldr	r3, [r7, #0]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bdd4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bdd6:	fa93 f3a3 	rbit	r3, r3
 800bdda:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800bddc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bdde:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800bde0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d101      	bne.n	800bdea <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800bde6:	2320      	movs	r3, #32
 800bde8:	e003      	b.n	800bdf2 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800bdea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bdec:	fab3 f383 	clz	r3, r3
 800bdf0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800bdf2:	429a      	cmp	r2, r3
 800bdf4:	d106      	bne.n	800be04 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	2200      	movs	r2, #0
 800bdfc:	2103      	movs	r1, #3
 800bdfe:	4618      	mov	r0, r3
 800be00:	f7ff f968 	bl	800b0d4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	4618      	mov	r0, r3
 800be0a:	f7ff fad9 	bl	800b3c0 <LL_ADC_IsEnabled>
 800be0e:	4603      	mov	r3, r0
 800be10:	2b00      	cmp	r3, #0
 800be12:	f040 813d 	bne.w	800c090 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	6818      	ldr	r0, [r3, #0]
 800be1a:	683b      	ldr	r3, [r7, #0]
 800be1c:	6819      	ldr	r1, [r3, #0]
 800be1e:	683b      	ldr	r3, [r7, #0]
 800be20:	68db      	ldr	r3, [r3, #12]
 800be22:	461a      	mov	r2, r3
 800be24:	f7ff fa24 	bl	800b270 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800be28:	683b      	ldr	r3, [r7, #0]
 800be2a:	68db      	ldr	r3, [r3, #12]
 800be2c:	4aa2      	ldr	r2, [pc, #648]	@ (800c0b8 <HAL_ADC_ConfigChannel+0x6dc>)
 800be2e:	4293      	cmp	r3, r2
 800be30:	f040 812e 	bne.w	800c090 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800be38:	683b      	ldr	r3, [r7, #0]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800be40:	2b00      	cmp	r3, #0
 800be42:	d10b      	bne.n	800be5c <HAL_ADC_ConfigChannel+0x480>
 800be44:	683b      	ldr	r3, [r7, #0]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	0e9b      	lsrs	r3, r3, #26
 800be4a:	3301      	adds	r3, #1
 800be4c:	f003 031f 	and.w	r3, r3, #31
 800be50:	2b09      	cmp	r3, #9
 800be52:	bf94      	ite	ls
 800be54:	2301      	movls	r3, #1
 800be56:	2300      	movhi	r3, #0
 800be58:	b2db      	uxtb	r3, r3
 800be5a:	e019      	b.n	800be90 <HAL_ADC_ConfigChannel+0x4b4>
 800be5c:	683b      	ldr	r3, [r7, #0]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800be62:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800be64:	fa93 f3a3 	rbit	r3, r3
 800be68:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800be6a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800be6c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800be6e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800be70:	2b00      	cmp	r3, #0
 800be72:	d101      	bne.n	800be78 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 800be74:	2320      	movs	r3, #32
 800be76:	e003      	b.n	800be80 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800be78:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800be7a:	fab3 f383 	clz	r3, r3
 800be7e:	b2db      	uxtb	r3, r3
 800be80:	3301      	adds	r3, #1
 800be82:	f003 031f 	and.w	r3, r3, #31
 800be86:	2b09      	cmp	r3, #9
 800be88:	bf94      	ite	ls
 800be8a:	2301      	movls	r3, #1
 800be8c:	2300      	movhi	r3, #0
 800be8e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800be90:	2b00      	cmp	r3, #0
 800be92:	d079      	beq.n	800bf88 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800be94:	683b      	ldr	r3, [r7, #0]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d107      	bne.n	800beb0 <HAL_ADC_ConfigChannel+0x4d4>
 800bea0:	683b      	ldr	r3, [r7, #0]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	0e9b      	lsrs	r3, r3, #26
 800bea6:	3301      	adds	r3, #1
 800bea8:	069b      	lsls	r3, r3, #26
 800beaa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800beae:	e015      	b.n	800bedc <HAL_ADC_ConfigChannel+0x500>
 800beb0:	683b      	ldr	r3, [r7, #0]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800beb6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800beb8:	fa93 f3a3 	rbit	r3, r3
 800bebc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800bebe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bec0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800bec2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d101      	bne.n	800becc <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 800bec8:	2320      	movs	r3, #32
 800beca:	e003      	b.n	800bed4 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 800becc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bece:	fab3 f383 	clz	r3, r3
 800bed2:	b2db      	uxtb	r3, r3
 800bed4:	3301      	adds	r3, #1
 800bed6:	069b      	lsls	r3, r3, #26
 800bed8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800bedc:	683b      	ldr	r3, [r7, #0]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d109      	bne.n	800befc <HAL_ADC_ConfigChannel+0x520>
 800bee8:	683b      	ldr	r3, [r7, #0]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	0e9b      	lsrs	r3, r3, #26
 800beee:	3301      	adds	r3, #1
 800bef0:	f003 031f 	and.w	r3, r3, #31
 800bef4:	2101      	movs	r1, #1
 800bef6:	fa01 f303 	lsl.w	r3, r1, r3
 800befa:	e017      	b.n	800bf2c <HAL_ADC_ConfigChannel+0x550>
 800befc:	683b      	ldr	r3, [r7, #0]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bf02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bf04:	fa93 f3a3 	rbit	r3, r3
 800bf08:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800bf0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bf0c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800bf0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d101      	bne.n	800bf18 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 800bf14:	2320      	movs	r3, #32
 800bf16:	e003      	b.n	800bf20 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 800bf18:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bf1a:	fab3 f383 	clz	r3, r3
 800bf1e:	b2db      	uxtb	r3, r3
 800bf20:	3301      	adds	r3, #1
 800bf22:	f003 031f 	and.w	r3, r3, #31
 800bf26:	2101      	movs	r1, #1
 800bf28:	fa01 f303 	lsl.w	r3, r1, r3
 800bf2c:	ea42 0103 	orr.w	r1, r2, r3
 800bf30:	683b      	ldr	r3, [r7, #0]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d10a      	bne.n	800bf52 <HAL_ADC_ConfigChannel+0x576>
 800bf3c:	683b      	ldr	r3, [r7, #0]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	0e9b      	lsrs	r3, r3, #26
 800bf42:	3301      	adds	r3, #1
 800bf44:	f003 021f 	and.w	r2, r3, #31
 800bf48:	4613      	mov	r3, r2
 800bf4a:	005b      	lsls	r3, r3, #1
 800bf4c:	4413      	add	r3, r2
 800bf4e:	051b      	lsls	r3, r3, #20
 800bf50:	e018      	b.n	800bf84 <HAL_ADC_ConfigChannel+0x5a8>
 800bf52:	683b      	ldr	r3, [r7, #0]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bf58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf5a:	fa93 f3a3 	rbit	r3, r3
 800bf5e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800bf60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf62:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800bf64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d101      	bne.n	800bf6e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800bf6a:	2320      	movs	r3, #32
 800bf6c:	e003      	b.n	800bf76 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800bf6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bf70:	fab3 f383 	clz	r3, r3
 800bf74:	b2db      	uxtb	r3, r3
 800bf76:	3301      	adds	r3, #1
 800bf78:	f003 021f 	and.w	r2, r3, #31
 800bf7c:	4613      	mov	r3, r2
 800bf7e:	005b      	lsls	r3, r3, #1
 800bf80:	4413      	add	r3, r2
 800bf82:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800bf84:	430b      	orrs	r3, r1
 800bf86:	e07e      	b.n	800c086 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800bf88:	683b      	ldr	r3, [r7, #0]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d107      	bne.n	800bfa4 <HAL_ADC_ConfigChannel+0x5c8>
 800bf94:	683b      	ldr	r3, [r7, #0]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	0e9b      	lsrs	r3, r3, #26
 800bf9a:	3301      	adds	r3, #1
 800bf9c:	069b      	lsls	r3, r3, #26
 800bf9e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800bfa2:	e015      	b.n	800bfd0 <HAL_ADC_ConfigChannel+0x5f4>
 800bfa4:	683b      	ldr	r3, [r7, #0]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bfaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bfac:	fa93 f3a3 	rbit	r3, r3
 800bfb0:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800bfb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfb4:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800bfb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d101      	bne.n	800bfc0 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 800bfbc:	2320      	movs	r3, #32
 800bfbe:	e003      	b.n	800bfc8 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 800bfc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfc2:	fab3 f383 	clz	r3, r3
 800bfc6:	b2db      	uxtb	r3, r3
 800bfc8:	3301      	adds	r3, #1
 800bfca:	069b      	lsls	r3, r3, #26
 800bfcc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800bfd0:	683b      	ldr	r3, [r7, #0]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d109      	bne.n	800bff0 <HAL_ADC_ConfigChannel+0x614>
 800bfdc:	683b      	ldr	r3, [r7, #0]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	0e9b      	lsrs	r3, r3, #26
 800bfe2:	3301      	adds	r3, #1
 800bfe4:	f003 031f 	and.w	r3, r3, #31
 800bfe8:	2101      	movs	r1, #1
 800bfea:	fa01 f303 	lsl.w	r3, r1, r3
 800bfee:	e017      	b.n	800c020 <HAL_ADC_ConfigChannel+0x644>
 800bff0:	683b      	ldr	r3, [r7, #0]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bff6:	6a3b      	ldr	r3, [r7, #32]
 800bff8:	fa93 f3a3 	rbit	r3, r3
 800bffc:	61fb      	str	r3, [r7, #28]
  return result;
 800bffe:	69fb      	ldr	r3, [r7, #28]
 800c000:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800c002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c004:	2b00      	cmp	r3, #0
 800c006:	d101      	bne.n	800c00c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 800c008:	2320      	movs	r3, #32
 800c00a:	e003      	b.n	800c014 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 800c00c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c00e:	fab3 f383 	clz	r3, r3
 800c012:	b2db      	uxtb	r3, r3
 800c014:	3301      	adds	r3, #1
 800c016:	f003 031f 	and.w	r3, r3, #31
 800c01a:	2101      	movs	r1, #1
 800c01c:	fa01 f303 	lsl.w	r3, r1, r3
 800c020:	ea42 0103 	orr.w	r1, r2, r3
 800c024:	683b      	ldr	r3, [r7, #0]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d10d      	bne.n	800c04c <HAL_ADC_ConfigChannel+0x670>
 800c030:	683b      	ldr	r3, [r7, #0]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	0e9b      	lsrs	r3, r3, #26
 800c036:	3301      	adds	r3, #1
 800c038:	f003 021f 	and.w	r2, r3, #31
 800c03c:	4613      	mov	r3, r2
 800c03e:	005b      	lsls	r3, r3, #1
 800c040:	4413      	add	r3, r2
 800c042:	3b1e      	subs	r3, #30
 800c044:	051b      	lsls	r3, r3, #20
 800c046:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800c04a:	e01b      	b.n	800c084 <HAL_ADC_ConfigChannel+0x6a8>
 800c04c:	683b      	ldr	r3, [r7, #0]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c052:	697b      	ldr	r3, [r7, #20]
 800c054:	fa93 f3a3 	rbit	r3, r3
 800c058:	613b      	str	r3, [r7, #16]
  return result;
 800c05a:	693b      	ldr	r3, [r7, #16]
 800c05c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800c05e:	69bb      	ldr	r3, [r7, #24]
 800c060:	2b00      	cmp	r3, #0
 800c062:	d101      	bne.n	800c068 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 800c064:	2320      	movs	r3, #32
 800c066:	e003      	b.n	800c070 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 800c068:	69bb      	ldr	r3, [r7, #24]
 800c06a:	fab3 f383 	clz	r3, r3
 800c06e:	b2db      	uxtb	r3, r3
 800c070:	3301      	adds	r3, #1
 800c072:	f003 021f 	and.w	r2, r3, #31
 800c076:	4613      	mov	r3, r2
 800c078:	005b      	lsls	r3, r3, #1
 800c07a:	4413      	add	r3, r2
 800c07c:	3b1e      	subs	r3, #30
 800c07e:	051b      	lsls	r3, r3, #20
 800c080:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800c084:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800c086:	683a      	ldr	r2, [r7, #0]
 800c088:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800c08a:	4619      	mov	r1, r3
 800c08c:	f7ff f8c5 	bl	800b21a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800c090:	683b      	ldr	r3, [r7, #0]
 800c092:	681a      	ldr	r2, [r3, #0]
 800c094:	4b09      	ldr	r3, [pc, #36]	@ (800c0bc <HAL_ADC_ConfigChannel+0x6e0>)
 800c096:	4013      	ands	r3, r2
 800c098:	2b00      	cmp	r3, #0
 800c09a:	f000 80be 	beq.w	800c21a <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c0a6:	d004      	beq.n	800c0b2 <HAL_ADC_ConfigChannel+0x6d6>
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	4a04      	ldr	r2, [pc, #16]	@ (800c0c0 <HAL_ADC_ConfigChannel+0x6e4>)
 800c0ae:	4293      	cmp	r3, r2
 800c0b0:	d10a      	bne.n	800c0c8 <HAL_ADC_ConfigChannel+0x6ec>
 800c0b2:	4b04      	ldr	r3, [pc, #16]	@ (800c0c4 <HAL_ADC_ConfigChannel+0x6e8>)
 800c0b4:	e009      	b.n	800c0ca <HAL_ADC_ConfigChannel+0x6ee>
 800c0b6:	bf00      	nop
 800c0b8:	407f0000 	.word	0x407f0000
 800c0bc:	80080000 	.word	0x80080000
 800c0c0:	50000100 	.word	0x50000100
 800c0c4:	50000300 	.word	0x50000300
 800c0c8:	4b59      	ldr	r3, [pc, #356]	@ (800c230 <HAL_ADC_ConfigChannel+0x854>)
 800c0ca:	4618      	mov	r0, r3
 800c0cc:	f7fe ffba 	bl	800b044 <LL_ADC_GetCommonPathInternalCh>
 800c0d0:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800c0d4:	683b      	ldr	r3, [r7, #0]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	4a56      	ldr	r2, [pc, #344]	@ (800c234 <HAL_ADC_ConfigChannel+0x858>)
 800c0da:	4293      	cmp	r3, r2
 800c0dc:	d004      	beq.n	800c0e8 <HAL_ADC_ConfigChannel+0x70c>
 800c0de:	683b      	ldr	r3, [r7, #0]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	4a55      	ldr	r2, [pc, #340]	@ (800c238 <HAL_ADC_ConfigChannel+0x85c>)
 800c0e4:	4293      	cmp	r3, r2
 800c0e6:	d13a      	bne.n	800c15e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800c0e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c0ec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d134      	bne.n	800c15e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c0fc:	d005      	beq.n	800c10a <HAL_ADC_ConfigChannel+0x72e>
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	4a4e      	ldr	r2, [pc, #312]	@ (800c23c <HAL_ADC_ConfigChannel+0x860>)
 800c104:	4293      	cmp	r3, r2
 800c106:	f040 8085 	bne.w	800c214 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c112:	d004      	beq.n	800c11e <HAL_ADC_ConfigChannel+0x742>
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	4a49      	ldr	r2, [pc, #292]	@ (800c240 <HAL_ADC_ConfigChannel+0x864>)
 800c11a:	4293      	cmp	r3, r2
 800c11c:	d101      	bne.n	800c122 <HAL_ADC_ConfigChannel+0x746>
 800c11e:	4a49      	ldr	r2, [pc, #292]	@ (800c244 <HAL_ADC_ConfigChannel+0x868>)
 800c120:	e000      	b.n	800c124 <HAL_ADC_ConfigChannel+0x748>
 800c122:	4a43      	ldr	r2, [pc, #268]	@ (800c230 <HAL_ADC_ConfigChannel+0x854>)
 800c124:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c128:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800c12c:	4619      	mov	r1, r3
 800c12e:	4610      	mov	r0, r2
 800c130:	f7fe ff75 	bl	800b01e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800c134:	4b44      	ldr	r3, [pc, #272]	@ (800c248 <HAL_ADC_ConfigChannel+0x86c>)
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	099b      	lsrs	r3, r3, #6
 800c13a:	4a44      	ldr	r2, [pc, #272]	@ (800c24c <HAL_ADC_ConfigChannel+0x870>)
 800c13c:	fba2 2303 	umull	r2, r3, r2, r3
 800c140:	099b      	lsrs	r3, r3, #6
 800c142:	1c5a      	adds	r2, r3, #1
 800c144:	4613      	mov	r3, r2
 800c146:	005b      	lsls	r3, r3, #1
 800c148:	4413      	add	r3, r2
 800c14a:	009b      	lsls	r3, r3, #2
 800c14c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800c14e:	e002      	b.n	800c156 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	3b01      	subs	r3, #1
 800c154:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d1f9      	bne.n	800c150 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800c15c:	e05a      	b.n	800c214 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800c15e:	683b      	ldr	r3, [r7, #0]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	4a3b      	ldr	r2, [pc, #236]	@ (800c250 <HAL_ADC_ConfigChannel+0x874>)
 800c164:	4293      	cmp	r3, r2
 800c166:	d125      	bne.n	800c1b4 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800c168:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c16c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800c170:	2b00      	cmp	r3, #0
 800c172:	d11f      	bne.n	800c1b4 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	4a31      	ldr	r2, [pc, #196]	@ (800c240 <HAL_ADC_ConfigChannel+0x864>)
 800c17a:	4293      	cmp	r3, r2
 800c17c:	d104      	bne.n	800c188 <HAL_ADC_ConfigChannel+0x7ac>
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	4a34      	ldr	r2, [pc, #208]	@ (800c254 <HAL_ADC_ConfigChannel+0x878>)
 800c184:	4293      	cmp	r3, r2
 800c186:	d047      	beq.n	800c218 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c190:	d004      	beq.n	800c19c <HAL_ADC_ConfigChannel+0x7c0>
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	4a2a      	ldr	r2, [pc, #168]	@ (800c240 <HAL_ADC_ConfigChannel+0x864>)
 800c198:	4293      	cmp	r3, r2
 800c19a:	d101      	bne.n	800c1a0 <HAL_ADC_ConfigChannel+0x7c4>
 800c19c:	4a29      	ldr	r2, [pc, #164]	@ (800c244 <HAL_ADC_ConfigChannel+0x868>)
 800c19e:	e000      	b.n	800c1a2 <HAL_ADC_ConfigChannel+0x7c6>
 800c1a0:	4a23      	ldr	r2, [pc, #140]	@ (800c230 <HAL_ADC_ConfigChannel+0x854>)
 800c1a2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c1a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c1aa:	4619      	mov	r1, r3
 800c1ac:	4610      	mov	r0, r2
 800c1ae:	f7fe ff36 	bl	800b01e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800c1b2:	e031      	b.n	800c218 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800c1b4:	683b      	ldr	r3, [r7, #0]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	4a27      	ldr	r2, [pc, #156]	@ (800c258 <HAL_ADC_ConfigChannel+0x87c>)
 800c1ba:	4293      	cmp	r3, r2
 800c1bc:	d12d      	bne.n	800c21a <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800c1be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c1c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d127      	bne.n	800c21a <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	4a1c      	ldr	r2, [pc, #112]	@ (800c240 <HAL_ADC_ConfigChannel+0x864>)
 800c1d0:	4293      	cmp	r3, r2
 800c1d2:	d022      	beq.n	800c21a <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c1dc:	d004      	beq.n	800c1e8 <HAL_ADC_ConfigChannel+0x80c>
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	4a17      	ldr	r2, [pc, #92]	@ (800c240 <HAL_ADC_ConfigChannel+0x864>)
 800c1e4:	4293      	cmp	r3, r2
 800c1e6:	d101      	bne.n	800c1ec <HAL_ADC_ConfigChannel+0x810>
 800c1e8:	4a16      	ldr	r2, [pc, #88]	@ (800c244 <HAL_ADC_ConfigChannel+0x868>)
 800c1ea:	e000      	b.n	800c1ee <HAL_ADC_ConfigChannel+0x812>
 800c1ec:	4a10      	ldr	r2, [pc, #64]	@ (800c230 <HAL_ADC_ConfigChannel+0x854>)
 800c1ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c1f2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800c1f6:	4619      	mov	r1, r3
 800c1f8:	4610      	mov	r0, r2
 800c1fa:	f7fe ff10 	bl	800b01e <LL_ADC_SetCommonPathInternalCh>
 800c1fe:	e00c      	b.n	800c21a <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c204:	f043 0220 	orr.w	r2, r3, #32
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800c20c:	2301      	movs	r3, #1
 800c20e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800c212:	e002      	b.n	800c21a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800c214:	bf00      	nop
 800c216:	e000      	b.n	800c21a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800c218:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	2200      	movs	r2, #0
 800c21e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800c222:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800c226:	4618      	mov	r0, r3
 800c228:	37d8      	adds	r7, #216	@ 0xd8
 800c22a:	46bd      	mov	sp, r7
 800c22c:	bd80      	pop	{r7, pc}
 800c22e:	bf00      	nop
 800c230:	50000700 	.word	0x50000700
 800c234:	c3210000 	.word	0xc3210000
 800c238:	90c00010 	.word	0x90c00010
 800c23c:	50000600 	.word	0x50000600
 800c240:	50000100 	.word	0x50000100
 800c244:	50000300 	.word	0x50000300
 800c248:	200005bc 	.word	0x200005bc
 800c24c:	053e2d63 	.word	0x053e2d63
 800c250:	c7520000 	.word	0xc7520000
 800c254:	50000500 	.word	0x50000500
 800c258:	cb840000 	.word	0xcb840000

0800c25c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800c25c:	b580      	push	{r7, lr}
 800c25e:	b084      	sub	sp, #16
 800c260:	af00      	add	r7, sp, #0
 800c262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800c264:	2300      	movs	r3, #0
 800c266:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	4618      	mov	r0, r3
 800c26e:	f7ff f8a7 	bl	800b3c0 <LL_ADC_IsEnabled>
 800c272:	4603      	mov	r3, r0
 800c274:	2b00      	cmp	r3, #0
 800c276:	d176      	bne.n	800c366 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	689a      	ldr	r2, [r3, #8]
 800c27e:	4b3c      	ldr	r3, [pc, #240]	@ (800c370 <ADC_Enable+0x114>)
 800c280:	4013      	ands	r3, r2
 800c282:	2b00      	cmp	r3, #0
 800c284:	d00d      	beq.n	800c2a2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c28a:	f043 0210 	orr.w	r2, r3, #16
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c296:	f043 0201 	orr.w	r2, r3, #1
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800c29e:	2301      	movs	r3, #1
 800c2a0:	e062      	b.n	800c368 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	f7ff f862 	bl	800b370 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c2b4:	d004      	beq.n	800c2c0 <ADC_Enable+0x64>
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	4a2e      	ldr	r2, [pc, #184]	@ (800c374 <ADC_Enable+0x118>)
 800c2bc:	4293      	cmp	r3, r2
 800c2be:	d101      	bne.n	800c2c4 <ADC_Enable+0x68>
 800c2c0:	4b2d      	ldr	r3, [pc, #180]	@ (800c378 <ADC_Enable+0x11c>)
 800c2c2:	e000      	b.n	800c2c6 <ADC_Enable+0x6a>
 800c2c4:	4b2d      	ldr	r3, [pc, #180]	@ (800c37c <ADC_Enable+0x120>)
 800c2c6:	4618      	mov	r0, r3
 800c2c8:	f7fe febc 	bl	800b044 <LL_ADC_GetCommonPathInternalCh>
 800c2cc:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800c2ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d013      	beq.n	800c2fe <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800c2d6:	4b2a      	ldr	r3, [pc, #168]	@ (800c380 <ADC_Enable+0x124>)
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	099b      	lsrs	r3, r3, #6
 800c2dc:	4a29      	ldr	r2, [pc, #164]	@ (800c384 <ADC_Enable+0x128>)
 800c2de:	fba2 2303 	umull	r2, r3, r2, r3
 800c2e2:	099b      	lsrs	r3, r3, #6
 800c2e4:	1c5a      	adds	r2, r3, #1
 800c2e6:	4613      	mov	r3, r2
 800c2e8:	005b      	lsls	r3, r3, #1
 800c2ea:	4413      	add	r3, r2
 800c2ec:	009b      	lsls	r3, r3, #2
 800c2ee:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800c2f0:	e002      	b.n	800c2f8 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 800c2f2:	68bb      	ldr	r3, [r7, #8]
 800c2f4:	3b01      	subs	r3, #1
 800c2f6:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800c2f8:	68bb      	ldr	r3, [r7, #8]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d1f9      	bne.n	800c2f2 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800c2fe:	f7fe fe4d 	bl	800af9c <HAL_GetTick>
 800c302:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800c304:	e028      	b.n	800c358 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	4618      	mov	r0, r3
 800c30c:	f7ff f858 	bl	800b3c0 <LL_ADC_IsEnabled>
 800c310:	4603      	mov	r3, r0
 800c312:	2b00      	cmp	r3, #0
 800c314:	d104      	bne.n	800c320 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	4618      	mov	r0, r3
 800c31c:	f7ff f828 	bl	800b370 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800c320:	f7fe fe3c 	bl	800af9c <HAL_GetTick>
 800c324:	4602      	mov	r2, r0
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	1ad3      	subs	r3, r2, r3
 800c32a:	2b02      	cmp	r3, #2
 800c32c:	d914      	bls.n	800c358 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	f003 0301 	and.w	r3, r3, #1
 800c338:	2b01      	cmp	r3, #1
 800c33a:	d00d      	beq.n	800c358 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c340:	f043 0210 	orr.w	r2, r3, #16
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c34c:	f043 0201 	orr.w	r2, r3, #1
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800c354:	2301      	movs	r3, #1
 800c356:	e007      	b.n	800c368 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	f003 0301 	and.w	r3, r3, #1
 800c362:	2b01      	cmp	r3, #1
 800c364:	d1cf      	bne.n	800c306 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800c366:	2300      	movs	r3, #0
}
 800c368:	4618      	mov	r0, r3
 800c36a:	3710      	adds	r7, #16
 800c36c:	46bd      	mov	sp, r7
 800c36e:	bd80      	pop	{r7, pc}
 800c370:	8000003f 	.word	0x8000003f
 800c374:	50000100 	.word	0x50000100
 800c378:	50000300 	.word	0x50000300
 800c37c:	50000700 	.word	0x50000700
 800c380:	200005bc 	.word	0x200005bc
 800c384:	053e2d63 	.word	0x053e2d63

0800c388 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800c388:	b580      	push	{r7, lr}
 800c38a:	b084      	sub	sp, #16
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	4618      	mov	r0, r3
 800c396:	f7ff f826 	bl	800b3e6 <LL_ADC_IsDisableOngoing>
 800c39a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	4618      	mov	r0, r3
 800c3a2:	f7ff f80d 	bl	800b3c0 <LL_ADC_IsEnabled>
 800c3a6:	4603      	mov	r3, r0
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d047      	beq.n	800c43c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d144      	bne.n	800c43c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	689b      	ldr	r3, [r3, #8]
 800c3b8:	f003 030d 	and.w	r3, r3, #13
 800c3bc:	2b01      	cmp	r3, #1
 800c3be:	d10c      	bne.n	800c3da <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	4618      	mov	r0, r3
 800c3c6:	f7fe ffe7 	bl	800b398 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	2203      	movs	r2, #3
 800c3d0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800c3d2:	f7fe fde3 	bl	800af9c <HAL_GetTick>
 800c3d6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800c3d8:	e029      	b.n	800c42e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c3de:	f043 0210 	orr.w	r2, r3, #16
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c3ea:	f043 0201 	orr.w	r2, r3, #1
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 800c3f2:	2301      	movs	r3, #1
 800c3f4:	e023      	b.n	800c43e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800c3f6:	f7fe fdd1 	bl	800af9c <HAL_GetTick>
 800c3fa:	4602      	mov	r2, r0
 800c3fc:	68bb      	ldr	r3, [r7, #8]
 800c3fe:	1ad3      	subs	r3, r2, r3
 800c400:	2b02      	cmp	r3, #2
 800c402:	d914      	bls.n	800c42e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	689b      	ldr	r3, [r3, #8]
 800c40a:	f003 0301 	and.w	r3, r3, #1
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d00d      	beq.n	800c42e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c416:	f043 0210 	orr.w	r2, r3, #16
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c422:	f043 0201 	orr.w	r2, r3, #1
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800c42a:	2301      	movs	r3, #1
 800c42c:	e007      	b.n	800c43e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	689b      	ldr	r3, [r3, #8]
 800c434:	f003 0301 	and.w	r3, r3, #1
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d1dc      	bne.n	800c3f6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800c43c:	2300      	movs	r3, #0
}
 800c43e:	4618      	mov	r0, r3
 800c440:	3710      	adds	r7, #16
 800c442:	46bd      	mov	sp, r7
 800c444:	bd80      	pop	{r7, pc}

0800c446 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800c446:	b580      	push	{r7, lr}
 800c448:	b084      	sub	sp, #16
 800c44a:	af00      	add	r7, sp, #0
 800c44c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c452:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c458:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d14b      	bne.n	800c4f8 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c464:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	f003 0308 	and.w	r3, r3, #8
 800c476:	2b00      	cmp	r3, #0
 800c478:	d021      	beq.n	800c4be <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	4618      	mov	r0, r3
 800c480:	f7fe fe8c 	bl	800b19c <LL_ADC_REG_IsTriggerSourceSWStart>
 800c484:	4603      	mov	r3, r0
 800c486:	2b00      	cmp	r3, #0
 800c488:	d032      	beq.n	800c4f0 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	68db      	ldr	r3, [r3, #12]
 800c490:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c494:	2b00      	cmp	r3, #0
 800c496:	d12b      	bne.n	800c4f0 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c49c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c4a8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d11f      	bne.n	800c4f0 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c4b4:	f043 0201 	orr.w	r2, r3, #1
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	65da      	str	r2, [r3, #92]	@ 0x5c
 800c4bc:	e018      	b.n	800c4f0 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	68db      	ldr	r3, [r3, #12]
 800c4c4:	f003 0302 	and.w	r3, r3, #2
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d111      	bne.n	800c4f0 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c4d0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c4dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d105      	bne.n	800c4f0 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c4e8:	f043 0201 	orr.w	r2, r3, #1
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800c4f0:	68f8      	ldr	r0, [r7, #12]
 800c4f2:	f7ff fa55 	bl	800b9a0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800c4f6:	e00e      	b.n	800c516 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c4fc:	f003 0310 	and.w	r3, r3, #16
 800c500:	2b00      	cmp	r3, #0
 800c502:	d003      	beq.n	800c50c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800c504:	68f8      	ldr	r0, [r7, #12]
 800c506:	f7ff fa5f 	bl	800b9c8 <HAL_ADC_ErrorCallback>
}
 800c50a:	e004      	b.n	800c516 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c510:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c512:	6878      	ldr	r0, [r7, #4]
 800c514:	4798      	blx	r3
}
 800c516:	bf00      	nop
 800c518:	3710      	adds	r7, #16
 800c51a:	46bd      	mov	sp, r7
 800c51c:	bd80      	pop	{r7, pc}

0800c51e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800c51e:	b580      	push	{r7, lr}
 800c520:	b084      	sub	sp, #16
 800c522:	af00      	add	r7, sp, #0
 800c524:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c52a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800c52c:	68f8      	ldr	r0, [r7, #12]
 800c52e:	f7ff fa41 	bl	800b9b4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800c532:	bf00      	nop
 800c534:	3710      	adds	r7, #16
 800c536:	46bd      	mov	sp, r7
 800c538:	bd80      	pop	{r7, pc}

0800c53a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800c53a:	b580      	push	{r7, lr}
 800c53c:	b084      	sub	sp, #16
 800c53e:	af00      	add	r7, sp, #0
 800c540:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c546:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c54c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c558:	f043 0204 	orr.w	r2, r3, #4
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800c560:	68f8      	ldr	r0, [r7, #12]
 800c562:	f7ff fa31 	bl	800b9c8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800c566:	bf00      	nop
 800c568:	3710      	adds	r7, #16
 800c56a:	46bd      	mov	sp, r7
 800c56c:	bd80      	pop	{r7, pc}

0800c56e <LL_ADC_IsEnabled>:
{
 800c56e:	b480      	push	{r7}
 800c570:	b083      	sub	sp, #12
 800c572:	af00      	add	r7, sp, #0
 800c574:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	689b      	ldr	r3, [r3, #8]
 800c57a:	f003 0301 	and.w	r3, r3, #1
 800c57e:	2b01      	cmp	r3, #1
 800c580:	d101      	bne.n	800c586 <LL_ADC_IsEnabled+0x18>
 800c582:	2301      	movs	r3, #1
 800c584:	e000      	b.n	800c588 <LL_ADC_IsEnabled+0x1a>
 800c586:	2300      	movs	r3, #0
}
 800c588:	4618      	mov	r0, r3
 800c58a:	370c      	adds	r7, #12
 800c58c:	46bd      	mov	sp, r7
 800c58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c592:	4770      	bx	lr

0800c594 <LL_ADC_StartCalibration>:
{
 800c594:	b480      	push	{r7}
 800c596:	b083      	sub	sp, #12
 800c598:	af00      	add	r7, sp, #0
 800c59a:	6078      	str	r0, [r7, #4]
 800c59c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	689b      	ldr	r3, [r3, #8]
 800c5a2:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800c5a6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800c5aa:	683a      	ldr	r2, [r7, #0]
 800c5ac:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800c5b0:	4313      	orrs	r3, r2
 800c5b2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	609a      	str	r2, [r3, #8]
}
 800c5ba:	bf00      	nop
 800c5bc:	370c      	adds	r7, #12
 800c5be:	46bd      	mov	sp, r7
 800c5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c4:	4770      	bx	lr

0800c5c6 <LL_ADC_IsCalibrationOnGoing>:
{
 800c5c6:	b480      	push	{r7}
 800c5c8:	b083      	sub	sp, #12
 800c5ca:	af00      	add	r7, sp, #0
 800c5cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	689b      	ldr	r3, [r3, #8]
 800c5d2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c5d6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c5da:	d101      	bne.n	800c5e0 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800c5dc:	2301      	movs	r3, #1
 800c5de:	e000      	b.n	800c5e2 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800c5e0:	2300      	movs	r3, #0
}
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	370c      	adds	r7, #12
 800c5e6:	46bd      	mov	sp, r7
 800c5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ec:	4770      	bx	lr

0800c5ee <LL_ADC_REG_IsConversionOngoing>:
{
 800c5ee:	b480      	push	{r7}
 800c5f0:	b083      	sub	sp, #12
 800c5f2:	af00      	add	r7, sp, #0
 800c5f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	689b      	ldr	r3, [r3, #8]
 800c5fa:	f003 0304 	and.w	r3, r3, #4
 800c5fe:	2b04      	cmp	r3, #4
 800c600:	d101      	bne.n	800c606 <LL_ADC_REG_IsConversionOngoing+0x18>
 800c602:	2301      	movs	r3, #1
 800c604:	e000      	b.n	800c608 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800c606:	2300      	movs	r3, #0
}
 800c608:	4618      	mov	r0, r3
 800c60a:	370c      	adds	r7, #12
 800c60c:	46bd      	mov	sp, r7
 800c60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c612:	4770      	bx	lr

0800c614 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800c614:	b580      	push	{r7, lr}
 800c616:	b084      	sub	sp, #16
 800c618:	af00      	add	r7, sp, #0
 800c61a:	6078      	str	r0, [r7, #4]
 800c61c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800c61e:	2300      	movs	r3, #0
 800c620:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800c628:	2b01      	cmp	r3, #1
 800c62a:	d101      	bne.n	800c630 <HAL_ADCEx_Calibration_Start+0x1c>
 800c62c:	2302      	movs	r3, #2
 800c62e:	e04d      	b.n	800c6cc <HAL_ADCEx_Calibration_Start+0xb8>
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	2201      	movs	r2, #1
 800c634:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800c638:	6878      	ldr	r0, [r7, #4]
 800c63a:	f7ff fea5 	bl	800c388 <ADC_Disable>
 800c63e:	4603      	mov	r3, r0
 800c640:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800c642:	7bfb      	ldrb	r3, [r7, #15]
 800c644:	2b00      	cmp	r3, #0
 800c646:	d136      	bne.n	800c6b6 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c64c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800c650:	f023 0302 	bic.w	r3, r3, #2
 800c654:	f043 0202 	orr.w	r2, r3, #2
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	6839      	ldr	r1, [r7, #0]
 800c662:	4618      	mov	r0, r3
 800c664:	f7ff ff96 	bl	800c594 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800c668:	e014      	b.n	800c694 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800c66a:	68bb      	ldr	r3, [r7, #8]
 800c66c:	3301      	adds	r3, #1
 800c66e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800c670:	68bb      	ldr	r3, [r7, #8]
 800c672:	4a18      	ldr	r2, [pc, #96]	@ (800c6d4 <HAL_ADCEx_Calibration_Start+0xc0>)
 800c674:	4293      	cmp	r3, r2
 800c676:	d90d      	bls.n	800c694 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c67c:	f023 0312 	bic.w	r3, r3, #18
 800c680:	f043 0210 	orr.w	r2, r3, #16
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	2200      	movs	r2, #0
 800c68c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 800c690:	2301      	movs	r3, #1
 800c692:	e01b      	b.n	800c6cc <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	4618      	mov	r0, r3
 800c69a:	f7ff ff94 	bl	800c5c6 <LL_ADC_IsCalibrationOnGoing>
 800c69e:	4603      	mov	r3, r0
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d1e2      	bne.n	800c66a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c6a8:	f023 0303 	bic.w	r3, r3, #3
 800c6ac:	f043 0201 	orr.w	r2, r3, #1
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	65da      	str	r2, [r3, #92]	@ 0x5c
 800c6b4:	e005      	b.n	800c6c2 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c6ba:	f043 0210 	orr.w	r2, r3, #16
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	2200      	movs	r2, #0
 800c6c6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800c6ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6cc:	4618      	mov	r0, r3
 800c6ce:	3710      	adds	r7, #16
 800c6d0:	46bd      	mov	sp, r7
 800c6d2:	bd80      	pop	{r7, pc}
 800c6d4:	0004de01 	.word	0x0004de01

0800c6d8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800c6d8:	b590      	push	{r4, r7, lr}
 800c6da:	b0a1      	sub	sp, #132	@ 0x84
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	6078      	str	r0, [r7, #4]
 800c6e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800c6e2:	2300      	movs	r3, #0
 800c6e4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800c6ee:	2b01      	cmp	r3, #1
 800c6f0:	d101      	bne.n	800c6f6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800c6f2:	2302      	movs	r3, #2
 800c6f4:	e0e7      	b.n	800c8c6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	2201      	movs	r2, #1
 800c6fa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800c6fe:	2300      	movs	r3, #0
 800c700:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800c702:	2300      	movs	r3, #0
 800c704:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c70e:	d102      	bne.n	800c716 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800c710:	4b6f      	ldr	r3, [pc, #444]	@ (800c8d0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800c712:	60bb      	str	r3, [r7, #8]
 800c714:	e009      	b.n	800c72a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	4a6e      	ldr	r2, [pc, #440]	@ (800c8d4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800c71c:	4293      	cmp	r3, r2
 800c71e:	d102      	bne.n	800c726 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 800c720:	4b6d      	ldr	r3, [pc, #436]	@ (800c8d8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800c722:	60bb      	str	r3, [r7, #8]
 800c724:	e001      	b.n	800c72a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800c726:	2300      	movs	r3, #0
 800c728:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800c72a:	68bb      	ldr	r3, [r7, #8]
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d10b      	bne.n	800c748 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c734:	f043 0220 	orr.w	r2, r3, #32
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	2200      	movs	r2, #0
 800c740:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 800c744:	2301      	movs	r3, #1
 800c746:	e0be      	b.n	800c8c6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800c748:	68bb      	ldr	r3, [r7, #8]
 800c74a:	4618      	mov	r0, r3
 800c74c:	f7ff ff4f 	bl	800c5ee <LL_ADC_REG_IsConversionOngoing>
 800c750:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	4618      	mov	r0, r3
 800c758:	f7ff ff49 	bl	800c5ee <LL_ADC_REG_IsConversionOngoing>
 800c75c:	4603      	mov	r3, r0
 800c75e:	2b00      	cmp	r3, #0
 800c760:	f040 80a0 	bne.w	800c8a4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800c764:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c766:	2b00      	cmp	r3, #0
 800c768:	f040 809c 	bne.w	800c8a4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c774:	d004      	beq.n	800c780 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	4a55      	ldr	r2, [pc, #340]	@ (800c8d0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800c77c:	4293      	cmp	r3, r2
 800c77e:	d101      	bne.n	800c784 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800c780:	4b56      	ldr	r3, [pc, #344]	@ (800c8dc <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800c782:	e000      	b.n	800c786 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800c784:	4b56      	ldr	r3, [pc, #344]	@ (800c8e0 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800c786:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800c788:	683b      	ldr	r3, [r7, #0]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d04b      	beq.n	800c828 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800c790:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c792:	689b      	ldr	r3, [r3, #8]
 800c794:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800c798:	683b      	ldr	r3, [r7, #0]
 800c79a:	6859      	ldr	r1, [r3, #4]
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800c7a2:	035b      	lsls	r3, r3, #13
 800c7a4:	430b      	orrs	r3, r1
 800c7a6:	431a      	orrs	r2, r3
 800c7a8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c7aa:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c7b4:	d004      	beq.n	800c7c0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	4a45      	ldr	r2, [pc, #276]	@ (800c8d0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800c7bc:	4293      	cmp	r3, r2
 800c7be:	d10f      	bne.n	800c7e0 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 800c7c0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800c7c4:	f7ff fed3 	bl	800c56e <LL_ADC_IsEnabled>
 800c7c8:	4604      	mov	r4, r0
 800c7ca:	4841      	ldr	r0, [pc, #260]	@ (800c8d0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800c7cc:	f7ff fecf 	bl	800c56e <LL_ADC_IsEnabled>
 800c7d0:	4603      	mov	r3, r0
 800c7d2:	4323      	orrs	r3, r4
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	bf0c      	ite	eq
 800c7d8:	2301      	moveq	r3, #1
 800c7da:	2300      	movne	r3, #0
 800c7dc:	b2db      	uxtb	r3, r3
 800c7de:	e012      	b.n	800c806 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800c7e0:	483c      	ldr	r0, [pc, #240]	@ (800c8d4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800c7e2:	f7ff fec4 	bl	800c56e <LL_ADC_IsEnabled>
 800c7e6:	4604      	mov	r4, r0
 800c7e8:	483b      	ldr	r0, [pc, #236]	@ (800c8d8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800c7ea:	f7ff fec0 	bl	800c56e <LL_ADC_IsEnabled>
 800c7ee:	4603      	mov	r3, r0
 800c7f0:	431c      	orrs	r4, r3
 800c7f2:	483c      	ldr	r0, [pc, #240]	@ (800c8e4 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800c7f4:	f7ff febb 	bl	800c56e <LL_ADC_IsEnabled>
 800c7f8:	4603      	mov	r3, r0
 800c7fa:	4323      	orrs	r3, r4
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	bf0c      	ite	eq
 800c800:	2301      	moveq	r3, #1
 800c802:	2300      	movne	r3, #0
 800c804:	b2db      	uxtb	r3, r3
 800c806:	2b00      	cmp	r3, #0
 800c808:	d056      	beq.n	800c8b8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800c80a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c80c:	689b      	ldr	r3, [r3, #8]
 800c80e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800c812:	f023 030f 	bic.w	r3, r3, #15
 800c816:	683a      	ldr	r2, [r7, #0]
 800c818:	6811      	ldr	r1, [r2, #0]
 800c81a:	683a      	ldr	r2, [r7, #0]
 800c81c:	6892      	ldr	r2, [r2, #8]
 800c81e:	430a      	orrs	r2, r1
 800c820:	431a      	orrs	r2, r3
 800c822:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c824:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800c826:	e047      	b.n	800c8b8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800c828:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c82a:	689b      	ldr	r3, [r3, #8]
 800c82c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800c830:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c832:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c83c:	d004      	beq.n	800c848 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	4a23      	ldr	r2, [pc, #140]	@ (800c8d0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800c844:	4293      	cmp	r3, r2
 800c846:	d10f      	bne.n	800c868 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 800c848:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800c84c:	f7ff fe8f 	bl	800c56e <LL_ADC_IsEnabled>
 800c850:	4604      	mov	r4, r0
 800c852:	481f      	ldr	r0, [pc, #124]	@ (800c8d0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800c854:	f7ff fe8b 	bl	800c56e <LL_ADC_IsEnabled>
 800c858:	4603      	mov	r3, r0
 800c85a:	4323      	orrs	r3, r4
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	bf0c      	ite	eq
 800c860:	2301      	moveq	r3, #1
 800c862:	2300      	movne	r3, #0
 800c864:	b2db      	uxtb	r3, r3
 800c866:	e012      	b.n	800c88e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 800c868:	481a      	ldr	r0, [pc, #104]	@ (800c8d4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800c86a:	f7ff fe80 	bl	800c56e <LL_ADC_IsEnabled>
 800c86e:	4604      	mov	r4, r0
 800c870:	4819      	ldr	r0, [pc, #100]	@ (800c8d8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800c872:	f7ff fe7c 	bl	800c56e <LL_ADC_IsEnabled>
 800c876:	4603      	mov	r3, r0
 800c878:	431c      	orrs	r4, r3
 800c87a:	481a      	ldr	r0, [pc, #104]	@ (800c8e4 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800c87c:	f7ff fe77 	bl	800c56e <LL_ADC_IsEnabled>
 800c880:	4603      	mov	r3, r0
 800c882:	4323      	orrs	r3, r4
 800c884:	2b00      	cmp	r3, #0
 800c886:	bf0c      	ite	eq
 800c888:	2301      	moveq	r3, #1
 800c88a:	2300      	movne	r3, #0
 800c88c:	b2db      	uxtb	r3, r3
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d012      	beq.n	800c8b8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800c892:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c894:	689b      	ldr	r3, [r3, #8]
 800c896:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800c89a:	f023 030f 	bic.w	r3, r3, #15
 800c89e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800c8a0:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800c8a2:	e009      	b.n	800c8b8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c8a8:	f043 0220 	orr.w	r2, r3, #32
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800c8b0:	2301      	movs	r3, #1
 800c8b2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800c8b6:	e000      	b.n	800c8ba <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800c8b8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	2200      	movs	r2, #0
 800c8be:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800c8c2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800c8c6:	4618      	mov	r0, r3
 800c8c8:	3784      	adds	r7, #132	@ 0x84
 800c8ca:	46bd      	mov	sp, r7
 800c8cc:	bd90      	pop	{r4, r7, pc}
 800c8ce:	bf00      	nop
 800c8d0:	50000100 	.word	0x50000100
 800c8d4:	50000400 	.word	0x50000400
 800c8d8:	50000500 	.word	0x50000500
 800c8dc:	50000300 	.word	0x50000300
 800c8e0:	50000700 	.word	0x50000700
 800c8e4:	50000600 	.word	0x50000600

0800c8e8 <__NVIC_SetPriorityGrouping>:
{
 800c8e8:	b480      	push	{r7}
 800c8ea:	b085      	sub	sp, #20
 800c8ec:	af00      	add	r7, sp, #0
 800c8ee:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	f003 0307 	and.w	r3, r3, #7
 800c8f6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800c8f8:	4b0c      	ldr	r3, [pc, #48]	@ (800c92c <__NVIC_SetPriorityGrouping+0x44>)
 800c8fa:	68db      	ldr	r3, [r3, #12]
 800c8fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800c8fe:	68ba      	ldr	r2, [r7, #8]
 800c900:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800c904:	4013      	ands	r3, r2
 800c906:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800c90c:	68bb      	ldr	r3, [r7, #8]
 800c90e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800c910:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800c914:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c918:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800c91a:	4a04      	ldr	r2, [pc, #16]	@ (800c92c <__NVIC_SetPriorityGrouping+0x44>)
 800c91c:	68bb      	ldr	r3, [r7, #8]
 800c91e:	60d3      	str	r3, [r2, #12]
}
 800c920:	bf00      	nop
 800c922:	3714      	adds	r7, #20
 800c924:	46bd      	mov	sp, r7
 800c926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c92a:	4770      	bx	lr
 800c92c:	e000ed00 	.word	0xe000ed00

0800c930 <__NVIC_GetPriorityGrouping>:
{
 800c930:	b480      	push	{r7}
 800c932:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800c934:	4b04      	ldr	r3, [pc, #16]	@ (800c948 <__NVIC_GetPriorityGrouping+0x18>)
 800c936:	68db      	ldr	r3, [r3, #12]
 800c938:	0a1b      	lsrs	r3, r3, #8
 800c93a:	f003 0307 	and.w	r3, r3, #7
}
 800c93e:	4618      	mov	r0, r3
 800c940:	46bd      	mov	sp, r7
 800c942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c946:	4770      	bx	lr
 800c948:	e000ed00 	.word	0xe000ed00

0800c94c <__NVIC_EnableIRQ>:
{
 800c94c:	b480      	push	{r7}
 800c94e:	b083      	sub	sp, #12
 800c950:	af00      	add	r7, sp, #0
 800c952:	4603      	mov	r3, r0
 800c954:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	db0b      	blt.n	800c976 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c95e:	79fb      	ldrb	r3, [r7, #7]
 800c960:	f003 021f 	and.w	r2, r3, #31
 800c964:	4907      	ldr	r1, [pc, #28]	@ (800c984 <__NVIC_EnableIRQ+0x38>)
 800c966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c96a:	095b      	lsrs	r3, r3, #5
 800c96c:	2001      	movs	r0, #1
 800c96e:	fa00 f202 	lsl.w	r2, r0, r2
 800c972:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800c976:	bf00      	nop
 800c978:	370c      	adds	r7, #12
 800c97a:	46bd      	mov	sp, r7
 800c97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c980:	4770      	bx	lr
 800c982:	bf00      	nop
 800c984:	e000e100 	.word	0xe000e100

0800c988 <__NVIC_SetPriority>:
{
 800c988:	b480      	push	{r7}
 800c98a:	b083      	sub	sp, #12
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	4603      	mov	r3, r0
 800c990:	6039      	str	r1, [r7, #0]
 800c992:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c994:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c998:	2b00      	cmp	r3, #0
 800c99a:	db0a      	blt.n	800c9b2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c99c:	683b      	ldr	r3, [r7, #0]
 800c99e:	b2da      	uxtb	r2, r3
 800c9a0:	490c      	ldr	r1, [pc, #48]	@ (800c9d4 <__NVIC_SetPriority+0x4c>)
 800c9a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c9a6:	0112      	lsls	r2, r2, #4
 800c9a8:	b2d2      	uxtb	r2, r2
 800c9aa:	440b      	add	r3, r1
 800c9ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800c9b0:	e00a      	b.n	800c9c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c9b2:	683b      	ldr	r3, [r7, #0]
 800c9b4:	b2da      	uxtb	r2, r3
 800c9b6:	4908      	ldr	r1, [pc, #32]	@ (800c9d8 <__NVIC_SetPriority+0x50>)
 800c9b8:	79fb      	ldrb	r3, [r7, #7]
 800c9ba:	f003 030f 	and.w	r3, r3, #15
 800c9be:	3b04      	subs	r3, #4
 800c9c0:	0112      	lsls	r2, r2, #4
 800c9c2:	b2d2      	uxtb	r2, r2
 800c9c4:	440b      	add	r3, r1
 800c9c6:	761a      	strb	r2, [r3, #24]
}
 800c9c8:	bf00      	nop
 800c9ca:	370c      	adds	r7, #12
 800c9cc:	46bd      	mov	sp, r7
 800c9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d2:	4770      	bx	lr
 800c9d4:	e000e100 	.word	0xe000e100
 800c9d8:	e000ed00 	.word	0xe000ed00

0800c9dc <NVIC_EncodePriority>:
{
 800c9dc:	b480      	push	{r7}
 800c9de:	b089      	sub	sp, #36	@ 0x24
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	60f8      	str	r0, [r7, #12]
 800c9e4:	60b9      	str	r1, [r7, #8]
 800c9e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	f003 0307 	and.w	r3, r3, #7
 800c9ee:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800c9f0:	69fb      	ldr	r3, [r7, #28]
 800c9f2:	f1c3 0307 	rsb	r3, r3, #7
 800c9f6:	2b04      	cmp	r3, #4
 800c9f8:	bf28      	it	cs
 800c9fa:	2304      	movcs	r3, #4
 800c9fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800c9fe:	69fb      	ldr	r3, [r7, #28]
 800ca00:	3304      	adds	r3, #4
 800ca02:	2b06      	cmp	r3, #6
 800ca04:	d902      	bls.n	800ca0c <NVIC_EncodePriority+0x30>
 800ca06:	69fb      	ldr	r3, [r7, #28]
 800ca08:	3b03      	subs	r3, #3
 800ca0a:	e000      	b.n	800ca0e <NVIC_EncodePriority+0x32>
 800ca0c:	2300      	movs	r3, #0
 800ca0e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ca10:	f04f 32ff 	mov.w	r2, #4294967295
 800ca14:	69bb      	ldr	r3, [r7, #24]
 800ca16:	fa02 f303 	lsl.w	r3, r2, r3
 800ca1a:	43da      	mvns	r2, r3
 800ca1c:	68bb      	ldr	r3, [r7, #8]
 800ca1e:	401a      	ands	r2, r3
 800ca20:	697b      	ldr	r3, [r7, #20]
 800ca22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800ca24:	f04f 31ff 	mov.w	r1, #4294967295
 800ca28:	697b      	ldr	r3, [r7, #20]
 800ca2a:	fa01 f303 	lsl.w	r3, r1, r3
 800ca2e:	43d9      	mvns	r1, r3
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ca34:	4313      	orrs	r3, r2
}
 800ca36:	4618      	mov	r0, r3
 800ca38:	3724      	adds	r7, #36	@ 0x24
 800ca3a:	46bd      	mov	sp, r7
 800ca3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca40:	4770      	bx	lr
	...

0800ca44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800ca44:	b580      	push	{r7, lr}
 800ca46:	b082      	sub	sp, #8
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	3b01      	subs	r3, #1
 800ca50:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ca54:	d301      	bcc.n	800ca5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800ca56:	2301      	movs	r3, #1
 800ca58:	e00f      	b.n	800ca7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800ca5a:	4a0a      	ldr	r2, [pc, #40]	@ (800ca84 <SysTick_Config+0x40>)
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	3b01      	subs	r3, #1
 800ca60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800ca62:	210f      	movs	r1, #15
 800ca64:	f04f 30ff 	mov.w	r0, #4294967295
 800ca68:	f7ff ff8e 	bl	800c988 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800ca6c:	4b05      	ldr	r3, [pc, #20]	@ (800ca84 <SysTick_Config+0x40>)
 800ca6e:	2200      	movs	r2, #0
 800ca70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800ca72:	4b04      	ldr	r3, [pc, #16]	@ (800ca84 <SysTick_Config+0x40>)
 800ca74:	2207      	movs	r2, #7
 800ca76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800ca78:	2300      	movs	r3, #0
}
 800ca7a:	4618      	mov	r0, r3
 800ca7c:	3708      	adds	r7, #8
 800ca7e:	46bd      	mov	sp, r7
 800ca80:	bd80      	pop	{r7, pc}
 800ca82:	bf00      	nop
 800ca84:	e000e010 	.word	0xe000e010

0800ca88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800ca88:	b580      	push	{r7, lr}
 800ca8a:	b082      	sub	sp, #8
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800ca90:	6878      	ldr	r0, [r7, #4]
 800ca92:	f7ff ff29 	bl	800c8e8 <__NVIC_SetPriorityGrouping>
}
 800ca96:	bf00      	nop
 800ca98:	3708      	adds	r7, #8
 800ca9a:	46bd      	mov	sp, r7
 800ca9c:	bd80      	pop	{r7, pc}

0800ca9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800ca9e:	b580      	push	{r7, lr}
 800caa0:	b086      	sub	sp, #24
 800caa2:	af00      	add	r7, sp, #0
 800caa4:	4603      	mov	r3, r0
 800caa6:	60b9      	str	r1, [r7, #8]
 800caa8:	607a      	str	r2, [r7, #4]
 800caaa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800caac:	f7ff ff40 	bl	800c930 <__NVIC_GetPriorityGrouping>
 800cab0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800cab2:	687a      	ldr	r2, [r7, #4]
 800cab4:	68b9      	ldr	r1, [r7, #8]
 800cab6:	6978      	ldr	r0, [r7, #20]
 800cab8:	f7ff ff90 	bl	800c9dc <NVIC_EncodePriority>
 800cabc:	4602      	mov	r2, r0
 800cabe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cac2:	4611      	mov	r1, r2
 800cac4:	4618      	mov	r0, r3
 800cac6:	f7ff ff5f 	bl	800c988 <__NVIC_SetPriority>
}
 800caca:	bf00      	nop
 800cacc:	3718      	adds	r7, #24
 800cace:	46bd      	mov	sp, r7
 800cad0:	bd80      	pop	{r7, pc}

0800cad2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800cad2:	b580      	push	{r7, lr}
 800cad4:	b082      	sub	sp, #8
 800cad6:	af00      	add	r7, sp, #0
 800cad8:	4603      	mov	r3, r0
 800cada:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800cadc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cae0:	4618      	mov	r0, r3
 800cae2:	f7ff ff33 	bl	800c94c <__NVIC_EnableIRQ>
}
 800cae6:	bf00      	nop
 800cae8:	3708      	adds	r7, #8
 800caea:	46bd      	mov	sp, r7
 800caec:	bd80      	pop	{r7, pc}

0800caee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800caee:	b580      	push	{r7, lr}
 800caf0:	b082      	sub	sp, #8
 800caf2:	af00      	add	r7, sp, #0
 800caf4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800caf6:	6878      	ldr	r0, [r7, #4]
 800caf8:	f7ff ffa4 	bl	800ca44 <SysTick_Config>
 800cafc:	4603      	mov	r3, r0
}
 800cafe:	4618      	mov	r0, r3
 800cb00:	3708      	adds	r7, #8
 800cb02:	46bd      	mov	sp, r7
 800cb04:	bd80      	pop	{r7, pc}
	...

0800cb08 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800cb08:	b580      	push	{r7, lr}
 800cb0a:	b084      	sub	sp, #16
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d101      	bne.n	800cb1a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800cb16:	2301      	movs	r3, #1
 800cb18:	e08d      	b.n	800cc36 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	461a      	mov	r2, r3
 800cb20:	4b47      	ldr	r3, [pc, #284]	@ (800cc40 <HAL_DMA_Init+0x138>)
 800cb22:	429a      	cmp	r2, r3
 800cb24:	d80f      	bhi.n	800cb46 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	461a      	mov	r2, r3
 800cb2c:	4b45      	ldr	r3, [pc, #276]	@ (800cc44 <HAL_DMA_Init+0x13c>)
 800cb2e:	4413      	add	r3, r2
 800cb30:	4a45      	ldr	r2, [pc, #276]	@ (800cc48 <HAL_DMA_Init+0x140>)
 800cb32:	fba2 2303 	umull	r2, r3, r2, r3
 800cb36:	091b      	lsrs	r3, r3, #4
 800cb38:	009a      	lsls	r2, r3, #2
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	4a42      	ldr	r2, [pc, #264]	@ (800cc4c <HAL_DMA_Init+0x144>)
 800cb42:	641a      	str	r2, [r3, #64]	@ 0x40
 800cb44:	e00e      	b.n	800cb64 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	461a      	mov	r2, r3
 800cb4c:	4b40      	ldr	r3, [pc, #256]	@ (800cc50 <HAL_DMA_Init+0x148>)
 800cb4e:	4413      	add	r3, r2
 800cb50:	4a3d      	ldr	r2, [pc, #244]	@ (800cc48 <HAL_DMA_Init+0x140>)
 800cb52:	fba2 2303 	umull	r2, r3, r2, r3
 800cb56:	091b      	lsrs	r3, r3, #4
 800cb58:	009a      	lsls	r2, r3, #2
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	4a3c      	ldr	r2, [pc, #240]	@ (800cc54 <HAL_DMA_Init+0x14c>)
 800cb62:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	2202      	movs	r2, #2
 800cb68:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800cb7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cb7e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800cb88:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	691b      	ldr	r3, [r3, #16]
 800cb8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800cb94:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	699b      	ldr	r3, [r3, #24]
 800cb9a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800cba0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	6a1b      	ldr	r3, [r3, #32]
 800cba6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800cba8:	68fa      	ldr	r2, [r7, #12]
 800cbaa:	4313      	orrs	r3, r2
 800cbac:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	68fa      	ldr	r2, [r7, #12]
 800cbb4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800cbb6:	6878      	ldr	r0, [r7, #4]
 800cbb8:	f000 fa76 	bl	800d0a8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	689b      	ldr	r3, [r3, #8]
 800cbc0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800cbc4:	d102      	bne.n	800cbcc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	2200      	movs	r2, #0
 800cbca:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	685a      	ldr	r2, [r3, #4]
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cbd4:	b2d2      	uxtb	r2, r2
 800cbd6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cbdc:	687a      	ldr	r2, [r7, #4]
 800cbde:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800cbe0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	685b      	ldr	r3, [r3, #4]
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d010      	beq.n	800cc0c <HAL_DMA_Init+0x104>
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	685b      	ldr	r3, [r3, #4]
 800cbee:	2b04      	cmp	r3, #4
 800cbf0:	d80c      	bhi.n	800cc0c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800cbf2:	6878      	ldr	r0, [r7, #4]
 800cbf4:	f000 fa96 	bl	800d124 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cbfc:	2200      	movs	r2, #0
 800cbfe:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cc04:	687a      	ldr	r2, [r7, #4]
 800cc06:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800cc08:	605a      	str	r2, [r3, #4]
 800cc0a:	e008      	b.n	800cc1e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	2200      	movs	r2, #0
 800cc10:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	2200      	movs	r2, #0
 800cc16:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	2200      	movs	r2, #0
 800cc1c:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	2200      	movs	r2, #0
 800cc22:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	2201      	movs	r2, #1
 800cc28:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	2200      	movs	r2, #0
 800cc30:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800cc34:	2300      	movs	r3, #0
}
 800cc36:	4618      	mov	r0, r3
 800cc38:	3710      	adds	r7, #16
 800cc3a:	46bd      	mov	sp, r7
 800cc3c:	bd80      	pop	{r7, pc}
 800cc3e:	bf00      	nop
 800cc40:	40020407 	.word	0x40020407
 800cc44:	bffdfff8 	.word	0xbffdfff8
 800cc48:	cccccccd 	.word	0xcccccccd
 800cc4c:	40020000 	.word	0x40020000
 800cc50:	bffdfbf8 	.word	0xbffdfbf8
 800cc54:	40020400 	.word	0x40020400

0800cc58 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800cc58:	b580      	push	{r7, lr}
 800cc5a:	b086      	sub	sp, #24
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	60f8      	str	r0, [r7, #12]
 800cc60:	60b9      	str	r1, [r7, #8]
 800cc62:	607a      	str	r2, [r7, #4]
 800cc64:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800cc66:	2300      	movs	r3, #0
 800cc68:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800cc70:	2b01      	cmp	r3, #1
 800cc72:	d101      	bne.n	800cc78 <HAL_DMA_Start_IT+0x20>
 800cc74:	2302      	movs	r3, #2
 800cc76:	e066      	b.n	800cd46 <HAL_DMA_Start_IT+0xee>
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	2201      	movs	r2, #1
 800cc7c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800cc86:	b2db      	uxtb	r3, r3
 800cc88:	2b01      	cmp	r3, #1
 800cc8a:	d155      	bne.n	800cd38 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	2202      	movs	r2, #2
 800cc90:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	2200      	movs	r2, #0
 800cc98:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	681a      	ldr	r2, [r3, #0]
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	f022 0201 	bic.w	r2, r2, #1
 800cca8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800ccaa:	683b      	ldr	r3, [r7, #0]
 800ccac:	687a      	ldr	r2, [r7, #4]
 800ccae:	68b9      	ldr	r1, [r7, #8]
 800ccb0:	68f8      	ldr	r0, [r7, #12]
 800ccb2:	f000 f9bb 	bl	800d02c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d008      	beq.n	800ccd0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	681a      	ldr	r2, [r3, #0]
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	f042 020e 	orr.w	r2, r2, #14
 800cccc:	601a      	str	r2, [r3, #0]
 800ccce:	e00f      	b.n	800ccf0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	681a      	ldr	r2, [r3, #0]
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	f022 0204 	bic.w	r2, r2, #4
 800ccde:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	681a      	ldr	r2, [r3, #0]
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	f042 020a 	orr.w	r2, r2, #10
 800ccee:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d007      	beq.n	800cd0e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cd02:	681a      	ldr	r2, [r3, #0]
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cd08:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800cd0c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d007      	beq.n	800cd26 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cd1a:	681a      	ldr	r2, [r3, #0]
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cd20:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800cd24:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	681a      	ldr	r2, [r3, #0]
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	f042 0201 	orr.w	r2, r2, #1
 800cd34:	601a      	str	r2, [r3, #0]
 800cd36:	e005      	b.n	800cd44 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	2200      	movs	r2, #0
 800cd3c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800cd40:	2302      	movs	r3, #2
 800cd42:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800cd44:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd46:	4618      	mov	r0, r3
 800cd48:	3718      	adds	r7, #24
 800cd4a:	46bd      	mov	sp, r7
 800cd4c:	bd80      	pop	{r7, pc}

0800cd4e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800cd4e:	b480      	push	{r7}
 800cd50:	b085      	sub	sp, #20
 800cd52:	af00      	add	r7, sp, #0
 800cd54:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cd56:	2300      	movs	r3, #0
 800cd58:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800cd60:	b2db      	uxtb	r3, r3
 800cd62:	2b02      	cmp	r3, #2
 800cd64:	d005      	beq.n	800cd72 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	2204      	movs	r2, #4
 800cd6a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800cd6c:	2301      	movs	r3, #1
 800cd6e:	73fb      	strb	r3, [r7, #15]
 800cd70:	e037      	b.n	800cde2 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	681a      	ldr	r2, [r3, #0]
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	f022 020e 	bic.w	r2, r2, #14
 800cd80:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cd86:	681a      	ldr	r2, [r3, #0]
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cd8c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800cd90:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	681a      	ldr	r2, [r3, #0]
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	f022 0201 	bic.w	r2, r2, #1
 800cda0:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cda6:	f003 021f 	and.w	r2, r3, #31
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cdae:	2101      	movs	r1, #1
 800cdb0:	fa01 f202 	lsl.w	r2, r1, r2
 800cdb4:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cdba:	687a      	ldr	r2, [r7, #4]
 800cdbc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800cdbe:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d00c      	beq.n	800cde2 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cdcc:	681a      	ldr	r2, [r3, #0]
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cdd2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800cdd6:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cddc:	687a      	ldr	r2, [r7, #4]
 800cdde:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800cde0:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	2201      	movs	r2, #1
 800cde6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	2200      	movs	r2, #0
 800cdee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800cdf2:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	3714      	adds	r7, #20
 800cdf8:	46bd      	mov	sp, r7
 800cdfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdfe:	4770      	bx	lr

0800ce00 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800ce00:	b580      	push	{r7, lr}
 800ce02:	b084      	sub	sp, #16
 800ce04:	af00      	add	r7, sp, #0
 800ce06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ce08:	2300      	movs	r3, #0
 800ce0a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800ce12:	b2db      	uxtb	r3, r3
 800ce14:	2b02      	cmp	r3, #2
 800ce16:	d00d      	beq.n	800ce34 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	2204      	movs	r2, #4
 800ce1c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	2201      	movs	r2, #1
 800ce22:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	2200      	movs	r2, #0
 800ce2a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800ce2e:	2301      	movs	r3, #1
 800ce30:	73fb      	strb	r3, [r7, #15]
 800ce32:	e047      	b.n	800cec4 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	681a      	ldr	r2, [r3, #0]
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	f022 020e 	bic.w	r2, r2, #14
 800ce42:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	681a      	ldr	r2, [r3, #0]
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	f022 0201 	bic.w	r2, r2, #1
 800ce52:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ce58:	681a      	ldr	r2, [r3, #0]
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ce5e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800ce62:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ce68:	f003 021f 	and.w	r2, r3, #31
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce70:	2101      	movs	r1, #1
 800ce72:	fa01 f202 	lsl.w	r2, r1, r2
 800ce76:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ce7c:	687a      	ldr	r2, [r7, #4]
 800ce7e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800ce80:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d00c      	beq.n	800cea4 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ce8e:	681a      	ldr	r2, [r3, #0]
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ce94:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800ce98:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ce9e:	687a      	ldr	r2, [r7, #4]
 800cea0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800cea2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	2201      	movs	r2, #1
 800cea8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	2200      	movs	r2, #0
 800ceb0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d003      	beq.n	800cec4 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cec0:	6878      	ldr	r0, [r7, #4]
 800cec2:	4798      	blx	r3
    }
  }
  return status;
 800cec4:	7bfb      	ldrb	r3, [r7, #15]
}
 800cec6:	4618      	mov	r0, r3
 800cec8:	3710      	adds	r7, #16
 800ceca:	46bd      	mov	sp, r7
 800cecc:	bd80      	pop	{r7, pc}

0800cece <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800cece:	b580      	push	{r7, lr}
 800ced0:	b084      	sub	sp, #16
 800ced2:	af00      	add	r7, sp, #0
 800ced4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ceea:	f003 031f 	and.w	r3, r3, #31
 800ceee:	2204      	movs	r2, #4
 800cef0:	409a      	lsls	r2, r3
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	4013      	ands	r3, r2
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d026      	beq.n	800cf48 <HAL_DMA_IRQHandler+0x7a>
 800cefa:	68bb      	ldr	r3, [r7, #8]
 800cefc:	f003 0304 	and.w	r3, r3, #4
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d021      	beq.n	800cf48 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	f003 0320 	and.w	r3, r3, #32
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d107      	bne.n	800cf22 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	681a      	ldr	r2, [r3, #0]
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	f022 0204 	bic.w	r2, r2, #4
 800cf20:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cf26:	f003 021f 	and.w	r2, r3, #31
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cf2e:	2104      	movs	r1, #4
 800cf30:	fa01 f202 	lsl.w	r2, r1, r2
 800cf34:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d071      	beq.n	800d022 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cf42:	6878      	ldr	r0, [r7, #4]
 800cf44:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800cf46:	e06c      	b.n	800d022 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cf4c:	f003 031f 	and.w	r3, r3, #31
 800cf50:	2202      	movs	r2, #2
 800cf52:	409a      	lsls	r2, r3
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	4013      	ands	r3, r2
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d02e      	beq.n	800cfba <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800cf5c:	68bb      	ldr	r3, [r7, #8]
 800cf5e:	f003 0302 	and.w	r3, r3, #2
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d029      	beq.n	800cfba <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	f003 0320 	and.w	r3, r3, #32
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d10b      	bne.n	800cf8c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	681a      	ldr	r2, [r3, #0]
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	f022 020a 	bic.w	r2, r2, #10
 800cf82:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	2201      	movs	r2, #1
 800cf88:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cf90:	f003 021f 	and.w	r2, r3, #31
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cf98:	2102      	movs	r1, #2
 800cf9a:	fa01 f202 	lsl.w	r2, r1, r2
 800cf9e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	2200      	movs	r2, #0
 800cfa4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d038      	beq.n	800d022 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cfb4:	6878      	ldr	r0, [r7, #4]
 800cfb6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800cfb8:	e033      	b.n	800d022 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cfbe:	f003 031f 	and.w	r3, r3, #31
 800cfc2:	2208      	movs	r2, #8
 800cfc4:	409a      	lsls	r2, r3
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	4013      	ands	r3, r2
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d02a      	beq.n	800d024 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800cfce:	68bb      	ldr	r3, [r7, #8]
 800cfd0:	f003 0308 	and.w	r3, r3, #8
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d025      	beq.n	800d024 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	681a      	ldr	r2, [r3, #0]
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	f022 020e 	bic.w	r2, r2, #14
 800cfe6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cfec:	f003 021f 	and.w	r2, r3, #31
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cff4:	2101      	movs	r1, #1
 800cff6:	fa01 f202 	lsl.w	r2, r1, r2
 800cffa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	2201      	movs	r2, #1
 800d000:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	2201      	movs	r2, #1
 800d006:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	2200      	movs	r2, #0
 800d00e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d016:	2b00      	cmp	r3, #0
 800d018:	d004      	beq.n	800d024 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d01e:	6878      	ldr	r0, [r7, #4]
 800d020:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800d022:	bf00      	nop
 800d024:	bf00      	nop
}
 800d026:	3710      	adds	r7, #16
 800d028:	46bd      	mov	sp, r7
 800d02a:	bd80      	pop	{r7, pc}

0800d02c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800d02c:	b480      	push	{r7}
 800d02e:	b085      	sub	sp, #20
 800d030:	af00      	add	r7, sp, #0
 800d032:	60f8      	str	r0, [r7, #12]
 800d034:	60b9      	str	r1, [r7, #8]
 800d036:	607a      	str	r2, [r7, #4]
 800d038:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d03e:	68fa      	ldr	r2, [r7, #12]
 800d040:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800d042:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d004      	beq.n	800d056 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d050:	68fa      	ldr	r2, [r7, #12]
 800d052:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800d054:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d05a:	f003 021f 	and.w	r2, r3, #31
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d062:	2101      	movs	r1, #1
 800d064:	fa01 f202 	lsl.w	r2, r1, r2
 800d068:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	683a      	ldr	r2, [r7, #0]
 800d070:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	689b      	ldr	r3, [r3, #8]
 800d076:	2b10      	cmp	r3, #16
 800d078:	d108      	bne.n	800d08c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	687a      	ldr	r2, [r7, #4]
 800d080:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	68ba      	ldr	r2, [r7, #8]
 800d088:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800d08a:	e007      	b.n	800d09c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	68ba      	ldr	r2, [r7, #8]
 800d092:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	687a      	ldr	r2, [r7, #4]
 800d09a:	60da      	str	r2, [r3, #12]
}
 800d09c:	bf00      	nop
 800d09e:	3714      	adds	r7, #20
 800d0a0:	46bd      	mov	sp, r7
 800d0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a6:	4770      	bx	lr

0800d0a8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800d0a8:	b480      	push	{r7}
 800d0aa:	b087      	sub	sp, #28
 800d0ac:	af00      	add	r7, sp, #0
 800d0ae:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	461a      	mov	r2, r3
 800d0b6:	4b16      	ldr	r3, [pc, #88]	@ (800d110 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800d0b8:	429a      	cmp	r2, r3
 800d0ba:	d802      	bhi.n	800d0c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800d0bc:	4b15      	ldr	r3, [pc, #84]	@ (800d114 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800d0be:	617b      	str	r3, [r7, #20]
 800d0c0:	e001      	b.n	800d0c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800d0c2:	4b15      	ldr	r3, [pc, #84]	@ (800d118 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800d0c4:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800d0c6:	697b      	ldr	r3, [r7, #20]
 800d0c8:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	b2db      	uxtb	r3, r3
 800d0d0:	3b08      	subs	r3, #8
 800d0d2:	4a12      	ldr	r2, [pc, #72]	@ (800d11c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800d0d4:	fba2 2303 	umull	r2, r3, r2, r3
 800d0d8:	091b      	lsrs	r3, r3, #4
 800d0da:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d0e0:	089b      	lsrs	r3, r3, #2
 800d0e2:	009a      	lsls	r2, r3, #2
 800d0e4:	693b      	ldr	r3, [r7, #16]
 800d0e6:	4413      	add	r3, r2
 800d0e8:	461a      	mov	r2, r3
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	4a0b      	ldr	r2, [pc, #44]	@ (800d120 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800d0f2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	f003 031f 	and.w	r3, r3, #31
 800d0fa:	2201      	movs	r2, #1
 800d0fc:	409a      	lsls	r2, r3
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800d102:	bf00      	nop
 800d104:	371c      	adds	r7, #28
 800d106:	46bd      	mov	sp, r7
 800d108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d10c:	4770      	bx	lr
 800d10e:	bf00      	nop
 800d110:	40020407 	.word	0x40020407
 800d114:	40020800 	.word	0x40020800
 800d118:	40020820 	.word	0x40020820
 800d11c:	cccccccd 	.word	0xcccccccd
 800d120:	40020880 	.word	0x40020880

0800d124 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800d124:	b480      	push	{r7}
 800d126:	b085      	sub	sp, #20
 800d128:	af00      	add	r7, sp, #0
 800d12a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	685b      	ldr	r3, [r3, #4]
 800d130:	b2db      	uxtb	r3, r3
 800d132:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800d134:	68fa      	ldr	r2, [r7, #12]
 800d136:	4b0b      	ldr	r3, [pc, #44]	@ (800d164 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800d138:	4413      	add	r3, r2
 800d13a:	009b      	lsls	r3, r3, #2
 800d13c:	461a      	mov	r2, r3
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	4a08      	ldr	r2, [pc, #32]	@ (800d168 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800d146:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	3b01      	subs	r3, #1
 800d14c:	f003 031f 	and.w	r3, r3, #31
 800d150:	2201      	movs	r2, #1
 800d152:	409a      	lsls	r2, r3
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800d158:	bf00      	nop
 800d15a:	3714      	adds	r7, #20
 800d15c:	46bd      	mov	sp, r7
 800d15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d162:	4770      	bx	lr
 800d164:	1000823f 	.word	0x1000823f
 800d168:	40020940 	.word	0x40020940

0800d16c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800d16c:	b480      	push	{r7}
 800d16e:	b087      	sub	sp, #28
 800d170:	af00      	add	r7, sp, #0
 800d172:	6078      	str	r0, [r7, #4]
 800d174:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800d176:	2300      	movs	r3, #0
 800d178:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800d17a:	e15a      	b.n	800d432 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800d17c:	683b      	ldr	r3, [r7, #0]
 800d17e:	681a      	ldr	r2, [r3, #0]
 800d180:	2101      	movs	r1, #1
 800d182:	697b      	ldr	r3, [r7, #20]
 800d184:	fa01 f303 	lsl.w	r3, r1, r3
 800d188:	4013      	ands	r3, r2
 800d18a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	2b00      	cmp	r3, #0
 800d190:	f000 814c 	beq.w	800d42c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800d194:	683b      	ldr	r3, [r7, #0]
 800d196:	685b      	ldr	r3, [r3, #4]
 800d198:	f003 0303 	and.w	r3, r3, #3
 800d19c:	2b01      	cmp	r3, #1
 800d19e:	d005      	beq.n	800d1ac <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800d1a0:	683b      	ldr	r3, [r7, #0]
 800d1a2:	685b      	ldr	r3, [r3, #4]
 800d1a4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800d1a8:	2b02      	cmp	r3, #2
 800d1aa:	d130      	bne.n	800d20e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	689b      	ldr	r3, [r3, #8]
 800d1b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800d1b2:	697b      	ldr	r3, [r7, #20]
 800d1b4:	005b      	lsls	r3, r3, #1
 800d1b6:	2203      	movs	r2, #3
 800d1b8:	fa02 f303 	lsl.w	r3, r2, r3
 800d1bc:	43db      	mvns	r3, r3
 800d1be:	693a      	ldr	r2, [r7, #16]
 800d1c0:	4013      	ands	r3, r2
 800d1c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800d1c4:	683b      	ldr	r3, [r7, #0]
 800d1c6:	68da      	ldr	r2, [r3, #12]
 800d1c8:	697b      	ldr	r3, [r7, #20]
 800d1ca:	005b      	lsls	r3, r3, #1
 800d1cc:	fa02 f303 	lsl.w	r3, r2, r3
 800d1d0:	693a      	ldr	r2, [r7, #16]
 800d1d2:	4313      	orrs	r3, r2
 800d1d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	693a      	ldr	r2, [r7, #16]
 800d1da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	685b      	ldr	r3, [r3, #4]
 800d1e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800d1e2:	2201      	movs	r2, #1
 800d1e4:	697b      	ldr	r3, [r7, #20]
 800d1e6:	fa02 f303 	lsl.w	r3, r2, r3
 800d1ea:	43db      	mvns	r3, r3
 800d1ec:	693a      	ldr	r2, [r7, #16]
 800d1ee:	4013      	ands	r3, r2
 800d1f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800d1f2:	683b      	ldr	r3, [r7, #0]
 800d1f4:	685b      	ldr	r3, [r3, #4]
 800d1f6:	091b      	lsrs	r3, r3, #4
 800d1f8:	f003 0201 	and.w	r2, r3, #1
 800d1fc:	697b      	ldr	r3, [r7, #20]
 800d1fe:	fa02 f303 	lsl.w	r3, r2, r3
 800d202:	693a      	ldr	r2, [r7, #16]
 800d204:	4313      	orrs	r3, r2
 800d206:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	693a      	ldr	r2, [r7, #16]
 800d20c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800d20e:	683b      	ldr	r3, [r7, #0]
 800d210:	685b      	ldr	r3, [r3, #4]
 800d212:	f003 0303 	and.w	r3, r3, #3
 800d216:	2b03      	cmp	r3, #3
 800d218:	d017      	beq.n	800d24a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	68db      	ldr	r3, [r3, #12]
 800d21e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800d220:	697b      	ldr	r3, [r7, #20]
 800d222:	005b      	lsls	r3, r3, #1
 800d224:	2203      	movs	r2, #3
 800d226:	fa02 f303 	lsl.w	r3, r2, r3
 800d22a:	43db      	mvns	r3, r3
 800d22c:	693a      	ldr	r2, [r7, #16]
 800d22e:	4013      	ands	r3, r2
 800d230:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800d232:	683b      	ldr	r3, [r7, #0]
 800d234:	689a      	ldr	r2, [r3, #8]
 800d236:	697b      	ldr	r3, [r7, #20]
 800d238:	005b      	lsls	r3, r3, #1
 800d23a:	fa02 f303 	lsl.w	r3, r2, r3
 800d23e:	693a      	ldr	r2, [r7, #16]
 800d240:	4313      	orrs	r3, r2
 800d242:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	693a      	ldr	r2, [r7, #16]
 800d248:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800d24a:	683b      	ldr	r3, [r7, #0]
 800d24c:	685b      	ldr	r3, [r3, #4]
 800d24e:	f003 0303 	and.w	r3, r3, #3
 800d252:	2b02      	cmp	r3, #2
 800d254:	d123      	bne.n	800d29e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800d256:	697b      	ldr	r3, [r7, #20]
 800d258:	08da      	lsrs	r2, r3, #3
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	3208      	adds	r2, #8
 800d25e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d262:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800d264:	697b      	ldr	r3, [r7, #20]
 800d266:	f003 0307 	and.w	r3, r3, #7
 800d26a:	009b      	lsls	r3, r3, #2
 800d26c:	220f      	movs	r2, #15
 800d26e:	fa02 f303 	lsl.w	r3, r2, r3
 800d272:	43db      	mvns	r3, r3
 800d274:	693a      	ldr	r2, [r7, #16]
 800d276:	4013      	ands	r3, r2
 800d278:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800d27a:	683b      	ldr	r3, [r7, #0]
 800d27c:	691a      	ldr	r2, [r3, #16]
 800d27e:	697b      	ldr	r3, [r7, #20]
 800d280:	f003 0307 	and.w	r3, r3, #7
 800d284:	009b      	lsls	r3, r3, #2
 800d286:	fa02 f303 	lsl.w	r3, r2, r3
 800d28a:	693a      	ldr	r2, [r7, #16]
 800d28c:	4313      	orrs	r3, r2
 800d28e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800d290:	697b      	ldr	r3, [r7, #20]
 800d292:	08da      	lsrs	r2, r3, #3
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	3208      	adds	r2, #8
 800d298:	6939      	ldr	r1, [r7, #16]
 800d29a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800d2a4:	697b      	ldr	r3, [r7, #20]
 800d2a6:	005b      	lsls	r3, r3, #1
 800d2a8:	2203      	movs	r2, #3
 800d2aa:	fa02 f303 	lsl.w	r3, r2, r3
 800d2ae:	43db      	mvns	r3, r3
 800d2b0:	693a      	ldr	r2, [r7, #16]
 800d2b2:	4013      	ands	r3, r2
 800d2b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800d2b6:	683b      	ldr	r3, [r7, #0]
 800d2b8:	685b      	ldr	r3, [r3, #4]
 800d2ba:	f003 0203 	and.w	r2, r3, #3
 800d2be:	697b      	ldr	r3, [r7, #20]
 800d2c0:	005b      	lsls	r3, r3, #1
 800d2c2:	fa02 f303 	lsl.w	r3, r2, r3
 800d2c6:	693a      	ldr	r2, [r7, #16]
 800d2c8:	4313      	orrs	r3, r2
 800d2ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	693a      	ldr	r2, [r7, #16]
 800d2d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800d2d2:	683b      	ldr	r3, [r7, #0]
 800d2d4:	685b      	ldr	r3, [r3, #4]
 800d2d6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	f000 80a6 	beq.w	800d42c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d2e0:	4b5b      	ldr	r3, [pc, #364]	@ (800d450 <HAL_GPIO_Init+0x2e4>)
 800d2e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d2e4:	4a5a      	ldr	r2, [pc, #360]	@ (800d450 <HAL_GPIO_Init+0x2e4>)
 800d2e6:	f043 0301 	orr.w	r3, r3, #1
 800d2ea:	6613      	str	r3, [r2, #96]	@ 0x60
 800d2ec:	4b58      	ldr	r3, [pc, #352]	@ (800d450 <HAL_GPIO_Init+0x2e4>)
 800d2ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d2f0:	f003 0301 	and.w	r3, r3, #1
 800d2f4:	60bb      	str	r3, [r7, #8]
 800d2f6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800d2f8:	4a56      	ldr	r2, [pc, #344]	@ (800d454 <HAL_GPIO_Init+0x2e8>)
 800d2fa:	697b      	ldr	r3, [r7, #20]
 800d2fc:	089b      	lsrs	r3, r3, #2
 800d2fe:	3302      	adds	r3, #2
 800d300:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d304:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800d306:	697b      	ldr	r3, [r7, #20]
 800d308:	f003 0303 	and.w	r3, r3, #3
 800d30c:	009b      	lsls	r3, r3, #2
 800d30e:	220f      	movs	r2, #15
 800d310:	fa02 f303 	lsl.w	r3, r2, r3
 800d314:	43db      	mvns	r3, r3
 800d316:	693a      	ldr	r2, [r7, #16]
 800d318:	4013      	ands	r3, r2
 800d31a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800d322:	d01f      	beq.n	800d364 <HAL_GPIO_Init+0x1f8>
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	4a4c      	ldr	r2, [pc, #304]	@ (800d458 <HAL_GPIO_Init+0x2ec>)
 800d328:	4293      	cmp	r3, r2
 800d32a:	d019      	beq.n	800d360 <HAL_GPIO_Init+0x1f4>
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	4a4b      	ldr	r2, [pc, #300]	@ (800d45c <HAL_GPIO_Init+0x2f0>)
 800d330:	4293      	cmp	r3, r2
 800d332:	d013      	beq.n	800d35c <HAL_GPIO_Init+0x1f0>
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	4a4a      	ldr	r2, [pc, #296]	@ (800d460 <HAL_GPIO_Init+0x2f4>)
 800d338:	4293      	cmp	r3, r2
 800d33a:	d00d      	beq.n	800d358 <HAL_GPIO_Init+0x1ec>
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	4a49      	ldr	r2, [pc, #292]	@ (800d464 <HAL_GPIO_Init+0x2f8>)
 800d340:	4293      	cmp	r3, r2
 800d342:	d007      	beq.n	800d354 <HAL_GPIO_Init+0x1e8>
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	4a48      	ldr	r2, [pc, #288]	@ (800d468 <HAL_GPIO_Init+0x2fc>)
 800d348:	4293      	cmp	r3, r2
 800d34a:	d101      	bne.n	800d350 <HAL_GPIO_Init+0x1e4>
 800d34c:	2305      	movs	r3, #5
 800d34e:	e00a      	b.n	800d366 <HAL_GPIO_Init+0x1fa>
 800d350:	2306      	movs	r3, #6
 800d352:	e008      	b.n	800d366 <HAL_GPIO_Init+0x1fa>
 800d354:	2304      	movs	r3, #4
 800d356:	e006      	b.n	800d366 <HAL_GPIO_Init+0x1fa>
 800d358:	2303      	movs	r3, #3
 800d35a:	e004      	b.n	800d366 <HAL_GPIO_Init+0x1fa>
 800d35c:	2302      	movs	r3, #2
 800d35e:	e002      	b.n	800d366 <HAL_GPIO_Init+0x1fa>
 800d360:	2301      	movs	r3, #1
 800d362:	e000      	b.n	800d366 <HAL_GPIO_Init+0x1fa>
 800d364:	2300      	movs	r3, #0
 800d366:	697a      	ldr	r2, [r7, #20]
 800d368:	f002 0203 	and.w	r2, r2, #3
 800d36c:	0092      	lsls	r2, r2, #2
 800d36e:	4093      	lsls	r3, r2
 800d370:	693a      	ldr	r2, [r7, #16]
 800d372:	4313      	orrs	r3, r2
 800d374:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800d376:	4937      	ldr	r1, [pc, #220]	@ (800d454 <HAL_GPIO_Init+0x2e8>)
 800d378:	697b      	ldr	r3, [r7, #20]
 800d37a:	089b      	lsrs	r3, r3, #2
 800d37c:	3302      	adds	r3, #2
 800d37e:	693a      	ldr	r2, [r7, #16]
 800d380:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800d384:	4b39      	ldr	r3, [pc, #228]	@ (800d46c <HAL_GPIO_Init+0x300>)
 800d386:	689b      	ldr	r3, [r3, #8]
 800d388:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	43db      	mvns	r3, r3
 800d38e:	693a      	ldr	r2, [r7, #16]
 800d390:	4013      	ands	r3, r2
 800d392:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800d394:	683b      	ldr	r3, [r7, #0]
 800d396:	685b      	ldr	r3, [r3, #4]
 800d398:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d003      	beq.n	800d3a8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800d3a0:	693a      	ldr	r2, [r7, #16]
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	4313      	orrs	r3, r2
 800d3a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800d3a8:	4a30      	ldr	r2, [pc, #192]	@ (800d46c <HAL_GPIO_Init+0x300>)
 800d3aa:	693b      	ldr	r3, [r7, #16]
 800d3ac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800d3ae:	4b2f      	ldr	r3, [pc, #188]	@ (800d46c <HAL_GPIO_Init+0x300>)
 800d3b0:	68db      	ldr	r3, [r3, #12]
 800d3b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	43db      	mvns	r3, r3
 800d3b8:	693a      	ldr	r2, [r7, #16]
 800d3ba:	4013      	ands	r3, r2
 800d3bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800d3be:	683b      	ldr	r3, [r7, #0]
 800d3c0:	685b      	ldr	r3, [r3, #4]
 800d3c2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d003      	beq.n	800d3d2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800d3ca:	693a      	ldr	r2, [r7, #16]
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	4313      	orrs	r3, r2
 800d3d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800d3d2:	4a26      	ldr	r2, [pc, #152]	@ (800d46c <HAL_GPIO_Init+0x300>)
 800d3d4:	693b      	ldr	r3, [r7, #16]
 800d3d6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800d3d8:	4b24      	ldr	r3, [pc, #144]	@ (800d46c <HAL_GPIO_Init+0x300>)
 800d3da:	685b      	ldr	r3, [r3, #4]
 800d3dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	43db      	mvns	r3, r3
 800d3e2:	693a      	ldr	r2, [r7, #16]
 800d3e4:	4013      	ands	r3, r2
 800d3e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800d3e8:	683b      	ldr	r3, [r7, #0]
 800d3ea:	685b      	ldr	r3, [r3, #4]
 800d3ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d003      	beq.n	800d3fc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800d3f4:	693a      	ldr	r2, [r7, #16]
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	4313      	orrs	r3, r2
 800d3fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800d3fc:	4a1b      	ldr	r2, [pc, #108]	@ (800d46c <HAL_GPIO_Init+0x300>)
 800d3fe:	693b      	ldr	r3, [r7, #16]
 800d400:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800d402:	4b1a      	ldr	r3, [pc, #104]	@ (800d46c <HAL_GPIO_Init+0x300>)
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	43db      	mvns	r3, r3
 800d40c:	693a      	ldr	r2, [r7, #16]
 800d40e:	4013      	ands	r3, r2
 800d410:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800d412:	683b      	ldr	r3, [r7, #0]
 800d414:	685b      	ldr	r3, [r3, #4]
 800d416:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d003      	beq.n	800d426 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800d41e:	693a      	ldr	r2, [r7, #16]
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	4313      	orrs	r3, r2
 800d424:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800d426:	4a11      	ldr	r2, [pc, #68]	@ (800d46c <HAL_GPIO_Init+0x300>)
 800d428:	693b      	ldr	r3, [r7, #16]
 800d42a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800d42c:	697b      	ldr	r3, [r7, #20]
 800d42e:	3301      	adds	r3, #1
 800d430:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800d432:	683b      	ldr	r3, [r7, #0]
 800d434:	681a      	ldr	r2, [r3, #0]
 800d436:	697b      	ldr	r3, [r7, #20]
 800d438:	fa22 f303 	lsr.w	r3, r2, r3
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	f47f ae9d 	bne.w	800d17c <HAL_GPIO_Init+0x10>
  }
}
 800d442:	bf00      	nop
 800d444:	bf00      	nop
 800d446:	371c      	adds	r7, #28
 800d448:	46bd      	mov	sp, r7
 800d44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d44e:	4770      	bx	lr
 800d450:	40021000 	.word	0x40021000
 800d454:	40010000 	.word	0x40010000
 800d458:	48000400 	.word	0x48000400
 800d45c:	48000800 	.word	0x48000800
 800d460:	48000c00 	.word	0x48000c00
 800d464:	48001000 	.word	0x48001000
 800d468:	48001400 	.word	0x48001400
 800d46c:	40010400 	.word	0x40010400

0800d470 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800d470:	b480      	push	{r7}
 800d472:	b085      	sub	sp, #20
 800d474:	af00      	add	r7, sp, #0
 800d476:	6078      	str	r0, [r7, #4]
 800d478:	460b      	mov	r3, r1
 800d47a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	691a      	ldr	r2, [r3, #16]
 800d480:	887b      	ldrh	r3, [r7, #2]
 800d482:	4013      	ands	r3, r2
 800d484:	2b00      	cmp	r3, #0
 800d486:	d002      	beq.n	800d48e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800d488:	2301      	movs	r3, #1
 800d48a:	73fb      	strb	r3, [r7, #15]
 800d48c:	e001      	b.n	800d492 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800d48e:	2300      	movs	r3, #0
 800d490:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800d492:	7bfb      	ldrb	r3, [r7, #15]
}
 800d494:	4618      	mov	r0, r3
 800d496:	3714      	adds	r7, #20
 800d498:	46bd      	mov	sp, r7
 800d49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d49e:	4770      	bx	lr

0800d4a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800d4a0:	b480      	push	{r7}
 800d4a2:	b083      	sub	sp, #12
 800d4a4:	af00      	add	r7, sp, #0
 800d4a6:	6078      	str	r0, [r7, #4]
 800d4a8:	460b      	mov	r3, r1
 800d4aa:	807b      	strh	r3, [r7, #2]
 800d4ac:	4613      	mov	r3, r2
 800d4ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800d4b0:	787b      	ldrb	r3, [r7, #1]
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d003      	beq.n	800d4be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800d4b6:	887a      	ldrh	r2, [r7, #2]
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800d4bc:	e002      	b.n	800d4c4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800d4be:	887a      	ldrh	r2, [r7, #2]
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800d4c4:	bf00      	nop
 800d4c6:	370c      	adds	r7, #12
 800d4c8:	46bd      	mov	sp, r7
 800d4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ce:	4770      	bx	lr

0800d4d0 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800d4d0:	b480      	push	{r7}
 800d4d2:	b085      	sub	sp, #20
 800d4d4:	af00      	add	r7, sp, #0
 800d4d6:	6078      	str	r0, [r7, #4]
 800d4d8:	460b      	mov	r3, r1
 800d4da:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	695b      	ldr	r3, [r3, #20]
 800d4e0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800d4e2:	887a      	ldrh	r2, [r7, #2]
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	4013      	ands	r3, r2
 800d4e8:	041a      	lsls	r2, r3, #16
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	43d9      	mvns	r1, r3
 800d4ee:	887b      	ldrh	r3, [r7, #2]
 800d4f0:	400b      	ands	r3, r1
 800d4f2:	431a      	orrs	r2, r3
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	619a      	str	r2, [r3, #24]
}
 800d4f8:	bf00      	nop
 800d4fa:	3714      	adds	r7, #20
 800d4fc:	46bd      	mov	sp, r7
 800d4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d502:	4770      	bx	lr

0800d504 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800d504:	b580      	push	{r7, lr}
 800d506:	b082      	sub	sp, #8
 800d508:	af00      	add	r7, sp, #0
 800d50a:	4603      	mov	r3, r0
 800d50c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800d50e:	4b08      	ldr	r3, [pc, #32]	@ (800d530 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800d510:	695a      	ldr	r2, [r3, #20]
 800d512:	88fb      	ldrh	r3, [r7, #6]
 800d514:	4013      	ands	r3, r2
 800d516:	2b00      	cmp	r3, #0
 800d518:	d006      	beq.n	800d528 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800d51a:	4a05      	ldr	r2, [pc, #20]	@ (800d530 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800d51c:	88fb      	ldrh	r3, [r7, #6]
 800d51e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800d520:	88fb      	ldrh	r3, [r7, #6]
 800d522:	4618      	mov	r0, r3
 800d524:	f7fb f9cc 	bl	80088c0 <HAL_GPIO_EXTI_Callback>
  }
}
 800d528:	bf00      	nop
 800d52a:	3708      	adds	r7, #8
 800d52c:	46bd      	mov	sp, r7
 800d52e:	bd80      	pop	{r7, pc}
 800d530:	40010400 	.word	0x40010400

0800d534 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800d534:	b480      	push	{r7}
 800d536:	b085      	sub	sp, #20
 800d538:	af00      	add	r7, sp, #0
 800d53a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d141      	bne.n	800d5c6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800d542:	4b4b      	ldr	r3, [pc, #300]	@ (800d670 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800d54a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d54e:	d131      	bne.n	800d5b4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800d550:	4b47      	ldr	r3, [pc, #284]	@ (800d670 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d552:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d556:	4a46      	ldr	r2, [pc, #280]	@ (800d670 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d558:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d55c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800d560:	4b43      	ldr	r3, [pc, #268]	@ (800d670 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800d568:	4a41      	ldr	r2, [pc, #260]	@ (800d670 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d56a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800d56e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800d570:	4b40      	ldr	r3, [pc, #256]	@ (800d674 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	2232      	movs	r2, #50	@ 0x32
 800d576:	fb02 f303 	mul.w	r3, r2, r3
 800d57a:	4a3f      	ldr	r2, [pc, #252]	@ (800d678 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800d57c:	fba2 2303 	umull	r2, r3, r2, r3
 800d580:	0c9b      	lsrs	r3, r3, #18
 800d582:	3301      	adds	r3, #1
 800d584:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800d586:	e002      	b.n	800d58e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	3b01      	subs	r3, #1
 800d58c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800d58e:	4b38      	ldr	r3, [pc, #224]	@ (800d670 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d590:	695b      	ldr	r3, [r3, #20]
 800d592:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d596:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d59a:	d102      	bne.n	800d5a2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d1f2      	bne.n	800d588 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800d5a2:	4b33      	ldr	r3, [pc, #204]	@ (800d670 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d5a4:	695b      	ldr	r3, [r3, #20]
 800d5a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d5aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d5ae:	d158      	bne.n	800d662 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800d5b0:	2303      	movs	r3, #3
 800d5b2:	e057      	b.n	800d664 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800d5b4:	4b2e      	ldr	r3, [pc, #184]	@ (800d670 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d5b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d5ba:	4a2d      	ldr	r2, [pc, #180]	@ (800d670 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d5bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d5c0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800d5c4:	e04d      	b.n	800d662 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d5cc:	d141      	bne.n	800d652 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800d5ce:	4b28      	ldr	r3, [pc, #160]	@ (800d670 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800d5d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d5da:	d131      	bne.n	800d640 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800d5dc:	4b24      	ldr	r3, [pc, #144]	@ (800d670 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d5de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d5e2:	4a23      	ldr	r2, [pc, #140]	@ (800d670 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d5e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d5e8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800d5ec:	4b20      	ldr	r3, [pc, #128]	@ (800d670 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800d5f4:	4a1e      	ldr	r2, [pc, #120]	@ (800d670 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d5f6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800d5fa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800d5fc:	4b1d      	ldr	r3, [pc, #116]	@ (800d674 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	2232      	movs	r2, #50	@ 0x32
 800d602:	fb02 f303 	mul.w	r3, r2, r3
 800d606:	4a1c      	ldr	r2, [pc, #112]	@ (800d678 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800d608:	fba2 2303 	umull	r2, r3, r2, r3
 800d60c:	0c9b      	lsrs	r3, r3, #18
 800d60e:	3301      	adds	r3, #1
 800d610:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800d612:	e002      	b.n	800d61a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	3b01      	subs	r3, #1
 800d618:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800d61a:	4b15      	ldr	r3, [pc, #84]	@ (800d670 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d61c:	695b      	ldr	r3, [r3, #20]
 800d61e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d622:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d626:	d102      	bne.n	800d62e <HAL_PWREx_ControlVoltageScaling+0xfa>
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d1f2      	bne.n	800d614 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800d62e:	4b10      	ldr	r3, [pc, #64]	@ (800d670 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d630:	695b      	ldr	r3, [r3, #20]
 800d632:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d636:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d63a:	d112      	bne.n	800d662 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800d63c:	2303      	movs	r3, #3
 800d63e:	e011      	b.n	800d664 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800d640:	4b0b      	ldr	r3, [pc, #44]	@ (800d670 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d642:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d646:	4a0a      	ldr	r2, [pc, #40]	@ (800d670 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d648:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d64c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800d650:	e007      	b.n	800d662 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800d652:	4b07      	ldr	r3, [pc, #28]	@ (800d670 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800d65a:	4a05      	ldr	r2, [pc, #20]	@ (800d670 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d65c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800d660:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800d662:	2300      	movs	r3, #0
}
 800d664:	4618      	mov	r0, r3
 800d666:	3714      	adds	r7, #20
 800d668:	46bd      	mov	sp, r7
 800d66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d66e:	4770      	bx	lr
 800d670:	40007000 	.word	0x40007000
 800d674:	200005bc 	.word	0x200005bc
 800d678:	431bde83 	.word	0x431bde83

0800d67c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800d67c:	b480      	push	{r7}
 800d67e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800d680:	4b05      	ldr	r3, [pc, #20]	@ (800d698 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800d682:	689b      	ldr	r3, [r3, #8]
 800d684:	4a04      	ldr	r2, [pc, #16]	@ (800d698 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800d686:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800d68a:	6093      	str	r3, [r2, #8]
}
 800d68c:	bf00      	nop
 800d68e:	46bd      	mov	sp, r7
 800d690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d694:	4770      	bx	lr
 800d696:	bf00      	nop
 800d698:	40007000 	.word	0x40007000

0800d69c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d69c:	b580      	push	{r7, lr}
 800d69e:	b088      	sub	sp, #32
 800d6a0:	af00      	add	r7, sp, #0
 800d6a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d101      	bne.n	800d6ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800d6aa:	2301      	movs	r3, #1
 800d6ac:	e2fe      	b.n	800dcac <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	f003 0301 	and.w	r3, r3, #1
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d075      	beq.n	800d7a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d6ba:	4b97      	ldr	r3, [pc, #604]	@ (800d918 <HAL_RCC_OscConfig+0x27c>)
 800d6bc:	689b      	ldr	r3, [r3, #8]
 800d6be:	f003 030c 	and.w	r3, r3, #12
 800d6c2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800d6c4:	4b94      	ldr	r3, [pc, #592]	@ (800d918 <HAL_RCC_OscConfig+0x27c>)
 800d6c6:	68db      	ldr	r3, [r3, #12]
 800d6c8:	f003 0303 	and.w	r3, r3, #3
 800d6cc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800d6ce:	69bb      	ldr	r3, [r7, #24]
 800d6d0:	2b0c      	cmp	r3, #12
 800d6d2:	d102      	bne.n	800d6da <HAL_RCC_OscConfig+0x3e>
 800d6d4:	697b      	ldr	r3, [r7, #20]
 800d6d6:	2b03      	cmp	r3, #3
 800d6d8:	d002      	beq.n	800d6e0 <HAL_RCC_OscConfig+0x44>
 800d6da:	69bb      	ldr	r3, [r7, #24]
 800d6dc:	2b08      	cmp	r3, #8
 800d6de:	d10b      	bne.n	800d6f8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d6e0:	4b8d      	ldr	r3, [pc, #564]	@ (800d918 <HAL_RCC_OscConfig+0x27c>)
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d05b      	beq.n	800d7a4 <HAL_RCC_OscConfig+0x108>
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	685b      	ldr	r3, [r3, #4]
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d157      	bne.n	800d7a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800d6f4:	2301      	movs	r3, #1
 800d6f6:	e2d9      	b.n	800dcac <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	685b      	ldr	r3, [r3, #4]
 800d6fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d700:	d106      	bne.n	800d710 <HAL_RCC_OscConfig+0x74>
 800d702:	4b85      	ldr	r3, [pc, #532]	@ (800d918 <HAL_RCC_OscConfig+0x27c>)
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	4a84      	ldr	r2, [pc, #528]	@ (800d918 <HAL_RCC_OscConfig+0x27c>)
 800d708:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d70c:	6013      	str	r3, [r2, #0]
 800d70e:	e01d      	b.n	800d74c <HAL_RCC_OscConfig+0xb0>
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	685b      	ldr	r3, [r3, #4]
 800d714:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800d718:	d10c      	bne.n	800d734 <HAL_RCC_OscConfig+0x98>
 800d71a:	4b7f      	ldr	r3, [pc, #508]	@ (800d918 <HAL_RCC_OscConfig+0x27c>)
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	4a7e      	ldr	r2, [pc, #504]	@ (800d918 <HAL_RCC_OscConfig+0x27c>)
 800d720:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800d724:	6013      	str	r3, [r2, #0]
 800d726:	4b7c      	ldr	r3, [pc, #496]	@ (800d918 <HAL_RCC_OscConfig+0x27c>)
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	4a7b      	ldr	r2, [pc, #492]	@ (800d918 <HAL_RCC_OscConfig+0x27c>)
 800d72c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d730:	6013      	str	r3, [r2, #0]
 800d732:	e00b      	b.n	800d74c <HAL_RCC_OscConfig+0xb0>
 800d734:	4b78      	ldr	r3, [pc, #480]	@ (800d918 <HAL_RCC_OscConfig+0x27c>)
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	4a77      	ldr	r2, [pc, #476]	@ (800d918 <HAL_RCC_OscConfig+0x27c>)
 800d73a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d73e:	6013      	str	r3, [r2, #0]
 800d740:	4b75      	ldr	r3, [pc, #468]	@ (800d918 <HAL_RCC_OscConfig+0x27c>)
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	4a74      	ldr	r2, [pc, #464]	@ (800d918 <HAL_RCC_OscConfig+0x27c>)
 800d746:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800d74a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	685b      	ldr	r3, [r3, #4]
 800d750:	2b00      	cmp	r3, #0
 800d752:	d013      	beq.n	800d77c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d754:	f7fd fc22 	bl	800af9c <HAL_GetTick>
 800d758:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800d75a:	e008      	b.n	800d76e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d75c:	f7fd fc1e 	bl	800af9c <HAL_GetTick>
 800d760:	4602      	mov	r2, r0
 800d762:	693b      	ldr	r3, [r7, #16]
 800d764:	1ad3      	subs	r3, r2, r3
 800d766:	2b64      	cmp	r3, #100	@ 0x64
 800d768:	d901      	bls.n	800d76e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800d76a:	2303      	movs	r3, #3
 800d76c:	e29e      	b.n	800dcac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800d76e:	4b6a      	ldr	r3, [pc, #424]	@ (800d918 <HAL_RCC_OscConfig+0x27c>)
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d776:	2b00      	cmp	r3, #0
 800d778:	d0f0      	beq.n	800d75c <HAL_RCC_OscConfig+0xc0>
 800d77a:	e014      	b.n	800d7a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d77c:	f7fd fc0e 	bl	800af9c <HAL_GetTick>
 800d780:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800d782:	e008      	b.n	800d796 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d784:	f7fd fc0a 	bl	800af9c <HAL_GetTick>
 800d788:	4602      	mov	r2, r0
 800d78a:	693b      	ldr	r3, [r7, #16]
 800d78c:	1ad3      	subs	r3, r2, r3
 800d78e:	2b64      	cmp	r3, #100	@ 0x64
 800d790:	d901      	bls.n	800d796 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800d792:	2303      	movs	r3, #3
 800d794:	e28a      	b.n	800dcac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800d796:	4b60      	ldr	r3, [pc, #384]	@ (800d918 <HAL_RCC_OscConfig+0x27c>)
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d1f0      	bne.n	800d784 <HAL_RCC_OscConfig+0xe8>
 800d7a2:	e000      	b.n	800d7a6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d7a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	f003 0302 	and.w	r3, r3, #2
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d075      	beq.n	800d89e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d7b2:	4b59      	ldr	r3, [pc, #356]	@ (800d918 <HAL_RCC_OscConfig+0x27c>)
 800d7b4:	689b      	ldr	r3, [r3, #8]
 800d7b6:	f003 030c 	and.w	r3, r3, #12
 800d7ba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800d7bc:	4b56      	ldr	r3, [pc, #344]	@ (800d918 <HAL_RCC_OscConfig+0x27c>)
 800d7be:	68db      	ldr	r3, [r3, #12]
 800d7c0:	f003 0303 	and.w	r3, r3, #3
 800d7c4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800d7c6:	69bb      	ldr	r3, [r7, #24]
 800d7c8:	2b0c      	cmp	r3, #12
 800d7ca:	d102      	bne.n	800d7d2 <HAL_RCC_OscConfig+0x136>
 800d7cc:	697b      	ldr	r3, [r7, #20]
 800d7ce:	2b02      	cmp	r3, #2
 800d7d0:	d002      	beq.n	800d7d8 <HAL_RCC_OscConfig+0x13c>
 800d7d2:	69bb      	ldr	r3, [r7, #24]
 800d7d4:	2b04      	cmp	r3, #4
 800d7d6:	d11f      	bne.n	800d818 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d7d8:	4b4f      	ldr	r3, [pc, #316]	@ (800d918 <HAL_RCC_OscConfig+0x27c>)
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d005      	beq.n	800d7f0 <HAL_RCC_OscConfig+0x154>
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	68db      	ldr	r3, [r3, #12]
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d101      	bne.n	800d7f0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800d7ec:	2301      	movs	r3, #1
 800d7ee:	e25d      	b.n	800dcac <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d7f0:	4b49      	ldr	r3, [pc, #292]	@ (800d918 <HAL_RCC_OscConfig+0x27c>)
 800d7f2:	685b      	ldr	r3, [r3, #4]
 800d7f4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	691b      	ldr	r3, [r3, #16]
 800d7fc:	061b      	lsls	r3, r3, #24
 800d7fe:	4946      	ldr	r1, [pc, #280]	@ (800d918 <HAL_RCC_OscConfig+0x27c>)
 800d800:	4313      	orrs	r3, r2
 800d802:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800d804:	4b45      	ldr	r3, [pc, #276]	@ (800d91c <HAL_RCC_OscConfig+0x280>)
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	4618      	mov	r0, r3
 800d80a:	f7fd fb7b 	bl	800af04 <HAL_InitTick>
 800d80e:	4603      	mov	r3, r0
 800d810:	2b00      	cmp	r3, #0
 800d812:	d043      	beq.n	800d89c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800d814:	2301      	movs	r3, #1
 800d816:	e249      	b.n	800dcac <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	68db      	ldr	r3, [r3, #12]
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d023      	beq.n	800d868 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800d820:	4b3d      	ldr	r3, [pc, #244]	@ (800d918 <HAL_RCC_OscConfig+0x27c>)
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	4a3c      	ldr	r2, [pc, #240]	@ (800d918 <HAL_RCC_OscConfig+0x27c>)
 800d826:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d82a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d82c:	f7fd fbb6 	bl	800af9c <HAL_GetTick>
 800d830:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800d832:	e008      	b.n	800d846 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d834:	f7fd fbb2 	bl	800af9c <HAL_GetTick>
 800d838:	4602      	mov	r2, r0
 800d83a:	693b      	ldr	r3, [r7, #16]
 800d83c:	1ad3      	subs	r3, r2, r3
 800d83e:	2b02      	cmp	r3, #2
 800d840:	d901      	bls.n	800d846 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800d842:	2303      	movs	r3, #3
 800d844:	e232      	b.n	800dcac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800d846:	4b34      	ldr	r3, [pc, #208]	@ (800d918 <HAL_RCC_OscConfig+0x27c>)
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d0f0      	beq.n	800d834 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d852:	4b31      	ldr	r3, [pc, #196]	@ (800d918 <HAL_RCC_OscConfig+0x27c>)
 800d854:	685b      	ldr	r3, [r3, #4]
 800d856:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	691b      	ldr	r3, [r3, #16]
 800d85e:	061b      	lsls	r3, r3, #24
 800d860:	492d      	ldr	r1, [pc, #180]	@ (800d918 <HAL_RCC_OscConfig+0x27c>)
 800d862:	4313      	orrs	r3, r2
 800d864:	604b      	str	r3, [r1, #4]
 800d866:	e01a      	b.n	800d89e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800d868:	4b2b      	ldr	r3, [pc, #172]	@ (800d918 <HAL_RCC_OscConfig+0x27c>)
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	4a2a      	ldr	r2, [pc, #168]	@ (800d918 <HAL_RCC_OscConfig+0x27c>)
 800d86e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d872:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d874:	f7fd fb92 	bl	800af9c <HAL_GetTick>
 800d878:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800d87a:	e008      	b.n	800d88e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d87c:	f7fd fb8e 	bl	800af9c <HAL_GetTick>
 800d880:	4602      	mov	r2, r0
 800d882:	693b      	ldr	r3, [r7, #16]
 800d884:	1ad3      	subs	r3, r2, r3
 800d886:	2b02      	cmp	r3, #2
 800d888:	d901      	bls.n	800d88e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800d88a:	2303      	movs	r3, #3
 800d88c:	e20e      	b.n	800dcac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800d88e:	4b22      	ldr	r3, [pc, #136]	@ (800d918 <HAL_RCC_OscConfig+0x27c>)
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d896:	2b00      	cmp	r3, #0
 800d898:	d1f0      	bne.n	800d87c <HAL_RCC_OscConfig+0x1e0>
 800d89a:	e000      	b.n	800d89e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d89c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	f003 0308 	and.w	r3, r3, #8
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d041      	beq.n	800d92e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	695b      	ldr	r3, [r3, #20]
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d01c      	beq.n	800d8ec <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800d8b2:	4b19      	ldr	r3, [pc, #100]	@ (800d918 <HAL_RCC_OscConfig+0x27c>)
 800d8b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d8b8:	4a17      	ldr	r2, [pc, #92]	@ (800d918 <HAL_RCC_OscConfig+0x27c>)
 800d8ba:	f043 0301 	orr.w	r3, r3, #1
 800d8be:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d8c2:	f7fd fb6b 	bl	800af9c <HAL_GetTick>
 800d8c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800d8c8:	e008      	b.n	800d8dc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d8ca:	f7fd fb67 	bl	800af9c <HAL_GetTick>
 800d8ce:	4602      	mov	r2, r0
 800d8d0:	693b      	ldr	r3, [r7, #16]
 800d8d2:	1ad3      	subs	r3, r2, r3
 800d8d4:	2b02      	cmp	r3, #2
 800d8d6:	d901      	bls.n	800d8dc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800d8d8:	2303      	movs	r3, #3
 800d8da:	e1e7      	b.n	800dcac <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800d8dc:	4b0e      	ldr	r3, [pc, #56]	@ (800d918 <HAL_RCC_OscConfig+0x27c>)
 800d8de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d8e2:	f003 0302 	and.w	r3, r3, #2
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d0ef      	beq.n	800d8ca <HAL_RCC_OscConfig+0x22e>
 800d8ea:	e020      	b.n	800d92e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800d8ec:	4b0a      	ldr	r3, [pc, #40]	@ (800d918 <HAL_RCC_OscConfig+0x27c>)
 800d8ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d8f2:	4a09      	ldr	r2, [pc, #36]	@ (800d918 <HAL_RCC_OscConfig+0x27c>)
 800d8f4:	f023 0301 	bic.w	r3, r3, #1
 800d8f8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d8fc:	f7fd fb4e 	bl	800af9c <HAL_GetTick>
 800d900:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800d902:	e00d      	b.n	800d920 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d904:	f7fd fb4a 	bl	800af9c <HAL_GetTick>
 800d908:	4602      	mov	r2, r0
 800d90a:	693b      	ldr	r3, [r7, #16]
 800d90c:	1ad3      	subs	r3, r2, r3
 800d90e:	2b02      	cmp	r3, #2
 800d910:	d906      	bls.n	800d920 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800d912:	2303      	movs	r3, #3
 800d914:	e1ca      	b.n	800dcac <HAL_RCC_OscConfig+0x610>
 800d916:	bf00      	nop
 800d918:	40021000 	.word	0x40021000
 800d91c:	200005c0 	.word	0x200005c0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800d920:	4b8c      	ldr	r3, [pc, #560]	@ (800db54 <HAL_RCC_OscConfig+0x4b8>)
 800d922:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d926:	f003 0302 	and.w	r3, r3, #2
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d1ea      	bne.n	800d904 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	f003 0304 	and.w	r3, r3, #4
 800d936:	2b00      	cmp	r3, #0
 800d938:	f000 80a6 	beq.w	800da88 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800d93c:	2300      	movs	r3, #0
 800d93e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800d940:	4b84      	ldr	r3, [pc, #528]	@ (800db54 <HAL_RCC_OscConfig+0x4b8>)
 800d942:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d944:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d101      	bne.n	800d950 <HAL_RCC_OscConfig+0x2b4>
 800d94c:	2301      	movs	r3, #1
 800d94e:	e000      	b.n	800d952 <HAL_RCC_OscConfig+0x2b6>
 800d950:	2300      	movs	r3, #0
 800d952:	2b00      	cmp	r3, #0
 800d954:	d00d      	beq.n	800d972 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d956:	4b7f      	ldr	r3, [pc, #508]	@ (800db54 <HAL_RCC_OscConfig+0x4b8>)
 800d958:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d95a:	4a7e      	ldr	r2, [pc, #504]	@ (800db54 <HAL_RCC_OscConfig+0x4b8>)
 800d95c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d960:	6593      	str	r3, [r2, #88]	@ 0x58
 800d962:	4b7c      	ldr	r3, [pc, #496]	@ (800db54 <HAL_RCC_OscConfig+0x4b8>)
 800d964:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d966:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d96a:	60fb      	str	r3, [r7, #12]
 800d96c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800d96e:	2301      	movs	r3, #1
 800d970:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d972:	4b79      	ldr	r3, [pc, #484]	@ (800db58 <HAL_RCC_OscConfig+0x4bc>)
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d118      	bne.n	800d9b0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800d97e:	4b76      	ldr	r3, [pc, #472]	@ (800db58 <HAL_RCC_OscConfig+0x4bc>)
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	4a75      	ldr	r2, [pc, #468]	@ (800db58 <HAL_RCC_OscConfig+0x4bc>)
 800d984:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d988:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800d98a:	f7fd fb07 	bl	800af9c <HAL_GetTick>
 800d98e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d990:	e008      	b.n	800d9a4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d992:	f7fd fb03 	bl	800af9c <HAL_GetTick>
 800d996:	4602      	mov	r2, r0
 800d998:	693b      	ldr	r3, [r7, #16]
 800d99a:	1ad3      	subs	r3, r2, r3
 800d99c:	2b02      	cmp	r3, #2
 800d99e:	d901      	bls.n	800d9a4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800d9a0:	2303      	movs	r3, #3
 800d9a2:	e183      	b.n	800dcac <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d9a4:	4b6c      	ldr	r3, [pc, #432]	@ (800db58 <HAL_RCC_OscConfig+0x4bc>)
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d0f0      	beq.n	800d992 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	689b      	ldr	r3, [r3, #8]
 800d9b4:	2b01      	cmp	r3, #1
 800d9b6:	d108      	bne.n	800d9ca <HAL_RCC_OscConfig+0x32e>
 800d9b8:	4b66      	ldr	r3, [pc, #408]	@ (800db54 <HAL_RCC_OscConfig+0x4b8>)
 800d9ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d9be:	4a65      	ldr	r2, [pc, #404]	@ (800db54 <HAL_RCC_OscConfig+0x4b8>)
 800d9c0:	f043 0301 	orr.w	r3, r3, #1
 800d9c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800d9c8:	e024      	b.n	800da14 <HAL_RCC_OscConfig+0x378>
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	689b      	ldr	r3, [r3, #8]
 800d9ce:	2b05      	cmp	r3, #5
 800d9d0:	d110      	bne.n	800d9f4 <HAL_RCC_OscConfig+0x358>
 800d9d2:	4b60      	ldr	r3, [pc, #384]	@ (800db54 <HAL_RCC_OscConfig+0x4b8>)
 800d9d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d9d8:	4a5e      	ldr	r2, [pc, #376]	@ (800db54 <HAL_RCC_OscConfig+0x4b8>)
 800d9da:	f043 0304 	orr.w	r3, r3, #4
 800d9de:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800d9e2:	4b5c      	ldr	r3, [pc, #368]	@ (800db54 <HAL_RCC_OscConfig+0x4b8>)
 800d9e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d9e8:	4a5a      	ldr	r2, [pc, #360]	@ (800db54 <HAL_RCC_OscConfig+0x4b8>)
 800d9ea:	f043 0301 	orr.w	r3, r3, #1
 800d9ee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800d9f2:	e00f      	b.n	800da14 <HAL_RCC_OscConfig+0x378>
 800d9f4:	4b57      	ldr	r3, [pc, #348]	@ (800db54 <HAL_RCC_OscConfig+0x4b8>)
 800d9f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d9fa:	4a56      	ldr	r2, [pc, #344]	@ (800db54 <HAL_RCC_OscConfig+0x4b8>)
 800d9fc:	f023 0301 	bic.w	r3, r3, #1
 800da00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800da04:	4b53      	ldr	r3, [pc, #332]	@ (800db54 <HAL_RCC_OscConfig+0x4b8>)
 800da06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800da0a:	4a52      	ldr	r2, [pc, #328]	@ (800db54 <HAL_RCC_OscConfig+0x4b8>)
 800da0c:	f023 0304 	bic.w	r3, r3, #4
 800da10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	689b      	ldr	r3, [r3, #8]
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d016      	beq.n	800da4a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800da1c:	f7fd fabe 	bl	800af9c <HAL_GetTick>
 800da20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800da22:	e00a      	b.n	800da3a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800da24:	f7fd faba 	bl	800af9c <HAL_GetTick>
 800da28:	4602      	mov	r2, r0
 800da2a:	693b      	ldr	r3, [r7, #16]
 800da2c:	1ad3      	subs	r3, r2, r3
 800da2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800da32:	4293      	cmp	r3, r2
 800da34:	d901      	bls.n	800da3a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800da36:	2303      	movs	r3, #3
 800da38:	e138      	b.n	800dcac <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800da3a:	4b46      	ldr	r3, [pc, #280]	@ (800db54 <HAL_RCC_OscConfig+0x4b8>)
 800da3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800da40:	f003 0302 	and.w	r3, r3, #2
 800da44:	2b00      	cmp	r3, #0
 800da46:	d0ed      	beq.n	800da24 <HAL_RCC_OscConfig+0x388>
 800da48:	e015      	b.n	800da76 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800da4a:	f7fd faa7 	bl	800af9c <HAL_GetTick>
 800da4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800da50:	e00a      	b.n	800da68 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800da52:	f7fd faa3 	bl	800af9c <HAL_GetTick>
 800da56:	4602      	mov	r2, r0
 800da58:	693b      	ldr	r3, [r7, #16]
 800da5a:	1ad3      	subs	r3, r2, r3
 800da5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800da60:	4293      	cmp	r3, r2
 800da62:	d901      	bls.n	800da68 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800da64:	2303      	movs	r3, #3
 800da66:	e121      	b.n	800dcac <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800da68:	4b3a      	ldr	r3, [pc, #232]	@ (800db54 <HAL_RCC_OscConfig+0x4b8>)
 800da6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800da6e:	f003 0302 	and.w	r3, r3, #2
 800da72:	2b00      	cmp	r3, #0
 800da74:	d1ed      	bne.n	800da52 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800da76:	7ffb      	ldrb	r3, [r7, #31]
 800da78:	2b01      	cmp	r3, #1
 800da7a:	d105      	bne.n	800da88 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800da7c:	4b35      	ldr	r3, [pc, #212]	@ (800db54 <HAL_RCC_OscConfig+0x4b8>)
 800da7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800da80:	4a34      	ldr	r2, [pc, #208]	@ (800db54 <HAL_RCC_OscConfig+0x4b8>)
 800da82:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800da86:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	f003 0320 	and.w	r3, r3, #32
 800da90:	2b00      	cmp	r3, #0
 800da92:	d03c      	beq.n	800db0e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	699b      	ldr	r3, [r3, #24]
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d01c      	beq.n	800dad6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800da9c:	4b2d      	ldr	r3, [pc, #180]	@ (800db54 <HAL_RCC_OscConfig+0x4b8>)
 800da9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800daa2:	4a2c      	ldr	r2, [pc, #176]	@ (800db54 <HAL_RCC_OscConfig+0x4b8>)
 800daa4:	f043 0301 	orr.w	r3, r3, #1
 800daa8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800daac:	f7fd fa76 	bl	800af9c <HAL_GetTick>
 800dab0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800dab2:	e008      	b.n	800dac6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800dab4:	f7fd fa72 	bl	800af9c <HAL_GetTick>
 800dab8:	4602      	mov	r2, r0
 800daba:	693b      	ldr	r3, [r7, #16]
 800dabc:	1ad3      	subs	r3, r2, r3
 800dabe:	2b02      	cmp	r3, #2
 800dac0:	d901      	bls.n	800dac6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800dac2:	2303      	movs	r3, #3
 800dac4:	e0f2      	b.n	800dcac <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800dac6:	4b23      	ldr	r3, [pc, #140]	@ (800db54 <HAL_RCC_OscConfig+0x4b8>)
 800dac8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800dacc:	f003 0302 	and.w	r3, r3, #2
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d0ef      	beq.n	800dab4 <HAL_RCC_OscConfig+0x418>
 800dad4:	e01b      	b.n	800db0e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800dad6:	4b1f      	ldr	r3, [pc, #124]	@ (800db54 <HAL_RCC_OscConfig+0x4b8>)
 800dad8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800dadc:	4a1d      	ldr	r2, [pc, #116]	@ (800db54 <HAL_RCC_OscConfig+0x4b8>)
 800dade:	f023 0301 	bic.w	r3, r3, #1
 800dae2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800dae6:	f7fd fa59 	bl	800af9c <HAL_GetTick>
 800daea:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800daec:	e008      	b.n	800db00 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800daee:	f7fd fa55 	bl	800af9c <HAL_GetTick>
 800daf2:	4602      	mov	r2, r0
 800daf4:	693b      	ldr	r3, [r7, #16]
 800daf6:	1ad3      	subs	r3, r2, r3
 800daf8:	2b02      	cmp	r3, #2
 800dafa:	d901      	bls.n	800db00 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800dafc:	2303      	movs	r3, #3
 800dafe:	e0d5      	b.n	800dcac <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800db00:	4b14      	ldr	r3, [pc, #80]	@ (800db54 <HAL_RCC_OscConfig+0x4b8>)
 800db02:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800db06:	f003 0302 	and.w	r3, r3, #2
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d1ef      	bne.n	800daee <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	69db      	ldr	r3, [r3, #28]
 800db12:	2b00      	cmp	r3, #0
 800db14:	f000 80c9 	beq.w	800dcaa <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800db18:	4b0e      	ldr	r3, [pc, #56]	@ (800db54 <HAL_RCC_OscConfig+0x4b8>)
 800db1a:	689b      	ldr	r3, [r3, #8]
 800db1c:	f003 030c 	and.w	r3, r3, #12
 800db20:	2b0c      	cmp	r3, #12
 800db22:	f000 8083 	beq.w	800dc2c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	69db      	ldr	r3, [r3, #28]
 800db2a:	2b02      	cmp	r3, #2
 800db2c:	d15e      	bne.n	800dbec <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800db2e:	4b09      	ldr	r3, [pc, #36]	@ (800db54 <HAL_RCC_OscConfig+0x4b8>)
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	4a08      	ldr	r2, [pc, #32]	@ (800db54 <HAL_RCC_OscConfig+0x4b8>)
 800db34:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800db38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800db3a:	f7fd fa2f 	bl	800af9c <HAL_GetTick>
 800db3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800db40:	e00c      	b.n	800db5c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800db42:	f7fd fa2b 	bl	800af9c <HAL_GetTick>
 800db46:	4602      	mov	r2, r0
 800db48:	693b      	ldr	r3, [r7, #16]
 800db4a:	1ad3      	subs	r3, r2, r3
 800db4c:	2b02      	cmp	r3, #2
 800db4e:	d905      	bls.n	800db5c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800db50:	2303      	movs	r3, #3
 800db52:	e0ab      	b.n	800dcac <HAL_RCC_OscConfig+0x610>
 800db54:	40021000 	.word	0x40021000
 800db58:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800db5c:	4b55      	ldr	r3, [pc, #340]	@ (800dcb4 <HAL_RCC_OscConfig+0x618>)
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800db64:	2b00      	cmp	r3, #0
 800db66:	d1ec      	bne.n	800db42 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800db68:	4b52      	ldr	r3, [pc, #328]	@ (800dcb4 <HAL_RCC_OscConfig+0x618>)
 800db6a:	68da      	ldr	r2, [r3, #12]
 800db6c:	4b52      	ldr	r3, [pc, #328]	@ (800dcb8 <HAL_RCC_OscConfig+0x61c>)
 800db6e:	4013      	ands	r3, r2
 800db70:	687a      	ldr	r2, [r7, #4]
 800db72:	6a11      	ldr	r1, [r2, #32]
 800db74:	687a      	ldr	r2, [r7, #4]
 800db76:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800db78:	3a01      	subs	r2, #1
 800db7a:	0112      	lsls	r2, r2, #4
 800db7c:	4311      	orrs	r1, r2
 800db7e:	687a      	ldr	r2, [r7, #4]
 800db80:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800db82:	0212      	lsls	r2, r2, #8
 800db84:	4311      	orrs	r1, r2
 800db86:	687a      	ldr	r2, [r7, #4]
 800db88:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800db8a:	0852      	lsrs	r2, r2, #1
 800db8c:	3a01      	subs	r2, #1
 800db8e:	0552      	lsls	r2, r2, #21
 800db90:	4311      	orrs	r1, r2
 800db92:	687a      	ldr	r2, [r7, #4]
 800db94:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800db96:	0852      	lsrs	r2, r2, #1
 800db98:	3a01      	subs	r2, #1
 800db9a:	0652      	lsls	r2, r2, #25
 800db9c:	4311      	orrs	r1, r2
 800db9e:	687a      	ldr	r2, [r7, #4]
 800dba0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800dba2:	06d2      	lsls	r2, r2, #27
 800dba4:	430a      	orrs	r2, r1
 800dba6:	4943      	ldr	r1, [pc, #268]	@ (800dcb4 <HAL_RCC_OscConfig+0x618>)
 800dba8:	4313      	orrs	r3, r2
 800dbaa:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800dbac:	4b41      	ldr	r3, [pc, #260]	@ (800dcb4 <HAL_RCC_OscConfig+0x618>)
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	4a40      	ldr	r2, [pc, #256]	@ (800dcb4 <HAL_RCC_OscConfig+0x618>)
 800dbb2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800dbb6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800dbb8:	4b3e      	ldr	r3, [pc, #248]	@ (800dcb4 <HAL_RCC_OscConfig+0x618>)
 800dbba:	68db      	ldr	r3, [r3, #12]
 800dbbc:	4a3d      	ldr	r2, [pc, #244]	@ (800dcb4 <HAL_RCC_OscConfig+0x618>)
 800dbbe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800dbc2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dbc4:	f7fd f9ea 	bl	800af9c <HAL_GetTick>
 800dbc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800dbca:	e008      	b.n	800dbde <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800dbcc:	f7fd f9e6 	bl	800af9c <HAL_GetTick>
 800dbd0:	4602      	mov	r2, r0
 800dbd2:	693b      	ldr	r3, [r7, #16]
 800dbd4:	1ad3      	subs	r3, r2, r3
 800dbd6:	2b02      	cmp	r3, #2
 800dbd8:	d901      	bls.n	800dbde <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800dbda:	2303      	movs	r3, #3
 800dbdc:	e066      	b.n	800dcac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800dbde:	4b35      	ldr	r3, [pc, #212]	@ (800dcb4 <HAL_RCC_OscConfig+0x618>)
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d0f0      	beq.n	800dbcc <HAL_RCC_OscConfig+0x530>
 800dbea:	e05e      	b.n	800dcaa <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800dbec:	4b31      	ldr	r3, [pc, #196]	@ (800dcb4 <HAL_RCC_OscConfig+0x618>)
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	4a30      	ldr	r2, [pc, #192]	@ (800dcb4 <HAL_RCC_OscConfig+0x618>)
 800dbf2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800dbf6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dbf8:	f7fd f9d0 	bl	800af9c <HAL_GetTick>
 800dbfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800dbfe:	e008      	b.n	800dc12 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800dc00:	f7fd f9cc 	bl	800af9c <HAL_GetTick>
 800dc04:	4602      	mov	r2, r0
 800dc06:	693b      	ldr	r3, [r7, #16]
 800dc08:	1ad3      	subs	r3, r2, r3
 800dc0a:	2b02      	cmp	r3, #2
 800dc0c:	d901      	bls.n	800dc12 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800dc0e:	2303      	movs	r3, #3
 800dc10:	e04c      	b.n	800dcac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800dc12:	4b28      	ldr	r3, [pc, #160]	@ (800dcb4 <HAL_RCC_OscConfig+0x618>)
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d1f0      	bne.n	800dc00 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800dc1e:	4b25      	ldr	r3, [pc, #148]	@ (800dcb4 <HAL_RCC_OscConfig+0x618>)
 800dc20:	68da      	ldr	r2, [r3, #12]
 800dc22:	4924      	ldr	r1, [pc, #144]	@ (800dcb4 <HAL_RCC_OscConfig+0x618>)
 800dc24:	4b25      	ldr	r3, [pc, #148]	@ (800dcbc <HAL_RCC_OscConfig+0x620>)
 800dc26:	4013      	ands	r3, r2
 800dc28:	60cb      	str	r3, [r1, #12]
 800dc2a:	e03e      	b.n	800dcaa <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	69db      	ldr	r3, [r3, #28]
 800dc30:	2b01      	cmp	r3, #1
 800dc32:	d101      	bne.n	800dc38 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800dc34:	2301      	movs	r3, #1
 800dc36:	e039      	b.n	800dcac <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800dc38:	4b1e      	ldr	r3, [pc, #120]	@ (800dcb4 <HAL_RCC_OscConfig+0x618>)
 800dc3a:	68db      	ldr	r3, [r3, #12]
 800dc3c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800dc3e:	697b      	ldr	r3, [r7, #20]
 800dc40:	f003 0203 	and.w	r2, r3, #3
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	6a1b      	ldr	r3, [r3, #32]
 800dc48:	429a      	cmp	r2, r3
 800dc4a:	d12c      	bne.n	800dca6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800dc4c:	697b      	ldr	r3, [r7, #20]
 800dc4e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc56:	3b01      	subs	r3, #1
 800dc58:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800dc5a:	429a      	cmp	r2, r3
 800dc5c:	d123      	bne.n	800dca6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800dc5e:	697b      	ldr	r3, [r7, #20]
 800dc60:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc68:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800dc6a:	429a      	cmp	r2, r3
 800dc6c:	d11b      	bne.n	800dca6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800dc6e:	697b      	ldr	r3, [r7, #20]
 800dc70:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc78:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800dc7a:	429a      	cmp	r2, r3
 800dc7c:	d113      	bne.n	800dca6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800dc7e:	697b      	ldr	r3, [r7, #20]
 800dc80:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dc88:	085b      	lsrs	r3, r3, #1
 800dc8a:	3b01      	subs	r3, #1
 800dc8c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800dc8e:	429a      	cmp	r2, r3
 800dc90:	d109      	bne.n	800dca6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800dc92:	697b      	ldr	r3, [r7, #20]
 800dc94:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dc9c:	085b      	lsrs	r3, r3, #1
 800dc9e:	3b01      	subs	r3, #1
 800dca0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800dca2:	429a      	cmp	r2, r3
 800dca4:	d001      	beq.n	800dcaa <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800dca6:	2301      	movs	r3, #1
 800dca8:	e000      	b.n	800dcac <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800dcaa:	2300      	movs	r3, #0
}
 800dcac:	4618      	mov	r0, r3
 800dcae:	3720      	adds	r7, #32
 800dcb0:	46bd      	mov	sp, r7
 800dcb2:	bd80      	pop	{r7, pc}
 800dcb4:	40021000 	.word	0x40021000
 800dcb8:	019f800c 	.word	0x019f800c
 800dcbc:	feeefffc 	.word	0xfeeefffc

0800dcc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800dcc0:	b580      	push	{r7, lr}
 800dcc2:	b086      	sub	sp, #24
 800dcc4:	af00      	add	r7, sp, #0
 800dcc6:	6078      	str	r0, [r7, #4]
 800dcc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800dcca:	2300      	movs	r3, #0
 800dccc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d101      	bne.n	800dcd8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800dcd4:	2301      	movs	r3, #1
 800dcd6:	e11e      	b.n	800df16 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800dcd8:	4b91      	ldr	r3, [pc, #580]	@ (800df20 <HAL_RCC_ClockConfig+0x260>)
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	f003 030f 	and.w	r3, r3, #15
 800dce0:	683a      	ldr	r2, [r7, #0]
 800dce2:	429a      	cmp	r2, r3
 800dce4:	d910      	bls.n	800dd08 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800dce6:	4b8e      	ldr	r3, [pc, #568]	@ (800df20 <HAL_RCC_ClockConfig+0x260>)
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	f023 020f 	bic.w	r2, r3, #15
 800dcee:	498c      	ldr	r1, [pc, #560]	@ (800df20 <HAL_RCC_ClockConfig+0x260>)
 800dcf0:	683b      	ldr	r3, [r7, #0]
 800dcf2:	4313      	orrs	r3, r2
 800dcf4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800dcf6:	4b8a      	ldr	r3, [pc, #552]	@ (800df20 <HAL_RCC_ClockConfig+0x260>)
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	f003 030f 	and.w	r3, r3, #15
 800dcfe:	683a      	ldr	r2, [r7, #0]
 800dd00:	429a      	cmp	r2, r3
 800dd02:	d001      	beq.n	800dd08 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800dd04:	2301      	movs	r3, #1
 800dd06:	e106      	b.n	800df16 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	f003 0301 	and.w	r3, r3, #1
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d073      	beq.n	800ddfc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	685b      	ldr	r3, [r3, #4]
 800dd18:	2b03      	cmp	r3, #3
 800dd1a:	d129      	bne.n	800dd70 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800dd1c:	4b81      	ldr	r3, [pc, #516]	@ (800df24 <HAL_RCC_ClockConfig+0x264>)
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d101      	bne.n	800dd2c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800dd28:	2301      	movs	r3, #1
 800dd2a:	e0f4      	b.n	800df16 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800dd2c:	f000 f99e 	bl	800e06c <RCC_GetSysClockFreqFromPLLSource>
 800dd30:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800dd32:	693b      	ldr	r3, [r7, #16]
 800dd34:	4a7c      	ldr	r2, [pc, #496]	@ (800df28 <HAL_RCC_ClockConfig+0x268>)
 800dd36:	4293      	cmp	r3, r2
 800dd38:	d93f      	bls.n	800ddba <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800dd3a:	4b7a      	ldr	r3, [pc, #488]	@ (800df24 <HAL_RCC_ClockConfig+0x264>)
 800dd3c:	689b      	ldr	r3, [r3, #8]
 800dd3e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d009      	beq.n	800dd5a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d033      	beq.n	800ddba <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d12f      	bne.n	800ddba <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800dd5a:	4b72      	ldr	r3, [pc, #456]	@ (800df24 <HAL_RCC_ClockConfig+0x264>)
 800dd5c:	689b      	ldr	r3, [r3, #8]
 800dd5e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800dd62:	4a70      	ldr	r2, [pc, #448]	@ (800df24 <HAL_RCC_ClockConfig+0x264>)
 800dd64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dd68:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800dd6a:	2380      	movs	r3, #128	@ 0x80
 800dd6c:	617b      	str	r3, [r7, #20]
 800dd6e:	e024      	b.n	800ddba <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	685b      	ldr	r3, [r3, #4]
 800dd74:	2b02      	cmp	r3, #2
 800dd76:	d107      	bne.n	800dd88 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800dd78:	4b6a      	ldr	r3, [pc, #424]	@ (800df24 <HAL_RCC_ClockConfig+0x264>)
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d109      	bne.n	800dd98 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800dd84:	2301      	movs	r3, #1
 800dd86:	e0c6      	b.n	800df16 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800dd88:	4b66      	ldr	r3, [pc, #408]	@ (800df24 <HAL_RCC_ClockConfig+0x264>)
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d101      	bne.n	800dd98 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800dd94:	2301      	movs	r3, #1
 800dd96:	e0be      	b.n	800df16 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800dd98:	f000 f8ce 	bl	800df38 <HAL_RCC_GetSysClockFreq>
 800dd9c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800dd9e:	693b      	ldr	r3, [r7, #16]
 800dda0:	4a61      	ldr	r2, [pc, #388]	@ (800df28 <HAL_RCC_ClockConfig+0x268>)
 800dda2:	4293      	cmp	r3, r2
 800dda4:	d909      	bls.n	800ddba <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800dda6:	4b5f      	ldr	r3, [pc, #380]	@ (800df24 <HAL_RCC_ClockConfig+0x264>)
 800dda8:	689b      	ldr	r3, [r3, #8]
 800ddaa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ddae:	4a5d      	ldr	r2, [pc, #372]	@ (800df24 <HAL_RCC_ClockConfig+0x264>)
 800ddb0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ddb4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800ddb6:	2380      	movs	r3, #128	@ 0x80
 800ddb8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800ddba:	4b5a      	ldr	r3, [pc, #360]	@ (800df24 <HAL_RCC_ClockConfig+0x264>)
 800ddbc:	689b      	ldr	r3, [r3, #8]
 800ddbe:	f023 0203 	bic.w	r2, r3, #3
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	685b      	ldr	r3, [r3, #4]
 800ddc6:	4957      	ldr	r1, [pc, #348]	@ (800df24 <HAL_RCC_ClockConfig+0x264>)
 800ddc8:	4313      	orrs	r3, r2
 800ddca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ddcc:	f7fd f8e6 	bl	800af9c <HAL_GetTick>
 800ddd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ddd2:	e00a      	b.n	800ddea <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ddd4:	f7fd f8e2 	bl	800af9c <HAL_GetTick>
 800ddd8:	4602      	mov	r2, r0
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	1ad3      	subs	r3, r2, r3
 800ddde:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dde2:	4293      	cmp	r3, r2
 800dde4:	d901      	bls.n	800ddea <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800dde6:	2303      	movs	r3, #3
 800dde8:	e095      	b.n	800df16 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ddea:	4b4e      	ldr	r3, [pc, #312]	@ (800df24 <HAL_RCC_ClockConfig+0x264>)
 800ddec:	689b      	ldr	r3, [r3, #8]
 800ddee:	f003 020c 	and.w	r2, r3, #12
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	685b      	ldr	r3, [r3, #4]
 800ddf6:	009b      	lsls	r3, r3, #2
 800ddf8:	429a      	cmp	r2, r3
 800ddfa:	d1eb      	bne.n	800ddd4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	f003 0302 	and.w	r3, r3, #2
 800de04:	2b00      	cmp	r3, #0
 800de06:	d023      	beq.n	800de50 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	f003 0304 	and.w	r3, r3, #4
 800de10:	2b00      	cmp	r3, #0
 800de12:	d005      	beq.n	800de20 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800de14:	4b43      	ldr	r3, [pc, #268]	@ (800df24 <HAL_RCC_ClockConfig+0x264>)
 800de16:	689b      	ldr	r3, [r3, #8]
 800de18:	4a42      	ldr	r2, [pc, #264]	@ (800df24 <HAL_RCC_ClockConfig+0x264>)
 800de1a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800de1e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	f003 0308 	and.w	r3, r3, #8
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d007      	beq.n	800de3c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800de2c:	4b3d      	ldr	r3, [pc, #244]	@ (800df24 <HAL_RCC_ClockConfig+0x264>)
 800de2e:	689b      	ldr	r3, [r3, #8]
 800de30:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800de34:	4a3b      	ldr	r2, [pc, #236]	@ (800df24 <HAL_RCC_ClockConfig+0x264>)
 800de36:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800de3a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800de3c:	4b39      	ldr	r3, [pc, #228]	@ (800df24 <HAL_RCC_ClockConfig+0x264>)
 800de3e:	689b      	ldr	r3, [r3, #8]
 800de40:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	689b      	ldr	r3, [r3, #8]
 800de48:	4936      	ldr	r1, [pc, #216]	@ (800df24 <HAL_RCC_ClockConfig+0x264>)
 800de4a:	4313      	orrs	r3, r2
 800de4c:	608b      	str	r3, [r1, #8]
 800de4e:	e008      	b.n	800de62 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800de50:	697b      	ldr	r3, [r7, #20]
 800de52:	2b80      	cmp	r3, #128	@ 0x80
 800de54:	d105      	bne.n	800de62 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800de56:	4b33      	ldr	r3, [pc, #204]	@ (800df24 <HAL_RCC_ClockConfig+0x264>)
 800de58:	689b      	ldr	r3, [r3, #8]
 800de5a:	4a32      	ldr	r2, [pc, #200]	@ (800df24 <HAL_RCC_ClockConfig+0x264>)
 800de5c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800de60:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800de62:	4b2f      	ldr	r3, [pc, #188]	@ (800df20 <HAL_RCC_ClockConfig+0x260>)
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	f003 030f 	and.w	r3, r3, #15
 800de6a:	683a      	ldr	r2, [r7, #0]
 800de6c:	429a      	cmp	r2, r3
 800de6e:	d21d      	bcs.n	800deac <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800de70:	4b2b      	ldr	r3, [pc, #172]	@ (800df20 <HAL_RCC_ClockConfig+0x260>)
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	f023 020f 	bic.w	r2, r3, #15
 800de78:	4929      	ldr	r1, [pc, #164]	@ (800df20 <HAL_RCC_ClockConfig+0x260>)
 800de7a:	683b      	ldr	r3, [r7, #0]
 800de7c:	4313      	orrs	r3, r2
 800de7e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800de80:	f7fd f88c 	bl	800af9c <HAL_GetTick>
 800de84:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800de86:	e00a      	b.n	800de9e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800de88:	f7fd f888 	bl	800af9c <HAL_GetTick>
 800de8c:	4602      	mov	r2, r0
 800de8e:	68fb      	ldr	r3, [r7, #12]
 800de90:	1ad3      	subs	r3, r2, r3
 800de92:	f241 3288 	movw	r2, #5000	@ 0x1388
 800de96:	4293      	cmp	r3, r2
 800de98:	d901      	bls.n	800de9e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800de9a:	2303      	movs	r3, #3
 800de9c:	e03b      	b.n	800df16 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800de9e:	4b20      	ldr	r3, [pc, #128]	@ (800df20 <HAL_RCC_ClockConfig+0x260>)
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	f003 030f 	and.w	r3, r3, #15
 800dea6:	683a      	ldr	r2, [r7, #0]
 800dea8:	429a      	cmp	r2, r3
 800deaa:	d1ed      	bne.n	800de88 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	f003 0304 	and.w	r3, r3, #4
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d008      	beq.n	800deca <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800deb8:	4b1a      	ldr	r3, [pc, #104]	@ (800df24 <HAL_RCC_ClockConfig+0x264>)
 800deba:	689b      	ldr	r3, [r3, #8]
 800debc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	68db      	ldr	r3, [r3, #12]
 800dec4:	4917      	ldr	r1, [pc, #92]	@ (800df24 <HAL_RCC_ClockConfig+0x264>)
 800dec6:	4313      	orrs	r3, r2
 800dec8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	f003 0308 	and.w	r3, r3, #8
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d009      	beq.n	800deea <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800ded6:	4b13      	ldr	r3, [pc, #76]	@ (800df24 <HAL_RCC_ClockConfig+0x264>)
 800ded8:	689b      	ldr	r3, [r3, #8]
 800deda:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	691b      	ldr	r3, [r3, #16]
 800dee2:	00db      	lsls	r3, r3, #3
 800dee4:	490f      	ldr	r1, [pc, #60]	@ (800df24 <HAL_RCC_ClockConfig+0x264>)
 800dee6:	4313      	orrs	r3, r2
 800dee8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800deea:	f000 f825 	bl	800df38 <HAL_RCC_GetSysClockFreq>
 800deee:	4602      	mov	r2, r0
 800def0:	4b0c      	ldr	r3, [pc, #48]	@ (800df24 <HAL_RCC_ClockConfig+0x264>)
 800def2:	689b      	ldr	r3, [r3, #8]
 800def4:	091b      	lsrs	r3, r3, #4
 800def6:	f003 030f 	and.w	r3, r3, #15
 800defa:	490c      	ldr	r1, [pc, #48]	@ (800df2c <HAL_RCC_ClockConfig+0x26c>)
 800defc:	5ccb      	ldrb	r3, [r1, r3]
 800defe:	f003 031f 	and.w	r3, r3, #31
 800df02:	fa22 f303 	lsr.w	r3, r2, r3
 800df06:	4a0a      	ldr	r2, [pc, #40]	@ (800df30 <HAL_RCC_ClockConfig+0x270>)
 800df08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800df0a:	4b0a      	ldr	r3, [pc, #40]	@ (800df34 <HAL_RCC_ClockConfig+0x274>)
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	4618      	mov	r0, r3
 800df10:	f7fc fff8 	bl	800af04 <HAL_InitTick>
 800df14:	4603      	mov	r3, r0
}
 800df16:	4618      	mov	r0, r3
 800df18:	3718      	adds	r7, #24
 800df1a:	46bd      	mov	sp, r7
 800df1c:	bd80      	pop	{r7, pc}
 800df1e:	bf00      	nop
 800df20:	40022000 	.word	0x40022000
 800df24:	40021000 	.word	0x40021000
 800df28:	04c4b400 	.word	0x04c4b400
 800df2c:	08015008 	.word	0x08015008
 800df30:	200005bc 	.word	0x200005bc
 800df34:	200005c0 	.word	0x200005c0

0800df38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800df38:	b480      	push	{r7}
 800df3a:	b087      	sub	sp, #28
 800df3c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800df3e:	4b2c      	ldr	r3, [pc, #176]	@ (800dff0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800df40:	689b      	ldr	r3, [r3, #8]
 800df42:	f003 030c 	and.w	r3, r3, #12
 800df46:	2b04      	cmp	r3, #4
 800df48:	d102      	bne.n	800df50 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800df4a:	4b2a      	ldr	r3, [pc, #168]	@ (800dff4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800df4c:	613b      	str	r3, [r7, #16]
 800df4e:	e047      	b.n	800dfe0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800df50:	4b27      	ldr	r3, [pc, #156]	@ (800dff0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800df52:	689b      	ldr	r3, [r3, #8]
 800df54:	f003 030c 	and.w	r3, r3, #12
 800df58:	2b08      	cmp	r3, #8
 800df5a:	d102      	bne.n	800df62 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800df5c:	4b26      	ldr	r3, [pc, #152]	@ (800dff8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800df5e:	613b      	str	r3, [r7, #16]
 800df60:	e03e      	b.n	800dfe0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800df62:	4b23      	ldr	r3, [pc, #140]	@ (800dff0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800df64:	689b      	ldr	r3, [r3, #8]
 800df66:	f003 030c 	and.w	r3, r3, #12
 800df6a:	2b0c      	cmp	r3, #12
 800df6c:	d136      	bne.n	800dfdc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800df6e:	4b20      	ldr	r3, [pc, #128]	@ (800dff0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800df70:	68db      	ldr	r3, [r3, #12]
 800df72:	f003 0303 	and.w	r3, r3, #3
 800df76:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800df78:	4b1d      	ldr	r3, [pc, #116]	@ (800dff0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800df7a:	68db      	ldr	r3, [r3, #12]
 800df7c:	091b      	lsrs	r3, r3, #4
 800df7e:	f003 030f 	and.w	r3, r3, #15
 800df82:	3301      	adds	r3, #1
 800df84:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	2b03      	cmp	r3, #3
 800df8a:	d10c      	bne.n	800dfa6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800df8c:	4a1a      	ldr	r2, [pc, #104]	@ (800dff8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800df8e:	68bb      	ldr	r3, [r7, #8]
 800df90:	fbb2 f3f3 	udiv	r3, r2, r3
 800df94:	4a16      	ldr	r2, [pc, #88]	@ (800dff0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800df96:	68d2      	ldr	r2, [r2, #12]
 800df98:	0a12      	lsrs	r2, r2, #8
 800df9a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800df9e:	fb02 f303 	mul.w	r3, r2, r3
 800dfa2:	617b      	str	r3, [r7, #20]
      break;
 800dfa4:	e00c      	b.n	800dfc0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800dfa6:	4a13      	ldr	r2, [pc, #76]	@ (800dff4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800dfa8:	68bb      	ldr	r3, [r7, #8]
 800dfaa:	fbb2 f3f3 	udiv	r3, r2, r3
 800dfae:	4a10      	ldr	r2, [pc, #64]	@ (800dff0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800dfb0:	68d2      	ldr	r2, [r2, #12]
 800dfb2:	0a12      	lsrs	r2, r2, #8
 800dfb4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800dfb8:	fb02 f303 	mul.w	r3, r2, r3
 800dfbc:	617b      	str	r3, [r7, #20]
      break;
 800dfbe:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800dfc0:	4b0b      	ldr	r3, [pc, #44]	@ (800dff0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800dfc2:	68db      	ldr	r3, [r3, #12]
 800dfc4:	0e5b      	lsrs	r3, r3, #25
 800dfc6:	f003 0303 	and.w	r3, r3, #3
 800dfca:	3301      	adds	r3, #1
 800dfcc:	005b      	lsls	r3, r3, #1
 800dfce:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800dfd0:	697a      	ldr	r2, [r7, #20]
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	fbb2 f3f3 	udiv	r3, r2, r3
 800dfd8:	613b      	str	r3, [r7, #16]
 800dfda:	e001      	b.n	800dfe0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800dfdc:	2300      	movs	r3, #0
 800dfde:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800dfe0:	693b      	ldr	r3, [r7, #16]
}
 800dfe2:	4618      	mov	r0, r3
 800dfe4:	371c      	adds	r7, #28
 800dfe6:	46bd      	mov	sp, r7
 800dfe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfec:	4770      	bx	lr
 800dfee:	bf00      	nop
 800dff0:	40021000 	.word	0x40021000
 800dff4:	00f42400 	.word	0x00f42400
 800dff8:	016e3600 	.word	0x016e3600

0800dffc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800dffc:	b480      	push	{r7}
 800dffe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800e000:	4b03      	ldr	r3, [pc, #12]	@ (800e010 <HAL_RCC_GetHCLKFreq+0x14>)
 800e002:	681b      	ldr	r3, [r3, #0]
}
 800e004:	4618      	mov	r0, r3
 800e006:	46bd      	mov	sp, r7
 800e008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e00c:	4770      	bx	lr
 800e00e:	bf00      	nop
 800e010:	200005bc 	.word	0x200005bc

0800e014 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800e014:	b580      	push	{r7, lr}
 800e016:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800e018:	f7ff fff0 	bl	800dffc <HAL_RCC_GetHCLKFreq>
 800e01c:	4602      	mov	r2, r0
 800e01e:	4b06      	ldr	r3, [pc, #24]	@ (800e038 <HAL_RCC_GetPCLK1Freq+0x24>)
 800e020:	689b      	ldr	r3, [r3, #8]
 800e022:	0a1b      	lsrs	r3, r3, #8
 800e024:	f003 0307 	and.w	r3, r3, #7
 800e028:	4904      	ldr	r1, [pc, #16]	@ (800e03c <HAL_RCC_GetPCLK1Freq+0x28>)
 800e02a:	5ccb      	ldrb	r3, [r1, r3]
 800e02c:	f003 031f 	and.w	r3, r3, #31
 800e030:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e034:	4618      	mov	r0, r3
 800e036:	bd80      	pop	{r7, pc}
 800e038:	40021000 	.word	0x40021000
 800e03c:	08015018 	.word	0x08015018

0800e040 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800e040:	b580      	push	{r7, lr}
 800e042:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800e044:	f7ff ffda 	bl	800dffc <HAL_RCC_GetHCLKFreq>
 800e048:	4602      	mov	r2, r0
 800e04a:	4b06      	ldr	r3, [pc, #24]	@ (800e064 <HAL_RCC_GetPCLK2Freq+0x24>)
 800e04c:	689b      	ldr	r3, [r3, #8]
 800e04e:	0adb      	lsrs	r3, r3, #11
 800e050:	f003 0307 	and.w	r3, r3, #7
 800e054:	4904      	ldr	r1, [pc, #16]	@ (800e068 <HAL_RCC_GetPCLK2Freq+0x28>)
 800e056:	5ccb      	ldrb	r3, [r1, r3]
 800e058:	f003 031f 	and.w	r3, r3, #31
 800e05c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e060:	4618      	mov	r0, r3
 800e062:	bd80      	pop	{r7, pc}
 800e064:	40021000 	.word	0x40021000
 800e068:	08015018 	.word	0x08015018

0800e06c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800e06c:	b480      	push	{r7}
 800e06e:	b087      	sub	sp, #28
 800e070:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800e072:	4b1e      	ldr	r3, [pc, #120]	@ (800e0ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800e074:	68db      	ldr	r3, [r3, #12]
 800e076:	f003 0303 	and.w	r3, r3, #3
 800e07a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800e07c:	4b1b      	ldr	r3, [pc, #108]	@ (800e0ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800e07e:	68db      	ldr	r3, [r3, #12]
 800e080:	091b      	lsrs	r3, r3, #4
 800e082:	f003 030f 	and.w	r3, r3, #15
 800e086:	3301      	adds	r3, #1
 800e088:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800e08a:	693b      	ldr	r3, [r7, #16]
 800e08c:	2b03      	cmp	r3, #3
 800e08e:	d10c      	bne.n	800e0aa <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800e090:	4a17      	ldr	r2, [pc, #92]	@ (800e0f0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	fbb2 f3f3 	udiv	r3, r2, r3
 800e098:	4a14      	ldr	r2, [pc, #80]	@ (800e0ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800e09a:	68d2      	ldr	r2, [r2, #12]
 800e09c:	0a12      	lsrs	r2, r2, #8
 800e09e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800e0a2:	fb02 f303 	mul.w	r3, r2, r3
 800e0a6:	617b      	str	r3, [r7, #20]
    break;
 800e0a8:	e00c      	b.n	800e0c4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800e0aa:	4a12      	ldr	r2, [pc, #72]	@ (800e0f4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	fbb2 f3f3 	udiv	r3, r2, r3
 800e0b2:	4a0e      	ldr	r2, [pc, #56]	@ (800e0ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800e0b4:	68d2      	ldr	r2, [r2, #12]
 800e0b6:	0a12      	lsrs	r2, r2, #8
 800e0b8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800e0bc:	fb02 f303 	mul.w	r3, r2, r3
 800e0c0:	617b      	str	r3, [r7, #20]
    break;
 800e0c2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800e0c4:	4b09      	ldr	r3, [pc, #36]	@ (800e0ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800e0c6:	68db      	ldr	r3, [r3, #12]
 800e0c8:	0e5b      	lsrs	r3, r3, #25
 800e0ca:	f003 0303 	and.w	r3, r3, #3
 800e0ce:	3301      	adds	r3, #1
 800e0d0:	005b      	lsls	r3, r3, #1
 800e0d2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800e0d4:	697a      	ldr	r2, [r7, #20]
 800e0d6:	68bb      	ldr	r3, [r7, #8]
 800e0d8:	fbb2 f3f3 	udiv	r3, r2, r3
 800e0dc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800e0de:	687b      	ldr	r3, [r7, #4]
}
 800e0e0:	4618      	mov	r0, r3
 800e0e2:	371c      	adds	r7, #28
 800e0e4:	46bd      	mov	sp, r7
 800e0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ea:	4770      	bx	lr
 800e0ec:	40021000 	.word	0x40021000
 800e0f0:	016e3600 	.word	0x016e3600
 800e0f4:	00f42400 	.word	0x00f42400

0800e0f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800e0f8:	b580      	push	{r7, lr}
 800e0fa:	b086      	sub	sp, #24
 800e0fc:	af00      	add	r7, sp, #0
 800e0fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800e100:	2300      	movs	r3, #0
 800e102:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800e104:	2300      	movs	r3, #0
 800e106:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800e110:	2b00      	cmp	r3, #0
 800e112:	f000 8098 	beq.w	800e246 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800e116:	2300      	movs	r3, #0
 800e118:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800e11a:	4b43      	ldr	r3, [pc, #268]	@ (800e228 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e11c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e11e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e122:	2b00      	cmp	r3, #0
 800e124:	d10d      	bne.n	800e142 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800e126:	4b40      	ldr	r3, [pc, #256]	@ (800e228 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e128:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e12a:	4a3f      	ldr	r2, [pc, #252]	@ (800e228 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e12c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e130:	6593      	str	r3, [r2, #88]	@ 0x58
 800e132:	4b3d      	ldr	r3, [pc, #244]	@ (800e228 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e134:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e136:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e13a:	60bb      	str	r3, [r7, #8]
 800e13c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800e13e:	2301      	movs	r3, #1
 800e140:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800e142:	4b3a      	ldr	r3, [pc, #232]	@ (800e22c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	4a39      	ldr	r2, [pc, #228]	@ (800e22c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800e148:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e14c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800e14e:	f7fc ff25 	bl	800af9c <HAL_GetTick>
 800e152:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e154:	e009      	b.n	800e16a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e156:	f7fc ff21 	bl	800af9c <HAL_GetTick>
 800e15a:	4602      	mov	r2, r0
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	1ad3      	subs	r3, r2, r3
 800e160:	2b02      	cmp	r3, #2
 800e162:	d902      	bls.n	800e16a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800e164:	2303      	movs	r3, #3
 800e166:	74fb      	strb	r3, [r7, #19]
        break;
 800e168:	e005      	b.n	800e176 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e16a:	4b30      	ldr	r3, [pc, #192]	@ (800e22c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e172:	2b00      	cmp	r3, #0
 800e174:	d0ef      	beq.n	800e156 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800e176:	7cfb      	ldrb	r3, [r7, #19]
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d159      	bne.n	800e230 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800e17c:	4b2a      	ldr	r3, [pc, #168]	@ (800e228 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e17e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e182:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e186:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800e188:	697b      	ldr	r3, [r7, #20]
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d01e      	beq.n	800e1cc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e192:	697a      	ldr	r2, [r7, #20]
 800e194:	429a      	cmp	r2, r3
 800e196:	d019      	beq.n	800e1cc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800e198:	4b23      	ldr	r3, [pc, #140]	@ (800e228 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e19a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e19e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e1a2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800e1a4:	4b20      	ldr	r3, [pc, #128]	@ (800e228 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e1a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e1aa:	4a1f      	ldr	r2, [pc, #124]	@ (800e228 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e1ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e1b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800e1b4:	4b1c      	ldr	r3, [pc, #112]	@ (800e228 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e1b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e1ba:	4a1b      	ldr	r2, [pc, #108]	@ (800e228 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e1bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e1c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800e1c4:	4a18      	ldr	r2, [pc, #96]	@ (800e228 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e1c6:	697b      	ldr	r3, [r7, #20]
 800e1c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800e1cc:	697b      	ldr	r3, [r7, #20]
 800e1ce:	f003 0301 	and.w	r3, r3, #1
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d016      	beq.n	800e204 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e1d6:	f7fc fee1 	bl	800af9c <HAL_GetTick>
 800e1da:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800e1dc:	e00b      	b.n	800e1f6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e1de:	f7fc fedd 	bl	800af9c <HAL_GetTick>
 800e1e2:	4602      	mov	r2, r0
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	1ad3      	subs	r3, r2, r3
 800e1e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e1ec:	4293      	cmp	r3, r2
 800e1ee:	d902      	bls.n	800e1f6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800e1f0:	2303      	movs	r3, #3
 800e1f2:	74fb      	strb	r3, [r7, #19]
            break;
 800e1f4:	e006      	b.n	800e204 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800e1f6:	4b0c      	ldr	r3, [pc, #48]	@ (800e228 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e1f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e1fc:	f003 0302 	and.w	r3, r3, #2
 800e200:	2b00      	cmp	r3, #0
 800e202:	d0ec      	beq.n	800e1de <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800e204:	7cfb      	ldrb	r3, [r7, #19]
 800e206:	2b00      	cmp	r3, #0
 800e208:	d10b      	bne.n	800e222 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800e20a:	4b07      	ldr	r3, [pc, #28]	@ (800e228 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e20c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e210:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e218:	4903      	ldr	r1, [pc, #12]	@ (800e228 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e21a:	4313      	orrs	r3, r2
 800e21c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800e220:	e008      	b.n	800e234 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800e222:	7cfb      	ldrb	r3, [r7, #19]
 800e224:	74bb      	strb	r3, [r7, #18]
 800e226:	e005      	b.n	800e234 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800e228:	40021000 	.word	0x40021000
 800e22c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e230:	7cfb      	ldrb	r3, [r7, #19]
 800e232:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800e234:	7c7b      	ldrb	r3, [r7, #17]
 800e236:	2b01      	cmp	r3, #1
 800e238:	d105      	bne.n	800e246 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800e23a:	4ba7      	ldr	r3, [pc, #668]	@ (800e4d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e23c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e23e:	4aa6      	ldr	r2, [pc, #664]	@ (800e4d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e240:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e244:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	f003 0301 	and.w	r3, r3, #1
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d00a      	beq.n	800e268 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800e252:	4ba1      	ldr	r3, [pc, #644]	@ (800e4d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e254:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e258:	f023 0203 	bic.w	r2, r3, #3
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	685b      	ldr	r3, [r3, #4]
 800e260:	499d      	ldr	r1, [pc, #628]	@ (800e4d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e262:	4313      	orrs	r3, r2
 800e264:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	f003 0302 	and.w	r3, r3, #2
 800e270:	2b00      	cmp	r3, #0
 800e272:	d00a      	beq.n	800e28a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800e274:	4b98      	ldr	r3, [pc, #608]	@ (800e4d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e276:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e27a:	f023 020c 	bic.w	r2, r3, #12
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	689b      	ldr	r3, [r3, #8]
 800e282:	4995      	ldr	r1, [pc, #596]	@ (800e4d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e284:	4313      	orrs	r3, r2
 800e286:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	f003 0304 	and.w	r3, r3, #4
 800e292:	2b00      	cmp	r3, #0
 800e294:	d00a      	beq.n	800e2ac <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800e296:	4b90      	ldr	r3, [pc, #576]	@ (800e4d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e298:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e29c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	68db      	ldr	r3, [r3, #12]
 800e2a4:	498c      	ldr	r1, [pc, #560]	@ (800e4d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e2a6:	4313      	orrs	r3, r2
 800e2a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	f003 0308 	and.w	r3, r3, #8
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d00a      	beq.n	800e2ce <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800e2b8:	4b87      	ldr	r3, [pc, #540]	@ (800e4d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e2ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e2be:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	691b      	ldr	r3, [r3, #16]
 800e2c6:	4984      	ldr	r1, [pc, #528]	@ (800e4d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e2c8:	4313      	orrs	r3, r2
 800e2ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	f003 0310 	and.w	r3, r3, #16
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d00a      	beq.n	800e2f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800e2da:	4b7f      	ldr	r3, [pc, #508]	@ (800e4d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e2dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e2e0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	695b      	ldr	r3, [r3, #20]
 800e2e8:	497b      	ldr	r1, [pc, #492]	@ (800e4d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e2ea:	4313      	orrs	r3, r2
 800e2ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	f003 0320 	and.w	r3, r3, #32
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d00a      	beq.n	800e312 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800e2fc:	4b76      	ldr	r3, [pc, #472]	@ (800e4d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e2fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e302:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	699b      	ldr	r3, [r3, #24]
 800e30a:	4973      	ldr	r1, [pc, #460]	@ (800e4d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e30c:	4313      	orrs	r3, r2
 800e30e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	681b      	ldr	r3, [r3, #0]
 800e316:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d00a      	beq.n	800e334 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800e31e:	4b6e      	ldr	r3, [pc, #440]	@ (800e4d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e320:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e324:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	69db      	ldr	r3, [r3, #28]
 800e32c:	496a      	ldr	r1, [pc, #424]	@ (800e4d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e32e:	4313      	orrs	r3, r2
 800e330:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d00a      	beq.n	800e356 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800e340:	4b65      	ldr	r3, [pc, #404]	@ (800e4d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e342:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e346:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	6a1b      	ldr	r3, [r3, #32]
 800e34e:	4962      	ldr	r1, [pc, #392]	@ (800e4d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e350:	4313      	orrs	r3, r2
 800e352:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d00a      	beq.n	800e378 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800e362:	4b5d      	ldr	r3, [pc, #372]	@ (800e4d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e364:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e368:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e370:	4959      	ldr	r1, [pc, #356]	@ (800e4d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e372:	4313      	orrs	r3, r2
 800e374:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e380:	2b00      	cmp	r3, #0
 800e382:	d00a      	beq.n	800e39a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800e384:	4b54      	ldr	r3, [pc, #336]	@ (800e4d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e386:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800e38a:	f023 0203 	bic.w	r2, r3, #3
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e392:	4951      	ldr	r1, [pc, #324]	@ (800e4d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e394:	4313      	orrs	r3, r2
 800e396:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d00a      	beq.n	800e3bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800e3a6:	4b4c      	ldr	r3, [pc, #304]	@ (800e4d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e3a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e3ac:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e3b4:	4948      	ldr	r1, [pc, #288]	@ (800e4d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e3b6:	4313      	orrs	r3, r2
 800e3b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d015      	beq.n	800e3f4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800e3c8:	4b43      	ldr	r3, [pc, #268]	@ (800e4d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e3ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e3ce:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e3d6:	4940      	ldr	r1, [pc, #256]	@ (800e4d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e3d8:	4313      	orrs	r3, r2
 800e3da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e3e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e3e6:	d105      	bne.n	800e3f4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800e3e8:	4b3b      	ldr	r3, [pc, #236]	@ (800e4d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e3ea:	68db      	ldr	r3, [r3, #12]
 800e3ec:	4a3a      	ldr	r2, [pc, #232]	@ (800e4d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e3ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e3f2:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d015      	beq.n	800e42c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800e400:	4b35      	ldr	r3, [pc, #212]	@ (800e4d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e402:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e406:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e40e:	4932      	ldr	r1, [pc, #200]	@ (800e4d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e410:	4313      	orrs	r3, r2
 800e412:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e41a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e41e:	d105      	bne.n	800e42c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800e420:	4b2d      	ldr	r3, [pc, #180]	@ (800e4d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e422:	68db      	ldr	r3, [r3, #12]
 800e424:	4a2c      	ldr	r2, [pc, #176]	@ (800e4d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e426:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e42a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800e434:	2b00      	cmp	r3, #0
 800e436:	d015      	beq.n	800e464 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800e438:	4b27      	ldr	r3, [pc, #156]	@ (800e4d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e43a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e43e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e446:	4924      	ldr	r1, [pc, #144]	@ (800e4d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e448:	4313      	orrs	r3, r2
 800e44a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e452:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e456:	d105      	bne.n	800e464 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800e458:	4b1f      	ldr	r3, [pc, #124]	@ (800e4d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e45a:	68db      	ldr	r3, [r3, #12]
 800e45c:	4a1e      	ldr	r2, [pc, #120]	@ (800e4d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e45e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e462:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d015      	beq.n	800e49c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800e470:	4b19      	ldr	r3, [pc, #100]	@ (800e4d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e472:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e476:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e47e:	4916      	ldr	r1, [pc, #88]	@ (800e4d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e480:	4313      	orrs	r3, r2
 800e482:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e48a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e48e:	d105      	bne.n	800e49c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800e490:	4b11      	ldr	r3, [pc, #68]	@ (800e4d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e492:	68db      	ldr	r3, [r3, #12]
 800e494:	4a10      	ldr	r2, [pc, #64]	@ (800e4d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e496:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e49a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d019      	beq.n	800e4dc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800e4a8:	4b0b      	ldr	r3, [pc, #44]	@ (800e4d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e4aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e4ae:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e4b6:	4908      	ldr	r1, [pc, #32]	@ (800e4d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e4b8:	4313      	orrs	r3, r2
 800e4ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e4c2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e4c6:	d109      	bne.n	800e4dc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800e4c8:	4b03      	ldr	r3, [pc, #12]	@ (800e4d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e4ca:	68db      	ldr	r3, [r3, #12]
 800e4cc:	4a02      	ldr	r2, [pc, #8]	@ (800e4d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e4ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e4d2:	60d3      	str	r3, [r2, #12]
 800e4d4:	e002      	b.n	800e4dc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800e4d6:	bf00      	nop
 800e4d8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d015      	beq.n	800e514 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800e4e8:	4b29      	ldr	r3, [pc, #164]	@ (800e590 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e4ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e4ee:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e4f6:	4926      	ldr	r1, [pc, #152]	@ (800e590 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e4f8:	4313      	orrs	r3, r2
 800e4fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e502:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e506:	d105      	bne.n	800e514 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800e508:	4b21      	ldr	r3, [pc, #132]	@ (800e590 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e50a:	68db      	ldr	r3, [r3, #12]
 800e50c:	4a20      	ldr	r2, [pc, #128]	@ (800e590 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e50e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e512:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d015      	beq.n	800e54c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800e520:	4b1b      	ldr	r3, [pc, #108]	@ (800e590 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e522:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e526:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e52e:	4918      	ldr	r1, [pc, #96]	@ (800e590 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e530:	4313      	orrs	r3, r2
 800e532:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e53a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e53e:	d105      	bne.n	800e54c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800e540:	4b13      	ldr	r3, [pc, #76]	@ (800e590 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e542:	68db      	ldr	r3, [r3, #12]
 800e544:	4a12      	ldr	r2, [pc, #72]	@ (800e590 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e546:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e54a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800e554:	2b00      	cmp	r3, #0
 800e556:	d015      	beq.n	800e584 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800e558:	4b0d      	ldr	r3, [pc, #52]	@ (800e590 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e55a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800e55e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e566:	490a      	ldr	r1, [pc, #40]	@ (800e590 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e568:	4313      	orrs	r3, r2
 800e56a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e572:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e576:	d105      	bne.n	800e584 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800e578:	4b05      	ldr	r3, [pc, #20]	@ (800e590 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e57a:	68db      	ldr	r3, [r3, #12]
 800e57c:	4a04      	ldr	r2, [pc, #16]	@ (800e590 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e57e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e582:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800e584:	7cbb      	ldrb	r3, [r7, #18]
}
 800e586:	4618      	mov	r0, r3
 800e588:	3718      	adds	r7, #24
 800e58a:	46bd      	mov	sp, r7
 800e58c:	bd80      	pop	{r7, pc}
 800e58e:	bf00      	nop
 800e590:	40021000 	.word	0x40021000

0800e594 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e594:	b580      	push	{r7, lr}
 800e596:	b082      	sub	sp, #8
 800e598:	af00      	add	r7, sp, #0
 800e59a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d101      	bne.n	800e5a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e5a2:	2301      	movs	r3, #1
 800e5a4:	e054      	b.n	800e650 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e5ac:	b2db      	uxtb	r3, r3
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d111      	bne.n	800e5d6 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	2200      	movs	r2, #0
 800e5b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800e5ba:	6878      	ldr	r0, [r7, #4]
 800e5bc:	f001 fee2 	bl	8010384 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d102      	bne.n	800e5ce <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	4a23      	ldr	r2, [pc, #140]	@ (800e658 <HAL_TIM_Base_Init+0xc4>)
 800e5cc:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e5d2:	6878      	ldr	r0, [r7, #4]
 800e5d4:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	2202      	movs	r2, #2
 800e5da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	681a      	ldr	r2, [r3, #0]
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	3304      	adds	r3, #4
 800e5e6:	4619      	mov	r1, r3
 800e5e8:	4610      	mov	r0, r2
 800e5ea:	f001 fa2b 	bl	800fa44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	2201      	movs	r2, #1
 800e5f2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	2201      	movs	r2, #1
 800e5fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	2201      	movs	r2, #1
 800e602:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	2201      	movs	r2, #1
 800e60a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	2201      	movs	r2, #1
 800e612:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	2201      	movs	r2, #1
 800e61a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	2201      	movs	r2, #1
 800e622:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	2201      	movs	r2, #1
 800e62a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	2201      	movs	r2, #1
 800e632:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	2201      	movs	r2, #1
 800e63a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	2201      	movs	r2, #1
 800e642:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	2201      	movs	r2, #1
 800e64a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e64e:	2300      	movs	r3, #0
}
 800e650:	4618      	mov	r0, r3
 800e652:	3708      	adds	r7, #8
 800e654:	46bd      	mov	sp, r7
 800e656:	bd80      	pop	{r7, pc}
 800e658:	0800a7c5 	.word	0x0800a7c5

0800e65c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800e65c:	b480      	push	{r7}
 800e65e:	b085      	sub	sp, #20
 800e660:	af00      	add	r7, sp, #0
 800e662:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e66a:	b2db      	uxtb	r3, r3
 800e66c:	2b01      	cmp	r3, #1
 800e66e:	d001      	beq.n	800e674 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800e670:	2301      	movs	r3, #1
 800e672:	e04c      	b.n	800e70e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	2202      	movs	r2, #2
 800e678:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	4a26      	ldr	r2, [pc, #152]	@ (800e71c <HAL_TIM_Base_Start+0xc0>)
 800e682:	4293      	cmp	r3, r2
 800e684:	d022      	beq.n	800e6cc <HAL_TIM_Base_Start+0x70>
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e68e:	d01d      	beq.n	800e6cc <HAL_TIM_Base_Start+0x70>
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	4a22      	ldr	r2, [pc, #136]	@ (800e720 <HAL_TIM_Base_Start+0xc4>)
 800e696:	4293      	cmp	r3, r2
 800e698:	d018      	beq.n	800e6cc <HAL_TIM_Base_Start+0x70>
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	4a21      	ldr	r2, [pc, #132]	@ (800e724 <HAL_TIM_Base_Start+0xc8>)
 800e6a0:	4293      	cmp	r3, r2
 800e6a2:	d013      	beq.n	800e6cc <HAL_TIM_Base_Start+0x70>
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	4a1f      	ldr	r2, [pc, #124]	@ (800e728 <HAL_TIM_Base_Start+0xcc>)
 800e6aa:	4293      	cmp	r3, r2
 800e6ac:	d00e      	beq.n	800e6cc <HAL_TIM_Base_Start+0x70>
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	4a1e      	ldr	r2, [pc, #120]	@ (800e72c <HAL_TIM_Base_Start+0xd0>)
 800e6b4:	4293      	cmp	r3, r2
 800e6b6:	d009      	beq.n	800e6cc <HAL_TIM_Base_Start+0x70>
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	4a1c      	ldr	r2, [pc, #112]	@ (800e730 <HAL_TIM_Base_Start+0xd4>)
 800e6be:	4293      	cmp	r3, r2
 800e6c0:	d004      	beq.n	800e6cc <HAL_TIM_Base_Start+0x70>
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	4a1b      	ldr	r2, [pc, #108]	@ (800e734 <HAL_TIM_Base_Start+0xd8>)
 800e6c8:	4293      	cmp	r3, r2
 800e6ca:	d115      	bne.n	800e6f8 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	689a      	ldr	r2, [r3, #8]
 800e6d2:	4b19      	ldr	r3, [pc, #100]	@ (800e738 <HAL_TIM_Base_Start+0xdc>)
 800e6d4:	4013      	ands	r3, r2
 800e6d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	2b06      	cmp	r3, #6
 800e6dc:	d015      	beq.n	800e70a <HAL_TIM_Base_Start+0xae>
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e6e4:	d011      	beq.n	800e70a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	681a      	ldr	r2, [r3, #0]
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	f042 0201 	orr.w	r2, r2, #1
 800e6f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e6f6:	e008      	b.n	800e70a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	681a      	ldr	r2, [r3, #0]
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	f042 0201 	orr.w	r2, r2, #1
 800e706:	601a      	str	r2, [r3, #0]
 800e708:	e000      	b.n	800e70c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e70a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e70c:	2300      	movs	r3, #0
}
 800e70e:	4618      	mov	r0, r3
 800e710:	3714      	adds	r7, #20
 800e712:	46bd      	mov	sp, r7
 800e714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e718:	4770      	bx	lr
 800e71a:	bf00      	nop
 800e71c:	40012c00 	.word	0x40012c00
 800e720:	40000400 	.word	0x40000400
 800e724:	40000800 	.word	0x40000800
 800e728:	40000c00 	.word	0x40000c00
 800e72c:	40013400 	.word	0x40013400
 800e730:	40014000 	.word	0x40014000
 800e734:	40015000 	.word	0x40015000
 800e738:	00010007 	.word	0x00010007

0800e73c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e73c:	b480      	push	{r7}
 800e73e:	b085      	sub	sp, #20
 800e740:	af00      	add	r7, sp, #0
 800e742:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e74a:	b2db      	uxtb	r3, r3
 800e74c:	2b01      	cmp	r3, #1
 800e74e:	d001      	beq.n	800e754 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e750:	2301      	movs	r3, #1
 800e752:	e054      	b.n	800e7fe <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	2202      	movs	r2, #2
 800e758:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	68da      	ldr	r2, [r3, #12]
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	f042 0201 	orr.w	r2, r2, #1
 800e76a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	4a26      	ldr	r2, [pc, #152]	@ (800e80c <HAL_TIM_Base_Start_IT+0xd0>)
 800e772:	4293      	cmp	r3, r2
 800e774:	d022      	beq.n	800e7bc <HAL_TIM_Base_Start_IT+0x80>
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e77e:	d01d      	beq.n	800e7bc <HAL_TIM_Base_Start_IT+0x80>
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	4a22      	ldr	r2, [pc, #136]	@ (800e810 <HAL_TIM_Base_Start_IT+0xd4>)
 800e786:	4293      	cmp	r3, r2
 800e788:	d018      	beq.n	800e7bc <HAL_TIM_Base_Start_IT+0x80>
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	4a21      	ldr	r2, [pc, #132]	@ (800e814 <HAL_TIM_Base_Start_IT+0xd8>)
 800e790:	4293      	cmp	r3, r2
 800e792:	d013      	beq.n	800e7bc <HAL_TIM_Base_Start_IT+0x80>
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	4a1f      	ldr	r2, [pc, #124]	@ (800e818 <HAL_TIM_Base_Start_IT+0xdc>)
 800e79a:	4293      	cmp	r3, r2
 800e79c:	d00e      	beq.n	800e7bc <HAL_TIM_Base_Start_IT+0x80>
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	681b      	ldr	r3, [r3, #0]
 800e7a2:	4a1e      	ldr	r2, [pc, #120]	@ (800e81c <HAL_TIM_Base_Start_IT+0xe0>)
 800e7a4:	4293      	cmp	r3, r2
 800e7a6:	d009      	beq.n	800e7bc <HAL_TIM_Base_Start_IT+0x80>
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	4a1c      	ldr	r2, [pc, #112]	@ (800e820 <HAL_TIM_Base_Start_IT+0xe4>)
 800e7ae:	4293      	cmp	r3, r2
 800e7b0:	d004      	beq.n	800e7bc <HAL_TIM_Base_Start_IT+0x80>
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	4a1b      	ldr	r2, [pc, #108]	@ (800e824 <HAL_TIM_Base_Start_IT+0xe8>)
 800e7b8:	4293      	cmp	r3, r2
 800e7ba:	d115      	bne.n	800e7e8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	689a      	ldr	r2, [r3, #8]
 800e7c2:	4b19      	ldr	r3, [pc, #100]	@ (800e828 <HAL_TIM_Base_Start_IT+0xec>)
 800e7c4:	4013      	ands	r3, r2
 800e7c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	2b06      	cmp	r3, #6
 800e7cc:	d015      	beq.n	800e7fa <HAL_TIM_Base_Start_IT+0xbe>
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e7d4:	d011      	beq.n	800e7fa <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	681a      	ldr	r2, [r3, #0]
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	f042 0201 	orr.w	r2, r2, #1
 800e7e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e7e6:	e008      	b.n	800e7fa <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	681a      	ldr	r2, [r3, #0]
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	f042 0201 	orr.w	r2, r2, #1
 800e7f6:	601a      	str	r2, [r3, #0]
 800e7f8:	e000      	b.n	800e7fc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e7fa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e7fc:	2300      	movs	r3, #0
}
 800e7fe:	4618      	mov	r0, r3
 800e800:	3714      	adds	r7, #20
 800e802:	46bd      	mov	sp, r7
 800e804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e808:	4770      	bx	lr
 800e80a:	bf00      	nop
 800e80c:	40012c00 	.word	0x40012c00
 800e810:	40000400 	.word	0x40000400
 800e814:	40000800 	.word	0x40000800
 800e818:	40000c00 	.word	0x40000c00
 800e81c:	40013400 	.word	0x40013400
 800e820:	40014000 	.word	0x40014000
 800e824:	40015000 	.word	0x40015000
 800e828:	00010007 	.word	0x00010007

0800e82c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e82c:	b580      	push	{r7, lr}
 800e82e:	b082      	sub	sp, #8
 800e830:	af00      	add	r7, sp, #0
 800e832:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	2b00      	cmp	r3, #0
 800e838:	d101      	bne.n	800e83e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e83a:	2301      	movs	r3, #1
 800e83c:	e054      	b.n	800e8e8 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e844:	b2db      	uxtb	r3, r3
 800e846:	2b00      	cmp	r3, #0
 800e848:	d111      	bne.n	800e86e <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	2200      	movs	r2, #0
 800e84e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800e852:	6878      	ldr	r0, [r7, #4]
 800e854:	f001 fd96 	bl	8010384 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d102      	bne.n	800e866 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	4a23      	ldr	r2, [pc, #140]	@ (800e8f0 <HAL_TIM_PWM_Init+0xc4>)
 800e864:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e86a:	6878      	ldr	r0, [r7, #4]
 800e86c:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	2202      	movs	r2, #2
 800e872:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	681a      	ldr	r2, [r3, #0]
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	3304      	adds	r3, #4
 800e87e:	4619      	mov	r1, r3
 800e880:	4610      	mov	r0, r2
 800e882:	f001 f8df 	bl	800fa44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	2201      	movs	r2, #1
 800e88a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	2201      	movs	r2, #1
 800e892:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	2201      	movs	r2, #1
 800e89a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	2201      	movs	r2, #1
 800e8a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	2201      	movs	r2, #1
 800e8aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	2201      	movs	r2, #1
 800e8b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	2201      	movs	r2, #1
 800e8ba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	2201      	movs	r2, #1
 800e8c2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	2201      	movs	r2, #1
 800e8ca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	2201      	movs	r2, #1
 800e8d2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	2201      	movs	r2, #1
 800e8da:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	2201      	movs	r2, #1
 800e8e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e8e6:	2300      	movs	r3, #0
}
 800e8e8:	4618      	mov	r0, r3
 800e8ea:	3708      	adds	r7, #8
 800e8ec:	46bd      	mov	sp, r7
 800e8ee:	bd80      	pop	{r7, pc}
 800e8f0:	0800a779 	.word	0x0800a779

0800e8f4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e8f4:	b580      	push	{r7, lr}
 800e8f6:	b084      	sub	sp, #16
 800e8f8:	af00      	add	r7, sp, #0
 800e8fa:	6078      	str	r0, [r7, #4]
 800e8fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800e8fe:	683b      	ldr	r3, [r7, #0]
 800e900:	2b00      	cmp	r3, #0
 800e902:	d109      	bne.n	800e918 <HAL_TIM_PWM_Start+0x24>
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800e90a:	b2db      	uxtb	r3, r3
 800e90c:	2b01      	cmp	r3, #1
 800e90e:	bf14      	ite	ne
 800e910:	2301      	movne	r3, #1
 800e912:	2300      	moveq	r3, #0
 800e914:	b2db      	uxtb	r3, r3
 800e916:	e03c      	b.n	800e992 <HAL_TIM_PWM_Start+0x9e>
 800e918:	683b      	ldr	r3, [r7, #0]
 800e91a:	2b04      	cmp	r3, #4
 800e91c:	d109      	bne.n	800e932 <HAL_TIM_PWM_Start+0x3e>
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800e924:	b2db      	uxtb	r3, r3
 800e926:	2b01      	cmp	r3, #1
 800e928:	bf14      	ite	ne
 800e92a:	2301      	movne	r3, #1
 800e92c:	2300      	moveq	r3, #0
 800e92e:	b2db      	uxtb	r3, r3
 800e930:	e02f      	b.n	800e992 <HAL_TIM_PWM_Start+0x9e>
 800e932:	683b      	ldr	r3, [r7, #0]
 800e934:	2b08      	cmp	r3, #8
 800e936:	d109      	bne.n	800e94c <HAL_TIM_PWM_Start+0x58>
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e93e:	b2db      	uxtb	r3, r3
 800e940:	2b01      	cmp	r3, #1
 800e942:	bf14      	ite	ne
 800e944:	2301      	movne	r3, #1
 800e946:	2300      	moveq	r3, #0
 800e948:	b2db      	uxtb	r3, r3
 800e94a:	e022      	b.n	800e992 <HAL_TIM_PWM_Start+0x9e>
 800e94c:	683b      	ldr	r3, [r7, #0]
 800e94e:	2b0c      	cmp	r3, #12
 800e950:	d109      	bne.n	800e966 <HAL_TIM_PWM_Start+0x72>
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e958:	b2db      	uxtb	r3, r3
 800e95a:	2b01      	cmp	r3, #1
 800e95c:	bf14      	ite	ne
 800e95e:	2301      	movne	r3, #1
 800e960:	2300      	moveq	r3, #0
 800e962:	b2db      	uxtb	r3, r3
 800e964:	e015      	b.n	800e992 <HAL_TIM_PWM_Start+0x9e>
 800e966:	683b      	ldr	r3, [r7, #0]
 800e968:	2b10      	cmp	r3, #16
 800e96a:	d109      	bne.n	800e980 <HAL_TIM_PWM_Start+0x8c>
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e972:	b2db      	uxtb	r3, r3
 800e974:	2b01      	cmp	r3, #1
 800e976:	bf14      	ite	ne
 800e978:	2301      	movne	r3, #1
 800e97a:	2300      	moveq	r3, #0
 800e97c:	b2db      	uxtb	r3, r3
 800e97e:	e008      	b.n	800e992 <HAL_TIM_PWM_Start+0x9e>
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800e986:	b2db      	uxtb	r3, r3
 800e988:	2b01      	cmp	r3, #1
 800e98a:	bf14      	ite	ne
 800e98c:	2301      	movne	r3, #1
 800e98e:	2300      	moveq	r3, #0
 800e990:	b2db      	uxtb	r3, r3
 800e992:	2b00      	cmp	r3, #0
 800e994:	d001      	beq.n	800e99a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800e996:	2301      	movs	r3, #1
 800e998:	e0a6      	b.n	800eae8 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e99a:	683b      	ldr	r3, [r7, #0]
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d104      	bne.n	800e9aa <HAL_TIM_PWM_Start+0xb6>
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	2202      	movs	r2, #2
 800e9a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e9a8:	e023      	b.n	800e9f2 <HAL_TIM_PWM_Start+0xfe>
 800e9aa:	683b      	ldr	r3, [r7, #0]
 800e9ac:	2b04      	cmp	r3, #4
 800e9ae:	d104      	bne.n	800e9ba <HAL_TIM_PWM_Start+0xc6>
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	2202      	movs	r2, #2
 800e9b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e9b8:	e01b      	b.n	800e9f2 <HAL_TIM_PWM_Start+0xfe>
 800e9ba:	683b      	ldr	r3, [r7, #0]
 800e9bc:	2b08      	cmp	r3, #8
 800e9be:	d104      	bne.n	800e9ca <HAL_TIM_PWM_Start+0xd6>
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	2202      	movs	r2, #2
 800e9c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e9c8:	e013      	b.n	800e9f2 <HAL_TIM_PWM_Start+0xfe>
 800e9ca:	683b      	ldr	r3, [r7, #0]
 800e9cc:	2b0c      	cmp	r3, #12
 800e9ce:	d104      	bne.n	800e9da <HAL_TIM_PWM_Start+0xe6>
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	2202      	movs	r2, #2
 800e9d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e9d8:	e00b      	b.n	800e9f2 <HAL_TIM_PWM_Start+0xfe>
 800e9da:	683b      	ldr	r3, [r7, #0]
 800e9dc:	2b10      	cmp	r3, #16
 800e9de:	d104      	bne.n	800e9ea <HAL_TIM_PWM_Start+0xf6>
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	2202      	movs	r2, #2
 800e9e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e9e8:	e003      	b.n	800e9f2 <HAL_TIM_PWM_Start+0xfe>
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	2202      	movs	r2, #2
 800e9ee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	2201      	movs	r2, #1
 800e9f8:	6839      	ldr	r1, [r7, #0]
 800e9fa:	4618      	mov	r0, r3
 800e9fc:	f001 fc9c 	bl	8010338 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	4a3a      	ldr	r2, [pc, #232]	@ (800eaf0 <HAL_TIM_PWM_Start+0x1fc>)
 800ea06:	4293      	cmp	r3, r2
 800ea08:	d018      	beq.n	800ea3c <HAL_TIM_PWM_Start+0x148>
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	4a39      	ldr	r2, [pc, #228]	@ (800eaf4 <HAL_TIM_PWM_Start+0x200>)
 800ea10:	4293      	cmp	r3, r2
 800ea12:	d013      	beq.n	800ea3c <HAL_TIM_PWM_Start+0x148>
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	681b      	ldr	r3, [r3, #0]
 800ea18:	4a37      	ldr	r2, [pc, #220]	@ (800eaf8 <HAL_TIM_PWM_Start+0x204>)
 800ea1a:	4293      	cmp	r3, r2
 800ea1c:	d00e      	beq.n	800ea3c <HAL_TIM_PWM_Start+0x148>
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	681b      	ldr	r3, [r3, #0]
 800ea22:	4a36      	ldr	r2, [pc, #216]	@ (800eafc <HAL_TIM_PWM_Start+0x208>)
 800ea24:	4293      	cmp	r3, r2
 800ea26:	d009      	beq.n	800ea3c <HAL_TIM_PWM_Start+0x148>
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	4a34      	ldr	r2, [pc, #208]	@ (800eb00 <HAL_TIM_PWM_Start+0x20c>)
 800ea2e:	4293      	cmp	r3, r2
 800ea30:	d004      	beq.n	800ea3c <HAL_TIM_PWM_Start+0x148>
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	4a33      	ldr	r2, [pc, #204]	@ (800eb04 <HAL_TIM_PWM_Start+0x210>)
 800ea38:	4293      	cmp	r3, r2
 800ea3a:	d101      	bne.n	800ea40 <HAL_TIM_PWM_Start+0x14c>
 800ea3c:	2301      	movs	r3, #1
 800ea3e:	e000      	b.n	800ea42 <HAL_TIM_PWM_Start+0x14e>
 800ea40:	2300      	movs	r3, #0
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d007      	beq.n	800ea56 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800ea54:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	4a25      	ldr	r2, [pc, #148]	@ (800eaf0 <HAL_TIM_PWM_Start+0x1fc>)
 800ea5c:	4293      	cmp	r3, r2
 800ea5e:	d022      	beq.n	800eaa6 <HAL_TIM_PWM_Start+0x1b2>
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ea68:	d01d      	beq.n	800eaa6 <HAL_TIM_PWM_Start+0x1b2>
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	4a26      	ldr	r2, [pc, #152]	@ (800eb08 <HAL_TIM_PWM_Start+0x214>)
 800ea70:	4293      	cmp	r3, r2
 800ea72:	d018      	beq.n	800eaa6 <HAL_TIM_PWM_Start+0x1b2>
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	681b      	ldr	r3, [r3, #0]
 800ea78:	4a24      	ldr	r2, [pc, #144]	@ (800eb0c <HAL_TIM_PWM_Start+0x218>)
 800ea7a:	4293      	cmp	r3, r2
 800ea7c:	d013      	beq.n	800eaa6 <HAL_TIM_PWM_Start+0x1b2>
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	4a23      	ldr	r2, [pc, #140]	@ (800eb10 <HAL_TIM_PWM_Start+0x21c>)
 800ea84:	4293      	cmp	r3, r2
 800ea86:	d00e      	beq.n	800eaa6 <HAL_TIM_PWM_Start+0x1b2>
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	4a19      	ldr	r2, [pc, #100]	@ (800eaf4 <HAL_TIM_PWM_Start+0x200>)
 800ea8e:	4293      	cmp	r3, r2
 800ea90:	d009      	beq.n	800eaa6 <HAL_TIM_PWM_Start+0x1b2>
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	4a18      	ldr	r2, [pc, #96]	@ (800eaf8 <HAL_TIM_PWM_Start+0x204>)
 800ea98:	4293      	cmp	r3, r2
 800ea9a:	d004      	beq.n	800eaa6 <HAL_TIM_PWM_Start+0x1b2>
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	4a18      	ldr	r2, [pc, #96]	@ (800eb04 <HAL_TIM_PWM_Start+0x210>)
 800eaa2:	4293      	cmp	r3, r2
 800eaa4:	d115      	bne.n	800ead2 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	689a      	ldr	r2, [r3, #8]
 800eaac:	4b19      	ldr	r3, [pc, #100]	@ (800eb14 <HAL_TIM_PWM_Start+0x220>)
 800eaae:	4013      	ands	r3, r2
 800eab0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	2b06      	cmp	r3, #6
 800eab6:	d015      	beq.n	800eae4 <HAL_TIM_PWM_Start+0x1f0>
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800eabe:	d011      	beq.n	800eae4 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	681a      	ldr	r2, [r3, #0]
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	681b      	ldr	r3, [r3, #0]
 800eaca:	f042 0201 	orr.w	r2, r2, #1
 800eace:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ead0:	e008      	b.n	800eae4 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	681a      	ldr	r2, [r3, #0]
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	f042 0201 	orr.w	r2, r2, #1
 800eae0:	601a      	str	r2, [r3, #0]
 800eae2:	e000      	b.n	800eae6 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eae4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800eae6:	2300      	movs	r3, #0
}
 800eae8:	4618      	mov	r0, r3
 800eaea:	3710      	adds	r7, #16
 800eaec:	46bd      	mov	sp, r7
 800eaee:	bd80      	pop	{r7, pc}
 800eaf0:	40012c00 	.word	0x40012c00
 800eaf4:	40013400 	.word	0x40013400
 800eaf8:	40014000 	.word	0x40014000
 800eafc:	40014400 	.word	0x40014400
 800eb00:	40014800 	.word	0x40014800
 800eb04:	40015000 	.word	0x40015000
 800eb08:	40000400 	.word	0x40000400
 800eb0c:	40000800 	.word	0x40000800
 800eb10:	40000c00 	.word	0x40000c00
 800eb14:	00010007 	.word	0x00010007

0800eb18 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800eb18:	b580      	push	{r7, lr}
 800eb1a:	b082      	sub	sp, #8
 800eb1c:	af00      	add	r7, sp, #0
 800eb1e:	6078      	str	r0, [r7, #4]
 800eb20:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d101      	bne.n	800eb2c <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800eb28:	2301      	movs	r3, #1
 800eb2a:	e04c      	b.n	800ebc6 <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800eb32:	b2db      	uxtb	r3, r3
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d111      	bne.n	800eb5c <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	2200      	movs	r2, #0
 800eb3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800eb40:	6878      	ldr	r0, [r7, #4]
 800eb42:	f001 fc1f 	bl	8010384 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d102      	bne.n	800eb54 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	4a1f      	ldr	r2, [pc, #124]	@ (800ebd0 <HAL_TIM_OnePulse_Init+0xb8>)
 800eb52:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800eb58:	6878      	ldr	r0, [r7, #4]
 800eb5a:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	2202      	movs	r2, #2
 800eb60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	681a      	ldr	r2, [r3, #0]
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	3304      	adds	r3, #4
 800eb6c:	4619      	mov	r1, r3
 800eb6e:	4610      	mov	r0, r2
 800eb70:	f000 ff68 	bl	800fa44 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	681a      	ldr	r2, [r3, #0]
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	f022 0208 	bic.w	r2, r2, #8
 800eb82:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	6819      	ldr	r1, [r3, #0]
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	681b      	ldr	r3, [r3, #0]
 800eb8e:	683a      	ldr	r2, [r7, #0]
 800eb90:	430a      	orrs	r2, r1
 800eb92:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	2201      	movs	r2, #1
 800eb98:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	2201      	movs	r2, #1
 800eba0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	2201      	movs	r2, #1
 800eba8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	2201      	movs	r2, #1
 800ebb0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	2201      	movs	r2, #1
 800ebb8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	2201      	movs	r2, #1
 800ebc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ebc4:	2300      	movs	r3, #0
}
 800ebc6:	4618      	mov	r0, r3
 800ebc8:	3708      	adds	r7, #8
 800ebca:	46bd      	mov	sp, r7
 800ebcc:	bd80      	pop	{r7, pc}
 800ebce:	bf00      	nop
 800ebd0:	0800ebd5 	.word	0x0800ebd5

0800ebd4 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800ebd4:	b480      	push	{r7}
 800ebd6:	b083      	sub	sp, #12
 800ebd8:	af00      	add	r7, sp, #0
 800ebda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800ebdc:	bf00      	nop
 800ebde:	370c      	adds	r7, #12
 800ebe0:	46bd      	mov	sp, r7
 800ebe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebe6:	4770      	bx	lr

0800ebe8 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800ebe8:	b580      	push	{r7, lr}
 800ebea:	b084      	sub	sp, #16
 800ebec:	af00      	add	r7, sp, #0
 800ebee:	6078      	str	r0, [r7, #4]
 800ebf0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800ebf8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800ec00:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ec08:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ec10:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800ec12:	7bfb      	ldrb	r3, [r7, #15]
 800ec14:	2b01      	cmp	r3, #1
 800ec16:	d108      	bne.n	800ec2a <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800ec18:	7bbb      	ldrb	r3, [r7, #14]
 800ec1a:	2b01      	cmp	r3, #1
 800ec1c:	d105      	bne.n	800ec2a <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800ec1e:	7b7b      	ldrb	r3, [r7, #13]
 800ec20:	2b01      	cmp	r3, #1
 800ec22:	d102      	bne.n	800ec2a <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800ec24:	7b3b      	ldrb	r3, [r7, #12]
 800ec26:	2b01      	cmp	r3, #1
 800ec28:	d001      	beq.n	800ec2e <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 800ec2a:	2301      	movs	r3, #1
 800ec2c:	e059      	b.n	800ece2 <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	2202      	movs	r2, #2
 800ec32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	2202      	movs	r2, #2
 800ec3a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	2202      	movs	r2, #2
 800ec42:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	2202      	movs	r2, #2
 800ec4a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	68da      	ldr	r2, [r3, #12]
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	f042 0202 	orr.w	r2, r2, #2
 800ec5c:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	68da      	ldr	r2, [r3, #12]
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	f042 0204 	orr.w	r2, r2, #4
 800ec6c:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	2201      	movs	r2, #1
 800ec74:	2100      	movs	r1, #0
 800ec76:	4618      	mov	r0, r3
 800ec78:	f001 fb5e 	bl	8010338 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	2201      	movs	r2, #1
 800ec82:	2104      	movs	r1, #4
 800ec84:	4618      	mov	r0, r3
 800ec86:	f001 fb57 	bl	8010338 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	4a17      	ldr	r2, [pc, #92]	@ (800ecec <HAL_TIM_OnePulse_Start_IT+0x104>)
 800ec90:	4293      	cmp	r3, r2
 800ec92:	d018      	beq.n	800ecc6 <HAL_TIM_OnePulse_Start_IT+0xde>
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	681b      	ldr	r3, [r3, #0]
 800ec98:	4a15      	ldr	r2, [pc, #84]	@ (800ecf0 <HAL_TIM_OnePulse_Start_IT+0x108>)
 800ec9a:	4293      	cmp	r3, r2
 800ec9c:	d013      	beq.n	800ecc6 <HAL_TIM_OnePulse_Start_IT+0xde>
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	681b      	ldr	r3, [r3, #0]
 800eca2:	4a14      	ldr	r2, [pc, #80]	@ (800ecf4 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 800eca4:	4293      	cmp	r3, r2
 800eca6:	d00e      	beq.n	800ecc6 <HAL_TIM_OnePulse_Start_IT+0xde>
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	4a12      	ldr	r2, [pc, #72]	@ (800ecf8 <HAL_TIM_OnePulse_Start_IT+0x110>)
 800ecae:	4293      	cmp	r3, r2
 800ecb0:	d009      	beq.n	800ecc6 <HAL_TIM_OnePulse_Start_IT+0xde>
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	4a11      	ldr	r2, [pc, #68]	@ (800ecfc <HAL_TIM_OnePulse_Start_IT+0x114>)
 800ecb8:	4293      	cmp	r3, r2
 800ecba:	d004      	beq.n	800ecc6 <HAL_TIM_OnePulse_Start_IT+0xde>
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	4a0f      	ldr	r2, [pc, #60]	@ (800ed00 <HAL_TIM_OnePulse_Start_IT+0x118>)
 800ecc2:	4293      	cmp	r3, r2
 800ecc4:	d101      	bne.n	800ecca <HAL_TIM_OnePulse_Start_IT+0xe2>
 800ecc6:	2301      	movs	r3, #1
 800ecc8:	e000      	b.n	800eccc <HAL_TIM_OnePulse_Start_IT+0xe4>
 800ecca:	2300      	movs	r3, #0
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	d007      	beq.n	800ece0 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800ecde:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800ece0:	2300      	movs	r3, #0
}
 800ece2:	4618      	mov	r0, r3
 800ece4:	3710      	adds	r7, #16
 800ece6:	46bd      	mov	sp, r7
 800ece8:	bd80      	pop	{r7, pc}
 800ecea:	bf00      	nop
 800ecec:	40012c00 	.word	0x40012c00
 800ecf0:	40013400 	.word	0x40013400
 800ecf4:	40014000 	.word	0x40014000
 800ecf8:	40014400 	.word	0x40014400
 800ecfc:	40014800 	.word	0x40014800
 800ed00:	40015000 	.word	0x40015000

0800ed04 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800ed04:	b580      	push	{r7, lr}
 800ed06:	b086      	sub	sp, #24
 800ed08:	af00      	add	r7, sp, #0
 800ed0a:	6078      	str	r0, [r7, #4]
 800ed0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d101      	bne.n	800ed18 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800ed14:	2301      	movs	r3, #1
 800ed16:	e0a2      	b.n	800ee5e <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ed1e:	b2db      	uxtb	r3, r3
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d111      	bne.n	800ed48 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	2200      	movs	r2, #0
 800ed28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800ed2c:	6878      	ldr	r0, [r7, #4]
 800ed2e:	f001 fb29 	bl	8010384 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d102      	bne.n	800ed40 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	4a4a      	ldr	r2, [pc, #296]	@ (800ee68 <HAL_TIM_Encoder_Init+0x164>)
 800ed3e:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ed44:	6878      	ldr	r0, [r7, #4]
 800ed46:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	2202      	movs	r2, #2
 800ed4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	689b      	ldr	r3, [r3, #8]
 800ed56:	687a      	ldr	r2, [r7, #4]
 800ed58:	6812      	ldr	r2, [r2, #0]
 800ed5a:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800ed5e:	f023 0307 	bic.w	r3, r3, #7
 800ed62:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	681a      	ldr	r2, [r3, #0]
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	3304      	adds	r3, #4
 800ed6c:	4619      	mov	r1, r3
 800ed6e:	4610      	mov	r0, r2
 800ed70:	f000 fe68 	bl	800fa44 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	689b      	ldr	r3, [r3, #8]
 800ed7a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	699b      	ldr	r3, [r3, #24]
 800ed82:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	6a1b      	ldr	r3, [r3, #32]
 800ed8a:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800ed8c:	683b      	ldr	r3, [r7, #0]
 800ed8e:	681b      	ldr	r3, [r3, #0]
 800ed90:	697a      	ldr	r2, [r7, #20]
 800ed92:	4313      	orrs	r3, r2
 800ed94:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800ed96:	693b      	ldr	r3, [r7, #16]
 800ed98:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ed9c:	f023 0303 	bic.w	r3, r3, #3
 800eda0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800eda2:	683b      	ldr	r3, [r7, #0]
 800eda4:	689a      	ldr	r2, [r3, #8]
 800eda6:	683b      	ldr	r3, [r7, #0]
 800eda8:	699b      	ldr	r3, [r3, #24]
 800edaa:	021b      	lsls	r3, r3, #8
 800edac:	4313      	orrs	r3, r2
 800edae:	693a      	ldr	r2, [r7, #16]
 800edb0:	4313      	orrs	r3, r2
 800edb2:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800edb4:	693b      	ldr	r3, [r7, #16]
 800edb6:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800edba:	f023 030c 	bic.w	r3, r3, #12
 800edbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800edc0:	693b      	ldr	r3, [r7, #16]
 800edc2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800edc6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800edca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800edcc:	683b      	ldr	r3, [r7, #0]
 800edce:	68da      	ldr	r2, [r3, #12]
 800edd0:	683b      	ldr	r3, [r7, #0]
 800edd2:	69db      	ldr	r3, [r3, #28]
 800edd4:	021b      	lsls	r3, r3, #8
 800edd6:	4313      	orrs	r3, r2
 800edd8:	693a      	ldr	r2, [r7, #16]
 800edda:	4313      	orrs	r3, r2
 800eddc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800edde:	683b      	ldr	r3, [r7, #0]
 800ede0:	691b      	ldr	r3, [r3, #16]
 800ede2:	011a      	lsls	r2, r3, #4
 800ede4:	683b      	ldr	r3, [r7, #0]
 800ede6:	6a1b      	ldr	r3, [r3, #32]
 800ede8:	031b      	lsls	r3, r3, #12
 800edea:	4313      	orrs	r3, r2
 800edec:	693a      	ldr	r2, [r7, #16]
 800edee:	4313      	orrs	r3, r2
 800edf0:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800edf2:	68fb      	ldr	r3, [r7, #12]
 800edf4:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800edf8:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800edfa:	68fb      	ldr	r3, [r7, #12]
 800edfc:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800ee00:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800ee02:	683b      	ldr	r3, [r7, #0]
 800ee04:	685a      	ldr	r2, [r3, #4]
 800ee06:	683b      	ldr	r3, [r7, #0]
 800ee08:	695b      	ldr	r3, [r3, #20]
 800ee0a:	011b      	lsls	r3, r3, #4
 800ee0c:	4313      	orrs	r3, r2
 800ee0e:	68fa      	ldr	r2, [r7, #12]
 800ee10:	4313      	orrs	r3, r2
 800ee12:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	681b      	ldr	r3, [r3, #0]
 800ee18:	697a      	ldr	r2, [r7, #20]
 800ee1a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	693a      	ldr	r2, [r7, #16]
 800ee22:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	68fa      	ldr	r2, [r7, #12]
 800ee2a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	2201      	movs	r2, #1
 800ee30:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	2201      	movs	r2, #1
 800ee38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	2201      	movs	r2, #1
 800ee40:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	2201      	movs	r2, #1
 800ee48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	2201      	movs	r2, #1
 800ee50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	2201      	movs	r2, #1
 800ee58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ee5c:	2300      	movs	r3, #0
}
 800ee5e:	4618      	mov	r0, r3
 800ee60:	3718      	adds	r7, #24
 800ee62:	46bd      	mov	sp, r7
 800ee64:	bd80      	pop	{r7, pc}
 800ee66:	bf00      	nop
 800ee68:	0800a86d 	.word	0x0800a86d

0800ee6c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ee6c:	b580      	push	{r7, lr}
 800ee6e:	b084      	sub	sp, #16
 800ee70:	af00      	add	r7, sp, #0
 800ee72:	6078      	str	r0, [r7, #4]
 800ee74:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800ee7c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800ee84:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ee8c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ee94:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800ee96:	683b      	ldr	r3, [r7, #0]
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d110      	bne.n	800eebe <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800ee9c:	7bfb      	ldrb	r3, [r7, #15]
 800ee9e:	2b01      	cmp	r3, #1
 800eea0:	d102      	bne.n	800eea8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800eea2:	7b7b      	ldrb	r3, [r7, #13]
 800eea4:	2b01      	cmp	r3, #1
 800eea6:	d001      	beq.n	800eeac <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800eea8:	2301      	movs	r3, #1
 800eeaa:	e069      	b.n	800ef80 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	2202      	movs	r2, #2
 800eeb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	2202      	movs	r2, #2
 800eeb8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800eebc:	e031      	b.n	800ef22 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800eebe:	683b      	ldr	r3, [r7, #0]
 800eec0:	2b04      	cmp	r3, #4
 800eec2:	d110      	bne.n	800eee6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800eec4:	7bbb      	ldrb	r3, [r7, #14]
 800eec6:	2b01      	cmp	r3, #1
 800eec8:	d102      	bne.n	800eed0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800eeca:	7b3b      	ldrb	r3, [r7, #12]
 800eecc:	2b01      	cmp	r3, #1
 800eece:	d001      	beq.n	800eed4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800eed0:	2301      	movs	r3, #1
 800eed2:	e055      	b.n	800ef80 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	2202      	movs	r2, #2
 800eed8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	2202      	movs	r2, #2
 800eee0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800eee4:	e01d      	b.n	800ef22 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800eee6:	7bfb      	ldrb	r3, [r7, #15]
 800eee8:	2b01      	cmp	r3, #1
 800eeea:	d108      	bne.n	800eefe <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800eeec:	7bbb      	ldrb	r3, [r7, #14]
 800eeee:	2b01      	cmp	r3, #1
 800eef0:	d105      	bne.n	800eefe <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800eef2:	7b7b      	ldrb	r3, [r7, #13]
 800eef4:	2b01      	cmp	r3, #1
 800eef6:	d102      	bne.n	800eefe <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800eef8:	7b3b      	ldrb	r3, [r7, #12]
 800eefa:	2b01      	cmp	r3, #1
 800eefc:	d001      	beq.n	800ef02 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800eefe:	2301      	movs	r3, #1
 800ef00:	e03e      	b.n	800ef80 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	2202      	movs	r2, #2
 800ef06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	2202      	movs	r2, #2
 800ef0e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	2202      	movs	r2, #2
 800ef16:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	2202      	movs	r2, #2
 800ef1e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800ef22:	683b      	ldr	r3, [r7, #0]
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d003      	beq.n	800ef30 <HAL_TIM_Encoder_Start+0xc4>
 800ef28:	683b      	ldr	r3, [r7, #0]
 800ef2a:	2b04      	cmp	r3, #4
 800ef2c:	d008      	beq.n	800ef40 <HAL_TIM_Encoder_Start+0xd4>
 800ef2e:	e00f      	b.n	800ef50 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	681b      	ldr	r3, [r3, #0]
 800ef34:	2201      	movs	r2, #1
 800ef36:	2100      	movs	r1, #0
 800ef38:	4618      	mov	r0, r3
 800ef3a:	f001 f9fd 	bl	8010338 <TIM_CCxChannelCmd>
      break;
 800ef3e:	e016      	b.n	800ef6e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	681b      	ldr	r3, [r3, #0]
 800ef44:	2201      	movs	r2, #1
 800ef46:	2104      	movs	r1, #4
 800ef48:	4618      	mov	r0, r3
 800ef4a:	f001 f9f5 	bl	8010338 <TIM_CCxChannelCmd>
      break;
 800ef4e:	e00e      	b.n	800ef6e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	2201      	movs	r2, #1
 800ef56:	2100      	movs	r1, #0
 800ef58:	4618      	mov	r0, r3
 800ef5a:	f001 f9ed 	bl	8010338 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	681b      	ldr	r3, [r3, #0]
 800ef62:	2201      	movs	r2, #1
 800ef64:	2104      	movs	r1, #4
 800ef66:	4618      	mov	r0, r3
 800ef68:	f001 f9e6 	bl	8010338 <TIM_CCxChannelCmd>
      break;
 800ef6c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	681a      	ldr	r2, [r3, #0]
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	f042 0201 	orr.w	r2, r2, #1
 800ef7c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800ef7e:	2300      	movs	r3, #0
}
 800ef80:	4618      	mov	r0, r3
 800ef82:	3710      	adds	r7, #16
 800ef84:	46bd      	mov	sp, r7
 800ef86:	bd80      	pop	{r7, pc}

0800ef88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ef88:	b580      	push	{r7, lr}
 800ef8a:	b084      	sub	sp, #16
 800ef8c:	af00      	add	r7, sp, #0
 800ef8e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	68db      	ldr	r3, [r3, #12]
 800ef96:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	691b      	ldr	r3, [r3, #16]
 800ef9e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800efa0:	68bb      	ldr	r3, [r7, #8]
 800efa2:	f003 0302 	and.w	r3, r3, #2
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d026      	beq.n	800eff8 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	f003 0302 	and.w	r3, r3, #2
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d021      	beq.n	800eff8 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	f06f 0202 	mvn.w	r2, #2
 800efbc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	2201      	movs	r2, #1
 800efc2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	699b      	ldr	r3, [r3, #24]
 800efca:	f003 0303 	and.w	r3, r3, #3
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d005      	beq.n	800efde <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800efd8:	6878      	ldr	r0, [r7, #4]
 800efda:	4798      	blx	r3
 800efdc:	e009      	b.n	800eff2 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800efe4:	6878      	ldr	r0, [r7, #4]
 800efe6:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800efee:	6878      	ldr	r0, [r7, #4]
 800eff0:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	2200      	movs	r2, #0
 800eff6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800eff8:	68bb      	ldr	r3, [r7, #8]
 800effa:	f003 0304 	and.w	r3, r3, #4
 800effe:	2b00      	cmp	r3, #0
 800f000:	d026      	beq.n	800f050 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800f002:	68fb      	ldr	r3, [r7, #12]
 800f004:	f003 0304 	and.w	r3, r3, #4
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d021      	beq.n	800f050 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	f06f 0204 	mvn.w	r2, #4
 800f014:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	2202      	movs	r2, #2
 800f01a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	681b      	ldr	r3, [r3, #0]
 800f020:	699b      	ldr	r3, [r3, #24]
 800f022:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800f026:	2b00      	cmp	r3, #0
 800f028:	d005      	beq.n	800f036 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f030:	6878      	ldr	r0, [r7, #4]
 800f032:	4798      	blx	r3
 800f034:	e009      	b.n	800f04a <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800f03c:	6878      	ldr	r0, [r7, #4]
 800f03e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f046:	6878      	ldr	r0, [r7, #4]
 800f048:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	2200      	movs	r2, #0
 800f04e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800f050:	68bb      	ldr	r3, [r7, #8]
 800f052:	f003 0308 	and.w	r3, r3, #8
 800f056:	2b00      	cmp	r3, #0
 800f058:	d026      	beq.n	800f0a8 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	f003 0308 	and.w	r3, r3, #8
 800f060:	2b00      	cmp	r3, #0
 800f062:	d021      	beq.n	800f0a8 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	f06f 0208 	mvn.w	r2, #8
 800f06c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	2204      	movs	r2, #4
 800f072:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	69db      	ldr	r3, [r3, #28]
 800f07a:	f003 0303 	and.w	r3, r3, #3
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d005      	beq.n	800f08e <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f088:	6878      	ldr	r0, [r7, #4]
 800f08a:	4798      	blx	r3
 800f08c:	e009      	b.n	800f0a2 <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800f094:	6878      	ldr	r0, [r7, #4]
 800f096:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f09e:	6878      	ldr	r0, [r7, #4]
 800f0a0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	2200      	movs	r2, #0
 800f0a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800f0a8:	68bb      	ldr	r3, [r7, #8]
 800f0aa:	f003 0310 	and.w	r3, r3, #16
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d026      	beq.n	800f100 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	f003 0310 	and.w	r3, r3, #16
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	d021      	beq.n	800f100 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	681b      	ldr	r3, [r3, #0]
 800f0c0:	f06f 0210 	mvn.w	r2, #16
 800f0c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	2208      	movs	r2, #8
 800f0ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	69db      	ldr	r3, [r3, #28]
 800f0d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d005      	beq.n	800f0e6 <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f0e0:	6878      	ldr	r0, [r7, #4]
 800f0e2:	4798      	blx	r3
 800f0e4:	e009      	b.n	800f0fa <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800f0ec:	6878      	ldr	r0, [r7, #4]
 800f0ee:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f0f6:	6878      	ldr	r0, [r7, #4]
 800f0f8:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	2200      	movs	r2, #0
 800f0fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800f100:	68bb      	ldr	r3, [r7, #8]
 800f102:	f003 0301 	and.w	r3, r3, #1
 800f106:	2b00      	cmp	r3, #0
 800f108:	d00e      	beq.n	800f128 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	f003 0301 	and.w	r3, r3, #1
 800f110:	2b00      	cmp	r3, #0
 800f112:	d009      	beq.n	800f128 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	681b      	ldr	r3, [r3, #0]
 800f118:	f06f 0201 	mvn.w	r2, #1
 800f11c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f124:	6878      	ldr	r0, [r7, #4]
 800f126:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800f128:	68bb      	ldr	r3, [r7, #8]
 800f12a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d104      	bne.n	800f13c <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800f132:	68bb      	ldr	r3, [r7, #8]
 800f134:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d00e      	beq.n	800f15a <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800f13c:	68fb      	ldr	r3, [r7, #12]
 800f13e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f142:	2b00      	cmp	r3, #0
 800f144:	d009      	beq.n	800f15a <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	681b      	ldr	r3, [r3, #0]
 800f14a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800f14e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800f156:	6878      	ldr	r0, [r7, #4]
 800f158:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800f15a:	68bb      	ldr	r3, [r7, #8]
 800f15c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f160:	2b00      	cmp	r3, #0
 800f162:	d00e      	beq.n	800f182 <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800f164:	68fb      	ldr	r3, [r7, #12]
 800f166:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d009      	beq.n	800f182 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	681b      	ldr	r3, [r3, #0]
 800f172:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800f176:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800f17e:	6878      	ldr	r0, [r7, #4]
 800f180:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800f182:	68bb      	ldr	r3, [r7, #8]
 800f184:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d00e      	beq.n	800f1aa <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f192:	2b00      	cmp	r3, #0
 800f194:	d009      	beq.n	800f1aa <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800f19e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f1a6:	6878      	ldr	r0, [r7, #4]
 800f1a8:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800f1aa:	68bb      	ldr	r3, [r7, #8]
 800f1ac:	f003 0320 	and.w	r3, r3, #32
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d00e      	beq.n	800f1d2 <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800f1b4:	68fb      	ldr	r3, [r7, #12]
 800f1b6:	f003 0320 	and.w	r3, r3, #32
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d009      	beq.n	800f1d2 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	f06f 0220 	mvn.w	r2, #32
 800f1c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800f1ce:	6878      	ldr	r0, [r7, #4]
 800f1d0:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800f1d2:	68bb      	ldr	r3, [r7, #8]
 800f1d4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d00e      	beq.n	800f1fa <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d009      	beq.n	800f1fa <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800f1ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800f1f6:	6878      	ldr	r0, [r7, #4]
 800f1f8:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800f1fa:	68bb      	ldr	r3, [r7, #8]
 800f1fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800f200:	2b00      	cmp	r3, #0
 800f202:	d00e      	beq.n	800f222 <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d009      	beq.n	800f222 <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	681b      	ldr	r3, [r3, #0]
 800f212:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800f216:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800f21e:	6878      	ldr	r0, [r7, #4]
 800f220:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800f222:	68bb      	ldr	r3, [r7, #8]
 800f224:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d00e      	beq.n	800f24a <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800f232:	2b00      	cmp	r3, #0
 800f234:	d009      	beq.n	800f24a <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	681b      	ldr	r3, [r3, #0]
 800f23a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800f23e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800f246:	6878      	ldr	r0, [r7, #4]
 800f248:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800f24a:	68bb      	ldr	r3, [r7, #8]
 800f24c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f250:	2b00      	cmp	r3, #0
 800f252:	d00e      	beq.n	800f272 <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d009      	beq.n	800f272 <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	681b      	ldr	r3, [r3, #0]
 800f262:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800f266:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800f26e:	6878      	ldr	r0, [r7, #4]
 800f270:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f272:	bf00      	nop
 800f274:	3710      	adds	r7, #16
 800f276:	46bd      	mov	sp, r7
 800f278:	bd80      	pop	{r7, pc}
	...

0800f27c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f27c:	b580      	push	{r7, lr}
 800f27e:	b086      	sub	sp, #24
 800f280:	af00      	add	r7, sp, #0
 800f282:	60f8      	str	r0, [r7, #12]
 800f284:	60b9      	str	r1, [r7, #8]
 800f286:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f288:	2300      	movs	r3, #0
 800f28a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f28c:	68fb      	ldr	r3, [r7, #12]
 800f28e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f292:	2b01      	cmp	r3, #1
 800f294:	d101      	bne.n	800f29a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800f296:	2302      	movs	r3, #2
 800f298:	e0ff      	b.n	800f49a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800f29a:	68fb      	ldr	r3, [r7, #12]
 800f29c:	2201      	movs	r2, #1
 800f29e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	2b14      	cmp	r3, #20
 800f2a6:	f200 80f0 	bhi.w	800f48a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800f2aa:	a201      	add	r2, pc, #4	@ (adr r2, 800f2b0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800f2ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2b0:	0800f305 	.word	0x0800f305
 800f2b4:	0800f48b 	.word	0x0800f48b
 800f2b8:	0800f48b 	.word	0x0800f48b
 800f2bc:	0800f48b 	.word	0x0800f48b
 800f2c0:	0800f345 	.word	0x0800f345
 800f2c4:	0800f48b 	.word	0x0800f48b
 800f2c8:	0800f48b 	.word	0x0800f48b
 800f2cc:	0800f48b 	.word	0x0800f48b
 800f2d0:	0800f387 	.word	0x0800f387
 800f2d4:	0800f48b 	.word	0x0800f48b
 800f2d8:	0800f48b 	.word	0x0800f48b
 800f2dc:	0800f48b 	.word	0x0800f48b
 800f2e0:	0800f3c7 	.word	0x0800f3c7
 800f2e4:	0800f48b 	.word	0x0800f48b
 800f2e8:	0800f48b 	.word	0x0800f48b
 800f2ec:	0800f48b 	.word	0x0800f48b
 800f2f0:	0800f409 	.word	0x0800f409
 800f2f4:	0800f48b 	.word	0x0800f48b
 800f2f8:	0800f48b 	.word	0x0800f48b
 800f2fc:	0800f48b 	.word	0x0800f48b
 800f300:	0800f449 	.word	0x0800f449
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f304:	68fb      	ldr	r3, [r7, #12]
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	68b9      	ldr	r1, [r7, #8]
 800f30a:	4618      	mov	r0, r3
 800f30c:	f000 fc4e 	bl	800fbac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	681b      	ldr	r3, [r3, #0]
 800f314:	699a      	ldr	r2, [r3, #24]
 800f316:	68fb      	ldr	r3, [r7, #12]
 800f318:	681b      	ldr	r3, [r3, #0]
 800f31a:	f042 0208 	orr.w	r2, r2, #8
 800f31e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f320:	68fb      	ldr	r3, [r7, #12]
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	699a      	ldr	r2, [r3, #24]
 800f326:	68fb      	ldr	r3, [r7, #12]
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	f022 0204 	bic.w	r2, r2, #4
 800f32e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f330:	68fb      	ldr	r3, [r7, #12]
 800f332:	681b      	ldr	r3, [r3, #0]
 800f334:	6999      	ldr	r1, [r3, #24]
 800f336:	68bb      	ldr	r3, [r7, #8]
 800f338:	691a      	ldr	r2, [r3, #16]
 800f33a:	68fb      	ldr	r3, [r7, #12]
 800f33c:	681b      	ldr	r3, [r3, #0]
 800f33e:	430a      	orrs	r2, r1
 800f340:	619a      	str	r2, [r3, #24]
      break;
 800f342:	e0a5      	b.n	800f490 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f344:	68fb      	ldr	r3, [r7, #12]
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	68b9      	ldr	r1, [r7, #8]
 800f34a:	4618      	mov	r0, r3
 800f34c:	f000 fcc8 	bl	800fce0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	699a      	ldr	r2, [r3, #24]
 800f356:	68fb      	ldr	r3, [r7, #12]
 800f358:	681b      	ldr	r3, [r3, #0]
 800f35a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800f35e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f360:	68fb      	ldr	r3, [r7, #12]
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	699a      	ldr	r2, [r3, #24]
 800f366:	68fb      	ldr	r3, [r7, #12]
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800f36e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	6999      	ldr	r1, [r3, #24]
 800f376:	68bb      	ldr	r3, [r7, #8]
 800f378:	691b      	ldr	r3, [r3, #16]
 800f37a:	021a      	lsls	r2, r3, #8
 800f37c:	68fb      	ldr	r3, [r7, #12]
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	430a      	orrs	r2, r1
 800f382:	619a      	str	r2, [r3, #24]
      break;
 800f384:	e084      	b.n	800f490 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f386:	68fb      	ldr	r3, [r7, #12]
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	68b9      	ldr	r1, [r7, #8]
 800f38c:	4618      	mov	r0, r3
 800f38e:	f000 fd3b 	bl	800fe08 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f392:	68fb      	ldr	r3, [r7, #12]
 800f394:	681b      	ldr	r3, [r3, #0]
 800f396:	69da      	ldr	r2, [r3, #28]
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	f042 0208 	orr.w	r2, r2, #8
 800f3a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f3a2:	68fb      	ldr	r3, [r7, #12]
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	69da      	ldr	r2, [r3, #28]
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	681b      	ldr	r3, [r3, #0]
 800f3ac:	f022 0204 	bic.w	r2, r2, #4
 800f3b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f3b2:	68fb      	ldr	r3, [r7, #12]
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	69d9      	ldr	r1, [r3, #28]
 800f3b8:	68bb      	ldr	r3, [r7, #8]
 800f3ba:	691a      	ldr	r2, [r3, #16]
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	430a      	orrs	r2, r1
 800f3c2:	61da      	str	r2, [r3, #28]
      break;
 800f3c4:	e064      	b.n	800f490 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f3c6:	68fb      	ldr	r3, [r7, #12]
 800f3c8:	681b      	ldr	r3, [r3, #0]
 800f3ca:	68b9      	ldr	r1, [r7, #8]
 800f3cc:	4618      	mov	r0, r3
 800f3ce:	f000 fdad 	bl	800ff2c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f3d2:	68fb      	ldr	r3, [r7, #12]
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	69da      	ldr	r2, [r3, #28]
 800f3d8:	68fb      	ldr	r3, [r7, #12]
 800f3da:	681b      	ldr	r3, [r3, #0]
 800f3dc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800f3e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f3e2:	68fb      	ldr	r3, [r7, #12]
 800f3e4:	681b      	ldr	r3, [r3, #0]
 800f3e6:	69da      	ldr	r2, [r3, #28]
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800f3f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f3f2:	68fb      	ldr	r3, [r7, #12]
 800f3f4:	681b      	ldr	r3, [r3, #0]
 800f3f6:	69d9      	ldr	r1, [r3, #28]
 800f3f8:	68bb      	ldr	r3, [r7, #8]
 800f3fa:	691b      	ldr	r3, [r3, #16]
 800f3fc:	021a      	lsls	r2, r3, #8
 800f3fe:	68fb      	ldr	r3, [r7, #12]
 800f400:	681b      	ldr	r3, [r3, #0]
 800f402:	430a      	orrs	r2, r1
 800f404:	61da      	str	r2, [r3, #28]
      break;
 800f406:	e043      	b.n	800f490 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800f408:	68fb      	ldr	r3, [r7, #12]
 800f40a:	681b      	ldr	r3, [r3, #0]
 800f40c:	68b9      	ldr	r1, [r7, #8]
 800f40e:	4618      	mov	r0, r3
 800f410:	f000 fe20 	bl	8010054 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	681b      	ldr	r3, [r3, #0]
 800f418:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f41a:	68fb      	ldr	r3, [r7, #12]
 800f41c:	681b      	ldr	r3, [r3, #0]
 800f41e:	f042 0208 	orr.w	r2, r2, #8
 800f422:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800f424:	68fb      	ldr	r3, [r7, #12]
 800f426:	681b      	ldr	r3, [r3, #0]
 800f428:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	f022 0204 	bic.w	r2, r2, #4
 800f432:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800f434:	68fb      	ldr	r3, [r7, #12]
 800f436:	681b      	ldr	r3, [r3, #0]
 800f438:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800f43a:	68bb      	ldr	r3, [r7, #8]
 800f43c:	691a      	ldr	r2, [r3, #16]
 800f43e:	68fb      	ldr	r3, [r7, #12]
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	430a      	orrs	r2, r1
 800f444:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800f446:	e023      	b.n	800f490 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800f448:	68fb      	ldr	r3, [r7, #12]
 800f44a:	681b      	ldr	r3, [r3, #0]
 800f44c:	68b9      	ldr	r1, [r7, #8]
 800f44e:	4618      	mov	r0, r3
 800f450:	f000 fe6a 	bl	8010128 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800f454:	68fb      	ldr	r3, [r7, #12]
 800f456:	681b      	ldr	r3, [r3, #0]
 800f458:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f45a:	68fb      	ldr	r3, [r7, #12]
 800f45c:	681b      	ldr	r3, [r3, #0]
 800f45e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800f462:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800f464:	68fb      	ldr	r3, [r7, #12]
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f46a:	68fb      	ldr	r3, [r7, #12]
 800f46c:	681b      	ldr	r3, [r3, #0]
 800f46e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800f472:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800f474:	68fb      	ldr	r3, [r7, #12]
 800f476:	681b      	ldr	r3, [r3, #0]
 800f478:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800f47a:	68bb      	ldr	r3, [r7, #8]
 800f47c:	691b      	ldr	r3, [r3, #16]
 800f47e:	021a      	lsls	r2, r3, #8
 800f480:	68fb      	ldr	r3, [r7, #12]
 800f482:	681b      	ldr	r3, [r3, #0]
 800f484:	430a      	orrs	r2, r1
 800f486:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800f488:	e002      	b.n	800f490 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800f48a:	2301      	movs	r3, #1
 800f48c:	75fb      	strb	r3, [r7, #23]
      break;
 800f48e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800f490:	68fb      	ldr	r3, [r7, #12]
 800f492:	2200      	movs	r2, #0
 800f494:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800f498:	7dfb      	ldrb	r3, [r7, #23]
}
 800f49a:	4618      	mov	r0, r3
 800f49c:	3718      	adds	r7, #24
 800f49e:	46bd      	mov	sp, r7
 800f4a0:	bd80      	pop	{r7, pc}
 800f4a2:	bf00      	nop

0800f4a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800f4a4:	b580      	push	{r7, lr}
 800f4a6:	b084      	sub	sp, #16
 800f4a8:	af00      	add	r7, sp, #0
 800f4aa:	6078      	str	r0, [r7, #4]
 800f4ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f4ae:	2300      	movs	r3, #0
 800f4b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f4b8:	2b01      	cmp	r3, #1
 800f4ba:	d101      	bne.n	800f4c0 <HAL_TIM_ConfigClockSource+0x1c>
 800f4bc:	2302      	movs	r3, #2
 800f4be:	e0f6      	b.n	800f6ae <HAL_TIM_ConfigClockSource+0x20a>
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	2201      	movs	r2, #1
 800f4c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	2202      	movs	r2, #2
 800f4cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	681b      	ldr	r3, [r3, #0]
 800f4d4:	689b      	ldr	r3, [r3, #8]
 800f4d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800f4d8:	68bb      	ldr	r3, [r7, #8]
 800f4da:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800f4de:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800f4e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f4e4:	68bb      	ldr	r3, [r7, #8]
 800f4e6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800f4ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	681b      	ldr	r3, [r3, #0]
 800f4f0:	68ba      	ldr	r2, [r7, #8]
 800f4f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800f4f4:	683b      	ldr	r3, [r7, #0]
 800f4f6:	681b      	ldr	r3, [r3, #0]
 800f4f8:	4a6f      	ldr	r2, [pc, #444]	@ (800f6b8 <HAL_TIM_ConfigClockSource+0x214>)
 800f4fa:	4293      	cmp	r3, r2
 800f4fc:	f000 80c1 	beq.w	800f682 <HAL_TIM_ConfigClockSource+0x1de>
 800f500:	4a6d      	ldr	r2, [pc, #436]	@ (800f6b8 <HAL_TIM_ConfigClockSource+0x214>)
 800f502:	4293      	cmp	r3, r2
 800f504:	f200 80c6 	bhi.w	800f694 <HAL_TIM_ConfigClockSource+0x1f0>
 800f508:	4a6c      	ldr	r2, [pc, #432]	@ (800f6bc <HAL_TIM_ConfigClockSource+0x218>)
 800f50a:	4293      	cmp	r3, r2
 800f50c:	f000 80b9 	beq.w	800f682 <HAL_TIM_ConfigClockSource+0x1de>
 800f510:	4a6a      	ldr	r2, [pc, #424]	@ (800f6bc <HAL_TIM_ConfigClockSource+0x218>)
 800f512:	4293      	cmp	r3, r2
 800f514:	f200 80be 	bhi.w	800f694 <HAL_TIM_ConfigClockSource+0x1f0>
 800f518:	4a69      	ldr	r2, [pc, #420]	@ (800f6c0 <HAL_TIM_ConfigClockSource+0x21c>)
 800f51a:	4293      	cmp	r3, r2
 800f51c:	f000 80b1 	beq.w	800f682 <HAL_TIM_ConfigClockSource+0x1de>
 800f520:	4a67      	ldr	r2, [pc, #412]	@ (800f6c0 <HAL_TIM_ConfigClockSource+0x21c>)
 800f522:	4293      	cmp	r3, r2
 800f524:	f200 80b6 	bhi.w	800f694 <HAL_TIM_ConfigClockSource+0x1f0>
 800f528:	4a66      	ldr	r2, [pc, #408]	@ (800f6c4 <HAL_TIM_ConfigClockSource+0x220>)
 800f52a:	4293      	cmp	r3, r2
 800f52c:	f000 80a9 	beq.w	800f682 <HAL_TIM_ConfigClockSource+0x1de>
 800f530:	4a64      	ldr	r2, [pc, #400]	@ (800f6c4 <HAL_TIM_ConfigClockSource+0x220>)
 800f532:	4293      	cmp	r3, r2
 800f534:	f200 80ae 	bhi.w	800f694 <HAL_TIM_ConfigClockSource+0x1f0>
 800f538:	4a63      	ldr	r2, [pc, #396]	@ (800f6c8 <HAL_TIM_ConfigClockSource+0x224>)
 800f53a:	4293      	cmp	r3, r2
 800f53c:	f000 80a1 	beq.w	800f682 <HAL_TIM_ConfigClockSource+0x1de>
 800f540:	4a61      	ldr	r2, [pc, #388]	@ (800f6c8 <HAL_TIM_ConfigClockSource+0x224>)
 800f542:	4293      	cmp	r3, r2
 800f544:	f200 80a6 	bhi.w	800f694 <HAL_TIM_ConfigClockSource+0x1f0>
 800f548:	4a60      	ldr	r2, [pc, #384]	@ (800f6cc <HAL_TIM_ConfigClockSource+0x228>)
 800f54a:	4293      	cmp	r3, r2
 800f54c:	f000 8099 	beq.w	800f682 <HAL_TIM_ConfigClockSource+0x1de>
 800f550:	4a5e      	ldr	r2, [pc, #376]	@ (800f6cc <HAL_TIM_ConfigClockSource+0x228>)
 800f552:	4293      	cmp	r3, r2
 800f554:	f200 809e 	bhi.w	800f694 <HAL_TIM_ConfigClockSource+0x1f0>
 800f558:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800f55c:	f000 8091 	beq.w	800f682 <HAL_TIM_ConfigClockSource+0x1de>
 800f560:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800f564:	f200 8096 	bhi.w	800f694 <HAL_TIM_ConfigClockSource+0x1f0>
 800f568:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f56c:	f000 8089 	beq.w	800f682 <HAL_TIM_ConfigClockSource+0x1de>
 800f570:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f574:	f200 808e 	bhi.w	800f694 <HAL_TIM_ConfigClockSource+0x1f0>
 800f578:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f57c:	d03e      	beq.n	800f5fc <HAL_TIM_ConfigClockSource+0x158>
 800f57e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f582:	f200 8087 	bhi.w	800f694 <HAL_TIM_ConfigClockSource+0x1f0>
 800f586:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f58a:	f000 8086 	beq.w	800f69a <HAL_TIM_ConfigClockSource+0x1f6>
 800f58e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f592:	d87f      	bhi.n	800f694 <HAL_TIM_ConfigClockSource+0x1f0>
 800f594:	2b70      	cmp	r3, #112	@ 0x70
 800f596:	d01a      	beq.n	800f5ce <HAL_TIM_ConfigClockSource+0x12a>
 800f598:	2b70      	cmp	r3, #112	@ 0x70
 800f59a:	d87b      	bhi.n	800f694 <HAL_TIM_ConfigClockSource+0x1f0>
 800f59c:	2b60      	cmp	r3, #96	@ 0x60
 800f59e:	d050      	beq.n	800f642 <HAL_TIM_ConfigClockSource+0x19e>
 800f5a0:	2b60      	cmp	r3, #96	@ 0x60
 800f5a2:	d877      	bhi.n	800f694 <HAL_TIM_ConfigClockSource+0x1f0>
 800f5a4:	2b50      	cmp	r3, #80	@ 0x50
 800f5a6:	d03c      	beq.n	800f622 <HAL_TIM_ConfigClockSource+0x17e>
 800f5a8:	2b50      	cmp	r3, #80	@ 0x50
 800f5aa:	d873      	bhi.n	800f694 <HAL_TIM_ConfigClockSource+0x1f0>
 800f5ac:	2b40      	cmp	r3, #64	@ 0x40
 800f5ae:	d058      	beq.n	800f662 <HAL_TIM_ConfigClockSource+0x1be>
 800f5b0:	2b40      	cmp	r3, #64	@ 0x40
 800f5b2:	d86f      	bhi.n	800f694 <HAL_TIM_ConfigClockSource+0x1f0>
 800f5b4:	2b30      	cmp	r3, #48	@ 0x30
 800f5b6:	d064      	beq.n	800f682 <HAL_TIM_ConfigClockSource+0x1de>
 800f5b8:	2b30      	cmp	r3, #48	@ 0x30
 800f5ba:	d86b      	bhi.n	800f694 <HAL_TIM_ConfigClockSource+0x1f0>
 800f5bc:	2b20      	cmp	r3, #32
 800f5be:	d060      	beq.n	800f682 <HAL_TIM_ConfigClockSource+0x1de>
 800f5c0:	2b20      	cmp	r3, #32
 800f5c2:	d867      	bhi.n	800f694 <HAL_TIM_ConfigClockSource+0x1f0>
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d05c      	beq.n	800f682 <HAL_TIM_ConfigClockSource+0x1de>
 800f5c8:	2b10      	cmp	r3, #16
 800f5ca:	d05a      	beq.n	800f682 <HAL_TIM_ConfigClockSource+0x1de>
 800f5cc:	e062      	b.n	800f694 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800f5d2:	683b      	ldr	r3, [r7, #0]
 800f5d4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800f5d6:	683b      	ldr	r3, [r7, #0]
 800f5d8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800f5da:	683b      	ldr	r3, [r7, #0]
 800f5dc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800f5de:	f000 fe8b 	bl	80102f8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	681b      	ldr	r3, [r3, #0]
 800f5e6:	689b      	ldr	r3, [r3, #8]
 800f5e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f5ea:	68bb      	ldr	r3, [r7, #8]
 800f5ec:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800f5f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	681b      	ldr	r3, [r3, #0]
 800f5f6:	68ba      	ldr	r2, [r7, #8]
 800f5f8:	609a      	str	r2, [r3, #8]
      break;
 800f5fa:	e04f      	b.n	800f69c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800f600:	683b      	ldr	r3, [r7, #0]
 800f602:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800f604:	683b      	ldr	r3, [r7, #0]
 800f606:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800f608:	683b      	ldr	r3, [r7, #0]
 800f60a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800f60c:	f000 fe74 	bl	80102f8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	681b      	ldr	r3, [r3, #0]
 800f614:	689a      	ldr	r2, [r3, #8]
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	681b      	ldr	r3, [r3, #0]
 800f61a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f61e:	609a      	str	r2, [r3, #8]
      break;
 800f620:	e03c      	b.n	800f69c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f626:	683b      	ldr	r3, [r7, #0]
 800f628:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f62a:	683b      	ldr	r3, [r7, #0]
 800f62c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f62e:	461a      	mov	r2, r3
 800f630:	f000 fde6 	bl	8010200 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	681b      	ldr	r3, [r3, #0]
 800f638:	2150      	movs	r1, #80	@ 0x50
 800f63a:	4618      	mov	r0, r3
 800f63c:	f000 fe3f 	bl	80102be <TIM_ITRx_SetConfig>
      break;
 800f640:	e02c      	b.n	800f69c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f646:	683b      	ldr	r3, [r7, #0]
 800f648:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f64a:	683b      	ldr	r3, [r7, #0]
 800f64c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800f64e:	461a      	mov	r2, r3
 800f650:	f000 fe05 	bl	801025e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	2160      	movs	r1, #96	@ 0x60
 800f65a:	4618      	mov	r0, r3
 800f65c:	f000 fe2f 	bl	80102be <TIM_ITRx_SetConfig>
      break;
 800f660:	e01c      	b.n	800f69c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f666:	683b      	ldr	r3, [r7, #0]
 800f668:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f66a:	683b      	ldr	r3, [r7, #0]
 800f66c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f66e:	461a      	mov	r2, r3
 800f670:	f000 fdc6 	bl	8010200 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	681b      	ldr	r3, [r3, #0]
 800f678:	2140      	movs	r1, #64	@ 0x40
 800f67a:	4618      	mov	r0, r3
 800f67c:	f000 fe1f 	bl	80102be <TIM_ITRx_SetConfig>
      break;
 800f680:	e00c      	b.n	800f69c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	681a      	ldr	r2, [r3, #0]
 800f686:	683b      	ldr	r3, [r7, #0]
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	4619      	mov	r1, r3
 800f68c:	4610      	mov	r0, r2
 800f68e:	f000 fe16 	bl	80102be <TIM_ITRx_SetConfig>
      break;
 800f692:	e003      	b.n	800f69c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800f694:	2301      	movs	r3, #1
 800f696:	73fb      	strb	r3, [r7, #15]
      break;
 800f698:	e000      	b.n	800f69c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800f69a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	2201      	movs	r2, #1
 800f6a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	2200      	movs	r2, #0
 800f6a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800f6ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800f6ae:	4618      	mov	r0, r3
 800f6b0:	3710      	adds	r7, #16
 800f6b2:	46bd      	mov	sp, r7
 800f6b4:	bd80      	pop	{r7, pc}
 800f6b6:	bf00      	nop
 800f6b8:	00100070 	.word	0x00100070
 800f6bc:	00100060 	.word	0x00100060
 800f6c0:	00100050 	.word	0x00100050
 800f6c4:	00100040 	.word	0x00100040
 800f6c8:	00100030 	.word	0x00100030
 800f6cc:	00100020 	.word	0x00100020

0800f6d0 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800f6d0:	b480      	push	{r7}
 800f6d2:	b083      	sub	sp, #12
 800f6d4:	af00      	add	r7, sp, #0
 800f6d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800f6d8:	bf00      	nop
 800f6da:	370c      	adds	r7, #12
 800f6dc:	46bd      	mov	sp, r7
 800f6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6e2:	4770      	bx	lr

0800f6e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f6e4:	b480      	push	{r7}
 800f6e6:	b083      	sub	sp, #12
 800f6e8:	af00      	add	r7, sp, #0
 800f6ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f6ec:	bf00      	nop
 800f6ee:	370c      	adds	r7, #12
 800f6f0:	46bd      	mov	sp, r7
 800f6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6f6:	4770      	bx	lr

0800f6f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f6f8:	b480      	push	{r7}
 800f6fa:	b083      	sub	sp, #12
 800f6fc:	af00      	add	r7, sp, #0
 800f6fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f700:	bf00      	nop
 800f702:	370c      	adds	r7, #12
 800f704:	46bd      	mov	sp, r7
 800f706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f70a:	4770      	bx	lr

0800f70c <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800f70c:	b480      	push	{r7}
 800f70e:	b083      	sub	sp, #12
 800f710:	af00      	add	r7, sp, #0
 800f712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800f714:	bf00      	nop
 800f716:	370c      	adds	r7, #12
 800f718:	46bd      	mov	sp, r7
 800f71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f71e:	4770      	bx	lr

0800f720 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f720:	b480      	push	{r7}
 800f722:	b083      	sub	sp, #12
 800f724:	af00      	add	r7, sp, #0
 800f726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f728:	bf00      	nop
 800f72a:	370c      	adds	r7, #12
 800f72c:	46bd      	mov	sp, r7
 800f72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f732:	4770      	bx	lr

0800f734 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800f734:	b480      	push	{r7}
 800f736:	b083      	sub	sp, #12
 800f738:	af00      	add	r7, sp, #0
 800f73a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800f73c:	bf00      	nop
 800f73e:	370c      	adds	r7, #12
 800f740:	46bd      	mov	sp, r7
 800f742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f746:	4770      	bx	lr

0800f748 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f748:	b480      	push	{r7}
 800f74a:	b083      	sub	sp, #12
 800f74c:	af00      	add	r7, sp, #0
 800f74e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f750:	bf00      	nop
 800f752:	370c      	adds	r7, #12
 800f754:	46bd      	mov	sp, r7
 800f756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f75a:	4770      	bx	lr

0800f75c <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800f75c:	b480      	push	{r7}
 800f75e:	b083      	sub	sp, #12
 800f760:	af00      	add	r7, sp, #0
 800f762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800f764:	bf00      	nop
 800f766:	370c      	adds	r7, #12
 800f768:	46bd      	mov	sp, r7
 800f76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f76e:	4770      	bx	lr

0800f770 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800f770:	b480      	push	{r7}
 800f772:	b083      	sub	sp, #12
 800f774:	af00      	add	r7, sp, #0
 800f776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800f778:	bf00      	nop
 800f77a:	370c      	adds	r7, #12
 800f77c:	46bd      	mov	sp, r7
 800f77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f782:	4770      	bx	lr

0800f784 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 800f784:	b480      	push	{r7}
 800f786:	b087      	sub	sp, #28
 800f788:	af00      	add	r7, sp, #0
 800f78a:	60f8      	str	r0, [r7, #12]
 800f78c:	460b      	mov	r3, r1
 800f78e:	607a      	str	r2, [r7, #4]
 800f790:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800f792:	2300      	movs	r3, #0
 800f794:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	2b00      	cmp	r3, #0
 800f79a:	d101      	bne.n	800f7a0 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 800f79c:	2301      	movs	r3, #1
 800f79e:	e14a      	b.n	800fa36 <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 800f7a0:	68fb      	ldr	r3, [r7, #12]
 800f7a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f7a6:	b2db      	uxtb	r3, r3
 800f7a8:	2b01      	cmp	r3, #1
 800f7aa:	f040 80dd 	bne.w	800f968 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 800f7ae:	7afb      	ldrb	r3, [r7, #11]
 800f7b0:	2b1f      	cmp	r3, #31
 800f7b2:	f200 80d6 	bhi.w	800f962 <HAL_TIM_RegisterCallback+0x1de>
 800f7b6:	a201      	add	r2, pc, #4	@ (adr r2, 800f7bc <HAL_TIM_RegisterCallback+0x38>)
 800f7b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7bc:	0800f83d 	.word	0x0800f83d
 800f7c0:	0800f845 	.word	0x0800f845
 800f7c4:	0800f84d 	.word	0x0800f84d
 800f7c8:	0800f855 	.word	0x0800f855
 800f7cc:	0800f85d 	.word	0x0800f85d
 800f7d0:	0800f865 	.word	0x0800f865
 800f7d4:	0800f86d 	.word	0x0800f86d
 800f7d8:	0800f875 	.word	0x0800f875
 800f7dc:	0800f87d 	.word	0x0800f87d
 800f7e0:	0800f885 	.word	0x0800f885
 800f7e4:	0800f88d 	.word	0x0800f88d
 800f7e8:	0800f895 	.word	0x0800f895
 800f7ec:	0800f89d 	.word	0x0800f89d
 800f7f0:	0800f8a5 	.word	0x0800f8a5
 800f7f4:	0800f8af 	.word	0x0800f8af
 800f7f8:	0800f8b9 	.word	0x0800f8b9
 800f7fc:	0800f8c3 	.word	0x0800f8c3
 800f800:	0800f8cd 	.word	0x0800f8cd
 800f804:	0800f8d7 	.word	0x0800f8d7
 800f808:	0800f8e1 	.word	0x0800f8e1
 800f80c:	0800f8eb 	.word	0x0800f8eb
 800f810:	0800f8f5 	.word	0x0800f8f5
 800f814:	0800f8ff 	.word	0x0800f8ff
 800f818:	0800f909 	.word	0x0800f909
 800f81c:	0800f913 	.word	0x0800f913
 800f820:	0800f91d 	.word	0x0800f91d
 800f824:	0800f927 	.word	0x0800f927
 800f828:	0800f931 	.word	0x0800f931
 800f82c:	0800f93b 	.word	0x0800f93b
 800f830:	0800f945 	.word	0x0800f945
 800f834:	0800f94f 	.word	0x0800f94f
 800f838:	0800f959 	.word	0x0800f959
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 800f83c:	68fb      	ldr	r3, [r7, #12]
 800f83e:	687a      	ldr	r2, [r7, #4]
 800f840:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800f842:	e0f7      	b.n	800fa34 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 800f844:	68fb      	ldr	r3, [r7, #12]
 800f846:	687a      	ldr	r2, [r7, #4]
 800f848:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800f84a:	e0f3      	b.n	800fa34 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 800f84c:	68fb      	ldr	r3, [r7, #12]
 800f84e:	687a      	ldr	r2, [r7, #4]
 800f850:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800f852:	e0ef      	b.n	800fa34 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	687a      	ldr	r2, [r7, #4]
 800f858:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800f85a:	e0eb      	b.n	800fa34 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 800f85c:	68fb      	ldr	r3, [r7, #12]
 800f85e:	687a      	ldr	r2, [r7, #4]
 800f860:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800f862:	e0e7      	b.n	800fa34 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 800f864:	68fb      	ldr	r3, [r7, #12]
 800f866:	687a      	ldr	r2, [r7, #4]
 800f868:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800f86a:	e0e3      	b.n	800fa34 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 800f86c:	68fb      	ldr	r3, [r7, #12]
 800f86e:	687a      	ldr	r2, [r7, #4]
 800f870:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800f872:	e0df      	b.n	800fa34 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 800f874:	68fb      	ldr	r3, [r7, #12]
 800f876:	687a      	ldr	r2, [r7, #4]
 800f878:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800f87a:	e0db      	b.n	800fa34 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 800f87c:	68fb      	ldr	r3, [r7, #12]
 800f87e:	687a      	ldr	r2, [r7, #4]
 800f880:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800f882:	e0d7      	b.n	800fa34 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 800f884:	68fb      	ldr	r3, [r7, #12]
 800f886:	687a      	ldr	r2, [r7, #4]
 800f888:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800f88a:	e0d3      	b.n	800fa34 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 800f88c:	68fb      	ldr	r3, [r7, #12]
 800f88e:	687a      	ldr	r2, [r7, #4]
 800f890:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800f892:	e0cf      	b.n	800fa34 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 800f894:	68fb      	ldr	r3, [r7, #12]
 800f896:	687a      	ldr	r2, [r7, #4]
 800f898:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800f89a:	e0cb      	b.n	800fa34 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 800f89c:	68fb      	ldr	r3, [r7, #12]
 800f89e:	687a      	ldr	r2, [r7, #4]
 800f8a0:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800f8a2:	e0c7      	b.n	800fa34 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 800f8a4:	68fb      	ldr	r3, [r7, #12]
 800f8a6:	687a      	ldr	r2, [r7, #4]
 800f8a8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800f8ac:	e0c2      	b.n	800fa34 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 800f8ae:	68fb      	ldr	r3, [r7, #12]
 800f8b0:	687a      	ldr	r2, [r7, #4]
 800f8b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 800f8b6:	e0bd      	b.n	800fa34 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800f8b8:	68fb      	ldr	r3, [r7, #12]
 800f8ba:	687a      	ldr	r2, [r7, #4]
 800f8bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 800f8c0:	e0b8      	b.n	800fa34 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 800f8c2:	68fb      	ldr	r3, [r7, #12]
 800f8c4:	687a      	ldr	r2, [r7, #4]
 800f8c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 800f8ca:	e0b3      	b.n	800fa34 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 800f8cc:	68fb      	ldr	r3, [r7, #12]
 800f8ce:	687a      	ldr	r2, [r7, #4]
 800f8d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 800f8d4:	e0ae      	b.n	800fa34 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 800f8d6:	68fb      	ldr	r3, [r7, #12]
 800f8d8:	687a      	ldr	r2, [r7, #4]
 800f8da:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800f8de:	e0a9      	b.n	800fa34 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 800f8e0:	68fb      	ldr	r3, [r7, #12]
 800f8e2:	687a      	ldr	r2, [r7, #4]
 800f8e4:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800f8e8:	e0a4      	b.n	800fa34 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800f8ea:	68fb      	ldr	r3, [r7, #12]
 800f8ec:	687a      	ldr	r2, [r7, #4]
 800f8ee:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800f8f2:	e09f      	b.n	800fa34 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 800f8f4:	68fb      	ldr	r3, [r7, #12]
 800f8f6:	687a      	ldr	r2, [r7, #4]
 800f8f8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800f8fc:	e09a      	b.n	800fa34 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 800f8fe:	68fb      	ldr	r3, [r7, #12]
 800f900:	687a      	ldr	r2, [r7, #4]
 800f902:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800f906:	e095      	b.n	800fa34 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 800f908:	68fb      	ldr	r3, [r7, #12]
 800f90a:	687a      	ldr	r2, [r7, #4]
 800f90c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800f910:	e090      	b.n	800fa34 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 800f912:	68fb      	ldr	r3, [r7, #12]
 800f914:	687a      	ldr	r2, [r7, #4]
 800f916:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800f91a:	e08b      	b.n	800fa34 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 800f91c:	68fb      	ldr	r3, [r7, #12]
 800f91e:	687a      	ldr	r2, [r7, #4]
 800f920:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800f924:	e086      	b.n	800fa34 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 800f926:	68fb      	ldr	r3, [r7, #12]
 800f928:	687a      	ldr	r2, [r7, #4]
 800f92a:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800f92e:	e081      	b.n	800fa34 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 800f930:	68fb      	ldr	r3, [r7, #12]
 800f932:	687a      	ldr	r2, [r7, #4]
 800f934:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800f938:	e07c      	b.n	800fa34 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	687a      	ldr	r2, [r7, #4]
 800f93e:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800f942:	e077      	b.n	800fa34 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 800f944:	68fb      	ldr	r3, [r7, #12]
 800f946:	687a      	ldr	r2, [r7, #4]
 800f948:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 800f94c:	e072      	b.n	800fa34 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 800f94e:	68fb      	ldr	r3, [r7, #12]
 800f950:	687a      	ldr	r2, [r7, #4]
 800f952:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800f956:	e06d      	b.n	800fa34 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 800f958:	68fb      	ldr	r3, [r7, #12]
 800f95a:	687a      	ldr	r2, [r7, #4]
 800f95c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800f960:	e068      	b.n	800fa34 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800f962:	2301      	movs	r3, #1
 800f964:	75fb      	strb	r3, [r7, #23]
        break;
 800f966:	e065      	b.n	800fa34 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 800f968:	68fb      	ldr	r3, [r7, #12]
 800f96a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f96e:	b2db      	uxtb	r3, r3
 800f970:	2b00      	cmp	r3, #0
 800f972:	d15d      	bne.n	800fa30 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 800f974:	7afb      	ldrb	r3, [r7, #11]
 800f976:	2b0d      	cmp	r3, #13
 800f978:	d857      	bhi.n	800fa2a <HAL_TIM_RegisterCallback+0x2a6>
 800f97a:	a201      	add	r2, pc, #4	@ (adr r2, 800f980 <HAL_TIM_RegisterCallback+0x1fc>)
 800f97c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f980:	0800f9b9 	.word	0x0800f9b9
 800f984:	0800f9c1 	.word	0x0800f9c1
 800f988:	0800f9c9 	.word	0x0800f9c9
 800f98c:	0800f9d1 	.word	0x0800f9d1
 800f990:	0800f9d9 	.word	0x0800f9d9
 800f994:	0800f9e1 	.word	0x0800f9e1
 800f998:	0800f9e9 	.word	0x0800f9e9
 800f99c:	0800f9f1 	.word	0x0800f9f1
 800f9a0:	0800f9f9 	.word	0x0800f9f9
 800f9a4:	0800fa01 	.word	0x0800fa01
 800f9a8:	0800fa09 	.word	0x0800fa09
 800f9ac:	0800fa11 	.word	0x0800fa11
 800f9b0:	0800fa19 	.word	0x0800fa19
 800f9b4:	0800fa21 	.word	0x0800fa21
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 800f9b8:	68fb      	ldr	r3, [r7, #12]
 800f9ba:	687a      	ldr	r2, [r7, #4]
 800f9bc:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800f9be:	e039      	b.n	800fa34 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 800f9c0:	68fb      	ldr	r3, [r7, #12]
 800f9c2:	687a      	ldr	r2, [r7, #4]
 800f9c4:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800f9c6:	e035      	b.n	800fa34 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 800f9c8:	68fb      	ldr	r3, [r7, #12]
 800f9ca:	687a      	ldr	r2, [r7, #4]
 800f9cc:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800f9ce:	e031      	b.n	800fa34 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	687a      	ldr	r2, [r7, #4]
 800f9d4:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800f9d6:	e02d      	b.n	800fa34 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 800f9d8:	68fb      	ldr	r3, [r7, #12]
 800f9da:	687a      	ldr	r2, [r7, #4]
 800f9dc:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800f9de:	e029      	b.n	800fa34 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 800f9e0:	68fb      	ldr	r3, [r7, #12]
 800f9e2:	687a      	ldr	r2, [r7, #4]
 800f9e4:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800f9e6:	e025      	b.n	800fa34 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 800f9e8:	68fb      	ldr	r3, [r7, #12]
 800f9ea:	687a      	ldr	r2, [r7, #4]
 800f9ec:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800f9ee:	e021      	b.n	800fa34 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 800f9f0:	68fb      	ldr	r3, [r7, #12]
 800f9f2:	687a      	ldr	r2, [r7, #4]
 800f9f4:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800f9f6:	e01d      	b.n	800fa34 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 800f9f8:	68fb      	ldr	r3, [r7, #12]
 800f9fa:	687a      	ldr	r2, [r7, #4]
 800f9fc:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800f9fe:	e019      	b.n	800fa34 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 800fa00:	68fb      	ldr	r3, [r7, #12]
 800fa02:	687a      	ldr	r2, [r7, #4]
 800fa04:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800fa06:	e015      	b.n	800fa34 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 800fa08:	68fb      	ldr	r3, [r7, #12]
 800fa0a:	687a      	ldr	r2, [r7, #4]
 800fa0c:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800fa0e:	e011      	b.n	800fa34 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 800fa10:	68fb      	ldr	r3, [r7, #12]
 800fa12:	687a      	ldr	r2, [r7, #4]
 800fa14:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800fa16:	e00d      	b.n	800fa34 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 800fa18:	68fb      	ldr	r3, [r7, #12]
 800fa1a:	687a      	ldr	r2, [r7, #4]
 800fa1c:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800fa1e:	e009      	b.n	800fa34 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 800fa20:	68fb      	ldr	r3, [r7, #12]
 800fa22:	687a      	ldr	r2, [r7, #4]
 800fa24:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800fa28:	e004      	b.n	800fa34 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800fa2a:	2301      	movs	r3, #1
 800fa2c:	75fb      	strb	r3, [r7, #23]
        break;
 800fa2e:	e001      	b.n	800fa34 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 800fa30:	2301      	movs	r3, #1
 800fa32:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800fa34:	7dfb      	ldrb	r3, [r7, #23]
}
 800fa36:	4618      	mov	r0, r3
 800fa38:	371c      	adds	r7, #28
 800fa3a:	46bd      	mov	sp, r7
 800fa3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa40:	4770      	bx	lr
 800fa42:	bf00      	nop

0800fa44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800fa44:	b480      	push	{r7}
 800fa46:	b085      	sub	sp, #20
 800fa48:	af00      	add	r7, sp, #0
 800fa4a:	6078      	str	r0, [r7, #4]
 800fa4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	681b      	ldr	r3, [r3, #0]
 800fa52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	4a4c      	ldr	r2, [pc, #304]	@ (800fb88 <TIM_Base_SetConfig+0x144>)
 800fa58:	4293      	cmp	r3, r2
 800fa5a:	d017      	beq.n	800fa8c <TIM_Base_SetConfig+0x48>
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fa62:	d013      	beq.n	800fa8c <TIM_Base_SetConfig+0x48>
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	4a49      	ldr	r2, [pc, #292]	@ (800fb8c <TIM_Base_SetConfig+0x148>)
 800fa68:	4293      	cmp	r3, r2
 800fa6a:	d00f      	beq.n	800fa8c <TIM_Base_SetConfig+0x48>
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	4a48      	ldr	r2, [pc, #288]	@ (800fb90 <TIM_Base_SetConfig+0x14c>)
 800fa70:	4293      	cmp	r3, r2
 800fa72:	d00b      	beq.n	800fa8c <TIM_Base_SetConfig+0x48>
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	4a47      	ldr	r2, [pc, #284]	@ (800fb94 <TIM_Base_SetConfig+0x150>)
 800fa78:	4293      	cmp	r3, r2
 800fa7a:	d007      	beq.n	800fa8c <TIM_Base_SetConfig+0x48>
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	4a46      	ldr	r2, [pc, #280]	@ (800fb98 <TIM_Base_SetConfig+0x154>)
 800fa80:	4293      	cmp	r3, r2
 800fa82:	d003      	beq.n	800fa8c <TIM_Base_SetConfig+0x48>
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	4a45      	ldr	r2, [pc, #276]	@ (800fb9c <TIM_Base_SetConfig+0x158>)
 800fa88:	4293      	cmp	r3, r2
 800fa8a:	d108      	bne.n	800fa9e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800fa8c:	68fb      	ldr	r3, [r7, #12]
 800fa8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fa92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800fa94:	683b      	ldr	r3, [r7, #0]
 800fa96:	685b      	ldr	r3, [r3, #4]
 800fa98:	68fa      	ldr	r2, [r7, #12]
 800fa9a:	4313      	orrs	r3, r2
 800fa9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	4a39      	ldr	r2, [pc, #228]	@ (800fb88 <TIM_Base_SetConfig+0x144>)
 800faa2:	4293      	cmp	r3, r2
 800faa4:	d023      	beq.n	800faee <TIM_Base_SetConfig+0xaa>
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800faac:	d01f      	beq.n	800faee <TIM_Base_SetConfig+0xaa>
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	4a36      	ldr	r2, [pc, #216]	@ (800fb8c <TIM_Base_SetConfig+0x148>)
 800fab2:	4293      	cmp	r3, r2
 800fab4:	d01b      	beq.n	800faee <TIM_Base_SetConfig+0xaa>
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	4a35      	ldr	r2, [pc, #212]	@ (800fb90 <TIM_Base_SetConfig+0x14c>)
 800faba:	4293      	cmp	r3, r2
 800fabc:	d017      	beq.n	800faee <TIM_Base_SetConfig+0xaa>
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	4a34      	ldr	r2, [pc, #208]	@ (800fb94 <TIM_Base_SetConfig+0x150>)
 800fac2:	4293      	cmp	r3, r2
 800fac4:	d013      	beq.n	800faee <TIM_Base_SetConfig+0xaa>
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	4a33      	ldr	r2, [pc, #204]	@ (800fb98 <TIM_Base_SetConfig+0x154>)
 800faca:	4293      	cmp	r3, r2
 800facc:	d00f      	beq.n	800faee <TIM_Base_SetConfig+0xaa>
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	4a33      	ldr	r2, [pc, #204]	@ (800fba0 <TIM_Base_SetConfig+0x15c>)
 800fad2:	4293      	cmp	r3, r2
 800fad4:	d00b      	beq.n	800faee <TIM_Base_SetConfig+0xaa>
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	4a32      	ldr	r2, [pc, #200]	@ (800fba4 <TIM_Base_SetConfig+0x160>)
 800fada:	4293      	cmp	r3, r2
 800fadc:	d007      	beq.n	800faee <TIM_Base_SetConfig+0xaa>
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	4a31      	ldr	r2, [pc, #196]	@ (800fba8 <TIM_Base_SetConfig+0x164>)
 800fae2:	4293      	cmp	r3, r2
 800fae4:	d003      	beq.n	800faee <TIM_Base_SetConfig+0xaa>
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	4a2c      	ldr	r2, [pc, #176]	@ (800fb9c <TIM_Base_SetConfig+0x158>)
 800faea:	4293      	cmp	r3, r2
 800faec:	d108      	bne.n	800fb00 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800faee:	68fb      	ldr	r3, [r7, #12]
 800faf0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800faf4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800faf6:	683b      	ldr	r3, [r7, #0]
 800faf8:	68db      	ldr	r3, [r3, #12]
 800fafa:	68fa      	ldr	r2, [r7, #12]
 800fafc:	4313      	orrs	r3, r2
 800fafe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800fb00:	68fb      	ldr	r3, [r7, #12]
 800fb02:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800fb06:	683b      	ldr	r3, [r7, #0]
 800fb08:	695b      	ldr	r3, [r3, #20]
 800fb0a:	4313      	orrs	r3, r2
 800fb0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	68fa      	ldr	r2, [r7, #12]
 800fb12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800fb14:	683b      	ldr	r3, [r7, #0]
 800fb16:	689a      	ldr	r2, [r3, #8]
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800fb1c:	683b      	ldr	r3, [r7, #0]
 800fb1e:	681a      	ldr	r2, [r3, #0]
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	4a18      	ldr	r2, [pc, #96]	@ (800fb88 <TIM_Base_SetConfig+0x144>)
 800fb28:	4293      	cmp	r3, r2
 800fb2a:	d013      	beq.n	800fb54 <TIM_Base_SetConfig+0x110>
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	4a1a      	ldr	r2, [pc, #104]	@ (800fb98 <TIM_Base_SetConfig+0x154>)
 800fb30:	4293      	cmp	r3, r2
 800fb32:	d00f      	beq.n	800fb54 <TIM_Base_SetConfig+0x110>
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	4a1a      	ldr	r2, [pc, #104]	@ (800fba0 <TIM_Base_SetConfig+0x15c>)
 800fb38:	4293      	cmp	r3, r2
 800fb3a:	d00b      	beq.n	800fb54 <TIM_Base_SetConfig+0x110>
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	4a19      	ldr	r2, [pc, #100]	@ (800fba4 <TIM_Base_SetConfig+0x160>)
 800fb40:	4293      	cmp	r3, r2
 800fb42:	d007      	beq.n	800fb54 <TIM_Base_SetConfig+0x110>
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	4a18      	ldr	r2, [pc, #96]	@ (800fba8 <TIM_Base_SetConfig+0x164>)
 800fb48:	4293      	cmp	r3, r2
 800fb4a:	d003      	beq.n	800fb54 <TIM_Base_SetConfig+0x110>
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	4a13      	ldr	r2, [pc, #76]	@ (800fb9c <TIM_Base_SetConfig+0x158>)
 800fb50:	4293      	cmp	r3, r2
 800fb52:	d103      	bne.n	800fb5c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800fb54:	683b      	ldr	r3, [r7, #0]
 800fb56:	691a      	ldr	r2, [r3, #16]
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	2201      	movs	r2, #1
 800fb60:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	691b      	ldr	r3, [r3, #16]
 800fb66:	f003 0301 	and.w	r3, r3, #1
 800fb6a:	2b01      	cmp	r3, #1
 800fb6c:	d105      	bne.n	800fb7a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	691b      	ldr	r3, [r3, #16]
 800fb72:	f023 0201 	bic.w	r2, r3, #1
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	611a      	str	r2, [r3, #16]
  }
}
 800fb7a:	bf00      	nop
 800fb7c:	3714      	adds	r7, #20
 800fb7e:	46bd      	mov	sp, r7
 800fb80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb84:	4770      	bx	lr
 800fb86:	bf00      	nop
 800fb88:	40012c00 	.word	0x40012c00
 800fb8c:	40000400 	.word	0x40000400
 800fb90:	40000800 	.word	0x40000800
 800fb94:	40000c00 	.word	0x40000c00
 800fb98:	40013400 	.word	0x40013400
 800fb9c:	40015000 	.word	0x40015000
 800fba0:	40014000 	.word	0x40014000
 800fba4:	40014400 	.word	0x40014400
 800fba8:	40014800 	.word	0x40014800

0800fbac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fbac:	b480      	push	{r7}
 800fbae:	b087      	sub	sp, #28
 800fbb0:	af00      	add	r7, sp, #0
 800fbb2:	6078      	str	r0, [r7, #4]
 800fbb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	6a1b      	ldr	r3, [r3, #32]
 800fbba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	6a1b      	ldr	r3, [r3, #32]
 800fbc0:	f023 0201 	bic.w	r2, r3, #1
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	685b      	ldr	r3, [r3, #4]
 800fbcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	699b      	ldr	r3, [r3, #24]
 800fbd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800fbd4:	68fb      	ldr	r3, [r7, #12]
 800fbd6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800fbda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fbde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800fbe0:	68fb      	ldr	r3, [r7, #12]
 800fbe2:	f023 0303 	bic.w	r3, r3, #3
 800fbe6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fbe8:	683b      	ldr	r3, [r7, #0]
 800fbea:	681b      	ldr	r3, [r3, #0]
 800fbec:	68fa      	ldr	r2, [r7, #12]
 800fbee:	4313      	orrs	r3, r2
 800fbf0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800fbf2:	697b      	ldr	r3, [r7, #20]
 800fbf4:	f023 0302 	bic.w	r3, r3, #2
 800fbf8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800fbfa:	683b      	ldr	r3, [r7, #0]
 800fbfc:	689b      	ldr	r3, [r3, #8]
 800fbfe:	697a      	ldr	r2, [r7, #20]
 800fc00:	4313      	orrs	r3, r2
 800fc02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	4a30      	ldr	r2, [pc, #192]	@ (800fcc8 <TIM_OC1_SetConfig+0x11c>)
 800fc08:	4293      	cmp	r3, r2
 800fc0a:	d013      	beq.n	800fc34 <TIM_OC1_SetConfig+0x88>
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	4a2f      	ldr	r2, [pc, #188]	@ (800fccc <TIM_OC1_SetConfig+0x120>)
 800fc10:	4293      	cmp	r3, r2
 800fc12:	d00f      	beq.n	800fc34 <TIM_OC1_SetConfig+0x88>
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	4a2e      	ldr	r2, [pc, #184]	@ (800fcd0 <TIM_OC1_SetConfig+0x124>)
 800fc18:	4293      	cmp	r3, r2
 800fc1a:	d00b      	beq.n	800fc34 <TIM_OC1_SetConfig+0x88>
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	4a2d      	ldr	r2, [pc, #180]	@ (800fcd4 <TIM_OC1_SetConfig+0x128>)
 800fc20:	4293      	cmp	r3, r2
 800fc22:	d007      	beq.n	800fc34 <TIM_OC1_SetConfig+0x88>
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	4a2c      	ldr	r2, [pc, #176]	@ (800fcd8 <TIM_OC1_SetConfig+0x12c>)
 800fc28:	4293      	cmp	r3, r2
 800fc2a:	d003      	beq.n	800fc34 <TIM_OC1_SetConfig+0x88>
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	4a2b      	ldr	r2, [pc, #172]	@ (800fcdc <TIM_OC1_SetConfig+0x130>)
 800fc30:	4293      	cmp	r3, r2
 800fc32:	d10c      	bne.n	800fc4e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800fc34:	697b      	ldr	r3, [r7, #20]
 800fc36:	f023 0308 	bic.w	r3, r3, #8
 800fc3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800fc3c:	683b      	ldr	r3, [r7, #0]
 800fc3e:	68db      	ldr	r3, [r3, #12]
 800fc40:	697a      	ldr	r2, [r7, #20]
 800fc42:	4313      	orrs	r3, r2
 800fc44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800fc46:	697b      	ldr	r3, [r7, #20]
 800fc48:	f023 0304 	bic.w	r3, r3, #4
 800fc4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	4a1d      	ldr	r2, [pc, #116]	@ (800fcc8 <TIM_OC1_SetConfig+0x11c>)
 800fc52:	4293      	cmp	r3, r2
 800fc54:	d013      	beq.n	800fc7e <TIM_OC1_SetConfig+0xd2>
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	4a1c      	ldr	r2, [pc, #112]	@ (800fccc <TIM_OC1_SetConfig+0x120>)
 800fc5a:	4293      	cmp	r3, r2
 800fc5c:	d00f      	beq.n	800fc7e <TIM_OC1_SetConfig+0xd2>
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	4a1b      	ldr	r2, [pc, #108]	@ (800fcd0 <TIM_OC1_SetConfig+0x124>)
 800fc62:	4293      	cmp	r3, r2
 800fc64:	d00b      	beq.n	800fc7e <TIM_OC1_SetConfig+0xd2>
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	4a1a      	ldr	r2, [pc, #104]	@ (800fcd4 <TIM_OC1_SetConfig+0x128>)
 800fc6a:	4293      	cmp	r3, r2
 800fc6c:	d007      	beq.n	800fc7e <TIM_OC1_SetConfig+0xd2>
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	4a19      	ldr	r2, [pc, #100]	@ (800fcd8 <TIM_OC1_SetConfig+0x12c>)
 800fc72:	4293      	cmp	r3, r2
 800fc74:	d003      	beq.n	800fc7e <TIM_OC1_SetConfig+0xd2>
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	4a18      	ldr	r2, [pc, #96]	@ (800fcdc <TIM_OC1_SetConfig+0x130>)
 800fc7a:	4293      	cmp	r3, r2
 800fc7c:	d111      	bne.n	800fca2 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800fc7e:	693b      	ldr	r3, [r7, #16]
 800fc80:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800fc84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800fc86:	693b      	ldr	r3, [r7, #16]
 800fc88:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800fc8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800fc8e:	683b      	ldr	r3, [r7, #0]
 800fc90:	695b      	ldr	r3, [r3, #20]
 800fc92:	693a      	ldr	r2, [r7, #16]
 800fc94:	4313      	orrs	r3, r2
 800fc96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800fc98:	683b      	ldr	r3, [r7, #0]
 800fc9a:	699b      	ldr	r3, [r3, #24]
 800fc9c:	693a      	ldr	r2, [r7, #16]
 800fc9e:	4313      	orrs	r3, r2
 800fca0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	693a      	ldr	r2, [r7, #16]
 800fca6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	68fa      	ldr	r2, [r7, #12]
 800fcac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800fcae:	683b      	ldr	r3, [r7, #0]
 800fcb0:	685a      	ldr	r2, [r3, #4]
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	697a      	ldr	r2, [r7, #20]
 800fcba:	621a      	str	r2, [r3, #32]
}
 800fcbc:	bf00      	nop
 800fcbe:	371c      	adds	r7, #28
 800fcc0:	46bd      	mov	sp, r7
 800fcc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcc6:	4770      	bx	lr
 800fcc8:	40012c00 	.word	0x40012c00
 800fccc:	40013400 	.word	0x40013400
 800fcd0:	40014000 	.word	0x40014000
 800fcd4:	40014400 	.word	0x40014400
 800fcd8:	40014800 	.word	0x40014800
 800fcdc:	40015000 	.word	0x40015000

0800fce0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fce0:	b480      	push	{r7}
 800fce2:	b087      	sub	sp, #28
 800fce4:	af00      	add	r7, sp, #0
 800fce6:	6078      	str	r0, [r7, #4]
 800fce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	6a1b      	ldr	r3, [r3, #32]
 800fcee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	6a1b      	ldr	r3, [r3, #32]
 800fcf4:	f023 0210 	bic.w	r2, r3, #16
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	685b      	ldr	r3, [r3, #4]
 800fd00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	699b      	ldr	r3, [r3, #24]
 800fd06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800fd08:	68fb      	ldr	r3, [r7, #12]
 800fd0a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800fd0e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800fd12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800fd14:	68fb      	ldr	r3, [r7, #12]
 800fd16:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800fd1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fd1c:	683b      	ldr	r3, [r7, #0]
 800fd1e:	681b      	ldr	r3, [r3, #0]
 800fd20:	021b      	lsls	r3, r3, #8
 800fd22:	68fa      	ldr	r2, [r7, #12]
 800fd24:	4313      	orrs	r3, r2
 800fd26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800fd28:	697b      	ldr	r3, [r7, #20]
 800fd2a:	f023 0320 	bic.w	r3, r3, #32
 800fd2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800fd30:	683b      	ldr	r3, [r7, #0]
 800fd32:	689b      	ldr	r3, [r3, #8]
 800fd34:	011b      	lsls	r3, r3, #4
 800fd36:	697a      	ldr	r2, [r7, #20]
 800fd38:	4313      	orrs	r3, r2
 800fd3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	4a2c      	ldr	r2, [pc, #176]	@ (800fdf0 <TIM_OC2_SetConfig+0x110>)
 800fd40:	4293      	cmp	r3, r2
 800fd42:	d007      	beq.n	800fd54 <TIM_OC2_SetConfig+0x74>
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	4a2b      	ldr	r2, [pc, #172]	@ (800fdf4 <TIM_OC2_SetConfig+0x114>)
 800fd48:	4293      	cmp	r3, r2
 800fd4a:	d003      	beq.n	800fd54 <TIM_OC2_SetConfig+0x74>
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	4a2a      	ldr	r2, [pc, #168]	@ (800fdf8 <TIM_OC2_SetConfig+0x118>)
 800fd50:	4293      	cmp	r3, r2
 800fd52:	d10d      	bne.n	800fd70 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800fd54:	697b      	ldr	r3, [r7, #20]
 800fd56:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800fd5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800fd5c:	683b      	ldr	r3, [r7, #0]
 800fd5e:	68db      	ldr	r3, [r3, #12]
 800fd60:	011b      	lsls	r3, r3, #4
 800fd62:	697a      	ldr	r2, [r7, #20]
 800fd64:	4313      	orrs	r3, r2
 800fd66:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800fd68:	697b      	ldr	r3, [r7, #20]
 800fd6a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fd6e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	4a1f      	ldr	r2, [pc, #124]	@ (800fdf0 <TIM_OC2_SetConfig+0x110>)
 800fd74:	4293      	cmp	r3, r2
 800fd76:	d013      	beq.n	800fda0 <TIM_OC2_SetConfig+0xc0>
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	4a1e      	ldr	r2, [pc, #120]	@ (800fdf4 <TIM_OC2_SetConfig+0x114>)
 800fd7c:	4293      	cmp	r3, r2
 800fd7e:	d00f      	beq.n	800fda0 <TIM_OC2_SetConfig+0xc0>
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	4a1e      	ldr	r2, [pc, #120]	@ (800fdfc <TIM_OC2_SetConfig+0x11c>)
 800fd84:	4293      	cmp	r3, r2
 800fd86:	d00b      	beq.n	800fda0 <TIM_OC2_SetConfig+0xc0>
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	4a1d      	ldr	r2, [pc, #116]	@ (800fe00 <TIM_OC2_SetConfig+0x120>)
 800fd8c:	4293      	cmp	r3, r2
 800fd8e:	d007      	beq.n	800fda0 <TIM_OC2_SetConfig+0xc0>
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	4a1c      	ldr	r2, [pc, #112]	@ (800fe04 <TIM_OC2_SetConfig+0x124>)
 800fd94:	4293      	cmp	r3, r2
 800fd96:	d003      	beq.n	800fda0 <TIM_OC2_SetConfig+0xc0>
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	4a17      	ldr	r2, [pc, #92]	@ (800fdf8 <TIM_OC2_SetConfig+0x118>)
 800fd9c:	4293      	cmp	r3, r2
 800fd9e:	d113      	bne.n	800fdc8 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800fda0:	693b      	ldr	r3, [r7, #16]
 800fda2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800fda6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800fda8:	693b      	ldr	r3, [r7, #16]
 800fdaa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800fdae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800fdb0:	683b      	ldr	r3, [r7, #0]
 800fdb2:	695b      	ldr	r3, [r3, #20]
 800fdb4:	009b      	lsls	r3, r3, #2
 800fdb6:	693a      	ldr	r2, [r7, #16]
 800fdb8:	4313      	orrs	r3, r2
 800fdba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800fdbc:	683b      	ldr	r3, [r7, #0]
 800fdbe:	699b      	ldr	r3, [r3, #24]
 800fdc0:	009b      	lsls	r3, r3, #2
 800fdc2:	693a      	ldr	r2, [r7, #16]
 800fdc4:	4313      	orrs	r3, r2
 800fdc6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	693a      	ldr	r2, [r7, #16]
 800fdcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	68fa      	ldr	r2, [r7, #12]
 800fdd2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800fdd4:	683b      	ldr	r3, [r7, #0]
 800fdd6:	685a      	ldr	r2, [r3, #4]
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	697a      	ldr	r2, [r7, #20]
 800fde0:	621a      	str	r2, [r3, #32]
}
 800fde2:	bf00      	nop
 800fde4:	371c      	adds	r7, #28
 800fde6:	46bd      	mov	sp, r7
 800fde8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdec:	4770      	bx	lr
 800fdee:	bf00      	nop
 800fdf0:	40012c00 	.word	0x40012c00
 800fdf4:	40013400 	.word	0x40013400
 800fdf8:	40015000 	.word	0x40015000
 800fdfc:	40014000 	.word	0x40014000
 800fe00:	40014400 	.word	0x40014400
 800fe04:	40014800 	.word	0x40014800

0800fe08 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fe08:	b480      	push	{r7}
 800fe0a:	b087      	sub	sp, #28
 800fe0c:	af00      	add	r7, sp, #0
 800fe0e:	6078      	str	r0, [r7, #4]
 800fe10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	6a1b      	ldr	r3, [r3, #32]
 800fe16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	6a1b      	ldr	r3, [r3, #32]
 800fe1c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	685b      	ldr	r3, [r3, #4]
 800fe28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	69db      	ldr	r3, [r3, #28]
 800fe2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800fe30:	68fb      	ldr	r3, [r7, #12]
 800fe32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800fe36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fe3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800fe3c:	68fb      	ldr	r3, [r7, #12]
 800fe3e:	f023 0303 	bic.w	r3, r3, #3
 800fe42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fe44:	683b      	ldr	r3, [r7, #0]
 800fe46:	681b      	ldr	r3, [r3, #0]
 800fe48:	68fa      	ldr	r2, [r7, #12]
 800fe4a:	4313      	orrs	r3, r2
 800fe4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800fe4e:	697b      	ldr	r3, [r7, #20]
 800fe50:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800fe54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800fe56:	683b      	ldr	r3, [r7, #0]
 800fe58:	689b      	ldr	r3, [r3, #8]
 800fe5a:	021b      	lsls	r3, r3, #8
 800fe5c:	697a      	ldr	r2, [r7, #20]
 800fe5e:	4313      	orrs	r3, r2
 800fe60:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	4a2b      	ldr	r2, [pc, #172]	@ (800ff14 <TIM_OC3_SetConfig+0x10c>)
 800fe66:	4293      	cmp	r3, r2
 800fe68:	d007      	beq.n	800fe7a <TIM_OC3_SetConfig+0x72>
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	4a2a      	ldr	r2, [pc, #168]	@ (800ff18 <TIM_OC3_SetConfig+0x110>)
 800fe6e:	4293      	cmp	r3, r2
 800fe70:	d003      	beq.n	800fe7a <TIM_OC3_SetConfig+0x72>
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	4a29      	ldr	r2, [pc, #164]	@ (800ff1c <TIM_OC3_SetConfig+0x114>)
 800fe76:	4293      	cmp	r3, r2
 800fe78:	d10d      	bne.n	800fe96 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800fe7a:	697b      	ldr	r3, [r7, #20]
 800fe7c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800fe80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800fe82:	683b      	ldr	r3, [r7, #0]
 800fe84:	68db      	ldr	r3, [r3, #12]
 800fe86:	021b      	lsls	r3, r3, #8
 800fe88:	697a      	ldr	r2, [r7, #20]
 800fe8a:	4313      	orrs	r3, r2
 800fe8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800fe8e:	697b      	ldr	r3, [r7, #20]
 800fe90:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800fe94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	4a1e      	ldr	r2, [pc, #120]	@ (800ff14 <TIM_OC3_SetConfig+0x10c>)
 800fe9a:	4293      	cmp	r3, r2
 800fe9c:	d013      	beq.n	800fec6 <TIM_OC3_SetConfig+0xbe>
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	4a1d      	ldr	r2, [pc, #116]	@ (800ff18 <TIM_OC3_SetConfig+0x110>)
 800fea2:	4293      	cmp	r3, r2
 800fea4:	d00f      	beq.n	800fec6 <TIM_OC3_SetConfig+0xbe>
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	4a1d      	ldr	r2, [pc, #116]	@ (800ff20 <TIM_OC3_SetConfig+0x118>)
 800feaa:	4293      	cmp	r3, r2
 800feac:	d00b      	beq.n	800fec6 <TIM_OC3_SetConfig+0xbe>
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	4a1c      	ldr	r2, [pc, #112]	@ (800ff24 <TIM_OC3_SetConfig+0x11c>)
 800feb2:	4293      	cmp	r3, r2
 800feb4:	d007      	beq.n	800fec6 <TIM_OC3_SetConfig+0xbe>
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	4a1b      	ldr	r2, [pc, #108]	@ (800ff28 <TIM_OC3_SetConfig+0x120>)
 800feba:	4293      	cmp	r3, r2
 800febc:	d003      	beq.n	800fec6 <TIM_OC3_SetConfig+0xbe>
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	4a16      	ldr	r2, [pc, #88]	@ (800ff1c <TIM_OC3_SetConfig+0x114>)
 800fec2:	4293      	cmp	r3, r2
 800fec4:	d113      	bne.n	800feee <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800fec6:	693b      	ldr	r3, [r7, #16]
 800fec8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800fecc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800fece:	693b      	ldr	r3, [r7, #16]
 800fed0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800fed4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800fed6:	683b      	ldr	r3, [r7, #0]
 800fed8:	695b      	ldr	r3, [r3, #20]
 800feda:	011b      	lsls	r3, r3, #4
 800fedc:	693a      	ldr	r2, [r7, #16]
 800fede:	4313      	orrs	r3, r2
 800fee0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800fee2:	683b      	ldr	r3, [r7, #0]
 800fee4:	699b      	ldr	r3, [r3, #24]
 800fee6:	011b      	lsls	r3, r3, #4
 800fee8:	693a      	ldr	r2, [r7, #16]
 800feea:	4313      	orrs	r3, r2
 800feec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	693a      	ldr	r2, [r7, #16]
 800fef2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	68fa      	ldr	r2, [r7, #12]
 800fef8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800fefa:	683b      	ldr	r3, [r7, #0]
 800fefc:	685a      	ldr	r2, [r3, #4]
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	697a      	ldr	r2, [r7, #20]
 800ff06:	621a      	str	r2, [r3, #32]
}
 800ff08:	bf00      	nop
 800ff0a:	371c      	adds	r7, #28
 800ff0c:	46bd      	mov	sp, r7
 800ff0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff12:	4770      	bx	lr
 800ff14:	40012c00 	.word	0x40012c00
 800ff18:	40013400 	.word	0x40013400
 800ff1c:	40015000 	.word	0x40015000
 800ff20:	40014000 	.word	0x40014000
 800ff24:	40014400 	.word	0x40014400
 800ff28:	40014800 	.word	0x40014800

0800ff2c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ff2c:	b480      	push	{r7}
 800ff2e:	b087      	sub	sp, #28
 800ff30:	af00      	add	r7, sp, #0
 800ff32:	6078      	str	r0, [r7, #4]
 800ff34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	6a1b      	ldr	r3, [r3, #32]
 800ff3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	6a1b      	ldr	r3, [r3, #32]
 800ff40:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	685b      	ldr	r3, [r3, #4]
 800ff4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	69db      	ldr	r3, [r3, #28]
 800ff52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ff54:	68fb      	ldr	r3, [r7, #12]
 800ff56:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ff5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ff5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ff60:	68fb      	ldr	r3, [r7, #12]
 800ff62:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ff66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ff68:	683b      	ldr	r3, [r7, #0]
 800ff6a:	681b      	ldr	r3, [r3, #0]
 800ff6c:	021b      	lsls	r3, r3, #8
 800ff6e:	68fa      	ldr	r2, [r7, #12]
 800ff70:	4313      	orrs	r3, r2
 800ff72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ff74:	697b      	ldr	r3, [r7, #20]
 800ff76:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ff7a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ff7c:	683b      	ldr	r3, [r7, #0]
 800ff7e:	689b      	ldr	r3, [r3, #8]
 800ff80:	031b      	lsls	r3, r3, #12
 800ff82:	697a      	ldr	r2, [r7, #20]
 800ff84:	4313      	orrs	r3, r2
 800ff86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	4a2c      	ldr	r2, [pc, #176]	@ (801003c <TIM_OC4_SetConfig+0x110>)
 800ff8c:	4293      	cmp	r3, r2
 800ff8e:	d007      	beq.n	800ffa0 <TIM_OC4_SetConfig+0x74>
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	4a2b      	ldr	r2, [pc, #172]	@ (8010040 <TIM_OC4_SetConfig+0x114>)
 800ff94:	4293      	cmp	r3, r2
 800ff96:	d003      	beq.n	800ffa0 <TIM_OC4_SetConfig+0x74>
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	4a2a      	ldr	r2, [pc, #168]	@ (8010044 <TIM_OC4_SetConfig+0x118>)
 800ff9c:	4293      	cmp	r3, r2
 800ff9e:	d10d      	bne.n	800ffbc <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800ffa0:	697b      	ldr	r3, [r7, #20]
 800ffa2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800ffa6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800ffa8:	683b      	ldr	r3, [r7, #0]
 800ffaa:	68db      	ldr	r3, [r3, #12]
 800ffac:	031b      	lsls	r3, r3, #12
 800ffae:	697a      	ldr	r2, [r7, #20]
 800ffb0:	4313      	orrs	r3, r2
 800ffb2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800ffb4:	697b      	ldr	r3, [r7, #20]
 800ffb6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ffba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	4a1f      	ldr	r2, [pc, #124]	@ (801003c <TIM_OC4_SetConfig+0x110>)
 800ffc0:	4293      	cmp	r3, r2
 800ffc2:	d013      	beq.n	800ffec <TIM_OC4_SetConfig+0xc0>
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	4a1e      	ldr	r2, [pc, #120]	@ (8010040 <TIM_OC4_SetConfig+0x114>)
 800ffc8:	4293      	cmp	r3, r2
 800ffca:	d00f      	beq.n	800ffec <TIM_OC4_SetConfig+0xc0>
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	4a1e      	ldr	r2, [pc, #120]	@ (8010048 <TIM_OC4_SetConfig+0x11c>)
 800ffd0:	4293      	cmp	r3, r2
 800ffd2:	d00b      	beq.n	800ffec <TIM_OC4_SetConfig+0xc0>
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	4a1d      	ldr	r2, [pc, #116]	@ (801004c <TIM_OC4_SetConfig+0x120>)
 800ffd8:	4293      	cmp	r3, r2
 800ffda:	d007      	beq.n	800ffec <TIM_OC4_SetConfig+0xc0>
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	4a1c      	ldr	r2, [pc, #112]	@ (8010050 <TIM_OC4_SetConfig+0x124>)
 800ffe0:	4293      	cmp	r3, r2
 800ffe2:	d003      	beq.n	800ffec <TIM_OC4_SetConfig+0xc0>
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	4a17      	ldr	r2, [pc, #92]	@ (8010044 <TIM_OC4_SetConfig+0x118>)
 800ffe8:	4293      	cmp	r3, r2
 800ffea:	d113      	bne.n	8010014 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ffec:	693b      	ldr	r3, [r7, #16]
 800ffee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800fff2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800fff4:	693b      	ldr	r3, [r7, #16]
 800fff6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800fffa:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800fffc:	683b      	ldr	r3, [r7, #0]
 800fffe:	695b      	ldr	r3, [r3, #20]
 8010000:	019b      	lsls	r3, r3, #6
 8010002:	693a      	ldr	r2, [r7, #16]
 8010004:	4313      	orrs	r3, r2
 8010006:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8010008:	683b      	ldr	r3, [r7, #0]
 801000a:	699b      	ldr	r3, [r3, #24]
 801000c:	019b      	lsls	r3, r3, #6
 801000e:	693a      	ldr	r2, [r7, #16]
 8010010:	4313      	orrs	r3, r2
 8010012:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	693a      	ldr	r2, [r7, #16]
 8010018:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	68fa      	ldr	r2, [r7, #12]
 801001e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8010020:	683b      	ldr	r3, [r7, #0]
 8010022:	685a      	ldr	r2, [r3, #4]
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	697a      	ldr	r2, [r7, #20]
 801002c:	621a      	str	r2, [r3, #32]
}
 801002e:	bf00      	nop
 8010030:	371c      	adds	r7, #28
 8010032:	46bd      	mov	sp, r7
 8010034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010038:	4770      	bx	lr
 801003a:	bf00      	nop
 801003c:	40012c00 	.word	0x40012c00
 8010040:	40013400 	.word	0x40013400
 8010044:	40015000 	.word	0x40015000
 8010048:	40014000 	.word	0x40014000
 801004c:	40014400 	.word	0x40014400
 8010050:	40014800 	.word	0x40014800

08010054 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8010054:	b480      	push	{r7}
 8010056:	b087      	sub	sp, #28
 8010058:	af00      	add	r7, sp, #0
 801005a:	6078      	str	r0, [r7, #4]
 801005c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	6a1b      	ldr	r3, [r3, #32]
 8010062:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	6a1b      	ldr	r3, [r3, #32]
 8010068:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	685b      	ldr	r3, [r3, #4]
 8010074:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801007a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 801007c:	68fb      	ldr	r3, [r7, #12]
 801007e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8010082:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010086:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010088:	683b      	ldr	r3, [r7, #0]
 801008a:	681b      	ldr	r3, [r3, #0]
 801008c:	68fa      	ldr	r2, [r7, #12]
 801008e:	4313      	orrs	r3, r2
 8010090:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8010092:	693b      	ldr	r3, [r7, #16]
 8010094:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8010098:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 801009a:	683b      	ldr	r3, [r7, #0]
 801009c:	689b      	ldr	r3, [r3, #8]
 801009e:	041b      	lsls	r3, r3, #16
 80100a0:	693a      	ldr	r2, [r7, #16]
 80100a2:	4313      	orrs	r3, r2
 80100a4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	4a19      	ldr	r2, [pc, #100]	@ (8010110 <TIM_OC5_SetConfig+0xbc>)
 80100aa:	4293      	cmp	r3, r2
 80100ac:	d013      	beq.n	80100d6 <TIM_OC5_SetConfig+0x82>
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	4a18      	ldr	r2, [pc, #96]	@ (8010114 <TIM_OC5_SetConfig+0xc0>)
 80100b2:	4293      	cmp	r3, r2
 80100b4:	d00f      	beq.n	80100d6 <TIM_OC5_SetConfig+0x82>
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	4a17      	ldr	r2, [pc, #92]	@ (8010118 <TIM_OC5_SetConfig+0xc4>)
 80100ba:	4293      	cmp	r3, r2
 80100bc:	d00b      	beq.n	80100d6 <TIM_OC5_SetConfig+0x82>
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	4a16      	ldr	r2, [pc, #88]	@ (801011c <TIM_OC5_SetConfig+0xc8>)
 80100c2:	4293      	cmp	r3, r2
 80100c4:	d007      	beq.n	80100d6 <TIM_OC5_SetConfig+0x82>
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	4a15      	ldr	r2, [pc, #84]	@ (8010120 <TIM_OC5_SetConfig+0xcc>)
 80100ca:	4293      	cmp	r3, r2
 80100cc:	d003      	beq.n	80100d6 <TIM_OC5_SetConfig+0x82>
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	4a14      	ldr	r2, [pc, #80]	@ (8010124 <TIM_OC5_SetConfig+0xd0>)
 80100d2:	4293      	cmp	r3, r2
 80100d4:	d109      	bne.n	80100ea <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80100d6:	697b      	ldr	r3, [r7, #20]
 80100d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80100dc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80100de:	683b      	ldr	r3, [r7, #0]
 80100e0:	695b      	ldr	r3, [r3, #20]
 80100e2:	021b      	lsls	r3, r3, #8
 80100e4:	697a      	ldr	r2, [r7, #20]
 80100e6:	4313      	orrs	r3, r2
 80100e8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	697a      	ldr	r2, [r7, #20]
 80100ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	68fa      	ldr	r2, [r7, #12]
 80100f4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80100f6:	683b      	ldr	r3, [r7, #0]
 80100f8:	685a      	ldr	r2, [r3, #4]
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	693a      	ldr	r2, [r7, #16]
 8010102:	621a      	str	r2, [r3, #32]
}
 8010104:	bf00      	nop
 8010106:	371c      	adds	r7, #28
 8010108:	46bd      	mov	sp, r7
 801010a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801010e:	4770      	bx	lr
 8010110:	40012c00 	.word	0x40012c00
 8010114:	40013400 	.word	0x40013400
 8010118:	40014000 	.word	0x40014000
 801011c:	40014400 	.word	0x40014400
 8010120:	40014800 	.word	0x40014800
 8010124:	40015000 	.word	0x40015000

08010128 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8010128:	b480      	push	{r7}
 801012a:	b087      	sub	sp, #28
 801012c:	af00      	add	r7, sp, #0
 801012e:	6078      	str	r0, [r7, #4]
 8010130:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	6a1b      	ldr	r3, [r3, #32]
 8010136:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	6a1b      	ldr	r3, [r3, #32]
 801013c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	685b      	ldr	r3, [r3, #4]
 8010148:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801014e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8010150:	68fb      	ldr	r3, [r7, #12]
 8010152:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8010156:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801015a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801015c:	683b      	ldr	r3, [r7, #0]
 801015e:	681b      	ldr	r3, [r3, #0]
 8010160:	021b      	lsls	r3, r3, #8
 8010162:	68fa      	ldr	r2, [r7, #12]
 8010164:	4313      	orrs	r3, r2
 8010166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8010168:	693b      	ldr	r3, [r7, #16]
 801016a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 801016e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8010170:	683b      	ldr	r3, [r7, #0]
 8010172:	689b      	ldr	r3, [r3, #8]
 8010174:	051b      	lsls	r3, r3, #20
 8010176:	693a      	ldr	r2, [r7, #16]
 8010178:	4313      	orrs	r3, r2
 801017a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	4a1a      	ldr	r2, [pc, #104]	@ (80101e8 <TIM_OC6_SetConfig+0xc0>)
 8010180:	4293      	cmp	r3, r2
 8010182:	d013      	beq.n	80101ac <TIM_OC6_SetConfig+0x84>
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	4a19      	ldr	r2, [pc, #100]	@ (80101ec <TIM_OC6_SetConfig+0xc4>)
 8010188:	4293      	cmp	r3, r2
 801018a:	d00f      	beq.n	80101ac <TIM_OC6_SetConfig+0x84>
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	4a18      	ldr	r2, [pc, #96]	@ (80101f0 <TIM_OC6_SetConfig+0xc8>)
 8010190:	4293      	cmp	r3, r2
 8010192:	d00b      	beq.n	80101ac <TIM_OC6_SetConfig+0x84>
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	4a17      	ldr	r2, [pc, #92]	@ (80101f4 <TIM_OC6_SetConfig+0xcc>)
 8010198:	4293      	cmp	r3, r2
 801019a:	d007      	beq.n	80101ac <TIM_OC6_SetConfig+0x84>
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	4a16      	ldr	r2, [pc, #88]	@ (80101f8 <TIM_OC6_SetConfig+0xd0>)
 80101a0:	4293      	cmp	r3, r2
 80101a2:	d003      	beq.n	80101ac <TIM_OC6_SetConfig+0x84>
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	4a15      	ldr	r2, [pc, #84]	@ (80101fc <TIM_OC6_SetConfig+0xd4>)
 80101a8:	4293      	cmp	r3, r2
 80101aa:	d109      	bne.n	80101c0 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80101ac:	697b      	ldr	r3, [r7, #20]
 80101ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80101b2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80101b4:	683b      	ldr	r3, [r7, #0]
 80101b6:	695b      	ldr	r3, [r3, #20]
 80101b8:	029b      	lsls	r3, r3, #10
 80101ba:	697a      	ldr	r2, [r7, #20]
 80101bc:	4313      	orrs	r3, r2
 80101be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	697a      	ldr	r2, [r7, #20]
 80101c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	68fa      	ldr	r2, [r7, #12]
 80101ca:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80101cc:	683b      	ldr	r3, [r7, #0]
 80101ce:	685a      	ldr	r2, [r3, #4]
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	693a      	ldr	r2, [r7, #16]
 80101d8:	621a      	str	r2, [r3, #32]
}
 80101da:	bf00      	nop
 80101dc:	371c      	adds	r7, #28
 80101de:	46bd      	mov	sp, r7
 80101e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101e4:	4770      	bx	lr
 80101e6:	bf00      	nop
 80101e8:	40012c00 	.word	0x40012c00
 80101ec:	40013400 	.word	0x40013400
 80101f0:	40014000 	.word	0x40014000
 80101f4:	40014400 	.word	0x40014400
 80101f8:	40014800 	.word	0x40014800
 80101fc:	40015000 	.word	0x40015000

08010200 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8010200:	b480      	push	{r7}
 8010202:	b087      	sub	sp, #28
 8010204:	af00      	add	r7, sp, #0
 8010206:	60f8      	str	r0, [r7, #12]
 8010208:	60b9      	str	r1, [r7, #8]
 801020a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 801020c:	68fb      	ldr	r3, [r7, #12]
 801020e:	6a1b      	ldr	r3, [r3, #32]
 8010210:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010212:	68fb      	ldr	r3, [r7, #12]
 8010214:	6a1b      	ldr	r3, [r3, #32]
 8010216:	f023 0201 	bic.w	r2, r3, #1
 801021a:	68fb      	ldr	r3, [r7, #12]
 801021c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801021e:	68fb      	ldr	r3, [r7, #12]
 8010220:	699b      	ldr	r3, [r3, #24]
 8010222:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8010224:	693b      	ldr	r3, [r7, #16]
 8010226:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 801022a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	011b      	lsls	r3, r3, #4
 8010230:	693a      	ldr	r2, [r7, #16]
 8010232:	4313      	orrs	r3, r2
 8010234:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8010236:	697b      	ldr	r3, [r7, #20]
 8010238:	f023 030a 	bic.w	r3, r3, #10
 801023c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801023e:	697a      	ldr	r2, [r7, #20]
 8010240:	68bb      	ldr	r3, [r7, #8]
 8010242:	4313      	orrs	r3, r2
 8010244:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8010246:	68fb      	ldr	r3, [r7, #12]
 8010248:	693a      	ldr	r2, [r7, #16]
 801024a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801024c:	68fb      	ldr	r3, [r7, #12]
 801024e:	697a      	ldr	r2, [r7, #20]
 8010250:	621a      	str	r2, [r3, #32]
}
 8010252:	bf00      	nop
 8010254:	371c      	adds	r7, #28
 8010256:	46bd      	mov	sp, r7
 8010258:	f85d 7b04 	ldr.w	r7, [sp], #4
 801025c:	4770      	bx	lr

0801025e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801025e:	b480      	push	{r7}
 8010260:	b087      	sub	sp, #28
 8010262:	af00      	add	r7, sp, #0
 8010264:	60f8      	str	r0, [r7, #12]
 8010266:	60b9      	str	r1, [r7, #8]
 8010268:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 801026a:	68fb      	ldr	r3, [r7, #12]
 801026c:	6a1b      	ldr	r3, [r3, #32]
 801026e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010270:	68fb      	ldr	r3, [r7, #12]
 8010272:	6a1b      	ldr	r3, [r3, #32]
 8010274:	f023 0210 	bic.w	r2, r3, #16
 8010278:	68fb      	ldr	r3, [r7, #12]
 801027a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801027c:	68fb      	ldr	r3, [r7, #12]
 801027e:	699b      	ldr	r3, [r3, #24]
 8010280:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8010282:	693b      	ldr	r3, [r7, #16]
 8010284:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8010288:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	031b      	lsls	r3, r3, #12
 801028e:	693a      	ldr	r2, [r7, #16]
 8010290:	4313      	orrs	r3, r2
 8010292:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8010294:	697b      	ldr	r3, [r7, #20]
 8010296:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 801029a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 801029c:	68bb      	ldr	r3, [r7, #8]
 801029e:	011b      	lsls	r3, r3, #4
 80102a0:	697a      	ldr	r2, [r7, #20]
 80102a2:	4313      	orrs	r3, r2
 80102a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80102a6:	68fb      	ldr	r3, [r7, #12]
 80102a8:	693a      	ldr	r2, [r7, #16]
 80102aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80102ac:	68fb      	ldr	r3, [r7, #12]
 80102ae:	697a      	ldr	r2, [r7, #20]
 80102b0:	621a      	str	r2, [r3, #32]
}
 80102b2:	bf00      	nop
 80102b4:	371c      	adds	r7, #28
 80102b6:	46bd      	mov	sp, r7
 80102b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102bc:	4770      	bx	lr

080102be <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80102be:	b480      	push	{r7}
 80102c0:	b085      	sub	sp, #20
 80102c2:	af00      	add	r7, sp, #0
 80102c4:	6078      	str	r0, [r7, #4]
 80102c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	689b      	ldr	r3, [r3, #8]
 80102cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80102ce:	68fb      	ldr	r3, [r7, #12]
 80102d0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80102d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80102d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80102da:	683a      	ldr	r2, [r7, #0]
 80102dc:	68fb      	ldr	r3, [r7, #12]
 80102de:	4313      	orrs	r3, r2
 80102e0:	f043 0307 	orr.w	r3, r3, #7
 80102e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	68fa      	ldr	r2, [r7, #12]
 80102ea:	609a      	str	r2, [r3, #8]
}
 80102ec:	bf00      	nop
 80102ee:	3714      	adds	r7, #20
 80102f0:	46bd      	mov	sp, r7
 80102f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102f6:	4770      	bx	lr

080102f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80102f8:	b480      	push	{r7}
 80102fa:	b087      	sub	sp, #28
 80102fc:	af00      	add	r7, sp, #0
 80102fe:	60f8      	str	r0, [r7, #12]
 8010300:	60b9      	str	r1, [r7, #8]
 8010302:	607a      	str	r2, [r7, #4]
 8010304:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8010306:	68fb      	ldr	r3, [r7, #12]
 8010308:	689b      	ldr	r3, [r3, #8]
 801030a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801030c:	697b      	ldr	r3, [r7, #20]
 801030e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8010312:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8010314:	683b      	ldr	r3, [r7, #0]
 8010316:	021a      	lsls	r2, r3, #8
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	431a      	orrs	r2, r3
 801031c:	68bb      	ldr	r3, [r7, #8]
 801031e:	4313      	orrs	r3, r2
 8010320:	697a      	ldr	r2, [r7, #20]
 8010322:	4313      	orrs	r3, r2
 8010324:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8010326:	68fb      	ldr	r3, [r7, #12]
 8010328:	697a      	ldr	r2, [r7, #20]
 801032a:	609a      	str	r2, [r3, #8]
}
 801032c:	bf00      	nop
 801032e:	371c      	adds	r7, #28
 8010330:	46bd      	mov	sp, r7
 8010332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010336:	4770      	bx	lr

08010338 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8010338:	b480      	push	{r7}
 801033a:	b087      	sub	sp, #28
 801033c:	af00      	add	r7, sp, #0
 801033e:	60f8      	str	r0, [r7, #12]
 8010340:	60b9      	str	r1, [r7, #8]
 8010342:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8010344:	68bb      	ldr	r3, [r7, #8]
 8010346:	f003 031f 	and.w	r3, r3, #31
 801034a:	2201      	movs	r2, #1
 801034c:	fa02 f303 	lsl.w	r3, r2, r3
 8010350:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8010352:	68fb      	ldr	r3, [r7, #12]
 8010354:	6a1a      	ldr	r2, [r3, #32]
 8010356:	697b      	ldr	r3, [r7, #20]
 8010358:	43db      	mvns	r3, r3
 801035a:	401a      	ands	r2, r3
 801035c:	68fb      	ldr	r3, [r7, #12]
 801035e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010360:	68fb      	ldr	r3, [r7, #12]
 8010362:	6a1a      	ldr	r2, [r3, #32]
 8010364:	68bb      	ldr	r3, [r7, #8]
 8010366:	f003 031f 	and.w	r3, r3, #31
 801036a:	6879      	ldr	r1, [r7, #4]
 801036c:	fa01 f303 	lsl.w	r3, r1, r3
 8010370:	431a      	orrs	r2, r3
 8010372:	68fb      	ldr	r3, [r7, #12]
 8010374:	621a      	str	r2, [r3, #32]
}
 8010376:	bf00      	nop
 8010378:	371c      	adds	r7, #28
 801037a:	46bd      	mov	sp, r7
 801037c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010380:	4770      	bx	lr
	...

08010384 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8010384:	b480      	push	{r7}
 8010386:	b083      	sub	sp, #12
 8010388:	af00      	add	r7, sp, #0
 801038a:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	4a26      	ldr	r2, [pc, #152]	@ (8010428 <TIM_ResetCallback+0xa4>)
 8010390:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	4a25      	ldr	r2, [pc, #148]	@ (801042c <TIM_ResetCallback+0xa8>)
 8010398:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	4a24      	ldr	r2, [pc, #144]	@ (8010430 <TIM_ResetCallback+0xac>)
 80103a0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	4a23      	ldr	r2, [pc, #140]	@ (8010434 <TIM_ResetCallback+0xb0>)
 80103a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	4a22      	ldr	r2, [pc, #136]	@ (8010438 <TIM_ResetCallback+0xb4>)
 80103b0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	4a21      	ldr	r2, [pc, #132]	@ (801043c <TIM_ResetCallback+0xb8>)
 80103b8:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	4a20      	ldr	r2, [pc, #128]	@ (8010440 <TIM_ResetCallback+0xbc>)
 80103c0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	4a1f      	ldr	r2, [pc, #124]	@ (8010444 <TIM_ResetCallback+0xc0>)
 80103c8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	4a1e      	ldr	r2, [pc, #120]	@ (8010448 <TIM_ResetCallback+0xc4>)
 80103d0:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	4a1d      	ldr	r2, [pc, #116]	@ (801044c <TIM_ResetCallback+0xc8>)
 80103d8:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	4a1c      	ldr	r2, [pc, #112]	@ (8010450 <TIM_ResetCallback+0xcc>)
 80103e0:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	4a1b      	ldr	r2, [pc, #108]	@ (8010454 <TIM_ResetCallback+0xd0>)
 80103e8:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	4a1a      	ldr	r2, [pc, #104]	@ (8010458 <TIM_ResetCallback+0xd4>)
 80103f0:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	4a19      	ldr	r2, [pc, #100]	@ (801045c <TIM_ResetCallback+0xd8>)
 80103f8:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	4a18      	ldr	r2, [pc, #96]	@ (8010460 <TIM_ResetCallback+0xdc>)
 8010400:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	4a17      	ldr	r2, [pc, #92]	@ (8010464 <TIM_ResetCallback+0xe0>)
 8010408:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	4a16      	ldr	r2, [pc, #88]	@ (8010468 <TIM_ResetCallback+0xe4>)
 8010410:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	4a15      	ldr	r2, [pc, #84]	@ (801046c <TIM_ResetCallback+0xe8>)
 8010418:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 801041c:	bf00      	nop
 801041e:	370c      	adds	r7, #12
 8010420:	46bd      	mov	sp, r7
 8010422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010426:	4770      	bx	lr
 8010428:	08008afd 	.word	0x08008afd
 801042c:	0800f6d1 	.word	0x0800f6d1
 8010430:	0800f749 	.word	0x0800f749
 8010434:	0800f75d 	.word	0x0800f75d
 8010438:	0800f6f9 	.word	0x0800f6f9
 801043c:	0800f70d 	.word	0x0800f70d
 8010440:	0800f6e5 	.word	0x0800f6e5
 8010444:	0800f721 	.word	0x0800f721
 8010448:	0800f735 	.word	0x0800f735
 801044c:	0800f771 	.word	0x0800f771
 8010450:	080106c5 	.word	0x080106c5
 8010454:	080106d9 	.word	0x080106d9
 8010458:	080106ed 	.word	0x080106ed
 801045c:	08010701 	.word	0x08010701
 8010460:	08010715 	.word	0x08010715
 8010464:	08010729 	.word	0x08010729
 8010468:	0801073d 	.word	0x0801073d
 801046c:	08010751 	.word	0x08010751

08010470 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8010470:	b480      	push	{r7}
 8010472:	b085      	sub	sp, #20
 8010474:	af00      	add	r7, sp, #0
 8010476:	6078      	str	r0, [r7, #4]
 8010478:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010480:	2b01      	cmp	r3, #1
 8010482:	d101      	bne.n	8010488 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8010484:	2302      	movs	r3, #2
 8010486:	e074      	b.n	8010572 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	2201      	movs	r2, #1
 801048c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	2202      	movs	r2, #2
 8010494:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	681b      	ldr	r3, [r3, #0]
 801049c:	685b      	ldr	r3, [r3, #4]
 801049e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	681b      	ldr	r3, [r3, #0]
 80104a4:	689b      	ldr	r3, [r3, #8]
 80104a6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	681b      	ldr	r3, [r3, #0]
 80104ac:	4a34      	ldr	r2, [pc, #208]	@ (8010580 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80104ae:	4293      	cmp	r3, r2
 80104b0:	d009      	beq.n	80104c6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	681b      	ldr	r3, [r3, #0]
 80104b6:	4a33      	ldr	r2, [pc, #204]	@ (8010584 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80104b8:	4293      	cmp	r3, r2
 80104ba:	d004      	beq.n	80104c6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	681b      	ldr	r3, [r3, #0]
 80104c0:	4a31      	ldr	r2, [pc, #196]	@ (8010588 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80104c2:	4293      	cmp	r3, r2
 80104c4:	d108      	bne.n	80104d8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80104c6:	68fb      	ldr	r3, [r7, #12]
 80104c8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80104cc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80104ce:	683b      	ldr	r3, [r7, #0]
 80104d0:	685b      	ldr	r3, [r3, #4]
 80104d2:	68fa      	ldr	r2, [r7, #12]
 80104d4:	4313      	orrs	r3, r2
 80104d6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80104d8:	68fb      	ldr	r3, [r7, #12]
 80104da:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80104de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80104e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80104e4:	683b      	ldr	r3, [r7, #0]
 80104e6:	681b      	ldr	r3, [r3, #0]
 80104e8:	68fa      	ldr	r2, [r7, #12]
 80104ea:	4313      	orrs	r3, r2
 80104ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	681b      	ldr	r3, [r3, #0]
 80104f2:	68fa      	ldr	r2, [r7, #12]
 80104f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	681b      	ldr	r3, [r3, #0]
 80104fa:	4a21      	ldr	r2, [pc, #132]	@ (8010580 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80104fc:	4293      	cmp	r3, r2
 80104fe:	d022      	beq.n	8010546 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	681b      	ldr	r3, [r3, #0]
 8010504:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010508:	d01d      	beq.n	8010546 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	681b      	ldr	r3, [r3, #0]
 801050e:	4a1f      	ldr	r2, [pc, #124]	@ (801058c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8010510:	4293      	cmp	r3, r2
 8010512:	d018      	beq.n	8010546 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	681b      	ldr	r3, [r3, #0]
 8010518:	4a1d      	ldr	r2, [pc, #116]	@ (8010590 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 801051a:	4293      	cmp	r3, r2
 801051c:	d013      	beq.n	8010546 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	681b      	ldr	r3, [r3, #0]
 8010522:	4a1c      	ldr	r2, [pc, #112]	@ (8010594 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8010524:	4293      	cmp	r3, r2
 8010526:	d00e      	beq.n	8010546 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	681b      	ldr	r3, [r3, #0]
 801052c:	4a15      	ldr	r2, [pc, #84]	@ (8010584 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 801052e:	4293      	cmp	r3, r2
 8010530:	d009      	beq.n	8010546 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	681b      	ldr	r3, [r3, #0]
 8010536:	4a18      	ldr	r2, [pc, #96]	@ (8010598 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8010538:	4293      	cmp	r3, r2
 801053a:	d004      	beq.n	8010546 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	681b      	ldr	r3, [r3, #0]
 8010540:	4a11      	ldr	r2, [pc, #68]	@ (8010588 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8010542:	4293      	cmp	r3, r2
 8010544:	d10c      	bne.n	8010560 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8010546:	68bb      	ldr	r3, [r7, #8]
 8010548:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801054c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801054e:	683b      	ldr	r3, [r7, #0]
 8010550:	689b      	ldr	r3, [r3, #8]
 8010552:	68ba      	ldr	r2, [r7, #8]
 8010554:	4313      	orrs	r3, r2
 8010556:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	681b      	ldr	r3, [r3, #0]
 801055c:	68ba      	ldr	r2, [r7, #8]
 801055e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	2201      	movs	r2, #1
 8010564:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	2200      	movs	r2, #0
 801056c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8010570:	2300      	movs	r3, #0
}
 8010572:	4618      	mov	r0, r3
 8010574:	3714      	adds	r7, #20
 8010576:	46bd      	mov	sp, r7
 8010578:	f85d 7b04 	ldr.w	r7, [sp], #4
 801057c:	4770      	bx	lr
 801057e:	bf00      	nop
 8010580:	40012c00 	.word	0x40012c00
 8010584:	40013400 	.word	0x40013400
 8010588:	40015000 	.word	0x40015000
 801058c:	40000400 	.word	0x40000400
 8010590:	40000800 	.word	0x40000800
 8010594:	40000c00 	.word	0x40000c00
 8010598:	40014000 	.word	0x40014000

0801059c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 801059c:	b480      	push	{r7}
 801059e:	b085      	sub	sp, #20
 80105a0:	af00      	add	r7, sp, #0
 80105a2:	6078      	str	r0, [r7, #4]
 80105a4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80105a6:	2300      	movs	r3, #0
 80105a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80105b0:	2b01      	cmp	r3, #1
 80105b2:	d101      	bne.n	80105b8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80105b4:	2302      	movs	r3, #2
 80105b6:	e078      	b.n	80106aa <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	2201      	movs	r2, #1
 80105bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80105c0:	68fb      	ldr	r3, [r7, #12]
 80105c2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80105c6:	683b      	ldr	r3, [r7, #0]
 80105c8:	68db      	ldr	r3, [r3, #12]
 80105ca:	4313      	orrs	r3, r2
 80105cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80105ce:	68fb      	ldr	r3, [r7, #12]
 80105d0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80105d4:	683b      	ldr	r3, [r7, #0]
 80105d6:	689b      	ldr	r3, [r3, #8]
 80105d8:	4313      	orrs	r3, r2
 80105da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80105dc:	68fb      	ldr	r3, [r7, #12]
 80105de:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80105e2:	683b      	ldr	r3, [r7, #0]
 80105e4:	685b      	ldr	r3, [r3, #4]
 80105e6:	4313      	orrs	r3, r2
 80105e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80105ea:	68fb      	ldr	r3, [r7, #12]
 80105ec:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80105f0:	683b      	ldr	r3, [r7, #0]
 80105f2:	681b      	ldr	r3, [r3, #0]
 80105f4:	4313      	orrs	r3, r2
 80105f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80105f8:	68fb      	ldr	r3, [r7, #12]
 80105fa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80105fe:	683b      	ldr	r3, [r7, #0]
 8010600:	691b      	ldr	r3, [r3, #16]
 8010602:	4313      	orrs	r3, r2
 8010604:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8010606:	68fb      	ldr	r3, [r7, #12]
 8010608:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 801060c:	683b      	ldr	r3, [r7, #0]
 801060e:	695b      	ldr	r3, [r3, #20]
 8010610:	4313      	orrs	r3, r2
 8010612:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8010614:	68fb      	ldr	r3, [r7, #12]
 8010616:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 801061a:	683b      	ldr	r3, [r7, #0]
 801061c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801061e:	4313      	orrs	r3, r2
 8010620:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8010622:	68fb      	ldr	r3, [r7, #12]
 8010624:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8010628:	683b      	ldr	r3, [r7, #0]
 801062a:	699b      	ldr	r3, [r3, #24]
 801062c:	041b      	lsls	r3, r3, #16
 801062e:	4313      	orrs	r3, r2
 8010630:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8010632:	68fb      	ldr	r3, [r7, #12]
 8010634:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8010638:	683b      	ldr	r3, [r7, #0]
 801063a:	69db      	ldr	r3, [r3, #28]
 801063c:	4313      	orrs	r3, r2
 801063e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	681b      	ldr	r3, [r3, #0]
 8010644:	4a1c      	ldr	r2, [pc, #112]	@ (80106b8 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8010646:	4293      	cmp	r3, r2
 8010648:	d009      	beq.n	801065e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	681b      	ldr	r3, [r3, #0]
 801064e:	4a1b      	ldr	r2, [pc, #108]	@ (80106bc <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8010650:	4293      	cmp	r3, r2
 8010652:	d004      	beq.n	801065e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	681b      	ldr	r3, [r3, #0]
 8010658:	4a19      	ldr	r2, [pc, #100]	@ (80106c0 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 801065a:	4293      	cmp	r3, r2
 801065c:	d11c      	bne.n	8010698 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 801065e:	68fb      	ldr	r3, [r7, #12]
 8010660:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8010664:	683b      	ldr	r3, [r7, #0]
 8010666:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010668:	051b      	lsls	r3, r3, #20
 801066a:	4313      	orrs	r3, r2
 801066c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 801066e:	68fb      	ldr	r3, [r7, #12]
 8010670:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8010674:	683b      	ldr	r3, [r7, #0]
 8010676:	6a1b      	ldr	r3, [r3, #32]
 8010678:	4313      	orrs	r3, r2
 801067a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 801067c:	68fb      	ldr	r3, [r7, #12]
 801067e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8010682:	683b      	ldr	r3, [r7, #0]
 8010684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010686:	4313      	orrs	r3, r2
 8010688:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 801068a:	68fb      	ldr	r3, [r7, #12]
 801068c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8010690:	683b      	ldr	r3, [r7, #0]
 8010692:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010694:	4313      	orrs	r3, r2
 8010696:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	681b      	ldr	r3, [r3, #0]
 801069c:	68fa      	ldr	r2, [r7, #12]
 801069e:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	2200      	movs	r2, #0
 80106a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80106a8:	2300      	movs	r3, #0
}
 80106aa:	4618      	mov	r0, r3
 80106ac:	3714      	adds	r7, #20
 80106ae:	46bd      	mov	sp, r7
 80106b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106b4:	4770      	bx	lr
 80106b6:	bf00      	nop
 80106b8:	40012c00 	.word	0x40012c00
 80106bc:	40013400 	.word	0x40013400
 80106c0:	40015000 	.word	0x40015000

080106c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80106c4:	b480      	push	{r7}
 80106c6:	b083      	sub	sp, #12
 80106c8:	af00      	add	r7, sp, #0
 80106ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80106cc:	bf00      	nop
 80106ce:	370c      	adds	r7, #12
 80106d0:	46bd      	mov	sp, r7
 80106d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106d6:	4770      	bx	lr

080106d8 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80106d8:	b480      	push	{r7}
 80106da:	b083      	sub	sp, #12
 80106dc:	af00      	add	r7, sp, #0
 80106de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 80106e0:	bf00      	nop
 80106e2:	370c      	adds	r7, #12
 80106e4:	46bd      	mov	sp, r7
 80106e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ea:	4770      	bx	lr

080106ec <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80106ec:	b480      	push	{r7}
 80106ee:	b083      	sub	sp, #12
 80106f0:	af00      	add	r7, sp, #0
 80106f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80106f4:	bf00      	nop
 80106f6:	370c      	adds	r7, #12
 80106f8:	46bd      	mov	sp, r7
 80106fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106fe:	4770      	bx	lr

08010700 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8010700:	b480      	push	{r7}
 8010702:	b083      	sub	sp, #12
 8010704:	af00      	add	r7, sp, #0
 8010706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8010708:	bf00      	nop
 801070a:	370c      	adds	r7, #12
 801070c:	46bd      	mov	sp, r7
 801070e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010712:	4770      	bx	lr

08010714 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8010714:	b480      	push	{r7}
 8010716:	b083      	sub	sp, #12
 8010718:	af00      	add	r7, sp, #0
 801071a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 801071c:	bf00      	nop
 801071e:	370c      	adds	r7, #12
 8010720:	46bd      	mov	sp, r7
 8010722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010726:	4770      	bx	lr

08010728 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8010728:	b480      	push	{r7}
 801072a:	b083      	sub	sp, #12
 801072c:	af00      	add	r7, sp, #0
 801072e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8010730:	bf00      	nop
 8010732:	370c      	adds	r7, #12
 8010734:	46bd      	mov	sp, r7
 8010736:	f85d 7b04 	ldr.w	r7, [sp], #4
 801073a:	4770      	bx	lr

0801073c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 801073c:	b480      	push	{r7}
 801073e:	b083      	sub	sp, #12
 8010740:	af00      	add	r7, sp, #0
 8010742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8010744:	bf00      	nop
 8010746:	370c      	adds	r7, #12
 8010748:	46bd      	mov	sp, r7
 801074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801074e:	4770      	bx	lr

08010750 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8010750:	b480      	push	{r7}
 8010752:	b083      	sub	sp, #12
 8010754:	af00      	add	r7, sp, #0
 8010756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8010758:	bf00      	nop
 801075a:	370c      	adds	r7, #12
 801075c:	46bd      	mov	sp, r7
 801075e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010762:	4770      	bx	lr

08010764 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010764:	b580      	push	{r7, lr}
 8010766:	b082      	sub	sp, #8
 8010768:	af00      	add	r7, sp, #0
 801076a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	2b00      	cmp	r3, #0
 8010770:	d101      	bne.n	8010776 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8010772:	2301      	movs	r3, #1
 8010774:	e050      	b.n	8010818 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801077c:	2b00      	cmp	r3, #0
 801077e:	d114      	bne.n	80107aa <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	2200      	movs	r2, #0
 8010784:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8010788:	6878      	ldr	r0, [r7, #4]
 801078a:	f000 fde5 	bl	8011358 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8010794:	2b00      	cmp	r3, #0
 8010796:	d103      	bne.n	80107a0 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	4a21      	ldr	r2, [pc, #132]	@ (8010820 <HAL_UART_Init+0xbc>)
 801079c:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80107a6:	6878      	ldr	r0, [r7, #4]
 80107a8:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	2224      	movs	r2, #36	@ 0x24
 80107ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	681b      	ldr	r3, [r3, #0]
 80107b6:	681a      	ldr	r2, [r3, #0]
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	681b      	ldr	r3, [r3, #0]
 80107bc:	f022 0201 	bic.w	r2, r2, #1
 80107c0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	d002      	beq.n	80107d0 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 80107ca:	6878      	ldr	r0, [r7, #4]
 80107cc:	f001 f912 	bl	80119f4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80107d0:	6878      	ldr	r0, [r7, #4]
 80107d2:	f000 fe13 	bl	80113fc <UART_SetConfig>
 80107d6:	4603      	mov	r3, r0
 80107d8:	2b01      	cmp	r3, #1
 80107da:	d101      	bne.n	80107e0 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 80107dc:	2301      	movs	r3, #1
 80107de:	e01b      	b.n	8010818 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	681b      	ldr	r3, [r3, #0]
 80107e4:	685a      	ldr	r2, [r3, #4]
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	681b      	ldr	r3, [r3, #0]
 80107ea:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80107ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	681b      	ldr	r3, [r3, #0]
 80107f4:	689a      	ldr	r2, [r3, #8]
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	681b      	ldr	r3, [r3, #0]
 80107fa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80107fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	681b      	ldr	r3, [r3, #0]
 8010804:	681a      	ldr	r2, [r3, #0]
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	681b      	ldr	r3, [r3, #0]
 801080a:	f042 0201 	orr.w	r2, r2, #1
 801080e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8010810:	6878      	ldr	r0, [r7, #4]
 8010812:	f001 f991 	bl	8011b38 <UART_CheckIdleState>
 8010816:	4603      	mov	r3, r0
}
 8010818:	4618      	mov	r0, r3
 801081a:	3708      	adds	r7, #8
 801081c:	46bd      	mov	sp, r7
 801081e:	bd80      	pop	{r7, pc}
 8010820:	0800abc1 	.word	0x0800abc1

08010824 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 8010824:	b480      	push	{r7}
 8010826:	b087      	sub	sp, #28
 8010828:	af00      	add	r7, sp, #0
 801082a:	60f8      	str	r0, [r7, #12]
 801082c:	460b      	mov	r3, r1
 801082e:	607a      	str	r2, [r7, #4]
 8010830:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8010832:	2300      	movs	r3, #0
 8010834:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	2b00      	cmp	r3, #0
 801083a:	d109      	bne.n	8010850 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 801083c:	68fb      	ldr	r3, [r7, #12]
 801083e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010842:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8010846:	68fb      	ldr	r3, [r7, #12]
 8010848:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 801084c:	2301      	movs	r3, #1
 801084e:	e09c      	b.n	801098a <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 8010850:	68fb      	ldr	r3, [r7, #12]
 8010852:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010856:	2b20      	cmp	r3, #32
 8010858:	d16c      	bne.n	8010934 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 801085a:	7afb      	ldrb	r3, [r7, #11]
 801085c:	2b0c      	cmp	r3, #12
 801085e:	d85e      	bhi.n	801091e <HAL_UART_RegisterCallback+0xfa>
 8010860:	a201      	add	r2, pc, #4	@ (adr r2, 8010868 <HAL_UART_RegisterCallback+0x44>)
 8010862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010866:	bf00      	nop
 8010868:	0801089d 	.word	0x0801089d
 801086c:	080108a7 	.word	0x080108a7
 8010870:	080108b1 	.word	0x080108b1
 8010874:	080108bb 	.word	0x080108bb
 8010878:	080108c5 	.word	0x080108c5
 801087c:	080108cf 	.word	0x080108cf
 8010880:	080108d9 	.word	0x080108d9
 8010884:	080108e3 	.word	0x080108e3
 8010888:	080108ed 	.word	0x080108ed
 801088c:	080108f7 	.word	0x080108f7
 8010890:	08010901 	.word	0x08010901
 8010894:	0801090b 	.word	0x0801090b
 8010898:	08010915 	.word	0x08010915
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 801089c:	68fb      	ldr	r3, [r7, #12]
 801089e:	687a      	ldr	r2, [r7, #4]
 80108a0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 80108a4:	e070      	b.n	8010988 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 80108a6:	68fb      	ldr	r3, [r7, #12]
 80108a8:	687a      	ldr	r2, [r7, #4]
 80108aa:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 80108ae:	e06b      	b.n	8010988 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 80108b0:	68fb      	ldr	r3, [r7, #12]
 80108b2:	687a      	ldr	r2, [r7, #4]
 80108b4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 80108b8:	e066      	b.n	8010988 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 80108ba:	68fb      	ldr	r3, [r7, #12]
 80108bc:	687a      	ldr	r2, [r7, #4]
 80108be:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 80108c2:	e061      	b.n	8010988 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 80108c4:	68fb      	ldr	r3, [r7, #12]
 80108c6:	687a      	ldr	r2, [r7, #4]
 80108c8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 80108cc:	e05c      	b.n	8010988 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 80108ce:	68fb      	ldr	r3, [r7, #12]
 80108d0:	687a      	ldr	r2, [r7, #4]
 80108d2:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 80108d6:	e057      	b.n	8010988 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 80108d8:	68fb      	ldr	r3, [r7, #12]
 80108da:	687a      	ldr	r2, [r7, #4]
 80108dc:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 80108e0:	e052      	b.n	8010988 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 80108e2:	68fb      	ldr	r3, [r7, #12]
 80108e4:	687a      	ldr	r2, [r7, #4]
 80108e6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 80108ea:	e04d      	b.n	8010988 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 80108ec:	68fb      	ldr	r3, [r7, #12]
 80108ee:	687a      	ldr	r2, [r7, #4]
 80108f0:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 80108f4:	e048      	b.n	8010988 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 80108f6:	68fb      	ldr	r3, [r7, #12]
 80108f8:	687a      	ldr	r2, [r7, #4]
 80108fa:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 80108fe:	e043      	b.n	8010988 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 8010900:	68fb      	ldr	r3, [r7, #12]
 8010902:	687a      	ldr	r2, [r7, #4]
 8010904:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8010908:	e03e      	b.n	8010988 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 801090a:	68fb      	ldr	r3, [r7, #12]
 801090c:	687a      	ldr	r2, [r7, #4]
 801090e:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8010912:	e039      	b.n	8010988 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8010914:	68fb      	ldr	r3, [r7, #12]
 8010916:	687a      	ldr	r2, [r7, #4]
 8010918:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 801091c:	e034      	b.n	8010988 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 801091e:	68fb      	ldr	r3, [r7, #12]
 8010920:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010924:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8010928:	68fb      	ldr	r3, [r7, #12]
 801092a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 801092e:	2301      	movs	r3, #1
 8010930:	75fb      	strb	r3, [r7, #23]
        break;
 8010932:	e029      	b.n	8010988 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 8010934:	68fb      	ldr	r3, [r7, #12]
 8010936:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801093a:	2b00      	cmp	r3, #0
 801093c:	d11a      	bne.n	8010974 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 801093e:	7afb      	ldrb	r3, [r7, #11]
 8010940:	2b0b      	cmp	r3, #11
 8010942:	d002      	beq.n	801094a <HAL_UART_RegisterCallback+0x126>
 8010944:	2b0c      	cmp	r3, #12
 8010946:	d005      	beq.n	8010954 <HAL_UART_RegisterCallback+0x130>
 8010948:	e009      	b.n	801095e <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 801094a:	68fb      	ldr	r3, [r7, #12]
 801094c:	687a      	ldr	r2, [r7, #4]
 801094e:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8010952:	e019      	b.n	8010988 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8010954:	68fb      	ldr	r3, [r7, #12]
 8010956:	687a      	ldr	r2, [r7, #4]
 8010958:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 801095c:	e014      	b.n	8010988 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 801095e:	68fb      	ldr	r3, [r7, #12]
 8010960:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010964:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8010968:	68fb      	ldr	r3, [r7, #12]
 801096a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 801096e:	2301      	movs	r3, #1
 8010970:	75fb      	strb	r3, [r7, #23]
        break;
 8010972:	e009      	b.n	8010988 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8010974:	68fb      	ldr	r3, [r7, #12]
 8010976:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801097a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 801097e:	68fb      	ldr	r3, [r7, #12]
 8010980:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 8010984:	2301      	movs	r3, #1
 8010986:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8010988:	7dfb      	ldrb	r3, [r7, #23]
}
 801098a:	4618      	mov	r0, r3
 801098c:	371c      	adds	r7, #28
 801098e:	46bd      	mov	sp, r7
 8010990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010994:	4770      	bx	lr
 8010996:	bf00      	nop

08010998 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8010998:	b580      	push	{r7, lr}
 801099a:	b08a      	sub	sp, #40	@ 0x28
 801099c:	af00      	add	r7, sp, #0
 801099e:	60f8      	str	r0, [r7, #12]
 80109a0:	60b9      	str	r1, [r7, #8]
 80109a2:	4613      	mov	r3, r2
 80109a4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80109a6:	68fb      	ldr	r3, [r7, #12]
 80109a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80109ac:	2b20      	cmp	r3, #32
 80109ae:	d167      	bne.n	8010a80 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80109b0:	68bb      	ldr	r3, [r7, #8]
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	d002      	beq.n	80109bc <HAL_UART_Transmit_DMA+0x24>
 80109b6:	88fb      	ldrh	r3, [r7, #6]
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	d101      	bne.n	80109c0 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80109bc:	2301      	movs	r3, #1
 80109be:	e060      	b.n	8010a82 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 80109c0:	68fb      	ldr	r3, [r7, #12]
 80109c2:	68ba      	ldr	r2, [r7, #8]
 80109c4:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 80109c6:	68fb      	ldr	r3, [r7, #12]
 80109c8:	88fa      	ldrh	r2, [r7, #6]
 80109ca:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80109ce:	68fb      	ldr	r3, [r7, #12]
 80109d0:	88fa      	ldrh	r2, [r7, #6]
 80109d2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80109d6:	68fb      	ldr	r3, [r7, #12]
 80109d8:	2200      	movs	r2, #0
 80109da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80109de:	68fb      	ldr	r3, [r7, #12]
 80109e0:	2221      	movs	r2, #33	@ 0x21
 80109e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 80109e6:	68fb      	ldr	r3, [r7, #12]
 80109e8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80109ea:	2b00      	cmp	r3, #0
 80109ec:	d028      	beq.n	8010a40 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80109ee:	68fb      	ldr	r3, [r7, #12]
 80109f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80109f2:	4a26      	ldr	r2, [pc, #152]	@ (8010a8c <HAL_UART_Transmit_DMA+0xf4>)
 80109f4:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80109f6:	68fb      	ldr	r3, [r7, #12]
 80109f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80109fa:	4a25      	ldr	r2, [pc, #148]	@ (8010a90 <HAL_UART_Transmit_DMA+0xf8>)
 80109fc:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80109fe:	68fb      	ldr	r3, [r7, #12]
 8010a00:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010a02:	4a24      	ldr	r2, [pc, #144]	@ (8010a94 <HAL_UART_Transmit_DMA+0xfc>)
 8010a04:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8010a06:	68fb      	ldr	r3, [r7, #12]
 8010a08:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010a0a:	2200      	movs	r2, #0
 8010a0c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8010a0e:	68fb      	ldr	r3, [r7, #12]
 8010a10:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8010a12:	68fb      	ldr	r3, [r7, #12]
 8010a14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010a16:	4619      	mov	r1, r3
 8010a18:	68fb      	ldr	r3, [r7, #12]
 8010a1a:	681b      	ldr	r3, [r3, #0]
 8010a1c:	3328      	adds	r3, #40	@ 0x28
 8010a1e:	461a      	mov	r2, r3
 8010a20:	88fb      	ldrh	r3, [r7, #6]
 8010a22:	f7fc f919 	bl	800cc58 <HAL_DMA_Start_IT>
 8010a26:	4603      	mov	r3, r0
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	d009      	beq.n	8010a40 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8010a2c:	68fb      	ldr	r3, [r7, #12]
 8010a2e:	2210      	movs	r2, #16
 8010a30:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8010a34:	68fb      	ldr	r3, [r7, #12]
 8010a36:	2220      	movs	r2, #32
 8010a38:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8010a3c:	2301      	movs	r3, #1
 8010a3e:	e020      	b.n	8010a82 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8010a40:	68fb      	ldr	r3, [r7, #12]
 8010a42:	681b      	ldr	r3, [r3, #0]
 8010a44:	2240      	movs	r2, #64	@ 0x40
 8010a46:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8010a48:	68fb      	ldr	r3, [r7, #12]
 8010a4a:	681b      	ldr	r3, [r3, #0]
 8010a4c:	3308      	adds	r3, #8
 8010a4e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a50:	697b      	ldr	r3, [r7, #20]
 8010a52:	e853 3f00 	ldrex	r3, [r3]
 8010a56:	613b      	str	r3, [r7, #16]
   return(result);
 8010a58:	693b      	ldr	r3, [r7, #16]
 8010a5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010a5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8010a60:	68fb      	ldr	r3, [r7, #12]
 8010a62:	681b      	ldr	r3, [r3, #0]
 8010a64:	3308      	adds	r3, #8
 8010a66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010a68:	623a      	str	r2, [r7, #32]
 8010a6a:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a6c:	69f9      	ldr	r1, [r7, #28]
 8010a6e:	6a3a      	ldr	r2, [r7, #32]
 8010a70:	e841 2300 	strex	r3, r2, [r1]
 8010a74:	61bb      	str	r3, [r7, #24]
   return(result);
 8010a76:	69bb      	ldr	r3, [r7, #24]
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	d1e5      	bne.n	8010a48 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8010a7c:	2300      	movs	r3, #0
 8010a7e:	e000      	b.n	8010a82 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8010a80:	2302      	movs	r3, #2
  }
}
 8010a82:	4618      	mov	r0, r3
 8010a84:	3728      	adds	r7, #40	@ 0x28
 8010a86:	46bd      	mov	sp, r7
 8010a88:	bd80      	pop	{r7, pc}
 8010a8a:	bf00      	nop
 8010a8c:	08012003 	.word	0x08012003
 8010a90:	080120a1 	.word	0x080120a1
 8010a94:	0801223b 	.word	0x0801223b

08010a98 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010a98:	b580      	push	{r7, lr}
 8010a9a:	b08a      	sub	sp, #40	@ 0x28
 8010a9c:	af00      	add	r7, sp, #0
 8010a9e:	60f8      	str	r0, [r7, #12]
 8010aa0:	60b9      	str	r1, [r7, #8]
 8010aa2:	4613      	mov	r3, r2
 8010aa4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8010aa6:	68fb      	ldr	r3, [r7, #12]
 8010aa8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010aac:	2b20      	cmp	r3, #32
 8010aae:	d137      	bne.n	8010b20 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8010ab0:	68bb      	ldr	r3, [r7, #8]
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	d002      	beq.n	8010abc <HAL_UART_Receive_DMA+0x24>
 8010ab6:	88fb      	ldrh	r3, [r7, #6]
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	d101      	bne.n	8010ac0 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8010abc:	2301      	movs	r3, #1
 8010abe:	e030      	b.n	8010b22 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010ac0:	68fb      	ldr	r3, [r7, #12]
 8010ac2:	2200      	movs	r2, #0
 8010ac4:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8010ac6:	68fb      	ldr	r3, [r7, #12]
 8010ac8:	681b      	ldr	r3, [r3, #0]
 8010aca:	4a18      	ldr	r2, [pc, #96]	@ (8010b2c <HAL_UART_Receive_DMA+0x94>)
 8010acc:	4293      	cmp	r3, r2
 8010ace:	d01f      	beq.n	8010b10 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010ad0:	68fb      	ldr	r3, [r7, #12]
 8010ad2:	681b      	ldr	r3, [r3, #0]
 8010ad4:	685b      	ldr	r3, [r3, #4]
 8010ad6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8010ada:	2b00      	cmp	r3, #0
 8010adc:	d018      	beq.n	8010b10 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8010ade:	68fb      	ldr	r3, [r7, #12]
 8010ae0:	681b      	ldr	r3, [r3, #0]
 8010ae2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ae4:	697b      	ldr	r3, [r7, #20]
 8010ae6:	e853 3f00 	ldrex	r3, [r3]
 8010aea:	613b      	str	r3, [r7, #16]
   return(result);
 8010aec:	693b      	ldr	r3, [r7, #16]
 8010aee:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8010af2:	627b      	str	r3, [r7, #36]	@ 0x24
 8010af4:	68fb      	ldr	r3, [r7, #12]
 8010af6:	681b      	ldr	r3, [r3, #0]
 8010af8:	461a      	mov	r2, r3
 8010afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010afc:	623b      	str	r3, [r7, #32]
 8010afe:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b00:	69f9      	ldr	r1, [r7, #28]
 8010b02:	6a3a      	ldr	r2, [r7, #32]
 8010b04:	e841 2300 	strex	r3, r2, [r1]
 8010b08:	61bb      	str	r3, [r7, #24]
   return(result);
 8010b0a:	69bb      	ldr	r3, [r7, #24]
 8010b0c:	2b00      	cmp	r3, #0
 8010b0e:	d1e6      	bne.n	8010ade <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8010b10:	88fb      	ldrh	r3, [r7, #6]
 8010b12:	461a      	mov	r2, r3
 8010b14:	68b9      	ldr	r1, [r7, #8]
 8010b16:	68f8      	ldr	r0, [r7, #12]
 8010b18:	f001 f926 	bl	8011d68 <UART_Start_Receive_DMA>
 8010b1c:	4603      	mov	r3, r0
 8010b1e:	e000      	b.n	8010b22 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8010b20:	2302      	movs	r3, #2
  }
}
 8010b22:	4618      	mov	r0, r3
 8010b24:	3728      	adds	r7, #40	@ 0x28
 8010b26:	46bd      	mov	sp, r7
 8010b28:	bd80      	pop	{r7, pc}
 8010b2a:	bf00      	nop
 8010b2c:	40008000 	.word	0x40008000

08010b30 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8010b30:	b580      	push	{r7, lr}
 8010b32:	b0ba      	sub	sp, #232	@ 0xe8
 8010b34:	af00      	add	r7, sp, #0
 8010b36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	681b      	ldr	r3, [r3, #0]
 8010b3c:	69db      	ldr	r3, [r3, #28]
 8010b3e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	681b      	ldr	r3, [r3, #0]
 8010b46:	681b      	ldr	r3, [r3, #0]
 8010b48:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	681b      	ldr	r3, [r3, #0]
 8010b50:	689b      	ldr	r3, [r3, #8]
 8010b52:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8010b56:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8010b5a:	f640 030f 	movw	r3, #2063	@ 0x80f
 8010b5e:	4013      	ands	r3, r2
 8010b60:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8010b64:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	d11b      	bne.n	8010ba4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8010b6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010b70:	f003 0320 	and.w	r3, r3, #32
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	d015      	beq.n	8010ba4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8010b78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010b7c:	f003 0320 	and.w	r3, r3, #32
 8010b80:	2b00      	cmp	r3, #0
 8010b82:	d105      	bne.n	8010b90 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8010b84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010b88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8010b8c:	2b00      	cmp	r3, #0
 8010b8e:	d009      	beq.n	8010ba4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	f000 8312 	beq.w	80111be <HAL_UART_IRQHandler+0x68e>
      {
        huart->RxISR(huart);
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010b9e:	6878      	ldr	r0, [r7, #4]
 8010ba0:	4798      	blx	r3
      }
      return;
 8010ba2:	e30c      	b.n	80111be <HAL_UART_IRQHandler+0x68e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8010ba4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	f000 8129 	beq.w	8010e00 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8010bae:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8010bb2:	4b90      	ldr	r3, [pc, #576]	@ (8010df4 <HAL_UART_IRQHandler+0x2c4>)
 8010bb4:	4013      	ands	r3, r2
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	d106      	bne.n	8010bc8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8010bba:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8010bbe:	4b8e      	ldr	r3, [pc, #568]	@ (8010df8 <HAL_UART_IRQHandler+0x2c8>)
 8010bc0:	4013      	ands	r3, r2
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	f000 811c 	beq.w	8010e00 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010bc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010bcc:	f003 0301 	and.w	r3, r3, #1
 8010bd0:	2b00      	cmp	r3, #0
 8010bd2:	d011      	beq.n	8010bf8 <HAL_UART_IRQHandler+0xc8>
 8010bd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010bd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010bdc:	2b00      	cmp	r3, #0
 8010bde:	d00b      	beq.n	8010bf8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	681b      	ldr	r3, [r3, #0]
 8010be4:	2201      	movs	r2, #1
 8010be6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010bee:	f043 0201 	orr.w	r2, r3, #1
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010bf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010bfc:	f003 0302 	and.w	r3, r3, #2
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	d011      	beq.n	8010c28 <HAL_UART_IRQHandler+0xf8>
 8010c04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010c08:	f003 0301 	and.w	r3, r3, #1
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	d00b      	beq.n	8010c28 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	681b      	ldr	r3, [r3, #0]
 8010c14:	2202      	movs	r2, #2
 8010c16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010c1e:	f043 0204 	orr.w	r2, r3, #4
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010c28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010c2c:	f003 0304 	and.w	r3, r3, #4
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	d011      	beq.n	8010c58 <HAL_UART_IRQHandler+0x128>
 8010c34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010c38:	f003 0301 	and.w	r3, r3, #1
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	d00b      	beq.n	8010c58 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	681b      	ldr	r3, [r3, #0]
 8010c44:	2204      	movs	r2, #4
 8010c46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010c4e:	f043 0202 	orr.w	r2, r3, #2
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8010c58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010c5c:	f003 0308 	and.w	r3, r3, #8
 8010c60:	2b00      	cmp	r3, #0
 8010c62:	d017      	beq.n	8010c94 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010c64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010c68:	f003 0320 	and.w	r3, r3, #32
 8010c6c:	2b00      	cmp	r3, #0
 8010c6e:	d105      	bne.n	8010c7c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8010c70:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8010c74:	4b5f      	ldr	r3, [pc, #380]	@ (8010df4 <HAL_UART_IRQHandler+0x2c4>)
 8010c76:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010c78:	2b00      	cmp	r3, #0
 8010c7a:	d00b      	beq.n	8010c94 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	681b      	ldr	r3, [r3, #0]
 8010c80:	2208      	movs	r2, #8
 8010c82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010c8a:	f043 0208 	orr.w	r2, r3, #8
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8010c94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010c98:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d012      	beq.n	8010cc6 <HAL_UART_IRQHandler+0x196>
 8010ca0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010ca4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	d00c      	beq.n	8010cc6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	681b      	ldr	r3, [r3, #0]
 8010cb0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8010cb4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010cbc:	f043 0220 	orr.w	r2, r3, #32
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010ccc:	2b00      	cmp	r3, #0
 8010cce:	f000 8278 	beq.w	80111c2 <HAL_UART_IRQHandler+0x692>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8010cd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010cd6:	f003 0320 	and.w	r3, r3, #32
 8010cda:	2b00      	cmp	r3, #0
 8010cdc:	d013      	beq.n	8010d06 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8010cde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010ce2:	f003 0320 	and.w	r3, r3, #32
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	d105      	bne.n	8010cf6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8010cea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010cee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	d007      	beq.n	8010d06 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010cfa:	2b00      	cmp	r3, #0
 8010cfc:	d003      	beq.n	8010d06 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010d02:	6878      	ldr	r0, [r7, #4]
 8010d04:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010d0c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	681b      	ldr	r3, [r3, #0]
 8010d14:	689b      	ldr	r3, [r3, #8]
 8010d16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010d1a:	2b40      	cmp	r3, #64	@ 0x40
 8010d1c:	d005      	beq.n	8010d2a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8010d1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8010d22:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010d26:	2b00      	cmp	r3, #0
 8010d28:	d058      	beq.n	8010ddc <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8010d2a:	6878      	ldr	r0, [r7, #4]
 8010d2c:	f001 f903 	bl	8011f36 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	681b      	ldr	r3, [r3, #0]
 8010d34:	689b      	ldr	r3, [r3, #8]
 8010d36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010d3a:	2b40      	cmp	r3, #64	@ 0x40
 8010d3c:	d148      	bne.n	8010dd0 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	681b      	ldr	r3, [r3, #0]
 8010d42:	3308      	adds	r3, #8
 8010d44:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d48:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8010d4c:	e853 3f00 	ldrex	r3, [r3]
 8010d50:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8010d54:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8010d58:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010d5c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	681b      	ldr	r3, [r3, #0]
 8010d64:	3308      	adds	r3, #8
 8010d66:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8010d6a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8010d6e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d72:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8010d76:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8010d7a:	e841 2300 	strex	r3, r2, [r1]
 8010d7e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8010d82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	d1d9      	bne.n	8010d3e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010d90:	2b00      	cmp	r3, #0
 8010d92:	d017      	beq.n	8010dc4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010d9a:	4a18      	ldr	r2, [pc, #96]	@ (8010dfc <HAL_UART_IRQHandler+0x2cc>)
 8010d9c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010da4:	4618      	mov	r0, r3
 8010da6:	f7fc f82b 	bl	800ce00 <HAL_DMA_Abort_IT>
 8010daa:	4603      	mov	r3, r0
 8010dac:	2b00      	cmp	r3, #0
 8010dae:	d01f      	beq.n	8010df0 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010db6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010db8:	687a      	ldr	r2, [r7, #4]
 8010dba:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8010dbe:	4610      	mov	r0, r2
 8010dc0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010dc2:	e015      	b.n	8010df0 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8010dca:	6878      	ldr	r0, [r7, #4]
 8010dcc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010dce:	e00f      	b.n	8010df0 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8010dd6:	6878      	ldr	r0, [r7, #4]
 8010dd8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010dda:	e009      	b.n	8010df0 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8010de2:	6878      	ldr	r0, [r7, #4]
 8010de4:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	2200      	movs	r2, #0
 8010dea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8010dee:	e1e8      	b.n	80111c2 <HAL_UART_IRQHandler+0x692>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010df0:	bf00      	nop
    return;
 8010df2:	e1e6      	b.n	80111c2 <HAL_UART_IRQHandler+0x692>
 8010df4:	10000001 	.word	0x10000001
 8010df8:	04000120 	.word	0x04000120
 8010dfc:	080122bf 	.word	0x080122bf

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010e04:	2b01      	cmp	r3, #1
 8010e06:	f040 8176 	bne.w	80110f6 <HAL_UART_IRQHandler+0x5c6>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8010e0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010e0e:	f003 0310 	and.w	r3, r3, #16
 8010e12:	2b00      	cmp	r3, #0
 8010e14:	f000 816f 	beq.w	80110f6 <HAL_UART_IRQHandler+0x5c6>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8010e18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010e1c:	f003 0310 	and.w	r3, r3, #16
 8010e20:	2b00      	cmp	r3, #0
 8010e22:	f000 8168 	beq.w	80110f6 <HAL_UART_IRQHandler+0x5c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	681b      	ldr	r3, [r3, #0]
 8010e2a:	2210      	movs	r2, #16
 8010e2c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	681b      	ldr	r3, [r3, #0]
 8010e32:	689b      	ldr	r3, [r3, #8]
 8010e34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010e38:	2b40      	cmp	r3, #64	@ 0x40
 8010e3a:	f040 80dc 	bne.w	8010ff6 <HAL_UART_IRQHandler+0x4c6>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010e44:	681b      	ldr	r3, [r3, #0]
 8010e46:	685b      	ldr	r3, [r3, #4]
 8010e48:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8010e4c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	f000 80b1 	beq.w	8010fb8 <HAL_UART_IRQHandler+0x488>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8010e5c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8010e60:	429a      	cmp	r2, r3
 8010e62:	f080 80a9 	bcs.w	8010fb8 <HAL_UART_IRQHandler+0x488>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8010e6c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010e76:	681b      	ldr	r3, [r3, #0]
 8010e78:	681b      	ldr	r3, [r3, #0]
 8010e7a:	f003 0320 	and.w	r3, r3, #32
 8010e7e:	2b00      	cmp	r3, #0
 8010e80:	f040 8087 	bne.w	8010f92 <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	681b      	ldr	r3, [r3, #0]
 8010e88:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8010e90:	e853 3f00 	ldrex	r3, [r3]
 8010e94:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8010e98:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8010e9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010ea0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	681b      	ldr	r3, [r3, #0]
 8010ea8:	461a      	mov	r2, r3
 8010eaa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8010eae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8010eb2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010eb6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8010eba:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8010ebe:	e841 2300 	strex	r3, r2, [r1]
 8010ec2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8010ec6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	d1da      	bne.n	8010e84 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	681b      	ldr	r3, [r3, #0]
 8010ed2:	3308      	adds	r3, #8
 8010ed4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ed6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010ed8:	e853 3f00 	ldrex	r3, [r3]
 8010edc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8010ede:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010ee0:	f023 0301 	bic.w	r3, r3, #1
 8010ee4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	681b      	ldr	r3, [r3, #0]
 8010eec:	3308      	adds	r3, #8
 8010eee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8010ef2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8010ef6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ef8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8010efa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8010efe:	e841 2300 	strex	r3, r2, [r1]
 8010f02:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8010f04:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010f06:	2b00      	cmp	r3, #0
 8010f08:	d1e1      	bne.n	8010ece <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	681b      	ldr	r3, [r3, #0]
 8010f0e:	3308      	adds	r3, #8
 8010f10:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f12:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010f14:	e853 3f00 	ldrex	r3, [r3]
 8010f18:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8010f1a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010f1c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010f20:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	681b      	ldr	r3, [r3, #0]
 8010f28:	3308      	adds	r3, #8
 8010f2a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8010f2e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8010f30:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f32:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8010f34:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8010f36:	e841 2300 	strex	r3, r2, [r1]
 8010f3a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8010f3c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	d1e3      	bne.n	8010f0a <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	2220      	movs	r2, #32
 8010f46:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	2200      	movs	r2, #0
 8010f4e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	681b      	ldr	r3, [r3, #0]
 8010f54:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010f58:	e853 3f00 	ldrex	r3, [r3]
 8010f5c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8010f5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010f60:	f023 0310 	bic.w	r3, r3, #16
 8010f64:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	681b      	ldr	r3, [r3, #0]
 8010f6c:	461a      	mov	r2, r3
 8010f6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010f72:	65bb      	str	r3, [r7, #88]	@ 0x58
 8010f74:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f76:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8010f78:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8010f7a:	e841 2300 	strex	r3, r2, [r1]
 8010f7e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8010f80:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	d1e4      	bne.n	8010f50 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010f8c:	4618      	mov	r0, r3
 8010f8e:	f7fb fede 	bl	800cd4e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	2202      	movs	r2, #2
 8010f96:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8010f9e:	687a      	ldr	r2, [r7, #4]
 8010fa0:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 8010fa4:	687a      	ldr	r2, [r7, #4]
 8010fa6:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 8010faa:	b292      	uxth	r2, r2
 8010fac:	1a8a      	subs	r2, r1, r2
 8010fae:	b292      	uxth	r2, r2
 8010fb0:	4611      	mov	r1, r2
 8010fb2:	6878      	ldr	r0, [r7, #4]
 8010fb4:	4798      	blx	r3
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8010fb6:	e106      	b.n	80111c6 <HAL_UART_IRQHandler+0x696>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8010fbe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8010fc2:	429a      	cmp	r2, r3
 8010fc4:	f040 80ff 	bne.w	80111c6 <HAL_UART_IRQHandler+0x696>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010fce:	681b      	ldr	r3, [r3, #0]
 8010fd0:	681b      	ldr	r3, [r3, #0]
 8010fd2:	f003 0320 	and.w	r3, r3, #32
 8010fd6:	2b20      	cmp	r3, #32
 8010fd8:	f040 80f5 	bne.w	80111c6 <HAL_UART_IRQHandler+0x696>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	2202      	movs	r2, #2
 8010fe0:	671a      	str	r2, [r3, #112]	@ 0x70
            huart->RxEventCallback(huart, huart->RxXferSize);
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8010fe8:	687a      	ldr	r2, [r7, #4]
 8010fea:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8010fee:	4611      	mov	r1, r2
 8010ff0:	6878      	ldr	r0, [r7, #4]
 8010ff2:	4798      	blx	r3
      return;
 8010ff4:	e0e7      	b.n	80111c6 <HAL_UART_IRQHandler+0x696>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8011002:	b29b      	uxth	r3, r3
 8011004:	1ad3      	subs	r3, r2, r3
 8011006:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8011010:	b29b      	uxth	r3, r3
 8011012:	2b00      	cmp	r3, #0
 8011014:	f000 80d9 	beq.w	80111ca <HAL_UART_IRQHandler+0x69a>
          && (nb_rx_data > 0U))
 8011018:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 801101c:	2b00      	cmp	r3, #0
 801101e:	f000 80d4 	beq.w	80111ca <HAL_UART_IRQHandler+0x69a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	681b      	ldr	r3, [r3, #0]
 8011026:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011028:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801102a:	e853 3f00 	ldrex	r3, [r3]
 801102e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8011030:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011032:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8011036:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	681b      	ldr	r3, [r3, #0]
 801103e:	461a      	mov	r2, r3
 8011040:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8011044:	647b      	str	r3, [r7, #68]	@ 0x44
 8011046:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011048:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801104a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801104c:	e841 2300 	strex	r3, r2, [r1]
 8011050:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8011052:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011054:	2b00      	cmp	r3, #0
 8011056:	d1e4      	bne.n	8011022 <HAL_UART_IRQHandler+0x4f2>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	681b      	ldr	r3, [r3, #0]
 801105c:	3308      	adds	r3, #8
 801105e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011062:	e853 3f00 	ldrex	r3, [r3]
 8011066:	623b      	str	r3, [r7, #32]
   return(result);
 8011068:	6a3b      	ldr	r3, [r7, #32]
 801106a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801106e:	f023 0301 	bic.w	r3, r3, #1
 8011072:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	681b      	ldr	r3, [r3, #0]
 801107a:	3308      	adds	r3, #8
 801107c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8011080:	633a      	str	r2, [r7, #48]	@ 0x30
 8011082:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011084:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011086:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011088:	e841 2300 	strex	r3, r2, [r1]
 801108c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801108e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011090:	2b00      	cmp	r3, #0
 8011092:	d1e1      	bne.n	8011058 <HAL_UART_IRQHandler+0x528>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	2220      	movs	r2, #32
 8011098:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	2200      	movs	r2, #0
 80110a0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	2200      	movs	r2, #0
 80110a6:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	681b      	ldr	r3, [r3, #0]
 80110ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80110ae:	693b      	ldr	r3, [r7, #16]
 80110b0:	e853 3f00 	ldrex	r3, [r3]
 80110b4:	60fb      	str	r3, [r7, #12]
   return(result);
 80110b6:	68fb      	ldr	r3, [r7, #12]
 80110b8:	f023 0310 	bic.w	r3, r3, #16
 80110bc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	681b      	ldr	r3, [r3, #0]
 80110c4:	461a      	mov	r2, r3
 80110c6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80110ca:	61fb      	str	r3, [r7, #28]
 80110cc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80110ce:	69b9      	ldr	r1, [r7, #24]
 80110d0:	69fa      	ldr	r2, [r7, #28]
 80110d2:	e841 2300 	strex	r3, r2, [r1]
 80110d6:	617b      	str	r3, [r7, #20]
   return(result);
 80110d8:	697b      	ldr	r3, [r7, #20]
 80110da:	2b00      	cmp	r3, #0
 80110dc:	d1e4      	bne.n	80110a8 <HAL_UART_IRQHandler+0x578>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	2202      	movs	r2, #2
 80110e2:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80110ea:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 80110ee:	4611      	mov	r1, r2
 80110f0:	6878      	ldr	r0, [r7, #4]
 80110f2:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80110f4:	e069      	b.n	80111ca <HAL_UART_IRQHandler+0x69a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80110f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80110fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80110fe:	2b00      	cmp	r3, #0
 8011100:	d010      	beq.n	8011124 <HAL_UART_IRQHandler+0x5f4>
 8011102:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8011106:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801110a:	2b00      	cmp	r3, #0
 801110c:	d00a      	beq.n	8011124 <HAL_UART_IRQHandler+0x5f4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	681b      	ldr	r3, [r3, #0]
 8011112:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8011116:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801111e:	6878      	ldr	r0, [r7, #4]
 8011120:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8011122:	e055      	b.n	80111d0 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8011124:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011128:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801112c:	2b00      	cmp	r3, #0
 801112e:	d014      	beq.n	801115a <HAL_UART_IRQHandler+0x62a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8011130:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011134:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011138:	2b00      	cmp	r3, #0
 801113a:	d105      	bne.n	8011148 <HAL_UART_IRQHandler+0x618>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 801113c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8011140:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8011144:	2b00      	cmp	r3, #0
 8011146:	d008      	beq.n	801115a <HAL_UART_IRQHandler+0x62a>
  {
    if (huart->TxISR != NULL)
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801114c:	2b00      	cmp	r3, #0
 801114e:	d03e      	beq.n	80111ce <HAL_UART_IRQHandler+0x69e>
    {
      huart->TxISR(huart);
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011154:	6878      	ldr	r0, [r7, #4]
 8011156:	4798      	blx	r3
    }
    return;
 8011158:	e039      	b.n	80111ce <HAL_UART_IRQHandler+0x69e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801115a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801115e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011162:	2b00      	cmp	r3, #0
 8011164:	d009      	beq.n	801117a <HAL_UART_IRQHandler+0x64a>
 8011166:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801116a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801116e:	2b00      	cmp	r3, #0
 8011170:	d003      	beq.n	801117a <HAL_UART_IRQHandler+0x64a>
  {
    UART_EndTransmit_IT(huart);
 8011172:	6878      	ldr	r0, [r7, #4]
 8011174:	f001 f8b7 	bl	80122e6 <UART_EndTransmit_IT>
    return;
 8011178:	e02a      	b.n	80111d0 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 801117a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801117e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8011182:	2b00      	cmp	r3, #0
 8011184:	d00b      	beq.n	801119e <HAL_UART_IRQHandler+0x66e>
 8011186:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801118a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 801118e:	2b00      	cmp	r3, #0
 8011190:	d005      	beq.n	801119e <HAL_UART_IRQHandler+0x66e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8011198:	6878      	ldr	r0, [r7, #4]
 801119a:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801119c:	e018      	b.n	80111d0 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 801119e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80111a2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80111a6:	2b00      	cmp	r3, #0
 80111a8:	d012      	beq.n	80111d0 <HAL_UART_IRQHandler+0x6a0>
 80111aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80111ae:	2b00      	cmp	r3, #0
 80111b0:	da0e      	bge.n	80111d0 <HAL_UART_IRQHandler+0x6a0>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80111b8:	6878      	ldr	r0, [r7, #4]
 80111ba:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80111bc:	e008      	b.n	80111d0 <HAL_UART_IRQHandler+0x6a0>
      return;
 80111be:	bf00      	nop
 80111c0:	e006      	b.n	80111d0 <HAL_UART_IRQHandler+0x6a0>
    return;
 80111c2:	bf00      	nop
 80111c4:	e004      	b.n	80111d0 <HAL_UART_IRQHandler+0x6a0>
      return;
 80111c6:	bf00      	nop
 80111c8:	e002      	b.n	80111d0 <HAL_UART_IRQHandler+0x6a0>
      return;
 80111ca:	bf00      	nop
 80111cc:	e000      	b.n	80111d0 <HAL_UART_IRQHandler+0x6a0>
    return;
 80111ce:	bf00      	nop
  }
}
 80111d0:	37e8      	adds	r7, #232	@ 0xe8
 80111d2:	46bd      	mov	sp, r7
 80111d4:	bd80      	pop	{r7, pc}
 80111d6:	bf00      	nop

080111d8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80111d8:	b480      	push	{r7}
 80111da:	b083      	sub	sp, #12
 80111dc:	af00      	add	r7, sp, #0
 80111de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80111e0:	bf00      	nop
 80111e2:	370c      	adds	r7, #12
 80111e4:	46bd      	mov	sp, r7
 80111e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111ea:	4770      	bx	lr

080111ec <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80111ec:	b480      	push	{r7}
 80111ee:	b083      	sub	sp, #12
 80111f0:	af00      	add	r7, sp, #0
 80111f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80111f4:	bf00      	nop
 80111f6:	370c      	adds	r7, #12
 80111f8:	46bd      	mov	sp, r7
 80111fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111fe:	4770      	bx	lr

08011200 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8011200:	b480      	push	{r7}
 8011202:	b083      	sub	sp, #12
 8011204:	af00      	add	r7, sp, #0
 8011206:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8011208:	bf00      	nop
 801120a:	370c      	adds	r7, #12
 801120c:	46bd      	mov	sp, r7
 801120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011212:	4770      	bx	lr

08011214 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8011214:	b480      	push	{r7}
 8011216:	b083      	sub	sp, #12
 8011218:	af00      	add	r7, sp, #0
 801121a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 801121c:	bf00      	nop
 801121e:	370c      	adds	r7, #12
 8011220:	46bd      	mov	sp, r7
 8011222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011226:	4770      	bx	lr

08011228 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8011228:	b480      	push	{r7}
 801122a:	b083      	sub	sp, #12
 801122c:	af00      	add	r7, sp, #0
 801122e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8011230:	bf00      	nop
 8011232:	370c      	adds	r7, #12
 8011234:	46bd      	mov	sp, r7
 8011236:	f85d 7b04 	ldr.w	r7, [sp], #4
 801123a:	4770      	bx	lr

0801123c <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 801123c:	b480      	push	{r7}
 801123e:	b083      	sub	sp, #12
 8011240:	af00      	add	r7, sp, #0
 8011242:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8011244:	bf00      	nop
 8011246:	370c      	adds	r7, #12
 8011248:	46bd      	mov	sp, r7
 801124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801124e:	4770      	bx	lr

08011250 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8011250:	b480      	push	{r7}
 8011252:	b083      	sub	sp, #12
 8011254:	af00      	add	r7, sp, #0
 8011256:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8011258:	bf00      	nop
 801125a:	370c      	adds	r7, #12
 801125c:	46bd      	mov	sp, r7
 801125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011262:	4770      	bx	lr

08011264 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8011264:	b480      	push	{r7}
 8011266:	b083      	sub	sp, #12
 8011268:	af00      	add	r7, sp, #0
 801126a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 801126c:	bf00      	nop
 801126e:	370c      	adds	r7, #12
 8011270:	46bd      	mov	sp, r7
 8011272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011276:	4770      	bx	lr

08011278 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8011278:	b480      	push	{r7}
 801127a:	b083      	sub	sp, #12
 801127c:	af00      	add	r7, sp, #0
 801127e:	6078      	str	r0, [r7, #4]
 8011280:	460b      	mov	r3, r1
 8011282:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8011284:	bf00      	nop
 8011286:	370c      	adds	r7, #12
 8011288:	46bd      	mov	sp, r7
 801128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801128e:	4770      	bx	lr

08011290 <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 8011290:	b480      	push	{r7}
 8011292:	b083      	sub	sp, #12
 8011294:	af00      	add	r7, sp, #0
 8011296:	6078      	str	r0, [r7, #4]
 8011298:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	681b      	ldr	r3, [r3, #0]
 801129e:	4a09      	ldr	r2, [pc, #36]	@ (80112c4 <HAL_UART_ReceiverTimeout_Config+0x34>)
 80112a0:	4293      	cmp	r3, r2
 80112a2:	d009      	beq.n	80112b8 <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	681b      	ldr	r3, [r3, #0]
 80112a8:	695b      	ldr	r3, [r3, #20]
 80112aa:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	681b      	ldr	r3, [r3, #0]
 80112b2:	683a      	ldr	r2, [r7, #0]
 80112b4:	430a      	orrs	r2, r1
 80112b6:	615a      	str	r2, [r3, #20]
  }
}
 80112b8:	bf00      	nop
 80112ba:	370c      	adds	r7, #12
 80112bc:	46bd      	mov	sp, r7
 80112be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112c2:	4770      	bx	lr
 80112c4:	40008000 	.word	0x40008000

080112c8 <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 80112c8:	b480      	push	{r7}
 80112ca:	b083      	sub	sp, #12
 80112cc:	af00      	add	r7, sp, #0
 80112ce:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	681b      	ldr	r3, [r3, #0]
 80112d4:	4a18      	ldr	r2, [pc, #96]	@ (8011338 <HAL_UART_EnableReceiverTimeout+0x70>)
 80112d6:	4293      	cmp	r3, r2
 80112d8:	d027      	beq.n	801132a <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80112e0:	2b20      	cmp	r3, #32
 80112e2:	d120      	bne.n	8011326 <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80112ea:	2b01      	cmp	r3, #1
 80112ec:	d101      	bne.n	80112f2 <HAL_UART_EnableReceiverTimeout+0x2a>
 80112ee:	2302      	movs	r3, #2
 80112f0:	e01c      	b.n	801132c <HAL_UART_EnableReceiverTimeout+0x64>
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	2201      	movs	r2, #1
 80112f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	2224      	movs	r2, #36	@ 0x24
 80112fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	681b      	ldr	r3, [r3, #0]
 8011306:	685a      	ldr	r2, [r3, #4]
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	681b      	ldr	r3, [r3, #0]
 801130c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8011310:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	2220      	movs	r2, #32
 8011316:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	2200      	movs	r2, #0
 801131e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 8011322:	2300      	movs	r3, #0
 8011324:	e002      	b.n	801132c <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 8011326:	2302      	movs	r3, #2
 8011328:	e000      	b.n	801132c <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 801132a:	2301      	movs	r3, #1
  }
}
 801132c:	4618      	mov	r0, r3
 801132e:	370c      	adds	r7, #12
 8011330:	46bd      	mov	sp, r7
 8011332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011336:	4770      	bx	lr
 8011338:	40008000 	.word	0x40008000

0801133c <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 801133c:	b480      	push	{r7}
 801133e:	b083      	sub	sp, #12
 8011340:	af00      	add	r7, sp, #0
 8011342:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 801134a:	4618      	mov	r0, r3
 801134c:	370c      	adds	r7, #12
 801134e:	46bd      	mov	sp, r7
 8011350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011354:	4770      	bx	lr
	...

08011358 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8011358:	b480      	push	{r7}
 801135a:	b083      	sub	sp, #12
 801135c:	af00      	add	r7, sp, #0
 801135e:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	4a1a      	ldr	r2, [pc, #104]	@ (80113cc <UART_InitCallbacksToDefault+0x74>)
 8011364:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	4a19      	ldr	r2, [pc, #100]	@ (80113d0 <UART_InitCallbacksToDefault+0x78>)
 801136c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	4a18      	ldr	r2, [pc, #96]	@ (80113d4 <UART_InitCallbacksToDefault+0x7c>)
 8011374:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	4a17      	ldr	r2, [pc, #92]	@ (80113d8 <UART_InitCallbacksToDefault+0x80>)
 801137c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	4a16      	ldr	r2, [pc, #88]	@ (80113dc <UART_InitCallbacksToDefault+0x84>)
 8011384:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	4a15      	ldr	r2, [pc, #84]	@ (80113e0 <UART_InitCallbacksToDefault+0x88>)
 801138c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	4a14      	ldr	r2, [pc, #80]	@ (80113e4 <UART_InitCallbacksToDefault+0x8c>)
 8011394:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	4a13      	ldr	r2, [pc, #76]	@ (80113e8 <UART_InitCallbacksToDefault+0x90>)
 801139c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	4a12      	ldr	r2, [pc, #72]	@ (80113ec <UART_InitCallbacksToDefault+0x94>)
 80113a4:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	4a11      	ldr	r2, [pc, #68]	@ (80113f0 <UART_InitCallbacksToDefault+0x98>)
 80113ac:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	4a10      	ldr	r2, [pc, #64]	@ (80113f4 <UART_InitCallbacksToDefault+0x9c>)
 80113b4:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	4a0f      	ldr	r2, [pc, #60]	@ (80113f8 <UART_InitCallbacksToDefault+0xa0>)
 80113bc:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 80113c0:	bf00      	nop
 80113c2:	370c      	adds	r7, #12
 80113c4:	46bd      	mov	sp, r7
 80113c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113ca:	4770      	bx	lr
 80113cc:	080111ed 	.word	0x080111ed
 80113d0:	080111d9 	.word	0x080111d9
 80113d4:	08011215 	.word	0x08011215
 80113d8:	08011201 	.word	0x08011201
 80113dc:	08011229 	.word	0x08011229
 80113e0:	0801123d 	.word	0x0801123d
 80113e4:	08011251 	.word	0x08011251
 80113e8:	08011265 	.word	0x08011265
 80113ec:	08012341 	.word	0x08012341
 80113f0:	08012355 	.word	0x08012355
 80113f4:	08012369 	.word	0x08012369
 80113f8:	08011279 	.word	0x08011279

080113fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80113fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011400:	b08c      	sub	sp, #48	@ 0x30
 8011402:	af00      	add	r7, sp, #0
 8011404:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8011406:	2300      	movs	r3, #0
 8011408:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801140c:	697b      	ldr	r3, [r7, #20]
 801140e:	689a      	ldr	r2, [r3, #8]
 8011410:	697b      	ldr	r3, [r7, #20]
 8011412:	691b      	ldr	r3, [r3, #16]
 8011414:	431a      	orrs	r2, r3
 8011416:	697b      	ldr	r3, [r7, #20]
 8011418:	695b      	ldr	r3, [r3, #20]
 801141a:	431a      	orrs	r2, r3
 801141c:	697b      	ldr	r3, [r7, #20]
 801141e:	69db      	ldr	r3, [r3, #28]
 8011420:	4313      	orrs	r3, r2
 8011422:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8011424:	697b      	ldr	r3, [r7, #20]
 8011426:	681b      	ldr	r3, [r3, #0]
 8011428:	681a      	ldr	r2, [r3, #0]
 801142a:	4baa      	ldr	r3, [pc, #680]	@ (80116d4 <UART_SetConfig+0x2d8>)
 801142c:	4013      	ands	r3, r2
 801142e:	697a      	ldr	r2, [r7, #20]
 8011430:	6812      	ldr	r2, [r2, #0]
 8011432:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011434:	430b      	orrs	r3, r1
 8011436:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011438:	697b      	ldr	r3, [r7, #20]
 801143a:	681b      	ldr	r3, [r3, #0]
 801143c:	685b      	ldr	r3, [r3, #4]
 801143e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8011442:	697b      	ldr	r3, [r7, #20]
 8011444:	68da      	ldr	r2, [r3, #12]
 8011446:	697b      	ldr	r3, [r7, #20]
 8011448:	681b      	ldr	r3, [r3, #0]
 801144a:	430a      	orrs	r2, r1
 801144c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801144e:	697b      	ldr	r3, [r7, #20]
 8011450:	699b      	ldr	r3, [r3, #24]
 8011452:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8011454:	697b      	ldr	r3, [r7, #20]
 8011456:	681b      	ldr	r3, [r3, #0]
 8011458:	4a9f      	ldr	r2, [pc, #636]	@ (80116d8 <UART_SetConfig+0x2dc>)
 801145a:	4293      	cmp	r3, r2
 801145c:	d004      	beq.n	8011468 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801145e:	697b      	ldr	r3, [r7, #20]
 8011460:	6a1b      	ldr	r3, [r3, #32]
 8011462:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011464:	4313      	orrs	r3, r2
 8011466:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8011468:	697b      	ldr	r3, [r7, #20]
 801146a:	681b      	ldr	r3, [r3, #0]
 801146c:	689b      	ldr	r3, [r3, #8]
 801146e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8011472:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8011476:	697a      	ldr	r2, [r7, #20]
 8011478:	6812      	ldr	r2, [r2, #0]
 801147a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801147c:	430b      	orrs	r3, r1
 801147e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8011480:	697b      	ldr	r3, [r7, #20]
 8011482:	681b      	ldr	r3, [r3, #0]
 8011484:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011486:	f023 010f 	bic.w	r1, r3, #15
 801148a:	697b      	ldr	r3, [r7, #20]
 801148c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801148e:	697b      	ldr	r3, [r7, #20]
 8011490:	681b      	ldr	r3, [r3, #0]
 8011492:	430a      	orrs	r2, r1
 8011494:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8011496:	697b      	ldr	r3, [r7, #20]
 8011498:	681b      	ldr	r3, [r3, #0]
 801149a:	4a90      	ldr	r2, [pc, #576]	@ (80116dc <UART_SetConfig+0x2e0>)
 801149c:	4293      	cmp	r3, r2
 801149e:	d125      	bne.n	80114ec <UART_SetConfig+0xf0>
 80114a0:	4b8f      	ldr	r3, [pc, #572]	@ (80116e0 <UART_SetConfig+0x2e4>)
 80114a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80114a6:	f003 0303 	and.w	r3, r3, #3
 80114aa:	2b03      	cmp	r3, #3
 80114ac:	d81a      	bhi.n	80114e4 <UART_SetConfig+0xe8>
 80114ae:	a201      	add	r2, pc, #4	@ (adr r2, 80114b4 <UART_SetConfig+0xb8>)
 80114b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80114b4:	080114c5 	.word	0x080114c5
 80114b8:	080114d5 	.word	0x080114d5
 80114bc:	080114cd 	.word	0x080114cd
 80114c0:	080114dd 	.word	0x080114dd
 80114c4:	2301      	movs	r3, #1
 80114c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80114ca:	e116      	b.n	80116fa <UART_SetConfig+0x2fe>
 80114cc:	2302      	movs	r3, #2
 80114ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80114d2:	e112      	b.n	80116fa <UART_SetConfig+0x2fe>
 80114d4:	2304      	movs	r3, #4
 80114d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80114da:	e10e      	b.n	80116fa <UART_SetConfig+0x2fe>
 80114dc:	2308      	movs	r3, #8
 80114de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80114e2:	e10a      	b.n	80116fa <UART_SetConfig+0x2fe>
 80114e4:	2310      	movs	r3, #16
 80114e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80114ea:	e106      	b.n	80116fa <UART_SetConfig+0x2fe>
 80114ec:	697b      	ldr	r3, [r7, #20]
 80114ee:	681b      	ldr	r3, [r3, #0]
 80114f0:	4a7c      	ldr	r2, [pc, #496]	@ (80116e4 <UART_SetConfig+0x2e8>)
 80114f2:	4293      	cmp	r3, r2
 80114f4:	d138      	bne.n	8011568 <UART_SetConfig+0x16c>
 80114f6:	4b7a      	ldr	r3, [pc, #488]	@ (80116e0 <UART_SetConfig+0x2e4>)
 80114f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80114fc:	f003 030c 	and.w	r3, r3, #12
 8011500:	2b0c      	cmp	r3, #12
 8011502:	d82d      	bhi.n	8011560 <UART_SetConfig+0x164>
 8011504:	a201      	add	r2, pc, #4	@ (adr r2, 801150c <UART_SetConfig+0x110>)
 8011506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801150a:	bf00      	nop
 801150c:	08011541 	.word	0x08011541
 8011510:	08011561 	.word	0x08011561
 8011514:	08011561 	.word	0x08011561
 8011518:	08011561 	.word	0x08011561
 801151c:	08011551 	.word	0x08011551
 8011520:	08011561 	.word	0x08011561
 8011524:	08011561 	.word	0x08011561
 8011528:	08011561 	.word	0x08011561
 801152c:	08011549 	.word	0x08011549
 8011530:	08011561 	.word	0x08011561
 8011534:	08011561 	.word	0x08011561
 8011538:	08011561 	.word	0x08011561
 801153c:	08011559 	.word	0x08011559
 8011540:	2300      	movs	r3, #0
 8011542:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011546:	e0d8      	b.n	80116fa <UART_SetConfig+0x2fe>
 8011548:	2302      	movs	r3, #2
 801154a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801154e:	e0d4      	b.n	80116fa <UART_SetConfig+0x2fe>
 8011550:	2304      	movs	r3, #4
 8011552:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011556:	e0d0      	b.n	80116fa <UART_SetConfig+0x2fe>
 8011558:	2308      	movs	r3, #8
 801155a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801155e:	e0cc      	b.n	80116fa <UART_SetConfig+0x2fe>
 8011560:	2310      	movs	r3, #16
 8011562:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011566:	e0c8      	b.n	80116fa <UART_SetConfig+0x2fe>
 8011568:	697b      	ldr	r3, [r7, #20]
 801156a:	681b      	ldr	r3, [r3, #0]
 801156c:	4a5e      	ldr	r2, [pc, #376]	@ (80116e8 <UART_SetConfig+0x2ec>)
 801156e:	4293      	cmp	r3, r2
 8011570:	d125      	bne.n	80115be <UART_SetConfig+0x1c2>
 8011572:	4b5b      	ldr	r3, [pc, #364]	@ (80116e0 <UART_SetConfig+0x2e4>)
 8011574:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011578:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 801157c:	2b30      	cmp	r3, #48	@ 0x30
 801157e:	d016      	beq.n	80115ae <UART_SetConfig+0x1b2>
 8011580:	2b30      	cmp	r3, #48	@ 0x30
 8011582:	d818      	bhi.n	80115b6 <UART_SetConfig+0x1ba>
 8011584:	2b20      	cmp	r3, #32
 8011586:	d00a      	beq.n	801159e <UART_SetConfig+0x1a2>
 8011588:	2b20      	cmp	r3, #32
 801158a:	d814      	bhi.n	80115b6 <UART_SetConfig+0x1ba>
 801158c:	2b00      	cmp	r3, #0
 801158e:	d002      	beq.n	8011596 <UART_SetConfig+0x19a>
 8011590:	2b10      	cmp	r3, #16
 8011592:	d008      	beq.n	80115a6 <UART_SetConfig+0x1aa>
 8011594:	e00f      	b.n	80115b6 <UART_SetConfig+0x1ba>
 8011596:	2300      	movs	r3, #0
 8011598:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801159c:	e0ad      	b.n	80116fa <UART_SetConfig+0x2fe>
 801159e:	2302      	movs	r3, #2
 80115a0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80115a4:	e0a9      	b.n	80116fa <UART_SetConfig+0x2fe>
 80115a6:	2304      	movs	r3, #4
 80115a8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80115ac:	e0a5      	b.n	80116fa <UART_SetConfig+0x2fe>
 80115ae:	2308      	movs	r3, #8
 80115b0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80115b4:	e0a1      	b.n	80116fa <UART_SetConfig+0x2fe>
 80115b6:	2310      	movs	r3, #16
 80115b8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80115bc:	e09d      	b.n	80116fa <UART_SetConfig+0x2fe>
 80115be:	697b      	ldr	r3, [r7, #20]
 80115c0:	681b      	ldr	r3, [r3, #0]
 80115c2:	4a4a      	ldr	r2, [pc, #296]	@ (80116ec <UART_SetConfig+0x2f0>)
 80115c4:	4293      	cmp	r3, r2
 80115c6:	d125      	bne.n	8011614 <UART_SetConfig+0x218>
 80115c8:	4b45      	ldr	r3, [pc, #276]	@ (80116e0 <UART_SetConfig+0x2e4>)
 80115ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80115ce:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80115d2:	2bc0      	cmp	r3, #192	@ 0xc0
 80115d4:	d016      	beq.n	8011604 <UART_SetConfig+0x208>
 80115d6:	2bc0      	cmp	r3, #192	@ 0xc0
 80115d8:	d818      	bhi.n	801160c <UART_SetConfig+0x210>
 80115da:	2b80      	cmp	r3, #128	@ 0x80
 80115dc:	d00a      	beq.n	80115f4 <UART_SetConfig+0x1f8>
 80115de:	2b80      	cmp	r3, #128	@ 0x80
 80115e0:	d814      	bhi.n	801160c <UART_SetConfig+0x210>
 80115e2:	2b00      	cmp	r3, #0
 80115e4:	d002      	beq.n	80115ec <UART_SetConfig+0x1f0>
 80115e6:	2b40      	cmp	r3, #64	@ 0x40
 80115e8:	d008      	beq.n	80115fc <UART_SetConfig+0x200>
 80115ea:	e00f      	b.n	801160c <UART_SetConfig+0x210>
 80115ec:	2300      	movs	r3, #0
 80115ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80115f2:	e082      	b.n	80116fa <UART_SetConfig+0x2fe>
 80115f4:	2302      	movs	r3, #2
 80115f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80115fa:	e07e      	b.n	80116fa <UART_SetConfig+0x2fe>
 80115fc:	2304      	movs	r3, #4
 80115fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011602:	e07a      	b.n	80116fa <UART_SetConfig+0x2fe>
 8011604:	2308      	movs	r3, #8
 8011606:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801160a:	e076      	b.n	80116fa <UART_SetConfig+0x2fe>
 801160c:	2310      	movs	r3, #16
 801160e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011612:	e072      	b.n	80116fa <UART_SetConfig+0x2fe>
 8011614:	697b      	ldr	r3, [r7, #20]
 8011616:	681b      	ldr	r3, [r3, #0]
 8011618:	4a35      	ldr	r2, [pc, #212]	@ (80116f0 <UART_SetConfig+0x2f4>)
 801161a:	4293      	cmp	r3, r2
 801161c:	d12a      	bne.n	8011674 <UART_SetConfig+0x278>
 801161e:	4b30      	ldr	r3, [pc, #192]	@ (80116e0 <UART_SetConfig+0x2e4>)
 8011620:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011624:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8011628:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801162c:	d01a      	beq.n	8011664 <UART_SetConfig+0x268>
 801162e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8011632:	d81b      	bhi.n	801166c <UART_SetConfig+0x270>
 8011634:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011638:	d00c      	beq.n	8011654 <UART_SetConfig+0x258>
 801163a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801163e:	d815      	bhi.n	801166c <UART_SetConfig+0x270>
 8011640:	2b00      	cmp	r3, #0
 8011642:	d003      	beq.n	801164c <UART_SetConfig+0x250>
 8011644:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011648:	d008      	beq.n	801165c <UART_SetConfig+0x260>
 801164a:	e00f      	b.n	801166c <UART_SetConfig+0x270>
 801164c:	2300      	movs	r3, #0
 801164e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011652:	e052      	b.n	80116fa <UART_SetConfig+0x2fe>
 8011654:	2302      	movs	r3, #2
 8011656:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801165a:	e04e      	b.n	80116fa <UART_SetConfig+0x2fe>
 801165c:	2304      	movs	r3, #4
 801165e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011662:	e04a      	b.n	80116fa <UART_SetConfig+0x2fe>
 8011664:	2308      	movs	r3, #8
 8011666:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801166a:	e046      	b.n	80116fa <UART_SetConfig+0x2fe>
 801166c:	2310      	movs	r3, #16
 801166e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011672:	e042      	b.n	80116fa <UART_SetConfig+0x2fe>
 8011674:	697b      	ldr	r3, [r7, #20]
 8011676:	681b      	ldr	r3, [r3, #0]
 8011678:	4a17      	ldr	r2, [pc, #92]	@ (80116d8 <UART_SetConfig+0x2dc>)
 801167a:	4293      	cmp	r3, r2
 801167c:	d13a      	bne.n	80116f4 <UART_SetConfig+0x2f8>
 801167e:	4b18      	ldr	r3, [pc, #96]	@ (80116e0 <UART_SetConfig+0x2e4>)
 8011680:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011684:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8011688:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 801168c:	d01a      	beq.n	80116c4 <UART_SetConfig+0x2c8>
 801168e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8011692:	d81b      	bhi.n	80116cc <UART_SetConfig+0x2d0>
 8011694:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8011698:	d00c      	beq.n	80116b4 <UART_SetConfig+0x2b8>
 801169a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801169e:	d815      	bhi.n	80116cc <UART_SetConfig+0x2d0>
 80116a0:	2b00      	cmp	r3, #0
 80116a2:	d003      	beq.n	80116ac <UART_SetConfig+0x2b0>
 80116a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80116a8:	d008      	beq.n	80116bc <UART_SetConfig+0x2c0>
 80116aa:	e00f      	b.n	80116cc <UART_SetConfig+0x2d0>
 80116ac:	2300      	movs	r3, #0
 80116ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80116b2:	e022      	b.n	80116fa <UART_SetConfig+0x2fe>
 80116b4:	2302      	movs	r3, #2
 80116b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80116ba:	e01e      	b.n	80116fa <UART_SetConfig+0x2fe>
 80116bc:	2304      	movs	r3, #4
 80116be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80116c2:	e01a      	b.n	80116fa <UART_SetConfig+0x2fe>
 80116c4:	2308      	movs	r3, #8
 80116c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80116ca:	e016      	b.n	80116fa <UART_SetConfig+0x2fe>
 80116cc:	2310      	movs	r3, #16
 80116ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80116d2:	e012      	b.n	80116fa <UART_SetConfig+0x2fe>
 80116d4:	cfff69f3 	.word	0xcfff69f3
 80116d8:	40008000 	.word	0x40008000
 80116dc:	40013800 	.word	0x40013800
 80116e0:	40021000 	.word	0x40021000
 80116e4:	40004400 	.word	0x40004400
 80116e8:	40004800 	.word	0x40004800
 80116ec:	40004c00 	.word	0x40004c00
 80116f0:	40005000 	.word	0x40005000
 80116f4:	2310      	movs	r3, #16
 80116f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80116fa:	697b      	ldr	r3, [r7, #20]
 80116fc:	681b      	ldr	r3, [r3, #0]
 80116fe:	4aae      	ldr	r2, [pc, #696]	@ (80119b8 <UART_SetConfig+0x5bc>)
 8011700:	4293      	cmp	r3, r2
 8011702:	f040 8097 	bne.w	8011834 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8011706:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 801170a:	2b08      	cmp	r3, #8
 801170c:	d823      	bhi.n	8011756 <UART_SetConfig+0x35a>
 801170e:	a201      	add	r2, pc, #4	@ (adr r2, 8011714 <UART_SetConfig+0x318>)
 8011710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011714:	08011739 	.word	0x08011739
 8011718:	08011757 	.word	0x08011757
 801171c:	08011741 	.word	0x08011741
 8011720:	08011757 	.word	0x08011757
 8011724:	08011747 	.word	0x08011747
 8011728:	08011757 	.word	0x08011757
 801172c:	08011757 	.word	0x08011757
 8011730:	08011757 	.word	0x08011757
 8011734:	0801174f 	.word	0x0801174f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011738:	f7fc fc6c 	bl	800e014 <HAL_RCC_GetPCLK1Freq>
 801173c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 801173e:	e010      	b.n	8011762 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8011740:	4b9e      	ldr	r3, [pc, #632]	@ (80119bc <UART_SetConfig+0x5c0>)
 8011742:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8011744:	e00d      	b.n	8011762 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8011746:	f7fc fbf7 	bl	800df38 <HAL_RCC_GetSysClockFreq>
 801174a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 801174c:	e009      	b.n	8011762 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801174e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8011752:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8011754:	e005      	b.n	8011762 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8011756:	2300      	movs	r3, #0
 8011758:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 801175a:	2301      	movs	r3, #1
 801175c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8011760:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8011762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011764:	2b00      	cmp	r3, #0
 8011766:	f000 8130 	beq.w	80119ca <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801176a:	697b      	ldr	r3, [r7, #20]
 801176c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801176e:	4a94      	ldr	r2, [pc, #592]	@ (80119c0 <UART_SetConfig+0x5c4>)
 8011770:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011774:	461a      	mov	r2, r3
 8011776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011778:	fbb3 f3f2 	udiv	r3, r3, r2
 801177c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801177e:	697b      	ldr	r3, [r7, #20]
 8011780:	685a      	ldr	r2, [r3, #4]
 8011782:	4613      	mov	r3, r2
 8011784:	005b      	lsls	r3, r3, #1
 8011786:	4413      	add	r3, r2
 8011788:	69ba      	ldr	r2, [r7, #24]
 801178a:	429a      	cmp	r2, r3
 801178c:	d305      	bcc.n	801179a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801178e:	697b      	ldr	r3, [r7, #20]
 8011790:	685b      	ldr	r3, [r3, #4]
 8011792:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011794:	69ba      	ldr	r2, [r7, #24]
 8011796:	429a      	cmp	r2, r3
 8011798:	d903      	bls.n	80117a2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 801179a:	2301      	movs	r3, #1
 801179c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80117a0:	e113      	b.n	80119ca <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80117a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80117a4:	2200      	movs	r2, #0
 80117a6:	60bb      	str	r3, [r7, #8]
 80117a8:	60fa      	str	r2, [r7, #12]
 80117aa:	697b      	ldr	r3, [r7, #20]
 80117ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80117ae:	4a84      	ldr	r2, [pc, #528]	@ (80119c0 <UART_SetConfig+0x5c4>)
 80117b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80117b4:	b29b      	uxth	r3, r3
 80117b6:	2200      	movs	r2, #0
 80117b8:	603b      	str	r3, [r7, #0]
 80117ba:	607a      	str	r2, [r7, #4]
 80117bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80117c0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80117c4:	f7ef fa16 	bl	8000bf4 <__aeabi_uldivmod>
 80117c8:	4602      	mov	r2, r0
 80117ca:	460b      	mov	r3, r1
 80117cc:	4610      	mov	r0, r2
 80117ce:	4619      	mov	r1, r3
 80117d0:	f04f 0200 	mov.w	r2, #0
 80117d4:	f04f 0300 	mov.w	r3, #0
 80117d8:	020b      	lsls	r3, r1, #8
 80117da:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80117de:	0202      	lsls	r2, r0, #8
 80117e0:	6979      	ldr	r1, [r7, #20]
 80117e2:	6849      	ldr	r1, [r1, #4]
 80117e4:	0849      	lsrs	r1, r1, #1
 80117e6:	2000      	movs	r0, #0
 80117e8:	460c      	mov	r4, r1
 80117ea:	4605      	mov	r5, r0
 80117ec:	eb12 0804 	adds.w	r8, r2, r4
 80117f0:	eb43 0905 	adc.w	r9, r3, r5
 80117f4:	697b      	ldr	r3, [r7, #20]
 80117f6:	685b      	ldr	r3, [r3, #4]
 80117f8:	2200      	movs	r2, #0
 80117fa:	469a      	mov	sl, r3
 80117fc:	4693      	mov	fp, r2
 80117fe:	4652      	mov	r2, sl
 8011800:	465b      	mov	r3, fp
 8011802:	4640      	mov	r0, r8
 8011804:	4649      	mov	r1, r9
 8011806:	f7ef f9f5 	bl	8000bf4 <__aeabi_uldivmod>
 801180a:	4602      	mov	r2, r0
 801180c:	460b      	mov	r3, r1
 801180e:	4613      	mov	r3, r2
 8011810:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8011812:	6a3b      	ldr	r3, [r7, #32]
 8011814:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8011818:	d308      	bcc.n	801182c <UART_SetConfig+0x430>
 801181a:	6a3b      	ldr	r3, [r7, #32]
 801181c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8011820:	d204      	bcs.n	801182c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8011822:	697b      	ldr	r3, [r7, #20]
 8011824:	681b      	ldr	r3, [r3, #0]
 8011826:	6a3a      	ldr	r2, [r7, #32]
 8011828:	60da      	str	r2, [r3, #12]
 801182a:	e0ce      	b.n	80119ca <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 801182c:	2301      	movs	r3, #1
 801182e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8011832:	e0ca      	b.n	80119ca <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011834:	697b      	ldr	r3, [r7, #20]
 8011836:	69db      	ldr	r3, [r3, #28]
 8011838:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801183c:	d166      	bne.n	801190c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 801183e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8011842:	2b08      	cmp	r3, #8
 8011844:	d827      	bhi.n	8011896 <UART_SetConfig+0x49a>
 8011846:	a201      	add	r2, pc, #4	@ (adr r2, 801184c <UART_SetConfig+0x450>)
 8011848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801184c:	08011871 	.word	0x08011871
 8011850:	08011879 	.word	0x08011879
 8011854:	08011881 	.word	0x08011881
 8011858:	08011897 	.word	0x08011897
 801185c:	08011887 	.word	0x08011887
 8011860:	08011897 	.word	0x08011897
 8011864:	08011897 	.word	0x08011897
 8011868:	08011897 	.word	0x08011897
 801186c:	0801188f 	.word	0x0801188f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011870:	f7fc fbd0 	bl	800e014 <HAL_RCC_GetPCLK1Freq>
 8011874:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8011876:	e014      	b.n	80118a2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011878:	f7fc fbe2 	bl	800e040 <HAL_RCC_GetPCLK2Freq>
 801187c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 801187e:	e010      	b.n	80118a2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8011880:	4b4e      	ldr	r3, [pc, #312]	@ (80119bc <UART_SetConfig+0x5c0>)
 8011882:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8011884:	e00d      	b.n	80118a2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8011886:	f7fc fb57 	bl	800df38 <HAL_RCC_GetSysClockFreq>
 801188a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 801188c:	e009      	b.n	80118a2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801188e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8011892:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8011894:	e005      	b.n	80118a2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8011896:	2300      	movs	r3, #0
 8011898:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 801189a:	2301      	movs	r3, #1
 801189c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80118a0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80118a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80118a4:	2b00      	cmp	r3, #0
 80118a6:	f000 8090 	beq.w	80119ca <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80118aa:	697b      	ldr	r3, [r7, #20]
 80118ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80118ae:	4a44      	ldr	r2, [pc, #272]	@ (80119c0 <UART_SetConfig+0x5c4>)
 80118b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80118b4:	461a      	mov	r2, r3
 80118b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80118b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80118bc:	005a      	lsls	r2, r3, #1
 80118be:	697b      	ldr	r3, [r7, #20]
 80118c0:	685b      	ldr	r3, [r3, #4]
 80118c2:	085b      	lsrs	r3, r3, #1
 80118c4:	441a      	add	r2, r3
 80118c6:	697b      	ldr	r3, [r7, #20]
 80118c8:	685b      	ldr	r3, [r3, #4]
 80118ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80118ce:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80118d0:	6a3b      	ldr	r3, [r7, #32]
 80118d2:	2b0f      	cmp	r3, #15
 80118d4:	d916      	bls.n	8011904 <UART_SetConfig+0x508>
 80118d6:	6a3b      	ldr	r3, [r7, #32]
 80118d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80118dc:	d212      	bcs.n	8011904 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80118de:	6a3b      	ldr	r3, [r7, #32]
 80118e0:	b29b      	uxth	r3, r3
 80118e2:	f023 030f 	bic.w	r3, r3, #15
 80118e6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80118e8:	6a3b      	ldr	r3, [r7, #32]
 80118ea:	085b      	lsrs	r3, r3, #1
 80118ec:	b29b      	uxth	r3, r3
 80118ee:	f003 0307 	and.w	r3, r3, #7
 80118f2:	b29a      	uxth	r2, r3
 80118f4:	8bfb      	ldrh	r3, [r7, #30]
 80118f6:	4313      	orrs	r3, r2
 80118f8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80118fa:	697b      	ldr	r3, [r7, #20]
 80118fc:	681b      	ldr	r3, [r3, #0]
 80118fe:	8bfa      	ldrh	r2, [r7, #30]
 8011900:	60da      	str	r2, [r3, #12]
 8011902:	e062      	b.n	80119ca <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8011904:	2301      	movs	r3, #1
 8011906:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 801190a:	e05e      	b.n	80119ca <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 801190c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8011910:	2b08      	cmp	r3, #8
 8011912:	d828      	bhi.n	8011966 <UART_SetConfig+0x56a>
 8011914:	a201      	add	r2, pc, #4	@ (adr r2, 801191c <UART_SetConfig+0x520>)
 8011916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801191a:	bf00      	nop
 801191c:	08011941 	.word	0x08011941
 8011920:	08011949 	.word	0x08011949
 8011924:	08011951 	.word	0x08011951
 8011928:	08011967 	.word	0x08011967
 801192c:	08011957 	.word	0x08011957
 8011930:	08011967 	.word	0x08011967
 8011934:	08011967 	.word	0x08011967
 8011938:	08011967 	.word	0x08011967
 801193c:	0801195f 	.word	0x0801195f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011940:	f7fc fb68 	bl	800e014 <HAL_RCC_GetPCLK1Freq>
 8011944:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8011946:	e014      	b.n	8011972 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011948:	f7fc fb7a 	bl	800e040 <HAL_RCC_GetPCLK2Freq>
 801194c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 801194e:	e010      	b.n	8011972 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8011950:	4b1a      	ldr	r3, [pc, #104]	@ (80119bc <UART_SetConfig+0x5c0>)
 8011952:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8011954:	e00d      	b.n	8011972 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8011956:	f7fc faef 	bl	800df38 <HAL_RCC_GetSysClockFreq>
 801195a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 801195c:	e009      	b.n	8011972 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801195e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8011962:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8011964:	e005      	b.n	8011972 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8011966:	2300      	movs	r3, #0
 8011968:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 801196a:	2301      	movs	r3, #1
 801196c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8011970:	bf00      	nop
    }

    if (pclk != 0U)
 8011972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011974:	2b00      	cmp	r3, #0
 8011976:	d028      	beq.n	80119ca <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011978:	697b      	ldr	r3, [r7, #20]
 801197a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801197c:	4a10      	ldr	r2, [pc, #64]	@ (80119c0 <UART_SetConfig+0x5c4>)
 801197e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011982:	461a      	mov	r2, r3
 8011984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011986:	fbb3 f2f2 	udiv	r2, r3, r2
 801198a:	697b      	ldr	r3, [r7, #20]
 801198c:	685b      	ldr	r3, [r3, #4]
 801198e:	085b      	lsrs	r3, r3, #1
 8011990:	441a      	add	r2, r3
 8011992:	697b      	ldr	r3, [r7, #20]
 8011994:	685b      	ldr	r3, [r3, #4]
 8011996:	fbb2 f3f3 	udiv	r3, r2, r3
 801199a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801199c:	6a3b      	ldr	r3, [r7, #32]
 801199e:	2b0f      	cmp	r3, #15
 80119a0:	d910      	bls.n	80119c4 <UART_SetConfig+0x5c8>
 80119a2:	6a3b      	ldr	r3, [r7, #32]
 80119a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80119a8:	d20c      	bcs.n	80119c4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80119aa:	6a3b      	ldr	r3, [r7, #32]
 80119ac:	b29a      	uxth	r2, r3
 80119ae:	697b      	ldr	r3, [r7, #20]
 80119b0:	681b      	ldr	r3, [r3, #0]
 80119b2:	60da      	str	r2, [r3, #12]
 80119b4:	e009      	b.n	80119ca <UART_SetConfig+0x5ce>
 80119b6:	bf00      	nop
 80119b8:	40008000 	.word	0x40008000
 80119bc:	00f42400 	.word	0x00f42400
 80119c0:	08015020 	.word	0x08015020
      }
      else
      {
        ret = HAL_ERROR;
 80119c4:	2301      	movs	r3, #1
 80119c6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80119ca:	697b      	ldr	r3, [r7, #20]
 80119cc:	2201      	movs	r2, #1
 80119ce:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80119d2:	697b      	ldr	r3, [r7, #20]
 80119d4:	2201      	movs	r2, #1
 80119d6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80119da:	697b      	ldr	r3, [r7, #20]
 80119dc:	2200      	movs	r2, #0
 80119de:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80119e0:	697b      	ldr	r3, [r7, #20]
 80119e2:	2200      	movs	r2, #0
 80119e4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80119e6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80119ea:	4618      	mov	r0, r3
 80119ec:	3730      	adds	r7, #48	@ 0x30
 80119ee:	46bd      	mov	sp, r7
 80119f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080119f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80119f4:	b480      	push	{r7}
 80119f6:	b083      	sub	sp, #12
 80119f8:	af00      	add	r7, sp, #0
 80119fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011a00:	f003 0308 	and.w	r3, r3, #8
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	d00a      	beq.n	8011a1e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	681b      	ldr	r3, [r3, #0]
 8011a0c:	685b      	ldr	r3, [r3, #4]
 8011a0e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	681b      	ldr	r3, [r3, #0]
 8011a1a:	430a      	orrs	r2, r1
 8011a1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011a22:	f003 0301 	and.w	r3, r3, #1
 8011a26:	2b00      	cmp	r3, #0
 8011a28:	d00a      	beq.n	8011a40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	681b      	ldr	r3, [r3, #0]
 8011a2e:	685b      	ldr	r3, [r3, #4]
 8011a30:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	681b      	ldr	r3, [r3, #0]
 8011a3c:	430a      	orrs	r2, r1
 8011a3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011a44:	f003 0302 	and.w	r3, r3, #2
 8011a48:	2b00      	cmp	r3, #0
 8011a4a:	d00a      	beq.n	8011a62 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	681b      	ldr	r3, [r3, #0]
 8011a50:	685b      	ldr	r3, [r3, #4]
 8011a52:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	681b      	ldr	r3, [r3, #0]
 8011a5e:	430a      	orrs	r2, r1
 8011a60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011a66:	f003 0304 	and.w	r3, r3, #4
 8011a6a:	2b00      	cmp	r3, #0
 8011a6c:	d00a      	beq.n	8011a84 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	681b      	ldr	r3, [r3, #0]
 8011a72:	685b      	ldr	r3, [r3, #4]
 8011a74:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	681b      	ldr	r3, [r3, #0]
 8011a80:	430a      	orrs	r2, r1
 8011a82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011a88:	f003 0310 	and.w	r3, r3, #16
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	d00a      	beq.n	8011aa6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	681b      	ldr	r3, [r3, #0]
 8011a94:	689b      	ldr	r3, [r3, #8]
 8011a96:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	681b      	ldr	r3, [r3, #0]
 8011aa2:	430a      	orrs	r2, r1
 8011aa4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011aaa:	f003 0320 	and.w	r3, r3, #32
 8011aae:	2b00      	cmp	r3, #0
 8011ab0:	d00a      	beq.n	8011ac8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	681b      	ldr	r3, [r3, #0]
 8011ab6:	689b      	ldr	r3, [r3, #8]
 8011ab8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	681b      	ldr	r3, [r3, #0]
 8011ac4:	430a      	orrs	r2, r1
 8011ac6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011acc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011ad0:	2b00      	cmp	r3, #0
 8011ad2:	d01a      	beq.n	8011b0a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	681b      	ldr	r3, [r3, #0]
 8011ad8:	685b      	ldr	r3, [r3, #4]
 8011ada:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	681b      	ldr	r3, [r3, #0]
 8011ae6:	430a      	orrs	r2, r1
 8011ae8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011aee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8011af2:	d10a      	bne.n	8011b0a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	681b      	ldr	r3, [r3, #0]
 8011af8:	685b      	ldr	r3, [r3, #4]
 8011afa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	681b      	ldr	r3, [r3, #0]
 8011b06:	430a      	orrs	r2, r1
 8011b08:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011b0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011b12:	2b00      	cmp	r3, #0
 8011b14:	d00a      	beq.n	8011b2c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	681b      	ldr	r3, [r3, #0]
 8011b1a:	685b      	ldr	r3, [r3, #4]
 8011b1c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	681b      	ldr	r3, [r3, #0]
 8011b28:	430a      	orrs	r2, r1
 8011b2a:	605a      	str	r2, [r3, #4]
  }
}
 8011b2c:	bf00      	nop
 8011b2e:	370c      	adds	r7, #12
 8011b30:	46bd      	mov	sp, r7
 8011b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b36:	4770      	bx	lr

08011b38 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011b38:	b580      	push	{r7, lr}
 8011b3a:	b098      	sub	sp, #96	@ 0x60
 8011b3c:	af02      	add	r7, sp, #8
 8011b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	2200      	movs	r2, #0
 8011b44:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011b48:	f7f9 fa28 	bl	800af9c <HAL_GetTick>
 8011b4c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	681b      	ldr	r3, [r3, #0]
 8011b52:	681b      	ldr	r3, [r3, #0]
 8011b54:	f003 0308 	and.w	r3, r3, #8
 8011b58:	2b08      	cmp	r3, #8
 8011b5a:	d12f      	bne.n	8011bbc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011b5c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8011b60:	9300      	str	r3, [sp, #0]
 8011b62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011b64:	2200      	movs	r2, #0
 8011b66:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8011b6a:	6878      	ldr	r0, [r7, #4]
 8011b6c:	f000 f88e 	bl	8011c8c <UART_WaitOnFlagUntilTimeout>
 8011b70:	4603      	mov	r3, r0
 8011b72:	2b00      	cmp	r3, #0
 8011b74:	d022      	beq.n	8011bbc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	681b      	ldr	r3, [r3, #0]
 8011b7a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b7e:	e853 3f00 	ldrex	r3, [r3]
 8011b82:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8011b84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011b86:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8011b8a:	653b      	str	r3, [r7, #80]	@ 0x50
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	681b      	ldr	r3, [r3, #0]
 8011b90:	461a      	mov	r2, r3
 8011b92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011b94:	647b      	str	r3, [r7, #68]	@ 0x44
 8011b96:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b98:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8011b9a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011b9c:	e841 2300 	strex	r3, r2, [r1]
 8011ba0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8011ba2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011ba4:	2b00      	cmp	r3, #0
 8011ba6:	d1e6      	bne.n	8011b76 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	2220      	movs	r2, #32
 8011bac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	2200      	movs	r2, #0
 8011bb4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011bb8:	2303      	movs	r3, #3
 8011bba:	e063      	b.n	8011c84 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	681b      	ldr	r3, [r3, #0]
 8011bc0:	681b      	ldr	r3, [r3, #0]
 8011bc2:	f003 0304 	and.w	r3, r3, #4
 8011bc6:	2b04      	cmp	r3, #4
 8011bc8:	d149      	bne.n	8011c5e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011bca:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8011bce:	9300      	str	r3, [sp, #0]
 8011bd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011bd2:	2200      	movs	r2, #0
 8011bd4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8011bd8:	6878      	ldr	r0, [r7, #4]
 8011bda:	f000 f857 	bl	8011c8c <UART_WaitOnFlagUntilTimeout>
 8011bde:	4603      	mov	r3, r0
 8011be0:	2b00      	cmp	r3, #0
 8011be2:	d03c      	beq.n	8011c5e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	681b      	ldr	r3, [r3, #0]
 8011be8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011bec:	e853 3f00 	ldrex	r3, [r3]
 8011bf0:	623b      	str	r3, [r7, #32]
   return(result);
 8011bf2:	6a3b      	ldr	r3, [r7, #32]
 8011bf4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8011bf8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	681b      	ldr	r3, [r3, #0]
 8011bfe:	461a      	mov	r2, r3
 8011c00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011c02:	633b      	str	r3, [r7, #48]	@ 0x30
 8011c04:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c06:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011c08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011c0a:	e841 2300 	strex	r3, r2, [r1]
 8011c0e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8011c10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c12:	2b00      	cmp	r3, #0
 8011c14:	d1e6      	bne.n	8011be4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	681b      	ldr	r3, [r3, #0]
 8011c1a:	3308      	adds	r3, #8
 8011c1c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c1e:	693b      	ldr	r3, [r7, #16]
 8011c20:	e853 3f00 	ldrex	r3, [r3]
 8011c24:	60fb      	str	r3, [r7, #12]
   return(result);
 8011c26:	68fb      	ldr	r3, [r7, #12]
 8011c28:	f023 0301 	bic.w	r3, r3, #1
 8011c2c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	681b      	ldr	r3, [r3, #0]
 8011c32:	3308      	adds	r3, #8
 8011c34:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011c36:	61fa      	str	r2, [r7, #28]
 8011c38:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c3a:	69b9      	ldr	r1, [r7, #24]
 8011c3c:	69fa      	ldr	r2, [r7, #28]
 8011c3e:	e841 2300 	strex	r3, r2, [r1]
 8011c42:	617b      	str	r3, [r7, #20]
   return(result);
 8011c44:	697b      	ldr	r3, [r7, #20]
 8011c46:	2b00      	cmp	r3, #0
 8011c48:	d1e5      	bne.n	8011c16 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8011c4a:	687b      	ldr	r3, [r7, #4]
 8011c4c:	2220      	movs	r2, #32
 8011c4e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8011c52:	687b      	ldr	r3, [r7, #4]
 8011c54:	2200      	movs	r2, #0
 8011c56:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011c5a:	2303      	movs	r3, #3
 8011c5c:	e012      	b.n	8011c84 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	2220      	movs	r2, #32
 8011c62:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	2220      	movs	r2, #32
 8011c6a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	2200      	movs	r2, #0
 8011c72:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	2200      	movs	r2, #0
 8011c78:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	2200      	movs	r2, #0
 8011c7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011c82:	2300      	movs	r3, #0
}
 8011c84:	4618      	mov	r0, r3
 8011c86:	3758      	adds	r7, #88	@ 0x58
 8011c88:	46bd      	mov	sp, r7
 8011c8a:	bd80      	pop	{r7, pc}

08011c8c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011c8c:	b580      	push	{r7, lr}
 8011c8e:	b084      	sub	sp, #16
 8011c90:	af00      	add	r7, sp, #0
 8011c92:	60f8      	str	r0, [r7, #12]
 8011c94:	60b9      	str	r1, [r7, #8]
 8011c96:	603b      	str	r3, [r7, #0]
 8011c98:	4613      	mov	r3, r2
 8011c9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011c9c:	e04f      	b.n	8011d3e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011c9e:	69bb      	ldr	r3, [r7, #24]
 8011ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ca4:	d04b      	beq.n	8011d3e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011ca6:	f7f9 f979 	bl	800af9c <HAL_GetTick>
 8011caa:	4602      	mov	r2, r0
 8011cac:	683b      	ldr	r3, [r7, #0]
 8011cae:	1ad3      	subs	r3, r2, r3
 8011cb0:	69ba      	ldr	r2, [r7, #24]
 8011cb2:	429a      	cmp	r2, r3
 8011cb4:	d302      	bcc.n	8011cbc <UART_WaitOnFlagUntilTimeout+0x30>
 8011cb6:	69bb      	ldr	r3, [r7, #24]
 8011cb8:	2b00      	cmp	r3, #0
 8011cba:	d101      	bne.n	8011cc0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8011cbc:	2303      	movs	r3, #3
 8011cbe:	e04e      	b.n	8011d5e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8011cc0:	68fb      	ldr	r3, [r7, #12]
 8011cc2:	681b      	ldr	r3, [r3, #0]
 8011cc4:	681b      	ldr	r3, [r3, #0]
 8011cc6:	f003 0304 	and.w	r3, r3, #4
 8011cca:	2b00      	cmp	r3, #0
 8011ccc:	d037      	beq.n	8011d3e <UART_WaitOnFlagUntilTimeout+0xb2>
 8011cce:	68bb      	ldr	r3, [r7, #8]
 8011cd0:	2b80      	cmp	r3, #128	@ 0x80
 8011cd2:	d034      	beq.n	8011d3e <UART_WaitOnFlagUntilTimeout+0xb2>
 8011cd4:	68bb      	ldr	r3, [r7, #8]
 8011cd6:	2b40      	cmp	r3, #64	@ 0x40
 8011cd8:	d031      	beq.n	8011d3e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8011cda:	68fb      	ldr	r3, [r7, #12]
 8011cdc:	681b      	ldr	r3, [r3, #0]
 8011cde:	69db      	ldr	r3, [r3, #28]
 8011ce0:	f003 0308 	and.w	r3, r3, #8
 8011ce4:	2b08      	cmp	r3, #8
 8011ce6:	d110      	bne.n	8011d0a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011ce8:	68fb      	ldr	r3, [r7, #12]
 8011cea:	681b      	ldr	r3, [r3, #0]
 8011cec:	2208      	movs	r2, #8
 8011cee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011cf0:	68f8      	ldr	r0, [r7, #12]
 8011cf2:	f000 f920 	bl	8011f36 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8011cf6:	68fb      	ldr	r3, [r7, #12]
 8011cf8:	2208      	movs	r2, #8
 8011cfa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011cfe:	68fb      	ldr	r3, [r7, #12]
 8011d00:	2200      	movs	r2, #0
 8011d02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8011d06:	2301      	movs	r3, #1
 8011d08:	e029      	b.n	8011d5e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011d0a:	68fb      	ldr	r3, [r7, #12]
 8011d0c:	681b      	ldr	r3, [r3, #0]
 8011d0e:	69db      	ldr	r3, [r3, #28]
 8011d10:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8011d14:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8011d18:	d111      	bne.n	8011d3e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011d1a:	68fb      	ldr	r3, [r7, #12]
 8011d1c:	681b      	ldr	r3, [r3, #0]
 8011d1e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8011d22:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011d24:	68f8      	ldr	r0, [r7, #12]
 8011d26:	f000 f906 	bl	8011f36 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8011d2a:	68fb      	ldr	r3, [r7, #12]
 8011d2c:	2220      	movs	r2, #32
 8011d2e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011d32:	68fb      	ldr	r3, [r7, #12]
 8011d34:	2200      	movs	r2, #0
 8011d36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8011d3a:	2303      	movs	r3, #3
 8011d3c:	e00f      	b.n	8011d5e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011d3e:	68fb      	ldr	r3, [r7, #12]
 8011d40:	681b      	ldr	r3, [r3, #0]
 8011d42:	69da      	ldr	r2, [r3, #28]
 8011d44:	68bb      	ldr	r3, [r7, #8]
 8011d46:	4013      	ands	r3, r2
 8011d48:	68ba      	ldr	r2, [r7, #8]
 8011d4a:	429a      	cmp	r2, r3
 8011d4c:	bf0c      	ite	eq
 8011d4e:	2301      	moveq	r3, #1
 8011d50:	2300      	movne	r3, #0
 8011d52:	b2db      	uxtb	r3, r3
 8011d54:	461a      	mov	r2, r3
 8011d56:	79fb      	ldrb	r3, [r7, #7]
 8011d58:	429a      	cmp	r2, r3
 8011d5a:	d0a0      	beq.n	8011c9e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011d5c:	2300      	movs	r3, #0
}
 8011d5e:	4618      	mov	r0, r3
 8011d60:	3710      	adds	r7, #16
 8011d62:	46bd      	mov	sp, r7
 8011d64:	bd80      	pop	{r7, pc}
	...

08011d68 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011d68:	b580      	push	{r7, lr}
 8011d6a:	b096      	sub	sp, #88	@ 0x58
 8011d6c:	af00      	add	r7, sp, #0
 8011d6e:	60f8      	str	r0, [r7, #12]
 8011d70:	60b9      	str	r1, [r7, #8]
 8011d72:	4613      	mov	r3, r2
 8011d74:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8011d76:	68fb      	ldr	r3, [r7, #12]
 8011d78:	68ba      	ldr	r2, [r7, #8]
 8011d7a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8011d7c:	68fb      	ldr	r3, [r7, #12]
 8011d7e:	88fa      	ldrh	r2, [r7, #6]
 8011d80:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011d84:	68fb      	ldr	r3, [r7, #12]
 8011d86:	2200      	movs	r2, #0
 8011d88:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8011d8c:	68fb      	ldr	r3, [r7, #12]
 8011d8e:	2222      	movs	r2, #34	@ 0x22
 8011d90:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8011d94:	68fb      	ldr	r3, [r7, #12]
 8011d96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011d9a:	2b00      	cmp	r3, #0
 8011d9c:	d02d      	beq.n	8011dfa <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8011d9e:	68fb      	ldr	r3, [r7, #12]
 8011da0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011da4:	4a40      	ldr	r2, [pc, #256]	@ (8011ea8 <UART_Start_Receive_DMA+0x140>)
 8011da6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8011da8:	68fb      	ldr	r3, [r7, #12]
 8011daa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011dae:	4a3f      	ldr	r2, [pc, #252]	@ (8011eac <UART_Start_Receive_DMA+0x144>)
 8011db0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8011db2:	68fb      	ldr	r3, [r7, #12]
 8011db4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011db8:	4a3d      	ldr	r2, [pc, #244]	@ (8011eb0 <UART_Start_Receive_DMA+0x148>)
 8011dba:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8011dbc:	68fb      	ldr	r3, [r7, #12]
 8011dbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011dc2:	2200      	movs	r2, #0
 8011dc4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8011dc6:	68fb      	ldr	r3, [r7, #12]
 8011dc8:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8011dcc:	68fb      	ldr	r3, [r7, #12]
 8011dce:	681b      	ldr	r3, [r3, #0]
 8011dd0:	3324      	adds	r3, #36	@ 0x24
 8011dd2:	4619      	mov	r1, r3
 8011dd4:	68fb      	ldr	r3, [r7, #12]
 8011dd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011dd8:	461a      	mov	r2, r3
 8011dda:	88fb      	ldrh	r3, [r7, #6]
 8011ddc:	f7fa ff3c 	bl	800cc58 <HAL_DMA_Start_IT>
 8011de0:	4603      	mov	r3, r0
 8011de2:	2b00      	cmp	r3, #0
 8011de4:	d009      	beq.n	8011dfa <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8011de6:	68fb      	ldr	r3, [r7, #12]
 8011de8:	2210      	movs	r2, #16
 8011dea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8011dee:	68fb      	ldr	r3, [r7, #12]
 8011df0:	2220      	movs	r2, #32
 8011df2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8011df6:	2301      	movs	r3, #1
 8011df8:	e051      	b.n	8011e9e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8011dfa:	68fb      	ldr	r3, [r7, #12]
 8011dfc:	691b      	ldr	r3, [r3, #16]
 8011dfe:	2b00      	cmp	r3, #0
 8011e00:	d018      	beq.n	8011e34 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011e02:	68fb      	ldr	r3, [r7, #12]
 8011e04:	681b      	ldr	r3, [r3, #0]
 8011e06:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011e0a:	e853 3f00 	ldrex	r3, [r3]
 8011e0e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8011e10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011e12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8011e16:	657b      	str	r3, [r7, #84]	@ 0x54
 8011e18:	68fb      	ldr	r3, [r7, #12]
 8011e1a:	681b      	ldr	r3, [r3, #0]
 8011e1c:	461a      	mov	r2, r3
 8011e1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011e20:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011e22:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e24:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8011e26:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011e28:	e841 2300 	strex	r3, r2, [r1]
 8011e2c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8011e2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011e30:	2b00      	cmp	r3, #0
 8011e32:	d1e6      	bne.n	8011e02 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011e34:	68fb      	ldr	r3, [r7, #12]
 8011e36:	681b      	ldr	r3, [r3, #0]
 8011e38:	3308      	adds	r3, #8
 8011e3a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e3e:	e853 3f00 	ldrex	r3, [r3]
 8011e42:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8011e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e46:	f043 0301 	orr.w	r3, r3, #1
 8011e4a:	653b      	str	r3, [r7, #80]	@ 0x50
 8011e4c:	68fb      	ldr	r3, [r7, #12]
 8011e4e:	681b      	ldr	r3, [r3, #0]
 8011e50:	3308      	adds	r3, #8
 8011e52:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011e54:	637a      	str	r2, [r7, #52]	@ 0x34
 8011e56:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e58:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8011e5a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011e5c:	e841 2300 	strex	r3, r2, [r1]
 8011e60:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8011e62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011e64:	2b00      	cmp	r3, #0
 8011e66:	d1e5      	bne.n	8011e34 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011e68:	68fb      	ldr	r3, [r7, #12]
 8011e6a:	681b      	ldr	r3, [r3, #0]
 8011e6c:	3308      	adds	r3, #8
 8011e6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e70:	697b      	ldr	r3, [r7, #20]
 8011e72:	e853 3f00 	ldrex	r3, [r3]
 8011e76:	613b      	str	r3, [r7, #16]
   return(result);
 8011e78:	693b      	ldr	r3, [r7, #16]
 8011e7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011e7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011e80:	68fb      	ldr	r3, [r7, #12]
 8011e82:	681b      	ldr	r3, [r3, #0]
 8011e84:	3308      	adds	r3, #8
 8011e86:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011e88:	623a      	str	r2, [r7, #32]
 8011e8a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e8c:	69f9      	ldr	r1, [r7, #28]
 8011e8e:	6a3a      	ldr	r2, [r7, #32]
 8011e90:	e841 2300 	strex	r3, r2, [r1]
 8011e94:	61bb      	str	r3, [r7, #24]
   return(result);
 8011e96:	69bb      	ldr	r3, [r7, #24]
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	d1e5      	bne.n	8011e68 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8011e9c:	2300      	movs	r3, #0
}
 8011e9e:	4618      	mov	r0, r3
 8011ea0:	3758      	adds	r7, #88	@ 0x58
 8011ea2:	46bd      	mov	sp, r7
 8011ea4:	bd80      	pop	{r7, pc}
 8011ea6:	bf00      	nop
 8011ea8:	080120c1 	.word	0x080120c1
 8011eac:	080121f5 	.word	0x080121f5
 8011eb0:	0801223b 	.word	0x0801223b

08011eb4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8011eb4:	b480      	push	{r7}
 8011eb6:	b08f      	sub	sp, #60	@ 0x3c
 8011eb8:	af00      	add	r7, sp, #0
 8011eba:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	681b      	ldr	r3, [r3, #0]
 8011ec0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ec2:	6a3b      	ldr	r3, [r7, #32]
 8011ec4:	e853 3f00 	ldrex	r3, [r3]
 8011ec8:	61fb      	str	r3, [r7, #28]
   return(result);
 8011eca:	69fb      	ldr	r3, [r7, #28]
 8011ecc:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8011ed0:	637b      	str	r3, [r7, #52]	@ 0x34
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	681b      	ldr	r3, [r3, #0]
 8011ed6:	461a      	mov	r2, r3
 8011ed8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011eda:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011edc:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ede:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011ee0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011ee2:	e841 2300 	strex	r3, r2, [r1]
 8011ee6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8011ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011eea:	2b00      	cmp	r3, #0
 8011eec:	d1e6      	bne.n	8011ebc <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	681b      	ldr	r3, [r3, #0]
 8011ef2:	3308      	adds	r3, #8
 8011ef4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ef6:	68fb      	ldr	r3, [r7, #12]
 8011ef8:	e853 3f00 	ldrex	r3, [r3]
 8011efc:	60bb      	str	r3, [r7, #8]
   return(result);
 8011efe:	68bb      	ldr	r3, [r7, #8]
 8011f00:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8011f04:	633b      	str	r3, [r7, #48]	@ 0x30
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	681b      	ldr	r3, [r3, #0]
 8011f0a:	3308      	adds	r3, #8
 8011f0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011f0e:	61ba      	str	r2, [r7, #24]
 8011f10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f12:	6979      	ldr	r1, [r7, #20]
 8011f14:	69ba      	ldr	r2, [r7, #24]
 8011f16:	e841 2300 	strex	r3, r2, [r1]
 8011f1a:	613b      	str	r3, [r7, #16]
   return(result);
 8011f1c:	693b      	ldr	r3, [r7, #16]
 8011f1e:	2b00      	cmp	r3, #0
 8011f20:	d1e5      	bne.n	8011eee <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	2220      	movs	r2, #32
 8011f26:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8011f2a:	bf00      	nop
 8011f2c:	373c      	adds	r7, #60	@ 0x3c
 8011f2e:	46bd      	mov	sp, r7
 8011f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f34:	4770      	bx	lr

08011f36 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011f36:	b480      	push	{r7}
 8011f38:	b095      	sub	sp, #84	@ 0x54
 8011f3a:	af00      	add	r7, sp, #0
 8011f3c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	681b      	ldr	r3, [r3, #0]
 8011f42:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011f46:	e853 3f00 	ldrex	r3, [r3]
 8011f4a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8011f4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011f4e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8011f52:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	681b      	ldr	r3, [r3, #0]
 8011f58:	461a      	mov	r2, r3
 8011f5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011f5c:	643b      	str	r3, [r7, #64]	@ 0x40
 8011f5e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f60:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8011f62:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8011f64:	e841 2300 	strex	r3, r2, [r1]
 8011f68:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8011f6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011f6c:	2b00      	cmp	r3, #0
 8011f6e:	d1e6      	bne.n	8011f3e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	681b      	ldr	r3, [r3, #0]
 8011f74:	3308      	adds	r3, #8
 8011f76:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f78:	6a3b      	ldr	r3, [r7, #32]
 8011f7a:	e853 3f00 	ldrex	r3, [r3]
 8011f7e:	61fb      	str	r3, [r7, #28]
   return(result);
 8011f80:	69fb      	ldr	r3, [r7, #28]
 8011f82:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8011f86:	f023 0301 	bic.w	r3, r3, #1
 8011f8a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	681b      	ldr	r3, [r3, #0]
 8011f90:	3308      	adds	r3, #8
 8011f92:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011f94:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8011f96:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f98:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011f9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011f9c:	e841 2300 	strex	r3, r2, [r1]
 8011fa0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8011fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011fa4:	2b00      	cmp	r3, #0
 8011fa6:	d1e3      	bne.n	8011f70 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011fac:	2b01      	cmp	r3, #1
 8011fae:	d118      	bne.n	8011fe2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	681b      	ldr	r3, [r3, #0]
 8011fb4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011fb6:	68fb      	ldr	r3, [r7, #12]
 8011fb8:	e853 3f00 	ldrex	r3, [r3]
 8011fbc:	60bb      	str	r3, [r7, #8]
   return(result);
 8011fbe:	68bb      	ldr	r3, [r7, #8]
 8011fc0:	f023 0310 	bic.w	r3, r3, #16
 8011fc4:	647b      	str	r3, [r7, #68]	@ 0x44
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	681b      	ldr	r3, [r3, #0]
 8011fca:	461a      	mov	r2, r3
 8011fcc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011fce:	61bb      	str	r3, [r7, #24]
 8011fd0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011fd2:	6979      	ldr	r1, [r7, #20]
 8011fd4:	69ba      	ldr	r2, [r7, #24]
 8011fd6:	e841 2300 	strex	r3, r2, [r1]
 8011fda:	613b      	str	r3, [r7, #16]
   return(result);
 8011fdc:	693b      	ldr	r3, [r7, #16]
 8011fde:	2b00      	cmp	r3, #0
 8011fe0:	d1e6      	bne.n	8011fb0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	2220      	movs	r2, #32
 8011fe6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	2200      	movs	r2, #0
 8011fee:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	2200      	movs	r2, #0
 8011ff4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8011ff6:	bf00      	nop
 8011ff8:	3754      	adds	r7, #84	@ 0x54
 8011ffa:	46bd      	mov	sp, r7
 8011ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012000:	4770      	bx	lr

08012002 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8012002:	b580      	push	{r7, lr}
 8012004:	b090      	sub	sp, #64	@ 0x40
 8012006:	af00      	add	r7, sp, #0
 8012008:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801200e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	681b      	ldr	r3, [r3, #0]
 8012014:	681b      	ldr	r3, [r3, #0]
 8012016:	f003 0320 	and.w	r3, r3, #32
 801201a:	2b00      	cmp	r3, #0
 801201c:	d137      	bne.n	801208e <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 801201e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012020:	2200      	movs	r2, #0
 8012022:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8012026:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012028:	681b      	ldr	r3, [r3, #0]
 801202a:	3308      	adds	r3, #8
 801202c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801202e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012030:	e853 3f00 	ldrex	r3, [r3]
 8012034:	623b      	str	r3, [r7, #32]
   return(result);
 8012036:	6a3b      	ldr	r3, [r7, #32]
 8012038:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801203c:	63bb      	str	r3, [r7, #56]	@ 0x38
 801203e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012040:	681b      	ldr	r3, [r3, #0]
 8012042:	3308      	adds	r3, #8
 8012044:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012046:	633a      	str	r2, [r7, #48]	@ 0x30
 8012048:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801204a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801204c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801204e:	e841 2300 	strex	r3, r2, [r1]
 8012052:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8012054:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012056:	2b00      	cmp	r3, #0
 8012058:	d1e5      	bne.n	8012026 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801205a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801205c:	681b      	ldr	r3, [r3, #0]
 801205e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012060:	693b      	ldr	r3, [r7, #16]
 8012062:	e853 3f00 	ldrex	r3, [r3]
 8012066:	60fb      	str	r3, [r7, #12]
   return(result);
 8012068:	68fb      	ldr	r3, [r7, #12]
 801206a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801206e:	637b      	str	r3, [r7, #52]	@ 0x34
 8012070:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012072:	681b      	ldr	r3, [r3, #0]
 8012074:	461a      	mov	r2, r3
 8012076:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012078:	61fb      	str	r3, [r7, #28]
 801207a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801207c:	69b9      	ldr	r1, [r7, #24]
 801207e:	69fa      	ldr	r2, [r7, #28]
 8012080:	e841 2300 	strex	r3, r2, [r1]
 8012084:	617b      	str	r3, [r7, #20]
   return(result);
 8012086:	697b      	ldr	r3, [r7, #20]
 8012088:	2b00      	cmp	r3, #0
 801208a:	d1e6      	bne.n	801205a <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801208c:	e004      	b.n	8012098 <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 801208e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012090:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8012094:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8012096:	4798      	blx	r3
}
 8012098:	bf00      	nop
 801209a:	3740      	adds	r7, #64	@ 0x40
 801209c:	46bd      	mov	sp, r7
 801209e:	bd80      	pop	{r7, pc}

080120a0 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80120a0:	b580      	push	{r7, lr}
 80120a2:	b084      	sub	sp, #16
 80120a4:	af00      	add	r7, sp, #0
 80120a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80120ac:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 80120ae:	68fb      	ldr	r3, [r7, #12]
 80120b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80120b4:	68f8      	ldr	r0, [r7, #12]
 80120b6:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80120b8:	bf00      	nop
 80120ba:	3710      	adds	r7, #16
 80120bc:	46bd      	mov	sp, r7
 80120be:	bd80      	pop	{r7, pc}

080120c0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80120c0:	b580      	push	{r7, lr}
 80120c2:	b09c      	sub	sp, #112	@ 0x70
 80120c4:	af00      	add	r7, sp, #0
 80120c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80120cc:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	681b      	ldr	r3, [r3, #0]
 80120d2:	681b      	ldr	r3, [r3, #0]
 80120d4:	f003 0320 	and.w	r3, r3, #32
 80120d8:	2b00      	cmp	r3, #0
 80120da:	d171      	bne.n	80121c0 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 80120dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80120de:	2200      	movs	r2, #0
 80120e0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80120e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80120e6:	681b      	ldr	r3, [r3, #0]
 80120e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80120ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80120ec:	e853 3f00 	ldrex	r3, [r3]
 80120f0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80120f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80120f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80120f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80120fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80120fc:	681b      	ldr	r3, [r3, #0]
 80120fe:	461a      	mov	r2, r3
 8012100:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8012102:	65bb      	str	r3, [r7, #88]	@ 0x58
 8012104:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012106:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8012108:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801210a:	e841 2300 	strex	r3, r2, [r1]
 801210e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8012110:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012112:	2b00      	cmp	r3, #0
 8012114:	d1e6      	bne.n	80120e4 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012116:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012118:	681b      	ldr	r3, [r3, #0]
 801211a:	3308      	adds	r3, #8
 801211c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801211e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012120:	e853 3f00 	ldrex	r3, [r3]
 8012124:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8012126:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012128:	f023 0301 	bic.w	r3, r3, #1
 801212c:	667b      	str	r3, [r7, #100]	@ 0x64
 801212e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012130:	681b      	ldr	r3, [r3, #0]
 8012132:	3308      	adds	r3, #8
 8012134:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8012136:	647a      	str	r2, [r7, #68]	@ 0x44
 8012138:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801213a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801213c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801213e:	e841 2300 	strex	r3, r2, [r1]
 8012142:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8012144:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012146:	2b00      	cmp	r3, #0
 8012148:	d1e5      	bne.n	8012116 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801214a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801214c:	681b      	ldr	r3, [r3, #0]
 801214e:	3308      	adds	r3, #8
 8012150:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012154:	e853 3f00 	ldrex	r3, [r3]
 8012158:	623b      	str	r3, [r7, #32]
   return(result);
 801215a:	6a3b      	ldr	r3, [r7, #32]
 801215c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012160:	663b      	str	r3, [r7, #96]	@ 0x60
 8012162:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012164:	681b      	ldr	r3, [r3, #0]
 8012166:	3308      	adds	r3, #8
 8012168:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801216a:	633a      	str	r2, [r7, #48]	@ 0x30
 801216c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801216e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8012170:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012172:	e841 2300 	strex	r3, r2, [r1]
 8012176:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8012178:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801217a:	2b00      	cmp	r3, #0
 801217c:	d1e5      	bne.n	801214a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801217e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012180:	2220      	movs	r2, #32
 8012182:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012186:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012188:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801218a:	2b01      	cmp	r3, #1
 801218c:	d118      	bne.n	80121c0 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801218e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012190:	681b      	ldr	r3, [r3, #0]
 8012192:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012194:	693b      	ldr	r3, [r7, #16]
 8012196:	e853 3f00 	ldrex	r3, [r3]
 801219a:	60fb      	str	r3, [r7, #12]
   return(result);
 801219c:	68fb      	ldr	r3, [r7, #12]
 801219e:	f023 0310 	bic.w	r3, r3, #16
 80121a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80121a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80121a6:	681b      	ldr	r3, [r3, #0]
 80121a8:	461a      	mov	r2, r3
 80121aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80121ac:	61fb      	str	r3, [r7, #28]
 80121ae:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80121b0:	69b9      	ldr	r1, [r7, #24]
 80121b2:	69fa      	ldr	r2, [r7, #28]
 80121b4:	e841 2300 	strex	r3, r2, [r1]
 80121b8:	617b      	str	r3, [r7, #20]
   return(result);
 80121ba:	697b      	ldr	r3, [r7, #20]
 80121bc:	2b00      	cmp	r3, #0
 80121be:	d1e6      	bne.n	801218e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80121c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80121c2:	2200      	movs	r2, #0
 80121c4:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80121c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80121c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80121ca:	2b01      	cmp	r3, #1
 80121cc:	d109      	bne.n	80121e2 <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 80121ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80121d0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80121d4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80121d6:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 80121da:	4611      	mov	r1, r2
 80121dc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80121de:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80121e0:	e004      	b.n	80121ec <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 80121e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80121e4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80121e8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80121ea:	4798      	blx	r3
}
 80121ec:	bf00      	nop
 80121ee:	3770      	adds	r7, #112	@ 0x70
 80121f0:	46bd      	mov	sp, r7
 80121f2:	bd80      	pop	{r7, pc}

080121f4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80121f4:	b580      	push	{r7, lr}
 80121f6:	b084      	sub	sp, #16
 80121f8:	af00      	add	r7, sp, #0
 80121fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012200:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8012202:	68fb      	ldr	r3, [r7, #12]
 8012204:	2201      	movs	r2, #1
 8012206:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012208:	68fb      	ldr	r3, [r7, #12]
 801220a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801220c:	2b01      	cmp	r3, #1
 801220e:	d10b      	bne.n	8012228 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 8012210:	68fb      	ldr	r3, [r7, #12]
 8012212:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8012216:	68fa      	ldr	r2, [r7, #12]
 8012218:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 801221c:	0852      	lsrs	r2, r2, #1
 801221e:	b292      	uxth	r2, r2
 8012220:	4611      	mov	r1, r2
 8012222:	68f8      	ldr	r0, [r7, #12]
 8012224:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8012226:	e004      	b.n	8012232 <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 8012228:	68fb      	ldr	r3, [r7, #12]
 801222a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801222e:	68f8      	ldr	r0, [r7, #12]
 8012230:	4798      	blx	r3
}
 8012232:	bf00      	nop
 8012234:	3710      	adds	r7, #16
 8012236:	46bd      	mov	sp, r7
 8012238:	bd80      	pop	{r7, pc}

0801223a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 801223a:	b580      	push	{r7, lr}
 801223c:	b086      	sub	sp, #24
 801223e:	af00      	add	r7, sp, #0
 8012240:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012242:	687b      	ldr	r3, [r7, #4]
 8012244:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012246:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8012248:	697b      	ldr	r3, [r7, #20]
 801224a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801224e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8012250:	697b      	ldr	r3, [r7, #20]
 8012252:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8012256:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8012258:	697b      	ldr	r3, [r7, #20]
 801225a:	681b      	ldr	r3, [r3, #0]
 801225c:	689b      	ldr	r3, [r3, #8]
 801225e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012262:	2b80      	cmp	r3, #128	@ 0x80
 8012264:	d109      	bne.n	801227a <UART_DMAError+0x40>
 8012266:	693b      	ldr	r3, [r7, #16]
 8012268:	2b21      	cmp	r3, #33	@ 0x21
 801226a:	d106      	bne.n	801227a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 801226c:	697b      	ldr	r3, [r7, #20]
 801226e:	2200      	movs	r2, #0
 8012270:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8012274:	6978      	ldr	r0, [r7, #20]
 8012276:	f7ff fe1d 	bl	8011eb4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 801227a:	697b      	ldr	r3, [r7, #20]
 801227c:	681b      	ldr	r3, [r3, #0]
 801227e:	689b      	ldr	r3, [r3, #8]
 8012280:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012284:	2b40      	cmp	r3, #64	@ 0x40
 8012286:	d109      	bne.n	801229c <UART_DMAError+0x62>
 8012288:	68fb      	ldr	r3, [r7, #12]
 801228a:	2b22      	cmp	r3, #34	@ 0x22
 801228c:	d106      	bne.n	801229c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 801228e:	697b      	ldr	r3, [r7, #20]
 8012290:	2200      	movs	r2, #0
 8012292:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8012296:	6978      	ldr	r0, [r7, #20]
 8012298:	f7ff fe4d 	bl	8011f36 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801229c:	697b      	ldr	r3, [r7, #20]
 801229e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80122a2:	f043 0210 	orr.w	r2, r3, #16
 80122a6:	697b      	ldr	r3, [r7, #20]
 80122a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80122ac:	697b      	ldr	r3, [r7, #20]
 80122ae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80122b2:	6978      	ldr	r0, [r7, #20]
 80122b4:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80122b6:	bf00      	nop
 80122b8:	3718      	adds	r7, #24
 80122ba:	46bd      	mov	sp, r7
 80122bc:	bd80      	pop	{r7, pc}

080122be <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80122be:	b580      	push	{r7, lr}
 80122c0:	b084      	sub	sp, #16
 80122c2:	af00      	add	r7, sp, #0
 80122c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80122ca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80122cc:	68fb      	ldr	r3, [r7, #12]
 80122ce:	2200      	movs	r2, #0
 80122d0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80122d4:	68fb      	ldr	r3, [r7, #12]
 80122d6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80122da:	68f8      	ldr	r0, [r7, #12]
 80122dc:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80122de:	bf00      	nop
 80122e0:	3710      	adds	r7, #16
 80122e2:	46bd      	mov	sp, r7
 80122e4:	bd80      	pop	{r7, pc}

080122e6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80122e6:	b580      	push	{r7, lr}
 80122e8:	b088      	sub	sp, #32
 80122ea:	af00      	add	r7, sp, #0
 80122ec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	681b      	ldr	r3, [r3, #0]
 80122f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80122f4:	68fb      	ldr	r3, [r7, #12]
 80122f6:	e853 3f00 	ldrex	r3, [r3]
 80122fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80122fc:	68bb      	ldr	r3, [r7, #8]
 80122fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012302:	61fb      	str	r3, [r7, #28]
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	681b      	ldr	r3, [r3, #0]
 8012308:	461a      	mov	r2, r3
 801230a:	69fb      	ldr	r3, [r7, #28]
 801230c:	61bb      	str	r3, [r7, #24]
 801230e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012310:	6979      	ldr	r1, [r7, #20]
 8012312:	69ba      	ldr	r2, [r7, #24]
 8012314:	e841 2300 	strex	r3, r2, [r1]
 8012318:	613b      	str	r3, [r7, #16]
   return(result);
 801231a:	693b      	ldr	r3, [r7, #16]
 801231c:	2b00      	cmp	r3, #0
 801231e:	d1e6      	bne.n	80122ee <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	2220      	movs	r2, #32
 8012324:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	2200      	movs	r2, #0
 801232c:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8012334:	6878      	ldr	r0, [r7, #4]
 8012336:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012338:	bf00      	nop
 801233a:	3720      	adds	r7, #32
 801233c:	46bd      	mov	sp, r7
 801233e:	bd80      	pop	{r7, pc}

08012340 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8012340:	b480      	push	{r7}
 8012342:	b083      	sub	sp, #12
 8012344:	af00      	add	r7, sp, #0
 8012346:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8012348:	bf00      	nop
 801234a:	370c      	adds	r7, #12
 801234c:	46bd      	mov	sp, r7
 801234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012352:	4770      	bx	lr

08012354 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8012354:	b480      	push	{r7}
 8012356:	b083      	sub	sp, #12
 8012358:	af00      	add	r7, sp, #0
 801235a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 801235c:	bf00      	nop
 801235e:	370c      	adds	r7, #12
 8012360:	46bd      	mov	sp, r7
 8012362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012366:	4770      	bx	lr

08012368 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8012368:	b480      	push	{r7}
 801236a:	b083      	sub	sp, #12
 801236c:	af00      	add	r7, sp, #0
 801236e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8012370:	bf00      	nop
 8012372:	370c      	adds	r7, #12
 8012374:	46bd      	mov	sp, r7
 8012376:	f85d 7b04 	ldr.w	r7, [sp], #4
 801237a:	4770      	bx	lr

0801237c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801237c:	b480      	push	{r7}
 801237e:	b085      	sub	sp, #20
 8012380:	af00      	add	r7, sp, #0
 8012382:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801238a:	2b01      	cmp	r3, #1
 801238c:	d101      	bne.n	8012392 <HAL_UARTEx_DisableFifoMode+0x16>
 801238e:	2302      	movs	r3, #2
 8012390:	e027      	b.n	80123e2 <HAL_UARTEx_DisableFifoMode+0x66>
 8012392:	687b      	ldr	r3, [r7, #4]
 8012394:	2201      	movs	r2, #1
 8012396:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	2224      	movs	r2, #36	@ 0x24
 801239e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	681b      	ldr	r3, [r3, #0]
 80123a6:	681b      	ldr	r3, [r3, #0]
 80123a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	681b      	ldr	r3, [r3, #0]
 80123ae:	681a      	ldr	r2, [r3, #0]
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	681b      	ldr	r3, [r3, #0]
 80123b4:	f022 0201 	bic.w	r2, r2, #1
 80123b8:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80123ba:	68fb      	ldr	r3, [r7, #12]
 80123bc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80123c0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	2200      	movs	r2, #0
 80123c6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	681b      	ldr	r3, [r3, #0]
 80123cc:	68fa      	ldr	r2, [r7, #12]
 80123ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	2220      	movs	r2, #32
 80123d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	2200      	movs	r2, #0
 80123dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80123e0:	2300      	movs	r3, #0
}
 80123e2:	4618      	mov	r0, r3
 80123e4:	3714      	adds	r7, #20
 80123e6:	46bd      	mov	sp, r7
 80123e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123ec:	4770      	bx	lr

080123ee <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80123ee:	b580      	push	{r7, lr}
 80123f0:	b084      	sub	sp, #16
 80123f2:	af00      	add	r7, sp, #0
 80123f4:	6078      	str	r0, [r7, #4]
 80123f6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80123fe:	2b01      	cmp	r3, #1
 8012400:	d101      	bne.n	8012406 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8012402:	2302      	movs	r3, #2
 8012404:	e02d      	b.n	8012462 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	2201      	movs	r2, #1
 801240a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	2224      	movs	r2, #36	@ 0x24
 8012412:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012416:	687b      	ldr	r3, [r7, #4]
 8012418:	681b      	ldr	r3, [r3, #0]
 801241a:	681b      	ldr	r3, [r3, #0]
 801241c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	681b      	ldr	r3, [r3, #0]
 8012422:	681a      	ldr	r2, [r3, #0]
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	681b      	ldr	r3, [r3, #0]
 8012428:	f022 0201 	bic.w	r2, r2, #1
 801242c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	681b      	ldr	r3, [r3, #0]
 8012432:	689b      	ldr	r3, [r3, #8]
 8012434:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	681b      	ldr	r3, [r3, #0]
 801243c:	683a      	ldr	r2, [r7, #0]
 801243e:	430a      	orrs	r2, r1
 8012440:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012442:	6878      	ldr	r0, [r7, #4]
 8012444:	f000 f850 	bl	80124e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	681b      	ldr	r3, [r3, #0]
 801244c:	68fa      	ldr	r2, [r7, #12]
 801244e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	2220      	movs	r2, #32
 8012454:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	2200      	movs	r2, #0
 801245c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8012460:	2300      	movs	r3, #0
}
 8012462:	4618      	mov	r0, r3
 8012464:	3710      	adds	r7, #16
 8012466:	46bd      	mov	sp, r7
 8012468:	bd80      	pop	{r7, pc}

0801246a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801246a:	b580      	push	{r7, lr}
 801246c:	b084      	sub	sp, #16
 801246e:	af00      	add	r7, sp, #0
 8012470:	6078      	str	r0, [r7, #4]
 8012472:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801247a:	2b01      	cmp	r3, #1
 801247c:	d101      	bne.n	8012482 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801247e:	2302      	movs	r3, #2
 8012480:	e02d      	b.n	80124de <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8012482:	687b      	ldr	r3, [r7, #4]
 8012484:	2201      	movs	r2, #1
 8012486:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	2224      	movs	r2, #36	@ 0x24
 801248e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012492:	687b      	ldr	r3, [r7, #4]
 8012494:	681b      	ldr	r3, [r3, #0]
 8012496:	681b      	ldr	r3, [r3, #0]
 8012498:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	681b      	ldr	r3, [r3, #0]
 801249e:	681a      	ldr	r2, [r3, #0]
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	681b      	ldr	r3, [r3, #0]
 80124a4:	f022 0201 	bic.w	r2, r2, #1
 80124a8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	681b      	ldr	r3, [r3, #0]
 80124ae:	689b      	ldr	r3, [r3, #8]
 80124b0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	681b      	ldr	r3, [r3, #0]
 80124b8:	683a      	ldr	r2, [r7, #0]
 80124ba:	430a      	orrs	r2, r1
 80124bc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80124be:	6878      	ldr	r0, [r7, #4]
 80124c0:	f000 f812 	bl	80124e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	681b      	ldr	r3, [r3, #0]
 80124c8:	68fa      	ldr	r2, [r7, #12]
 80124ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	2220      	movs	r2, #32
 80124d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	2200      	movs	r2, #0
 80124d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80124dc:	2300      	movs	r3, #0
}
 80124de:	4618      	mov	r0, r3
 80124e0:	3710      	adds	r7, #16
 80124e2:	46bd      	mov	sp, r7
 80124e4:	bd80      	pop	{r7, pc}
	...

080124e8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80124e8:	b480      	push	{r7}
 80124ea:	b085      	sub	sp, #20
 80124ec:	af00      	add	r7, sp, #0
 80124ee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80124f4:	2b00      	cmp	r3, #0
 80124f6:	d108      	bne.n	801250a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80124f8:	687b      	ldr	r3, [r7, #4]
 80124fa:	2201      	movs	r2, #1
 80124fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	2201      	movs	r2, #1
 8012504:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8012508:	e031      	b.n	801256e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801250a:	2308      	movs	r3, #8
 801250c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801250e:	2308      	movs	r3, #8
 8012510:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	681b      	ldr	r3, [r3, #0]
 8012516:	689b      	ldr	r3, [r3, #8]
 8012518:	0e5b      	lsrs	r3, r3, #25
 801251a:	b2db      	uxtb	r3, r3
 801251c:	f003 0307 	and.w	r3, r3, #7
 8012520:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8012522:	687b      	ldr	r3, [r7, #4]
 8012524:	681b      	ldr	r3, [r3, #0]
 8012526:	689b      	ldr	r3, [r3, #8]
 8012528:	0f5b      	lsrs	r3, r3, #29
 801252a:	b2db      	uxtb	r3, r3
 801252c:	f003 0307 	and.w	r3, r3, #7
 8012530:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012532:	7bbb      	ldrb	r3, [r7, #14]
 8012534:	7b3a      	ldrb	r2, [r7, #12]
 8012536:	4911      	ldr	r1, [pc, #68]	@ (801257c <UARTEx_SetNbDataToProcess+0x94>)
 8012538:	5c8a      	ldrb	r2, [r1, r2]
 801253a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801253e:	7b3a      	ldrb	r2, [r7, #12]
 8012540:	490f      	ldr	r1, [pc, #60]	@ (8012580 <UARTEx_SetNbDataToProcess+0x98>)
 8012542:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012544:	fb93 f3f2 	sdiv	r3, r3, r2
 8012548:	b29a      	uxth	r2, r3
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012550:	7bfb      	ldrb	r3, [r7, #15]
 8012552:	7b7a      	ldrb	r2, [r7, #13]
 8012554:	4909      	ldr	r1, [pc, #36]	@ (801257c <UARTEx_SetNbDataToProcess+0x94>)
 8012556:	5c8a      	ldrb	r2, [r1, r2]
 8012558:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 801255c:	7b7a      	ldrb	r2, [r7, #13]
 801255e:	4908      	ldr	r1, [pc, #32]	@ (8012580 <UARTEx_SetNbDataToProcess+0x98>)
 8012560:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012562:	fb93 f3f2 	sdiv	r3, r3, r2
 8012566:	b29a      	uxth	r2, r3
 8012568:	687b      	ldr	r3, [r7, #4]
 801256a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 801256e:	bf00      	nop
 8012570:	3714      	adds	r7, #20
 8012572:	46bd      	mov	sp, r7
 8012574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012578:	4770      	bx	lr
 801257a:	bf00      	nop
 801257c:	08015038 	.word	0x08015038
 8012580:	08015040 	.word	0x08015040

08012584 <arm_mat_add_f32>:
#else
arm_status arm_mat_add_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 8012584:	b480      	push	{r7}
 8012586:	b08b      	sub	sp, #44	@ 0x2c
 8012588:	af00      	add	r7, sp, #0
 801258a:	60f8      	str	r0, [r7, #12]
 801258c:	60b9      	str	r1, [r7, #8]
 801258e:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 8012590:	68fb      	ldr	r3, [r7, #12]
 8012592:	685b      	ldr	r3, [r3, #4]
 8012594:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 8012596:	68bb      	ldr	r3, [r7, #8]
 8012598:	685b      	ldr	r3, [r3, #4]
 801259a:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	685b      	ldr	r3, [r3, #4]
 80125a0:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 80125a2:	68fb      	ldr	r3, [r7, #12]
 80125a4:	881b      	ldrh	r3, [r3, #0]
 80125a6:	461a      	mov	r2, r3
 80125a8:	68fb      	ldr	r3, [r7, #12]
 80125aa:	885b      	ldrh	r3, [r3, #2]
 80125ac:	fb02 f303 	mul.w	r3, r2, r3
 80125b0:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 80125b2:	697b      	ldr	r3, [r7, #20]
 80125b4:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 80125b6:	e013      	b.n	80125e0 <arm_mat_add_f32+0x5c>
    {
      /* C(m,n) = A(m,n) + B(m,n) */

      /* Add and store result in destination buffer. */
      *pOut++ = *pInA++ + *pInB++;
 80125b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80125ba:	1d1a      	adds	r2, r3, #4
 80125bc:	627a      	str	r2, [r7, #36]	@ 0x24
 80125be:	ed93 7a00 	vldr	s14, [r3]
 80125c2:	6a3b      	ldr	r3, [r7, #32]
 80125c4:	1d1a      	adds	r2, r3, #4
 80125c6:	623a      	str	r2, [r7, #32]
 80125c8:	edd3 7a00 	vldr	s15, [r3]
 80125cc:	69fb      	ldr	r3, [r7, #28]
 80125ce:	1d1a      	adds	r2, r3, #4
 80125d0:	61fa      	str	r2, [r7, #28]
 80125d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80125d6:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 80125da:	69bb      	ldr	r3, [r7, #24]
 80125dc:	3b01      	subs	r3, #1
 80125de:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 80125e0:	69bb      	ldr	r3, [r7, #24]
 80125e2:	2b00      	cmp	r3, #0
 80125e4:	d1e8      	bne.n	80125b8 <arm_mat_add_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 80125e6:	2300      	movs	r3, #0
 80125e8:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 80125ea:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 80125ee:	4618      	mov	r0, r3
 80125f0:	372c      	adds	r7, #44	@ 0x2c
 80125f2:	46bd      	mov	sp, r7
 80125f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125f8:	4770      	bx	lr

080125fa <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 80125fa:	b480      	push	{r7}
 80125fc:	b085      	sub	sp, #20
 80125fe:	af00      	add	r7, sp, #0
 8012600:	60f8      	str	r0, [r7, #12]
 8012602:	607b      	str	r3, [r7, #4]
 8012604:	460b      	mov	r3, r1
 8012606:	817b      	strh	r3, [r7, #10]
 8012608:	4613      	mov	r3, r2
 801260a:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 801260c:	68fb      	ldr	r3, [r7, #12]
 801260e:	897a      	ldrh	r2, [r7, #10]
 8012610:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 8012612:	68fb      	ldr	r3, [r7, #12]
 8012614:	893a      	ldrh	r2, [r7, #8]
 8012616:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 8012618:	68fb      	ldr	r3, [r7, #12]
 801261a:	687a      	ldr	r2, [r7, #4]
 801261c:	605a      	str	r2, [r3, #4]
}
 801261e:	bf00      	nop
 8012620:	3714      	adds	r7, #20
 8012622:	46bd      	mov	sp, r7
 8012624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012628:	4770      	bx	lr

0801262a <arm_mat_inverse_f32>:
                   - \ref ARM_MATH_SINGULAR      : Input matrix is found to be singular (non-invertible)
 */
arm_status arm_mat_inverse_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 801262a:	b480      	push	{r7}
 801262c:	b0bb      	sub	sp, #236	@ 0xec
 801262e:	af00      	add	r7, sp, #0
 8012630:	6078      	str	r0, [r7, #4]
 8012632:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 8012634:	687b      	ldr	r3, [r7, #4]
 8012636:	685b      	ldr	r3, [r3, #4]
 8012638:	667b      	str	r3, [r7, #100]	@ 0x64
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 801263a:	683b      	ldr	r3, [r7, #0]
 801263c:	685b      	ldr	r3, [r3, #4]
 801263e:	663b      	str	r3, [r7, #96]	@ 0x60
  
  float32_t *pTmp;
  uint32_t numRows = pSrc->numRows;              /* Number of rows in the matrix  */
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	881b      	ldrh	r3, [r3, #0]
 8012644:	65fb      	str	r3, [r7, #92]	@ 0x5c
  uint32_t numCols = pSrc->numCols;              /* Number of Cols in the matrix  */
 8012646:	687b      	ldr	r3, [r7, #4]
 8012648:	885b      	ldrh	r3, [r3, #2]
 801264a:	65bb      	str	r3, [r7, #88]	@ 0x58


  float32_t pivot = 0.0f, newPivot=0.0f;                /* Temporary input values  */
 801264c:	f04f 0300 	mov.w	r3, #0
 8012650:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8012654:	f04f 0300 	mov.w	r3, #0
 8012658:	657b      	str	r3, [r7, #84]	@ 0x54
  uint32_t selectedRow,pivotRow,i, rowNb, rowCnt, flag = 0U, j,column;      /* loop counters */
 801265a:	2300      	movs	r3, #0
 801265c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
     *      8. Now an identical matrix is formed to the left of the bar(input matrix, pSrc).
     *         Therefore, the matrix to the right of the bar is our solution(pDst matrix, pDst).
     *----------------------------------------------------------------------------------------------------------------*/

    /* Working pointer for destination matrix */
    pTmp = pOut;
 8012660:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8012662:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

    /* Loop over the number of rows */
    rowCnt = numRows;
 8012666:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012668:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

    /* Making the destination matrix as identity matrix */
    while (rowCnt > 0U)
 801266c:	e03b      	b.n	80126e6 <arm_mat_inverse_f32+0xbc>
    {
      /* Writing all zeroes in lower triangle of the destination matrix */
      j = numRows - rowCnt;
 801266e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8012670:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8012674:	1ad3      	subs	r3, r2, r3
 8012676:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 801267a:	e00c      	b.n	8012696 <arm_mat_inverse_f32+0x6c>
      {
        *pTmp++ = 0.0f;
 801267c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012680:	1d1a      	adds	r2, r3, #4
 8012682:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8012686:	f04f 0200 	mov.w	r2, #0
 801268a:	601a      	str	r2, [r3, #0]
        j--;
 801268c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8012690:	3b01      	subs	r3, #1
 8012692:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 8012696:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 801269a:	2b00      	cmp	r3, #0
 801269c:	d1ee      	bne.n	801267c <arm_mat_inverse_f32+0x52>
      }

      /* Writing all ones in the diagonal of the destination matrix */
      *pTmp++ = 1.0f;
 801269e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80126a2:	1d1a      	adds	r2, r3, #4
 80126a4:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 80126a8:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80126ac:	601a      	str	r2, [r3, #0]

      /* Writing all zeroes in upper triangle of the destination matrix */
      j = rowCnt - 1U;
 80126ae:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80126b2:	3b01      	subs	r3, #1
 80126b4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 80126b8:	e00c      	b.n	80126d4 <arm_mat_inverse_f32+0xaa>
      {
        *pTmp++ = 0.0f;
 80126ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80126be:	1d1a      	adds	r2, r3, #4
 80126c0:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 80126c4:	f04f 0200 	mov.w	r2, #0
 80126c8:	601a      	str	r2, [r3, #0]
        j--;
 80126ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80126ce:	3b01      	subs	r3, #1
 80126d0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 80126d4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80126d8:	2b00      	cmp	r3, #0
 80126da:	d1ee      	bne.n	80126ba <arm_mat_inverse_f32+0x90>
      }

      /* Decrement loop counter */
      rowCnt--;
 80126dc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80126e0:	3b01      	subs	r3, #1
 80126e2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    while (rowCnt > 0U)
 80126e6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80126ea:	2b00      	cmp	r3, #0
 80126ec:	d1bf      	bne.n	801266e <arm_mat_inverse_f32+0x44>

    /* Loop over the number of columns of the input matrix.
       All the elements in each column are processed by the row operations */

    /* Index modifier to navigate through the columns */
    for(column = 0U; column < numCols; column++)
 80126ee:	2300      	movs	r3, #0
 80126f0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80126f4:	e2c7      	b.n	8012c86 <arm_mat_inverse_f32+0x65c>
      /* Check if the pivot element is zero..
       * If it is zero then interchange the row with non zero row below.
       * If there is no non zero element to replace in the rows below,
       * then the matrix is Singular. */

      pivotRow = column;
 80126f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80126fa:	653b      	str	r3, [r7, #80]	@ 0x50

      /* Temporary variable to hold the pivot value */
      pTmp = ELEM(pSrc,column,column) ;
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	685a      	ldr	r2, [r3, #4]
 8012700:	687b      	ldr	r3, [r7, #4]
 8012702:	885b      	ldrh	r3, [r3, #2]
 8012704:	3301      	adds	r3, #1
 8012706:	f8d7 10c4 	ldr.w	r1, [r7, #196]	@ 0xc4
 801270a:	fb01 f303 	mul.w	r3, r1, r3
 801270e:	009b      	lsls	r3, r3, #2
 8012710:	4413      	add	r3, r2
 8012712:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
      pivot = *pTmp;
 8012716:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801271a:	681b      	ldr	r3, [r3, #0]
 801271c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      selectedRow = column;
 8012720:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8012724:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

      /* Find maximum pivot in column */
      
        /* Loop over the number rows present below */

      for (rowNb = column+1; rowNb < numRows; rowNb++)
 8012728:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801272c:	3301      	adds	r3, #1
 801272e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8012732:	e02c      	b.n	801278e <arm_mat_inverse_f32+0x164>
      {
          /* Update the input and destination pointers */
          pTmp = ELEM(pSrc,rowNb,column);
 8012734:	687b      	ldr	r3, [r7, #4]
 8012736:	685a      	ldr	r2, [r3, #4]
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	885b      	ldrh	r3, [r3, #2]
 801273c:	4619      	mov	r1, r3
 801273e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8012742:	fb03 f101 	mul.w	r1, r3, r1
 8012746:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801274a:	440b      	add	r3, r1
 801274c:	009b      	lsls	r3, r3, #2
 801274e:	4413      	add	r3, r2
 8012750:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
          newPivot = *pTmp;
 8012754:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012758:	681b      	ldr	r3, [r3, #0]
 801275a:	657b      	str	r3, [r7, #84]	@ 0x54
          if (fabsf(newPivot) > fabsf(pivot))
 801275c:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8012760:	eeb0 7ae7 	vabs.f32	s14, s15
 8012764:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8012768:	eef0 7ae7 	vabs.f32	s15, s15
 801276c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012774:	dd06      	ble.n	8012784 <arm_mat_inverse_f32+0x15a>
          {
            selectedRow = rowNb; 
 8012776:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801277a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
            pivot = newPivot;
 801277e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012780:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      for (rowNb = column+1; rowNb < numRows; rowNb++)
 8012784:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8012788:	3301      	adds	r3, #1
 801278a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 801278e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8012792:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012794:	429a      	cmp	r2, r3
 8012796:	d3cd      	bcc.n	8012734 <arm_mat_inverse_f32+0x10a>
          }
      }
        
      /* Check if there is a non zero pivot element to
       * replace in the rows below */
      if ((pivot != 0.0f) && (selectedRow != column))
 8012798:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 801279c:	eef5 7a40 	vcmp.f32	s15, #0.0
 80127a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127a4:	f000 809b 	beq.w	80128de <arm_mat_inverse_f32+0x2b4>
 80127a8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80127ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80127b0:	429a      	cmp	r2, r3
 80127b2:	f000 8094 	beq.w	80128de <arm_mat_inverse_f32+0x2b4>
      {
            
            SWAP_ROWS_F32(pSrc,column, pivotRow,selectedRow);
 80127b6:	687b      	ldr	r3, [r7, #4]
 80127b8:	685b      	ldr	r3, [r3, #4]
 80127ba:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	685b      	ldr	r3, [r3, #4]
 80127c2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80127c6:	687b      	ldr	r3, [r7, #4]
 80127c8:	885b      	ldrh	r3, [r3, #2]
 80127ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80127cc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80127ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80127d2:	1ad3      	subs	r3, r2, r3
 80127d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80127d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80127d8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80127da:	fb03 f202 	mul.w	r2, r3, r2
 80127de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80127e2:	4413      	add	r3, r2
 80127e4:	009b      	lsls	r3, r3, #2
 80127e6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80127ea:	4413      	add	r3, r2
 80127ec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80127f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80127f2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80127f6:	fb03 f202 	mul.w	r2, r3, r2
 80127fa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80127fe:	4413      	add	r3, r2
 8012800:	009b      	lsls	r3, r3, #2
 8012802:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8012806:	4413      	add	r3, r2
 8012808:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 801280c:	2300      	movs	r3, #0
 801280e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8012812:	e018      	b.n	8012846 <arm_mat_inverse_f32+0x21c>
 8012814:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8012818:	681b      	ldr	r3, [r3, #0]
 801281a:	63bb      	str	r3, [r7, #56]	@ 0x38
 801281c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8012820:	1d1a      	adds	r2, r3, #4
 8012822:	f8c7 20b8 	str.w	r2, [r7, #184]	@ 0xb8
 8012826:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 801282a:	6812      	ldr	r2, [r2, #0]
 801282c:	601a      	str	r2, [r3, #0]
 801282e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8012832:	1d1a      	adds	r2, r3, #4
 8012834:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8012838:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801283a:	601a      	str	r2, [r3, #0]
 801283c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8012840:	3301      	adds	r3, #1
 8012842:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8012846:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 801284a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801284c:	429a      	cmp	r2, r3
 801284e:	dbe1      	blt.n	8012814 <arm_mat_inverse_f32+0x1ea>
            SWAP_ROWS_F32(pDst,0, pivotRow,selectedRow);
 8012850:	683b      	ldr	r3, [r7, #0]
 8012852:	685b      	ldr	r3, [r3, #4]
 8012854:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8012858:	683b      	ldr	r3, [r7, #0]
 801285a:	685b      	ldr	r3, [r3, #4]
 801285c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8012860:	683b      	ldr	r3, [r7, #0]
 8012862:	885b      	ldrh	r3, [r3, #2]
 8012864:	647b      	str	r3, [r7, #68]	@ 0x44
 8012866:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012868:	643b      	str	r3, [r7, #64]	@ 0x40
 801286a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801286c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801286e:	fb02 f303 	mul.w	r3, r2, r3
 8012872:	009b      	lsls	r3, r3, #2
 8012874:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8012878:	4413      	add	r3, r2
 801287a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 801287e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012880:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8012884:	fb02 f303 	mul.w	r3, r2, r3
 8012888:	009b      	lsls	r3, r3, #2
 801288a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 801288e:	4413      	add	r3, r2
 8012890:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8012894:	2300      	movs	r3, #0
 8012896:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 801289a:	e018      	b.n	80128ce <arm_mat_inverse_f32+0x2a4>
 801289c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80128a0:	681b      	ldr	r3, [r3, #0]
 80128a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80128a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80128a8:	1d1a      	adds	r2, r3, #4
 80128aa:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80128ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80128b2:	6812      	ldr	r2, [r2, #0]
 80128b4:	601a      	str	r2, [r3, #0]
 80128b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80128ba:	1d1a      	adds	r2, r3, #4
 80128bc:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80128c0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80128c2:	601a      	str	r2, [r3, #0]
 80128c4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80128c8:	3301      	adds	r3, #1
 80128ca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80128ce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80128d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80128d4:	429a      	cmp	r2, r3
 80128d6:	dbe1      	blt.n	801289c <arm_mat_inverse_f32+0x272>

    
            /* Flag to indicate whether exchange is done or not */
            flag = 1U;
 80128d8:	2301      	movs	r3, #1
 80128da:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc

      
      

      /* Update the status if the matrix is singular */
      if ((flag != 1U) && (pivot == 0.0f))
 80128de:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80128e2:	2b01      	cmp	r3, #1
 80128e4:	d009      	beq.n	80128fa <arm_mat_inverse_f32+0x2d0>
 80128e6:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 80128ea:	eef5 7a40 	vcmp.f32	s15, #0.0
 80128ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128f2:	d102      	bne.n	80128fa <arm_mat_inverse_f32+0x2d0>
      {
        return ARM_MATH_SINGULAR;
 80128f4:	f06f 0304 	mvn.w	r3, #4
 80128f8:	e208      	b.n	8012d0c <arm_mat_inverse_f32+0x6e2>
      }

     
      /* Pivot element of the row */
      pivot = 1.0f / pivot;
 80128fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80128fe:	ed97 7a38 	vldr	s14, [r7, #224]	@ 0xe0
 8012902:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012906:	edc7 7a38 	vstr	s15, [r7, #224]	@ 0xe0

      SCALE_ROW_F32(pSrc,column,pivot,pivotRow);
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	685b      	ldr	r3, [r3, #4]
 801290e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	885b      	ldrh	r3, [r3, #2]
 8012916:	637b      	str	r3, [r7, #52]	@ 0x34
 8012918:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801291a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801291e:	1ad3      	subs	r3, r2, r3
 8012920:	633b      	str	r3, [r7, #48]	@ 0x30
 8012922:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012924:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8012926:	fb03 f202 	mul.w	r2, r3, r2
 801292a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801292e:	4413      	add	r3, r2
 8012930:	009b      	lsls	r3, r3, #2
 8012932:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8012936:	4413      	add	r3, r2
 8012938:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 801293c:	2300      	movs	r3, #0
 801293e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8012942:	e011      	b.n	8012968 <arm_mat_inverse_f32+0x33e>
 8012944:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8012948:	1d1a      	adds	r2, r3, #4
 801294a:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 801294e:	ed93 7a00 	vldr	s14, [r3]
 8012952:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8012956:	ee67 7a27 	vmul.f32	s15, s14, s15
 801295a:	edc3 7a00 	vstr	s15, [r3]
 801295e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012962:	3301      	adds	r3, #1
 8012964:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8012968:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 801296c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801296e:	429a      	cmp	r2, r3
 8012970:	dbe8      	blt.n	8012944 <arm_mat_inverse_f32+0x31a>
      SCALE_ROW_F32(pDst,0,pivot,pivotRow);
 8012972:	683b      	ldr	r3, [r7, #0]
 8012974:	685b      	ldr	r3, [r3, #4]
 8012976:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801297a:	683b      	ldr	r3, [r7, #0]
 801297c:	885b      	ldrh	r3, [r3, #2]
 801297e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012980:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012982:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012984:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012986:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8012988:	fb02 f303 	mul.w	r3, r2, r3
 801298c:	009b      	lsls	r3, r3, #2
 801298e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8012992:	4413      	add	r3, r2
 8012994:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8012998:	2300      	movs	r3, #0
 801299a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 801299e:	e011      	b.n	80129c4 <arm_mat_inverse_f32+0x39a>
 80129a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80129a4:	1d1a      	adds	r2, r3, #4
 80129a6:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 80129aa:	ed93 7a00 	vldr	s14, [r3]
 80129ae:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 80129b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80129b6:	edc3 7a00 	vstr	s15, [r3]
 80129ba:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80129be:	3301      	adds	r3, #1
 80129c0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80129c4:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 80129c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80129ca:	429a      	cmp	r2, r3
 80129cc:	dbe8      	blt.n	80129a0 <arm_mat_inverse_f32+0x376>

      
      /* Replace the rows with the sum of that row and a multiple of row i
       * so that each new element in column i above row i is zero.*/

      rowNb = 0;
 80129ce:	2300      	movs	r3, #0
 80129d0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      for (;rowNb < pivotRow; rowNb++)
 80129d4:	e0ae      	b.n	8012b34 <arm_mat_inverse_f32+0x50a>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	685a      	ldr	r2, [r3, #4]
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	885b      	ldrh	r3, [r3, #2]
 80129de:	4619      	mov	r1, r3
 80129e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80129e4:	fb03 f101 	mul.w	r1, r3, r1
 80129e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80129ec:	440b      	add	r3, r1
 80129ee:	009b      	lsls	r3, r3, #2
 80129f0:	4413      	add	r3, r2
 80129f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
           pivot = *pTmp;
 80129f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80129fa:	681b      	ldr	r3, [r3, #0]
 80129fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	685b      	ldr	r3, [r3, #4]
 8012a04:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	685b      	ldr	r3, [r3, #4]
 8012a0c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8012a10:	687b      	ldr	r3, [r7, #4]
 8012a12:	885b      	ldrh	r3, [r3, #2]
 8012a14:	617b      	str	r3, [r7, #20]
 8012a16:	697a      	ldr	r2, [r7, #20]
 8012a18:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8012a1c:	1ad3      	subs	r3, r2, r3
 8012a1e:	613b      	str	r3, [r7, #16]
 8012a20:	697b      	ldr	r3, [r7, #20]
 8012a22:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8012a26:	fb03 f202 	mul.w	r2, r3, r2
 8012a2a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8012a2e:	4413      	add	r3, r2
 8012a30:	009b      	lsls	r3, r3, #2
 8012a32:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8012a36:	4413      	add	r3, r2
 8012a38:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8012a3c:	697b      	ldr	r3, [r7, #20]
 8012a3e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8012a40:	fb03 f202 	mul.w	r2, r3, r2
 8012a44:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8012a48:	4413      	add	r3, r2
 8012a4a:	009b      	lsls	r3, r3, #2
 8012a4c:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8012a50:	4413      	add	r3, r2
 8012a52:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8012a56:	2300      	movs	r3, #0
 8012a58:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8012a5c:	e01a      	b.n	8012a94 <arm_mat_inverse_f32+0x46a>
 8012a5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8012a62:	1d1a      	adds	r2, r3, #4
 8012a64:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8012a68:	ed93 7a00 	vldr	s14, [r3]
 8012a6c:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8012a70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012a74:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8012a78:	1d1a      	adds	r2, r3, #4
 8012a7a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8012a7e:	ed93 7a00 	vldr	s14, [r3]
 8012a82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012a86:	edc3 7a00 	vstr	s15, [r3]
 8012a8a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8012a8e:	3301      	adds	r3, #1
 8012a90:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8012a94:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8012a98:	693b      	ldr	r3, [r7, #16]
 8012a9a:	429a      	cmp	r2, r3
 8012a9c:	dbdf      	blt.n	8012a5e <arm_mat_inverse_f32+0x434>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 8012a9e:	683b      	ldr	r3, [r7, #0]
 8012aa0:	685b      	ldr	r3, [r3, #4]
 8012aa2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8012aa6:	683b      	ldr	r3, [r7, #0]
 8012aa8:	685b      	ldr	r3, [r3, #4]
 8012aaa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8012aae:	683b      	ldr	r3, [r7, #0]
 8012ab0:	885b      	ldrh	r3, [r3, #2]
 8012ab2:	60fb      	str	r3, [r7, #12]
 8012ab4:	68fb      	ldr	r3, [r7, #12]
 8012ab6:	60bb      	str	r3, [r7, #8]
 8012ab8:	68fb      	ldr	r3, [r7, #12]
 8012aba:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8012abe:	fb02 f303 	mul.w	r3, r2, r3
 8012ac2:	009b      	lsls	r3, r3, #2
 8012ac4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8012ac8:	4413      	add	r3, r2
 8012aca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8012ace:	68fb      	ldr	r3, [r7, #12]
 8012ad0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8012ad2:	fb02 f303 	mul.w	r3, r2, r3
 8012ad6:	009b      	lsls	r3, r3, #2
 8012ad8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8012adc:	4413      	add	r3, r2
 8012ade:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8012ae2:	2300      	movs	r3, #0
 8012ae4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8012ae8:	e01a      	b.n	8012b20 <arm_mat_inverse_f32+0x4f6>
 8012aea:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8012aee:	1d1a      	adds	r2, r3, #4
 8012af0:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8012af4:	ed93 7a00 	vldr	s14, [r3]
 8012af8:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8012afc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012b00:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8012b04:	1d1a      	adds	r2, r3, #4
 8012b06:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8012b0a:	ed93 7a00 	vldr	s14, [r3]
 8012b0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012b12:	edc3 7a00 	vstr	s15, [r3]
 8012b16:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8012b1a:	3301      	adds	r3, #1
 8012b1c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8012b20:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8012b24:	68bb      	ldr	r3, [r7, #8]
 8012b26:	429a      	cmp	r2, r3
 8012b28:	dbdf      	blt.n	8012aea <arm_mat_inverse_f32+0x4c0>
      for (;rowNb < pivotRow; rowNb++)
 8012b2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8012b2e:	3301      	adds	r3, #1
 8012b30:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8012b34:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8012b38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012b3a:	429a      	cmp	r2, r3
 8012b3c:	f4ff af4b 	bcc.w	80129d6 <arm_mat_inverse_f32+0x3ac>


      }

      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 8012b40:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012b42:	3301      	adds	r3, #1
 8012b44:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8012b48:	e092      	b.n	8012c70 <arm_mat_inverse_f32+0x646>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	685a      	ldr	r2, [r3, #4]
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	885b      	ldrh	r3, [r3, #2]
 8012b52:	4619      	mov	r1, r3
 8012b54:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8012b58:	fb03 f101 	mul.w	r1, r3, r1
 8012b5c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8012b60:	440b      	add	r3, r1
 8012b62:	009b      	lsls	r3, r3, #2
 8012b64:	4413      	add	r3, r2
 8012b66:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
           pivot = *pTmp;
 8012b6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012b6e:	681b      	ldr	r3, [r3, #0]
 8012b70:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 8012b74:	687b      	ldr	r3, [r7, #4]
 8012b76:	685b      	ldr	r3, [r3, #4]
 8012b78:	67bb      	str	r3, [r7, #120]	@ 0x78
 8012b7a:	687b      	ldr	r3, [r7, #4]
 8012b7c:	685b      	ldr	r3, [r3, #4]
 8012b7e:	677b      	str	r3, [r7, #116]	@ 0x74
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	885b      	ldrh	r3, [r3, #2]
 8012b84:	627b      	str	r3, [r7, #36]	@ 0x24
 8012b86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012b88:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8012b8c:	1ad3      	subs	r3, r2, r3
 8012b8e:	623b      	str	r3, [r7, #32]
 8012b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b92:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8012b96:	fb03 f202 	mul.w	r2, r3, r2
 8012b9a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8012b9e:	4413      	add	r3, r2
 8012ba0:	009b      	lsls	r3, r3, #2
 8012ba2:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8012ba4:	4413      	add	r3, r2
 8012ba6:	67bb      	str	r3, [r7, #120]	@ 0x78
 8012ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012baa:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8012bac:	fb03 f202 	mul.w	r2, r3, r2
 8012bb0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8012bb4:	4413      	add	r3, r2
 8012bb6:	009b      	lsls	r3, r3, #2
 8012bb8:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8012bba:	4413      	add	r3, r2
 8012bbc:	677b      	str	r3, [r7, #116]	@ 0x74
 8012bbe:	2300      	movs	r3, #0
 8012bc0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8012bc2:	e014      	b.n	8012bee <arm_mat_inverse_f32+0x5c4>
 8012bc4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8012bc6:	1d1a      	adds	r2, r3, #4
 8012bc8:	677a      	str	r2, [r7, #116]	@ 0x74
 8012bca:	ed93 7a00 	vldr	s14, [r3]
 8012bce:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8012bd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012bd6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012bd8:	1d1a      	adds	r2, r3, #4
 8012bda:	67ba      	str	r2, [r7, #120]	@ 0x78
 8012bdc:	ed93 7a00 	vldr	s14, [r3]
 8012be0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012be4:	edc3 7a00 	vstr	s15, [r3]
 8012be8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8012bea:	3301      	adds	r3, #1
 8012bec:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8012bee:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8012bf0:	6a3b      	ldr	r3, [r7, #32]
 8012bf2:	429a      	cmp	r2, r3
 8012bf4:	dbe6      	blt.n	8012bc4 <arm_mat_inverse_f32+0x59a>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 8012bf6:	683b      	ldr	r3, [r7, #0]
 8012bf8:	685b      	ldr	r3, [r3, #4]
 8012bfa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8012bfc:	683b      	ldr	r3, [r7, #0]
 8012bfe:	685b      	ldr	r3, [r3, #4]
 8012c00:	66bb      	str	r3, [r7, #104]	@ 0x68
 8012c02:	683b      	ldr	r3, [r7, #0]
 8012c04:	885b      	ldrh	r3, [r3, #2]
 8012c06:	61fb      	str	r3, [r7, #28]
 8012c08:	69fb      	ldr	r3, [r7, #28]
 8012c0a:	61bb      	str	r3, [r7, #24]
 8012c0c:	69fb      	ldr	r3, [r7, #28]
 8012c0e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8012c12:	fb02 f303 	mul.w	r3, r2, r3
 8012c16:	009b      	lsls	r3, r3, #2
 8012c18:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8012c1a:	4413      	add	r3, r2
 8012c1c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8012c1e:	69fb      	ldr	r3, [r7, #28]
 8012c20:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8012c22:	fb02 f303 	mul.w	r3, r2, r3
 8012c26:	009b      	lsls	r3, r3, #2
 8012c28:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8012c2a:	4413      	add	r3, r2
 8012c2c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8012c2e:	2300      	movs	r3, #0
 8012c30:	673b      	str	r3, [r7, #112]	@ 0x70
 8012c32:	e014      	b.n	8012c5e <arm_mat_inverse_f32+0x634>
 8012c34:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8012c36:	1d1a      	adds	r2, r3, #4
 8012c38:	66ba      	str	r2, [r7, #104]	@ 0x68
 8012c3a:	ed93 7a00 	vldr	s14, [r3]
 8012c3e:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8012c42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012c46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012c48:	1d1a      	adds	r2, r3, #4
 8012c4a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8012c4c:	ed93 7a00 	vldr	s14, [r3]
 8012c50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012c54:	edc3 7a00 	vstr	s15, [r3]
 8012c58:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012c5a:	3301      	adds	r3, #1
 8012c5c:	673b      	str	r3, [r7, #112]	@ 0x70
 8012c5e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8012c60:	69bb      	ldr	r3, [r7, #24]
 8012c62:	429a      	cmp	r2, r3
 8012c64:	dbe6      	blt.n	8012c34 <arm_mat_inverse_f32+0x60a>
      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 8012c66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8012c6a:	3301      	adds	r3, #1
 8012c6c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8012c70:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8012c74:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012c76:	429a      	cmp	r2, r3
 8012c78:	f4ff af67 	bcc.w	8012b4a <arm_mat_inverse_f32+0x520>
    for(column = 0U; column < numCols; column++)
 8012c7c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8012c80:	3301      	adds	r3, #1
 8012c82:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8012c86:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8012c8a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012c8c:	429a      	cmp	r2, r3
 8012c8e:	f4ff ad32 	bcc.w	80126f6 <arm_mat_inverse_f32+0xcc>
      }

    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8012c92:	2300      	movs	r3, #0
 8012c94:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3

    if ((flag != 1U) && (pivot == 0.0f))
 8012c98:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8012c9c:	2b01      	cmp	r3, #1
 8012c9e:	d033      	beq.n	8012d08 <arm_mat_inverse_f32+0x6de>
 8012ca0:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8012ca4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8012ca8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cac:	d12c      	bne.n	8012d08 <arm_mat_inverse_f32+0x6de>
    {
      pIn = pSrc->pData;
 8012cae:	687b      	ldr	r3, [r7, #4]
 8012cb0:	685b      	ldr	r3, [r3, #4]
 8012cb2:	667b      	str	r3, [r7, #100]	@ 0x64
      for (i = 0; i < numRows * numCols; i++)
 8012cb4:	2300      	movs	r3, #0
 8012cb6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8012cba:	e010      	b.n	8012cde <arm_mat_inverse_f32+0x6b4>
      {
        if (pIn[i] != 0.0f)
 8012cbc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8012cc0:	009b      	lsls	r3, r3, #2
 8012cc2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8012cc4:	4413      	add	r3, r2
 8012cc6:	edd3 7a00 	vldr	s15, [r3]
 8012cca:	eef5 7a40 	vcmp.f32	s15, #0.0
 8012cce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cd2:	d10d      	bne.n	8012cf0 <arm_mat_inverse_f32+0x6c6>
      for (i = 0; i < numRows * numCols; i++)
 8012cd4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8012cd8:	3301      	adds	r3, #1
 8012cda:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8012cde:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012ce0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8012ce2:	fb02 f303 	mul.w	r3, r2, r3
 8012ce6:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8012cea:	429a      	cmp	r2, r3
 8012cec:	d3e6      	bcc.n	8012cbc <arm_mat_inverse_f32+0x692>
 8012cee:	e000      	b.n	8012cf2 <arm_mat_inverse_f32+0x6c8>
            break;
 8012cf0:	bf00      	nop
      }

      if (i == numRows * numCols)
 8012cf2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012cf4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8012cf6:	fb02 f303 	mul.w	r3, r2, r3
 8012cfa:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8012cfe:	429a      	cmp	r2, r3
 8012d00:	d102      	bne.n	8012d08 <arm_mat_inverse_f32+0x6de>
        status = ARM_MATH_SINGULAR;
 8012d02:	23fb      	movs	r3, #251	@ 0xfb
 8012d04:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
    }
  }

  /* Return to application */
  return (status);
 8012d08:	f997 30c3 	ldrsb.w	r3, [r7, #195]	@ 0xc3
}
 8012d0c:	4618      	mov	r0, r3
 8012d0e:	37ec      	adds	r7, #236	@ 0xec
 8012d10:	46bd      	mov	sp, r7
 8012d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d16:	4770      	bx	lr

08012d18 <arm_mat_mult_f32>:
 */
arm_status arm_mat_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 8012d18:	b480      	push	{r7}
 8012d1a:	b093      	sub	sp, #76	@ 0x4c
 8012d1c:	af00      	add	r7, sp, #0
 8012d1e:	60f8      	str	r0, [r7, #12]
 8012d20:	60b9      	str	r1, [r7, #8]
 8012d22:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* Input data matrix pointer A */
 8012d24:	68fb      	ldr	r3, [r7, #12]
 8012d26:	685b      	ldr	r3, [r3, #4]
 8012d28:	647b      	str	r3, [r7, #68]	@ 0x44
  float32_t *pIn2 = pSrcB->pData;                /* Input data matrix pointer B */
 8012d2a:	68bb      	ldr	r3, [r7, #8]
 8012d2c:	685b      	ldr	r3, [r3, #4]
 8012d2e:	643b      	str	r3, [r7, #64]	@ 0x40
  float32_t *pInA = pSrcA->pData;                /* Input data matrix pointer A */
 8012d30:	68fb      	ldr	r3, [r7, #12]
 8012d32:	685b      	ldr	r3, [r3, #4]
 8012d34:	63fb      	str	r3, [r7, #60]	@ 0x3c
  float32_t *pInB = pSrcB->pData;                /* Input data matrix pointer B */
 8012d36:	68bb      	ldr	r3, [r7, #8]
 8012d38:	685b      	ldr	r3, [r3, #4]
 8012d3a:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	685b      	ldr	r3, [r3, #4]
 8012d40:	61fb      	str	r3, [r7, #28]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  float32_t sum;                                 /* Accumulator */
  uint16_t numRowsA = pSrcA->numRows;            /* Number of rows of input matrix A */
 8012d42:	68fb      	ldr	r3, [r7, #12]
 8012d44:	881b      	ldrh	r3, [r3, #0]
 8012d46:	837b      	strh	r3, [r7, #26]
  uint16_t numColsB = pSrcB->numCols;            /* Number of columns of input matrix B */
 8012d48:	68bb      	ldr	r3, [r7, #8]
 8012d4a:	885b      	ldrh	r3, [r3, #2]
 8012d4c:	833b      	strh	r3, [r7, #24]
  uint16_t numColsA = pSrcA->numCols;            /* Number of columns of input matrix A */
 8012d4e:	68fb      	ldr	r3, [r7, #12]
 8012d50:	885b      	ldrh	r3, [r3, #2]
 8012d52:	82fb      	strh	r3, [r7, #22]
  uint32_t col, i = 0U, row = numRowsA, colCnt;  /* Loop counters */
 8012d54:	2300      	movs	r3, #0
 8012d56:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012d58:	8b7b      	ldrh	r3, [r7, #26]
 8012d5a:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB */
    /* row loop */
    do
    {
      /* Output pointer is set to starting address of row being processed */
      px = pOut + i;
 8012d5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d5e:	009b      	lsls	r3, r3, #2
 8012d60:	69fa      	ldr	r2, [r7, #28]
 8012d62:	4413      	add	r3, r2
 8012d64:	63bb      	str	r3, [r7, #56]	@ 0x38

      /* For every row wise process, column loop counter is to be initiated */
      col = numColsB;
 8012d66:	8b3b      	ldrh	r3, [r7, #24]
 8012d68:	633b      	str	r3, [r7, #48]	@ 0x30

      /* For every row wise process, pIn2 pointer is set to starting address of pSrcB data */
      pIn2 = pSrcB->pData;
 8012d6a:	68bb      	ldr	r3, [r7, #8]
 8012d6c:	685b      	ldr	r3, [r3, #4]
 8012d6e:	643b      	str	r3, [r7, #64]	@ 0x40

      /* column loop */
      do
      {
        /* Set the variable sum, that acts as accumulator, to zero */
        sum = 0.0f;
 8012d70:	f04f 0300 	mov.w	r3, #0
 8012d74:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Initialize pointer pIn1 to point to starting address of column being processed */
        pIn1 = pInA;
 8012d76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012d78:	647b      	str	r3, [r7, #68]	@ 0x44
        colCnt = numColsA % 0x4U;

#else

        /* Initialize cntCnt with number of columns */
        colCnt = numColsA;
 8012d7a:	8afb      	ldrh	r3, [r7, #22]
 8012d7c:	627b      	str	r3, [r7, #36]	@ 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

        while (colCnt > 0U)
 8012d7e:	e017      	b.n	8012db0 <arm_mat_mult_f32+0x98>
        {
          /* c(m,p) = a(m,1) * b(1,p) + a(m,2) * b(2,p) + .... + a(m,n) * b(n,p) */

          /* Perform the multiply-accumulates */
          sum += *pIn1++ * *pIn2;
 8012d80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012d82:	1d1a      	adds	r2, r3, #4
 8012d84:	647a      	str	r2, [r7, #68]	@ 0x44
 8012d86:	ed93 7a00 	vldr	s14, [r3]
 8012d8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012d8c:	edd3 7a00 	vldr	s15, [r3]
 8012d90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012d94:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8012d98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012d9c:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
          pIn2 += numColsB;
 8012da0:	8b3b      	ldrh	r3, [r7, #24]
 8012da2:	009b      	lsls	r3, r3, #2
 8012da4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8012da6:	4413      	add	r3, r2
 8012da8:	643b      	str	r3, [r7, #64]	@ 0x40

          /* Decrement loop counter */
          colCnt--;
 8012daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012dac:	3b01      	subs	r3, #1
 8012dae:	627b      	str	r3, [r7, #36]	@ 0x24
        while (colCnt > 0U)
 8012db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012db2:	2b00      	cmp	r3, #0
 8012db4:	d1e4      	bne.n	8012d80 <arm_mat_mult_f32+0x68>
        }

        /* Store result in destination buffer */
        *px++ = sum;
 8012db6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012db8:	1d1a      	adds	r2, r3, #4
 8012dba:	63ba      	str	r2, [r7, #56]	@ 0x38
 8012dbc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012dbe:	601a      	str	r2, [r3, #0]

        /* Decrement column loop counter */
        col--;
 8012dc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012dc2:	3b01      	subs	r3, #1
 8012dc4:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Update pointer pIn2 to point to starting address of next column */
        pIn2 = pInB + (numColsB - col);
 8012dc6:	8b3a      	ldrh	r2, [r7, #24]
 8012dc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012dca:	1ad3      	subs	r3, r2, r3
 8012dcc:	009b      	lsls	r3, r3, #2
 8012dce:	6a3a      	ldr	r2, [r7, #32]
 8012dd0:	4413      	add	r3, r2
 8012dd2:	643b      	str	r3, [r7, #64]	@ 0x40

      } while (col > 0U);
 8012dd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012dd6:	2b00      	cmp	r3, #0
 8012dd8:	d1ca      	bne.n	8012d70 <arm_mat_mult_f32+0x58>

      /* Update pointer pInA to point to starting address of next row */
      i = i + numColsB;
 8012dda:	8b3b      	ldrh	r3, [r7, #24]
 8012ddc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012dde:	4413      	add	r3, r2
 8012de0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pInA = pInA + numColsA;
 8012de2:	8afb      	ldrh	r3, [r7, #22]
 8012de4:	009b      	lsls	r3, r3, #2
 8012de6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8012de8:	4413      	add	r3, r2
 8012dea:	63fb      	str	r3, [r7, #60]	@ 0x3c

      /* Decrement row loop counter */
      row--;
 8012dec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012dee:	3b01      	subs	r3, #1
 8012df0:	62bb      	str	r3, [r7, #40]	@ 0x28

    } while (row > 0U);
 8012df2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012df4:	2b00      	cmp	r3, #0
 8012df6:	d1b1      	bne.n	8012d5c <arm_mat_mult_f32+0x44>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8012df8:	2300      	movs	r3, #0
 8012dfa:	757b      	strb	r3, [r7, #21]
  }

  /* Return to application */
  return (status);
 8012dfc:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 8012e00:	4618      	mov	r0, r3
 8012e02:	374c      	adds	r7, #76	@ 0x4c
 8012e04:	46bd      	mov	sp, r7
 8012e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e0a:	4770      	bx	lr

08012e0c <arm_mat_scale_f32>:
#else
arm_status arm_mat_scale_f32(
  const arm_matrix_instance_f32 * pSrc,
        float32_t                 scale,
        arm_matrix_instance_f32 * pDst)
{
 8012e0c:	b480      	push	{r7}
 8012e0e:	b08b      	sub	sp, #44	@ 0x2c
 8012e10:	af00      	add	r7, sp, #0
 8012e12:	60f8      	str	r0, [r7, #12]
 8012e14:	ed87 0a02 	vstr	s0, [r7, #8]
 8012e18:	6079      	str	r1, [r7, #4]
  float32_t *pIn = pSrc->pData;                  /* Input data matrix pointer */
 8012e1a:	68fb      	ldr	r3, [r7, #12]
 8012e1c:	685b      	ldr	r3, [r3, #4]
 8012e1e:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 8012e20:	687b      	ldr	r3, [r7, #4]
 8012e22:	685b      	ldr	r3, [r3, #4]
 8012e24:	623b      	str	r3, [r7, #32]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
 8012e26:	68fb      	ldr	r3, [r7, #12]
 8012e28:	881b      	ldrh	r3, [r3, #0]
 8012e2a:	461a      	mov	r2, r3
 8012e2c:	68fb      	ldr	r3, [r7, #12]
 8012e2e:	885b      	ldrh	r3, [r3, #2]
 8012e30:	fb02 f303 	mul.w	r3, r2, r3
 8012e34:	61bb      	str	r3, [r7, #24]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 8012e36:	69bb      	ldr	r3, [r7, #24]
 8012e38:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 8012e3a:	e010      	b.n	8012e5e <arm_mat_scale_f32+0x52>
    {
      /* C(m,n) = A(m,n) * scale */

      /* Scale and store result in destination buffer. */
      *pOut++ = (*pIn++) * scale;
 8012e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e3e:	1d1a      	adds	r2, r3, #4
 8012e40:	627a      	str	r2, [r7, #36]	@ 0x24
 8012e42:	ed93 7a00 	vldr	s14, [r3]
 8012e46:	6a3b      	ldr	r3, [r7, #32]
 8012e48:	1d1a      	adds	r2, r3, #4
 8012e4a:	623a      	str	r2, [r7, #32]
 8012e4c:	edd7 7a02 	vldr	s15, [r7, #8]
 8012e50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012e54:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 8012e58:	69fb      	ldr	r3, [r7, #28]
 8012e5a:	3b01      	subs	r3, #1
 8012e5c:	61fb      	str	r3, [r7, #28]
    while (blkCnt > 0U)
 8012e5e:	69fb      	ldr	r3, [r7, #28]
 8012e60:	2b00      	cmp	r3, #0
 8012e62:	d1eb      	bne.n	8012e3c <arm_mat_scale_f32+0x30>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8012e64:	2300      	movs	r3, #0
 8012e66:	75fb      	strb	r3, [r7, #23]
  }

  /* Return to application */
  return (status);
 8012e68:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012e6c:	4618      	mov	r0, r3
 8012e6e:	372c      	adds	r7, #44	@ 0x2c
 8012e70:	46bd      	mov	sp, r7
 8012e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e76:	4770      	bx	lr

08012e78 <arm_mat_sub_f32>:
#else
arm_status arm_mat_sub_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 8012e78:	b480      	push	{r7}
 8012e7a:	b08b      	sub	sp, #44	@ 0x2c
 8012e7c:	af00      	add	r7, sp, #0
 8012e7e:	60f8      	str	r0, [r7, #12]
 8012e80:	60b9      	str	r1, [r7, #8]
 8012e82:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 8012e84:	68fb      	ldr	r3, [r7, #12]
 8012e86:	685b      	ldr	r3, [r3, #4]
 8012e88:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 8012e8a:	68bb      	ldr	r3, [r7, #8]
 8012e8c:	685b      	ldr	r3, [r3, #4]
 8012e8e:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8012e90:	687b      	ldr	r3, [r7, #4]
 8012e92:	685b      	ldr	r3, [r3, #4]
 8012e94:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 8012e96:	68fb      	ldr	r3, [r7, #12]
 8012e98:	881b      	ldrh	r3, [r3, #0]
 8012e9a:	461a      	mov	r2, r3
 8012e9c:	68fb      	ldr	r3, [r7, #12]
 8012e9e:	885b      	ldrh	r3, [r3, #2]
 8012ea0:	fb02 f303 	mul.w	r3, r2, r3
 8012ea4:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 8012ea6:	697b      	ldr	r3, [r7, #20]
 8012ea8:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 8012eaa:	e013      	b.n	8012ed4 <arm_mat_sub_f32+0x5c>
    {
      /* C(m,n) = A(m,n) - B(m,n) */

      /* Subtract and store result in destination buffer. */
      *pOut++ = (*pInA++) - (*pInB++);
 8012eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012eae:	1d1a      	adds	r2, r3, #4
 8012eb0:	627a      	str	r2, [r7, #36]	@ 0x24
 8012eb2:	ed93 7a00 	vldr	s14, [r3]
 8012eb6:	6a3b      	ldr	r3, [r7, #32]
 8012eb8:	1d1a      	adds	r2, r3, #4
 8012eba:	623a      	str	r2, [r7, #32]
 8012ebc:	edd3 7a00 	vldr	s15, [r3]
 8012ec0:	69fb      	ldr	r3, [r7, #28]
 8012ec2:	1d1a      	adds	r2, r3, #4
 8012ec4:	61fa      	str	r2, [r7, #28]
 8012ec6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012eca:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 8012ece:	69bb      	ldr	r3, [r7, #24]
 8012ed0:	3b01      	subs	r3, #1
 8012ed2:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 8012ed4:	69bb      	ldr	r3, [r7, #24]
 8012ed6:	2b00      	cmp	r3, #0
 8012ed8:	d1e8      	bne.n	8012eac <arm_mat_sub_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8012eda:	2300      	movs	r3, #0
 8012edc:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 8012ede:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8012ee2:	4618      	mov	r0, r3
 8012ee4:	372c      	adds	r7, #44	@ 0x2c
 8012ee6:	46bd      	mov	sp, r7
 8012ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eec:	4770      	bx	lr

08012eee <arm_mat_trans_f32>:
}
#else
arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 8012eee:	b480      	push	{r7}
 8012ef0:	b08b      	sub	sp, #44	@ 0x2c
 8012ef2:	af00      	add	r7, sp, #0
 8012ef4:	6078      	str	r0, [r7, #4]
 8012ef6:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 8012ef8:	687b      	ldr	r3, [r7, #4]
 8012efa:	685b      	ldr	r3, [r3, #4]
 8012efc:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8012efe:	683b      	ldr	r3, [r7, #0]
 8012f00:	685b      	ldr	r3, [r3, #4]
 8012f02:	613b      	str	r3, [r7, #16]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
 8012f04:	687b      	ldr	r3, [r7, #4]
 8012f06:	881b      	ldrh	r3, [r3, #0]
 8012f08:	81fb      	strh	r3, [r7, #14]
  uint16_t nCols = pSrc->numCols;                /* number of columns */
 8012f0a:	687b      	ldr	r3, [r7, #4]
 8012f0c:	885b      	ldrh	r3, [r3, #2]
 8012f0e:	81bb      	strh	r3, [r7, #12]
  uint32_t col, row = nRows, i = 0U;             /* Loop counters */
 8012f10:	89fb      	ldrh	r3, [r7, #14]
 8012f12:	61bb      	str	r3, [r7, #24]
 8012f14:	2300      	movs	r3, #0
 8012f16:	617b      	str	r3, [r7, #20]
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop */
    do
    {
      /* Pointer px is set to starting address of column being processed */
      px = pOut + i;
 8012f18:	697b      	ldr	r3, [r7, #20]
 8012f1a:	009b      	lsls	r3, r3, #2
 8012f1c:	693a      	ldr	r2, [r7, #16]
 8012f1e:	4413      	add	r3, r2
 8012f20:	623b      	str	r3, [r7, #32]
      col = nCols % 0x4U;

#else

      /* Initialize col with number of samples */
      col = nCols;
 8012f22:	89bb      	ldrh	r3, [r7, #12]
 8012f24:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (col > 0U)
 8012f26:	e00d      	b.n	8012f44 <arm_mat_trans_f32+0x56>
      {
        /* Read and store input element in destination */
        *px = *pIn++;
 8012f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012f2a:	1d1a      	adds	r2, r3, #4
 8012f2c:	627a      	str	r2, [r7, #36]	@ 0x24
 8012f2e:	681a      	ldr	r2, [r3, #0]
 8012f30:	6a3b      	ldr	r3, [r7, #32]
 8012f32:	601a      	str	r2, [r3, #0]

        /* Update pointer px to point to next row of transposed matrix */
        px += nRows;
 8012f34:	89fb      	ldrh	r3, [r7, #14]
 8012f36:	009b      	lsls	r3, r3, #2
 8012f38:	6a3a      	ldr	r2, [r7, #32]
 8012f3a:	4413      	add	r3, r2
 8012f3c:	623b      	str	r3, [r7, #32]

        /* Decrement column loop counter */
        col--;
 8012f3e:	69fb      	ldr	r3, [r7, #28]
 8012f40:	3b01      	subs	r3, #1
 8012f42:	61fb      	str	r3, [r7, #28]
      while (col > 0U)
 8012f44:	69fb      	ldr	r3, [r7, #28]
 8012f46:	2b00      	cmp	r3, #0
 8012f48:	d1ee      	bne.n	8012f28 <arm_mat_trans_f32+0x3a>
      }

      i++;
 8012f4a:	697b      	ldr	r3, [r7, #20]
 8012f4c:	3301      	adds	r3, #1
 8012f4e:	617b      	str	r3, [r7, #20]

      /* Decrement row loop counter */
      row--;
 8012f50:	69bb      	ldr	r3, [r7, #24]
 8012f52:	3b01      	subs	r3, #1
 8012f54:	61bb      	str	r3, [r7, #24]

    } while (row > 0U);          /* row loop end */
 8012f56:	69bb      	ldr	r3, [r7, #24]
 8012f58:	2b00      	cmp	r3, #0
 8012f5a:	d1dd      	bne.n	8012f18 <arm_mat_trans_f32+0x2a>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8012f5c:	2300      	movs	r3, #0
 8012f5e:	72fb      	strb	r3, [r7, #11]
  }

  /* Return to application */
  return (status);
 8012f60:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8012f64:	4618      	mov	r0, r3
 8012f66:	372c      	adds	r7, #44	@ 0x2c
 8012f68:	46bd      	mov	sp, r7
 8012f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f6e:	4770      	bx	lr

08012f70 <malloc>:
 8012f70:	4b02      	ldr	r3, [pc, #8]	@ (8012f7c <malloc+0xc>)
 8012f72:	4601      	mov	r1, r0
 8012f74:	6818      	ldr	r0, [r3, #0]
 8012f76:	f000 b825 	b.w	8012fc4 <_malloc_r>
 8012f7a:	bf00      	nop
 8012f7c:	200005c8 	.word	0x200005c8

08012f80 <sbrk_aligned>:
 8012f80:	b570      	push	{r4, r5, r6, lr}
 8012f82:	4e0f      	ldr	r6, [pc, #60]	@ (8012fc0 <sbrk_aligned+0x40>)
 8012f84:	460c      	mov	r4, r1
 8012f86:	6831      	ldr	r1, [r6, #0]
 8012f88:	4605      	mov	r5, r0
 8012f8a:	b911      	cbnz	r1, 8012f92 <sbrk_aligned+0x12>
 8012f8c:	f000 f8ae 	bl	80130ec <_sbrk_r>
 8012f90:	6030      	str	r0, [r6, #0]
 8012f92:	4621      	mov	r1, r4
 8012f94:	4628      	mov	r0, r5
 8012f96:	f000 f8a9 	bl	80130ec <_sbrk_r>
 8012f9a:	1c43      	adds	r3, r0, #1
 8012f9c:	d103      	bne.n	8012fa6 <sbrk_aligned+0x26>
 8012f9e:	f04f 34ff 	mov.w	r4, #4294967295
 8012fa2:	4620      	mov	r0, r4
 8012fa4:	bd70      	pop	{r4, r5, r6, pc}
 8012fa6:	1cc4      	adds	r4, r0, #3
 8012fa8:	f024 0403 	bic.w	r4, r4, #3
 8012fac:	42a0      	cmp	r0, r4
 8012fae:	d0f8      	beq.n	8012fa2 <sbrk_aligned+0x22>
 8012fb0:	1a21      	subs	r1, r4, r0
 8012fb2:	4628      	mov	r0, r5
 8012fb4:	f000 f89a 	bl	80130ec <_sbrk_r>
 8012fb8:	3001      	adds	r0, #1
 8012fba:	d1f2      	bne.n	8012fa2 <sbrk_aligned+0x22>
 8012fbc:	e7ef      	b.n	8012f9e <sbrk_aligned+0x1e>
 8012fbe:	bf00      	nop
 8012fc0:	20002744 	.word	0x20002744

08012fc4 <_malloc_r>:
 8012fc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012fc8:	1ccd      	adds	r5, r1, #3
 8012fca:	f025 0503 	bic.w	r5, r5, #3
 8012fce:	3508      	adds	r5, #8
 8012fd0:	2d0c      	cmp	r5, #12
 8012fd2:	bf38      	it	cc
 8012fd4:	250c      	movcc	r5, #12
 8012fd6:	2d00      	cmp	r5, #0
 8012fd8:	4606      	mov	r6, r0
 8012fda:	db01      	blt.n	8012fe0 <_malloc_r+0x1c>
 8012fdc:	42a9      	cmp	r1, r5
 8012fde:	d904      	bls.n	8012fea <_malloc_r+0x26>
 8012fe0:	230c      	movs	r3, #12
 8012fe2:	6033      	str	r3, [r6, #0]
 8012fe4:	2000      	movs	r0, #0
 8012fe6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012fea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80130c0 <_malloc_r+0xfc>
 8012fee:	f000 f869 	bl	80130c4 <__malloc_lock>
 8012ff2:	f8d8 3000 	ldr.w	r3, [r8]
 8012ff6:	461c      	mov	r4, r3
 8012ff8:	bb44      	cbnz	r4, 801304c <_malloc_r+0x88>
 8012ffa:	4629      	mov	r1, r5
 8012ffc:	4630      	mov	r0, r6
 8012ffe:	f7ff ffbf 	bl	8012f80 <sbrk_aligned>
 8013002:	1c43      	adds	r3, r0, #1
 8013004:	4604      	mov	r4, r0
 8013006:	d158      	bne.n	80130ba <_malloc_r+0xf6>
 8013008:	f8d8 4000 	ldr.w	r4, [r8]
 801300c:	4627      	mov	r7, r4
 801300e:	2f00      	cmp	r7, #0
 8013010:	d143      	bne.n	801309a <_malloc_r+0xd6>
 8013012:	2c00      	cmp	r4, #0
 8013014:	d04b      	beq.n	80130ae <_malloc_r+0xea>
 8013016:	6823      	ldr	r3, [r4, #0]
 8013018:	4639      	mov	r1, r7
 801301a:	4630      	mov	r0, r6
 801301c:	eb04 0903 	add.w	r9, r4, r3
 8013020:	f000 f864 	bl	80130ec <_sbrk_r>
 8013024:	4581      	cmp	r9, r0
 8013026:	d142      	bne.n	80130ae <_malloc_r+0xea>
 8013028:	6821      	ldr	r1, [r4, #0]
 801302a:	1a6d      	subs	r5, r5, r1
 801302c:	4629      	mov	r1, r5
 801302e:	4630      	mov	r0, r6
 8013030:	f7ff ffa6 	bl	8012f80 <sbrk_aligned>
 8013034:	3001      	adds	r0, #1
 8013036:	d03a      	beq.n	80130ae <_malloc_r+0xea>
 8013038:	6823      	ldr	r3, [r4, #0]
 801303a:	442b      	add	r3, r5
 801303c:	6023      	str	r3, [r4, #0]
 801303e:	f8d8 3000 	ldr.w	r3, [r8]
 8013042:	685a      	ldr	r2, [r3, #4]
 8013044:	bb62      	cbnz	r2, 80130a0 <_malloc_r+0xdc>
 8013046:	f8c8 7000 	str.w	r7, [r8]
 801304a:	e00f      	b.n	801306c <_malloc_r+0xa8>
 801304c:	6822      	ldr	r2, [r4, #0]
 801304e:	1b52      	subs	r2, r2, r5
 8013050:	d420      	bmi.n	8013094 <_malloc_r+0xd0>
 8013052:	2a0b      	cmp	r2, #11
 8013054:	d917      	bls.n	8013086 <_malloc_r+0xc2>
 8013056:	1961      	adds	r1, r4, r5
 8013058:	42a3      	cmp	r3, r4
 801305a:	6025      	str	r5, [r4, #0]
 801305c:	bf18      	it	ne
 801305e:	6059      	strne	r1, [r3, #4]
 8013060:	6863      	ldr	r3, [r4, #4]
 8013062:	bf08      	it	eq
 8013064:	f8c8 1000 	streq.w	r1, [r8]
 8013068:	5162      	str	r2, [r4, r5]
 801306a:	604b      	str	r3, [r1, #4]
 801306c:	4630      	mov	r0, r6
 801306e:	f000 f82f 	bl	80130d0 <__malloc_unlock>
 8013072:	f104 000b 	add.w	r0, r4, #11
 8013076:	1d23      	adds	r3, r4, #4
 8013078:	f020 0007 	bic.w	r0, r0, #7
 801307c:	1ac2      	subs	r2, r0, r3
 801307e:	bf1c      	itt	ne
 8013080:	1a1b      	subne	r3, r3, r0
 8013082:	50a3      	strne	r3, [r4, r2]
 8013084:	e7af      	b.n	8012fe6 <_malloc_r+0x22>
 8013086:	6862      	ldr	r2, [r4, #4]
 8013088:	42a3      	cmp	r3, r4
 801308a:	bf0c      	ite	eq
 801308c:	f8c8 2000 	streq.w	r2, [r8]
 8013090:	605a      	strne	r2, [r3, #4]
 8013092:	e7eb      	b.n	801306c <_malloc_r+0xa8>
 8013094:	4623      	mov	r3, r4
 8013096:	6864      	ldr	r4, [r4, #4]
 8013098:	e7ae      	b.n	8012ff8 <_malloc_r+0x34>
 801309a:	463c      	mov	r4, r7
 801309c:	687f      	ldr	r7, [r7, #4]
 801309e:	e7b6      	b.n	801300e <_malloc_r+0x4a>
 80130a0:	461a      	mov	r2, r3
 80130a2:	685b      	ldr	r3, [r3, #4]
 80130a4:	42a3      	cmp	r3, r4
 80130a6:	d1fb      	bne.n	80130a0 <_malloc_r+0xdc>
 80130a8:	2300      	movs	r3, #0
 80130aa:	6053      	str	r3, [r2, #4]
 80130ac:	e7de      	b.n	801306c <_malloc_r+0xa8>
 80130ae:	230c      	movs	r3, #12
 80130b0:	6033      	str	r3, [r6, #0]
 80130b2:	4630      	mov	r0, r6
 80130b4:	f000 f80c 	bl	80130d0 <__malloc_unlock>
 80130b8:	e794      	b.n	8012fe4 <_malloc_r+0x20>
 80130ba:	6005      	str	r5, [r0, #0]
 80130bc:	e7d6      	b.n	801306c <_malloc_r+0xa8>
 80130be:	bf00      	nop
 80130c0:	20002748 	.word	0x20002748

080130c4 <__malloc_lock>:
 80130c4:	4801      	ldr	r0, [pc, #4]	@ (80130cc <__malloc_lock+0x8>)
 80130c6:	f000 b84b 	b.w	8013160 <__retarget_lock_acquire_recursive>
 80130ca:	bf00      	nop
 80130cc:	20002888 	.word	0x20002888

080130d0 <__malloc_unlock>:
 80130d0:	4801      	ldr	r0, [pc, #4]	@ (80130d8 <__malloc_unlock+0x8>)
 80130d2:	f000 b846 	b.w	8013162 <__retarget_lock_release_recursive>
 80130d6:	bf00      	nop
 80130d8:	20002888 	.word	0x20002888

080130dc <memset>:
 80130dc:	4402      	add	r2, r0
 80130de:	4603      	mov	r3, r0
 80130e0:	4293      	cmp	r3, r2
 80130e2:	d100      	bne.n	80130e6 <memset+0xa>
 80130e4:	4770      	bx	lr
 80130e6:	f803 1b01 	strb.w	r1, [r3], #1
 80130ea:	e7f9      	b.n	80130e0 <memset+0x4>

080130ec <_sbrk_r>:
 80130ec:	b538      	push	{r3, r4, r5, lr}
 80130ee:	4d06      	ldr	r5, [pc, #24]	@ (8013108 <_sbrk_r+0x1c>)
 80130f0:	2300      	movs	r3, #0
 80130f2:	4604      	mov	r4, r0
 80130f4:	4608      	mov	r0, r1
 80130f6:	602b      	str	r3, [r5, #0]
 80130f8:	f7f7 f824 	bl	800a144 <_sbrk>
 80130fc:	1c43      	adds	r3, r0, #1
 80130fe:	d102      	bne.n	8013106 <_sbrk_r+0x1a>
 8013100:	682b      	ldr	r3, [r5, #0]
 8013102:	b103      	cbz	r3, 8013106 <_sbrk_r+0x1a>
 8013104:	6023      	str	r3, [r4, #0]
 8013106:	bd38      	pop	{r3, r4, r5, pc}
 8013108:	20002884 	.word	0x20002884

0801310c <__errno>:
 801310c:	4b01      	ldr	r3, [pc, #4]	@ (8013114 <__errno+0x8>)
 801310e:	6818      	ldr	r0, [r3, #0]
 8013110:	4770      	bx	lr
 8013112:	bf00      	nop
 8013114:	200005c8 	.word	0x200005c8

08013118 <__libc_init_array>:
 8013118:	b570      	push	{r4, r5, r6, lr}
 801311a:	4d0d      	ldr	r5, [pc, #52]	@ (8013150 <__libc_init_array+0x38>)
 801311c:	4c0d      	ldr	r4, [pc, #52]	@ (8013154 <__libc_init_array+0x3c>)
 801311e:	1b64      	subs	r4, r4, r5
 8013120:	10a4      	asrs	r4, r4, #2
 8013122:	2600      	movs	r6, #0
 8013124:	42a6      	cmp	r6, r4
 8013126:	d109      	bne.n	801313c <__libc_init_array+0x24>
 8013128:	4d0b      	ldr	r5, [pc, #44]	@ (8013158 <__libc_init_array+0x40>)
 801312a:	4c0c      	ldr	r4, [pc, #48]	@ (801315c <__libc_init_array+0x44>)
 801312c:	f001 ff30 	bl	8014f90 <_init>
 8013130:	1b64      	subs	r4, r4, r5
 8013132:	10a4      	asrs	r4, r4, #2
 8013134:	2600      	movs	r6, #0
 8013136:	42a6      	cmp	r6, r4
 8013138:	d105      	bne.n	8013146 <__libc_init_array+0x2e>
 801313a:	bd70      	pop	{r4, r5, r6, pc}
 801313c:	f855 3b04 	ldr.w	r3, [r5], #4
 8013140:	4798      	blx	r3
 8013142:	3601      	adds	r6, #1
 8013144:	e7ee      	b.n	8013124 <__libc_init_array+0xc>
 8013146:	f855 3b04 	ldr.w	r3, [r5], #4
 801314a:	4798      	blx	r3
 801314c:	3601      	adds	r6, #1
 801314e:	e7f2      	b.n	8013136 <__libc_init_array+0x1e>
 8013150:	08015600 	.word	0x08015600
 8013154:	08015600 	.word	0x08015600
 8013158:	08015600 	.word	0x08015600
 801315c:	08015604 	.word	0x08015604

08013160 <__retarget_lock_acquire_recursive>:
 8013160:	4770      	bx	lr

08013162 <__retarget_lock_release_recursive>:
 8013162:	4770      	bx	lr

08013164 <memcpy>:
 8013164:	440a      	add	r2, r1
 8013166:	4291      	cmp	r1, r2
 8013168:	f100 33ff 	add.w	r3, r0, #4294967295
 801316c:	d100      	bne.n	8013170 <memcpy+0xc>
 801316e:	4770      	bx	lr
 8013170:	b510      	push	{r4, lr}
 8013172:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013176:	f803 4f01 	strb.w	r4, [r3, #1]!
 801317a:	4291      	cmp	r1, r2
 801317c:	d1f9      	bne.n	8013172 <memcpy+0xe>
 801317e:	bd10      	pop	{r4, pc}

08013180 <cos>:
 8013180:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013182:	ec53 2b10 	vmov	r2, r3, d0
 8013186:	4826      	ldr	r0, [pc, #152]	@ (8013220 <cos+0xa0>)
 8013188:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801318c:	4281      	cmp	r1, r0
 801318e:	d806      	bhi.n	801319e <cos+0x1e>
 8013190:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8013218 <cos+0x98>
 8013194:	b005      	add	sp, #20
 8013196:	f85d eb04 	ldr.w	lr, [sp], #4
 801319a:	f000 b9bd 	b.w	8013518 <__kernel_cos>
 801319e:	4821      	ldr	r0, [pc, #132]	@ (8013224 <cos+0xa4>)
 80131a0:	4281      	cmp	r1, r0
 80131a2:	d908      	bls.n	80131b6 <cos+0x36>
 80131a4:	4610      	mov	r0, r2
 80131a6:	4619      	mov	r1, r3
 80131a8:	f7ed f83a 	bl	8000220 <__aeabi_dsub>
 80131ac:	ec41 0b10 	vmov	d0, r0, r1
 80131b0:	b005      	add	sp, #20
 80131b2:	f85d fb04 	ldr.w	pc, [sp], #4
 80131b6:	4668      	mov	r0, sp
 80131b8:	f000 fb32 	bl	8013820 <__ieee754_rem_pio2>
 80131bc:	f000 0003 	and.w	r0, r0, #3
 80131c0:	2801      	cmp	r0, #1
 80131c2:	d00b      	beq.n	80131dc <cos+0x5c>
 80131c4:	2802      	cmp	r0, #2
 80131c6:	d015      	beq.n	80131f4 <cos+0x74>
 80131c8:	b9d8      	cbnz	r0, 8013202 <cos+0x82>
 80131ca:	ed9d 1b02 	vldr	d1, [sp, #8]
 80131ce:	ed9d 0b00 	vldr	d0, [sp]
 80131d2:	f000 f9a1 	bl	8013518 <__kernel_cos>
 80131d6:	ec51 0b10 	vmov	r0, r1, d0
 80131da:	e7e7      	b.n	80131ac <cos+0x2c>
 80131dc:	ed9d 1b02 	vldr	d1, [sp, #8]
 80131e0:	ed9d 0b00 	vldr	d0, [sp]
 80131e4:	f000 fa60 	bl	80136a8 <__kernel_sin>
 80131e8:	ec53 2b10 	vmov	r2, r3, d0
 80131ec:	4610      	mov	r0, r2
 80131ee:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80131f2:	e7db      	b.n	80131ac <cos+0x2c>
 80131f4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80131f8:	ed9d 0b00 	vldr	d0, [sp]
 80131fc:	f000 f98c 	bl	8013518 <__kernel_cos>
 8013200:	e7f2      	b.n	80131e8 <cos+0x68>
 8013202:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013206:	ed9d 0b00 	vldr	d0, [sp]
 801320a:	2001      	movs	r0, #1
 801320c:	f000 fa4c 	bl	80136a8 <__kernel_sin>
 8013210:	e7e1      	b.n	80131d6 <cos+0x56>
 8013212:	bf00      	nop
 8013214:	f3af 8000 	nop.w
	...
 8013220:	3fe921fb 	.word	0x3fe921fb
 8013224:	7fefffff 	.word	0x7fefffff

08013228 <sin>:
 8013228:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801322a:	ec53 2b10 	vmov	r2, r3, d0
 801322e:	4826      	ldr	r0, [pc, #152]	@ (80132c8 <sin+0xa0>)
 8013230:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8013234:	4281      	cmp	r1, r0
 8013236:	d807      	bhi.n	8013248 <sin+0x20>
 8013238:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 80132c0 <sin+0x98>
 801323c:	2000      	movs	r0, #0
 801323e:	b005      	add	sp, #20
 8013240:	f85d eb04 	ldr.w	lr, [sp], #4
 8013244:	f000 ba30 	b.w	80136a8 <__kernel_sin>
 8013248:	4820      	ldr	r0, [pc, #128]	@ (80132cc <sin+0xa4>)
 801324a:	4281      	cmp	r1, r0
 801324c:	d908      	bls.n	8013260 <sin+0x38>
 801324e:	4610      	mov	r0, r2
 8013250:	4619      	mov	r1, r3
 8013252:	f7ec ffe5 	bl	8000220 <__aeabi_dsub>
 8013256:	ec41 0b10 	vmov	d0, r0, r1
 801325a:	b005      	add	sp, #20
 801325c:	f85d fb04 	ldr.w	pc, [sp], #4
 8013260:	4668      	mov	r0, sp
 8013262:	f000 fadd 	bl	8013820 <__ieee754_rem_pio2>
 8013266:	f000 0003 	and.w	r0, r0, #3
 801326a:	2801      	cmp	r0, #1
 801326c:	d00c      	beq.n	8013288 <sin+0x60>
 801326e:	2802      	cmp	r0, #2
 8013270:	d011      	beq.n	8013296 <sin+0x6e>
 8013272:	b9e8      	cbnz	r0, 80132b0 <sin+0x88>
 8013274:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013278:	ed9d 0b00 	vldr	d0, [sp]
 801327c:	2001      	movs	r0, #1
 801327e:	f000 fa13 	bl	80136a8 <__kernel_sin>
 8013282:	ec51 0b10 	vmov	r0, r1, d0
 8013286:	e7e6      	b.n	8013256 <sin+0x2e>
 8013288:	ed9d 1b02 	vldr	d1, [sp, #8]
 801328c:	ed9d 0b00 	vldr	d0, [sp]
 8013290:	f000 f942 	bl	8013518 <__kernel_cos>
 8013294:	e7f5      	b.n	8013282 <sin+0x5a>
 8013296:	ed9d 1b02 	vldr	d1, [sp, #8]
 801329a:	ed9d 0b00 	vldr	d0, [sp]
 801329e:	2001      	movs	r0, #1
 80132a0:	f000 fa02 	bl	80136a8 <__kernel_sin>
 80132a4:	ec53 2b10 	vmov	r2, r3, d0
 80132a8:	4610      	mov	r0, r2
 80132aa:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80132ae:	e7d2      	b.n	8013256 <sin+0x2e>
 80132b0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80132b4:	ed9d 0b00 	vldr	d0, [sp]
 80132b8:	f000 f92e 	bl	8013518 <__kernel_cos>
 80132bc:	e7f2      	b.n	80132a4 <sin+0x7c>
 80132be:	bf00      	nop
	...
 80132c8:	3fe921fb 	.word	0x3fe921fb
 80132cc:	7fefffff 	.word	0x7fefffff

080132d0 <fmodf>:
 80132d0:	b508      	push	{r3, lr}
 80132d2:	ed2d 8b02 	vpush	{d8}
 80132d6:	eef0 8a40 	vmov.f32	s17, s0
 80132da:	eeb0 8a60 	vmov.f32	s16, s1
 80132de:	f000 fd43 	bl	8013d68 <__ieee754_fmodf>
 80132e2:	eef4 8a48 	vcmp.f32	s17, s16
 80132e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132ea:	d60c      	bvs.n	8013306 <fmodf+0x36>
 80132ec:	eddf 8a07 	vldr	s17, [pc, #28]	@ 801330c <fmodf+0x3c>
 80132f0:	eeb4 8a68 	vcmp.f32	s16, s17
 80132f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132f8:	d105      	bne.n	8013306 <fmodf+0x36>
 80132fa:	f7ff ff07 	bl	801310c <__errno>
 80132fe:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8013302:	2321      	movs	r3, #33	@ 0x21
 8013304:	6003      	str	r3, [r0, #0]
 8013306:	ecbd 8b02 	vpop	{d8}
 801330a:	bd08      	pop	{r3, pc}
 801330c:	00000000 	.word	0x00000000

08013310 <sqrtf>:
 8013310:	b508      	push	{r3, lr}
 8013312:	ed2d 8b02 	vpush	{d8}
 8013316:	eeb0 8a40 	vmov.f32	s16, s0
 801331a:	f000 f8f7 	bl	801350c <__ieee754_sqrtf>
 801331e:	eeb4 8a48 	vcmp.f32	s16, s16
 8013322:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013326:	d60c      	bvs.n	8013342 <sqrtf+0x32>
 8013328:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8013348 <sqrtf+0x38>
 801332c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8013330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013334:	d505      	bpl.n	8013342 <sqrtf+0x32>
 8013336:	f7ff fee9 	bl	801310c <__errno>
 801333a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 801333e:	2321      	movs	r3, #33	@ 0x21
 8013340:	6003      	str	r3, [r0, #0]
 8013342:	ecbd 8b02 	vpop	{d8}
 8013346:	bd08      	pop	{r3, pc}
 8013348:	00000000 	.word	0x00000000

0801334c <cosf>:
 801334c:	ee10 3a10 	vmov	r3, s0
 8013350:	b507      	push	{r0, r1, r2, lr}
 8013352:	4a1e      	ldr	r2, [pc, #120]	@ (80133cc <cosf+0x80>)
 8013354:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8013358:	4293      	cmp	r3, r2
 801335a:	d806      	bhi.n	801336a <cosf+0x1e>
 801335c:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 80133d0 <cosf+0x84>
 8013360:	b003      	add	sp, #12
 8013362:	f85d eb04 	ldr.w	lr, [sp], #4
 8013366:	f000 bc5f 	b.w	8013c28 <__kernel_cosf>
 801336a:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801336e:	d304      	bcc.n	801337a <cosf+0x2e>
 8013370:	ee30 0a40 	vsub.f32	s0, s0, s0
 8013374:	b003      	add	sp, #12
 8013376:	f85d fb04 	ldr.w	pc, [sp], #4
 801337a:	4668      	mov	r0, sp
 801337c:	f000 fd76 	bl	8013e6c <__ieee754_rem_pio2f>
 8013380:	f000 0003 	and.w	r0, r0, #3
 8013384:	2801      	cmp	r0, #1
 8013386:	d009      	beq.n	801339c <cosf+0x50>
 8013388:	2802      	cmp	r0, #2
 801338a:	d010      	beq.n	80133ae <cosf+0x62>
 801338c:	b9b0      	cbnz	r0, 80133bc <cosf+0x70>
 801338e:	eddd 0a01 	vldr	s1, [sp, #4]
 8013392:	ed9d 0a00 	vldr	s0, [sp]
 8013396:	f000 fc47 	bl	8013c28 <__kernel_cosf>
 801339a:	e7eb      	b.n	8013374 <cosf+0x28>
 801339c:	eddd 0a01 	vldr	s1, [sp, #4]
 80133a0:	ed9d 0a00 	vldr	s0, [sp]
 80133a4:	f000 fc98 	bl	8013cd8 <__kernel_sinf>
 80133a8:	eeb1 0a40 	vneg.f32	s0, s0
 80133ac:	e7e2      	b.n	8013374 <cosf+0x28>
 80133ae:	eddd 0a01 	vldr	s1, [sp, #4]
 80133b2:	ed9d 0a00 	vldr	s0, [sp]
 80133b6:	f000 fc37 	bl	8013c28 <__kernel_cosf>
 80133ba:	e7f5      	b.n	80133a8 <cosf+0x5c>
 80133bc:	eddd 0a01 	vldr	s1, [sp, #4]
 80133c0:	ed9d 0a00 	vldr	s0, [sp]
 80133c4:	2001      	movs	r0, #1
 80133c6:	f000 fc87 	bl	8013cd8 <__kernel_sinf>
 80133ca:	e7d3      	b.n	8013374 <cosf+0x28>
 80133cc:	3f490fd8 	.word	0x3f490fd8
 80133d0:	00000000 	.word	0x00000000

080133d4 <sinf>:
 80133d4:	ee10 3a10 	vmov	r3, s0
 80133d8:	b507      	push	{r0, r1, r2, lr}
 80133da:	4a1f      	ldr	r2, [pc, #124]	@ (8013458 <sinf+0x84>)
 80133dc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80133e0:	4293      	cmp	r3, r2
 80133e2:	d807      	bhi.n	80133f4 <sinf+0x20>
 80133e4:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 801345c <sinf+0x88>
 80133e8:	2000      	movs	r0, #0
 80133ea:	b003      	add	sp, #12
 80133ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80133f0:	f000 bc72 	b.w	8013cd8 <__kernel_sinf>
 80133f4:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80133f8:	d304      	bcc.n	8013404 <sinf+0x30>
 80133fa:	ee30 0a40 	vsub.f32	s0, s0, s0
 80133fe:	b003      	add	sp, #12
 8013400:	f85d fb04 	ldr.w	pc, [sp], #4
 8013404:	4668      	mov	r0, sp
 8013406:	f000 fd31 	bl	8013e6c <__ieee754_rem_pio2f>
 801340a:	f000 0003 	and.w	r0, r0, #3
 801340e:	2801      	cmp	r0, #1
 8013410:	d00a      	beq.n	8013428 <sinf+0x54>
 8013412:	2802      	cmp	r0, #2
 8013414:	d00f      	beq.n	8013436 <sinf+0x62>
 8013416:	b9c0      	cbnz	r0, 801344a <sinf+0x76>
 8013418:	eddd 0a01 	vldr	s1, [sp, #4]
 801341c:	ed9d 0a00 	vldr	s0, [sp]
 8013420:	2001      	movs	r0, #1
 8013422:	f000 fc59 	bl	8013cd8 <__kernel_sinf>
 8013426:	e7ea      	b.n	80133fe <sinf+0x2a>
 8013428:	eddd 0a01 	vldr	s1, [sp, #4]
 801342c:	ed9d 0a00 	vldr	s0, [sp]
 8013430:	f000 fbfa 	bl	8013c28 <__kernel_cosf>
 8013434:	e7e3      	b.n	80133fe <sinf+0x2a>
 8013436:	eddd 0a01 	vldr	s1, [sp, #4]
 801343a:	ed9d 0a00 	vldr	s0, [sp]
 801343e:	2001      	movs	r0, #1
 8013440:	f000 fc4a 	bl	8013cd8 <__kernel_sinf>
 8013444:	eeb1 0a40 	vneg.f32	s0, s0
 8013448:	e7d9      	b.n	80133fe <sinf+0x2a>
 801344a:	eddd 0a01 	vldr	s1, [sp, #4]
 801344e:	ed9d 0a00 	vldr	s0, [sp]
 8013452:	f000 fbe9 	bl	8013c28 <__kernel_cosf>
 8013456:	e7f5      	b.n	8013444 <sinf+0x70>
 8013458:	3f490fd8 	.word	0x3f490fd8
 801345c:	00000000 	.word	0x00000000

08013460 <fmaxf>:
 8013460:	b508      	push	{r3, lr}
 8013462:	ed2d 8b02 	vpush	{d8}
 8013466:	eeb0 8a40 	vmov.f32	s16, s0
 801346a:	eef0 8a60 	vmov.f32	s17, s1
 801346e:	f000 f831 	bl	80134d4 <__fpclassifyf>
 8013472:	b930      	cbnz	r0, 8013482 <fmaxf+0x22>
 8013474:	eeb0 8a68 	vmov.f32	s16, s17
 8013478:	eeb0 0a48 	vmov.f32	s0, s16
 801347c:	ecbd 8b02 	vpop	{d8}
 8013480:	bd08      	pop	{r3, pc}
 8013482:	eeb0 0a68 	vmov.f32	s0, s17
 8013486:	f000 f825 	bl	80134d4 <__fpclassifyf>
 801348a:	2800      	cmp	r0, #0
 801348c:	d0f4      	beq.n	8013478 <fmaxf+0x18>
 801348e:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8013492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013496:	dded      	ble.n	8013474 <fmaxf+0x14>
 8013498:	e7ee      	b.n	8013478 <fmaxf+0x18>

0801349a <fminf>:
 801349a:	b508      	push	{r3, lr}
 801349c:	ed2d 8b02 	vpush	{d8}
 80134a0:	eeb0 8a40 	vmov.f32	s16, s0
 80134a4:	eef0 8a60 	vmov.f32	s17, s1
 80134a8:	f000 f814 	bl	80134d4 <__fpclassifyf>
 80134ac:	b930      	cbnz	r0, 80134bc <fminf+0x22>
 80134ae:	eeb0 8a68 	vmov.f32	s16, s17
 80134b2:	eeb0 0a48 	vmov.f32	s0, s16
 80134b6:	ecbd 8b02 	vpop	{d8}
 80134ba:	bd08      	pop	{r3, pc}
 80134bc:	eeb0 0a68 	vmov.f32	s0, s17
 80134c0:	f000 f808 	bl	80134d4 <__fpclassifyf>
 80134c4:	2800      	cmp	r0, #0
 80134c6:	d0f4      	beq.n	80134b2 <fminf+0x18>
 80134c8:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80134cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80134d0:	d5ed      	bpl.n	80134ae <fminf+0x14>
 80134d2:	e7ee      	b.n	80134b2 <fminf+0x18>

080134d4 <__fpclassifyf>:
 80134d4:	ee10 3a10 	vmov	r3, s0
 80134d8:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 80134dc:	d00d      	beq.n	80134fa <__fpclassifyf+0x26>
 80134de:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 80134e2:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 80134e6:	d30a      	bcc.n	80134fe <__fpclassifyf+0x2a>
 80134e8:	4b07      	ldr	r3, [pc, #28]	@ (8013508 <__fpclassifyf+0x34>)
 80134ea:	1e42      	subs	r2, r0, #1
 80134ec:	429a      	cmp	r2, r3
 80134ee:	d908      	bls.n	8013502 <__fpclassifyf+0x2e>
 80134f0:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 80134f4:	4258      	negs	r0, r3
 80134f6:	4158      	adcs	r0, r3
 80134f8:	4770      	bx	lr
 80134fa:	2002      	movs	r0, #2
 80134fc:	4770      	bx	lr
 80134fe:	2004      	movs	r0, #4
 8013500:	4770      	bx	lr
 8013502:	2003      	movs	r0, #3
 8013504:	4770      	bx	lr
 8013506:	bf00      	nop
 8013508:	007ffffe 	.word	0x007ffffe

0801350c <__ieee754_sqrtf>:
 801350c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8013510:	4770      	bx	lr
 8013512:	0000      	movs	r0, r0
 8013514:	0000      	movs	r0, r0
	...

08013518 <__kernel_cos>:
 8013518:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801351c:	ec57 6b10 	vmov	r6, r7, d0
 8013520:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8013524:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8013528:	ed8d 1b00 	vstr	d1, [sp]
 801352c:	d206      	bcs.n	801353c <__kernel_cos+0x24>
 801352e:	4630      	mov	r0, r6
 8013530:	4639      	mov	r1, r7
 8013532:	f7ed fac7 	bl	8000ac4 <__aeabi_d2iz>
 8013536:	2800      	cmp	r0, #0
 8013538:	f000 8088 	beq.w	801364c <__kernel_cos+0x134>
 801353c:	4632      	mov	r2, r6
 801353e:	463b      	mov	r3, r7
 8013540:	4630      	mov	r0, r6
 8013542:	4639      	mov	r1, r7
 8013544:	f7ed f824 	bl	8000590 <__aeabi_dmul>
 8013548:	4b51      	ldr	r3, [pc, #324]	@ (8013690 <__kernel_cos+0x178>)
 801354a:	2200      	movs	r2, #0
 801354c:	4604      	mov	r4, r0
 801354e:	460d      	mov	r5, r1
 8013550:	f7ed f81e 	bl	8000590 <__aeabi_dmul>
 8013554:	a340      	add	r3, pc, #256	@ (adr r3, 8013658 <__kernel_cos+0x140>)
 8013556:	e9d3 2300 	ldrd	r2, r3, [r3]
 801355a:	4682      	mov	sl, r0
 801355c:	468b      	mov	fp, r1
 801355e:	4620      	mov	r0, r4
 8013560:	4629      	mov	r1, r5
 8013562:	f7ed f815 	bl	8000590 <__aeabi_dmul>
 8013566:	a33e      	add	r3, pc, #248	@ (adr r3, 8013660 <__kernel_cos+0x148>)
 8013568:	e9d3 2300 	ldrd	r2, r3, [r3]
 801356c:	f7ec fe5a 	bl	8000224 <__adddf3>
 8013570:	4622      	mov	r2, r4
 8013572:	462b      	mov	r3, r5
 8013574:	f7ed f80c 	bl	8000590 <__aeabi_dmul>
 8013578:	a33b      	add	r3, pc, #236	@ (adr r3, 8013668 <__kernel_cos+0x150>)
 801357a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801357e:	f7ec fe4f 	bl	8000220 <__aeabi_dsub>
 8013582:	4622      	mov	r2, r4
 8013584:	462b      	mov	r3, r5
 8013586:	f7ed f803 	bl	8000590 <__aeabi_dmul>
 801358a:	a339      	add	r3, pc, #228	@ (adr r3, 8013670 <__kernel_cos+0x158>)
 801358c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013590:	f7ec fe48 	bl	8000224 <__adddf3>
 8013594:	4622      	mov	r2, r4
 8013596:	462b      	mov	r3, r5
 8013598:	f7ec fffa 	bl	8000590 <__aeabi_dmul>
 801359c:	a336      	add	r3, pc, #216	@ (adr r3, 8013678 <__kernel_cos+0x160>)
 801359e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135a2:	f7ec fe3d 	bl	8000220 <__aeabi_dsub>
 80135a6:	4622      	mov	r2, r4
 80135a8:	462b      	mov	r3, r5
 80135aa:	f7ec fff1 	bl	8000590 <__aeabi_dmul>
 80135ae:	a334      	add	r3, pc, #208	@ (adr r3, 8013680 <__kernel_cos+0x168>)
 80135b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135b4:	f7ec fe36 	bl	8000224 <__adddf3>
 80135b8:	4622      	mov	r2, r4
 80135ba:	462b      	mov	r3, r5
 80135bc:	f7ec ffe8 	bl	8000590 <__aeabi_dmul>
 80135c0:	4622      	mov	r2, r4
 80135c2:	462b      	mov	r3, r5
 80135c4:	f7ec ffe4 	bl	8000590 <__aeabi_dmul>
 80135c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80135cc:	4604      	mov	r4, r0
 80135ce:	460d      	mov	r5, r1
 80135d0:	4630      	mov	r0, r6
 80135d2:	4639      	mov	r1, r7
 80135d4:	f7ec ffdc 	bl	8000590 <__aeabi_dmul>
 80135d8:	460b      	mov	r3, r1
 80135da:	4602      	mov	r2, r0
 80135dc:	4629      	mov	r1, r5
 80135de:	4620      	mov	r0, r4
 80135e0:	f7ec fe1e 	bl	8000220 <__aeabi_dsub>
 80135e4:	4b2b      	ldr	r3, [pc, #172]	@ (8013694 <__kernel_cos+0x17c>)
 80135e6:	4598      	cmp	r8, r3
 80135e8:	4606      	mov	r6, r0
 80135ea:	460f      	mov	r7, r1
 80135ec:	d810      	bhi.n	8013610 <__kernel_cos+0xf8>
 80135ee:	4602      	mov	r2, r0
 80135f0:	460b      	mov	r3, r1
 80135f2:	4650      	mov	r0, sl
 80135f4:	4659      	mov	r1, fp
 80135f6:	f7ec fe13 	bl	8000220 <__aeabi_dsub>
 80135fa:	460b      	mov	r3, r1
 80135fc:	4926      	ldr	r1, [pc, #152]	@ (8013698 <__kernel_cos+0x180>)
 80135fe:	4602      	mov	r2, r0
 8013600:	2000      	movs	r0, #0
 8013602:	f7ec fe0d 	bl	8000220 <__aeabi_dsub>
 8013606:	ec41 0b10 	vmov	d0, r0, r1
 801360a:	b003      	add	sp, #12
 801360c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013610:	4b22      	ldr	r3, [pc, #136]	@ (801369c <__kernel_cos+0x184>)
 8013612:	4921      	ldr	r1, [pc, #132]	@ (8013698 <__kernel_cos+0x180>)
 8013614:	4598      	cmp	r8, r3
 8013616:	bf8c      	ite	hi
 8013618:	4d21      	ldrhi	r5, [pc, #132]	@ (80136a0 <__kernel_cos+0x188>)
 801361a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 801361e:	2400      	movs	r4, #0
 8013620:	4622      	mov	r2, r4
 8013622:	462b      	mov	r3, r5
 8013624:	2000      	movs	r0, #0
 8013626:	f7ec fdfb 	bl	8000220 <__aeabi_dsub>
 801362a:	4622      	mov	r2, r4
 801362c:	4680      	mov	r8, r0
 801362e:	4689      	mov	r9, r1
 8013630:	462b      	mov	r3, r5
 8013632:	4650      	mov	r0, sl
 8013634:	4659      	mov	r1, fp
 8013636:	f7ec fdf3 	bl	8000220 <__aeabi_dsub>
 801363a:	4632      	mov	r2, r6
 801363c:	463b      	mov	r3, r7
 801363e:	f7ec fdef 	bl	8000220 <__aeabi_dsub>
 8013642:	4602      	mov	r2, r0
 8013644:	460b      	mov	r3, r1
 8013646:	4640      	mov	r0, r8
 8013648:	4649      	mov	r1, r9
 801364a:	e7da      	b.n	8013602 <__kernel_cos+0xea>
 801364c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8013688 <__kernel_cos+0x170>
 8013650:	e7db      	b.n	801360a <__kernel_cos+0xf2>
 8013652:	bf00      	nop
 8013654:	f3af 8000 	nop.w
 8013658:	be8838d4 	.word	0xbe8838d4
 801365c:	bda8fae9 	.word	0xbda8fae9
 8013660:	bdb4b1c4 	.word	0xbdb4b1c4
 8013664:	3e21ee9e 	.word	0x3e21ee9e
 8013668:	809c52ad 	.word	0x809c52ad
 801366c:	3e927e4f 	.word	0x3e927e4f
 8013670:	19cb1590 	.word	0x19cb1590
 8013674:	3efa01a0 	.word	0x3efa01a0
 8013678:	16c15177 	.word	0x16c15177
 801367c:	3f56c16c 	.word	0x3f56c16c
 8013680:	5555554c 	.word	0x5555554c
 8013684:	3fa55555 	.word	0x3fa55555
 8013688:	00000000 	.word	0x00000000
 801368c:	3ff00000 	.word	0x3ff00000
 8013690:	3fe00000 	.word	0x3fe00000
 8013694:	3fd33332 	.word	0x3fd33332
 8013698:	3ff00000 	.word	0x3ff00000
 801369c:	3fe90000 	.word	0x3fe90000
 80136a0:	3fd20000 	.word	0x3fd20000
 80136a4:	00000000 	.word	0x00000000

080136a8 <__kernel_sin>:
 80136a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80136ac:	ec55 4b10 	vmov	r4, r5, d0
 80136b0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80136b4:	b085      	sub	sp, #20
 80136b6:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 80136ba:	ed8d 1b02 	vstr	d1, [sp, #8]
 80136be:	4680      	mov	r8, r0
 80136c0:	d205      	bcs.n	80136ce <__kernel_sin+0x26>
 80136c2:	4620      	mov	r0, r4
 80136c4:	4629      	mov	r1, r5
 80136c6:	f7ed f9fd 	bl	8000ac4 <__aeabi_d2iz>
 80136ca:	2800      	cmp	r0, #0
 80136cc:	d052      	beq.n	8013774 <__kernel_sin+0xcc>
 80136ce:	4622      	mov	r2, r4
 80136d0:	462b      	mov	r3, r5
 80136d2:	4620      	mov	r0, r4
 80136d4:	4629      	mov	r1, r5
 80136d6:	f7ec ff5b 	bl	8000590 <__aeabi_dmul>
 80136da:	4682      	mov	sl, r0
 80136dc:	468b      	mov	fp, r1
 80136de:	4602      	mov	r2, r0
 80136e0:	460b      	mov	r3, r1
 80136e2:	4620      	mov	r0, r4
 80136e4:	4629      	mov	r1, r5
 80136e6:	f7ec ff53 	bl	8000590 <__aeabi_dmul>
 80136ea:	a342      	add	r3, pc, #264	@ (adr r3, 80137f4 <__kernel_sin+0x14c>)
 80136ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136f0:	e9cd 0100 	strd	r0, r1, [sp]
 80136f4:	4650      	mov	r0, sl
 80136f6:	4659      	mov	r1, fp
 80136f8:	f7ec ff4a 	bl	8000590 <__aeabi_dmul>
 80136fc:	a33f      	add	r3, pc, #252	@ (adr r3, 80137fc <__kernel_sin+0x154>)
 80136fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013702:	f7ec fd8d 	bl	8000220 <__aeabi_dsub>
 8013706:	4652      	mov	r2, sl
 8013708:	465b      	mov	r3, fp
 801370a:	f7ec ff41 	bl	8000590 <__aeabi_dmul>
 801370e:	a33d      	add	r3, pc, #244	@ (adr r3, 8013804 <__kernel_sin+0x15c>)
 8013710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013714:	f7ec fd86 	bl	8000224 <__adddf3>
 8013718:	4652      	mov	r2, sl
 801371a:	465b      	mov	r3, fp
 801371c:	f7ec ff38 	bl	8000590 <__aeabi_dmul>
 8013720:	a33a      	add	r3, pc, #232	@ (adr r3, 801380c <__kernel_sin+0x164>)
 8013722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013726:	f7ec fd7b 	bl	8000220 <__aeabi_dsub>
 801372a:	4652      	mov	r2, sl
 801372c:	465b      	mov	r3, fp
 801372e:	f7ec ff2f 	bl	8000590 <__aeabi_dmul>
 8013732:	a338      	add	r3, pc, #224	@ (adr r3, 8013814 <__kernel_sin+0x16c>)
 8013734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013738:	f7ec fd74 	bl	8000224 <__adddf3>
 801373c:	4606      	mov	r6, r0
 801373e:	460f      	mov	r7, r1
 8013740:	f1b8 0f00 	cmp.w	r8, #0
 8013744:	d11b      	bne.n	801377e <__kernel_sin+0xd6>
 8013746:	4602      	mov	r2, r0
 8013748:	460b      	mov	r3, r1
 801374a:	4650      	mov	r0, sl
 801374c:	4659      	mov	r1, fp
 801374e:	f7ec ff1f 	bl	8000590 <__aeabi_dmul>
 8013752:	a325      	add	r3, pc, #148	@ (adr r3, 80137e8 <__kernel_sin+0x140>)
 8013754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013758:	f7ec fd62 	bl	8000220 <__aeabi_dsub>
 801375c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013760:	f7ec ff16 	bl	8000590 <__aeabi_dmul>
 8013764:	4602      	mov	r2, r0
 8013766:	460b      	mov	r3, r1
 8013768:	4620      	mov	r0, r4
 801376a:	4629      	mov	r1, r5
 801376c:	f7ec fd5a 	bl	8000224 <__adddf3>
 8013770:	4604      	mov	r4, r0
 8013772:	460d      	mov	r5, r1
 8013774:	ec45 4b10 	vmov	d0, r4, r5
 8013778:	b005      	add	sp, #20
 801377a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801377e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013782:	4b1b      	ldr	r3, [pc, #108]	@ (80137f0 <__kernel_sin+0x148>)
 8013784:	2200      	movs	r2, #0
 8013786:	f7ec ff03 	bl	8000590 <__aeabi_dmul>
 801378a:	4632      	mov	r2, r6
 801378c:	4680      	mov	r8, r0
 801378e:	4689      	mov	r9, r1
 8013790:	463b      	mov	r3, r7
 8013792:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013796:	f7ec fefb 	bl	8000590 <__aeabi_dmul>
 801379a:	4602      	mov	r2, r0
 801379c:	460b      	mov	r3, r1
 801379e:	4640      	mov	r0, r8
 80137a0:	4649      	mov	r1, r9
 80137a2:	f7ec fd3d 	bl	8000220 <__aeabi_dsub>
 80137a6:	4652      	mov	r2, sl
 80137a8:	465b      	mov	r3, fp
 80137aa:	f7ec fef1 	bl	8000590 <__aeabi_dmul>
 80137ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80137b2:	f7ec fd35 	bl	8000220 <__aeabi_dsub>
 80137b6:	a30c      	add	r3, pc, #48	@ (adr r3, 80137e8 <__kernel_sin+0x140>)
 80137b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137bc:	4606      	mov	r6, r0
 80137be:	460f      	mov	r7, r1
 80137c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80137c4:	f7ec fee4 	bl	8000590 <__aeabi_dmul>
 80137c8:	4602      	mov	r2, r0
 80137ca:	460b      	mov	r3, r1
 80137cc:	4630      	mov	r0, r6
 80137ce:	4639      	mov	r1, r7
 80137d0:	f7ec fd28 	bl	8000224 <__adddf3>
 80137d4:	4602      	mov	r2, r0
 80137d6:	460b      	mov	r3, r1
 80137d8:	4620      	mov	r0, r4
 80137da:	4629      	mov	r1, r5
 80137dc:	f7ec fd20 	bl	8000220 <__aeabi_dsub>
 80137e0:	e7c6      	b.n	8013770 <__kernel_sin+0xc8>
 80137e2:	bf00      	nop
 80137e4:	f3af 8000 	nop.w
 80137e8:	55555549 	.word	0x55555549
 80137ec:	3fc55555 	.word	0x3fc55555
 80137f0:	3fe00000 	.word	0x3fe00000
 80137f4:	5acfd57c 	.word	0x5acfd57c
 80137f8:	3de5d93a 	.word	0x3de5d93a
 80137fc:	8a2b9ceb 	.word	0x8a2b9ceb
 8013800:	3e5ae5e6 	.word	0x3e5ae5e6
 8013804:	57b1fe7d 	.word	0x57b1fe7d
 8013808:	3ec71de3 	.word	0x3ec71de3
 801380c:	19c161d5 	.word	0x19c161d5
 8013810:	3f2a01a0 	.word	0x3f2a01a0
 8013814:	1110f8a6 	.word	0x1110f8a6
 8013818:	3f811111 	.word	0x3f811111
 801381c:	00000000 	.word	0x00000000

08013820 <__ieee754_rem_pio2>:
 8013820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013824:	ec57 6b10 	vmov	r6, r7, d0
 8013828:	4bc5      	ldr	r3, [pc, #788]	@ (8013b40 <__ieee754_rem_pio2+0x320>)
 801382a:	b08d      	sub	sp, #52	@ 0x34
 801382c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8013830:	4598      	cmp	r8, r3
 8013832:	4604      	mov	r4, r0
 8013834:	9704      	str	r7, [sp, #16]
 8013836:	d807      	bhi.n	8013848 <__ieee754_rem_pio2+0x28>
 8013838:	2200      	movs	r2, #0
 801383a:	2300      	movs	r3, #0
 801383c:	ed80 0b00 	vstr	d0, [r0]
 8013840:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8013844:	2500      	movs	r5, #0
 8013846:	e028      	b.n	801389a <__ieee754_rem_pio2+0x7a>
 8013848:	4bbe      	ldr	r3, [pc, #760]	@ (8013b44 <__ieee754_rem_pio2+0x324>)
 801384a:	4598      	cmp	r8, r3
 801384c:	d878      	bhi.n	8013940 <__ieee754_rem_pio2+0x120>
 801384e:	9b04      	ldr	r3, [sp, #16]
 8013850:	4dbd      	ldr	r5, [pc, #756]	@ (8013b48 <__ieee754_rem_pio2+0x328>)
 8013852:	2b00      	cmp	r3, #0
 8013854:	4630      	mov	r0, r6
 8013856:	a3ac      	add	r3, pc, #688	@ (adr r3, 8013b08 <__ieee754_rem_pio2+0x2e8>)
 8013858:	e9d3 2300 	ldrd	r2, r3, [r3]
 801385c:	4639      	mov	r1, r7
 801385e:	dd38      	ble.n	80138d2 <__ieee754_rem_pio2+0xb2>
 8013860:	f7ec fcde 	bl	8000220 <__aeabi_dsub>
 8013864:	45a8      	cmp	r8, r5
 8013866:	4606      	mov	r6, r0
 8013868:	460f      	mov	r7, r1
 801386a:	d01a      	beq.n	80138a2 <__ieee754_rem_pio2+0x82>
 801386c:	a3a8      	add	r3, pc, #672	@ (adr r3, 8013b10 <__ieee754_rem_pio2+0x2f0>)
 801386e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013872:	f7ec fcd5 	bl	8000220 <__aeabi_dsub>
 8013876:	4602      	mov	r2, r0
 8013878:	460b      	mov	r3, r1
 801387a:	4680      	mov	r8, r0
 801387c:	4689      	mov	r9, r1
 801387e:	4630      	mov	r0, r6
 8013880:	4639      	mov	r1, r7
 8013882:	f7ec fccd 	bl	8000220 <__aeabi_dsub>
 8013886:	a3a2      	add	r3, pc, #648	@ (adr r3, 8013b10 <__ieee754_rem_pio2+0x2f0>)
 8013888:	e9d3 2300 	ldrd	r2, r3, [r3]
 801388c:	f7ec fcc8 	bl	8000220 <__aeabi_dsub>
 8013890:	e9c4 8900 	strd	r8, r9, [r4]
 8013894:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8013898:	2501      	movs	r5, #1
 801389a:	4628      	mov	r0, r5
 801389c:	b00d      	add	sp, #52	@ 0x34
 801389e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80138a2:	a39d      	add	r3, pc, #628	@ (adr r3, 8013b18 <__ieee754_rem_pio2+0x2f8>)
 80138a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138a8:	f7ec fcba 	bl	8000220 <__aeabi_dsub>
 80138ac:	a39c      	add	r3, pc, #624	@ (adr r3, 8013b20 <__ieee754_rem_pio2+0x300>)
 80138ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138b2:	4606      	mov	r6, r0
 80138b4:	460f      	mov	r7, r1
 80138b6:	f7ec fcb3 	bl	8000220 <__aeabi_dsub>
 80138ba:	4602      	mov	r2, r0
 80138bc:	460b      	mov	r3, r1
 80138be:	4680      	mov	r8, r0
 80138c0:	4689      	mov	r9, r1
 80138c2:	4630      	mov	r0, r6
 80138c4:	4639      	mov	r1, r7
 80138c6:	f7ec fcab 	bl	8000220 <__aeabi_dsub>
 80138ca:	a395      	add	r3, pc, #596	@ (adr r3, 8013b20 <__ieee754_rem_pio2+0x300>)
 80138cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138d0:	e7dc      	b.n	801388c <__ieee754_rem_pio2+0x6c>
 80138d2:	f7ec fca7 	bl	8000224 <__adddf3>
 80138d6:	45a8      	cmp	r8, r5
 80138d8:	4606      	mov	r6, r0
 80138da:	460f      	mov	r7, r1
 80138dc:	d018      	beq.n	8013910 <__ieee754_rem_pio2+0xf0>
 80138de:	a38c      	add	r3, pc, #560	@ (adr r3, 8013b10 <__ieee754_rem_pio2+0x2f0>)
 80138e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138e4:	f7ec fc9e 	bl	8000224 <__adddf3>
 80138e8:	4602      	mov	r2, r0
 80138ea:	460b      	mov	r3, r1
 80138ec:	4680      	mov	r8, r0
 80138ee:	4689      	mov	r9, r1
 80138f0:	4630      	mov	r0, r6
 80138f2:	4639      	mov	r1, r7
 80138f4:	f7ec fc94 	bl	8000220 <__aeabi_dsub>
 80138f8:	a385      	add	r3, pc, #532	@ (adr r3, 8013b10 <__ieee754_rem_pio2+0x2f0>)
 80138fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138fe:	f7ec fc91 	bl	8000224 <__adddf3>
 8013902:	f04f 35ff 	mov.w	r5, #4294967295
 8013906:	e9c4 8900 	strd	r8, r9, [r4]
 801390a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801390e:	e7c4      	b.n	801389a <__ieee754_rem_pio2+0x7a>
 8013910:	a381      	add	r3, pc, #516	@ (adr r3, 8013b18 <__ieee754_rem_pio2+0x2f8>)
 8013912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013916:	f7ec fc85 	bl	8000224 <__adddf3>
 801391a:	a381      	add	r3, pc, #516	@ (adr r3, 8013b20 <__ieee754_rem_pio2+0x300>)
 801391c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013920:	4606      	mov	r6, r0
 8013922:	460f      	mov	r7, r1
 8013924:	f7ec fc7e 	bl	8000224 <__adddf3>
 8013928:	4602      	mov	r2, r0
 801392a:	460b      	mov	r3, r1
 801392c:	4680      	mov	r8, r0
 801392e:	4689      	mov	r9, r1
 8013930:	4630      	mov	r0, r6
 8013932:	4639      	mov	r1, r7
 8013934:	f7ec fc74 	bl	8000220 <__aeabi_dsub>
 8013938:	a379      	add	r3, pc, #484	@ (adr r3, 8013b20 <__ieee754_rem_pio2+0x300>)
 801393a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801393e:	e7de      	b.n	80138fe <__ieee754_rem_pio2+0xde>
 8013940:	4b82      	ldr	r3, [pc, #520]	@ (8013b4c <__ieee754_rem_pio2+0x32c>)
 8013942:	4598      	cmp	r8, r3
 8013944:	f200 80d1 	bhi.w	8013aea <__ieee754_rem_pio2+0x2ca>
 8013948:	f000 f966 	bl	8013c18 <fabs>
 801394c:	ec57 6b10 	vmov	r6, r7, d0
 8013950:	a375      	add	r3, pc, #468	@ (adr r3, 8013b28 <__ieee754_rem_pio2+0x308>)
 8013952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013956:	4630      	mov	r0, r6
 8013958:	4639      	mov	r1, r7
 801395a:	f7ec fe19 	bl	8000590 <__aeabi_dmul>
 801395e:	4b7c      	ldr	r3, [pc, #496]	@ (8013b50 <__ieee754_rem_pio2+0x330>)
 8013960:	2200      	movs	r2, #0
 8013962:	f7ec fc5f 	bl	8000224 <__adddf3>
 8013966:	f7ed f8ad 	bl	8000ac4 <__aeabi_d2iz>
 801396a:	4605      	mov	r5, r0
 801396c:	f7ec fda6 	bl	80004bc <__aeabi_i2d>
 8013970:	4602      	mov	r2, r0
 8013972:	460b      	mov	r3, r1
 8013974:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8013978:	a363      	add	r3, pc, #396	@ (adr r3, 8013b08 <__ieee754_rem_pio2+0x2e8>)
 801397a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801397e:	f7ec fe07 	bl	8000590 <__aeabi_dmul>
 8013982:	4602      	mov	r2, r0
 8013984:	460b      	mov	r3, r1
 8013986:	4630      	mov	r0, r6
 8013988:	4639      	mov	r1, r7
 801398a:	f7ec fc49 	bl	8000220 <__aeabi_dsub>
 801398e:	a360      	add	r3, pc, #384	@ (adr r3, 8013b10 <__ieee754_rem_pio2+0x2f0>)
 8013990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013994:	4682      	mov	sl, r0
 8013996:	468b      	mov	fp, r1
 8013998:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801399c:	f7ec fdf8 	bl	8000590 <__aeabi_dmul>
 80139a0:	2d1f      	cmp	r5, #31
 80139a2:	4606      	mov	r6, r0
 80139a4:	460f      	mov	r7, r1
 80139a6:	dc0c      	bgt.n	80139c2 <__ieee754_rem_pio2+0x1a2>
 80139a8:	4b6a      	ldr	r3, [pc, #424]	@ (8013b54 <__ieee754_rem_pio2+0x334>)
 80139aa:	1e6a      	subs	r2, r5, #1
 80139ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80139b0:	4543      	cmp	r3, r8
 80139b2:	d006      	beq.n	80139c2 <__ieee754_rem_pio2+0x1a2>
 80139b4:	4632      	mov	r2, r6
 80139b6:	463b      	mov	r3, r7
 80139b8:	4650      	mov	r0, sl
 80139ba:	4659      	mov	r1, fp
 80139bc:	f7ec fc30 	bl	8000220 <__aeabi_dsub>
 80139c0:	e00e      	b.n	80139e0 <__ieee754_rem_pio2+0x1c0>
 80139c2:	463b      	mov	r3, r7
 80139c4:	4632      	mov	r2, r6
 80139c6:	4650      	mov	r0, sl
 80139c8:	4659      	mov	r1, fp
 80139ca:	f7ec fc29 	bl	8000220 <__aeabi_dsub>
 80139ce:	ea4f 5328 	mov.w	r3, r8, asr #20
 80139d2:	9305      	str	r3, [sp, #20]
 80139d4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80139d8:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 80139dc:	2b10      	cmp	r3, #16
 80139de:	dc02      	bgt.n	80139e6 <__ieee754_rem_pio2+0x1c6>
 80139e0:	e9c4 0100 	strd	r0, r1, [r4]
 80139e4:	e039      	b.n	8013a5a <__ieee754_rem_pio2+0x23a>
 80139e6:	a34c      	add	r3, pc, #304	@ (adr r3, 8013b18 <__ieee754_rem_pio2+0x2f8>)
 80139e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80139f0:	f7ec fdce 	bl	8000590 <__aeabi_dmul>
 80139f4:	4606      	mov	r6, r0
 80139f6:	460f      	mov	r7, r1
 80139f8:	4602      	mov	r2, r0
 80139fa:	460b      	mov	r3, r1
 80139fc:	4650      	mov	r0, sl
 80139fe:	4659      	mov	r1, fp
 8013a00:	f7ec fc0e 	bl	8000220 <__aeabi_dsub>
 8013a04:	4602      	mov	r2, r0
 8013a06:	460b      	mov	r3, r1
 8013a08:	4680      	mov	r8, r0
 8013a0a:	4689      	mov	r9, r1
 8013a0c:	4650      	mov	r0, sl
 8013a0e:	4659      	mov	r1, fp
 8013a10:	f7ec fc06 	bl	8000220 <__aeabi_dsub>
 8013a14:	4632      	mov	r2, r6
 8013a16:	463b      	mov	r3, r7
 8013a18:	f7ec fc02 	bl	8000220 <__aeabi_dsub>
 8013a1c:	a340      	add	r3, pc, #256	@ (adr r3, 8013b20 <__ieee754_rem_pio2+0x300>)
 8013a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a22:	4606      	mov	r6, r0
 8013a24:	460f      	mov	r7, r1
 8013a26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013a2a:	f7ec fdb1 	bl	8000590 <__aeabi_dmul>
 8013a2e:	4632      	mov	r2, r6
 8013a30:	463b      	mov	r3, r7
 8013a32:	f7ec fbf5 	bl	8000220 <__aeabi_dsub>
 8013a36:	4602      	mov	r2, r0
 8013a38:	460b      	mov	r3, r1
 8013a3a:	4606      	mov	r6, r0
 8013a3c:	460f      	mov	r7, r1
 8013a3e:	4640      	mov	r0, r8
 8013a40:	4649      	mov	r1, r9
 8013a42:	f7ec fbed 	bl	8000220 <__aeabi_dsub>
 8013a46:	9a05      	ldr	r2, [sp, #20]
 8013a48:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8013a4c:	1ad3      	subs	r3, r2, r3
 8013a4e:	2b31      	cmp	r3, #49	@ 0x31
 8013a50:	dc20      	bgt.n	8013a94 <__ieee754_rem_pio2+0x274>
 8013a52:	e9c4 0100 	strd	r0, r1, [r4]
 8013a56:	46c2      	mov	sl, r8
 8013a58:	46cb      	mov	fp, r9
 8013a5a:	e9d4 8900 	ldrd	r8, r9, [r4]
 8013a5e:	4650      	mov	r0, sl
 8013a60:	4642      	mov	r2, r8
 8013a62:	464b      	mov	r3, r9
 8013a64:	4659      	mov	r1, fp
 8013a66:	f7ec fbdb 	bl	8000220 <__aeabi_dsub>
 8013a6a:	463b      	mov	r3, r7
 8013a6c:	4632      	mov	r2, r6
 8013a6e:	f7ec fbd7 	bl	8000220 <__aeabi_dsub>
 8013a72:	9b04      	ldr	r3, [sp, #16]
 8013a74:	2b00      	cmp	r3, #0
 8013a76:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8013a7a:	f6bf af0e 	bge.w	801389a <__ieee754_rem_pio2+0x7a>
 8013a7e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8013a82:	6063      	str	r3, [r4, #4]
 8013a84:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013a88:	f8c4 8000 	str.w	r8, [r4]
 8013a8c:	60a0      	str	r0, [r4, #8]
 8013a8e:	60e3      	str	r3, [r4, #12]
 8013a90:	426d      	negs	r5, r5
 8013a92:	e702      	b.n	801389a <__ieee754_rem_pio2+0x7a>
 8013a94:	a326      	add	r3, pc, #152	@ (adr r3, 8013b30 <__ieee754_rem_pio2+0x310>)
 8013a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013a9e:	f7ec fd77 	bl	8000590 <__aeabi_dmul>
 8013aa2:	4606      	mov	r6, r0
 8013aa4:	460f      	mov	r7, r1
 8013aa6:	4602      	mov	r2, r0
 8013aa8:	460b      	mov	r3, r1
 8013aaa:	4640      	mov	r0, r8
 8013aac:	4649      	mov	r1, r9
 8013aae:	f7ec fbb7 	bl	8000220 <__aeabi_dsub>
 8013ab2:	4602      	mov	r2, r0
 8013ab4:	460b      	mov	r3, r1
 8013ab6:	4682      	mov	sl, r0
 8013ab8:	468b      	mov	fp, r1
 8013aba:	4640      	mov	r0, r8
 8013abc:	4649      	mov	r1, r9
 8013abe:	f7ec fbaf 	bl	8000220 <__aeabi_dsub>
 8013ac2:	4632      	mov	r2, r6
 8013ac4:	463b      	mov	r3, r7
 8013ac6:	f7ec fbab 	bl	8000220 <__aeabi_dsub>
 8013aca:	a31b      	add	r3, pc, #108	@ (adr r3, 8013b38 <__ieee754_rem_pio2+0x318>)
 8013acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ad0:	4606      	mov	r6, r0
 8013ad2:	460f      	mov	r7, r1
 8013ad4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013ad8:	f7ec fd5a 	bl	8000590 <__aeabi_dmul>
 8013adc:	4632      	mov	r2, r6
 8013ade:	463b      	mov	r3, r7
 8013ae0:	f7ec fb9e 	bl	8000220 <__aeabi_dsub>
 8013ae4:	4606      	mov	r6, r0
 8013ae6:	460f      	mov	r7, r1
 8013ae8:	e764      	b.n	80139b4 <__ieee754_rem_pio2+0x194>
 8013aea:	4b1b      	ldr	r3, [pc, #108]	@ (8013b58 <__ieee754_rem_pio2+0x338>)
 8013aec:	4598      	cmp	r8, r3
 8013aee:	d935      	bls.n	8013b5c <__ieee754_rem_pio2+0x33c>
 8013af0:	4632      	mov	r2, r6
 8013af2:	463b      	mov	r3, r7
 8013af4:	4630      	mov	r0, r6
 8013af6:	4639      	mov	r1, r7
 8013af8:	f7ec fb92 	bl	8000220 <__aeabi_dsub>
 8013afc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8013b00:	e9c4 0100 	strd	r0, r1, [r4]
 8013b04:	e69e      	b.n	8013844 <__ieee754_rem_pio2+0x24>
 8013b06:	bf00      	nop
 8013b08:	54400000 	.word	0x54400000
 8013b0c:	3ff921fb 	.word	0x3ff921fb
 8013b10:	1a626331 	.word	0x1a626331
 8013b14:	3dd0b461 	.word	0x3dd0b461
 8013b18:	1a600000 	.word	0x1a600000
 8013b1c:	3dd0b461 	.word	0x3dd0b461
 8013b20:	2e037073 	.word	0x2e037073
 8013b24:	3ba3198a 	.word	0x3ba3198a
 8013b28:	6dc9c883 	.word	0x6dc9c883
 8013b2c:	3fe45f30 	.word	0x3fe45f30
 8013b30:	2e000000 	.word	0x2e000000
 8013b34:	3ba3198a 	.word	0x3ba3198a
 8013b38:	252049c1 	.word	0x252049c1
 8013b3c:	397b839a 	.word	0x397b839a
 8013b40:	3fe921fb 	.word	0x3fe921fb
 8013b44:	4002d97b 	.word	0x4002d97b
 8013b48:	3ff921fb 	.word	0x3ff921fb
 8013b4c:	413921fb 	.word	0x413921fb
 8013b50:	3fe00000 	.word	0x3fe00000
 8013b54:	08015048 	.word	0x08015048
 8013b58:	7fefffff 	.word	0x7fefffff
 8013b5c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8013b60:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8013b64:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8013b68:	4630      	mov	r0, r6
 8013b6a:	460f      	mov	r7, r1
 8013b6c:	f7ec ffaa 	bl	8000ac4 <__aeabi_d2iz>
 8013b70:	f7ec fca4 	bl	80004bc <__aeabi_i2d>
 8013b74:	4602      	mov	r2, r0
 8013b76:	460b      	mov	r3, r1
 8013b78:	4630      	mov	r0, r6
 8013b7a:	4639      	mov	r1, r7
 8013b7c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8013b80:	f7ec fb4e 	bl	8000220 <__aeabi_dsub>
 8013b84:	4b22      	ldr	r3, [pc, #136]	@ (8013c10 <__ieee754_rem_pio2+0x3f0>)
 8013b86:	2200      	movs	r2, #0
 8013b88:	f7ec fd02 	bl	8000590 <__aeabi_dmul>
 8013b8c:	460f      	mov	r7, r1
 8013b8e:	4606      	mov	r6, r0
 8013b90:	f7ec ff98 	bl	8000ac4 <__aeabi_d2iz>
 8013b94:	f7ec fc92 	bl	80004bc <__aeabi_i2d>
 8013b98:	4602      	mov	r2, r0
 8013b9a:	460b      	mov	r3, r1
 8013b9c:	4630      	mov	r0, r6
 8013b9e:	4639      	mov	r1, r7
 8013ba0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8013ba4:	f7ec fb3c 	bl	8000220 <__aeabi_dsub>
 8013ba8:	4b19      	ldr	r3, [pc, #100]	@ (8013c10 <__ieee754_rem_pio2+0x3f0>)
 8013baa:	2200      	movs	r2, #0
 8013bac:	f7ec fcf0 	bl	8000590 <__aeabi_dmul>
 8013bb0:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8013bb4:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8013bb8:	f04f 0803 	mov.w	r8, #3
 8013bbc:	2600      	movs	r6, #0
 8013bbe:	2700      	movs	r7, #0
 8013bc0:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8013bc4:	4632      	mov	r2, r6
 8013bc6:	463b      	mov	r3, r7
 8013bc8:	46c2      	mov	sl, r8
 8013bca:	f108 38ff 	add.w	r8, r8, #4294967295
 8013bce:	f7ec ff47 	bl	8000a60 <__aeabi_dcmpeq>
 8013bd2:	2800      	cmp	r0, #0
 8013bd4:	d1f4      	bne.n	8013bc0 <__ieee754_rem_pio2+0x3a0>
 8013bd6:	4b0f      	ldr	r3, [pc, #60]	@ (8013c14 <__ieee754_rem_pio2+0x3f4>)
 8013bd8:	9301      	str	r3, [sp, #4]
 8013bda:	2302      	movs	r3, #2
 8013bdc:	9300      	str	r3, [sp, #0]
 8013bde:	462a      	mov	r2, r5
 8013be0:	4653      	mov	r3, sl
 8013be2:	4621      	mov	r1, r4
 8013be4:	a806      	add	r0, sp, #24
 8013be6:	f000 fb5b 	bl	80142a0 <__kernel_rem_pio2>
 8013bea:	9b04      	ldr	r3, [sp, #16]
 8013bec:	2b00      	cmp	r3, #0
 8013bee:	4605      	mov	r5, r0
 8013bf0:	f6bf ae53 	bge.w	801389a <__ieee754_rem_pio2+0x7a>
 8013bf4:	e9d4 2100 	ldrd	r2, r1, [r4]
 8013bf8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013bfc:	e9c4 2300 	strd	r2, r3, [r4]
 8013c00:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8013c04:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013c08:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8013c0c:	e740      	b.n	8013a90 <__ieee754_rem_pio2+0x270>
 8013c0e:	bf00      	nop
 8013c10:	41700000 	.word	0x41700000
 8013c14:	080150c8 	.word	0x080150c8

08013c18 <fabs>:
 8013c18:	ec51 0b10 	vmov	r0, r1, d0
 8013c1c:	4602      	mov	r2, r0
 8013c1e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8013c22:	ec43 2b10 	vmov	d0, r2, r3
 8013c26:	4770      	bx	lr

08013c28 <__kernel_cosf>:
 8013c28:	ee10 3a10 	vmov	r3, s0
 8013c2c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8013c30:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8013c34:	eef0 6a40 	vmov.f32	s13, s0
 8013c38:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8013c3c:	d204      	bcs.n	8013c48 <__kernel_cosf+0x20>
 8013c3e:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8013c42:	ee17 2a90 	vmov	r2, s15
 8013c46:	b342      	cbz	r2, 8013c9a <__kernel_cosf+0x72>
 8013c48:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8013c4c:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8013cb8 <__kernel_cosf+0x90>
 8013c50:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8013cbc <__kernel_cosf+0x94>
 8013c54:	4a1a      	ldr	r2, [pc, #104]	@ (8013cc0 <__kernel_cosf+0x98>)
 8013c56:	eea7 6a27 	vfma.f32	s12, s14, s15
 8013c5a:	4293      	cmp	r3, r2
 8013c5c:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8013cc4 <__kernel_cosf+0x9c>
 8013c60:	eee6 7a07 	vfma.f32	s15, s12, s14
 8013c64:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8013cc8 <__kernel_cosf+0xa0>
 8013c68:	eea7 6a87 	vfma.f32	s12, s15, s14
 8013c6c:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8013ccc <__kernel_cosf+0xa4>
 8013c70:	eee6 7a07 	vfma.f32	s15, s12, s14
 8013c74:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8013cd0 <__kernel_cosf+0xa8>
 8013c78:	eea7 6a87 	vfma.f32	s12, s15, s14
 8013c7c:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8013c80:	ee26 6a07 	vmul.f32	s12, s12, s14
 8013c84:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8013c88:	eee7 0a06 	vfma.f32	s1, s14, s12
 8013c8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013c90:	d804      	bhi.n	8013c9c <__kernel_cosf+0x74>
 8013c92:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8013c96:	ee30 0a67 	vsub.f32	s0, s0, s15
 8013c9a:	4770      	bx	lr
 8013c9c:	4a0d      	ldr	r2, [pc, #52]	@ (8013cd4 <__kernel_cosf+0xac>)
 8013c9e:	4293      	cmp	r3, r2
 8013ca0:	bf9a      	itte	ls
 8013ca2:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 8013ca6:	ee07 3a10 	vmovls	s14, r3
 8013caa:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 8013cae:	ee30 0a47 	vsub.f32	s0, s0, s14
 8013cb2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013cb6:	e7ec      	b.n	8013c92 <__kernel_cosf+0x6a>
 8013cb8:	ad47d74e 	.word	0xad47d74e
 8013cbc:	310f74f6 	.word	0x310f74f6
 8013cc0:	3e999999 	.word	0x3e999999
 8013cc4:	b493f27c 	.word	0xb493f27c
 8013cc8:	37d00d01 	.word	0x37d00d01
 8013ccc:	bab60b61 	.word	0xbab60b61
 8013cd0:	3d2aaaab 	.word	0x3d2aaaab
 8013cd4:	3f480000 	.word	0x3f480000

08013cd8 <__kernel_sinf>:
 8013cd8:	ee10 3a10 	vmov	r3, s0
 8013cdc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8013ce0:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8013ce4:	d204      	bcs.n	8013cf0 <__kernel_sinf+0x18>
 8013ce6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8013cea:	ee17 3a90 	vmov	r3, s15
 8013cee:	b35b      	cbz	r3, 8013d48 <__kernel_sinf+0x70>
 8013cf0:	ee20 7a00 	vmul.f32	s14, s0, s0
 8013cf4:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8013d4c <__kernel_sinf+0x74>
 8013cf8:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8013d50 <__kernel_sinf+0x78>
 8013cfc:	eea7 6a27 	vfma.f32	s12, s14, s15
 8013d00:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8013d54 <__kernel_sinf+0x7c>
 8013d04:	eee6 7a07 	vfma.f32	s15, s12, s14
 8013d08:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8013d58 <__kernel_sinf+0x80>
 8013d0c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8013d10:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8013d5c <__kernel_sinf+0x84>
 8013d14:	ee60 6a07 	vmul.f32	s13, s0, s14
 8013d18:	eee6 7a07 	vfma.f32	s15, s12, s14
 8013d1c:	b930      	cbnz	r0, 8013d2c <__kernel_sinf+0x54>
 8013d1e:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8013d60 <__kernel_sinf+0x88>
 8013d22:	eea7 6a27 	vfma.f32	s12, s14, s15
 8013d26:	eea6 0a26 	vfma.f32	s0, s12, s13
 8013d2a:	4770      	bx	lr
 8013d2c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8013d30:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8013d34:	eee0 7a86 	vfma.f32	s15, s1, s12
 8013d38:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8013d3c:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8013d64 <__kernel_sinf+0x8c>
 8013d40:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8013d44:	ee30 0a60 	vsub.f32	s0, s0, s1
 8013d48:	4770      	bx	lr
 8013d4a:	bf00      	nop
 8013d4c:	2f2ec9d3 	.word	0x2f2ec9d3
 8013d50:	b2d72f34 	.word	0xb2d72f34
 8013d54:	3638ef1b 	.word	0x3638ef1b
 8013d58:	b9500d01 	.word	0xb9500d01
 8013d5c:	3c088889 	.word	0x3c088889
 8013d60:	be2aaaab 	.word	0xbe2aaaab
 8013d64:	3e2aaaab 	.word	0x3e2aaaab

08013d68 <__ieee754_fmodf>:
 8013d68:	b570      	push	{r4, r5, r6, lr}
 8013d6a:	ee10 6a90 	vmov	r6, s1
 8013d6e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8013d72:	1e5a      	subs	r2, r3, #1
 8013d74:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8013d78:	d206      	bcs.n	8013d88 <__ieee754_fmodf+0x20>
 8013d7a:	ee10 4a10 	vmov	r4, s0
 8013d7e:	f024 4100 	bic.w	r1, r4, #2147483648	@ 0x80000000
 8013d82:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8013d86:	d304      	bcc.n	8013d92 <__ieee754_fmodf+0x2a>
 8013d88:	ee60 0a20 	vmul.f32	s1, s0, s1
 8013d8c:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 8013d90:	bd70      	pop	{r4, r5, r6, pc}
 8013d92:	4299      	cmp	r1, r3
 8013d94:	dbfc      	blt.n	8013d90 <__ieee754_fmodf+0x28>
 8013d96:	f004 4500 	and.w	r5, r4, #2147483648	@ 0x80000000
 8013d9a:	d105      	bne.n	8013da8 <__ieee754_fmodf+0x40>
 8013d9c:	4b32      	ldr	r3, [pc, #200]	@ (8013e68 <__ieee754_fmodf+0x100>)
 8013d9e:	eb03 7355 	add.w	r3, r3, r5, lsr #29
 8013da2:	ed93 0a00 	vldr	s0, [r3]
 8013da6:	e7f3      	b.n	8013d90 <__ieee754_fmodf+0x28>
 8013da8:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 8013dac:	d146      	bne.n	8013e3c <__ieee754_fmodf+0xd4>
 8013dae:	020a      	lsls	r2, r1, #8
 8013db0:	f06f 007d 	mvn.w	r0, #125	@ 0x7d
 8013db4:	2a00      	cmp	r2, #0
 8013db6:	dc3e      	bgt.n	8013e36 <__ieee754_fmodf+0xce>
 8013db8:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 8013dbc:	bf01      	itttt	eq
 8013dbe:	021a      	lsleq	r2, r3, #8
 8013dc0:	fab2 f282 	clzeq	r2, r2
 8013dc4:	f1c2 22ff 	rsbeq	r2, r2, #4278255360	@ 0xff00ff00
 8013dc8:	f502 027f 	addeq.w	r2, r2, #16711680	@ 0xff0000
 8013dcc:	bf16      	itet	ne
 8013dce:	15da      	asrne	r2, r3, #23
 8013dd0:	3282      	addeq	r2, #130	@ 0x82
 8013dd2:	3a7f      	subne	r2, #127	@ 0x7f
 8013dd4:	f110 0f7e 	cmn.w	r0, #126	@ 0x7e
 8013dd8:	bfbb      	ittet	lt
 8013dda:	f06f 047d 	mvnlt.w	r4, #125	@ 0x7d
 8013dde:	1a24      	sublt	r4, r4, r0
 8013de0:	f3c4 0416 	ubfxge	r4, r4, #0, #23
 8013de4:	40a1      	lsllt	r1, r4
 8013de6:	bfa8      	it	ge
 8013de8:	f444 0100 	orrge.w	r1, r4, #8388608	@ 0x800000
 8013dec:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 8013df0:	bfb5      	itete	lt
 8013df2:	f06f 047d 	mvnlt.w	r4, #125	@ 0x7d
 8013df6:	f3c6 0616 	ubfxge	r6, r6, #0, #23
 8013dfa:	1aa4      	sublt	r4, r4, r2
 8013dfc:	f446 0400 	orrge.w	r4, r6, #8388608	@ 0x800000
 8013e00:	bfb8      	it	lt
 8013e02:	fa03 f404 	lsllt.w	r4, r3, r4
 8013e06:	1a80      	subs	r0, r0, r2
 8013e08:	1b0b      	subs	r3, r1, r4
 8013e0a:	b9d0      	cbnz	r0, 8013e42 <__ieee754_fmodf+0xda>
 8013e0c:	ea33 0323 	bics.w	r3, r3, r3, asr #32
 8013e10:	bf28      	it	cs
 8013e12:	460b      	movcs	r3, r1
 8013e14:	2b00      	cmp	r3, #0
 8013e16:	d0c1      	beq.n	8013d9c <__ieee754_fmodf+0x34>
 8013e18:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8013e1c:	db19      	blt.n	8013e52 <__ieee754_fmodf+0xea>
 8013e1e:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 8013e22:	db19      	blt.n	8013e58 <__ieee754_fmodf+0xf0>
 8013e24:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8013e28:	327f      	adds	r2, #127	@ 0x7f
 8013e2a:	432b      	orrs	r3, r5
 8013e2c:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8013e30:	ee00 3a10 	vmov	s0, r3
 8013e34:	e7ac      	b.n	8013d90 <__ieee754_fmodf+0x28>
 8013e36:	3801      	subs	r0, #1
 8013e38:	0052      	lsls	r2, r2, #1
 8013e3a:	e7bb      	b.n	8013db4 <__ieee754_fmodf+0x4c>
 8013e3c:	15c8      	asrs	r0, r1, #23
 8013e3e:	387f      	subs	r0, #127	@ 0x7f
 8013e40:	e7ba      	b.n	8013db8 <__ieee754_fmodf+0x50>
 8013e42:	2b00      	cmp	r3, #0
 8013e44:	da02      	bge.n	8013e4c <__ieee754_fmodf+0xe4>
 8013e46:	0049      	lsls	r1, r1, #1
 8013e48:	3801      	subs	r0, #1
 8013e4a:	e7dd      	b.n	8013e08 <__ieee754_fmodf+0xa0>
 8013e4c:	d0a6      	beq.n	8013d9c <__ieee754_fmodf+0x34>
 8013e4e:	0059      	lsls	r1, r3, #1
 8013e50:	e7fa      	b.n	8013e48 <__ieee754_fmodf+0xe0>
 8013e52:	005b      	lsls	r3, r3, #1
 8013e54:	3a01      	subs	r2, #1
 8013e56:	e7df      	b.n	8013e18 <__ieee754_fmodf+0xb0>
 8013e58:	f1c2 22ff 	rsb	r2, r2, #4278255360	@ 0xff00ff00
 8013e5c:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 8013e60:	3282      	adds	r2, #130	@ 0x82
 8013e62:	4113      	asrs	r3, r2
 8013e64:	432b      	orrs	r3, r5
 8013e66:	e7e3      	b.n	8013e30 <__ieee754_fmodf+0xc8>
 8013e68:	080151d0 	.word	0x080151d0

08013e6c <__ieee754_rem_pio2f>:
 8013e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013e6e:	ee10 6a10 	vmov	r6, s0
 8013e72:	4b88      	ldr	r3, [pc, #544]	@ (8014094 <__ieee754_rem_pio2f+0x228>)
 8013e74:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8013e78:	429d      	cmp	r5, r3
 8013e7a:	b087      	sub	sp, #28
 8013e7c:	4604      	mov	r4, r0
 8013e7e:	d805      	bhi.n	8013e8c <__ieee754_rem_pio2f+0x20>
 8013e80:	2300      	movs	r3, #0
 8013e82:	ed80 0a00 	vstr	s0, [r0]
 8013e86:	6043      	str	r3, [r0, #4]
 8013e88:	2000      	movs	r0, #0
 8013e8a:	e022      	b.n	8013ed2 <__ieee754_rem_pio2f+0x66>
 8013e8c:	4b82      	ldr	r3, [pc, #520]	@ (8014098 <__ieee754_rem_pio2f+0x22c>)
 8013e8e:	429d      	cmp	r5, r3
 8013e90:	d83a      	bhi.n	8013f08 <__ieee754_rem_pio2f+0x9c>
 8013e92:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8013e96:	2e00      	cmp	r6, #0
 8013e98:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 801409c <__ieee754_rem_pio2f+0x230>
 8013e9c:	4a80      	ldr	r2, [pc, #512]	@ (80140a0 <__ieee754_rem_pio2f+0x234>)
 8013e9e:	f023 030f 	bic.w	r3, r3, #15
 8013ea2:	dd18      	ble.n	8013ed6 <__ieee754_rem_pio2f+0x6a>
 8013ea4:	4293      	cmp	r3, r2
 8013ea6:	ee70 7a47 	vsub.f32	s15, s0, s14
 8013eaa:	bf09      	itett	eq
 8013eac:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 80140a4 <__ieee754_rem_pio2f+0x238>
 8013eb0:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 80140a8 <__ieee754_rem_pio2f+0x23c>
 8013eb4:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 80140ac <__ieee754_rem_pio2f+0x240>
 8013eb8:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8013ebc:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8013ec0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013ec4:	ed80 7a00 	vstr	s14, [r0]
 8013ec8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8013ecc:	edc0 7a01 	vstr	s15, [r0, #4]
 8013ed0:	2001      	movs	r0, #1
 8013ed2:	b007      	add	sp, #28
 8013ed4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013ed6:	4293      	cmp	r3, r2
 8013ed8:	ee70 7a07 	vadd.f32	s15, s0, s14
 8013edc:	bf09      	itett	eq
 8013ede:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 80140a4 <__ieee754_rem_pio2f+0x238>
 8013ee2:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 80140a8 <__ieee754_rem_pio2f+0x23c>
 8013ee6:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 80140ac <__ieee754_rem_pio2f+0x240>
 8013eea:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8013eee:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8013ef2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013ef6:	ed80 7a00 	vstr	s14, [r0]
 8013efa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013efe:	edc0 7a01 	vstr	s15, [r0, #4]
 8013f02:	f04f 30ff 	mov.w	r0, #4294967295
 8013f06:	e7e4      	b.n	8013ed2 <__ieee754_rem_pio2f+0x66>
 8013f08:	4b69      	ldr	r3, [pc, #420]	@ (80140b0 <__ieee754_rem_pio2f+0x244>)
 8013f0a:	429d      	cmp	r5, r3
 8013f0c:	d873      	bhi.n	8013ff6 <__ieee754_rem_pio2f+0x18a>
 8013f0e:	f000 f8dd 	bl	80140cc <fabsf>
 8013f12:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 80140b4 <__ieee754_rem_pio2f+0x248>
 8013f16:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8013f1a:	eee0 7a07 	vfma.f32	s15, s0, s14
 8013f1e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013f22:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8013f26:	ee17 0a90 	vmov	r0, s15
 8013f2a:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 801409c <__ieee754_rem_pio2f+0x230>
 8013f2e:	eea7 0a67 	vfms.f32	s0, s14, s15
 8013f32:	281f      	cmp	r0, #31
 8013f34:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 80140a8 <__ieee754_rem_pio2f+0x23c>
 8013f38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013f3c:	eeb1 6a47 	vneg.f32	s12, s14
 8013f40:	ee70 6a67 	vsub.f32	s13, s0, s15
 8013f44:	ee16 1a90 	vmov	r1, s13
 8013f48:	dc09      	bgt.n	8013f5e <__ieee754_rem_pio2f+0xf2>
 8013f4a:	4a5b      	ldr	r2, [pc, #364]	@ (80140b8 <__ieee754_rem_pio2f+0x24c>)
 8013f4c:	1e47      	subs	r7, r0, #1
 8013f4e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8013f52:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 8013f56:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8013f5a:	4293      	cmp	r3, r2
 8013f5c:	d107      	bne.n	8013f6e <__ieee754_rem_pio2f+0x102>
 8013f5e:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 8013f62:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 8013f66:	2a08      	cmp	r2, #8
 8013f68:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8013f6c:	dc14      	bgt.n	8013f98 <__ieee754_rem_pio2f+0x12c>
 8013f6e:	6021      	str	r1, [r4, #0]
 8013f70:	ed94 7a00 	vldr	s14, [r4]
 8013f74:	ee30 0a47 	vsub.f32	s0, s0, s14
 8013f78:	2e00      	cmp	r6, #0
 8013f7a:	ee30 0a67 	vsub.f32	s0, s0, s15
 8013f7e:	ed84 0a01 	vstr	s0, [r4, #4]
 8013f82:	daa6      	bge.n	8013ed2 <__ieee754_rem_pio2f+0x66>
 8013f84:	eeb1 7a47 	vneg.f32	s14, s14
 8013f88:	eeb1 0a40 	vneg.f32	s0, s0
 8013f8c:	ed84 7a00 	vstr	s14, [r4]
 8013f90:	ed84 0a01 	vstr	s0, [r4, #4]
 8013f94:	4240      	negs	r0, r0
 8013f96:	e79c      	b.n	8013ed2 <__ieee754_rem_pio2f+0x66>
 8013f98:	eddf 5a42 	vldr	s11, [pc, #264]	@ 80140a4 <__ieee754_rem_pio2f+0x238>
 8013f9c:	eef0 6a40 	vmov.f32	s13, s0
 8013fa0:	eee6 6a25 	vfma.f32	s13, s12, s11
 8013fa4:	ee70 7a66 	vsub.f32	s15, s0, s13
 8013fa8:	eee6 7a25 	vfma.f32	s15, s12, s11
 8013fac:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80140ac <__ieee754_rem_pio2f+0x240>
 8013fb0:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8013fb4:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8013fb8:	ee15 2a90 	vmov	r2, s11
 8013fbc:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8013fc0:	1a5b      	subs	r3, r3, r1
 8013fc2:	2b19      	cmp	r3, #25
 8013fc4:	dc04      	bgt.n	8013fd0 <__ieee754_rem_pio2f+0x164>
 8013fc6:	edc4 5a00 	vstr	s11, [r4]
 8013fca:	eeb0 0a66 	vmov.f32	s0, s13
 8013fce:	e7cf      	b.n	8013f70 <__ieee754_rem_pio2f+0x104>
 8013fd0:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 80140bc <__ieee754_rem_pio2f+0x250>
 8013fd4:	eeb0 0a66 	vmov.f32	s0, s13
 8013fd8:	eea6 0a25 	vfma.f32	s0, s12, s11
 8013fdc:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8013fe0:	eddf 6a37 	vldr	s13, [pc, #220]	@ 80140c0 <__ieee754_rem_pio2f+0x254>
 8013fe4:	eee6 7a25 	vfma.f32	s15, s12, s11
 8013fe8:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8013fec:	ee30 7a67 	vsub.f32	s14, s0, s15
 8013ff0:	ed84 7a00 	vstr	s14, [r4]
 8013ff4:	e7bc      	b.n	8013f70 <__ieee754_rem_pio2f+0x104>
 8013ff6:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8013ffa:	d306      	bcc.n	801400a <__ieee754_rem_pio2f+0x19e>
 8013ffc:	ee70 7a40 	vsub.f32	s15, s0, s0
 8014000:	edc0 7a01 	vstr	s15, [r0, #4]
 8014004:	edc0 7a00 	vstr	s15, [r0]
 8014008:	e73e      	b.n	8013e88 <__ieee754_rem_pio2f+0x1c>
 801400a:	15ea      	asrs	r2, r5, #23
 801400c:	3a86      	subs	r2, #134	@ 0x86
 801400e:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8014012:	ee07 3a90 	vmov	s15, r3
 8014016:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801401a:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 80140c4 <__ieee754_rem_pio2f+0x258>
 801401e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014022:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014026:	ed8d 7a03 	vstr	s14, [sp, #12]
 801402a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801402e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8014032:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014036:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801403a:	ed8d 7a04 	vstr	s14, [sp, #16]
 801403e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8014042:	eef5 7a40 	vcmp.f32	s15, #0.0
 8014046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801404a:	edcd 7a05 	vstr	s15, [sp, #20]
 801404e:	d11e      	bne.n	801408e <__ieee754_rem_pio2f+0x222>
 8014050:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8014054:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014058:	bf0c      	ite	eq
 801405a:	2301      	moveq	r3, #1
 801405c:	2302      	movne	r3, #2
 801405e:	491a      	ldr	r1, [pc, #104]	@ (80140c8 <__ieee754_rem_pio2f+0x25c>)
 8014060:	9101      	str	r1, [sp, #4]
 8014062:	2102      	movs	r1, #2
 8014064:	9100      	str	r1, [sp, #0]
 8014066:	a803      	add	r0, sp, #12
 8014068:	4621      	mov	r1, r4
 801406a:	f000 fc69 	bl	8014940 <__kernel_rem_pio2f>
 801406e:	2e00      	cmp	r6, #0
 8014070:	f6bf af2f 	bge.w	8013ed2 <__ieee754_rem_pio2f+0x66>
 8014074:	edd4 7a00 	vldr	s15, [r4]
 8014078:	eef1 7a67 	vneg.f32	s15, s15
 801407c:	edc4 7a00 	vstr	s15, [r4]
 8014080:	edd4 7a01 	vldr	s15, [r4, #4]
 8014084:	eef1 7a67 	vneg.f32	s15, s15
 8014088:	edc4 7a01 	vstr	s15, [r4, #4]
 801408c:	e782      	b.n	8013f94 <__ieee754_rem_pio2f+0x128>
 801408e:	2303      	movs	r3, #3
 8014090:	e7e5      	b.n	801405e <__ieee754_rem_pio2f+0x1f2>
 8014092:	bf00      	nop
 8014094:	3f490fd8 	.word	0x3f490fd8
 8014098:	4016cbe3 	.word	0x4016cbe3
 801409c:	3fc90f80 	.word	0x3fc90f80
 80140a0:	3fc90fd0 	.word	0x3fc90fd0
 80140a4:	37354400 	.word	0x37354400
 80140a8:	37354443 	.word	0x37354443
 80140ac:	2e85a308 	.word	0x2e85a308
 80140b0:	43490f80 	.word	0x43490f80
 80140b4:	3f22f984 	.word	0x3f22f984
 80140b8:	080151d8 	.word	0x080151d8
 80140bc:	2e85a300 	.word	0x2e85a300
 80140c0:	248d3132 	.word	0x248d3132
 80140c4:	43800000 	.word	0x43800000
 80140c8:	08015258 	.word	0x08015258

080140cc <fabsf>:
 80140cc:	ee10 3a10 	vmov	r3, s0
 80140d0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80140d4:	ee00 3a10 	vmov	s0, r3
 80140d8:	4770      	bx	lr
 80140da:	0000      	movs	r0, r0
 80140dc:	0000      	movs	r0, r0
	...

080140e0 <scalbn>:
 80140e0:	b570      	push	{r4, r5, r6, lr}
 80140e2:	ec55 4b10 	vmov	r4, r5, d0
 80140e6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80140ea:	4606      	mov	r6, r0
 80140ec:	462b      	mov	r3, r5
 80140ee:	b991      	cbnz	r1, 8014116 <scalbn+0x36>
 80140f0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80140f4:	4323      	orrs	r3, r4
 80140f6:	d03b      	beq.n	8014170 <scalbn+0x90>
 80140f8:	4b33      	ldr	r3, [pc, #204]	@ (80141c8 <scalbn+0xe8>)
 80140fa:	4620      	mov	r0, r4
 80140fc:	4629      	mov	r1, r5
 80140fe:	2200      	movs	r2, #0
 8014100:	f7ec fa46 	bl	8000590 <__aeabi_dmul>
 8014104:	4b31      	ldr	r3, [pc, #196]	@ (80141cc <scalbn+0xec>)
 8014106:	429e      	cmp	r6, r3
 8014108:	4604      	mov	r4, r0
 801410a:	460d      	mov	r5, r1
 801410c:	da0f      	bge.n	801412e <scalbn+0x4e>
 801410e:	a326      	add	r3, pc, #152	@ (adr r3, 80141a8 <scalbn+0xc8>)
 8014110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014114:	e01e      	b.n	8014154 <scalbn+0x74>
 8014116:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801411a:	4291      	cmp	r1, r2
 801411c:	d10b      	bne.n	8014136 <scalbn+0x56>
 801411e:	4622      	mov	r2, r4
 8014120:	4620      	mov	r0, r4
 8014122:	4629      	mov	r1, r5
 8014124:	f7ec f87e 	bl	8000224 <__adddf3>
 8014128:	4604      	mov	r4, r0
 801412a:	460d      	mov	r5, r1
 801412c:	e020      	b.n	8014170 <scalbn+0x90>
 801412e:	460b      	mov	r3, r1
 8014130:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8014134:	3936      	subs	r1, #54	@ 0x36
 8014136:	f24c 3250 	movw	r2, #50000	@ 0xc350
 801413a:	4296      	cmp	r6, r2
 801413c:	dd0d      	ble.n	801415a <scalbn+0x7a>
 801413e:	2d00      	cmp	r5, #0
 8014140:	a11b      	add	r1, pc, #108	@ (adr r1, 80141b0 <scalbn+0xd0>)
 8014142:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014146:	da02      	bge.n	801414e <scalbn+0x6e>
 8014148:	a11b      	add	r1, pc, #108	@ (adr r1, 80141b8 <scalbn+0xd8>)
 801414a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801414e:	a318      	add	r3, pc, #96	@ (adr r3, 80141b0 <scalbn+0xd0>)
 8014150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014154:	f7ec fa1c 	bl	8000590 <__aeabi_dmul>
 8014158:	e7e6      	b.n	8014128 <scalbn+0x48>
 801415a:	1872      	adds	r2, r6, r1
 801415c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8014160:	428a      	cmp	r2, r1
 8014162:	dcec      	bgt.n	801413e <scalbn+0x5e>
 8014164:	2a00      	cmp	r2, #0
 8014166:	dd06      	ble.n	8014176 <scalbn+0x96>
 8014168:	f36f 531e 	bfc	r3, #20, #11
 801416c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8014170:	ec45 4b10 	vmov	d0, r4, r5
 8014174:	bd70      	pop	{r4, r5, r6, pc}
 8014176:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 801417a:	da08      	bge.n	801418e <scalbn+0xae>
 801417c:	2d00      	cmp	r5, #0
 801417e:	a10a      	add	r1, pc, #40	@ (adr r1, 80141a8 <scalbn+0xc8>)
 8014180:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014184:	dac3      	bge.n	801410e <scalbn+0x2e>
 8014186:	a10e      	add	r1, pc, #56	@ (adr r1, 80141c0 <scalbn+0xe0>)
 8014188:	e9d1 0100 	ldrd	r0, r1, [r1]
 801418c:	e7bf      	b.n	801410e <scalbn+0x2e>
 801418e:	3236      	adds	r2, #54	@ 0x36
 8014190:	f36f 531e 	bfc	r3, #20, #11
 8014194:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8014198:	4620      	mov	r0, r4
 801419a:	4b0d      	ldr	r3, [pc, #52]	@ (80141d0 <scalbn+0xf0>)
 801419c:	4629      	mov	r1, r5
 801419e:	2200      	movs	r2, #0
 80141a0:	e7d8      	b.n	8014154 <scalbn+0x74>
 80141a2:	bf00      	nop
 80141a4:	f3af 8000 	nop.w
 80141a8:	c2f8f359 	.word	0xc2f8f359
 80141ac:	01a56e1f 	.word	0x01a56e1f
 80141b0:	8800759c 	.word	0x8800759c
 80141b4:	7e37e43c 	.word	0x7e37e43c
 80141b8:	8800759c 	.word	0x8800759c
 80141bc:	fe37e43c 	.word	0xfe37e43c
 80141c0:	c2f8f359 	.word	0xc2f8f359
 80141c4:	81a56e1f 	.word	0x81a56e1f
 80141c8:	43500000 	.word	0x43500000
 80141cc:	ffff3cb0 	.word	0xffff3cb0
 80141d0:	3c900000 	.word	0x3c900000

080141d4 <scalbnf>:
 80141d4:	ee10 3a10 	vmov	r3, s0
 80141d8:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 80141dc:	d02b      	beq.n	8014236 <scalbnf+0x62>
 80141de:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80141e2:	d302      	bcc.n	80141ea <scalbnf+0x16>
 80141e4:	ee30 0a00 	vadd.f32	s0, s0, s0
 80141e8:	4770      	bx	lr
 80141ea:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 80141ee:	d123      	bne.n	8014238 <scalbnf+0x64>
 80141f0:	4b24      	ldr	r3, [pc, #144]	@ (8014284 <scalbnf+0xb0>)
 80141f2:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8014288 <scalbnf+0xb4>
 80141f6:	4298      	cmp	r0, r3
 80141f8:	ee20 0a27 	vmul.f32	s0, s0, s15
 80141fc:	db17      	blt.n	801422e <scalbnf+0x5a>
 80141fe:	ee10 3a10 	vmov	r3, s0
 8014202:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8014206:	3a19      	subs	r2, #25
 8014208:	f24c 3150 	movw	r1, #50000	@ 0xc350
 801420c:	4288      	cmp	r0, r1
 801420e:	dd15      	ble.n	801423c <scalbnf+0x68>
 8014210:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 801428c <scalbnf+0xb8>
 8014214:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8014290 <scalbnf+0xbc>
 8014218:	ee10 3a10 	vmov	r3, s0
 801421c:	eeb0 7a67 	vmov.f32	s14, s15
 8014220:	2b00      	cmp	r3, #0
 8014222:	bfb8      	it	lt
 8014224:	eef0 7a66 	vmovlt.f32	s15, s13
 8014228:	ee27 0a87 	vmul.f32	s0, s15, s14
 801422c:	4770      	bx	lr
 801422e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8014294 <scalbnf+0xc0>
 8014232:	ee27 0a80 	vmul.f32	s0, s15, s0
 8014236:	4770      	bx	lr
 8014238:	0dd2      	lsrs	r2, r2, #23
 801423a:	e7e5      	b.n	8014208 <scalbnf+0x34>
 801423c:	4410      	add	r0, r2
 801423e:	28fe      	cmp	r0, #254	@ 0xfe
 8014240:	dce6      	bgt.n	8014210 <scalbnf+0x3c>
 8014242:	2800      	cmp	r0, #0
 8014244:	dd06      	ble.n	8014254 <scalbnf+0x80>
 8014246:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801424a:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801424e:	ee00 3a10 	vmov	s0, r3
 8014252:	4770      	bx	lr
 8014254:	f110 0f16 	cmn.w	r0, #22
 8014258:	da09      	bge.n	801426e <scalbnf+0x9a>
 801425a:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8014294 <scalbnf+0xc0>
 801425e:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8014298 <scalbnf+0xc4>
 8014262:	ee10 3a10 	vmov	r3, s0
 8014266:	eeb0 7a67 	vmov.f32	s14, s15
 801426a:	2b00      	cmp	r3, #0
 801426c:	e7d9      	b.n	8014222 <scalbnf+0x4e>
 801426e:	3019      	adds	r0, #25
 8014270:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8014274:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8014278:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 801429c <scalbnf+0xc8>
 801427c:	ee07 3a90 	vmov	s15, r3
 8014280:	e7d7      	b.n	8014232 <scalbnf+0x5e>
 8014282:	bf00      	nop
 8014284:	ffff3cb0 	.word	0xffff3cb0
 8014288:	4c000000 	.word	0x4c000000
 801428c:	7149f2ca 	.word	0x7149f2ca
 8014290:	f149f2ca 	.word	0xf149f2ca
 8014294:	0da24260 	.word	0x0da24260
 8014298:	8da24260 	.word	0x8da24260
 801429c:	33000000 	.word	0x33000000

080142a0 <__kernel_rem_pio2>:
 80142a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80142a4:	ed2d 8b02 	vpush	{d8}
 80142a8:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 80142ac:	f112 0f14 	cmn.w	r2, #20
 80142b0:	9306      	str	r3, [sp, #24]
 80142b2:	9104      	str	r1, [sp, #16]
 80142b4:	4bc2      	ldr	r3, [pc, #776]	@ (80145c0 <__kernel_rem_pio2+0x320>)
 80142b6:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 80142b8:	9008      	str	r0, [sp, #32]
 80142ba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80142be:	9300      	str	r3, [sp, #0]
 80142c0:	9b06      	ldr	r3, [sp, #24]
 80142c2:	f103 33ff 	add.w	r3, r3, #4294967295
 80142c6:	bfa8      	it	ge
 80142c8:	1ed4      	subge	r4, r2, #3
 80142ca:	9305      	str	r3, [sp, #20]
 80142cc:	bfb2      	itee	lt
 80142ce:	2400      	movlt	r4, #0
 80142d0:	2318      	movge	r3, #24
 80142d2:	fb94 f4f3 	sdivge	r4, r4, r3
 80142d6:	f06f 0317 	mvn.w	r3, #23
 80142da:	fb04 3303 	mla	r3, r4, r3, r3
 80142de:	eb03 0b02 	add.w	fp, r3, r2
 80142e2:	9b00      	ldr	r3, [sp, #0]
 80142e4:	9a05      	ldr	r2, [sp, #20]
 80142e6:	ed9f 8bb2 	vldr	d8, [pc, #712]	@ 80145b0 <__kernel_rem_pio2+0x310>
 80142ea:	eb03 0802 	add.w	r8, r3, r2
 80142ee:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 80142f0:	1aa7      	subs	r7, r4, r2
 80142f2:	ae20      	add	r6, sp, #128	@ 0x80
 80142f4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80142f8:	2500      	movs	r5, #0
 80142fa:	4545      	cmp	r5, r8
 80142fc:	dd12      	ble.n	8014324 <__kernel_rem_pio2+0x84>
 80142fe:	9b06      	ldr	r3, [sp, #24]
 8014300:	aa20      	add	r2, sp, #128	@ 0x80
 8014302:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8014306:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 801430a:	2700      	movs	r7, #0
 801430c:	9b00      	ldr	r3, [sp, #0]
 801430e:	429f      	cmp	r7, r3
 8014310:	dc2e      	bgt.n	8014370 <__kernel_rem_pio2+0xd0>
 8014312:	ed9f 7ba7 	vldr	d7, [pc, #668]	@ 80145b0 <__kernel_rem_pio2+0x310>
 8014316:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801431a:	ed8d 7b02 	vstr	d7, [sp, #8]
 801431e:	46a8      	mov	r8, r5
 8014320:	2600      	movs	r6, #0
 8014322:	e01b      	b.n	801435c <__kernel_rem_pio2+0xbc>
 8014324:	42ef      	cmn	r7, r5
 8014326:	d407      	bmi.n	8014338 <__kernel_rem_pio2+0x98>
 8014328:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801432c:	f7ec f8c6 	bl	80004bc <__aeabi_i2d>
 8014330:	e8e6 0102 	strd	r0, r1, [r6], #8
 8014334:	3501      	adds	r5, #1
 8014336:	e7e0      	b.n	80142fa <__kernel_rem_pio2+0x5a>
 8014338:	ec51 0b18 	vmov	r0, r1, d8
 801433c:	e7f8      	b.n	8014330 <__kernel_rem_pio2+0x90>
 801433e:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 8014342:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8014346:	f7ec f923 	bl	8000590 <__aeabi_dmul>
 801434a:	4602      	mov	r2, r0
 801434c:	460b      	mov	r3, r1
 801434e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014352:	f7eb ff67 	bl	8000224 <__adddf3>
 8014356:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801435a:	3601      	adds	r6, #1
 801435c:	9b05      	ldr	r3, [sp, #20]
 801435e:	429e      	cmp	r6, r3
 8014360:	dded      	ble.n	801433e <__kernel_rem_pio2+0x9e>
 8014362:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014366:	3701      	adds	r7, #1
 8014368:	ecaa 7b02 	vstmia	sl!, {d7}
 801436c:	3508      	adds	r5, #8
 801436e:	e7cd      	b.n	801430c <__kernel_rem_pio2+0x6c>
 8014370:	9b00      	ldr	r3, [sp, #0]
 8014372:	f8dd 8000 	ldr.w	r8, [sp]
 8014376:	aa0c      	add	r2, sp, #48	@ 0x30
 8014378:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801437c:	930a      	str	r3, [sp, #40]	@ 0x28
 801437e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8014380:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8014384:	9309      	str	r3, [sp, #36]	@ 0x24
 8014386:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 801438a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801438c:	ab98      	add	r3, sp, #608	@ 0x260
 801438e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8014392:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8014396:	ed8d 7b02 	vstr	d7, [sp, #8]
 801439a:	ac0c      	add	r4, sp, #48	@ 0x30
 801439c:	ab70      	add	r3, sp, #448	@ 0x1c0
 801439e:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 80143a2:	46a1      	mov	r9, r4
 80143a4:	46c2      	mov	sl, r8
 80143a6:	f1ba 0f00 	cmp.w	sl, #0
 80143aa:	dc77      	bgt.n	801449c <__kernel_rem_pio2+0x1fc>
 80143ac:	4658      	mov	r0, fp
 80143ae:	ed9d 0b02 	vldr	d0, [sp, #8]
 80143b2:	f7ff fe95 	bl	80140e0 <scalbn>
 80143b6:	ec57 6b10 	vmov	r6, r7, d0
 80143ba:	2200      	movs	r2, #0
 80143bc:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 80143c0:	4630      	mov	r0, r6
 80143c2:	4639      	mov	r1, r7
 80143c4:	f7ec f8e4 	bl	8000590 <__aeabi_dmul>
 80143c8:	ec41 0b10 	vmov	d0, r0, r1
 80143cc:	f000 fd20 	bl	8014e10 <floor>
 80143d0:	4b7c      	ldr	r3, [pc, #496]	@ (80145c4 <__kernel_rem_pio2+0x324>)
 80143d2:	ec51 0b10 	vmov	r0, r1, d0
 80143d6:	2200      	movs	r2, #0
 80143d8:	f7ec f8da 	bl	8000590 <__aeabi_dmul>
 80143dc:	4602      	mov	r2, r0
 80143de:	460b      	mov	r3, r1
 80143e0:	4630      	mov	r0, r6
 80143e2:	4639      	mov	r1, r7
 80143e4:	f7eb ff1c 	bl	8000220 <__aeabi_dsub>
 80143e8:	460f      	mov	r7, r1
 80143ea:	4606      	mov	r6, r0
 80143ec:	f7ec fb6a 	bl	8000ac4 <__aeabi_d2iz>
 80143f0:	9002      	str	r0, [sp, #8]
 80143f2:	f7ec f863 	bl	80004bc <__aeabi_i2d>
 80143f6:	4602      	mov	r2, r0
 80143f8:	460b      	mov	r3, r1
 80143fa:	4630      	mov	r0, r6
 80143fc:	4639      	mov	r1, r7
 80143fe:	f7eb ff0f 	bl	8000220 <__aeabi_dsub>
 8014402:	f1bb 0f00 	cmp.w	fp, #0
 8014406:	4606      	mov	r6, r0
 8014408:	460f      	mov	r7, r1
 801440a:	dd6c      	ble.n	80144e6 <__kernel_rem_pio2+0x246>
 801440c:	f108 31ff 	add.w	r1, r8, #4294967295
 8014410:	ab0c      	add	r3, sp, #48	@ 0x30
 8014412:	9d02      	ldr	r5, [sp, #8]
 8014414:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014418:	f1cb 0018 	rsb	r0, fp, #24
 801441c:	fa43 f200 	asr.w	r2, r3, r0
 8014420:	4415      	add	r5, r2
 8014422:	4082      	lsls	r2, r0
 8014424:	1a9b      	subs	r3, r3, r2
 8014426:	aa0c      	add	r2, sp, #48	@ 0x30
 8014428:	9502      	str	r5, [sp, #8]
 801442a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801442e:	f1cb 0217 	rsb	r2, fp, #23
 8014432:	fa43 f902 	asr.w	r9, r3, r2
 8014436:	f1b9 0f00 	cmp.w	r9, #0
 801443a:	dd64      	ble.n	8014506 <__kernel_rem_pio2+0x266>
 801443c:	9b02      	ldr	r3, [sp, #8]
 801443e:	2200      	movs	r2, #0
 8014440:	3301      	adds	r3, #1
 8014442:	9302      	str	r3, [sp, #8]
 8014444:	4615      	mov	r5, r2
 8014446:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 801444a:	4590      	cmp	r8, r2
 801444c:	f300 80a1 	bgt.w	8014592 <__kernel_rem_pio2+0x2f2>
 8014450:	f1bb 0f00 	cmp.w	fp, #0
 8014454:	dd07      	ble.n	8014466 <__kernel_rem_pio2+0x1c6>
 8014456:	f1bb 0f01 	cmp.w	fp, #1
 801445a:	f000 80c1 	beq.w	80145e0 <__kernel_rem_pio2+0x340>
 801445e:	f1bb 0f02 	cmp.w	fp, #2
 8014462:	f000 80c8 	beq.w	80145f6 <__kernel_rem_pio2+0x356>
 8014466:	f1b9 0f02 	cmp.w	r9, #2
 801446a:	d14c      	bne.n	8014506 <__kernel_rem_pio2+0x266>
 801446c:	4632      	mov	r2, r6
 801446e:	463b      	mov	r3, r7
 8014470:	4955      	ldr	r1, [pc, #340]	@ (80145c8 <__kernel_rem_pio2+0x328>)
 8014472:	2000      	movs	r0, #0
 8014474:	f7eb fed4 	bl	8000220 <__aeabi_dsub>
 8014478:	4606      	mov	r6, r0
 801447a:	460f      	mov	r7, r1
 801447c:	2d00      	cmp	r5, #0
 801447e:	d042      	beq.n	8014506 <__kernel_rem_pio2+0x266>
 8014480:	4658      	mov	r0, fp
 8014482:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 80145b8 <__kernel_rem_pio2+0x318>
 8014486:	f7ff fe2b 	bl	80140e0 <scalbn>
 801448a:	4630      	mov	r0, r6
 801448c:	4639      	mov	r1, r7
 801448e:	ec53 2b10 	vmov	r2, r3, d0
 8014492:	f7eb fec5 	bl	8000220 <__aeabi_dsub>
 8014496:	4606      	mov	r6, r0
 8014498:	460f      	mov	r7, r1
 801449a:	e034      	b.n	8014506 <__kernel_rem_pio2+0x266>
 801449c:	4b4b      	ldr	r3, [pc, #300]	@ (80145cc <__kernel_rem_pio2+0x32c>)
 801449e:	2200      	movs	r2, #0
 80144a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80144a4:	f7ec f874 	bl	8000590 <__aeabi_dmul>
 80144a8:	f7ec fb0c 	bl	8000ac4 <__aeabi_d2iz>
 80144ac:	f7ec f806 	bl	80004bc <__aeabi_i2d>
 80144b0:	4b47      	ldr	r3, [pc, #284]	@ (80145d0 <__kernel_rem_pio2+0x330>)
 80144b2:	2200      	movs	r2, #0
 80144b4:	4606      	mov	r6, r0
 80144b6:	460f      	mov	r7, r1
 80144b8:	f7ec f86a 	bl	8000590 <__aeabi_dmul>
 80144bc:	4602      	mov	r2, r0
 80144be:	460b      	mov	r3, r1
 80144c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80144c4:	f7eb feac 	bl	8000220 <__aeabi_dsub>
 80144c8:	f7ec fafc 	bl	8000ac4 <__aeabi_d2iz>
 80144cc:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80144d0:	f849 0b04 	str.w	r0, [r9], #4
 80144d4:	4639      	mov	r1, r7
 80144d6:	4630      	mov	r0, r6
 80144d8:	f7eb fea4 	bl	8000224 <__adddf3>
 80144dc:	f10a 3aff 	add.w	sl, sl, #4294967295
 80144e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80144e4:	e75f      	b.n	80143a6 <__kernel_rem_pio2+0x106>
 80144e6:	d107      	bne.n	80144f8 <__kernel_rem_pio2+0x258>
 80144e8:	f108 33ff 	add.w	r3, r8, #4294967295
 80144ec:	aa0c      	add	r2, sp, #48	@ 0x30
 80144ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80144f2:	ea4f 59e3 	mov.w	r9, r3, asr #23
 80144f6:	e79e      	b.n	8014436 <__kernel_rem_pio2+0x196>
 80144f8:	4b36      	ldr	r3, [pc, #216]	@ (80145d4 <__kernel_rem_pio2+0x334>)
 80144fa:	2200      	movs	r2, #0
 80144fc:	f7ec face 	bl	8000a9c <__aeabi_dcmpge>
 8014500:	2800      	cmp	r0, #0
 8014502:	d143      	bne.n	801458c <__kernel_rem_pio2+0x2ec>
 8014504:	4681      	mov	r9, r0
 8014506:	2200      	movs	r2, #0
 8014508:	2300      	movs	r3, #0
 801450a:	4630      	mov	r0, r6
 801450c:	4639      	mov	r1, r7
 801450e:	f7ec faa7 	bl	8000a60 <__aeabi_dcmpeq>
 8014512:	2800      	cmp	r0, #0
 8014514:	f000 80c1 	beq.w	801469a <__kernel_rem_pio2+0x3fa>
 8014518:	f108 33ff 	add.w	r3, r8, #4294967295
 801451c:	2200      	movs	r2, #0
 801451e:	9900      	ldr	r1, [sp, #0]
 8014520:	428b      	cmp	r3, r1
 8014522:	da70      	bge.n	8014606 <__kernel_rem_pio2+0x366>
 8014524:	2a00      	cmp	r2, #0
 8014526:	f000 808b 	beq.w	8014640 <__kernel_rem_pio2+0x3a0>
 801452a:	f108 38ff 	add.w	r8, r8, #4294967295
 801452e:	ab0c      	add	r3, sp, #48	@ 0x30
 8014530:	f1ab 0b18 	sub.w	fp, fp, #24
 8014534:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8014538:	2b00      	cmp	r3, #0
 801453a:	d0f6      	beq.n	801452a <__kernel_rem_pio2+0x28a>
 801453c:	4658      	mov	r0, fp
 801453e:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 80145b8 <__kernel_rem_pio2+0x318>
 8014542:	f7ff fdcd 	bl	80140e0 <scalbn>
 8014546:	f108 0301 	add.w	r3, r8, #1
 801454a:	00da      	lsls	r2, r3, #3
 801454c:	9205      	str	r2, [sp, #20]
 801454e:	ec55 4b10 	vmov	r4, r5, d0
 8014552:	aa70      	add	r2, sp, #448	@ 0x1c0
 8014554:	f8df b074 	ldr.w	fp, [pc, #116]	@ 80145cc <__kernel_rem_pio2+0x32c>
 8014558:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 801455c:	4646      	mov	r6, r8
 801455e:	f04f 0a00 	mov.w	sl, #0
 8014562:	2e00      	cmp	r6, #0
 8014564:	f280 80d1 	bge.w	801470a <__kernel_rem_pio2+0x46a>
 8014568:	4644      	mov	r4, r8
 801456a:	2c00      	cmp	r4, #0
 801456c:	f2c0 80ff 	blt.w	801476e <__kernel_rem_pio2+0x4ce>
 8014570:	4b19      	ldr	r3, [pc, #100]	@ (80145d8 <__kernel_rem_pio2+0x338>)
 8014572:	461f      	mov	r7, r3
 8014574:	ab70      	add	r3, sp, #448	@ 0x1c0
 8014576:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801457a:	9306      	str	r3, [sp, #24]
 801457c:	f04f 0a00 	mov.w	sl, #0
 8014580:	f04f 0b00 	mov.w	fp, #0
 8014584:	2600      	movs	r6, #0
 8014586:	eba8 0504 	sub.w	r5, r8, r4
 801458a:	e0e4      	b.n	8014756 <__kernel_rem_pio2+0x4b6>
 801458c:	f04f 0902 	mov.w	r9, #2
 8014590:	e754      	b.n	801443c <__kernel_rem_pio2+0x19c>
 8014592:	f854 3b04 	ldr.w	r3, [r4], #4
 8014596:	bb0d      	cbnz	r5, 80145dc <__kernel_rem_pio2+0x33c>
 8014598:	b123      	cbz	r3, 80145a4 <__kernel_rem_pio2+0x304>
 801459a:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 801459e:	f844 3c04 	str.w	r3, [r4, #-4]
 80145a2:	2301      	movs	r3, #1
 80145a4:	3201      	adds	r2, #1
 80145a6:	461d      	mov	r5, r3
 80145a8:	e74f      	b.n	801444a <__kernel_rem_pio2+0x1aa>
 80145aa:	bf00      	nop
 80145ac:	f3af 8000 	nop.w
	...
 80145bc:	3ff00000 	.word	0x3ff00000
 80145c0:	080155b0 	.word	0x080155b0
 80145c4:	40200000 	.word	0x40200000
 80145c8:	3ff00000 	.word	0x3ff00000
 80145cc:	3e700000 	.word	0x3e700000
 80145d0:	41700000 	.word	0x41700000
 80145d4:	3fe00000 	.word	0x3fe00000
 80145d8:	08015570 	.word	0x08015570
 80145dc:	1acb      	subs	r3, r1, r3
 80145de:	e7de      	b.n	801459e <__kernel_rem_pio2+0x2fe>
 80145e0:	f108 32ff 	add.w	r2, r8, #4294967295
 80145e4:	ab0c      	add	r3, sp, #48	@ 0x30
 80145e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80145ea:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80145ee:	a90c      	add	r1, sp, #48	@ 0x30
 80145f0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80145f4:	e737      	b.n	8014466 <__kernel_rem_pio2+0x1c6>
 80145f6:	f108 32ff 	add.w	r2, r8, #4294967295
 80145fa:	ab0c      	add	r3, sp, #48	@ 0x30
 80145fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014600:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8014604:	e7f3      	b.n	80145ee <__kernel_rem_pio2+0x34e>
 8014606:	a90c      	add	r1, sp, #48	@ 0x30
 8014608:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801460c:	3b01      	subs	r3, #1
 801460e:	430a      	orrs	r2, r1
 8014610:	e785      	b.n	801451e <__kernel_rem_pio2+0x27e>
 8014612:	3401      	adds	r4, #1
 8014614:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8014618:	2a00      	cmp	r2, #0
 801461a:	d0fa      	beq.n	8014612 <__kernel_rem_pio2+0x372>
 801461c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801461e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8014622:	eb0d 0503 	add.w	r5, sp, r3
 8014626:	9b06      	ldr	r3, [sp, #24]
 8014628:	aa20      	add	r2, sp, #128	@ 0x80
 801462a:	4443      	add	r3, r8
 801462c:	f108 0701 	add.w	r7, r8, #1
 8014630:	3d98      	subs	r5, #152	@ 0x98
 8014632:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8014636:	4444      	add	r4, r8
 8014638:	42bc      	cmp	r4, r7
 801463a:	da04      	bge.n	8014646 <__kernel_rem_pio2+0x3a6>
 801463c:	46a0      	mov	r8, r4
 801463e:	e6a2      	b.n	8014386 <__kernel_rem_pio2+0xe6>
 8014640:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014642:	2401      	movs	r4, #1
 8014644:	e7e6      	b.n	8014614 <__kernel_rem_pio2+0x374>
 8014646:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014648:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 801464c:	f7eb ff36 	bl	80004bc <__aeabi_i2d>
 8014650:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 8014910 <__kernel_rem_pio2+0x670>
 8014654:	e8e6 0102 	strd	r0, r1, [r6], #8
 8014658:	ed8d 7b02 	vstr	d7, [sp, #8]
 801465c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8014660:	46b2      	mov	sl, r6
 8014662:	f04f 0800 	mov.w	r8, #0
 8014666:	9b05      	ldr	r3, [sp, #20]
 8014668:	4598      	cmp	r8, r3
 801466a:	dd05      	ble.n	8014678 <__kernel_rem_pio2+0x3d8>
 801466c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014670:	3701      	adds	r7, #1
 8014672:	eca5 7b02 	vstmia	r5!, {d7}
 8014676:	e7df      	b.n	8014638 <__kernel_rem_pio2+0x398>
 8014678:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 801467c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8014680:	f7eb ff86 	bl	8000590 <__aeabi_dmul>
 8014684:	4602      	mov	r2, r0
 8014686:	460b      	mov	r3, r1
 8014688:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801468c:	f7eb fdca 	bl	8000224 <__adddf3>
 8014690:	f108 0801 	add.w	r8, r8, #1
 8014694:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014698:	e7e5      	b.n	8014666 <__kernel_rem_pio2+0x3c6>
 801469a:	f1cb 0000 	rsb	r0, fp, #0
 801469e:	ec47 6b10 	vmov	d0, r6, r7
 80146a2:	f7ff fd1d 	bl	80140e0 <scalbn>
 80146a6:	ec55 4b10 	vmov	r4, r5, d0
 80146aa:	4b9b      	ldr	r3, [pc, #620]	@ (8014918 <__kernel_rem_pio2+0x678>)
 80146ac:	2200      	movs	r2, #0
 80146ae:	4620      	mov	r0, r4
 80146b0:	4629      	mov	r1, r5
 80146b2:	f7ec f9f3 	bl	8000a9c <__aeabi_dcmpge>
 80146b6:	b300      	cbz	r0, 80146fa <__kernel_rem_pio2+0x45a>
 80146b8:	4b98      	ldr	r3, [pc, #608]	@ (801491c <__kernel_rem_pio2+0x67c>)
 80146ba:	2200      	movs	r2, #0
 80146bc:	4620      	mov	r0, r4
 80146be:	4629      	mov	r1, r5
 80146c0:	f7eb ff66 	bl	8000590 <__aeabi_dmul>
 80146c4:	f7ec f9fe 	bl	8000ac4 <__aeabi_d2iz>
 80146c8:	4606      	mov	r6, r0
 80146ca:	f7eb fef7 	bl	80004bc <__aeabi_i2d>
 80146ce:	4b92      	ldr	r3, [pc, #584]	@ (8014918 <__kernel_rem_pio2+0x678>)
 80146d0:	2200      	movs	r2, #0
 80146d2:	f7eb ff5d 	bl	8000590 <__aeabi_dmul>
 80146d6:	460b      	mov	r3, r1
 80146d8:	4602      	mov	r2, r0
 80146da:	4629      	mov	r1, r5
 80146dc:	4620      	mov	r0, r4
 80146de:	f7eb fd9f 	bl	8000220 <__aeabi_dsub>
 80146e2:	f7ec f9ef 	bl	8000ac4 <__aeabi_d2iz>
 80146e6:	ab0c      	add	r3, sp, #48	@ 0x30
 80146e8:	f10b 0b18 	add.w	fp, fp, #24
 80146ec:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80146f0:	f108 0801 	add.w	r8, r8, #1
 80146f4:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 80146f8:	e720      	b.n	801453c <__kernel_rem_pio2+0x29c>
 80146fa:	4620      	mov	r0, r4
 80146fc:	4629      	mov	r1, r5
 80146fe:	f7ec f9e1 	bl	8000ac4 <__aeabi_d2iz>
 8014702:	ab0c      	add	r3, sp, #48	@ 0x30
 8014704:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8014708:	e718      	b.n	801453c <__kernel_rem_pio2+0x29c>
 801470a:	ab0c      	add	r3, sp, #48	@ 0x30
 801470c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8014710:	f7eb fed4 	bl	80004bc <__aeabi_i2d>
 8014714:	4622      	mov	r2, r4
 8014716:	462b      	mov	r3, r5
 8014718:	f7eb ff3a 	bl	8000590 <__aeabi_dmul>
 801471c:	4652      	mov	r2, sl
 801471e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8014722:	465b      	mov	r3, fp
 8014724:	4620      	mov	r0, r4
 8014726:	4629      	mov	r1, r5
 8014728:	f7eb ff32 	bl	8000590 <__aeabi_dmul>
 801472c:	3e01      	subs	r6, #1
 801472e:	4604      	mov	r4, r0
 8014730:	460d      	mov	r5, r1
 8014732:	e716      	b.n	8014562 <__kernel_rem_pio2+0x2c2>
 8014734:	9906      	ldr	r1, [sp, #24]
 8014736:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 801473a:	9106      	str	r1, [sp, #24]
 801473c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8014740:	f7eb ff26 	bl	8000590 <__aeabi_dmul>
 8014744:	4602      	mov	r2, r0
 8014746:	460b      	mov	r3, r1
 8014748:	4650      	mov	r0, sl
 801474a:	4659      	mov	r1, fp
 801474c:	f7eb fd6a 	bl	8000224 <__adddf3>
 8014750:	3601      	adds	r6, #1
 8014752:	4682      	mov	sl, r0
 8014754:	468b      	mov	fp, r1
 8014756:	9b00      	ldr	r3, [sp, #0]
 8014758:	429e      	cmp	r6, r3
 801475a:	dc01      	bgt.n	8014760 <__kernel_rem_pio2+0x4c0>
 801475c:	42ae      	cmp	r6, r5
 801475e:	dde9      	ble.n	8014734 <__kernel_rem_pio2+0x494>
 8014760:	ab48      	add	r3, sp, #288	@ 0x120
 8014762:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8014766:	e9c5 ab00 	strd	sl, fp, [r5]
 801476a:	3c01      	subs	r4, #1
 801476c:	e6fd      	b.n	801456a <__kernel_rem_pio2+0x2ca>
 801476e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8014770:	2b02      	cmp	r3, #2
 8014772:	dc0b      	bgt.n	801478c <__kernel_rem_pio2+0x4ec>
 8014774:	2b00      	cmp	r3, #0
 8014776:	dc35      	bgt.n	80147e4 <__kernel_rem_pio2+0x544>
 8014778:	d059      	beq.n	801482e <__kernel_rem_pio2+0x58e>
 801477a:	9b02      	ldr	r3, [sp, #8]
 801477c:	f003 0007 	and.w	r0, r3, #7
 8014780:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8014784:	ecbd 8b02 	vpop	{d8}
 8014788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801478c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 801478e:	2b03      	cmp	r3, #3
 8014790:	d1f3      	bne.n	801477a <__kernel_rem_pio2+0x4da>
 8014792:	9b05      	ldr	r3, [sp, #20]
 8014794:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8014798:	eb0d 0403 	add.w	r4, sp, r3
 801479c:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 80147a0:	4625      	mov	r5, r4
 80147a2:	46c2      	mov	sl, r8
 80147a4:	f1ba 0f00 	cmp.w	sl, #0
 80147a8:	dc69      	bgt.n	801487e <__kernel_rem_pio2+0x5de>
 80147aa:	4645      	mov	r5, r8
 80147ac:	2d01      	cmp	r5, #1
 80147ae:	f300 8087 	bgt.w	80148c0 <__kernel_rem_pio2+0x620>
 80147b2:	9c05      	ldr	r4, [sp, #20]
 80147b4:	ab48      	add	r3, sp, #288	@ 0x120
 80147b6:	441c      	add	r4, r3
 80147b8:	2000      	movs	r0, #0
 80147ba:	2100      	movs	r1, #0
 80147bc:	f1b8 0f01 	cmp.w	r8, #1
 80147c0:	f300 809c 	bgt.w	80148fc <__kernel_rem_pio2+0x65c>
 80147c4:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 80147c8:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 80147cc:	f1b9 0f00 	cmp.w	r9, #0
 80147d0:	f040 80a6 	bne.w	8014920 <__kernel_rem_pio2+0x680>
 80147d4:	9b04      	ldr	r3, [sp, #16]
 80147d6:	e9c3 5600 	strd	r5, r6, [r3]
 80147da:	e9c3 7802 	strd	r7, r8, [r3, #8]
 80147de:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80147e2:	e7ca      	b.n	801477a <__kernel_rem_pio2+0x4da>
 80147e4:	9d05      	ldr	r5, [sp, #20]
 80147e6:	ab48      	add	r3, sp, #288	@ 0x120
 80147e8:	441d      	add	r5, r3
 80147ea:	4644      	mov	r4, r8
 80147ec:	2000      	movs	r0, #0
 80147ee:	2100      	movs	r1, #0
 80147f0:	2c00      	cmp	r4, #0
 80147f2:	da35      	bge.n	8014860 <__kernel_rem_pio2+0x5c0>
 80147f4:	f1b9 0f00 	cmp.w	r9, #0
 80147f8:	d038      	beq.n	801486c <__kernel_rem_pio2+0x5cc>
 80147fa:	4602      	mov	r2, r0
 80147fc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8014800:	9c04      	ldr	r4, [sp, #16]
 8014802:	e9c4 2300 	strd	r2, r3, [r4]
 8014806:	4602      	mov	r2, r0
 8014808:	460b      	mov	r3, r1
 801480a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 801480e:	f7eb fd07 	bl	8000220 <__aeabi_dsub>
 8014812:	ad4a      	add	r5, sp, #296	@ 0x128
 8014814:	2401      	movs	r4, #1
 8014816:	45a0      	cmp	r8, r4
 8014818:	da2b      	bge.n	8014872 <__kernel_rem_pio2+0x5d2>
 801481a:	f1b9 0f00 	cmp.w	r9, #0
 801481e:	d002      	beq.n	8014826 <__kernel_rem_pio2+0x586>
 8014820:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8014824:	4619      	mov	r1, r3
 8014826:	9b04      	ldr	r3, [sp, #16]
 8014828:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801482c:	e7a5      	b.n	801477a <__kernel_rem_pio2+0x4da>
 801482e:	9c05      	ldr	r4, [sp, #20]
 8014830:	ab48      	add	r3, sp, #288	@ 0x120
 8014832:	441c      	add	r4, r3
 8014834:	2000      	movs	r0, #0
 8014836:	2100      	movs	r1, #0
 8014838:	f1b8 0f00 	cmp.w	r8, #0
 801483c:	da09      	bge.n	8014852 <__kernel_rem_pio2+0x5b2>
 801483e:	f1b9 0f00 	cmp.w	r9, #0
 8014842:	d002      	beq.n	801484a <__kernel_rem_pio2+0x5aa>
 8014844:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8014848:	4619      	mov	r1, r3
 801484a:	9b04      	ldr	r3, [sp, #16]
 801484c:	e9c3 0100 	strd	r0, r1, [r3]
 8014850:	e793      	b.n	801477a <__kernel_rem_pio2+0x4da>
 8014852:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8014856:	f7eb fce5 	bl	8000224 <__adddf3>
 801485a:	f108 38ff 	add.w	r8, r8, #4294967295
 801485e:	e7eb      	b.n	8014838 <__kernel_rem_pio2+0x598>
 8014860:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8014864:	f7eb fcde 	bl	8000224 <__adddf3>
 8014868:	3c01      	subs	r4, #1
 801486a:	e7c1      	b.n	80147f0 <__kernel_rem_pio2+0x550>
 801486c:	4602      	mov	r2, r0
 801486e:	460b      	mov	r3, r1
 8014870:	e7c6      	b.n	8014800 <__kernel_rem_pio2+0x560>
 8014872:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8014876:	f7eb fcd5 	bl	8000224 <__adddf3>
 801487a:	3401      	adds	r4, #1
 801487c:	e7cb      	b.n	8014816 <__kernel_rem_pio2+0x576>
 801487e:	ed35 7b02 	vldmdb	r5!, {d7}
 8014882:	ed8d 7b00 	vstr	d7, [sp]
 8014886:	ed95 7b02 	vldr	d7, [r5, #8]
 801488a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801488e:	ec53 2b17 	vmov	r2, r3, d7
 8014892:	ed8d 7b06 	vstr	d7, [sp, #24]
 8014896:	f7eb fcc5 	bl	8000224 <__adddf3>
 801489a:	4602      	mov	r2, r0
 801489c:	460b      	mov	r3, r1
 801489e:	4606      	mov	r6, r0
 80148a0:	460f      	mov	r7, r1
 80148a2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80148a6:	f7eb fcbb 	bl	8000220 <__aeabi_dsub>
 80148aa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80148ae:	f7eb fcb9 	bl	8000224 <__adddf3>
 80148b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80148b6:	e9c5 0102 	strd	r0, r1, [r5, #8]
 80148ba:	e9c5 6700 	strd	r6, r7, [r5]
 80148be:	e771      	b.n	80147a4 <__kernel_rem_pio2+0x504>
 80148c0:	ed34 7b02 	vldmdb	r4!, {d7}
 80148c4:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 80148c8:	ec51 0b17 	vmov	r0, r1, d7
 80148cc:	4652      	mov	r2, sl
 80148ce:	465b      	mov	r3, fp
 80148d0:	ed8d 7b00 	vstr	d7, [sp]
 80148d4:	f7eb fca6 	bl	8000224 <__adddf3>
 80148d8:	4602      	mov	r2, r0
 80148da:	460b      	mov	r3, r1
 80148dc:	4606      	mov	r6, r0
 80148de:	460f      	mov	r7, r1
 80148e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80148e4:	f7eb fc9c 	bl	8000220 <__aeabi_dsub>
 80148e8:	4652      	mov	r2, sl
 80148ea:	465b      	mov	r3, fp
 80148ec:	f7eb fc9a 	bl	8000224 <__adddf3>
 80148f0:	3d01      	subs	r5, #1
 80148f2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80148f6:	e9c4 6700 	strd	r6, r7, [r4]
 80148fa:	e757      	b.n	80147ac <__kernel_rem_pio2+0x50c>
 80148fc:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8014900:	f7eb fc90 	bl	8000224 <__adddf3>
 8014904:	f108 38ff 	add.w	r8, r8, #4294967295
 8014908:	e758      	b.n	80147bc <__kernel_rem_pio2+0x51c>
 801490a:	bf00      	nop
 801490c:	f3af 8000 	nop.w
	...
 8014918:	41700000 	.word	0x41700000
 801491c:	3e700000 	.word	0x3e700000
 8014920:	9b04      	ldr	r3, [sp, #16]
 8014922:	9a04      	ldr	r2, [sp, #16]
 8014924:	601d      	str	r5, [r3, #0]
 8014926:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 801492a:	605c      	str	r4, [r3, #4]
 801492c:	609f      	str	r7, [r3, #8]
 801492e:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 8014932:	60d3      	str	r3, [r2, #12]
 8014934:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8014938:	6110      	str	r0, [r2, #16]
 801493a:	6153      	str	r3, [r2, #20]
 801493c:	e71d      	b.n	801477a <__kernel_rem_pio2+0x4da>
 801493e:	bf00      	nop

08014940 <__kernel_rem_pio2f>:
 8014940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014944:	ed2d 8b04 	vpush	{d8-d9}
 8014948:	b0d9      	sub	sp, #356	@ 0x164
 801494a:	4690      	mov	r8, r2
 801494c:	9001      	str	r0, [sp, #4]
 801494e:	4ab6      	ldr	r2, [pc, #728]	@ (8014c28 <__kernel_rem_pio2f+0x2e8>)
 8014950:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8014952:	f118 0f04 	cmn.w	r8, #4
 8014956:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 801495a:	460f      	mov	r7, r1
 801495c:	f103 3bff 	add.w	fp, r3, #4294967295
 8014960:	db26      	blt.n	80149b0 <__kernel_rem_pio2f+0x70>
 8014962:	f1b8 0203 	subs.w	r2, r8, #3
 8014966:	bf48      	it	mi
 8014968:	f108 0204 	addmi.w	r2, r8, #4
 801496c:	10d2      	asrs	r2, r2, #3
 801496e:	1c55      	adds	r5, r2, #1
 8014970:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8014972:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 8014c38 <__kernel_rem_pio2f+0x2f8>
 8014976:	00e8      	lsls	r0, r5, #3
 8014978:	eba2 060b 	sub.w	r6, r2, fp
 801497c:	9002      	str	r0, [sp, #8]
 801497e:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 8014982:	eb0a 0c0b 	add.w	ip, sl, fp
 8014986:	ac1c      	add	r4, sp, #112	@ 0x70
 8014988:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 801498c:	2000      	movs	r0, #0
 801498e:	4560      	cmp	r0, ip
 8014990:	dd10      	ble.n	80149b4 <__kernel_rem_pio2f+0x74>
 8014992:	a91c      	add	r1, sp, #112	@ 0x70
 8014994:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8014998:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 801499c:	2600      	movs	r6, #0
 801499e:	4556      	cmp	r6, sl
 80149a0:	dc24      	bgt.n	80149ec <__kernel_rem_pio2f+0xac>
 80149a2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80149a6:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 8014c38 <__kernel_rem_pio2f+0x2f8>
 80149aa:	4684      	mov	ip, r0
 80149ac:	2400      	movs	r4, #0
 80149ae:	e016      	b.n	80149de <__kernel_rem_pio2f+0x9e>
 80149b0:	2200      	movs	r2, #0
 80149b2:	e7dc      	b.n	801496e <__kernel_rem_pio2f+0x2e>
 80149b4:	42c6      	cmn	r6, r0
 80149b6:	bf5d      	ittte	pl
 80149b8:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 80149bc:	ee07 1a90 	vmovpl	s15, r1
 80149c0:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80149c4:	eef0 7a47 	vmovmi.f32	s15, s14
 80149c8:	ece4 7a01 	vstmia	r4!, {s15}
 80149cc:	3001      	adds	r0, #1
 80149ce:	e7de      	b.n	801498e <__kernel_rem_pio2f+0x4e>
 80149d0:	ecfe 6a01 	vldmia	lr!, {s13}
 80149d4:	ed3c 7a01 	vldmdb	ip!, {s14}
 80149d8:	eee6 7a87 	vfma.f32	s15, s13, s14
 80149dc:	3401      	adds	r4, #1
 80149de:	455c      	cmp	r4, fp
 80149e0:	ddf6      	ble.n	80149d0 <__kernel_rem_pio2f+0x90>
 80149e2:	ece9 7a01 	vstmia	r9!, {s15}
 80149e6:	3601      	adds	r6, #1
 80149e8:	3004      	adds	r0, #4
 80149ea:	e7d8      	b.n	801499e <__kernel_rem_pio2f+0x5e>
 80149ec:	a908      	add	r1, sp, #32
 80149ee:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80149f2:	9104      	str	r1, [sp, #16]
 80149f4:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 80149f6:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 8014c34 <__kernel_rem_pio2f+0x2f4>
 80149fa:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 8014c30 <__kernel_rem_pio2f+0x2f0>
 80149fe:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8014a02:	9203      	str	r2, [sp, #12]
 8014a04:	4654      	mov	r4, sl
 8014a06:	00a2      	lsls	r2, r4, #2
 8014a08:	9205      	str	r2, [sp, #20]
 8014a0a:	aa58      	add	r2, sp, #352	@ 0x160
 8014a0c:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8014a10:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8014a14:	a944      	add	r1, sp, #272	@ 0x110
 8014a16:	aa08      	add	r2, sp, #32
 8014a18:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8014a1c:	4694      	mov	ip, r2
 8014a1e:	4626      	mov	r6, r4
 8014a20:	2e00      	cmp	r6, #0
 8014a22:	dc4c      	bgt.n	8014abe <__kernel_rem_pio2f+0x17e>
 8014a24:	4628      	mov	r0, r5
 8014a26:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8014a2a:	f7ff fbd3 	bl	80141d4 <scalbnf>
 8014a2e:	eeb0 8a40 	vmov.f32	s16, s0
 8014a32:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 8014a36:	ee28 0a00 	vmul.f32	s0, s16, s0
 8014a3a:	f000 fa65 	bl	8014f08 <floorf>
 8014a3e:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8014a42:	eea0 8a67 	vfms.f32	s16, s0, s15
 8014a46:	2d00      	cmp	r5, #0
 8014a48:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014a4c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8014a50:	ee17 9a90 	vmov	r9, s15
 8014a54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014a58:	ee38 8a67 	vsub.f32	s16, s16, s15
 8014a5c:	dd41      	ble.n	8014ae2 <__kernel_rem_pio2f+0x1a2>
 8014a5e:	f104 3cff 	add.w	ip, r4, #4294967295
 8014a62:	a908      	add	r1, sp, #32
 8014a64:	f1c5 0e08 	rsb	lr, r5, #8
 8014a68:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8014a6c:	fa46 f00e 	asr.w	r0, r6, lr
 8014a70:	4481      	add	r9, r0
 8014a72:	fa00 f00e 	lsl.w	r0, r0, lr
 8014a76:	1a36      	subs	r6, r6, r0
 8014a78:	f1c5 0007 	rsb	r0, r5, #7
 8014a7c:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8014a80:	4106      	asrs	r6, r0
 8014a82:	2e00      	cmp	r6, #0
 8014a84:	dd3c      	ble.n	8014b00 <__kernel_rem_pio2f+0x1c0>
 8014a86:	f04f 0e00 	mov.w	lr, #0
 8014a8a:	f109 0901 	add.w	r9, r9, #1
 8014a8e:	4670      	mov	r0, lr
 8014a90:	4574      	cmp	r4, lr
 8014a92:	dc68      	bgt.n	8014b66 <__kernel_rem_pio2f+0x226>
 8014a94:	2d00      	cmp	r5, #0
 8014a96:	dd03      	ble.n	8014aa0 <__kernel_rem_pio2f+0x160>
 8014a98:	2d01      	cmp	r5, #1
 8014a9a:	d074      	beq.n	8014b86 <__kernel_rem_pio2f+0x246>
 8014a9c:	2d02      	cmp	r5, #2
 8014a9e:	d07d      	beq.n	8014b9c <__kernel_rem_pio2f+0x25c>
 8014aa0:	2e02      	cmp	r6, #2
 8014aa2:	d12d      	bne.n	8014b00 <__kernel_rem_pio2f+0x1c0>
 8014aa4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8014aa8:	ee30 8a48 	vsub.f32	s16, s0, s16
 8014aac:	b340      	cbz	r0, 8014b00 <__kernel_rem_pio2f+0x1c0>
 8014aae:	4628      	mov	r0, r5
 8014ab0:	9306      	str	r3, [sp, #24]
 8014ab2:	f7ff fb8f 	bl	80141d4 <scalbnf>
 8014ab6:	9b06      	ldr	r3, [sp, #24]
 8014ab8:	ee38 8a40 	vsub.f32	s16, s16, s0
 8014abc:	e020      	b.n	8014b00 <__kernel_rem_pio2f+0x1c0>
 8014abe:	ee60 7a28 	vmul.f32	s15, s0, s17
 8014ac2:	3e01      	subs	r6, #1
 8014ac4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014ac8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014acc:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8014ad0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8014ad4:	ecac 0a01 	vstmia	ip!, {s0}
 8014ad8:	ed30 0a01 	vldmdb	r0!, {s0}
 8014adc:	ee37 0a80 	vadd.f32	s0, s15, s0
 8014ae0:	e79e      	b.n	8014a20 <__kernel_rem_pio2f+0xe0>
 8014ae2:	d105      	bne.n	8014af0 <__kernel_rem_pio2f+0x1b0>
 8014ae4:	1e60      	subs	r0, r4, #1
 8014ae6:	a908      	add	r1, sp, #32
 8014ae8:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8014aec:	11f6      	asrs	r6, r6, #7
 8014aee:	e7c8      	b.n	8014a82 <__kernel_rem_pio2f+0x142>
 8014af0:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8014af4:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8014af8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014afc:	da31      	bge.n	8014b62 <__kernel_rem_pio2f+0x222>
 8014afe:	2600      	movs	r6, #0
 8014b00:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8014b04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b08:	f040 8098 	bne.w	8014c3c <__kernel_rem_pio2f+0x2fc>
 8014b0c:	1e60      	subs	r0, r4, #1
 8014b0e:	2200      	movs	r2, #0
 8014b10:	4550      	cmp	r0, sl
 8014b12:	da4b      	bge.n	8014bac <__kernel_rem_pio2f+0x26c>
 8014b14:	2a00      	cmp	r2, #0
 8014b16:	d065      	beq.n	8014be4 <__kernel_rem_pio2f+0x2a4>
 8014b18:	3c01      	subs	r4, #1
 8014b1a:	ab08      	add	r3, sp, #32
 8014b1c:	3d08      	subs	r5, #8
 8014b1e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8014b22:	2b00      	cmp	r3, #0
 8014b24:	d0f8      	beq.n	8014b18 <__kernel_rem_pio2f+0x1d8>
 8014b26:	4628      	mov	r0, r5
 8014b28:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8014b2c:	f7ff fb52 	bl	80141d4 <scalbnf>
 8014b30:	1c63      	adds	r3, r4, #1
 8014b32:	aa44      	add	r2, sp, #272	@ 0x110
 8014b34:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8014c34 <__kernel_rem_pio2f+0x2f4>
 8014b38:	0099      	lsls	r1, r3, #2
 8014b3a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8014b3e:	4623      	mov	r3, r4
 8014b40:	2b00      	cmp	r3, #0
 8014b42:	f280 80a9 	bge.w	8014c98 <__kernel_rem_pio2f+0x358>
 8014b46:	4623      	mov	r3, r4
 8014b48:	2b00      	cmp	r3, #0
 8014b4a:	f2c0 80c7 	blt.w	8014cdc <__kernel_rem_pio2f+0x39c>
 8014b4e:	aa44      	add	r2, sp, #272	@ 0x110
 8014b50:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8014b54:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8014c2c <__kernel_rem_pio2f+0x2ec>
 8014b58:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8014c38 <__kernel_rem_pio2f+0x2f8>
 8014b5c:	2000      	movs	r0, #0
 8014b5e:	1ae2      	subs	r2, r4, r3
 8014b60:	e0b1      	b.n	8014cc6 <__kernel_rem_pio2f+0x386>
 8014b62:	2602      	movs	r6, #2
 8014b64:	e78f      	b.n	8014a86 <__kernel_rem_pio2f+0x146>
 8014b66:	f852 1b04 	ldr.w	r1, [r2], #4
 8014b6a:	b948      	cbnz	r0, 8014b80 <__kernel_rem_pio2f+0x240>
 8014b6c:	b121      	cbz	r1, 8014b78 <__kernel_rem_pio2f+0x238>
 8014b6e:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8014b72:	f842 1c04 	str.w	r1, [r2, #-4]
 8014b76:	2101      	movs	r1, #1
 8014b78:	f10e 0e01 	add.w	lr, lr, #1
 8014b7c:	4608      	mov	r0, r1
 8014b7e:	e787      	b.n	8014a90 <__kernel_rem_pio2f+0x150>
 8014b80:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8014b84:	e7f5      	b.n	8014b72 <__kernel_rem_pio2f+0x232>
 8014b86:	f104 3cff 	add.w	ip, r4, #4294967295
 8014b8a:	aa08      	add	r2, sp, #32
 8014b8c:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8014b90:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8014b94:	a908      	add	r1, sp, #32
 8014b96:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8014b9a:	e781      	b.n	8014aa0 <__kernel_rem_pio2f+0x160>
 8014b9c:	f104 3cff 	add.w	ip, r4, #4294967295
 8014ba0:	aa08      	add	r2, sp, #32
 8014ba2:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8014ba6:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8014baa:	e7f3      	b.n	8014b94 <__kernel_rem_pio2f+0x254>
 8014bac:	a908      	add	r1, sp, #32
 8014bae:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8014bb2:	3801      	subs	r0, #1
 8014bb4:	430a      	orrs	r2, r1
 8014bb6:	e7ab      	b.n	8014b10 <__kernel_rem_pio2f+0x1d0>
 8014bb8:	3201      	adds	r2, #1
 8014bba:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8014bbe:	2e00      	cmp	r6, #0
 8014bc0:	d0fa      	beq.n	8014bb8 <__kernel_rem_pio2f+0x278>
 8014bc2:	9905      	ldr	r1, [sp, #20]
 8014bc4:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8014bc8:	eb0d 0001 	add.w	r0, sp, r1
 8014bcc:	18e6      	adds	r6, r4, r3
 8014bce:	a91c      	add	r1, sp, #112	@ 0x70
 8014bd0:	f104 0c01 	add.w	ip, r4, #1
 8014bd4:	384c      	subs	r0, #76	@ 0x4c
 8014bd6:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8014bda:	4422      	add	r2, r4
 8014bdc:	4562      	cmp	r2, ip
 8014bde:	da04      	bge.n	8014bea <__kernel_rem_pio2f+0x2aa>
 8014be0:	4614      	mov	r4, r2
 8014be2:	e710      	b.n	8014a06 <__kernel_rem_pio2f+0xc6>
 8014be4:	9804      	ldr	r0, [sp, #16]
 8014be6:	2201      	movs	r2, #1
 8014be8:	e7e7      	b.n	8014bba <__kernel_rem_pio2f+0x27a>
 8014bea:	9903      	ldr	r1, [sp, #12]
 8014bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8014bf0:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8014bf4:	9105      	str	r1, [sp, #20]
 8014bf6:	ee07 1a90 	vmov	s15, r1
 8014bfa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014bfe:	2400      	movs	r4, #0
 8014c00:	ece6 7a01 	vstmia	r6!, {s15}
 8014c04:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8014c38 <__kernel_rem_pio2f+0x2f8>
 8014c08:	46b1      	mov	r9, r6
 8014c0a:	455c      	cmp	r4, fp
 8014c0c:	dd04      	ble.n	8014c18 <__kernel_rem_pio2f+0x2d8>
 8014c0e:	ece0 7a01 	vstmia	r0!, {s15}
 8014c12:	f10c 0c01 	add.w	ip, ip, #1
 8014c16:	e7e1      	b.n	8014bdc <__kernel_rem_pio2f+0x29c>
 8014c18:	ecfe 6a01 	vldmia	lr!, {s13}
 8014c1c:	ed39 7a01 	vldmdb	r9!, {s14}
 8014c20:	3401      	adds	r4, #1
 8014c22:	eee6 7a87 	vfma.f32	s15, s13, s14
 8014c26:	e7f0      	b.n	8014c0a <__kernel_rem_pio2f+0x2ca>
 8014c28:	080155ec 	.word	0x080155ec
 8014c2c:	080155c0 	.word	0x080155c0
 8014c30:	43800000 	.word	0x43800000
 8014c34:	3b800000 	.word	0x3b800000
 8014c38:	00000000 	.word	0x00000000
 8014c3c:	9b02      	ldr	r3, [sp, #8]
 8014c3e:	eeb0 0a48 	vmov.f32	s0, s16
 8014c42:	eba3 0008 	sub.w	r0, r3, r8
 8014c46:	f7ff fac5 	bl	80141d4 <scalbnf>
 8014c4a:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8014c30 <__kernel_rem_pio2f+0x2f0>
 8014c4e:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8014c52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c56:	db19      	blt.n	8014c8c <__kernel_rem_pio2f+0x34c>
 8014c58:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8014c34 <__kernel_rem_pio2f+0x2f4>
 8014c5c:	ee60 7a27 	vmul.f32	s15, s0, s15
 8014c60:	aa08      	add	r2, sp, #32
 8014c62:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014c66:	3508      	adds	r5, #8
 8014c68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014c6c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8014c70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014c74:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8014c78:	ee10 3a10 	vmov	r3, s0
 8014c7c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8014c80:	ee17 3a90 	vmov	r3, s15
 8014c84:	3401      	adds	r4, #1
 8014c86:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8014c8a:	e74c      	b.n	8014b26 <__kernel_rem_pio2f+0x1e6>
 8014c8c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8014c90:	aa08      	add	r2, sp, #32
 8014c92:	ee10 3a10 	vmov	r3, s0
 8014c96:	e7f6      	b.n	8014c86 <__kernel_rem_pio2f+0x346>
 8014c98:	a808      	add	r0, sp, #32
 8014c9a:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8014c9e:	9001      	str	r0, [sp, #4]
 8014ca0:	ee07 0a90 	vmov	s15, r0
 8014ca4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014ca8:	3b01      	subs	r3, #1
 8014caa:	ee67 7a80 	vmul.f32	s15, s15, s0
 8014cae:	ee20 0a07 	vmul.f32	s0, s0, s14
 8014cb2:	ed62 7a01 	vstmdb	r2!, {s15}
 8014cb6:	e743      	b.n	8014b40 <__kernel_rem_pio2f+0x200>
 8014cb8:	ecfc 6a01 	vldmia	ip!, {s13}
 8014cbc:	ecb5 7a01 	vldmia	r5!, {s14}
 8014cc0:	eee6 7a87 	vfma.f32	s15, s13, s14
 8014cc4:	3001      	adds	r0, #1
 8014cc6:	4550      	cmp	r0, sl
 8014cc8:	dc01      	bgt.n	8014cce <__kernel_rem_pio2f+0x38e>
 8014cca:	4290      	cmp	r0, r2
 8014ccc:	ddf4      	ble.n	8014cb8 <__kernel_rem_pio2f+0x378>
 8014cce:	a858      	add	r0, sp, #352	@ 0x160
 8014cd0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8014cd4:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8014cd8:	3b01      	subs	r3, #1
 8014cda:	e735      	b.n	8014b48 <__kernel_rem_pio2f+0x208>
 8014cdc:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8014cde:	2b02      	cmp	r3, #2
 8014ce0:	dc09      	bgt.n	8014cf6 <__kernel_rem_pio2f+0x3b6>
 8014ce2:	2b00      	cmp	r3, #0
 8014ce4:	dc27      	bgt.n	8014d36 <__kernel_rem_pio2f+0x3f6>
 8014ce6:	d040      	beq.n	8014d6a <__kernel_rem_pio2f+0x42a>
 8014ce8:	f009 0007 	and.w	r0, r9, #7
 8014cec:	b059      	add	sp, #356	@ 0x164
 8014cee:	ecbd 8b04 	vpop	{d8-d9}
 8014cf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014cf6:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8014cf8:	2b03      	cmp	r3, #3
 8014cfa:	d1f5      	bne.n	8014ce8 <__kernel_rem_pio2f+0x3a8>
 8014cfc:	aa30      	add	r2, sp, #192	@ 0xc0
 8014cfe:	1f0b      	subs	r3, r1, #4
 8014d00:	4413      	add	r3, r2
 8014d02:	461a      	mov	r2, r3
 8014d04:	4620      	mov	r0, r4
 8014d06:	2800      	cmp	r0, #0
 8014d08:	dc50      	bgt.n	8014dac <__kernel_rem_pio2f+0x46c>
 8014d0a:	4622      	mov	r2, r4
 8014d0c:	2a01      	cmp	r2, #1
 8014d0e:	dc5d      	bgt.n	8014dcc <__kernel_rem_pio2f+0x48c>
 8014d10:	ab30      	add	r3, sp, #192	@ 0xc0
 8014d12:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 8014c38 <__kernel_rem_pio2f+0x2f8>
 8014d16:	440b      	add	r3, r1
 8014d18:	2c01      	cmp	r4, #1
 8014d1a:	dc67      	bgt.n	8014dec <__kernel_rem_pio2f+0x4ac>
 8014d1c:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8014d20:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8014d24:	2e00      	cmp	r6, #0
 8014d26:	d167      	bne.n	8014df8 <__kernel_rem_pio2f+0x4b8>
 8014d28:	edc7 6a00 	vstr	s13, [r7]
 8014d2c:	ed87 7a01 	vstr	s14, [r7, #4]
 8014d30:	edc7 7a02 	vstr	s15, [r7, #8]
 8014d34:	e7d8      	b.n	8014ce8 <__kernel_rem_pio2f+0x3a8>
 8014d36:	ab30      	add	r3, sp, #192	@ 0xc0
 8014d38:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 8014c38 <__kernel_rem_pio2f+0x2f8>
 8014d3c:	440b      	add	r3, r1
 8014d3e:	4622      	mov	r2, r4
 8014d40:	2a00      	cmp	r2, #0
 8014d42:	da24      	bge.n	8014d8e <__kernel_rem_pio2f+0x44e>
 8014d44:	b34e      	cbz	r6, 8014d9a <__kernel_rem_pio2f+0x45a>
 8014d46:	eef1 7a47 	vneg.f32	s15, s14
 8014d4a:	edc7 7a00 	vstr	s15, [r7]
 8014d4e:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 8014d52:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014d56:	aa31      	add	r2, sp, #196	@ 0xc4
 8014d58:	2301      	movs	r3, #1
 8014d5a:	429c      	cmp	r4, r3
 8014d5c:	da20      	bge.n	8014da0 <__kernel_rem_pio2f+0x460>
 8014d5e:	b10e      	cbz	r6, 8014d64 <__kernel_rem_pio2f+0x424>
 8014d60:	eef1 7a67 	vneg.f32	s15, s15
 8014d64:	edc7 7a01 	vstr	s15, [r7, #4]
 8014d68:	e7be      	b.n	8014ce8 <__kernel_rem_pio2f+0x3a8>
 8014d6a:	ab30      	add	r3, sp, #192	@ 0xc0
 8014d6c:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 8014c38 <__kernel_rem_pio2f+0x2f8>
 8014d70:	440b      	add	r3, r1
 8014d72:	2c00      	cmp	r4, #0
 8014d74:	da05      	bge.n	8014d82 <__kernel_rem_pio2f+0x442>
 8014d76:	b10e      	cbz	r6, 8014d7c <__kernel_rem_pio2f+0x43c>
 8014d78:	eef1 7a67 	vneg.f32	s15, s15
 8014d7c:	edc7 7a00 	vstr	s15, [r7]
 8014d80:	e7b2      	b.n	8014ce8 <__kernel_rem_pio2f+0x3a8>
 8014d82:	ed33 7a01 	vldmdb	r3!, {s14}
 8014d86:	3c01      	subs	r4, #1
 8014d88:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014d8c:	e7f1      	b.n	8014d72 <__kernel_rem_pio2f+0x432>
 8014d8e:	ed73 7a01 	vldmdb	r3!, {s15}
 8014d92:	3a01      	subs	r2, #1
 8014d94:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014d98:	e7d2      	b.n	8014d40 <__kernel_rem_pio2f+0x400>
 8014d9a:	eef0 7a47 	vmov.f32	s15, s14
 8014d9e:	e7d4      	b.n	8014d4a <__kernel_rem_pio2f+0x40a>
 8014da0:	ecb2 7a01 	vldmia	r2!, {s14}
 8014da4:	3301      	adds	r3, #1
 8014da6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014daa:	e7d6      	b.n	8014d5a <__kernel_rem_pio2f+0x41a>
 8014dac:	ed72 7a01 	vldmdb	r2!, {s15}
 8014db0:	edd2 6a01 	vldr	s13, [r2, #4]
 8014db4:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8014db8:	3801      	subs	r0, #1
 8014dba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014dbe:	ed82 7a00 	vstr	s14, [r2]
 8014dc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014dc6:	edc2 7a01 	vstr	s15, [r2, #4]
 8014dca:	e79c      	b.n	8014d06 <__kernel_rem_pio2f+0x3c6>
 8014dcc:	ed73 7a01 	vldmdb	r3!, {s15}
 8014dd0:	edd3 6a01 	vldr	s13, [r3, #4]
 8014dd4:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8014dd8:	3a01      	subs	r2, #1
 8014dda:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014dde:	ed83 7a00 	vstr	s14, [r3]
 8014de2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014de6:	edc3 7a01 	vstr	s15, [r3, #4]
 8014dea:	e78f      	b.n	8014d0c <__kernel_rem_pio2f+0x3cc>
 8014dec:	ed33 7a01 	vldmdb	r3!, {s14}
 8014df0:	3c01      	subs	r4, #1
 8014df2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014df6:	e78f      	b.n	8014d18 <__kernel_rem_pio2f+0x3d8>
 8014df8:	eef1 6a66 	vneg.f32	s13, s13
 8014dfc:	eeb1 7a47 	vneg.f32	s14, s14
 8014e00:	edc7 6a00 	vstr	s13, [r7]
 8014e04:	ed87 7a01 	vstr	s14, [r7, #4]
 8014e08:	eef1 7a67 	vneg.f32	s15, s15
 8014e0c:	e790      	b.n	8014d30 <__kernel_rem_pio2f+0x3f0>
 8014e0e:	bf00      	nop

08014e10 <floor>:
 8014e10:	ec51 0b10 	vmov	r0, r1, d0
 8014e14:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8014e18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014e1c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8014e20:	2e13      	cmp	r6, #19
 8014e22:	460c      	mov	r4, r1
 8014e24:	4605      	mov	r5, r0
 8014e26:	4680      	mov	r8, r0
 8014e28:	dc34      	bgt.n	8014e94 <floor+0x84>
 8014e2a:	2e00      	cmp	r6, #0
 8014e2c:	da17      	bge.n	8014e5e <floor+0x4e>
 8014e2e:	a332      	add	r3, pc, #200	@ (adr r3, 8014ef8 <floor+0xe8>)
 8014e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e34:	f7eb f9f6 	bl	8000224 <__adddf3>
 8014e38:	2200      	movs	r2, #0
 8014e3a:	2300      	movs	r3, #0
 8014e3c:	f7eb fe38 	bl	8000ab0 <__aeabi_dcmpgt>
 8014e40:	b150      	cbz	r0, 8014e58 <floor+0x48>
 8014e42:	2c00      	cmp	r4, #0
 8014e44:	da55      	bge.n	8014ef2 <floor+0xe2>
 8014e46:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8014e4a:	432c      	orrs	r4, r5
 8014e4c:	2500      	movs	r5, #0
 8014e4e:	42ac      	cmp	r4, r5
 8014e50:	4c2b      	ldr	r4, [pc, #172]	@ (8014f00 <floor+0xf0>)
 8014e52:	bf08      	it	eq
 8014e54:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8014e58:	4621      	mov	r1, r4
 8014e5a:	4628      	mov	r0, r5
 8014e5c:	e023      	b.n	8014ea6 <floor+0x96>
 8014e5e:	4f29      	ldr	r7, [pc, #164]	@ (8014f04 <floor+0xf4>)
 8014e60:	4137      	asrs	r7, r6
 8014e62:	ea01 0307 	and.w	r3, r1, r7
 8014e66:	4303      	orrs	r3, r0
 8014e68:	d01d      	beq.n	8014ea6 <floor+0x96>
 8014e6a:	a323      	add	r3, pc, #140	@ (adr r3, 8014ef8 <floor+0xe8>)
 8014e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e70:	f7eb f9d8 	bl	8000224 <__adddf3>
 8014e74:	2200      	movs	r2, #0
 8014e76:	2300      	movs	r3, #0
 8014e78:	f7eb fe1a 	bl	8000ab0 <__aeabi_dcmpgt>
 8014e7c:	2800      	cmp	r0, #0
 8014e7e:	d0eb      	beq.n	8014e58 <floor+0x48>
 8014e80:	2c00      	cmp	r4, #0
 8014e82:	bfbe      	ittt	lt
 8014e84:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8014e88:	4133      	asrlt	r3, r6
 8014e8a:	18e4      	addlt	r4, r4, r3
 8014e8c:	ea24 0407 	bic.w	r4, r4, r7
 8014e90:	2500      	movs	r5, #0
 8014e92:	e7e1      	b.n	8014e58 <floor+0x48>
 8014e94:	2e33      	cmp	r6, #51	@ 0x33
 8014e96:	dd0a      	ble.n	8014eae <floor+0x9e>
 8014e98:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8014e9c:	d103      	bne.n	8014ea6 <floor+0x96>
 8014e9e:	4602      	mov	r2, r0
 8014ea0:	460b      	mov	r3, r1
 8014ea2:	f7eb f9bf 	bl	8000224 <__adddf3>
 8014ea6:	ec41 0b10 	vmov	d0, r0, r1
 8014eaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014eae:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8014eb2:	f04f 37ff 	mov.w	r7, #4294967295
 8014eb6:	40df      	lsrs	r7, r3
 8014eb8:	4207      	tst	r7, r0
 8014eba:	d0f4      	beq.n	8014ea6 <floor+0x96>
 8014ebc:	a30e      	add	r3, pc, #56	@ (adr r3, 8014ef8 <floor+0xe8>)
 8014ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ec2:	f7eb f9af 	bl	8000224 <__adddf3>
 8014ec6:	2200      	movs	r2, #0
 8014ec8:	2300      	movs	r3, #0
 8014eca:	f7eb fdf1 	bl	8000ab0 <__aeabi_dcmpgt>
 8014ece:	2800      	cmp	r0, #0
 8014ed0:	d0c2      	beq.n	8014e58 <floor+0x48>
 8014ed2:	2c00      	cmp	r4, #0
 8014ed4:	da0a      	bge.n	8014eec <floor+0xdc>
 8014ed6:	2e14      	cmp	r6, #20
 8014ed8:	d101      	bne.n	8014ede <floor+0xce>
 8014eda:	3401      	adds	r4, #1
 8014edc:	e006      	b.n	8014eec <floor+0xdc>
 8014ede:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8014ee2:	2301      	movs	r3, #1
 8014ee4:	40b3      	lsls	r3, r6
 8014ee6:	441d      	add	r5, r3
 8014ee8:	4545      	cmp	r5, r8
 8014eea:	d3f6      	bcc.n	8014eda <floor+0xca>
 8014eec:	ea25 0507 	bic.w	r5, r5, r7
 8014ef0:	e7b2      	b.n	8014e58 <floor+0x48>
 8014ef2:	2500      	movs	r5, #0
 8014ef4:	462c      	mov	r4, r5
 8014ef6:	e7af      	b.n	8014e58 <floor+0x48>
 8014ef8:	8800759c 	.word	0x8800759c
 8014efc:	7e37e43c 	.word	0x7e37e43c
 8014f00:	bff00000 	.word	0xbff00000
 8014f04:	000fffff 	.word	0x000fffff

08014f08 <floorf>:
 8014f08:	ee10 3a10 	vmov	r3, s0
 8014f0c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8014f10:	3a7f      	subs	r2, #127	@ 0x7f
 8014f12:	2a16      	cmp	r2, #22
 8014f14:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8014f18:	dc2b      	bgt.n	8014f72 <floorf+0x6a>
 8014f1a:	2a00      	cmp	r2, #0
 8014f1c:	da12      	bge.n	8014f44 <floorf+0x3c>
 8014f1e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8014f84 <floorf+0x7c>
 8014f22:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014f26:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8014f2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f2e:	dd06      	ble.n	8014f3e <floorf+0x36>
 8014f30:	2b00      	cmp	r3, #0
 8014f32:	da24      	bge.n	8014f7e <floorf+0x76>
 8014f34:	2900      	cmp	r1, #0
 8014f36:	4b14      	ldr	r3, [pc, #80]	@ (8014f88 <floorf+0x80>)
 8014f38:	bf08      	it	eq
 8014f3a:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8014f3e:	ee00 3a10 	vmov	s0, r3
 8014f42:	4770      	bx	lr
 8014f44:	4911      	ldr	r1, [pc, #68]	@ (8014f8c <floorf+0x84>)
 8014f46:	4111      	asrs	r1, r2
 8014f48:	420b      	tst	r3, r1
 8014f4a:	d0fa      	beq.n	8014f42 <floorf+0x3a>
 8014f4c:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8014f84 <floorf+0x7c>
 8014f50:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014f54:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8014f58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f5c:	ddef      	ble.n	8014f3e <floorf+0x36>
 8014f5e:	2b00      	cmp	r3, #0
 8014f60:	bfbe      	ittt	lt
 8014f62:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8014f66:	fa40 f202 	asrlt.w	r2, r0, r2
 8014f6a:	189b      	addlt	r3, r3, r2
 8014f6c:	ea23 0301 	bic.w	r3, r3, r1
 8014f70:	e7e5      	b.n	8014f3e <floorf+0x36>
 8014f72:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8014f76:	d3e4      	bcc.n	8014f42 <floorf+0x3a>
 8014f78:	ee30 0a00 	vadd.f32	s0, s0, s0
 8014f7c:	4770      	bx	lr
 8014f7e:	2300      	movs	r3, #0
 8014f80:	e7dd      	b.n	8014f3e <floorf+0x36>
 8014f82:	bf00      	nop
 8014f84:	7149f2ca 	.word	0x7149f2ca
 8014f88:	bf800000 	.word	0xbf800000
 8014f8c:	007fffff 	.word	0x007fffff

08014f90 <_init>:
 8014f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014f92:	bf00      	nop
 8014f94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014f96:	bc08      	pop	{r3}
 8014f98:	469e      	mov	lr, r3
 8014f9a:	4770      	bx	lr

08014f9c <_fini>:
 8014f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014f9e:	bf00      	nop
 8014fa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014fa2:	bc08      	pop	{r3}
 8014fa4:	469e      	mov	lr, r3
 8014fa6:	4770      	bx	lr
