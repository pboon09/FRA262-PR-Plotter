
verticle_plotter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000111c0  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000610  08011398  08011398  00012398  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080119a8  080119a8  00013158  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080119a8  080119a8  000129a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080119b0  080119b0  00013158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080119b0  080119b0  000129b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080119b4  080119b4  000129b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000158  20000000  080119b8  00013000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002118  20000158  08011b10  00013158  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002270  08011b10  00013270  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00013158  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b962  00000000  00000000  00013188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000053a6  00000000  00000000  0003eaea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c50  00000000  00000000  00043e90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000015f7  00000000  00000000  00045ae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d6ed  00000000  00000000  000470d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002a36e  00000000  00000000  000747c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00119e33  00000000  00000000  0009eb32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001b8965  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000081b8  00000000  00000000  001b89a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  001c0b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000158 	.word	0x20000158
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08011380 	.word	0x08011380

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000015c 	.word	0x2000015c
 8000214:	08011380 	.word	0x08011380

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2iz>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000acc:	d215      	bcs.n	8000afa <__aeabi_d2iz+0x36>
 8000ace:	d511      	bpl.n	8000af4 <__aeabi_d2iz+0x30>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d912      	bls.n	8000b00 <__aeabi_d2iz+0x3c>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d105      	bne.n	8000b0c <__aeabi_d2iz+0x48>
 8000b00:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b04:	bf08      	it	eq
 8000b06:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_d2uiz>:
 8000b14:	004a      	lsls	r2, r1, #1
 8000b16:	d211      	bcs.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b18:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b1c:	d211      	bcs.n	8000b42 <__aeabi_d2uiz+0x2e>
 8000b1e:	d50d      	bpl.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b20:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b24:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b28:	d40e      	bmi.n	8000b48 <__aeabi_d2uiz+0x34>
 8000b2a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b32:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	4770      	bx	lr
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b46:	d102      	bne.n	8000b4e <__aeabi_d2uiz+0x3a>
 8000b48:	f04f 30ff 	mov.w	r0, #4294967295
 8000b4c:	4770      	bx	lr
 8000b4e:	f04f 0000 	mov.w	r0, #0
 8000b52:	4770      	bx	lr

08000b54 <__aeabi_d2f>:
 8000b54:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b58:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b5c:	bf24      	itt	cs
 8000b5e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b62:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b66:	d90d      	bls.n	8000b84 <__aeabi_d2f+0x30>
 8000b68:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b6c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b70:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b74:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b78:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b7c:	bf08      	it	eq
 8000b7e:	f020 0001 	biceq.w	r0, r0, #1
 8000b82:	4770      	bx	lr
 8000b84:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b88:	d121      	bne.n	8000bce <__aeabi_d2f+0x7a>
 8000b8a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b8e:	bfbc      	itt	lt
 8000b90:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b94:	4770      	bxlt	lr
 8000b96:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b9a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b9e:	f1c2 0218 	rsb	r2, r2, #24
 8000ba2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ba6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000baa:	fa20 f002 	lsr.w	r0, r0, r2
 8000bae:	bf18      	it	ne
 8000bb0:	f040 0001 	orrne.w	r0, r0, #1
 8000bb4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bbc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc0:	ea40 000c 	orr.w	r0, r0, ip
 8000bc4:	fa23 f302 	lsr.w	r3, r3, r2
 8000bc8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bcc:	e7cc      	b.n	8000b68 <__aeabi_d2f+0x14>
 8000bce:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd2:	d107      	bne.n	8000be4 <__aeabi_d2f+0x90>
 8000bd4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bd8:	bf1e      	ittt	ne
 8000bda:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bde:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000be2:	4770      	bxne	lr
 8000be4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bec:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop

08000bf4 <__aeabi_uldivmod>:
 8000bf4:	b953      	cbnz	r3, 8000c0c <__aeabi_uldivmod+0x18>
 8000bf6:	b94a      	cbnz	r2, 8000c0c <__aeabi_uldivmod+0x18>
 8000bf8:	2900      	cmp	r1, #0
 8000bfa:	bf08      	it	eq
 8000bfc:	2800      	cmpeq	r0, #0
 8000bfe:	bf1c      	itt	ne
 8000c00:	f04f 31ff 	movne.w	r1, #4294967295
 8000c04:	f04f 30ff 	movne.w	r0, #4294967295
 8000c08:	f000 b988 	b.w	8000f1c <__aeabi_idiv0>
 8000c0c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c10:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c14:	f000 f806 	bl	8000c24 <__udivmoddi4>
 8000c18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c20:	b004      	add	sp, #16
 8000c22:	4770      	bx	lr

08000c24 <__udivmoddi4>:
 8000c24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c28:	9d08      	ldr	r5, [sp, #32]
 8000c2a:	468e      	mov	lr, r1
 8000c2c:	4604      	mov	r4, r0
 8000c2e:	4688      	mov	r8, r1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d14a      	bne.n	8000cca <__udivmoddi4+0xa6>
 8000c34:	428a      	cmp	r2, r1
 8000c36:	4617      	mov	r7, r2
 8000c38:	d962      	bls.n	8000d00 <__udivmoddi4+0xdc>
 8000c3a:	fab2 f682 	clz	r6, r2
 8000c3e:	b14e      	cbz	r6, 8000c54 <__udivmoddi4+0x30>
 8000c40:	f1c6 0320 	rsb	r3, r6, #32
 8000c44:	fa01 f806 	lsl.w	r8, r1, r6
 8000c48:	fa20 f303 	lsr.w	r3, r0, r3
 8000c4c:	40b7      	lsls	r7, r6
 8000c4e:	ea43 0808 	orr.w	r8, r3, r8
 8000c52:	40b4      	lsls	r4, r6
 8000c54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c58:	fa1f fc87 	uxth.w	ip, r7
 8000c5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c60:	0c23      	lsrs	r3, r4, #16
 8000c62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000c6e:	429a      	cmp	r2, r3
 8000c70:	d909      	bls.n	8000c86 <__udivmoddi4+0x62>
 8000c72:	18fb      	adds	r3, r7, r3
 8000c74:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c78:	f080 80ea 	bcs.w	8000e50 <__udivmoddi4+0x22c>
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	f240 80e7 	bls.w	8000e50 <__udivmoddi4+0x22c>
 8000c82:	3902      	subs	r1, #2
 8000c84:	443b      	add	r3, r7
 8000c86:	1a9a      	subs	r2, r3, r2
 8000c88:	b2a3      	uxth	r3, r4
 8000c8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c9a:	459c      	cmp	ip, r3
 8000c9c:	d909      	bls.n	8000cb2 <__udivmoddi4+0x8e>
 8000c9e:	18fb      	adds	r3, r7, r3
 8000ca0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ca4:	f080 80d6 	bcs.w	8000e54 <__udivmoddi4+0x230>
 8000ca8:	459c      	cmp	ip, r3
 8000caa:	f240 80d3 	bls.w	8000e54 <__udivmoddi4+0x230>
 8000cae:	443b      	add	r3, r7
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cb6:	eba3 030c 	sub.w	r3, r3, ip
 8000cba:	2100      	movs	r1, #0
 8000cbc:	b11d      	cbz	r5, 8000cc6 <__udivmoddi4+0xa2>
 8000cbe:	40f3      	lsrs	r3, r6
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	428b      	cmp	r3, r1
 8000ccc:	d905      	bls.n	8000cda <__udivmoddi4+0xb6>
 8000cce:	b10d      	cbz	r5, 8000cd4 <__udivmoddi4+0xb0>
 8000cd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	4608      	mov	r0, r1
 8000cd8:	e7f5      	b.n	8000cc6 <__udivmoddi4+0xa2>
 8000cda:	fab3 f183 	clz	r1, r3
 8000cde:	2900      	cmp	r1, #0
 8000ce0:	d146      	bne.n	8000d70 <__udivmoddi4+0x14c>
 8000ce2:	4573      	cmp	r3, lr
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xc8>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 8105 	bhi.w	8000ef6 <__udivmoddi4+0x2d2>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	4690      	mov	r8, r2
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e5      	beq.n	8000cc6 <__udivmoddi4+0xa2>
 8000cfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000cfe:	e7e2      	b.n	8000cc6 <__udivmoddi4+0xa2>
 8000d00:	2a00      	cmp	r2, #0
 8000d02:	f000 8090 	beq.w	8000e26 <__udivmoddi4+0x202>
 8000d06:	fab2 f682 	clz	r6, r2
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	f040 80a4 	bne.w	8000e58 <__udivmoddi4+0x234>
 8000d10:	1a8a      	subs	r2, r1, r2
 8000d12:	0c03      	lsrs	r3, r0, #16
 8000d14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d18:	b280      	uxth	r0, r0
 8000d1a:	b2bc      	uxth	r4, r7
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	d907      	bls.n	8000d42 <__udivmoddi4+0x11e>
 8000d32:	18fb      	adds	r3, r7, r3
 8000d34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d38:	d202      	bcs.n	8000d40 <__udivmoddi4+0x11c>
 8000d3a:	429a      	cmp	r2, r3
 8000d3c:	f200 80e0 	bhi.w	8000f00 <__udivmoddi4+0x2dc>
 8000d40:	46c4      	mov	ip, r8
 8000d42:	1a9b      	subs	r3, r3, r2
 8000d44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d50:	fb02 f404 	mul.w	r4, r2, r4
 8000d54:	429c      	cmp	r4, r3
 8000d56:	d907      	bls.n	8000d68 <__udivmoddi4+0x144>
 8000d58:	18fb      	adds	r3, r7, r3
 8000d5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d5e:	d202      	bcs.n	8000d66 <__udivmoddi4+0x142>
 8000d60:	429c      	cmp	r4, r3
 8000d62:	f200 80ca 	bhi.w	8000efa <__udivmoddi4+0x2d6>
 8000d66:	4602      	mov	r2, r0
 8000d68:	1b1b      	subs	r3, r3, r4
 8000d6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d6e:	e7a5      	b.n	8000cbc <__udivmoddi4+0x98>
 8000d70:	f1c1 0620 	rsb	r6, r1, #32
 8000d74:	408b      	lsls	r3, r1
 8000d76:	fa22 f706 	lsr.w	r7, r2, r6
 8000d7a:	431f      	orrs	r7, r3
 8000d7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000d80:	fa20 f306 	lsr.w	r3, r0, r6
 8000d84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d8c:	4323      	orrs	r3, r4
 8000d8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000d92:	fa1f fc87 	uxth.w	ip, r7
 8000d96:	fbbe f0f9 	udiv	r0, lr, r9
 8000d9a:	0c1c      	lsrs	r4, r3, #16
 8000d9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000da0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000da4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000da8:	45a6      	cmp	lr, r4
 8000daa:	fa02 f201 	lsl.w	r2, r2, r1
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x1a0>
 8000db0:	193c      	adds	r4, r7, r4
 8000db2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000db6:	f080 809c 	bcs.w	8000ef2 <__udivmoddi4+0x2ce>
 8000dba:	45a6      	cmp	lr, r4
 8000dbc:	f240 8099 	bls.w	8000ef2 <__udivmoddi4+0x2ce>
 8000dc0:	3802      	subs	r0, #2
 8000dc2:	443c      	add	r4, r7
 8000dc4:	eba4 040e 	sub.w	r4, r4, lr
 8000dc8:	fa1f fe83 	uxth.w	lr, r3
 8000dcc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dd0:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dd8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ddc:	45a4      	cmp	ip, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x1ce>
 8000de0:	193c      	adds	r4, r7, r4
 8000de2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000de6:	f080 8082 	bcs.w	8000eee <__udivmoddi4+0x2ca>
 8000dea:	45a4      	cmp	ip, r4
 8000dec:	d97f      	bls.n	8000eee <__udivmoddi4+0x2ca>
 8000dee:	3b02      	subs	r3, #2
 8000df0:	443c      	add	r4, r7
 8000df2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000df6:	eba4 040c 	sub.w	r4, r4, ip
 8000dfa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000dfe:	4564      	cmp	r4, ip
 8000e00:	4673      	mov	r3, lr
 8000e02:	46e1      	mov	r9, ip
 8000e04:	d362      	bcc.n	8000ecc <__udivmoddi4+0x2a8>
 8000e06:	d05f      	beq.n	8000ec8 <__udivmoddi4+0x2a4>
 8000e08:	b15d      	cbz	r5, 8000e22 <__udivmoddi4+0x1fe>
 8000e0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000e0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000e12:	fa04 f606 	lsl.w	r6, r4, r6
 8000e16:	fa22 f301 	lsr.w	r3, r2, r1
 8000e1a:	431e      	orrs	r6, r3
 8000e1c:	40cc      	lsrs	r4, r1
 8000e1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000e22:	2100      	movs	r1, #0
 8000e24:	e74f      	b.n	8000cc6 <__udivmoddi4+0xa2>
 8000e26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e2a:	0c01      	lsrs	r1, r0, #16
 8000e2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e30:	b280      	uxth	r0, r0
 8000e32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e36:	463b      	mov	r3, r7
 8000e38:	4638      	mov	r0, r7
 8000e3a:	463c      	mov	r4, r7
 8000e3c:	46b8      	mov	r8, r7
 8000e3e:	46be      	mov	lr, r7
 8000e40:	2620      	movs	r6, #32
 8000e42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e46:	eba2 0208 	sub.w	r2, r2, r8
 8000e4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e4e:	e766      	b.n	8000d1e <__udivmoddi4+0xfa>
 8000e50:	4601      	mov	r1, r0
 8000e52:	e718      	b.n	8000c86 <__udivmoddi4+0x62>
 8000e54:	4610      	mov	r0, r2
 8000e56:	e72c      	b.n	8000cb2 <__udivmoddi4+0x8e>
 8000e58:	f1c6 0220 	rsb	r2, r6, #32
 8000e5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000e60:	40b7      	lsls	r7, r6
 8000e62:	40b1      	lsls	r1, r6
 8000e64:	fa20 f202 	lsr.w	r2, r0, r2
 8000e68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e6c:	430a      	orrs	r2, r1
 8000e6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e72:	b2bc      	uxth	r4, r7
 8000e74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e78:	0c11      	lsrs	r1, r2, #16
 8000e7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e7e:	fb08 f904 	mul.w	r9, r8, r4
 8000e82:	40b0      	lsls	r0, r6
 8000e84:	4589      	cmp	r9, r1
 8000e86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e8a:	b280      	uxth	r0, r0
 8000e8c:	d93e      	bls.n	8000f0c <__udivmoddi4+0x2e8>
 8000e8e:	1879      	adds	r1, r7, r1
 8000e90:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e94:	d201      	bcs.n	8000e9a <__udivmoddi4+0x276>
 8000e96:	4589      	cmp	r9, r1
 8000e98:	d81f      	bhi.n	8000eda <__udivmoddi4+0x2b6>
 8000e9a:	eba1 0109 	sub.w	r1, r1, r9
 8000e9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ea2:	fb09 f804 	mul.w	r8, r9, r4
 8000ea6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eaa:	b292      	uxth	r2, r2
 8000eac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000eb0:	4542      	cmp	r2, r8
 8000eb2:	d229      	bcs.n	8000f08 <__udivmoddi4+0x2e4>
 8000eb4:	18ba      	adds	r2, r7, r2
 8000eb6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000eba:	d2c4      	bcs.n	8000e46 <__udivmoddi4+0x222>
 8000ebc:	4542      	cmp	r2, r8
 8000ebe:	d2c2      	bcs.n	8000e46 <__udivmoddi4+0x222>
 8000ec0:	f1a9 0102 	sub.w	r1, r9, #2
 8000ec4:	443a      	add	r2, r7
 8000ec6:	e7be      	b.n	8000e46 <__udivmoddi4+0x222>
 8000ec8:	45f0      	cmp	r8, lr
 8000eca:	d29d      	bcs.n	8000e08 <__udivmoddi4+0x1e4>
 8000ecc:	ebbe 0302 	subs.w	r3, lr, r2
 8000ed0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	46e1      	mov	r9, ip
 8000ed8:	e796      	b.n	8000e08 <__udivmoddi4+0x1e4>
 8000eda:	eba7 0909 	sub.w	r9, r7, r9
 8000ede:	4449      	add	r1, r9
 8000ee0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ee4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ee8:	fb09 f804 	mul.w	r8, r9, r4
 8000eec:	e7db      	b.n	8000ea6 <__udivmoddi4+0x282>
 8000eee:	4673      	mov	r3, lr
 8000ef0:	e77f      	b.n	8000df2 <__udivmoddi4+0x1ce>
 8000ef2:	4650      	mov	r0, sl
 8000ef4:	e766      	b.n	8000dc4 <__udivmoddi4+0x1a0>
 8000ef6:	4608      	mov	r0, r1
 8000ef8:	e6fd      	b.n	8000cf6 <__udivmoddi4+0xd2>
 8000efa:	443b      	add	r3, r7
 8000efc:	3a02      	subs	r2, #2
 8000efe:	e733      	b.n	8000d68 <__udivmoddi4+0x144>
 8000f00:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f04:	443b      	add	r3, r7
 8000f06:	e71c      	b.n	8000d42 <__udivmoddi4+0x11e>
 8000f08:	4649      	mov	r1, r9
 8000f0a:	e79c      	b.n	8000e46 <__udivmoddi4+0x222>
 8000f0c:	eba1 0109 	sub.w	r1, r1, r9
 8000f10:	46c4      	mov	ip, r8
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fb09 f804 	mul.w	r8, r9, r4
 8000f1a:	e7c4      	b.n	8000ea6 <__udivmoddi4+0x282>

08000f1c <__aeabi_idiv0>:
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop

08000f20 <ADC_DMA_Init>:

#include "ADC_DMA.h"

void ADC_DMA_Init(ADC_DMA *adc_dma, ADC_HandleTypeDef *hadc,
                 uint16_t *buffer, uint32_t buffer_length,
                 uint8_t num_channels, float vref, float resolution) {
 8000f20:	b480      	push	{r7}
 8000f22:	b089      	sub	sp, #36	@ 0x24
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6178      	str	r0, [r7, #20]
 8000f28:	6139      	str	r1, [r7, #16]
 8000f2a:	60fa      	str	r2, [r7, #12]
 8000f2c:	60bb      	str	r3, [r7, #8]
 8000f2e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000f32:	edc7 0a00 	vstr	s1, [r7]

    adc_dma->hadc = hadc;
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	693a      	ldr	r2, [r7, #16]
 8000f3a:	601a      	str	r2, [r3, #0]
    adc_dma->dma_buffer = buffer;
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	68fa      	ldr	r2, [r7, #12]
 8000f40:	605a      	str	r2, [r3, #4]
    adc_dma->buffer_length = buffer_length;
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	68ba      	ldr	r2, [r7, #8]
 8000f46:	609a      	str	r2, [r3, #8]
    adc_dma->num_channels = num_channels;
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8000f4e:	731a      	strb	r2, [r3, #12]
    adc_dma->adc_vref = vref;
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	687a      	ldr	r2, [r7, #4]
 8000f54:	611a      	str	r2, [r3, #16]
    adc_dma->adc_resolution = resolution;
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	683a      	ldr	r2, [r7, #0]
 8000f5a:	615a      	str	r2, [r3, #20]

    // Default center point and error percentage
    adc_dma->center_point = resolution / 2.0f;  // Typically 2048 for 12-bit ADC
 8000f5c:	ed97 7a00 	vldr	s14, [r7]
 8000f60:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8000f64:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	edc3 7a06 	vstr	s15, [r3, #24]
    adc_dma->error_percentage = 5;              // 5% error by default
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	2205      	movs	r2, #5
 8000f72:	f883 2020 	strb.w	r2, [r3, #32]
    adc_dma->threshold = (adc_dma->error_percentage / 100.0f) * adc_dma->center_point;
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f7c:	ee07 3a90 	vmov	s15, r3
 8000f80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f84:	eddf 6a11 	vldr	s13, [pc, #68]	@ 8000fcc <ADC_DMA_Init+0xac>
 8000f88:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	edd3 7a06 	vldr	s15, [r3, #24]
 8000f92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	edc3 7a07 	vstr	s15, [r3, #28]

    // Initialize DMA buffer
    for (uint32_t i = 0; i < buffer_length; i++) {
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	61fb      	str	r3, [r7, #28]
 8000fa0:	e008      	b.n	8000fb4 <ADC_DMA_Init+0x94>
        buffer[i] = 0;
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	68fa      	ldr	r2, [r7, #12]
 8000fa8:	4413      	add	r3, r2
 8000faa:	2200      	movs	r2, #0
 8000fac:	801a      	strh	r2, [r3, #0]
    for (uint32_t i = 0; i < buffer_length; i++) {
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	61fb      	str	r3, [r7, #28]
 8000fb4:	69fa      	ldr	r2, [r7, #28]
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d3f2      	bcc.n	8000fa2 <ADC_DMA_Init+0x82>
    }
}
 8000fbc:	bf00      	nop
 8000fbe:	bf00      	nop
 8000fc0:	3724      	adds	r7, #36	@ 0x24
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	42c80000 	.word	0x42c80000

08000fd0 <ADC_DMA_Start>:

void ADC_DMA_Start(ADC_DMA *adc_dma) {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
    // Perform ADC calibration
    HAL_ADCEx_Calibration_Start(adc_dma->hadc, ADC_SINGLE_ENDED);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	217f      	movs	r1, #127	@ 0x7f
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f008 fa06 	bl	80093f0 <HAL_ADCEx_Calibration_Start>

    // Start ADC with DMA
    HAL_ADC_Start_DMA(adc_dma->hadc, (uint32_t*)adc_dma->dma_buffer, adc_dma->buffer_length);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6818      	ldr	r0, [r3, #0]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6859      	ldr	r1, [r3, #4]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	f007 faef 	bl	80085d4 <HAL_ADC_Start_DMA>
}
 8000ff6:	bf00      	nop
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
	...

08001000 <ADC_DMA_GetValue>:

void ADC_DMA_Stop(ADC_DMA *adc_dma) {
    HAL_ADC_Stop_DMA(adc_dma->hadc);
}

float ADC_DMA_GetValue(ADC_DMA *adc_dma, uint8_t channel_index) {
 8001000:	b480      	push	{r7}
 8001002:	b087      	sub	sp, #28
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	460b      	mov	r3, r1
 800100a:	70fb      	strb	r3, [r7, #3]
    uint32_t sum = 0;
 800100c:	2300      	movs	r3, #0
 800100e:	617b      	str	r3, [r7, #20]
    uint32_t samples = 0;
 8001010:	2300      	movs	r3, #0
 8001012:	613b      	str	r3, [r7, #16]

    // Average all samples for this channel
    for (uint32_t j = channel_index; j < adc_dma->buffer_length; j += adc_dma->num_channels) {
 8001014:	78fb      	ldrb	r3, [r7, #3]
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	e012      	b.n	8001040 <ADC_DMA_GetValue+0x40>
        sum += adc_dma->dma_buffer[j];
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	685a      	ldr	r2, [r3, #4]
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	4413      	add	r3, r2
 8001024:	881b      	ldrh	r3, [r3, #0]
 8001026:	461a      	mov	r2, r3
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	4413      	add	r3, r2
 800102c:	617b      	str	r3, [r7, #20]
        samples++;
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	3301      	adds	r3, #1
 8001032:	613b      	str	r3, [r7, #16]
    for (uint32_t j = channel_index; j < adc_dma->buffer_length; j += adc_dma->num_channels) {
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	7b1b      	ldrb	r3, [r3, #12]
 8001038:	461a      	mov	r2, r3
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	4413      	add	r3, r2
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	689b      	ldr	r3, [r3, #8]
 8001044:	68fa      	ldr	r2, [r7, #12]
 8001046:	429a      	cmp	r2, r3
 8001048:	d3e7      	bcc.n	800101a <ADC_DMA_GetValue+0x1a>
    }

    // Calculate raw ADC value
    if (samples > 0) {
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d00c      	beq.n	800106a <ADC_DMA_GetValue+0x6a>
        return (float)sum / samples;
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	ee07 3a90 	vmov	s15, r3
 8001056:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	ee07 3a90 	vmov	s15, r3
 8001060:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001064:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001068:	e001      	b.n	800106e <ADC_DMA_GetValue+0x6e>
    }

    return 0.0f;
 800106a:	eddf 6a05 	vldr	s13, [pc, #20]	@ 8001080 <ADC_DMA_GetValue+0x80>
}
 800106e:	eef0 7a66 	vmov.f32	s15, s13
 8001072:	eeb0 0a67 	vmov.f32	s0, s15
 8001076:	371c      	adds	r7, #28
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	00000000 	.word	0x00000000

08001084 <ADC_DMA_SetCenterPoint>:

void ADC_DMA_SetCenterPoint(ADC_DMA *adc_dma, float center_point, uint8_t error_percentage) {
 8001084:	b480      	push	{r7}
 8001086:	b085      	sub	sp, #20
 8001088:	af00      	add	r7, sp, #0
 800108a:	60f8      	str	r0, [r7, #12]
 800108c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001090:	460b      	mov	r3, r1
 8001092:	71fb      	strb	r3, [r7, #7]
    adc_dma->center_point = center_point;
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	68ba      	ldr	r2, [r7, #8]
 8001098:	619a      	str	r2, [r3, #24]
    adc_dma->error_percentage = error_percentage;
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	79fa      	ldrb	r2, [r7, #7]
 800109e:	f883 2020 	strb.w	r2, [r3, #32]
    // Update threshold
    adc_dma->threshold = (adc_dma->error_percentage / 100.0f) * adc_dma->center_point;
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010a8:	ee07 3a90 	vmov	s15, r3
 80010ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010b0:	eddf 6a08 	vldr	s13, [pc, #32]	@ 80010d4 <ADC_DMA_SetCenterPoint+0x50>
 80010b4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	edd3 7a06 	vldr	s15, [r3, #24]
 80010be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	edc3 7a07 	vstr	s15, [r3, #28]
}
 80010c8:	bf00      	nop
 80010ca:	3714      	adds	r7, #20
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	42c80000 	.word	0x42c80000

080010d8 <ADC_DMA_GetJoystickValue>:

float ADC_DMA_GetJoystickValue(ADC_DMA *adc_dma, uint8_t channel_index, float min_output, float max_output) {
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	60f8      	str	r0, [r7, #12]
 80010e0:	460b      	mov	r3, r1
 80010e2:	ed87 0a01 	vstr	s0, [r7, #4]
 80010e6:	edc7 0a00 	vstr	s1, [r7]
 80010ea:	72fb      	strb	r3, [r7, #11]
    // Get raw value
    float value = ADC_DMA_GetValue(adc_dma, channel_index);
 80010ec:	7afb      	ldrb	r3, [r7, #11]
 80010ee:	4619      	mov	r1, r3
 80010f0:	68f8      	ldr	r0, [r7, #12]
 80010f2:	f7ff ff85 	bl	8001000 <ADC_DMA_GetValue>
 80010f6:	ed87 0a05 	vstr	s0, [r7, #20]

    // Apply threshold (dead zone) as in XYAnalog
    if (fabsf(value - adc_dma->center_point) < adc_dma->threshold) {
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	edd3 7a06 	vldr	s15, [r3, #24]
 8001100:	ed97 7a05 	vldr	s14, [r7, #20]
 8001104:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001108:	eeb0 7ae7 	vabs.f32	s14, s15
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	edd3 7a07 	vldr	s15, [r3, #28]
 8001112:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800111a:	d502      	bpl.n	8001122 <ADC_DMA_GetJoystickValue+0x4a>
        value = adc_dma->center_point;
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	699b      	ldr	r3, [r3, #24]
 8001120:	617b      	str	r3, [r7, #20]
    }

    // Map to desired output range
    return mapf(value, 0.0f, adc_dma->adc_resolution, min_output, max_output);
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	edd3 7a05 	vldr	s15, [r3, #20]
 8001128:	ed97 2a00 	vldr	s4, [r7]
 800112c:	edd7 1a01 	vldr	s3, [r7, #4]
 8001130:	eeb0 1a67 	vmov.f32	s2, s15
 8001134:	eddf 0a06 	vldr	s1, [pc, #24]	@ 8001150 <ADC_DMA_GetJoystickValue+0x78>
 8001138:	ed97 0a05 	vldr	s0, [r7, #20]
 800113c:	f000 fdf0 	bl	8001d20 <mapf>
 8001140:	eef0 7a40 	vmov.f32	s15, s0
}
 8001144:	eeb0 0a67 	vmov.f32	s0, s15
 8001148:	3718      	adds	r7, #24
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	00000000 	.word	0x00000000

08001154 <PWM_Satuation>:
 *  Created on: Apr 14, 2024
 *      Author: beamk
 */
#include "Controller.h"

int32_t PWM_Satuation(float _u, int32_t _upper_limit, int32_t _lower_limit) {
 8001154:	b480      	push	{r7}
 8001156:	b085      	sub	sp, #20
 8001158:	af00      	add	r7, sp, #0
 800115a:	ed87 0a03 	vstr	s0, [r7, #12]
 800115e:	60b8      	str	r0, [r7, #8]
 8001160:	6079      	str	r1, [r7, #4]
	if (_u > _upper_limit)
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	ee07 3a90 	vmov	s15, r3
 8001168:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800116c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001170:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001178:	dd01      	ble.n	800117e <PWM_Satuation+0x2a>
		return _upper_limit;
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	e013      	b.n	80011a6 <PWM_Satuation+0x52>
	else if (_u < _lower_limit)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	ee07 3a90 	vmov	s15, r3
 8001184:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001188:	ed97 7a03 	vldr	s14, [r7, #12]
 800118c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001194:	d501      	bpl.n	800119a <PWM_Satuation+0x46>
		return _lower_limit;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	e005      	b.n	80011a6 <PWM_Satuation+0x52>
	return (int32_t) _u;
 800119a:	edd7 7a03 	vldr	s15, [r7, #12]
 800119e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011a2:	ee17 3a90 	vmov	r3, s15
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3714      	adds	r7, #20
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr

080011b2 <PID_CONTROLLER_Init>:

void PID_CONTROLLER_Init(PID_CONTROLLER *controller, float _Kp, float _Ki,
		float _Kd, float _u_max) {
 80011b2:	b480      	push	{r7}
 80011b4:	b087      	sub	sp, #28
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6178      	str	r0, [r7, #20]
 80011ba:	ed87 0a04 	vstr	s0, [r7, #16]
 80011be:	edc7 0a03 	vstr	s1, [r7, #12]
 80011c2:	ed87 1a02 	vstr	s2, [r7, #8]
 80011c6:	edc7 1a01 	vstr	s3, [r7, #4]
	controller->Kp = _Kp;
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	601a      	str	r2, [r3, #0]
	controller->Ki = _Ki;
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	68fa      	ldr	r2, [r7, #12]
 80011d4:	605a      	str	r2, [r3, #4]
	controller->Kd = _Kd;
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	68ba      	ldr	r2, [r7, #8]
 80011da:	609a      	str	r2, [r3, #8]
	controller->prev_Kp = _Kp;
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	60da      	str	r2, [r3, #12]
	controller->prev_Ki = _Ki;
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	68fa      	ldr	r2, [r7, #12]
 80011e6:	611a      	str	r2, [r3, #16]
	controller->prev_Kd = _Kd;
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	68ba      	ldr	r2, [r7, #8]
 80011ec:	615a      	str	r2, [r3, #20]
	controller->u_max = _u_max;
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	619a      	str	r2, [r3, #24]
	controller->ek_1 = 0;
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	f04f 0200 	mov.w	r2, #0
 80011fa:	61da      	str	r2, [r3, #28]
	controller->ek_2 = 0;
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	f04f 0200 	mov.w	r2, #0
 8001202:	621a      	str	r2, [r3, #32]
	controller->u = 0;
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	f04f 0200 	mov.w	r2, #0
 800120a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800120c:	bf00      	nop
 800120e:	371c      	adds	r7, #28
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr

08001218 <PID_CONTROLLER_Compute>:

float PID_CONTROLLER_Compute(PID_CONTROLLER *controller, float ek) {
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	ed87 0a00 	vstr	s0, [r7]
	if (!((controller->u >= controller->u_max && ek > 0)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	edd3 7a06 	vldr	s15, [r3, #24]
 8001230:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001238:	bfac      	ite	ge
 800123a:	2301      	movge	r3, #1
 800123c:	2300      	movlt	r3, #0
 800123e:	b2db      	uxtb	r3, r3
 8001240:	f083 0301 	eor.w	r3, r3, #1
 8001244:	b2db      	uxtb	r3, r3
 8001246:	2b00      	cmp	r3, #0
 8001248:	d10e      	bne.n	8001268 <PID_CONTROLLER_Compute+0x50>
 800124a:	edd7 7a00 	vldr	s15, [r7]
 800124e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001256:	bfcc      	ite	gt
 8001258:	2301      	movgt	r3, #1
 800125a:	2300      	movle	r3, #0
 800125c:	b2db      	uxtb	r3, r3
 800125e:	f083 0301 	eor.w	r3, r3, #1
 8001262:	b2db      	uxtb	r3, r3
 8001264:	2b00      	cmp	r3, #0
 8001266:	d057      	beq.n	8001318 <PID_CONTROLLER_Compute+0x100>
			|| (controller->u <= -controller->u_max && ek < 0))) {
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	edd3 7a06 	vldr	s15, [r3, #24]
 8001274:	eef1 7a67 	vneg.f32	s15, s15
 8001278:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800127c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001280:	bf94      	ite	ls
 8001282:	2301      	movls	r3, #1
 8001284:	2300      	movhi	r3, #0
 8001286:	b2db      	uxtb	r3, r3
 8001288:	f083 0301 	eor.w	r3, r3, #1
 800128c:	b2db      	uxtb	r3, r3
	if (!((controller->u >= controller->u_max && ek > 0)
 800128e:	2b00      	cmp	r3, #0
 8001290:	d10e      	bne.n	80012b0 <PID_CONTROLLER_Compute+0x98>
			|| (controller->u <= -controller->u_max && ek < 0))) {
 8001292:	edd7 7a00 	vldr	s15, [r7]
 8001296:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800129a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800129e:	bf4c      	ite	mi
 80012a0:	2301      	movmi	r3, #1
 80012a2:	2300      	movpl	r3, #0
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	f083 0301 	eor.w	r3, r3, #1
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d033      	beq.n	8001318 <PID_CONTROLLER_Compute+0x100>
		controller->u += ((controller->Kp + controller->Ki + controller->Kd)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	edd3 6a00 	vldr	s13, [r3]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	edd3 7a01 	vldr	s15, [r3, #4]
 80012c2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	edd3 7a02 	vldr	s15, [r3, #8]
 80012cc:	ee76 6aa7 	vadd.f32	s13, s13, s15
				* ek)
 80012d0:	edd7 7a00 	vldr	s15, [r7]
 80012d4:	ee66 6aa7 	vmul.f32	s13, s13, s15
				- ((controller->Kp + (2 * controller->Kd)) * controller->ek_1)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	ed93 6a00 	vldr	s12, [r3]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	edd3 7a02 	vldr	s15, [r3, #8]
 80012e4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80012e8:	ee36 6a27 	vadd.f32	s12, s12, s15
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	edd3 7a07 	vldr	s15, [r3, #28]
 80012f2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80012f6:	ee76 6ae7 	vsub.f32	s13, s13, s15
				+ (controller->Kd * controller->ek_2);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	ed93 6a02 	vldr	s12, [r3, #8]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	edd3 7a08 	vldr	s15, [r3, #32]
 8001306:	ee66 7a27 	vmul.f32	s15, s12, s15
 800130a:	ee76 7aa7 	vadd.f32	s15, s13, s15
		controller->u += ((controller->Kp + controller->Ki + controller->Kd)
 800130e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	}
	controller->ek_2 = controller->ek_1;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	69da      	ldr	r2, [r3, #28]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	621a      	str	r2, [r3, #32]
	controller->ek_1 = ek;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	683a      	ldr	r2, [r7, #0]
 8001324:	61da      	str	r2, [r3, #28]
	return controller->u;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800132a:	ee07 3a90 	vmov	s15, r3
}
 800132e:	eeb0 0a67 	vmov.f32	s0, s15
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <MDXX_GPIO_init>:
	PWM_init(&(mdxx->pwm), htimp, timp_chx);
	mdxx->mode = 0;
}

void MDXX_GPIO_init(MDXX *mdxx, TIM_HandleTypeDef *htimp, uint16_t timp_chx,
		GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	60f8      	str	r0, [r7, #12]
 8001344:	60b9      	str	r1, [r7, #8]
 8001346:	603b      	str	r3, [r7, #0]
 8001348:	4613      	mov	r3, r2
 800134a:	80fb      	strh	r3, [r7, #6]
	mdxx->htimp = htimp;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	68ba      	ldr	r2, [r7, #8]
 8001350:	609a      	str	r2, [r3, #8]
	mdxx->timp_chx = timp_chx;
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	88fa      	ldrh	r2, [r7, #6]
 8001356:	819a      	strh	r2, [r3, #12]
	PWM_init(&(mdxx->pwm), htimp, timp_chx);
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	3328      	adds	r3, #40	@ 0x28
 800135c:	88fa      	ldrh	r2, [r7, #6]
 800135e:	68b9      	ldr	r1, [r7, #8]
 8001360:	4618      	mov	r0, r3
 8001362:	f001 ffd1 	bl	8003308 <PWM_init>
	mdxx->GPIOx = GPIOx;
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	683a      	ldr	r2, [r7, #0]
 800136a:	645a      	str	r2, [r3, #68]	@ 0x44
	mdxx->GPIO_Pin = GPIO_Pin;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	8b3a      	ldrh	r2, [r7, #24]
 8001370:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
	mdxx->mode = 1;
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	2201      	movs	r2, #1
 8001378:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
}
 800137c:	bf00      	nop
 800137e:	3710      	adds	r7, #16
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}

08001384 <MDXX_set_range>:
			mdxx->cmd = fabs(duty);
		}
	}
}

void MDXX_set_range(MDXX *mdxx, float freq, float duty) {
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	60f8      	str	r0, [r7, #12]
 800138c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001390:	edc7 0a01 	vstr	s1, [r7, #4]
	if (mdxx->mode == 0) {
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 800139a:	2b00      	cmp	r3, #0
 800139c:	d15f      	bne.n	800145e <MDXX_set_range+0xda>
		if (duty == 0) {
 800139e:	edd7 7a01 	vldr	s15, [r7, #4]
 80013a2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80013a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013aa:	d115      	bne.n	80013d8 <MDXX_set_range+0x54>
			PWM_write_range(&(mdxx->dir), freq, 0);
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	3310      	adds	r3, #16
 80013b0:	eddf 0a5f 	vldr	s1, [pc, #380]	@ 8001530 <MDXX_set_range+0x1ac>
 80013b4:	ed97 0a02 	vldr	s0, [r7, #8]
 80013b8:	4618      	mov	r0, r3
 80013ba:	f002 f8cd 	bl	8003558 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, 0);
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	3328      	adds	r3, #40	@ 0x28
 80013c2:	eddf 0a5b 	vldr	s1, [pc, #364]	@ 8001530 <MDXX_set_range+0x1ac>
 80013c6:	ed97 0a02 	vldr	s0, [r7, #8]
 80013ca:	4618      	mov	r0, r3
 80013cc:	f002 f8c4 	bl	8003558 <PWM_write_range>
			mdxx->cmd = 0;
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	2200      	movs	r2, #0
 80013d4:	641a      	str	r2, [r3, #64]	@ 0x40
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 1);
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
			mdxx->cmd = fabs(duty);
		}
	}
}
 80013d6:	e0a6      	b.n	8001526 <MDXX_set_range+0x1a2>
		} else if (duty > 0) {
 80013d8:	edd7 7a01 	vldr	s15, [r7, #4]
 80013dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013e4:	dd1a      	ble.n	800141c <MDXX_set_range+0x98>
			PWM_write_range(&(mdxx->dir), freq, 0);
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	3310      	adds	r3, #16
 80013ea:	eddf 0a51 	vldr	s1, [pc, #324]	@ 8001530 <MDXX_set_range+0x1ac>
 80013ee:	ed97 0a02 	vldr	s0, [r7, #8]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f002 f8b0 	bl	8003558 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, duty);
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	3328      	adds	r3, #40	@ 0x28
 80013fc:	edd7 0a01 	vldr	s1, [r7, #4]
 8001400:	ed97 0a02 	vldr	s0, [r7, #8]
 8001404:	4618      	mov	r0, r3
 8001406:	f002 f8a7 	bl	8003558 <PWM_write_range>
			mdxx->cmd = duty;
 800140a:	edd7 7a01 	vldr	s15, [r7, #4]
 800140e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001412:	ee17 2a90 	vmov	r2, s15
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800141a:	e084      	b.n	8001526 <MDXX_set_range+0x1a2>
			PWM_write_range(&(mdxx->dir), freq, 100);
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	3310      	adds	r3, #16
 8001420:	eddf 0a44 	vldr	s1, [pc, #272]	@ 8001534 <MDXX_set_range+0x1b0>
 8001424:	ed97 0a02 	vldr	s0, [r7, #8]
 8001428:	4618      	mov	r0, r3
 800142a:	f002 f895 	bl	8003558 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	3328      	adds	r3, #40	@ 0x28
 8001432:	edd7 7a01 	vldr	s15, [r7, #4]
 8001436:	eef0 7ae7 	vabs.f32	s15, s15
 800143a:	eef0 0a67 	vmov.f32	s1, s15
 800143e:	ed97 0a02 	vldr	s0, [r7, #8]
 8001442:	4618      	mov	r0, r3
 8001444:	f002 f888 	bl	8003558 <PWM_write_range>
			mdxx->cmd = fabs(duty);
 8001448:	edd7 7a01 	vldr	s15, [r7, #4]
 800144c:	eef0 7ae7 	vabs.f32	s15, s15
 8001450:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001454:	ee17 2a90 	vmov	r2, s15
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800145c:	e063      	b.n	8001526 <MDXX_set_range+0x1a2>
	} else if (mdxx->mode == 1) {
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8001464:	2b01      	cmp	r3, #1
 8001466:	d15e      	bne.n	8001526 <MDXX_set_range+0x1a2>
		if (duty == 0) {
 8001468:	edd7 7a01 	vldr	s15, [r7, #4]
 800146c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001474:	d115      	bne.n	80014a2 <MDXX_set_range+0x11e>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 0);
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8001480:	2200      	movs	r2, #0
 8001482:	4619      	mov	r1, r3
 8001484:	f008 fefa 	bl	800a27c <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, 0);
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	3328      	adds	r3, #40	@ 0x28
 800148c:	eddf 0a28 	vldr	s1, [pc, #160]	@ 8001530 <MDXX_set_range+0x1ac>
 8001490:	ed97 0a02 	vldr	s0, [r7, #8]
 8001494:	4618      	mov	r0, r3
 8001496:	f002 f85f 	bl	8003558 <PWM_write_range>
			mdxx->cmd = 0;
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	2200      	movs	r2, #0
 800149e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80014a0:	e041      	b.n	8001526 <MDXX_set_range+0x1a2>
		} else if (duty > 0) {
 80014a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80014a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ae:	dd1a      	ble.n	80014e6 <MDXX_set_range+0x162>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 0);
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80014ba:	2200      	movs	r2, #0
 80014bc:	4619      	mov	r1, r3
 80014be:	f008 fedd 	bl	800a27c <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, duty);
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	3328      	adds	r3, #40	@ 0x28
 80014c6:	edd7 0a01 	vldr	s1, [r7, #4]
 80014ca:	ed97 0a02 	vldr	s0, [r7, #8]
 80014ce:	4618      	mov	r0, r3
 80014d0:	f002 f842 	bl	8003558 <PWM_write_range>
			mdxx->cmd = duty;
 80014d4:	edd7 7a01 	vldr	s15, [r7, #4]
 80014d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014dc:	ee17 2a90 	vmov	r2, s15
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80014e4:	e01f      	b.n	8001526 <MDXX_set_range+0x1a2>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 1);
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80014f0:	2201      	movs	r2, #1
 80014f2:	4619      	mov	r1, r3
 80014f4:	f008 fec2 	bl	800a27c <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	3328      	adds	r3, #40	@ 0x28
 80014fc:	edd7 7a01 	vldr	s15, [r7, #4]
 8001500:	eef0 7ae7 	vabs.f32	s15, s15
 8001504:	eef0 0a67 	vmov.f32	s1, s15
 8001508:	ed97 0a02 	vldr	s0, [r7, #8]
 800150c:	4618      	mov	r0, r3
 800150e:	f002 f823 	bl	8003558 <PWM_write_range>
			mdxx->cmd = fabs(duty);
 8001512:	edd7 7a01 	vldr	s15, [r7, #4]
 8001516:	eef0 7ae7 	vabs.f32	s15, s15
 800151a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800151e:	ee17 2a90 	vmov	r2, s15
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001526:	bf00      	nop
 8001528:	3710      	adds	r7, #16
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	00000000 	.word	0x00000000
 8001534:	42c80000 	.word	0x42c80000

08001538 <REVOLUTE_MOTOR_FFD_Init>:
    .slide_rail_mass = 1893.96e-3, 		// kg
    .c = 64.83e-3,           			// m
    .prismatic_pulley_radius = 1.5915e-2 		// m
};

void REVOLUTE_MOTOR_FFD_Init(DC_MOTOR_FFeedward *motor, Motor_Constant_Structure *_Mx){
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	6039      	str	r1, [r7, #0]
    motor->Mx = _Mx;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	683a      	ldr	r2, [r7, #0]
 8001546:	601a      	str	r2, [r3, #0]
}
 8001548:	bf00      	nop
 800154a:	370c      	adds	r7, #12
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr

08001554 <REVOLUTE_MOTOR_FFD_Compute>:

float REVOLUTE_MOTOR_FFD_Compute(DC_MOTOR_FFeedward *motor, float qd){
 8001554:	b5b0      	push	{r4, r5, r7, lr}
 8001556:	ed2d 8b02 	vpush	{d8}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	ed87 0a00 	vstr	s0, [r7]
    float transfer_function = (motor->Mx->B * motor->Mx->R + motor->Mx->Ke * motor->Mx->Kt) / motor->Mx->Kt;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001574:	f7ff f80c 	bl	8000590 <__aeabi_dmul>
 8001578:	4602      	mov	r2, r0
 800157a:	460b      	mov	r3, r1
 800157c:	4614      	mov	r4, r2
 800157e:	461d      	mov	r5, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001590:	f7fe fffe 	bl	8000590 <__aeabi_dmul>
 8001594:	4602      	mov	r2, r0
 8001596:	460b      	mov	r3, r1
 8001598:	4620      	mov	r0, r4
 800159a:	4629      	mov	r1, r5
 800159c:	f7fe fe42 	bl	8000224 <__adddf3>
 80015a0:	4602      	mov	r2, r0
 80015a2:	460b      	mov	r3, r1
 80015a4:	4610      	mov	r0, r2
 80015a6:	4619      	mov	r1, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80015b0:	f7ff f918 	bl	80007e4 <__aeabi_ddiv>
 80015b4:	4602      	mov	r2, r0
 80015b6:	460b      	mov	r3, r1
 80015b8:	4610      	mov	r0, r2
 80015ba:	4619      	mov	r1, r3
 80015bc:	f7ff faca 	bl	8000b54 <__aeabi_d2f>
 80015c0:	4603      	mov	r3, r0
 80015c2:	60fb      	str	r3, [r7, #12]

    float v = qd * transfer_function;
 80015c4:	ed97 7a00 	vldr	s14, [r7]
 80015c8:	edd7 7a03 	vldr	s15, [r7, #12]
 80015cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015d0:	edc7 7a02 	vstr	s15, [r7, #8]

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80015dc:	4610      	mov	r0, r2
 80015de:	4619      	mov	r1, r3
 80015e0:	f7ff fab8 	bl	8000b54 <__aeabi_d2f>
 80015e4:	4603      	mov	r3, r0
 80015e6:	ee07 3a90 	vmov	s15, r3
 80015ea:	eeb1 8a67 	vneg.f32	s16, s15
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80015f6:	4610      	mov	r0, r2
 80015f8:	4619      	mov	r1, r3
 80015fa:	f7ff faab 	bl	8000b54 <__aeabi_d2f>
 80015fe:	4604      	mov	r4, r0
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001608:	4610      	mov	r0, r2
 800160a:	4619      	mov	r1, r3
 800160c:	f7ff faa2 	bl	8000b54 <__aeabi_d2f>
 8001610:	4603      	mov	r3, r0
 8001612:	ee07 3a90 	vmov	s15, r3
 8001616:	eef1 8a67 	vneg.f32	s17, s15
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001622:	4610      	mov	r0, r2
 8001624:	4619      	mov	r1, r3
 8001626:	f7ff fa95 	bl	8000b54 <__aeabi_d2f>
 800162a:	4603      	mov	r3, r0
 800162c:	ee02 3a10 	vmov	s4, r3
 8001630:	eef0 1a68 	vmov.f32	s3, s17
 8001634:	ee01 4a10 	vmov	s2, r4
 8001638:	eef0 0a48 	vmov.f32	s1, s16
 800163c:	ed97 0a02 	vldr	s0, [r7, #8]
 8001640:	f000 fb6e 	bl	8001d20 <mapf>
 8001644:	eef0 7a40 	vmov.f32	s15, s0
}
 8001648:	eeb0 0a67 	vmov.f32	s0, s15
 800164c:	3710      	adds	r7, #16
 800164e:	46bd      	mov	sp, r7
 8001650:	ecbd 8b02 	vpop	{d8}
 8001654:	bdb0      	pop	{r4, r5, r7, pc}

08001656 <REVOLUTE_MOTOR_DFD_Init>:

void REVOLUTE_MOTOR_DFD_Init(DC_MOTOR_DFeedward *motor, Motor_Constant_Structure *_Mx, Environment *_En){
 8001656:	b480      	push	{r7}
 8001658:	b085      	sub	sp, #20
 800165a:	af00      	add	r7, sp, #0
 800165c:	60f8      	str	r0, [r7, #12]
 800165e:	60b9      	str	r1, [r7, #8]
 8001660:	607a      	str	r2, [r7, #4]
    motor->Mx = _Mx;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	68ba      	ldr	r2, [r7, #8]
 8001666:	601a      	str	r2, [r3, #0]
    motor->En = _En;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	687a      	ldr	r2, [r7, #4]
 800166c:	605a      	str	r2, [r3, #4]
}
 800166e:	bf00      	nop
 8001670:	3714      	adds	r7, #20
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
	...

0800167c <REVOLUTE_MOTOR_DFD_Compute>:

float REVOLUTE_MOTOR_DFD_Compute(DC_MOTOR_DFeedward *motor, float q, float qdd, float s){
 800167c:	b5b0      	push	{r4, r5, r7, lr}
 800167e:	ed2d 8b02 	vpush	{d8}
 8001682:	b088      	sub	sp, #32
 8001684:	af00      	add	r7, sp, #0
 8001686:	60f8      	str	r0, [r7, #12]
 8001688:	ed87 0a02 	vstr	s0, [r7, #8]
 800168c:	edc7 0a01 	vstr	s1, [r7, #4]
 8001690:	ed87 1a00 	vstr	s2, [r7]
    float gravity_compensate_plotter = motor->En->plotter_mass * motor->En->g * sin(q) * s;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	ed93 7a01 	vldr	s14, [r3, #4]
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	edd3 7a00 	vldr	s15, [r3]
 80016a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016a8:	ee17 0a90 	vmov	r0, s15
 80016ac:	f7fe ff18 	bl	80004e0 <__aeabi_f2d>
 80016b0:	4604      	mov	r4, r0
 80016b2:	460d      	mov	r5, r1
 80016b4:	68b8      	ldr	r0, [r7, #8]
 80016b6:	f7fe ff13 	bl	80004e0 <__aeabi_f2d>
 80016ba:	4602      	mov	r2, r0
 80016bc:	460b      	mov	r3, r1
 80016be:	ec43 2b10 	vmov	d0, r2, r3
 80016c2:	f00d ffa9 	bl	800f618 <sin>
 80016c6:	ec53 2b10 	vmov	r2, r3, d0
 80016ca:	4620      	mov	r0, r4
 80016cc:	4629      	mov	r1, r5
 80016ce:	f7fe ff5f 	bl	8000590 <__aeabi_dmul>
 80016d2:	4602      	mov	r2, r0
 80016d4:	460b      	mov	r3, r1
 80016d6:	4614      	mov	r4, r2
 80016d8:	461d      	mov	r5, r3
 80016da:	6838      	ldr	r0, [r7, #0]
 80016dc:	f7fe ff00 	bl	80004e0 <__aeabi_f2d>
 80016e0:	4602      	mov	r2, r0
 80016e2:	460b      	mov	r3, r1
 80016e4:	4620      	mov	r0, r4
 80016e6:	4629      	mov	r1, r5
 80016e8:	f7fe ff52 	bl	8000590 <__aeabi_dmul>
 80016ec:	4602      	mov	r2, r0
 80016ee:	460b      	mov	r3, r1
 80016f0:	4610      	mov	r0, r2
 80016f2:	4619      	mov	r1, r3
 80016f4:	f7ff fa2e 	bl	8000b54 <__aeabi_d2f>
 80016f8:	4603      	mov	r3, r0
 80016fa:	61fb      	str	r3, [r7, #28]
    float gravity_compensate_rail = motor->En->plotter_mass * motor->En->g * sin(q) * motor->En->c;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	ed93 7a01 	vldr	s14, [r3, #4]
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	edd3 7a00 	vldr	s15, [r3]
 800170c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001710:	ee17 0a90 	vmov	r0, s15
 8001714:	f7fe fee4 	bl	80004e0 <__aeabi_f2d>
 8001718:	4604      	mov	r4, r0
 800171a:	460d      	mov	r5, r1
 800171c:	68b8      	ldr	r0, [r7, #8]
 800171e:	f7fe fedf 	bl	80004e0 <__aeabi_f2d>
 8001722:	4602      	mov	r2, r0
 8001724:	460b      	mov	r3, r1
 8001726:	ec43 2b10 	vmov	d0, r2, r3
 800172a:	f00d ff75 	bl	800f618 <sin>
 800172e:	ec53 2b10 	vmov	r2, r3, d0
 8001732:	4620      	mov	r0, r4
 8001734:	4629      	mov	r1, r5
 8001736:	f7fe ff2b 	bl	8000590 <__aeabi_dmul>
 800173a:	4602      	mov	r2, r0
 800173c:	460b      	mov	r3, r1
 800173e:	4614      	mov	r4, r2
 8001740:	461d      	mov	r5, r3
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	4618      	mov	r0, r3
 800174a:	f7fe fec9 	bl	80004e0 <__aeabi_f2d>
 800174e:	4602      	mov	r2, r0
 8001750:	460b      	mov	r3, r1
 8001752:	4620      	mov	r0, r4
 8001754:	4629      	mov	r1, r5
 8001756:	f7fe ff1b 	bl	8000590 <__aeabi_dmul>
 800175a:	4602      	mov	r2, r0
 800175c:	460b      	mov	r3, r1
 800175e:	4610      	mov	r0, r2
 8001760:	4619      	mov	r1, r3
 8001762:	f7ff f9f7 	bl	8000b54 <__aeabi_d2f>
 8001766:	4603      	mov	r3, r0
 8001768:	61bb      	str	r3, [r7, #24]
//    float mass_torque = motor->En->plotter_mass * s*s * qdd;

    float transfer_function = motor->Mx->R / motor->Mx->Kt;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800177a:	f7ff f833 	bl	80007e4 <__aeabi_ddiv>
 800177e:	4602      	mov	r2, r0
 8001780:	460b      	mov	r3, r1
 8001782:	4610      	mov	r0, r2
 8001784:	4619      	mov	r1, r3
 8001786:	f7ff f9e5 	bl	8000b54 <__aeabi_d2f>
 800178a:	4603      	mov	r3, r0
 800178c:	617b      	str	r3, [r7, #20]

    float v = (gravity_compensate_plotter + gravity_compensate_rail + 0) * transfer_function;
 800178e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001792:	edd7 7a06 	vldr	s15, [r7, #24]
 8001796:	ee77 7a27 	vadd.f32	s15, s14, s15
 800179a:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8001830 <REVOLUTE_MOTOR_DFD_Compute+0x1b4>
 800179e:	ee77 7a87 	vadd.f32	s15, s15, s14
 80017a2:	ed97 7a05 	vldr	s14, [r7, #20]
 80017a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017aa:	edc7 7a04 	vstr	s15, [r7, #16]

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80017b6:	4610      	mov	r0, r2
 80017b8:	4619      	mov	r1, r3
 80017ba:	f7ff f9cb 	bl	8000b54 <__aeabi_d2f>
 80017be:	4603      	mov	r3, r0
 80017c0:	ee07 3a90 	vmov	s15, r3
 80017c4:	eeb1 8a67 	vneg.f32	s16, s15
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80017d0:	4610      	mov	r0, r2
 80017d2:	4619      	mov	r1, r3
 80017d4:	f7ff f9be 	bl	8000b54 <__aeabi_d2f>
 80017d8:	4604      	mov	r4, r0
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80017e2:	4610      	mov	r0, r2
 80017e4:	4619      	mov	r1, r3
 80017e6:	f7ff f9b5 	bl	8000b54 <__aeabi_d2f>
 80017ea:	4603      	mov	r3, r0
 80017ec:	ee07 3a90 	vmov	s15, r3
 80017f0:	eef1 8a67 	vneg.f32	s17, s15
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80017fc:	4610      	mov	r0, r2
 80017fe:	4619      	mov	r1, r3
 8001800:	f7ff f9a8 	bl	8000b54 <__aeabi_d2f>
 8001804:	4603      	mov	r3, r0
 8001806:	ee02 3a10 	vmov	s4, r3
 800180a:	eef0 1a68 	vmov.f32	s3, s17
 800180e:	ee01 4a10 	vmov	s2, r4
 8001812:	eef0 0a48 	vmov.f32	s1, s16
 8001816:	ed97 0a04 	vldr	s0, [r7, #16]
 800181a:	f000 fa81 	bl	8001d20 <mapf>
 800181e:	eef0 7a40 	vmov.f32	s15, s0
}
 8001822:	eeb0 0a67 	vmov.f32	s0, s15
 8001826:	3720      	adds	r7, #32
 8001828:	46bd      	mov	sp, r7
 800182a:	ecbd 8b02 	vpop	{d8}
 800182e:	bdb0      	pop	{r4, r5, r7, pc}
 8001830:	00000000 	.word	0x00000000

08001834 <PRISMATIC_MOTOR_FFD_Init>:

void PRISMATIC_MOTOR_FFD_Init(DC_MOTOR_FFeedward *motor, Motor_Constant_Structure *_Mx) {
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	6039      	str	r1, [r7, #0]
    motor->Mx = _Mx;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	683a      	ldr	r2, [r7, #0]
 8001842:	601a      	str	r2, [r3, #0]
}
 8001844:	bf00      	nop
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <PRISMATIC_MOTOR_FFD_Compute>:

float PRISMATIC_MOTOR_FFD_Compute(DC_MOTOR_FFeedward *motor, float sd) {
 8001850:	b5b0      	push	{r4, r5, r7, lr}
 8001852:	ed2d 8b02 	vpush	{d8}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	ed87 0a00 	vstr	s0, [r7]
    float transfer_function = (motor->Mx->B * motor->Mx->R  + motor->Mx->Ke * motor->Mx->Kt) / motor->Mx->Kt;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001870:	f7fe fe8e 	bl	8000590 <__aeabi_dmul>
 8001874:	4602      	mov	r2, r0
 8001876:	460b      	mov	r3, r1
 8001878:	4614      	mov	r4, r2
 800187a:	461d      	mov	r5, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800188c:	f7fe fe80 	bl	8000590 <__aeabi_dmul>
 8001890:	4602      	mov	r2, r0
 8001892:	460b      	mov	r3, r1
 8001894:	4620      	mov	r0, r4
 8001896:	4629      	mov	r1, r5
 8001898:	f7fe fcc4 	bl	8000224 <__adddf3>
 800189c:	4602      	mov	r2, r0
 800189e:	460b      	mov	r3, r1
 80018a0:	4610      	mov	r0, r2
 80018a2:	4619      	mov	r1, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80018ac:	f7fe ff9a 	bl	80007e4 <__aeabi_ddiv>
 80018b0:	4602      	mov	r2, r0
 80018b2:	460b      	mov	r3, r1
 80018b4:	4610      	mov	r0, r2
 80018b6:	4619      	mov	r1, r3
 80018b8:	f7ff f94c 	bl	8000b54 <__aeabi_d2f>
 80018bc:	4603      	mov	r3, r0
 80018be:	60fb      	str	r3, [r7, #12]

    float v = sd * transfer_function;
 80018c0:	ed97 7a00 	vldr	s14, [r7]
 80018c4:	edd7 7a03 	vldr	s15, [r7, #12]
 80018c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018cc:	edc7 7a02 	vstr	s15, [r7, #8]

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80018d8:	4610      	mov	r0, r2
 80018da:	4619      	mov	r1, r3
 80018dc:	f7ff f93a 	bl	8000b54 <__aeabi_d2f>
 80018e0:	4603      	mov	r3, r0
 80018e2:	ee07 3a90 	vmov	s15, r3
 80018e6:	eeb1 8a67 	vneg.f32	s16, s15
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80018f2:	4610      	mov	r0, r2
 80018f4:	4619      	mov	r1, r3
 80018f6:	f7ff f92d 	bl	8000b54 <__aeabi_d2f>
 80018fa:	4604      	mov	r4, r0
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001904:	4610      	mov	r0, r2
 8001906:	4619      	mov	r1, r3
 8001908:	f7ff f924 	bl	8000b54 <__aeabi_d2f>
 800190c:	4603      	mov	r3, r0
 800190e:	ee07 3a90 	vmov	s15, r3
 8001912:	eef1 8a67 	vneg.f32	s17, s15
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800191e:	4610      	mov	r0, r2
 8001920:	4619      	mov	r1, r3
 8001922:	f7ff f917 	bl	8000b54 <__aeabi_d2f>
 8001926:	4603      	mov	r3, r0
 8001928:	ee02 3a10 	vmov	s4, r3
 800192c:	eef0 1a68 	vmov.f32	s3, s17
 8001930:	ee01 4a10 	vmov	s2, r4
 8001934:	eef0 0a48 	vmov.f32	s1, s16
 8001938:	ed97 0a02 	vldr	s0, [r7, #8]
 800193c:	f000 f9f0 	bl	8001d20 <mapf>
 8001940:	eef0 7a40 	vmov.f32	s15, s0
}
 8001944:	eeb0 0a67 	vmov.f32	s0, s15
 8001948:	3710      	adds	r7, #16
 800194a:	46bd      	mov	sp, r7
 800194c:	ecbd 8b02 	vpop	{d8}
 8001950:	bdb0      	pop	{r4, r5, r7, pc}

08001952 <PRISMATIC_MOTOR_DFD_Init>:

void PRISMATIC_MOTOR_DFD_Init(DC_MOTOR_DFeedward *motor, Motor_Constant_Structure *_Mx, Environment *_En){
 8001952:	b480      	push	{r7}
 8001954:	b085      	sub	sp, #20
 8001956:	af00      	add	r7, sp, #0
 8001958:	60f8      	str	r0, [r7, #12]
 800195a:	60b9      	str	r1, [r7, #8]
 800195c:	607a      	str	r2, [r7, #4]
    motor->Mx = _Mx;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	68ba      	ldr	r2, [r7, #8]
 8001962:	601a      	str	r2, [r3, #0]
    motor->En = _En;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	687a      	ldr	r2, [r7, #4]
 8001968:	605a      	str	r2, [r3, #4]
}
 800196a:	bf00      	nop
 800196c:	3714      	adds	r7, #20
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr

08001976 <PRISMATIC_MOTOR_DFD_Compute>:

float PRISMATIC_MOTOR_DFD_Compute(DC_MOTOR_DFeedward *motor, float q, float qd, float s){
 8001976:	b5b0      	push	{r4, r5, r7, lr}
 8001978:	ed2d 8b02 	vpush	{d8}
 800197c:	b088      	sub	sp, #32
 800197e:	af00      	add	r7, sp, #0
 8001980:	60f8      	str	r0, [r7, #12]
 8001982:	ed87 0a02 	vstr	s0, [r7, #8]
 8001986:	edc7 0a01 	vstr	s1, [r7, #4]
 800198a:	ed87 1a00 	vstr	s2, [r7]
    float gravity_compensate_plotter = motor->En->plotter_mass * motor->En->g * cos(q);
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	ed93 7a01 	vldr	s14, [r3, #4]
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	edd3 7a00 	vldr	s15, [r3]
 800199e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019a2:	ee17 0a90 	vmov	r0, s15
 80019a6:	f7fe fd9b 	bl	80004e0 <__aeabi_f2d>
 80019aa:	4604      	mov	r4, r0
 80019ac:	460d      	mov	r5, r1
 80019ae:	68b8      	ldr	r0, [r7, #8]
 80019b0:	f7fe fd96 	bl	80004e0 <__aeabi_f2d>
 80019b4:	4602      	mov	r2, r0
 80019b6:	460b      	mov	r3, r1
 80019b8:	ec43 2b10 	vmov	d0, r2, r3
 80019bc:	f00d fdd8 	bl	800f570 <cos>
 80019c0:	ec53 2b10 	vmov	r2, r3, d0
 80019c4:	4620      	mov	r0, r4
 80019c6:	4629      	mov	r1, r5
 80019c8:	f7fe fde2 	bl	8000590 <__aeabi_dmul>
 80019cc:	4602      	mov	r2, r0
 80019ce:	460b      	mov	r3, r1
 80019d0:	4610      	mov	r0, r2
 80019d2:	4619      	mov	r1, r3
 80019d4:	f7ff f8be 	bl	8000b54 <__aeabi_d2f>
 80019d8:	4603      	mov	r3, r0
 80019da:	61fb      	str	r3, [r7, #28]

    float centrifugal_force = motor->En->plotter_mass * qd * qd * s;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	ed93 7a01 	vldr	s14, [r3, #4]
 80019e4:	edd7 7a01 	vldr	s15, [r7, #4]
 80019e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019ec:	edd7 7a01 	vldr	s15, [r7, #4]
 80019f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019f4:	ed97 7a00 	vldr	s14, [r7]
 80019f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019fc:	edc7 7a06 	vstr	s15, [r7, #24]

    float transfer_function = (motor->Mx->R * motor->En->prismatic_pulley_radius) / motor->Mx->Kt;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	691b      	ldr	r3, [r3, #16]
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7fe fd66 	bl	80004e0 <__aeabi_f2d>
 8001a14:	4602      	mov	r2, r0
 8001a16:	460b      	mov	r3, r1
 8001a18:	4620      	mov	r0, r4
 8001a1a:	4629      	mov	r1, r5
 8001a1c:	f7fe fdb8 	bl	8000590 <__aeabi_dmul>
 8001a20:	4602      	mov	r2, r0
 8001a22:	460b      	mov	r3, r1
 8001a24:	4610      	mov	r0, r2
 8001a26:	4619      	mov	r1, r3
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001a30:	f7fe fed8 	bl	80007e4 <__aeabi_ddiv>
 8001a34:	4602      	mov	r2, r0
 8001a36:	460b      	mov	r3, r1
 8001a38:	4610      	mov	r0, r2
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	f7ff f88a 	bl	8000b54 <__aeabi_d2f>
 8001a40:	4603      	mov	r3, r0
 8001a42:	617b      	str	r3, [r7, #20]

    float v = (gravity_compensate_plotter + centrifugal_force) * transfer_function;
 8001a44:	ed97 7a07 	vldr	s14, [r7, #28]
 8001a48:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a50:	ed97 7a05 	vldr	s14, [r7, #20]
 8001a54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a58:	edc7 7a04 	vstr	s15, [r7, #16]

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001a64:	4610      	mov	r0, r2
 8001a66:	4619      	mov	r1, r3
 8001a68:	f7ff f874 	bl	8000b54 <__aeabi_d2f>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	ee07 3a90 	vmov	s15, r3
 8001a72:	eeb1 8a67 	vneg.f32	s16, s15
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001a7e:	4610      	mov	r0, r2
 8001a80:	4619      	mov	r1, r3
 8001a82:	f7ff f867 	bl	8000b54 <__aeabi_d2f>
 8001a86:	4604      	mov	r4, r0
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001a90:	4610      	mov	r0, r2
 8001a92:	4619      	mov	r1, r3
 8001a94:	f7ff f85e 	bl	8000b54 <__aeabi_d2f>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	ee07 3a90 	vmov	s15, r3
 8001a9e:	eef1 8a67 	vneg.f32	s17, s15
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001aaa:	4610      	mov	r0, r2
 8001aac:	4619      	mov	r1, r3
 8001aae:	f7ff f851 	bl	8000b54 <__aeabi_d2f>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	ee02 3a10 	vmov	s4, r3
 8001ab8:	eef0 1a68 	vmov.f32	s3, s17
 8001abc:	ee01 4a10 	vmov	s2, r4
 8001ac0:	eef0 0a48 	vmov.f32	s1, s16
 8001ac4:	ed97 0a04 	vldr	s0, [r7, #16]
 8001ac8:	f000 f92a 	bl	8001d20 <mapf>
 8001acc:	eef0 7a40 	vmov.f32	s15, s0
}
 8001ad0:	eeb0 0a67 	vmov.f32	s0, s15
 8001ad4:	3720      	adds	r7, #32
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	ecbd 8b02 	vpop	{d8}
 8001adc:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001ae0 <FIR_init>:
 *      Author: transporter
 */
#include "FIR.h"
#include "arm_math.h"

void FIR_init(FIR *fir, uint16_t numTaps, float cutoffFreq, float samplingFreq) {
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	ed2d 8b02 	vpush	{d8}
 8001ae6:	b08a      	sub	sp, #40	@ 0x28
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	60f8      	str	r0, [r7, #12]
 8001aec:	460b      	mov	r3, r1
 8001aee:	ed87 0a01 	vstr	s0, [r7, #4]
 8001af2:	edc7 0a00 	vstr	s1, [r7]
 8001af6:	817b      	strh	r3, [r7, #10]
    // Make sure numTaps is odd
    if (numTaps % 2 == 0) {
 8001af8:	897b      	ldrh	r3, [r7, #10]
 8001afa:	f003 0301 	and.w	r3, r3, #1
 8001afe:	b29b      	uxth	r3, r3
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d102      	bne.n	8001b0a <FIR_init+0x2a>
        numTaps += 1;
 8001b04:	897b      	ldrh	r3, [r7, #10]
 8001b06:	3301      	adds	r3, #1
 8001b08:	817b      	strh	r3, [r7, #10]
    }

    fir->numTaps = numTaps;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	897a      	ldrh	r2, [r7, #10]
 8001b0e:	811a      	strh	r2, [r3, #8]
    fir->bufferIndex = 0;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	2200      	movs	r2, #0
 8001b14:	815a      	strh	r2, [r3, #10]

    // Allocate memory for coefficients and buffer
    fir->coeffs = (float*)malloc(numTaps * sizeof(float));
 8001b16:	897b      	ldrh	r3, [r7, #10]
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f00d fc20 	bl	800f360 <malloc>
 8001b20:	4603      	mov	r3, r0
 8001b22:	461a      	mov	r2, r3
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	601a      	str	r2, [r3, #0]
    fir->buffer = (float*)malloc(numTaps * sizeof(float));
 8001b28:	897b      	ldrh	r3, [r7, #10]
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f00d fc17 	bl	800f360 <malloc>
 8001b32:	4603      	mov	r3, r0
 8001b34:	461a      	mov	r2, r3
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	605a      	str	r2, [r3, #4]

    if (fir->coeffs != NULL && fir->buffer != NULL) {
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	f000 80e0 	beq.w	8001d04 <FIR_init+0x224>
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	f000 80db 	beq.w	8001d04 <FIR_init+0x224>
        // Clear buffer
        for (uint16_t i = 0; i < numTaps; i++) {
 8001b4e:	2300      	movs	r3, #0
 8001b50:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001b52:	e00a      	b.n	8001b6a <FIR_init+0x8a>
            fir->buffer[i] = 0.0f;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	685a      	ldr	r2, [r3, #4]
 8001b58:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	4413      	add	r3, r2
 8001b5e:	f04f 0200 	mov.w	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]
        for (uint16_t i = 0; i < numTaps; i++) {
 8001b64:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001b66:	3301      	adds	r3, #1
 8001b68:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001b6a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001b6c:	897b      	ldrh	r3, [r7, #10]
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d3f0      	bcc.n	8001b54 <FIR_init+0x74>
        }

        // Calculate normalized cutoff frequency (0 to 0.5)
        float omega = cutoffFreq / samplingFreq;
 8001b72:	edd7 6a01 	vldr	s13, [r7, #4]
 8001b76:	ed97 7a00 	vldr	s14, [r7]
 8001b7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b7e:	edc7 7a06 	vstr	s15, [r7, #24]

        // Calculate filter coefficients (low-pass)
        int16_t half_taps = numTaps / 2;
 8001b82:	897b      	ldrh	r3, [r7, #10]
 8001b84:	085b      	lsrs	r3, r3, #1
 8001b86:	b29b      	uxth	r3, r3
 8001b88:	82fb      	strh	r3, [r7, #22]
        for (int16_t i = 0; i < numTaps; i++) {
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001b8e:	e077      	b.n	8001c80 <FIR_init+0x1a0>
            if (i == half_taps) {
 8001b90:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8001b94:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d10c      	bne.n	8001bb6 <FIR_init+0xd6>
                // Center tap
                fir->coeffs[i] = 2.0f * omega;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	4413      	add	r3, r2
 8001ba8:	edd7 7a06 	vldr	s15, [r7, #24]
 8001bac:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001bb0:	edc3 7a00 	vstr	s15, [r3]
 8001bb4:	e02c      	b.n	8001c10 <FIR_init+0x130>
            } else {
                // Side taps
                int16_t n = i - half_taps;
 8001bb6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001bb8:	8afb      	ldrh	r3, [r7, #22]
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	b29b      	uxth	r3, r3
 8001bbe:	82bb      	strh	r3, [r7, #20]
                fir->coeffs[i] = sinf(2.0f * PI * omega * n) / (PI * n);
 8001bc0:	edd7 7a06 	vldr	s15, [r7, #24]
 8001bc4:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8001d10 <FIR_init+0x230>
 8001bc8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001bcc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001bd0:	ee07 3a90 	vmov	s15, r3
 8001bd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bdc:	eeb0 0a67 	vmov.f32	s0, s15
 8001be0:	f00d fdf0 	bl	800f7c4 <sinf>
 8001be4:	eef0 6a40 	vmov.f32	s13, s0
 8001be8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001bec:	ee07 3a90 	vmov	s15, r3
 8001bf0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bf4:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8001d14 <FIR_init+0x234>
 8001bf8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	4413      	add	r3, r2
 8001c08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c0c:	edc3 7a00 	vstr	s15, [r3]
            }

            // Apply Hamming window
            fir->coeffs[i] *= (0.54f - 0.46f * cosf(2.0f * PI * i / (numTaps - 1)));
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	4413      	add	r3, r2
 8001c1c:	ed93 8a00 	vldr	s16, [r3]
 8001c20:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001c24:	ee07 3a90 	vmov	s15, r3
 8001c28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c2c:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8001d10 <FIR_init+0x230>
 8001c30:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c34:	897b      	ldrh	r3, [r7, #10]
 8001c36:	3b01      	subs	r3, #1
 8001c38:	ee07 3a90 	vmov	s15, r3
 8001c3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c40:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001c44:	eeb0 0a66 	vmov.f32	s0, s13
 8001c48:	f00d fd78 	bl	800f73c <cosf>
 8001c4c:	eef0 7a40 	vmov.f32	s15, s0
 8001c50:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8001d18 <FIR_init+0x238>
 8001c54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c58:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8001d1c <FIR_init+0x23c>
 8001c5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	4413      	add	r3, r2
 8001c6c:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001c70:	edc3 7a00 	vstr	s15, [r3]
        for (int16_t i = 0; i < numTaps; i++) {
 8001c74:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001c78:	b29b      	uxth	r3, r3
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	b29b      	uxth	r3, r3
 8001c7e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001c80:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8001c84:	897b      	ldrh	r3, [r7, #10]
 8001c86:	429a      	cmp	r2, r3
 8001c88:	db82      	blt.n	8001b90 <FIR_init+0xb0>
        }

        // Normalize gain
        float sum = 0.0f;
 8001c8a:	f04f 0300 	mov.w	r3, #0
 8001c8e:	623b      	str	r3, [r7, #32]
        for (uint16_t i = 0; i < numTaps; i++) {
 8001c90:	2300      	movs	r3, #0
 8001c92:	83fb      	strh	r3, [r7, #30]
 8001c94:	e00f      	b.n	8001cb6 <FIR_init+0x1d6>
            sum += fir->coeffs[i];
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	8bfb      	ldrh	r3, [r7, #30]
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	4413      	add	r3, r2
 8001ca0:	edd3 7a00 	vldr	s15, [r3]
 8001ca4:	ed97 7a08 	vldr	s14, [r7, #32]
 8001ca8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cac:	edc7 7a08 	vstr	s15, [r7, #32]
        for (uint16_t i = 0; i < numTaps; i++) {
 8001cb0:	8bfb      	ldrh	r3, [r7, #30]
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	83fb      	strh	r3, [r7, #30]
 8001cb6:	8bfa      	ldrh	r2, [r7, #30]
 8001cb8:	897b      	ldrh	r3, [r7, #10]
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d3eb      	bcc.n	8001c96 <FIR_init+0x1b6>
        }

        if (sum != 0.0f) {
 8001cbe:	edd7 7a08 	vldr	s15, [r7, #32]
 8001cc2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001cc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cca:	d01b      	beq.n	8001d04 <FIR_init+0x224>
            for (uint16_t i = 0; i < numTaps; i++) {
 8001ccc:	2300      	movs	r3, #0
 8001cce:	83bb      	strh	r3, [r7, #28]
 8001cd0:	e014      	b.n	8001cfc <FIR_init+0x21c>
                fir->coeffs[i] /= sum;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	8bbb      	ldrh	r3, [r7, #28]
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	4413      	add	r3, r2
 8001cdc:	edd3 6a00 	vldr	s13, [r3]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	8bbb      	ldrh	r3, [r7, #28]
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	4413      	add	r3, r2
 8001cea:	ed97 7a08 	vldr	s14, [r7, #32]
 8001cee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001cf2:	edc3 7a00 	vstr	s15, [r3]
            for (uint16_t i = 0; i < numTaps; i++) {
 8001cf6:	8bbb      	ldrh	r3, [r7, #28]
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	83bb      	strh	r3, [r7, #28]
 8001cfc:	8bba      	ldrh	r2, [r7, #28]
 8001cfe:	897b      	ldrh	r3, [r7, #10]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d3e6      	bcc.n	8001cd2 <FIR_init+0x1f2>
            }
        }
    }
}
 8001d04:	bf00      	nop
 8001d06:	3728      	adds	r7, #40	@ 0x28
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	ecbd 8b02 	vpop	{d8}
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	40c90fdb 	.word	0x40c90fdb
 8001d14:	40490fdb 	.word	0x40490fdb
 8001d18:	3eeb851f 	.word	0x3eeb851f
 8001d1c:	3f0a3d71 	.word	0x3f0a3d71

08001d20 <mapf>:

}

//Scaling a range of value
float mapf(float input, float min_input, float max_input, float min_output,
		float max_output) {
 8001d20:	b480      	push	{r7}
 8001d22:	b089      	sub	sp, #36	@ 0x24
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	ed87 0a05 	vstr	s0, [r7, #20]
 8001d2a:	edc7 0a04 	vstr	s1, [r7, #16]
 8001d2e:	ed87 1a03 	vstr	s2, [r7, #12]
 8001d32:	edc7 1a02 	vstr	s3, [r7, #8]
 8001d36:	ed87 2a01 	vstr	s4, [r7, #4]

	// First, find the ratio of the input within the input range
	float input_ratio = (input - min_input) / (max_input - min_input);
 8001d3a:	ed97 7a05 	vldr	s14, [r7, #20]
 8001d3e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d42:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001d46:	ed97 7a03 	vldr	s14, [r7, #12]
 8001d4a:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d4e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d56:	edc7 7a07 	vstr	s15, [r7, #28]
	// Then, scale this ratio to the output range
	float output = (input_ratio * (max_output - min_output)) + min_output;
 8001d5a:	ed97 7a01 	vldr	s14, [r7, #4]
 8001d5e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d62:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d66:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d6e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001d72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d76:	edc7 7a06 	vstr	s15, [r7, #24]

	return output;
 8001d7a:	69bb      	ldr	r3, [r7, #24]
 8001d7c:	ee07 3a90 	vmov	s15, r3
}
 8001d80:	eeb0 0a67 	vmov.f32	s0, s15
 8001d84:	3724      	adds	r7, #36	@ 0x24
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
	...

08001d90 <modbus_1t5_Timeout>:
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);

// function for interrupt
void modbus_1t5_Timeout()
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8001d94:	4b0d      	ldr	r3, [pc, #52]	@ (8001dcc <modbus_1t5_Timeout+0x3c>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	2201      	movs	r2, #1
 8001d9a:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8001d9c:	4b0b      	ldr	r3, [pc, #44]	@ (8001dcc <modbus_1t5_Timeout+0x3c>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	691b      	ldr	r3, [r3, #16]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	2200      	movs	r2, #0
 8001da6:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 8001da8:	4b08      	ldr	r3, [pc, #32]	@ (8001dcc <modbus_1t5_Timeout+0x3c>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	691b      	ldr	r3, [r3, #16]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	4b06      	ldr	r3, [pc, #24]	@ (8001dcc <modbus_1t5_Timeout+0x3c>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	691b      	ldr	r3, [r3, #16]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f042 0201 	orr.w	r2, r2, #1
 8001dbe:	601a      	str	r2, [r3, #0]
}
 8001dc0:	bf00      	nop
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	20000174 	.word	0x20000174

08001dd0 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8001dd8:	4b04      	ldr	r3, [pc, #16]	@ (8001dec <modbus_3t5_Timeout+0x1c>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2201      	movs	r2, #1
 8001dde:	755a      	strb	r2, [r3, #21]

}
 8001de0:	bf00      	nop
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr
 8001dec:	20000174 	.word	0x20000174

08001df0 <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	f00c f8e9 	bl	800dfd0 <HAL_UART_GetError>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b20      	cmp	r3, #32
 8001e02:	d101      	bne.n	8001e08 <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 8001e04:	f7ff ffc4 	bl	8001d90 <modbus_1t5_Timeout>

	}
}
 8001e08:	bf00      	nop
 8001e0a:	3708      	adds	r7, #8
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,UART_HandleTypeDef* huart,TIM_HandleTypeDef* htim ,u16u8_t* RegisterStartAddress,uint8_t slaveAddress,uint32_t RegisterSize)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	60f8      	str	r0, [r7, #12]
 8001e18:	60b9      	str	r1, [r7, #8]
 8001e1a:	607a      	str	r2, [r7, #4]
 8001e1c:	603b      	str	r3, [r7, #0]
	hModbus = hmodbus;
 8001e1e:	4a2d      	ldr	r2, [pc, #180]	@ (8001ed4 <Modbus_init+0xc4>)
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	6013      	str	r3, [r2, #0]

	hModbus->huart = huart;
 8001e24:	4b2b      	ldr	r3, [pc, #172]	@ (8001ed4 <Modbus_init+0xc4>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	68ba      	ldr	r2, [r7, #8]
 8001e2a:	60da      	str	r2, [r3, #12]
	hModbus->htim = htim;
 8001e2c:	4b29      	ldr	r3, [pc, #164]	@ (8001ed4 <Modbus_init+0xc4>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	687a      	ldr	r2, [r7, #4]
 8001e32:	611a      	str	r2, [r3, #16]
	hModbus->RegisterAddress = RegisterStartAddress;
 8001e34:	4b27      	ldr	r3, [pc, #156]	@ (8001ed4 <Modbus_init+0xc4>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	683a      	ldr	r2, [r7, #0]
 8001e3a:	605a      	str	r2, [r3, #4]
	hModbus->slaveAddress = slaveAddress;
 8001e3c:	4b25      	ldr	r3, [pc, #148]	@ (8001ed4 <Modbus_init+0xc4>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	7e3a      	ldrb	r2, [r7, #24]
 8001e42:	701a      	strb	r2, [r3, #0]
	hModbus->RegisterSize = RegisterSize;
 8001e44:	4b23      	ldr	r3, [pc, #140]	@ (8001ed4 <Modbus_init+0xc4>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	69fa      	ldr	r2, [r7, #28]
 8001e4a:	609a      	str	r2, [r3, #8]
	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	691b      	ldr	r3, [r3, #16]
 8001e50:	4a21      	ldr	r2, [pc, #132]	@ (8001ed8 <Modbus_init+0xc8>)
 8001e52:	210e      	movs	r1, #14
 8001e54:	4618      	mov	r0, r3
 8001e56:	f00a fb69 	bl	800c52c <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	68db      	ldr	r3, [r3, #12]
 8001e5e:	2110      	movs	r1, #16
 8001e60:	4618      	mov	r0, r3
 8001e62:	f00c f85f 	bl	800df24 <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	68db      	ldr	r3, [r3, #12]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f00c f876 	bl	800df5c <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	4a19      	ldr	r2, [pc, #100]	@ (8001edc <Modbus_init+0xcc>)
 8001e76:	2104      	movs	r1, #4
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f00b fba7 	bl	800d5cc <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 8001e7e:	4b15      	ldr	r3, [pc, #84]	@ (8001ed4 <Modbus_init+0xc4>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 8001e84:	4b13      	ldr	r3, [pc, #76]	@ (8001ed4 <Modbus_init+0xc4>)
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	4b12      	ldr	r3, [pc, #72]	@ (8001ed4 <Modbus_init+0xc4>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 8001e90:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8001e94:	4413      	add	r3, r2
 8001e96:	3302      	adds	r3, #2
 8001e98:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	f00b fc4f 	bl	800d740 <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 8001ea2:	4b0c      	ldr	r3, [pc, #48]	@ (8001ed4 <Modbus_init+0xc4>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	691b      	ldr	r3, [r3, #16]
 8001ea8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d10c      	bne.n	8001ecc <Modbus_init+0xbc>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8001eb2:	4b08      	ldr	r3, [pc, #32]	@ (8001ed4 <Modbus_init+0xc4>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	691b      	ldr	r3, [r3, #16]
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f009 fb13 	bl	800b4e4 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8001ebe:	4b05      	ldr	r3, [pc, #20]	@ (8001ed4 <Modbus_init+0xc4>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	691b      	ldr	r3, [r3, #16]
 8001ec4:	2100      	movs	r1, #0
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f009 fd62 	bl	800b990 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8001ecc:	bf00      	nop
 8001ece:	3710      	adds	r7, #16
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	20000174 	.word	0x20000174
 8001ed8:	08001dd1 	.word	0x08001dd1
 8001edc:	08001df1 	.word	0x08001df1

08001ee0 <MotorKalman_Init>:
#include <string.h>
#include "MotorMatrixGenerator.h"

void MotorKalman_Init(MotorKalman* filter, float32_t dt, float32_t J, float32_t b,
                      float32_t K_t, float32_t K_e, float32_t R_a, float32_t L_a,
                      float32_t Q, float32_t R) {
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b08c      	sub	sp, #48	@ 0x30
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6278      	str	r0, [r7, #36]	@ 0x24
 8001ee8:	ed87 0a08 	vstr	s0, [r7, #32]
 8001eec:	edc7 0a07 	vstr	s1, [r7, #28]
 8001ef0:	ed87 1a06 	vstr	s2, [r7, #24]
 8001ef4:	edc7 1a05 	vstr	s3, [r7, #20]
 8001ef8:	ed87 2a04 	vstr	s4, [r7, #16]
 8001efc:	edc7 2a03 	vstr	s5, [r7, #12]
 8001f00:	ed87 3a02 	vstr	s6, [r7, #8]
 8001f04:	edc7 3a01 	vstr	s7, [r7, #4]
 8001f08:	ed87 4a00 	vstr	s8, [r7]
    // Store motor parameters
    filter->dt = dt;
 8001f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f0e:	6a3a      	ldr	r2, [r7, #32]
 8001f10:	f8c3 2338 	str.w	r2, [r3, #824]	@ 0x338
    filter->J = J;
 8001f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f16:	69fa      	ldr	r2, [r7, #28]
 8001f18:	f8c3 233c 	str.w	r2, [r3, #828]	@ 0x33c
    filter->b = b;
 8001f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f1e:	69ba      	ldr	r2, [r7, #24]
 8001f20:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
    filter->K_t = K_t;
 8001f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f26:	697a      	ldr	r2, [r7, #20]
 8001f28:	f8c3 2344 	str.w	r2, [r3, #836]	@ 0x344
    filter->K_e = K_e;
 8001f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f2e:	693a      	ldr	r2, [r7, #16]
 8001f30:	f8c3 2348 	str.w	r2, [r3, #840]	@ 0x348
    filter->R_a = R_a;
 8001f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f36:	68fa      	ldr	r2, [r7, #12]
 8001f38:	f8c3 234c 	str.w	r2, [r3, #844]	@ 0x34c
    filter->L_a = L_a;
 8001f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f3e:	68ba      	ldr	r2, [r7, #8]
 8001f40:	f8c3 2350 	str.w	r2, [r3, #848]	@ 0x350

    // Initialize state vector to zeros
    memset(filter->X, 0, sizeof(filter->X));
 8001f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f46:	2210      	movs	r2, #16
 8001f48:	2100      	movs	r1, #0
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f00d fabe 	bl	800f4cc <memset>

    // Initialize covariance matrix with high values on diagonal to reflect uncertainty
    memset(filter->P, 0, sizeof(filter->P));
 8001f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f52:	3310      	adds	r3, #16
 8001f54:	2240      	movs	r2, #64	@ 0x40
 8001f56:	2100      	movs	r1, #0
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f00d fab7 	bl	800f4cc <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001f5e:	2300      	movs	r3, #0
 8001f60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f62:	e00c      	b.n	8001f7e <MotorKalman_Init+0x9e>
        filter->P[i * MOTOR_KALMAN_NUM_STATES + i] = 100.0f;
 8001f64:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001f66:	4613      	mov	r3, r2
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	4413      	add	r3, r2
 8001f6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f6e:	3304      	adds	r3, #4
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	4413      	add	r3, r2
 8001f74:	4a79      	ldr	r2, [pc, #484]	@ (800215c <MotorKalman_Init+0x27c>)
 8001f76:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001f78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f80:	2b03      	cmp	r3, #3
 8001f82:	ddef      	ble.n	8001f64 <MotorKalman_Init+0x84>
    }

    // Initialize identity matrix
    memset(filter->I_data, 0, sizeof(filter->I_data));
 8001f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f86:	f503 733e 	add.w	r3, r3, #760	@ 0x2f8
 8001f8a:	2240      	movs	r2, #64	@ 0x40
 8001f8c:	2100      	movs	r1, #0
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f00d fa9c 	bl	800f4cc <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001f94:	2300      	movs	r3, #0
 8001f96:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001f98:	e00d      	b.n	8001fb6 <MotorKalman_Init+0xd6>
        filter->I_data[i * MOTOR_KALMAN_NUM_STATES + i] = 1.0f;
 8001f9a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	4413      	add	r3, r2
 8001fa2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fa4:	33be      	adds	r3, #190	@ 0xbe
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	4413      	add	r3, r2
 8001faa:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001fae:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001fb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001fb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fb8:	2b03      	cmp	r3, #3
 8001fba:	ddee      	ble.n	8001f9a <MotorKalman_Init+0xba>
    }

    // Initialize output matrix C - measuring only position by default
    memset(filter->C, 0, sizeof(filter->C));
 8001fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fbe:	33f0      	adds	r3, #240	@ 0xf0
 8001fc0:	2210      	movs	r2, #16
 8001fc2:	2100      	movs	r1, #0
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f00d fa81 	bl	800f4cc <memset>
    filter->C[0] = 1.0f; // We only measure the position (first state) by default
 8001fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fcc:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001fd0:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

    // Initialize process noise input matrix G
    memset(filter->G, 0, sizeof(filter->G));
 8001fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fd6:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001fda:	2210      	movs	r2, #16
 8001fdc:	2100      	movs	r1, #0
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f00d fa74 	bl	800f4cc <memset>
    filter->G[1] = 1.0f; // Process noise primarily affects the velocity state (index 1)
 8001fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fe6:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001fea:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104


    // Set process and measurement noise values
    MotorKalman_SetProcessNoise(filter, Q);
 8001fee:	ed97 0a01 	vldr	s0, [r7, #4]
 8001ff2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001ff4:	f000 f922 	bl	800223c <MotorKalman_SetProcessNoise>
    MotorKalman_SetMeasurementNoise(filter, R);
 8001ff8:	ed97 0a00 	vldr	s0, [r7]
 8001ffc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001ffe:	f000 f94d 	bl	800229c <MotorKalman_SetMeasurementNoise>

    // Initialize ARM CMSIS DSP matrix instances - essential for safely using the functions
    arm_mat_init_f32(&filter->X_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->X);
 8002002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002004:	f503 70d2 	add.w	r0, r3, #420	@ 0x1a4
 8002008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800200a:	2201      	movs	r2, #1
 800200c:	2104      	movs	r1, #4
 800200e:	f00d f8de 	bl	800f1ce <arm_mat_init_f32>
    arm_mat_init_f32(&filter->P_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->P);
 8002012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002014:	f503 70d6 	add.w	r0, r3, #428	@ 0x1ac
 8002018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800201a:	3310      	adds	r3, #16
 800201c:	2204      	movs	r2, #4
 800201e:	2104      	movs	r1, #4
 8002020:	f00d f8d5 	bl	800f1ce <arm_mat_init_f32>
    arm_mat_init_f32(&filter->I_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->I_data);
 8002024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002026:	f503 703c 	add.w	r0, r3, #752	@ 0x2f0
 800202a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800202c:	f503 733e 	add.w	r3, r3, #760	@ 0x2f8
 8002030:	2204      	movs	r2, #4
 8002032:	2104      	movs	r1, #4
 8002034:	f00d f8cb 	bl	800f1ce <arm_mat_init_f32>
    arm_mat_init_f32(&filter->R_matrix, MOTOR_KALMAN_NUM_OUTPUTS, MOTOR_KALMAN_NUM_OUTPUTS, filter->R);
 8002038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800203a:	f503 70e6 	add.w	r0, r3, #460	@ 0x1cc
 800203e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002040:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8002044:	2201      	movs	r2, #1
 8002046:	2101      	movs	r1, #1
 8002048:	f00d f8c1 	bl	800f1ce <arm_mat_init_f32>
    arm_mat_init_f32(&filter->measurement_matrix, MOTOR_KALMAN_NUM_OUTPUTS, 1, filter->measurement_data);
 800204c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800204e:	f503 7036 	add.w	r0, r3, #728	@ 0x2d8
 8002052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002054:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 8002058:	2201      	movs	r2, #1
 800205a:	2101      	movs	r1, #1
 800205c:	f00d f8b7 	bl	800f1ce <arm_mat_init_f32>
    arm_mat_init_f32(&filter->input_matrix, MOTOR_KALMAN_NUM_INPUTS, 1, filter->input_data);
 8002060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002062:	f503 7038 	add.w	r0, r3, #736	@ 0x2e0
 8002066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002068:	f503 733b 	add.w	r3, r3, #748	@ 0x2ec
 800206c:	2201      	movs	r2, #1
 800206e:	2101      	movs	r1, #1
 8002070:	f00d f8ad 	bl	800f1ce <arm_mat_init_f32>

    // Initialize matrices for transposed versions
    arm_mat_init_f32(&filter->A_transpose_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->A_transpose_data);
 8002074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002076:	f503 70ee 	add.w	r0, r3, #476	@ 0x1dc
 800207a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800207c:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8002080:	2204      	movs	r2, #4
 8002082:	2104      	movs	r1, #4
 8002084:	f00d f8a3 	bl	800f1ce <arm_mat_init_f32>
    arm_mat_init_f32(&filter->C_transpose_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_OUTPUTS, filter->C_transpose_data);
 8002088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800208a:	f503 70f2 	add.w	r0, r3, #484	@ 0x1e4
 800208e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002090:	f503 730b 	add.w	r3, r3, #556	@ 0x22c
 8002094:	2201      	movs	r2, #1
 8002096:	2104      	movs	r1, #4
 8002098:	f00d f899 	bl	800f1ce <arm_mat_init_f32>

    // Initialize temp matrices essential for calculations
    arm_mat_init_f32(&filter->temp_state_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->temp_state_data);
 800209c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800209e:	f503 700f 	add.w	r0, r3, #572	@ 0x23c
 80020a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020a4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80020a8:	2201      	movs	r2, #1
 80020aa:	2104      	movs	r1, #4
 80020ac:	f00d f88f 	bl	800f1ce <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_state_state_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->temp_state_state_data);
 80020b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020b2:	f503 7011 	add.w	r0, r3, #580	@ 0x244
 80020b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020b8:	f503 731d 	add.w	r3, r3, #628	@ 0x274
 80020bc:	2204      	movs	r2, #4
 80020be:	2104      	movs	r1, #4
 80020c0:	f00d f885 	bl	800f1ce <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_output_state_matrix, MOTOR_KALMAN_NUM_OUTPUTS, MOTOR_KALMAN_NUM_STATES, filter->temp_output_state_data);
 80020c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020c6:	f503 7013 	add.w	r0, r3, #588	@ 0x24c
 80020ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020cc:	f503 732d 	add.w	r3, r3, #692	@ 0x2b4
 80020d0:	2204      	movs	r2, #4
 80020d2:	2101      	movs	r1, #1
 80020d4:	f00d f87b 	bl	800f1ce <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_output_output_matrix, MOTOR_KALMAN_NUM_OUTPUTS, MOTOR_KALMAN_NUM_OUTPUTS, filter->temp_output_output_data);
 80020d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020da:	f503 7015 	add.w	r0, r3, #596	@ 0x254
 80020de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020e0:	f503 7331 	add.w	r3, r3, #708	@ 0x2c4
 80020e4:	2201      	movs	r2, #1
 80020e6:	2101      	movs	r1, #1
 80020e8:	f00d f871 	bl	800f1ce <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_state_output_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_OUTPUTS, filter->temp_state_output_data);
 80020ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ee:	f503 7017 	add.w	r0, r3, #604	@ 0x25c
 80020f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020f4:	f503 7332 	add.w	r3, r3, #712	@ 0x2c8
 80020f8:	2201      	movs	r2, #1
 80020fa:	2104      	movs	r1, #4
 80020fc:	f00d f867 	bl	800f1ce <arm_mat_init_f32>

    // Generate continuous-time matrices and discretize the model
    MotorKalman_DiscretizeModel(filter);
 8002100:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002102:	f000 f82d 	bl	8002160 <MotorKalman_DiscretizeModel>

    // Initialize system matrices after discretization
    arm_mat_init_f32(&filter->A_d_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->A_d);
 8002106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002108:	f503 70da 	add.w	r0, r3, #436	@ 0x1b4
 800210c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800210e:	3390      	adds	r3, #144	@ 0x90
 8002110:	2204      	movs	r2, #4
 8002112:	2104      	movs	r1, #4
 8002114:	f00d f85b 	bl	800f1ce <arm_mat_init_f32>
    arm_mat_init_f32(&filter->B_d_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_INPUTS, filter->B_d);
 8002118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800211a:	f503 70de 	add.w	r0, r3, #444	@ 0x1bc
 800211e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002120:	33e0      	adds	r3, #224	@ 0xe0
 8002122:	2201      	movs	r2, #1
 8002124:	2104      	movs	r1, #4
 8002126:	f00d f852 	bl	800f1ce <arm_mat_init_f32>
    arm_mat_init_f32(&filter->Q_d_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->Q_d);
 800212a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800212c:	f503 70e2 	add.w	r0, r3, #452	@ 0x1c4
 8002130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002132:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002136:	2204      	movs	r2, #4
 8002138:	2104      	movs	r1, #4
 800213a:	f00d f848 	bl	800f1ce <arm_mat_init_f32>
    arm_mat_init_f32(&filter->K_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_OUTPUTS, filter->K);
 800213e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002140:	f503 70ea 	add.w	r0, r3, #468	@ 0x1d4
 8002144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002146:	f503 73ca 	add.w	r3, r3, #404	@ 0x194
 800214a:	2201      	movs	r2, #1
 800214c:	2104      	movs	r1, #4
 800214e:	f00d f83e 	bl	800f1ce <arm_mat_init_f32>
}
 8002152:	bf00      	nop
 8002154:	3730      	adds	r7, #48	@ 0x30
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	42c80000 	.word	0x42c80000

08002160 <MotorKalman_DiscretizeModel>:

void MotorKalman_DiscretizeModel(MotorKalman* filter) {
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
    // Use the GenerateMotorMatrices function to discretize the model
    GenerateMotorMatrices(
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	edd3 7ad3 	vldr	s15, [r3, #844]	@ 0x34c
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	ed93 7ad4 	vldr	s14, [r3, #848]	@ 0x350
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	edd3 6acf 	vldr	s13, [r3, #828]	@ 0x33c
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	ed93 6ad0 	vldr	s12, [r3, #832]	@ 0x340
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	edd3 5ad2 	vldr	s11, [r3, #840]	@ 0x348
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	ed93 5ad1 	vldr	s10, [r3, #836]	@ 0x344
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	edd3 4ace 	vldr	s9, [r3, #824]	@ 0x338
        filter->J,       // Motor inertia
        filter->b,       // Viscous friction coefficient
        filter->K_e,     // Back-EMF constant
        filter->K_t,     // Torque constant
        filter->dt,      // Sample time
        filter->A_d,     // Output discrete state matrix
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f103 0290 	add.w	r2, r3, #144	@ 0x90
        filter->B_d      // Output discrete input matrix
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	33e0      	adds	r3, #224	@ 0xe0
    GenerateMotorMatrices(
 800219c:	4619      	mov	r1, r3
 800219e:	4610      	mov	r0, r2
 80021a0:	eeb0 3a64 	vmov.f32	s6, s9
 80021a4:	eef0 2a45 	vmov.f32	s5, s10
 80021a8:	eeb0 2a65 	vmov.f32	s4, s11
 80021ac:	eef0 1a46 	vmov.f32	s3, s12
 80021b0:	eeb0 1a66 	vmov.f32	s2, s13
 80021b4:	eef0 0a47 	vmov.f32	s1, s14
 80021b8:	eeb0 0a67 	vmov.f32	s0, s15
 80021bc:	f001 f83c 	bl	8003238 <GenerateMotorMatrices>
    );

    // Initialize discrete process noise matrix Q_d (simplified for stability)
    memset(filter->Q_d, 0, sizeof(filter->Q_d));
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80021c6:	2240      	movs	r2, #64	@ 0x40
 80021c8:	2100      	movs	r1, #0
 80021ca:	4618      	mov	r0, r3
 80021cc:	f00d f97e 	bl	800f4cc <memset>

    // Set diagonal elements for process noise (simpler but reliable approach)
    filter->Q_d[0 * MOTOR_KALMAN_NUM_STATES + 0] = 0.01f * filter->dt * filter->dt; // Position noise
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 80021d6:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8002234 <MotorKalman_DiscretizeModel+0xd4>
 80021da:	ee27 7a87 	vmul.f32	s14, s15, s14
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 80021e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	edc3 7a54 	vstr	s15, [r3, #336]	@ 0x150
    filter->Q_d[1 * MOTOR_KALMAN_NUM_STATES + 1] = filter->Q[1 * MOTOR_KALMAN_NUM_STATES + 1] * filter->dt; // Velocity noise (main process noise)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	ed93 7a49 	vldr	s14, [r3, #292]	@ 0x124
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 80021fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	edc3 7a59 	vstr	s15, [r3, #356]	@ 0x164
    filter->Q_d[2 * MOTOR_KALMAN_NUM_STATES + 2] = 0.1f * filter->dt; // Load torque noise
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 800220a:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8002238 <MotorKalman_DiscretizeModel+0xd8>
 800220e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	edc3 7a5e 	vstr	s15, [r3, #376]	@ 0x178
    filter->Q_d[3 * MOTOR_KALMAN_NUM_STATES + 3] = 0.01f * filter->dt; // Current noise
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 800221e:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8002234 <MotorKalman_DiscretizeModel+0xd4>
 8002222:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	edc3 7a63 	vstr	s15, [r3, #396]	@ 0x18c
}
 800222c:	bf00      	nop
 800222e:	3708      	adds	r7, #8
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	3c23d70a 	.word	0x3c23d70a
 8002238:	3dcccccd 	.word	0x3dcccccd

0800223c <MotorKalman_SetProcessNoise>:

void MotorKalman_SetProcessNoise(MotorKalman* filter, float32_t Q) {
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	ed87 0a00 	vstr	s0, [r7]
    // Set the process noise covariance matrix Q (continuous)
    memset(filter->Q, 0, sizeof(filter->Q));
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 800224e:	2240      	movs	r2, #64	@ 0x40
 8002250:	2100      	movs	r1, #0
 8002252:	4618      	mov	r0, r3
 8002254:	f00d f93a 	bl	800f4cc <memset>

    // Only the velocity state (index 1) has process noise per G = [0;1;0;0]
    filter->Q[1 * MOTOR_KALMAN_NUM_STATES + 1] = Q * Q;
 8002258:	edd7 7a00 	vldr	s15, [r7]
 800225c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	edc3 7a49 	vstr	s15, [r3, #292]	@ 0x124
    filter->sigma_ml = Q;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	683a      	ldr	r2, [r7, #0]
 800226a:	f8c3 2354 	str.w	r2, [r3, #852]	@ 0x354

    // Update the discrete process noise matrix if A_d has already been initialized
    if (filter->A_d[0] != 0.0f || filter->A_d[1] != 0.0f) {
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	edd3 7a24 	vldr	s15, [r3, #144]	@ 0x90
 8002274:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800227c:	d107      	bne.n	800228e <MotorKalman_SetProcessNoise+0x52>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	edd3 7a25 	vldr	s15, [r3, #148]	@ 0x94
 8002284:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800228c:	d002      	beq.n	8002294 <MotorKalman_SetProcessNoise+0x58>
        MotorKalman_DiscretizeModel(filter); // Recompute discretization with new Q
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f7ff ff66 	bl	8002160 <MotorKalman_DiscretizeModel>
    }
}
 8002294:	bf00      	nop
 8002296:	3708      	adds	r7, #8
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}

0800229c <MotorKalman_SetMeasurementNoise>:

void MotorKalman_SetMeasurementNoise(MotorKalman* filter, float32_t R) {
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	ed87 0a00 	vstr	s0, [r7]
    // Store the noise value
    filter->sigma_pos = sqrtf(R);
 80022a8:	ed97 0a00 	vldr	s0, [r7]
 80022ac:	f00d fa28 	bl	800f700 <sqrtf>
 80022b0:	eef0 7a40 	vmov.f32	s15, s0
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	edc3 7ad6 	vstr	s15, [r3, #856]	@ 0x358

    // Set the measurement noise covariance matrix R
    filter->R[0] = R;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	683a      	ldr	r2, [r7, #0]
 80022be:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
}
 80022c2:	bf00      	nop
 80022c4:	3708      	adds	r7, #8
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}

080022ca <MotorKalman_Predict>:
    filter->velocity = 0.0f;
    filter->load_torque = 0.0f;
    filter->current = 0.0f;
}

void MotorKalman_Predict(MotorKalman* filter, float32_t voltage_input) {
 80022ca:	b580      	push	{r7, lr}
 80022cc:	b0b2      	sub	sp, #200	@ 0xc8
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6078      	str	r0, [r7, #4]
 80022d2:	ed87 0a00 	vstr	s0, [r7]
    // Store input for next step
    filter->input_data[0] = voltage_input;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	683a      	ldr	r2, [r7, #0]
 80022da:	f8c3 22ec 	str.w	r2, [r3, #748]	@ 0x2ec

    // 1. State prediction using simplified method (more stable in embedded systems)
    // Compute x = A*x + B*u directly without using matrix operations
    float32_t new_state[MOTOR_KALMAN_NUM_STATES] = {0};
 80022de:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80022e2:	2200      	movs	r2, #0
 80022e4:	601a      	str	r2, [r3, #0]
 80022e6:	605a      	str	r2, [r3, #4]
 80022e8:	609a      	str	r2, [r3, #8]
 80022ea:	60da      	str	r2, [r3, #12]

    // Calculate A*x (manually)
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80022ec:	2300      	movs	r3, #0
 80022ee:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80022f2:	e041      	b.n	8002378 <MotorKalman_Predict+0xae>
        new_state[i] = 0;
 80022f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	33c8      	adds	r3, #200	@ 0xc8
 80022fc:	443b      	add	r3, r7
 80022fe:	3b3c      	subs	r3, #60	@ 0x3c
 8002300:	f04f 0200 	mov.w	r2, #0
 8002304:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002306:	2300      	movs	r3, #0
 8002308:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800230c:	e02b      	b.n	8002366 <MotorKalman_Predict+0x9c>
            new_state[i] += filter->A_d[i * MOTOR_KALMAN_NUM_STATES + j] * filter->X[j];
 800230e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	33c8      	adds	r3, #200	@ 0xc8
 8002316:	443b      	add	r3, r7
 8002318:	3b3c      	subs	r3, #60	@ 0x3c
 800231a:	ed93 7a00 	vldr	s14, [r3]
 800231e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002322:	009a      	lsls	r2, r3, #2
 8002324:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002328:	4413      	add	r3, r2
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	3324      	adds	r3, #36	@ 0x24
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	4413      	add	r3, r2
 8002332:	edd3 6a00 	vldr	s13, [r3]
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	4413      	add	r3, r2
 8002340:	edd3 7a00 	vldr	s15, [r3]
 8002344:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002348:	ee77 7a27 	vadd.f32	s15, s14, s15
 800234c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	33c8      	adds	r3, #200	@ 0xc8
 8002354:	443b      	add	r3, r7
 8002356:	3b3c      	subs	r3, #60	@ 0x3c
 8002358:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 800235c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002360:	3301      	adds	r3, #1
 8002362:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002366:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800236a:	2b03      	cmp	r3, #3
 800236c:	ddcf      	ble.n	800230e <MotorKalman_Predict+0x44>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 800236e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002372:	3301      	adds	r3, #1
 8002374:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002378:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800237c:	2b03      	cmp	r3, #3
 800237e:	ddb9      	ble.n	80022f4 <MotorKalman_Predict+0x2a>
        }
    }

    // Add B*u (manually)
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002380:	2300      	movs	r3, #0
 8002382:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002386:	e021      	b.n	80023cc <MotorKalman_Predict+0x102>
        filter->X[i] = new_state[i] + filter->B_d[i] * voltage_input;
 8002388:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	33c8      	adds	r3, #200	@ 0xc8
 8002390:	443b      	add	r3, r7
 8002392:	3b3c      	subs	r3, #60	@ 0x3c
 8002394:	ed93 7a00 	vldr	s14, [r3]
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800239e:	3338      	adds	r3, #56	@ 0x38
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	4413      	add	r3, r2
 80023a4:	edd3 6a00 	vldr	s13, [r3]
 80023a8:	edd7 7a00 	vldr	s15, [r7]
 80023ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	4413      	add	r3, r2
 80023be:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80023c2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80023c6:	3301      	adds	r3, #1
 80023c8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80023cc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80023d0:	2b03      	cmp	r3, #3
 80023d2:	ddd9      	ble.n	8002388 <MotorKalman_Predict+0xbe>
    }

    // 2. Covariance prediction using simplified method (Joseph form for stability)
    // Using direct matrix computation for P = A*P*A' + Q
    float32_t AP[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES] = {0};
 80023d4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80023d8:	2240      	movs	r2, #64	@ 0x40
 80023da:	2100      	movs	r1, #0
 80023dc:	4618      	mov	r0, r3
 80023de:	f00d f875 	bl	800f4cc <memset>
    float32_t APAT[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES] = {0};
 80023e2:	f107 030c 	add.w	r3, r7, #12
 80023e6:	2240      	movs	r2, #64	@ 0x40
 80023e8:	2100      	movs	r1, #0
 80023ea:	4618      	mov	r0, r3
 80023ec:	f00d f86e 	bl	800f4cc <memset>

    // Compute A*P
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80023f0:	2300      	movs	r3, #0
 80023f2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80023f6:	e05f      	b.n	80024b8 <MotorKalman_Predict+0x1ee>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80023f8:	2300      	movs	r3, #0
 80023fa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80023fe:	e052      	b.n	80024a6 <MotorKalman_Predict+0x1dc>
            AP[i * MOTOR_KALMAN_NUM_STATES + j] = 0;
 8002400:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002404:	009a      	lsls	r2, r3, #2
 8002406:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800240a:	4413      	add	r3, r2
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	33c8      	adds	r3, #200	@ 0xc8
 8002410:	443b      	add	r3, r7
 8002412:	3b7c      	subs	r3, #124	@ 0x7c
 8002414:	f04f 0200 	mov.w	r2, #0
 8002418:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 800241a:	2300      	movs	r3, #0
 800241c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002420:	e038      	b.n	8002494 <MotorKalman_Predict+0x1ca>
                AP[i * MOTOR_KALMAN_NUM_STATES + j] +=
 8002422:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002426:	009a      	lsls	r2, r3, #2
 8002428:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800242c:	4413      	add	r3, r2
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	33c8      	adds	r3, #200	@ 0xc8
 8002432:	443b      	add	r3, r7
 8002434:	3b7c      	subs	r3, #124	@ 0x7c
 8002436:	ed93 7a00 	vldr	s14, [r3]
                    filter->A_d[i * MOTOR_KALMAN_NUM_STATES + k] * filter->P[k * MOTOR_KALMAN_NUM_STATES + j];
 800243a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800243e:	009a      	lsls	r2, r3, #2
 8002440:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002444:	4413      	add	r3, r2
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	3324      	adds	r3, #36	@ 0x24
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	4413      	add	r3, r2
 800244e:	edd3 6a00 	vldr	s13, [r3]
 8002452:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002456:	009a      	lsls	r2, r3, #2
 8002458:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800245c:	4413      	add	r3, r2
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	3304      	adds	r3, #4
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	4413      	add	r3, r2
 8002466:	edd3 7a00 	vldr	s15, [r3]
 800246a:	ee66 7aa7 	vmul.f32	s15, s13, s15
                AP[i * MOTOR_KALMAN_NUM_STATES + j] +=
 800246e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002472:	009a      	lsls	r2, r3, #2
 8002474:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002478:	4413      	add	r3, r2
 800247a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	33c8      	adds	r3, #200	@ 0xc8
 8002482:	443b      	add	r3, r7
 8002484:	3b7c      	subs	r3, #124	@ 0x7c
 8002486:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 800248a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800248e:	3301      	adds	r3, #1
 8002490:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002494:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002498:	2b03      	cmp	r3, #3
 800249a:	ddc2      	ble.n	8002422 <MotorKalman_Predict+0x158>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 800249c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80024a0:	3301      	adds	r3, #1
 80024a2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80024a6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80024aa:	2b03      	cmp	r3, #3
 80024ac:	dda8      	ble.n	8002400 <MotorKalman_Predict+0x136>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80024ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80024b2:	3301      	adds	r3, #1
 80024b4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80024b8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80024bc:	2b03      	cmp	r3, #3
 80024be:	dd9b      	ble.n	80023f8 <MotorKalman_Predict+0x12e>
            }
        }
    }

    // Compute (A*P)*A'
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80024c0:	2300      	movs	r3, #0
 80024c2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80024c6:	e05f      	b.n	8002588 <MotorKalman_Predict+0x2be>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80024c8:	2300      	movs	r3, #0
 80024ca:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80024ce:	e052      	b.n	8002576 <MotorKalman_Predict+0x2ac>
            APAT[i * MOTOR_KALMAN_NUM_STATES + j] = 0;
 80024d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80024d4:	009a      	lsls	r2, r3, #2
 80024d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80024da:	4413      	add	r3, r2
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	33c8      	adds	r3, #200	@ 0xc8
 80024e0:	443b      	add	r3, r7
 80024e2:	3bbc      	subs	r3, #188	@ 0xbc
 80024e4:	f04f 0200 	mov.w	r2, #0
 80024e8:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 80024ea:	2300      	movs	r3, #0
 80024ec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80024f0:	e038      	b.n	8002564 <MotorKalman_Predict+0x29a>
                APAT[i * MOTOR_KALMAN_NUM_STATES + j] +=
 80024f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80024f6:	009a      	lsls	r2, r3, #2
 80024f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80024fc:	4413      	add	r3, r2
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	33c8      	adds	r3, #200	@ 0xc8
 8002502:	443b      	add	r3, r7
 8002504:	3bbc      	subs	r3, #188	@ 0xbc
 8002506:	ed93 7a00 	vldr	s14, [r3]
                    AP[i * MOTOR_KALMAN_NUM_STATES + k] * filter->A_d[j * MOTOR_KALMAN_NUM_STATES + k];
 800250a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800250e:	009a      	lsls	r2, r3, #2
 8002510:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002514:	4413      	add	r3, r2
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	33c8      	adds	r3, #200	@ 0xc8
 800251a:	443b      	add	r3, r7
 800251c:	3b7c      	subs	r3, #124	@ 0x7c
 800251e:	edd3 6a00 	vldr	s13, [r3]
 8002522:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002526:	009a      	lsls	r2, r3, #2
 8002528:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800252c:	4413      	add	r3, r2
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	3324      	adds	r3, #36	@ 0x24
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	4413      	add	r3, r2
 8002536:	edd3 7a00 	vldr	s15, [r3]
 800253a:	ee66 7aa7 	vmul.f32	s15, s13, s15
                APAT[i * MOTOR_KALMAN_NUM_STATES + j] +=
 800253e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002542:	009a      	lsls	r2, r3, #2
 8002544:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002548:	4413      	add	r3, r2
 800254a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	33c8      	adds	r3, #200	@ 0xc8
 8002552:	443b      	add	r3, r7
 8002554:	3bbc      	subs	r3, #188	@ 0xbc
 8002556:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 800255a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800255e:	3301      	adds	r3, #1
 8002560:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8002564:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002568:	2b03      	cmp	r3, #3
 800256a:	ddc2      	ble.n	80024f2 <MotorKalman_Predict+0x228>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 800256c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002570:	3301      	adds	r3, #1
 8002572:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002576:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800257a:	2b03      	cmp	r3, #3
 800257c:	dda8      	ble.n	80024d0 <MotorKalman_Predict+0x206>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 800257e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002582:	3301      	adds	r3, #1
 8002584:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002588:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800258c:	2b03      	cmp	r3, #3
 800258e:	dd9b      	ble.n	80024c8 <MotorKalman_Predict+0x1fe>
            }
        }
    }

    // Add Q to get P = A*P*A' + Q
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002590:	2300      	movs	r3, #0
 8002592:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002596:	e037      	b.n	8002608 <MotorKalman_Predict+0x33e>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002598:	2300      	movs	r3, #0
 800259a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800259e:	e02a      	b.n	80025f6 <MotorKalman_Predict+0x32c>
            filter->P[i * MOTOR_KALMAN_NUM_STATES + j] =
                APAT[i * MOTOR_KALMAN_NUM_STATES + j] + filter->Q_d[i * MOTOR_KALMAN_NUM_STATES + j];
 80025a0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80025a4:	009a      	lsls	r2, r3, #2
 80025a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80025aa:	4413      	add	r3, r2
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	33c8      	adds	r3, #200	@ 0xc8
 80025b0:	443b      	add	r3, r7
 80025b2:	3bbc      	subs	r3, #188	@ 0xbc
 80025b4:	ed93 7a00 	vldr	s14, [r3]
 80025b8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80025bc:	009a      	lsls	r2, r3, #2
 80025be:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80025c2:	4413      	add	r3, r2
 80025c4:	687a      	ldr	r2, [r7, #4]
 80025c6:	3354      	adds	r3, #84	@ 0x54
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	4413      	add	r3, r2
 80025cc:	edd3 7a00 	vldr	s15, [r3]
            filter->P[i * MOTOR_KALMAN_NUM_STATES + j] =
 80025d0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80025d4:	009a      	lsls	r2, r3, #2
 80025d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80025da:	4413      	add	r3, r2
                APAT[i * MOTOR_KALMAN_NUM_STATES + j] + filter->Q_d[i * MOTOR_KALMAN_NUM_STATES + j];
 80025dc:	ee77 7a27 	vadd.f32	s15, s14, s15
            filter->P[i * MOTOR_KALMAN_NUM_STATES + j] =
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	3304      	adds	r3, #4
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	4413      	add	r3, r2
 80025e8:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80025ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80025f0:	3301      	adds	r3, #1
 80025f2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80025f6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80025fa:	2b03      	cmp	r3, #3
 80025fc:	ddd0      	ble.n	80025a0 <MotorKalman_Predict+0x2d6>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80025fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002602:	3301      	adds	r3, #1
 8002604:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002608:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800260c:	2b03      	cmp	r3, #3
 800260e:	ddc3      	ble.n	8002598 <MotorKalman_Predict+0x2ce>
        }
    }

    // Update state estimates for easy access
    filter->position = filter->X[0];
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	f8c3 235c 	str.w	r2, [r3, #860]	@ 0x35c
    filter->velocity = filter->X[1];
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	685a      	ldr	r2, [r3, #4]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	f8c3 2360 	str.w	r2, [r3, #864]	@ 0x360
    filter->load_torque = filter->X[2];
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	689a      	ldr	r2, [r3, #8]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f8c3 2364 	str.w	r2, [r3, #868]	@ 0x364
    filter->current = filter->X[3];
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	68da      	ldr	r2, [r3, #12]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	f8c3 2368 	str.w	r2, [r3, #872]	@ 0x368

    // Update CMSIS DSP matrices for next update step
    arm_mat_init_f32(&filter->X_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->X);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	f503 70d2 	add.w	r0, r3, #420	@ 0x1a4
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2201      	movs	r2, #1
 8002642:	2104      	movs	r1, #4
 8002644:	f00c fdc3 	bl	800f1ce <arm_mat_init_f32>
    arm_mat_init_f32(&filter->P_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->P);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	f503 70d6 	add.w	r0, r3, #428	@ 0x1ac
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	3310      	adds	r3, #16
 8002652:	2204      	movs	r2, #4
 8002654:	2104      	movs	r1, #4
 8002656:	f00c fdba 	bl	800f1ce <arm_mat_init_f32>
}
 800265a:	bf00      	nop
 800265c:	37c8      	adds	r7, #200	@ 0xc8
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
	...

08002664 <MotorKalman_Update>:

void MotorKalman_Update(MotorKalman* filter, float32_t position) {
 8002664:	b580      	push	{r7, lr}
 8002666:	b0d0      	sub	sp, #320	@ 0x140
 8002668:	af00      	add	r7, sp, #0
 800266a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800266e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002672:	6018      	str	r0, [r3, #0]
 8002674:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002678:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800267c:	ed83 0a00 	vstr	s0, [r3]
    // Store the position measurement
    filter->measurement_data[0] = position;
 8002680:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002684:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800268e:	f5a2 72a0 	sub.w	r2, r2, #320	@ 0x140
 8002692:	6812      	ldr	r2, [r2, #0]
 8002694:	f8c3 22e8 	str.w	r2, [r3, #744]	@ 0x2e8

    // 1. Compute innovation: y - C*x (directly, no matrix operations)
    float32_t Cx = filter->C[0] * filter->X[0] + filter->C[1] * filter->X[1] +
 8002698:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800269c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	ed93 7a3c 	vldr	s14, [r3, #240]	@ 0xf0
 80026a6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80026aa:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	edd3 7a00 	vldr	s15, [r3]
 80026b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026b8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80026bc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	edd3 6a3d 	vldr	s13, [r3, #244]	@ 0xf4
 80026c6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80026ca:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	edd3 7a01 	vldr	s15, [r3, #4]
 80026d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026d8:	ee37 7a27 	vadd.f32	s14, s14, s15
                  filter->C[2] * filter->X[2] + filter->C[3] * filter->X[3];
 80026dc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80026e0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	edd3 6a3e 	vldr	s13, [r3, #248]	@ 0xf8
 80026ea:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80026ee:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	edd3 7a02 	vldr	s15, [r3, #8]
 80026f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
    float32_t Cx = filter->C[0] * filter->X[0] + filter->C[1] * filter->X[1] +
 80026fc:	ee37 7a27 	vadd.f32	s14, s14, s15
                  filter->C[2] * filter->X[2] + filter->C[3] * filter->X[3];
 8002700:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002704:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	edd3 6a3f 	vldr	s13, [r3, #252]	@ 0xfc
 800270e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002712:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	edd3 7a03 	vldr	s15, [r3, #12]
 800271c:	ee66 7aa7 	vmul.f32	s15, s13, s15
    float32_t Cx = filter->C[0] * filter->X[0] + filter->C[1] * filter->X[1] +
 8002720:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002724:	edc7 7a40 	vstr	s15, [r7, #256]	@ 0x100
    float32_t innovation = position - Cx;
 8002728:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800272c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002730:	ed93 7a00 	vldr	s14, [r3]
 8002734:	edd7 7a40 	vldr	s15, [r7, #256]	@ 0x100
 8002738:	ee77 7a67 	vsub.f32	s15, s14, s15
 800273c:	edc7 7a3f 	vstr	s15, [r7, #252]	@ 0xfc

    // 2. Compute innovation covariance: S = C*P*C' + R (directly)
    float32_t CP[MOTOR_KALMAN_NUM_STATES] = {0};
 8002740:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8002744:	2200      	movs	r2, #0
 8002746:	601a      	str	r2, [r3, #0]
 8002748:	605a      	str	r2, [r3, #4]
 800274a:	609a      	str	r2, [r3, #8]
 800274c:	60da      	str	r2, [r3, #12]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 800274e:	2300      	movs	r3, #0
 8002750:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8002754:	e04d      	b.n	80027f2 <MotorKalman_Update+0x18e>
        CP[i] = 0;
 8002756:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002760:	443b      	add	r3, r7
 8002762:	3b58      	subs	r3, #88	@ 0x58
 8002764:	f04f 0200 	mov.w	r2, #0
 8002768:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 800276a:	2300      	movs	r3, #0
 800276c:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8002770:	e036      	b.n	80027e0 <MotorKalman_Update+0x17c>
            CP[i] += filter->C[j] * filter->P[j * MOTOR_KALMAN_NUM_STATES + i];
 8002772:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 800277c:	443b      	add	r3, r7
 800277e:	3b58      	subs	r3, #88	@ 0x58
 8002780:	ed93 7a00 	vldr	s14, [r3]
 8002784:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002788:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002792:	333c      	adds	r3, #60	@ 0x3c
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	4413      	add	r3, r2
 8002798:	edd3 6a00 	vldr	s13, [r3]
 800279c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80027a0:	009a      	lsls	r2, r3, #2
 80027a2:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80027a6:	4413      	add	r3, r2
 80027a8:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80027ac:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 80027b0:	6812      	ldr	r2, [r2, #0]
 80027b2:	3304      	adds	r3, #4
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	4413      	add	r3, r2
 80027b8:	edd3 7a00 	vldr	s15, [r3]
 80027bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027c4:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80027ce:	443b      	add	r3, r7
 80027d0:	3b58      	subs	r3, #88	@ 0x58
 80027d2:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80027d6:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80027da:	3301      	adds	r3, #1
 80027dc:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 80027e0:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80027e4:	2b03      	cmp	r3, #3
 80027e6:	ddc4      	ble.n	8002772 <MotorKalman_Update+0x10e>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80027e8:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80027ec:	3301      	adds	r3, #1
 80027ee:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 80027f2:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80027f6:	2b03      	cmp	r3, #3
 80027f8:	ddad      	ble.n	8002756 <MotorKalman_Update+0xf2>
        }
    }

    float32_t CPCT = 0;
 80027fa:	f04f 0300 	mov.w	r3, #0
 80027fe:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002802:	2300      	movs	r3, #0
 8002804:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8002808:	e021      	b.n	800284e <MotorKalman_Update+0x1ea>
        CPCT += CP[i] * filter->C[i];
 800280a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002814:	443b      	add	r3, r7
 8002816:	3b58      	subs	r3, #88	@ 0x58
 8002818:	ed93 7a00 	vldr	s14, [r3]
 800281c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002820:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800282a:	333c      	adds	r3, #60	@ 0x3c
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	4413      	add	r3, r2
 8002830:	edd3 7a00 	vldr	s15, [r3]
 8002834:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002838:	ed97 7a4d 	vldr	s14, [r7, #308]	@ 0x134
 800283c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002840:	edc7 7a4d 	vstr	s15, [r7, #308]	@ 0x134
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002844:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002848:	3301      	adds	r3, #1
 800284a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800284e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002852:	2b03      	cmp	r3, #3
 8002854:	ddd9      	ble.n	800280a <MotorKalman_Update+0x1a6>
    }

    float32_t S = CPCT + filter->R[0];
 8002856:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800285a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	edd3 7a64 	vldr	s15, [r3, #400]	@ 0x190
 8002864:	ed97 7a4d 	vldr	s14, [r7, #308]	@ 0x134
 8002868:	ee77 7a27 	vadd.f32	s15, s14, s15
 800286c:	edc7 7a3e 	vstr	s15, [r7, #248]	@ 0xf8

    // 3. Compute Kalman gain: K = P*C'/S (directly)
    float32_t PC[MOTOR_KALMAN_NUM_STATES] = {0};
 8002870:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8002874:	2200      	movs	r2, #0
 8002876:	601a      	str	r2, [r3, #0]
 8002878:	605a      	str	r2, [r3, #4]
 800287a:	609a      	str	r2, [r3, #8]
 800287c:	60da      	str	r2, [r3, #12]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 800287e:	2300      	movs	r3, #0
 8002880:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8002884:	e04d      	b.n	8002922 <MotorKalman_Update+0x2be>
        PC[i] = 0;
 8002886:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002890:	443b      	add	r3, r7
 8002892:	3b68      	subs	r3, #104	@ 0x68
 8002894:	f04f 0200 	mov.w	r2, #0
 8002898:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 800289a:	2300      	movs	r3, #0
 800289c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80028a0:	e036      	b.n	8002910 <MotorKalman_Update+0x2ac>
            PC[i] += filter->P[i * MOTOR_KALMAN_NUM_STATES + j] * filter->C[j];
 80028a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80028ac:	443b      	add	r3, r7
 80028ae:	3b68      	subs	r3, #104	@ 0x68
 80028b0:	ed93 7a00 	vldr	s14, [r3]
 80028b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80028b8:	009a      	lsls	r2, r3, #2
 80028ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80028be:	4413      	add	r3, r2
 80028c0:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80028c4:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 80028c8:	6812      	ldr	r2, [r2, #0]
 80028ca:	3304      	adds	r3, #4
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	4413      	add	r3, r2
 80028d0:	edd3 6a00 	vldr	s13, [r3]
 80028d4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80028d8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80028e2:	333c      	adds	r3, #60	@ 0x3c
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	4413      	add	r3, r2
 80028e8:	edd3 7a00 	vldr	s15, [r3]
 80028ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80028fe:	443b      	add	r3, r7
 8002900:	3b68      	subs	r3, #104	@ 0x68
 8002902:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002906:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800290a:	3301      	adds	r3, #1
 800290c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8002910:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002914:	2b03      	cmp	r3, #3
 8002916:	ddc4      	ble.n	80028a2 <MotorKalman_Update+0x23e>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002918:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800291c:	3301      	adds	r3, #1
 800291e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8002922:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002926:	2b03      	cmp	r3, #3
 8002928:	ddad      	ble.n	8002886 <MotorKalman_Update+0x222>
        }
    }

    float32_t K[MOTOR_KALMAN_NUM_STATES] = {0};
 800292a:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 800292e:	2200      	movs	r2, #0
 8002930:	601a      	str	r2, [r3, #0]
 8002932:	605a      	str	r2, [r3, #4]
 8002934:	609a      	str	r2, [r3, #8]
 8002936:	60da      	str	r2, [r3, #12]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002938:	2300      	movs	r3, #0
 800293a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800293e:	e01a      	b.n	8002976 <MotorKalman_Update+0x312>
        K[i] = PC[i] / S;
 8002940:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 800294a:	443b      	add	r3, r7
 800294c:	3b68      	subs	r3, #104	@ 0x68
 800294e:	edd3 6a00 	vldr	s13, [r3]
 8002952:	ed97 7a3e 	vldr	s14, [r7, #248]	@ 0xf8
 8002956:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800295a:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002964:	443b      	add	r3, r7
 8002966:	3b78      	subs	r3, #120	@ 0x78
 8002968:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 800296c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002970:	3301      	adds	r3, #1
 8002972:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002976:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800297a:	2b03      	cmp	r3, #3
 800297c:	dde0      	ble.n	8002940 <MotorKalman_Update+0x2dc>
    }

    // 4. Update state estimate: x = x + K*innovation (directly)
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 800297e:	2300      	movs	r3, #0
 8002980:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002984:	e029      	b.n	80029da <MotorKalman_Update+0x376>
        filter->X[i] += K[i] * innovation;
 8002986:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800298a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	4413      	add	r3, r2
 8002998:	ed93 7a00 	vldr	s14, [r3]
 800299c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80029a6:	443b      	add	r3, r7
 80029a8:	3b78      	subs	r3, #120	@ 0x78
 80029aa:	edd3 6a00 	vldr	s13, [r3]
 80029ae:	edd7 7a3f 	vldr	s15, [r7, #252]	@ 0xfc
 80029b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029ba:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80029be:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	4413      	add	r3, r2
 80029cc:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80029d0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80029d4:	3301      	adds	r3, #1
 80029d6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80029da:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80029de:	2b03      	cmp	r3, #3
 80029e0:	ddd1      	ble.n	8002986 <MotorKalman_Update+0x322>
    }

    // 5. Update covariance matrix: P = (I - K*C)*P (Joseph form for better stability)
    float32_t KC[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES] = {0};
 80029e2:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80029e6:	2240      	movs	r2, #64	@ 0x40
 80029e8:	2100      	movs	r1, #0
 80029ea:	4618      	mov	r0, r3
 80029ec:	f00c fd6e 	bl	800f4cc <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80029f0:	2300      	movs	r3, #0
 80029f2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80029f6:	e035      	b.n	8002a64 <MotorKalman_Update+0x400>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80029f8:	2300      	movs	r3, #0
 80029fa:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80029fe:	e028      	b.n	8002a52 <MotorKalman_Update+0x3ee>
            KC[i * MOTOR_KALMAN_NUM_STATES + j] = K[i] * filter->C[j];
 8002a00:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002a0a:	443b      	add	r3, r7
 8002a0c:	3b78      	subs	r3, #120	@ 0x78
 8002a0e:	ed93 7a00 	vldr	s14, [r3]
 8002a12:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002a16:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002a20:	333c      	adds	r3, #60	@ 0x3c
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	4413      	add	r3, r2
 8002a26:	edd3 7a00 	vldr	s15, [r3]
 8002a2a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002a2e:	009a      	lsls	r2, r3, #2
 8002a30:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002a34:	4413      	add	r3, r2
 8002a36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002a40:	443b      	add	r3, r7
 8002a42:	3bb8      	subs	r3, #184	@ 0xb8
 8002a44:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002a48:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002a4c:	3301      	adds	r3, #1
 8002a4e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8002a52:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002a56:	2b03      	cmp	r3, #3
 8002a58:	ddd2      	ble.n	8002a00 <MotorKalman_Update+0x39c>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002a5a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002a5e:	3301      	adds	r3, #1
 8002a60:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002a64:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002a68:	2b03      	cmp	r3, #3
 8002a6a:	ddc5      	ble.n	80029f8 <MotorKalman_Update+0x394>
        }
    }

    float32_t IKC[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES] = {0};
 8002a6c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002a70:	2240      	movs	r2, #64	@ 0x40
 8002a72:	2100      	movs	r1, #0
 8002a74:	4618      	mov	r0, r3
 8002a76:	f00c fd29 	bl	800f4cc <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8002a80:	e038      	b.n	8002af4 <MotorKalman_Update+0x490>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002a82:	2300      	movs	r3, #0
 8002a84:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8002a88:	e02b      	b.n	8002ae2 <MotorKalman_Update+0x47e>
            IKC[i * MOTOR_KALMAN_NUM_STATES + j] = (i == j ? 1.0f : 0.0f) - KC[i * MOTOR_KALMAN_NUM_STATES + j];
 8002a8a:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002a8e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d102      	bne.n	8002a9c <MotorKalman_Update+0x438>
 8002a96:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002a9a:	e001      	b.n	8002aa0 <MotorKalman_Update+0x43c>
 8002a9c:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 8002cb8 <MotorKalman_Update+0x654>
 8002aa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002aa4:	009a      	lsls	r2, r3, #2
 8002aa6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002aaa:	4413      	add	r3, r2
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002ab2:	443b      	add	r3, r7
 8002ab4:	3bb8      	subs	r3, #184	@ 0xb8
 8002ab6:	edd3 7a00 	vldr	s15, [r3]
 8002aba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002abe:	009a      	lsls	r2, r3, #2
 8002ac0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002ac4:	4413      	add	r3, r2
 8002ac6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002ad0:	443b      	add	r3, r7
 8002ad2:	3bf8      	subs	r3, #248	@ 0xf8
 8002ad4:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002ad8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002adc:	3301      	adds	r3, #1
 8002ade:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8002ae2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002ae6:	2b03      	cmp	r3, #3
 8002ae8:	ddcf      	ble.n	8002a8a <MotorKalman_Update+0x426>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002aea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002aee:	3301      	adds	r3, #1
 8002af0:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8002af4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002af8:	2b03      	cmp	r3, #3
 8002afa:	ddc2      	ble.n	8002a82 <MotorKalman_Update+0x41e>
        }
    }

    // Store P temporarily
    float32_t P_temp[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES];
    memcpy(P_temp, filter->P, sizeof(P_temp));
 8002afc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002b00:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f103 0110 	add.w	r1, r3, #16
 8002b0a:	f107 0308 	add.w	r3, r7, #8
 8002b0e:	2240      	movs	r2, #64	@ 0x40
 8002b10:	4618      	mov	r0, r3
 8002b12:	f00c fd1f 	bl	800f554 <memcpy>

    // Compute (I - K*C)*P
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002b16:	2300      	movs	r3, #0
 8002b18:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002b1c:	e06e      	b.n	8002bfc <MotorKalman_Update+0x598>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002b1e:	2300      	movs	r3, #0
 8002b20:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002b24:	e061      	b.n	8002bea <MotorKalman_Update+0x586>
            filter->P[i * MOTOR_KALMAN_NUM_STATES + j] = 0;
 8002b26:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002b2a:	009a      	lsls	r2, r3, #2
 8002b2c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002b30:	4413      	add	r3, r2
 8002b32:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8002b36:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8002b3a:	6812      	ldr	r2, [r2, #0]
 8002b3c:	3304      	adds	r3, #4
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	4413      	add	r3, r2
 8002b42:	f04f 0200 	mov.w	r2, #0
 8002b46:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 8002b48:	2300      	movs	r3, #0
 8002b4a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002b4e:	e043      	b.n	8002bd8 <MotorKalman_Update+0x574>
                filter->P[i * MOTOR_KALMAN_NUM_STATES + j] +=
 8002b50:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002b54:	009a      	lsls	r2, r3, #2
 8002b56:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002b5a:	4413      	add	r3, r2
 8002b5c:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8002b60:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8002b64:	6812      	ldr	r2, [r2, #0]
 8002b66:	3304      	adds	r3, #4
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	4413      	add	r3, r2
 8002b6c:	ed93 7a00 	vldr	s14, [r3]
                    IKC[i * MOTOR_KALMAN_NUM_STATES + k] * P_temp[k * MOTOR_KALMAN_NUM_STATES + j];
 8002b70:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002b74:	009a      	lsls	r2, r3, #2
 8002b76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002b7a:	4413      	add	r3, r2
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002b82:	443b      	add	r3, r7
 8002b84:	3bf8      	subs	r3, #248	@ 0xf8
 8002b86:	edd3 6a00 	vldr	s13, [r3]
 8002b8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002b8e:	009a      	lsls	r2, r3, #2
 8002b90:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002b94:	4413      	add	r3, r2
 8002b96:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8002b9a:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	4413      	add	r3, r2
 8002ba2:	edd3 7a00 	vldr	s15, [r3]
 8002ba6:	ee66 7aa7 	vmul.f32	s15, s13, s15
                filter->P[i * MOTOR_KALMAN_NUM_STATES + j] +=
 8002baa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002bae:	009a      	lsls	r2, r3, #2
 8002bb0:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002bb4:	4413      	add	r3, r2
 8002bb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bba:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8002bbe:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8002bc2:	6812      	ldr	r2, [r2, #0]
 8002bc4:	3304      	adds	r3, #4
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	4413      	add	r3, r2
 8002bca:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 8002bce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002bd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002bdc:	2b03      	cmp	r3, #3
 8002bde:	ddb7      	ble.n	8002b50 <MotorKalman_Update+0x4ec>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002be0:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002be4:	3301      	adds	r3, #1
 8002be6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002bea:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002bee:	2b03      	cmp	r3, #3
 8002bf0:	dd99      	ble.n	8002b26 <MotorKalman_Update+0x4c2>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002bf2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002bfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002c00:	2b03      	cmp	r3, #3
 8002c02:	dd8c      	ble.n	8002b1e <MotorKalman_Update+0x4ba>
            }
        }
    }

    // Update state estimates for easy access
    filter->position = filter->X[0];
 8002c04:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002c08:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002c14:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f8c3 235c 	str.w	r2, [r3, #860]	@ 0x35c
    filter->velocity = filter->X[1];
 8002c1e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002c22:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	685a      	ldr	r2, [r3, #4]
 8002c2a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002c2e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f8c3 2360 	str.w	r2, [r3, #864]	@ 0x360
    filter->load_torque = filter->X[2];
 8002c38:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002c3c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	689a      	ldr	r2, [r3, #8]
 8002c44:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002c48:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f8c3 2364 	str.w	r2, [r3, #868]	@ 0x364
    filter->current = filter->X[3];
 8002c52:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002c56:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	68da      	ldr	r2, [r3, #12]
 8002c5e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002c62:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f8c3 2368 	str.w	r2, [r3, #872]	@ 0x368

    // Update CMSIS DSP matrices for next time
    arm_mat_init_f32(&filter->X_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->X);
 8002c6c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002c70:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f503 70d2 	add.w	r0, r3, #420	@ 0x1a4
 8002c7a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002c7e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2201      	movs	r2, #1
 8002c86:	2104      	movs	r1, #4
 8002c88:	f00c faa1 	bl	800f1ce <arm_mat_init_f32>
    arm_mat_init_f32(&filter->P_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->P);
 8002c8c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002c90:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f503 70d6 	add.w	r0, r3, #428	@ 0x1ac
 8002c9a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002c9e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	3310      	adds	r3, #16
 8002ca6:	2204      	movs	r2, #4
 8002ca8:	2104      	movs	r1, #4
 8002caa:	f00c fa90 	bl	800f1ce <arm_mat_init_f32>
}
 8002cae:	bf00      	nop
 8002cb0:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	00000000 	.word	0x00000000

08002cbc <MotorKalman_Estimate>:

float MotorKalman_Estimate(MotorKalman* filter, float32_t voltage_input, float32_t position) {
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b084      	sub	sp, #16
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	60f8      	str	r0, [r7, #12]
 8002cc4:	ed87 0a02 	vstr	s0, [r7, #8]
 8002cc8:	edc7 0a01 	vstr	s1, [r7, #4]
    // Execute the predict and update steps
    MotorKalman_Predict(filter, voltage_input);
 8002ccc:	ed97 0a02 	vldr	s0, [r7, #8]
 8002cd0:	68f8      	ldr	r0, [r7, #12]
 8002cd2:	f7ff fafa 	bl	80022ca <MotorKalman_Predict>
    MotorKalman_Update(filter, position);
 8002cd6:	ed97 0a01 	vldr	s0, [r7, #4]
 8002cda:	68f8      	ldr	r0, [r7, #12]
 8002cdc:	f7ff fcc2 	bl	8002664 <MotorKalman_Update>

    return filter->velocity;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f8d3 3360 	ldr.w	r3, [r3, #864]	@ 0x360
 8002ce6:	ee07 3a90 	vmov	s15, r3
}
 8002cea:	eeb0 0a67 	vmov.f32	s0, s15
 8002cee:	3710      	adds	r7, #16
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <matrix_copy>:

#include "MotorMatrixGenerator.h"
#include <math.h>
#include <string.h>

static void matrix_copy(float32_t *src, float32_t *dst, int size) {
 8002cf4:	b480      	push	{r7}
 8002cf6:	b087      	sub	sp, #28
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	60f8      	str	r0, [r7, #12]
 8002cfc:	60b9      	str	r1, [r7, #8]
 8002cfe:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < size; i++) {
 8002d00:	2300      	movs	r3, #0
 8002d02:	617b      	str	r3, [r7, #20]
 8002d04:	e00c      	b.n	8002d20 <matrix_copy+0x2c>
        dst[i] = src[i];
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	68fa      	ldr	r2, [r7, #12]
 8002d0c:	441a      	add	r2, r3
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	68b9      	ldr	r1, [r7, #8]
 8002d14:	440b      	add	r3, r1
 8002d16:	6812      	ldr	r2, [r2, #0]
 8002d18:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < size; i++) {
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	617b      	str	r3, [r7, #20]
 8002d20:	697a      	ldr	r2, [r7, #20]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	429a      	cmp	r2, r3
 8002d26:	dbee      	blt.n	8002d06 <matrix_copy+0x12>
    }
}
 8002d28:	bf00      	nop
 8002d2a:	bf00      	nop
 8002d2c:	371c      	adds	r7, #28
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr
	...

08002d38 <discretize_system_with_arm>:

static void discretize_system_with_arm(float32_t *A_c, float32_t *B_c, float32_t dt,
                                      float32_t *A_d, float32_t *B_d) {
 8002d38:	b590      	push	{r4, r7, lr}
 8002d3a:	f5ad 7d2f 	sub.w	sp, sp, #700	@ 0x2bc
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	f507 742e 	add.w	r4, r7, #696	@ 0x2b8
 8002d44:	f5a4 7429 	sub.w	r4, r4, #676	@ 0x2a4
 8002d48:	6020      	str	r0, [r4, #0]
 8002d4a:	f507 702e 	add.w	r0, r7, #696	@ 0x2b8
 8002d4e:	f5a0 702a 	sub.w	r0, r0, #680	@ 0x2a8
 8002d52:	6001      	str	r1, [r0, #0]
 8002d54:	f507 712e 	add.w	r1, r7, #696	@ 0x2b8
 8002d58:	f5a1 712b 	sub.w	r1, r1, #684	@ 0x2ac
 8002d5c:	ed81 0a00 	vstr	s0, [r1]
 8002d60:	f507 712e 	add.w	r1, r7, #696	@ 0x2b8
 8002d64:	f5a1 712c 	sub.w	r1, r1, #688	@ 0x2b0
 8002d68:	600a      	str	r2, [r1, #0]
 8002d6a:	f507 722e 	add.w	r2, r7, #696	@ 0x2b8
 8002d6e:	f5a2 722d 	sub.w	r2, r2, #692	@ 0x2b4
 8002d72:	6013      	str	r3, [r2, #0]
    // Initialize ARM matrix instances
    arm_matrix_instance_f32 A_c_matrix, A_d_matrix, B_c_matrix, B_d_matrix;
    arm_mat_init_f32(&A_c_matrix, 4, 4, A_c);
 8002d74:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002d78:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8002d7c:	f507 7029 	add.w	r0, r7, #676	@ 0x2a4
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	2204      	movs	r2, #4
 8002d84:	2104      	movs	r1, #4
 8002d86:	f00c fa22 	bl	800f1ce <arm_mat_init_f32>
    arm_mat_init_f32(&A_d_matrix, 4, 4, A_d);
 8002d8a:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002d8e:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 8002d92:	f507 7027 	add.w	r0, r7, #668	@ 0x29c
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	2204      	movs	r2, #4
 8002d9a:	2104      	movs	r1, #4
 8002d9c:	f00c fa17 	bl	800f1ce <arm_mat_init_f32>
    arm_mat_init_f32(&B_c_matrix, 4, 1, B_c);
 8002da0:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002da4:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8002da8:	f507 7025 	add.w	r0, r7, #660	@ 0x294
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	2201      	movs	r2, #1
 8002db0:	2104      	movs	r1, #4
 8002db2:	f00c fa0c 	bl	800f1ce <arm_mat_init_f32>
    arm_mat_init_f32(&B_d_matrix, 4, 1, B_d);
 8002db6:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002dba:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8002dbe:	f507 7023 	add.w	r0, r7, #652	@ 0x28c
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	2104      	movs	r1, #4
 8002dc8:	f00c fa01 	bl	800f1ce <arm_mat_init_f32>

    // Create identity matrix
    float32_t I_data[16] = {0};
 8002dcc:	f507 7313 	add.w	r3, r7, #588	@ 0x24c
 8002dd0:	2240      	movs	r2, #64	@ 0x40
 8002dd2:	2100      	movs	r1, #0
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f00c fb79 	bl	800f4cc <memset>
    arm_matrix_instance_f32 I_matrix;
    arm_mat_init_f32(&I_matrix, 4, 4, I_data);
 8002dda:	f507 7313 	add.w	r3, r7, #588	@ 0x24c
 8002dde:	f507 7011 	add.w	r0, r7, #580	@ 0x244
 8002de2:	2204      	movs	r2, #4
 8002de4:	2104      	movs	r1, #4
 8002de6:	f00c f9f2 	bl	800f1ce <arm_mat_init_f32>
    for (int i = 0; i < 4; i++) {
 8002dea:	2300      	movs	r3, #0
 8002dec:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
 8002df0:	e011      	b.n	8002e16 <discretize_system_with_arm+0xde>
        I_data[i*4 + i] = 1.0f;
 8002df2:	f8d7 22b4 	ldr.w	r2, [r7, #692]	@ 0x2b4
 8002df6:	4613      	mov	r3, r2
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	4413      	add	r3, r2
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	f503 732e 	add.w	r3, r3, #696	@ 0x2b8
 8002e02:	443b      	add	r3, r7
 8002e04:	3b6c      	subs	r3, #108	@ 0x6c
 8002e06:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002e0a:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 4; i++) {
 8002e0c:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 8002e10:	3301      	adds	r3, #1
 8002e12:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
 8002e16:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 8002e1a:	2b03      	cmp	r3, #3
 8002e1c:	dde9      	ble.n	8002df2 <discretize_system_with_arm+0xba>
    }

    // Create scaled A matrix (A*dt)
    float32_t A_dt_data[16];
    arm_matrix_instance_f32 A_dt_matrix;
    arm_mat_init_f32(&A_dt_matrix, 4, 4, A_dt_data);
 8002e1e:	f507 7301 	add.w	r3, r7, #516	@ 0x204
 8002e22:	f507 70fe 	add.w	r0, r7, #508	@ 0x1fc
 8002e26:	2204      	movs	r2, #4
 8002e28:	2104      	movs	r1, #4
 8002e2a:	f00c f9d0 	bl	800f1ce <arm_mat_init_f32>
    arm_mat_scale_f32(&A_c_matrix, dt, &A_dt_matrix);
 8002e2e:	f507 71fe 	add.w	r1, r7, #508	@ 0x1fc
 8002e32:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002e36:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8002e3a:	f507 7229 	add.w	r2, r7, #676	@ 0x2a4
 8002e3e:	ed93 0a00 	vldr	s0, [r3]
 8002e42:	4610      	mov	r0, r2
 8002e44:	f00c fa55 	bl	800f2f2 <arm_mat_scale_f32>

    // Calculate A_d = exp(A*dt) using Taylor series approximation
    // Initialize A_d to identity matrix
    matrix_copy(I_data, A_d, 16);
 8002e48:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002e4c:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 8002e50:	f507 7013 	add.w	r0, r7, #588	@ 0x24c
 8002e54:	2210      	movs	r2, #16
 8002e56:	6819      	ldr	r1, [r3, #0]
 8002e58:	f7ff ff4c 	bl	8002cf4 <matrix_copy>

    // Calculate powers of A*dt and add them to A_d
    float32_t A_power_data[16];
    float32_t temp_data[16];
    arm_matrix_instance_f32 A_power_matrix, temp_matrix;
    arm_mat_init_f32(&A_power_matrix, 4, 4, A_power_data);
 8002e5c:	f507 73de 	add.w	r3, r7, #444	@ 0x1bc
 8002e60:	f507 70ba 	add.w	r0, r7, #372	@ 0x174
 8002e64:	2204      	movs	r2, #4
 8002e66:	2104      	movs	r1, #4
 8002e68:	f00c f9b1 	bl	800f1ce <arm_mat_init_f32>
    arm_mat_init_f32(&temp_matrix, 4, 4, temp_data);
 8002e6c:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 8002e70:	f507 70b6 	add.w	r0, r7, #364	@ 0x16c
 8002e74:	2204      	movs	r2, #4
 8002e76:	2104      	movs	r1, #4
 8002e78:	f00c f9a9 	bl	800f1ce <arm_mat_init_f32>

    // First term: I + A*dt
    arm_mat_add_f32(&I_matrix, &A_dt_matrix, &A_d_matrix);
 8002e7c:	f507 7227 	add.w	r2, r7, #668	@ 0x29c
 8002e80:	f507 71fe 	add.w	r1, r7, #508	@ 0x1fc
 8002e84:	f507 7311 	add.w	r3, r7, #580	@ 0x244
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f00c f965 	bl	800f158 <arm_mat_add_f32>

    // Copy A*dt to A_power for computing higher powers
    matrix_copy(A_dt_data, A_power_data, 16);
 8002e8e:	f507 71de 	add.w	r1, r7, #444	@ 0x1bc
 8002e92:	f507 7301 	add.w	r3, r7, #516	@ 0x204
 8002e96:	2210      	movs	r2, #16
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f7ff ff2b 	bl	8002cf4 <matrix_copy>

    // Compute higher order terms using Taylor series
    // A_d = I + A*dt + (A*dt)^2/2 + (A*dt)^3/6 + ...
    float32_t factorial = 1.0f;
 8002e9e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002ea2:	f8c7 32b0 	str.w	r3, [r7, #688]	@ 0x2b0
    for (int term = 2; term <= 10; term++) {  // Using more terms for better accuracy
 8002ea6:	2302      	movs	r3, #2
 8002ea8:	f8c7 32ac 	str.w	r3, [r7, #684]	@ 0x2ac
 8002eac:	e03a      	b.n	8002f24 <discretize_system_with_arm+0x1ec>
        factorial *= term;
 8002eae:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 8002eb2:	ee07 3a90 	vmov	s15, r3
 8002eb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002eba:	ed97 7aac 	vldr	s14, [r7, #688]	@ 0x2b0
 8002ebe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ec2:	edc7 7aac 	vstr	s15, [r7, #688]	@ 0x2b0

        // Compute next power: A_power = A_power * A_dt
        arm_mat_mult_f32(&A_power_matrix, &A_dt_matrix, &temp_matrix);
 8002ec6:	f507 72b6 	add.w	r2, r7, #364	@ 0x16c
 8002eca:	f507 71fe 	add.w	r1, r7, #508	@ 0x1fc
 8002ece:	f507 73ba 	add.w	r3, r7, #372	@ 0x174
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f00c f993 	bl	800f1fe <arm_mat_mult_f32>
        matrix_copy(temp_data, A_power_data, 16);
 8002ed8:	f507 71de 	add.w	r1, r7, #444	@ 0x1bc
 8002edc:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 8002ee0:	2210      	movs	r2, #16
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f7ff ff06 	bl	8002cf4 <matrix_copy>

        // Scale by 1/factorial
        arm_mat_scale_f32(&A_power_matrix, 1.0f/factorial, &temp_matrix);
 8002ee8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002eec:	edd7 7aac 	vldr	s15, [r7, #688]	@ 0x2b0
 8002ef0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ef4:	f507 72b6 	add.w	r2, r7, #364	@ 0x16c
 8002ef8:	f507 73ba 	add.w	r3, r7, #372	@ 0x174
 8002efc:	4611      	mov	r1, r2
 8002efe:	eeb0 0a47 	vmov.f32	s0, s14
 8002f02:	4618      	mov	r0, r3
 8002f04:	f00c f9f5 	bl	800f2f2 <arm_mat_scale_f32>

        // Add to A_d
        arm_mat_add_f32(&A_d_matrix, &temp_matrix, &A_d_matrix);
 8002f08:	f507 7227 	add.w	r2, r7, #668	@ 0x29c
 8002f0c:	f507 71b6 	add.w	r1, r7, #364	@ 0x16c
 8002f10:	f507 7327 	add.w	r3, r7, #668	@ 0x29c
 8002f14:	4618      	mov	r0, r3
 8002f16:	f00c f91f 	bl	800f158 <arm_mat_add_f32>
    for (int term = 2; term <= 10; term++) {  // Using more terms for better accuracy
 8002f1a:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 8002f1e:	3301      	adds	r3, #1
 8002f20:	f8c7 32ac 	str.w	r3, [r7, #684]	@ 0x2ac
 8002f24:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 8002f28:	2b0a      	cmp	r3, #10
 8002f2a:	ddc0      	ble.n	8002eae <discretize_system_with_arm+0x176>

    // We can approximate this integral using the Taylor series for e^(A*s):
    // B_d = [dt*I + (A*dt^2)/2 + (A^2*dt^3)/6 + (A^3*dt^4)/24 + ...] * B_c

    // First term: dt*I * B_c = dt * B_c
    arm_mat_scale_f32(&B_c_matrix, dt, &B_d_matrix);
 8002f2c:	f507 7123 	add.w	r1, r7, #652	@ 0x28c
 8002f30:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002f34:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8002f38:	f507 7225 	add.w	r2, r7, #660	@ 0x294
 8002f3c:	ed93 0a00 	vldr	s0, [r3]
 8002f40:	4610      	mov	r0, r2
 8002f42:	f00c f9d6 	bl	800f2f2 <arm_mat_scale_f32>

    // Second term: (A*dt^2)/2 * B_c
    float32_t AB_c[4] = {0};
 8002f46:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002f4a:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8002f4e:	461a      	mov	r2, r3
 8002f50:	2300      	movs	r3, #0
 8002f52:	6013      	str	r3, [r2, #0]
 8002f54:	6053      	str	r3, [r2, #4]
 8002f56:	6093      	str	r3, [r2, #8]
 8002f58:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 AB_c_matrix;
    arm_mat_init_f32(&AB_c_matrix, 4, 1, AB_c);
 8002f5a:	f507 73ae 	add.w	r3, r7, #348	@ 0x15c
 8002f5e:	f507 70aa 	add.w	r0, r7, #340	@ 0x154
 8002f62:	2201      	movs	r2, #1
 8002f64:	2104      	movs	r1, #4
 8002f66:	f00c f932 	bl	800f1ce <arm_mat_init_f32>
    arm_mat_mult_f32(&A_c_matrix, &B_c_matrix, &AB_c_matrix);
 8002f6a:	f507 72aa 	add.w	r2, r7, #340	@ 0x154
 8002f6e:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 8002f72:	f507 7329 	add.w	r3, r7, #676	@ 0x2a4
 8002f76:	4618      	mov	r0, r3
 8002f78:	f00c f941 	bl	800f1fe <arm_mat_mult_f32>

    float32_t temp_B[4];
    arm_matrix_instance_f32 temp_B_matrix;
    arm_mat_init_f32(&temp_B_matrix, 4, 1, temp_B);
 8002f7c:	f507 73a2 	add.w	r3, r7, #324	@ 0x144
 8002f80:	f507 709e 	add.w	r0, r7, #316	@ 0x13c
 8002f84:	2201      	movs	r2, #1
 8002f86:	2104      	movs	r1, #4
 8002f88:	f00c f921 	bl	800f1ce <arm_mat_init_f32>
    arm_mat_scale_f32(&AB_c_matrix, dt*dt/2.0f, &temp_B_matrix);
 8002f8c:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002f90:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8002f94:	edd3 7a00 	vldr	s15, [r3]
 8002f98:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002f9c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002fa0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002fa4:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 8002fa8:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 8002fac:	4611      	mov	r1, r2
 8002fae:	eeb0 0a47 	vmov.f32	s0, s14
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f00c f99d 	bl	800f2f2 <arm_mat_scale_f32>

    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 8002fb8:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 8002fbc:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 8002fc0:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f00c f8c7 	bl	800f158 <arm_mat_add_f32>

    // Third term: (A^2*dt^3)/6 * B_c
    float32_t A2_data[16] = {0};
 8002fca:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002fce:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	2340      	movs	r3, #64	@ 0x40
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	2100      	movs	r1, #0
 8002fda:	f00c fa77 	bl	800f4cc <memset>
    arm_matrix_instance_f32 A2_matrix;
    arm_mat_init_f32(&A2_matrix, 4, 4, A2_data);
 8002fde:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8002fe2:	f107 00f4 	add.w	r0, r7, #244	@ 0xf4
 8002fe6:	2204      	movs	r2, #4
 8002fe8:	2104      	movs	r1, #4
 8002fea:	f00c f8f0 	bl	800f1ce <arm_mat_init_f32>
    arm_mat_mult_f32(&A_c_matrix, &A_c_matrix, &A2_matrix);
 8002fee:	f107 02f4 	add.w	r2, r7, #244	@ 0xf4
 8002ff2:	f507 7129 	add.w	r1, r7, #676	@ 0x2a4
 8002ff6:	f507 7329 	add.w	r3, r7, #676	@ 0x2a4
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f00c f8ff 	bl	800f1fe <arm_mat_mult_f32>

    float32_t A2B_c[4] = {0};
 8003000:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003004:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003008:	461a      	mov	r2, r3
 800300a:	2300      	movs	r3, #0
 800300c:	6013      	str	r3, [r2, #0]
 800300e:	6053      	str	r3, [r2, #4]
 8003010:	6093      	str	r3, [r2, #8]
 8003012:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 A2B_c_matrix;
    arm_mat_init_f32(&A2B_c_matrix, 4, 1, A2B_c);
 8003014:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8003018:	f107 00dc 	add.w	r0, r7, #220	@ 0xdc
 800301c:	2201      	movs	r2, #1
 800301e:	2104      	movs	r1, #4
 8003020:	f00c f8d5 	bl	800f1ce <arm_mat_init_f32>
    arm_mat_mult_f32(&A2_matrix, &B_c_matrix, &A2B_c_matrix);
 8003024:	f107 02dc 	add.w	r2, r7, #220	@ 0xdc
 8003028:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 800302c:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8003030:	4618      	mov	r0, r3
 8003032:	f00c f8e4 	bl	800f1fe <arm_mat_mult_f32>

    arm_mat_scale_f32(&A2B_c_matrix, dt*dt*dt/6.0f, &temp_B_matrix);
 8003036:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800303a:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800303e:	edd3 7a00 	vldr	s15, [r3]
 8003042:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8003046:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800304a:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800304e:	edd3 7a00 	vldr	s15, [r3]
 8003052:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003056:	eef1 6a08 	vmov.f32	s13, #24	@ 0x40c00000  6.0
 800305a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800305e:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 8003062:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8003066:	4611      	mov	r1, r2
 8003068:	eeb0 0a47 	vmov.f32	s0, s14
 800306c:	4618      	mov	r0, r3
 800306e:	f00c f940 	bl	800f2f2 <arm_mat_scale_f32>
    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 8003072:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 8003076:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 800307a:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 800307e:	4618      	mov	r0, r3
 8003080:	f00c f86a 	bl	800f158 <arm_mat_add_f32>

    // Fourth term: (A^3*dt^4)/24 * B_c
    float32_t A3_data[16] = {0};
 8003084:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003088:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 800308c:	4618      	mov	r0, r3
 800308e:	2340      	movs	r3, #64	@ 0x40
 8003090:	461a      	mov	r2, r3
 8003092:	2100      	movs	r1, #0
 8003094:	f00c fa1a 	bl	800f4cc <memset>
    arm_matrix_instance_f32 A3_matrix;
    arm_mat_init_f32(&A3_matrix, 4, 4, A3_data);
 8003098:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800309c:	f107 0094 	add.w	r0, r7, #148	@ 0x94
 80030a0:	2204      	movs	r2, #4
 80030a2:	2104      	movs	r1, #4
 80030a4:	f00c f893 	bl	800f1ce <arm_mat_init_f32>
    arm_mat_mult_f32(&A2_matrix, &A_c_matrix, &A3_matrix);
 80030a8:	f107 0294 	add.w	r2, r7, #148	@ 0x94
 80030ac:	f507 7129 	add.w	r1, r7, #676	@ 0x2a4
 80030b0:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80030b4:	4618      	mov	r0, r3
 80030b6:	f00c f8a2 	bl	800f1fe <arm_mat_mult_f32>

    float32_t A3B_c[4] = {0};
 80030ba:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80030be:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 80030c2:	461a      	mov	r2, r3
 80030c4:	2300      	movs	r3, #0
 80030c6:	6013      	str	r3, [r2, #0]
 80030c8:	6053      	str	r3, [r2, #4]
 80030ca:	6093      	str	r3, [r2, #8]
 80030cc:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 A3B_c_matrix;
    arm_mat_init_f32(&A3B_c_matrix, 4, 1, A3B_c);
 80030ce:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80030d2:	f107 007c 	add.w	r0, r7, #124	@ 0x7c
 80030d6:	2201      	movs	r2, #1
 80030d8:	2104      	movs	r1, #4
 80030da:	f00c f878 	bl	800f1ce <arm_mat_init_f32>
    arm_mat_mult_f32(&A3_matrix, &B_c_matrix, &A3B_c_matrix);
 80030de:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 80030e2:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 80030e6:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80030ea:	4618      	mov	r0, r3
 80030ec:	f00c f887 	bl	800f1fe <arm_mat_mult_f32>

    arm_mat_scale_f32(&A3B_c_matrix, dt*dt*dt*dt/24.0f, &temp_B_matrix);
 80030f0:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80030f4:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80030f8:	edd3 7a00 	vldr	s15, [r3]
 80030fc:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8003100:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003104:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003108:	edd3 7a00 	vldr	s15, [r3]
 800310c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003110:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003114:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003118:	edd3 7a00 	vldr	s15, [r3]
 800311c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003120:	eef3 6a08 	vmov.f32	s13, #56	@ 0x41c00000  24.0
 8003124:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003128:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 800312c:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8003130:	4611      	mov	r1, r2
 8003132:	eeb0 0a47 	vmov.f32	s0, s14
 8003136:	4618      	mov	r0, r3
 8003138:	f00c f8db 	bl	800f2f2 <arm_mat_scale_f32>
    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 800313c:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 8003140:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 8003144:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 8003148:	4618      	mov	r0, r3
 800314a:	f00c f805 	bl	800f158 <arm_mat_add_f32>

    // Fifth term: (A^4*dt^5)/120 * B_c
    float32_t A4_data[16] = {0};
 800314e:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003152:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8003156:	4618      	mov	r0, r3
 8003158:	2340      	movs	r3, #64	@ 0x40
 800315a:	461a      	mov	r2, r3
 800315c:	2100      	movs	r1, #0
 800315e:	f00c f9b5 	bl	800f4cc <memset>
    arm_matrix_instance_f32 A4_matrix;
    arm_mat_init_f32(&A4_matrix, 4, 4, A4_data);
 8003162:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003166:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 800316a:	2204      	movs	r2, #4
 800316c:	2104      	movs	r1, #4
 800316e:	f00c f82e 	bl	800f1ce <arm_mat_init_f32>
    arm_mat_mult_f32(&A3_matrix, &A_c_matrix, &A4_matrix);
 8003172:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8003176:	f507 7129 	add.w	r1, r7, #676	@ 0x2a4
 800317a:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800317e:	4618      	mov	r0, r3
 8003180:	f00c f83d 	bl	800f1fe <arm_mat_mult_f32>

    float32_t A4B_c[4] = {0};
 8003184:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003188:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 800318c:	461a      	mov	r2, r3
 800318e:	2300      	movs	r3, #0
 8003190:	6013      	str	r3, [r2, #0]
 8003192:	6053      	str	r3, [r2, #4]
 8003194:	6093      	str	r3, [r2, #8]
 8003196:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 A4B_c_matrix;
    arm_mat_init_f32(&A4B_c_matrix, 4, 1, A4B_c);
 8003198:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800319c:	f107 001c 	add.w	r0, r7, #28
 80031a0:	2201      	movs	r2, #1
 80031a2:	2104      	movs	r1, #4
 80031a4:	f00c f813 	bl	800f1ce <arm_mat_init_f32>
    arm_mat_mult_f32(&A4_matrix, &B_c_matrix, &A4B_c_matrix);
 80031a8:	f107 021c 	add.w	r2, r7, #28
 80031ac:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 80031b0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80031b4:	4618      	mov	r0, r3
 80031b6:	f00c f822 	bl	800f1fe <arm_mat_mult_f32>

    arm_mat_scale_f32(&A4B_c_matrix, dt*dt*dt*dt*dt/120.0f, &temp_B_matrix);
 80031ba:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80031be:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80031c2:	edd3 7a00 	vldr	s15, [r3]
 80031c6:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80031ca:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80031ce:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80031d2:	edd3 7a00 	vldr	s15, [r3]
 80031d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80031da:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80031de:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80031e2:	edd3 7a00 	vldr	s15, [r3]
 80031e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80031ea:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80031ee:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80031f2:	edd3 7a00 	vldr	s15, [r3]
 80031f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031fa:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8003234 <discretize_system_with_arm+0x4fc>
 80031fe:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003202:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 8003206:	f107 031c 	add.w	r3, r7, #28
 800320a:	4611      	mov	r1, r2
 800320c:	eeb0 0a47 	vmov.f32	s0, s14
 8003210:	4618      	mov	r0, r3
 8003212:	f00c f86e 	bl	800f2f2 <arm_mat_scale_f32>
    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 8003216:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 800321a:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 800321e:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 8003222:	4618      	mov	r0, r3
 8003224:	f00b ff98 	bl	800f158 <arm_mat_add_f32>
}
 8003228:	bf00      	nop
 800322a:	f507 772f 	add.w	r7, r7, #700	@ 0x2bc
 800322e:	46bd      	mov	sp, r7
 8003230:	bd90      	pop	{r4, r7, pc}
 8003232:	bf00      	nop
 8003234:	42f00000 	.word	0x42f00000

08003238 <GenerateMotorMatrices>:

void GenerateMotorMatrices(float32_t R_a, float32_t L_a, float32_t J, float32_t b,
                          float32_t ke, float32_t kt, float32_t dt,
                          float32_t *A, float32_t *B) {
 8003238:	b580      	push	{r7, lr}
 800323a:	b09e      	sub	sp, #120	@ 0x78
 800323c:	af00      	add	r7, sp, #0
 800323e:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
 8003242:	edc7 0a08 	vstr	s1, [r7, #32]
 8003246:	ed87 1a07 	vstr	s2, [r7, #28]
 800324a:	edc7 1a06 	vstr	s3, [r7, #24]
 800324e:	ed87 2a05 	vstr	s4, [r7, #20]
 8003252:	edc7 2a04 	vstr	s5, [r7, #16]
 8003256:	ed87 3a03 	vstr	s6, [r7, #12]
 800325a:	60b8      	str	r0, [r7, #8]
 800325c:	6079      	str	r1, [r7, #4]
    // Generate continuous time matrices
    float32_t A_c[16] = {0}; // 4x4 matrix
 800325e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003262:	2240      	movs	r2, #64	@ 0x40
 8003264:	2100      	movs	r1, #0
 8003266:	4618      	mov	r0, r3
 8003268:	f00c f930 	bl	800f4cc <memset>
    float32_t B_c[4] = {0};  // 4x1 matrix
 800326c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003270:	2200      	movs	r2, #0
 8003272:	601a      	str	r2, [r3, #0]
 8003274:	605a      	str	r2, [r3, #4]
 8003276:	609a      	str	r2, [r3, #8]
 8003278:	60da      	str	r2, [r3, #12]
    // State Transition Matrix
    // Ac = [0 1 0 0;
    //       0 -b/J -1/J kt/J;
    //       0 0 0 0;
    //       0 -ke/L 0 -R/L];
    A_c[0*4 + 1] = 1.0f;
 800327a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800327e:	63fb      	str	r3, [r7, #60]	@ 0x3c

    A_c[1*4 + 1] = -b/J;
 8003280:	edd7 7a06 	vldr	s15, [r7, #24]
 8003284:	eef1 6a67 	vneg.f32	s13, s15
 8003288:	ed97 7a07 	vldr	s14, [r7, #28]
 800328c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003290:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    A_c[1*4 + 2] = -1.0f/J;
 8003294:	eeff 6a00 	vmov.f32	s13, #240	@ 0xbf800000 -1.0
 8003298:	ed97 7a07 	vldr	s14, [r7, #28]
 800329c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032a0:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    A_c[1*4 + 3] = kt/J;
 80032a4:	edd7 6a04 	vldr	s13, [r7, #16]
 80032a8:	ed97 7a07 	vldr	s14, [r7, #28]
 80032ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032b0:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54

    // Third row all zeros (for load torque state)

    A_c[3*4 + 1] = -ke/L_a;
 80032b4:	edd7 7a05 	vldr	s15, [r7, #20]
 80032b8:	eef1 6a67 	vneg.f32	s13, s15
 80032bc:	ed97 7a08 	vldr	s14, [r7, #32]
 80032c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032c4:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
    A_c[3*4 + 3] = -R_a/L_a;
 80032c8:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80032cc:	eef1 6a67 	vneg.f32	s13, s15
 80032d0:	ed97 7a08 	vldr	s14, [r7, #32]
 80032d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032d8:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74

    // Input Matrix
    // Bc = [0; 0; 0; 1/L];
    B_c[3] = 1.0f/L_a;
 80032dc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80032e0:	ed97 7a08 	vldr	s14, [r7, #32]
 80032e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032e8:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

    // Discretize the system using ARM CMSIS DSP
    discretize_system_with_arm(A_c, B_c, dt, A, B);
 80032ec:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80032f0:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	68ba      	ldr	r2, [r7, #8]
 80032f8:	ed97 0a03 	vldr	s0, [r7, #12]
 80032fc:	f7ff fd1c 	bl	8002d38 <discretize_system_with_arm>
}
 8003300:	bf00      	nop
 8003302:	3778      	adds	r7, #120	@ 0x78
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}

08003308 <PWM_init>:
 *      Author: beamk
 */

#include "PWM.h"

void PWM_init(PWM* pwm, TIM_HandleTypeDef* htimx, uint16_t tim_chx){
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	60b9      	str	r1, [r7, #8]
 8003312:	4613      	mov	r3, r2
 8003314:	80fb      	strh	r3, [r7, #6]
	pwm->CPU_FREQ = 170e6;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	4a0b      	ldr	r2, [pc, #44]	@ (8003348 <PWM_init+0x40>)
 800331a:	611a      	str	r2, [r3, #16]
	pwm->htimx = htimx;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	68ba      	ldr	r2, [r7, #8]
 8003320:	601a      	str	r2, [r3, #0]
	pwm->tim_chx = tim_chx;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	88fa      	ldrh	r2, [r7, #6]
 8003326:	809a      	strh	r2, [r3, #4]
	pwm->OC = 0;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2200      	movs	r2, #0
 800332c:	615a      	str	r2, [r3, #20]
	HAL_TIM_Base_Start(htimx);
 800332e:	68b8      	ldr	r0, [r7, #8]
 8003330:	f008 f868 	bl	800b404 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(htimx, tim_chx);
 8003334:	88fb      	ldrh	r3, [r7, #6]
 8003336:	4619      	mov	r1, r3
 8003338:	68b8      	ldr	r0, [r7, #8]
 800333a:	f008 f9af 	bl	800b69c <HAL_TIM_PWM_Start>
}
 800333e:	bf00      	nop
 8003340:	3710      	adds	r7, #16
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	0a21fe80 	.word	0x0a21fe80

0800334c <PWM_write_duty>:

void PWM_write_duty(PWM* pwm, float freq, float percent_duty){
 800334c:	b5b0      	push	{r4, r5, r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
 8003352:	60f8      	str	r0, [r7, #12]
 8003354:	ed87 0a02 	vstr	s0, [r7, #8]
 8003358:	edc7 0a01 	vstr	s1, [r7, #4]
    if (freq == 0) {
 800335c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003360:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003368:	d137      	bne.n	80033da <PWM_write_duty+0x8e>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	889b      	ldrh	r3, [r3, #4]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d105      	bne.n	800337e <PWM_write_duty+0x32>
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	2200      	movs	r2, #0
 800337a:	635a      	str	r2, [r3, #52]	@ 0x34
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(percent_duty) / 100.0);
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}
 800337c:	e0e1      	b.n	8003542 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	889b      	ldrh	r3, [r3, #4]
 8003382:	2b04      	cmp	r3, #4
 8003384:	d105      	bne.n	8003392 <PWM_write_duty+0x46>
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	2300      	movs	r3, #0
 800338e:	6393      	str	r3, [r2, #56]	@ 0x38
 8003390:	e0d7      	b.n	8003542 <PWM_write_duty+0x1f6>
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	889b      	ldrh	r3, [r3, #4]
 8003396:	2b08      	cmp	r3, #8
 8003398:	d105      	bne.n	80033a6 <PWM_write_duty+0x5a>
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	2300      	movs	r3, #0
 80033a2:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80033a4:	e0cd      	b.n	8003542 <PWM_write_duty+0x1f6>
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	889b      	ldrh	r3, [r3, #4]
 80033aa:	2b0c      	cmp	r3, #12
 80033ac:	d105      	bne.n	80033ba <PWM_write_duty+0x6e>
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	2300      	movs	r3, #0
 80033b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80033b8:	e0c3      	b.n	8003542 <PWM_write_duty+0x1f6>
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	889b      	ldrh	r3, [r3, #4]
 80033be:	2b10      	cmp	r3, #16
 80033c0:	d105      	bne.n	80033ce <PWM_write_duty+0x82>
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	2300      	movs	r3, #0
 80033ca:	6493      	str	r3, [r2, #72]	@ 0x48
 80033cc:	e0b9      	b.n	8003542 <PWM_write_duty+0x1f6>
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	2300      	movs	r3, #0
 80033d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80033d8:	e0b3      	b.n	8003542 <PWM_write_duty+0x1f6>
    	pwm->period_cyc = (uint32_t) (pwm->CPU_FREQ / freq);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	691b      	ldr	r3, [r3, #16]
 80033de:	ee07 3a90 	vmov	s15, r3
 80033e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033e6:	ed97 7a02 	vldr	s14, [r7, #8]
 80033ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80033ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033f2:	ee17 2a90 	vmov	r2, s15
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	609a      	str	r2, [r3, #8]
    	pwm->prescaler = (uint16_t) ((pwm->period_cyc + 65535 - 1) / 65535) - 1; // Subtracting 1 since prescaler is zero-based
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8003402:	33fe      	adds	r3, #254	@ 0xfe
 8003404:	4a51      	ldr	r2, [pc, #324]	@ (800354c <PWM_write_duty+0x200>)
 8003406:	fba2 2303 	umull	r2, r3, r2, r3
 800340a:	0bdb      	lsrs	r3, r3, #15
 800340c:	b29b      	uxth	r3, r3
 800340e:	3b01      	subs	r3, #1
 8003410:	b29a      	uxth	r2, r3
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	819a      	strh	r2, [r3, #12]
    	pwm->overflow = (uint16_t) ((pwm->CPU_FREQ / (float)(pwm->prescaler + 1) / freq) - 1);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	691b      	ldr	r3, [r3, #16]
 800341a:	ee07 3a90 	vmov	s15, r3
 800341e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	899b      	ldrh	r3, [r3, #12]
 8003426:	3301      	adds	r3, #1
 8003428:	ee07 3a90 	vmov	s15, r3
 800342c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003430:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003434:	ed97 7a02 	vldr	s14, [r7, #8]
 8003438:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800343c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003440:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003444:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003448:	ee17 3a90 	vmov	r3, s15
 800344c:	b29a      	uxth	r2, r3
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	81da      	strh	r2, [r3, #14]
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(percent_duty) / 100.0);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	89db      	ldrh	r3, [r3, #14]
 8003456:	4618      	mov	r0, r3
 8003458:	f7fd f830 	bl	80004bc <__aeabi_i2d>
 800345c:	4604      	mov	r4, r0
 800345e:	460d      	mov	r5, r1
 8003460:	edd7 7a01 	vldr	s15, [r7, #4]
 8003464:	eef0 7ae7 	vabs.f32	s15, s15
 8003468:	ee17 0a90 	vmov	r0, s15
 800346c:	f7fd f838 	bl	80004e0 <__aeabi_f2d>
 8003470:	4602      	mov	r2, r0
 8003472:	460b      	mov	r3, r1
 8003474:	4620      	mov	r0, r4
 8003476:	4629      	mov	r1, r5
 8003478:	f7fd f88a 	bl	8000590 <__aeabi_dmul>
 800347c:	4602      	mov	r2, r0
 800347e:	460b      	mov	r3, r1
 8003480:	4610      	mov	r0, r2
 8003482:	4619      	mov	r1, r3
 8003484:	f04f 0200 	mov.w	r2, #0
 8003488:	4b31      	ldr	r3, [pc, #196]	@ (8003550 <PWM_write_duty+0x204>)
 800348a:	f7fd f9ab 	bl	80007e4 <__aeabi_ddiv>
 800348e:	4602      	mov	r2, r0
 8003490:	460b      	mov	r3, r1
 8003492:	4610      	mov	r0, r2
 8003494:	4619      	mov	r1, r3
 8003496:	f7fd fb3d 	bl	8000b14 <__aeabi_d2uiz>
 800349a:	4603      	mov	r3, r0
 800349c:	b29b      	uxth	r3, r3
 800349e:	461a      	mov	r2, r3
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	615a      	str	r2, [r3, #20]
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	899a      	ldrh	r2, [r3, #12]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	629a      	str	r2, [r3, #40]	@ 0x28
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	89da      	ldrh	r2, [r3, #14]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	62da      	str	r2, [r3, #44]	@ 0x2c
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	89da      	ldrh	r2, [r3, #14]
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	60da      	str	r2, [r3, #12]
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	889b      	ldrh	r3, [r3, #4]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d106      	bne.n	80034dc <PWM_write_duty+0x190>
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	68fa      	ldr	r2, [r7, #12]
 80034d6:	6952      	ldr	r2, [r2, #20]
 80034d8:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80034da:	e032      	b.n	8003542 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	889b      	ldrh	r3, [r3, #4]
 80034e0:	2b04      	cmp	r3, #4
 80034e2:	d106      	bne.n	80034f2 <PWM_write_duty+0x1a6>
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	695b      	ldr	r3, [r3, #20]
 80034ee:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80034f0:	e027      	b.n	8003542 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	889b      	ldrh	r3, [r3, #4]
 80034f6:	2b08      	cmp	r3, #8
 80034f8:	d106      	bne.n	8003508 <PWM_write_duty+0x1bc>
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	695b      	ldr	r3, [r3, #20]
 8003504:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8003506:	e01c      	b.n	8003542 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	889b      	ldrh	r3, [r3, #4]
 800350c:	2b0c      	cmp	r3, #12
 800350e:	d106      	bne.n	800351e <PWM_write_duty+0x1d2>
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	695b      	ldr	r3, [r3, #20]
 800351a:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800351c:	e011      	b.n	8003542 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	889b      	ldrh	r3, [r3, #4]
 8003522:	2b10      	cmp	r3, #16
 8003524:	d106      	bne.n	8003534 <PWM_write_duty+0x1e8>
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	695b      	ldr	r3, [r3, #20]
 8003530:	6493      	str	r3, [r2, #72]	@ 0x48
}
 8003532:	e006      	b.n	8003542 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	695b      	ldr	r3, [r3, #20]
 800353e:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8003540:	e7ff      	b.n	8003542 <PWM_write_duty+0x1f6>
 8003542:	bf00      	nop
 8003544:	3710      	adds	r7, #16
 8003546:	46bd      	mov	sp, r7
 8003548:	bdb0      	pop	{r4, r5, r7, pc}
 800354a:	bf00      	nop
 800354c:	80008001 	.word	0x80008001
 8003550:	40590000 	.word	0x40590000
 8003554:	00000000 	.word	0x00000000

08003558 <PWM_write_range>:

void PWM_write_range(PWM* pwm, float freq, float duty){
 8003558:	b5b0      	push	{r4, r5, r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
 800355e:	60f8      	str	r0, [r7, #12]
 8003560:	ed87 0a02 	vstr	s0, [r7, #8]
 8003564:	edc7 0a01 	vstr	s1, [r7, #4]
    if (freq == 0) {
 8003568:	edd7 7a02 	vldr	s15, [r7, #8]
 800356c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003574:	d137      	bne.n	80035e6 <PWM_write_range+0x8e>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	889b      	ldrh	r3, [r3, #4]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d105      	bne.n	800358a <PWM_write_range+0x32>
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	2200      	movs	r2, #0
 8003586:	635a      	str	r2, [r3, #52]	@ 0x34
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(duty) / 65535.0);
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}
 8003588:	e0e1      	b.n	800374e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	889b      	ldrh	r3, [r3, #4]
 800358e:	2b04      	cmp	r3, #4
 8003590:	d105      	bne.n	800359e <PWM_write_range+0x46>
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	2300      	movs	r3, #0
 800359a:	6393      	str	r3, [r2, #56]	@ 0x38
 800359c:	e0d7      	b.n	800374e <PWM_write_range+0x1f6>
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	889b      	ldrh	r3, [r3, #4]
 80035a2:	2b08      	cmp	r3, #8
 80035a4:	d105      	bne.n	80035b2 <PWM_write_range+0x5a>
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	2300      	movs	r3, #0
 80035ae:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80035b0:	e0cd      	b.n	800374e <PWM_write_range+0x1f6>
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	889b      	ldrh	r3, [r3, #4]
 80035b6:	2b0c      	cmp	r3, #12
 80035b8:	d105      	bne.n	80035c6 <PWM_write_range+0x6e>
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	2300      	movs	r3, #0
 80035c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80035c4:	e0c3      	b.n	800374e <PWM_write_range+0x1f6>
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	889b      	ldrh	r3, [r3, #4]
 80035ca:	2b10      	cmp	r3, #16
 80035cc:	d105      	bne.n	80035da <PWM_write_range+0x82>
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	2300      	movs	r3, #0
 80035d6:	6493      	str	r3, [r2, #72]	@ 0x48
 80035d8:	e0b9      	b.n	800374e <PWM_write_range+0x1f6>
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	2300      	movs	r3, #0
 80035e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80035e4:	e0b3      	b.n	800374e <PWM_write_range+0x1f6>
    	pwm->period_cyc = (uint32_t) (pwm->CPU_FREQ / freq);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	691b      	ldr	r3, [r3, #16]
 80035ea:	ee07 3a90 	vmov	s15, r3
 80035ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035f2:	ed97 7a02 	vldr	s14, [r7, #8]
 80035f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80035fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80035fe:	ee17 2a90 	vmov	r2, s15
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	609a      	str	r2, [r3, #8]
    	pwm->prescaler = (uint16_t) ((pwm->period_cyc + 65535 - 1) / 65535) - 1; // Subtracting 1 since prescaler is zero-based
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 800360e:	33fe      	adds	r3, #254	@ 0xfe
 8003610:	4a53      	ldr	r2, [pc, #332]	@ (8003760 <PWM_write_range+0x208>)
 8003612:	fba2 2303 	umull	r2, r3, r2, r3
 8003616:	0bdb      	lsrs	r3, r3, #15
 8003618:	b29b      	uxth	r3, r3
 800361a:	3b01      	subs	r3, #1
 800361c:	b29a      	uxth	r2, r3
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	819a      	strh	r2, [r3, #12]
    	pwm->overflow = (uint16_t) ((pwm->CPU_FREQ / (float)(pwm->prescaler + 1) / freq) - 1);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	691b      	ldr	r3, [r3, #16]
 8003626:	ee07 3a90 	vmov	s15, r3
 800362a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	899b      	ldrh	r3, [r3, #12]
 8003632:	3301      	adds	r3, #1
 8003634:	ee07 3a90 	vmov	s15, r3
 8003638:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800363c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003640:	ed97 7a02 	vldr	s14, [r7, #8]
 8003644:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003648:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800364c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003650:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003654:	ee17 3a90 	vmov	r3, s15
 8003658:	b29a      	uxth	r2, r3
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	81da      	strh	r2, [r3, #14]
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(duty) / 65535.0);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	89db      	ldrh	r3, [r3, #14]
 8003662:	4618      	mov	r0, r3
 8003664:	f7fc ff2a 	bl	80004bc <__aeabi_i2d>
 8003668:	4604      	mov	r4, r0
 800366a:	460d      	mov	r5, r1
 800366c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003670:	eef0 7ae7 	vabs.f32	s15, s15
 8003674:	ee17 0a90 	vmov	r0, s15
 8003678:	f7fc ff32 	bl	80004e0 <__aeabi_f2d>
 800367c:	4602      	mov	r2, r0
 800367e:	460b      	mov	r3, r1
 8003680:	4620      	mov	r0, r4
 8003682:	4629      	mov	r1, r5
 8003684:	f7fc ff84 	bl	8000590 <__aeabi_dmul>
 8003688:	4602      	mov	r2, r0
 800368a:	460b      	mov	r3, r1
 800368c:	4610      	mov	r0, r2
 800368e:	4619      	mov	r1, r3
 8003690:	a331      	add	r3, pc, #196	@ (adr r3, 8003758 <PWM_write_range+0x200>)
 8003692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003696:	f7fd f8a5 	bl	80007e4 <__aeabi_ddiv>
 800369a:	4602      	mov	r2, r0
 800369c:	460b      	mov	r3, r1
 800369e:	4610      	mov	r0, r2
 80036a0:	4619      	mov	r1, r3
 80036a2:	f7fd fa37 	bl	8000b14 <__aeabi_d2uiz>
 80036a6:	4603      	mov	r3, r0
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	461a      	mov	r2, r3
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	615a      	str	r2, [r3, #20]
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	899a      	ldrh	r2, [r3, #12]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	629a      	str	r2, [r3, #40]	@ 0x28
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	89da      	ldrh	r2, [r3, #14]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	89da      	ldrh	r2, [r3, #14]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	60da      	str	r2, [r3, #12]
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	889b      	ldrh	r3, [r3, #4]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d106      	bne.n	80036e8 <PWM_write_range+0x190>
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	68fa      	ldr	r2, [r7, #12]
 80036e2:	6952      	ldr	r2, [r2, #20]
 80036e4:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80036e6:	e032      	b.n	800374e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	889b      	ldrh	r3, [r3, #4]
 80036ec:	2b04      	cmp	r3, #4
 80036ee:	d106      	bne.n	80036fe <PWM_write_range+0x1a6>
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	695b      	ldr	r3, [r3, #20]
 80036fa:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80036fc:	e027      	b.n	800374e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	889b      	ldrh	r3, [r3, #4]
 8003702:	2b08      	cmp	r3, #8
 8003704:	d106      	bne.n	8003714 <PWM_write_range+0x1bc>
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	695b      	ldr	r3, [r3, #20]
 8003710:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8003712:	e01c      	b.n	800374e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	889b      	ldrh	r3, [r3, #4]
 8003718:	2b0c      	cmp	r3, #12
 800371a:	d106      	bne.n	800372a <PWM_write_range+0x1d2>
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	695b      	ldr	r3, [r3, #20]
 8003726:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8003728:	e011      	b.n	800374e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	889b      	ldrh	r3, [r3, #4]
 800372e:	2b10      	cmp	r3, #16
 8003730:	d106      	bne.n	8003740 <PWM_write_range+0x1e8>
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	695b      	ldr	r3, [r3, #20]
 800373c:	6493      	str	r3, [r2, #72]	@ 0x48
}
 800373e:	e006      	b.n	800374e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	695b      	ldr	r3, [r3, #20]
 800374a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800374c:	e7ff      	b.n	800374e <PWM_write_range+0x1f6>
 800374e:	bf00      	nop
 8003750:	3710      	adds	r7, #16
 8003752:	46bd      	mov	sp, r7
 8003754:	bdb0      	pop	{r4, r5, r7, pc}
 8003756:	bf00      	nop
 8003758:	00000000 	.word	0x00000000
 800375c:	40efffe0 	.word	0x40efffe0
 8003760:	80008001 	.word	0x80008001

08003764 <QEI_init>:
* Author: pboon
*/

#include "QEI.h"

void QEI_init(QEI *qei, TIM_HandleTypeDef *htimx, int32_t ppr, uint32_t freq, float ratio, float pulley_diameter) {
 8003764:	b580      	push	{r7, lr}
 8003766:	b086      	sub	sp, #24
 8003768:	af00      	add	r7, sp, #0
 800376a:	6178      	str	r0, [r7, #20]
 800376c:	6139      	str	r1, [r7, #16]
 800376e:	60fa      	str	r2, [r7, #12]
 8003770:	60bb      	str	r3, [r7, #8]
 8003772:	ed87 0a01 	vstr	s0, [r7, #4]
 8003776:	edc7 0a00 	vstr	s1, [r7]
    qei->htimx = htimx;
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	693a      	ldr	r2, [r7, #16]
 800377e:	619a      	str	r2, [r3, #24]
    qei->ppr = ppr;
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	68fa      	ldr	r2, [r7, #12]
 8003784:	621a      	str	r2, [r3, #32]
    qei->freq = freq;
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	68ba      	ldr	r2, [r7, #8]
 800378a:	629a      	str	r2, [r3, #40]	@ 0x28
    qei->gear_ratio = ratio;
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	655a      	str	r2, [r3, #84]	@ 0x54
    qei->pulley_diameter = pulley_diameter;
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	683a      	ldr	r2, [r7, #0]
 8003796:	659a      	str	r2, [r3, #88]	@ 0x58

    qei->c[NOW] = 0;
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	2200      	movs	r2, #0
 800379c:	601a      	str	r2, [r3, #0]
    qei->c[PREV] = 0;
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	2200      	movs	r2, #0
 80037a2:	605a      	str	r2, [r3, #4]
    qei->r[NOW] = 0;
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	f04f 0200 	mov.w	r2, #0
 80037aa:	609a      	str	r2, [r3, #8]
    qei->r[PREV] = 0;
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	f04f 0200 	mov.w	r2, #0
 80037b2:	60da      	str	r2, [r3, #12]
    qei->m[NOW] = 0;
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	f04f 0200 	mov.w	r2, #0
 80037ba:	611a      	str	r2, [r3, #16]
    qei->m[PREV] = 0;
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	f04f 0200 	mov.w	r2, #0
 80037c2:	615a      	str	r2, [r3, #20]

    qei->enc_period = 65536 - (65536 % ppr);
 80037c4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80037c8:	68fa      	ldr	r2, [r7, #12]
 80037ca:	fb93 f2f2 	sdiv	r2, r3, r2
 80037ce:	68f9      	ldr	r1, [r7, #12]
 80037d0:	fb01 f202 	mul.w	r2, r1, r2
 80037d4:	1a9b      	subs	r3, r3, r2
 80037d6:	f5c3 3280 	rsb	r2, r3, #65536	@ 0x10000
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	61da      	str	r2, [r3, #28]

    qei->diff_counts = 0;
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	2200      	movs	r2, #0
 80037e2:	625a      	str	r2, [r3, #36]	@ 0x24
    qei->pulses = 0;
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	2200      	movs	r2, #0
 80037e8:	639a      	str	r2, [r3, #56]	@ 0x38
    qei->rads = 0;
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	f04f 0200 	mov.w	r2, #0
 80037f0:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->mm = 0;
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	f04f 0200 	mov.w	r2, #0
 80037f8:	649a      	str	r2, [r3, #72]	@ 0x48
    qei->revs = 0;
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	f04f 0200 	mov.w	r2, #0
 8003800:	63da      	str	r2, [r3, #60]	@ 0x3c

    qei->pps = 0;
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	f04f 0200 	mov.w	r2, #0
 8003808:	62da      	str	r2, [r3, #44]	@ 0x2c
    qei->radps = 0;
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	f04f 0200 	mov.w	r2, #0
 8003810:	635a      	str	r2, [r3, #52]	@ 0x34
    qei->mmps = 0;
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	f04f 0200 	mov.w	r2, #0
 8003818:	64da      	str	r2, [r3, #76]	@ 0x4c
    qei->rpm = 0;
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	f04f 0200 	mov.w	r2, #0
 8003820:	631a      	str	r2, [r3, #48]	@ 0x30

    qei->radpss = 0;
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	f04f 0200 	mov.w	r2, #0
 8003828:	645a      	str	r2, [r3, #68]	@ 0x44
    qei->mmpss = 0;
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	f04f 0200 	mov.w	r2, #0
 8003830:	651a      	str	r2, [r3, #80]	@ 0x50

    HAL_TIM_Encoder_Start(htimx, TIM_CHANNEL_ALL);
 8003832:	213c      	movs	r1, #60	@ 0x3c
 8003834:	6938      	ldr	r0, [r7, #16]
 8003836:	f008 f9ed 	bl	800bc14 <HAL_TIM_Encoder_Start>
}
 800383a:	bf00      	nop
 800383c:	3718      	adds	r7, #24
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
 8003842:	0000      	movs	r0, r0
 8003844:	0000      	movs	r0, r0
	...

08003848 <QEI_get_diff_count>:

void QEI_get_diff_count(QEI *qei) {
 8003848:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800384c:	b084      	sub	sp, #16
 800384e:	af00      	add	r7, sp, #0
 8003850:	6078      	str	r0, [r7, #4]
    // Get current counter value
    qei->c[NOW] = __HAL_TIM_GET_COUNTER(qei->htimx);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	699b      	ldr	r3, [r3, #24]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	601a      	str	r2, [r3, #0]

    // Calculate difference with handling for timer overflow/underflow
    int32_t diff_counts = qei->c[NOW] - qei->c[PREV];
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	1ad3      	subs	r3, r2, r3
 8003868:	60fb      	str	r3, [r7, #12]

    // Handle counter overflow/underflow
    if (diff_counts > qei->enc_period / 2) {
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	69db      	ldr	r3, [r3, #28]
 800386e:	0fda      	lsrs	r2, r3, #31
 8003870:	4413      	add	r3, r2
 8003872:	105b      	asrs	r3, r3, #1
 8003874:	461a      	mov	r2, r3
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	4293      	cmp	r3, r2
 800387a:	dd05      	ble.n	8003888 <QEI_get_diff_count+0x40>
        diff_counts -= qei->enc_period;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	69db      	ldr	r3, [r3, #28]
 8003880:	68fa      	ldr	r2, [r7, #12]
 8003882:	1ad3      	subs	r3, r2, r3
 8003884:	60fb      	str	r3, [r7, #12]
 8003886:	e00e      	b.n	80038a6 <QEI_get_diff_count+0x5e>
    } else if (diff_counts < -(qei->enc_period / 2)) {
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	69db      	ldr	r3, [r3, #28]
 800388c:	0fda      	lsrs	r2, r3, #31
 800388e:	4413      	add	r3, r2
 8003890:	105b      	asrs	r3, r3, #1
 8003892:	425b      	negs	r3, r3
 8003894:	461a      	mov	r2, r3
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	4293      	cmp	r3, r2
 800389a:	da04      	bge.n	80038a6 <QEI_get_diff_count+0x5e>
        diff_counts += qei->enc_period;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	69db      	ldr	r3, [r3, #28]
 80038a0:	68fa      	ldr	r2, [r7, #12]
 80038a2:	4413      	add	r3, r2
 80038a4:	60fb      	str	r3, [r7, #12]
    }

    qei->diff_counts = diff_counts;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	68fa      	ldr	r2, [r7, #12]
 80038aa:	625a      	str	r2, [r3, #36]	@ 0x24

    // Update position counters
    qei->pulses += qei->diff_counts;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038b4:	441a      	add	r2, r3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	639a      	str	r2, [r3, #56]	@ 0x38
    qei->revs += (qei->diff_counts / (float)(qei->ppr)) * qei->gear_ratio;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038c4:	ee07 3a90 	vmov	s15, r3
 80038c8:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a1b      	ldr	r3, [r3, #32]
 80038d0:	ee07 3a90 	vmov	s15, r3
 80038d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80038d8:	eec6 6a27 	vdiv.f32	s13, s12, s15
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 80038e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80038e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
    qei->rads += (qei->diff_counts / (float)(qei->ppr)) * 2 * M_PI * qei->gear_ratio;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038f4:	4618      	mov	r0, r3
 80038f6:	f7fc fdf3 	bl	80004e0 <__aeabi_f2d>
 80038fa:	4604      	mov	r4, r0
 80038fc:	460d      	mov	r5, r1
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003902:	ee07 3a90 	vmov	s15, r3
 8003906:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a1b      	ldr	r3, [r3, #32]
 800390e:	ee07 3a90 	vmov	s15, r3
 8003912:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003916:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800391a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800391e:	ee17 0a90 	vmov	r0, s15
 8003922:	f7fc fddd 	bl	80004e0 <__aeabi_f2d>
 8003926:	a33c      	add	r3, pc, #240	@ (adr r3, 8003a18 <QEI_get_diff_count+0x1d0>)
 8003928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800392c:	f7fc fe30 	bl	8000590 <__aeabi_dmul>
 8003930:	4602      	mov	r2, r0
 8003932:	460b      	mov	r3, r1
 8003934:	4690      	mov	r8, r2
 8003936:	4699      	mov	r9, r3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800393c:	4618      	mov	r0, r3
 800393e:	f7fc fdcf 	bl	80004e0 <__aeabi_f2d>
 8003942:	4602      	mov	r2, r0
 8003944:	460b      	mov	r3, r1
 8003946:	4640      	mov	r0, r8
 8003948:	4649      	mov	r1, r9
 800394a:	f7fc fe21 	bl	8000590 <__aeabi_dmul>
 800394e:	4602      	mov	r2, r0
 8003950:	460b      	mov	r3, r1
 8003952:	4620      	mov	r0, r4
 8003954:	4629      	mov	r1, r5
 8003956:	f7fc fc65 	bl	8000224 <__adddf3>
 800395a:	4602      	mov	r2, r0
 800395c:	460b      	mov	r3, r1
 800395e:	4610      	mov	r0, r2
 8003960:	4619      	mov	r1, r3
 8003962:	f7fd f8f7 	bl	8000b54 <__aeabi_d2f>
 8003966:	4602      	mov	r2, r0
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->mm += (qei->diff_counts / (float)(qei->ppr)) * M_PI * qei->pulley_diameter * qei->gear_ratio;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003970:	4618      	mov	r0, r3
 8003972:	f7fc fdb5 	bl	80004e0 <__aeabi_f2d>
 8003976:	4604      	mov	r4, r0
 8003978:	460d      	mov	r5, r1
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800397e:	ee07 3a90 	vmov	s15, r3
 8003982:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6a1b      	ldr	r3, [r3, #32]
 800398a:	ee07 3a90 	vmov	s15, r3
 800398e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003992:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003996:	ee16 0a90 	vmov	r0, s13
 800399a:	f7fc fda1 	bl	80004e0 <__aeabi_f2d>
 800399e:	a31e      	add	r3, pc, #120	@ (adr r3, 8003a18 <QEI_get_diff_count+0x1d0>)
 80039a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039a4:	f7fc fdf4 	bl	8000590 <__aeabi_dmul>
 80039a8:	4602      	mov	r2, r0
 80039aa:	460b      	mov	r3, r1
 80039ac:	4690      	mov	r8, r2
 80039ae:	4699      	mov	r9, r3
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039b4:	4618      	mov	r0, r3
 80039b6:	f7fc fd93 	bl	80004e0 <__aeabi_f2d>
 80039ba:	4602      	mov	r2, r0
 80039bc:	460b      	mov	r3, r1
 80039be:	4640      	mov	r0, r8
 80039c0:	4649      	mov	r1, r9
 80039c2:	f7fc fde5 	bl	8000590 <__aeabi_dmul>
 80039c6:	4602      	mov	r2, r0
 80039c8:	460b      	mov	r3, r1
 80039ca:	4690      	mov	r8, r2
 80039cc:	4699      	mov	r9, r3
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039d2:	4618      	mov	r0, r3
 80039d4:	f7fc fd84 	bl	80004e0 <__aeabi_f2d>
 80039d8:	4602      	mov	r2, r0
 80039da:	460b      	mov	r3, r1
 80039dc:	4640      	mov	r0, r8
 80039de:	4649      	mov	r1, r9
 80039e0:	f7fc fdd6 	bl	8000590 <__aeabi_dmul>
 80039e4:	4602      	mov	r2, r0
 80039e6:	460b      	mov	r3, r1
 80039e8:	4620      	mov	r0, r4
 80039ea:	4629      	mov	r1, r5
 80039ec:	f7fc fc1a 	bl	8000224 <__adddf3>
 80039f0:	4602      	mov	r2, r0
 80039f2:	460b      	mov	r3, r1
 80039f4:	4610      	mov	r0, r2
 80039f6:	4619      	mov	r1, r3
 80039f8:	f7fd f8ac 	bl	8000b54 <__aeabi_d2f>
 80039fc:	4602      	mov	r2, r0
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	649a      	str	r2, [r3, #72]	@ 0x48

    // Store the current counter value for next calculation
    qei->c[PREV] = qei->c[NOW];
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	605a      	str	r2, [r3, #4]
}
 8003a0a:	bf00      	nop
 8003a0c:	3710      	adds	r7, #16
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003a14:	f3af 8000 	nop.w
 8003a18:	54442d18 	.word	0x54442d18
 8003a1c:	400921fb 	.word	0x400921fb

08003a20 <QEI_compute_data>:

void QEI_compute_data(QEI *qei) {
 8003a20:	b5b0      	push	{r4, r5, r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
    // Calculate velocity in pulses per second
    qei->pps = qei->diff_counts * ((int)(qei->freq));
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003a30:	fb02 f303 	mul.w	r3, r2, r3
 8003a34:	ee07 3a90 	vmov	s15, r3
 8003a38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

    // Calculate angular velocity in different units
    qei->rpm = qei->pps * 60.0 / (float)(qei->ppr) * qei->gear_ratio;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a46:	4618      	mov	r0, r3
 8003a48:	f7fc fd4a 	bl	80004e0 <__aeabi_f2d>
 8003a4c:	f04f 0200 	mov.w	r2, #0
 8003a50:	4b83      	ldr	r3, [pc, #524]	@ (8003c60 <QEI_compute_data+0x240>)
 8003a52:	f7fc fd9d 	bl	8000590 <__aeabi_dmul>
 8003a56:	4602      	mov	r2, r0
 8003a58:	460b      	mov	r3, r1
 8003a5a:	4614      	mov	r4, r2
 8003a5c:	461d      	mov	r5, r3
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a1b      	ldr	r3, [r3, #32]
 8003a62:	ee07 3a90 	vmov	s15, r3
 8003a66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a6a:	ee17 0a90 	vmov	r0, s15
 8003a6e:	f7fc fd37 	bl	80004e0 <__aeabi_f2d>
 8003a72:	4602      	mov	r2, r0
 8003a74:	460b      	mov	r3, r1
 8003a76:	4620      	mov	r0, r4
 8003a78:	4629      	mov	r1, r5
 8003a7a:	f7fc feb3 	bl	80007e4 <__aeabi_ddiv>
 8003a7e:	4602      	mov	r2, r0
 8003a80:	460b      	mov	r3, r1
 8003a82:	4614      	mov	r4, r2
 8003a84:	461d      	mov	r5, r3
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f7fc fd28 	bl	80004e0 <__aeabi_f2d>
 8003a90:	4602      	mov	r2, r0
 8003a92:	460b      	mov	r3, r1
 8003a94:	4620      	mov	r0, r4
 8003a96:	4629      	mov	r1, r5
 8003a98:	f7fc fd7a 	bl	8000590 <__aeabi_dmul>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	460b      	mov	r3, r1
 8003aa0:	4610      	mov	r0, r2
 8003aa2:	4619      	mov	r1, r3
 8003aa4:	f7fd f856 	bl	8000b54 <__aeabi_d2f>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	631a      	str	r2, [r3, #48]	@ 0x30
    qei->radps = qei->pps * 2 * M_PI / (float)(qei->ppr) * qei->gear_ratio;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8003ab4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003ab8:	ee17 0a90 	vmov	r0, s15
 8003abc:	f7fc fd10 	bl	80004e0 <__aeabi_f2d>
 8003ac0:	a365      	add	r3, pc, #404	@ (adr r3, 8003c58 <QEI_compute_data+0x238>)
 8003ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ac6:	f7fc fd63 	bl	8000590 <__aeabi_dmul>
 8003aca:	4602      	mov	r2, r0
 8003acc:	460b      	mov	r3, r1
 8003ace:	4614      	mov	r4, r2
 8003ad0:	461d      	mov	r5, r3
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6a1b      	ldr	r3, [r3, #32]
 8003ad6:	ee07 3a90 	vmov	s15, r3
 8003ada:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ade:	ee17 0a90 	vmov	r0, s15
 8003ae2:	f7fc fcfd 	bl	80004e0 <__aeabi_f2d>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	460b      	mov	r3, r1
 8003aea:	4620      	mov	r0, r4
 8003aec:	4629      	mov	r1, r5
 8003aee:	f7fc fe79 	bl	80007e4 <__aeabi_ddiv>
 8003af2:	4602      	mov	r2, r0
 8003af4:	460b      	mov	r3, r1
 8003af6:	4614      	mov	r4, r2
 8003af8:	461d      	mov	r5, r3
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003afe:	4618      	mov	r0, r3
 8003b00:	f7fc fcee 	bl	80004e0 <__aeabi_f2d>
 8003b04:	4602      	mov	r2, r0
 8003b06:	460b      	mov	r3, r1
 8003b08:	4620      	mov	r0, r4
 8003b0a:	4629      	mov	r1, r5
 8003b0c:	f7fc fd40 	bl	8000590 <__aeabi_dmul>
 8003b10:	4602      	mov	r2, r0
 8003b12:	460b      	mov	r3, r1
 8003b14:	4610      	mov	r0, r2
 8003b16:	4619      	mov	r1, r3
 8003b18:	f7fd f81c 	bl	8000b54 <__aeabi_d2f>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	635a      	str	r2, [r3, #52]	@ 0x34

    // Calculate linear velocity
    qei->mmps = qei->pps * M_PI * qei->pulley_diameter / (float)(qei->ppr) * qei->gear_ratio;  // Assuming 10mm per rev
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b26:	4618      	mov	r0, r3
 8003b28:	f7fc fcda 	bl	80004e0 <__aeabi_f2d>
 8003b2c:	a34a      	add	r3, pc, #296	@ (adr r3, 8003c58 <QEI_compute_data+0x238>)
 8003b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b32:	f7fc fd2d 	bl	8000590 <__aeabi_dmul>
 8003b36:	4602      	mov	r2, r0
 8003b38:	460b      	mov	r3, r1
 8003b3a:	4614      	mov	r4, r2
 8003b3c:	461d      	mov	r5, r3
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b42:	4618      	mov	r0, r3
 8003b44:	f7fc fccc 	bl	80004e0 <__aeabi_f2d>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	460b      	mov	r3, r1
 8003b4c:	4620      	mov	r0, r4
 8003b4e:	4629      	mov	r1, r5
 8003b50:	f7fc fd1e 	bl	8000590 <__aeabi_dmul>
 8003b54:	4602      	mov	r2, r0
 8003b56:	460b      	mov	r3, r1
 8003b58:	4614      	mov	r4, r2
 8003b5a:	461d      	mov	r5, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6a1b      	ldr	r3, [r3, #32]
 8003b60:	ee07 3a90 	vmov	s15, r3
 8003b64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b68:	ee17 0a90 	vmov	r0, s15
 8003b6c:	f7fc fcb8 	bl	80004e0 <__aeabi_f2d>
 8003b70:	4602      	mov	r2, r0
 8003b72:	460b      	mov	r3, r1
 8003b74:	4620      	mov	r0, r4
 8003b76:	4629      	mov	r1, r5
 8003b78:	f7fc fe34 	bl	80007e4 <__aeabi_ddiv>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	460b      	mov	r3, r1
 8003b80:	4614      	mov	r4, r2
 8003b82:	461d      	mov	r5, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f7fc fca9 	bl	80004e0 <__aeabi_f2d>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	460b      	mov	r3, r1
 8003b92:	4620      	mov	r0, r4
 8003b94:	4629      	mov	r1, r5
 8003b96:	f7fc fcfb 	bl	8000590 <__aeabi_dmul>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	460b      	mov	r3, r1
 8003b9e:	4610      	mov	r0, r2
 8003ba0:	4619      	mov	r1, r3
 8003ba2:	f7fc ffd7 	bl	8000b54 <__aeabi_d2f>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	64da      	str	r2, [r3, #76]	@ 0x4c

    // Store current angular velocity for acceleration calculation
    qei->r[NOW] = qei->radps;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	609a      	str	r2, [r3, #8]

    // Store current linear velocity for acceleration calculation
    qei->m[NOW] = qei->mmps;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	611a      	str	r2, [r3, #16]

    // Calculate acceleration
    float diff_angular_velocity = qei->r[NOW] - qei->r[PREV];
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	ed93 7a02 	vldr	s14, [r3, #8]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	edd3 7a03 	vldr	s15, [r3, #12]
 8003bc8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003bcc:	edc7 7a03 	vstr	s15, [r7, #12]
    qei->radpss = (diff_angular_velocity == 0) ? 0 : diff_angular_velocity * qei->freq;
 8003bd0:	edd7 7a03 	vldr	s15, [r7, #12]
 8003bd4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003bd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bdc:	d00a      	beq.n	8003bf4 <QEI_compute_data+0x1d4>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003be2:	ee07 3a90 	vmov	s15, r3
 8003be6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003bea:	edd7 7a03 	vldr	s15, [r7, #12]
 8003bee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bf2:	e001      	b.n	8003bf8 <QEI_compute_data+0x1d8>
 8003bf4:	eddf 7a1b 	vldr	s15, [pc, #108]	@ 8003c64 <QEI_compute_data+0x244>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44

    float diff_linear_velocity = qei->m[NOW] - qei->m[PREV];
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	ed93 7a04 	vldr	s14, [r3, #16]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	edd3 7a05 	vldr	s15, [r3, #20]
 8003c0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c0e:	edc7 7a02 	vstr	s15, [r7, #8]
    qei->mmpss = (diff_linear_velocity == 0) ? 0 : diff_linear_velocity * qei->freq;
 8003c12:	edd7 7a02 	vldr	s15, [r7, #8]
 8003c16:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003c1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c1e:	d00a      	beq.n	8003c36 <QEI_compute_data+0x216>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c24:	ee07 3a90 	vmov	s15, r3
 8003c28:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003c2c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003c30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c34:	e001      	b.n	8003c3a <QEI_compute_data+0x21a>
 8003c36:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8003c64 <QEI_compute_data+0x244>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50

    // Store current velocity for next acceleration calculation
    qei->r[PREV] = qei->r[NOW];
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	689a      	ldr	r2, [r3, #8]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	60da      	str	r2, [r3, #12]
    qei->m[PREV] = qei->m[NOW];
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	691a      	ldr	r2, [r3, #16]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	615a      	str	r2, [r3, #20]
}
 8003c50:	bf00      	nop
 8003c52:	3710      	adds	r7, #16
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bdb0      	pop	{r4, r5, r7, pc}
 8003c58:	54442d18 	.word	0x54442d18
 8003c5c:	400921fb 	.word	0x400921fb
 8003c60:	404e0000 	.word	0x404e0000
 8003c64:	00000000 	.word	0x00000000

08003c68 <Trapezoidal_Generator>:
 */

#include "Trapezoidal.h"

void Trapezoidal_Generator(volatile Trapezoidal_GenStruct *trapGen,
        float32_t initial_p, float32_t target_p, float32_t vmax, float32_t amax) {
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b08e      	sub	sp, #56	@ 0x38
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6178      	str	r0, [r7, #20]
 8003c70:	ed87 0a04 	vstr	s0, [r7, #16]
 8003c74:	edc7 0a03 	vstr	s1, [r7, #12]
 8003c78:	ed87 1a02 	vstr	s2, [r7, #8]
 8003c7c:	edc7 1a01 	vstr	s3, [r7, #4]
    // Set default values
    trapGen->dir = 0;
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	2200      	movs	r2, #0
 8003c84:	741a      	strb	r2, [r3, #16]
    trapGen->time_total = 0.0f;
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	f04f 0200 	mov.w	r2, #0
 8003c8c:	60da      	str	r2, [r3, #12]
    trapGen->t1 = 0.0f;
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	f04f 0200 	mov.w	r2, #0
 8003c94:	601a      	str	r2, [r3, #0]
    trapGen->t2 = 0.0f;
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	f04f 0200 	mov.w	r2, #0
 8003c9c:	605a      	str	r2, [r3, #4]
    trapGen->t3 = 0.0f;
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	f04f 0200 	mov.w	r2, #0
 8003ca4:	609a      	str	r2, [r3, #8]

    // Calculate the distance to travel
    float32_t distance = fabsf(target_p - initial_p);
 8003ca6:	ed97 7a03 	vldr	s14, [r7, #12]
 8003caa:	edd7 7a04 	vldr	s15, [r7, #16]
 8003cae:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003cb2:	eef0 7ae7 	vabs.f32	s15, s15
 8003cb6:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

    // Determine the direction of the motion
    if (target_p - initial_p < 0) {
 8003cba:	ed97 7a03 	vldr	s14, [r7, #12]
 8003cbe:	edd7 7a04 	vldr	s15, [r7, #16]
 8003cc2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003cc6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cce:	d503      	bpl.n	8003cd8 <Trapezoidal_Generator+0x70>
        trapGen->dir = -1;
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	22ff      	movs	r2, #255	@ 0xff
 8003cd4:	741a      	strb	r2, [r3, #16]
 8003cd6:	e002      	b.n	8003cde <Trapezoidal_Generator+0x76>
    } else {
        trapGen->dir = 1;
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	741a      	strb	r2, [r3, #16]
    }

    // If no movement required or zero acceleration
    if (distance == 0.0f || amax == 0.0f) {
 8003cde:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8003ce2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003ce6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cea:	d006      	beq.n	8003cfa <Trapezoidal_Generator+0x92>
 8003cec:	edd7 7a01 	vldr	s15, [r7, #4]
 8003cf0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003cf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cf8:	d104      	bne.n	8003d04 <Trapezoidal_Generator+0x9c>
        trapGen->time_total = 0.0f;
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	f04f 0200 	mov.w	r2, #0
 8003d00:	60da      	str	r2, [r3, #12]
        return;
 8003d02:	e06f      	b.n	8003de4 <Trapezoidal_Generator+0x17c>
    }

    // Time to reach maximum velocity (assuming we can)
    float32_t ta = vmax / amax;
 8003d04:	edd7 6a02 	vldr	s13, [r7, #8]
 8003d08:	ed97 7a01 	vldr	s14, [r7, #4]
 8003d0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d10:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

    // Distance traveled during acceleration and deceleration phases
    float32_t sa = 0.5f * amax * ta * ta;  // Distance in acceleration phase
 8003d14:	edd7 7a01 	vldr	s15, [r7, #4]
 8003d18:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003d1c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003d20:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8003d24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d28:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8003d2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d30:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    float32_t sd = sa;                     // Distance in deceleration phase (same as acceleration)
 8003d34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d36:	62bb      	str	r3, [r7, #40]	@ 0x28
    float32_t s_accdec = sa + sd;          // Total distance for acceleration + deceleration
 8003d38:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8003d3c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8003d40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d44:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    // Check if we have enough distance to reach maximum velocity
    if (distance >= s_accdec) {
 8003d48:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003d4c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003d50:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d58:	db27      	blt.n	8003daa <Trapezoidal_Generator+0x142>
        // Trapezoidal profile - we can reach maximum velocity
        float32_t sc = distance - s_accdec;  // Distance at constant velocity
 8003d5a:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003d5e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003d62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d66:	edc7 7a07 	vstr	s15, [r7, #28]
        float32_t tc = sc / vmax;            // Time at constant velocity
 8003d6a:	edd7 6a07 	vldr	s13, [r7, #28]
 8003d6e:	ed97 7a02 	vldr	s14, [r7, #8]
 8003d72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d76:	edc7 7a06 	vstr	s15, [r7, #24]

        trapGen->t1 = ta;                    // End of acceleration phase
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d7e:	601a      	str	r2, [r3, #0]
        trapGen->t2 = ta + tc;               // End of constant velocity phase
 8003d80:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8003d84:	edd7 7a06 	vldr	s15, [r7, #24]
 8003d88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	edc3 7a01 	vstr	s15, [r3, #4]
        trapGen->t3 = 2 * ta + tc;           // End of deceleration phase
 8003d92:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8003d96:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003d9a:	edd7 7a06 	vldr	s15, [r7, #24]
 8003d9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	edc3 7a02 	vstr	s15, [r3, #8]
 8003da8:	e018      	b.n	8003ddc <Trapezoidal_Generator+0x174>
        // For a triangular profile, we need to find the time to reach peak velocity
        // and the peak velocity itself

        // Using distance = 2 * (0.5 * amax * tp^2) and solving for tp
        // where tp is the time to reach peak velocity (half the total time)
        float32_t tp = sqrtf(distance / amax);
 8003daa:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003dae:	edd7 7a01 	vldr	s15, [r7, #4]
 8003db2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003db6:	eeb0 0a66 	vmov.f32	s0, s13
 8003dba:	f00b fca1 	bl	800f700 <sqrtf>
 8003dbe:	ed87 0a08 	vstr	s0, [r7, #32]

        trapGen->t1 = tp;                    // End of acceleration phase
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	6a3a      	ldr	r2, [r7, #32]
 8003dc6:	601a      	str	r2, [r3, #0]
        trapGen->t2 = tp;                    // No constant velocity phase
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	6a3a      	ldr	r2, [r7, #32]
 8003dcc:	605a      	str	r2, [r3, #4]
        trapGen->t3 = 2 * tp;                // End of deceleration phase
 8003dce:	edd7 7a08 	vldr	s15, [r7, #32]
 8003dd2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	edc3 7a02 	vstr	s15, [r3, #8]
    }

    trapGen->time_total = trapGen->t3;
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	689a      	ldr	r2, [r3, #8]
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	60da      	str	r2, [r3, #12]
}
 8003de4:	3738      	adds	r7, #56	@ 0x38
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
	...

08003dec <Trapezoidal_Evaluated>:

void Trapezoidal_Evaluated(volatile Trapezoidal_GenStruct *trapGen,
        volatile Trapezoidal_EvaStruct *evaTrapezoidal, float32_t initial_p,
        float32_t target_p, float32_t vmax, float32_t amax) {
 8003dec:	b480      	push	{r7}
 8003dee:	b08d      	sub	sp, #52	@ 0x34
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6178      	str	r0, [r7, #20]
 8003df4:	6139      	str	r1, [r7, #16]
 8003df6:	ed87 0a03 	vstr	s0, [r7, #12]
 8003dfa:	edc7 0a02 	vstr	s1, [r7, #8]
 8003dfe:	ed87 1a01 	vstr	s2, [r7, #4]
 8003e02:	edc7 1a00 	vstr	s3, [r7]

    // Update current time (assuming 1ms intervals)
    evaTrapezoidal->t += 1.0f / 1000.0f;
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	edd3 7a03 	vldr	s15, [r3, #12]
 8003e0c:	ed9f 7aa0 	vldr	s14, [pc, #640]	@ 8004090 <Trapezoidal_Evaluated+0x2a4>
 8003e10:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	edc3 7a03 	vstr	s15, [r3, #12]

    // Check if trajectory is still active
    if (evaTrapezoidal->t <= trapGen->time_total) {
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	ed93 7a03 	vldr	s14, [r3, #12]
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	edd3 7a03 	vldr	s15, [r3, #12]
 8003e26:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003e2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e2e:	f200 811b 	bhi.w	8004068 <Trapezoidal_Evaluated+0x27c>
        evaTrapezoidal->isFinised = false;
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	2200      	movs	r2, #0
 8003e36:	741a      	strb	r2, [r3, #16]

        // Calculate direction-adjusted acceleration
        float32_t accel = amax * trapGen->dir;
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	7c1b      	ldrb	r3, [r3, #16]
 8003e3c:	b25b      	sxtb	r3, r3
 8003e3e:	ee07 3a90 	vmov	s15, r3
 8003e42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e46:	ed97 7a00 	vldr	s14, [r7]
 8003e4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e4e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

        // Calculate peak velocity (might be vmax or lower for triangular profile)
        float32_t peak_vel;
        if (trapGen->t1 == trapGen->t2) {
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	ed93 7a00 	vldr	s14, [r3]
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	edd3 7a01 	vldr	s15, [r3, #4]
 8003e5e:	eeb4 7a67 	vcmp.f32	s14, s15
 8003e62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e66:	d109      	bne.n	8003e7c <Trapezoidal_Evaluated+0x90>
            // Triangular profile - peak velocity is at t1
            peak_vel = accel * trapGen->t1;
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	edd3 7a00 	vldr	s15, [r3]
 8003e6e:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8003e72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e76:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
 8003e7a:	e00c      	b.n	8003e96 <Trapezoidal_Evaluated+0xaa>
        } else {
            // Trapezoidal profile - peak velocity is vmax with direction
            peak_vel = vmax * trapGen->dir;
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	7c1b      	ldrb	r3, [r3, #16]
 8003e80:	b25b      	sxtb	r3, r3
 8003e82:	ee07 3a90 	vmov	s15, r3
 8003e86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e8a:	ed97 7a01 	vldr	s14, [r7, #4]
 8003e8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e92:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
        }

        // Acceleration phase
        if (evaTrapezoidal->t <= trapGen->t1) {
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	ed93 7a03 	vldr	s14, [r3, #12]
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	edd3 7a00 	vldr	s15, [r3]
 8003ea2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ea6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003eaa:	d824      	bhi.n	8003ef6 <Trapezoidal_Evaluated+0x10a>
            // Position calculation: p = p0 + 0.5*a*t²
            evaTrapezoidal->setposition = initial_p + 0.5f * accel * evaTrapezoidal->t * evaTrapezoidal->t;
 8003eac:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003eb0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003eb4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	edd3 7a03 	vldr	s15, [r3, #12]
 8003ebe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	edd3 7a03 	vldr	s15, [r3, #12]
 8003ec8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ecc:	edd7 7a03 	vldr	s15, [r7, #12]
 8003ed0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	edc3 7a00 	vstr	s15, [r3]

            // Velocity calculation: v = a*t
            evaTrapezoidal->setvelocity = accel * evaTrapezoidal->t;
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	ed93 7a03 	vldr	s14, [r3, #12]
 8003ee0:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003ee4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	edc3 7a01 	vstr	s15, [r3, #4]

            // Constant acceleration
            evaTrapezoidal->setacceleration = accel;
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ef2:	609a      	str	r2, [r3, #8]
        // Ensure final position is exactly target_p
        evaTrapezoidal->setposition = target_p;
        evaTrapezoidal->setvelocity = 0.0f;
        evaTrapezoidal->setacceleration = 0.0f;
    }
}
 8003ef4:	e0c6      	b.n	8004084 <Trapezoidal_Evaluated+0x298>
        else if (evaTrapezoidal->t <= trapGen->t2) {
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	ed93 7a03 	vldr	s14, [r3, #12]
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	edd3 7a01 	vldr	s15, [r3, #4]
 8003f02:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003f06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f0a:	d830      	bhi.n	8003f6e <Trapezoidal_Evaluated+0x182>
            float32_t p1 = initial_p + 0.5f * accel * trapGen->t1 * trapGen->t1;
 8003f0c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003f10:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003f14:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	edd3 7a00 	vldr	s15, [r3]
 8003f1e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	edd3 7a00 	vldr	s15, [r3]
 8003f28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f2c:	ed97 7a03 	vldr	s14, [r7, #12]
 8003f30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f34:	edc7 7a06 	vstr	s15, [r7, #24]
            evaTrapezoidal->setposition = p1 + peak_vel * (evaTrapezoidal->t - trapGen->t1);
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	ed93 7a03 	vldr	s14, [r3, #12]
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	edd3 7a00 	vldr	s15, [r3]
 8003f44:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003f48:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8003f4c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f50:	edd7 7a06 	vldr	s15, [r7, #24]
 8003f54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	edc3 7a00 	vstr	s15, [r3]
            evaTrapezoidal->setvelocity = peak_vel;
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f62:	605a      	str	r2, [r3, #4]
            evaTrapezoidal->setacceleration = 0.0f;
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	f04f 0200 	mov.w	r2, #0
 8003f6a:	609a      	str	r2, [r3, #8]
}
 8003f6c:	e08a      	b.n	8004084 <Trapezoidal_Evaluated+0x298>
        else if (evaTrapezoidal->t <= trapGen->t3) {
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	ed93 7a03 	vldr	s14, [r3, #12]
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	edd3 7a02 	vldr	s15, [r3, #8]
 8003f7a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003f7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f82:	d900      	bls.n	8003f86 <Trapezoidal_Evaluated+0x19a>
}
 8003f84:	e07e      	b.n	8004084 <Trapezoidal_Evaluated+0x298>
            float32_t p1 = initial_p + 0.5f * accel * trapGen->t1 * trapGen->t1;
 8003f86:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003f8a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003f8e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	edd3 7a00 	vldr	s15, [r3]
 8003f98:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	edd3 7a00 	vldr	s15, [r3]
 8003fa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fa6:	ed97 7a03 	vldr	s14, [r7, #12]
 8003faa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003fae:	edc7 7a08 	vstr	s15, [r7, #32]
            float32_t p2 = p1;
 8003fb2:	6a3b      	ldr	r3, [r7, #32]
 8003fb4:	62bb      	str	r3, [r7, #40]	@ 0x28
            if (trapGen->t2 > trapGen->t1) {
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	ed93 7a01 	vldr	s14, [r3, #4]
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	edd3 7a00 	vldr	s15, [r3]
 8003fc2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003fc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fca:	dd11      	ble.n	8003ff0 <Trapezoidal_Evaluated+0x204>
                p2 += peak_vel * (trapGen->t2 - trapGen->t1);
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	ed93 7a01 	vldr	s14, [r3, #4]
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	edd3 7a00 	vldr	s15, [r3]
 8003fd8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003fdc:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8003fe0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fe4:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8003fe8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003fec:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            float32_t td = evaTrapezoidal->t - trapGen->t2;
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	ed93 7a03 	vldr	s14, [r3, #12]
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	edd3 7a01 	vldr	s15, [r3, #4]
 8003ffc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004000:	edc7 7a07 	vstr	s15, [r7, #28]
            evaTrapezoidal->setposition = p2 + peak_vel * td - 0.5f * accel * td * td;
 8004004:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8004008:	edd7 7a07 	vldr	s15, [r7, #28]
 800400c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004010:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8004014:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004018:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800401c:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8004020:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8004024:	edd7 7a07 	vldr	s15, [r7, #28]
 8004028:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800402c:	edd7 7a07 	vldr	s15, [r7, #28]
 8004030:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004034:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	edc3 7a00 	vstr	s15, [r3]
            evaTrapezoidal->setvelocity = peak_vel - accel * td;
 800403e:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8004042:	edd7 7a07 	vldr	s15, [r7, #28]
 8004046:	ee67 7a27 	vmul.f32	s15, s14, s15
 800404a:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800404e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	edc3 7a01 	vstr	s15, [r3, #4]
            evaTrapezoidal->setacceleration = -accel;
 8004058:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800405c:	eef1 7a67 	vneg.f32	s15, s15
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8004066:	e00d      	b.n	8004084 <Trapezoidal_Evaluated+0x298>
        evaTrapezoidal->isFinised = true;
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	2201      	movs	r2, #1
 800406c:	741a      	strb	r2, [r3, #16]
        evaTrapezoidal->setposition = target_p;
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	68ba      	ldr	r2, [r7, #8]
 8004072:	601a      	str	r2, [r3, #0]
        evaTrapezoidal->setvelocity = 0.0f;
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	f04f 0200 	mov.w	r2, #0
 800407a:	605a      	str	r2, [r3, #4]
        evaTrapezoidal->setacceleration = 0.0f;
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	f04f 0200 	mov.w	r2, #0
 8004082:	609a      	str	r2, [r3, #8]
}
 8004084:	bf00      	nop
 8004086:	3734      	adds	r7, #52	@ 0x34
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr
 8004090:	3a83126f 	.word	0x3a83126f

08004094 <temperature_to_base>:
    "ns", "us", "ms", "s", "min", "hour", "day",
    "C", "F", "K"
};

/* Custom conversion functions for temperature */
static float temperature_to_base(float value, Unit from_unit) {
 8004094:	b480      	push	{r7}
 8004096:	b083      	sub	sp, #12
 8004098:	af00      	add	r7, sp, #0
 800409a:	ed87 0a01 	vstr	s0, [r7, #4]
 800409e:	4603      	mov	r3, r0
 80040a0:	70fb      	strb	r3, [r7, #3]
    switch (from_unit) {
 80040a2:	78fb      	ldrb	r3, [r7, #3]
 80040a4:	2b1a      	cmp	r3, #26
 80040a6:	d018      	beq.n	80040da <temperature_to_base+0x46>
 80040a8:	2b1a      	cmp	r3, #26
 80040aa:	dc1d      	bgt.n	80040e8 <temperature_to_base+0x54>
 80040ac:	2b18      	cmp	r3, #24
 80040ae:	d002      	beq.n	80040b6 <temperature_to_base+0x22>
 80040b0:	2b19      	cmp	r3, #25
 80040b2:	d003      	beq.n	80040bc <temperature_to_base+0x28>
 80040b4:	e018      	b.n	80040e8 <temperature_to_base+0x54>
        case UNIT_CELSIUS:
            return value;  /* Base unit is Celsius */
 80040b6:	edd7 7a01 	vldr	s15, [r7, #4]
 80040ba:	e017      	b.n	80040ec <temperature_to_base+0x58>
        case UNIT_FAHRENHEIT:
            return (value - 32.0f) * 5.0f / 9.0f;
 80040bc:	edd7 7a01 	vldr	s15, [r7, #4]
 80040c0:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80040fc <temperature_to_base+0x68>
 80040c4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80040c8:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 80040cc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80040d0:	eef2 6a02 	vmov.f32	s13, #34	@ 0x41100000  9.0
 80040d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80040d8:	e008      	b.n	80040ec <temperature_to_base+0x58>
        case UNIT_KELVIN:
            return value - 273.15f;
 80040da:	edd7 7a01 	vldr	s15, [r7, #4]
 80040de:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8004100 <temperature_to_base+0x6c>
 80040e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80040e6:	e001      	b.n	80040ec <temperature_to_base+0x58>
        default:
            return value;
 80040e8:	edd7 7a01 	vldr	s15, [r7, #4]
    }
}
 80040ec:	eeb0 0a67 	vmov.f32	s0, s15
 80040f0:	370c      	adds	r7, #12
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr
 80040fa:	bf00      	nop
 80040fc:	42000000 	.word	0x42000000
 8004100:	43889333 	.word	0x43889333

08004104 <temperature_from_base>:

static float temperature_from_base(float value, Unit to_unit) {
 8004104:	b480      	push	{r7}
 8004106:	b083      	sub	sp, #12
 8004108:	af00      	add	r7, sp, #0
 800410a:	ed87 0a01 	vstr	s0, [r7, #4]
 800410e:	4603      	mov	r3, r0
 8004110:	70fb      	strb	r3, [r7, #3]
    switch (to_unit) {
 8004112:	78fb      	ldrb	r3, [r7, #3]
 8004114:	2b1a      	cmp	r3, #26
 8004116:	d018      	beq.n	800414a <temperature_from_base+0x46>
 8004118:	2b1a      	cmp	r3, #26
 800411a:	dc1d      	bgt.n	8004158 <temperature_from_base+0x54>
 800411c:	2b18      	cmp	r3, #24
 800411e:	d002      	beq.n	8004126 <temperature_from_base+0x22>
 8004120:	2b19      	cmp	r3, #25
 8004122:	d003      	beq.n	800412c <temperature_from_base+0x28>
 8004124:	e018      	b.n	8004158 <temperature_from_base+0x54>
        case UNIT_CELSIUS:
            return value;  /* Base unit is Celsius */
 8004126:	edd7 7a01 	vldr	s15, [r7, #4]
 800412a:	e017      	b.n	800415c <temperature_from_base+0x58>
        case UNIT_FAHRENHEIT:
            return (value * 9.0f / 5.0f) + 32.0f;
 800412c:	edd7 7a01 	vldr	s15, [r7, #4]
 8004130:	eeb2 7a02 	vmov.f32	s14, #34	@ 0x41100000  9.0
 8004134:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004138:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 800413c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004140:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 800416c <temperature_from_base+0x68>
 8004144:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004148:	e008      	b.n	800415c <temperature_from_base+0x58>
        case UNIT_KELVIN:
            return value + 273.15f;
 800414a:	edd7 7a01 	vldr	s15, [r7, #4]
 800414e:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8004170 <temperature_from_base+0x6c>
 8004152:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004156:	e001      	b.n	800415c <temperature_from_base+0x58>
        default:
            return value;
 8004158:	edd7 7a01 	vldr	s15, [r7, #4]
    }
}
 800415c:	eeb0 0a67 	vmov.f32	s0, s15
 8004160:	370c      	adds	r7, #12
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr
 800416a:	bf00      	nop
 800416c:	42000000 	.word	0x42000000
 8004170:	43889333 	.word	0x43889333

08004174 <init_length_converter>:

/* Initialize unit converters with conversion factors */
static void init_length_converter(UnitConverter *converter) {
 8004174:	b480      	push	{r7}
 8004176:	b085      	sub	sp, #20
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_LENGTH;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2200      	movs	r2, #0
 8004180:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_M;  /* Meter is the base unit */
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2202      	movs	r2, #2
 8004186:	705a      	strb	r2, [r3, #1]

    /* Initialize all conversion factors to 0.0 */
    for (int i = 0; i < UNIT_COUNT; i++) {
 8004188:	2300      	movs	r3, #0
 800418a:	60fb      	str	r3, [r7, #12]
 800418c:	e00a      	b.n	80041a4 <init_length_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	4413      	add	r3, r2
 8004196:	3304      	adds	r3, #4
 8004198:	f04f 0200 	mov.w	r2, #0
 800419c:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	3301      	adds	r3, #1
 80041a2:	60fb      	str	r3, [r7, #12]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2b1a      	cmp	r3, #26
 80041a8:	ddf1      	ble.n	800418e <init_length_converter+0x1a>
    }

    /* Set conversion factors for length units (to convert to meters) */
    converter->conversion_factors[UNIT_MM] = 0.001f;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4a11      	ldr	r2, [pc, #68]	@ (80041f4 <init_length_converter+0x80>)
 80041ae:	605a      	str	r2, [r3, #4]
    converter->conversion_factors[UNIT_CM] = 0.01f;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	4a11      	ldr	r2, [pc, #68]	@ (80041f8 <init_length_converter+0x84>)
 80041b4:	609a      	str	r2, [r3, #8]
    converter->conversion_factors[UNIT_M] = 1.0f;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80041bc:	60da      	str	r2, [r3, #12]
    converter->conversion_factors[UNIT_KM] = 1000.0f;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a0e      	ldr	r2, [pc, #56]	@ (80041fc <init_length_converter+0x88>)
 80041c2:	611a      	str	r2, [r3, #16]
    converter->conversion_factors[UNIT_INCH] = 0.0254f;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4a0e      	ldr	r2, [pc, #56]	@ (8004200 <init_length_converter+0x8c>)
 80041c8:	615a      	str	r2, [r3, #20]
    converter->conversion_factors[UNIT_FOOT] = 0.3048f;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a0d      	ldr	r2, [pc, #52]	@ (8004204 <init_length_converter+0x90>)
 80041ce:	619a      	str	r2, [r3, #24]
    converter->conversion_factors[UNIT_YARD] = 0.9144f;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	4a0d      	ldr	r2, [pc, #52]	@ (8004208 <init_length_converter+0x94>)
 80041d4:	61da      	str	r2, [r3, #28]
    converter->conversion_factors[UNIT_MILE] = 1609.344f;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a0c      	ldr	r2, [pc, #48]	@ (800420c <init_length_converter+0x98>)
 80041da:	621a      	str	r2, [r3, #32]

    converter->to_base = NULL;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2200      	movs	r2, #0
 80041e0:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = NULL;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80041e8:	bf00      	nop
 80041ea:	3714      	adds	r7, #20
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr
 80041f4:	3a83126f 	.word	0x3a83126f
 80041f8:	3c23d70a 	.word	0x3c23d70a
 80041fc:	447a0000 	.word	0x447a0000
 8004200:	3cd013a9 	.word	0x3cd013a9
 8004204:	3e9c0ebf 	.word	0x3e9c0ebf
 8004208:	3f6a161e 	.word	0x3f6a161e
 800420c:	44c92b02 	.word	0x44c92b02

08004210 <init_mass_converter>:

static void init_mass_converter(UnitConverter *converter) {
 8004210:	b480      	push	{r7}
 8004212:	b085      	sub	sp, #20
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_MASS;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_KG;  /* Kilogram is the base unit */
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	220a      	movs	r2, #10
 8004222:	705a      	strb	r2, [r3, #1]

    /* Initialize all conversion factors to 0.0 */
    for (int i = 0; i < UNIT_COUNT; i++) {
 8004224:	2300      	movs	r3, #0
 8004226:	60fb      	str	r3, [r7, #12]
 8004228:	e00a      	b.n	8004240 <init_mass_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	4413      	add	r3, r2
 8004232:	3304      	adds	r3, #4
 8004234:	f04f 0200 	mov.w	r2, #0
 8004238:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	3301      	adds	r3, #1
 800423e:	60fb      	str	r3, [r7, #12]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2b1a      	cmp	r3, #26
 8004244:	ddf1      	ble.n	800422a <init_mass_converter+0x1a>
    }

    /* Set conversion factors for mass units (to convert to kilograms) */
    converter->conversion_factors[UNIT_MG] = 0.000001f;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a0e      	ldr	r2, [pc, #56]	@ (8004284 <init_mass_converter+0x74>)
 800424a:	625a      	str	r2, [r3, #36]	@ 0x24
    converter->conversion_factors[UNIT_G] = 0.001f;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	4a0e      	ldr	r2, [pc, #56]	@ (8004288 <init_mass_converter+0x78>)
 8004250:	629a      	str	r2, [r3, #40]	@ 0x28
    converter->conversion_factors[UNIT_KG] = 1.0f;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004258:	62da      	str	r2, [r3, #44]	@ 0x2c
    converter->conversion_factors[UNIT_TON] = 1000.0f;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	4a0b      	ldr	r2, [pc, #44]	@ (800428c <init_mass_converter+0x7c>)
 800425e:	631a      	str	r2, [r3, #48]	@ 0x30
    converter->conversion_factors[UNIT_OZ] = 0.0283495f;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	4a0b      	ldr	r2, [pc, #44]	@ (8004290 <init_mass_converter+0x80>)
 8004264:	635a      	str	r2, [r3, #52]	@ 0x34
    converter->conversion_factors[UNIT_LB] = 0.453592f;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4a0a      	ldr	r2, [pc, #40]	@ (8004294 <init_mass_converter+0x84>)
 800426a:	639a      	str	r2, [r3, #56]	@ 0x38

    converter->to_base = NULL;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = NULL;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2200      	movs	r2, #0
 8004276:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004278:	bf00      	nop
 800427a:	3714      	adds	r7, #20
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr
 8004284:	358637bd 	.word	0x358637bd
 8004288:	3a83126f 	.word	0x3a83126f
 800428c:	447a0000 	.word	0x447a0000
 8004290:	3ce83d36 	.word	0x3ce83d36
 8004294:	3ee83d36 	.word	0x3ee83d36

08004298 <init_angle_converter>:

static void init_angle_converter(UnitConverter *converter) {
 8004298:	b480      	push	{r7}
 800429a:	b085      	sub	sp, #20
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_ANGLE;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2202      	movs	r2, #2
 80042a4:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_RADIAN;  /* Radian is the base unit */
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	220f      	movs	r2, #15
 80042aa:	705a      	strb	r2, [r3, #1]

    /* Initialize all conversion factors to 0.0 */
    for (int i = 0; i < UNIT_COUNT; i++) {
 80042ac:	2300      	movs	r3, #0
 80042ae:	60fb      	str	r3, [r7, #12]
 80042b0:	e00a      	b.n	80042c8 <init_angle_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	4413      	add	r3, r2
 80042ba:	3304      	adds	r3, #4
 80042bc:	f04f 0200 	mov.w	r2, #0
 80042c0:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	3301      	adds	r3, #1
 80042c6:	60fb      	str	r3, [r7, #12]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2b1a      	cmp	r3, #26
 80042cc:	ddf1      	ble.n	80042b2 <init_angle_converter+0x1a>
    }

    /* Set conversion factors for angle units (to convert to radians) */
    converter->conversion_factors[UNIT_DEGREE] = M_PI / 180.0f;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4a0a      	ldr	r2, [pc, #40]	@ (80042fc <init_angle_converter+0x64>)
 80042d2:	63da      	str	r2, [r3, #60]	@ 0x3c
    converter->conversion_factors[UNIT_RADIAN] = 1.0f;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80042da:	641a      	str	r2, [r3, #64]	@ 0x40
    converter->conversion_factors[UNIT_GRADIAN] = M_PI / 200.0f;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	4a08      	ldr	r2, [pc, #32]	@ (8004300 <init_angle_converter+0x68>)
 80042e0:	645a      	str	r2, [r3, #68]	@ 0x44

    converter->to_base = NULL;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = NULL;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2200      	movs	r2, #0
 80042ec:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80042ee:	bf00      	nop
 80042f0:	3714      	adds	r7, #20
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr
 80042fa:	bf00      	nop
 80042fc:	3c8efa35 	.word	0x3c8efa35
 8004300:	3c80adfd 	.word	0x3c80adfd

08004304 <init_time_converter>:

static void init_time_converter(UnitConverter *converter) {
 8004304:	b480      	push	{r7}
 8004306:	b085      	sub	sp, #20
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_TIME;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2203      	movs	r2, #3
 8004310:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_SECOND;  /* Second is the base unit */
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2214      	movs	r2, #20
 8004316:	705a      	strb	r2, [r3, #1]

    /* Initialize all conversion factors to 0.0 */
    for (int i = 0; i < UNIT_COUNT; i++) {
 8004318:	2300      	movs	r3, #0
 800431a:	60fb      	str	r3, [r7, #12]
 800431c:	e00a      	b.n	8004334 <init_time_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 800431e:	687a      	ldr	r2, [r7, #4]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	4413      	add	r3, r2
 8004326:	3304      	adds	r3, #4
 8004328:	f04f 0200 	mov.w	r2, #0
 800432c:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	3301      	adds	r3, #1
 8004332:	60fb      	str	r3, [r7, #12]
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2b1a      	cmp	r3, #26
 8004338:	ddf1      	ble.n	800431e <init_time_converter+0x1a>
    }

    /* Set conversion factors for time units (to convert to seconds) */
    converter->conversion_factors[UNIT_NANOSECOND] = 1e-9f;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	4a10      	ldr	r2, [pc, #64]	@ (8004380 <init_time_converter+0x7c>)
 800433e:	649a      	str	r2, [r3, #72]	@ 0x48
    converter->conversion_factors[UNIT_MICROSECOND] = 1e-6f;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	4a10      	ldr	r2, [pc, #64]	@ (8004384 <init_time_converter+0x80>)
 8004344:	64da      	str	r2, [r3, #76]	@ 0x4c
    converter->conversion_factors[UNIT_MILLISECOND] = 1e-3f;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	4a0f      	ldr	r2, [pc, #60]	@ (8004388 <init_time_converter+0x84>)
 800434a:	651a      	str	r2, [r3, #80]	@ 0x50
    converter->conversion_factors[UNIT_SECOND] = 1.0f;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004352:	655a      	str	r2, [r3, #84]	@ 0x54
    converter->conversion_factors[UNIT_MINUTE] = 60.0f;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	4a0d      	ldr	r2, [pc, #52]	@ (800438c <init_time_converter+0x88>)
 8004358:	659a      	str	r2, [r3, #88]	@ 0x58
    converter->conversion_factors[UNIT_HOUR] = 3600.0f;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4a0c      	ldr	r2, [pc, #48]	@ (8004390 <init_time_converter+0x8c>)
 800435e:	65da      	str	r2, [r3, #92]	@ 0x5c
    converter->conversion_factors[UNIT_DAY] = 86400.0f;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	4a0c      	ldr	r2, [pc, #48]	@ (8004394 <init_time_converter+0x90>)
 8004364:	661a      	str	r2, [r3, #96]	@ 0x60

    converter->to_base = NULL;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2200      	movs	r2, #0
 800436a:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = NULL;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2200      	movs	r2, #0
 8004370:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004372:	bf00      	nop
 8004374:	3714      	adds	r7, #20
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr
 800437e:	bf00      	nop
 8004380:	3089705f 	.word	0x3089705f
 8004384:	358637bd 	.word	0x358637bd
 8004388:	3a83126f 	.word	0x3a83126f
 800438c:	42700000 	.word	0x42700000
 8004390:	45610000 	.word	0x45610000
 8004394:	47a8c000 	.word	0x47a8c000

08004398 <init_temperature_converter>:

static void init_temperature_converter(UnitConverter *converter) {
 8004398:	b480      	push	{r7}
 800439a:	b085      	sub	sp, #20
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_TEMPERATURE;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2204      	movs	r2, #4
 80043a4:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_CELSIUS;  /* Celsius is the base unit */
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2218      	movs	r2, #24
 80043aa:	705a      	strb	r2, [r3, #1]

    /* For temperature, all conversion factors are 0 because we use custom functions */
    for (int i = 0; i < UNIT_COUNT; i++) {
 80043ac:	2300      	movs	r3, #0
 80043ae:	60fb      	str	r3, [r7, #12]
 80043b0:	e00a      	b.n	80043c8 <init_temperature_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	4413      	add	r3, r2
 80043ba:	3304      	adds	r3, #4
 80043bc:	f04f 0200 	mov.w	r2, #0
 80043c0:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	3301      	adds	r3, #1
 80043c6:	60fb      	str	r3, [r7, #12]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2b1a      	cmp	r3, #26
 80043cc:	ddf1      	ble.n	80043b2 <init_temperature_converter+0x1a>
    }

    /* Set custom conversion functions for temperature */
    converter->to_base = temperature_to_base;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4a05      	ldr	r2, [pc, #20]	@ (80043e8 <init_temperature_converter+0x50>)
 80043d2:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = temperature_from_base;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	4a05      	ldr	r2, [pc, #20]	@ (80043ec <init_temperature_converter+0x54>)
 80043d8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80043da:	bf00      	nop
 80043dc:	3714      	adds	r7, #20
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr
 80043e6:	bf00      	nop
 80043e8:	08004095 	.word	0x08004095
 80043ec:	08004105 	.word	0x08004105

080043f0 <UnitConverter_init>:

/* Initialize the unit converter system */
void UnitConverter_init(UnitConverterSystem *system) {
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b082      	sub	sp, #8
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
    /* Initialize each unit type converter */
    init_length_converter(&system->converters[UNIT_TYPE_LENGTH]);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	4618      	mov	r0, r3
 80043fc:	f7ff feba 	bl	8004174 <init_length_converter>
    init_mass_converter(&system->converters[UNIT_TYPE_MASS]);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	3378      	adds	r3, #120	@ 0x78
 8004404:	4618      	mov	r0, r3
 8004406:	f7ff ff03 	bl	8004210 <init_mass_converter>
    init_angle_converter(&system->converters[UNIT_TYPE_ANGLE]);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	33f0      	adds	r3, #240	@ 0xf0
 800440e:	4618      	mov	r0, r3
 8004410:	f7ff ff42 	bl	8004298 <init_angle_converter>
    init_time_converter(&system->converters[UNIT_TYPE_TIME]);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800441a:	4618      	mov	r0, r3
 800441c:	f7ff ff72 	bl	8004304 <init_time_converter>
    init_temperature_converter(&system->converters[UNIT_TYPE_TEMPERATURE]);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8004426:	4618      	mov	r0, r3
 8004428:	f7ff ffb6 	bl	8004398 <init_temperature_converter>
}
 800442c:	bf00      	nop
 800442e:	3708      	adds	r7, #8
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}

08004434 <UnitConverter_get_unit_type>:

/* Get the unit type for a given unit */
UnitType UnitConverter_get_unit_type(Unit unit) {
 8004434:	b480      	push	{r7}
 8004436:	b083      	sub	sp, #12
 8004438:	af00      	add	r7, sp, #0
 800443a:	4603      	mov	r3, r0
 800443c:	71fb      	strb	r3, [r7, #7]
    if (unit < UNIT_COUNT) {
 800443e:	79fb      	ldrb	r3, [r7, #7]
 8004440:	2b1a      	cmp	r3, #26
 8004442:	d803      	bhi.n	800444c <UnitConverter_get_unit_type+0x18>
        return unit_types[unit];
 8004444:	79fb      	ldrb	r3, [r7, #7]
 8004446:	4a05      	ldr	r2, [pc, #20]	@ (800445c <UnitConverter_get_unit_type+0x28>)
 8004448:	5cd3      	ldrb	r3, [r2, r3]
 800444a:	e000      	b.n	800444e <UnitConverter_get_unit_type+0x1a>
    }
    return UNIT_TYPE_LENGTH; /* Default to length if invalid */
 800444c:	2300      	movs	r3, #0
}
 800444e:	4618      	mov	r0, r3
 8004450:	370c      	adds	r7, #12
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr
 800445a:	bf00      	nop
 800445c:	200000d4 	.word	0x200000d4

08004460 <UnitConverter_convert>:

/* Convert a value from one unit to another */
float UnitConverter_convert(UnitConverterSystem *system, float value, Unit from_unit, Unit to_unit) {
 8004460:	b580      	push	{r7, lr}
 8004462:	b088      	sub	sp, #32
 8004464:	af00      	add	r7, sp, #0
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	ed87 0a02 	vstr	s0, [r7, #8]
 800446c:	460b      	mov	r3, r1
 800446e:	71fb      	strb	r3, [r7, #7]
 8004470:	4613      	mov	r3, r2
 8004472:	71bb      	strb	r3, [r7, #6]
    /* Check if units are of the same type */
    UnitType from_type = UnitConverter_get_unit_type(from_unit);
 8004474:	79fb      	ldrb	r3, [r7, #7]
 8004476:	4618      	mov	r0, r3
 8004478:	f7ff ffdc 	bl	8004434 <UnitConverter_get_unit_type>
 800447c:	4603      	mov	r3, r0
 800447e:	76fb      	strb	r3, [r7, #27]
    UnitType to_type = UnitConverter_get_unit_type(to_unit);
 8004480:	79bb      	ldrb	r3, [r7, #6]
 8004482:	4618      	mov	r0, r3
 8004484:	f7ff ffd6 	bl	8004434 <UnitConverter_get_unit_type>
 8004488:	4603      	mov	r3, r0
 800448a:	76bb      	strb	r3, [r7, #26]

    if (from_type != to_type) {
 800448c:	7efa      	ldrb	r2, [r7, #27]
 800448e:	7ebb      	ldrb	r3, [r7, #26]
 8004490:	429a      	cmp	r2, r3
 8004492:	d002      	beq.n	800449a <UnitConverter_convert+0x3a>
        /* Cannot convert between different unit types */
        return value;
 8004494:	edd7 7a02 	vldr	s15, [r7, #8]
 8004498:	e03b      	b.n	8004512 <UnitConverter_convert+0xb2>
    }

    /* Get the appropriate converter */
    UnitConverter *converter = &system->converters[from_type];
 800449a:	7efa      	ldrb	r2, [r7, #27]
 800449c:	4613      	mov	r3, r2
 800449e:	011b      	lsls	r3, r3, #4
 80044a0:	1a9b      	subs	r3, r3, r2
 80044a2:	00db      	lsls	r3, r3, #3
 80044a4:	68fa      	ldr	r2, [r7, #12]
 80044a6:	4413      	add	r3, r2
 80044a8:	617b      	str	r3, [r7, #20]

    /* Convert to base unit */
    float base_value;
    if (converter->to_base) {
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d009      	beq.n	80044c6 <UnitConverter_convert+0x66>
        /* Use custom function if available */
        base_value = converter->to_base(value, from_unit);
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044b6:	79fa      	ldrb	r2, [r7, #7]
 80044b8:	4610      	mov	r0, r2
 80044ba:	ed97 0a02 	vldr	s0, [r7, #8]
 80044be:	4798      	blx	r3
 80044c0:	ed87 0a07 	vstr	s0, [r7, #28]
 80044c4:	e00c      	b.n	80044e0 <UnitConverter_convert+0x80>
    } else {
        /* Use conversion factor */
        base_value = value * converter->conversion_factors[from_unit];
 80044c6:	79fb      	ldrb	r3, [r7, #7]
 80044c8:	697a      	ldr	r2, [r7, #20]
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	4413      	add	r3, r2
 80044ce:	3304      	adds	r3, #4
 80044d0:	edd3 7a00 	vldr	s15, [r3]
 80044d4:	ed97 7a02 	vldr	s14, [r7, #8]
 80044d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044dc:	edc7 7a07 	vstr	s15, [r7, #28]
    }

    /* Convert from base unit to target unit */
    if (converter->from_base) {
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d009      	beq.n	80044fc <UnitConverter_convert+0x9c>
        /* Use custom function if available */
        return converter->from_base(base_value, to_unit);
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044ec:	79ba      	ldrb	r2, [r7, #6]
 80044ee:	4610      	mov	r0, r2
 80044f0:	ed97 0a07 	vldr	s0, [r7, #28]
 80044f4:	4798      	blx	r3
 80044f6:	eef0 7a40 	vmov.f32	s15, s0
 80044fa:	e00a      	b.n	8004512 <UnitConverter_convert+0xb2>
    } else {
        /* Use conversion factor */
        return base_value / converter->conversion_factors[to_unit];
 80044fc:	79bb      	ldrb	r3, [r7, #6]
 80044fe:	697a      	ldr	r2, [r7, #20]
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	4413      	add	r3, r2
 8004504:	3304      	adds	r3, #4
 8004506:	ed93 7a00 	vldr	s14, [r3]
 800450a:	edd7 6a07 	vldr	s13, [r7, #28]
 800450e:	eec6 7a87 	vdiv.f32	s15, s13, s14
    }
}
 8004512:	eeb0 0a67 	vmov.f32	s0, s15
 8004516:	3720      	adds	r7, #32
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}

0800451c <UnitConverter_angle>:
        return UnitConverter_convert(system, value, from_unit, to_unit);
    }
    return value;
}

float UnitConverter_angle(UnitConverterSystem *system, float value, Unit from_unit, Unit to_unit) {
 800451c:	b580      	push	{r7, lr}
 800451e:	b084      	sub	sp, #16
 8004520:	af00      	add	r7, sp, #0
 8004522:	60f8      	str	r0, [r7, #12]
 8004524:	ed87 0a02 	vstr	s0, [r7, #8]
 8004528:	460b      	mov	r3, r1
 800452a:	71fb      	strb	r3, [r7, #7]
 800452c:	4613      	mov	r3, r2
 800452e:	71bb      	strb	r3, [r7, #6]
    if (UnitConverter_get_unit_type(from_unit) == UNIT_TYPE_ANGLE &&
 8004530:	79fb      	ldrb	r3, [r7, #7]
 8004532:	4618      	mov	r0, r3
 8004534:	f7ff ff7e 	bl	8004434 <UnitConverter_get_unit_type>
 8004538:	4603      	mov	r3, r0
 800453a:	2b02      	cmp	r3, #2
 800453c:	d111      	bne.n	8004562 <UnitConverter_angle+0x46>
        UnitConverter_get_unit_type(to_unit) == UNIT_TYPE_ANGLE) {
 800453e:	79bb      	ldrb	r3, [r7, #6]
 8004540:	4618      	mov	r0, r3
 8004542:	f7ff ff77 	bl	8004434 <UnitConverter_get_unit_type>
 8004546:	4603      	mov	r3, r0
    if (UnitConverter_get_unit_type(from_unit) == UNIT_TYPE_ANGLE &&
 8004548:	2b02      	cmp	r3, #2
 800454a:	d10a      	bne.n	8004562 <UnitConverter_angle+0x46>
        return UnitConverter_convert(system, value, from_unit, to_unit);
 800454c:	79ba      	ldrb	r2, [r7, #6]
 800454e:	79fb      	ldrb	r3, [r7, #7]
 8004550:	4619      	mov	r1, r3
 8004552:	ed97 0a02 	vldr	s0, [r7, #8]
 8004556:	68f8      	ldr	r0, [r7, #12]
 8004558:	f7ff ff82 	bl	8004460 <UnitConverter_convert>
 800455c:	eef0 7a40 	vmov.f32	s15, s0
 8004560:	e001      	b.n	8004566 <UnitConverter_angle+0x4a>
    }
    return value;
 8004562:	edd7 7a02 	vldr	s15, [r7, #8]
}
 8004566:	eeb0 0a67 	vmov.f32	s0, s15
 800456a:	3710      	adds	r7, #16
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}

08004570 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b08c      	sub	sp, #48	@ 0x30
 8004574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8004576:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800457a:	2200      	movs	r2, #0
 800457c:	601a      	str	r2, [r3, #0]
 800457e:	605a      	str	r2, [r3, #4]
 8004580:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8004582:	1d3b      	adds	r3, r7, #4
 8004584:	2220      	movs	r2, #32
 8004586:	2100      	movs	r1, #0
 8004588:	4618      	mov	r0, r3
 800458a:	f00a ff9f 	bl	800f4cc <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800458e:	4b39      	ldr	r3, [pc, #228]	@ (8004674 <MX_ADC1_Init+0x104>)
 8004590:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8004594:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004596:	4b37      	ldr	r3, [pc, #220]	@ (8004674 <MX_ADC1_Init+0x104>)
 8004598:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800459c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800459e:	4b35      	ldr	r3, [pc, #212]	@ (8004674 <MX_ADC1_Init+0x104>)
 80045a0:	2200      	movs	r2, #0
 80045a2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80045a4:	4b33      	ldr	r3, [pc, #204]	@ (8004674 <MX_ADC1_Init+0x104>)
 80045a6:	2200      	movs	r2, #0
 80045a8:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80045aa:	4b32      	ldr	r3, [pc, #200]	@ (8004674 <MX_ADC1_Init+0x104>)
 80045ac:	2200      	movs	r2, #0
 80045ae:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80045b0:	4b30      	ldr	r3, [pc, #192]	@ (8004674 <MX_ADC1_Init+0x104>)
 80045b2:	2201      	movs	r2, #1
 80045b4:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80045b6:	4b2f      	ldr	r3, [pc, #188]	@ (8004674 <MX_ADC1_Init+0x104>)
 80045b8:	2204      	movs	r2, #4
 80045ba:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80045bc:	4b2d      	ldr	r3, [pc, #180]	@ (8004674 <MX_ADC1_Init+0x104>)
 80045be:	2200      	movs	r2, #0
 80045c0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80045c2:	4b2c      	ldr	r3, [pc, #176]	@ (8004674 <MX_ADC1_Init+0x104>)
 80045c4:	2201      	movs	r2, #1
 80045c6:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 80045c8:	4b2a      	ldr	r3, [pc, #168]	@ (8004674 <MX_ADC1_Init+0x104>)
 80045ca:	2202      	movs	r2, #2
 80045cc:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80045ce:	4b29      	ldr	r3, [pc, #164]	@ (8004674 <MX_ADC1_Init+0x104>)
 80045d0:	2200      	movs	r2, #0
 80045d2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80045d6:	4b27      	ldr	r3, [pc, #156]	@ (8004674 <MX_ADC1_Init+0x104>)
 80045d8:	2200      	movs	r2, #0
 80045da:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80045dc:	4b25      	ldr	r3, [pc, #148]	@ (8004674 <MX_ADC1_Init+0x104>)
 80045de:	2200      	movs	r2, #0
 80045e0:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80045e2:	4b24      	ldr	r3, [pc, #144]	@ (8004674 <MX_ADC1_Init+0x104>)
 80045e4:	2201      	movs	r2, #1
 80045e6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80045ea:	4b22      	ldr	r3, [pc, #136]	@ (8004674 <MX_ADC1_Init+0x104>)
 80045ec:	2200      	movs	r2, #0
 80045ee:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80045f0:	4b20      	ldr	r3, [pc, #128]	@ (8004674 <MX_ADC1_Init+0x104>)
 80045f2:	2200      	movs	r2, #0
 80045f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80045f8:	481e      	ldr	r0, [pc, #120]	@ (8004674 <MX_ADC1_Init+0x104>)
 80045fa:	f003 fe2f 	bl	800825c <HAL_ADC_Init>
 80045fe:	4603      	mov	r3, r0
 8004600:	2b00      	cmp	r3, #0
 8004602:	d001      	beq.n	8004608 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8004604:	f001 fe62 	bl	80062cc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8004608:	2300      	movs	r3, #0
 800460a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800460c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004610:	4619      	mov	r1, r3
 8004612:	4818      	ldr	r0, [pc, #96]	@ (8004674 <MX_ADC1_Init+0x104>)
 8004614:	f004 ff4e 	bl	80094b4 <HAL_ADCEx_MultiModeConfigChannel>
 8004618:	4603      	mov	r3, r0
 800461a:	2b00      	cmp	r3, #0
 800461c:	d001      	beq.n	8004622 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800461e:	f001 fe55 	bl	80062cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8004622:	4b15      	ldr	r3, [pc, #84]	@ (8004678 <MX_ADC1_Init+0x108>)
 8004624:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004626:	2306      	movs	r3, #6
 8004628:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800462a:	2307      	movs	r3, #7
 800462c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800462e:	237f      	movs	r3, #127	@ 0x7f
 8004630:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004632:	2304      	movs	r3, #4
 8004634:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8004636:	2300      	movs	r3, #0
 8004638:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800463a:	1d3b      	adds	r3, r7, #4
 800463c:	4619      	mov	r1, r3
 800463e:	480d      	ldr	r0, [pc, #52]	@ (8004674 <MX_ADC1_Init+0x104>)
 8004640:	f004 f8ba 	bl	80087b8 <HAL_ADC_ConfigChannel>
 8004644:	4603      	mov	r3, r0
 8004646:	2b00      	cmp	r3, #0
 8004648:	d001      	beq.n	800464e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800464a:	f001 fe3f 	bl	80062cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800464e:	4b0b      	ldr	r3, [pc, #44]	@ (800467c <MX_ADC1_Init+0x10c>)
 8004650:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8004652:	230c      	movs	r3, #12
 8004654:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004656:	1d3b      	adds	r3, r7, #4
 8004658:	4619      	mov	r1, r3
 800465a:	4806      	ldr	r0, [pc, #24]	@ (8004674 <MX_ADC1_Init+0x104>)
 800465c:	f004 f8ac 	bl	80087b8 <HAL_ADC_ConfigChannel>
 8004660:	4603      	mov	r3, r0
 8004662:	2b00      	cmp	r3, #0
 8004664:	d001      	beq.n	800466a <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8004666:	f001 fe31 	bl	80062cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800466a:	bf00      	nop
 800466c:	3730      	adds	r7, #48	@ 0x30
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}
 8004672:	bf00      	nop
 8004674:	20000178 	.word	0x20000178
 8004678:	19200040 	.word	0x19200040
 800467c:	1d500080 	.word	0x1d500080

08004680 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b09e      	sub	sp, #120	@ 0x78
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004688:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800468c:	2200      	movs	r2, #0
 800468e:	601a      	str	r2, [r3, #0]
 8004690:	605a      	str	r2, [r3, #4]
 8004692:	609a      	str	r2, [r3, #8]
 8004694:	60da      	str	r2, [r3, #12]
 8004696:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004698:	f107 0310 	add.w	r3, r7, #16
 800469c:	2254      	movs	r2, #84	@ 0x54
 800469e:	2100      	movs	r1, #0
 80046a0:	4618      	mov	r0, r3
 80046a2:	f00a ff13 	bl	800f4cc <memset>
  if(adcHandle->Instance==ADC1)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80046ae:	d15e      	bne.n	800476e <HAL_ADC_MspInit+0xee>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80046b0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80046b4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80046b6:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80046ba:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80046bc:	f107 0310 	add.w	r3, r7, #16
 80046c0:	4618      	mov	r0, r3
 80046c2:	f006 fbed 	bl	800aea0 <HAL_RCCEx_PeriphCLKConfig>
 80046c6:	4603      	mov	r3, r0
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d001      	beq.n	80046d0 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80046cc:	f001 fdfe 	bl	80062cc <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80046d0:	4b29      	ldr	r3, [pc, #164]	@ (8004778 <HAL_ADC_MspInit+0xf8>)
 80046d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046d4:	4a28      	ldr	r2, [pc, #160]	@ (8004778 <HAL_ADC_MspInit+0xf8>)
 80046d6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80046da:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80046dc:	4b26      	ldr	r3, [pc, #152]	@ (8004778 <HAL_ADC_MspInit+0xf8>)
 80046de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80046e4:	60fb      	str	r3, [r7, #12]
 80046e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80046e8:	4b23      	ldr	r3, [pc, #140]	@ (8004778 <HAL_ADC_MspInit+0xf8>)
 80046ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046ec:	4a22      	ldr	r2, [pc, #136]	@ (8004778 <HAL_ADC_MspInit+0xf8>)
 80046ee:	f043 0304 	orr.w	r3, r3, #4
 80046f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80046f4:	4b20      	ldr	r3, [pc, #128]	@ (8004778 <HAL_ADC_MspInit+0xf8>)
 80046f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046f8:	f003 0304 	and.w	r3, r3, #4
 80046fc:	60bb      	str	r3, [r7, #8]
 80046fe:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN6
    PC1     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004700:	2303      	movs	r3, #3
 8004702:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004704:	2303      	movs	r3, #3
 8004706:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004708:	2300      	movs	r3, #0
 800470a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800470c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004710:	4619      	mov	r1, r3
 8004712:	481a      	ldr	r0, [pc, #104]	@ (800477c <HAL_ADC_MspInit+0xfc>)
 8004714:	f005 fc18 	bl	8009f48 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8004718:	4b19      	ldr	r3, [pc, #100]	@ (8004780 <HAL_ADC_MspInit+0x100>)
 800471a:	4a1a      	ldr	r2, [pc, #104]	@ (8004784 <HAL_ADC_MspInit+0x104>)
 800471c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800471e:	4b18      	ldr	r3, [pc, #96]	@ (8004780 <HAL_ADC_MspInit+0x100>)
 8004720:	2205      	movs	r2, #5
 8004722:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004724:	4b16      	ldr	r3, [pc, #88]	@ (8004780 <HAL_ADC_MspInit+0x100>)
 8004726:	2200      	movs	r2, #0
 8004728:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800472a:	4b15      	ldr	r3, [pc, #84]	@ (8004780 <HAL_ADC_MspInit+0x100>)
 800472c:	2200      	movs	r2, #0
 800472e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004730:	4b13      	ldr	r3, [pc, #76]	@ (8004780 <HAL_ADC_MspInit+0x100>)
 8004732:	2280      	movs	r2, #128	@ 0x80
 8004734:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004736:	4b12      	ldr	r3, [pc, #72]	@ (8004780 <HAL_ADC_MspInit+0x100>)
 8004738:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800473c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800473e:	4b10      	ldr	r3, [pc, #64]	@ (8004780 <HAL_ADC_MspInit+0x100>)
 8004740:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004744:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004746:	4b0e      	ldr	r3, [pc, #56]	@ (8004780 <HAL_ADC_MspInit+0x100>)
 8004748:	2220      	movs	r2, #32
 800474a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800474c:	4b0c      	ldr	r3, [pc, #48]	@ (8004780 <HAL_ADC_MspInit+0x100>)
 800474e:	2200      	movs	r2, #0
 8004750:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004752:	480b      	ldr	r0, [pc, #44]	@ (8004780 <HAL_ADC_MspInit+0x100>)
 8004754:	f005 f8c6 	bl	80098e4 <HAL_DMA_Init>
 8004758:	4603      	mov	r3, r0
 800475a:	2b00      	cmp	r3, #0
 800475c:	d001      	beq.n	8004762 <HAL_ADC_MspInit+0xe2>
    {
      Error_Handler();
 800475e:	f001 fdb5 	bl	80062cc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	4a06      	ldr	r2, [pc, #24]	@ (8004780 <HAL_ADC_MspInit+0x100>)
 8004766:	655a      	str	r2, [r3, #84]	@ 0x54
 8004768:	4a05      	ldr	r2, [pc, #20]	@ (8004780 <HAL_ADC_MspInit+0x100>)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800476e:	bf00      	nop
 8004770:	3778      	adds	r7, #120	@ 0x78
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
 8004776:	bf00      	nop
 8004778:	40021000 	.word	0x40021000
 800477c:	48000800 	.word	0x48000800
 8004780:	200001e4 	.word	0x200001e4
 8004784:	40020008 	.word	0x40020008

08004788 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b082      	sub	sp, #8
 800478c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800478e:	4b22      	ldr	r3, [pc, #136]	@ (8004818 <MX_DMA_Init+0x90>)
 8004790:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004792:	4a21      	ldr	r2, [pc, #132]	@ (8004818 <MX_DMA_Init+0x90>)
 8004794:	f043 0304 	orr.w	r3, r3, #4
 8004798:	6493      	str	r3, [r2, #72]	@ 0x48
 800479a:	4b1f      	ldr	r3, [pc, #124]	@ (8004818 <MX_DMA_Init+0x90>)
 800479c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800479e:	f003 0304 	and.w	r3, r3, #4
 80047a2:	607b      	str	r3, [r7, #4]
 80047a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80047a6:	4b1c      	ldr	r3, [pc, #112]	@ (8004818 <MX_DMA_Init+0x90>)
 80047a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047aa:	4a1b      	ldr	r2, [pc, #108]	@ (8004818 <MX_DMA_Init+0x90>)
 80047ac:	f043 0301 	orr.w	r3, r3, #1
 80047b0:	6493      	str	r3, [r2, #72]	@ 0x48
 80047b2:	4b19      	ldr	r3, [pc, #100]	@ (8004818 <MX_DMA_Init+0x90>)
 80047b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047b6:	f003 0301 	and.w	r3, r3, #1
 80047ba:	603b      	str	r3, [r7, #0]
 80047bc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80047be:	2200      	movs	r2, #0
 80047c0:	2100      	movs	r1, #0
 80047c2:	200b      	movs	r0, #11
 80047c4:	f005 f859 	bl	800987a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80047c8:	200b      	movs	r0, #11
 80047ca:	f005 f870 	bl	80098ae <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80047ce:	2200      	movs	r2, #0
 80047d0:	2100      	movs	r1, #0
 80047d2:	200c      	movs	r0, #12
 80047d4:	f005 f851 	bl	800987a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80047d8:	200c      	movs	r0, #12
 80047da:	f005 f868 	bl	80098ae <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80047de:	2200      	movs	r2, #0
 80047e0:	2100      	movs	r1, #0
 80047e2:	200d      	movs	r0, #13
 80047e4:	f005 f849 	bl	800987a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80047e8:	200d      	movs	r0, #13
 80047ea:	f005 f860 	bl	80098ae <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80047ee:	2200      	movs	r2, #0
 80047f0:	2100      	movs	r1, #0
 80047f2:	200e      	movs	r0, #14
 80047f4:	f005 f841 	bl	800987a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80047f8:	200e      	movs	r0, #14
 80047fa:	f005 f858 	bl	80098ae <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80047fe:	2200      	movs	r2, #0
 8004800:	2100      	movs	r1, #0
 8004802:	200f      	movs	r0, #15
 8004804:	f005 f839 	bl	800987a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8004808:	200f      	movs	r0, #15
 800480a:	f005 f850 	bl	80098ae <HAL_NVIC_EnableIRQ>

}
 800480e:	bf00      	nop
 8004810:	3708      	adds	r7, #8
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
 8004816:	bf00      	nop
 8004818:	40021000 	.word	0x40021000

0800481c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b08a      	sub	sp, #40	@ 0x28
 8004820:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004822:	f107 0314 	add.w	r3, r7, #20
 8004826:	2200      	movs	r2, #0
 8004828:	601a      	str	r2, [r3, #0]
 800482a:	605a      	str	r2, [r3, #4]
 800482c:	609a      	str	r2, [r3, #8]
 800482e:	60da      	str	r2, [r3, #12]
 8004830:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004832:	4b4e      	ldr	r3, [pc, #312]	@ (800496c <MX_GPIO_Init+0x150>)
 8004834:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004836:	4a4d      	ldr	r2, [pc, #308]	@ (800496c <MX_GPIO_Init+0x150>)
 8004838:	f043 0304 	orr.w	r3, r3, #4
 800483c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800483e:	4b4b      	ldr	r3, [pc, #300]	@ (800496c <MX_GPIO_Init+0x150>)
 8004840:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004842:	f003 0304 	and.w	r3, r3, #4
 8004846:	613b      	str	r3, [r7, #16]
 8004848:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800484a:	4b48      	ldr	r3, [pc, #288]	@ (800496c <MX_GPIO_Init+0x150>)
 800484c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800484e:	4a47      	ldr	r2, [pc, #284]	@ (800496c <MX_GPIO_Init+0x150>)
 8004850:	f043 0320 	orr.w	r3, r3, #32
 8004854:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004856:	4b45      	ldr	r3, [pc, #276]	@ (800496c <MX_GPIO_Init+0x150>)
 8004858:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800485a:	f003 0320 	and.w	r3, r3, #32
 800485e:	60fb      	str	r3, [r7, #12]
 8004860:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004862:	4b42      	ldr	r3, [pc, #264]	@ (800496c <MX_GPIO_Init+0x150>)
 8004864:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004866:	4a41      	ldr	r2, [pc, #260]	@ (800496c <MX_GPIO_Init+0x150>)
 8004868:	f043 0301 	orr.w	r3, r3, #1
 800486c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800486e:	4b3f      	ldr	r3, [pc, #252]	@ (800496c <MX_GPIO_Init+0x150>)
 8004870:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004872:	f003 0301 	and.w	r3, r3, #1
 8004876:	60bb      	str	r3, [r7, #8]
 8004878:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800487a:	4b3c      	ldr	r3, [pc, #240]	@ (800496c <MX_GPIO_Init+0x150>)
 800487c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800487e:	4a3b      	ldr	r2, [pc, #236]	@ (800496c <MX_GPIO_Init+0x150>)
 8004880:	f043 0302 	orr.w	r3, r3, #2
 8004884:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004886:	4b39      	ldr	r3, [pc, #228]	@ (800496c <MX_GPIO_Init+0x150>)
 8004888:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800488a:	f003 0302 	and.w	r3, r3, #2
 800488e:	607b      	str	r3, [r7, #4]
 8004890:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9|PILOT_Pin, GPIO_PIN_RESET);
 8004892:	2200      	movs	r2, #0
 8004894:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 8004898:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800489c:	f005 fcee 	bl	800a27c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 80048a0:	2200      	movs	r2, #0
 80048a2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80048a6:	4832      	ldr	r0, [pc, #200]	@ (8004970 <MX_GPIO_Init+0x154>)
 80048a8:	f005 fce8 	bl	800a27c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80048ac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80048b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80048b2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80048b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048b8:	2300      	movs	r3, #0
 80048ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80048bc:	f107 0314 	add.w	r3, r7, #20
 80048c0:	4619      	mov	r1, r3
 80048c2:	482b      	ldr	r0, [pc, #172]	@ (8004970 <MX_GPIO_Init+0x154>)
 80048c4:	f005 fb40 	bl	8009f48 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA9 PILOT_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_9|PILOT_Pin;
 80048c8:	f44f 63c4 	mov.w	r3, #1568	@ 0x620
 80048cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80048ce:	2301      	movs	r3, #1
 80048d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048d2:	2300      	movs	r3, #0
 80048d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048d6:	2300      	movs	r3, #0
 80048d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048da:	f107 0314 	add.w	r3, r7, #20
 80048de:	4619      	mov	r1, r3
 80048e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80048e4:	f005 fb30 	bl	8009f48 <HAL_GPIO_Init>

  /*Configure GPIO pins : UPPER_PHOTO_Pin LOWER_PHOTO_Pin EMER_Pin PROX_Pin
                           J1_Pin */
  GPIO_InitStruct.Pin = UPPER_PHOTO_Pin|LOWER_PHOTO_Pin|EMER_Pin|PROX_Pin
 80048e8:	f241 03b1 	movw	r3, #4273	@ 0x10b1
 80048ec:	617b      	str	r3, [r7, #20]
                          |J1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80048ee:	2300      	movs	r3, #0
 80048f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048f2:	2300      	movs	r3, #0
 80048f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048f6:	f107 0314 	add.w	r3, r7, #20
 80048fa:	4619      	mov	r1, r3
 80048fc:	481d      	ldr	r0, [pc, #116]	@ (8004974 <MX_GPIO_Init+0x158>)
 80048fe:	f005 fb23 	bl	8009f48 <HAL_GPIO_Init>

  /*Configure GPIO pins : LOWER_LIM_Pin UPPER_LIM_Pin */
  GPIO_InitStruct.Pin = LOWER_LIM_Pin|UPPER_LIM_Pin;
 8004902:	2306      	movs	r3, #6
 8004904:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004906:	2300      	movs	r3, #0
 8004908:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800490a:	2302      	movs	r3, #2
 800490c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800490e:	f107 0314 	add.w	r3, r7, #20
 8004912:	4619      	mov	r1, r3
 8004914:	4817      	ldr	r0, [pc, #92]	@ (8004974 <MX_GPIO_Init+0x158>)
 8004916:	f005 fb17 	bl	8009f48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800491a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800491e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004920:	2301      	movs	r3, #1
 8004922:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004924:	2300      	movs	r3, #0
 8004926:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004928:	2300      	movs	r3, #0
 800492a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800492c:	f107 0314 	add.w	r3, r7, #20
 8004930:	4619      	mov	r1, r3
 8004932:	480f      	ldr	r0, [pc, #60]	@ (8004970 <MX_GPIO_Init+0x154>)
 8004934:	f005 fb08 	bl	8009f48 <HAL_GPIO_Init>

  /*Configure GPIO pins : J3_Pin J4_Pin J2_Pin */
  GPIO_InitStruct.Pin = J3_Pin|J4_Pin|J2_Pin;
 8004938:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800493c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800493e:	2300      	movs	r3, #0
 8004940:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004942:	2300      	movs	r3, #0
 8004944:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004946:	f107 0314 	add.w	r3, r7, #20
 800494a:	4619      	mov	r1, r3
 800494c:	4808      	ldr	r0, [pc, #32]	@ (8004970 <MX_GPIO_Init+0x154>)
 800494e:	f005 fafb 	bl	8009f48 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8004952:	2200      	movs	r2, #0
 8004954:	2100      	movs	r1, #0
 8004956:	2028      	movs	r0, #40	@ 0x28
 8004958:	f004 ff8f 	bl	800987a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800495c:	2028      	movs	r0, #40	@ 0x28
 800495e:	f004 ffa6 	bl	80098ae <HAL_NVIC_EnableIRQ>

}
 8004962:	bf00      	nop
 8004964:	3728      	adds	r7, #40	@ 0x28
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}
 800496a:	bf00      	nop
 800496c:	40021000 	.word	0x40021000
 8004970:	48000800 	.word	0x48000800
 8004974:	48000400 	.word	0x48000400

08004978 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8004978:	b580      	push	{r7, lr}
 800497a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800497c:	f003 f9b9 	bl	8007cf2 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8004980:	f000 f8a8 	bl	8004ad4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8004984:	f7ff ff4a 	bl	800481c <MX_GPIO_Init>
	MX_DMA_Init();
 8004988:	f7ff fefe 	bl	8004788 <MX_DMA_Init>
	MX_ADC1_Init();
 800498c:	f7ff fdf0 	bl	8004570 <MX_ADC1_Init>
	MX_TIM2_Init();
 8004990:	f002 fbc4 	bl	800711c <MX_TIM2_Init>
	MX_TIM3_Init();
 8004994:	f002 fc10 	bl	80071b8 <MX_TIM3_Init>
	MX_TIM4_Init();
 8004998:	f002 fc64 	bl	8007264 <MX_TIM4_Init>
	MX_TIM5_Init();
 800499c:	f002 fcb8 	bl	8007310 <MX_TIM5_Init>
	MX_TIM8_Init();
 80049a0:	f002 fd0c 	bl	80073bc <MX_TIM8_Init>
	MX_USART2_UART_Init();
 80049a4:	f002 ffce 	bl	8007944 <MX_USART2_UART_Init>
	MX_TIM16_Init();
 80049a8:	f002 fdc6 	bl	8007538 <MX_TIM16_Init>
	MX_TIM1_Init();
 80049ac:	f002 fb22 	bl	8006ff4 <MX_TIM1_Init>
	MX_LPUART1_UART_Init();
 80049b0:	f002 ff7e 	bl	80078b0 <MX_LPUART1_UART_Init>
	/* USER CODE BEGIN 2 */
	plotter_begin();
 80049b4:	f001 fc90 	bl	80062d8 <plotter_begin>

	// Initialize position setpoints to current position to prevent startup errors
	prismatic_axis.position = prismatic_encoder.mm;
 80049b8:	4b3a      	ldr	r3, [pc, #232]	@ (8004aa4 <main+0x12c>)
 80049ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049bc:	4a3a      	ldr	r2, [pc, #232]	@ (8004aa8 <main+0x130>)
 80049be:	6013      	str	r3, [r2, #0]
	revolute_axis.position = revolute_encoder.rads;
 80049c0:	4b3a      	ldr	r3, [pc, #232]	@ (8004aac <main+0x134>)
 80049c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049c4:	4a3a      	ldr	r2, [pc, #232]	@ (8004ab0 <main+0x138>)
 80049c6:	6013      	str	r3, [r2, #0]

	// Reset all error terms and flags
	prismatic_axis.pos_error = 0.0f;
 80049c8:	4b37      	ldr	r3, [pc, #220]	@ (8004aa8 <main+0x130>)
 80049ca:	f04f 0200 	mov.w	r2, #0
 80049ce:	615a      	str	r2, [r3, #20]
	prismatic_axis.vel_error = 0.0f;
 80049d0:	4b35      	ldr	r3, [pc, #212]	@ (8004aa8 <main+0x130>)
 80049d2:	f04f 0200 	mov.w	r2, #0
 80049d6:	619a      	str	r2, [r3, #24]
	revolute_axis.pos_error = 0.0f;
 80049d8:	4b35      	ldr	r3, [pc, #212]	@ (8004ab0 <main+0x138>)
 80049da:	f04f 0200 	mov.w	r2, #0
 80049de:	615a      	str	r2, [r3, #20]
	revolute_axis.vel_error = 0.0f;
 80049e0:	4b33      	ldr	r3, [pc, #204]	@ (8004ab0 <main+0x138>)
 80049e2:	f04f 0200 	mov.w	r2, #0
 80049e6:	619a      	str	r2, [r3, #24]
	prismatic_axis.trajectory_active = false;
 80049e8:	4b2f      	ldr	r3, [pc, #188]	@ (8004aa8 <main+0x130>)
 80049ea:	2200      	movs	r2, #0
 80049ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	revolute_axis.trajectory_active = false;
 80049f0:	4b2f      	ldr	r3, [pc, #188]	@ (8004ab0 <main+0x138>)
 80049f2:	2200      	movs	r2, #0
 80049f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		if (b1 && !button_pressed_previous && !revolute_axis.trajectory_active
 80049f8:	4b2e      	ldr	r3, [pc, #184]	@ (8004ab4 <main+0x13c>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d037      	beq.n	8004a70 <main+0xf8>
 8004a00:	4b2d      	ldr	r3, [pc, #180]	@ (8004ab8 <main+0x140>)
 8004a02:	781b      	ldrb	r3, [r3, #0]
 8004a04:	f083 0301 	eor.w	r3, r3, #1
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d030      	beq.n	8004a70 <main+0xf8>
 8004a0e:	4b28      	ldr	r3, [pc, #160]	@ (8004ab0 <main+0x138>)
 8004a10:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004a14:	f083 0301 	eor.w	r3, r3, #1
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d028      	beq.n	8004a70 <main+0xf8>
				&& !prismatic_axis.trajectory_active) {
 8004a1e:	4b22      	ldr	r3, [pc, #136]	@ (8004aa8 <main+0x130>)
 8004a20:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004a24:	f083 0301 	eor.w	r3, r3, #1
 8004a28:	b2db      	uxtb	r3, r3
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d020      	beq.n	8004a70 <main+0xf8>
			start_combined_trajectory(
 8004a2e:	4b23      	ldr	r3, [pc, #140]	@ (8004abc <main+0x144>)
 8004a30:	781b      	ldrb	r3, [r3, #0]
					sequence_pris_points[trajectory_sequence_index],
 8004a32:	4a23      	ldr	r2, [pc, #140]	@ (8004ac0 <main+0x148>)
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	4413      	add	r3, r2
 8004a38:	edd3 7a00 	vldr	s15, [r3]
			start_combined_trajectory(
 8004a3c:	4b1f      	ldr	r3, [pc, #124]	@ (8004abc <main+0x144>)
 8004a3e:	781b      	ldrb	r3, [r3, #0]
					sequence_rev_points[trajectory_sequence_index]);
 8004a40:	4a20      	ldr	r2, [pc, #128]	@ (8004ac4 <main+0x14c>)
 8004a42:	009b      	lsls	r3, r3, #2
 8004a44:	4413      	add	r3, r2
 8004a46:	ed93 7a00 	vldr	s14, [r3]
			start_combined_trajectory(
 8004a4a:	eef0 0a47 	vmov.f32	s1, s14
 8004a4e:	eeb0 0a67 	vmov.f32	s0, s15
 8004a52:	f000 f975 	bl	8004d40 <start_combined_trajectory>
			trajectory_sequence_index = (trajectory_sequence_index + 1)
 8004a56:	4b19      	ldr	r3, [pc, #100]	@ (8004abc <main+0x144>)
 8004a58:	781b      	ldrb	r3, [r3, #0]
 8004a5a:	3301      	adds	r3, #1
					% SEQUENCE_MAX_POINTS;
 8004a5c:	425a      	negs	r2, r3
 8004a5e:	f003 0303 	and.w	r3, r3, #3
 8004a62:	f002 0203 	and.w	r2, r2, #3
 8004a66:	bf58      	it	pl
 8004a68:	4253      	negpl	r3, r2
			trajectory_sequence_index = (trajectory_sequence_index + 1)
 8004a6a:	b2da      	uxtb	r2, r3
 8004a6c:	4b13      	ldr	r3, [pc, #76]	@ (8004abc <main+0x144>)
 8004a6e:	701a      	strb	r2, [r3, #0]
		}
		button_pressed_previous = b1;
 8004a70:	4b10      	ldr	r3, [pc, #64]	@ (8004ab4 <main+0x13c>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	bf14      	ite	ne
 8004a78:	2301      	movne	r3, #1
 8004a7a:	2300      	moveq	r3, #0
 8004a7c:	b2da      	uxtb	r2, r3
 8004a7e:	4b0e      	ldr	r3, [pc, #56]	@ (8004ab8 <main+0x140>)
 8004a80:	701a      	strb	r2, [r3, #0]

		// Process button 2 - start homing procedure
		if (b2 && homing_state == HOMING_IDLE) {
 8004a82:	4b11      	ldr	r3, [pc, #68]	@ (8004ac8 <main+0x150>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d005      	beq.n	8004a96 <main+0x11e>
 8004a8a:	4b10      	ldr	r3, [pc, #64]	@ (8004acc <main+0x154>)
 8004a8c:	781b      	ldrb	r3, [r3, #0]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d101      	bne.n	8004a96 <main+0x11e>
			start_homing();
 8004a92:	f000 fa3d 	bl	8004f10 <start_homing>
		}

		// Process button 3 - enter manual control mode
		if (b3) {
 8004a96:	4b0e      	ldr	r3, [pc, #56]	@ (8004ad0 <main+0x158>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d0ac      	beq.n	80049f8 <main+0x80>
			manual_control_mode();
 8004a9e:	f001 fa67 	bl	8005f70 <manual_control_mode>
		if (b1 && !button_pressed_previous && !revolute_axis.trajectory_active
 8004aa2:	e7a9      	b.n	80049f8 <main+0x80>
 8004aa4:	200003e8 	.word	0x200003e8
 8004aa8:	20000294 	.word	0x20000294
 8004aac:	20000444 	.word	0x20000444
 8004ab0:	200002d8 	.word	0x200002d8
 8004ab4:	20001864 	.word	0x20001864
 8004ab8:	2000032e 	.word	0x2000032e
 8004abc:	2000032d 	.word	0x2000032d
 8004ac0:	08011398 	.word	0x08011398
 8004ac4:	080113a8 	.word	0x080113a8
 8004ac8:	20001868 	.word	0x20001868
 8004acc:	2000032c 	.word	0x2000032c
 8004ad0:	2000186c 	.word	0x2000186c

08004ad4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b094      	sub	sp, #80	@ 0x50
 8004ad8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8004ada:	f107 0318 	add.w	r3, r7, #24
 8004ade:	2238      	movs	r2, #56	@ 0x38
 8004ae0:	2100      	movs	r1, #0
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f00a fcf2 	bl	800f4cc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8004ae8:	1d3b      	adds	r3, r7, #4
 8004aea:	2200      	movs	r2, #0
 8004aec:	601a      	str	r2, [r3, #0]
 8004aee:	605a      	str	r2, [r3, #4]
 8004af0:	609a      	str	r2, [r3, #8]
 8004af2:	60da      	str	r2, [r3, #12]
 8004af4:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8004af6:	2000      	movs	r0, #0
 8004af8:	f005 fbf0 	bl	800a2dc <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004afc:	2302      	movs	r3, #2
 8004afe:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004b00:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004b04:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004b06:	2340      	movs	r3, #64	@ 0x40
 8004b08:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004b0a:	2302      	movs	r3, #2
 8004b0c:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004b0e:	2302      	movs	r3, #2
 8004b10:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8004b12:	2304      	movs	r3, #4
 8004b14:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 8004b16:	2355      	movs	r3, #85	@ 0x55
 8004b18:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004b1a:	2302      	movs	r3, #2
 8004b1c:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004b1e:	2302      	movs	r3, #2
 8004b20:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004b22:	2302      	movs	r3, #2
 8004b24:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8004b26:	f107 0318 	add.w	r3, r7, #24
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f005 fc8a 	bl	800a444 <HAL_RCC_OscConfig>
 8004b30:	4603      	mov	r3, r0
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d001      	beq.n	8004b3a <SystemClock_Config+0x66>
		Error_Handler();
 8004b36:	f001 fbc9 	bl	80062cc <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8004b3a:	230f      	movs	r3, #15
 8004b3c:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004b3e:	2303      	movs	r3, #3
 8004b40:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004b42:	2300      	movs	r3, #0
 8004b44:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004b46:	2300      	movs	r3, #0
 8004b48:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8004b4e:	1d3b      	adds	r3, r7, #4
 8004b50:	2104      	movs	r1, #4
 8004b52:	4618      	mov	r0, r3
 8004b54:	f005 ff88 	bl	800aa68 <HAL_RCC_ClockConfig>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d001      	beq.n	8004b62 <SystemClock_Config+0x8e>
		Error_Handler();
 8004b5e:	f001 fbb5 	bl	80062cc <Error_Handler>
	}
}
 8004b62:	bf00      	nop
 8004b64:	3750      	adds	r7, #80	@ 0x50
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}
	...

08004b6c <normalize_angle>:
/* USER CODE BEGIN 4 *//**
 * @brief Normalizes an angle to the range [0, 2π]
 * @param angle_rad Angle in radians
 * @return Normalized angle in radians
 */
float normalize_angle(float angle_rad) {
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b084      	sub	sp, #16
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	ed87 0a01 	vstr	s0, [r7, #4]
	float result = fmodf(angle_rad, 2.0f * PI);
 8004b76:	eddf 0a0f 	vldr	s1, [pc, #60]	@ 8004bb4 <normalize_angle+0x48>
 8004b7a:	ed97 0a01 	vldr	s0, [r7, #4]
 8004b7e:	f00a fd9f 	bl	800f6c0 <fmodf>
 8004b82:	ed87 0a03 	vstr	s0, [r7, #12]
	if (result < 0.0f) {
 8004b86:	edd7 7a03 	vldr	s15, [r7, #12]
 8004b8a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004b8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b92:	d507      	bpl.n	8004ba4 <normalize_angle+0x38>
		result += 2.0f * PI;
 8004b94:	edd7 7a03 	vldr	s15, [r7, #12]
 8004b98:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8004bb4 <normalize_angle+0x48>
 8004b9c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004ba0:	edc7 7a03 	vstr	s15, [r7, #12]
	}
	return result;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	ee07 3a90 	vmov	s15, r3
}
 8004baa:	eeb0 0a67 	vmov.f32	s0, s15
 8004bae:	3710      	adds	r7, #16
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}
 8004bb4:	40c90fdb 	.word	0x40c90fdb

08004bb8 <calculate_movement_deg>:
 * @brief Calculates shortest angular movement in degrees
 * @param current_deg Current angle in degrees
 * @param target_deg Target angle in degrees
 * @return Movement required in degrees
 */
float calculate_movement_deg(float current_deg, float target_deg) {
 8004bb8:	b480      	push	{r7}
 8004bba:	b085      	sub	sp, #20
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	ed87 0a01 	vstr	s0, [r7, #4]
 8004bc2:	edc7 0a00 	vstr	s1, [r7]
	float movement = 0.0f;
 8004bc6:	f04f 0300 	mov.w	r3, #0
 8004bca:	60fb      	str	r3, [r7, #12]

	// If both angles are on the same side of 180°
	if ((current_deg < 180.0f && target_deg < 180.0f)
 8004bcc:	edd7 7a01 	vldr	s15, [r7, #4]
 8004bd0:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8004d34 <calculate_movement_deg+0x17c>
 8004bd4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004bd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bdc:	d508      	bpl.n	8004bf0 <calculate_movement_deg+0x38>
 8004bde:	edd7 7a00 	vldr	s15, [r7]
 8004be2:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 8004d34 <calculate_movement_deg+0x17c>
 8004be6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004bea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bee:	d411      	bmi.n	8004c14 <calculate_movement_deg+0x5c>
			|| (current_deg >= 180.0f && target_deg >= 180.0f)) {
 8004bf0:	edd7 7a01 	vldr	s15, [r7, #4]
 8004bf4:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 8004d34 <calculate_movement_deg+0x17c>
 8004bf8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004bfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c00:	db33      	blt.n	8004c6a <calculate_movement_deg+0xb2>
 8004c02:	edd7 7a00 	vldr	s15, [r7]
 8004c06:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8004d34 <calculate_movement_deg+0x17c>
 8004c0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c12:	db2a      	blt.n	8004c6a <calculate_movement_deg+0xb2>
		// Simple case - take shortest path
		movement = target_deg - current_deg;
 8004c14:	ed97 7a00 	vldr	s14, [r7]
 8004c18:	edd7 7a01 	vldr	s15, [r7, #4]
 8004c1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c20:	edc7 7a03 	vstr	s15, [r7, #12]

		// Ensure shortest path
		if (movement > 180.0f)
 8004c24:	edd7 7a03 	vldr	s15, [r7, #12]
 8004c28:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8004d34 <calculate_movement_deg+0x17c>
 8004c2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c34:	dd07      	ble.n	8004c46 <calculate_movement_deg+0x8e>
			movement -= 360.0f;
 8004c36:	edd7 7a03 	vldr	s15, [r7, #12]
 8004c3a:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8004d38 <calculate_movement_deg+0x180>
 8004c3e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004c42:	edc7 7a03 	vstr	s15, [r7, #12]
		if (movement < -180.0f)
 8004c46:	edd7 7a03 	vldr	s15, [r7, #12]
 8004c4a:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 8004d3c <calculate_movement_deg+0x184>
 8004c4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c56:	d562      	bpl.n	8004d1e <calculate_movement_deg+0x166>
			movement += 360.0f;
 8004c58:	edd7 7a03 	vldr	s15, [r7, #12]
 8004c5c:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8004d38 <calculate_movement_deg+0x180>
 8004c60:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004c64:	edc7 7a03 	vstr	s15, [r7, #12]
		if (movement < -180.0f)
 8004c68:	e059      	b.n	8004d1e <calculate_movement_deg+0x166>
	}
	// If we need to cross the 180° boundary
	else {
		// Explicitly determine direction to avoid crossing 180°
		if (current_deg < 180.0f) {
 8004c6a:	edd7 7a01 	vldr	s15, [r7, #4]
 8004c6e:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8004d34 <calculate_movement_deg+0x17c>
 8004c72:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c7a:	d52a      	bpl.n	8004cd2 <calculate_movement_deg+0x11a>
			// Current < 180, target > 180
			// Go counterclockwise through 0°
			if (current_deg < target_deg - 180.0f) {
 8004c7c:	edd7 7a00 	vldr	s15, [r7]
 8004c80:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8004d34 <calculate_movement_deg+0x17c>
 8004c84:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004c88:	ed97 7a01 	vldr	s14, [r7, #4]
 8004c8c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004c90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c94:	d50e      	bpl.n	8004cb4 <calculate_movement_deg+0xfc>
				movement = -(current_deg + (360.0f - target_deg)); // Negative = clockwise
 8004c96:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8004d38 <calculate_movement_deg+0x180>
 8004c9a:	edd7 7a00 	vldr	s15, [r7]
 8004c9e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004ca2:	edd7 7a01 	vldr	s15, [r7, #4]
 8004ca6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004caa:	eef1 7a67 	vneg.f32	s15, s15
 8004cae:	edc7 7a03 	vstr	s15, [r7, #12]
 8004cb2:	e034      	b.n	8004d1e <calculate_movement_deg+0x166>
			} else {
				movement = -(current_deg - target_deg + 360.0f); // Negative = clockwise
 8004cb4:	ed97 7a01 	vldr	s14, [r7, #4]
 8004cb8:	edd7 7a00 	vldr	s15, [r7]
 8004cbc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004cc0:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8004d38 <calculate_movement_deg+0x180>
 8004cc4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004cc8:	eef1 7a67 	vneg.f32	s15, s15
 8004ccc:	edc7 7a03 	vstr	s15, [r7, #12]
 8004cd0:	e025      	b.n	8004d1e <calculate_movement_deg+0x166>
			}
		} else {
			// Current > 180, target < 180
			// Go clockwise through 0°
			if (target_deg < current_deg - 180.0f) {
 8004cd2:	edd7 7a01 	vldr	s15, [r7, #4]
 8004cd6:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8004d34 <calculate_movement_deg+0x17c>
 8004cda:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004cde:	ed97 7a00 	vldr	s14, [r7]
 8004ce2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004ce6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cea:	d50c      	bpl.n	8004d06 <calculate_movement_deg+0x14e>
				movement = 360.0f - current_deg + target_deg; // Positive = counterclockwise
 8004cec:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8004d38 <calculate_movement_deg+0x180>
 8004cf0:	edd7 7a01 	vldr	s15, [r7, #4]
 8004cf4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004cf8:	ed97 7a00 	vldr	s14, [r7]
 8004cfc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d00:	edc7 7a03 	vstr	s15, [r7, #12]
 8004d04:	e00b      	b.n	8004d1e <calculate_movement_deg+0x166>
			} else {
				movement = target_deg - current_deg + 360.0f; // Positive = counterclockwise
 8004d06:	ed97 7a00 	vldr	s14, [r7]
 8004d0a:	edd7 7a01 	vldr	s15, [r7, #4]
 8004d0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004d12:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8004d38 <calculate_movement_deg+0x180>
 8004d16:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004d1a:	edc7 7a03 	vstr	s15, [r7, #12]
			}
		}
	}

	return movement;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	ee07 3a90 	vmov	s15, r3
}
 8004d24:	eeb0 0a67 	vmov.f32	s0, s15
 8004d28:	3714      	adds	r7, #20
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr
 8004d32:	bf00      	nop
 8004d34:	43340000 	.word	0x43340000
 8004d38:	43b40000 	.word	0x43b40000
 8004d3c:	c3340000 	.word	0xc3340000

08004d40 <start_combined_trajectory>:
 * @brief Starts a combined trajectory for both prismatic and revolute axes
 * @param prismatic_target_mm Target position for prismatic axis in mm
 * @param revolute_target_deg Target position for revolute axis in degrees
 */
void start_combined_trajectory(float prismatic_target_mm,
		float revolute_target_deg) {
 8004d40:	b590      	push	{r4, r7, lr}
 8004d42:	ed2d 8b02 	vpush	{d8}
 8004d46:	b08d      	sub	sp, #52	@ 0x34
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	ed87 0a01 	vstr	s0, [r7, #4]
 8004d4e:	edc7 0a00 	vstr	s1, [r7]
	// Get current positions
	float pris_current = prismatic_encoder.mm;
 8004d52:	4b60      	ldr	r3, [pc, #384]	@ (8004ed4 <start_combined_trajectory+0x194>)
 8004d54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d56:	62fb      	str	r3, [r7, #44]	@ 0x2c
	float rev_current = revolute_encoder.rads;
 8004d58:	4b5f      	ldr	r3, [pc, #380]	@ (8004ed8 <start_combined_trajectory+0x198>)
 8004d5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d5c:	62bb      	str	r3, [r7, #40]	@ 0x28

	// Reset trajectory evaluation structs
	prisEva.t = 0.0f;
 8004d5e:	4b5f      	ldr	r3, [pc, #380]	@ (8004edc <start_combined_trajectory+0x19c>)
 8004d60:	f04f 0200 	mov.w	r2, #0
 8004d64:	60da      	str	r2, [r3, #12]
	prisEva.isFinised = false;
 8004d66:	4b5d      	ldr	r3, [pc, #372]	@ (8004edc <start_combined_trajectory+0x19c>)
 8004d68:	2200      	movs	r2, #0
 8004d6a:	741a      	strb	r2, [r3, #16]
	revEva.t = 0.0f;
 8004d6c:	4b5c      	ldr	r3, [pc, #368]	@ (8004ee0 <start_combined_trajectory+0x1a0>)
 8004d6e:	f04f 0200 	mov.w	r2, #0
 8004d72:	60da      	str	r2, [r3, #12]
	revEva.isFinised = false;
 8004d74:	4b5a      	ldr	r3, [pc, #360]	@ (8004ee0 <start_combined_trajectory+0x1a0>)
 8004d76:	2200      	movs	r2, #0
 8004d78:	741a      	strb	r2, [r3, #16]

	// Save initial positions
	prismatic_axis.initial_pos = pris_current;
 8004d7a:	4a5a      	ldr	r2, [pc, #360]	@ (8004ee4 <start_combined_trajectory+0x1a4>)
 8004d7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d7e:	60d3      	str	r3, [r2, #12]
	revolute_axis.initial_pos = rev_current;
 8004d80:	4a59      	ldr	r2, [pc, #356]	@ (8004ee8 <start_combined_trajectory+0x1a8>)
 8004d82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d84:	60d3      	str	r3, [r2, #12]

	// For prismatic axis - direct target with bounds checking
	prismatic_axis.target_pos = fminf(
 8004d86:	eddf 0a59 	vldr	s1, [pc, #356]	@ 8004eec <start_combined_trajectory+0x1ac>
 8004d8a:	ed97 0a01 	vldr	s0, [r7, #4]
 8004d8e:	f00a fd5f 	bl	800f850 <fmaxf>
 8004d92:	eef0 7a40 	vmov.f32	s15, s0
 8004d96:	eddf 0a56 	vldr	s1, [pc, #344]	@ 8004ef0 <start_combined_trajectory+0x1b0>
 8004d9a:	eeb0 0a67 	vmov.f32	s0, s15
 8004d9e:	f00a fd74 	bl	800f88a <fminf>
 8004da2:	eef0 7a40 	vmov.f32	s15, s0
 8004da6:	4b4f      	ldr	r3, [pc, #316]	@ (8004ee4 <start_combined_trajectory+0x1a4>)
 8004da8:	edc3 7a04 	vstr	s15, [r3, #16]
			fmaxf(prismatic_target_mm, PRISMATIC_MIN_POS), PRISMATIC_MAX_POS);

	// For revolute axis - handle path planning
	// Normalize current position to [0, 2π]
	float normalized_current = normalize_angle(rev_current);
 8004dac:	ed97 0a0a 	vldr	s0, [r7, #40]	@ 0x28
 8004db0:	f7ff fedc 	bl	8004b6c <normalize_angle>
 8004db4:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24

	// Convert target to radians
	float target_radians = UnitConverter_angle(&converter_system,
 8004db8:	220f      	movs	r2, #15
 8004dba:	210e      	movs	r1, #14
 8004dbc:	ed97 0a00 	vldr	s0, [r7]
 8004dc0:	484c      	ldr	r0, [pc, #304]	@ (8004ef4 <start_combined_trajectory+0x1b4>)
 8004dc2:	f7ff fbab 	bl	800451c <UnitConverter_angle>
 8004dc6:	ed87 0a08 	vstr	s0, [r7, #32]
			revolute_target_deg, UNIT_DEGREE, UNIT_RADIAN);

	// Normalize target to [0, 2π]
	float normalized_target = normalize_angle(target_radians);
 8004dca:	ed97 0a08 	vldr	s0, [r7, #32]
 8004dce:	f7ff fecd 	bl	8004b6c <normalize_angle>
 8004dd2:	ed87 0a07 	vstr	s0, [r7, #28]

	// Convert to degrees for movement calculation
	float current_deg = normalized_current * 180.0f / PI;
 8004dd6:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004dda:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8004ef8 <start_combined_trajectory+0x1b8>
 8004dde:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004de2:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8004efc <start_combined_trajectory+0x1bc>
 8004de6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004dea:	edc7 7a06 	vstr	s15, [r7, #24]
	float target_deg = revolute_target_deg;
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	617b      	str	r3, [r7, #20]

	// Calculate movement in degrees
	float movement_deg = calculate_movement_deg(current_deg, target_deg);
 8004df2:	edd7 0a05 	vldr	s1, [r7, #20]
 8004df6:	ed97 0a06 	vldr	s0, [r7, #24]
 8004dfa:	f7ff fedd 	bl	8004bb8 <calculate_movement_deg>
 8004dfe:	ed87 0a04 	vstr	s0, [r7, #16]

	// Convert to radians and apply to absolute position
	float movement_rad = movement_deg * PI / 180.0f;
 8004e02:	edd7 7a04 	vldr	s15, [r7, #16]
 8004e06:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 8004efc <start_combined_trajectory+0x1bc>
 8004e0a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004e0e:	eddf 6a3a 	vldr	s13, [pc, #232]	@ 8004ef8 <start_combined_trajectory+0x1b8>
 8004e12:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004e16:	edc7 7a03 	vstr	s15, [r7, #12]
	revolute_axis.target_pos = revolute_axis.initial_pos + movement_rad;
 8004e1a:	4b33      	ldr	r3, [pc, #204]	@ (8004ee8 <start_combined_trajectory+0x1a8>)
 8004e1c:	ed93 7a03 	vldr	s14, [r3, #12]
 8004e20:	edd7 7a03 	vldr	s15, [r7, #12]
 8004e24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e28:	4b2f      	ldr	r3, [pc, #188]	@ (8004ee8 <start_combined_trajectory+0x1a8>)
 8004e2a:	edc3 7a04 	vstr	s15, [r3, #16]

	// Generate trajectories
	Trapezoidal_Generator(&prisGen, prismatic_axis.initial_pos,
 8004e2e:	4b2d      	ldr	r3, [pc, #180]	@ (8004ee4 <start_combined_trajectory+0x1a4>)
 8004e30:	ed93 8a03 	vldr	s16, [r3, #12]
 8004e34:	4b2b      	ldr	r3, [pc, #172]	@ (8004ee4 <start_combined_trajectory+0x1a4>)
 8004e36:	edd3 8a04 	vldr	s17, [r3, #16]
			prismatic_axis.target_pos, ZGX45RGG_400RPM_Constant.sd_max,
 8004e3a:	4b31      	ldr	r3, [pc, #196]	@ (8004f00 <start_combined_trajectory+0x1c0>)
 8004e3c:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
	Trapezoidal_Generator(&prisGen, prismatic_axis.initial_pos,
 8004e40:	4610      	mov	r0, r2
 8004e42:	4619      	mov	r1, r3
 8004e44:	f7fb fe86 	bl	8000b54 <__aeabi_d2f>
 8004e48:	4604      	mov	r4, r0
			ZGX45RGG_400RPM_Constant.sdd_max);
 8004e4a:	4b2d      	ldr	r3, [pc, #180]	@ (8004f00 <start_combined_trajectory+0x1c0>)
 8004e4c:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
	Trapezoidal_Generator(&prisGen, prismatic_axis.initial_pos,
 8004e50:	4610      	mov	r0, r2
 8004e52:	4619      	mov	r1, r3
 8004e54:	f7fb fe7e 	bl	8000b54 <__aeabi_d2f>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	ee01 3a90 	vmov	s3, r3
 8004e5e:	ee01 4a10 	vmov	s2, r4
 8004e62:	eef0 0a68 	vmov.f32	s1, s17
 8004e66:	eeb0 0a48 	vmov.f32	s0, s16
 8004e6a:	4826      	ldr	r0, [pc, #152]	@ (8004f04 <start_combined_trajectory+0x1c4>)
 8004e6c:	f7fe fefc 	bl	8003c68 <Trapezoidal_Generator>

	Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 8004e70:	4b1d      	ldr	r3, [pc, #116]	@ (8004ee8 <start_combined_trajectory+0x1a8>)
 8004e72:	ed93 8a03 	vldr	s16, [r3, #12]
 8004e76:	4b1c      	ldr	r3, [pc, #112]	@ (8004ee8 <start_combined_trajectory+0x1a8>)
 8004e78:	edd3 8a04 	vldr	s17, [r3, #16]
			revolute_axis.target_pos, ZGX45RGG_150RPM_Constant.qd_max,
 8004e7c:	4b22      	ldr	r3, [pc, #136]	@ (8004f08 <start_combined_trajectory+0x1c8>)
 8004e7e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 8004e82:	4610      	mov	r0, r2
 8004e84:	4619      	mov	r1, r3
 8004e86:	f7fb fe65 	bl	8000b54 <__aeabi_d2f>
 8004e8a:	4604      	mov	r4, r0
			ZGX45RGG_150RPM_Constant.qdd_max);
 8004e8c:	4b1e      	ldr	r3, [pc, #120]	@ (8004f08 <start_combined_trajectory+0x1c8>)
 8004e8e:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
	Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 8004e92:	4610      	mov	r0, r2
 8004e94:	4619      	mov	r1, r3
 8004e96:	f7fb fe5d 	bl	8000b54 <__aeabi_d2f>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	ee01 3a90 	vmov	s3, r3
 8004ea0:	ee01 4a10 	vmov	s2, r4
 8004ea4:	eef0 0a68 	vmov.f32	s1, s17
 8004ea8:	eeb0 0a48 	vmov.f32	s0, s16
 8004eac:	4817      	ldr	r0, [pc, #92]	@ (8004f0c <start_combined_trajectory+0x1cc>)
 8004eae:	f7fe fedb 	bl	8003c68 <Trapezoidal_Generator>

	// Lift pen during movement
	plotter_pen_up();
 8004eb2:	f001 feaf 	bl	8006c14 <plotter_pen_up>

	// Set trajectory active flags
	prismatic_axis.trajectory_active = true;
 8004eb6:	4b0b      	ldr	r3, [pc, #44]	@ (8004ee4 <start_combined_trajectory+0x1a4>)
 8004eb8:	2201      	movs	r2, #1
 8004eba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	revolute_axis.trajectory_active = true;
 8004ebe:	4b0a      	ldr	r3, [pc, #40]	@ (8004ee8 <start_combined_trajectory+0x1a8>)
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
}
 8004ec6:	bf00      	nop
 8004ec8:	3734      	adds	r7, #52	@ 0x34
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	ecbd 8b02 	vpop	{d8}
 8004ed0:	bd90      	pop	{r4, r7, pc}
 8004ed2:	bf00      	nop
 8004ed4:	200003e8 	.word	0x200003e8
 8004ed8:	20000444 	.word	0x20000444
 8004edc:	2000026c 	.word	0x2000026c
 8004ee0:	20000280 	.word	0x20000280
 8004ee4:	20000294 	.word	0x20000294
 8004ee8:	200002d8 	.word	0x200002d8
 8004eec:	00000000 	.word	0x00000000
 8004ef0:	43960000 	.word	0x43960000
 8004ef4:	200007b4 	.word	0x200007b4
 8004ef8:	43340000 	.word	0x43340000
 8004efc:	40490fdb 	.word	0x40490fdb
 8004f00:	20000060 	.word	0x20000060
 8004f04:	20000244 	.word	0x20000244
 8004f08:	20000000 	.word	0x20000000
 8004f0c:	20000258 	.word	0x20000258

08004f10 <start_homing>:

/**
 * @brief Starts the homing sequence for both axes
 */
void start_homing(void) {
 8004f10:	b580      	push	{r7, lr}
 8004f12:	af00      	add	r7, sp, #0
	// Ensure pen is up for safety
	plotter_pen_up();
 8004f14:	f001 fe7e 	bl	8006c14 <plotter_pen_up>

	// Set initial homing state
	homing_state = HOMING_PRIS_DOWN;
 8004f18:	4b02      	ldr	r3, [pc, #8]	@ (8004f24 <start_homing+0x14>)
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	701a      	strb	r2, [r3, #0]
}
 8004f1e:	bf00      	nop
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	bf00      	nop
 8004f24:	2000032c 	.word	0x2000032c

08004f28 <update_control_loops>:

/**
 * @brief Updates control loops for both axes
 */
void update_control_loops(void) {
 8004f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f2c:	ed2d 8b02 	vpush	{d8}
 8004f30:	b089      	sub	sp, #36	@ 0x24
 8004f32:	af00      	add	r7, sp, #0
	// Normalize revolute position
	normalized_position = normalize_angle(revolute_encoder.rads);
 8004f34:	4b9c      	ldr	r3, [pc, #624]	@ (80051a8 <update_control_loops+0x280>)
 8004f36:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8004f3a:	eeb0 0a67 	vmov.f32	s0, s15
 8004f3e:	f7ff fe15 	bl	8004b6c <normalize_angle>
 8004f42:	eef0 7a40 	vmov.f32	s15, s0
 8004f46:	4b99      	ldr	r3, [pc, #612]	@ (80051ac <update_control_loops+0x284>)
 8004f48:	edc3 7a00 	vstr	s15, [r3]
	angle_deg = normalize_angle(revolute_axis.target_pos);
 8004f4c:	4b98      	ldr	r3, [pc, #608]	@ (80051b0 <update_control_loops+0x288>)
 8004f4e:	edd3 7a04 	vldr	s15, [r3, #16]
 8004f52:	eeb0 0a67 	vmov.f32	s0, s15
 8004f56:	f7ff fe09 	bl	8004b6c <normalize_angle>
 8004f5a:	eef0 7a40 	vmov.f32	s15, s0
 8004f5e:	4b95      	ldr	r3, [pc, #596]	@ (80051b4 <update_control_loops+0x28c>)
 8004f60:	edc3 7a00 	vstr	s15, [r3]

	// Update prismatic trajectory if active
	if (prismatic_axis.trajectory_active && !prisEva.isFinised) {
 8004f64:	4b94      	ldr	r3, [pc, #592]	@ (80051b8 <update_control_loops+0x290>)
 8004f66:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d048      	beq.n	8005000 <update_control_loops+0xd8>
 8004f6e:	4b93      	ldr	r3, [pc, #588]	@ (80051bc <update_control_loops+0x294>)
 8004f70:	7c1b      	ldrb	r3, [r3, #16]
 8004f72:	f083 0301 	eor.w	r3, r3, #1
 8004f76:	b2db      	uxtb	r3, r3
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d041      	beq.n	8005000 <update_control_loops+0xd8>
		Trapezoidal_Evaluated(&prisGen, &prisEva, prismatic_axis.initial_pos,
 8004f7c:	4b8e      	ldr	r3, [pc, #568]	@ (80051b8 <update_control_loops+0x290>)
 8004f7e:	ed93 8a03 	vldr	s16, [r3, #12]
 8004f82:	4b8d      	ldr	r3, [pc, #564]	@ (80051b8 <update_control_loops+0x290>)
 8004f84:	edd3 8a04 	vldr	s17, [r3, #16]
				prismatic_axis.target_pos, ZGX45RGG_400RPM_Constant.sd_max,
 8004f88:	4b8d      	ldr	r3, [pc, #564]	@ (80051c0 <update_control_loops+0x298>)
 8004f8a:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
		Trapezoidal_Evaluated(&prisGen, &prisEva, prismatic_axis.initial_pos,
 8004f8e:	4610      	mov	r0, r2
 8004f90:	4619      	mov	r1, r3
 8004f92:	f7fb fddf 	bl	8000b54 <__aeabi_d2f>
 8004f96:	4604      	mov	r4, r0
				ZGX45RGG_400RPM_Constant.sdd_max);
 8004f98:	4b89      	ldr	r3, [pc, #548]	@ (80051c0 <update_control_loops+0x298>)
 8004f9a:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
		Trapezoidal_Evaluated(&prisGen, &prisEva, prismatic_axis.initial_pos,
 8004f9e:	4610      	mov	r0, r2
 8004fa0:	4619      	mov	r1, r3
 8004fa2:	f7fb fdd7 	bl	8000b54 <__aeabi_d2f>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	ee01 3a90 	vmov	s3, r3
 8004fac:	ee01 4a10 	vmov	s2, r4
 8004fb0:	eef0 0a68 	vmov.f32	s1, s17
 8004fb4:	eeb0 0a48 	vmov.f32	s0, s16
 8004fb8:	4980      	ldr	r1, [pc, #512]	@ (80051bc <update_control_loops+0x294>)
 8004fba:	4882      	ldr	r0, [pc, #520]	@ (80051c4 <update_control_loops+0x29c>)
 8004fbc:	f7fe ff16 	bl	8003dec <Trapezoidal_Evaluated>

		prismatic_axis.position = prisEva.setposition;
 8004fc0:	4b7e      	ldr	r3, [pc, #504]	@ (80051bc <update_control_loops+0x294>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a7c      	ldr	r2, [pc, #496]	@ (80051b8 <update_control_loops+0x290>)
 8004fc6:	6013      	str	r3, [r2, #0]
		prismatic_axis.velocity = prisEva.setvelocity;
 8004fc8:	4b7c      	ldr	r3, [pc, #496]	@ (80051bc <update_control_loops+0x294>)
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	4a7a      	ldr	r2, [pc, #488]	@ (80051b8 <update_control_loops+0x290>)
 8004fce:	6053      	str	r3, [r2, #4]

		if (prisEva.isFinised) {
 8004fd0:	4b7a      	ldr	r3, [pc, #488]	@ (80051bc <update_control_loops+0x294>)
 8004fd2:	7c1b      	ldrb	r3, [r3, #16]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d013      	beq.n	8005000 <update_control_loops+0xd8>
			prismatic_axis.trajectory_active = false;
 8004fd8:	4a77      	ldr	r2, [pc, #476]	@ (80051b8 <update_control_loops+0x290>)
 8004fda:	2300      	movs	r3, #0
 8004fdc:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
			prismatic_axis.position = prisEva.setposition;
 8004fe0:	4b76      	ldr	r3, [pc, #472]	@ (80051bc <update_control_loops+0x294>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a74      	ldr	r2, [pc, #464]	@ (80051b8 <update_control_loops+0x290>)
 8004fe6:	6013      	str	r3, [r2, #0]
			prismatic_axis.velocity = 0.0f;
 8004fe8:	4b73      	ldr	r3, [pc, #460]	@ (80051b8 <update_control_loops+0x290>)
 8004fea:	f04f 0200 	mov.w	r2, #0
 8004fee:	605a      	str	r2, [r3, #4]
			prismatic_axis.dfd = 0.0f;
 8004ff0:	4b71      	ldr	r3, [pc, #452]	@ (80051b8 <update_control_loops+0x290>)
 8004ff2:	f04f 0200 	mov.w	r2, #0
 8004ff6:	62da      	str	r2, [r3, #44]	@ 0x2c
			prismatic_axis.ffd = 0.0f;
 8004ff8:	4b6f      	ldr	r3, [pc, #444]	@ (80051b8 <update_control_loops+0x290>)
 8004ffa:	f04f 0200 	mov.w	r2, #0
 8004ffe:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}

	// Update revolute trajectory if active
	if (revolute_axis.trajectory_active && !revEva.isFinised) {
 8005000:	4b6b      	ldr	r3, [pc, #428]	@ (80051b0 <update_control_loops+0x288>)
 8005002:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005006:	2b00      	cmp	r3, #0
 8005008:	d048      	beq.n	800509c <update_control_loops+0x174>
 800500a:	4b6f      	ldr	r3, [pc, #444]	@ (80051c8 <update_control_loops+0x2a0>)
 800500c:	7c1b      	ldrb	r3, [r3, #16]
 800500e:	f083 0301 	eor.w	r3, r3, #1
 8005012:	b2db      	uxtb	r3, r3
 8005014:	2b00      	cmp	r3, #0
 8005016:	d041      	beq.n	800509c <update_control_loops+0x174>
		Trapezoidal_Evaluated(&revGen, &revEva, revolute_axis.initial_pos,
 8005018:	4b65      	ldr	r3, [pc, #404]	@ (80051b0 <update_control_loops+0x288>)
 800501a:	ed93 8a03 	vldr	s16, [r3, #12]
 800501e:	4b64      	ldr	r3, [pc, #400]	@ (80051b0 <update_control_loops+0x288>)
 8005020:	edd3 8a04 	vldr	s17, [r3, #16]
				revolute_axis.target_pos, ZGX45RGG_150RPM_Constant.qd_max,
 8005024:	4b69      	ldr	r3, [pc, #420]	@ (80051cc <update_control_loops+0x2a4>)
 8005026:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
		Trapezoidal_Evaluated(&revGen, &revEva, revolute_axis.initial_pos,
 800502a:	4610      	mov	r0, r2
 800502c:	4619      	mov	r1, r3
 800502e:	f7fb fd91 	bl	8000b54 <__aeabi_d2f>
 8005032:	4604      	mov	r4, r0
				ZGX45RGG_150RPM_Constant.qdd_max);
 8005034:	4b65      	ldr	r3, [pc, #404]	@ (80051cc <update_control_loops+0x2a4>)
 8005036:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
		Trapezoidal_Evaluated(&revGen, &revEva, revolute_axis.initial_pos,
 800503a:	4610      	mov	r0, r2
 800503c:	4619      	mov	r1, r3
 800503e:	f7fb fd89 	bl	8000b54 <__aeabi_d2f>
 8005042:	4603      	mov	r3, r0
 8005044:	ee01 3a90 	vmov	s3, r3
 8005048:	ee01 4a10 	vmov	s2, r4
 800504c:	eef0 0a68 	vmov.f32	s1, s17
 8005050:	eeb0 0a48 	vmov.f32	s0, s16
 8005054:	495c      	ldr	r1, [pc, #368]	@ (80051c8 <update_control_loops+0x2a0>)
 8005056:	485e      	ldr	r0, [pc, #376]	@ (80051d0 <update_control_loops+0x2a8>)
 8005058:	f7fe fec8 	bl	8003dec <Trapezoidal_Evaluated>

		revolute_axis.position = revEva.setposition;
 800505c:	4b5a      	ldr	r3, [pc, #360]	@ (80051c8 <update_control_loops+0x2a0>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a53      	ldr	r2, [pc, #332]	@ (80051b0 <update_control_loops+0x288>)
 8005062:	6013      	str	r3, [r2, #0]
		revolute_axis.velocity = revEva.setvelocity;
 8005064:	4b58      	ldr	r3, [pc, #352]	@ (80051c8 <update_control_loops+0x2a0>)
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	4a51      	ldr	r2, [pc, #324]	@ (80051b0 <update_control_loops+0x288>)
 800506a:	6053      	str	r3, [r2, #4]

		if (revEva.isFinised) {
 800506c:	4b56      	ldr	r3, [pc, #344]	@ (80051c8 <update_control_loops+0x2a0>)
 800506e:	7c1b      	ldrb	r3, [r3, #16]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d013      	beq.n	800509c <update_control_loops+0x174>
			revolute_axis.trajectory_active = false;
 8005074:	4a4e      	ldr	r2, [pc, #312]	@ (80051b0 <update_control_loops+0x288>)
 8005076:	2300      	movs	r3, #0
 8005078:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
			revolute_axis.position = revEva.setposition;
 800507c:	4b52      	ldr	r3, [pc, #328]	@ (80051c8 <update_control_loops+0x2a0>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a4b      	ldr	r2, [pc, #300]	@ (80051b0 <update_control_loops+0x288>)
 8005082:	6013      	str	r3, [r2, #0]
			revolute_axis.velocity = 0.0f;
 8005084:	4b4a      	ldr	r3, [pc, #296]	@ (80051b0 <update_control_loops+0x288>)
 8005086:	f04f 0200 	mov.w	r2, #0
 800508a:	605a      	str	r2, [r3, #4]
			revolute_axis.dfd = 0.0f;
 800508c:	4b48      	ldr	r3, [pc, #288]	@ (80051b0 <update_control_loops+0x288>)
 800508e:	f04f 0200 	mov.w	r2, #0
 8005092:	62da      	str	r2, [r3, #44]	@ 0x2c
			revolute_axis.ffd = 0.0f;
 8005094:	4b46      	ldr	r3, [pc, #280]	@ (80051b0 <update_control_loops+0x288>)
 8005096:	f04f 0200 	mov.w	r2, #0
 800509a:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}

	// Calculate control signals for prismatic axis
	prismatic_axis.input_voltage = mapf(prismatic_axis.command_pos, -65535.0f,
 800509c:	4b46      	ldr	r3, [pc, #280]	@ (80051b8 <update_control_loops+0x290>)
 800509e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80050a2:	eeb2 2a08 	vmov.f32	s4, #40	@ 0x41400000  12.0
 80050a6:	eefa 1a08 	vmov.f32	s3, #168	@ 0xc1400000 -12.0
 80050aa:	ed9f 1a4a 	vldr	s2, [pc, #296]	@ 80051d4 <update_control_loops+0x2ac>
 80050ae:	eddf 0a4a 	vldr	s1, [pc, #296]	@ 80051d8 <update_control_loops+0x2b0>
 80050b2:	eeb0 0a67 	vmov.f32	s0, s15
 80050b6:	f7fc fe33 	bl	8001d20 <mapf>
 80050ba:	eef0 7a40 	vmov.f32	s15, s0
 80050be:	4b3e      	ldr	r3, [pc, #248]	@ (80051b8 <update_control_loops+0x290>)
 80050c0:	edc3 7a08 	vstr	s15, [r3, #32]
			65535.0f, -12.0f, 12.0f);

	prismatic_axis.kalman_velocity = MotorKalman_Estimate(&prismatic_kalman,
 80050c4:	4b3c      	ldr	r3, [pc, #240]	@ (80051b8 <update_control_loops+0x290>)
 80050c6:	edd3 7a08 	vldr	s15, [r3, #32]
 80050ca:	4b44      	ldr	r3, [pc, #272]	@ (80051dc <update_control_loops+0x2b4>)
 80050cc:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 80050d0:	eef0 0a47 	vmov.f32	s1, s14
 80050d4:	eeb0 0a67 	vmov.f32	s0, s15
 80050d8:	4841      	ldr	r0, [pc, #260]	@ (80051e0 <update_control_loops+0x2b8>)
 80050da:	f7fd fdef 	bl	8002cbc <MotorKalman_Estimate>
 80050de:	eeb0 7a40 	vmov.f32	s14, s0
			prismatic_axis.input_voltage, prismatic_encoder.rads)
			* Disturbance_Constant.prismatic_pulley_radius * 1000.0f;
 80050e2:	4b40      	ldr	r3, [pc, #256]	@ (80051e4 <update_control_loops+0x2bc>)
 80050e4:	edd3 7a04 	vldr	s15, [r3, #16]
 80050e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050ec:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 80051e8 <update_control_loops+0x2c0>
 80050f0:	ee67 7a87 	vmul.f32	s15, s15, s14
	prismatic_axis.kalman_velocity = MotorKalman_Estimate(&prismatic_kalman,
 80050f4:	4b30      	ldr	r3, [pc, #192]	@ (80051b8 <update_control_loops+0x290>)
 80050f6:	edc3 7a07 	vstr	s15, [r3, #28]

	if (isnan(prismatic_axis.kalman_velocity)) {
 80050fa:	4b2f      	ldr	r3, [pc, #188]	@ (80051b8 <update_control_loops+0x290>)
 80050fc:	edd3 7a07 	vldr	s15, [r3, #28]
 8005100:	eef4 7a67 	vcmp.f32	s15, s15
 8005104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005108:	d703      	bvc.n	8005112 <update_control_loops+0x1ea>
		prismatic_axis.kalman_velocity = 0.0f;
 800510a:	4b2b      	ldr	r3, [pc, #172]	@ (80051b8 <update_control_loops+0x290>)
 800510c:	f04f 0200 	mov.w	r2, #0
 8005110:	61da      	str	r2, [r3, #28]
	}

	prismatic_axis.pos_error = prismatic_axis.position - prismatic_encoder.mm;
 8005112:	4b29      	ldr	r3, [pc, #164]	@ (80051b8 <update_control_loops+0x290>)
 8005114:	ed93 7a00 	vldr	s14, [r3]
 8005118:	4b30      	ldr	r3, [pc, #192]	@ (80051dc <update_control_loops+0x2b4>)
 800511a:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 800511e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005122:	4b25      	ldr	r3, [pc, #148]	@ (80051b8 <update_control_loops+0x290>)
 8005124:	edc3 7a05 	vstr	s15, [r3, #20]

	prismatic_axis.command_vel = PWM_Satuation(
 8005128:	4b23      	ldr	r3, [pc, #140]	@ (80051b8 <update_control_loops+0x290>)
 800512a:	edd3 7a05 	vldr	s15, [r3, #20]
 800512e:	eeb0 0a67 	vmov.f32	s0, s15
 8005132:	482e      	ldr	r0, [pc, #184]	@ (80051ec <update_control_loops+0x2c4>)
 8005134:	f7fc f870 	bl	8001218 <PID_CONTROLLER_Compute>
 8005138:	eeb0 8a40 	vmov.f32	s16, s0
			PID_CONTROLLER_Compute(&prismatic_position_pid,
					prismatic_axis.pos_error), ZGX45RGG_400RPM_Constant.sd_max,
 800513c:	4b20      	ldr	r3, [pc, #128]	@ (80051c0 <update_control_loops+0x298>)
 800513e:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
	prismatic_axis.command_vel = PWM_Satuation(
 8005142:	4610      	mov	r0, r2
 8005144:	4619      	mov	r1, r3
 8005146:	f7fb fcbd 	bl	8000ac4 <__aeabi_d2iz>
 800514a:	4604      	mov	r4, r0
			-ZGX45RGG_400RPM_Constant.sd_max);
 800514c:	4b1c      	ldr	r3, [pc, #112]	@ (80051c0 <update_control_loops+0x298>)
 800514e:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8005152:	4690      	mov	r8, r2
 8005154:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
	prismatic_axis.command_vel = PWM_Satuation(
 8005158:	4640      	mov	r0, r8
 800515a:	4649      	mov	r1, r9
 800515c:	f7fb fcb2 	bl	8000ac4 <__aeabi_d2iz>
 8005160:	4603      	mov	r3, r0
 8005162:	4619      	mov	r1, r3
 8005164:	4620      	mov	r0, r4
 8005166:	eeb0 0a48 	vmov.f32	s0, s16
 800516a:	f7fb fff3 	bl	8001154 <PWM_Satuation>
 800516e:	ee07 0a90 	vmov	s15, r0
 8005172:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005176:	4b10      	ldr	r3, [pc, #64]	@ (80051b8 <update_control_loops+0x290>)
 8005178:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

	// Add velocity feedforward for trajectory
	if (prismatic_axis.trajectory_active) {
 800517c:	4b0e      	ldr	r3, [pc, #56]	@ (80051b8 <update_control_loops+0x290>)
 800517e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005182:	2b00      	cmp	r3, #0
 8005184:	d034      	beq.n	80051f0 <update_control_loops+0x2c8>
		prismatic_axis.vel_error = prismatic_axis.command_vel
 8005186:	4b0c      	ldr	r3, [pc, #48]	@ (80051b8 <update_control_loops+0x290>)
 8005188:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
				+ prismatic_axis.velocity - prismatic_axis.kalman_velocity;
 800518c:	4b0a      	ldr	r3, [pc, #40]	@ (80051b8 <update_control_loops+0x290>)
 800518e:	edd3 7a01 	vldr	s15, [r3, #4]
 8005192:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005196:	4b08      	ldr	r3, [pc, #32]	@ (80051b8 <update_control_loops+0x290>)
 8005198:	edd3 7a07 	vldr	s15, [r3, #28]
 800519c:	ee77 7a67 	vsub.f32	s15, s14, s15
		prismatic_axis.vel_error = prismatic_axis.command_vel
 80051a0:	4b05      	ldr	r3, [pc, #20]	@ (80051b8 <update_control_loops+0x290>)
 80051a2:	edc3 7a06 	vstr	s15, [r3, #24]
 80051a6:	e02e      	b.n	8005206 <update_control_loops+0x2de>
 80051a8:	20000444 	.word	0x20000444
 80051ac:	20000338 	.word	0x20000338
 80051b0:	200002d8 	.word	0x200002d8
 80051b4:	2000033c 	.word	0x2000033c
 80051b8:	20000294 	.word	0x20000294
 80051bc:	2000026c 	.word	0x2000026c
 80051c0:	20000060 	.word	0x20000060
 80051c4:	20000244 	.word	0x20000244
 80051c8:	20000280 	.word	0x20000280
 80051cc:	20000000 	.word	0x20000000
 80051d0:	20000258 	.word	0x20000258
 80051d4:	477fff00 	.word	0x477fff00
 80051d8:	c77fff00 	.word	0xc77fff00
 80051dc:	200003e8 	.word	0x200003e8
 80051e0:	20000a3c 	.word	0x20000a3c
 80051e4:	200000c0 	.word	0x200000c0
 80051e8:	447a0000 	.word	0x447a0000
 80051ec:	200004a0 	.word	0x200004a0
	} else {
		prismatic_axis.vel_error = prismatic_axis.command_vel
 80051f0:	4ba1      	ldr	r3, [pc, #644]	@ (8005478 <update_control_loops+0x550>)
 80051f2:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
				- prismatic_axis.kalman_velocity;
 80051f6:	4ba0      	ldr	r3, [pc, #640]	@ (8005478 <update_control_loops+0x550>)
 80051f8:	edd3 7a07 	vldr	s15, [r3, #28]
 80051fc:	ee77 7a67 	vsub.f32	s15, s14, s15
		prismatic_axis.vel_error = prismatic_axis.command_vel
 8005200:	4b9d      	ldr	r3, [pc, #628]	@ (8005478 <update_control_loops+0x550>)
 8005202:	edc3 7a06 	vstr	s15, [r3, #24]
	}

	prismatic_axis.command_pos = PWM_Satuation(
 8005206:	4b9c      	ldr	r3, [pc, #624]	@ (8005478 <update_control_loops+0x550>)
 8005208:	edd3 7a06 	vldr	s15, [r3, #24]
 800520c:	eeb0 0a67 	vmov.f32	s0, s15
 8005210:	489a      	ldr	r0, [pc, #616]	@ (800547c <update_control_loops+0x554>)
 8005212:	f7fc f801 	bl	8001218 <PID_CONTROLLER_Compute>
 8005216:	eeb0 8a40 	vmov.f32	s16, s0
			PID_CONTROLLER_Compute(&prismatic_velocity_pid,
					prismatic_axis.vel_error), ZGX45RGG_400RPM_Constant.U_max,
 800521a:	4b99      	ldr	r3, [pc, #612]	@ (8005480 <update_control_loops+0x558>)
 800521c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	prismatic_axis.command_pos = PWM_Satuation(
 8005220:	4610      	mov	r0, r2
 8005222:	4619      	mov	r1, r3
 8005224:	f7fb fc4e 	bl	8000ac4 <__aeabi_d2iz>
 8005228:	4604      	mov	r4, r0
			-ZGX45RGG_400RPM_Constant.U_max);
 800522a:	4b95      	ldr	r3, [pc, #596]	@ (8005480 <update_control_loops+0x558>)
 800522c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8005230:	613a      	str	r2, [r7, #16]
 8005232:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8005236:	617b      	str	r3, [r7, #20]
	prismatic_axis.command_pos = PWM_Satuation(
 8005238:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800523c:	f7fb fc42 	bl	8000ac4 <__aeabi_d2iz>
 8005240:	4603      	mov	r3, r0
 8005242:	4619      	mov	r1, r3
 8005244:	4620      	mov	r0, r4
 8005246:	eeb0 0a48 	vmov.f32	s0, s16
 800524a:	f7fb ff83 	bl	8001154 <PWM_Satuation>
 800524e:	ee07 0a90 	vmov	s15, r0
 8005252:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005256:	4b88      	ldr	r3, [pc, #544]	@ (8005478 <update_control_loops+0x550>)
 8005258:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	// Calculate control signals for revolute axis
	revolute_axis.input_voltage = mapf(revolute_axis.command_pos, -65535.0f,
 800525c:	4b89      	ldr	r3, [pc, #548]	@ (8005484 <update_control_loops+0x55c>)
 800525e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8005262:	eeb2 2a08 	vmov.f32	s4, #40	@ 0x41400000  12.0
 8005266:	eefa 1a08 	vmov.f32	s3, #168	@ 0xc1400000 -12.0
 800526a:	ed9f 1a87 	vldr	s2, [pc, #540]	@ 8005488 <update_control_loops+0x560>
 800526e:	eddf 0a87 	vldr	s1, [pc, #540]	@ 800548c <update_control_loops+0x564>
 8005272:	eeb0 0a67 	vmov.f32	s0, s15
 8005276:	f7fc fd53 	bl	8001d20 <mapf>
 800527a:	eef0 7a40 	vmov.f32	s15, s0
 800527e:	4b81      	ldr	r3, [pc, #516]	@ (8005484 <update_control_loops+0x55c>)
 8005280:	edc3 7a08 	vstr	s15, [r3, #32]
			65535.0f, -12.0f, 12.0f);

	revolute_axis.kalman_velocity = MotorKalman_Estimate(&revolute_kalman,
 8005284:	4b7f      	ldr	r3, [pc, #508]	@ (8005484 <update_control_loops+0x55c>)
 8005286:	edd3 7a08 	vldr	s15, [r3, #32]
 800528a:	4b81      	ldr	r3, [pc, #516]	@ (8005490 <update_control_loops+0x568>)
 800528c:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8005290:	eef0 0a47 	vmov.f32	s1, s14
 8005294:	eeb0 0a67 	vmov.f32	s0, s15
 8005298:	487e      	ldr	r0, [pc, #504]	@ (8005494 <update_control_loops+0x56c>)
 800529a:	f7fd fd0f 	bl	8002cbc <MotorKalman_Estimate>
 800529e:	eef0 7a40 	vmov.f32	s15, s0
 80052a2:	4b78      	ldr	r3, [pc, #480]	@ (8005484 <update_control_loops+0x55c>)
 80052a4:	edc3 7a07 	vstr	s15, [r3, #28]
			revolute_axis.input_voltage, revolute_encoder.rads);

	if (isnan(revolute_axis.kalman_velocity)) {
 80052a8:	4b76      	ldr	r3, [pc, #472]	@ (8005484 <update_control_loops+0x55c>)
 80052aa:	edd3 7a07 	vldr	s15, [r3, #28]
 80052ae:	eef4 7a67 	vcmp.f32	s15, s15
 80052b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052b6:	d703      	bvc.n	80052c0 <update_control_loops+0x398>
		revolute_axis.kalman_velocity = 0.0f;
 80052b8:	4b72      	ldr	r3, [pc, #456]	@ (8005484 <update_control_loops+0x55c>)
 80052ba:	f04f 0200 	mov.w	r2, #0
 80052be:	61da      	str	r2, [r3, #28]
	}

	revolute_axis.pos_error = revolute_axis.position - normalized_position;
 80052c0:	4b70      	ldr	r3, [pc, #448]	@ (8005484 <update_control_loops+0x55c>)
 80052c2:	ed93 7a00 	vldr	s14, [r3]
 80052c6:	4b74      	ldr	r3, [pc, #464]	@ (8005498 <update_control_loops+0x570>)
 80052c8:	edd3 7a00 	vldr	s15, [r3]
 80052cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80052d0:	4b6c      	ldr	r3, [pc, #432]	@ (8005484 <update_control_loops+0x55c>)
 80052d2:	edc3 7a05 	vstr	s15, [r3, #20]

	// Ensure error uses the shortest path for control
	if (revolute_axis.pos_error > PI) {
 80052d6:	4b6b      	ldr	r3, [pc, #428]	@ (8005484 <update_control_loops+0x55c>)
 80052d8:	edd3 7a05 	vldr	s15, [r3, #20]
 80052dc:	ed9f 7a6f 	vldr	s14, [pc, #444]	@ 800549c <update_control_loops+0x574>
 80052e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80052e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052e8:	dd09      	ble.n	80052fe <update_control_loops+0x3d6>
		revolute_axis.pos_error -= 2.0f * PI;
 80052ea:	4b66      	ldr	r3, [pc, #408]	@ (8005484 <update_control_loops+0x55c>)
 80052ec:	edd3 7a05 	vldr	s15, [r3, #20]
 80052f0:	ed9f 7a6b 	vldr	s14, [pc, #428]	@ 80054a0 <update_control_loops+0x578>
 80052f4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80052f8:	4b62      	ldr	r3, [pc, #392]	@ (8005484 <update_control_loops+0x55c>)
 80052fa:	edc3 7a05 	vstr	s15, [r3, #20]
	}
	if (revolute_axis.pos_error < -PI) {
 80052fe:	4b61      	ldr	r3, [pc, #388]	@ (8005484 <update_control_loops+0x55c>)
 8005300:	edd3 7a05 	vldr	s15, [r3, #20]
 8005304:	ed9f 7a67 	vldr	s14, [pc, #412]	@ 80054a4 <update_control_loops+0x57c>
 8005308:	eef4 7ac7 	vcmpe.f32	s15, s14
 800530c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005310:	d509      	bpl.n	8005326 <update_control_loops+0x3fe>
		revolute_axis.pos_error += 2.0f * PI;
 8005312:	4b5c      	ldr	r3, [pc, #368]	@ (8005484 <update_control_loops+0x55c>)
 8005314:	edd3 7a05 	vldr	s15, [r3, #20]
 8005318:	ed9f 7a61 	vldr	s14, [pc, #388]	@ 80054a0 <update_control_loops+0x578>
 800531c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005320:	4b58      	ldr	r3, [pc, #352]	@ (8005484 <update_control_loops+0x55c>)
 8005322:	edc3 7a05 	vstr	s15, [r3, #20]
	}

	revolute_axis.command_vel = PWM_Satuation(
 8005326:	4b57      	ldr	r3, [pc, #348]	@ (8005484 <update_control_loops+0x55c>)
 8005328:	edd3 7a05 	vldr	s15, [r3, #20]
 800532c:	eeb0 0a67 	vmov.f32	s0, s15
 8005330:	485d      	ldr	r0, [pc, #372]	@ (80054a8 <update_control_loops+0x580>)
 8005332:	f7fb ff71 	bl	8001218 <PID_CONTROLLER_Compute>
 8005336:	eeb0 8a40 	vmov.f32	s16, s0
			PID_CONTROLLER_Compute(&revolute_position_pid,
					revolute_axis.pos_error), ZGX45RGG_150RPM_Constant.qd_max,
 800533a:	4b5c      	ldr	r3, [pc, #368]	@ (80054ac <update_control_loops+0x584>)
 800533c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	revolute_axis.command_vel = PWM_Satuation(
 8005340:	4610      	mov	r0, r2
 8005342:	4619      	mov	r1, r3
 8005344:	f7fb fbbe 	bl	8000ac4 <__aeabi_d2iz>
 8005348:	4604      	mov	r4, r0
			-ZGX45RGG_150RPM_Constant.qd_max);
 800534a:	4b58      	ldr	r3, [pc, #352]	@ (80054ac <update_control_loops+0x584>)
 800534c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8005350:	60ba      	str	r2, [r7, #8]
 8005352:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8005356:	60fb      	str	r3, [r7, #12]
	revolute_axis.command_vel = PWM_Satuation(
 8005358:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800535c:	f7fb fbb2 	bl	8000ac4 <__aeabi_d2iz>
 8005360:	4603      	mov	r3, r0
 8005362:	4619      	mov	r1, r3
 8005364:	4620      	mov	r0, r4
 8005366:	eeb0 0a48 	vmov.f32	s0, s16
 800536a:	f7fb fef3 	bl	8001154 <PWM_Satuation>
 800536e:	ee07 0a90 	vmov	s15, r0
 8005372:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005376:	4b43      	ldr	r3, [pc, #268]	@ (8005484 <update_control_loops+0x55c>)
 8005378:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

	// Add velocity feedforward for trajectory
	if (revolute_axis.trajectory_active) {
 800537c:	4b41      	ldr	r3, [pc, #260]	@ (8005484 <update_control_loops+0x55c>)
 800537e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005382:	2b00      	cmp	r3, #0
 8005384:	d010      	beq.n	80053a8 <update_control_loops+0x480>
		revolute_axis.vel_error = revolute_axis.command_vel
 8005386:	4b3f      	ldr	r3, [pc, #252]	@ (8005484 <update_control_loops+0x55c>)
 8005388:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
				+ revolute_axis.velocity - revolute_axis.kalman_velocity;
 800538c:	4b3d      	ldr	r3, [pc, #244]	@ (8005484 <update_control_loops+0x55c>)
 800538e:	edd3 7a01 	vldr	s15, [r3, #4]
 8005392:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005396:	4b3b      	ldr	r3, [pc, #236]	@ (8005484 <update_control_loops+0x55c>)
 8005398:	edd3 7a07 	vldr	s15, [r3, #28]
 800539c:	ee77 7a67 	vsub.f32	s15, s14, s15
		revolute_axis.vel_error = revolute_axis.command_vel
 80053a0:	4b38      	ldr	r3, [pc, #224]	@ (8005484 <update_control_loops+0x55c>)
 80053a2:	edc3 7a06 	vstr	s15, [r3, #24]
 80053a6:	e00a      	b.n	80053be <update_control_loops+0x496>
	} else {
		revolute_axis.vel_error = revolute_axis.command_vel
 80053a8:	4b36      	ldr	r3, [pc, #216]	@ (8005484 <update_control_loops+0x55c>)
 80053aa:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
				- revolute_axis.kalman_velocity;
 80053ae:	4b35      	ldr	r3, [pc, #212]	@ (8005484 <update_control_loops+0x55c>)
 80053b0:	edd3 7a07 	vldr	s15, [r3, #28]
 80053b4:	ee77 7a67 	vsub.f32	s15, s14, s15
		revolute_axis.vel_error = revolute_axis.command_vel
 80053b8:	4b32      	ldr	r3, [pc, #200]	@ (8005484 <update_control_loops+0x55c>)
 80053ba:	edc3 7a06 	vstr	s15, [r3, #24]
	}

	revolute_axis.command_pos = PWM_Satuation(
 80053be:	4b31      	ldr	r3, [pc, #196]	@ (8005484 <update_control_loops+0x55c>)
 80053c0:	edd3 7a06 	vldr	s15, [r3, #24]
 80053c4:	eeb0 0a67 	vmov.f32	s0, s15
 80053c8:	4839      	ldr	r0, [pc, #228]	@ (80054b0 <update_control_loops+0x588>)
 80053ca:	f7fb ff25 	bl	8001218 <PID_CONTROLLER_Compute>
 80053ce:	eeb0 8a40 	vmov.f32	s16, s0
			PID_CONTROLLER_Compute(&revolute_velocity_pid,
					revolute_axis.vel_error), ZGX45RGG_150RPM_Constant.U_max,
 80053d2:	4b36      	ldr	r3, [pc, #216]	@ (80054ac <update_control_loops+0x584>)
 80053d4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	revolute_axis.command_pos = PWM_Satuation(
 80053d8:	4610      	mov	r0, r2
 80053da:	4619      	mov	r1, r3
 80053dc:	f7fb fb72 	bl	8000ac4 <__aeabi_d2iz>
 80053e0:	4604      	mov	r4, r0
			-ZGX45RGG_150RPM_Constant.U_max);
 80053e2:	4b32      	ldr	r3, [pc, #200]	@ (80054ac <update_control_loops+0x584>)
 80053e4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80053e8:	603a      	str	r2, [r7, #0]
 80053ea:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80053ee:	607b      	str	r3, [r7, #4]
	revolute_axis.command_pos = PWM_Satuation(
 80053f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80053f4:	f7fb fb66 	bl	8000ac4 <__aeabi_d2iz>
 80053f8:	4603      	mov	r3, r0
 80053fa:	4619      	mov	r1, r3
 80053fc:	4620      	mov	r0, r4
 80053fe:	eeb0 0a48 	vmov.f32	s0, s16
 8005402:	f7fb fea7 	bl	8001154 <PWM_Satuation>
 8005406:	ee07 0a90 	vmov	s15, r0
 800540a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800540e:	4b1d      	ldr	r3, [pc, #116]	@ (8005484 <update_control_loops+0x55c>)
 8005410:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	// Add feed-forward compensation
	if (prismatic_axis.trajectory_active) {
 8005414:	4b18      	ldr	r3, [pc, #96]	@ (8005478 <update_control_loops+0x550>)
 8005416:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800541a:	2b00      	cmp	r3, #0
 800541c:	d052      	beq.n	80054c4 <update_control_loops+0x59c>
		// Only compute FFD during active movement
		prismatic_axis.ffd = PRISMATIC_MOTOR_FFD_Compute(&prismatic_motor_ffd,
				prismatic_axis.velocity / 1000.0f);
 800541e:	4b16      	ldr	r3, [pc, #88]	@ (8005478 <update_control_loops+0x550>)
 8005420:	edd3 7a01 	vldr	s15, [r3, #4]
		prismatic_axis.ffd = PRISMATIC_MOTOR_FFD_Compute(&prismatic_motor_ffd,
 8005424:	eddf 6a23 	vldr	s13, [pc, #140]	@ 80054b4 <update_control_loops+0x58c>
 8005428:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800542c:	eeb0 0a47 	vmov.f32	s0, s14
 8005430:	4821      	ldr	r0, [pc, #132]	@ (80054b8 <update_control_loops+0x590>)
 8005432:	f7fc fa0d 	bl	8001850 <PRISMATIC_MOTOR_FFD_Compute>
 8005436:	eef0 7a40 	vmov.f32	s15, s0
 800543a:	4b0f      	ldr	r3, [pc, #60]	@ (8005478 <update_control_loops+0x550>)
 800543c:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

		// Only compute DFD during active movement
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 8005440:	4b15      	ldr	r3, [pc, #84]	@ (8005498 <update_control_loops+0x570>)
 8005442:	ed93 7a00 	vldr	s14, [r3]
 8005446:	4b0f      	ldr	r3, [pc, #60]	@ (8005484 <update_control_loops+0x55c>)
 8005448:	edd3 6a01 	vldr	s13, [r3, #4]
				normalized_position, revolute_axis.velocity,
				prismatic_encoder.mm / 1000.0f);
 800544c:	4b1b      	ldr	r3, [pc, #108]	@ (80054bc <update_control_loops+0x594>)
 800544e:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 8005452:	eddf 5a18 	vldr	s11, [pc, #96]	@ 80054b4 <update_control_loops+0x58c>
 8005456:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 800545a:	eeb0 1a46 	vmov.f32	s2, s12
 800545e:	eef0 0a66 	vmov.f32	s1, s13
 8005462:	eeb0 0a47 	vmov.f32	s0, s14
 8005466:	4816      	ldr	r0, [pc, #88]	@ (80054c0 <update_control_loops+0x598>)
 8005468:	f7fc fa85 	bl	8001976 <PRISMATIC_MOTOR_DFD_Compute>
 800546c:	eef0 7a40 	vmov.f32	s15, s0
 8005470:	4b01      	ldr	r3, [pc, #4]	@ (8005478 <update_control_loops+0x550>)
 8005472:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
 8005476:	e02d      	b.n	80054d4 <update_control_loops+0x5ac>
 8005478:	20000294 	.word	0x20000294
 800547c:	200004c8 	.word	0x200004c8
 8005480:	20000060 	.word	0x20000060
 8005484:	200002d8 	.word	0x200002d8
 8005488:	477fff00 	.word	0x477fff00
 800548c:	c77fff00 	.word	0xc77fff00
 8005490:	20000444 	.word	0x20000444
 8005494:	20000da8 	.word	0x20000da8
 8005498:	20000338 	.word	0x20000338
 800549c:	40490fdb 	.word	0x40490fdb
 80054a0:	40c90fdb 	.word	0x40c90fdb
 80054a4:	c0490fdb 	.word	0xc0490fdb
 80054a8:	200004f0 	.word	0x200004f0
 80054ac:	20000000 	.word	0x20000000
 80054b0:	20000518 	.word	0x20000518
 80054b4:	447a0000 	.word	0x447a0000
 80054b8:	20000540 	.word	0x20000540
 80054bc:	200003e8 	.word	0x200003e8
 80054c0:	20000544 	.word	0x20000544
	} else {
		// Zero when not moving
		prismatic_axis.ffd = 0.0f;
 80054c4:	4b84      	ldr	r3, [pc, #528]	@ (80056d8 <update_control_loops+0x7b0>)
 80054c6:	f04f 0200 	mov.w	r2, #0
 80054ca:	631a      	str	r2, [r3, #48]	@ 0x30
		prismatic_axis.dfd = 0.0f;
 80054cc:	4b82      	ldr	r3, [pc, #520]	@ (80056d8 <update_control_loops+0x7b0>)
 80054ce:	f04f 0200 	mov.w	r2, #0
 80054d2:	62da      	str	r2, [r3, #44]	@ 0x2c
	}

	float pris_backlash_compensation = prismatic_backlash_compensator(
 80054d4:	4b80      	ldr	r3, [pc, #512]	@ (80056d8 <update_control_loops+0x7b0>)
 80054d6:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80054da:	eeb0 0a67 	vmov.f32	s0, s15
 80054de:	f000 f9c1 	bl	8005864 <prismatic_backlash_compensator>
 80054e2:	ed87 0a07 	vstr	s0, [r7, #28]
			prismatic_axis.command_vel);

	prismatic_axis.command_pos = prismatic_axis.command_pos
 80054e6:	4b7c      	ldr	r3, [pc, #496]	@ (80056d8 <update_control_loops+0x7b0>)
 80054e8:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
			+ pris_backlash_compensation + prismatic_axis.dfd
 80054ec:	edd7 7a07 	vldr	s15, [r7, #28]
 80054f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80054f4:	4b78      	ldr	r3, [pc, #480]	@ (80056d8 <update_control_loops+0x7b0>)
 80054f6:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80054fa:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ prismatic_axis.ffd;
 80054fe:	4b76      	ldr	r3, [pc, #472]	@ (80056d8 <update_control_loops+0x7b0>)
 8005500:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8005504:	ee77 7a27 	vadd.f32	s15, s14, s15
	prismatic_axis.command_pos = prismatic_axis.command_pos
 8005508:	4b73      	ldr	r3, [pc, #460]	@ (80056d8 <update_control_loops+0x7b0>)
 800550a:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 800550e:	4b73      	ldr	r3, [pc, #460]	@ (80056dc <update_control_loops+0x7b4>)
 8005510:	ed93 7a00 	vldr	s14, [r3]
			normalized_position, 0.0f, prismatic_encoder.mm / 1000.0f);
 8005514:	4b72      	ldr	r3, [pc, #456]	@ (80056e0 <update_control_loops+0x7b8>)
 8005516:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
	revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 800551a:	ed9f 6a72 	vldr	s12, [pc, #456]	@ 80056e4 <update_control_loops+0x7bc>
 800551e:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8005522:	eeb0 1a66 	vmov.f32	s2, s13
 8005526:	eddf 0a70 	vldr	s1, [pc, #448]	@ 80056e8 <update_control_loops+0x7c0>
 800552a:	eeb0 0a47 	vmov.f32	s0, s14
 800552e:	486f      	ldr	r0, [pc, #444]	@ (80056ec <update_control_loops+0x7c4>)
 8005530:	f7fc f8a4 	bl	800167c <REVOLUTE_MOTOR_DFD_Compute>
 8005534:	eef0 7a40 	vmov.f32	s15, s0
 8005538:	4b6d      	ldr	r3, [pc, #436]	@ (80056f0 <update_control_loops+0x7c8>)
 800553a:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

	revolute_axis.ffd = REVOLUTE_MOTOR_FFD_Compute(&revolute_motor_ffd,
 800553e:	4b6c      	ldr	r3, [pc, #432]	@ (80056f0 <update_control_loops+0x7c8>)
 8005540:	edd3 7a01 	vldr	s15, [r3, #4]
 8005544:	eeb0 0a67 	vmov.f32	s0, s15
 8005548:	486a      	ldr	r0, [pc, #424]	@ (80056f4 <update_control_loops+0x7cc>)
 800554a:	f7fc f803 	bl	8001554 <REVOLUTE_MOTOR_FFD_Compute>
 800554e:	eef0 7a40 	vmov.f32	s15, s0
 8005552:	4b67      	ldr	r3, [pc, #412]	@ (80056f0 <update_control_loops+0x7c8>)
 8005554:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
			revolute_axis.velocity);

	float rev_backlash_compensation = revolute_backlash_compensator(
 8005558:	4b65      	ldr	r3, [pc, #404]	@ (80056f0 <update_control_loops+0x7c8>)
 800555a:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800555e:	eeb0 0a67 	vmov.f32	s0, s15
 8005562:	f000 f8dd 	bl	8005720 <revolute_backlash_compensator>
 8005566:	ed87 0a06 	vstr	s0, [r7, #24]
			revolute_axis.command_vel);

	revolute_axis.command_pos = revolute_axis.command_pos
 800556a:	4b61      	ldr	r3, [pc, #388]	@ (80056f0 <update_control_loops+0x7c8>)
 800556c:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
			+ rev_backlash_compensation + revolute_axis.dfd + revolute_axis.ffd;
 8005570:	edd7 7a06 	vldr	s15, [r7, #24]
 8005574:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005578:	4b5d      	ldr	r3, [pc, #372]	@ (80056f0 <update_control_loops+0x7c8>)
 800557a:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800557e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005582:	4b5b      	ldr	r3, [pc, #364]	@ (80056f0 <update_control_loops+0x7c8>)
 8005584:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8005588:	ee77 7a27 	vadd.f32	s15, s14, s15
	revolute_axis.command_pos = revolute_axis.command_pos
 800558c:	4b58      	ldr	r3, [pc, #352]	@ (80056f0 <update_control_loops+0x7c8>)
 800558e:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	// Final saturation
	prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8005592:	4b51      	ldr	r3, [pc, #324]	@ (80056d8 <update_control_loops+0x7b0>)
 8005594:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
			ZGX45RGG_400RPM_Constant.U_max, -ZGX45RGG_400RPM_Constant.U_max);
 8005598:	4b57      	ldr	r3, [pc, #348]	@ (80056f8 <update_control_loops+0x7d0>)
 800559a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 800559e:	4610      	mov	r0, r2
 80055a0:	4619      	mov	r1, r3
 80055a2:	f7fb fa8f 	bl	8000ac4 <__aeabi_d2iz>
 80055a6:	4604      	mov	r4, r0
			ZGX45RGG_400RPM_Constant.U_max, -ZGX45RGG_400RPM_Constant.U_max);
 80055a8:	4b53      	ldr	r3, [pc, #332]	@ (80056f8 <update_control_loops+0x7d0>)
 80055aa:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80055ae:	4615      	mov	r5, r2
 80055b0:	f083 4600 	eor.w	r6, r3, #2147483648	@ 0x80000000
	prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 80055b4:	4628      	mov	r0, r5
 80055b6:	4631      	mov	r1, r6
 80055b8:	f7fb fa84 	bl	8000ac4 <__aeabi_d2iz>
 80055bc:	4603      	mov	r3, r0
 80055be:	4619      	mov	r1, r3
 80055c0:	4620      	mov	r0, r4
 80055c2:	eeb0 0a48 	vmov.f32	s0, s16
 80055c6:	f7fb fdc5 	bl	8001154 <PWM_Satuation>
 80055ca:	ee07 0a90 	vmov	s15, r0
 80055ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80055d2:	4b41      	ldr	r3, [pc, #260]	@ (80056d8 <update_control_loops+0x7b0>)
 80055d4:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 80055d8:	4b45      	ldr	r3, [pc, #276]	@ (80056f0 <update_control_loops+0x7c8>)
 80055da:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
			ZGX45RGG_150RPM_Constant.U_max, -ZGX45RGG_150RPM_Constant.U_max);
 80055de:	4b47      	ldr	r3, [pc, #284]	@ (80056fc <update_control_loops+0x7d4>)
 80055e0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 80055e4:	4610      	mov	r0, r2
 80055e6:	4619      	mov	r1, r3
 80055e8:	f7fb fa6c 	bl	8000ac4 <__aeabi_d2iz>
 80055ec:	4604      	mov	r4, r0
			ZGX45RGG_150RPM_Constant.U_max, -ZGX45RGG_150RPM_Constant.U_max);
 80055ee:	4b43      	ldr	r3, [pc, #268]	@ (80056fc <update_control_loops+0x7d4>)
 80055f0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80055f4:	4692      	mov	sl, r2
 80055f6:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
	revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 80055fa:	4650      	mov	r0, sl
 80055fc:	4659      	mov	r1, fp
 80055fe:	f7fb fa61 	bl	8000ac4 <__aeabi_d2iz>
 8005602:	4603      	mov	r3, r0
 8005604:	4619      	mov	r1, r3
 8005606:	4620      	mov	r0, r4
 8005608:	eeb0 0a48 	vmov.f32	s0, s16
 800560c:	f7fb fda2 	bl	8001154 <PWM_Satuation>
 8005610:	ee07 0a90 	vmov	s15, r0
 8005614:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005618:	4b35      	ldr	r3, [pc, #212]	@ (80056f0 <update_control_loops+0x7c8>)
 800561a:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	// Apply commands to motors
	MDXX_set_range(&prismatic_motor, 2000, prismatic_axis.command_pos);
 800561e:	4b2e      	ldr	r3, [pc, #184]	@ (80056d8 <update_control_loops+0x7b0>)
 8005620:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8005624:	eef0 0a67 	vmov.f32	s1, s15
 8005628:	ed9f 0a35 	vldr	s0, [pc, #212]	@ 8005700 <update_control_loops+0x7d8>
 800562c:	4835      	ldr	r0, [pc, #212]	@ (8005704 <update_control_loops+0x7dc>)
 800562e:	f7fb fea9 	bl	8001384 <MDXX_set_range>
	MDXX_set_range(&revolute_motor, 2000, revolute_axis.command_pos);
 8005632:	4b2f      	ldr	r3, [pc, #188]	@ (80056f0 <update_control_loops+0x7c8>)
 8005634:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8005638:	eef0 0a67 	vmov.f32	s1, s15
 800563c:	ed9f 0a30 	vldr	s0, [pc, #192]	@ 8005700 <update_control_loops+0x7d8>
 8005640:	4831      	ldr	r0, [pc, #196]	@ (8005708 <update_control_loops+0x7e0>)
 8005642:	f7fb fe9f 	bl	8001384 <MDXX_set_range>

	prismatic_axis.mm = prismatic_encoder.mm;
 8005646:	4b26      	ldr	r3, [pc, #152]	@ (80056e0 <update_control_loops+0x7b8>)
 8005648:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800564a:	4a23      	ldr	r2, [pc, #140]	@ (80056d8 <update_control_loops+0x7b0>)
 800564c:	63d3      	str	r3, [r2, #60]	@ 0x3c
	prismatic_axis.target = prismatic_axis.target_pos;
 800564e:	4b22      	ldr	r3, [pc, #136]	@ (80056d8 <update_control_loops+0x7b0>)
 8005650:	691b      	ldr	r3, [r3, #16]
 8005652:	4a21      	ldr	r2, [pc, #132]	@ (80056d8 <update_control_loops+0x7b0>)
 8005654:	6393      	str	r3, [r2, #56]	@ 0x38

	revolute_axis.deg = UnitConverter_angle(&converter_system,
 8005656:	4b21      	ldr	r3, [pc, #132]	@ (80056dc <update_control_loops+0x7b4>)
 8005658:	edd3 7a00 	vldr	s15, [r3]
 800565c:	220e      	movs	r2, #14
 800565e:	210f      	movs	r1, #15
 8005660:	eeb0 0a67 	vmov.f32	s0, s15
 8005664:	4829      	ldr	r0, [pc, #164]	@ (800570c <update_control_loops+0x7e4>)
 8005666:	f7fe ff59 	bl	800451c <UnitConverter_angle>
 800566a:	eef0 7a40 	vmov.f32	s15, s0
 800566e:	4b20      	ldr	r3, [pc, #128]	@ (80056f0 <update_control_loops+0x7c8>)
 8005670:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
			normalized_position, UNIT_RADIAN, UNIT_DEGREE);
	;
	revolute_axis.target = UnitConverter_angle(&converter_system, angle_deg,
 8005674:	4b26      	ldr	r3, [pc, #152]	@ (8005710 <update_control_loops+0x7e8>)
 8005676:	edd3 7a00 	vldr	s15, [r3]
 800567a:	220e      	movs	r2, #14
 800567c:	210f      	movs	r1, #15
 800567e:	eeb0 0a67 	vmov.f32	s0, s15
 8005682:	4822      	ldr	r0, [pc, #136]	@ (800570c <update_control_loops+0x7e4>)
 8005684:	f7fe ff4a 	bl	800451c <UnitConverter_angle>
 8005688:	eef0 7a40 	vmov.f32	s15, s0
 800568c:	4b18      	ldr	r3, [pc, #96]	@ (80056f0 <update_control_loops+0x7c8>)
 800568e:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
			UNIT_RADIAN, UNIT_DEGREE);

	// Put pen down when both trajectories are complete
	static uint32_t pen_down_timer = 0;
	if (revEva.isFinised && prisEva.isFinised) {
 8005692:	4b20      	ldr	r3, [pc, #128]	@ (8005714 <update_control_loops+0x7ec>)
 8005694:	7c1b      	ldrb	r3, [r3, #16]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d013      	beq.n	80056c2 <update_control_loops+0x79a>
 800569a:	4b1f      	ldr	r3, [pc, #124]	@ (8005718 <update_control_loops+0x7f0>)
 800569c:	7c1b      	ldrb	r3, [r3, #16]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d00f      	beq.n	80056c2 <update_control_loops+0x79a>
		pen_down_timer++;
 80056a2:	4b1e      	ldr	r3, [pc, #120]	@ (800571c <update_control_loops+0x7f4>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	3301      	adds	r3, #1
 80056a8:	4a1c      	ldr	r2, [pc, #112]	@ (800571c <update_control_loops+0x7f4>)
 80056aa:	6013      	str	r3, [r2, #0]
		if (pen_down_timer > PEN_SETTLE_TIME) {
 80056ac:	4b1b      	ldr	r3, [pc, #108]	@ (800571c <update_control_loops+0x7f4>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80056b4:	d909      	bls.n	80056ca <update_control_loops+0x7a2>
			plotter_pen_down();
 80056b6:	f001 fabd 	bl	8006c34 <plotter_pen_down>
			pen_down_timer = 0;
 80056ba:	4b18      	ldr	r3, [pc, #96]	@ (800571c <update_control_loops+0x7f4>)
 80056bc:	2200      	movs	r2, #0
 80056be:	601a      	str	r2, [r3, #0]
		if (pen_down_timer > PEN_SETTLE_TIME) {
 80056c0:	e003      	b.n	80056ca <update_control_loops+0x7a2>
		}
	} else {
		pen_down_timer = 0;
 80056c2:	4b16      	ldr	r3, [pc, #88]	@ (800571c <update_control_loops+0x7f4>)
 80056c4:	2200      	movs	r2, #0
 80056c6:	601a      	str	r2, [r3, #0]
	}
}
 80056c8:	bf00      	nop
 80056ca:	bf00      	nop
 80056cc:	3724      	adds	r7, #36	@ 0x24
 80056ce:	46bd      	mov	sp, r7
 80056d0:	ecbd 8b02 	vpop	{d8}
 80056d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056d8:	20000294 	.word	0x20000294
 80056dc:	20000338 	.word	0x20000338
 80056e0:	200003e8 	.word	0x200003e8
 80056e4:	447a0000 	.word	0x447a0000
 80056e8:	00000000 	.word	0x00000000
 80056ec:	20000550 	.word	0x20000550
 80056f0:	200002d8 	.word	0x200002d8
 80056f4:	2000054c 	.word	0x2000054c
 80056f8:	20000060 	.word	0x20000060
 80056fc:	20000000 	.word	0x20000000
 8005700:	44fa0000 	.word	0x44fa0000
 8005704:	20000350 	.word	0x20000350
 8005708:	2000039c 	.word	0x2000039c
 800570c:	200007b4 	.word	0x200007b4
 8005710:	2000033c 	.word	0x2000033c
 8005714:	20000280 	.word	0x20000280
 8005718:	2000026c 	.word	0x2000026c
 800571c:	20000340 	.word	0x20000340

08005720 <revolute_backlash_compensator>:
/**
 * @brief Compensation for revolute axis backlash
 * @param cmd_vel Command velocity
 * @return Compensation value
 */
float revolute_backlash_compensator(float cmd_vel) {
 8005720:	b580      	push	{r7, lr}
 8005722:	b086      	sub	sp, #24
 8005724:	af00      	add	r7, sp, #0
 8005726:	ed87 0a01 	vstr	s0, [r7, #4]
	// Determine current direction
	float current_direction =
			(cmd_vel > 0.0f) ? 1.0f : ((cmd_vel < 0.0f) ? -1.0f : 0.0f);
 800572a:	edd7 7a01 	vldr	s15, [r7, #4]
 800572e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005736:	dd02      	ble.n	800573e <revolute_backlash_compensator+0x1e>
 8005738:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800573c:	e00a      	b.n	8005754 <revolute_backlash_compensator+0x34>
 800573e:	edd7 7a01 	vldr	s15, [r7, #4]
 8005742:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800574a:	d501      	bpl.n	8005750 <revolute_backlash_compensator+0x30>
 800574c:	4b3e      	ldr	r3, [pc, #248]	@ (8005848 <revolute_backlash_compensator+0x128>)
 800574e:	e001      	b.n	8005754 <revolute_backlash_compensator+0x34>
 8005750:	f04f 0300 	mov.w	r3, #0
	float current_direction =
 8005754:	617b      	str	r3, [r7, #20]

	// If stopped, maintain last direction
	if (current_direction == 0.0f) {
 8005756:	edd7 7a05 	vldr	s15, [r7, #20]
 800575a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800575e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005762:	d102      	bne.n	800576a <revolute_backlash_compensator+0x4a>
		current_direction = revolute_last_cmd_direction;
 8005764:	4b39      	ldr	r3, [pc, #228]	@ (800584c <revolute_backlash_compensator+0x12c>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	617b      	str	r3, [r7, #20]
	}

	// Detect direction change
	if (current_direction != revolute_last_cmd_direction
 800576a:	4b38      	ldr	r3, [pc, #224]	@ (800584c <revolute_backlash_compensator+0x12c>)
 800576c:	edd3 7a00 	vldr	s15, [r3]
 8005770:	ed97 7a05 	vldr	s14, [r7, #20]
 8005774:	eeb4 7a67 	vcmp.f32	s14, s15
 8005778:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800577c:	d013      	beq.n	80057a6 <revolute_backlash_compensator+0x86>
			&& current_direction != 0.0f) {
 800577e:	edd7 7a05 	vldr	s15, [r7, #20]
 8005782:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800578a:	d00c      	beq.n	80057a6 <revolute_backlash_compensator+0x86>
		// If direction changed, update backlash state
		revolute_backlash_state = current_direction * revolute_backlash;
 800578c:	4b30      	ldr	r3, [pc, #192]	@ (8005850 <revolute_backlash_compensator+0x130>)
 800578e:	ed93 7a00 	vldr	s14, [r3]
 8005792:	edd7 7a05 	vldr	s15, [r7, #20]
 8005796:	ee67 7a27 	vmul.f32	s15, s14, s15
 800579a:	4b2e      	ldr	r3, [pc, #184]	@ (8005854 <revolute_backlash_compensator+0x134>)
 800579c:	edc3 7a00 	vstr	s15, [r3]
		revolute_last_cmd_direction = current_direction;
 80057a0:	4a2a      	ldr	r2, [pc, #168]	@ (800584c <revolute_backlash_compensator+0x12c>)
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	6013      	str	r3, [r2, #0]
	}

	// Apply adaptive compensation based on velocity
	float compensation = revolute_backlash_state * BACKLASH_COMPENSATION_GAIN;
 80057a6:	4b2b      	ldr	r3, [pc, #172]	@ (8005854 <revolute_backlash_compensator+0x134>)
 80057a8:	edd3 7a00 	vldr	s15, [r3]
 80057ac:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8005858 <revolute_backlash_compensator+0x138>
 80057b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80057b4:	edc7 7a04 	vstr	s15, [r7, #16]

	// Gradually reduce backlash state as we overcome the backlash
	float backlash_decay_rate = BACKLASH_DECAY_FACTOR * fabsf(cmd_vel);
 80057b8:	edd7 7a01 	vldr	s15, [r7, #4]
 80057bc:	eef0 7ae7 	vabs.f32	s15, s15
 80057c0:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 800585c <revolute_backlash_compensator+0x13c>
 80057c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80057c8:	edc7 7a03 	vstr	s15, [r7, #12]
	if (revolute_backlash_state > 0.0f) {
 80057cc:	4b21      	ldr	r3, [pc, #132]	@ (8005854 <revolute_backlash_compensator+0x134>)
 80057ce:	edd3 7a00 	vldr	s15, [r3]
 80057d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80057d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057da:	dd12      	ble.n	8005802 <revolute_backlash_compensator+0xe2>
		revolute_backlash_state = fmaxf(0.0f,
 80057dc:	4b1d      	ldr	r3, [pc, #116]	@ (8005854 <revolute_backlash_compensator+0x134>)
 80057de:	ed93 7a00 	vldr	s14, [r3]
 80057e2:	edd7 7a03 	vldr	s15, [r7, #12]
 80057e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80057ea:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8005860 <revolute_backlash_compensator+0x140>
 80057ee:	eeb0 0a67 	vmov.f32	s0, s15
 80057f2:	f00a f82d 	bl	800f850 <fmaxf>
 80057f6:	eef0 7a40 	vmov.f32	s15, s0
 80057fa:	4b16      	ldr	r3, [pc, #88]	@ (8005854 <revolute_backlash_compensator+0x134>)
 80057fc:	edc3 7a00 	vstr	s15, [r3]
 8005800:	e019      	b.n	8005836 <revolute_backlash_compensator+0x116>
				revolute_backlash_state - backlash_decay_rate);
	} else if (revolute_backlash_state < 0.0f) {
 8005802:	4b14      	ldr	r3, [pc, #80]	@ (8005854 <revolute_backlash_compensator+0x134>)
 8005804:	edd3 7a00 	vldr	s15, [r3]
 8005808:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800580c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005810:	d511      	bpl.n	8005836 <revolute_backlash_compensator+0x116>
		revolute_backlash_state = fminf(0.0f,
 8005812:	4b10      	ldr	r3, [pc, #64]	@ (8005854 <revolute_backlash_compensator+0x134>)
 8005814:	ed93 7a00 	vldr	s14, [r3]
 8005818:	edd7 7a03 	vldr	s15, [r7, #12]
 800581c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005820:	eddf 0a0f 	vldr	s1, [pc, #60]	@ 8005860 <revolute_backlash_compensator+0x140>
 8005824:	eeb0 0a67 	vmov.f32	s0, s15
 8005828:	f00a f82f 	bl	800f88a <fminf>
 800582c:	eef0 7a40 	vmov.f32	s15, s0
 8005830:	4b08      	ldr	r3, [pc, #32]	@ (8005854 <revolute_backlash_compensator+0x134>)
 8005832:	edc3 7a00 	vstr	s15, [r3]
				revolute_backlash_state + backlash_decay_rate);
	}

	return compensation;
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	ee07 3a90 	vmov	s15, r3
}
 800583c:	eeb0 0a67 	vmov.f32	s0, s15
 8005840:	3718      	adds	r7, #24
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}
 8005846:	bf00      	nop
 8005848:	bf800000 	.word	0xbf800000
 800584c:	2000031c 	.word	0x2000031c
 8005850:	200000f0 	.word	0x200000f0
 8005854:	20000320 	.word	0x20000320
 8005858:	3e4ccccd 	.word	0x3e4ccccd
 800585c:	3c23d70a 	.word	0x3c23d70a
 8005860:	00000000 	.word	0x00000000

08005864 <prismatic_backlash_compensator>:
/**
 * @brief Compensation for prismatic axis backlash
 * @param cmd_vel Command velocity
 * @return Compensation value
 */
float prismatic_backlash_compensator(float cmd_vel) {
 8005864:	b580      	push	{r7, lr}
 8005866:	b086      	sub	sp, #24
 8005868:	af00      	add	r7, sp, #0
 800586a:	ed87 0a01 	vstr	s0, [r7, #4]
	// Determine current direction
	float current_direction =
			(cmd_vel > 0.0f) ? 1.0f : ((cmd_vel < 0.0f) ? -1.0f : 0.0f);
 800586e:	edd7 7a01 	vldr	s15, [r7, #4]
 8005872:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005876:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800587a:	dd02      	ble.n	8005882 <prismatic_backlash_compensator+0x1e>
 800587c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8005880:	e00a      	b.n	8005898 <prismatic_backlash_compensator+0x34>
 8005882:	edd7 7a01 	vldr	s15, [r7, #4]
 8005886:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800588a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800588e:	d501      	bpl.n	8005894 <prismatic_backlash_compensator+0x30>
 8005890:	4b3e      	ldr	r3, [pc, #248]	@ (800598c <prismatic_backlash_compensator+0x128>)
 8005892:	e001      	b.n	8005898 <prismatic_backlash_compensator+0x34>
 8005894:	f04f 0300 	mov.w	r3, #0
	float current_direction =
 8005898:	617b      	str	r3, [r7, #20]

	// If stopped, maintain last direction
	if (current_direction == 0.0f) {
 800589a:	edd7 7a05 	vldr	s15, [r7, #20]
 800589e:	eef5 7a40 	vcmp.f32	s15, #0.0
 80058a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058a6:	d102      	bne.n	80058ae <prismatic_backlash_compensator+0x4a>
		current_direction = prismatic_last_cmd_direction;
 80058a8:	4b39      	ldr	r3, [pc, #228]	@ (8005990 <prismatic_backlash_compensator+0x12c>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	617b      	str	r3, [r7, #20]
	}

	// Detect direction change
	if (current_direction != prismatic_last_cmd_direction
 80058ae:	4b38      	ldr	r3, [pc, #224]	@ (8005990 <prismatic_backlash_compensator+0x12c>)
 80058b0:	edd3 7a00 	vldr	s15, [r3]
 80058b4:	ed97 7a05 	vldr	s14, [r7, #20]
 80058b8:	eeb4 7a67 	vcmp.f32	s14, s15
 80058bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058c0:	d013      	beq.n	80058ea <prismatic_backlash_compensator+0x86>
			&& current_direction != 0.0f) {
 80058c2:	edd7 7a05 	vldr	s15, [r7, #20]
 80058c6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80058ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058ce:	d00c      	beq.n	80058ea <prismatic_backlash_compensator+0x86>
		// If direction changed, update backlash state
		prismatic_backlash_state = current_direction * prismatic_backlash;
 80058d0:	4b30      	ldr	r3, [pc, #192]	@ (8005994 <prismatic_backlash_compensator+0x130>)
 80058d2:	ed93 7a00 	vldr	s14, [r3]
 80058d6:	edd7 7a05 	vldr	s15, [r7, #20]
 80058da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058de:	4b2e      	ldr	r3, [pc, #184]	@ (8005998 <prismatic_backlash_compensator+0x134>)
 80058e0:	edc3 7a00 	vstr	s15, [r3]
		prismatic_last_cmd_direction = current_direction;
 80058e4:	4a2a      	ldr	r2, [pc, #168]	@ (8005990 <prismatic_backlash_compensator+0x12c>)
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	6013      	str	r3, [r2, #0]
	}

	// Apply adaptive compensation based on velocity
	float compensation = prismatic_backlash_state
			* PRISMATIC_BACKLASH_COMPENSATION_GAIN;
 80058ea:	4b2b      	ldr	r3, [pc, #172]	@ (8005998 <prismatic_backlash_compensator+0x134>)
 80058ec:	edd3 7a00 	vldr	s15, [r3]
	float compensation = prismatic_backlash_state
 80058f0:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 800599c <prismatic_backlash_compensator+0x138>
 80058f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80058f8:	edc7 7a04 	vstr	s15, [r7, #16]

	// Gradually reduce backlash state as we overcome the backlash
	float backlash_decay_rate = BACKLASH_DECAY_FACTOR * fabsf(cmd_vel);
 80058fc:	edd7 7a01 	vldr	s15, [r7, #4]
 8005900:	eef0 7ae7 	vabs.f32	s15, s15
 8005904:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80059a0 <prismatic_backlash_compensator+0x13c>
 8005908:	ee67 7a87 	vmul.f32	s15, s15, s14
 800590c:	edc7 7a03 	vstr	s15, [r7, #12]
	if (prismatic_backlash_state > 0.0f) {
 8005910:	4b21      	ldr	r3, [pc, #132]	@ (8005998 <prismatic_backlash_compensator+0x134>)
 8005912:	edd3 7a00 	vldr	s15, [r3]
 8005916:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800591a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800591e:	dd12      	ble.n	8005946 <prismatic_backlash_compensator+0xe2>
		prismatic_backlash_state = fmaxf(0.0f,
 8005920:	4b1d      	ldr	r3, [pc, #116]	@ (8005998 <prismatic_backlash_compensator+0x134>)
 8005922:	ed93 7a00 	vldr	s14, [r3]
 8005926:	edd7 7a03 	vldr	s15, [r7, #12]
 800592a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800592e:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 80059a4 <prismatic_backlash_compensator+0x140>
 8005932:	eeb0 0a67 	vmov.f32	s0, s15
 8005936:	f009 ff8b 	bl	800f850 <fmaxf>
 800593a:	eef0 7a40 	vmov.f32	s15, s0
 800593e:	4b16      	ldr	r3, [pc, #88]	@ (8005998 <prismatic_backlash_compensator+0x134>)
 8005940:	edc3 7a00 	vstr	s15, [r3]
 8005944:	e019      	b.n	800597a <prismatic_backlash_compensator+0x116>
				prismatic_backlash_state - backlash_decay_rate);
	} else if (prismatic_backlash_state < 0.0f) {
 8005946:	4b14      	ldr	r3, [pc, #80]	@ (8005998 <prismatic_backlash_compensator+0x134>)
 8005948:	edd3 7a00 	vldr	s15, [r3]
 800594c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005950:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005954:	d511      	bpl.n	800597a <prismatic_backlash_compensator+0x116>
		prismatic_backlash_state = fminf(0.0f,
 8005956:	4b10      	ldr	r3, [pc, #64]	@ (8005998 <prismatic_backlash_compensator+0x134>)
 8005958:	ed93 7a00 	vldr	s14, [r3]
 800595c:	edd7 7a03 	vldr	s15, [r7, #12]
 8005960:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005964:	eddf 0a0f 	vldr	s1, [pc, #60]	@ 80059a4 <prismatic_backlash_compensator+0x140>
 8005968:	eeb0 0a67 	vmov.f32	s0, s15
 800596c:	f009 ff8d 	bl	800f88a <fminf>
 8005970:	eef0 7a40 	vmov.f32	s15, s0
 8005974:	4b08      	ldr	r3, [pc, #32]	@ (8005998 <prismatic_backlash_compensator+0x134>)
 8005976:	edc3 7a00 	vstr	s15, [r3]
				prismatic_backlash_state + backlash_decay_rate);
	}

	return compensation;
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	ee07 3a90 	vmov	s15, r3
}
 8005980:	eeb0 0a67 	vmov.f32	s0, s15
 8005984:	3718      	adds	r7, #24
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}
 800598a:	bf00      	nop
 800598c:	bf800000 	.word	0xbf800000
 8005990:	20000324 	.word	0x20000324
 8005994:	200000f4 	.word	0x200000f4
 8005998:	20000328 	.word	0x20000328
 800599c:	3dcccccd 	.word	0x3dcccccd
 80059a0:	3c23d70a 	.word	0x3c23d70a
 80059a4:	00000000 	.word	0x00000000

080059a8 <velocity_control>:
/**
 * @brief Optimized velocity control implementation for both axes
 * @param prismatic_target_mmps Target velocity for prismatic axis in mm/s
 * @param revolute_target_rads Target velocity for revolute axis in rad/s
 */
void velocity_control(float prismatic_target_mmps, float revolute_target_rads) {
 80059a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80059ac:	ed2d 8b02 	vpush	{d8}
 80059b0:	b08b      	sub	sp, #44	@ 0x2c
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	ed87 0a01 	vstr	s0, [r7, #4]
 80059b8:	edc7 0a00 	vstr	s1, [r7]
	// -- Prismatic axis control --
	// Calculate current velocity from Kalman filter
	float pris_vin = mapf(prismatic_axis.command_pos, -65535.0f, 65535.0f,
 80059bc:	4b9c      	ldr	r3, [pc, #624]	@ (8005c30 <velocity_control+0x288>)
 80059be:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80059c2:	eeb2 2a08 	vmov.f32	s4, #40	@ 0x41400000  12.0
 80059c6:	eefa 1a08 	vmov.f32	s3, #168	@ 0xc1400000 -12.0
 80059ca:	ed9f 1a9a 	vldr	s2, [pc, #616]	@ 8005c34 <velocity_control+0x28c>
 80059ce:	eddf 0a9a 	vldr	s1, [pc, #616]	@ 8005c38 <velocity_control+0x290>
 80059d2:	eeb0 0a67 	vmov.f32	s0, s15
 80059d6:	f7fc f9a3 	bl	8001d20 <mapf>
 80059da:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
			-12.0f, 12.0f);
	float pris_vel = MotorKalman_Estimate(&prismatic_kalman, pris_vin,
 80059de:	4b97      	ldr	r3, [pc, #604]	@ (8005c3c <velocity_control+0x294>)
 80059e0:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80059e4:	eef0 0a67 	vmov.f32	s1, s15
 80059e8:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 80059ec:	4894      	ldr	r0, [pc, #592]	@ (8005c40 <velocity_control+0x298>)
 80059ee:	f7fd f965 	bl	8002cbc <MotorKalman_Estimate>
 80059f2:	eeb0 7a40 	vmov.f32	s14, s0
			prismatic_encoder.rads)
			* Disturbance_Constant.prismatic_pulley_radius * 1000.0f;
 80059f6:	4b93      	ldr	r3, [pc, #588]	@ (8005c44 <velocity_control+0x29c>)
 80059f8:	edd3 7a04 	vldr	s15, [r3, #16]
 80059fc:	ee67 7a27 	vmul.f32	s15, s14, s15
	float pris_vel = MotorKalman_Estimate(&prismatic_kalman, pris_vin,
 8005a00:	ed9f 7a91 	vldr	s14, [pc, #580]	@ 8005c48 <velocity_control+0x2a0>
 8005a04:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005a08:	edc7 7a08 	vstr	s15, [r7, #32]

	// Safety check for NaN
	pris_vel = isnan(pris_vel) ? 0.0f : pris_vel;
 8005a0c:	ed97 7a08 	vldr	s14, [r7, #32]
 8005a10:	edd7 7a08 	vldr	s15, [r7, #32]
 8005a14:	eeb4 7a67 	vcmp.f32	s14, s15
 8005a18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a1c:	d601      	bvs.n	8005a22 <velocity_control+0x7a>
 8005a1e:	6a3b      	ldr	r3, [r7, #32]
 8005a20:	e001      	b.n	8005a26 <velocity_control+0x7e>
 8005a22:	f04f 0300 	mov.w	r3, #0
 8005a26:	623b      	str	r3, [r7, #32]

	// Calculate velocity error and PID output
	float pris_vel_error = prismatic_target_mmps - pris_vel;
 8005a28:	ed97 7a01 	vldr	s14, [r7, #4]
 8005a2c:	edd7 7a08 	vldr	s15, [r7, #32]
 8005a30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005a34:	edc7 7a07 	vstr	s15, [r7, #28]
	prismatic_axis.command_pos = PID_CONTROLLER_Compute(&prismatic_velocity_pid,
 8005a38:	ed97 0a07 	vldr	s0, [r7, #28]
 8005a3c:	4883      	ldr	r0, [pc, #524]	@ (8005c4c <velocity_control+0x2a4>)
 8005a3e:	f7fb fbeb 	bl	8001218 <PID_CONTROLLER_Compute>
 8005a42:	eef0 7a40 	vmov.f32	s15, s0
 8005a46:	4b7a      	ldr	r3, [pc, #488]	@ (8005c30 <velocity_control+0x288>)
 8005a48:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
			pris_vel_error);

	// -- Revolute axis control --
	// Calculate current velocity from Kalman filter
	float rev_vin = mapf(revolute_axis.command_pos, -65535.0f, 65535.0f, -12.0f,
 8005a4c:	4b80      	ldr	r3, [pc, #512]	@ (8005c50 <velocity_control+0x2a8>)
 8005a4e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8005a52:	eeb2 2a08 	vmov.f32	s4, #40	@ 0x41400000  12.0
 8005a56:	eefa 1a08 	vmov.f32	s3, #168	@ 0xc1400000 -12.0
 8005a5a:	ed9f 1a76 	vldr	s2, [pc, #472]	@ 8005c34 <velocity_control+0x28c>
 8005a5e:	eddf 0a76 	vldr	s1, [pc, #472]	@ 8005c38 <velocity_control+0x290>
 8005a62:	eeb0 0a67 	vmov.f32	s0, s15
 8005a66:	f7fc f95b 	bl	8001d20 <mapf>
 8005a6a:	ed87 0a06 	vstr	s0, [r7, #24]
			12.0f);
	float rev_vel = MotorKalman_Estimate(&revolute_kalman, rev_vin,
 8005a6e:	4b79      	ldr	r3, [pc, #484]	@ (8005c54 <velocity_control+0x2ac>)
 8005a70:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8005a74:	eef0 0a67 	vmov.f32	s1, s15
 8005a78:	ed97 0a06 	vldr	s0, [r7, #24]
 8005a7c:	4876      	ldr	r0, [pc, #472]	@ (8005c58 <velocity_control+0x2b0>)
 8005a7e:	f7fd f91d 	bl	8002cbc <MotorKalman_Estimate>
 8005a82:	ed87 0a05 	vstr	s0, [r7, #20]
			revolute_encoder.rads);

	// Safety check for NaN
	rev_vel = isnan(rev_vel) ? 0.0f : rev_vel;
 8005a86:	ed97 7a05 	vldr	s14, [r7, #20]
 8005a8a:	edd7 7a05 	vldr	s15, [r7, #20]
 8005a8e:	eeb4 7a67 	vcmp.f32	s14, s15
 8005a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a96:	d601      	bvs.n	8005a9c <velocity_control+0xf4>
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	e001      	b.n	8005aa0 <velocity_control+0xf8>
 8005a9c:	f04f 0300 	mov.w	r3, #0
 8005aa0:	617b      	str	r3, [r7, #20]

	// Calculate velocity error and PID output
	float rev_vel_error = revolute_target_rads - rev_vel;
 8005aa2:	ed97 7a00 	vldr	s14, [r7]
 8005aa6:	edd7 7a05 	vldr	s15, [r7, #20]
 8005aaa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005aae:	edc7 7a04 	vstr	s15, [r7, #16]
	revolute_axis.command_pos = PID_CONTROLLER_Compute(&revolute_velocity_pid,
 8005ab2:	ed97 0a04 	vldr	s0, [r7, #16]
 8005ab6:	4869      	ldr	r0, [pc, #420]	@ (8005c5c <velocity_control+0x2b4>)
 8005ab8:	f7fb fbae 	bl	8001218 <PID_CONTROLLER_Compute>
 8005abc:	eef0 7a40 	vmov.f32	s15, s0
 8005ac0:	4b63      	ldr	r3, [pc, #396]	@ (8005c50 <velocity_control+0x2a8>)
 8005ac2:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
			rev_vel_error);

	// Get normalized angle once for all feed-forward calculations
	float normalized_angle = normalize_angle(revolute_encoder.rads);
 8005ac6:	4b63      	ldr	r3, [pc, #396]	@ (8005c54 <velocity_control+0x2ac>)
 8005ac8:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8005acc:	eeb0 0a67 	vmov.f32	s0, s15
 8005ad0:	f7ff f84c 	bl	8004b6c <normalize_angle>
 8005ad4:	ed87 0a03 	vstr	s0, [r7, #12]
	float pris_position_m = prismatic_encoder.mm / 1000.0f; // Convert mm to m, calculate once
 8005ad8:	4b58      	ldr	r3, [pc, #352]	@ (8005c3c <velocity_control+0x294>)
 8005ada:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 8005ade:	eddf 6a5a 	vldr	s13, [pc, #360]	@ 8005c48 <velocity_control+0x2a0>
 8005ae2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005ae6:	edc7 7a02 	vstr	s15, [r7, #8]

	// -- Add feed-forward terms --
	// Prismatic axis feed-forward
	prismatic_axis.command_pos += PRISMATIC_MOTOR_FFD_Compute(
 8005aea:	edd7 7a01 	vldr	s15, [r7, #4]
 8005aee:	eddf 6a56 	vldr	s13, [pc, #344]	@ 8005c48 <velocity_control+0x2a0>
 8005af2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005af6:	eeb0 0a47 	vmov.f32	s0, s14
 8005afa:	4859      	ldr	r0, [pc, #356]	@ (8005c60 <velocity_control+0x2b8>)
 8005afc:	f7fb fea8 	bl	8001850 <PRISMATIC_MOTOR_FFD_Compute>
 8005b00:	eeb0 8a40 	vmov.f32	s16, s0
			&prismatic_motor_ffd, prismatic_target_mmps / 1000.0f) // FFD (velocity)
			+ prismatic_backlash_compensator(prismatic_target_mmps); // Backlash
 8005b04:	ed97 0a01 	vldr	s0, [r7, #4]
 8005b08:	f7ff feac 	bl	8005864 <prismatic_backlash_compensator>
 8005b0c:	eef0 7a40 	vmov.f32	s15, s0
 8005b10:	ee38 7a27 	vadd.f32	s14, s16, s15
	prismatic_axis.command_pos += PRISMATIC_MOTOR_FFD_Compute(
 8005b14:	4b46      	ldr	r3, [pc, #280]	@ (8005c30 <velocity_control+0x288>)
 8005b16:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8005b1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b1e:	4b44      	ldr	r3, [pc, #272]	@ (8005c30 <velocity_control+0x288>)
 8005b20:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

			// Revolute axis feed-forward
	revolute_axis.command_pos += REVOLUTE_MOTOR_FFD_Compute(&revolute_motor_ffd,
 8005b24:	ed97 0a00 	vldr	s0, [r7]
 8005b28:	484e      	ldr	r0, [pc, #312]	@ (8005c64 <velocity_control+0x2bc>)
 8005b2a:	f7fb fd13 	bl	8001554 <REVOLUTE_MOTOR_FFD_Compute>
 8005b2e:	eeb0 8a40 	vmov.f32	s16, s0
			revolute_target_rads) // FFD (velocity)
			+ REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd, normalized_angle,
 8005b32:	ed97 1a02 	vldr	s2, [r7, #8]
 8005b36:	eddf 0a4c 	vldr	s1, [pc, #304]	@ 8005c68 <velocity_control+0x2c0>
 8005b3a:	ed97 0a03 	vldr	s0, [r7, #12]
 8005b3e:	484b      	ldr	r0, [pc, #300]	@ (8005c6c <velocity_control+0x2c4>)
 8005b40:	f7fb fd9c 	bl	800167c <REVOLUTE_MOTOR_DFD_Compute>
 8005b44:	eef0 7a40 	vmov.f32	s15, s0
 8005b48:	ee38 8a27 	vadd.f32	s16, s16, s15
					0.0f, pris_position_m) // DFD (disturbance)
			+ revolute_backlash_compensator(revolute_target_rads); // Backlash
 8005b4c:	ed97 0a00 	vldr	s0, [r7]
 8005b50:	f7ff fde6 	bl	8005720 <revolute_backlash_compensator>
 8005b54:	eef0 7a40 	vmov.f32	s15, s0
 8005b58:	ee38 7a27 	vadd.f32	s14, s16, s15
	revolute_axis.command_pos += REVOLUTE_MOTOR_FFD_Compute(&revolute_motor_ffd,
 8005b5c:	4b3c      	ldr	r3, [pc, #240]	@ (8005c50 <velocity_control+0x2a8>)
 8005b5e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8005b62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b66:	4b3a      	ldr	r3, [pc, #232]	@ (8005c50 <velocity_control+0x2a8>)
 8005b68:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

			// Apply saturation to both axes in one step
	prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8005b6c:	4b30      	ldr	r3, [pc, #192]	@ (8005c30 <velocity_control+0x288>)
 8005b6e:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
			ZGX45RGG_400RPM_Constant.U_max, -ZGX45RGG_400RPM_Constant.U_max);
 8005b72:	4b3f      	ldr	r3, [pc, #252]	@ (8005c70 <velocity_control+0x2c8>)
 8005b74:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8005b78:	4610      	mov	r0, r2
 8005b7a:	4619      	mov	r1, r3
 8005b7c:	f7fa ffa2 	bl	8000ac4 <__aeabi_d2iz>
 8005b80:	4606      	mov	r6, r0
			ZGX45RGG_400RPM_Constant.U_max, -ZGX45RGG_400RPM_Constant.U_max);
 8005b82:	4b3b      	ldr	r3, [pc, #236]	@ (8005c70 <velocity_control+0x2c8>)
 8005b84:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8005b88:	4690      	mov	r8, r2
 8005b8a:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
	prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8005b8e:	4640      	mov	r0, r8
 8005b90:	4649      	mov	r1, r9
 8005b92:	f7fa ff97 	bl	8000ac4 <__aeabi_d2iz>
 8005b96:	4603      	mov	r3, r0
 8005b98:	4619      	mov	r1, r3
 8005b9a:	4630      	mov	r0, r6
 8005b9c:	eeb0 0a48 	vmov.f32	s0, s16
 8005ba0:	f7fb fad8 	bl	8001154 <PWM_Satuation>
 8005ba4:	ee07 0a90 	vmov	s15, r0
 8005ba8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005bac:	4b20      	ldr	r3, [pc, #128]	@ (8005c30 <velocity_control+0x288>)
 8005bae:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8005bb2:	4b27      	ldr	r3, [pc, #156]	@ (8005c50 <velocity_control+0x2a8>)
 8005bb4:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
			ZGX45RGG_150RPM_Constant.U_max, -ZGX45RGG_150RPM_Constant.U_max);
 8005bb8:	4b2e      	ldr	r3, [pc, #184]	@ (8005c74 <velocity_control+0x2cc>)
 8005bba:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8005bbe:	4610      	mov	r0, r2
 8005bc0:	4619      	mov	r1, r3
 8005bc2:	f7fa ff7f 	bl	8000ac4 <__aeabi_d2iz>
 8005bc6:	4606      	mov	r6, r0
			ZGX45RGG_150RPM_Constant.U_max, -ZGX45RGG_150RPM_Constant.U_max);
 8005bc8:	4b2a      	ldr	r3, [pc, #168]	@ (8005c74 <velocity_control+0x2cc>)
 8005bca:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8005bce:	4614      	mov	r4, r2
 8005bd0:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
	revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8005bd4:	4620      	mov	r0, r4
 8005bd6:	4629      	mov	r1, r5
 8005bd8:	f7fa ff74 	bl	8000ac4 <__aeabi_d2iz>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	4619      	mov	r1, r3
 8005be0:	4630      	mov	r0, r6
 8005be2:	eeb0 0a48 	vmov.f32	s0, s16
 8005be6:	f7fb fab5 	bl	8001154 <PWM_Satuation>
 8005bea:	ee07 0a90 	vmov	s15, r0
 8005bee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005bf2:	4b17      	ldr	r3, [pc, #92]	@ (8005c50 <velocity_control+0x2a8>)
 8005bf4:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	// Apply commands to motors
	MDXX_set_range(&prismatic_motor, 2000, prismatic_axis.command_pos);
 8005bf8:	4b0d      	ldr	r3, [pc, #52]	@ (8005c30 <velocity_control+0x288>)
 8005bfa:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8005bfe:	eef0 0a67 	vmov.f32	s1, s15
 8005c02:	ed9f 0a1d 	vldr	s0, [pc, #116]	@ 8005c78 <velocity_control+0x2d0>
 8005c06:	481d      	ldr	r0, [pc, #116]	@ (8005c7c <velocity_control+0x2d4>)
 8005c08:	f7fb fbbc 	bl	8001384 <MDXX_set_range>
	MDXX_set_range(&revolute_motor, 2000, revolute_axis.command_pos);
 8005c0c:	4b10      	ldr	r3, [pc, #64]	@ (8005c50 <velocity_control+0x2a8>)
 8005c0e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8005c12:	eef0 0a67 	vmov.f32	s1, s15
 8005c16:	ed9f 0a18 	vldr	s0, [pc, #96]	@ 8005c78 <velocity_control+0x2d0>
 8005c1a:	4819      	ldr	r0, [pc, #100]	@ (8005c80 <velocity_control+0x2d8>)
 8005c1c:	f7fb fbb2 	bl	8001384 <MDXX_set_range>
}
 8005c20:	bf00      	nop
 8005c22:	372c      	adds	r7, #44	@ 0x2c
 8005c24:	46bd      	mov	sp, r7
 8005c26:	ecbd 8b02 	vpop	{d8}
 8005c2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005c2e:	bf00      	nop
 8005c30:	20000294 	.word	0x20000294
 8005c34:	477fff00 	.word	0x477fff00
 8005c38:	c77fff00 	.word	0xc77fff00
 8005c3c:	200003e8 	.word	0x200003e8
 8005c40:	20000a3c 	.word	0x20000a3c
 8005c44:	200000c0 	.word	0x200000c0
 8005c48:	447a0000 	.word	0x447a0000
 8005c4c:	200004c8 	.word	0x200004c8
 8005c50:	200002d8 	.word	0x200002d8
 8005c54:	20000444 	.word	0x20000444
 8005c58:	20000da8 	.word	0x20000da8
 8005c5c:	20000518 	.word	0x20000518
 8005c60:	20000540 	.word	0x20000540
 8005c64:	2000054c 	.word	0x2000054c
 8005c68:	00000000 	.word	0x00000000
 8005c6c:	20000550 	.word	0x20000550
 8005c70:	20000060 	.word	0x20000060
 8005c74:	20000000 	.word	0x20000000
 8005c78:	44fa0000 	.word	0x44fa0000
 8005c7c:	20000350 	.word	0x20000350
 8005c80:	2000039c 	.word	0x2000039c

08005c84 <process_joystick_control>:

/**
 * @brief Process joystick control in timer callback function
 */
void process_joystick_control(void) {
 8005c84:	b5b0      	push	{r4, r5, r7, lr}
 8005c86:	b082      	sub	sp, #8
 8005c88:	af00      	add	r7, sp, #0
	// State machine for joystick control
	switch (joystick_state) {
 8005c8a:	4ba5      	ldr	r3, [pc, #660]	@ (8005f20 <process_joystick_control+0x29c>)
 8005c8c:	781b      	ldrb	r3, [r3, #0]
 8005c8e:	2b02      	cmp	r3, #2
 8005c90:	f000 8124 	beq.w	8005edc <process_joystick_control+0x258>
 8005c94:	2b02      	cmp	r3, #2
 8005c96:	f300 813a 	bgt.w	8005f0e <process_joystick_control+0x28a>
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d002      	beq.n	8005ca4 <process_joystick_control+0x20>
 8005c9e:	2b01      	cmp	r3, #1
 8005ca0:	d009      	beq.n	8005cb6 <process_joystick_control+0x32>
 8005ca2:	e134      	b.n	8005f0e <process_joystick_control+0x28a>
	case JOY_IDLE:
		// Not in joystick mode, nothing to do
		rev_velocity_target = 0.0f;
 8005ca4:	4b9f      	ldr	r3, [pc, #636]	@ (8005f24 <process_joystick_control+0x2a0>)
 8005ca6:	f04f 0200 	mov.w	r2, #0
 8005caa:	601a      	str	r2, [r3, #0]
		pris_velocity_target = 0.0f;
 8005cac:	4b9e      	ldr	r3, [pc, #632]	@ (8005f28 <process_joystick_control+0x2a4>)
 8005cae:	f04f 0200 	mov.w	r2, #0
 8005cb2:	601a      	str	r2, [r3, #0]
		break;
 8005cb4:	e12f      	b.n	8005f16 <process_joystick_control+0x292>

	case JOY_ACTIVE:
        prismatic_axis.position = prismatic_encoder.mm;
 8005cb6:	4b9d      	ldr	r3, [pc, #628]	@ (8005f2c <process_joystick_control+0x2a8>)
 8005cb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005cba:	4a9d      	ldr	r2, [pc, #628]	@ (8005f30 <process_joystick_control+0x2ac>)
 8005cbc:	6013      	str	r3, [r2, #0]
        revolute_axis.position = revolute_encoder.rads;;
 8005cbe:	4b9d      	ldr	r3, [pc, #628]	@ (8005f34 <process_joystick_control+0x2b0>)
 8005cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cc2:	4a9d      	ldr	r2, [pc, #628]	@ (8005f38 <process_joystick_control+0x2b4>)
 8005cc4:	6013      	str	r3, [r2, #0]

		// Check if exit is requested
		HAL_GPIO_WritePin(PILOT_GPIO_Port, PILOT_Pin, 1);
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005ccc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005cd0:	f004 fad4 	bl	800a27c <HAL_GPIO_WritePin>

		if (b4) {
 8005cd4:	4b99      	ldr	r3, [pc, #612]	@ (8005f3c <process_joystick_control+0x2b8>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d017      	beq.n	8005d0c <process_joystick_control+0x88>
			// Immediately stop motors for safety
			pris_velocity_target = 0.0f;
 8005cdc:	4b92      	ldr	r3, [pc, #584]	@ (8005f28 <process_joystick_control+0x2a4>)
 8005cde:	f04f 0200 	mov.w	r2, #0
 8005ce2:	601a      	str	r2, [r3, #0]
			rev_velocity_target = 0.0f;
 8005ce4:	4b8f      	ldr	r3, [pc, #572]	@ (8005f24 <process_joystick_control+0x2a0>)
 8005ce6:	f04f 0200 	mov.w	r2, #0
 8005cea:	601a      	str	r2, [r3, #0]
			velocity_control(pris_velocity_target, rev_velocity_target);
 8005cec:	4b8e      	ldr	r3, [pc, #568]	@ (8005f28 <process_joystick_control+0x2a4>)
 8005cee:	edd3 7a00 	vldr	s15, [r3]
 8005cf2:	4b8c      	ldr	r3, [pc, #560]	@ (8005f24 <process_joystick_control+0x2a0>)
 8005cf4:	ed93 7a00 	vldr	s14, [r3]
 8005cf8:	eef0 0a47 	vmov.f32	s1, s14
 8005cfc:	eeb0 0a67 	vmov.f32	s0, s15
 8005d00:	f7ff fe52 	bl	80059a8 <velocity_control>

			joystick_state = JOY_EXIT_REQUESTED;
 8005d04:	4b86      	ldr	r3, [pc, #536]	@ (8005f20 <process_joystick_control+0x29c>)
 8005d06:	2202      	movs	r2, #2
 8005d08:	701a      	strb	r2, [r3, #0]
			break;
 8005d0a:	e104      	b.n	8005f16 <process_joystick_control+0x292>
		}

		// Process prismatic axis joystick control
		if (up_photo && joystick_x > JOYSTICK_THRESHOLD) {
 8005d0c:	4b8c      	ldr	r3, [pc, #560]	@ (8005f40 <process_joystick_control+0x2bc>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d00e      	beq.n	8005d32 <process_joystick_control+0xae>
 8005d14:	4b8b      	ldr	r3, [pc, #556]	@ (8005f44 <process_joystick_control+0x2c0>)
 8005d16:	edd3 7a00 	vldr	s15, [r3]
 8005d1a:	ed9f 7a8b 	vldr	s14, [pc, #556]	@ 8005f48 <process_joystick_control+0x2c4>
 8005d1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005d22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d26:	dd04      	ble.n	8005d32 <process_joystick_control+0xae>
			pris_velocity_target = 0.0f;
 8005d28:	4b7f      	ldr	r3, [pc, #508]	@ (8005f28 <process_joystick_control+0x2a4>)
 8005d2a:	f04f 0200 	mov.w	r2, #0
 8005d2e:	601a      	str	r2, [r3, #0]
 8005d30:	e055      	b.n	8005dde <process_joystick_control+0x15a>
		} else if (low_photo && joystick_x < -JOYSTICK_THRESHOLD) {
 8005d32:	4b86      	ldr	r3, [pc, #536]	@ (8005f4c <process_joystick_control+0x2c8>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d00e      	beq.n	8005d58 <process_joystick_control+0xd4>
 8005d3a:	4b82      	ldr	r3, [pc, #520]	@ (8005f44 <process_joystick_control+0x2c0>)
 8005d3c:	edd3 7a00 	vldr	s15, [r3]
 8005d40:	ed9f 7a83 	vldr	s14, [pc, #524]	@ 8005f50 <process_joystick_control+0x2cc>
 8005d44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005d48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d4c:	d504      	bpl.n	8005d58 <process_joystick_control+0xd4>
			pris_velocity_target = 0.0f;
 8005d4e:	4b76      	ldr	r3, [pc, #472]	@ (8005f28 <process_joystick_control+0x2a4>)
 8005d50:	f04f 0200 	mov.w	r2, #0
 8005d54:	601a      	str	r2, [r3, #0]
 8005d56:	e042      	b.n	8005dde <process_joystick_control+0x15a>
		} else if (joystick_x > JOYSTICK_THRESHOLD) {
 8005d58:	4b7a      	ldr	r3, [pc, #488]	@ (8005f44 <process_joystick_control+0x2c0>)
 8005d5a:	edd3 7a00 	vldr	s15, [r3]
 8005d5e:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 8005f48 <process_joystick_control+0x2c4>
 8005d62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005d66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d6a:	dd17      	ble.n	8005d9c <process_joystick_control+0x118>
			pris_velocity_target = -ZGX45RGG_400RPM_Constant.sd_max / 2.0f;
 8005d6c:	4b79      	ldr	r3, [pc, #484]	@ (8005f54 <process_joystick_control+0x2d0>)
 8005d6e:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8005d72:	4614      	mov	r4, r2
 8005d74:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8005d78:	f04f 0200 	mov.w	r2, #0
 8005d7c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005d80:	4620      	mov	r0, r4
 8005d82:	4629      	mov	r1, r5
 8005d84:	f7fa fd2e 	bl	80007e4 <__aeabi_ddiv>
 8005d88:	4602      	mov	r2, r0
 8005d8a:	460b      	mov	r3, r1
 8005d8c:	4610      	mov	r0, r2
 8005d8e:	4619      	mov	r1, r3
 8005d90:	f7fa fee0 	bl	8000b54 <__aeabi_d2f>
 8005d94:	4603      	mov	r3, r0
 8005d96:	4a64      	ldr	r2, [pc, #400]	@ (8005f28 <process_joystick_control+0x2a4>)
 8005d98:	6013      	str	r3, [r2, #0]
 8005d9a:	e020      	b.n	8005dde <process_joystick_control+0x15a>
		} else if (joystick_x < -JOYSTICK_THRESHOLD) {
 8005d9c:	4b69      	ldr	r3, [pc, #420]	@ (8005f44 <process_joystick_control+0x2c0>)
 8005d9e:	edd3 7a00 	vldr	s15, [r3]
 8005da2:	ed9f 7a6b 	vldr	s14, [pc, #428]	@ 8005f50 <process_joystick_control+0x2cc>
 8005da6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005daa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dae:	d512      	bpl.n	8005dd6 <process_joystick_control+0x152>
			pris_velocity_target = ZGX45RGG_400RPM_Constant.sd_max / 2.0f;
 8005db0:	4b68      	ldr	r3, [pc, #416]	@ (8005f54 <process_joystick_control+0x2d0>)
 8005db2:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8005db6:	f04f 0200 	mov.w	r2, #0
 8005dba:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005dbe:	f7fa fd11 	bl	80007e4 <__aeabi_ddiv>
 8005dc2:	4602      	mov	r2, r0
 8005dc4:	460b      	mov	r3, r1
 8005dc6:	4610      	mov	r0, r2
 8005dc8:	4619      	mov	r1, r3
 8005dca:	f7fa fec3 	bl	8000b54 <__aeabi_d2f>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	4a55      	ldr	r2, [pc, #340]	@ (8005f28 <process_joystick_control+0x2a4>)
 8005dd2:	6013      	str	r3, [r2, #0]
 8005dd4:	e003      	b.n	8005dde <process_joystick_control+0x15a>
		} else {
			pris_velocity_target = 0.0f;
 8005dd6:	4b54      	ldr	r3, [pc, #336]	@ (8005f28 <process_joystick_control+0x2a4>)
 8005dd8:	f04f 0200 	mov.w	r2, #0
 8005ddc:	601a      	str	r2, [r3, #0]
		}

		// Process revolute axis joystick control
		float revolute_deg = UnitConverter_angle(&converter_system,
 8005dde:	4b55      	ldr	r3, [pc, #340]	@ (8005f34 <process_joystick_control+0x2b0>)
 8005de0:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8005de4:	220e      	movs	r2, #14
 8005de6:	210f      	movs	r1, #15
 8005de8:	eeb0 0a67 	vmov.f32	s0, s15
 8005dec:	485a      	ldr	r0, [pc, #360]	@ (8005f58 <process_joystick_control+0x2d4>)
 8005dee:	f7fe fb95 	bl	800451c <UnitConverter_angle>
 8005df2:	ed87 0a01 	vstr	s0, [r7, #4]
				revolute_encoder.rads, UNIT_RADIAN, UNIT_DEGREE);

		if ((revolute_deg > 175.0f && joystick_y > JOYSTICK_THRESHOLD)
 8005df6:	edd7 7a01 	vldr	s15, [r7, #4]
 8005dfa:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8005f5c <process_joystick_control+0x2d8>
 8005dfe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e06:	dd09      	ble.n	8005e1c <process_joystick_control+0x198>
 8005e08:	4b55      	ldr	r3, [pc, #340]	@ (8005f60 <process_joystick_control+0x2dc>)
 8005e0a:	edd3 7a00 	vldr	s15, [r3]
 8005e0e:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 8005f48 <process_joystick_control+0x2c4>
 8005e12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e1a:	dc12      	bgt.n	8005e42 <process_joystick_control+0x1be>
				|| (revolute_deg < -175.0f && joystick_y < -JOYSTICK_THRESHOLD)) {
 8005e1c:	edd7 7a01 	vldr	s15, [r7, #4]
 8005e20:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 8005f64 <process_joystick_control+0x2e0>
 8005e24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e2c:	d50e      	bpl.n	8005e4c <process_joystick_control+0x1c8>
 8005e2e:	4b4c      	ldr	r3, [pc, #304]	@ (8005f60 <process_joystick_control+0x2dc>)
 8005e30:	edd3 7a00 	vldr	s15, [r3]
 8005e34:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 8005f50 <process_joystick_control+0x2cc>
 8005e38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e40:	d504      	bpl.n	8005e4c <process_joystick_control+0x1c8>
			rev_velocity_target = 0.0f;
 8005e42:	4b38      	ldr	r3, [pc, #224]	@ (8005f24 <process_joystick_control+0x2a0>)
 8005e44:	f04f 0200 	mov.w	r2, #0
 8005e48:	601a      	str	r2, [r3, #0]
 8005e4a:	e032      	b.n	8005eb2 <process_joystick_control+0x22e>
		} else if (joystick_y > JOYSTICK_THRESHOLD) {
 8005e4c:	4b44      	ldr	r3, [pc, #272]	@ (8005f60 <process_joystick_control+0x2dc>)
 8005e4e:	edd3 7a00 	vldr	s15, [r3]
 8005e52:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 8005f48 <process_joystick_control+0x2c4>
 8005e56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e5e:	dd0a      	ble.n	8005e76 <process_joystick_control+0x1f2>
			rev_velocity_target = ZGX45RGG_150RPM_Constant.qd_max;
 8005e60:	4b41      	ldr	r3, [pc, #260]	@ (8005f68 <process_joystick_control+0x2e4>)
 8005e62:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8005e66:	4610      	mov	r0, r2
 8005e68:	4619      	mov	r1, r3
 8005e6a:	f7fa fe73 	bl	8000b54 <__aeabi_d2f>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	4a2c      	ldr	r2, [pc, #176]	@ (8005f24 <process_joystick_control+0x2a0>)
 8005e72:	6013      	str	r3, [r2, #0]
 8005e74:	e01d      	b.n	8005eb2 <process_joystick_control+0x22e>
		} else if (joystick_y < -JOYSTICK_THRESHOLD) {
 8005e76:	4b3a      	ldr	r3, [pc, #232]	@ (8005f60 <process_joystick_control+0x2dc>)
 8005e78:	edd3 7a00 	vldr	s15, [r3]
 8005e7c:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8005f50 <process_joystick_control+0x2cc>
 8005e80:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e88:	d50f      	bpl.n	8005eaa <process_joystick_control+0x226>
			rev_velocity_target = -ZGX45RGG_150RPM_Constant.qd_max;
 8005e8a:	4b37      	ldr	r3, [pc, #220]	@ (8005f68 <process_joystick_control+0x2e4>)
 8005e8c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8005e90:	4610      	mov	r0, r2
 8005e92:	4619      	mov	r1, r3
 8005e94:	f7fa fe5e 	bl	8000b54 <__aeabi_d2f>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	ee07 3a90 	vmov	s15, r3
 8005e9e:	eef1 7a67 	vneg.f32	s15, s15
 8005ea2:	4b20      	ldr	r3, [pc, #128]	@ (8005f24 <process_joystick_control+0x2a0>)
 8005ea4:	edc3 7a00 	vstr	s15, [r3]
 8005ea8:	e003      	b.n	8005eb2 <process_joystick_control+0x22e>
		} else {
			rev_velocity_target = 0.0f;
 8005eaa:	4b1e      	ldr	r3, [pc, #120]	@ (8005f24 <process_joystick_control+0x2a0>)
 8005eac:	f04f 0200 	mov.w	r2, #0
 8005eb0:	601a      	str	r2, [r3, #0]
		}

        velocity_control(pris_velocity_target, rev_velocity_target);
 8005eb2:	4b1d      	ldr	r3, [pc, #116]	@ (8005f28 <process_joystick_control+0x2a4>)
 8005eb4:	edd3 7a00 	vldr	s15, [r3]
 8005eb8:	4b1a      	ldr	r3, [pc, #104]	@ (8005f24 <process_joystick_control+0x2a0>)
 8005eba:	ed93 7a00 	vldr	s14, [r3]
 8005ebe:	eef0 0a47 	vmov.f32	s1, s14
 8005ec2:	eeb0 0a67 	vmov.f32	s0, s15
 8005ec6:	f7ff fd6f 	bl	80059a8 <velocity_control>

        prismatic_axis.position = prismatic_encoder.mm;
 8005eca:	4b18      	ldr	r3, [pc, #96]	@ (8005f2c <process_joystick_control+0x2a8>)
 8005ecc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ece:	4a18      	ldr	r2, [pc, #96]	@ (8005f30 <process_joystick_control+0x2ac>)
 8005ed0:	6013      	str	r3, [r2, #0]
        revolute_axis.position = revolute_encoder.rads;
 8005ed2:	4b18      	ldr	r3, [pc, #96]	@ (8005f34 <process_joystick_control+0x2b0>)
 8005ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ed6:	4a18      	ldr	r2, [pc, #96]	@ (8005f38 <process_joystick_control+0x2b4>)
 8005ed8:	6013      	str	r3, [r2, #0]

		break;
 8005eda:	e01c      	b.n	8005f16 <process_joystick_control+0x292>

    case JOY_EXIT_REQUESTED:
    	velocity_control(0.0f, 0.0f);
 8005edc:	eddf 0a23 	vldr	s1, [pc, #140]	@ 8005f6c <process_joystick_control+0x2e8>
 8005ee0:	ed9f 0a22 	vldr	s0, [pc, #136]	@ 8005f6c <process_joystick_control+0x2e8>
 8005ee4:	f7ff fd60 	bl	80059a8 <velocity_control>

        // Reset joystick state and velocity targets
        pris_velocity_target = 0.0f;
 8005ee8:	4b0f      	ldr	r3, [pc, #60]	@ (8005f28 <process_joystick_control+0x2a4>)
 8005eea:	f04f 0200 	mov.w	r2, #0
 8005eee:	601a      	str	r2, [r3, #0]
        rev_velocity_target = 0.0f;
 8005ef0:	4b0c      	ldr	r3, [pc, #48]	@ (8005f24 <process_joystick_control+0x2a0>)
 8005ef2:	f04f 0200 	mov.w	r2, #0
 8005ef6:	601a      	str	r2, [r3, #0]

        // Turn off indicator light
        HAL_GPIO_WritePin(PILOT_GPIO_Port, PILOT_Pin, 0);
 8005ef8:	2200      	movs	r2, #0
 8005efa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005efe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005f02:	f004 f9bb 	bl	800a27c <HAL_GPIO_WritePin>

        // Return to normal control mode
        joystick_state = JOY_IDLE;
 8005f06:	4b06      	ldr	r3, [pc, #24]	@ (8005f20 <process_joystick_control+0x29c>)
 8005f08:	2200      	movs	r2, #0
 8005f0a:	701a      	strb	r2, [r3, #0]
        break;
 8005f0c:	e003      	b.n	8005f16 <process_joystick_control+0x292>

	default:
		// Unexpected state - reset to idle
		joystick_state = JOY_IDLE;
 8005f0e:	4b04      	ldr	r3, [pc, #16]	@ (8005f20 <process_joystick_control+0x29c>)
 8005f10:	2200      	movs	r2, #0
 8005f12:	701a      	strb	r2, [r3, #0]
		break;
 8005f14:	bf00      	nop
	}
}
 8005f16:	bf00      	nop
 8005f18:	3708      	adds	r7, #8
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bdb0      	pop	{r4, r5, r7, pc}
 8005f1e:	bf00      	nop
 8005f20:	2000032f 	.word	0x2000032f
 8005f24:	20000334 	.word	0x20000334
 8005f28:	20000330 	.word	0x20000330
 8005f2c:	200003e8 	.word	0x200003e8
 8005f30:	20000294 	.word	0x20000294
 8005f34:	20000444 	.word	0x20000444
 8005f38:	200002d8 	.word	0x200002d8
 8005f3c:	20001870 	.word	0x20001870
 8005f40:	20001854 	.word	0x20001854
 8005f44:	20001844 	.word	0x20001844
 8005f48:	42200000 	.word	0x42200000
 8005f4c:	20001858 	.word	0x20001858
 8005f50:	c2200000 	.word	0xc2200000
 8005f54:	20000060 	.word	0x20000060
 8005f58:	200007b4 	.word	0x200007b4
 8005f5c:	432f0000 	.word	0x432f0000
 8005f60:	20001848 	.word	0x20001848
 8005f64:	c32f0000 	.word	0xc32f0000
 8005f68:	20000000 	.word	0x20000000
 8005f6c:	00000000 	.word	0x00000000

08005f70 <manual_control_mode>:

/**
 * @brief Simplified manual control mode function to start joystick control
 */
void manual_control_mode(void) {
 8005f70:	b580      	push	{r7, lr}
 8005f72:	af00      	add	r7, sp, #0
	// Only enter joystick mode if not already in it
	if (joystick_state == JOY_IDLE) {
 8005f74:	4b09      	ldr	r3, [pc, #36]	@ (8005f9c <manual_control_mode+0x2c>)
 8005f76:	781b      	ldrb	r3, [r3, #0]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d10c      	bne.n	8005f96 <manual_control_mode+0x26>
		// Put pen down for drawing
		plotter_pen_down();
 8005f7c:	f000 fe5a 	bl	8006c34 <plotter_pen_down>

		// Stop any active trajectories
		prismatic_axis.trajectory_active = false;
 8005f80:	4b07      	ldr	r3, [pc, #28]	@ (8005fa0 <manual_control_mode+0x30>)
 8005f82:	2200      	movs	r2, #0
 8005f84:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
		revolute_axis.trajectory_active = false;
 8005f88:	4b06      	ldr	r3, [pc, #24]	@ (8005fa4 <manual_control_mode+0x34>)
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

		// Set joystick state to active
		joystick_state = JOY_ACTIVE;
 8005f90:	4b02      	ldr	r3, [pc, #8]	@ (8005f9c <manual_control_mode+0x2c>)
 8005f92:	2201      	movs	r2, #1
 8005f94:	701a      	strb	r2, [r3, #0]
	}
}
 8005f96:	bf00      	nop
 8005f98:	bd80      	pop	{r7, pc}
 8005f9a:	bf00      	nop
 8005f9c:	2000032f 	.word	0x2000032f
 8005fa0:	20000294 	.word	0x20000294
 8005fa4:	200002d8 	.word	0x200002d8

08005fa8 <HAL_GPIO_EXTI_Callback>:

/**
 * @brief GPIO external interrupt callback
 * @param GPIO_Pin Pin that triggered the interrupt
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8005fa8:	b480      	push	{r7}
 8005faa:	b083      	sub	sp, #12
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	4603      	mov	r3, r0
 8005fb0:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == EMER_Pin) {
 8005fb2:	88fb      	ldrh	r3, [r7, #6]
 8005fb4:	2b10      	cmp	r3, #16
 8005fb6:	d105      	bne.n	8005fc4 <HAL_GPIO_EXTI_Callback+0x1c>
		rs_current_state = RS_EMERGENCY_TRIGGED;
 8005fb8:	4b05      	ldr	r3, [pc, #20]	@ (8005fd0 <HAL_GPIO_EXTI_Callback+0x28>)
 8005fba:	2205      	movs	r2, #5
 8005fbc:	701a      	strb	r2, [r3, #0]
		emer_state = PUSHED;
 8005fbe:	4b05      	ldr	r3, [pc, #20]	@ (8005fd4 <HAL_GPIO_EXTI_Callback+0x2c>)
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	701a      	strb	r2, [r3, #0]
	}
}
 8005fc4:	bf00      	nop
 8005fc6:	370c      	adds	r7, #12
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fce:	4770      	bx	lr
 8005fd0:	200000f8 	.word	0x200000f8
 8005fd4:	200000fb 	.word	0x200000fb

08005fd8 <HAL_UART_RxCpltCallback>:

/**
 * @brief UART receive complete callback
 * @param huart UART handle
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8005fd8:	b480      	push	{r7}
 8005fda:	b083      	sub	sp, #12
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
	// Handle UART reception if needed
}
 8005fe0:	bf00      	nop
 8005fe2:	370c      	adds	r7, #12
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fea:	4770      	bx	lr

08005fec <HAL_TIM_PeriodElapsedCallback>:

/**
 * @brief Timer period elapsed callback - main control loop
 * @param htim Timer handle
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8005fec:	b5b0      	push	{r4, r5, r7, lr}
 8005fee:	b082      	sub	sp, #8
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
	if (htim == &htim2) {
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	4aa3      	ldr	r2, [pc, #652]	@ (8006284 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	f040 813f 	bne.w	800627c <HAL_TIM_PeriodElapsedCallback+0x290>
		// Update sensor readings
		plotter_update_sensors();
 8005ffe:	f000 fd2d 	bl	8006a5c <plotter_update_sensors>

		// Update encoder readings
		QEI_get_diff_count(&prismatic_encoder);
 8006002:	48a1      	ldr	r0, [pc, #644]	@ (8006288 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8006004:	f7fd fc20 	bl	8003848 <QEI_get_diff_count>
		QEI_compute_data(&prismatic_encoder);
 8006008:	489f      	ldr	r0, [pc, #636]	@ (8006288 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 800600a:	f7fd fd09 	bl	8003a20 <QEI_compute_data>
		QEI_get_diff_count(&revolute_encoder);
 800600e:	489f      	ldr	r0, [pc, #636]	@ (800628c <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8006010:	f7fd fc1a 	bl	8003848 <QEI_get_diff_count>
		QEI_compute_data(&revolute_encoder);
 8006014:	489d      	ldr	r0, [pc, #628]	@ (800628c <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8006016:	f7fd fd03 	bl	8003a20 <QEI_compute_data>

		// Handle different system states
		if (homing_state != HOMING_IDLE) {
 800601a:	4b9d      	ldr	r3, [pc, #628]	@ (8006290 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 800601c:	781b      	ldrb	r3, [r3, #0]
 800601e:	2b00      	cmp	r3, #0
 8006020:	f000 8122 	beq.w	8006268 <HAL_TIM_PeriodElapsedCallback+0x27c>
			// Homing state machine
			switch (homing_state) {
 8006024:	4b9a      	ldr	r3, [pc, #616]	@ (8006290 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8006026:	781b      	ldrb	r3, [r3, #0]
 8006028:	3b01      	subs	r3, #1
 800602a:	2b03      	cmp	r3, #3
 800602c:	f200 8118 	bhi.w	8006260 <HAL_TIM_PeriodElapsedCallback+0x274>
 8006030:	a201      	add	r2, pc, #4	@ (adr r2, 8006038 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8006032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006036:	bf00      	nop
 8006038:	08006049 	.word	0x08006049
 800603c:	080060a5 	.word	0x080060a5
 8006040:	08006157 	.word	0x08006157
 8006044:	080061bd 	.word	0x080061bd
			case HOMING_PRIS_DOWN:
				// Move prismatic motor down to lower limit
				pris_velocity_target = ZGX45RGG_400RPM_Constant.sd_max / 3.0f;
 8006048:	4b92      	ldr	r3, [pc, #584]	@ (8006294 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800604a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 800604e:	f04f 0200 	mov.w	r2, #0
 8006052:	4b91      	ldr	r3, [pc, #580]	@ (8006298 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8006054:	f7fa fbc6 	bl	80007e4 <__aeabi_ddiv>
 8006058:	4602      	mov	r2, r0
 800605a:	460b      	mov	r3, r1
 800605c:	4610      	mov	r0, r2
 800605e:	4619      	mov	r1, r3
 8006060:	f7fa fd78 	bl	8000b54 <__aeabi_d2f>
 8006064:	4603      	mov	r3, r0
 8006066:	4a8d      	ldr	r2, [pc, #564]	@ (800629c <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8006068:	6013      	str	r3, [r2, #0]
				if (low_photo) {
 800606a:	4b8d      	ldr	r3, [pc, #564]	@ (80062a0 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d006      	beq.n	8006080 <HAL_TIM_PeriodElapsedCallback+0x94>
					pris_velocity_target = 0.0f;
 8006072:	4b8a      	ldr	r3, [pc, #552]	@ (800629c <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8006074:	f04f 0200 	mov.w	r2, #0
 8006078:	601a      	str	r2, [r3, #0]
					homing_state = HOMING_REV_RESET;
 800607a:	4b85      	ldr	r3, [pc, #532]	@ (8006290 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 800607c:	2202      	movs	r2, #2
 800607e:	701a      	strb	r2, [r3, #0]
				}

		        prismatic_axis.position = prismatic_encoder.mm;
 8006080:	4b81      	ldr	r3, [pc, #516]	@ (8006288 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8006082:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006084:	4a87      	ldr	r2, [pc, #540]	@ (80062a4 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8006086:	6013      	str	r3, [r2, #0]
		        revolute_axis.position = revolute_encoder.rads;
 8006088:	4b80      	ldr	r3, [pc, #512]	@ (800628c <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 800608a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800608c:	4a86      	ldr	r2, [pc, #536]	@ (80062a8 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 800608e:	6013      	str	r3, [r2, #0]

		        velocity_control(pris_velocity_target, 0);
 8006090:	4b82      	ldr	r3, [pc, #520]	@ (800629c <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8006092:	edd3 7a00 	vldr	s15, [r3]
 8006096:	eddf 0a85 	vldr	s1, [pc, #532]	@ 80062ac <HAL_TIM_PeriodElapsedCallback+0x2c0>
 800609a:	eeb0 0a67 	vmov.f32	s0, s15
 800609e:	f7ff fc83 	bl	80059a8 <velocity_control>
				break;
 80060a2:	e0eb      	b.n	800627c <HAL_TIM_PeriodElapsedCallback+0x290>
				static int prox_count = 0;
				static bool prox_previous = false;
				static bool initialized = false;

				// Initialize on first entry
				if (!initialized) {
 80060a4:	4b82      	ldr	r3, [pc, #520]	@ (80062b0 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80060a6:	781b      	ldrb	r3, [r3, #0]
 80060a8:	f083 0301 	eor.w	r3, r3, #1
 80060ac:	b2db      	uxtb	r3, r3
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d00e      	beq.n	80060d0 <HAL_TIM_PeriodElapsedCallback+0xe4>
					prox_previous = prox;
 80060b2:	4b80      	ldr	r3, [pc, #512]	@ (80062b4 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	bf14      	ite	ne
 80060ba:	2301      	movne	r3, #1
 80060bc:	2300      	moveq	r3, #0
 80060be:	b2da      	uxtb	r2, r3
 80060c0:	4b7d      	ldr	r3, [pc, #500]	@ (80062b8 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80060c2:	701a      	strb	r2, [r3, #0]
					prox_count = 0;
 80060c4:	4b7d      	ldr	r3, [pc, #500]	@ (80062bc <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80060c6:	2200      	movs	r2, #0
 80060c8:	601a      	str	r2, [r3, #0]
					initialized = true;
 80060ca:	4b79      	ldr	r3, [pc, #484]	@ (80062b0 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80060cc:	2201      	movs	r2, #1
 80060ce:	701a      	strb	r2, [r3, #0]
				}

				// Move revolute motor clockwise at constant speed
				rev_velocity_target = ZGX45RGG_400RPM_Constant.qd_max;
 80060d0:	4b70      	ldr	r3, [pc, #448]	@ (8006294 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80060d2:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80060d6:	4610      	mov	r0, r2
 80060d8:	4619      	mov	r1, r3
 80060da:	f7fa fd3b 	bl	8000b54 <__aeabi_d2f>
 80060de:	4603      	mov	r3, r0
 80060e0:	4a77      	ldr	r2, [pc, #476]	@ (80062c0 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80060e2:	6013      	str	r3, [r2, #0]

				// Count proximity sensor triggers (rising edge detection)
				if (prox && !prox_previous) {
 80060e4:	4b73      	ldr	r3, [pc, #460]	@ (80062b4 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d00b      	beq.n	8006104 <HAL_TIM_PeriodElapsedCallback+0x118>
 80060ec:	4b72      	ldr	r3, [pc, #456]	@ (80062b8 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80060ee:	781b      	ldrb	r3, [r3, #0]
 80060f0:	f083 0301 	eor.w	r3, r3, #1
 80060f4:	b2db      	uxtb	r3, r3
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d004      	beq.n	8006104 <HAL_TIM_PeriodElapsedCallback+0x118>
					prox_count++;
 80060fa:	4b70      	ldr	r3, [pc, #448]	@ (80062bc <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	3301      	adds	r3, #1
 8006100:	4a6e      	ldr	r2, [pc, #440]	@ (80062bc <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8006102:	6013      	str	r3, [r2, #0]
				}
				prox_previous = prox;
 8006104:	4b6b      	ldr	r3, [pc, #428]	@ (80062b4 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	2b00      	cmp	r3, #0
 800610a:	bf14      	ite	ne
 800610c:	2301      	movne	r3, #1
 800610e:	2300      	moveq	r3, #0
 8006110:	b2da      	uxtb	r2, r3
 8006112:	4b69      	ldr	r3, [pc, #420]	@ (80062b8 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8006114:	701a      	strb	r2, [r3, #0]

				// After reaching home, stop motor
				if (prox_count >= 1) {
 8006116:	4b69      	ldr	r3, [pc, #420]	@ (80062bc <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	2b00      	cmp	r3, #0
 800611c:	dd09      	ble.n	8006132 <HAL_TIM_PeriodElapsedCallback+0x146>
					rev_velocity_target = 0.0f;
 800611e:	4b68      	ldr	r3, [pc, #416]	@ (80062c0 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8006120:	f04f 0200 	mov.w	r2, #0
 8006124:	601a      	str	r2, [r3, #0]
					initialized = false;  // Reset for next time
 8006126:	4b62      	ldr	r3, [pc, #392]	@ (80062b0 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8006128:	2200      	movs	r2, #0
 800612a:	701a      	strb	r2, [r3, #0]
					homing_state = HOMING_PRIS_UP;
 800612c:	4b58      	ldr	r3, [pc, #352]	@ (8006290 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 800612e:	2203      	movs	r2, #3
 8006130:	701a      	strb	r2, [r3, #0]
				}

		        prismatic_axis.position = prismatic_encoder.mm;
 8006132:	4b55      	ldr	r3, [pc, #340]	@ (8006288 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8006134:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006136:	4a5b      	ldr	r2, [pc, #364]	@ (80062a4 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8006138:	6013      	str	r3, [r2, #0]
		        revolute_axis.position = revolute_encoder.rads;
 800613a:	4b54      	ldr	r3, [pc, #336]	@ (800628c <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 800613c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800613e:	4a5a      	ldr	r2, [pc, #360]	@ (80062a8 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8006140:	6013      	str	r3, [r2, #0]

		        velocity_control(0, rev_velocity_target);
 8006142:	4b5f      	ldr	r3, [pc, #380]	@ (80062c0 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8006144:	edd3 7a00 	vldr	s15, [r3]
 8006148:	eef0 0a67 	vmov.f32	s1, s15
 800614c:	ed9f 0a57 	vldr	s0, [pc, #348]	@ 80062ac <HAL_TIM_PeriodElapsedCallback+0x2c0>
 8006150:	f7ff fc2a 	bl	80059a8 <velocity_control>
				break;
 8006154:	e092      	b.n	800627c <HAL_TIM_PeriodElapsedCallback+0x290>
			}

			case HOMING_PRIS_UP:
				// Move prismatic motor up to upper limit
				pris_velocity_target = -ZGX45RGG_400RPM_Constant.sd_max / 3.0f;
 8006156:	4b4f      	ldr	r3, [pc, #316]	@ (8006294 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8006158:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 800615c:	4614      	mov	r4, r2
 800615e:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8006162:	f04f 0200 	mov.w	r2, #0
 8006166:	4b4c      	ldr	r3, [pc, #304]	@ (8006298 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8006168:	4620      	mov	r0, r4
 800616a:	4629      	mov	r1, r5
 800616c:	f7fa fb3a 	bl	80007e4 <__aeabi_ddiv>
 8006170:	4602      	mov	r2, r0
 8006172:	460b      	mov	r3, r1
 8006174:	4610      	mov	r0, r2
 8006176:	4619      	mov	r1, r3
 8006178:	f7fa fcec 	bl	8000b54 <__aeabi_d2f>
 800617c:	4603      	mov	r3, r0
 800617e:	4a47      	ldr	r2, [pc, #284]	@ (800629c <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8006180:	6013      	str	r3, [r2, #0]

				if (up_photo) {
 8006182:	4b50      	ldr	r3, [pc, #320]	@ (80062c4 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d006      	beq.n	8006198 <HAL_TIM_PeriodElapsedCallback+0x1ac>
					pris_velocity_target = 0.0f;
 800618a:	4b44      	ldr	r3, [pc, #272]	@ (800629c <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 800618c:	f04f 0200 	mov.w	r2, #0
 8006190:	601a      	str	r2, [r3, #0]
					homing_state = HOMING_COMPLETE;
 8006192:	4b3f      	ldr	r3, [pc, #252]	@ (8006290 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8006194:	2204      	movs	r2, #4
 8006196:	701a      	strb	r2, [r3, #0]
				}

		        prismatic_axis.position = prismatic_encoder.mm;
 8006198:	4b3b      	ldr	r3, [pc, #236]	@ (8006288 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 800619a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800619c:	4a41      	ldr	r2, [pc, #260]	@ (80062a4 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800619e:	6013      	str	r3, [r2, #0]
		        revolute_axis.position = revolute_encoder.rads;
 80061a0:	4b3a      	ldr	r3, [pc, #232]	@ (800628c <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80061a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061a4:	4a40      	ldr	r2, [pc, #256]	@ (80062a8 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80061a6:	6013      	str	r3, [r2, #0]

		        velocity_control(pris_velocity_target, 0);
 80061a8:	4b3c      	ldr	r3, [pc, #240]	@ (800629c <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80061aa:	edd3 7a00 	vldr	s15, [r3]
 80061ae:	eddf 0a3f 	vldr	s1, [pc, #252]	@ 80062ac <HAL_TIM_PeriodElapsedCallback+0x2c0>
 80061b2:	eeb0 0a67 	vmov.f32	s0, s15
 80061b6:	f7ff fbf7 	bl	80059a8 <velocity_control>
				break;
 80061ba:	e05f      	b.n	800627c <HAL_TIM_PeriodElapsedCallback+0x290>

			case HOMING_COMPLETE:
				plotter_reset();
 80061bc:	f000 fc16 	bl	80069ec <plotter_reset>

				prismatic_encoder.diff_counts = 0;
 80061c0:	4b31      	ldr	r3, [pc, #196]	@ (8006288 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80061c2:	2200      	movs	r2, #0
 80061c4:	625a      	str	r2, [r3, #36]	@ 0x24
				prismatic_encoder.rpm = 0;
 80061c6:	4b30      	ldr	r3, [pc, #192]	@ (8006288 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80061c8:	f04f 0200 	mov.w	r2, #0
 80061cc:	631a      	str	r2, [r3, #48]	@ 0x30
				prismatic_encoder.pulses = 0;
 80061ce:	4b2e      	ldr	r3, [pc, #184]	@ (8006288 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80061d0:	2200      	movs	r2, #0
 80061d2:	639a      	str	r2, [r3, #56]	@ 0x38
				prismatic_encoder.revs = 0;
 80061d4:	4b2c      	ldr	r3, [pc, #176]	@ (8006288 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80061d6:	f04f 0200 	mov.w	r2, #0
 80061da:	63da      	str	r2, [r3, #60]	@ 0x3c
				prismatic_encoder.rads = 0;
 80061dc:	4b2a      	ldr	r3, [pc, #168]	@ (8006288 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80061de:	f04f 0200 	mov.w	r2, #0
 80061e2:	641a      	str	r2, [r3, #64]	@ 0x40
				prismatic_encoder.mm = 0;
 80061e4:	4b28      	ldr	r3, [pc, #160]	@ (8006288 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80061e6:	f04f 0200 	mov.w	r2, #0
 80061ea:	649a      	str	r2, [r3, #72]	@ 0x48

				revolute_encoder.diff_counts = 0;
 80061ec:	4b27      	ldr	r3, [pc, #156]	@ (800628c <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80061ee:	2200      	movs	r2, #0
 80061f0:	625a      	str	r2, [r3, #36]	@ 0x24
				revolute_encoder.rpm = 0;
 80061f2:	4b26      	ldr	r3, [pc, #152]	@ (800628c <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80061f4:	f04f 0200 	mov.w	r2, #0
 80061f8:	631a      	str	r2, [r3, #48]	@ 0x30
				revolute_encoder.pulses = 0;
 80061fa:	4b24      	ldr	r3, [pc, #144]	@ (800628c <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80061fc:	2200      	movs	r2, #0
 80061fe:	639a      	str	r2, [r3, #56]	@ 0x38
				revolute_encoder.revs = 0;
 8006200:	4b22      	ldr	r3, [pc, #136]	@ (800628c <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8006202:	f04f 0200 	mov.w	r2, #0
 8006206:	63da      	str	r2, [r3, #60]	@ 0x3c
				revolute_encoder.rads = 0;
 8006208:	4b20      	ldr	r3, [pc, #128]	@ (800628c <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 800620a:	f04f 0200 	mov.w	r2, #0
 800620e:	641a      	str	r2, [r3, #64]	@ 0x40
				revolute_encoder.mm = 0;
 8006210:	4b1e      	ldr	r3, [pc, #120]	@ (800628c <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8006212:	f04f 0200 	mov.w	r2, #0
 8006216:	649a      	str	r2, [r3, #72]	@ 0x48

				// Reset ALL control variables
				revolute_axis.pos_error = 0.0f;
 8006218:	4b23      	ldr	r3, [pc, #140]	@ (80062a8 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 800621a:	f04f 0200 	mov.w	r2, #0
 800621e:	615a      	str	r2, [r3, #20]
				revolute_axis.vel_error = 0.0f;
 8006220:	4b21      	ldr	r3, [pc, #132]	@ (80062a8 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8006222:	f04f 0200 	mov.w	r2, #0
 8006226:	619a      	str	r2, [r3, #24]
				prismatic_axis.pos_error = 0.0f;
 8006228:	4b1e      	ldr	r3, [pc, #120]	@ (80062a4 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800622a:	f04f 0200 	mov.w	r2, #0
 800622e:	615a      	str	r2, [r3, #20]
				prismatic_axis.vel_error = 0.0f;
 8006230:	4b1c      	ldr	r3, [pc, #112]	@ (80062a4 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8006232:	f04f 0200 	mov.w	r2, #0
 8006236:	619a      	str	r2, [r3, #24]

				// Reset position setpoints to current position
				prismatic_axis.position = prismatic_encoder.mm;
 8006238:	4b13      	ldr	r3, [pc, #76]	@ (8006288 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 800623a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800623c:	4a19      	ldr	r2, [pc, #100]	@ (80062a4 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800623e:	6013      	str	r3, [r2, #0]
				revolute_axis.position = revolute_encoder.rads;
 8006240:	4b12      	ldr	r3, [pc, #72]	@ (800628c <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8006242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006244:	4a18      	ldr	r2, [pc, #96]	@ (80062a8 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8006246:	6013      	str	r3, [r2, #0]

				// Reset trajectories and state
				prismatic_axis.trajectory_active = false;
 8006248:	4b16      	ldr	r3, [pc, #88]	@ (80062a4 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800624a:	2200      	movs	r2, #0
 800624c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
				revolute_axis.trajectory_active = false;
 8006250:	4b15      	ldr	r3, [pc, #84]	@ (80062a8 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8006252:	2200      	movs	r2, #0
 8006254:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
				homing_state = HOMING_IDLE;
 8006258:	4b0d      	ldr	r3, [pc, #52]	@ (8006290 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 800625a:	2200      	movs	r2, #0
 800625c:	701a      	strb	r2, [r3, #0]
				break;
 800625e:	e00d      	b.n	800627c <HAL_TIM_PeriodElapsedCallback+0x290>

			default:
				// Unexpected state - reset to idle
				homing_state = HOMING_IDLE;
 8006260:	4b0b      	ldr	r3, [pc, #44]	@ (8006290 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8006262:	2200      	movs	r2, #0
 8006264:	701a      	strb	r2, [r3, #0]
				break;
 8006266:	e009      	b.n	800627c <HAL_TIM_PeriodElapsedCallback+0x290>
			}
		} else if (joystick_state != JOY_IDLE) {
 8006268:	4b17      	ldr	r3, [pc, #92]	@ (80062c8 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 800626a:	781b      	ldrb	r3, [r3, #0]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d002      	beq.n	8006276 <HAL_TIM_PeriodElapsedCallback+0x28a>
			// Process joystick control if active
			process_joystick_control();
 8006270:	f7ff fd08 	bl	8005c84 <process_joystick_control>
		} else {
			// Normal operation - update control loops
			update_control_loops();
		}
	}
}
 8006274:	e002      	b.n	800627c <HAL_TIM_PeriodElapsedCallback+0x290>
			update_control_loops();
 8006276:	f7fe fe57 	bl	8004f28 <update_control_loops>
}
 800627a:	e7ff      	b.n	800627c <HAL_TIM_PeriodElapsedCallback+0x290>
 800627c:	bf00      	nop
 800627e:	3708      	adds	r7, #8
 8006280:	46bd      	mov	sp, r7
 8006282:	bdb0      	pop	{r4, r5, r7, pc}
 8006284:	20001944 	.word	0x20001944
 8006288:	200003e8 	.word	0x200003e8
 800628c:	20000444 	.word	0x20000444
 8006290:	2000032c 	.word	0x2000032c
 8006294:	20000060 	.word	0x20000060
 8006298:	40080000 	.word	0x40080000
 800629c:	20000330 	.word	0x20000330
 80062a0:	20001858 	.word	0x20001858
 80062a4:	20000294 	.word	0x20000294
 80062a8:	200002d8 	.word	0x200002d8
 80062ac:	00000000 	.word	0x00000000
 80062b0:	20000344 	.word	0x20000344
 80062b4:	2000184c 	.word	0x2000184c
 80062b8:	20000345 	.word	0x20000345
 80062bc:	20000348 	.word	0x20000348
 80062c0:	20000334 	.word	0x20000334
 80062c4:	20001854 	.word	0x20001854
 80062c8:	2000032f 	.word	0x2000032f

080062cc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80062cc:	b480      	push	{r7}
 80062ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80062d0:	b672      	cpsid	i
}
 80062d2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80062d4:	bf00      	nop
 80062d6:	e7fd      	b.n	80062d4 <Error_Handler+0x8>

080062d8 <plotter_begin>:
float prismatic_current = 0.0f;
float revolute_current = 0.0f;

int prox, emer, up_photo, low_photo, up_lim, low_lim, b1, b2, b3, b4;

void plotter_begin() {
 80062d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80062dc:	ed2d 8b02 	vpush	{d8}
 80062e0:	b083      	sub	sp, #12
 80062e2:	af02      	add	r7, sp, #8
	ZGX45RGG_400RPM_Constant.sd_max = ZGX45RGG_400RPM_Constant.qd_max
 80062e4:	4bc8      	ldr	r3, [pc, #800]	@ (8006608 <plotter_begin+0x330>)
 80062e6:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
			* Disturbance_Constant.prismatic_pulley_radius * 1000;
 80062ea:	4bc8      	ldr	r3, [pc, #800]	@ (800660c <plotter_begin+0x334>)
 80062ec:	691b      	ldr	r3, [r3, #16]
 80062ee:	4618      	mov	r0, r3
 80062f0:	f7fa f8f6 	bl	80004e0 <__aeabi_f2d>
 80062f4:	4602      	mov	r2, r0
 80062f6:	460b      	mov	r3, r1
 80062f8:	4620      	mov	r0, r4
 80062fa:	4629      	mov	r1, r5
 80062fc:	f7fa f948 	bl	8000590 <__aeabi_dmul>
 8006300:	4602      	mov	r2, r0
 8006302:	460b      	mov	r3, r1
 8006304:	4610      	mov	r0, r2
 8006306:	4619      	mov	r1, r3
 8006308:	f04f 0200 	mov.w	r2, #0
 800630c:	4bc0      	ldr	r3, [pc, #768]	@ (8006610 <plotter_begin+0x338>)
 800630e:	f7fa f93f 	bl	8000590 <__aeabi_dmul>
 8006312:	4602      	mov	r2, r0
 8006314:	460b      	mov	r3, r1
	ZGX45RGG_400RPM_Constant.sd_max = ZGX45RGG_400RPM_Constant.qd_max
 8006316:	49bc      	ldr	r1, [pc, #752]	@ (8006608 <plotter_begin+0x330>)
 8006318:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
	ZGX45RGG_400RPM_Constant.sdd_max = ZGX45RGG_400RPM_Constant.sd_max * 0.5;
 800631c:	4bba      	ldr	r3, [pc, #744]	@ (8006608 <plotter_begin+0x330>)
 800631e:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8006322:	f04f 0200 	mov.w	r2, #0
 8006326:	4bbb      	ldr	r3, [pc, #748]	@ (8006614 <plotter_begin+0x33c>)
 8006328:	f7fa f932 	bl	8000590 <__aeabi_dmul>
 800632c:	4602      	mov	r2, r0
 800632e:	460b      	mov	r3, r1
 8006330:	49b5      	ldr	r1, [pc, #724]	@ (8006608 <plotter_begin+0x330>)
 8006332:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58

	ZGX45RGG_150RPM_Constant.qd_max = ZGX45RGG_150RPM_Constant.qd_max * (24.0 /36.0) * 0.3;
 8006336:	4bb8      	ldr	r3, [pc, #736]	@ (8006618 <plotter_begin+0x340>)
 8006338:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 800633c:	a3ac      	add	r3, pc, #688	@ (adr r3, 80065f0 <plotter_begin+0x318>)
 800633e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006342:	f7fa f925 	bl	8000590 <__aeabi_dmul>
 8006346:	4602      	mov	r2, r0
 8006348:	460b      	mov	r3, r1
 800634a:	4610      	mov	r0, r2
 800634c:	4619      	mov	r1, r3
 800634e:	a3aa      	add	r3, pc, #680	@ (adr r3, 80065f8 <plotter_begin+0x320>)
 8006350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006354:	f7fa f91c 	bl	8000590 <__aeabi_dmul>
 8006358:	4602      	mov	r2, r0
 800635a:	460b      	mov	r3, r1
 800635c:	49ae      	ldr	r1, [pc, #696]	@ (8006618 <plotter_begin+0x340>)
 800635e:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
	ZGX45RGG_150RPM_Constant.qdd_max = ZGX45RGG_150RPM_Constant.qd_max * 0.4;
 8006362:	4bad      	ldr	r3, [pc, #692]	@ (8006618 <plotter_begin+0x340>)
 8006364:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8006368:	a3a5      	add	r3, pc, #660	@ (adr r3, 8006600 <plotter_begin+0x328>)
 800636a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800636e:	f7fa f90f 	bl	8000590 <__aeabi_dmul>
 8006372:	4602      	mov	r2, r0
 8006374:	460b      	mov	r3, r1
 8006376:	49a8      	ldr	r1, [pc, #672]	@ (8006618 <plotter_begin+0x340>)
 8006378:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48

	SIGNAL_init(&sine_sg_PWM, SIGNAL_SINE);
 800637c:	2100      	movs	r1, #0
 800637e:	48a7      	ldr	r0, [pc, #668]	@ (800661c <plotter_begin+0x344>)
 8006380:	f000 fc68 	bl	8006c54 <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_PWM, SINE_AMPLITUDE, SINE_FREQUENCY, SINE_PHASE,
 8006384:	eddf 2aa6 	vldr	s5, [pc, #664]	@ 8006620 <plotter_begin+0x348>
 8006388:	ed9f 2aa6 	vldr	s4, [pc, #664]	@ 8006624 <plotter_begin+0x34c>
 800638c:	eddf 1ab3 	vldr	s3, [pc, #716]	@ 800665c <plotter_begin+0x384>
 8006390:	ed9f 1ab2 	vldr	s2, [pc, #712]	@ 800665c <plotter_begin+0x384>
 8006394:	eddf 0aa4 	vldr	s1, [pc, #656]	@ 8006628 <plotter_begin+0x350>
 8006398:	ed9f 0aa1 	vldr	s0, [pc, #644]	@ 8006620 <plotter_begin+0x348>
 800639c:	489f      	ldr	r0, [pc, #636]	@ (800661c <plotter_begin+0x344>)
 800639e:	f000 fcb7 	bl	8006d10 <SIGNAL_config_sine>
	SINE_OFFSET, SINE_MIN_SETPOINT, SINE_MAX_SETPOINT);

	SIGNAL_init(&square_sg_PWM, SIGNAL_SQUARE);
 80063a2:	2102      	movs	r1, #2
 80063a4:	48a1      	ldr	r0, [pc, #644]	@ (800662c <plotter_begin+0x354>)
 80063a6:	f000 fc55 	bl	8006c54 <SIGNAL_init>
	SIGNAL_config_square(&square_sg_PWM, SQUARE_AMPLITUDE, SQUARE_FREQUENCY,
 80063aa:	ed9f 3a9d 	vldr	s6, [pc, #628]	@ 8006620 <plotter_begin+0x348>
 80063ae:	eddf 2a9d 	vldr	s5, [pc, #628]	@ 8006624 <plotter_begin+0x34c>
 80063b2:	ed9f 2aaa 	vldr	s4, [pc, #680]	@ 800665c <plotter_begin+0x384>
 80063b6:	eddf 1aa9 	vldr	s3, [pc, #676]	@ 800665c <plotter_begin+0x384>
 80063ba:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 80063be:	eddf 0a9a 	vldr	s1, [pc, #616]	@ 8006628 <plotter_begin+0x350>
 80063c2:	ed9f 0a97 	vldr	s0, [pc, #604]	@ 8006620 <plotter_begin+0x348>
 80063c6:	4899      	ldr	r0, [pc, #612]	@ (800662c <plotter_begin+0x354>)
 80063c8:	f000 fccd 	bl	8006d66 <SIGNAL_config_square>
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
	SQUARE_MIN_SETPOINT, SQUARE_MAX_SETPOINT);

	SIGNAL_init(&sine_sg_cascade, SIGNAL_SINE);
 80063cc:	2100      	movs	r1, #0
 80063ce:	4898      	ldr	r0, [pc, #608]	@ (8006630 <plotter_begin+0x358>)
 80063d0:	f000 fc40 	bl	8006c54 <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_cascade, SINE_AMPLITUDE_CASCADE, SINE_FREQUENCY,
 80063d4:	eddf 2a97 	vldr	s5, [pc, #604]	@ 8006634 <plotter_begin+0x35c>
 80063d8:	ed9f 2a97 	vldr	s4, [pc, #604]	@ 8006638 <plotter_begin+0x360>
 80063dc:	eddf 1a9f 	vldr	s3, [pc, #636]	@ 800665c <plotter_begin+0x384>
 80063e0:	ed9f 1a9e 	vldr	s2, [pc, #632]	@ 800665c <plotter_begin+0x384>
 80063e4:	eddf 0a90 	vldr	s1, [pc, #576]	@ 8006628 <plotter_begin+0x350>
 80063e8:	ed9f 0a92 	vldr	s0, [pc, #584]	@ 8006634 <plotter_begin+0x35c>
 80063ec:	4890      	ldr	r0, [pc, #576]	@ (8006630 <plotter_begin+0x358>)
 80063ee:	f000 fc8f 	bl	8006d10 <SIGNAL_config_sine>
	SINE_PHASE,
	SINE_OFFSET, SINE_MIN_SETPOINT_CASCADE, SINE_MAX_SETPOINT_CASCADE);

	SIGNAL_init(&square_sg_cascade, SIGNAL_SQUARE);
 80063f2:	2102      	movs	r1, #2
 80063f4:	4891      	ldr	r0, [pc, #580]	@ (800663c <plotter_begin+0x364>)
 80063f6:	f000 fc2d 	bl	8006c54 <SIGNAL_init>
	SIGNAL_config_square(&square_sg_cascade, SQUARE_AMPLITUDE_CASCADE,
 80063fa:	eeb3 3a09 	vmov.f32	s6, #57	@ 0x41c80000  25.0
 80063fe:	eefb 2a09 	vmov.f32	s5, #185	@ 0xc1c80000 -25.0
 8006402:	ed9f 2a96 	vldr	s4, [pc, #600]	@ 800665c <plotter_begin+0x384>
 8006406:	eddf 1a95 	vldr	s3, [pc, #596]	@ 800665c <plotter_begin+0x384>
 800640a:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 800640e:	eddf 0a86 	vldr	s1, [pc, #536]	@ 8006628 <plotter_begin+0x350>
 8006412:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8006416:	4889      	ldr	r0, [pc, #548]	@ (800663c <plotter_begin+0x364>)
 8006418:	f000 fca5 	bl	8006d66 <SIGNAL_config_square>
	SQUARE_FREQUENCY,
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
	SQUARE_MIN_SETPOINT_CASCADE, SQUARE_MAX_SETPOINT_CASCADE);

	SIGNAL_init(&sine_sg_prismatic, SIGNAL_SINE);
 800641c:	2100      	movs	r1, #0
 800641e:	4888      	ldr	r0, [pc, #544]	@ (8006640 <plotter_begin+0x368>)
 8006420:	f000 fc18 	bl	8006c54 <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8006424:	4b78      	ldr	r3, [pc, #480]	@ (8006608 <plotter_begin+0x330>)
 8006426:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 800642a:	4610      	mov	r0, r2
 800642c:	4619      	mov	r1, r3
 800642e:	f7fa fb91 	bl	8000b54 <__aeabi_d2f>
 8006432:	4604      	mov	r4, r0
	SINE_FREQUENCY, SINE_PHASE,
	SINE_OFFSET, -ZGX45RGG_400RPM_Constant.qd_max,
 8006434:	4b74      	ldr	r3, [pc, #464]	@ (8006608 <plotter_begin+0x330>)
 8006436:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 800643a:	4610      	mov	r0, r2
 800643c:	4619      	mov	r1, r3
 800643e:	f7fa fb89 	bl	8000b54 <__aeabi_d2f>
 8006442:	4603      	mov	r3, r0
	SIGNAL_config_sine(&sine_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8006444:	ee07 3a90 	vmov	s15, r3
 8006448:	eeb1 8a67 	vneg.f32	s16, s15
			ZGX45RGG_400RPM_Constant.qd_max);
 800644c:	4b6e      	ldr	r3, [pc, #440]	@ (8006608 <plotter_begin+0x330>)
 800644e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_sine(&sine_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8006452:	4610      	mov	r0, r2
 8006454:	4619      	mov	r1, r3
 8006456:	f7fa fb7d 	bl	8000b54 <__aeabi_d2f>
 800645a:	4603      	mov	r3, r0
 800645c:	ee02 3a90 	vmov	s5, r3
 8006460:	eeb0 2a48 	vmov.f32	s4, s16
 8006464:	eddf 1a7d 	vldr	s3, [pc, #500]	@ 800665c <plotter_begin+0x384>
 8006468:	ed9f 1a7c 	vldr	s2, [pc, #496]	@ 800665c <plotter_begin+0x384>
 800646c:	eddf 0a6e 	vldr	s1, [pc, #440]	@ 8006628 <plotter_begin+0x350>
 8006470:	ee00 4a10 	vmov	s0, r4
 8006474:	4872      	ldr	r0, [pc, #456]	@ (8006640 <plotter_begin+0x368>)
 8006476:	f000 fc4b 	bl	8006d10 <SIGNAL_config_sine>

	SIGNAL_init(&square_sg_prismatic, SIGNAL_SQUARE);
 800647a:	2102      	movs	r1, #2
 800647c:	4871      	ldr	r0, [pc, #452]	@ (8006644 <plotter_begin+0x36c>)
 800647e:	f000 fbe9 	bl	8006c54 <SIGNAL_init>
	SIGNAL_config_square(&square_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8006482:	4b61      	ldr	r3, [pc, #388]	@ (8006608 <plotter_begin+0x330>)
 8006484:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8006488:	4610      	mov	r0, r2
 800648a:	4619      	mov	r1, r3
 800648c:	f7fa fb62 	bl	8000b54 <__aeabi_d2f>
 8006490:	4604      	mov	r4, r0
	SQUARE_FREQUENCY,
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
			-ZGX45RGG_400RPM_Constant.qd_max, ZGX45RGG_400RPM_Constant.qd_max);
 8006492:	4b5d      	ldr	r3, [pc, #372]	@ (8006608 <plotter_begin+0x330>)
 8006494:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8006498:	4610      	mov	r0, r2
 800649a:	4619      	mov	r1, r3
 800649c:	f7fa fb5a 	bl	8000b54 <__aeabi_d2f>
 80064a0:	4603      	mov	r3, r0
	SIGNAL_config_square(&square_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 80064a2:	ee07 3a90 	vmov	s15, r3
 80064a6:	eeb1 8a67 	vneg.f32	s16, s15
			-ZGX45RGG_400RPM_Constant.qd_max, ZGX45RGG_400RPM_Constant.qd_max);
 80064aa:	4b57      	ldr	r3, [pc, #348]	@ (8006608 <plotter_begin+0x330>)
 80064ac:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_square(&square_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 80064b0:	4610      	mov	r0, r2
 80064b2:	4619      	mov	r1, r3
 80064b4:	f7fa fb4e 	bl	8000b54 <__aeabi_d2f>
 80064b8:	4603      	mov	r3, r0
 80064ba:	ee03 3a10 	vmov	s6, r3
 80064be:	eef0 2a48 	vmov.f32	s5, s16
 80064c2:	ed9f 2a66 	vldr	s4, [pc, #408]	@ 800665c <plotter_begin+0x384>
 80064c6:	eddf 1a65 	vldr	s3, [pc, #404]	@ 800665c <plotter_begin+0x384>
 80064ca:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 80064ce:	eddf 0a56 	vldr	s1, [pc, #344]	@ 8006628 <plotter_begin+0x350>
 80064d2:	ee00 4a10 	vmov	s0, r4
 80064d6:	485b      	ldr	r0, [pc, #364]	@ (8006644 <plotter_begin+0x36c>)
 80064d8:	f000 fc45 	bl	8006d66 <SIGNAL_config_square>

	SIGNAL_init(&sine_sg_revolute, SIGNAL_SINE);
 80064dc:	2100      	movs	r1, #0
 80064de:	485a      	ldr	r0, [pc, #360]	@ (8006648 <plotter_begin+0x370>)
 80064e0:	f000 fbb8 	bl	8006c54 <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 80064e4:	4b4c      	ldr	r3, [pc, #304]	@ (8006618 <plotter_begin+0x340>)
 80064e6:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80064ea:	4610      	mov	r0, r2
 80064ec:	4619      	mov	r1, r3
 80064ee:	f7fa fb31 	bl	8000b54 <__aeabi_d2f>
 80064f2:	4604      	mov	r4, r0
	SINE_FREQUENCY, SINE_PHASE,
	SINE_OFFSET, -ZGX45RGG_150RPM_Constant.qd_max,
 80064f4:	4b48      	ldr	r3, [pc, #288]	@ (8006618 <plotter_begin+0x340>)
 80064f6:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80064fa:	4610      	mov	r0, r2
 80064fc:	4619      	mov	r1, r3
 80064fe:	f7fa fb29 	bl	8000b54 <__aeabi_d2f>
 8006502:	4603      	mov	r3, r0
	SIGNAL_config_sine(&sine_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8006504:	ee07 3a90 	vmov	s15, r3
 8006508:	eeb1 8a67 	vneg.f32	s16, s15
			ZGX45RGG_150RPM_Constant.qd_max);
 800650c:	4b42      	ldr	r3, [pc, #264]	@ (8006618 <plotter_begin+0x340>)
 800650e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_sine(&sine_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8006512:	4610      	mov	r0, r2
 8006514:	4619      	mov	r1, r3
 8006516:	f7fa fb1d 	bl	8000b54 <__aeabi_d2f>
 800651a:	4603      	mov	r3, r0
 800651c:	ee02 3a90 	vmov	s5, r3
 8006520:	eeb0 2a48 	vmov.f32	s4, s16
 8006524:	eddf 1a4d 	vldr	s3, [pc, #308]	@ 800665c <plotter_begin+0x384>
 8006528:	ed9f 1a4c 	vldr	s2, [pc, #304]	@ 800665c <plotter_begin+0x384>
 800652c:	eddf 0a3e 	vldr	s1, [pc, #248]	@ 8006628 <plotter_begin+0x350>
 8006530:	ee00 4a10 	vmov	s0, r4
 8006534:	4844      	ldr	r0, [pc, #272]	@ (8006648 <plotter_begin+0x370>)
 8006536:	f000 fbeb 	bl	8006d10 <SIGNAL_config_sine>

	SIGNAL_init(&square_sg_revolute, SIGNAL_SQUARE);
 800653a:	2102      	movs	r1, #2
 800653c:	4843      	ldr	r0, [pc, #268]	@ (800664c <plotter_begin+0x374>)
 800653e:	f000 fb89 	bl	8006c54 <SIGNAL_init>
	SIGNAL_config_square(&square_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8006542:	4b35      	ldr	r3, [pc, #212]	@ (8006618 <plotter_begin+0x340>)
 8006544:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8006548:	4610      	mov	r0, r2
 800654a:	4619      	mov	r1, r3
 800654c:	f7fa fb02 	bl	8000b54 <__aeabi_d2f>
 8006550:	4604      	mov	r4, r0
	SQUARE_FREQUENCY,
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
			-ZGX45RGG_150RPM_Constant.qd_max, ZGX45RGG_150RPM_Constant.qd_max);
 8006552:	4b31      	ldr	r3, [pc, #196]	@ (8006618 <plotter_begin+0x340>)
 8006554:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8006558:	4610      	mov	r0, r2
 800655a:	4619      	mov	r1, r3
 800655c:	f7fa fafa 	bl	8000b54 <__aeabi_d2f>
 8006560:	4603      	mov	r3, r0
	SIGNAL_config_square(&square_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8006562:	ee07 3a90 	vmov	s15, r3
 8006566:	eeb1 8a67 	vneg.f32	s16, s15
			-ZGX45RGG_150RPM_Constant.qd_max, ZGX45RGG_150RPM_Constant.qd_max);
 800656a:	4b2b      	ldr	r3, [pc, #172]	@ (8006618 <plotter_begin+0x340>)
 800656c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_square(&square_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8006570:	4610      	mov	r0, r2
 8006572:	4619      	mov	r1, r3
 8006574:	f7fa faee 	bl	8000b54 <__aeabi_d2f>
 8006578:	4603      	mov	r3, r0
 800657a:	ee03 3a10 	vmov	s6, r3
 800657e:	eef0 2a48 	vmov.f32	s5, s16
 8006582:	ed9f 2a36 	vldr	s4, [pc, #216]	@ 800665c <plotter_begin+0x384>
 8006586:	eddf 1a35 	vldr	s3, [pc, #212]	@ 800665c <plotter_begin+0x384>
 800658a:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 800658e:	eddf 0a26 	vldr	s1, [pc, #152]	@ 8006628 <plotter_begin+0x350>
 8006592:	ee00 4a10 	vmov	s0, r4
 8006596:	482d      	ldr	r0, [pc, #180]	@ (800664c <plotter_begin+0x374>)
 8006598:	f000 fbe5 	bl	8006d66 <SIGNAL_config_square>

	UnitConverter_init(&converter_system);
 800659c:	482c      	ldr	r0, [pc, #176]	@ (8006650 <plotter_begin+0x378>)
 800659e:	f7fd ff27 	bl	80043f0 <UnitConverter_init>

	QEI_init(&prismatic_encoder, ENC_TIM1, ENC_PPR, ENC_FREQ, MOTOR1_RATIO,
			Disturbance_Constant.prismatic_pulley_radius * 2.0 * 1000.0);
 80065a2:	4b1a      	ldr	r3, [pc, #104]	@ (800660c <plotter_begin+0x334>)
 80065a4:	691b      	ldr	r3, [r3, #16]
 80065a6:	4618      	mov	r0, r3
 80065a8:	f7f9 ff9a 	bl	80004e0 <__aeabi_f2d>
 80065ac:	4602      	mov	r2, r0
 80065ae:	460b      	mov	r3, r1
 80065b0:	f7f9 fe38 	bl	8000224 <__adddf3>
 80065b4:	4602      	mov	r2, r0
 80065b6:	460b      	mov	r3, r1
 80065b8:	4610      	mov	r0, r2
 80065ba:	4619      	mov	r1, r3
 80065bc:	f04f 0200 	mov.w	r2, #0
 80065c0:	4b13      	ldr	r3, [pc, #76]	@ (8006610 <plotter_begin+0x338>)
 80065c2:	f7f9 ffe5 	bl	8000590 <__aeabi_dmul>
 80065c6:	4602      	mov	r2, r0
 80065c8:	460b      	mov	r3, r1
	QEI_init(&prismatic_encoder, ENC_TIM1, ENC_PPR, ENC_FREQ, MOTOR1_RATIO,
 80065ca:	4610      	mov	r0, r2
 80065cc:	4619      	mov	r1, r3
 80065ce:	f7fa fac1 	bl	8000b54 <__aeabi_d2f>
 80065d2:	4603      	mov	r3, r0
 80065d4:	ee00 3a90 	vmov	s1, r3
 80065d8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80065dc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80065e0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80065e4:	491b      	ldr	r1, [pc, #108]	@ (8006654 <plotter_begin+0x37c>)
 80065e6:	481c      	ldr	r0, [pc, #112]	@ (8006658 <plotter_begin+0x380>)
 80065e8:	f7fd f8bc 	bl	8003764 <QEI_init>
 80065ec:	e038      	b.n	8006660 <plotter_begin+0x388>
 80065ee:	bf00      	nop
 80065f0:	55555555 	.word	0x55555555
 80065f4:	3fe55555 	.word	0x3fe55555
 80065f8:	33333333 	.word	0x33333333
 80065fc:	3fd33333 	.word	0x3fd33333
 8006600:	9999999a 	.word	0x9999999a
 8006604:	3fd99999 	.word	0x3fd99999
 8006608:	20000060 	.word	0x20000060
 800660c:	200000c0 	.word	0x200000c0
 8006610:	408f4000 	.word	0x408f4000
 8006614:	3fe00000 	.word	0x3fe00000
 8006618:	20000000 	.word	0x20000000
 800661c:	20000594 	.word	0x20000594
 8006620:	477fff00 	.word	0x477fff00
 8006624:	c77fff00 	.word	0xc77fff00
 8006628:	3dcccccd 	.word	0x3dcccccd
 800662c:	200005d8 	.word	0x200005d8
 8006630:	2000061c 	.word	0x2000061c
 8006634:	43480000 	.word	0x43480000
 8006638:	c3480000 	.word	0xc3480000
 800663c:	20000660 	.word	0x20000660
 8006640:	200006a4 	.word	0x200006a4
 8006644:	200006e8 	.word	0x200006e8
 8006648:	2000072c 	.word	0x2000072c
 800664c:	20000770 	.word	0x20000770
 8006650:	200007b4 	.word	0x200007b4
 8006654:	20001ba8 	.word	0x20001ba8
 8006658:	200003e8 	.word	0x200003e8
 800665c:	00000000 	.word	0x00000000
	QEI_init(&revolute_encoder, ENC_TIM2, ENC_PPR, ENC_FREQ, MOTOR2_RATIO,
 8006660:	ed5f 0a02 	vldr	s1, [pc, #-8]	@ 800665c <plotter_begin+0x384>
 8006664:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8006668:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800666c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006670:	49ae      	ldr	r1, [pc, #696]	@ (800692c <plotter_begin+0x654>)
 8006672:	48af      	ldr	r0, [pc, #700]	@ (8006930 <plotter_begin+0x658>)
 8006674:	f7fd f876 	bl	8003764 <QEI_init>
	MOTOR2_PULLEY_DIAMETER);

	MDXX_GPIO_init(&prismatic_motor, MOTOR1_TIM, MOTOR1_TIM_CH, MOTOR1_GPIOx,
 8006678:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800667c:	9300      	str	r3, [sp, #0]
 800667e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006682:	2204      	movs	r2, #4
 8006684:	49ab      	ldr	r1, [pc, #684]	@ (8006934 <plotter_begin+0x65c>)
 8006686:	48ac      	ldr	r0, [pc, #688]	@ (8006938 <plotter_begin+0x660>)
 8006688:	f7fa fe58 	bl	800133c <MDXX_GPIO_init>
	MOTOR1_GPIO_Pin);
	MDXX_GPIO_init(&revolute_motor, MOTOR2_TIM, MOTOR2_TIM_CH, MOTOR2_GPIOx,
 800668c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006690:	9300      	str	r3, [sp, #0]
 8006692:	4baa      	ldr	r3, [pc, #680]	@ (800693c <plotter_begin+0x664>)
 8006694:	2200      	movs	r2, #0
 8006696:	49a7      	ldr	r1, [pc, #668]	@ (8006934 <plotter_begin+0x65c>)
 8006698:	48a9      	ldr	r0, [pc, #676]	@ (8006940 <plotter_begin+0x668>)
 800669a:	f7fa fe4f 	bl	800133c <MDXX_GPIO_init>
	MOTOR2_GPIO_Pin);

	PWM_init(&servo, SERVO_TIM, SERVO_TIM_CH);
 800669e:	220c      	movs	r2, #12
 80066a0:	49a8      	ldr	r1, [pc, #672]	@ (8006944 <plotter_begin+0x66c>)
 80066a2:	48a9      	ldr	r0, [pc, #676]	@ (8006948 <plotter_begin+0x670>)
 80066a4:	f7fc fe30 	bl	8003308 <PWM_init>

	MDXX_set_range(&prismatic_motor, 2000, 0);
 80066a8:	eddf 0aa8 	vldr	s1, [pc, #672]	@ 800694c <plotter_begin+0x674>
 80066ac:	ed9f 0aa8 	vldr	s0, [pc, #672]	@ 8006950 <plotter_begin+0x678>
 80066b0:	48a1      	ldr	r0, [pc, #644]	@ (8006938 <plotter_begin+0x660>)
 80066b2:	f7fa fe67 	bl	8001384 <MDXX_set_range>
	MDXX_set_range(&revolute_motor, 2000, 0);
 80066b6:	eddf 0aa5 	vldr	s1, [pc, #660]	@ 800694c <plotter_begin+0x674>
 80066ba:	ed9f 0aa5 	vldr	s0, [pc, #660]	@ 8006950 <plotter_begin+0x678>
 80066be:	48a0      	ldr	r0, [pc, #640]	@ (8006940 <plotter_begin+0x668>)
 80066c0:	f7fa fe60 	bl	8001384 <MDXX_set_range>

	PID_CONTROLLER_Init(&prismatic_position_pid, 75, 1e-10, 75,
			ZGX45RGG_400RPM_Constant.sd_max);
 80066c4:	4ba3      	ldr	r3, [pc, #652]	@ (8006954 <plotter_begin+0x67c>)
 80066c6:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
	PID_CONTROLLER_Init(&prismatic_position_pid, 75, 1e-10, 75,
 80066ca:	4610      	mov	r0, r2
 80066cc:	4619      	mov	r1, r3
 80066ce:	f7fa fa41 	bl	8000b54 <__aeabi_d2f>
 80066d2:	4603      	mov	r3, r0
 80066d4:	ee01 3a90 	vmov	s3, r3
 80066d8:	ed9f 1a9f 	vldr	s2, [pc, #636]	@ 8006958 <plotter_begin+0x680>
 80066dc:	eddf 0a9f 	vldr	s1, [pc, #636]	@ 800695c <plotter_begin+0x684>
 80066e0:	ed9f 0a9d 	vldr	s0, [pc, #628]	@ 8006958 <plotter_begin+0x680>
 80066e4:	489e      	ldr	r0, [pc, #632]	@ (8006960 <plotter_begin+0x688>)
 80066e6:	f7fa fd64 	bl	80011b2 <PID_CONTROLLER_Init>
	PID_CONTROLLER_Init(&prismatic_velocity_pid, 150, 1e-5, 0,
			ZGX45RGG_400RPM_Constant.U_max);
 80066ea:	4b9a      	ldr	r3, [pc, #616]	@ (8006954 <plotter_begin+0x67c>)
 80066ec:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	PID_CONTROLLER_Init(&prismatic_velocity_pid, 150, 1e-5, 0,
 80066f0:	4610      	mov	r0, r2
 80066f2:	4619      	mov	r1, r3
 80066f4:	f7fa fa2e 	bl	8000b54 <__aeabi_d2f>
 80066f8:	4603      	mov	r3, r0
 80066fa:	ee01 3a90 	vmov	s3, r3
 80066fe:	ed9f 1a93 	vldr	s2, [pc, #588]	@ 800694c <plotter_begin+0x674>
 8006702:	eddf 0a98 	vldr	s1, [pc, #608]	@ 8006964 <plotter_begin+0x68c>
 8006706:	ed9f 0a98 	vldr	s0, [pc, #608]	@ 8006968 <plotter_begin+0x690>
 800670a:	4898      	ldr	r0, [pc, #608]	@ (800696c <plotter_begin+0x694>)
 800670c:	f7fa fd51 	bl	80011b2 <PID_CONTROLLER_Init>

	PID_CONTROLLER_Init(&revolute_position_pid, 50, 1e-2, 150,
			ZGX45RGG_150RPM_Constant.qd_max);
 8006710:	4b97      	ldr	r3, [pc, #604]	@ (8006970 <plotter_begin+0x698>)
 8006712:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	PID_CONTROLLER_Init(&revolute_position_pid, 50, 1e-2, 150,
 8006716:	4610      	mov	r0, r2
 8006718:	4619      	mov	r1, r3
 800671a:	f7fa fa1b 	bl	8000b54 <__aeabi_d2f>
 800671e:	4603      	mov	r3, r0
 8006720:	ee01 3a90 	vmov	s3, r3
 8006724:	ed9f 1a90 	vldr	s2, [pc, #576]	@ 8006968 <plotter_begin+0x690>
 8006728:	eddf 0a92 	vldr	s1, [pc, #584]	@ 8006974 <plotter_begin+0x69c>
 800672c:	ed9f 0a92 	vldr	s0, [pc, #584]	@ 8006978 <plotter_begin+0x6a0>
 8006730:	4892      	ldr	r0, [pc, #584]	@ (800697c <plotter_begin+0x6a4>)
 8006732:	f7fa fd3e 	bl	80011b2 <PID_CONTROLLER_Init>
	PID_CONTROLLER_Init(&revolute_velocity_pid, 3000, 200, 0,
			ZGX45RGG_150RPM_Constant.U_max);
 8006736:	4b8e      	ldr	r3, [pc, #568]	@ (8006970 <plotter_begin+0x698>)
 8006738:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	PID_CONTROLLER_Init(&revolute_velocity_pid, 3000, 200, 0,
 800673c:	4610      	mov	r0, r2
 800673e:	4619      	mov	r1, r3
 8006740:	f7fa fa08 	bl	8000b54 <__aeabi_d2f>
 8006744:	4603      	mov	r3, r0
 8006746:	ee01 3a90 	vmov	s3, r3
 800674a:	ed9f 1a80 	vldr	s2, [pc, #512]	@ 800694c <plotter_begin+0x674>
 800674e:	eddf 0a8c 	vldr	s1, [pc, #560]	@ 8006980 <plotter_begin+0x6a8>
 8006752:	ed9f 0a8c 	vldr	s0, [pc, #560]	@ 8006984 <plotter_begin+0x6ac>
 8006756:	488c      	ldr	r0, [pc, #560]	@ (8006988 <plotter_begin+0x6b0>)
 8006758:	f7fa fd2b 	bl	80011b2 <PID_CONTROLLER_Init>

	REVOLUTE_MOTOR_FFD_Init(&revolute_motor_ffd, &ZGX45RGG_150RPM_Constant);
 800675c:	4984      	ldr	r1, [pc, #528]	@ (8006970 <plotter_begin+0x698>)
 800675e:	488b      	ldr	r0, [pc, #556]	@ (800698c <plotter_begin+0x6b4>)
 8006760:	f7fa feea 	bl	8001538 <REVOLUTE_MOTOR_FFD_Init>
	PRISMATIC_MOTOR_FFD_Init(&prismatic_motor_ffd, &ZGX45RGG_400RPM_Constant);
 8006764:	497b      	ldr	r1, [pc, #492]	@ (8006954 <plotter_begin+0x67c>)
 8006766:	488a      	ldr	r0, [pc, #552]	@ (8006990 <plotter_begin+0x6b8>)
 8006768:	f7fb f864 	bl	8001834 <PRISMATIC_MOTOR_FFD_Init>

	REVOLUTE_MOTOR_DFD_Init(&revolute_motor_dfd, &ZGX45RGG_150RPM_Constant,
 800676c:	4a89      	ldr	r2, [pc, #548]	@ (8006994 <plotter_begin+0x6bc>)
 800676e:	4980      	ldr	r1, [pc, #512]	@ (8006970 <plotter_begin+0x698>)
 8006770:	4889      	ldr	r0, [pc, #548]	@ (8006998 <plotter_begin+0x6c0>)
 8006772:	f7fa ff70 	bl	8001656 <REVOLUTE_MOTOR_DFD_Init>
			&Disturbance_Constant);
	PRISMATIC_MOTOR_DFD_Init(&prismatic_motor_dfd, &ZGX45RGG_400RPM_Constant,
 8006776:	4a87      	ldr	r2, [pc, #540]	@ (8006994 <plotter_begin+0x6bc>)
 8006778:	4976      	ldr	r1, [pc, #472]	@ (8006954 <plotter_begin+0x67c>)
 800677a:	4888      	ldr	r0, [pc, #544]	@ (800699c <plotter_begin+0x6c4>)
 800677c:	f7fb f8e9 	bl	8001952 <PRISMATIC_MOTOR_DFD_Init>
			&Disturbance_Constant);

	ADC_DMA_Init(&joystick, &hadc1, joystick_buffer, ADC_BUFFER_SIZE,
 8006780:	2302      	movs	r3, #2
 8006782:	9300      	str	r3, [sp, #0]
 8006784:	eddf 0a86 	vldr	s1, [pc, #536]	@ 80069a0 <plotter_begin+0x6c8>
 8006788:	ed9f 0a86 	vldr	s0, [pc, #536]	@ 80069a4 <plotter_begin+0x6cc>
 800678c:	2364      	movs	r3, #100	@ 0x64
 800678e:	4a86      	ldr	r2, [pc, #536]	@ (80069a8 <plotter_begin+0x6d0>)
 8006790:	4986      	ldr	r1, [pc, #536]	@ (80069ac <plotter_begin+0x6d4>)
 8006792:	4887      	ldr	r0, [pc, #540]	@ (80069b0 <plotter_begin+0x6d8>)
 8006794:	f7fa fbc4 	bl	8000f20 <ADC_DMA_Init>
	ADC_CHANNELS, ADC_VREF, ADC_RESOLUTION);
	ADC_DMA_SetCenterPoint(&joystick, ADC_CENTERPOINT, ADC_ERROR);
 8006798:	2105      	movs	r1, #5
 800679a:	ed9f 0a86 	vldr	s0, [pc, #536]	@ 80069b4 <plotter_begin+0x6dc>
 800679e:	4884      	ldr	r0, [pc, #528]	@ (80069b0 <plotter_begin+0x6d8>)
 80067a0:	f7fa fc70 	bl	8001084 <ADC_DMA_SetCenterPoint>
	ADC_DMA_Start(&joystick);
 80067a4:	4882      	ldr	r0, [pc, #520]	@ (80069b0 <plotter_begin+0x6d8>)
 80067a6:	f7fa fc13 	bl	8000fd0 <ADC_DMA_Start>

	FIR_init(&prismatic_lp_current, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 80067aa:	eddf 0a83 	vldr	s1, [pc, #524]	@ 80069b8 <plotter_begin+0x6e0>
 80067ae:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 80067b2:	211f      	movs	r1, #31
 80067b4:	4881      	ldr	r0, [pc, #516]	@ (80069bc <plotter_begin+0x6e4>)
 80067b6:	f7fb f993 	bl	8001ae0 <FIR_init>
	FIR_init(&prismatic_lp_velocity, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 80067ba:	eddf 0a7f 	vldr	s1, [pc, #508]	@ 80069b8 <plotter_begin+0x6e0>
 80067be:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 80067c2:	211f      	movs	r1, #31
 80067c4:	487e      	ldr	r0, [pc, #504]	@ (80069c0 <plotter_begin+0x6e8>)
 80067c6:	f7fb f98b 	bl	8001ae0 <FIR_init>
	FIR_init(&revolute_lp_current, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 80067ca:	eddf 0a7b 	vldr	s1, [pc, #492]	@ 80069b8 <plotter_begin+0x6e0>
 80067ce:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 80067d2:	211f      	movs	r1, #31
 80067d4:	487b      	ldr	r0, [pc, #492]	@ (80069c4 <plotter_begin+0x6ec>)
 80067d6:	f7fb f983 	bl	8001ae0 <FIR_init>
	FIR_init(&revolute_lp_velocity, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 80067da:	eddf 0a77 	vldr	s1, [pc, #476]	@ 80069b8 <plotter_begin+0x6e0>
 80067de:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 80067e2:	211f      	movs	r1, #31
 80067e4:	4878      	ldr	r0, [pc, #480]	@ (80069c8 <plotter_begin+0x6f0>)
 80067e6:	f7fb f97b 	bl	8001ae0 <FIR_init>

	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 80067ea:	4b5a      	ldr	r3, [pc, #360]	@ (8006954 <plotter_begin+0x67c>)
 80067ec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80067f0:	4610      	mov	r0, r2
 80067f2:	4619      	mov	r1, r3
 80067f4:	f7fa f9ae 	bl	8000b54 <__aeabi_d2f>
 80067f8:	4604      	mov	r4, r0
			ZGX45RGG_400RPM_Constant.B, ZGX45RGG_400RPM_Constant.Kt,
 80067fa:	4b56      	ldr	r3, [pc, #344]	@ (8006954 <plotter_begin+0x67c>)
 80067fc:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 8006800:	4610      	mov	r0, r2
 8006802:	4619      	mov	r1, r3
 8006804:	f7fa f9a6 	bl	8000b54 <__aeabi_d2f>
 8006808:	4605      	mov	r5, r0
			ZGX45RGG_400RPM_Constant.B, ZGX45RGG_400RPM_Constant.Kt,
 800680a:	4b52      	ldr	r3, [pc, #328]	@ (8006954 <plotter_begin+0x67c>)
 800680c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 8006810:	4610      	mov	r0, r2
 8006812:	4619      	mov	r1, r3
 8006814:	f7fa f99e 	bl	8000b54 <__aeabi_d2f>
 8006818:	4606      	mov	r6, r0
			ZGX45RGG_400RPM_Constant.Ke, ZGX45RGG_400RPM_Constant.R,
 800681a:	4b4e      	ldr	r3, [pc, #312]	@ (8006954 <plotter_begin+0x67c>)
 800681c:	e9d3 2300 	ldrd	r2, r3, [r3]
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 8006820:	4610      	mov	r0, r2
 8006822:	4619      	mov	r1, r3
 8006824:	f7fa f996 	bl	8000b54 <__aeabi_d2f>
 8006828:	4680      	mov	r8, r0
			ZGX45RGG_400RPM_Constant.Ke, ZGX45RGG_400RPM_Constant.R,
 800682a:	4b4a      	ldr	r3, [pc, #296]	@ (8006954 <plotter_begin+0x67c>)
 800682c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 8006830:	4610      	mov	r0, r2
 8006832:	4619      	mov	r1, r3
 8006834:	f7fa f98e 	bl	8000b54 <__aeabi_d2f>
 8006838:	4681      	mov	r9, r0
			ZGX45RGG_400RPM_Constant.L, 1.0, 1.0);
 800683a:	4b46      	ldr	r3, [pc, #280]	@ (8006954 <plotter_begin+0x67c>)
 800683c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 8006840:	4610      	mov	r0, r2
 8006842:	4619      	mov	r1, r3
 8006844:	f7fa f986 	bl	8000b54 <__aeabi_d2f>
 8006848:	4603      	mov	r3, r0
 800684a:	eeb7 4a00 	vmov.f32	s8, #112	@ 0x3f800000  1.0
 800684e:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 8006852:	ee03 3a10 	vmov	s6, r3
 8006856:	ee02 9a90 	vmov	s5, r9
 800685a:	ee02 8a10 	vmov	s4, r8
 800685e:	ee01 6a90 	vmov	s3, r6
 8006862:	ee01 5a10 	vmov	s2, r5
 8006866:	ee00 4a90 	vmov	s1, r4
 800686a:	ed9f 0a58 	vldr	s0, [pc, #352]	@ 80069cc <plotter_begin+0x6f4>
 800686e:	4858      	ldr	r0, [pc, #352]	@ (80069d0 <plotter_begin+0x6f8>)
 8006870:	f7fb fb36 	bl	8001ee0 <MotorKalman_Init>

	MotorKalman_Init(&revolute_kalman, 1e-3, ZGX45RGG_150RPM_Constant.J,
 8006874:	4b3e      	ldr	r3, [pc, #248]	@ (8006970 <plotter_begin+0x698>)
 8006876:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800687a:	4610      	mov	r0, r2
 800687c:	4619      	mov	r1, r3
 800687e:	f7fa f969 	bl	8000b54 <__aeabi_d2f>
 8006882:	4604      	mov	r4, r0
			ZGX45RGG_150RPM_Constant.B, ZGX45RGG_150RPM_Constant.Kt,
 8006884:	4b3a      	ldr	r3, [pc, #232]	@ (8006970 <plotter_begin+0x698>)
 8006886:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
	MotorKalman_Init(&revolute_kalman, 1e-3, ZGX45RGG_150RPM_Constant.J,
 800688a:	4610      	mov	r0, r2
 800688c:	4619      	mov	r1, r3
 800688e:	f7fa f961 	bl	8000b54 <__aeabi_d2f>
 8006892:	4605      	mov	r5, r0
			ZGX45RGG_150RPM_Constant.B, ZGX45RGG_150RPM_Constant.Kt,
 8006894:	4b36      	ldr	r3, [pc, #216]	@ (8006970 <plotter_begin+0x698>)
 8006896:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
	MotorKalman_Init(&revolute_kalman, 1e-3, ZGX45RGG_150RPM_Constant.J,
 800689a:	4610      	mov	r0, r2
 800689c:	4619      	mov	r1, r3
 800689e:	f7fa f959 	bl	8000b54 <__aeabi_d2f>
 80068a2:	4606      	mov	r6, r0
			ZGX45RGG_150RPM_Constant.Ke, ZGX45RGG_150RPM_Constant.R,
 80068a4:	4b32      	ldr	r3, [pc, #200]	@ (8006970 <plotter_begin+0x698>)
 80068a6:	e9d3 2300 	ldrd	r2, r3, [r3]
	MotorKalman_Init(&revolute_kalman, 1e-3, ZGX45RGG_150RPM_Constant.J,
 80068aa:	4610      	mov	r0, r2
 80068ac:	4619      	mov	r1, r3
 80068ae:	f7fa f951 	bl	8000b54 <__aeabi_d2f>
 80068b2:	4680      	mov	r8, r0
			ZGX45RGG_150RPM_Constant.Ke, ZGX45RGG_150RPM_Constant.R,
 80068b4:	4b2e      	ldr	r3, [pc, #184]	@ (8006970 <plotter_begin+0x698>)
 80068b6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
	MotorKalman_Init(&revolute_kalman, 1e-3, ZGX45RGG_150RPM_Constant.J,
 80068ba:	4610      	mov	r0, r2
 80068bc:	4619      	mov	r1, r3
 80068be:	f7fa f949 	bl	8000b54 <__aeabi_d2f>
 80068c2:	4681      	mov	r9, r0
			ZGX45RGG_150RPM_Constant.L, 1.0, 1.0);
 80068c4:	4b2a      	ldr	r3, [pc, #168]	@ (8006970 <plotter_begin+0x698>)
 80068c6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
	MotorKalman_Init(&revolute_kalman, 1e-3, ZGX45RGG_150RPM_Constant.J,
 80068ca:	4610      	mov	r0, r2
 80068cc:	4619      	mov	r1, r3
 80068ce:	f7fa f941 	bl	8000b54 <__aeabi_d2f>
 80068d2:	4603      	mov	r3, r0
 80068d4:	eeb7 4a00 	vmov.f32	s8, #112	@ 0x3f800000  1.0
 80068d8:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 80068dc:	ee03 3a10 	vmov	s6, r3
 80068e0:	ee02 9a90 	vmov	s5, r9
 80068e4:	ee02 8a10 	vmov	s4, r8
 80068e8:	ee01 6a90 	vmov	s3, r6
 80068ec:	ee01 5a10 	vmov	s2, r5
 80068f0:	ee00 4a90 	vmov	s1, r4
 80068f4:	ed9f 0a35 	vldr	s0, [pc, #212]	@ 80069cc <plotter_begin+0x6f4>
 80068f8:	4836      	ldr	r0, [pc, #216]	@ (80069d4 <plotter_begin+0x6fc>)
 80068fa:	f7fb faf1 	bl	8001ee0 <MotorKalman_Init>

	Modbus_init(&ModBus, MODBUS_USART, MODBUS_DATA_SENDING_PERIOD_TIM,
 80068fe:	23c8      	movs	r3, #200	@ 0xc8
 8006900:	9301      	str	r3, [sp, #4]
 8006902:	2315      	movs	r3, #21
 8006904:	9300      	str	r3, [sp, #0]
 8006906:	4b34      	ldr	r3, [pc, #208]	@ (80069d8 <plotter_begin+0x700>)
 8006908:	4a34      	ldr	r2, [pc, #208]	@ (80069dc <plotter_begin+0x704>)
 800690a:	4935      	ldr	r1, [pc, #212]	@ (80069e0 <plotter_begin+0x708>)
 800690c:	4835      	ldr	r0, [pc, #212]	@ (80069e4 <plotter_begin+0x70c>)
 800690e:	f7fb fa7f 	bl	8001e10 <Modbus_init>
			registerFrame, MODBUS_SLAVE_ADDRESS, MODBUS_REGISTER_FRAME_SIZE);

	HAL_TIM_Base_Start_IT(CONTROL_TIM);
 8006912:	4835      	ldr	r0, [pc, #212]	@ (80069e8 <plotter_begin+0x710>)
 8006914:	f004 fde6 	bl	800b4e4 <HAL_TIM_Base_Start_IT>

	plotter_reset();
 8006918:	f000 f868 	bl	80069ec <plotter_reset>
}
 800691c:	bf00      	nop
 800691e:	3704      	adds	r7, #4
 8006920:	46bd      	mov	sp, r7
 8006922:	ecbd 8b02 	vpop	{d8}
 8006926:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800692a:	bf00      	nop
 800692c:	20001adc 	.word	0x20001adc
 8006930:	20000444 	.word	0x20000444
 8006934:	20001c74 	.word	0x20001c74
 8006938:	20000350 	.word	0x20000350
 800693c:	48000800 	.word	0x48000800
 8006940:	2000039c 	.word	0x2000039c
 8006944:	20001878 	.word	0x20001878
 8006948:	20000558 	.word	0x20000558
 800694c:	00000000 	.word	0x00000000
 8006950:	44fa0000 	.word	0x44fa0000
 8006954:	20000060 	.word	0x20000060
 8006958:	42960000 	.word	0x42960000
 800695c:	2edbe6ff 	.word	0x2edbe6ff
 8006960:	200004a0 	.word	0x200004a0
 8006964:	3727c5ac 	.word	0x3727c5ac
 8006968:	43160000 	.word	0x43160000
 800696c:	200004c8 	.word	0x200004c8
 8006970:	20000000 	.word	0x20000000
 8006974:	3c23d70a 	.word	0x3c23d70a
 8006978:	42480000 	.word	0x42480000
 800697c:	200004f0 	.word	0x200004f0
 8006980:	43480000 	.word	0x43480000
 8006984:	453b8000 	.word	0x453b8000
 8006988:	20000518 	.word	0x20000518
 800698c:	2000054c 	.word	0x2000054c
 8006990:	20000540 	.word	0x20000540
 8006994:	200000c0 	.word	0x200000c0
 8006998:	20000550 	.word	0x20000550
 800699c:	20000544 	.word	0x20000544
 80069a0:	457ff000 	.word	0x457ff000
 80069a4:	40533333 	.word	0x40533333
 80069a8:	20001114 	.word	0x20001114
 80069ac:	20000178 	.word	0x20000178
 80069b0:	20000570 	.word	0x20000570
 80069b4:	45000000 	.word	0x45000000
 80069b8:	447a0000 	.word	0x447a0000
 80069bc:	20000a18 	.word	0x20000a18
 80069c0:	20000a0c 	.word	0x20000a0c
 80069c4:	20000a30 	.word	0x20000a30
 80069c8:	20000a24 	.word	0x20000a24
 80069cc:	3a83126f 	.word	0x3a83126f
 80069d0:	20000a3c 	.word	0x20000a3c
 80069d4:	20000da8 	.word	0x20000da8
 80069d8:	200016b4 	.word	0x200016b4
 80069dc:	20001d40 	.word	0x20001d40
 80069e0:	20001ed8 	.word	0x20001ed8
 80069e4:	200011dc 	.word	0x200011dc
 80069e8:	20001944 	.word	0x20001944

080069ec <plotter_reset>:

void plotter_reset() {
 80069ec:	b480      	push	{r7}
 80069ee:	af00      	add	r7, sp, #0
    prismatic_encoder.diff_counts = 0;
 80069f0:	4b18      	ldr	r3, [pc, #96]	@ (8006a54 <plotter_reset+0x68>)
 80069f2:	2200      	movs	r2, #0
 80069f4:	625a      	str	r2, [r3, #36]	@ 0x24
    prismatic_encoder.rpm = 0;
 80069f6:	4b17      	ldr	r3, [pc, #92]	@ (8006a54 <plotter_reset+0x68>)
 80069f8:	f04f 0200 	mov.w	r2, #0
 80069fc:	631a      	str	r2, [r3, #48]	@ 0x30
    prismatic_encoder.pulses = 0;
 80069fe:	4b15      	ldr	r3, [pc, #84]	@ (8006a54 <plotter_reset+0x68>)
 8006a00:	2200      	movs	r2, #0
 8006a02:	639a      	str	r2, [r3, #56]	@ 0x38
    prismatic_encoder.revs = 0;
 8006a04:	4b13      	ldr	r3, [pc, #76]	@ (8006a54 <plotter_reset+0x68>)
 8006a06:	f04f 0200 	mov.w	r2, #0
 8006a0a:	63da      	str	r2, [r3, #60]	@ 0x3c
    prismatic_encoder.rads = 0;
 8006a0c:	4b11      	ldr	r3, [pc, #68]	@ (8006a54 <plotter_reset+0x68>)
 8006a0e:	f04f 0200 	mov.w	r2, #0
 8006a12:	641a      	str	r2, [r3, #64]	@ 0x40
    prismatic_encoder.mm = 0;
 8006a14:	4b0f      	ldr	r3, [pc, #60]	@ (8006a54 <plotter_reset+0x68>)
 8006a16:	f04f 0200 	mov.w	r2, #0
 8006a1a:	649a      	str	r2, [r3, #72]	@ 0x48

    revolute_encoder.diff_counts = 0;
 8006a1c:	4b0e      	ldr	r3, [pc, #56]	@ (8006a58 <plotter_reset+0x6c>)
 8006a1e:	2200      	movs	r2, #0
 8006a20:	625a      	str	r2, [r3, #36]	@ 0x24
    revolute_encoder.rpm = 0;
 8006a22:	4b0d      	ldr	r3, [pc, #52]	@ (8006a58 <plotter_reset+0x6c>)
 8006a24:	f04f 0200 	mov.w	r2, #0
 8006a28:	631a      	str	r2, [r3, #48]	@ 0x30
    revolute_encoder.pulses = 0;
 8006a2a:	4b0b      	ldr	r3, [pc, #44]	@ (8006a58 <plotter_reset+0x6c>)
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	639a      	str	r2, [r3, #56]	@ 0x38
    revolute_encoder.revs = 0;
 8006a30:	4b09      	ldr	r3, [pc, #36]	@ (8006a58 <plotter_reset+0x6c>)
 8006a32:	f04f 0200 	mov.w	r2, #0
 8006a36:	63da      	str	r2, [r3, #60]	@ 0x3c
    revolute_encoder.rads = 0;
 8006a38:	4b07      	ldr	r3, [pc, #28]	@ (8006a58 <plotter_reset+0x6c>)
 8006a3a:	f04f 0200 	mov.w	r2, #0
 8006a3e:	641a      	str	r2, [r3, #64]	@ 0x40
    revolute_encoder.mm = 0;
 8006a40:	4b05      	ldr	r3, [pc, #20]	@ (8006a58 <plotter_reset+0x6c>)
 8006a42:	f04f 0200 	mov.w	r2, #0
 8006a46:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8006a48:	bf00      	nop
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a50:	4770      	bx	lr
 8006a52:	bf00      	nop
 8006a54:	200003e8 	.word	0x200003e8
 8006a58:	20000444 	.word	0x20000444

08006a5c <plotter_update_sensors>:

void plotter_update_sensors() {
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	af00      	add	r7, sp, #0
	joystick_x = ADC_DMA_GetJoystickValue(&joystick, JOYSTICK_X_CHANNEL, -50,
 8006a60:	eddf 0a58 	vldr	s1, [pc, #352]	@ 8006bc4 <plotter_update_sensors+0x168>
 8006a64:	ed9f 0a58 	vldr	s0, [pc, #352]	@ 8006bc8 <plotter_update_sensors+0x16c>
 8006a68:	2106      	movs	r1, #6
 8006a6a:	4858      	ldr	r0, [pc, #352]	@ (8006bcc <plotter_update_sensors+0x170>)
 8006a6c:	f7fa fb34 	bl	80010d8 <ADC_DMA_GetJoystickValue>
 8006a70:	eef0 7a40 	vmov.f32	s15, s0
 8006a74:	4b56      	ldr	r3, [pc, #344]	@ (8006bd0 <plotter_update_sensors+0x174>)
 8006a76:	edc3 7a00 	vstr	s15, [r3]
			50);
	joystick_y = ADC_DMA_GetJoystickValue(&joystick, JOYSTICK_Y_CHANNEL, -50,
 8006a7a:	eddf 0a52 	vldr	s1, [pc, #328]	@ 8006bc4 <plotter_update_sensors+0x168>
 8006a7e:	ed9f 0a52 	vldr	s0, [pc, #328]	@ 8006bc8 <plotter_update_sensors+0x16c>
 8006a82:	2107      	movs	r1, #7
 8006a84:	4851      	ldr	r0, [pc, #324]	@ (8006bcc <plotter_update_sensors+0x170>)
 8006a86:	f7fa fb27 	bl	80010d8 <ADC_DMA_GetJoystickValue>
 8006a8a:	eef0 7a40 	vmov.f32	s15, s0
 8006a8e:	4b51      	ldr	r3, [pc, #324]	@ (8006bd4 <plotter_update_sensors+0x178>)
 8006a90:	edc3 7a00 	vstr	s15, [r3]
			50);

	b1 = !HAL_GPIO_ReadPin(J1_GPIO_Port, J1_Pin);
 8006a94:	2180      	movs	r1, #128	@ 0x80
 8006a96:	4850      	ldr	r0, [pc, #320]	@ (8006bd8 <plotter_update_sensors+0x17c>)
 8006a98:	f003 fbd8 	bl	800a24c <HAL_GPIO_ReadPin>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	bf0c      	ite	eq
 8006aa2:	2301      	moveq	r3, #1
 8006aa4:	2300      	movne	r3, #0
 8006aa6:	b2db      	uxtb	r3, r3
 8006aa8:	461a      	mov	r2, r3
 8006aaa:	4b4c      	ldr	r3, [pc, #304]	@ (8006bdc <plotter_update_sensors+0x180>)
 8006aac:	601a      	str	r2, [r3, #0]
	b2 = !HAL_GPIO_ReadPin(J2_GPIO_Port, J2_Pin);
 8006aae:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8006ab2:	484b      	ldr	r0, [pc, #300]	@ (8006be0 <plotter_update_sensors+0x184>)
 8006ab4:	f003 fbca 	bl	800a24c <HAL_GPIO_ReadPin>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	bf0c      	ite	eq
 8006abe:	2301      	moveq	r3, #1
 8006ac0:	2300      	movne	r3, #0
 8006ac2:	b2db      	uxtb	r3, r3
 8006ac4:	461a      	mov	r2, r3
 8006ac6:	4b47      	ldr	r3, [pc, #284]	@ (8006be4 <plotter_update_sensors+0x188>)
 8006ac8:	601a      	str	r2, [r3, #0]
	b3 = !HAL_GPIO_ReadPin(J3_GPIO_Port, J3_Pin);
 8006aca:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006ace:	4844      	ldr	r0, [pc, #272]	@ (8006be0 <plotter_update_sensors+0x184>)
 8006ad0:	f003 fbbc 	bl	800a24c <HAL_GPIO_ReadPin>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	bf0c      	ite	eq
 8006ada:	2301      	moveq	r3, #1
 8006adc:	2300      	movne	r3, #0
 8006ade:	b2db      	uxtb	r3, r3
 8006ae0:	461a      	mov	r2, r3
 8006ae2:	4b41      	ldr	r3, [pc, #260]	@ (8006be8 <plotter_update_sensors+0x18c>)
 8006ae4:	601a      	str	r2, [r3, #0]
	b4 = !HAL_GPIO_ReadPin(J4_GPIO_Port, J4_Pin);
 8006ae6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8006aea:	483d      	ldr	r0, [pc, #244]	@ (8006be0 <plotter_update_sensors+0x184>)
 8006aec:	f003 fbae 	bl	800a24c <HAL_GPIO_ReadPin>
 8006af0:	4603      	mov	r3, r0
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	bf0c      	ite	eq
 8006af6:	2301      	moveq	r3, #1
 8006af8:	2300      	movne	r3, #0
 8006afa:	b2db      	uxtb	r3, r3
 8006afc:	461a      	mov	r2, r3
 8006afe:	4b3b      	ldr	r3, [pc, #236]	@ (8006bec <plotter_update_sensors+0x190>)
 8006b00:	601a      	str	r2, [r3, #0]

	prox = HAL_GPIO_ReadPin(PROX_GPIO_Port, PROX_Pin);
 8006b02:	2120      	movs	r1, #32
 8006b04:	4834      	ldr	r0, [pc, #208]	@ (8006bd8 <plotter_update_sensors+0x17c>)
 8006b06:	f003 fba1 	bl	800a24c <HAL_GPIO_ReadPin>
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	461a      	mov	r2, r3
 8006b0e:	4b38      	ldr	r3, [pc, #224]	@ (8006bf0 <plotter_update_sensors+0x194>)
 8006b10:	601a      	str	r2, [r3, #0]
	up_photo = HAL_GPIO_ReadPin(UPPER_PHOTO_GPIO_Port, UPPER_PHOTO_Pin);
 8006b12:	2101      	movs	r1, #1
 8006b14:	4830      	ldr	r0, [pc, #192]	@ (8006bd8 <plotter_update_sensors+0x17c>)
 8006b16:	f003 fb99 	bl	800a24c <HAL_GPIO_ReadPin>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	461a      	mov	r2, r3
 8006b1e:	4b35      	ldr	r3, [pc, #212]	@ (8006bf4 <plotter_update_sensors+0x198>)
 8006b20:	601a      	str	r2, [r3, #0]
	low_photo = HAL_GPIO_ReadPin(LOWER_PHOTO_GPIO_Port, LOWER_PHOTO_Pin);
 8006b22:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8006b26:	482c      	ldr	r0, [pc, #176]	@ (8006bd8 <plotter_update_sensors+0x17c>)
 8006b28:	f003 fb90 	bl	800a24c <HAL_GPIO_ReadPin>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	461a      	mov	r2, r3
 8006b30:	4b31      	ldr	r3, [pc, #196]	@ (8006bf8 <plotter_update_sensors+0x19c>)
 8006b32:	601a      	str	r2, [r3, #0]
	up_lim = HAL_GPIO_ReadPin(UPPER_LIM_GPIO_Port, UPPER_LIM_Pin);
 8006b34:	2104      	movs	r1, #4
 8006b36:	4828      	ldr	r0, [pc, #160]	@ (8006bd8 <plotter_update_sensors+0x17c>)
 8006b38:	f003 fb88 	bl	800a24c <HAL_GPIO_ReadPin>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	461a      	mov	r2, r3
 8006b40:	4b2e      	ldr	r3, [pc, #184]	@ (8006bfc <plotter_update_sensors+0x1a0>)
 8006b42:	601a      	str	r2, [r3, #0]
	low_lim = HAL_GPIO_ReadPin(LOWER_LIM_GPIO_Port, LOWER_LIM_Pin);
 8006b44:	2102      	movs	r1, #2
 8006b46:	4824      	ldr	r0, [pc, #144]	@ (8006bd8 <plotter_update_sensors+0x17c>)
 8006b48:	f003 fb80 	bl	800a24c <HAL_GPIO_ReadPin>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	461a      	mov	r2, r3
 8006b50:	4b2b      	ldr	r3, [pc, #172]	@ (8006c00 <plotter_update_sensors+0x1a4>)
 8006b52:	601a      	str	r2, [r3, #0]

	emer = !HAL_GPIO_ReadPin(EMER_GPIO_Port, EMER_Pin);
 8006b54:	2110      	movs	r1, #16
 8006b56:	4820      	ldr	r0, [pc, #128]	@ (8006bd8 <plotter_update_sensors+0x17c>)
 8006b58:	f003 fb78 	bl	800a24c <HAL_GPIO_ReadPin>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	bf0c      	ite	eq
 8006b62:	2301      	moveq	r3, #1
 8006b64:	2300      	movne	r3, #0
 8006b66:	b2db      	uxtb	r3, r3
 8006b68:	461a      	mov	r2, r3
 8006b6a:	4b26      	ldr	r3, [pc, #152]	@ (8006c04 <plotter_update_sensors+0x1a8>)
 8006b6c:	601a      	str	r2, [r3, #0]

	if (up_lim) {
 8006b6e:	4b23      	ldr	r3, [pc, #140]	@ (8006bfc <plotter_update_sensors+0x1a0>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d003      	beq.n	8006b7e <plotter_update_sensors+0x122>
		servo_state = PEN_UP;
 8006b76:	4b24      	ldr	r3, [pc, #144]	@ (8006c08 <plotter_update_sensors+0x1ac>)
 8006b78:	2202      	movs	r2, #2
 8006b7a:	701a      	strb	r2, [r3, #0]
 8006b7c:	e00a      	b.n	8006b94 <plotter_update_sensors+0x138>
	} else if (low_lim) {
 8006b7e:	4b20      	ldr	r3, [pc, #128]	@ (8006c00 <plotter_update_sensors+0x1a4>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d003      	beq.n	8006b8e <plotter_update_sensors+0x132>
		servo_state = PEN_DOWN;
 8006b86:	4b20      	ldr	r3, [pc, #128]	@ (8006c08 <plotter_update_sensors+0x1ac>)
 8006b88:	2201      	movs	r2, #1
 8006b8a:	701a      	strb	r2, [r3, #0]
 8006b8c:	e002      	b.n	8006b94 <plotter_update_sensors+0x138>
	} else {
		servo_state = PEN_IDLE;
 8006b8e:	4b1e      	ldr	r3, [pc, #120]	@ (8006c08 <plotter_update_sensors+0x1ac>)
 8006b90:	2200      	movs	r2, #0
 8006b92:	701a      	strb	r2, [r3, #0]
	}

	if (up_photo) {
 8006b94:	4b17      	ldr	r3, [pc, #92]	@ (8006bf4 <plotter_update_sensors+0x198>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d003      	beq.n	8006ba4 <plotter_update_sensors+0x148>
		prismatic_state = PP_AT_TOP_END_POSITION;
 8006b9c:	4b1b      	ldr	r3, [pc, #108]	@ (8006c0c <plotter_update_sensors+0x1b0>)
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	701a      	strb	r2, [r3, #0]
 8006ba2:	e006      	b.n	8006bb2 <plotter_update_sensors+0x156>
	} else if (low_photo) {
 8006ba4:	4b14      	ldr	r3, [pc, #80]	@ (8006bf8 <plotter_update_sensors+0x19c>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d002      	beq.n	8006bb2 <plotter_update_sensors+0x156>
		prismatic_state = PP_AT_BOTTOM_END_POSITION;
 8006bac:	4b17      	ldr	r3, [pc, #92]	@ (8006c0c <plotter_update_sensors+0x1b0>)
 8006bae:	2202      	movs	r2, #2
 8006bb0:	701a      	strb	r2, [r3, #0]
	}

	if (prox) {
 8006bb2:	4b0f      	ldr	r3, [pc, #60]	@ (8006bf0 <plotter_update_sensors+0x194>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d002      	beq.n	8006bc0 <plotter_update_sensors+0x164>
		revolute_state = RP_AT_HOME_POSITION;
 8006bba:	4b15      	ldr	r3, [pc, #84]	@ (8006c10 <plotter_update_sensors+0x1b4>)
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	701a      	strb	r2, [r3, #0]
	}
}
 8006bc0:	bf00      	nop
 8006bc2:	bd80      	pop	{r7, pc}
 8006bc4:	42480000 	.word	0x42480000
 8006bc8:	c2480000 	.word	0xc2480000
 8006bcc:	20000570 	.word	0x20000570
 8006bd0:	20001844 	.word	0x20001844
 8006bd4:	20001848 	.word	0x20001848
 8006bd8:	48000400 	.word	0x48000400
 8006bdc:	20001864 	.word	0x20001864
 8006be0:	48000800 	.word	0x48000800
 8006be4:	20001868 	.word	0x20001868
 8006be8:	2000186c 	.word	0x2000186c
 8006bec:	20001870 	.word	0x20001870
 8006bf0:	2000184c 	.word	0x2000184c
 8006bf4:	20001854 	.word	0x20001854
 8006bf8:	20001858 	.word	0x20001858
 8006bfc:	2000185c 	.word	0x2000185c
 8006c00:	20001860 	.word	0x20001860
 8006c04:	20001850 	.word	0x20001850
 8006c08:	2000034c 	.word	0x2000034c
 8006c0c:	200000f9 	.word	0x200000f9
 8006c10:	200000fa 	.word	0x200000fa

08006c14 <plotter_pen_up>:

void plotter_pen_up() {
 8006c14:	b580      	push	{r7, lr}
 8006c16:	af00      	add	r7, sp, #0
	PWM_write_duty(&servo, 50, 7);
 8006c18:	eef1 0a0c 	vmov.f32	s1, #28	@ 0x40e00000  7.0
 8006c1c:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 8006c2c <plotter_pen_up+0x18>
 8006c20:	4803      	ldr	r0, [pc, #12]	@ (8006c30 <plotter_pen_up+0x1c>)
 8006c22:	f7fc fb93 	bl	800334c <PWM_write_duty>
}
 8006c26:	bf00      	nop
 8006c28:	bd80      	pop	{r7, pc}
 8006c2a:	bf00      	nop
 8006c2c:	42480000 	.word	0x42480000
 8006c30:	20000558 	.word	0x20000558

08006c34 <plotter_pen_down>:

void plotter_pen_down() {
 8006c34:	b580      	push	{r7, lr}
 8006c36:	af00      	add	r7, sp, #0
	PWM_write_duty(&servo, 50, 12);
 8006c38:	eef2 0a08 	vmov.f32	s1, #40	@ 0x41400000  12.0
 8006c3c:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 8006c4c <plotter_pen_down+0x18>
 8006c40:	4803      	ldr	r0, [pc, #12]	@ (8006c50 <plotter_pen_down+0x1c>)
 8006c42:	f7fc fb83 	bl	800334c <PWM_write_duty>
}
 8006c46:	bf00      	nop
 8006c48:	bd80      	pop	{r7, pc}
 8006c4a:	bf00      	nop
 8006c4c:	42480000 	.word	0x42480000
 8006c50:	20000558 	.word	0x20000558

08006c54 <SIGNAL_init>:
    if (value > max_setpoint) return max_setpoint;
    return value;
}

// Initialization function
void SIGNAL_init(SignalGenerator* sg, SignalType type) {
 8006c54:	b480      	push	{r7}
 8006c56:	b083      	sub	sp, #12
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
 8006c5c:	460b      	mov	r3, r1
 8006c5e:	70fb      	strb	r3, [r7, #3]
    // Reset all parameters
    sg->type = type;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	78fa      	ldrb	r2, [r7, #3]
 8006c64:	701a      	strb	r2, [r3, #0]
    sg->amplitude = 1.0f;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8006c6c:	605a      	str	r2, [r3, #4]
    sg->frequency = 1.0f;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8006c74:	609a      	str	r2, [r3, #8]
    sg->phase = 0.0f;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f04f 0200 	mov.w	r2, #0
 8006c7c:	60da      	str	r2, [r3, #12]
    sg->offset = 0.0f;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	f04f 0200 	mov.w	r2, #0
 8006c84:	611a      	str	r2, [r3, #16]
    sg->current_phase = 0.0f;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f04f 0200 	mov.w	r2, #0
 8006c8c:	635a      	str	r2, [r3, #52]	@ 0x34
    sg->time_elapsed = 0.0f;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f04f 0200 	mov.w	r2, #0
 8006c94:	639a      	str	r2, [r3, #56]	@ 0x38
    sg->min_setpoint = -1.0f;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	4a1b      	ldr	r2, [pc, #108]	@ (8006d08 <SIGNAL_init+0xb4>)
 8006c9a:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = 1.0f;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8006ca2:	641a      	str	r2, [r3, #64]	@ 0x40

    // Type-specific initializations
    switch (type) {
 8006ca4:	78fb      	ldrb	r3, [r7, #3]
 8006ca6:	2b03      	cmp	r3, #3
 8006ca8:	d828      	bhi.n	8006cfc <SIGNAL_init+0xa8>
 8006caa:	a201      	add	r2, pc, #4	@ (adr r2, 8006cb0 <SIGNAL_init+0x5c>)
 8006cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cb0:	08006cfb 	.word	0x08006cfb
 8006cb4:	08006cc1 	.word	0x08006cc1
 8006cb8:	08006cdf 	.word	0x08006cdf
 8006cbc:	08006ce9 	.word	0x08006ce9
        case SIGNAL_SINE:
            break;
        case SIGNAL_CHIRP:
            sg->chirp_type = CHIRP_LINEAR;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	751a      	strb	r2, [r3, #20]
            sg->f_start = 1.0f;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8006ccc:	619a      	str	r2, [r3, #24]
            sg->f_end = 10.0f;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	4a0e      	ldr	r2, [pc, #56]	@ (8006d0c <SIGNAL_init+0xb8>)
 8006cd2:	61da      	str	r2, [r3, #28]
            sg->duration = 1.0f;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8006cda:	621a      	str	r2, [r3, #32]
            break;
 8006cdc:	e00e      	b.n	8006cfc <SIGNAL_init+0xa8>
        case SIGNAL_SQUARE:
            sg->duty_cycle = 0.5f;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8006ce4:	629a      	str	r2, [r3, #40]	@ 0x28
            break;
 8006ce6:	e009      	b.n	8006cfc <SIGNAL_init+0xa8>
        case SIGNAL_RAMP:
            sg->ramp_start = 0.0f;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f04f 0200 	mov.w	r2, #0
 8006cee:	62da      	str	r2, [r3, #44]	@ 0x2c
            sg->ramp_end = 1.0f;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8006cf6:	631a      	str	r2, [r3, #48]	@ 0x30
            break;
 8006cf8:	e000      	b.n	8006cfc <SIGNAL_init+0xa8>
            break;
 8006cfa:	bf00      	nop
    }
}
 8006cfc:	bf00      	nop
 8006cfe:	370c      	adds	r7, #12
 8006d00:	46bd      	mov	sp, r7
 8006d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d06:	4770      	bx	lr
 8006d08:	bf800000 	.word	0xbf800000
 8006d0c:	41200000 	.word	0x41200000

08006d10 <SIGNAL_config_sine>:
                        float32_t amplitude,
                        float32_t frequency,
                        float32_t phase,
                        float32_t offset,
                        float32_t min_setpoint,
                        float32_t max_setpoint) {
 8006d10:	b480      	push	{r7}
 8006d12:	b089      	sub	sp, #36	@ 0x24
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	61f8      	str	r0, [r7, #28]
 8006d18:	ed87 0a06 	vstr	s0, [r7, #24]
 8006d1c:	edc7 0a05 	vstr	s1, [r7, #20]
 8006d20:	ed87 1a04 	vstr	s2, [r7, #16]
 8006d24:	edc7 1a03 	vstr	s3, [r7, #12]
 8006d28:	ed87 2a02 	vstr	s4, [r7, #8]
 8006d2c:	edc7 2a01 	vstr	s5, [r7, #4]
    sg->type = SIGNAL_SINE;
 8006d30:	69fb      	ldr	r3, [r7, #28]
 8006d32:	2200      	movs	r2, #0
 8006d34:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 8006d36:	69fb      	ldr	r3, [r7, #28]
 8006d38:	69ba      	ldr	r2, [r7, #24]
 8006d3a:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 8006d3c:	69fb      	ldr	r3, [r7, #28]
 8006d3e:	697a      	ldr	r2, [r7, #20]
 8006d40:	609a      	str	r2, [r3, #8]
    sg->phase = phase;
 8006d42:	69fb      	ldr	r3, [r7, #28]
 8006d44:	693a      	ldr	r2, [r7, #16]
 8006d46:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 8006d48:	69fb      	ldr	r3, [r7, #28]
 8006d4a:	68fa      	ldr	r2, [r7, #12]
 8006d4c:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 8006d4e:	69fb      	ldr	r3, [r7, #28]
 8006d50:	68ba      	ldr	r2, [r7, #8]
 8006d52:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 8006d54:	69fb      	ldr	r3, [r7, #28]
 8006d56:	687a      	ldr	r2, [r7, #4]
 8006d58:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8006d5a:	bf00      	nop
 8006d5c:	3724      	adds	r7, #36	@ 0x24
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d64:	4770      	bx	lr

08006d66 <SIGNAL_config_square>:
                          float32_t frequency,
                          float32_t duty_cycle,
                          float32_t phase,
                          float32_t offset,
                          float32_t min_setpoint,
                          float32_t max_setpoint) {
 8006d66:	b480      	push	{r7}
 8006d68:	b089      	sub	sp, #36	@ 0x24
 8006d6a:	af00      	add	r7, sp, #0
 8006d6c:	61f8      	str	r0, [r7, #28]
 8006d6e:	ed87 0a06 	vstr	s0, [r7, #24]
 8006d72:	edc7 0a05 	vstr	s1, [r7, #20]
 8006d76:	ed87 1a04 	vstr	s2, [r7, #16]
 8006d7a:	edc7 1a03 	vstr	s3, [r7, #12]
 8006d7e:	ed87 2a02 	vstr	s4, [r7, #8]
 8006d82:	edc7 2a01 	vstr	s5, [r7, #4]
 8006d86:	ed87 3a00 	vstr	s6, [r7]
    sg->type = SIGNAL_SQUARE;
 8006d8a:	69fb      	ldr	r3, [r7, #28]
 8006d8c:	2202      	movs	r2, #2
 8006d8e:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 8006d90:	69fb      	ldr	r3, [r7, #28]
 8006d92:	69ba      	ldr	r2, [r7, #24]
 8006d94:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 8006d96:	69fb      	ldr	r3, [r7, #28]
 8006d98:	697a      	ldr	r2, [r7, #20]
 8006d9a:	609a      	str	r2, [r3, #8]
    sg->duty_cycle = duty_cycle;
 8006d9c:	69fb      	ldr	r3, [r7, #28]
 8006d9e:	693a      	ldr	r2, [r7, #16]
 8006da0:	629a      	str	r2, [r3, #40]	@ 0x28
    sg->phase = phase;
 8006da2:	69fb      	ldr	r3, [r7, #28]
 8006da4:	68fa      	ldr	r2, [r7, #12]
 8006da6:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 8006da8:	69fb      	ldr	r3, [r7, #28]
 8006daa:	68ba      	ldr	r2, [r7, #8]
 8006dac:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 8006dae:	69fb      	ldr	r3, [r7, #28]
 8006db0:	687a      	ldr	r2, [r7, #4]
 8006db2:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 8006db4:	69fb      	ldr	r3, [r7, #28]
 8006db6:	683a      	ldr	r2, [r7, #0]
 8006db8:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8006dba:	bf00      	nop
 8006dbc:	3724      	adds	r7, #36	@ 0x24
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc4:	4770      	bx	lr
	...

08006dc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b082      	sub	sp, #8
 8006dcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006dce:	4b0f      	ldr	r3, [pc, #60]	@ (8006e0c <HAL_MspInit+0x44>)
 8006dd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006dd2:	4a0e      	ldr	r2, [pc, #56]	@ (8006e0c <HAL_MspInit+0x44>)
 8006dd4:	f043 0301 	orr.w	r3, r3, #1
 8006dd8:	6613      	str	r3, [r2, #96]	@ 0x60
 8006dda:	4b0c      	ldr	r3, [pc, #48]	@ (8006e0c <HAL_MspInit+0x44>)
 8006ddc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006dde:	f003 0301 	and.w	r3, r3, #1
 8006de2:	607b      	str	r3, [r7, #4]
 8006de4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006de6:	4b09      	ldr	r3, [pc, #36]	@ (8006e0c <HAL_MspInit+0x44>)
 8006de8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006dea:	4a08      	ldr	r2, [pc, #32]	@ (8006e0c <HAL_MspInit+0x44>)
 8006dec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006df0:	6593      	str	r3, [r2, #88]	@ 0x58
 8006df2:	4b06      	ldr	r3, [pc, #24]	@ (8006e0c <HAL_MspInit+0x44>)
 8006df4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006df6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006dfa:	603b      	str	r3, [r7, #0]
 8006dfc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8006dfe:	f003 fb11 	bl	800a424 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006e02:	bf00      	nop
 8006e04:	3708      	adds	r7, #8
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bd80      	pop	{r7, pc}
 8006e0a:	bf00      	nop
 8006e0c:	40021000 	.word	0x40021000

08006e10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006e10:	b480      	push	{r7}
 8006e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8006e14:	bf00      	nop
 8006e16:	e7fd      	b.n	8006e14 <NMI_Handler+0x4>

08006e18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006e1c:	bf00      	nop
 8006e1e:	e7fd      	b.n	8006e1c <HardFault_Handler+0x4>

08006e20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006e20:	b480      	push	{r7}
 8006e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006e24:	bf00      	nop
 8006e26:	e7fd      	b.n	8006e24 <MemManage_Handler+0x4>

08006e28 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006e2c:	bf00      	nop
 8006e2e:	e7fd      	b.n	8006e2c <BusFault_Handler+0x4>

08006e30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006e30:	b480      	push	{r7}
 8006e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006e34:	bf00      	nop
 8006e36:	e7fd      	b.n	8006e34 <UsageFault_Handler+0x4>

08006e38 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006e38:	b480      	push	{r7}
 8006e3a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006e3c:	bf00      	nop
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e44:	4770      	bx	lr

08006e46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006e46:	b480      	push	{r7}
 8006e48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006e4a:	bf00      	nop
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e52:	4770      	bx	lr

08006e54 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006e54:	b480      	push	{r7}
 8006e56:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006e58:	bf00      	nop
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e60:	4770      	bx	lr

08006e62 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006e62:	b580      	push	{r7, lr}
 8006e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006e66:	f000 ff97 	bl	8007d98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006e6a:	bf00      	nop
 8006e6c:	bd80      	pop	{r7, pc}
	...

08006e70 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8006e74:	4802      	ldr	r0, [pc, #8]	@ (8006e80 <DMA1_Channel1_IRQHandler+0x10>)
 8006e76:	f002 ff18 	bl	8009caa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8006e7a:	bf00      	nop
 8006e7c:	bd80      	pop	{r7, pc}
 8006e7e:	bf00      	nop
 8006e80:	200001e4 	.word	0x200001e4

08006e84 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8006e88:	4802      	ldr	r0, [pc, #8]	@ (8006e94 <DMA1_Channel2_IRQHandler+0x10>)
 8006e8a:	f002 ff0e 	bl	8009caa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8006e8e:	bf00      	nop
 8006e90:	bd80      	pop	{r7, pc}
 8006e92:	bf00      	nop
 8006e94:	20002064 	.word	0x20002064

08006e98 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8006e9c:	4802      	ldr	r0, [pc, #8]	@ (8006ea8 <DMA1_Channel3_IRQHandler+0x10>)
 8006e9e:	f002 ff04 	bl	8009caa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8006ea2:	bf00      	nop
 8006ea4:	bd80      	pop	{r7, pc}
 8006ea6:	bf00      	nop
 8006ea8:	200020c4 	.word	0x200020c4

08006eac <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8006eb0:	4802      	ldr	r0, [pc, #8]	@ (8006ebc <DMA1_Channel4_IRQHandler+0x10>)
 8006eb2:	f002 fefa 	bl	8009caa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8006eb6:	bf00      	nop
 8006eb8:	bd80      	pop	{r7, pc}
 8006eba:	bf00      	nop
 8006ebc:	20001fa4 	.word	0x20001fa4

08006ec0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8006ec4:	4802      	ldr	r0, [pc, #8]	@ (8006ed0 <DMA1_Channel5_IRQHandler+0x10>)
 8006ec6:	f002 fef0 	bl	8009caa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8006eca:	bf00      	nop
 8006ecc:	bd80      	pop	{r7, pc}
 8006ece:	bf00      	nop
 8006ed0:	20002004 	.word	0x20002004

08006ed4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8006ed8:	4803      	ldr	r0, [pc, #12]	@ (8006ee8 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8006eda:	f004 ff29 	bl	800bd30 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8006ede:	4803      	ldr	r0, [pc, #12]	@ (8006eec <TIM1_UP_TIM16_IRQHandler+0x18>)
 8006ee0:	f004 ff26 	bl	800bd30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8006ee4:	bf00      	nop
 8006ee6:	bd80      	pop	{r7, pc}
 8006ee8:	20001878 	.word	0x20001878
 8006eec:	20001d40 	.word	0x20001d40

08006ef0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8006ef4:	4802      	ldr	r0, [pc, #8]	@ (8006f00 <TIM2_IRQHandler+0x10>)
 8006ef6:	f004 ff1b 	bl	800bd30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8006efa:	bf00      	nop
 8006efc:	bd80      	pop	{r7, pc}
 8006efe:	bf00      	nop
 8006f00:	20001944 	.word	0x20001944

08006f04 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8006f08:	4802      	ldr	r0, [pc, #8]	@ (8006f14 <TIM3_IRQHandler+0x10>)
 8006f0a:	f004 ff11 	bl	800bd30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8006f0e:	bf00      	nop
 8006f10:	bd80      	pop	{r7, pc}
 8006f12:	bf00      	nop
 8006f14:	20001a10 	.word	0x20001a10

08006f18 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8006f1c:	4802      	ldr	r0, [pc, #8]	@ (8006f28 <TIM4_IRQHandler+0x10>)
 8006f1e:	f004 ff07 	bl	800bd30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8006f22:	bf00      	nop
 8006f24:	bd80      	pop	{r7, pc}
 8006f26:	bf00      	nop
 8006f28:	20001adc 	.word	0x20001adc

08006f2c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8006f30:	4802      	ldr	r0, [pc, #8]	@ (8006f3c <USART2_IRQHandler+0x10>)
 8006f32:	f006 fc51 	bl	800d7d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8006f36:	bf00      	nop
 8006f38:	bd80      	pop	{r7, pc}
 8006f3a:	bf00      	nop
 8006f3c:	20001ed8 	.word	0x20001ed8

08006f40 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8006f44:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8006f48:	f003 f9b0 	bl	800a2ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8006f4c:	bf00      	nop
 8006f4e:	bd80      	pop	{r7, pc}

08006f50 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8006f54:	4802      	ldr	r0, [pc, #8]	@ (8006f60 <LPUART1_IRQHandler+0x10>)
 8006f56:	f006 fc3f 	bl	800d7d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8006f5a:	bf00      	nop
 8006f5c:	bd80      	pop	{r7, pc}
 8006f5e:	bf00      	nop
 8006f60:	20001e0c 	.word	0x20001e0c

08006f64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b086      	sub	sp, #24
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006f6c:	4a14      	ldr	r2, [pc, #80]	@ (8006fc0 <_sbrk+0x5c>)
 8006f6e:	4b15      	ldr	r3, [pc, #84]	@ (8006fc4 <_sbrk+0x60>)
 8006f70:	1ad3      	subs	r3, r2, r3
 8006f72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006f74:	697b      	ldr	r3, [r7, #20]
 8006f76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006f78:	4b13      	ldr	r3, [pc, #76]	@ (8006fc8 <_sbrk+0x64>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d102      	bne.n	8006f86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006f80:	4b11      	ldr	r3, [pc, #68]	@ (8006fc8 <_sbrk+0x64>)
 8006f82:	4a12      	ldr	r2, [pc, #72]	@ (8006fcc <_sbrk+0x68>)
 8006f84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006f86:	4b10      	ldr	r3, [pc, #64]	@ (8006fc8 <_sbrk+0x64>)
 8006f88:	681a      	ldr	r2, [r3, #0]
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	4413      	add	r3, r2
 8006f8e:	693a      	ldr	r2, [r7, #16]
 8006f90:	429a      	cmp	r2, r3
 8006f92:	d207      	bcs.n	8006fa4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006f94:	f008 fab2 	bl	800f4fc <__errno>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	220c      	movs	r2, #12
 8006f9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8006fa2:	e009      	b.n	8006fb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006fa4:	4b08      	ldr	r3, [pc, #32]	@ (8006fc8 <_sbrk+0x64>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006faa:	4b07      	ldr	r3, [pc, #28]	@ (8006fc8 <_sbrk+0x64>)
 8006fac:	681a      	ldr	r2, [r3, #0]
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	4413      	add	r3, r2
 8006fb2:	4a05      	ldr	r2, [pc, #20]	@ (8006fc8 <_sbrk+0x64>)
 8006fb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
}
 8006fb8:	4618      	mov	r0, r3
 8006fba:	3718      	adds	r7, #24
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bd80      	pop	{r7, pc}
 8006fc0:	20020000 	.word	0x20020000
 8006fc4:	00000400 	.word	0x00000400
 8006fc8:	20001874 	.word	0x20001874
 8006fcc:	20002270 	.word	0x20002270

08006fd0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8006fd4:	4b06      	ldr	r3, [pc, #24]	@ (8006ff0 <SystemInit+0x20>)
 8006fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fda:	4a05      	ldr	r2, [pc, #20]	@ (8006ff0 <SystemInit+0x20>)
 8006fdc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006fe0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006fe4:	bf00      	nop
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fec:	4770      	bx	lr
 8006fee:	bf00      	nop
 8006ff0:	e000ed00 	.word	0xe000ed00

08006ff4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b098      	sub	sp, #96	@ 0x60
 8006ff8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006ffa:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8006ffe:	2200      	movs	r2, #0
 8007000:	601a      	str	r2, [r3, #0]
 8007002:	605a      	str	r2, [r3, #4]
 8007004:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007006:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800700a:	2200      	movs	r2, #0
 800700c:	601a      	str	r2, [r3, #0]
 800700e:	605a      	str	r2, [r3, #4]
 8007010:	609a      	str	r2, [r3, #8]
 8007012:	60da      	str	r2, [r3, #12]
 8007014:	611a      	str	r2, [r3, #16]
 8007016:	615a      	str	r2, [r3, #20]
 8007018:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800701a:	1d3b      	adds	r3, r7, #4
 800701c:	2234      	movs	r2, #52	@ 0x34
 800701e:	2100      	movs	r1, #0
 8007020:	4618      	mov	r0, r3
 8007022:	f008 fa53 	bl	800f4cc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8007026:	4b3b      	ldr	r3, [pc, #236]	@ (8007114 <MX_TIM1_Init+0x120>)
 8007028:	4a3b      	ldr	r2, [pc, #236]	@ (8007118 <MX_TIM1_Init+0x124>)
 800702a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800702c:	4b39      	ldr	r3, [pc, #228]	@ (8007114 <MX_TIM1_Init+0x120>)
 800702e:	2200      	movs	r2, #0
 8007030:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007032:	4b38      	ldr	r3, [pc, #224]	@ (8007114 <MX_TIM1_Init+0x120>)
 8007034:	2200      	movs	r2, #0
 8007036:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8007038:	4b36      	ldr	r3, [pc, #216]	@ (8007114 <MX_TIM1_Init+0x120>)
 800703a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800703e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007040:	4b34      	ldr	r3, [pc, #208]	@ (8007114 <MX_TIM1_Init+0x120>)
 8007042:	2200      	movs	r2, #0
 8007044:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8007046:	4b33      	ldr	r3, [pc, #204]	@ (8007114 <MX_TIM1_Init+0x120>)
 8007048:	2200      	movs	r2, #0
 800704a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800704c:	4b31      	ldr	r3, [pc, #196]	@ (8007114 <MX_TIM1_Init+0x120>)
 800704e:	2200      	movs	r2, #0
 8007050:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8007052:	4830      	ldr	r0, [pc, #192]	@ (8007114 <MX_TIM1_Init+0x120>)
 8007054:	f004 fabe 	bl	800b5d4 <HAL_TIM_PWM_Init>
 8007058:	4603      	mov	r3, r0
 800705a:	2b00      	cmp	r3, #0
 800705c:	d001      	beq.n	8007062 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800705e:	f7ff f935 	bl	80062cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007062:	2300      	movs	r3, #0
 8007064:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8007066:	2300      	movs	r3, #0
 8007068:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800706a:	2300      	movs	r3, #0
 800706c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800706e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8007072:	4619      	mov	r1, r3
 8007074:	4827      	ldr	r0, [pc, #156]	@ (8007114 <MX_TIM1_Init+0x120>)
 8007076:	f006 f8cf 	bl	800d218 <HAL_TIMEx_MasterConfigSynchronization>
 800707a:	4603      	mov	r3, r0
 800707c:	2b00      	cmp	r3, #0
 800707e:	d001      	beq.n	8007084 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8007080:	f7ff f924 	bl	80062cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007084:	2360      	movs	r3, #96	@ 0x60
 8007086:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8007088:	2300      	movs	r3, #0
 800708a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800708c:	2300      	movs	r3, #0
 800708e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8007090:	2300      	movs	r3, #0
 8007092:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007094:	2300      	movs	r3, #0
 8007096:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8007098:	2300      	movs	r3, #0
 800709a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800709c:	2300      	movs	r3, #0
 800709e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80070a0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80070a4:	220c      	movs	r2, #12
 80070a6:	4619      	mov	r1, r3
 80070a8:	481a      	ldr	r0, [pc, #104]	@ (8007114 <MX_TIM1_Init+0x120>)
 80070aa:	f004 ffbb 	bl	800c024 <HAL_TIM_PWM_ConfigChannel>
 80070ae:	4603      	mov	r3, r0
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d001      	beq.n	80070b8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80070b4:	f7ff f90a 	bl	80062cc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80070b8:	2300      	movs	r3, #0
 80070ba:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80070bc:	2300      	movs	r3, #0
 80070be:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80070c0:	2300      	movs	r3, #0
 80070c2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80070c4:	2300      	movs	r3, #0
 80070c6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80070c8:	2300      	movs	r3, #0
 80070ca:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80070cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80070d0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80070d2:	2300      	movs	r3, #0
 80070d4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80070d6:	2300      	movs	r3, #0
 80070d8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80070da:	2300      	movs	r3, #0
 80070dc:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80070de:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80070e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80070e4:	2300      	movs	r3, #0
 80070e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80070e8:	2300      	movs	r3, #0
 80070ea:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80070ec:	2300      	movs	r3, #0
 80070ee:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80070f0:	1d3b      	adds	r3, r7, #4
 80070f2:	4619      	mov	r1, r3
 80070f4:	4807      	ldr	r0, [pc, #28]	@ (8007114 <MX_TIM1_Init+0x120>)
 80070f6:	f006 f925 	bl	800d344 <HAL_TIMEx_ConfigBreakDeadTime>
 80070fa:	4603      	mov	r3, r0
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d001      	beq.n	8007104 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8007100:	f7ff f8e4 	bl	80062cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8007104:	4803      	ldr	r0, [pc, #12]	@ (8007114 <MX_TIM1_Init+0x120>)
 8007106:	f000 fb77 	bl	80077f8 <HAL_TIM_MspPostInit>

}
 800710a:	bf00      	nop
 800710c:	3760      	adds	r7, #96	@ 0x60
 800710e:	46bd      	mov	sp, r7
 8007110:	bd80      	pop	{r7, pc}
 8007112:	bf00      	nop
 8007114:	20001878 	.word	0x20001878
 8007118:	40012c00 	.word	0x40012c00

0800711c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b088      	sub	sp, #32
 8007120:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007122:	f107 0310 	add.w	r3, r7, #16
 8007126:	2200      	movs	r2, #0
 8007128:	601a      	str	r2, [r3, #0]
 800712a:	605a      	str	r2, [r3, #4]
 800712c:	609a      	str	r2, [r3, #8]
 800712e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007130:	1d3b      	adds	r3, r7, #4
 8007132:	2200      	movs	r2, #0
 8007134:	601a      	str	r2, [r3, #0]
 8007136:	605a      	str	r2, [r3, #4]
 8007138:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800713a:	4b1e      	ldr	r3, [pc, #120]	@ (80071b4 <MX_TIM2_Init+0x98>)
 800713c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8007140:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 8007142:	4b1c      	ldr	r3, [pc, #112]	@ (80071b4 <MX_TIM2_Init+0x98>)
 8007144:	22a9      	movs	r2, #169	@ 0xa9
 8007146:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007148:	4b1a      	ldr	r3, [pc, #104]	@ (80071b4 <MX_TIM2_Init+0x98>)
 800714a:	2200      	movs	r2, #0
 800714c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 800714e:	4b19      	ldr	r3, [pc, #100]	@ (80071b4 <MX_TIM2_Init+0x98>)
 8007150:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8007154:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007156:	4b17      	ldr	r3, [pc, #92]	@ (80071b4 <MX_TIM2_Init+0x98>)
 8007158:	2200      	movs	r2, #0
 800715a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800715c:	4b15      	ldr	r3, [pc, #84]	@ (80071b4 <MX_TIM2_Init+0x98>)
 800715e:	2200      	movs	r2, #0
 8007160:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8007162:	4814      	ldr	r0, [pc, #80]	@ (80071b4 <MX_TIM2_Init+0x98>)
 8007164:	f004 f8ea 	bl	800b33c <HAL_TIM_Base_Init>
 8007168:	4603      	mov	r3, r0
 800716a:	2b00      	cmp	r3, #0
 800716c:	d001      	beq.n	8007172 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800716e:	f7ff f8ad 	bl	80062cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007172:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007176:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8007178:	f107 0310 	add.w	r3, r7, #16
 800717c:	4619      	mov	r1, r3
 800717e:	480d      	ldr	r0, [pc, #52]	@ (80071b4 <MX_TIM2_Init+0x98>)
 8007180:	f005 f864 	bl	800c24c <HAL_TIM_ConfigClockSource>
 8007184:	4603      	mov	r3, r0
 8007186:	2b00      	cmp	r3, #0
 8007188:	d001      	beq.n	800718e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800718a:	f7ff f89f 	bl	80062cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800718e:	2300      	movs	r3, #0
 8007190:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007192:	2300      	movs	r3, #0
 8007194:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8007196:	1d3b      	adds	r3, r7, #4
 8007198:	4619      	mov	r1, r3
 800719a:	4806      	ldr	r0, [pc, #24]	@ (80071b4 <MX_TIM2_Init+0x98>)
 800719c:	f006 f83c 	bl	800d218 <HAL_TIMEx_MasterConfigSynchronization>
 80071a0:	4603      	mov	r3, r0
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d001      	beq.n	80071aa <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80071a6:	f7ff f891 	bl	80062cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80071aa:	bf00      	nop
 80071ac:	3720      	adds	r7, #32
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bd80      	pop	{r7, pc}
 80071b2:	bf00      	nop
 80071b4:	20001944 	.word	0x20001944

080071b8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b08c      	sub	sp, #48	@ 0x30
 80071bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80071be:	f107 030c 	add.w	r3, r7, #12
 80071c2:	2224      	movs	r2, #36	@ 0x24
 80071c4:	2100      	movs	r1, #0
 80071c6:	4618      	mov	r0, r3
 80071c8:	f008 f980 	bl	800f4cc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80071cc:	463b      	mov	r3, r7
 80071ce:	2200      	movs	r2, #0
 80071d0:	601a      	str	r2, [r3, #0]
 80071d2:	605a      	str	r2, [r3, #4]
 80071d4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80071d6:	4b21      	ldr	r3, [pc, #132]	@ (800725c <MX_TIM3_Init+0xa4>)
 80071d8:	4a21      	ldr	r2, [pc, #132]	@ (8007260 <MX_TIM3_Init+0xa8>)
 80071da:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80071dc:	4b1f      	ldr	r3, [pc, #124]	@ (800725c <MX_TIM3_Init+0xa4>)
 80071de:	2200      	movs	r2, #0
 80071e0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80071e2:	4b1e      	ldr	r3, [pc, #120]	@ (800725c <MX_TIM3_Init+0xa4>)
 80071e4:	2200      	movs	r2, #0
 80071e6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80071e8:	4b1c      	ldr	r3, [pc, #112]	@ (800725c <MX_TIM3_Init+0xa4>)
 80071ea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80071ee:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80071f0:	4b1a      	ldr	r3, [pc, #104]	@ (800725c <MX_TIM3_Init+0xa4>)
 80071f2:	2200      	movs	r2, #0
 80071f4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80071f6:	4b19      	ldr	r3, [pc, #100]	@ (800725c <MX_TIM3_Init+0xa4>)
 80071f8:	2200      	movs	r2, #0
 80071fa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80071fc:	2303      	movs	r3, #3
 80071fe:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8007200:	2300      	movs	r3, #0
 8007202:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8007204:	2301      	movs	r3, #1
 8007206:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8007208:	2300      	movs	r3, #0
 800720a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800720c:	2300      	movs	r3, #0
 800720e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8007210:	2300      	movs	r3, #0
 8007212:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8007214:	2301      	movs	r3, #1
 8007216:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8007218:	2300      	movs	r3, #0
 800721a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800721c:	2300      	movs	r3, #0
 800721e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8007220:	f107 030c 	add.w	r3, r7, #12
 8007224:	4619      	mov	r1, r3
 8007226:	480d      	ldr	r0, [pc, #52]	@ (800725c <MX_TIM3_Init+0xa4>)
 8007228:	f004 fc40 	bl	800baac <HAL_TIM_Encoder_Init>
 800722c:	4603      	mov	r3, r0
 800722e:	2b00      	cmp	r3, #0
 8007230:	d001      	beq.n	8007236 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8007232:	f7ff f84b 	bl	80062cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007236:	2300      	movs	r3, #0
 8007238:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800723a:	2300      	movs	r3, #0
 800723c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800723e:	463b      	mov	r3, r7
 8007240:	4619      	mov	r1, r3
 8007242:	4806      	ldr	r0, [pc, #24]	@ (800725c <MX_TIM3_Init+0xa4>)
 8007244:	f005 ffe8 	bl	800d218 <HAL_TIMEx_MasterConfigSynchronization>
 8007248:	4603      	mov	r3, r0
 800724a:	2b00      	cmp	r3, #0
 800724c:	d001      	beq.n	8007252 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800724e:	f7ff f83d 	bl	80062cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8007252:	bf00      	nop
 8007254:	3730      	adds	r7, #48	@ 0x30
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}
 800725a:	bf00      	nop
 800725c:	20001a10 	.word	0x20001a10
 8007260:	40000400 	.word	0x40000400

08007264 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b08c      	sub	sp, #48	@ 0x30
 8007268:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800726a:	f107 030c 	add.w	r3, r7, #12
 800726e:	2224      	movs	r2, #36	@ 0x24
 8007270:	2100      	movs	r1, #0
 8007272:	4618      	mov	r0, r3
 8007274:	f008 f92a 	bl	800f4cc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007278:	463b      	mov	r3, r7
 800727a:	2200      	movs	r2, #0
 800727c:	601a      	str	r2, [r3, #0]
 800727e:	605a      	str	r2, [r3, #4]
 8007280:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8007282:	4b21      	ldr	r3, [pc, #132]	@ (8007308 <MX_TIM4_Init+0xa4>)
 8007284:	4a21      	ldr	r2, [pc, #132]	@ (800730c <MX_TIM4_Init+0xa8>)
 8007286:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8007288:	4b1f      	ldr	r3, [pc, #124]	@ (8007308 <MX_TIM4_Init+0xa4>)
 800728a:	2200      	movs	r2, #0
 800728c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800728e:	4b1e      	ldr	r3, [pc, #120]	@ (8007308 <MX_TIM4_Init+0xa4>)
 8007290:	2200      	movs	r2, #0
 8007292:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8007294:	4b1c      	ldr	r3, [pc, #112]	@ (8007308 <MX_TIM4_Init+0xa4>)
 8007296:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800729a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800729c:	4b1a      	ldr	r3, [pc, #104]	@ (8007308 <MX_TIM4_Init+0xa4>)
 800729e:	2200      	movs	r2, #0
 80072a0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80072a2:	4b19      	ldr	r3, [pc, #100]	@ (8007308 <MX_TIM4_Init+0xa4>)
 80072a4:	2200      	movs	r2, #0
 80072a6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80072a8:	2303      	movs	r3, #3
 80072aa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80072ac:	2300      	movs	r3, #0
 80072ae:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80072b0:	2301      	movs	r3, #1
 80072b2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80072b4:	2300      	movs	r3, #0
 80072b6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80072b8:	2300      	movs	r3, #0
 80072ba:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80072bc:	2300      	movs	r3, #0
 80072be:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80072c0:	2301      	movs	r3, #1
 80072c2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80072c4:	2300      	movs	r3, #0
 80072c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80072c8:	2300      	movs	r3, #0
 80072ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80072cc:	f107 030c 	add.w	r3, r7, #12
 80072d0:	4619      	mov	r1, r3
 80072d2:	480d      	ldr	r0, [pc, #52]	@ (8007308 <MX_TIM4_Init+0xa4>)
 80072d4:	f004 fbea 	bl	800baac <HAL_TIM_Encoder_Init>
 80072d8:	4603      	mov	r3, r0
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d001      	beq.n	80072e2 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80072de:	f7fe fff5 	bl	80062cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80072e2:	2300      	movs	r3, #0
 80072e4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80072e6:	2300      	movs	r3, #0
 80072e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80072ea:	463b      	mov	r3, r7
 80072ec:	4619      	mov	r1, r3
 80072ee:	4806      	ldr	r0, [pc, #24]	@ (8007308 <MX_TIM4_Init+0xa4>)
 80072f0:	f005 ff92 	bl	800d218 <HAL_TIMEx_MasterConfigSynchronization>
 80072f4:	4603      	mov	r3, r0
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d001      	beq.n	80072fe <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80072fa:	f7fe ffe7 	bl	80062cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80072fe:	bf00      	nop
 8007300:	3730      	adds	r7, #48	@ 0x30
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}
 8007306:	bf00      	nop
 8007308:	20001adc 	.word	0x20001adc
 800730c:	40000800 	.word	0x40000800

08007310 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b08c      	sub	sp, #48	@ 0x30
 8007314:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8007316:	f107 030c 	add.w	r3, r7, #12
 800731a:	2224      	movs	r2, #36	@ 0x24
 800731c:	2100      	movs	r1, #0
 800731e:	4618      	mov	r0, r3
 8007320:	f008 f8d4 	bl	800f4cc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007324:	463b      	mov	r3, r7
 8007326:	2200      	movs	r2, #0
 8007328:	601a      	str	r2, [r3, #0]
 800732a:	605a      	str	r2, [r3, #4]
 800732c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800732e:	4b21      	ldr	r3, [pc, #132]	@ (80073b4 <MX_TIM5_Init+0xa4>)
 8007330:	4a21      	ldr	r2, [pc, #132]	@ (80073b8 <MX_TIM5_Init+0xa8>)
 8007332:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8007334:	4b1f      	ldr	r3, [pc, #124]	@ (80073b4 <MX_TIM5_Init+0xa4>)
 8007336:	2200      	movs	r2, #0
 8007338:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800733a:	4b1e      	ldr	r3, [pc, #120]	@ (80073b4 <MX_TIM5_Init+0xa4>)
 800733c:	2200      	movs	r2, #0
 800733e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8007340:	4b1c      	ldr	r3, [pc, #112]	@ (80073b4 <MX_TIM5_Init+0xa4>)
 8007342:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007346:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007348:	4b1a      	ldr	r3, [pc, #104]	@ (80073b4 <MX_TIM5_Init+0xa4>)
 800734a:	2200      	movs	r2, #0
 800734c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800734e:	4b19      	ldr	r3, [pc, #100]	@ (80073b4 <MX_TIM5_Init+0xa4>)
 8007350:	2200      	movs	r2, #0
 8007352:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8007354:	2303      	movs	r3, #3
 8007356:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8007358:	2300      	movs	r3, #0
 800735a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800735c:	2301      	movs	r3, #1
 800735e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8007360:	2300      	movs	r3, #0
 8007362:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8007364:	2300      	movs	r3, #0
 8007366:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8007368:	2300      	movs	r3, #0
 800736a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800736c:	2301      	movs	r3, #1
 800736e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8007370:	2300      	movs	r3, #0
 8007372:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8007374:	2300      	movs	r3, #0
 8007376:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8007378:	f107 030c 	add.w	r3, r7, #12
 800737c:	4619      	mov	r1, r3
 800737e:	480d      	ldr	r0, [pc, #52]	@ (80073b4 <MX_TIM5_Init+0xa4>)
 8007380:	f004 fb94 	bl	800baac <HAL_TIM_Encoder_Init>
 8007384:	4603      	mov	r3, r0
 8007386:	2b00      	cmp	r3, #0
 8007388:	d001      	beq.n	800738e <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 800738a:	f7fe ff9f 	bl	80062cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800738e:	2300      	movs	r3, #0
 8007390:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007392:	2300      	movs	r3, #0
 8007394:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8007396:	463b      	mov	r3, r7
 8007398:	4619      	mov	r1, r3
 800739a:	4806      	ldr	r0, [pc, #24]	@ (80073b4 <MX_TIM5_Init+0xa4>)
 800739c:	f005 ff3c 	bl	800d218 <HAL_TIMEx_MasterConfigSynchronization>
 80073a0:	4603      	mov	r3, r0
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d001      	beq.n	80073aa <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 80073a6:	f7fe ff91 	bl	80062cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80073aa:	bf00      	nop
 80073ac:	3730      	adds	r7, #48	@ 0x30
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd80      	pop	{r7, pc}
 80073b2:	bf00      	nop
 80073b4:	20001ba8 	.word	0x20001ba8
 80073b8:	40000c00 	.word	0x40000c00

080073bc <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b09c      	sub	sp, #112	@ 0x70
 80073c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80073c2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80073c6:	2200      	movs	r2, #0
 80073c8:	601a      	str	r2, [r3, #0]
 80073ca:	605a      	str	r2, [r3, #4]
 80073cc:	609a      	str	r2, [r3, #8]
 80073ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80073d0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80073d4:	2200      	movs	r2, #0
 80073d6:	601a      	str	r2, [r3, #0]
 80073d8:	605a      	str	r2, [r3, #4]
 80073da:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80073dc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80073e0:	2200      	movs	r2, #0
 80073e2:	601a      	str	r2, [r3, #0]
 80073e4:	605a      	str	r2, [r3, #4]
 80073e6:	609a      	str	r2, [r3, #8]
 80073e8:	60da      	str	r2, [r3, #12]
 80073ea:	611a      	str	r2, [r3, #16]
 80073ec:	615a      	str	r2, [r3, #20]
 80073ee:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80073f0:	1d3b      	adds	r3, r7, #4
 80073f2:	2234      	movs	r2, #52	@ 0x34
 80073f4:	2100      	movs	r1, #0
 80073f6:	4618      	mov	r0, r3
 80073f8:	f008 f868 	bl	800f4cc <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80073fc:	4b4c      	ldr	r3, [pc, #304]	@ (8007530 <MX_TIM8_Init+0x174>)
 80073fe:	4a4d      	ldr	r2, [pc, #308]	@ (8007534 <MX_TIM8_Init+0x178>)
 8007400:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8007402:	4b4b      	ldr	r3, [pc, #300]	@ (8007530 <MX_TIM8_Init+0x174>)
 8007404:	2200      	movs	r2, #0
 8007406:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007408:	4b49      	ldr	r3, [pc, #292]	@ (8007530 <MX_TIM8_Init+0x174>)
 800740a:	2200      	movs	r2, #0
 800740c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800740e:	4b48      	ldr	r3, [pc, #288]	@ (8007530 <MX_TIM8_Init+0x174>)
 8007410:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007414:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8007416:	4b46      	ldr	r3, [pc, #280]	@ (8007530 <MX_TIM8_Init+0x174>)
 8007418:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800741c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800741e:	4b44      	ldr	r3, [pc, #272]	@ (8007530 <MX_TIM8_Init+0x174>)
 8007420:	2200      	movs	r2, #0
 8007422:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007424:	4b42      	ldr	r3, [pc, #264]	@ (8007530 <MX_TIM8_Init+0x174>)
 8007426:	2200      	movs	r2, #0
 8007428:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800742a:	4841      	ldr	r0, [pc, #260]	@ (8007530 <MX_TIM8_Init+0x174>)
 800742c:	f003 ff86 	bl	800b33c <HAL_TIM_Base_Init>
 8007430:	4603      	mov	r3, r0
 8007432:	2b00      	cmp	r3, #0
 8007434:	d001      	beq.n	800743a <MX_TIM8_Init+0x7e>
  {
    Error_Handler();
 8007436:	f7fe ff49 	bl	80062cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800743a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800743e:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8007440:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8007444:	4619      	mov	r1, r3
 8007446:	483a      	ldr	r0, [pc, #232]	@ (8007530 <MX_TIM8_Init+0x174>)
 8007448:	f004 ff00 	bl	800c24c <HAL_TIM_ConfigClockSource>
 800744c:	4603      	mov	r3, r0
 800744e:	2b00      	cmp	r3, #0
 8007450:	d001      	beq.n	8007456 <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 8007452:	f7fe ff3b 	bl	80062cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8007456:	4836      	ldr	r0, [pc, #216]	@ (8007530 <MX_TIM8_Init+0x174>)
 8007458:	f004 f8bc 	bl	800b5d4 <HAL_TIM_PWM_Init>
 800745c:	4603      	mov	r3, r0
 800745e:	2b00      	cmp	r3, #0
 8007460:	d001      	beq.n	8007466 <MX_TIM8_Init+0xaa>
  {
    Error_Handler();
 8007462:	f7fe ff33 	bl	80062cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007466:	2300      	movs	r3, #0
 8007468:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800746a:	2300      	movs	r3, #0
 800746c:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800746e:	2300      	movs	r3, #0
 8007470:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8007472:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8007476:	4619      	mov	r1, r3
 8007478:	482d      	ldr	r0, [pc, #180]	@ (8007530 <MX_TIM8_Init+0x174>)
 800747a:	f005 fecd 	bl	800d218 <HAL_TIMEx_MasterConfigSynchronization>
 800747e:	4603      	mov	r3, r0
 8007480:	2b00      	cmp	r3, #0
 8007482:	d001      	beq.n	8007488 <MX_TIM8_Init+0xcc>
  {
    Error_Handler();
 8007484:	f7fe ff22 	bl	80062cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007488:	2360      	movs	r3, #96	@ 0x60
 800748a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800748c:	2300      	movs	r3, #0
 800748e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007490:	2300      	movs	r3, #0
 8007492:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8007494:	2300      	movs	r3, #0
 8007496:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007498:	2300      	movs	r3, #0
 800749a:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800749c:	2300      	movs	r3, #0
 800749e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80074a0:	2300      	movs	r3, #0
 80074a2:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80074a4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80074a8:	2200      	movs	r2, #0
 80074aa:	4619      	mov	r1, r3
 80074ac:	4820      	ldr	r0, [pc, #128]	@ (8007530 <MX_TIM8_Init+0x174>)
 80074ae:	f004 fdb9 	bl	800c024 <HAL_TIM_PWM_ConfigChannel>
 80074b2:	4603      	mov	r3, r0
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d001      	beq.n	80074bc <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 80074b8:	f7fe ff08 	bl	80062cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80074bc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80074c0:	2204      	movs	r2, #4
 80074c2:	4619      	mov	r1, r3
 80074c4:	481a      	ldr	r0, [pc, #104]	@ (8007530 <MX_TIM8_Init+0x174>)
 80074c6:	f004 fdad 	bl	800c024 <HAL_TIM_PWM_ConfigChannel>
 80074ca:	4603      	mov	r3, r0
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d001      	beq.n	80074d4 <MX_TIM8_Init+0x118>
  {
    Error_Handler();
 80074d0:	f7fe fefc 	bl	80062cc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80074d4:	2300      	movs	r3, #0
 80074d6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80074d8:	2300      	movs	r3, #0
 80074da:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80074dc:	2300      	movs	r3, #0
 80074de:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80074e0:	2300      	movs	r3, #0
 80074e2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80074e4:	2300      	movs	r3, #0
 80074e6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80074e8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80074ec:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80074ee:	2300      	movs	r3, #0
 80074f0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80074f2:	2300      	movs	r3, #0
 80074f4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80074f6:	2300      	movs	r3, #0
 80074f8:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80074fa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80074fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8007500:	2300      	movs	r3, #0
 8007502:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8007504:	2300      	movs	r3, #0
 8007506:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8007508:	2300      	movs	r3, #0
 800750a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800750c:	1d3b      	adds	r3, r7, #4
 800750e:	4619      	mov	r1, r3
 8007510:	4807      	ldr	r0, [pc, #28]	@ (8007530 <MX_TIM8_Init+0x174>)
 8007512:	f005 ff17 	bl	800d344 <HAL_TIMEx_ConfigBreakDeadTime>
 8007516:	4603      	mov	r3, r0
 8007518:	2b00      	cmp	r3, #0
 800751a:	d001      	beq.n	8007520 <MX_TIM8_Init+0x164>
  {
    Error_Handler();
 800751c:	f7fe fed6 	bl	80062cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8007520:	4803      	ldr	r0, [pc, #12]	@ (8007530 <MX_TIM8_Init+0x174>)
 8007522:	f000 f969 	bl	80077f8 <HAL_TIM_MspPostInit>

}
 8007526:	bf00      	nop
 8007528:	3770      	adds	r7, #112	@ 0x70
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}
 800752e:	bf00      	nop
 8007530:	20001c74 	.word	0x20001c74
 8007534:	40013400 	.word	0x40013400

08007538 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800753c:	4b14      	ldr	r3, [pc, #80]	@ (8007590 <MX_TIM16_Init+0x58>)
 800753e:	4a15      	ldr	r2, [pc, #84]	@ (8007594 <MX_TIM16_Init+0x5c>)
 8007540:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 8007542:	4b13      	ldr	r3, [pc, #76]	@ (8007590 <MX_TIM16_Init+0x58>)
 8007544:	22a9      	movs	r2, #169	@ 0xa9
 8007546:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007548:	4b11      	ldr	r3, [pc, #68]	@ (8007590 <MX_TIM16_Init+0x58>)
 800754a:	2200      	movs	r2, #0
 800754c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1145;
 800754e:	4b10      	ldr	r3, [pc, #64]	@ (8007590 <MX_TIM16_Init+0x58>)
 8007550:	f240 4279 	movw	r2, #1145	@ 0x479
 8007554:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007556:	4b0e      	ldr	r3, [pc, #56]	@ (8007590 <MX_TIM16_Init+0x58>)
 8007558:	2200      	movs	r2, #0
 800755a:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800755c:	4b0c      	ldr	r3, [pc, #48]	@ (8007590 <MX_TIM16_Init+0x58>)
 800755e:	2200      	movs	r2, #0
 8007560:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007562:	4b0b      	ldr	r3, [pc, #44]	@ (8007590 <MX_TIM16_Init+0x58>)
 8007564:	2200      	movs	r2, #0
 8007566:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8007568:	4809      	ldr	r0, [pc, #36]	@ (8007590 <MX_TIM16_Init+0x58>)
 800756a:	f003 fee7 	bl	800b33c <HAL_TIM_Base_Init>
 800756e:	4603      	mov	r3, r0
 8007570:	2b00      	cmp	r3, #0
 8007572:	d001      	beq.n	8007578 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8007574:	f7fe feaa 	bl	80062cc <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8007578:	2108      	movs	r1, #8
 800757a:	4805      	ldr	r0, [pc, #20]	@ (8007590 <MX_TIM16_Init+0x58>)
 800757c:	f004 f9a0 	bl	800b8c0 <HAL_TIM_OnePulse_Init>
 8007580:	4603      	mov	r3, r0
 8007582:	2b00      	cmp	r3, #0
 8007584:	d001      	beq.n	800758a <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 8007586:	f7fe fea1 	bl	80062cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800758a:	bf00      	nop
 800758c:	bd80      	pop	{r7, pc}
 800758e:	bf00      	nop
 8007590:	20001d40 	.word	0x20001d40
 8007594:	40014400 	.word	0x40014400

08007598 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b084      	sub	sp, #16
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	4a0d      	ldr	r2, [pc, #52]	@ (80075dc <HAL_TIM_PWM_MspInit+0x44>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d113      	bne.n	80075d2 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80075aa:	4b0d      	ldr	r3, [pc, #52]	@ (80075e0 <HAL_TIM_PWM_MspInit+0x48>)
 80075ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80075ae:	4a0c      	ldr	r2, [pc, #48]	@ (80075e0 <HAL_TIM_PWM_MspInit+0x48>)
 80075b0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80075b4:	6613      	str	r3, [r2, #96]	@ 0x60
 80075b6:	4b0a      	ldr	r3, [pc, #40]	@ (80075e0 <HAL_TIM_PWM_MspInit+0x48>)
 80075b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80075ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80075be:	60fb      	str	r3, [r7, #12]
 80075c0:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80075c2:	2200      	movs	r2, #0
 80075c4:	2100      	movs	r1, #0
 80075c6:	2019      	movs	r0, #25
 80075c8:	f002 f957 	bl	800987a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80075cc:	2019      	movs	r0, #25
 80075ce:	f002 f96e 	bl	80098ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80075d2:	bf00      	nop
 80075d4:	3710      	adds	r7, #16
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}
 80075da:	bf00      	nop
 80075dc:	40012c00 	.word	0x40012c00
 80075e0:	40021000 	.word	0x40021000

080075e4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b086      	sub	sp, #24
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80075f4:	d114      	bne.n	8007620 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80075f6:	4b22      	ldr	r3, [pc, #136]	@ (8007680 <HAL_TIM_Base_MspInit+0x9c>)
 80075f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075fa:	4a21      	ldr	r2, [pc, #132]	@ (8007680 <HAL_TIM_Base_MspInit+0x9c>)
 80075fc:	f043 0301 	orr.w	r3, r3, #1
 8007600:	6593      	str	r3, [r2, #88]	@ 0x58
 8007602:	4b1f      	ldr	r3, [pc, #124]	@ (8007680 <HAL_TIM_Base_MspInit+0x9c>)
 8007604:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007606:	f003 0301 	and.w	r3, r3, #1
 800760a:	617b      	str	r3, [r7, #20]
 800760c:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800760e:	2200      	movs	r2, #0
 8007610:	2100      	movs	r1, #0
 8007612:	201c      	movs	r0, #28
 8007614:	f002 f931 	bl	800987a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8007618:	201c      	movs	r0, #28
 800761a:	f002 f948 	bl	80098ae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 800761e:	e02a      	b.n	8007676 <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM8)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4a17      	ldr	r2, [pc, #92]	@ (8007684 <HAL_TIM_Base_MspInit+0xa0>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d10c      	bne.n	8007644 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800762a:	4b15      	ldr	r3, [pc, #84]	@ (8007680 <HAL_TIM_Base_MspInit+0x9c>)
 800762c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800762e:	4a14      	ldr	r2, [pc, #80]	@ (8007680 <HAL_TIM_Base_MspInit+0x9c>)
 8007630:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8007634:	6613      	str	r3, [r2, #96]	@ 0x60
 8007636:	4b12      	ldr	r3, [pc, #72]	@ (8007680 <HAL_TIM_Base_MspInit+0x9c>)
 8007638:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800763a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800763e:	613b      	str	r3, [r7, #16]
 8007640:	693b      	ldr	r3, [r7, #16]
}
 8007642:	e018      	b.n	8007676 <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM16)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	4a0f      	ldr	r2, [pc, #60]	@ (8007688 <HAL_TIM_Base_MspInit+0xa4>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d113      	bne.n	8007676 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800764e:	4b0c      	ldr	r3, [pc, #48]	@ (8007680 <HAL_TIM_Base_MspInit+0x9c>)
 8007650:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007652:	4a0b      	ldr	r2, [pc, #44]	@ (8007680 <HAL_TIM_Base_MspInit+0x9c>)
 8007654:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007658:	6613      	str	r3, [r2, #96]	@ 0x60
 800765a:	4b09      	ldr	r3, [pc, #36]	@ (8007680 <HAL_TIM_Base_MspInit+0x9c>)
 800765c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800765e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007662:	60fb      	str	r3, [r7, #12]
 8007664:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8007666:	2200      	movs	r2, #0
 8007668:	2100      	movs	r1, #0
 800766a:	2019      	movs	r0, #25
 800766c:	f002 f905 	bl	800987a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8007670:	2019      	movs	r0, #25
 8007672:	f002 f91c 	bl	80098ae <HAL_NVIC_EnableIRQ>
}
 8007676:	bf00      	nop
 8007678:	3718      	adds	r7, #24
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}
 800767e:	bf00      	nop
 8007680:	40021000 	.word	0x40021000
 8007684:	40013400 	.word	0x40013400
 8007688:	40014400 	.word	0x40014400

0800768c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b08e      	sub	sp, #56	@ 0x38
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007694:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007698:	2200      	movs	r2, #0
 800769a:	601a      	str	r2, [r3, #0]
 800769c:	605a      	str	r2, [r3, #4]
 800769e:	609a      	str	r2, [r3, #8]
 80076a0:	60da      	str	r2, [r3, #12]
 80076a2:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4a4f      	ldr	r2, [pc, #316]	@ (80077e8 <HAL_TIM_Encoder_MspInit+0x15c>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d131      	bne.n	8007712 <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80076ae:	4b4f      	ldr	r3, [pc, #316]	@ (80077ec <HAL_TIM_Encoder_MspInit+0x160>)
 80076b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076b2:	4a4e      	ldr	r2, [pc, #312]	@ (80077ec <HAL_TIM_Encoder_MspInit+0x160>)
 80076b4:	f043 0302 	orr.w	r3, r3, #2
 80076b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80076ba:	4b4c      	ldr	r3, [pc, #304]	@ (80077ec <HAL_TIM_Encoder_MspInit+0x160>)
 80076bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076be:	f003 0302 	and.w	r3, r3, #2
 80076c2:	623b      	str	r3, [r7, #32]
 80076c4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80076c6:	4b49      	ldr	r3, [pc, #292]	@ (80077ec <HAL_TIM_Encoder_MspInit+0x160>)
 80076c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80076ca:	4a48      	ldr	r2, [pc, #288]	@ (80077ec <HAL_TIM_Encoder_MspInit+0x160>)
 80076cc:	f043 0301 	orr.w	r3, r3, #1
 80076d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80076d2:	4b46      	ldr	r3, [pc, #280]	@ (80077ec <HAL_TIM_Encoder_MspInit+0x160>)
 80076d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80076d6:	f003 0301 	and.w	r3, r3, #1
 80076da:	61fb      	str	r3, [r7, #28]
 80076dc:	69fb      	ldr	r3, [r7, #28]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80076de:	23c0      	movs	r3, #192	@ 0xc0
 80076e0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80076e2:	2302      	movs	r3, #2
 80076e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076e6:	2300      	movs	r3, #0
 80076e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80076ea:	2300      	movs	r3, #0
 80076ec:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80076ee:	2302      	movs	r3, #2
 80076f0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80076f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80076f6:	4619      	mov	r1, r3
 80076f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80076fc:	f002 fc24 	bl	8009f48 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8007700:	2200      	movs	r2, #0
 8007702:	2100      	movs	r1, #0
 8007704:	201d      	movs	r0, #29
 8007706:	f002 f8b8 	bl	800987a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800770a:	201d      	movs	r0, #29
 800770c:	f002 f8cf 	bl	80098ae <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8007710:	e065      	b.n	80077de <HAL_TIM_Encoder_MspInit+0x152>
  else if(tim_encoderHandle->Instance==TIM4)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	4a36      	ldr	r2, [pc, #216]	@ (80077f0 <HAL_TIM_Encoder_MspInit+0x164>)
 8007718:	4293      	cmp	r3, r2
 800771a:	d132      	bne.n	8007782 <HAL_TIM_Encoder_MspInit+0xf6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800771c:	4b33      	ldr	r3, [pc, #204]	@ (80077ec <HAL_TIM_Encoder_MspInit+0x160>)
 800771e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007720:	4a32      	ldr	r2, [pc, #200]	@ (80077ec <HAL_TIM_Encoder_MspInit+0x160>)
 8007722:	f043 0304 	orr.w	r3, r3, #4
 8007726:	6593      	str	r3, [r2, #88]	@ 0x58
 8007728:	4b30      	ldr	r3, [pc, #192]	@ (80077ec <HAL_TIM_Encoder_MspInit+0x160>)
 800772a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800772c:	f003 0304 	and.w	r3, r3, #4
 8007730:	61bb      	str	r3, [r7, #24]
 8007732:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007734:	4b2d      	ldr	r3, [pc, #180]	@ (80077ec <HAL_TIM_Encoder_MspInit+0x160>)
 8007736:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007738:	4a2c      	ldr	r2, [pc, #176]	@ (80077ec <HAL_TIM_Encoder_MspInit+0x160>)
 800773a:	f043 0301 	orr.w	r3, r3, #1
 800773e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007740:	4b2a      	ldr	r3, [pc, #168]	@ (80077ec <HAL_TIM_Encoder_MspInit+0x160>)
 8007742:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007744:	f003 0301 	and.w	r3, r3, #1
 8007748:	617b      	str	r3, [r7, #20]
 800774a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800774c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8007750:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007752:	2302      	movs	r3, #2
 8007754:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007756:	2300      	movs	r3, #0
 8007758:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800775a:	2300      	movs	r3, #0
 800775c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 800775e:	230a      	movs	r3, #10
 8007760:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007762:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007766:	4619      	mov	r1, r3
 8007768:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800776c:	f002 fbec 	bl	8009f48 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8007770:	2200      	movs	r2, #0
 8007772:	2100      	movs	r1, #0
 8007774:	201e      	movs	r0, #30
 8007776:	f002 f880 	bl	800987a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800777a:	201e      	movs	r0, #30
 800777c:	f002 f897 	bl	80098ae <HAL_NVIC_EnableIRQ>
}
 8007780:	e02d      	b.n	80077de <HAL_TIM_Encoder_MspInit+0x152>
  else if(tim_encoderHandle->Instance==TIM5)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4a1b      	ldr	r2, [pc, #108]	@ (80077f4 <HAL_TIM_Encoder_MspInit+0x168>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d128      	bne.n	80077de <HAL_TIM_Encoder_MspInit+0x152>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800778c:	4b17      	ldr	r3, [pc, #92]	@ (80077ec <HAL_TIM_Encoder_MspInit+0x160>)
 800778e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007790:	4a16      	ldr	r2, [pc, #88]	@ (80077ec <HAL_TIM_Encoder_MspInit+0x160>)
 8007792:	f043 0308 	orr.w	r3, r3, #8
 8007796:	6593      	str	r3, [r2, #88]	@ 0x58
 8007798:	4b14      	ldr	r3, [pc, #80]	@ (80077ec <HAL_TIM_Encoder_MspInit+0x160>)
 800779a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800779c:	f003 0308 	and.w	r3, r3, #8
 80077a0:	613b      	str	r3, [r7, #16]
 80077a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80077a4:	4b11      	ldr	r3, [pc, #68]	@ (80077ec <HAL_TIM_Encoder_MspInit+0x160>)
 80077a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80077a8:	4a10      	ldr	r2, [pc, #64]	@ (80077ec <HAL_TIM_Encoder_MspInit+0x160>)
 80077aa:	f043 0301 	orr.w	r3, r3, #1
 80077ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80077b0:	4b0e      	ldr	r3, [pc, #56]	@ (80077ec <HAL_TIM_Encoder_MspInit+0x160>)
 80077b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80077b4:	f003 0301 	and.w	r3, r3, #1
 80077b8:	60fb      	str	r3, [r7, #12]
 80077ba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80077bc:	2303      	movs	r3, #3
 80077be:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80077c0:	2302      	movs	r3, #2
 80077c2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077c4:	2300      	movs	r3, #0
 80077c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80077c8:	2300      	movs	r3, #0
 80077ca:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80077cc:	2302      	movs	r3, #2
 80077ce:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80077d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80077d4:	4619      	mov	r1, r3
 80077d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80077da:	f002 fbb5 	bl	8009f48 <HAL_GPIO_Init>
}
 80077de:	bf00      	nop
 80077e0:	3738      	adds	r7, #56	@ 0x38
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}
 80077e6:	bf00      	nop
 80077e8:	40000400 	.word	0x40000400
 80077ec:	40021000 	.word	0x40021000
 80077f0:	40000800 	.word	0x40000800
 80077f4:	40000c00 	.word	0x40000c00

080077f8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b08a      	sub	sp, #40	@ 0x28
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007800:	f107 0314 	add.w	r3, r7, #20
 8007804:	2200      	movs	r2, #0
 8007806:	601a      	str	r2, [r3, #0]
 8007808:	605a      	str	r2, [r3, #4]
 800780a:	609a      	str	r2, [r3, #8]
 800780c:	60da      	str	r2, [r3, #12]
 800780e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	4a22      	ldr	r2, [pc, #136]	@ (80078a0 <HAL_TIM_MspPostInit+0xa8>)
 8007816:	4293      	cmp	r3, r2
 8007818:	d11c      	bne.n	8007854 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800781a:	4b22      	ldr	r3, [pc, #136]	@ (80078a4 <HAL_TIM_MspPostInit+0xac>)
 800781c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800781e:	4a21      	ldr	r2, [pc, #132]	@ (80078a4 <HAL_TIM_MspPostInit+0xac>)
 8007820:	f043 0304 	orr.w	r3, r3, #4
 8007824:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007826:	4b1f      	ldr	r3, [pc, #124]	@ (80078a4 <HAL_TIM_MspPostInit+0xac>)
 8007828:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800782a:	f003 0304 	and.w	r3, r3, #4
 800782e:	613b      	str	r3, [r7, #16]
 8007830:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC3     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8007832:	2308      	movs	r3, #8
 8007834:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007836:	2302      	movs	r3, #2
 8007838:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800783a:	2300      	movs	r3, #0
 800783c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800783e:	2300      	movs	r3, #0
 8007840:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8007842:	2302      	movs	r3, #2
 8007844:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007846:	f107 0314 	add.w	r3, r7, #20
 800784a:	4619      	mov	r1, r3
 800784c:	4816      	ldr	r0, [pc, #88]	@ (80078a8 <HAL_TIM_MspPostInit+0xb0>)
 800784e:	f002 fb7b 	bl	8009f48 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8007852:	e020      	b.n	8007896 <HAL_TIM_MspPostInit+0x9e>
  else if(timHandle->Instance==TIM8)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	4a14      	ldr	r2, [pc, #80]	@ (80078ac <HAL_TIM_MspPostInit+0xb4>)
 800785a:	4293      	cmp	r3, r2
 800785c:	d11b      	bne.n	8007896 <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800785e:	4b11      	ldr	r3, [pc, #68]	@ (80078a4 <HAL_TIM_MspPostInit+0xac>)
 8007860:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007862:	4a10      	ldr	r2, [pc, #64]	@ (80078a4 <HAL_TIM_MspPostInit+0xac>)
 8007864:	f043 0304 	orr.w	r3, r3, #4
 8007868:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800786a:	4b0e      	ldr	r3, [pc, #56]	@ (80078a4 <HAL_TIM_MspPostInit+0xac>)
 800786c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800786e:	f003 0304 	and.w	r3, r3, #4
 8007872:	60fb      	str	r3, [r7, #12]
 8007874:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007876:	23c0      	movs	r3, #192	@ 0xc0
 8007878:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800787a:	2302      	movs	r3, #2
 800787c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800787e:	2300      	movs	r3, #0
 8007880:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007882:	2300      	movs	r3, #0
 8007884:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8007886:	2304      	movs	r3, #4
 8007888:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800788a:	f107 0314 	add.w	r3, r7, #20
 800788e:	4619      	mov	r1, r3
 8007890:	4805      	ldr	r0, [pc, #20]	@ (80078a8 <HAL_TIM_MspPostInit+0xb0>)
 8007892:	f002 fb59 	bl	8009f48 <HAL_GPIO_Init>
}
 8007896:	bf00      	nop
 8007898:	3728      	adds	r7, #40	@ 0x28
 800789a:	46bd      	mov	sp, r7
 800789c:	bd80      	pop	{r7, pc}
 800789e:	bf00      	nop
 80078a0:	40012c00 	.word	0x40012c00
 80078a4:	40021000 	.word	0x40021000
 80078a8:	48000800 	.word	0x48000800
 80078ac:	40013400 	.word	0x40013400

080078b0 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80078b4:	4b20      	ldr	r3, [pc, #128]	@ (8007938 <MX_LPUART1_UART_Init+0x88>)
 80078b6:	4a21      	ldr	r2, [pc, #132]	@ (800793c <MX_LPUART1_UART_Init+0x8c>)
 80078b8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 2000000;
 80078ba:	4b1f      	ldr	r3, [pc, #124]	@ (8007938 <MX_LPUART1_UART_Init+0x88>)
 80078bc:	4a20      	ldr	r2, [pc, #128]	@ (8007940 <MX_LPUART1_UART_Init+0x90>)
 80078be:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80078c0:	4b1d      	ldr	r3, [pc, #116]	@ (8007938 <MX_LPUART1_UART_Init+0x88>)
 80078c2:	2200      	movs	r2, #0
 80078c4:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80078c6:	4b1c      	ldr	r3, [pc, #112]	@ (8007938 <MX_LPUART1_UART_Init+0x88>)
 80078c8:	2200      	movs	r2, #0
 80078ca:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80078cc:	4b1a      	ldr	r3, [pc, #104]	@ (8007938 <MX_LPUART1_UART_Init+0x88>)
 80078ce:	2200      	movs	r2, #0
 80078d0:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80078d2:	4b19      	ldr	r3, [pc, #100]	@ (8007938 <MX_LPUART1_UART_Init+0x88>)
 80078d4:	220c      	movs	r2, #12
 80078d6:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80078d8:	4b17      	ldr	r3, [pc, #92]	@ (8007938 <MX_LPUART1_UART_Init+0x88>)
 80078da:	2200      	movs	r2, #0
 80078dc:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80078de:	4b16      	ldr	r3, [pc, #88]	@ (8007938 <MX_LPUART1_UART_Init+0x88>)
 80078e0:	2200      	movs	r2, #0
 80078e2:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80078e4:	4b14      	ldr	r3, [pc, #80]	@ (8007938 <MX_LPUART1_UART_Init+0x88>)
 80078e6:	2200      	movs	r2, #0
 80078e8:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80078ea:	4b13      	ldr	r3, [pc, #76]	@ (8007938 <MX_LPUART1_UART_Init+0x88>)
 80078ec:	2200      	movs	r2, #0
 80078ee:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80078f0:	4811      	ldr	r0, [pc, #68]	@ (8007938 <MX_LPUART1_UART_Init+0x88>)
 80078f2:	f005 fe0b 	bl	800d50c <HAL_UART_Init>
 80078f6:	4603      	mov	r3, r0
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d001      	beq.n	8007900 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 80078fc:	f7fe fce6 	bl	80062cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007900:	2100      	movs	r1, #0
 8007902:	480d      	ldr	r0, [pc, #52]	@ (8007938 <MX_LPUART1_UART_Init+0x88>)
 8007904:	f007 fb5e 	bl	800efc4 <HAL_UARTEx_SetTxFifoThreshold>
 8007908:	4603      	mov	r3, r0
 800790a:	2b00      	cmp	r3, #0
 800790c:	d001      	beq.n	8007912 <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 800790e:	f7fe fcdd 	bl	80062cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007912:	2100      	movs	r1, #0
 8007914:	4808      	ldr	r0, [pc, #32]	@ (8007938 <MX_LPUART1_UART_Init+0x88>)
 8007916:	f007 fb93 	bl	800f040 <HAL_UARTEx_SetRxFifoThreshold>
 800791a:	4603      	mov	r3, r0
 800791c:	2b00      	cmp	r3, #0
 800791e:	d001      	beq.n	8007924 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 8007920:	f7fe fcd4 	bl	80062cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8007924:	4804      	ldr	r0, [pc, #16]	@ (8007938 <MX_LPUART1_UART_Init+0x88>)
 8007926:	f007 fb14 	bl	800ef52 <HAL_UARTEx_DisableFifoMode>
 800792a:	4603      	mov	r3, r0
 800792c:	2b00      	cmp	r3, #0
 800792e:	d001      	beq.n	8007934 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 8007930:	f7fe fccc 	bl	80062cc <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8007934:	bf00      	nop
 8007936:	bd80      	pop	{r7, pc}
 8007938:	20001e0c 	.word	0x20001e0c
 800793c:	40008000 	.word	0x40008000
 8007940:	001e8480 	.word	0x001e8480

08007944 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8007948:	4b23      	ldr	r3, [pc, #140]	@ (80079d8 <MX_USART2_UART_Init+0x94>)
 800794a:	4a24      	ldr	r2, [pc, #144]	@ (80079dc <MX_USART2_UART_Init+0x98>)
 800794c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 800794e:	4b22      	ldr	r3, [pc, #136]	@ (80079d8 <MX_USART2_UART_Init+0x94>)
 8007950:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8007954:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8007956:	4b20      	ldr	r3, [pc, #128]	@ (80079d8 <MX_USART2_UART_Init+0x94>)
 8007958:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800795c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800795e:	4b1e      	ldr	r3, [pc, #120]	@ (80079d8 <MX_USART2_UART_Init+0x94>)
 8007960:	2200      	movs	r2, #0
 8007962:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8007964:	4b1c      	ldr	r3, [pc, #112]	@ (80079d8 <MX_USART2_UART_Init+0x94>)
 8007966:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800796a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800796c:	4b1a      	ldr	r3, [pc, #104]	@ (80079d8 <MX_USART2_UART_Init+0x94>)
 800796e:	220c      	movs	r2, #12
 8007970:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007972:	4b19      	ldr	r3, [pc, #100]	@ (80079d8 <MX_USART2_UART_Init+0x94>)
 8007974:	2200      	movs	r2, #0
 8007976:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8007978:	4b17      	ldr	r3, [pc, #92]	@ (80079d8 <MX_USART2_UART_Init+0x94>)
 800797a:	2200      	movs	r2, #0
 800797c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800797e:	4b16      	ldr	r3, [pc, #88]	@ (80079d8 <MX_USART2_UART_Init+0x94>)
 8007980:	2200      	movs	r2, #0
 8007982:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8007984:	4b14      	ldr	r3, [pc, #80]	@ (80079d8 <MX_USART2_UART_Init+0x94>)
 8007986:	2200      	movs	r2, #0
 8007988:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800798a:	4b13      	ldr	r3, [pc, #76]	@ (80079d8 <MX_USART2_UART_Init+0x94>)
 800798c:	2200      	movs	r2, #0
 800798e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8007990:	4811      	ldr	r0, [pc, #68]	@ (80079d8 <MX_USART2_UART_Init+0x94>)
 8007992:	f005 fdbb 	bl	800d50c <HAL_UART_Init>
 8007996:	4603      	mov	r3, r0
 8007998:	2b00      	cmp	r3, #0
 800799a:	d001      	beq.n	80079a0 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 800799c:	f7fe fc96 	bl	80062cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80079a0:	2100      	movs	r1, #0
 80079a2:	480d      	ldr	r0, [pc, #52]	@ (80079d8 <MX_USART2_UART_Init+0x94>)
 80079a4:	f007 fb0e 	bl	800efc4 <HAL_UARTEx_SetTxFifoThreshold>
 80079a8:	4603      	mov	r3, r0
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d001      	beq.n	80079b2 <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 80079ae:	f7fe fc8d 	bl	80062cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80079b2:	2100      	movs	r1, #0
 80079b4:	4808      	ldr	r0, [pc, #32]	@ (80079d8 <MX_USART2_UART_Init+0x94>)
 80079b6:	f007 fb43 	bl	800f040 <HAL_UARTEx_SetRxFifoThreshold>
 80079ba:	4603      	mov	r3, r0
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d001      	beq.n	80079c4 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 80079c0:	f7fe fc84 	bl	80062cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80079c4:	4804      	ldr	r0, [pc, #16]	@ (80079d8 <MX_USART2_UART_Init+0x94>)
 80079c6:	f007 fac4 	bl	800ef52 <HAL_UARTEx_DisableFifoMode>
 80079ca:	4603      	mov	r3, r0
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d001      	beq.n	80079d4 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 80079d0:	f7fe fc7c 	bl	80062cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80079d4:	bf00      	nop
 80079d6:	bd80      	pop	{r7, pc}
 80079d8:	20001ed8 	.word	0x20001ed8
 80079dc:	40004400 	.word	0x40004400

080079e0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b0a0      	sub	sp, #128	@ 0x80
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80079e8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80079ec:	2200      	movs	r2, #0
 80079ee:	601a      	str	r2, [r3, #0]
 80079f0:	605a      	str	r2, [r3, #4]
 80079f2:	609a      	str	r2, [r3, #8]
 80079f4:	60da      	str	r2, [r3, #12]
 80079f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80079f8:	f107 0318 	add.w	r3, r7, #24
 80079fc:	2254      	movs	r2, #84	@ 0x54
 80079fe:	2100      	movs	r1, #0
 8007a00:	4618      	mov	r0, r3
 8007a02:	f007 fd63 	bl	800f4cc <memset>
  if(uartHandle->Instance==LPUART1)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	4a99      	ldr	r2, [pc, #612]	@ (8007c70 <HAL_UART_MspInit+0x290>)
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	f040 8093 	bne.w	8007b38 <HAL_UART_MspInit+0x158>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8007a12:	2320      	movs	r3, #32
 8007a14:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8007a16:	2300      	movs	r3, #0
 8007a18:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007a1a:	f107 0318 	add.w	r3, r7, #24
 8007a1e:	4618      	mov	r0, r3
 8007a20:	f003 fa3e 	bl	800aea0 <HAL_RCCEx_PeriphCLKConfig>
 8007a24:	4603      	mov	r3, r0
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d001      	beq.n	8007a2e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8007a2a:	f7fe fc4f 	bl	80062cc <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8007a2e:	4b91      	ldr	r3, [pc, #580]	@ (8007c74 <HAL_UART_MspInit+0x294>)
 8007a30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007a32:	4a90      	ldr	r2, [pc, #576]	@ (8007c74 <HAL_UART_MspInit+0x294>)
 8007a34:	f043 0301 	orr.w	r3, r3, #1
 8007a38:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8007a3a:	4b8e      	ldr	r3, [pc, #568]	@ (8007c74 <HAL_UART_MspInit+0x294>)
 8007a3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007a3e:	f003 0301 	and.w	r3, r3, #1
 8007a42:	617b      	str	r3, [r7, #20]
 8007a44:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007a46:	4b8b      	ldr	r3, [pc, #556]	@ (8007c74 <HAL_UART_MspInit+0x294>)
 8007a48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a4a:	4a8a      	ldr	r2, [pc, #552]	@ (8007c74 <HAL_UART_MspInit+0x294>)
 8007a4c:	f043 0302 	orr.w	r3, r3, #2
 8007a50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007a52:	4b88      	ldr	r3, [pc, #544]	@ (8007c74 <HAL_UART_MspInit+0x294>)
 8007a54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a56:	f003 0302 	and.w	r3, r3, #2
 8007a5a:	613b      	str	r3, [r7, #16]
 8007a5c:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8007a5e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8007a62:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a64:	2302      	movs	r3, #2
 8007a66:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a68:	2300      	movs	r3, #0
 8007a6a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8007a70:	2308      	movs	r3, #8
 8007a72:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007a74:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8007a78:	4619      	mov	r1, r3
 8007a7a:	487f      	ldr	r0, [pc, #508]	@ (8007c78 <HAL_UART_MspInit+0x298>)
 8007a7c:	f002 fa64 	bl	8009f48 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel4;
 8007a80:	4b7e      	ldr	r3, [pc, #504]	@ (8007c7c <HAL_UART_MspInit+0x29c>)
 8007a82:	4a7f      	ldr	r2, [pc, #508]	@ (8007c80 <HAL_UART_MspInit+0x2a0>)
 8007a84:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8007a86:	4b7d      	ldr	r3, [pc, #500]	@ (8007c7c <HAL_UART_MspInit+0x29c>)
 8007a88:	2222      	movs	r2, #34	@ 0x22
 8007a8a:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007a8c:	4b7b      	ldr	r3, [pc, #492]	@ (8007c7c <HAL_UART_MspInit+0x29c>)
 8007a8e:	2200      	movs	r2, #0
 8007a90:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007a92:	4b7a      	ldr	r3, [pc, #488]	@ (8007c7c <HAL_UART_MspInit+0x29c>)
 8007a94:	2200      	movs	r2, #0
 8007a96:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007a98:	4b78      	ldr	r3, [pc, #480]	@ (8007c7c <HAL_UART_MspInit+0x29c>)
 8007a9a:	2280      	movs	r2, #128	@ 0x80
 8007a9c:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007a9e:	4b77      	ldr	r3, [pc, #476]	@ (8007c7c <HAL_UART_MspInit+0x29c>)
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007aa4:	4b75      	ldr	r3, [pc, #468]	@ (8007c7c <HAL_UART_MspInit+0x29c>)
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 8007aaa:	4b74      	ldr	r3, [pc, #464]	@ (8007c7c <HAL_UART_MspInit+0x29c>)
 8007aac:	2200      	movs	r2, #0
 8007aae:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007ab0:	4b72      	ldr	r3, [pc, #456]	@ (8007c7c <HAL_UART_MspInit+0x29c>)
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8007ab6:	4871      	ldr	r0, [pc, #452]	@ (8007c7c <HAL_UART_MspInit+0x29c>)
 8007ab8:	f001 ff14 	bl	80098e4 <HAL_DMA_Init>
 8007abc:	4603      	mov	r3, r0
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d001      	beq.n	8007ac6 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8007ac2:	f7fe fc03 	bl	80062cc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	4a6c      	ldr	r2, [pc, #432]	@ (8007c7c <HAL_UART_MspInit+0x29c>)
 8007aca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8007ace:	4a6b      	ldr	r2, [pc, #428]	@ (8007c7c <HAL_UART_MspInit+0x29c>)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel5;
 8007ad4:	4b6b      	ldr	r3, [pc, #428]	@ (8007c84 <HAL_UART_MspInit+0x2a4>)
 8007ad6:	4a6c      	ldr	r2, [pc, #432]	@ (8007c88 <HAL_UART_MspInit+0x2a8>)
 8007ad8:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8007ada:	4b6a      	ldr	r3, [pc, #424]	@ (8007c84 <HAL_UART_MspInit+0x2a4>)
 8007adc:	2223      	movs	r2, #35	@ 0x23
 8007ade:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007ae0:	4b68      	ldr	r3, [pc, #416]	@ (8007c84 <HAL_UART_MspInit+0x2a4>)
 8007ae2:	2210      	movs	r2, #16
 8007ae4:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007ae6:	4b67      	ldr	r3, [pc, #412]	@ (8007c84 <HAL_UART_MspInit+0x2a4>)
 8007ae8:	2200      	movs	r2, #0
 8007aea:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007aec:	4b65      	ldr	r3, [pc, #404]	@ (8007c84 <HAL_UART_MspInit+0x2a4>)
 8007aee:	2280      	movs	r2, #128	@ 0x80
 8007af0:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007af2:	4b64      	ldr	r3, [pc, #400]	@ (8007c84 <HAL_UART_MspInit+0x2a4>)
 8007af4:	2200      	movs	r2, #0
 8007af6:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007af8:	4b62      	ldr	r3, [pc, #392]	@ (8007c84 <HAL_UART_MspInit+0x2a4>)
 8007afa:	2200      	movs	r2, #0
 8007afc:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8007afe:	4b61      	ldr	r3, [pc, #388]	@ (8007c84 <HAL_UART_MspInit+0x2a4>)
 8007b00:	2200      	movs	r2, #0
 8007b02:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8007b04:	4b5f      	ldr	r3, [pc, #380]	@ (8007c84 <HAL_UART_MspInit+0x2a4>)
 8007b06:	2200      	movs	r2, #0
 8007b08:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8007b0a:	485e      	ldr	r0, [pc, #376]	@ (8007c84 <HAL_UART_MspInit+0x2a4>)
 8007b0c:	f001 feea 	bl	80098e4 <HAL_DMA_Init>
 8007b10:	4603      	mov	r3, r0
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d001      	beq.n	8007b1a <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 8007b16:	f7fe fbd9 	bl	80062cc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	4a59      	ldr	r2, [pc, #356]	@ (8007c84 <HAL_UART_MspInit+0x2a4>)
 8007b1e:	67da      	str	r2, [r3, #124]	@ 0x7c
 8007b20:	4a58      	ldr	r2, [pc, #352]	@ (8007c84 <HAL_UART_MspInit+0x2a4>)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8007b26:	2200      	movs	r2, #0
 8007b28:	2100      	movs	r1, #0
 8007b2a:	205b      	movs	r0, #91	@ 0x5b
 8007b2c:	f001 fea5 	bl	800987a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8007b30:	205b      	movs	r0, #91	@ 0x5b
 8007b32:	f001 febc 	bl	80098ae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8007b36:	e097      	b.n	8007c68 <HAL_UART_MspInit+0x288>
  else if(uartHandle->Instance==USART2)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	4a53      	ldr	r2, [pc, #332]	@ (8007c8c <HAL_UART_MspInit+0x2ac>)
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	f040 8092 	bne.w	8007c68 <HAL_UART_MspInit+0x288>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8007b44:	2302      	movs	r3, #2
 8007b46:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8007b48:	2300      	movs	r3, #0
 8007b4a:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007b4c:	f107 0318 	add.w	r3, r7, #24
 8007b50:	4618      	mov	r0, r3
 8007b52:	f003 f9a5 	bl	800aea0 <HAL_RCCEx_PeriphCLKConfig>
 8007b56:	4603      	mov	r3, r0
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d001      	beq.n	8007b60 <HAL_UART_MspInit+0x180>
      Error_Handler();
 8007b5c:	f7fe fbb6 	bl	80062cc <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8007b60:	4b44      	ldr	r3, [pc, #272]	@ (8007c74 <HAL_UART_MspInit+0x294>)
 8007b62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b64:	4a43      	ldr	r2, [pc, #268]	@ (8007c74 <HAL_UART_MspInit+0x294>)
 8007b66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007b6a:	6593      	str	r3, [r2, #88]	@ 0x58
 8007b6c:	4b41      	ldr	r3, [pc, #260]	@ (8007c74 <HAL_UART_MspInit+0x294>)
 8007b6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b74:	60fb      	str	r3, [r7, #12]
 8007b76:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007b78:	4b3e      	ldr	r3, [pc, #248]	@ (8007c74 <HAL_UART_MspInit+0x294>)
 8007b7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b7c:	4a3d      	ldr	r2, [pc, #244]	@ (8007c74 <HAL_UART_MspInit+0x294>)
 8007b7e:	f043 0301 	orr.w	r3, r3, #1
 8007b82:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007b84:	4b3b      	ldr	r3, [pc, #236]	@ (8007c74 <HAL_UART_MspInit+0x294>)
 8007b86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b88:	f003 0301 	and.w	r3, r3, #1
 8007b8c:	60bb      	str	r3, [r7, #8]
 8007b8e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8007b90:	230c      	movs	r3, #12
 8007b92:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b94:	2302      	movs	r3, #2
 8007b96:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b98:	2300      	movs	r3, #0
 8007b9a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8007ba0:	2307      	movs	r3, #7
 8007ba2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007ba4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8007ba8:	4619      	mov	r1, r3
 8007baa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007bae:	f002 f9cb 	bl	8009f48 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel2;
 8007bb2:	4b37      	ldr	r3, [pc, #220]	@ (8007c90 <HAL_UART_MspInit+0x2b0>)
 8007bb4:	4a37      	ldr	r2, [pc, #220]	@ (8007c94 <HAL_UART_MspInit+0x2b4>)
 8007bb6:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8007bb8:	4b35      	ldr	r3, [pc, #212]	@ (8007c90 <HAL_UART_MspInit+0x2b0>)
 8007bba:	221a      	movs	r2, #26
 8007bbc:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007bbe:	4b34      	ldr	r3, [pc, #208]	@ (8007c90 <HAL_UART_MspInit+0x2b0>)
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007bc4:	4b32      	ldr	r3, [pc, #200]	@ (8007c90 <HAL_UART_MspInit+0x2b0>)
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007bca:	4b31      	ldr	r3, [pc, #196]	@ (8007c90 <HAL_UART_MspInit+0x2b0>)
 8007bcc:	2280      	movs	r2, #128	@ 0x80
 8007bce:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007bd0:	4b2f      	ldr	r3, [pc, #188]	@ (8007c90 <HAL_UART_MspInit+0x2b0>)
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007bd6:	4b2e      	ldr	r3, [pc, #184]	@ (8007c90 <HAL_UART_MspInit+0x2b0>)
 8007bd8:	2200      	movs	r2, #0
 8007bda:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8007bdc:	4b2c      	ldr	r3, [pc, #176]	@ (8007c90 <HAL_UART_MspInit+0x2b0>)
 8007bde:	2200      	movs	r2, #0
 8007be0:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007be2:	4b2b      	ldr	r3, [pc, #172]	@ (8007c90 <HAL_UART_MspInit+0x2b0>)
 8007be4:	2200      	movs	r2, #0
 8007be6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8007be8:	4829      	ldr	r0, [pc, #164]	@ (8007c90 <HAL_UART_MspInit+0x2b0>)
 8007bea:	f001 fe7b 	bl	80098e4 <HAL_DMA_Init>
 8007bee:	4603      	mov	r3, r0
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d001      	beq.n	8007bf8 <HAL_UART_MspInit+0x218>
      Error_Handler();
 8007bf4:	f7fe fb6a 	bl	80062cc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	4a25      	ldr	r2, [pc, #148]	@ (8007c90 <HAL_UART_MspInit+0x2b0>)
 8007bfc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8007c00:	4a23      	ldr	r2, [pc, #140]	@ (8007c90 <HAL_UART_MspInit+0x2b0>)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart2_tx.Instance = DMA1_Channel3;
 8007c06:	4b24      	ldr	r3, [pc, #144]	@ (8007c98 <HAL_UART_MspInit+0x2b8>)
 8007c08:	4a24      	ldr	r2, [pc, #144]	@ (8007c9c <HAL_UART_MspInit+0x2bc>)
 8007c0a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8007c0c:	4b22      	ldr	r3, [pc, #136]	@ (8007c98 <HAL_UART_MspInit+0x2b8>)
 8007c0e:	221b      	movs	r2, #27
 8007c10:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007c12:	4b21      	ldr	r3, [pc, #132]	@ (8007c98 <HAL_UART_MspInit+0x2b8>)
 8007c14:	2210      	movs	r2, #16
 8007c16:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007c18:	4b1f      	ldr	r3, [pc, #124]	@ (8007c98 <HAL_UART_MspInit+0x2b8>)
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007c1e:	4b1e      	ldr	r3, [pc, #120]	@ (8007c98 <HAL_UART_MspInit+0x2b8>)
 8007c20:	2280      	movs	r2, #128	@ 0x80
 8007c22:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007c24:	4b1c      	ldr	r3, [pc, #112]	@ (8007c98 <HAL_UART_MspInit+0x2b8>)
 8007c26:	2200      	movs	r2, #0
 8007c28:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007c2a:	4b1b      	ldr	r3, [pc, #108]	@ (8007c98 <HAL_UART_MspInit+0x2b8>)
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8007c30:	4b19      	ldr	r3, [pc, #100]	@ (8007c98 <HAL_UART_MspInit+0x2b8>)
 8007c32:	2200      	movs	r2, #0
 8007c34:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8007c36:	4b18      	ldr	r3, [pc, #96]	@ (8007c98 <HAL_UART_MspInit+0x2b8>)
 8007c38:	2200      	movs	r2, #0
 8007c3a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8007c3c:	4816      	ldr	r0, [pc, #88]	@ (8007c98 <HAL_UART_MspInit+0x2b8>)
 8007c3e:	f001 fe51 	bl	80098e4 <HAL_DMA_Init>
 8007c42:	4603      	mov	r3, r0
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d001      	beq.n	8007c4c <HAL_UART_MspInit+0x26c>
      Error_Handler();
 8007c48:	f7fe fb40 	bl	80062cc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	4a12      	ldr	r2, [pc, #72]	@ (8007c98 <HAL_UART_MspInit+0x2b8>)
 8007c50:	67da      	str	r2, [r3, #124]	@ 0x7c
 8007c52:	4a11      	ldr	r2, [pc, #68]	@ (8007c98 <HAL_UART_MspInit+0x2b8>)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8007c58:	2200      	movs	r2, #0
 8007c5a:	2100      	movs	r1, #0
 8007c5c:	2026      	movs	r0, #38	@ 0x26
 8007c5e:	f001 fe0c 	bl	800987a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8007c62:	2026      	movs	r0, #38	@ 0x26
 8007c64:	f001 fe23 	bl	80098ae <HAL_NVIC_EnableIRQ>
}
 8007c68:	bf00      	nop
 8007c6a:	3780      	adds	r7, #128	@ 0x80
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	bd80      	pop	{r7, pc}
 8007c70:	40008000 	.word	0x40008000
 8007c74:	40021000 	.word	0x40021000
 8007c78:	48000400 	.word	0x48000400
 8007c7c:	20001fa4 	.word	0x20001fa4
 8007c80:	40020044 	.word	0x40020044
 8007c84:	20002004 	.word	0x20002004
 8007c88:	40020058 	.word	0x40020058
 8007c8c:	40004400 	.word	0x40004400
 8007c90:	20002064 	.word	0x20002064
 8007c94:	4002001c 	.word	0x4002001c
 8007c98:	200020c4 	.word	0x200020c4
 8007c9c:	40020030 	.word	0x40020030

08007ca0 <Reset_Handler>:
*/

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:  ldr   r0, =_estack
 8007ca0:	480d      	ldr	r0, [pc, #52]	@ (8007cd8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8007ca2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8007ca4:	f7ff f994 	bl	8006fd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007ca8:	480c      	ldr	r0, [pc, #48]	@ (8007cdc <LoopForever+0x6>)
  ldr r1, =_edata
 8007caa:	490d      	ldr	r1, [pc, #52]	@ (8007ce0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8007cac:	4a0d      	ldr	r2, [pc, #52]	@ (8007ce4 <LoopForever+0xe>)
  movs r3, #0
 8007cae:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8007cb0:	e002      	b.n	8007cb8 <LoopCopyDataInit>

08007cb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007cb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007cb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007cb6:	3304      	adds	r3, #4

08007cb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007cb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007cba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007cbc:	d3f9      	bcc.n	8007cb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007cbe:	4a0a      	ldr	r2, [pc, #40]	@ (8007ce8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8007cc0:	4c0a      	ldr	r4, [pc, #40]	@ (8007cec <LoopForever+0x16>)
  movs r3, #0
 8007cc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007cc4:	e001      	b.n	8007cca <LoopFillZerobss>

08007cc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007cc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007cc8:	3204      	adds	r2, #4

08007cca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007cca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007ccc:	d3fb      	bcc.n	8007cc6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8007cce:	f007 fc1b 	bl	800f508 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8007cd2:	f7fc fe51 	bl	8004978 <main>

08007cd6 <LoopForever>:

LoopForever:
    b LoopForever
 8007cd6:	e7fe      	b.n	8007cd6 <LoopForever>
Reset_Handler:  ldr   r0, =_estack
 8007cd8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8007cdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007ce0:	20000158 	.word	0x20000158
  ldr r2, =_sidata
 8007ce4:	080119b8 	.word	0x080119b8
  ldr r2, =_sbss
 8007ce8:	20000158 	.word	0x20000158
  ldr r4, =_ebss
 8007cec:	20002270 	.word	0x20002270

08007cf0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8007cf0:	e7fe      	b.n	8007cf0 <ADC1_2_IRQHandler>

08007cf2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007cf2:	b580      	push	{r7, lr}
 8007cf4:	b082      	sub	sp, #8
 8007cf6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007cfc:	2003      	movs	r0, #3
 8007cfe:	f001 fdb1 	bl	8009864 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007d02:	2000      	movs	r0, #0
 8007d04:	f000 f80e 	bl	8007d24 <HAL_InitTick>
 8007d08:	4603      	mov	r3, r0
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d002      	beq.n	8007d14 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8007d0e:	2301      	movs	r3, #1
 8007d10:	71fb      	strb	r3, [r7, #7]
 8007d12:	e001      	b.n	8007d18 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8007d14:	f7ff f858 	bl	8006dc8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8007d18:	79fb      	ldrb	r3, [r7, #7]

}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	3708      	adds	r7, #8
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}
	...

08007d24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b084      	sub	sp, #16
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8007d30:	4b16      	ldr	r3, [pc, #88]	@ (8007d8c <HAL_InitTick+0x68>)
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d022      	beq.n	8007d7e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8007d38:	4b15      	ldr	r3, [pc, #84]	@ (8007d90 <HAL_InitTick+0x6c>)
 8007d3a:	681a      	ldr	r2, [r3, #0]
 8007d3c:	4b13      	ldr	r3, [pc, #76]	@ (8007d8c <HAL_InitTick+0x68>)
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8007d44:	fbb1 f3f3 	udiv	r3, r1, r3
 8007d48:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	f001 fdbc 	bl	80098ca <HAL_SYSTICK_Config>
 8007d52:	4603      	mov	r3, r0
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d10f      	bne.n	8007d78 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2b0f      	cmp	r3, #15
 8007d5c:	d809      	bhi.n	8007d72 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007d5e:	2200      	movs	r2, #0
 8007d60:	6879      	ldr	r1, [r7, #4]
 8007d62:	f04f 30ff 	mov.w	r0, #4294967295
 8007d66:	f001 fd88 	bl	800987a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8007d6a:	4a0a      	ldr	r2, [pc, #40]	@ (8007d94 <HAL_InitTick+0x70>)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6013      	str	r3, [r2, #0]
 8007d70:	e007      	b.n	8007d82 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8007d72:	2301      	movs	r3, #1
 8007d74:	73fb      	strb	r3, [r7, #15]
 8007d76:	e004      	b.n	8007d82 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8007d78:	2301      	movs	r3, #1
 8007d7a:	73fb      	strb	r3, [r7, #15]
 8007d7c:	e001      	b.n	8007d82 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8007d7e:	2301      	movs	r3, #1
 8007d80:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8007d82:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d84:	4618      	mov	r0, r3
 8007d86:	3710      	adds	r7, #16
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	bd80      	pop	{r7, pc}
 8007d8c:	20000104 	.word	0x20000104
 8007d90:	200000fc 	.word	0x200000fc
 8007d94:	20000100 	.word	0x20000100

08007d98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007d98:	b480      	push	{r7}
 8007d9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007d9c:	4b05      	ldr	r3, [pc, #20]	@ (8007db4 <HAL_IncTick+0x1c>)
 8007d9e:	681a      	ldr	r2, [r3, #0]
 8007da0:	4b05      	ldr	r3, [pc, #20]	@ (8007db8 <HAL_IncTick+0x20>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	4413      	add	r3, r2
 8007da6:	4a03      	ldr	r2, [pc, #12]	@ (8007db4 <HAL_IncTick+0x1c>)
 8007da8:	6013      	str	r3, [r2, #0]
}
 8007daa:	bf00      	nop
 8007dac:	46bd      	mov	sp, r7
 8007dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db2:	4770      	bx	lr
 8007db4:	20002124 	.word	0x20002124
 8007db8:	20000104 	.word	0x20000104

08007dbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	af00      	add	r7, sp, #0
  return uwTick;
 8007dc0:	4b03      	ldr	r3, [pc, #12]	@ (8007dd0 <HAL_GetTick+0x14>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
}
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dcc:	4770      	bx	lr
 8007dce:	bf00      	nop
 8007dd0:	20002124 	.word	0x20002124

08007dd4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	b083      	sub	sp, #12
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
 8007ddc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	689b      	ldr	r3, [r3, #8]
 8007de2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	431a      	orrs	r2, r3
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	609a      	str	r2, [r3, #8]
}
 8007dee:	bf00      	nop
 8007df0:	370c      	adds	r7, #12
 8007df2:	46bd      	mov	sp, r7
 8007df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df8:	4770      	bx	lr

08007dfa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8007dfa:	b480      	push	{r7}
 8007dfc:	b083      	sub	sp, #12
 8007dfe:	af00      	add	r7, sp, #0
 8007e00:	6078      	str	r0, [r7, #4]
 8007e02:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	689b      	ldr	r3, [r3, #8]
 8007e08:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	431a      	orrs	r2, r3
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	609a      	str	r2, [r3, #8]
}
 8007e14:	bf00      	nop
 8007e16:	370c      	adds	r7, #12
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1e:	4770      	bx	lr

08007e20 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8007e20:	b480      	push	{r7}
 8007e22:	b083      	sub	sp, #12
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	689b      	ldr	r3, [r3, #8]
 8007e2c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8007e30:	4618      	mov	r0, r3
 8007e32:	370c      	adds	r7, #12
 8007e34:	46bd      	mov	sp, r7
 8007e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3a:	4770      	bx	lr

08007e3c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b087      	sub	sp, #28
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	60f8      	str	r0, [r7, #12]
 8007e44:	60b9      	str	r1, [r7, #8]
 8007e46:	607a      	str	r2, [r7, #4]
 8007e48:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	3360      	adds	r3, #96	@ 0x60
 8007e4e:	461a      	mov	r2, r3
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	009b      	lsls	r3, r3, #2
 8007e54:	4413      	add	r3, r2
 8007e56:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8007e58:	697b      	ldr	r3, [r7, #20]
 8007e5a:	681a      	ldr	r2, [r3, #0]
 8007e5c:	4b08      	ldr	r3, [pc, #32]	@ (8007e80 <LL_ADC_SetOffset+0x44>)
 8007e5e:	4013      	ands	r3, r2
 8007e60:	687a      	ldr	r2, [r7, #4]
 8007e62:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8007e66:	683a      	ldr	r2, [r7, #0]
 8007e68:	430a      	orrs	r2, r1
 8007e6a:	4313      	orrs	r3, r2
 8007e6c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8007e70:	697b      	ldr	r3, [r7, #20]
 8007e72:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8007e74:	bf00      	nop
 8007e76:	371c      	adds	r7, #28
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7e:	4770      	bx	lr
 8007e80:	03fff000 	.word	0x03fff000

08007e84 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8007e84:	b480      	push	{r7}
 8007e86:	b085      	sub	sp, #20
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
 8007e8c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	3360      	adds	r3, #96	@ 0x60
 8007e92:	461a      	mov	r2, r3
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	009b      	lsls	r3, r3, #2
 8007e98:	4413      	add	r3, r2
 8007e9a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	3714      	adds	r7, #20
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eae:	4770      	bx	lr

08007eb0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	b087      	sub	sp, #28
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	60f8      	str	r0, [r7, #12]
 8007eb8:	60b9      	str	r1, [r7, #8]
 8007eba:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	3360      	adds	r3, #96	@ 0x60
 8007ec0:	461a      	mov	r2, r3
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	009b      	lsls	r3, r3, #2
 8007ec6:	4413      	add	r3, r2
 8007ec8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8007eca:	697b      	ldr	r3, [r7, #20]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	431a      	orrs	r2, r3
 8007ed6:	697b      	ldr	r3, [r7, #20]
 8007ed8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8007eda:	bf00      	nop
 8007edc:	371c      	adds	r7, #28
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee4:	4770      	bx	lr

08007ee6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8007ee6:	b480      	push	{r7}
 8007ee8:	b087      	sub	sp, #28
 8007eea:	af00      	add	r7, sp, #0
 8007eec:	60f8      	str	r0, [r7, #12]
 8007eee:	60b9      	str	r1, [r7, #8]
 8007ef0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	3360      	adds	r3, #96	@ 0x60
 8007ef6:	461a      	mov	r2, r3
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	009b      	lsls	r3, r3, #2
 8007efc:	4413      	add	r3, r2
 8007efe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8007f00:	697b      	ldr	r3, [r7, #20]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	431a      	orrs	r2, r3
 8007f0c:	697b      	ldr	r3, [r7, #20]
 8007f0e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8007f10:	bf00      	nop
 8007f12:	371c      	adds	r7, #28
 8007f14:	46bd      	mov	sp, r7
 8007f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1a:	4770      	bx	lr

08007f1c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8007f1c:	b480      	push	{r7}
 8007f1e:	b087      	sub	sp, #28
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	60f8      	str	r0, [r7, #12]
 8007f24:	60b9      	str	r1, [r7, #8]
 8007f26:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	3360      	adds	r3, #96	@ 0x60
 8007f2c:	461a      	mov	r2, r3
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	009b      	lsls	r3, r3, #2
 8007f32:	4413      	add	r3, r2
 8007f34:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8007f36:	697b      	ldr	r3, [r7, #20]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	431a      	orrs	r2, r3
 8007f42:	697b      	ldr	r3, [r7, #20]
 8007f44:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8007f46:	bf00      	nop
 8007f48:	371c      	adds	r7, #28
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f50:	4770      	bx	lr

08007f52 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8007f52:	b480      	push	{r7}
 8007f54:	b083      	sub	sp, #12
 8007f56:	af00      	add	r7, sp, #0
 8007f58:	6078      	str	r0, [r7, #4]
 8007f5a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	695b      	ldr	r3, [r3, #20]
 8007f60:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	431a      	orrs	r2, r3
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	615a      	str	r2, [r3, #20]
}
 8007f6c:	bf00      	nop
 8007f6e:	370c      	adds	r7, #12
 8007f70:	46bd      	mov	sp, r7
 8007f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f76:	4770      	bx	lr

08007f78 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8007f78:	b480      	push	{r7}
 8007f7a:	b083      	sub	sp, #12
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	68db      	ldr	r3, [r3, #12]
 8007f84:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d101      	bne.n	8007f90 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8007f8c:	2301      	movs	r3, #1
 8007f8e:	e000      	b.n	8007f92 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8007f90:	2300      	movs	r3, #0
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	370c      	adds	r7, #12
 8007f96:	46bd      	mov	sp, r7
 8007f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9c:	4770      	bx	lr

08007f9e <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8007f9e:	b480      	push	{r7}
 8007fa0:	b087      	sub	sp, #28
 8007fa2:	af00      	add	r7, sp, #0
 8007fa4:	60f8      	str	r0, [r7, #12]
 8007fa6:	60b9      	str	r1, [r7, #8]
 8007fa8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	3330      	adds	r3, #48	@ 0x30
 8007fae:	461a      	mov	r2, r3
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	0a1b      	lsrs	r3, r3, #8
 8007fb4:	009b      	lsls	r3, r3, #2
 8007fb6:	f003 030c 	and.w	r3, r3, #12
 8007fba:	4413      	add	r3, r2
 8007fbc:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8007fbe:	697b      	ldr	r3, [r7, #20]
 8007fc0:	681a      	ldr	r2, [r3, #0]
 8007fc2:	68bb      	ldr	r3, [r7, #8]
 8007fc4:	f003 031f 	and.w	r3, r3, #31
 8007fc8:	211f      	movs	r1, #31
 8007fca:	fa01 f303 	lsl.w	r3, r1, r3
 8007fce:	43db      	mvns	r3, r3
 8007fd0:	401a      	ands	r2, r3
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	0e9b      	lsrs	r3, r3, #26
 8007fd6:	f003 011f 	and.w	r1, r3, #31
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	f003 031f 	and.w	r3, r3, #31
 8007fe0:	fa01 f303 	lsl.w	r3, r1, r3
 8007fe4:	431a      	orrs	r2, r3
 8007fe6:	697b      	ldr	r3, [r7, #20]
 8007fe8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8007fea:	bf00      	nop
 8007fec:	371c      	adds	r7, #28
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff4:	4770      	bx	lr

08007ff6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8007ff6:	b480      	push	{r7}
 8007ff8:	b087      	sub	sp, #28
 8007ffa:	af00      	add	r7, sp, #0
 8007ffc:	60f8      	str	r0, [r7, #12]
 8007ffe:	60b9      	str	r1, [r7, #8]
 8008000:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	3314      	adds	r3, #20
 8008006:	461a      	mov	r2, r3
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	0e5b      	lsrs	r3, r3, #25
 800800c:	009b      	lsls	r3, r3, #2
 800800e:	f003 0304 	and.w	r3, r3, #4
 8008012:	4413      	add	r3, r2
 8008014:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8008016:	697b      	ldr	r3, [r7, #20]
 8008018:	681a      	ldr	r2, [r3, #0]
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	0d1b      	lsrs	r3, r3, #20
 800801e:	f003 031f 	and.w	r3, r3, #31
 8008022:	2107      	movs	r1, #7
 8008024:	fa01 f303 	lsl.w	r3, r1, r3
 8008028:	43db      	mvns	r3, r3
 800802a:	401a      	ands	r2, r3
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	0d1b      	lsrs	r3, r3, #20
 8008030:	f003 031f 	and.w	r3, r3, #31
 8008034:	6879      	ldr	r1, [r7, #4]
 8008036:	fa01 f303 	lsl.w	r3, r1, r3
 800803a:	431a      	orrs	r2, r3
 800803c:	697b      	ldr	r3, [r7, #20]
 800803e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8008040:	bf00      	nop
 8008042:	371c      	adds	r7, #28
 8008044:	46bd      	mov	sp, r7
 8008046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804a:	4770      	bx	lr

0800804c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800804c:	b480      	push	{r7}
 800804e:	b085      	sub	sp, #20
 8008050:	af00      	add	r7, sp, #0
 8008052:	60f8      	str	r0, [r7, #12]
 8008054:	60b9      	str	r1, [r7, #8]
 8008056:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800805e:	68bb      	ldr	r3, [r7, #8]
 8008060:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008064:	43db      	mvns	r3, r3
 8008066:	401a      	ands	r2, r3
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f003 0318 	and.w	r3, r3, #24
 800806e:	4908      	ldr	r1, [pc, #32]	@ (8008090 <LL_ADC_SetChannelSingleDiff+0x44>)
 8008070:	40d9      	lsrs	r1, r3
 8008072:	68bb      	ldr	r3, [r7, #8]
 8008074:	400b      	ands	r3, r1
 8008076:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800807a:	431a      	orrs	r2, r3
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8008082:	bf00      	nop
 8008084:	3714      	adds	r7, #20
 8008086:	46bd      	mov	sp, r7
 8008088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808c:	4770      	bx	lr
 800808e:	bf00      	nop
 8008090:	0007ffff 	.word	0x0007ffff

08008094 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8008094:	b480      	push	{r7}
 8008096:	b083      	sub	sp, #12
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	689b      	ldr	r3, [r3, #8]
 80080a0:	f003 031f 	and.w	r3, r3, #31
}
 80080a4:	4618      	mov	r0, r3
 80080a6:	370c      	adds	r7, #12
 80080a8:	46bd      	mov	sp, r7
 80080aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ae:	4770      	bx	lr

080080b0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80080b0:	b480      	push	{r7}
 80080b2:	b083      	sub	sp, #12
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	689b      	ldr	r3, [r3, #8]
 80080bc:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80080c0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80080c4:	687a      	ldr	r2, [r7, #4]
 80080c6:	6093      	str	r3, [r2, #8]
}
 80080c8:	bf00      	nop
 80080ca:	370c      	adds	r7, #12
 80080cc:	46bd      	mov	sp, r7
 80080ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d2:	4770      	bx	lr

080080d4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80080d4:	b480      	push	{r7}
 80080d6:	b083      	sub	sp, #12
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	689b      	ldr	r3, [r3, #8]
 80080e0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80080e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80080e8:	d101      	bne.n	80080ee <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80080ea:	2301      	movs	r3, #1
 80080ec:	e000      	b.n	80080f0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80080ee:	2300      	movs	r3, #0
}
 80080f0:	4618      	mov	r0, r3
 80080f2:	370c      	adds	r7, #12
 80080f4:	46bd      	mov	sp, r7
 80080f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fa:	4770      	bx	lr

080080fc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80080fc:	b480      	push	{r7}
 80080fe:	b083      	sub	sp, #12
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	689b      	ldr	r3, [r3, #8]
 8008108:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800810c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8008110:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8008118:	bf00      	nop
 800811a:	370c      	adds	r7, #12
 800811c:	46bd      	mov	sp, r7
 800811e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008122:	4770      	bx	lr

08008124 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8008124:	b480      	push	{r7}
 8008126:	b083      	sub	sp, #12
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	689b      	ldr	r3, [r3, #8]
 8008130:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008134:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008138:	d101      	bne.n	800813e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800813a:	2301      	movs	r3, #1
 800813c:	e000      	b.n	8008140 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800813e:	2300      	movs	r3, #0
}
 8008140:	4618      	mov	r0, r3
 8008142:	370c      	adds	r7, #12
 8008144:	46bd      	mov	sp, r7
 8008146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814a:	4770      	bx	lr

0800814c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800814c:	b480      	push	{r7}
 800814e:	b083      	sub	sp, #12
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	689b      	ldr	r3, [r3, #8]
 8008158:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800815c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8008160:	f043 0201 	orr.w	r2, r3, #1
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8008168:	bf00      	nop
 800816a:	370c      	adds	r7, #12
 800816c:	46bd      	mov	sp, r7
 800816e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008172:	4770      	bx	lr

08008174 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8008174:	b480      	push	{r7}
 8008176:	b083      	sub	sp, #12
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	689b      	ldr	r3, [r3, #8]
 8008180:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008184:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8008188:	f043 0202 	orr.w	r2, r3, #2
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8008190:	bf00      	nop
 8008192:	370c      	adds	r7, #12
 8008194:	46bd      	mov	sp, r7
 8008196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819a:	4770      	bx	lr

0800819c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800819c:	b480      	push	{r7}
 800819e:	b083      	sub	sp, #12
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	689b      	ldr	r3, [r3, #8]
 80081a8:	f003 0301 	and.w	r3, r3, #1
 80081ac:	2b01      	cmp	r3, #1
 80081ae:	d101      	bne.n	80081b4 <LL_ADC_IsEnabled+0x18>
 80081b0:	2301      	movs	r3, #1
 80081b2:	e000      	b.n	80081b6 <LL_ADC_IsEnabled+0x1a>
 80081b4:	2300      	movs	r3, #0
}
 80081b6:	4618      	mov	r0, r3
 80081b8:	370c      	adds	r7, #12
 80081ba:	46bd      	mov	sp, r7
 80081bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c0:	4770      	bx	lr

080081c2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80081c2:	b480      	push	{r7}
 80081c4:	b083      	sub	sp, #12
 80081c6:	af00      	add	r7, sp, #0
 80081c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	689b      	ldr	r3, [r3, #8]
 80081ce:	f003 0302 	and.w	r3, r3, #2
 80081d2:	2b02      	cmp	r3, #2
 80081d4:	d101      	bne.n	80081da <LL_ADC_IsDisableOngoing+0x18>
 80081d6:	2301      	movs	r3, #1
 80081d8:	e000      	b.n	80081dc <LL_ADC_IsDisableOngoing+0x1a>
 80081da:	2300      	movs	r3, #0
}
 80081dc:	4618      	mov	r0, r3
 80081de:	370c      	adds	r7, #12
 80081e0:	46bd      	mov	sp, r7
 80081e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e6:	4770      	bx	lr

080081e8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80081e8:	b480      	push	{r7}
 80081ea:	b083      	sub	sp, #12
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	689b      	ldr	r3, [r3, #8]
 80081f4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80081f8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80081fc:	f043 0204 	orr.w	r2, r3, #4
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8008204:	bf00      	nop
 8008206:	370c      	adds	r7, #12
 8008208:	46bd      	mov	sp, r7
 800820a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820e:	4770      	bx	lr

08008210 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8008210:	b480      	push	{r7}
 8008212:	b083      	sub	sp, #12
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	689b      	ldr	r3, [r3, #8]
 800821c:	f003 0304 	and.w	r3, r3, #4
 8008220:	2b04      	cmp	r3, #4
 8008222:	d101      	bne.n	8008228 <LL_ADC_REG_IsConversionOngoing+0x18>
 8008224:	2301      	movs	r3, #1
 8008226:	e000      	b.n	800822a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8008228:	2300      	movs	r3, #0
}
 800822a:	4618      	mov	r0, r3
 800822c:	370c      	adds	r7, #12
 800822e:	46bd      	mov	sp, r7
 8008230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008234:	4770      	bx	lr

08008236 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8008236:	b480      	push	{r7}
 8008238:	b083      	sub	sp, #12
 800823a:	af00      	add	r7, sp, #0
 800823c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	689b      	ldr	r3, [r3, #8]
 8008242:	f003 0308 	and.w	r3, r3, #8
 8008246:	2b08      	cmp	r3, #8
 8008248:	d101      	bne.n	800824e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800824a:	2301      	movs	r3, #1
 800824c:	e000      	b.n	8008250 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800824e:	2300      	movs	r3, #0
}
 8008250:	4618      	mov	r0, r3
 8008252:	370c      	adds	r7, #12
 8008254:	46bd      	mov	sp, r7
 8008256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825a:	4770      	bx	lr

0800825c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800825c:	b590      	push	{r4, r7, lr}
 800825e:	b089      	sub	sp, #36	@ 0x24
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008264:	2300      	movs	r3, #0
 8008266:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8008268:	2300      	movs	r3, #0
 800826a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d101      	bne.n	8008276 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8008272:	2301      	movs	r3, #1
 8008274:	e1a9      	b.n	80085ca <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	695b      	ldr	r3, [r3, #20]
 800827a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008280:	2b00      	cmp	r3, #0
 8008282:	d109      	bne.n	8008298 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f7fc f9fb 	bl	8004680 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2200      	movs	r2, #0
 800828e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2200      	movs	r2, #0
 8008294:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	4618      	mov	r0, r3
 800829e:	f7ff ff19 	bl	80080d4 <LL_ADC_IsDeepPowerDownEnabled>
 80082a2:	4603      	mov	r3, r0
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d004      	beq.n	80082b2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	4618      	mov	r0, r3
 80082ae:	f7ff feff 	bl	80080b0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	4618      	mov	r0, r3
 80082b8:	f7ff ff34 	bl	8008124 <LL_ADC_IsInternalRegulatorEnabled>
 80082bc:	4603      	mov	r3, r0
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d115      	bne.n	80082ee <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	4618      	mov	r0, r3
 80082c8:	f7ff ff18 	bl	80080fc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80082cc:	4b9c      	ldr	r3, [pc, #624]	@ (8008540 <HAL_ADC_Init+0x2e4>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	099b      	lsrs	r3, r3, #6
 80082d2:	4a9c      	ldr	r2, [pc, #624]	@ (8008544 <HAL_ADC_Init+0x2e8>)
 80082d4:	fba2 2303 	umull	r2, r3, r2, r3
 80082d8:	099b      	lsrs	r3, r3, #6
 80082da:	3301      	adds	r3, #1
 80082dc:	005b      	lsls	r3, r3, #1
 80082de:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80082e0:	e002      	b.n	80082e8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	3b01      	subs	r3, #1
 80082e6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d1f9      	bne.n	80082e2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	4618      	mov	r0, r3
 80082f4:	f7ff ff16 	bl	8008124 <LL_ADC_IsInternalRegulatorEnabled>
 80082f8:	4603      	mov	r3, r0
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d10d      	bne.n	800831a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008302:	f043 0210 	orr.w	r2, r3, #16
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800830e:	f043 0201 	orr.w	r2, r3, #1
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8008316:	2301      	movs	r3, #1
 8008318:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	4618      	mov	r0, r3
 8008320:	f7ff ff76 	bl	8008210 <LL_ADC_REG_IsConversionOngoing>
 8008324:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800832a:	f003 0310 	and.w	r3, r3, #16
 800832e:	2b00      	cmp	r3, #0
 8008330:	f040 8142 	bne.w	80085b8 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8008334:	697b      	ldr	r3, [r7, #20]
 8008336:	2b00      	cmp	r3, #0
 8008338:	f040 813e 	bne.w	80085b8 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008340:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8008344:	f043 0202 	orr.w	r2, r3, #2
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	4618      	mov	r0, r3
 8008352:	f7ff ff23 	bl	800819c <LL_ADC_IsEnabled>
 8008356:	4603      	mov	r3, r0
 8008358:	2b00      	cmp	r3, #0
 800835a:	d141      	bne.n	80083e0 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008364:	d004      	beq.n	8008370 <HAL_ADC_Init+0x114>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	4a77      	ldr	r2, [pc, #476]	@ (8008548 <HAL_ADC_Init+0x2ec>)
 800836c:	4293      	cmp	r3, r2
 800836e:	d10f      	bne.n	8008390 <HAL_ADC_Init+0x134>
 8008370:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8008374:	f7ff ff12 	bl	800819c <LL_ADC_IsEnabled>
 8008378:	4604      	mov	r4, r0
 800837a:	4873      	ldr	r0, [pc, #460]	@ (8008548 <HAL_ADC_Init+0x2ec>)
 800837c:	f7ff ff0e 	bl	800819c <LL_ADC_IsEnabled>
 8008380:	4603      	mov	r3, r0
 8008382:	4323      	orrs	r3, r4
 8008384:	2b00      	cmp	r3, #0
 8008386:	bf0c      	ite	eq
 8008388:	2301      	moveq	r3, #1
 800838a:	2300      	movne	r3, #0
 800838c:	b2db      	uxtb	r3, r3
 800838e:	e012      	b.n	80083b6 <HAL_ADC_Init+0x15a>
 8008390:	486e      	ldr	r0, [pc, #440]	@ (800854c <HAL_ADC_Init+0x2f0>)
 8008392:	f7ff ff03 	bl	800819c <LL_ADC_IsEnabled>
 8008396:	4604      	mov	r4, r0
 8008398:	486d      	ldr	r0, [pc, #436]	@ (8008550 <HAL_ADC_Init+0x2f4>)
 800839a:	f7ff feff 	bl	800819c <LL_ADC_IsEnabled>
 800839e:	4603      	mov	r3, r0
 80083a0:	431c      	orrs	r4, r3
 80083a2:	486c      	ldr	r0, [pc, #432]	@ (8008554 <HAL_ADC_Init+0x2f8>)
 80083a4:	f7ff fefa 	bl	800819c <LL_ADC_IsEnabled>
 80083a8:	4603      	mov	r3, r0
 80083aa:	4323      	orrs	r3, r4
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	bf0c      	ite	eq
 80083b0:	2301      	moveq	r3, #1
 80083b2:	2300      	movne	r3, #0
 80083b4:	b2db      	uxtb	r3, r3
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d012      	beq.n	80083e0 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80083c2:	d004      	beq.n	80083ce <HAL_ADC_Init+0x172>
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	4a5f      	ldr	r2, [pc, #380]	@ (8008548 <HAL_ADC_Init+0x2ec>)
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d101      	bne.n	80083d2 <HAL_ADC_Init+0x176>
 80083ce:	4a62      	ldr	r2, [pc, #392]	@ (8008558 <HAL_ADC_Init+0x2fc>)
 80083d0:	e000      	b.n	80083d4 <HAL_ADC_Init+0x178>
 80083d2:	4a62      	ldr	r2, [pc, #392]	@ (800855c <HAL_ADC_Init+0x300>)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	685b      	ldr	r3, [r3, #4]
 80083d8:	4619      	mov	r1, r3
 80083da:	4610      	mov	r0, r2
 80083dc:	f7ff fcfa 	bl	8007dd4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	7f5b      	ldrb	r3, [r3, #29]
 80083e4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80083ea:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80083f0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80083f6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80083fe:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8008400:	4313      	orrs	r3, r2
 8008402:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800840a:	2b01      	cmp	r3, #1
 800840c:	d106      	bne.n	800841c <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008412:	3b01      	subs	r3, #1
 8008414:	045b      	lsls	r3, r3, #17
 8008416:	69ba      	ldr	r2, [r7, #24]
 8008418:	4313      	orrs	r3, r2
 800841a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008420:	2b00      	cmp	r3, #0
 8008422:	d009      	beq.n	8008438 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008428:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008430:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8008432:	69ba      	ldr	r2, [r7, #24]
 8008434:	4313      	orrs	r3, r2
 8008436:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	68da      	ldr	r2, [r3, #12]
 800843e:	4b48      	ldr	r3, [pc, #288]	@ (8008560 <HAL_ADC_Init+0x304>)
 8008440:	4013      	ands	r3, r2
 8008442:	687a      	ldr	r2, [r7, #4]
 8008444:	6812      	ldr	r2, [r2, #0]
 8008446:	69b9      	ldr	r1, [r7, #24]
 8008448:	430b      	orrs	r3, r1
 800844a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	691b      	ldr	r3, [r3, #16]
 8008452:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	430a      	orrs	r2, r1
 8008460:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	4618      	mov	r0, r3
 8008468:	f7ff fee5 	bl	8008236 <LL_ADC_INJ_IsConversionOngoing>
 800846c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800846e:	697b      	ldr	r3, [r7, #20]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d17f      	bne.n	8008574 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8008474:	693b      	ldr	r3, [r7, #16]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d17c      	bne.n	8008574 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800847e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008486:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8008488:	4313      	orrs	r3, r2
 800848a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	68db      	ldr	r3, [r3, #12]
 8008492:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008496:	f023 0302 	bic.w	r3, r3, #2
 800849a:	687a      	ldr	r2, [r7, #4]
 800849c:	6812      	ldr	r2, [r2, #0]
 800849e:	69b9      	ldr	r1, [r7, #24]
 80084a0:	430b      	orrs	r3, r1
 80084a2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	691b      	ldr	r3, [r3, #16]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d017      	beq.n	80084dc <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	691a      	ldr	r2, [r3, #16]
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80084ba:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80084c4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80084c8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80084cc:	687a      	ldr	r2, [r7, #4]
 80084ce:	6911      	ldr	r1, [r2, #16]
 80084d0:	687a      	ldr	r2, [r7, #4]
 80084d2:	6812      	ldr	r2, [r2, #0]
 80084d4:	430b      	orrs	r3, r1
 80084d6:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80084da:	e013      	b.n	8008504 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	691a      	ldr	r2, [r3, #16]
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80084ea:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80084f4:	687a      	ldr	r2, [r7, #4]
 80084f6:	6812      	ldr	r2, [r2, #0]
 80084f8:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80084fc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8008500:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800850a:	2b01      	cmp	r3, #1
 800850c:	d12a      	bne.n	8008564 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	691b      	ldr	r3, [r3, #16]
 8008514:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8008518:	f023 0304 	bic.w	r3, r3, #4
 800851c:	687a      	ldr	r2, [r7, #4]
 800851e:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8008520:	687a      	ldr	r2, [r7, #4]
 8008522:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008524:	4311      	orrs	r1, r2
 8008526:	687a      	ldr	r2, [r7, #4]
 8008528:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800852a:	4311      	orrs	r1, r2
 800852c:	687a      	ldr	r2, [r7, #4]
 800852e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8008530:	430a      	orrs	r2, r1
 8008532:	431a      	orrs	r2, r3
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f042 0201 	orr.w	r2, r2, #1
 800853c:	611a      	str	r2, [r3, #16]
 800853e:	e019      	b.n	8008574 <HAL_ADC_Init+0x318>
 8008540:	200000fc 	.word	0x200000fc
 8008544:	053e2d63 	.word	0x053e2d63
 8008548:	50000100 	.word	0x50000100
 800854c:	50000400 	.word	0x50000400
 8008550:	50000500 	.word	0x50000500
 8008554:	50000600 	.word	0x50000600
 8008558:	50000300 	.word	0x50000300
 800855c:	50000700 	.word	0x50000700
 8008560:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	691a      	ldr	r2, [r3, #16]
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f022 0201 	bic.w	r2, r2, #1
 8008572:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	695b      	ldr	r3, [r3, #20]
 8008578:	2b01      	cmp	r3, #1
 800857a:	d10c      	bne.n	8008596 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008582:	f023 010f 	bic.w	r1, r3, #15
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6a1b      	ldr	r3, [r3, #32]
 800858a:	1e5a      	subs	r2, r3, #1
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	430a      	orrs	r2, r1
 8008592:	631a      	str	r2, [r3, #48]	@ 0x30
 8008594:	e007      	b.n	80085a6 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f022 020f 	bic.w	r2, r2, #15
 80085a4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80085aa:	f023 0303 	bic.w	r3, r3, #3
 80085ae:	f043 0201 	orr.w	r2, r3, #1
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80085b6:	e007      	b.n	80085c8 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80085bc:	f043 0210 	orr.w	r2, r3, #16
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80085c4:	2301      	movs	r3, #1
 80085c6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80085c8:	7ffb      	ldrb	r3, [r7, #31]
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	3724      	adds	r7, #36	@ 0x24
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bd90      	pop	{r4, r7, pc}
 80085d2:	bf00      	nop

080085d4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b086      	sub	sp, #24
 80085d8:	af00      	add	r7, sp, #0
 80085da:	60f8      	str	r0, [r7, #12]
 80085dc:	60b9      	str	r1, [r7, #8]
 80085de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80085e8:	d004      	beq.n	80085f4 <HAL_ADC_Start_DMA+0x20>
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	4a5a      	ldr	r2, [pc, #360]	@ (8008758 <HAL_ADC_Start_DMA+0x184>)
 80085f0:	4293      	cmp	r3, r2
 80085f2:	d101      	bne.n	80085f8 <HAL_ADC_Start_DMA+0x24>
 80085f4:	4b59      	ldr	r3, [pc, #356]	@ (800875c <HAL_ADC_Start_DMA+0x188>)
 80085f6:	e000      	b.n	80085fa <HAL_ADC_Start_DMA+0x26>
 80085f8:	4b59      	ldr	r3, [pc, #356]	@ (8008760 <HAL_ADC_Start_DMA+0x18c>)
 80085fa:	4618      	mov	r0, r3
 80085fc:	f7ff fd4a 	bl	8008094 <LL_ADC_GetMultimode>
 8008600:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	4618      	mov	r0, r3
 8008608:	f7ff fe02 	bl	8008210 <LL_ADC_REG_IsConversionOngoing>
 800860c:	4603      	mov	r3, r0
 800860e:	2b00      	cmp	r3, #0
 8008610:	f040 809b 	bne.w	800874a <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800861a:	2b01      	cmp	r3, #1
 800861c:	d101      	bne.n	8008622 <HAL_ADC_Start_DMA+0x4e>
 800861e:	2302      	movs	r3, #2
 8008620:	e096      	b.n	8008750 <HAL_ADC_Start_DMA+0x17c>
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	2201      	movs	r2, #1
 8008626:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	4a4d      	ldr	r2, [pc, #308]	@ (8008764 <HAL_ADC_Start_DMA+0x190>)
 8008630:	4293      	cmp	r3, r2
 8008632:	d008      	beq.n	8008646 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8008634:	693b      	ldr	r3, [r7, #16]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d005      	beq.n	8008646 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800863a:	693b      	ldr	r3, [r7, #16]
 800863c:	2b05      	cmp	r3, #5
 800863e:	d002      	beq.n	8008646 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8008640:	693b      	ldr	r3, [r7, #16]
 8008642:	2b09      	cmp	r3, #9
 8008644:	d17a      	bne.n	800873c <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8008646:	68f8      	ldr	r0, [r7, #12]
 8008648:	f000 fcf6 	bl	8009038 <ADC_Enable>
 800864c:	4603      	mov	r3, r0
 800864e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8008650:	7dfb      	ldrb	r3, [r7, #23]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d16d      	bne.n	8008732 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800865a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800865e:	f023 0301 	bic.w	r3, r3, #1
 8008662:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	4a3a      	ldr	r2, [pc, #232]	@ (8008758 <HAL_ADC_Start_DMA+0x184>)
 8008670:	4293      	cmp	r3, r2
 8008672:	d009      	beq.n	8008688 <HAL_ADC_Start_DMA+0xb4>
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	4a3b      	ldr	r2, [pc, #236]	@ (8008768 <HAL_ADC_Start_DMA+0x194>)
 800867a:	4293      	cmp	r3, r2
 800867c:	d002      	beq.n	8008684 <HAL_ADC_Start_DMA+0xb0>
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	e003      	b.n	800868c <HAL_ADC_Start_DMA+0xb8>
 8008684:	4b39      	ldr	r3, [pc, #228]	@ (800876c <HAL_ADC_Start_DMA+0x198>)
 8008686:	e001      	b.n	800868c <HAL_ADC_Start_DMA+0xb8>
 8008688:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800868c:	68fa      	ldr	r2, [r7, #12]
 800868e:	6812      	ldr	r2, [r2, #0]
 8008690:	4293      	cmp	r3, r2
 8008692:	d002      	beq.n	800869a <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8008694:	693b      	ldr	r3, [r7, #16]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d105      	bne.n	80086a6 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800869e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80086aa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d006      	beq.n	80086c0 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80086b6:	f023 0206 	bic.w	r2, r3, #6
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	661a      	str	r2, [r3, #96]	@ 0x60
 80086be:	e002      	b.n	80086c6 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	2200      	movs	r2, #0
 80086c4:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086ca:	4a29      	ldr	r2, [pc, #164]	@ (8008770 <HAL_ADC_Start_DMA+0x19c>)
 80086cc:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086d2:	4a28      	ldr	r2, [pc, #160]	@ (8008774 <HAL_ADC_Start_DMA+0x1a0>)
 80086d4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086da:	4a27      	ldr	r2, [pc, #156]	@ (8008778 <HAL_ADC_Start_DMA+0x1a4>)
 80086dc:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	221c      	movs	r2, #28
 80086e4:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	2200      	movs	r2, #0
 80086ea:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	685a      	ldr	r2, [r3, #4]
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	f042 0210 	orr.w	r2, r2, #16
 80086fc:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	68da      	ldr	r2, [r3, #12]
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	f042 0201 	orr.w	r2, r2, #1
 800870c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	3340      	adds	r3, #64	@ 0x40
 8008718:	4619      	mov	r1, r3
 800871a:	68ba      	ldr	r2, [r7, #8]
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	f001 f989 	bl	8009a34 <HAL_DMA_Start_IT>
 8008722:	4603      	mov	r3, r0
 8008724:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	4618      	mov	r0, r3
 800872c:	f7ff fd5c 	bl	80081e8 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8008730:	e00d      	b.n	800874e <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	2200      	movs	r2, #0
 8008736:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 800873a:	e008      	b.n	800874e <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800873c:	2301      	movs	r3, #1
 800873e:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	2200      	movs	r2, #0
 8008744:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8008748:	e001      	b.n	800874e <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800874a:	2302      	movs	r3, #2
 800874c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800874e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008750:	4618      	mov	r0, r3
 8008752:	3718      	adds	r7, #24
 8008754:	46bd      	mov	sp, r7
 8008756:	bd80      	pop	{r7, pc}
 8008758:	50000100 	.word	0x50000100
 800875c:	50000300 	.word	0x50000300
 8008760:	50000700 	.word	0x50000700
 8008764:	50000600 	.word	0x50000600
 8008768:	50000500 	.word	0x50000500
 800876c:	50000400 	.word	0x50000400
 8008770:	08009223 	.word	0x08009223
 8008774:	080092fb 	.word	0x080092fb
 8008778:	08009317 	.word	0x08009317

0800877c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800877c:	b480      	push	{r7}
 800877e:	b083      	sub	sp, #12
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8008784:	bf00      	nop
 8008786:	370c      	adds	r7, #12
 8008788:	46bd      	mov	sp, r7
 800878a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878e:	4770      	bx	lr

08008790 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8008790:	b480      	push	{r7}
 8008792:	b083      	sub	sp, #12
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8008798:	bf00      	nop
 800879a:	370c      	adds	r7, #12
 800879c:	46bd      	mov	sp, r7
 800879e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a2:	4770      	bx	lr

080087a4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80087a4:	b480      	push	{r7}
 80087a6:	b083      	sub	sp, #12
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80087ac:	bf00      	nop
 80087ae:	370c      	adds	r7, #12
 80087b0:	46bd      	mov	sp, r7
 80087b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b6:	4770      	bx	lr

080087b8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b0b6      	sub	sp, #216	@ 0xd8
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
 80087c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80087c2:	2300      	movs	r3, #0
 80087c4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80087c8:	2300      	movs	r3, #0
 80087ca:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80087d2:	2b01      	cmp	r3, #1
 80087d4:	d102      	bne.n	80087dc <HAL_ADC_ConfigChannel+0x24>
 80087d6:	2302      	movs	r3, #2
 80087d8:	f000 bc13 	b.w	8009002 <HAL_ADC_ConfigChannel+0x84a>
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2201      	movs	r2, #1
 80087e0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	4618      	mov	r0, r3
 80087ea:	f7ff fd11 	bl	8008210 <LL_ADC_REG_IsConversionOngoing>
 80087ee:	4603      	mov	r3, r0
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	f040 83f3 	bne.w	8008fdc <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6818      	ldr	r0, [r3, #0]
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	6859      	ldr	r1, [r3, #4]
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	461a      	mov	r2, r3
 8008804:	f7ff fbcb 	bl	8007f9e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	4618      	mov	r0, r3
 800880e:	f7ff fcff 	bl	8008210 <LL_ADC_REG_IsConversionOngoing>
 8008812:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	4618      	mov	r0, r3
 800881c:	f7ff fd0b 	bl	8008236 <LL_ADC_INJ_IsConversionOngoing>
 8008820:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8008824:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8008828:	2b00      	cmp	r3, #0
 800882a:	f040 81d9 	bne.w	8008be0 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800882e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008832:	2b00      	cmp	r3, #0
 8008834:	f040 81d4 	bne.w	8008be0 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	689b      	ldr	r3, [r3, #8]
 800883c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008840:	d10f      	bne.n	8008862 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6818      	ldr	r0, [r3, #0]
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	2200      	movs	r2, #0
 800884c:	4619      	mov	r1, r3
 800884e:	f7ff fbd2 	bl	8007ff6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800885a:	4618      	mov	r0, r3
 800885c:	f7ff fb79 	bl	8007f52 <LL_ADC_SetSamplingTimeCommonConfig>
 8008860:	e00e      	b.n	8008880 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6818      	ldr	r0, [r3, #0]
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	6819      	ldr	r1, [r3, #0]
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	689b      	ldr	r3, [r3, #8]
 800886e:	461a      	mov	r2, r3
 8008870:	f7ff fbc1 	bl	8007ff6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	2100      	movs	r1, #0
 800887a:	4618      	mov	r0, r3
 800887c:	f7ff fb69 	bl	8007f52 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	695a      	ldr	r2, [r3, #20]
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	68db      	ldr	r3, [r3, #12]
 800888a:	08db      	lsrs	r3, r3, #3
 800888c:	f003 0303 	and.w	r3, r3, #3
 8008890:	005b      	lsls	r3, r3, #1
 8008892:	fa02 f303 	lsl.w	r3, r2, r3
 8008896:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	691b      	ldr	r3, [r3, #16]
 800889e:	2b04      	cmp	r3, #4
 80088a0:	d022      	beq.n	80088e8 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6818      	ldr	r0, [r3, #0]
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	6919      	ldr	r1, [r3, #16]
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	681a      	ldr	r2, [r3, #0]
 80088ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80088b2:	f7ff fac3 	bl	8007e3c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6818      	ldr	r0, [r3, #0]
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	6919      	ldr	r1, [r3, #16]
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	699b      	ldr	r3, [r3, #24]
 80088c2:	461a      	mov	r2, r3
 80088c4:	f7ff fb0f 	bl	8007ee6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	6818      	ldr	r0, [r3, #0]
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80088d4:	2b01      	cmp	r3, #1
 80088d6:	d102      	bne.n	80088de <HAL_ADC_ConfigChannel+0x126>
 80088d8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80088dc:	e000      	b.n	80088e0 <HAL_ADC_ConfigChannel+0x128>
 80088de:	2300      	movs	r3, #0
 80088e0:	461a      	mov	r2, r3
 80088e2:	f7ff fb1b 	bl	8007f1c <LL_ADC_SetOffsetSaturation>
 80088e6:	e17b      	b.n	8008be0 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	2100      	movs	r1, #0
 80088ee:	4618      	mov	r0, r3
 80088f0:	f7ff fac8 	bl	8007e84 <LL_ADC_GetOffsetChannel>
 80088f4:	4603      	mov	r3, r0
 80088f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d10a      	bne.n	8008914 <HAL_ADC_ConfigChannel+0x15c>
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	2100      	movs	r1, #0
 8008904:	4618      	mov	r0, r3
 8008906:	f7ff fabd 	bl	8007e84 <LL_ADC_GetOffsetChannel>
 800890a:	4603      	mov	r3, r0
 800890c:	0e9b      	lsrs	r3, r3, #26
 800890e:	f003 021f 	and.w	r2, r3, #31
 8008912:	e01e      	b.n	8008952 <HAL_ADC_ConfigChannel+0x19a>
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	2100      	movs	r1, #0
 800891a:	4618      	mov	r0, r3
 800891c:	f7ff fab2 	bl	8007e84 <LL_ADC_GetOffsetChannel>
 8008920:	4603      	mov	r3, r0
 8008922:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008926:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800892a:	fa93 f3a3 	rbit	r3, r3
 800892e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8008932:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008936:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800893a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800893e:	2b00      	cmp	r3, #0
 8008940:	d101      	bne.n	8008946 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8008942:	2320      	movs	r3, #32
 8008944:	e004      	b.n	8008950 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8008946:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800894a:	fab3 f383 	clz	r3, r3
 800894e:	b2db      	uxtb	r3, r3
 8008950:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800895a:	2b00      	cmp	r3, #0
 800895c:	d105      	bne.n	800896a <HAL_ADC_ConfigChannel+0x1b2>
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	0e9b      	lsrs	r3, r3, #26
 8008964:	f003 031f 	and.w	r3, r3, #31
 8008968:	e018      	b.n	800899c <HAL_ADC_ConfigChannel+0x1e4>
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008972:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8008976:	fa93 f3a3 	rbit	r3, r3
 800897a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800897e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008982:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8008986:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800898a:	2b00      	cmp	r3, #0
 800898c:	d101      	bne.n	8008992 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800898e:	2320      	movs	r3, #32
 8008990:	e004      	b.n	800899c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8008992:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008996:	fab3 f383 	clz	r3, r3
 800899a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800899c:	429a      	cmp	r2, r3
 800899e:	d106      	bne.n	80089ae <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	2200      	movs	r2, #0
 80089a6:	2100      	movs	r1, #0
 80089a8:	4618      	mov	r0, r3
 80089aa:	f7ff fa81 	bl	8007eb0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	2101      	movs	r1, #1
 80089b4:	4618      	mov	r0, r3
 80089b6:	f7ff fa65 	bl	8007e84 <LL_ADC_GetOffsetChannel>
 80089ba:	4603      	mov	r3, r0
 80089bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d10a      	bne.n	80089da <HAL_ADC_ConfigChannel+0x222>
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	2101      	movs	r1, #1
 80089ca:	4618      	mov	r0, r3
 80089cc:	f7ff fa5a 	bl	8007e84 <LL_ADC_GetOffsetChannel>
 80089d0:	4603      	mov	r3, r0
 80089d2:	0e9b      	lsrs	r3, r3, #26
 80089d4:	f003 021f 	and.w	r2, r3, #31
 80089d8:	e01e      	b.n	8008a18 <HAL_ADC_ConfigChannel+0x260>
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	2101      	movs	r1, #1
 80089e0:	4618      	mov	r0, r3
 80089e2:	f7ff fa4f 	bl	8007e84 <LL_ADC_GetOffsetChannel>
 80089e6:	4603      	mov	r3, r0
 80089e8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80089ec:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80089f0:	fa93 f3a3 	rbit	r3, r3
 80089f4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80089f8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80089fc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8008a00:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d101      	bne.n	8008a0c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8008a08:	2320      	movs	r3, #32
 8008a0a:	e004      	b.n	8008a16 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8008a0c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008a10:	fab3 f383 	clz	r3, r3
 8008a14:	b2db      	uxtb	r3, r3
 8008a16:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d105      	bne.n	8008a30 <HAL_ADC_ConfigChannel+0x278>
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	0e9b      	lsrs	r3, r3, #26
 8008a2a:	f003 031f 	and.w	r3, r3, #31
 8008a2e:	e018      	b.n	8008a62 <HAL_ADC_ConfigChannel+0x2aa>
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a38:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008a3c:	fa93 f3a3 	rbit	r3, r3
 8008a40:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8008a44:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008a48:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8008a4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d101      	bne.n	8008a58 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8008a54:	2320      	movs	r3, #32
 8008a56:	e004      	b.n	8008a62 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8008a58:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008a5c:	fab3 f383 	clz	r3, r3
 8008a60:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8008a62:	429a      	cmp	r2, r3
 8008a64:	d106      	bne.n	8008a74 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	2101      	movs	r1, #1
 8008a6e:	4618      	mov	r0, r3
 8008a70:	f7ff fa1e 	bl	8007eb0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	2102      	movs	r1, #2
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	f7ff fa02 	bl	8007e84 <LL_ADC_GetOffsetChannel>
 8008a80:	4603      	mov	r3, r0
 8008a82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d10a      	bne.n	8008aa0 <HAL_ADC_ConfigChannel+0x2e8>
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	2102      	movs	r1, #2
 8008a90:	4618      	mov	r0, r3
 8008a92:	f7ff f9f7 	bl	8007e84 <LL_ADC_GetOffsetChannel>
 8008a96:	4603      	mov	r3, r0
 8008a98:	0e9b      	lsrs	r3, r3, #26
 8008a9a:	f003 021f 	and.w	r2, r3, #31
 8008a9e:	e01e      	b.n	8008ade <HAL_ADC_ConfigChannel+0x326>
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	2102      	movs	r1, #2
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	f7ff f9ec 	bl	8007e84 <LL_ADC_GetOffsetChannel>
 8008aac:	4603      	mov	r3, r0
 8008aae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008ab2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008ab6:	fa93 f3a3 	rbit	r3, r3
 8008aba:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8008abe:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008ac2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8008ac6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d101      	bne.n	8008ad2 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8008ace:	2320      	movs	r3, #32
 8008ad0:	e004      	b.n	8008adc <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8008ad2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008ad6:	fab3 f383 	clz	r3, r3
 8008ada:	b2db      	uxtb	r3, r3
 8008adc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d105      	bne.n	8008af6 <HAL_ADC_ConfigChannel+0x33e>
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	0e9b      	lsrs	r3, r3, #26
 8008af0:	f003 031f 	and.w	r3, r3, #31
 8008af4:	e016      	b.n	8008b24 <HAL_ADC_ConfigChannel+0x36c>
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008afe:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008b02:	fa93 f3a3 	rbit	r3, r3
 8008b06:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8008b08:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008b0a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8008b0e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d101      	bne.n	8008b1a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8008b16:	2320      	movs	r3, #32
 8008b18:	e004      	b.n	8008b24 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8008b1a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008b1e:	fab3 f383 	clz	r3, r3
 8008b22:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8008b24:	429a      	cmp	r2, r3
 8008b26:	d106      	bne.n	8008b36 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	2102      	movs	r1, #2
 8008b30:	4618      	mov	r0, r3
 8008b32:	f7ff f9bd 	bl	8007eb0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	2103      	movs	r1, #3
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	f7ff f9a1 	bl	8007e84 <LL_ADC_GetOffsetChannel>
 8008b42:	4603      	mov	r3, r0
 8008b44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d10a      	bne.n	8008b62 <HAL_ADC_ConfigChannel+0x3aa>
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	2103      	movs	r1, #3
 8008b52:	4618      	mov	r0, r3
 8008b54:	f7ff f996 	bl	8007e84 <LL_ADC_GetOffsetChannel>
 8008b58:	4603      	mov	r3, r0
 8008b5a:	0e9b      	lsrs	r3, r3, #26
 8008b5c:	f003 021f 	and.w	r2, r3, #31
 8008b60:	e017      	b.n	8008b92 <HAL_ADC_ConfigChannel+0x3da>
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	2103      	movs	r1, #3
 8008b68:	4618      	mov	r0, r3
 8008b6a:	f7ff f98b 	bl	8007e84 <LL_ADC_GetOffsetChannel>
 8008b6e:	4603      	mov	r3, r0
 8008b70:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b72:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008b74:	fa93 f3a3 	rbit	r3, r3
 8008b78:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8008b7a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008b7c:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8008b7e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d101      	bne.n	8008b88 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8008b84:	2320      	movs	r3, #32
 8008b86:	e003      	b.n	8008b90 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8008b88:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008b8a:	fab3 f383 	clz	r3, r3
 8008b8e:	b2db      	uxtb	r3, r3
 8008b90:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d105      	bne.n	8008baa <HAL_ADC_ConfigChannel+0x3f2>
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	0e9b      	lsrs	r3, r3, #26
 8008ba4:	f003 031f 	and.w	r3, r3, #31
 8008ba8:	e011      	b.n	8008bce <HAL_ADC_ConfigChannel+0x416>
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008bb0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008bb2:	fa93 f3a3 	rbit	r3, r3
 8008bb6:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8008bb8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008bba:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8008bbc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d101      	bne.n	8008bc6 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8008bc2:	2320      	movs	r3, #32
 8008bc4:	e003      	b.n	8008bce <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8008bc6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008bc8:	fab3 f383 	clz	r3, r3
 8008bcc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8008bce:	429a      	cmp	r2, r3
 8008bd0:	d106      	bne.n	8008be0 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	2103      	movs	r1, #3
 8008bda:	4618      	mov	r0, r3
 8008bdc:	f7ff f968 	bl	8007eb0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	4618      	mov	r0, r3
 8008be6:	f7ff fad9 	bl	800819c <LL_ADC_IsEnabled>
 8008bea:	4603      	mov	r3, r0
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	f040 813d 	bne.w	8008e6c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	6818      	ldr	r0, [r3, #0]
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	6819      	ldr	r1, [r3, #0]
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	68db      	ldr	r3, [r3, #12]
 8008bfe:	461a      	mov	r2, r3
 8008c00:	f7ff fa24 	bl	800804c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	68db      	ldr	r3, [r3, #12]
 8008c08:	4aa2      	ldr	r2, [pc, #648]	@ (8008e94 <HAL_ADC_ConfigChannel+0x6dc>)
 8008c0a:	4293      	cmp	r3, r2
 8008c0c:	f040 812e 	bne.w	8008e6c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d10b      	bne.n	8008c38 <HAL_ADC_ConfigChannel+0x480>
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	0e9b      	lsrs	r3, r3, #26
 8008c26:	3301      	adds	r3, #1
 8008c28:	f003 031f 	and.w	r3, r3, #31
 8008c2c:	2b09      	cmp	r3, #9
 8008c2e:	bf94      	ite	ls
 8008c30:	2301      	movls	r3, #1
 8008c32:	2300      	movhi	r3, #0
 8008c34:	b2db      	uxtb	r3, r3
 8008c36:	e019      	b.n	8008c6c <HAL_ADC_ConfigChannel+0x4b4>
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c3e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008c40:	fa93 f3a3 	rbit	r3, r3
 8008c44:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8008c46:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008c48:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8008c4a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d101      	bne.n	8008c54 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8008c50:	2320      	movs	r3, #32
 8008c52:	e003      	b.n	8008c5c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8008c54:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008c56:	fab3 f383 	clz	r3, r3
 8008c5a:	b2db      	uxtb	r3, r3
 8008c5c:	3301      	adds	r3, #1
 8008c5e:	f003 031f 	and.w	r3, r3, #31
 8008c62:	2b09      	cmp	r3, #9
 8008c64:	bf94      	ite	ls
 8008c66:	2301      	movls	r3, #1
 8008c68:	2300      	movhi	r3, #0
 8008c6a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d079      	beq.n	8008d64 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d107      	bne.n	8008c8c <HAL_ADC_ConfigChannel+0x4d4>
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	0e9b      	lsrs	r3, r3, #26
 8008c82:	3301      	adds	r3, #1
 8008c84:	069b      	lsls	r3, r3, #26
 8008c86:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8008c8a:	e015      	b.n	8008cb8 <HAL_ADC_ConfigChannel+0x500>
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008c94:	fa93 f3a3 	rbit	r3, r3
 8008c98:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8008c9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008c9c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8008c9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d101      	bne.n	8008ca8 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8008ca4:	2320      	movs	r3, #32
 8008ca6:	e003      	b.n	8008cb0 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8008ca8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008caa:	fab3 f383 	clz	r3, r3
 8008cae:	b2db      	uxtb	r3, r3
 8008cb0:	3301      	adds	r3, #1
 8008cb2:	069b      	lsls	r3, r3, #26
 8008cb4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d109      	bne.n	8008cd8 <HAL_ADC_ConfigChannel+0x520>
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	0e9b      	lsrs	r3, r3, #26
 8008cca:	3301      	adds	r3, #1
 8008ccc:	f003 031f 	and.w	r3, r3, #31
 8008cd0:	2101      	movs	r1, #1
 8008cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8008cd6:	e017      	b.n	8008d08 <HAL_ADC_ConfigChannel+0x550>
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008cde:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008ce0:	fa93 f3a3 	rbit	r3, r3
 8008ce4:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8008ce6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008ce8:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8008cea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d101      	bne.n	8008cf4 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8008cf0:	2320      	movs	r3, #32
 8008cf2:	e003      	b.n	8008cfc <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8008cf4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008cf6:	fab3 f383 	clz	r3, r3
 8008cfa:	b2db      	uxtb	r3, r3
 8008cfc:	3301      	adds	r3, #1
 8008cfe:	f003 031f 	and.w	r3, r3, #31
 8008d02:	2101      	movs	r1, #1
 8008d04:	fa01 f303 	lsl.w	r3, r1, r3
 8008d08:	ea42 0103 	orr.w	r1, r2, r3
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d10a      	bne.n	8008d2e <HAL_ADC_ConfigChannel+0x576>
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	0e9b      	lsrs	r3, r3, #26
 8008d1e:	3301      	adds	r3, #1
 8008d20:	f003 021f 	and.w	r2, r3, #31
 8008d24:	4613      	mov	r3, r2
 8008d26:	005b      	lsls	r3, r3, #1
 8008d28:	4413      	add	r3, r2
 8008d2a:	051b      	lsls	r3, r3, #20
 8008d2c:	e018      	b.n	8008d60 <HAL_ADC_ConfigChannel+0x5a8>
 8008d2e:	683b      	ldr	r3, [r7, #0]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d36:	fa93 f3a3 	rbit	r3, r3
 8008d3a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8008d3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8008d40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d101      	bne.n	8008d4a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8008d46:	2320      	movs	r3, #32
 8008d48:	e003      	b.n	8008d52 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8008d4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d4c:	fab3 f383 	clz	r3, r3
 8008d50:	b2db      	uxtb	r3, r3
 8008d52:	3301      	adds	r3, #1
 8008d54:	f003 021f 	and.w	r2, r3, #31
 8008d58:	4613      	mov	r3, r2
 8008d5a:	005b      	lsls	r3, r3, #1
 8008d5c:	4413      	add	r3, r2
 8008d5e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008d60:	430b      	orrs	r3, r1
 8008d62:	e07e      	b.n	8008e62 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d107      	bne.n	8008d80 <HAL_ADC_ConfigChannel+0x5c8>
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	0e9b      	lsrs	r3, r3, #26
 8008d76:	3301      	adds	r3, #1
 8008d78:	069b      	lsls	r3, r3, #26
 8008d7a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8008d7e:	e015      	b.n	8008dac <HAL_ADC_ConfigChannel+0x5f4>
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d88:	fa93 f3a3 	rbit	r3, r3
 8008d8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8008d8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d90:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8008d92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d101      	bne.n	8008d9c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8008d98:	2320      	movs	r3, #32
 8008d9a:	e003      	b.n	8008da4 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8008d9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d9e:	fab3 f383 	clz	r3, r3
 8008da2:	b2db      	uxtb	r3, r3
 8008da4:	3301      	adds	r3, #1
 8008da6:	069b      	lsls	r3, r3, #26
 8008da8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d109      	bne.n	8008dcc <HAL_ADC_ConfigChannel+0x614>
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	0e9b      	lsrs	r3, r3, #26
 8008dbe:	3301      	adds	r3, #1
 8008dc0:	f003 031f 	and.w	r3, r3, #31
 8008dc4:	2101      	movs	r1, #1
 8008dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8008dca:	e017      	b.n	8008dfc <HAL_ADC_ConfigChannel+0x644>
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008dd2:	6a3b      	ldr	r3, [r7, #32]
 8008dd4:	fa93 f3a3 	rbit	r3, r3
 8008dd8:	61fb      	str	r3, [r7, #28]
  return result;
 8008dda:	69fb      	ldr	r3, [r7, #28]
 8008ddc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8008dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d101      	bne.n	8008de8 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8008de4:	2320      	movs	r3, #32
 8008de6:	e003      	b.n	8008df0 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8008de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dea:	fab3 f383 	clz	r3, r3
 8008dee:	b2db      	uxtb	r3, r3
 8008df0:	3301      	adds	r3, #1
 8008df2:	f003 031f 	and.w	r3, r3, #31
 8008df6:	2101      	movs	r1, #1
 8008df8:	fa01 f303 	lsl.w	r3, r1, r3
 8008dfc:	ea42 0103 	orr.w	r1, r2, r3
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d10d      	bne.n	8008e28 <HAL_ADC_ConfigChannel+0x670>
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	0e9b      	lsrs	r3, r3, #26
 8008e12:	3301      	adds	r3, #1
 8008e14:	f003 021f 	and.w	r2, r3, #31
 8008e18:	4613      	mov	r3, r2
 8008e1a:	005b      	lsls	r3, r3, #1
 8008e1c:	4413      	add	r3, r2
 8008e1e:	3b1e      	subs	r3, #30
 8008e20:	051b      	lsls	r3, r3, #20
 8008e22:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8008e26:	e01b      	b.n	8008e60 <HAL_ADC_ConfigChannel+0x6a8>
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e2e:	697b      	ldr	r3, [r7, #20]
 8008e30:	fa93 f3a3 	rbit	r3, r3
 8008e34:	613b      	str	r3, [r7, #16]
  return result;
 8008e36:	693b      	ldr	r3, [r7, #16]
 8008e38:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008e3a:	69bb      	ldr	r3, [r7, #24]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d101      	bne.n	8008e44 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8008e40:	2320      	movs	r3, #32
 8008e42:	e003      	b.n	8008e4c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8008e44:	69bb      	ldr	r3, [r7, #24]
 8008e46:	fab3 f383 	clz	r3, r3
 8008e4a:	b2db      	uxtb	r3, r3
 8008e4c:	3301      	adds	r3, #1
 8008e4e:	f003 021f 	and.w	r2, r3, #31
 8008e52:	4613      	mov	r3, r2
 8008e54:	005b      	lsls	r3, r3, #1
 8008e56:	4413      	add	r3, r2
 8008e58:	3b1e      	subs	r3, #30
 8008e5a:	051b      	lsls	r3, r3, #20
 8008e5c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008e60:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8008e62:	683a      	ldr	r2, [r7, #0]
 8008e64:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008e66:	4619      	mov	r1, r3
 8008e68:	f7ff f8c5 	bl	8007ff6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	681a      	ldr	r2, [r3, #0]
 8008e70:	4b09      	ldr	r3, [pc, #36]	@ (8008e98 <HAL_ADC_ConfigChannel+0x6e0>)
 8008e72:	4013      	ands	r3, r2
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	f000 80be 	beq.w	8008ff6 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008e82:	d004      	beq.n	8008e8e <HAL_ADC_ConfigChannel+0x6d6>
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	4a04      	ldr	r2, [pc, #16]	@ (8008e9c <HAL_ADC_ConfigChannel+0x6e4>)
 8008e8a:	4293      	cmp	r3, r2
 8008e8c:	d10a      	bne.n	8008ea4 <HAL_ADC_ConfigChannel+0x6ec>
 8008e8e:	4b04      	ldr	r3, [pc, #16]	@ (8008ea0 <HAL_ADC_ConfigChannel+0x6e8>)
 8008e90:	e009      	b.n	8008ea6 <HAL_ADC_ConfigChannel+0x6ee>
 8008e92:	bf00      	nop
 8008e94:	407f0000 	.word	0x407f0000
 8008e98:	80080000 	.word	0x80080000
 8008e9c:	50000100 	.word	0x50000100
 8008ea0:	50000300 	.word	0x50000300
 8008ea4:	4b59      	ldr	r3, [pc, #356]	@ (800900c <HAL_ADC_ConfigChannel+0x854>)
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	f7fe ffba 	bl	8007e20 <LL_ADC_GetCommonPathInternalCh>
 8008eac:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	4a56      	ldr	r2, [pc, #344]	@ (8009010 <HAL_ADC_ConfigChannel+0x858>)
 8008eb6:	4293      	cmp	r3, r2
 8008eb8:	d004      	beq.n	8008ec4 <HAL_ADC_ConfigChannel+0x70c>
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	4a55      	ldr	r2, [pc, #340]	@ (8009014 <HAL_ADC_ConfigChannel+0x85c>)
 8008ec0:	4293      	cmp	r3, r2
 8008ec2:	d13a      	bne.n	8008f3a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8008ec4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008ec8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d134      	bne.n	8008f3a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008ed8:	d005      	beq.n	8008ee6 <HAL_ADC_ConfigChannel+0x72e>
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	4a4e      	ldr	r2, [pc, #312]	@ (8009018 <HAL_ADC_ConfigChannel+0x860>)
 8008ee0:	4293      	cmp	r3, r2
 8008ee2:	f040 8085 	bne.w	8008ff0 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008eee:	d004      	beq.n	8008efa <HAL_ADC_ConfigChannel+0x742>
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	4a49      	ldr	r2, [pc, #292]	@ (800901c <HAL_ADC_ConfigChannel+0x864>)
 8008ef6:	4293      	cmp	r3, r2
 8008ef8:	d101      	bne.n	8008efe <HAL_ADC_ConfigChannel+0x746>
 8008efa:	4a49      	ldr	r2, [pc, #292]	@ (8009020 <HAL_ADC_ConfigChannel+0x868>)
 8008efc:	e000      	b.n	8008f00 <HAL_ADC_ConfigChannel+0x748>
 8008efe:	4a43      	ldr	r2, [pc, #268]	@ (800900c <HAL_ADC_ConfigChannel+0x854>)
 8008f00:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008f04:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008f08:	4619      	mov	r1, r3
 8008f0a:	4610      	mov	r0, r2
 8008f0c:	f7fe ff75 	bl	8007dfa <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8008f10:	4b44      	ldr	r3, [pc, #272]	@ (8009024 <HAL_ADC_ConfigChannel+0x86c>)
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	099b      	lsrs	r3, r3, #6
 8008f16:	4a44      	ldr	r2, [pc, #272]	@ (8009028 <HAL_ADC_ConfigChannel+0x870>)
 8008f18:	fba2 2303 	umull	r2, r3, r2, r3
 8008f1c:	099b      	lsrs	r3, r3, #6
 8008f1e:	1c5a      	adds	r2, r3, #1
 8008f20:	4613      	mov	r3, r2
 8008f22:	005b      	lsls	r3, r3, #1
 8008f24:	4413      	add	r3, r2
 8008f26:	009b      	lsls	r3, r3, #2
 8008f28:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8008f2a:	e002      	b.n	8008f32 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	3b01      	subs	r3, #1
 8008f30:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d1f9      	bne.n	8008f2c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008f38:	e05a      	b.n	8008ff0 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	4a3b      	ldr	r2, [pc, #236]	@ (800902c <HAL_ADC_ConfigChannel+0x874>)
 8008f40:	4293      	cmp	r3, r2
 8008f42:	d125      	bne.n	8008f90 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8008f44:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008f48:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d11f      	bne.n	8008f90 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	4a31      	ldr	r2, [pc, #196]	@ (800901c <HAL_ADC_ConfigChannel+0x864>)
 8008f56:	4293      	cmp	r3, r2
 8008f58:	d104      	bne.n	8008f64 <HAL_ADC_ConfigChannel+0x7ac>
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	4a34      	ldr	r2, [pc, #208]	@ (8009030 <HAL_ADC_ConfigChannel+0x878>)
 8008f60:	4293      	cmp	r3, r2
 8008f62:	d047      	beq.n	8008ff4 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008f6c:	d004      	beq.n	8008f78 <HAL_ADC_ConfigChannel+0x7c0>
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	4a2a      	ldr	r2, [pc, #168]	@ (800901c <HAL_ADC_ConfigChannel+0x864>)
 8008f74:	4293      	cmp	r3, r2
 8008f76:	d101      	bne.n	8008f7c <HAL_ADC_ConfigChannel+0x7c4>
 8008f78:	4a29      	ldr	r2, [pc, #164]	@ (8009020 <HAL_ADC_ConfigChannel+0x868>)
 8008f7a:	e000      	b.n	8008f7e <HAL_ADC_ConfigChannel+0x7c6>
 8008f7c:	4a23      	ldr	r2, [pc, #140]	@ (800900c <HAL_ADC_ConfigChannel+0x854>)
 8008f7e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008f82:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008f86:	4619      	mov	r1, r3
 8008f88:	4610      	mov	r0, r2
 8008f8a:	f7fe ff36 	bl	8007dfa <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008f8e:	e031      	b.n	8008ff4 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	4a27      	ldr	r2, [pc, #156]	@ (8009034 <HAL_ADC_ConfigChannel+0x87c>)
 8008f96:	4293      	cmp	r3, r2
 8008f98:	d12d      	bne.n	8008ff6 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8008f9a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008f9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d127      	bne.n	8008ff6 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	4a1c      	ldr	r2, [pc, #112]	@ (800901c <HAL_ADC_ConfigChannel+0x864>)
 8008fac:	4293      	cmp	r3, r2
 8008fae:	d022      	beq.n	8008ff6 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008fb8:	d004      	beq.n	8008fc4 <HAL_ADC_ConfigChannel+0x80c>
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	4a17      	ldr	r2, [pc, #92]	@ (800901c <HAL_ADC_ConfigChannel+0x864>)
 8008fc0:	4293      	cmp	r3, r2
 8008fc2:	d101      	bne.n	8008fc8 <HAL_ADC_ConfigChannel+0x810>
 8008fc4:	4a16      	ldr	r2, [pc, #88]	@ (8009020 <HAL_ADC_ConfigChannel+0x868>)
 8008fc6:	e000      	b.n	8008fca <HAL_ADC_ConfigChannel+0x812>
 8008fc8:	4a10      	ldr	r2, [pc, #64]	@ (800900c <HAL_ADC_ConfigChannel+0x854>)
 8008fca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008fce:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8008fd2:	4619      	mov	r1, r3
 8008fd4:	4610      	mov	r0, r2
 8008fd6:	f7fe ff10 	bl	8007dfa <LL_ADC_SetCommonPathInternalCh>
 8008fda:	e00c      	b.n	8008ff6 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008fe0:	f043 0220 	orr.w	r2, r3, #32
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8008fe8:	2301      	movs	r3, #1
 8008fea:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8008fee:	e002      	b.n	8008ff6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008ff0:	bf00      	nop
 8008ff2:	e000      	b.n	8008ff6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008ff4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8008ffe:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8009002:	4618      	mov	r0, r3
 8009004:	37d8      	adds	r7, #216	@ 0xd8
 8009006:	46bd      	mov	sp, r7
 8009008:	bd80      	pop	{r7, pc}
 800900a:	bf00      	nop
 800900c:	50000700 	.word	0x50000700
 8009010:	c3210000 	.word	0xc3210000
 8009014:	90c00010 	.word	0x90c00010
 8009018:	50000600 	.word	0x50000600
 800901c:	50000100 	.word	0x50000100
 8009020:	50000300 	.word	0x50000300
 8009024:	200000fc 	.word	0x200000fc
 8009028:	053e2d63 	.word	0x053e2d63
 800902c:	c7520000 	.word	0xc7520000
 8009030:	50000500 	.word	0x50000500
 8009034:	cb840000 	.word	0xcb840000

08009038 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b084      	sub	sp, #16
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8009040:	2300      	movs	r3, #0
 8009042:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	4618      	mov	r0, r3
 800904a:	f7ff f8a7 	bl	800819c <LL_ADC_IsEnabled>
 800904e:	4603      	mov	r3, r0
 8009050:	2b00      	cmp	r3, #0
 8009052:	d176      	bne.n	8009142 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	689a      	ldr	r2, [r3, #8]
 800905a:	4b3c      	ldr	r3, [pc, #240]	@ (800914c <ADC_Enable+0x114>)
 800905c:	4013      	ands	r3, r2
 800905e:	2b00      	cmp	r3, #0
 8009060:	d00d      	beq.n	800907e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009066:	f043 0210 	orr.w	r2, r3, #16
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009072:	f043 0201 	orr.w	r2, r3, #1
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800907a:	2301      	movs	r3, #1
 800907c:	e062      	b.n	8009144 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	4618      	mov	r0, r3
 8009084:	f7ff f862 	bl	800814c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009090:	d004      	beq.n	800909c <ADC_Enable+0x64>
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	4a2e      	ldr	r2, [pc, #184]	@ (8009150 <ADC_Enable+0x118>)
 8009098:	4293      	cmp	r3, r2
 800909a:	d101      	bne.n	80090a0 <ADC_Enable+0x68>
 800909c:	4b2d      	ldr	r3, [pc, #180]	@ (8009154 <ADC_Enable+0x11c>)
 800909e:	e000      	b.n	80090a2 <ADC_Enable+0x6a>
 80090a0:	4b2d      	ldr	r3, [pc, #180]	@ (8009158 <ADC_Enable+0x120>)
 80090a2:	4618      	mov	r0, r3
 80090a4:	f7fe febc 	bl	8007e20 <LL_ADC_GetCommonPathInternalCh>
 80090a8:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80090aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d013      	beq.n	80090da <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80090b2:	4b2a      	ldr	r3, [pc, #168]	@ (800915c <ADC_Enable+0x124>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	099b      	lsrs	r3, r3, #6
 80090b8:	4a29      	ldr	r2, [pc, #164]	@ (8009160 <ADC_Enable+0x128>)
 80090ba:	fba2 2303 	umull	r2, r3, r2, r3
 80090be:	099b      	lsrs	r3, r3, #6
 80090c0:	1c5a      	adds	r2, r3, #1
 80090c2:	4613      	mov	r3, r2
 80090c4:	005b      	lsls	r3, r3, #1
 80090c6:	4413      	add	r3, r2
 80090c8:	009b      	lsls	r3, r3, #2
 80090ca:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80090cc:	e002      	b.n	80090d4 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 80090ce:	68bb      	ldr	r3, [r7, #8]
 80090d0:	3b01      	subs	r3, #1
 80090d2:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80090d4:	68bb      	ldr	r3, [r7, #8]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d1f9      	bne.n	80090ce <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80090da:	f7fe fe6f 	bl	8007dbc <HAL_GetTick>
 80090de:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80090e0:	e028      	b.n	8009134 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	4618      	mov	r0, r3
 80090e8:	f7ff f858 	bl	800819c <LL_ADC_IsEnabled>
 80090ec:	4603      	mov	r3, r0
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d104      	bne.n	80090fc <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	4618      	mov	r0, r3
 80090f8:	f7ff f828 	bl	800814c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80090fc:	f7fe fe5e 	bl	8007dbc <HAL_GetTick>
 8009100:	4602      	mov	r2, r0
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	1ad3      	subs	r3, r2, r3
 8009106:	2b02      	cmp	r3, #2
 8009108:	d914      	bls.n	8009134 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	f003 0301 	and.w	r3, r3, #1
 8009114:	2b01      	cmp	r3, #1
 8009116:	d00d      	beq.n	8009134 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800911c:	f043 0210 	orr.w	r2, r3, #16
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009128:	f043 0201 	orr.w	r2, r3, #1
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8009130:	2301      	movs	r3, #1
 8009132:	e007      	b.n	8009144 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	f003 0301 	and.w	r3, r3, #1
 800913e:	2b01      	cmp	r3, #1
 8009140:	d1cf      	bne.n	80090e2 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8009142:	2300      	movs	r3, #0
}
 8009144:	4618      	mov	r0, r3
 8009146:	3710      	adds	r7, #16
 8009148:	46bd      	mov	sp, r7
 800914a:	bd80      	pop	{r7, pc}
 800914c:	8000003f 	.word	0x8000003f
 8009150:	50000100 	.word	0x50000100
 8009154:	50000300 	.word	0x50000300
 8009158:	50000700 	.word	0x50000700
 800915c:	200000fc 	.word	0x200000fc
 8009160:	053e2d63 	.word	0x053e2d63

08009164 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b084      	sub	sp, #16
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	4618      	mov	r0, r3
 8009172:	f7ff f826 	bl	80081c2 <LL_ADC_IsDisableOngoing>
 8009176:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	4618      	mov	r0, r3
 800917e:	f7ff f80d 	bl	800819c <LL_ADC_IsEnabled>
 8009182:	4603      	mov	r3, r0
 8009184:	2b00      	cmp	r3, #0
 8009186:	d047      	beq.n	8009218 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d144      	bne.n	8009218 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	689b      	ldr	r3, [r3, #8]
 8009194:	f003 030d 	and.w	r3, r3, #13
 8009198:	2b01      	cmp	r3, #1
 800919a:	d10c      	bne.n	80091b6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	4618      	mov	r0, r3
 80091a2:	f7fe ffe7 	bl	8008174 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	2203      	movs	r2, #3
 80091ac:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80091ae:	f7fe fe05 	bl	8007dbc <HAL_GetTick>
 80091b2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80091b4:	e029      	b.n	800920a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80091ba:	f043 0210 	orr.w	r2, r3, #16
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80091c6:	f043 0201 	orr.w	r2, r3, #1
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 80091ce:	2301      	movs	r3, #1
 80091d0:	e023      	b.n	800921a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80091d2:	f7fe fdf3 	bl	8007dbc <HAL_GetTick>
 80091d6:	4602      	mov	r2, r0
 80091d8:	68bb      	ldr	r3, [r7, #8]
 80091da:	1ad3      	subs	r3, r2, r3
 80091dc:	2b02      	cmp	r3, #2
 80091de:	d914      	bls.n	800920a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	689b      	ldr	r3, [r3, #8]
 80091e6:	f003 0301 	and.w	r3, r3, #1
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d00d      	beq.n	800920a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80091f2:	f043 0210 	orr.w	r2, r3, #16
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80091fe:	f043 0201 	orr.w	r2, r3, #1
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8009206:	2301      	movs	r3, #1
 8009208:	e007      	b.n	800921a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	689b      	ldr	r3, [r3, #8]
 8009210:	f003 0301 	and.w	r3, r3, #1
 8009214:	2b00      	cmp	r3, #0
 8009216:	d1dc      	bne.n	80091d2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8009218:	2300      	movs	r3, #0
}
 800921a:	4618      	mov	r0, r3
 800921c:	3710      	adds	r7, #16
 800921e:	46bd      	mov	sp, r7
 8009220:	bd80      	pop	{r7, pc}

08009222 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8009222:	b580      	push	{r7, lr}
 8009224:	b084      	sub	sp, #16
 8009226:	af00      	add	r7, sp, #0
 8009228:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800922e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009234:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009238:	2b00      	cmp	r3, #0
 800923a:	d14b      	bne.n	80092d4 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009240:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	f003 0308 	and.w	r3, r3, #8
 8009252:	2b00      	cmp	r3, #0
 8009254:	d021      	beq.n	800929a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	4618      	mov	r0, r3
 800925c:	f7fe fe8c 	bl	8007f78 <LL_ADC_REG_IsTriggerSourceSWStart>
 8009260:	4603      	mov	r3, r0
 8009262:	2b00      	cmp	r3, #0
 8009264:	d032      	beq.n	80092cc <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	68db      	ldr	r3, [r3, #12]
 800926c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009270:	2b00      	cmp	r3, #0
 8009272:	d12b      	bne.n	80092cc <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009278:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009284:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009288:	2b00      	cmp	r3, #0
 800928a:	d11f      	bne.n	80092cc <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009290:	f043 0201 	orr.w	r2, r3, #1
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	65da      	str	r2, [r3, #92]	@ 0x5c
 8009298:	e018      	b.n	80092cc <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	68db      	ldr	r3, [r3, #12]
 80092a0:	f003 0302 	and.w	r3, r3, #2
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d111      	bne.n	80092cc <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80092ac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80092b8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d105      	bne.n	80092cc <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80092c4:	f043 0201 	orr.w	r2, r3, #1
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80092cc:	68f8      	ldr	r0, [r7, #12]
 80092ce:	f7ff fa55 	bl	800877c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80092d2:	e00e      	b.n	80092f2 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80092d8:	f003 0310 	and.w	r3, r3, #16
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d003      	beq.n	80092e8 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80092e0:	68f8      	ldr	r0, [r7, #12]
 80092e2:	f7ff fa5f 	bl	80087a4 <HAL_ADC_ErrorCallback>
}
 80092e6:	e004      	b.n	80092f2 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80092ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80092ee:	6878      	ldr	r0, [r7, #4]
 80092f0:	4798      	blx	r3
}
 80092f2:	bf00      	nop
 80092f4:	3710      	adds	r7, #16
 80092f6:	46bd      	mov	sp, r7
 80092f8:	bd80      	pop	{r7, pc}

080092fa <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80092fa:	b580      	push	{r7, lr}
 80092fc:	b084      	sub	sp, #16
 80092fe:	af00      	add	r7, sp, #0
 8009300:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009306:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8009308:	68f8      	ldr	r0, [r7, #12]
 800930a:	f7ff fa41 	bl	8008790 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800930e:	bf00      	nop
 8009310:	3710      	adds	r7, #16
 8009312:	46bd      	mov	sp, r7
 8009314:	bd80      	pop	{r7, pc}

08009316 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8009316:	b580      	push	{r7, lr}
 8009318:	b084      	sub	sp, #16
 800931a:	af00      	add	r7, sp, #0
 800931c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009322:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009328:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009334:	f043 0204 	orr.w	r2, r3, #4
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800933c:	68f8      	ldr	r0, [r7, #12]
 800933e:	f7ff fa31 	bl	80087a4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8009342:	bf00      	nop
 8009344:	3710      	adds	r7, #16
 8009346:	46bd      	mov	sp, r7
 8009348:	bd80      	pop	{r7, pc}

0800934a <LL_ADC_IsEnabled>:
{
 800934a:	b480      	push	{r7}
 800934c:	b083      	sub	sp, #12
 800934e:	af00      	add	r7, sp, #0
 8009350:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	689b      	ldr	r3, [r3, #8]
 8009356:	f003 0301 	and.w	r3, r3, #1
 800935a:	2b01      	cmp	r3, #1
 800935c:	d101      	bne.n	8009362 <LL_ADC_IsEnabled+0x18>
 800935e:	2301      	movs	r3, #1
 8009360:	e000      	b.n	8009364 <LL_ADC_IsEnabled+0x1a>
 8009362:	2300      	movs	r3, #0
}
 8009364:	4618      	mov	r0, r3
 8009366:	370c      	adds	r7, #12
 8009368:	46bd      	mov	sp, r7
 800936a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936e:	4770      	bx	lr

08009370 <LL_ADC_StartCalibration>:
{
 8009370:	b480      	push	{r7}
 8009372:	b083      	sub	sp, #12
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
 8009378:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	689b      	ldr	r3, [r3, #8]
 800937e:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8009382:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8009386:	683a      	ldr	r2, [r7, #0]
 8009388:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800938c:	4313      	orrs	r3, r2
 800938e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	609a      	str	r2, [r3, #8]
}
 8009396:	bf00      	nop
 8009398:	370c      	adds	r7, #12
 800939a:	46bd      	mov	sp, r7
 800939c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a0:	4770      	bx	lr

080093a2 <LL_ADC_IsCalibrationOnGoing>:
{
 80093a2:	b480      	push	{r7}
 80093a4:	b083      	sub	sp, #12
 80093a6:	af00      	add	r7, sp, #0
 80093a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	689b      	ldr	r3, [r3, #8]
 80093ae:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80093b2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80093b6:	d101      	bne.n	80093bc <LL_ADC_IsCalibrationOnGoing+0x1a>
 80093b8:	2301      	movs	r3, #1
 80093ba:	e000      	b.n	80093be <LL_ADC_IsCalibrationOnGoing+0x1c>
 80093bc:	2300      	movs	r3, #0
}
 80093be:	4618      	mov	r0, r3
 80093c0:	370c      	adds	r7, #12
 80093c2:	46bd      	mov	sp, r7
 80093c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c8:	4770      	bx	lr

080093ca <LL_ADC_REG_IsConversionOngoing>:
{
 80093ca:	b480      	push	{r7}
 80093cc:	b083      	sub	sp, #12
 80093ce:	af00      	add	r7, sp, #0
 80093d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	689b      	ldr	r3, [r3, #8]
 80093d6:	f003 0304 	and.w	r3, r3, #4
 80093da:	2b04      	cmp	r3, #4
 80093dc:	d101      	bne.n	80093e2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80093de:	2301      	movs	r3, #1
 80093e0:	e000      	b.n	80093e4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80093e2:	2300      	movs	r3, #0
}
 80093e4:	4618      	mov	r0, r3
 80093e6:	370c      	adds	r7, #12
 80093e8:	46bd      	mov	sp, r7
 80093ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ee:	4770      	bx	lr

080093f0 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b084      	sub	sp, #16
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
 80093f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80093fa:	2300      	movs	r3, #0
 80093fc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8009404:	2b01      	cmp	r3, #1
 8009406:	d101      	bne.n	800940c <HAL_ADCEx_Calibration_Start+0x1c>
 8009408:	2302      	movs	r3, #2
 800940a:	e04d      	b.n	80094a8 <HAL_ADCEx_Calibration_Start+0xb8>
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2201      	movs	r2, #1
 8009410:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8009414:	6878      	ldr	r0, [r7, #4]
 8009416:	f7ff fea5 	bl	8009164 <ADC_Disable>
 800941a:	4603      	mov	r3, r0
 800941c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800941e:	7bfb      	ldrb	r3, [r7, #15]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d136      	bne.n	8009492 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009428:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800942c:	f023 0302 	bic.w	r3, r3, #2
 8009430:	f043 0202 	orr.w	r2, r3, #2
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	6839      	ldr	r1, [r7, #0]
 800943e:	4618      	mov	r0, r3
 8009440:	f7ff ff96 	bl	8009370 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8009444:	e014      	b.n	8009470 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8009446:	68bb      	ldr	r3, [r7, #8]
 8009448:	3301      	adds	r3, #1
 800944a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800944c:	68bb      	ldr	r3, [r7, #8]
 800944e:	4a18      	ldr	r2, [pc, #96]	@ (80094b0 <HAL_ADCEx_Calibration_Start+0xc0>)
 8009450:	4293      	cmp	r3, r2
 8009452:	d90d      	bls.n	8009470 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009458:	f023 0312 	bic.w	r3, r3, #18
 800945c:	f043 0210 	orr.w	r2, r3, #16
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2200      	movs	r2, #0
 8009468:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 800946c:	2301      	movs	r3, #1
 800946e:	e01b      	b.n	80094a8 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	4618      	mov	r0, r3
 8009476:	f7ff ff94 	bl	80093a2 <LL_ADC_IsCalibrationOnGoing>
 800947a:	4603      	mov	r3, r0
 800947c:	2b00      	cmp	r3, #0
 800947e:	d1e2      	bne.n	8009446 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009484:	f023 0303 	bic.w	r3, r3, #3
 8009488:	f043 0201 	orr.w	r2, r3, #1
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8009490:	e005      	b.n	800949e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009496:	f043 0210 	orr.w	r2, r3, #16
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	2200      	movs	r2, #0
 80094a2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80094a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80094a8:	4618      	mov	r0, r3
 80094aa:	3710      	adds	r7, #16
 80094ac:	46bd      	mov	sp, r7
 80094ae:	bd80      	pop	{r7, pc}
 80094b0:	0004de01 	.word	0x0004de01

080094b4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80094b4:	b590      	push	{r4, r7, lr}
 80094b6:	b0a1      	sub	sp, #132	@ 0x84
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
 80094bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80094be:	2300      	movs	r3, #0
 80094c0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80094ca:	2b01      	cmp	r3, #1
 80094cc:	d101      	bne.n	80094d2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80094ce:	2302      	movs	r3, #2
 80094d0:	e0e7      	b.n	80096a2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	2201      	movs	r2, #1
 80094d6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80094da:	2300      	movs	r3, #0
 80094dc:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80094de:	2300      	movs	r3, #0
 80094e0:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80094ea:	d102      	bne.n	80094f2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80094ec:	4b6f      	ldr	r3, [pc, #444]	@ (80096ac <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80094ee:	60bb      	str	r3, [r7, #8]
 80094f0:	e009      	b.n	8009506 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	4a6e      	ldr	r2, [pc, #440]	@ (80096b0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80094f8:	4293      	cmp	r3, r2
 80094fa:	d102      	bne.n	8009502 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80094fc:	4b6d      	ldr	r3, [pc, #436]	@ (80096b4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80094fe:	60bb      	str	r3, [r7, #8]
 8009500:	e001      	b.n	8009506 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8009502:	2300      	movs	r3, #0
 8009504:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8009506:	68bb      	ldr	r3, [r7, #8]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d10b      	bne.n	8009524 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009510:	f043 0220 	orr.w	r2, r3, #32
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2200      	movs	r2, #0
 800951c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8009520:	2301      	movs	r3, #1
 8009522:	e0be      	b.n	80096a2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8009524:	68bb      	ldr	r3, [r7, #8]
 8009526:	4618      	mov	r0, r3
 8009528:	f7ff ff4f 	bl	80093ca <LL_ADC_REG_IsConversionOngoing>
 800952c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	4618      	mov	r0, r3
 8009534:	f7ff ff49 	bl	80093ca <LL_ADC_REG_IsConversionOngoing>
 8009538:	4603      	mov	r3, r0
 800953a:	2b00      	cmp	r3, #0
 800953c:	f040 80a0 	bne.w	8009680 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8009540:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009542:	2b00      	cmp	r3, #0
 8009544:	f040 809c 	bne.w	8009680 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009550:	d004      	beq.n	800955c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	4a55      	ldr	r2, [pc, #340]	@ (80096ac <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8009558:	4293      	cmp	r3, r2
 800955a:	d101      	bne.n	8009560 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800955c:	4b56      	ldr	r3, [pc, #344]	@ (80096b8 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800955e:	e000      	b.n	8009562 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8009560:	4b56      	ldr	r3, [pc, #344]	@ (80096bc <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8009562:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d04b      	beq.n	8009604 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800956c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800956e:	689b      	ldr	r3, [r3, #8]
 8009570:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	6859      	ldr	r1, [r3, #4]
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800957e:	035b      	lsls	r3, r3, #13
 8009580:	430b      	orrs	r3, r1
 8009582:	431a      	orrs	r2, r3
 8009584:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009586:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009590:	d004      	beq.n	800959c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	4a45      	ldr	r2, [pc, #276]	@ (80096ac <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8009598:	4293      	cmp	r3, r2
 800959a:	d10f      	bne.n	80095bc <HAL_ADCEx_MultiModeConfigChannel+0x108>
 800959c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80095a0:	f7ff fed3 	bl	800934a <LL_ADC_IsEnabled>
 80095a4:	4604      	mov	r4, r0
 80095a6:	4841      	ldr	r0, [pc, #260]	@ (80096ac <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80095a8:	f7ff fecf 	bl	800934a <LL_ADC_IsEnabled>
 80095ac:	4603      	mov	r3, r0
 80095ae:	4323      	orrs	r3, r4
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	bf0c      	ite	eq
 80095b4:	2301      	moveq	r3, #1
 80095b6:	2300      	movne	r3, #0
 80095b8:	b2db      	uxtb	r3, r3
 80095ba:	e012      	b.n	80095e2 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80095bc:	483c      	ldr	r0, [pc, #240]	@ (80096b0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80095be:	f7ff fec4 	bl	800934a <LL_ADC_IsEnabled>
 80095c2:	4604      	mov	r4, r0
 80095c4:	483b      	ldr	r0, [pc, #236]	@ (80096b4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80095c6:	f7ff fec0 	bl	800934a <LL_ADC_IsEnabled>
 80095ca:	4603      	mov	r3, r0
 80095cc:	431c      	orrs	r4, r3
 80095ce:	483c      	ldr	r0, [pc, #240]	@ (80096c0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80095d0:	f7ff febb 	bl	800934a <LL_ADC_IsEnabled>
 80095d4:	4603      	mov	r3, r0
 80095d6:	4323      	orrs	r3, r4
 80095d8:	2b00      	cmp	r3, #0
 80095da:	bf0c      	ite	eq
 80095dc:	2301      	moveq	r3, #1
 80095de:	2300      	movne	r3, #0
 80095e0:	b2db      	uxtb	r3, r3
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d056      	beq.n	8009694 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80095e6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80095e8:	689b      	ldr	r3, [r3, #8]
 80095ea:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80095ee:	f023 030f 	bic.w	r3, r3, #15
 80095f2:	683a      	ldr	r2, [r7, #0]
 80095f4:	6811      	ldr	r1, [r2, #0]
 80095f6:	683a      	ldr	r2, [r7, #0]
 80095f8:	6892      	ldr	r2, [r2, #8]
 80095fa:	430a      	orrs	r2, r1
 80095fc:	431a      	orrs	r2, r3
 80095fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009600:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8009602:	e047      	b.n	8009694 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8009604:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009606:	689b      	ldr	r3, [r3, #8]
 8009608:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800960c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800960e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009618:	d004      	beq.n	8009624 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	4a23      	ldr	r2, [pc, #140]	@ (80096ac <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8009620:	4293      	cmp	r3, r2
 8009622:	d10f      	bne.n	8009644 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8009624:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8009628:	f7ff fe8f 	bl	800934a <LL_ADC_IsEnabled>
 800962c:	4604      	mov	r4, r0
 800962e:	481f      	ldr	r0, [pc, #124]	@ (80096ac <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8009630:	f7ff fe8b 	bl	800934a <LL_ADC_IsEnabled>
 8009634:	4603      	mov	r3, r0
 8009636:	4323      	orrs	r3, r4
 8009638:	2b00      	cmp	r3, #0
 800963a:	bf0c      	ite	eq
 800963c:	2301      	moveq	r3, #1
 800963e:	2300      	movne	r3, #0
 8009640:	b2db      	uxtb	r3, r3
 8009642:	e012      	b.n	800966a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8009644:	481a      	ldr	r0, [pc, #104]	@ (80096b0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8009646:	f7ff fe80 	bl	800934a <LL_ADC_IsEnabled>
 800964a:	4604      	mov	r4, r0
 800964c:	4819      	ldr	r0, [pc, #100]	@ (80096b4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800964e:	f7ff fe7c 	bl	800934a <LL_ADC_IsEnabled>
 8009652:	4603      	mov	r3, r0
 8009654:	431c      	orrs	r4, r3
 8009656:	481a      	ldr	r0, [pc, #104]	@ (80096c0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8009658:	f7ff fe77 	bl	800934a <LL_ADC_IsEnabled>
 800965c:	4603      	mov	r3, r0
 800965e:	4323      	orrs	r3, r4
 8009660:	2b00      	cmp	r3, #0
 8009662:	bf0c      	ite	eq
 8009664:	2301      	moveq	r3, #1
 8009666:	2300      	movne	r3, #0
 8009668:	b2db      	uxtb	r3, r3
 800966a:	2b00      	cmp	r3, #0
 800966c:	d012      	beq.n	8009694 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800966e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009670:	689b      	ldr	r3, [r3, #8]
 8009672:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8009676:	f023 030f 	bic.w	r3, r3, #15
 800967a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800967c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800967e:	e009      	b.n	8009694 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009684:	f043 0220 	orr.w	r2, r3, #32
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800968c:	2301      	movs	r3, #1
 800968e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8009692:	e000      	b.n	8009696 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8009694:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	2200      	movs	r2, #0
 800969a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800969e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80096a2:	4618      	mov	r0, r3
 80096a4:	3784      	adds	r7, #132	@ 0x84
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bd90      	pop	{r4, r7, pc}
 80096aa:	bf00      	nop
 80096ac:	50000100 	.word	0x50000100
 80096b0:	50000400 	.word	0x50000400
 80096b4:	50000500 	.word	0x50000500
 80096b8:	50000300 	.word	0x50000300
 80096bc:	50000700 	.word	0x50000700
 80096c0:	50000600 	.word	0x50000600

080096c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80096c4:	b480      	push	{r7}
 80096c6:	b085      	sub	sp, #20
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	f003 0307 	and.w	r3, r3, #7
 80096d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80096d4:	4b0c      	ldr	r3, [pc, #48]	@ (8009708 <__NVIC_SetPriorityGrouping+0x44>)
 80096d6:	68db      	ldr	r3, [r3, #12]
 80096d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80096da:	68ba      	ldr	r2, [r7, #8]
 80096dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80096e0:	4013      	ands	r3, r2
 80096e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80096e8:	68bb      	ldr	r3, [r7, #8]
 80096ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80096ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80096f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80096f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80096f6:	4a04      	ldr	r2, [pc, #16]	@ (8009708 <__NVIC_SetPriorityGrouping+0x44>)
 80096f8:	68bb      	ldr	r3, [r7, #8]
 80096fa:	60d3      	str	r3, [r2, #12]
}
 80096fc:	bf00      	nop
 80096fe:	3714      	adds	r7, #20
 8009700:	46bd      	mov	sp, r7
 8009702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009706:	4770      	bx	lr
 8009708:	e000ed00 	.word	0xe000ed00

0800970c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800970c:	b480      	push	{r7}
 800970e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009710:	4b04      	ldr	r3, [pc, #16]	@ (8009724 <__NVIC_GetPriorityGrouping+0x18>)
 8009712:	68db      	ldr	r3, [r3, #12]
 8009714:	0a1b      	lsrs	r3, r3, #8
 8009716:	f003 0307 	and.w	r3, r3, #7
}
 800971a:	4618      	mov	r0, r3
 800971c:	46bd      	mov	sp, r7
 800971e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009722:	4770      	bx	lr
 8009724:	e000ed00 	.word	0xe000ed00

08009728 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009728:	b480      	push	{r7}
 800972a:	b083      	sub	sp, #12
 800972c:	af00      	add	r7, sp, #0
 800972e:	4603      	mov	r3, r0
 8009730:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009736:	2b00      	cmp	r3, #0
 8009738:	db0b      	blt.n	8009752 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800973a:	79fb      	ldrb	r3, [r7, #7]
 800973c:	f003 021f 	and.w	r2, r3, #31
 8009740:	4907      	ldr	r1, [pc, #28]	@ (8009760 <__NVIC_EnableIRQ+0x38>)
 8009742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009746:	095b      	lsrs	r3, r3, #5
 8009748:	2001      	movs	r0, #1
 800974a:	fa00 f202 	lsl.w	r2, r0, r2
 800974e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8009752:	bf00      	nop
 8009754:	370c      	adds	r7, #12
 8009756:	46bd      	mov	sp, r7
 8009758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975c:	4770      	bx	lr
 800975e:	bf00      	nop
 8009760:	e000e100 	.word	0xe000e100

08009764 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009764:	b480      	push	{r7}
 8009766:	b083      	sub	sp, #12
 8009768:	af00      	add	r7, sp, #0
 800976a:	4603      	mov	r3, r0
 800976c:	6039      	str	r1, [r7, #0]
 800976e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009770:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009774:	2b00      	cmp	r3, #0
 8009776:	db0a      	blt.n	800978e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	b2da      	uxtb	r2, r3
 800977c:	490c      	ldr	r1, [pc, #48]	@ (80097b0 <__NVIC_SetPriority+0x4c>)
 800977e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009782:	0112      	lsls	r2, r2, #4
 8009784:	b2d2      	uxtb	r2, r2
 8009786:	440b      	add	r3, r1
 8009788:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800978c:	e00a      	b.n	80097a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	b2da      	uxtb	r2, r3
 8009792:	4908      	ldr	r1, [pc, #32]	@ (80097b4 <__NVIC_SetPriority+0x50>)
 8009794:	79fb      	ldrb	r3, [r7, #7]
 8009796:	f003 030f 	and.w	r3, r3, #15
 800979a:	3b04      	subs	r3, #4
 800979c:	0112      	lsls	r2, r2, #4
 800979e:	b2d2      	uxtb	r2, r2
 80097a0:	440b      	add	r3, r1
 80097a2:	761a      	strb	r2, [r3, #24]
}
 80097a4:	bf00      	nop
 80097a6:	370c      	adds	r7, #12
 80097a8:	46bd      	mov	sp, r7
 80097aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ae:	4770      	bx	lr
 80097b0:	e000e100 	.word	0xe000e100
 80097b4:	e000ed00 	.word	0xe000ed00

080097b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80097b8:	b480      	push	{r7}
 80097ba:	b089      	sub	sp, #36	@ 0x24
 80097bc:	af00      	add	r7, sp, #0
 80097be:	60f8      	str	r0, [r7, #12]
 80097c0:	60b9      	str	r1, [r7, #8]
 80097c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	f003 0307 	and.w	r3, r3, #7
 80097ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80097cc:	69fb      	ldr	r3, [r7, #28]
 80097ce:	f1c3 0307 	rsb	r3, r3, #7
 80097d2:	2b04      	cmp	r3, #4
 80097d4:	bf28      	it	cs
 80097d6:	2304      	movcs	r3, #4
 80097d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80097da:	69fb      	ldr	r3, [r7, #28]
 80097dc:	3304      	adds	r3, #4
 80097de:	2b06      	cmp	r3, #6
 80097e0:	d902      	bls.n	80097e8 <NVIC_EncodePriority+0x30>
 80097e2:	69fb      	ldr	r3, [r7, #28]
 80097e4:	3b03      	subs	r3, #3
 80097e6:	e000      	b.n	80097ea <NVIC_EncodePriority+0x32>
 80097e8:	2300      	movs	r3, #0
 80097ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80097ec:	f04f 32ff 	mov.w	r2, #4294967295
 80097f0:	69bb      	ldr	r3, [r7, #24]
 80097f2:	fa02 f303 	lsl.w	r3, r2, r3
 80097f6:	43da      	mvns	r2, r3
 80097f8:	68bb      	ldr	r3, [r7, #8]
 80097fa:	401a      	ands	r2, r3
 80097fc:	697b      	ldr	r3, [r7, #20]
 80097fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009800:	f04f 31ff 	mov.w	r1, #4294967295
 8009804:	697b      	ldr	r3, [r7, #20]
 8009806:	fa01 f303 	lsl.w	r3, r1, r3
 800980a:	43d9      	mvns	r1, r3
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009810:	4313      	orrs	r3, r2
         );
}
 8009812:	4618      	mov	r0, r3
 8009814:	3724      	adds	r7, #36	@ 0x24
 8009816:	46bd      	mov	sp, r7
 8009818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981c:	4770      	bx	lr
	...

08009820 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b082      	sub	sp, #8
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	3b01      	subs	r3, #1
 800982c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009830:	d301      	bcc.n	8009836 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009832:	2301      	movs	r3, #1
 8009834:	e00f      	b.n	8009856 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009836:	4a0a      	ldr	r2, [pc, #40]	@ (8009860 <SysTick_Config+0x40>)
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	3b01      	subs	r3, #1
 800983c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800983e:	210f      	movs	r1, #15
 8009840:	f04f 30ff 	mov.w	r0, #4294967295
 8009844:	f7ff ff8e 	bl	8009764 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009848:	4b05      	ldr	r3, [pc, #20]	@ (8009860 <SysTick_Config+0x40>)
 800984a:	2200      	movs	r2, #0
 800984c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800984e:	4b04      	ldr	r3, [pc, #16]	@ (8009860 <SysTick_Config+0x40>)
 8009850:	2207      	movs	r2, #7
 8009852:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009854:	2300      	movs	r3, #0
}
 8009856:	4618      	mov	r0, r3
 8009858:	3708      	adds	r7, #8
 800985a:	46bd      	mov	sp, r7
 800985c:	bd80      	pop	{r7, pc}
 800985e:	bf00      	nop
 8009860:	e000e010 	.word	0xe000e010

08009864 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b082      	sub	sp, #8
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800986c:	6878      	ldr	r0, [r7, #4]
 800986e:	f7ff ff29 	bl	80096c4 <__NVIC_SetPriorityGrouping>
}
 8009872:	bf00      	nop
 8009874:	3708      	adds	r7, #8
 8009876:	46bd      	mov	sp, r7
 8009878:	bd80      	pop	{r7, pc}

0800987a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800987a:	b580      	push	{r7, lr}
 800987c:	b086      	sub	sp, #24
 800987e:	af00      	add	r7, sp, #0
 8009880:	4603      	mov	r3, r0
 8009882:	60b9      	str	r1, [r7, #8]
 8009884:	607a      	str	r2, [r7, #4]
 8009886:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8009888:	f7ff ff40 	bl	800970c <__NVIC_GetPriorityGrouping>
 800988c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800988e:	687a      	ldr	r2, [r7, #4]
 8009890:	68b9      	ldr	r1, [r7, #8]
 8009892:	6978      	ldr	r0, [r7, #20]
 8009894:	f7ff ff90 	bl	80097b8 <NVIC_EncodePriority>
 8009898:	4602      	mov	r2, r0
 800989a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800989e:	4611      	mov	r1, r2
 80098a0:	4618      	mov	r0, r3
 80098a2:	f7ff ff5f 	bl	8009764 <__NVIC_SetPriority>
}
 80098a6:	bf00      	nop
 80098a8:	3718      	adds	r7, #24
 80098aa:	46bd      	mov	sp, r7
 80098ac:	bd80      	pop	{r7, pc}

080098ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80098ae:	b580      	push	{r7, lr}
 80098b0:	b082      	sub	sp, #8
 80098b2:	af00      	add	r7, sp, #0
 80098b4:	4603      	mov	r3, r0
 80098b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80098b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80098bc:	4618      	mov	r0, r3
 80098be:	f7ff ff33 	bl	8009728 <__NVIC_EnableIRQ>
}
 80098c2:	bf00      	nop
 80098c4:	3708      	adds	r7, #8
 80098c6:	46bd      	mov	sp, r7
 80098c8:	bd80      	pop	{r7, pc}

080098ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80098ca:	b580      	push	{r7, lr}
 80098cc:	b082      	sub	sp, #8
 80098ce:	af00      	add	r7, sp, #0
 80098d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80098d2:	6878      	ldr	r0, [r7, #4]
 80098d4:	f7ff ffa4 	bl	8009820 <SysTick_Config>
 80098d8:	4603      	mov	r3, r0
}
 80098da:	4618      	mov	r0, r3
 80098dc:	3708      	adds	r7, #8
 80098de:	46bd      	mov	sp, r7
 80098e0:	bd80      	pop	{r7, pc}
	...

080098e4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b084      	sub	sp, #16
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d101      	bne.n	80098f6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80098f2:	2301      	movs	r3, #1
 80098f4:	e08d      	b.n	8009a12 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	461a      	mov	r2, r3
 80098fc:	4b47      	ldr	r3, [pc, #284]	@ (8009a1c <HAL_DMA_Init+0x138>)
 80098fe:	429a      	cmp	r2, r3
 8009900:	d80f      	bhi.n	8009922 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	461a      	mov	r2, r3
 8009908:	4b45      	ldr	r3, [pc, #276]	@ (8009a20 <HAL_DMA_Init+0x13c>)
 800990a:	4413      	add	r3, r2
 800990c:	4a45      	ldr	r2, [pc, #276]	@ (8009a24 <HAL_DMA_Init+0x140>)
 800990e:	fba2 2303 	umull	r2, r3, r2, r3
 8009912:	091b      	lsrs	r3, r3, #4
 8009914:	009a      	lsls	r2, r3, #2
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	4a42      	ldr	r2, [pc, #264]	@ (8009a28 <HAL_DMA_Init+0x144>)
 800991e:	641a      	str	r2, [r3, #64]	@ 0x40
 8009920:	e00e      	b.n	8009940 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	461a      	mov	r2, r3
 8009928:	4b40      	ldr	r3, [pc, #256]	@ (8009a2c <HAL_DMA_Init+0x148>)
 800992a:	4413      	add	r3, r2
 800992c:	4a3d      	ldr	r2, [pc, #244]	@ (8009a24 <HAL_DMA_Init+0x140>)
 800992e:	fba2 2303 	umull	r2, r3, r2, r3
 8009932:	091b      	lsrs	r3, r3, #4
 8009934:	009a      	lsls	r2, r3, #2
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	4a3c      	ldr	r2, [pc, #240]	@ (8009a30 <HAL_DMA_Init+0x14c>)
 800993e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	2202      	movs	r2, #2
 8009944:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8009956:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800995a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8009964:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	691b      	ldr	r3, [r3, #16]
 800996a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009970:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	699b      	ldr	r3, [r3, #24]
 8009976:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800997c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	6a1b      	ldr	r3, [r3, #32]
 8009982:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8009984:	68fa      	ldr	r2, [r7, #12]
 8009986:	4313      	orrs	r3, r2
 8009988:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	68fa      	ldr	r2, [r7, #12]
 8009990:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8009992:	6878      	ldr	r0, [r7, #4]
 8009994:	f000 fa76 	bl	8009e84 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	689b      	ldr	r3, [r3, #8]
 800999c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80099a0:	d102      	bne.n	80099a8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	2200      	movs	r2, #0
 80099a6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	685a      	ldr	r2, [r3, #4]
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80099b0:	b2d2      	uxtb	r2, r2
 80099b2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80099b8:	687a      	ldr	r2, [r7, #4]
 80099ba:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80099bc:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	685b      	ldr	r3, [r3, #4]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d010      	beq.n	80099e8 <HAL_DMA_Init+0x104>
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	685b      	ldr	r3, [r3, #4]
 80099ca:	2b04      	cmp	r3, #4
 80099cc:	d80c      	bhi.n	80099e8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80099ce:	6878      	ldr	r0, [r7, #4]
 80099d0:	f000 fa96 	bl	8009f00 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80099d8:	2200      	movs	r2, #0
 80099da:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80099e0:	687a      	ldr	r2, [r7, #4]
 80099e2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80099e4:	605a      	str	r2, [r3, #4]
 80099e6:	e008      	b.n	80099fa <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	2200      	movs	r2, #0
 80099ec:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	2200      	movs	r2, #0
 80099f2:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2200      	movs	r2, #0
 80099f8:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	2200      	movs	r2, #0
 80099fe:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	2201      	movs	r2, #1
 8009a04:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8009a10:	2300      	movs	r3, #0
}
 8009a12:	4618      	mov	r0, r3
 8009a14:	3710      	adds	r7, #16
 8009a16:	46bd      	mov	sp, r7
 8009a18:	bd80      	pop	{r7, pc}
 8009a1a:	bf00      	nop
 8009a1c:	40020407 	.word	0x40020407
 8009a20:	bffdfff8 	.word	0xbffdfff8
 8009a24:	cccccccd 	.word	0xcccccccd
 8009a28:	40020000 	.word	0x40020000
 8009a2c:	bffdfbf8 	.word	0xbffdfbf8
 8009a30:	40020400 	.word	0x40020400

08009a34 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b086      	sub	sp, #24
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	60f8      	str	r0, [r7, #12]
 8009a3c:	60b9      	str	r1, [r7, #8]
 8009a3e:	607a      	str	r2, [r7, #4]
 8009a40:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009a42:	2300      	movs	r3, #0
 8009a44:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8009a4c:	2b01      	cmp	r3, #1
 8009a4e:	d101      	bne.n	8009a54 <HAL_DMA_Start_IT+0x20>
 8009a50:	2302      	movs	r3, #2
 8009a52:	e066      	b.n	8009b22 <HAL_DMA_Start_IT+0xee>
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	2201      	movs	r2, #1
 8009a58:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8009a62:	b2db      	uxtb	r3, r3
 8009a64:	2b01      	cmp	r3, #1
 8009a66:	d155      	bne.n	8009b14 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	2202      	movs	r2, #2
 8009a6c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	2200      	movs	r2, #0
 8009a74:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	681a      	ldr	r2, [r3, #0]
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	f022 0201 	bic.w	r2, r2, #1
 8009a84:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	687a      	ldr	r2, [r7, #4]
 8009a8a:	68b9      	ldr	r1, [r7, #8]
 8009a8c:	68f8      	ldr	r0, [r7, #12]
 8009a8e:	f000 f9bb 	bl	8009e08 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d008      	beq.n	8009aac <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	681a      	ldr	r2, [r3, #0]
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	f042 020e 	orr.w	r2, r2, #14
 8009aa8:	601a      	str	r2, [r3, #0]
 8009aaa:	e00f      	b.n	8009acc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	681a      	ldr	r2, [r3, #0]
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	f022 0204 	bic.w	r2, r2, #4
 8009aba:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	681a      	ldr	r2, [r3, #0]
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	f042 020a 	orr.w	r2, r2, #10
 8009aca:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d007      	beq.n	8009aea <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009ade:	681a      	ldr	r2, [r3, #0]
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009ae4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009ae8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d007      	beq.n	8009b02 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009af6:	681a      	ldr	r2, [r3, #0]
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009afc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009b00:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	681a      	ldr	r2, [r3, #0]
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	f042 0201 	orr.w	r2, r2, #1
 8009b10:	601a      	str	r2, [r3, #0]
 8009b12:	e005      	b.n	8009b20 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	2200      	movs	r2, #0
 8009b18:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8009b1c:	2302      	movs	r3, #2
 8009b1e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8009b20:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b22:	4618      	mov	r0, r3
 8009b24:	3718      	adds	r7, #24
 8009b26:	46bd      	mov	sp, r7
 8009b28:	bd80      	pop	{r7, pc}

08009b2a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009b2a:	b480      	push	{r7}
 8009b2c:	b085      	sub	sp, #20
 8009b2e:	af00      	add	r7, sp, #0
 8009b30:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009b32:	2300      	movs	r3, #0
 8009b34:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8009b3c:	b2db      	uxtb	r3, r3
 8009b3e:	2b02      	cmp	r3, #2
 8009b40:	d005      	beq.n	8009b4e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	2204      	movs	r2, #4
 8009b46:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8009b48:	2301      	movs	r3, #1
 8009b4a:	73fb      	strb	r3, [r7, #15]
 8009b4c:	e037      	b.n	8009bbe <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	681a      	ldr	r2, [r3, #0]
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	f022 020e 	bic.w	r2, r2, #14
 8009b5c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009b62:	681a      	ldr	r2, [r3, #0]
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009b68:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009b6c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	681a      	ldr	r2, [r3, #0]
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	f022 0201 	bic.w	r2, r2, #1
 8009b7c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b82:	f003 021f 	and.w	r2, r3, #31
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b8a:	2101      	movs	r1, #1
 8009b8c:	fa01 f202 	lsl.w	r2, r1, r2
 8009b90:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009b96:	687a      	ldr	r2, [r7, #4]
 8009b98:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8009b9a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d00c      	beq.n	8009bbe <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ba8:	681a      	ldr	r2, [r3, #0]
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009bae:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009bb2:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009bb8:	687a      	ldr	r2, [r7, #4]
 8009bba:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8009bbc:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	2201      	movs	r2, #1
 8009bc2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	2200      	movs	r2, #0
 8009bca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8009bce:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	3714      	adds	r7, #20
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bda:	4770      	bx	lr

08009bdc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b084      	sub	sp, #16
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009be4:	2300      	movs	r3, #0
 8009be6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8009bee:	b2db      	uxtb	r3, r3
 8009bf0:	2b02      	cmp	r3, #2
 8009bf2:	d00d      	beq.n	8009c10 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	2204      	movs	r2, #4
 8009bf8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	2201      	movs	r2, #1
 8009bfe:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	2200      	movs	r2, #0
 8009c06:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8009c0a:	2301      	movs	r3, #1
 8009c0c:	73fb      	strb	r3, [r7, #15]
 8009c0e:	e047      	b.n	8009ca0 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	681a      	ldr	r2, [r3, #0]
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	f022 020e 	bic.w	r2, r2, #14
 8009c1e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	681a      	ldr	r2, [r3, #0]
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	f022 0201 	bic.w	r2, r2, #1
 8009c2e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009c34:	681a      	ldr	r2, [r3, #0]
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009c3a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009c3e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c44:	f003 021f 	and.w	r2, r3, #31
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c4c:	2101      	movs	r1, #1
 8009c4e:	fa01 f202 	lsl.w	r2, r1, r2
 8009c52:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009c58:	687a      	ldr	r2, [r7, #4]
 8009c5a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8009c5c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d00c      	beq.n	8009c80 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c6a:	681a      	ldr	r2, [r3, #0]
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c70:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009c74:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009c7a:	687a      	ldr	r2, [r7, #4]
 8009c7c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8009c7e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	2201      	movs	r2, #1
 8009c84:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d003      	beq.n	8009ca0 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c9c:	6878      	ldr	r0, [r7, #4]
 8009c9e:	4798      	blx	r3
    }
  }
  return status;
 8009ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	3710      	adds	r7, #16
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	bd80      	pop	{r7, pc}

08009caa <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009caa:	b580      	push	{r7, lr}
 8009cac:	b084      	sub	sp, #16
 8009cae:	af00      	add	r7, sp, #0
 8009cb0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009cc6:	f003 031f 	and.w	r3, r3, #31
 8009cca:	2204      	movs	r2, #4
 8009ccc:	409a      	lsls	r2, r3
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	4013      	ands	r3, r2
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d026      	beq.n	8009d24 <HAL_DMA_IRQHandler+0x7a>
 8009cd6:	68bb      	ldr	r3, [r7, #8]
 8009cd8:	f003 0304 	and.w	r3, r3, #4
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d021      	beq.n	8009d24 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	f003 0320 	and.w	r3, r3, #32
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d107      	bne.n	8009cfe <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	681a      	ldr	r2, [r3, #0]
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	f022 0204 	bic.w	r2, r2, #4
 8009cfc:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d02:	f003 021f 	and.w	r2, r3, #31
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d0a:	2104      	movs	r1, #4
 8009d0c:	fa01 f202 	lsl.w	r2, r1, r2
 8009d10:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d071      	beq.n	8009dfe <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d1e:	6878      	ldr	r0, [r7, #4]
 8009d20:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8009d22:	e06c      	b.n	8009dfe <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d28:	f003 031f 	and.w	r3, r3, #31
 8009d2c:	2202      	movs	r2, #2
 8009d2e:	409a      	lsls	r2, r3
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	4013      	ands	r3, r2
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d02e      	beq.n	8009d96 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8009d38:	68bb      	ldr	r3, [r7, #8]
 8009d3a:	f003 0302 	and.w	r3, r3, #2
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d029      	beq.n	8009d96 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	f003 0320 	and.w	r3, r3, #32
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d10b      	bne.n	8009d68 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	681a      	ldr	r2, [r3, #0]
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	f022 020a 	bic.w	r2, r2, #10
 8009d5e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	2201      	movs	r2, #1
 8009d64:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d6c:	f003 021f 	and.w	r2, r3, #31
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d74:	2102      	movs	r1, #2
 8009d76:	fa01 f202 	lsl.w	r2, r1, r2
 8009d7a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2200      	movs	r2, #0
 8009d80:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d038      	beq.n	8009dfe <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d90:	6878      	ldr	r0, [r7, #4]
 8009d92:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8009d94:	e033      	b.n	8009dfe <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d9a:	f003 031f 	and.w	r3, r3, #31
 8009d9e:	2208      	movs	r2, #8
 8009da0:	409a      	lsls	r2, r3
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	4013      	ands	r3, r2
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d02a      	beq.n	8009e00 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8009daa:	68bb      	ldr	r3, [r7, #8]
 8009dac:	f003 0308 	and.w	r3, r3, #8
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d025      	beq.n	8009e00 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	681a      	ldr	r2, [r3, #0]
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	f022 020e 	bic.w	r2, r2, #14
 8009dc2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009dc8:	f003 021f 	and.w	r2, r3, #31
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009dd0:	2101      	movs	r1, #1
 8009dd2:	fa01 f202 	lsl.w	r2, r1, r2
 8009dd6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2201      	movs	r2, #1
 8009ddc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	2201      	movs	r2, #1
 8009de2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	2200      	movs	r2, #0
 8009dea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d004      	beq.n	8009e00 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009dfa:	6878      	ldr	r0, [r7, #4]
 8009dfc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8009dfe:	bf00      	nop
 8009e00:	bf00      	nop
}
 8009e02:	3710      	adds	r7, #16
 8009e04:	46bd      	mov	sp, r7
 8009e06:	bd80      	pop	{r7, pc}

08009e08 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009e08:	b480      	push	{r7}
 8009e0a:	b085      	sub	sp, #20
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	60f8      	str	r0, [r7, #12]
 8009e10:	60b9      	str	r1, [r7, #8]
 8009e12:	607a      	str	r2, [r7, #4]
 8009e14:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009e1a:	68fa      	ldr	r2, [r7, #12]
 8009e1c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8009e1e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d004      	beq.n	8009e32 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e2c:	68fa      	ldr	r2, [r7, #12]
 8009e2e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8009e30:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e36:	f003 021f 	and.w	r2, r3, #31
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e3e:	2101      	movs	r1, #1
 8009e40:	fa01 f202 	lsl.w	r2, r1, r2
 8009e44:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	683a      	ldr	r2, [r7, #0]
 8009e4c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	689b      	ldr	r3, [r3, #8]
 8009e52:	2b10      	cmp	r3, #16
 8009e54:	d108      	bne.n	8009e68 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	687a      	ldr	r2, [r7, #4]
 8009e5c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	68ba      	ldr	r2, [r7, #8]
 8009e64:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8009e66:	e007      	b.n	8009e78 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	68ba      	ldr	r2, [r7, #8]
 8009e6e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	687a      	ldr	r2, [r7, #4]
 8009e76:	60da      	str	r2, [r3, #12]
}
 8009e78:	bf00      	nop
 8009e7a:	3714      	adds	r7, #20
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e82:	4770      	bx	lr

08009e84 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009e84:	b480      	push	{r7}
 8009e86:	b087      	sub	sp, #28
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	461a      	mov	r2, r3
 8009e92:	4b16      	ldr	r3, [pc, #88]	@ (8009eec <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8009e94:	429a      	cmp	r2, r3
 8009e96:	d802      	bhi.n	8009e9e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8009e98:	4b15      	ldr	r3, [pc, #84]	@ (8009ef0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8009e9a:	617b      	str	r3, [r7, #20]
 8009e9c:	e001      	b.n	8009ea2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8009e9e:	4b15      	ldr	r3, [pc, #84]	@ (8009ef4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8009ea0:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8009ea2:	697b      	ldr	r3, [r7, #20]
 8009ea4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	b2db      	uxtb	r3, r3
 8009eac:	3b08      	subs	r3, #8
 8009eae:	4a12      	ldr	r2, [pc, #72]	@ (8009ef8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8009eb0:	fba2 2303 	umull	r2, r3, r2, r3
 8009eb4:	091b      	lsrs	r3, r3, #4
 8009eb6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ebc:	089b      	lsrs	r3, r3, #2
 8009ebe:	009a      	lsls	r2, r3, #2
 8009ec0:	693b      	ldr	r3, [r7, #16]
 8009ec2:	4413      	add	r3, r2
 8009ec4:	461a      	mov	r2, r3
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	4a0b      	ldr	r2, [pc, #44]	@ (8009efc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8009ece:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	f003 031f 	and.w	r3, r3, #31
 8009ed6:	2201      	movs	r2, #1
 8009ed8:	409a      	lsls	r2, r3
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8009ede:	bf00      	nop
 8009ee0:	371c      	adds	r7, #28
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee8:	4770      	bx	lr
 8009eea:	bf00      	nop
 8009eec:	40020407 	.word	0x40020407
 8009ef0:	40020800 	.word	0x40020800
 8009ef4:	40020820 	.word	0x40020820
 8009ef8:	cccccccd 	.word	0xcccccccd
 8009efc:	40020880 	.word	0x40020880

08009f00 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009f00:	b480      	push	{r7}
 8009f02:	b085      	sub	sp, #20
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	685b      	ldr	r3, [r3, #4]
 8009f0c:	b2db      	uxtb	r3, r3
 8009f0e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8009f10:	68fa      	ldr	r2, [r7, #12]
 8009f12:	4b0b      	ldr	r3, [pc, #44]	@ (8009f40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8009f14:	4413      	add	r3, r2
 8009f16:	009b      	lsls	r3, r3, #2
 8009f18:	461a      	mov	r2, r3
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	4a08      	ldr	r2, [pc, #32]	@ (8009f44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8009f22:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	3b01      	subs	r3, #1
 8009f28:	f003 031f 	and.w	r3, r3, #31
 8009f2c:	2201      	movs	r2, #1
 8009f2e:	409a      	lsls	r2, r3
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8009f34:	bf00      	nop
 8009f36:	3714      	adds	r7, #20
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3e:	4770      	bx	lr
 8009f40:	1000823f 	.word	0x1000823f
 8009f44:	40020940 	.word	0x40020940

08009f48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009f48:	b480      	push	{r7}
 8009f4a:	b087      	sub	sp, #28
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
 8009f50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8009f52:	2300      	movs	r3, #0
 8009f54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8009f56:	e15a      	b.n	800a20e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8009f58:	683b      	ldr	r3, [r7, #0]
 8009f5a:	681a      	ldr	r2, [r3, #0]
 8009f5c:	2101      	movs	r1, #1
 8009f5e:	697b      	ldr	r3, [r7, #20]
 8009f60:	fa01 f303 	lsl.w	r3, r1, r3
 8009f64:	4013      	ands	r3, r2
 8009f66:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	f000 814c 	beq.w	800a208 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8009f70:	683b      	ldr	r3, [r7, #0]
 8009f72:	685b      	ldr	r3, [r3, #4]
 8009f74:	f003 0303 	and.w	r3, r3, #3
 8009f78:	2b01      	cmp	r3, #1
 8009f7a:	d005      	beq.n	8009f88 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009f7c:	683b      	ldr	r3, [r7, #0]
 8009f7e:	685b      	ldr	r3, [r3, #4]
 8009f80:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8009f84:	2b02      	cmp	r3, #2
 8009f86:	d130      	bne.n	8009fea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	689b      	ldr	r3, [r3, #8]
 8009f8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8009f8e:	697b      	ldr	r3, [r7, #20]
 8009f90:	005b      	lsls	r3, r3, #1
 8009f92:	2203      	movs	r2, #3
 8009f94:	fa02 f303 	lsl.w	r3, r2, r3
 8009f98:	43db      	mvns	r3, r3
 8009f9a:	693a      	ldr	r2, [r7, #16]
 8009f9c:	4013      	ands	r3, r2
 8009f9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	68da      	ldr	r2, [r3, #12]
 8009fa4:	697b      	ldr	r3, [r7, #20]
 8009fa6:	005b      	lsls	r3, r3, #1
 8009fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8009fac:	693a      	ldr	r2, [r7, #16]
 8009fae:	4313      	orrs	r3, r2
 8009fb0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	693a      	ldr	r2, [r7, #16]
 8009fb6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	685b      	ldr	r3, [r3, #4]
 8009fbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009fbe:	2201      	movs	r2, #1
 8009fc0:	697b      	ldr	r3, [r7, #20]
 8009fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8009fc6:	43db      	mvns	r3, r3
 8009fc8:	693a      	ldr	r2, [r7, #16]
 8009fca:	4013      	ands	r3, r2
 8009fcc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009fce:	683b      	ldr	r3, [r7, #0]
 8009fd0:	685b      	ldr	r3, [r3, #4]
 8009fd2:	091b      	lsrs	r3, r3, #4
 8009fd4:	f003 0201 	and.w	r2, r3, #1
 8009fd8:	697b      	ldr	r3, [r7, #20]
 8009fda:	fa02 f303 	lsl.w	r3, r2, r3
 8009fde:	693a      	ldr	r2, [r7, #16]
 8009fe0:	4313      	orrs	r3, r2
 8009fe2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	693a      	ldr	r2, [r7, #16]
 8009fe8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	685b      	ldr	r3, [r3, #4]
 8009fee:	f003 0303 	and.w	r3, r3, #3
 8009ff2:	2b03      	cmp	r3, #3
 8009ff4:	d017      	beq.n	800a026 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	68db      	ldr	r3, [r3, #12]
 8009ffa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009ffc:	697b      	ldr	r3, [r7, #20]
 8009ffe:	005b      	lsls	r3, r3, #1
 800a000:	2203      	movs	r2, #3
 800a002:	fa02 f303 	lsl.w	r3, r2, r3
 800a006:	43db      	mvns	r3, r3
 800a008:	693a      	ldr	r2, [r7, #16]
 800a00a:	4013      	ands	r3, r2
 800a00c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	689a      	ldr	r2, [r3, #8]
 800a012:	697b      	ldr	r3, [r7, #20]
 800a014:	005b      	lsls	r3, r3, #1
 800a016:	fa02 f303 	lsl.w	r3, r2, r3
 800a01a:	693a      	ldr	r2, [r7, #16]
 800a01c:	4313      	orrs	r3, r2
 800a01e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	693a      	ldr	r2, [r7, #16]
 800a024:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a026:	683b      	ldr	r3, [r7, #0]
 800a028:	685b      	ldr	r3, [r3, #4]
 800a02a:	f003 0303 	and.w	r3, r3, #3
 800a02e:	2b02      	cmp	r3, #2
 800a030:	d123      	bne.n	800a07a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a032:	697b      	ldr	r3, [r7, #20]
 800a034:	08da      	lsrs	r2, r3, #3
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	3208      	adds	r2, #8
 800a03a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a03e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800a040:	697b      	ldr	r3, [r7, #20]
 800a042:	f003 0307 	and.w	r3, r3, #7
 800a046:	009b      	lsls	r3, r3, #2
 800a048:	220f      	movs	r2, #15
 800a04a:	fa02 f303 	lsl.w	r3, r2, r3
 800a04e:	43db      	mvns	r3, r3
 800a050:	693a      	ldr	r2, [r7, #16]
 800a052:	4013      	ands	r3, r2
 800a054:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	691a      	ldr	r2, [r3, #16]
 800a05a:	697b      	ldr	r3, [r7, #20]
 800a05c:	f003 0307 	and.w	r3, r3, #7
 800a060:	009b      	lsls	r3, r3, #2
 800a062:	fa02 f303 	lsl.w	r3, r2, r3
 800a066:	693a      	ldr	r2, [r7, #16]
 800a068:	4313      	orrs	r3, r2
 800a06a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800a06c:	697b      	ldr	r3, [r7, #20]
 800a06e:	08da      	lsrs	r2, r3, #3
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	3208      	adds	r2, #8
 800a074:	6939      	ldr	r1, [r7, #16]
 800a076:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800a080:	697b      	ldr	r3, [r7, #20]
 800a082:	005b      	lsls	r3, r3, #1
 800a084:	2203      	movs	r2, #3
 800a086:	fa02 f303 	lsl.w	r3, r2, r3
 800a08a:	43db      	mvns	r3, r3
 800a08c:	693a      	ldr	r2, [r7, #16]
 800a08e:	4013      	ands	r3, r2
 800a090:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a092:	683b      	ldr	r3, [r7, #0]
 800a094:	685b      	ldr	r3, [r3, #4]
 800a096:	f003 0203 	and.w	r2, r3, #3
 800a09a:	697b      	ldr	r3, [r7, #20]
 800a09c:	005b      	lsls	r3, r3, #1
 800a09e:	fa02 f303 	lsl.w	r3, r2, r3
 800a0a2:	693a      	ldr	r2, [r7, #16]
 800a0a4:	4313      	orrs	r3, r2
 800a0a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	693a      	ldr	r2, [r7, #16]
 800a0ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800a0ae:	683b      	ldr	r3, [r7, #0]
 800a0b0:	685b      	ldr	r3, [r3, #4]
 800a0b2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	f000 80a6 	beq.w	800a208 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a0bc:	4b5b      	ldr	r3, [pc, #364]	@ (800a22c <HAL_GPIO_Init+0x2e4>)
 800a0be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a0c0:	4a5a      	ldr	r2, [pc, #360]	@ (800a22c <HAL_GPIO_Init+0x2e4>)
 800a0c2:	f043 0301 	orr.w	r3, r3, #1
 800a0c6:	6613      	str	r3, [r2, #96]	@ 0x60
 800a0c8:	4b58      	ldr	r3, [pc, #352]	@ (800a22c <HAL_GPIO_Init+0x2e4>)
 800a0ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a0cc:	f003 0301 	and.w	r3, r3, #1
 800a0d0:	60bb      	str	r3, [r7, #8]
 800a0d2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a0d4:	4a56      	ldr	r2, [pc, #344]	@ (800a230 <HAL_GPIO_Init+0x2e8>)
 800a0d6:	697b      	ldr	r3, [r7, #20]
 800a0d8:	089b      	lsrs	r3, r3, #2
 800a0da:	3302      	adds	r3, #2
 800a0dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a0e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800a0e2:	697b      	ldr	r3, [r7, #20]
 800a0e4:	f003 0303 	and.w	r3, r3, #3
 800a0e8:	009b      	lsls	r3, r3, #2
 800a0ea:	220f      	movs	r2, #15
 800a0ec:	fa02 f303 	lsl.w	r3, r2, r3
 800a0f0:	43db      	mvns	r3, r3
 800a0f2:	693a      	ldr	r2, [r7, #16]
 800a0f4:	4013      	ands	r3, r2
 800a0f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800a0fe:	d01f      	beq.n	800a140 <HAL_GPIO_Init+0x1f8>
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	4a4c      	ldr	r2, [pc, #304]	@ (800a234 <HAL_GPIO_Init+0x2ec>)
 800a104:	4293      	cmp	r3, r2
 800a106:	d019      	beq.n	800a13c <HAL_GPIO_Init+0x1f4>
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	4a4b      	ldr	r2, [pc, #300]	@ (800a238 <HAL_GPIO_Init+0x2f0>)
 800a10c:	4293      	cmp	r3, r2
 800a10e:	d013      	beq.n	800a138 <HAL_GPIO_Init+0x1f0>
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	4a4a      	ldr	r2, [pc, #296]	@ (800a23c <HAL_GPIO_Init+0x2f4>)
 800a114:	4293      	cmp	r3, r2
 800a116:	d00d      	beq.n	800a134 <HAL_GPIO_Init+0x1ec>
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	4a49      	ldr	r2, [pc, #292]	@ (800a240 <HAL_GPIO_Init+0x2f8>)
 800a11c:	4293      	cmp	r3, r2
 800a11e:	d007      	beq.n	800a130 <HAL_GPIO_Init+0x1e8>
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	4a48      	ldr	r2, [pc, #288]	@ (800a244 <HAL_GPIO_Init+0x2fc>)
 800a124:	4293      	cmp	r3, r2
 800a126:	d101      	bne.n	800a12c <HAL_GPIO_Init+0x1e4>
 800a128:	2305      	movs	r3, #5
 800a12a:	e00a      	b.n	800a142 <HAL_GPIO_Init+0x1fa>
 800a12c:	2306      	movs	r3, #6
 800a12e:	e008      	b.n	800a142 <HAL_GPIO_Init+0x1fa>
 800a130:	2304      	movs	r3, #4
 800a132:	e006      	b.n	800a142 <HAL_GPIO_Init+0x1fa>
 800a134:	2303      	movs	r3, #3
 800a136:	e004      	b.n	800a142 <HAL_GPIO_Init+0x1fa>
 800a138:	2302      	movs	r3, #2
 800a13a:	e002      	b.n	800a142 <HAL_GPIO_Init+0x1fa>
 800a13c:	2301      	movs	r3, #1
 800a13e:	e000      	b.n	800a142 <HAL_GPIO_Init+0x1fa>
 800a140:	2300      	movs	r3, #0
 800a142:	697a      	ldr	r2, [r7, #20]
 800a144:	f002 0203 	and.w	r2, r2, #3
 800a148:	0092      	lsls	r2, r2, #2
 800a14a:	4093      	lsls	r3, r2
 800a14c:	693a      	ldr	r2, [r7, #16]
 800a14e:	4313      	orrs	r3, r2
 800a150:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a152:	4937      	ldr	r1, [pc, #220]	@ (800a230 <HAL_GPIO_Init+0x2e8>)
 800a154:	697b      	ldr	r3, [r7, #20]
 800a156:	089b      	lsrs	r3, r3, #2
 800a158:	3302      	adds	r3, #2
 800a15a:	693a      	ldr	r2, [r7, #16]
 800a15c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a160:	4b39      	ldr	r3, [pc, #228]	@ (800a248 <HAL_GPIO_Init+0x300>)
 800a162:	689b      	ldr	r3, [r3, #8]
 800a164:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	43db      	mvns	r3, r3
 800a16a:	693a      	ldr	r2, [r7, #16]
 800a16c:	4013      	ands	r3, r2
 800a16e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800a170:	683b      	ldr	r3, [r7, #0]
 800a172:	685b      	ldr	r3, [r3, #4]
 800a174:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d003      	beq.n	800a184 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800a17c:	693a      	ldr	r2, [r7, #16]
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	4313      	orrs	r3, r2
 800a182:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800a184:	4a30      	ldr	r2, [pc, #192]	@ (800a248 <HAL_GPIO_Init+0x300>)
 800a186:	693b      	ldr	r3, [r7, #16]
 800a188:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800a18a:	4b2f      	ldr	r3, [pc, #188]	@ (800a248 <HAL_GPIO_Init+0x300>)
 800a18c:	68db      	ldr	r3, [r3, #12]
 800a18e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	43db      	mvns	r3, r3
 800a194:	693a      	ldr	r2, [r7, #16]
 800a196:	4013      	ands	r3, r2
 800a198:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800a19a:	683b      	ldr	r3, [r7, #0]
 800a19c:	685b      	ldr	r3, [r3, #4]
 800a19e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d003      	beq.n	800a1ae <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800a1a6:	693a      	ldr	r2, [r7, #16]
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	4313      	orrs	r3, r2
 800a1ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800a1ae:	4a26      	ldr	r2, [pc, #152]	@ (800a248 <HAL_GPIO_Init+0x300>)
 800a1b0:	693b      	ldr	r3, [r7, #16]
 800a1b2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800a1b4:	4b24      	ldr	r3, [pc, #144]	@ (800a248 <HAL_GPIO_Init+0x300>)
 800a1b6:	685b      	ldr	r3, [r3, #4]
 800a1b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	43db      	mvns	r3, r3
 800a1be:	693a      	ldr	r2, [r7, #16]
 800a1c0:	4013      	ands	r3, r2
 800a1c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800a1c4:	683b      	ldr	r3, [r7, #0]
 800a1c6:	685b      	ldr	r3, [r3, #4]
 800a1c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d003      	beq.n	800a1d8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800a1d0:	693a      	ldr	r2, [r7, #16]
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	4313      	orrs	r3, r2
 800a1d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800a1d8:	4a1b      	ldr	r2, [pc, #108]	@ (800a248 <HAL_GPIO_Init+0x300>)
 800a1da:	693b      	ldr	r3, [r7, #16]
 800a1dc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800a1de:	4b1a      	ldr	r3, [pc, #104]	@ (800a248 <HAL_GPIO_Init+0x300>)
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	43db      	mvns	r3, r3
 800a1e8:	693a      	ldr	r2, [r7, #16]
 800a1ea:	4013      	ands	r3, r2
 800a1ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800a1ee:	683b      	ldr	r3, [r7, #0]
 800a1f0:	685b      	ldr	r3, [r3, #4]
 800a1f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d003      	beq.n	800a202 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800a1fa:	693a      	ldr	r2, [r7, #16]
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	4313      	orrs	r3, r2
 800a200:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800a202:	4a11      	ldr	r2, [pc, #68]	@ (800a248 <HAL_GPIO_Init+0x300>)
 800a204:	693b      	ldr	r3, [r7, #16]
 800a206:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800a208:	697b      	ldr	r3, [r7, #20]
 800a20a:	3301      	adds	r3, #1
 800a20c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	681a      	ldr	r2, [r3, #0]
 800a212:	697b      	ldr	r3, [r7, #20]
 800a214:	fa22 f303 	lsr.w	r3, r2, r3
 800a218:	2b00      	cmp	r3, #0
 800a21a:	f47f ae9d 	bne.w	8009f58 <HAL_GPIO_Init+0x10>
  }
}
 800a21e:	bf00      	nop
 800a220:	bf00      	nop
 800a222:	371c      	adds	r7, #28
 800a224:	46bd      	mov	sp, r7
 800a226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22a:	4770      	bx	lr
 800a22c:	40021000 	.word	0x40021000
 800a230:	40010000 	.word	0x40010000
 800a234:	48000400 	.word	0x48000400
 800a238:	48000800 	.word	0x48000800
 800a23c:	48000c00 	.word	0x48000c00
 800a240:	48001000 	.word	0x48001000
 800a244:	48001400 	.word	0x48001400
 800a248:	40010400 	.word	0x40010400

0800a24c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a24c:	b480      	push	{r7}
 800a24e:	b085      	sub	sp, #20
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
 800a254:	460b      	mov	r3, r1
 800a256:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	691a      	ldr	r2, [r3, #16]
 800a25c:	887b      	ldrh	r3, [r7, #2]
 800a25e:	4013      	ands	r3, r2
 800a260:	2b00      	cmp	r3, #0
 800a262:	d002      	beq.n	800a26a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a264:	2301      	movs	r3, #1
 800a266:	73fb      	strb	r3, [r7, #15]
 800a268:	e001      	b.n	800a26e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a26a:	2300      	movs	r3, #0
 800a26c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a26e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a270:	4618      	mov	r0, r3
 800a272:	3714      	adds	r7, #20
 800a274:	46bd      	mov	sp, r7
 800a276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27a:	4770      	bx	lr

0800a27c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a27c:	b480      	push	{r7}
 800a27e:	b083      	sub	sp, #12
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
 800a284:	460b      	mov	r3, r1
 800a286:	807b      	strh	r3, [r7, #2]
 800a288:	4613      	mov	r3, r2
 800a28a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a28c:	787b      	ldrb	r3, [r7, #1]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d003      	beq.n	800a29a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800a292:	887a      	ldrh	r2, [r7, #2]
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800a298:	e002      	b.n	800a2a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800a29a:	887a      	ldrh	r2, [r7, #2]
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800a2a0:	bf00      	nop
 800a2a2:	370c      	adds	r7, #12
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2aa:	4770      	bx	lr

0800a2ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b082      	sub	sp, #8
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	4603      	mov	r3, r0
 800a2b4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800a2b6:	4b08      	ldr	r3, [pc, #32]	@ (800a2d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800a2b8:	695a      	ldr	r2, [r3, #20]
 800a2ba:	88fb      	ldrh	r3, [r7, #6]
 800a2bc:	4013      	ands	r3, r2
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d006      	beq.n	800a2d0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800a2c2:	4a05      	ldr	r2, [pc, #20]	@ (800a2d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800a2c4:	88fb      	ldrh	r3, [r7, #6]
 800a2c6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800a2c8:	88fb      	ldrh	r3, [r7, #6]
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	f7fb fe6c 	bl	8005fa8 <HAL_GPIO_EXTI_Callback>
  }
}
 800a2d0:	bf00      	nop
 800a2d2:	3708      	adds	r7, #8
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	bd80      	pop	{r7, pc}
 800a2d8:	40010400 	.word	0x40010400

0800a2dc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800a2dc:	b480      	push	{r7}
 800a2de:	b085      	sub	sp, #20
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d141      	bne.n	800a36e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800a2ea:	4b4b      	ldr	r3, [pc, #300]	@ (800a418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800a2f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a2f6:	d131      	bne.n	800a35c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a2f8:	4b47      	ldr	r3, [pc, #284]	@ (800a418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a2fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a2fe:	4a46      	ldr	r2, [pc, #280]	@ (800a418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a300:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a304:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800a308:	4b43      	ldr	r3, [pc, #268]	@ (800a418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800a310:	4a41      	ldr	r2, [pc, #260]	@ (800a418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a312:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800a316:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800a318:	4b40      	ldr	r3, [pc, #256]	@ (800a41c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	2232      	movs	r2, #50	@ 0x32
 800a31e:	fb02 f303 	mul.w	r3, r2, r3
 800a322:	4a3f      	ldr	r2, [pc, #252]	@ (800a420 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800a324:	fba2 2303 	umull	r2, r3, r2, r3
 800a328:	0c9b      	lsrs	r3, r3, #18
 800a32a:	3301      	adds	r3, #1
 800a32c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a32e:	e002      	b.n	800a336 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	3b01      	subs	r3, #1
 800a334:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a336:	4b38      	ldr	r3, [pc, #224]	@ (800a418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a338:	695b      	ldr	r3, [r3, #20]
 800a33a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a33e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a342:	d102      	bne.n	800a34a <HAL_PWREx_ControlVoltageScaling+0x6e>
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d1f2      	bne.n	800a330 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a34a:	4b33      	ldr	r3, [pc, #204]	@ (800a418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a34c:	695b      	ldr	r3, [r3, #20]
 800a34e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a352:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a356:	d158      	bne.n	800a40a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800a358:	2303      	movs	r3, #3
 800a35a:	e057      	b.n	800a40c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a35c:	4b2e      	ldr	r3, [pc, #184]	@ (800a418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a35e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a362:	4a2d      	ldr	r2, [pc, #180]	@ (800a418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a364:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a368:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800a36c:	e04d      	b.n	800a40a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a374:	d141      	bne.n	800a3fa <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800a376:	4b28      	ldr	r3, [pc, #160]	@ (800a418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800a37e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a382:	d131      	bne.n	800a3e8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a384:	4b24      	ldr	r3, [pc, #144]	@ (800a418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a386:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a38a:	4a23      	ldr	r2, [pc, #140]	@ (800a418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a38c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a390:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800a394:	4b20      	ldr	r3, [pc, #128]	@ (800a418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800a39c:	4a1e      	ldr	r2, [pc, #120]	@ (800a418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a39e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800a3a2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800a3a4:	4b1d      	ldr	r3, [pc, #116]	@ (800a41c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	2232      	movs	r2, #50	@ 0x32
 800a3aa:	fb02 f303 	mul.w	r3, r2, r3
 800a3ae:	4a1c      	ldr	r2, [pc, #112]	@ (800a420 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800a3b0:	fba2 2303 	umull	r2, r3, r2, r3
 800a3b4:	0c9b      	lsrs	r3, r3, #18
 800a3b6:	3301      	adds	r3, #1
 800a3b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a3ba:	e002      	b.n	800a3c2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	3b01      	subs	r3, #1
 800a3c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a3c2:	4b15      	ldr	r3, [pc, #84]	@ (800a418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a3c4:	695b      	ldr	r3, [r3, #20]
 800a3c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a3ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a3ce:	d102      	bne.n	800a3d6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d1f2      	bne.n	800a3bc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a3d6:	4b10      	ldr	r3, [pc, #64]	@ (800a418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a3d8:	695b      	ldr	r3, [r3, #20]
 800a3da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a3de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a3e2:	d112      	bne.n	800a40a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800a3e4:	2303      	movs	r3, #3
 800a3e6:	e011      	b.n	800a40c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a3e8:	4b0b      	ldr	r3, [pc, #44]	@ (800a418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a3ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a3ee:	4a0a      	ldr	r2, [pc, #40]	@ (800a418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a3f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a3f4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800a3f8:	e007      	b.n	800a40a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800a3fa:	4b07      	ldr	r3, [pc, #28]	@ (800a418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800a402:	4a05      	ldr	r2, [pc, #20]	@ (800a418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a404:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800a408:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800a40a:	2300      	movs	r3, #0
}
 800a40c:	4618      	mov	r0, r3
 800a40e:	3714      	adds	r7, #20
 800a410:	46bd      	mov	sp, r7
 800a412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a416:	4770      	bx	lr
 800a418:	40007000 	.word	0x40007000
 800a41c:	200000fc 	.word	0x200000fc
 800a420:	431bde83 	.word	0x431bde83

0800a424 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800a424:	b480      	push	{r7}
 800a426:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800a428:	4b05      	ldr	r3, [pc, #20]	@ (800a440 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800a42a:	689b      	ldr	r3, [r3, #8]
 800a42c:	4a04      	ldr	r2, [pc, #16]	@ (800a440 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800a42e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a432:	6093      	str	r3, [r2, #8]
}
 800a434:	bf00      	nop
 800a436:	46bd      	mov	sp, r7
 800a438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43c:	4770      	bx	lr
 800a43e:	bf00      	nop
 800a440:	40007000 	.word	0x40007000

0800a444 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b088      	sub	sp, #32
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d101      	bne.n	800a456 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a452:	2301      	movs	r3, #1
 800a454:	e2fe      	b.n	800aa54 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	f003 0301 	and.w	r3, r3, #1
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d075      	beq.n	800a54e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a462:	4b97      	ldr	r3, [pc, #604]	@ (800a6c0 <HAL_RCC_OscConfig+0x27c>)
 800a464:	689b      	ldr	r3, [r3, #8]
 800a466:	f003 030c 	and.w	r3, r3, #12
 800a46a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a46c:	4b94      	ldr	r3, [pc, #592]	@ (800a6c0 <HAL_RCC_OscConfig+0x27c>)
 800a46e:	68db      	ldr	r3, [r3, #12]
 800a470:	f003 0303 	and.w	r3, r3, #3
 800a474:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800a476:	69bb      	ldr	r3, [r7, #24]
 800a478:	2b0c      	cmp	r3, #12
 800a47a:	d102      	bne.n	800a482 <HAL_RCC_OscConfig+0x3e>
 800a47c:	697b      	ldr	r3, [r7, #20]
 800a47e:	2b03      	cmp	r3, #3
 800a480:	d002      	beq.n	800a488 <HAL_RCC_OscConfig+0x44>
 800a482:	69bb      	ldr	r3, [r7, #24]
 800a484:	2b08      	cmp	r3, #8
 800a486:	d10b      	bne.n	800a4a0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a488:	4b8d      	ldr	r3, [pc, #564]	@ (800a6c0 <HAL_RCC_OscConfig+0x27c>)
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a490:	2b00      	cmp	r3, #0
 800a492:	d05b      	beq.n	800a54c <HAL_RCC_OscConfig+0x108>
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	685b      	ldr	r3, [r3, #4]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d157      	bne.n	800a54c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800a49c:	2301      	movs	r3, #1
 800a49e:	e2d9      	b.n	800aa54 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	685b      	ldr	r3, [r3, #4]
 800a4a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a4a8:	d106      	bne.n	800a4b8 <HAL_RCC_OscConfig+0x74>
 800a4aa:	4b85      	ldr	r3, [pc, #532]	@ (800a6c0 <HAL_RCC_OscConfig+0x27c>)
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	4a84      	ldr	r2, [pc, #528]	@ (800a6c0 <HAL_RCC_OscConfig+0x27c>)
 800a4b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a4b4:	6013      	str	r3, [r2, #0]
 800a4b6:	e01d      	b.n	800a4f4 <HAL_RCC_OscConfig+0xb0>
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	685b      	ldr	r3, [r3, #4]
 800a4bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a4c0:	d10c      	bne.n	800a4dc <HAL_RCC_OscConfig+0x98>
 800a4c2:	4b7f      	ldr	r3, [pc, #508]	@ (800a6c0 <HAL_RCC_OscConfig+0x27c>)
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	4a7e      	ldr	r2, [pc, #504]	@ (800a6c0 <HAL_RCC_OscConfig+0x27c>)
 800a4c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a4cc:	6013      	str	r3, [r2, #0]
 800a4ce:	4b7c      	ldr	r3, [pc, #496]	@ (800a6c0 <HAL_RCC_OscConfig+0x27c>)
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	4a7b      	ldr	r2, [pc, #492]	@ (800a6c0 <HAL_RCC_OscConfig+0x27c>)
 800a4d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a4d8:	6013      	str	r3, [r2, #0]
 800a4da:	e00b      	b.n	800a4f4 <HAL_RCC_OscConfig+0xb0>
 800a4dc:	4b78      	ldr	r3, [pc, #480]	@ (800a6c0 <HAL_RCC_OscConfig+0x27c>)
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	4a77      	ldr	r2, [pc, #476]	@ (800a6c0 <HAL_RCC_OscConfig+0x27c>)
 800a4e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a4e6:	6013      	str	r3, [r2, #0]
 800a4e8:	4b75      	ldr	r3, [pc, #468]	@ (800a6c0 <HAL_RCC_OscConfig+0x27c>)
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	4a74      	ldr	r2, [pc, #464]	@ (800a6c0 <HAL_RCC_OscConfig+0x27c>)
 800a4ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a4f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	685b      	ldr	r3, [r3, #4]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d013      	beq.n	800a524 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a4fc:	f7fd fc5e 	bl	8007dbc <HAL_GetTick>
 800a500:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a502:	e008      	b.n	800a516 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a504:	f7fd fc5a 	bl	8007dbc <HAL_GetTick>
 800a508:	4602      	mov	r2, r0
 800a50a:	693b      	ldr	r3, [r7, #16]
 800a50c:	1ad3      	subs	r3, r2, r3
 800a50e:	2b64      	cmp	r3, #100	@ 0x64
 800a510:	d901      	bls.n	800a516 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800a512:	2303      	movs	r3, #3
 800a514:	e29e      	b.n	800aa54 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a516:	4b6a      	ldr	r3, [pc, #424]	@ (800a6c0 <HAL_RCC_OscConfig+0x27c>)
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d0f0      	beq.n	800a504 <HAL_RCC_OscConfig+0xc0>
 800a522:	e014      	b.n	800a54e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a524:	f7fd fc4a 	bl	8007dbc <HAL_GetTick>
 800a528:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a52a:	e008      	b.n	800a53e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a52c:	f7fd fc46 	bl	8007dbc <HAL_GetTick>
 800a530:	4602      	mov	r2, r0
 800a532:	693b      	ldr	r3, [r7, #16]
 800a534:	1ad3      	subs	r3, r2, r3
 800a536:	2b64      	cmp	r3, #100	@ 0x64
 800a538:	d901      	bls.n	800a53e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a53a:	2303      	movs	r3, #3
 800a53c:	e28a      	b.n	800aa54 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a53e:	4b60      	ldr	r3, [pc, #384]	@ (800a6c0 <HAL_RCC_OscConfig+0x27c>)
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a546:	2b00      	cmp	r3, #0
 800a548:	d1f0      	bne.n	800a52c <HAL_RCC_OscConfig+0xe8>
 800a54a:	e000      	b.n	800a54e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a54c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	f003 0302 	and.w	r3, r3, #2
 800a556:	2b00      	cmp	r3, #0
 800a558:	d075      	beq.n	800a646 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a55a:	4b59      	ldr	r3, [pc, #356]	@ (800a6c0 <HAL_RCC_OscConfig+0x27c>)
 800a55c:	689b      	ldr	r3, [r3, #8]
 800a55e:	f003 030c 	and.w	r3, r3, #12
 800a562:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a564:	4b56      	ldr	r3, [pc, #344]	@ (800a6c0 <HAL_RCC_OscConfig+0x27c>)
 800a566:	68db      	ldr	r3, [r3, #12]
 800a568:	f003 0303 	and.w	r3, r3, #3
 800a56c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800a56e:	69bb      	ldr	r3, [r7, #24]
 800a570:	2b0c      	cmp	r3, #12
 800a572:	d102      	bne.n	800a57a <HAL_RCC_OscConfig+0x136>
 800a574:	697b      	ldr	r3, [r7, #20]
 800a576:	2b02      	cmp	r3, #2
 800a578:	d002      	beq.n	800a580 <HAL_RCC_OscConfig+0x13c>
 800a57a:	69bb      	ldr	r3, [r7, #24]
 800a57c:	2b04      	cmp	r3, #4
 800a57e:	d11f      	bne.n	800a5c0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a580:	4b4f      	ldr	r3, [pc, #316]	@ (800a6c0 <HAL_RCC_OscConfig+0x27c>)
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d005      	beq.n	800a598 <HAL_RCC_OscConfig+0x154>
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	68db      	ldr	r3, [r3, #12]
 800a590:	2b00      	cmp	r3, #0
 800a592:	d101      	bne.n	800a598 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800a594:	2301      	movs	r3, #1
 800a596:	e25d      	b.n	800aa54 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a598:	4b49      	ldr	r3, [pc, #292]	@ (800a6c0 <HAL_RCC_OscConfig+0x27c>)
 800a59a:	685b      	ldr	r3, [r3, #4]
 800a59c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	691b      	ldr	r3, [r3, #16]
 800a5a4:	061b      	lsls	r3, r3, #24
 800a5a6:	4946      	ldr	r1, [pc, #280]	@ (800a6c0 <HAL_RCC_OscConfig+0x27c>)
 800a5a8:	4313      	orrs	r3, r2
 800a5aa:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800a5ac:	4b45      	ldr	r3, [pc, #276]	@ (800a6c4 <HAL_RCC_OscConfig+0x280>)
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	f7fd fbb7 	bl	8007d24 <HAL_InitTick>
 800a5b6:	4603      	mov	r3, r0
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d043      	beq.n	800a644 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800a5bc:	2301      	movs	r3, #1
 800a5be:	e249      	b.n	800aa54 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	68db      	ldr	r3, [r3, #12]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d023      	beq.n	800a610 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a5c8:	4b3d      	ldr	r3, [pc, #244]	@ (800a6c0 <HAL_RCC_OscConfig+0x27c>)
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	4a3c      	ldr	r2, [pc, #240]	@ (800a6c0 <HAL_RCC_OscConfig+0x27c>)
 800a5ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a5d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a5d4:	f7fd fbf2 	bl	8007dbc <HAL_GetTick>
 800a5d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a5da:	e008      	b.n	800a5ee <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a5dc:	f7fd fbee 	bl	8007dbc <HAL_GetTick>
 800a5e0:	4602      	mov	r2, r0
 800a5e2:	693b      	ldr	r3, [r7, #16]
 800a5e4:	1ad3      	subs	r3, r2, r3
 800a5e6:	2b02      	cmp	r3, #2
 800a5e8:	d901      	bls.n	800a5ee <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800a5ea:	2303      	movs	r3, #3
 800a5ec:	e232      	b.n	800aa54 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a5ee:	4b34      	ldr	r3, [pc, #208]	@ (800a6c0 <HAL_RCC_OscConfig+0x27c>)
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d0f0      	beq.n	800a5dc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a5fa:	4b31      	ldr	r3, [pc, #196]	@ (800a6c0 <HAL_RCC_OscConfig+0x27c>)
 800a5fc:	685b      	ldr	r3, [r3, #4]
 800a5fe:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	691b      	ldr	r3, [r3, #16]
 800a606:	061b      	lsls	r3, r3, #24
 800a608:	492d      	ldr	r1, [pc, #180]	@ (800a6c0 <HAL_RCC_OscConfig+0x27c>)
 800a60a:	4313      	orrs	r3, r2
 800a60c:	604b      	str	r3, [r1, #4]
 800a60e:	e01a      	b.n	800a646 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a610:	4b2b      	ldr	r3, [pc, #172]	@ (800a6c0 <HAL_RCC_OscConfig+0x27c>)
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	4a2a      	ldr	r2, [pc, #168]	@ (800a6c0 <HAL_RCC_OscConfig+0x27c>)
 800a616:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a61a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a61c:	f7fd fbce 	bl	8007dbc <HAL_GetTick>
 800a620:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a622:	e008      	b.n	800a636 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a624:	f7fd fbca 	bl	8007dbc <HAL_GetTick>
 800a628:	4602      	mov	r2, r0
 800a62a:	693b      	ldr	r3, [r7, #16]
 800a62c:	1ad3      	subs	r3, r2, r3
 800a62e:	2b02      	cmp	r3, #2
 800a630:	d901      	bls.n	800a636 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800a632:	2303      	movs	r3, #3
 800a634:	e20e      	b.n	800aa54 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a636:	4b22      	ldr	r3, [pc, #136]	@ (800a6c0 <HAL_RCC_OscConfig+0x27c>)
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d1f0      	bne.n	800a624 <HAL_RCC_OscConfig+0x1e0>
 800a642:	e000      	b.n	800a646 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a644:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	f003 0308 	and.w	r3, r3, #8
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d041      	beq.n	800a6d6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	695b      	ldr	r3, [r3, #20]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d01c      	beq.n	800a694 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a65a:	4b19      	ldr	r3, [pc, #100]	@ (800a6c0 <HAL_RCC_OscConfig+0x27c>)
 800a65c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a660:	4a17      	ldr	r2, [pc, #92]	@ (800a6c0 <HAL_RCC_OscConfig+0x27c>)
 800a662:	f043 0301 	orr.w	r3, r3, #1
 800a666:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a66a:	f7fd fba7 	bl	8007dbc <HAL_GetTick>
 800a66e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a670:	e008      	b.n	800a684 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a672:	f7fd fba3 	bl	8007dbc <HAL_GetTick>
 800a676:	4602      	mov	r2, r0
 800a678:	693b      	ldr	r3, [r7, #16]
 800a67a:	1ad3      	subs	r3, r2, r3
 800a67c:	2b02      	cmp	r3, #2
 800a67e:	d901      	bls.n	800a684 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800a680:	2303      	movs	r3, #3
 800a682:	e1e7      	b.n	800aa54 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a684:	4b0e      	ldr	r3, [pc, #56]	@ (800a6c0 <HAL_RCC_OscConfig+0x27c>)
 800a686:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a68a:	f003 0302 	and.w	r3, r3, #2
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d0ef      	beq.n	800a672 <HAL_RCC_OscConfig+0x22e>
 800a692:	e020      	b.n	800a6d6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a694:	4b0a      	ldr	r3, [pc, #40]	@ (800a6c0 <HAL_RCC_OscConfig+0x27c>)
 800a696:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a69a:	4a09      	ldr	r2, [pc, #36]	@ (800a6c0 <HAL_RCC_OscConfig+0x27c>)
 800a69c:	f023 0301 	bic.w	r3, r3, #1
 800a6a0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a6a4:	f7fd fb8a 	bl	8007dbc <HAL_GetTick>
 800a6a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a6aa:	e00d      	b.n	800a6c8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a6ac:	f7fd fb86 	bl	8007dbc <HAL_GetTick>
 800a6b0:	4602      	mov	r2, r0
 800a6b2:	693b      	ldr	r3, [r7, #16]
 800a6b4:	1ad3      	subs	r3, r2, r3
 800a6b6:	2b02      	cmp	r3, #2
 800a6b8:	d906      	bls.n	800a6c8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800a6ba:	2303      	movs	r3, #3
 800a6bc:	e1ca      	b.n	800aa54 <HAL_RCC_OscConfig+0x610>
 800a6be:	bf00      	nop
 800a6c0:	40021000 	.word	0x40021000
 800a6c4:	20000100 	.word	0x20000100
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a6c8:	4b8c      	ldr	r3, [pc, #560]	@ (800a8fc <HAL_RCC_OscConfig+0x4b8>)
 800a6ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a6ce:	f003 0302 	and.w	r3, r3, #2
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d1ea      	bne.n	800a6ac <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	f003 0304 	and.w	r3, r3, #4
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	f000 80a6 	beq.w	800a830 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a6e4:	2300      	movs	r3, #0
 800a6e6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800a6e8:	4b84      	ldr	r3, [pc, #528]	@ (800a8fc <HAL_RCC_OscConfig+0x4b8>)
 800a6ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a6ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d101      	bne.n	800a6f8 <HAL_RCC_OscConfig+0x2b4>
 800a6f4:	2301      	movs	r3, #1
 800a6f6:	e000      	b.n	800a6fa <HAL_RCC_OscConfig+0x2b6>
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d00d      	beq.n	800a71a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a6fe:	4b7f      	ldr	r3, [pc, #508]	@ (800a8fc <HAL_RCC_OscConfig+0x4b8>)
 800a700:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a702:	4a7e      	ldr	r2, [pc, #504]	@ (800a8fc <HAL_RCC_OscConfig+0x4b8>)
 800a704:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a708:	6593      	str	r3, [r2, #88]	@ 0x58
 800a70a:	4b7c      	ldr	r3, [pc, #496]	@ (800a8fc <HAL_RCC_OscConfig+0x4b8>)
 800a70c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a70e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a712:	60fb      	str	r3, [r7, #12]
 800a714:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800a716:	2301      	movs	r3, #1
 800a718:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a71a:	4b79      	ldr	r3, [pc, #484]	@ (800a900 <HAL_RCC_OscConfig+0x4bc>)
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a722:	2b00      	cmp	r3, #0
 800a724:	d118      	bne.n	800a758 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a726:	4b76      	ldr	r3, [pc, #472]	@ (800a900 <HAL_RCC_OscConfig+0x4bc>)
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	4a75      	ldr	r2, [pc, #468]	@ (800a900 <HAL_RCC_OscConfig+0x4bc>)
 800a72c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a730:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a732:	f7fd fb43 	bl	8007dbc <HAL_GetTick>
 800a736:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a738:	e008      	b.n	800a74c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a73a:	f7fd fb3f 	bl	8007dbc <HAL_GetTick>
 800a73e:	4602      	mov	r2, r0
 800a740:	693b      	ldr	r3, [r7, #16]
 800a742:	1ad3      	subs	r3, r2, r3
 800a744:	2b02      	cmp	r3, #2
 800a746:	d901      	bls.n	800a74c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800a748:	2303      	movs	r3, #3
 800a74a:	e183      	b.n	800aa54 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a74c:	4b6c      	ldr	r3, [pc, #432]	@ (800a900 <HAL_RCC_OscConfig+0x4bc>)
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a754:	2b00      	cmp	r3, #0
 800a756:	d0f0      	beq.n	800a73a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	689b      	ldr	r3, [r3, #8]
 800a75c:	2b01      	cmp	r3, #1
 800a75e:	d108      	bne.n	800a772 <HAL_RCC_OscConfig+0x32e>
 800a760:	4b66      	ldr	r3, [pc, #408]	@ (800a8fc <HAL_RCC_OscConfig+0x4b8>)
 800a762:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a766:	4a65      	ldr	r2, [pc, #404]	@ (800a8fc <HAL_RCC_OscConfig+0x4b8>)
 800a768:	f043 0301 	orr.w	r3, r3, #1
 800a76c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800a770:	e024      	b.n	800a7bc <HAL_RCC_OscConfig+0x378>
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	689b      	ldr	r3, [r3, #8]
 800a776:	2b05      	cmp	r3, #5
 800a778:	d110      	bne.n	800a79c <HAL_RCC_OscConfig+0x358>
 800a77a:	4b60      	ldr	r3, [pc, #384]	@ (800a8fc <HAL_RCC_OscConfig+0x4b8>)
 800a77c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a780:	4a5e      	ldr	r2, [pc, #376]	@ (800a8fc <HAL_RCC_OscConfig+0x4b8>)
 800a782:	f043 0304 	orr.w	r3, r3, #4
 800a786:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800a78a:	4b5c      	ldr	r3, [pc, #368]	@ (800a8fc <HAL_RCC_OscConfig+0x4b8>)
 800a78c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a790:	4a5a      	ldr	r2, [pc, #360]	@ (800a8fc <HAL_RCC_OscConfig+0x4b8>)
 800a792:	f043 0301 	orr.w	r3, r3, #1
 800a796:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800a79a:	e00f      	b.n	800a7bc <HAL_RCC_OscConfig+0x378>
 800a79c:	4b57      	ldr	r3, [pc, #348]	@ (800a8fc <HAL_RCC_OscConfig+0x4b8>)
 800a79e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a7a2:	4a56      	ldr	r2, [pc, #344]	@ (800a8fc <HAL_RCC_OscConfig+0x4b8>)
 800a7a4:	f023 0301 	bic.w	r3, r3, #1
 800a7a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800a7ac:	4b53      	ldr	r3, [pc, #332]	@ (800a8fc <HAL_RCC_OscConfig+0x4b8>)
 800a7ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a7b2:	4a52      	ldr	r2, [pc, #328]	@ (800a8fc <HAL_RCC_OscConfig+0x4b8>)
 800a7b4:	f023 0304 	bic.w	r3, r3, #4
 800a7b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	689b      	ldr	r3, [r3, #8]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d016      	beq.n	800a7f2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a7c4:	f7fd fafa 	bl	8007dbc <HAL_GetTick>
 800a7c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a7ca:	e00a      	b.n	800a7e2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a7cc:	f7fd faf6 	bl	8007dbc <HAL_GetTick>
 800a7d0:	4602      	mov	r2, r0
 800a7d2:	693b      	ldr	r3, [r7, #16]
 800a7d4:	1ad3      	subs	r3, r2, r3
 800a7d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a7da:	4293      	cmp	r3, r2
 800a7dc:	d901      	bls.n	800a7e2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800a7de:	2303      	movs	r3, #3
 800a7e0:	e138      	b.n	800aa54 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a7e2:	4b46      	ldr	r3, [pc, #280]	@ (800a8fc <HAL_RCC_OscConfig+0x4b8>)
 800a7e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a7e8:	f003 0302 	and.w	r3, r3, #2
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d0ed      	beq.n	800a7cc <HAL_RCC_OscConfig+0x388>
 800a7f0:	e015      	b.n	800a81e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a7f2:	f7fd fae3 	bl	8007dbc <HAL_GetTick>
 800a7f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a7f8:	e00a      	b.n	800a810 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a7fa:	f7fd fadf 	bl	8007dbc <HAL_GetTick>
 800a7fe:	4602      	mov	r2, r0
 800a800:	693b      	ldr	r3, [r7, #16]
 800a802:	1ad3      	subs	r3, r2, r3
 800a804:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a808:	4293      	cmp	r3, r2
 800a80a:	d901      	bls.n	800a810 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800a80c:	2303      	movs	r3, #3
 800a80e:	e121      	b.n	800aa54 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a810:	4b3a      	ldr	r3, [pc, #232]	@ (800a8fc <HAL_RCC_OscConfig+0x4b8>)
 800a812:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a816:	f003 0302 	and.w	r3, r3, #2
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d1ed      	bne.n	800a7fa <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a81e:	7ffb      	ldrb	r3, [r7, #31]
 800a820:	2b01      	cmp	r3, #1
 800a822:	d105      	bne.n	800a830 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a824:	4b35      	ldr	r3, [pc, #212]	@ (800a8fc <HAL_RCC_OscConfig+0x4b8>)
 800a826:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a828:	4a34      	ldr	r2, [pc, #208]	@ (800a8fc <HAL_RCC_OscConfig+0x4b8>)
 800a82a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a82e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	f003 0320 	and.w	r3, r3, #32
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d03c      	beq.n	800a8b6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	699b      	ldr	r3, [r3, #24]
 800a840:	2b00      	cmp	r3, #0
 800a842:	d01c      	beq.n	800a87e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a844:	4b2d      	ldr	r3, [pc, #180]	@ (800a8fc <HAL_RCC_OscConfig+0x4b8>)
 800a846:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a84a:	4a2c      	ldr	r2, [pc, #176]	@ (800a8fc <HAL_RCC_OscConfig+0x4b8>)
 800a84c:	f043 0301 	orr.w	r3, r3, #1
 800a850:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a854:	f7fd fab2 	bl	8007dbc <HAL_GetTick>
 800a858:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800a85a:	e008      	b.n	800a86e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a85c:	f7fd faae 	bl	8007dbc <HAL_GetTick>
 800a860:	4602      	mov	r2, r0
 800a862:	693b      	ldr	r3, [r7, #16]
 800a864:	1ad3      	subs	r3, r2, r3
 800a866:	2b02      	cmp	r3, #2
 800a868:	d901      	bls.n	800a86e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800a86a:	2303      	movs	r3, #3
 800a86c:	e0f2      	b.n	800aa54 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800a86e:	4b23      	ldr	r3, [pc, #140]	@ (800a8fc <HAL_RCC_OscConfig+0x4b8>)
 800a870:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a874:	f003 0302 	and.w	r3, r3, #2
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d0ef      	beq.n	800a85c <HAL_RCC_OscConfig+0x418>
 800a87c:	e01b      	b.n	800a8b6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a87e:	4b1f      	ldr	r3, [pc, #124]	@ (800a8fc <HAL_RCC_OscConfig+0x4b8>)
 800a880:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a884:	4a1d      	ldr	r2, [pc, #116]	@ (800a8fc <HAL_RCC_OscConfig+0x4b8>)
 800a886:	f023 0301 	bic.w	r3, r3, #1
 800a88a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a88e:	f7fd fa95 	bl	8007dbc <HAL_GetTick>
 800a892:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800a894:	e008      	b.n	800a8a8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a896:	f7fd fa91 	bl	8007dbc <HAL_GetTick>
 800a89a:	4602      	mov	r2, r0
 800a89c:	693b      	ldr	r3, [r7, #16]
 800a89e:	1ad3      	subs	r3, r2, r3
 800a8a0:	2b02      	cmp	r3, #2
 800a8a2:	d901      	bls.n	800a8a8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800a8a4:	2303      	movs	r3, #3
 800a8a6:	e0d5      	b.n	800aa54 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800a8a8:	4b14      	ldr	r3, [pc, #80]	@ (800a8fc <HAL_RCC_OscConfig+0x4b8>)
 800a8aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a8ae:	f003 0302 	and.w	r3, r3, #2
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d1ef      	bne.n	800a896 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	69db      	ldr	r3, [r3, #28]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	f000 80c9 	beq.w	800aa52 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a8c0:	4b0e      	ldr	r3, [pc, #56]	@ (800a8fc <HAL_RCC_OscConfig+0x4b8>)
 800a8c2:	689b      	ldr	r3, [r3, #8]
 800a8c4:	f003 030c 	and.w	r3, r3, #12
 800a8c8:	2b0c      	cmp	r3, #12
 800a8ca:	f000 8083 	beq.w	800a9d4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	69db      	ldr	r3, [r3, #28]
 800a8d2:	2b02      	cmp	r3, #2
 800a8d4:	d15e      	bne.n	800a994 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a8d6:	4b09      	ldr	r3, [pc, #36]	@ (800a8fc <HAL_RCC_OscConfig+0x4b8>)
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	4a08      	ldr	r2, [pc, #32]	@ (800a8fc <HAL_RCC_OscConfig+0x4b8>)
 800a8dc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a8e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a8e2:	f7fd fa6b 	bl	8007dbc <HAL_GetTick>
 800a8e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a8e8:	e00c      	b.n	800a904 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a8ea:	f7fd fa67 	bl	8007dbc <HAL_GetTick>
 800a8ee:	4602      	mov	r2, r0
 800a8f0:	693b      	ldr	r3, [r7, #16]
 800a8f2:	1ad3      	subs	r3, r2, r3
 800a8f4:	2b02      	cmp	r3, #2
 800a8f6:	d905      	bls.n	800a904 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800a8f8:	2303      	movs	r3, #3
 800a8fa:	e0ab      	b.n	800aa54 <HAL_RCC_OscConfig+0x610>
 800a8fc:	40021000 	.word	0x40021000
 800a900:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a904:	4b55      	ldr	r3, [pc, #340]	@ (800aa5c <HAL_RCC_OscConfig+0x618>)
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d1ec      	bne.n	800a8ea <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a910:	4b52      	ldr	r3, [pc, #328]	@ (800aa5c <HAL_RCC_OscConfig+0x618>)
 800a912:	68da      	ldr	r2, [r3, #12]
 800a914:	4b52      	ldr	r3, [pc, #328]	@ (800aa60 <HAL_RCC_OscConfig+0x61c>)
 800a916:	4013      	ands	r3, r2
 800a918:	687a      	ldr	r2, [r7, #4]
 800a91a:	6a11      	ldr	r1, [r2, #32]
 800a91c:	687a      	ldr	r2, [r7, #4]
 800a91e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800a920:	3a01      	subs	r2, #1
 800a922:	0112      	lsls	r2, r2, #4
 800a924:	4311      	orrs	r1, r2
 800a926:	687a      	ldr	r2, [r7, #4]
 800a928:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800a92a:	0212      	lsls	r2, r2, #8
 800a92c:	4311      	orrs	r1, r2
 800a92e:	687a      	ldr	r2, [r7, #4]
 800a930:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800a932:	0852      	lsrs	r2, r2, #1
 800a934:	3a01      	subs	r2, #1
 800a936:	0552      	lsls	r2, r2, #21
 800a938:	4311      	orrs	r1, r2
 800a93a:	687a      	ldr	r2, [r7, #4]
 800a93c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800a93e:	0852      	lsrs	r2, r2, #1
 800a940:	3a01      	subs	r2, #1
 800a942:	0652      	lsls	r2, r2, #25
 800a944:	4311      	orrs	r1, r2
 800a946:	687a      	ldr	r2, [r7, #4]
 800a948:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800a94a:	06d2      	lsls	r2, r2, #27
 800a94c:	430a      	orrs	r2, r1
 800a94e:	4943      	ldr	r1, [pc, #268]	@ (800aa5c <HAL_RCC_OscConfig+0x618>)
 800a950:	4313      	orrs	r3, r2
 800a952:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a954:	4b41      	ldr	r3, [pc, #260]	@ (800aa5c <HAL_RCC_OscConfig+0x618>)
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	4a40      	ldr	r2, [pc, #256]	@ (800aa5c <HAL_RCC_OscConfig+0x618>)
 800a95a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a95e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800a960:	4b3e      	ldr	r3, [pc, #248]	@ (800aa5c <HAL_RCC_OscConfig+0x618>)
 800a962:	68db      	ldr	r3, [r3, #12]
 800a964:	4a3d      	ldr	r2, [pc, #244]	@ (800aa5c <HAL_RCC_OscConfig+0x618>)
 800a966:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a96a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a96c:	f7fd fa26 	bl	8007dbc <HAL_GetTick>
 800a970:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a972:	e008      	b.n	800a986 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a974:	f7fd fa22 	bl	8007dbc <HAL_GetTick>
 800a978:	4602      	mov	r2, r0
 800a97a:	693b      	ldr	r3, [r7, #16]
 800a97c:	1ad3      	subs	r3, r2, r3
 800a97e:	2b02      	cmp	r3, #2
 800a980:	d901      	bls.n	800a986 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800a982:	2303      	movs	r3, #3
 800a984:	e066      	b.n	800aa54 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a986:	4b35      	ldr	r3, [pc, #212]	@ (800aa5c <HAL_RCC_OscConfig+0x618>)
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d0f0      	beq.n	800a974 <HAL_RCC_OscConfig+0x530>
 800a992:	e05e      	b.n	800aa52 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a994:	4b31      	ldr	r3, [pc, #196]	@ (800aa5c <HAL_RCC_OscConfig+0x618>)
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	4a30      	ldr	r2, [pc, #192]	@ (800aa5c <HAL_RCC_OscConfig+0x618>)
 800a99a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a99e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a9a0:	f7fd fa0c 	bl	8007dbc <HAL_GetTick>
 800a9a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a9a6:	e008      	b.n	800a9ba <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a9a8:	f7fd fa08 	bl	8007dbc <HAL_GetTick>
 800a9ac:	4602      	mov	r2, r0
 800a9ae:	693b      	ldr	r3, [r7, #16]
 800a9b0:	1ad3      	subs	r3, r2, r3
 800a9b2:	2b02      	cmp	r3, #2
 800a9b4:	d901      	bls.n	800a9ba <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800a9b6:	2303      	movs	r3, #3
 800a9b8:	e04c      	b.n	800aa54 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a9ba:	4b28      	ldr	r3, [pc, #160]	@ (800aa5c <HAL_RCC_OscConfig+0x618>)
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d1f0      	bne.n	800a9a8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800a9c6:	4b25      	ldr	r3, [pc, #148]	@ (800aa5c <HAL_RCC_OscConfig+0x618>)
 800a9c8:	68da      	ldr	r2, [r3, #12]
 800a9ca:	4924      	ldr	r1, [pc, #144]	@ (800aa5c <HAL_RCC_OscConfig+0x618>)
 800a9cc:	4b25      	ldr	r3, [pc, #148]	@ (800aa64 <HAL_RCC_OscConfig+0x620>)
 800a9ce:	4013      	ands	r3, r2
 800a9d0:	60cb      	str	r3, [r1, #12]
 800a9d2:	e03e      	b.n	800aa52 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	69db      	ldr	r3, [r3, #28]
 800a9d8:	2b01      	cmp	r3, #1
 800a9da:	d101      	bne.n	800a9e0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800a9dc:	2301      	movs	r3, #1
 800a9de:	e039      	b.n	800aa54 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800a9e0:	4b1e      	ldr	r3, [pc, #120]	@ (800aa5c <HAL_RCC_OscConfig+0x618>)
 800a9e2:	68db      	ldr	r3, [r3, #12]
 800a9e4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a9e6:	697b      	ldr	r3, [r7, #20]
 800a9e8:	f003 0203 	and.w	r2, r3, #3
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	6a1b      	ldr	r3, [r3, #32]
 800a9f0:	429a      	cmp	r2, r3
 800a9f2:	d12c      	bne.n	800aa4e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a9f4:	697b      	ldr	r3, [r7, #20]
 800a9f6:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9fe:	3b01      	subs	r3, #1
 800aa00:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800aa02:	429a      	cmp	r2, r3
 800aa04:	d123      	bne.n	800aa4e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800aa06:	697b      	ldr	r3, [r7, #20]
 800aa08:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa10:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800aa12:	429a      	cmp	r2, r3
 800aa14:	d11b      	bne.n	800aa4e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800aa16:	697b      	ldr	r3, [r7, #20]
 800aa18:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa20:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800aa22:	429a      	cmp	r2, r3
 800aa24:	d113      	bne.n	800aa4e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800aa26:	697b      	ldr	r3, [r7, #20]
 800aa28:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa30:	085b      	lsrs	r3, r3, #1
 800aa32:	3b01      	subs	r3, #1
 800aa34:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800aa36:	429a      	cmp	r2, r3
 800aa38:	d109      	bne.n	800aa4e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800aa3a:	697b      	ldr	r3, [r7, #20]
 800aa3c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa44:	085b      	lsrs	r3, r3, #1
 800aa46:	3b01      	subs	r3, #1
 800aa48:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800aa4a:	429a      	cmp	r2, r3
 800aa4c:	d001      	beq.n	800aa52 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800aa4e:	2301      	movs	r3, #1
 800aa50:	e000      	b.n	800aa54 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800aa52:	2300      	movs	r3, #0
}
 800aa54:	4618      	mov	r0, r3
 800aa56:	3720      	adds	r7, #32
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	bd80      	pop	{r7, pc}
 800aa5c:	40021000 	.word	0x40021000
 800aa60:	019f800c 	.word	0x019f800c
 800aa64:	feeefffc 	.word	0xfeeefffc

0800aa68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	b086      	sub	sp, #24
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
 800aa70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800aa72:	2300      	movs	r3, #0
 800aa74:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d101      	bne.n	800aa80 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800aa7c:	2301      	movs	r3, #1
 800aa7e:	e11e      	b.n	800acbe <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800aa80:	4b91      	ldr	r3, [pc, #580]	@ (800acc8 <HAL_RCC_ClockConfig+0x260>)
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	f003 030f 	and.w	r3, r3, #15
 800aa88:	683a      	ldr	r2, [r7, #0]
 800aa8a:	429a      	cmp	r2, r3
 800aa8c:	d910      	bls.n	800aab0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aa8e:	4b8e      	ldr	r3, [pc, #568]	@ (800acc8 <HAL_RCC_ClockConfig+0x260>)
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	f023 020f 	bic.w	r2, r3, #15
 800aa96:	498c      	ldr	r1, [pc, #560]	@ (800acc8 <HAL_RCC_ClockConfig+0x260>)
 800aa98:	683b      	ldr	r3, [r7, #0]
 800aa9a:	4313      	orrs	r3, r2
 800aa9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800aa9e:	4b8a      	ldr	r3, [pc, #552]	@ (800acc8 <HAL_RCC_ClockConfig+0x260>)
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	f003 030f 	and.w	r3, r3, #15
 800aaa6:	683a      	ldr	r2, [r7, #0]
 800aaa8:	429a      	cmp	r2, r3
 800aaaa:	d001      	beq.n	800aab0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800aaac:	2301      	movs	r3, #1
 800aaae:	e106      	b.n	800acbe <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	f003 0301 	and.w	r3, r3, #1
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d073      	beq.n	800aba4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	685b      	ldr	r3, [r3, #4]
 800aac0:	2b03      	cmp	r3, #3
 800aac2:	d129      	bne.n	800ab18 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800aac4:	4b81      	ldr	r3, [pc, #516]	@ (800accc <HAL_RCC_ClockConfig+0x264>)
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d101      	bne.n	800aad4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800aad0:	2301      	movs	r3, #1
 800aad2:	e0f4      	b.n	800acbe <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800aad4:	f000 f99e 	bl	800ae14 <RCC_GetSysClockFreqFromPLLSource>
 800aad8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800aada:	693b      	ldr	r3, [r7, #16]
 800aadc:	4a7c      	ldr	r2, [pc, #496]	@ (800acd0 <HAL_RCC_ClockConfig+0x268>)
 800aade:	4293      	cmp	r3, r2
 800aae0:	d93f      	bls.n	800ab62 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800aae2:	4b7a      	ldr	r3, [pc, #488]	@ (800accc <HAL_RCC_ClockConfig+0x264>)
 800aae4:	689b      	ldr	r3, [r3, #8]
 800aae6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d009      	beq.n	800ab02 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d033      	beq.n	800ab62 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d12f      	bne.n	800ab62 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800ab02:	4b72      	ldr	r3, [pc, #456]	@ (800accc <HAL_RCC_ClockConfig+0x264>)
 800ab04:	689b      	ldr	r3, [r3, #8]
 800ab06:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ab0a:	4a70      	ldr	r2, [pc, #448]	@ (800accc <HAL_RCC_ClockConfig+0x264>)
 800ab0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ab10:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800ab12:	2380      	movs	r3, #128	@ 0x80
 800ab14:	617b      	str	r3, [r7, #20]
 800ab16:	e024      	b.n	800ab62 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	685b      	ldr	r3, [r3, #4]
 800ab1c:	2b02      	cmp	r3, #2
 800ab1e:	d107      	bne.n	800ab30 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800ab20:	4b6a      	ldr	r3, [pc, #424]	@ (800accc <HAL_RCC_ClockConfig+0x264>)
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d109      	bne.n	800ab40 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800ab2c:	2301      	movs	r3, #1
 800ab2e:	e0c6      	b.n	800acbe <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800ab30:	4b66      	ldr	r3, [pc, #408]	@ (800accc <HAL_RCC_ClockConfig+0x264>)
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d101      	bne.n	800ab40 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800ab3c:	2301      	movs	r3, #1
 800ab3e:	e0be      	b.n	800acbe <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800ab40:	f000 f8ce 	bl	800ace0 <HAL_RCC_GetSysClockFreq>
 800ab44:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800ab46:	693b      	ldr	r3, [r7, #16]
 800ab48:	4a61      	ldr	r2, [pc, #388]	@ (800acd0 <HAL_RCC_ClockConfig+0x268>)
 800ab4a:	4293      	cmp	r3, r2
 800ab4c:	d909      	bls.n	800ab62 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800ab4e:	4b5f      	ldr	r3, [pc, #380]	@ (800accc <HAL_RCC_ClockConfig+0x264>)
 800ab50:	689b      	ldr	r3, [r3, #8]
 800ab52:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ab56:	4a5d      	ldr	r2, [pc, #372]	@ (800accc <HAL_RCC_ClockConfig+0x264>)
 800ab58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ab5c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800ab5e:	2380      	movs	r3, #128	@ 0x80
 800ab60:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800ab62:	4b5a      	ldr	r3, [pc, #360]	@ (800accc <HAL_RCC_ClockConfig+0x264>)
 800ab64:	689b      	ldr	r3, [r3, #8]
 800ab66:	f023 0203 	bic.w	r2, r3, #3
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	685b      	ldr	r3, [r3, #4]
 800ab6e:	4957      	ldr	r1, [pc, #348]	@ (800accc <HAL_RCC_ClockConfig+0x264>)
 800ab70:	4313      	orrs	r3, r2
 800ab72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ab74:	f7fd f922 	bl	8007dbc <HAL_GetTick>
 800ab78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ab7a:	e00a      	b.n	800ab92 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ab7c:	f7fd f91e 	bl	8007dbc <HAL_GetTick>
 800ab80:	4602      	mov	r2, r0
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	1ad3      	subs	r3, r2, r3
 800ab86:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ab8a:	4293      	cmp	r3, r2
 800ab8c:	d901      	bls.n	800ab92 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800ab8e:	2303      	movs	r3, #3
 800ab90:	e095      	b.n	800acbe <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ab92:	4b4e      	ldr	r3, [pc, #312]	@ (800accc <HAL_RCC_ClockConfig+0x264>)
 800ab94:	689b      	ldr	r3, [r3, #8]
 800ab96:	f003 020c 	and.w	r2, r3, #12
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	685b      	ldr	r3, [r3, #4]
 800ab9e:	009b      	lsls	r3, r3, #2
 800aba0:	429a      	cmp	r2, r3
 800aba2:	d1eb      	bne.n	800ab7c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	f003 0302 	and.w	r3, r3, #2
 800abac:	2b00      	cmp	r3, #0
 800abae:	d023      	beq.n	800abf8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	f003 0304 	and.w	r3, r3, #4
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d005      	beq.n	800abc8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800abbc:	4b43      	ldr	r3, [pc, #268]	@ (800accc <HAL_RCC_ClockConfig+0x264>)
 800abbe:	689b      	ldr	r3, [r3, #8]
 800abc0:	4a42      	ldr	r2, [pc, #264]	@ (800accc <HAL_RCC_ClockConfig+0x264>)
 800abc2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800abc6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	f003 0308 	and.w	r3, r3, #8
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d007      	beq.n	800abe4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800abd4:	4b3d      	ldr	r3, [pc, #244]	@ (800accc <HAL_RCC_ClockConfig+0x264>)
 800abd6:	689b      	ldr	r3, [r3, #8]
 800abd8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800abdc:	4a3b      	ldr	r2, [pc, #236]	@ (800accc <HAL_RCC_ClockConfig+0x264>)
 800abde:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800abe2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800abe4:	4b39      	ldr	r3, [pc, #228]	@ (800accc <HAL_RCC_ClockConfig+0x264>)
 800abe6:	689b      	ldr	r3, [r3, #8]
 800abe8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	689b      	ldr	r3, [r3, #8]
 800abf0:	4936      	ldr	r1, [pc, #216]	@ (800accc <HAL_RCC_ClockConfig+0x264>)
 800abf2:	4313      	orrs	r3, r2
 800abf4:	608b      	str	r3, [r1, #8]
 800abf6:	e008      	b.n	800ac0a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800abf8:	697b      	ldr	r3, [r7, #20]
 800abfa:	2b80      	cmp	r3, #128	@ 0x80
 800abfc:	d105      	bne.n	800ac0a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800abfe:	4b33      	ldr	r3, [pc, #204]	@ (800accc <HAL_RCC_ClockConfig+0x264>)
 800ac00:	689b      	ldr	r3, [r3, #8]
 800ac02:	4a32      	ldr	r2, [pc, #200]	@ (800accc <HAL_RCC_ClockConfig+0x264>)
 800ac04:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ac08:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ac0a:	4b2f      	ldr	r3, [pc, #188]	@ (800acc8 <HAL_RCC_ClockConfig+0x260>)
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	f003 030f 	and.w	r3, r3, #15
 800ac12:	683a      	ldr	r2, [r7, #0]
 800ac14:	429a      	cmp	r2, r3
 800ac16:	d21d      	bcs.n	800ac54 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ac18:	4b2b      	ldr	r3, [pc, #172]	@ (800acc8 <HAL_RCC_ClockConfig+0x260>)
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	f023 020f 	bic.w	r2, r3, #15
 800ac20:	4929      	ldr	r1, [pc, #164]	@ (800acc8 <HAL_RCC_ClockConfig+0x260>)
 800ac22:	683b      	ldr	r3, [r7, #0]
 800ac24:	4313      	orrs	r3, r2
 800ac26:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800ac28:	f7fd f8c8 	bl	8007dbc <HAL_GetTick>
 800ac2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ac2e:	e00a      	b.n	800ac46 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ac30:	f7fd f8c4 	bl	8007dbc <HAL_GetTick>
 800ac34:	4602      	mov	r2, r0
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	1ad3      	subs	r3, r2, r3
 800ac3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ac3e:	4293      	cmp	r3, r2
 800ac40:	d901      	bls.n	800ac46 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800ac42:	2303      	movs	r3, #3
 800ac44:	e03b      	b.n	800acbe <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ac46:	4b20      	ldr	r3, [pc, #128]	@ (800acc8 <HAL_RCC_ClockConfig+0x260>)
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	f003 030f 	and.w	r3, r3, #15
 800ac4e:	683a      	ldr	r2, [r7, #0]
 800ac50:	429a      	cmp	r2, r3
 800ac52:	d1ed      	bne.n	800ac30 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	f003 0304 	and.w	r3, r3, #4
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d008      	beq.n	800ac72 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ac60:	4b1a      	ldr	r3, [pc, #104]	@ (800accc <HAL_RCC_ClockConfig+0x264>)
 800ac62:	689b      	ldr	r3, [r3, #8]
 800ac64:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	68db      	ldr	r3, [r3, #12]
 800ac6c:	4917      	ldr	r1, [pc, #92]	@ (800accc <HAL_RCC_ClockConfig+0x264>)
 800ac6e:	4313      	orrs	r3, r2
 800ac70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	f003 0308 	and.w	r3, r3, #8
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d009      	beq.n	800ac92 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800ac7e:	4b13      	ldr	r3, [pc, #76]	@ (800accc <HAL_RCC_ClockConfig+0x264>)
 800ac80:	689b      	ldr	r3, [r3, #8]
 800ac82:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	691b      	ldr	r3, [r3, #16]
 800ac8a:	00db      	lsls	r3, r3, #3
 800ac8c:	490f      	ldr	r1, [pc, #60]	@ (800accc <HAL_RCC_ClockConfig+0x264>)
 800ac8e:	4313      	orrs	r3, r2
 800ac90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800ac92:	f000 f825 	bl	800ace0 <HAL_RCC_GetSysClockFreq>
 800ac96:	4602      	mov	r2, r0
 800ac98:	4b0c      	ldr	r3, [pc, #48]	@ (800accc <HAL_RCC_ClockConfig+0x264>)
 800ac9a:	689b      	ldr	r3, [r3, #8]
 800ac9c:	091b      	lsrs	r3, r3, #4
 800ac9e:	f003 030f 	and.w	r3, r3, #15
 800aca2:	490c      	ldr	r1, [pc, #48]	@ (800acd4 <HAL_RCC_ClockConfig+0x26c>)
 800aca4:	5ccb      	ldrb	r3, [r1, r3]
 800aca6:	f003 031f 	and.w	r3, r3, #31
 800acaa:	fa22 f303 	lsr.w	r3, r2, r3
 800acae:	4a0a      	ldr	r2, [pc, #40]	@ (800acd8 <HAL_RCC_ClockConfig+0x270>)
 800acb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800acb2:	4b0a      	ldr	r3, [pc, #40]	@ (800acdc <HAL_RCC_ClockConfig+0x274>)
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	4618      	mov	r0, r3
 800acb8:	f7fd f834 	bl	8007d24 <HAL_InitTick>
 800acbc:	4603      	mov	r3, r0
}
 800acbe:	4618      	mov	r0, r3
 800acc0:	3718      	adds	r7, #24
 800acc2:	46bd      	mov	sp, r7
 800acc4:	bd80      	pop	{r7, pc}
 800acc6:	bf00      	nop
 800acc8:	40022000 	.word	0x40022000
 800accc:	40021000 	.word	0x40021000
 800acd0:	04c4b400 	.word	0x04c4b400
 800acd4:	080113b8 	.word	0x080113b8
 800acd8:	200000fc 	.word	0x200000fc
 800acdc:	20000100 	.word	0x20000100

0800ace0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ace0:	b480      	push	{r7}
 800ace2:	b087      	sub	sp, #28
 800ace4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800ace6:	4b2c      	ldr	r3, [pc, #176]	@ (800ad98 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ace8:	689b      	ldr	r3, [r3, #8]
 800acea:	f003 030c 	and.w	r3, r3, #12
 800acee:	2b04      	cmp	r3, #4
 800acf0:	d102      	bne.n	800acf8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800acf2:	4b2a      	ldr	r3, [pc, #168]	@ (800ad9c <HAL_RCC_GetSysClockFreq+0xbc>)
 800acf4:	613b      	str	r3, [r7, #16]
 800acf6:	e047      	b.n	800ad88 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800acf8:	4b27      	ldr	r3, [pc, #156]	@ (800ad98 <HAL_RCC_GetSysClockFreq+0xb8>)
 800acfa:	689b      	ldr	r3, [r3, #8]
 800acfc:	f003 030c 	and.w	r3, r3, #12
 800ad00:	2b08      	cmp	r3, #8
 800ad02:	d102      	bne.n	800ad0a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800ad04:	4b26      	ldr	r3, [pc, #152]	@ (800ada0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800ad06:	613b      	str	r3, [r7, #16]
 800ad08:	e03e      	b.n	800ad88 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800ad0a:	4b23      	ldr	r3, [pc, #140]	@ (800ad98 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ad0c:	689b      	ldr	r3, [r3, #8]
 800ad0e:	f003 030c 	and.w	r3, r3, #12
 800ad12:	2b0c      	cmp	r3, #12
 800ad14:	d136      	bne.n	800ad84 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800ad16:	4b20      	ldr	r3, [pc, #128]	@ (800ad98 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ad18:	68db      	ldr	r3, [r3, #12]
 800ad1a:	f003 0303 	and.w	r3, r3, #3
 800ad1e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800ad20:	4b1d      	ldr	r3, [pc, #116]	@ (800ad98 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ad22:	68db      	ldr	r3, [r3, #12]
 800ad24:	091b      	lsrs	r3, r3, #4
 800ad26:	f003 030f 	and.w	r3, r3, #15
 800ad2a:	3301      	adds	r3, #1
 800ad2c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	2b03      	cmp	r3, #3
 800ad32:	d10c      	bne.n	800ad4e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800ad34:	4a1a      	ldr	r2, [pc, #104]	@ (800ada0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800ad36:	68bb      	ldr	r3, [r7, #8]
 800ad38:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad3c:	4a16      	ldr	r2, [pc, #88]	@ (800ad98 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ad3e:	68d2      	ldr	r2, [r2, #12]
 800ad40:	0a12      	lsrs	r2, r2, #8
 800ad42:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800ad46:	fb02 f303 	mul.w	r3, r2, r3
 800ad4a:	617b      	str	r3, [r7, #20]
      break;
 800ad4c:	e00c      	b.n	800ad68 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800ad4e:	4a13      	ldr	r2, [pc, #76]	@ (800ad9c <HAL_RCC_GetSysClockFreq+0xbc>)
 800ad50:	68bb      	ldr	r3, [r7, #8]
 800ad52:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad56:	4a10      	ldr	r2, [pc, #64]	@ (800ad98 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ad58:	68d2      	ldr	r2, [r2, #12]
 800ad5a:	0a12      	lsrs	r2, r2, #8
 800ad5c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800ad60:	fb02 f303 	mul.w	r3, r2, r3
 800ad64:	617b      	str	r3, [r7, #20]
      break;
 800ad66:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800ad68:	4b0b      	ldr	r3, [pc, #44]	@ (800ad98 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ad6a:	68db      	ldr	r3, [r3, #12]
 800ad6c:	0e5b      	lsrs	r3, r3, #25
 800ad6e:	f003 0303 	and.w	r3, r3, #3
 800ad72:	3301      	adds	r3, #1
 800ad74:	005b      	lsls	r3, r3, #1
 800ad76:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800ad78:	697a      	ldr	r2, [r7, #20]
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad80:	613b      	str	r3, [r7, #16]
 800ad82:	e001      	b.n	800ad88 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800ad84:	2300      	movs	r3, #0
 800ad86:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800ad88:	693b      	ldr	r3, [r7, #16]
}
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	371c      	adds	r7, #28
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad94:	4770      	bx	lr
 800ad96:	bf00      	nop
 800ad98:	40021000 	.word	0x40021000
 800ad9c:	00f42400 	.word	0x00f42400
 800ada0:	016e3600 	.word	0x016e3600

0800ada4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ada4:	b480      	push	{r7}
 800ada6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ada8:	4b03      	ldr	r3, [pc, #12]	@ (800adb8 <HAL_RCC_GetHCLKFreq+0x14>)
 800adaa:	681b      	ldr	r3, [r3, #0]
}
 800adac:	4618      	mov	r0, r3
 800adae:	46bd      	mov	sp, r7
 800adb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb4:	4770      	bx	lr
 800adb6:	bf00      	nop
 800adb8:	200000fc 	.word	0x200000fc

0800adbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800adbc:	b580      	push	{r7, lr}
 800adbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800adc0:	f7ff fff0 	bl	800ada4 <HAL_RCC_GetHCLKFreq>
 800adc4:	4602      	mov	r2, r0
 800adc6:	4b06      	ldr	r3, [pc, #24]	@ (800ade0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800adc8:	689b      	ldr	r3, [r3, #8]
 800adca:	0a1b      	lsrs	r3, r3, #8
 800adcc:	f003 0307 	and.w	r3, r3, #7
 800add0:	4904      	ldr	r1, [pc, #16]	@ (800ade4 <HAL_RCC_GetPCLK1Freq+0x28>)
 800add2:	5ccb      	ldrb	r3, [r1, r3]
 800add4:	f003 031f 	and.w	r3, r3, #31
 800add8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800addc:	4618      	mov	r0, r3
 800adde:	bd80      	pop	{r7, pc}
 800ade0:	40021000 	.word	0x40021000
 800ade4:	080113c8 	.word	0x080113c8

0800ade8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ade8:	b580      	push	{r7, lr}
 800adea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800adec:	f7ff ffda 	bl	800ada4 <HAL_RCC_GetHCLKFreq>
 800adf0:	4602      	mov	r2, r0
 800adf2:	4b06      	ldr	r3, [pc, #24]	@ (800ae0c <HAL_RCC_GetPCLK2Freq+0x24>)
 800adf4:	689b      	ldr	r3, [r3, #8]
 800adf6:	0adb      	lsrs	r3, r3, #11
 800adf8:	f003 0307 	and.w	r3, r3, #7
 800adfc:	4904      	ldr	r1, [pc, #16]	@ (800ae10 <HAL_RCC_GetPCLK2Freq+0x28>)
 800adfe:	5ccb      	ldrb	r3, [r1, r3]
 800ae00:	f003 031f 	and.w	r3, r3, #31
 800ae04:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ae08:	4618      	mov	r0, r3
 800ae0a:	bd80      	pop	{r7, pc}
 800ae0c:	40021000 	.word	0x40021000
 800ae10:	080113c8 	.word	0x080113c8

0800ae14 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800ae14:	b480      	push	{r7}
 800ae16:	b087      	sub	sp, #28
 800ae18:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800ae1a:	4b1e      	ldr	r3, [pc, #120]	@ (800ae94 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800ae1c:	68db      	ldr	r3, [r3, #12]
 800ae1e:	f003 0303 	and.w	r3, r3, #3
 800ae22:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800ae24:	4b1b      	ldr	r3, [pc, #108]	@ (800ae94 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800ae26:	68db      	ldr	r3, [r3, #12]
 800ae28:	091b      	lsrs	r3, r3, #4
 800ae2a:	f003 030f 	and.w	r3, r3, #15
 800ae2e:	3301      	adds	r3, #1
 800ae30:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800ae32:	693b      	ldr	r3, [r7, #16]
 800ae34:	2b03      	cmp	r3, #3
 800ae36:	d10c      	bne.n	800ae52 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800ae38:	4a17      	ldr	r2, [pc, #92]	@ (800ae98 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae40:	4a14      	ldr	r2, [pc, #80]	@ (800ae94 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800ae42:	68d2      	ldr	r2, [r2, #12]
 800ae44:	0a12      	lsrs	r2, r2, #8
 800ae46:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800ae4a:	fb02 f303 	mul.w	r3, r2, r3
 800ae4e:	617b      	str	r3, [r7, #20]
    break;
 800ae50:	e00c      	b.n	800ae6c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800ae52:	4a12      	ldr	r2, [pc, #72]	@ (800ae9c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae5a:	4a0e      	ldr	r2, [pc, #56]	@ (800ae94 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800ae5c:	68d2      	ldr	r2, [r2, #12]
 800ae5e:	0a12      	lsrs	r2, r2, #8
 800ae60:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800ae64:	fb02 f303 	mul.w	r3, r2, r3
 800ae68:	617b      	str	r3, [r7, #20]
    break;
 800ae6a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800ae6c:	4b09      	ldr	r3, [pc, #36]	@ (800ae94 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800ae6e:	68db      	ldr	r3, [r3, #12]
 800ae70:	0e5b      	lsrs	r3, r3, #25
 800ae72:	f003 0303 	and.w	r3, r3, #3
 800ae76:	3301      	adds	r3, #1
 800ae78:	005b      	lsls	r3, r3, #1
 800ae7a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800ae7c:	697a      	ldr	r2, [r7, #20]
 800ae7e:	68bb      	ldr	r3, [r7, #8]
 800ae80:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae84:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800ae86:	687b      	ldr	r3, [r7, #4]
}
 800ae88:	4618      	mov	r0, r3
 800ae8a:	371c      	adds	r7, #28
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae92:	4770      	bx	lr
 800ae94:	40021000 	.word	0x40021000
 800ae98:	016e3600 	.word	0x016e3600
 800ae9c:	00f42400 	.word	0x00f42400

0800aea0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b086      	sub	sp, #24
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800aea8:	2300      	movs	r3, #0
 800aeaa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800aeac:	2300      	movs	r3, #0
 800aeae:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	f000 8098 	beq.w	800afee <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800aebe:	2300      	movs	r3, #0
 800aec0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800aec2:	4b43      	ldr	r3, [pc, #268]	@ (800afd0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800aec4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aec6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d10d      	bne.n	800aeea <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800aece:	4b40      	ldr	r3, [pc, #256]	@ (800afd0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800aed0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aed2:	4a3f      	ldr	r2, [pc, #252]	@ (800afd0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800aed4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800aed8:	6593      	str	r3, [r2, #88]	@ 0x58
 800aeda:	4b3d      	ldr	r3, [pc, #244]	@ (800afd0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800aedc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aede:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800aee2:	60bb      	str	r3, [r7, #8]
 800aee4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800aee6:	2301      	movs	r3, #1
 800aee8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800aeea:	4b3a      	ldr	r3, [pc, #232]	@ (800afd4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	4a39      	ldr	r2, [pc, #228]	@ (800afd4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800aef0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800aef4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800aef6:	f7fc ff61 	bl	8007dbc <HAL_GetTick>
 800aefa:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800aefc:	e009      	b.n	800af12 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800aefe:	f7fc ff5d 	bl	8007dbc <HAL_GetTick>
 800af02:	4602      	mov	r2, r0
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	1ad3      	subs	r3, r2, r3
 800af08:	2b02      	cmp	r3, #2
 800af0a:	d902      	bls.n	800af12 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800af0c:	2303      	movs	r3, #3
 800af0e:	74fb      	strb	r3, [r7, #19]
        break;
 800af10:	e005      	b.n	800af1e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800af12:	4b30      	ldr	r3, [pc, #192]	@ (800afd4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d0ef      	beq.n	800aefe <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800af1e:	7cfb      	ldrb	r3, [r7, #19]
 800af20:	2b00      	cmp	r3, #0
 800af22:	d159      	bne.n	800afd8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800af24:	4b2a      	ldr	r3, [pc, #168]	@ (800afd0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800af26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800af2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800af2e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800af30:	697b      	ldr	r3, [r7, #20]
 800af32:	2b00      	cmp	r3, #0
 800af34:	d01e      	beq.n	800af74 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800af3a:	697a      	ldr	r2, [r7, #20]
 800af3c:	429a      	cmp	r2, r3
 800af3e:	d019      	beq.n	800af74 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800af40:	4b23      	ldr	r3, [pc, #140]	@ (800afd0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800af42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800af46:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800af4a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800af4c:	4b20      	ldr	r3, [pc, #128]	@ (800afd0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800af4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800af52:	4a1f      	ldr	r2, [pc, #124]	@ (800afd0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800af54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800af58:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800af5c:	4b1c      	ldr	r3, [pc, #112]	@ (800afd0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800af5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800af62:	4a1b      	ldr	r2, [pc, #108]	@ (800afd0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800af64:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800af68:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800af6c:	4a18      	ldr	r2, [pc, #96]	@ (800afd0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800af6e:	697b      	ldr	r3, [r7, #20]
 800af70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800af74:	697b      	ldr	r3, [r7, #20]
 800af76:	f003 0301 	and.w	r3, r3, #1
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d016      	beq.n	800afac <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800af7e:	f7fc ff1d 	bl	8007dbc <HAL_GetTick>
 800af82:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800af84:	e00b      	b.n	800af9e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800af86:	f7fc ff19 	bl	8007dbc <HAL_GetTick>
 800af8a:	4602      	mov	r2, r0
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	1ad3      	subs	r3, r2, r3
 800af90:	f241 3288 	movw	r2, #5000	@ 0x1388
 800af94:	4293      	cmp	r3, r2
 800af96:	d902      	bls.n	800af9e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800af98:	2303      	movs	r3, #3
 800af9a:	74fb      	strb	r3, [r7, #19]
            break;
 800af9c:	e006      	b.n	800afac <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800af9e:	4b0c      	ldr	r3, [pc, #48]	@ (800afd0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800afa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800afa4:	f003 0302 	and.w	r3, r3, #2
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d0ec      	beq.n	800af86 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800afac:	7cfb      	ldrb	r3, [r7, #19]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d10b      	bne.n	800afca <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800afb2:	4b07      	ldr	r3, [pc, #28]	@ (800afd0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800afb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800afb8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800afc0:	4903      	ldr	r1, [pc, #12]	@ (800afd0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800afc2:	4313      	orrs	r3, r2
 800afc4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800afc8:	e008      	b.n	800afdc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800afca:	7cfb      	ldrb	r3, [r7, #19]
 800afcc:	74bb      	strb	r3, [r7, #18]
 800afce:	e005      	b.n	800afdc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800afd0:	40021000 	.word	0x40021000
 800afd4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800afd8:	7cfb      	ldrb	r3, [r7, #19]
 800afda:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800afdc:	7c7b      	ldrb	r3, [r7, #17]
 800afde:	2b01      	cmp	r3, #1
 800afe0:	d105      	bne.n	800afee <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800afe2:	4ba7      	ldr	r3, [pc, #668]	@ (800b280 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800afe4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800afe6:	4aa6      	ldr	r2, [pc, #664]	@ (800b280 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800afe8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800afec:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	f003 0301 	and.w	r3, r3, #1
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d00a      	beq.n	800b010 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800affa:	4ba1      	ldr	r3, [pc, #644]	@ (800b280 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800affc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b000:	f023 0203 	bic.w	r2, r3, #3
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	685b      	ldr	r3, [r3, #4]
 800b008:	499d      	ldr	r1, [pc, #628]	@ (800b280 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b00a:	4313      	orrs	r3, r2
 800b00c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	f003 0302 	and.w	r3, r3, #2
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d00a      	beq.n	800b032 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800b01c:	4b98      	ldr	r3, [pc, #608]	@ (800b280 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b01e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b022:	f023 020c 	bic.w	r2, r3, #12
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	689b      	ldr	r3, [r3, #8]
 800b02a:	4995      	ldr	r1, [pc, #596]	@ (800b280 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b02c:	4313      	orrs	r3, r2
 800b02e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	f003 0304 	and.w	r3, r3, #4
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d00a      	beq.n	800b054 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800b03e:	4b90      	ldr	r3, [pc, #576]	@ (800b280 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b040:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b044:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	68db      	ldr	r3, [r3, #12]
 800b04c:	498c      	ldr	r1, [pc, #560]	@ (800b280 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b04e:	4313      	orrs	r3, r2
 800b050:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	f003 0308 	and.w	r3, r3, #8
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d00a      	beq.n	800b076 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800b060:	4b87      	ldr	r3, [pc, #540]	@ (800b280 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b062:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b066:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	691b      	ldr	r3, [r3, #16]
 800b06e:	4984      	ldr	r1, [pc, #528]	@ (800b280 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b070:	4313      	orrs	r3, r2
 800b072:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	f003 0310 	and.w	r3, r3, #16
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d00a      	beq.n	800b098 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800b082:	4b7f      	ldr	r3, [pc, #508]	@ (800b280 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b084:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b088:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	695b      	ldr	r3, [r3, #20]
 800b090:	497b      	ldr	r1, [pc, #492]	@ (800b280 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b092:	4313      	orrs	r3, r2
 800b094:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	f003 0320 	and.w	r3, r3, #32
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d00a      	beq.n	800b0ba <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b0a4:	4b76      	ldr	r3, [pc, #472]	@ (800b280 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b0a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b0aa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	699b      	ldr	r3, [r3, #24]
 800b0b2:	4973      	ldr	r1, [pc, #460]	@ (800b280 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b0b4:	4313      	orrs	r3, r2
 800b0b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d00a      	beq.n	800b0dc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800b0c6:	4b6e      	ldr	r3, [pc, #440]	@ (800b280 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b0c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b0cc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	69db      	ldr	r3, [r3, #28]
 800b0d4:	496a      	ldr	r1, [pc, #424]	@ (800b280 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b0d6:	4313      	orrs	r3, r2
 800b0d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d00a      	beq.n	800b0fe <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800b0e8:	4b65      	ldr	r3, [pc, #404]	@ (800b280 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b0ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b0ee:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	6a1b      	ldr	r3, [r3, #32]
 800b0f6:	4962      	ldr	r1, [pc, #392]	@ (800b280 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b0f8:	4313      	orrs	r3, r2
 800b0fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b106:	2b00      	cmp	r3, #0
 800b108:	d00a      	beq.n	800b120 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800b10a:	4b5d      	ldr	r3, [pc, #372]	@ (800b280 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b10c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b110:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b118:	4959      	ldr	r1, [pc, #356]	@ (800b280 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b11a:	4313      	orrs	r3, r2
 800b11c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d00a      	beq.n	800b142 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b12c:	4b54      	ldr	r3, [pc, #336]	@ (800b280 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b12e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b132:	f023 0203 	bic.w	r2, r3, #3
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b13a:	4951      	ldr	r1, [pc, #324]	@ (800b280 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b13c:	4313      	orrs	r3, r2
 800b13e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d00a      	beq.n	800b164 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b14e:	4b4c      	ldr	r3, [pc, #304]	@ (800b280 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b150:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b154:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b15c:	4948      	ldr	r1, [pc, #288]	@ (800b280 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b15e:	4313      	orrs	r3, r2
 800b160:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d015      	beq.n	800b19c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b170:	4b43      	ldr	r3, [pc, #268]	@ (800b280 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b172:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b176:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b17e:	4940      	ldr	r1, [pc, #256]	@ (800b280 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b180:	4313      	orrs	r3, r2
 800b182:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b18a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b18e:	d105      	bne.n	800b19c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b190:	4b3b      	ldr	r3, [pc, #236]	@ (800b280 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b192:	68db      	ldr	r3, [r3, #12]
 800b194:	4a3a      	ldr	r2, [pc, #232]	@ (800b280 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b196:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b19a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d015      	beq.n	800b1d4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800b1a8:	4b35      	ldr	r3, [pc, #212]	@ (800b280 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b1aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b1ae:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b1b6:	4932      	ldr	r1, [pc, #200]	@ (800b280 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b1b8:	4313      	orrs	r3, r2
 800b1ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b1c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b1c6:	d105      	bne.n	800b1d4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b1c8:	4b2d      	ldr	r3, [pc, #180]	@ (800b280 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b1ca:	68db      	ldr	r3, [r3, #12]
 800b1cc:	4a2c      	ldr	r2, [pc, #176]	@ (800b280 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b1ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b1d2:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d015      	beq.n	800b20c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b1e0:	4b27      	ldr	r3, [pc, #156]	@ (800b280 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b1e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b1e6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1ee:	4924      	ldr	r1, [pc, #144]	@ (800b280 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b1f0:	4313      	orrs	r3, r2
 800b1f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1fa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b1fe:	d105      	bne.n	800b20c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b200:	4b1f      	ldr	r3, [pc, #124]	@ (800b280 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b202:	68db      	ldr	r3, [r3, #12]
 800b204:	4a1e      	ldr	r2, [pc, #120]	@ (800b280 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b206:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b20a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b214:	2b00      	cmp	r3, #0
 800b216:	d015      	beq.n	800b244 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b218:	4b19      	ldr	r3, [pc, #100]	@ (800b280 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b21a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b21e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b226:	4916      	ldr	r1, [pc, #88]	@ (800b280 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b228:	4313      	orrs	r3, r2
 800b22a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b232:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b236:	d105      	bne.n	800b244 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b238:	4b11      	ldr	r3, [pc, #68]	@ (800b280 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b23a:	68db      	ldr	r3, [r3, #12]
 800b23c:	4a10      	ldr	r2, [pc, #64]	@ (800b280 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b23e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b242:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d019      	beq.n	800b284 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b250:	4b0b      	ldr	r3, [pc, #44]	@ (800b280 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b252:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b256:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b25e:	4908      	ldr	r1, [pc, #32]	@ (800b280 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b260:	4313      	orrs	r3, r2
 800b262:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b26a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b26e:	d109      	bne.n	800b284 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b270:	4b03      	ldr	r3, [pc, #12]	@ (800b280 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b272:	68db      	ldr	r3, [r3, #12]
 800b274:	4a02      	ldr	r2, [pc, #8]	@ (800b280 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b276:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b27a:	60d3      	str	r3, [r2, #12]
 800b27c:	e002      	b.n	800b284 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800b27e:	bf00      	nop
 800b280:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d015      	beq.n	800b2bc <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800b290:	4b29      	ldr	r3, [pc, #164]	@ (800b338 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800b292:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b296:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b29e:	4926      	ldr	r1, [pc, #152]	@ (800b338 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800b2a0:	4313      	orrs	r3, r2
 800b2a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b2aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b2ae:	d105      	bne.n	800b2bc <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800b2b0:	4b21      	ldr	r3, [pc, #132]	@ (800b338 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800b2b2:	68db      	ldr	r3, [r3, #12]
 800b2b4:	4a20      	ldr	r2, [pc, #128]	@ (800b338 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800b2b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b2ba:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d015      	beq.n	800b2f4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800b2c8:	4b1b      	ldr	r3, [pc, #108]	@ (800b338 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800b2ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b2ce:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b2d6:	4918      	ldr	r1, [pc, #96]	@ (800b338 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800b2d8:	4313      	orrs	r3, r2
 800b2da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b2e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b2e6:	d105      	bne.n	800b2f4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800b2e8:	4b13      	ldr	r3, [pc, #76]	@ (800b338 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800b2ea:	68db      	ldr	r3, [r3, #12]
 800b2ec:	4a12      	ldr	r2, [pc, #72]	@ (800b338 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800b2ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b2f2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d015      	beq.n	800b32c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800b300:	4b0d      	ldr	r3, [pc, #52]	@ (800b338 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800b302:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b306:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b30e:	490a      	ldr	r1, [pc, #40]	@ (800b338 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800b310:	4313      	orrs	r3, r2
 800b312:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b31a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b31e:	d105      	bne.n	800b32c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b320:	4b05      	ldr	r3, [pc, #20]	@ (800b338 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800b322:	68db      	ldr	r3, [r3, #12]
 800b324:	4a04      	ldr	r2, [pc, #16]	@ (800b338 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800b326:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b32a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800b32c:	7cbb      	ldrb	r3, [r7, #18]
}
 800b32e:	4618      	mov	r0, r3
 800b330:	3718      	adds	r7, #24
 800b332:	46bd      	mov	sp, r7
 800b334:	bd80      	pop	{r7, pc}
 800b336:	bf00      	nop
 800b338:	40021000 	.word	0x40021000

0800b33c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b33c:	b580      	push	{r7, lr}
 800b33e:	b082      	sub	sp, #8
 800b340:	af00      	add	r7, sp, #0
 800b342:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d101      	bne.n	800b34e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b34a:	2301      	movs	r3, #1
 800b34c:	e054      	b.n	800b3f8 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b354:	b2db      	uxtb	r3, r3
 800b356:	2b00      	cmp	r3, #0
 800b358:	d111      	bne.n	800b37e <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	2200      	movs	r2, #0
 800b35e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800b362:	6878      	ldr	r0, [r7, #4]
 800b364:	f001 fee2 	bl	800d12c <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d102      	bne.n	800b376 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	4a23      	ldr	r2, [pc, #140]	@ (800b400 <HAL_TIM_Base_Init+0xc4>)
 800b374:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b37a:	6878      	ldr	r0, [r7, #4]
 800b37c:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	2202      	movs	r2, #2
 800b382:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	681a      	ldr	r2, [r3, #0]
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	3304      	adds	r3, #4
 800b38e:	4619      	mov	r1, r3
 800b390:	4610      	mov	r0, r2
 800b392:	f001 fa2b 	bl	800c7ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	2201      	movs	r2, #1
 800b39a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	2201      	movs	r2, #1
 800b3a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	2201      	movs	r2, #1
 800b3aa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	2201      	movs	r2, #1
 800b3b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	2201      	movs	r2, #1
 800b3ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	2201      	movs	r2, #1
 800b3c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	2201      	movs	r2, #1
 800b3ca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	2201      	movs	r2, #1
 800b3d2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	2201      	movs	r2, #1
 800b3da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	2201      	movs	r2, #1
 800b3e2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	2201      	movs	r2, #1
 800b3ea:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	2201      	movs	r2, #1
 800b3f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b3f6:	2300      	movs	r3, #0
}
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	3708      	adds	r7, #8
 800b3fc:	46bd      	mov	sp, r7
 800b3fe:	bd80      	pop	{r7, pc}
 800b400:	080075e5 	.word	0x080075e5

0800b404 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800b404:	b480      	push	{r7}
 800b406:	b085      	sub	sp, #20
 800b408:	af00      	add	r7, sp, #0
 800b40a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b412:	b2db      	uxtb	r3, r3
 800b414:	2b01      	cmp	r3, #1
 800b416:	d001      	beq.n	800b41c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800b418:	2301      	movs	r3, #1
 800b41a:	e04c      	b.n	800b4b6 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	2202      	movs	r2, #2
 800b420:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	4a26      	ldr	r2, [pc, #152]	@ (800b4c4 <HAL_TIM_Base_Start+0xc0>)
 800b42a:	4293      	cmp	r3, r2
 800b42c:	d022      	beq.n	800b474 <HAL_TIM_Base_Start+0x70>
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b436:	d01d      	beq.n	800b474 <HAL_TIM_Base_Start+0x70>
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	4a22      	ldr	r2, [pc, #136]	@ (800b4c8 <HAL_TIM_Base_Start+0xc4>)
 800b43e:	4293      	cmp	r3, r2
 800b440:	d018      	beq.n	800b474 <HAL_TIM_Base_Start+0x70>
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	4a21      	ldr	r2, [pc, #132]	@ (800b4cc <HAL_TIM_Base_Start+0xc8>)
 800b448:	4293      	cmp	r3, r2
 800b44a:	d013      	beq.n	800b474 <HAL_TIM_Base_Start+0x70>
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	4a1f      	ldr	r2, [pc, #124]	@ (800b4d0 <HAL_TIM_Base_Start+0xcc>)
 800b452:	4293      	cmp	r3, r2
 800b454:	d00e      	beq.n	800b474 <HAL_TIM_Base_Start+0x70>
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	4a1e      	ldr	r2, [pc, #120]	@ (800b4d4 <HAL_TIM_Base_Start+0xd0>)
 800b45c:	4293      	cmp	r3, r2
 800b45e:	d009      	beq.n	800b474 <HAL_TIM_Base_Start+0x70>
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	4a1c      	ldr	r2, [pc, #112]	@ (800b4d8 <HAL_TIM_Base_Start+0xd4>)
 800b466:	4293      	cmp	r3, r2
 800b468:	d004      	beq.n	800b474 <HAL_TIM_Base_Start+0x70>
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	4a1b      	ldr	r2, [pc, #108]	@ (800b4dc <HAL_TIM_Base_Start+0xd8>)
 800b470:	4293      	cmp	r3, r2
 800b472:	d115      	bne.n	800b4a0 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	689a      	ldr	r2, [r3, #8]
 800b47a:	4b19      	ldr	r3, [pc, #100]	@ (800b4e0 <HAL_TIM_Base_Start+0xdc>)
 800b47c:	4013      	ands	r3, r2
 800b47e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	2b06      	cmp	r3, #6
 800b484:	d015      	beq.n	800b4b2 <HAL_TIM_Base_Start+0xae>
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b48c:	d011      	beq.n	800b4b2 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	681a      	ldr	r2, [r3, #0]
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	f042 0201 	orr.w	r2, r2, #1
 800b49c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b49e:	e008      	b.n	800b4b2 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	681a      	ldr	r2, [r3, #0]
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	f042 0201 	orr.w	r2, r2, #1
 800b4ae:	601a      	str	r2, [r3, #0]
 800b4b0:	e000      	b.n	800b4b4 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b4b2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b4b4:	2300      	movs	r3, #0
}
 800b4b6:	4618      	mov	r0, r3
 800b4b8:	3714      	adds	r7, #20
 800b4ba:	46bd      	mov	sp, r7
 800b4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c0:	4770      	bx	lr
 800b4c2:	bf00      	nop
 800b4c4:	40012c00 	.word	0x40012c00
 800b4c8:	40000400 	.word	0x40000400
 800b4cc:	40000800 	.word	0x40000800
 800b4d0:	40000c00 	.word	0x40000c00
 800b4d4:	40013400 	.word	0x40013400
 800b4d8:	40014000 	.word	0x40014000
 800b4dc:	40015000 	.word	0x40015000
 800b4e0:	00010007 	.word	0x00010007

0800b4e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b4e4:	b480      	push	{r7}
 800b4e6:	b085      	sub	sp, #20
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b4f2:	b2db      	uxtb	r3, r3
 800b4f4:	2b01      	cmp	r3, #1
 800b4f6:	d001      	beq.n	800b4fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b4f8:	2301      	movs	r3, #1
 800b4fa:	e054      	b.n	800b5a6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	2202      	movs	r2, #2
 800b500:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	68da      	ldr	r2, [r3, #12]
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	f042 0201 	orr.w	r2, r2, #1
 800b512:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	4a26      	ldr	r2, [pc, #152]	@ (800b5b4 <HAL_TIM_Base_Start_IT+0xd0>)
 800b51a:	4293      	cmp	r3, r2
 800b51c:	d022      	beq.n	800b564 <HAL_TIM_Base_Start_IT+0x80>
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b526:	d01d      	beq.n	800b564 <HAL_TIM_Base_Start_IT+0x80>
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	4a22      	ldr	r2, [pc, #136]	@ (800b5b8 <HAL_TIM_Base_Start_IT+0xd4>)
 800b52e:	4293      	cmp	r3, r2
 800b530:	d018      	beq.n	800b564 <HAL_TIM_Base_Start_IT+0x80>
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	4a21      	ldr	r2, [pc, #132]	@ (800b5bc <HAL_TIM_Base_Start_IT+0xd8>)
 800b538:	4293      	cmp	r3, r2
 800b53a:	d013      	beq.n	800b564 <HAL_TIM_Base_Start_IT+0x80>
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	4a1f      	ldr	r2, [pc, #124]	@ (800b5c0 <HAL_TIM_Base_Start_IT+0xdc>)
 800b542:	4293      	cmp	r3, r2
 800b544:	d00e      	beq.n	800b564 <HAL_TIM_Base_Start_IT+0x80>
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	4a1e      	ldr	r2, [pc, #120]	@ (800b5c4 <HAL_TIM_Base_Start_IT+0xe0>)
 800b54c:	4293      	cmp	r3, r2
 800b54e:	d009      	beq.n	800b564 <HAL_TIM_Base_Start_IT+0x80>
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	4a1c      	ldr	r2, [pc, #112]	@ (800b5c8 <HAL_TIM_Base_Start_IT+0xe4>)
 800b556:	4293      	cmp	r3, r2
 800b558:	d004      	beq.n	800b564 <HAL_TIM_Base_Start_IT+0x80>
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	4a1b      	ldr	r2, [pc, #108]	@ (800b5cc <HAL_TIM_Base_Start_IT+0xe8>)
 800b560:	4293      	cmp	r3, r2
 800b562:	d115      	bne.n	800b590 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	689a      	ldr	r2, [r3, #8]
 800b56a:	4b19      	ldr	r3, [pc, #100]	@ (800b5d0 <HAL_TIM_Base_Start_IT+0xec>)
 800b56c:	4013      	ands	r3, r2
 800b56e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	2b06      	cmp	r3, #6
 800b574:	d015      	beq.n	800b5a2 <HAL_TIM_Base_Start_IT+0xbe>
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b57c:	d011      	beq.n	800b5a2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	681a      	ldr	r2, [r3, #0]
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	f042 0201 	orr.w	r2, r2, #1
 800b58c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b58e:	e008      	b.n	800b5a2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	681a      	ldr	r2, [r3, #0]
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	f042 0201 	orr.w	r2, r2, #1
 800b59e:	601a      	str	r2, [r3, #0]
 800b5a0:	e000      	b.n	800b5a4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b5a2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b5a4:	2300      	movs	r3, #0
}
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	3714      	adds	r7, #20
 800b5aa:	46bd      	mov	sp, r7
 800b5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b0:	4770      	bx	lr
 800b5b2:	bf00      	nop
 800b5b4:	40012c00 	.word	0x40012c00
 800b5b8:	40000400 	.word	0x40000400
 800b5bc:	40000800 	.word	0x40000800
 800b5c0:	40000c00 	.word	0x40000c00
 800b5c4:	40013400 	.word	0x40013400
 800b5c8:	40014000 	.word	0x40014000
 800b5cc:	40015000 	.word	0x40015000
 800b5d0:	00010007 	.word	0x00010007

0800b5d4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	b082      	sub	sp, #8
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d101      	bne.n	800b5e6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b5e2:	2301      	movs	r3, #1
 800b5e4:	e054      	b.n	800b690 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b5ec:	b2db      	uxtb	r3, r3
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d111      	bne.n	800b616 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	2200      	movs	r2, #0
 800b5f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800b5fa:	6878      	ldr	r0, [r7, #4]
 800b5fc:	f001 fd96 	bl	800d12c <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b604:	2b00      	cmp	r3, #0
 800b606:	d102      	bne.n	800b60e <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	4a23      	ldr	r2, [pc, #140]	@ (800b698 <HAL_TIM_PWM_Init+0xc4>)
 800b60c:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b612:	6878      	ldr	r0, [r7, #4]
 800b614:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	2202      	movs	r2, #2
 800b61a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	681a      	ldr	r2, [r3, #0]
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	3304      	adds	r3, #4
 800b626:	4619      	mov	r1, r3
 800b628:	4610      	mov	r0, r2
 800b62a:	f001 f8df 	bl	800c7ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	2201      	movs	r2, #1
 800b632:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	2201      	movs	r2, #1
 800b63a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	2201      	movs	r2, #1
 800b642:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	2201      	movs	r2, #1
 800b64a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	2201      	movs	r2, #1
 800b652:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	2201      	movs	r2, #1
 800b65a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	2201      	movs	r2, #1
 800b662:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	2201      	movs	r2, #1
 800b66a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	2201      	movs	r2, #1
 800b672:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	2201      	movs	r2, #1
 800b67a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	2201      	movs	r2, #1
 800b682:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	2201      	movs	r2, #1
 800b68a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b68e:	2300      	movs	r3, #0
}
 800b690:	4618      	mov	r0, r3
 800b692:	3708      	adds	r7, #8
 800b694:	46bd      	mov	sp, r7
 800b696:	bd80      	pop	{r7, pc}
 800b698:	08007599 	.word	0x08007599

0800b69c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b69c:	b580      	push	{r7, lr}
 800b69e:	b084      	sub	sp, #16
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	6078      	str	r0, [r7, #4]
 800b6a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b6a6:	683b      	ldr	r3, [r7, #0]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d109      	bne.n	800b6c0 <HAL_TIM_PWM_Start+0x24>
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b6b2:	b2db      	uxtb	r3, r3
 800b6b4:	2b01      	cmp	r3, #1
 800b6b6:	bf14      	ite	ne
 800b6b8:	2301      	movne	r3, #1
 800b6ba:	2300      	moveq	r3, #0
 800b6bc:	b2db      	uxtb	r3, r3
 800b6be:	e03c      	b.n	800b73a <HAL_TIM_PWM_Start+0x9e>
 800b6c0:	683b      	ldr	r3, [r7, #0]
 800b6c2:	2b04      	cmp	r3, #4
 800b6c4:	d109      	bne.n	800b6da <HAL_TIM_PWM_Start+0x3e>
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800b6cc:	b2db      	uxtb	r3, r3
 800b6ce:	2b01      	cmp	r3, #1
 800b6d0:	bf14      	ite	ne
 800b6d2:	2301      	movne	r3, #1
 800b6d4:	2300      	moveq	r3, #0
 800b6d6:	b2db      	uxtb	r3, r3
 800b6d8:	e02f      	b.n	800b73a <HAL_TIM_PWM_Start+0x9e>
 800b6da:	683b      	ldr	r3, [r7, #0]
 800b6dc:	2b08      	cmp	r3, #8
 800b6de:	d109      	bne.n	800b6f4 <HAL_TIM_PWM_Start+0x58>
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b6e6:	b2db      	uxtb	r3, r3
 800b6e8:	2b01      	cmp	r3, #1
 800b6ea:	bf14      	ite	ne
 800b6ec:	2301      	movne	r3, #1
 800b6ee:	2300      	moveq	r3, #0
 800b6f0:	b2db      	uxtb	r3, r3
 800b6f2:	e022      	b.n	800b73a <HAL_TIM_PWM_Start+0x9e>
 800b6f4:	683b      	ldr	r3, [r7, #0]
 800b6f6:	2b0c      	cmp	r3, #12
 800b6f8:	d109      	bne.n	800b70e <HAL_TIM_PWM_Start+0x72>
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b700:	b2db      	uxtb	r3, r3
 800b702:	2b01      	cmp	r3, #1
 800b704:	bf14      	ite	ne
 800b706:	2301      	movne	r3, #1
 800b708:	2300      	moveq	r3, #0
 800b70a:	b2db      	uxtb	r3, r3
 800b70c:	e015      	b.n	800b73a <HAL_TIM_PWM_Start+0x9e>
 800b70e:	683b      	ldr	r3, [r7, #0]
 800b710:	2b10      	cmp	r3, #16
 800b712:	d109      	bne.n	800b728 <HAL_TIM_PWM_Start+0x8c>
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b71a:	b2db      	uxtb	r3, r3
 800b71c:	2b01      	cmp	r3, #1
 800b71e:	bf14      	ite	ne
 800b720:	2301      	movne	r3, #1
 800b722:	2300      	moveq	r3, #0
 800b724:	b2db      	uxtb	r3, r3
 800b726:	e008      	b.n	800b73a <HAL_TIM_PWM_Start+0x9e>
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800b72e:	b2db      	uxtb	r3, r3
 800b730:	2b01      	cmp	r3, #1
 800b732:	bf14      	ite	ne
 800b734:	2301      	movne	r3, #1
 800b736:	2300      	moveq	r3, #0
 800b738:	b2db      	uxtb	r3, r3
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d001      	beq.n	800b742 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800b73e:	2301      	movs	r3, #1
 800b740:	e0a6      	b.n	800b890 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b742:	683b      	ldr	r3, [r7, #0]
 800b744:	2b00      	cmp	r3, #0
 800b746:	d104      	bne.n	800b752 <HAL_TIM_PWM_Start+0xb6>
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	2202      	movs	r2, #2
 800b74c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b750:	e023      	b.n	800b79a <HAL_TIM_PWM_Start+0xfe>
 800b752:	683b      	ldr	r3, [r7, #0]
 800b754:	2b04      	cmp	r3, #4
 800b756:	d104      	bne.n	800b762 <HAL_TIM_PWM_Start+0xc6>
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	2202      	movs	r2, #2
 800b75c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b760:	e01b      	b.n	800b79a <HAL_TIM_PWM_Start+0xfe>
 800b762:	683b      	ldr	r3, [r7, #0]
 800b764:	2b08      	cmp	r3, #8
 800b766:	d104      	bne.n	800b772 <HAL_TIM_PWM_Start+0xd6>
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	2202      	movs	r2, #2
 800b76c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b770:	e013      	b.n	800b79a <HAL_TIM_PWM_Start+0xfe>
 800b772:	683b      	ldr	r3, [r7, #0]
 800b774:	2b0c      	cmp	r3, #12
 800b776:	d104      	bne.n	800b782 <HAL_TIM_PWM_Start+0xe6>
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	2202      	movs	r2, #2
 800b77c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b780:	e00b      	b.n	800b79a <HAL_TIM_PWM_Start+0xfe>
 800b782:	683b      	ldr	r3, [r7, #0]
 800b784:	2b10      	cmp	r3, #16
 800b786:	d104      	bne.n	800b792 <HAL_TIM_PWM_Start+0xf6>
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	2202      	movs	r2, #2
 800b78c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b790:	e003      	b.n	800b79a <HAL_TIM_PWM_Start+0xfe>
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	2202      	movs	r2, #2
 800b796:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	2201      	movs	r2, #1
 800b7a0:	6839      	ldr	r1, [r7, #0]
 800b7a2:	4618      	mov	r0, r3
 800b7a4:	f001 fc9c 	bl	800d0e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	4a3a      	ldr	r2, [pc, #232]	@ (800b898 <HAL_TIM_PWM_Start+0x1fc>)
 800b7ae:	4293      	cmp	r3, r2
 800b7b0:	d018      	beq.n	800b7e4 <HAL_TIM_PWM_Start+0x148>
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	4a39      	ldr	r2, [pc, #228]	@ (800b89c <HAL_TIM_PWM_Start+0x200>)
 800b7b8:	4293      	cmp	r3, r2
 800b7ba:	d013      	beq.n	800b7e4 <HAL_TIM_PWM_Start+0x148>
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	4a37      	ldr	r2, [pc, #220]	@ (800b8a0 <HAL_TIM_PWM_Start+0x204>)
 800b7c2:	4293      	cmp	r3, r2
 800b7c4:	d00e      	beq.n	800b7e4 <HAL_TIM_PWM_Start+0x148>
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	4a36      	ldr	r2, [pc, #216]	@ (800b8a4 <HAL_TIM_PWM_Start+0x208>)
 800b7cc:	4293      	cmp	r3, r2
 800b7ce:	d009      	beq.n	800b7e4 <HAL_TIM_PWM_Start+0x148>
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	4a34      	ldr	r2, [pc, #208]	@ (800b8a8 <HAL_TIM_PWM_Start+0x20c>)
 800b7d6:	4293      	cmp	r3, r2
 800b7d8:	d004      	beq.n	800b7e4 <HAL_TIM_PWM_Start+0x148>
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	4a33      	ldr	r2, [pc, #204]	@ (800b8ac <HAL_TIM_PWM_Start+0x210>)
 800b7e0:	4293      	cmp	r3, r2
 800b7e2:	d101      	bne.n	800b7e8 <HAL_TIM_PWM_Start+0x14c>
 800b7e4:	2301      	movs	r3, #1
 800b7e6:	e000      	b.n	800b7ea <HAL_TIM_PWM_Start+0x14e>
 800b7e8:	2300      	movs	r3, #0
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d007      	beq.n	800b7fe <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b7fc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	4a25      	ldr	r2, [pc, #148]	@ (800b898 <HAL_TIM_PWM_Start+0x1fc>)
 800b804:	4293      	cmp	r3, r2
 800b806:	d022      	beq.n	800b84e <HAL_TIM_PWM_Start+0x1b2>
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b810:	d01d      	beq.n	800b84e <HAL_TIM_PWM_Start+0x1b2>
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	4a26      	ldr	r2, [pc, #152]	@ (800b8b0 <HAL_TIM_PWM_Start+0x214>)
 800b818:	4293      	cmp	r3, r2
 800b81a:	d018      	beq.n	800b84e <HAL_TIM_PWM_Start+0x1b2>
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	4a24      	ldr	r2, [pc, #144]	@ (800b8b4 <HAL_TIM_PWM_Start+0x218>)
 800b822:	4293      	cmp	r3, r2
 800b824:	d013      	beq.n	800b84e <HAL_TIM_PWM_Start+0x1b2>
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	4a23      	ldr	r2, [pc, #140]	@ (800b8b8 <HAL_TIM_PWM_Start+0x21c>)
 800b82c:	4293      	cmp	r3, r2
 800b82e:	d00e      	beq.n	800b84e <HAL_TIM_PWM_Start+0x1b2>
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	4a19      	ldr	r2, [pc, #100]	@ (800b89c <HAL_TIM_PWM_Start+0x200>)
 800b836:	4293      	cmp	r3, r2
 800b838:	d009      	beq.n	800b84e <HAL_TIM_PWM_Start+0x1b2>
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	4a18      	ldr	r2, [pc, #96]	@ (800b8a0 <HAL_TIM_PWM_Start+0x204>)
 800b840:	4293      	cmp	r3, r2
 800b842:	d004      	beq.n	800b84e <HAL_TIM_PWM_Start+0x1b2>
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	4a18      	ldr	r2, [pc, #96]	@ (800b8ac <HAL_TIM_PWM_Start+0x210>)
 800b84a:	4293      	cmp	r3, r2
 800b84c:	d115      	bne.n	800b87a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	689a      	ldr	r2, [r3, #8]
 800b854:	4b19      	ldr	r3, [pc, #100]	@ (800b8bc <HAL_TIM_PWM_Start+0x220>)
 800b856:	4013      	ands	r3, r2
 800b858:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	2b06      	cmp	r3, #6
 800b85e:	d015      	beq.n	800b88c <HAL_TIM_PWM_Start+0x1f0>
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b866:	d011      	beq.n	800b88c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	681a      	ldr	r2, [r3, #0]
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	f042 0201 	orr.w	r2, r2, #1
 800b876:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b878:	e008      	b.n	800b88c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	681a      	ldr	r2, [r3, #0]
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	f042 0201 	orr.w	r2, r2, #1
 800b888:	601a      	str	r2, [r3, #0]
 800b88a:	e000      	b.n	800b88e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b88c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b88e:	2300      	movs	r3, #0
}
 800b890:	4618      	mov	r0, r3
 800b892:	3710      	adds	r7, #16
 800b894:	46bd      	mov	sp, r7
 800b896:	bd80      	pop	{r7, pc}
 800b898:	40012c00 	.word	0x40012c00
 800b89c:	40013400 	.word	0x40013400
 800b8a0:	40014000 	.word	0x40014000
 800b8a4:	40014400 	.word	0x40014400
 800b8a8:	40014800 	.word	0x40014800
 800b8ac:	40015000 	.word	0x40015000
 800b8b0:	40000400 	.word	0x40000400
 800b8b4:	40000800 	.word	0x40000800
 800b8b8:	40000c00 	.word	0x40000c00
 800b8bc:	00010007 	.word	0x00010007

0800b8c0 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800b8c0:	b580      	push	{r7, lr}
 800b8c2:	b082      	sub	sp, #8
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	6078      	str	r0, [r7, #4]
 800b8c8:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d101      	bne.n	800b8d4 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800b8d0:	2301      	movs	r3, #1
 800b8d2:	e04c      	b.n	800b96e <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b8da:	b2db      	uxtb	r3, r3
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d111      	bne.n	800b904 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	2200      	movs	r2, #0
 800b8e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800b8e8:	6878      	ldr	r0, [r7, #4]
 800b8ea:	f001 fc1f 	bl	800d12c <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d102      	bne.n	800b8fc <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	4a1f      	ldr	r2, [pc, #124]	@ (800b978 <HAL_TIM_OnePulse_Init+0xb8>)
 800b8fa:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b900:	6878      	ldr	r0, [r7, #4]
 800b902:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	2202      	movs	r2, #2
 800b908:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	681a      	ldr	r2, [r3, #0]
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	3304      	adds	r3, #4
 800b914:	4619      	mov	r1, r3
 800b916:	4610      	mov	r0, r2
 800b918:	f000 ff68 	bl	800c7ec <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	681a      	ldr	r2, [r3, #0]
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	f022 0208 	bic.w	r2, r2, #8
 800b92a:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	6819      	ldr	r1, [r3, #0]
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	683a      	ldr	r2, [r7, #0]
 800b938:	430a      	orrs	r2, r1
 800b93a:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	2201      	movs	r2, #1
 800b940:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	2201      	movs	r2, #1
 800b948:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	2201      	movs	r2, #1
 800b950:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	2201      	movs	r2, #1
 800b958:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	2201      	movs	r2, #1
 800b960:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	2201      	movs	r2, #1
 800b968:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b96c:	2300      	movs	r3, #0
}
 800b96e:	4618      	mov	r0, r3
 800b970:	3708      	adds	r7, #8
 800b972:	46bd      	mov	sp, r7
 800b974:	bd80      	pop	{r7, pc}
 800b976:	bf00      	nop
 800b978:	0800b97d 	.word	0x0800b97d

0800b97c <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800b97c:	b480      	push	{r7}
 800b97e:	b083      	sub	sp, #12
 800b980:	af00      	add	r7, sp, #0
 800b982:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800b984:	bf00      	nop
 800b986:	370c      	adds	r7, #12
 800b988:	46bd      	mov	sp, r7
 800b98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b98e:	4770      	bx	lr

0800b990 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800b990:	b580      	push	{r7, lr}
 800b992:	b084      	sub	sp, #16
 800b994:	af00      	add	r7, sp, #0
 800b996:	6078      	str	r0, [r7, #4]
 800b998:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b9a0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800b9a8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b9b0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b9b8:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b9ba:	7bfb      	ldrb	r3, [r7, #15]
 800b9bc:	2b01      	cmp	r3, #1
 800b9be:	d108      	bne.n	800b9d2 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b9c0:	7bbb      	ldrb	r3, [r7, #14]
 800b9c2:	2b01      	cmp	r3, #1
 800b9c4:	d105      	bne.n	800b9d2 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b9c6:	7b7b      	ldrb	r3, [r7, #13]
 800b9c8:	2b01      	cmp	r3, #1
 800b9ca:	d102      	bne.n	800b9d2 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b9cc:	7b3b      	ldrb	r3, [r7, #12]
 800b9ce:	2b01      	cmp	r3, #1
 800b9d0:	d001      	beq.n	800b9d6 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 800b9d2:	2301      	movs	r3, #1
 800b9d4:	e059      	b.n	800ba8a <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	2202      	movs	r2, #2
 800b9da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	2202      	movs	r2, #2
 800b9e2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	2202      	movs	r2, #2
 800b9ea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	2202      	movs	r2, #2
 800b9f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	68da      	ldr	r2, [r3, #12]
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	f042 0202 	orr.w	r2, r2, #2
 800ba04:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	68da      	ldr	r2, [r3, #12]
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	f042 0204 	orr.w	r2, r2, #4
 800ba14:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	2201      	movs	r2, #1
 800ba1c:	2100      	movs	r1, #0
 800ba1e:	4618      	mov	r0, r3
 800ba20:	f001 fb5e 	bl	800d0e0 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	2201      	movs	r2, #1
 800ba2a:	2104      	movs	r1, #4
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	f001 fb57 	bl	800d0e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	4a17      	ldr	r2, [pc, #92]	@ (800ba94 <HAL_TIM_OnePulse_Start_IT+0x104>)
 800ba38:	4293      	cmp	r3, r2
 800ba3a:	d018      	beq.n	800ba6e <HAL_TIM_OnePulse_Start_IT+0xde>
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	4a15      	ldr	r2, [pc, #84]	@ (800ba98 <HAL_TIM_OnePulse_Start_IT+0x108>)
 800ba42:	4293      	cmp	r3, r2
 800ba44:	d013      	beq.n	800ba6e <HAL_TIM_OnePulse_Start_IT+0xde>
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	4a14      	ldr	r2, [pc, #80]	@ (800ba9c <HAL_TIM_OnePulse_Start_IT+0x10c>)
 800ba4c:	4293      	cmp	r3, r2
 800ba4e:	d00e      	beq.n	800ba6e <HAL_TIM_OnePulse_Start_IT+0xde>
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	4a12      	ldr	r2, [pc, #72]	@ (800baa0 <HAL_TIM_OnePulse_Start_IT+0x110>)
 800ba56:	4293      	cmp	r3, r2
 800ba58:	d009      	beq.n	800ba6e <HAL_TIM_OnePulse_Start_IT+0xde>
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	4a11      	ldr	r2, [pc, #68]	@ (800baa4 <HAL_TIM_OnePulse_Start_IT+0x114>)
 800ba60:	4293      	cmp	r3, r2
 800ba62:	d004      	beq.n	800ba6e <HAL_TIM_OnePulse_Start_IT+0xde>
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	4a0f      	ldr	r2, [pc, #60]	@ (800baa8 <HAL_TIM_OnePulse_Start_IT+0x118>)
 800ba6a:	4293      	cmp	r3, r2
 800ba6c:	d101      	bne.n	800ba72 <HAL_TIM_OnePulse_Start_IT+0xe2>
 800ba6e:	2301      	movs	r3, #1
 800ba70:	e000      	b.n	800ba74 <HAL_TIM_OnePulse_Start_IT+0xe4>
 800ba72:	2300      	movs	r3, #0
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d007      	beq.n	800ba88 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800ba86:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800ba88:	2300      	movs	r3, #0
}
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	3710      	adds	r7, #16
 800ba8e:	46bd      	mov	sp, r7
 800ba90:	bd80      	pop	{r7, pc}
 800ba92:	bf00      	nop
 800ba94:	40012c00 	.word	0x40012c00
 800ba98:	40013400 	.word	0x40013400
 800ba9c:	40014000 	.word	0x40014000
 800baa0:	40014400 	.word	0x40014400
 800baa4:	40014800 	.word	0x40014800
 800baa8:	40015000 	.word	0x40015000

0800baac <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800baac:	b580      	push	{r7, lr}
 800baae:	b086      	sub	sp, #24
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	6078      	str	r0, [r7, #4]
 800bab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d101      	bne.n	800bac0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800babc:	2301      	movs	r3, #1
 800babe:	e0a2      	b.n	800bc06 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bac6:	b2db      	uxtb	r3, r3
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d111      	bne.n	800baf0 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	2200      	movs	r2, #0
 800bad0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800bad4:	6878      	ldr	r0, [r7, #4]
 800bad6:	f001 fb29 	bl	800d12c <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d102      	bne.n	800bae8 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	4a4a      	ldr	r2, [pc, #296]	@ (800bc10 <HAL_TIM_Encoder_Init+0x164>)
 800bae6:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800baec:	6878      	ldr	r0, [r7, #4]
 800baee:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	2202      	movs	r2, #2
 800baf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	689b      	ldr	r3, [r3, #8]
 800bafe:	687a      	ldr	r2, [r7, #4]
 800bb00:	6812      	ldr	r2, [r2, #0]
 800bb02:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800bb06:	f023 0307 	bic.w	r3, r3, #7
 800bb0a:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	681a      	ldr	r2, [r3, #0]
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	3304      	adds	r3, #4
 800bb14:	4619      	mov	r1, r3
 800bb16:	4610      	mov	r0, r2
 800bb18:	f000 fe68 	bl	800c7ec <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	689b      	ldr	r3, [r3, #8]
 800bb22:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	699b      	ldr	r3, [r3, #24]
 800bb2a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	6a1b      	ldr	r3, [r3, #32]
 800bb32:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800bb34:	683b      	ldr	r3, [r7, #0]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	697a      	ldr	r2, [r7, #20]
 800bb3a:	4313      	orrs	r3, r2
 800bb3c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800bb3e:	693b      	ldr	r3, [r7, #16]
 800bb40:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bb44:	f023 0303 	bic.w	r3, r3, #3
 800bb48:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800bb4a:	683b      	ldr	r3, [r7, #0]
 800bb4c:	689a      	ldr	r2, [r3, #8]
 800bb4e:	683b      	ldr	r3, [r7, #0]
 800bb50:	699b      	ldr	r3, [r3, #24]
 800bb52:	021b      	lsls	r3, r3, #8
 800bb54:	4313      	orrs	r3, r2
 800bb56:	693a      	ldr	r2, [r7, #16]
 800bb58:	4313      	orrs	r3, r2
 800bb5a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800bb5c:	693b      	ldr	r3, [r7, #16]
 800bb5e:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800bb62:	f023 030c 	bic.w	r3, r3, #12
 800bb66:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800bb68:	693b      	ldr	r3, [r7, #16]
 800bb6a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800bb6e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800bb72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800bb74:	683b      	ldr	r3, [r7, #0]
 800bb76:	68da      	ldr	r2, [r3, #12]
 800bb78:	683b      	ldr	r3, [r7, #0]
 800bb7a:	69db      	ldr	r3, [r3, #28]
 800bb7c:	021b      	lsls	r3, r3, #8
 800bb7e:	4313      	orrs	r3, r2
 800bb80:	693a      	ldr	r2, [r7, #16]
 800bb82:	4313      	orrs	r3, r2
 800bb84:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800bb86:	683b      	ldr	r3, [r7, #0]
 800bb88:	691b      	ldr	r3, [r3, #16]
 800bb8a:	011a      	lsls	r2, r3, #4
 800bb8c:	683b      	ldr	r3, [r7, #0]
 800bb8e:	6a1b      	ldr	r3, [r3, #32]
 800bb90:	031b      	lsls	r3, r3, #12
 800bb92:	4313      	orrs	r3, r2
 800bb94:	693a      	ldr	r2, [r7, #16]
 800bb96:	4313      	orrs	r3, r2
 800bb98:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800bba0:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800bba8:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800bbaa:	683b      	ldr	r3, [r7, #0]
 800bbac:	685a      	ldr	r2, [r3, #4]
 800bbae:	683b      	ldr	r3, [r7, #0]
 800bbb0:	695b      	ldr	r3, [r3, #20]
 800bbb2:	011b      	lsls	r3, r3, #4
 800bbb4:	4313      	orrs	r3, r2
 800bbb6:	68fa      	ldr	r2, [r7, #12]
 800bbb8:	4313      	orrs	r3, r2
 800bbba:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	697a      	ldr	r2, [r7, #20]
 800bbc2:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	693a      	ldr	r2, [r7, #16]
 800bbca:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	68fa      	ldr	r2, [r7, #12]
 800bbd2:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	2201      	movs	r2, #1
 800bbd8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	2201      	movs	r2, #1
 800bbe0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	2201      	movs	r2, #1
 800bbe8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	2201      	movs	r2, #1
 800bbf0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	2201      	movs	r2, #1
 800bbf8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	2201      	movs	r2, #1
 800bc00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800bc04:	2300      	movs	r3, #0
}
 800bc06:	4618      	mov	r0, r3
 800bc08:	3718      	adds	r7, #24
 800bc0a:	46bd      	mov	sp, r7
 800bc0c:	bd80      	pop	{r7, pc}
 800bc0e:	bf00      	nop
 800bc10:	0800768d 	.word	0x0800768d

0800bc14 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bc14:	b580      	push	{r7, lr}
 800bc16:	b084      	sub	sp, #16
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	6078      	str	r0, [r7, #4]
 800bc1c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800bc24:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800bc2c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800bc34:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bc3c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800bc3e:	683b      	ldr	r3, [r7, #0]
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d110      	bne.n	800bc66 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800bc44:	7bfb      	ldrb	r3, [r7, #15]
 800bc46:	2b01      	cmp	r3, #1
 800bc48:	d102      	bne.n	800bc50 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800bc4a:	7b7b      	ldrb	r3, [r7, #13]
 800bc4c:	2b01      	cmp	r3, #1
 800bc4e:	d001      	beq.n	800bc54 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800bc50:	2301      	movs	r3, #1
 800bc52:	e069      	b.n	800bd28 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	2202      	movs	r2, #2
 800bc58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	2202      	movs	r2, #2
 800bc60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bc64:	e031      	b.n	800bcca <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800bc66:	683b      	ldr	r3, [r7, #0]
 800bc68:	2b04      	cmp	r3, #4
 800bc6a:	d110      	bne.n	800bc8e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800bc6c:	7bbb      	ldrb	r3, [r7, #14]
 800bc6e:	2b01      	cmp	r3, #1
 800bc70:	d102      	bne.n	800bc78 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800bc72:	7b3b      	ldrb	r3, [r7, #12]
 800bc74:	2b01      	cmp	r3, #1
 800bc76:	d001      	beq.n	800bc7c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800bc78:	2301      	movs	r3, #1
 800bc7a:	e055      	b.n	800bd28 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	2202      	movs	r2, #2
 800bc80:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	2202      	movs	r2, #2
 800bc88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bc8c:	e01d      	b.n	800bcca <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800bc8e:	7bfb      	ldrb	r3, [r7, #15]
 800bc90:	2b01      	cmp	r3, #1
 800bc92:	d108      	bne.n	800bca6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800bc94:	7bbb      	ldrb	r3, [r7, #14]
 800bc96:	2b01      	cmp	r3, #1
 800bc98:	d105      	bne.n	800bca6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800bc9a:	7b7b      	ldrb	r3, [r7, #13]
 800bc9c:	2b01      	cmp	r3, #1
 800bc9e:	d102      	bne.n	800bca6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800bca0:	7b3b      	ldrb	r3, [r7, #12]
 800bca2:	2b01      	cmp	r3, #1
 800bca4:	d001      	beq.n	800bcaa <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800bca6:	2301      	movs	r3, #1
 800bca8:	e03e      	b.n	800bd28 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	2202      	movs	r2, #2
 800bcae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	2202      	movs	r2, #2
 800bcb6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	2202      	movs	r2, #2
 800bcbe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	2202      	movs	r2, #2
 800bcc6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800bcca:	683b      	ldr	r3, [r7, #0]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d003      	beq.n	800bcd8 <HAL_TIM_Encoder_Start+0xc4>
 800bcd0:	683b      	ldr	r3, [r7, #0]
 800bcd2:	2b04      	cmp	r3, #4
 800bcd4:	d008      	beq.n	800bce8 <HAL_TIM_Encoder_Start+0xd4>
 800bcd6:	e00f      	b.n	800bcf8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	2201      	movs	r2, #1
 800bcde:	2100      	movs	r1, #0
 800bce0:	4618      	mov	r0, r3
 800bce2:	f001 f9fd 	bl	800d0e0 <TIM_CCxChannelCmd>
      break;
 800bce6:	e016      	b.n	800bd16 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	2201      	movs	r2, #1
 800bcee:	2104      	movs	r1, #4
 800bcf0:	4618      	mov	r0, r3
 800bcf2:	f001 f9f5 	bl	800d0e0 <TIM_CCxChannelCmd>
      break;
 800bcf6:	e00e      	b.n	800bd16 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	2201      	movs	r2, #1
 800bcfe:	2100      	movs	r1, #0
 800bd00:	4618      	mov	r0, r3
 800bd02:	f001 f9ed 	bl	800d0e0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	2201      	movs	r2, #1
 800bd0c:	2104      	movs	r1, #4
 800bd0e:	4618      	mov	r0, r3
 800bd10:	f001 f9e6 	bl	800d0e0 <TIM_CCxChannelCmd>
      break;
 800bd14:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	681a      	ldr	r2, [r3, #0]
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	f042 0201 	orr.w	r2, r2, #1
 800bd24:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800bd26:	2300      	movs	r3, #0
}
 800bd28:	4618      	mov	r0, r3
 800bd2a:	3710      	adds	r7, #16
 800bd2c:	46bd      	mov	sp, r7
 800bd2e:	bd80      	pop	{r7, pc}

0800bd30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bd30:	b580      	push	{r7, lr}
 800bd32:	b084      	sub	sp, #16
 800bd34:	af00      	add	r7, sp, #0
 800bd36:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	68db      	ldr	r3, [r3, #12]
 800bd3e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	691b      	ldr	r3, [r3, #16]
 800bd46:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800bd48:	68bb      	ldr	r3, [r7, #8]
 800bd4a:	f003 0302 	and.w	r3, r3, #2
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d026      	beq.n	800bda0 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	f003 0302 	and.w	r3, r3, #2
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d021      	beq.n	800bda0 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	f06f 0202 	mvn.w	r2, #2
 800bd64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	2201      	movs	r2, #1
 800bd6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	699b      	ldr	r3, [r3, #24]
 800bd72:	f003 0303 	and.w	r3, r3, #3
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d005      	beq.n	800bd86 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bd80:	6878      	ldr	r0, [r7, #4]
 800bd82:	4798      	blx	r3
 800bd84:	e009      	b.n	800bd9a <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800bd8c:	6878      	ldr	r0, [r7, #4]
 800bd8e:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800bd96:	6878      	ldr	r0, [r7, #4]
 800bd98:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	2200      	movs	r2, #0
 800bd9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800bda0:	68bb      	ldr	r3, [r7, #8]
 800bda2:	f003 0304 	and.w	r3, r3, #4
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d026      	beq.n	800bdf8 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	f003 0304 	and.w	r3, r3, #4
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d021      	beq.n	800bdf8 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	f06f 0204 	mvn.w	r2, #4
 800bdbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	2202      	movs	r2, #2
 800bdc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	699b      	ldr	r3, [r3, #24]
 800bdca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d005      	beq.n	800bdde <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bdd8:	6878      	ldr	r0, [r7, #4]
 800bdda:	4798      	blx	r3
 800bddc:	e009      	b.n	800bdf2 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800bde4:	6878      	ldr	r0, [r7, #4]
 800bde6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800bdee:	6878      	ldr	r0, [r7, #4]
 800bdf0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	2200      	movs	r2, #0
 800bdf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800bdf8:	68bb      	ldr	r3, [r7, #8]
 800bdfa:	f003 0308 	and.w	r3, r3, #8
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d026      	beq.n	800be50 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	f003 0308 	and.w	r3, r3, #8
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d021      	beq.n	800be50 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	f06f 0208 	mvn.w	r2, #8
 800be14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	2204      	movs	r2, #4
 800be1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	69db      	ldr	r3, [r3, #28]
 800be22:	f003 0303 	and.w	r3, r3, #3
 800be26:	2b00      	cmp	r3, #0
 800be28:	d005      	beq.n	800be36 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800be30:	6878      	ldr	r0, [r7, #4]
 800be32:	4798      	blx	r3
 800be34:	e009      	b.n	800be4a <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800be3c:	6878      	ldr	r0, [r7, #4]
 800be3e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800be46:	6878      	ldr	r0, [r7, #4]
 800be48:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	2200      	movs	r2, #0
 800be4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800be50:	68bb      	ldr	r3, [r7, #8]
 800be52:	f003 0310 	and.w	r3, r3, #16
 800be56:	2b00      	cmp	r3, #0
 800be58:	d026      	beq.n	800bea8 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	f003 0310 	and.w	r3, r3, #16
 800be60:	2b00      	cmp	r3, #0
 800be62:	d021      	beq.n	800bea8 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	f06f 0210 	mvn.w	r2, #16
 800be6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	2208      	movs	r2, #8
 800be72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	69db      	ldr	r3, [r3, #28]
 800be7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d005      	beq.n	800be8e <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800be88:	6878      	ldr	r0, [r7, #4]
 800be8a:	4798      	blx	r3
 800be8c:	e009      	b.n	800bea2 <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800be94:	6878      	ldr	r0, [r7, #4]
 800be96:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800be9e:	6878      	ldr	r0, [r7, #4]
 800bea0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	2200      	movs	r2, #0
 800bea6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800bea8:	68bb      	ldr	r3, [r7, #8]
 800beaa:	f003 0301 	and.w	r3, r3, #1
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d00e      	beq.n	800bed0 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	f003 0301 	and.w	r3, r3, #1
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d009      	beq.n	800bed0 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	f06f 0201 	mvn.w	r2, #1
 800bec4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800becc:	6878      	ldr	r0, [r7, #4]
 800bece:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800bed0:	68bb      	ldr	r3, [r7, #8]
 800bed2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d104      	bne.n	800bee4 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800beda:	68bb      	ldr	r3, [r7, #8]
 800bedc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d00e      	beq.n	800bf02 <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800beea:	2b00      	cmp	r3, #0
 800beec:	d009      	beq.n	800bf02 <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800bef6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800befe:	6878      	ldr	r0, [r7, #4]
 800bf00:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800bf02:	68bb      	ldr	r3, [r7, #8]
 800bf04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d00e      	beq.n	800bf2a <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d009      	beq.n	800bf2a <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800bf1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800bf26:	6878      	ldr	r0, [r7, #4]
 800bf28:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800bf2a:	68bb      	ldr	r3, [r7, #8]
 800bf2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d00e      	beq.n	800bf52 <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d009      	beq.n	800bf52 <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800bf46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bf4e:	6878      	ldr	r0, [r7, #4]
 800bf50:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800bf52:	68bb      	ldr	r3, [r7, #8]
 800bf54:	f003 0320 	and.w	r3, r3, #32
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d00e      	beq.n	800bf7a <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	f003 0320 	and.w	r3, r3, #32
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d009      	beq.n	800bf7a <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	f06f 0220 	mvn.w	r2, #32
 800bf6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800bf76:	6878      	ldr	r0, [r7, #4]
 800bf78:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800bf7a:	68bb      	ldr	r3, [r7, #8]
 800bf7c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d00e      	beq.n	800bfa2 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d009      	beq.n	800bfa2 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800bf96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800bf9e:	6878      	ldr	r0, [r7, #4]
 800bfa0:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800bfa2:	68bb      	ldr	r3, [r7, #8]
 800bfa4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d00e      	beq.n	800bfca <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d009      	beq.n	800bfca <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800bfbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800bfc6:	6878      	ldr	r0, [r7, #4]
 800bfc8:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800bfca:	68bb      	ldr	r3, [r7, #8]
 800bfcc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d00e      	beq.n	800bff2 <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d009      	beq.n	800bff2 <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800bfe6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800bfee:	6878      	ldr	r0, [r7, #4]
 800bff0:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800bff2:	68bb      	ldr	r3, [r7, #8]
 800bff4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d00e      	beq.n	800c01a <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c002:	2b00      	cmp	r3, #0
 800c004:	d009      	beq.n	800c01a <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800c00e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800c016:	6878      	ldr	r0, [r7, #4]
 800c018:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c01a:	bf00      	nop
 800c01c:	3710      	adds	r7, #16
 800c01e:	46bd      	mov	sp, r7
 800c020:	bd80      	pop	{r7, pc}
	...

0800c024 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c024:	b580      	push	{r7, lr}
 800c026:	b086      	sub	sp, #24
 800c028:	af00      	add	r7, sp, #0
 800c02a:	60f8      	str	r0, [r7, #12]
 800c02c:	60b9      	str	r1, [r7, #8]
 800c02e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c030:	2300      	movs	r3, #0
 800c032:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c03a:	2b01      	cmp	r3, #1
 800c03c:	d101      	bne.n	800c042 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c03e:	2302      	movs	r3, #2
 800c040:	e0ff      	b.n	800c242 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	2201      	movs	r2, #1
 800c046:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	2b14      	cmp	r3, #20
 800c04e:	f200 80f0 	bhi.w	800c232 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800c052:	a201      	add	r2, pc, #4	@ (adr r2, 800c058 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c058:	0800c0ad 	.word	0x0800c0ad
 800c05c:	0800c233 	.word	0x0800c233
 800c060:	0800c233 	.word	0x0800c233
 800c064:	0800c233 	.word	0x0800c233
 800c068:	0800c0ed 	.word	0x0800c0ed
 800c06c:	0800c233 	.word	0x0800c233
 800c070:	0800c233 	.word	0x0800c233
 800c074:	0800c233 	.word	0x0800c233
 800c078:	0800c12f 	.word	0x0800c12f
 800c07c:	0800c233 	.word	0x0800c233
 800c080:	0800c233 	.word	0x0800c233
 800c084:	0800c233 	.word	0x0800c233
 800c088:	0800c16f 	.word	0x0800c16f
 800c08c:	0800c233 	.word	0x0800c233
 800c090:	0800c233 	.word	0x0800c233
 800c094:	0800c233 	.word	0x0800c233
 800c098:	0800c1b1 	.word	0x0800c1b1
 800c09c:	0800c233 	.word	0x0800c233
 800c0a0:	0800c233 	.word	0x0800c233
 800c0a4:	0800c233 	.word	0x0800c233
 800c0a8:	0800c1f1 	.word	0x0800c1f1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	68b9      	ldr	r1, [r7, #8]
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	f000 fc4e 	bl	800c954 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	699a      	ldr	r2, [r3, #24]
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	f042 0208 	orr.w	r2, r2, #8
 800c0c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	699a      	ldr	r2, [r3, #24]
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	f022 0204 	bic.w	r2, r2, #4
 800c0d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	6999      	ldr	r1, [r3, #24]
 800c0de:	68bb      	ldr	r3, [r7, #8]
 800c0e0:	691a      	ldr	r2, [r3, #16]
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	430a      	orrs	r2, r1
 800c0e8:	619a      	str	r2, [r3, #24]
      break;
 800c0ea:	e0a5      	b.n	800c238 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	68b9      	ldr	r1, [r7, #8]
 800c0f2:	4618      	mov	r0, r3
 800c0f4:	f000 fcc8 	bl	800ca88 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	699a      	ldr	r2, [r3, #24]
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c106:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	699a      	ldr	r2, [r3, #24]
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c116:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	6999      	ldr	r1, [r3, #24]
 800c11e:	68bb      	ldr	r3, [r7, #8]
 800c120:	691b      	ldr	r3, [r3, #16]
 800c122:	021a      	lsls	r2, r3, #8
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	430a      	orrs	r2, r1
 800c12a:	619a      	str	r2, [r3, #24]
      break;
 800c12c:	e084      	b.n	800c238 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	68b9      	ldr	r1, [r7, #8]
 800c134:	4618      	mov	r0, r3
 800c136:	f000 fd3b 	bl	800cbb0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	69da      	ldr	r2, [r3, #28]
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	f042 0208 	orr.w	r2, r2, #8
 800c148:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	69da      	ldr	r2, [r3, #28]
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	f022 0204 	bic.w	r2, r2, #4
 800c158:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	69d9      	ldr	r1, [r3, #28]
 800c160:	68bb      	ldr	r3, [r7, #8]
 800c162:	691a      	ldr	r2, [r3, #16]
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	430a      	orrs	r2, r1
 800c16a:	61da      	str	r2, [r3, #28]
      break;
 800c16c:	e064      	b.n	800c238 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	68b9      	ldr	r1, [r7, #8]
 800c174:	4618      	mov	r0, r3
 800c176:	f000 fdad 	bl	800ccd4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	69da      	ldr	r2, [r3, #28]
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c188:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	69da      	ldr	r2, [r3, #28]
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c198:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	69d9      	ldr	r1, [r3, #28]
 800c1a0:	68bb      	ldr	r3, [r7, #8]
 800c1a2:	691b      	ldr	r3, [r3, #16]
 800c1a4:	021a      	lsls	r2, r3, #8
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	430a      	orrs	r2, r1
 800c1ac:	61da      	str	r2, [r3, #28]
      break;
 800c1ae:	e043      	b.n	800c238 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	68b9      	ldr	r1, [r7, #8]
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	f000 fe20 	bl	800cdfc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	f042 0208 	orr.w	r2, r2, #8
 800c1ca:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	f022 0204 	bic.w	r2, r2, #4
 800c1da:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800c1e2:	68bb      	ldr	r3, [r7, #8]
 800c1e4:	691a      	ldr	r2, [r3, #16]
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	430a      	orrs	r2, r1
 800c1ec:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800c1ee:	e023      	b.n	800c238 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	68b9      	ldr	r1, [r7, #8]
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	f000 fe6a 	bl	800ced0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c20a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c21a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800c222:	68bb      	ldr	r3, [r7, #8]
 800c224:	691b      	ldr	r3, [r3, #16]
 800c226:	021a      	lsls	r2, r3, #8
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	430a      	orrs	r2, r1
 800c22e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800c230:	e002      	b.n	800c238 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800c232:	2301      	movs	r3, #1
 800c234:	75fb      	strb	r3, [r7, #23]
      break;
 800c236:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	2200      	movs	r2, #0
 800c23c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c240:	7dfb      	ldrb	r3, [r7, #23]
}
 800c242:	4618      	mov	r0, r3
 800c244:	3718      	adds	r7, #24
 800c246:	46bd      	mov	sp, r7
 800c248:	bd80      	pop	{r7, pc}
 800c24a:	bf00      	nop

0800c24c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c24c:	b580      	push	{r7, lr}
 800c24e:	b084      	sub	sp, #16
 800c250:	af00      	add	r7, sp, #0
 800c252:	6078      	str	r0, [r7, #4]
 800c254:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c256:	2300      	movs	r3, #0
 800c258:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c260:	2b01      	cmp	r3, #1
 800c262:	d101      	bne.n	800c268 <HAL_TIM_ConfigClockSource+0x1c>
 800c264:	2302      	movs	r3, #2
 800c266:	e0f6      	b.n	800c456 <HAL_TIM_ConfigClockSource+0x20a>
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	2201      	movs	r2, #1
 800c26c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	2202      	movs	r2, #2
 800c274:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	689b      	ldr	r3, [r3, #8]
 800c27e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c280:	68bb      	ldr	r3, [r7, #8]
 800c282:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800c286:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800c28a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c28c:	68bb      	ldr	r3, [r7, #8]
 800c28e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c292:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	68ba      	ldr	r2, [r7, #8]
 800c29a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c29c:	683b      	ldr	r3, [r7, #0]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	4a6f      	ldr	r2, [pc, #444]	@ (800c460 <HAL_TIM_ConfigClockSource+0x214>)
 800c2a2:	4293      	cmp	r3, r2
 800c2a4:	f000 80c1 	beq.w	800c42a <HAL_TIM_ConfigClockSource+0x1de>
 800c2a8:	4a6d      	ldr	r2, [pc, #436]	@ (800c460 <HAL_TIM_ConfigClockSource+0x214>)
 800c2aa:	4293      	cmp	r3, r2
 800c2ac:	f200 80c6 	bhi.w	800c43c <HAL_TIM_ConfigClockSource+0x1f0>
 800c2b0:	4a6c      	ldr	r2, [pc, #432]	@ (800c464 <HAL_TIM_ConfigClockSource+0x218>)
 800c2b2:	4293      	cmp	r3, r2
 800c2b4:	f000 80b9 	beq.w	800c42a <HAL_TIM_ConfigClockSource+0x1de>
 800c2b8:	4a6a      	ldr	r2, [pc, #424]	@ (800c464 <HAL_TIM_ConfigClockSource+0x218>)
 800c2ba:	4293      	cmp	r3, r2
 800c2bc:	f200 80be 	bhi.w	800c43c <HAL_TIM_ConfigClockSource+0x1f0>
 800c2c0:	4a69      	ldr	r2, [pc, #420]	@ (800c468 <HAL_TIM_ConfigClockSource+0x21c>)
 800c2c2:	4293      	cmp	r3, r2
 800c2c4:	f000 80b1 	beq.w	800c42a <HAL_TIM_ConfigClockSource+0x1de>
 800c2c8:	4a67      	ldr	r2, [pc, #412]	@ (800c468 <HAL_TIM_ConfigClockSource+0x21c>)
 800c2ca:	4293      	cmp	r3, r2
 800c2cc:	f200 80b6 	bhi.w	800c43c <HAL_TIM_ConfigClockSource+0x1f0>
 800c2d0:	4a66      	ldr	r2, [pc, #408]	@ (800c46c <HAL_TIM_ConfigClockSource+0x220>)
 800c2d2:	4293      	cmp	r3, r2
 800c2d4:	f000 80a9 	beq.w	800c42a <HAL_TIM_ConfigClockSource+0x1de>
 800c2d8:	4a64      	ldr	r2, [pc, #400]	@ (800c46c <HAL_TIM_ConfigClockSource+0x220>)
 800c2da:	4293      	cmp	r3, r2
 800c2dc:	f200 80ae 	bhi.w	800c43c <HAL_TIM_ConfigClockSource+0x1f0>
 800c2e0:	4a63      	ldr	r2, [pc, #396]	@ (800c470 <HAL_TIM_ConfigClockSource+0x224>)
 800c2e2:	4293      	cmp	r3, r2
 800c2e4:	f000 80a1 	beq.w	800c42a <HAL_TIM_ConfigClockSource+0x1de>
 800c2e8:	4a61      	ldr	r2, [pc, #388]	@ (800c470 <HAL_TIM_ConfigClockSource+0x224>)
 800c2ea:	4293      	cmp	r3, r2
 800c2ec:	f200 80a6 	bhi.w	800c43c <HAL_TIM_ConfigClockSource+0x1f0>
 800c2f0:	4a60      	ldr	r2, [pc, #384]	@ (800c474 <HAL_TIM_ConfigClockSource+0x228>)
 800c2f2:	4293      	cmp	r3, r2
 800c2f4:	f000 8099 	beq.w	800c42a <HAL_TIM_ConfigClockSource+0x1de>
 800c2f8:	4a5e      	ldr	r2, [pc, #376]	@ (800c474 <HAL_TIM_ConfigClockSource+0x228>)
 800c2fa:	4293      	cmp	r3, r2
 800c2fc:	f200 809e 	bhi.w	800c43c <HAL_TIM_ConfigClockSource+0x1f0>
 800c300:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800c304:	f000 8091 	beq.w	800c42a <HAL_TIM_ConfigClockSource+0x1de>
 800c308:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800c30c:	f200 8096 	bhi.w	800c43c <HAL_TIM_ConfigClockSource+0x1f0>
 800c310:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c314:	f000 8089 	beq.w	800c42a <HAL_TIM_ConfigClockSource+0x1de>
 800c318:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c31c:	f200 808e 	bhi.w	800c43c <HAL_TIM_ConfigClockSource+0x1f0>
 800c320:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c324:	d03e      	beq.n	800c3a4 <HAL_TIM_ConfigClockSource+0x158>
 800c326:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c32a:	f200 8087 	bhi.w	800c43c <HAL_TIM_ConfigClockSource+0x1f0>
 800c32e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c332:	f000 8086 	beq.w	800c442 <HAL_TIM_ConfigClockSource+0x1f6>
 800c336:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c33a:	d87f      	bhi.n	800c43c <HAL_TIM_ConfigClockSource+0x1f0>
 800c33c:	2b70      	cmp	r3, #112	@ 0x70
 800c33e:	d01a      	beq.n	800c376 <HAL_TIM_ConfigClockSource+0x12a>
 800c340:	2b70      	cmp	r3, #112	@ 0x70
 800c342:	d87b      	bhi.n	800c43c <HAL_TIM_ConfigClockSource+0x1f0>
 800c344:	2b60      	cmp	r3, #96	@ 0x60
 800c346:	d050      	beq.n	800c3ea <HAL_TIM_ConfigClockSource+0x19e>
 800c348:	2b60      	cmp	r3, #96	@ 0x60
 800c34a:	d877      	bhi.n	800c43c <HAL_TIM_ConfigClockSource+0x1f0>
 800c34c:	2b50      	cmp	r3, #80	@ 0x50
 800c34e:	d03c      	beq.n	800c3ca <HAL_TIM_ConfigClockSource+0x17e>
 800c350:	2b50      	cmp	r3, #80	@ 0x50
 800c352:	d873      	bhi.n	800c43c <HAL_TIM_ConfigClockSource+0x1f0>
 800c354:	2b40      	cmp	r3, #64	@ 0x40
 800c356:	d058      	beq.n	800c40a <HAL_TIM_ConfigClockSource+0x1be>
 800c358:	2b40      	cmp	r3, #64	@ 0x40
 800c35a:	d86f      	bhi.n	800c43c <HAL_TIM_ConfigClockSource+0x1f0>
 800c35c:	2b30      	cmp	r3, #48	@ 0x30
 800c35e:	d064      	beq.n	800c42a <HAL_TIM_ConfigClockSource+0x1de>
 800c360:	2b30      	cmp	r3, #48	@ 0x30
 800c362:	d86b      	bhi.n	800c43c <HAL_TIM_ConfigClockSource+0x1f0>
 800c364:	2b20      	cmp	r3, #32
 800c366:	d060      	beq.n	800c42a <HAL_TIM_ConfigClockSource+0x1de>
 800c368:	2b20      	cmp	r3, #32
 800c36a:	d867      	bhi.n	800c43c <HAL_TIM_ConfigClockSource+0x1f0>
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d05c      	beq.n	800c42a <HAL_TIM_ConfigClockSource+0x1de>
 800c370:	2b10      	cmp	r3, #16
 800c372:	d05a      	beq.n	800c42a <HAL_TIM_ConfigClockSource+0x1de>
 800c374:	e062      	b.n	800c43c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c37a:	683b      	ldr	r3, [r7, #0]
 800c37c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c37e:	683b      	ldr	r3, [r7, #0]
 800c380:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c382:	683b      	ldr	r3, [r7, #0]
 800c384:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c386:	f000 fe8b 	bl	800d0a0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	689b      	ldr	r3, [r3, #8]
 800c390:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c392:	68bb      	ldr	r3, [r7, #8]
 800c394:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800c398:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	68ba      	ldr	r2, [r7, #8]
 800c3a0:	609a      	str	r2, [r3, #8]
      break;
 800c3a2:	e04f      	b.n	800c444 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c3a8:	683b      	ldr	r3, [r7, #0]
 800c3aa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c3ac:	683b      	ldr	r3, [r7, #0]
 800c3ae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c3b0:	683b      	ldr	r3, [r7, #0]
 800c3b2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c3b4:	f000 fe74 	bl	800d0a0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	689a      	ldr	r2, [r3, #8]
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c3c6:	609a      	str	r2, [r3, #8]
      break;
 800c3c8:	e03c      	b.n	800c444 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c3ce:	683b      	ldr	r3, [r7, #0]
 800c3d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c3d2:	683b      	ldr	r3, [r7, #0]
 800c3d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c3d6:	461a      	mov	r2, r3
 800c3d8:	f000 fde6 	bl	800cfa8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	2150      	movs	r1, #80	@ 0x50
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	f000 fe3f 	bl	800d066 <TIM_ITRx_SetConfig>
      break;
 800c3e8:	e02c      	b.n	800c444 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c3ee:	683b      	ldr	r3, [r7, #0]
 800c3f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c3f2:	683b      	ldr	r3, [r7, #0]
 800c3f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c3f6:	461a      	mov	r2, r3
 800c3f8:	f000 fe05 	bl	800d006 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	2160      	movs	r1, #96	@ 0x60
 800c402:	4618      	mov	r0, r3
 800c404:	f000 fe2f 	bl	800d066 <TIM_ITRx_SetConfig>
      break;
 800c408:	e01c      	b.n	800c444 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c40e:	683b      	ldr	r3, [r7, #0]
 800c410:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c412:	683b      	ldr	r3, [r7, #0]
 800c414:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c416:	461a      	mov	r2, r3
 800c418:	f000 fdc6 	bl	800cfa8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	2140      	movs	r1, #64	@ 0x40
 800c422:	4618      	mov	r0, r3
 800c424:	f000 fe1f 	bl	800d066 <TIM_ITRx_SetConfig>
      break;
 800c428:	e00c      	b.n	800c444 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	681a      	ldr	r2, [r3, #0]
 800c42e:	683b      	ldr	r3, [r7, #0]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	4619      	mov	r1, r3
 800c434:	4610      	mov	r0, r2
 800c436:	f000 fe16 	bl	800d066 <TIM_ITRx_SetConfig>
      break;
 800c43a:	e003      	b.n	800c444 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800c43c:	2301      	movs	r3, #1
 800c43e:	73fb      	strb	r3, [r7, #15]
      break;
 800c440:	e000      	b.n	800c444 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800c442:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	2201      	movs	r2, #1
 800c448:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	2200      	movs	r2, #0
 800c450:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c454:	7bfb      	ldrb	r3, [r7, #15]
}
 800c456:	4618      	mov	r0, r3
 800c458:	3710      	adds	r7, #16
 800c45a:	46bd      	mov	sp, r7
 800c45c:	bd80      	pop	{r7, pc}
 800c45e:	bf00      	nop
 800c460:	00100070 	.word	0x00100070
 800c464:	00100060 	.word	0x00100060
 800c468:	00100050 	.word	0x00100050
 800c46c:	00100040 	.word	0x00100040
 800c470:	00100030 	.word	0x00100030
 800c474:	00100020 	.word	0x00100020

0800c478 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800c478:	b480      	push	{r7}
 800c47a:	b083      	sub	sp, #12
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800c480:	bf00      	nop
 800c482:	370c      	adds	r7, #12
 800c484:	46bd      	mov	sp, r7
 800c486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c48a:	4770      	bx	lr

0800c48c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c48c:	b480      	push	{r7}
 800c48e:	b083      	sub	sp, #12
 800c490:	af00      	add	r7, sp, #0
 800c492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c494:	bf00      	nop
 800c496:	370c      	adds	r7, #12
 800c498:	46bd      	mov	sp, r7
 800c49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c49e:	4770      	bx	lr

0800c4a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c4a0:	b480      	push	{r7}
 800c4a2:	b083      	sub	sp, #12
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c4a8:	bf00      	nop
 800c4aa:	370c      	adds	r7, #12
 800c4ac:	46bd      	mov	sp, r7
 800c4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b2:	4770      	bx	lr

0800c4b4 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800c4b4:	b480      	push	{r7}
 800c4b6:	b083      	sub	sp, #12
 800c4b8:	af00      	add	r7, sp, #0
 800c4ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800c4bc:	bf00      	nop
 800c4be:	370c      	adds	r7, #12
 800c4c0:	46bd      	mov	sp, r7
 800c4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c6:	4770      	bx	lr

0800c4c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c4c8:	b480      	push	{r7}
 800c4ca:	b083      	sub	sp, #12
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c4d0:	bf00      	nop
 800c4d2:	370c      	adds	r7, #12
 800c4d4:	46bd      	mov	sp, r7
 800c4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4da:	4770      	bx	lr

0800c4dc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800c4dc:	b480      	push	{r7}
 800c4de:	b083      	sub	sp, #12
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800c4e4:	bf00      	nop
 800c4e6:	370c      	adds	r7, #12
 800c4e8:	46bd      	mov	sp, r7
 800c4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ee:	4770      	bx	lr

0800c4f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c4f0:	b480      	push	{r7}
 800c4f2:	b083      	sub	sp, #12
 800c4f4:	af00      	add	r7, sp, #0
 800c4f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c4f8:	bf00      	nop
 800c4fa:	370c      	adds	r7, #12
 800c4fc:	46bd      	mov	sp, r7
 800c4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c502:	4770      	bx	lr

0800c504 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800c504:	b480      	push	{r7}
 800c506:	b083      	sub	sp, #12
 800c508:	af00      	add	r7, sp, #0
 800c50a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800c50c:	bf00      	nop
 800c50e:	370c      	adds	r7, #12
 800c510:	46bd      	mov	sp, r7
 800c512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c516:	4770      	bx	lr

0800c518 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800c518:	b480      	push	{r7}
 800c51a:	b083      	sub	sp, #12
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800c520:	bf00      	nop
 800c522:	370c      	adds	r7, #12
 800c524:	46bd      	mov	sp, r7
 800c526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c52a:	4770      	bx	lr

0800c52c <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 800c52c:	b480      	push	{r7}
 800c52e:	b087      	sub	sp, #28
 800c530:	af00      	add	r7, sp, #0
 800c532:	60f8      	str	r0, [r7, #12]
 800c534:	460b      	mov	r3, r1
 800c536:	607a      	str	r2, [r7, #4]
 800c538:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800c53a:	2300      	movs	r3, #0
 800c53c:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	2b00      	cmp	r3, #0
 800c542:	d101      	bne.n	800c548 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 800c544:	2301      	movs	r3, #1
 800c546:	e14a      	b.n	800c7de <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c54e:	b2db      	uxtb	r3, r3
 800c550:	2b01      	cmp	r3, #1
 800c552:	f040 80dd 	bne.w	800c710 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 800c556:	7afb      	ldrb	r3, [r7, #11]
 800c558:	2b1f      	cmp	r3, #31
 800c55a:	f200 80d6 	bhi.w	800c70a <HAL_TIM_RegisterCallback+0x1de>
 800c55e:	a201      	add	r2, pc, #4	@ (adr r2, 800c564 <HAL_TIM_RegisterCallback+0x38>)
 800c560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c564:	0800c5e5 	.word	0x0800c5e5
 800c568:	0800c5ed 	.word	0x0800c5ed
 800c56c:	0800c5f5 	.word	0x0800c5f5
 800c570:	0800c5fd 	.word	0x0800c5fd
 800c574:	0800c605 	.word	0x0800c605
 800c578:	0800c60d 	.word	0x0800c60d
 800c57c:	0800c615 	.word	0x0800c615
 800c580:	0800c61d 	.word	0x0800c61d
 800c584:	0800c625 	.word	0x0800c625
 800c588:	0800c62d 	.word	0x0800c62d
 800c58c:	0800c635 	.word	0x0800c635
 800c590:	0800c63d 	.word	0x0800c63d
 800c594:	0800c645 	.word	0x0800c645
 800c598:	0800c64d 	.word	0x0800c64d
 800c59c:	0800c657 	.word	0x0800c657
 800c5a0:	0800c661 	.word	0x0800c661
 800c5a4:	0800c66b 	.word	0x0800c66b
 800c5a8:	0800c675 	.word	0x0800c675
 800c5ac:	0800c67f 	.word	0x0800c67f
 800c5b0:	0800c689 	.word	0x0800c689
 800c5b4:	0800c693 	.word	0x0800c693
 800c5b8:	0800c69d 	.word	0x0800c69d
 800c5bc:	0800c6a7 	.word	0x0800c6a7
 800c5c0:	0800c6b1 	.word	0x0800c6b1
 800c5c4:	0800c6bb 	.word	0x0800c6bb
 800c5c8:	0800c6c5 	.word	0x0800c6c5
 800c5cc:	0800c6cf 	.word	0x0800c6cf
 800c5d0:	0800c6d9 	.word	0x0800c6d9
 800c5d4:	0800c6e3 	.word	0x0800c6e3
 800c5d8:	0800c6ed 	.word	0x0800c6ed
 800c5dc:	0800c6f7 	.word	0x0800c6f7
 800c5e0:	0800c701 	.word	0x0800c701
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	687a      	ldr	r2, [r7, #4]
 800c5e8:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800c5ea:	e0f7      	b.n	800c7dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	687a      	ldr	r2, [r7, #4]
 800c5f0:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800c5f2:	e0f3      	b.n	800c7dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	687a      	ldr	r2, [r7, #4]
 800c5f8:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800c5fa:	e0ef      	b.n	800c7dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	687a      	ldr	r2, [r7, #4]
 800c600:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800c602:	e0eb      	b.n	800c7dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	687a      	ldr	r2, [r7, #4]
 800c608:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800c60a:	e0e7      	b.n	800c7dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	687a      	ldr	r2, [r7, #4]
 800c610:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800c612:	e0e3      	b.n	800c7dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	687a      	ldr	r2, [r7, #4]
 800c618:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800c61a:	e0df      	b.n	800c7dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	687a      	ldr	r2, [r7, #4]
 800c620:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800c622:	e0db      	b.n	800c7dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	687a      	ldr	r2, [r7, #4]
 800c628:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800c62a:	e0d7      	b.n	800c7dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	687a      	ldr	r2, [r7, #4]
 800c630:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800c632:	e0d3      	b.n	800c7dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	687a      	ldr	r2, [r7, #4]
 800c638:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800c63a:	e0cf      	b.n	800c7dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	687a      	ldr	r2, [r7, #4]
 800c640:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800c642:	e0cb      	b.n	800c7dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	687a      	ldr	r2, [r7, #4]
 800c648:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800c64a:	e0c7      	b.n	800c7dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	687a      	ldr	r2, [r7, #4]
 800c650:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800c654:	e0c2      	b.n	800c7dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	687a      	ldr	r2, [r7, #4]
 800c65a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 800c65e:	e0bd      	b.n	800c7dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	687a      	ldr	r2, [r7, #4]
 800c664:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 800c668:	e0b8      	b.n	800c7dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	687a      	ldr	r2, [r7, #4]
 800c66e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 800c672:	e0b3      	b.n	800c7dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	687a      	ldr	r2, [r7, #4]
 800c678:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 800c67c:	e0ae      	b.n	800c7dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	687a      	ldr	r2, [r7, #4]
 800c682:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800c686:	e0a9      	b.n	800c7dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	687a      	ldr	r2, [r7, #4]
 800c68c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800c690:	e0a4      	b.n	800c7dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	687a      	ldr	r2, [r7, #4]
 800c696:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800c69a:	e09f      	b.n	800c7dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	687a      	ldr	r2, [r7, #4]
 800c6a0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800c6a4:	e09a      	b.n	800c7dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	687a      	ldr	r2, [r7, #4]
 800c6aa:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800c6ae:	e095      	b.n	800c7dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	687a      	ldr	r2, [r7, #4]
 800c6b4:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800c6b8:	e090      	b.n	800c7dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	687a      	ldr	r2, [r7, #4]
 800c6be:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800c6c2:	e08b      	b.n	800c7dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	687a      	ldr	r2, [r7, #4]
 800c6c8:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800c6cc:	e086      	b.n	800c7dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	687a      	ldr	r2, [r7, #4]
 800c6d2:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800c6d6:	e081      	b.n	800c7dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	687a      	ldr	r2, [r7, #4]
 800c6dc:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800c6e0:	e07c      	b.n	800c7dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	687a      	ldr	r2, [r7, #4]
 800c6e6:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800c6ea:	e077      	b.n	800c7dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	687a      	ldr	r2, [r7, #4]
 800c6f0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 800c6f4:	e072      	b.n	800c7dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	687a      	ldr	r2, [r7, #4]
 800c6fa:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800c6fe:	e06d      	b.n	800c7dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	687a      	ldr	r2, [r7, #4]
 800c704:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800c708:	e068      	b.n	800c7dc <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800c70a:	2301      	movs	r3, #1
 800c70c:	75fb      	strb	r3, [r7, #23]
        break;
 800c70e:	e065      	b.n	800c7dc <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c716:	b2db      	uxtb	r3, r3
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d15d      	bne.n	800c7d8 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 800c71c:	7afb      	ldrb	r3, [r7, #11]
 800c71e:	2b0d      	cmp	r3, #13
 800c720:	d857      	bhi.n	800c7d2 <HAL_TIM_RegisterCallback+0x2a6>
 800c722:	a201      	add	r2, pc, #4	@ (adr r2, 800c728 <HAL_TIM_RegisterCallback+0x1fc>)
 800c724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c728:	0800c761 	.word	0x0800c761
 800c72c:	0800c769 	.word	0x0800c769
 800c730:	0800c771 	.word	0x0800c771
 800c734:	0800c779 	.word	0x0800c779
 800c738:	0800c781 	.word	0x0800c781
 800c73c:	0800c789 	.word	0x0800c789
 800c740:	0800c791 	.word	0x0800c791
 800c744:	0800c799 	.word	0x0800c799
 800c748:	0800c7a1 	.word	0x0800c7a1
 800c74c:	0800c7a9 	.word	0x0800c7a9
 800c750:	0800c7b1 	.word	0x0800c7b1
 800c754:	0800c7b9 	.word	0x0800c7b9
 800c758:	0800c7c1 	.word	0x0800c7c1
 800c75c:	0800c7c9 	.word	0x0800c7c9
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	687a      	ldr	r2, [r7, #4]
 800c764:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800c766:	e039      	b.n	800c7dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	687a      	ldr	r2, [r7, #4]
 800c76c:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800c76e:	e035      	b.n	800c7dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	687a      	ldr	r2, [r7, #4]
 800c774:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800c776:	e031      	b.n	800c7dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	687a      	ldr	r2, [r7, #4]
 800c77c:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800c77e:	e02d      	b.n	800c7dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	687a      	ldr	r2, [r7, #4]
 800c784:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800c786:	e029      	b.n	800c7dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	687a      	ldr	r2, [r7, #4]
 800c78c:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800c78e:	e025      	b.n	800c7dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	687a      	ldr	r2, [r7, #4]
 800c794:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800c796:	e021      	b.n	800c7dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	687a      	ldr	r2, [r7, #4]
 800c79c:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800c79e:	e01d      	b.n	800c7dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	687a      	ldr	r2, [r7, #4]
 800c7a4:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800c7a6:	e019      	b.n	800c7dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	687a      	ldr	r2, [r7, #4]
 800c7ac:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800c7ae:	e015      	b.n	800c7dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	687a      	ldr	r2, [r7, #4]
 800c7b4:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800c7b6:	e011      	b.n	800c7dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	687a      	ldr	r2, [r7, #4]
 800c7bc:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800c7be:	e00d      	b.n	800c7dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	687a      	ldr	r2, [r7, #4]
 800c7c4:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800c7c6:	e009      	b.n	800c7dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	687a      	ldr	r2, [r7, #4]
 800c7cc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800c7d0:	e004      	b.n	800c7dc <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800c7d2:	2301      	movs	r3, #1
 800c7d4:	75fb      	strb	r3, [r7, #23]
        break;
 800c7d6:	e001      	b.n	800c7dc <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 800c7d8:	2301      	movs	r3, #1
 800c7da:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800c7dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800c7de:	4618      	mov	r0, r3
 800c7e0:	371c      	adds	r7, #28
 800c7e2:	46bd      	mov	sp, r7
 800c7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e8:	4770      	bx	lr
 800c7ea:	bf00      	nop

0800c7ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c7ec:	b480      	push	{r7}
 800c7ee:	b085      	sub	sp, #20
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	6078      	str	r0, [r7, #4]
 800c7f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	4a4c      	ldr	r2, [pc, #304]	@ (800c930 <TIM_Base_SetConfig+0x144>)
 800c800:	4293      	cmp	r3, r2
 800c802:	d017      	beq.n	800c834 <TIM_Base_SetConfig+0x48>
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c80a:	d013      	beq.n	800c834 <TIM_Base_SetConfig+0x48>
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	4a49      	ldr	r2, [pc, #292]	@ (800c934 <TIM_Base_SetConfig+0x148>)
 800c810:	4293      	cmp	r3, r2
 800c812:	d00f      	beq.n	800c834 <TIM_Base_SetConfig+0x48>
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	4a48      	ldr	r2, [pc, #288]	@ (800c938 <TIM_Base_SetConfig+0x14c>)
 800c818:	4293      	cmp	r3, r2
 800c81a:	d00b      	beq.n	800c834 <TIM_Base_SetConfig+0x48>
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	4a47      	ldr	r2, [pc, #284]	@ (800c93c <TIM_Base_SetConfig+0x150>)
 800c820:	4293      	cmp	r3, r2
 800c822:	d007      	beq.n	800c834 <TIM_Base_SetConfig+0x48>
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	4a46      	ldr	r2, [pc, #280]	@ (800c940 <TIM_Base_SetConfig+0x154>)
 800c828:	4293      	cmp	r3, r2
 800c82a:	d003      	beq.n	800c834 <TIM_Base_SetConfig+0x48>
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	4a45      	ldr	r2, [pc, #276]	@ (800c944 <TIM_Base_SetConfig+0x158>)
 800c830:	4293      	cmp	r3, r2
 800c832:	d108      	bne.n	800c846 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c83a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c83c:	683b      	ldr	r3, [r7, #0]
 800c83e:	685b      	ldr	r3, [r3, #4]
 800c840:	68fa      	ldr	r2, [r7, #12]
 800c842:	4313      	orrs	r3, r2
 800c844:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	4a39      	ldr	r2, [pc, #228]	@ (800c930 <TIM_Base_SetConfig+0x144>)
 800c84a:	4293      	cmp	r3, r2
 800c84c:	d023      	beq.n	800c896 <TIM_Base_SetConfig+0xaa>
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c854:	d01f      	beq.n	800c896 <TIM_Base_SetConfig+0xaa>
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	4a36      	ldr	r2, [pc, #216]	@ (800c934 <TIM_Base_SetConfig+0x148>)
 800c85a:	4293      	cmp	r3, r2
 800c85c:	d01b      	beq.n	800c896 <TIM_Base_SetConfig+0xaa>
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	4a35      	ldr	r2, [pc, #212]	@ (800c938 <TIM_Base_SetConfig+0x14c>)
 800c862:	4293      	cmp	r3, r2
 800c864:	d017      	beq.n	800c896 <TIM_Base_SetConfig+0xaa>
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	4a34      	ldr	r2, [pc, #208]	@ (800c93c <TIM_Base_SetConfig+0x150>)
 800c86a:	4293      	cmp	r3, r2
 800c86c:	d013      	beq.n	800c896 <TIM_Base_SetConfig+0xaa>
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	4a33      	ldr	r2, [pc, #204]	@ (800c940 <TIM_Base_SetConfig+0x154>)
 800c872:	4293      	cmp	r3, r2
 800c874:	d00f      	beq.n	800c896 <TIM_Base_SetConfig+0xaa>
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	4a33      	ldr	r2, [pc, #204]	@ (800c948 <TIM_Base_SetConfig+0x15c>)
 800c87a:	4293      	cmp	r3, r2
 800c87c:	d00b      	beq.n	800c896 <TIM_Base_SetConfig+0xaa>
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	4a32      	ldr	r2, [pc, #200]	@ (800c94c <TIM_Base_SetConfig+0x160>)
 800c882:	4293      	cmp	r3, r2
 800c884:	d007      	beq.n	800c896 <TIM_Base_SetConfig+0xaa>
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	4a31      	ldr	r2, [pc, #196]	@ (800c950 <TIM_Base_SetConfig+0x164>)
 800c88a:	4293      	cmp	r3, r2
 800c88c:	d003      	beq.n	800c896 <TIM_Base_SetConfig+0xaa>
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	4a2c      	ldr	r2, [pc, #176]	@ (800c944 <TIM_Base_SetConfig+0x158>)
 800c892:	4293      	cmp	r3, r2
 800c894:	d108      	bne.n	800c8a8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c89c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c89e:	683b      	ldr	r3, [r7, #0]
 800c8a0:	68db      	ldr	r3, [r3, #12]
 800c8a2:	68fa      	ldr	r2, [r7, #12]
 800c8a4:	4313      	orrs	r3, r2
 800c8a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c8ae:	683b      	ldr	r3, [r7, #0]
 800c8b0:	695b      	ldr	r3, [r3, #20]
 800c8b2:	4313      	orrs	r3, r2
 800c8b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	68fa      	ldr	r2, [r7, #12]
 800c8ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c8bc:	683b      	ldr	r3, [r7, #0]
 800c8be:	689a      	ldr	r2, [r3, #8]
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c8c4:	683b      	ldr	r3, [r7, #0]
 800c8c6:	681a      	ldr	r2, [r3, #0]
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	4a18      	ldr	r2, [pc, #96]	@ (800c930 <TIM_Base_SetConfig+0x144>)
 800c8d0:	4293      	cmp	r3, r2
 800c8d2:	d013      	beq.n	800c8fc <TIM_Base_SetConfig+0x110>
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	4a1a      	ldr	r2, [pc, #104]	@ (800c940 <TIM_Base_SetConfig+0x154>)
 800c8d8:	4293      	cmp	r3, r2
 800c8da:	d00f      	beq.n	800c8fc <TIM_Base_SetConfig+0x110>
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	4a1a      	ldr	r2, [pc, #104]	@ (800c948 <TIM_Base_SetConfig+0x15c>)
 800c8e0:	4293      	cmp	r3, r2
 800c8e2:	d00b      	beq.n	800c8fc <TIM_Base_SetConfig+0x110>
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	4a19      	ldr	r2, [pc, #100]	@ (800c94c <TIM_Base_SetConfig+0x160>)
 800c8e8:	4293      	cmp	r3, r2
 800c8ea:	d007      	beq.n	800c8fc <TIM_Base_SetConfig+0x110>
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	4a18      	ldr	r2, [pc, #96]	@ (800c950 <TIM_Base_SetConfig+0x164>)
 800c8f0:	4293      	cmp	r3, r2
 800c8f2:	d003      	beq.n	800c8fc <TIM_Base_SetConfig+0x110>
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	4a13      	ldr	r2, [pc, #76]	@ (800c944 <TIM_Base_SetConfig+0x158>)
 800c8f8:	4293      	cmp	r3, r2
 800c8fa:	d103      	bne.n	800c904 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c8fc:	683b      	ldr	r3, [r7, #0]
 800c8fe:	691a      	ldr	r2, [r3, #16]
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	2201      	movs	r2, #1
 800c908:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	691b      	ldr	r3, [r3, #16]
 800c90e:	f003 0301 	and.w	r3, r3, #1
 800c912:	2b01      	cmp	r3, #1
 800c914:	d105      	bne.n	800c922 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	691b      	ldr	r3, [r3, #16]
 800c91a:	f023 0201 	bic.w	r2, r3, #1
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	611a      	str	r2, [r3, #16]
  }
}
 800c922:	bf00      	nop
 800c924:	3714      	adds	r7, #20
 800c926:	46bd      	mov	sp, r7
 800c928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c92c:	4770      	bx	lr
 800c92e:	bf00      	nop
 800c930:	40012c00 	.word	0x40012c00
 800c934:	40000400 	.word	0x40000400
 800c938:	40000800 	.word	0x40000800
 800c93c:	40000c00 	.word	0x40000c00
 800c940:	40013400 	.word	0x40013400
 800c944:	40015000 	.word	0x40015000
 800c948:	40014000 	.word	0x40014000
 800c94c:	40014400 	.word	0x40014400
 800c950:	40014800 	.word	0x40014800

0800c954 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c954:	b480      	push	{r7}
 800c956:	b087      	sub	sp, #28
 800c958:	af00      	add	r7, sp, #0
 800c95a:	6078      	str	r0, [r7, #4]
 800c95c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	6a1b      	ldr	r3, [r3, #32]
 800c962:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	6a1b      	ldr	r3, [r3, #32]
 800c968:	f023 0201 	bic.w	r2, r3, #1
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	685b      	ldr	r3, [r3, #4]
 800c974:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	699b      	ldr	r3, [r3, #24]
 800c97a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c982:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c986:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	f023 0303 	bic.w	r3, r3, #3
 800c98e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c990:	683b      	ldr	r3, [r7, #0]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	68fa      	ldr	r2, [r7, #12]
 800c996:	4313      	orrs	r3, r2
 800c998:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c99a:	697b      	ldr	r3, [r7, #20]
 800c99c:	f023 0302 	bic.w	r3, r3, #2
 800c9a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c9a2:	683b      	ldr	r3, [r7, #0]
 800c9a4:	689b      	ldr	r3, [r3, #8]
 800c9a6:	697a      	ldr	r2, [r7, #20]
 800c9a8:	4313      	orrs	r3, r2
 800c9aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	4a30      	ldr	r2, [pc, #192]	@ (800ca70 <TIM_OC1_SetConfig+0x11c>)
 800c9b0:	4293      	cmp	r3, r2
 800c9b2:	d013      	beq.n	800c9dc <TIM_OC1_SetConfig+0x88>
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	4a2f      	ldr	r2, [pc, #188]	@ (800ca74 <TIM_OC1_SetConfig+0x120>)
 800c9b8:	4293      	cmp	r3, r2
 800c9ba:	d00f      	beq.n	800c9dc <TIM_OC1_SetConfig+0x88>
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	4a2e      	ldr	r2, [pc, #184]	@ (800ca78 <TIM_OC1_SetConfig+0x124>)
 800c9c0:	4293      	cmp	r3, r2
 800c9c2:	d00b      	beq.n	800c9dc <TIM_OC1_SetConfig+0x88>
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	4a2d      	ldr	r2, [pc, #180]	@ (800ca7c <TIM_OC1_SetConfig+0x128>)
 800c9c8:	4293      	cmp	r3, r2
 800c9ca:	d007      	beq.n	800c9dc <TIM_OC1_SetConfig+0x88>
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	4a2c      	ldr	r2, [pc, #176]	@ (800ca80 <TIM_OC1_SetConfig+0x12c>)
 800c9d0:	4293      	cmp	r3, r2
 800c9d2:	d003      	beq.n	800c9dc <TIM_OC1_SetConfig+0x88>
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	4a2b      	ldr	r2, [pc, #172]	@ (800ca84 <TIM_OC1_SetConfig+0x130>)
 800c9d8:	4293      	cmp	r3, r2
 800c9da:	d10c      	bne.n	800c9f6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c9dc:	697b      	ldr	r3, [r7, #20]
 800c9de:	f023 0308 	bic.w	r3, r3, #8
 800c9e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c9e4:	683b      	ldr	r3, [r7, #0]
 800c9e6:	68db      	ldr	r3, [r3, #12]
 800c9e8:	697a      	ldr	r2, [r7, #20]
 800c9ea:	4313      	orrs	r3, r2
 800c9ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c9ee:	697b      	ldr	r3, [r7, #20]
 800c9f0:	f023 0304 	bic.w	r3, r3, #4
 800c9f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	4a1d      	ldr	r2, [pc, #116]	@ (800ca70 <TIM_OC1_SetConfig+0x11c>)
 800c9fa:	4293      	cmp	r3, r2
 800c9fc:	d013      	beq.n	800ca26 <TIM_OC1_SetConfig+0xd2>
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	4a1c      	ldr	r2, [pc, #112]	@ (800ca74 <TIM_OC1_SetConfig+0x120>)
 800ca02:	4293      	cmp	r3, r2
 800ca04:	d00f      	beq.n	800ca26 <TIM_OC1_SetConfig+0xd2>
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	4a1b      	ldr	r2, [pc, #108]	@ (800ca78 <TIM_OC1_SetConfig+0x124>)
 800ca0a:	4293      	cmp	r3, r2
 800ca0c:	d00b      	beq.n	800ca26 <TIM_OC1_SetConfig+0xd2>
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	4a1a      	ldr	r2, [pc, #104]	@ (800ca7c <TIM_OC1_SetConfig+0x128>)
 800ca12:	4293      	cmp	r3, r2
 800ca14:	d007      	beq.n	800ca26 <TIM_OC1_SetConfig+0xd2>
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	4a19      	ldr	r2, [pc, #100]	@ (800ca80 <TIM_OC1_SetConfig+0x12c>)
 800ca1a:	4293      	cmp	r3, r2
 800ca1c:	d003      	beq.n	800ca26 <TIM_OC1_SetConfig+0xd2>
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	4a18      	ldr	r2, [pc, #96]	@ (800ca84 <TIM_OC1_SetConfig+0x130>)
 800ca22:	4293      	cmp	r3, r2
 800ca24:	d111      	bne.n	800ca4a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ca26:	693b      	ldr	r3, [r7, #16]
 800ca28:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ca2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ca2e:	693b      	ldr	r3, [r7, #16]
 800ca30:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ca34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ca36:	683b      	ldr	r3, [r7, #0]
 800ca38:	695b      	ldr	r3, [r3, #20]
 800ca3a:	693a      	ldr	r2, [r7, #16]
 800ca3c:	4313      	orrs	r3, r2
 800ca3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ca40:	683b      	ldr	r3, [r7, #0]
 800ca42:	699b      	ldr	r3, [r3, #24]
 800ca44:	693a      	ldr	r2, [r7, #16]
 800ca46:	4313      	orrs	r3, r2
 800ca48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	693a      	ldr	r2, [r7, #16]
 800ca4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	68fa      	ldr	r2, [r7, #12]
 800ca54:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ca56:	683b      	ldr	r3, [r7, #0]
 800ca58:	685a      	ldr	r2, [r3, #4]
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	697a      	ldr	r2, [r7, #20]
 800ca62:	621a      	str	r2, [r3, #32]
}
 800ca64:	bf00      	nop
 800ca66:	371c      	adds	r7, #28
 800ca68:	46bd      	mov	sp, r7
 800ca6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca6e:	4770      	bx	lr
 800ca70:	40012c00 	.word	0x40012c00
 800ca74:	40013400 	.word	0x40013400
 800ca78:	40014000 	.word	0x40014000
 800ca7c:	40014400 	.word	0x40014400
 800ca80:	40014800 	.word	0x40014800
 800ca84:	40015000 	.word	0x40015000

0800ca88 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ca88:	b480      	push	{r7}
 800ca8a:	b087      	sub	sp, #28
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	6078      	str	r0, [r7, #4]
 800ca90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	6a1b      	ldr	r3, [r3, #32]
 800ca96:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	6a1b      	ldr	r3, [r3, #32]
 800ca9c:	f023 0210 	bic.w	r2, r3, #16
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	685b      	ldr	r3, [r3, #4]
 800caa8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	699b      	ldr	r3, [r3, #24]
 800caae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800cab6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800caba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800cac2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cac4:	683b      	ldr	r3, [r7, #0]
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	021b      	lsls	r3, r3, #8
 800caca:	68fa      	ldr	r2, [r7, #12]
 800cacc:	4313      	orrs	r3, r2
 800cace:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800cad0:	697b      	ldr	r3, [r7, #20]
 800cad2:	f023 0320 	bic.w	r3, r3, #32
 800cad6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800cad8:	683b      	ldr	r3, [r7, #0]
 800cada:	689b      	ldr	r3, [r3, #8]
 800cadc:	011b      	lsls	r3, r3, #4
 800cade:	697a      	ldr	r2, [r7, #20]
 800cae0:	4313      	orrs	r3, r2
 800cae2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	4a2c      	ldr	r2, [pc, #176]	@ (800cb98 <TIM_OC2_SetConfig+0x110>)
 800cae8:	4293      	cmp	r3, r2
 800caea:	d007      	beq.n	800cafc <TIM_OC2_SetConfig+0x74>
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	4a2b      	ldr	r2, [pc, #172]	@ (800cb9c <TIM_OC2_SetConfig+0x114>)
 800caf0:	4293      	cmp	r3, r2
 800caf2:	d003      	beq.n	800cafc <TIM_OC2_SetConfig+0x74>
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	4a2a      	ldr	r2, [pc, #168]	@ (800cba0 <TIM_OC2_SetConfig+0x118>)
 800caf8:	4293      	cmp	r3, r2
 800cafa:	d10d      	bne.n	800cb18 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800cafc:	697b      	ldr	r3, [r7, #20]
 800cafe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cb02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800cb04:	683b      	ldr	r3, [r7, #0]
 800cb06:	68db      	ldr	r3, [r3, #12]
 800cb08:	011b      	lsls	r3, r3, #4
 800cb0a:	697a      	ldr	r2, [r7, #20]
 800cb0c:	4313      	orrs	r3, r2
 800cb0e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800cb10:	697b      	ldr	r3, [r7, #20]
 800cb12:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cb16:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	4a1f      	ldr	r2, [pc, #124]	@ (800cb98 <TIM_OC2_SetConfig+0x110>)
 800cb1c:	4293      	cmp	r3, r2
 800cb1e:	d013      	beq.n	800cb48 <TIM_OC2_SetConfig+0xc0>
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	4a1e      	ldr	r2, [pc, #120]	@ (800cb9c <TIM_OC2_SetConfig+0x114>)
 800cb24:	4293      	cmp	r3, r2
 800cb26:	d00f      	beq.n	800cb48 <TIM_OC2_SetConfig+0xc0>
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	4a1e      	ldr	r2, [pc, #120]	@ (800cba4 <TIM_OC2_SetConfig+0x11c>)
 800cb2c:	4293      	cmp	r3, r2
 800cb2e:	d00b      	beq.n	800cb48 <TIM_OC2_SetConfig+0xc0>
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	4a1d      	ldr	r2, [pc, #116]	@ (800cba8 <TIM_OC2_SetConfig+0x120>)
 800cb34:	4293      	cmp	r3, r2
 800cb36:	d007      	beq.n	800cb48 <TIM_OC2_SetConfig+0xc0>
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	4a1c      	ldr	r2, [pc, #112]	@ (800cbac <TIM_OC2_SetConfig+0x124>)
 800cb3c:	4293      	cmp	r3, r2
 800cb3e:	d003      	beq.n	800cb48 <TIM_OC2_SetConfig+0xc0>
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	4a17      	ldr	r2, [pc, #92]	@ (800cba0 <TIM_OC2_SetConfig+0x118>)
 800cb44:	4293      	cmp	r3, r2
 800cb46:	d113      	bne.n	800cb70 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800cb48:	693b      	ldr	r3, [r7, #16]
 800cb4a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800cb4e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800cb50:	693b      	ldr	r3, [r7, #16]
 800cb52:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800cb56:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800cb58:	683b      	ldr	r3, [r7, #0]
 800cb5a:	695b      	ldr	r3, [r3, #20]
 800cb5c:	009b      	lsls	r3, r3, #2
 800cb5e:	693a      	ldr	r2, [r7, #16]
 800cb60:	4313      	orrs	r3, r2
 800cb62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800cb64:	683b      	ldr	r3, [r7, #0]
 800cb66:	699b      	ldr	r3, [r3, #24]
 800cb68:	009b      	lsls	r3, r3, #2
 800cb6a:	693a      	ldr	r2, [r7, #16]
 800cb6c:	4313      	orrs	r3, r2
 800cb6e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	693a      	ldr	r2, [r7, #16]
 800cb74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	68fa      	ldr	r2, [r7, #12]
 800cb7a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800cb7c:	683b      	ldr	r3, [r7, #0]
 800cb7e:	685a      	ldr	r2, [r3, #4]
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	697a      	ldr	r2, [r7, #20]
 800cb88:	621a      	str	r2, [r3, #32]
}
 800cb8a:	bf00      	nop
 800cb8c:	371c      	adds	r7, #28
 800cb8e:	46bd      	mov	sp, r7
 800cb90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb94:	4770      	bx	lr
 800cb96:	bf00      	nop
 800cb98:	40012c00 	.word	0x40012c00
 800cb9c:	40013400 	.word	0x40013400
 800cba0:	40015000 	.word	0x40015000
 800cba4:	40014000 	.word	0x40014000
 800cba8:	40014400 	.word	0x40014400
 800cbac:	40014800 	.word	0x40014800

0800cbb0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800cbb0:	b480      	push	{r7}
 800cbb2:	b087      	sub	sp, #28
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	6078      	str	r0, [r7, #4]
 800cbb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	6a1b      	ldr	r3, [r3, #32]
 800cbbe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	6a1b      	ldr	r3, [r3, #32]
 800cbc4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	685b      	ldr	r3, [r3, #4]
 800cbd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	69db      	ldr	r3, [r3, #28]
 800cbd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800cbde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cbe2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	f023 0303 	bic.w	r3, r3, #3
 800cbea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cbec:	683b      	ldr	r3, [r7, #0]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	68fa      	ldr	r2, [r7, #12]
 800cbf2:	4313      	orrs	r3, r2
 800cbf4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800cbf6:	697b      	ldr	r3, [r7, #20]
 800cbf8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800cbfc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800cbfe:	683b      	ldr	r3, [r7, #0]
 800cc00:	689b      	ldr	r3, [r3, #8]
 800cc02:	021b      	lsls	r3, r3, #8
 800cc04:	697a      	ldr	r2, [r7, #20]
 800cc06:	4313      	orrs	r3, r2
 800cc08:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	4a2b      	ldr	r2, [pc, #172]	@ (800ccbc <TIM_OC3_SetConfig+0x10c>)
 800cc0e:	4293      	cmp	r3, r2
 800cc10:	d007      	beq.n	800cc22 <TIM_OC3_SetConfig+0x72>
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	4a2a      	ldr	r2, [pc, #168]	@ (800ccc0 <TIM_OC3_SetConfig+0x110>)
 800cc16:	4293      	cmp	r3, r2
 800cc18:	d003      	beq.n	800cc22 <TIM_OC3_SetConfig+0x72>
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	4a29      	ldr	r2, [pc, #164]	@ (800ccc4 <TIM_OC3_SetConfig+0x114>)
 800cc1e:	4293      	cmp	r3, r2
 800cc20:	d10d      	bne.n	800cc3e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800cc22:	697b      	ldr	r3, [r7, #20]
 800cc24:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800cc28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800cc2a:	683b      	ldr	r3, [r7, #0]
 800cc2c:	68db      	ldr	r3, [r3, #12]
 800cc2e:	021b      	lsls	r3, r3, #8
 800cc30:	697a      	ldr	r2, [r7, #20]
 800cc32:	4313      	orrs	r3, r2
 800cc34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800cc36:	697b      	ldr	r3, [r7, #20]
 800cc38:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800cc3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	4a1e      	ldr	r2, [pc, #120]	@ (800ccbc <TIM_OC3_SetConfig+0x10c>)
 800cc42:	4293      	cmp	r3, r2
 800cc44:	d013      	beq.n	800cc6e <TIM_OC3_SetConfig+0xbe>
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	4a1d      	ldr	r2, [pc, #116]	@ (800ccc0 <TIM_OC3_SetConfig+0x110>)
 800cc4a:	4293      	cmp	r3, r2
 800cc4c:	d00f      	beq.n	800cc6e <TIM_OC3_SetConfig+0xbe>
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	4a1d      	ldr	r2, [pc, #116]	@ (800ccc8 <TIM_OC3_SetConfig+0x118>)
 800cc52:	4293      	cmp	r3, r2
 800cc54:	d00b      	beq.n	800cc6e <TIM_OC3_SetConfig+0xbe>
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	4a1c      	ldr	r2, [pc, #112]	@ (800cccc <TIM_OC3_SetConfig+0x11c>)
 800cc5a:	4293      	cmp	r3, r2
 800cc5c:	d007      	beq.n	800cc6e <TIM_OC3_SetConfig+0xbe>
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	4a1b      	ldr	r2, [pc, #108]	@ (800ccd0 <TIM_OC3_SetConfig+0x120>)
 800cc62:	4293      	cmp	r3, r2
 800cc64:	d003      	beq.n	800cc6e <TIM_OC3_SetConfig+0xbe>
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	4a16      	ldr	r2, [pc, #88]	@ (800ccc4 <TIM_OC3_SetConfig+0x114>)
 800cc6a:	4293      	cmp	r3, r2
 800cc6c:	d113      	bne.n	800cc96 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800cc6e:	693b      	ldr	r3, [r7, #16]
 800cc70:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800cc74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800cc76:	693b      	ldr	r3, [r7, #16]
 800cc78:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800cc7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800cc7e:	683b      	ldr	r3, [r7, #0]
 800cc80:	695b      	ldr	r3, [r3, #20]
 800cc82:	011b      	lsls	r3, r3, #4
 800cc84:	693a      	ldr	r2, [r7, #16]
 800cc86:	4313      	orrs	r3, r2
 800cc88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800cc8a:	683b      	ldr	r3, [r7, #0]
 800cc8c:	699b      	ldr	r3, [r3, #24]
 800cc8e:	011b      	lsls	r3, r3, #4
 800cc90:	693a      	ldr	r2, [r7, #16]
 800cc92:	4313      	orrs	r3, r2
 800cc94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	693a      	ldr	r2, [r7, #16]
 800cc9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	68fa      	ldr	r2, [r7, #12]
 800cca0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800cca2:	683b      	ldr	r3, [r7, #0]
 800cca4:	685a      	ldr	r2, [r3, #4]
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	697a      	ldr	r2, [r7, #20]
 800ccae:	621a      	str	r2, [r3, #32]
}
 800ccb0:	bf00      	nop
 800ccb2:	371c      	adds	r7, #28
 800ccb4:	46bd      	mov	sp, r7
 800ccb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccba:	4770      	bx	lr
 800ccbc:	40012c00 	.word	0x40012c00
 800ccc0:	40013400 	.word	0x40013400
 800ccc4:	40015000 	.word	0x40015000
 800ccc8:	40014000 	.word	0x40014000
 800cccc:	40014400 	.word	0x40014400
 800ccd0:	40014800 	.word	0x40014800

0800ccd4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ccd4:	b480      	push	{r7}
 800ccd6:	b087      	sub	sp, #28
 800ccd8:	af00      	add	r7, sp, #0
 800ccda:	6078      	str	r0, [r7, #4]
 800ccdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	6a1b      	ldr	r3, [r3, #32]
 800cce2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	6a1b      	ldr	r3, [r3, #32]
 800cce8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	685b      	ldr	r3, [r3, #4]
 800ccf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	69db      	ldr	r3, [r3, #28]
 800ccfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800cd02:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cd06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800cd0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cd10:	683b      	ldr	r3, [r7, #0]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	021b      	lsls	r3, r3, #8
 800cd16:	68fa      	ldr	r2, [r7, #12]
 800cd18:	4313      	orrs	r3, r2
 800cd1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800cd1c:	697b      	ldr	r3, [r7, #20]
 800cd1e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800cd22:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800cd24:	683b      	ldr	r3, [r7, #0]
 800cd26:	689b      	ldr	r3, [r3, #8]
 800cd28:	031b      	lsls	r3, r3, #12
 800cd2a:	697a      	ldr	r2, [r7, #20]
 800cd2c:	4313      	orrs	r3, r2
 800cd2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	4a2c      	ldr	r2, [pc, #176]	@ (800cde4 <TIM_OC4_SetConfig+0x110>)
 800cd34:	4293      	cmp	r3, r2
 800cd36:	d007      	beq.n	800cd48 <TIM_OC4_SetConfig+0x74>
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	4a2b      	ldr	r2, [pc, #172]	@ (800cde8 <TIM_OC4_SetConfig+0x114>)
 800cd3c:	4293      	cmp	r3, r2
 800cd3e:	d003      	beq.n	800cd48 <TIM_OC4_SetConfig+0x74>
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	4a2a      	ldr	r2, [pc, #168]	@ (800cdec <TIM_OC4_SetConfig+0x118>)
 800cd44:	4293      	cmp	r3, r2
 800cd46:	d10d      	bne.n	800cd64 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800cd48:	697b      	ldr	r3, [r7, #20]
 800cd4a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800cd4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800cd50:	683b      	ldr	r3, [r7, #0]
 800cd52:	68db      	ldr	r3, [r3, #12]
 800cd54:	031b      	lsls	r3, r3, #12
 800cd56:	697a      	ldr	r2, [r7, #20]
 800cd58:	4313      	orrs	r3, r2
 800cd5a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800cd5c:	697b      	ldr	r3, [r7, #20]
 800cd5e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800cd62:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	4a1f      	ldr	r2, [pc, #124]	@ (800cde4 <TIM_OC4_SetConfig+0x110>)
 800cd68:	4293      	cmp	r3, r2
 800cd6a:	d013      	beq.n	800cd94 <TIM_OC4_SetConfig+0xc0>
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	4a1e      	ldr	r2, [pc, #120]	@ (800cde8 <TIM_OC4_SetConfig+0x114>)
 800cd70:	4293      	cmp	r3, r2
 800cd72:	d00f      	beq.n	800cd94 <TIM_OC4_SetConfig+0xc0>
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	4a1e      	ldr	r2, [pc, #120]	@ (800cdf0 <TIM_OC4_SetConfig+0x11c>)
 800cd78:	4293      	cmp	r3, r2
 800cd7a:	d00b      	beq.n	800cd94 <TIM_OC4_SetConfig+0xc0>
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	4a1d      	ldr	r2, [pc, #116]	@ (800cdf4 <TIM_OC4_SetConfig+0x120>)
 800cd80:	4293      	cmp	r3, r2
 800cd82:	d007      	beq.n	800cd94 <TIM_OC4_SetConfig+0xc0>
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	4a1c      	ldr	r2, [pc, #112]	@ (800cdf8 <TIM_OC4_SetConfig+0x124>)
 800cd88:	4293      	cmp	r3, r2
 800cd8a:	d003      	beq.n	800cd94 <TIM_OC4_SetConfig+0xc0>
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	4a17      	ldr	r2, [pc, #92]	@ (800cdec <TIM_OC4_SetConfig+0x118>)
 800cd90:	4293      	cmp	r3, r2
 800cd92:	d113      	bne.n	800cdbc <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800cd94:	693b      	ldr	r3, [r7, #16]
 800cd96:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800cd9a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800cd9c:	693b      	ldr	r3, [r7, #16]
 800cd9e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800cda2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800cda4:	683b      	ldr	r3, [r7, #0]
 800cda6:	695b      	ldr	r3, [r3, #20]
 800cda8:	019b      	lsls	r3, r3, #6
 800cdaa:	693a      	ldr	r2, [r7, #16]
 800cdac:	4313      	orrs	r3, r2
 800cdae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800cdb0:	683b      	ldr	r3, [r7, #0]
 800cdb2:	699b      	ldr	r3, [r3, #24]
 800cdb4:	019b      	lsls	r3, r3, #6
 800cdb6:	693a      	ldr	r2, [r7, #16]
 800cdb8:	4313      	orrs	r3, r2
 800cdba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	693a      	ldr	r2, [r7, #16]
 800cdc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	68fa      	ldr	r2, [r7, #12]
 800cdc6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800cdc8:	683b      	ldr	r3, [r7, #0]
 800cdca:	685a      	ldr	r2, [r3, #4]
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	697a      	ldr	r2, [r7, #20]
 800cdd4:	621a      	str	r2, [r3, #32]
}
 800cdd6:	bf00      	nop
 800cdd8:	371c      	adds	r7, #28
 800cdda:	46bd      	mov	sp, r7
 800cddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde0:	4770      	bx	lr
 800cde2:	bf00      	nop
 800cde4:	40012c00 	.word	0x40012c00
 800cde8:	40013400 	.word	0x40013400
 800cdec:	40015000 	.word	0x40015000
 800cdf0:	40014000 	.word	0x40014000
 800cdf4:	40014400 	.word	0x40014400
 800cdf8:	40014800 	.word	0x40014800

0800cdfc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800cdfc:	b480      	push	{r7}
 800cdfe:	b087      	sub	sp, #28
 800ce00:	af00      	add	r7, sp, #0
 800ce02:	6078      	str	r0, [r7, #4]
 800ce04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	6a1b      	ldr	r3, [r3, #32]
 800ce0a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	6a1b      	ldr	r3, [r3, #32]
 800ce10:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	685b      	ldr	r3, [r3, #4]
 800ce1c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ce22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ce2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ce2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ce30:	683b      	ldr	r3, [r7, #0]
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	68fa      	ldr	r2, [r7, #12]
 800ce36:	4313      	orrs	r3, r2
 800ce38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ce3a:	693b      	ldr	r3, [r7, #16]
 800ce3c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800ce40:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ce42:	683b      	ldr	r3, [r7, #0]
 800ce44:	689b      	ldr	r3, [r3, #8]
 800ce46:	041b      	lsls	r3, r3, #16
 800ce48:	693a      	ldr	r2, [r7, #16]
 800ce4a:	4313      	orrs	r3, r2
 800ce4c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	4a19      	ldr	r2, [pc, #100]	@ (800ceb8 <TIM_OC5_SetConfig+0xbc>)
 800ce52:	4293      	cmp	r3, r2
 800ce54:	d013      	beq.n	800ce7e <TIM_OC5_SetConfig+0x82>
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	4a18      	ldr	r2, [pc, #96]	@ (800cebc <TIM_OC5_SetConfig+0xc0>)
 800ce5a:	4293      	cmp	r3, r2
 800ce5c:	d00f      	beq.n	800ce7e <TIM_OC5_SetConfig+0x82>
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	4a17      	ldr	r2, [pc, #92]	@ (800cec0 <TIM_OC5_SetConfig+0xc4>)
 800ce62:	4293      	cmp	r3, r2
 800ce64:	d00b      	beq.n	800ce7e <TIM_OC5_SetConfig+0x82>
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	4a16      	ldr	r2, [pc, #88]	@ (800cec4 <TIM_OC5_SetConfig+0xc8>)
 800ce6a:	4293      	cmp	r3, r2
 800ce6c:	d007      	beq.n	800ce7e <TIM_OC5_SetConfig+0x82>
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	4a15      	ldr	r2, [pc, #84]	@ (800cec8 <TIM_OC5_SetConfig+0xcc>)
 800ce72:	4293      	cmp	r3, r2
 800ce74:	d003      	beq.n	800ce7e <TIM_OC5_SetConfig+0x82>
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	4a14      	ldr	r2, [pc, #80]	@ (800cecc <TIM_OC5_SetConfig+0xd0>)
 800ce7a:	4293      	cmp	r3, r2
 800ce7c:	d109      	bne.n	800ce92 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ce7e:	697b      	ldr	r3, [r7, #20]
 800ce80:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ce84:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ce86:	683b      	ldr	r3, [r7, #0]
 800ce88:	695b      	ldr	r3, [r3, #20]
 800ce8a:	021b      	lsls	r3, r3, #8
 800ce8c:	697a      	ldr	r2, [r7, #20]
 800ce8e:	4313      	orrs	r3, r2
 800ce90:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	697a      	ldr	r2, [r7, #20]
 800ce96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	68fa      	ldr	r2, [r7, #12]
 800ce9c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ce9e:	683b      	ldr	r3, [r7, #0]
 800cea0:	685a      	ldr	r2, [r3, #4]
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	693a      	ldr	r2, [r7, #16]
 800ceaa:	621a      	str	r2, [r3, #32]
}
 800ceac:	bf00      	nop
 800ceae:	371c      	adds	r7, #28
 800ceb0:	46bd      	mov	sp, r7
 800ceb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb6:	4770      	bx	lr
 800ceb8:	40012c00 	.word	0x40012c00
 800cebc:	40013400 	.word	0x40013400
 800cec0:	40014000 	.word	0x40014000
 800cec4:	40014400 	.word	0x40014400
 800cec8:	40014800 	.word	0x40014800
 800cecc:	40015000 	.word	0x40015000

0800ced0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ced0:	b480      	push	{r7}
 800ced2:	b087      	sub	sp, #28
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	6078      	str	r0, [r7, #4]
 800ced8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	6a1b      	ldr	r3, [r3, #32]
 800cede:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	6a1b      	ldr	r3, [r3, #32]
 800cee4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	685b      	ldr	r3, [r3, #4]
 800cef0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800cefe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cf02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cf04:	683b      	ldr	r3, [r7, #0]
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	021b      	lsls	r3, r3, #8
 800cf0a:	68fa      	ldr	r2, [r7, #12]
 800cf0c:	4313      	orrs	r3, r2
 800cf0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800cf10:	693b      	ldr	r3, [r7, #16]
 800cf12:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800cf16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800cf18:	683b      	ldr	r3, [r7, #0]
 800cf1a:	689b      	ldr	r3, [r3, #8]
 800cf1c:	051b      	lsls	r3, r3, #20
 800cf1e:	693a      	ldr	r2, [r7, #16]
 800cf20:	4313      	orrs	r3, r2
 800cf22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	4a1a      	ldr	r2, [pc, #104]	@ (800cf90 <TIM_OC6_SetConfig+0xc0>)
 800cf28:	4293      	cmp	r3, r2
 800cf2a:	d013      	beq.n	800cf54 <TIM_OC6_SetConfig+0x84>
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	4a19      	ldr	r2, [pc, #100]	@ (800cf94 <TIM_OC6_SetConfig+0xc4>)
 800cf30:	4293      	cmp	r3, r2
 800cf32:	d00f      	beq.n	800cf54 <TIM_OC6_SetConfig+0x84>
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	4a18      	ldr	r2, [pc, #96]	@ (800cf98 <TIM_OC6_SetConfig+0xc8>)
 800cf38:	4293      	cmp	r3, r2
 800cf3a:	d00b      	beq.n	800cf54 <TIM_OC6_SetConfig+0x84>
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	4a17      	ldr	r2, [pc, #92]	@ (800cf9c <TIM_OC6_SetConfig+0xcc>)
 800cf40:	4293      	cmp	r3, r2
 800cf42:	d007      	beq.n	800cf54 <TIM_OC6_SetConfig+0x84>
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	4a16      	ldr	r2, [pc, #88]	@ (800cfa0 <TIM_OC6_SetConfig+0xd0>)
 800cf48:	4293      	cmp	r3, r2
 800cf4a:	d003      	beq.n	800cf54 <TIM_OC6_SetConfig+0x84>
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	4a15      	ldr	r2, [pc, #84]	@ (800cfa4 <TIM_OC6_SetConfig+0xd4>)
 800cf50:	4293      	cmp	r3, r2
 800cf52:	d109      	bne.n	800cf68 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800cf54:	697b      	ldr	r3, [r7, #20]
 800cf56:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800cf5a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800cf5c:	683b      	ldr	r3, [r7, #0]
 800cf5e:	695b      	ldr	r3, [r3, #20]
 800cf60:	029b      	lsls	r3, r3, #10
 800cf62:	697a      	ldr	r2, [r7, #20]
 800cf64:	4313      	orrs	r3, r2
 800cf66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	697a      	ldr	r2, [r7, #20]
 800cf6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	68fa      	ldr	r2, [r7, #12]
 800cf72:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800cf74:	683b      	ldr	r3, [r7, #0]
 800cf76:	685a      	ldr	r2, [r3, #4]
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	693a      	ldr	r2, [r7, #16]
 800cf80:	621a      	str	r2, [r3, #32]
}
 800cf82:	bf00      	nop
 800cf84:	371c      	adds	r7, #28
 800cf86:	46bd      	mov	sp, r7
 800cf88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf8c:	4770      	bx	lr
 800cf8e:	bf00      	nop
 800cf90:	40012c00 	.word	0x40012c00
 800cf94:	40013400 	.word	0x40013400
 800cf98:	40014000 	.word	0x40014000
 800cf9c:	40014400 	.word	0x40014400
 800cfa0:	40014800 	.word	0x40014800
 800cfa4:	40015000 	.word	0x40015000

0800cfa8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cfa8:	b480      	push	{r7}
 800cfaa:	b087      	sub	sp, #28
 800cfac:	af00      	add	r7, sp, #0
 800cfae:	60f8      	str	r0, [r7, #12]
 800cfb0:	60b9      	str	r1, [r7, #8]
 800cfb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	6a1b      	ldr	r3, [r3, #32]
 800cfb8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	6a1b      	ldr	r3, [r3, #32]
 800cfbe:	f023 0201 	bic.w	r2, r3, #1
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	699b      	ldr	r3, [r3, #24]
 800cfca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cfcc:	693b      	ldr	r3, [r7, #16]
 800cfce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800cfd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	011b      	lsls	r3, r3, #4
 800cfd8:	693a      	ldr	r2, [r7, #16]
 800cfda:	4313      	orrs	r3, r2
 800cfdc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cfde:	697b      	ldr	r3, [r7, #20]
 800cfe0:	f023 030a 	bic.w	r3, r3, #10
 800cfe4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800cfe6:	697a      	ldr	r2, [r7, #20]
 800cfe8:	68bb      	ldr	r3, [r7, #8]
 800cfea:	4313      	orrs	r3, r2
 800cfec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	693a      	ldr	r2, [r7, #16]
 800cff2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	697a      	ldr	r2, [r7, #20]
 800cff8:	621a      	str	r2, [r3, #32]
}
 800cffa:	bf00      	nop
 800cffc:	371c      	adds	r7, #28
 800cffe:	46bd      	mov	sp, r7
 800d000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d004:	4770      	bx	lr

0800d006 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d006:	b480      	push	{r7}
 800d008:	b087      	sub	sp, #28
 800d00a:	af00      	add	r7, sp, #0
 800d00c:	60f8      	str	r0, [r7, #12]
 800d00e:	60b9      	str	r1, [r7, #8]
 800d010:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	6a1b      	ldr	r3, [r3, #32]
 800d016:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	6a1b      	ldr	r3, [r3, #32]
 800d01c:	f023 0210 	bic.w	r2, r3, #16
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	699b      	ldr	r3, [r3, #24]
 800d028:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d02a:	693b      	ldr	r3, [r7, #16]
 800d02c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800d030:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	031b      	lsls	r3, r3, #12
 800d036:	693a      	ldr	r2, [r7, #16]
 800d038:	4313      	orrs	r3, r2
 800d03a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d03c:	697b      	ldr	r3, [r7, #20]
 800d03e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800d042:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d044:	68bb      	ldr	r3, [r7, #8]
 800d046:	011b      	lsls	r3, r3, #4
 800d048:	697a      	ldr	r2, [r7, #20]
 800d04a:	4313      	orrs	r3, r2
 800d04c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	693a      	ldr	r2, [r7, #16]
 800d052:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	697a      	ldr	r2, [r7, #20]
 800d058:	621a      	str	r2, [r3, #32]
}
 800d05a:	bf00      	nop
 800d05c:	371c      	adds	r7, #28
 800d05e:	46bd      	mov	sp, r7
 800d060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d064:	4770      	bx	lr

0800d066 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d066:	b480      	push	{r7}
 800d068:	b085      	sub	sp, #20
 800d06a:	af00      	add	r7, sp, #0
 800d06c:	6078      	str	r0, [r7, #4]
 800d06e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	689b      	ldr	r3, [r3, #8]
 800d074:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800d07c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d080:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d082:	683a      	ldr	r2, [r7, #0]
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	4313      	orrs	r3, r2
 800d088:	f043 0307 	orr.w	r3, r3, #7
 800d08c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	68fa      	ldr	r2, [r7, #12]
 800d092:	609a      	str	r2, [r3, #8]
}
 800d094:	bf00      	nop
 800d096:	3714      	adds	r7, #20
 800d098:	46bd      	mov	sp, r7
 800d09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d09e:	4770      	bx	lr

0800d0a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d0a0:	b480      	push	{r7}
 800d0a2:	b087      	sub	sp, #28
 800d0a4:	af00      	add	r7, sp, #0
 800d0a6:	60f8      	str	r0, [r7, #12]
 800d0a8:	60b9      	str	r1, [r7, #8]
 800d0aa:	607a      	str	r2, [r7, #4]
 800d0ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	689b      	ldr	r3, [r3, #8]
 800d0b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d0b4:	697b      	ldr	r3, [r7, #20]
 800d0b6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800d0ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d0bc:	683b      	ldr	r3, [r7, #0]
 800d0be:	021a      	lsls	r2, r3, #8
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	431a      	orrs	r2, r3
 800d0c4:	68bb      	ldr	r3, [r7, #8]
 800d0c6:	4313      	orrs	r3, r2
 800d0c8:	697a      	ldr	r2, [r7, #20]
 800d0ca:	4313      	orrs	r3, r2
 800d0cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	697a      	ldr	r2, [r7, #20]
 800d0d2:	609a      	str	r2, [r3, #8]
}
 800d0d4:	bf00      	nop
 800d0d6:	371c      	adds	r7, #28
 800d0d8:	46bd      	mov	sp, r7
 800d0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0de:	4770      	bx	lr

0800d0e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d0e0:	b480      	push	{r7}
 800d0e2:	b087      	sub	sp, #28
 800d0e4:	af00      	add	r7, sp, #0
 800d0e6:	60f8      	str	r0, [r7, #12]
 800d0e8:	60b9      	str	r1, [r7, #8]
 800d0ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d0ec:	68bb      	ldr	r3, [r7, #8]
 800d0ee:	f003 031f 	and.w	r3, r3, #31
 800d0f2:	2201      	movs	r2, #1
 800d0f4:	fa02 f303 	lsl.w	r3, r2, r3
 800d0f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	6a1a      	ldr	r2, [r3, #32]
 800d0fe:	697b      	ldr	r3, [r7, #20]
 800d100:	43db      	mvns	r3, r3
 800d102:	401a      	ands	r2, r3
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	6a1a      	ldr	r2, [r3, #32]
 800d10c:	68bb      	ldr	r3, [r7, #8]
 800d10e:	f003 031f 	and.w	r3, r3, #31
 800d112:	6879      	ldr	r1, [r7, #4]
 800d114:	fa01 f303 	lsl.w	r3, r1, r3
 800d118:	431a      	orrs	r2, r3
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	621a      	str	r2, [r3, #32]
}
 800d11e:	bf00      	nop
 800d120:	371c      	adds	r7, #28
 800d122:	46bd      	mov	sp, r7
 800d124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d128:	4770      	bx	lr
	...

0800d12c <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800d12c:	b480      	push	{r7}
 800d12e:	b083      	sub	sp, #12
 800d130:	af00      	add	r7, sp, #0
 800d132:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	4a26      	ldr	r2, [pc, #152]	@ (800d1d0 <TIM_ResetCallback+0xa4>)
 800d138:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	4a25      	ldr	r2, [pc, #148]	@ (800d1d4 <TIM_ResetCallback+0xa8>)
 800d140:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	4a24      	ldr	r2, [pc, #144]	@ (800d1d8 <TIM_ResetCallback+0xac>)
 800d148:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	4a23      	ldr	r2, [pc, #140]	@ (800d1dc <TIM_ResetCallback+0xb0>)
 800d150:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	4a22      	ldr	r2, [pc, #136]	@ (800d1e0 <TIM_ResetCallback+0xb4>)
 800d158:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	4a21      	ldr	r2, [pc, #132]	@ (800d1e4 <TIM_ResetCallback+0xb8>)
 800d160:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	4a20      	ldr	r2, [pc, #128]	@ (800d1e8 <TIM_ResetCallback+0xbc>)
 800d168:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	4a1f      	ldr	r2, [pc, #124]	@ (800d1ec <TIM_ResetCallback+0xc0>)
 800d170:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	4a1e      	ldr	r2, [pc, #120]	@ (800d1f0 <TIM_ResetCallback+0xc4>)
 800d178:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	4a1d      	ldr	r2, [pc, #116]	@ (800d1f4 <TIM_ResetCallback+0xc8>)
 800d180:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	4a1c      	ldr	r2, [pc, #112]	@ (800d1f8 <TIM_ResetCallback+0xcc>)
 800d188:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	4a1b      	ldr	r2, [pc, #108]	@ (800d1fc <TIM_ResetCallback+0xd0>)
 800d190:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	4a1a      	ldr	r2, [pc, #104]	@ (800d200 <TIM_ResetCallback+0xd4>)
 800d198:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	4a19      	ldr	r2, [pc, #100]	@ (800d204 <TIM_ResetCallback+0xd8>)
 800d1a0:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	4a18      	ldr	r2, [pc, #96]	@ (800d208 <TIM_ResetCallback+0xdc>)
 800d1a8:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	4a17      	ldr	r2, [pc, #92]	@ (800d20c <TIM_ResetCallback+0xe0>)
 800d1b0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	4a16      	ldr	r2, [pc, #88]	@ (800d210 <TIM_ResetCallback+0xe4>)
 800d1b8:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	4a15      	ldr	r2, [pc, #84]	@ (800d214 <TIM_ResetCallback+0xe8>)
 800d1c0:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 800d1c4:	bf00      	nop
 800d1c6:	370c      	adds	r7, #12
 800d1c8:	46bd      	mov	sp, r7
 800d1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ce:	4770      	bx	lr
 800d1d0:	08005fed 	.word	0x08005fed
 800d1d4:	0800c479 	.word	0x0800c479
 800d1d8:	0800c4f1 	.word	0x0800c4f1
 800d1dc:	0800c505 	.word	0x0800c505
 800d1e0:	0800c4a1 	.word	0x0800c4a1
 800d1e4:	0800c4b5 	.word	0x0800c4b5
 800d1e8:	0800c48d 	.word	0x0800c48d
 800d1ec:	0800c4c9 	.word	0x0800c4c9
 800d1f0:	0800c4dd 	.word	0x0800c4dd
 800d1f4:	0800c519 	.word	0x0800c519
 800d1f8:	0800d46d 	.word	0x0800d46d
 800d1fc:	0800d481 	.word	0x0800d481
 800d200:	0800d495 	.word	0x0800d495
 800d204:	0800d4a9 	.word	0x0800d4a9
 800d208:	0800d4bd 	.word	0x0800d4bd
 800d20c:	0800d4d1 	.word	0x0800d4d1
 800d210:	0800d4e5 	.word	0x0800d4e5
 800d214:	0800d4f9 	.word	0x0800d4f9

0800d218 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d218:	b480      	push	{r7}
 800d21a:	b085      	sub	sp, #20
 800d21c:	af00      	add	r7, sp, #0
 800d21e:	6078      	str	r0, [r7, #4]
 800d220:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d228:	2b01      	cmp	r3, #1
 800d22a:	d101      	bne.n	800d230 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d22c:	2302      	movs	r3, #2
 800d22e:	e074      	b.n	800d31a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	2201      	movs	r2, #1
 800d234:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	2202      	movs	r2, #2
 800d23c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	685b      	ldr	r3, [r3, #4]
 800d246:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	689b      	ldr	r3, [r3, #8]
 800d24e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	4a34      	ldr	r2, [pc, #208]	@ (800d328 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d256:	4293      	cmp	r3, r2
 800d258:	d009      	beq.n	800d26e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	4a33      	ldr	r2, [pc, #204]	@ (800d32c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d260:	4293      	cmp	r3, r2
 800d262:	d004      	beq.n	800d26e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	4a31      	ldr	r2, [pc, #196]	@ (800d330 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d26a:	4293      	cmp	r3, r2
 800d26c:	d108      	bne.n	800d280 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800d274:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d276:	683b      	ldr	r3, [r7, #0]
 800d278:	685b      	ldr	r3, [r3, #4]
 800d27a:	68fa      	ldr	r2, [r7, #12]
 800d27c:	4313      	orrs	r3, r2
 800d27e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800d286:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d28a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d28c:	683b      	ldr	r3, [r7, #0]
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	68fa      	ldr	r2, [r7, #12]
 800d292:	4313      	orrs	r3, r2
 800d294:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	68fa      	ldr	r2, [r7, #12]
 800d29c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	4a21      	ldr	r2, [pc, #132]	@ (800d328 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d2a4:	4293      	cmp	r3, r2
 800d2a6:	d022      	beq.n	800d2ee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d2b0:	d01d      	beq.n	800d2ee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	4a1f      	ldr	r2, [pc, #124]	@ (800d334 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800d2b8:	4293      	cmp	r3, r2
 800d2ba:	d018      	beq.n	800d2ee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	4a1d      	ldr	r2, [pc, #116]	@ (800d338 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800d2c2:	4293      	cmp	r3, r2
 800d2c4:	d013      	beq.n	800d2ee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	4a1c      	ldr	r2, [pc, #112]	@ (800d33c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800d2cc:	4293      	cmp	r3, r2
 800d2ce:	d00e      	beq.n	800d2ee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	4a15      	ldr	r2, [pc, #84]	@ (800d32c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d2d6:	4293      	cmp	r3, r2
 800d2d8:	d009      	beq.n	800d2ee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	4a18      	ldr	r2, [pc, #96]	@ (800d340 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800d2e0:	4293      	cmp	r3, r2
 800d2e2:	d004      	beq.n	800d2ee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	4a11      	ldr	r2, [pc, #68]	@ (800d330 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d2ea:	4293      	cmp	r3, r2
 800d2ec:	d10c      	bne.n	800d308 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d2ee:	68bb      	ldr	r3, [r7, #8]
 800d2f0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d2f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d2f6:	683b      	ldr	r3, [r7, #0]
 800d2f8:	689b      	ldr	r3, [r3, #8]
 800d2fa:	68ba      	ldr	r2, [r7, #8]
 800d2fc:	4313      	orrs	r3, r2
 800d2fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	68ba      	ldr	r2, [r7, #8]
 800d306:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	2201      	movs	r2, #1
 800d30c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	2200      	movs	r2, #0
 800d314:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800d318:	2300      	movs	r3, #0
}
 800d31a:	4618      	mov	r0, r3
 800d31c:	3714      	adds	r7, #20
 800d31e:	46bd      	mov	sp, r7
 800d320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d324:	4770      	bx	lr
 800d326:	bf00      	nop
 800d328:	40012c00 	.word	0x40012c00
 800d32c:	40013400 	.word	0x40013400
 800d330:	40015000 	.word	0x40015000
 800d334:	40000400 	.word	0x40000400
 800d338:	40000800 	.word	0x40000800
 800d33c:	40000c00 	.word	0x40000c00
 800d340:	40014000 	.word	0x40014000

0800d344 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d344:	b480      	push	{r7}
 800d346:	b085      	sub	sp, #20
 800d348:	af00      	add	r7, sp, #0
 800d34a:	6078      	str	r0, [r7, #4]
 800d34c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d34e:	2300      	movs	r3, #0
 800d350:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d358:	2b01      	cmp	r3, #1
 800d35a:	d101      	bne.n	800d360 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d35c:	2302      	movs	r3, #2
 800d35e:	e078      	b.n	800d452 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	2201      	movs	r2, #1
 800d364:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800d36e:	683b      	ldr	r3, [r7, #0]
 800d370:	68db      	ldr	r3, [r3, #12]
 800d372:	4313      	orrs	r3, r2
 800d374:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800d37c:	683b      	ldr	r3, [r7, #0]
 800d37e:	689b      	ldr	r3, [r3, #8]
 800d380:	4313      	orrs	r3, r2
 800d382:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800d38a:	683b      	ldr	r3, [r7, #0]
 800d38c:	685b      	ldr	r3, [r3, #4]
 800d38e:	4313      	orrs	r3, r2
 800d390:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800d398:	683b      	ldr	r3, [r7, #0]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	4313      	orrs	r3, r2
 800d39e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800d3a6:	683b      	ldr	r3, [r7, #0]
 800d3a8:	691b      	ldr	r3, [r3, #16]
 800d3aa:	4313      	orrs	r3, r2
 800d3ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800d3b4:	683b      	ldr	r3, [r7, #0]
 800d3b6:	695b      	ldr	r3, [r3, #20]
 800d3b8:	4313      	orrs	r3, r2
 800d3ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800d3c2:	683b      	ldr	r3, [r7, #0]
 800d3c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d3c6:	4313      	orrs	r3, r2
 800d3c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800d3d0:	683b      	ldr	r3, [r7, #0]
 800d3d2:	699b      	ldr	r3, [r3, #24]
 800d3d4:	041b      	lsls	r3, r3, #16
 800d3d6:	4313      	orrs	r3, r2
 800d3d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800d3e0:	683b      	ldr	r3, [r7, #0]
 800d3e2:	69db      	ldr	r3, [r3, #28]
 800d3e4:	4313      	orrs	r3, r2
 800d3e6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	4a1c      	ldr	r2, [pc, #112]	@ (800d460 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800d3ee:	4293      	cmp	r3, r2
 800d3f0:	d009      	beq.n	800d406 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	4a1b      	ldr	r2, [pc, #108]	@ (800d464 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800d3f8:	4293      	cmp	r3, r2
 800d3fa:	d004      	beq.n	800d406 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	4a19      	ldr	r2, [pc, #100]	@ (800d468 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800d402:	4293      	cmp	r3, r2
 800d404:	d11c      	bne.n	800d440 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800d40c:	683b      	ldr	r3, [r7, #0]
 800d40e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d410:	051b      	lsls	r3, r3, #20
 800d412:	4313      	orrs	r3, r2
 800d414:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800d41c:	683b      	ldr	r3, [r7, #0]
 800d41e:	6a1b      	ldr	r3, [r3, #32]
 800d420:	4313      	orrs	r3, r2
 800d422:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800d42a:	683b      	ldr	r3, [r7, #0]
 800d42c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d42e:	4313      	orrs	r3, r2
 800d430:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800d438:	683b      	ldr	r3, [r7, #0]
 800d43a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d43c:	4313      	orrs	r3, r2
 800d43e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	68fa      	ldr	r2, [r7, #12]
 800d446:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	2200      	movs	r2, #0
 800d44c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800d450:	2300      	movs	r3, #0
}
 800d452:	4618      	mov	r0, r3
 800d454:	3714      	adds	r7, #20
 800d456:	46bd      	mov	sp, r7
 800d458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d45c:	4770      	bx	lr
 800d45e:	bf00      	nop
 800d460:	40012c00 	.word	0x40012c00
 800d464:	40013400 	.word	0x40013400
 800d468:	40015000 	.word	0x40015000

0800d46c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d46c:	b480      	push	{r7}
 800d46e:	b083      	sub	sp, #12
 800d470:	af00      	add	r7, sp, #0
 800d472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d474:	bf00      	nop
 800d476:	370c      	adds	r7, #12
 800d478:	46bd      	mov	sp, r7
 800d47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d47e:	4770      	bx	lr

0800d480 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800d480:	b480      	push	{r7}
 800d482:	b083      	sub	sp, #12
 800d484:	af00      	add	r7, sp, #0
 800d486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800d488:	bf00      	nop
 800d48a:	370c      	adds	r7, #12
 800d48c:	46bd      	mov	sp, r7
 800d48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d492:	4770      	bx	lr

0800d494 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d494:	b480      	push	{r7}
 800d496:	b083      	sub	sp, #12
 800d498:	af00      	add	r7, sp, #0
 800d49a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d49c:	bf00      	nop
 800d49e:	370c      	adds	r7, #12
 800d4a0:	46bd      	mov	sp, r7
 800d4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a6:	4770      	bx	lr

0800d4a8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d4a8:	b480      	push	{r7}
 800d4aa:	b083      	sub	sp, #12
 800d4ac:	af00      	add	r7, sp, #0
 800d4ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d4b0:	bf00      	nop
 800d4b2:	370c      	adds	r7, #12
 800d4b4:	46bd      	mov	sp, r7
 800d4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ba:	4770      	bx	lr

0800d4bc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800d4bc:	b480      	push	{r7}
 800d4be:	b083      	sub	sp, #12
 800d4c0:	af00      	add	r7, sp, #0
 800d4c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800d4c4:	bf00      	nop
 800d4c6:	370c      	adds	r7, #12
 800d4c8:	46bd      	mov	sp, r7
 800d4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ce:	4770      	bx	lr

0800d4d0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800d4d0:	b480      	push	{r7}
 800d4d2:	b083      	sub	sp, #12
 800d4d4:	af00      	add	r7, sp, #0
 800d4d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800d4d8:	bf00      	nop
 800d4da:	370c      	adds	r7, #12
 800d4dc:	46bd      	mov	sp, r7
 800d4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e2:	4770      	bx	lr

0800d4e4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800d4e4:	b480      	push	{r7}
 800d4e6:	b083      	sub	sp, #12
 800d4e8:	af00      	add	r7, sp, #0
 800d4ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800d4ec:	bf00      	nop
 800d4ee:	370c      	adds	r7, #12
 800d4f0:	46bd      	mov	sp, r7
 800d4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4f6:	4770      	bx	lr

0800d4f8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800d4f8:	b480      	push	{r7}
 800d4fa:	b083      	sub	sp, #12
 800d4fc:	af00      	add	r7, sp, #0
 800d4fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800d500:	bf00      	nop
 800d502:	370c      	adds	r7, #12
 800d504:	46bd      	mov	sp, r7
 800d506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d50a:	4770      	bx	lr

0800d50c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d50c:	b580      	push	{r7, lr}
 800d50e:	b082      	sub	sp, #8
 800d510:	af00      	add	r7, sp, #0
 800d512:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	2b00      	cmp	r3, #0
 800d518:	d101      	bne.n	800d51e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d51a:	2301      	movs	r3, #1
 800d51c:	e050      	b.n	800d5c0 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d524:	2b00      	cmp	r3, #0
 800d526:	d114      	bne.n	800d552 <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	2200      	movs	r2, #0
 800d52c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800d530:	6878      	ldr	r0, [r7, #4]
 800d532:	f000 fd5b 	bl	800dfec <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d103      	bne.n	800d548 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	4a21      	ldr	r2, [pc, #132]	@ (800d5c8 <HAL_UART_Init+0xbc>)
 800d544:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800d54e:	6878      	ldr	r0, [r7, #4]
 800d550:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	2224      	movs	r2, #36	@ 0x24
 800d556:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	681a      	ldr	r2, [r3, #0]
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	f022 0201 	bic.w	r2, r2, #1
 800d568:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d002      	beq.n	800d578 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 800d572:	6878      	ldr	r0, [r7, #4]
 800d574:	f001 f888 	bl	800e688 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d578:	6878      	ldr	r0, [r7, #4]
 800d57a:	f000 fd89 	bl	800e090 <UART_SetConfig>
 800d57e:	4603      	mov	r3, r0
 800d580:	2b01      	cmp	r3, #1
 800d582:	d101      	bne.n	800d588 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 800d584:	2301      	movs	r3, #1
 800d586:	e01b      	b.n	800d5c0 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	685a      	ldr	r2, [r3, #4]
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800d596:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	689a      	ldr	r2, [r3, #8]
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800d5a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	681a      	ldr	r2, [r3, #0]
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	f042 0201 	orr.w	r2, r2, #1
 800d5b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d5b8:	6878      	ldr	r0, [r7, #4]
 800d5ba:	f001 f907 	bl	800e7cc <UART_CheckIdleState>
 800d5be:	4603      	mov	r3, r0
}
 800d5c0:	4618      	mov	r0, r3
 800d5c2:	3708      	adds	r7, #8
 800d5c4:	46bd      	mov	sp, r7
 800d5c6:	bd80      	pop	{r7, pc}
 800d5c8:	080079e1 	.word	0x080079e1

0800d5cc <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 800d5cc:	b480      	push	{r7}
 800d5ce:	b087      	sub	sp, #28
 800d5d0:	af00      	add	r7, sp, #0
 800d5d2:	60f8      	str	r0, [r7, #12]
 800d5d4:	460b      	mov	r3, r1
 800d5d6:	607a      	str	r2, [r7, #4]
 800d5d8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800d5da:	2300      	movs	r3, #0
 800d5dc:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d109      	bne.n	800d5f8 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d5ea:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 800d5f4:	2301      	movs	r3, #1
 800d5f6:	e09c      	b.n	800d732 <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d5fe:	2b20      	cmp	r3, #32
 800d600:	d16c      	bne.n	800d6dc <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 800d602:	7afb      	ldrb	r3, [r7, #11]
 800d604:	2b0c      	cmp	r3, #12
 800d606:	d85e      	bhi.n	800d6c6 <HAL_UART_RegisterCallback+0xfa>
 800d608:	a201      	add	r2, pc, #4	@ (adr r2, 800d610 <HAL_UART_RegisterCallback+0x44>)
 800d60a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d60e:	bf00      	nop
 800d610:	0800d645 	.word	0x0800d645
 800d614:	0800d64f 	.word	0x0800d64f
 800d618:	0800d659 	.word	0x0800d659
 800d61c:	0800d663 	.word	0x0800d663
 800d620:	0800d66d 	.word	0x0800d66d
 800d624:	0800d677 	.word	0x0800d677
 800d628:	0800d681 	.word	0x0800d681
 800d62c:	0800d68b 	.word	0x0800d68b
 800d630:	0800d695 	.word	0x0800d695
 800d634:	0800d69f 	.word	0x0800d69f
 800d638:	0800d6a9 	.word	0x0800d6a9
 800d63c:	0800d6b3 	.word	0x0800d6b3
 800d640:	0800d6bd 	.word	0x0800d6bd
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	687a      	ldr	r2, [r7, #4]
 800d648:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800d64c:	e070      	b.n	800d730 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	687a      	ldr	r2, [r7, #4]
 800d652:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800d656:	e06b      	b.n	800d730 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	687a      	ldr	r2, [r7, #4]
 800d65c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800d660:	e066      	b.n	800d730 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	687a      	ldr	r2, [r7, #4]
 800d666:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800d66a:	e061      	b.n	800d730 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	687a      	ldr	r2, [r7, #4]
 800d670:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800d674:	e05c      	b.n	800d730 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	687a      	ldr	r2, [r7, #4]
 800d67a:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800d67e:	e057      	b.n	800d730 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	687a      	ldr	r2, [r7, #4]
 800d684:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800d688:	e052      	b.n	800d730 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	687a      	ldr	r2, [r7, #4]
 800d68e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800d692:	e04d      	b.n	800d730 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	687a      	ldr	r2, [r7, #4]
 800d698:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800d69c:	e048      	b.n	800d730 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	687a      	ldr	r2, [r7, #4]
 800d6a2:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800d6a6:	e043      	b.n	800d730 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	687a      	ldr	r2, [r7, #4]
 800d6ac:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800d6b0:	e03e      	b.n	800d730 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	687a      	ldr	r2, [r7, #4]
 800d6b6:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800d6ba:	e039      	b.n	800d730 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	687a      	ldr	r2, [r7, #4]
 800d6c0:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800d6c4:	e034      	b.n	800d730 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d6cc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800d6d6:	2301      	movs	r3, #1
 800d6d8:	75fb      	strb	r3, [r7, #23]
        break;
 800d6da:	e029      	b.n	800d730 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d11a      	bne.n	800d71c <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 800d6e6:	7afb      	ldrb	r3, [r7, #11]
 800d6e8:	2b0b      	cmp	r3, #11
 800d6ea:	d002      	beq.n	800d6f2 <HAL_UART_RegisterCallback+0x126>
 800d6ec:	2b0c      	cmp	r3, #12
 800d6ee:	d005      	beq.n	800d6fc <HAL_UART_RegisterCallback+0x130>
 800d6f0:	e009      	b.n	800d706 <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	687a      	ldr	r2, [r7, #4]
 800d6f6:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800d6fa:	e019      	b.n	800d730 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	687a      	ldr	r2, [r7, #4]
 800d700:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800d704:	e014      	b.n	800d730 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d70c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800d716:	2301      	movs	r3, #1
 800d718:	75fb      	strb	r3, [r7, #23]
        break;
 800d71a:	e009      	b.n	800d730 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d722:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 800d72c:	2301      	movs	r3, #1
 800d72e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800d730:	7dfb      	ldrb	r3, [r7, #23]
}
 800d732:	4618      	mov	r0, r3
 800d734:	371c      	adds	r7, #28
 800d736:	46bd      	mov	sp, r7
 800d738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d73c:	4770      	bx	lr
 800d73e:	bf00      	nop

0800d740 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d740:	b580      	push	{r7, lr}
 800d742:	b08a      	sub	sp, #40	@ 0x28
 800d744:	af00      	add	r7, sp, #0
 800d746:	60f8      	str	r0, [r7, #12]
 800d748:	60b9      	str	r1, [r7, #8]
 800d74a:	4613      	mov	r3, r2
 800d74c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d754:	2b20      	cmp	r3, #32
 800d756:	d137      	bne.n	800d7c8 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800d758:	68bb      	ldr	r3, [r7, #8]
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d002      	beq.n	800d764 <HAL_UART_Receive_DMA+0x24>
 800d75e:	88fb      	ldrh	r3, [r7, #6]
 800d760:	2b00      	cmp	r3, #0
 800d762:	d101      	bne.n	800d768 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800d764:	2301      	movs	r3, #1
 800d766:	e030      	b.n	800d7ca <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	2200      	movs	r2, #0
 800d76c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	4a18      	ldr	r2, [pc, #96]	@ (800d7d4 <HAL_UART_Receive_DMA+0x94>)
 800d774:	4293      	cmp	r3, r2
 800d776:	d01f      	beq.n	800d7b8 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	685b      	ldr	r3, [r3, #4]
 800d77e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d782:	2b00      	cmp	r3, #0
 800d784:	d018      	beq.n	800d7b8 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d78c:	697b      	ldr	r3, [r7, #20]
 800d78e:	e853 3f00 	ldrex	r3, [r3]
 800d792:	613b      	str	r3, [r7, #16]
   return(result);
 800d794:	693b      	ldr	r3, [r7, #16]
 800d796:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800d79a:	627b      	str	r3, [r7, #36]	@ 0x24
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	461a      	mov	r2, r3
 800d7a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7a4:	623b      	str	r3, [r7, #32]
 800d7a6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7a8:	69f9      	ldr	r1, [r7, #28]
 800d7aa:	6a3a      	ldr	r2, [r7, #32]
 800d7ac:	e841 2300 	strex	r3, r2, [r1]
 800d7b0:	61bb      	str	r3, [r7, #24]
   return(result);
 800d7b2:	69bb      	ldr	r3, [r7, #24]
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d1e6      	bne.n	800d786 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800d7b8:	88fb      	ldrh	r3, [r7, #6]
 800d7ba:	461a      	mov	r2, r3
 800d7bc:	68b9      	ldr	r1, [r7, #8]
 800d7be:	68f8      	ldr	r0, [r7, #12]
 800d7c0:	f001 f91c 	bl	800e9fc <UART_Start_Receive_DMA>
 800d7c4:	4603      	mov	r3, r0
 800d7c6:	e000      	b.n	800d7ca <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800d7c8:	2302      	movs	r3, #2
  }
}
 800d7ca:	4618      	mov	r0, r3
 800d7cc:	3728      	adds	r7, #40	@ 0x28
 800d7ce:	46bd      	mov	sp, r7
 800d7d0:	bd80      	pop	{r7, pc}
 800d7d2:	bf00      	nop
 800d7d4:	40008000 	.word	0x40008000

0800d7d8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d7d8:	b580      	push	{r7, lr}
 800d7da:	b0ba      	sub	sp, #232	@ 0xe8
 800d7dc:	af00      	add	r7, sp, #0
 800d7de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	69db      	ldr	r3, [r3, #28]
 800d7e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	689b      	ldr	r3, [r3, #8]
 800d7fa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d7fe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800d802:	f640 030f 	movw	r3, #2063	@ 0x80f
 800d806:	4013      	ands	r3, r2
 800d808:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800d80c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d810:	2b00      	cmp	r3, #0
 800d812:	d11b      	bne.n	800d84c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d814:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d818:	f003 0320 	and.w	r3, r3, #32
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d015      	beq.n	800d84c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d820:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d824:	f003 0320 	and.w	r3, r3, #32
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d105      	bne.n	800d838 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d82c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d830:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d834:	2b00      	cmp	r3, #0
 800d836:	d009      	beq.n	800d84c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	f000 8312 	beq.w	800de66 <HAL_UART_IRQHandler+0x68e>
      {
        huart->RxISR(huart);
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d846:	6878      	ldr	r0, [r7, #4]
 800d848:	4798      	blx	r3
      }
      return;
 800d84a:	e30c      	b.n	800de66 <HAL_UART_IRQHandler+0x68e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d84c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d850:	2b00      	cmp	r3, #0
 800d852:	f000 8129 	beq.w	800daa8 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d856:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800d85a:	4b90      	ldr	r3, [pc, #576]	@ (800da9c <HAL_UART_IRQHandler+0x2c4>)
 800d85c:	4013      	ands	r3, r2
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d106      	bne.n	800d870 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d862:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800d866:	4b8e      	ldr	r3, [pc, #568]	@ (800daa0 <HAL_UART_IRQHandler+0x2c8>)
 800d868:	4013      	ands	r3, r2
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	f000 811c 	beq.w	800daa8 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d870:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d874:	f003 0301 	and.w	r3, r3, #1
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d011      	beq.n	800d8a0 <HAL_UART_IRQHandler+0xc8>
 800d87c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d880:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d884:	2b00      	cmp	r3, #0
 800d886:	d00b      	beq.n	800d8a0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	2201      	movs	r2, #1
 800d88e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d896:	f043 0201 	orr.w	r2, r3, #1
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d8a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d8a4:	f003 0302 	and.w	r3, r3, #2
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d011      	beq.n	800d8d0 <HAL_UART_IRQHandler+0xf8>
 800d8ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d8b0:	f003 0301 	and.w	r3, r3, #1
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d00b      	beq.n	800d8d0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	2202      	movs	r2, #2
 800d8be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d8c6:	f043 0204 	orr.w	r2, r3, #4
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d8d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d8d4:	f003 0304 	and.w	r3, r3, #4
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d011      	beq.n	800d900 <HAL_UART_IRQHandler+0x128>
 800d8dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d8e0:	f003 0301 	and.w	r3, r3, #1
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d00b      	beq.n	800d900 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	2204      	movs	r2, #4
 800d8ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d8f6:	f043 0202 	orr.w	r2, r3, #2
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d900:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d904:	f003 0308 	and.w	r3, r3, #8
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d017      	beq.n	800d93c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d90c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d910:	f003 0320 	and.w	r3, r3, #32
 800d914:	2b00      	cmp	r3, #0
 800d916:	d105      	bne.n	800d924 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800d918:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800d91c:	4b5f      	ldr	r3, [pc, #380]	@ (800da9c <HAL_UART_IRQHandler+0x2c4>)
 800d91e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d920:	2b00      	cmp	r3, #0
 800d922:	d00b      	beq.n	800d93c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	2208      	movs	r2, #8
 800d92a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d932:	f043 0208 	orr.w	r2, r3, #8
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d93c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d940:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d944:	2b00      	cmp	r3, #0
 800d946:	d012      	beq.n	800d96e <HAL_UART_IRQHandler+0x196>
 800d948:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d94c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800d950:	2b00      	cmp	r3, #0
 800d952:	d00c      	beq.n	800d96e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d95c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d964:	f043 0220 	orr.w	r2, r3, #32
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d974:	2b00      	cmp	r3, #0
 800d976:	f000 8278 	beq.w	800de6a <HAL_UART_IRQHandler+0x692>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d97a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d97e:	f003 0320 	and.w	r3, r3, #32
 800d982:	2b00      	cmp	r3, #0
 800d984:	d013      	beq.n	800d9ae <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d986:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d98a:	f003 0320 	and.w	r3, r3, #32
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d105      	bne.n	800d99e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d992:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d996:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d007      	beq.n	800d9ae <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d003      	beq.n	800d9ae <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d9aa:	6878      	ldr	r0, [r7, #4]
 800d9ac:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d9b4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	689b      	ldr	r3, [r3, #8]
 800d9be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d9c2:	2b40      	cmp	r3, #64	@ 0x40
 800d9c4:	d005      	beq.n	800d9d2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d9c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d9ca:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d058      	beq.n	800da84 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d9d2:	6878      	ldr	r0, [r7, #4]
 800d9d4:	f001 f8f9 	bl	800ebca <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	689b      	ldr	r3, [r3, #8]
 800d9de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d9e2:	2b40      	cmp	r3, #64	@ 0x40
 800d9e4:	d148      	bne.n	800da78 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	3308      	adds	r3, #8
 800d9ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d9f4:	e853 3f00 	ldrex	r3, [r3]
 800d9f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800d9fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800da00:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800da04:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	3308      	adds	r3, #8
 800da0e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800da12:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800da16:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da1a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800da1e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800da22:	e841 2300 	strex	r3, r2, [r1]
 800da26:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800da2a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d1d9      	bne.n	800d9e6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d017      	beq.n	800da6c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800da42:	4a18      	ldr	r2, [pc, #96]	@ (800daa4 <HAL_UART_IRQHandler+0x2cc>)
 800da44:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800da4c:	4618      	mov	r0, r3
 800da4e:	f7fc f8c5 	bl	8009bdc <HAL_DMA_Abort_IT>
 800da52:	4603      	mov	r3, r0
 800da54:	2b00      	cmp	r3, #0
 800da56:	d01f      	beq.n	800da98 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800da5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da60:	687a      	ldr	r2, [r7, #4]
 800da62:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800da66:	4610      	mov	r0, r2
 800da68:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800da6a:	e015      	b.n	800da98 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800da72:	6878      	ldr	r0, [r7, #4]
 800da74:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800da76:	e00f      	b.n	800da98 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800da7e:	6878      	ldr	r0, [r7, #4]
 800da80:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800da82:	e009      	b.n	800da98 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800da8a:	6878      	ldr	r0, [r7, #4]
 800da8c:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	2200      	movs	r2, #0
 800da92:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800da96:	e1e8      	b.n	800de6a <HAL_UART_IRQHandler+0x692>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800da98:	bf00      	nop
    return;
 800da9a:	e1e6      	b.n	800de6a <HAL_UART_IRQHandler+0x692>
 800da9c:	10000001 	.word	0x10000001
 800daa0:	04000120 	.word	0x04000120
 800daa4:	0800ee95 	.word	0x0800ee95

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800daac:	2b01      	cmp	r3, #1
 800daae:	f040 8176 	bne.w	800dd9e <HAL_UART_IRQHandler+0x5c6>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800dab2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800dab6:	f003 0310 	and.w	r3, r3, #16
 800daba:	2b00      	cmp	r3, #0
 800dabc:	f000 816f 	beq.w	800dd9e <HAL_UART_IRQHandler+0x5c6>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800dac0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800dac4:	f003 0310 	and.w	r3, r3, #16
 800dac8:	2b00      	cmp	r3, #0
 800daca:	f000 8168 	beq.w	800dd9e <HAL_UART_IRQHandler+0x5c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	2210      	movs	r2, #16
 800dad4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	689b      	ldr	r3, [r3, #8]
 800dadc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dae0:	2b40      	cmp	r3, #64	@ 0x40
 800dae2:	f040 80dc 	bne.w	800dc9e <HAL_UART_IRQHandler+0x4c6>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	685b      	ldr	r3, [r3, #4]
 800daf0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800daf4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	f000 80b1 	beq.w	800dc60 <HAL_UART_IRQHandler+0x488>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800db04:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800db08:	429a      	cmp	r2, r3
 800db0a:	f080 80a9 	bcs.w	800dc60 <HAL_UART_IRQHandler+0x488>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800db14:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	f003 0320 	and.w	r3, r3, #32
 800db26:	2b00      	cmp	r3, #0
 800db28:	f040 8087 	bne.w	800dc3a <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db34:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800db38:	e853 3f00 	ldrex	r3, [r3]
 800db3c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800db40:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800db44:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800db48:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	461a      	mov	r2, r3
 800db52:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800db56:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800db5a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db5e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800db62:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800db66:	e841 2300 	strex	r3, r2, [r1]
 800db6a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800db6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800db72:	2b00      	cmp	r3, #0
 800db74:	d1da      	bne.n	800db2c <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	3308      	adds	r3, #8
 800db7c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db7e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800db80:	e853 3f00 	ldrex	r3, [r3]
 800db84:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800db86:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800db88:	f023 0301 	bic.w	r3, r3, #1
 800db8c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	3308      	adds	r3, #8
 800db96:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800db9a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800db9e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dba0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800dba2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800dba6:	e841 2300 	strex	r3, r2, [r1]
 800dbaa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800dbac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d1e1      	bne.n	800db76 <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	3308      	adds	r3, #8
 800dbb8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800dbbc:	e853 3f00 	ldrex	r3, [r3]
 800dbc0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800dbc2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dbc4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dbc8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	3308      	adds	r3, #8
 800dbd2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800dbd6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800dbd8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbda:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800dbdc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800dbde:	e841 2300 	strex	r3, r2, [r1]
 800dbe2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800dbe4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d1e3      	bne.n	800dbb2 <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	2220      	movs	r2, #32
 800dbee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	2200      	movs	r2, #0
 800dbf6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbfe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dc00:	e853 3f00 	ldrex	r3, [r3]
 800dc04:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800dc06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dc08:	f023 0310 	bic.w	r3, r3, #16
 800dc0c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	461a      	mov	r2, r3
 800dc16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dc1a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800dc1c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc1e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800dc20:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800dc22:	e841 2300 	strex	r3, r2, [r1]
 800dc26:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800dc28:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d1e4      	bne.n	800dbf8 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dc34:	4618      	mov	r0, r3
 800dc36:	f7fb ff78 	bl	8009b2a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	2202      	movs	r2, #2
 800dc3e:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800dc46:	687a      	ldr	r2, [r7, #4]
 800dc48:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 800dc4c:	687a      	ldr	r2, [r7, #4]
 800dc4e:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 800dc52:	b292      	uxth	r2, r2
 800dc54:	1a8a      	subs	r2, r1, r2
 800dc56:	b292      	uxth	r2, r2
 800dc58:	4611      	mov	r1, r2
 800dc5a:	6878      	ldr	r0, [r7, #4]
 800dc5c:	4798      	blx	r3
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800dc5e:	e106      	b.n	800de6e <HAL_UART_IRQHandler+0x696>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800dc66:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800dc6a:	429a      	cmp	r2, r3
 800dc6c:	f040 80ff 	bne.w	800de6e <HAL_UART_IRQHandler+0x696>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	f003 0320 	and.w	r3, r3, #32
 800dc7e:	2b20      	cmp	r3, #32
 800dc80:	f040 80f5 	bne.w	800de6e <HAL_UART_IRQHandler+0x696>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	2202      	movs	r2, #2
 800dc88:	671a      	str	r2, [r3, #112]	@ 0x70
            huart->RxEventCallback(huart, huart->RxXferSize);
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800dc90:	687a      	ldr	r2, [r7, #4]
 800dc92:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800dc96:	4611      	mov	r1, r2
 800dc98:	6878      	ldr	r0, [r7, #4]
 800dc9a:	4798      	blx	r3
      return;
 800dc9c:	e0e7      	b.n	800de6e <HAL_UART_IRQHandler+0x696>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800dcaa:	b29b      	uxth	r3, r3
 800dcac:	1ad3      	subs	r3, r2, r3
 800dcae:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800dcb8:	b29b      	uxth	r3, r3
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	f000 80d9 	beq.w	800de72 <HAL_UART_IRQHandler+0x69a>
          && (nb_rx_data > 0U))
 800dcc0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	f000 80d4 	beq.w	800de72 <HAL_UART_IRQHandler+0x69a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dcd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcd2:	e853 3f00 	ldrex	r3, [r3]
 800dcd6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800dcd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dcda:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800dcde:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	461a      	mov	r2, r3
 800dce8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800dcec:	647b      	str	r3, [r7, #68]	@ 0x44
 800dcee:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dcf0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800dcf2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800dcf4:	e841 2300 	strex	r3, r2, [r1]
 800dcf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800dcfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d1e4      	bne.n	800dcca <HAL_UART_IRQHandler+0x4f2>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	3308      	adds	r3, #8
 800dd06:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd0a:	e853 3f00 	ldrex	r3, [r3]
 800dd0e:	623b      	str	r3, [r7, #32]
   return(result);
 800dd10:	6a3b      	ldr	r3, [r7, #32]
 800dd12:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800dd16:	f023 0301 	bic.w	r3, r3, #1
 800dd1a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	3308      	adds	r3, #8
 800dd24:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800dd28:	633a      	str	r2, [r7, #48]	@ 0x30
 800dd2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd2c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800dd2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dd30:	e841 2300 	strex	r3, r2, [r1]
 800dd34:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800dd36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d1e1      	bne.n	800dd00 <HAL_UART_IRQHandler+0x528>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	2220      	movs	r2, #32
 800dd40:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	2200      	movs	r2, #0
 800dd48:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	2200      	movs	r2, #0
 800dd4e:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd56:	693b      	ldr	r3, [r7, #16]
 800dd58:	e853 3f00 	ldrex	r3, [r3]
 800dd5c:	60fb      	str	r3, [r7, #12]
   return(result);
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	f023 0310 	bic.w	r3, r3, #16
 800dd64:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	461a      	mov	r2, r3
 800dd6e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800dd72:	61fb      	str	r3, [r7, #28]
 800dd74:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd76:	69b9      	ldr	r1, [r7, #24]
 800dd78:	69fa      	ldr	r2, [r7, #28]
 800dd7a:	e841 2300 	strex	r3, r2, [r1]
 800dd7e:	617b      	str	r3, [r7, #20]
   return(result);
 800dd80:	697b      	ldr	r3, [r7, #20]
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d1e4      	bne.n	800dd50 <HAL_UART_IRQHandler+0x578>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	2202      	movs	r2, #2
 800dd8a:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800dd92:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 800dd96:	4611      	mov	r1, r2
 800dd98:	6878      	ldr	r0, [r7, #4]
 800dd9a:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800dd9c:	e069      	b.n	800de72 <HAL_UART_IRQHandler+0x69a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800dd9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800dda2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d010      	beq.n	800ddcc <HAL_UART_IRQHandler+0x5f4>
 800ddaa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ddae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d00a      	beq.n	800ddcc <HAL_UART_IRQHandler+0x5f4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800ddbe:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ddc6:	6878      	ldr	r0, [r7, #4]
 800ddc8:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ddca:	e055      	b.n	800de78 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800ddcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ddd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d014      	beq.n	800de02 <HAL_UART_IRQHandler+0x62a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800ddd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800dddc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d105      	bne.n	800ddf0 <HAL_UART_IRQHandler+0x618>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800dde4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800dde8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d008      	beq.n	800de02 <HAL_UART_IRQHandler+0x62a>
  {
    if (huart->TxISR != NULL)
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d03e      	beq.n	800de76 <HAL_UART_IRQHandler+0x69e>
    {
      huart->TxISR(huart);
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ddfc:	6878      	ldr	r0, [r7, #4]
 800ddfe:	4798      	blx	r3
    }
    return;
 800de00:	e039      	b.n	800de76 <HAL_UART_IRQHandler+0x69e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800de02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800de06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d009      	beq.n	800de22 <HAL_UART_IRQHandler+0x64a>
 800de0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800de12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800de16:	2b00      	cmp	r3, #0
 800de18:	d003      	beq.n	800de22 <HAL_UART_IRQHandler+0x64a>
  {
    UART_EndTransmit_IT(huart);
 800de1a:	6878      	ldr	r0, [r7, #4]
 800de1c:	f001 f84e 	bl	800eebc <UART_EndTransmit_IT>
    return;
 800de20:	e02a      	b.n	800de78 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800de22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800de26:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d00b      	beq.n	800de46 <HAL_UART_IRQHandler+0x66e>
 800de2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800de32:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800de36:	2b00      	cmp	r3, #0
 800de38:	d005      	beq.n	800de46 <HAL_UART_IRQHandler+0x66e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800de40:	6878      	ldr	r0, [r7, #4]
 800de42:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800de44:	e018      	b.n	800de78 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800de46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800de4a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d012      	beq.n	800de78 <HAL_UART_IRQHandler+0x6a0>
 800de52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800de56:	2b00      	cmp	r3, #0
 800de58:	da0e      	bge.n	800de78 <HAL_UART_IRQHandler+0x6a0>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800de60:	6878      	ldr	r0, [r7, #4]
 800de62:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800de64:	e008      	b.n	800de78 <HAL_UART_IRQHandler+0x6a0>
      return;
 800de66:	bf00      	nop
 800de68:	e006      	b.n	800de78 <HAL_UART_IRQHandler+0x6a0>
    return;
 800de6a:	bf00      	nop
 800de6c:	e004      	b.n	800de78 <HAL_UART_IRQHandler+0x6a0>
      return;
 800de6e:	bf00      	nop
 800de70:	e002      	b.n	800de78 <HAL_UART_IRQHandler+0x6a0>
      return;
 800de72:	bf00      	nop
 800de74:	e000      	b.n	800de78 <HAL_UART_IRQHandler+0x6a0>
    return;
 800de76:	bf00      	nop
  }
}
 800de78:	37e8      	adds	r7, #232	@ 0xe8
 800de7a:	46bd      	mov	sp, r7
 800de7c:	bd80      	pop	{r7, pc}
 800de7e:	bf00      	nop

0800de80 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800de80:	b480      	push	{r7}
 800de82:	b083      	sub	sp, #12
 800de84:	af00      	add	r7, sp, #0
 800de86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800de88:	bf00      	nop
 800de8a:	370c      	adds	r7, #12
 800de8c:	46bd      	mov	sp, r7
 800de8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de92:	4770      	bx	lr

0800de94 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800de94:	b480      	push	{r7}
 800de96:	b083      	sub	sp, #12
 800de98:	af00      	add	r7, sp, #0
 800de9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800de9c:	bf00      	nop
 800de9e:	370c      	adds	r7, #12
 800dea0:	46bd      	mov	sp, r7
 800dea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dea6:	4770      	bx	lr

0800dea8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800dea8:	b480      	push	{r7}
 800deaa:	b083      	sub	sp, #12
 800deac:	af00      	add	r7, sp, #0
 800deae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800deb0:	bf00      	nop
 800deb2:	370c      	adds	r7, #12
 800deb4:	46bd      	mov	sp, r7
 800deb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deba:	4770      	bx	lr

0800debc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800debc:	b480      	push	{r7}
 800debe:	b083      	sub	sp, #12
 800dec0:	af00      	add	r7, sp, #0
 800dec2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800dec4:	bf00      	nop
 800dec6:	370c      	adds	r7, #12
 800dec8:	46bd      	mov	sp, r7
 800deca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dece:	4770      	bx	lr

0800ded0 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800ded0:	b480      	push	{r7}
 800ded2:	b083      	sub	sp, #12
 800ded4:	af00      	add	r7, sp, #0
 800ded6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800ded8:	bf00      	nop
 800deda:	370c      	adds	r7, #12
 800dedc:	46bd      	mov	sp, r7
 800dede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dee2:	4770      	bx	lr

0800dee4 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800dee4:	b480      	push	{r7}
 800dee6:	b083      	sub	sp, #12
 800dee8:	af00      	add	r7, sp, #0
 800deea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800deec:	bf00      	nop
 800deee:	370c      	adds	r7, #12
 800def0:	46bd      	mov	sp, r7
 800def2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800def6:	4770      	bx	lr

0800def8 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800def8:	b480      	push	{r7}
 800defa:	b083      	sub	sp, #12
 800defc:	af00      	add	r7, sp, #0
 800defe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800df00:	bf00      	nop
 800df02:	370c      	adds	r7, #12
 800df04:	46bd      	mov	sp, r7
 800df06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df0a:	4770      	bx	lr

0800df0c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800df0c:	b480      	push	{r7}
 800df0e:	b083      	sub	sp, #12
 800df10:	af00      	add	r7, sp, #0
 800df12:	6078      	str	r0, [r7, #4]
 800df14:	460b      	mov	r3, r1
 800df16:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800df18:	bf00      	nop
 800df1a:	370c      	adds	r7, #12
 800df1c:	46bd      	mov	sp, r7
 800df1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df22:	4770      	bx	lr

0800df24 <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 800df24:	b480      	push	{r7}
 800df26:	b083      	sub	sp, #12
 800df28:	af00      	add	r7, sp, #0
 800df2a:	6078      	str	r0, [r7, #4]
 800df2c:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	4a09      	ldr	r2, [pc, #36]	@ (800df58 <HAL_UART_ReceiverTimeout_Config+0x34>)
 800df34:	4293      	cmp	r3, r2
 800df36:	d009      	beq.n	800df4c <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	695b      	ldr	r3, [r3, #20]
 800df3e:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	683a      	ldr	r2, [r7, #0]
 800df48:	430a      	orrs	r2, r1
 800df4a:	615a      	str	r2, [r3, #20]
  }
}
 800df4c:	bf00      	nop
 800df4e:	370c      	adds	r7, #12
 800df50:	46bd      	mov	sp, r7
 800df52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df56:	4770      	bx	lr
 800df58:	40008000 	.word	0x40008000

0800df5c <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 800df5c:	b480      	push	{r7}
 800df5e:	b083      	sub	sp, #12
 800df60:	af00      	add	r7, sp, #0
 800df62:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	4a18      	ldr	r2, [pc, #96]	@ (800dfcc <HAL_UART_EnableReceiverTimeout+0x70>)
 800df6a:	4293      	cmp	r3, r2
 800df6c:	d027      	beq.n	800dfbe <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800df74:	2b20      	cmp	r3, #32
 800df76:	d120      	bne.n	800dfba <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800df7e:	2b01      	cmp	r3, #1
 800df80:	d101      	bne.n	800df86 <HAL_UART_EnableReceiverTimeout+0x2a>
 800df82:	2302      	movs	r3, #2
 800df84:	e01c      	b.n	800dfc0 <HAL_UART_EnableReceiverTimeout+0x64>
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	2201      	movs	r2, #1
 800df8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	2224      	movs	r2, #36	@ 0x24
 800df92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	685a      	ldr	r2, [r3, #4]
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800dfa4:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	2220      	movs	r2, #32
 800dfaa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	2200      	movs	r2, #0
 800dfb2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 800dfb6:	2300      	movs	r3, #0
 800dfb8:	e002      	b.n	800dfc0 <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 800dfba:	2302      	movs	r3, #2
 800dfbc:	e000      	b.n	800dfc0 <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 800dfbe:	2301      	movs	r3, #1
  }
}
 800dfc0:	4618      	mov	r0, r3
 800dfc2:	370c      	adds	r7, #12
 800dfc4:	46bd      	mov	sp, r7
 800dfc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfca:	4770      	bx	lr
 800dfcc:	40008000 	.word	0x40008000

0800dfd0 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 800dfd0:	b480      	push	{r7}
 800dfd2:	b083      	sub	sp, #12
 800dfd4:	af00      	add	r7, sp, #0
 800dfd6:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 800dfde:	4618      	mov	r0, r3
 800dfe0:	370c      	adds	r7, #12
 800dfe2:	46bd      	mov	sp, r7
 800dfe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfe8:	4770      	bx	lr
	...

0800dfec <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800dfec:	b480      	push	{r7}
 800dfee:	b083      	sub	sp, #12
 800dff0:	af00      	add	r7, sp, #0
 800dff2:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	4a1a      	ldr	r2, [pc, #104]	@ (800e060 <UART_InitCallbacksToDefault+0x74>)
 800dff8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	4a19      	ldr	r2, [pc, #100]	@ (800e064 <UART_InitCallbacksToDefault+0x78>)
 800e000:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	4a18      	ldr	r2, [pc, #96]	@ (800e068 <UART_InitCallbacksToDefault+0x7c>)
 800e008:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	4a17      	ldr	r2, [pc, #92]	@ (800e06c <UART_InitCallbacksToDefault+0x80>)
 800e010:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	4a16      	ldr	r2, [pc, #88]	@ (800e070 <UART_InitCallbacksToDefault+0x84>)
 800e018:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	4a15      	ldr	r2, [pc, #84]	@ (800e074 <UART_InitCallbacksToDefault+0x88>)
 800e020:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	4a14      	ldr	r2, [pc, #80]	@ (800e078 <UART_InitCallbacksToDefault+0x8c>)
 800e028:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	4a13      	ldr	r2, [pc, #76]	@ (800e07c <UART_InitCallbacksToDefault+0x90>)
 800e030:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	4a12      	ldr	r2, [pc, #72]	@ (800e080 <UART_InitCallbacksToDefault+0x94>)
 800e038:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	4a11      	ldr	r2, [pc, #68]	@ (800e084 <UART_InitCallbacksToDefault+0x98>)
 800e040:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	4a10      	ldr	r2, [pc, #64]	@ (800e088 <UART_InitCallbacksToDefault+0x9c>)
 800e048:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	4a0f      	ldr	r2, [pc, #60]	@ (800e08c <UART_InitCallbacksToDefault+0xa0>)
 800e050:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 800e054:	bf00      	nop
 800e056:	370c      	adds	r7, #12
 800e058:	46bd      	mov	sp, r7
 800e05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e05e:	4770      	bx	lr
 800e060:	0800de95 	.word	0x0800de95
 800e064:	0800de81 	.word	0x0800de81
 800e068:	0800dea9 	.word	0x0800dea9
 800e06c:	08005fd9 	.word	0x08005fd9
 800e070:	0800debd 	.word	0x0800debd
 800e074:	0800ded1 	.word	0x0800ded1
 800e078:	0800dee5 	.word	0x0800dee5
 800e07c:	0800def9 	.word	0x0800def9
 800e080:	0800ef17 	.word	0x0800ef17
 800e084:	0800ef2b 	.word	0x0800ef2b
 800e088:	0800ef3f 	.word	0x0800ef3f
 800e08c:	0800df0d 	.word	0x0800df0d

0800e090 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e090:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e094:	b08c      	sub	sp, #48	@ 0x30
 800e096:	af00      	add	r7, sp, #0
 800e098:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e09a:	2300      	movs	r3, #0
 800e09c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e0a0:	697b      	ldr	r3, [r7, #20]
 800e0a2:	689a      	ldr	r2, [r3, #8]
 800e0a4:	697b      	ldr	r3, [r7, #20]
 800e0a6:	691b      	ldr	r3, [r3, #16]
 800e0a8:	431a      	orrs	r2, r3
 800e0aa:	697b      	ldr	r3, [r7, #20]
 800e0ac:	695b      	ldr	r3, [r3, #20]
 800e0ae:	431a      	orrs	r2, r3
 800e0b0:	697b      	ldr	r3, [r7, #20]
 800e0b2:	69db      	ldr	r3, [r3, #28]
 800e0b4:	4313      	orrs	r3, r2
 800e0b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e0b8:	697b      	ldr	r3, [r7, #20]
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	681a      	ldr	r2, [r3, #0]
 800e0be:	4baa      	ldr	r3, [pc, #680]	@ (800e368 <UART_SetConfig+0x2d8>)
 800e0c0:	4013      	ands	r3, r2
 800e0c2:	697a      	ldr	r2, [r7, #20]
 800e0c4:	6812      	ldr	r2, [r2, #0]
 800e0c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e0c8:	430b      	orrs	r3, r1
 800e0ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e0cc:	697b      	ldr	r3, [r7, #20]
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	685b      	ldr	r3, [r3, #4]
 800e0d2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800e0d6:	697b      	ldr	r3, [r7, #20]
 800e0d8:	68da      	ldr	r2, [r3, #12]
 800e0da:	697b      	ldr	r3, [r7, #20]
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	430a      	orrs	r2, r1
 800e0e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e0e2:	697b      	ldr	r3, [r7, #20]
 800e0e4:	699b      	ldr	r3, [r3, #24]
 800e0e6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e0e8:	697b      	ldr	r3, [r7, #20]
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	4a9f      	ldr	r2, [pc, #636]	@ (800e36c <UART_SetConfig+0x2dc>)
 800e0ee:	4293      	cmp	r3, r2
 800e0f0:	d004      	beq.n	800e0fc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e0f2:	697b      	ldr	r3, [r7, #20]
 800e0f4:	6a1b      	ldr	r3, [r3, #32]
 800e0f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e0f8:	4313      	orrs	r3, r2
 800e0fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e0fc:	697b      	ldr	r3, [r7, #20]
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	689b      	ldr	r3, [r3, #8]
 800e102:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800e106:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800e10a:	697a      	ldr	r2, [r7, #20]
 800e10c:	6812      	ldr	r2, [r2, #0]
 800e10e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e110:	430b      	orrs	r3, r1
 800e112:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e114:	697b      	ldr	r3, [r7, #20]
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e11a:	f023 010f 	bic.w	r1, r3, #15
 800e11e:	697b      	ldr	r3, [r7, #20]
 800e120:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e122:	697b      	ldr	r3, [r7, #20]
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	430a      	orrs	r2, r1
 800e128:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e12a:	697b      	ldr	r3, [r7, #20]
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	4a90      	ldr	r2, [pc, #576]	@ (800e370 <UART_SetConfig+0x2e0>)
 800e130:	4293      	cmp	r3, r2
 800e132:	d125      	bne.n	800e180 <UART_SetConfig+0xf0>
 800e134:	4b8f      	ldr	r3, [pc, #572]	@ (800e374 <UART_SetConfig+0x2e4>)
 800e136:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e13a:	f003 0303 	and.w	r3, r3, #3
 800e13e:	2b03      	cmp	r3, #3
 800e140:	d81a      	bhi.n	800e178 <UART_SetConfig+0xe8>
 800e142:	a201      	add	r2, pc, #4	@ (adr r2, 800e148 <UART_SetConfig+0xb8>)
 800e144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e148:	0800e159 	.word	0x0800e159
 800e14c:	0800e169 	.word	0x0800e169
 800e150:	0800e161 	.word	0x0800e161
 800e154:	0800e171 	.word	0x0800e171
 800e158:	2301      	movs	r3, #1
 800e15a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800e15e:	e116      	b.n	800e38e <UART_SetConfig+0x2fe>
 800e160:	2302      	movs	r3, #2
 800e162:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800e166:	e112      	b.n	800e38e <UART_SetConfig+0x2fe>
 800e168:	2304      	movs	r3, #4
 800e16a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800e16e:	e10e      	b.n	800e38e <UART_SetConfig+0x2fe>
 800e170:	2308      	movs	r3, #8
 800e172:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800e176:	e10a      	b.n	800e38e <UART_SetConfig+0x2fe>
 800e178:	2310      	movs	r3, #16
 800e17a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800e17e:	e106      	b.n	800e38e <UART_SetConfig+0x2fe>
 800e180:	697b      	ldr	r3, [r7, #20]
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	4a7c      	ldr	r2, [pc, #496]	@ (800e378 <UART_SetConfig+0x2e8>)
 800e186:	4293      	cmp	r3, r2
 800e188:	d138      	bne.n	800e1fc <UART_SetConfig+0x16c>
 800e18a:	4b7a      	ldr	r3, [pc, #488]	@ (800e374 <UART_SetConfig+0x2e4>)
 800e18c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e190:	f003 030c 	and.w	r3, r3, #12
 800e194:	2b0c      	cmp	r3, #12
 800e196:	d82d      	bhi.n	800e1f4 <UART_SetConfig+0x164>
 800e198:	a201      	add	r2, pc, #4	@ (adr r2, 800e1a0 <UART_SetConfig+0x110>)
 800e19a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e19e:	bf00      	nop
 800e1a0:	0800e1d5 	.word	0x0800e1d5
 800e1a4:	0800e1f5 	.word	0x0800e1f5
 800e1a8:	0800e1f5 	.word	0x0800e1f5
 800e1ac:	0800e1f5 	.word	0x0800e1f5
 800e1b0:	0800e1e5 	.word	0x0800e1e5
 800e1b4:	0800e1f5 	.word	0x0800e1f5
 800e1b8:	0800e1f5 	.word	0x0800e1f5
 800e1bc:	0800e1f5 	.word	0x0800e1f5
 800e1c0:	0800e1dd 	.word	0x0800e1dd
 800e1c4:	0800e1f5 	.word	0x0800e1f5
 800e1c8:	0800e1f5 	.word	0x0800e1f5
 800e1cc:	0800e1f5 	.word	0x0800e1f5
 800e1d0:	0800e1ed 	.word	0x0800e1ed
 800e1d4:	2300      	movs	r3, #0
 800e1d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800e1da:	e0d8      	b.n	800e38e <UART_SetConfig+0x2fe>
 800e1dc:	2302      	movs	r3, #2
 800e1de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800e1e2:	e0d4      	b.n	800e38e <UART_SetConfig+0x2fe>
 800e1e4:	2304      	movs	r3, #4
 800e1e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800e1ea:	e0d0      	b.n	800e38e <UART_SetConfig+0x2fe>
 800e1ec:	2308      	movs	r3, #8
 800e1ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800e1f2:	e0cc      	b.n	800e38e <UART_SetConfig+0x2fe>
 800e1f4:	2310      	movs	r3, #16
 800e1f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800e1fa:	e0c8      	b.n	800e38e <UART_SetConfig+0x2fe>
 800e1fc:	697b      	ldr	r3, [r7, #20]
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	4a5e      	ldr	r2, [pc, #376]	@ (800e37c <UART_SetConfig+0x2ec>)
 800e202:	4293      	cmp	r3, r2
 800e204:	d125      	bne.n	800e252 <UART_SetConfig+0x1c2>
 800e206:	4b5b      	ldr	r3, [pc, #364]	@ (800e374 <UART_SetConfig+0x2e4>)
 800e208:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e20c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800e210:	2b30      	cmp	r3, #48	@ 0x30
 800e212:	d016      	beq.n	800e242 <UART_SetConfig+0x1b2>
 800e214:	2b30      	cmp	r3, #48	@ 0x30
 800e216:	d818      	bhi.n	800e24a <UART_SetConfig+0x1ba>
 800e218:	2b20      	cmp	r3, #32
 800e21a:	d00a      	beq.n	800e232 <UART_SetConfig+0x1a2>
 800e21c:	2b20      	cmp	r3, #32
 800e21e:	d814      	bhi.n	800e24a <UART_SetConfig+0x1ba>
 800e220:	2b00      	cmp	r3, #0
 800e222:	d002      	beq.n	800e22a <UART_SetConfig+0x19a>
 800e224:	2b10      	cmp	r3, #16
 800e226:	d008      	beq.n	800e23a <UART_SetConfig+0x1aa>
 800e228:	e00f      	b.n	800e24a <UART_SetConfig+0x1ba>
 800e22a:	2300      	movs	r3, #0
 800e22c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800e230:	e0ad      	b.n	800e38e <UART_SetConfig+0x2fe>
 800e232:	2302      	movs	r3, #2
 800e234:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800e238:	e0a9      	b.n	800e38e <UART_SetConfig+0x2fe>
 800e23a:	2304      	movs	r3, #4
 800e23c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800e240:	e0a5      	b.n	800e38e <UART_SetConfig+0x2fe>
 800e242:	2308      	movs	r3, #8
 800e244:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800e248:	e0a1      	b.n	800e38e <UART_SetConfig+0x2fe>
 800e24a:	2310      	movs	r3, #16
 800e24c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800e250:	e09d      	b.n	800e38e <UART_SetConfig+0x2fe>
 800e252:	697b      	ldr	r3, [r7, #20]
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	4a4a      	ldr	r2, [pc, #296]	@ (800e380 <UART_SetConfig+0x2f0>)
 800e258:	4293      	cmp	r3, r2
 800e25a:	d125      	bne.n	800e2a8 <UART_SetConfig+0x218>
 800e25c:	4b45      	ldr	r3, [pc, #276]	@ (800e374 <UART_SetConfig+0x2e4>)
 800e25e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e262:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800e266:	2bc0      	cmp	r3, #192	@ 0xc0
 800e268:	d016      	beq.n	800e298 <UART_SetConfig+0x208>
 800e26a:	2bc0      	cmp	r3, #192	@ 0xc0
 800e26c:	d818      	bhi.n	800e2a0 <UART_SetConfig+0x210>
 800e26e:	2b80      	cmp	r3, #128	@ 0x80
 800e270:	d00a      	beq.n	800e288 <UART_SetConfig+0x1f8>
 800e272:	2b80      	cmp	r3, #128	@ 0x80
 800e274:	d814      	bhi.n	800e2a0 <UART_SetConfig+0x210>
 800e276:	2b00      	cmp	r3, #0
 800e278:	d002      	beq.n	800e280 <UART_SetConfig+0x1f0>
 800e27a:	2b40      	cmp	r3, #64	@ 0x40
 800e27c:	d008      	beq.n	800e290 <UART_SetConfig+0x200>
 800e27e:	e00f      	b.n	800e2a0 <UART_SetConfig+0x210>
 800e280:	2300      	movs	r3, #0
 800e282:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800e286:	e082      	b.n	800e38e <UART_SetConfig+0x2fe>
 800e288:	2302      	movs	r3, #2
 800e28a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800e28e:	e07e      	b.n	800e38e <UART_SetConfig+0x2fe>
 800e290:	2304      	movs	r3, #4
 800e292:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800e296:	e07a      	b.n	800e38e <UART_SetConfig+0x2fe>
 800e298:	2308      	movs	r3, #8
 800e29a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800e29e:	e076      	b.n	800e38e <UART_SetConfig+0x2fe>
 800e2a0:	2310      	movs	r3, #16
 800e2a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800e2a6:	e072      	b.n	800e38e <UART_SetConfig+0x2fe>
 800e2a8:	697b      	ldr	r3, [r7, #20]
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	4a35      	ldr	r2, [pc, #212]	@ (800e384 <UART_SetConfig+0x2f4>)
 800e2ae:	4293      	cmp	r3, r2
 800e2b0:	d12a      	bne.n	800e308 <UART_SetConfig+0x278>
 800e2b2:	4b30      	ldr	r3, [pc, #192]	@ (800e374 <UART_SetConfig+0x2e4>)
 800e2b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e2b8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e2bc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e2c0:	d01a      	beq.n	800e2f8 <UART_SetConfig+0x268>
 800e2c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e2c6:	d81b      	bhi.n	800e300 <UART_SetConfig+0x270>
 800e2c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e2cc:	d00c      	beq.n	800e2e8 <UART_SetConfig+0x258>
 800e2ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e2d2:	d815      	bhi.n	800e300 <UART_SetConfig+0x270>
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d003      	beq.n	800e2e0 <UART_SetConfig+0x250>
 800e2d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e2dc:	d008      	beq.n	800e2f0 <UART_SetConfig+0x260>
 800e2de:	e00f      	b.n	800e300 <UART_SetConfig+0x270>
 800e2e0:	2300      	movs	r3, #0
 800e2e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800e2e6:	e052      	b.n	800e38e <UART_SetConfig+0x2fe>
 800e2e8:	2302      	movs	r3, #2
 800e2ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800e2ee:	e04e      	b.n	800e38e <UART_SetConfig+0x2fe>
 800e2f0:	2304      	movs	r3, #4
 800e2f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800e2f6:	e04a      	b.n	800e38e <UART_SetConfig+0x2fe>
 800e2f8:	2308      	movs	r3, #8
 800e2fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800e2fe:	e046      	b.n	800e38e <UART_SetConfig+0x2fe>
 800e300:	2310      	movs	r3, #16
 800e302:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800e306:	e042      	b.n	800e38e <UART_SetConfig+0x2fe>
 800e308:	697b      	ldr	r3, [r7, #20]
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	4a17      	ldr	r2, [pc, #92]	@ (800e36c <UART_SetConfig+0x2dc>)
 800e30e:	4293      	cmp	r3, r2
 800e310:	d13a      	bne.n	800e388 <UART_SetConfig+0x2f8>
 800e312:	4b18      	ldr	r3, [pc, #96]	@ (800e374 <UART_SetConfig+0x2e4>)
 800e314:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e318:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800e31c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800e320:	d01a      	beq.n	800e358 <UART_SetConfig+0x2c8>
 800e322:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800e326:	d81b      	bhi.n	800e360 <UART_SetConfig+0x2d0>
 800e328:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e32c:	d00c      	beq.n	800e348 <UART_SetConfig+0x2b8>
 800e32e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e332:	d815      	bhi.n	800e360 <UART_SetConfig+0x2d0>
 800e334:	2b00      	cmp	r3, #0
 800e336:	d003      	beq.n	800e340 <UART_SetConfig+0x2b0>
 800e338:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e33c:	d008      	beq.n	800e350 <UART_SetConfig+0x2c0>
 800e33e:	e00f      	b.n	800e360 <UART_SetConfig+0x2d0>
 800e340:	2300      	movs	r3, #0
 800e342:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800e346:	e022      	b.n	800e38e <UART_SetConfig+0x2fe>
 800e348:	2302      	movs	r3, #2
 800e34a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800e34e:	e01e      	b.n	800e38e <UART_SetConfig+0x2fe>
 800e350:	2304      	movs	r3, #4
 800e352:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800e356:	e01a      	b.n	800e38e <UART_SetConfig+0x2fe>
 800e358:	2308      	movs	r3, #8
 800e35a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800e35e:	e016      	b.n	800e38e <UART_SetConfig+0x2fe>
 800e360:	2310      	movs	r3, #16
 800e362:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800e366:	e012      	b.n	800e38e <UART_SetConfig+0x2fe>
 800e368:	cfff69f3 	.word	0xcfff69f3
 800e36c:	40008000 	.word	0x40008000
 800e370:	40013800 	.word	0x40013800
 800e374:	40021000 	.word	0x40021000
 800e378:	40004400 	.word	0x40004400
 800e37c:	40004800 	.word	0x40004800
 800e380:	40004c00 	.word	0x40004c00
 800e384:	40005000 	.word	0x40005000
 800e388:	2310      	movs	r3, #16
 800e38a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e38e:	697b      	ldr	r3, [r7, #20]
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	4aae      	ldr	r2, [pc, #696]	@ (800e64c <UART_SetConfig+0x5bc>)
 800e394:	4293      	cmp	r3, r2
 800e396:	f040 8097 	bne.w	800e4c8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e39a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800e39e:	2b08      	cmp	r3, #8
 800e3a0:	d823      	bhi.n	800e3ea <UART_SetConfig+0x35a>
 800e3a2:	a201      	add	r2, pc, #4	@ (adr r2, 800e3a8 <UART_SetConfig+0x318>)
 800e3a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3a8:	0800e3cd 	.word	0x0800e3cd
 800e3ac:	0800e3eb 	.word	0x0800e3eb
 800e3b0:	0800e3d5 	.word	0x0800e3d5
 800e3b4:	0800e3eb 	.word	0x0800e3eb
 800e3b8:	0800e3db 	.word	0x0800e3db
 800e3bc:	0800e3eb 	.word	0x0800e3eb
 800e3c0:	0800e3eb 	.word	0x0800e3eb
 800e3c4:	0800e3eb 	.word	0x0800e3eb
 800e3c8:	0800e3e3 	.word	0x0800e3e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e3cc:	f7fc fcf6 	bl	800adbc <HAL_RCC_GetPCLK1Freq>
 800e3d0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800e3d2:	e010      	b.n	800e3f6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e3d4:	4b9e      	ldr	r3, [pc, #632]	@ (800e650 <UART_SetConfig+0x5c0>)
 800e3d6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800e3d8:	e00d      	b.n	800e3f6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e3da:	f7fc fc81 	bl	800ace0 <HAL_RCC_GetSysClockFreq>
 800e3de:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800e3e0:	e009      	b.n	800e3f6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e3e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e3e6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800e3e8:	e005      	b.n	800e3f6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800e3ea:	2300      	movs	r3, #0
 800e3ec:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800e3ee:	2301      	movs	r3, #1
 800e3f0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800e3f4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e3f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	f000 8130 	beq.w	800e65e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e3fe:	697b      	ldr	r3, [r7, #20]
 800e400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e402:	4a94      	ldr	r2, [pc, #592]	@ (800e654 <UART_SetConfig+0x5c4>)
 800e404:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e408:	461a      	mov	r2, r3
 800e40a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e40c:	fbb3 f3f2 	udiv	r3, r3, r2
 800e410:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e412:	697b      	ldr	r3, [r7, #20]
 800e414:	685a      	ldr	r2, [r3, #4]
 800e416:	4613      	mov	r3, r2
 800e418:	005b      	lsls	r3, r3, #1
 800e41a:	4413      	add	r3, r2
 800e41c:	69ba      	ldr	r2, [r7, #24]
 800e41e:	429a      	cmp	r2, r3
 800e420:	d305      	bcc.n	800e42e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e422:	697b      	ldr	r3, [r7, #20]
 800e424:	685b      	ldr	r3, [r3, #4]
 800e426:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e428:	69ba      	ldr	r2, [r7, #24]
 800e42a:	429a      	cmp	r2, r3
 800e42c:	d903      	bls.n	800e436 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800e42e:	2301      	movs	r3, #1
 800e430:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800e434:	e113      	b.n	800e65e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e438:	2200      	movs	r2, #0
 800e43a:	60bb      	str	r3, [r7, #8]
 800e43c:	60fa      	str	r2, [r7, #12]
 800e43e:	697b      	ldr	r3, [r7, #20]
 800e440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e442:	4a84      	ldr	r2, [pc, #528]	@ (800e654 <UART_SetConfig+0x5c4>)
 800e444:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e448:	b29b      	uxth	r3, r3
 800e44a:	2200      	movs	r2, #0
 800e44c:	603b      	str	r3, [r7, #0]
 800e44e:	607a      	str	r2, [r7, #4]
 800e450:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e454:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e458:	f7f2 fbcc 	bl	8000bf4 <__aeabi_uldivmod>
 800e45c:	4602      	mov	r2, r0
 800e45e:	460b      	mov	r3, r1
 800e460:	4610      	mov	r0, r2
 800e462:	4619      	mov	r1, r3
 800e464:	f04f 0200 	mov.w	r2, #0
 800e468:	f04f 0300 	mov.w	r3, #0
 800e46c:	020b      	lsls	r3, r1, #8
 800e46e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e472:	0202      	lsls	r2, r0, #8
 800e474:	6979      	ldr	r1, [r7, #20]
 800e476:	6849      	ldr	r1, [r1, #4]
 800e478:	0849      	lsrs	r1, r1, #1
 800e47a:	2000      	movs	r0, #0
 800e47c:	460c      	mov	r4, r1
 800e47e:	4605      	mov	r5, r0
 800e480:	eb12 0804 	adds.w	r8, r2, r4
 800e484:	eb43 0905 	adc.w	r9, r3, r5
 800e488:	697b      	ldr	r3, [r7, #20]
 800e48a:	685b      	ldr	r3, [r3, #4]
 800e48c:	2200      	movs	r2, #0
 800e48e:	469a      	mov	sl, r3
 800e490:	4693      	mov	fp, r2
 800e492:	4652      	mov	r2, sl
 800e494:	465b      	mov	r3, fp
 800e496:	4640      	mov	r0, r8
 800e498:	4649      	mov	r1, r9
 800e49a:	f7f2 fbab 	bl	8000bf4 <__aeabi_uldivmod>
 800e49e:	4602      	mov	r2, r0
 800e4a0:	460b      	mov	r3, r1
 800e4a2:	4613      	mov	r3, r2
 800e4a4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e4a6:	6a3b      	ldr	r3, [r7, #32]
 800e4a8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e4ac:	d308      	bcc.n	800e4c0 <UART_SetConfig+0x430>
 800e4ae:	6a3b      	ldr	r3, [r7, #32]
 800e4b0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e4b4:	d204      	bcs.n	800e4c0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800e4b6:	697b      	ldr	r3, [r7, #20]
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	6a3a      	ldr	r2, [r7, #32]
 800e4bc:	60da      	str	r2, [r3, #12]
 800e4be:	e0ce      	b.n	800e65e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800e4c0:	2301      	movs	r3, #1
 800e4c2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800e4c6:	e0ca      	b.n	800e65e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e4c8:	697b      	ldr	r3, [r7, #20]
 800e4ca:	69db      	ldr	r3, [r3, #28]
 800e4cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e4d0:	d166      	bne.n	800e5a0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800e4d2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800e4d6:	2b08      	cmp	r3, #8
 800e4d8:	d827      	bhi.n	800e52a <UART_SetConfig+0x49a>
 800e4da:	a201      	add	r2, pc, #4	@ (adr r2, 800e4e0 <UART_SetConfig+0x450>)
 800e4dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4e0:	0800e505 	.word	0x0800e505
 800e4e4:	0800e50d 	.word	0x0800e50d
 800e4e8:	0800e515 	.word	0x0800e515
 800e4ec:	0800e52b 	.word	0x0800e52b
 800e4f0:	0800e51b 	.word	0x0800e51b
 800e4f4:	0800e52b 	.word	0x0800e52b
 800e4f8:	0800e52b 	.word	0x0800e52b
 800e4fc:	0800e52b 	.word	0x0800e52b
 800e500:	0800e523 	.word	0x0800e523
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e504:	f7fc fc5a 	bl	800adbc <HAL_RCC_GetPCLK1Freq>
 800e508:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800e50a:	e014      	b.n	800e536 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e50c:	f7fc fc6c 	bl	800ade8 <HAL_RCC_GetPCLK2Freq>
 800e510:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800e512:	e010      	b.n	800e536 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e514:	4b4e      	ldr	r3, [pc, #312]	@ (800e650 <UART_SetConfig+0x5c0>)
 800e516:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800e518:	e00d      	b.n	800e536 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e51a:	f7fc fbe1 	bl	800ace0 <HAL_RCC_GetSysClockFreq>
 800e51e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800e520:	e009      	b.n	800e536 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e522:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e526:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800e528:	e005      	b.n	800e536 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800e52a:	2300      	movs	r3, #0
 800e52c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800e52e:	2301      	movs	r3, #1
 800e530:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800e534:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e538:	2b00      	cmp	r3, #0
 800e53a:	f000 8090 	beq.w	800e65e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e53e:	697b      	ldr	r3, [r7, #20]
 800e540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e542:	4a44      	ldr	r2, [pc, #272]	@ (800e654 <UART_SetConfig+0x5c4>)
 800e544:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e548:	461a      	mov	r2, r3
 800e54a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e54c:	fbb3 f3f2 	udiv	r3, r3, r2
 800e550:	005a      	lsls	r2, r3, #1
 800e552:	697b      	ldr	r3, [r7, #20]
 800e554:	685b      	ldr	r3, [r3, #4]
 800e556:	085b      	lsrs	r3, r3, #1
 800e558:	441a      	add	r2, r3
 800e55a:	697b      	ldr	r3, [r7, #20]
 800e55c:	685b      	ldr	r3, [r3, #4]
 800e55e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e562:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e564:	6a3b      	ldr	r3, [r7, #32]
 800e566:	2b0f      	cmp	r3, #15
 800e568:	d916      	bls.n	800e598 <UART_SetConfig+0x508>
 800e56a:	6a3b      	ldr	r3, [r7, #32]
 800e56c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e570:	d212      	bcs.n	800e598 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e572:	6a3b      	ldr	r3, [r7, #32]
 800e574:	b29b      	uxth	r3, r3
 800e576:	f023 030f 	bic.w	r3, r3, #15
 800e57a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e57c:	6a3b      	ldr	r3, [r7, #32]
 800e57e:	085b      	lsrs	r3, r3, #1
 800e580:	b29b      	uxth	r3, r3
 800e582:	f003 0307 	and.w	r3, r3, #7
 800e586:	b29a      	uxth	r2, r3
 800e588:	8bfb      	ldrh	r3, [r7, #30]
 800e58a:	4313      	orrs	r3, r2
 800e58c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800e58e:	697b      	ldr	r3, [r7, #20]
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	8bfa      	ldrh	r2, [r7, #30]
 800e594:	60da      	str	r2, [r3, #12]
 800e596:	e062      	b.n	800e65e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800e598:	2301      	movs	r3, #1
 800e59a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800e59e:	e05e      	b.n	800e65e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800e5a0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800e5a4:	2b08      	cmp	r3, #8
 800e5a6:	d828      	bhi.n	800e5fa <UART_SetConfig+0x56a>
 800e5a8:	a201      	add	r2, pc, #4	@ (adr r2, 800e5b0 <UART_SetConfig+0x520>)
 800e5aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5ae:	bf00      	nop
 800e5b0:	0800e5d5 	.word	0x0800e5d5
 800e5b4:	0800e5dd 	.word	0x0800e5dd
 800e5b8:	0800e5e5 	.word	0x0800e5e5
 800e5bc:	0800e5fb 	.word	0x0800e5fb
 800e5c0:	0800e5eb 	.word	0x0800e5eb
 800e5c4:	0800e5fb 	.word	0x0800e5fb
 800e5c8:	0800e5fb 	.word	0x0800e5fb
 800e5cc:	0800e5fb 	.word	0x0800e5fb
 800e5d0:	0800e5f3 	.word	0x0800e5f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e5d4:	f7fc fbf2 	bl	800adbc <HAL_RCC_GetPCLK1Freq>
 800e5d8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800e5da:	e014      	b.n	800e606 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e5dc:	f7fc fc04 	bl	800ade8 <HAL_RCC_GetPCLK2Freq>
 800e5e0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800e5e2:	e010      	b.n	800e606 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e5e4:	4b1a      	ldr	r3, [pc, #104]	@ (800e650 <UART_SetConfig+0x5c0>)
 800e5e6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800e5e8:	e00d      	b.n	800e606 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e5ea:	f7fc fb79 	bl	800ace0 <HAL_RCC_GetSysClockFreq>
 800e5ee:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800e5f0:	e009      	b.n	800e606 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e5f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e5f6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800e5f8:	e005      	b.n	800e606 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800e5fa:	2300      	movs	r3, #0
 800e5fc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800e5fe:	2301      	movs	r3, #1
 800e600:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800e604:	bf00      	nop
    }

    if (pclk != 0U)
 800e606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d028      	beq.n	800e65e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e60c:	697b      	ldr	r3, [r7, #20]
 800e60e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e610:	4a10      	ldr	r2, [pc, #64]	@ (800e654 <UART_SetConfig+0x5c4>)
 800e612:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e616:	461a      	mov	r2, r3
 800e618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e61a:	fbb3 f2f2 	udiv	r2, r3, r2
 800e61e:	697b      	ldr	r3, [r7, #20]
 800e620:	685b      	ldr	r3, [r3, #4]
 800e622:	085b      	lsrs	r3, r3, #1
 800e624:	441a      	add	r2, r3
 800e626:	697b      	ldr	r3, [r7, #20]
 800e628:	685b      	ldr	r3, [r3, #4]
 800e62a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e62e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e630:	6a3b      	ldr	r3, [r7, #32]
 800e632:	2b0f      	cmp	r3, #15
 800e634:	d910      	bls.n	800e658 <UART_SetConfig+0x5c8>
 800e636:	6a3b      	ldr	r3, [r7, #32]
 800e638:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e63c:	d20c      	bcs.n	800e658 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e63e:	6a3b      	ldr	r3, [r7, #32]
 800e640:	b29a      	uxth	r2, r3
 800e642:	697b      	ldr	r3, [r7, #20]
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	60da      	str	r2, [r3, #12]
 800e648:	e009      	b.n	800e65e <UART_SetConfig+0x5ce>
 800e64a:	bf00      	nop
 800e64c:	40008000 	.word	0x40008000
 800e650:	00f42400 	.word	0x00f42400
 800e654:	080113d0 	.word	0x080113d0
      }
      else
      {
        ret = HAL_ERROR;
 800e658:	2301      	movs	r3, #1
 800e65a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e65e:	697b      	ldr	r3, [r7, #20]
 800e660:	2201      	movs	r2, #1
 800e662:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800e666:	697b      	ldr	r3, [r7, #20]
 800e668:	2201      	movs	r2, #1
 800e66a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e66e:	697b      	ldr	r3, [r7, #20]
 800e670:	2200      	movs	r2, #0
 800e672:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800e674:	697b      	ldr	r3, [r7, #20]
 800e676:	2200      	movs	r2, #0
 800e678:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800e67a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800e67e:	4618      	mov	r0, r3
 800e680:	3730      	adds	r7, #48	@ 0x30
 800e682:	46bd      	mov	sp, r7
 800e684:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800e688 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e688:	b480      	push	{r7}
 800e68a:	b083      	sub	sp, #12
 800e68c:	af00      	add	r7, sp, #0
 800e68e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e694:	f003 0308 	and.w	r3, r3, #8
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d00a      	beq.n	800e6b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	685b      	ldr	r3, [r3, #4]
 800e6a2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	430a      	orrs	r2, r1
 800e6b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e6b6:	f003 0301 	and.w	r3, r3, #1
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d00a      	beq.n	800e6d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	685b      	ldr	r3, [r3, #4]
 800e6c4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	430a      	orrs	r2, r1
 800e6d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e6d8:	f003 0302 	and.w	r3, r3, #2
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d00a      	beq.n	800e6f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	685b      	ldr	r3, [r3, #4]
 800e6e6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	430a      	orrs	r2, r1
 800e6f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e6fa:	f003 0304 	and.w	r3, r3, #4
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d00a      	beq.n	800e718 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	685b      	ldr	r3, [r3, #4]
 800e708:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	430a      	orrs	r2, r1
 800e716:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e71c:	f003 0310 	and.w	r3, r3, #16
 800e720:	2b00      	cmp	r3, #0
 800e722:	d00a      	beq.n	800e73a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	689b      	ldr	r3, [r3, #8]
 800e72a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	430a      	orrs	r2, r1
 800e738:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e73e:	f003 0320 	and.w	r3, r3, #32
 800e742:	2b00      	cmp	r3, #0
 800e744:	d00a      	beq.n	800e75c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	689b      	ldr	r3, [r3, #8]
 800e74c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	430a      	orrs	r2, r1
 800e75a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e760:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e764:	2b00      	cmp	r3, #0
 800e766:	d01a      	beq.n	800e79e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	685b      	ldr	r3, [r3, #4]
 800e76e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	430a      	orrs	r2, r1
 800e77c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e782:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e786:	d10a      	bne.n	800e79e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	685b      	ldr	r3, [r3, #4]
 800e78e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	430a      	orrs	r2, r1
 800e79c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e7a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d00a      	beq.n	800e7c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	685b      	ldr	r3, [r3, #4]
 800e7b0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	430a      	orrs	r2, r1
 800e7be:	605a      	str	r2, [r3, #4]
  }
}
 800e7c0:	bf00      	nop
 800e7c2:	370c      	adds	r7, #12
 800e7c4:	46bd      	mov	sp, r7
 800e7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ca:	4770      	bx	lr

0800e7cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e7cc:	b580      	push	{r7, lr}
 800e7ce:	b098      	sub	sp, #96	@ 0x60
 800e7d0:	af02      	add	r7, sp, #8
 800e7d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	2200      	movs	r2, #0
 800e7d8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e7dc:	f7f9 faee 	bl	8007dbc <HAL_GetTick>
 800e7e0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	f003 0308 	and.w	r3, r3, #8
 800e7ec:	2b08      	cmp	r3, #8
 800e7ee:	d12f      	bne.n	800e850 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e7f0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800e7f4:	9300      	str	r3, [sp, #0]
 800e7f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e7f8:	2200      	movs	r2, #0
 800e7fa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800e7fe:	6878      	ldr	r0, [r7, #4]
 800e800:	f000 f88e 	bl	800e920 <UART_WaitOnFlagUntilTimeout>
 800e804:	4603      	mov	r3, r0
 800e806:	2b00      	cmp	r3, #0
 800e808:	d022      	beq.n	800e850 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e810:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e812:	e853 3f00 	ldrex	r3, [r3]
 800e816:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e818:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e81a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e81e:	653b      	str	r3, [r7, #80]	@ 0x50
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	461a      	mov	r2, r3
 800e826:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e828:	647b      	str	r3, [r7, #68]	@ 0x44
 800e82a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e82c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e82e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e830:	e841 2300 	strex	r3, r2, [r1]
 800e834:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e836:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d1e6      	bne.n	800e80a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	2220      	movs	r2, #32
 800e840:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	2200      	movs	r2, #0
 800e848:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e84c:	2303      	movs	r3, #3
 800e84e:	e063      	b.n	800e918 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	f003 0304 	and.w	r3, r3, #4
 800e85a:	2b04      	cmp	r3, #4
 800e85c:	d149      	bne.n	800e8f2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e85e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800e862:	9300      	str	r3, [sp, #0]
 800e864:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e866:	2200      	movs	r2, #0
 800e868:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800e86c:	6878      	ldr	r0, [r7, #4]
 800e86e:	f000 f857 	bl	800e920 <UART_WaitOnFlagUntilTimeout>
 800e872:	4603      	mov	r3, r0
 800e874:	2b00      	cmp	r3, #0
 800e876:	d03c      	beq.n	800e8f2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e87e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e880:	e853 3f00 	ldrex	r3, [r3]
 800e884:	623b      	str	r3, [r7, #32]
   return(result);
 800e886:	6a3b      	ldr	r3, [r7, #32]
 800e888:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e88c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	461a      	mov	r2, r3
 800e894:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e896:	633b      	str	r3, [r7, #48]	@ 0x30
 800e898:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e89a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e89c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e89e:	e841 2300 	strex	r3, r2, [r1]
 800e8a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e8a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d1e6      	bne.n	800e878 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	3308      	adds	r3, #8
 800e8b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8b2:	693b      	ldr	r3, [r7, #16]
 800e8b4:	e853 3f00 	ldrex	r3, [r3]
 800e8b8:	60fb      	str	r3, [r7, #12]
   return(result);
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	f023 0301 	bic.w	r3, r3, #1
 800e8c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	3308      	adds	r3, #8
 800e8c8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e8ca:	61fa      	str	r2, [r7, #28]
 800e8cc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8ce:	69b9      	ldr	r1, [r7, #24]
 800e8d0:	69fa      	ldr	r2, [r7, #28]
 800e8d2:	e841 2300 	strex	r3, r2, [r1]
 800e8d6:	617b      	str	r3, [r7, #20]
   return(result);
 800e8d8:	697b      	ldr	r3, [r7, #20]
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d1e5      	bne.n	800e8aa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	2220      	movs	r2, #32
 800e8e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	2200      	movs	r2, #0
 800e8ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e8ee:	2303      	movs	r3, #3
 800e8f0:	e012      	b.n	800e918 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	2220      	movs	r2, #32
 800e8f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	2220      	movs	r2, #32
 800e8fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	2200      	movs	r2, #0
 800e906:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	2200      	movs	r2, #0
 800e90c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	2200      	movs	r2, #0
 800e912:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e916:	2300      	movs	r3, #0
}
 800e918:	4618      	mov	r0, r3
 800e91a:	3758      	adds	r7, #88	@ 0x58
 800e91c:	46bd      	mov	sp, r7
 800e91e:	bd80      	pop	{r7, pc}

0800e920 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e920:	b580      	push	{r7, lr}
 800e922:	b084      	sub	sp, #16
 800e924:	af00      	add	r7, sp, #0
 800e926:	60f8      	str	r0, [r7, #12]
 800e928:	60b9      	str	r1, [r7, #8]
 800e92a:	603b      	str	r3, [r7, #0]
 800e92c:	4613      	mov	r3, r2
 800e92e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e930:	e04f      	b.n	800e9d2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e932:	69bb      	ldr	r3, [r7, #24]
 800e934:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e938:	d04b      	beq.n	800e9d2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e93a:	f7f9 fa3f 	bl	8007dbc <HAL_GetTick>
 800e93e:	4602      	mov	r2, r0
 800e940:	683b      	ldr	r3, [r7, #0]
 800e942:	1ad3      	subs	r3, r2, r3
 800e944:	69ba      	ldr	r2, [r7, #24]
 800e946:	429a      	cmp	r2, r3
 800e948:	d302      	bcc.n	800e950 <UART_WaitOnFlagUntilTimeout+0x30>
 800e94a:	69bb      	ldr	r3, [r7, #24]
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d101      	bne.n	800e954 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800e950:	2303      	movs	r3, #3
 800e952:	e04e      	b.n	800e9f2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	f003 0304 	and.w	r3, r3, #4
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d037      	beq.n	800e9d2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800e962:	68bb      	ldr	r3, [r7, #8]
 800e964:	2b80      	cmp	r3, #128	@ 0x80
 800e966:	d034      	beq.n	800e9d2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800e968:	68bb      	ldr	r3, [r7, #8]
 800e96a:	2b40      	cmp	r3, #64	@ 0x40
 800e96c:	d031      	beq.n	800e9d2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800e96e:	68fb      	ldr	r3, [r7, #12]
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	69db      	ldr	r3, [r3, #28]
 800e974:	f003 0308 	and.w	r3, r3, #8
 800e978:	2b08      	cmp	r3, #8
 800e97a:	d110      	bne.n	800e99e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	2208      	movs	r2, #8
 800e982:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e984:	68f8      	ldr	r0, [r7, #12]
 800e986:	f000 f920 	bl	800ebca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	2208      	movs	r2, #8
 800e98e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e992:	68fb      	ldr	r3, [r7, #12]
 800e994:	2200      	movs	r2, #0
 800e996:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800e99a:	2301      	movs	r3, #1
 800e99c:	e029      	b.n	800e9f2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e99e:	68fb      	ldr	r3, [r7, #12]
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	69db      	ldr	r3, [r3, #28]
 800e9a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e9a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e9ac:	d111      	bne.n	800e9d2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e9b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e9b8:	68f8      	ldr	r0, [r7, #12]
 800e9ba:	f000 f906 	bl	800ebca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	2220      	movs	r2, #32
 800e9c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	2200      	movs	r2, #0
 800e9ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800e9ce:	2303      	movs	r3, #3
 800e9d0:	e00f      	b.n	800e9f2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e9d2:	68fb      	ldr	r3, [r7, #12]
 800e9d4:	681b      	ldr	r3, [r3, #0]
 800e9d6:	69da      	ldr	r2, [r3, #28]
 800e9d8:	68bb      	ldr	r3, [r7, #8]
 800e9da:	4013      	ands	r3, r2
 800e9dc:	68ba      	ldr	r2, [r7, #8]
 800e9de:	429a      	cmp	r2, r3
 800e9e0:	bf0c      	ite	eq
 800e9e2:	2301      	moveq	r3, #1
 800e9e4:	2300      	movne	r3, #0
 800e9e6:	b2db      	uxtb	r3, r3
 800e9e8:	461a      	mov	r2, r3
 800e9ea:	79fb      	ldrb	r3, [r7, #7]
 800e9ec:	429a      	cmp	r2, r3
 800e9ee:	d0a0      	beq.n	800e932 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e9f0:	2300      	movs	r3, #0
}
 800e9f2:	4618      	mov	r0, r3
 800e9f4:	3710      	adds	r7, #16
 800e9f6:	46bd      	mov	sp, r7
 800e9f8:	bd80      	pop	{r7, pc}
	...

0800e9fc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e9fc:	b580      	push	{r7, lr}
 800e9fe:	b096      	sub	sp, #88	@ 0x58
 800ea00:	af00      	add	r7, sp, #0
 800ea02:	60f8      	str	r0, [r7, #12]
 800ea04:	60b9      	str	r1, [r7, #8]
 800ea06:	4613      	mov	r3, r2
 800ea08:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	68ba      	ldr	r2, [r7, #8]
 800ea0e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	88fa      	ldrh	r2, [r7, #6]
 800ea14:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	2200      	movs	r2, #0
 800ea1c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	2222      	movs	r2, #34	@ 0x22
 800ea24:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800ea28:	68fb      	ldr	r3, [r7, #12]
 800ea2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d02d      	beq.n	800ea8e <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ea38:	4a40      	ldr	r2, [pc, #256]	@ (800eb3c <UART_Start_Receive_DMA+0x140>)
 800ea3a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ea42:	4a3f      	ldr	r2, [pc, #252]	@ (800eb40 <UART_Start_Receive_DMA+0x144>)
 800ea44:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ea4c:	4a3d      	ldr	r2, [pc, #244]	@ (800eb44 <UART_Start_Receive_DMA+0x148>)
 800ea4e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ea56:	2200      	movs	r2, #0
 800ea58:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	3324      	adds	r3, #36	@ 0x24
 800ea66:	4619      	mov	r1, r3
 800ea68:	68fb      	ldr	r3, [r7, #12]
 800ea6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ea6c:	461a      	mov	r2, r3
 800ea6e:	88fb      	ldrh	r3, [r7, #6]
 800ea70:	f7fa ffe0 	bl	8009a34 <HAL_DMA_Start_IT>
 800ea74:	4603      	mov	r3, r0
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d009      	beq.n	800ea8e <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ea7a:	68fb      	ldr	r3, [r7, #12]
 800ea7c:	2210      	movs	r2, #16
 800ea7e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	2220      	movs	r2, #32
 800ea86:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800ea8a:	2301      	movs	r3, #1
 800ea8c:	e051      	b.n	800eb32 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	691b      	ldr	r3, [r3, #16]
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d018      	beq.n	800eac8 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ea9e:	e853 3f00 	ldrex	r3, [r3]
 800eaa2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800eaa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eaa6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800eaaa:	657b      	str	r3, [r7, #84]	@ 0x54
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	461a      	mov	r2, r3
 800eab2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eab4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800eab6:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eab8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800eaba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800eabc:	e841 2300 	strex	r3, r2, [r1]
 800eac0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800eac2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d1e6      	bne.n	800ea96 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eac8:	68fb      	ldr	r3, [r7, #12]
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	3308      	adds	r3, #8
 800eace:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ead0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ead2:	e853 3f00 	ldrex	r3, [r3]
 800ead6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ead8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eada:	f043 0301 	orr.w	r3, r3, #1
 800eade:	653b      	str	r3, [r7, #80]	@ 0x50
 800eae0:	68fb      	ldr	r3, [r7, #12]
 800eae2:	681b      	ldr	r3, [r3, #0]
 800eae4:	3308      	adds	r3, #8
 800eae6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800eae8:	637a      	str	r2, [r7, #52]	@ 0x34
 800eaea:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eaec:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800eaee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800eaf0:	e841 2300 	strex	r3, r2, [r1]
 800eaf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800eaf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d1e5      	bne.n	800eac8 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	3308      	adds	r3, #8
 800eb02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb04:	697b      	ldr	r3, [r7, #20]
 800eb06:	e853 3f00 	ldrex	r3, [r3]
 800eb0a:	613b      	str	r3, [r7, #16]
   return(result);
 800eb0c:	693b      	ldr	r3, [r7, #16]
 800eb0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800eb12:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	3308      	adds	r3, #8
 800eb1a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800eb1c:	623a      	str	r2, [r7, #32]
 800eb1e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb20:	69f9      	ldr	r1, [r7, #28]
 800eb22:	6a3a      	ldr	r2, [r7, #32]
 800eb24:	e841 2300 	strex	r3, r2, [r1]
 800eb28:	61bb      	str	r3, [r7, #24]
   return(result);
 800eb2a:	69bb      	ldr	r3, [r7, #24]
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d1e5      	bne.n	800eafc <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800eb30:	2300      	movs	r3, #0
}
 800eb32:	4618      	mov	r0, r3
 800eb34:	3758      	adds	r7, #88	@ 0x58
 800eb36:	46bd      	mov	sp, r7
 800eb38:	bd80      	pop	{r7, pc}
 800eb3a:	bf00      	nop
 800eb3c:	0800ec97 	.word	0x0800ec97
 800eb40:	0800edcb 	.word	0x0800edcb
 800eb44:	0800ee11 	.word	0x0800ee11

0800eb48 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800eb48:	b480      	push	{r7}
 800eb4a:	b08f      	sub	sp, #60	@ 0x3c
 800eb4c:	af00      	add	r7, sp, #0
 800eb4e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb56:	6a3b      	ldr	r3, [r7, #32]
 800eb58:	e853 3f00 	ldrex	r3, [r3]
 800eb5c:	61fb      	str	r3, [r7, #28]
   return(result);
 800eb5e:	69fb      	ldr	r3, [r7, #28]
 800eb60:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800eb64:	637b      	str	r3, [r7, #52]	@ 0x34
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	461a      	mov	r2, r3
 800eb6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eb6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800eb70:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb72:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800eb74:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800eb76:	e841 2300 	strex	r3, r2, [r1]
 800eb7a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800eb7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d1e6      	bne.n	800eb50 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	3308      	adds	r3, #8
 800eb88:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb8a:	68fb      	ldr	r3, [r7, #12]
 800eb8c:	e853 3f00 	ldrex	r3, [r3]
 800eb90:	60bb      	str	r3, [r7, #8]
   return(result);
 800eb92:	68bb      	ldr	r3, [r7, #8]
 800eb94:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800eb98:	633b      	str	r3, [r7, #48]	@ 0x30
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	681b      	ldr	r3, [r3, #0]
 800eb9e:	3308      	adds	r3, #8
 800eba0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800eba2:	61ba      	str	r2, [r7, #24]
 800eba4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eba6:	6979      	ldr	r1, [r7, #20]
 800eba8:	69ba      	ldr	r2, [r7, #24]
 800ebaa:	e841 2300 	strex	r3, r2, [r1]
 800ebae:	613b      	str	r3, [r7, #16]
   return(result);
 800ebb0:	693b      	ldr	r3, [r7, #16]
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d1e5      	bne.n	800eb82 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	2220      	movs	r2, #32
 800ebba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800ebbe:	bf00      	nop
 800ebc0:	373c      	adds	r7, #60	@ 0x3c
 800ebc2:	46bd      	mov	sp, r7
 800ebc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebc8:	4770      	bx	lr

0800ebca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ebca:	b480      	push	{r7}
 800ebcc:	b095      	sub	sp, #84	@ 0x54
 800ebce:	af00      	add	r7, sp, #0
 800ebd0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ebda:	e853 3f00 	ldrex	r3, [r3]
 800ebde:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ebe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ebe2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ebe6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	461a      	mov	r2, r3
 800ebee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ebf0:	643b      	str	r3, [r7, #64]	@ 0x40
 800ebf2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ebf4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ebf6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ebf8:	e841 2300 	strex	r3, r2, [r1]
 800ebfc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ebfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d1e6      	bne.n	800ebd2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	3308      	adds	r3, #8
 800ec0a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec0c:	6a3b      	ldr	r3, [r7, #32]
 800ec0e:	e853 3f00 	ldrex	r3, [r3]
 800ec12:	61fb      	str	r3, [r7, #28]
   return(result);
 800ec14:	69fb      	ldr	r3, [r7, #28]
 800ec16:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ec1a:	f023 0301 	bic.w	r3, r3, #1
 800ec1e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	3308      	adds	r3, #8
 800ec26:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ec28:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ec2a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec2c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ec2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ec30:	e841 2300 	strex	r3, r2, [r1]
 800ec34:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ec36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d1e3      	bne.n	800ec04 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ec40:	2b01      	cmp	r3, #1
 800ec42:	d118      	bne.n	800ec76 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	e853 3f00 	ldrex	r3, [r3]
 800ec50:	60bb      	str	r3, [r7, #8]
   return(result);
 800ec52:	68bb      	ldr	r3, [r7, #8]
 800ec54:	f023 0310 	bic.w	r3, r3, #16
 800ec58:	647b      	str	r3, [r7, #68]	@ 0x44
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	461a      	mov	r2, r3
 800ec60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ec62:	61bb      	str	r3, [r7, #24]
 800ec64:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec66:	6979      	ldr	r1, [r7, #20]
 800ec68:	69ba      	ldr	r2, [r7, #24]
 800ec6a:	e841 2300 	strex	r3, r2, [r1]
 800ec6e:	613b      	str	r3, [r7, #16]
   return(result);
 800ec70:	693b      	ldr	r3, [r7, #16]
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d1e6      	bne.n	800ec44 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	2220      	movs	r2, #32
 800ec7a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	2200      	movs	r2, #0
 800ec82:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	2200      	movs	r2, #0
 800ec88:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800ec8a:	bf00      	nop
 800ec8c:	3754      	adds	r7, #84	@ 0x54
 800ec8e:	46bd      	mov	sp, r7
 800ec90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec94:	4770      	bx	lr

0800ec96 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ec96:	b580      	push	{r7, lr}
 800ec98:	b09c      	sub	sp, #112	@ 0x70
 800ec9a:	af00      	add	r7, sp, #0
 800ec9c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eca2:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	f003 0320 	and.w	r3, r3, #32
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d171      	bne.n	800ed96 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800ecb2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ecb4:	2200      	movs	r2, #0
 800ecb6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ecba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ecc0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ecc2:	e853 3f00 	ldrex	r3, [r3]
 800ecc6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ecc8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ecca:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ecce:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ecd0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	461a      	mov	r2, r3
 800ecd6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ecd8:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ecda:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ecdc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ecde:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ece0:	e841 2300 	strex	r3, r2, [r1]
 800ece4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ece6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d1e6      	bne.n	800ecba <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ecec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	3308      	adds	r3, #8
 800ecf2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ecf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ecf6:	e853 3f00 	ldrex	r3, [r3]
 800ecfa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ecfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ecfe:	f023 0301 	bic.w	r3, r3, #1
 800ed02:	667b      	str	r3, [r7, #100]	@ 0x64
 800ed04:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	3308      	adds	r3, #8
 800ed0a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800ed0c:	647a      	str	r2, [r7, #68]	@ 0x44
 800ed0e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed10:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ed12:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ed14:	e841 2300 	strex	r3, r2, [r1]
 800ed18:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ed1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d1e5      	bne.n	800ecec <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ed20:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	3308      	adds	r3, #8
 800ed26:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed2a:	e853 3f00 	ldrex	r3, [r3]
 800ed2e:	623b      	str	r3, [r7, #32]
   return(result);
 800ed30:	6a3b      	ldr	r3, [r7, #32]
 800ed32:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ed36:	663b      	str	r3, [r7, #96]	@ 0x60
 800ed38:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	3308      	adds	r3, #8
 800ed3e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ed40:	633a      	str	r2, [r7, #48]	@ 0x30
 800ed42:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed44:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ed46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ed48:	e841 2300 	strex	r3, r2, [r1]
 800ed4c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ed4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d1e5      	bne.n	800ed20 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ed54:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ed56:	2220      	movs	r2, #32
 800ed58:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ed5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ed5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ed60:	2b01      	cmp	r3, #1
 800ed62:	d118      	bne.n	800ed96 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ed64:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed6a:	693b      	ldr	r3, [r7, #16]
 800ed6c:	e853 3f00 	ldrex	r3, [r3]
 800ed70:	60fb      	str	r3, [r7, #12]
   return(result);
 800ed72:	68fb      	ldr	r3, [r7, #12]
 800ed74:	f023 0310 	bic.w	r3, r3, #16
 800ed78:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ed7a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ed7c:	681b      	ldr	r3, [r3, #0]
 800ed7e:	461a      	mov	r2, r3
 800ed80:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ed82:	61fb      	str	r3, [r7, #28]
 800ed84:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed86:	69b9      	ldr	r1, [r7, #24]
 800ed88:	69fa      	ldr	r2, [r7, #28]
 800ed8a:	e841 2300 	strex	r3, r2, [r1]
 800ed8e:	617b      	str	r3, [r7, #20]
   return(result);
 800ed90:	697b      	ldr	r3, [r7, #20]
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d1e6      	bne.n	800ed64 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ed96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ed98:	2200      	movs	r2, #0
 800ed9a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ed9c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ed9e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800eda0:	2b01      	cmp	r3, #1
 800eda2:	d109      	bne.n	800edb8 <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800eda4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800eda6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800edaa:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800edac:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800edb0:	4611      	mov	r1, r2
 800edb2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800edb4:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800edb6:	e004      	b.n	800edc2 <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 800edb8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800edba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800edbe:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800edc0:	4798      	blx	r3
}
 800edc2:	bf00      	nop
 800edc4:	3770      	adds	r7, #112	@ 0x70
 800edc6:	46bd      	mov	sp, r7
 800edc8:	bd80      	pop	{r7, pc}

0800edca <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800edca:	b580      	push	{r7, lr}
 800edcc:	b084      	sub	sp, #16
 800edce:	af00      	add	r7, sp, #0
 800edd0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800edd6:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	2201      	movs	r2, #1
 800eddc:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800edde:	68fb      	ldr	r3, [r7, #12]
 800ede0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ede2:	2b01      	cmp	r3, #1
 800ede4:	d10b      	bne.n	800edfe <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800ede6:	68fb      	ldr	r3, [r7, #12]
 800ede8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800edec:	68fa      	ldr	r2, [r7, #12]
 800edee:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800edf2:	0852      	lsrs	r2, r2, #1
 800edf4:	b292      	uxth	r2, r2
 800edf6:	4611      	mov	r1, r2
 800edf8:	68f8      	ldr	r0, [r7, #12]
 800edfa:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800edfc:	e004      	b.n	800ee08 <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ee04:	68f8      	ldr	r0, [r7, #12]
 800ee06:	4798      	blx	r3
}
 800ee08:	bf00      	nop
 800ee0a:	3710      	adds	r7, #16
 800ee0c:	46bd      	mov	sp, r7
 800ee0e:	bd80      	pop	{r7, pc}

0800ee10 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ee10:	b580      	push	{r7, lr}
 800ee12:	b086      	sub	sp, #24
 800ee14:	af00      	add	r7, sp, #0
 800ee16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ee1c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800ee1e:	697b      	ldr	r3, [r7, #20]
 800ee20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ee24:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800ee26:	697b      	ldr	r3, [r7, #20]
 800ee28:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ee2c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800ee2e:	697b      	ldr	r3, [r7, #20]
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	689b      	ldr	r3, [r3, #8]
 800ee34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ee38:	2b80      	cmp	r3, #128	@ 0x80
 800ee3a:	d109      	bne.n	800ee50 <UART_DMAError+0x40>
 800ee3c:	693b      	ldr	r3, [r7, #16]
 800ee3e:	2b21      	cmp	r3, #33	@ 0x21
 800ee40:	d106      	bne.n	800ee50 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800ee42:	697b      	ldr	r3, [r7, #20]
 800ee44:	2200      	movs	r2, #0
 800ee46:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800ee4a:	6978      	ldr	r0, [r7, #20]
 800ee4c:	f7ff fe7c 	bl	800eb48 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800ee50:	697b      	ldr	r3, [r7, #20]
 800ee52:	681b      	ldr	r3, [r3, #0]
 800ee54:	689b      	ldr	r3, [r3, #8]
 800ee56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ee5a:	2b40      	cmp	r3, #64	@ 0x40
 800ee5c:	d109      	bne.n	800ee72 <UART_DMAError+0x62>
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	2b22      	cmp	r3, #34	@ 0x22
 800ee62:	d106      	bne.n	800ee72 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800ee64:	697b      	ldr	r3, [r7, #20]
 800ee66:	2200      	movs	r2, #0
 800ee68:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800ee6c:	6978      	ldr	r0, [r7, #20]
 800ee6e:	f7ff feac 	bl	800ebca <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ee72:	697b      	ldr	r3, [r7, #20]
 800ee74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ee78:	f043 0210 	orr.w	r2, r3, #16
 800ee7c:	697b      	ldr	r3, [r7, #20]
 800ee7e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800ee82:	697b      	ldr	r3, [r7, #20]
 800ee84:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800ee88:	6978      	ldr	r0, [r7, #20]
 800ee8a:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ee8c:	bf00      	nop
 800ee8e:	3718      	adds	r7, #24
 800ee90:	46bd      	mov	sp, r7
 800ee92:	bd80      	pop	{r7, pc}

0800ee94 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ee94:	b580      	push	{r7, lr}
 800ee96:	b084      	sub	sp, #16
 800ee98:	af00      	add	r7, sp, #0
 800ee9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eea0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	2200      	movs	r2, #0
 800eea6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800eeb0:	68f8      	ldr	r0, [r7, #12]
 800eeb2:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800eeb4:	bf00      	nop
 800eeb6:	3710      	adds	r7, #16
 800eeb8:	46bd      	mov	sp, r7
 800eeba:	bd80      	pop	{r7, pc}

0800eebc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800eebc:	b580      	push	{r7, lr}
 800eebe:	b088      	sub	sp, #32
 800eec0:	af00      	add	r7, sp, #0
 800eec2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eeca:	68fb      	ldr	r3, [r7, #12]
 800eecc:	e853 3f00 	ldrex	r3, [r3]
 800eed0:	60bb      	str	r3, [r7, #8]
   return(result);
 800eed2:	68bb      	ldr	r3, [r7, #8]
 800eed4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800eed8:	61fb      	str	r3, [r7, #28]
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	681b      	ldr	r3, [r3, #0]
 800eede:	461a      	mov	r2, r3
 800eee0:	69fb      	ldr	r3, [r7, #28]
 800eee2:	61bb      	str	r3, [r7, #24]
 800eee4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eee6:	6979      	ldr	r1, [r7, #20]
 800eee8:	69ba      	ldr	r2, [r7, #24]
 800eeea:	e841 2300 	strex	r3, r2, [r1]
 800eeee:	613b      	str	r3, [r7, #16]
   return(result);
 800eef0:	693b      	ldr	r3, [r7, #16]
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d1e6      	bne.n	800eec4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	2220      	movs	r2, #32
 800eefa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	2200      	movs	r2, #0
 800ef02:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800ef0a:	6878      	ldr	r0, [r7, #4]
 800ef0c:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ef0e:	bf00      	nop
 800ef10:	3720      	adds	r7, #32
 800ef12:	46bd      	mov	sp, r7
 800ef14:	bd80      	pop	{r7, pc}

0800ef16 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ef16:	b480      	push	{r7}
 800ef18:	b083      	sub	sp, #12
 800ef1a:	af00      	add	r7, sp, #0
 800ef1c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ef1e:	bf00      	nop
 800ef20:	370c      	adds	r7, #12
 800ef22:	46bd      	mov	sp, r7
 800ef24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef28:	4770      	bx	lr

0800ef2a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ef2a:	b480      	push	{r7}
 800ef2c:	b083      	sub	sp, #12
 800ef2e:	af00      	add	r7, sp, #0
 800ef30:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ef32:	bf00      	nop
 800ef34:	370c      	adds	r7, #12
 800ef36:	46bd      	mov	sp, r7
 800ef38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef3c:	4770      	bx	lr

0800ef3e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ef3e:	b480      	push	{r7}
 800ef40:	b083      	sub	sp, #12
 800ef42:	af00      	add	r7, sp, #0
 800ef44:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ef46:	bf00      	nop
 800ef48:	370c      	adds	r7, #12
 800ef4a:	46bd      	mov	sp, r7
 800ef4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef50:	4770      	bx	lr

0800ef52 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ef52:	b480      	push	{r7}
 800ef54:	b085      	sub	sp, #20
 800ef56:	af00      	add	r7, sp, #0
 800ef58:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ef60:	2b01      	cmp	r3, #1
 800ef62:	d101      	bne.n	800ef68 <HAL_UARTEx_DisableFifoMode+0x16>
 800ef64:	2302      	movs	r3, #2
 800ef66:	e027      	b.n	800efb8 <HAL_UARTEx_DisableFifoMode+0x66>
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	2201      	movs	r2, #1
 800ef6c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	2224      	movs	r2, #36	@ 0x24
 800ef74:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	681a      	ldr	r2, [r3, #0]
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	f022 0201 	bic.w	r2, r2, #1
 800ef8e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800ef96:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	2200      	movs	r2, #0
 800ef9c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	68fa      	ldr	r2, [r7, #12]
 800efa4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	2220      	movs	r2, #32
 800efaa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	2200      	movs	r2, #0
 800efb2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800efb6:	2300      	movs	r3, #0
}
 800efb8:	4618      	mov	r0, r3
 800efba:	3714      	adds	r7, #20
 800efbc:	46bd      	mov	sp, r7
 800efbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efc2:	4770      	bx	lr

0800efc4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800efc4:	b580      	push	{r7, lr}
 800efc6:	b084      	sub	sp, #16
 800efc8:	af00      	add	r7, sp, #0
 800efca:	6078      	str	r0, [r7, #4]
 800efcc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800efd4:	2b01      	cmp	r3, #1
 800efd6:	d101      	bne.n	800efdc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800efd8:	2302      	movs	r3, #2
 800efda:	e02d      	b.n	800f038 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	2201      	movs	r2, #1
 800efe0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	2224      	movs	r2, #36	@ 0x24
 800efe8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	681a      	ldr	r2, [r3, #0]
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	681b      	ldr	r3, [r3, #0]
 800effe:	f022 0201 	bic.w	r2, r2, #1
 800f002:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	689b      	ldr	r3, [r3, #8]
 800f00a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	681b      	ldr	r3, [r3, #0]
 800f012:	683a      	ldr	r2, [r7, #0]
 800f014:	430a      	orrs	r2, r1
 800f016:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f018:	6878      	ldr	r0, [r7, #4]
 800f01a:	f000 f84f 	bl	800f0bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	68fa      	ldr	r2, [r7, #12]
 800f024:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	2220      	movs	r2, #32
 800f02a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	2200      	movs	r2, #0
 800f032:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f036:	2300      	movs	r3, #0
}
 800f038:	4618      	mov	r0, r3
 800f03a:	3710      	adds	r7, #16
 800f03c:	46bd      	mov	sp, r7
 800f03e:	bd80      	pop	{r7, pc}

0800f040 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f040:	b580      	push	{r7, lr}
 800f042:	b084      	sub	sp, #16
 800f044:	af00      	add	r7, sp, #0
 800f046:	6078      	str	r0, [r7, #4]
 800f048:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f050:	2b01      	cmp	r3, #1
 800f052:	d101      	bne.n	800f058 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f054:	2302      	movs	r3, #2
 800f056:	e02d      	b.n	800f0b4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	2201      	movs	r2, #1
 800f05c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	2224      	movs	r2, #36	@ 0x24
 800f064:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	681b      	ldr	r3, [r3, #0]
 800f074:	681a      	ldr	r2, [r3, #0]
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	f022 0201 	bic.w	r2, r2, #1
 800f07e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	689b      	ldr	r3, [r3, #8]
 800f086:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	681b      	ldr	r3, [r3, #0]
 800f08e:	683a      	ldr	r2, [r7, #0]
 800f090:	430a      	orrs	r2, r1
 800f092:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f094:	6878      	ldr	r0, [r7, #4]
 800f096:	f000 f811 	bl	800f0bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	68fa      	ldr	r2, [r7, #12]
 800f0a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	2220      	movs	r2, #32
 800f0a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	2200      	movs	r2, #0
 800f0ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f0b2:	2300      	movs	r3, #0
}
 800f0b4:	4618      	mov	r0, r3
 800f0b6:	3710      	adds	r7, #16
 800f0b8:	46bd      	mov	sp, r7
 800f0ba:	bd80      	pop	{r7, pc}

0800f0bc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f0bc:	b480      	push	{r7}
 800f0be:	b085      	sub	sp, #20
 800f0c0:	af00      	add	r7, sp, #0
 800f0c2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d108      	bne.n	800f0de <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	2201      	movs	r2, #1
 800f0d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	2201      	movs	r2, #1
 800f0d8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f0dc:	e031      	b.n	800f142 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f0de:	2308      	movs	r3, #8
 800f0e0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f0e2:	2308      	movs	r3, #8
 800f0e4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	681b      	ldr	r3, [r3, #0]
 800f0ea:	689b      	ldr	r3, [r3, #8]
 800f0ec:	0e5b      	lsrs	r3, r3, #25
 800f0ee:	b2db      	uxtb	r3, r3
 800f0f0:	f003 0307 	and.w	r3, r3, #7
 800f0f4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	689b      	ldr	r3, [r3, #8]
 800f0fc:	0f5b      	lsrs	r3, r3, #29
 800f0fe:	b2db      	uxtb	r3, r3
 800f100:	f003 0307 	and.w	r3, r3, #7
 800f104:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f106:	7bbb      	ldrb	r3, [r7, #14]
 800f108:	7b3a      	ldrb	r2, [r7, #12]
 800f10a:	4911      	ldr	r1, [pc, #68]	@ (800f150 <UARTEx_SetNbDataToProcess+0x94>)
 800f10c:	5c8a      	ldrb	r2, [r1, r2]
 800f10e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800f112:	7b3a      	ldrb	r2, [r7, #12]
 800f114:	490f      	ldr	r1, [pc, #60]	@ (800f154 <UARTEx_SetNbDataToProcess+0x98>)
 800f116:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f118:	fb93 f3f2 	sdiv	r3, r3, r2
 800f11c:	b29a      	uxth	r2, r3
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f124:	7bfb      	ldrb	r3, [r7, #15]
 800f126:	7b7a      	ldrb	r2, [r7, #13]
 800f128:	4909      	ldr	r1, [pc, #36]	@ (800f150 <UARTEx_SetNbDataToProcess+0x94>)
 800f12a:	5c8a      	ldrb	r2, [r1, r2]
 800f12c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800f130:	7b7a      	ldrb	r2, [r7, #13]
 800f132:	4908      	ldr	r1, [pc, #32]	@ (800f154 <UARTEx_SetNbDataToProcess+0x98>)
 800f134:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f136:	fb93 f3f2 	sdiv	r3, r3, r2
 800f13a:	b29a      	uxth	r2, r3
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800f142:	bf00      	nop
 800f144:	3714      	adds	r7, #20
 800f146:	46bd      	mov	sp, r7
 800f148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f14c:	4770      	bx	lr
 800f14e:	bf00      	nop
 800f150:	080113e8 	.word	0x080113e8
 800f154:	080113f0 	.word	0x080113f0

0800f158 <arm_mat_add_f32>:
#else
arm_status arm_mat_add_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800f158:	b480      	push	{r7}
 800f15a:	b08b      	sub	sp, #44	@ 0x2c
 800f15c:	af00      	add	r7, sp, #0
 800f15e:	60f8      	str	r0, [r7, #12]
 800f160:	60b9      	str	r1, [r7, #8]
 800f162:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 800f164:	68fb      	ldr	r3, [r7, #12]
 800f166:	685b      	ldr	r3, [r3, #4]
 800f168:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 800f16a:	68bb      	ldr	r3, [r7, #8]
 800f16c:	685b      	ldr	r3, [r3, #4]
 800f16e:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	685b      	ldr	r3, [r3, #4]
 800f174:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 800f176:	68fb      	ldr	r3, [r7, #12]
 800f178:	881b      	ldrh	r3, [r3, #0]
 800f17a:	461a      	mov	r2, r3
 800f17c:	68fb      	ldr	r3, [r7, #12]
 800f17e:	885b      	ldrh	r3, [r3, #2]
 800f180:	fb02 f303 	mul.w	r3, r2, r3
 800f184:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800f186:	697b      	ldr	r3, [r7, #20]
 800f188:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800f18a:	e013      	b.n	800f1b4 <arm_mat_add_f32+0x5c>
    {
      /* C(m,n) = A(m,n) + B(m,n) */

      /* Add and store result in destination buffer. */
      *pOut++ = *pInA++ + *pInB++;
 800f18c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f18e:	1d1a      	adds	r2, r3, #4
 800f190:	627a      	str	r2, [r7, #36]	@ 0x24
 800f192:	ed93 7a00 	vldr	s14, [r3]
 800f196:	6a3b      	ldr	r3, [r7, #32]
 800f198:	1d1a      	adds	r2, r3, #4
 800f19a:	623a      	str	r2, [r7, #32]
 800f19c:	edd3 7a00 	vldr	s15, [r3]
 800f1a0:	69fb      	ldr	r3, [r7, #28]
 800f1a2:	1d1a      	adds	r2, r3, #4
 800f1a4:	61fa      	str	r2, [r7, #28]
 800f1a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f1aa:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800f1ae:	69bb      	ldr	r3, [r7, #24]
 800f1b0:	3b01      	subs	r3, #1
 800f1b2:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 800f1b4:	69bb      	ldr	r3, [r7, #24]
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d1e8      	bne.n	800f18c <arm_mat_add_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800f1ba:	2300      	movs	r3, #0
 800f1bc:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 800f1be:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800f1c2:	4618      	mov	r0, r3
 800f1c4:	372c      	adds	r7, #44	@ 0x2c
 800f1c6:	46bd      	mov	sp, r7
 800f1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1cc:	4770      	bx	lr

0800f1ce <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 800f1ce:	b480      	push	{r7}
 800f1d0:	b085      	sub	sp, #20
 800f1d2:	af00      	add	r7, sp, #0
 800f1d4:	60f8      	str	r0, [r7, #12]
 800f1d6:	607b      	str	r3, [r7, #4]
 800f1d8:	460b      	mov	r3, r1
 800f1da:	817b      	strh	r3, [r7, #10]
 800f1dc:	4613      	mov	r3, r2
 800f1de:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 800f1e0:	68fb      	ldr	r3, [r7, #12]
 800f1e2:	897a      	ldrh	r2, [r7, #10]
 800f1e4:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 800f1e6:	68fb      	ldr	r3, [r7, #12]
 800f1e8:	893a      	ldrh	r2, [r7, #8]
 800f1ea:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 800f1ec:	68fb      	ldr	r3, [r7, #12]
 800f1ee:	687a      	ldr	r2, [r7, #4]
 800f1f0:	605a      	str	r2, [r3, #4]
}
 800f1f2:	bf00      	nop
 800f1f4:	3714      	adds	r7, #20
 800f1f6:	46bd      	mov	sp, r7
 800f1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1fc:	4770      	bx	lr

0800f1fe <arm_mat_mult_f32>:
 */
arm_status arm_mat_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800f1fe:	b480      	push	{r7}
 800f200:	b093      	sub	sp, #76	@ 0x4c
 800f202:	af00      	add	r7, sp, #0
 800f204:	60f8      	str	r0, [r7, #12]
 800f206:	60b9      	str	r1, [r7, #8]
 800f208:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* Input data matrix pointer A */
 800f20a:	68fb      	ldr	r3, [r7, #12]
 800f20c:	685b      	ldr	r3, [r3, #4]
 800f20e:	647b      	str	r3, [r7, #68]	@ 0x44
  float32_t *pIn2 = pSrcB->pData;                /* Input data matrix pointer B */
 800f210:	68bb      	ldr	r3, [r7, #8]
 800f212:	685b      	ldr	r3, [r3, #4]
 800f214:	643b      	str	r3, [r7, #64]	@ 0x40
  float32_t *pInA = pSrcA->pData;                /* Input data matrix pointer A */
 800f216:	68fb      	ldr	r3, [r7, #12]
 800f218:	685b      	ldr	r3, [r3, #4]
 800f21a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  float32_t *pInB = pSrcB->pData;                /* Input data matrix pointer B */
 800f21c:	68bb      	ldr	r3, [r7, #8]
 800f21e:	685b      	ldr	r3, [r3, #4]
 800f220:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	685b      	ldr	r3, [r3, #4]
 800f226:	61fb      	str	r3, [r7, #28]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  float32_t sum;                                 /* Accumulator */
  uint16_t numRowsA = pSrcA->numRows;            /* Number of rows of input matrix A */
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	881b      	ldrh	r3, [r3, #0]
 800f22c:	837b      	strh	r3, [r7, #26]
  uint16_t numColsB = pSrcB->numCols;            /* Number of columns of input matrix B */
 800f22e:	68bb      	ldr	r3, [r7, #8]
 800f230:	885b      	ldrh	r3, [r3, #2]
 800f232:	833b      	strh	r3, [r7, #24]
  uint16_t numColsA = pSrcA->numCols;            /* Number of columns of input matrix A */
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	885b      	ldrh	r3, [r3, #2]
 800f238:	82fb      	strh	r3, [r7, #22]
  uint32_t col, i = 0U, row = numRowsA, colCnt;  /* Loop counters */
 800f23a:	2300      	movs	r3, #0
 800f23c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f23e:	8b7b      	ldrh	r3, [r7, #26]
 800f240:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB */
    /* row loop */
    do
    {
      /* Output pointer is set to starting address of row being processed */
      px = pOut + i;
 800f242:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f244:	009b      	lsls	r3, r3, #2
 800f246:	69fa      	ldr	r2, [r7, #28]
 800f248:	4413      	add	r3, r2
 800f24a:	63bb      	str	r3, [r7, #56]	@ 0x38

      /* For every row wise process, column loop counter is to be initiated */
      col = numColsB;
 800f24c:	8b3b      	ldrh	r3, [r7, #24]
 800f24e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* For every row wise process, pIn2 pointer is set to starting address of pSrcB data */
      pIn2 = pSrcB->pData;
 800f250:	68bb      	ldr	r3, [r7, #8]
 800f252:	685b      	ldr	r3, [r3, #4]
 800f254:	643b      	str	r3, [r7, #64]	@ 0x40

      /* column loop */
      do
      {
        /* Set the variable sum, that acts as accumulator, to zero */
        sum = 0.0f;
 800f256:	f04f 0300 	mov.w	r3, #0
 800f25a:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Initialize pointer pIn1 to point to starting address of column being processed */
        pIn1 = pInA;
 800f25c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f25e:	647b      	str	r3, [r7, #68]	@ 0x44
        colCnt = numColsA % 0x4U;

#else

        /* Initialize cntCnt with number of columns */
        colCnt = numColsA;
 800f260:	8afb      	ldrh	r3, [r7, #22]
 800f262:	627b      	str	r3, [r7, #36]	@ 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

        while (colCnt > 0U)
 800f264:	e017      	b.n	800f296 <arm_mat_mult_f32+0x98>
        {
          /* c(m,p) = a(m,1) * b(1,p) + a(m,2) * b(2,p) + .... + a(m,n) * b(n,p) */

          /* Perform the multiply-accumulates */
          sum += *pIn1++ * *pIn2;
 800f266:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f268:	1d1a      	adds	r2, r3, #4
 800f26a:	647a      	str	r2, [r7, #68]	@ 0x44
 800f26c:	ed93 7a00 	vldr	s14, [r3]
 800f270:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f272:	edd3 7a00 	vldr	s15, [r3]
 800f276:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f27a:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800f27e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f282:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
          pIn2 += numColsB;
 800f286:	8b3b      	ldrh	r3, [r7, #24]
 800f288:	009b      	lsls	r3, r3, #2
 800f28a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f28c:	4413      	add	r3, r2
 800f28e:	643b      	str	r3, [r7, #64]	@ 0x40

          /* Decrement loop counter */
          colCnt--;
 800f290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f292:	3b01      	subs	r3, #1
 800f294:	627b      	str	r3, [r7, #36]	@ 0x24
        while (colCnt > 0U)
 800f296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d1e4      	bne.n	800f266 <arm_mat_mult_f32+0x68>
        }

        /* Store result in destination buffer */
        *px++ = sum;
 800f29c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f29e:	1d1a      	adds	r2, r3, #4
 800f2a0:	63ba      	str	r2, [r7, #56]	@ 0x38
 800f2a2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f2a4:	601a      	str	r2, [r3, #0]

        /* Decrement column loop counter */
        col--;
 800f2a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f2a8:	3b01      	subs	r3, #1
 800f2aa:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Update pointer pIn2 to point to starting address of next column */
        pIn2 = pInB + (numColsB - col);
 800f2ac:	8b3a      	ldrh	r2, [r7, #24]
 800f2ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f2b0:	1ad3      	subs	r3, r2, r3
 800f2b2:	009b      	lsls	r3, r3, #2
 800f2b4:	6a3a      	ldr	r2, [r7, #32]
 800f2b6:	4413      	add	r3, r2
 800f2b8:	643b      	str	r3, [r7, #64]	@ 0x40

      } while (col > 0U);
 800f2ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d1ca      	bne.n	800f256 <arm_mat_mult_f32+0x58>

      /* Update pointer pInA to point to starting address of next row */
      i = i + numColsB;
 800f2c0:	8b3b      	ldrh	r3, [r7, #24]
 800f2c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f2c4:	4413      	add	r3, r2
 800f2c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pInA = pInA + numColsA;
 800f2c8:	8afb      	ldrh	r3, [r7, #22]
 800f2ca:	009b      	lsls	r3, r3, #2
 800f2cc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800f2ce:	4413      	add	r3, r2
 800f2d0:	63fb      	str	r3, [r7, #60]	@ 0x3c

      /* Decrement row loop counter */
      row--;
 800f2d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f2d4:	3b01      	subs	r3, #1
 800f2d6:	62bb      	str	r3, [r7, #40]	@ 0x28

    } while (row > 0U);
 800f2d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d1b1      	bne.n	800f242 <arm_mat_mult_f32+0x44>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800f2de:	2300      	movs	r3, #0
 800f2e0:	757b      	strb	r3, [r7, #21]
  }

  /* Return to application */
  return (status);
 800f2e2:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 800f2e6:	4618      	mov	r0, r3
 800f2e8:	374c      	adds	r7, #76	@ 0x4c
 800f2ea:	46bd      	mov	sp, r7
 800f2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2f0:	4770      	bx	lr

0800f2f2 <arm_mat_scale_f32>:
#else
arm_status arm_mat_scale_f32(
  const arm_matrix_instance_f32 * pSrc,
        float32_t                 scale,
        arm_matrix_instance_f32 * pDst)
{
 800f2f2:	b480      	push	{r7}
 800f2f4:	b08b      	sub	sp, #44	@ 0x2c
 800f2f6:	af00      	add	r7, sp, #0
 800f2f8:	60f8      	str	r0, [r7, #12]
 800f2fa:	ed87 0a02 	vstr	s0, [r7, #8]
 800f2fe:	6079      	str	r1, [r7, #4]
  float32_t *pIn = pSrc->pData;                  /* Input data matrix pointer */
 800f300:	68fb      	ldr	r3, [r7, #12]
 800f302:	685b      	ldr	r3, [r3, #4]
 800f304:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	685b      	ldr	r3, [r3, #4]
 800f30a:	623b      	str	r3, [r7, #32]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
 800f30c:	68fb      	ldr	r3, [r7, #12]
 800f30e:	881b      	ldrh	r3, [r3, #0]
 800f310:	461a      	mov	r2, r3
 800f312:	68fb      	ldr	r3, [r7, #12]
 800f314:	885b      	ldrh	r3, [r3, #2]
 800f316:	fb02 f303 	mul.w	r3, r2, r3
 800f31a:	61bb      	str	r3, [r7, #24]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800f31c:	69bb      	ldr	r3, [r7, #24]
 800f31e:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800f320:	e010      	b.n	800f344 <arm_mat_scale_f32+0x52>
    {
      /* C(m,n) = A(m,n) * scale */

      /* Scale and store result in destination buffer. */
      *pOut++ = (*pIn++) * scale;
 800f322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f324:	1d1a      	adds	r2, r3, #4
 800f326:	627a      	str	r2, [r7, #36]	@ 0x24
 800f328:	ed93 7a00 	vldr	s14, [r3]
 800f32c:	6a3b      	ldr	r3, [r7, #32]
 800f32e:	1d1a      	adds	r2, r3, #4
 800f330:	623a      	str	r2, [r7, #32]
 800f332:	edd7 7a02 	vldr	s15, [r7, #8]
 800f336:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f33a:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800f33e:	69fb      	ldr	r3, [r7, #28]
 800f340:	3b01      	subs	r3, #1
 800f342:	61fb      	str	r3, [r7, #28]
    while (blkCnt > 0U)
 800f344:	69fb      	ldr	r3, [r7, #28]
 800f346:	2b00      	cmp	r3, #0
 800f348:	d1eb      	bne.n	800f322 <arm_mat_scale_f32+0x30>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800f34a:	2300      	movs	r3, #0
 800f34c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return to application */
  return (status);
 800f34e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f352:	4618      	mov	r0, r3
 800f354:	372c      	adds	r7, #44	@ 0x2c
 800f356:	46bd      	mov	sp, r7
 800f358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f35c:	4770      	bx	lr
	...

0800f360 <malloc>:
 800f360:	4b02      	ldr	r3, [pc, #8]	@ (800f36c <malloc+0xc>)
 800f362:	4601      	mov	r1, r0
 800f364:	6818      	ldr	r0, [r3, #0]
 800f366:	f000 b825 	b.w	800f3b4 <_malloc_r>
 800f36a:	bf00      	nop
 800f36c:	20000108 	.word	0x20000108

0800f370 <sbrk_aligned>:
 800f370:	b570      	push	{r4, r5, r6, lr}
 800f372:	4e0f      	ldr	r6, [pc, #60]	@ (800f3b0 <sbrk_aligned+0x40>)
 800f374:	460c      	mov	r4, r1
 800f376:	6831      	ldr	r1, [r6, #0]
 800f378:	4605      	mov	r5, r0
 800f37a:	b911      	cbnz	r1, 800f382 <sbrk_aligned+0x12>
 800f37c:	f000 f8ae 	bl	800f4dc <_sbrk_r>
 800f380:	6030      	str	r0, [r6, #0]
 800f382:	4621      	mov	r1, r4
 800f384:	4628      	mov	r0, r5
 800f386:	f000 f8a9 	bl	800f4dc <_sbrk_r>
 800f38a:	1c43      	adds	r3, r0, #1
 800f38c:	d103      	bne.n	800f396 <sbrk_aligned+0x26>
 800f38e:	f04f 34ff 	mov.w	r4, #4294967295
 800f392:	4620      	mov	r0, r4
 800f394:	bd70      	pop	{r4, r5, r6, pc}
 800f396:	1cc4      	adds	r4, r0, #3
 800f398:	f024 0403 	bic.w	r4, r4, #3
 800f39c:	42a0      	cmp	r0, r4
 800f39e:	d0f8      	beq.n	800f392 <sbrk_aligned+0x22>
 800f3a0:	1a21      	subs	r1, r4, r0
 800f3a2:	4628      	mov	r0, r5
 800f3a4:	f000 f89a 	bl	800f4dc <_sbrk_r>
 800f3a8:	3001      	adds	r0, #1
 800f3aa:	d1f2      	bne.n	800f392 <sbrk_aligned+0x22>
 800f3ac:	e7ef      	b.n	800f38e <sbrk_aligned+0x1e>
 800f3ae:	bf00      	nop
 800f3b0:	20002128 	.word	0x20002128

0800f3b4 <_malloc_r>:
 800f3b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f3b8:	1ccd      	adds	r5, r1, #3
 800f3ba:	f025 0503 	bic.w	r5, r5, #3
 800f3be:	3508      	adds	r5, #8
 800f3c0:	2d0c      	cmp	r5, #12
 800f3c2:	bf38      	it	cc
 800f3c4:	250c      	movcc	r5, #12
 800f3c6:	2d00      	cmp	r5, #0
 800f3c8:	4606      	mov	r6, r0
 800f3ca:	db01      	blt.n	800f3d0 <_malloc_r+0x1c>
 800f3cc:	42a9      	cmp	r1, r5
 800f3ce:	d904      	bls.n	800f3da <_malloc_r+0x26>
 800f3d0:	230c      	movs	r3, #12
 800f3d2:	6033      	str	r3, [r6, #0]
 800f3d4:	2000      	movs	r0, #0
 800f3d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f3da:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f4b0 <_malloc_r+0xfc>
 800f3de:	f000 f869 	bl	800f4b4 <__malloc_lock>
 800f3e2:	f8d8 3000 	ldr.w	r3, [r8]
 800f3e6:	461c      	mov	r4, r3
 800f3e8:	bb44      	cbnz	r4, 800f43c <_malloc_r+0x88>
 800f3ea:	4629      	mov	r1, r5
 800f3ec:	4630      	mov	r0, r6
 800f3ee:	f7ff ffbf 	bl	800f370 <sbrk_aligned>
 800f3f2:	1c43      	adds	r3, r0, #1
 800f3f4:	4604      	mov	r4, r0
 800f3f6:	d158      	bne.n	800f4aa <_malloc_r+0xf6>
 800f3f8:	f8d8 4000 	ldr.w	r4, [r8]
 800f3fc:	4627      	mov	r7, r4
 800f3fe:	2f00      	cmp	r7, #0
 800f400:	d143      	bne.n	800f48a <_malloc_r+0xd6>
 800f402:	2c00      	cmp	r4, #0
 800f404:	d04b      	beq.n	800f49e <_malloc_r+0xea>
 800f406:	6823      	ldr	r3, [r4, #0]
 800f408:	4639      	mov	r1, r7
 800f40a:	4630      	mov	r0, r6
 800f40c:	eb04 0903 	add.w	r9, r4, r3
 800f410:	f000 f864 	bl	800f4dc <_sbrk_r>
 800f414:	4581      	cmp	r9, r0
 800f416:	d142      	bne.n	800f49e <_malloc_r+0xea>
 800f418:	6821      	ldr	r1, [r4, #0]
 800f41a:	1a6d      	subs	r5, r5, r1
 800f41c:	4629      	mov	r1, r5
 800f41e:	4630      	mov	r0, r6
 800f420:	f7ff ffa6 	bl	800f370 <sbrk_aligned>
 800f424:	3001      	adds	r0, #1
 800f426:	d03a      	beq.n	800f49e <_malloc_r+0xea>
 800f428:	6823      	ldr	r3, [r4, #0]
 800f42a:	442b      	add	r3, r5
 800f42c:	6023      	str	r3, [r4, #0]
 800f42e:	f8d8 3000 	ldr.w	r3, [r8]
 800f432:	685a      	ldr	r2, [r3, #4]
 800f434:	bb62      	cbnz	r2, 800f490 <_malloc_r+0xdc>
 800f436:	f8c8 7000 	str.w	r7, [r8]
 800f43a:	e00f      	b.n	800f45c <_malloc_r+0xa8>
 800f43c:	6822      	ldr	r2, [r4, #0]
 800f43e:	1b52      	subs	r2, r2, r5
 800f440:	d420      	bmi.n	800f484 <_malloc_r+0xd0>
 800f442:	2a0b      	cmp	r2, #11
 800f444:	d917      	bls.n	800f476 <_malloc_r+0xc2>
 800f446:	1961      	adds	r1, r4, r5
 800f448:	42a3      	cmp	r3, r4
 800f44a:	6025      	str	r5, [r4, #0]
 800f44c:	bf18      	it	ne
 800f44e:	6059      	strne	r1, [r3, #4]
 800f450:	6863      	ldr	r3, [r4, #4]
 800f452:	bf08      	it	eq
 800f454:	f8c8 1000 	streq.w	r1, [r8]
 800f458:	5162      	str	r2, [r4, r5]
 800f45a:	604b      	str	r3, [r1, #4]
 800f45c:	4630      	mov	r0, r6
 800f45e:	f000 f82f 	bl	800f4c0 <__malloc_unlock>
 800f462:	f104 000b 	add.w	r0, r4, #11
 800f466:	1d23      	adds	r3, r4, #4
 800f468:	f020 0007 	bic.w	r0, r0, #7
 800f46c:	1ac2      	subs	r2, r0, r3
 800f46e:	bf1c      	itt	ne
 800f470:	1a1b      	subne	r3, r3, r0
 800f472:	50a3      	strne	r3, [r4, r2]
 800f474:	e7af      	b.n	800f3d6 <_malloc_r+0x22>
 800f476:	6862      	ldr	r2, [r4, #4]
 800f478:	42a3      	cmp	r3, r4
 800f47a:	bf0c      	ite	eq
 800f47c:	f8c8 2000 	streq.w	r2, [r8]
 800f480:	605a      	strne	r2, [r3, #4]
 800f482:	e7eb      	b.n	800f45c <_malloc_r+0xa8>
 800f484:	4623      	mov	r3, r4
 800f486:	6864      	ldr	r4, [r4, #4]
 800f488:	e7ae      	b.n	800f3e8 <_malloc_r+0x34>
 800f48a:	463c      	mov	r4, r7
 800f48c:	687f      	ldr	r7, [r7, #4]
 800f48e:	e7b6      	b.n	800f3fe <_malloc_r+0x4a>
 800f490:	461a      	mov	r2, r3
 800f492:	685b      	ldr	r3, [r3, #4]
 800f494:	42a3      	cmp	r3, r4
 800f496:	d1fb      	bne.n	800f490 <_malloc_r+0xdc>
 800f498:	2300      	movs	r3, #0
 800f49a:	6053      	str	r3, [r2, #4]
 800f49c:	e7de      	b.n	800f45c <_malloc_r+0xa8>
 800f49e:	230c      	movs	r3, #12
 800f4a0:	6033      	str	r3, [r6, #0]
 800f4a2:	4630      	mov	r0, r6
 800f4a4:	f000 f80c 	bl	800f4c0 <__malloc_unlock>
 800f4a8:	e794      	b.n	800f3d4 <_malloc_r+0x20>
 800f4aa:	6005      	str	r5, [r0, #0]
 800f4ac:	e7d6      	b.n	800f45c <_malloc_r+0xa8>
 800f4ae:	bf00      	nop
 800f4b0:	2000212c 	.word	0x2000212c

0800f4b4 <__malloc_lock>:
 800f4b4:	4801      	ldr	r0, [pc, #4]	@ (800f4bc <__malloc_lock+0x8>)
 800f4b6:	f000 b84b 	b.w	800f550 <__retarget_lock_acquire_recursive>
 800f4ba:	bf00      	nop
 800f4bc:	2000226c 	.word	0x2000226c

0800f4c0 <__malloc_unlock>:
 800f4c0:	4801      	ldr	r0, [pc, #4]	@ (800f4c8 <__malloc_unlock+0x8>)
 800f4c2:	f000 b846 	b.w	800f552 <__retarget_lock_release_recursive>
 800f4c6:	bf00      	nop
 800f4c8:	2000226c 	.word	0x2000226c

0800f4cc <memset>:
 800f4cc:	4402      	add	r2, r0
 800f4ce:	4603      	mov	r3, r0
 800f4d0:	4293      	cmp	r3, r2
 800f4d2:	d100      	bne.n	800f4d6 <memset+0xa>
 800f4d4:	4770      	bx	lr
 800f4d6:	f803 1b01 	strb.w	r1, [r3], #1
 800f4da:	e7f9      	b.n	800f4d0 <memset+0x4>

0800f4dc <_sbrk_r>:
 800f4dc:	b538      	push	{r3, r4, r5, lr}
 800f4de:	4d06      	ldr	r5, [pc, #24]	@ (800f4f8 <_sbrk_r+0x1c>)
 800f4e0:	2300      	movs	r3, #0
 800f4e2:	4604      	mov	r4, r0
 800f4e4:	4608      	mov	r0, r1
 800f4e6:	602b      	str	r3, [r5, #0]
 800f4e8:	f7f7 fd3c 	bl	8006f64 <_sbrk>
 800f4ec:	1c43      	adds	r3, r0, #1
 800f4ee:	d102      	bne.n	800f4f6 <_sbrk_r+0x1a>
 800f4f0:	682b      	ldr	r3, [r5, #0]
 800f4f2:	b103      	cbz	r3, 800f4f6 <_sbrk_r+0x1a>
 800f4f4:	6023      	str	r3, [r4, #0]
 800f4f6:	bd38      	pop	{r3, r4, r5, pc}
 800f4f8:	20002268 	.word	0x20002268

0800f4fc <__errno>:
 800f4fc:	4b01      	ldr	r3, [pc, #4]	@ (800f504 <__errno+0x8>)
 800f4fe:	6818      	ldr	r0, [r3, #0]
 800f500:	4770      	bx	lr
 800f502:	bf00      	nop
 800f504:	20000108 	.word	0x20000108

0800f508 <__libc_init_array>:
 800f508:	b570      	push	{r4, r5, r6, lr}
 800f50a:	4d0d      	ldr	r5, [pc, #52]	@ (800f540 <__libc_init_array+0x38>)
 800f50c:	4c0d      	ldr	r4, [pc, #52]	@ (800f544 <__libc_init_array+0x3c>)
 800f50e:	1b64      	subs	r4, r4, r5
 800f510:	10a4      	asrs	r4, r4, #2
 800f512:	2600      	movs	r6, #0
 800f514:	42a6      	cmp	r6, r4
 800f516:	d109      	bne.n	800f52c <__libc_init_array+0x24>
 800f518:	4d0b      	ldr	r5, [pc, #44]	@ (800f548 <__libc_init_array+0x40>)
 800f51a:	4c0c      	ldr	r4, [pc, #48]	@ (800f54c <__libc_init_array+0x44>)
 800f51c:	f001 ff30 	bl	8011380 <_init>
 800f520:	1b64      	subs	r4, r4, r5
 800f522:	10a4      	asrs	r4, r4, #2
 800f524:	2600      	movs	r6, #0
 800f526:	42a6      	cmp	r6, r4
 800f528:	d105      	bne.n	800f536 <__libc_init_array+0x2e>
 800f52a:	bd70      	pop	{r4, r5, r6, pc}
 800f52c:	f855 3b04 	ldr.w	r3, [r5], #4
 800f530:	4798      	blx	r3
 800f532:	3601      	adds	r6, #1
 800f534:	e7ee      	b.n	800f514 <__libc_init_array+0xc>
 800f536:	f855 3b04 	ldr.w	r3, [r5], #4
 800f53a:	4798      	blx	r3
 800f53c:	3601      	adds	r6, #1
 800f53e:	e7f2      	b.n	800f526 <__libc_init_array+0x1e>
 800f540:	080119b0 	.word	0x080119b0
 800f544:	080119b0 	.word	0x080119b0
 800f548:	080119b0 	.word	0x080119b0
 800f54c:	080119b4 	.word	0x080119b4

0800f550 <__retarget_lock_acquire_recursive>:
 800f550:	4770      	bx	lr

0800f552 <__retarget_lock_release_recursive>:
 800f552:	4770      	bx	lr

0800f554 <memcpy>:
 800f554:	440a      	add	r2, r1
 800f556:	4291      	cmp	r1, r2
 800f558:	f100 33ff 	add.w	r3, r0, #4294967295
 800f55c:	d100      	bne.n	800f560 <memcpy+0xc>
 800f55e:	4770      	bx	lr
 800f560:	b510      	push	{r4, lr}
 800f562:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f566:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f56a:	4291      	cmp	r1, r2
 800f56c:	d1f9      	bne.n	800f562 <memcpy+0xe>
 800f56e:	bd10      	pop	{r4, pc}

0800f570 <cos>:
 800f570:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f572:	ec53 2b10 	vmov	r2, r3, d0
 800f576:	4826      	ldr	r0, [pc, #152]	@ (800f610 <cos+0xa0>)
 800f578:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800f57c:	4281      	cmp	r1, r0
 800f57e:	d806      	bhi.n	800f58e <cos+0x1e>
 800f580:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800f608 <cos+0x98>
 800f584:	b005      	add	sp, #20
 800f586:	f85d eb04 	ldr.w	lr, [sp], #4
 800f58a:	f000 b9bd 	b.w	800f908 <__kernel_cos>
 800f58e:	4821      	ldr	r0, [pc, #132]	@ (800f614 <cos+0xa4>)
 800f590:	4281      	cmp	r1, r0
 800f592:	d908      	bls.n	800f5a6 <cos+0x36>
 800f594:	4610      	mov	r0, r2
 800f596:	4619      	mov	r1, r3
 800f598:	f7f0 fe42 	bl	8000220 <__aeabi_dsub>
 800f59c:	ec41 0b10 	vmov	d0, r0, r1
 800f5a0:	b005      	add	sp, #20
 800f5a2:	f85d fb04 	ldr.w	pc, [sp], #4
 800f5a6:	4668      	mov	r0, sp
 800f5a8:	f000 fb32 	bl	800fc10 <__ieee754_rem_pio2>
 800f5ac:	f000 0003 	and.w	r0, r0, #3
 800f5b0:	2801      	cmp	r0, #1
 800f5b2:	d00b      	beq.n	800f5cc <cos+0x5c>
 800f5b4:	2802      	cmp	r0, #2
 800f5b6:	d015      	beq.n	800f5e4 <cos+0x74>
 800f5b8:	b9d8      	cbnz	r0, 800f5f2 <cos+0x82>
 800f5ba:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f5be:	ed9d 0b00 	vldr	d0, [sp]
 800f5c2:	f000 f9a1 	bl	800f908 <__kernel_cos>
 800f5c6:	ec51 0b10 	vmov	r0, r1, d0
 800f5ca:	e7e7      	b.n	800f59c <cos+0x2c>
 800f5cc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f5d0:	ed9d 0b00 	vldr	d0, [sp]
 800f5d4:	f000 fa60 	bl	800fa98 <__kernel_sin>
 800f5d8:	ec53 2b10 	vmov	r2, r3, d0
 800f5dc:	4610      	mov	r0, r2
 800f5de:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800f5e2:	e7db      	b.n	800f59c <cos+0x2c>
 800f5e4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f5e8:	ed9d 0b00 	vldr	d0, [sp]
 800f5ec:	f000 f98c 	bl	800f908 <__kernel_cos>
 800f5f0:	e7f2      	b.n	800f5d8 <cos+0x68>
 800f5f2:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f5f6:	ed9d 0b00 	vldr	d0, [sp]
 800f5fa:	2001      	movs	r0, #1
 800f5fc:	f000 fa4c 	bl	800fa98 <__kernel_sin>
 800f600:	e7e1      	b.n	800f5c6 <cos+0x56>
 800f602:	bf00      	nop
 800f604:	f3af 8000 	nop.w
	...
 800f610:	3fe921fb 	.word	0x3fe921fb
 800f614:	7fefffff 	.word	0x7fefffff

0800f618 <sin>:
 800f618:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f61a:	ec53 2b10 	vmov	r2, r3, d0
 800f61e:	4826      	ldr	r0, [pc, #152]	@ (800f6b8 <sin+0xa0>)
 800f620:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800f624:	4281      	cmp	r1, r0
 800f626:	d807      	bhi.n	800f638 <sin+0x20>
 800f628:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800f6b0 <sin+0x98>
 800f62c:	2000      	movs	r0, #0
 800f62e:	b005      	add	sp, #20
 800f630:	f85d eb04 	ldr.w	lr, [sp], #4
 800f634:	f000 ba30 	b.w	800fa98 <__kernel_sin>
 800f638:	4820      	ldr	r0, [pc, #128]	@ (800f6bc <sin+0xa4>)
 800f63a:	4281      	cmp	r1, r0
 800f63c:	d908      	bls.n	800f650 <sin+0x38>
 800f63e:	4610      	mov	r0, r2
 800f640:	4619      	mov	r1, r3
 800f642:	f7f0 fded 	bl	8000220 <__aeabi_dsub>
 800f646:	ec41 0b10 	vmov	d0, r0, r1
 800f64a:	b005      	add	sp, #20
 800f64c:	f85d fb04 	ldr.w	pc, [sp], #4
 800f650:	4668      	mov	r0, sp
 800f652:	f000 fadd 	bl	800fc10 <__ieee754_rem_pio2>
 800f656:	f000 0003 	and.w	r0, r0, #3
 800f65a:	2801      	cmp	r0, #1
 800f65c:	d00c      	beq.n	800f678 <sin+0x60>
 800f65e:	2802      	cmp	r0, #2
 800f660:	d011      	beq.n	800f686 <sin+0x6e>
 800f662:	b9e8      	cbnz	r0, 800f6a0 <sin+0x88>
 800f664:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f668:	ed9d 0b00 	vldr	d0, [sp]
 800f66c:	2001      	movs	r0, #1
 800f66e:	f000 fa13 	bl	800fa98 <__kernel_sin>
 800f672:	ec51 0b10 	vmov	r0, r1, d0
 800f676:	e7e6      	b.n	800f646 <sin+0x2e>
 800f678:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f67c:	ed9d 0b00 	vldr	d0, [sp]
 800f680:	f000 f942 	bl	800f908 <__kernel_cos>
 800f684:	e7f5      	b.n	800f672 <sin+0x5a>
 800f686:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f68a:	ed9d 0b00 	vldr	d0, [sp]
 800f68e:	2001      	movs	r0, #1
 800f690:	f000 fa02 	bl	800fa98 <__kernel_sin>
 800f694:	ec53 2b10 	vmov	r2, r3, d0
 800f698:	4610      	mov	r0, r2
 800f69a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800f69e:	e7d2      	b.n	800f646 <sin+0x2e>
 800f6a0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f6a4:	ed9d 0b00 	vldr	d0, [sp]
 800f6a8:	f000 f92e 	bl	800f908 <__kernel_cos>
 800f6ac:	e7f2      	b.n	800f694 <sin+0x7c>
 800f6ae:	bf00      	nop
	...
 800f6b8:	3fe921fb 	.word	0x3fe921fb
 800f6bc:	7fefffff 	.word	0x7fefffff

0800f6c0 <fmodf>:
 800f6c0:	b508      	push	{r3, lr}
 800f6c2:	ed2d 8b02 	vpush	{d8}
 800f6c6:	eef0 8a40 	vmov.f32	s17, s0
 800f6ca:	eeb0 8a60 	vmov.f32	s16, s1
 800f6ce:	f000 fd43 	bl	8010158 <__ieee754_fmodf>
 800f6d2:	eef4 8a48 	vcmp.f32	s17, s16
 800f6d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6da:	d60c      	bvs.n	800f6f6 <fmodf+0x36>
 800f6dc:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800f6fc <fmodf+0x3c>
 800f6e0:	eeb4 8a68 	vcmp.f32	s16, s17
 800f6e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6e8:	d105      	bne.n	800f6f6 <fmodf+0x36>
 800f6ea:	f7ff ff07 	bl	800f4fc <__errno>
 800f6ee:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800f6f2:	2321      	movs	r3, #33	@ 0x21
 800f6f4:	6003      	str	r3, [r0, #0]
 800f6f6:	ecbd 8b02 	vpop	{d8}
 800f6fa:	bd08      	pop	{r3, pc}
 800f6fc:	00000000 	.word	0x00000000

0800f700 <sqrtf>:
 800f700:	b508      	push	{r3, lr}
 800f702:	ed2d 8b02 	vpush	{d8}
 800f706:	eeb0 8a40 	vmov.f32	s16, s0
 800f70a:	f000 f8f7 	bl	800f8fc <__ieee754_sqrtf>
 800f70e:	eeb4 8a48 	vcmp.f32	s16, s16
 800f712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f716:	d60c      	bvs.n	800f732 <sqrtf+0x32>
 800f718:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800f738 <sqrtf+0x38>
 800f71c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800f720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f724:	d505      	bpl.n	800f732 <sqrtf+0x32>
 800f726:	f7ff fee9 	bl	800f4fc <__errno>
 800f72a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800f72e:	2321      	movs	r3, #33	@ 0x21
 800f730:	6003      	str	r3, [r0, #0]
 800f732:	ecbd 8b02 	vpop	{d8}
 800f736:	bd08      	pop	{r3, pc}
 800f738:	00000000 	.word	0x00000000

0800f73c <cosf>:
 800f73c:	ee10 3a10 	vmov	r3, s0
 800f740:	b507      	push	{r0, r1, r2, lr}
 800f742:	4a1e      	ldr	r2, [pc, #120]	@ (800f7bc <cosf+0x80>)
 800f744:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f748:	4293      	cmp	r3, r2
 800f74a:	d806      	bhi.n	800f75a <cosf+0x1e>
 800f74c:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 800f7c0 <cosf+0x84>
 800f750:	b003      	add	sp, #12
 800f752:	f85d eb04 	ldr.w	lr, [sp], #4
 800f756:	f000 bc5f 	b.w	8010018 <__kernel_cosf>
 800f75a:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800f75e:	d304      	bcc.n	800f76a <cosf+0x2e>
 800f760:	ee30 0a40 	vsub.f32	s0, s0, s0
 800f764:	b003      	add	sp, #12
 800f766:	f85d fb04 	ldr.w	pc, [sp], #4
 800f76a:	4668      	mov	r0, sp
 800f76c:	f000 fd76 	bl	801025c <__ieee754_rem_pio2f>
 800f770:	f000 0003 	and.w	r0, r0, #3
 800f774:	2801      	cmp	r0, #1
 800f776:	d009      	beq.n	800f78c <cosf+0x50>
 800f778:	2802      	cmp	r0, #2
 800f77a:	d010      	beq.n	800f79e <cosf+0x62>
 800f77c:	b9b0      	cbnz	r0, 800f7ac <cosf+0x70>
 800f77e:	eddd 0a01 	vldr	s1, [sp, #4]
 800f782:	ed9d 0a00 	vldr	s0, [sp]
 800f786:	f000 fc47 	bl	8010018 <__kernel_cosf>
 800f78a:	e7eb      	b.n	800f764 <cosf+0x28>
 800f78c:	eddd 0a01 	vldr	s1, [sp, #4]
 800f790:	ed9d 0a00 	vldr	s0, [sp]
 800f794:	f000 fc98 	bl	80100c8 <__kernel_sinf>
 800f798:	eeb1 0a40 	vneg.f32	s0, s0
 800f79c:	e7e2      	b.n	800f764 <cosf+0x28>
 800f79e:	eddd 0a01 	vldr	s1, [sp, #4]
 800f7a2:	ed9d 0a00 	vldr	s0, [sp]
 800f7a6:	f000 fc37 	bl	8010018 <__kernel_cosf>
 800f7aa:	e7f5      	b.n	800f798 <cosf+0x5c>
 800f7ac:	eddd 0a01 	vldr	s1, [sp, #4]
 800f7b0:	ed9d 0a00 	vldr	s0, [sp]
 800f7b4:	2001      	movs	r0, #1
 800f7b6:	f000 fc87 	bl	80100c8 <__kernel_sinf>
 800f7ba:	e7d3      	b.n	800f764 <cosf+0x28>
 800f7bc:	3f490fd8 	.word	0x3f490fd8
 800f7c0:	00000000 	.word	0x00000000

0800f7c4 <sinf>:
 800f7c4:	ee10 3a10 	vmov	r3, s0
 800f7c8:	b507      	push	{r0, r1, r2, lr}
 800f7ca:	4a1f      	ldr	r2, [pc, #124]	@ (800f848 <sinf+0x84>)
 800f7cc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f7d0:	4293      	cmp	r3, r2
 800f7d2:	d807      	bhi.n	800f7e4 <sinf+0x20>
 800f7d4:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800f84c <sinf+0x88>
 800f7d8:	2000      	movs	r0, #0
 800f7da:	b003      	add	sp, #12
 800f7dc:	f85d eb04 	ldr.w	lr, [sp], #4
 800f7e0:	f000 bc72 	b.w	80100c8 <__kernel_sinf>
 800f7e4:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800f7e8:	d304      	bcc.n	800f7f4 <sinf+0x30>
 800f7ea:	ee30 0a40 	vsub.f32	s0, s0, s0
 800f7ee:	b003      	add	sp, #12
 800f7f0:	f85d fb04 	ldr.w	pc, [sp], #4
 800f7f4:	4668      	mov	r0, sp
 800f7f6:	f000 fd31 	bl	801025c <__ieee754_rem_pio2f>
 800f7fa:	f000 0003 	and.w	r0, r0, #3
 800f7fe:	2801      	cmp	r0, #1
 800f800:	d00a      	beq.n	800f818 <sinf+0x54>
 800f802:	2802      	cmp	r0, #2
 800f804:	d00f      	beq.n	800f826 <sinf+0x62>
 800f806:	b9c0      	cbnz	r0, 800f83a <sinf+0x76>
 800f808:	eddd 0a01 	vldr	s1, [sp, #4]
 800f80c:	ed9d 0a00 	vldr	s0, [sp]
 800f810:	2001      	movs	r0, #1
 800f812:	f000 fc59 	bl	80100c8 <__kernel_sinf>
 800f816:	e7ea      	b.n	800f7ee <sinf+0x2a>
 800f818:	eddd 0a01 	vldr	s1, [sp, #4]
 800f81c:	ed9d 0a00 	vldr	s0, [sp]
 800f820:	f000 fbfa 	bl	8010018 <__kernel_cosf>
 800f824:	e7e3      	b.n	800f7ee <sinf+0x2a>
 800f826:	eddd 0a01 	vldr	s1, [sp, #4]
 800f82a:	ed9d 0a00 	vldr	s0, [sp]
 800f82e:	2001      	movs	r0, #1
 800f830:	f000 fc4a 	bl	80100c8 <__kernel_sinf>
 800f834:	eeb1 0a40 	vneg.f32	s0, s0
 800f838:	e7d9      	b.n	800f7ee <sinf+0x2a>
 800f83a:	eddd 0a01 	vldr	s1, [sp, #4]
 800f83e:	ed9d 0a00 	vldr	s0, [sp]
 800f842:	f000 fbe9 	bl	8010018 <__kernel_cosf>
 800f846:	e7f5      	b.n	800f834 <sinf+0x70>
 800f848:	3f490fd8 	.word	0x3f490fd8
 800f84c:	00000000 	.word	0x00000000

0800f850 <fmaxf>:
 800f850:	b508      	push	{r3, lr}
 800f852:	ed2d 8b02 	vpush	{d8}
 800f856:	eeb0 8a40 	vmov.f32	s16, s0
 800f85a:	eef0 8a60 	vmov.f32	s17, s1
 800f85e:	f000 f831 	bl	800f8c4 <__fpclassifyf>
 800f862:	b930      	cbnz	r0, 800f872 <fmaxf+0x22>
 800f864:	eeb0 8a68 	vmov.f32	s16, s17
 800f868:	eeb0 0a48 	vmov.f32	s0, s16
 800f86c:	ecbd 8b02 	vpop	{d8}
 800f870:	bd08      	pop	{r3, pc}
 800f872:	eeb0 0a68 	vmov.f32	s0, s17
 800f876:	f000 f825 	bl	800f8c4 <__fpclassifyf>
 800f87a:	2800      	cmp	r0, #0
 800f87c:	d0f4      	beq.n	800f868 <fmaxf+0x18>
 800f87e:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800f882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f886:	dded      	ble.n	800f864 <fmaxf+0x14>
 800f888:	e7ee      	b.n	800f868 <fmaxf+0x18>

0800f88a <fminf>:
 800f88a:	b508      	push	{r3, lr}
 800f88c:	ed2d 8b02 	vpush	{d8}
 800f890:	eeb0 8a40 	vmov.f32	s16, s0
 800f894:	eef0 8a60 	vmov.f32	s17, s1
 800f898:	f000 f814 	bl	800f8c4 <__fpclassifyf>
 800f89c:	b930      	cbnz	r0, 800f8ac <fminf+0x22>
 800f89e:	eeb0 8a68 	vmov.f32	s16, s17
 800f8a2:	eeb0 0a48 	vmov.f32	s0, s16
 800f8a6:	ecbd 8b02 	vpop	{d8}
 800f8aa:	bd08      	pop	{r3, pc}
 800f8ac:	eeb0 0a68 	vmov.f32	s0, s17
 800f8b0:	f000 f808 	bl	800f8c4 <__fpclassifyf>
 800f8b4:	2800      	cmp	r0, #0
 800f8b6:	d0f4      	beq.n	800f8a2 <fminf+0x18>
 800f8b8:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800f8bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8c0:	d5ed      	bpl.n	800f89e <fminf+0x14>
 800f8c2:	e7ee      	b.n	800f8a2 <fminf+0x18>

0800f8c4 <__fpclassifyf>:
 800f8c4:	ee10 3a10 	vmov	r3, s0
 800f8c8:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 800f8cc:	d00d      	beq.n	800f8ea <__fpclassifyf+0x26>
 800f8ce:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 800f8d2:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 800f8d6:	d30a      	bcc.n	800f8ee <__fpclassifyf+0x2a>
 800f8d8:	4b07      	ldr	r3, [pc, #28]	@ (800f8f8 <__fpclassifyf+0x34>)
 800f8da:	1e42      	subs	r2, r0, #1
 800f8dc:	429a      	cmp	r2, r3
 800f8de:	d908      	bls.n	800f8f2 <__fpclassifyf+0x2e>
 800f8e0:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 800f8e4:	4258      	negs	r0, r3
 800f8e6:	4158      	adcs	r0, r3
 800f8e8:	4770      	bx	lr
 800f8ea:	2002      	movs	r0, #2
 800f8ec:	4770      	bx	lr
 800f8ee:	2004      	movs	r0, #4
 800f8f0:	4770      	bx	lr
 800f8f2:	2003      	movs	r0, #3
 800f8f4:	4770      	bx	lr
 800f8f6:	bf00      	nop
 800f8f8:	007ffffe 	.word	0x007ffffe

0800f8fc <__ieee754_sqrtf>:
 800f8fc:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800f900:	4770      	bx	lr
 800f902:	0000      	movs	r0, r0
 800f904:	0000      	movs	r0, r0
	...

0800f908 <__kernel_cos>:
 800f908:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f90c:	ec57 6b10 	vmov	r6, r7, d0
 800f910:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800f914:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800f918:	ed8d 1b00 	vstr	d1, [sp]
 800f91c:	d206      	bcs.n	800f92c <__kernel_cos+0x24>
 800f91e:	4630      	mov	r0, r6
 800f920:	4639      	mov	r1, r7
 800f922:	f7f1 f8cf 	bl	8000ac4 <__aeabi_d2iz>
 800f926:	2800      	cmp	r0, #0
 800f928:	f000 8088 	beq.w	800fa3c <__kernel_cos+0x134>
 800f92c:	4632      	mov	r2, r6
 800f92e:	463b      	mov	r3, r7
 800f930:	4630      	mov	r0, r6
 800f932:	4639      	mov	r1, r7
 800f934:	f7f0 fe2c 	bl	8000590 <__aeabi_dmul>
 800f938:	4b51      	ldr	r3, [pc, #324]	@ (800fa80 <__kernel_cos+0x178>)
 800f93a:	2200      	movs	r2, #0
 800f93c:	4604      	mov	r4, r0
 800f93e:	460d      	mov	r5, r1
 800f940:	f7f0 fe26 	bl	8000590 <__aeabi_dmul>
 800f944:	a340      	add	r3, pc, #256	@ (adr r3, 800fa48 <__kernel_cos+0x140>)
 800f946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f94a:	4682      	mov	sl, r0
 800f94c:	468b      	mov	fp, r1
 800f94e:	4620      	mov	r0, r4
 800f950:	4629      	mov	r1, r5
 800f952:	f7f0 fe1d 	bl	8000590 <__aeabi_dmul>
 800f956:	a33e      	add	r3, pc, #248	@ (adr r3, 800fa50 <__kernel_cos+0x148>)
 800f958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f95c:	f7f0 fc62 	bl	8000224 <__adddf3>
 800f960:	4622      	mov	r2, r4
 800f962:	462b      	mov	r3, r5
 800f964:	f7f0 fe14 	bl	8000590 <__aeabi_dmul>
 800f968:	a33b      	add	r3, pc, #236	@ (adr r3, 800fa58 <__kernel_cos+0x150>)
 800f96a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f96e:	f7f0 fc57 	bl	8000220 <__aeabi_dsub>
 800f972:	4622      	mov	r2, r4
 800f974:	462b      	mov	r3, r5
 800f976:	f7f0 fe0b 	bl	8000590 <__aeabi_dmul>
 800f97a:	a339      	add	r3, pc, #228	@ (adr r3, 800fa60 <__kernel_cos+0x158>)
 800f97c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f980:	f7f0 fc50 	bl	8000224 <__adddf3>
 800f984:	4622      	mov	r2, r4
 800f986:	462b      	mov	r3, r5
 800f988:	f7f0 fe02 	bl	8000590 <__aeabi_dmul>
 800f98c:	a336      	add	r3, pc, #216	@ (adr r3, 800fa68 <__kernel_cos+0x160>)
 800f98e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f992:	f7f0 fc45 	bl	8000220 <__aeabi_dsub>
 800f996:	4622      	mov	r2, r4
 800f998:	462b      	mov	r3, r5
 800f99a:	f7f0 fdf9 	bl	8000590 <__aeabi_dmul>
 800f99e:	a334      	add	r3, pc, #208	@ (adr r3, 800fa70 <__kernel_cos+0x168>)
 800f9a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9a4:	f7f0 fc3e 	bl	8000224 <__adddf3>
 800f9a8:	4622      	mov	r2, r4
 800f9aa:	462b      	mov	r3, r5
 800f9ac:	f7f0 fdf0 	bl	8000590 <__aeabi_dmul>
 800f9b0:	4622      	mov	r2, r4
 800f9b2:	462b      	mov	r3, r5
 800f9b4:	f7f0 fdec 	bl	8000590 <__aeabi_dmul>
 800f9b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f9bc:	4604      	mov	r4, r0
 800f9be:	460d      	mov	r5, r1
 800f9c0:	4630      	mov	r0, r6
 800f9c2:	4639      	mov	r1, r7
 800f9c4:	f7f0 fde4 	bl	8000590 <__aeabi_dmul>
 800f9c8:	460b      	mov	r3, r1
 800f9ca:	4602      	mov	r2, r0
 800f9cc:	4629      	mov	r1, r5
 800f9ce:	4620      	mov	r0, r4
 800f9d0:	f7f0 fc26 	bl	8000220 <__aeabi_dsub>
 800f9d4:	4b2b      	ldr	r3, [pc, #172]	@ (800fa84 <__kernel_cos+0x17c>)
 800f9d6:	4598      	cmp	r8, r3
 800f9d8:	4606      	mov	r6, r0
 800f9da:	460f      	mov	r7, r1
 800f9dc:	d810      	bhi.n	800fa00 <__kernel_cos+0xf8>
 800f9de:	4602      	mov	r2, r0
 800f9e0:	460b      	mov	r3, r1
 800f9e2:	4650      	mov	r0, sl
 800f9e4:	4659      	mov	r1, fp
 800f9e6:	f7f0 fc1b 	bl	8000220 <__aeabi_dsub>
 800f9ea:	460b      	mov	r3, r1
 800f9ec:	4926      	ldr	r1, [pc, #152]	@ (800fa88 <__kernel_cos+0x180>)
 800f9ee:	4602      	mov	r2, r0
 800f9f0:	2000      	movs	r0, #0
 800f9f2:	f7f0 fc15 	bl	8000220 <__aeabi_dsub>
 800f9f6:	ec41 0b10 	vmov	d0, r0, r1
 800f9fa:	b003      	add	sp, #12
 800f9fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa00:	4b22      	ldr	r3, [pc, #136]	@ (800fa8c <__kernel_cos+0x184>)
 800fa02:	4921      	ldr	r1, [pc, #132]	@ (800fa88 <__kernel_cos+0x180>)
 800fa04:	4598      	cmp	r8, r3
 800fa06:	bf8c      	ite	hi
 800fa08:	4d21      	ldrhi	r5, [pc, #132]	@ (800fa90 <__kernel_cos+0x188>)
 800fa0a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800fa0e:	2400      	movs	r4, #0
 800fa10:	4622      	mov	r2, r4
 800fa12:	462b      	mov	r3, r5
 800fa14:	2000      	movs	r0, #0
 800fa16:	f7f0 fc03 	bl	8000220 <__aeabi_dsub>
 800fa1a:	4622      	mov	r2, r4
 800fa1c:	4680      	mov	r8, r0
 800fa1e:	4689      	mov	r9, r1
 800fa20:	462b      	mov	r3, r5
 800fa22:	4650      	mov	r0, sl
 800fa24:	4659      	mov	r1, fp
 800fa26:	f7f0 fbfb 	bl	8000220 <__aeabi_dsub>
 800fa2a:	4632      	mov	r2, r6
 800fa2c:	463b      	mov	r3, r7
 800fa2e:	f7f0 fbf7 	bl	8000220 <__aeabi_dsub>
 800fa32:	4602      	mov	r2, r0
 800fa34:	460b      	mov	r3, r1
 800fa36:	4640      	mov	r0, r8
 800fa38:	4649      	mov	r1, r9
 800fa3a:	e7da      	b.n	800f9f2 <__kernel_cos+0xea>
 800fa3c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800fa78 <__kernel_cos+0x170>
 800fa40:	e7db      	b.n	800f9fa <__kernel_cos+0xf2>
 800fa42:	bf00      	nop
 800fa44:	f3af 8000 	nop.w
 800fa48:	be8838d4 	.word	0xbe8838d4
 800fa4c:	bda8fae9 	.word	0xbda8fae9
 800fa50:	bdb4b1c4 	.word	0xbdb4b1c4
 800fa54:	3e21ee9e 	.word	0x3e21ee9e
 800fa58:	809c52ad 	.word	0x809c52ad
 800fa5c:	3e927e4f 	.word	0x3e927e4f
 800fa60:	19cb1590 	.word	0x19cb1590
 800fa64:	3efa01a0 	.word	0x3efa01a0
 800fa68:	16c15177 	.word	0x16c15177
 800fa6c:	3f56c16c 	.word	0x3f56c16c
 800fa70:	5555554c 	.word	0x5555554c
 800fa74:	3fa55555 	.word	0x3fa55555
 800fa78:	00000000 	.word	0x00000000
 800fa7c:	3ff00000 	.word	0x3ff00000
 800fa80:	3fe00000 	.word	0x3fe00000
 800fa84:	3fd33332 	.word	0x3fd33332
 800fa88:	3ff00000 	.word	0x3ff00000
 800fa8c:	3fe90000 	.word	0x3fe90000
 800fa90:	3fd20000 	.word	0x3fd20000
 800fa94:	00000000 	.word	0x00000000

0800fa98 <__kernel_sin>:
 800fa98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa9c:	ec55 4b10 	vmov	r4, r5, d0
 800faa0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800faa4:	b085      	sub	sp, #20
 800faa6:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800faaa:	ed8d 1b02 	vstr	d1, [sp, #8]
 800faae:	4680      	mov	r8, r0
 800fab0:	d205      	bcs.n	800fabe <__kernel_sin+0x26>
 800fab2:	4620      	mov	r0, r4
 800fab4:	4629      	mov	r1, r5
 800fab6:	f7f1 f805 	bl	8000ac4 <__aeabi_d2iz>
 800faba:	2800      	cmp	r0, #0
 800fabc:	d052      	beq.n	800fb64 <__kernel_sin+0xcc>
 800fabe:	4622      	mov	r2, r4
 800fac0:	462b      	mov	r3, r5
 800fac2:	4620      	mov	r0, r4
 800fac4:	4629      	mov	r1, r5
 800fac6:	f7f0 fd63 	bl	8000590 <__aeabi_dmul>
 800faca:	4682      	mov	sl, r0
 800facc:	468b      	mov	fp, r1
 800face:	4602      	mov	r2, r0
 800fad0:	460b      	mov	r3, r1
 800fad2:	4620      	mov	r0, r4
 800fad4:	4629      	mov	r1, r5
 800fad6:	f7f0 fd5b 	bl	8000590 <__aeabi_dmul>
 800fada:	a342      	add	r3, pc, #264	@ (adr r3, 800fbe4 <__kernel_sin+0x14c>)
 800fadc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fae0:	e9cd 0100 	strd	r0, r1, [sp]
 800fae4:	4650      	mov	r0, sl
 800fae6:	4659      	mov	r1, fp
 800fae8:	f7f0 fd52 	bl	8000590 <__aeabi_dmul>
 800faec:	a33f      	add	r3, pc, #252	@ (adr r3, 800fbec <__kernel_sin+0x154>)
 800faee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faf2:	f7f0 fb95 	bl	8000220 <__aeabi_dsub>
 800faf6:	4652      	mov	r2, sl
 800faf8:	465b      	mov	r3, fp
 800fafa:	f7f0 fd49 	bl	8000590 <__aeabi_dmul>
 800fafe:	a33d      	add	r3, pc, #244	@ (adr r3, 800fbf4 <__kernel_sin+0x15c>)
 800fb00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb04:	f7f0 fb8e 	bl	8000224 <__adddf3>
 800fb08:	4652      	mov	r2, sl
 800fb0a:	465b      	mov	r3, fp
 800fb0c:	f7f0 fd40 	bl	8000590 <__aeabi_dmul>
 800fb10:	a33a      	add	r3, pc, #232	@ (adr r3, 800fbfc <__kernel_sin+0x164>)
 800fb12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb16:	f7f0 fb83 	bl	8000220 <__aeabi_dsub>
 800fb1a:	4652      	mov	r2, sl
 800fb1c:	465b      	mov	r3, fp
 800fb1e:	f7f0 fd37 	bl	8000590 <__aeabi_dmul>
 800fb22:	a338      	add	r3, pc, #224	@ (adr r3, 800fc04 <__kernel_sin+0x16c>)
 800fb24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb28:	f7f0 fb7c 	bl	8000224 <__adddf3>
 800fb2c:	4606      	mov	r6, r0
 800fb2e:	460f      	mov	r7, r1
 800fb30:	f1b8 0f00 	cmp.w	r8, #0
 800fb34:	d11b      	bne.n	800fb6e <__kernel_sin+0xd6>
 800fb36:	4602      	mov	r2, r0
 800fb38:	460b      	mov	r3, r1
 800fb3a:	4650      	mov	r0, sl
 800fb3c:	4659      	mov	r1, fp
 800fb3e:	f7f0 fd27 	bl	8000590 <__aeabi_dmul>
 800fb42:	a325      	add	r3, pc, #148	@ (adr r3, 800fbd8 <__kernel_sin+0x140>)
 800fb44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb48:	f7f0 fb6a 	bl	8000220 <__aeabi_dsub>
 800fb4c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fb50:	f7f0 fd1e 	bl	8000590 <__aeabi_dmul>
 800fb54:	4602      	mov	r2, r0
 800fb56:	460b      	mov	r3, r1
 800fb58:	4620      	mov	r0, r4
 800fb5a:	4629      	mov	r1, r5
 800fb5c:	f7f0 fb62 	bl	8000224 <__adddf3>
 800fb60:	4604      	mov	r4, r0
 800fb62:	460d      	mov	r5, r1
 800fb64:	ec45 4b10 	vmov	d0, r4, r5
 800fb68:	b005      	add	sp, #20
 800fb6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fb72:	4b1b      	ldr	r3, [pc, #108]	@ (800fbe0 <__kernel_sin+0x148>)
 800fb74:	2200      	movs	r2, #0
 800fb76:	f7f0 fd0b 	bl	8000590 <__aeabi_dmul>
 800fb7a:	4632      	mov	r2, r6
 800fb7c:	4680      	mov	r8, r0
 800fb7e:	4689      	mov	r9, r1
 800fb80:	463b      	mov	r3, r7
 800fb82:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fb86:	f7f0 fd03 	bl	8000590 <__aeabi_dmul>
 800fb8a:	4602      	mov	r2, r0
 800fb8c:	460b      	mov	r3, r1
 800fb8e:	4640      	mov	r0, r8
 800fb90:	4649      	mov	r1, r9
 800fb92:	f7f0 fb45 	bl	8000220 <__aeabi_dsub>
 800fb96:	4652      	mov	r2, sl
 800fb98:	465b      	mov	r3, fp
 800fb9a:	f7f0 fcf9 	bl	8000590 <__aeabi_dmul>
 800fb9e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fba2:	f7f0 fb3d 	bl	8000220 <__aeabi_dsub>
 800fba6:	a30c      	add	r3, pc, #48	@ (adr r3, 800fbd8 <__kernel_sin+0x140>)
 800fba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbac:	4606      	mov	r6, r0
 800fbae:	460f      	mov	r7, r1
 800fbb0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fbb4:	f7f0 fcec 	bl	8000590 <__aeabi_dmul>
 800fbb8:	4602      	mov	r2, r0
 800fbba:	460b      	mov	r3, r1
 800fbbc:	4630      	mov	r0, r6
 800fbbe:	4639      	mov	r1, r7
 800fbc0:	f7f0 fb30 	bl	8000224 <__adddf3>
 800fbc4:	4602      	mov	r2, r0
 800fbc6:	460b      	mov	r3, r1
 800fbc8:	4620      	mov	r0, r4
 800fbca:	4629      	mov	r1, r5
 800fbcc:	f7f0 fb28 	bl	8000220 <__aeabi_dsub>
 800fbd0:	e7c6      	b.n	800fb60 <__kernel_sin+0xc8>
 800fbd2:	bf00      	nop
 800fbd4:	f3af 8000 	nop.w
 800fbd8:	55555549 	.word	0x55555549
 800fbdc:	3fc55555 	.word	0x3fc55555
 800fbe0:	3fe00000 	.word	0x3fe00000
 800fbe4:	5acfd57c 	.word	0x5acfd57c
 800fbe8:	3de5d93a 	.word	0x3de5d93a
 800fbec:	8a2b9ceb 	.word	0x8a2b9ceb
 800fbf0:	3e5ae5e6 	.word	0x3e5ae5e6
 800fbf4:	57b1fe7d 	.word	0x57b1fe7d
 800fbf8:	3ec71de3 	.word	0x3ec71de3
 800fbfc:	19c161d5 	.word	0x19c161d5
 800fc00:	3f2a01a0 	.word	0x3f2a01a0
 800fc04:	1110f8a6 	.word	0x1110f8a6
 800fc08:	3f811111 	.word	0x3f811111
 800fc0c:	00000000 	.word	0x00000000

0800fc10 <__ieee754_rem_pio2>:
 800fc10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc14:	ec57 6b10 	vmov	r6, r7, d0
 800fc18:	4bc5      	ldr	r3, [pc, #788]	@ (800ff30 <__ieee754_rem_pio2+0x320>)
 800fc1a:	b08d      	sub	sp, #52	@ 0x34
 800fc1c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800fc20:	4598      	cmp	r8, r3
 800fc22:	4604      	mov	r4, r0
 800fc24:	9704      	str	r7, [sp, #16]
 800fc26:	d807      	bhi.n	800fc38 <__ieee754_rem_pio2+0x28>
 800fc28:	2200      	movs	r2, #0
 800fc2a:	2300      	movs	r3, #0
 800fc2c:	ed80 0b00 	vstr	d0, [r0]
 800fc30:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800fc34:	2500      	movs	r5, #0
 800fc36:	e028      	b.n	800fc8a <__ieee754_rem_pio2+0x7a>
 800fc38:	4bbe      	ldr	r3, [pc, #760]	@ (800ff34 <__ieee754_rem_pio2+0x324>)
 800fc3a:	4598      	cmp	r8, r3
 800fc3c:	d878      	bhi.n	800fd30 <__ieee754_rem_pio2+0x120>
 800fc3e:	9b04      	ldr	r3, [sp, #16]
 800fc40:	4dbd      	ldr	r5, [pc, #756]	@ (800ff38 <__ieee754_rem_pio2+0x328>)
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	4630      	mov	r0, r6
 800fc46:	a3ac      	add	r3, pc, #688	@ (adr r3, 800fef8 <__ieee754_rem_pio2+0x2e8>)
 800fc48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc4c:	4639      	mov	r1, r7
 800fc4e:	dd38      	ble.n	800fcc2 <__ieee754_rem_pio2+0xb2>
 800fc50:	f7f0 fae6 	bl	8000220 <__aeabi_dsub>
 800fc54:	45a8      	cmp	r8, r5
 800fc56:	4606      	mov	r6, r0
 800fc58:	460f      	mov	r7, r1
 800fc5a:	d01a      	beq.n	800fc92 <__ieee754_rem_pio2+0x82>
 800fc5c:	a3a8      	add	r3, pc, #672	@ (adr r3, 800ff00 <__ieee754_rem_pio2+0x2f0>)
 800fc5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc62:	f7f0 fadd 	bl	8000220 <__aeabi_dsub>
 800fc66:	4602      	mov	r2, r0
 800fc68:	460b      	mov	r3, r1
 800fc6a:	4680      	mov	r8, r0
 800fc6c:	4689      	mov	r9, r1
 800fc6e:	4630      	mov	r0, r6
 800fc70:	4639      	mov	r1, r7
 800fc72:	f7f0 fad5 	bl	8000220 <__aeabi_dsub>
 800fc76:	a3a2      	add	r3, pc, #648	@ (adr r3, 800ff00 <__ieee754_rem_pio2+0x2f0>)
 800fc78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc7c:	f7f0 fad0 	bl	8000220 <__aeabi_dsub>
 800fc80:	e9c4 8900 	strd	r8, r9, [r4]
 800fc84:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800fc88:	2501      	movs	r5, #1
 800fc8a:	4628      	mov	r0, r5
 800fc8c:	b00d      	add	sp, #52	@ 0x34
 800fc8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc92:	a39d      	add	r3, pc, #628	@ (adr r3, 800ff08 <__ieee754_rem_pio2+0x2f8>)
 800fc94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc98:	f7f0 fac2 	bl	8000220 <__aeabi_dsub>
 800fc9c:	a39c      	add	r3, pc, #624	@ (adr r3, 800ff10 <__ieee754_rem_pio2+0x300>)
 800fc9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fca2:	4606      	mov	r6, r0
 800fca4:	460f      	mov	r7, r1
 800fca6:	f7f0 fabb 	bl	8000220 <__aeabi_dsub>
 800fcaa:	4602      	mov	r2, r0
 800fcac:	460b      	mov	r3, r1
 800fcae:	4680      	mov	r8, r0
 800fcb0:	4689      	mov	r9, r1
 800fcb2:	4630      	mov	r0, r6
 800fcb4:	4639      	mov	r1, r7
 800fcb6:	f7f0 fab3 	bl	8000220 <__aeabi_dsub>
 800fcba:	a395      	add	r3, pc, #596	@ (adr r3, 800ff10 <__ieee754_rem_pio2+0x300>)
 800fcbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcc0:	e7dc      	b.n	800fc7c <__ieee754_rem_pio2+0x6c>
 800fcc2:	f7f0 faaf 	bl	8000224 <__adddf3>
 800fcc6:	45a8      	cmp	r8, r5
 800fcc8:	4606      	mov	r6, r0
 800fcca:	460f      	mov	r7, r1
 800fccc:	d018      	beq.n	800fd00 <__ieee754_rem_pio2+0xf0>
 800fcce:	a38c      	add	r3, pc, #560	@ (adr r3, 800ff00 <__ieee754_rem_pio2+0x2f0>)
 800fcd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcd4:	f7f0 faa6 	bl	8000224 <__adddf3>
 800fcd8:	4602      	mov	r2, r0
 800fcda:	460b      	mov	r3, r1
 800fcdc:	4680      	mov	r8, r0
 800fcde:	4689      	mov	r9, r1
 800fce0:	4630      	mov	r0, r6
 800fce2:	4639      	mov	r1, r7
 800fce4:	f7f0 fa9c 	bl	8000220 <__aeabi_dsub>
 800fce8:	a385      	add	r3, pc, #532	@ (adr r3, 800ff00 <__ieee754_rem_pio2+0x2f0>)
 800fcea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcee:	f7f0 fa99 	bl	8000224 <__adddf3>
 800fcf2:	f04f 35ff 	mov.w	r5, #4294967295
 800fcf6:	e9c4 8900 	strd	r8, r9, [r4]
 800fcfa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800fcfe:	e7c4      	b.n	800fc8a <__ieee754_rem_pio2+0x7a>
 800fd00:	a381      	add	r3, pc, #516	@ (adr r3, 800ff08 <__ieee754_rem_pio2+0x2f8>)
 800fd02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd06:	f7f0 fa8d 	bl	8000224 <__adddf3>
 800fd0a:	a381      	add	r3, pc, #516	@ (adr r3, 800ff10 <__ieee754_rem_pio2+0x300>)
 800fd0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd10:	4606      	mov	r6, r0
 800fd12:	460f      	mov	r7, r1
 800fd14:	f7f0 fa86 	bl	8000224 <__adddf3>
 800fd18:	4602      	mov	r2, r0
 800fd1a:	460b      	mov	r3, r1
 800fd1c:	4680      	mov	r8, r0
 800fd1e:	4689      	mov	r9, r1
 800fd20:	4630      	mov	r0, r6
 800fd22:	4639      	mov	r1, r7
 800fd24:	f7f0 fa7c 	bl	8000220 <__aeabi_dsub>
 800fd28:	a379      	add	r3, pc, #484	@ (adr r3, 800ff10 <__ieee754_rem_pio2+0x300>)
 800fd2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd2e:	e7de      	b.n	800fcee <__ieee754_rem_pio2+0xde>
 800fd30:	4b82      	ldr	r3, [pc, #520]	@ (800ff3c <__ieee754_rem_pio2+0x32c>)
 800fd32:	4598      	cmp	r8, r3
 800fd34:	f200 80d1 	bhi.w	800feda <__ieee754_rem_pio2+0x2ca>
 800fd38:	f000 f966 	bl	8010008 <fabs>
 800fd3c:	ec57 6b10 	vmov	r6, r7, d0
 800fd40:	a375      	add	r3, pc, #468	@ (adr r3, 800ff18 <__ieee754_rem_pio2+0x308>)
 800fd42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd46:	4630      	mov	r0, r6
 800fd48:	4639      	mov	r1, r7
 800fd4a:	f7f0 fc21 	bl	8000590 <__aeabi_dmul>
 800fd4e:	4b7c      	ldr	r3, [pc, #496]	@ (800ff40 <__ieee754_rem_pio2+0x330>)
 800fd50:	2200      	movs	r2, #0
 800fd52:	f7f0 fa67 	bl	8000224 <__adddf3>
 800fd56:	f7f0 feb5 	bl	8000ac4 <__aeabi_d2iz>
 800fd5a:	4605      	mov	r5, r0
 800fd5c:	f7f0 fbae 	bl	80004bc <__aeabi_i2d>
 800fd60:	4602      	mov	r2, r0
 800fd62:	460b      	mov	r3, r1
 800fd64:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800fd68:	a363      	add	r3, pc, #396	@ (adr r3, 800fef8 <__ieee754_rem_pio2+0x2e8>)
 800fd6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd6e:	f7f0 fc0f 	bl	8000590 <__aeabi_dmul>
 800fd72:	4602      	mov	r2, r0
 800fd74:	460b      	mov	r3, r1
 800fd76:	4630      	mov	r0, r6
 800fd78:	4639      	mov	r1, r7
 800fd7a:	f7f0 fa51 	bl	8000220 <__aeabi_dsub>
 800fd7e:	a360      	add	r3, pc, #384	@ (adr r3, 800ff00 <__ieee754_rem_pio2+0x2f0>)
 800fd80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd84:	4682      	mov	sl, r0
 800fd86:	468b      	mov	fp, r1
 800fd88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fd8c:	f7f0 fc00 	bl	8000590 <__aeabi_dmul>
 800fd90:	2d1f      	cmp	r5, #31
 800fd92:	4606      	mov	r6, r0
 800fd94:	460f      	mov	r7, r1
 800fd96:	dc0c      	bgt.n	800fdb2 <__ieee754_rem_pio2+0x1a2>
 800fd98:	4b6a      	ldr	r3, [pc, #424]	@ (800ff44 <__ieee754_rem_pio2+0x334>)
 800fd9a:	1e6a      	subs	r2, r5, #1
 800fd9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fda0:	4543      	cmp	r3, r8
 800fda2:	d006      	beq.n	800fdb2 <__ieee754_rem_pio2+0x1a2>
 800fda4:	4632      	mov	r2, r6
 800fda6:	463b      	mov	r3, r7
 800fda8:	4650      	mov	r0, sl
 800fdaa:	4659      	mov	r1, fp
 800fdac:	f7f0 fa38 	bl	8000220 <__aeabi_dsub>
 800fdb0:	e00e      	b.n	800fdd0 <__ieee754_rem_pio2+0x1c0>
 800fdb2:	463b      	mov	r3, r7
 800fdb4:	4632      	mov	r2, r6
 800fdb6:	4650      	mov	r0, sl
 800fdb8:	4659      	mov	r1, fp
 800fdba:	f7f0 fa31 	bl	8000220 <__aeabi_dsub>
 800fdbe:	ea4f 5328 	mov.w	r3, r8, asr #20
 800fdc2:	9305      	str	r3, [sp, #20]
 800fdc4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800fdc8:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800fdcc:	2b10      	cmp	r3, #16
 800fdce:	dc02      	bgt.n	800fdd6 <__ieee754_rem_pio2+0x1c6>
 800fdd0:	e9c4 0100 	strd	r0, r1, [r4]
 800fdd4:	e039      	b.n	800fe4a <__ieee754_rem_pio2+0x23a>
 800fdd6:	a34c      	add	r3, pc, #304	@ (adr r3, 800ff08 <__ieee754_rem_pio2+0x2f8>)
 800fdd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fddc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fde0:	f7f0 fbd6 	bl	8000590 <__aeabi_dmul>
 800fde4:	4606      	mov	r6, r0
 800fde6:	460f      	mov	r7, r1
 800fde8:	4602      	mov	r2, r0
 800fdea:	460b      	mov	r3, r1
 800fdec:	4650      	mov	r0, sl
 800fdee:	4659      	mov	r1, fp
 800fdf0:	f7f0 fa16 	bl	8000220 <__aeabi_dsub>
 800fdf4:	4602      	mov	r2, r0
 800fdf6:	460b      	mov	r3, r1
 800fdf8:	4680      	mov	r8, r0
 800fdfa:	4689      	mov	r9, r1
 800fdfc:	4650      	mov	r0, sl
 800fdfe:	4659      	mov	r1, fp
 800fe00:	f7f0 fa0e 	bl	8000220 <__aeabi_dsub>
 800fe04:	4632      	mov	r2, r6
 800fe06:	463b      	mov	r3, r7
 800fe08:	f7f0 fa0a 	bl	8000220 <__aeabi_dsub>
 800fe0c:	a340      	add	r3, pc, #256	@ (adr r3, 800ff10 <__ieee754_rem_pio2+0x300>)
 800fe0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe12:	4606      	mov	r6, r0
 800fe14:	460f      	mov	r7, r1
 800fe16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fe1a:	f7f0 fbb9 	bl	8000590 <__aeabi_dmul>
 800fe1e:	4632      	mov	r2, r6
 800fe20:	463b      	mov	r3, r7
 800fe22:	f7f0 f9fd 	bl	8000220 <__aeabi_dsub>
 800fe26:	4602      	mov	r2, r0
 800fe28:	460b      	mov	r3, r1
 800fe2a:	4606      	mov	r6, r0
 800fe2c:	460f      	mov	r7, r1
 800fe2e:	4640      	mov	r0, r8
 800fe30:	4649      	mov	r1, r9
 800fe32:	f7f0 f9f5 	bl	8000220 <__aeabi_dsub>
 800fe36:	9a05      	ldr	r2, [sp, #20]
 800fe38:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800fe3c:	1ad3      	subs	r3, r2, r3
 800fe3e:	2b31      	cmp	r3, #49	@ 0x31
 800fe40:	dc20      	bgt.n	800fe84 <__ieee754_rem_pio2+0x274>
 800fe42:	e9c4 0100 	strd	r0, r1, [r4]
 800fe46:	46c2      	mov	sl, r8
 800fe48:	46cb      	mov	fp, r9
 800fe4a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800fe4e:	4650      	mov	r0, sl
 800fe50:	4642      	mov	r2, r8
 800fe52:	464b      	mov	r3, r9
 800fe54:	4659      	mov	r1, fp
 800fe56:	f7f0 f9e3 	bl	8000220 <__aeabi_dsub>
 800fe5a:	463b      	mov	r3, r7
 800fe5c:	4632      	mov	r2, r6
 800fe5e:	f7f0 f9df 	bl	8000220 <__aeabi_dsub>
 800fe62:	9b04      	ldr	r3, [sp, #16]
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800fe6a:	f6bf af0e 	bge.w	800fc8a <__ieee754_rem_pio2+0x7a>
 800fe6e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800fe72:	6063      	str	r3, [r4, #4]
 800fe74:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800fe78:	f8c4 8000 	str.w	r8, [r4]
 800fe7c:	60a0      	str	r0, [r4, #8]
 800fe7e:	60e3      	str	r3, [r4, #12]
 800fe80:	426d      	negs	r5, r5
 800fe82:	e702      	b.n	800fc8a <__ieee754_rem_pio2+0x7a>
 800fe84:	a326      	add	r3, pc, #152	@ (adr r3, 800ff20 <__ieee754_rem_pio2+0x310>)
 800fe86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe8a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fe8e:	f7f0 fb7f 	bl	8000590 <__aeabi_dmul>
 800fe92:	4606      	mov	r6, r0
 800fe94:	460f      	mov	r7, r1
 800fe96:	4602      	mov	r2, r0
 800fe98:	460b      	mov	r3, r1
 800fe9a:	4640      	mov	r0, r8
 800fe9c:	4649      	mov	r1, r9
 800fe9e:	f7f0 f9bf 	bl	8000220 <__aeabi_dsub>
 800fea2:	4602      	mov	r2, r0
 800fea4:	460b      	mov	r3, r1
 800fea6:	4682      	mov	sl, r0
 800fea8:	468b      	mov	fp, r1
 800feaa:	4640      	mov	r0, r8
 800feac:	4649      	mov	r1, r9
 800feae:	f7f0 f9b7 	bl	8000220 <__aeabi_dsub>
 800feb2:	4632      	mov	r2, r6
 800feb4:	463b      	mov	r3, r7
 800feb6:	f7f0 f9b3 	bl	8000220 <__aeabi_dsub>
 800feba:	a31b      	add	r3, pc, #108	@ (adr r3, 800ff28 <__ieee754_rem_pio2+0x318>)
 800febc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fec0:	4606      	mov	r6, r0
 800fec2:	460f      	mov	r7, r1
 800fec4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fec8:	f7f0 fb62 	bl	8000590 <__aeabi_dmul>
 800fecc:	4632      	mov	r2, r6
 800fece:	463b      	mov	r3, r7
 800fed0:	f7f0 f9a6 	bl	8000220 <__aeabi_dsub>
 800fed4:	4606      	mov	r6, r0
 800fed6:	460f      	mov	r7, r1
 800fed8:	e764      	b.n	800fda4 <__ieee754_rem_pio2+0x194>
 800feda:	4b1b      	ldr	r3, [pc, #108]	@ (800ff48 <__ieee754_rem_pio2+0x338>)
 800fedc:	4598      	cmp	r8, r3
 800fede:	d935      	bls.n	800ff4c <__ieee754_rem_pio2+0x33c>
 800fee0:	4632      	mov	r2, r6
 800fee2:	463b      	mov	r3, r7
 800fee4:	4630      	mov	r0, r6
 800fee6:	4639      	mov	r1, r7
 800fee8:	f7f0 f99a 	bl	8000220 <__aeabi_dsub>
 800feec:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800fef0:	e9c4 0100 	strd	r0, r1, [r4]
 800fef4:	e69e      	b.n	800fc34 <__ieee754_rem_pio2+0x24>
 800fef6:	bf00      	nop
 800fef8:	54400000 	.word	0x54400000
 800fefc:	3ff921fb 	.word	0x3ff921fb
 800ff00:	1a626331 	.word	0x1a626331
 800ff04:	3dd0b461 	.word	0x3dd0b461
 800ff08:	1a600000 	.word	0x1a600000
 800ff0c:	3dd0b461 	.word	0x3dd0b461
 800ff10:	2e037073 	.word	0x2e037073
 800ff14:	3ba3198a 	.word	0x3ba3198a
 800ff18:	6dc9c883 	.word	0x6dc9c883
 800ff1c:	3fe45f30 	.word	0x3fe45f30
 800ff20:	2e000000 	.word	0x2e000000
 800ff24:	3ba3198a 	.word	0x3ba3198a
 800ff28:	252049c1 	.word	0x252049c1
 800ff2c:	397b839a 	.word	0x397b839a
 800ff30:	3fe921fb 	.word	0x3fe921fb
 800ff34:	4002d97b 	.word	0x4002d97b
 800ff38:	3ff921fb 	.word	0x3ff921fb
 800ff3c:	413921fb 	.word	0x413921fb
 800ff40:	3fe00000 	.word	0x3fe00000
 800ff44:	080113f8 	.word	0x080113f8
 800ff48:	7fefffff 	.word	0x7fefffff
 800ff4c:	ea4f 5528 	mov.w	r5, r8, asr #20
 800ff50:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800ff54:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800ff58:	4630      	mov	r0, r6
 800ff5a:	460f      	mov	r7, r1
 800ff5c:	f7f0 fdb2 	bl	8000ac4 <__aeabi_d2iz>
 800ff60:	f7f0 faac 	bl	80004bc <__aeabi_i2d>
 800ff64:	4602      	mov	r2, r0
 800ff66:	460b      	mov	r3, r1
 800ff68:	4630      	mov	r0, r6
 800ff6a:	4639      	mov	r1, r7
 800ff6c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ff70:	f7f0 f956 	bl	8000220 <__aeabi_dsub>
 800ff74:	4b22      	ldr	r3, [pc, #136]	@ (8010000 <__ieee754_rem_pio2+0x3f0>)
 800ff76:	2200      	movs	r2, #0
 800ff78:	f7f0 fb0a 	bl	8000590 <__aeabi_dmul>
 800ff7c:	460f      	mov	r7, r1
 800ff7e:	4606      	mov	r6, r0
 800ff80:	f7f0 fda0 	bl	8000ac4 <__aeabi_d2iz>
 800ff84:	f7f0 fa9a 	bl	80004bc <__aeabi_i2d>
 800ff88:	4602      	mov	r2, r0
 800ff8a:	460b      	mov	r3, r1
 800ff8c:	4630      	mov	r0, r6
 800ff8e:	4639      	mov	r1, r7
 800ff90:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ff94:	f7f0 f944 	bl	8000220 <__aeabi_dsub>
 800ff98:	4b19      	ldr	r3, [pc, #100]	@ (8010000 <__ieee754_rem_pio2+0x3f0>)
 800ff9a:	2200      	movs	r2, #0
 800ff9c:	f7f0 faf8 	bl	8000590 <__aeabi_dmul>
 800ffa0:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800ffa4:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800ffa8:	f04f 0803 	mov.w	r8, #3
 800ffac:	2600      	movs	r6, #0
 800ffae:	2700      	movs	r7, #0
 800ffb0:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800ffb4:	4632      	mov	r2, r6
 800ffb6:	463b      	mov	r3, r7
 800ffb8:	46c2      	mov	sl, r8
 800ffba:	f108 38ff 	add.w	r8, r8, #4294967295
 800ffbe:	f7f0 fd4f 	bl	8000a60 <__aeabi_dcmpeq>
 800ffc2:	2800      	cmp	r0, #0
 800ffc4:	d1f4      	bne.n	800ffb0 <__ieee754_rem_pio2+0x3a0>
 800ffc6:	4b0f      	ldr	r3, [pc, #60]	@ (8010004 <__ieee754_rem_pio2+0x3f4>)
 800ffc8:	9301      	str	r3, [sp, #4]
 800ffca:	2302      	movs	r3, #2
 800ffcc:	9300      	str	r3, [sp, #0]
 800ffce:	462a      	mov	r2, r5
 800ffd0:	4653      	mov	r3, sl
 800ffd2:	4621      	mov	r1, r4
 800ffd4:	a806      	add	r0, sp, #24
 800ffd6:	f000 fb5b 	bl	8010690 <__kernel_rem_pio2>
 800ffda:	9b04      	ldr	r3, [sp, #16]
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	4605      	mov	r5, r0
 800ffe0:	f6bf ae53 	bge.w	800fc8a <__ieee754_rem_pio2+0x7a>
 800ffe4:	e9d4 2100 	ldrd	r2, r1, [r4]
 800ffe8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ffec:	e9c4 2300 	strd	r2, r3, [r4]
 800fff0:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800fff4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800fff8:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800fffc:	e740      	b.n	800fe80 <__ieee754_rem_pio2+0x270>
 800fffe:	bf00      	nop
 8010000:	41700000 	.word	0x41700000
 8010004:	08011478 	.word	0x08011478

08010008 <fabs>:
 8010008:	ec51 0b10 	vmov	r0, r1, d0
 801000c:	4602      	mov	r2, r0
 801000e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8010012:	ec43 2b10 	vmov	d0, r2, r3
 8010016:	4770      	bx	lr

08010018 <__kernel_cosf>:
 8010018:	ee10 3a10 	vmov	r3, s0
 801001c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010020:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8010024:	eef0 6a40 	vmov.f32	s13, s0
 8010028:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801002c:	d204      	bcs.n	8010038 <__kernel_cosf+0x20>
 801002e:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8010032:	ee17 2a90 	vmov	r2, s15
 8010036:	b342      	cbz	r2, 801008a <__kernel_cosf+0x72>
 8010038:	ee26 7aa6 	vmul.f32	s14, s13, s13
 801003c:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 80100a8 <__kernel_cosf+0x90>
 8010040:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 80100ac <__kernel_cosf+0x94>
 8010044:	4a1a      	ldr	r2, [pc, #104]	@ (80100b0 <__kernel_cosf+0x98>)
 8010046:	eea7 6a27 	vfma.f32	s12, s14, s15
 801004a:	4293      	cmp	r3, r2
 801004c:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80100b4 <__kernel_cosf+0x9c>
 8010050:	eee6 7a07 	vfma.f32	s15, s12, s14
 8010054:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 80100b8 <__kernel_cosf+0xa0>
 8010058:	eea7 6a87 	vfma.f32	s12, s15, s14
 801005c:	eddf 7a17 	vldr	s15, [pc, #92]	@ 80100bc <__kernel_cosf+0xa4>
 8010060:	eee6 7a07 	vfma.f32	s15, s12, s14
 8010064:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 80100c0 <__kernel_cosf+0xa8>
 8010068:	eea7 6a87 	vfma.f32	s12, s15, s14
 801006c:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8010070:	ee26 6a07 	vmul.f32	s12, s12, s14
 8010074:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8010078:	eee7 0a06 	vfma.f32	s1, s14, s12
 801007c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010080:	d804      	bhi.n	801008c <__kernel_cosf+0x74>
 8010082:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8010086:	ee30 0a67 	vsub.f32	s0, s0, s15
 801008a:	4770      	bx	lr
 801008c:	4a0d      	ldr	r2, [pc, #52]	@ (80100c4 <__kernel_cosf+0xac>)
 801008e:	4293      	cmp	r3, r2
 8010090:	bf9a      	itte	ls
 8010092:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 8010096:	ee07 3a10 	vmovls	s14, r3
 801009a:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 801009e:	ee30 0a47 	vsub.f32	s0, s0, s14
 80100a2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80100a6:	e7ec      	b.n	8010082 <__kernel_cosf+0x6a>
 80100a8:	ad47d74e 	.word	0xad47d74e
 80100ac:	310f74f6 	.word	0x310f74f6
 80100b0:	3e999999 	.word	0x3e999999
 80100b4:	b493f27c 	.word	0xb493f27c
 80100b8:	37d00d01 	.word	0x37d00d01
 80100bc:	bab60b61 	.word	0xbab60b61
 80100c0:	3d2aaaab 	.word	0x3d2aaaab
 80100c4:	3f480000 	.word	0x3f480000

080100c8 <__kernel_sinf>:
 80100c8:	ee10 3a10 	vmov	r3, s0
 80100cc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80100d0:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 80100d4:	d204      	bcs.n	80100e0 <__kernel_sinf+0x18>
 80100d6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80100da:	ee17 3a90 	vmov	r3, s15
 80100de:	b35b      	cbz	r3, 8010138 <__kernel_sinf+0x70>
 80100e0:	ee20 7a00 	vmul.f32	s14, s0, s0
 80100e4:	eddf 7a15 	vldr	s15, [pc, #84]	@ 801013c <__kernel_sinf+0x74>
 80100e8:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8010140 <__kernel_sinf+0x78>
 80100ec:	eea7 6a27 	vfma.f32	s12, s14, s15
 80100f0:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8010144 <__kernel_sinf+0x7c>
 80100f4:	eee6 7a07 	vfma.f32	s15, s12, s14
 80100f8:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8010148 <__kernel_sinf+0x80>
 80100fc:	eea7 6a87 	vfma.f32	s12, s15, s14
 8010100:	eddf 7a12 	vldr	s15, [pc, #72]	@ 801014c <__kernel_sinf+0x84>
 8010104:	ee60 6a07 	vmul.f32	s13, s0, s14
 8010108:	eee6 7a07 	vfma.f32	s15, s12, s14
 801010c:	b930      	cbnz	r0, 801011c <__kernel_sinf+0x54>
 801010e:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8010150 <__kernel_sinf+0x88>
 8010112:	eea7 6a27 	vfma.f32	s12, s14, s15
 8010116:	eea6 0a26 	vfma.f32	s0, s12, s13
 801011a:	4770      	bx	lr
 801011c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8010120:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8010124:	eee0 7a86 	vfma.f32	s15, s1, s12
 8010128:	eed7 0a87 	vfnms.f32	s1, s15, s14
 801012c:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8010154 <__kernel_sinf+0x8c>
 8010130:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8010134:	ee30 0a60 	vsub.f32	s0, s0, s1
 8010138:	4770      	bx	lr
 801013a:	bf00      	nop
 801013c:	2f2ec9d3 	.word	0x2f2ec9d3
 8010140:	b2d72f34 	.word	0xb2d72f34
 8010144:	3638ef1b 	.word	0x3638ef1b
 8010148:	b9500d01 	.word	0xb9500d01
 801014c:	3c088889 	.word	0x3c088889
 8010150:	be2aaaab 	.word	0xbe2aaaab
 8010154:	3e2aaaab 	.word	0x3e2aaaab

08010158 <__ieee754_fmodf>:
 8010158:	b570      	push	{r4, r5, r6, lr}
 801015a:	ee10 6a90 	vmov	r6, s1
 801015e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8010162:	1e5a      	subs	r2, r3, #1
 8010164:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8010168:	d206      	bcs.n	8010178 <__ieee754_fmodf+0x20>
 801016a:	ee10 4a10 	vmov	r4, s0
 801016e:	f024 4100 	bic.w	r1, r4, #2147483648	@ 0x80000000
 8010172:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8010176:	d304      	bcc.n	8010182 <__ieee754_fmodf+0x2a>
 8010178:	ee60 0a20 	vmul.f32	s1, s0, s1
 801017c:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 8010180:	bd70      	pop	{r4, r5, r6, pc}
 8010182:	4299      	cmp	r1, r3
 8010184:	dbfc      	blt.n	8010180 <__ieee754_fmodf+0x28>
 8010186:	f004 4500 	and.w	r5, r4, #2147483648	@ 0x80000000
 801018a:	d105      	bne.n	8010198 <__ieee754_fmodf+0x40>
 801018c:	4b32      	ldr	r3, [pc, #200]	@ (8010258 <__ieee754_fmodf+0x100>)
 801018e:	eb03 7355 	add.w	r3, r3, r5, lsr #29
 8010192:	ed93 0a00 	vldr	s0, [r3]
 8010196:	e7f3      	b.n	8010180 <__ieee754_fmodf+0x28>
 8010198:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 801019c:	d146      	bne.n	801022c <__ieee754_fmodf+0xd4>
 801019e:	020a      	lsls	r2, r1, #8
 80101a0:	f06f 007d 	mvn.w	r0, #125	@ 0x7d
 80101a4:	2a00      	cmp	r2, #0
 80101a6:	dc3e      	bgt.n	8010226 <__ieee754_fmodf+0xce>
 80101a8:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 80101ac:	bf01      	itttt	eq
 80101ae:	021a      	lsleq	r2, r3, #8
 80101b0:	fab2 f282 	clzeq	r2, r2
 80101b4:	f1c2 22ff 	rsbeq	r2, r2, #4278255360	@ 0xff00ff00
 80101b8:	f502 027f 	addeq.w	r2, r2, #16711680	@ 0xff0000
 80101bc:	bf16      	itet	ne
 80101be:	15da      	asrne	r2, r3, #23
 80101c0:	3282      	addeq	r2, #130	@ 0x82
 80101c2:	3a7f      	subne	r2, #127	@ 0x7f
 80101c4:	f110 0f7e 	cmn.w	r0, #126	@ 0x7e
 80101c8:	bfbb      	ittet	lt
 80101ca:	f06f 047d 	mvnlt.w	r4, #125	@ 0x7d
 80101ce:	1a24      	sublt	r4, r4, r0
 80101d0:	f3c4 0416 	ubfxge	r4, r4, #0, #23
 80101d4:	40a1      	lsllt	r1, r4
 80101d6:	bfa8      	it	ge
 80101d8:	f444 0100 	orrge.w	r1, r4, #8388608	@ 0x800000
 80101dc:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 80101e0:	bfb5      	itete	lt
 80101e2:	f06f 047d 	mvnlt.w	r4, #125	@ 0x7d
 80101e6:	f3c6 0616 	ubfxge	r6, r6, #0, #23
 80101ea:	1aa4      	sublt	r4, r4, r2
 80101ec:	f446 0400 	orrge.w	r4, r6, #8388608	@ 0x800000
 80101f0:	bfb8      	it	lt
 80101f2:	fa03 f404 	lsllt.w	r4, r3, r4
 80101f6:	1a80      	subs	r0, r0, r2
 80101f8:	1b0b      	subs	r3, r1, r4
 80101fa:	b9d0      	cbnz	r0, 8010232 <__ieee754_fmodf+0xda>
 80101fc:	ea33 0323 	bics.w	r3, r3, r3, asr #32
 8010200:	bf28      	it	cs
 8010202:	460b      	movcs	r3, r1
 8010204:	2b00      	cmp	r3, #0
 8010206:	d0c1      	beq.n	801018c <__ieee754_fmodf+0x34>
 8010208:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801020c:	db19      	blt.n	8010242 <__ieee754_fmodf+0xea>
 801020e:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 8010212:	db19      	blt.n	8010248 <__ieee754_fmodf+0xf0>
 8010214:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8010218:	327f      	adds	r2, #127	@ 0x7f
 801021a:	432b      	orrs	r3, r5
 801021c:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8010220:	ee00 3a10 	vmov	s0, r3
 8010224:	e7ac      	b.n	8010180 <__ieee754_fmodf+0x28>
 8010226:	3801      	subs	r0, #1
 8010228:	0052      	lsls	r2, r2, #1
 801022a:	e7bb      	b.n	80101a4 <__ieee754_fmodf+0x4c>
 801022c:	15c8      	asrs	r0, r1, #23
 801022e:	387f      	subs	r0, #127	@ 0x7f
 8010230:	e7ba      	b.n	80101a8 <__ieee754_fmodf+0x50>
 8010232:	2b00      	cmp	r3, #0
 8010234:	da02      	bge.n	801023c <__ieee754_fmodf+0xe4>
 8010236:	0049      	lsls	r1, r1, #1
 8010238:	3801      	subs	r0, #1
 801023a:	e7dd      	b.n	80101f8 <__ieee754_fmodf+0xa0>
 801023c:	d0a6      	beq.n	801018c <__ieee754_fmodf+0x34>
 801023e:	0059      	lsls	r1, r3, #1
 8010240:	e7fa      	b.n	8010238 <__ieee754_fmodf+0xe0>
 8010242:	005b      	lsls	r3, r3, #1
 8010244:	3a01      	subs	r2, #1
 8010246:	e7df      	b.n	8010208 <__ieee754_fmodf+0xb0>
 8010248:	f1c2 22ff 	rsb	r2, r2, #4278255360	@ 0xff00ff00
 801024c:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 8010250:	3282      	adds	r2, #130	@ 0x82
 8010252:	4113      	asrs	r3, r2
 8010254:	432b      	orrs	r3, r5
 8010256:	e7e3      	b.n	8010220 <__ieee754_fmodf+0xc8>
 8010258:	08011580 	.word	0x08011580

0801025c <__ieee754_rem_pio2f>:
 801025c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801025e:	ee10 6a10 	vmov	r6, s0
 8010262:	4b88      	ldr	r3, [pc, #544]	@ (8010484 <__ieee754_rem_pio2f+0x228>)
 8010264:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8010268:	429d      	cmp	r5, r3
 801026a:	b087      	sub	sp, #28
 801026c:	4604      	mov	r4, r0
 801026e:	d805      	bhi.n	801027c <__ieee754_rem_pio2f+0x20>
 8010270:	2300      	movs	r3, #0
 8010272:	ed80 0a00 	vstr	s0, [r0]
 8010276:	6043      	str	r3, [r0, #4]
 8010278:	2000      	movs	r0, #0
 801027a:	e022      	b.n	80102c2 <__ieee754_rem_pio2f+0x66>
 801027c:	4b82      	ldr	r3, [pc, #520]	@ (8010488 <__ieee754_rem_pio2f+0x22c>)
 801027e:	429d      	cmp	r5, r3
 8010280:	d83a      	bhi.n	80102f8 <__ieee754_rem_pio2f+0x9c>
 8010282:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8010286:	2e00      	cmp	r6, #0
 8010288:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 801048c <__ieee754_rem_pio2f+0x230>
 801028c:	4a80      	ldr	r2, [pc, #512]	@ (8010490 <__ieee754_rem_pio2f+0x234>)
 801028e:	f023 030f 	bic.w	r3, r3, #15
 8010292:	dd18      	ble.n	80102c6 <__ieee754_rem_pio2f+0x6a>
 8010294:	4293      	cmp	r3, r2
 8010296:	ee70 7a47 	vsub.f32	s15, s0, s14
 801029a:	bf09      	itett	eq
 801029c:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8010494 <__ieee754_rem_pio2f+0x238>
 80102a0:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8010498 <__ieee754_rem_pio2f+0x23c>
 80102a4:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 801049c <__ieee754_rem_pio2f+0x240>
 80102a8:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 80102ac:	ee37 7ae6 	vsub.f32	s14, s15, s13
 80102b0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80102b4:	ed80 7a00 	vstr	s14, [r0]
 80102b8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80102bc:	edc0 7a01 	vstr	s15, [r0, #4]
 80102c0:	2001      	movs	r0, #1
 80102c2:	b007      	add	sp, #28
 80102c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80102c6:	4293      	cmp	r3, r2
 80102c8:	ee70 7a07 	vadd.f32	s15, s0, s14
 80102cc:	bf09      	itett	eq
 80102ce:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8010494 <__ieee754_rem_pio2f+0x238>
 80102d2:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8010498 <__ieee754_rem_pio2f+0x23c>
 80102d6:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 801049c <__ieee754_rem_pio2f+0x240>
 80102da:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 80102de:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80102e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80102e6:	ed80 7a00 	vstr	s14, [r0]
 80102ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80102ee:	edc0 7a01 	vstr	s15, [r0, #4]
 80102f2:	f04f 30ff 	mov.w	r0, #4294967295
 80102f6:	e7e4      	b.n	80102c2 <__ieee754_rem_pio2f+0x66>
 80102f8:	4b69      	ldr	r3, [pc, #420]	@ (80104a0 <__ieee754_rem_pio2f+0x244>)
 80102fa:	429d      	cmp	r5, r3
 80102fc:	d873      	bhi.n	80103e6 <__ieee754_rem_pio2f+0x18a>
 80102fe:	f000 f8dd 	bl	80104bc <fabsf>
 8010302:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 80104a4 <__ieee754_rem_pio2f+0x248>
 8010306:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801030a:	eee0 7a07 	vfma.f32	s15, s0, s14
 801030e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010312:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8010316:	ee17 0a90 	vmov	r0, s15
 801031a:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 801048c <__ieee754_rem_pio2f+0x230>
 801031e:	eea7 0a67 	vfms.f32	s0, s14, s15
 8010322:	281f      	cmp	r0, #31
 8010324:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8010498 <__ieee754_rem_pio2f+0x23c>
 8010328:	ee67 7a27 	vmul.f32	s15, s14, s15
 801032c:	eeb1 6a47 	vneg.f32	s12, s14
 8010330:	ee70 6a67 	vsub.f32	s13, s0, s15
 8010334:	ee16 1a90 	vmov	r1, s13
 8010338:	dc09      	bgt.n	801034e <__ieee754_rem_pio2f+0xf2>
 801033a:	4a5b      	ldr	r2, [pc, #364]	@ (80104a8 <__ieee754_rem_pio2f+0x24c>)
 801033c:	1e47      	subs	r7, r0, #1
 801033e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8010342:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 8010346:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 801034a:	4293      	cmp	r3, r2
 801034c:	d107      	bne.n	801035e <__ieee754_rem_pio2f+0x102>
 801034e:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 8010352:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 8010356:	2a08      	cmp	r2, #8
 8010358:	ea4f 53e5 	mov.w	r3, r5, asr #23
 801035c:	dc14      	bgt.n	8010388 <__ieee754_rem_pio2f+0x12c>
 801035e:	6021      	str	r1, [r4, #0]
 8010360:	ed94 7a00 	vldr	s14, [r4]
 8010364:	ee30 0a47 	vsub.f32	s0, s0, s14
 8010368:	2e00      	cmp	r6, #0
 801036a:	ee30 0a67 	vsub.f32	s0, s0, s15
 801036e:	ed84 0a01 	vstr	s0, [r4, #4]
 8010372:	daa6      	bge.n	80102c2 <__ieee754_rem_pio2f+0x66>
 8010374:	eeb1 7a47 	vneg.f32	s14, s14
 8010378:	eeb1 0a40 	vneg.f32	s0, s0
 801037c:	ed84 7a00 	vstr	s14, [r4]
 8010380:	ed84 0a01 	vstr	s0, [r4, #4]
 8010384:	4240      	negs	r0, r0
 8010386:	e79c      	b.n	80102c2 <__ieee754_rem_pio2f+0x66>
 8010388:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8010494 <__ieee754_rem_pio2f+0x238>
 801038c:	eef0 6a40 	vmov.f32	s13, s0
 8010390:	eee6 6a25 	vfma.f32	s13, s12, s11
 8010394:	ee70 7a66 	vsub.f32	s15, s0, s13
 8010398:	eee6 7a25 	vfma.f32	s15, s12, s11
 801039c:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 801049c <__ieee754_rem_pio2f+0x240>
 80103a0:	eed7 7a25 	vfnms.f32	s15, s14, s11
 80103a4:	ee76 5ae7 	vsub.f32	s11, s13, s15
 80103a8:	ee15 2a90 	vmov	r2, s11
 80103ac:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80103b0:	1a5b      	subs	r3, r3, r1
 80103b2:	2b19      	cmp	r3, #25
 80103b4:	dc04      	bgt.n	80103c0 <__ieee754_rem_pio2f+0x164>
 80103b6:	edc4 5a00 	vstr	s11, [r4]
 80103ba:	eeb0 0a66 	vmov.f32	s0, s13
 80103be:	e7cf      	b.n	8010360 <__ieee754_rem_pio2f+0x104>
 80103c0:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 80104ac <__ieee754_rem_pio2f+0x250>
 80103c4:	eeb0 0a66 	vmov.f32	s0, s13
 80103c8:	eea6 0a25 	vfma.f32	s0, s12, s11
 80103cc:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80103d0:	eddf 6a37 	vldr	s13, [pc, #220]	@ 80104b0 <__ieee754_rem_pio2f+0x254>
 80103d4:	eee6 7a25 	vfma.f32	s15, s12, s11
 80103d8:	eed7 7a26 	vfnms.f32	s15, s14, s13
 80103dc:	ee30 7a67 	vsub.f32	s14, s0, s15
 80103e0:	ed84 7a00 	vstr	s14, [r4]
 80103e4:	e7bc      	b.n	8010360 <__ieee754_rem_pio2f+0x104>
 80103e6:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 80103ea:	d306      	bcc.n	80103fa <__ieee754_rem_pio2f+0x19e>
 80103ec:	ee70 7a40 	vsub.f32	s15, s0, s0
 80103f0:	edc0 7a01 	vstr	s15, [r0, #4]
 80103f4:	edc0 7a00 	vstr	s15, [r0]
 80103f8:	e73e      	b.n	8010278 <__ieee754_rem_pio2f+0x1c>
 80103fa:	15ea      	asrs	r2, r5, #23
 80103fc:	3a86      	subs	r2, #134	@ 0x86
 80103fe:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8010402:	ee07 3a90 	vmov	s15, r3
 8010406:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801040a:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 80104b4 <__ieee754_rem_pio2f+0x258>
 801040e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010412:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010416:	ed8d 7a03 	vstr	s14, [sp, #12]
 801041a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801041e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8010422:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010426:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801042a:	ed8d 7a04 	vstr	s14, [sp, #16]
 801042e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8010432:	eef5 7a40 	vcmp.f32	s15, #0.0
 8010436:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801043a:	edcd 7a05 	vstr	s15, [sp, #20]
 801043e:	d11e      	bne.n	801047e <__ieee754_rem_pio2f+0x222>
 8010440:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8010444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010448:	bf0c      	ite	eq
 801044a:	2301      	moveq	r3, #1
 801044c:	2302      	movne	r3, #2
 801044e:	491a      	ldr	r1, [pc, #104]	@ (80104b8 <__ieee754_rem_pio2f+0x25c>)
 8010450:	9101      	str	r1, [sp, #4]
 8010452:	2102      	movs	r1, #2
 8010454:	9100      	str	r1, [sp, #0]
 8010456:	a803      	add	r0, sp, #12
 8010458:	4621      	mov	r1, r4
 801045a:	f000 fc69 	bl	8010d30 <__kernel_rem_pio2f>
 801045e:	2e00      	cmp	r6, #0
 8010460:	f6bf af2f 	bge.w	80102c2 <__ieee754_rem_pio2f+0x66>
 8010464:	edd4 7a00 	vldr	s15, [r4]
 8010468:	eef1 7a67 	vneg.f32	s15, s15
 801046c:	edc4 7a00 	vstr	s15, [r4]
 8010470:	edd4 7a01 	vldr	s15, [r4, #4]
 8010474:	eef1 7a67 	vneg.f32	s15, s15
 8010478:	edc4 7a01 	vstr	s15, [r4, #4]
 801047c:	e782      	b.n	8010384 <__ieee754_rem_pio2f+0x128>
 801047e:	2303      	movs	r3, #3
 8010480:	e7e5      	b.n	801044e <__ieee754_rem_pio2f+0x1f2>
 8010482:	bf00      	nop
 8010484:	3f490fd8 	.word	0x3f490fd8
 8010488:	4016cbe3 	.word	0x4016cbe3
 801048c:	3fc90f80 	.word	0x3fc90f80
 8010490:	3fc90fd0 	.word	0x3fc90fd0
 8010494:	37354400 	.word	0x37354400
 8010498:	37354443 	.word	0x37354443
 801049c:	2e85a308 	.word	0x2e85a308
 80104a0:	43490f80 	.word	0x43490f80
 80104a4:	3f22f984 	.word	0x3f22f984
 80104a8:	08011588 	.word	0x08011588
 80104ac:	2e85a300 	.word	0x2e85a300
 80104b0:	248d3132 	.word	0x248d3132
 80104b4:	43800000 	.word	0x43800000
 80104b8:	08011608 	.word	0x08011608

080104bc <fabsf>:
 80104bc:	ee10 3a10 	vmov	r3, s0
 80104c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80104c4:	ee00 3a10 	vmov	s0, r3
 80104c8:	4770      	bx	lr
 80104ca:	0000      	movs	r0, r0
 80104cc:	0000      	movs	r0, r0
	...

080104d0 <scalbn>:
 80104d0:	b570      	push	{r4, r5, r6, lr}
 80104d2:	ec55 4b10 	vmov	r4, r5, d0
 80104d6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80104da:	4606      	mov	r6, r0
 80104dc:	462b      	mov	r3, r5
 80104de:	b991      	cbnz	r1, 8010506 <scalbn+0x36>
 80104e0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80104e4:	4323      	orrs	r3, r4
 80104e6:	d03b      	beq.n	8010560 <scalbn+0x90>
 80104e8:	4b33      	ldr	r3, [pc, #204]	@ (80105b8 <scalbn+0xe8>)
 80104ea:	4620      	mov	r0, r4
 80104ec:	4629      	mov	r1, r5
 80104ee:	2200      	movs	r2, #0
 80104f0:	f7f0 f84e 	bl	8000590 <__aeabi_dmul>
 80104f4:	4b31      	ldr	r3, [pc, #196]	@ (80105bc <scalbn+0xec>)
 80104f6:	429e      	cmp	r6, r3
 80104f8:	4604      	mov	r4, r0
 80104fa:	460d      	mov	r5, r1
 80104fc:	da0f      	bge.n	801051e <scalbn+0x4e>
 80104fe:	a326      	add	r3, pc, #152	@ (adr r3, 8010598 <scalbn+0xc8>)
 8010500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010504:	e01e      	b.n	8010544 <scalbn+0x74>
 8010506:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801050a:	4291      	cmp	r1, r2
 801050c:	d10b      	bne.n	8010526 <scalbn+0x56>
 801050e:	4622      	mov	r2, r4
 8010510:	4620      	mov	r0, r4
 8010512:	4629      	mov	r1, r5
 8010514:	f7ef fe86 	bl	8000224 <__adddf3>
 8010518:	4604      	mov	r4, r0
 801051a:	460d      	mov	r5, r1
 801051c:	e020      	b.n	8010560 <scalbn+0x90>
 801051e:	460b      	mov	r3, r1
 8010520:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8010524:	3936      	subs	r1, #54	@ 0x36
 8010526:	f24c 3250 	movw	r2, #50000	@ 0xc350
 801052a:	4296      	cmp	r6, r2
 801052c:	dd0d      	ble.n	801054a <scalbn+0x7a>
 801052e:	2d00      	cmp	r5, #0
 8010530:	a11b      	add	r1, pc, #108	@ (adr r1, 80105a0 <scalbn+0xd0>)
 8010532:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010536:	da02      	bge.n	801053e <scalbn+0x6e>
 8010538:	a11b      	add	r1, pc, #108	@ (adr r1, 80105a8 <scalbn+0xd8>)
 801053a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801053e:	a318      	add	r3, pc, #96	@ (adr r3, 80105a0 <scalbn+0xd0>)
 8010540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010544:	f7f0 f824 	bl	8000590 <__aeabi_dmul>
 8010548:	e7e6      	b.n	8010518 <scalbn+0x48>
 801054a:	1872      	adds	r2, r6, r1
 801054c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8010550:	428a      	cmp	r2, r1
 8010552:	dcec      	bgt.n	801052e <scalbn+0x5e>
 8010554:	2a00      	cmp	r2, #0
 8010556:	dd06      	ble.n	8010566 <scalbn+0x96>
 8010558:	f36f 531e 	bfc	r3, #20, #11
 801055c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8010560:	ec45 4b10 	vmov	d0, r4, r5
 8010564:	bd70      	pop	{r4, r5, r6, pc}
 8010566:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 801056a:	da08      	bge.n	801057e <scalbn+0xae>
 801056c:	2d00      	cmp	r5, #0
 801056e:	a10a      	add	r1, pc, #40	@ (adr r1, 8010598 <scalbn+0xc8>)
 8010570:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010574:	dac3      	bge.n	80104fe <scalbn+0x2e>
 8010576:	a10e      	add	r1, pc, #56	@ (adr r1, 80105b0 <scalbn+0xe0>)
 8010578:	e9d1 0100 	ldrd	r0, r1, [r1]
 801057c:	e7bf      	b.n	80104fe <scalbn+0x2e>
 801057e:	3236      	adds	r2, #54	@ 0x36
 8010580:	f36f 531e 	bfc	r3, #20, #11
 8010584:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8010588:	4620      	mov	r0, r4
 801058a:	4b0d      	ldr	r3, [pc, #52]	@ (80105c0 <scalbn+0xf0>)
 801058c:	4629      	mov	r1, r5
 801058e:	2200      	movs	r2, #0
 8010590:	e7d8      	b.n	8010544 <scalbn+0x74>
 8010592:	bf00      	nop
 8010594:	f3af 8000 	nop.w
 8010598:	c2f8f359 	.word	0xc2f8f359
 801059c:	01a56e1f 	.word	0x01a56e1f
 80105a0:	8800759c 	.word	0x8800759c
 80105a4:	7e37e43c 	.word	0x7e37e43c
 80105a8:	8800759c 	.word	0x8800759c
 80105ac:	fe37e43c 	.word	0xfe37e43c
 80105b0:	c2f8f359 	.word	0xc2f8f359
 80105b4:	81a56e1f 	.word	0x81a56e1f
 80105b8:	43500000 	.word	0x43500000
 80105bc:	ffff3cb0 	.word	0xffff3cb0
 80105c0:	3c900000 	.word	0x3c900000

080105c4 <scalbnf>:
 80105c4:	ee10 3a10 	vmov	r3, s0
 80105c8:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 80105cc:	d02b      	beq.n	8010626 <scalbnf+0x62>
 80105ce:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80105d2:	d302      	bcc.n	80105da <scalbnf+0x16>
 80105d4:	ee30 0a00 	vadd.f32	s0, s0, s0
 80105d8:	4770      	bx	lr
 80105da:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 80105de:	d123      	bne.n	8010628 <scalbnf+0x64>
 80105e0:	4b24      	ldr	r3, [pc, #144]	@ (8010674 <scalbnf+0xb0>)
 80105e2:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8010678 <scalbnf+0xb4>
 80105e6:	4298      	cmp	r0, r3
 80105e8:	ee20 0a27 	vmul.f32	s0, s0, s15
 80105ec:	db17      	blt.n	801061e <scalbnf+0x5a>
 80105ee:	ee10 3a10 	vmov	r3, s0
 80105f2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80105f6:	3a19      	subs	r2, #25
 80105f8:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80105fc:	4288      	cmp	r0, r1
 80105fe:	dd15      	ble.n	801062c <scalbnf+0x68>
 8010600:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 801067c <scalbnf+0xb8>
 8010604:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8010680 <scalbnf+0xbc>
 8010608:	ee10 3a10 	vmov	r3, s0
 801060c:	eeb0 7a67 	vmov.f32	s14, s15
 8010610:	2b00      	cmp	r3, #0
 8010612:	bfb8      	it	lt
 8010614:	eef0 7a66 	vmovlt.f32	s15, s13
 8010618:	ee27 0a87 	vmul.f32	s0, s15, s14
 801061c:	4770      	bx	lr
 801061e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8010684 <scalbnf+0xc0>
 8010622:	ee27 0a80 	vmul.f32	s0, s15, s0
 8010626:	4770      	bx	lr
 8010628:	0dd2      	lsrs	r2, r2, #23
 801062a:	e7e5      	b.n	80105f8 <scalbnf+0x34>
 801062c:	4410      	add	r0, r2
 801062e:	28fe      	cmp	r0, #254	@ 0xfe
 8010630:	dce6      	bgt.n	8010600 <scalbnf+0x3c>
 8010632:	2800      	cmp	r0, #0
 8010634:	dd06      	ble.n	8010644 <scalbnf+0x80>
 8010636:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801063a:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801063e:	ee00 3a10 	vmov	s0, r3
 8010642:	4770      	bx	lr
 8010644:	f110 0f16 	cmn.w	r0, #22
 8010648:	da09      	bge.n	801065e <scalbnf+0x9a>
 801064a:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8010684 <scalbnf+0xc0>
 801064e:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8010688 <scalbnf+0xc4>
 8010652:	ee10 3a10 	vmov	r3, s0
 8010656:	eeb0 7a67 	vmov.f32	s14, s15
 801065a:	2b00      	cmp	r3, #0
 801065c:	e7d9      	b.n	8010612 <scalbnf+0x4e>
 801065e:	3019      	adds	r0, #25
 8010660:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8010664:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8010668:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 801068c <scalbnf+0xc8>
 801066c:	ee07 3a90 	vmov	s15, r3
 8010670:	e7d7      	b.n	8010622 <scalbnf+0x5e>
 8010672:	bf00      	nop
 8010674:	ffff3cb0 	.word	0xffff3cb0
 8010678:	4c000000 	.word	0x4c000000
 801067c:	7149f2ca 	.word	0x7149f2ca
 8010680:	f149f2ca 	.word	0xf149f2ca
 8010684:	0da24260 	.word	0x0da24260
 8010688:	8da24260 	.word	0x8da24260
 801068c:	33000000 	.word	0x33000000

08010690 <__kernel_rem_pio2>:
 8010690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010694:	ed2d 8b02 	vpush	{d8}
 8010698:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 801069c:	f112 0f14 	cmn.w	r2, #20
 80106a0:	9306      	str	r3, [sp, #24]
 80106a2:	9104      	str	r1, [sp, #16]
 80106a4:	4bc2      	ldr	r3, [pc, #776]	@ (80109b0 <__kernel_rem_pio2+0x320>)
 80106a6:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 80106a8:	9008      	str	r0, [sp, #32]
 80106aa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80106ae:	9300      	str	r3, [sp, #0]
 80106b0:	9b06      	ldr	r3, [sp, #24]
 80106b2:	f103 33ff 	add.w	r3, r3, #4294967295
 80106b6:	bfa8      	it	ge
 80106b8:	1ed4      	subge	r4, r2, #3
 80106ba:	9305      	str	r3, [sp, #20]
 80106bc:	bfb2      	itee	lt
 80106be:	2400      	movlt	r4, #0
 80106c0:	2318      	movge	r3, #24
 80106c2:	fb94 f4f3 	sdivge	r4, r4, r3
 80106c6:	f06f 0317 	mvn.w	r3, #23
 80106ca:	fb04 3303 	mla	r3, r4, r3, r3
 80106ce:	eb03 0b02 	add.w	fp, r3, r2
 80106d2:	9b00      	ldr	r3, [sp, #0]
 80106d4:	9a05      	ldr	r2, [sp, #20]
 80106d6:	ed9f 8bb2 	vldr	d8, [pc, #712]	@ 80109a0 <__kernel_rem_pio2+0x310>
 80106da:	eb03 0802 	add.w	r8, r3, r2
 80106de:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 80106e0:	1aa7      	subs	r7, r4, r2
 80106e2:	ae20      	add	r6, sp, #128	@ 0x80
 80106e4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80106e8:	2500      	movs	r5, #0
 80106ea:	4545      	cmp	r5, r8
 80106ec:	dd12      	ble.n	8010714 <__kernel_rem_pio2+0x84>
 80106ee:	9b06      	ldr	r3, [sp, #24]
 80106f0:	aa20      	add	r2, sp, #128	@ 0x80
 80106f2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80106f6:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 80106fa:	2700      	movs	r7, #0
 80106fc:	9b00      	ldr	r3, [sp, #0]
 80106fe:	429f      	cmp	r7, r3
 8010700:	dc2e      	bgt.n	8010760 <__kernel_rem_pio2+0xd0>
 8010702:	ed9f 7ba7 	vldr	d7, [pc, #668]	@ 80109a0 <__kernel_rem_pio2+0x310>
 8010706:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801070a:	ed8d 7b02 	vstr	d7, [sp, #8]
 801070e:	46a8      	mov	r8, r5
 8010710:	2600      	movs	r6, #0
 8010712:	e01b      	b.n	801074c <__kernel_rem_pio2+0xbc>
 8010714:	42ef      	cmn	r7, r5
 8010716:	d407      	bmi.n	8010728 <__kernel_rem_pio2+0x98>
 8010718:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801071c:	f7ef fece 	bl	80004bc <__aeabi_i2d>
 8010720:	e8e6 0102 	strd	r0, r1, [r6], #8
 8010724:	3501      	adds	r5, #1
 8010726:	e7e0      	b.n	80106ea <__kernel_rem_pio2+0x5a>
 8010728:	ec51 0b18 	vmov	r0, r1, d8
 801072c:	e7f8      	b.n	8010720 <__kernel_rem_pio2+0x90>
 801072e:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 8010732:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8010736:	f7ef ff2b 	bl	8000590 <__aeabi_dmul>
 801073a:	4602      	mov	r2, r0
 801073c:	460b      	mov	r3, r1
 801073e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010742:	f7ef fd6f 	bl	8000224 <__adddf3>
 8010746:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801074a:	3601      	adds	r6, #1
 801074c:	9b05      	ldr	r3, [sp, #20]
 801074e:	429e      	cmp	r6, r3
 8010750:	dded      	ble.n	801072e <__kernel_rem_pio2+0x9e>
 8010752:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010756:	3701      	adds	r7, #1
 8010758:	ecaa 7b02 	vstmia	sl!, {d7}
 801075c:	3508      	adds	r5, #8
 801075e:	e7cd      	b.n	80106fc <__kernel_rem_pio2+0x6c>
 8010760:	9b00      	ldr	r3, [sp, #0]
 8010762:	f8dd 8000 	ldr.w	r8, [sp]
 8010766:	aa0c      	add	r2, sp, #48	@ 0x30
 8010768:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801076c:	930a      	str	r3, [sp, #40]	@ 0x28
 801076e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8010770:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8010774:	9309      	str	r3, [sp, #36]	@ 0x24
 8010776:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 801077a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801077c:	ab98      	add	r3, sp, #608	@ 0x260
 801077e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8010782:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8010786:	ed8d 7b02 	vstr	d7, [sp, #8]
 801078a:	ac0c      	add	r4, sp, #48	@ 0x30
 801078c:	ab70      	add	r3, sp, #448	@ 0x1c0
 801078e:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8010792:	46a1      	mov	r9, r4
 8010794:	46c2      	mov	sl, r8
 8010796:	f1ba 0f00 	cmp.w	sl, #0
 801079a:	dc77      	bgt.n	801088c <__kernel_rem_pio2+0x1fc>
 801079c:	4658      	mov	r0, fp
 801079e:	ed9d 0b02 	vldr	d0, [sp, #8]
 80107a2:	f7ff fe95 	bl	80104d0 <scalbn>
 80107a6:	ec57 6b10 	vmov	r6, r7, d0
 80107aa:	2200      	movs	r2, #0
 80107ac:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 80107b0:	4630      	mov	r0, r6
 80107b2:	4639      	mov	r1, r7
 80107b4:	f7ef feec 	bl	8000590 <__aeabi_dmul>
 80107b8:	ec41 0b10 	vmov	d0, r0, r1
 80107bc:	f000 fd20 	bl	8011200 <floor>
 80107c0:	4b7c      	ldr	r3, [pc, #496]	@ (80109b4 <__kernel_rem_pio2+0x324>)
 80107c2:	ec51 0b10 	vmov	r0, r1, d0
 80107c6:	2200      	movs	r2, #0
 80107c8:	f7ef fee2 	bl	8000590 <__aeabi_dmul>
 80107cc:	4602      	mov	r2, r0
 80107ce:	460b      	mov	r3, r1
 80107d0:	4630      	mov	r0, r6
 80107d2:	4639      	mov	r1, r7
 80107d4:	f7ef fd24 	bl	8000220 <__aeabi_dsub>
 80107d8:	460f      	mov	r7, r1
 80107da:	4606      	mov	r6, r0
 80107dc:	f7f0 f972 	bl	8000ac4 <__aeabi_d2iz>
 80107e0:	9002      	str	r0, [sp, #8]
 80107e2:	f7ef fe6b 	bl	80004bc <__aeabi_i2d>
 80107e6:	4602      	mov	r2, r0
 80107e8:	460b      	mov	r3, r1
 80107ea:	4630      	mov	r0, r6
 80107ec:	4639      	mov	r1, r7
 80107ee:	f7ef fd17 	bl	8000220 <__aeabi_dsub>
 80107f2:	f1bb 0f00 	cmp.w	fp, #0
 80107f6:	4606      	mov	r6, r0
 80107f8:	460f      	mov	r7, r1
 80107fa:	dd6c      	ble.n	80108d6 <__kernel_rem_pio2+0x246>
 80107fc:	f108 31ff 	add.w	r1, r8, #4294967295
 8010800:	ab0c      	add	r3, sp, #48	@ 0x30
 8010802:	9d02      	ldr	r5, [sp, #8]
 8010804:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010808:	f1cb 0018 	rsb	r0, fp, #24
 801080c:	fa43 f200 	asr.w	r2, r3, r0
 8010810:	4415      	add	r5, r2
 8010812:	4082      	lsls	r2, r0
 8010814:	1a9b      	subs	r3, r3, r2
 8010816:	aa0c      	add	r2, sp, #48	@ 0x30
 8010818:	9502      	str	r5, [sp, #8]
 801081a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801081e:	f1cb 0217 	rsb	r2, fp, #23
 8010822:	fa43 f902 	asr.w	r9, r3, r2
 8010826:	f1b9 0f00 	cmp.w	r9, #0
 801082a:	dd64      	ble.n	80108f6 <__kernel_rem_pio2+0x266>
 801082c:	9b02      	ldr	r3, [sp, #8]
 801082e:	2200      	movs	r2, #0
 8010830:	3301      	adds	r3, #1
 8010832:	9302      	str	r3, [sp, #8]
 8010834:	4615      	mov	r5, r2
 8010836:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 801083a:	4590      	cmp	r8, r2
 801083c:	f300 80a1 	bgt.w	8010982 <__kernel_rem_pio2+0x2f2>
 8010840:	f1bb 0f00 	cmp.w	fp, #0
 8010844:	dd07      	ble.n	8010856 <__kernel_rem_pio2+0x1c6>
 8010846:	f1bb 0f01 	cmp.w	fp, #1
 801084a:	f000 80c1 	beq.w	80109d0 <__kernel_rem_pio2+0x340>
 801084e:	f1bb 0f02 	cmp.w	fp, #2
 8010852:	f000 80c8 	beq.w	80109e6 <__kernel_rem_pio2+0x356>
 8010856:	f1b9 0f02 	cmp.w	r9, #2
 801085a:	d14c      	bne.n	80108f6 <__kernel_rem_pio2+0x266>
 801085c:	4632      	mov	r2, r6
 801085e:	463b      	mov	r3, r7
 8010860:	4955      	ldr	r1, [pc, #340]	@ (80109b8 <__kernel_rem_pio2+0x328>)
 8010862:	2000      	movs	r0, #0
 8010864:	f7ef fcdc 	bl	8000220 <__aeabi_dsub>
 8010868:	4606      	mov	r6, r0
 801086a:	460f      	mov	r7, r1
 801086c:	2d00      	cmp	r5, #0
 801086e:	d042      	beq.n	80108f6 <__kernel_rem_pio2+0x266>
 8010870:	4658      	mov	r0, fp
 8010872:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 80109a8 <__kernel_rem_pio2+0x318>
 8010876:	f7ff fe2b 	bl	80104d0 <scalbn>
 801087a:	4630      	mov	r0, r6
 801087c:	4639      	mov	r1, r7
 801087e:	ec53 2b10 	vmov	r2, r3, d0
 8010882:	f7ef fccd 	bl	8000220 <__aeabi_dsub>
 8010886:	4606      	mov	r6, r0
 8010888:	460f      	mov	r7, r1
 801088a:	e034      	b.n	80108f6 <__kernel_rem_pio2+0x266>
 801088c:	4b4b      	ldr	r3, [pc, #300]	@ (80109bc <__kernel_rem_pio2+0x32c>)
 801088e:	2200      	movs	r2, #0
 8010890:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010894:	f7ef fe7c 	bl	8000590 <__aeabi_dmul>
 8010898:	f7f0 f914 	bl	8000ac4 <__aeabi_d2iz>
 801089c:	f7ef fe0e 	bl	80004bc <__aeabi_i2d>
 80108a0:	4b47      	ldr	r3, [pc, #284]	@ (80109c0 <__kernel_rem_pio2+0x330>)
 80108a2:	2200      	movs	r2, #0
 80108a4:	4606      	mov	r6, r0
 80108a6:	460f      	mov	r7, r1
 80108a8:	f7ef fe72 	bl	8000590 <__aeabi_dmul>
 80108ac:	4602      	mov	r2, r0
 80108ae:	460b      	mov	r3, r1
 80108b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80108b4:	f7ef fcb4 	bl	8000220 <__aeabi_dsub>
 80108b8:	f7f0 f904 	bl	8000ac4 <__aeabi_d2iz>
 80108bc:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80108c0:	f849 0b04 	str.w	r0, [r9], #4
 80108c4:	4639      	mov	r1, r7
 80108c6:	4630      	mov	r0, r6
 80108c8:	f7ef fcac 	bl	8000224 <__adddf3>
 80108cc:	f10a 3aff 	add.w	sl, sl, #4294967295
 80108d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80108d4:	e75f      	b.n	8010796 <__kernel_rem_pio2+0x106>
 80108d6:	d107      	bne.n	80108e8 <__kernel_rem_pio2+0x258>
 80108d8:	f108 33ff 	add.w	r3, r8, #4294967295
 80108dc:	aa0c      	add	r2, sp, #48	@ 0x30
 80108de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80108e2:	ea4f 59e3 	mov.w	r9, r3, asr #23
 80108e6:	e79e      	b.n	8010826 <__kernel_rem_pio2+0x196>
 80108e8:	4b36      	ldr	r3, [pc, #216]	@ (80109c4 <__kernel_rem_pio2+0x334>)
 80108ea:	2200      	movs	r2, #0
 80108ec:	f7f0 f8d6 	bl	8000a9c <__aeabi_dcmpge>
 80108f0:	2800      	cmp	r0, #0
 80108f2:	d143      	bne.n	801097c <__kernel_rem_pio2+0x2ec>
 80108f4:	4681      	mov	r9, r0
 80108f6:	2200      	movs	r2, #0
 80108f8:	2300      	movs	r3, #0
 80108fa:	4630      	mov	r0, r6
 80108fc:	4639      	mov	r1, r7
 80108fe:	f7f0 f8af 	bl	8000a60 <__aeabi_dcmpeq>
 8010902:	2800      	cmp	r0, #0
 8010904:	f000 80c1 	beq.w	8010a8a <__kernel_rem_pio2+0x3fa>
 8010908:	f108 33ff 	add.w	r3, r8, #4294967295
 801090c:	2200      	movs	r2, #0
 801090e:	9900      	ldr	r1, [sp, #0]
 8010910:	428b      	cmp	r3, r1
 8010912:	da70      	bge.n	80109f6 <__kernel_rem_pio2+0x366>
 8010914:	2a00      	cmp	r2, #0
 8010916:	f000 808b 	beq.w	8010a30 <__kernel_rem_pio2+0x3a0>
 801091a:	f108 38ff 	add.w	r8, r8, #4294967295
 801091e:	ab0c      	add	r3, sp, #48	@ 0x30
 8010920:	f1ab 0b18 	sub.w	fp, fp, #24
 8010924:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8010928:	2b00      	cmp	r3, #0
 801092a:	d0f6      	beq.n	801091a <__kernel_rem_pio2+0x28a>
 801092c:	4658      	mov	r0, fp
 801092e:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 80109a8 <__kernel_rem_pio2+0x318>
 8010932:	f7ff fdcd 	bl	80104d0 <scalbn>
 8010936:	f108 0301 	add.w	r3, r8, #1
 801093a:	00da      	lsls	r2, r3, #3
 801093c:	9205      	str	r2, [sp, #20]
 801093e:	ec55 4b10 	vmov	r4, r5, d0
 8010942:	aa70      	add	r2, sp, #448	@ 0x1c0
 8010944:	f8df b074 	ldr.w	fp, [pc, #116]	@ 80109bc <__kernel_rem_pio2+0x32c>
 8010948:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 801094c:	4646      	mov	r6, r8
 801094e:	f04f 0a00 	mov.w	sl, #0
 8010952:	2e00      	cmp	r6, #0
 8010954:	f280 80d1 	bge.w	8010afa <__kernel_rem_pio2+0x46a>
 8010958:	4644      	mov	r4, r8
 801095a:	2c00      	cmp	r4, #0
 801095c:	f2c0 80ff 	blt.w	8010b5e <__kernel_rem_pio2+0x4ce>
 8010960:	4b19      	ldr	r3, [pc, #100]	@ (80109c8 <__kernel_rem_pio2+0x338>)
 8010962:	461f      	mov	r7, r3
 8010964:	ab70      	add	r3, sp, #448	@ 0x1c0
 8010966:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801096a:	9306      	str	r3, [sp, #24]
 801096c:	f04f 0a00 	mov.w	sl, #0
 8010970:	f04f 0b00 	mov.w	fp, #0
 8010974:	2600      	movs	r6, #0
 8010976:	eba8 0504 	sub.w	r5, r8, r4
 801097a:	e0e4      	b.n	8010b46 <__kernel_rem_pio2+0x4b6>
 801097c:	f04f 0902 	mov.w	r9, #2
 8010980:	e754      	b.n	801082c <__kernel_rem_pio2+0x19c>
 8010982:	f854 3b04 	ldr.w	r3, [r4], #4
 8010986:	bb0d      	cbnz	r5, 80109cc <__kernel_rem_pio2+0x33c>
 8010988:	b123      	cbz	r3, 8010994 <__kernel_rem_pio2+0x304>
 801098a:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 801098e:	f844 3c04 	str.w	r3, [r4, #-4]
 8010992:	2301      	movs	r3, #1
 8010994:	3201      	adds	r2, #1
 8010996:	461d      	mov	r5, r3
 8010998:	e74f      	b.n	801083a <__kernel_rem_pio2+0x1aa>
 801099a:	bf00      	nop
 801099c:	f3af 8000 	nop.w
	...
 80109ac:	3ff00000 	.word	0x3ff00000
 80109b0:	08011960 	.word	0x08011960
 80109b4:	40200000 	.word	0x40200000
 80109b8:	3ff00000 	.word	0x3ff00000
 80109bc:	3e700000 	.word	0x3e700000
 80109c0:	41700000 	.word	0x41700000
 80109c4:	3fe00000 	.word	0x3fe00000
 80109c8:	08011920 	.word	0x08011920
 80109cc:	1acb      	subs	r3, r1, r3
 80109ce:	e7de      	b.n	801098e <__kernel_rem_pio2+0x2fe>
 80109d0:	f108 32ff 	add.w	r2, r8, #4294967295
 80109d4:	ab0c      	add	r3, sp, #48	@ 0x30
 80109d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80109da:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80109de:	a90c      	add	r1, sp, #48	@ 0x30
 80109e0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80109e4:	e737      	b.n	8010856 <__kernel_rem_pio2+0x1c6>
 80109e6:	f108 32ff 	add.w	r2, r8, #4294967295
 80109ea:	ab0c      	add	r3, sp, #48	@ 0x30
 80109ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80109f0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80109f4:	e7f3      	b.n	80109de <__kernel_rem_pio2+0x34e>
 80109f6:	a90c      	add	r1, sp, #48	@ 0x30
 80109f8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80109fc:	3b01      	subs	r3, #1
 80109fe:	430a      	orrs	r2, r1
 8010a00:	e785      	b.n	801090e <__kernel_rem_pio2+0x27e>
 8010a02:	3401      	adds	r4, #1
 8010a04:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8010a08:	2a00      	cmp	r2, #0
 8010a0a:	d0fa      	beq.n	8010a02 <__kernel_rem_pio2+0x372>
 8010a0c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010a0e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8010a12:	eb0d 0503 	add.w	r5, sp, r3
 8010a16:	9b06      	ldr	r3, [sp, #24]
 8010a18:	aa20      	add	r2, sp, #128	@ 0x80
 8010a1a:	4443      	add	r3, r8
 8010a1c:	f108 0701 	add.w	r7, r8, #1
 8010a20:	3d98      	subs	r5, #152	@ 0x98
 8010a22:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8010a26:	4444      	add	r4, r8
 8010a28:	42bc      	cmp	r4, r7
 8010a2a:	da04      	bge.n	8010a36 <__kernel_rem_pio2+0x3a6>
 8010a2c:	46a0      	mov	r8, r4
 8010a2e:	e6a2      	b.n	8010776 <__kernel_rem_pio2+0xe6>
 8010a30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010a32:	2401      	movs	r4, #1
 8010a34:	e7e6      	b.n	8010a04 <__kernel_rem_pio2+0x374>
 8010a36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010a38:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8010a3c:	f7ef fd3e 	bl	80004bc <__aeabi_i2d>
 8010a40:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 8010d00 <__kernel_rem_pio2+0x670>
 8010a44:	e8e6 0102 	strd	r0, r1, [r6], #8
 8010a48:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010a4c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010a50:	46b2      	mov	sl, r6
 8010a52:	f04f 0800 	mov.w	r8, #0
 8010a56:	9b05      	ldr	r3, [sp, #20]
 8010a58:	4598      	cmp	r8, r3
 8010a5a:	dd05      	ble.n	8010a68 <__kernel_rem_pio2+0x3d8>
 8010a5c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010a60:	3701      	adds	r7, #1
 8010a62:	eca5 7b02 	vstmia	r5!, {d7}
 8010a66:	e7df      	b.n	8010a28 <__kernel_rem_pio2+0x398>
 8010a68:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8010a6c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8010a70:	f7ef fd8e 	bl	8000590 <__aeabi_dmul>
 8010a74:	4602      	mov	r2, r0
 8010a76:	460b      	mov	r3, r1
 8010a78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010a7c:	f7ef fbd2 	bl	8000224 <__adddf3>
 8010a80:	f108 0801 	add.w	r8, r8, #1
 8010a84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010a88:	e7e5      	b.n	8010a56 <__kernel_rem_pio2+0x3c6>
 8010a8a:	f1cb 0000 	rsb	r0, fp, #0
 8010a8e:	ec47 6b10 	vmov	d0, r6, r7
 8010a92:	f7ff fd1d 	bl	80104d0 <scalbn>
 8010a96:	ec55 4b10 	vmov	r4, r5, d0
 8010a9a:	4b9b      	ldr	r3, [pc, #620]	@ (8010d08 <__kernel_rem_pio2+0x678>)
 8010a9c:	2200      	movs	r2, #0
 8010a9e:	4620      	mov	r0, r4
 8010aa0:	4629      	mov	r1, r5
 8010aa2:	f7ef fffb 	bl	8000a9c <__aeabi_dcmpge>
 8010aa6:	b300      	cbz	r0, 8010aea <__kernel_rem_pio2+0x45a>
 8010aa8:	4b98      	ldr	r3, [pc, #608]	@ (8010d0c <__kernel_rem_pio2+0x67c>)
 8010aaa:	2200      	movs	r2, #0
 8010aac:	4620      	mov	r0, r4
 8010aae:	4629      	mov	r1, r5
 8010ab0:	f7ef fd6e 	bl	8000590 <__aeabi_dmul>
 8010ab4:	f7f0 f806 	bl	8000ac4 <__aeabi_d2iz>
 8010ab8:	4606      	mov	r6, r0
 8010aba:	f7ef fcff 	bl	80004bc <__aeabi_i2d>
 8010abe:	4b92      	ldr	r3, [pc, #584]	@ (8010d08 <__kernel_rem_pio2+0x678>)
 8010ac0:	2200      	movs	r2, #0
 8010ac2:	f7ef fd65 	bl	8000590 <__aeabi_dmul>
 8010ac6:	460b      	mov	r3, r1
 8010ac8:	4602      	mov	r2, r0
 8010aca:	4629      	mov	r1, r5
 8010acc:	4620      	mov	r0, r4
 8010ace:	f7ef fba7 	bl	8000220 <__aeabi_dsub>
 8010ad2:	f7ef fff7 	bl	8000ac4 <__aeabi_d2iz>
 8010ad6:	ab0c      	add	r3, sp, #48	@ 0x30
 8010ad8:	f10b 0b18 	add.w	fp, fp, #24
 8010adc:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8010ae0:	f108 0801 	add.w	r8, r8, #1
 8010ae4:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8010ae8:	e720      	b.n	801092c <__kernel_rem_pio2+0x29c>
 8010aea:	4620      	mov	r0, r4
 8010aec:	4629      	mov	r1, r5
 8010aee:	f7ef ffe9 	bl	8000ac4 <__aeabi_d2iz>
 8010af2:	ab0c      	add	r3, sp, #48	@ 0x30
 8010af4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8010af8:	e718      	b.n	801092c <__kernel_rem_pio2+0x29c>
 8010afa:	ab0c      	add	r3, sp, #48	@ 0x30
 8010afc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8010b00:	f7ef fcdc 	bl	80004bc <__aeabi_i2d>
 8010b04:	4622      	mov	r2, r4
 8010b06:	462b      	mov	r3, r5
 8010b08:	f7ef fd42 	bl	8000590 <__aeabi_dmul>
 8010b0c:	4652      	mov	r2, sl
 8010b0e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8010b12:	465b      	mov	r3, fp
 8010b14:	4620      	mov	r0, r4
 8010b16:	4629      	mov	r1, r5
 8010b18:	f7ef fd3a 	bl	8000590 <__aeabi_dmul>
 8010b1c:	3e01      	subs	r6, #1
 8010b1e:	4604      	mov	r4, r0
 8010b20:	460d      	mov	r5, r1
 8010b22:	e716      	b.n	8010952 <__kernel_rem_pio2+0x2c2>
 8010b24:	9906      	ldr	r1, [sp, #24]
 8010b26:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8010b2a:	9106      	str	r1, [sp, #24]
 8010b2c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8010b30:	f7ef fd2e 	bl	8000590 <__aeabi_dmul>
 8010b34:	4602      	mov	r2, r0
 8010b36:	460b      	mov	r3, r1
 8010b38:	4650      	mov	r0, sl
 8010b3a:	4659      	mov	r1, fp
 8010b3c:	f7ef fb72 	bl	8000224 <__adddf3>
 8010b40:	3601      	adds	r6, #1
 8010b42:	4682      	mov	sl, r0
 8010b44:	468b      	mov	fp, r1
 8010b46:	9b00      	ldr	r3, [sp, #0]
 8010b48:	429e      	cmp	r6, r3
 8010b4a:	dc01      	bgt.n	8010b50 <__kernel_rem_pio2+0x4c0>
 8010b4c:	42ae      	cmp	r6, r5
 8010b4e:	dde9      	ble.n	8010b24 <__kernel_rem_pio2+0x494>
 8010b50:	ab48      	add	r3, sp, #288	@ 0x120
 8010b52:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8010b56:	e9c5 ab00 	strd	sl, fp, [r5]
 8010b5a:	3c01      	subs	r4, #1
 8010b5c:	e6fd      	b.n	801095a <__kernel_rem_pio2+0x2ca>
 8010b5e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8010b60:	2b02      	cmp	r3, #2
 8010b62:	dc0b      	bgt.n	8010b7c <__kernel_rem_pio2+0x4ec>
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	dc35      	bgt.n	8010bd4 <__kernel_rem_pio2+0x544>
 8010b68:	d059      	beq.n	8010c1e <__kernel_rem_pio2+0x58e>
 8010b6a:	9b02      	ldr	r3, [sp, #8]
 8010b6c:	f003 0007 	and.w	r0, r3, #7
 8010b70:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8010b74:	ecbd 8b02 	vpop	{d8}
 8010b78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b7c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8010b7e:	2b03      	cmp	r3, #3
 8010b80:	d1f3      	bne.n	8010b6a <__kernel_rem_pio2+0x4da>
 8010b82:	9b05      	ldr	r3, [sp, #20]
 8010b84:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8010b88:	eb0d 0403 	add.w	r4, sp, r3
 8010b8c:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8010b90:	4625      	mov	r5, r4
 8010b92:	46c2      	mov	sl, r8
 8010b94:	f1ba 0f00 	cmp.w	sl, #0
 8010b98:	dc69      	bgt.n	8010c6e <__kernel_rem_pio2+0x5de>
 8010b9a:	4645      	mov	r5, r8
 8010b9c:	2d01      	cmp	r5, #1
 8010b9e:	f300 8087 	bgt.w	8010cb0 <__kernel_rem_pio2+0x620>
 8010ba2:	9c05      	ldr	r4, [sp, #20]
 8010ba4:	ab48      	add	r3, sp, #288	@ 0x120
 8010ba6:	441c      	add	r4, r3
 8010ba8:	2000      	movs	r0, #0
 8010baa:	2100      	movs	r1, #0
 8010bac:	f1b8 0f01 	cmp.w	r8, #1
 8010bb0:	f300 809c 	bgt.w	8010cec <__kernel_rem_pio2+0x65c>
 8010bb4:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 8010bb8:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 8010bbc:	f1b9 0f00 	cmp.w	r9, #0
 8010bc0:	f040 80a6 	bne.w	8010d10 <__kernel_rem_pio2+0x680>
 8010bc4:	9b04      	ldr	r3, [sp, #16]
 8010bc6:	e9c3 5600 	strd	r5, r6, [r3]
 8010bca:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8010bce:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8010bd2:	e7ca      	b.n	8010b6a <__kernel_rem_pio2+0x4da>
 8010bd4:	9d05      	ldr	r5, [sp, #20]
 8010bd6:	ab48      	add	r3, sp, #288	@ 0x120
 8010bd8:	441d      	add	r5, r3
 8010bda:	4644      	mov	r4, r8
 8010bdc:	2000      	movs	r0, #0
 8010bde:	2100      	movs	r1, #0
 8010be0:	2c00      	cmp	r4, #0
 8010be2:	da35      	bge.n	8010c50 <__kernel_rem_pio2+0x5c0>
 8010be4:	f1b9 0f00 	cmp.w	r9, #0
 8010be8:	d038      	beq.n	8010c5c <__kernel_rem_pio2+0x5cc>
 8010bea:	4602      	mov	r2, r0
 8010bec:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010bf0:	9c04      	ldr	r4, [sp, #16]
 8010bf2:	e9c4 2300 	strd	r2, r3, [r4]
 8010bf6:	4602      	mov	r2, r0
 8010bf8:	460b      	mov	r3, r1
 8010bfa:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8010bfe:	f7ef fb0f 	bl	8000220 <__aeabi_dsub>
 8010c02:	ad4a      	add	r5, sp, #296	@ 0x128
 8010c04:	2401      	movs	r4, #1
 8010c06:	45a0      	cmp	r8, r4
 8010c08:	da2b      	bge.n	8010c62 <__kernel_rem_pio2+0x5d2>
 8010c0a:	f1b9 0f00 	cmp.w	r9, #0
 8010c0e:	d002      	beq.n	8010c16 <__kernel_rem_pio2+0x586>
 8010c10:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010c14:	4619      	mov	r1, r3
 8010c16:	9b04      	ldr	r3, [sp, #16]
 8010c18:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8010c1c:	e7a5      	b.n	8010b6a <__kernel_rem_pio2+0x4da>
 8010c1e:	9c05      	ldr	r4, [sp, #20]
 8010c20:	ab48      	add	r3, sp, #288	@ 0x120
 8010c22:	441c      	add	r4, r3
 8010c24:	2000      	movs	r0, #0
 8010c26:	2100      	movs	r1, #0
 8010c28:	f1b8 0f00 	cmp.w	r8, #0
 8010c2c:	da09      	bge.n	8010c42 <__kernel_rem_pio2+0x5b2>
 8010c2e:	f1b9 0f00 	cmp.w	r9, #0
 8010c32:	d002      	beq.n	8010c3a <__kernel_rem_pio2+0x5aa>
 8010c34:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010c38:	4619      	mov	r1, r3
 8010c3a:	9b04      	ldr	r3, [sp, #16]
 8010c3c:	e9c3 0100 	strd	r0, r1, [r3]
 8010c40:	e793      	b.n	8010b6a <__kernel_rem_pio2+0x4da>
 8010c42:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8010c46:	f7ef faed 	bl	8000224 <__adddf3>
 8010c4a:	f108 38ff 	add.w	r8, r8, #4294967295
 8010c4e:	e7eb      	b.n	8010c28 <__kernel_rem_pio2+0x598>
 8010c50:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8010c54:	f7ef fae6 	bl	8000224 <__adddf3>
 8010c58:	3c01      	subs	r4, #1
 8010c5a:	e7c1      	b.n	8010be0 <__kernel_rem_pio2+0x550>
 8010c5c:	4602      	mov	r2, r0
 8010c5e:	460b      	mov	r3, r1
 8010c60:	e7c6      	b.n	8010bf0 <__kernel_rem_pio2+0x560>
 8010c62:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8010c66:	f7ef fadd 	bl	8000224 <__adddf3>
 8010c6a:	3401      	adds	r4, #1
 8010c6c:	e7cb      	b.n	8010c06 <__kernel_rem_pio2+0x576>
 8010c6e:	ed35 7b02 	vldmdb	r5!, {d7}
 8010c72:	ed8d 7b00 	vstr	d7, [sp]
 8010c76:	ed95 7b02 	vldr	d7, [r5, #8]
 8010c7a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010c7e:	ec53 2b17 	vmov	r2, r3, d7
 8010c82:	ed8d 7b06 	vstr	d7, [sp, #24]
 8010c86:	f7ef facd 	bl	8000224 <__adddf3>
 8010c8a:	4602      	mov	r2, r0
 8010c8c:	460b      	mov	r3, r1
 8010c8e:	4606      	mov	r6, r0
 8010c90:	460f      	mov	r7, r1
 8010c92:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010c96:	f7ef fac3 	bl	8000220 <__aeabi_dsub>
 8010c9a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010c9e:	f7ef fac1 	bl	8000224 <__adddf3>
 8010ca2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010ca6:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8010caa:	e9c5 6700 	strd	r6, r7, [r5]
 8010cae:	e771      	b.n	8010b94 <__kernel_rem_pio2+0x504>
 8010cb0:	ed34 7b02 	vldmdb	r4!, {d7}
 8010cb4:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8010cb8:	ec51 0b17 	vmov	r0, r1, d7
 8010cbc:	4652      	mov	r2, sl
 8010cbe:	465b      	mov	r3, fp
 8010cc0:	ed8d 7b00 	vstr	d7, [sp]
 8010cc4:	f7ef faae 	bl	8000224 <__adddf3>
 8010cc8:	4602      	mov	r2, r0
 8010cca:	460b      	mov	r3, r1
 8010ccc:	4606      	mov	r6, r0
 8010cce:	460f      	mov	r7, r1
 8010cd0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010cd4:	f7ef faa4 	bl	8000220 <__aeabi_dsub>
 8010cd8:	4652      	mov	r2, sl
 8010cda:	465b      	mov	r3, fp
 8010cdc:	f7ef faa2 	bl	8000224 <__adddf3>
 8010ce0:	3d01      	subs	r5, #1
 8010ce2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8010ce6:	e9c4 6700 	strd	r6, r7, [r4]
 8010cea:	e757      	b.n	8010b9c <__kernel_rem_pio2+0x50c>
 8010cec:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8010cf0:	f7ef fa98 	bl	8000224 <__adddf3>
 8010cf4:	f108 38ff 	add.w	r8, r8, #4294967295
 8010cf8:	e758      	b.n	8010bac <__kernel_rem_pio2+0x51c>
 8010cfa:	bf00      	nop
 8010cfc:	f3af 8000 	nop.w
	...
 8010d08:	41700000 	.word	0x41700000
 8010d0c:	3e700000 	.word	0x3e700000
 8010d10:	9b04      	ldr	r3, [sp, #16]
 8010d12:	9a04      	ldr	r2, [sp, #16]
 8010d14:	601d      	str	r5, [r3, #0]
 8010d16:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 8010d1a:	605c      	str	r4, [r3, #4]
 8010d1c:	609f      	str	r7, [r3, #8]
 8010d1e:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 8010d22:	60d3      	str	r3, [r2, #12]
 8010d24:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010d28:	6110      	str	r0, [r2, #16]
 8010d2a:	6153      	str	r3, [r2, #20]
 8010d2c:	e71d      	b.n	8010b6a <__kernel_rem_pio2+0x4da>
 8010d2e:	bf00      	nop

08010d30 <__kernel_rem_pio2f>:
 8010d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d34:	ed2d 8b04 	vpush	{d8-d9}
 8010d38:	b0d9      	sub	sp, #356	@ 0x164
 8010d3a:	4690      	mov	r8, r2
 8010d3c:	9001      	str	r0, [sp, #4]
 8010d3e:	4ab6      	ldr	r2, [pc, #728]	@ (8011018 <__kernel_rem_pio2f+0x2e8>)
 8010d40:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8010d42:	f118 0f04 	cmn.w	r8, #4
 8010d46:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 8010d4a:	460f      	mov	r7, r1
 8010d4c:	f103 3bff 	add.w	fp, r3, #4294967295
 8010d50:	db26      	blt.n	8010da0 <__kernel_rem_pio2f+0x70>
 8010d52:	f1b8 0203 	subs.w	r2, r8, #3
 8010d56:	bf48      	it	mi
 8010d58:	f108 0204 	addmi.w	r2, r8, #4
 8010d5c:	10d2      	asrs	r2, r2, #3
 8010d5e:	1c55      	adds	r5, r2, #1
 8010d60:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8010d62:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 8011028 <__kernel_rem_pio2f+0x2f8>
 8010d66:	00e8      	lsls	r0, r5, #3
 8010d68:	eba2 060b 	sub.w	r6, r2, fp
 8010d6c:	9002      	str	r0, [sp, #8]
 8010d6e:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 8010d72:	eb0a 0c0b 	add.w	ip, sl, fp
 8010d76:	ac1c      	add	r4, sp, #112	@ 0x70
 8010d78:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8010d7c:	2000      	movs	r0, #0
 8010d7e:	4560      	cmp	r0, ip
 8010d80:	dd10      	ble.n	8010da4 <__kernel_rem_pio2f+0x74>
 8010d82:	a91c      	add	r1, sp, #112	@ 0x70
 8010d84:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8010d88:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8010d8c:	2600      	movs	r6, #0
 8010d8e:	4556      	cmp	r6, sl
 8010d90:	dc24      	bgt.n	8010ddc <__kernel_rem_pio2f+0xac>
 8010d92:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010d96:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 8011028 <__kernel_rem_pio2f+0x2f8>
 8010d9a:	4684      	mov	ip, r0
 8010d9c:	2400      	movs	r4, #0
 8010d9e:	e016      	b.n	8010dce <__kernel_rem_pio2f+0x9e>
 8010da0:	2200      	movs	r2, #0
 8010da2:	e7dc      	b.n	8010d5e <__kernel_rem_pio2f+0x2e>
 8010da4:	42c6      	cmn	r6, r0
 8010da6:	bf5d      	ittte	pl
 8010da8:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8010dac:	ee07 1a90 	vmovpl	s15, r1
 8010db0:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8010db4:	eef0 7a47 	vmovmi.f32	s15, s14
 8010db8:	ece4 7a01 	vstmia	r4!, {s15}
 8010dbc:	3001      	adds	r0, #1
 8010dbe:	e7de      	b.n	8010d7e <__kernel_rem_pio2f+0x4e>
 8010dc0:	ecfe 6a01 	vldmia	lr!, {s13}
 8010dc4:	ed3c 7a01 	vldmdb	ip!, {s14}
 8010dc8:	eee6 7a87 	vfma.f32	s15, s13, s14
 8010dcc:	3401      	adds	r4, #1
 8010dce:	455c      	cmp	r4, fp
 8010dd0:	ddf6      	ble.n	8010dc0 <__kernel_rem_pio2f+0x90>
 8010dd2:	ece9 7a01 	vstmia	r9!, {s15}
 8010dd6:	3601      	adds	r6, #1
 8010dd8:	3004      	adds	r0, #4
 8010dda:	e7d8      	b.n	8010d8e <__kernel_rem_pio2f+0x5e>
 8010ddc:	a908      	add	r1, sp, #32
 8010dde:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010de2:	9104      	str	r1, [sp, #16]
 8010de4:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8010de6:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 8011024 <__kernel_rem_pio2f+0x2f4>
 8010dea:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 8011020 <__kernel_rem_pio2f+0x2f0>
 8010dee:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8010df2:	9203      	str	r2, [sp, #12]
 8010df4:	4654      	mov	r4, sl
 8010df6:	00a2      	lsls	r2, r4, #2
 8010df8:	9205      	str	r2, [sp, #20]
 8010dfa:	aa58      	add	r2, sp, #352	@ 0x160
 8010dfc:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8010e00:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8010e04:	a944      	add	r1, sp, #272	@ 0x110
 8010e06:	aa08      	add	r2, sp, #32
 8010e08:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8010e0c:	4694      	mov	ip, r2
 8010e0e:	4626      	mov	r6, r4
 8010e10:	2e00      	cmp	r6, #0
 8010e12:	dc4c      	bgt.n	8010eae <__kernel_rem_pio2f+0x17e>
 8010e14:	4628      	mov	r0, r5
 8010e16:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8010e1a:	f7ff fbd3 	bl	80105c4 <scalbnf>
 8010e1e:	eeb0 8a40 	vmov.f32	s16, s0
 8010e22:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 8010e26:	ee28 0a00 	vmul.f32	s0, s16, s0
 8010e2a:	f000 fa65 	bl	80112f8 <floorf>
 8010e2e:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8010e32:	eea0 8a67 	vfms.f32	s16, s0, s15
 8010e36:	2d00      	cmp	r5, #0
 8010e38:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010e3c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8010e40:	ee17 9a90 	vmov	r9, s15
 8010e44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010e48:	ee38 8a67 	vsub.f32	s16, s16, s15
 8010e4c:	dd41      	ble.n	8010ed2 <__kernel_rem_pio2f+0x1a2>
 8010e4e:	f104 3cff 	add.w	ip, r4, #4294967295
 8010e52:	a908      	add	r1, sp, #32
 8010e54:	f1c5 0e08 	rsb	lr, r5, #8
 8010e58:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8010e5c:	fa46 f00e 	asr.w	r0, r6, lr
 8010e60:	4481      	add	r9, r0
 8010e62:	fa00 f00e 	lsl.w	r0, r0, lr
 8010e66:	1a36      	subs	r6, r6, r0
 8010e68:	f1c5 0007 	rsb	r0, r5, #7
 8010e6c:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8010e70:	4106      	asrs	r6, r0
 8010e72:	2e00      	cmp	r6, #0
 8010e74:	dd3c      	ble.n	8010ef0 <__kernel_rem_pio2f+0x1c0>
 8010e76:	f04f 0e00 	mov.w	lr, #0
 8010e7a:	f109 0901 	add.w	r9, r9, #1
 8010e7e:	4670      	mov	r0, lr
 8010e80:	4574      	cmp	r4, lr
 8010e82:	dc68      	bgt.n	8010f56 <__kernel_rem_pio2f+0x226>
 8010e84:	2d00      	cmp	r5, #0
 8010e86:	dd03      	ble.n	8010e90 <__kernel_rem_pio2f+0x160>
 8010e88:	2d01      	cmp	r5, #1
 8010e8a:	d074      	beq.n	8010f76 <__kernel_rem_pio2f+0x246>
 8010e8c:	2d02      	cmp	r5, #2
 8010e8e:	d07d      	beq.n	8010f8c <__kernel_rem_pio2f+0x25c>
 8010e90:	2e02      	cmp	r6, #2
 8010e92:	d12d      	bne.n	8010ef0 <__kernel_rem_pio2f+0x1c0>
 8010e94:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8010e98:	ee30 8a48 	vsub.f32	s16, s0, s16
 8010e9c:	b340      	cbz	r0, 8010ef0 <__kernel_rem_pio2f+0x1c0>
 8010e9e:	4628      	mov	r0, r5
 8010ea0:	9306      	str	r3, [sp, #24]
 8010ea2:	f7ff fb8f 	bl	80105c4 <scalbnf>
 8010ea6:	9b06      	ldr	r3, [sp, #24]
 8010ea8:	ee38 8a40 	vsub.f32	s16, s16, s0
 8010eac:	e020      	b.n	8010ef0 <__kernel_rem_pio2f+0x1c0>
 8010eae:	ee60 7a28 	vmul.f32	s15, s0, s17
 8010eb2:	3e01      	subs	r6, #1
 8010eb4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010eb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010ebc:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8010ec0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8010ec4:	ecac 0a01 	vstmia	ip!, {s0}
 8010ec8:	ed30 0a01 	vldmdb	r0!, {s0}
 8010ecc:	ee37 0a80 	vadd.f32	s0, s15, s0
 8010ed0:	e79e      	b.n	8010e10 <__kernel_rem_pio2f+0xe0>
 8010ed2:	d105      	bne.n	8010ee0 <__kernel_rem_pio2f+0x1b0>
 8010ed4:	1e60      	subs	r0, r4, #1
 8010ed6:	a908      	add	r1, sp, #32
 8010ed8:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8010edc:	11f6      	asrs	r6, r6, #7
 8010ede:	e7c8      	b.n	8010e72 <__kernel_rem_pio2f+0x142>
 8010ee0:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8010ee4:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8010ee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010eec:	da31      	bge.n	8010f52 <__kernel_rem_pio2f+0x222>
 8010eee:	2600      	movs	r6, #0
 8010ef0:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8010ef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ef8:	f040 8098 	bne.w	801102c <__kernel_rem_pio2f+0x2fc>
 8010efc:	1e60      	subs	r0, r4, #1
 8010efe:	2200      	movs	r2, #0
 8010f00:	4550      	cmp	r0, sl
 8010f02:	da4b      	bge.n	8010f9c <__kernel_rem_pio2f+0x26c>
 8010f04:	2a00      	cmp	r2, #0
 8010f06:	d065      	beq.n	8010fd4 <__kernel_rem_pio2f+0x2a4>
 8010f08:	3c01      	subs	r4, #1
 8010f0a:	ab08      	add	r3, sp, #32
 8010f0c:	3d08      	subs	r5, #8
 8010f0e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8010f12:	2b00      	cmp	r3, #0
 8010f14:	d0f8      	beq.n	8010f08 <__kernel_rem_pio2f+0x1d8>
 8010f16:	4628      	mov	r0, r5
 8010f18:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8010f1c:	f7ff fb52 	bl	80105c4 <scalbnf>
 8010f20:	1c63      	adds	r3, r4, #1
 8010f22:	aa44      	add	r2, sp, #272	@ 0x110
 8010f24:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8011024 <__kernel_rem_pio2f+0x2f4>
 8010f28:	0099      	lsls	r1, r3, #2
 8010f2a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8010f2e:	4623      	mov	r3, r4
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	f280 80a9 	bge.w	8011088 <__kernel_rem_pio2f+0x358>
 8010f36:	4623      	mov	r3, r4
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	f2c0 80c7 	blt.w	80110cc <__kernel_rem_pio2f+0x39c>
 8010f3e:	aa44      	add	r2, sp, #272	@ 0x110
 8010f40:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8010f44:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 801101c <__kernel_rem_pio2f+0x2ec>
 8010f48:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8011028 <__kernel_rem_pio2f+0x2f8>
 8010f4c:	2000      	movs	r0, #0
 8010f4e:	1ae2      	subs	r2, r4, r3
 8010f50:	e0b1      	b.n	80110b6 <__kernel_rem_pio2f+0x386>
 8010f52:	2602      	movs	r6, #2
 8010f54:	e78f      	b.n	8010e76 <__kernel_rem_pio2f+0x146>
 8010f56:	f852 1b04 	ldr.w	r1, [r2], #4
 8010f5a:	b948      	cbnz	r0, 8010f70 <__kernel_rem_pio2f+0x240>
 8010f5c:	b121      	cbz	r1, 8010f68 <__kernel_rem_pio2f+0x238>
 8010f5e:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8010f62:	f842 1c04 	str.w	r1, [r2, #-4]
 8010f66:	2101      	movs	r1, #1
 8010f68:	f10e 0e01 	add.w	lr, lr, #1
 8010f6c:	4608      	mov	r0, r1
 8010f6e:	e787      	b.n	8010e80 <__kernel_rem_pio2f+0x150>
 8010f70:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8010f74:	e7f5      	b.n	8010f62 <__kernel_rem_pio2f+0x232>
 8010f76:	f104 3cff 	add.w	ip, r4, #4294967295
 8010f7a:	aa08      	add	r2, sp, #32
 8010f7c:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8010f80:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8010f84:	a908      	add	r1, sp, #32
 8010f86:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8010f8a:	e781      	b.n	8010e90 <__kernel_rem_pio2f+0x160>
 8010f8c:	f104 3cff 	add.w	ip, r4, #4294967295
 8010f90:	aa08      	add	r2, sp, #32
 8010f92:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8010f96:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8010f9a:	e7f3      	b.n	8010f84 <__kernel_rem_pio2f+0x254>
 8010f9c:	a908      	add	r1, sp, #32
 8010f9e:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8010fa2:	3801      	subs	r0, #1
 8010fa4:	430a      	orrs	r2, r1
 8010fa6:	e7ab      	b.n	8010f00 <__kernel_rem_pio2f+0x1d0>
 8010fa8:	3201      	adds	r2, #1
 8010faa:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8010fae:	2e00      	cmp	r6, #0
 8010fb0:	d0fa      	beq.n	8010fa8 <__kernel_rem_pio2f+0x278>
 8010fb2:	9905      	ldr	r1, [sp, #20]
 8010fb4:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8010fb8:	eb0d 0001 	add.w	r0, sp, r1
 8010fbc:	18e6      	adds	r6, r4, r3
 8010fbe:	a91c      	add	r1, sp, #112	@ 0x70
 8010fc0:	f104 0c01 	add.w	ip, r4, #1
 8010fc4:	384c      	subs	r0, #76	@ 0x4c
 8010fc6:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8010fca:	4422      	add	r2, r4
 8010fcc:	4562      	cmp	r2, ip
 8010fce:	da04      	bge.n	8010fda <__kernel_rem_pio2f+0x2aa>
 8010fd0:	4614      	mov	r4, r2
 8010fd2:	e710      	b.n	8010df6 <__kernel_rem_pio2f+0xc6>
 8010fd4:	9804      	ldr	r0, [sp, #16]
 8010fd6:	2201      	movs	r2, #1
 8010fd8:	e7e7      	b.n	8010faa <__kernel_rem_pio2f+0x27a>
 8010fda:	9903      	ldr	r1, [sp, #12]
 8010fdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010fe0:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8010fe4:	9105      	str	r1, [sp, #20]
 8010fe6:	ee07 1a90 	vmov	s15, r1
 8010fea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010fee:	2400      	movs	r4, #0
 8010ff0:	ece6 7a01 	vstmia	r6!, {s15}
 8010ff4:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8011028 <__kernel_rem_pio2f+0x2f8>
 8010ff8:	46b1      	mov	r9, r6
 8010ffa:	455c      	cmp	r4, fp
 8010ffc:	dd04      	ble.n	8011008 <__kernel_rem_pio2f+0x2d8>
 8010ffe:	ece0 7a01 	vstmia	r0!, {s15}
 8011002:	f10c 0c01 	add.w	ip, ip, #1
 8011006:	e7e1      	b.n	8010fcc <__kernel_rem_pio2f+0x29c>
 8011008:	ecfe 6a01 	vldmia	lr!, {s13}
 801100c:	ed39 7a01 	vldmdb	r9!, {s14}
 8011010:	3401      	adds	r4, #1
 8011012:	eee6 7a87 	vfma.f32	s15, s13, s14
 8011016:	e7f0      	b.n	8010ffa <__kernel_rem_pio2f+0x2ca>
 8011018:	0801199c 	.word	0x0801199c
 801101c:	08011970 	.word	0x08011970
 8011020:	43800000 	.word	0x43800000
 8011024:	3b800000 	.word	0x3b800000
 8011028:	00000000 	.word	0x00000000
 801102c:	9b02      	ldr	r3, [sp, #8]
 801102e:	eeb0 0a48 	vmov.f32	s0, s16
 8011032:	eba3 0008 	sub.w	r0, r3, r8
 8011036:	f7ff fac5 	bl	80105c4 <scalbnf>
 801103a:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8011020 <__kernel_rem_pio2f+0x2f0>
 801103e:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8011042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011046:	db19      	blt.n	801107c <__kernel_rem_pio2f+0x34c>
 8011048:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8011024 <__kernel_rem_pio2f+0x2f4>
 801104c:	ee60 7a27 	vmul.f32	s15, s0, s15
 8011050:	aa08      	add	r2, sp, #32
 8011052:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011056:	3508      	adds	r5, #8
 8011058:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801105c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8011060:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011064:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8011068:	ee10 3a10 	vmov	r3, s0
 801106c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8011070:	ee17 3a90 	vmov	r3, s15
 8011074:	3401      	adds	r4, #1
 8011076:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801107a:	e74c      	b.n	8010f16 <__kernel_rem_pio2f+0x1e6>
 801107c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8011080:	aa08      	add	r2, sp, #32
 8011082:	ee10 3a10 	vmov	r3, s0
 8011086:	e7f6      	b.n	8011076 <__kernel_rem_pio2f+0x346>
 8011088:	a808      	add	r0, sp, #32
 801108a:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 801108e:	9001      	str	r0, [sp, #4]
 8011090:	ee07 0a90 	vmov	s15, r0
 8011094:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011098:	3b01      	subs	r3, #1
 801109a:	ee67 7a80 	vmul.f32	s15, s15, s0
 801109e:	ee20 0a07 	vmul.f32	s0, s0, s14
 80110a2:	ed62 7a01 	vstmdb	r2!, {s15}
 80110a6:	e743      	b.n	8010f30 <__kernel_rem_pio2f+0x200>
 80110a8:	ecfc 6a01 	vldmia	ip!, {s13}
 80110ac:	ecb5 7a01 	vldmia	r5!, {s14}
 80110b0:	eee6 7a87 	vfma.f32	s15, s13, s14
 80110b4:	3001      	adds	r0, #1
 80110b6:	4550      	cmp	r0, sl
 80110b8:	dc01      	bgt.n	80110be <__kernel_rem_pio2f+0x38e>
 80110ba:	4290      	cmp	r0, r2
 80110bc:	ddf4      	ble.n	80110a8 <__kernel_rem_pio2f+0x378>
 80110be:	a858      	add	r0, sp, #352	@ 0x160
 80110c0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80110c4:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 80110c8:	3b01      	subs	r3, #1
 80110ca:	e735      	b.n	8010f38 <__kernel_rem_pio2f+0x208>
 80110cc:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 80110ce:	2b02      	cmp	r3, #2
 80110d0:	dc09      	bgt.n	80110e6 <__kernel_rem_pio2f+0x3b6>
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	dc27      	bgt.n	8011126 <__kernel_rem_pio2f+0x3f6>
 80110d6:	d040      	beq.n	801115a <__kernel_rem_pio2f+0x42a>
 80110d8:	f009 0007 	and.w	r0, r9, #7
 80110dc:	b059      	add	sp, #356	@ 0x164
 80110de:	ecbd 8b04 	vpop	{d8-d9}
 80110e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110e6:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 80110e8:	2b03      	cmp	r3, #3
 80110ea:	d1f5      	bne.n	80110d8 <__kernel_rem_pio2f+0x3a8>
 80110ec:	aa30      	add	r2, sp, #192	@ 0xc0
 80110ee:	1f0b      	subs	r3, r1, #4
 80110f0:	4413      	add	r3, r2
 80110f2:	461a      	mov	r2, r3
 80110f4:	4620      	mov	r0, r4
 80110f6:	2800      	cmp	r0, #0
 80110f8:	dc50      	bgt.n	801119c <__kernel_rem_pio2f+0x46c>
 80110fa:	4622      	mov	r2, r4
 80110fc:	2a01      	cmp	r2, #1
 80110fe:	dc5d      	bgt.n	80111bc <__kernel_rem_pio2f+0x48c>
 8011100:	ab30      	add	r3, sp, #192	@ 0xc0
 8011102:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 8011028 <__kernel_rem_pio2f+0x2f8>
 8011106:	440b      	add	r3, r1
 8011108:	2c01      	cmp	r4, #1
 801110a:	dc67      	bgt.n	80111dc <__kernel_rem_pio2f+0x4ac>
 801110c:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8011110:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8011114:	2e00      	cmp	r6, #0
 8011116:	d167      	bne.n	80111e8 <__kernel_rem_pio2f+0x4b8>
 8011118:	edc7 6a00 	vstr	s13, [r7]
 801111c:	ed87 7a01 	vstr	s14, [r7, #4]
 8011120:	edc7 7a02 	vstr	s15, [r7, #8]
 8011124:	e7d8      	b.n	80110d8 <__kernel_rem_pio2f+0x3a8>
 8011126:	ab30      	add	r3, sp, #192	@ 0xc0
 8011128:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 8011028 <__kernel_rem_pio2f+0x2f8>
 801112c:	440b      	add	r3, r1
 801112e:	4622      	mov	r2, r4
 8011130:	2a00      	cmp	r2, #0
 8011132:	da24      	bge.n	801117e <__kernel_rem_pio2f+0x44e>
 8011134:	b34e      	cbz	r6, 801118a <__kernel_rem_pio2f+0x45a>
 8011136:	eef1 7a47 	vneg.f32	s15, s14
 801113a:	edc7 7a00 	vstr	s15, [r7]
 801113e:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 8011142:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011146:	aa31      	add	r2, sp, #196	@ 0xc4
 8011148:	2301      	movs	r3, #1
 801114a:	429c      	cmp	r4, r3
 801114c:	da20      	bge.n	8011190 <__kernel_rem_pio2f+0x460>
 801114e:	b10e      	cbz	r6, 8011154 <__kernel_rem_pio2f+0x424>
 8011150:	eef1 7a67 	vneg.f32	s15, s15
 8011154:	edc7 7a01 	vstr	s15, [r7, #4]
 8011158:	e7be      	b.n	80110d8 <__kernel_rem_pio2f+0x3a8>
 801115a:	ab30      	add	r3, sp, #192	@ 0xc0
 801115c:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 8011028 <__kernel_rem_pio2f+0x2f8>
 8011160:	440b      	add	r3, r1
 8011162:	2c00      	cmp	r4, #0
 8011164:	da05      	bge.n	8011172 <__kernel_rem_pio2f+0x442>
 8011166:	b10e      	cbz	r6, 801116c <__kernel_rem_pio2f+0x43c>
 8011168:	eef1 7a67 	vneg.f32	s15, s15
 801116c:	edc7 7a00 	vstr	s15, [r7]
 8011170:	e7b2      	b.n	80110d8 <__kernel_rem_pio2f+0x3a8>
 8011172:	ed33 7a01 	vldmdb	r3!, {s14}
 8011176:	3c01      	subs	r4, #1
 8011178:	ee77 7a87 	vadd.f32	s15, s15, s14
 801117c:	e7f1      	b.n	8011162 <__kernel_rem_pio2f+0x432>
 801117e:	ed73 7a01 	vldmdb	r3!, {s15}
 8011182:	3a01      	subs	r2, #1
 8011184:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011188:	e7d2      	b.n	8011130 <__kernel_rem_pio2f+0x400>
 801118a:	eef0 7a47 	vmov.f32	s15, s14
 801118e:	e7d4      	b.n	801113a <__kernel_rem_pio2f+0x40a>
 8011190:	ecb2 7a01 	vldmia	r2!, {s14}
 8011194:	3301      	adds	r3, #1
 8011196:	ee77 7a87 	vadd.f32	s15, s15, s14
 801119a:	e7d6      	b.n	801114a <__kernel_rem_pio2f+0x41a>
 801119c:	ed72 7a01 	vldmdb	r2!, {s15}
 80111a0:	edd2 6a01 	vldr	s13, [r2, #4]
 80111a4:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80111a8:	3801      	subs	r0, #1
 80111aa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80111ae:	ed82 7a00 	vstr	s14, [r2]
 80111b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80111b6:	edc2 7a01 	vstr	s15, [r2, #4]
 80111ba:	e79c      	b.n	80110f6 <__kernel_rem_pio2f+0x3c6>
 80111bc:	ed73 7a01 	vldmdb	r3!, {s15}
 80111c0:	edd3 6a01 	vldr	s13, [r3, #4]
 80111c4:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80111c8:	3a01      	subs	r2, #1
 80111ca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80111ce:	ed83 7a00 	vstr	s14, [r3]
 80111d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80111d6:	edc3 7a01 	vstr	s15, [r3, #4]
 80111da:	e78f      	b.n	80110fc <__kernel_rem_pio2f+0x3cc>
 80111dc:	ed33 7a01 	vldmdb	r3!, {s14}
 80111e0:	3c01      	subs	r4, #1
 80111e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80111e6:	e78f      	b.n	8011108 <__kernel_rem_pio2f+0x3d8>
 80111e8:	eef1 6a66 	vneg.f32	s13, s13
 80111ec:	eeb1 7a47 	vneg.f32	s14, s14
 80111f0:	edc7 6a00 	vstr	s13, [r7]
 80111f4:	ed87 7a01 	vstr	s14, [r7, #4]
 80111f8:	eef1 7a67 	vneg.f32	s15, s15
 80111fc:	e790      	b.n	8011120 <__kernel_rem_pio2f+0x3f0>
 80111fe:	bf00      	nop

08011200 <floor>:
 8011200:	ec51 0b10 	vmov	r0, r1, d0
 8011204:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8011208:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801120c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8011210:	2e13      	cmp	r6, #19
 8011212:	460c      	mov	r4, r1
 8011214:	4605      	mov	r5, r0
 8011216:	4680      	mov	r8, r0
 8011218:	dc34      	bgt.n	8011284 <floor+0x84>
 801121a:	2e00      	cmp	r6, #0
 801121c:	da17      	bge.n	801124e <floor+0x4e>
 801121e:	a332      	add	r3, pc, #200	@ (adr r3, 80112e8 <floor+0xe8>)
 8011220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011224:	f7ee fffe 	bl	8000224 <__adddf3>
 8011228:	2200      	movs	r2, #0
 801122a:	2300      	movs	r3, #0
 801122c:	f7ef fc40 	bl	8000ab0 <__aeabi_dcmpgt>
 8011230:	b150      	cbz	r0, 8011248 <floor+0x48>
 8011232:	2c00      	cmp	r4, #0
 8011234:	da55      	bge.n	80112e2 <floor+0xe2>
 8011236:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 801123a:	432c      	orrs	r4, r5
 801123c:	2500      	movs	r5, #0
 801123e:	42ac      	cmp	r4, r5
 8011240:	4c2b      	ldr	r4, [pc, #172]	@ (80112f0 <floor+0xf0>)
 8011242:	bf08      	it	eq
 8011244:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8011248:	4621      	mov	r1, r4
 801124a:	4628      	mov	r0, r5
 801124c:	e023      	b.n	8011296 <floor+0x96>
 801124e:	4f29      	ldr	r7, [pc, #164]	@ (80112f4 <floor+0xf4>)
 8011250:	4137      	asrs	r7, r6
 8011252:	ea01 0307 	and.w	r3, r1, r7
 8011256:	4303      	orrs	r3, r0
 8011258:	d01d      	beq.n	8011296 <floor+0x96>
 801125a:	a323      	add	r3, pc, #140	@ (adr r3, 80112e8 <floor+0xe8>)
 801125c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011260:	f7ee ffe0 	bl	8000224 <__adddf3>
 8011264:	2200      	movs	r2, #0
 8011266:	2300      	movs	r3, #0
 8011268:	f7ef fc22 	bl	8000ab0 <__aeabi_dcmpgt>
 801126c:	2800      	cmp	r0, #0
 801126e:	d0eb      	beq.n	8011248 <floor+0x48>
 8011270:	2c00      	cmp	r4, #0
 8011272:	bfbe      	ittt	lt
 8011274:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8011278:	4133      	asrlt	r3, r6
 801127a:	18e4      	addlt	r4, r4, r3
 801127c:	ea24 0407 	bic.w	r4, r4, r7
 8011280:	2500      	movs	r5, #0
 8011282:	e7e1      	b.n	8011248 <floor+0x48>
 8011284:	2e33      	cmp	r6, #51	@ 0x33
 8011286:	dd0a      	ble.n	801129e <floor+0x9e>
 8011288:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801128c:	d103      	bne.n	8011296 <floor+0x96>
 801128e:	4602      	mov	r2, r0
 8011290:	460b      	mov	r3, r1
 8011292:	f7ee ffc7 	bl	8000224 <__adddf3>
 8011296:	ec41 0b10 	vmov	d0, r0, r1
 801129a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801129e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 80112a2:	f04f 37ff 	mov.w	r7, #4294967295
 80112a6:	40df      	lsrs	r7, r3
 80112a8:	4207      	tst	r7, r0
 80112aa:	d0f4      	beq.n	8011296 <floor+0x96>
 80112ac:	a30e      	add	r3, pc, #56	@ (adr r3, 80112e8 <floor+0xe8>)
 80112ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112b2:	f7ee ffb7 	bl	8000224 <__adddf3>
 80112b6:	2200      	movs	r2, #0
 80112b8:	2300      	movs	r3, #0
 80112ba:	f7ef fbf9 	bl	8000ab0 <__aeabi_dcmpgt>
 80112be:	2800      	cmp	r0, #0
 80112c0:	d0c2      	beq.n	8011248 <floor+0x48>
 80112c2:	2c00      	cmp	r4, #0
 80112c4:	da0a      	bge.n	80112dc <floor+0xdc>
 80112c6:	2e14      	cmp	r6, #20
 80112c8:	d101      	bne.n	80112ce <floor+0xce>
 80112ca:	3401      	adds	r4, #1
 80112cc:	e006      	b.n	80112dc <floor+0xdc>
 80112ce:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 80112d2:	2301      	movs	r3, #1
 80112d4:	40b3      	lsls	r3, r6
 80112d6:	441d      	add	r5, r3
 80112d8:	4545      	cmp	r5, r8
 80112da:	d3f6      	bcc.n	80112ca <floor+0xca>
 80112dc:	ea25 0507 	bic.w	r5, r5, r7
 80112e0:	e7b2      	b.n	8011248 <floor+0x48>
 80112e2:	2500      	movs	r5, #0
 80112e4:	462c      	mov	r4, r5
 80112e6:	e7af      	b.n	8011248 <floor+0x48>
 80112e8:	8800759c 	.word	0x8800759c
 80112ec:	7e37e43c 	.word	0x7e37e43c
 80112f0:	bff00000 	.word	0xbff00000
 80112f4:	000fffff 	.word	0x000fffff

080112f8 <floorf>:
 80112f8:	ee10 3a10 	vmov	r3, s0
 80112fc:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8011300:	3a7f      	subs	r2, #127	@ 0x7f
 8011302:	2a16      	cmp	r2, #22
 8011304:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8011308:	dc2b      	bgt.n	8011362 <floorf+0x6a>
 801130a:	2a00      	cmp	r2, #0
 801130c:	da12      	bge.n	8011334 <floorf+0x3c>
 801130e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8011374 <floorf+0x7c>
 8011312:	ee30 0a27 	vadd.f32	s0, s0, s15
 8011316:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801131a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801131e:	dd06      	ble.n	801132e <floorf+0x36>
 8011320:	2b00      	cmp	r3, #0
 8011322:	da24      	bge.n	801136e <floorf+0x76>
 8011324:	2900      	cmp	r1, #0
 8011326:	4b14      	ldr	r3, [pc, #80]	@ (8011378 <floorf+0x80>)
 8011328:	bf08      	it	eq
 801132a:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 801132e:	ee00 3a10 	vmov	s0, r3
 8011332:	4770      	bx	lr
 8011334:	4911      	ldr	r1, [pc, #68]	@ (801137c <floorf+0x84>)
 8011336:	4111      	asrs	r1, r2
 8011338:	420b      	tst	r3, r1
 801133a:	d0fa      	beq.n	8011332 <floorf+0x3a>
 801133c:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8011374 <floorf+0x7c>
 8011340:	ee30 0a27 	vadd.f32	s0, s0, s15
 8011344:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8011348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801134c:	ddef      	ble.n	801132e <floorf+0x36>
 801134e:	2b00      	cmp	r3, #0
 8011350:	bfbe      	ittt	lt
 8011352:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8011356:	fa40 f202 	asrlt.w	r2, r0, r2
 801135a:	189b      	addlt	r3, r3, r2
 801135c:	ea23 0301 	bic.w	r3, r3, r1
 8011360:	e7e5      	b.n	801132e <floorf+0x36>
 8011362:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8011366:	d3e4      	bcc.n	8011332 <floorf+0x3a>
 8011368:	ee30 0a00 	vadd.f32	s0, s0, s0
 801136c:	4770      	bx	lr
 801136e:	2300      	movs	r3, #0
 8011370:	e7dd      	b.n	801132e <floorf+0x36>
 8011372:	bf00      	nop
 8011374:	7149f2ca 	.word	0x7149f2ca
 8011378:	bf800000 	.word	0xbf800000
 801137c:	007fffff 	.word	0x007fffff

08011380 <_init>:
 8011380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011382:	bf00      	nop
 8011384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011386:	bc08      	pop	{r3}
 8011388:	469e      	mov	lr, r3
 801138a:	4770      	bx	lr

0801138c <_fini>:
 801138c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801138e:	bf00      	nop
 8011390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011392:	bc08      	pop	{r3}
 8011394:	469e      	mov	lr, r3
 8011396:	4770      	bx	lr
