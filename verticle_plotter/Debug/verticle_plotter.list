
verticle_plotter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e0fc  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000460  0800e2d4  0800e2d4  0000f2d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e734  0800e734  000101d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800e734  0800e734  0000f734  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e73c  0800e73c  000101d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e73c  0800e73c  0000f73c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e740  0800e740  0000f740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800e744  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002170  200001d4  0800e918  000101d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002344  0800e918  00010344  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000101d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002af10  00000000  00000000  00010204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005294  00000000  00000000  0003b114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b78  00000000  00000000  000403a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000154c  00000000  00000000  00041f20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d7f6  00000000  00000000  0004346c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00029f72  00000000  00000000  00070c62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00119879  00000000  00000000  0009abd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001b444d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000079e4  00000000  00000000  001b4490  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  001bbe74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200001d4 	.word	0x200001d4
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800e2bc 	.word	0x0800e2bc

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200001d8 	.word	0x200001d8
 8000214:	0800e2bc 	.word	0x0800e2bc

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2iz>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009bc:	d215      	bcs.n	80009ea <__aeabi_d2iz+0x36>
 80009be:	d511      	bpl.n	80009e4 <__aeabi_d2iz+0x30>
 80009c0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d912      	bls.n	80009f0 <__aeabi_d2iz+0x3c>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009da:	fa23 f002 	lsr.w	r0, r3, r2
 80009de:	bf18      	it	ne
 80009e0:	4240      	negne	r0, r0
 80009e2:	4770      	bx	lr
 80009e4:	f04f 0000 	mov.w	r0, #0
 80009e8:	4770      	bx	lr
 80009ea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ee:	d105      	bne.n	80009fc <__aeabi_d2iz+0x48>
 80009f0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009f4:	bf08      	it	eq
 80009f6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009fa:	4770      	bx	lr
 80009fc:	f04f 0000 	mov.w	r0, #0
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_d2uiz>:
 8000a04:	004a      	lsls	r2, r1, #1
 8000a06:	d211      	bcs.n	8000a2c <__aeabi_d2uiz+0x28>
 8000a08:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a0c:	d211      	bcs.n	8000a32 <__aeabi_d2uiz+0x2e>
 8000a0e:	d50d      	bpl.n	8000a2c <__aeabi_d2uiz+0x28>
 8000a10:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a14:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a18:	d40e      	bmi.n	8000a38 <__aeabi_d2uiz+0x34>
 8000a1a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a1e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a22:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a26:	fa23 f002 	lsr.w	r0, r3, r2
 8000a2a:	4770      	bx	lr
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a36:	d102      	bne.n	8000a3e <__aeabi_d2uiz+0x3a>
 8000a38:	f04f 30ff 	mov.w	r0, #4294967295
 8000a3c:	4770      	bx	lr
 8000a3e:	f04f 0000 	mov.w	r0, #0
 8000a42:	4770      	bx	lr

08000a44 <__aeabi_d2f>:
 8000a44:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a48:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a4c:	bf24      	itt	cs
 8000a4e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a52:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a56:	d90d      	bls.n	8000a74 <__aeabi_d2f+0x30>
 8000a58:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a5c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a60:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a64:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a68:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a6c:	bf08      	it	eq
 8000a6e:	f020 0001 	biceq.w	r0, r0, #1
 8000a72:	4770      	bx	lr
 8000a74:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a78:	d121      	bne.n	8000abe <__aeabi_d2f+0x7a>
 8000a7a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a7e:	bfbc      	itt	lt
 8000a80:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a84:	4770      	bxlt	lr
 8000a86:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a8a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a8e:	f1c2 0218 	rsb	r2, r2, #24
 8000a92:	f1c2 0c20 	rsb	ip, r2, #32
 8000a96:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a9a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	f040 0001 	orrne.w	r0, r0, #1
 8000aa4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aac:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab0:	ea40 000c 	orr.w	r0, r0, ip
 8000ab4:	fa23 f302 	lsr.w	r3, r3, r2
 8000ab8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000abc:	e7cc      	b.n	8000a58 <__aeabi_d2f+0x14>
 8000abe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ac2:	d107      	bne.n	8000ad4 <__aeabi_d2f+0x90>
 8000ac4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ac8:	bf1e      	ittt	ne
 8000aca:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ace:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ad2:	4770      	bxne	lr
 8000ad4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ad8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000adc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_uldivmod>:
 8000ae4:	b953      	cbnz	r3, 8000afc <__aeabi_uldivmod+0x18>
 8000ae6:	b94a      	cbnz	r2, 8000afc <__aeabi_uldivmod+0x18>
 8000ae8:	2900      	cmp	r1, #0
 8000aea:	bf08      	it	eq
 8000aec:	2800      	cmpeq	r0, #0
 8000aee:	bf1c      	itt	ne
 8000af0:	f04f 31ff 	movne.w	r1, #4294967295
 8000af4:	f04f 30ff 	movne.w	r0, #4294967295
 8000af8:	f000 b988 	b.w	8000e0c <__aeabi_idiv0>
 8000afc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b00:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b04:	f000 f806 	bl	8000b14 <__udivmoddi4>
 8000b08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b10:	b004      	add	sp, #16
 8000b12:	4770      	bx	lr

08000b14 <__udivmoddi4>:
 8000b14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b18:	9d08      	ldr	r5, [sp, #32]
 8000b1a:	468e      	mov	lr, r1
 8000b1c:	4604      	mov	r4, r0
 8000b1e:	4688      	mov	r8, r1
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d14a      	bne.n	8000bba <__udivmoddi4+0xa6>
 8000b24:	428a      	cmp	r2, r1
 8000b26:	4617      	mov	r7, r2
 8000b28:	d962      	bls.n	8000bf0 <__udivmoddi4+0xdc>
 8000b2a:	fab2 f682 	clz	r6, r2
 8000b2e:	b14e      	cbz	r6, 8000b44 <__udivmoddi4+0x30>
 8000b30:	f1c6 0320 	rsb	r3, r6, #32
 8000b34:	fa01 f806 	lsl.w	r8, r1, r6
 8000b38:	fa20 f303 	lsr.w	r3, r0, r3
 8000b3c:	40b7      	lsls	r7, r6
 8000b3e:	ea43 0808 	orr.w	r8, r3, r8
 8000b42:	40b4      	lsls	r4, r6
 8000b44:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b48:	fa1f fc87 	uxth.w	ip, r7
 8000b4c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000b50:	0c23      	lsrs	r3, r4, #16
 8000b52:	fb0e 8811 	mls	r8, lr, r1, r8
 8000b56:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b5a:	fb01 f20c 	mul.w	r2, r1, ip
 8000b5e:	429a      	cmp	r2, r3
 8000b60:	d909      	bls.n	8000b76 <__udivmoddi4+0x62>
 8000b62:	18fb      	adds	r3, r7, r3
 8000b64:	f101 30ff 	add.w	r0, r1, #4294967295
 8000b68:	f080 80ea 	bcs.w	8000d40 <__udivmoddi4+0x22c>
 8000b6c:	429a      	cmp	r2, r3
 8000b6e:	f240 80e7 	bls.w	8000d40 <__udivmoddi4+0x22c>
 8000b72:	3902      	subs	r1, #2
 8000b74:	443b      	add	r3, r7
 8000b76:	1a9a      	subs	r2, r3, r2
 8000b78:	b2a3      	uxth	r3, r4
 8000b7a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b7e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b86:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b8a:	459c      	cmp	ip, r3
 8000b8c:	d909      	bls.n	8000ba2 <__udivmoddi4+0x8e>
 8000b8e:	18fb      	adds	r3, r7, r3
 8000b90:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b94:	f080 80d6 	bcs.w	8000d44 <__udivmoddi4+0x230>
 8000b98:	459c      	cmp	ip, r3
 8000b9a:	f240 80d3 	bls.w	8000d44 <__udivmoddi4+0x230>
 8000b9e:	443b      	add	r3, r7
 8000ba0:	3802      	subs	r0, #2
 8000ba2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ba6:	eba3 030c 	sub.w	r3, r3, ip
 8000baa:	2100      	movs	r1, #0
 8000bac:	b11d      	cbz	r5, 8000bb6 <__udivmoddi4+0xa2>
 8000bae:	40f3      	lsrs	r3, r6
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	e9c5 3200 	strd	r3, r2, [r5]
 8000bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bba:	428b      	cmp	r3, r1
 8000bbc:	d905      	bls.n	8000bca <__udivmoddi4+0xb6>
 8000bbe:	b10d      	cbz	r5, 8000bc4 <__udivmoddi4+0xb0>
 8000bc0:	e9c5 0100 	strd	r0, r1, [r5]
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	4608      	mov	r0, r1
 8000bc8:	e7f5      	b.n	8000bb6 <__udivmoddi4+0xa2>
 8000bca:	fab3 f183 	clz	r1, r3
 8000bce:	2900      	cmp	r1, #0
 8000bd0:	d146      	bne.n	8000c60 <__udivmoddi4+0x14c>
 8000bd2:	4573      	cmp	r3, lr
 8000bd4:	d302      	bcc.n	8000bdc <__udivmoddi4+0xc8>
 8000bd6:	4282      	cmp	r2, r0
 8000bd8:	f200 8105 	bhi.w	8000de6 <__udivmoddi4+0x2d2>
 8000bdc:	1a84      	subs	r4, r0, r2
 8000bde:	eb6e 0203 	sbc.w	r2, lr, r3
 8000be2:	2001      	movs	r0, #1
 8000be4:	4690      	mov	r8, r2
 8000be6:	2d00      	cmp	r5, #0
 8000be8:	d0e5      	beq.n	8000bb6 <__udivmoddi4+0xa2>
 8000bea:	e9c5 4800 	strd	r4, r8, [r5]
 8000bee:	e7e2      	b.n	8000bb6 <__udivmoddi4+0xa2>
 8000bf0:	2a00      	cmp	r2, #0
 8000bf2:	f000 8090 	beq.w	8000d16 <__udivmoddi4+0x202>
 8000bf6:	fab2 f682 	clz	r6, r2
 8000bfa:	2e00      	cmp	r6, #0
 8000bfc:	f040 80a4 	bne.w	8000d48 <__udivmoddi4+0x234>
 8000c00:	1a8a      	subs	r2, r1, r2
 8000c02:	0c03      	lsrs	r3, r0, #16
 8000c04:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c08:	b280      	uxth	r0, r0
 8000c0a:	b2bc      	uxth	r4, r7
 8000c0c:	2101      	movs	r1, #1
 8000c0e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000c12:	fb0e 221c 	mls	r2, lr, ip, r2
 8000c16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c1a:	fb04 f20c 	mul.w	r2, r4, ip
 8000c1e:	429a      	cmp	r2, r3
 8000c20:	d907      	bls.n	8000c32 <__udivmoddi4+0x11e>
 8000c22:	18fb      	adds	r3, r7, r3
 8000c24:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000c28:	d202      	bcs.n	8000c30 <__udivmoddi4+0x11c>
 8000c2a:	429a      	cmp	r2, r3
 8000c2c:	f200 80e0 	bhi.w	8000df0 <__udivmoddi4+0x2dc>
 8000c30:	46c4      	mov	ip, r8
 8000c32:	1a9b      	subs	r3, r3, r2
 8000c34:	fbb3 f2fe 	udiv	r2, r3, lr
 8000c38:	fb0e 3312 	mls	r3, lr, r2, r3
 8000c3c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000c40:	fb02 f404 	mul.w	r4, r2, r4
 8000c44:	429c      	cmp	r4, r3
 8000c46:	d907      	bls.n	8000c58 <__udivmoddi4+0x144>
 8000c48:	18fb      	adds	r3, r7, r3
 8000c4a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000c4e:	d202      	bcs.n	8000c56 <__udivmoddi4+0x142>
 8000c50:	429c      	cmp	r4, r3
 8000c52:	f200 80ca 	bhi.w	8000dea <__udivmoddi4+0x2d6>
 8000c56:	4602      	mov	r2, r0
 8000c58:	1b1b      	subs	r3, r3, r4
 8000c5a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000c5e:	e7a5      	b.n	8000bac <__udivmoddi4+0x98>
 8000c60:	f1c1 0620 	rsb	r6, r1, #32
 8000c64:	408b      	lsls	r3, r1
 8000c66:	fa22 f706 	lsr.w	r7, r2, r6
 8000c6a:	431f      	orrs	r7, r3
 8000c6c:	fa0e f401 	lsl.w	r4, lr, r1
 8000c70:	fa20 f306 	lsr.w	r3, r0, r6
 8000c74:	fa2e fe06 	lsr.w	lr, lr, r6
 8000c78:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000c7c:	4323      	orrs	r3, r4
 8000c7e:	fa00 f801 	lsl.w	r8, r0, r1
 8000c82:	fa1f fc87 	uxth.w	ip, r7
 8000c86:	fbbe f0f9 	udiv	r0, lr, r9
 8000c8a:	0c1c      	lsrs	r4, r3, #16
 8000c8c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000c90:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000c94:	fb00 fe0c 	mul.w	lr, r0, ip
 8000c98:	45a6      	cmp	lr, r4
 8000c9a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c9e:	d909      	bls.n	8000cb4 <__udivmoddi4+0x1a0>
 8000ca0:	193c      	adds	r4, r7, r4
 8000ca2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ca6:	f080 809c 	bcs.w	8000de2 <__udivmoddi4+0x2ce>
 8000caa:	45a6      	cmp	lr, r4
 8000cac:	f240 8099 	bls.w	8000de2 <__udivmoddi4+0x2ce>
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	443c      	add	r4, r7
 8000cb4:	eba4 040e 	sub.w	r4, r4, lr
 8000cb8:	fa1f fe83 	uxth.w	lr, r3
 8000cbc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000cc0:	fb09 4413 	mls	r4, r9, r3, r4
 8000cc4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000cc8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ccc:	45a4      	cmp	ip, r4
 8000cce:	d908      	bls.n	8000ce2 <__udivmoddi4+0x1ce>
 8000cd0:	193c      	adds	r4, r7, r4
 8000cd2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000cd6:	f080 8082 	bcs.w	8000dde <__udivmoddi4+0x2ca>
 8000cda:	45a4      	cmp	ip, r4
 8000cdc:	d97f      	bls.n	8000dde <__udivmoddi4+0x2ca>
 8000cde:	3b02      	subs	r3, #2
 8000ce0:	443c      	add	r4, r7
 8000ce2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ce6:	eba4 040c 	sub.w	r4, r4, ip
 8000cea:	fba0 ec02 	umull	lr, ip, r0, r2
 8000cee:	4564      	cmp	r4, ip
 8000cf0:	4673      	mov	r3, lr
 8000cf2:	46e1      	mov	r9, ip
 8000cf4:	d362      	bcc.n	8000dbc <__udivmoddi4+0x2a8>
 8000cf6:	d05f      	beq.n	8000db8 <__udivmoddi4+0x2a4>
 8000cf8:	b15d      	cbz	r5, 8000d12 <__udivmoddi4+0x1fe>
 8000cfa:	ebb8 0203 	subs.w	r2, r8, r3
 8000cfe:	eb64 0409 	sbc.w	r4, r4, r9
 8000d02:	fa04 f606 	lsl.w	r6, r4, r6
 8000d06:	fa22 f301 	lsr.w	r3, r2, r1
 8000d0a:	431e      	orrs	r6, r3
 8000d0c:	40cc      	lsrs	r4, r1
 8000d0e:	e9c5 6400 	strd	r6, r4, [r5]
 8000d12:	2100      	movs	r1, #0
 8000d14:	e74f      	b.n	8000bb6 <__udivmoddi4+0xa2>
 8000d16:	fbb1 fcf2 	udiv	ip, r1, r2
 8000d1a:	0c01      	lsrs	r1, r0, #16
 8000d1c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000d20:	b280      	uxth	r0, r0
 8000d22:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000d26:	463b      	mov	r3, r7
 8000d28:	4638      	mov	r0, r7
 8000d2a:	463c      	mov	r4, r7
 8000d2c:	46b8      	mov	r8, r7
 8000d2e:	46be      	mov	lr, r7
 8000d30:	2620      	movs	r6, #32
 8000d32:	fbb1 f1f7 	udiv	r1, r1, r7
 8000d36:	eba2 0208 	sub.w	r2, r2, r8
 8000d3a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000d3e:	e766      	b.n	8000c0e <__udivmoddi4+0xfa>
 8000d40:	4601      	mov	r1, r0
 8000d42:	e718      	b.n	8000b76 <__udivmoddi4+0x62>
 8000d44:	4610      	mov	r0, r2
 8000d46:	e72c      	b.n	8000ba2 <__udivmoddi4+0x8e>
 8000d48:	f1c6 0220 	rsb	r2, r6, #32
 8000d4c:	fa2e f302 	lsr.w	r3, lr, r2
 8000d50:	40b7      	lsls	r7, r6
 8000d52:	40b1      	lsls	r1, r6
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d5c:	430a      	orrs	r2, r1
 8000d5e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000d62:	b2bc      	uxth	r4, r7
 8000d64:	fb0e 3318 	mls	r3, lr, r8, r3
 8000d68:	0c11      	lsrs	r1, r2, #16
 8000d6a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d6e:	fb08 f904 	mul.w	r9, r8, r4
 8000d72:	40b0      	lsls	r0, r6
 8000d74:	4589      	cmp	r9, r1
 8000d76:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000d7a:	b280      	uxth	r0, r0
 8000d7c:	d93e      	bls.n	8000dfc <__udivmoddi4+0x2e8>
 8000d7e:	1879      	adds	r1, r7, r1
 8000d80:	f108 3cff 	add.w	ip, r8, #4294967295
 8000d84:	d201      	bcs.n	8000d8a <__udivmoddi4+0x276>
 8000d86:	4589      	cmp	r9, r1
 8000d88:	d81f      	bhi.n	8000dca <__udivmoddi4+0x2b6>
 8000d8a:	eba1 0109 	sub.w	r1, r1, r9
 8000d8e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d92:	fb09 f804 	mul.w	r8, r9, r4
 8000d96:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d9a:	b292      	uxth	r2, r2
 8000d9c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000da0:	4542      	cmp	r2, r8
 8000da2:	d229      	bcs.n	8000df8 <__udivmoddi4+0x2e4>
 8000da4:	18ba      	adds	r2, r7, r2
 8000da6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000daa:	d2c4      	bcs.n	8000d36 <__udivmoddi4+0x222>
 8000dac:	4542      	cmp	r2, r8
 8000dae:	d2c2      	bcs.n	8000d36 <__udivmoddi4+0x222>
 8000db0:	f1a9 0102 	sub.w	r1, r9, #2
 8000db4:	443a      	add	r2, r7
 8000db6:	e7be      	b.n	8000d36 <__udivmoddi4+0x222>
 8000db8:	45f0      	cmp	r8, lr
 8000dba:	d29d      	bcs.n	8000cf8 <__udivmoddi4+0x1e4>
 8000dbc:	ebbe 0302 	subs.w	r3, lr, r2
 8000dc0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000dc4:	3801      	subs	r0, #1
 8000dc6:	46e1      	mov	r9, ip
 8000dc8:	e796      	b.n	8000cf8 <__udivmoddi4+0x1e4>
 8000dca:	eba7 0909 	sub.w	r9, r7, r9
 8000dce:	4449      	add	r1, r9
 8000dd0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000dd4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dd8:	fb09 f804 	mul.w	r8, r9, r4
 8000ddc:	e7db      	b.n	8000d96 <__udivmoddi4+0x282>
 8000dde:	4673      	mov	r3, lr
 8000de0:	e77f      	b.n	8000ce2 <__udivmoddi4+0x1ce>
 8000de2:	4650      	mov	r0, sl
 8000de4:	e766      	b.n	8000cb4 <__udivmoddi4+0x1a0>
 8000de6:	4608      	mov	r0, r1
 8000de8:	e6fd      	b.n	8000be6 <__udivmoddi4+0xd2>
 8000dea:	443b      	add	r3, r7
 8000dec:	3a02      	subs	r2, #2
 8000dee:	e733      	b.n	8000c58 <__udivmoddi4+0x144>
 8000df0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000df4:	443b      	add	r3, r7
 8000df6:	e71c      	b.n	8000c32 <__udivmoddi4+0x11e>
 8000df8:	4649      	mov	r1, r9
 8000dfa:	e79c      	b.n	8000d36 <__udivmoddi4+0x222>
 8000dfc:	eba1 0109 	sub.w	r1, r1, r9
 8000e00:	46c4      	mov	ip, r8
 8000e02:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e06:	fb09 f804 	mul.w	r8, r9, r4
 8000e0a:	e7c4      	b.n	8000d96 <__udivmoddi4+0x282>

08000e0c <__aeabi_idiv0>:
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop

08000e10 <ADC_DMA_Init>:

#include "ADC_DMA.h"

void ADC_DMA_Init(ADC_DMA *adc_dma, ADC_HandleTypeDef *hadc,
                 uint16_t *buffer, uint32_t buffer_length,
                 uint8_t num_channels, float vref, float resolution) {
 8000e10:	b480      	push	{r7}
 8000e12:	b089      	sub	sp, #36	@ 0x24
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6178      	str	r0, [r7, #20]
 8000e18:	6139      	str	r1, [r7, #16]
 8000e1a:	60fa      	str	r2, [r7, #12]
 8000e1c:	60bb      	str	r3, [r7, #8]
 8000e1e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000e22:	edc7 0a00 	vstr	s1, [r7]

    adc_dma->hadc = hadc;
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	693a      	ldr	r2, [r7, #16]
 8000e2a:	601a      	str	r2, [r3, #0]
    adc_dma->dma_buffer = buffer;
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	68fa      	ldr	r2, [r7, #12]
 8000e30:	605a      	str	r2, [r3, #4]
    adc_dma->buffer_length = buffer_length;
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	68ba      	ldr	r2, [r7, #8]
 8000e36:	609a      	str	r2, [r3, #8]
    adc_dma->num_channels = num_channels;
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8000e3e:	731a      	strb	r2, [r3, #12]
    adc_dma->adc_vref = vref;
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	687a      	ldr	r2, [r7, #4]
 8000e44:	611a      	str	r2, [r3, #16]
    adc_dma->adc_resolution = resolution;
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	683a      	ldr	r2, [r7, #0]
 8000e4a:	615a      	str	r2, [r3, #20]

    // Default center point and error percentage
    adc_dma->center_point = resolution / 2.0f;  // Typically 2048 for 12-bit ADC
 8000e4c:	ed97 7a00 	vldr	s14, [r7]
 8000e50:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8000e54:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	edc3 7a06 	vstr	s15, [r3, #24]
    adc_dma->error_percentage = 5;              // 5% error by default
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	2205      	movs	r2, #5
 8000e62:	f883 2020 	strb.w	r2, [r3, #32]
    adc_dma->threshold = (adc_dma->error_percentage / 100.0f) * adc_dma->center_point;
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e6c:	ee07 3a90 	vmov	s15, r3
 8000e70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e74:	eddf 6a11 	vldr	s13, [pc, #68]	@ 8000ebc <ADC_DMA_Init+0xac>
 8000e78:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	edd3 7a06 	vldr	s15, [r3, #24]
 8000e82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	edc3 7a07 	vstr	s15, [r3, #28]

    // Initialize DMA buffer
    for (uint32_t i = 0; i < buffer_length; i++) {
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	61fb      	str	r3, [r7, #28]
 8000e90:	e008      	b.n	8000ea4 <ADC_DMA_Init+0x94>
        buffer[i] = 0;
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	005b      	lsls	r3, r3, #1
 8000e96:	68fa      	ldr	r2, [r7, #12]
 8000e98:	4413      	add	r3, r2
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	801a      	strh	r2, [r3, #0]
    for (uint32_t i = 0; i < buffer_length; i++) {
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	61fb      	str	r3, [r7, #28]
 8000ea4:	69fa      	ldr	r2, [r7, #28]
 8000ea6:	68bb      	ldr	r3, [r7, #8]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	d3f2      	bcc.n	8000e92 <ADC_DMA_Init+0x82>
    }
}
 8000eac:	bf00      	nop
 8000eae:	bf00      	nop
 8000eb0:	3724      	adds	r7, #36	@ 0x24
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	42c80000 	.word	0x42c80000

08000ec0 <ADC_DMA_Start>:

void ADC_DMA_Start(ADC_DMA *adc_dma) {
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
    // Perform ADC calibration
    HAL_ADCEx_Calibration_Start(adc_dma->hadc, ADC_SINGLE_ENDED);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	217f      	movs	r1, #127	@ 0x7f
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f006 fb9e 	bl	8007610 <HAL_ADCEx_Calibration_Start>

    // Start ADC with DMA
    HAL_ADC_Start_DMA(adc_dma->hadc, (uint32_t*)adc_dma->dma_buffer, adc_dma->buffer_length);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6818      	ldr	r0, [r3, #0]
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6859      	ldr	r1, [r3, #4]
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	689b      	ldr	r3, [r3, #8]
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	f005 fc87 	bl	80067f4 <HAL_ADC_Start_DMA>
}
 8000ee6:	bf00      	nop
 8000ee8:	3708      	adds	r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
	...

08000ef0 <ADC_DMA_GetValue>:

void ADC_DMA_Stop(ADC_DMA *adc_dma) {
    HAL_ADC_Stop_DMA(adc_dma->hadc);
}

float ADC_DMA_GetValue(ADC_DMA *adc_dma, uint8_t channel_index) {
 8000ef0:	b480      	push	{r7}
 8000ef2:	b087      	sub	sp, #28
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	460b      	mov	r3, r1
 8000efa:	70fb      	strb	r3, [r7, #3]
    uint32_t sum = 0;
 8000efc:	2300      	movs	r3, #0
 8000efe:	617b      	str	r3, [r7, #20]
    uint32_t samples = 0;
 8000f00:	2300      	movs	r3, #0
 8000f02:	613b      	str	r3, [r7, #16]

    // Average all samples for this channel
    for (uint32_t j = channel_index; j < adc_dma->buffer_length; j += adc_dma->num_channels) {
 8000f04:	78fb      	ldrb	r3, [r7, #3]
 8000f06:	60fb      	str	r3, [r7, #12]
 8000f08:	e012      	b.n	8000f30 <ADC_DMA_GetValue+0x40>
        sum += adc_dma->dma_buffer[j];
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	685a      	ldr	r2, [r3, #4]
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	005b      	lsls	r3, r3, #1
 8000f12:	4413      	add	r3, r2
 8000f14:	881b      	ldrh	r3, [r3, #0]
 8000f16:	461a      	mov	r2, r3
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	4413      	add	r3, r2
 8000f1c:	617b      	str	r3, [r7, #20]
        samples++;
 8000f1e:	693b      	ldr	r3, [r7, #16]
 8000f20:	3301      	adds	r3, #1
 8000f22:	613b      	str	r3, [r7, #16]
    for (uint32_t j = channel_index; j < adc_dma->buffer_length; j += adc_dma->num_channels) {
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	7b1b      	ldrb	r3, [r3, #12]
 8000f28:	461a      	mov	r2, r3
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	4413      	add	r3, r2
 8000f2e:	60fb      	str	r3, [r7, #12]
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	689b      	ldr	r3, [r3, #8]
 8000f34:	68fa      	ldr	r2, [r7, #12]
 8000f36:	429a      	cmp	r2, r3
 8000f38:	d3e7      	bcc.n	8000f0a <ADC_DMA_GetValue+0x1a>
    }

    // Calculate raw ADC value
    if (samples > 0) {
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d00c      	beq.n	8000f5a <ADC_DMA_GetValue+0x6a>
        return (float)sum / samples;
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	ee07 3a90 	vmov	s15, r3
 8000f46:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f4a:	693b      	ldr	r3, [r7, #16]
 8000f4c:	ee07 3a90 	vmov	s15, r3
 8000f50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f54:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000f58:	e001      	b.n	8000f5e <ADC_DMA_GetValue+0x6e>
    }

    return 0.0f;
 8000f5a:	eddf 6a05 	vldr	s13, [pc, #20]	@ 8000f70 <ADC_DMA_GetValue+0x80>
}
 8000f5e:	eef0 7a66 	vmov.f32	s15, s13
 8000f62:	eeb0 0a67 	vmov.f32	s0, s15
 8000f66:	371c      	adds	r7, #28
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr
 8000f70:	00000000 	.word	0x00000000

08000f74 <ADC_DMA_SetCenterPoint>:

void ADC_DMA_SetCenterPoint(ADC_DMA *adc_dma, float center_point, uint8_t error_percentage) {
 8000f74:	b480      	push	{r7}
 8000f76:	b085      	sub	sp, #20
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	60f8      	str	r0, [r7, #12]
 8000f7c:	ed87 0a02 	vstr	s0, [r7, #8]
 8000f80:	460b      	mov	r3, r1
 8000f82:	71fb      	strb	r3, [r7, #7]
    adc_dma->center_point = center_point;
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	68ba      	ldr	r2, [r7, #8]
 8000f88:	619a      	str	r2, [r3, #24]
    adc_dma->error_percentage = error_percentage;
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	79fa      	ldrb	r2, [r7, #7]
 8000f8e:	f883 2020 	strb.w	r2, [r3, #32]
    // Update threshold
    adc_dma->threshold = (adc_dma->error_percentage / 100.0f) * adc_dma->center_point;
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f98:	ee07 3a90 	vmov	s15, r3
 8000f9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fa0:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8000fc4 <ADC_DMA_SetCenterPoint+0x50>
 8000fa4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	edd3 7a06 	vldr	s15, [r3, #24]
 8000fae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	edc3 7a07 	vstr	s15, [r3, #28]
}
 8000fb8:	bf00      	nop
 8000fba:	3714      	adds	r7, #20
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr
 8000fc4:	42c80000 	.word	0x42c80000

08000fc8 <ADC_DMA_GetJoystickValue>:

float ADC_DMA_GetJoystickValue(ADC_DMA *adc_dma, uint8_t channel_index, float min_output, float max_output) {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	60f8      	str	r0, [r7, #12]
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	ed87 0a01 	vstr	s0, [r7, #4]
 8000fd6:	edc7 0a00 	vstr	s1, [r7]
 8000fda:	72fb      	strb	r3, [r7, #11]
    // Get raw value
    float value = ADC_DMA_GetValue(adc_dma, channel_index);
 8000fdc:	7afb      	ldrb	r3, [r7, #11]
 8000fde:	4619      	mov	r1, r3
 8000fe0:	68f8      	ldr	r0, [r7, #12]
 8000fe2:	f7ff ff85 	bl	8000ef0 <ADC_DMA_GetValue>
 8000fe6:	ed87 0a05 	vstr	s0, [r7, #20]

    // Apply threshold (dead zone) as in XYAnalog
    if (fabsf(value - adc_dma->center_point) < adc_dma->threshold) {
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	edd3 7a06 	vldr	s15, [r3, #24]
 8000ff0:	ed97 7a05 	vldr	s14, [r7, #20]
 8000ff4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ff8:	eeb0 7ae7 	vabs.f32	s14, s15
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	edd3 7a07 	vldr	s15, [r3, #28]
 8001002:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800100a:	d502      	bpl.n	8001012 <ADC_DMA_GetJoystickValue+0x4a>
        value = adc_dma->center_point;
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	699b      	ldr	r3, [r3, #24]
 8001010:	617b      	str	r3, [r7, #20]
    }

    // Map to desired output range
    return mapf(value, 0.0f, adc_dma->adc_resolution, min_output, max_output);
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	edd3 7a05 	vldr	s15, [r3, #20]
 8001018:	ed97 2a00 	vldr	s4, [r7]
 800101c:	edd7 1a01 	vldr	s3, [r7, #4]
 8001020:	eeb0 1a67 	vmov.f32	s2, s15
 8001024:	eddf 0a06 	vldr	s1, [pc, #24]	@ 8001040 <ADC_DMA_GetJoystickValue+0x78>
 8001028:	ed97 0a05 	vldr	s0, [r7, #20]
 800102c:	f000 fb54 	bl	80016d8 <mapf>
 8001030:	eef0 7a40 	vmov.f32	s15, s0
}
 8001034:	eeb0 0a67 	vmov.f32	s0, s15
 8001038:	3718      	adds	r7, #24
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	00000000 	.word	0x00000000

08001044 <PWM_Satuation>:
 *  Created on: Apr 14, 2024
 *      Author: beamk
 */
#include "Controller.h"

int32_t PWM_Satuation(float _u, int32_t _upper_limit, int32_t _lower_limit) {
 8001044:	b480      	push	{r7}
 8001046:	b085      	sub	sp, #20
 8001048:	af00      	add	r7, sp, #0
 800104a:	ed87 0a03 	vstr	s0, [r7, #12]
 800104e:	60b8      	str	r0, [r7, #8]
 8001050:	6079      	str	r1, [r7, #4]
  if (_u > _upper_limit) return _upper_limit;
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	ee07 3a90 	vmov	s15, r3
 8001058:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800105c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001060:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001068:	dd01      	ble.n	800106e <PWM_Satuation+0x2a>
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	e013      	b.n	8001096 <PWM_Satuation+0x52>
  else if (_u < _lower_limit) return _lower_limit;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	ee07 3a90 	vmov	s15, r3
 8001074:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001078:	ed97 7a03 	vldr	s14, [r7, #12]
 800107c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001080:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001084:	d501      	bpl.n	800108a <PWM_Satuation+0x46>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	e005      	b.n	8001096 <PWM_Satuation+0x52>
  return (int32_t)_u;
 800108a:	edd7 7a03 	vldr	s15, [r7, #12]
 800108e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001092:	ee17 3a90 	vmov	r3, s15
}
 8001096:	4618      	mov	r0, r3
 8001098:	3714      	adds	r7, #20
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr

080010a2 <PID_CONTROLLER_Init>:

void PID_CONTROLLER_Init(PID_CONTROLLER *controller, float _Kp, float _Ki, float _Kd, float _u_max) {
 80010a2:	b480      	push	{r7}
 80010a4:	b087      	sub	sp, #28
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	6178      	str	r0, [r7, #20]
 80010aa:	ed87 0a04 	vstr	s0, [r7, #16]
 80010ae:	edc7 0a03 	vstr	s1, [r7, #12]
 80010b2:	ed87 1a02 	vstr	s2, [r7, #8]
 80010b6:	edc7 1a01 	vstr	s3, [r7, #4]
  controller->Kp = _Kp;
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	693a      	ldr	r2, [r7, #16]
 80010be:	601a      	str	r2, [r3, #0]
  controller->Ki = _Ki;
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	68fa      	ldr	r2, [r7, #12]
 80010c4:	605a      	str	r2, [r3, #4]
  controller->Kd = _Kd;
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	68ba      	ldr	r2, [r7, #8]
 80010ca:	609a      	str	r2, [r3, #8]
  controller->u_max = _u_max;
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	687a      	ldr	r2, [r7, #4]
 80010d0:	60da      	str	r2, [r3, #12]
  controller->ek_1 = 0;
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	f04f 0200 	mov.w	r2, #0
 80010d8:	611a      	str	r2, [r3, #16]
  controller->ek_2 = 0;
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	f04f 0200 	mov.w	r2, #0
 80010e0:	615a      	str	r2, [r3, #20]
  controller->u = 0;
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	f04f 0200 	mov.w	r2, #0
 80010e8:	619a      	str	r2, [r3, #24]

}
 80010ea:	bf00      	nop
 80010ec:	371c      	adds	r7, #28
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr

080010f6 <PID_CONTROLLER_Compute>:

float PID_CONTROLLER_Compute(PID_CONTROLLER *controller, float ek) {
 80010f6:	b480      	push	{r7}
 80010f8:	b083      	sub	sp, #12
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6078      	str	r0, [r7, #4]
 80010fe:	ed87 0a00 	vstr	s0, [r7]
    if (!((controller->u >= controller->u_max && ek > 0) || (controller->u <= -controller->u_max && ek < 0))) {
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	ed93 7a06 	vldr	s14, [r3, #24]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	edd3 7a03 	vldr	s15, [r3, #12]
 800110e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001112:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001116:	bfac      	ite	ge
 8001118:	2301      	movge	r3, #1
 800111a:	2300      	movlt	r3, #0
 800111c:	b2db      	uxtb	r3, r3
 800111e:	f083 0301 	eor.w	r3, r3, #1
 8001122:	b2db      	uxtb	r3, r3
 8001124:	2b00      	cmp	r3, #0
 8001126:	d10e      	bne.n	8001146 <PID_CONTROLLER_Compute+0x50>
 8001128:	edd7 7a00 	vldr	s15, [r7]
 800112c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001134:	bfcc      	ite	gt
 8001136:	2301      	movgt	r3, #1
 8001138:	2300      	movle	r3, #0
 800113a:	b2db      	uxtb	r3, r3
 800113c:	f083 0301 	eor.w	r3, r3, #1
 8001140:	b2db      	uxtb	r3, r3
 8001142:	2b00      	cmp	r3, #0
 8001144:	d057      	beq.n	80011f6 <PID_CONTROLLER_Compute+0x100>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	ed93 7a06 	vldr	s14, [r3, #24]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001152:	eef1 7a67 	vneg.f32	s15, s15
 8001156:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800115a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800115e:	bf94      	ite	ls
 8001160:	2301      	movls	r3, #1
 8001162:	2300      	movhi	r3, #0
 8001164:	b2db      	uxtb	r3, r3
 8001166:	f083 0301 	eor.w	r3, r3, #1
 800116a:	b2db      	uxtb	r3, r3
 800116c:	2b00      	cmp	r3, #0
 800116e:	d10e      	bne.n	800118e <PID_CONTROLLER_Compute+0x98>
 8001170:	edd7 7a00 	vldr	s15, [r7]
 8001174:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001178:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800117c:	bf4c      	ite	mi
 800117e:	2301      	movmi	r3, #1
 8001180:	2300      	movpl	r3, #0
 8001182:	b2db      	uxtb	r3, r3
 8001184:	f083 0301 	eor.w	r3, r3, #1
 8001188:	b2db      	uxtb	r3, r3
 800118a:	2b00      	cmp	r3, #0
 800118c:	d033      	beq.n	80011f6 <PID_CONTROLLER_Compute+0x100>
        controller->u += ((controller->Kp + controller->Ki + controller->Kd) * ek)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	ed93 7a06 	vldr	s14, [r3, #24]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	edd3 6a00 	vldr	s13, [r3]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	edd3 7a01 	vldr	s15, [r3, #4]
 80011a0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	edd3 7a02 	vldr	s15, [r3, #8]
 80011aa:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80011ae:	edd7 7a00 	vldr	s15, [r7]
 80011b2:	ee66 6aa7 	vmul.f32	s13, s13, s15
                         - ((controller->Kp + (2 * controller->Kd)) * controller->ek_1)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	ed93 6a00 	vldr	s12, [r3]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	edd3 7a02 	vldr	s15, [r3, #8]
 80011c2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80011c6:	ee36 6a27 	vadd.f32	s12, s12, s15
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	edd3 7a04 	vldr	s15, [r3, #16]
 80011d0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80011d4:	ee76 6ae7 	vsub.f32	s13, s13, s15
                         + (controller->Kd * controller->ek_2);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	ed93 6a02 	vldr	s12, [r3, #8]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	edd3 7a05 	vldr	s15, [r3, #20]
 80011e4:	ee66 7a27 	vmul.f32	s15, s12, s15
 80011e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
        controller->u += ((controller->Kp + controller->Ki + controller->Kd) * ek)
 80011ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	edc3 7a06 	vstr	s15, [r3, #24]
    }
    controller->ek_2 = controller->ek_1;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	691a      	ldr	r2, [r3, #16]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	615a      	str	r2, [r3, #20]
    controller->ek_1 = ek;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	683a      	ldr	r2, [r7, #0]
 8001202:	611a      	str	r2, [r3, #16]
    return controller->u;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	699b      	ldr	r3, [r3, #24]
 8001208:	ee07 3a90 	vmov	s15, r3
}
 800120c:	eeb0 0a67 	vmov.f32	s0, s15
 8001210:	370c      	adds	r7, #12
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr

0800121a <MDXX_GPIO_init>:
	PWM_init(&(mdxx->pwm), htimp, timp_chx);
	mdxx->mode = 0;
}

void MDXX_GPIO_init(MDXX *mdxx, TIM_HandleTypeDef *htimp, uint16_t timp_chx,
		GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 800121a:	b580      	push	{r7, lr}
 800121c:	b084      	sub	sp, #16
 800121e:	af00      	add	r7, sp, #0
 8001220:	60f8      	str	r0, [r7, #12]
 8001222:	60b9      	str	r1, [r7, #8]
 8001224:	603b      	str	r3, [r7, #0]
 8001226:	4613      	mov	r3, r2
 8001228:	80fb      	strh	r3, [r7, #6]
	mdxx->htimp = htimp;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	68ba      	ldr	r2, [r7, #8]
 800122e:	609a      	str	r2, [r3, #8]
	mdxx->timp_chx = timp_chx;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	88fa      	ldrh	r2, [r7, #6]
 8001234:	819a      	strh	r2, [r3, #12]
	PWM_init(&(mdxx->pwm), htimp, timp_chx);
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	3328      	adds	r3, #40	@ 0x28
 800123a:	88fa      	ldrh	r2, [r7, #6]
 800123c:	68b9      	ldr	r1, [r7, #8]
 800123e:	4618      	mov	r0, r3
 8001240:	f001 fd3e 	bl	8002cc0 <PWM_init>
	mdxx->GPIOx = GPIOx;
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	683a      	ldr	r2, [r7, #0]
 8001248:	645a      	str	r2, [r3, #68]	@ 0x44
	mdxx->GPIO_Pin = GPIO_Pin;
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	8b3a      	ldrh	r2, [r7, #24]
 800124e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
	mdxx->mode = 1;
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	2201      	movs	r2, #1
 8001256:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
}
 800125a:	bf00      	nop
 800125c:	3710      	adds	r7, #16
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
	...

08001264 <MDXX_set_range>:
			mdxx->cmd = fabs(duty);
		}
	}
}

void MDXX_set_range(MDXX *mdxx, float freq, float duty) {
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0
 800126a:	60f8      	str	r0, [r7, #12]
 800126c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001270:	edc7 0a01 	vstr	s1, [r7, #4]
	if (mdxx->mode == 0) {
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 800127a:	2b00      	cmp	r3, #0
 800127c:	d15f      	bne.n	800133e <MDXX_set_range+0xda>
		if (duty == 0) {
 800127e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001282:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001286:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800128a:	d115      	bne.n	80012b8 <MDXX_set_range+0x54>
			PWM_write_range(&(mdxx->dir), freq, 0);
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	3310      	adds	r3, #16
 8001290:	eddf 0a5f 	vldr	s1, [pc, #380]	@ 8001410 <MDXX_set_range+0x1ac>
 8001294:	ed97 0a02 	vldr	s0, [r7, #8]
 8001298:	4618      	mov	r0, r3
 800129a:	f001 fe39 	bl	8002f10 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, 0);
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	3328      	adds	r3, #40	@ 0x28
 80012a2:	eddf 0a5b 	vldr	s1, [pc, #364]	@ 8001410 <MDXX_set_range+0x1ac>
 80012a6:	ed97 0a02 	vldr	s0, [r7, #8]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f001 fe30 	bl	8002f10 <PWM_write_range>
			mdxx->cmd = 0;
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	2200      	movs	r2, #0
 80012b4:	641a      	str	r2, [r3, #64]	@ 0x40
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 1);
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
			mdxx->cmd = fabs(duty);
		}
	}
}
 80012b6:	e0a6      	b.n	8001406 <MDXX_set_range+0x1a2>
		} else if (duty > 0) {
 80012b8:	edd7 7a01 	vldr	s15, [r7, #4]
 80012bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012c4:	dd1a      	ble.n	80012fc <MDXX_set_range+0x98>
			PWM_write_range(&(mdxx->dir), freq, 0);
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	3310      	adds	r3, #16
 80012ca:	eddf 0a51 	vldr	s1, [pc, #324]	@ 8001410 <MDXX_set_range+0x1ac>
 80012ce:	ed97 0a02 	vldr	s0, [r7, #8]
 80012d2:	4618      	mov	r0, r3
 80012d4:	f001 fe1c 	bl	8002f10 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, duty);
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	3328      	adds	r3, #40	@ 0x28
 80012dc:	edd7 0a01 	vldr	s1, [r7, #4]
 80012e0:	ed97 0a02 	vldr	s0, [r7, #8]
 80012e4:	4618      	mov	r0, r3
 80012e6:	f001 fe13 	bl	8002f10 <PWM_write_range>
			mdxx->cmd = duty;
 80012ea:	edd7 7a01 	vldr	s15, [r7, #4]
 80012ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012f2:	ee17 2a90 	vmov	r2, s15
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80012fa:	e084      	b.n	8001406 <MDXX_set_range+0x1a2>
			PWM_write_range(&(mdxx->dir), freq, 100);
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	3310      	adds	r3, #16
 8001300:	eddf 0a44 	vldr	s1, [pc, #272]	@ 8001414 <MDXX_set_range+0x1b0>
 8001304:	ed97 0a02 	vldr	s0, [r7, #8]
 8001308:	4618      	mov	r0, r3
 800130a:	f001 fe01 	bl	8002f10 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	3328      	adds	r3, #40	@ 0x28
 8001312:	edd7 7a01 	vldr	s15, [r7, #4]
 8001316:	eef0 7ae7 	vabs.f32	s15, s15
 800131a:	eef0 0a67 	vmov.f32	s1, s15
 800131e:	ed97 0a02 	vldr	s0, [r7, #8]
 8001322:	4618      	mov	r0, r3
 8001324:	f001 fdf4 	bl	8002f10 <PWM_write_range>
			mdxx->cmd = fabs(duty);
 8001328:	edd7 7a01 	vldr	s15, [r7, #4]
 800132c:	eef0 7ae7 	vabs.f32	s15, s15
 8001330:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001334:	ee17 2a90 	vmov	r2, s15
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800133c:	e063      	b.n	8001406 <MDXX_set_range+0x1a2>
	} else if (mdxx->mode == 1) {
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8001344:	2b01      	cmp	r3, #1
 8001346:	d15e      	bne.n	8001406 <MDXX_set_range+0x1a2>
		if (duty == 0) {
 8001348:	edd7 7a01 	vldr	s15, [r7, #4]
 800134c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001354:	d115      	bne.n	8001382 <MDXX_set_range+0x11e>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 0);
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8001360:	2200      	movs	r2, #0
 8001362:	4619      	mov	r1, r3
 8001364:	f007 f89a 	bl	800849c <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, 0);
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	3328      	adds	r3, #40	@ 0x28
 800136c:	eddf 0a28 	vldr	s1, [pc, #160]	@ 8001410 <MDXX_set_range+0x1ac>
 8001370:	ed97 0a02 	vldr	s0, [r7, #8]
 8001374:	4618      	mov	r0, r3
 8001376:	f001 fdcb 	bl	8002f10 <PWM_write_range>
			mdxx->cmd = 0;
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	2200      	movs	r2, #0
 800137e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001380:	e041      	b.n	8001406 <MDXX_set_range+0x1a2>
		} else if (duty > 0) {
 8001382:	edd7 7a01 	vldr	s15, [r7, #4]
 8001386:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800138a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800138e:	dd1a      	ble.n	80013c6 <MDXX_set_range+0x162>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 0);
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800139a:	2200      	movs	r2, #0
 800139c:	4619      	mov	r1, r3
 800139e:	f007 f87d 	bl	800849c <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, duty);
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	3328      	adds	r3, #40	@ 0x28
 80013a6:	edd7 0a01 	vldr	s1, [r7, #4]
 80013aa:	ed97 0a02 	vldr	s0, [r7, #8]
 80013ae:	4618      	mov	r0, r3
 80013b0:	f001 fdae 	bl	8002f10 <PWM_write_range>
			mdxx->cmd = duty;
 80013b4:	edd7 7a01 	vldr	s15, [r7, #4]
 80013b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013bc:	ee17 2a90 	vmov	r2, s15
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80013c4:	e01f      	b.n	8001406 <MDXX_set_range+0x1a2>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 1);
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80013d0:	2201      	movs	r2, #1
 80013d2:	4619      	mov	r1, r3
 80013d4:	f007 f862 	bl	800849c <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	3328      	adds	r3, #40	@ 0x28
 80013dc:	edd7 7a01 	vldr	s15, [r7, #4]
 80013e0:	eef0 7ae7 	vabs.f32	s15, s15
 80013e4:	eef0 0a67 	vmov.f32	s1, s15
 80013e8:	ed97 0a02 	vldr	s0, [r7, #8]
 80013ec:	4618      	mov	r0, r3
 80013ee:	f001 fd8f 	bl	8002f10 <PWM_write_range>
			mdxx->cmd = fabs(duty);
 80013f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80013f6:	eef0 7ae7 	vabs.f32	s15, s15
 80013fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013fe:	ee17 2a90 	vmov	r2, s15
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001406:	bf00      	nop
 8001408:	3710      	adds	r7, #16
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	00000000 	.word	0x00000000
 8001414:	42c80000 	.word	0x42c80000

08001418 <REVOLUTE_MOTOR_FFD_Init>:
    .slide_rail_mass = 1893.96e-3, 		// kg
    .c = 64.83e-3,           			// m
    .prismatic_pulley_radius = 1.5915e-2 		// m
};

void REVOLUTE_MOTOR_FFD_Init(DC_MOTOR_FFeedward *motor, Motor_Constant_Structure *_Mx){
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	6039      	str	r1, [r7, #0]
    motor->Mx = _Mx;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	683a      	ldr	r2, [r7, #0]
 8001426:	601a      	str	r2, [r3, #0]
}
 8001428:	bf00      	nop
 800142a:	370c      	adds	r7, #12
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr

08001434 <REVOLUTE_MOTOR_DFD_Init>:
    float v = qd * transfer_function;

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
}

void REVOLUTE_MOTOR_DFD_Init(DC_MOTOR_DFeedward *motor, Motor_Constant_Structure *_Mx, Environment *_En){
 8001434:	b480      	push	{r7}
 8001436:	b085      	sub	sp, #20
 8001438:	af00      	add	r7, sp, #0
 800143a:	60f8      	str	r0, [r7, #12]
 800143c:	60b9      	str	r1, [r7, #8]
 800143e:	607a      	str	r2, [r7, #4]
    motor->Mx = _Mx;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	68ba      	ldr	r2, [r7, #8]
 8001444:	601a      	str	r2, [r3, #0]
    motor->En = _En;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	687a      	ldr	r2, [r7, #4]
 800144a:	605a      	str	r2, [r3, #4]
}
 800144c:	bf00      	nop
 800144e:	3714      	adds	r7, #20
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr

08001458 <PRISMATIC_MOTOR_FFD_Init>:
    float v = (gravity_compensate_plotter + gravity_compensate_rail + mass_torque) * transfer_function;

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
}

void PRISMATIC_MOTOR_FFD_Init(DC_MOTOR_FFeedward *motor, Motor_Constant_Structure *_Mx) {
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	6039      	str	r1, [r7, #0]
    motor->Mx = _Mx;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	683a      	ldr	r2, [r7, #0]
 8001466:	601a      	str	r2, [r3, #0]
}
 8001468:	bf00      	nop
 800146a:	370c      	adds	r7, #12
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr

08001474 <PRISMATIC_MOTOR_DFD_Init>:
    float v = sd * transfer_function;

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
}

void PRISMATIC_MOTOR_DFD_Init(DC_MOTOR_DFeedward *motor, Motor_Constant_Structure *_Mx, Environment *_En){
 8001474:	b480      	push	{r7}
 8001476:	b085      	sub	sp, #20
 8001478:	af00      	add	r7, sp, #0
 800147a:	60f8      	str	r0, [r7, #12]
 800147c:	60b9      	str	r1, [r7, #8]
 800147e:	607a      	str	r2, [r7, #4]
    motor->Mx = _Mx;
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	68ba      	ldr	r2, [r7, #8]
 8001484:	601a      	str	r2, [r3, #0]
    motor->En = _En;
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	687a      	ldr	r2, [r7, #4]
 800148a:	605a      	str	r2, [r3, #4]
}
 800148c:	bf00      	nop
 800148e:	3714      	adds	r7, #20
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr

08001498 <FIR_init>:
 *      Author: transporter
 */
#include "FIR.h"
#include "arm_math.h"

void FIR_init(FIR *fir, uint16_t numTaps, float cutoffFreq, float samplingFreq) {
 8001498:	b580      	push	{r7, lr}
 800149a:	ed2d 8b02 	vpush	{d8}
 800149e:	b08a      	sub	sp, #40	@ 0x28
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	60f8      	str	r0, [r7, #12]
 80014a4:	460b      	mov	r3, r1
 80014a6:	ed87 0a01 	vstr	s0, [r7, #4]
 80014aa:	edc7 0a00 	vstr	s1, [r7]
 80014ae:	817b      	strh	r3, [r7, #10]
    // Make sure numTaps is odd
    if (numTaps % 2 == 0) {
 80014b0:	897b      	ldrh	r3, [r7, #10]
 80014b2:	f003 0301 	and.w	r3, r3, #1
 80014b6:	b29b      	uxth	r3, r3
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d102      	bne.n	80014c2 <FIR_init+0x2a>
        numTaps += 1;
 80014bc:	897b      	ldrh	r3, [r7, #10]
 80014be:	3301      	adds	r3, #1
 80014c0:	817b      	strh	r3, [r7, #10]
    }

    fir->numTaps = numTaps;
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	897a      	ldrh	r2, [r7, #10]
 80014c6:	811a      	strh	r2, [r3, #8]
    fir->bufferIndex = 0;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	2200      	movs	r2, #0
 80014cc:	815a      	strh	r2, [r3, #10]

    // Allocate memory for coefficients and buffer
    fir->coeffs = (float*)malloc(numTaps * sizeof(float));
 80014ce:	897b      	ldrh	r3, [r7, #10]
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	4618      	mov	r0, r3
 80014d4:	f00c f854 	bl	800d580 <malloc>
 80014d8:	4603      	mov	r3, r0
 80014da:	461a      	mov	r2, r3
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	601a      	str	r2, [r3, #0]
    fir->buffer = (float*)malloc(numTaps * sizeof(float));
 80014e0:	897b      	ldrh	r3, [r7, #10]
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	4618      	mov	r0, r3
 80014e6:	f00c f84b 	bl	800d580 <malloc>
 80014ea:	4603      	mov	r3, r0
 80014ec:	461a      	mov	r2, r3
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	605a      	str	r2, [r3, #4]

    if (fir->coeffs != NULL && fir->buffer != NULL) {
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	f000 80e0 	beq.w	80016bc <FIR_init+0x224>
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	2b00      	cmp	r3, #0
 8001502:	f000 80db 	beq.w	80016bc <FIR_init+0x224>
        // Clear buffer
        for (uint16_t i = 0; i < numTaps; i++) {
 8001506:	2300      	movs	r3, #0
 8001508:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800150a:	e00a      	b.n	8001522 <FIR_init+0x8a>
            fir->buffer[i] = 0.0f;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	685a      	ldr	r2, [r3, #4]
 8001510:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	4413      	add	r3, r2
 8001516:	f04f 0200 	mov.w	r2, #0
 800151a:	601a      	str	r2, [r3, #0]
        for (uint16_t i = 0; i < numTaps; i++) {
 800151c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800151e:	3301      	adds	r3, #1
 8001520:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001522:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001524:	897b      	ldrh	r3, [r7, #10]
 8001526:	429a      	cmp	r2, r3
 8001528:	d3f0      	bcc.n	800150c <FIR_init+0x74>
        }

        // Calculate normalized cutoff frequency (0 to 0.5)
        float omega = cutoffFreq / samplingFreq;
 800152a:	edd7 6a01 	vldr	s13, [r7, #4]
 800152e:	ed97 7a00 	vldr	s14, [r7]
 8001532:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001536:	edc7 7a06 	vstr	s15, [r7, #24]

        // Calculate filter coefficients (low-pass)
        int16_t half_taps = numTaps / 2;
 800153a:	897b      	ldrh	r3, [r7, #10]
 800153c:	085b      	lsrs	r3, r3, #1
 800153e:	b29b      	uxth	r3, r3
 8001540:	82fb      	strh	r3, [r7, #22]
        for (int16_t i = 0; i < numTaps; i++) {
 8001542:	2300      	movs	r3, #0
 8001544:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001546:	e077      	b.n	8001638 <FIR_init+0x1a0>
            if (i == half_taps) {
 8001548:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 800154c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001550:	429a      	cmp	r2, r3
 8001552:	d10c      	bne.n	800156e <FIR_init+0xd6>
                // Center tap
                fir->coeffs[i] = 2.0f * omega;
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	4413      	add	r3, r2
 8001560:	edd7 7a06 	vldr	s15, [r7, #24]
 8001564:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001568:	edc3 7a00 	vstr	s15, [r3]
 800156c:	e02c      	b.n	80015c8 <FIR_init+0x130>
            } else {
                // Side taps
                int16_t n = i - half_taps;
 800156e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001570:	8afb      	ldrh	r3, [r7, #22]
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	b29b      	uxth	r3, r3
 8001576:	82bb      	strh	r3, [r7, #20]
                fir->coeffs[i] = sinf(2.0f * PI * omega * n) / (PI * n);
 8001578:	edd7 7a06 	vldr	s15, [r7, #24]
 800157c:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 80016c8 <FIR_init+0x230>
 8001580:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001584:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001588:	ee07 3a90 	vmov	s15, r3
 800158c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001590:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001594:	eeb0 0a67 	vmov.f32	s0, s15
 8001598:	f00c f95c 	bl	800d854 <sinf>
 800159c:	eef0 6a40 	vmov.f32	s13, s0
 80015a0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80015a4:	ee07 3a90 	vmov	s15, r3
 80015a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015ac:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 80016cc <FIR_init+0x234>
 80015b0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	4413      	add	r3, r2
 80015c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015c4:	edc3 7a00 	vstr	s15, [r3]
            }

            // Apply Hamming window
            fir->coeffs[i] *= (0.54f - 0.46f * cosf(2.0f * PI * i / (numTaps - 1)));
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	4413      	add	r3, r2
 80015d4:	ed93 8a00 	vldr	s16, [r3]
 80015d8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80015dc:	ee07 3a90 	vmov	s15, r3
 80015e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015e4:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 80016c8 <FIR_init+0x230>
 80015e8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80015ec:	897b      	ldrh	r3, [r7, #10]
 80015ee:	3b01      	subs	r3, #1
 80015f0:	ee07 3a90 	vmov	s15, r3
 80015f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015f8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80015fc:	eeb0 0a66 	vmov.f32	s0, s13
 8001600:	f00c f8e4 	bl	800d7cc <cosf>
 8001604:	eef0 7a40 	vmov.f32	s15, s0
 8001608:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80016d0 <FIR_init+0x238>
 800160c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001610:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80016d4 <FIR_init+0x23c>
 8001614:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	4413      	add	r3, r2
 8001624:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001628:	edc3 7a00 	vstr	s15, [r3]
        for (int16_t i = 0; i < numTaps; i++) {
 800162c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001630:	b29b      	uxth	r3, r3
 8001632:	3301      	adds	r3, #1
 8001634:	b29b      	uxth	r3, r3
 8001636:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001638:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 800163c:	897b      	ldrh	r3, [r7, #10]
 800163e:	429a      	cmp	r2, r3
 8001640:	db82      	blt.n	8001548 <FIR_init+0xb0>
        }

        // Normalize gain
        float sum = 0.0f;
 8001642:	f04f 0300 	mov.w	r3, #0
 8001646:	623b      	str	r3, [r7, #32]
        for (uint16_t i = 0; i < numTaps; i++) {
 8001648:	2300      	movs	r3, #0
 800164a:	83fb      	strh	r3, [r7, #30]
 800164c:	e00f      	b.n	800166e <FIR_init+0x1d6>
            sum += fir->coeffs[i];
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	8bfb      	ldrh	r3, [r7, #30]
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	4413      	add	r3, r2
 8001658:	edd3 7a00 	vldr	s15, [r3]
 800165c:	ed97 7a08 	vldr	s14, [r7, #32]
 8001660:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001664:	edc7 7a08 	vstr	s15, [r7, #32]
        for (uint16_t i = 0; i < numTaps; i++) {
 8001668:	8bfb      	ldrh	r3, [r7, #30]
 800166a:	3301      	adds	r3, #1
 800166c:	83fb      	strh	r3, [r7, #30]
 800166e:	8bfa      	ldrh	r2, [r7, #30]
 8001670:	897b      	ldrh	r3, [r7, #10]
 8001672:	429a      	cmp	r2, r3
 8001674:	d3eb      	bcc.n	800164e <FIR_init+0x1b6>
        }

        if (sum != 0.0f) {
 8001676:	edd7 7a08 	vldr	s15, [r7, #32]
 800167a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800167e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001682:	d01b      	beq.n	80016bc <FIR_init+0x224>
            for (uint16_t i = 0; i < numTaps; i++) {
 8001684:	2300      	movs	r3, #0
 8001686:	83bb      	strh	r3, [r7, #28]
 8001688:	e014      	b.n	80016b4 <FIR_init+0x21c>
                fir->coeffs[i] /= sum;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	8bbb      	ldrh	r3, [r7, #28]
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	4413      	add	r3, r2
 8001694:	edd3 6a00 	vldr	s13, [r3]
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	8bbb      	ldrh	r3, [r7, #28]
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	4413      	add	r3, r2
 80016a2:	ed97 7a08 	vldr	s14, [r7, #32]
 80016a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016aa:	edc3 7a00 	vstr	s15, [r3]
            for (uint16_t i = 0; i < numTaps; i++) {
 80016ae:	8bbb      	ldrh	r3, [r7, #28]
 80016b0:	3301      	adds	r3, #1
 80016b2:	83bb      	strh	r3, [r7, #28]
 80016b4:	8bba      	ldrh	r2, [r7, #28]
 80016b6:	897b      	ldrh	r3, [r7, #10]
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d3e6      	bcc.n	800168a <FIR_init+0x1f2>
            }
        }
    }
}
 80016bc:	bf00      	nop
 80016be:	3728      	adds	r7, #40	@ 0x28
 80016c0:	46bd      	mov	sp, r7
 80016c2:	ecbd 8b02 	vpop	{d8}
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	40c90fdb 	.word	0x40c90fdb
 80016cc:	40490fdb 	.word	0x40490fdb
 80016d0:	3eeb851f 	.word	0x3eeb851f
 80016d4:	3f0a3d71 	.word	0x3f0a3d71

080016d8 <mapf>:

}

//Scaling a range of value
float mapf(float input, float min_input, float max_input, float min_output,
		float max_output) {
 80016d8:	b480      	push	{r7}
 80016da:	b089      	sub	sp, #36	@ 0x24
 80016dc:	af00      	add	r7, sp, #0
 80016de:	ed87 0a05 	vstr	s0, [r7, #20]
 80016e2:	edc7 0a04 	vstr	s1, [r7, #16]
 80016e6:	ed87 1a03 	vstr	s2, [r7, #12]
 80016ea:	edc7 1a02 	vstr	s3, [r7, #8]
 80016ee:	ed87 2a01 	vstr	s4, [r7, #4]

	// First, find the ratio of the input within the input range
	float input_ratio = (input - min_input) / (max_input - min_input);
 80016f2:	ed97 7a05 	vldr	s14, [r7, #20]
 80016f6:	edd7 7a04 	vldr	s15, [r7, #16]
 80016fa:	ee77 6a67 	vsub.f32	s13, s14, s15
 80016fe:	ed97 7a03 	vldr	s14, [r7, #12]
 8001702:	edd7 7a04 	vldr	s15, [r7, #16]
 8001706:	ee37 7a67 	vsub.f32	s14, s14, s15
 800170a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800170e:	edc7 7a07 	vstr	s15, [r7, #28]
	// Then, scale this ratio to the output range
	float output = (input_ratio * (max_output - min_output)) + min_output;
 8001712:	ed97 7a01 	vldr	s14, [r7, #4]
 8001716:	edd7 7a02 	vldr	s15, [r7, #8]
 800171a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800171e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001722:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001726:	ed97 7a02 	vldr	s14, [r7, #8]
 800172a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800172e:	edc7 7a06 	vstr	s15, [r7, #24]

	return output;
 8001732:	69bb      	ldr	r3, [r7, #24]
 8001734:	ee07 3a90 	vmov	s15, r3
}
 8001738:	eeb0 0a67 	vmov.f32	s0, s15
 800173c:	3724      	adds	r7, #36	@ 0x24
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
	...

08001748 <modbus_1t5_Timeout>:
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);

// function for interrupt
void modbus_1t5_Timeout()
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 800174c:	4b0d      	ldr	r3, [pc, #52]	@ (8001784 <modbus_1t5_Timeout+0x3c>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	2201      	movs	r2, #1
 8001752:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8001754:	4b0b      	ldr	r3, [pc, #44]	@ (8001784 <modbus_1t5_Timeout+0x3c>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	691b      	ldr	r3, [r3, #16]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	2200      	movs	r2, #0
 800175e:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 8001760:	4b08      	ldr	r3, [pc, #32]	@ (8001784 <modbus_1t5_Timeout+0x3c>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	691b      	ldr	r3, [r3, #16]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	4b06      	ldr	r3, [pc, #24]	@ (8001784 <modbus_1t5_Timeout+0x3c>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	691b      	ldr	r3, [r3, #16]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f042 0201 	orr.w	r2, r2, #1
 8001776:	601a      	str	r2, [r3, #0]
}
 8001778:	bf00      	nop
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	200001f0 	.word	0x200001f0

08001788 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8001790:	4b04      	ldr	r3, [pc, #16]	@ (80017a4 <modbus_3t5_Timeout+0x1c>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	2201      	movs	r2, #1
 8001796:	755a      	strb	r2, [r3, #21]

}
 8001798:	bf00      	nop
 800179a:	370c      	adds	r7, #12
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr
 80017a4:	200001f0 	.word	0x200001f0

080017a8 <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	f00a fd1d 	bl	800c1f0 <HAL_UART_GetError>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b20      	cmp	r3, #32
 80017ba:	d101      	bne.n	80017c0 <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 80017bc:	f7ff ffc4 	bl	8001748 <modbus_1t5_Timeout>

	}
}
 80017c0:	bf00      	nop
 80017c2:	3708      	adds	r7, #8
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}

080017c8 <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,UART_HandleTypeDef* huart,TIM_HandleTypeDef* htim ,u16u8_t* RegisterStartAddress,uint8_t slaveAddress,uint32_t RegisterSize)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	60f8      	str	r0, [r7, #12]
 80017d0:	60b9      	str	r1, [r7, #8]
 80017d2:	607a      	str	r2, [r7, #4]
 80017d4:	603b      	str	r3, [r7, #0]
	hModbus = hmodbus;
 80017d6:	4a2d      	ldr	r2, [pc, #180]	@ (800188c <Modbus_init+0xc4>)
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	6013      	str	r3, [r2, #0]

	hModbus->huart = huart;
 80017dc:	4b2b      	ldr	r3, [pc, #172]	@ (800188c <Modbus_init+0xc4>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	68ba      	ldr	r2, [r7, #8]
 80017e2:	60da      	str	r2, [r3, #12]
	hModbus->htim = htim;
 80017e4:	4b29      	ldr	r3, [pc, #164]	@ (800188c <Modbus_init+0xc4>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	687a      	ldr	r2, [r7, #4]
 80017ea:	611a      	str	r2, [r3, #16]
	hModbus->RegisterAddress = RegisterStartAddress;
 80017ec:	4b27      	ldr	r3, [pc, #156]	@ (800188c <Modbus_init+0xc4>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	683a      	ldr	r2, [r7, #0]
 80017f2:	605a      	str	r2, [r3, #4]
	hModbus->slaveAddress = slaveAddress;
 80017f4:	4b25      	ldr	r3, [pc, #148]	@ (800188c <Modbus_init+0xc4>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	7e3a      	ldrb	r2, [r7, #24]
 80017fa:	701a      	strb	r2, [r3, #0]
	hModbus->RegisterSize = RegisterSize;
 80017fc:	4b23      	ldr	r3, [pc, #140]	@ (800188c <Modbus_init+0xc4>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	69fa      	ldr	r2, [r7, #28]
 8001802:	609a      	str	r2, [r3, #8]
	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	691b      	ldr	r3, [r3, #16]
 8001808:	4a21      	ldr	r2, [pc, #132]	@ (8001890 <Modbus_init+0xc8>)
 800180a:	210e      	movs	r1, #14
 800180c:	4618      	mov	r0, r3
 800180e:	f008 ff9d 	bl	800a74c <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	68db      	ldr	r3, [r3, #12]
 8001816:	2110      	movs	r1, #16
 8001818:	4618      	mov	r0, r3
 800181a:	f00a fc93 	bl	800c144 <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	68db      	ldr	r3, [r3, #12]
 8001822:	4618      	mov	r0, r3
 8001824:	f00a fcaa 	bl	800c17c <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	4a19      	ldr	r2, [pc, #100]	@ (8001894 <Modbus_init+0xcc>)
 800182e:	2104      	movs	r1, #4
 8001830:	4618      	mov	r0, r3
 8001832:	f009 ffdb 	bl	800b7ec <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 8001836:	4b15      	ldr	r3, [pc, #84]	@ (800188c <Modbus_init+0xc4>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 800183c:	4b13      	ldr	r3, [pc, #76]	@ (800188c <Modbus_init+0xc4>)
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	4b12      	ldr	r3, [pc, #72]	@ (800188c <Modbus_init+0xc4>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 8001848:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 800184c:	4413      	add	r3, r2
 800184e:	3302      	adds	r3, #2
 8001850:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001854:	4619      	mov	r1, r3
 8001856:	f00a f883 	bl	800b960 <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 800185a:	4b0c      	ldr	r3, [pc, #48]	@ (800188c <Modbus_init+0xc4>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	691b      	ldr	r3, [r3, #16]
 8001860:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001864:	b2db      	uxtb	r3, r3
 8001866:	2b01      	cmp	r3, #1
 8001868:	d10c      	bne.n	8001884 <Modbus_init+0xbc>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 800186a:	4b08      	ldr	r3, [pc, #32]	@ (800188c <Modbus_init+0xc4>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	691b      	ldr	r3, [r3, #16]
 8001870:	4618      	mov	r0, r3
 8001872:	f007 ff47 	bl	8009704 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8001876:	4b05      	ldr	r3, [pc, #20]	@ (800188c <Modbus_init+0xc4>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	691b      	ldr	r3, [r3, #16]
 800187c:	2100      	movs	r1, #0
 800187e:	4618      	mov	r0, r3
 8001880:	f008 f996 	bl	8009bb0 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8001884:	bf00      	nop
 8001886:	3710      	adds	r7, #16
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	200001f0 	.word	0x200001f0
 8001890:	08001789 	.word	0x08001789
 8001894:	080017a9 	.word	0x080017a9

08001898 <MotorKalman_Init>:
#include <string.h>
#include "MotorMatrixGenerator.h"

void MotorKalman_Init(MotorKalman* filter, float32_t dt, float32_t J, float32_t b,
                      float32_t K_t, float32_t K_e, float32_t R_a, float32_t L_a,
                      float32_t Q, float32_t R) {
 8001898:	b580      	push	{r7, lr}
 800189a:	b08c      	sub	sp, #48	@ 0x30
 800189c:	af00      	add	r7, sp, #0
 800189e:	6278      	str	r0, [r7, #36]	@ 0x24
 80018a0:	ed87 0a08 	vstr	s0, [r7, #32]
 80018a4:	edc7 0a07 	vstr	s1, [r7, #28]
 80018a8:	ed87 1a06 	vstr	s2, [r7, #24]
 80018ac:	edc7 1a05 	vstr	s3, [r7, #20]
 80018b0:	ed87 2a04 	vstr	s4, [r7, #16]
 80018b4:	edc7 2a03 	vstr	s5, [r7, #12]
 80018b8:	ed87 3a02 	vstr	s6, [r7, #8]
 80018bc:	edc7 3a01 	vstr	s7, [r7, #4]
 80018c0:	ed87 4a00 	vstr	s8, [r7]
    // Store motor parameters
    filter->dt = dt;
 80018c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018c6:	6a3a      	ldr	r2, [r7, #32]
 80018c8:	f8c3 2338 	str.w	r2, [r3, #824]	@ 0x338
    filter->J = J;
 80018cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ce:	69fa      	ldr	r2, [r7, #28]
 80018d0:	f8c3 233c 	str.w	r2, [r3, #828]	@ 0x33c
    filter->b = b;
 80018d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018d6:	69ba      	ldr	r2, [r7, #24]
 80018d8:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
    filter->K_t = K_t;
 80018dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018de:	697a      	ldr	r2, [r7, #20]
 80018e0:	f8c3 2344 	str.w	r2, [r3, #836]	@ 0x344
    filter->K_e = K_e;
 80018e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018e6:	693a      	ldr	r2, [r7, #16]
 80018e8:	f8c3 2348 	str.w	r2, [r3, #840]	@ 0x348
    filter->R_a = R_a;
 80018ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ee:	68fa      	ldr	r2, [r7, #12]
 80018f0:	f8c3 234c 	str.w	r2, [r3, #844]	@ 0x34c
    filter->L_a = L_a;
 80018f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018f6:	68ba      	ldr	r2, [r7, #8]
 80018f8:	f8c3 2350 	str.w	r2, [r3, #848]	@ 0x350

    // Initialize state vector to zeros
    memset(filter->X, 0, sizeof(filter->X));
 80018fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018fe:	2210      	movs	r2, #16
 8001900:	2100      	movs	r1, #0
 8001902:	4618      	mov	r0, r3
 8001904:	f00b fef2 	bl	800d6ec <memset>

    // Initialize covariance matrix with high values on diagonal to reflect uncertainty
    memset(filter->P, 0, sizeof(filter->P));
 8001908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800190a:	3310      	adds	r3, #16
 800190c:	2240      	movs	r2, #64	@ 0x40
 800190e:	2100      	movs	r1, #0
 8001910:	4618      	mov	r0, r3
 8001912:	f00b feeb 	bl	800d6ec <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001916:	2300      	movs	r3, #0
 8001918:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800191a:	e00c      	b.n	8001936 <MotorKalman_Init+0x9e>
        filter->P[i * MOTOR_KALMAN_NUM_STATES + i] = 100.0f;
 800191c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800191e:	4613      	mov	r3, r2
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	4413      	add	r3, r2
 8001924:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001926:	3304      	adds	r3, #4
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	4413      	add	r3, r2
 800192c:	4a79      	ldr	r2, [pc, #484]	@ (8001b14 <MotorKalman_Init+0x27c>)
 800192e:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001930:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001932:	3301      	adds	r3, #1
 8001934:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001936:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001938:	2b03      	cmp	r3, #3
 800193a:	ddef      	ble.n	800191c <MotorKalman_Init+0x84>
    }

    // Initialize identity matrix
    memset(filter->I_data, 0, sizeof(filter->I_data));
 800193c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800193e:	f503 733e 	add.w	r3, r3, #760	@ 0x2f8
 8001942:	2240      	movs	r2, #64	@ 0x40
 8001944:	2100      	movs	r1, #0
 8001946:	4618      	mov	r0, r3
 8001948:	f00b fed0 	bl	800d6ec <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 800194c:	2300      	movs	r3, #0
 800194e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001950:	e00d      	b.n	800196e <MotorKalman_Init+0xd6>
        filter->I_data[i * MOTOR_KALMAN_NUM_STATES + i] = 1.0f;
 8001952:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001954:	4613      	mov	r3, r2
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	4413      	add	r3, r2
 800195a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800195c:	33be      	adds	r3, #190	@ 0xbe
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	4413      	add	r3, r2
 8001962:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001966:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001968:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800196a:	3301      	adds	r3, #1
 800196c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800196e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001970:	2b03      	cmp	r3, #3
 8001972:	ddee      	ble.n	8001952 <MotorKalman_Init+0xba>
    }

    // Initialize output matrix C - measuring only position by default
    memset(filter->C, 0, sizeof(filter->C));
 8001974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001976:	33f0      	adds	r3, #240	@ 0xf0
 8001978:	2210      	movs	r2, #16
 800197a:	2100      	movs	r1, #0
 800197c:	4618      	mov	r0, r3
 800197e:	f00b feb5 	bl	800d6ec <memset>
    filter->C[0] = 1.0f; // We only measure the position (first state) by default
 8001982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001984:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001988:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

    // Initialize process noise input matrix G
    memset(filter->G, 0, sizeof(filter->G));
 800198c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800198e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001992:	2210      	movs	r2, #16
 8001994:	2100      	movs	r1, #0
 8001996:	4618      	mov	r0, r3
 8001998:	f00b fea8 	bl	800d6ec <memset>
    filter->G[1] = 1.0f; // Process noise primarily affects the velocity state (index 1)
 800199c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800199e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80019a2:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104


    // Set process and measurement noise values
    MotorKalman_SetProcessNoise(filter, Q);
 80019a6:	ed97 0a01 	vldr	s0, [r7, #4]
 80019aa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80019ac:	f000 f922 	bl	8001bf4 <MotorKalman_SetProcessNoise>
    MotorKalman_SetMeasurementNoise(filter, R);
 80019b0:	ed97 0a00 	vldr	s0, [r7]
 80019b4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80019b6:	f000 f94d 	bl	8001c54 <MotorKalman_SetMeasurementNoise>

    // Initialize ARM CMSIS DSP matrix instances - essential for safely using the functions
    arm_mat_init_f32(&filter->X_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->X);
 80019ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019bc:	f503 70d2 	add.w	r0, r3, #420	@ 0x1a4
 80019c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019c2:	2201      	movs	r2, #1
 80019c4:	2104      	movs	r1, #4
 80019c6:	f00b fd12 	bl	800d3ee <arm_mat_init_f32>
    arm_mat_init_f32(&filter->P_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->P);
 80019ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019cc:	f503 70d6 	add.w	r0, r3, #428	@ 0x1ac
 80019d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019d2:	3310      	adds	r3, #16
 80019d4:	2204      	movs	r2, #4
 80019d6:	2104      	movs	r1, #4
 80019d8:	f00b fd09 	bl	800d3ee <arm_mat_init_f32>
    arm_mat_init_f32(&filter->I_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->I_data);
 80019dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019de:	f503 703c 	add.w	r0, r3, #752	@ 0x2f0
 80019e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019e4:	f503 733e 	add.w	r3, r3, #760	@ 0x2f8
 80019e8:	2204      	movs	r2, #4
 80019ea:	2104      	movs	r1, #4
 80019ec:	f00b fcff 	bl	800d3ee <arm_mat_init_f32>
    arm_mat_init_f32(&filter->R_matrix, MOTOR_KALMAN_NUM_OUTPUTS, MOTOR_KALMAN_NUM_OUTPUTS, filter->R);
 80019f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019f2:	f503 70e6 	add.w	r0, r3, #460	@ 0x1cc
 80019f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019f8:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 80019fc:	2201      	movs	r2, #1
 80019fe:	2101      	movs	r1, #1
 8001a00:	f00b fcf5 	bl	800d3ee <arm_mat_init_f32>
    arm_mat_init_f32(&filter->measurement_matrix, MOTOR_KALMAN_NUM_OUTPUTS, 1, filter->measurement_data);
 8001a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a06:	f503 7036 	add.w	r0, r3, #728	@ 0x2d8
 8001a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a0c:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 8001a10:	2201      	movs	r2, #1
 8001a12:	2101      	movs	r1, #1
 8001a14:	f00b fceb 	bl	800d3ee <arm_mat_init_f32>
    arm_mat_init_f32(&filter->input_matrix, MOTOR_KALMAN_NUM_INPUTS, 1, filter->input_data);
 8001a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a1a:	f503 7038 	add.w	r0, r3, #736	@ 0x2e0
 8001a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a20:	f503 733b 	add.w	r3, r3, #748	@ 0x2ec
 8001a24:	2201      	movs	r2, #1
 8001a26:	2101      	movs	r1, #1
 8001a28:	f00b fce1 	bl	800d3ee <arm_mat_init_f32>

    // Initialize matrices for transposed versions
    arm_mat_init_f32(&filter->A_transpose_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->A_transpose_data);
 8001a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a2e:	f503 70ee 	add.w	r0, r3, #476	@ 0x1dc
 8001a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a34:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8001a38:	2204      	movs	r2, #4
 8001a3a:	2104      	movs	r1, #4
 8001a3c:	f00b fcd7 	bl	800d3ee <arm_mat_init_f32>
    arm_mat_init_f32(&filter->C_transpose_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_OUTPUTS, filter->C_transpose_data);
 8001a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a42:	f503 70f2 	add.w	r0, r3, #484	@ 0x1e4
 8001a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a48:	f503 730b 	add.w	r3, r3, #556	@ 0x22c
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	2104      	movs	r1, #4
 8001a50:	f00b fccd 	bl	800d3ee <arm_mat_init_f32>

    // Initialize temp matrices essential for calculations
    arm_mat_init_f32(&filter->temp_state_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->temp_state_data);
 8001a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a56:	f503 700f 	add.w	r0, r3, #572	@ 0x23c
 8001a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a5c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001a60:	2201      	movs	r2, #1
 8001a62:	2104      	movs	r1, #4
 8001a64:	f00b fcc3 	bl	800d3ee <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_state_state_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->temp_state_state_data);
 8001a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a6a:	f503 7011 	add.w	r0, r3, #580	@ 0x244
 8001a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a70:	f503 731d 	add.w	r3, r3, #628	@ 0x274
 8001a74:	2204      	movs	r2, #4
 8001a76:	2104      	movs	r1, #4
 8001a78:	f00b fcb9 	bl	800d3ee <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_output_state_matrix, MOTOR_KALMAN_NUM_OUTPUTS, MOTOR_KALMAN_NUM_STATES, filter->temp_output_state_data);
 8001a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a7e:	f503 7013 	add.w	r0, r3, #588	@ 0x24c
 8001a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a84:	f503 732d 	add.w	r3, r3, #692	@ 0x2b4
 8001a88:	2204      	movs	r2, #4
 8001a8a:	2101      	movs	r1, #1
 8001a8c:	f00b fcaf 	bl	800d3ee <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_output_output_matrix, MOTOR_KALMAN_NUM_OUTPUTS, MOTOR_KALMAN_NUM_OUTPUTS, filter->temp_output_output_data);
 8001a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a92:	f503 7015 	add.w	r0, r3, #596	@ 0x254
 8001a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a98:	f503 7331 	add.w	r3, r3, #708	@ 0x2c4
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	2101      	movs	r1, #1
 8001aa0:	f00b fca5 	bl	800d3ee <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_state_output_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_OUTPUTS, filter->temp_state_output_data);
 8001aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aa6:	f503 7017 	add.w	r0, r3, #604	@ 0x25c
 8001aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aac:	f503 7332 	add.w	r3, r3, #712	@ 0x2c8
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	2104      	movs	r1, #4
 8001ab4:	f00b fc9b 	bl	800d3ee <arm_mat_init_f32>

    // Generate continuous-time matrices and discretize the model
    MotorKalman_DiscretizeModel(filter);
 8001ab8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001aba:	f000 f82d 	bl	8001b18 <MotorKalman_DiscretizeModel>

    // Initialize system matrices after discretization
    arm_mat_init_f32(&filter->A_d_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->A_d);
 8001abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ac0:	f503 70da 	add.w	r0, r3, #436	@ 0x1b4
 8001ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ac6:	3390      	adds	r3, #144	@ 0x90
 8001ac8:	2204      	movs	r2, #4
 8001aca:	2104      	movs	r1, #4
 8001acc:	f00b fc8f 	bl	800d3ee <arm_mat_init_f32>
    arm_mat_init_f32(&filter->B_d_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_INPUTS, filter->B_d);
 8001ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ad2:	f503 70de 	add.w	r0, r3, #444	@ 0x1bc
 8001ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ad8:	33e0      	adds	r3, #224	@ 0xe0
 8001ada:	2201      	movs	r2, #1
 8001adc:	2104      	movs	r1, #4
 8001ade:	f00b fc86 	bl	800d3ee <arm_mat_init_f32>
    arm_mat_init_f32(&filter->Q_d_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->Q_d);
 8001ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ae4:	f503 70e2 	add.w	r0, r3, #452	@ 0x1c4
 8001ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aea:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001aee:	2204      	movs	r2, #4
 8001af0:	2104      	movs	r1, #4
 8001af2:	f00b fc7c 	bl	800d3ee <arm_mat_init_f32>
    arm_mat_init_f32(&filter->K_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_OUTPUTS, filter->K);
 8001af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001af8:	f503 70ea 	add.w	r0, r3, #468	@ 0x1d4
 8001afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001afe:	f503 73ca 	add.w	r3, r3, #404	@ 0x194
 8001b02:	2201      	movs	r2, #1
 8001b04:	2104      	movs	r1, #4
 8001b06:	f00b fc72 	bl	800d3ee <arm_mat_init_f32>
}
 8001b0a:	bf00      	nop
 8001b0c:	3730      	adds	r7, #48	@ 0x30
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	42c80000 	.word	0x42c80000

08001b18 <MotorKalman_DiscretizeModel>:

void MotorKalman_DiscretizeModel(MotorKalman* filter) {
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
    // Use the GenerateMotorMatrices function to discretize the model
    GenerateMotorMatrices(
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	edd3 7ad3 	vldr	s15, [r3, #844]	@ 0x34c
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	ed93 7ad4 	vldr	s14, [r3, #848]	@ 0x350
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	edd3 6acf 	vldr	s13, [r3, #828]	@ 0x33c
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	ed93 6ad0 	vldr	s12, [r3, #832]	@ 0x340
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	edd3 5ad2 	vldr	s11, [r3, #840]	@ 0x348
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	ed93 5ad1 	vldr	s10, [r3, #836]	@ 0x344
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	edd3 4ace 	vldr	s9, [r3, #824]	@ 0x338
        filter->J,       // Motor inertia
        filter->b,       // Viscous friction coefficient
        filter->K_e,     // Back-EMF constant
        filter->K_t,     // Torque constant
        filter->dt,      // Sample time
        filter->A_d,     // Output discrete state matrix
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	f103 0290 	add.w	r2, r3, #144	@ 0x90
        filter->B_d      // Output discrete input matrix
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	33e0      	adds	r3, #224	@ 0xe0
    GenerateMotorMatrices(
 8001b54:	4619      	mov	r1, r3
 8001b56:	4610      	mov	r0, r2
 8001b58:	eeb0 3a64 	vmov.f32	s6, s9
 8001b5c:	eef0 2a45 	vmov.f32	s5, s10
 8001b60:	eeb0 2a65 	vmov.f32	s4, s11
 8001b64:	eef0 1a46 	vmov.f32	s3, s12
 8001b68:	eeb0 1a66 	vmov.f32	s2, s13
 8001b6c:	eef0 0a47 	vmov.f32	s1, s14
 8001b70:	eeb0 0a67 	vmov.f32	s0, s15
 8001b74:	f001 f83c 	bl	8002bf0 <GenerateMotorMatrices>
    );

    // Initialize discrete process noise matrix Q_d (simplified for stability)
    memset(filter->Q_d, 0, sizeof(filter->Q_d));
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001b7e:	2240      	movs	r2, #64	@ 0x40
 8001b80:	2100      	movs	r1, #0
 8001b82:	4618      	mov	r0, r3
 8001b84:	f00b fdb2 	bl	800d6ec <memset>

    // Set diagonal elements for process noise (simpler but reliable approach)
    filter->Q_d[0 * MOTOR_KALMAN_NUM_STATES + 0] = 0.01f * filter->dt * filter->dt; // Position noise
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 8001b8e:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8001bec <MotorKalman_DiscretizeModel+0xd4>
 8001b92:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 8001b9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	edc3 7a54 	vstr	s15, [r3, #336]	@ 0x150
    filter->Q_d[1 * MOTOR_KALMAN_NUM_STATES + 1] = filter->Q[1 * MOTOR_KALMAN_NUM_STATES + 1] * filter->dt; // Velocity noise (main process noise)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	ed93 7a49 	vldr	s14, [r3, #292]	@ 0x124
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 8001bb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	edc3 7a59 	vstr	s15, [r3, #356]	@ 0x164
    filter->Q_d[2 * MOTOR_KALMAN_NUM_STATES + 2] = 0.1f * filter->dt; // Load torque noise
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 8001bc2:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8001bf0 <MotorKalman_DiscretizeModel+0xd8>
 8001bc6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	edc3 7a5e 	vstr	s15, [r3, #376]	@ 0x178
    filter->Q_d[3 * MOTOR_KALMAN_NUM_STATES + 3] = 0.01f * filter->dt; // Current noise
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 8001bd6:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8001bec <MotorKalman_DiscretizeModel+0xd4>
 8001bda:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	edc3 7a63 	vstr	s15, [r3, #396]	@ 0x18c
}
 8001be4:	bf00      	nop
 8001be6:	3708      	adds	r7, #8
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	3c23d70a 	.word	0x3c23d70a
 8001bf0:	3dcccccd 	.word	0x3dcccccd

08001bf4 <MotorKalman_SetProcessNoise>:

void MotorKalman_SetProcessNoise(MotorKalman* filter, float32_t Q) {
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	ed87 0a00 	vstr	s0, [r7]
    // Set the process noise covariance matrix Q (continuous)
    memset(filter->Q, 0, sizeof(filter->Q));
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8001c06:	2240      	movs	r2, #64	@ 0x40
 8001c08:	2100      	movs	r1, #0
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f00b fd6e 	bl	800d6ec <memset>

    // Only the velocity state (index 1) has process noise per G = [0;1;0;0]
    filter->Q[1 * MOTOR_KALMAN_NUM_STATES + 1] = Q * Q;
 8001c10:	edd7 7a00 	vldr	s15, [r7]
 8001c14:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	edc3 7a49 	vstr	s15, [r3, #292]	@ 0x124
    filter->sigma_ml = Q;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	683a      	ldr	r2, [r7, #0]
 8001c22:	f8c3 2354 	str.w	r2, [r3, #852]	@ 0x354

    // Update the discrete process noise matrix if A_d has already been initialized
    if (filter->A_d[0] != 0.0f || filter->A_d[1] != 0.0f) {
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	edd3 7a24 	vldr	s15, [r3, #144]	@ 0x90
 8001c2c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001c30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c34:	d107      	bne.n	8001c46 <MotorKalman_SetProcessNoise+0x52>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	edd3 7a25 	vldr	s15, [r3, #148]	@ 0x94
 8001c3c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001c40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c44:	d002      	beq.n	8001c4c <MotorKalman_SetProcessNoise+0x58>
        MotorKalman_DiscretizeModel(filter); // Recompute discretization with new Q
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f7ff ff66 	bl	8001b18 <MotorKalman_DiscretizeModel>
    }
}
 8001c4c:	bf00      	nop
 8001c4e:	3708      	adds	r7, #8
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}

08001c54 <MotorKalman_SetMeasurementNoise>:

void MotorKalman_SetMeasurementNoise(MotorKalman* filter, float32_t R) {
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	ed87 0a00 	vstr	s0, [r7]
    // Store the noise value
    filter->sigma_pos = sqrtf(R);
 8001c60:	ed97 0a00 	vldr	s0, [r7]
 8001c64:	f00b fd94 	bl	800d790 <sqrtf>
 8001c68:	eef0 7a40 	vmov.f32	s15, s0
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	edc3 7ad6 	vstr	s15, [r3, #856]	@ 0x358

    // Set the measurement noise covariance matrix R
    filter->R[0] = R;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	683a      	ldr	r2, [r7, #0]
 8001c76:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
}
 8001c7a:	bf00      	nop
 8001c7c:	3708      	adds	r7, #8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}

08001c82 <MotorKalman_Predict>:
    filter->velocity = 0.0f;
    filter->load_torque = 0.0f;
    filter->current = 0.0f;
}

void MotorKalman_Predict(MotorKalman* filter, float32_t voltage_input) {
 8001c82:	b580      	push	{r7, lr}
 8001c84:	b0b2      	sub	sp, #200	@ 0xc8
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	6078      	str	r0, [r7, #4]
 8001c8a:	ed87 0a00 	vstr	s0, [r7]
    // Store input for next step
    filter->input_data[0] = voltage_input;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	683a      	ldr	r2, [r7, #0]
 8001c92:	f8c3 22ec 	str.w	r2, [r3, #748]	@ 0x2ec

    // 1. State prediction using simplified method (more stable in embedded systems)
    // Compute x = A*x + B*u directly without using matrix operations
    float32_t new_state[MOTOR_KALMAN_NUM_STATES] = {0};
 8001c96:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	601a      	str	r2, [r3, #0]
 8001c9e:	605a      	str	r2, [r3, #4]
 8001ca0:	609a      	str	r2, [r3, #8]
 8001ca2:	60da      	str	r2, [r3, #12]

    // Calculate A*x (manually)
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8001caa:	e041      	b.n	8001d30 <MotorKalman_Predict+0xae>
        new_state[i] = 0;
 8001cac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	33c8      	adds	r3, #200	@ 0xc8
 8001cb4:	443b      	add	r3, r7
 8001cb6:	3b3c      	subs	r3, #60	@ 0x3c
 8001cb8:	f04f 0200 	mov.w	r2, #0
 8001cbc:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001cc4:	e02b      	b.n	8001d1e <MotorKalman_Predict+0x9c>
            new_state[i] += filter->A_d[i * MOTOR_KALMAN_NUM_STATES + j] * filter->X[j];
 8001cc6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	33c8      	adds	r3, #200	@ 0xc8
 8001cce:	443b      	add	r3, r7
 8001cd0:	3b3c      	subs	r3, #60	@ 0x3c
 8001cd2:	ed93 7a00 	vldr	s14, [r3]
 8001cd6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001cda:	009a      	lsls	r2, r3, #2
 8001cdc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001ce0:	4413      	add	r3, r2
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	3324      	adds	r3, #36	@ 0x24
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	4413      	add	r3, r2
 8001cea:	edd3 6a00 	vldr	s13, [r3]
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	4413      	add	r3, r2
 8001cf8:	edd3 7a00 	vldr	s15, [r3]
 8001cfc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d04:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	33c8      	adds	r3, #200	@ 0xc8
 8001d0c:	443b      	add	r3, r7
 8001d0e:	3b3c      	subs	r3, #60	@ 0x3c
 8001d10:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8001d14:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001d18:	3301      	adds	r3, #1
 8001d1a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001d1e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001d22:	2b03      	cmp	r3, #3
 8001d24:	ddcf      	ble.n	8001cc6 <MotorKalman_Predict+0x44>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001d26:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8001d30:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001d34:	2b03      	cmp	r3, #3
 8001d36:	ddb9      	ble.n	8001cac <MotorKalman_Predict+0x2a>
        }
    }

    // Add B*u (manually)
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001d38:	2300      	movs	r3, #0
 8001d3a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8001d3e:	e021      	b.n	8001d84 <MotorKalman_Predict+0x102>
        filter->X[i] = new_state[i] + filter->B_d[i] * voltage_input;
 8001d40:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	33c8      	adds	r3, #200	@ 0xc8
 8001d48:	443b      	add	r3, r7
 8001d4a:	3b3c      	subs	r3, #60	@ 0x3c
 8001d4c:	ed93 7a00 	vldr	s14, [r3]
 8001d50:	687a      	ldr	r2, [r7, #4]
 8001d52:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001d56:	3338      	adds	r3, #56	@ 0x38
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	4413      	add	r3, r2
 8001d5c:	edd3 6a00 	vldr	s13, [r3]
 8001d60:	edd7 7a00 	vldr	s15, [r7]
 8001d64:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	4413      	add	r3, r2
 8001d76:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001d7a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001d7e:	3301      	adds	r3, #1
 8001d80:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8001d84:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001d88:	2b03      	cmp	r3, #3
 8001d8a:	ddd9      	ble.n	8001d40 <MotorKalman_Predict+0xbe>
    }

    // 2. Covariance prediction using simplified method (Joseph form for stability)
    // Using direct matrix computation for P = A*P*A' + Q
    float32_t AP[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES] = {0};
 8001d8c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001d90:	2240      	movs	r2, #64	@ 0x40
 8001d92:	2100      	movs	r1, #0
 8001d94:	4618      	mov	r0, r3
 8001d96:	f00b fca9 	bl	800d6ec <memset>
    float32_t APAT[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES] = {0};
 8001d9a:	f107 030c 	add.w	r3, r7, #12
 8001d9e:	2240      	movs	r2, #64	@ 0x40
 8001da0:	2100      	movs	r1, #0
 8001da2:	4618      	mov	r0, r3
 8001da4:	f00b fca2 	bl	800d6ec <memset>

    // Compute A*P
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001da8:	2300      	movs	r3, #0
 8001daa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001dae:	e05f      	b.n	8001e70 <MotorKalman_Predict+0x1ee>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8001db0:	2300      	movs	r3, #0
 8001db2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001db6:	e052      	b.n	8001e5e <MotorKalman_Predict+0x1dc>
            AP[i * MOTOR_KALMAN_NUM_STATES + j] = 0;
 8001db8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001dbc:	009a      	lsls	r2, r3, #2
 8001dbe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001dc2:	4413      	add	r3, r2
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	33c8      	adds	r3, #200	@ 0xc8
 8001dc8:	443b      	add	r3, r7
 8001dca:	3b7c      	subs	r3, #124	@ 0x7c
 8001dcc:	f04f 0200 	mov.w	r2, #0
 8001dd0:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001dd8:	e038      	b.n	8001e4c <MotorKalman_Predict+0x1ca>
                AP[i * MOTOR_KALMAN_NUM_STATES + j] +=
 8001dda:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001dde:	009a      	lsls	r2, r3, #2
 8001de0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001de4:	4413      	add	r3, r2
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	33c8      	adds	r3, #200	@ 0xc8
 8001dea:	443b      	add	r3, r7
 8001dec:	3b7c      	subs	r3, #124	@ 0x7c
 8001dee:	ed93 7a00 	vldr	s14, [r3]
                    filter->A_d[i * MOTOR_KALMAN_NUM_STATES + k] * filter->P[k * MOTOR_KALMAN_NUM_STATES + j];
 8001df2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001df6:	009a      	lsls	r2, r3, #2
 8001df8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001dfc:	4413      	add	r3, r2
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	3324      	adds	r3, #36	@ 0x24
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	4413      	add	r3, r2
 8001e06:	edd3 6a00 	vldr	s13, [r3]
 8001e0a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001e0e:	009a      	lsls	r2, r3, #2
 8001e10:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001e14:	4413      	add	r3, r2
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	3304      	adds	r3, #4
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	4413      	add	r3, r2
 8001e1e:	edd3 7a00 	vldr	s15, [r3]
 8001e22:	ee66 7aa7 	vmul.f32	s15, s13, s15
                AP[i * MOTOR_KALMAN_NUM_STATES + j] +=
 8001e26:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001e2a:	009a      	lsls	r2, r3, #2
 8001e2c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001e30:	4413      	add	r3, r2
 8001e32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	33c8      	adds	r3, #200	@ 0xc8
 8001e3a:	443b      	add	r3, r7
 8001e3c:	3b7c      	subs	r3, #124	@ 0x7c
 8001e3e:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 8001e42:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001e46:	3301      	adds	r3, #1
 8001e48:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001e4c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001e50:	2b03      	cmp	r3, #3
 8001e52:	ddc2      	ble.n	8001dda <MotorKalman_Predict+0x158>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8001e54:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001e58:	3301      	adds	r3, #1
 8001e5a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001e5e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001e62:	2b03      	cmp	r3, #3
 8001e64:	dda8      	ble.n	8001db8 <MotorKalman_Predict+0x136>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001e66:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001e70:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001e74:	2b03      	cmp	r3, #3
 8001e76:	dd9b      	ble.n	8001db0 <MotorKalman_Predict+0x12e>
            }
        }
    }

    // Compute (A*P)*A'
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001e78:	2300      	movs	r3, #0
 8001e7a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8001e7e:	e05f      	b.n	8001f40 <MotorKalman_Predict+0x2be>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8001e80:	2300      	movs	r3, #0
 8001e82:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001e86:	e052      	b.n	8001f2e <MotorKalman_Predict+0x2ac>
            APAT[i * MOTOR_KALMAN_NUM_STATES + j] = 0;
 8001e88:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001e8c:	009a      	lsls	r2, r3, #2
 8001e8e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001e92:	4413      	add	r3, r2
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	33c8      	adds	r3, #200	@ 0xc8
 8001e98:	443b      	add	r3, r7
 8001e9a:	3bbc      	subs	r3, #188	@ 0xbc
 8001e9c:	f04f 0200 	mov.w	r2, #0
 8001ea0:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8001ea8:	e038      	b.n	8001f1c <MotorKalman_Predict+0x29a>
                APAT[i * MOTOR_KALMAN_NUM_STATES + j] +=
 8001eaa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001eae:	009a      	lsls	r2, r3, #2
 8001eb0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001eb4:	4413      	add	r3, r2
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	33c8      	adds	r3, #200	@ 0xc8
 8001eba:	443b      	add	r3, r7
 8001ebc:	3bbc      	subs	r3, #188	@ 0xbc
 8001ebe:	ed93 7a00 	vldr	s14, [r3]
                    AP[i * MOTOR_KALMAN_NUM_STATES + k] * filter->A_d[j * MOTOR_KALMAN_NUM_STATES + k];
 8001ec2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001ec6:	009a      	lsls	r2, r3, #2
 8001ec8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001ecc:	4413      	add	r3, r2
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	33c8      	adds	r3, #200	@ 0xc8
 8001ed2:	443b      	add	r3, r7
 8001ed4:	3b7c      	subs	r3, #124	@ 0x7c
 8001ed6:	edd3 6a00 	vldr	s13, [r3]
 8001eda:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001ede:	009a      	lsls	r2, r3, #2
 8001ee0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001ee4:	4413      	add	r3, r2
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	3324      	adds	r3, #36	@ 0x24
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	4413      	add	r3, r2
 8001eee:	edd3 7a00 	vldr	s15, [r3]
 8001ef2:	ee66 7aa7 	vmul.f32	s15, s13, s15
                APAT[i * MOTOR_KALMAN_NUM_STATES + j] +=
 8001ef6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001efa:	009a      	lsls	r2, r3, #2
 8001efc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001f00:	4413      	add	r3, r2
 8001f02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	33c8      	adds	r3, #200	@ 0xc8
 8001f0a:	443b      	add	r3, r7
 8001f0c:	3bbc      	subs	r3, #188	@ 0xbc
 8001f0e:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 8001f12:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001f16:	3301      	adds	r3, #1
 8001f18:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8001f1c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001f20:	2b03      	cmp	r3, #3
 8001f22:	ddc2      	ble.n	8001eaa <MotorKalman_Predict+0x228>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8001f24:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001f28:	3301      	adds	r3, #1
 8001f2a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001f2e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001f32:	2b03      	cmp	r3, #3
 8001f34:	dda8      	ble.n	8001e88 <MotorKalman_Predict+0x206>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001f36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8001f40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001f44:	2b03      	cmp	r3, #3
 8001f46:	dd9b      	ble.n	8001e80 <MotorKalman_Predict+0x1fe>
            }
        }
    }

    // Add Q to get P = A*P*A' + Q
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001f48:	2300      	movs	r3, #0
 8001f4a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001f4e:	e037      	b.n	8001fc0 <MotorKalman_Predict+0x33e>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8001f50:	2300      	movs	r3, #0
 8001f52:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8001f56:	e02a      	b.n	8001fae <MotorKalman_Predict+0x32c>
            filter->P[i * MOTOR_KALMAN_NUM_STATES + j] =
                APAT[i * MOTOR_KALMAN_NUM_STATES + j] + filter->Q_d[i * MOTOR_KALMAN_NUM_STATES + j];
 8001f58:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001f5c:	009a      	lsls	r2, r3, #2
 8001f5e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001f62:	4413      	add	r3, r2
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	33c8      	adds	r3, #200	@ 0xc8
 8001f68:	443b      	add	r3, r7
 8001f6a:	3bbc      	subs	r3, #188	@ 0xbc
 8001f6c:	ed93 7a00 	vldr	s14, [r3]
 8001f70:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001f74:	009a      	lsls	r2, r3, #2
 8001f76:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001f7a:	4413      	add	r3, r2
 8001f7c:	687a      	ldr	r2, [r7, #4]
 8001f7e:	3354      	adds	r3, #84	@ 0x54
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	4413      	add	r3, r2
 8001f84:	edd3 7a00 	vldr	s15, [r3]
            filter->P[i * MOTOR_KALMAN_NUM_STATES + j] =
 8001f88:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001f8c:	009a      	lsls	r2, r3, #2
 8001f8e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001f92:	4413      	add	r3, r2
                APAT[i * MOTOR_KALMAN_NUM_STATES + j] + filter->Q_d[i * MOTOR_KALMAN_NUM_STATES + j];
 8001f94:	ee77 7a27 	vadd.f32	s15, s14, s15
            filter->P[i * MOTOR_KALMAN_NUM_STATES + j] =
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	3304      	adds	r3, #4
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	4413      	add	r3, r2
 8001fa0:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8001fa4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001fa8:	3301      	adds	r3, #1
 8001faa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8001fae:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001fb2:	2b03      	cmp	r3, #3
 8001fb4:	ddd0      	ble.n	8001f58 <MotorKalman_Predict+0x2d6>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001fb6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001fba:	3301      	adds	r3, #1
 8001fbc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001fc0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001fc4:	2b03      	cmp	r3, #3
 8001fc6:	ddc3      	ble.n	8001f50 <MotorKalman_Predict+0x2ce>
        }
    }

    // Update state estimates for easy access
    filter->position = filter->X[0];
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f8c3 235c 	str.w	r2, [r3, #860]	@ 0x35c
    filter->velocity = filter->X[1];
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	685a      	ldr	r2, [r3, #4]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f8c3 2360 	str.w	r2, [r3, #864]	@ 0x360
    filter->load_torque = filter->X[2];
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	689a      	ldr	r2, [r3, #8]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	f8c3 2364 	str.w	r2, [r3, #868]	@ 0x364
    filter->current = filter->X[3];
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	68da      	ldr	r2, [r3, #12]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	f8c3 2368 	str.w	r2, [r3, #872]	@ 0x368

    // Update CMSIS DSP matrices for next update step
    arm_mat_init_f32(&filter->X_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->X);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	f503 70d2 	add.w	r0, r3, #420	@ 0x1a4
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	2104      	movs	r1, #4
 8001ffc:	f00b f9f7 	bl	800d3ee <arm_mat_init_f32>
    arm_mat_init_f32(&filter->P_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->P);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f503 70d6 	add.w	r0, r3, #428	@ 0x1ac
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	3310      	adds	r3, #16
 800200a:	2204      	movs	r2, #4
 800200c:	2104      	movs	r1, #4
 800200e:	f00b f9ee 	bl	800d3ee <arm_mat_init_f32>
}
 8002012:	bf00      	nop
 8002014:	37c8      	adds	r7, #200	@ 0xc8
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
	...

0800201c <MotorKalman_Update>:

void MotorKalman_Update(MotorKalman* filter, float32_t position) {
 800201c:	b580      	push	{r7, lr}
 800201e:	b0d0      	sub	sp, #320	@ 0x140
 8002020:	af00      	add	r7, sp, #0
 8002022:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002026:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800202a:	6018      	str	r0, [r3, #0]
 800202c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002030:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002034:	ed83 0a00 	vstr	s0, [r3]
    // Store the position measurement
    filter->measurement_data[0] = position;
 8002038:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800203c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8002046:	f5a2 72a0 	sub.w	r2, r2, #320	@ 0x140
 800204a:	6812      	ldr	r2, [r2, #0]
 800204c:	f8c3 22e8 	str.w	r2, [r3, #744]	@ 0x2e8

    // 1. Compute innovation: y - C*x (directly, no matrix operations)
    float32_t Cx = filter->C[0] * filter->X[0] + filter->C[1] * filter->X[1] +
 8002050:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002054:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	ed93 7a3c 	vldr	s14, [r3, #240]	@ 0xf0
 800205e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002062:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	edd3 7a00 	vldr	s15, [r3]
 800206c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002070:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002074:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	edd3 6a3d 	vldr	s13, [r3, #244]	@ 0xf4
 800207e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002082:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	edd3 7a01 	vldr	s15, [r3, #4]
 800208c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002090:	ee37 7a27 	vadd.f32	s14, s14, s15
                  filter->C[2] * filter->X[2] + filter->C[3] * filter->X[3];
 8002094:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002098:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	edd3 6a3e 	vldr	s13, [r3, #248]	@ 0xf8
 80020a2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80020a6:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	edd3 7a02 	vldr	s15, [r3, #8]
 80020b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
    float32_t Cx = filter->C[0] * filter->X[0] + filter->C[1] * filter->X[1] +
 80020b4:	ee37 7a27 	vadd.f32	s14, s14, s15
                  filter->C[2] * filter->X[2] + filter->C[3] * filter->X[3];
 80020b8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80020bc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	edd3 6a3f 	vldr	s13, [r3, #252]	@ 0xfc
 80020c6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80020ca:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	edd3 7a03 	vldr	s15, [r3, #12]
 80020d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
    float32_t Cx = filter->C[0] * filter->X[0] + filter->C[1] * filter->X[1] +
 80020d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020dc:	edc7 7a40 	vstr	s15, [r7, #256]	@ 0x100
    float32_t innovation = position - Cx;
 80020e0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80020e4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80020e8:	ed93 7a00 	vldr	s14, [r3]
 80020ec:	edd7 7a40 	vldr	s15, [r7, #256]	@ 0x100
 80020f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020f4:	edc7 7a3f 	vstr	s15, [r7, #252]	@ 0xfc

    // 2. Compute innovation covariance: S = C*P*C' + R (directly)
    float32_t CP[MOTOR_KALMAN_NUM_STATES] = {0};
 80020f8:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 80020fc:	2200      	movs	r2, #0
 80020fe:	601a      	str	r2, [r3, #0]
 8002100:	605a      	str	r2, [r3, #4]
 8002102:	609a      	str	r2, [r3, #8]
 8002104:	60da      	str	r2, [r3, #12]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002106:	2300      	movs	r3, #0
 8002108:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 800210c:	e04d      	b.n	80021aa <MotorKalman_Update+0x18e>
        CP[i] = 0;
 800210e:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002118:	443b      	add	r3, r7
 800211a:	3b58      	subs	r3, #88	@ 0x58
 800211c:	f04f 0200 	mov.w	r2, #0
 8002120:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002122:	2300      	movs	r3, #0
 8002124:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8002128:	e036      	b.n	8002198 <MotorKalman_Update+0x17c>
            CP[i] += filter->C[j] * filter->P[j * MOTOR_KALMAN_NUM_STATES + i];
 800212a:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002134:	443b      	add	r3, r7
 8002136:	3b58      	subs	r3, #88	@ 0x58
 8002138:	ed93 7a00 	vldr	s14, [r3]
 800213c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002140:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800214a:	333c      	adds	r3, #60	@ 0x3c
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	4413      	add	r3, r2
 8002150:	edd3 6a00 	vldr	s13, [r3]
 8002154:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002158:	009a      	lsls	r2, r3, #2
 800215a:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800215e:	4413      	add	r3, r2
 8002160:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8002164:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8002168:	6812      	ldr	r2, [r2, #0]
 800216a:	3304      	adds	r3, #4
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	4413      	add	r3, r2
 8002170:	edd3 7a00 	vldr	s15, [r3]
 8002174:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002178:	ee77 7a27 	vadd.f32	s15, s14, s15
 800217c:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002186:	443b      	add	r3, r7
 8002188:	3b58      	subs	r3, #88	@ 0x58
 800218a:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 800218e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002192:	3301      	adds	r3, #1
 8002194:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8002198:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800219c:	2b03      	cmp	r3, #3
 800219e:	ddc4      	ble.n	800212a <MotorKalman_Update+0x10e>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80021a0:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80021a4:	3301      	adds	r3, #1
 80021a6:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 80021aa:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80021ae:	2b03      	cmp	r3, #3
 80021b0:	ddad      	ble.n	800210e <MotorKalman_Update+0xf2>
        }
    }

    float32_t CPCT = 0;
 80021b2:	f04f 0300 	mov.w	r3, #0
 80021b6:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80021ba:	2300      	movs	r3, #0
 80021bc:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80021c0:	e021      	b.n	8002206 <MotorKalman_Update+0x1ea>
        CPCT += CP[i] * filter->C[i];
 80021c2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80021cc:	443b      	add	r3, r7
 80021ce:	3b58      	subs	r3, #88	@ 0x58
 80021d0:	ed93 7a00 	vldr	s14, [r3]
 80021d4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80021d8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80021e2:	333c      	adds	r3, #60	@ 0x3c
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	4413      	add	r3, r2
 80021e8:	edd3 7a00 	vldr	s15, [r3]
 80021ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021f0:	ed97 7a4d 	vldr	s14, [r7, #308]	@ 0x134
 80021f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021f8:	edc7 7a4d 	vstr	s15, [r7, #308]	@ 0x134
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80021fc:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002200:	3301      	adds	r3, #1
 8002202:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8002206:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800220a:	2b03      	cmp	r3, #3
 800220c:	ddd9      	ble.n	80021c2 <MotorKalman_Update+0x1a6>
    }

    float32_t S = CPCT + filter->R[0];
 800220e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002212:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	edd3 7a64 	vldr	s15, [r3, #400]	@ 0x190
 800221c:	ed97 7a4d 	vldr	s14, [r7, #308]	@ 0x134
 8002220:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002224:	edc7 7a3e 	vstr	s15, [r7, #248]	@ 0xf8

    // 3. Compute Kalman gain: K = P*C'/S (directly)
    float32_t PC[MOTOR_KALMAN_NUM_STATES] = {0};
 8002228:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 800222c:	2200      	movs	r2, #0
 800222e:	601a      	str	r2, [r3, #0]
 8002230:	605a      	str	r2, [r3, #4]
 8002232:	609a      	str	r2, [r3, #8]
 8002234:	60da      	str	r2, [r3, #12]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002236:	2300      	movs	r3, #0
 8002238:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 800223c:	e04d      	b.n	80022da <MotorKalman_Update+0x2be>
        PC[i] = 0;
 800223e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002248:	443b      	add	r3, r7
 800224a:	3b68      	subs	r3, #104	@ 0x68
 800224c:	f04f 0200 	mov.w	r2, #0
 8002250:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002252:	2300      	movs	r3, #0
 8002254:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8002258:	e036      	b.n	80022c8 <MotorKalman_Update+0x2ac>
            PC[i] += filter->P[i * MOTOR_KALMAN_NUM_STATES + j] * filter->C[j];
 800225a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002264:	443b      	add	r3, r7
 8002266:	3b68      	subs	r3, #104	@ 0x68
 8002268:	ed93 7a00 	vldr	s14, [r3]
 800226c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002270:	009a      	lsls	r2, r3, #2
 8002272:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002276:	4413      	add	r3, r2
 8002278:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800227c:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8002280:	6812      	ldr	r2, [r2, #0]
 8002282:	3304      	adds	r3, #4
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	4413      	add	r3, r2
 8002288:	edd3 6a00 	vldr	s13, [r3]
 800228c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002290:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800229a:	333c      	adds	r3, #60	@ 0x3c
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	4413      	add	r3, r2
 80022a0:	edd3 7a00 	vldr	s15, [r3]
 80022a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80022b6:	443b      	add	r3, r7
 80022b8:	3b68      	subs	r3, #104	@ 0x68
 80022ba:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80022be:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80022c2:	3301      	adds	r3, #1
 80022c4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80022c8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80022cc:	2b03      	cmp	r3, #3
 80022ce:	ddc4      	ble.n	800225a <MotorKalman_Update+0x23e>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80022d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80022d4:	3301      	adds	r3, #1
 80022d6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80022da:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80022de:	2b03      	cmp	r3, #3
 80022e0:	ddad      	ble.n	800223e <MotorKalman_Update+0x222>
        }
    }

    float32_t K[MOTOR_KALMAN_NUM_STATES] = {0};
 80022e2:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 80022e6:	2200      	movs	r2, #0
 80022e8:	601a      	str	r2, [r3, #0]
 80022ea:	605a      	str	r2, [r3, #4]
 80022ec:	609a      	str	r2, [r3, #8]
 80022ee:	60da      	str	r2, [r3, #12]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80022f0:	2300      	movs	r3, #0
 80022f2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80022f6:	e01a      	b.n	800232e <MotorKalman_Update+0x312>
        K[i] = PC[i] / S;
 80022f8:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002302:	443b      	add	r3, r7
 8002304:	3b68      	subs	r3, #104	@ 0x68
 8002306:	edd3 6a00 	vldr	s13, [r3]
 800230a:	ed97 7a3e 	vldr	s14, [r7, #248]	@ 0xf8
 800230e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002312:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 800231c:	443b      	add	r3, r7
 800231e:	3b78      	subs	r3, #120	@ 0x78
 8002320:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002324:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002328:	3301      	adds	r3, #1
 800232a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800232e:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002332:	2b03      	cmp	r3, #3
 8002334:	dde0      	ble.n	80022f8 <MotorKalman_Update+0x2dc>
    }

    // 4. Update state estimate: x = x + K*innovation (directly)
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002336:	2300      	movs	r3, #0
 8002338:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800233c:	e029      	b.n	8002392 <MotorKalman_Update+0x376>
        filter->X[i] += K[i] * innovation;
 800233e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002342:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	4413      	add	r3, r2
 8002350:	ed93 7a00 	vldr	s14, [r3]
 8002354:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 800235e:	443b      	add	r3, r7
 8002360:	3b78      	subs	r3, #120	@ 0x78
 8002362:	edd3 6a00 	vldr	s13, [r3]
 8002366:	edd7 7a3f 	vldr	s15, [r7, #252]	@ 0xfc
 800236a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800236e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002372:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002376:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	4413      	add	r3, r2
 8002384:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002388:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800238c:	3301      	adds	r3, #1
 800238e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002392:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002396:	2b03      	cmp	r3, #3
 8002398:	ddd1      	ble.n	800233e <MotorKalman_Update+0x322>
    }

    // 5. Update covariance matrix: P = (I - K*C)*P (Joseph form for better stability)
    float32_t KC[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES] = {0};
 800239a:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 800239e:	2240      	movs	r2, #64	@ 0x40
 80023a0:	2100      	movs	r1, #0
 80023a2:	4618      	mov	r0, r3
 80023a4:	f00b f9a2 	bl	800d6ec <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80023a8:	2300      	movs	r3, #0
 80023aa:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80023ae:	e035      	b.n	800241c <MotorKalman_Update+0x400>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80023b0:	2300      	movs	r3, #0
 80023b2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80023b6:	e028      	b.n	800240a <MotorKalman_Update+0x3ee>
            KC[i * MOTOR_KALMAN_NUM_STATES + j] = K[i] * filter->C[j];
 80023b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80023c2:	443b      	add	r3, r7
 80023c4:	3b78      	subs	r3, #120	@ 0x78
 80023c6:	ed93 7a00 	vldr	s14, [r3]
 80023ca:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80023ce:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80023d8:	333c      	adds	r3, #60	@ 0x3c
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	4413      	add	r3, r2
 80023de:	edd3 7a00 	vldr	s15, [r3]
 80023e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80023e6:	009a      	lsls	r2, r3, #2
 80023e8:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80023ec:	4413      	add	r3, r2
 80023ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80023f8:	443b      	add	r3, r7
 80023fa:	3bb8      	subs	r3, #184	@ 0xb8
 80023fc:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002400:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002404:	3301      	adds	r3, #1
 8002406:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 800240a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800240e:	2b03      	cmp	r3, #3
 8002410:	ddd2      	ble.n	80023b8 <MotorKalman_Update+0x39c>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002412:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002416:	3301      	adds	r3, #1
 8002418:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800241c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002420:	2b03      	cmp	r3, #3
 8002422:	ddc5      	ble.n	80023b0 <MotorKalman_Update+0x394>
        }
    }

    float32_t IKC[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES] = {0};
 8002424:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002428:	2240      	movs	r2, #64	@ 0x40
 800242a:	2100      	movs	r1, #0
 800242c:	4618      	mov	r0, r3
 800242e:	f00b f95d 	bl	800d6ec <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002432:	2300      	movs	r3, #0
 8002434:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8002438:	e038      	b.n	80024ac <MotorKalman_Update+0x490>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 800243a:	2300      	movs	r3, #0
 800243c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8002440:	e02b      	b.n	800249a <MotorKalman_Update+0x47e>
            IKC[i * MOTOR_KALMAN_NUM_STATES + j] = (i == j ? 1.0f : 0.0f) - KC[i * MOTOR_KALMAN_NUM_STATES + j];
 8002442:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002446:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800244a:	429a      	cmp	r2, r3
 800244c:	d102      	bne.n	8002454 <MotorKalman_Update+0x438>
 800244e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002452:	e001      	b.n	8002458 <MotorKalman_Update+0x43c>
 8002454:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 8002670 <MotorKalman_Update+0x654>
 8002458:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800245c:	009a      	lsls	r2, r3, #2
 800245e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002462:	4413      	add	r3, r2
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 800246a:	443b      	add	r3, r7
 800246c:	3bb8      	subs	r3, #184	@ 0xb8
 800246e:	edd3 7a00 	vldr	s15, [r3]
 8002472:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002476:	009a      	lsls	r2, r3, #2
 8002478:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800247c:	4413      	add	r3, r2
 800247e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002488:	443b      	add	r3, r7
 800248a:	3bf8      	subs	r3, #248	@ 0xf8
 800248c:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002490:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002494:	3301      	adds	r3, #1
 8002496:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 800249a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800249e:	2b03      	cmp	r3, #3
 80024a0:	ddcf      	ble.n	8002442 <MotorKalman_Update+0x426>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80024a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80024a6:	3301      	adds	r3, #1
 80024a8:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 80024ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80024b0:	2b03      	cmp	r3, #3
 80024b2:	ddc2      	ble.n	800243a <MotorKalman_Update+0x41e>
        }
    }

    // Store P temporarily
    float32_t P_temp[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES];
    memcpy(P_temp, filter->P, sizeof(P_temp));
 80024b4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80024b8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f103 0110 	add.w	r1, r3, #16
 80024c2:	f107 0308 	add.w	r3, r7, #8
 80024c6:	2240      	movs	r2, #64	@ 0x40
 80024c8:	4618      	mov	r0, r3
 80024ca:	f00b f953 	bl	800d774 <memcpy>

    // Compute (I - K*C)*P
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80024ce:	2300      	movs	r3, #0
 80024d0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80024d4:	e06e      	b.n	80025b4 <MotorKalman_Update+0x598>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80024d6:	2300      	movs	r3, #0
 80024d8:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80024dc:	e061      	b.n	80025a2 <MotorKalman_Update+0x586>
            filter->P[i * MOTOR_KALMAN_NUM_STATES + j] = 0;
 80024de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80024e2:	009a      	lsls	r2, r3, #2
 80024e4:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80024e8:	4413      	add	r3, r2
 80024ea:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80024ee:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 80024f2:	6812      	ldr	r2, [r2, #0]
 80024f4:	3304      	adds	r3, #4
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	4413      	add	r3, r2
 80024fa:	f04f 0200 	mov.w	r2, #0
 80024fe:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 8002500:	2300      	movs	r3, #0
 8002502:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002506:	e043      	b.n	8002590 <MotorKalman_Update+0x574>
                filter->P[i * MOTOR_KALMAN_NUM_STATES + j] +=
 8002508:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800250c:	009a      	lsls	r2, r3, #2
 800250e:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002512:	4413      	add	r3, r2
 8002514:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8002518:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 800251c:	6812      	ldr	r2, [r2, #0]
 800251e:	3304      	adds	r3, #4
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	4413      	add	r3, r2
 8002524:	ed93 7a00 	vldr	s14, [r3]
                    IKC[i * MOTOR_KALMAN_NUM_STATES + k] * P_temp[k * MOTOR_KALMAN_NUM_STATES + j];
 8002528:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800252c:	009a      	lsls	r2, r3, #2
 800252e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002532:	4413      	add	r3, r2
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 800253a:	443b      	add	r3, r7
 800253c:	3bf8      	subs	r3, #248	@ 0xf8
 800253e:	edd3 6a00 	vldr	s13, [r3]
 8002542:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002546:	009a      	lsls	r2, r3, #2
 8002548:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800254c:	4413      	add	r3, r2
 800254e:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8002552:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	4413      	add	r3, r2
 800255a:	edd3 7a00 	vldr	s15, [r3]
 800255e:	ee66 7aa7 	vmul.f32	s15, s13, s15
                filter->P[i * MOTOR_KALMAN_NUM_STATES + j] +=
 8002562:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002566:	009a      	lsls	r2, r3, #2
 8002568:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800256c:	4413      	add	r3, r2
 800256e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002572:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8002576:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 800257a:	6812      	ldr	r2, [r2, #0]
 800257c:	3304      	adds	r3, #4
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	4413      	add	r3, r2
 8002582:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 8002586:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800258a:	3301      	adds	r3, #1
 800258c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002590:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002594:	2b03      	cmp	r3, #3
 8002596:	ddb7      	ble.n	8002508 <MotorKalman_Update+0x4ec>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002598:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800259c:	3301      	adds	r3, #1
 800259e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80025a2:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80025a6:	2b03      	cmp	r3, #3
 80025a8:	dd99      	ble.n	80024de <MotorKalman_Update+0x4c2>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80025aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80025ae:	3301      	adds	r3, #1
 80025b0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80025b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80025b8:	2b03      	cmp	r3, #3
 80025ba:	dd8c      	ble.n	80024d6 <MotorKalman_Update+0x4ba>
            }
        }
    }

    // Update state estimates for easy access
    filter->position = filter->X[0];
 80025bc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80025c0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80025cc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f8c3 235c 	str.w	r2, [r3, #860]	@ 0x35c
    filter->velocity = filter->X[1];
 80025d6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80025da:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	685a      	ldr	r2, [r3, #4]
 80025e2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80025e6:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f8c3 2360 	str.w	r2, [r3, #864]	@ 0x360
    filter->load_torque = filter->X[2];
 80025f0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80025f4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	689a      	ldr	r2, [r3, #8]
 80025fc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002600:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f8c3 2364 	str.w	r2, [r3, #868]	@ 0x364
    filter->current = filter->X[3];
 800260a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800260e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	68da      	ldr	r2, [r3, #12]
 8002616:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800261a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f8c3 2368 	str.w	r2, [r3, #872]	@ 0x368

    // Update CMSIS DSP matrices for next time
    arm_mat_init_f32(&filter->X_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->X);
 8002624:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002628:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f503 70d2 	add.w	r0, r3, #420	@ 0x1a4
 8002632:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002636:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2201      	movs	r2, #1
 800263e:	2104      	movs	r1, #4
 8002640:	f00a fed5 	bl	800d3ee <arm_mat_init_f32>
    arm_mat_init_f32(&filter->P_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->P);
 8002644:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002648:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f503 70d6 	add.w	r0, r3, #428	@ 0x1ac
 8002652:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002656:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	3310      	adds	r3, #16
 800265e:	2204      	movs	r2, #4
 8002660:	2104      	movs	r1, #4
 8002662:	f00a fec4 	bl	800d3ee <arm_mat_init_f32>
}
 8002666:	bf00      	nop
 8002668:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	00000000 	.word	0x00000000

08002674 <MotorKalman_Estimate>:

float MotorKalman_Estimate(MotorKalman* filter, float32_t voltage_input, float32_t position) {
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	ed87 0a02 	vstr	s0, [r7, #8]
 8002680:	edc7 0a01 	vstr	s1, [r7, #4]
    // Execute the predict and update steps
    MotorKalman_Predict(filter, voltage_input);
 8002684:	ed97 0a02 	vldr	s0, [r7, #8]
 8002688:	68f8      	ldr	r0, [r7, #12]
 800268a:	f7ff fafa 	bl	8001c82 <MotorKalman_Predict>
    MotorKalman_Update(filter, position);
 800268e:	ed97 0a01 	vldr	s0, [r7, #4]
 8002692:	68f8      	ldr	r0, [r7, #12]
 8002694:	f7ff fcc2 	bl	800201c <MotorKalman_Update>

    return filter->velocity;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	f8d3 3360 	ldr.w	r3, [r3, #864]	@ 0x360
 800269e:	ee07 3a90 	vmov	s15, r3
}
 80026a2:	eeb0 0a67 	vmov.f32	s0, s15
 80026a6:	3710      	adds	r7, #16
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}

080026ac <matrix_copy>:

#include "MotorMatrixGenerator.h"
#include <math.h>
#include <string.h>

static void matrix_copy(float32_t *src, float32_t *dst, int size) {
 80026ac:	b480      	push	{r7}
 80026ae:	b087      	sub	sp, #28
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	60f8      	str	r0, [r7, #12]
 80026b4:	60b9      	str	r1, [r7, #8]
 80026b6:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < size; i++) {
 80026b8:	2300      	movs	r3, #0
 80026ba:	617b      	str	r3, [r7, #20]
 80026bc:	e00c      	b.n	80026d8 <matrix_copy+0x2c>
        dst[i] = src[i];
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	68fa      	ldr	r2, [r7, #12]
 80026c4:	441a      	add	r2, r3
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	68b9      	ldr	r1, [r7, #8]
 80026cc:	440b      	add	r3, r1
 80026ce:	6812      	ldr	r2, [r2, #0]
 80026d0:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < size; i++) {
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	3301      	adds	r3, #1
 80026d6:	617b      	str	r3, [r7, #20]
 80026d8:	697a      	ldr	r2, [r7, #20]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	429a      	cmp	r2, r3
 80026de:	dbee      	blt.n	80026be <matrix_copy+0x12>
    }
}
 80026e0:	bf00      	nop
 80026e2:	bf00      	nop
 80026e4:	371c      	adds	r7, #28
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
	...

080026f0 <discretize_system_with_arm>:

static void discretize_system_with_arm(float32_t *A_c, float32_t *B_c, float32_t dt,
                                      float32_t *A_d, float32_t *B_d) {
 80026f0:	b590      	push	{r4, r7, lr}
 80026f2:	f5ad 7d2f 	sub.w	sp, sp, #700	@ 0x2bc
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	f507 742e 	add.w	r4, r7, #696	@ 0x2b8
 80026fc:	f5a4 7429 	sub.w	r4, r4, #676	@ 0x2a4
 8002700:	6020      	str	r0, [r4, #0]
 8002702:	f507 702e 	add.w	r0, r7, #696	@ 0x2b8
 8002706:	f5a0 702a 	sub.w	r0, r0, #680	@ 0x2a8
 800270a:	6001      	str	r1, [r0, #0]
 800270c:	f507 712e 	add.w	r1, r7, #696	@ 0x2b8
 8002710:	f5a1 712b 	sub.w	r1, r1, #684	@ 0x2ac
 8002714:	ed81 0a00 	vstr	s0, [r1]
 8002718:	f507 712e 	add.w	r1, r7, #696	@ 0x2b8
 800271c:	f5a1 712c 	sub.w	r1, r1, #688	@ 0x2b0
 8002720:	600a      	str	r2, [r1, #0]
 8002722:	f507 722e 	add.w	r2, r7, #696	@ 0x2b8
 8002726:	f5a2 722d 	sub.w	r2, r2, #692	@ 0x2b4
 800272a:	6013      	str	r3, [r2, #0]
    // Initialize ARM matrix instances
    arm_matrix_instance_f32 A_c_matrix, A_d_matrix, B_c_matrix, B_d_matrix;
    arm_mat_init_f32(&A_c_matrix, 4, 4, A_c);
 800272c:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002730:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8002734:	f507 7029 	add.w	r0, r7, #676	@ 0x2a4
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	2204      	movs	r2, #4
 800273c:	2104      	movs	r1, #4
 800273e:	f00a fe56 	bl	800d3ee <arm_mat_init_f32>
    arm_mat_init_f32(&A_d_matrix, 4, 4, A_d);
 8002742:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002746:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 800274a:	f507 7027 	add.w	r0, r7, #668	@ 0x29c
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2204      	movs	r2, #4
 8002752:	2104      	movs	r1, #4
 8002754:	f00a fe4b 	bl	800d3ee <arm_mat_init_f32>
    arm_mat_init_f32(&B_c_matrix, 4, 1, B_c);
 8002758:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800275c:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8002760:	f507 7025 	add.w	r0, r7, #660	@ 0x294
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	2201      	movs	r2, #1
 8002768:	2104      	movs	r1, #4
 800276a:	f00a fe40 	bl	800d3ee <arm_mat_init_f32>
    arm_mat_init_f32(&B_d_matrix, 4, 1, B_d);
 800276e:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002772:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8002776:	f507 7023 	add.w	r0, r7, #652	@ 0x28c
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2201      	movs	r2, #1
 800277e:	2104      	movs	r1, #4
 8002780:	f00a fe35 	bl	800d3ee <arm_mat_init_f32>

    // Create identity matrix
    float32_t I_data[16] = {0};
 8002784:	f507 7313 	add.w	r3, r7, #588	@ 0x24c
 8002788:	2240      	movs	r2, #64	@ 0x40
 800278a:	2100      	movs	r1, #0
 800278c:	4618      	mov	r0, r3
 800278e:	f00a ffad 	bl	800d6ec <memset>
    arm_matrix_instance_f32 I_matrix;
    arm_mat_init_f32(&I_matrix, 4, 4, I_data);
 8002792:	f507 7313 	add.w	r3, r7, #588	@ 0x24c
 8002796:	f507 7011 	add.w	r0, r7, #580	@ 0x244
 800279a:	2204      	movs	r2, #4
 800279c:	2104      	movs	r1, #4
 800279e:	f00a fe26 	bl	800d3ee <arm_mat_init_f32>
    for (int i = 0; i < 4; i++) {
 80027a2:	2300      	movs	r3, #0
 80027a4:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
 80027a8:	e011      	b.n	80027ce <discretize_system_with_arm+0xde>
        I_data[i*4 + i] = 1.0f;
 80027aa:	f8d7 22b4 	ldr.w	r2, [r7, #692]	@ 0x2b4
 80027ae:	4613      	mov	r3, r2
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	4413      	add	r3, r2
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	f503 732e 	add.w	r3, r3, #696	@ 0x2b8
 80027ba:	443b      	add	r3, r7
 80027bc:	3b6c      	subs	r3, #108	@ 0x6c
 80027be:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80027c2:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 4; i++) {
 80027c4:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 80027c8:	3301      	adds	r3, #1
 80027ca:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
 80027ce:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 80027d2:	2b03      	cmp	r3, #3
 80027d4:	dde9      	ble.n	80027aa <discretize_system_with_arm+0xba>
    }

    // Create scaled A matrix (A*dt)
    float32_t A_dt_data[16];
    arm_matrix_instance_f32 A_dt_matrix;
    arm_mat_init_f32(&A_dt_matrix, 4, 4, A_dt_data);
 80027d6:	f507 7301 	add.w	r3, r7, #516	@ 0x204
 80027da:	f507 70fe 	add.w	r0, r7, #508	@ 0x1fc
 80027de:	2204      	movs	r2, #4
 80027e0:	2104      	movs	r1, #4
 80027e2:	f00a fe04 	bl	800d3ee <arm_mat_init_f32>
    arm_mat_scale_f32(&A_c_matrix, dt, &A_dt_matrix);
 80027e6:	f507 71fe 	add.w	r1, r7, #508	@ 0x1fc
 80027ea:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80027ee:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80027f2:	f507 7229 	add.w	r2, r7, #676	@ 0x2a4
 80027f6:	ed93 0a00 	vldr	s0, [r3]
 80027fa:	4610      	mov	r0, r2
 80027fc:	f00a fe89 	bl	800d512 <arm_mat_scale_f32>

    // Calculate A_d = exp(A*dt) using Taylor series approximation
    // Initialize A_d to identity matrix
    matrix_copy(I_data, A_d, 16);
 8002800:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002804:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 8002808:	f507 7013 	add.w	r0, r7, #588	@ 0x24c
 800280c:	2210      	movs	r2, #16
 800280e:	6819      	ldr	r1, [r3, #0]
 8002810:	f7ff ff4c 	bl	80026ac <matrix_copy>

    // Calculate powers of A*dt and add them to A_d
    float32_t A_power_data[16];
    float32_t temp_data[16];
    arm_matrix_instance_f32 A_power_matrix, temp_matrix;
    arm_mat_init_f32(&A_power_matrix, 4, 4, A_power_data);
 8002814:	f507 73de 	add.w	r3, r7, #444	@ 0x1bc
 8002818:	f507 70ba 	add.w	r0, r7, #372	@ 0x174
 800281c:	2204      	movs	r2, #4
 800281e:	2104      	movs	r1, #4
 8002820:	f00a fde5 	bl	800d3ee <arm_mat_init_f32>
    arm_mat_init_f32(&temp_matrix, 4, 4, temp_data);
 8002824:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 8002828:	f507 70b6 	add.w	r0, r7, #364	@ 0x16c
 800282c:	2204      	movs	r2, #4
 800282e:	2104      	movs	r1, #4
 8002830:	f00a fddd 	bl	800d3ee <arm_mat_init_f32>

    // First term: I + A*dt
    arm_mat_add_f32(&I_matrix, &A_dt_matrix, &A_d_matrix);
 8002834:	f507 7227 	add.w	r2, r7, #668	@ 0x29c
 8002838:	f507 71fe 	add.w	r1, r7, #508	@ 0x1fc
 800283c:	f507 7311 	add.w	r3, r7, #580	@ 0x244
 8002840:	4618      	mov	r0, r3
 8002842:	f00a fd99 	bl	800d378 <arm_mat_add_f32>

    // Copy A*dt to A_power for computing higher powers
    matrix_copy(A_dt_data, A_power_data, 16);
 8002846:	f507 71de 	add.w	r1, r7, #444	@ 0x1bc
 800284a:	f507 7301 	add.w	r3, r7, #516	@ 0x204
 800284e:	2210      	movs	r2, #16
 8002850:	4618      	mov	r0, r3
 8002852:	f7ff ff2b 	bl	80026ac <matrix_copy>

    // Compute higher order terms using Taylor series
    // A_d = I + A*dt + (A*dt)^2/2 + (A*dt)^3/6 + ...
    float32_t factorial = 1.0f;
 8002856:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800285a:	f8c7 32b0 	str.w	r3, [r7, #688]	@ 0x2b0
    for (int term = 2; term <= 10; term++) {  // Using more terms for better accuracy
 800285e:	2302      	movs	r3, #2
 8002860:	f8c7 32ac 	str.w	r3, [r7, #684]	@ 0x2ac
 8002864:	e03a      	b.n	80028dc <discretize_system_with_arm+0x1ec>
        factorial *= term;
 8002866:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 800286a:	ee07 3a90 	vmov	s15, r3
 800286e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002872:	ed97 7aac 	vldr	s14, [r7, #688]	@ 0x2b0
 8002876:	ee67 7a27 	vmul.f32	s15, s14, s15
 800287a:	edc7 7aac 	vstr	s15, [r7, #688]	@ 0x2b0

        // Compute next power: A_power = A_power * A_dt
        arm_mat_mult_f32(&A_power_matrix, &A_dt_matrix, &temp_matrix);
 800287e:	f507 72b6 	add.w	r2, r7, #364	@ 0x16c
 8002882:	f507 71fe 	add.w	r1, r7, #508	@ 0x1fc
 8002886:	f507 73ba 	add.w	r3, r7, #372	@ 0x174
 800288a:	4618      	mov	r0, r3
 800288c:	f00a fdc7 	bl	800d41e <arm_mat_mult_f32>
        matrix_copy(temp_data, A_power_data, 16);
 8002890:	f507 71de 	add.w	r1, r7, #444	@ 0x1bc
 8002894:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 8002898:	2210      	movs	r2, #16
 800289a:	4618      	mov	r0, r3
 800289c:	f7ff ff06 	bl	80026ac <matrix_copy>

        // Scale by 1/factorial
        arm_mat_scale_f32(&A_power_matrix, 1.0f/factorial, &temp_matrix);
 80028a0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80028a4:	edd7 7aac 	vldr	s15, [r7, #688]	@ 0x2b0
 80028a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80028ac:	f507 72b6 	add.w	r2, r7, #364	@ 0x16c
 80028b0:	f507 73ba 	add.w	r3, r7, #372	@ 0x174
 80028b4:	4611      	mov	r1, r2
 80028b6:	eeb0 0a47 	vmov.f32	s0, s14
 80028ba:	4618      	mov	r0, r3
 80028bc:	f00a fe29 	bl	800d512 <arm_mat_scale_f32>

        // Add to A_d
        arm_mat_add_f32(&A_d_matrix, &temp_matrix, &A_d_matrix);
 80028c0:	f507 7227 	add.w	r2, r7, #668	@ 0x29c
 80028c4:	f507 71b6 	add.w	r1, r7, #364	@ 0x16c
 80028c8:	f507 7327 	add.w	r3, r7, #668	@ 0x29c
 80028cc:	4618      	mov	r0, r3
 80028ce:	f00a fd53 	bl	800d378 <arm_mat_add_f32>
    for (int term = 2; term <= 10; term++) {  // Using more terms for better accuracy
 80028d2:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 80028d6:	3301      	adds	r3, #1
 80028d8:	f8c7 32ac 	str.w	r3, [r7, #684]	@ 0x2ac
 80028dc:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 80028e0:	2b0a      	cmp	r3, #10
 80028e2:	ddc0      	ble.n	8002866 <discretize_system_with_arm+0x176>

    // We can approximate this integral using the Taylor series for e^(A*s):
    // B_d = [dt*I + (A*dt^2)/2 + (A^2*dt^3)/6 + (A^3*dt^4)/24 + ...] * B_c

    // First term: dt*I * B_c = dt * B_c
    arm_mat_scale_f32(&B_c_matrix, dt, &B_d_matrix);
 80028e4:	f507 7123 	add.w	r1, r7, #652	@ 0x28c
 80028e8:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80028ec:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80028f0:	f507 7225 	add.w	r2, r7, #660	@ 0x294
 80028f4:	ed93 0a00 	vldr	s0, [r3]
 80028f8:	4610      	mov	r0, r2
 80028fa:	f00a fe0a 	bl	800d512 <arm_mat_scale_f32>

    // Second term: (A*dt^2)/2 * B_c
    float32_t AB_c[4] = {0};
 80028fe:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002902:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8002906:	461a      	mov	r2, r3
 8002908:	2300      	movs	r3, #0
 800290a:	6013      	str	r3, [r2, #0]
 800290c:	6053      	str	r3, [r2, #4]
 800290e:	6093      	str	r3, [r2, #8]
 8002910:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 AB_c_matrix;
    arm_mat_init_f32(&AB_c_matrix, 4, 1, AB_c);
 8002912:	f507 73ae 	add.w	r3, r7, #348	@ 0x15c
 8002916:	f507 70aa 	add.w	r0, r7, #340	@ 0x154
 800291a:	2201      	movs	r2, #1
 800291c:	2104      	movs	r1, #4
 800291e:	f00a fd66 	bl	800d3ee <arm_mat_init_f32>
    arm_mat_mult_f32(&A_c_matrix, &B_c_matrix, &AB_c_matrix);
 8002922:	f507 72aa 	add.w	r2, r7, #340	@ 0x154
 8002926:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 800292a:	f507 7329 	add.w	r3, r7, #676	@ 0x2a4
 800292e:	4618      	mov	r0, r3
 8002930:	f00a fd75 	bl	800d41e <arm_mat_mult_f32>

    float32_t temp_B[4];
    arm_matrix_instance_f32 temp_B_matrix;
    arm_mat_init_f32(&temp_B_matrix, 4, 1, temp_B);
 8002934:	f507 73a2 	add.w	r3, r7, #324	@ 0x144
 8002938:	f507 709e 	add.w	r0, r7, #316	@ 0x13c
 800293c:	2201      	movs	r2, #1
 800293e:	2104      	movs	r1, #4
 8002940:	f00a fd55 	bl	800d3ee <arm_mat_init_f32>
    arm_mat_scale_f32(&AB_c_matrix, dt*dt/2.0f, &temp_B_matrix);
 8002944:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002948:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800294c:	edd3 7a00 	vldr	s15, [r3]
 8002950:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002954:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002958:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800295c:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 8002960:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 8002964:	4611      	mov	r1, r2
 8002966:	eeb0 0a47 	vmov.f32	s0, s14
 800296a:	4618      	mov	r0, r3
 800296c:	f00a fdd1 	bl	800d512 <arm_mat_scale_f32>

    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 8002970:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 8002974:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 8002978:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 800297c:	4618      	mov	r0, r3
 800297e:	f00a fcfb 	bl	800d378 <arm_mat_add_f32>

    // Third term: (A^2*dt^3)/6 * B_c
    float32_t A2_data[16] = {0};
 8002982:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002986:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800298a:	4618      	mov	r0, r3
 800298c:	2340      	movs	r3, #64	@ 0x40
 800298e:	461a      	mov	r2, r3
 8002990:	2100      	movs	r1, #0
 8002992:	f00a feab 	bl	800d6ec <memset>
    arm_matrix_instance_f32 A2_matrix;
    arm_mat_init_f32(&A2_matrix, 4, 4, A2_data);
 8002996:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 800299a:	f107 00f4 	add.w	r0, r7, #244	@ 0xf4
 800299e:	2204      	movs	r2, #4
 80029a0:	2104      	movs	r1, #4
 80029a2:	f00a fd24 	bl	800d3ee <arm_mat_init_f32>
    arm_mat_mult_f32(&A_c_matrix, &A_c_matrix, &A2_matrix);
 80029a6:	f107 02f4 	add.w	r2, r7, #244	@ 0xf4
 80029aa:	f507 7129 	add.w	r1, r7, #676	@ 0x2a4
 80029ae:	f507 7329 	add.w	r3, r7, #676	@ 0x2a4
 80029b2:	4618      	mov	r0, r3
 80029b4:	f00a fd33 	bl	800d41e <arm_mat_mult_f32>

    float32_t A2B_c[4] = {0};
 80029b8:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80029bc:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80029c0:	461a      	mov	r2, r3
 80029c2:	2300      	movs	r3, #0
 80029c4:	6013      	str	r3, [r2, #0]
 80029c6:	6053      	str	r3, [r2, #4]
 80029c8:	6093      	str	r3, [r2, #8]
 80029ca:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 A2B_c_matrix;
    arm_mat_init_f32(&A2B_c_matrix, 4, 1, A2B_c);
 80029cc:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80029d0:	f107 00dc 	add.w	r0, r7, #220	@ 0xdc
 80029d4:	2201      	movs	r2, #1
 80029d6:	2104      	movs	r1, #4
 80029d8:	f00a fd09 	bl	800d3ee <arm_mat_init_f32>
    arm_mat_mult_f32(&A2_matrix, &B_c_matrix, &A2B_c_matrix);
 80029dc:	f107 02dc 	add.w	r2, r7, #220	@ 0xdc
 80029e0:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 80029e4:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80029e8:	4618      	mov	r0, r3
 80029ea:	f00a fd18 	bl	800d41e <arm_mat_mult_f32>

    arm_mat_scale_f32(&A2B_c_matrix, dt*dt*dt/6.0f, &temp_B_matrix);
 80029ee:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80029f2:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80029f6:	edd3 7a00 	vldr	s15, [r3]
 80029fa:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80029fe:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002a02:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8002a06:	edd3 7a00 	vldr	s15, [r3]
 8002a0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a0e:	eef1 6a08 	vmov.f32	s13, #24	@ 0x40c00000  6.0
 8002a12:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002a16:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 8002a1a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002a1e:	4611      	mov	r1, r2
 8002a20:	eeb0 0a47 	vmov.f32	s0, s14
 8002a24:	4618      	mov	r0, r3
 8002a26:	f00a fd74 	bl	800d512 <arm_mat_scale_f32>
    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 8002a2a:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 8002a2e:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 8002a32:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 8002a36:	4618      	mov	r0, r3
 8002a38:	f00a fc9e 	bl	800d378 <arm_mat_add_f32>

    // Fourth term: (A^3*dt^4)/24 * B_c
    float32_t A3_data[16] = {0};
 8002a3c:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002a40:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002a44:	4618      	mov	r0, r3
 8002a46:	2340      	movs	r3, #64	@ 0x40
 8002a48:	461a      	mov	r2, r3
 8002a4a:	2100      	movs	r1, #0
 8002a4c:	f00a fe4e 	bl	800d6ec <memset>
    arm_matrix_instance_f32 A3_matrix;
    arm_mat_init_f32(&A3_matrix, 4, 4, A3_data);
 8002a50:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002a54:	f107 0094 	add.w	r0, r7, #148	@ 0x94
 8002a58:	2204      	movs	r2, #4
 8002a5a:	2104      	movs	r1, #4
 8002a5c:	f00a fcc7 	bl	800d3ee <arm_mat_init_f32>
    arm_mat_mult_f32(&A2_matrix, &A_c_matrix, &A3_matrix);
 8002a60:	f107 0294 	add.w	r2, r7, #148	@ 0x94
 8002a64:	f507 7129 	add.w	r1, r7, #676	@ 0x2a4
 8002a68:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f00a fcd6 	bl	800d41e <arm_mat_mult_f32>

    float32_t A3B_c[4] = {0};
 8002a72:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002a76:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	6013      	str	r3, [r2, #0]
 8002a80:	6053      	str	r3, [r2, #4]
 8002a82:	6093      	str	r3, [r2, #8]
 8002a84:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 A3B_c_matrix;
    arm_mat_init_f32(&A3B_c_matrix, 4, 1, A3B_c);
 8002a86:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8002a8a:	f107 007c 	add.w	r0, r7, #124	@ 0x7c
 8002a8e:	2201      	movs	r2, #1
 8002a90:	2104      	movs	r1, #4
 8002a92:	f00a fcac 	bl	800d3ee <arm_mat_init_f32>
    arm_mat_mult_f32(&A3_matrix, &B_c_matrix, &A3B_c_matrix);
 8002a96:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 8002a9a:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 8002a9e:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f00a fcbb 	bl	800d41e <arm_mat_mult_f32>

    arm_mat_scale_f32(&A3B_c_matrix, dt*dt*dt*dt/24.0f, &temp_B_matrix);
 8002aa8:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002aac:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8002ab0:	edd3 7a00 	vldr	s15, [r3]
 8002ab4:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002ab8:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002abc:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8002ac0:	edd3 7a00 	vldr	s15, [r3]
 8002ac4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ac8:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002acc:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8002ad0:	edd3 7a00 	vldr	s15, [r3]
 8002ad4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ad8:	eef3 6a08 	vmov.f32	s13, #56	@ 0x41c00000  24.0
 8002adc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002ae0:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 8002ae4:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8002ae8:	4611      	mov	r1, r2
 8002aea:	eeb0 0a47 	vmov.f32	s0, s14
 8002aee:	4618      	mov	r0, r3
 8002af0:	f00a fd0f 	bl	800d512 <arm_mat_scale_f32>
    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 8002af4:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 8002af8:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 8002afc:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 8002b00:	4618      	mov	r0, r3
 8002b02:	f00a fc39 	bl	800d378 <arm_mat_add_f32>

    // Fifth term: (A^4*dt^5)/120 * B_c
    float32_t A4_data[16] = {0};
 8002b06:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002b0a:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8002b0e:	4618      	mov	r0, r3
 8002b10:	2340      	movs	r3, #64	@ 0x40
 8002b12:	461a      	mov	r2, r3
 8002b14:	2100      	movs	r1, #0
 8002b16:	f00a fde9 	bl	800d6ec <memset>
    arm_matrix_instance_f32 A4_matrix;
    arm_mat_init_f32(&A4_matrix, 4, 4, A4_data);
 8002b1a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002b1e:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8002b22:	2204      	movs	r2, #4
 8002b24:	2104      	movs	r1, #4
 8002b26:	f00a fc62 	bl	800d3ee <arm_mat_init_f32>
    arm_mat_mult_f32(&A3_matrix, &A_c_matrix, &A4_matrix);
 8002b2a:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8002b2e:	f507 7129 	add.w	r1, r7, #676	@ 0x2a4
 8002b32:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002b36:	4618      	mov	r0, r3
 8002b38:	f00a fc71 	bl	800d41e <arm_mat_mult_f32>

    float32_t A4B_c[4] = {0};
 8002b3c:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002b40:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 8002b44:	461a      	mov	r2, r3
 8002b46:	2300      	movs	r3, #0
 8002b48:	6013      	str	r3, [r2, #0]
 8002b4a:	6053      	str	r3, [r2, #4]
 8002b4c:	6093      	str	r3, [r2, #8]
 8002b4e:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 A4B_c_matrix;
    arm_mat_init_f32(&A4B_c_matrix, 4, 1, A4B_c);
 8002b50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b54:	f107 001c 	add.w	r0, r7, #28
 8002b58:	2201      	movs	r2, #1
 8002b5a:	2104      	movs	r1, #4
 8002b5c:	f00a fc47 	bl	800d3ee <arm_mat_init_f32>
    arm_mat_mult_f32(&A4_matrix, &B_c_matrix, &A4B_c_matrix);
 8002b60:	f107 021c 	add.w	r2, r7, #28
 8002b64:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 8002b68:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f00a fc56 	bl	800d41e <arm_mat_mult_f32>

    arm_mat_scale_f32(&A4B_c_matrix, dt*dt*dt*dt*dt/120.0f, &temp_B_matrix);
 8002b72:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002b76:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8002b7a:	edd3 7a00 	vldr	s15, [r3]
 8002b7e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002b82:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002b86:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8002b8a:	edd3 7a00 	vldr	s15, [r3]
 8002b8e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b92:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002b96:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8002b9a:	edd3 7a00 	vldr	s15, [r3]
 8002b9e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ba2:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002ba6:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8002baa:	edd3 7a00 	vldr	s15, [r3]
 8002bae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bb2:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8002bec <discretize_system_with_arm+0x4fc>
 8002bb6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002bba:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 8002bbe:	f107 031c 	add.w	r3, r7, #28
 8002bc2:	4611      	mov	r1, r2
 8002bc4:	eeb0 0a47 	vmov.f32	s0, s14
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f00a fca2 	bl	800d512 <arm_mat_scale_f32>
    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 8002bce:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 8002bd2:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 8002bd6:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f00a fbcc 	bl	800d378 <arm_mat_add_f32>
}
 8002be0:	bf00      	nop
 8002be2:	f507 772f 	add.w	r7, r7, #700	@ 0x2bc
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd90      	pop	{r4, r7, pc}
 8002bea:	bf00      	nop
 8002bec:	42f00000 	.word	0x42f00000

08002bf0 <GenerateMotorMatrices>:

void GenerateMotorMatrices(float32_t R_a, float32_t L_a, float32_t J, float32_t b,
                          float32_t ke, float32_t kt, float32_t dt,
                          float32_t *A, float32_t *B) {
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b09e      	sub	sp, #120	@ 0x78
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
 8002bfa:	edc7 0a08 	vstr	s1, [r7, #32]
 8002bfe:	ed87 1a07 	vstr	s2, [r7, #28]
 8002c02:	edc7 1a06 	vstr	s3, [r7, #24]
 8002c06:	ed87 2a05 	vstr	s4, [r7, #20]
 8002c0a:	edc7 2a04 	vstr	s5, [r7, #16]
 8002c0e:	ed87 3a03 	vstr	s6, [r7, #12]
 8002c12:	60b8      	str	r0, [r7, #8]
 8002c14:	6079      	str	r1, [r7, #4]
    // Generate continuous time matrices
    float32_t A_c[16] = {0}; // 4x4 matrix
 8002c16:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002c1a:	2240      	movs	r2, #64	@ 0x40
 8002c1c:	2100      	movs	r1, #0
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f00a fd64 	bl	800d6ec <memset>
    float32_t B_c[4] = {0};  // 4x1 matrix
 8002c24:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002c28:	2200      	movs	r2, #0
 8002c2a:	601a      	str	r2, [r3, #0]
 8002c2c:	605a      	str	r2, [r3, #4]
 8002c2e:	609a      	str	r2, [r3, #8]
 8002c30:	60da      	str	r2, [r3, #12]
    // State Transition Matrix
    // Ac = [0 1 0 0;
    //       0 -b/J -1/J kt/J;
    //       0 0 0 0;
    //       0 -ke/L 0 -R/L];
    A_c[0*4 + 1] = 1.0f;
 8002c32:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002c36:	63fb      	str	r3, [r7, #60]	@ 0x3c

    A_c[1*4 + 1] = -b/J;
 8002c38:	edd7 7a06 	vldr	s15, [r7, #24]
 8002c3c:	eef1 6a67 	vneg.f32	s13, s15
 8002c40:	ed97 7a07 	vldr	s14, [r7, #28]
 8002c44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c48:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    A_c[1*4 + 2] = -1.0f/J;
 8002c4c:	eeff 6a00 	vmov.f32	s13, #240	@ 0xbf800000 -1.0
 8002c50:	ed97 7a07 	vldr	s14, [r7, #28]
 8002c54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c58:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    A_c[1*4 + 3] = kt/J;
 8002c5c:	edd7 6a04 	vldr	s13, [r7, #16]
 8002c60:	ed97 7a07 	vldr	s14, [r7, #28]
 8002c64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c68:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54

    // Third row all zeros (for load torque state)

    A_c[3*4 + 1] = -ke/L_a;
 8002c6c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002c70:	eef1 6a67 	vneg.f32	s13, s15
 8002c74:	ed97 7a08 	vldr	s14, [r7, #32]
 8002c78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c7c:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
    A_c[3*4 + 3] = -R_a/L_a;
 8002c80:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002c84:	eef1 6a67 	vneg.f32	s13, s15
 8002c88:	ed97 7a08 	vldr	s14, [r7, #32]
 8002c8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c90:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74

    // Input Matrix
    // Bc = [0; 0; 0; 1/L];
    B_c[3] = 1.0f/L_a;
 8002c94:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002c98:	ed97 7a08 	vldr	s14, [r7, #32]
 8002c9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ca0:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

    // Discretize the system using ARM CMSIS DSP
    discretize_system_with_arm(A_c, B_c, dt, A, B);
 8002ca4:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8002ca8:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	68ba      	ldr	r2, [r7, #8]
 8002cb0:	ed97 0a03 	vldr	s0, [r7, #12]
 8002cb4:	f7ff fd1c 	bl	80026f0 <discretize_system_with_arm>
}
 8002cb8:	bf00      	nop
 8002cba:	3778      	adds	r7, #120	@ 0x78
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}

08002cc0 <PWM_init>:
 *      Author: beamk
 */

#include "PWM.h"

void PWM_init(PWM* pwm, TIM_HandleTypeDef* htimx, uint16_t tim_chx){
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b084      	sub	sp, #16
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	60f8      	str	r0, [r7, #12]
 8002cc8:	60b9      	str	r1, [r7, #8]
 8002cca:	4613      	mov	r3, r2
 8002ccc:	80fb      	strh	r3, [r7, #6]
	pwm->CPU_FREQ = 170e6;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	4a0b      	ldr	r2, [pc, #44]	@ (8002d00 <PWM_init+0x40>)
 8002cd2:	611a      	str	r2, [r3, #16]
	pwm->htimx = htimx;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	68ba      	ldr	r2, [r7, #8]
 8002cd8:	601a      	str	r2, [r3, #0]
	pwm->tim_chx = tim_chx;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	88fa      	ldrh	r2, [r7, #6]
 8002cde:	809a      	strh	r2, [r3, #4]
	pwm->OC = 0;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	615a      	str	r2, [r3, #20]
	HAL_TIM_Base_Start(htimx);
 8002ce6:	68b8      	ldr	r0, [r7, #8]
 8002ce8:	f006 fc9c 	bl	8009624 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(htimx, tim_chx);
 8002cec:	88fb      	ldrh	r3, [r7, #6]
 8002cee:	4619      	mov	r1, r3
 8002cf0:	68b8      	ldr	r0, [r7, #8]
 8002cf2:	f006 fde3 	bl	80098bc <HAL_TIM_PWM_Start>
}
 8002cf6:	bf00      	nop
 8002cf8:	3710      	adds	r7, #16
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	0a21fe80 	.word	0x0a21fe80

08002d04 <PWM_write_duty>:

void PWM_write_duty(PWM* pwm, float freq, float percent_duty){
 8002d04:	b5b0      	push	{r4, r5, r7, lr}
 8002d06:	b084      	sub	sp, #16
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	60f8      	str	r0, [r7, #12]
 8002d0c:	ed87 0a02 	vstr	s0, [r7, #8]
 8002d10:	edc7 0a01 	vstr	s1, [r7, #4]
    if (freq == 0) {
 8002d14:	edd7 7a02 	vldr	s15, [r7, #8]
 8002d18:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002d1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d20:	d137      	bne.n	8002d92 <PWM_write_duty+0x8e>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	889b      	ldrh	r3, [r3, #4]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d105      	bne.n	8002d36 <PWM_write_duty+0x32>
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2200      	movs	r2, #0
 8002d32:	635a      	str	r2, [r3, #52]	@ 0x34
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(percent_duty) / 100.0);
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}
 8002d34:	e0e1      	b.n	8002efa <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	889b      	ldrh	r3, [r3, #4]
 8002d3a:	2b04      	cmp	r3, #4
 8002d3c:	d105      	bne.n	8002d4a <PWM_write_duty+0x46>
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	2300      	movs	r3, #0
 8002d46:	6393      	str	r3, [r2, #56]	@ 0x38
 8002d48:	e0d7      	b.n	8002efa <PWM_write_duty+0x1f6>
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	889b      	ldrh	r3, [r3, #4]
 8002d4e:	2b08      	cmp	r3, #8
 8002d50:	d105      	bne.n	8002d5e <PWM_write_duty+0x5a>
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	2300      	movs	r3, #0
 8002d5a:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8002d5c:	e0cd      	b.n	8002efa <PWM_write_duty+0x1f6>
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	889b      	ldrh	r3, [r3, #4]
 8002d62:	2b0c      	cmp	r3, #12
 8002d64:	d105      	bne.n	8002d72 <PWM_write_duty+0x6e>
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d70:	e0c3      	b.n	8002efa <PWM_write_duty+0x1f6>
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	889b      	ldrh	r3, [r3, #4]
 8002d76:	2b10      	cmp	r3, #16
 8002d78:	d105      	bne.n	8002d86 <PWM_write_duty+0x82>
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	2300      	movs	r3, #0
 8002d82:	6493      	str	r3, [r2, #72]	@ 0x48
 8002d84:	e0b9      	b.n	8002efa <PWM_write_duty+0x1f6>
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8002d90:	e0b3      	b.n	8002efa <PWM_write_duty+0x1f6>
    	pwm->period_cyc = (uint32_t) (pwm->CPU_FREQ / freq);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	691b      	ldr	r3, [r3, #16]
 8002d96:	ee07 3a90 	vmov	s15, r3
 8002d9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d9e:	ed97 7a02 	vldr	s14, [r7, #8]
 8002da2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002da6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002daa:	ee17 2a90 	vmov	r2, s15
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	609a      	str	r2, [r3, #8]
    	pwm->prescaler = (uint16_t) ((pwm->period_cyc + 65535 - 1) / 65535) - 1; // Subtracting 1 since prescaler is zero-based
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8002dba:	33fe      	adds	r3, #254	@ 0xfe
 8002dbc:	4a51      	ldr	r2, [pc, #324]	@ (8002f04 <PWM_write_duty+0x200>)
 8002dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8002dc2:	0bdb      	lsrs	r3, r3, #15
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	3b01      	subs	r3, #1
 8002dc8:	b29a      	uxth	r2, r3
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	819a      	strh	r2, [r3, #12]
    	pwm->overflow = (uint16_t) ((pwm->CPU_FREQ / (float)(pwm->prescaler + 1) / freq) - 1);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	691b      	ldr	r3, [r3, #16]
 8002dd2:	ee07 3a90 	vmov	s15, r3
 8002dd6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	899b      	ldrh	r3, [r3, #12]
 8002dde:	3301      	adds	r3, #1
 8002de0:	ee07 3a90 	vmov	s15, r3
 8002de4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002de8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002dec:	ed97 7a02 	vldr	s14, [r7, #8]
 8002df0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002df4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002df8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002dfc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e00:	ee17 3a90 	vmov	r3, s15
 8002e04:	b29a      	uxth	r2, r3
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	81da      	strh	r2, [r3, #14]
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(percent_duty) / 100.0);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	89db      	ldrh	r3, [r3, #14]
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f7fd fb54 	bl	80004bc <__aeabi_i2d>
 8002e14:	4604      	mov	r4, r0
 8002e16:	460d      	mov	r5, r1
 8002e18:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e1c:	eef0 7ae7 	vabs.f32	s15, s15
 8002e20:	ee17 0a90 	vmov	r0, s15
 8002e24:	f7fd fb5c 	bl	80004e0 <__aeabi_f2d>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	460b      	mov	r3, r1
 8002e2c:	4620      	mov	r0, r4
 8002e2e:	4629      	mov	r1, r5
 8002e30:	f7fd fbae 	bl	8000590 <__aeabi_dmul>
 8002e34:	4602      	mov	r2, r0
 8002e36:	460b      	mov	r3, r1
 8002e38:	4610      	mov	r0, r2
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	f04f 0200 	mov.w	r2, #0
 8002e40:	4b31      	ldr	r3, [pc, #196]	@ (8002f08 <PWM_write_duty+0x204>)
 8002e42:	f7fd fccf 	bl	80007e4 <__aeabi_ddiv>
 8002e46:	4602      	mov	r2, r0
 8002e48:	460b      	mov	r3, r1
 8002e4a:	4610      	mov	r0, r2
 8002e4c:	4619      	mov	r1, r3
 8002e4e:	f7fd fdd9 	bl	8000a04 <__aeabi_d2uiz>
 8002e52:	4603      	mov	r3, r0
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	461a      	mov	r2, r3
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	615a      	str	r2, [r3, #20]
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	899a      	ldrh	r2, [r3, #12]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	629a      	str	r2, [r3, #40]	@ 0x28
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	89da      	ldrh	r2, [r3, #14]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	89da      	ldrh	r2, [r3, #14]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	60da      	str	r2, [r3, #12]
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	889b      	ldrh	r3, [r3, #4]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d106      	bne.n	8002e94 <PWM_write_duty+0x190>
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	68fa      	ldr	r2, [r7, #12]
 8002e8e:	6952      	ldr	r2, [r2, #20]
 8002e90:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002e92:	e032      	b.n	8002efa <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	889b      	ldrh	r3, [r3, #4]
 8002e98:	2b04      	cmp	r3, #4
 8002e9a:	d106      	bne.n	8002eaa <PWM_write_duty+0x1a6>
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	695b      	ldr	r3, [r3, #20]
 8002ea6:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002ea8:	e027      	b.n	8002efa <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	889b      	ldrh	r3, [r3, #4]
 8002eae:	2b08      	cmp	r3, #8
 8002eb0:	d106      	bne.n	8002ec0 <PWM_write_duty+0x1bc>
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	695b      	ldr	r3, [r3, #20]
 8002ebc:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8002ebe:	e01c      	b.n	8002efa <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	889b      	ldrh	r3, [r3, #4]
 8002ec4:	2b0c      	cmp	r3, #12
 8002ec6:	d106      	bne.n	8002ed6 <PWM_write_duty+0x1d2>
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	695b      	ldr	r3, [r3, #20]
 8002ed2:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8002ed4:	e011      	b.n	8002efa <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	889b      	ldrh	r3, [r3, #4]
 8002eda:	2b10      	cmp	r3, #16
 8002edc:	d106      	bne.n	8002eec <PWM_write_duty+0x1e8>
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	695b      	ldr	r3, [r3, #20]
 8002ee8:	6493      	str	r3, [r2, #72]	@ 0x48
}
 8002eea:	e006      	b.n	8002efa <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	695b      	ldr	r3, [r3, #20]
 8002ef6:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8002ef8:	e7ff      	b.n	8002efa <PWM_write_duty+0x1f6>
 8002efa:	bf00      	nop
 8002efc:	3710      	adds	r7, #16
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bdb0      	pop	{r4, r5, r7, pc}
 8002f02:	bf00      	nop
 8002f04:	80008001 	.word	0x80008001
 8002f08:	40590000 	.word	0x40590000
 8002f0c:	00000000 	.word	0x00000000

08002f10 <PWM_write_range>:

void PWM_write_range(PWM* pwm, float freq, float duty){
 8002f10:	b5b0      	push	{r4, r5, r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	60f8      	str	r0, [r7, #12]
 8002f18:	ed87 0a02 	vstr	s0, [r7, #8]
 8002f1c:	edc7 0a01 	vstr	s1, [r7, #4]
    if (freq == 0) {
 8002f20:	edd7 7a02 	vldr	s15, [r7, #8]
 8002f24:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002f28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f2c:	d137      	bne.n	8002f9e <PWM_write_range+0x8e>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	889b      	ldrh	r3, [r3, #4]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d105      	bne.n	8002f42 <PWM_write_range+0x32>
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	635a      	str	r2, [r3, #52]	@ 0x34
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(duty) / 65535.0);
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}
 8002f40:	e0e1      	b.n	8003106 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	889b      	ldrh	r3, [r3, #4]
 8002f46:	2b04      	cmp	r3, #4
 8002f48:	d105      	bne.n	8002f56 <PWM_write_range+0x46>
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	2300      	movs	r3, #0
 8002f52:	6393      	str	r3, [r2, #56]	@ 0x38
 8002f54:	e0d7      	b.n	8003106 <PWM_write_range+0x1f6>
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	889b      	ldrh	r3, [r3, #4]
 8002f5a:	2b08      	cmp	r3, #8
 8002f5c:	d105      	bne.n	8002f6a <PWM_write_range+0x5a>
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	2300      	movs	r3, #0
 8002f66:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8002f68:	e0cd      	b.n	8003106 <PWM_write_range+0x1f6>
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	889b      	ldrh	r3, [r3, #4]
 8002f6e:	2b0c      	cmp	r3, #12
 8002f70:	d105      	bne.n	8002f7e <PWM_write_range+0x6e>
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	2300      	movs	r3, #0
 8002f7a:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f7c:	e0c3      	b.n	8003106 <PWM_write_range+0x1f6>
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	889b      	ldrh	r3, [r3, #4]
 8002f82:	2b10      	cmp	r3, #16
 8002f84:	d105      	bne.n	8002f92 <PWM_write_range+0x82>
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	6493      	str	r3, [r2, #72]	@ 0x48
 8002f90:	e0b9      	b.n	8003106 <PWM_write_range+0x1f6>
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	2300      	movs	r3, #0
 8002f9a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8002f9c:	e0b3      	b.n	8003106 <PWM_write_range+0x1f6>
    	pwm->period_cyc = (uint32_t) (pwm->CPU_FREQ / freq);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	691b      	ldr	r3, [r3, #16]
 8002fa2:	ee07 3a90 	vmov	s15, r3
 8002fa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002faa:	ed97 7a02 	vldr	s14, [r7, #8]
 8002fae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002fb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002fb6:	ee17 2a90 	vmov	r2, s15
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	609a      	str	r2, [r3, #8]
    	pwm->prescaler = (uint16_t) ((pwm->period_cyc + 65535 - 1) / 65535) - 1; // Subtracting 1 since prescaler is zero-based
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8002fc6:	33fe      	adds	r3, #254	@ 0xfe
 8002fc8:	4a53      	ldr	r2, [pc, #332]	@ (8003118 <PWM_write_range+0x208>)
 8002fca:	fba2 2303 	umull	r2, r3, r2, r3
 8002fce:	0bdb      	lsrs	r3, r3, #15
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	3b01      	subs	r3, #1
 8002fd4:	b29a      	uxth	r2, r3
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	819a      	strh	r2, [r3, #12]
    	pwm->overflow = (uint16_t) ((pwm->CPU_FREQ / (float)(pwm->prescaler + 1) / freq) - 1);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	691b      	ldr	r3, [r3, #16]
 8002fde:	ee07 3a90 	vmov	s15, r3
 8002fe2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	899b      	ldrh	r3, [r3, #12]
 8002fea:	3301      	adds	r3, #1
 8002fec:	ee07 3a90 	vmov	s15, r3
 8002ff0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ff4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002ff8:	ed97 7a02 	vldr	s14, [r7, #8]
 8002ffc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003000:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003004:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003008:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800300c:	ee17 3a90 	vmov	r3, s15
 8003010:	b29a      	uxth	r2, r3
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	81da      	strh	r2, [r3, #14]
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(duty) / 65535.0);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	89db      	ldrh	r3, [r3, #14]
 800301a:	4618      	mov	r0, r3
 800301c:	f7fd fa4e 	bl	80004bc <__aeabi_i2d>
 8003020:	4604      	mov	r4, r0
 8003022:	460d      	mov	r5, r1
 8003024:	edd7 7a01 	vldr	s15, [r7, #4]
 8003028:	eef0 7ae7 	vabs.f32	s15, s15
 800302c:	ee17 0a90 	vmov	r0, s15
 8003030:	f7fd fa56 	bl	80004e0 <__aeabi_f2d>
 8003034:	4602      	mov	r2, r0
 8003036:	460b      	mov	r3, r1
 8003038:	4620      	mov	r0, r4
 800303a:	4629      	mov	r1, r5
 800303c:	f7fd faa8 	bl	8000590 <__aeabi_dmul>
 8003040:	4602      	mov	r2, r0
 8003042:	460b      	mov	r3, r1
 8003044:	4610      	mov	r0, r2
 8003046:	4619      	mov	r1, r3
 8003048:	a331      	add	r3, pc, #196	@ (adr r3, 8003110 <PWM_write_range+0x200>)
 800304a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800304e:	f7fd fbc9 	bl	80007e4 <__aeabi_ddiv>
 8003052:	4602      	mov	r2, r0
 8003054:	460b      	mov	r3, r1
 8003056:	4610      	mov	r0, r2
 8003058:	4619      	mov	r1, r3
 800305a:	f7fd fcd3 	bl	8000a04 <__aeabi_d2uiz>
 800305e:	4603      	mov	r3, r0
 8003060:	b29b      	uxth	r3, r3
 8003062:	461a      	mov	r2, r3
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	615a      	str	r2, [r3, #20]
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	899a      	ldrh	r2, [r3, #12]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	629a      	str	r2, [r3, #40]	@ 0x28
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	89da      	ldrh	r2, [r3, #14]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	89da      	ldrh	r2, [r3, #14]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	60da      	str	r2, [r3, #12]
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	889b      	ldrh	r3, [r3, #4]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d106      	bne.n	80030a0 <PWM_write_range+0x190>
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	68fa      	ldr	r2, [r7, #12]
 800309a:	6952      	ldr	r2, [r2, #20]
 800309c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800309e:	e032      	b.n	8003106 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	889b      	ldrh	r3, [r3, #4]
 80030a4:	2b04      	cmp	r3, #4
 80030a6:	d106      	bne.n	80030b6 <PWM_write_range+0x1a6>
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	695b      	ldr	r3, [r3, #20]
 80030b2:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80030b4:	e027      	b.n	8003106 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	889b      	ldrh	r3, [r3, #4]
 80030ba:	2b08      	cmp	r3, #8
 80030bc:	d106      	bne.n	80030cc <PWM_write_range+0x1bc>
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	695b      	ldr	r3, [r3, #20]
 80030c8:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80030ca:	e01c      	b.n	8003106 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	889b      	ldrh	r3, [r3, #4]
 80030d0:	2b0c      	cmp	r3, #12
 80030d2:	d106      	bne.n	80030e2 <PWM_write_range+0x1d2>
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	695b      	ldr	r3, [r3, #20]
 80030de:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80030e0:	e011      	b.n	8003106 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	889b      	ldrh	r3, [r3, #4]
 80030e6:	2b10      	cmp	r3, #16
 80030e8:	d106      	bne.n	80030f8 <PWM_write_range+0x1e8>
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	695b      	ldr	r3, [r3, #20]
 80030f4:	6493      	str	r3, [r2, #72]	@ 0x48
}
 80030f6:	e006      	b.n	8003106 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	695b      	ldr	r3, [r3, #20]
 8003102:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8003104:	e7ff      	b.n	8003106 <PWM_write_range+0x1f6>
 8003106:	bf00      	nop
 8003108:	3710      	adds	r7, #16
 800310a:	46bd      	mov	sp, r7
 800310c:	bdb0      	pop	{r4, r5, r7, pc}
 800310e:	bf00      	nop
 8003110:	00000000 	.word	0x00000000
 8003114:	40efffe0 	.word	0x40efffe0
 8003118:	80008001 	.word	0x80008001

0800311c <QEI_init>:
* Author: pboon
*/

#include "QEI.h"

void QEI_init(QEI *qei, TIM_HandleTypeDef *htimx, int32_t ppr, uint32_t freq, float ratio, float pulley_diameter) {
 800311c:	b580      	push	{r7, lr}
 800311e:	b086      	sub	sp, #24
 8003120:	af00      	add	r7, sp, #0
 8003122:	6178      	str	r0, [r7, #20]
 8003124:	6139      	str	r1, [r7, #16]
 8003126:	60fa      	str	r2, [r7, #12]
 8003128:	60bb      	str	r3, [r7, #8]
 800312a:	ed87 0a01 	vstr	s0, [r7, #4]
 800312e:	edc7 0a00 	vstr	s1, [r7]
    qei->htimx = htimx;
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	693a      	ldr	r2, [r7, #16]
 8003136:	619a      	str	r2, [r3, #24]
    qei->ppr = ppr;
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	68fa      	ldr	r2, [r7, #12]
 800313c:	621a      	str	r2, [r3, #32]
    qei->freq = freq;
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	68ba      	ldr	r2, [r7, #8]
 8003142:	629a      	str	r2, [r3, #40]	@ 0x28
    qei->gear_ratio = ratio;
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	655a      	str	r2, [r3, #84]	@ 0x54
    qei->pulley_diameter = pulley_diameter;
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	683a      	ldr	r2, [r7, #0]
 800314e:	659a      	str	r2, [r3, #88]	@ 0x58

    qei->c[NOW] = 0;
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	2200      	movs	r2, #0
 8003154:	601a      	str	r2, [r3, #0]
    qei->c[PREV] = 0;
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	2200      	movs	r2, #0
 800315a:	605a      	str	r2, [r3, #4]
    qei->r[NOW] = 0;
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	f04f 0200 	mov.w	r2, #0
 8003162:	609a      	str	r2, [r3, #8]
    qei->r[PREV] = 0;
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	f04f 0200 	mov.w	r2, #0
 800316a:	60da      	str	r2, [r3, #12]
    qei->m[NOW] = 0;
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	f04f 0200 	mov.w	r2, #0
 8003172:	611a      	str	r2, [r3, #16]
    qei->m[PREV] = 0;
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	f04f 0200 	mov.w	r2, #0
 800317a:	615a      	str	r2, [r3, #20]

    qei->enc_period = 65536 - (65536 % ppr);
 800317c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003180:	68fa      	ldr	r2, [r7, #12]
 8003182:	fb93 f2f2 	sdiv	r2, r3, r2
 8003186:	68f9      	ldr	r1, [r7, #12]
 8003188:	fb01 f202 	mul.w	r2, r1, r2
 800318c:	1a9b      	subs	r3, r3, r2
 800318e:	f5c3 3280 	rsb	r2, r3, #65536	@ 0x10000
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	61da      	str	r2, [r3, #28]

    qei->diff_counts = 0;
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	2200      	movs	r2, #0
 800319a:	625a      	str	r2, [r3, #36]	@ 0x24
    qei->pulses = 0;
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	2200      	movs	r2, #0
 80031a0:	639a      	str	r2, [r3, #56]	@ 0x38
    qei->rads = 0;
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	f04f 0200 	mov.w	r2, #0
 80031a8:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->mm = 0;
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	f04f 0200 	mov.w	r2, #0
 80031b0:	649a      	str	r2, [r3, #72]	@ 0x48
    qei->revs = 0;
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	f04f 0200 	mov.w	r2, #0
 80031b8:	63da      	str	r2, [r3, #60]	@ 0x3c

    qei->pps = 0;
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	f04f 0200 	mov.w	r2, #0
 80031c0:	62da      	str	r2, [r3, #44]	@ 0x2c
    qei->radps = 0;
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	f04f 0200 	mov.w	r2, #0
 80031c8:	635a      	str	r2, [r3, #52]	@ 0x34
    qei->mmps = 0;
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	f04f 0200 	mov.w	r2, #0
 80031d0:	64da      	str	r2, [r3, #76]	@ 0x4c
    qei->rpm = 0;
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	f04f 0200 	mov.w	r2, #0
 80031d8:	631a      	str	r2, [r3, #48]	@ 0x30

    qei->radpss = 0;
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	f04f 0200 	mov.w	r2, #0
 80031e0:	645a      	str	r2, [r3, #68]	@ 0x44
    qei->mmpss = 0;
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	f04f 0200 	mov.w	r2, #0
 80031e8:	651a      	str	r2, [r3, #80]	@ 0x50

    HAL_TIM_Encoder_Start(htimx, TIM_CHANNEL_ALL);
 80031ea:	213c      	movs	r1, #60	@ 0x3c
 80031ec:	6938      	ldr	r0, [r7, #16]
 80031ee:	f006 fe21 	bl	8009e34 <HAL_TIM_Encoder_Start>
}
 80031f2:	bf00      	nop
 80031f4:	3718      	adds	r7, #24
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	0000      	movs	r0, r0
 80031fc:	0000      	movs	r0, r0
	...

08003200 <QEI_get_diff_count>:

void QEI_get_diff_count(QEI *qei) {
 8003200:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003204:	b084      	sub	sp, #16
 8003206:	af00      	add	r7, sp, #0
 8003208:	6078      	str	r0, [r7, #4]
    // Get current counter value
    qei->c[NOW] = __HAL_TIM_GET_COUNTER(qei->htimx);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	699b      	ldr	r3, [r3, #24]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	601a      	str	r2, [r3, #0]

    // Calculate difference with handling for timer overflow/underflow
    int32_t diff_counts = qei->c[NOW] - qei->c[PREV];
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	60fb      	str	r3, [r7, #12]

    // Handle counter overflow/underflow
    if (diff_counts > qei->enc_period / 2) {
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	69db      	ldr	r3, [r3, #28]
 8003226:	0fda      	lsrs	r2, r3, #31
 8003228:	4413      	add	r3, r2
 800322a:	105b      	asrs	r3, r3, #1
 800322c:	461a      	mov	r2, r3
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	4293      	cmp	r3, r2
 8003232:	dd05      	ble.n	8003240 <QEI_get_diff_count+0x40>
        diff_counts -= qei->enc_period;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	69db      	ldr	r3, [r3, #28]
 8003238:	68fa      	ldr	r2, [r7, #12]
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	60fb      	str	r3, [r7, #12]
 800323e:	e00e      	b.n	800325e <QEI_get_diff_count+0x5e>
    } else if (diff_counts < -(qei->enc_period / 2)) {
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	69db      	ldr	r3, [r3, #28]
 8003244:	0fda      	lsrs	r2, r3, #31
 8003246:	4413      	add	r3, r2
 8003248:	105b      	asrs	r3, r3, #1
 800324a:	425b      	negs	r3, r3
 800324c:	461a      	mov	r2, r3
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	4293      	cmp	r3, r2
 8003252:	da04      	bge.n	800325e <QEI_get_diff_count+0x5e>
        diff_counts += qei->enc_period;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	69db      	ldr	r3, [r3, #28]
 8003258:	68fa      	ldr	r2, [r7, #12]
 800325a:	4413      	add	r3, r2
 800325c:	60fb      	str	r3, [r7, #12]
    }

    qei->diff_counts = diff_counts;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	68fa      	ldr	r2, [r7, #12]
 8003262:	625a      	str	r2, [r3, #36]	@ 0x24

    // Update position counters
    qei->pulses += qei->diff_counts;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800326c:	441a      	add	r2, r3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	639a      	str	r2, [r3, #56]	@ 0x38
    qei->revs += (qei->diff_counts / (float)(qei->ppr)) * qei->gear_ratio;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800327c:	ee07 3a90 	vmov	s15, r3
 8003280:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6a1b      	ldr	r3, [r3, #32]
 8003288:	ee07 3a90 	vmov	s15, r3
 800328c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003290:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 800329a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800329e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
    qei->rads += (qei->diff_counts / (float)(qei->ppr)) * 2 * M_PI * qei->gear_ratio;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ac:	4618      	mov	r0, r3
 80032ae:	f7fd f917 	bl	80004e0 <__aeabi_f2d>
 80032b2:	4604      	mov	r4, r0
 80032b4:	460d      	mov	r5, r1
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ba:	ee07 3a90 	vmov	s15, r3
 80032be:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6a1b      	ldr	r3, [r3, #32]
 80032c6:	ee07 3a90 	vmov	s15, r3
 80032ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80032ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032d2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80032d6:	ee17 0a90 	vmov	r0, s15
 80032da:	f7fd f901 	bl	80004e0 <__aeabi_f2d>
 80032de:	a33c      	add	r3, pc, #240	@ (adr r3, 80033d0 <QEI_get_diff_count+0x1d0>)
 80032e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032e4:	f7fd f954 	bl	8000590 <__aeabi_dmul>
 80032e8:	4602      	mov	r2, r0
 80032ea:	460b      	mov	r3, r1
 80032ec:	4690      	mov	r8, r2
 80032ee:	4699      	mov	r9, r3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032f4:	4618      	mov	r0, r3
 80032f6:	f7fd f8f3 	bl	80004e0 <__aeabi_f2d>
 80032fa:	4602      	mov	r2, r0
 80032fc:	460b      	mov	r3, r1
 80032fe:	4640      	mov	r0, r8
 8003300:	4649      	mov	r1, r9
 8003302:	f7fd f945 	bl	8000590 <__aeabi_dmul>
 8003306:	4602      	mov	r2, r0
 8003308:	460b      	mov	r3, r1
 800330a:	4620      	mov	r0, r4
 800330c:	4629      	mov	r1, r5
 800330e:	f7fc ff89 	bl	8000224 <__adddf3>
 8003312:	4602      	mov	r2, r0
 8003314:	460b      	mov	r3, r1
 8003316:	4610      	mov	r0, r2
 8003318:	4619      	mov	r1, r3
 800331a:	f7fd fb93 	bl	8000a44 <__aeabi_d2f>
 800331e:	4602      	mov	r2, r0
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->mm += (qei->diff_counts / (float)(qei->ppr)) * M_PI * qei->pulley_diameter * qei->gear_ratio;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003328:	4618      	mov	r0, r3
 800332a:	f7fd f8d9 	bl	80004e0 <__aeabi_f2d>
 800332e:	4604      	mov	r4, r0
 8003330:	460d      	mov	r5, r1
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003336:	ee07 3a90 	vmov	s15, r3
 800333a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6a1b      	ldr	r3, [r3, #32]
 8003342:	ee07 3a90 	vmov	s15, r3
 8003346:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800334a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800334e:	ee16 0a90 	vmov	r0, s13
 8003352:	f7fd f8c5 	bl	80004e0 <__aeabi_f2d>
 8003356:	a31e      	add	r3, pc, #120	@ (adr r3, 80033d0 <QEI_get_diff_count+0x1d0>)
 8003358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800335c:	f7fd f918 	bl	8000590 <__aeabi_dmul>
 8003360:	4602      	mov	r2, r0
 8003362:	460b      	mov	r3, r1
 8003364:	4690      	mov	r8, r2
 8003366:	4699      	mov	r9, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800336c:	4618      	mov	r0, r3
 800336e:	f7fd f8b7 	bl	80004e0 <__aeabi_f2d>
 8003372:	4602      	mov	r2, r0
 8003374:	460b      	mov	r3, r1
 8003376:	4640      	mov	r0, r8
 8003378:	4649      	mov	r1, r9
 800337a:	f7fd f909 	bl	8000590 <__aeabi_dmul>
 800337e:	4602      	mov	r2, r0
 8003380:	460b      	mov	r3, r1
 8003382:	4690      	mov	r8, r2
 8003384:	4699      	mov	r9, r3
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800338a:	4618      	mov	r0, r3
 800338c:	f7fd f8a8 	bl	80004e0 <__aeabi_f2d>
 8003390:	4602      	mov	r2, r0
 8003392:	460b      	mov	r3, r1
 8003394:	4640      	mov	r0, r8
 8003396:	4649      	mov	r1, r9
 8003398:	f7fd f8fa 	bl	8000590 <__aeabi_dmul>
 800339c:	4602      	mov	r2, r0
 800339e:	460b      	mov	r3, r1
 80033a0:	4620      	mov	r0, r4
 80033a2:	4629      	mov	r1, r5
 80033a4:	f7fc ff3e 	bl	8000224 <__adddf3>
 80033a8:	4602      	mov	r2, r0
 80033aa:	460b      	mov	r3, r1
 80033ac:	4610      	mov	r0, r2
 80033ae:	4619      	mov	r1, r3
 80033b0:	f7fd fb48 	bl	8000a44 <__aeabi_d2f>
 80033b4:	4602      	mov	r2, r0
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	649a      	str	r2, [r3, #72]	@ 0x48

    // Store the current counter value for next calculation
    qei->c[PREV] = qei->c[NOW];
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	605a      	str	r2, [r3, #4]
}
 80033c2:	bf00      	nop
 80033c4:	3710      	adds	r7, #16
 80033c6:	46bd      	mov	sp, r7
 80033c8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80033cc:	f3af 8000 	nop.w
 80033d0:	54442d18 	.word	0x54442d18
 80033d4:	400921fb 	.word	0x400921fb

080033d8 <QEI_compute_data>:

void QEI_compute_data(QEI *qei) {
 80033d8:	b5b0      	push	{r4, r5, r7, lr}
 80033da:	b084      	sub	sp, #16
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
    // Calculate velocity in pulses per second
    qei->pps = qei->diff_counts * ((int)(qei->freq));
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80033e8:	fb02 f303 	mul.w	r3, r2, r3
 80033ec:	ee07 3a90 	vmov	s15, r3
 80033f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

    // Calculate angular velocity in different units
    qei->rpm = qei->pps * 60.0 / (float)(qei->ppr) * qei->gear_ratio;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033fe:	4618      	mov	r0, r3
 8003400:	f7fd f86e 	bl	80004e0 <__aeabi_f2d>
 8003404:	f04f 0200 	mov.w	r2, #0
 8003408:	4b83      	ldr	r3, [pc, #524]	@ (8003618 <QEI_compute_data+0x240>)
 800340a:	f7fd f8c1 	bl	8000590 <__aeabi_dmul>
 800340e:	4602      	mov	r2, r0
 8003410:	460b      	mov	r3, r1
 8003412:	4614      	mov	r4, r2
 8003414:	461d      	mov	r5, r3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a1b      	ldr	r3, [r3, #32]
 800341a:	ee07 3a90 	vmov	s15, r3
 800341e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003422:	ee17 0a90 	vmov	r0, s15
 8003426:	f7fd f85b 	bl	80004e0 <__aeabi_f2d>
 800342a:	4602      	mov	r2, r0
 800342c:	460b      	mov	r3, r1
 800342e:	4620      	mov	r0, r4
 8003430:	4629      	mov	r1, r5
 8003432:	f7fd f9d7 	bl	80007e4 <__aeabi_ddiv>
 8003436:	4602      	mov	r2, r0
 8003438:	460b      	mov	r3, r1
 800343a:	4614      	mov	r4, r2
 800343c:	461d      	mov	r5, r3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003442:	4618      	mov	r0, r3
 8003444:	f7fd f84c 	bl	80004e0 <__aeabi_f2d>
 8003448:	4602      	mov	r2, r0
 800344a:	460b      	mov	r3, r1
 800344c:	4620      	mov	r0, r4
 800344e:	4629      	mov	r1, r5
 8003450:	f7fd f89e 	bl	8000590 <__aeabi_dmul>
 8003454:	4602      	mov	r2, r0
 8003456:	460b      	mov	r3, r1
 8003458:	4610      	mov	r0, r2
 800345a:	4619      	mov	r1, r3
 800345c:	f7fd faf2 	bl	8000a44 <__aeabi_d2f>
 8003460:	4602      	mov	r2, r0
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	631a      	str	r2, [r3, #48]	@ 0x30
    qei->radps = qei->pps * 2 * M_PI / (float)(qei->ppr) * qei->gear_ratio;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800346c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003470:	ee17 0a90 	vmov	r0, s15
 8003474:	f7fd f834 	bl	80004e0 <__aeabi_f2d>
 8003478:	a365      	add	r3, pc, #404	@ (adr r3, 8003610 <QEI_compute_data+0x238>)
 800347a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800347e:	f7fd f887 	bl	8000590 <__aeabi_dmul>
 8003482:	4602      	mov	r2, r0
 8003484:	460b      	mov	r3, r1
 8003486:	4614      	mov	r4, r2
 8003488:	461d      	mov	r5, r3
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6a1b      	ldr	r3, [r3, #32]
 800348e:	ee07 3a90 	vmov	s15, r3
 8003492:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003496:	ee17 0a90 	vmov	r0, s15
 800349a:	f7fd f821 	bl	80004e0 <__aeabi_f2d>
 800349e:	4602      	mov	r2, r0
 80034a0:	460b      	mov	r3, r1
 80034a2:	4620      	mov	r0, r4
 80034a4:	4629      	mov	r1, r5
 80034a6:	f7fd f99d 	bl	80007e4 <__aeabi_ddiv>
 80034aa:	4602      	mov	r2, r0
 80034ac:	460b      	mov	r3, r1
 80034ae:	4614      	mov	r4, r2
 80034b0:	461d      	mov	r5, r3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034b6:	4618      	mov	r0, r3
 80034b8:	f7fd f812 	bl	80004e0 <__aeabi_f2d>
 80034bc:	4602      	mov	r2, r0
 80034be:	460b      	mov	r3, r1
 80034c0:	4620      	mov	r0, r4
 80034c2:	4629      	mov	r1, r5
 80034c4:	f7fd f864 	bl	8000590 <__aeabi_dmul>
 80034c8:	4602      	mov	r2, r0
 80034ca:	460b      	mov	r3, r1
 80034cc:	4610      	mov	r0, r2
 80034ce:	4619      	mov	r1, r3
 80034d0:	f7fd fab8 	bl	8000a44 <__aeabi_d2f>
 80034d4:	4602      	mov	r2, r0
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	635a      	str	r2, [r3, #52]	@ 0x34

    // Calculate linear velocity
    qei->mmps = qei->pps * M_PI * qei->pulley_diameter / (float)(qei->ppr) * qei->gear_ratio;  // Assuming 10mm per rev
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034de:	4618      	mov	r0, r3
 80034e0:	f7fc fffe 	bl	80004e0 <__aeabi_f2d>
 80034e4:	a34a      	add	r3, pc, #296	@ (adr r3, 8003610 <QEI_compute_data+0x238>)
 80034e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ea:	f7fd f851 	bl	8000590 <__aeabi_dmul>
 80034ee:	4602      	mov	r2, r0
 80034f0:	460b      	mov	r3, r1
 80034f2:	4614      	mov	r4, r2
 80034f4:	461d      	mov	r5, r3
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034fa:	4618      	mov	r0, r3
 80034fc:	f7fc fff0 	bl	80004e0 <__aeabi_f2d>
 8003500:	4602      	mov	r2, r0
 8003502:	460b      	mov	r3, r1
 8003504:	4620      	mov	r0, r4
 8003506:	4629      	mov	r1, r5
 8003508:	f7fd f842 	bl	8000590 <__aeabi_dmul>
 800350c:	4602      	mov	r2, r0
 800350e:	460b      	mov	r3, r1
 8003510:	4614      	mov	r4, r2
 8003512:	461d      	mov	r5, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6a1b      	ldr	r3, [r3, #32]
 8003518:	ee07 3a90 	vmov	s15, r3
 800351c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003520:	ee17 0a90 	vmov	r0, s15
 8003524:	f7fc ffdc 	bl	80004e0 <__aeabi_f2d>
 8003528:	4602      	mov	r2, r0
 800352a:	460b      	mov	r3, r1
 800352c:	4620      	mov	r0, r4
 800352e:	4629      	mov	r1, r5
 8003530:	f7fd f958 	bl	80007e4 <__aeabi_ddiv>
 8003534:	4602      	mov	r2, r0
 8003536:	460b      	mov	r3, r1
 8003538:	4614      	mov	r4, r2
 800353a:	461d      	mov	r5, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003540:	4618      	mov	r0, r3
 8003542:	f7fc ffcd 	bl	80004e0 <__aeabi_f2d>
 8003546:	4602      	mov	r2, r0
 8003548:	460b      	mov	r3, r1
 800354a:	4620      	mov	r0, r4
 800354c:	4629      	mov	r1, r5
 800354e:	f7fd f81f 	bl	8000590 <__aeabi_dmul>
 8003552:	4602      	mov	r2, r0
 8003554:	460b      	mov	r3, r1
 8003556:	4610      	mov	r0, r2
 8003558:	4619      	mov	r1, r3
 800355a:	f7fd fa73 	bl	8000a44 <__aeabi_d2f>
 800355e:	4602      	mov	r2, r0
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	64da      	str	r2, [r3, #76]	@ 0x4c

    // Store current angular velocity for acceleration calculation
    qei->r[NOW] = qei->radps;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	609a      	str	r2, [r3, #8]

    // Store current linear velocity for acceleration calculation
    qei->m[NOW] = qei->mmps;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	611a      	str	r2, [r3, #16]

    // Calculate acceleration
    float diff_angular_velocity = qei->r[NOW] - qei->r[PREV];
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	ed93 7a02 	vldr	s14, [r3, #8]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	edd3 7a03 	vldr	s15, [r3, #12]
 8003580:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003584:	edc7 7a03 	vstr	s15, [r7, #12]
    qei->radpss = (diff_angular_velocity == 0) ? 0 : diff_angular_velocity * qei->freq;
 8003588:	edd7 7a03 	vldr	s15, [r7, #12]
 800358c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003594:	d00a      	beq.n	80035ac <QEI_compute_data+0x1d4>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800359a:	ee07 3a90 	vmov	s15, r3
 800359e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80035a2:	edd7 7a03 	vldr	s15, [r7, #12]
 80035a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035aa:	e001      	b.n	80035b0 <QEI_compute_data+0x1d8>
 80035ac:	eddf 7a1b 	vldr	s15, [pc, #108]	@ 800361c <QEI_compute_data+0x244>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44

    float diff_linear_velocity = qei->m[NOW] - qei->m[PREV];
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	ed93 7a04 	vldr	s14, [r3, #16]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	edd3 7a05 	vldr	s15, [r3, #20]
 80035c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035c6:	edc7 7a02 	vstr	s15, [r7, #8]
    qei->mmpss = (diff_linear_velocity == 0) ? 0 : diff_linear_velocity * qei->freq;
 80035ca:	edd7 7a02 	vldr	s15, [r7, #8]
 80035ce:	eef5 7a40 	vcmp.f32	s15, #0.0
 80035d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035d6:	d00a      	beq.n	80035ee <QEI_compute_data+0x216>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035dc:	ee07 3a90 	vmov	s15, r3
 80035e0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80035e4:	edd7 7a02 	vldr	s15, [r7, #8]
 80035e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035ec:	e001      	b.n	80035f2 <QEI_compute_data+0x21a>
 80035ee:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 800361c <QEI_compute_data+0x244>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50

    // Store current velocity for next acceleration calculation
    qei->r[PREV] = qei->r[NOW];
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	689a      	ldr	r2, [r3, #8]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	60da      	str	r2, [r3, #12]
    qei->m[PREV] = qei->m[NOW];
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	691a      	ldr	r2, [r3, #16]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	615a      	str	r2, [r3, #20]
}
 8003608:	bf00      	nop
 800360a:	3710      	adds	r7, #16
 800360c:	46bd      	mov	sp, r7
 800360e:	bdb0      	pop	{r4, r5, r7, pc}
 8003610:	54442d18 	.word	0x54442d18
 8003614:	400921fb 	.word	0x400921fb
 8003618:	404e0000 	.word	0x404e0000
 800361c:	00000000 	.word	0x00000000

08003620 <Trapezoidal_Generator>:
 */

#include "Trapezoidal.h"

void Trapezoidal_Generator(volatile Trapezoidal_GenStruct *trapGen,
        float32_t initial_p, float32_t target_p, float32_t vmax, float32_t amax) {
 8003620:	b580      	push	{r7, lr}
 8003622:	b08e      	sub	sp, #56	@ 0x38
 8003624:	af00      	add	r7, sp, #0
 8003626:	6178      	str	r0, [r7, #20]
 8003628:	ed87 0a04 	vstr	s0, [r7, #16]
 800362c:	edc7 0a03 	vstr	s1, [r7, #12]
 8003630:	ed87 1a02 	vstr	s2, [r7, #8]
 8003634:	edc7 1a01 	vstr	s3, [r7, #4]
    // Set default values
    trapGen->dir = 0;
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	2200      	movs	r2, #0
 800363c:	741a      	strb	r2, [r3, #16]
    trapGen->time_total = 0.0f;
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	f04f 0200 	mov.w	r2, #0
 8003644:	60da      	str	r2, [r3, #12]
    trapGen->t1 = 0.0f;
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	f04f 0200 	mov.w	r2, #0
 800364c:	601a      	str	r2, [r3, #0]
    trapGen->t2 = 0.0f;
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	f04f 0200 	mov.w	r2, #0
 8003654:	605a      	str	r2, [r3, #4]
    trapGen->t3 = 0.0f;
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	f04f 0200 	mov.w	r2, #0
 800365c:	609a      	str	r2, [r3, #8]

    // Calculate the distance to travel
    float32_t distance = fabsf(target_p - initial_p);
 800365e:	ed97 7a03 	vldr	s14, [r7, #12]
 8003662:	edd7 7a04 	vldr	s15, [r7, #16]
 8003666:	ee77 7a67 	vsub.f32	s15, s14, s15
 800366a:	eef0 7ae7 	vabs.f32	s15, s15
 800366e:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

    // Determine the direction of the motion
    if (target_p - initial_p < 0) {
 8003672:	ed97 7a03 	vldr	s14, [r7, #12]
 8003676:	edd7 7a04 	vldr	s15, [r7, #16]
 800367a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800367e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003686:	d503      	bpl.n	8003690 <Trapezoidal_Generator+0x70>
        trapGen->dir = -1;
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	22ff      	movs	r2, #255	@ 0xff
 800368c:	741a      	strb	r2, [r3, #16]
 800368e:	e002      	b.n	8003696 <Trapezoidal_Generator+0x76>
    } else {
        trapGen->dir = 1;
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	2201      	movs	r2, #1
 8003694:	741a      	strb	r2, [r3, #16]
    }

    // If no movement required or zero acceleration
    if (distance == 0.0f || amax == 0.0f) {
 8003696:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800369a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800369e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036a2:	d006      	beq.n	80036b2 <Trapezoidal_Generator+0x92>
 80036a4:	edd7 7a01 	vldr	s15, [r7, #4]
 80036a8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80036ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036b0:	d104      	bne.n	80036bc <Trapezoidal_Generator+0x9c>
        trapGen->time_total = 0.0f;
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	f04f 0200 	mov.w	r2, #0
 80036b8:	60da      	str	r2, [r3, #12]
        return;
 80036ba:	e06f      	b.n	800379c <Trapezoidal_Generator+0x17c>
    }

    // Time to reach maximum velocity (assuming we can)
    float32_t ta = vmax / amax;
 80036bc:	edd7 6a02 	vldr	s13, [r7, #8]
 80036c0:	ed97 7a01 	vldr	s14, [r7, #4]
 80036c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80036c8:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

    // Distance traveled during acceleration and deceleration phases
    float32_t sa = 0.5f * amax * ta * ta;  // Distance in acceleration phase
 80036cc:	edd7 7a01 	vldr	s15, [r7, #4]
 80036d0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80036d4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80036d8:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80036dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036e0:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 80036e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036e8:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    float32_t sd = sa;                     // Distance in deceleration phase (same as acceleration)
 80036ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036ee:	62bb      	str	r3, [r7, #40]	@ 0x28
    float32_t s_accdec = sa + sd;          // Total distance for acceleration + deceleration
 80036f0:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80036f4:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80036f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036fc:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    // Check if we have enough distance to reach maximum velocity
    if (distance >= s_accdec) {
 8003700:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003704:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003708:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800370c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003710:	db27      	blt.n	8003762 <Trapezoidal_Generator+0x142>
        // Trapezoidal profile - we can reach maximum velocity
        float32_t sc = distance - s_accdec;  // Distance at constant velocity
 8003712:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003716:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800371a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800371e:	edc7 7a07 	vstr	s15, [r7, #28]
        float32_t tc = sc / vmax;            // Time at constant velocity
 8003722:	edd7 6a07 	vldr	s13, [r7, #28]
 8003726:	ed97 7a02 	vldr	s14, [r7, #8]
 800372a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800372e:	edc7 7a06 	vstr	s15, [r7, #24]

        trapGen->t1 = ta;                    // End of acceleration phase
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003736:	601a      	str	r2, [r3, #0]
        trapGen->t2 = ta + tc;               // End of constant velocity phase
 8003738:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 800373c:	edd7 7a06 	vldr	s15, [r7, #24]
 8003740:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	edc3 7a01 	vstr	s15, [r3, #4]
        trapGen->t3 = 2 * ta + tc;           // End of deceleration phase
 800374a:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800374e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003752:	edd7 7a06 	vldr	s15, [r7, #24]
 8003756:	ee77 7a27 	vadd.f32	s15, s14, s15
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	edc3 7a02 	vstr	s15, [r3, #8]
 8003760:	e018      	b.n	8003794 <Trapezoidal_Generator+0x174>
        // For a triangular profile, we need to find the time to reach peak velocity
        // and the peak velocity itself

        // Using distance = 2 * (0.5 * amax * tp^2) and solving for tp
        // where tp is the time to reach peak velocity (half the total time)
        float32_t tp = sqrtf(distance / amax);
 8003762:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003766:	edd7 7a01 	vldr	s15, [r7, #4]
 800376a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800376e:	eeb0 0a66 	vmov.f32	s0, s13
 8003772:	f00a f80d 	bl	800d790 <sqrtf>
 8003776:	ed87 0a08 	vstr	s0, [r7, #32]

        trapGen->t1 = tp;                    // End of acceleration phase
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	6a3a      	ldr	r2, [r7, #32]
 800377e:	601a      	str	r2, [r3, #0]
        trapGen->t2 = tp;                    // No constant velocity phase
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	6a3a      	ldr	r2, [r7, #32]
 8003784:	605a      	str	r2, [r3, #4]
        trapGen->t3 = 2 * tp;                // End of deceleration phase
 8003786:	edd7 7a08 	vldr	s15, [r7, #32]
 800378a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	edc3 7a02 	vstr	s15, [r3, #8]
    }

    trapGen->time_total = trapGen->t3;
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	689a      	ldr	r2, [r3, #8]
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	60da      	str	r2, [r3, #12]
}
 800379c:	3738      	adds	r7, #56	@ 0x38
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
	...

080037a4 <Trapezoidal_Evaluated>:

void Trapezoidal_Evaluated(volatile Trapezoidal_GenStruct *trapGen,
        volatile Trapezoidal_EvaStruct *evaTrapezoidal, float32_t initial_p,
        float32_t target_p, float32_t vmax, float32_t amax) {
 80037a4:	b480      	push	{r7}
 80037a6:	b08d      	sub	sp, #52	@ 0x34
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6178      	str	r0, [r7, #20]
 80037ac:	6139      	str	r1, [r7, #16]
 80037ae:	ed87 0a03 	vstr	s0, [r7, #12]
 80037b2:	edc7 0a02 	vstr	s1, [r7, #8]
 80037b6:	ed87 1a01 	vstr	s2, [r7, #4]
 80037ba:	edc7 1a00 	vstr	s3, [r7]

    // Update current time (assuming 1ms intervals)
    evaTrapezoidal->t += 1.0f / 1000.0f;
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	edd3 7a03 	vldr	s15, [r3, #12]
 80037c4:	ed9f 7aa0 	vldr	s14, [pc, #640]	@ 8003a48 <Trapezoidal_Evaluated+0x2a4>
 80037c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	edc3 7a03 	vstr	s15, [r3, #12]

    // Check if trajectory is still active
    if (evaTrapezoidal->t <= trapGen->time_total) {
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	ed93 7a03 	vldr	s14, [r3, #12]
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	edd3 7a03 	vldr	s15, [r3, #12]
 80037de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80037e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037e6:	f200 811b 	bhi.w	8003a20 <Trapezoidal_Evaluated+0x27c>
        evaTrapezoidal->isFinised = false;
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	2200      	movs	r2, #0
 80037ee:	741a      	strb	r2, [r3, #16]

        // Calculate direction-adjusted acceleration
        float32_t accel = amax * trapGen->dir;
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	7c1b      	ldrb	r3, [r3, #16]
 80037f4:	b25b      	sxtb	r3, r3
 80037f6:	ee07 3a90 	vmov	s15, r3
 80037fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037fe:	ed97 7a00 	vldr	s14, [r7]
 8003802:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003806:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

        // Calculate peak velocity (might be vmax or lower for triangular profile)
        float32_t peak_vel;
        if (trapGen->t1 == trapGen->t2) {
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	ed93 7a00 	vldr	s14, [r3]
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	edd3 7a01 	vldr	s15, [r3, #4]
 8003816:	eeb4 7a67 	vcmp.f32	s14, s15
 800381a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800381e:	d109      	bne.n	8003834 <Trapezoidal_Evaluated+0x90>
            // Triangular profile - peak velocity is at t1
            peak_vel = accel * trapGen->t1;
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	edd3 7a00 	vldr	s15, [r3]
 8003826:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800382a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800382e:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
 8003832:	e00c      	b.n	800384e <Trapezoidal_Evaluated+0xaa>
        } else {
            // Trapezoidal profile - peak velocity is vmax with direction
            peak_vel = vmax * trapGen->dir;
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	7c1b      	ldrb	r3, [r3, #16]
 8003838:	b25b      	sxtb	r3, r3
 800383a:	ee07 3a90 	vmov	s15, r3
 800383e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003842:	ed97 7a01 	vldr	s14, [r7, #4]
 8003846:	ee67 7a27 	vmul.f32	s15, s14, s15
 800384a:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
        }

        // Acceleration phase
        if (evaTrapezoidal->t <= trapGen->t1) {
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	ed93 7a03 	vldr	s14, [r3, #12]
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	edd3 7a00 	vldr	s15, [r3]
 800385a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800385e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003862:	d824      	bhi.n	80038ae <Trapezoidal_Evaluated+0x10a>
            // Position calculation: p = p0 + 0.5*a*t²
            evaTrapezoidal->setposition = initial_p + 0.5f * accel * evaTrapezoidal->t * evaTrapezoidal->t;
 8003864:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003868:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800386c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	edd3 7a03 	vldr	s15, [r3, #12]
 8003876:	ee27 7a27 	vmul.f32	s14, s14, s15
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	edd3 7a03 	vldr	s15, [r3, #12]
 8003880:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003884:	edd7 7a03 	vldr	s15, [r7, #12]
 8003888:	ee77 7a27 	vadd.f32	s15, s14, s15
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	edc3 7a00 	vstr	s15, [r3]

            // Velocity calculation: v = a*t
            evaTrapezoidal->setvelocity = accel * evaTrapezoidal->t;
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	ed93 7a03 	vldr	s14, [r3, #12]
 8003898:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800389c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	edc3 7a01 	vstr	s15, [r3, #4]

            // Constant acceleration
            evaTrapezoidal->setacceleration = accel;
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038aa:	609a      	str	r2, [r3, #8]
        // Ensure final position is exactly target_p
        evaTrapezoidal->setposition = target_p;
        evaTrapezoidal->setvelocity = 0.0f;
        evaTrapezoidal->setacceleration = 0.0f;
    }
}
 80038ac:	e0c6      	b.n	8003a3c <Trapezoidal_Evaluated+0x298>
        else if (evaTrapezoidal->t <= trapGen->t2) {
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	ed93 7a03 	vldr	s14, [r3, #12]
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	edd3 7a01 	vldr	s15, [r3, #4]
 80038ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80038be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038c2:	d830      	bhi.n	8003926 <Trapezoidal_Evaluated+0x182>
            float32_t p1 = initial_p + 0.5f * accel * trapGen->t1 * trapGen->t1;
 80038c4:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80038c8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80038cc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	edd3 7a00 	vldr	s15, [r3]
 80038d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	edd3 7a00 	vldr	s15, [r3]
 80038e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038e4:	ed97 7a03 	vldr	s14, [r7, #12]
 80038e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038ec:	edc7 7a06 	vstr	s15, [r7, #24]
            evaTrapezoidal->setposition = p1 + peak_vel * (evaTrapezoidal->t - trapGen->t1);
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	ed93 7a03 	vldr	s14, [r3, #12]
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	edd3 7a00 	vldr	s15, [r3]
 80038fc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003900:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8003904:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003908:	edd7 7a06 	vldr	s15, [r7, #24]
 800390c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	edc3 7a00 	vstr	s15, [r3]
            evaTrapezoidal->setvelocity = peak_vel;
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800391a:	605a      	str	r2, [r3, #4]
            evaTrapezoidal->setacceleration = 0.0f;
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	f04f 0200 	mov.w	r2, #0
 8003922:	609a      	str	r2, [r3, #8]
}
 8003924:	e08a      	b.n	8003a3c <Trapezoidal_Evaluated+0x298>
        else if (evaTrapezoidal->t <= trapGen->t3) {
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	ed93 7a03 	vldr	s14, [r3, #12]
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	edd3 7a02 	vldr	s15, [r3, #8]
 8003932:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003936:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800393a:	d900      	bls.n	800393e <Trapezoidal_Evaluated+0x19a>
}
 800393c:	e07e      	b.n	8003a3c <Trapezoidal_Evaluated+0x298>
            float32_t p1 = initial_p + 0.5f * accel * trapGen->t1 * trapGen->t1;
 800393e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003942:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003946:	ee27 7a87 	vmul.f32	s14, s15, s14
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	edd3 7a00 	vldr	s15, [r3]
 8003950:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	edd3 7a00 	vldr	s15, [r3]
 800395a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800395e:	ed97 7a03 	vldr	s14, [r7, #12]
 8003962:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003966:	edc7 7a08 	vstr	s15, [r7, #32]
            float32_t p2 = p1;
 800396a:	6a3b      	ldr	r3, [r7, #32]
 800396c:	62bb      	str	r3, [r7, #40]	@ 0x28
            if (trapGen->t2 > trapGen->t1) {
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	ed93 7a01 	vldr	s14, [r3, #4]
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	edd3 7a00 	vldr	s15, [r3]
 800397a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800397e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003982:	dd11      	ble.n	80039a8 <Trapezoidal_Evaluated+0x204>
                p2 += peak_vel * (trapGen->t2 - trapGen->t1);
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	ed93 7a01 	vldr	s14, [r3, #4]
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	edd3 7a00 	vldr	s15, [r3]
 8003990:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003994:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8003998:	ee67 7a27 	vmul.f32	s15, s14, s15
 800399c:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80039a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039a4:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            float32_t td = evaTrapezoidal->t - trapGen->t2;
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	ed93 7a03 	vldr	s14, [r3, #12]
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	edd3 7a01 	vldr	s15, [r3, #4]
 80039b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039b8:	edc7 7a07 	vstr	s15, [r7, #28]
            evaTrapezoidal->setposition = p2 + peak_vel * td - 0.5f * accel * td * td;
 80039bc:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80039c0:	edd7 7a07 	vldr	s15, [r7, #28]
 80039c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80039c8:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80039cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80039d0:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80039d4:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 80039d8:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80039dc:	edd7 7a07 	vldr	s15, [r7, #28]
 80039e0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80039e4:	edd7 7a07 	vldr	s15, [r7, #28]
 80039e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80039ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	edc3 7a00 	vstr	s15, [r3]
            evaTrapezoidal->setvelocity = peak_vel - accel * td;
 80039f6:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80039fa:	edd7 7a07 	vldr	s15, [r7, #28]
 80039fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a02:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8003a06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	edc3 7a01 	vstr	s15, [r3, #4]
            evaTrapezoidal->setacceleration = -accel;
 8003a10:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003a14:	eef1 7a67 	vneg.f32	s15, s15
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8003a1e:	e00d      	b.n	8003a3c <Trapezoidal_Evaluated+0x298>
        evaTrapezoidal->isFinised = true;
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	2201      	movs	r2, #1
 8003a24:	741a      	strb	r2, [r3, #16]
        evaTrapezoidal->setposition = target_p;
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	68ba      	ldr	r2, [r7, #8]
 8003a2a:	601a      	str	r2, [r3, #0]
        evaTrapezoidal->setvelocity = 0.0f;
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	f04f 0200 	mov.w	r2, #0
 8003a32:	605a      	str	r2, [r3, #4]
        evaTrapezoidal->setacceleration = 0.0f;
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	f04f 0200 	mov.w	r2, #0
 8003a3a:	609a      	str	r2, [r3, #8]
}
 8003a3c:	bf00      	nop
 8003a3e:	3734      	adds	r7, #52	@ 0x34
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr
 8003a48:	3a83126f 	.word	0x3a83126f

08003a4c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b08c      	sub	sp, #48	@ 0x30
 8003a50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8003a52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003a56:	2200      	movs	r2, #0
 8003a58:	601a      	str	r2, [r3, #0]
 8003a5a:	605a      	str	r2, [r3, #4]
 8003a5c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8003a5e:	1d3b      	adds	r3, r7, #4
 8003a60:	2220      	movs	r2, #32
 8003a62:	2100      	movs	r1, #0
 8003a64:	4618      	mov	r0, r3
 8003a66:	f009 fe41 	bl	800d6ec <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8003a6a:	4b39      	ldr	r3, [pc, #228]	@ (8003b50 <MX_ADC1_Init+0x104>)
 8003a6c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8003a70:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003a72:	4b37      	ldr	r3, [pc, #220]	@ (8003b50 <MX_ADC1_Init+0x104>)
 8003a74:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003a78:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003a7a:	4b35      	ldr	r3, [pc, #212]	@ (8003b50 <MX_ADC1_Init+0x104>)
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003a80:	4b33      	ldr	r3, [pc, #204]	@ (8003b50 <MX_ADC1_Init+0x104>)
 8003a82:	2200      	movs	r2, #0
 8003a84:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8003a86:	4b32      	ldr	r3, [pc, #200]	@ (8003b50 <MX_ADC1_Init+0x104>)
 8003a88:	2200      	movs	r2, #0
 8003a8a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8003a8c:	4b30      	ldr	r3, [pc, #192]	@ (8003b50 <MX_ADC1_Init+0x104>)
 8003a8e:	2201      	movs	r2, #1
 8003a90:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003a92:	4b2f      	ldr	r3, [pc, #188]	@ (8003b50 <MX_ADC1_Init+0x104>)
 8003a94:	2204      	movs	r2, #4
 8003a96:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003a98:	4b2d      	ldr	r3, [pc, #180]	@ (8003b50 <MX_ADC1_Init+0x104>)
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003a9e:	4b2c      	ldr	r3, [pc, #176]	@ (8003b50 <MX_ADC1_Init+0x104>)
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 8003aa4:	4b2a      	ldr	r3, [pc, #168]	@ (8003b50 <MX_ADC1_Init+0x104>)
 8003aa6:	2202      	movs	r2, #2
 8003aa8:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003aaa:	4b29      	ldr	r3, [pc, #164]	@ (8003b50 <MX_ADC1_Init+0x104>)
 8003aac:	2200      	movs	r2, #0
 8003aae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003ab2:	4b27      	ldr	r3, [pc, #156]	@ (8003b50 <MX_ADC1_Init+0x104>)
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003ab8:	4b25      	ldr	r3, [pc, #148]	@ (8003b50 <MX_ADC1_Init+0x104>)
 8003aba:	2200      	movs	r2, #0
 8003abc:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8003abe:	4b24      	ldr	r3, [pc, #144]	@ (8003b50 <MX_ADC1_Init+0x104>)
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003ac6:	4b22      	ldr	r3, [pc, #136]	@ (8003b50 <MX_ADC1_Init+0x104>)
 8003ac8:	2200      	movs	r2, #0
 8003aca:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8003acc:	4b20      	ldr	r3, [pc, #128]	@ (8003b50 <MX_ADC1_Init+0x104>)
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003ad4:	481e      	ldr	r0, [pc, #120]	@ (8003b50 <MX_ADC1_Init+0x104>)
 8003ad6:	f002 fcd1 	bl	800647c <HAL_ADC_Init>
 8003ada:	4603      	mov	r3, r0
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d001      	beq.n	8003ae4 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8003ae0:	f000 fe1e 	bl	8004720 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8003ae8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003aec:	4619      	mov	r1, r3
 8003aee:	4818      	ldr	r0, [pc, #96]	@ (8003b50 <MX_ADC1_Init+0x104>)
 8003af0:	f003 fdf0 	bl	80076d4 <HAL_ADCEx_MultiModeConfigChannel>
 8003af4:	4603      	mov	r3, r0
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d001      	beq.n	8003afe <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8003afa:	f000 fe11 	bl	8004720 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8003afe:	4b15      	ldr	r3, [pc, #84]	@ (8003b54 <MX_ADC1_Init+0x108>)
 8003b00:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003b02:	2306      	movs	r3, #6
 8003b04:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8003b06:	2307      	movs	r3, #7
 8003b08:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003b0a:	237f      	movs	r3, #127	@ 0x7f
 8003b0c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003b0e:	2304      	movs	r3, #4
 8003b10:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8003b12:	2300      	movs	r3, #0
 8003b14:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003b16:	1d3b      	adds	r3, r7, #4
 8003b18:	4619      	mov	r1, r3
 8003b1a:	480d      	ldr	r0, [pc, #52]	@ (8003b50 <MX_ADC1_Init+0x104>)
 8003b1c:	f002 ff5c 	bl	80069d8 <HAL_ADC_ConfigChannel>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d001      	beq.n	8003b2a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8003b26:	f000 fdfb 	bl	8004720 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8003b2a:	4b0b      	ldr	r3, [pc, #44]	@ (8003b58 <MX_ADC1_Init+0x10c>)
 8003b2c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8003b2e:	230c      	movs	r3, #12
 8003b30:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003b32:	1d3b      	adds	r3, r7, #4
 8003b34:	4619      	mov	r1, r3
 8003b36:	4806      	ldr	r0, [pc, #24]	@ (8003b50 <MX_ADC1_Init+0x104>)
 8003b38:	f002 ff4e 	bl	80069d8 <HAL_ADC_ConfigChannel>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d001      	beq.n	8003b46 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8003b42:	f000 fded 	bl	8004720 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003b46:	bf00      	nop
 8003b48:	3730      	adds	r7, #48	@ 0x30
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	200001f4 	.word	0x200001f4
 8003b54:	19200040 	.word	0x19200040
 8003b58:	1d500080 	.word	0x1d500080

08003b5c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b09e      	sub	sp, #120	@ 0x78
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b64:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003b68:	2200      	movs	r2, #0
 8003b6a:	601a      	str	r2, [r3, #0]
 8003b6c:	605a      	str	r2, [r3, #4]
 8003b6e:	609a      	str	r2, [r3, #8]
 8003b70:	60da      	str	r2, [r3, #12]
 8003b72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003b74:	f107 0310 	add.w	r3, r7, #16
 8003b78:	2254      	movs	r2, #84	@ 0x54
 8003b7a:	2100      	movs	r1, #0
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f009 fdb5 	bl	800d6ec <memset>
  if(adcHandle->Instance==ADC1)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003b8a:	d15e      	bne.n	8003c4a <HAL_ADC_MspInit+0xee>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8003b8c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b90:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8003b92:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8003b96:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003b98:	f107 0310 	add.w	r3, r7, #16
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f005 fa8f 	bl	80090c0 <HAL_RCCEx_PeriphCLKConfig>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d001      	beq.n	8003bac <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8003ba8:	f000 fdba 	bl	8004720 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003bac:	4b29      	ldr	r3, [pc, #164]	@ (8003c54 <HAL_ADC_MspInit+0xf8>)
 8003bae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bb0:	4a28      	ldr	r2, [pc, #160]	@ (8003c54 <HAL_ADC_MspInit+0xf8>)
 8003bb2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003bb6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003bb8:	4b26      	ldr	r3, [pc, #152]	@ (8003c54 <HAL_ADC_MspInit+0xf8>)
 8003bba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bbc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003bc0:	60fb      	str	r3, [r7, #12]
 8003bc2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003bc4:	4b23      	ldr	r3, [pc, #140]	@ (8003c54 <HAL_ADC_MspInit+0xf8>)
 8003bc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bc8:	4a22      	ldr	r2, [pc, #136]	@ (8003c54 <HAL_ADC_MspInit+0xf8>)
 8003bca:	f043 0304 	orr.w	r3, r3, #4
 8003bce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003bd0:	4b20      	ldr	r3, [pc, #128]	@ (8003c54 <HAL_ADC_MspInit+0xf8>)
 8003bd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bd4:	f003 0304 	and.w	r3, r3, #4
 8003bd8:	60bb      	str	r3, [r7, #8]
 8003bda:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN6
    PC1     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003bdc:	2303      	movs	r3, #3
 8003bde:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003be0:	2303      	movs	r3, #3
 8003be2:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003be4:	2300      	movs	r3, #0
 8003be6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003be8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003bec:	4619      	mov	r1, r3
 8003bee:	481a      	ldr	r0, [pc, #104]	@ (8003c58 <HAL_ADC_MspInit+0xfc>)
 8003bf0:	f004 faba 	bl	8008168 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8003bf4:	4b19      	ldr	r3, [pc, #100]	@ (8003c5c <HAL_ADC_MspInit+0x100>)
 8003bf6:	4a1a      	ldr	r2, [pc, #104]	@ (8003c60 <HAL_ADC_MspInit+0x104>)
 8003bf8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8003bfa:	4b18      	ldr	r3, [pc, #96]	@ (8003c5c <HAL_ADC_MspInit+0x100>)
 8003bfc:	2205      	movs	r2, #5
 8003bfe:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003c00:	4b16      	ldr	r3, [pc, #88]	@ (8003c5c <HAL_ADC_MspInit+0x100>)
 8003c02:	2200      	movs	r2, #0
 8003c04:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c06:	4b15      	ldr	r3, [pc, #84]	@ (8003c5c <HAL_ADC_MspInit+0x100>)
 8003c08:	2200      	movs	r2, #0
 8003c0a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003c0c:	4b13      	ldr	r3, [pc, #76]	@ (8003c5c <HAL_ADC_MspInit+0x100>)
 8003c0e:	2280      	movs	r2, #128	@ 0x80
 8003c10:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003c12:	4b12      	ldr	r3, [pc, #72]	@ (8003c5c <HAL_ADC_MspInit+0x100>)
 8003c14:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003c18:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003c1a:	4b10      	ldr	r3, [pc, #64]	@ (8003c5c <HAL_ADC_MspInit+0x100>)
 8003c1c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003c20:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003c22:	4b0e      	ldr	r3, [pc, #56]	@ (8003c5c <HAL_ADC_MspInit+0x100>)
 8003c24:	2220      	movs	r2, #32
 8003c26:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003c28:	4b0c      	ldr	r3, [pc, #48]	@ (8003c5c <HAL_ADC_MspInit+0x100>)
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003c2e:	480b      	ldr	r0, [pc, #44]	@ (8003c5c <HAL_ADC_MspInit+0x100>)
 8003c30:	f003 ff68 	bl	8007b04 <HAL_DMA_Init>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d001      	beq.n	8003c3e <HAL_ADC_MspInit+0xe2>
    {
      Error_Handler();
 8003c3a:	f000 fd71 	bl	8004720 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	4a06      	ldr	r2, [pc, #24]	@ (8003c5c <HAL_ADC_MspInit+0x100>)
 8003c42:	655a      	str	r2, [r3, #84]	@ 0x54
 8003c44:	4a05      	ldr	r2, [pc, #20]	@ (8003c5c <HAL_ADC_MspInit+0x100>)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8003c4a:	bf00      	nop
 8003c4c:	3778      	adds	r7, #120	@ 0x78
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	40021000 	.word	0x40021000
 8003c58:	48000800 	.word	0x48000800
 8003c5c:	20000260 	.word	0x20000260
 8003c60:	40020008 	.word	0x40020008

08003c64 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b082      	sub	sp, #8
 8003c68:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8003c6a:	4b22      	ldr	r3, [pc, #136]	@ (8003cf4 <MX_DMA_Init+0x90>)
 8003c6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c6e:	4a21      	ldr	r2, [pc, #132]	@ (8003cf4 <MX_DMA_Init+0x90>)
 8003c70:	f043 0304 	orr.w	r3, r3, #4
 8003c74:	6493      	str	r3, [r2, #72]	@ 0x48
 8003c76:	4b1f      	ldr	r3, [pc, #124]	@ (8003cf4 <MX_DMA_Init+0x90>)
 8003c78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c7a:	f003 0304 	and.w	r3, r3, #4
 8003c7e:	607b      	str	r3, [r7, #4]
 8003c80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003c82:	4b1c      	ldr	r3, [pc, #112]	@ (8003cf4 <MX_DMA_Init+0x90>)
 8003c84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c86:	4a1b      	ldr	r2, [pc, #108]	@ (8003cf4 <MX_DMA_Init+0x90>)
 8003c88:	f043 0301 	orr.w	r3, r3, #1
 8003c8c:	6493      	str	r3, [r2, #72]	@ 0x48
 8003c8e:	4b19      	ldr	r3, [pc, #100]	@ (8003cf4 <MX_DMA_Init+0x90>)
 8003c90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c92:	f003 0301 	and.w	r3, r3, #1
 8003c96:	603b      	str	r3, [r7, #0]
 8003c98:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	2100      	movs	r1, #0
 8003c9e:	200b      	movs	r0, #11
 8003ca0:	f003 fefb 	bl	8007a9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003ca4:	200b      	movs	r0, #11
 8003ca6:	f003 ff12 	bl	8007ace <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8003caa:	2200      	movs	r2, #0
 8003cac:	2100      	movs	r1, #0
 8003cae:	200c      	movs	r0, #12
 8003cb0:	f003 fef3 	bl	8007a9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8003cb4:	200c      	movs	r0, #12
 8003cb6:	f003 ff0a 	bl	8007ace <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8003cba:	2200      	movs	r2, #0
 8003cbc:	2100      	movs	r1, #0
 8003cbe:	200d      	movs	r0, #13
 8003cc0:	f003 feeb 	bl	8007a9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8003cc4:	200d      	movs	r0, #13
 8003cc6:	f003 ff02 	bl	8007ace <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8003cca:	2200      	movs	r2, #0
 8003ccc:	2100      	movs	r1, #0
 8003cce:	200e      	movs	r0, #14
 8003cd0:	f003 fee3 	bl	8007a9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8003cd4:	200e      	movs	r0, #14
 8003cd6:	f003 fefa 	bl	8007ace <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8003cda:	2200      	movs	r2, #0
 8003cdc:	2100      	movs	r1, #0
 8003cde:	200f      	movs	r0, #15
 8003ce0:	f003 fedb 	bl	8007a9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8003ce4:	200f      	movs	r0, #15
 8003ce6:	f003 fef2 	bl	8007ace <HAL_NVIC_EnableIRQ>

}
 8003cea:	bf00      	nop
 8003cec:	3708      	adds	r7, #8
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	40021000 	.word	0x40021000

08003cf8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b08a      	sub	sp, #40	@ 0x28
 8003cfc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cfe:	f107 0314 	add.w	r3, r7, #20
 8003d02:	2200      	movs	r2, #0
 8003d04:	601a      	str	r2, [r3, #0]
 8003d06:	605a      	str	r2, [r3, #4]
 8003d08:	609a      	str	r2, [r3, #8]
 8003d0a:	60da      	str	r2, [r3, #12]
 8003d0c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d0e:	4b55      	ldr	r3, [pc, #340]	@ (8003e64 <MX_GPIO_Init+0x16c>)
 8003d10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d12:	4a54      	ldr	r2, [pc, #336]	@ (8003e64 <MX_GPIO_Init+0x16c>)
 8003d14:	f043 0304 	orr.w	r3, r3, #4
 8003d18:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d1a:	4b52      	ldr	r3, [pc, #328]	@ (8003e64 <MX_GPIO_Init+0x16c>)
 8003d1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d1e:	f003 0304 	and.w	r3, r3, #4
 8003d22:	613b      	str	r3, [r7, #16]
 8003d24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003d26:	4b4f      	ldr	r3, [pc, #316]	@ (8003e64 <MX_GPIO_Init+0x16c>)
 8003d28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d2a:	4a4e      	ldr	r2, [pc, #312]	@ (8003e64 <MX_GPIO_Init+0x16c>)
 8003d2c:	f043 0320 	orr.w	r3, r3, #32
 8003d30:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d32:	4b4c      	ldr	r3, [pc, #304]	@ (8003e64 <MX_GPIO_Init+0x16c>)
 8003d34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d36:	f003 0320 	and.w	r3, r3, #32
 8003d3a:	60fb      	str	r3, [r7, #12]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d3e:	4b49      	ldr	r3, [pc, #292]	@ (8003e64 <MX_GPIO_Init+0x16c>)
 8003d40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d42:	4a48      	ldr	r2, [pc, #288]	@ (8003e64 <MX_GPIO_Init+0x16c>)
 8003d44:	f043 0301 	orr.w	r3, r3, #1
 8003d48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d4a:	4b46      	ldr	r3, [pc, #280]	@ (8003e64 <MX_GPIO_Init+0x16c>)
 8003d4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d4e:	f003 0301 	and.w	r3, r3, #1
 8003d52:	60bb      	str	r3, [r7, #8]
 8003d54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d56:	4b43      	ldr	r3, [pc, #268]	@ (8003e64 <MX_GPIO_Init+0x16c>)
 8003d58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d5a:	4a42      	ldr	r2, [pc, #264]	@ (8003e64 <MX_GPIO_Init+0x16c>)
 8003d5c:	f043 0302 	orr.w	r3, r3, #2
 8003d60:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d62:	4b40      	ldr	r3, [pc, #256]	@ (8003e64 <MX_GPIO_Init+0x16c>)
 8003d64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d66:	f003 0302 	and.w	r3, r3, #2
 8003d6a:	607b      	str	r3, [r7, #4]
 8003d6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9|PILOT_Pin, GPIO_PIN_RESET);
 8003d6e:	2200      	movs	r2, #0
 8003d70:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 8003d74:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003d78:	f004 fb90 	bl	800849c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003d82:	4839      	ldr	r0, [pc, #228]	@ (8003e68 <MX_GPIO_Init+0x170>)
 8003d84:	f004 fb8a 	bl	800849c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003d88:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003d8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003d8e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003d92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d94:	2300      	movs	r3, #0
 8003d96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003d98:	f107 0314 	add.w	r3, r7, #20
 8003d9c:	4619      	mov	r1, r3
 8003d9e:	4832      	ldr	r0, [pc, #200]	@ (8003e68 <MX_GPIO_Init+0x170>)
 8003da0:	f004 f9e2 	bl	8008168 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA9 PILOT_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_9|PILOT_Pin;
 8003da4:	f44f 63c4 	mov.w	r3, #1568	@ 0x620
 8003da8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003daa:	2301      	movs	r3, #1
 8003dac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dae:	2300      	movs	r3, #0
 8003db0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003db2:	2300      	movs	r3, #0
 8003db4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003db6:	f107 0314 	add.w	r3, r7, #20
 8003dba:	4619      	mov	r1, r3
 8003dbc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003dc0:	f004 f9d2 	bl	8008168 <HAL_GPIO_Init>

  /*Configure GPIO pins : LOWER_LIM_Pin UPPER_LIM_Pin */
  GPIO_InitStruct.Pin = LOWER_LIM_Pin|UPPER_LIM_Pin;
 8003dc4:	2306      	movs	r3, #6
 8003dc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003dcc:	2302      	movs	r3, #2
 8003dce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003dd0:	f107 0314 	add.w	r3, r7, #20
 8003dd4:	4619      	mov	r1, r3
 8003dd6:	4825      	ldr	r0, [pc, #148]	@ (8003e6c <MX_GPIO_Init+0x174>)
 8003dd8:	f004 f9c6 	bl	8008168 <HAL_GPIO_Init>

  /*Configure GPIO pins : LOWER_PHOTO_Pin EMER_Pin PROX_Pin J1_Pin */
  GPIO_InitStruct.Pin = LOWER_PHOTO_Pin|EMER_Pin|PROX_Pin|J1_Pin;
 8003ddc:	f241 03b0 	movw	r3, #4272	@ 0x10b0
 8003de0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003de2:	2300      	movs	r3, #0
 8003de4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003de6:	2300      	movs	r3, #0
 8003de8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003dea:	f107 0314 	add.w	r3, r7, #20
 8003dee:	4619      	mov	r1, r3
 8003df0:	481e      	ldr	r0, [pc, #120]	@ (8003e6c <MX_GPIO_Init+0x174>)
 8003df2:	f004 f9b9 	bl	8008168 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003df6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003dfa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e00:	2300      	movs	r3, #0
 8003e02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e04:	2300      	movs	r3, #0
 8003e06:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e08:	f107 0314 	add.w	r3, r7, #20
 8003e0c:	4619      	mov	r1, r3
 8003e0e:	4816      	ldr	r0, [pc, #88]	@ (8003e68 <MX_GPIO_Init+0x170>)
 8003e10:	f004 f9aa 	bl	8008168 <HAL_GPIO_Init>

  /*Configure GPIO pin : UPPER_PHOTO_Pin */
  GPIO_InitStruct.Pin = UPPER_PHOTO_Pin;
 8003e14:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003e18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UPPER_PHOTO_GPIO_Port, &GPIO_InitStruct);
 8003e22:	f107 0314 	add.w	r3, r7, #20
 8003e26:	4619      	mov	r1, r3
 8003e28:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003e2c:	f004 f99c 	bl	8008168 <HAL_GPIO_Init>

  /*Configure GPIO pins : J3_Pin J4_Pin J2_Pin */
  GPIO_InitStruct.Pin = J3_Pin|J4_Pin|J2_Pin;
 8003e30:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8003e34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003e36:	2300      	movs	r3, #0
 8003e38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e3e:	f107 0314 	add.w	r3, r7, #20
 8003e42:	4619      	mov	r1, r3
 8003e44:	4808      	ldr	r0, [pc, #32]	@ (8003e68 <MX_GPIO_Init+0x170>)
 8003e46:	f004 f98f 	bl	8008168 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	2100      	movs	r1, #0
 8003e4e:	2028      	movs	r0, #40	@ 0x28
 8003e50:	f003 fe23 	bl	8007a9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003e54:	2028      	movs	r0, #40	@ 0x28
 8003e56:	f003 fe3a 	bl	8007ace <HAL_NVIC_EnableIRQ>

}
 8003e5a:	bf00      	nop
 8003e5c:	3728      	adds	r7, #40	@ 0x28
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	40021000 	.word	0x40021000
 8003e68:	48000800 	.word	0x48000800
 8003e6c:	48000400 	.word	0x48000400

08003e70 <Kalman_Start>:
	  arm_mat_mult_f32(&temp_matrix4, &filter->P_k_matrix, &filter->P_k_matrix);			// (I - (K * C)) * P_k
	  filter->Kalman_Speed = filter->X_k[1];
	  return  filter->Kalman_Speed;
}

void Kalman_Start(KalmanFilter* filter, float32_t* A_matrix, float32_t* B_matrix, float32_t Q, float32_t R){
 8003e70:	b5b0      	push	{r4, r5, r7, lr}
 8003e72:	b0a4      	sub	sp, #144	@ 0x90
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6178      	str	r0, [r7, #20]
 8003e78:	6139      	str	r1, [r7, #16]
 8003e7a:	60fa      	str	r2, [r7, #12]
 8003e7c:	ed87 0a02 	vstr	s0, [r7, #8]
 8003e80:	edc7 0a01 	vstr	s1, [r7, #4]
	filter->Q = Q; //1.0
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	68ba      	ldr	r2, [r7, #8]
 8003e88:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
	filter->R[0] = R; //0.05
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4

	float32_t c[4] = {1.0f, 0.0f, 0.0f, 0.0f};
 8003e94:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8003e98:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003e9a:	f04f 0300 	mov.w	r3, #0
 8003e9e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003ea2:	f04f 0300 	mov.w	r3, #0
 8003ea6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003eaa:	f04f 0300 	mov.w	r3, #0
 8003eae:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

	float32_t g[4] = {0.0f,
 8003eb2:	f04f 0300 	mov.w	r3, #0
 8003eb6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003eb8:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8003ebc:	673b      	str	r3, [r7, #112]	@ 0x70
 8003ebe:	f04f 0300 	mov.w	r3, #0
 8003ec2:	677b      	str	r3, [r7, #116]	@ 0x74
 8003ec4:	f04f 0300 	mov.w	r3, #0
 8003ec8:	67bb      	str	r3, [r7, #120]	@ 0x78
					  1.0f,
					  0.0f,
					  0.0f};

	float32_t iden[16] = {1.0f, 0.0f, 0.0f, 0.0f,
 8003eca:	4bc6      	ldr	r3, [pc, #792]	@ (80041e4 <Kalman_Start+0x374>)
 8003ecc:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 8003ed0:	461d      	mov	r5, r3
 8003ed2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003ed4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003ed6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003ed8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003eda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003edc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003ede:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003ee2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			  	  	 0.0f, 1.0f, 0.0f, 0.0f,
					 0.0f, 0.0f, 1.0f, 0.0f,
					 0.0f, 0.0f, 0.0f, 1.0f,};

	float32_t x_k[4] = {0.0f, 0.0f, 0.0f, 0.0f};
 8003ee6:	f107 031c 	add.w	r3, r7, #28
 8003eea:	2200      	movs	r2, #0
 8003eec:	601a      	str	r2, [r3, #0]
 8003eee:	605a      	str	r2, [r3, #4]
 8003ef0:	609a      	str	r2, [r3, #8]
 8003ef2:	60da      	str	r2, [r3, #12]

	filter->Es_velocity[1] = 0.0f;
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	f04f 0200 	mov.w	r2, #0
 8003efa:	f8c3 2260 	str.w	r2, [r3, #608]	@ 0x260

	int i;
	for(i=0;i<16;i++)
 8003efe:	2300      	movs	r3, #0
 8003f00:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003f04:	e028      	b.n	8003f58 <Kalman_Start+0xe8>
	{
		filter->A[i] = A_matrix[i];
 8003f06:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	693a      	ldr	r2, [r7, #16]
 8003f0e:	4413      	add	r3, r2
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	6979      	ldr	r1, [r7, #20]
 8003f14:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f18:	3314      	adds	r3, #20
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	440b      	add	r3, r1
 8003f1e:	601a      	str	r2, [r3, #0]
		filter->eye[i] = iden[i];
 8003f20:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	3390      	adds	r3, #144	@ 0x90
 8003f28:	443b      	add	r3, r7
 8003f2a:	3b64      	subs	r3, #100	@ 0x64
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	6979      	ldr	r1, [r7, #20]
 8003f30:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f34:	3398      	adds	r3, #152	@ 0x98
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	440b      	add	r3, r1
 8003f3a:	601a      	str	r2, [r3, #0]
		filter->P_k[i] = 0.0f;
 8003f3c:	697a      	ldr	r2, [r7, #20]
 8003f3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f42:	3304      	adds	r3, #4
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	4413      	add	r3, r2
 8003f48:	f04f 0200 	mov.w	r2, #0
 8003f4c:	601a      	str	r2, [r3, #0]
	for(i=0;i<16;i++)
 8003f4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f52:	3301      	adds	r3, #1
 8003f54:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003f58:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f5c:	2b0f      	cmp	r3, #15
 8003f5e:	ddd2      	ble.n	8003f06 <Kalman_Start+0x96>
	}

	for(i=0;i<4;i++)
 8003f60:	2300      	movs	r3, #0
 8003f62:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003f66:	e03a      	b.n	8003fde <Kalman_Start+0x16e>
	{
		filter->X_k[i] = x_k[i];
 8003f68:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	3390      	adds	r3, #144	@ 0x90
 8003f70:	443b      	add	r3, r7
 8003f72:	3b74      	subs	r3, #116	@ 0x74
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	6979      	ldr	r1, [r7, #20]
 8003f78:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	440b      	add	r3, r1
 8003f80:	601a      	str	r2, [r3, #0]
		filter->B[i] = B_matrix[i];
 8003f82:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	68fa      	ldr	r2, [r7, #12]
 8003f8a:	4413      	add	r3, r2
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	6979      	ldr	r1, [r7, #20]
 8003f90:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f94:	3324      	adds	r3, #36	@ 0x24
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	440b      	add	r3, r1
 8003f9a:	601a      	str	r2, [r3, #0]
		filter->C[i] = c[i];
 8003f9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	3390      	adds	r3, #144	@ 0x90
 8003fa4:	443b      	add	r3, r7
 8003fa6:	3b14      	subs	r3, #20
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	6979      	ldr	r1, [r7, #20]
 8003fac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003fb0:	3328      	adds	r3, #40	@ 0x28
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	440b      	add	r3, r1
 8003fb6:	601a      	str	r2, [r3, #0]
		filter->G[i] = g[i];
 8003fb8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	3390      	adds	r3, #144	@ 0x90
 8003fc0:	443b      	add	r3, r7
 8003fc2:	3b24      	subs	r3, #36	@ 0x24
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	6979      	ldr	r1, [r7, #20]
 8003fc8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003fcc:	332c      	adds	r3, #44	@ 0x2c
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	440b      	add	r3, r1
 8003fd2:	601a      	str	r2, [r3, #0]
	for(i=0;i<4;i++)
 8003fd4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003fd8:	3301      	adds	r3, #1
 8003fda:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003fde:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003fe2:	2b03      	cmp	r3, #3
 8003fe4:	ddc0      	ble.n	8003f68 <Kalman_Start+0xf8>

	}

	arm_mat_init_f32(&filter->X_k_matrix, 4, 1,filter->X_k);
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	f503 7029 	add.w	r0, r3, #676	@ 0x2a4
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	2104      	movs	r1, #4
 8003ff2:	f009 f9fc 	bl	800d3ee <arm_mat_init_f32>
	arm_mat_init_f32(&filter->P_k_matrix, 4, 4,filter->P_k);
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	3310      	adds	r3, #16
 8004000:	2204      	movs	r2, #4
 8004002:	2104      	movs	r1, #4
 8004004:	f009 f9f3 	bl	800d3ee <arm_mat_init_f32>

	arm_mat_init_f32(&filter->A_matrix, 4, 4,filter->A);
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	f503 702d 	add.w	r0, r3, #692	@ 0x2b4
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	3350      	adds	r3, #80	@ 0x50
 8004012:	2204      	movs	r2, #4
 8004014:	2104      	movs	r1, #4
 8004016:	f009 f9ea 	bl	800d3ee <arm_mat_init_f32>
	arm_mat_init_f32(&filter->B_matrix, 4, 1,filter->B);
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	f503 7033 	add.w	r0, r3, #716	@ 0x2cc
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	3390      	adds	r3, #144	@ 0x90
 8004024:	2201      	movs	r2, #1
 8004026:	2104      	movs	r1, #4
 8004028:	f009 f9e1 	bl	800d3ee <arm_mat_init_f32>
	arm_mat_init_f32(&filter->C_matrix, 1, 4,filter->C);
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	33a0      	adds	r3, #160	@ 0xa0
 8004036:	2204      	movs	r2, #4
 8004038:	2101      	movs	r1, #1
 800403a:	f009 f9d8 	bl	800d3ee <arm_mat_init_f32>
	arm_mat_init_f32(&filter->G_matrix, 4, 1,filter->G);
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	f503 7039 	add.w	r0, r3, #740	@ 0x2e4
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	33b0      	adds	r3, #176	@ 0xb0
 8004048:	2201      	movs	r2, #1
 800404a:	2104      	movs	r1, #4
 800404c:	f009 f9cf 	bl	800d3ee <arm_mat_init_f32>

	arm_mat_init_f32(&filter->A_transpose_matrix, 4, 4, filter->A_transpose);
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	f503 702f 	add.w	r0, r3, #700	@ 0x2bc
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	33c8      	adds	r3, #200	@ 0xc8
 800405a:	2204      	movs	r2, #4
 800405c:	2104      	movs	r1, #4
 800405e:	f009 f9c6 	bl	800d3ee <arm_mat_init_f32>
	arm_mat_init_f32(&filter->C_transpose_matrix, 4, 1, filter->C_transpose);
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	f503 7037 	add.w	r0, r3, #732	@ 0x2dc
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 800406e:	2201      	movs	r2, #1
 8004070:	2104      	movs	r1, #4
 8004072:	f009 f9bc 	bl	800d3ee <arm_mat_init_f32>
	arm_mat_init_f32(&filter->G_transpose_matrix, 1, 4, filter->G_transpose);
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	f503 703b 	add.w	r0, r3, #748	@ 0x2ec
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 8004082:	2204      	movs	r2, #4
 8004084:	2101      	movs	r1, #1
 8004086:	f009 f9b2 	bl	800d3ee <arm_mat_init_f32>

	arm_mat_init_f32(&filter->GGT_matrix, 4, 4, filter->GGT);
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	f503 703f 	add.w	r0, r3, #764	@ 0x2fc
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8004096:	2204      	movs	r2, #4
 8004098:	2104      	movs	r1, #4
 800409a:	f009 f9a8 	bl	800d3ee <arm_mat_init_f32>
	arm_mat_init_f32(&filter->GQGT_matrix, 4, 4, filter->GQGT);
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80040aa:	2204      	movs	r2, #4
 80040ac:	2104      	movs	r1, #4
 80040ae:	f009 f99e 	bl	800d3ee <arm_mat_init_f32>

	// Compute Xk = Ax + Bu
	arm_mat_init_f32(&filter->Bu_matrix, 4, 1, filter->Bu_data);
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	f503 7043 	add.w	r0, r3, #780	@ 0x30c
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80040be:	2201      	movs	r2, #1
 80040c0:	2104      	movs	r1, #4
 80040c2:	f009 f994 	bl	800d3ee <arm_mat_init_f32>
	arm_mat_init_f32(&filter->Ax_matrix, 4, 1, filter->Ax_data);
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	f503 7045 	add.w	r0, r3, #788	@ 0x314
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	f503 73d4 	add.w	r3, r3, #424	@ 0x1a8
 80040d2:	2201      	movs	r2, #1
 80040d4:	2104      	movs	r1, #4
 80040d6:	f009 f98a 	bl	800d3ee <arm_mat_init_f32>

	// Compute (C * P_k * C^T + R)
	arm_mat_init_f32(&filter->CP_matrix, 1, 4, filter->CP);
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	f503 7047 	add.w	r0, r3, #796	@ 0x31c
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 80040e6:	2204      	movs	r2, #4
 80040e8:	2101      	movs	r1, #1
 80040ea:	f009 f980 	bl	800d3ee <arm_mat_init_f32>
	arm_mat_init_f32(&filter->CPCT_matrix, 1, 1, filter->CPCT);
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	f503 7049 	add.w	r0, r3, #804	@ 0x324
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 80040fa:	2201      	movs	r2, #1
 80040fc:	2101      	movs	r1, #1
 80040fe:	f009 f976 	bl	800d3ee <arm_mat_init_f32>
	arm_mat_init_f32(&filter->CPCTR_matrix, 1, 1, filter->CPCTR);
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	f503 704b 	add.w	r0, r3, #812	@ 0x32c
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 800410e:	2201      	movs	r2, #1
 8004110:	2101      	movs	r1, #1
 8004112:	f009 f96c 	bl	800d3ee <arm_mat_init_f32>

	// Compute Kalman Gain: K = P_k * C^T * inv(C * P_k * C^T + R)
	arm_mat_init_f32(&filter->K_matrix, 4, 1, filter->K);
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	f503 704d 	add.w	r0, r3, #820	@ 0x334
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 8004122:	2201      	movs	r2, #1
 8004124:	2104      	movs	r1, #4
 8004126:	f009 f962 	bl	800d3ee <arm_mat_init_f32>
	arm_mat_init_f32(&filter->PCT_matrix, 4, 1,filter->PCT);
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	f503 704f 	add.w	r0, r3, #828	@ 0x33c
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8004136:	2201      	movs	r2, #1
 8004138:	2104      	movs	r1, #4
 800413a:	f009 f958 	bl	800d3ee <arm_mat_init_f32>

	// Compute inverse of (C * P_k * C^T + R)
	arm_mat_init_f32(&filter->CPCTRinv_matrix, 1, 1,filter->CPCTRinv);
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	f503 7051 	add.w	r0, r3, #836	@ 0x344
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 800414a:	2201      	movs	r2, #1
 800414c:	2101      	movs	r1, #1
 800414e:	f009 f94e 	bl	800d3ee <arm_mat_init_f32>

	// Computation of the estimated state
	arm_mat_init_f32(&filter->Cx_matrix, 1, 1, filter->Cx);
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	f503 7053 	add.w	r0, r3, #844	@ 0x34c
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	f503 7311 	add.w	r3, r3, #580	@ 0x244
 800415e:	2201      	movs	r2, #1
 8004160:	2101      	movs	r1, #1
 8004162:	f009 f944 	bl	800d3ee <arm_mat_init_f32>
	arm_mat_init_f32(&filter->yCx_matrix, 1, 1, filter->yCx);
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	f503 7055 	add.w	r0, r3, #852	@ 0x354
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004172:	2201      	movs	r2, #1
 8004174:	2101      	movs	r1, #1
 8004176:	f009 f93a 	bl	800d3ee <arm_mat_init_f32>
	arm_mat_init_f32(&filter->KyCx_matrix, 4, 1, filter->KyCx);
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	f503 7057 	add.w	r0, r3, #860	@ 0x35c
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8004186:	2201      	movs	r2, #1
 8004188:	2104      	movs	r1, #4
 800418a:	f009 f930 	bl	800d3ee <arm_mat_init_f32>

	arm_mat_init_f32(&filter->Output_matrix, 1, 1, filter->Es_velocity);
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	f503 703d 	add.w	r0, r3, #756	@ 0x2f4
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800419a:	2201      	movs	r2, #1
 800419c:	2101      	movs	r1, #1
 800419e:	f009 f926 	bl	800d3ee <arm_mat_init_f32>
	arm_mat_init_f32(&filter->eye_matrix, 4, 4, filter->eye);
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	f503 7031 	add.w	r0, r3, #708	@ 0x2c4
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80041ae:	2204      	movs	r2, #4
 80041b0:	2104      	movs	r1, #4
 80041b2:	f009 f91c 	bl	800d3ee <arm_mat_init_f32>

	arm_mat_init_f32(&filter->R_matrix, 1, 1, filter->R);
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	f503 7059 	add.w	r0, r3, #868	@ 0x364
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	33c4      	adds	r3, #196	@ 0xc4
 80041c0:	2201      	movs	r2, #1
 80041c2:	2101      	movs	r1, #1
 80041c4:	f009 f913 	bl	800d3ee <arm_mat_init_f32>
	arm_mat_init_f32(&filter->Z_matrix, 1, 1, filter->Z);
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	f503 705b 	add.w	r0, r3, #876	@ 0x36c
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	f503 7328 	add.w	r3, r3, #672	@ 0x2a0
 80041d4:	2201      	movs	r2, #1
 80041d6:	2101      	movs	r1, #1
 80041d8:	f009 f909 	bl	800d3ee <arm_mat_init_f32>
}
 80041dc:	bf00      	nop
 80041de:	3790      	adds	r7, #144	@ 0x90
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bdb0      	pop	{r4, r5, r7, pc}
 80041e4:	0800e2d4 	.word	0x0800e2d4

080041e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80041e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80041ec:	ed2d 8b02 	vpush	{d8}
 80041f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80041f2:	f001 fe8e 	bl	8005f12 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80041f6:	f000 f8d5 	bl	80043a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80041fa:	f7ff fd7d 	bl	8003cf8 <MX_GPIO_Init>
  MX_DMA_Init();
 80041fe:	f7ff fd31 	bl	8003c64 <MX_DMA_Init>
  MX_ADC1_Init();
 8004202:	f7ff fc23 	bl	8003a4c <MX_ADC1_Init>
  MX_TIM2_Init();
 8004206:	f001 f8bf 	bl	8005388 <MX_TIM2_Init>
  MX_TIM3_Init();
 800420a:	f001 f90b 	bl	8005424 <MX_TIM3_Init>
  MX_TIM4_Init();
 800420e:	f001 f95f 	bl	80054d0 <MX_TIM4_Init>
  MX_TIM5_Init();
 8004212:	f001 f9b3 	bl	800557c <MX_TIM5_Init>
  MX_TIM8_Init();
 8004216:	f001 f9ff 	bl	8005618 <MX_TIM8_Init>
  MX_USART2_UART_Init();
 800421a:	f001 fca3 	bl	8005b64 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 800421e:	f001 fab9 	bl	8005794 <MX_TIM16_Init>
  MX_TIM1_Init();
 8004222:	f001 f81d 	bl	8005260 <MX_TIM1_Init>
  MX_LPUART1_UART_Init();
 8004226:	f001 fc53 	bl	8005ad0 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */
	plotter_begin();
 800422a:	f000 fa7f 	bl	800472c <plotter_begin>
	MotorKalman_Init(&motor_filter, 1e-3, ZGX45RGG_400RPM_Constant.J,
 800422e:	4b50      	ldr	r3, [pc, #320]	@ (8004370 <main+0x188>)
 8004230:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004234:	4610      	mov	r0, r2
 8004236:	4619      	mov	r1, r3
 8004238:	f7fc fc04 	bl	8000a44 <__aeabi_d2f>
 800423c:	4604      	mov	r4, r0
			ZGX45RGG_400RPM_Constant.B, ZGX45RGG_400RPM_Constant.Kt,
 800423e:	4b4c      	ldr	r3, [pc, #304]	@ (8004370 <main+0x188>)
 8004240:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
	MotorKalman_Init(&motor_filter, 1e-3, ZGX45RGG_400RPM_Constant.J,
 8004244:	4610      	mov	r0, r2
 8004246:	4619      	mov	r1, r3
 8004248:	f7fc fbfc 	bl	8000a44 <__aeabi_d2f>
 800424c:	4605      	mov	r5, r0
			ZGX45RGG_400RPM_Constant.B, ZGX45RGG_400RPM_Constant.Kt,
 800424e:	4b48      	ldr	r3, [pc, #288]	@ (8004370 <main+0x188>)
 8004250:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
	MotorKalman_Init(&motor_filter, 1e-3, ZGX45RGG_400RPM_Constant.J,
 8004254:	4610      	mov	r0, r2
 8004256:	4619      	mov	r1, r3
 8004258:	f7fc fbf4 	bl	8000a44 <__aeabi_d2f>
 800425c:	4606      	mov	r6, r0
			ZGX45RGG_400RPM_Constant.Ke, ZGX45RGG_400RPM_Constant.R,
 800425e:	4b44      	ldr	r3, [pc, #272]	@ (8004370 <main+0x188>)
 8004260:	e9d3 2300 	ldrd	r2, r3, [r3]
	MotorKalman_Init(&motor_filter, 1e-3, ZGX45RGG_400RPM_Constant.J,
 8004264:	4610      	mov	r0, r2
 8004266:	4619      	mov	r1, r3
 8004268:	f7fc fbec 	bl	8000a44 <__aeabi_d2f>
 800426c:	4680      	mov	r8, r0
			ZGX45RGG_400RPM_Constant.Ke, ZGX45RGG_400RPM_Constant.R,
 800426e:	4b40      	ldr	r3, [pc, #256]	@ (8004370 <main+0x188>)
 8004270:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
	MotorKalman_Init(&motor_filter, 1e-3, ZGX45RGG_400RPM_Constant.J,
 8004274:	4610      	mov	r0, r2
 8004276:	4619      	mov	r1, r3
 8004278:	f7fc fbe4 	bl	8000a44 <__aeabi_d2f>
 800427c:	4681      	mov	r9, r0
			ZGX45RGG_400RPM_Constant.L, 1.0, 1.0);
 800427e:	4b3c      	ldr	r3, [pc, #240]	@ (8004370 <main+0x188>)
 8004280:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
	MotorKalman_Init(&motor_filter, 1e-3, ZGX45RGG_400RPM_Constant.J,
 8004284:	4610      	mov	r0, r2
 8004286:	4619      	mov	r1, r3
 8004288:	f7fc fbdc 	bl	8000a44 <__aeabi_d2f>
 800428c:	4603      	mov	r3, r0
 800428e:	eeb7 4a00 	vmov.f32	s8, #112	@ 0x3f800000  1.0
 8004292:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 8004296:	ee03 3a10 	vmov	s6, r3
 800429a:	ee02 9a90 	vmov	s5, r9
 800429e:	ee02 8a10 	vmov	s4, r8
 80042a2:	ee01 6a90 	vmov	s3, r6
 80042a6:	ee01 5a10 	vmov	s2, r5
 80042aa:	ee00 4a90 	vmov	s1, r4
 80042ae:	ed9f 0a31 	vldr	s0, [pc, #196]	@ 8004374 <main+0x18c>
 80042b2:	4831      	ldr	r0, [pc, #196]	@ (8004378 <main+0x190>)
 80042b4:	f7fd faf0 	bl	8001898 <MotorKalman_Init>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		plotter_update_sensors();
 80042b8:	f000 fd14 	bl	8004ce4 <plotter_update_sensors>
//		test_sensors_motor_servo(pd, rd, sd);

		if (b1 && !button_pressed_previous && !pristrajectoryActive) {
 80042bc:	4b2f      	ldr	r3, [pc, #188]	@ (800437c <main+0x194>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d04e      	beq.n	8004362 <main+0x17a>
 80042c4:	4b2e      	ldr	r3, [pc, #184]	@ (8004380 <main+0x198>)
 80042c6:	781b      	ldrb	r3, [r3, #0]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d14a      	bne.n	8004362 <main+0x17a>
 80042cc:	4b2d      	ldr	r3, [pc, #180]	@ (8004384 <main+0x19c>)
 80042ce:	781b      	ldrb	r3, [r3, #0]
 80042d0:	f083 0301 	eor.w	r3, r3, #1
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d043      	beq.n	8004362 <main+0x17a>
			prisEva.t = 0.0f;
 80042da:	4b2b      	ldr	r3, [pc, #172]	@ (8004388 <main+0x1a0>)
 80042dc:	f04f 0200 	mov.w	r2, #0
 80042e0:	60da      	str	r2, [r3, #12]
			prisEva.isFinised = false;
 80042e2:	4b29      	ldr	r3, [pc, #164]	@ (8004388 <main+0x1a0>)
 80042e4:	2200      	movs	r2, #0
 80042e6:	741a      	strb	r2, [r3, #16]

			pris_initial_p = prismatic_encoder.mm;
 80042e8:	4b28      	ldr	r3, [pc, #160]	@ (800438c <main+0x1a4>)
 80042ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042ec:	4a28      	ldr	r2, [pc, #160]	@ (8004390 <main+0x1a8>)
 80042ee:	6013      	str	r3, [r2, #0]

			pris_target_p = trajectory_sequence[trajectory_sequence_index];
 80042f0:	4b28      	ldr	r3, [pc, #160]	@ (8004394 <main+0x1ac>)
 80042f2:	781b      	ldrb	r3, [r3, #0]
 80042f4:	4a28      	ldr	r2, [pc, #160]	@ (8004398 <main+0x1b0>)
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	4413      	add	r3, r2
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a27      	ldr	r2, [pc, #156]	@ (800439c <main+0x1b4>)
 80042fe:	6013      	str	r3, [r2, #0]

			Trapezoidal_Generator(&prisGen, pris_initial_p, pris_target_p,
 8004300:	4b23      	ldr	r3, [pc, #140]	@ (8004390 <main+0x1a8>)
 8004302:	ed93 8a00 	vldr	s16, [r3]
 8004306:	4b25      	ldr	r3, [pc, #148]	@ (800439c <main+0x1b4>)
 8004308:	edd3 8a00 	vldr	s17, [r3]
					ZGX45RGG_400RPM_Constant.sd_max,
 800430c:	4b18      	ldr	r3, [pc, #96]	@ (8004370 <main+0x188>)
 800430e:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
			Trapezoidal_Generator(&prisGen, pris_initial_p, pris_target_p,
 8004312:	4610      	mov	r0, r2
 8004314:	4619      	mov	r1, r3
 8004316:	f7fc fb95 	bl	8000a44 <__aeabi_d2f>
 800431a:	4604      	mov	r4, r0
					ZGX45RGG_400RPM_Constant.sdd_max);
 800431c:	4b14      	ldr	r3, [pc, #80]	@ (8004370 <main+0x188>)
 800431e:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
			Trapezoidal_Generator(&prisGen, pris_initial_p, pris_target_p,
 8004322:	4610      	mov	r0, r2
 8004324:	4619      	mov	r1, r3
 8004326:	f7fc fb8d 	bl	8000a44 <__aeabi_d2f>
 800432a:	4603      	mov	r3, r0
 800432c:	ee01 3a90 	vmov	s3, r3
 8004330:	ee01 4a10 	vmov	s2, r4
 8004334:	eef0 0a68 	vmov.f32	s1, s17
 8004338:	eeb0 0a48 	vmov.f32	s0, s16
 800433c:	4818      	ldr	r0, [pc, #96]	@ (80043a0 <main+0x1b8>)
 800433e:	f7ff f96f 	bl	8003620 <Trapezoidal_Generator>

			pristrajectoryActive = true;
 8004342:	4b10      	ldr	r3, [pc, #64]	@ (8004384 <main+0x19c>)
 8004344:	2201      	movs	r2, #1
 8004346:	701a      	strb	r2, [r3, #0]

			trajectory_sequence_index = (trajectory_sequence_index + 1) % 4;
 8004348:	4b12      	ldr	r3, [pc, #72]	@ (8004394 <main+0x1ac>)
 800434a:	781b      	ldrb	r3, [r3, #0]
 800434c:	3301      	adds	r3, #1
 800434e:	425a      	negs	r2, r3
 8004350:	f003 0303 	and.w	r3, r3, #3
 8004354:	f002 0203 	and.w	r2, r2, #3
 8004358:	bf58      	it	pl
 800435a:	4253      	negpl	r3, r2
 800435c:	b2da      	uxtb	r2, r3
 800435e:	4b0d      	ldr	r3, [pc, #52]	@ (8004394 <main+0x1ac>)
 8004360:	701a      	strb	r2, [r3, #0]
		}
		button_pressed_previous = b1;
 8004362:	4b06      	ldr	r3, [pc, #24]	@ (800437c <main+0x194>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	b2da      	uxtb	r2, r3
 8004368:	4b05      	ldr	r3, [pc, #20]	@ (8004380 <main+0x198>)
 800436a:	701a      	strb	r2, [r3, #0]
		plotter_update_sensors();
 800436c:	e7a4      	b.n	80042b8 <main+0xd0>
 800436e:	bf00      	nop
 8004370:	20000060 	.word	0x20000060
 8004374:	3a83126f 	.word	0x3a83126f
 8004378:	20000314 	.word	0x20000314
 800437c:	20001938 	.word	0x20001938
 8004380:	20000681 	.word	0x20000681
 8004384:	200002e8 	.word	0x200002e8
 8004388:	200002d4 	.word	0x200002d4
 800438c:	2000071c 	.word	0x2000071c
 8004390:	200002ec 	.word	0x200002ec
 8004394:	20000680 	.word	0x20000680
 8004398:	0800e314 	.word	0x0800e314
 800439c:	200002f0 	.word	0x200002f0
 80043a0:	200002c0 	.word	0x200002c0

080043a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b094      	sub	sp, #80	@ 0x50
 80043a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80043aa:	f107 0318 	add.w	r3, r7, #24
 80043ae:	2238      	movs	r2, #56	@ 0x38
 80043b0:	2100      	movs	r1, #0
 80043b2:	4618      	mov	r0, r3
 80043b4:	f009 f99a 	bl	800d6ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80043b8:	1d3b      	adds	r3, r7, #4
 80043ba:	2200      	movs	r2, #0
 80043bc:	601a      	str	r2, [r3, #0]
 80043be:	605a      	str	r2, [r3, #4]
 80043c0:	609a      	str	r2, [r3, #8]
 80043c2:	60da      	str	r2, [r3, #12]
 80043c4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80043c6:	2000      	movs	r0, #0
 80043c8:	f004 f898 	bl	80084fc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80043cc:	2302      	movs	r3, #2
 80043ce:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80043d0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80043d4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80043d6:	2340      	movs	r3, #64	@ 0x40
 80043d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80043da:	2302      	movs	r3, #2
 80043dc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80043de:	2302      	movs	r3, #2
 80043e0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80043e2:	2304      	movs	r3, #4
 80043e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80043e6:	2355      	movs	r3, #85	@ 0x55
 80043e8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80043ea:	2302      	movs	r3, #2
 80043ec:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80043ee:	2302      	movs	r3, #2
 80043f0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80043f2:	2302      	movs	r3, #2
 80043f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80043f6:	f107 0318 	add.w	r3, r7, #24
 80043fa:	4618      	mov	r0, r3
 80043fc:	f004 f932 	bl	8008664 <HAL_RCC_OscConfig>
 8004400:	4603      	mov	r3, r0
 8004402:	2b00      	cmp	r3, #0
 8004404:	d001      	beq.n	800440a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8004406:	f000 f98b 	bl	8004720 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800440a:	230f      	movs	r3, #15
 800440c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800440e:	2303      	movs	r3, #3
 8004410:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004412:	2300      	movs	r3, #0
 8004414:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004416:	2300      	movs	r3, #0
 8004418:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800441a:	2300      	movs	r3, #0
 800441c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800441e:	1d3b      	adds	r3, r7, #4
 8004420:	2104      	movs	r1, #4
 8004422:	4618      	mov	r0, r3
 8004424:	f004 fc30 	bl	8008c88 <HAL_RCC_ClockConfig>
 8004428:	4603      	mov	r3, r0
 800442a:	2b00      	cmp	r3, #0
 800442c:	d001      	beq.n	8004432 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800442e:	f000 f977 	bl	8004720 <Error_Handler>
  }
}
 8004432:	bf00      	nop
 8004434:	3750      	adds	r7, #80	@ 0x50
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}
	...

0800443c <HAL_GPIO_EXTI_Callback>:
//		return 10;
//	default:
//		return 0;
//	}
//}
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800443c:	b480      	push	{r7}
 800443e:	b083      	sub	sp, #12
 8004440:	af00      	add	r7, sp, #0
 8004442:	4603      	mov	r3, r0
 8004444:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == EMER_Pin) {
 8004446:	88fb      	ldrh	r3, [r7, #6]
 8004448:	2b10      	cmp	r3, #16
 800444a:	d105      	bne.n	8004458 <HAL_GPIO_EXTI_Callback+0x1c>
		rs_current_state = RS_EMERGENCY_TRIGGED;
 800444c:	4b05      	ldr	r3, [pc, #20]	@ (8004464 <HAL_GPIO_EXTI_Callback+0x28>)
 800444e:	2205      	movs	r2, #5
 8004450:	701a      	strb	r2, [r3, #0]
		emer_state = PUSHED;
 8004452:	4b05      	ldr	r3, [pc, #20]	@ (8004468 <HAL_GPIO_EXTI_Callback+0x2c>)
 8004454:	2200      	movs	r2, #0
 8004456:	701a      	strb	r2, [r3, #0]
	}
}
 8004458:	bf00      	nop
 800445a:	370c      	adds	r7, #12
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr
 8004464:	200000d4 	.word	0x200000d4
 8004468:	200000d7 	.word	0x200000d7

0800446c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800446c:	b480      	push	{r7}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
	if (huart == &hlpuart1) {

	}
}
 8004474:	bf00      	nop
 8004476:	370c      	adds	r7, #12
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr

08004480 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8004480:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004484:	ed2d 8b02 	vpush	{d8}
 8004488:	b083      	sub	sp, #12
 800448a:	af00      	add	r7, sp, #0
 800448c:	6078      	str	r0, [r7, #4]
	if (htim == &htim2) {
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	4a8a      	ldr	r2, [pc, #552]	@ (80046bc <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8004492:	4293      	cmp	r3, r2
 8004494:	f040 810a 	bne.w	80046ac <HAL_TIM_PeriodElapsedCallback+0x22c>
//				ZGX45RGG_400RPM_Constant.U_max,
//				-ZGX45RGG_400RPM_Constant.U_max);

//		MDXX_set_range(&prismatic_motor, 2000, pris_cmd_ux);
//
		if (pristrajectoryActive && !prisEva.isFinised) {
 8004498:	4b89      	ldr	r3, [pc, #548]	@ (80046c0 <HAL_TIM_PeriodElapsedCallback+0x240>)
 800449a:	781b      	ldrb	r3, [r3, #0]
 800449c:	2b00      	cmp	r3, #0
 800449e:	f000 80e3 	beq.w	8004668 <HAL_TIM_PeriodElapsedCallback+0x1e8>
 80044a2:	4b88      	ldr	r3, [pc, #544]	@ (80046c4 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80044a4:	7c1b      	ldrb	r3, [r3, #16]
 80044a6:	f083 0301 	eor.w	r3, r3, #1
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	f000 80db 	beq.w	8004668 <HAL_TIM_PeriodElapsedCallback+0x1e8>
			Trapezoidal_Evaluated(&prisGen, &prisEva, pris_initial_p, pris_target_p,
 80044b2:	4b85      	ldr	r3, [pc, #532]	@ (80046c8 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80044b4:	ed93 8a00 	vldr	s16, [r3]
 80044b8:	4b84      	ldr	r3, [pc, #528]	@ (80046cc <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80044ba:	edd3 8a00 	vldr	s17, [r3]
					ZGX45RGG_400RPM_Constant.sd_max,
 80044be:	4b84      	ldr	r3, [pc, #528]	@ (80046d0 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80044c0:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
			Trapezoidal_Evaluated(&prisGen, &prisEva, pris_initial_p, pris_target_p,
 80044c4:	4610      	mov	r0, r2
 80044c6:	4619      	mov	r1, r3
 80044c8:	f7fc fabc 	bl	8000a44 <__aeabi_d2f>
 80044cc:	4606      	mov	r6, r0
					ZGX45RGG_400RPM_Constant.sdd_max);
 80044ce:	4b80      	ldr	r3, [pc, #512]	@ (80046d0 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80044d0:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
			Trapezoidal_Evaluated(&prisGen, &prisEva, pris_initial_p, pris_target_p,
 80044d4:	4610      	mov	r0, r2
 80044d6:	4619      	mov	r1, r3
 80044d8:	f7fc fab4 	bl	8000a44 <__aeabi_d2f>
 80044dc:	4603      	mov	r3, r0
 80044de:	ee01 3a90 	vmov	s3, r3
 80044e2:	ee01 6a10 	vmov	s2, r6
 80044e6:	eef0 0a68 	vmov.f32	s1, s17
 80044ea:	eeb0 0a48 	vmov.f32	s0, s16
 80044ee:	4975      	ldr	r1, [pc, #468]	@ (80046c4 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80044f0:	4878      	ldr	r0, [pc, #480]	@ (80046d4 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80044f2:	f7ff f957 	bl	80037a4 <Trapezoidal_Evaluated>

			prismatic_pos = prisEva.setposition;
 80044f6:	4b73      	ldr	r3, [pc, #460]	@ (80046c4 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a77      	ldr	r2, [pc, #476]	@ (80046d8 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80044fc:	6013      	str	r3, [r2, #0]
			prismatic_vel = prisEva.setvelocity;
 80044fe:	4b71      	ldr	r3, [pc, #452]	@ (80046c4 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	4a76      	ldr	r2, [pc, #472]	@ (80046dc <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8004504:	6013      	str	r3, [r2, #0]

			QEI_get_diff_count(&prismatic_encoder);
 8004506:	4876      	ldr	r0, [pc, #472]	@ (80046e0 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8004508:	f7fe fe7a 	bl	8003200 <QEI_get_diff_count>
			QEI_compute_data(&prismatic_encoder);
 800450c:	4874      	ldr	r0, [pc, #464]	@ (80046e0 <HAL_TIM_PeriodElapsedCallback+0x260>)
 800450e:	f7fe ff63 	bl	80033d8 <QEI_compute_data>

			pris_vin = mapf(pris_cmd_ux, -65535.0, 65535.0, -12.0, 12.0);
 8004512:	4b74      	ldr	r3, [pc, #464]	@ (80046e4 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8004514:	edd3 7a00 	vldr	s15, [r3]
 8004518:	eeb2 2a08 	vmov.f32	s4, #40	@ 0x41400000  12.0
 800451c:	eefa 1a08 	vmov.f32	s3, #168	@ 0xc1400000 -12.0
 8004520:	ed9f 1a71 	vldr	s2, [pc, #452]	@ 80046e8 <HAL_TIM_PeriodElapsedCallback+0x268>
 8004524:	eddf 0a71 	vldr	s1, [pc, #452]	@ 80046ec <HAL_TIM_PeriodElapsedCallback+0x26c>
 8004528:	eeb0 0a67 	vmov.f32	s0, s15
 800452c:	f7fd f8d4 	bl	80016d8 <mapf>
 8004530:	eef0 7a40 	vmov.f32	s15, s0
 8004534:	4b6e      	ldr	r3, [pc, #440]	@ (80046f0 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8004536:	edc3 7a00 	vstr	s15, [r3]

			pris_kal_filt = MotorKalman_Estimate(&motor_filter, pris_vin,
 800453a:	4b6d      	ldr	r3, [pc, #436]	@ (80046f0 <HAL_TIM_PeriodElapsedCallback+0x270>)
 800453c:	edd3 7a00 	vldr	s15, [r3]
 8004540:	4b67      	ldr	r3, [pc, #412]	@ (80046e0 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8004542:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8004546:	eef0 0a47 	vmov.f32	s1, s14
 800454a:	eeb0 0a67 	vmov.f32	s0, s15
 800454e:	4869      	ldr	r0, [pc, #420]	@ (80046f4 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8004550:	f7fe f890 	bl	8002674 <MotorKalman_Estimate>
 8004554:	eeb0 7a40 	vmov.f32	s14, s0
							prismatic_encoder.rads)
							* Disturbance_Constant.prismatic_pulley_radius * 1000;
 8004558:	4b67      	ldr	r3, [pc, #412]	@ (80046f8 <HAL_TIM_PeriodElapsedCallback+0x278>)
 800455a:	edd3 7a04 	vldr	s15, [r3, #16]
 800455e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004562:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 80046fc <HAL_TIM_PeriodElapsedCallback+0x27c>
 8004566:	ee67 7a87 	vmul.f32	s15, s15, s14
			pris_kal_filt = MotorKalman_Estimate(&motor_filter, pris_vin,
 800456a:	4b65      	ldr	r3, [pc, #404]	@ (8004700 <HAL_TIM_PeriodElapsedCallback+0x280>)
 800456c:	edc3 7a00 	vstr	s15, [r3]

			if (isnan(pris_kal_filt)) {
 8004570:	4b63      	ldr	r3, [pc, #396]	@ (8004700 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8004572:	edd3 7a00 	vldr	s15, [r3]
 8004576:	eef4 7a67 	vcmp.f32	s15, s15
 800457a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800457e:	d703      	bvc.n	8004588 <HAL_TIM_PeriodElapsedCallback+0x108>
						pris_kal_filt = 0.0f;
 8004580:	4b5f      	ldr	r3, [pc, #380]	@ (8004700 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8004582:	f04f 0200 	mov.w	r2, #0
 8004586:	601a      	str	r2, [r3, #0]
					}

			pris_pos_error = prismatic_pos - prismatic_encoder.mm;
 8004588:	4b53      	ldr	r3, [pc, #332]	@ (80046d8 <HAL_TIM_PeriodElapsedCallback+0x258>)
 800458a:	ed93 7a00 	vldr	s14, [r3]
 800458e:	4b54      	ldr	r3, [pc, #336]	@ (80046e0 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8004590:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8004594:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004598:	4b5a      	ldr	r3, [pc, #360]	@ (8004704 <HAL_TIM_PeriodElapsedCallback+0x284>)
 800459a:	edc3 7a00 	vstr	s15, [r3]

			pris_cmd_vx = PWM_Satuation(
 800459e:	4b59      	ldr	r3, [pc, #356]	@ (8004704 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80045a0:	edd3 7a00 	vldr	s15, [r3]
 80045a4:	eeb0 0a67 	vmov.f32	s0, s15
 80045a8:	4857      	ldr	r0, [pc, #348]	@ (8004708 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80045aa:	f7fc fda4 	bl	80010f6 <PID_CONTROLLER_Compute>
 80045ae:	eeb0 8a40 	vmov.f32	s16, s0
					PID_CONTROLLER_Compute(&prismatic_position_pid,
							pris_pos_error), ZGX45RGG_400RPM_Constant.sd_max,
 80045b2:	4b47      	ldr	r3, [pc, #284]	@ (80046d0 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80045b4:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
			pris_cmd_vx = PWM_Satuation(
 80045b8:	4610      	mov	r0, r2
 80045ba:	4619      	mov	r1, r3
 80045bc:	f7fc f9fa 	bl	80009b4 <__aeabi_d2iz>
 80045c0:	4606      	mov	r6, r0
					-ZGX45RGG_400RPM_Constant.sd_max);
 80045c2:	4b43      	ldr	r3, [pc, #268]	@ (80046d0 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80045c4:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 80045c8:	4690      	mov	r8, r2
 80045ca:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
			pris_cmd_vx = PWM_Satuation(
 80045ce:	4640      	mov	r0, r8
 80045d0:	4649      	mov	r1, r9
 80045d2:	f7fc f9ef 	bl	80009b4 <__aeabi_d2iz>
 80045d6:	4603      	mov	r3, r0
 80045d8:	4619      	mov	r1, r3
 80045da:	4630      	mov	r0, r6
 80045dc:	eeb0 0a48 	vmov.f32	s0, s16
 80045e0:	f7fc fd30 	bl	8001044 <PWM_Satuation>
 80045e4:	ee07 0a90 	vmov	s15, r0
 80045e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80045ec:	4b47      	ldr	r3, [pc, #284]	@ (800470c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80045ee:	edc3 7a00 	vstr	s15, [r3]

			pris_vel_error = pris_cmd_vx + prismatic_vel - pris_kal_filt;
 80045f2:	4b46      	ldr	r3, [pc, #280]	@ (800470c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80045f4:	ed93 7a00 	vldr	s14, [r3]
 80045f8:	4b38      	ldr	r3, [pc, #224]	@ (80046dc <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80045fa:	edd3 7a00 	vldr	s15, [r3]
 80045fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004602:	4b3f      	ldr	r3, [pc, #252]	@ (8004700 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8004604:	edd3 7a00 	vldr	s15, [r3]
 8004608:	ee77 7a67 	vsub.f32	s15, s14, s15
 800460c:	4b40      	ldr	r3, [pc, #256]	@ (8004710 <HAL_TIM_PeriodElapsedCallback+0x290>)
 800460e:	edc3 7a00 	vstr	s15, [r3]

			pris_cmd_ux = PWM_Satuation(
 8004612:	4b3f      	ldr	r3, [pc, #252]	@ (8004710 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8004614:	edd3 7a00 	vldr	s15, [r3]
 8004618:	eeb0 0a67 	vmov.f32	s0, s15
 800461c:	483d      	ldr	r0, [pc, #244]	@ (8004714 <HAL_TIM_PeriodElapsedCallback+0x294>)
 800461e:	f7fc fd6a 	bl	80010f6 <PID_CONTROLLER_Compute>
 8004622:	eeb0 8a40 	vmov.f32	s16, s0
					PID_CONTROLLER_Compute(&prismatic_velocity_pid,
							pris_vel_error), ZGX45RGG_400RPM_Constant.U_max, -ZGX45RGG_400RPM_Constant.U_max);
 8004626:	4b2a      	ldr	r3, [pc, #168]	@ (80046d0 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8004628:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
			pris_cmd_ux = PWM_Satuation(
 800462c:	4610      	mov	r0, r2
 800462e:	4619      	mov	r1, r3
 8004630:	f7fc f9c0 	bl	80009b4 <__aeabi_d2iz>
 8004634:	4606      	mov	r6, r0
							pris_vel_error), ZGX45RGG_400RPM_Constant.U_max, -ZGX45RGG_400RPM_Constant.U_max);
 8004636:	4b26      	ldr	r3, [pc, #152]	@ (80046d0 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8004638:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800463c:	4614      	mov	r4, r2
 800463e:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
			pris_cmd_ux = PWM_Satuation(
 8004642:	4620      	mov	r0, r4
 8004644:	4629      	mov	r1, r5
 8004646:	f7fc f9b5 	bl	80009b4 <__aeabi_d2iz>
 800464a:	4603      	mov	r3, r0
 800464c:	4619      	mov	r1, r3
 800464e:	4630      	mov	r0, r6
 8004650:	eeb0 0a48 	vmov.f32	s0, s16
 8004654:	f7fc fcf6 	bl	8001044 <PWM_Satuation>
 8004658:	ee07 0a90 	vmov	s15, r0
 800465c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004660:	4b20      	ldr	r3, [pc, #128]	@ (80046e4 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8004662:	edc3 7a00 	vstr	s15, [r3]
 8004666:	e017      	b.n	8004698 <HAL_TIM_PeriodElapsedCallback+0x218>
		} else {
			pristrajectoryActive = false;
 8004668:	4b15      	ldr	r3, [pc, #84]	@ (80046c0 <HAL_TIM_PeriodElapsedCallback+0x240>)
 800466a:	2200      	movs	r2, #0
 800466c:	701a      	strb	r2, [r3, #0]
			pris_cmd_ux = 0;
 800466e:	4b1d      	ldr	r3, [pc, #116]	@ (80046e4 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8004670:	f04f 0200 	mov.w	r2, #0
 8004674:	601a      	str	r2, [r3, #0]
			pris_vin = 0;
 8004676:	4b1e      	ldr	r3, [pc, #120]	@ (80046f0 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8004678:	f04f 0200 	mov.w	r2, #0
 800467c:	601a      	str	r2, [r3, #0]
			MotorKalman_Estimate(&motor_filter, pris_vin, prismatic_encoder.rads);
 800467e:	4b1c      	ldr	r3, [pc, #112]	@ (80046f0 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8004680:	edd3 7a00 	vldr	s15, [r3]
 8004684:	4b16      	ldr	r3, [pc, #88]	@ (80046e0 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8004686:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 800468a:	eef0 0a47 	vmov.f32	s1, s14
 800468e:	eeb0 0a67 	vmov.f32	s0, s15
 8004692:	4818      	ldr	r0, [pc, #96]	@ (80046f4 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8004694:	f7fd ffee 	bl	8002674 <MotorKalman_Estimate>
		}

		MDXX_set_range(&prismatic_motor, 2000, pris_cmd_ux);
 8004698:	4b12      	ldr	r3, [pc, #72]	@ (80046e4 <HAL_TIM_PeriodElapsedCallback+0x264>)
 800469a:	edd3 7a00 	vldr	s15, [r3]
 800469e:	eef0 0a67 	vmov.f32	s1, s15
 80046a2:	ed9f 0a1d 	vldr	s0, [pc, #116]	@ 8004718 <HAL_TIM_PeriodElapsedCallback+0x298>
 80046a6:	481d      	ldr	r0, [pc, #116]	@ (800471c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80046a8:	f7fc fddc 	bl	8001264 <MDXX_set_range>
	}
}
 80046ac:	bf00      	nop
 80046ae:	370c      	adds	r7, #12
 80046b0:	46bd      	mov	sp, r7
 80046b2:	ecbd 8b02 	vpop	{d8}
 80046b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80046ba:	bf00      	nop
 80046bc:	20001a18 	.word	0x20001a18
 80046c0:	200002e8 	.word	0x200002e8
 80046c4:	200002d4 	.word	0x200002d4
 80046c8:	200002ec 	.word	0x200002ec
 80046cc:	200002f0 	.word	0x200002f0
 80046d0:	20000060 	.word	0x20000060
 80046d4:	200002c0 	.word	0x200002c0
 80046d8:	200002f4 	.word	0x200002f4
 80046dc:	200002f8 	.word	0x200002f8
 80046e0:	2000071c 	.word	0x2000071c
 80046e4:	2000030c 	.word	0x2000030c
 80046e8:	477fff00 	.word	0x477fff00
 80046ec:	c77fff00 	.word	0xc77fff00
 80046f0:	20000308 	.word	0x20000308
 80046f4:	20000314 	.word	0x20000314
 80046f8:	200000c0 	.word	0x200000c0
 80046fc:	447a0000 	.word	0x447a0000
 8004700:	20000304 	.word	0x20000304
 8004704:	200002fc 	.word	0x200002fc
 8004708:	200007d4 	.word	0x200007d4
 800470c:	20000310 	.word	0x20000310
 8004710:	20000300 	.word	0x20000300
 8004714:	200007f0 	.word	0x200007f0
 8004718:	44fa0000 	.word	0x44fa0000
 800471c:	20000684 	.word	0x20000684

08004720 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004720:	b480      	push	{r7}
 8004722:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004724:	b672      	cpsid	i
}
 8004726:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8004728:	bf00      	nop
 800472a:	e7fd      	b.n	8004728 <Error_Handler+0x8>

0800472c <plotter_begin>:
float prismatic_current = 0.0f;
float revolute_current = 0.0f;

int prox, emer, up_photo, low_photo, up_lim, low_lim, b1, b2, b3, b4;

void plotter_begin() {
 800472c:	b5b0      	push	{r4, r5, r7, lr}
 800472e:	ed2d 8b02 	vpush	{d8}
 8004732:	b082      	sub	sp, #8
 8004734:	af02      	add	r7, sp, #8
	SIGNAL_init(&sine_sg_PWM, SIGNAL_SINE);
 8004736:	2100      	movs	r1, #0
 8004738:	48ca      	ldr	r0, [pc, #808]	@ (8004a64 <plotter_begin+0x338>)
 800473a:	f000 fbc1 	bl	8004ec0 <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_PWM, SINE_AMPLITUDE, SINE_FREQUENCY, SINE_PHASE,
 800473e:	eddf 2aca 	vldr	s5, [pc, #808]	@ 8004a68 <plotter_begin+0x33c>
 8004742:	ed9f 2aca 	vldr	s4, [pc, #808]	@ 8004a6c <plotter_begin+0x340>
 8004746:	eddf 1aca 	vldr	s3, [pc, #808]	@ 8004a70 <plotter_begin+0x344>
 800474a:	ed9f 1ac9 	vldr	s2, [pc, #804]	@ 8004a70 <plotter_begin+0x344>
 800474e:	eddf 0ac9 	vldr	s1, [pc, #804]	@ 8004a74 <plotter_begin+0x348>
 8004752:	ed9f 0ac5 	vldr	s0, [pc, #788]	@ 8004a68 <plotter_begin+0x33c>
 8004756:	48c3      	ldr	r0, [pc, #780]	@ (8004a64 <plotter_begin+0x338>)
 8004758:	f000 fc10 	bl	8004f7c <SIGNAL_config_sine>
	SINE_OFFSET, SINE_MIN_SETPOINT, SINE_MAX_SETPOINT);

	SIGNAL_init(&square_sg_PWM, SIGNAL_SQUARE);
 800475c:	2102      	movs	r1, #2
 800475e:	48c6      	ldr	r0, [pc, #792]	@ (8004a78 <plotter_begin+0x34c>)
 8004760:	f000 fbae 	bl	8004ec0 <SIGNAL_init>
	SIGNAL_config_square(&square_sg_PWM, SQUARE_AMPLITUDE, SQUARE_FREQUENCY,
 8004764:	ed9f 3ac0 	vldr	s6, [pc, #768]	@ 8004a68 <plotter_begin+0x33c>
 8004768:	eddf 2ac0 	vldr	s5, [pc, #768]	@ 8004a6c <plotter_begin+0x340>
 800476c:	ed9f 2ac0 	vldr	s4, [pc, #768]	@ 8004a70 <plotter_begin+0x344>
 8004770:	eddf 1abf 	vldr	s3, [pc, #764]	@ 8004a70 <plotter_begin+0x344>
 8004774:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8004778:	eddf 0abe 	vldr	s1, [pc, #760]	@ 8004a74 <plotter_begin+0x348>
 800477c:	ed9f 0aba 	vldr	s0, [pc, #744]	@ 8004a68 <plotter_begin+0x33c>
 8004780:	48bd      	ldr	r0, [pc, #756]	@ (8004a78 <plotter_begin+0x34c>)
 8004782:	f000 fc26 	bl	8004fd2 <SIGNAL_config_square>
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
	SQUARE_MIN_SETPOINT, SQUARE_MAX_SETPOINT);

	SIGNAL_init(&sine_sg_cascade, SIGNAL_SINE);
 8004786:	2100      	movs	r1, #0
 8004788:	48bc      	ldr	r0, [pc, #752]	@ (8004a7c <plotter_begin+0x350>)
 800478a:	f000 fb99 	bl	8004ec0 <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_cascade, SINE_AMPLITUDE_CASCADE, SINE_FREQUENCY,
 800478e:	eef3 2a09 	vmov.f32	s5, #57	@ 0x41c80000  25.0
 8004792:	eebb 2a09 	vmov.f32	s4, #185	@ 0xc1c80000 -25.0
 8004796:	eddf 1ab6 	vldr	s3, [pc, #728]	@ 8004a70 <plotter_begin+0x344>
 800479a:	ed9f 1ab5 	vldr	s2, [pc, #724]	@ 8004a70 <plotter_begin+0x344>
 800479e:	eddf 0ab5 	vldr	s1, [pc, #724]	@ 8004a74 <plotter_begin+0x348>
 80047a2:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 80047a6:	48b5      	ldr	r0, [pc, #724]	@ (8004a7c <plotter_begin+0x350>)
 80047a8:	f000 fbe8 	bl	8004f7c <SIGNAL_config_sine>
	SINE_PHASE,
	SINE_OFFSET, SINE_MIN_SETPOINT_CASCADE, SINE_MAX_SETPOINT_CASCADE);

	SIGNAL_init(&square_sg_cascade, SIGNAL_SQUARE);
 80047ac:	2102      	movs	r1, #2
 80047ae:	48b4      	ldr	r0, [pc, #720]	@ (8004a80 <plotter_begin+0x354>)
 80047b0:	f000 fb86 	bl	8004ec0 <SIGNAL_init>
	SIGNAL_config_square(&square_sg_cascade, SQUARE_AMPLITUDE_CASCADE,
 80047b4:	eeb3 3a09 	vmov.f32	s6, #57	@ 0x41c80000  25.0
 80047b8:	eefb 2a09 	vmov.f32	s5, #185	@ 0xc1c80000 -25.0
 80047bc:	ed9f 2aac 	vldr	s4, [pc, #688]	@ 8004a70 <plotter_begin+0x344>
 80047c0:	eddf 1aab 	vldr	s3, [pc, #684]	@ 8004a70 <plotter_begin+0x344>
 80047c4:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 80047c8:	eddf 0aaa 	vldr	s1, [pc, #680]	@ 8004a74 <plotter_begin+0x348>
 80047cc:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 80047d0:	48ab      	ldr	r0, [pc, #684]	@ (8004a80 <plotter_begin+0x354>)
 80047d2:	f000 fbfe 	bl	8004fd2 <SIGNAL_config_square>
	SQUARE_FREQUENCY,
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
	SQUARE_MIN_SETPOINT_CASCADE, SQUARE_MAX_SETPOINT_CASCADE);

	SIGNAL_init(&sine_sg_prismatic, SIGNAL_SINE);
 80047d6:	2100      	movs	r1, #0
 80047d8:	48aa      	ldr	r0, [pc, #680]	@ (8004a84 <plotter_begin+0x358>)
 80047da:	f000 fb71 	bl	8004ec0 <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 80047de:	4baa      	ldr	r3, [pc, #680]	@ (8004a88 <plotter_begin+0x35c>)
 80047e0:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80047e4:	4610      	mov	r0, r2
 80047e6:	4619      	mov	r1, r3
 80047e8:	f7fc f92c 	bl	8000a44 <__aeabi_d2f>
 80047ec:	4604      	mov	r4, r0
	SINE_FREQUENCY, SINE_PHASE,
	SINE_OFFSET, -ZGX45RGG_400RPM_Constant.qd_max,
 80047ee:	4ba6      	ldr	r3, [pc, #664]	@ (8004a88 <plotter_begin+0x35c>)
 80047f0:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80047f4:	4610      	mov	r0, r2
 80047f6:	4619      	mov	r1, r3
 80047f8:	f7fc f924 	bl	8000a44 <__aeabi_d2f>
 80047fc:	4603      	mov	r3, r0
	SIGNAL_config_sine(&sine_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 80047fe:	ee07 3a90 	vmov	s15, r3
 8004802:	eeb1 8a67 	vneg.f32	s16, s15
			ZGX45RGG_400RPM_Constant.qd_max);
 8004806:	4ba0      	ldr	r3, [pc, #640]	@ (8004a88 <plotter_begin+0x35c>)
 8004808:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_sine(&sine_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 800480c:	4610      	mov	r0, r2
 800480e:	4619      	mov	r1, r3
 8004810:	f7fc f918 	bl	8000a44 <__aeabi_d2f>
 8004814:	4603      	mov	r3, r0
 8004816:	ee02 3a90 	vmov	s5, r3
 800481a:	eeb0 2a48 	vmov.f32	s4, s16
 800481e:	eddf 1a94 	vldr	s3, [pc, #592]	@ 8004a70 <plotter_begin+0x344>
 8004822:	ed9f 1a93 	vldr	s2, [pc, #588]	@ 8004a70 <plotter_begin+0x344>
 8004826:	eddf 0a93 	vldr	s1, [pc, #588]	@ 8004a74 <plotter_begin+0x348>
 800482a:	ee00 4a10 	vmov	s0, r4
 800482e:	4895      	ldr	r0, [pc, #596]	@ (8004a84 <plotter_begin+0x358>)
 8004830:	f000 fba4 	bl	8004f7c <SIGNAL_config_sine>

	SIGNAL_init(&square_sg_prismatic, SIGNAL_SQUARE);
 8004834:	2102      	movs	r1, #2
 8004836:	4895      	ldr	r0, [pc, #596]	@ (8004a8c <plotter_begin+0x360>)
 8004838:	f000 fb42 	bl	8004ec0 <SIGNAL_init>
	SIGNAL_config_square(&square_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 800483c:	4b92      	ldr	r3, [pc, #584]	@ (8004a88 <plotter_begin+0x35c>)
 800483e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8004842:	4610      	mov	r0, r2
 8004844:	4619      	mov	r1, r3
 8004846:	f7fc f8fd 	bl	8000a44 <__aeabi_d2f>
 800484a:	4604      	mov	r4, r0
	SQUARE_FREQUENCY,
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
			-ZGX45RGG_400RPM_Constant.qd_max, ZGX45RGG_400RPM_Constant.qd_max);
 800484c:	4b8e      	ldr	r3, [pc, #568]	@ (8004a88 <plotter_begin+0x35c>)
 800484e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8004852:	4610      	mov	r0, r2
 8004854:	4619      	mov	r1, r3
 8004856:	f7fc f8f5 	bl	8000a44 <__aeabi_d2f>
 800485a:	4603      	mov	r3, r0
	SIGNAL_config_square(&square_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 800485c:	ee07 3a90 	vmov	s15, r3
 8004860:	eeb1 8a67 	vneg.f32	s16, s15
			-ZGX45RGG_400RPM_Constant.qd_max, ZGX45RGG_400RPM_Constant.qd_max);
 8004864:	4b88      	ldr	r3, [pc, #544]	@ (8004a88 <plotter_begin+0x35c>)
 8004866:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_square(&square_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 800486a:	4610      	mov	r0, r2
 800486c:	4619      	mov	r1, r3
 800486e:	f7fc f8e9 	bl	8000a44 <__aeabi_d2f>
 8004872:	4603      	mov	r3, r0
 8004874:	ee03 3a10 	vmov	s6, r3
 8004878:	eef0 2a48 	vmov.f32	s5, s16
 800487c:	ed9f 2a7c 	vldr	s4, [pc, #496]	@ 8004a70 <plotter_begin+0x344>
 8004880:	eddf 1a7b 	vldr	s3, [pc, #492]	@ 8004a70 <plotter_begin+0x344>
 8004884:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8004888:	eddf 0a7a 	vldr	s1, [pc, #488]	@ 8004a74 <plotter_begin+0x348>
 800488c:	ee00 4a10 	vmov	s0, r4
 8004890:	487e      	ldr	r0, [pc, #504]	@ (8004a8c <plotter_begin+0x360>)
 8004892:	f000 fb9e 	bl	8004fd2 <SIGNAL_config_square>

	SIGNAL_init(&sine_sg_revolute, SIGNAL_SINE);
 8004896:	2100      	movs	r1, #0
 8004898:	487d      	ldr	r0, [pc, #500]	@ (8004a90 <plotter_begin+0x364>)
 800489a:	f000 fb11 	bl	8004ec0 <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 800489e:	4b7d      	ldr	r3, [pc, #500]	@ (8004a94 <plotter_begin+0x368>)
 80048a0:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80048a4:	4610      	mov	r0, r2
 80048a6:	4619      	mov	r1, r3
 80048a8:	f7fc f8cc 	bl	8000a44 <__aeabi_d2f>
 80048ac:	4604      	mov	r4, r0
	SINE_FREQUENCY, SINE_PHASE,
	SINE_OFFSET, -ZGX45RGG_150RPM_Constant.qd_max,
 80048ae:	4b79      	ldr	r3, [pc, #484]	@ (8004a94 <plotter_begin+0x368>)
 80048b0:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80048b4:	4610      	mov	r0, r2
 80048b6:	4619      	mov	r1, r3
 80048b8:	f7fc f8c4 	bl	8000a44 <__aeabi_d2f>
 80048bc:	4603      	mov	r3, r0
	SIGNAL_config_sine(&sine_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 80048be:	ee07 3a90 	vmov	s15, r3
 80048c2:	eeb1 8a67 	vneg.f32	s16, s15
			ZGX45RGG_150RPM_Constant.qd_max);
 80048c6:	4b73      	ldr	r3, [pc, #460]	@ (8004a94 <plotter_begin+0x368>)
 80048c8:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_sine(&sine_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 80048cc:	4610      	mov	r0, r2
 80048ce:	4619      	mov	r1, r3
 80048d0:	f7fc f8b8 	bl	8000a44 <__aeabi_d2f>
 80048d4:	4603      	mov	r3, r0
 80048d6:	ee02 3a90 	vmov	s5, r3
 80048da:	eeb0 2a48 	vmov.f32	s4, s16
 80048de:	eddf 1a64 	vldr	s3, [pc, #400]	@ 8004a70 <plotter_begin+0x344>
 80048e2:	ed9f 1a63 	vldr	s2, [pc, #396]	@ 8004a70 <plotter_begin+0x344>
 80048e6:	eddf 0a63 	vldr	s1, [pc, #396]	@ 8004a74 <plotter_begin+0x348>
 80048ea:	ee00 4a10 	vmov	s0, r4
 80048ee:	4868      	ldr	r0, [pc, #416]	@ (8004a90 <plotter_begin+0x364>)
 80048f0:	f000 fb44 	bl	8004f7c <SIGNAL_config_sine>

	SIGNAL_init(&square_sg_revolute, SIGNAL_SQUARE);
 80048f4:	2102      	movs	r1, #2
 80048f6:	4868      	ldr	r0, [pc, #416]	@ (8004a98 <plotter_begin+0x36c>)
 80048f8:	f000 fae2 	bl	8004ec0 <SIGNAL_init>
	SIGNAL_config_square(&square_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 80048fc:	4b65      	ldr	r3, [pc, #404]	@ (8004a94 <plotter_begin+0x368>)
 80048fe:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8004902:	4610      	mov	r0, r2
 8004904:	4619      	mov	r1, r3
 8004906:	f7fc f89d 	bl	8000a44 <__aeabi_d2f>
 800490a:	4604      	mov	r4, r0
	SQUARE_FREQUENCY,
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
			-ZGX45RGG_150RPM_Constant.qd_max, ZGX45RGG_150RPM_Constant.qd_max);
 800490c:	4b61      	ldr	r3, [pc, #388]	@ (8004a94 <plotter_begin+0x368>)
 800490e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8004912:	4610      	mov	r0, r2
 8004914:	4619      	mov	r1, r3
 8004916:	f7fc f895 	bl	8000a44 <__aeabi_d2f>
 800491a:	4603      	mov	r3, r0
	SIGNAL_config_square(&square_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 800491c:	ee07 3a90 	vmov	s15, r3
 8004920:	eeb1 8a67 	vneg.f32	s16, s15
			-ZGX45RGG_150RPM_Constant.qd_max, ZGX45RGG_150RPM_Constant.qd_max);
 8004924:	4b5b      	ldr	r3, [pc, #364]	@ (8004a94 <plotter_begin+0x368>)
 8004926:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_square(&square_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 800492a:	4610      	mov	r0, r2
 800492c:	4619      	mov	r1, r3
 800492e:	f7fc f889 	bl	8000a44 <__aeabi_d2f>
 8004932:	4603      	mov	r3, r0
 8004934:	ee03 3a10 	vmov	s6, r3
 8004938:	eef0 2a48 	vmov.f32	s5, s16
 800493c:	ed9f 2a4c 	vldr	s4, [pc, #304]	@ 8004a70 <plotter_begin+0x344>
 8004940:	eddf 1a4b 	vldr	s3, [pc, #300]	@ 8004a70 <plotter_begin+0x344>
 8004944:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8004948:	eddf 0a4a 	vldr	s1, [pc, #296]	@ 8004a74 <plotter_begin+0x348>
 800494c:	ee00 4a10 	vmov	s0, r4
 8004950:	4851      	ldr	r0, [pc, #324]	@ (8004a98 <plotter_begin+0x36c>)
 8004952:	f000 fb3e 	bl	8004fd2 <SIGNAL_config_square>

	ZGX45RGG_400RPM_Constant.sd_max = ZGX45RGG_400RPM_Constant.qd_max
 8004956:	4b4c      	ldr	r3, [pc, #304]	@ (8004a88 <plotter_begin+0x35c>)
 8004958:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
			* Disturbance_Constant.prismatic_pulley_radius * 1000;
 800495c:	4b4f      	ldr	r3, [pc, #316]	@ (8004a9c <plotter_begin+0x370>)
 800495e:	691b      	ldr	r3, [r3, #16]
 8004960:	4618      	mov	r0, r3
 8004962:	f7fb fdbd 	bl	80004e0 <__aeabi_f2d>
 8004966:	4602      	mov	r2, r0
 8004968:	460b      	mov	r3, r1
 800496a:	4620      	mov	r0, r4
 800496c:	4629      	mov	r1, r5
 800496e:	f7fb fe0f 	bl	8000590 <__aeabi_dmul>
 8004972:	4602      	mov	r2, r0
 8004974:	460b      	mov	r3, r1
 8004976:	4610      	mov	r0, r2
 8004978:	4619      	mov	r1, r3
 800497a:	f04f 0200 	mov.w	r2, #0
 800497e:	4b48      	ldr	r3, [pc, #288]	@ (8004aa0 <plotter_begin+0x374>)
 8004980:	f7fb fe06 	bl	8000590 <__aeabi_dmul>
 8004984:	4602      	mov	r2, r0
 8004986:	460b      	mov	r3, r1
	ZGX45RGG_400RPM_Constant.sd_max = ZGX45RGG_400RPM_Constant.qd_max
 8004988:	493f      	ldr	r1, [pc, #252]	@ (8004a88 <plotter_begin+0x35c>)
 800498a:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
	ZGX45RGG_400RPM_Constant.sdd_max = ZGX45RGG_400RPM_Constant.sd_max * 0.5;
 800498e:	4b3e      	ldr	r3, [pc, #248]	@ (8004a88 <plotter_begin+0x35c>)
 8004990:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8004994:	f04f 0200 	mov.w	r2, #0
 8004998:	4b42      	ldr	r3, [pc, #264]	@ (8004aa4 <plotter_begin+0x378>)
 800499a:	f7fb fdf9 	bl	8000590 <__aeabi_dmul>
 800499e:	4602      	mov	r2, r0
 80049a0:	460b      	mov	r3, r1
 80049a2:	4939      	ldr	r1, [pc, #228]	@ (8004a88 <plotter_begin+0x35c>)
 80049a4:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58

	QEI_init(&prismatic_encoder, ENC_TIM1, ENC_PPR, ENC_FREQ, MOTOR1_RATIO,
			Disturbance_Constant.prismatic_pulley_radius * 2.0 * 1000.0);
 80049a8:	4b3c      	ldr	r3, [pc, #240]	@ (8004a9c <plotter_begin+0x370>)
 80049aa:	691b      	ldr	r3, [r3, #16]
 80049ac:	4618      	mov	r0, r3
 80049ae:	f7fb fd97 	bl	80004e0 <__aeabi_f2d>
 80049b2:	4602      	mov	r2, r0
 80049b4:	460b      	mov	r3, r1
 80049b6:	f7fb fc35 	bl	8000224 <__adddf3>
 80049ba:	4602      	mov	r2, r0
 80049bc:	460b      	mov	r3, r1
 80049be:	4610      	mov	r0, r2
 80049c0:	4619      	mov	r1, r3
 80049c2:	f04f 0200 	mov.w	r2, #0
 80049c6:	4b36      	ldr	r3, [pc, #216]	@ (8004aa0 <plotter_begin+0x374>)
 80049c8:	f7fb fde2 	bl	8000590 <__aeabi_dmul>
 80049cc:	4602      	mov	r2, r0
 80049ce:	460b      	mov	r3, r1
	QEI_init(&prismatic_encoder, ENC_TIM1, ENC_PPR, ENC_FREQ, MOTOR1_RATIO,
 80049d0:	4610      	mov	r0, r2
 80049d2:	4619      	mov	r1, r3
 80049d4:	f7fc f836 	bl	8000a44 <__aeabi_d2f>
 80049d8:	4603      	mov	r3, r0
 80049da:	ee00 3a90 	vmov	s1, r3
 80049de:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80049e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80049e6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80049ea:	492f      	ldr	r1, [pc, #188]	@ (8004aa8 <plotter_begin+0x37c>)
 80049ec:	482f      	ldr	r0, [pc, #188]	@ (8004aac <plotter_begin+0x380>)
 80049ee:	f7fe fb95 	bl	800311c <QEI_init>
	QEI_init(&revolute_encoder, ENC_TIM2, ENC_PPR, ENC_FREQ, MOTOR2_RATIO,
 80049f2:	eddf 0a1f 	vldr	s1, [pc, #124]	@ 8004a70 <plotter_begin+0x344>
 80049f6:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80049fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80049fe:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004a02:	492b      	ldr	r1, [pc, #172]	@ (8004ab0 <plotter_begin+0x384>)
 8004a04:	482b      	ldr	r0, [pc, #172]	@ (8004ab4 <plotter_begin+0x388>)
 8004a06:	f7fe fb89 	bl	800311c <QEI_init>
	MOTOR2_PULLEY_DIAMETER);

	MDXX_GPIO_init(&prismatic_motor, MOTOR1_TIM, MOTOR1_TIM_CH, MOTOR1_GPIOx,
 8004a0a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004a0e:	9300      	str	r3, [sp, #0]
 8004a10:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004a14:	2204      	movs	r2, #4
 8004a16:	4928      	ldr	r1, [pc, #160]	@ (8004ab8 <plotter_begin+0x38c>)
 8004a18:	4828      	ldr	r0, [pc, #160]	@ (8004abc <plotter_begin+0x390>)
 8004a1a:	f7fc fbfe 	bl	800121a <MDXX_GPIO_init>
	MOTOR1_GPIO_Pin);
	MDXX_GPIO_init(&revolute_motor, MOTOR2_TIM, MOTOR2_TIM_CH, MOTOR2_GPIOx,
 8004a1e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004a22:	9300      	str	r3, [sp, #0]
 8004a24:	4b26      	ldr	r3, [pc, #152]	@ (8004ac0 <plotter_begin+0x394>)
 8004a26:	2200      	movs	r2, #0
 8004a28:	4923      	ldr	r1, [pc, #140]	@ (8004ab8 <plotter_begin+0x38c>)
 8004a2a:	4826      	ldr	r0, [pc, #152]	@ (8004ac4 <plotter_begin+0x398>)
 8004a2c:	f7fc fbf5 	bl	800121a <MDXX_GPIO_init>
	MOTOR2_GPIO_Pin);

	PWM_init(&servo, SERVO_TIM, SERVO_TIM_CH);
 8004a30:	220c      	movs	r2, #12
 8004a32:	4925      	ldr	r1, [pc, #148]	@ (8004ac8 <plotter_begin+0x39c>)
 8004a34:	4825      	ldr	r0, [pc, #148]	@ (8004acc <plotter_begin+0x3a0>)
 8004a36:	f7fe f943 	bl	8002cc0 <PWM_init>

	MDXX_set_range(&prismatic_motor, 2000, 0);
 8004a3a:	eddf 0a0d 	vldr	s1, [pc, #52]	@ 8004a70 <plotter_begin+0x344>
 8004a3e:	ed9f 0a24 	vldr	s0, [pc, #144]	@ 8004ad0 <plotter_begin+0x3a4>
 8004a42:	481e      	ldr	r0, [pc, #120]	@ (8004abc <plotter_begin+0x390>)
 8004a44:	f7fc fc0e 	bl	8001264 <MDXX_set_range>
	MDXX_set_range(&revolute_motor, 2000, 0);
 8004a48:	eddf 0a09 	vldr	s1, [pc, #36]	@ 8004a70 <plotter_begin+0x344>
 8004a4c:	ed9f 0a20 	vldr	s0, [pc, #128]	@ 8004ad0 <plotter_begin+0x3a4>
 8004a50:	481c      	ldr	r0, [pc, #112]	@ (8004ac4 <plotter_begin+0x398>)
 8004a52:	f7fc fc07 	bl	8001264 <MDXX_set_range>
	plotter_pen_up();
 8004a56:	f000 fa23 	bl	8004ea0 <plotter_pen_up>

	PID_CONTROLLER_Init(&prismatic_position_pid, 200, 1e-10, 100,
			ZGX45RGG_400RPM_Constant.sd_max);
 8004a5a:	4b0b      	ldr	r3, [pc, #44]	@ (8004a88 <plotter_begin+0x35c>)
 8004a5c:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8004a60:	e03e      	b.n	8004ae0 <plotter_begin+0x3b4>
 8004a62:	bf00      	nop
 8004a64:	20000898 	.word	0x20000898
 8004a68:	477fff00 	.word	0x477fff00
 8004a6c:	c77fff00 	.word	0xc77fff00
 8004a70:	00000000 	.word	0x00000000
 8004a74:	3dcccccd 	.word	0x3dcccccd
 8004a78:	200008dc 	.word	0x200008dc
 8004a7c:	20000920 	.word	0x20000920
 8004a80:	20000964 	.word	0x20000964
 8004a84:	200009a8 	.word	0x200009a8
 8004a88:	20000060 	.word	0x20000060
 8004a8c:	200009ec 	.word	0x200009ec
 8004a90:	20000a30 	.word	0x20000a30
 8004a94:	20000000 	.word	0x20000000
 8004a98:	20000a74 	.word	0x20000a74
 8004a9c:	200000c0 	.word	0x200000c0
 8004aa0:	408f4000 	.word	0x408f4000
 8004aa4:	3fe00000 	.word	0x3fe00000
 8004aa8:	20001ae4 	.word	0x20001ae4
 8004aac:	2000071c 	.word	0x2000071c
 8004ab0:	20001bb0 	.word	0x20001bb0
 8004ab4:	20000778 	.word	0x20000778
 8004ab8:	20001d48 	.word	0x20001d48
 8004abc:	20000684 	.word	0x20000684
 8004ac0:	48000800 	.word	0x48000800
 8004ac4:	200006d0 	.word	0x200006d0
 8004ac8:	2000194c 	.word	0x2000194c
 8004acc:	2000085c 	.word	0x2000085c
 8004ad0:	44fa0000 	.word	0x44fa0000
 8004ad4:	42c80000 	.word	0x42c80000
 8004ad8:	2edbe6ff 	.word	0x2edbe6ff
 8004adc:	43480000 	.word	0x43480000
	PID_CONTROLLER_Init(&prismatic_position_pid, 200, 1e-10, 100,
 8004ae0:	4610      	mov	r0, r2
 8004ae2:	4619      	mov	r1, r3
 8004ae4:	f7fb ffae 	bl	8000a44 <__aeabi_d2f>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	ee01 3a90 	vmov	s3, r3
 8004aee:	ed1f 1a07 	vldr	s2, [pc, #-28]	@ 8004ad4 <plotter_begin+0x3a8>
 8004af2:	ed5f 0a07 	vldr	s1, [pc, #-28]	@ 8004ad8 <plotter_begin+0x3ac>
 8004af6:	ed1f 0a07 	vldr	s0, [pc, #-28]	@ 8004adc <plotter_begin+0x3b0>
 8004afa:	4853      	ldr	r0, [pc, #332]	@ (8004c48 <plotter_begin+0x51c>)
 8004afc:	f7fc fad1 	bl	80010a2 <PID_CONTROLLER_Init>
	PID_CONTROLLER_Init(&prismatic_velocity_pid, 120, 1, 0,
			ZGX45RGG_400RPM_Constant.U_max);
 8004b00:	4b52      	ldr	r3, [pc, #328]	@ (8004c4c <plotter_begin+0x520>)
 8004b02:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	PID_CONTROLLER_Init(&prismatic_velocity_pid, 120, 1, 0,
 8004b06:	4610      	mov	r0, r2
 8004b08:	4619      	mov	r1, r3
 8004b0a:	f7fb ff9b 	bl	8000a44 <__aeabi_d2f>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	ee01 3a90 	vmov	s3, r3
 8004b14:	ed9f 1a4e 	vldr	s2, [pc, #312]	@ 8004c50 <plotter_begin+0x524>
 8004b18:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8004b1c:	ed9f 0a4d 	vldr	s0, [pc, #308]	@ 8004c54 <plotter_begin+0x528>
 8004b20:	484d      	ldr	r0, [pc, #308]	@ (8004c58 <plotter_begin+0x52c>)
 8004b22:	f7fc fabe 	bl	80010a2 <PID_CONTROLLER_Init>

	PID_CONTROLLER_Init(&revolute_position_pid, 25, 1e-9, 0,
			ZGX45RGG_150RPM_Constant.qd_max);
 8004b26:	4b4d      	ldr	r3, [pc, #308]	@ (8004c5c <plotter_begin+0x530>)
 8004b28:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	PID_CONTROLLER_Init(&revolute_position_pid, 25, 1e-9, 0,
 8004b2c:	4610      	mov	r0, r2
 8004b2e:	4619      	mov	r1, r3
 8004b30:	f7fb ff88 	bl	8000a44 <__aeabi_d2f>
 8004b34:	4603      	mov	r3, r0
 8004b36:	ee01 3a90 	vmov	s3, r3
 8004b3a:	ed9f 1a45 	vldr	s2, [pc, #276]	@ 8004c50 <plotter_begin+0x524>
 8004b3e:	eddf 0a48 	vldr	s1, [pc, #288]	@ 8004c60 <plotter_begin+0x534>
 8004b42:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8004b46:	4847      	ldr	r0, [pc, #284]	@ (8004c64 <plotter_begin+0x538>)
 8004b48:	f7fc faab 	bl	80010a2 <PID_CONTROLLER_Init>
	PID_CONTROLLER_Init(&revolute_velocity_pid, 2000, 80, 0,
			ZGX45RGG_150RPM_Constant.U_max);
 8004b4c:	4b43      	ldr	r3, [pc, #268]	@ (8004c5c <plotter_begin+0x530>)
 8004b4e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	PID_CONTROLLER_Init(&revolute_velocity_pid, 2000, 80, 0,
 8004b52:	4610      	mov	r0, r2
 8004b54:	4619      	mov	r1, r3
 8004b56:	f7fb ff75 	bl	8000a44 <__aeabi_d2f>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	ee01 3a90 	vmov	s3, r3
 8004b60:	ed9f 1a3b 	vldr	s2, [pc, #236]	@ 8004c50 <plotter_begin+0x524>
 8004b64:	eddf 0a40 	vldr	s1, [pc, #256]	@ 8004c68 <plotter_begin+0x53c>
 8004b68:	ed9f 0a40 	vldr	s0, [pc, #256]	@ 8004c6c <plotter_begin+0x540>
 8004b6c:	4840      	ldr	r0, [pc, #256]	@ (8004c70 <plotter_begin+0x544>)
 8004b6e:	f7fc fa98 	bl	80010a2 <PID_CONTROLLER_Init>

	REVOLUTE_MOTOR_FFD_Init(&revolute_motor_ffd, &ZGX45RGG_150RPM_Constant);
 8004b72:	493a      	ldr	r1, [pc, #232]	@ (8004c5c <plotter_begin+0x530>)
 8004b74:	483f      	ldr	r0, [pc, #252]	@ (8004c74 <plotter_begin+0x548>)
 8004b76:	f7fc fc4f 	bl	8001418 <REVOLUTE_MOTOR_FFD_Init>
	PRISMATIC_MOTOR_FFD_Init(&prismatic_motor_ffd, &ZGX45RGG_400RPM_Constant);
 8004b7a:	4934      	ldr	r1, [pc, #208]	@ (8004c4c <plotter_begin+0x520>)
 8004b7c:	483e      	ldr	r0, [pc, #248]	@ (8004c78 <plotter_begin+0x54c>)
 8004b7e:	f7fc fc6b 	bl	8001458 <PRISMATIC_MOTOR_FFD_Init>

	REVOLUTE_MOTOR_DFD_Init(&revolute_motor_dfd, &ZGX45RGG_150RPM_Constant,
 8004b82:	4a3e      	ldr	r2, [pc, #248]	@ (8004c7c <plotter_begin+0x550>)
 8004b84:	4935      	ldr	r1, [pc, #212]	@ (8004c5c <plotter_begin+0x530>)
 8004b86:	483e      	ldr	r0, [pc, #248]	@ (8004c80 <plotter_begin+0x554>)
 8004b88:	f7fc fc54 	bl	8001434 <REVOLUTE_MOTOR_DFD_Init>
			&Disturbance_Constant);
	PRISMATIC_MOTOR_DFD_Init(&prismatic_motor_dfd, &ZGX45RGG_400RPM_Constant,
 8004b8c:	4a3b      	ldr	r2, [pc, #236]	@ (8004c7c <plotter_begin+0x550>)
 8004b8e:	492f      	ldr	r1, [pc, #188]	@ (8004c4c <plotter_begin+0x520>)
 8004b90:	483c      	ldr	r0, [pc, #240]	@ (8004c84 <plotter_begin+0x558>)
 8004b92:	f7fc fc6f 	bl	8001474 <PRISMATIC_MOTOR_DFD_Init>
			&Disturbance_Constant);

	ADC_DMA_Init(&joystick, &hadc1, joystick_buffer, ADC_BUFFER_SIZE,
 8004b96:	2302      	movs	r3, #2
 8004b98:	9300      	str	r3, [sp, #0]
 8004b9a:	eddf 0a3b 	vldr	s1, [pc, #236]	@ 8004c88 <plotter_begin+0x55c>
 8004b9e:	ed9f 0a3b 	vldr	s0, [pc, #236]	@ 8004c8c <plotter_begin+0x560>
 8004ba2:	2364      	movs	r3, #100	@ 0x64
 8004ba4:	4a3a      	ldr	r2, [pc, #232]	@ (8004c90 <plotter_begin+0x564>)
 8004ba6:	493b      	ldr	r1, [pc, #236]	@ (8004c94 <plotter_begin+0x568>)
 8004ba8:	483b      	ldr	r0, [pc, #236]	@ (8004c98 <plotter_begin+0x56c>)
 8004baa:	f7fc f931 	bl	8000e10 <ADC_DMA_Init>
	ADC_CHANNELS, ADC_VREF, ADC_RESOLUTION);
	ADC_DMA_SetCenterPoint(&joystick, ADC_CENTERPOINT, ADC_ERROR);
 8004bae:	2105      	movs	r1, #5
 8004bb0:	ed9f 0a3a 	vldr	s0, [pc, #232]	@ 8004c9c <plotter_begin+0x570>
 8004bb4:	4838      	ldr	r0, [pc, #224]	@ (8004c98 <plotter_begin+0x56c>)
 8004bb6:	f7fc f9dd 	bl	8000f74 <ADC_DMA_SetCenterPoint>
	ADC_DMA_Start(&joystick);
 8004bba:	4837      	ldr	r0, [pc, #220]	@ (8004c98 <plotter_begin+0x56c>)
 8004bbc:	f7fc f980 	bl	8000ec0 <ADC_DMA_Start>

	FIR_init(&prismatic_lp_current, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 8004bc0:	eddf 0a37 	vldr	s1, [pc, #220]	@ 8004ca0 <plotter_begin+0x574>
 8004bc4:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8004bc8:	211f      	movs	r1, #31
 8004bca:	4836      	ldr	r0, [pc, #216]	@ (8004ca4 <plotter_begin+0x578>)
 8004bcc:	f7fc fc64 	bl	8001498 <FIR_init>
	FIR_init(&prismatic_lp_velocity, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 8004bd0:	eddf 0a33 	vldr	s1, [pc, #204]	@ 8004ca0 <plotter_begin+0x574>
 8004bd4:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8004bd8:	211f      	movs	r1, #31
 8004bda:	4833      	ldr	r0, [pc, #204]	@ (8004ca8 <plotter_begin+0x57c>)
 8004bdc:	f7fc fc5c 	bl	8001498 <FIR_init>
	FIR_init(&revolute_lp_current, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 8004be0:	eddf 0a2f 	vldr	s1, [pc, #188]	@ 8004ca0 <plotter_begin+0x574>
 8004be4:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8004be8:	211f      	movs	r1, #31
 8004bea:	4830      	ldr	r0, [pc, #192]	@ (8004cac <plotter_begin+0x580>)
 8004bec:	f7fc fc54 	bl	8001498 <FIR_init>
	FIR_init(&revolute_lp_velocity, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 8004bf0:	eddf 0a2b 	vldr	s1, [pc, #172]	@ 8004ca0 <plotter_begin+0x574>
 8004bf4:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8004bf8:	211f      	movs	r1, #31
 8004bfa:	482d      	ldr	r0, [pc, #180]	@ (8004cb0 <plotter_begin+0x584>)
 8004bfc:	f7fc fc4c 	bl	8001498 <FIR_init>

	Kalman_Start(&revolute_kalman, revolute_A, revolute_B, REVOLUTE_Q,
 8004c00:	eddf 0a2c 	vldr	s1, [pc, #176]	@ 8004cb4 <plotter_begin+0x588>
 8004c04:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8004c08:	4a2b      	ldr	r2, [pc, #172]	@ (8004cb8 <plotter_begin+0x58c>)
 8004c0a:	492c      	ldr	r1, [pc, #176]	@ (8004cbc <plotter_begin+0x590>)
 8004c0c:	482c      	ldr	r0, [pc, #176]	@ (8004cc0 <plotter_begin+0x594>)
 8004c0e:	f7ff f92f 	bl	8003e70 <Kalman_Start>
	REVOLUTE_R);
	Kalman_Start(&prismatic_kalman, prismatic_A, prismatic_B, PRISMATIC_Q,
 8004c12:	eddf 0a28 	vldr	s1, [pc, #160]	@ 8004cb4 <plotter_begin+0x588>
 8004c16:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8004c1a:	4a2a      	ldr	r2, [pc, #168]	@ (8004cc4 <plotter_begin+0x598>)
 8004c1c:	492a      	ldr	r1, [pc, #168]	@ (8004cc8 <plotter_begin+0x59c>)
 8004c1e:	482b      	ldr	r0, [pc, #172]	@ (8004ccc <plotter_begin+0x5a0>)
 8004c20:	f7ff f926 	bl	8003e70 <Kalman_Start>
	PRISMATIC_R);

	Modbus_init(&ModBus, MODBUS_USART, MODBUS_DATA_SENDING_PERIOD_TIM,
 8004c24:	23c8      	movs	r3, #200	@ 0xc8
 8004c26:	9301      	str	r3, [sp, #4]
 8004c28:	2315      	movs	r3, #21
 8004c2a:	9300      	str	r3, [sp, #0]
 8004c2c:	4b28      	ldr	r3, [pc, #160]	@ (8004cd0 <plotter_begin+0x5a4>)
 8004c2e:	4a29      	ldr	r2, [pc, #164]	@ (8004cd4 <plotter_begin+0x5a8>)
 8004c30:	4929      	ldr	r1, [pc, #164]	@ (8004cd8 <plotter_begin+0x5ac>)
 8004c32:	482a      	ldr	r0, [pc, #168]	@ (8004cdc <plotter_begin+0x5b0>)
 8004c34:	f7fc fdc8 	bl	80017c8 <Modbus_init>
			registerFrame, MODBUS_SLAVE_ADDRESS, MODBUS_REGISTER_FRAME_SIZE);

	HAL_TIM_Base_Start_IT(CONTROL_TIM);
 8004c38:	4829      	ldr	r0, [pc, #164]	@ (8004ce0 <plotter_begin+0x5b4>)
 8004c3a:	f004 fd63 	bl	8009704 <HAL_TIM_Base_Start_IT>
}
 8004c3e:	bf00      	nop
 8004c40:	46bd      	mov	sp, r7
 8004c42:	ecbd 8b02 	vpop	{d8}
 8004c46:	bdb0      	pop	{r4, r5, r7, pc}
 8004c48:	200007d4 	.word	0x200007d4
 8004c4c:	20000060 	.word	0x20000060
 8004c50:	00000000 	.word	0x00000000
 8004c54:	42f00000 	.word	0x42f00000
 8004c58:	200007f0 	.word	0x200007f0
 8004c5c:	20000000 	.word	0x20000000
 8004c60:	3089705f 	.word	0x3089705f
 8004c64:	2000080c 	.word	0x2000080c
 8004c68:	42a00000 	.word	0x42a00000
 8004c6c:	44fa0000 	.word	0x44fa0000
 8004c70:	20000828 	.word	0x20000828
 8004c74:	20000850 	.word	0x20000850
 8004c78:	20000844 	.word	0x20000844
 8004c7c:	200000c0 	.word	0x200000c0
 8004c80:	20000854 	.word	0x20000854
 8004c84:	20000848 	.word	0x20000848
 8004c88:	457ff000 	.word	0x457ff000
 8004c8c:	40533333 	.word	0x40533333
 8004c90:	200011e8 	.word	0x200011e8
 8004c94:	200001f4 	.word	0x200001f4
 8004c98:	20000874 	.word	0x20000874
 8004c9c:	45000000 	.word	0x45000000
 8004ca0:	447a0000 	.word	0x447a0000
 8004ca4:	20000ac4 	.word	0x20000ac4
 8004ca8:	20000ab8 	.word	0x20000ab8
 8004cac:	20000adc 	.word	0x20000adc
 8004cb0:	20000ad0 	.word	0x20000ad0
 8004cb4:	3d4ccccd 	.word	0x3d4ccccd
 8004cb8:	20000168 	.word	0x20000168
 8004cbc:	20000128 	.word	0x20000128
 8004cc0:	20000e68 	.word	0x20000e68
 8004cc4:	20000118 	.word	0x20000118
 8004cc8:	200000d8 	.word	0x200000d8
 8004ccc:	20000ae8 	.word	0x20000ae8
 8004cd0:	20001788 	.word	0x20001788
 8004cd4:	20001e14 	.word	0x20001e14
 8004cd8:	20001fac 	.word	0x20001fac
 8004cdc:	200012b0 	.word	0x200012b0
 8004ce0:	20001a18 	.word	0x20001a18

08004ce4 <plotter_update_sensors>:
void plotter_reset() {
	QEI_reset(&prismatic_encoder);
	QEI_reset(&revolute_encoder);
}

void plotter_update_sensors() {
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	af00      	add	r7, sp, #0
	joystick_x = ADC_DMA_GetJoystickValue(&joystick, JOYSTICK_X_CHANNEL, -50, 50);
 8004ce8:	eddf 0a59 	vldr	s1, [pc, #356]	@ 8004e50 <plotter_update_sensors+0x16c>
 8004cec:	ed9f 0a59 	vldr	s0, [pc, #356]	@ 8004e54 <plotter_update_sensors+0x170>
 8004cf0:	2106      	movs	r1, #6
 8004cf2:	4859      	ldr	r0, [pc, #356]	@ (8004e58 <plotter_update_sensors+0x174>)
 8004cf4:	f7fc f968 	bl	8000fc8 <ADC_DMA_GetJoystickValue>
 8004cf8:	eef0 7a40 	vmov.f32	s15, s0
 8004cfc:	4b57      	ldr	r3, [pc, #348]	@ (8004e5c <plotter_update_sensors+0x178>)
 8004cfe:	edc3 7a00 	vstr	s15, [r3]
	joystick_y = ADC_DMA_GetJoystickValue(&joystick, JOYSTICK_Y_CHANNEL, -50, 50);
 8004d02:	eddf 0a53 	vldr	s1, [pc, #332]	@ 8004e50 <plotter_update_sensors+0x16c>
 8004d06:	ed9f 0a53 	vldr	s0, [pc, #332]	@ 8004e54 <plotter_update_sensors+0x170>
 8004d0a:	2107      	movs	r1, #7
 8004d0c:	4852      	ldr	r0, [pc, #328]	@ (8004e58 <plotter_update_sensors+0x174>)
 8004d0e:	f7fc f95b 	bl	8000fc8 <ADC_DMA_GetJoystickValue>
 8004d12:	eef0 7a40 	vmov.f32	s15, s0
 8004d16:	4b52      	ldr	r3, [pc, #328]	@ (8004e60 <plotter_update_sensors+0x17c>)
 8004d18:	edc3 7a00 	vstr	s15, [r3]

	b1 = !HAL_GPIO_ReadPin(J1_GPIO_Port, J1_Pin);
 8004d1c:	2180      	movs	r1, #128	@ 0x80
 8004d1e:	4851      	ldr	r0, [pc, #324]	@ (8004e64 <plotter_update_sensors+0x180>)
 8004d20:	f003 fba4 	bl	800846c <HAL_GPIO_ReadPin>
 8004d24:	4603      	mov	r3, r0
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	bf0c      	ite	eq
 8004d2a:	2301      	moveq	r3, #1
 8004d2c:	2300      	movne	r3, #0
 8004d2e:	b2db      	uxtb	r3, r3
 8004d30:	461a      	mov	r2, r3
 8004d32:	4b4d      	ldr	r3, [pc, #308]	@ (8004e68 <plotter_update_sensors+0x184>)
 8004d34:	601a      	str	r2, [r3, #0]
	b2 = !HAL_GPIO_ReadPin(J2_GPIO_Port, J2_Pin);
 8004d36:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004d3a:	484c      	ldr	r0, [pc, #304]	@ (8004e6c <plotter_update_sensors+0x188>)
 8004d3c:	f003 fb96 	bl	800846c <HAL_GPIO_ReadPin>
 8004d40:	4603      	mov	r3, r0
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	bf0c      	ite	eq
 8004d46:	2301      	moveq	r3, #1
 8004d48:	2300      	movne	r3, #0
 8004d4a:	b2db      	uxtb	r3, r3
 8004d4c:	461a      	mov	r2, r3
 8004d4e:	4b48      	ldr	r3, [pc, #288]	@ (8004e70 <plotter_update_sensors+0x18c>)
 8004d50:	601a      	str	r2, [r3, #0]
	b3 = !HAL_GPIO_ReadPin(J3_GPIO_Port, J3_Pin);
 8004d52:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004d56:	4845      	ldr	r0, [pc, #276]	@ (8004e6c <plotter_update_sensors+0x188>)
 8004d58:	f003 fb88 	bl	800846c <HAL_GPIO_ReadPin>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	bf0c      	ite	eq
 8004d62:	2301      	moveq	r3, #1
 8004d64:	2300      	movne	r3, #0
 8004d66:	b2db      	uxtb	r3, r3
 8004d68:	461a      	mov	r2, r3
 8004d6a:	4b42      	ldr	r3, [pc, #264]	@ (8004e74 <plotter_update_sensors+0x190>)
 8004d6c:	601a      	str	r2, [r3, #0]
	b4 = !HAL_GPIO_ReadPin(J4_GPIO_Port, J4_Pin);
 8004d6e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004d72:	483e      	ldr	r0, [pc, #248]	@ (8004e6c <plotter_update_sensors+0x188>)
 8004d74:	f003 fb7a 	bl	800846c <HAL_GPIO_ReadPin>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	bf0c      	ite	eq
 8004d7e:	2301      	moveq	r3, #1
 8004d80:	2300      	movne	r3, #0
 8004d82:	b2db      	uxtb	r3, r3
 8004d84:	461a      	mov	r2, r3
 8004d86:	4b3c      	ldr	r3, [pc, #240]	@ (8004e78 <plotter_update_sensors+0x194>)
 8004d88:	601a      	str	r2, [r3, #0]

	prox = HAL_GPIO_ReadPin(PROX_GPIO_Port, PROX_Pin);
 8004d8a:	2120      	movs	r1, #32
 8004d8c:	4835      	ldr	r0, [pc, #212]	@ (8004e64 <plotter_update_sensors+0x180>)
 8004d8e:	f003 fb6d 	bl	800846c <HAL_GPIO_ReadPin>
 8004d92:	4603      	mov	r3, r0
 8004d94:	461a      	mov	r2, r3
 8004d96:	4b39      	ldr	r3, [pc, #228]	@ (8004e7c <plotter_update_sensors+0x198>)
 8004d98:	601a      	str	r2, [r3, #0]
	up_photo = HAL_GPIO_ReadPin(UPPER_PHOTO_GPIO_Port, UPPER_PHOTO_Pin);
 8004d9a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004d9e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004da2:	f003 fb63 	bl	800846c <HAL_GPIO_ReadPin>
 8004da6:	4603      	mov	r3, r0
 8004da8:	461a      	mov	r2, r3
 8004daa:	4b35      	ldr	r3, [pc, #212]	@ (8004e80 <plotter_update_sensors+0x19c>)
 8004dac:	601a      	str	r2, [r3, #0]
	low_photo = HAL_GPIO_ReadPin(LOWER_PHOTO_GPIO_Port, LOWER_PHOTO_Pin);
 8004dae:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004db2:	482c      	ldr	r0, [pc, #176]	@ (8004e64 <plotter_update_sensors+0x180>)
 8004db4:	f003 fb5a 	bl	800846c <HAL_GPIO_ReadPin>
 8004db8:	4603      	mov	r3, r0
 8004dba:	461a      	mov	r2, r3
 8004dbc:	4b31      	ldr	r3, [pc, #196]	@ (8004e84 <plotter_update_sensors+0x1a0>)
 8004dbe:	601a      	str	r2, [r3, #0]
	up_lim = HAL_GPIO_ReadPin(UPPER_LIM_GPIO_Port, UPPER_LIM_Pin);
 8004dc0:	2104      	movs	r1, #4
 8004dc2:	4828      	ldr	r0, [pc, #160]	@ (8004e64 <plotter_update_sensors+0x180>)
 8004dc4:	f003 fb52 	bl	800846c <HAL_GPIO_ReadPin>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	461a      	mov	r2, r3
 8004dcc:	4b2e      	ldr	r3, [pc, #184]	@ (8004e88 <plotter_update_sensors+0x1a4>)
 8004dce:	601a      	str	r2, [r3, #0]
	low_lim = HAL_GPIO_ReadPin(LOWER_LIM_GPIO_Port, LOWER_LIM_Pin);
 8004dd0:	2102      	movs	r1, #2
 8004dd2:	4824      	ldr	r0, [pc, #144]	@ (8004e64 <plotter_update_sensors+0x180>)
 8004dd4:	f003 fb4a 	bl	800846c <HAL_GPIO_ReadPin>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	461a      	mov	r2, r3
 8004ddc:	4b2b      	ldr	r3, [pc, #172]	@ (8004e8c <plotter_update_sensors+0x1a8>)
 8004dde:	601a      	str	r2, [r3, #0]

	emer = !HAL_GPIO_ReadPin(EMER_GPIO_Port, EMER_Pin);
 8004de0:	2110      	movs	r1, #16
 8004de2:	4820      	ldr	r0, [pc, #128]	@ (8004e64 <plotter_update_sensors+0x180>)
 8004de4:	f003 fb42 	bl	800846c <HAL_GPIO_ReadPin>
 8004de8:	4603      	mov	r3, r0
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	bf0c      	ite	eq
 8004dee:	2301      	moveq	r3, #1
 8004df0:	2300      	movne	r3, #0
 8004df2:	b2db      	uxtb	r3, r3
 8004df4:	461a      	mov	r2, r3
 8004df6:	4b26      	ldr	r3, [pc, #152]	@ (8004e90 <plotter_update_sensors+0x1ac>)
 8004df8:	601a      	str	r2, [r3, #0]

	if (up_lim) {
 8004dfa:	4b23      	ldr	r3, [pc, #140]	@ (8004e88 <plotter_update_sensors+0x1a4>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d003      	beq.n	8004e0a <plotter_update_sensors+0x126>
		servo_state = PEN_UP;
 8004e02:	4b24      	ldr	r3, [pc, #144]	@ (8004e94 <plotter_update_sensors+0x1b0>)
 8004e04:	2202      	movs	r2, #2
 8004e06:	701a      	strb	r2, [r3, #0]
 8004e08:	e00a      	b.n	8004e20 <plotter_update_sensors+0x13c>
	} else if (low_lim) {
 8004e0a:	4b20      	ldr	r3, [pc, #128]	@ (8004e8c <plotter_update_sensors+0x1a8>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d003      	beq.n	8004e1a <plotter_update_sensors+0x136>
		servo_state = PEN_DOWN;
 8004e12:	4b20      	ldr	r3, [pc, #128]	@ (8004e94 <plotter_update_sensors+0x1b0>)
 8004e14:	2201      	movs	r2, #1
 8004e16:	701a      	strb	r2, [r3, #0]
 8004e18:	e002      	b.n	8004e20 <plotter_update_sensors+0x13c>
	} else {
		servo_state = PEN_IDLE;
 8004e1a:	4b1e      	ldr	r3, [pc, #120]	@ (8004e94 <plotter_update_sensors+0x1b0>)
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	701a      	strb	r2, [r3, #0]
	}

	if (up_photo) {
 8004e20:	4b17      	ldr	r3, [pc, #92]	@ (8004e80 <plotter_update_sensors+0x19c>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d003      	beq.n	8004e30 <plotter_update_sensors+0x14c>
		prismatic_state = PP_AT_TOP_END_POSITION;
 8004e28:	4b1b      	ldr	r3, [pc, #108]	@ (8004e98 <plotter_update_sensors+0x1b4>)
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	701a      	strb	r2, [r3, #0]
 8004e2e:	e006      	b.n	8004e3e <plotter_update_sensors+0x15a>
	} else if (low_photo) {
 8004e30:	4b14      	ldr	r3, [pc, #80]	@ (8004e84 <plotter_update_sensors+0x1a0>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d002      	beq.n	8004e3e <plotter_update_sensors+0x15a>
		prismatic_state = PP_AT_BOTTOM_END_POSITION;
 8004e38:	4b17      	ldr	r3, [pc, #92]	@ (8004e98 <plotter_update_sensors+0x1b4>)
 8004e3a:	2202      	movs	r2, #2
 8004e3c:	701a      	strb	r2, [r3, #0]
	}

	if (prox) {
 8004e3e:	4b0f      	ldr	r3, [pc, #60]	@ (8004e7c <plotter_update_sensors+0x198>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d002      	beq.n	8004e4c <plotter_update_sensors+0x168>
		revolute_state = RP_AT_HOME_POSITION;
 8004e46:	4b15      	ldr	r3, [pc, #84]	@ (8004e9c <plotter_update_sensors+0x1b8>)
 8004e48:	2200      	movs	r2, #0
 8004e4a:	701a      	strb	r2, [r3, #0]
	}

//    prismatic_current = ADC_DMA_ComputeCurrent(&adc_dma, PRISMATIC_CURRENT_CHANNEL, PRISMATIC_CURRENT_OFFSET);
//    revolute_current = ADC_DMA_ComputeCurrent(&adc_dma, REVOLUTE_CURRENT_CHANNEL, REVOLUTE_CURRENT_OFFSET);
}
 8004e4c:	bf00      	nop
 8004e4e:	bd80      	pop	{r7, pc}
 8004e50:	42480000 	.word	0x42480000
 8004e54:	c2480000 	.word	0xc2480000
 8004e58:	20000874 	.word	0x20000874
 8004e5c:	20001918 	.word	0x20001918
 8004e60:	2000191c 	.word	0x2000191c
 8004e64:	48000400 	.word	0x48000400
 8004e68:	20001938 	.word	0x20001938
 8004e6c:	48000800 	.word	0x48000800
 8004e70:	2000193c 	.word	0x2000193c
 8004e74:	20001940 	.word	0x20001940
 8004e78:	20001944 	.word	0x20001944
 8004e7c:	20001920 	.word	0x20001920
 8004e80:	20001928 	.word	0x20001928
 8004e84:	2000192c 	.word	0x2000192c
 8004e88:	20001930 	.word	0x20001930
 8004e8c:	20001934 	.word	0x20001934
 8004e90:	20001924 	.word	0x20001924
 8004e94:	20000682 	.word	0x20000682
 8004e98:	200000d5 	.word	0x200000d5
 8004e9c:	200000d6 	.word	0x200000d6

08004ea0 <plotter_pen_up>:

void plotter_pen_up() {
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	af00      	add	r7, sp, #0
	PWM_write_duty(&servo, 50, 7);
 8004ea4:	eef1 0a0c 	vmov.f32	s1, #28	@ 0x40e00000  7.0
 8004ea8:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 8004eb8 <plotter_pen_up+0x18>
 8004eac:	4803      	ldr	r0, [pc, #12]	@ (8004ebc <plotter_pen_up+0x1c>)
 8004eae:	f7fd ff29 	bl	8002d04 <PWM_write_duty>
}
 8004eb2:	bf00      	nop
 8004eb4:	bd80      	pop	{r7, pc}
 8004eb6:	bf00      	nop
 8004eb8:	42480000 	.word	0x42480000
 8004ebc:	2000085c 	.word	0x2000085c

08004ec0 <SIGNAL_init>:
    if (value > max_setpoint) return max_setpoint;
    return value;
}

// Initialization function
void SIGNAL_init(SignalGenerator* sg, SignalType type) {
 8004ec0:	b480      	push	{r7}
 8004ec2:	b083      	sub	sp, #12
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
 8004ec8:	460b      	mov	r3, r1
 8004eca:	70fb      	strb	r3, [r7, #3]
    // Reset all parameters
    sg->type = type;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	78fa      	ldrb	r2, [r7, #3]
 8004ed0:	701a      	strb	r2, [r3, #0]
    sg->amplitude = 1.0f;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004ed8:	605a      	str	r2, [r3, #4]
    sg->frequency = 1.0f;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004ee0:	609a      	str	r2, [r3, #8]
    sg->phase = 0.0f;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f04f 0200 	mov.w	r2, #0
 8004ee8:	60da      	str	r2, [r3, #12]
    sg->offset = 0.0f;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f04f 0200 	mov.w	r2, #0
 8004ef0:	611a      	str	r2, [r3, #16]
    sg->current_phase = 0.0f;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	f04f 0200 	mov.w	r2, #0
 8004ef8:	635a      	str	r2, [r3, #52]	@ 0x34
    sg->time_elapsed = 0.0f;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f04f 0200 	mov.w	r2, #0
 8004f00:	639a      	str	r2, [r3, #56]	@ 0x38
    sg->min_setpoint = -1.0f;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	4a1b      	ldr	r2, [pc, #108]	@ (8004f74 <SIGNAL_init+0xb4>)
 8004f06:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = 1.0f;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004f0e:	641a      	str	r2, [r3, #64]	@ 0x40

    // Type-specific initializations
    switch (type) {
 8004f10:	78fb      	ldrb	r3, [r7, #3]
 8004f12:	2b03      	cmp	r3, #3
 8004f14:	d828      	bhi.n	8004f68 <SIGNAL_init+0xa8>
 8004f16:	a201      	add	r2, pc, #4	@ (adr r2, 8004f1c <SIGNAL_init+0x5c>)
 8004f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f1c:	08004f67 	.word	0x08004f67
 8004f20:	08004f2d 	.word	0x08004f2d
 8004f24:	08004f4b 	.word	0x08004f4b
 8004f28:	08004f55 	.word	0x08004f55
        case SIGNAL_SINE:
            break;
        case SIGNAL_CHIRP:
            sg->chirp_type = CHIRP_LINEAR;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	751a      	strb	r2, [r3, #20]
            sg->f_start = 1.0f;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004f38:	619a      	str	r2, [r3, #24]
            sg->f_end = 10.0f;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	4a0e      	ldr	r2, [pc, #56]	@ (8004f78 <SIGNAL_init+0xb8>)
 8004f3e:	61da      	str	r2, [r3, #28]
            sg->duration = 1.0f;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004f46:	621a      	str	r2, [r3, #32]
            break;
 8004f48:	e00e      	b.n	8004f68 <SIGNAL_init+0xa8>
        case SIGNAL_SQUARE:
            sg->duty_cycle = 0.5f;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8004f50:	629a      	str	r2, [r3, #40]	@ 0x28
            break;
 8004f52:	e009      	b.n	8004f68 <SIGNAL_init+0xa8>
        case SIGNAL_RAMP:
            sg->ramp_start = 0.0f;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f04f 0200 	mov.w	r2, #0
 8004f5a:	62da      	str	r2, [r3, #44]	@ 0x2c
            sg->ramp_end = 1.0f;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004f62:	631a      	str	r2, [r3, #48]	@ 0x30
            break;
 8004f64:	e000      	b.n	8004f68 <SIGNAL_init+0xa8>
            break;
 8004f66:	bf00      	nop
    }
}
 8004f68:	bf00      	nop
 8004f6a:	370c      	adds	r7, #12
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr
 8004f74:	bf800000 	.word	0xbf800000
 8004f78:	41200000 	.word	0x41200000

08004f7c <SIGNAL_config_sine>:
                        float32_t amplitude,
                        float32_t frequency,
                        float32_t phase,
                        float32_t offset,
                        float32_t min_setpoint,
                        float32_t max_setpoint) {
 8004f7c:	b480      	push	{r7}
 8004f7e:	b089      	sub	sp, #36	@ 0x24
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	61f8      	str	r0, [r7, #28]
 8004f84:	ed87 0a06 	vstr	s0, [r7, #24]
 8004f88:	edc7 0a05 	vstr	s1, [r7, #20]
 8004f8c:	ed87 1a04 	vstr	s2, [r7, #16]
 8004f90:	edc7 1a03 	vstr	s3, [r7, #12]
 8004f94:	ed87 2a02 	vstr	s4, [r7, #8]
 8004f98:	edc7 2a01 	vstr	s5, [r7, #4]
    sg->type = SIGNAL_SINE;
 8004f9c:	69fb      	ldr	r3, [r7, #28]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 8004fa2:	69fb      	ldr	r3, [r7, #28]
 8004fa4:	69ba      	ldr	r2, [r7, #24]
 8004fa6:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 8004fa8:	69fb      	ldr	r3, [r7, #28]
 8004faa:	697a      	ldr	r2, [r7, #20]
 8004fac:	609a      	str	r2, [r3, #8]
    sg->phase = phase;
 8004fae:	69fb      	ldr	r3, [r7, #28]
 8004fb0:	693a      	ldr	r2, [r7, #16]
 8004fb2:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 8004fb4:	69fb      	ldr	r3, [r7, #28]
 8004fb6:	68fa      	ldr	r2, [r7, #12]
 8004fb8:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 8004fba:	69fb      	ldr	r3, [r7, #28]
 8004fbc:	68ba      	ldr	r2, [r7, #8]
 8004fbe:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 8004fc0:	69fb      	ldr	r3, [r7, #28]
 8004fc2:	687a      	ldr	r2, [r7, #4]
 8004fc4:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8004fc6:	bf00      	nop
 8004fc8:	3724      	adds	r7, #36	@ 0x24
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr

08004fd2 <SIGNAL_config_square>:
                          float32_t frequency,
                          float32_t duty_cycle,
                          float32_t phase,
                          float32_t offset,
                          float32_t min_setpoint,
                          float32_t max_setpoint) {
 8004fd2:	b480      	push	{r7}
 8004fd4:	b089      	sub	sp, #36	@ 0x24
 8004fd6:	af00      	add	r7, sp, #0
 8004fd8:	61f8      	str	r0, [r7, #28]
 8004fda:	ed87 0a06 	vstr	s0, [r7, #24]
 8004fde:	edc7 0a05 	vstr	s1, [r7, #20]
 8004fe2:	ed87 1a04 	vstr	s2, [r7, #16]
 8004fe6:	edc7 1a03 	vstr	s3, [r7, #12]
 8004fea:	ed87 2a02 	vstr	s4, [r7, #8]
 8004fee:	edc7 2a01 	vstr	s5, [r7, #4]
 8004ff2:	ed87 3a00 	vstr	s6, [r7]
    sg->type = SIGNAL_SQUARE;
 8004ff6:	69fb      	ldr	r3, [r7, #28]
 8004ff8:	2202      	movs	r2, #2
 8004ffa:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 8004ffc:	69fb      	ldr	r3, [r7, #28]
 8004ffe:	69ba      	ldr	r2, [r7, #24]
 8005000:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 8005002:	69fb      	ldr	r3, [r7, #28]
 8005004:	697a      	ldr	r2, [r7, #20]
 8005006:	609a      	str	r2, [r3, #8]
    sg->duty_cycle = duty_cycle;
 8005008:	69fb      	ldr	r3, [r7, #28]
 800500a:	693a      	ldr	r2, [r7, #16]
 800500c:	629a      	str	r2, [r3, #40]	@ 0x28
    sg->phase = phase;
 800500e:	69fb      	ldr	r3, [r7, #28]
 8005010:	68fa      	ldr	r2, [r7, #12]
 8005012:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 8005014:	69fb      	ldr	r3, [r7, #28]
 8005016:	68ba      	ldr	r2, [r7, #8]
 8005018:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 800501a:	69fb      	ldr	r3, [r7, #28]
 800501c:	687a      	ldr	r2, [r7, #4]
 800501e:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 8005020:	69fb      	ldr	r3, [r7, #28]
 8005022:	683a      	ldr	r2, [r7, #0]
 8005024:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8005026:	bf00      	nop
 8005028:	3724      	adds	r7, #36	@ 0x24
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr
	...

08005034 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b082      	sub	sp, #8
 8005038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800503a:	4b0f      	ldr	r3, [pc, #60]	@ (8005078 <HAL_MspInit+0x44>)
 800503c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800503e:	4a0e      	ldr	r2, [pc, #56]	@ (8005078 <HAL_MspInit+0x44>)
 8005040:	f043 0301 	orr.w	r3, r3, #1
 8005044:	6613      	str	r3, [r2, #96]	@ 0x60
 8005046:	4b0c      	ldr	r3, [pc, #48]	@ (8005078 <HAL_MspInit+0x44>)
 8005048:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800504a:	f003 0301 	and.w	r3, r3, #1
 800504e:	607b      	str	r3, [r7, #4]
 8005050:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005052:	4b09      	ldr	r3, [pc, #36]	@ (8005078 <HAL_MspInit+0x44>)
 8005054:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005056:	4a08      	ldr	r2, [pc, #32]	@ (8005078 <HAL_MspInit+0x44>)
 8005058:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800505c:	6593      	str	r3, [r2, #88]	@ 0x58
 800505e:	4b06      	ldr	r3, [pc, #24]	@ (8005078 <HAL_MspInit+0x44>)
 8005060:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005062:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005066:	603b      	str	r3, [r7, #0]
 8005068:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800506a:	f003 faeb 	bl	8008644 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800506e:	bf00      	nop
 8005070:	3708      	adds	r7, #8
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
 8005076:	bf00      	nop
 8005078:	40021000 	.word	0x40021000

0800507c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800507c:	b480      	push	{r7}
 800507e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005080:	bf00      	nop
 8005082:	e7fd      	b.n	8005080 <NMI_Handler+0x4>

08005084 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005084:	b480      	push	{r7}
 8005086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005088:	bf00      	nop
 800508a:	e7fd      	b.n	8005088 <HardFault_Handler+0x4>

0800508c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800508c:	b480      	push	{r7}
 800508e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005090:	bf00      	nop
 8005092:	e7fd      	b.n	8005090 <MemManage_Handler+0x4>

08005094 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005094:	b480      	push	{r7}
 8005096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005098:	bf00      	nop
 800509a:	e7fd      	b.n	8005098 <BusFault_Handler+0x4>

0800509c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800509c:	b480      	push	{r7}
 800509e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80050a0:	bf00      	nop
 80050a2:	e7fd      	b.n	80050a0 <UsageFault_Handler+0x4>

080050a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80050a4:	b480      	push	{r7}
 80050a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80050a8:	bf00      	nop
 80050aa:	46bd      	mov	sp, r7
 80050ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b0:	4770      	bx	lr

080050b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80050b2:	b480      	push	{r7}
 80050b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80050b6:	bf00      	nop
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr

080050c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80050c0:	b480      	push	{r7}
 80050c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80050c4:	bf00      	nop
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr

080050ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80050ce:	b580      	push	{r7, lr}
 80050d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80050d2:	f000 ff71 	bl	8005fb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80050d6:	bf00      	nop
 80050d8:	bd80      	pop	{r7, pc}
	...

080050dc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80050e0:	4802      	ldr	r0, [pc, #8]	@ (80050ec <DMA1_Channel1_IRQHandler+0x10>)
 80050e2:	f002 fef2 	bl	8007eca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80050e6:	bf00      	nop
 80050e8:	bd80      	pop	{r7, pc}
 80050ea:	bf00      	nop
 80050ec:	20000260 	.word	0x20000260

080050f0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80050f4:	4802      	ldr	r0, [pc, #8]	@ (8005100 <DMA1_Channel2_IRQHandler+0x10>)
 80050f6:	f002 fee8 	bl	8007eca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80050fa:	bf00      	nop
 80050fc:	bd80      	pop	{r7, pc}
 80050fe:	bf00      	nop
 8005100:	20002138 	.word	0x20002138

08005104 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8005108:	4802      	ldr	r0, [pc, #8]	@ (8005114 <DMA1_Channel3_IRQHandler+0x10>)
 800510a:	f002 fede 	bl	8007eca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800510e:	bf00      	nop
 8005110:	bd80      	pop	{r7, pc}
 8005112:	bf00      	nop
 8005114:	20002198 	.word	0x20002198

08005118 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 800511c:	4802      	ldr	r0, [pc, #8]	@ (8005128 <DMA1_Channel4_IRQHandler+0x10>)
 800511e:	f002 fed4 	bl	8007eca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8005122:	bf00      	nop
 8005124:	bd80      	pop	{r7, pc}
 8005126:	bf00      	nop
 8005128:	20002078 	.word	0x20002078

0800512c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8005130:	4802      	ldr	r0, [pc, #8]	@ (800513c <DMA1_Channel5_IRQHandler+0x10>)
 8005132:	f002 feca 	bl	8007eca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8005136:	bf00      	nop
 8005138:	bd80      	pop	{r7, pc}
 800513a:	bf00      	nop
 800513c:	200020d8 	.word	0x200020d8

08005140 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005144:	4803      	ldr	r0, [pc, #12]	@ (8005154 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8005146:	f004 ff03 	bl	8009f50 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 800514a:	4803      	ldr	r0, [pc, #12]	@ (8005158 <TIM1_UP_TIM16_IRQHandler+0x18>)
 800514c:	f004 ff00 	bl	8009f50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8005150:	bf00      	nop
 8005152:	bd80      	pop	{r7, pc}
 8005154:	2000194c 	.word	0x2000194c
 8005158:	20001e14 	.word	0x20001e14

0800515c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005160:	4802      	ldr	r0, [pc, #8]	@ (800516c <TIM2_IRQHandler+0x10>)
 8005162:	f004 fef5 	bl	8009f50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005166:	bf00      	nop
 8005168:	bd80      	pop	{r7, pc}
 800516a:	bf00      	nop
 800516c:	20001a18 	.word	0x20001a18

08005170 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005174:	4802      	ldr	r0, [pc, #8]	@ (8005180 <TIM3_IRQHandler+0x10>)
 8005176:	f004 feeb 	bl	8009f50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800517a:	bf00      	nop
 800517c:	bd80      	pop	{r7, pc}
 800517e:	bf00      	nop
 8005180:	20001ae4 	.word	0x20001ae4

08005184 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8005188:	4802      	ldr	r0, [pc, #8]	@ (8005194 <TIM4_IRQHandler+0x10>)
 800518a:	f004 fee1 	bl	8009f50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800518e:	bf00      	nop
 8005190:	bd80      	pop	{r7, pc}
 8005192:	bf00      	nop
 8005194:	20001bb0 	.word	0x20001bb0

08005198 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800519c:	4802      	ldr	r0, [pc, #8]	@ (80051a8 <USART2_IRQHandler+0x10>)
 800519e:	f006 fc2b 	bl	800b9f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80051a2:	bf00      	nop
 80051a4:	bd80      	pop	{r7, pc}
 80051a6:	bf00      	nop
 80051a8:	20001fac 	.word	0x20001fac

080051ac <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80051b0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80051b4:	f003 f98a 	bl	80084cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80051b8:	bf00      	nop
 80051ba:	bd80      	pop	{r7, pc}

080051bc <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80051c0:	4802      	ldr	r0, [pc, #8]	@ (80051cc <LPUART1_IRQHandler+0x10>)
 80051c2:	f006 fc19 	bl	800b9f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80051c6:	bf00      	nop
 80051c8:	bd80      	pop	{r7, pc}
 80051ca:	bf00      	nop
 80051cc:	20001ee0 	.word	0x20001ee0

080051d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b086      	sub	sp, #24
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80051d8:	4a14      	ldr	r2, [pc, #80]	@ (800522c <_sbrk+0x5c>)
 80051da:	4b15      	ldr	r3, [pc, #84]	@ (8005230 <_sbrk+0x60>)
 80051dc:	1ad3      	subs	r3, r2, r3
 80051de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80051e4:	4b13      	ldr	r3, [pc, #76]	@ (8005234 <_sbrk+0x64>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d102      	bne.n	80051f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80051ec:	4b11      	ldr	r3, [pc, #68]	@ (8005234 <_sbrk+0x64>)
 80051ee:	4a12      	ldr	r2, [pc, #72]	@ (8005238 <_sbrk+0x68>)
 80051f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80051f2:	4b10      	ldr	r3, [pc, #64]	@ (8005234 <_sbrk+0x64>)
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	4413      	add	r3, r2
 80051fa:	693a      	ldr	r2, [r7, #16]
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d207      	bcs.n	8005210 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005200:	f008 fa8c 	bl	800d71c <__errno>
 8005204:	4603      	mov	r3, r0
 8005206:	220c      	movs	r2, #12
 8005208:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800520a:	f04f 33ff 	mov.w	r3, #4294967295
 800520e:	e009      	b.n	8005224 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005210:	4b08      	ldr	r3, [pc, #32]	@ (8005234 <_sbrk+0x64>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005216:	4b07      	ldr	r3, [pc, #28]	@ (8005234 <_sbrk+0x64>)
 8005218:	681a      	ldr	r2, [r3, #0]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	4413      	add	r3, r2
 800521e:	4a05      	ldr	r2, [pc, #20]	@ (8005234 <_sbrk+0x64>)
 8005220:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005222:	68fb      	ldr	r3, [r7, #12]
}
 8005224:	4618      	mov	r0, r3
 8005226:	3718      	adds	r7, #24
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}
 800522c:	20020000 	.word	0x20020000
 8005230:	00000400 	.word	0x00000400
 8005234:	20001948 	.word	0x20001948
 8005238:	20002348 	.word	0x20002348

0800523c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800523c:	b480      	push	{r7}
 800523e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005240:	4b06      	ldr	r3, [pc, #24]	@ (800525c <SystemInit+0x20>)
 8005242:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005246:	4a05      	ldr	r2, [pc, #20]	@ (800525c <SystemInit+0x20>)
 8005248:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800524c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005250:	bf00      	nop
 8005252:	46bd      	mov	sp, r7
 8005254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005258:	4770      	bx	lr
 800525a:	bf00      	nop
 800525c:	e000ed00 	.word	0xe000ed00

08005260 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b098      	sub	sp, #96	@ 0x60
 8005264:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005266:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800526a:	2200      	movs	r2, #0
 800526c:	601a      	str	r2, [r3, #0]
 800526e:	605a      	str	r2, [r3, #4]
 8005270:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005272:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8005276:	2200      	movs	r2, #0
 8005278:	601a      	str	r2, [r3, #0]
 800527a:	605a      	str	r2, [r3, #4]
 800527c:	609a      	str	r2, [r3, #8]
 800527e:	60da      	str	r2, [r3, #12]
 8005280:	611a      	str	r2, [r3, #16]
 8005282:	615a      	str	r2, [r3, #20]
 8005284:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005286:	1d3b      	adds	r3, r7, #4
 8005288:	2234      	movs	r2, #52	@ 0x34
 800528a:	2100      	movs	r1, #0
 800528c:	4618      	mov	r0, r3
 800528e:	f008 fa2d 	bl	800d6ec <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8005292:	4b3b      	ldr	r3, [pc, #236]	@ (8005380 <MX_TIM1_Init+0x120>)
 8005294:	4a3b      	ldr	r2, [pc, #236]	@ (8005384 <MX_TIM1_Init+0x124>)
 8005296:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8005298:	4b39      	ldr	r3, [pc, #228]	@ (8005380 <MX_TIM1_Init+0x120>)
 800529a:	2200      	movs	r2, #0
 800529c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800529e:	4b38      	ldr	r3, [pc, #224]	@ (8005380 <MX_TIM1_Init+0x120>)
 80052a0:	2200      	movs	r2, #0
 80052a2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80052a4:	4b36      	ldr	r3, [pc, #216]	@ (8005380 <MX_TIM1_Init+0x120>)
 80052a6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80052aa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80052ac:	4b34      	ldr	r3, [pc, #208]	@ (8005380 <MX_TIM1_Init+0x120>)
 80052ae:	2200      	movs	r2, #0
 80052b0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80052b2:	4b33      	ldr	r3, [pc, #204]	@ (8005380 <MX_TIM1_Init+0x120>)
 80052b4:	2200      	movs	r2, #0
 80052b6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80052b8:	4b31      	ldr	r3, [pc, #196]	@ (8005380 <MX_TIM1_Init+0x120>)
 80052ba:	2200      	movs	r2, #0
 80052bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80052be:	4830      	ldr	r0, [pc, #192]	@ (8005380 <MX_TIM1_Init+0x120>)
 80052c0:	f004 fa98 	bl	80097f4 <HAL_TIM_PWM_Init>
 80052c4:	4603      	mov	r3, r0
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d001      	beq.n	80052ce <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80052ca:	f7ff fa29 	bl	8004720 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80052ce:	2300      	movs	r3, #0
 80052d0:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80052d2:	2300      	movs	r3, #0
 80052d4:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80052d6:	2300      	movs	r3, #0
 80052d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80052da:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80052de:	4619      	mov	r1, r3
 80052e0:	4827      	ldr	r0, [pc, #156]	@ (8005380 <MX_TIM1_Init+0x120>)
 80052e2:	f006 f8a9 	bl	800b438 <HAL_TIMEx_MasterConfigSynchronization>
 80052e6:	4603      	mov	r3, r0
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d001      	beq.n	80052f0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80052ec:	f7ff fa18 	bl	8004720 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80052f0:	2360      	movs	r3, #96	@ 0x60
 80052f2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80052f4:	2300      	movs	r3, #0
 80052f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80052f8:	2300      	movs	r3, #0
 80052fa:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80052fc:	2300      	movs	r3, #0
 80052fe:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005300:	2300      	movs	r3, #0
 8005302:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005304:	2300      	movs	r3, #0
 8005306:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005308:	2300      	movs	r3, #0
 800530a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800530c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8005310:	220c      	movs	r2, #12
 8005312:	4619      	mov	r1, r3
 8005314:	481a      	ldr	r0, [pc, #104]	@ (8005380 <MX_TIM1_Init+0x120>)
 8005316:	f004 ff95 	bl	800a244 <HAL_TIM_PWM_ConfigChannel>
 800531a:	4603      	mov	r3, r0
 800531c:	2b00      	cmp	r3, #0
 800531e:	d001      	beq.n	8005324 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8005320:	f7ff f9fe 	bl	8004720 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005324:	2300      	movs	r3, #0
 8005326:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005328:	2300      	movs	r3, #0
 800532a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800532c:	2300      	movs	r3, #0
 800532e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005330:	2300      	movs	r3, #0
 8005332:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005334:	2300      	movs	r3, #0
 8005336:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005338:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800533c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800533e:	2300      	movs	r3, #0
 8005340:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8005342:	2300      	movs	r3, #0
 8005344:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8005346:	2300      	movs	r3, #0
 8005348:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800534a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800534e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8005350:	2300      	movs	r3, #0
 8005352:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8005354:	2300      	movs	r3, #0
 8005356:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005358:	2300      	movs	r3, #0
 800535a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800535c:	1d3b      	adds	r3, r7, #4
 800535e:	4619      	mov	r1, r3
 8005360:	4807      	ldr	r0, [pc, #28]	@ (8005380 <MX_TIM1_Init+0x120>)
 8005362:	f006 f8ff 	bl	800b564 <HAL_TIMEx_ConfigBreakDeadTime>
 8005366:	4603      	mov	r3, r0
 8005368:	2b00      	cmp	r3, #0
 800536a:	d001      	beq.n	8005370 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 800536c:	f7ff f9d8 	bl	8004720 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8005370:	4803      	ldr	r0, [pc, #12]	@ (8005380 <MX_TIM1_Init+0x120>)
 8005372:	f000 fb51 	bl	8005a18 <HAL_TIM_MspPostInit>

}
 8005376:	bf00      	nop
 8005378:	3760      	adds	r7, #96	@ 0x60
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}
 800537e:	bf00      	nop
 8005380:	2000194c 	.word	0x2000194c
 8005384:	40012c00 	.word	0x40012c00

08005388 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b088      	sub	sp, #32
 800538c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800538e:	f107 0310 	add.w	r3, r7, #16
 8005392:	2200      	movs	r2, #0
 8005394:	601a      	str	r2, [r3, #0]
 8005396:	605a      	str	r2, [r3, #4]
 8005398:	609a      	str	r2, [r3, #8]
 800539a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800539c:	1d3b      	adds	r3, r7, #4
 800539e:	2200      	movs	r2, #0
 80053a0:	601a      	str	r2, [r3, #0]
 80053a2:	605a      	str	r2, [r3, #4]
 80053a4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80053a6:	4b1e      	ldr	r3, [pc, #120]	@ (8005420 <MX_TIM2_Init+0x98>)
 80053a8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80053ac:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 80053ae:	4b1c      	ldr	r3, [pc, #112]	@ (8005420 <MX_TIM2_Init+0x98>)
 80053b0:	22a9      	movs	r2, #169	@ 0xa9
 80053b2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80053b4:	4b1a      	ldr	r3, [pc, #104]	@ (8005420 <MX_TIM2_Init+0x98>)
 80053b6:	2200      	movs	r2, #0
 80053b8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80053ba:	4b19      	ldr	r3, [pc, #100]	@ (8005420 <MX_TIM2_Init+0x98>)
 80053bc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80053c0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80053c2:	4b17      	ldr	r3, [pc, #92]	@ (8005420 <MX_TIM2_Init+0x98>)
 80053c4:	2200      	movs	r2, #0
 80053c6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80053c8:	4b15      	ldr	r3, [pc, #84]	@ (8005420 <MX_TIM2_Init+0x98>)
 80053ca:	2200      	movs	r2, #0
 80053cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80053ce:	4814      	ldr	r0, [pc, #80]	@ (8005420 <MX_TIM2_Init+0x98>)
 80053d0:	f004 f8c4 	bl	800955c <HAL_TIM_Base_Init>
 80053d4:	4603      	mov	r3, r0
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d001      	beq.n	80053de <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80053da:	f7ff f9a1 	bl	8004720 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80053de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80053e2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80053e4:	f107 0310 	add.w	r3, r7, #16
 80053e8:	4619      	mov	r1, r3
 80053ea:	480d      	ldr	r0, [pc, #52]	@ (8005420 <MX_TIM2_Init+0x98>)
 80053ec:	f005 f83e 	bl	800a46c <HAL_TIM_ConfigClockSource>
 80053f0:	4603      	mov	r3, r0
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d001      	beq.n	80053fa <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80053f6:	f7ff f993 	bl	8004720 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80053fa:	2300      	movs	r3, #0
 80053fc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80053fe:	2300      	movs	r3, #0
 8005400:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005402:	1d3b      	adds	r3, r7, #4
 8005404:	4619      	mov	r1, r3
 8005406:	4806      	ldr	r0, [pc, #24]	@ (8005420 <MX_TIM2_Init+0x98>)
 8005408:	f006 f816 	bl	800b438 <HAL_TIMEx_MasterConfigSynchronization>
 800540c:	4603      	mov	r3, r0
 800540e:	2b00      	cmp	r3, #0
 8005410:	d001      	beq.n	8005416 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8005412:	f7ff f985 	bl	8004720 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8005416:	bf00      	nop
 8005418:	3720      	adds	r7, #32
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}
 800541e:	bf00      	nop
 8005420:	20001a18 	.word	0x20001a18

08005424 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b08c      	sub	sp, #48	@ 0x30
 8005428:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800542a:	f107 030c 	add.w	r3, r7, #12
 800542e:	2224      	movs	r2, #36	@ 0x24
 8005430:	2100      	movs	r1, #0
 8005432:	4618      	mov	r0, r3
 8005434:	f008 f95a 	bl	800d6ec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005438:	463b      	mov	r3, r7
 800543a:	2200      	movs	r2, #0
 800543c:	601a      	str	r2, [r3, #0]
 800543e:	605a      	str	r2, [r3, #4]
 8005440:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005442:	4b21      	ldr	r3, [pc, #132]	@ (80054c8 <MX_TIM3_Init+0xa4>)
 8005444:	4a21      	ldr	r2, [pc, #132]	@ (80054cc <MX_TIM3_Init+0xa8>)
 8005446:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8005448:	4b1f      	ldr	r3, [pc, #124]	@ (80054c8 <MX_TIM3_Init+0xa4>)
 800544a:	2200      	movs	r2, #0
 800544c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800544e:	4b1e      	ldr	r3, [pc, #120]	@ (80054c8 <MX_TIM3_Init+0xa4>)
 8005450:	2200      	movs	r2, #0
 8005452:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8005454:	4b1c      	ldr	r3, [pc, #112]	@ (80054c8 <MX_TIM3_Init+0xa4>)
 8005456:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800545a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800545c:	4b1a      	ldr	r3, [pc, #104]	@ (80054c8 <MX_TIM3_Init+0xa4>)
 800545e:	2200      	movs	r2, #0
 8005460:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005462:	4b19      	ldr	r3, [pc, #100]	@ (80054c8 <MX_TIM3_Init+0xa4>)
 8005464:	2200      	movs	r2, #0
 8005466:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8005468:	2303      	movs	r3, #3
 800546a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800546c:	2300      	movs	r3, #0
 800546e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005470:	2301      	movs	r3, #1
 8005472:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005474:	2300      	movs	r3, #0
 8005476:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8005478:	2300      	movs	r3, #0
 800547a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800547c:	2300      	movs	r3, #0
 800547e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005480:	2301      	movs	r3, #1
 8005482:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005484:	2300      	movs	r3, #0
 8005486:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8005488:	2300      	movs	r3, #0
 800548a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800548c:	f107 030c 	add.w	r3, r7, #12
 8005490:	4619      	mov	r1, r3
 8005492:	480d      	ldr	r0, [pc, #52]	@ (80054c8 <MX_TIM3_Init+0xa4>)
 8005494:	f004 fc1a 	bl	8009ccc <HAL_TIM_Encoder_Init>
 8005498:	4603      	mov	r3, r0
 800549a:	2b00      	cmp	r3, #0
 800549c:	d001      	beq.n	80054a2 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800549e:	f7ff f93f 	bl	8004720 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80054a2:	2300      	movs	r3, #0
 80054a4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80054a6:	2300      	movs	r3, #0
 80054a8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80054aa:	463b      	mov	r3, r7
 80054ac:	4619      	mov	r1, r3
 80054ae:	4806      	ldr	r0, [pc, #24]	@ (80054c8 <MX_TIM3_Init+0xa4>)
 80054b0:	f005 ffc2 	bl	800b438 <HAL_TIMEx_MasterConfigSynchronization>
 80054b4:	4603      	mov	r3, r0
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d001      	beq.n	80054be <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80054ba:	f7ff f931 	bl	8004720 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80054be:	bf00      	nop
 80054c0:	3730      	adds	r7, #48	@ 0x30
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}
 80054c6:	bf00      	nop
 80054c8:	20001ae4 	.word	0x20001ae4
 80054cc:	40000400 	.word	0x40000400

080054d0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b08c      	sub	sp, #48	@ 0x30
 80054d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80054d6:	f107 030c 	add.w	r3, r7, #12
 80054da:	2224      	movs	r2, #36	@ 0x24
 80054dc:	2100      	movs	r1, #0
 80054de:	4618      	mov	r0, r3
 80054e0:	f008 f904 	bl	800d6ec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80054e4:	463b      	mov	r3, r7
 80054e6:	2200      	movs	r2, #0
 80054e8:	601a      	str	r2, [r3, #0]
 80054ea:	605a      	str	r2, [r3, #4]
 80054ec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80054ee:	4b21      	ldr	r3, [pc, #132]	@ (8005574 <MX_TIM4_Init+0xa4>)
 80054f0:	4a21      	ldr	r2, [pc, #132]	@ (8005578 <MX_TIM4_Init+0xa8>)
 80054f2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80054f4:	4b1f      	ldr	r3, [pc, #124]	@ (8005574 <MX_TIM4_Init+0xa4>)
 80054f6:	2200      	movs	r2, #0
 80054f8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80054fa:	4b1e      	ldr	r3, [pc, #120]	@ (8005574 <MX_TIM4_Init+0xa4>)
 80054fc:	2200      	movs	r2, #0
 80054fe:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8005500:	4b1c      	ldr	r3, [pc, #112]	@ (8005574 <MX_TIM4_Init+0xa4>)
 8005502:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005506:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005508:	4b1a      	ldr	r3, [pc, #104]	@ (8005574 <MX_TIM4_Init+0xa4>)
 800550a:	2200      	movs	r2, #0
 800550c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800550e:	4b19      	ldr	r3, [pc, #100]	@ (8005574 <MX_TIM4_Init+0xa4>)
 8005510:	2200      	movs	r2, #0
 8005512:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8005514:	2303      	movs	r3, #3
 8005516:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8005518:	2300      	movs	r3, #0
 800551a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800551c:	2301      	movs	r3, #1
 800551e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005520:	2300      	movs	r3, #0
 8005522:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8005524:	2300      	movs	r3, #0
 8005526:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8005528:	2300      	movs	r3, #0
 800552a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800552c:	2301      	movs	r3, #1
 800552e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005530:	2300      	movs	r3, #0
 8005532:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8005534:	2300      	movs	r3, #0
 8005536:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8005538:	f107 030c 	add.w	r3, r7, #12
 800553c:	4619      	mov	r1, r3
 800553e:	480d      	ldr	r0, [pc, #52]	@ (8005574 <MX_TIM4_Init+0xa4>)
 8005540:	f004 fbc4 	bl	8009ccc <HAL_TIM_Encoder_Init>
 8005544:	4603      	mov	r3, r0
 8005546:	2b00      	cmp	r3, #0
 8005548:	d001      	beq.n	800554e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800554a:	f7ff f8e9 	bl	8004720 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800554e:	2300      	movs	r3, #0
 8005550:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005552:	2300      	movs	r3, #0
 8005554:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005556:	463b      	mov	r3, r7
 8005558:	4619      	mov	r1, r3
 800555a:	4806      	ldr	r0, [pc, #24]	@ (8005574 <MX_TIM4_Init+0xa4>)
 800555c:	f005 ff6c 	bl	800b438 <HAL_TIMEx_MasterConfigSynchronization>
 8005560:	4603      	mov	r3, r0
 8005562:	2b00      	cmp	r3, #0
 8005564:	d001      	beq.n	800556a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8005566:	f7ff f8db 	bl	8004720 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800556a:	bf00      	nop
 800556c:	3730      	adds	r7, #48	@ 0x30
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}
 8005572:	bf00      	nop
 8005574:	20001bb0 	.word	0x20001bb0
 8005578:	40000800 	.word	0x40000800

0800557c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b088      	sub	sp, #32
 8005580:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005582:	f107 0310 	add.w	r3, r7, #16
 8005586:	2200      	movs	r2, #0
 8005588:	601a      	str	r2, [r3, #0]
 800558a:	605a      	str	r2, [r3, #4]
 800558c:	609a      	str	r2, [r3, #8]
 800558e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005590:	1d3b      	adds	r3, r7, #4
 8005592:	2200      	movs	r2, #0
 8005594:	601a      	str	r2, [r3, #0]
 8005596:	605a      	str	r2, [r3, #4]
 8005598:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800559a:	4b1d      	ldr	r3, [pc, #116]	@ (8005610 <MX_TIM5_Init+0x94>)
 800559c:	4a1d      	ldr	r2, [pc, #116]	@ (8005614 <MX_TIM5_Init+0x98>)
 800559e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 80055a0:	4b1b      	ldr	r3, [pc, #108]	@ (8005610 <MX_TIM5_Init+0x94>)
 80055a2:	22a9      	movs	r2, #169	@ 0xa9
 80055a4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80055a6:	4b1a      	ldr	r3, [pc, #104]	@ (8005610 <MX_TIM5_Init+0x94>)
 80055a8:	2200      	movs	r2, #0
 80055aa:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80055ac:	4b18      	ldr	r3, [pc, #96]	@ (8005610 <MX_TIM5_Init+0x94>)
 80055ae:	f04f 32ff 	mov.w	r2, #4294967295
 80055b2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80055b4:	4b16      	ldr	r3, [pc, #88]	@ (8005610 <MX_TIM5_Init+0x94>)
 80055b6:	2200      	movs	r2, #0
 80055b8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80055ba:	4b15      	ldr	r3, [pc, #84]	@ (8005610 <MX_TIM5_Init+0x94>)
 80055bc:	2200      	movs	r2, #0
 80055be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80055c0:	4813      	ldr	r0, [pc, #76]	@ (8005610 <MX_TIM5_Init+0x94>)
 80055c2:	f003 ffcb 	bl	800955c <HAL_TIM_Base_Init>
 80055c6:	4603      	mov	r3, r0
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d001      	beq.n	80055d0 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80055cc:	f7ff f8a8 	bl	8004720 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80055d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80055d4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80055d6:	f107 0310 	add.w	r3, r7, #16
 80055da:	4619      	mov	r1, r3
 80055dc:	480c      	ldr	r0, [pc, #48]	@ (8005610 <MX_TIM5_Init+0x94>)
 80055de:	f004 ff45 	bl	800a46c <HAL_TIM_ConfigClockSource>
 80055e2:	4603      	mov	r3, r0
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d001      	beq.n	80055ec <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80055e8:	f7ff f89a 	bl	8004720 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80055ec:	2300      	movs	r3, #0
 80055ee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80055f0:	2300      	movs	r3, #0
 80055f2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80055f4:	1d3b      	adds	r3, r7, #4
 80055f6:	4619      	mov	r1, r3
 80055f8:	4805      	ldr	r0, [pc, #20]	@ (8005610 <MX_TIM5_Init+0x94>)
 80055fa:	f005 ff1d 	bl	800b438 <HAL_TIMEx_MasterConfigSynchronization>
 80055fe:	4603      	mov	r3, r0
 8005600:	2b00      	cmp	r3, #0
 8005602:	d001      	beq.n	8005608 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8005604:	f7ff f88c 	bl	8004720 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8005608:	bf00      	nop
 800560a:	3720      	adds	r7, #32
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}
 8005610:	20001c7c 	.word	0x20001c7c
 8005614:	40000c00 	.word	0x40000c00

08005618 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b09c      	sub	sp, #112	@ 0x70
 800561c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800561e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8005622:	2200      	movs	r2, #0
 8005624:	601a      	str	r2, [r3, #0]
 8005626:	605a      	str	r2, [r3, #4]
 8005628:	609a      	str	r2, [r3, #8]
 800562a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800562c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8005630:	2200      	movs	r2, #0
 8005632:	601a      	str	r2, [r3, #0]
 8005634:	605a      	str	r2, [r3, #4]
 8005636:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005638:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800563c:	2200      	movs	r2, #0
 800563e:	601a      	str	r2, [r3, #0]
 8005640:	605a      	str	r2, [r3, #4]
 8005642:	609a      	str	r2, [r3, #8]
 8005644:	60da      	str	r2, [r3, #12]
 8005646:	611a      	str	r2, [r3, #16]
 8005648:	615a      	str	r2, [r3, #20]
 800564a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800564c:	1d3b      	adds	r3, r7, #4
 800564e:	2234      	movs	r2, #52	@ 0x34
 8005650:	2100      	movs	r1, #0
 8005652:	4618      	mov	r0, r3
 8005654:	f008 f84a 	bl	800d6ec <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8005658:	4b4c      	ldr	r3, [pc, #304]	@ (800578c <MX_TIM8_Init+0x174>)
 800565a:	4a4d      	ldr	r2, [pc, #308]	@ (8005790 <MX_TIM8_Init+0x178>)
 800565c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800565e:	4b4b      	ldr	r3, [pc, #300]	@ (800578c <MX_TIM8_Init+0x174>)
 8005660:	2200      	movs	r2, #0
 8005662:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005664:	4b49      	ldr	r3, [pc, #292]	@ (800578c <MX_TIM8_Init+0x174>)
 8005666:	2200      	movs	r2, #0
 8005668:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800566a:	4b48      	ldr	r3, [pc, #288]	@ (800578c <MX_TIM8_Init+0x174>)
 800566c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005670:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8005672:	4b46      	ldr	r3, [pc, #280]	@ (800578c <MX_TIM8_Init+0x174>)
 8005674:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005678:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800567a:	4b44      	ldr	r3, [pc, #272]	@ (800578c <MX_TIM8_Init+0x174>)
 800567c:	2200      	movs	r2, #0
 800567e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005680:	4b42      	ldr	r3, [pc, #264]	@ (800578c <MX_TIM8_Init+0x174>)
 8005682:	2200      	movs	r2, #0
 8005684:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8005686:	4841      	ldr	r0, [pc, #260]	@ (800578c <MX_TIM8_Init+0x174>)
 8005688:	f003 ff68 	bl	800955c <HAL_TIM_Base_Init>
 800568c:	4603      	mov	r3, r0
 800568e:	2b00      	cmp	r3, #0
 8005690:	d001      	beq.n	8005696 <MX_TIM8_Init+0x7e>
  {
    Error_Handler();
 8005692:	f7ff f845 	bl	8004720 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005696:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800569a:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800569c:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80056a0:	4619      	mov	r1, r3
 80056a2:	483a      	ldr	r0, [pc, #232]	@ (800578c <MX_TIM8_Init+0x174>)
 80056a4:	f004 fee2 	bl	800a46c <HAL_TIM_ConfigClockSource>
 80056a8:	4603      	mov	r3, r0
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d001      	beq.n	80056b2 <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 80056ae:	f7ff f837 	bl	8004720 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80056b2:	4836      	ldr	r0, [pc, #216]	@ (800578c <MX_TIM8_Init+0x174>)
 80056b4:	f004 f89e 	bl	80097f4 <HAL_TIM_PWM_Init>
 80056b8:	4603      	mov	r3, r0
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d001      	beq.n	80056c2 <MX_TIM8_Init+0xaa>
  {
    Error_Handler();
 80056be:	f7ff f82f 	bl	8004720 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80056c2:	2300      	movs	r3, #0
 80056c4:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80056c6:	2300      	movs	r3, #0
 80056c8:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80056ca:	2300      	movs	r3, #0
 80056cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80056ce:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80056d2:	4619      	mov	r1, r3
 80056d4:	482d      	ldr	r0, [pc, #180]	@ (800578c <MX_TIM8_Init+0x174>)
 80056d6:	f005 feaf 	bl	800b438 <HAL_TIMEx_MasterConfigSynchronization>
 80056da:	4603      	mov	r3, r0
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d001      	beq.n	80056e4 <MX_TIM8_Init+0xcc>
  {
    Error_Handler();
 80056e0:	f7ff f81e 	bl	8004720 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80056e4:	2360      	movs	r3, #96	@ 0x60
 80056e6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80056e8:	2300      	movs	r3, #0
 80056ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80056ec:	2300      	movs	r3, #0
 80056ee:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80056f0:	2300      	movs	r3, #0
 80056f2:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80056f4:	2300      	movs	r3, #0
 80056f6:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80056f8:	2300      	movs	r3, #0
 80056fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80056fc:	2300      	movs	r3, #0
 80056fe:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005700:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8005704:	2200      	movs	r2, #0
 8005706:	4619      	mov	r1, r3
 8005708:	4820      	ldr	r0, [pc, #128]	@ (800578c <MX_TIM8_Init+0x174>)
 800570a:	f004 fd9b 	bl	800a244 <HAL_TIM_PWM_ConfigChannel>
 800570e:	4603      	mov	r3, r0
 8005710:	2b00      	cmp	r3, #0
 8005712:	d001      	beq.n	8005718 <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 8005714:	f7ff f804 	bl	8004720 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005718:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800571c:	2204      	movs	r2, #4
 800571e:	4619      	mov	r1, r3
 8005720:	481a      	ldr	r0, [pc, #104]	@ (800578c <MX_TIM8_Init+0x174>)
 8005722:	f004 fd8f 	bl	800a244 <HAL_TIM_PWM_ConfigChannel>
 8005726:	4603      	mov	r3, r0
 8005728:	2b00      	cmp	r3, #0
 800572a:	d001      	beq.n	8005730 <MX_TIM8_Init+0x118>
  {
    Error_Handler();
 800572c:	f7fe fff8 	bl	8004720 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005730:	2300      	movs	r3, #0
 8005732:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005734:	2300      	movs	r3, #0
 8005736:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005738:	2300      	movs	r3, #0
 800573a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800573c:	2300      	movs	r3, #0
 800573e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005740:	2300      	movs	r3, #0
 8005742:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005744:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005748:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800574a:	2300      	movs	r3, #0
 800574c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800574e:	2300      	movs	r3, #0
 8005750:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8005752:	2300      	movs	r3, #0
 8005754:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8005756:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800575a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800575c:	2300      	movs	r3, #0
 800575e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8005760:	2300      	movs	r3, #0
 8005762:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005764:	2300      	movs	r3, #0
 8005766:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8005768:	1d3b      	adds	r3, r7, #4
 800576a:	4619      	mov	r1, r3
 800576c:	4807      	ldr	r0, [pc, #28]	@ (800578c <MX_TIM8_Init+0x174>)
 800576e:	f005 fef9 	bl	800b564 <HAL_TIMEx_ConfigBreakDeadTime>
 8005772:	4603      	mov	r3, r0
 8005774:	2b00      	cmp	r3, #0
 8005776:	d001      	beq.n	800577c <MX_TIM8_Init+0x164>
  {
    Error_Handler();
 8005778:	f7fe ffd2 	bl	8004720 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800577c:	4803      	ldr	r0, [pc, #12]	@ (800578c <MX_TIM8_Init+0x174>)
 800577e:	f000 f94b 	bl	8005a18 <HAL_TIM_MspPostInit>

}
 8005782:	bf00      	nop
 8005784:	3770      	adds	r7, #112	@ 0x70
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}
 800578a:	bf00      	nop
 800578c:	20001d48 	.word	0x20001d48
 8005790:	40013400 	.word	0x40013400

08005794 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8005798:	4b14      	ldr	r3, [pc, #80]	@ (80057ec <MX_TIM16_Init+0x58>)
 800579a:	4a15      	ldr	r2, [pc, #84]	@ (80057f0 <MX_TIM16_Init+0x5c>)
 800579c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 800579e:	4b13      	ldr	r3, [pc, #76]	@ (80057ec <MX_TIM16_Init+0x58>)
 80057a0:	22a9      	movs	r2, #169	@ 0xa9
 80057a2:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80057a4:	4b11      	ldr	r3, [pc, #68]	@ (80057ec <MX_TIM16_Init+0x58>)
 80057a6:	2200      	movs	r2, #0
 80057a8:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1145;
 80057aa:	4b10      	ldr	r3, [pc, #64]	@ (80057ec <MX_TIM16_Init+0x58>)
 80057ac:	f240 4279 	movw	r2, #1145	@ 0x479
 80057b0:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80057b2:	4b0e      	ldr	r3, [pc, #56]	@ (80057ec <MX_TIM16_Init+0x58>)
 80057b4:	2200      	movs	r2, #0
 80057b6:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80057b8:	4b0c      	ldr	r3, [pc, #48]	@ (80057ec <MX_TIM16_Init+0x58>)
 80057ba:	2200      	movs	r2, #0
 80057bc:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80057be:	4b0b      	ldr	r3, [pc, #44]	@ (80057ec <MX_TIM16_Init+0x58>)
 80057c0:	2200      	movs	r2, #0
 80057c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80057c4:	4809      	ldr	r0, [pc, #36]	@ (80057ec <MX_TIM16_Init+0x58>)
 80057c6:	f003 fec9 	bl	800955c <HAL_TIM_Base_Init>
 80057ca:	4603      	mov	r3, r0
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d001      	beq.n	80057d4 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80057d0:	f7fe ffa6 	bl	8004720 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 80057d4:	2108      	movs	r1, #8
 80057d6:	4805      	ldr	r0, [pc, #20]	@ (80057ec <MX_TIM16_Init+0x58>)
 80057d8:	f004 f982 	bl	8009ae0 <HAL_TIM_OnePulse_Init>
 80057dc:	4603      	mov	r3, r0
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d001      	beq.n	80057e6 <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 80057e2:	f7fe ff9d 	bl	8004720 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80057e6:	bf00      	nop
 80057e8:	bd80      	pop	{r7, pc}
 80057ea:	bf00      	nop
 80057ec:	20001e14 	.word	0x20001e14
 80057f0:	40014400 	.word	0x40014400

080057f4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b084      	sub	sp, #16
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a0d      	ldr	r2, [pc, #52]	@ (8005838 <HAL_TIM_PWM_MspInit+0x44>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d113      	bne.n	800582e <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005806:	4b0d      	ldr	r3, [pc, #52]	@ (800583c <HAL_TIM_PWM_MspInit+0x48>)
 8005808:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800580a:	4a0c      	ldr	r2, [pc, #48]	@ (800583c <HAL_TIM_PWM_MspInit+0x48>)
 800580c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005810:	6613      	str	r3, [r2, #96]	@ 0x60
 8005812:	4b0a      	ldr	r3, [pc, #40]	@ (800583c <HAL_TIM_PWM_MspInit+0x48>)
 8005814:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005816:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800581a:	60fb      	str	r3, [r7, #12]
 800581c:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800581e:	2200      	movs	r2, #0
 8005820:	2100      	movs	r1, #0
 8005822:	2019      	movs	r0, #25
 8005824:	f002 f939 	bl	8007a9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8005828:	2019      	movs	r0, #25
 800582a:	f002 f950 	bl	8007ace <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800582e:	bf00      	nop
 8005830:	3710      	adds	r7, #16
 8005832:	46bd      	mov	sp, r7
 8005834:	bd80      	pop	{r7, pc}
 8005836:	bf00      	nop
 8005838:	40012c00 	.word	0x40012c00
 800583c:	40021000 	.word	0x40021000

08005840 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b086      	sub	sp, #24
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005850:	d114      	bne.n	800587c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005852:	4b2b      	ldr	r3, [pc, #172]	@ (8005900 <HAL_TIM_Base_MspInit+0xc0>)
 8005854:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005856:	4a2a      	ldr	r2, [pc, #168]	@ (8005900 <HAL_TIM_Base_MspInit+0xc0>)
 8005858:	f043 0301 	orr.w	r3, r3, #1
 800585c:	6593      	str	r3, [r2, #88]	@ 0x58
 800585e:	4b28      	ldr	r3, [pc, #160]	@ (8005900 <HAL_TIM_Base_MspInit+0xc0>)
 8005860:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005862:	f003 0301 	and.w	r3, r3, #1
 8005866:	617b      	str	r3, [r7, #20]
 8005868:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800586a:	2200      	movs	r2, #0
 800586c:	2100      	movs	r1, #0
 800586e:	201c      	movs	r0, #28
 8005870:	f002 f913 	bl	8007a9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005874:	201c      	movs	r0, #28
 8005876:	f002 f92a 	bl	8007ace <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 800587a:	e03c      	b.n	80058f6 <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM5)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a20      	ldr	r2, [pc, #128]	@ (8005904 <HAL_TIM_Base_MspInit+0xc4>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d10c      	bne.n	80058a0 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005886:	4b1e      	ldr	r3, [pc, #120]	@ (8005900 <HAL_TIM_Base_MspInit+0xc0>)
 8005888:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800588a:	4a1d      	ldr	r2, [pc, #116]	@ (8005900 <HAL_TIM_Base_MspInit+0xc0>)
 800588c:	f043 0308 	orr.w	r3, r3, #8
 8005890:	6593      	str	r3, [r2, #88]	@ 0x58
 8005892:	4b1b      	ldr	r3, [pc, #108]	@ (8005900 <HAL_TIM_Base_MspInit+0xc0>)
 8005894:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005896:	f003 0308 	and.w	r3, r3, #8
 800589a:	613b      	str	r3, [r7, #16]
 800589c:	693b      	ldr	r3, [r7, #16]
}
 800589e:	e02a      	b.n	80058f6 <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM8)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a18      	ldr	r2, [pc, #96]	@ (8005908 <HAL_TIM_Base_MspInit+0xc8>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d10c      	bne.n	80058c4 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80058aa:	4b15      	ldr	r3, [pc, #84]	@ (8005900 <HAL_TIM_Base_MspInit+0xc0>)
 80058ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058ae:	4a14      	ldr	r2, [pc, #80]	@ (8005900 <HAL_TIM_Base_MspInit+0xc0>)
 80058b0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80058b4:	6613      	str	r3, [r2, #96]	@ 0x60
 80058b6:	4b12      	ldr	r3, [pc, #72]	@ (8005900 <HAL_TIM_Base_MspInit+0xc0>)
 80058b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80058be:	60fb      	str	r3, [r7, #12]
 80058c0:	68fb      	ldr	r3, [r7, #12]
}
 80058c2:	e018      	b.n	80058f6 <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM16)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a10      	ldr	r2, [pc, #64]	@ (800590c <HAL_TIM_Base_MspInit+0xcc>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d113      	bne.n	80058f6 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80058ce:	4b0c      	ldr	r3, [pc, #48]	@ (8005900 <HAL_TIM_Base_MspInit+0xc0>)
 80058d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058d2:	4a0b      	ldr	r2, [pc, #44]	@ (8005900 <HAL_TIM_Base_MspInit+0xc0>)
 80058d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80058d8:	6613      	str	r3, [r2, #96]	@ 0x60
 80058da:	4b09      	ldr	r3, [pc, #36]	@ (8005900 <HAL_TIM_Base_MspInit+0xc0>)
 80058dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058e2:	60bb      	str	r3, [r7, #8]
 80058e4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80058e6:	2200      	movs	r2, #0
 80058e8:	2100      	movs	r1, #0
 80058ea:	2019      	movs	r0, #25
 80058ec:	f002 f8d5 	bl	8007a9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80058f0:	2019      	movs	r0, #25
 80058f2:	f002 f8ec 	bl	8007ace <HAL_NVIC_EnableIRQ>
}
 80058f6:	bf00      	nop
 80058f8:	3718      	adds	r7, #24
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}
 80058fe:	bf00      	nop
 8005900:	40021000 	.word	0x40021000
 8005904:	40000c00 	.word	0x40000c00
 8005908:	40013400 	.word	0x40013400
 800590c:	40014400 	.word	0x40014400

08005910 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b08c      	sub	sp, #48	@ 0x30
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005918:	f107 031c 	add.w	r3, r7, #28
 800591c:	2200      	movs	r2, #0
 800591e:	601a      	str	r2, [r3, #0]
 8005920:	605a      	str	r2, [r3, #4]
 8005922:	609a      	str	r2, [r3, #8]
 8005924:	60da      	str	r2, [r3, #12]
 8005926:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a37      	ldr	r2, [pc, #220]	@ (8005a0c <HAL_TIM_Encoder_MspInit+0xfc>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d131      	bne.n	8005996 <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005932:	4b37      	ldr	r3, [pc, #220]	@ (8005a10 <HAL_TIM_Encoder_MspInit+0x100>)
 8005934:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005936:	4a36      	ldr	r2, [pc, #216]	@ (8005a10 <HAL_TIM_Encoder_MspInit+0x100>)
 8005938:	f043 0302 	orr.w	r3, r3, #2
 800593c:	6593      	str	r3, [r2, #88]	@ 0x58
 800593e:	4b34      	ldr	r3, [pc, #208]	@ (8005a10 <HAL_TIM_Encoder_MspInit+0x100>)
 8005940:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005942:	f003 0302 	and.w	r3, r3, #2
 8005946:	61bb      	str	r3, [r7, #24]
 8005948:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800594a:	4b31      	ldr	r3, [pc, #196]	@ (8005a10 <HAL_TIM_Encoder_MspInit+0x100>)
 800594c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800594e:	4a30      	ldr	r2, [pc, #192]	@ (8005a10 <HAL_TIM_Encoder_MspInit+0x100>)
 8005950:	f043 0301 	orr.w	r3, r3, #1
 8005954:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005956:	4b2e      	ldr	r3, [pc, #184]	@ (8005a10 <HAL_TIM_Encoder_MspInit+0x100>)
 8005958:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800595a:	f003 0301 	and.w	r3, r3, #1
 800595e:	617b      	str	r3, [r7, #20]
 8005960:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005962:	23c0      	movs	r3, #192	@ 0xc0
 8005964:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005966:	2302      	movs	r3, #2
 8005968:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800596a:	2300      	movs	r3, #0
 800596c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800596e:	2300      	movs	r3, #0
 8005970:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005972:	2302      	movs	r3, #2
 8005974:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005976:	f107 031c 	add.w	r3, r7, #28
 800597a:	4619      	mov	r1, r3
 800597c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005980:	f002 fbf2 	bl	8008168 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8005984:	2200      	movs	r2, #0
 8005986:	2100      	movs	r1, #0
 8005988:	201d      	movs	r0, #29
 800598a:	f002 f886 	bl	8007a9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800598e:	201d      	movs	r0, #29
 8005990:	f002 f89d 	bl	8007ace <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8005994:	e036      	b.n	8005a04 <HAL_TIM_Encoder_MspInit+0xf4>
  else if(tim_encoderHandle->Instance==TIM4)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a1e      	ldr	r2, [pc, #120]	@ (8005a14 <HAL_TIM_Encoder_MspInit+0x104>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d131      	bne.n	8005a04 <HAL_TIM_Encoder_MspInit+0xf4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80059a0:	4b1b      	ldr	r3, [pc, #108]	@ (8005a10 <HAL_TIM_Encoder_MspInit+0x100>)
 80059a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059a4:	4a1a      	ldr	r2, [pc, #104]	@ (8005a10 <HAL_TIM_Encoder_MspInit+0x100>)
 80059a6:	f043 0304 	orr.w	r3, r3, #4
 80059aa:	6593      	str	r3, [r2, #88]	@ 0x58
 80059ac:	4b18      	ldr	r3, [pc, #96]	@ (8005a10 <HAL_TIM_Encoder_MspInit+0x100>)
 80059ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059b0:	f003 0304 	and.w	r3, r3, #4
 80059b4:	613b      	str	r3, [r7, #16]
 80059b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80059b8:	4b15      	ldr	r3, [pc, #84]	@ (8005a10 <HAL_TIM_Encoder_MspInit+0x100>)
 80059ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059bc:	4a14      	ldr	r2, [pc, #80]	@ (8005a10 <HAL_TIM_Encoder_MspInit+0x100>)
 80059be:	f043 0301 	orr.w	r3, r3, #1
 80059c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80059c4:	4b12      	ldr	r3, [pc, #72]	@ (8005a10 <HAL_TIM_Encoder_MspInit+0x100>)
 80059c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059c8:	f003 0301 	and.w	r3, r3, #1
 80059cc:	60fb      	str	r3, [r7, #12]
 80059ce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80059d0:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80059d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059d6:	2302      	movs	r3, #2
 80059d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059da:	2300      	movs	r3, #0
 80059dc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80059de:	2300      	movs	r3, #0
 80059e0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 80059e2:	230a      	movs	r3, #10
 80059e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80059e6:	f107 031c 	add.w	r3, r7, #28
 80059ea:	4619      	mov	r1, r3
 80059ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80059f0:	f002 fbba 	bl	8008168 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80059f4:	2200      	movs	r2, #0
 80059f6:	2100      	movs	r1, #0
 80059f8:	201e      	movs	r0, #30
 80059fa:	f002 f84e 	bl	8007a9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80059fe:	201e      	movs	r0, #30
 8005a00:	f002 f865 	bl	8007ace <HAL_NVIC_EnableIRQ>
}
 8005a04:	bf00      	nop
 8005a06:	3730      	adds	r7, #48	@ 0x30
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}
 8005a0c:	40000400 	.word	0x40000400
 8005a10:	40021000 	.word	0x40021000
 8005a14:	40000800 	.word	0x40000800

08005a18 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b08a      	sub	sp, #40	@ 0x28
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a20:	f107 0314 	add.w	r3, r7, #20
 8005a24:	2200      	movs	r2, #0
 8005a26:	601a      	str	r2, [r3, #0]
 8005a28:	605a      	str	r2, [r3, #4]
 8005a2a:	609a      	str	r2, [r3, #8]
 8005a2c:	60da      	str	r2, [r3, #12]
 8005a2e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a22      	ldr	r2, [pc, #136]	@ (8005ac0 <HAL_TIM_MspPostInit+0xa8>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d11c      	bne.n	8005a74 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005a3a:	4b22      	ldr	r3, [pc, #136]	@ (8005ac4 <HAL_TIM_MspPostInit+0xac>)
 8005a3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a3e:	4a21      	ldr	r2, [pc, #132]	@ (8005ac4 <HAL_TIM_MspPostInit+0xac>)
 8005a40:	f043 0304 	orr.w	r3, r3, #4
 8005a44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005a46:	4b1f      	ldr	r3, [pc, #124]	@ (8005ac4 <HAL_TIM_MspPostInit+0xac>)
 8005a48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a4a:	f003 0304 	and.w	r3, r3, #4
 8005a4e:	613b      	str	r3, [r7, #16]
 8005a50:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC3     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005a52:	2308      	movs	r3, #8
 8005a54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a56:	2302      	movs	r3, #2
 8005a58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8005a62:	2302      	movs	r3, #2
 8005a64:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005a66:	f107 0314 	add.w	r3, r7, #20
 8005a6a:	4619      	mov	r1, r3
 8005a6c:	4816      	ldr	r0, [pc, #88]	@ (8005ac8 <HAL_TIM_MspPostInit+0xb0>)
 8005a6e:	f002 fb7b 	bl	8008168 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8005a72:	e020      	b.n	8005ab6 <HAL_TIM_MspPostInit+0x9e>
  else if(timHandle->Instance==TIM8)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a14      	ldr	r2, [pc, #80]	@ (8005acc <HAL_TIM_MspPostInit+0xb4>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d11b      	bne.n	8005ab6 <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005a7e:	4b11      	ldr	r3, [pc, #68]	@ (8005ac4 <HAL_TIM_MspPostInit+0xac>)
 8005a80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a82:	4a10      	ldr	r2, [pc, #64]	@ (8005ac4 <HAL_TIM_MspPostInit+0xac>)
 8005a84:	f043 0304 	orr.w	r3, r3, #4
 8005a88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005a8a:	4b0e      	ldr	r3, [pc, #56]	@ (8005ac4 <HAL_TIM_MspPostInit+0xac>)
 8005a8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a8e:	f003 0304 	and.w	r3, r3, #4
 8005a92:	60fb      	str	r3, [r7, #12]
 8005a94:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005a96:	23c0      	movs	r3, #192	@ 0xc0
 8005a98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a9a:	2302      	movs	r3, #2
 8005a9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8005aa6:	2304      	movs	r3, #4
 8005aa8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005aaa:	f107 0314 	add.w	r3, r7, #20
 8005aae:	4619      	mov	r1, r3
 8005ab0:	4805      	ldr	r0, [pc, #20]	@ (8005ac8 <HAL_TIM_MspPostInit+0xb0>)
 8005ab2:	f002 fb59 	bl	8008168 <HAL_GPIO_Init>
}
 8005ab6:	bf00      	nop
 8005ab8:	3728      	adds	r7, #40	@ 0x28
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}
 8005abe:	bf00      	nop
 8005ac0:	40012c00 	.word	0x40012c00
 8005ac4:	40021000 	.word	0x40021000
 8005ac8:	48000800 	.word	0x48000800
 8005acc:	40013400 	.word	0x40013400

08005ad0 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8005ad4:	4b20      	ldr	r3, [pc, #128]	@ (8005b58 <MX_LPUART1_UART_Init+0x88>)
 8005ad6:	4a21      	ldr	r2, [pc, #132]	@ (8005b5c <MX_LPUART1_UART_Init+0x8c>)
 8005ad8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 2000000;
 8005ada:	4b1f      	ldr	r3, [pc, #124]	@ (8005b58 <MX_LPUART1_UART_Init+0x88>)
 8005adc:	4a20      	ldr	r2, [pc, #128]	@ (8005b60 <MX_LPUART1_UART_Init+0x90>)
 8005ade:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005ae0:	4b1d      	ldr	r3, [pc, #116]	@ (8005b58 <MX_LPUART1_UART_Init+0x88>)
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8005ae6:	4b1c      	ldr	r3, [pc, #112]	@ (8005b58 <MX_LPUART1_UART_Init+0x88>)
 8005ae8:	2200      	movs	r2, #0
 8005aea:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8005aec:	4b1a      	ldr	r3, [pc, #104]	@ (8005b58 <MX_LPUART1_UART_Init+0x88>)
 8005aee:	2200      	movs	r2, #0
 8005af0:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8005af2:	4b19      	ldr	r3, [pc, #100]	@ (8005b58 <MX_LPUART1_UART_Init+0x88>)
 8005af4:	220c      	movs	r2, #12
 8005af6:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005af8:	4b17      	ldr	r3, [pc, #92]	@ (8005b58 <MX_LPUART1_UART_Init+0x88>)
 8005afa:	2200      	movs	r2, #0
 8005afc:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005afe:	4b16      	ldr	r3, [pc, #88]	@ (8005b58 <MX_LPUART1_UART_Init+0x88>)
 8005b00:	2200      	movs	r2, #0
 8005b02:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005b04:	4b14      	ldr	r3, [pc, #80]	@ (8005b58 <MX_LPUART1_UART_Init+0x88>)
 8005b06:	2200      	movs	r2, #0
 8005b08:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005b0a:	4b13      	ldr	r3, [pc, #76]	@ (8005b58 <MX_LPUART1_UART_Init+0x88>)
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8005b10:	4811      	ldr	r0, [pc, #68]	@ (8005b58 <MX_LPUART1_UART_Init+0x88>)
 8005b12:	f005 fe0b 	bl	800b72c <HAL_UART_Init>
 8005b16:	4603      	mov	r3, r0
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d001      	beq.n	8005b20 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 8005b1c:	f7fe fe00 	bl	8004720 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005b20:	2100      	movs	r1, #0
 8005b22:	480d      	ldr	r0, [pc, #52]	@ (8005b58 <MX_LPUART1_UART_Init+0x88>)
 8005b24:	f007 fb5e 	bl	800d1e4 <HAL_UARTEx_SetTxFifoThreshold>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d001      	beq.n	8005b32 <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 8005b2e:	f7fe fdf7 	bl	8004720 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005b32:	2100      	movs	r1, #0
 8005b34:	4808      	ldr	r0, [pc, #32]	@ (8005b58 <MX_LPUART1_UART_Init+0x88>)
 8005b36:	f007 fb93 	bl	800d260 <HAL_UARTEx_SetRxFifoThreshold>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d001      	beq.n	8005b44 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 8005b40:	f7fe fdee 	bl	8004720 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8005b44:	4804      	ldr	r0, [pc, #16]	@ (8005b58 <MX_LPUART1_UART_Init+0x88>)
 8005b46:	f007 fb14 	bl	800d172 <HAL_UARTEx_DisableFifoMode>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d001      	beq.n	8005b54 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 8005b50:	f7fe fde6 	bl	8004720 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8005b54:	bf00      	nop
 8005b56:	bd80      	pop	{r7, pc}
 8005b58:	20001ee0 	.word	0x20001ee0
 8005b5c:	40008000 	.word	0x40008000
 8005b60:	001e8480 	.word	0x001e8480

08005b64 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005b68:	4b23      	ldr	r3, [pc, #140]	@ (8005bf8 <MX_USART2_UART_Init+0x94>)
 8005b6a:	4a24      	ldr	r2, [pc, #144]	@ (8005bfc <MX_USART2_UART_Init+0x98>)
 8005b6c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8005b6e:	4b22      	ldr	r3, [pc, #136]	@ (8005bf8 <MX_USART2_UART_Init+0x94>)
 8005b70:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8005b74:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8005b76:	4b20      	ldr	r3, [pc, #128]	@ (8005bf8 <MX_USART2_UART_Init+0x94>)
 8005b78:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005b7c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005b7e:	4b1e      	ldr	r3, [pc, #120]	@ (8005bf8 <MX_USART2_UART_Init+0x94>)
 8005b80:	2200      	movs	r2, #0
 8005b82:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8005b84:	4b1c      	ldr	r3, [pc, #112]	@ (8005bf8 <MX_USART2_UART_Init+0x94>)
 8005b86:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005b8a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005b8c:	4b1a      	ldr	r3, [pc, #104]	@ (8005bf8 <MX_USART2_UART_Init+0x94>)
 8005b8e:	220c      	movs	r2, #12
 8005b90:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005b92:	4b19      	ldr	r3, [pc, #100]	@ (8005bf8 <MX_USART2_UART_Init+0x94>)
 8005b94:	2200      	movs	r2, #0
 8005b96:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005b98:	4b17      	ldr	r3, [pc, #92]	@ (8005bf8 <MX_USART2_UART_Init+0x94>)
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005b9e:	4b16      	ldr	r3, [pc, #88]	@ (8005bf8 <MX_USART2_UART_Init+0x94>)
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005ba4:	4b14      	ldr	r3, [pc, #80]	@ (8005bf8 <MX_USART2_UART_Init+0x94>)
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005baa:	4b13      	ldr	r3, [pc, #76]	@ (8005bf8 <MX_USART2_UART_Init+0x94>)
 8005bac:	2200      	movs	r2, #0
 8005bae:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005bb0:	4811      	ldr	r0, [pc, #68]	@ (8005bf8 <MX_USART2_UART_Init+0x94>)
 8005bb2:	f005 fdbb 	bl	800b72c <HAL_UART_Init>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d001      	beq.n	8005bc0 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8005bbc:	f7fe fdb0 	bl	8004720 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005bc0:	2100      	movs	r1, #0
 8005bc2:	480d      	ldr	r0, [pc, #52]	@ (8005bf8 <MX_USART2_UART_Init+0x94>)
 8005bc4:	f007 fb0e 	bl	800d1e4 <HAL_UARTEx_SetTxFifoThreshold>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d001      	beq.n	8005bd2 <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 8005bce:	f7fe fda7 	bl	8004720 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005bd2:	2100      	movs	r1, #0
 8005bd4:	4808      	ldr	r0, [pc, #32]	@ (8005bf8 <MX_USART2_UART_Init+0x94>)
 8005bd6:	f007 fb43 	bl	800d260 <HAL_UARTEx_SetRxFifoThreshold>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d001      	beq.n	8005be4 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8005be0:	f7fe fd9e 	bl	8004720 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8005be4:	4804      	ldr	r0, [pc, #16]	@ (8005bf8 <MX_USART2_UART_Init+0x94>)
 8005be6:	f007 fac4 	bl	800d172 <HAL_UARTEx_DisableFifoMode>
 8005bea:	4603      	mov	r3, r0
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d001      	beq.n	8005bf4 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8005bf0:	f7fe fd96 	bl	8004720 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005bf4:	bf00      	nop
 8005bf6:	bd80      	pop	{r7, pc}
 8005bf8:	20001fac 	.word	0x20001fac
 8005bfc:	40004400 	.word	0x40004400

08005c00 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b0a0      	sub	sp, #128	@ 0x80
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c08:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	601a      	str	r2, [r3, #0]
 8005c10:	605a      	str	r2, [r3, #4]
 8005c12:	609a      	str	r2, [r3, #8]
 8005c14:	60da      	str	r2, [r3, #12]
 8005c16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005c18:	f107 0318 	add.w	r3, r7, #24
 8005c1c:	2254      	movs	r2, #84	@ 0x54
 8005c1e:	2100      	movs	r1, #0
 8005c20:	4618      	mov	r0, r3
 8005c22:	f007 fd63 	bl	800d6ec <memset>
  if(uartHandle->Instance==LPUART1)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a99      	ldr	r2, [pc, #612]	@ (8005e90 <HAL_UART_MspInit+0x290>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	f040 8093 	bne.w	8005d58 <HAL_UART_MspInit+0x158>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8005c32:	2320      	movs	r3, #32
 8005c34:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8005c36:	2300      	movs	r3, #0
 8005c38:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005c3a:	f107 0318 	add.w	r3, r7, #24
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f003 fa3e 	bl	80090c0 <HAL_RCCEx_PeriphCLKConfig>
 8005c44:	4603      	mov	r3, r0
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d001      	beq.n	8005c4e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8005c4a:	f7fe fd69 	bl	8004720 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8005c4e:	4b91      	ldr	r3, [pc, #580]	@ (8005e94 <HAL_UART_MspInit+0x294>)
 8005c50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c52:	4a90      	ldr	r2, [pc, #576]	@ (8005e94 <HAL_UART_MspInit+0x294>)
 8005c54:	f043 0301 	orr.w	r3, r3, #1
 8005c58:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8005c5a:	4b8e      	ldr	r3, [pc, #568]	@ (8005e94 <HAL_UART_MspInit+0x294>)
 8005c5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c5e:	f003 0301 	and.w	r3, r3, #1
 8005c62:	617b      	str	r3, [r7, #20]
 8005c64:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005c66:	4b8b      	ldr	r3, [pc, #556]	@ (8005e94 <HAL_UART_MspInit+0x294>)
 8005c68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c6a:	4a8a      	ldr	r2, [pc, #552]	@ (8005e94 <HAL_UART_MspInit+0x294>)
 8005c6c:	f043 0302 	orr.w	r3, r3, #2
 8005c70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005c72:	4b88      	ldr	r3, [pc, #544]	@ (8005e94 <HAL_UART_MspInit+0x294>)
 8005c74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c76:	f003 0302 	and.w	r3, r3, #2
 8005c7a:	613b      	str	r3, [r7, #16]
 8005c7c:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8005c7e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8005c82:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c84:	2302      	movs	r3, #2
 8005c86:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c88:	2300      	movs	r3, #0
 8005c8a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8005c90:	2308      	movs	r3, #8
 8005c92:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c94:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8005c98:	4619      	mov	r1, r3
 8005c9a:	487f      	ldr	r0, [pc, #508]	@ (8005e98 <HAL_UART_MspInit+0x298>)
 8005c9c:	f002 fa64 	bl	8008168 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel4;
 8005ca0:	4b7e      	ldr	r3, [pc, #504]	@ (8005e9c <HAL_UART_MspInit+0x29c>)
 8005ca2:	4a7f      	ldr	r2, [pc, #508]	@ (8005ea0 <HAL_UART_MspInit+0x2a0>)
 8005ca4:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8005ca6:	4b7d      	ldr	r3, [pc, #500]	@ (8005e9c <HAL_UART_MspInit+0x29c>)
 8005ca8:	2222      	movs	r2, #34	@ 0x22
 8005caa:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005cac:	4b7b      	ldr	r3, [pc, #492]	@ (8005e9c <HAL_UART_MspInit+0x29c>)
 8005cae:	2200      	movs	r2, #0
 8005cb0:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005cb2:	4b7a      	ldr	r3, [pc, #488]	@ (8005e9c <HAL_UART_MspInit+0x29c>)
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005cb8:	4b78      	ldr	r3, [pc, #480]	@ (8005e9c <HAL_UART_MspInit+0x29c>)
 8005cba:	2280      	movs	r2, #128	@ 0x80
 8005cbc:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005cbe:	4b77      	ldr	r3, [pc, #476]	@ (8005e9c <HAL_UART_MspInit+0x29c>)
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005cc4:	4b75      	ldr	r3, [pc, #468]	@ (8005e9c <HAL_UART_MspInit+0x29c>)
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 8005cca:	4b74      	ldr	r3, [pc, #464]	@ (8005e9c <HAL_UART_MspInit+0x29c>)
 8005ccc:	2200      	movs	r2, #0
 8005cce:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005cd0:	4b72      	ldr	r3, [pc, #456]	@ (8005e9c <HAL_UART_MspInit+0x29c>)
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8005cd6:	4871      	ldr	r0, [pc, #452]	@ (8005e9c <HAL_UART_MspInit+0x29c>)
 8005cd8:	f001 ff14 	bl	8007b04 <HAL_DMA_Init>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d001      	beq.n	8005ce6 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8005ce2:	f7fe fd1d 	bl	8004720 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	4a6c      	ldr	r2, [pc, #432]	@ (8005e9c <HAL_UART_MspInit+0x29c>)
 8005cea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8005cee:	4a6b      	ldr	r2, [pc, #428]	@ (8005e9c <HAL_UART_MspInit+0x29c>)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel5;
 8005cf4:	4b6b      	ldr	r3, [pc, #428]	@ (8005ea4 <HAL_UART_MspInit+0x2a4>)
 8005cf6:	4a6c      	ldr	r2, [pc, #432]	@ (8005ea8 <HAL_UART_MspInit+0x2a8>)
 8005cf8:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8005cfa:	4b6a      	ldr	r3, [pc, #424]	@ (8005ea4 <HAL_UART_MspInit+0x2a4>)
 8005cfc:	2223      	movs	r2, #35	@ 0x23
 8005cfe:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005d00:	4b68      	ldr	r3, [pc, #416]	@ (8005ea4 <HAL_UART_MspInit+0x2a4>)
 8005d02:	2210      	movs	r2, #16
 8005d04:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005d06:	4b67      	ldr	r3, [pc, #412]	@ (8005ea4 <HAL_UART_MspInit+0x2a4>)
 8005d08:	2200      	movs	r2, #0
 8005d0a:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005d0c:	4b65      	ldr	r3, [pc, #404]	@ (8005ea4 <HAL_UART_MspInit+0x2a4>)
 8005d0e:	2280      	movs	r2, #128	@ 0x80
 8005d10:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005d12:	4b64      	ldr	r3, [pc, #400]	@ (8005ea4 <HAL_UART_MspInit+0x2a4>)
 8005d14:	2200      	movs	r2, #0
 8005d16:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005d18:	4b62      	ldr	r3, [pc, #392]	@ (8005ea4 <HAL_UART_MspInit+0x2a4>)
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8005d1e:	4b61      	ldr	r3, [pc, #388]	@ (8005ea4 <HAL_UART_MspInit+0x2a4>)
 8005d20:	2200      	movs	r2, #0
 8005d22:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005d24:	4b5f      	ldr	r3, [pc, #380]	@ (8005ea4 <HAL_UART_MspInit+0x2a4>)
 8005d26:	2200      	movs	r2, #0
 8005d28:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8005d2a:	485e      	ldr	r0, [pc, #376]	@ (8005ea4 <HAL_UART_MspInit+0x2a4>)
 8005d2c:	f001 feea 	bl	8007b04 <HAL_DMA_Init>
 8005d30:	4603      	mov	r3, r0
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d001      	beq.n	8005d3a <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 8005d36:	f7fe fcf3 	bl	8004720 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	4a59      	ldr	r2, [pc, #356]	@ (8005ea4 <HAL_UART_MspInit+0x2a4>)
 8005d3e:	67da      	str	r2, [r3, #124]	@ 0x7c
 8005d40:	4a58      	ldr	r2, [pc, #352]	@ (8005ea4 <HAL_UART_MspInit+0x2a4>)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8005d46:	2200      	movs	r2, #0
 8005d48:	2100      	movs	r1, #0
 8005d4a:	205b      	movs	r0, #91	@ 0x5b
 8005d4c:	f001 fea5 	bl	8007a9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8005d50:	205b      	movs	r0, #91	@ 0x5b
 8005d52:	f001 febc 	bl	8007ace <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8005d56:	e097      	b.n	8005e88 <HAL_UART_MspInit+0x288>
  else if(uartHandle->Instance==USART2)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a53      	ldr	r2, [pc, #332]	@ (8005eac <HAL_UART_MspInit+0x2ac>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	f040 8092 	bne.w	8005e88 <HAL_UART_MspInit+0x288>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8005d64:	2302      	movs	r3, #2
 8005d66:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8005d68:	2300      	movs	r3, #0
 8005d6a:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005d6c:	f107 0318 	add.w	r3, r7, #24
 8005d70:	4618      	mov	r0, r3
 8005d72:	f003 f9a5 	bl	80090c0 <HAL_RCCEx_PeriphCLKConfig>
 8005d76:	4603      	mov	r3, r0
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d001      	beq.n	8005d80 <HAL_UART_MspInit+0x180>
      Error_Handler();
 8005d7c:	f7fe fcd0 	bl	8004720 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005d80:	4b44      	ldr	r3, [pc, #272]	@ (8005e94 <HAL_UART_MspInit+0x294>)
 8005d82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d84:	4a43      	ldr	r2, [pc, #268]	@ (8005e94 <HAL_UART_MspInit+0x294>)
 8005d86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d8a:	6593      	str	r3, [r2, #88]	@ 0x58
 8005d8c:	4b41      	ldr	r3, [pc, #260]	@ (8005e94 <HAL_UART_MspInit+0x294>)
 8005d8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d94:	60fb      	str	r3, [r7, #12]
 8005d96:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005d98:	4b3e      	ldr	r3, [pc, #248]	@ (8005e94 <HAL_UART_MspInit+0x294>)
 8005d9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d9c:	4a3d      	ldr	r2, [pc, #244]	@ (8005e94 <HAL_UART_MspInit+0x294>)
 8005d9e:	f043 0301 	orr.w	r3, r3, #1
 8005da2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005da4:	4b3b      	ldr	r3, [pc, #236]	@ (8005e94 <HAL_UART_MspInit+0x294>)
 8005da6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005da8:	f003 0301 	and.w	r3, r3, #1
 8005dac:	60bb      	str	r3, [r7, #8]
 8005dae:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005db0:	230c      	movs	r3, #12
 8005db2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005db4:	2302      	movs	r3, #2
 8005db6:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005db8:	2300      	movs	r3, #0
 8005dba:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005dc0:	2307      	movs	r3, #7
 8005dc2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005dc4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8005dc8:	4619      	mov	r1, r3
 8005dca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005dce:	f002 f9cb 	bl	8008168 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel2;
 8005dd2:	4b37      	ldr	r3, [pc, #220]	@ (8005eb0 <HAL_UART_MspInit+0x2b0>)
 8005dd4:	4a37      	ldr	r2, [pc, #220]	@ (8005eb4 <HAL_UART_MspInit+0x2b4>)
 8005dd6:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8005dd8:	4b35      	ldr	r3, [pc, #212]	@ (8005eb0 <HAL_UART_MspInit+0x2b0>)
 8005dda:	221a      	movs	r2, #26
 8005ddc:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005dde:	4b34      	ldr	r3, [pc, #208]	@ (8005eb0 <HAL_UART_MspInit+0x2b0>)
 8005de0:	2200      	movs	r2, #0
 8005de2:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005de4:	4b32      	ldr	r3, [pc, #200]	@ (8005eb0 <HAL_UART_MspInit+0x2b0>)
 8005de6:	2200      	movs	r2, #0
 8005de8:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005dea:	4b31      	ldr	r3, [pc, #196]	@ (8005eb0 <HAL_UART_MspInit+0x2b0>)
 8005dec:	2280      	movs	r2, #128	@ 0x80
 8005dee:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005df0:	4b2f      	ldr	r3, [pc, #188]	@ (8005eb0 <HAL_UART_MspInit+0x2b0>)
 8005df2:	2200      	movs	r2, #0
 8005df4:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005df6:	4b2e      	ldr	r3, [pc, #184]	@ (8005eb0 <HAL_UART_MspInit+0x2b0>)
 8005df8:	2200      	movs	r2, #0
 8005dfa:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8005dfc:	4b2c      	ldr	r3, [pc, #176]	@ (8005eb0 <HAL_UART_MspInit+0x2b0>)
 8005dfe:	2200      	movs	r2, #0
 8005e00:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005e02:	4b2b      	ldr	r3, [pc, #172]	@ (8005eb0 <HAL_UART_MspInit+0x2b0>)
 8005e04:	2200      	movs	r2, #0
 8005e06:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8005e08:	4829      	ldr	r0, [pc, #164]	@ (8005eb0 <HAL_UART_MspInit+0x2b0>)
 8005e0a:	f001 fe7b 	bl	8007b04 <HAL_DMA_Init>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d001      	beq.n	8005e18 <HAL_UART_MspInit+0x218>
      Error_Handler();
 8005e14:	f7fe fc84 	bl	8004720 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	4a25      	ldr	r2, [pc, #148]	@ (8005eb0 <HAL_UART_MspInit+0x2b0>)
 8005e1c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8005e20:	4a23      	ldr	r2, [pc, #140]	@ (8005eb0 <HAL_UART_MspInit+0x2b0>)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart2_tx.Instance = DMA1_Channel3;
 8005e26:	4b24      	ldr	r3, [pc, #144]	@ (8005eb8 <HAL_UART_MspInit+0x2b8>)
 8005e28:	4a24      	ldr	r2, [pc, #144]	@ (8005ebc <HAL_UART_MspInit+0x2bc>)
 8005e2a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8005e2c:	4b22      	ldr	r3, [pc, #136]	@ (8005eb8 <HAL_UART_MspInit+0x2b8>)
 8005e2e:	221b      	movs	r2, #27
 8005e30:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005e32:	4b21      	ldr	r3, [pc, #132]	@ (8005eb8 <HAL_UART_MspInit+0x2b8>)
 8005e34:	2210      	movs	r2, #16
 8005e36:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005e38:	4b1f      	ldr	r3, [pc, #124]	@ (8005eb8 <HAL_UART_MspInit+0x2b8>)
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005e3e:	4b1e      	ldr	r3, [pc, #120]	@ (8005eb8 <HAL_UART_MspInit+0x2b8>)
 8005e40:	2280      	movs	r2, #128	@ 0x80
 8005e42:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005e44:	4b1c      	ldr	r3, [pc, #112]	@ (8005eb8 <HAL_UART_MspInit+0x2b8>)
 8005e46:	2200      	movs	r2, #0
 8005e48:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005e4a:	4b1b      	ldr	r3, [pc, #108]	@ (8005eb8 <HAL_UART_MspInit+0x2b8>)
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8005e50:	4b19      	ldr	r3, [pc, #100]	@ (8005eb8 <HAL_UART_MspInit+0x2b8>)
 8005e52:	2200      	movs	r2, #0
 8005e54:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005e56:	4b18      	ldr	r3, [pc, #96]	@ (8005eb8 <HAL_UART_MspInit+0x2b8>)
 8005e58:	2200      	movs	r2, #0
 8005e5a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8005e5c:	4816      	ldr	r0, [pc, #88]	@ (8005eb8 <HAL_UART_MspInit+0x2b8>)
 8005e5e:	f001 fe51 	bl	8007b04 <HAL_DMA_Init>
 8005e62:	4603      	mov	r3, r0
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d001      	beq.n	8005e6c <HAL_UART_MspInit+0x26c>
      Error_Handler();
 8005e68:	f7fe fc5a 	bl	8004720 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	4a12      	ldr	r2, [pc, #72]	@ (8005eb8 <HAL_UART_MspInit+0x2b8>)
 8005e70:	67da      	str	r2, [r3, #124]	@ 0x7c
 8005e72:	4a11      	ldr	r2, [pc, #68]	@ (8005eb8 <HAL_UART_MspInit+0x2b8>)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005e78:	2200      	movs	r2, #0
 8005e7a:	2100      	movs	r1, #0
 8005e7c:	2026      	movs	r0, #38	@ 0x26
 8005e7e:	f001 fe0c 	bl	8007a9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005e82:	2026      	movs	r0, #38	@ 0x26
 8005e84:	f001 fe23 	bl	8007ace <HAL_NVIC_EnableIRQ>
}
 8005e88:	bf00      	nop
 8005e8a:	3780      	adds	r7, #128	@ 0x80
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}
 8005e90:	40008000 	.word	0x40008000
 8005e94:	40021000 	.word	0x40021000
 8005e98:	48000400 	.word	0x48000400
 8005e9c:	20002078 	.word	0x20002078
 8005ea0:	40020044 	.word	0x40020044
 8005ea4:	200020d8 	.word	0x200020d8
 8005ea8:	40020058 	.word	0x40020058
 8005eac:	40004400 	.word	0x40004400
 8005eb0:	20002138 	.word	0x20002138
 8005eb4:	4002001c 	.word	0x4002001c
 8005eb8:	20002198 	.word	0x20002198
 8005ebc:	40020030 	.word	0x40020030

08005ec0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005ec0:	480d      	ldr	r0, [pc, #52]	@ (8005ef8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005ec2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005ec4:	f7ff f9ba 	bl	800523c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005ec8:	480c      	ldr	r0, [pc, #48]	@ (8005efc <LoopForever+0x6>)
  ldr r1, =_edata
 8005eca:	490d      	ldr	r1, [pc, #52]	@ (8005f00 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005ecc:	4a0d      	ldr	r2, [pc, #52]	@ (8005f04 <LoopForever+0xe>)
  movs r3, #0
 8005ece:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8005ed0:	e002      	b.n	8005ed8 <LoopCopyDataInit>

08005ed2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005ed2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005ed4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005ed6:	3304      	adds	r3, #4

08005ed8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005ed8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005eda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005edc:	d3f9      	bcc.n	8005ed2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005ede:	4a0a      	ldr	r2, [pc, #40]	@ (8005f08 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005ee0:	4c0a      	ldr	r4, [pc, #40]	@ (8005f0c <LoopForever+0x16>)
  movs r3, #0
 8005ee2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005ee4:	e001      	b.n	8005eea <LoopFillZerobss>

08005ee6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005ee6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005ee8:	3204      	adds	r2, #4

08005eea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005eea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005eec:	d3fb      	bcc.n	8005ee6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005eee:	f007 fc1b 	bl	800d728 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005ef2:	f7fe f979 	bl	80041e8 <main>

08005ef6 <LoopForever>:

LoopForever:
    b LoopForever
 8005ef6:	e7fe      	b.n	8005ef6 <LoopForever>
  ldr   r0, =_estack
 8005ef8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005efc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005f00:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8005f04:	0800e744 	.word	0x0800e744
  ldr r2, =_sbss
 8005f08:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8005f0c:	20002344 	.word	0x20002344

08005f10 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005f10:	e7fe      	b.n	8005f10 <ADC1_2_IRQHandler>

08005f12 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005f12:	b580      	push	{r7, lr}
 8005f14:	b082      	sub	sp, #8
 8005f16:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005f1c:	2003      	movs	r0, #3
 8005f1e:	f001 fdb1 	bl	8007a84 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005f22:	2000      	movs	r0, #0
 8005f24:	f000 f80e 	bl	8005f44 <HAL_InitTick>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d002      	beq.n	8005f34 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005f2e:	2301      	movs	r3, #1
 8005f30:	71fb      	strb	r3, [r7, #7]
 8005f32:	e001      	b.n	8005f38 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005f34:	f7ff f87e 	bl	8005034 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005f38:	79fb      	ldrb	r3, [r7, #7]

}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3708      	adds	r7, #8
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}
	...

08005f44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b084      	sub	sp, #16
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8005f50:	4b16      	ldr	r3, [pc, #88]	@ (8005fac <HAL_InitTick+0x68>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d022      	beq.n	8005f9e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8005f58:	4b15      	ldr	r3, [pc, #84]	@ (8005fb0 <HAL_InitTick+0x6c>)
 8005f5a:	681a      	ldr	r2, [r3, #0]
 8005f5c:	4b13      	ldr	r3, [pc, #76]	@ (8005fac <HAL_InitTick+0x68>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8005f64:	fbb1 f3f3 	udiv	r3, r1, r3
 8005f68:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	f001 fdbc 	bl	8007aea <HAL_SYSTICK_Config>
 8005f72:	4603      	mov	r3, r0
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d10f      	bne.n	8005f98 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2b0f      	cmp	r3, #15
 8005f7c:	d809      	bhi.n	8005f92 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005f7e:	2200      	movs	r2, #0
 8005f80:	6879      	ldr	r1, [r7, #4]
 8005f82:	f04f 30ff 	mov.w	r0, #4294967295
 8005f86:	f001 fd88 	bl	8007a9a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005f8a:	4a0a      	ldr	r2, [pc, #40]	@ (8005fb4 <HAL_InitTick+0x70>)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6013      	str	r3, [r2, #0]
 8005f90:	e007      	b.n	8005fa2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8005f92:	2301      	movs	r3, #1
 8005f94:	73fb      	strb	r3, [r7, #15]
 8005f96:	e004      	b.n	8005fa2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005f98:	2301      	movs	r3, #1
 8005f9a:	73fb      	strb	r3, [r7, #15]
 8005f9c:	e001      	b.n	8005fa2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005fa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	3710      	adds	r7, #16
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bd80      	pop	{r7, pc}
 8005fac:	20000180 	.word	0x20000180
 8005fb0:	20000178 	.word	0x20000178
 8005fb4:	2000017c 	.word	0x2000017c

08005fb8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005fbc:	4b05      	ldr	r3, [pc, #20]	@ (8005fd4 <HAL_IncTick+0x1c>)
 8005fbe:	681a      	ldr	r2, [r3, #0]
 8005fc0:	4b05      	ldr	r3, [pc, #20]	@ (8005fd8 <HAL_IncTick+0x20>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4413      	add	r3, r2
 8005fc6:	4a03      	ldr	r2, [pc, #12]	@ (8005fd4 <HAL_IncTick+0x1c>)
 8005fc8:	6013      	str	r3, [r2, #0]
}
 8005fca:	bf00      	nop
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd2:	4770      	bx	lr
 8005fd4:	200021f8 	.word	0x200021f8
 8005fd8:	20000180 	.word	0x20000180

08005fdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	af00      	add	r7, sp, #0
  return uwTick;
 8005fe0:	4b03      	ldr	r3, [pc, #12]	@ (8005ff0 <HAL_GetTick+0x14>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fec:	4770      	bx	lr
 8005fee:	bf00      	nop
 8005ff0:	200021f8 	.word	0x200021f8

08005ff4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b083      	sub	sp, #12
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
 8005ffc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	689b      	ldr	r3, [r3, #8]
 8006002:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	431a      	orrs	r2, r3
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	609a      	str	r2, [r3, #8]
}
 800600e:	bf00      	nop
 8006010:	370c      	adds	r7, #12
 8006012:	46bd      	mov	sp, r7
 8006014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006018:	4770      	bx	lr

0800601a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800601a:	b480      	push	{r7}
 800601c:	b083      	sub	sp, #12
 800601e:	af00      	add	r7, sp, #0
 8006020:	6078      	str	r0, [r7, #4]
 8006022:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	689b      	ldr	r3, [r3, #8]
 8006028:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	431a      	orrs	r2, r3
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	609a      	str	r2, [r3, #8]
}
 8006034:	bf00      	nop
 8006036:	370c      	adds	r7, #12
 8006038:	46bd      	mov	sp, r7
 800603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603e:	4770      	bx	lr

08006040 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006040:	b480      	push	{r7}
 8006042:	b083      	sub	sp, #12
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	689b      	ldr	r3, [r3, #8]
 800604c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8006050:	4618      	mov	r0, r3
 8006052:	370c      	adds	r7, #12
 8006054:	46bd      	mov	sp, r7
 8006056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605a:	4770      	bx	lr

0800605c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800605c:	b480      	push	{r7}
 800605e:	b087      	sub	sp, #28
 8006060:	af00      	add	r7, sp, #0
 8006062:	60f8      	str	r0, [r7, #12]
 8006064:	60b9      	str	r1, [r7, #8]
 8006066:	607a      	str	r2, [r7, #4]
 8006068:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	3360      	adds	r3, #96	@ 0x60
 800606e:	461a      	mov	r2, r3
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	009b      	lsls	r3, r3, #2
 8006074:	4413      	add	r3, r2
 8006076:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	681a      	ldr	r2, [r3, #0]
 800607c:	4b08      	ldr	r3, [pc, #32]	@ (80060a0 <LL_ADC_SetOffset+0x44>)
 800607e:	4013      	ands	r3, r2
 8006080:	687a      	ldr	r2, [r7, #4]
 8006082:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8006086:	683a      	ldr	r2, [r7, #0]
 8006088:	430a      	orrs	r2, r1
 800608a:	4313      	orrs	r3, r2
 800608c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8006094:	bf00      	nop
 8006096:	371c      	adds	r7, #28
 8006098:	46bd      	mov	sp, r7
 800609a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609e:	4770      	bx	lr
 80060a0:	03fff000 	.word	0x03fff000

080060a4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80060a4:	b480      	push	{r7}
 80060a6:	b085      	sub	sp, #20
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
 80060ac:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	3360      	adds	r3, #96	@ 0x60
 80060b2:	461a      	mov	r2, r3
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	009b      	lsls	r3, r3, #2
 80060b8:	4413      	add	r3, r2
 80060ba:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	3714      	adds	r7, #20
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr

080060d0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b087      	sub	sp, #28
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	60f8      	str	r0, [r7, #12]
 80060d8:	60b9      	str	r1, [r7, #8]
 80060da:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	3360      	adds	r3, #96	@ 0x60
 80060e0:	461a      	mov	r2, r3
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	009b      	lsls	r3, r3, #2
 80060e6:	4413      	add	r3, r2
 80060e8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	431a      	orrs	r2, r3
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80060fa:	bf00      	nop
 80060fc:	371c      	adds	r7, #28
 80060fe:	46bd      	mov	sp, r7
 8006100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006104:	4770      	bx	lr

08006106 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8006106:	b480      	push	{r7}
 8006108:	b087      	sub	sp, #28
 800610a:	af00      	add	r7, sp, #0
 800610c:	60f8      	str	r0, [r7, #12]
 800610e:	60b9      	str	r1, [r7, #8]
 8006110:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	3360      	adds	r3, #96	@ 0x60
 8006116:	461a      	mov	r2, r3
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	009b      	lsls	r3, r3, #2
 800611c:	4413      	add	r3, r2
 800611e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	431a      	orrs	r2, r3
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8006130:	bf00      	nop
 8006132:	371c      	adds	r7, #28
 8006134:	46bd      	mov	sp, r7
 8006136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613a:	4770      	bx	lr

0800613c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800613c:	b480      	push	{r7}
 800613e:	b087      	sub	sp, #28
 8006140:	af00      	add	r7, sp, #0
 8006142:	60f8      	str	r0, [r7, #12]
 8006144:	60b9      	str	r1, [r7, #8]
 8006146:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	3360      	adds	r3, #96	@ 0x60
 800614c:	461a      	mov	r2, r3
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	009b      	lsls	r3, r3, #2
 8006152:	4413      	add	r3, r2
 8006154:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	431a      	orrs	r2, r3
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8006166:	bf00      	nop
 8006168:	371c      	adds	r7, #28
 800616a:	46bd      	mov	sp, r7
 800616c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006170:	4770      	bx	lr

08006172 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8006172:	b480      	push	{r7}
 8006174:	b083      	sub	sp, #12
 8006176:	af00      	add	r7, sp, #0
 8006178:	6078      	str	r0, [r7, #4]
 800617a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	695b      	ldr	r3, [r3, #20]
 8006180:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	431a      	orrs	r2, r3
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	615a      	str	r2, [r3, #20]
}
 800618c:	bf00      	nop
 800618e:	370c      	adds	r7, #12
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr

08006198 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8006198:	b480      	push	{r7}
 800619a:	b083      	sub	sp, #12
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	68db      	ldr	r3, [r3, #12]
 80061a4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d101      	bne.n	80061b0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80061ac:	2301      	movs	r3, #1
 80061ae:	e000      	b.n	80061b2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80061b0:	2300      	movs	r3, #0
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	370c      	adds	r7, #12
 80061b6:	46bd      	mov	sp, r7
 80061b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061bc:	4770      	bx	lr

080061be <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80061be:	b480      	push	{r7}
 80061c0:	b087      	sub	sp, #28
 80061c2:	af00      	add	r7, sp, #0
 80061c4:	60f8      	str	r0, [r7, #12]
 80061c6:	60b9      	str	r1, [r7, #8]
 80061c8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	3330      	adds	r3, #48	@ 0x30
 80061ce:	461a      	mov	r2, r3
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	0a1b      	lsrs	r3, r3, #8
 80061d4:	009b      	lsls	r3, r3, #2
 80061d6:	f003 030c 	and.w	r3, r3, #12
 80061da:	4413      	add	r3, r2
 80061dc:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	681a      	ldr	r2, [r3, #0]
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	f003 031f 	and.w	r3, r3, #31
 80061e8:	211f      	movs	r1, #31
 80061ea:	fa01 f303 	lsl.w	r3, r1, r3
 80061ee:	43db      	mvns	r3, r3
 80061f0:	401a      	ands	r2, r3
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	0e9b      	lsrs	r3, r3, #26
 80061f6:	f003 011f 	and.w	r1, r3, #31
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	f003 031f 	and.w	r3, r3, #31
 8006200:	fa01 f303 	lsl.w	r3, r1, r3
 8006204:	431a      	orrs	r2, r3
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800620a:	bf00      	nop
 800620c:	371c      	adds	r7, #28
 800620e:	46bd      	mov	sp, r7
 8006210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006214:	4770      	bx	lr

08006216 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8006216:	b480      	push	{r7}
 8006218:	b087      	sub	sp, #28
 800621a:	af00      	add	r7, sp, #0
 800621c:	60f8      	str	r0, [r7, #12]
 800621e:	60b9      	str	r1, [r7, #8]
 8006220:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	3314      	adds	r3, #20
 8006226:	461a      	mov	r2, r3
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	0e5b      	lsrs	r3, r3, #25
 800622c:	009b      	lsls	r3, r3, #2
 800622e:	f003 0304 	and.w	r3, r3, #4
 8006232:	4413      	add	r3, r2
 8006234:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	681a      	ldr	r2, [r3, #0]
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	0d1b      	lsrs	r3, r3, #20
 800623e:	f003 031f 	and.w	r3, r3, #31
 8006242:	2107      	movs	r1, #7
 8006244:	fa01 f303 	lsl.w	r3, r1, r3
 8006248:	43db      	mvns	r3, r3
 800624a:	401a      	ands	r2, r3
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	0d1b      	lsrs	r3, r3, #20
 8006250:	f003 031f 	and.w	r3, r3, #31
 8006254:	6879      	ldr	r1, [r7, #4]
 8006256:	fa01 f303 	lsl.w	r3, r1, r3
 800625a:	431a      	orrs	r2, r3
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8006260:	bf00      	nop
 8006262:	371c      	adds	r7, #28
 8006264:	46bd      	mov	sp, r7
 8006266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626a:	4770      	bx	lr

0800626c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800626c:	b480      	push	{r7}
 800626e:	b085      	sub	sp, #20
 8006270:	af00      	add	r7, sp, #0
 8006272:	60f8      	str	r0, [r7, #12]
 8006274:	60b9      	str	r1, [r7, #8]
 8006276:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006284:	43db      	mvns	r3, r3
 8006286:	401a      	ands	r2, r3
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f003 0318 	and.w	r3, r3, #24
 800628e:	4908      	ldr	r1, [pc, #32]	@ (80062b0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8006290:	40d9      	lsrs	r1, r3
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	400b      	ands	r3, r1
 8006296:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800629a:	431a      	orrs	r2, r3
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80062a2:	bf00      	nop
 80062a4:	3714      	adds	r7, #20
 80062a6:	46bd      	mov	sp, r7
 80062a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ac:	4770      	bx	lr
 80062ae:	bf00      	nop
 80062b0:	0007ffff 	.word	0x0007ffff

080062b4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b083      	sub	sp, #12
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	689b      	ldr	r3, [r3, #8]
 80062c0:	f003 031f 	and.w	r3, r3, #31
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	370c      	adds	r7, #12
 80062c8:	46bd      	mov	sp, r7
 80062ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ce:	4770      	bx	lr

080062d0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b083      	sub	sp, #12
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	689b      	ldr	r3, [r3, #8]
 80062dc:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80062e0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80062e4:	687a      	ldr	r2, [r7, #4]
 80062e6:	6093      	str	r3, [r2, #8]
}
 80062e8:	bf00      	nop
 80062ea:	370c      	adds	r7, #12
 80062ec:	46bd      	mov	sp, r7
 80062ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f2:	4770      	bx	lr

080062f4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80062f4:	b480      	push	{r7}
 80062f6:	b083      	sub	sp, #12
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	689b      	ldr	r3, [r3, #8]
 8006300:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006304:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006308:	d101      	bne.n	800630e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800630a:	2301      	movs	r3, #1
 800630c:	e000      	b.n	8006310 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800630e:	2300      	movs	r3, #0
}
 8006310:	4618      	mov	r0, r3
 8006312:	370c      	adds	r7, #12
 8006314:	46bd      	mov	sp, r7
 8006316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631a:	4770      	bx	lr

0800631c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800631c:	b480      	push	{r7}
 800631e:	b083      	sub	sp, #12
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	689b      	ldr	r3, [r3, #8]
 8006328:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800632c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006330:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8006338:	bf00      	nop
 800633a:	370c      	adds	r7, #12
 800633c:	46bd      	mov	sp, r7
 800633e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006342:	4770      	bx	lr

08006344 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8006344:	b480      	push	{r7}
 8006346:	b083      	sub	sp, #12
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	689b      	ldr	r3, [r3, #8]
 8006350:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006354:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006358:	d101      	bne.n	800635e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800635a:	2301      	movs	r3, #1
 800635c:	e000      	b.n	8006360 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800635e:	2300      	movs	r3, #0
}
 8006360:	4618      	mov	r0, r3
 8006362:	370c      	adds	r7, #12
 8006364:	46bd      	mov	sp, r7
 8006366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636a:	4770      	bx	lr

0800636c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800636c:	b480      	push	{r7}
 800636e:	b083      	sub	sp, #12
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	689b      	ldr	r3, [r3, #8]
 8006378:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800637c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006380:	f043 0201 	orr.w	r2, r3, #1
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8006388:	bf00      	nop
 800638a:	370c      	adds	r7, #12
 800638c:	46bd      	mov	sp, r7
 800638e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006392:	4770      	bx	lr

08006394 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8006394:	b480      	push	{r7}
 8006396:	b083      	sub	sp, #12
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	689b      	ldr	r3, [r3, #8]
 80063a0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80063a4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80063a8:	f043 0202 	orr.w	r2, r3, #2
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80063b0:	bf00      	nop
 80063b2:	370c      	adds	r7, #12
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr

080063bc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80063bc:	b480      	push	{r7}
 80063be:	b083      	sub	sp, #12
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	689b      	ldr	r3, [r3, #8]
 80063c8:	f003 0301 	and.w	r3, r3, #1
 80063cc:	2b01      	cmp	r3, #1
 80063ce:	d101      	bne.n	80063d4 <LL_ADC_IsEnabled+0x18>
 80063d0:	2301      	movs	r3, #1
 80063d2:	e000      	b.n	80063d6 <LL_ADC_IsEnabled+0x1a>
 80063d4:	2300      	movs	r3, #0
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	370c      	adds	r7, #12
 80063da:	46bd      	mov	sp, r7
 80063dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e0:	4770      	bx	lr

080063e2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80063e2:	b480      	push	{r7}
 80063e4:	b083      	sub	sp, #12
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	689b      	ldr	r3, [r3, #8]
 80063ee:	f003 0302 	and.w	r3, r3, #2
 80063f2:	2b02      	cmp	r3, #2
 80063f4:	d101      	bne.n	80063fa <LL_ADC_IsDisableOngoing+0x18>
 80063f6:	2301      	movs	r3, #1
 80063f8:	e000      	b.n	80063fc <LL_ADC_IsDisableOngoing+0x1a>
 80063fa:	2300      	movs	r3, #0
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	370c      	adds	r7, #12
 8006400:	46bd      	mov	sp, r7
 8006402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006406:	4770      	bx	lr

08006408 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8006408:	b480      	push	{r7}
 800640a:	b083      	sub	sp, #12
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	689b      	ldr	r3, [r3, #8]
 8006414:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006418:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800641c:	f043 0204 	orr.w	r2, r3, #4
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8006424:	bf00      	nop
 8006426:	370c      	adds	r7, #12
 8006428:	46bd      	mov	sp, r7
 800642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642e:	4770      	bx	lr

08006430 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8006430:	b480      	push	{r7}
 8006432:	b083      	sub	sp, #12
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	689b      	ldr	r3, [r3, #8]
 800643c:	f003 0304 	and.w	r3, r3, #4
 8006440:	2b04      	cmp	r3, #4
 8006442:	d101      	bne.n	8006448 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006444:	2301      	movs	r3, #1
 8006446:	e000      	b.n	800644a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006448:	2300      	movs	r3, #0
}
 800644a:	4618      	mov	r0, r3
 800644c:	370c      	adds	r7, #12
 800644e:	46bd      	mov	sp, r7
 8006450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006454:	4770      	bx	lr

08006456 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8006456:	b480      	push	{r7}
 8006458:	b083      	sub	sp, #12
 800645a:	af00      	add	r7, sp, #0
 800645c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	689b      	ldr	r3, [r3, #8]
 8006462:	f003 0308 	and.w	r3, r3, #8
 8006466:	2b08      	cmp	r3, #8
 8006468:	d101      	bne.n	800646e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800646a:	2301      	movs	r3, #1
 800646c:	e000      	b.n	8006470 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800646e:	2300      	movs	r3, #0
}
 8006470:	4618      	mov	r0, r3
 8006472:	370c      	adds	r7, #12
 8006474:	46bd      	mov	sp, r7
 8006476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647a:	4770      	bx	lr

0800647c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800647c:	b590      	push	{r4, r7, lr}
 800647e:	b089      	sub	sp, #36	@ 0x24
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006484:	2300      	movs	r3, #0
 8006486:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8006488:	2300      	movs	r3, #0
 800648a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d101      	bne.n	8006496 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8006492:	2301      	movs	r3, #1
 8006494:	e1a9      	b.n	80067ea <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	695b      	ldr	r3, [r3, #20]
 800649a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d109      	bne.n	80064b8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f7fd fb59 	bl	8003b5c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2200      	movs	r2, #0
 80064ae:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2200      	movs	r2, #0
 80064b4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4618      	mov	r0, r3
 80064be:	f7ff ff19 	bl	80062f4 <LL_ADC_IsDeepPowerDownEnabled>
 80064c2:	4603      	mov	r3, r0
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d004      	beq.n	80064d2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4618      	mov	r0, r3
 80064ce:	f7ff feff 	bl	80062d0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4618      	mov	r0, r3
 80064d8:	f7ff ff34 	bl	8006344 <LL_ADC_IsInternalRegulatorEnabled>
 80064dc:	4603      	mov	r3, r0
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d115      	bne.n	800650e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4618      	mov	r0, r3
 80064e8:	f7ff ff18 	bl	800631c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80064ec:	4b9c      	ldr	r3, [pc, #624]	@ (8006760 <HAL_ADC_Init+0x2e4>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	099b      	lsrs	r3, r3, #6
 80064f2:	4a9c      	ldr	r2, [pc, #624]	@ (8006764 <HAL_ADC_Init+0x2e8>)
 80064f4:	fba2 2303 	umull	r2, r3, r2, r3
 80064f8:	099b      	lsrs	r3, r3, #6
 80064fa:	3301      	adds	r3, #1
 80064fc:	005b      	lsls	r3, r3, #1
 80064fe:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8006500:	e002      	b.n	8006508 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	3b01      	subs	r3, #1
 8006506:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d1f9      	bne.n	8006502 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4618      	mov	r0, r3
 8006514:	f7ff ff16 	bl	8006344 <LL_ADC_IsInternalRegulatorEnabled>
 8006518:	4603      	mov	r3, r0
 800651a:	2b00      	cmp	r3, #0
 800651c:	d10d      	bne.n	800653a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006522:	f043 0210 	orr.w	r2, r3, #16
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800652e:	f043 0201 	orr.w	r2, r3, #1
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8006536:	2301      	movs	r3, #1
 8006538:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4618      	mov	r0, r3
 8006540:	f7ff ff76 	bl	8006430 <LL_ADC_REG_IsConversionOngoing>
 8006544:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800654a:	f003 0310 	and.w	r3, r3, #16
 800654e:	2b00      	cmp	r3, #0
 8006550:	f040 8142 	bne.w	80067d8 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	2b00      	cmp	r3, #0
 8006558:	f040 813e 	bne.w	80067d8 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006560:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8006564:	f043 0202 	orr.w	r2, r3, #2
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4618      	mov	r0, r3
 8006572:	f7ff ff23 	bl	80063bc <LL_ADC_IsEnabled>
 8006576:	4603      	mov	r3, r0
 8006578:	2b00      	cmp	r3, #0
 800657a:	d141      	bne.n	8006600 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006584:	d004      	beq.n	8006590 <HAL_ADC_Init+0x114>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a77      	ldr	r2, [pc, #476]	@ (8006768 <HAL_ADC_Init+0x2ec>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d10f      	bne.n	80065b0 <HAL_ADC_Init+0x134>
 8006590:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8006594:	f7ff ff12 	bl	80063bc <LL_ADC_IsEnabled>
 8006598:	4604      	mov	r4, r0
 800659a:	4873      	ldr	r0, [pc, #460]	@ (8006768 <HAL_ADC_Init+0x2ec>)
 800659c:	f7ff ff0e 	bl	80063bc <LL_ADC_IsEnabled>
 80065a0:	4603      	mov	r3, r0
 80065a2:	4323      	orrs	r3, r4
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	bf0c      	ite	eq
 80065a8:	2301      	moveq	r3, #1
 80065aa:	2300      	movne	r3, #0
 80065ac:	b2db      	uxtb	r3, r3
 80065ae:	e012      	b.n	80065d6 <HAL_ADC_Init+0x15a>
 80065b0:	486e      	ldr	r0, [pc, #440]	@ (800676c <HAL_ADC_Init+0x2f0>)
 80065b2:	f7ff ff03 	bl	80063bc <LL_ADC_IsEnabled>
 80065b6:	4604      	mov	r4, r0
 80065b8:	486d      	ldr	r0, [pc, #436]	@ (8006770 <HAL_ADC_Init+0x2f4>)
 80065ba:	f7ff feff 	bl	80063bc <LL_ADC_IsEnabled>
 80065be:	4603      	mov	r3, r0
 80065c0:	431c      	orrs	r4, r3
 80065c2:	486c      	ldr	r0, [pc, #432]	@ (8006774 <HAL_ADC_Init+0x2f8>)
 80065c4:	f7ff fefa 	bl	80063bc <LL_ADC_IsEnabled>
 80065c8:	4603      	mov	r3, r0
 80065ca:	4323      	orrs	r3, r4
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	bf0c      	ite	eq
 80065d0:	2301      	moveq	r3, #1
 80065d2:	2300      	movne	r3, #0
 80065d4:	b2db      	uxtb	r3, r3
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d012      	beq.n	8006600 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80065e2:	d004      	beq.n	80065ee <HAL_ADC_Init+0x172>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a5f      	ldr	r2, [pc, #380]	@ (8006768 <HAL_ADC_Init+0x2ec>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d101      	bne.n	80065f2 <HAL_ADC_Init+0x176>
 80065ee:	4a62      	ldr	r2, [pc, #392]	@ (8006778 <HAL_ADC_Init+0x2fc>)
 80065f0:	e000      	b.n	80065f4 <HAL_ADC_Init+0x178>
 80065f2:	4a62      	ldr	r2, [pc, #392]	@ (800677c <HAL_ADC_Init+0x300>)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	4619      	mov	r1, r3
 80065fa:	4610      	mov	r0, r2
 80065fc:	f7ff fcfa 	bl	8005ff4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	7f5b      	ldrb	r3, [r3, #29]
 8006604:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800660a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8006610:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8006616:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800661e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006620:	4313      	orrs	r3, r2
 8006622:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800662a:	2b01      	cmp	r3, #1
 800662c:	d106      	bne.n	800663c <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006632:	3b01      	subs	r3, #1
 8006634:	045b      	lsls	r3, r3, #17
 8006636:	69ba      	ldr	r2, [r7, #24]
 8006638:	4313      	orrs	r3, r2
 800663a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006640:	2b00      	cmp	r3, #0
 8006642:	d009      	beq.n	8006658 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006648:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006650:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006652:	69ba      	ldr	r2, [r7, #24]
 8006654:	4313      	orrs	r3, r2
 8006656:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	68da      	ldr	r2, [r3, #12]
 800665e:	4b48      	ldr	r3, [pc, #288]	@ (8006780 <HAL_ADC_Init+0x304>)
 8006660:	4013      	ands	r3, r2
 8006662:	687a      	ldr	r2, [r7, #4]
 8006664:	6812      	ldr	r2, [r2, #0]
 8006666:	69b9      	ldr	r1, [r7, #24]
 8006668:	430b      	orrs	r3, r1
 800666a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	691b      	ldr	r3, [r3, #16]
 8006672:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	430a      	orrs	r2, r1
 8006680:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4618      	mov	r0, r3
 8006688:	f7ff fee5 	bl	8006456 <LL_ADC_INJ_IsConversionOngoing>
 800668c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d17f      	bne.n	8006794 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d17c      	bne.n	8006794 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800669e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80066a6:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80066a8:	4313      	orrs	r3, r2
 80066aa:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	68db      	ldr	r3, [r3, #12]
 80066b2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80066b6:	f023 0302 	bic.w	r3, r3, #2
 80066ba:	687a      	ldr	r2, [r7, #4]
 80066bc:	6812      	ldr	r2, [r2, #0]
 80066be:	69b9      	ldr	r1, [r7, #24]
 80066c0:	430b      	orrs	r3, r1
 80066c2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	691b      	ldr	r3, [r3, #16]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d017      	beq.n	80066fc <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	691a      	ldr	r2, [r3, #16]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80066da:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80066e4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80066e8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80066ec:	687a      	ldr	r2, [r7, #4]
 80066ee:	6911      	ldr	r1, [r2, #16]
 80066f0:	687a      	ldr	r2, [r7, #4]
 80066f2:	6812      	ldr	r2, [r2, #0]
 80066f4:	430b      	orrs	r3, r1
 80066f6:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80066fa:	e013      	b.n	8006724 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	691a      	ldr	r2, [r3, #16]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800670a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006714:	687a      	ldr	r2, [r7, #4]
 8006716:	6812      	ldr	r2, [r2, #0]
 8006718:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800671c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006720:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800672a:	2b01      	cmp	r3, #1
 800672c:	d12a      	bne.n	8006784 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	691b      	ldr	r3, [r3, #16]
 8006734:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006738:	f023 0304 	bic.w	r3, r3, #4
 800673c:	687a      	ldr	r2, [r7, #4]
 800673e:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8006740:	687a      	ldr	r2, [r7, #4]
 8006742:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006744:	4311      	orrs	r1, r2
 8006746:	687a      	ldr	r2, [r7, #4]
 8006748:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800674a:	4311      	orrs	r1, r2
 800674c:	687a      	ldr	r2, [r7, #4]
 800674e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006750:	430a      	orrs	r2, r1
 8006752:	431a      	orrs	r2, r3
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f042 0201 	orr.w	r2, r2, #1
 800675c:	611a      	str	r2, [r3, #16]
 800675e:	e019      	b.n	8006794 <HAL_ADC_Init+0x318>
 8006760:	20000178 	.word	0x20000178
 8006764:	053e2d63 	.word	0x053e2d63
 8006768:	50000100 	.word	0x50000100
 800676c:	50000400 	.word	0x50000400
 8006770:	50000500 	.word	0x50000500
 8006774:	50000600 	.word	0x50000600
 8006778:	50000300 	.word	0x50000300
 800677c:	50000700 	.word	0x50000700
 8006780:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	691a      	ldr	r2, [r3, #16]
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f022 0201 	bic.w	r2, r2, #1
 8006792:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	695b      	ldr	r3, [r3, #20]
 8006798:	2b01      	cmp	r3, #1
 800679a:	d10c      	bne.n	80067b6 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067a2:	f023 010f 	bic.w	r1, r3, #15
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6a1b      	ldr	r3, [r3, #32]
 80067aa:	1e5a      	subs	r2, r3, #1
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	430a      	orrs	r2, r1
 80067b2:	631a      	str	r2, [r3, #48]	@ 0x30
 80067b4:	e007      	b.n	80067c6 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f022 020f 	bic.w	r2, r2, #15
 80067c4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80067ca:	f023 0303 	bic.w	r3, r3, #3
 80067ce:	f043 0201 	orr.w	r2, r3, #1
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80067d6:	e007      	b.n	80067e8 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80067dc:	f043 0210 	orr.w	r2, r3, #16
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80067e4:	2301      	movs	r3, #1
 80067e6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80067e8:	7ffb      	ldrb	r3, [r7, #31]
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	3724      	adds	r7, #36	@ 0x24
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd90      	pop	{r4, r7, pc}
 80067f2:	bf00      	nop

080067f4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b086      	sub	sp, #24
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	60f8      	str	r0, [r7, #12]
 80067fc:	60b9      	str	r1, [r7, #8]
 80067fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006808:	d004      	beq.n	8006814 <HAL_ADC_Start_DMA+0x20>
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a5a      	ldr	r2, [pc, #360]	@ (8006978 <HAL_ADC_Start_DMA+0x184>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d101      	bne.n	8006818 <HAL_ADC_Start_DMA+0x24>
 8006814:	4b59      	ldr	r3, [pc, #356]	@ (800697c <HAL_ADC_Start_DMA+0x188>)
 8006816:	e000      	b.n	800681a <HAL_ADC_Start_DMA+0x26>
 8006818:	4b59      	ldr	r3, [pc, #356]	@ (8006980 <HAL_ADC_Start_DMA+0x18c>)
 800681a:	4618      	mov	r0, r3
 800681c:	f7ff fd4a 	bl	80062b4 <LL_ADC_GetMultimode>
 8006820:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4618      	mov	r0, r3
 8006828:	f7ff fe02 	bl	8006430 <LL_ADC_REG_IsConversionOngoing>
 800682c:	4603      	mov	r3, r0
 800682e:	2b00      	cmp	r3, #0
 8006830:	f040 809b 	bne.w	800696a <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800683a:	2b01      	cmp	r3, #1
 800683c:	d101      	bne.n	8006842 <HAL_ADC_Start_DMA+0x4e>
 800683e:	2302      	movs	r3, #2
 8006840:	e096      	b.n	8006970 <HAL_ADC_Start_DMA+0x17c>
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	2201      	movs	r2, #1
 8006846:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a4d      	ldr	r2, [pc, #308]	@ (8006984 <HAL_ADC_Start_DMA+0x190>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d008      	beq.n	8006866 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d005      	beq.n	8006866 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	2b05      	cmp	r3, #5
 800685e:	d002      	beq.n	8006866 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	2b09      	cmp	r3, #9
 8006864:	d17a      	bne.n	800695c <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8006866:	68f8      	ldr	r0, [r7, #12]
 8006868:	f000 fcf6 	bl	8007258 <ADC_Enable>
 800686c:	4603      	mov	r3, r0
 800686e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8006870:	7dfb      	ldrb	r3, [r7, #23]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d16d      	bne.n	8006952 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800687a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800687e:	f023 0301 	bic.w	r3, r3, #1
 8006882:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a3a      	ldr	r2, [pc, #232]	@ (8006978 <HAL_ADC_Start_DMA+0x184>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d009      	beq.n	80068a8 <HAL_ADC_Start_DMA+0xb4>
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a3b      	ldr	r2, [pc, #236]	@ (8006988 <HAL_ADC_Start_DMA+0x194>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d002      	beq.n	80068a4 <HAL_ADC_Start_DMA+0xb0>
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	e003      	b.n	80068ac <HAL_ADC_Start_DMA+0xb8>
 80068a4:	4b39      	ldr	r3, [pc, #228]	@ (800698c <HAL_ADC_Start_DMA+0x198>)
 80068a6:	e001      	b.n	80068ac <HAL_ADC_Start_DMA+0xb8>
 80068a8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80068ac:	68fa      	ldr	r2, [r7, #12]
 80068ae:	6812      	ldr	r2, [r2, #0]
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d002      	beq.n	80068ba <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d105      	bne.n	80068c6 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068be:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068ca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d006      	beq.n	80068e0 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80068d6:	f023 0206 	bic.w	r2, r3, #6
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	661a      	str	r2, [r3, #96]	@ 0x60
 80068de:	e002      	b.n	80068e6 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	2200      	movs	r2, #0
 80068e4:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068ea:	4a29      	ldr	r2, [pc, #164]	@ (8006990 <HAL_ADC_Start_DMA+0x19c>)
 80068ec:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068f2:	4a28      	ldr	r2, [pc, #160]	@ (8006994 <HAL_ADC_Start_DMA+0x1a0>)
 80068f4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068fa:	4a27      	ldr	r2, [pc, #156]	@ (8006998 <HAL_ADC_Start_DMA+0x1a4>)
 80068fc:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	221c      	movs	r2, #28
 8006904:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	2200      	movs	r2, #0
 800690a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	685a      	ldr	r2, [r3, #4]
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f042 0210 	orr.w	r2, r2, #16
 800691c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	68da      	ldr	r2, [r3, #12]
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f042 0201 	orr.w	r2, r2, #1
 800692c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	3340      	adds	r3, #64	@ 0x40
 8006938:	4619      	mov	r1, r3
 800693a:	68ba      	ldr	r2, [r7, #8]
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f001 f989 	bl	8007c54 <HAL_DMA_Start_IT>
 8006942:	4603      	mov	r3, r0
 8006944:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4618      	mov	r0, r3
 800694c:	f7ff fd5c 	bl	8006408 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8006950:	e00d      	b.n	800696e <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	2200      	movs	r2, #0
 8006956:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 800695a:	e008      	b.n	800696e <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800695c:	2301      	movs	r3, #1
 800695e:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2200      	movs	r2, #0
 8006964:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8006968:	e001      	b.n	800696e <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800696a:	2302      	movs	r3, #2
 800696c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800696e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006970:	4618      	mov	r0, r3
 8006972:	3718      	adds	r7, #24
 8006974:	46bd      	mov	sp, r7
 8006976:	bd80      	pop	{r7, pc}
 8006978:	50000100 	.word	0x50000100
 800697c:	50000300 	.word	0x50000300
 8006980:	50000700 	.word	0x50000700
 8006984:	50000600 	.word	0x50000600
 8006988:	50000500 	.word	0x50000500
 800698c:	50000400 	.word	0x50000400
 8006990:	08007443 	.word	0x08007443
 8006994:	0800751b 	.word	0x0800751b
 8006998:	08007537 	.word	0x08007537

0800699c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800699c:	b480      	push	{r7}
 800699e:	b083      	sub	sp, #12
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80069a4:	bf00      	nop
 80069a6:	370c      	adds	r7, #12
 80069a8:	46bd      	mov	sp, r7
 80069aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ae:	4770      	bx	lr

080069b0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b083      	sub	sp, #12
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80069b8:	bf00      	nop
 80069ba:	370c      	adds	r7, #12
 80069bc:	46bd      	mov	sp, r7
 80069be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c2:	4770      	bx	lr

080069c4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b083      	sub	sp, #12
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80069cc:	bf00      	nop
 80069ce:	370c      	adds	r7, #12
 80069d0:	46bd      	mov	sp, r7
 80069d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d6:	4770      	bx	lr

080069d8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b0b6      	sub	sp, #216	@ 0xd8
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
 80069e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80069e2:	2300      	movs	r3, #0
 80069e4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80069e8:	2300      	movs	r3, #0
 80069ea:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80069f2:	2b01      	cmp	r3, #1
 80069f4:	d102      	bne.n	80069fc <HAL_ADC_ConfigChannel+0x24>
 80069f6:	2302      	movs	r3, #2
 80069f8:	f000 bc13 	b.w	8007222 <HAL_ADC_ConfigChannel+0x84a>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2201      	movs	r2, #1
 8006a00:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4618      	mov	r0, r3
 8006a0a:	f7ff fd11 	bl	8006430 <LL_ADC_REG_IsConversionOngoing>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	f040 83f3 	bne.w	80071fc <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6818      	ldr	r0, [r3, #0]
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	6859      	ldr	r1, [r3, #4]
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	461a      	mov	r2, r3
 8006a24:	f7ff fbcb 	bl	80061be <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	f7ff fcff 	bl	8006430 <LL_ADC_REG_IsConversionOngoing>
 8006a32:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	f7ff fd0b 	bl	8006456 <LL_ADC_INJ_IsConversionOngoing>
 8006a40:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006a44:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	f040 81d9 	bne.w	8006e00 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006a4e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	f040 81d4 	bne.w	8006e00 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	689b      	ldr	r3, [r3, #8]
 8006a5c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006a60:	d10f      	bne.n	8006a82 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6818      	ldr	r0, [r3, #0]
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	4619      	mov	r1, r3
 8006a6e:	f7ff fbd2 	bl	8006216 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	f7ff fb79 	bl	8006172 <LL_ADC_SetSamplingTimeCommonConfig>
 8006a80:	e00e      	b.n	8006aa0 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6818      	ldr	r0, [r3, #0]
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	6819      	ldr	r1, [r3, #0]
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	689b      	ldr	r3, [r3, #8]
 8006a8e:	461a      	mov	r2, r3
 8006a90:	f7ff fbc1 	bl	8006216 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	2100      	movs	r1, #0
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f7ff fb69 	bl	8006172 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	695a      	ldr	r2, [r3, #20]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	68db      	ldr	r3, [r3, #12]
 8006aaa:	08db      	lsrs	r3, r3, #3
 8006aac:	f003 0303 	and.w	r3, r3, #3
 8006ab0:	005b      	lsls	r3, r3, #1
 8006ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ab6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	691b      	ldr	r3, [r3, #16]
 8006abe:	2b04      	cmp	r3, #4
 8006ac0:	d022      	beq.n	8006b08 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6818      	ldr	r0, [r3, #0]
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	6919      	ldr	r1, [r3, #16]
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	681a      	ldr	r2, [r3, #0]
 8006ace:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006ad2:	f7ff fac3 	bl	800605c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6818      	ldr	r0, [r3, #0]
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	6919      	ldr	r1, [r3, #16]
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	699b      	ldr	r3, [r3, #24]
 8006ae2:	461a      	mov	r2, r3
 8006ae4:	f7ff fb0f 	bl	8006106 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6818      	ldr	r0, [r3, #0]
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8006af4:	2b01      	cmp	r3, #1
 8006af6:	d102      	bne.n	8006afe <HAL_ADC_ConfigChannel+0x126>
 8006af8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006afc:	e000      	b.n	8006b00 <HAL_ADC_ConfigChannel+0x128>
 8006afe:	2300      	movs	r3, #0
 8006b00:	461a      	mov	r2, r3
 8006b02:	f7ff fb1b 	bl	800613c <LL_ADC_SetOffsetSaturation>
 8006b06:	e17b      	b.n	8006e00 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	2100      	movs	r1, #0
 8006b0e:	4618      	mov	r0, r3
 8006b10:	f7ff fac8 	bl	80060a4 <LL_ADC_GetOffsetChannel>
 8006b14:	4603      	mov	r3, r0
 8006b16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d10a      	bne.n	8006b34 <HAL_ADC_ConfigChannel+0x15c>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	2100      	movs	r1, #0
 8006b24:	4618      	mov	r0, r3
 8006b26:	f7ff fabd 	bl	80060a4 <LL_ADC_GetOffsetChannel>
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	0e9b      	lsrs	r3, r3, #26
 8006b2e:	f003 021f 	and.w	r2, r3, #31
 8006b32:	e01e      	b.n	8006b72 <HAL_ADC_ConfigChannel+0x19a>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	2100      	movs	r1, #0
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	f7ff fab2 	bl	80060a4 <LL_ADC_GetOffsetChannel>
 8006b40:	4603      	mov	r3, r0
 8006b42:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b46:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006b4a:	fa93 f3a3 	rbit	r3, r3
 8006b4e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006b52:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006b56:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8006b5a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d101      	bne.n	8006b66 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8006b62:	2320      	movs	r3, #32
 8006b64:	e004      	b.n	8006b70 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8006b66:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006b6a:	fab3 f383 	clz	r3, r3
 8006b6e:	b2db      	uxtb	r3, r3
 8006b70:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d105      	bne.n	8006b8a <HAL_ADC_ConfigChannel+0x1b2>
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	0e9b      	lsrs	r3, r3, #26
 8006b84:	f003 031f 	and.w	r3, r3, #31
 8006b88:	e018      	b.n	8006bbc <HAL_ADC_ConfigChannel+0x1e4>
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b92:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006b96:	fa93 f3a3 	rbit	r3, r3
 8006b9a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8006b9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006ba2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8006ba6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d101      	bne.n	8006bb2 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8006bae:	2320      	movs	r3, #32
 8006bb0:	e004      	b.n	8006bbc <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8006bb2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006bb6:	fab3 f383 	clz	r3, r3
 8006bba:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006bbc:	429a      	cmp	r2, r3
 8006bbe:	d106      	bne.n	8006bce <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	2100      	movs	r1, #0
 8006bc8:	4618      	mov	r0, r3
 8006bca:	f7ff fa81 	bl	80060d0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	2101      	movs	r1, #1
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	f7ff fa65 	bl	80060a4 <LL_ADC_GetOffsetChannel>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d10a      	bne.n	8006bfa <HAL_ADC_ConfigChannel+0x222>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	2101      	movs	r1, #1
 8006bea:	4618      	mov	r0, r3
 8006bec:	f7ff fa5a 	bl	80060a4 <LL_ADC_GetOffsetChannel>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	0e9b      	lsrs	r3, r3, #26
 8006bf4:	f003 021f 	and.w	r2, r3, #31
 8006bf8:	e01e      	b.n	8006c38 <HAL_ADC_ConfigChannel+0x260>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	2101      	movs	r1, #1
 8006c00:	4618      	mov	r0, r3
 8006c02:	f7ff fa4f 	bl	80060a4 <LL_ADC_GetOffsetChannel>
 8006c06:	4603      	mov	r3, r0
 8006c08:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c0c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006c10:	fa93 f3a3 	rbit	r3, r3
 8006c14:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8006c18:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006c1c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8006c20:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d101      	bne.n	8006c2c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8006c28:	2320      	movs	r3, #32
 8006c2a:	e004      	b.n	8006c36 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8006c2c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006c30:	fab3 f383 	clz	r3, r3
 8006c34:	b2db      	uxtb	r3, r3
 8006c36:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d105      	bne.n	8006c50 <HAL_ADC_ConfigChannel+0x278>
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	0e9b      	lsrs	r3, r3, #26
 8006c4a:	f003 031f 	and.w	r3, r3, #31
 8006c4e:	e018      	b.n	8006c82 <HAL_ADC_ConfigChannel+0x2aa>
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c58:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006c5c:	fa93 f3a3 	rbit	r3, r3
 8006c60:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8006c64:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006c68:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8006c6c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d101      	bne.n	8006c78 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8006c74:	2320      	movs	r3, #32
 8006c76:	e004      	b.n	8006c82 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8006c78:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006c7c:	fab3 f383 	clz	r3, r3
 8006c80:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006c82:	429a      	cmp	r2, r3
 8006c84:	d106      	bne.n	8006c94 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	2101      	movs	r1, #1
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f7ff fa1e 	bl	80060d0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	2102      	movs	r1, #2
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f7ff fa02 	bl	80060a4 <LL_ADC_GetOffsetChannel>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d10a      	bne.n	8006cc0 <HAL_ADC_ConfigChannel+0x2e8>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	2102      	movs	r1, #2
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	f7ff f9f7 	bl	80060a4 <LL_ADC_GetOffsetChannel>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	0e9b      	lsrs	r3, r3, #26
 8006cba:	f003 021f 	and.w	r2, r3, #31
 8006cbe:	e01e      	b.n	8006cfe <HAL_ADC_ConfigChannel+0x326>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	2102      	movs	r1, #2
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f7ff f9ec 	bl	80060a4 <LL_ADC_GetOffsetChannel>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006cd6:	fa93 f3a3 	rbit	r3, r3
 8006cda:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8006cde:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006ce2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8006ce6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d101      	bne.n	8006cf2 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8006cee:	2320      	movs	r3, #32
 8006cf0:	e004      	b.n	8006cfc <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8006cf2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006cf6:	fab3 f383 	clz	r3, r3
 8006cfa:	b2db      	uxtb	r3, r3
 8006cfc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d105      	bne.n	8006d16 <HAL_ADC_ConfigChannel+0x33e>
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	0e9b      	lsrs	r3, r3, #26
 8006d10:	f003 031f 	and.w	r3, r3, #31
 8006d14:	e016      	b.n	8006d44 <HAL_ADC_ConfigChannel+0x36c>
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d1e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006d22:	fa93 f3a3 	rbit	r3, r3
 8006d26:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8006d28:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006d2a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8006d2e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d101      	bne.n	8006d3a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8006d36:	2320      	movs	r3, #32
 8006d38:	e004      	b.n	8006d44 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8006d3a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006d3e:	fab3 f383 	clz	r3, r3
 8006d42:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006d44:	429a      	cmp	r2, r3
 8006d46:	d106      	bne.n	8006d56 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	2102      	movs	r1, #2
 8006d50:	4618      	mov	r0, r3
 8006d52:	f7ff f9bd 	bl	80060d0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	2103      	movs	r1, #3
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	f7ff f9a1 	bl	80060a4 <LL_ADC_GetOffsetChannel>
 8006d62:	4603      	mov	r3, r0
 8006d64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d10a      	bne.n	8006d82 <HAL_ADC_ConfigChannel+0x3aa>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	2103      	movs	r1, #3
 8006d72:	4618      	mov	r0, r3
 8006d74:	f7ff f996 	bl	80060a4 <LL_ADC_GetOffsetChannel>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	0e9b      	lsrs	r3, r3, #26
 8006d7c:	f003 021f 	and.w	r2, r3, #31
 8006d80:	e017      	b.n	8006db2 <HAL_ADC_ConfigChannel+0x3da>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	2103      	movs	r1, #3
 8006d88:	4618      	mov	r0, r3
 8006d8a:	f7ff f98b 	bl	80060a4 <LL_ADC_GetOffsetChannel>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d92:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006d94:	fa93 f3a3 	rbit	r3, r3
 8006d98:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8006d9a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006d9c:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8006d9e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d101      	bne.n	8006da8 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8006da4:	2320      	movs	r3, #32
 8006da6:	e003      	b.n	8006db0 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8006da8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006daa:	fab3 f383 	clz	r3, r3
 8006dae:	b2db      	uxtb	r3, r3
 8006db0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d105      	bne.n	8006dca <HAL_ADC_ConfigChannel+0x3f2>
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	0e9b      	lsrs	r3, r3, #26
 8006dc4:	f003 031f 	and.w	r3, r3, #31
 8006dc8:	e011      	b.n	8006dee <HAL_ADC_ConfigChannel+0x416>
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006dd0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006dd2:	fa93 f3a3 	rbit	r3, r3
 8006dd6:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8006dd8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006dda:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8006ddc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d101      	bne.n	8006de6 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8006de2:	2320      	movs	r3, #32
 8006de4:	e003      	b.n	8006dee <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8006de6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006de8:	fab3 f383 	clz	r3, r3
 8006dec:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006dee:	429a      	cmp	r2, r3
 8006df0:	d106      	bne.n	8006e00 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	2200      	movs	r2, #0
 8006df8:	2103      	movs	r1, #3
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	f7ff f968 	bl	80060d0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4618      	mov	r0, r3
 8006e06:	f7ff fad9 	bl	80063bc <LL_ADC_IsEnabled>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	f040 813d 	bne.w	800708c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6818      	ldr	r0, [r3, #0]
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	6819      	ldr	r1, [r3, #0]
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	68db      	ldr	r3, [r3, #12]
 8006e1e:	461a      	mov	r2, r3
 8006e20:	f7ff fa24 	bl	800626c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	68db      	ldr	r3, [r3, #12]
 8006e28:	4aa2      	ldr	r2, [pc, #648]	@ (80070b4 <HAL_ADC_ConfigChannel+0x6dc>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	f040 812e 	bne.w	800708c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d10b      	bne.n	8006e58 <HAL_ADC_ConfigChannel+0x480>
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	0e9b      	lsrs	r3, r3, #26
 8006e46:	3301      	adds	r3, #1
 8006e48:	f003 031f 	and.w	r3, r3, #31
 8006e4c:	2b09      	cmp	r3, #9
 8006e4e:	bf94      	ite	ls
 8006e50:	2301      	movls	r3, #1
 8006e52:	2300      	movhi	r3, #0
 8006e54:	b2db      	uxtb	r3, r3
 8006e56:	e019      	b.n	8006e8c <HAL_ADC_ConfigChannel+0x4b4>
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e5e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006e60:	fa93 f3a3 	rbit	r3, r3
 8006e64:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8006e66:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006e68:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8006e6a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d101      	bne.n	8006e74 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8006e70:	2320      	movs	r3, #32
 8006e72:	e003      	b.n	8006e7c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8006e74:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006e76:	fab3 f383 	clz	r3, r3
 8006e7a:	b2db      	uxtb	r3, r3
 8006e7c:	3301      	adds	r3, #1
 8006e7e:	f003 031f 	and.w	r3, r3, #31
 8006e82:	2b09      	cmp	r3, #9
 8006e84:	bf94      	ite	ls
 8006e86:	2301      	movls	r3, #1
 8006e88:	2300      	movhi	r3, #0
 8006e8a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d079      	beq.n	8006f84 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d107      	bne.n	8006eac <HAL_ADC_ConfigChannel+0x4d4>
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	0e9b      	lsrs	r3, r3, #26
 8006ea2:	3301      	adds	r3, #1
 8006ea4:	069b      	lsls	r3, r3, #26
 8006ea6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006eaa:	e015      	b.n	8006ed8 <HAL_ADC_ConfigChannel+0x500>
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006eb2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006eb4:	fa93 f3a3 	rbit	r3, r3
 8006eb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8006eba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ebc:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8006ebe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d101      	bne.n	8006ec8 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8006ec4:	2320      	movs	r3, #32
 8006ec6:	e003      	b.n	8006ed0 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8006ec8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006eca:	fab3 f383 	clz	r3, r3
 8006ece:	b2db      	uxtb	r3, r3
 8006ed0:	3301      	adds	r3, #1
 8006ed2:	069b      	lsls	r3, r3, #26
 8006ed4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d109      	bne.n	8006ef8 <HAL_ADC_ConfigChannel+0x520>
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	0e9b      	lsrs	r3, r3, #26
 8006eea:	3301      	adds	r3, #1
 8006eec:	f003 031f 	and.w	r3, r3, #31
 8006ef0:	2101      	movs	r1, #1
 8006ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8006ef6:	e017      	b.n	8006f28 <HAL_ADC_ConfigChannel+0x550>
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006efe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f00:	fa93 f3a3 	rbit	r3, r3
 8006f04:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8006f06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f08:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8006f0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d101      	bne.n	8006f14 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8006f10:	2320      	movs	r3, #32
 8006f12:	e003      	b.n	8006f1c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8006f14:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006f16:	fab3 f383 	clz	r3, r3
 8006f1a:	b2db      	uxtb	r3, r3
 8006f1c:	3301      	adds	r3, #1
 8006f1e:	f003 031f 	and.w	r3, r3, #31
 8006f22:	2101      	movs	r1, #1
 8006f24:	fa01 f303 	lsl.w	r3, r1, r3
 8006f28:	ea42 0103 	orr.w	r1, r2, r3
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d10a      	bne.n	8006f4e <HAL_ADC_ConfigChannel+0x576>
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	0e9b      	lsrs	r3, r3, #26
 8006f3e:	3301      	adds	r3, #1
 8006f40:	f003 021f 	and.w	r2, r3, #31
 8006f44:	4613      	mov	r3, r2
 8006f46:	005b      	lsls	r3, r3, #1
 8006f48:	4413      	add	r3, r2
 8006f4a:	051b      	lsls	r3, r3, #20
 8006f4c:	e018      	b.n	8006f80 <HAL_ADC_ConfigChannel+0x5a8>
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f56:	fa93 f3a3 	rbit	r3, r3
 8006f5a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8006f5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8006f60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d101      	bne.n	8006f6a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8006f66:	2320      	movs	r3, #32
 8006f68:	e003      	b.n	8006f72 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8006f6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f6c:	fab3 f383 	clz	r3, r3
 8006f70:	b2db      	uxtb	r3, r3
 8006f72:	3301      	adds	r3, #1
 8006f74:	f003 021f 	and.w	r2, r3, #31
 8006f78:	4613      	mov	r3, r2
 8006f7a:	005b      	lsls	r3, r3, #1
 8006f7c:	4413      	add	r3, r2
 8006f7e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006f80:	430b      	orrs	r3, r1
 8006f82:	e07e      	b.n	8007082 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d107      	bne.n	8006fa0 <HAL_ADC_ConfigChannel+0x5c8>
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	0e9b      	lsrs	r3, r3, #26
 8006f96:	3301      	adds	r3, #1
 8006f98:	069b      	lsls	r3, r3, #26
 8006f9a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006f9e:	e015      	b.n	8006fcc <HAL_ADC_ConfigChannel+0x5f4>
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006fa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fa8:	fa93 f3a3 	rbit	r3, r3
 8006fac:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8006fae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fb0:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8006fb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d101      	bne.n	8006fbc <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8006fb8:	2320      	movs	r3, #32
 8006fba:	e003      	b.n	8006fc4 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8006fbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fbe:	fab3 f383 	clz	r3, r3
 8006fc2:	b2db      	uxtb	r3, r3
 8006fc4:	3301      	adds	r3, #1
 8006fc6:	069b      	lsls	r3, r3, #26
 8006fc8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d109      	bne.n	8006fec <HAL_ADC_ConfigChannel+0x614>
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	0e9b      	lsrs	r3, r3, #26
 8006fde:	3301      	adds	r3, #1
 8006fe0:	f003 031f 	and.w	r3, r3, #31
 8006fe4:	2101      	movs	r1, #1
 8006fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8006fea:	e017      	b.n	800701c <HAL_ADC_ConfigChannel+0x644>
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ff2:	6a3b      	ldr	r3, [r7, #32]
 8006ff4:	fa93 f3a3 	rbit	r3, r3
 8006ff8:	61fb      	str	r3, [r7, #28]
  return result;
 8006ffa:	69fb      	ldr	r3, [r7, #28]
 8006ffc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8006ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007000:	2b00      	cmp	r3, #0
 8007002:	d101      	bne.n	8007008 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8007004:	2320      	movs	r3, #32
 8007006:	e003      	b.n	8007010 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8007008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800700a:	fab3 f383 	clz	r3, r3
 800700e:	b2db      	uxtb	r3, r3
 8007010:	3301      	adds	r3, #1
 8007012:	f003 031f 	and.w	r3, r3, #31
 8007016:	2101      	movs	r1, #1
 8007018:	fa01 f303 	lsl.w	r3, r1, r3
 800701c:	ea42 0103 	orr.w	r1, r2, r3
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007028:	2b00      	cmp	r3, #0
 800702a:	d10d      	bne.n	8007048 <HAL_ADC_ConfigChannel+0x670>
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	0e9b      	lsrs	r3, r3, #26
 8007032:	3301      	adds	r3, #1
 8007034:	f003 021f 	and.w	r2, r3, #31
 8007038:	4613      	mov	r3, r2
 800703a:	005b      	lsls	r3, r3, #1
 800703c:	4413      	add	r3, r2
 800703e:	3b1e      	subs	r3, #30
 8007040:	051b      	lsls	r3, r3, #20
 8007042:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8007046:	e01b      	b.n	8007080 <HAL_ADC_ConfigChannel+0x6a8>
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800704e:	697b      	ldr	r3, [r7, #20]
 8007050:	fa93 f3a3 	rbit	r3, r3
 8007054:	613b      	str	r3, [r7, #16]
  return result;
 8007056:	693b      	ldr	r3, [r7, #16]
 8007058:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800705a:	69bb      	ldr	r3, [r7, #24]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d101      	bne.n	8007064 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8007060:	2320      	movs	r3, #32
 8007062:	e003      	b.n	800706c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8007064:	69bb      	ldr	r3, [r7, #24]
 8007066:	fab3 f383 	clz	r3, r3
 800706a:	b2db      	uxtb	r3, r3
 800706c:	3301      	adds	r3, #1
 800706e:	f003 021f 	and.w	r2, r3, #31
 8007072:	4613      	mov	r3, r2
 8007074:	005b      	lsls	r3, r3, #1
 8007076:	4413      	add	r3, r2
 8007078:	3b1e      	subs	r3, #30
 800707a:	051b      	lsls	r3, r3, #20
 800707c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007080:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8007082:	683a      	ldr	r2, [r7, #0]
 8007084:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007086:	4619      	mov	r1, r3
 8007088:	f7ff f8c5 	bl	8006216 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	681a      	ldr	r2, [r3, #0]
 8007090:	4b09      	ldr	r3, [pc, #36]	@ (80070b8 <HAL_ADC_ConfigChannel+0x6e0>)
 8007092:	4013      	ands	r3, r2
 8007094:	2b00      	cmp	r3, #0
 8007096:	f000 80be 	beq.w	8007216 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80070a2:	d004      	beq.n	80070ae <HAL_ADC_ConfigChannel+0x6d6>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4a04      	ldr	r2, [pc, #16]	@ (80070bc <HAL_ADC_ConfigChannel+0x6e4>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d10a      	bne.n	80070c4 <HAL_ADC_ConfigChannel+0x6ec>
 80070ae:	4b04      	ldr	r3, [pc, #16]	@ (80070c0 <HAL_ADC_ConfigChannel+0x6e8>)
 80070b0:	e009      	b.n	80070c6 <HAL_ADC_ConfigChannel+0x6ee>
 80070b2:	bf00      	nop
 80070b4:	407f0000 	.word	0x407f0000
 80070b8:	80080000 	.word	0x80080000
 80070bc:	50000100 	.word	0x50000100
 80070c0:	50000300 	.word	0x50000300
 80070c4:	4b59      	ldr	r3, [pc, #356]	@ (800722c <HAL_ADC_ConfigChannel+0x854>)
 80070c6:	4618      	mov	r0, r3
 80070c8:	f7fe ffba 	bl	8006040 <LL_ADC_GetCommonPathInternalCh>
 80070cc:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a56      	ldr	r2, [pc, #344]	@ (8007230 <HAL_ADC_ConfigChannel+0x858>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d004      	beq.n	80070e4 <HAL_ADC_ConfigChannel+0x70c>
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4a55      	ldr	r2, [pc, #340]	@ (8007234 <HAL_ADC_ConfigChannel+0x85c>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d13a      	bne.n	800715a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80070e4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80070e8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d134      	bne.n	800715a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80070f8:	d005      	beq.n	8007106 <HAL_ADC_ConfigChannel+0x72e>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4a4e      	ldr	r2, [pc, #312]	@ (8007238 <HAL_ADC_ConfigChannel+0x860>)
 8007100:	4293      	cmp	r3, r2
 8007102:	f040 8085 	bne.w	8007210 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800710e:	d004      	beq.n	800711a <HAL_ADC_ConfigChannel+0x742>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4a49      	ldr	r2, [pc, #292]	@ (800723c <HAL_ADC_ConfigChannel+0x864>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d101      	bne.n	800711e <HAL_ADC_ConfigChannel+0x746>
 800711a:	4a49      	ldr	r2, [pc, #292]	@ (8007240 <HAL_ADC_ConfigChannel+0x868>)
 800711c:	e000      	b.n	8007120 <HAL_ADC_ConfigChannel+0x748>
 800711e:	4a43      	ldr	r2, [pc, #268]	@ (800722c <HAL_ADC_ConfigChannel+0x854>)
 8007120:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007124:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007128:	4619      	mov	r1, r3
 800712a:	4610      	mov	r0, r2
 800712c:	f7fe ff75 	bl	800601a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007130:	4b44      	ldr	r3, [pc, #272]	@ (8007244 <HAL_ADC_ConfigChannel+0x86c>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	099b      	lsrs	r3, r3, #6
 8007136:	4a44      	ldr	r2, [pc, #272]	@ (8007248 <HAL_ADC_ConfigChannel+0x870>)
 8007138:	fba2 2303 	umull	r2, r3, r2, r3
 800713c:	099b      	lsrs	r3, r3, #6
 800713e:	1c5a      	adds	r2, r3, #1
 8007140:	4613      	mov	r3, r2
 8007142:	005b      	lsls	r3, r3, #1
 8007144:	4413      	add	r3, r2
 8007146:	009b      	lsls	r3, r3, #2
 8007148:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800714a:	e002      	b.n	8007152 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	3b01      	subs	r3, #1
 8007150:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d1f9      	bne.n	800714c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007158:	e05a      	b.n	8007210 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a3b      	ldr	r2, [pc, #236]	@ (800724c <HAL_ADC_ConfigChannel+0x874>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d125      	bne.n	80071b0 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8007164:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007168:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800716c:	2b00      	cmp	r3, #0
 800716e:	d11f      	bne.n	80071b0 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a31      	ldr	r2, [pc, #196]	@ (800723c <HAL_ADC_ConfigChannel+0x864>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d104      	bne.n	8007184 <HAL_ADC_ConfigChannel+0x7ac>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4a34      	ldr	r2, [pc, #208]	@ (8007250 <HAL_ADC_ConfigChannel+0x878>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d047      	beq.n	8007214 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800718c:	d004      	beq.n	8007198 <HAL_ADC_ConfigChannel+0x7c0>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4a2a      	ldr	r2, [pc, #168]	@ (800723c <HAL_ADC_ConfigChannel+0x864>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d101      	bne.n	800719c <HAL_ADC_ConfigChannel+0x7c4>
 8007198:	4a29      	ldr	r2, [pc, #164]	@ (8007240 <HAL_ADC_ConfigChannel+0x868>)
 800719a:	e000      	b.n	800719e <HAL_ADC_ConfigChannel+0x7c6>
 800719c:	4a23      	ldr	r2, [pc, #140]	@ (800722c <HAL_ADC_ConfigChannel+0x854>)
 800719e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80071a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80071a6:	4619      	mov	r1, r3
 80071a8:	4610      	mov	r0, r2
 80071aa:	f7fe ff36 	bl	800601a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80071ae:	e031      	b.n	8007214 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4a27      	ldr	r2, [pc, #156]	@ (8007254 <HAL_ADC_ConfigChannel+0x87c>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d12d      	bne.n	8007216 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80071ba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80071be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d127      	bne.n	8007216 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4a1c      	ldr	r2, [pc, #112]	@ (800723c <HAL_ADC_ConfigChannel+0x864>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d022      	beq.n	8007216 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80071d8:	d004      	beq.n	80071e4 <HAL_ADC_ConfigChannel+0x80c>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4a17      	ldr	r2, [pc, #92]	@ (800723c <HAL_ADC_ConfigChannel+0x864>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d101      	bne.n	80071e8 <HAL_ADC_ConfigChannel+0x810>
 80071e4:	4a16      	ldr	r2, [pc, #88]	@ (8007240 <HAL_ADC_ConfigChannel+0x868>)
 80071e6:	e000      	b.n	80071ea <HAL_ADC_ConfigChannel+0x812>
 80071e8:	4a10      	ldr	r2, [pc, #64]	@ (800722c <HAL_ADC_ConfigChannel+0x854>)
 80071ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80071ee:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80071f2:	4619      	mov	r1, r3
 80071f4:	4610      	mov	r0, r2
 80071f6:	f7fe ff10 	bl	800601a <LL_ADC_SetCommonPathInternalCh>
 80071fa:	e00c      	b.n	8007216 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007200:	f043 0220 	orr.w	r2, r3, #32
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8007208:	2301      	movs	r3, #1
 800720a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800720e:	e002      	b.n	8007216 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007210:	bf00      	nop
 8007212:	e000      	b.n	8007216 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007214:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2200      	movs	r2, #0
 800721a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800721e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8007222:	4618      	mov	r0, r3
 8007224:	37d8      	adds	r7, #216	@ 0xd8
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}
 800722a:	bf00      	nop
 800722c:	50000700 	.word	0x50000700
 8007230:	c3210000 	.word	0xc3210000
 8007234:	90c00010 	.word	0x90c00010
 8007238:	50000600 	.word	0x50000600
 800723c:	50000100 	.word	0x50000100
 8007240:	50000300 	.word	0x50000300
 8007244:	20000178 	.word	0x20000178
 8007248:	053e2d63 	.word	0x053e2d63
 800724c:	c7520000 	.word	0xc7520000
 8007250:	50000500 	.word	0x50000500
 8007254:	cb840000 	.word	0xcb840000

08007258 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b084      	sub	sp, #16
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8007260:	2300      	movs	r3, #0
 8007262:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4618      	mov	r0, r3
 800726a:	f7ff f8a7 	bl	80063bc <LL_ADC_IsEnabled>
 800726e:	4603      	mov	r3, r0
 8007270:	2b00      	cmp	r3, #0
 8007272:	d176      	bne.n	8007362 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	689a      	ldr	r2, [r3, #8]
 800727a:	4b3c      	ldr	r3, [pc, #240]	@ (800736c <ADC_Enable+0x114>)
 800727c:	4013      	ands	r3, r2
 800727e:	2b00      	cmp	r3, #0
 8007280:	d00d      	beq.n	800729e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007286:	f043 0210 	orr.w	r2, r3, #16
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007292:	f043 0201 	orr.w	r2, r3, #1
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800729a:	2301      	movs	r3, #1
 800729c:	e062      	b.n	8007364 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4618      	mov	r0, r3
 80072a4:	f7ff f862 	bl	800636c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80072b0:	d004      	beq.n	80072bc <ADC_Enable+0x64>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	4a2e      	ldr	r2, [pc, #184]	@ (8007370 <ADC_Enable+0x118>)
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d101      	bne.n	80072c0 <ADC_Enable+0x68>
 80072bc:	4b2d      	ldr	r3, [pc, #180]	@ (8007374 <ADC_Enable+0x11c>)
 80072be:	e000      	b.n	80072c2 <ADC_Enable+0x6a>
 80072c0:	4b2d      	ldr	r3, [pc, #180]	@ (8007378 <ADC_Enable+0x120>)
 80072c2:	4618      	mov	r0, r3
 80072c4:	f7fe febc 	bl	8006040 <LL_ADC_GetCommonPathInternalCh>
 80072c8:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80072ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d013      	beq.n	80072fa <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80072d2:	4b2a      	ldr	r3, [pc, #168]	@ (800737c <ADC_Enable+0x124>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	099b      	lsrs	r3, r3, #6
 80072d8:	4a29      	ldr	r2, [pc, #164]	@ (8007380 <ADC_Enable+0x128>)
 80072da:	fba2 2303 	umull	r2, r3, r2, r3
 80072de:	099b      	lsrs	r3, r3, #6
 80072e0:	1c5a      	adds	r2, r3, #1
 80072e2:	4613      	mov	r3, r2
 80072e4:	005b      	lsls	r3, r3, #1
 80072e6:	4413      	add	r3, r2
 80072e8:	009b      	lsls	r3, r3, #2
 80072ea:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80072ec:	e002      	b.n	80072f4 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	3b01      	subs	r3, #1
 80072f2:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80072f4:	68bb      	ldr	r3, [r7, #8]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d1f9      	bne.n	80072ee <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80072fa:	f7fe fe6f 	bl	8005fdc <HAL_GetTick>
 80072fe:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007300:	e028      	b.n	8007354 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	4618      	mov	r0, r3
 8007308:	f7ff f858 	bl	80063bc <LL_ADC_IsEnabled>
 800730c:	4603      	mov	r3, r0
 800730e:	2b00      	cmp	r3, #0
 8007310:	d104      	bne.n	800731c <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4618      	mov	r0, r3
 8007318:	f7ff f828 	bl	800636c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800731c:	f7fe fe5e 	bl	8005fdc <HAL_GetTick>
 8007320:	4602      	mov	r2, r0
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	1ad3      	subs	r3, r2, r3
 8007326:	2b02      	cmp	r3, #2
 8007328:	d914      	bls.n	8007354 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f003 0301 	and.w	r3, r3, #1
 8007334:	2b01      	cmp	r3, #1
 8007336:	d00d      	beq.n	8007354 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800733c:	f043 0210 	orr.w	r2, r3, #16
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007348:	f043 0201 	orr.w	r2, r3, #1
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8007350:	2301      	movs	r3, #1
 8007352:	e007      	b.n	8007364 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f003 0301 	and.w	r3, r3, #1
 800735e:	2b01      	cmp	r3, #1
 8007360:	d1cf      	bne.n	8007302 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8007362:	2300      	movs	r3, #0
}
 8007364:	4618      	mov	r0, r3
 8007366:	3710      	adds	r7, #16
 8007368:	46bd      	mov	sp, r7
 800736a:	bd80      	pop	{r7, pc}
 800736c:	8000003f 	.word	0x8000003f
 8007370:	50000100 	.word	0x50000100
 8007374:	50000300 	.word	0x50000300
 8007378:	50000700 	.word	0x50000700
 800737c:	20000178 	.word	0x20000178
 8007380:	053e2d63 	.word	0x053e2d63

08007384 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b084      	sub	sp, #16
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4618      	mov	r0, r3
 8007392:	f7ff f826 	bl	80063e2 <LL_ADC_IsDisableOngoing>
 8007396:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4618      	mov	r0, r3
 800739e:	f7ff f80d 	bl	80063bc <LL_ADC_IsEnabled>
 80073a2:	4603      	mov	r3, r0
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d047      	beq.n	8007438 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d144      	bne.n	8007438 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	689b      	ldr	r3, [r3, #8]
 80073b4:	f003 030d 	and.w	r3, r3, #13
 80073b8:	2b01      	cmp	r3, #1
 80073ba:	d10c      	bne.n	80073d6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4618      	mov	r0, r3
 80073c2:	f7fe ffe7 	bl	8006394 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	2203      	movs	r2, #3
 80073cc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80073ce:	f7fe fe05 	bl	8005fdc <HAL_GetTick>
 80073d2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80073d4:	e029      	b.n	800742a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80073da:	f043 0210 	orr.w	r2, r3, #16
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80073e6:	f043 0201 	orr.w	r2, r3, #1
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 80073ee:	2301      	movs	r3, #1
 80073f0:	e023      	b.n	800743a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80073f2:	f7fe fdf3 	bl	8005fdc <HAL_GetTick>
 80073f6:	4602      	mov	r2, r0
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	1ad3      	subs	r3, r2, r3
 80073fc:	2b02      	cmp	r3, #2
 80073fe:	d914      	bls.n	800742a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	689b      	ldr	r3, [r3, #8]
 8007406:	f003 0301 	and.w	r3, r3, #1
 800740a:	2b00      	cmp	r3, #0
 800740c:	d00d      	beq.n	800742a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007412:	f043 0210 	orr.w	r2, r3, #16
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800741e:	f043 0201 	orr.w	r2, r3, #1
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8007426:	2301      	movs	r3, #1
 8007428:	e007      	b.n	800743a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	689b      	ldr	r3, [r3, #8]
 8007430:	f003 0301 	and.w	r3, r3, #1
 8007434:	2b00      	cmp	r3, #0
 8007436:	d1dc      	bne.n	80073f2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8007438:	2300      	movs	r3, #0
}
 800743a:	4618      	mov	r0, r3
 800743c:	3710      	adds	r7, #16
 800743e:	46bd      	mov	sp, r7
 8007440:	bd80      	pop	{r7, pc}

08007442 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8007442:	b580      	push	{r7, lr}
 8007444:	b084      	sub	sp, #16
 8007446:	af00      	add	r7, sp, #0
 8007448:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800744e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007454:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007458:	2b00      	cmp	r3, #0
 800745a:	d14b      	bne.n	80074f4 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007460:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f003 0308 	and.w	r3, r3, #8
 8007472:	2b00      	cmp	r3, #0
 8007474:	d021      	beq.n	80074ba <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4618      	mov	r0, r3
 800747c:	f7fe fe8c 	bl	8006198 <LL_ADC_REG_IsTriggerSourceSWStart>
 8007480:	4603      	mov	r3, r0
 8007482:	2b00      	cmp	r3, #0
 8007484:	d032      	beq.n	80074ec <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	68db      	ldr	r3, [r3, #12]
 800748c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007490:	2b00      	cmp	r3, #0
 8007492:	d12b      	bne.n	80074ec <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007498:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d11f      	bne.n	80074ec <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074b0:	f043 0201 	orr.w	r2, r3, #1
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80074b8:	e018      	b.n	80074ec <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	68db      	ldr	r3, [r3, #12]
 80074c0:	f003 0302 	and.w	r3, r3, #2
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d111      	bne.n	80074ec <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074cc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074d8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d105      	bne.n	80074ec <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074e4:	f043 0201 	orr.w	r2, r3, #1
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80074ec:	68f8      	ldr	r0, [r7, #12]
 80074ee:	f7ff fa55 	bl	800699c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80074f2:	e00e      	b.n	8007512 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074f8:	f003 0310 	and.w	r3, r3, #16
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d003      	beq.n	8007508 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8007500:	68f8      	ldr	r0, [r7, #12]
 8007502:	f7ff fa5f 	bl	80069c4 <HAL_ADC_ErrorCallback>
}
 8007506:	e004      	b.n	8007512 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800750c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	4798      	blx	r3
}
 8007512:	bf00      	nop
 8007514:	3710      	adds	r7, #16
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}

0800751a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800751a:	b580      	push	{r7, lr}
 800751c:	b084      	sub	sp, #16
 800751e:	af00      	add	r7, sp, #0
 8007520:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007526:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007528:	68f8      	ldr	r0, [r7, #12]
 800752a:	f7ff fa41 	bl	80069b0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800752e:	bf00      	nop
 8007530:	3710      	adds	r7, #16
 8007532:	46bd      	mov	sp, r7
 8007534:	bd80      	pop	{r7, pc}

08007536 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8007536:	b580      	push	{r7, lr}
 8007538:	b084      	sub	sp, #16
 800753a:	af00      	add	r7, sp, #0
 800753c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007542:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007548:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007554:	f043 0204 	orr.w	r2, r3, #4
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800755c:	68f8      	ldr	r0, [r7, #12]
 800755e:	f7ff fa31 	bl	80069c4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007562:	bf00      	nop
 8007564:	3710      	adds	r7, #16
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}

0800756a <LL_ADC_IsEnabled>:
{
 800756a:	b480      	push	{r7}
 800756c:	b083      	sub	sp, #12
 800756e:	af00      	add	r7, sp, #0
 8007570:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	689b      	ldr	r3, [r3, #8]
 8007576:	f003 0301 	and.w	r3, r3, #1
 800757a:	2b01      	cmp	r3, #1
 800757c:	d101      	bne.n	8007582 <LL_ADC_IsEnabled+0x18>
 800757e:	2301      	movs	r3, #1
 8007580:	e000      	b.n	8007584 <LL_ADC_IsEnabled+0x1a>
 8007582:	2300      	movs	r3, #0
}
 8007584:	4618      	mov	r0, r3
 8007586:	370c      	adds	r7, #12
 8007588:	46bd      	mov	sp, r7
 800758a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758e:	4770      	bx	lr

08007590 <LL_ADC_StartCalibration>:
{
 8007590:	b480      	push	{r7}
 8007592:	b083      	sub	sp, #12
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
 8007598:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	689b      	ldr	r3, [r3, #8]
 800759e:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80075a2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80075a6:	683a      	ldr	r2, [r7, #0]
 80075a8:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80075ac:	4313      	orrs	r3, r2
 80075ae:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	609a      	str	r2, [r3, #8]
}
 80075b6:	bf00      	nop
 80075b8:	370c      	adds	r7, #12
 80075ba:	46bd      	mov	sp, r7
 80075bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c0:	4770      	bx	lr

080075c2 <LL_ADC_IsCalibrationOnGoing>:
{
 80075c2:	b480      	push	{r7}
 80075c4:	b083      	sub	sp, #12
 80075c6:	af00      	add	r7, sp, #0
 80075c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	689b      	ldr	r3, [r3, #8]
 80075ce:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80075d2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80075d6:	d101      	bne.n	80075dc <LL_ADC_IsCalibrationOnGoing+0x1a>
 80075d8:	2301      	movs	r3, #1
 80075da:	e000      	b.n	80075de <LL_ADC_IsCalibrationOnGoing+0x1c>
 80075dc:	2300      	movs	r3, #0
}
 80075de:	4618      	mov	r0, r3
 80075e0:	370c      	adds	r7, #12
 80075e2:	46bd      	mov	sp, r7
 80075e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e8:	4770      	bx	lr

080075ea <LL_ADC_REG_IsConversionOngoing>:
{
 80075ea:	b480      	push	{r7}
 80075ec:	b083      	sub	sp, #12
 80075ee:	af00      	add	r7, sp, #0
 80075f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	689b      	ldr	r3, [r3, #8]
 80075f6:	f003 0304 	and.w	r3, r3, #4
 80075fa:	2b04      	cmp	r3, #4
 80075fc:	d101      	bne.n	8007602 <LL_ADC_REG_IsConversionOngoing+0x18>
 80075fe:	2301      	movs	r3, #1
 8007600:	e000      	b.n	8007604 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8007602:	2300      	movs	r3, #0
}
 8007604:	4618      	mov	r0, r3
 8007606:	370c      	adds	r7, #12
 8007608:	46bd      	mov	sp, r7
 800760a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760e:	4770      	bx	lr

08007610 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b084      	sub	sp, #16
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
 8007618:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800761a:	2300      	movs	r3, #0
 800761c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8007624:	2b01      	cmp	r3, #1
 8007626:	d101      	bne.n	800762c <HAL_ADCEx_Calibration_Start+0x1c>
 8007628:	2302      	movs	r3, #2
 800762a:	e04d      	b.n	80076c8 <HAL_ADCEx_Calibration_Start+0xb8>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2201      	movs	r2, #1
 8007630:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f7ff fea5 	bl	8007384 <ADC_Disable>
 800763a:	4603      	mov	r3, r0
 800763c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800763e:	7bfb      	ldrb	r3, [r7, #15]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d136      	bne.n	80076b2 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007648:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800764c:	f023 0302 	bic.w	r3, r3, #2
 8007650:	f043 0202 	orr.w	r2, r3, #2
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	6839      	ldr	r1, [r7, #0]
 800765e:	4618      	mov	r0, r3
 8007660:	f7ff ff96 	bl	8007590 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8007664:	e014      	b.n	8007690 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	3301      	adds	r3, #1
 800766a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	4a18      	ldr	r2, [pc, #96]	@ (80076d0 <HAL_ADCEx_Calibration_Start+0xc0>)
 8007670:	4293      	cmp	r3, r2
 8007672:	d90d      	bls.n	8007690 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007678:	f023 0312 	bic.w	r3, r3, #18
 800767c:	f043 0210 	orr.w	r2, r3, #16
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2200      	movs	r2, #0
 8007688:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 800768c:	2301      	movs	r3, #1
 800768e:	e01b      	b.n	80076c8 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4618      	mov	r0, r3
 8007696:	f7ff ff94 	bl	80075c2 <LL_ADC_IsCalibrationOnGoing>
 800769a:	4603      	mov	r3, r0
 800769c:	2b00      	cmp	r3, #0
 800769e:	d1e2      	bne.n	8007666 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80076a4:	f023 0303 	bic.w	r3, r3, #3
 80076a8:	f043 0201 	orr.w	r2, r3, #1
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	65da      	str	r2, [r3, #92]	@ 0x5c
 80076b0:	e005      	b.n	80076be <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80076b6:	f043 0210 	orr.w	r2, r3, #16
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2200      	movs	r2, #0
 80076c2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80076c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80076c8:	4618      	mov	r0, r3
 80076ca:	3710      	adds	r7, #16
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bd80      	pop	{r7, pc}
 80076d0:	0004de01 	.word	0x0004de01

080076d4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80076d4:	b590      	push	{r4, r7, lr}
 80076d6:	b0a1      	sub	sp, #132	@ 0x84
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
 80076dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80076de:	2300      	movs	r3, #0
 80076e0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80076ea:	2b01      	cmp	r3, #1
 80076ec:	d101      	bne.n	80076f2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80076ee:	2302      	movs	r3, #2
 80076f0:	e0e7      	b.n	80078c2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2201      	movs	r2, #1
 80076f6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80076fa:	2300      	movs	r3, #0
 80076fc:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80076fe:	2300      	movs	r3, #0
 8007700:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800770a:	d102      	bne.n	8007712 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800770c:	4b6f      	ldr	r3, [pc, #444]	@ (80078cc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800770e:	60bb      	str	r3, [r7, #8]
 8007710:	e009      	b.n	8007726 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	4a6e      	ldr	r2, [pc, #440]	@ (80078d0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8007718:	4293      	cmp	r3, r2
 800771a:	d102      	bne.n	8007722 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 800771c:	4b6d      	ldr	r3, [pc, #436]	@ (80078d4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800771e:	60bb      	str	r3, [r7, #8]
 8007720:	e001      	b.n	8007726 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8007722:	2300      	movs	r3, #0
 8007724:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d10b      	bne.n	8007744 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007730:	f043 0220 	orr.w	r2, r3, #32
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2200      	movs	r2, #0
 800773c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8007740:	2301      	movs	r3, #1
 8007742:	e0be      	b.n	80078c2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	4618      	mov	r0, r3
 8007748:	f7ff ff4f 	bl	80075ea <LL_ADC_REG_IsConversionOngoing>
 800774c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	4618      	mov	r0, r3
 8007754:	f7ff ff49 	bl	80075ea <LL_ADC_REG_IsConversionOngoing>
 8007758:	4603      	mov	r3, r0
 800775a:	2b00      	cmp	r3, #0
 800775c:	f040 80a0 	bne.w	80078a0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8007760:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007762:	2b00      	cmp	r3, #0
 8007764:	f040 809c 	bne.w	80078a0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007770:	d004      	beq.n	800777c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	4a55      	ldr	r2, [pc, #340]	@ (80078cc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007778:	4293      	cmp	r3, r2
 800777a:	d101      	bne.n	8007780 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800777c:	4b56      	ldr	r3, [pc, #344]	@ (80078d8 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800777e:	e000      	b.n	8007782 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8007780:	4b56      	ldr	r3, [pc, #344]	@ (80078dc <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8007782:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d04b      	beq.n	8007824 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800778c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800778e:	689b      	ldr	r3, [r3, #8]
 8007790:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	6859      	ldr	r1, [r3, #4]
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800779e:	035b      	lsls	r3, r3, #13
 80077a0:	430b      	orrs	r3, r1
 80077a2:	431a      	orrs	r2, r3
 80077a4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80077a6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80077b0:	d004      	beq.n	80077bc <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4a45      	ldr	r2, [pc, #276]	@ (80078cc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d10f      	bne.n	80077dc <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80077bc:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80077c0:	f7ff fed3 	bl	800756a <LL_ADC_IsEnabled>
 80077c4:	4604      	mov	r4, r0
 80077c6:	4841      	ldr	r0, [pc, #260]	@ (80078cc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80077c8:	f7ff fecf 	bl	800756a <LL_ADC_IsEnabled>
 80077cc:	4603      	mov	r3, r0
 80077ce:	4323      	orrs	r3, r4
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	bf0c      	ite	eq
 80077d4:	2301      	moveq	r3, #1
 80077d6:	2300      	movne	r3, #0
 80077d8:	b2db      	uxtb	r3, r3
 80077da:	e012      	b.n	8007802 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80077dc:	483c      	ldr	r0, [pc, #240]	@ (80078d0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80077de:	f7ff fec4 	bl	800756a <LL_ADC_IsEnabled>
 80077e2:	4604      	mov	r4, r0
 80077e4:	483b      	ldr	r0, [pc, #236]	@ (80078d4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80077e6:	f7ff fec0 	bl	800756a <LL_ADC_IsEnabled>
 80077ea:	4603      	mov	r3, r0
 80077ec:	431c      	orrs	r4, r3
 80077ee:	483c      	ldr	r0, [pc, #240]	@ (80078e0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80077f0:	f7ff febb 	bl	800756a <LL_ADC_IsEnabled>
 80077f4:	4603      	mov	r3, r0
 80077f6:	4323      	orrs	r3, r4
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	bf0c      	ite	eq
 80077fc:	2301      	moveq	r3, #1
 80077fe:	2300      	movne	r3, #0
 8007800:	b2db      	uxtb	r3, r3
 8007802:	2b00      	cmp	r3, #0
 8007804:	d056      	beq.n	80078b4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8007806:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007808:	689b      	ldr	r3, [r3, #8]
 800780a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800780e:	f023 030f 	bic.w	r3, r3, #15
 8007812:	683a      	ldr	r2, [r7, #0]
 8007814:	6811      	ldr	r1, [r2, #0]
 8007816:	683a      	ldr	r2, [r7, #0]
 8007818:	6892      	ldr	r2, [r2, #8]
 800781a:	430a      	orrs	r2, r1
 800781c:	431a      	orrs	r2, r3
 800781e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007820:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8007822:	e047      	b.n	80078b4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8007824:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007826:	689b      	ldr	r3, [r3, #8]
 8007828:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800782c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800782e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007838:	d004      	beq.n	8007844 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	4a23      	ldr	r2, [pc, #140]	@ (80078cc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007840:	4293      	cmp	r3, r2
 8007842:	d10f      	bne.n	8007864 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8007844:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8007848:	f7ff fe8f 	bl	800756a <LL_ADC_IsEnabled>
 800784c:	4604      	mov	r4, r0
 800784e:	481f      	ldr	r0, [pc, #124]	@ (80078cc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007850:	f7ff fe8b 	bl	800756a <LL_ADC_IsEnabled>
 8007854:	4603      	mov	r3, r0
 8007856:	4323      	orrs	r3, r4
 8007858:	2b00      	cmp	r3, #0
 800785a:	bf0c      	ite	eq
 800785c:	2301      	moveq	r3, #1
 800785e:	2300      	movne	r3, #0
 8007860:	b2db      	uxtb	r3, r3
 8007862:	e012      	b.n	800788a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8007864:	481a      	ldr	r0, [pc, #104]	@ (80078d0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8007866:	f7ff fe80 	bl	800756a <LL_ADC_IsEnabled>
 800786a:	4604      	mov	r4, r0
 800786c:	4819      	ldr	r0, [pc, #100]	@ (80078d4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800786e:	f7ff fe7c 	bl	800756a <LL_ADC_IsEnabled>
 8007872:	4603      	mov	r3, r0
 8007874:	431c      	orrs	r4, r3
 8007876:	481a      	ldr	r0, [pc, #104]	@ (80078e0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8007878:	f7ff fe77 	bl	800756a <LL_ADC_IsEnabled>
 800787c:	4603      	mov	r3, r0
 800787e:	4323      	orrs	r3, r4
 8007880:	2b00      	cmp	r3, #0
 8007882:	bf0c      	ite	eq
 8007884:	2301      	moveq	r3, #1
 8007886:	2300      	movne	r3, #0
 8007888:	b2db      	uxtb	r3, r3
 800788a:	2b00      	cmp	r3, #0
 800788c:	d012      	beq.n	80078b4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800788e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007890:	689b      	ldr	r3, [r3, #8]
 8007892:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8007896:	f023 030f 	bic.w	r3, r3, #15
 800789a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800789c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800789e:	e009      	b.n	80078b4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80078a4:	f043 0220 	orr.w	r2, r3, #32
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80078ac:	2301      	movs	r3, #1
 80078ae:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80078b2:	e000      	b.n	80078b6 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80078b4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2200      	movs	r2, #0
 80078ba:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80078be:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	3784      	adds	r7, #132	@ 0x84
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd90      	pop	{r4, r7, pc}
 80078ca:	bf00      	nop
 80078cc:	50000100 	.word	0x50000100
 80078d0:	50000400 	.word	0x50000400
 80078d4:	50000500 	.word	0x50000500
 80078d8:	50000300 	.word	0x50000300
 80078dc:	50000700 	.word	0x50000700
 80078e0:	50000600 	.word	0x50000600

080078e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80078e4:	b480      	push	{r7}
 80078e6:	b085      	sub	sp, #20
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f003 0307 	and.w	r3, r3, #7
 80078f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80078f4:	4b0c      	ldr	r3, [pc, #48]	@ (8007928 <__NVIC_SetPriorityGrouping+0x44>)
 80078f6:	68db      	ldr	r3, [r3, #12]
 80078f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80078fa:	68ba      	ldr	r2, [r7, #8]
 80078fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8007900:	4013      	ands	r3, r2
 8007902:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800790c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8007910:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007914:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007916:	4a04      	ldr	r2, [pc, #16]	@ (8007928 <__NVIC_SetPriorityGrouping+0x44>)
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	60d3      	str	r3, [r2, #12]
}
 800791c:	bf00      	nop
 800791e:	3714      	adds	r7, #20
 8007920:	46bd      	mov	sp, r7
 8007922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007926:	4770      	bx	lr
 8007928:	e000ed00 	.word	0xe000ed00

0800792c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800792c:	b480      	push	{r7}
 800792e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007930:	4b04      	ldr	r3, [pc, #16]	@ (8007944 <__NVIC_GetPriorityGrouping+0x18>)
 8007932:	68db      	ldr	r3, [r3, #12]
 8007934:	0a1b      	lsrs	r3, r3, #8
 8007936:	f003 0307 	and.w	r3, r3, #7
}
 800793a:	4618      	mov	r0, r3
 800793c:	46bd      	mov	sp, r7
 800793e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007942:	4770      	bx	lr
 8007944:	e000ed00 	.word	0xe000ed00

08007948 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007948:	b480      	push	{r7}
 800794a:	b083      	sub	sp, #12
 800794c:	af00      	add	r7, sp, #0
 800794e:	4603      	mov	r3, r0
 8007950:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007956:	2b00      	cmp	r3, #0
 8007958:	db0b      	blt.n	8007972 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800795a:	79fb      	ldrb	r3, [r7, #7]
 800795c:	f003 021f 	and.w	r2, r3, #31
 8007960:	4907      	ldr	r1, [pc, #28]	@ (8007980 <__NVIC_EnableIRQ+0x38>)
 8007962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007966:	095b      	lsrs	r3, r3, #5
 8007968:	2001      	movs	r0, #1
 800796a:	fa00 f202 	lsl.w	r2, r0, r2
 800796e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007972:	bf00      	nop
 8007974:	370c      	adds	r7, #12
 8007976:	46bd      	mov	sp, r7
 8007978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797c:	4770      	bx	lr
 800797e:	bf00      	nop
 8007980:	e000e100 	.word	0xe000e100

08007984 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007984:	b480      	push	{r7}
 8007986:	b083      	sub	sp, #12
 8007988:	af00      	add	r7, sp, #0
 800798a:	4603      	mov	r3, r0
 800798c:	6039      	str	r1, [r7, #0]
 800798e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007990:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007994:	2b00      	cmp	r3, #0
 8007996:	db0a      	blt.n	80079ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	b2da      	uxtb	r2, r3
 800799c:	490c      	ldr	r1, [pc, #48]	@ (80079d0 <__NVIC_SetPriority+0x4c>)
 800799e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079a2:	0112      	lsls	r2, r2, #4
 80079a4:	b2d2      	uxtb	r2, r2
 80079a6:	440b      	add	r3, r1
 80079a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80079ac:	e00a      	b.n	80079c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	b2da      	uxtb	r2, r3
 80079b2:	4908      	ldr	r1, [pc, #32]	@ (80079d4 <__NVIC_SetPriority+0x50>)
 80079b4:	79fb      	ldrb	r3, [r7, #7]
 80079b6:	f003 030f 	and.w	r3, r3, #15
 80079ba:	3b04      	subs	r3, #4
 80079bc:	0112      	lsls	r2, r2, #4
 80079be:	b2d2      	uxtb	r2, r2
 80079c0:	440b      	add	r3, r1
 80079c2:	761a      	strb	r2, [r3, #24]
}
 80079c4:	bf00      	nop
 80079c6:	370c      	adds	r7, #12
 80079c8:	46bd      	mov	sp, r7
 80079ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ce:	4770      	bx	lr
 80079d0:	e000e100 	.word	0xe000e100
 80079d4:	e000ed00 	.word	0xe000ed00

080079d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80079d8:	b480      	push	{r7}
 80079da:	b089      	sub	sp, #36	@ 0x24
 80079dc:	af00      	add	r7, sp, #0
 80079de:	60f8      	str	r0, [r7, #12]
 80079e0:	60b9      	str	r1, [r7, #8]
 80079e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	f003 0307 	and.w	r3, r3, #7
 80079ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80079ec:	69fb      	ldr	r3, [r7, #28]
 80079ee:	f1c3 0307 	rsb	r3, r3, #7
 80079f2:	2b04      	cmp	r3, #4
 80079f4:	bf28      	it	cs
 80079f6:	2304      	movcs	r3, #4
 80079f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80079fa:	69fb      	ldr	r3, [r7, #28]
 80079fc:	3304      	adds	r3, #4
 80079fe:	2b06      	cmp	r3, #6
 8007a00:	d902      	bls.n	8007a08 <NVIC_EncodePriority+0x30>
 8007a02:	69fb      	ldr	r3, [r7, #28]
 8007a04:	3b03      	subs	r3, #3
 8007a06:	e000      	b.n	8007a0a <NVIC_EncodePriority+0x32>
 8007a08:	2300      	movs	r3, #0
 8007a0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007a0c:	f04f 32ff 	mov.w	r2, #4294967295
 8007a10:	69bb      	ldr	r3, [r7, #24]
 8007a12:	fa02 f303 	lsl.w	r3, r2, r3
 8007a16:	43da      	mvns	r2, r3
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	401a      	ands	r2, r3
 8007a1c:	697b      	ldr	r3, [r7, #20]
 8007a1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007a20:	f04f 31ff 	mov.w	r1, #4294967295
 8007a24:	697b      	ldr	r3, [r7, #20]
 8007a26:	fa01 f303 	lsl.w	r3, r1, r3
 8007a2a:	43d9      	mvns	r1, r3
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007a30:	4313      	orrs	r3, r2
         );
}
 8007a32:	4618      	mov	r0, r3
 8007a34:	3724      	adds	r7, #36	@ 0x24
 8007a36:	46bd      	mov	sp, r7
 8007a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3c:	4770      	bx	lr
	...

08007a40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b082      	sub	sp, #8
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	3b01      	subs	r3, #1
 8007a4c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007a50:	d301      	bcc.n	8007a56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007a52:	2301      	movs	r3, #1
 8007a54:	e00f      	b.n	8007a76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007a56:	4a0a      	ldr	r2, [pc, #40]	@ (8007a80 <SysTick_Config+0x40>)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	3b01      	subs	r3, #1
 8007a5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007a5e:	210f      	movs	r1, #15
 8007a60:	f04f 30ff 	mov.w	r0, #4294967295
 8007a64:	f7ff ff8e 	bl	8007984 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007a68:	4b05      	ldr	r3, [pc, #20]	@ (8007a80 <SysTick_Config+0x40>)
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007a6e:	4b04      	ldr	r3, [pc, #16]	@ (8007a80 <SysTick_Config+0x40>)
 8007a70:	2207      	movs	r2, #7
 8007a72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007a74:	2300      	movs	r3, #0
}
 8007a76:	4618      	mov	r0, r3
 8007a78:	3708      	adds	r7, #8
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd80      	pop	{r7, pc}
 8007a7e:	bf00      	nop
 8007a80:	e000e010 	.word	0xe000e010

08007a84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b082      	sub	sp, #8
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	f7ff ff29 	bl	80078e4 <__NVIC_SetPriorityGrouping>
}
 8007a92:	bf00      	nop
 8007a94:	3708      	adds	r7, #8
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bd80      	pop	{r7, pc}

08007a9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007a9a:	b580      	push	{r7, lr}
 8007a9c:	b086      	sub	sp, #24
 8007a9e:	af00      	add	r7, sp, #0
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	60b9      	str	r1, [r7, #8]
 8007aa4:	607a      	str	r2, [r7, #4]
 8007aa6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007aa8:	f7ff ff40 	bl	800792c <__NVIC_GetPriorityGrouping>
 8007aac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007aae:	687a      	ldr	r2, [r7, #4]
 8007ab0:	68b9      	ldr	r1, [r7, #8]
 8007ab2:	6978      	ldr	r0, [r7, #20]
 8007ab4:	f7ff ff90 	bl	80079d8 <NVIC_EncodePriority>
 8007ab8:	4602      	mov	r2, r0
 8007aba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007abe:	4611      	mov	r1, r2
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	f7ff ff5f 	bl	8007984 <__NVIC_SetPriority>
}
 8007ac6:	bf00      	nop
 8007ac8:	3718      	adds	r7, #24
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}

08007ace <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007ace:	b580      	push	{r7, lr}
 8007ad0:	b082      	sub	sp, #8
 8007ad2:	af00      	add	r7, sp, #0
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007ad8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007adc:	4618      	mov	r0, r3
 8007ade:	f7ff ff33 	bl	8007948 <__NVIC_EnableIRQ>
}
 8007ae2:	bf00      	nop
 8007ae4:	3708      	adds	r7, #8
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd80      	pop	{r7, pc}

08007aea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007aea:	b580      	push	{r7, lr}
 8007aec:	b082      	sub	sp, #8
 8007aee:	af00      	add	r7, sp, #0
 8007af0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	f7ff ffa4 	bl	8007a40 <SysTick_Config>
 8007af8:	4603      	mov	r3, r0
}
 8007afa:	4618      	mov	r0, r3
 8007afc:	3708      	adds	r7, #8
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bd80      	pop	{r7, pc}
	...

08007b04 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b084      	sub	sp, #16
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d101      	bne.n	8007b16 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8007b12:	2301      	movs	r3, #1
 8007b14:	e08d      	b.n	8007c32 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	461a      	mov	r2, r3
 8007b1c:	4b47      	ldr	r3, [pc, #284]	@ (8007c3c <HAL_DMA_Init+0x138>)
 8007b1e:	429a      	cmp	r2, r3
 8007b20:	d80f      	bhi.n	8007b42 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	461a      	mov	r2, r3
 8007b28:	4b45      	ldr	r3, [pc, #276]	@ (8007c40 <HAL_DMA_Init+0x13c>)
 8007b2a:	4413      	add	r3, r2
 8007b2c:	4a45      	ldr	r2, [pc, #276]	@ (8007c44 <HAL_DMA_Init+0x140>)
 8007b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8007b32:	091b      	lsrs	r3, r3, #4
 8007b34:	009a      	lsls	r2, r3, #2
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	4a42      	ldr	r2, [pc, #264]	@ (8007c48 <HAL_DMA_Init+0x144>)
 8007b3e:	641a      	str	r2, [r3, #64]	@ 0x40
 8007b40:	e00e      	b.n	8007b60 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	461a      	mov	r2, r3
 8007b48:	4b40      	ldr	r3, [pc, #256]	@ (8007c4c <HAL_DMA_Init+0x148>)
 8007b4a:	4413      	add	r3, r2
 8007b4c:	4a3d      	ldr	r2, [pc, #244]	@ (8007c44 <HAL_DMA_Init+0x140>)
 8007b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8007b52:	091b      	lsrs	r3, r3, #4
 8007b54:	009a      	lsls	r2, r3, #2
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	4a3c      	ldr	r2, [pc, #240]	@ (8007c50 <HAL_DMA_Init+0x14c>)
 8007b5e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2202      	movs	r2, #2
 8007b64:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8007b76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b7a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8007b84:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	691b      	ldr	r3, [r3, #16]
 8007b8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007b90:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	699b      	ldr	r3, [r3, #24]
 8007b96:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007b9c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6a1b      	ldr	r3, [r3, #32]
 8007ba2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8007ba4:	68fa      	ldr	r2, [r7, #12]
 8007ba6:	4313      	orrs	r3, r2
 8007ba8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	68fa      	ldr	r2, [r7, #12]
 8007bb0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f000 fa76 	bl	80080a4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	689b      	ldr	r3, [r3, #8]
 8007bbc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007bc0:	d102      	bne.n	8007bc8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	685a      	ldr	r2, [r3, #4]
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007bd0:	b2d2      	uxtb	r2, r2
 8007bd2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007bd8:	687a      	ldr	r2, [r7, #4]
 8007bda:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007bdc:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	685b      	ldr	r3, [r3, #4]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d010      	beq.n	8007c08 <HAL_DMA_Init+0x104>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	685b      	ldr	r3, [r3, #4]
 8007bea:	2b04      	cmp	r3, #4
 8007bec:	d80c      	bhi.n	8007c08 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	f000 fa96 	bl	8008120 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c00:	687a      	ldr	r2, [r7, #4]
 8007c02:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007c04:	605a      	str	r2, [r3, #4]
 8007c06:	e008      	b.n	8007c1a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2200      	movs	r2, #0
 8007c12:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2200      	movs	r2, #0
 8007c18:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2201      	movs	r2, #1
 8007c24:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8007c30:	2300      	movs	r3, #0
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	3710      	adds	r7, #16
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}
 8007c3a:	bf00      	nop
 8007c3c:	40020407 	.word	0x40020407
 8007c40:	bffdfff8 	.word	0xbffdfff8
 8007c44:	cccccccd 	.word	0xcccccccd
 8007c48:	40020000 	.word	0x40020000
 8007c4c:	bffdfbf8 	.word	0xbffdfbf8
 8007c50:	40020400 	.word	0x40020400

08007c54 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b086      	sub	sp, #24
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	60f8      	str	r0, [r7, #12]
 8007c5c:	60b9      	str	r1, [r7, #8]
 8007c5e:	607a      	str	r2, [r7, #4]
 8007c60:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007c62:	2300      	movs	r3, #0
 8007c64:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007c6c:	2b01      	cmp	r3, #1
 8007c6e:	d101      	bne.n	8007c74 <HAL_DMA_Start_IT+0x20>
 8007c70:	2302      	movs	r3, #2
 8007c72:	e066      	b.n	8007d42 <HAL_DMA_Start_IT+0xee>
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	2201      	movs	r2, #1
 8007c78:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007c82:	b2db      	uxtb	r3, r3
 8007c84:	2b01      	cmp	r3, #1
 8007c86:	d155      	bne.n	8007d34 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	2202      	movs	r2, #2
 8007c8c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	2200      	movs	r2, #0
 8007c94:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	681a      	ldr	r2, [r3, #0]
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f022 0201 	bic.w	r2, r2, #1
 8007ca4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	687a      	ldr	r2, [r7, #4]
 8007caa:	68b9      	ldr	r1, [r7, #8]
 8007cac:	68f8      	ldr	r0, [r7, #12]
 8007cae:	f000 f9bb 	bl	8008028 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d008      	beq.n	8007ccc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	681a      	ldr	r2, [r3, #0]
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f042 020e 	orr.w	r2, r2, #14
 8007cc8:	601a      	str	r2, [r3, #0]
 8007cca:	e00f      	b.n	8007cec <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	681a      	ldr	r2, [r3, #0]
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f022 0204 	bic.w	r2, r2, #4
 8007cda:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	681a      	ldr	r2, [r3, #0]
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f042 020a 	orr.w	r2, r2, #10
 8007cea:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d007      	beq.n	8007d0a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007cfe:	681a      	ldr	r2, [r3, #0]
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d04:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007d08:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d007      	beq.n	8007d22 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d16:	681a      	ldr	r2, [r3, #0]
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d1c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007d20:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	681a      	ldr	r2, [r3, #0]
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f042 0201 	orr.w	r2, r2, #1
 8007d30:	601a      	str	r2, [r3, #0]
 8007d32:	e005      	b.n	8007d40 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	2200      	movs	r2, #0
 8007d38:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8007d3c:	2302      	movs	r3, #2
 8007d3e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8007d40:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d42:	4618      	mov	r0, r3
 8007d44:	3718      	adds	r7, #24
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bd80      	pop	{r7, pc}

08007d4a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007d4a:	b480      	push	{r7}
 8007d4c:	b085      	sub	sp, #20
 8007d4e:	af00      	add	r7, sp, #0
 8007d50:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007d52:	2300      	movs	r3, #0
 8007d54:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007d5c:	b2db      	uxtb	r3, r3
 8007d5e:	2b02      	cmp	r3, #2
 8007d60:	d005      	beq.n	8007d6e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2204      	movs	r2, #4
 8007d66:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8007d68:	2301      	movs	r3, #1
 8007d6a:	73fb      	strb	r3, [r7, #15]
 8007d6c:	e037      	b.n	8007dde <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	681a      	ldr	r2, [r3, #0]
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f022 020e 	bic.w	r2, r2, #14
 8007d7c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d82:	681a      	ldr	r2, [r3, #0]
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d88:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007d8c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	681a      	ldr	r2, [r3, #0]
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f022 0201 	bic.w	r2, r2, #1
 8007d9c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007da2:	f003 021f 	and.w	r2, r3, #31
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007daa:	2101      	movs	r1, #1
 8007dac:	fa01 f202 	lsl.w	r2, r1, r2
 8007db0:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007db6:	687a      	ldr	r2, [r7, #4]
 8007db8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007dba:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d00c      	beq.n	8007dde <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007dc8:	681a      	ldr	r2, [r3, #0]
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007dce:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007dd2:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007dd8:	687a      	ldr	r2, [r7, #4]
 8007dda:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007ddc:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2201      	movs	r2, #1
 8007de2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2200      	movs	r2, #0
 8007dea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8007dee:	7bfb      	ldrb	r3, [r7, #15]
}
 8007df0:	4618      	mov	r0, r3
 8007df2:	3714      	adds	r7, #20
 8007df4:	46bd      	mov	sp, r7
 8007df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfa:	4770      	bx	lr

08007dfc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b084      	sub	sp, #16
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007e04:	2300      	movs	r3, #0
 8007e06:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007e0e:	b2db      	uxtb	r3, r3
 8007e10:	2b02      	cmp	r3, #2
 8007e12:	d00d      	beq.n	8007e30 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2204      	movs	r2, #4
 8007e18:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2201      	movs	r2, #1
 8007e1e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2200      	movs	r2, #0
 8007e26:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	73fb      	strb	r3, [r7, #15]
 8007e2e:	e047      	b.n	8007ec0 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	681a      	ldr	r2, [r3, #0]
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f022 020e 	bic.w	r2, r2, #14
 8007e3e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	681a      	ldr	r2, [r3, #0]
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f022 0201 	bic.w	r2, r2, #1
 8007e4e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e54:	681a      	ldr	r2, [r3, #0]
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e5a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007e5e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e64:	f003 021f 	and.w	r2, r3, #31
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e6c:	2101      	movs	r1, #1
 8007e6e:	fa01 f202 	lsl.w	r2, r1, r2
 8007e72:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e78:	687a      	ldr	r2, [r7, #4]
 8007e7a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007e7c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d00c      	beq.n	8007ea0 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e8a:	681a      	ldr	r2, [r3, #0]
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e90:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007e94:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e9a:	687a      	ldr	r2, [r7, #4]
 8007e9c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007e9e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2201      	movs	r2, #1
 8007ea4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2200      	movs	r2, #0
 8007eac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d003      	beq.n	8007ec0 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	4798      	blx	r3
    }
  }
  return status;
 8007ec0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	3710      	adds	r7, #16
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bd80      	pop	{r7, pc}

08007eca <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007eca:	b580      	push	{r7, lr}
 8007ecc:	b084      	sub	sp, #16
 8007ece:	af00      	add	r7, sp, #0
 8007ed0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ee6:	f003 031f 	and.w	r3, r3, #31
 8007eea:	2204      	movs	r2, #4
 8007eec:	409a      	lsls	r2, r3
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	4013      	ands	r3, r2
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d026      	beq.n	8007f44 <HAL_DMA_IRQHandler+0x7a>
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	f003 0304 	and.w	r3, r3, #4
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d021      	beq.n	8007f44 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f003 0320 	and.w	r3, r3, #32
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d107      	bne.n	8007f1e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	681a      	ldr	r2, [r3, #0]
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f022 0204 	bic.w	r2, r2, #4
 8007f1c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f22:	f003 021f 	and.w	r2, r3, #31
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f2a:	2104      	movs	r1, #4
 8007f2c:	fa01 f202 	lsl.w	r2, r1, r2
 8007f30:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d071      	beq.n	800801e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f3e:	6878      	ldr	r0, [r7, #4]
 8007f40:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8007f42:	e06c      	b.n	800801e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f48:	f003 031f 	and.w	r3, r3, #31
 8007f4c:	2202      	movs	r2, #2
 8007f4e:	409a      	lsls	r2, r3
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	4013      	ands	r3, r2
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d02e      	beq.n	8007fb6 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	f003 0302 	and.w	r3, r3, #2
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d029      	beq.n	8007fb6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f003 0320 	and.w	r3, r3, #32
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d10b      	bne.n	8007f88 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	681a      	ldr	r2, [r3, #0]
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f022 020a 	bic.w	r2, r2, #10
 8007f7e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2201      	movs	r2, #1
 8007f84:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f8c:	f003 021f 	and.w	r2, r3, #31
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f94:	2102      	movs	r1, #2
 8007f96:	fa01 f202 	lsl.w	r2, r1, r2
 8007f9a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d038      	beq.n	800801e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fb0:	6878      	ldr	r0, [r7, #4]
 8007fb2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8007fb4:	e033      	b.n	800801e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007fba:	f003 031f 	and.w	r3, r3, #31
 8007fbe:	2208      	movs	r2, #8
 8007fc0:	409a      	lsls	r2, r3
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	4013      	ands	r3, r2
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d02a      	beq.n	8008020 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	f003 0308 	and.w	r3, r3, #8
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d025      	beq.n	8008020 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	681a      	ldr	r2, [r3, #0]
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f022 020e 	bic.w	r2, r2, #14
 8007fe2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007fe8:	f003 021f 	and.w	r2, r3, #31
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ff0:	2101      	movs	r1, #1
 8007ff2:	fa01 f202 	lsl.w	r2, r1, r2
 8007ff6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2201      	movs	r2, #1
 8007ffc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2201      	movs	r2, #1
 8008002:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2200      	movs	r2, #0
 800800a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008012:	2b00      	cmp	r3, #0
 8008014:	d004      	beq.n	8008020 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800801e:	bf00      	nop
 8008020:	bf00      	nop
}
 8008022:	3710      	adds	r7, #16
 8008024:	46bd      	mov	sp, r7
 8008026:	bd80      	pop	{r7, pc}

08008028 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008028:	b480      	push	{r7}
 800802a:	b085      	sub	sp, #20
 800802c:	af00      	add	r7, sp, #0
 800802e:	60f8      	str	r0, [r7, #12]
 8008030:	60b9      	str	r1, [r7, #8]
 8008032:	607a      	str	r2, [r7, #4]
 8008034:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800803a:	68fa      	ldr	r2, [r7, #12]
 800803c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800803e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008044:	2b00      	cmp	r3, #0
 8008046:	d004      	beq.n	8008052 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800804c:	68fa      	ldr	r2, [r7, #12]
 800804e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8008050:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008056:	f003 021f 	and.w	r2, r3, #31
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800805e:	2101      	movs	r1, #1
 8008060:	fa01 f202 	lsl.w	r2, r1, r2
 8008064:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	683a      	ldr	r2, [r7, #0]
 800806c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	689b      	ldr	r3, [r3, #8]
 8008072:	2b10      	cmp	r3, #16
 8008074:	d108      	bne.n	8008088 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	687a      	ldr	r2, [r7, #4]
 800807c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	68ba      	ldr	r2, [r7, #8]
 8008084:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8008086:	e007      	b.n	8008098 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	68ba      	ldr	r2, [r7, #8]
 800808e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	687a      	ldr	r2, [r7, #4]
 8008096:	60da      	str	r2, [r3, #12]
}
 8008098:	bf00      	nop
 800809a:	3714      	adds	r7, #20
 800809c:	46bd      	mov	sp, r7
 800809e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a2:	4770      	bx	lr

080080a4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80080a4:	b480      	push	{r7}
 80080a6:	b087      	sub	sp, #28
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	461a      	mov	r2, r3
 80080b2:	4b16      	ldr	r3, [pc, #88]	@ (800810c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80080b4:	429a      	cmp	r2, r3
 80080b6:	d802      	bhi.n	80080be <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80080b8:	4b15      	ldr	r3, [pc, #84]	@ (8008110 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80080ba:	617b      	str	r3, [r7, #20]
 80080bc:	e001      	b.n	80080c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80080be:	4b15      	ldr	r3, [pc, #84]	@ (8008114 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80080c0:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80080c2:	697b      	ldr	r3, [r7, #20]
 80080c4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	b2db      	uxtb	r3, r3
 80080cc:	3b08      	subs	r3, #8
 80080ce:	4a12      	ldr	r2, [pc, #72]	@ (8008118 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80080d0:	fba2 2303 	umull	r2, r3, r2, r3
 80080d4:	091b      	lsrs	r3, r3, #4
 80080d6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080dc:	089b      	lsrs	r3, r3, #2
 80080de:	009a      	lsls	r2, r3, #2
 80080e0:	693b      	ldr	r3, [r7, #16]
 80080e2:	4413      	add	r3, r2
 80080e4:	461a      	mov	r2, r3
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	4a0b      	ldr	r2, [pc, #44]	@ (800811c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80080ee:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	f003 031f 	and.w	r3, r3, #31
 80080f6:	2201      	movs	r2, #1
 80080f8:	409a      	lsls	r2, r3
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80080fe:	bf00      	nop
 8008100:	371c      	adds	r7, #28
 8008102:	46bd      	mov	sp, r7
 8008104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008108:	4770      	bx	lr
 800810a:	bf00      	nop
 800810c:	40020407 	.word	0x40020407
 8008110:	40020800 	.word	0x40020800
 8008114:	40020820 	.word	0x40020820
 8008118:	cccccccd 	.word	0xcccccccd
 800811c:	40020880 	.word	0x40020880

08008120 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008120:	b480      	push	{r7}
 8008122:	b085      	sub	sp, #20
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	685b      	ldr	r3, [r3, #4]
 800812c:	b2db      	uxtb	r3, r3
 800812e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008130:	68fa      	ldr	r2, [r7, #12]
 8008132:	4b0b      	ldr	r3, [pc, #44]	@ (8008160 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8008134:	4413      	add	r3, r2
 8008136:	009b      	lsls	r3, r3, #2
 8008138:	461a      	mov	r2, r3
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	4a08      	ldr	r2, [pc, #32]	@ (8008164 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8008142:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	3b01      	subs	r3, #1
 8008148:	f003 031f 	and.w	r3, r3, #31
 800814c:	2201      	movs	r2, #1
 800814e:	409a      	lsls	r2, r3
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8008154:	bf00      	nop
 8008156:	3714      	adds	r7, #20
 8008158:	46bd      	mov	sp, r7
 800815a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815e:	4770      	bx	lr
 8008160:	1000823f 	.word	0x1000823f
 8008164:	40020940 	.word	0x40020940

08008168 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008168:	b480      	push	{r7}
 800816a:	b087      	sub	sp, #28
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
 8008170:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008172:	2300      	movs	r3, #0
 8008174:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8008176:	e15a      	b.n	800842e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	681a      	ldr	r2, [r3, #0]
 800817c:	2101      	movs	r1, #1
 800817e:	697b      	ldr	r3, [r7, #20]
 8008180:	fa01 f303 	lsl.w	r3, r1, r3
 8008184:	4013      	ands	r3, r2
 8008186:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	2b00      	cmp	r3, #0
 800818c:	f000 814c 	beq.w	8008428 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	685b      	ldr	r3, [r3, #4]
 8008194:	f003 0303 	and.w	r3, r3, #3
 8008198:	2b01      	cmp	r3, #1
 800819a:	d005      	beq.n	80081a8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	685b      	ldr	r3, [r3, #4]
 80081a0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80081a4:	2b02      	cmp	r3, #2
 80081a6:	d130      	bne.n	800820a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	689b      	ldr	r3, [r3, #8]
 80081ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80081ae:	697b      	ldr	r3, [r7, #20]
 80081b0:	005b      	lsls	r3, r3, #1
 80081b2:	2203      	movs	r2, #3
 80081b4:	fa02 f303 	lsl.w	r3, r2, r3
 80081b8:	43db      	mvns	r3, r3
 80081ba:	693a      	ldr	r2, [r7, #16]
 80081bc:	4013      	ands	r3, r2
 80081be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	68da      	ldr	r2, [r3, #12]
 80081c4:	697b      	ldr	r3, [r7, #20]
 80081c6:	005b      	lsls	r3, r3, #1
 80081c8:	fa02 f303 	lsl.w	r3, r2, r3
 80081cc:	693a      	ldr	r2, [r7, #16]
 80081ce:	4313      	orrs	r3, r2
 80081d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	693a      	ldr	r2, [r7, #16]
 80081d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	685b      	ldr	r3, [r3, #4]
 80081dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80081de:	2201      	movs	r2, #1
 80081e0:	697b      	ldr	r3, [r7, #20]
 80081e2:	fa02 f303 	lsl.w	r3, r2, r3
 80081e6:	43db      	mvns	r3, r3
 80081e8:	693a      	ldr	r2, [r7, #16]
 80081ea:	4013      	ands	r3, r2
 80081ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	685b      	ldr	r3, [r3, #4]
 80081f2:	091b      	lsrs	r3, r3, #4
 80081f4:	f003 0201 	and.w	r2, r3, #1
 80081f8:	697b      	ldr	r3, [r7, #20]
 80081fa:	fa02 f303 	lsl.w	r3, r2, r3
 80081fe:	693a      	ldr	r2, [r7, #16]
 8008200:	4313      	orrs	r3, r2
 8008202:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	693a      	ldr	r2, [r7, #16]
 8008208:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	685b      	ldr	r3, [r3, #4]
 800820e:	f003 0303 	and.w	r3, r3, #3
 8008212:	2b03      	cmp	r3, #3
 8008214:	d017      	beq.n	8008246 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	68db      	ldr	r3, [r3, #12]
 800821a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800821c:	697b      	ldr	r3, [r7, #20]
 800821e:	005b      	lsls	r3, r3, #1
 8008220:	2203      	movs	r2, #3
 8008222:	fa02 f303 	lsl.w	r3, r2, r3
 8008226:	43db      	mvns	r3, r3
 8008228:	693a      	ldr	r2, [r7, #16]
 800822a:	4013      	ands	r3, r2
 800822c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	689a      	ldr	r2, [r3, #8]
 8008232:	697b      	ldr	r3, [r7, #20]
 8008234:	005b      	lsls	r3, r3, #1
 8008236:	fa02 f303 	lsl.w	r3, r2, r3
 800823a:	693a      	ldr	r2, [r7, #16]
 800823c:	4313      	orrs	r3, r2
 800823e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	693a      	ldr	r2, [r7, #16]
 8008244:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	685b      	ldr	r3, [r3, #4]
 800824a:	f003 0303 	and.w	r3, r3, #3
 800824e:	2b02      	cmp	r3, #2
 8008250:	d123      	bne.n	800829a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008252:	697b      	ldr	r3, [r7, #20]
 8008254:	08da      	lsrs	r2, r3, #3
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	3208      	adds	r2, #8
 800825a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800825e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008260:	697b      	ldr	r3, [r7, #20]
 8008262:	f003 0307 	and.w	r3, r3, #7
 8008266:	009b      	lsls	r3, r3, #2
 8008268:	220f      	movs	r2, #15
 800826a:	fa02 f303 	lsl.w	r3, r2, r3
 800826e:	43db      	mvns	r3, r3
 8008270:	693a      	ldr	r2, [r7, #16]
 8008272:	4013      	ands	r3, r2
 8008274:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	691a      	ldr	r2, [r3, #16]
 800827a:	697b      	ldr	r3, [r7, #20]
 800827c:	f003 0307 	and.w	r3, r3, #7
 8008280:	009b      	lsls	r3, r3, #2
 8008282:	fa02 f303 	lsl.w	r3, r2, r3
 8008286:	693a      	ldr	r2, [r7, #16]
 8008288:	4313      	orrs	r3, r2
 800828a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800828c:	697b      	ldr	r3, [r7, #20]
 800828e:	08da      	lsrs	r2, r3, #3
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	3208      	adds	r2, #8
 8008294:	6939      	ldr	r1, [r7, #16]
 8008296:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80082a0:	697b      	ldr	r3, [r7, #20]
 80082a2:	005b      	lsls	r3, r3, #1
 80082a4:	2203      	movs	r2, #3
 80082a6:	fa02 f303 	lsl.w	r3, r2, r3
 80082aa:	43db      	mvns	r3, r3
 80082ac:	693a      	ldr	r2, [r7, #16]
 80082ae:	4013      	ands	r3, r2
 80082b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	685b      	ldr	r3, [r3, #4]
 80082b6:	f003 0203 	and.w	r2, r3, #3
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	005b      	lsls	r3, r3, #1
 80082be:	fa02 f303 	lsl.w	r3, r2, r3
 80082c2:	693a      	ldr	r2, [r7, #16]
 80082c4:	4313      	orrs	r3, r2
 80082c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	693a      	ldr	r2, [r7, #16]
 80082cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	685b      	ldr	r3, [r3, #4]
 80082d2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	f000 80a6 	beq.w	8008428 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80082dc:	4b5b      	ldr	r3, [pc, #364]	@ (800844c <HAL_GPIO_Init+0x2e4>)
 80082de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80082e0:	4a5a      	ldr	r2, [pc, #360]	@ (800844c <HAL_GPIO_Init+0x2e4>)
 80082e2:	f043 0301 	orr.w	r3, r3, #1
 80082e6:	6613      	str	r3, [r2, #96]	@ 0x60
 80082e8:	4b58      	ldr	r3, [pc, #352]	@ (800844c <HAL_GPIO_Init+0x2e4>)
 80082ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80082ec:	f003 0301 	and.w	r3, r3, #1
 80082f0:	60bb      	str	r3, [r7, #8]
 80082f2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80082f4:	4a56      	ldr	r2, [pc, #344]	@ (8008450 <HAL_GPIO_Init+0x2e8>)
 80082f6:	697b      	ldr	r3, [r7, #20]
 80082f8:	089b      	lsrs	r3, r3, #2
 80082fa:	3302      	adds	r3, #2
 80082fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008300:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008302:	697b      	ldr	r3, [r7, #20]
 8008304:	f003 0303 	and.w	r3, r3, #3
 8008308:	009b      	lsls	r3, r3, #2
 800830a:	220f      	movs	r2, #15
 800830c:	fa02 f303 	lsl.w	r3, r2, r3
 8008310:	43db      	mvns	r3, r3
 8008312:	693a      	ldr	r2, [r7, #16]
 8008314:	4013      	ands	r3, r2
 8008316:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800831e:	d01f      	beq.n	8008360 <HAL_GPIO_Init+0x1f8>
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	4a4c      	ldr	r2, [pc, #304]	@ (8008454 <HAL_GPIO_Init+0x2ec>)
 8008324:	4293      	cmp	r3, r2
 8008326:	d019      	beq.n	800835c <HAL_GPIO_Init+0x1f4>
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	4a4b      	ldr	r2, [pc, #300]	@ (8008458 <HAL_GPIO_Init+0x2f0>)
 800832c:	4293      	cmp	r3, r2
 800832e:	d013      	beq.n	8008358 <HAL_GPIO_Init+0x1f0>
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	4a4a      	ldr	r2, [pc, #296]	@ (800845c <HAL_GPIO_Init+0x2f4>)
 8008334:	4293      	cmp	r3, r2
 8008336:	d00d      	beq.n	8008354 <HAL_GPIO_Init+0x1ec>
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	4a49      	ldr	r2, [pc, #292]	@ (8008460 <HAL_GPIO_Init+0x2f8>)
 800833c:	4293      	cmp	r3, r2
 800833e:	d007      	beq.n	8008350 <HAL_GPIO_Init+0x1e8>
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	4a48      	ldr	r2, [pc, #288]	@ (8008464 <HAL_GPIO_Init+0x2fc>)
 8008344:	4293      	cmp	r3, r2
 8008346:	d101      	bne.n	800834c <HAL_GPIO_Init+0x1e4>
 8008348:	2305      	movs	r3, #5
 800834a:	e00a      	b.n	8008362 <HAL_GPIO_Init+0x1fa>
 800834c:	2306      	movs	r3, #6
 800834e:	e008      	b.n	8008362 <HAL_GPIO_Init+0x1fa>
 8008350:	2304      	movs	r3, #4
 8008352:	e006      	b.n	8008362 <HAL_GPIO_Init+0x1fa>
 8008354:	2303      	movs	r3, #3
 8008356:	e004      	b.n	8008362 <HAL_GPIO_Init+0x1fa>
 8008358:	2302      	movs	r3, #2
 800835a:	e002      	b.n	8008362 <HAL_GPIO_Init+0x1fa>
 800835c:	2301      	movs	r3, #1
 800835e:	e000      	b.n	8008362 <HAL_GPIO_Init+0x1fa>
 8008360:	2300      	movs	r3, #0
 8008362:	697a      	ldr	r2, [r7, #20]
 8008364:	f002 0203 	and.w	r2, r2, #3
 8008368:	0092      	lsls	r2, r2, #2
 800836a:	4093      	lsls	r3, r2
 800836c:	693a      	ldr	r2, [r7, #16]
 800836e:	4313      	orrs	r3, r2
 8008370:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008372:	4937      	ldr	r1, [pc, #220]	@ (8008450 <HAL_GPIO_Init+0x2e8>)
 8008374:	697b      	ldr	r3, [r7, #20]
 8008376:	089b      	lsrs	r3, r3, #2
 8008378:	3302      	adds	r3, #2
 800837a:	693a      	ldr	r2, [r7, #16]
 800837c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008380:	4b39      	ldr	r3, [pc, #228]	@ (8008468 <HAL_GPIO_Init+0x300>)
 8008382:	689b      	ldr	r3, [r3, #8]
 8008384:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	43db      	mvns	r3, r3
 800838a:	693a      	ldr	r2, [r7, #16]
 800838c:	4013      	ands	r3, r2
 800838e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	685b      	ldr	r3, [r3, #4]
 8008394:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008398:	2b00      	cmp	r3, #0
 800839a:	d003      	beq.n	80083a4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800839c:	693a      	ldr	r2, [r7, #16]
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	4313      	orrs	r3, r2
 80083a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80083a4:	4a30      	ldr	r2, [pc, #192]	@ (8008468 <HAL_GPIO_Init+0x300>)
 80083a6:	693b      	ldr	r3, [r7, #16]
 80083a8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80083aa:	4b2f      	ldr	r3, [pc, #188]	@ (8008468 <HAL_GPIO_Init+0x300>)
 80083ac:	68db      	ldr	r3, [r3, #12]
 80083ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	43db      	mvns	r3, r3
 80083b4:	693a      	ldr	r2, [r7, #16]
 80083b6:	4013      	ands	r3, r2
 80083b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	685b      	ldr	r3, [r3, #4]
 80083be:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d003      	beq.n	80083ce <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80083c6:	693a      	ldr	r2, [r7, #16]
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	4313      	orrs	r3, r2
 80083cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80083ce:	4a26      	ldr	r2, [pc, #152]	@ (8008468 <HAL_GPIO_Init+0x300>)
 80083d0:	693b      	ldr	r3, [r7, #16]
 80083d2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80083d4:	4b24      	ldr	r3, [pc, #144]	@ (8008468 <HAL_GPIO_Init+0x300>)
 80083d6:	685b      	ldr	r3, [r3, #4]
 80083d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	43db      	mvns	r3, r3
 80083de:	693a      	ldr	r2, [r7, #16]
 80083e0:	4013      	ands	r3, r2
 80083e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	685b      	ldr	r3, [r3, #4]
 80083e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d003      	beq.n	80083f8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80083f0:	693a      	ldr	r2, [r7, #16]
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	4313      	orrs	r3, r2
 80083f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80083f8:	4a1b      	ldr	r2, [pc, #108]	@ (8008468 <HAL_GPIO_Init+0x300>)
 80083fa:	693b      	ldr	r3, [r7, #16]
 80083fc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80083fe:	4b1a      	ldr	r3, [pc, #104]	@ (8008468 <HAL_GPIO_Init+0x300>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	43db      	mvns	r3, r3
 8008408:	693a      	ldr	r2, [r7, #16]
 800840a:	4013      	ands	r3, r2
 800840c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	685b      	ldr	r3, [r3, #4]
 8008412:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008416:	2b00      	cmp	r3, #0
 8008418:	d003      	beq.n	8008422 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800841a:	693a      	ldr	r2, [r7, #16]
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	4313      	orrs	r3, r2
 8008420:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8008422:	4a11      	ldr	r2, [pc, #68]	@ (8008468 <HAL_GPIO_Init+0x300>)
 8008424:	693b      	ldr	r3, [r7, #16]
 8008426:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8008428:	697b      	ldr	r3, [r7, #20]
 800842a:	3301      	adds	r3, #1
 800842c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	681a      	ldr	r2, [r3, #0]
 8008432:	697b      	ldr	r3, [r7, #20]
 8008434:	fa22 f303 	lsr.w	r3, r2, r3
 8008438:	2b00      	cmp	r3, #0
 800843a:	f47f ae9d 	bne.w	8008178 <HAL_GPIO_Init+0x10>
  }
}
 800843e:	bf00      	nop
 8008440:	bf00      	nop
 8008442:	371c      	adds	r7, #28
 8008444:	46bd      	mov	sp, r7
 8008446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844a:	4770      	bx	lr
 800844c:	40021000 	.word	0x40021000
 8008450:	40010000 	.word	0x40010000
 8008454:	48000400 	.word	0x48000400
 8008458:	48000800 	.word	0x48000800
 800845c:	48000c00 	.word	0x48000c00
 8008460:	48001000 	.word	0x48001000
 8008464:	48001400 	.word	0x48001400
 8008468:	40010400 	.word	0x40010400

0800846c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800846c:	b480      	push	{r7}
 800846e:	b085      	sub	sp, #20
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
 8008474:	460b      	mov	r3, r1
 8008476:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	691a      	ldr	r2, [r3, #16]
 800847c:	887b      	ldrh	r3, [r7, #2]
 800847e:	4013      	ands	r3, r2
 8008480:	2b00      	cmp	r3, #0
 8008482:	d002      	beq.n	800848a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008484:	2301      	movs	r3, #1
 8008486:	73fb      	strb	r3, [r7, #15]
 8008488:	e001      	b.n	800848e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800848a:	2300      	movs	r3, #0
 800848c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800848e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008490:	4618      	mov	r0, r3
 8008492:	3714      	adds	r7, #20
 8008494:	46bd      	mov	sp, r7
 8008496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849a:	4770      	bx	lr

0800849c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800849c:	b480      	push	{r7}
 800849e:	b083      	sub	sp, #12
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
 80084a4:	460b      	mov	r3, r1
 80084a6:	807b      	strh	r3, [r7, #2]
 80084a8:	4613      	mov	r3, r2
 80084aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80084ac:	787b      	ldrb	r3, [r7, #1]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d003      	beq.n	80084ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80084b2:	887a      	ldrh	r2, [r7, #2]
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80084b8:	e002      	b.n	80084c0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80084ba:	887a      	ldrh	r2, [r7, #2]
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80084c0:	bf00      	nop
 80084c2:	370c      	adds	r7, #12
 80084c4:	46bd      	mov	sp, r7
 80084c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ca:	4770      	bx	lr

080084cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b082      	sub	sp, #8
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	4603      	mov	r3, r0
 80084d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80084d6:	4b08      	ldr	r3, [pc, #32]	@ (80084f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80084d8:	695a      	ldr	r2, [r3, #20]
 80084da:	88fb      	ldrh	r3, [r7, #6]
 80084dc:	4013      	ands	r3, r2
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d006      	beq.n	80084f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80084e2:	4a05      	ldr	r2, [pc, #20]	@ (80084f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80084e4:	88fb      	ldrh	r3, [r7, #6]
 80084e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80084e8:	88fb      	ldrh	r3, [r7, #6]
 80084ea:	4618      	mov	r0, r3
 80084ec:	f7fb ffa6 	bl	800443c <HAL_GPIO_EXTI_Callback>
  }
}
 80084f0:	bf00      	nop
 80084f2:	3708      	adds	r7, #8
 80084f4:	46bd      	mov	sp, r7
 80084f6:	bd80      	pop	{r7, pc}
 80084f8:	40010400 	.word	0x40010400

080084fc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80084fc:	b480      	push	{r7}
 80084fe:	b085      	sub	sp, #20
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d141      	bne.n	800858e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800850a:	4b4b      	ldr	r3, [pc, #300]	@ (8008638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008512:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008516:	d131      	bne.n	800857c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008518:	4b47      	ldr	r3, [pc, #284]	@ (8008638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800851a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800851e:	4a46      	ldr	r2, [pc, #280]	@ (8008638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008520:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008524:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008528:	4b43      	ldr	r3, [pc, #268]	@ (8008638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008530:	4a41      	ldr	r2, [pc, #260]	@ (8008638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008532:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008536:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008538:	4b40      	ldr	r3, [pc, #256]	@ (800863c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	2232      	movs	r2, #50	@ 0x32
 800853e:	fb02 f303 	mul.w	r3, r2, r3
 8008542:	4a3f      	ldr	r2, [pc, #252]	@ (8008640 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008544:	fba2 2303 	umull	r2, r3, r2, r3
 8008548:	0c9b      	lsrs	r3, r3, #18
 800854a:	3301      	adds	r3, #1
 800854c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800854e:	e002      	b.n	8008556 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	3b01      	subs	r3, #1
 8008554:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008556:	4b38      	ldr	r3, [pc, #224]	@ (8008638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008558:	695b      	ldr	r3, [r3, #20]
 800855a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800855e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008562:	d102      	bne.n	800856a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d1f2      	bne.n	8008550 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800856a:	4b33      	ldr	r3, [pc, #204]	@ (8008638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800856c:	695b      	ldr	r3, [r3, #20]
 800856e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008572:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008576:	d158      	bne.n	800862a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008578:	2303      	movs	r3, #3
 800857a:	e057      	b.n	800862c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800857c:	4b2e      	ldr	r3, [pc, #184]	@ (8008638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800857e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008582:	4a2d      	ldr	r2, [pc, #180]	@ (8008638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008584:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008588:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800858c:	e04d      	b.n	800862a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008594:	d141      	bne.n	800861a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008596:	4b28      	ldr	r3, [pc, #160]	@ (8008638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800859e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80085a2:	d131      	bne.n	8008608 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80085a4:	4b24      	ldr	r3, [pc, #144]	@ (8008638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80085a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80085aa:	4a23      	ldr	r2, [pc, #140]	@ (8008638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80085ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80085b0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80085b4:	4b20      	ldr	r3, [pc, #128]	@ (8008638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80085bc:	4a1e      	ldr	r2, [pc, #120]	@ (8008638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80085be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80085c2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80085c4:	4b1d      	ldr	r3, [pc, #116]	@ (800863c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	2232      	movs	r2, #50	@ 0x32
 80085ca:	fb02 f303 	mul.w	r3, r2, r3
 80085ce:	4a1c      	ldr	r2, [pc, #112]	@ (8008640 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80085d0:	fba2 2303 	umull	r2, r3, r2, r3
 80085d4:	0c9b      	lsrs	r3, r3, #18
 80085d6:	3301      	adds	r3, #1
 80085d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80085da:	e002      	b.n	80085e2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	3b01      	subs	r3, #1
 80085e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80085e2:	4b15      	ldr	r3, [pc, #84]	@ (8008638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80085e4:	695b      	ldr	r3, [r3, #20]
 80085e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80085ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80085ee:	d102      	bne.n	80085f6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d1f2      	bne.n	80085dc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80085f6:	4b10      	ldr	r3, [pc, #64]	@ (8008638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80085f8:	695b      	ldr	r3, [r3, #20]
 80085fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80085fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008602:	d112      	bne.n	800862a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008604:	2303      	movs	r3, #3
 8008606:	e011      	b.n	800862c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008608:	4b0b      	ldr	r3, [pc, #44]	@ (8008638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800860a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800860e:	4a0a      	ldr	r2, [pc, #40]	@ (8008638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008610:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008614:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8008618:	e007      	b.n	800862a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800861a:	4b07      	ldr	r3, [pc, #28]	@ (8008638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008622:	4a05      	ldr	r2, [pc, #20]	@ (8008638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008624:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008628:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800862a:	2300      	movs	r3, #0
}
 800862c:	4618      	mov	r0, r3
 800862e:	3714      	adds	r7, #20
 8008630:	46bd      	mov	sp, r7
 8008632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008636:	4770      	bx	lr
 8008638:	40007000 	.word	0x40007000
 800863c:	20000178 	.word	0x20000178
 8008640:	431bde83 	.word	0x431bde83

08008644 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8008644:	b480      	push	{r7}
 8008646:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8008648:	4b05      	ldr	r3, [pc, #20]	@ (8008660 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800864a:	689b      	ldr	r3, [r3, #8]
 800864c:	4a04      	ldr	r2, [pc, #16]	@ (8008660 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800864e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008652:	6093      	str	r3, [r2, #8]
}
 8008654:	bf00      	nop
 8008656:	46bd      	mov	sp, r7
 8008658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865c:	4770      	bx	lr
 800865e:	bf00      	nop
 8008660:	40007000 	.word	0x40007000

08008664 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b088      	sub	sp, #32
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d101      	bne.n	8008676 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008672:	2301      	movs	r3, #1
 8008674:	e2fe      	b.n	8008c74 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f003 0301 	and.w	r3, r3, #1
 800867e:	2b00      	cmp	r3, #0
 8008680:	d075      	beq.n	800876e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008682:	4b97      	ldr	r3, [pc, #604]	@ (80088e0 <HAL_RCC_OscConfig+0x27c>)
 8008684:	689b      	ldr	r3, [r3, #8]
 8008686:	f003 030c 	and.w	r3, r3, #12
 800868a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800868c:	4b94      	ldr	r3, [pc, #592]	@ (80088e0 <HAL_RCC_OscConfig+0x27c>)
 800868e:	68db      	ldr	r3, [r3, #12]
 8008690:	f003 0303 	and.w	r3, r3, #3
 8008694:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8008696:	69bb      	ldr	r3, [r7, #24]
 8008698:	2b0c      	cmp	r3, #12
 800869a:	d102      	bne.n	80086a2 <HAL_RCC_OscConfig+0x3e>
 800869c:	697b      	ldr	r3, [r7, #20]
 800869e:	2b03      	cmp	r3, #3
 80086a0:	d002      	beq.n	80086a8 <HAL_RCC_OscConfig+0x44>
 80086a2:	69bb      	ldr	r3, [r7, #24]
 80086a4:	2b08      	cmp	r3, #8
 80086a6:	d10b      	bne.n	80086c0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80086a8:	4b8d      	ldr	r3, [pc, #564]	@ (80088e0 <HAL_RCC_OscConfig+0x27c>)
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d05b      	beq.n	800876c <HAL_RCC_OscConfig+0x108>
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	685b      	ldr	r3, [r3, #4]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d157      	bne.n	800876c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80086bc:	2301      	movs	r3, #1
 80086be:	e2d9      	b.n	8008c74 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	685b      	ldr	r3, [r3, #4]
 80086c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80086c8:	d106      	bne.n	80086d8 <HAL_RCC_OscConfig+0x74>
 80086ca:	4b85      	ldr	r3, [pc, #532]	@ (80088e0 <HAL_RCC_OscConfig+0x27c>)
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	4a84      	ldr	r2, [pc, #528]	@ (80088e0 <HAL_RCC_OscConfig+0x27c>)
 80086d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80086d4:	6013      	str	r3, [r2, #0]
 80086d6:	e01d      	b.n	8008714 <HAL_RCC_OscConfig+0xb0>
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	685b      	ldr	r3, [r3, #4]
 80086dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80086e0:	d10c      	bne.n	80086fc <HAL_RCC_OscConfig+0x98>
 80086e2:	4b7f      	ldr	r3, [pc, #508]	@ (80088e0 <HAL_RCC_OscConfig+0x27c>)
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	4a7e      	ldr	r2, [pc, #504]	@ (80088e0 <HAL_RCC_OscConfig+0x27c>)
 80086e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80086ec:	6013      	str	r3, [r2, #0]
 80086ee:	4b7c      	ldr	r3, [pc, #496]	@ (80088e0 <HAL_RCC_OscConfig+0x27c>)
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	4a7b      	ldr	r2, [pc, #492]	@ (80088e0 <HAL_RCC_OscConfig+0x27c>)
 80086f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80086f8:	6013      	str	r3, [r2, #0]
 80086fa:	e00b      	b.n	8008714 <HAL_RCC_OscConfig+0xb0>
 80086fc:	4b78      	ldr	r3, [pc, #480]	@ (80088e0 <HAL_RCC_OscConfig+0x27c>)
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	4a77      	ldr	r2, [pc, #476]	@ (80088e0 <HAL_RCC_OscConfig+0x27c>)
 8008702:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008706:	6013      	str	r3, [r2, #0]
 8008708:	4b75      	ldr	r3, [pc, #468]	@ (80088e0 <HAL_RCC_OscConfig+0x27c>)
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	4a74      	ldr	r2, [pc, #464]	@ (80088e0 <HAL_RCC_OscConfig+0x27c>)
 800870e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008712:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	685b      	ldr	r3, [r3, #4]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d013      	beq.n	8008744 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800871c:	f7fd fc5e 	bl	8005fdc <HAL_GetTick>
 8008720:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008722:	e008      	b.n	8008736 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008724:	f7fd fc5a 	bl	8005fdc <HAL_GetTick>
 8008728:	4602      	mov	r2, r0
 800872a:	693b      	ldr	r3, [r7, #16]
 800872c:	1ad3      	subs	r3, r2, r3
 800872e:	2b64      	cmp	r3, #100	@ 0x64
 8008730:	d901      	bls.n	8008736 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008732:	2303      	movs	r3, #3
 8008734:	e29e      	b.n	8008c74 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008736:	4b6a      	ldr	r3, [pc, #424]	@ (80088e0 <HAL_RCC_OscConfig+0x27c>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800873e:	2b00      	cmp	r3, #0
 8008740:	d0f0      	beq.n	8008724 <HAL_RCC_OscConfig+0xc0>
 8008742:	e014      	b.n	800876e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008744:	f7fd fc4a 	bl	8005fdc <HAL_GetTick>
 8008748:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800874a:	e008      	b.n	800875e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800874c:	f7fd fc46 	bl	8005fdc <HAL_GetTick>
 8008750:	4602      	mov	r2, r0
 8008752:	693b      	ldr	r3, [r7, #16]
 8008754:	1ad3      	subs	r3, r2, r3
 8008756:	2b64      	cmp	r3, #100	@ 0x64
 8008758:	d901      	bls.n	800875e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800875a:	2303      	movs	r3, #3
 800875c:	e28a      	b.n	8008c74 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800875e:	4b60      	ldr	r3, [pc, #384]	@ (80088e0 <HAL_RCC_OscConfig+0x27c>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008766:	2b00      	cmp	r3, #0
 8008768:	d1f0      	bne.n	800874c <HAL_RCC_OscConfig+0xe8>
 800876a:	e000      	b.n	800876e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800876c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	f003 0302 	and.w	r3, r3, #2
 8008776:	2b00      	cmp	r3, #0
 8008778:	d075      	beq.n	8008866 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800877a:	4b59      	ldr	r3, [pc, #356]	@ (80088e0 <HAL_RCC_OscConfig+0x27c>)
 800877c:	689b      	ldr	r3, [r3, #8]
 800877e:	f003 030c 	and.w	r3, r3, #12
 8008782:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008784:	4b56      	ldr	r3, [pc, #344]	@ (80088e0 <HAL_RCC_OscConfig+0x27c>)
 8008786:	68db      	ldr	r3, [r3, #12]
 8008788:	f003 0303 	and.w	r3, r3, #3
 800878c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800878e:	69bb      	ldr	r3, [r7, #24]
 8008790:	2b0c      	cmp	r3, #12
 8008792:	d102      	bne.n	800879a <HAL_RCC_OscConfig+0x136>
 8008794:	697b      	ldr	r3, [r7, #20]
 8008796:	2b02      	cmp	r3, #2
 8008798:	d002      	beq.n	80087a0 <HAL_RCC_OscConfig+0x13c>
 800879a:	69bb      	ldr	r3, [r7, #24]
 800879c:	2b04      	cmp	r3, #4
 800879e:	d11f      	bne.n	80087e0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80087a0:	4b4f      	ldr	r3, [pc, #316]	@ (80088e0 <HAL_RCC_OscConfig+0x27c>)
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d005      	beq.n	80087b8 <HAL_RCC_OscConfig+0x154>
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	68db      	ldr	r3, [r3, #12]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d101      	bne.n	80087b8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80087b4:	2301      	movs	r3, #1
 80087b6:	e25d      	b.n	8008c74 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80087b8:	4b49      	ldr	r3, [pc, #292]	@ (80088e0 <HAL_RCC_OscConfig+0x27c>)
 80087ba:	685b      	ldr	r3, [r3, #4]
 80087bc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	691b      	ldr	r3, [r3, #16]
 80087c4:	061b      	lsls	r3, r3, #24
 80087c6:	4946      	ldr	r1, [pc, #280]	@ (80088e0 <HAL_RCC_OscConfig+0x27c>)
 80087c8:	4313      	orrs	r3, r2
 80087ca:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80087cc:	4b45      	ldr	r3, [pc, #276]	@ (80088e4 <HAL_RCC_OscConfig+0x280>)
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	4618      	mov	r0, r3
 80087d2:	f7fd fbb7 	bl	8005f44 <HAL_InitTick>
 80087d6:	4603      	mov	r3, r0
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d043      	beq.n	8008864 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80087dc:	2301      	movs	r3, #1
 80087de:	e249      	b.n	8008c74 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	68db      	ldr	r3, [r3, #12]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d023      	beq.n	8008830 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80087e8:	4b3d      	ldr	r3, [pc, #244]	@ (80088e0 <HAL_RCC_OscConfig+0x27c>)
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	4a3c      	ldr	r2, [pc, #240]	@ (80088e0 <HAL_RCC_OscConfig+0x27c>)
 80087ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80087f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087f4:	f7fd fbf2 	bl	8005fdc <HAL_GetTick>
 80087f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80087fa:	e008      	b.n	800880e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80087fc:	f7fd fbee 	bl	8005fdc <HAL_GetTick>
 8008800:	4602      	mov	r2, r0
 8008802:	693b      	ldr	r3, [r7, #16]
 8008804:	1ad3      	subs	r3, r2, r3
 8008806:	2b02      	cmp	r3, #2
 8008808:	d901      	bls.n	800880e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800880a:	2303      	movs	r3, #3
 800880c:	e232      	b.n	8008c74 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800880e:	4b34      	ldr	r3, [pc, #208]	@ (80088e0 <HAL_RCC_OscConfig+0x27c>)
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008816:	2b00      	cmp	r3, #0
 8008818:	d0f0      	beq.n	80087fc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800881a:	4b31      	ldr	r3, [pc, #196]	@ (80088e0 <HAL_RCC_OscConfig+0x27c>)
 800881c:	685b      	ldr	r3, [r3, #4]
 800881e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	691b      	ldr	r3, [r3, #16]
 8008826:	061b      	lsls	r3, r3, #24
 8008828:	492d      	ldr	r1, [pc, #180]	@ (80088e0 <HAL_RCC_OscConfig+0x27c>)
 800882a:	4313      	orrs	r3, r2
 800882c:	604b      	str	r3, [r1, #4]
 800882e:	e01a      	b.n	8008866 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008830:	4b2b      	ldr	r3, [pc, #172]	@ (80088e0 <HAL_RCC_OscConfig+0x27c>)
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	4a2a      	ldr	r2, [pc, #168]	@ (80088e0 <HAL_RCC_OscConfig+0x27c>)
 8008836:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800883a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800883c:	f7fd fbce 	bl	8005fdc <HAL_GetTick>
 8008840:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008842:	e008      	b.n	8008856 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008844:	f7fd fbca 	bl	8005fdc <HAL_GetTick>
 8008848:	4602      	mov	r2, r0
 800884a:	693b      	ldr	r3, [r7, #16]
 800884c:	1ad3      	subs	r3, r2, r3
 800884e:	2b02      	cmp	r3, #2
 8008850:	d901      	bls.n	8008856 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8008852:	2303      	movs	r3, #3
 8008854:	e20e      	b.n	8008c74 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008856:	4b22      	ldr	r3, [pc, #136]	@ (80088e0 <HAL_RCC_OscConfig+0x27c>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800885e:	2b00      	cmp	r3, #0
 8008860:	d1f0      	bne.n	8008844 <HAL_RCC_OscConfig+0x1e0>
 8008862:	e000      	b.n	8008866 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008864:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f003 0308 	and.w	r3, r3, #8
 800886e:	2b00      	cmp	r3, #0
 8008870:	d041      	beq.n	80088f6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	695b      	ldr	r3, [r3, #20]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d01c      	beq.n	80088b4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800887a:	4b19      	ldr	r3, [pc, #100]	@ (80088e0 <HAL_RCC_OscConfig+0x27c>)
 800887c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008880:	4a17      	ldr	r2, [pc, #92]	@ (80088e0 <HAL_RCC_OscConfig+0x27c>)
 8008882:	f043 0301 	orr.w	r3, r3, #1
 8008886:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800888a:	f7fd fba7 	bl	8005fdc <HAL_GetTick>
 800888e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008890:	e008      	b.n	80088a4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008892:	f7fd fba3 	bl	8005fdc <HAL_GetTick>
 8008896:	4602      	mov	r2, r0
 8008898:	693b      	ldr	r3, [r7, #16]
 800889a:	1ad3      	subs	r3, r2, r3
 800889c:	2b02      	cmp	r3, #2
 800889e:	d901      	bls.n	80088a4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80088a0:	2303      	movs	r3, #3
 80088a2:	e1e7      	b.n	8008c74 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80088a4:	4b0e      	ldr	r3, [pc, #56]	@ (80088e0 <HAL_RCC_OscConfig+0x27c>)
 80088a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80088aa:	f003 0302 	and.w	r3, r3, #2
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d0ef      	beq.n	8008892 <HAL_RCC_OscConfig+0x22e>
 80088b2:	e020      	b.n	80088f6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80088b4:	4b0a      	ldr	r3, [pc, #40]	@ (80088e0 <HAL_RCC_OscConfig+0x27c>)
 80088b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80088ba:	4a09      	ldr	r2, [pc, #36]	@ (80088e0 <HAL_RCC_OscConfig+0x27c>)
 80088bc:	f023 0301 	bic.w	r3, r3, #1
 80088c0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80088c4:	f7fd fb8a 	bl	8005fdc <HAL_GetTick>
 80088c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80088ca:	e00d      	b.n	80088e8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80088cc:	f7fd fb86 	bl	8005fdc <HAL_GetTick>
 80088d0:	4602      	mov	r2, r0
 80088d2:	693b      	ldr	r3, [r7, #16]
 80088d4:	1ad3      	subs	r3, r2, r3
 80088d6:	2b02      	cmp	r3, #2
 80088d8:	d906      	bls.n	80088e8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80088da:	2303      	movs	r3, #3
 80088dc:	e1ca      	b.n	8008c74 <HAL_RCC_OscConfig+0x610>
 80088de:	bf00      	nop
 80088e0:	40021000 	.word	0x40021000
 80088e4:	2000017c 	.word	0x2000017c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80088e8:	4b8c      	ldr	r3, [pc, #560]	@ (8008b1c <HAL_RCC_OscConfig+0x4b8>)
 80088ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80088ee:	f003 0302 	and.w	r3, r3, #2
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d1ea      	bne.n	80088cc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f003 0304 	and.w	r3, r3, #4
 80088fe:	2b00      	cmp	r3, #0
 8008900:	f000 80a6 	beq.w	8008a50 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008904:	2300      	movs	r3, #0
 8008906:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008908:	4b84      	ldr	r3, [pc, #528]	@ (8008b1c <HAL_RCC_OscConfig+0x4b8>)
 800890a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800890c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008910:	2b00      	cmp	r3, #0
 8008912:	d101      	bne.n	8008918 <HAL_RCC_OscConfig+0x2b4>
 8008914:	2301      	movs	r3, #1
 8008916:	e000      	b.n	800891a <HAL_RCC_OscConfig+0x2b6>
 8008918:	2300      	movs	r3, #0
 800891a:	2b00      	cmp	r3, #0
 800891c:	d00d      	beq.n	800893a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800891e:	4b7f      	ldr	r3, [pc, #508]	@ (8008b1c <HAL_RCC_OscConfig+0x4b8>)
 8008920:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008922:	4a7e      	ldr	r2, [pc, #504]	@ (8008b1c <HAL_RCC_OscConfig+0x4b8>)
 8008924:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008928:	6593      	str	r3, [r2, #88]	@ 0x58
 800892a:	4b7c      	ldr	r3, [pc, #496]	@ (8008b1c <HAL_RCC_OscConfig+0x4b8>)
 800892c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800892e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008932:	60fb      	str	r3, [r7, #12]
 8008934:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8008936:	2301      	movs	r3, #1
 8008938:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800893a:	4b79      	ldr	r3, [pc, #484]	@ (8008b20 <HAL_RCC_OscConfig+0x4bc>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008942:	2b00      	cmp	r3, #0
 8008944:	d118      	bne.n	8008978 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008946:	4b76      	ldr	r3, [pc, #472]	@ (8008b20 <HAL_RCC_OscConfig+0x4bc>)
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	4a75      	ldr	r2, [pc, #468]	@ (8008b20 <HAL_RCC_OscConfig+0x4bc>)
 800894c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008950:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008952:	f7fd fb43 	bl	8005fdc <HAL_GetTick>
 8008956:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008958:	e008      	b.n	800896c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800895a:	f7fd fb3f 	bl	8005fdc <HAL_GetTick>
 800895e:	4602      	mov	r2, r0
 8008960:	693b      	ldr	r3, [r7, #16]
 8008962:	1ad3      	subs	r3, r2, r3
 8008964:	2b02      	cmp	r3, #2
 8008966:	d901      	bls.n	800896c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8008968:	2303      	movs	r3, #3
 800896a:	e183      	b.n	8008c74 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800896c:	4b6c      	ldr	r3, [pc, #432]	@ (8008b20 <HAL_RCC_OscConfig+0x4bc>)
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008974:	2b00      	cmp	r3, #0
 8008976:	d0f0      	beq.n	800895a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	689b      	ldr	r3, [r3, #8]
 800897c:	2b01      	cmp	r3, #1
 800897e:	d108      	bne.n	8008992 <HAL_RCC_OscConfig+0x32e>
 8008980:	4b66      	ldr	r3, [pc, #408]	@ (8008b1c <HAL_RCC_OscConfig+0x4b8>)
 8008982:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008986:	4a65      	ldr	r2, [pc, #404]	@ (8008b1c <HAL_RCC_OscConfig+0x4b8>)
 8008988:	f043 0301 	orr.w	r3, r3, #1
 800898c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008990:	e024      	b.n	80089dc <HAL_RCC_OscConfig+0x378>
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	689b      	ldr	r3, [r3, #8]
 8008996:	2b05      	cmp	r3, #5
 8008998:	d110      	bne.n	80089bc <HAL_RCC_OscConfig+0x358>
 800899a:	4b60      	ldr	r3, [pc, #384]	@ (8008b1c <HAL_RCC_OscConfig+0x4b8>)
 800899c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80089a0:	4a5e      	ldr	r2, [pc, #376]	@ (8008b1c <HAL_RCC_OscConfig+0x4b8>)
 80089a2:	f043 0304 	orr.w	r3, r3, #4
 80089a6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80089aa:	4b5c      	ldr	r3, [pc, #368]	@ (8008b1c <HAL_RCC_OscConfig+0x4b8>)
 80089ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80089b0:	4a5a      	ldr	r2, [pc, #360]	@ (8008b1c <HAL_RCC_OscConfig+0x4b8>)
 80089b2:	f043 0301 	orr.w	r3, r3, #1
 80089b6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80089ba:	e00f      	b.n	80089dc <HAL_RCC_OscConfig+0x378>
 80089bc:	4b57      	ldr	r3, [pc, #348]	@ (8008b1c <HAL_RCC_OscConfig+0x4b8>)
 80089be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80089c2:	4a56      	ldr	r2, [pc, #344]	@ (8008b1c <HAL_RCC_OscConfig+0x4b8>)
 80089c4:	f023 0301 	bic.w	r3, r3, #1
 80089c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80089cc:	4b53      	ldr	r3, [pc, #332]	@ (8008b1c <HAL_RCC_OscConfig+0x4b8>)
 80089ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80089d2:	4a52      	ldr	r2, [pc, #328]	@ (8008b1c <HAL_RCC_OscConfig+0x4b8>)
 80089d4:	f023 0304 	bic.w	r3, r3, #4
 80089d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	689b      	ldr	r3, [r3, #8]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d016      	beq.n	8008a12 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80089e4:	f7fd fafa 	bl	8005fdc <HAL_GetTick>
 80089e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80089ea:	e00a      	b.n	8008a02 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80089ec:	f7fd faf6 	bl	8005fdc <HAL_GetTick>
 80089f0:	4602      	mov	r2, r0
 80089f2:	693b      	ldr	r3, [r7, #16]
 80089f4:	1ad3      	subs	r3, r2, r3
 80089f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80089fa:	4293      	cmp	r3, r2
 80089fc:	d901      	bls.n	8008a02 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80089fe:	2303      	movs	r3, #3
 8008a00:	e138      	b.n	8008c74 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008a02:	4b46      	ldr	r3, [pc, #280]	@ (8008b1c <HAL_RCC_OscConfig+0x4b8>)
 8008a04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a08:	f003 0302 	and.w	r3, r3, #2
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d0ed      	beq.n	80089ec <HAL_RCC_OscConfig+0x388>
 8008a10:	e015      	b.n	8008a3e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a12:	f7fd fae3 	bl	8005fdc <HAL_GetTick>
 8008a16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008a18:	e00a      	b.n	8008a30 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008a1a:	f7fd fadf 	bl	8005fdc <HAL_GetTick>
 8008a1e:	4602      	mov	r2, r0
 8008a20:	693b      	ldr	r3, [r7, #16]
 8008a22:	1ad3      	subs	r3, r2, r3
 8008a24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008a28:	4293      	cmp	r3, r2
 8008a2a:	d901      	bls.n	8008a30 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8008a2c:	2303      	movs	r3, #3
 8008a2e:	e121      	b.n	8008c74 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008a30:	4b3a      	ldr	r3, [pc, #232]	@ (8008b1c <HAL_RCC_OscConfig+0x4b8>)
 8008a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a36:	f003 0302 	and.w	r3, r3, #2
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d1ed      	bne.n	8008a1a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008a3e:	7ffb      	ldrb	r3, [r7, #31]
 8008a40:	2b01      	cmp	r3, #1
 8008a42:	d105      	bne.n	8008a50 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008a44:	4b35      	ldr	r3, [pc, #212]	@ (8008b1c <HAL_RCC_OscConfig+0x4b8>)
 8008a46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a48:	4a34      	ldr	r2, [pc, #208]	@ (8008b1c <HAL_RCC_OscConfig+0x4b8>)
 8008a4a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008a4e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f003 0320 	and.w	r3, r3, #32
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d03c      	beq.n	8008ad6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	699b      	ldr	r3, [r3, #24]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d01c      	beq.n	8008a9e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008a64:	4b2d      	ldr	r3, [pc, #180]	@ (8008b1c <HAL_RCC_OscConfig+0x4b8>)
 8008a66:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008a6a:	4a2c      	ldr	r2, [pc, #176]	@ (8008b1c <HAL_RCC_OscConfig+0x4b8>)
 8008a6c:	f043 0301 	orr.w	r3, r3, #1
 8008a70:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a74:	f7fd fab2 	bl	8005fdc <HAL_GetTick>
 8008a78:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008a7a:	e008      	b.n	8008a8e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008a7c:	f7fd faae 	bl	8005fdc <HAL_GetTick>
 8008a80:	4602      	mov	r2, r0
 8008a82:	693b      	ldr	r3, [r7, #16]
 8008a84:	1ad3      	subs	r3, r2, r3
 8008a86:	2b02      	cmp	r3, #2
 8008a88:	d901      	bls.n	8008a8e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8008a8a:	2303      	movs	r3, #3
 8008a8c:	e0f2      	b.n	8008c74 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008a8e:	4b23      	ldr	r3, [pc, #140]	@ (8008b1c <HAL_RCC_OscConfig+0x4b8>)
 8008a90:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008a94:	f003 0302 	and.w	r3, r3, #2
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d0ef      	beq.n	8008a7c <HAL_RCC_OscConfig+0x418>
 8008a9c:	e01b      	b.n	8008ad6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008a9e:	4b1f      	ldr	r3, [pc, #124]	@ (8008b1c <HAL_RCC_OscConfig+0x4b8>)
 8008aa0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008aa4:	4a1d      	ldr	r2, [pc, #116]	@ (8008b1c <HAL_RCC_OscConfig+0x4b8>)
 8008aa6:	f023 0301 	bic.w	r3, r3, #1
 8008aaa:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008aae:	f7fd fa95 	bl	8005fdc <HAL_GetTick>
 8008ab2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008ab4:	e008      	b.n	8008ac8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008ab6:	f7fd fa91 	bl	8005fdc <HAL_GetTick>
 8008aba:	4602      	mov	r2, r0
 8008abc:	693b      	ldr	r3, [r7, #16]
 8008abe:	1ad3      	subs	r3, r2, r3
 8008ac0:	2b02      	cmp	r3, #2
 8008ac2:	d901      	bls.n	8008ac8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8008ac4:	2303      	movs	r3, #3
 8008ac6:	e0d5      	b.n	8008c74 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008ac8:	4b14      	ldr	r3, [pc, #80]	@ (8008b1c <HAL_RCC_OscConfig+0x4b8>)
 8008aca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008ace:	f003 0302 	and.w	r3, r3, #2
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d1ef      	bne.n	8008ab6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	69db      	ldr	r3, [r3, #28]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	f000 80c9 	beq.w	8008c72 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008ae0:	4b0e      	ldr	r3, [pc, #56]	@ (8008b1c <HAL_RCC_OscConfig+0x4b8>)
 8008ae2:	689b      	ldr	r3, [r3, #8]
 8008ae4:	f003 030c 	and.w	r3, r3, #12
 8008ae8:	2b0c      	cmp	r3, #12
 8008aea:	f000 8083 	beq.w	8008bf4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	69db      	ldr	r3, [r3, #28]
 8008af2:	2b02      	cmp	r3, #2
 8008af4:	d15e      	bne.n	8008bb4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008af6:	4b09      	ldr	r3, [pc, #36]	@ (8008b1c <HAL_RCC_OscConfig+0x4b8>)
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	4a08      	ldr	r2, [pc, #32]	@ (8008b1c <HAL_RCC_OscConfig+0x4b8>)
 8008afc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008b00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b02:	f7fd fa6b 	bl	8005fdc <HAL_GetTick>
 8008b06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008b08:	e00c      	b.n	8008b24 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008b0a:	f7fd fa67 	bl	8005fdc <HAL_GetTick>
 8008b0e:	4602      	mov	r2, r0
 8008b10:	693b      	ldr	r3, [r7, #16]
 8008b12:	1ad3      	subs	r3, r2, r3
 8008b14:	2b02      	cmp	r3, #2
 8008b16:	d905      	bls.n	8008b24 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8008b18:	2303      	movs	r3, #3
 8008b1a:	e0ab      	b.n	8008c74 <HAL_RCC_OscConfig+0x610>
 8008b1c:	40021000 	.word	0x40021000
 8008b20:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008b24:	4b55      	ldr	r3, [pc, #340]	@ (8008c7c <HAL_RCC_OscConfig+0x618>)
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d1ec      	bne.n	8008b0a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008b30:	4b52      	ldr	r3, [pc, #328]	@ (8008c7c <HAL_RCC_OscConfig+0x618>)
 8008b32:	68da      	ldr	r2, [r3, #12]
 8008b34:	4b52      	ldr	r3, [pc, #328]	@ (8008c80 <HAL_RCC_OscConfig+0x61c>)
 8008b36:	4013      	ands	r3, r2
 8008b38:	687a      	ldr	r2, [r7, #4]
 8008b3a:	6a11      	ldr	r1, [r2, #32]
 8008b3c:	687a      	ldr	r2, [r7, #4]
 8008b3e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008b40:	3a01      	subs	r2, #1
 8008b42:	0112      	lsls	r2, r2, #4
 8008b44:	4311      	orrs	r1, r2
 8008b46:	687a      	ldr	r2, [r7, #4]
 8008b48:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8008b4a:	0212      	lsls	r2, r2, #8
 8008b4c:	4311      	orrs	r1, r2
 8008b4e:	687a      	ldr	r2, [r7, #4]
 8008b50:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008b52:	0852      	lsrs	r2, r2, #1
 8008b54:	3a01      	subs	r2, #1
 8008b56:	0552      	lsls	r2, r2, #21
 8008b58:	4311      	orrs	r1, r2
 8008b5a:	687a      	ldr	r2, [r7, #4]
 8008b5c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8008b5e:	0852      	lsrs	r2, r2, #1
 8008b60:	3a01      	subs	r2, #1
 8008b62:	0652      	lsls	r2, r2, #25
 8008b64:	4311      	orrs	r1, r2
 8008b66:	687a      	ldr	r2, [r7, #4]
 8008b68:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008b6a:	06d2      	lsls	r2, r2, #27
 8008b6c:	430a      	orrs	r2, r1
 8008b6e:	4943      	ldr	r1, [pc, #268]	@ (8008c7c <HAL_RCC_OscConfig+0x618>)
 8008b70:	4313      	orrs	r3, r2
 8008b72:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008b74:	4b41      	ldr	r3, [pc, #260]	@ (8008c7c <HAL_RCC_OscConfig+0x618>)
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	4a40      	ldr	r2, [pc, #256]	@ (8008c7c <HAL_RCC_OscConfig+0x618>)
 8008b7a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008b7e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008b80:	4b3e      	ldr	r3, [pc, #248]	@ (8008c7c <HAL_RCC_OscConfig+0x618>)
 8008b82:	68db      	ldr	r3, [r3, #12]
 8008b84:	4a3d      	ldr	r2, [pc, #244]	@ (8008c7c <HAL_RCC_OscConfig+0x618>)
 8008b86:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008b8a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b8c:	f7fd fa26 	bl	8005fdc <HAL_GetTick>
 8008b90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008b92:	e008      	b.n	8008ba6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008b94:	f7fd fa22 	bl	8005fdc <HAL_GetTick>
 8008b98:	4602      	mov	r2, r0
 8008b9a:	693b      	ldr	r3, [r7, #16]
 8008b9c:	1ad3      	subs	r3, r2, r3
 8008b9e:	2b02      	cmp	r3, #2
 8008ba0:	d901      	bls.n	8008ba6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8008ba2:	2303      	movs	r3, #3
 8008ba4:	e066      	b.n	8008c74 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008ba6:	4b35      	ldr	r3, [pc, #212]	@ (8008c7c <HAL_RCC_OscConfig+0x618>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d0f0      	beq.n	8008b94 <HAL_RCC_OscConfig+0x530>
 8008bb2:	e05e      	b.n	8008c72 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008bb4:	4b31      	ldr	r3, [pc, #196]	@ (8008c7c <HAL_RCC_OscConfig+0x618>)
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	4a30      	ldr	r2, [pc, #192]	@ (8008c7c <HAL_RCC_OscConfig+0x618>)
 8008bba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008bbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bc0:	f7fd fa0c 	bl	8005fdc <HAL_GetTick>
 8008bc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008bc6:	e008      	b.n	8008bda <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008bc8:	f7fd fa08 	bl	8005fdc <HAL_GetTick>
 8008bcc:	4602      	mov	r2, r0
 8008bce:	693b      	ldr	r3, [r7, #16]
 8008bd0:	1ad3      	subs	r3, r2, r3
 8008bd2:	2b02      	cmp	r3, #2
 8008bd4:	d901      	bls.n	8008bda <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8008bd6:	2303      	movs	r3, #3
 8008bd8:	e04c      	b.n	8008c74 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008bda:	4b28      	ldr	r3, [pc, #160]	@ (8008c7c <HAL_RCC_OscConfig+0x618>)
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d1f0      	bne.n	8008bc8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8008be6:	4b25      	ldr	r3, [pc, #148]	@ (8008c7c <HAL_RCC_OscConfig+0x618>)
 8008be8:	68da      	ldr	r2, [r3, #12]
 8008bea:	4924      	ldr	r1, [pc, #144]	@ (8008c7c <HAL_RCC_OscConfig+0x618>)
 8008bec:	4b25      	ldr	r3, [pc, #148]	@ (8008c84 <HAL_RCC_OscConfig+0x620>)
 8008bee:	4013      	ands	r3, r2
 8008bf0:	60cb      	str	r3, [r1, #12]
 8008bf2:	e03e      	b.n	8008c72 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	69db      	ldr	r3, [r3, #28]
 8008bf8:	2b01      	cmp	r3, #1
 8008bfa:	d101      	bne.n	8008c00 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8008bfc:	2301      	movs	r3, #1
 8008bfe:	e039      	b.n	8008c74 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8008c00:	4b1e      	ldr	r3, [pc, #120]	@ (8008c7c <HAL_RCC_OscConfig+0x618>)
 8008c02:	68db      	ldr	r3, [r3, #12]
 8008c04:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008c06:	697b      	ldr	r3, [r7, #20]
 8008c08:	f003 0203 	and.w	r2, r3, #3
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	6a1b      	ldr	r3, [r3, #32]
 8008c10:	429a      	cmp	r2, r3
 8008c12:	d12c      	bne.n	8008c6e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008c14:	697b      	ldr	r3, [r7, #20]
 8008c16:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c1e:	3b01      	subs	r3, #1
 8008c20:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008c22:	429a      	cmp	r2, r3
 8008c24:	d123      	bne.n	8008c6e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008c26:	697b      	ldr	r3, [r7, #20]
 8008c28:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c30:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008c32:	429a      	cmp	r2, r3
 8008c34:	d11b      	bne.n	8008c6e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008c36:	697b      	ldr	r3, [r7, #20]
 8008c38:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c40:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008c42:	429a      	cmp	r2, r3
 8008c44:	d113      	bne.n	8008c6e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008c46:	697b      	ldr	r3, [r7, #20]
 8008c48:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c50:	085b      	lsrs	r3, r3, #1
 8008c52:	3b01      	subs	r3, #1
 8008c54:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008c56:	429a      	cmp	r2, r3
 8008c58:	d109      	bne.n	8008c6e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008c5a:	697b      	ldr	r3, [r7, #20]
 8008c5c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c64:	085b      	lsrs	r3, r3, #1
 8008c66:	3b01      	subs	r3, #1
 8008c68:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008c6a:	429a      	cmp	r2, r3
 8008c6c:	d001      	beq.n	8008c72 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8008c6e:	2301      	movs	r3, #1
 8008c70:	e000      	b.n	8008c74 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8008c72:	2300      	movs	r3, #0
}
 8008c74:	4618      	mov	r0, r3
 8008c76:	3720      	adds	r7, #32
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	bd80      	pop	{r7, pc}
 8008c7c:	40021000 	.word	0x40021000
 8008c80:	019f800c 	.word	0x019f800c
 8008c84:	feeefffc 	.word	0xfeeefffc

08008c88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b086      	sub	sp, #24
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
 8008c90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8008c92:	2300      	movs	r3, #0
 8008c94:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d101      	bne.n	8008ca0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008c9c:	2301      	movs	r3, #1
 8008c9e:	e11e      	b.n	8008ede <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008ca0:	4b91      	ldr	r3, [pc, #580]	@ (8008ee8 <HAL_RCC_ClockConfig+0x260>)
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	f003 030f 	and.w	r3, r3, #15
 8008ca8:	683a      	ldr	r2, [r7, #0]
 8008caa:	429a      	cmp	r2, r3
 8008cac:	d910      	bls.n	8008cd0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008cae:	4b8e      	ldr	r3, [pc, #568]	@ (8008ee8 <HAL_RCC_ClockConfig+0x260>)
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f023 020f 	bic.w	r2, r3, #15
 8008cb6:	498c      	ldr	r1, [pc, #560]	@ (8008ee8 <HAL_RCC_ClockConfig+0x260>)
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	4313      	orrs	r3, r2
 8008cbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008cbe:	4b8a      	ldr	r3, [pc, #552]	@ (8008ee8 <HAL_RCC_ClockConfig+0x260>)
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f003 030f 	and.w	r3, r3, #15
 8008cc6:	683a      	ldr	r2, [r7, #0]
 8008cc8:	429a      	cmp	r2, r3
 8008cca:	d001      	beq.n	8008cd0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008ccc:	2301      	movs	r3, #1
 8008cce:	e106      	b.n	8008ede <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f003 0301 	and.w	r3, r3, #1
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d073      	beq.n	8008dc4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	685b      	ldr	r3, [r3, #4]
 8008ce0:	2b03      	cmp	r3, #3
 8008ce2:	d129      	bne.n	8008d38 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008ce4:	4b81      	ldr	r3, [pc, #516]	@ (8008eec <HAL_RCC_ClockConfig+0x264>)
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d101      	bne.n	8008cf4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8008cf0:	2301      	movs	r3, #1
 8008cf2:	e0f4      	b.n	8008ede <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8008cf4:	f000 f99e 	bl	8009034 <RCC_GetSysClockFreqFromPLLSource>
 8008cf8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8008cfa:	693b      	ldr	r3, [r7, #16]
 8008cfc:	4a7c      	ldr	r2, [pc, #496]	@ (8008ef0 <HAL_RCC_ClockConfig+0x268>)
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	d93f      	bls.n	8008d82 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008d02:	4b7a      	ldr	r3, [pc, #488]	@ (8008eec <HAL_RCC_ClockConfig+0x264>)
 8008d04:	689b      	ldr	r3, [r3, #8]
 8008d06:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d009      	beq.n	8008d22 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d033      	beq.n	8008d82 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d12f      	bne.n	8008d82 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008d22:	4b72      	ldr	r3, [pc, #456]	@ (8008eec <HAL_RCC_ClockConfig+0x264>)
 8008d24:	689b      	ldr	r3, [r3, #8]
 8008d26:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008d2a:	4a70      	ldr	r2, [pc, #448]	@ (8008eec <HAL_RCC_ClockConfig+0x264>)
 8008d2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d30:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8008d32:	2380      	movs	r3, #128	@ 0x80
 8008d34:	617b      	str	r3, [r7, #20]
 8008d36:	e024      	b.n	8008d82 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	685b      	ldr	r3, [r3, #4]
 8008d3c:	2b02      	cmp	r3, #2
 8008d3e:	d107      	bne.n	8008d50 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008d40:	4b6a      	ldr	r3, [pc, #424]	@ (8008eec <HAL_RCC_ClockConfig+0x264>)
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d109      	bne.n	8008d60 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	e0c6      	b.n	8008ede <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008d50:	4b66      	ldr	r3, [pc, #408]	@ (8008eec <HAL_RCC_ClockConfig+0x264>)
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d101      	bne.n	8008d60 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008d5c:	2301      	movs	r3, #1
 8008d5e:	e0be      	b.n	8008ede <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8008d60:	f000 f8ce 	bl	8008f00 <HAL_RCC_GetSysClockFreq>
 8008d64:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8008d66:	693b      	ldr	r3, [r7, #16]
 8008d68:	4a61      	ldr	r2, [pc, #388]	@ (8008ef0 <HAL_RCC_ClockConfig+0x268>)
 8008d6a:	4293      	cmp	r3, r2
 8008d6c:	d909      	bls.n	8008d82 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008d6e:	4b5f      	ldr	r3, [pc, #380]	@ (8008eec <HAL_RCC_ClockConfig+0x264>)
 8008d70:	689b      	ldr	r3, [r3, #8]
 8008d72:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008d76:	4a5d      	ldr	r2, [pc, #372]	@ (8008eec <HAL_RCC_ClockConfig+0x264>)
 8008d78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d7c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8008d7e:	2380      	movs	r3, #128	@ 0x80
 8008d80:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008d82:	4b5a      	ldr	r3, [pc, #360]	@ (8008eec <HAL_RCC_ClockConfig+0x264>)
 8008d84:	689b      	ldr	r3, [r3, #8]
 8008d86:	f023 0203 	bic.w	r2, r3, #3
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	685b      	ldr	r3, [r3, #4]
 8008d8e:	4957      	ldr	r1, [pc, #348]	@ (8008eec <HAL_RCC_ClockConfig+0x264>)
 8008d90:	4313      	orrs	r3, r2
 8008d92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d94:	f7fd f922 	bl	8005fdc <HAL_GetTick>
 8008d98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008d9a:	e00a      	b.n	8008db2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008d9c:	f7fd f91e 	bl	8005fdc <HAL_GetTick>
 8008da0:	4602      	mov	r2, r0
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	1ad3      	subs	r3, r2, r3
 8008da6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008daa:	4293      	cmp	r3, r2
 8008dac:	d901      	bls.n	8008db2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8008dae:	2303      	movs	r3, #3
 8008db0:	e095      	b.n	8008ede <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008db2:	4b4e      	ldr	r3, [pc, #312]	@ (8008eec <HAL_RCC_ClockConfig+0x264>)
 8008db4:	689b      	ldr	r3, [r3, #8]
 8008db6:	f003 020c 	and.w	r2, r3, #12
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	685b      	ldr	r3, [r3, #4]
 8008dbe:	009b      	lsls	r3, r3, #2
 8008dc0:	429a      	cmp	r2, r3
 8008dc2:	d1eb      	bne.n	8008d9c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	f003 0302 	and.w	r3, r3, #2
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d023      	beq.n	8008e18 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	f003 0304 	and.w	r3, r3, #4
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d005      	beq.n	8008de8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008ddc:	4b43      	ldr	r3, [pc, #268]	@ (8008eec <HAL_RCC_ClockConfig+0x264>)
 8008dde:	689b      	ldr	r3, [r3, #8]
 8008de0:	4a42      	ldr	r2, [pc, #264]	@ (8008eec <HAL_RCC_ClockConfig+0x264>)
 8008de2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8008de6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	f003 0308 	and.w	r3, r3, #8
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d007      	beq.n	8008e04 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8008df4:	4b3d      	ldr	r3, [pc, #244]	@ (8008eec <HAL_RCC_ClockConfig+0x264>)
 8008df6:	689b      	ldr	r3, [r3, #8]
 8008df8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008dfc:	4a3b      	ldr	r2, [pc, #236]	@ (8008eec <HAL_RCC_ClockConfig+0x264>)
 8008dfe:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8008e02:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008e04:	4b39      	ldr	r3, [pc, #228]	@ (8008eec <HAL_RCC_ClockConfig+0x264>)
 8008e06:	689b      	ldr	r3, [r3, #8]
 8008e08:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	689b      	ldr	r3, [r3, #8]
 8008e10:	4936      	ldr	r1, [pc, #216]	@ (8008eec <HAL_RCC_ClockConfig+0x264>)
 8008e12:	4313      	orrs	r3, r2
 8008e14:	608b      	str	r3, [r1, #8]
 8008e16:	e008      	b.n	8008e2a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8008e18:	697b      	ldr	r3, [r7, #20]
 8008e1a:	2b80      	cmp	r3, #128	@ 0x80
 8008e1c:	d105      	bne.n	8008e2a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8008e1e:	4b33      	ldr	r3, [pc, #204]	@ (8008eec <HAL_RCC_ClockConfig+0x264>)
 8008e20:	689b      	ldr	r3, [r3, #8]
 8008e22:	4a32      	ldr	r2, [pc, #200]	@ (8008eec <HAL_RCC_ClockConfig+0x264>)
 8008e24:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008e28:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008e2a:	4b2f      	ldr	r3, [pc, #188]	@ (8008ee8 <HAL_RCC_ClockConfig+0x260>)
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f003 030f 	and.w	r3, r3, #15
 8008e32:	683a      	ldr	r2, [r7, #0]
 8008e34:	429a      	cmp	r2, r3
 8008e36:	d21d      	bcs.n	8008e74 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008e38:	4b2b      	ldr	r3, [pc, #172]	@ (8008ee8 <HAL_RCC_ClockConfig+0x260>)
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f023 020f 	bic.w	r2, r3, #15
 8008e40:	4929      	ldr	r1, [pc, #164]	@ (8008ee8 <HAL_RCC_ClockConfig+0x260>)
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	4313      	orrs	r3, r2
 8008e46:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008e48:	f7fd f8c8 	bl	8005fdc <HAL_GetTick>
 8008e4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008e4e:	e00a      	b.n	8008e66 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008e50:	f7fd f8c4 	bl	8005fdc <HAL_GetTick>
 8008e54:	4602      	mov	r2, r0
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	1ad3      	subs	r3, r2, r3
 8008e5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008e5e:	4293      	cmp	r3, r2
 8008e60:	d901      	bls.n	8008e66 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8008e62:	2303      	movs	r3, #3
 8008e64:	e03b      	b.n	8008ede <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008e66:	4b20      	ldr	r3, [pc, #128]	@ (8008ee8 <HAL_RCC_ClockConfig+0x260>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f003 030f 	and.w	r3, r3, #15
 8008e6e:	683a      	ldr	r2, [r7, #0]
 8008e70:	429a      	cmp	r2, r3
 8008e72:	d1ed      	bne.n	8008e50 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	f003 0304 	and.w	r3, r3, #4
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d008      	beq.n	8008e92 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008e80:	4b1a      	ldr	r3, [pc, #104]	@ (8008eec <HAL_RCC_ClockConfig+0x264>)
 8008e82:	689b      	ldr	r3, [r3, #8]
 8008e84:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	68db      	ldr	r3, [r3, #12]
 8008e8c:	4917      	ldr	r1, [pc, #92]	@ (8008eec <HAL_RCC_ClockConfig+0x264>)
 8008e8e:	4313      	orrs	r3, r2
 8008e90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	f003 0308 	and.w	r3, r3, #8
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d009      	beq.n	8008eb2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008e9e:	4b13      	ldr	r3, [pc, #76]	@ (8008eec <HAL_RCC_ClockConfig+0x264>)
 8008ea0:	689b      	ldr	r3, [r3, #8]
 8008ea2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	691b      	ldr	r3, [r3, #16]
 8008eaa:	00db      	lsls	r3, r3, #3
 8008eac:	490f      	ldr	r1, [pc, #60]	@ (8008eec <HAL_RCC_ClockConfig+0x264>)
 8008eae:	4313      	orrs	r3, r2
 8008eb0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008eb2:	f000 f825 	bl	8008f00 <HAL_RCC_GetSysClockFreq>
 8008eb6:	4602      	mov	r2, r0
 8008eb8:	4b0c      	ldr	r3, [pc, #48]	@ (8008eec <HAL_RCC_ClockConfig+0x264>)
 8008eba:	689b      	ldr	r3, [r3, #8]
 8008ebc:	091b      	lsrs	r3, r3, #4
 8008ebe:	f003 030f 	and.w	r3, r3, #15
 8008ec2:	490c      	ldr	r1, [pc, #48]	@ (8008ef4 <HAL_RCC_ClockConfig+0x26c>)
 8008ec4:	5ccb      	ldrb	r3, [r1, r3]
 8008ec6:	f003 031f 	and.w	r3, r3, #31
 8008eca:	fa22 f303 	lsr.w	r3, r2, r3
 8008ece:	4a0a      	ldr	r2, [pc, #40]	@ (8008ef8 <HAL_RCC_ClockConfig+0x270>)
 8008ed0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8008ed2:	4b0a      	ldr	r3, [pc, #40]	@ (8008efc <HAL_RCC_ClockConfig+0x274>)
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	f7fd f834 	bl	8005f44 <HAL_InitTick>
 8008edc:	4603      	mov	r3, r0
}
 8008ede:	4618      	mov	r0, r3
 8008ee0:	3718      	adds	r7, #24
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	bd80      	pop	{r7, pc}
 8008ee6:	bf00      	nop
 8008ee8:	40022000 	.word	0x40022000
 8008eec:	40021000 	.word	0x40021000
 8008ef0:	04c4b400 	.word	0x04c4b400
 8008ef4:	0800e324 	.word	0x0800e324
 8008ef8:	20000178 	.word	0x20000178
 8008efc:	2000017c 	.word	0x2000017c

08008f00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008f00:	b480      	push	{r7}
 8008f02:	b087      	sub	sp, #28
 8008f04:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8008f06:	4b2c      	ldr	r3, [pc, #176]	@ (8008fb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008f08:	689b      	ldr	r3, [r3, #8]
 8008f0a:	f003 030c 	and.w	r3, r3, #12
 8008f0e:	2b04      	cmp	r3, #4
 8008f10:	d102      	bne.n	8008f18 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008f12:	4b2a      	ldr	r3, [pc, #168]	@ (8008fbc <HAL_RCC_GetSysClockFreq+0xbc>)
 8008f14:	613b      	str	r3, [r7, #16]
 8008f16:	e047      	b.n	8008fa8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8008f18:	4b27      	ldr	r3, [pc, #156]	@ (8008fb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008f1a:	689b      	ldr	r3, [r3, #8]
 8008f1c:	f003 030c 	and.w	r3, r3, #12
 8008f20:	2b08      	cmp	r3, #8
 8008f22:	d102      	bne.n	8008f2a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008f24:	4b26      	ldr	r3, [pc, #152]	@ (8008fc0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8008f26:	613b      	str	r3, [r7, #16]
 8008f28:	e03e      	b.n	8008fa8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8008f2a:	4b23      	ldr	r3, [pc, #140]	@ (8008fb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008f2c:	689b      	ldr	r3, [r3, #8]
 8008f2e:	f003 030c 	and.w	r3, r3, #12
 8008f32:	2b0c      	cmp	r3, #12
 8008f34:	d136      	bne.n	8008fa4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008f36:	4b20      	ldr	r3, [pc, #128]	@ (8008fb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008f38:	68db      	ldr	r3, [r3, #12]
 8008f3a:	f003 0303 	and.w	r3, r3, #3
 8008f3e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008f40:	4b1d      	ldr	r3, [pc, #116]	@ (8008fb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008f42:	68db      	ldr	r3, [r3, #12]
 8008f44:	091b      	lsrs	r3, r3, #4
 8008f46:	f003 030f 	and.w	r3, r3, #15
 8008f4a:	3301      	adds	r3, #1
 8008f4c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	2b03      	cmp	r3, #3
 8008f52:	d10c      	bne.n	8008f6e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008f54:	4a1a      	ldr	r2, [pc, #104]	@ (8008fc0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8008f56:	68bb      	ldr	r3, [r7, #8]
 8008f58:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f5c:	4a16      	ldr	r2, [pc, #88]	@ (8008fb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008f5e:	68d2      	ldr	r2, [r2, #12]
 8008f60:	0a12      	lsrs	r2, r2, #8
 8008f62:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008f66:	fb02 f303 	mul.w	r3, r2, r3
 8008f6a:	617b      	str	r3, [r7, #20]
      break;
 8008f6c:	e00c      	b.n	8008f88 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008f6e:	4a13      	ldr	r2, [pc, #76]	@ (8008fbc <HAL_RCC_GetSysClockFreq+0xbc>)
 8008f70:	68bb      	ldr	r3, [r7, #8]
 8008f72:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f76:	4a10      	ldr	r2, [pc, #64]	@ (8008fb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008f78:	68d2      	ldr	r2, [r2, #12]
 8008f7a:	0a12      	lsrs	r2, r2, #8
 8008f7c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008f80:	fb02 f303 	mul.w	r3, r2, r3
 8008f84:	617b      	str	r3, [r7, #20]
      break;
 8008f86:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008f88:	4b0b      	ldr	r3, [pc, #44]	@ (8008fb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008f8a:	68db      	ldr	r3, [r3, #12]
 8008f8c:	0e5b      	lsrs	r3, r3, #25
 8008f8e:	f003 0303 	and.w	r3, r3, #3
 8008f92:	3301      	adds	r3, #1
 8008f94:	005b      	lsls	r3, r3, #1
 8008f96:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8008f98:	697a      	ldr	r2, [r7, #20]
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fa0:	613b      	str	r3, [r7, #16]
 8008fa2:	e001      	b.n	8008fa8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8008fa8:	693b      	ldr	r3, [r7, #16]
}
 8008faa:	4618      	mov	r0, r3
 8008fac:	371c      	adds	r7, #28
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb4:	4770      	bx	lr
 8008fb6:	bf00      	nop
 8008fb8:	40021000 	.word	0x40021000
 8008fbc:	00f42400 	.word	0x00f42400
 8008fc0:	016e3600 	.word	0x016e3600

08008fc4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008fc4:	b480      	push	{r7}
 8008fc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008fc8:	4b03      	ldr	r3, [pc, #12]	@ (8008fd8 <HAL_RCC_GetHCLKFreq+0x14>)
 8008fca:	681b      	ldr	r3, [r3, #0]
}
 8008fcc:	4618      	mov	r0, r3
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd4:	4770      	bx	lr
 8008fd6:	bf00      	nop
 8008fd8:	20000178 	.word	0x20000178

08008fdc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008fe0:	f7ff fff0 	bl	8008fc4 <HAL_RCC_GetHCLKFreq>
 8008fe4:	4602      	mov	r2, r0
 8008fe6:	4b06      	ldr	r3, [pc, #24]	@ (8009000 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008fe8:	689b      	ldr	r3, [r3, #8]
 8008fea:	0a1b      	lsrs	r3, r3, #8
 8008fec:	f003 0307 	and.w	r3, r3, #7
 8008ff0:	4904      	ldr	r1, [pc, #16]	@ (8009004 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008ff2:	5ccb      	ldrb	r3, [r1, r3]
 8008ff4:	f003 031f 	and.w	r3, r3, #31
 8008ff8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	bd80      	pop	{r7, pc}
 8009000:	40021000 	.word	0x40021000
 8009004:	0800e334 	.word	0x0800e334

08009008 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800900c:	f7ff ffda 	bl	8008fc4 <HAL_RCC_GetHCLKFreq>
 8009010:	4602      	mov	r2, r0
 8009012:	4b06      	ldr	r3, [pc, #24]	@ (800902c <HAL_RCC_GetPCLK2Freq+0x24>)
 8009014:	689b      	ldr	r3, [r3, #8]
 8009016:	0adb      	lsrs	r3, r3, #11
 8009018:	f003 0307 	and.w	r3, r3, #7
 800901c:	4904      	ldr	r1, [pc, #16]	@ (8009030 <HAL_RCC_GetPCLK2Freq+0x28>)
 800901e:	5ccb      	ldrb	r3, [r1, r3]
 8009020:	f003 031f 	and.w	r3, r3, #31
 8009024:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009028:	4618      	mov	r0, r3
 800902a:	bd80      	pop	{r7, pc}
 800902c:	40021000 	.word	0x40021000
 8009030:	0800e334 	.word	0x0800e334

08009034 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8009034:	b480      	push	{r7}
 8009036:	b087      	sub	sp, #28
 8009038:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800903a:	4b1e      	ldr	r3, [pc, #120]	@ (80090b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800903c:	68db      	ldr	r3, [r3, #12]
 800903e:	f003 0303 	and.w	r3, r3, #3
 8009042:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009044:	4b1b      	ldr	r3, [pc, #108]	@ (80090b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009046:	68db      	ldr	r3, [r3, #12]
 8009048:	091b      	lsrs	r3, r3, #4
 800904a:	f003 030f 	and.w	r3, r3, #15
 800904e:	3301      	adds	r3, #1
 8009050:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8009052:	693b      	ldr	r3, [r7, #16]
 8009054:	2b03      	cmp	r3, #3
 8009056:	d10c      	bne.n	8009072 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009058:	4a17      	ldr	r2, [pc, #92]	@ (80090b8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009060:	4a14      	ldr	r2, [pc, #80]	@ (80090b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009062:	68d2      	ldr	r2, [r2, #12]
 8009064:	0a12      	lsrs	r2, r2, #8
 8009066:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800906a:	fb02 f303 	mul.w	r3, r2, r3
 800906e:	617b      	str	r3, [r7, #20]
    break;
 8009070:	e00c      	b.n	800908c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009072:	4a12      	ldr	r2, [pc, #72]	@ (80090bc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	fbb2 f3f3 	udiv	r3, r2, r3
 800907a:	4a0e      	ldr	r2, [pc, #56]	@ (80090b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800907c:	68d2      	ldr	r2, [r2, #12]
 800907e:	0a12      	lsrs	r2, r2, #8
 8009080:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8009084:	fb02 f303 	mul.w	r3, r2, r3
 8009088:	617b      	str	r3, [r7, #20]
    break;
 800908a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800908c:	4b09      	ldr	r3, [pc, #36]	@ (80090b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800908e:	68db      	ldr	r3, [r3, #12]
 8009090:	0e5b      	lsrs	r3, r3, #25
 8009092:	f003 0303 	and.w	r3, r3, #3
 8009096:	3301      	adds	r3, #1
 8009098:	005b      	lsls	r3, r3, #1
 800909a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800909c:	697a      	ldr	r2, [r7, #20]
 800909e:	68bb      	ldr	r3, [r7, #8]
 80090a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80090a4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80090a6:	687b      	ldr	r3, [r7, #4]
}
 80090a8:	4618      	mov	r0, r3
 80090aa:	371c      	adds	r7, #28
 80090ac:	46bd      	mov	sp, r7
 80090ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b2:	4770      	bx	lr
 80090b4:	40021000 	.word	0x40021000
 80090b8:	016e3600 	.word	0x016e3600
 80090bc:	00f42400 	.word	0x00f42400

080090c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b086      	sub	sp, #24
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80090c8:	2300      	movs	r3, #0
 80090ca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80090cc:	2300      	movs	r3, #0
 80090ce:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80090d8:	2b00      	cmp	r3, #0
 80090da:	f000 8098 	beq.w	800920e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80090de:	2300      	movs	r3, #0
 80090e0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80090e2:	4b43      	ldr	r3, [pc, #268]	@ (80091f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80090e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80090e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d10d      	bne.n	800910a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80090ee:	4b40      	ldr	r3, [pc, #256]	@ (80091f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80090f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80090f2:	4a3f      	ldr	r2, [pc, #252]	@ (80091f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80090f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80090f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80090fa:	4b3d      	ldr	r3, [pc, #244]	@ (80091f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80090fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80090fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009102:	60bb      	str	r3, [r7, #8]
 8009104:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009106:	2301      	movs	r3, #1
 8009108:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800910a:	4b3a      	ldr	r3, [pc, #232]	@ (80091f4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	4a39      	ldr	r2, [pc, #228]	@ (80091f4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009110:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009114:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009116:	f7fc ff61 	bl	8005fdc <HAL_GetTick>
 800911a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800911c:	e009      	b.n	8009132 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800911e:	f7fc ff5d 	bl	8005fdc <HAL_GetTick>
 8009122:	4602      	mov	r2, r0
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	1ad3      	subs	r3, r2, r3
 8009128:	2b02      	cmp	r3, #2
 800912a:	d902      	bls.n	8009132 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800912c:	2303      	movs	r3, #3
 800912e:	74fb      	strb	r3, [r7, #19]
        break;
 8009130:	e005      	b.n	800913e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009132:	4b30      	ldr	r3, [pc, #192]	@ (80091f4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800913a:	2b00      	cmp	r3, #0
 800913c:	d0ef      	beq.n	800911e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800913e:	7cfb      	ldrb	r3, [r7, #19]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d159      	bne.n	80091f8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009144:	4b2a      	ldr	r3, [pc, #168]	@ (80091f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009146:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800914a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800914e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009150:	697b      	ldr	r3, [r7, #20]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d01e      	beq.n	8009194 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800915a:	697a      	ldr	r2, [r7, #20]
 800915c:	429a      	cmp	r2, r3
 800915e:	d019      	beq.n	8009194 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009160:	4b23      	ldr	r3, [pc, #140]	@ (80091f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009162:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009166:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800916a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800916c:	4b20      	ldr	r3, [pc, #128]	@ (80091f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800916e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009172:	4a1f      	ldr	r2, [pc, #124]	@ (80091f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009174:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009178:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800917c:	4b1c      	ldr	r3, [pc, #112]	@ (80091f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800917e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009182:	4a1b      	ldr	r2, [pc, #108]	@ (80091f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009184:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009188:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800918c:	4a18      	ldr	r2, [pc, #96]	@ (80091f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800918e:	697b      	ldr	r3, [r7, #20]
 8009190:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009194:	697b      	ldr	r3, [r7, #20]
 8009196:	f003 0301 	and.w	r3, r3, #1
 800919a:	2b00      	cmp	r3, #0
 800919c:	d016      	beq.n	80091cc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800919e:	f7fc ff1d 	bl	8005fdc <HAL_GetTick>
 80091a2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80091a4:	e00b      	b.n	80091be <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80091a6:	f7fc ff19 	bl	8005fdc <HAL_GetTick>
 80091aa:	4602      	mov	r2, r0
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	1ad3      	subs	r3, r2, r3
 80091b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80091b4:	4293      	cmp	r3, r2
 80091b6:	d902      	bls.n	80091be <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80091b8:	2303      	movs	r3, #3
 80091ba:	74fb      	strb	r3, [r7, #19]
            break;
 80091bc:	e006      	b.n	80091cc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80091be:	4b0c      	ldr	r3, [pc, #48]	@ (80091f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80091c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80091c4:	f003 0302 	and.w	r3, r3, #2
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d0ec      	beq.n	80091a6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80091cc:	7cfb      	ldrb	r3, [r7, #19]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d10b      	bne.n	80091ea <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80091d2:	4b07      	ldr	r3, [pc, #28]	@ (80091f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80091d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80091d8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80091e0:	4903      	ldr	r1, [pc, #12]	@ (80091f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80091e2:	4313      	orrs	r3, r2
 80091e4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80091e8:	e008      	b.n	80091fc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80091ea:	7cfb      	ldrb	r3, [r7, #19]
 80091ec:	74bb      	strb	r3, [r7, #18]
 80091ee:	e005      	b.n	80091fc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80091f0:	40021000 	.word	0x40021000
 80091f4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091f8:	7cfb      	ldrb	r3, [r7, #19]
 80091fa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80091fc:	7c7b      	ldrb	r3, [r7, #17]
 80091fe:	2b01      	cmp	r3, #1
 8009200:	d105      	bne.n	800920e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009202:	4ba7      	ldr	r3, [pc, #668]	@ (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009204:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009206:	4aa6      	ldr	r2, [pc, #664]	@ (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009208:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800920c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	f003 0301 	and.w	r3, r3, #1
 8009216:	2b00      	cmp	r3, #0
 8009218:	d00a      	beq.n	8009230 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800921a:	4ba1      	ldr	r3, [pc, #644]	@ (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800921c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009220:	f023 0203 	bic.w	r2, r3, #3
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	685b      	ldr	r3, [r3, #4]
 8009228:	499d      	ldr	r1, [pc, #628]	@ (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800922a:	4313      	orrs	r3, r2
 800922c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	f003 0302 	and.w	r3, r3, #2
 8009238:	2b00      	cmp	r3, #0
 800923a:	d00a      	beq.n	8009252 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800923c:	4b98      	ldr	r3, [pc, #608]	@ (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800923e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009242:	f023 020c 	bic.w	r2, r3, #12
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	689b      	ldr	r3, [r3, #8]
 800924a:	4995      	ldr	r1, [pc, #596]	@ (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800924c:	4313      	orrs	r3, r2
 800924e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	f003 0304 	and.w	r3, r3, #4
 800925a:	2b00      	cmp	r3, #0
 800925c:	d00a      	beq.n	8009274 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800925e:	4b90      	ldr	r3, [pc, #576]	@ (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009260:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009264:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	68db      	ldr	r3, [r3, #12]
 800926c:	498c      	ldr	r1, [pc, #560]	@ (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800926e:	4313      	orrs	r3, r2
 8009270:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	f003 0308 	and.w	r3, r3, #8
 800927c:	2b00      	cmp	r3, #0
 800927e:	d00a      	beq.n	8009296 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009280:	4b87      	ldr	r3, [pc, #540]	@ (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009282:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009286:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	691b      	ldr	r3, [r3, #16]
 800928e:	4984      	ldr	r1, [pc, #528]	@ (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009290:	4313      	orrs	r3, r2
 8009292:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	f003 0310 	and.w	r3, r3, #16
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d00a      	beq.n	80092b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80092a2:	4b7f      	ldr	r3, [pc, #508]	@ (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80092a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80092a8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	695b      	ldr	r3, [r3, #20]
 80092b0:	497b      	ldr	r1, [pc, #492]	@ (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80092b2:	4313      	orrs	r3, r2
 80092b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	f003 0320 	and.w	r3, r3, #32
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d00a      	beq.n	80092da <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80092c4:	4b76      	ldr	r3, [pc, #472]	@ (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80092c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80092ca:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	699b      	ldr	r3, [r3, #24]
 80092d2:	4973      	ldr	r1, [pc, #460]	@ (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80092d4:	4313      	orrs	r3, r2
 80092d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d00a      	beq.n	80092fc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80092e6:	4b6e      	ldr	r3, [pc, #440]	@ (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80092e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80092ec:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	69db      	ldr	r3, [r3, #28]
 80092f4:	496a      	ldr	r1, [pc, #424]	@ (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80092f6:	4313      	orrs	r3, r2
 80092f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009304:	2b00      	cmp	r3, #0
 8009306:	d00a      	beq.n	800931e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009308:	4b65      	ldr	r3, [pc, #404]	@ (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800930a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800930e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6a1b      	ldr	r3, [r3, #32]
 8009316:	4962      	ldr	r1, [pc, #392]	@ (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009318:	4313      	orrs	r3, r2
 800931a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009326:	2b00      	cmp	r3, #0
 8009328:	d00a      	beq.n	8009340 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800932a:	4b5d      	ldr	r3, [pc, #372]	@ (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800932c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009330:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009338:	4959      	ldr	r1, [pc, #356]	@ (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800933a:	4313      	orrs	r3, r2
 800933c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009348:	2b00      	cmp	r3, #0
 800934a:	d00a      	beq.n	8009362 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800934c:	4b54      	ldr	r3, [pc, #336]	@ (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800934e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009352:	f023 0203 	bic.w	r2, r3, #3
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800935a:	4951      	ldr	r1, [pc, #324]	@ (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800935c:	4313      	orrs	r3, r2
 800935e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800936a:	2b00      	cmp	r3, #0
 800936c:	d00a      	beq.n	8009384 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800936e:	4b4c      	ldr	r3, [pc, #304]	@ (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009370:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009374:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800937c:	4948      	ldr	r1, [pc, #288]	@ (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800937e:	4313      	orrs	r3, r2
 8009380:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800938c:	2b00      	cmp	r3, #0
 800938e:	d015      	beq.n	80093bc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009390:	4b43      	ldr	r3, [pc, #268]	@ (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009392:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009396:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800939e:	4940      	ldr	r1, [pc, #256]	@ (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80093a0:	4313      	orrs	r3, r2
 80093a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80093ae:	d105      	bne.n	80093bc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80093b0:	4b3b      	ldr	r3, [pc, #236]	@ (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80093b2:	68db      	ldr	r3, [r3, #12]
 80093b4:	4a3a      	ldr	r2, [pc, #232]	@ (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80093b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80093ba:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d015      	beq.n	80093f4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80093c8:	4b35      	ldr	r3, [pc, #212]	@ (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80093ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80093ce:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80093d6:	4932      	ldr	r1, [pc, #200]	@ (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80093d8:	4313      	orrs	r3, r2
 80093da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80093e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80093e6:	d105      	bne.n	80093f4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80093e8:	4b2d      	ldr	r3, [pc, #180]	@ (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80093ea:	68db      	ldr	r3, [r3, #12]
 80093ec:	4a2c      	ldr	r2, [pc, #176]	@ (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80093ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80093f2:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d015      	beq.n	800942c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009400:	4b27      	ldr	r3, [pc, #156]	@ (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009402:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009406:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800940e:	4924      	ldr	r1, [pc, #144]	@ (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009410:	4313      	orrs	r3, r2
 8009412:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800941a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800941e:	d105      	bne.n	800942c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009420:	4b1f      	ldr	r3, [pc, #124]	@ (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009422:	68db      	ldr	r3, [r3, #12]
 8009424:	4a1e      	ldr	r2, [pc, #120]	@ (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009426:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800942a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009434:	2b00      	cmp	r3, #0
 8009436:	d015      	beq.n	8009464 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009438:	4b19      	ldr	r3, [pc, #100]	@ (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800943a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800943e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009446:	4916      	ldr	r1, [pc, #88]	@ (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009448:	4313      	orrs	r3, r2
 800944a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009452:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009456:	d105      	bne.n	8009464 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009458:	4b11      	ldr	r3, [pc, #68]	@ (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800945a:	68db      	ldr	r3, [r3, #12]
 800945c:	4a10      	ldr	r2, [pc, #64]	@ (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800945e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009462:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800946c:	2b00      	cmp	r3, #0
 800946e:	d019      	beq.n	80094a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009470:	4b0b      	ldr	r3, [pc, #44]	@ (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009472:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009476:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800947e:	4908      	ldr	r1, [pc, #32]	@ (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009480:	4313      	orrs	r3, r2
 8009482:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800948a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800948e:	d109      	bne.n	80094a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009490:	4b03      	ldr	r3, [pc, #12]	@ (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009492:	68db      	ldr	r3, [r3, #12]
 8009494:	4a02      	ldr	r2, [pc, #8]	@ (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009496:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800949a:	60d3      	str	r3, [r2, #12]
 800949c:	e002      	b.n	80094a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800949e:	bf00      	nop
 80094a0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d015      	beq.n	80094dc <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80094b0:	4b29      	ldr	r3, [pc, #164]	@ (8009558 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80094b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80094b6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80094be:	4926      	ldr	r1, [pc, #152]	@ (8009558 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80094c0:	4313      	orrs	r3, r2
 80094c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80094ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80094ce:	d105      	bne.n	80094dc <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80094d0:	4b21      	ldr	r3, [pc, #132]	@ (8009558 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80094d2:	68db      	ldr	r3, [r3, #12]
 80094d4:	4a20      	ldr	r2, [pc, #128]	@ (8009558 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80094d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80094da:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d015      	beq.n	8009514 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80094e8:	4b1b      	ldr	r3, [pc, #108]	@ (8009558 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80094ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80094ee:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80094f6:	4918      	ldr	r1, [pc, #96]	@ (8009558 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80094f8:	4313      	orrs	r3, r2
 80094fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009502:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009506:	d105      	bne.n	8009514 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009508:	4b13      	ldr	r3, [pc, #76]	@ (8009558 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800950a:	68db      	ldr	r3, [r3, #12]
 800950c:	4a12      	ldr	r2, [pc, #72]	@ (8009558 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800950e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009512:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800951c:	2b00      	cmp	r3, #0
 800951e:	d015      	beq.n	800954c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009520:	4b0d      	ldr	r3, [pc, #52]	@ (8009558 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009522:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009526:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800952e:	490a      	ldr	r1, [pc, #40]	@ (8009558 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009530:	4313      	orrs	r3, r2
 8009532:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800953a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800953e:	d105      	bne.n	800954c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009540:	4b05      	ldr	r3, [pc, #20]	@ (8009558 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009542:	68db      	ldr	r3, [r3, #12]
 8009544:	4a04      	ldr	r2, [pc, #16]	@ (8009558 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009546:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800954a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800954c:	7cbb      	ldrb	r3, [r7, #18]
}
 800954e:	4618      	mov	r0, r3
 8009550:	3718      	adds	r7, #24
 8009552:	46bd      	mov	sp, r7
 8009554:	bd80      	pop	{r7, pc}
 8009556:	bf00      	nop
 8009558:	40021000 	.word	0x40021000

0800955c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b082      	sub	sp, #8
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d101      	bne.n	800956e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800956a:	2301      	movs	r3, #1
 800956c:	e054      	b.n	8009618 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009574:	b2db      	uxtb	r3, r3
 8009576:	2b00      	cmp	r3, #0
 8009578:	d111      	bne.n	800959e <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	2200      	movs	r2, #0
 800957e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8009582:	6878      	ldr	r0, [r7, #4]
 8009584:	f001 fee2 	bl	800b34c <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800958c:	2b00      	cmp	r3, #0
 800958e:	d102      	bne.n	8009596 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	4a23      	ldr	r2, [pc, #140]	@ (8009620 <HAL_TIM_Base_Init+0xc4>)
 8009594:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800959a:	6878      	ldr	r0, [r7, #4]
 800959c:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	2202      	movs	r2, #2
 80095a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681a      	ldr	r2, [r3, #0]
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	3304      	adds	r3, #4
 80095ae:	4619      	mov	r1, r3
 80095b0:	4610      	mov	r0, r2
 80095b2:	f001 fa2b 	bl	800aa0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	2201      	movs	r2, #1
 80095ba:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2201      	movs	r2, #1
 80095c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2201      	movs	r2, #1
 80095ca:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	2201      	movs	r2, #1
 80095d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	2201      	movs	r2, #1
 80095da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	2201      	movs	r2, #1
 80095e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	2201      	movs	r2, #1
 80095ea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	2201      	movs	r2, #1
 80095f2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	2201      	movs	r2, #1
 80095fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2201      	movs	r2, #1
 8009602:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	2201      	movs	r2, #1
 800960a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	2201      	movs	r2, #1
 8009612:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009616:	2300      	movs	r3, #0
}
 8009618:	4618      	mov	r0, r3
 800961a:	3708      	adds	r7, #8
 800961c:	46bd      	mov	sp, r7
 800961e:	bd80      	pop	{r7, pc}
 8009620:	08005841 	.word	0x08005841

08009624 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009624:	b480      	push	{r7}
 8009626:	b085      	sub	sp, #20
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009632:	b2db      	uxtb	r3, r3
 8009634:	2b01      	cmp	r3, #1
 8009636:	d001      	beq.n	800963c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009638:	2301      	movs	r3, #1
 800963a:	e04c      	b.n	80096d6 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2202      	movs	r2, #2
 8009640:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	4a26      	ldr	r2, [pc, #152]	@ (80096e4 <HAL_TIM_Base_Start+0xc0>)
 800964a:	4293      	cmp	r3, r2
 800964c:	d022      	beq.n	8009694 <HAL_TIM_Base_Start+0x70>
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009656:	d01d      	beq.n	8009694 <HAL_TIM_Base_Start+0x70>
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	4a22      	ldr	r2, [pc, #136]	@ (80096e8 <HAL_TIM_Base_Start+0xc4>)
 800965e:	4293      	cmp	r3, r2
 8009660:	d018      	beq.n	8009694 <HAL_TIM_Base_Start+0x70>
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	4a21      	ldr	r2, [pc, #132]	@ (80096ec <HAL_TIM_Base_Start+0xc8>)
 8009668:	4293      	cmp	r3, r2
 800966a:	d013      	beq.n	8009694 <HAL_TIM_Base_Start+0x70>
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	4a1f      	ldr	r2, [pc, #124]	@ (80096f0 <HAL_TIM_Base_Start+0xcc>)
 8009672:	4293      	cmp	r3, r2
 8009674:	d00e      	beq.n	8009694 <HAL_TIM_Base_Start+0x70>
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	4a1e      	ldr	r2, [pc, #120]	@ (80096f4 <HAL_TIM_Base_Start+0xd0>)
 800967c:	4293      	cmp	r3, r2
 800967e:	d009      	beq.n	8009694 <HAL_TIM_Base_Start+0x70>
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	4a1c      	ldr	r2, [pc, #112]	@ (80096f8 <HAL_TIM_Base_Start+0xd4>)
 8009686:	4293      	cmp	r3, r2
 8009688:	d004      	beq.n	8009694 <HAL_TIM_Base_Start+0x70>
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	4a1b      	ldr	r2, [pc, #108]	@ (80096fc <HAL_TIM_Base_Start+0xd8>)
 8009690:	4293      	cmp	r3, r2
 8009692:	d115      	bne.n	80096c0 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	689a      	ldr	r2, [r3, #8]
 800969a:	4b19      	ldr	r3, [pc, #100]	@ (8009700 <HAL_TIM_Base_Start+0xdc>)
 800969c:	4013      	ands	r3, r2
 800969e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	2b06      	cmp	r3, #6
 80096a4:	d015      	beq.n	80096d2 <HAL_TIM_Base_Start+0xae>
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80096ac:	d011      	beq.n	80096d2 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	681a      	ldr	r2, [r3, #0]
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	f042 0201 	orr.w	r2, r2, #1
 80096bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80096be:	e008      	b.n	80096d2 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	681a      	ldr	r2, [r3, #0]
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	f042 0201 	orr.w	r2, r2, #1
 80096ce:	601a      	str	r2, [r3, #0]
 80096d0:	e000      	b.n	80096d4 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80096d2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80096d4:	2300      	movs	r3, #0
}
 80096d6:	4618      	mov	r0, r3
 80096d8:	3714      	adds	r7, #20
 80096da:	46bd      	mov	sp, r7
 80096dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e0:	4770      	bx	lr
 80096e2:	bf00      	nop
 80096e4:	40012c00 	.word	0x40012c00
 80096e8:	40000400 	.word	0x40000400
 80096ec:	40000800 	.word	0x40000800
 80096f0:	40000c00 	.word	0x40000c00
 80096f4:	40013400 	.word	0x40013400
 80096f8:	40014000 	.word	0x40014000
 80096fc:	40015000 	.word	0x40015000
 8009700:	00010007 	.word	0x00010007

08009704 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009704:	b480      	push	{r7}
 8009706:	b085      	sub	sp, #20
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009712:	b2db      	uxtb	r3, r3
 8009714:	2b01      	cmp	r3, #1
 8009716:	d001      	beq.n	800971c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009718:	2301      	movs	r3, #1
 800971a:	e054      	b.n	80097c6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2202      	movs	r2, #2
 8009720:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	68da      	ldr	r2, [r3, #12]
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	f042 0201 	orr.w	r2, r2, #1
 8009732:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	4a26      	ldr	r2, [pc, #152]	@ (80097d4 <HAL_TIM_Base_Start_IT+0xd0>)
 800973a:	4293      	cmp	r3, r2
 800973c:	d022      	beq.n	8009784 <HAL_TIM_Base_Start_IT+0x80>
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009746:	d01d      	beq.n	8009784 <HAL_TIM_Base_Start_IT+0x80>
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	4a22      	ldr	r2, [pc, #136]	@ (80097d8 <HAL_TIM_Base_Start_IT+0xd4>)
 800974e:	4293      	cmp	r3, r2
 8009750:	d018      	beq.n	8009784 <HAL_TIM_Base_Start_IT+0x80>
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	4a21      	ldr	r2, [pc, #132]	@ (80097dc <HAL_TIM_Base_Start_IT+0xd8>)
 8009758:	4293      	cmp	r3, r2
 800975a:	d013      	beq.n	8009784 <HAL_TIM_Base_Start_IT+0x80>
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	4a1f      	ldr	r2, [pc, #124]	@ (80097e0 <HAL_TIM_Base_Start_IT+0xdc>)
 8009762:	4293      	cmp	r3, r2
 8009764:	d00e      	beq.n	8009784 <HAL_TIM_Base_Start_IT+0x80>
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	4a1e      	ldr	r2, [pc, #120]	@ (80097e4 <HAL_TIM_Base_Start_IT+0xe0>)
 800976c:	4293      	cmp	r3, r2
 800976e:	d009      	beq.n	8009784 <HAL_TIM_Base_Start_IT+0x80>
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	4a1c      	ldr	r2, [pc, #112]	@ (80097e8 <HAL_TIM_Base_Start_IT+0xe4>)
 8009776:	4293      	cmp	r3, r2
 8009778:	d004      	beq.n	8009784 <HAL_TIM_Base_Start_IT+0x80>
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	4a1b      	ldr	r2, [pc, #108]	@ (80097ec <HAL_TIM_Base_Start_IT+0xe8>)
 8009780:	4293      	cmp	r3, r2
 8009782:	d115      	bne.n	80097b0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	689a      	ldr	r2, [r3, #8]
 800978a:	4b19      	ldr	r3, [pc, #100]	@ (80097f0 <HAL_TIM_Base_Start_IT+0xec>)
 800978c:	4013      	ands	r3, r2
 800978e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	2b06      	cmp	r3, #6
 8009794:	d015      	beq.n	80097c2 <HAL_TIM_Base_Start_IT+0xbe>
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800979c:	d011      	beq.n	80097c2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	681a      	ldr	r2, [r3, #0]
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	f042 0201 	orr.w	r2, r2, #1
 80097ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80097ae:	e008      	b.n	80097c2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	681a      	ldr	r2, [r3, #0]
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	f042 0201 	orr.w	r2, r2, #1
 80097be:	601a      	str	r2, [r3, #0]
 80097c0:	e000      	b.n	80097c4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80097c2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80097c4:	2300      	movs	r3, #0
}
 80097c6:	4618      	mov	r0, r3
 80097c8:	3714      	adds	r7, #20
 80097ca:	46bd      	mov	sp, r7
 80097cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d0:	4770      	bx	lr
 80097d2:	bf00      	nop
 80097d4:	40012c00 	.word	0x40012c00
 80097d8:	40000400 	.word	0x40000400
 80097dc:	40000800 	.word	0x40000800
 80097e0:	40000c00 	.word	0x40000c00
 80097e4:	40013400 	.word	0x40013400
 80097e8:	40014000 	.word	0x40014000
 80097ec:	40015000 	.word	0x40015000
 80097f0:	00010007 	.word	0x00010007

080097f4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b082      	sub	sp, #8
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d101      	bne.n	8009806 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009802:	2301      	movs	r3, #1
 8009804:	e054      	b.n	80098b0 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800980c:	b2db      	uxtb	r3, r3
 800980e:	2b00      	cmp	r3, #0
 8009810:	d111      	bne.n	8009836 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	2200      	movs	r2, #0
 8009816:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800981a:	6878      	ldr	r0, [r7, #4]
 800981c:	f001 fd96 	bl	800b34c <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009824:	2b00      	cmp	r3, #0
 8009826:	d102      	bne.n	800982e <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	4a23      	ldr	r2, [pc, #140]	@ (80098b8 <HAL_TIM_PWM_Init+0xc4>)
 800982c:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009832:	6878      	ldr	r0, [r7, #4]
 8009834:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	2202      	movs	r2, #2
 800983a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681a      	ldr	r2, [r3, #0]
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	3304      	adds	r3, #4
 8009846:	4619      	mov	r1, r3
 8009848:	4610      	mov	r0, r2
 800984a:	f001 f8df 	bl	800aa0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	2201      	movs	r2, #1
 8009852:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	2201      	movs	r2, #1
 800985a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	2201      	movs	r2, #1
 8009862:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	2201      	movs	r2, #1
 800986a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	2201      	movs	r2, #1
 8009872:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	2201      	movs	r2, #1
 800987a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	2201      	movs	r2, #1
 8009882:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	2201      	movs	r2, #1
 800988a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	2201      	movs	r2, #1
 8009892:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	2201      	movs	r2, #1
 800989a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	2201      	movs	r2, #1
 80098a2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	2201      	movs	r2, #1
 80098aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80098ae:	2300      	movs	r3, #0
}
 80098b0:	4618      	mov	r0, r3
 80098b2:	3708      	adds	r7, #8
 80098b4:	46bd      	mov	sp, r7
 80098b6:	bd80      	pop	{r7, pc}
 80098b8:	080057f5 	.word	0x080057f5

080098bc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b084      	sub	sp, #16
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
 80098c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d109      	bne.n	80098e0 <HAL_TIM_PWM_Start+0x24>
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80098d2:	b2db      	uxtb	r3, r3
 80098d4:	2b01      	cmp	r3, #1
 80098d6:	bf14      	ite	ne
 80098d8:	2301      	movne	r3, #1
 80098da:	2300      	moveq	r3, #0
 80098dc:	b2db      	uxtb	r3, r3
 80098de:	e03c      	b.n	800995a <HAL_TIM_PWM_Start+0x9e>
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	2b04      	cmp	r3, #4
 80098e4:	d109      	bne.n	80098fa <HAL_TIM_PWM_Start+0x3e>
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80098ec:	b2db      	uxtb	r3, r3
 80098ee:	2b01      	cmp	r3, #1
 80098f0:	bf14      	ite	ne
 80098f2:	2301      	movne	r3, #1
 80098f4:	2300      	moveq	r3, #0
 80098f6:	b2db      	uxtb	r3, r3
 80098f8:	e02f      	b.n	800995a <HAL_TIM_PWM_Start+0x9e>
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	2b08      	cmp	r3, #8
 80098fe:	d109      	bne.n	8009914 <HAL_TIM_PWM_Start+0x58>
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009906:	b2db      	uxtb	r3, r3
 8009908:	2b01      	cmp	r3, #1
 800990a:	bf14      	ite	ne
 800990c:	2301      	movne	r3, #1
 800990e:	2300      	moveq	r3, #0
 8009910:	b2db      	uxtb	r3, r3
 8009912:	e022      	b.n	800995a <HAL_TIM_PWM_Start+0x9e>
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	2b0c      	cmp	r3, #12
 8009918:	d109      	bne.n	800992e <HAL_TIM_PWM_Start+0x72>
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009920:	b2db      	uxtb	r3, r3
 8009922:	2b01      	cmp	r3, #1
 8009924:	bf14      	ite	ne
 8009926:	2301      	movne	r3, #1
 8009928:	2300      	moveq	r3, #0
 800992a:	b2db      	uxtb	r3, r3
 800992c:	e015      	b.n	800995a <HAL_TIM_PWM_Start+0x9e>
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	2b10      	cmp	r3, #16
 8009932:	d109      	bne.n	8009948 <HAL_TIM_PWM_Start+0x8c>
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800993a:	b2db      	uxtb	r3, r3
 800993c:	2b01      	cmp	r3, #1
 800993e:	bf14      	ite	ne
 8009940:	2301      	movne	r3, #1
 8009942:	2300      	moveq	r3, #0
 8009944:	b2db      	uxtb	r3, r3
 8009946:	e008      	b.n	800995a <HAL_TIM_PWM_Start+0x9e>
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800994e:	b2db      	uxtb	r3, r3
 8009950:	2b01      	cmp	r3, #1
 8009952:	bf14      	ite	ne
 8009954:	2301      	movne	r3, #1
 8009956:	2300      	moveq	r3, #0
 8009958:	b2db      	uxtb	r3, r3
 800995a:	2b00      	cmp	r3, #0
 800995c:	d001      	beq.n	8009962 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800995e:	2301      	movs	r3, #1
 8009960:	e0a6      	b.n	8009ab0 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009962:	683b      	ldr	r3, [r7, #0]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d104      	bne.n	8009972 <HAL_TIM_PWM_Start+0xb6>
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2202      	movs	r2, #2
 800996c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009970:	e023      	b.n	80099ba <HAL_TIM_PWM_Start+0xfe>
 8009972:	683b      	ldr	r3, [r7, #0]
 8009974:	2b04      	cmp	r3, #4
 8009976:	d104      	bne.n	8009982 <HAL_TIM_PWM_Start+0xc6>
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2202      	movs	r2, #2
 800997c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009980:	e01b      	b.n	80099ba <HAL_TIM_PWM_Start+0xfe>
 8009982:	683b      	ldr	r3, [r7, #0]
 8009984:	2b08      	cmp	r3, #8
 8009986:	d104      	bne.n	8009992 <HAL_TIM_PWM_Start+0xd6>
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2202      	movs	r2, #2
 800998c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009990:	e013      	b.n	80099ba <HAL_TIM_PWM_Start+0xfe>
 8009992:	683b      	ldr	r3, [r7, #0]
 8009994:	2b0c      	cmp	r3, #12
 8009996:	d104      	bne.n	80099a2 <HAL_TIM_PWM_Start+0xe6>
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2202      	movs	r2, #2
 800999c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80099a0:	e00b      	b.n	80099ba <HAL_TIM_PWM_Start+0xfe>
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	2b10      	cmp	r3, #16
 80099a6:	d104      	bne.n	80099b2 <HAL_TIM_PWM_Start+0xf6>
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	2202      	movs	r2, #2
 80099ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80099b0:	e003      	b.n	80099ba <HAL_TIM_PWM_Start+0xfe>
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	2202      	movs	r2, #2
 80099b6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	2201      	movs	r2, #1
 80099c0:	6839      	ldr	r1, [r7, #0]
 80099c2:	4618      	mov	r0, r3
 80099c4:	f001 fc9c 	bl	800b300 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	4a3a      	ldr	r2, [pc, #232]	@ (8009ab8 <HAL_TIM_PWM_Start+0x1fc>)
 80099ce:	4293      	cmp	r3, r2
 80099d0:	d018      	beq.n	8009a04 <HAL_TIM_PWM_Start+0x148>
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	4a39      	ldr	r2, [pc, #228]	@ (8009abc <HAL_TIM_PWM_Start+0x200>)
 80099d8:	4293      	cmp	r3, r2
 80099da:	d013      	beq.n	8009a04 <HAL_TIM_PWM_Start+0x148>
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	4a37      	ldr	r2, [pc, #220]	@ (8009ac0 <HAL_TIM_PWM_Start+0x204>)
 80099e2:	4293      	cmp	r3, r2
 80099e4:	d00e      	beq.n	8009a04 <HAL_TIM_PWM_Start+0x148>
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	4a36      	ldr	r2, [pc, #216]	@ (8009ac4 <HAL_TIM_PWM_Start+0x208>)
 80099ec:	4293      	cmp	r3, r2
 80099ee:	d009      	beq.n	8009a04 <HAL_TIM_PWM_Start+0x148>
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	4a34      	ldr	r2, [pc, #208]	@ (8009ac8 <HAL_TIM_PWM_Start+0x20c>)
 80099f6:	4293      	cmp	r3, r2
 80099f8:	d004      	beq.n	8009a04 <HAL_TIM_PWM_Start+0x148>
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	4a33      	ldr	r2, [pc, #204]	@ (8009acc <HAL_TIM_PWM_Start+0x210>)
 8009a00:	4293      	cmp	r3, r2
 8009a02:	d101      	bne.n	8009a08 <HAL_TIM_PWM_Start+0x14c>
 8009a04:	2301      	movs	r3, #1
 8009a06:	e000      	b.n	8009a0a <HAL_TIM_PWM_Start+0x14e>
 8009a08:	2300      	movs	r3, #0
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d007      	beq.n	8009a1e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009a1c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	4a25      	ldr	r2, [pc, #148]	@ (8009ab8 <HAL_TIM_PWM_Start+0x1fc>)
 8009a24:	4293      	cmp	r3, r2
 8009a26:	d022      	beq.n	8009a6e <HAL_TIM_PWM_Start+0x1b2>
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a30:	d01d      	beq.n	8009a6e <HAL_TIM_PWM_Start+0x1b2>
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	4a26      	ldr	r2, [pc, #152]	@ (8009ad0 <HAL_TIM_PWM_Start+0x214>)
 8009a38:	4293      	cmp	r3, r2
 8009a3a:	d018      	beq.n	8009a6e <HAL_TIM_PWM_Start+0x1b2>
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	4a24      	ldr	r2, [pc, #144]	@ (8009ad4 <HAL_TIM_PWM_Start+0x218>)
 8009a42:	4293      	cmp	r3, r2
 8009a44:	d013      	beq.n	8009a6e <HAL_TIM_PWM_Start+0x1b2>
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	4a23      	ldr	r2, [pc, #140]	@ (8009ad8 <HAL_TIM_PWM_Start+0x21c>)
 8009a4c:	4293      	cmp	r3, r2
 8009a4e:	d00e      	beq.n	8009a6e <HAL_TIM_PWM_Start+0x1b2>
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	4a19      	ldr	r2, [pc, #100]	@ (8009abc <HAL_TIM_PWM_Start+0x200>)
 8009a56:	4293      	cmp	r3, r2
 8009a58:	d009      	beq.n	8009a6e <HAL_TIM_PWM_Start+0x1b2>
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	4a18      	ldr	r2, [pc, #96]	@ (8009ac0 <HAL_TIM_PWM_Start+0x204>)
 8009a60:	4293      	cmp	r3, r2
 8009a62:	d004      	beq.n	8009a6e <HAL_TIM_PWM_Start+0x1b2>
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	4a18      	ldr	r2, [pc, #96]	@ (8009acc <HAL_TIM_PWM_Start+0x210>)
 8009a6a:	4293      	cmp	r3, r2
 8009a6c:	d115      	bne.n	8009a9a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	689a      	ldr	r2, [r3, #8]
 8009a74:	4b19      	ldr	r3, [pc, #100]	@ (8009adc <HAL_TIM_PWM_Start+0x220>)
 8009a76:	4013      	ands	r3, r2
 8009a78:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	2b06      	cmp	r3, #6
 8009a7e:	d015      	beq.n	8009aac <HAL_TIM_PWM_Start+0x1f0>
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009a86:	d011      	beq.n	8009aac <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	681a      	ldr	r2, [r3, #0]
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	f042 0201 	orr.w	r2, r2, #1
 8009a96:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a98:	e008      	b.n	8009aac <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	681a      	ldr	r2, [r3, #0]
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	f042 0201 	orr.w	r2, r2, #1
 8009aa8:	601a      	str	r2, [r3, #0]
 8009aaa:	e000      	b.n	8009aae <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009aac:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009aae:	2300      	movs	r3, #0
}
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	3710      	adds	r7, #16
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	bd80      	pop	{r7, pc}
 8009ab8:	40012c00 	.word	0x40012c00
 8009abc:	40013400 	.word	0x40013400
 8009ac0:	40014000 	.word	0x40014000
 8009ac4:	40014400 	.word	0x40014400
 8009ac8:	40014800 	.word	0x40014800
 8009acc:	40015000 	.word	0x40015000
 8009ad0:	40000400 	.word	0x40000400
 8009ad4:	40000800 	.word	0x40000800
 8009ad8:	40000c00 	.word	0x40000c00
 8009adc:	00010007 	.word	0x00010007

08009ae0 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b082      	sub	sp, #8
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
 8009ae8:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d101      	bne.n	8009af4 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8009af0:	2301      	movs	r3, #1
 8009af2:	e04c      	b.n	8009b8e <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009afa:	b2db      	uxtb	r3, r3
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d111      	bne.n	8009b24 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2200      	movs	r2, #0
 8009b04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8009b08:	6878      	ldr	r0, [r7, #4]
 8009b0a:	f001 fc1f 	bl	800b34c <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d102      	bne.n	8009b1c <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	4a1f      	ldr	r2, [pc, #124]	@ (8009b98 <HAL_TIM_OnePulse_Init+0xb8>)
 8009b1a:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009b20:	6878      	ldr	r0, [r7, #4]
 8009b22:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2202      	movs	r2, #2
 8009b28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681a      	ldr	r2, [r3, #0]
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	3304      	adds	r3, #4
 8009b34:	4619      	mov	r1, r3
 8009b36:	4610      	mov	r0, r2
 8009b38:	f000 ff68 	bl	800aa0c <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	681a      	ldr	r2, [r3, #0]
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	f022 0208 	bic.w	r2, r2, #8
 8009b4a:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	6819      	ldr	r1, [r3, #0]
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	683a      	ldr	r2, [r7, #0]
 8009b58:	430a      	orrs	r2, r1
 8009b5a:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2201      	movs	r2, #1
 8009b60:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2201      	movs	r2, #1
 8009b68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2201      	movs	r2, #1
 8009b70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2201      	movs	r2, #1
 8009b78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2201      	movs	r2, #1
 8009b80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2201      	movs	r2, #1
 8009b88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009b8c:	2300      	movs	r3, #0
}
 8009b8e:	4618      	mov	r0, r3
 8009b90:	3708      	adds	r7, #8
 8009b92:	46bd      	mov	sp, r7
 8009b94:	bd80      	pop	{r7, pc}
 8009b96:	bf00      	nop
 8009b98:	08009b9d 	.word	0x08009b9d

08009b9c <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8009b9c:	b480      	push	{r7}
 8009b9e:	b083      	sub	sp, #12
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8009ba4:	bf00      	nop
 8009ba6:	370c      	adds	r7, #12
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bae:	4770      	bx	lr

08009bb0 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b084      	sub	sp, #16
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
 8009bb8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009bc0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009bc8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009bd0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009bd8:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009bda:	7bfb      	ldrb	r3, [r7, #15]
 8009bdc:	2b01      	cmp	r3, #1
 8009bde:	d108      	bne.n	8009bf2 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009be0:	7bbb      	ldrb	r3, [r7, #14]
 8009be2:	2b01      	cmp	r3, #1
 8009be4:	d105      	bne.n	8009bf2 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009be6:	7b7b      	ldrb	r3, [r7, #13]
 8009be8:	2b01      	cmp	r3, #1
 8009bea:	d102      	bne.n	8009bf2 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009bec:	7b3b      	ldrb	r3, [r7, #12]
 8009bee:	2b01      	cmp	r3, #1
 8009bf0:	d001      	beq.n	8009bf6 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8009bf2:	2301      	movs	r3, #1
 8009bf4:	e059      	b.n	8009caa <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	2202      	movs	r2, #2
 8009bfa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	2202      	movs	r2, #2
 8009c02:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	2202      	movs	r2, #2
 8009c0a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	2202      	movs	r2, #2
 8009c12:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	68da      	ldr	r2, [r3, #12]
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	f042 0202 	orr.w	r2, r2, #2
 8009c24:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	68da      	ldr	r2, [r3, #12]
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	f042 0204 	orr.w	r2, r2, #4
 8009c34:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	2201      	movs	r2, #1
 8009c3c:	2100      	movs	r1, #0
 8009c3e:	4618      	mov	r0, r3
 8009c40:	f001 fb5e 	bl	800b300 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	2201      	movs	r2, #1
 8009c4a:	2104      	movs	r1, #4
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	f001 fb57 	bl	800b300 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	4a17      	ldr	r2, [pc, #92]	@ (8009cb4 <HAL_TIM_OnePulse_Start_IT+0x104>)
 8009c58:	4293      	cmp	r3, r2
 8009c5a:	d018      	beq.n	8009c8e <HAL_TIM_OnePulse_Start_IT+0xde>
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	4a15      	ldr	r2, [pc, #84]	@ (8009cb8 <HAL_TIM_OnePulse_Start_IT+0x108>)
 8009c62:	4293      	cmp	r3, r2
 8009c64:	d013      	beq.n	8009c8e <HAL_TIM_OnePulse_Start_IT+0xde>
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	4a14      	ldr	r2, [pc, #80]	@ (8009cbc <HAL_TIM_OnePulse_Start_IT+0x10c>)
 8009c6c:	4293      	cmp	r3, r2
 8009c6e:	d00e      	beq.n	8009c8e <HAL_TIM_OnePulse_Start_IT+0xde>
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	4a12      	ldr	r2, [pc, #72]	@ (8009cc0 <HAL_TIM_OnePulse_Start_IT+0x110>)
 8009c76:	4293      	cmp	r3, r2
 8009c78:	d009      	beq.n	8009c8e <HAL_TIM_OnePulse_Start_IT+0xde>
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	4a11      	ldr	r2, [pc, #68]	@ (8009cc4 <HAL_TIM_OnePulse_Start_IT+0x114>)
 8009c80:	4293      	cmp	r3, r2
 8009c82:	d004      	beq.n	8009c8e <HAL_TIM_OnePulse_Start_IT+0xde>
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	4a0f      	ldr	r2, [pc, #60]	@ (8009cc8 <HAL_TIM_OnePulse_Start_IT+0x118>)
 8009c8a:	4293      	cmp	r3, r2
 8009c8c:	d101      	bne.n	8009c92 <HAL_TIM_OnePulse_Start_IT+0xe2>
 8009c8e:	2301      	movs	r3, #1
 8009c90:	e000      	b.n	8009c94 <HAL_TIM_OnePulse_Start_IT+0xe4>
 8009c92:	2300      	movs	r3, #0
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d007      	beq.n	8009ca8 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009ca6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8009ca8:	2300      	movs	r3, #0
}
 8009caa:	4618      	mov	r0, r3
 8009cac:	3710      	adds	r7, #16
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	bd80      	pop	{r7, pc}
 8009cb2:	bf00      	nop
 8009cb4:	40012c00 	.word	0x40012c00
 8009cb8:	40013400 	.word	0x40013400
 8009cbc:	40014000 	.word	0x40014000
 8009cc0:	40014400 	.word	0x40014400
 8009cc4:	40014800 	.word	0x40014800
 8009cc8:	40015000 	.word	0x40015000

08009ccc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b086      	sub	sp, #24
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
 8009cd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d101      	bne.n	8009ce0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009cdc:	2301      	movs	r3, #1
 8009cde:	e0a2      	b.n	8009e26 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009ce6:	b2db      	uxtb	r3, r3
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d111      	bne.n	8009d10 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	2200      	movs	r2, #0
 8009cf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8009cf4:	6878      	ldr	r0, [r7, #4]
 8009cf6:	f001 fb29 	bl	800b34c <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d102      	bne.n	8009d08 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	4a4a      	ldr	r2, [pc, #296]	@ (8009e30 <HAL_TIM_Encoder_Init+0x164>)
 8009d06:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009d0c:	6878      	ldr	r0, [r7, #4]
 8009d0e:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	2202      	movs	r2, #2
 8009d14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	689b      	ldr	r3, [r3, #8]
 8009d1e:	687a      	ldr	r2, [r7, #4]
 8009d20:	6812      	ldr	r2, [r2, #0]
 8009d22:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8009d26:	f023 0307 	bic.w	r3, r3, #7
 8009d2a:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681a      	ldr	r2, [r3, #0]
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	3304      	adds	r3, #4
 8009d34:	4619      	mov	r1, r3
 8009d36:	4610      	mov	r0, r2
 8009d38:	f000 fe68 	bl	800aa0c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	689b      	ldr	r3, [r3, #8]
 8009d42:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	699b      	ldr	r3, [r3, #24]
 8009d4a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	6a1b      	ldr	r3, [r3, #32]
 8009d52:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8009d54:	683b      	ldr	r3, [r7, #0]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	697a      	ldr	r2, [r7, #20]
 8009d5a:	4313      	orrs	r3, r2
 8009d5c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009d5e:	693b      	ldr	r3, [r7, #16]
 8009d60:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009d64:	f023 0303 	bic.w	r3, r3, #3
 8009d68:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	689a      	ldr	r2, [r3, #8]
 8009d6e:	683b      	ldr	r3, [r7, #0]
 8009d70:	699b      	ldr	r3, [r3, #24]
 8009d72:	021b      	lsls	r3, r3, #8
 8009d74:	4313      	orrs	r3, r2
 8009d76:	693a      	ldr	r2, [r7, #16]
 8009d78:	4313      	orrs	r3, r2
 8009d7a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8009d7c:	693b      	ldr	r3, [r7, #16]
 8009d7e:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8009d82:	f023 030c 	bic.w	r3, r3, #12
 8009d86:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009d88:	693b      	ldr	r3, [r7, #16]
 8009d8a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009d8e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009d92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	68da      	ldr	r2, [r3, #12]
 8009d98:	683b      	ldr	r3, [r7, #0]
 8009d9a:	69db      	ldr	r3, [r3, #28]
 8009d9c:	021b      	lsls	r3, r3, #8
 8009d9e:	4313      	orrs	r3, r2
 8009da0:	693a      	ldr	r2, [r7, #16]
 8009da2:	4313      	orrs	r3, r2
 8009da4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009da6:	683b      	ldr	r3, [r7, #0]
 8009da8:	691b      	ldr	r3, [r3, #16]
 8009daa:	011a      	lsls	r2, r3, #4
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	6a1b      	ldr	r3, [r3, #32]
 8009db0:	031b      	lsls	r3, r3, #12
 8009db2:	4313      	orrs	r3, r2
 8009db4:	693a      	ldr	r2, [r7, #16]
 8009db6:	4313      	orrs	r3, r2
 8009db8:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8009dc0:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8009dc8:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	685a      	ldr	r2, [r3, #4]
 8009dce:	683b      	ldr	r3, [r7, #0]
 8009dd0:	695b      	ldr	r3, [r3, #20]
 8009dd2:	011b      	lsls	r3, r3, #4
 8009dd4:	4313      	orrs	r3, r2
 8009dd6:	68fa      	ldr	r2, [r7, #12]
 8009dd8:	4313      	orrs	r3, r2
 8009dda:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	697a      	ldr	r2, [r7, #20]
 8009de2:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	693a      	ldr	r2, [r7, #16]
 8009dea:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	68fa      	ldr	r2, [r7, #12]
 8009df2:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2201      	movs	r2, #1
 8009df8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2201      	movs	r2, #1
 8009e00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	2201      	movs	r2, #1
 8009e08:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	2201      	movs	r2, #1
 8009e10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2201      	movs	r2, #1
 8009e18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	2201      	movs	r2, #1
 8009e20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009e24:	2300      	movs	r3, #0
}
 8009e26:	4618      	mov	r0, r3
 8009e28:	3718      	adds	r7, #24
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	bd80      	pop	{r7, pc}
 8009e2e:	bf00      	nop
 8009e30:	08005911 	.word	0x08005911

08009e34 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b084      	sub	sp, #16
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
 8009e3c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009e44:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009e4c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009e54:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009e5c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d110      	bne.n	8009e86 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009e64:	7bfb      	ldrb	r3, [r7, #15]
 8009e66:	2b01      	cmp	r3, #1
 8009e68:	d102      	bne.n	8009e70 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8009e6a:	7b7b      	ldrb	r3, [r7, #13]
 8009e6c:	2b01      	cmp	r3, #1
 8009e6e:	d001      	beq.n	8009e74 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8009e70:	2301      	movs	r3, #1
 8009e72:	e069      	b.n	8009f48 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2202      	movs	r2, #2
 8009e78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2202      	movs	r2, #2
 8009e80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009e84:	e031      	b.n	8009eea <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8009e86:	683b      	ldr	r3, [r7, #0]
 8009e88:	2b04      	cmp	r3, #4
 8009e8a:	d110      	bne.n	8009eae <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009e8c:	7bbb      	ldrb	r3, [r7, #14]
 8009e8e:	2b01      	cmp	r3, #1
 8009e90:	d102      	bne.n	8009e98 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009e92:	7b3b      	ldrb	r3, [r7, #12]
 8009e94:	2b01      	cmp	r3, #1
 8009e96:	d001      	beq.n	8009e9c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8009e98:	2301      	movs	r3, #1
 8009e9a:	e055      	b.n	8009f48 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2202      	movs	r2, #2
 8009ea0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2202      	movs	r2, #2
 8009ea8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009eac:	e01d      	b.n	8009eea <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009eae:	7bfb      	ldrb	r3, [r7, #15]
 8009eb0:	2b01      	cmp	r3, #1
 8009eb2:	d108      	bne.n	8009ec6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009eb4:	7bbb      	ldrb	r3, [r7, #14]
 8009eb6:	2b01      	cmp	r3, #1
 8009eb8:	d105      	bne.n	8009ec6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009eba:	7b7b      	ldrb	r3, [r7, #13]
 8009ebc:	2b01      	cmp	r3, #1
 8009ebe:	d102      	bne.n	8009ec6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009ec0:	7b3b      	ldrb	r3, [r7, #12]
 8009ec2:	2b01      	cmp	r3, #1
 8009ec4:	d001      	beq.n	8009eca <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8009ec6:	2301      	movs	r3, #1
 8009ec8:	e03e      	b.n	8009f48 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	2202      	movs	r2, #2
 8009ece:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	2202      	movs	r2, #2
 8009ed6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	2202      	movs	r2, #2
 8009ede:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	2202      	movs	r2, #2
 8009ee6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8009eea:	683b      	ldr	r3, [r7, #0]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d003      	beq.n	8009ef8 <HAL_TIM_Encoder_Start+0xc4>
 8009ef0:	683b      	ldr	r3, [r7, #0]
 8009ef2:	2b04      	cmp	r3, #4
 8009ef4:	d008      	beq.n	8009f08 <HAL_TIM_Encoder_Start+0xd4>
 8009ef6:	e00f      	b.n	8009f18 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	2201      	movs	r2, #1
 8009efe:	2100      	movs	r1, #0
 8009f00:	4618      	mov	r0, r3
 8009f02:	f001 f9fd 	bl	800b300 <TIM_CCxChannelCmd>
      break;
 8009f06:	e016      	b.n	8009f36 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	2201      	movs	r2, #1
 8009f0e:	2104      	movs	r1, #4
 8009f10:	4618      	mov	r0, r3
 8009f12:	f001 f9f5 	bl	800b300 <TIM_CCxChannelCmd>
      break;
 8009f16:	e00e      	b.n	8009f36 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	2201      	movs	r2, #1
 8009f1e:	2100      	movs	r1, #0
 8009f20:	4618      	mov	r0, r3
 8009f22:	f001 f9ed 	bl	800b300 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	2201      	movs	r2, #1
 8009f2c:	2104      	movs	r1, #4
 8009f2e:	4618      	mov	r0, r3
 8009f30:	f001 f9e6 	bl	800b300 <TIM_CCxChannelCmd>
      break;
 8009f34:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	681a      	ldr	r2, [r3, #0]
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	f042 0201 	orr.w	r2, r2, #1
 8009f44:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009f46:	2300      	movs	r3, #0
}
 8009f48:	4618      	mov	r0, r3
 8009f4a:	3710      	adds	r7, #16
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	bd80      	pop	{r7, pc}

08009f50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b084      	sub	sp, #16
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	68db      	ldr	r3, [r3, #12]
 8009f5e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	691b      	ldr	r3, [r3, #16]
 8009f66:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009f68:	68bb      	ldr	r3, [r7, #8]
 8009f6a:	f003 0302 	and.w	r3, r3, #2
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d026      	beq.n	8009fc0 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	f003 0302 	and.w	r3, r3, #2
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d021      	beq.n	8009fc0 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	f06f 0202 	mvn.w	r2, #2
 8009f84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	2201      	movs	r2, #1
 8009f8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	699b      	ldr	r3, [r3, #24]
 8009f92:	f003 0303 	and.w	r3, r3, #3
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d005      	beq.n	8009fa6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009fa0:	6878      	ldr	r0, [r7, #4]
 8009fa2:	4798      	blx	r3
 8009fa4:	e009      	b.n	8009fba <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009fac:	6878      	ldr	r0, [r7, #4]
 8009fae:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009fb6:	6878      	ldr	r0, [r7, #4]
 8009fb8:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009fc0:	68bb      	ldr	r3, [r7, #8]
 8009fc2:	f003 0304 	and.w	r3, r3, #4
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d026      	beq.n	800a018 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	f003 0304 	and.w	r3, r3, #4
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d021      	beq.n	800a018 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	f06f 0204 	mvn.w	r2, #4
 8009fdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	2202      	movs	r2, #2
 8009fe2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	699b      	ldr	r3, [r3, #24]
 8009fea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d005      	beq.n	8009ffe <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009ff8:	6878      	ldr	r0, [r7, #4]
 8009ffa:	4798      	blx	r3
 8009ffc:	e009      	b.n	800a012 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a004:	6878      	ldr	r0, [r7, #4]
 800a006:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a00e:	6878      	ldr	r0, [r7, #4]
 800a010:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	2200      	movs	r2, #0
 800a016:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a018:	68bb      	ldr	r3, [r7, #8]
 800a01a:	f003 0308 	and.w	r3, r3, #8
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d026      	beq.n	800a070 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	f003 0308 	and.w	r3, r3, #8
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d021      	beq.n	800a070 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	f06f 0208 	mvn.w	r2, #8
 800a034:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	2204      	movs	r2, #4
 800a03a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	69db      	ldr	r3, [r3, #28]
 800a042:	f003 0303 	and.w	r3, r3, #3
 800a046:	2b00      	cmp	r3, #0
 800a048:	d005      	beq.n	800a056 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a050:	6878      	ldr	r0, [r7, #4]
 800a052:	4798      	blx	r3
 800a054:	e009      	b.n	800a06a <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a05c:	6878      	ldr	r0, [r7, #4]
 800a05e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a066:	6878      	ldr	r0, [r7, #4]
 800a068:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	2200      	movs	r2, #0
 800a06e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a070:	68bb      	ldr	r3, [r7, #8]
 800a072:	f003 0310 	and.w	r3, r3, #16
 800a076:	2b00      	cmp	r3, #0
 800a078:	d026      	beq.n	800a0c8 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	f003 0310 	and.w	r3, r3, #16
 800a080:	2b00      	cmp	r3, #0
 800a082:	d021      	beq.n	800a0c8 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	f06f 0210 	mvn.w	r2, #16
 800a08c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	2208      	movs	r2, #8
 800a092:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	69db      	ldr	r3, [r3, #28]
 800a09a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d005      	beq.n	800a0ae <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a0a8:	6878      	ldr	r0, [r7, #4]
 800a0aa:	4798      	blx	r3
 800a0ac:	e009      	b.n	800a0c2 <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a0b4:	6878      	ldr	r0, [r7, #4]
 800a0b6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a0be:	6878      	ldr	r0, [r7, #4]
 800a0c0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a0c8:	68bb      	ldr	r3, [r7, #8]
 800a0ca:	f003 0301 	and.w	r3, r3, #1
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d00e      	beq.n	800a0f0 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	f003 0301 	and.w	r3, r3, #1
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d009      	beq.n	800a0f0 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	f06f 0201 	mvn.w	r2, #1
 800a0e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a0ec:	6878      	ldr	r0, [r7, #4]
 800a0ee:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a0f0:	68bb      	ldr	r3, [r7, #8]
 800a0f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d104      	bne.n	800a104 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800a0fa:	68bb      	ldr	r3, [r7, #8]
 800a0fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a100:	2b00      	cmp	r3, #0
 800a102:	d00e      	beq.n	800a122 <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d009      	beq.n	800a122 <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800a116:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a11e:	6878      	ldr	r0, [r7, #4]
 800a120:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a122:	68bb      	ldr	r3, [r7, #8]
 800a124:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d00e      	beq.n	800a14a <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a132:	2b00      	cmp	r3, #0
 800a134:	d009      	beq.n	800a14a <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a13e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800a146:	6878      	ldr	r0, [r7, #4]
 800a148:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a14a:	68bb      	ldr	r3, [r7, #8]
 800a14c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a150:	2b00      	cmp	r3, #0
 800a152:	d00e      	beq.n	800a172 <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d009      	beq.n	800a172 <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a166:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a16e:	6878      	ldr	r0, [r7, #4]
 800a170:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a172:	68bb      	ldr	r3, [r7, #8]
 800a174:	f003 0320 	and.w	r3, r3, #32
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d00e      	beq.n	800a19a <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	f003 0320 	and.w	r3, r3, #32
 800a182:	2b00      	cmp	r3, #0
 800a184:	d009      	beq.n	800a19a <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	f06f 0220 	mvn.w	r2, #32
 800a18e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a196:	6878      	ldr	r0, [r7, #4]
 800a198:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800a19a:	68bb      	ldr	r3, [r7, #8]
 800a19c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d00e      	beq.n	800a1c2 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d009      	beq.n	800a1c2 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800a1b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800a1be:	6878      	ldr	r0, [r7, #4]
 800a1c0:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800a1c2:	68bb      	ldr	r3, [r7, #8]
 800a1c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d00e      	beq.n	800a1ea <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d009      	beq.n	800a1ea <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800a1de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a1e6:	6878      	ldr	r0, [r7, #4]
 800a1e8:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800a1ea:	68bb      	ldr	r3, [r7, #8]
 800a1ec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d00e      	beq.n	800a212 <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d009      	beq.n	800a212 <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800a206:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800a20e:	6878      	ldr	r0, [r7, #4]
 800a210:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800a212:	68bb      	ldr	r3, [r7, #8]
 800a214:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d00e      	beq.n	800a23a <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a222:	2b00      	cmp	r3, #0
 800a224:	d009      	beq.n	800a23a <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800a22e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800a236:	6878      	ldr	r0, [r7, #4]
 800a238:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a23a:	bf00      	nop
 800a23c:	3710      	adds	r7, #16
 800a23e:	46bd      	mov	sp, r7
 800a240:	bd80      	pop	{r7, pc}
	...

0800a244 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a244:	b580      	push	{r7, lr}
 800a246:	b086      	sub	sp, #24
 800a248:	af00      	add	r7, sp, #0
 800a24a:	60f8      	str	r0, [r7, #12]
 800a24c:	60b9      	str	r1, [r7, #8]
 800a24e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a250:	2300      	movs	r3, #0
 800a252:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a25a:	2b01      	cmp	r3, #1
 800a25c:	d101      	bne.n	800a262 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a25e:	2302      	movs	r3, #2
 800a260:	e0ff      	b.n	800a462 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	2201      	movs	r2, #1
 800a266:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	2b14      	cmp	r3, #20
 800a26e:	f200 80f0 	bhi.w	800a452 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a272:	a201      	add	r2, pc, #4	@ (adr r2, 800a278 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a278:	0800a2cd 	.word	0x0800a2cd
 800a27c:	0800a453 	.word	0x0800a453
 800a280:	0800a453 	.word	0x0800a453
 800a284:	0800a453 	.word	0x0800a453
 800a288:	0800a30d 	.word	0x0800a30d
 800a28c:	0800a453 	.word	0x0800a453
 800a290:	0800a453 	.word	0x0800a453
 800a294:	0800a453 	.word	0x0800a453
 800a298:	0800a34f 	.word	0x0800a34f
 800a29c:	0800a453 	.word	0x0800a453
 800a2a0:	0800a453 	.word	0x0800a453
 800a2a4:	0800a453 	.word	0x0800a453
 800a2a8:	0800a38f 	.word	0x0800a38f
 800a2ac:	0800a453 	.word	0x0800a453
 800a2b0:	0800a453 	.word	0x0800a453
 800a2b4:	0800a453 	.word	0x0800a453
 800a2b8:	0800a3d1 	.word	0x0800a3d1
 800a2bc:	0800a453 	.word	0x0800a453
 800a2c0:	0800a453 	.word	0x0800a453
 800a2c4:	0800a453 	.word	0x0800a453
 800a2c8:	0800a411 	.word	0x0800a411
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	68b9      	ldr	r1, [r7, #8]
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	f000 fc4e 	bl	800ab74 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	699a      	ldr	r2, [r3, #24]
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	f042 0208 	orr.w	r2, r2, #8
 800a2e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	699a      	ldr	r2, [r3, #24]
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	f022 0204 	bic.w	r2, r2, #4
 800a2f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	6999      	ldr	r1, [r3, #24]
 800a2fe:	68bb      	ldr	r3, [r7, #8]
 800a300:	691a      	ldr	r2, [r3, #16]
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	430a      	orrs	r2, r1
 800a308:	619a      	str	r2, [r3, #24]
      break;
 800a30a:	e0a5      	b.n	800a458 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	68b9      	ldr	r1, [r7, #8]
 800a312:	4618      	mov	r0, r3
 800a314:	f000 fcc8 	bl	800aca8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	699a      	ldr	r2, [r3, #24]
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a326:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	699a      	ldr	r2, [r3, #24]
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a336:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	6999      	ldr	r1, [r3, #24]
 800a33e:	68bb      	ldr	r3, [r7, #8]
 800a340:	691b      	ldr	r3, [r3, #16]
 800a342:	021a      	lsls	r2, r3, #8
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	430a      	orrs	r2, r1
 800a34a:	619a      	str	r2, [r3, #24]
      break;
 800a34c:	e084      	b.n	800a458 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	68b9      	ldr	r1, [r7, #8]
 800a354:	4618      	mov	r0, r3
 800a356:	f000 fd3b 	bl	800add0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	69da      	ldr	r2, [r3, #28]
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	f042 0208 	orr.w	r2, r2, #8
 800a368:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	69da      	ldr	r2, [r3, #28]
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	f022 0204 	bic.w	r2, r2, #4
 800a378:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	69d9      	ldr	r1, [r3, #28]
 800a380:	68bb      	ldr	r3, [r7, #8]
 800a382:	691a      	ldr	r2, [r3, #16]
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	430a      	orrs	r2, r1
 800a38a:	61da      	str	r2, [r3, #28]
      break;
 800a38c:	e064      	b.n	800a458 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	68b9      	ldr	r1, [r7, #8]
 800a394:	4618      	mov	r0, r3
 800a396:	f000 fdad 	bl	800aef4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	69da      	ldr	r2, [r3, #28]
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a3a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	69da      	ldr	r2, [r3, #28]
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a3b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	69d9      	ldr	r1, [r3, #28]
 800a3c0:	68bb      	ldr	r3, [r7, #8]
 800a3c2:	691b      	ldr	r3, [r3, #16]
 800a3c4:	021a      	lsls	r2, r3, #8
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	430a      	orrs	r2, r1
 800a3cc:	61da      	str	r2, [r3, #28]
      break;
 800a3ce:	e043      	b.n	800a458 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	68b9      	ldr	r1, [r7, #8]
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	f000 fe20 	bl	800b01c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	f042 0208 	orr.w	r2, r2, #8
 800a3ea:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	f022 0204 	bic.w	r2, r2, #4
 800a3fa:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800a402:	68bb      	ldr	r3, [r7, #8]
 800a404:	691a      	ldr	r2, [r3, #16]
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	430a      	orrs	r2, r1
 800a40c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800a40e:	e023      	b.n	800a458 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	68b9      	ldr	r1, [r7, #8]
 800a416:	4618      	mov	r0, r3
 800a418:	f000 fe6a 	bl	800b0f0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a42a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a43a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800a442:	68bb      	ldr	r3, [r7, #8]
 800a444:	691b      	ldr	r3, [r3, #16]
 800a446:	021a      	lsls	r2, r3, #8
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	430a      	orrs	r2, r1
 800a44e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800a450:	e002      	b.n	800a458 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a452:	2301      	movs	r3, #1
 800a454:	75fb      	strb	r3, [r7, #23]
      break;
 800a456:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	2200      	movs	r2, #0
 800a45c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a460:	7dfb      	ldrb	r3, [r7, #23]
}
 800a462:	4618      	mov	r0, r3
 800a464:	3718      	adds	r7, #24
 800a466:	46bd      	mov	sp, r7
 800a468:	bd80      	pop	{r7, pc}
 800a46a:	bf00      	nop

0800a46c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b084      	sub	sp, #16
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
 800a474:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a476:	2300      	movs	r3, #0
 800a478:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a480:	2b01      	cmp	r3, #1
 800a482:	d101      	bne.n	800a488 <HAL_TIM_ConfigClockSource+0x1c>
 800a484:	2302      	movs	r3, #2
 800a486:	e0f6      	b.n	800a676 <HAL_TIM_ConfigClockSource+0x20a>
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	2201      	movs	r2, #1
 800a48c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	2202      	movs	r2, #2
 800a494:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	689b      	ldr	r3, [r3, #8]
 800a49e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a4a0:	68bb      	ldr	r3, [r7, #8]
 800a4a2:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800a4a6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800a4aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a4ac:	68bb      	ldr	r3, [r7, #8]
 800a4ae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a4b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	68ba      	ldr	r2, [r7, #8]
 800a4ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a4bc:	683b      	ldr	r3, [r7, #0]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	4a6f      	ldr	r2, [pc, #444]	@ (800a680 <HAL_TIM_ConfigClockSource+0x214>)
 800a4c2:	4293      	cmp	r3, r2
 800a4c4:	f000 80c1 	beq.w	800a64a <HAL_TIM_ConfigClockSource+0x1de>
 800a4c8:	4a6d      	ldr	r2, [pc, #436]	@ (800a680 <HAL_TIM_ConfigClockSource+0x214>)
 800a4ca:	4293      	cmp	r3, r2
 800a4cc:	f200 80c6 	bhi.w	800a65c <HAL_TIM_ConfigClockSource+0x1f0>
 800a4d0:	4a6c      	ldr	r2, [pc, #432]	@ (800a684 <HAL_TIM_ConfigClockSource+0x218>)
 800a4d2:	4293      	cmp	r3, r2
 800a4d4:	f000 80b9 	beq.w	800a64a <HAL_TIM_ConfigClockSource+0x1de>
 800a4d8:	4a6a      	ldr	r2, [pc, #424]	@ (800a684 <HAL_TIM_ConfigClockSource+0x218>)
 800a4da:	4293      	cmp	r3, r2
 800a4dc:	f200 80be 	bhi.w	800a65c <HAL_TIM_ConfigClockSource+0x1f0>
 800a4e0:	4a69      	ldr	r2, [pc, #420]	@ (800a688 <HAL_TIM_ConfigClockSource+0x21c>)
 800a4e2:	4293      	cmp	r3, r2
 800a4e4:	f000 80b1 	beq.w	800a64a <HAL_TIM_ConfigClockSource+0x1de>
 800a4e8:	4a67      	ldr	r2, [pc, #412]	@ (800a688 <HAL_TIM_ConfigClockSource+0x21c>)
 800a4ea:	4293      	cmp	r3, r2
 800a4ec:	f200 80b6 	bhi.w	800a65c <HAL_TIM_ConfigClockSource+0x1f0>
 800a4f0:	4a66      	ldr	r2, [pc, #408]	@ (800a68c <HAL_TIM_ConfigClockSource+0x220>)
 800a4f2:	4293      	cmp	r3, r2
 800a4f4:	f000 80a9 	beq.w	800a64a <HAL_TIM_ConfigClockSource+0x1de>
 800a4f8:	4a64      	ldr	r2, [pc, #400]	@ (800a68c <HAL_TIM_ConfigClockSource+0x220>)
 800a4fa:	4293      	cmp	r3, r2
 800a4fc:	f200 80ae 	bhi.w	800a65c <HAL_TIM_ConfigClockSource+0x1f0>
 800a500:	4a63      	ldr	r2, [pc, #396]	@ (800a690 <HAL_TIM_ConfigClockSource+0x224>)
 800a502:	4293      	cmp	r3, r2
 800a504:	f000 80a1 	beq.w	800a64a <HAL_TIM_ConfigClockSource+0x1de>
 800a508:	4a61      	ldr	r2, [pc, #388]	@ (800a690 <HAL_TIM_ConfigClockSource+0x224>)
 800a50a:	4293      	cmp	r3, r2
 800a50c:	f200 80a6 	bhi.w	800a65c <HAL_TIM_ConfigClockSource+0x1f0>
 800a510:	4a60      	ldr	r2, [pc, #384]	@ (800a694 <HAL_TIM_ConfigClockSource+0x228>)
 800a512:	4293      	cmp	r3, r2
 800a514:	f000 8099 	beq.w	800a64a <HAL_TIM_ConfigClockSource+0x1de>
 800a518:	4a5e      	ldr	r2, [pc, #376]	@ (800a694 <HAL_TIM_ConfigClockSource+0x228>)
 800a51a:	4293      	cmp	r3, r2
 800a51c:	f200 809e 	bhi.w	800a65c <HAL_TIM_ConfigClockSource+0x1f0>
 800a520:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a524:	f000 8091 	beq.w	800a64a <HAL_TIM_ConfigClockSource+0x1de>
 800a528:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a52c:	f200 8096 	bhi.w	800a65c <HAL_TIM_ConfigClockSource+0x1f0>
 800a530:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a534:	f000 8089 	beq.w	800a64a <HAL_TIM_ConfigClockSource+0x1de>
 800a538:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a53c:	f200 808e 	bhi.w	800a65c <HAL_TIM_ConfigClockSource+0x1f0>
 800a540:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a544:	d03e      	beq.n	800a5c4 <HAL_TIM_ConfigClockSource+0x158>
 800a546:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a54a:	f200 8087 	bhi.w	800a65c <HAL_TIM_ConfigClockSource+0x1f0>
 800a54e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a552:	f000 8086 	beq.w	800a662 <HAL_TIM_ConfigClockSource+0x1f6>
 800a556:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a55a:	d87f      	bhi.n	800a65c <HAL_TIM_ConfigClockSource+0x1f0>
 800a55c:	2b70      	cmp	r3, #112	@ 0x70
 800a55e:	d01a      	beq.n	800a596 <HAL_TIM_ConfigClockSource+0x12a>
 800a560:	2b70      	cmp	r3, #112	@ 0x70
 800a562:	d87b      	bhi.n	800a65c <HAL_TIM_ConfigClockSource+0x1f0>
 800a564:	2b60      	cmp	r3, #96	@ 0x60
 800a566:	d050      	beq.n	800a60a <HAL_TIM_ConfigClockSource+0x19e>
 800a568:	2b60      	cmp	r3, #96	@ 0x60
 800a56a:	d877      	bhi.n	800a65c <HAL_TIM_ConfigClockSource+0x1f0>
 800a56c:	2b50      	cmp	r3, #80	@ 0x50
 800a56e:	d03c      	beq.n	800a5ea <HAL_TIM_ConfigClockSource+0x17e>
 800a570:	2b50      	cmp	r3, #80	@ 0x50
 800a572:	d873      	bhi.n	800a65c <HAL_TIM_ConfigClockSource+0x1f0>
 800a574:	2b40      	cmp	r3, #64	@ 0x40
 800a576:	d058      	beq.n	800a62a <HAL_TIM_ConfigClockSource+0x1be>
 800a578:	2b40      	cmp	r3, #64	@ 0x40
 800a57a:	d86f      	bhi.n	800a65c <HAL_TIM_ConfigClockSource+0x1f0>
 800a57c:	2b30      	cmp	r3, #48	@ 0x30
 800a57e:	d064      	beq.n	800a64a <HAL_TIM_ConfigClockSource+0x1de>
 800a580:	2b30      	cmp	r3, #48	@ 0x30
 800a582:	d86b      	bhi.n	800a65c <HAL_TIM_ConfigClockSource+0x1f0>
 800a584:	2b20      	cmp	r3, #32
 800a586:	d060      	beq.n	800a64a <HAL_TIM_ConfigClockSource+0x1de>
 800a588:	2b20      	cmp	r3, #32
 800a58a:	d867      	bhi.n	800a65c <HAL_TIM_ConfigClockSource+0x1f0>
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d05c      	beq.n	800a64a <HAL_TIM_ConfigClockSource+0x1de>
 800a590:	2b10      	cmp	r3, #16
 800a592:	d05a      	beq.n	800a64a <HAL_TIM_ConfigClockSource+0x1de>
 800a594:	e062      	b.n	800a65c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a59a:	683b      	ldr	r3, [r7, #0]
 800a59c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a59e:	683b      	ldr	r3, [r7, #0]
 800a5a0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a5a2:	683b      	ldr	r3, [r7, #0]
 800a5a4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a5a6:	f000 fe8b 	bl	800b2c0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	689b      	ldr	r3, [r3, #8]
 800a5b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a5b2:	68bb      	ldr	r3, [r7, #8]
 800a5b4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a5b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	68ba      	ldr	r2, [r7, #8]
 800a5c0:	609a      	str	r2, [r3, #8]
      break;
 800a5c2:	e04f      	b.n	800a664 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a5c8:	683b      	ldr	r3, [r7, #0]
 800a5ca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a5cc:	683b      	ldr	r3, [r7, #0]
 800a5ce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a5d0:	683b      	ldr	r3, [r7, #0]
 800a5d2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a5d4:	f000 fe74 	bl	800b2c0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	689a      	ldr	r2, [r3, #8]
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a5e6:	609a      	str	r2, [r3, #8]
      break;
 800a5e8:	e03c      	b.n	800a664 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a5ee:	683b      	ldr	r3, [r7, #0]
 800a5f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a5f2:	683b      	ldr	r3, [r7, #0]
 800a5f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a5f6:	461a      	mov	r2, r3
 800a5f8:	f000 fde6 	bl	800b1c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	2150      	movs	r1, #80	@ 0x50
 800a602:	4618      	mov	r0, r3
 800a604:	f000 fe3f 	bl	800b286 <TIM_ITRx_SetConfig>
      break;
 800a608:	e02c      	b.n	800a664 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a60e:	683b      	ldr	r3, [r7, #0]
 800a610:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a612:	683b      	ldr	r3, [r7, #0]
 800a614:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a616:	461a      	mov	r2, r3
 800a618:	f000 fe05 	bl	800b226 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	2160      	movs	r1, #96	@ 0x60
 800a622:	4618      	mov	r0, r3
 800a624:	f000 fe2f 	bl	800b286 <TIM_ITRx_SetConfig>
      break;
 800a628:	e01c      	b.n	800a664 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a62e:	683b      	ldr	r3, [r7, #0]
 800a630:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a632:	683b      	ldr	r3, [r7, #0]
 800a634:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a636:	461a      	mov	r2, r3
 800a638:	f000 fdc6 	bl	800b1c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	2140      	movs	r1, #64	@ 0x40
 800a642:	4618      	mov	r0, r3
 800a644:	f000 fe1f 	bl	800b286 <TIM_ITRx_SetConfig>
      break;
 800a648:	e00c      	b.n	800a664 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681a      	ldr	r2, [r3, #0]
 800a64e:	683b      	ldr	r3, [r7, #0]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	4619      	mov	r1, r3
 800a654:	4610      	mov	r0, r2
 800a656:	f000 fe16 	bl	800b286 <TIM_ITRx_SetConfig>
      break;
 800a65a:	e003      	b.n	800a664 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800a65c:	2301      	movs	r3, #1
 800a65e:	73fb      	strb	r3, [r7, #15]
      break;
 800a660:	e000      	b.n	800a664 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800a662:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	2201      	movs	r2, #1
 800a668:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	2200      	movs	r2, #0
 800a670:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a674:	7bfb      	ldrb	r3, [r7, #15]
}
 800a676:	4618      	mov	r0, r3
 800a678:	3710      	adds	r7, #16
 800a67a:	46bd      	mov	sp, r7
 800a67c:	bd80      	pop	{r7, pc}
 800a67e:	bf00      	nop
 800a680:	00100070 	.word	0x00100070
 800a684:	00100060 	.word	0x00100060
 800a688:	00100050 	.word	0x00100050
 800a68c:	00100040 	.word	0x00100040
 800a690:	00100030 	.word	0x00100030
 800a694:	00100020 	.word	0x00100020

0800a698 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a698:	b480      	push	{r7}
 800a69a:	b083      	sub	sp, #12
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800a6a0:	bf00      	nop
 800a6a2:	370c      	adds	r7, #12
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6aa:	4770      	bx	lr

0800a6ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a6ac:	b480      	push	{r7}
 800a6ae:	b083      	sub	sp, #12
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a6b4:	bf00      	nop
 800a6b6:	370c      	adds	r7, #12
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6be:	4770      	bx	lr

0800a6c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a6c0:	b480      	push	{r7}
 800a6c2:	b083      	sub	sp, #12
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a6c8:	bf00      	nop
 800a6ca:	370c      	adds	r7, #12
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d2:	4770      	bx	lr

0800a6d4 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a6d4:	b480      	push	{r7}
 800a6d6:	b083      	sub	sp, #12
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800a6dc:	bf00      	nop
 800a6de:	370c      	adds	r7, #12
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e6:	4770      	bx	lr

0800a6e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a6e8:	b480      	push	{r7}
 800a6ea:	b083      	sub	sp, #12
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a6f0:	bf00      	nop
 800a6f2:	370c      	adds	r7, #12
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fa:	4770      	bx	lr

0800a6fc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a6fc:	b480      	push	{r7}
 800a6fe:	b083      	sub	sp, #12
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800a704:	bf00      	nop
 800a706:	370c      	adds	r7, #12
 800a708:	46bd      	mov	sp, r7
 800a70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70e:	4770      	bx	lr

0800a710 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a710:	b480      	push	{r7}
 800a712:	b083      	sub	sp, #12
 800a714:	af00      	add	r7, sp, #0
 800a716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a718:	bf00      	nop
 800a71a:	370c      	adds	r7, #12
 800a71c:	46bd      	mov	sp, r7
 800a71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a722:	4770      	bx	lr

0800a724 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a724:	b480      	push	{r7}
 800a726:	b083      	sub	sp, #12
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800a72c:	bf00      	nop
 800a72e:	370c      	adds	r7, #12
 800a730:	46bd      	mov	sp, r7
 800a732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a736:	4770      	bx	lr

0800a738 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800a738:	b480      	push	{r7}
 800a73a:	b083      	sub	sp, #12
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800a740:	bf00      	nop
 800a742:	370c      	adds	r7, #12
 800a744:	46bd      	mov	sp, r7
 800a746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74a:	4770      	bx	lr

0800a74c <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 800a74c:	b480      	push	{r7}
 800a74e:	b087      	sub	sp, #28
 800a750:	af00      	add	r7, sp, #0
 800a752:	60f8      	str	r0, [r7, #12]
 800a754:	460b      	mov	r3, r1
 800a756:	607a      	str	r2, [r7, #4]
 800a758:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800a75a:	2300      	movs	r3, #0
 800a75c:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d101      	bne.n	800a768 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 800a764:	2301      	movs	r3, #1
 800a766:	e14a      	b.n	800a9fe <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a76e:	b2db      	uxtb	r3, r3
 800a770:	2b01      	cmp	r3, #1
 800a772:	f040 80dd 	bne.w	800a930 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 800a776:	7afb      	ldrb	r3, [r7, #11]
 800a778:	2b1f      	cmp	r3, #31
 800a77a:	f200 80d6 	bhi.w	800a92a <HAL_TIM_RegisterCallback+0x1de>
 800a77e:	a201      	add	r2, pc, #4	@ (adr r2, 800a784 <HAL_TIM_RegisterCallback+0x38>)
 800a780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a784:	0800a805 	.word	0x0800a805
 800a788:	0800a80d 	.word	0x0800a80d
 800a78c:	0800a815 	.word	0x0800a815
 800a790:	0800a81d 	.word	0x0800a81d
 800a794:	0800a825 	.word	0x0800a825
 800a798:	0800a82d 	.word	0x0800a82d
 800a79c:	0800a835 	.word	0x0800a835
 800a7a0:	0800a83d 	.word	0x0800a83d
 800a7a4:	0800a845 	.word	0x0800a845
 800a7a8:	0800a84d 	.word	0x0800a84d
 800a7ac:	0800a855 	.word	0x0800a855
 800a7b0:	0800a85d 	.word	0x0800a85d
 800a7b4:	0800a865 	.word	0x0800a865
 800a7b8:	0800a86d 	.word	0x0800a86d
 800a7bc:	0800a877 	.word	0x0800a877
 800a7c0:	0800a881 	.word	0x0800a881
 800a7c4:	0800a88b 	.word	0x0800a88b
 800a7c8:	0800a895 	.word	0x0800a895
 800a7cc:	0800a89f 	.word	0x0800a89f
 800a7d0:	0800a8a9 	.word	0x0800a8a9
 800a7d4:	0800a8b3 	.word	0x0800a8b3
 800a7d8:	0800a8bd 	.word	0x0800a8bd
 800a7dc:	0800a8c7 	.word	0x0800a8c7
 800a7e0:	0800a8d1 	.word	0x0800a8d1
 800a7e4:	0800a8db 	.word	0x0800a8db
 800a7e8:	0800a8e5 	.word	0x0800a8e5
 800a7ec:	0800a8ef 	.word	0x0800a8ef
 800a7f0:	0800a8f9 	.word	0x0800a8f9
 800a7f4:	0800a903 	.word	0x0800a903
 800a7f8:	0800a90d 	.word	0x0800a90d
 800a7fc:	0800a917 	.word	0x0800a917
 800a800:	0800a921 	.word	0x0800a921
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	687a      	ldr	r2, [r7, #4]
 800a808:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800a80a:	e0f7      	b.n	800a9fc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	687a      	ldr	r2, [r7, #4]
 800a810:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800a812:	e0f3      	b.n	800a9fc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	687a      	ldr	r2, [r7, #4]
 800a818:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800a81a:	e0ef      	b.n	800a9fc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	687a      	ldr	r2, [r7, #4]
 800a820:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800a822:	e0eb      	b.n	800a9fc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	687a      	ldr	r2, [r7, #4]
 800a828:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800a82a:	e0e7      	b.n	800a9fc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	687a      	ldr	r2, [r7, #4]
 800a830:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800a832:	e0e3      	b.n	800a9fc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	687a      	ldr	r2, [r7, #4]
 800a838:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800a83a:	e0df      	b.n	800a9fc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	687a      	ldr	r2, [r7, #4]
 800a840:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800a842:	e0db      	b.n	800a9fc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	687a      	ldr	r2, [r7, #4]
 800a848:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800a84a:	e0d7      	b.n	800a9fc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	687a      	ldr	r2, [r7, #4]
 800a850:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800a852:	e0d3      	b.n	800a9fc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	687a      	ldr	r2, [r7, #4]
 800a858:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800a85a:	e0cf      	b.n	800a9fc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	687a      	ldr	r2, [r7, #4]
 800a860:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800a862:	e0cb      	b.n	800a9fc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	687a      	ldr	r2, [r7, #4]
 800a868:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800a86a:	e0c7      	b.n	800a9fc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	687a      	ldr	r2, [r7, #4]
 800a870:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800a874:	e0c2      	b.n	800a9fc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	687a      	ldr	r2, [r7, #4]
 800a87a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 800a87e:	e0bd      	b.n	800a9fc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	687a      	ldr	r2, [r7, #4]
 800a884:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 800a888:	e0b8      	b.n	800a9fc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	687a      	ldr	r2, [r7, #4]
 800a88e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 800a892:	e0b3      	b.n	800a9fc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	687a      	ldr	r2, [r7, #4]
 800a898:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 800a89c:	e0ae      	b.n	800a9fc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	687a      	ldr	r2, [r7, #4]
 800a8a2:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800a8a6:	e0a9      	b.n	800a9fc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	687a      	ldr	r2, [r7, #4]
 800a8ac:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800a8b0:	e0a4      	b.n	800a9fc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	687a      	ldr	r2, [r7, #4]
 800a8b6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800a8ba:	e09f      	b.n	800a9fc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	687a      	ldr	r2, [r7, #4]
 800a8c0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800a8c4:	e09a      	b.n	800a9fc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	687a      	ldr	r2, [r7, #4]
 800a8ca:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800a8ce:	e095      	b.n	800a9fc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	687a      	ldr	r2, [r7, #4]
 800a8d4:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800a8d8:	e090      	b.n	800a9fc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	687a      	ldr	r2, [r7, #4]
 800a8de:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800a8e2:	e08b      	b.n	800a9fc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	687a      	ldr	r2, [r7, #4]
 800a8e8:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800a8ec:	e086      	b.n	800a9fc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	687a      	ldr	r2, [r7, #4]
 800a8f2:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800a8f6:	e081      	b.n	800a9fc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	687a      	ldr	r2, [r7, #4]
 800a8fc:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800a900:	e07c      	b.n	800a9fc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	687a      	ldr	r2, [r7, #4]
 800a906:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800a90a:	e077      	b.n	800a9fc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	687a      	ldr	r2, [r7, #4]
 800a910:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 800a914:	e072      	b.n	800a9fc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	687a      	ldr	r2, [r7, #4]
 800a91a:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800a91e:	e06d      	b.n	800a9fc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	687a      	ldr	r2, [r7, #4]
 800a924:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800a928:	e068      	b.n	800a9fc <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800a92a:	2301      	movs	r3, #1
 800a92c:	75fb      	strb	r3, [r7, #23]
        break;
 800a92e:	e065      	b.n	800a9fc <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a936:	b2db      	uxtb	r3, r3
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d15d      	bne.n	800a9f8 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 800a93c:	7afb      	ldrb	r3, [r7, #11]
 800a93e:	2b0d      	cmp	r3, #13
 800a940:	d857      	bhi.n	800a9f2 <HAL_TIM_RegisterCallback+0x2a6>
 800a942:	a201      	add	r2, pc, #4	@ (adr r2, 800a948 <HAL_TIM_RegisterCallback+0x1fc>)
 800a944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a948:	0800a981 	.word	0x0800a981
 800a94c:	0800a989 	.word	0x0800a989
 800a950:	0800a991 	.word	0x0800a991
 800a954:	0800a999 	.word	0x0800a999
 800a958:	0800a9a1 	.word	0x0800a9a1
 800a95c:	0800a9a9 	.word	0x0800a9a9
 800a960:	0800a9b1 	.word	0x0800a9b1
 800a964:	0800a9b9 	.word	0x0800a9b9
 800a968:	0800a9c1 	.word	0x0800a9c1
 800a96c:	0800a9c9 	.word	0x0800a9c9
 800a970:	0800a9d1 	.word	0x0800a9d1
 800a974:	0800a9d9 	.word	0x0800a9d9
 800a978:	0800a9e1 	.word	0x0800a9e1
 800a97c:	0800a9e9 	.word	0x0800a9e9
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	687a      	ldr	r2, [r7, #4]
 800a984:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800a986:	e039      	b.n	800a9fc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	687a      	ldr	r2, [r7, #4]
 800a98c:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800a98e:	e035      	b.n	800a9fc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	687a      	ldr	r2, [r7, #4]
 800a994:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800a996:	e031      	b.n	800a9fc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	687a      	ldr	r2, [r7, #4]
 800a99c:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800a99e:	e02d      	b.n	800a9fc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	687a      	ldr	r2, [r7, #4]
 800a9a4:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800a9a6:	e029      	b.n	800a9fc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	687a      	ldr	r2, [r7, #4]
 800a9ac:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800a9ae:	e025      	b.n	800a9fc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	687a      	ldr	r2, [r7, #4]
 800a9b4:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800a9b6:	e021      	b.n	800a9fc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	687a      	ldr	r2, [r7, #4]
 800a9bc:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800a9be:	e01d      	b.n	800a9fc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	687a      	ldr	r2, [r7, #4]
 800a9c4:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800a9c6:	e019      	b.n	800a9fc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	687a      	ldr	r2, [r7, #4]
 800a9cc:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800a9ce:	e015      	b.n	800a9fc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	687a      	ldr	r2, [r7, #4]
 800a9d4:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800a9d6:	e011      	b.n	800a9fc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	687a      	ldr	r2, [r7, #4]
 800a9dc:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800a9de:	e00d      	b.n	800a9fc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	687a      	ldr	r2, [r7, #4]
 800a9e4:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800a9e6:	e009      	b.n	800a9fc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	687a      	ldr	r2, [r7, #4]
 800a9ec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800a9f0:	e004      	b.n	800a9fc <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800a9f2:	2301      	movs	r3, #1
 800a9f4:	75fb      	strb	r3, [r7, #23]
        break;
 800a9f6:	e001      	b.n	800a9fc <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 800a9f8:	2301      	movs	r3, #1
 800a9fa:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800a9fc:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9fe:	4618      	mov	r0, r3
 800aa00:	371c      	adds	r7, #28
 800aa02:	46bd      	mov	sp, r7
 800aa04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa08:	4770      	bx	lr
 800aa0a:	bf00      	nop

0800aa0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800aa0c:	b480      	push	{r7}
 800aa0e:	b085      	sub	sp, #20
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	6078      	str	r0, [r7, #4]
 800aa14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	4a4c      	ldr	r2, [pc, #304]	@ (800ab50 <TIM_Base_SetConfig+0x144>)
 800aa20:	4293      	cmp	r3, r2
 800aa22:	d017      	beq.n	800aa54 <TIM_Base_SetConfig+0x48>
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aa2a:	d013      	beq.n	800aa54 <TIM_Base_SetConfig+0x48>
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	4a49      	ldr	r2, [pc, #292]	@ (800ab54 <TIM_Base_SetConfig+0x148>)
 800aa30:	4293      	cmp	r3, r2
 800aa32:	d00f      	beq.n	800aa54 <TIM_Base_SetConfig+0x48>
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	4a48      	ldr	r2, [pc, #288]	@ (800ab58 <TIM_Base_SetConfig+0x14c>)
 800aa38:	4293      	cmp	r3, r2
 800aa3a:	d00b      	beq.n	800aa54 <TIM_Base_SetConfig+0x48>
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	4a47      	ldr	r2, [pc, #284]	@ (800ab5c <TIM_Base_SetConfig+0x150>)
 800aa40:	4293      	cmp	r3, r2
 800aa42:	d007      	beq.n	800aa54 <TIM_Base_SetConfig+0x48>
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	4a46      	ldr	r2, [pc, #280]	@ (800ab60 <TIM_Base_SetConfig+0x154>)
 800aa48:	4293      	cmp	r3, r2
 800aa4a:	d003      	beq.n	800aa54 <TIM_Base_SetConfig+0x48>
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	4a45      	ldr	r2, [pc, #276]	@ (800ab64 <TIM_Base_SetConfig+0x158>)
 800aa50:	4293      	cmp	r3, r2
 800aa52:	d108      	bne.n	800aa66 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aa5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800aa5c:	683b      	ldr	r3, [r7, #0]
 800aa5e:	685b      	ldr	r3, [r3, #4]
 800aa60:	68fa      	ldr	r2, [r7, #12]
 800aa62:	4313      	orrs	r3, r2
 800aa64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	4a39      	ldr	r2, [pc, #228]	@ (800ab50 <TIM_Base_SetConfig+0x144>)
 800aa6a:	4293      	cmp	r3, r2
 800aa6c:	d023      	beq.n	800aab6 <TIM_Base_SetConfig+0xaa>
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aa74:	d01f      	beq.n	800aab6 <TIM_Base_SetConfig+0xaa>
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	4a36      	ldr	r2, [pc, #216]	@ (800ab54 <TIM_Base_SetConfig+0x148>)
 800aa7a:	4293      	cmp	r3, r2
 800aa7c:	d01b      	beq.n	800aab6 <TIM_Base_SetConfig+0xaa>
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	4a35      	ldr	r2, [pc, #212]	@ (800ab58 <TIM_Base_SetConfig+0x14c>)
 800aa82:	4293      	cmp	r3, r2
 800aa84:	d017      	beq.n	800aab6 <TIM_Base_SetConfig+0xaa>
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	4a34      	ldr	r2, [pc, #208]	@ (800ab5c <TIM_Base_SetConfig+0x150>)
 800aa8a:	4293      	cmp	r3, r2
 800aa8c:	d013      	beq.n	800aab6 <TIM_Base_SetConfig+0xaa>
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	4a33      	ldr	r2, [pc, #204]	@ (800ab60 <TIM_Base_SetConfig+0x154>)
 800aa92:	4293      	cmp	r3, r2
 800aa94:	d00f      	beq.n	800aab6 <TIM_Base_SetConfig+0xaa>
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	4a33      	ldr	r2, [pc, #204]	@ (800ab68 <TIM_Base_SetConfig+0x15c>)
 800aa9a:	4293      	cmp	r3, r2
 800aa9c:	d00b      	beq.n	800aab6 <TIM_Base_SetConfig+0xaa>
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	4a32      	ldr	r2, [pc, #200]	@ (800ab6c <TIM_Base_SetConfig+0x160>)
 800aaa2:	4293      	cmp	r3, r2
 800aaa4:	d007      	beq.n	800aab6 <TIM_Base_SetConfig+0xaa>
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	4a31      	ldr	r2, [pc, #196]	@ (800ab70 <TIM_Base_SetConfig+0x164>)
 800aaaa:	4293      	cmp	r3, r2
 800aaac:	d003      	beq.n	800aab6 <TIM_Base_SetConfig+0xaa>
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	4a2c      	ldr	r2, [pc, #176]	@ (800ab64 <TIM_Base_SetConfig+0x158>)
 800aab2:	4293      	cmp	r3, r2
 800aab4:	d108      	bne.n	800aac8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800aabc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800aabe:	683b      	ldr	r3, [r7, #0]
 800aac0:	68db      	ldr	r3, [r3, #12]
 800aac2:	68fa      	ldr	r2, [r7, #12]
 800aac4:	4313      	orrs	r3, r2
 800aac6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800aace:	683b      	ldr	r3, [r7, #0]
 800aad0:	695b      	ldr	r3, [r3, #20]
 800aad2:	4313      	orrs	r3, r2
 800aad4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	68fa      	ldr	r2, [r7, #12]
 800aada:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800aadc:	683b      	ldr	r3, [r7, #0]
 800aade:	689a      	ldr	r2, [r3, #8]
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800aae4:	683b      	ldr	r3, [r7, #0]
 800aae6:	681a      	ldr	r2, [r3, #0]
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	4a18      	ldr	r2, [pc, #96]	@ (800ab50 <TIM_Base_SetConfig+0x144>)
 800aaf0:	4293      	cmp	r3, r2
 800aaf2:	d013      	beq.n	800ab1c <TIM_Base_SetConfig+0x110>
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	4a1a      	ldr	r2, [pc, #104]	@ (800ab60 <TIM_Base_SetConfig+0x154>)
 800aaf8:	4293      	cmp	r3, r2
 800aafa:	d00f      	beq.n	800ab1c <TIM_Base_SetConfig+0x110>
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	4a1a      	ldr	r2, [pc, #104]	@ (800ab68 <TIM_Base_SetConfig+0x15c>)
 800ab00:	4293      	cmp	r3, r2
 800ab02:	d00b      	beq.n	800ab1c <TIM_Base_SetConfig+0x110>
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	4a19      	ldr	r2, [pc, #100]	@ (800ab6c <TIM_Base_SetConfig+0x160>)
 800ab08:	4293      	cmp	r3, r2
 800ab0a:	d007      	beq.n	800ab1c <TIM_Base_SetConfig+0x110>
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	4a18      	ldr	r2, [pc, #96]	@ (800ab70 <TIM_Base_SetConfig+0x164>)
 800ab10:	4293      	cmp	r3, r2
 800ab12:	d003      	beq.n	800ab1c <TIM_Base_SetConfig+0x110>
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	4a13      	ldr	r2, [pc, #76]	@ (800ab64 <TIM_Base_SetConfig+0x158>)
 800ab18:	4293      	cmp	r3, r2
 800ab1a:	d103      	bne.n	800ab24 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ab1c:	683b      	ldr	r3, [r7, #0]
 800ab1e:	691a      	ldr	r2, [r3, #16]
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	2201      	movs	r2, #1
 800ab28:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	691b      	ldr	r3, [r3, #16]
 800ab2e:	f003 0301 	and.w	r3, r3, #1
 800ab32:	2b01      	cmp	r3, #1
 800ab34:	d105      	bne.n	800ab42 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	691b      	ldr	r3, [r3, #16]
 800ab3a:	f023 0201 	bic.w	r2, r3, #1
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	611a      	str	r2, [r3, #16]
  }
}
 800ab42:	bf00      	nop
 800ab44:	3714      	adds	r7, #20
 800ab46:	46bd      	mov	sp, r7
 800ab48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4c:	4770      	bx	lr
 800ab4e:	bf00      	nop
 800ab50:	40012c00 	.word	0x40012c00
 800ab54:	40000400 	.word	0x40000400
 800ab58:	40000800 	.word	0x40000800
 800ab5c:	40000c00 	.word	0x40000c00
 800ab60:	40013400 	.word	0x40013400
 800ab64:	40015000 	.word	0x40015000
 800ab68:	40014000 	.word	0x40014000
 800ab6c:	40014400 	.word	0x40014400
 800ab70:	40014800 	.word	0x40014800

0800ab74 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ab74:	b480      	push	{r7}
 800ab76:	b087      	sub	sp, #28
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]
 800ab7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	6a1b      	ldr	r3, [r3, #32]
 800ab82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	6a1b      	ldr	r3, [r3, #32]
 800ab88:	f023 0201 	bic.w	r2, r3, #1
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	685b      	ldr	r3, [r3, #4]
 800ab94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	699b      	ldr	r3, [r3, #24]
 800ab9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800aba2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aba6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	f023 0303 	bic.w	r3, r3, #3
 800abae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800abb0:	683b      	ldr	r3, [r7, #0]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	68fa      	ldr	r2, [r7, #12]
 800abb6:	4313      	orrs	r3, r2
 800abb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800abba:	697b      	ldr	r3, [r7, #20]
 800abbc:	f023 0302 	bic.w	r3, r3, #2
 800abc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800abc2:	683b      	ldr	r3, [r7, #0]
 800abc4:	689b      	ldr	r3, [r3, #8]
 800abc6:	697a      	ldr	r2, [r7, #20]
 800abc8:	4313      	orrs	r3, r2
 800abca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	4a30      	ldr	r2, [pc, #192]	@ (800ac90 <TIM_OC1_SetConfig+0x11c>)
 800abd0:	4293      	cmp	r3, r2
 800abd2:	d013      	beq.n	800abfc <TIM_OC1_SetConfig+0x88>
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	4a2f      	ldr	r2, [pc, #188]	@ (800ac94 <TIM_OC1_SetConfig+0x120>)
 800abd8:	4293      	cmp	r3, r2
 800abda:	d00f      	beq.n	800abfc <TIM_OC1_SetConfig+0x88>
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	4a2e      	ldr	r2, [pc, #184]	@ (800ac98 <TIM_OC1_SetConfig+0x124>)
 800abe0:	4293      	cmp	r3, r2
 800abe2:	d00b      	beq.n	800abfc <TIM_OC1_SetConfig+0x88>
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	4a2d      	ldr	r2, [pc, #180]	@ (800ac9c <TIM_OC1_SetConfig+0x128>)
 800abe8:	4293      	cmp	r3, r2
 800abea:	d007      	beq.n	800abfc <TIM_OC1_SetConfig+0x88>
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	4a2c      	ldr	r2, [pc, #176]	@ (800aca0 <TIM_OC1_SetConfig+0x12c>)
 800abf0:	4293      	cmp	r3, r2
 800abf2:	d003      	beq.n	800abfc <TIM_OC1_SetConfig+0x88>
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	4a2b      	ldr	r2, [pc, #172]	@ (800aca4 <TIM_OC1_SetConfig+0x130>)
 800abf8:	4293      	cmp	r3, r2
 800abfa:	d10c      	bne.n	800ac16 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800abfc:	697b      	ldr	r3, [r7, #20]
 800abfe:	f023 0308 	bic.w	r3, r3, #8
 800ac02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ac04:	683b      	ldr	r3, [r7, #0]
 800ac06:	68db      	ldr	r3, [r3, #12]
 800ac08:	697a      	ldr	r2, [r7, #20]
 800ac0a:	4313      	orrs	r3, r2
 800ac0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ac0e:	697b      	ldr	r3, [r7, #20]
 800ac10:	f023 0304 	bic.w	r3, r3, #4
 800ac14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	4a1d      	ldr	r2, [pc, #116]	@ (800ac90 <TIM_OC1_SetConfig+0x11c>)
 800ac1a:	4293      	cmp	r3, r2
 800ac1c:	d013      	beq.n	800ac46 <TIM_OC1_SetConfig+0xd2>
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	4a1c      	ldr	r2, [pc, #112]	@ (800ac94 <TIM_OC1_SetConfig+0x120>)
 800ac22:	4293      	cmp	r3, r2
 800ac24:	d00f      	beq.n	800ac46 <TIM_OC1_SetConfig+0xd2>
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	4a1b      	ldr	r2, [pc, #108]	@ (800ac98 <TIM_OC1_SetConfig+0x124>)
 800ac2a:	4293      	cmp	r3, r2
 800ac2c:	d00b      	beq.n	800ac46 <TIM_OC1_SetConfig+0xd2>
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	4a1a      	ldr	r2, [pc, #104]	@ (800ac9c <TIM_OC1_SetConfig+0x128>)
 800ac32:	4293      	cmp	r3, r2
 800ac34:	d007      	beq.n	800ac46 <TIM_OC1_SetConfig+0xd2>
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	4a19      	ldr	r2, [pc, #100]	@ (800aca0 <TIM_OC1_SetConfig+0x12c>)
 800ac3a:	4293      	cmp	r3, r2
 800ac3c:	d003      	beq.n	800ac46 <TIM_OC1_SetConfig+0xd2>
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	4a18      	ldr	r2, [pc, #96]	@ (800aca4 <TIM_OC1_SetConfig+0x130>)
 800ac42:	4293      	cmp	r3, r2
 800ac44:	d111      	bne.n	800ac6a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ac46:	693b      	ldr	r3, [r7, #16]
 800ac48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ac4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ac4e:	693b      	ldr	r3, [r7, #16]
 800ac50:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ac54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ac56:	683b      	ldr	r3, [r7, #0]
 800ac58:	695b      	ldr	r3, [r3, #20]
 800ac5a:	693a      	ldr	r2, [r7, #16]
 800ac5c:	4313      	orrs	r3, r2
 800ac5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ac60:	683b      	ldr	r3, [r7, #0]
 800ac62:	699b      	ldr	r3, [r3, #24]
 800ac64:	693a      	ldr	r2, [r7, #16]
 800ac66:	4313      	orrs	r3, r2
 800ac68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	693a      	ldr	r2, [r7, #16]
 800ac6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	68fa      	ldr	r2, [r7, #12]
 800ac74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ac76:	683b      	ldr	r3, [r7, #0]
 800ac78:	685a      	ldr	r2, [r3, #4]
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	697a      	ldr	r2, [r7, #20]
 800ac82:	621a      	str	r2, [r3, #32]
}
 800ac84:	bf00      	nop
 800ac86:	371c      	adds	r7, #28
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8e:	4770      	bx	lr
 800ac90:	40012c00 	.word	0x40012c00
 800ac94:	40013400 	.word	0x40013400
 800ac98:	40014000 	.word	0x40014000
 800ac9c:	40014400 	.word	0x40014400
 800aca0:	40014800 	.word	0x40014800
 800aca4:	40015000 	.word	0x40015000

0800aca8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800aca8:	b480      	push	{r7}
 800acaa:	b087      	sub	sp, #28
 800acac:	af00      	add	r7, sp, #0
 800acae:	6078      	str	r0, [r7, #4]
 800acb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	6a1b      	ldr	r3, [r3, #32]
 800acb6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	6a1b      	ldr	r3, [r3, #32]
 800acbc:	f023 0210 	bic.w	r2, r3, #16
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	685b      	ldr	r3, [r3, #4]
 800acc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	699b      	ldr	r3, [r3, #24]
 800acce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800acd6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800acda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ace2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ace4:	683b      	ldr	r3, [r7, #0]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	021b      	lsls	r3, r3, #8
 800acea:	68fa      	ldr	r2, [r7, #12]
 800acec:	4313      	orrs	r3, r2
 800acee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800acf0:	697b      	ldr	r3, [r7, #20]
 800acf2:	f023 0320 	bic.w	r3, r3, #32
 800acf6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800acf8:	683b      	ldr	r3, [r7, #0]
 800acfa:	689b      	ldr	r3, [r3, #8]
 800acfc:	011b      	lsls	r3, r3, #4
 800acfe:	697a      	ldr	r2, [r7, #20]
 800ad00:	4313      	orrs	r3, r2
 800ad02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	4a2c      	ldr	r2, [pc, #176]	@ (800adb8 <TIM_OC2_SetConfig+0x110>)
 800ad08:	4293      	cmp	r3, r2
 800ad0a:	d007      	beq.n	800ad1c <TIM_OC2_SetConfig+0x74>
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	4a2b      	ldr	r2, [pc, #172]	@ (800adbc <TIM_OC2_SetConfig+0x114>)
 800ad10:	4293      	cmp	r3, r2
 800ad12:	d003      	beq.n	800ad1c <TIM_OC2_SetConfig+0x74>
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	4a2a      	ldr	r2, [pc, #168]	@ (800adc0 <TIM_OC2_SetConfig+0x118>)
 800ad18:	4293      	cmp	r3, r2
 800ad1a:	d10d      	bne.n	800ad38 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ad1c:	697b      	ldr	r3, [r7, #20]
 800ad1e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ad22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ad24:	683b      	ldr	r3, [r7, #0]
 800ad26:	68db      	ldr	r3, [r3, #12]
 800ad28:	011b      	lsls	r3, r3, #4
 800ad2a:	697a      	ldr	r2, [r7, #20]
 800ad2c:	4313      	orrs	r3, r2
 800ad2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ad30:	697b      	ldr	r3, [r7, #20]
 800ad32:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ad36:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	4a1f      	ldr	r2, [pc, #124]	@ (800adb8 <TIM_OC2_SetConfig+0x110>)
 800ad3c:	4293      	cmp	r3, r2
 800ad3e:	d013      	beq.n	800ad68 <TIM_OC2_SetConfig+0xc0>
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	4a1e      	ldr	r2, [pc, #120]	@ (800adbc <TIM_OC2_SetConfig+0x114>)
 800ad44:	4293      	cmp	r3, r2
 800ad46:	d00f      	beq.n	800ad68 <TIM_OC2_SetConfig+0xc0>
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	4a1e      	ldr	r2, [pc, #120]	@ (800adc4 <TIM_OC2_SetConfig+0x11c>)
 800ad4c:	4293      	cmp	r3, r2
 800ad4e:	d00b      	beq.n	800ad68 <TIM_OC2_SetConfig+0xc0>
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	4a1d      	ldr	r2, [pc, #116]	@ (800adc8 <TIM_OC2_SetConfig+0x120>)
 800ad54:	4293      	cmp	r3, r2
 800ad56:	d007      	beq.n	800ad68 <TIM_OC2_SetConfig+0xc0>
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	4a1c      	ldr	r2, [pc, #112]	@ (800adcc <TIM_OC2_SetConfig+0x124>)
 800ad5c:	4293      	cmp	r3, r2
 800ad5e:	d003      	beq.n	800ad68 <TIM_OC2_SetConfig+0xc0>
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	4a17      	ldr	r2, [pc, #92]	@ (800adc0 <TIM_OC2_SetConfig+0x118>)
 800ad64:	4293      	cmp	r3, r2
 800ad66:	d113      	bne.n	800ad90 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ad68:	693b      	ldr	r3, [r7, #16]
 800ad6a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ad6e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ad70:	693b      	ldr	r3, [r7, #16]
 800ad72:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ad76:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ad78:	683b      	ldr	r3, [r7, #0]
 800ad7a:	695b      	ldr	r3, [r3, #20]
 800ad7c:	009b      	lsls	r3, r3, #2
 800ad7e:	693a      	ldr	r2, [r7, #16]
 800ad80:	4313      	orrs	r3, r2
 800ad82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ad84:	683b      	ldr	r3, [r7, #0]
 800ad86:	699b      	ldr	r3, [r3, #24]
 800ad88:	009b      	lsls	r3, r3, #2
 800ad8a:	693a      	ldr	r2, [r7, #16]
 800ad8c:	4313      	orrs	r3, r2
 800ad8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	693a      	ldr	r2, [r7, #16]
 800ad94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	68fa      	ldr	r2, [r7, #12]
 800ad9a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ad9c:	683b      	ldr	r3, [r7, #0]
 800ad9e:	685a      	ldr	r2, [r3, #4]
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	697a      	ldr	r2, [r7, #20]
 800ada8:	621a      	str	r2, [r3, #32]
}
 800adaa:	bf00      	nop
 800adac:	371c      	adds	r7, #28
 800adae:	46bd      	mov	sp, r7
 800adb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb4:	4770      	bx	lr
 800adb6:	bf00      	nop
 800adb8:	40012c00 	.word	0x40012c00
 800adbc:	40013400 	.word	0x40013400
 800adc0:	40015000 	.word	0x40015000
 800adc4:	40014000 	.word	0x40014000
 800adc8:	40014400 	.word	0x40014400
 800adcc:	40014800 	.word	0x40014800

0800add0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800add0:	b480      	push	{r7}
 800add2:	b087      	sub	sp, #28
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
 800add8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	6a1b      	ldr	r3, [r3, #32]
 800adde:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	6a1b      	ldr	r3, [r3, #32]
 800ade4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	685b      	ldr	r3, [r3, #4]
 800adf0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	69db      	ldr	r3, [r3, #28]
 800adf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800adfe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ae02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	f023 0303 	bic.w	r3, r3, #3
 800ae0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ae0c:	683b      	ldr	r3, [r7, #0]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	68fa      	ldr	r2, [r7, #12]
 800ae12:	4313      	orrs	r3, r2
 800ae14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ae16:	697b      	ldr	r3, [r7, #20]
 800ae18:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ae1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ae1e:	683b      	ldr	r3, [r7, #0]
 800ae20:	689b      	ldr	r3, [r3, #8]
 800ae22:	021b      	lsls	r3, r3, #8
 800ae24:	697a      	ldr	r2, [r7, #20]
 800ae26:	4313      	orrs	r3, r2
 800ae28:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	4a2b      	ldr	r2, [pc, #172]	@ (800aedc <TIM_OC3_SetConfig+0x10c>)
 800ae2e:	4293      	cmp	r3, r2
 800ae30:	d007      	beq.n	800ae42 <TIM_OC3_SetConfig+0x72>
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	4a2a      	ldr	r2, [pc, #168]	@ (800aee0 <TIM_OC3_SetConfig+0x110>)
 800ae36:	4293      	cmp	r3, r2
 800ae38:	d003      	beq.n	800ae42 <TIM_OC3_SetConfig+0x72>
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	4a29      	ldr	r2, [pc, #164]	@ (800aee4 <TIM_OC3_SetConfig+0x114>)
 800ae3e:	4293      	cmp	r3, r2
 800ae40:	d10d      	bne.n	800ae5e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ae42:	697b      	ldr	r3, [r7, #20]
 800ae44:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ae48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ae4a:	683b      	ldr	r3, [r7, #0]
 800ae4c:	68db      	ldr	r3, [r3, #12]
 800ae4e:	021b      	lsls	r3, r3, #8
 800ae50:	697a      	ldr	r2, [r7, #20]
 800ae52:	4313      	orrs	r3, r2
 800ae54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ae56:	697b      	ldr	r3, [r7, #20]
 800ae58:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ae5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	4a1e      	ldr	r2, [pc, #120]	@ (800aedc <TIM_OC3_SetConfig+0x10c>)
 800ae62:	4293      	cmp	r3, r2
 800ae64:	d013      	beq.n	800ae8e <TIM_OC3_SetConfig+0xbe>
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	4a1d      	ldr	r2, [pc, #116]	@ (800aee0 <TIM_OC3_SetConfig+0x110>)
 800ae6a:	4293      	cmp	r3, r2
 800ae6c:	d00f      	beq.n	800ae8e <TIM_OC3_SetConfig+0xbe>
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	4a1d      	ldr	r2, [pc, #116]	@ (800aee8 <TIM_OC3_SetConfig+0x118>)
 800ae72:	4293      	cmp	r3, r2
 800ae74:	d00b      	beq.n	800ae8e <TIM_OC3_SetConfig+0xbe>
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	4a1c      	ldr	r2, [pc, #112]	@ (800aeec <TIM_OC3_SetConfig+0x11c>)
 800ae7a:	4293      	cmp	r3, r2
 800ae7c:	d007      	beq.n	800ae8e <TIM_OC3_SetConfig+0xbe>
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	4a1b      	ldr	r2, [pc, #108]	@ (800aef0 <TIM_OC3_SetConfig+0x120>)
 800ae82:	4293      	cmp	r3, r2
 800ae84:	d003      	beq.n	800ae8e <TIM_OC3_SetConfig+0xbe>
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	4a16      	ldr	r2, [pc, #88]	@ (800aee4 <TIM_OC3_SetConfig+0x114>)
 800ae8a:	4293      	cmp	r3, r2
 800ae8c:	d113      	bne.n	800aeb6 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ae8e:	693b      	ldr	r3, [r7, #16]
 800ae90:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ae94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ae96:	693b      	ldr	r3, [r7, #16]
 800ae98:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ae9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ae9e:	683b      	ldr	r3, [r7, #0]
 800aea0:	695b      	ldr	r3, [r3, #20]
 800aea2:	011b      	lsls	r3, r3, #4
 800aea4:	693a      	ldr	r2, [r7, #16]
 800aea6:	4313      	orrs	r3, r2
 800aea8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800aeaa:	683b      	ldr	r3, [r7, #0]
 800aeac:	699b      	ldr	r3, [r3, #24]
 800aeae:	011b      	lsls	r3, r3, #4
 800aeb0:	693a      	ldr	r2, [r7, #16]
 800aeb2:	4313      	orrs	r3, r2
 800aeb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	693a      	ldr	r2, [r7, #16]
 800aeba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	68fa      	ldr	r2, [r7, #12]
 800aec0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800aec2:	683b      	ldr	r3, [r7, #0]
 800aec4:	685a      	ldr	r2, [r3, #4]
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	697a      	ldr	r2, [r7, #20]
 800aece:	621a      	str	r2, [r3, #32]
}
 800aed0:	bf00      	nop
 800aed2:	371c      	adds	r7, #28
 800aed4:	46bd      	mov	sp, r7
 800aed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeda:	4770      	bx	lr
 800aedc:	40012c00 	.word	0x40012c00
 800aee0:	40013400 	.word	0x40013400
 800aee4:	40015000 	.word	0x40015000
 800aee8:	40014000 	.word	0x40014000
 800aeec:	40014400 	.word	0x40014400
 800aef0:	40014800 	.word	0x40014800

0800aef4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800aef4:	b480      	push	{r7}
 800aef6:	b087      	sub	sp, #28
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	6078      	str	r0, [r7, #4]
 800aefc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	6a1b      	ldr	r3, [r3, #32]
 800af02:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	6a1b      	ldr	r3, [r3, #32]
 800af08:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	685b      	ldr	r3, [r3, #4]
 800af14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	69db      	ldr	r3, [r3, #28]
 800af1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800af22:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800af26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800af2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800af30:	683b      	ldr	r3, [r7, #0]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	021b      	lsls	r3, r3, #8
 800af36:	68fa      	ldr	r2, [r7, #12]
 800af38:	4313      	orrs	r3, r2
 800af3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800af3c:	697b      	ldr	r3, [r7, #20]
 800af3e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800af42:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800af44:	683b      	ldr	r3, [r7, #0]
 800af46:	689b      	ldr	r3, [r3, #8]
 800af48:	031b      	lsls	r3, r3, #12
 800af4a:	697a      	ldr	r2, [r7, #20]
 800af4c:	4313      	orrs	r3, r2
 800af4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	4a2c      	ldr	r2, [pc, #176]	@ (800b004 <TIM_OC4_SetConfig+0x110>)
 800af54:	4293      	cmp	r3, r2
 800af56:	d007      	beq.n	800af68 <TIM_OC4_SetConfig+0x74>
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	4a2b      	ldr	r2, [pc, #172]	@ (800b008 <TIM_OC4_SetConfig+0x114>)
 800af5c:	4293      	cmp	r3, r2
 800af5e:	d003      	beq.n	800af68 <TIM_OC4_SetConfig+0x74>
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	4a2a      	ldr	r2, [pc, #168]	@ (800b00c <TIM_OC4_SetConfig+0x118>)
 800af64:	4293      	cmp	r3, r2
 800af66:	d10d      	bne.n	800af84 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800af68:	697b      	ldr	r3, [r7, #20]
 800af6a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800af6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800af70:	683b      	ldr	r3, [r7, #0]
 800af72:	68db      	ldr	r3, [r3, #12]
 800af74:	031b      	lsls	r3, r3, #12
 800af76:	697a      	ldr	r2, [r7, #20]
 800af78:	4313      	orrs	r3, r2
 800af7a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800af7c:	697b      	ldr	r3, [r7, #20]
 800af7e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800af82:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	4a1f      	ldr	r2, [pc, #124]	@ (800b004 <TIM_OC4_SetConfig+0x110>)
 800af88:	4293      	cmp	r3, r2
 800af8a:	d013      	beq.n	800afb4 <TIM_OC4_SetConfig+0xc0>
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	4a1e      	ldr	r2, [pc, #120]	@ (800b008 <TIM_OC4_SetConfig+0x114>)
 800af90:	4293      	cmp	r3, r2
 800af92:	d00f      	beq.n	800afb4 <TIM_OC4_SetConfig+0xc0>
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	4a1e      	ldr	r2, [pc, #120]	@ (800b010 <TIM_OC4_SetConfig+0x11c>)
 800af98:	4293      	cmp	r3, r2
 800af9a:	d00b      	beq.n	800afb4 <TIM_OC4_SetConfig+0xc0>
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	4a1d      	ldr	r2, [pc, #116]	@ (800b014 <TIM_OC4_SetConfig+0x120>)
 800afa0:	4293      	cmp	r3, r2
 800afa2:	d007      	beq.n	800afb4 <TIM_OC4_SetConfig+0xc0>
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	4a1c      	ldr	r2, [pc, #112]	@ (800b018 <TIM_OC4_SetConfig+0x124>)
 800afa8:	4293      	cmp	r3, r2
 800afaa:	d003      	beq.n	800afb4 <TIM_OC4_SetConfig+0xc0>
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	4a17      	ldr	r2, [pc, #92]	@ (800b00c <TIM_OC4_SetConfig+0x118>)
 800afb0:	4293      	cmp	r3, r2
 800afb2:	d113      	bne.n	800afdc <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800afb4:	693b      	ldr	r3, [r7, #16]
 800afb6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800afba:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800afbc:	693b      	ldr	r3, [r7, #16]
 800afbe:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800afc2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800afc4:	683b      	ldr	r3, [r7, #0]
 800afc6:	695b      	ldr	r3, [r3, #20]
 800afc8:	019b      	lsls	r3, r3, #6
 800afca:	693a      	ldr	r2, [r7, #16]
 800afcc:	4313      	orrs	r3, r2
 800afce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800afd0:	683b      	ldr	r3, [r7, #0]
 800afd2:	699b      	ldr	r3, [r3, #24]
 800afd4:	019b      	lsls	r3, r3, #6
 800afd6:	693a      	ldr	r2, [r7, #16]
 800afd8:	4313      	orrs	r3, r2
 800afda:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	693a      	ldr	r2, [r7, #16]
 800afe0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	68fa      	ldr	r2, [r7, #12]
 800afe6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800afe8:	683b      	ldr	r3, [r7, #0]
 800afea:	685a      	ldr	r2, [r3, #4]
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	697a      	ldr	r2, [r7, #20]
 800aff4:	621a      	str	r2, [r3, #32]
}
 800aff6:	bf00      	nop
 800aff8:	371c      	adds	r7, #28
 800affa:	46bd      	mov	sp, r7
 800affc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b000:	4770      	bx	lr
 800b002:	bf00      	nop
 800b004:	40012c00 	.word	0x40012c00
 800b008:	40013400 	.word	0x40013400
 800b00c:	40015000 	.word	0x40015000
 800b010:	40014000 	.word	0x40014000
 800b014:	40014400 	.word	0x40014400
 800b018:	40014800 	.word	0x40014800

0800b01c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b01c:	b480      	push	{r7}
 800b01e:	b087      	sub	sp, #28
 800b020:	af00      	add	r7, sp, #0
 800b022:	6078      	str	r0, [r7, #4]
 800b024:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	6a1b      	ldr	r3, [r3, #32]
 800b02a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	6a1b      	ldr	r3, [r3, #32]
 800b030:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	685b      	ldr	r3, [r3, #4]
 800b03c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b04a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b04e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b050:	683b      	ldr	r3, [r7, #0]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	68fa      	ldr	r2, [r7, #12]
 800b056:	4313      	orrs	r3, r2
 800b058:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b05a:	693b      	ldr	r3, [r7, #16]
 800b05c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800b060:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b062:	683b      	ldr	r3, [r7, #0]
 800b064:	689b      	ldr	r3, [r3, #8]
 800b066:	041b      	lsls	r3, r3, #16
 800b068:	693a      	ldr	r2, [r7, #16]
 800b06a:	4313      	orrs	r3, r2
 800b06c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	4a19      	ldr	r2, [pc, #100]	@ (800b0d8 <TIM_OC5_SetConfig+0xbc>)
 800b072:	4293      	cmp	r3, r2
 800b074:	d013      	beq.n	800b09e <TIM_OC5_SetConfig+0x82>
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	4a18      	ldr	r2, [pc, #96]	@ (800b0dc <TIM_OC5_SetConfig+0xc0>)
 800b07a:	4293      	cmp	r3, r2
 800b07c:	d00f      	beq.n	800b09e <TIM_OC5_SetConfig+0x82>
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	4a17      	ldr	r2, [pc, #92]	@ (800b0e0 <TIM_OC5_SetConfig+0xc4>)
 800b082:	4293      	cmp	r3, r2
 800b084:	d00b      	beq.n	800b09e <TIM_OC5_SetConfig+0x82>
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	4a16      	ldr	r2, [pc, #88]	@ (800b0e4 <TIM_OC5_SetConfig+0xc8>)
 800b08a:	4293      	cmp	r3, r2
 800b08c:	d007      	beq.n	800b09e <TIM_OC5_SetConfig+0x82>
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	4a15      	ldr	r2, [pc, #84]	@ (800b0e8 <TIM_OC5_SetConfig+0xcc>)
 800b092:	4293      	cmp	r3, r2
 800b094:	d003      	beq.n	800b09e <TIM_OC5_SetConfig+0x82>
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	4a14      	ldr	r2, [pc, #80]	@ (800b0ec <TIM_OC5_SetConfig+0xd0>)
 800b09a:	4293      	cmp	r3, r2
 800b09c:	d109      	bne.n	800b0b2 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b09e:	697b      	ldr	r3, [r7, #20]
 800b0a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b0a4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b0a6:	683b      	ldr	r3, [r7, #0]
 800b0a8:	695b      	ldr	r3, [r3, #20]
 800b0aa:	021b      	lsls	r3, r3, #8
 800b0ac:	697a      	ldr	r2, [r7, #20]
 800b0ae:	4313      	orrs	r3, r2
 800b0b0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	697a      	ldr	r2, [r7, #20]
 800b0b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	68fa      	ldr	r2, [r7, #12]
 800b0bc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b0be:	683b      	ldr	r3, [r7, #0]
 800b0c0:	685a      	ldr	r2, [r3, #4]
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	693a      	ldr	r2, [r7, #16]
 800b0ca:	621a      	str	r2, [r3, #32]
}
 800b0cc:	bf00      	nop
 800b0ce:	371c      	adds	r7, #28
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d6:	4770      	bx	lr
 800b0d8:	40012c00 	.word	0x40012c00
 800b0dc:	40013400 	.word	0x40013400
 800b0e0:	40014000 	.word	0x40014000
 800b0e4:	40014400 	.word	0x40014400
 800b0e8:	40014800 	.word	0x40014800
 800b0ec:	40015000 	.word	0x40015000

0800b0f0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b0f0:	b480      	push	{r7}
 800b0f2:	b087      	sub	sp, #28
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	6078      	str	r0, [r7, #4]
 800b0f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	6a1b      	ldr	r3, [r3, #32]
 800b0fe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	6a1b      	ldr	r3, [r3, #32]
 800b104:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	685b      	ldr	r3, [r3, #4]
 800b110:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b11e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b122:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b124:	683b      	ldr	r3, [r7, #0]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	021b      	lsls	r3, r3, #8
 800b12a:	68fa      	ldr	r2, [r7, #12]
 800b12c:	4313      	orrs	r3, r2
 800b12e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b130:	693b      	ldr	r3, [r7, #16]
 800b132:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b136:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b138:	683b      	ldr	r3, [r7, #0]
 800b13a:	689b      	ldr	r3, [r3, #8]
 800b13c:	051b      	lsls	r3, r3, #20
 800b13e:	693a      	ldr	r2, [r7, #16]
 800b140:	4313      	orrs	r3, r2
 800b142:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	4a1a      	ldr	r2, [pc, #104]	@ (800b1b0 <TIM_OC6_SetConfig+0xc0>)
 800b148:	4293      	cmp	r3, r2
 800b14a:	d013      	beq.n	800b174 <TIM_OC6_SetConfig+0x84>
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	4a19      	ldr	r2, [pc, #100]	@ (800b1b4 <TIM_OC6_SetConfig+0xc4>)
 800b150:	4293      	cmp	r3, r2
 800b152:	d00f      	beq.n	800b174 <TIM_OC6_SetConfig+0x84>
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	4a18      	ldr	r2, [pc, #96]	@ (800b1b8 <TIM_OC6_SetConfig+0xc8>)
 800b158:	4293      	cmp	r3, r2
 800b15a:	d00b      	beq.n	800b174 <TIM_OC6_SetConfig+0x84>
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	4a17      	ldr	r2, [pc, #92]	@ (800b1bc <TIM_OC6_SetConfig+0xcc>)
 800b160:	4293      	cmp	r3, r2
 800b162:	d007      	beq.n	800b174 <TIM_OC6_SetConfig+0x84>
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	4a16      	ldr	r2, [pc, #88]	@ (800b1c0 <TIM_OC6_SetConfig+0xd0>)
 800b168:	4293      	cmp	r3, r2
 800b16a:	d003      	beq.n	800b174 <TIM_OC6_SetConfig+0x84>
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	4a15      	ldr	r2, [pc, #84]	@ (800b1c4 <TIM_OC6_SetConfig+0xd4>)
 800b170:	4293      	cmp	r3, r2
 800b172:	d109      	bne.n	800b188 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b174:	697b      	ldr	r3, [r7, #20]
 800b176:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b17a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b17c:	683b      	ldr	r3, [r7, #0]
 800b17e:	695b      	ldr	r3, [r3, #20]
 800b180:	029b      	lsls	r3, r3, #10
 800b182:	697a      	ldr	r2, [r7, #20]
 800b184:	4313      	orrs	r3, r2
 800b186:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	697a      	ldr	r2, [r7, #20]
 800b18c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	68fa      	ldr	r2, [r7, #12]
 800b192:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b194:	683b      	ldr	r3, [r7, #0]
 800b196:	685a      	ldr	r2, [r3, #4]
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	693a      	ldr	r2, [r7, #16]
 800b1a0:	621a      	str	r2, [r3, #32]
}
 800b1a2:	bf00      	nop
 800b1a4:	371c      	adds	r7, #28
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ac:	4770      	bx	lr
 800b1ae:	bf00      	nop
 800b1b0:	40012c00 	.word	0x40012c00
 800b1b4:	40013400 	.word	0x40013400
 800b1b8:	40014000 	.word	0x40014000
 800b1bc:	40014400 	.word	0x40014400
 800b1c0:	40014800 	.word	0x40014800
 800b1c4:	40015000 	.word	0x40015000

0800b1c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b1c8:	b480      	push	{r7}
 800b1ca:	b087      	sub	sp, #28
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	60f8      	str	r0, [r7, #12]
 800b1d0:	60b9      	str	r1, [r7, #8]
 800b1d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	6a1b      	ldr	r3, [r3, #32]
 800b1d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	6a1b      	ldr	r3, [r3, #32]
 800b1de:	f023 0201 	bic.w	r2, r3, #1
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	699b      	ldr	r3, [r3, #24]
 800b1ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b1ec:	693b      	ldr	r3, [r7, #16]
 800b1ee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b1f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	011b      	lsls	r3, r3, #4
 800b1f8:	693a      	ldr	r2, [r7, #16]
 800b1fa:	4313      	orrs	r3, r2
 800b1fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b1fe:	697b      	ldr	r3, [r7, #20]
 800b200:	f023 030a 	bic.w	r3, r3, #10
 800b204:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b206:	697a      	ldr	r2, [r7, #20]
 800b208:	68bb      	ldr	r3, [r7, #8]
 800b20a:	4313      	orrs	r3, r2
 800b20c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	693a      	ldr	r2, [r7, #16]
 800b212:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	697a      	ldr	r2, [r7, #20]
 800b218:	621a      	str	r2, [r3, #32]
}
 800b21a:	bf00      	nop
 800b21c:	371c      	adds	r7, #28
 800b21e:	46bd      	mov	sp, r7
 800b220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b224:	4770      	bx	lr

0800b226 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b226:	b480      	push	{r7}
 800b228:	b087      	sub	sp, #28
 800b22a:	af00      	add	r7, sp, #0
 800b22c:	60f8      	str	r0, [r7, #12]
 800b22e:	60b9      	str	r1, [r7, #8]
 800b230:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	6a1b      	ldr	r3, [r3, #32]
 800b236:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	6a1b      	ldr	r3, [r3, #32]
 800b23c:	f023 0210 	bic.w	r2, r3, #16
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	699b      	ldr	r3, [r3, #24]
 800b248:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b24a:	693b      	ldr	r3, [r7, #16]
 800b24c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b250:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	031b      	lsls	r3, r3, #12
 800b256:	693a      	ldr	r2, [r7, #16]
 800b258:	4313      	orrs	r3, r2
 800b25a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b25c:	697b      	ldr	r3, [r7, #20]
 800b25e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b262:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b264:	68bb      	ldr	r3, [r7, #8]
 800b266:	011b      	lsls	r3, r3, #4
 800b268:	697a      	ldr	r2, [r7, #20]
 800b26a:	4313      	orrs	r3, r2
 800b26c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	693a      	ldr	r2, [r7, #16]
 800b272:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	697a      	ldr	r2, [r7, #20]
 800b278:	621a      	str	r2, [r3, #32]
}
 800b27a:	bf00      	nop
 800b27c:	371c      	adds	r7, #28
 800b27e:	46bd      	mov	sp, r7
 800b280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b284:	4770      	bx	lr

0800b286 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b286:	b480      	push	{r7}
 800b288:	b085      	sub	sp, #20
 800b28a:	af00      	add	r7, sp, #0
 800b28c:	6078      	str	r0, [r7, #4]
 800b28e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	689b      	ldr	r3, [r3, #8]
 800b294:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800b29c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b2a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b2a2:	683a      	ldr	r2, [r7, #0]
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	4313      	orrs	r3, r2
 800b2a8:	f043 0307 	orr.w	r3, r3, #7
 800b2ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	68fa      	ldr	r2, [r7, #12]
 800b2b2:	609a      	str	r2, [r3, #8]
}
 800b2b4:	bf00      	nop
 800b2b6:	3714      	adds	r7, #20
 800b2b8:	46bd      	mov	sp, r7
 800b2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2be:	4770      	bx	lr

0800b2c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b2c0:	b480      	push	{r7}
 800b2c2:	b087      	sub	sp, #28
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	60f8      	str	r0, [r7, #12]
 800b2c8:	60b9      	str	r1, [r7, #8]
 800b2ca:	607a      	str	r2, [r7, #4]
 800b2cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	689b      	ldr	r3, [r3, #8]
 800b2d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b2d4:	697b      	ldr	r3, [r7, #20]
 800b2d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b2da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b2dc:	683b      	ldr	r3, [r7, #0]
 800b2de:	021a      	lsls	r2, r3, #8
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	431a      	orrs	r2, r3
 800b2e4:	68bb      	ldr	r3, [r7, #8]
 800b2e6:	4313      	orrs	r3, r2
 800b2e8:	697a      	ldr	r2, [r7, #20]
 800b2ea:	4313      	orrs	r3, r2
 800b2ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	697a      	ldr	r2, [r7, #20]
 800b2f2:	609a      	str	r2, [r3, #8]
}
 800b2f4:	bf00      	nop
 800b2f6:	371c      	adds	r7, #28
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fe:	4770      	bx	lr

0800b300 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b300:	b480      	push	{r7}
 800b302:	b087      	sub	sp, #28
 800b304:	af00      	add	r7, sp, #0
 800b306:	60f8      	str	r0, [r7, #12]
 800b308:	60b9      	str	r1, [r7, #8]
 800b30a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b30c:	68bb      	ldr	r3, [r7, #8]
 800b30e:	f003 031f 	and.w	r3, r3, #31
 800b312:	2201      	movs	r2, #1
 800b314:	fa02 f303 	lsl.w	r3, r2, r3
 800b318:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	6a1a      	ldr	r2, [r3, #32]
 800b31e:	697b      	ldr	r3, [r7, #20]
 800b320:	43db      	mvns	r3, r3
 800b322:	401a      	ands	r2, r3
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	6a1a      	ldr	r2, [r3, #32]
 800b32c:	68bb      	ldr	r3, [r7, #8]
 800b32e:	f003 031f 	and.w	r3, r3, #31
 800b332:	6879      	ldr	r1, [r7, #4]
 800b334:	fa01 f303 	lsl.w	r3, r1, r3
 800b338:	431a      	orrs	r2, r3
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	621a      	str	r2, [r3, #32]
}
 800b33e:	bf00      	nop
 800b340:	371c      	adds	r7, #28
 800b342:	46bd      	mov	sp, r7
 800b344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b348:	4770      	bx	lr
	...

0800b34c <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800b34c:	b480      	push	{r7}
 800b34e:	b083      	sub	sp, #12
 800b350:	af00      	add	r7, sp, #0
 800b352:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	4a26      	ldr	r2, [pc, #152]	@ (800b3f0 <TIM_ResetCallback+0xa4>)
 800b358:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	4a25      	ldr	r2, [pc, #148]	@ (800b3f4 <TIM_ResetCallback+0xa8>)
 800b360:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	4a24      	ldr	r2, [pc, #144]	@ (800b3f8 <TIM_ResetCallback+0xac>)
 800b368:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	4a23      	ldr	r2, [pc, #140]	@ (800b3fc <TIM_ResetCallback+0xb0>)
 800b370:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	4a22      	ldr	r2, [pc, #136]	@ (800b400 <TIM_ResetCallback+0xb4>)
 800b378:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	4a21      	ldr	r2, [pc, #132]	@ (800b404 <TIM_ResetCallback+0xb8>)
 800b380:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	4a20      	ldr	r2, [pc, #128]	@ (800b408 <TIM_ResetCallback+0xbc>)
 800b388:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	4a1f      	ldr	r2, [pc, #124]	@ (800b40c <TIM_ResetCallback+0xc0>)
 800b390:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	4a1e      	ldr	r2, [pc, #120]	@ (800b410 <TIM_ResetCallback+0xc4>)
 800b398:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	4a1d      	ldr	r2, [pc, #116]	@ (800b414 <TIM_ResetCallback+0xc8>)
 800b3a0:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	4a1c      	ldr	r2, [pc, #112]	@ (800b418 <TIM_ResetCallback+0xcc>)
 800b3a8:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	4a1b      	ldr	r2, [pc, #108]	@ (800b41c <TIM_ResetCallback+0xd0>)
 800b3b0:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	4a1a      	ldr	r2, [pc, #104]	@ (800b420 <TIM_ResetCallback+0xd4>)
 800b3b8:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	4a19      	ldr	r2, [pc, #100]	@ (800b424 <TIM_ResetCallback+0xd8>)
 800b3c0:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	4a18      	ldr	r2, [pc, #96]	@ (800b428 <TIM_ResetCallback+0xdc>)
 800b3c8:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	4a17      	ldr	r2, [pc, #92]	@ (800b42c <TIM_ResetCallback+0xe0>)
 800b3d0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	4a16      	ldr	r2, [pc, #88]	@ (800b430 <TIM_ResetCallback+0xe4>)
 800b3d8:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	4a15      	ldr	r2, [pc, #84]	@ (800b434 <TIM_ResetCallback+0xe8>)
 800b3e0:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 800b3e4:	bf00      	nop
 800b3e6:	370c      	adds	r7, #12
 800b3e8:	46bd      	mov	sp, r7
 800b3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ee:	4770      	bx	lr
 800b3f0:	08004481 	.word	0x08004481
 800b3f4:	0800a699 	.word	0x0800a699
 800b3f8:	0800a711 	.word	0x0800a711
 800b3fc:	0800a725 	.word	0x0800a725
 800b400:	0800a6c1 	.word	0x0800a6c1
 800b404:	0800a6d5 	.word	0x0800a6d5
 800b408:	0800a6ad 	.word	0x0800a6ad
 800b40c:	0800a6e9 	.word	0x0800a6e9
 800b410:	0800a6fd 	.word	0x0800a6fd
 800b414:	0800a739 	.word	0x0800a739
 800b418:	0800b68d 	.word	0x0800b68d
 800b41c:	0800b6a1 	.word	0x0800b6a1
 800b420:	0800b6b5 	.word	0x0800b6b5
 800b424:	0800b6c9 	.word	0x0800b6c9
 800b428:	0800b6dd 	.word	0x0800b6dd
 800b42c:	0800b6f1 	.word	0x0800b6f1
 800b430:	0800b705 	.word	0x0800b705
 800b434:	0800b719 	.word	0x0800b719

0800b438 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b438:	b480      	push	{r7}
 800b43a:	b085      	sub	sp, #20
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	6078      	str	r0, [r7, #4]
 800b440:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b448:	2b01      	cmp	r3, #1
 800b44a:	d101      	bne.n	800b450 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b44c:	2302      	movs	r3, #2
 800b44e:	e074      	b.n	800b53a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	2201      	movs	r2, #1
 800b454:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	2202      	movs	r2, #2
 800b45c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	685b      	ldr	r3, [r3, #4]
 800b466:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	689b      	ldr	r3, [r3, #8]
 800b46e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	4a34      	ldr	r2, [pc, #208]	@ (800b548 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b476:	4293      	cmp	r3, r2
 800b478:	d009      	beq.n	800b48e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	4a33      	ldr	r2, [pc, #204]	@ (800b54c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b480:	4293      	cmp	r3, r2
 800b482:	d004      	beq.n	800b48e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	4a31      	ldr	r2, [pc, #196]	@ (800b550 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b48a:	4293      	cmp	r3, r2
 800b48c:	d108      	bne.n	800b4a0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800b494:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b496:	683b      	ldr	r3, [r7, #0]
 800b498:	685b      	ldr	r3, [r3, #4]
 800b49a:	68fa      	ldr	r2, [r7, #12]
 800b49c:	4313      	orrs	r3, r2
 800b49e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800b4a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b4aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b4ac:	683b      	ldr	r3, [r7, #0]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	68fa      	ldr	r2, [r7, #12]
 800b4b2:	4313      	orrs	r3, r2
 800b4b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	68fa      	ldr	r2, [r7, #12]
 800b4bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	4a21      	ldr	r2, [pc, #132]	@ (800b548 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b4c4:	4293      	cmp	r3, r2
 800b4c6:	d022      	beq.n	800b50e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b4d0:	d01d      	beq.n	800b50e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	4a1f      	ldr	r2, [pc, #124]	@ (800b554 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800b4d8:	4293      	cmp	r3, r2
 800b4da:	d018      	beq.n	800b50e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	4a1d      	ldr	r2, [pc, #116]	@ (800b558 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800b4e2:	4293      	cmp	r3, r2
 800b4e4:	d013      	beq.n	800b50e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	4a1c      	ldr	r2, [pc, #112]	@ (800b55c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800b4ec:	4293      	cmp	r3, r2
 800b4ee:	d00e      	beq.n	800b50e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	4a15      	ldr	r2, [pc, #84]	@ (800b54c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b4f6:	4293      	cmp	r3, r2
 800b4f8:	d009      	beq.n	800b50e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	4a18      	ldr	r2, [pc, #96]	@ (800b560 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800b500:	4293      	cmp	r3, r2
 800b502:	d004      	beq.n	800b50e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	4a11      	ldr	r2, [pc, #68]	@ (800b550 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b50a:	4293      	cmp	r3, r2
 800b50c:	d10c      	bne.n	800b528 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b50e:	68bb      	ldr	r3, [r7, #8]
 800b510:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b514:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b516:	683b      	ldr	r3, [r7, #0]
 800b518:	689b      	ldr	r3, [r3, #8]
 800b51a:	68ba      	ldr	r2, [r7, #8]
 800b51c:	4313      	orrs	r3, r2
 800b51e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	68ba      	ldr	r2, [r7, #8]
 800b526:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	2201      	movs	r2, #1
 800b52c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	2200      	movs	r2, #0
 800b534:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b538:	2300      	movs	r3, #0
}
 800b53a:	4618      	mov	r0, r3
 800b53c:	3714      	adds	r7, #20
 800b53e:	46bd      	mov	sp, r7
 800b540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b544:	4770      	bx	lr
 800b546:	bf00      	nop
 800b548:	40012c00 	.word	0x40012c00
 800b54c:	40013400 	.word	0x40013400
 800b550:	40015000 	.word	0x40015000
 800b554:	40000400 	.word	0x40000400
 800b558:	40000800 	.word	0x40000800
 800b55c:	40000c00 	.word	0x40000c00
 800b560:	40014000 	.word	0x40014000

0800b564 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b564:	b480      	push	{r7}
 800b566:	b085      	sub	sp, #20
 800b568:	af00      	add	r7, sp, #0
 800b56a:	6078      	str	r0, [r7, #4]
 800b56c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b56e:	2300      	movs	r3, #0
 800b570:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b578:	2b01      	cmp	r3, #1
 800b57a:	d101      	bne.n	800b580 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b57c:	2302      	movs	r3, #2
 800b57e:	e078      	b.n	800b672 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	2201      	movs	r2, #1
 800b584:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800b58e:	683b      	ldr	r3, [r7, #0]
 800b590:	68db      	ldr	r3, [r3, #12]
 800b592:	4313      	orrs	r3, r2
 800b594:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b59c:	683b      	ldr	r3, [r7, #0]
 800b59e:	689b      	ldr	r3, [r3, #8]
 800b5a0:	4313      	orrs	r3, r2
 800b5a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800b5aa:	683b      	ldr	r3, [r7, #0]
 800b5ac:	685b      	ldr	r3, [r3, #4]
 800b5ae:	4313      	orrs	r3, r2
 800b5b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800b5b8:	683b      	ldr	r3, [r7, #0]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	4313      	orrs	r3, r2
 800b5be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b5c6:	683b      	ldr	r3, [r7, #0]
 800b5c8:	691b      	ldr	r3, [r3, #16]
 800b5ca:	4313      	orrs	r3, r2
 800b5cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800b5d4:	683b      	ldr	r3, [r7, #0]
 800b5d6:	695b      	ldr	r3, [r3, #20]
 800b5d8:	4313      	orrs	r3, r2
 800b5da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800b5e2:	683b      	ldr	r3, [r7, #0]
 800b5e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b5e6:	4313      	orrs	r3, r2
 800b5e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800b5f0:	683b      	ldr	r3, [r7, #0]
 800b5f2:	699b      	ldr	r3, [r3, #24]
 800b5f4:	041b      	lsls	r3, r3, #16
 800b5f6:	4313      	orrs	r3, r2
 800b5f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800b600:	683b      	ldr	r3, [r7, #0]
 800b602:	69db      	ldr	r3, [r3, #28]
 800b604:	4313      	orrs	r3, r2
 800b606:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	4a1c      	ldr	r2, [pc, #112]	@ (800b680 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800b60e:	4293      	cmp	r3, r2
 800b610:	d009      	beq.n	800b626 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	4a1b      	ldr	r2, [pc, #108]	@ (800b684 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800b618:	4293      	cmp	r3, r2
 800b61a:	d004      	beq.n	800b626 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	4a19      	ldr	r2, [pc, #100]	@ (800b688 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800b622:	4293      	cmp	r3, r2
 800b624:	d11c      	bne.n	800b660 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800b62c:	683b      	ldr	r3, [r7, #0]
 800b62e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b630:	051b      	lsls	r3, r3, #20
 800b632:	4313      	orrs	r3, r2
 800b634:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800b63c:	683b      	ldr	r3, [r7, #0]
 800b63e:	6a1b      	ldr	r3, [r3, #32]
 800b640:	4313      	orrs	r3, r2
 800b642:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800b64a:	683b      	ldr	r3, [r7, #0]
 800b64c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b64e:	4313      	orrs	r3, r2
 800b650:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800b658:	683b      	ldr	r3, [r7, #0]
 800b65a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b65c:	4313      	orrs	r3, r2
 800b65e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	68fa      	ldr	r2, [r7, #12]
 800b666:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	2200      	movs	r2, #0
 800b66c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b670:	2300      	movs	r3, #0
}
 800b672:	4618      	mov	r0, r3
 800b674:	3714      	adds	r7, #20
 800b676:	46bd      	mov	sp, r7
 800b678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b67c:	4770      	bx	lr
 800b67e:	bf00      	nop
 800b680:	40012c00 	.word	0x40012c00
 800b684:	40013400 	.word	0x40013400
 800b688:	40015000 	.word	0x40015000

0800b68c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b68c:	b480      	push	{r7}
 800b68e:	b083      	sub	sp, #12
 800b690:	af00      	add	r7, sp, #0
 800b692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b694:	bf00      	nop
 800b696:	370c      	adds	r7, #12
 800b698:	46bd      	mov	sp, r7
 800b69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b69e:	4770      	bx	lr

0800b6a0 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800b6a0:	b480      	push	{r7}
 800b6a2:	b083      	sub	sp, #12
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800b6a8:	bf00      	nop
 800b6aa:	370c      	adds	r7, #12
 800b6ac:	46bd      	mov	sp, r7
 800b6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b2:	4770      	bx	lr

0800b6b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b6b4:	b480      	push	{r7}
 800b6b6:	b083      	sub	sp, #12
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b6bc:	bf00      	nop
 800b6be:	370c      	adds	r7, #12
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c6:	4770      	bx	lr

0800b6c8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b6c8:	b480      	push	{r7}
 800b6ca:	b083      	sub	sp, #12
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b6d0:	bf00      	nop
 800b6d2:	370c      	adds	r7, #12
 800b6d4:	46bd      	mov	sp, r7
 800b6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6da:	4770      	bx	lr

0800b6dc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800b6dc:	b480      	push	{r7}
 800b6de:	b083      	sub	sp, #12
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800b6e4:	bf00      	nop
 800b6e6:	370c      	adds	r7, #12
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ee:	4770      	bx	lr

0800b6f0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800b6f0:	b480      	push	{r7}
 800b6f2:	b083      	sub	sp, #12
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800b6f8:	bf00      	nop
 800b6fa:	370c      	adds	r7, #12
 800b6fc:	46bd      	mov	sp, r7
 800b6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b702:	4770      	bx	lr

0800b704 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800b704:	b480      	push	{r7}
 800b706:	b083      	sub	sp, #12
 800b708:	af00      	add	r7, sp, #0
 800b70a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800b70c:	bf00      	nop
 800b70e:	370c      	adds	r7, #12
 800b710:	46bd      	mov	sp, r7
 800b712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b716:	4770      	bx	lr

0800b718 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800b718:	b480      	push	{r7}
 800b71a:	b083      	sub	sp, #12
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800b720:	bf00      	nop
 800b722:	370c      	adds	r7, #12
 800b724:	46bd      	mov	sp, r7
 800b726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b72a:	4770      	bx	lr

0800b72c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b72c:	b580      	push	{r7, lr}
 800b72e:	b082      	sub	sp, #8
 800b730:	af00      	add	r7, sp, #0
 800b732:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	2b00      	cmp	r3, #0
 800b738:	d101      	bne.n	800b73e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b73a:	2301      	movs	r3, #1
 800b73c:	e050      	b.n	800b7e0 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b744:	2b00      	cmp	r3, #0
 800b746:	d114      	bne.n	800b772 <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	2200      	movs	r2, #0
 800b74c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800b750:	6878      	ldr	r0, [r7, #4]
 800b752:	f000 fd5b 	bl	800c20c <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d103      	bne.n	800b768 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	4a21      	ldr	r2, [pc, #132]	@ (800b7e8 <HAL_UART_Init+0xbc>)
 800b764:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800b76e:	6878      	ldr	r0, [r7, #4]
 800b770:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	2224      	movs	r2, #36	@ 0x24
 800b776:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	681a      	ldr	r2, [r3, #0]
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	f022 0201 	bic.w	r2, r2, #1
 800b788:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d002      	beq.n	800b798 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 800b792:	6878      	ldr	r0, [r7, #4]
 800b794:	f001 f888 	bl	800c8a8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b798:	6878      	ldr	r0, [r7, #4]
 800b79a:	f000 fd89 	bl	800c2b0 <UART_SetConfig>
 800b79e:	4603      	mov	r3, r0
 800b7a0:	2b01      	cmp	r3, #1
 800b7a2:	d101      	bne.n	800b7a8 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 800b7a4:	2301      	movs	r3, #1
 800b7a6:	e01b      	b.n	800b7e0 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	685a      	ldr	r2, [r3, #4]
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b7b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	689a      	ldr	r2, [r3, #8]
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b7c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	681a      	ldr	r2, [r3, #0]
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	f042 0201 	orr.w	r2, r2, #1
 800b7d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b7d8:	6878      	ldr	r0, [r7, #4]
 800b7da:	f001 f907 	bl	800c9ec <UART_CheckIdleState>
 800b7de:	4603      	mov	r3, r0
}
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	3708      	adds	r7, #8
 800b7e4:	46bd      	mov	sp, r7
 800b7e6:	bd80      	pop	{r7, pc}
 800b7e8:	08005c01 	.word	0x08005c01

0800b7ec <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 800b7ec:	b480      	push	{r7}
 800b7ee:	b087      	sub	sp, #28
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	60f8      	str	r0, [r7, #12]
 800b7f4:	460b      	mov	r3, r1
 800b7f6:	607a      	str	r2, [r7, #4]
 800b7f8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800b7fa:	2300      	movs	r3, #0
 800b7fc:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	2b00      	cmp	r3, #0
 800b802:	d109      	bne.n	800b818 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b80a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 800b814:	2301      	movs	r3, #1
 800b816:	e09c      	b.n	800b952 <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b81e:	2b20      	cmp	r3, #32
 800b820:	d16c      	bne.n	800b8fc <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 800b822:	7afb      	ldrb	r3, [r7, #11]
 800b824:	2b0c      	cmp	r3, #12
 800b826:	d85e      	bhi.n	800b8e6 <HAL_UART_RegisterCallback+0xfa>
 800b828:	a201      	add	r2, pc, #4	@ (adr r2, 800b830 <HAL_UART_RegisterCallback+0x44>)
 800b82a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b82e:	bf00      	nop
 800b830:	0800b865 	.word	0x0800b865
 800b834:	0800b86f 	.word	0x0800b86f
 800b838:	0800b879 	.word	0x0800b879
 800b83c:	0800b883 	.word	0x0800b883
 800b840:	0800b88d 	.word	0x0800b88d
 800b844:	0800b897 	.word	0x0800b897
 800b848:	0800b8a1 	.word	0x0800b8a1
 800b84c:	0800b8ab 	.word	0x0800b8ab
 800b850:	0800b8b5 	.word	0x0800b8b5
 800b854:	0800b8bf 	.word	0x0800b8bf
 800b858:	0800b8c9 	.word	0x0800b8c9
 800b85c:	0800b8d3 	.word	0x0800b8d3
 800b860:	0800b8dd 	.word	0x0800b8dd
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	687a      	ldr	r2, [r7, #4]
 800b868:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800b86c:	e070      	b.n	800b950 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	687a      	ldr	r2, [r7, #4]
 800b872:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800b876:	e06b      	b.n	800b950 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	687a      	ldr	r2, [r7, #4]
 800b87c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800b880:	e066      	b.n	800b950 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	687a      	ldr	r2, [r7, #4]
 800b886:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800b88a:	e061      	b.n	800b950 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	687a      	ldr	r2, [r7, #4]
 800b890:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800b894:	e05c      	b.n	800b950 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	687a      	ldr	r2, [r7, #4]
 800b89a:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800b89e:	e057      	b.n	800b950 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	687a      	ldr	r2, [r7, #4]
 800b8a4:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800b8a8:	e052      	b.n	800b950 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	687a      	ldr	r2, [r7, #4]
 800b8ae:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800b8b2:	e04d      	b.n	800b950 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	687a      	ldr	r2, [r7, #4]
 800b8b8:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800b8bc:	e048      	b.n	800b950 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	687a      	ldr	r2, [r7, #4]
 800b8c2:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800b8c6:	e043      	b.n	800b950 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	687a      	ldr	r2, [r7, #4]
 800b8cc:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800b8d0:	e03e      	b.n	800b950 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	687a      	ldr	r2, [r7, #4]
 800b8d6:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800b8da:	e039      	b.n	800b950 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	687a      	ldr	r2, [r7, #4]
 800b8e0:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800b8e4:	e034      	b.n	800b950 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b8ec:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800b8f6:	2301      	movs	r3, #1
 800b8f8:	75fb      	strb	r3, [r7, #23]
        break;
 800b8fa:	e029      	b.n	800b950 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b902:	2b00      	cmp	r3, #0
 800b904:	d11a      	bne.n	800b93c <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 800b906:	7afb      	ldrb	r3, [r7, #11]
 800b908:	2b0b      	cmp	r3, #11
 800b90a:	d002      	beq.n	800b912 <HAL_UART_RegisterCallback+0x126>
 800b90c:	2b0c      	cmp	r3, #12
 800b90e:	d005      	beq.n	800b91c <HAL_UART_RegisterCallback+0x130>
 800b910:	e009      	b.n	800b926 <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	687a      	ldr	r2, [r7, #4]
 800b916:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800b91a:	e019      	b.n	800b950 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	687a      	ldr	r2, [r7, #4]
 800b920:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800b924:	e014      	b.n	800b950 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b92c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800b936:	2301      	movs	r3, #1
 800b938:	75fb      	strb	r3, [r7, #23]
        break;
 800b93a:	e009      	b.n	800b950 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b942:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 800b94c:	2301      	movs	r3, #1
 800b94e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800b950:	7dfb      	ldrb	r3, [r7, #23]
}
 800b952:	4618      	mov	r0, r3
 800b954:	371c      	adds	r7, #28
 800b956:	46bd      	mov	sp, r7
 800b958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b95c:	4770      	bx	lr
 800b95e:	bf00      	nop

0800b960 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b960:	b580      	push	{r7, lr}
 800b962:	b08a      	sub	sp, #40	@ 0x28
 800b964:	af00      	add	r7, sp, #0
 800b966:	60f8      	str	r0, [r7, #12]
 800b968:	60b9      	str	r1, [r7, #8]
 800b96a:	4613      	mov	r3, r2
 800b96c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b974:	2b20      	cmp	r3, #32
 800b976:	d137      	bne.n	800b9e8 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800b978:	68bb      	ldr	r3, [r7, #8]
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d002      	beq.n	800b984 <HAL_UART_Receive_DMA+0x24>
 800b97e:	88fb      	ldrh	r3, [r7, #6]
 800b980:	2b00      	cmp	r3, #0
 800b982:	d101      	bne.n	800b988 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800b984:	2301      	movs	r3, #1
 800b986:	e030      	b.n	800b9ea <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	2200      	movs	r2, #0
 800b98c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	4a18      	ldr	r2, [pc, #96]	@ (800b9f4 <HAL_UART_Receive_DMA+0x94>)
 800b994:	4293      	cmp	r3, r2
 800b996:	d01f      	beq.n	800b9d8 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	685b      	ldr	r3, [r3, #4]
 800b99e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d018      	beq.n	800b9d8 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9ac:	697b      	ldr	r3, [r7, #20]
 800b9ae:	e853 3f00 	ldrex	r3, [r3]
 800b9b2:	613b      	str	r3, [r7, #16]
   return(result);
 800b9b4:	693b      	ldr	r3, [r7, #16]
 800b9b6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b9ba:	627b      	str	r3, [r7, #36]	@ 0x24
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	461a      	mov	r2, r3
 800b9c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9c4:	623b      	str	r3, [r7, #32]
 800b9c6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9c8:	69f9      	ldr	r1, [r7, #28]
 800b9ca:	6a3a      	ldr	r2, [r7, #32]
 800b9cc:	e841 2300 	strex	r3, r2, [r1]
 800b9d0:	61bb      	str	r3, [r7, #24]
   return(result);
 800b9d2:	69bb      	ldr	r3, [r7, #24]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d1e6      	bne.n	800b9a6 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800b9d8:	88fb      	ldrh	r3, [r7, #6]
 800b9da:	461a      	mov	r2, r3
 800b9dc:	68b9      	ldr	r1, [r7, #8]
 800b9de:	68f8      	ldr	r0, [r7, #12]
 800b9e0:	f001 f91c 	bl	800cc1c <UART_Start_Receive_DMA>
 800b9e4:	4603      	mov	r3, r0
 800b9e6:	e000      	b.n	800b9ea <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b9e8:	2302      	movs	r3, #2
  }
}
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	3728      	adds	r7, #40	@ 0x28
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	bd80      	pop	{r7, pc}
 800b9f2:	bf00      	nop
 800b9f4:	40008000 	.word	0x40008000

0800b9f8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	b0ba      	sub	sp, #232	@ 0xe8
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	69db      	ldr	r3, [r3, #28]
 800ba06:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	689b      	ldr	r3, [r3, #8]
 800ba1a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ba1e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800ba22:	f640 030f 	movw	r3, #2063	@ 0x80f
 800ba26:	4013      	ands	r3, r2
 800ba28:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800ba2c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d11b      	bne.n	800ba6c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ba34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ba38:	f003 0320 	and.w	r3, r3, #32
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d015      	beq.n	800ba6c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ba40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ba44:	f003 0320 	and.w	r3, r3, #32
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d105      	bne.n	800ba58 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ba4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ba50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d009      	beq.n	800ba6c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	f000 8312 	beq.w	800c086 <HAL_UART_IRQHandler+0x68e>
      {
        huart->RxISR(huart);
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ba66:	6878      	ldr	r0, [r7, #4]
 800ba68:	4798      	blx	r3
      }
      return;
 800ba6a:	e30c      	b.n	800c086 <HAL_UART_IRQHandler+0x68e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ba6c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	f000 8129 	beq.w	800bcc8 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800ba76:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ba7a:	4b90      	ldr	r3, [pc, #576]	@ (800bcbc <HAL_UART_IRQHandler+0x2c4>)
 800ba7c:	4013      	ands	r3, r2
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d106      	bne.n	800ba90 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800ba82:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800ba86:	4b8e      	ldr	r3, [pc, #568]	@ (800bcc0 <HAL_UART_IRQHandler+0x2c8>)
 800ba88:	4013      	ands	r3, r2
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	f000 811c 	beq.w	800bcc8 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ba90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ba94:	f003 0301 	and.w	r3, r3, #1
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d011      	beq.n	800bac0 <HAL_UART_IRQHandler+0xc8>
 800ba9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800baa0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d00b      	beq.n	800bac0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	2201      	movs	r2, #1
 800baae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bab6:	f043 0201 	orr.w	r2, r3, #1
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bac0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bac4:	f003 0302 	and.w	r3, r3, #2
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d011      	beq.n	800baf0 <HAL_UART_IRQHandler+0xf8>
 800bacc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bad0:	f003 0301 	and.w	r3, r3, #1
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d00b      	beq.n	800baf0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	2202      	movs	r2, #2
 800bade:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bae6:	f043 0204 	orr.w	r2, r3, #4
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800baf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800baf4:	f003 0304 	and.w	r3, r3, #4
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d011      	beq.n	800bb20 <HAL_UART_IRQHandler+0x128>
 800bafc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bb00:	f003 0301 	and.w	r3, r3, #1
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d00b      	beq.n	800bb20 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	2204      	movs	r2, #4
 800bb0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bb16:	f043 0202 	orr.w	r2, r3, #2
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800bb20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bb24:	f003 0308 	and.w	r3, r3, #8
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d017      	beq.n	800bb5c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bb2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bb30:	f003 0320 	and.w	r3, r3, #32
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d105      	bne.n	800bb44 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800bb38:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800bb3c:	4b5f      	ldr	r3, [pc, #380]	@ (800bcbc <HAL_UART_IRQHandler+0x2c4>)
 800bb3e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d00b      	beq.n	800bb5c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	2208      	movs	r2, #8
 800bb4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bb52:	f043 0208 	orr.w	r2, r3, #8
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800bb5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bb60:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d012      	beq.n	800bb8e <HAL_UART_IRQHandler+0x196>
 800bb68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bb6c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d00c      	beq.n	800bb8e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800bb7c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bb84:	f043 0220 	orr.w	r2, r3, #32
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	f000 8278 	beq.w	800c08a <HAL_UART_IRQHandler+0x692>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bb9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bb9e:	f003 0320 	and.w	r3, r3, #32
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d013      	beq.n	800bbce <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bba6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bbaa:	f003 0320 	and.w	r3, r3, #32
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d105      	bne.n	800bbbe <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bbb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bbb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d007      	beq.n	800bbce <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d003      	beq.n	800bbce <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bbca:	6878      	ldr	r0, [r7, #4]
 800bbcc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bbd4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	689b      	ldr	r3, [r3, #8]
 800bbde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bbe2:	2b40      	cmp	r3, #64	@ 0x40
 800bbe4:	d005      	beq.n	800bbf2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800bbe6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800bbea:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d058      	beq.n	800bca4 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bbf2:	6878      	ldr	r0, [r7, #4]
 800bbf4:	f001 f8f9 	bl	800cdea <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	689b      	ldr	r3, [r3, #8]
 800bbfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bc02:	2b40      	cmp	r3, #64	@ 0x40
 800bc04:	d148      	bne.n	800bc98 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	3308      	adds	r3, #8
 800bc0c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc10:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800bc14:	e853 3f00 	ldrex	r3, [r3]
 800bc18:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800bc1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bc20:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bc24:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	3308      	adds	r3, #8
 800bc2e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800bc32:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800bc36:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc3a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800bc3e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800bc42:	e841 2300 	strex	r3, r2, [r1]
 800bc46:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800bc4a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d1d9      	bne.n	800bc06 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d017      	beq.n	800bc8c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bc62:	4a18      	ldr	r2, [pc, #96]	@ (800bcc4 <HAL_UART_IRQHandler+0x2cc>)
 800bc64:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	f7fc f8c5 	bl	8007dfc <HAL_DMA_Abort_IT>
 800bc72:	4603      	mov	r3, r0
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d01f      	beq.n	800bcb8 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bc7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc80:	687a      	ldr	r2, [r7, #4]
 800bc82:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800bc86:	4610      	mov	r0, r2
 800bc88:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc8a:	e015      	b.n	800bcb8 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800bc92:	6878      	ldr	r0, [r7, #4]
 800bc94:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc96:	e00f      	b.n	800bcb8 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800bc9e:	6878      	ldr	r0, [r7, #4]
 800bca0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bca2:	e009      	b.n	800bcb8 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800bcaa:	6878      	ldr	r0, [r7, #4]
 800bcac:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	2200      	movs	r2, #0
 800bcb2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800bcb6:	e1e8      	b.n	800c08a <HAL_UART_IRQHandler+0x692>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bcb8:	bf00      	nop
    return;
 800bcba:	e1e6      	b.n	800c08a <HAL_UART_IRQHandler+0x692>
 800bcbc:	10000001 	.word	0x10000001
 800bcc0:	04000120 	.word	0x04000120
 800bcc4:	0800d0b5 	.word	0x0800d0b5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bccc:	2b01      	cmp	r3, #1
 800bcce:	f040 8176 	bne.w	800bfbe <HAL_UART_IRQHandler+0x5c6>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800bcd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bcd6:	f003 0310 	and.w	r3, r3, #16
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	f000 816f 	beq.w	800bfbe <HAL_UART_IRQHandler+0x5c6>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800bce0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bce4:	f003 0310 	and.w	r3, r3, #16
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	f000 8168 	beq.w	800bfbe <HAL_UART_IRQHandler+0x5c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	2210      	movs	r2, #16
 800bcf4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	689b      	ldr	r3, [r3, #8]
 800bcfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bd00:	2b40      	cmp	r3, #64	@ 0x40
 800bd02:	f040 80dc 	bne.w	800bebe <HAL_UART_IRQHandler+0x4c6>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	685b      	ldr	r3, [r3, #4]
 800bd10:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bd14:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	f000 80b1 	beq.w	800be80 <HAL_UART_IRQHandler+0x488>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800bd24:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800bd28:	429a      	cmp	r2, r3
 800bd2a:	f080 80a9 	bcs.w	800be80 <HAL_UART_IRQHandler+0x488>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800bd34:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	f003 0320 	and.w	r3, r3, #32
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	f040 8087 	bne.w	800be5a <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd54:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800bd58:	e853 3f00 	ldrex	r3, [r3]
 800bd5c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800bd60:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800bd64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bd68:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	461a      	mov	r2, r3
 800bd72:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800bd76:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800bd7a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd7e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800bd82:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800bd86:	e841 2300 	strex	r3, r2, [r1]
 800bd8a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800bd8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d1da      	bne.n	800bd4c <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	3308      	adds	r3, #8
 800bd9c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd9e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bda0:	e853 3f00 	ldrex	r3, [r3]
 800bda4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800bda6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bda8:	f023 0301 	bic.w	r3, r3, #1
 800bdac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	3308      	adds	r3, #8
 800bdb6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800bdba:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800bdbe:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdc0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800bdc2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800bdc6:	e841 2300 	strex	r3, r2, [r1]
 800bdca:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800bdcc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d1e1      	bne.n	800bd96 <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	3308      	adds	r3, #8
 800bdd8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdda:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bddc:	e853 3f00 	ldrex	r3, [r3]
 800bde0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800bde2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bde4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bde8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	3308      	adds	r3, #8
 800bdf2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800bdf6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800bdf8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdfa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800bdfc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800bdfe:	e841 2300 	strex	r3, r2, [r1]
 800be02:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800be04:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800be06:	2b00      	cmp	r3, #0
 800be08:	d1e3      	bne.n	800bdd2 <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	2220      	movs	r2, #32
 800be0e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	2200      	movs	r2, #0
 800be16:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800be20:	e853 3f00 	ldrex	r3, [r3]
 800be24:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800be26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800be28:	f023 0310 	bic.w	r3, r3, #16
 800be2c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	461a      	mov	r2, r3
 800be36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800be3a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800be3c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be3e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800be40:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800be42:	e841 2300 	strex	r3, r2, [r1]
 800be46:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800be48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d1e4      	bne.n	800be18 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800be54:	4618      	mov	r0, r3
 800be56:	f7fb ff78 	bl	8007d4a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	2202      	movs	r2, #2
 800be5e:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800be66:	687a      	ldr	r2, [r7, #4]
 800be68:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 800be6c:	687a      	ldr	r2, [r7, #4]
 800be6e:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 800be72:	b292      	uxth	r2, r2
 800be74:	1a8a      	subs	r2, r1, r2
 800be76:	b292      	uxth	r2, r2
 800be78:	4611      	mov	r1, r2
 800be7a:	6878      	ldr	r0, [r7, #4]
 800be7c:	4798      	blx	r3
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800be7e:	e106      	b.n	800c08e <HAL_UART_IRQHandler+0x696>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800be86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800be8a:	429a      	cmp	r2, r3
 800be8c:	f040 80ff 	bne.w	800c08e <HAL_UART_IRQHandler+0x696>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	f003 0320 	and.w	r3, r3, #32
 800be9e:	2b20      	cmp	r3, #32
 800bea0:	f040 80f5 	bne.w	800c08e <HAL_UART_IRQHandler+0x696>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	2202      	movs	r2, #2
 800bea8:	671a      	str	r2, [r3, #112]	@ 0x70
            huart->RxEventCallback(huart, huart->RxXferSize);
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800beb0:	687a      	ldr	r2, [r7, #4]
 800beb2:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800beb6:	4611      	mov	r1, r2
 800beb8:	6878      	ldr	r0, [r7, #4]
 800beba:	4798      	blx	r3
      return;
 800bebc:	e0e7      	b.n	800c08e <HAL_UART_IRQHandler+0x696>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800beca:	b29b      	uxth	r3, r3
 800becc:	1ad3      	subs	r3, r2, r3
 800bece:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bed8:	b29b      	uxth	r3, r3
 800beda:	2b00      	cmp	r3, #0
 800bedc:	f000 80d9 	beq.w	800c092 <HAL_UART_IRQHandler+0x69a>
          && (nb_rx_data > 0U))
 800bee0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	f000 80d4 	beq.w	800c092 <HAL_UART_IRQHandler+0x69a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bef0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bef2:	e853 3f00 	ldrex	r3, [r3]
 800bef6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800bef8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800befa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800befe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	461a      	mov	r2, r3
 800bf08:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800bf0c:	647b      	str	r3, [r7, #68]	@ 0x44
 800bf0e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf10:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bf12:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bf14:	e841 2300 	strex	r3, r2, [r1]
 800bf18:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800bf1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d1e4      	bne.n	800beea <HAL_UART_IRQHandler+0x4f2>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	3308      	adds	r3, #8
 800bf26:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf2a:	e853 3f00 	ldrex	r3, [r3]
 800bf2e:	623b      	str	r3, [r7, #32]
   return(result);
 800bf30:	6a3b      	ldr	r3, [r7, #32]
 800bf32:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800bf36:	f023 0301 	bic.w	r3, r3, #1
 800bf3a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	3308      	adds	r3, #8
 800bf44:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800bf48:	633a      	str	r2, [r7, #48]	@ 0x30
 800bf4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf4c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bf4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bf50:	e841 2300 	strex	r3, r2, [r1]
 800bf54:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bf56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d1e1      	bne.n	800bf20 <HAL_UART_IRQHandler+0x528>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	2220      	movs	r2, #32
 800bf60:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	2200      	movs	r2, #0
 800bf68:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	2200      	movs	r2, #0
 800bf6e:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf76:	693b      	ldr	r3, [r7, #16]
 800bf78:	e853 3f00 	ldrex	r3, [r3]
 800bf7c:	60fb      	str	r3, [r7, #12]
   return(result);
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	f023 0310 	bic.w	r3, r3, #16
 800bf84:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	461a      	mov	r2, r3
 800bf8e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800bf92:	61fb      	str	r3, [r7, #28]
 800bf94:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf96:	69b9      	ldr	r1, [r7, #24]
 800bf98:	69fa      	ldr	r2, [r7, #28]
 800bf9a:	e841 2300 	strex	r3, r2, [r1]
 800bf9e:	617b      	str	r3, [r7, #20]
   return(result);
 800bfa0:	697b      	ldr	r3, [r7, #20]
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d1e4      	bne.n	800bf70 <HAL_UART_IRQHandler+0x578>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	2202      	movs	r2, #2
 800bfaa:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800bfb2:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 800bfb6:	4611      	mov	r1, r2
 800bfb8:	6878      	ldr	r0, [r7, #4]
 800bfba:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bfbc:	e069      	b.n	800c092 <HAL_UART_IRQHandler+0x69a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800bfbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bfc2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d010      	beq.n	800bfec <HAL_UART_IRQHandler+0x5f4>
 800bfca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bfce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d00a      	beq.n	800bfec <HAL_UART_IRQHandler+0x5f4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800bfde:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800bfe6:	6878      	ldr	r0, [r7, #4]
 800bfe8:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bfea:	e055      	b.n	800c098 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800bfec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bff0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d014      	beq.n	800c022 <HAL_UART_IRQHandler+0x62a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800bff8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bffc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c000:	2b00      	cmp	r3, #0
 800c002:	d105      	bne.n	800c010 <HAL_UART_IRQHandler+0x618>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c004:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c008:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d008      	beq.n	800c022 <HAL_UART_IRQHandler+0x62a>
  {
    if (huart->TxISR != NULL)
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c014:	2b00      	cmp	r3, #0
 800c016:	d03e      	beq.n	800c096 <HAL_UART_IRQHandler+0x69e>
    {
      huart->TxISR(huart);
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c01c:	6878      	ldr	r0, [r7, #4]
 800c01e:	4798      	blx	r3
    }
    return;
 800c020:	e039      	b.n	800c096 <HAL_UART_IRQHandler+0x69e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c022:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c026:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d009      	beq.n	800c042 <HAL_UART_IRQHandler+0x64a>
 800c02e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c032:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c036:	2b00      	cmp	r3, #0
 800c038:	d003      	beq.n	800c042 <HAL_UART_IRQHandler+0x64a>
  {
    UART_EndTransmit_IT(huart);
 800c03a:	6878      	ldr	r0, [r7, #4]
 800c03c:	f001 f84e 	bl	800d0dc <UART_EndTransmit_IT>
    return;
 800c040:	e02a      	b.n	800c098 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c042:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c046:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d00b      	beq.n	800c066 <HAL_UART_IRQHandler+0x66e>
 800c04e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c052:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800c056:	2b00      	cmp	r3, #0
 800c058:	d005      	beq.n	800c066 <HAL_UART_IRQHandler+0x66e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800c060:	6878      	ldr	r0, [r7, #4]
 800c062:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c064:	e018      	b.n	800c098 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c066:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c06a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d012      	beq.n	800c098 <HAL_UART_IRQHandler+0x6a0>
 800c072:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c076:	2b00      	cmp	r3, #0
 800c078:	da0e      	bge.n	800c098 <HAL_UART_IRQHandler+0x6a0>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800c080:	6878      	ldr	r0, [r7, #4]
 800c082:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c084:	e008      	b.n	800c098 <HAL_UART_IRQHandler+0x6a0>
      return;
 800c086:	bf00      	nop
 800c088:	e006      	b.n	800c098 <HAL_UART_IRQHandler+0x6a0>
    return;
 800c08a:	bf00      	nop
 800c08c:	e004      	b.n	800c098 <HAL_UART_IRQHandler+0x6a0>
      return;
 800c08e:	bf00      	nop
 800c090:	e002      	b.n	800c098 <HAL_UART_IRQHandler+0x6a0>
      return;
 800c092:	bf00      	nop
 800c094:	e000      	b.n	800c098 <HAL_UART_IRQHandler+0x6a0>
    return;
 800c096:	bf00      	nop
  }
}
 800c098:	37e8      	adds	r7, #232	@ 0xe8
 800c09a:	46bd      	mov	sp, r7
 800c09c:	bd80      	pop	{r7, pc}
 800c09e:	bf00      	nop

0800c0a0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c0a0:	b480      	push	{r7}
 800c0a2:	b083      	sub	sp, #12
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800c0a8:	bf00      	nop
 800c0aa:	370c      	adds	r7, #12
 800c0ac:	46bd      	mov	sp, r7
 800c0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b2:	4770      	bx	lr

0800c0b4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c0b4:	b480      	push	{r7}
 800c0b6:	b083      	sub	sp, #12
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800c0bc:	bf00      	nop
 800c0be:	370c      	adds	r7, #12
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c6:	4770      	bx	lr

0800c0c8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c0c8:	b480      	push	{r7}
 800c0ca:	b083      	sub	sp, #12
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800c0d0:	bf00      	nop
 800c0d2:	370c      	adds	r7, #12
 800c0d4:	46bd      	mov	sp, r7
 800c0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0da:	4770      	bx	lr

0800c0dc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c0dc:	b480      	push	{r7}
 800c0de:	b083      	sub	sp, #12
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c0e4:	bf00      	nop
 800c0e6:	370c      	adds	r7, #12
 800c0e8:	46bd      	mov	sp, r7
 800c0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ee:	4770      	bx	lr

0800c0f0 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800c0f0:	b480      	push	{r7}
 800c0f2:	b083      	sub	sp, #12
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800c0f8:	bf00      	nop
 800c0fa:	370c      	adds	r7, #12
 800c0fc:	46bd      	mov	sp, r7
 800c0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c102:	4770      	bx	lr

0800c104 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800c104:	b480      	push	{r7}
 800c106:	b083      	sub	sp, #12
 800c108:	af00      	add	r7, sp, #0
 800c10a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800c10c:	bf00      	nop
 800c10e:	370c      	adds	r7, #12
 800c110:	46bd      	mov	sp, r7
 800c112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c116:	4770      	bx	lr

0800c118 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800c118:	b480      	push	{r7}
 800c11a:	b083      	sub	sp, #12
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800c120:	bf00      	nop
 800c122:	370c      	adds	r7, #12
 800c124:	46bd      	mov	sp, r7
 800c126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c12a:	4770      	bx	lr

0800c12c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c12c:	b480      	push	{r7}
 800c12e:	b083      	sub	sp, #12
 800c130:	af00      	add	r7, sp, #0
 800c132:	6078      	str	r0, [r7, #4]
 800c134:	460b      	mov	r3, r1
 800c136:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c138:	bf00      	nop
 800c13a:	370c      	adds	r7, #12
 800c13c:	46bd      	mov	sp, r7
 800c13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c142:	4770      	bx	lr

0800c144 <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 800c144:	b480      	push	{r7}
 800c146:	b083      	sub	sp, #12
 800c148:	af00      	add	r7, sp, #0
 800c14a:	6078      	str	r0, [r7, #4]
 800c14c:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	4a09      	ldr	r2, [pc, #36]	@ (800c178 <HAL_UART_ReceiverTimeout_Config+0x34>)
 800c154:	4293      	cmp	r3, r2
 800c156:	d009      	beq.n	800c16c <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	695b      	ldr	r3, [r3, #20]
 800c15e:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	683a      	ldr	r2, [r7, #0]
 800c168:	430a      	orrs	r2, r1
 800c16a:	615a      	str	r2, [r3, #20]
  }
}
 800c16c:	bf00      	nop
 800c16e:	370c      	adds	r7, #12
 800c170:	46bd      	mov	sp, r7
 800c172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c176:	4770      	bx	lr
 800c178:	40008000 	.word	0x40008000

0800c17c <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 800c17c:	b480      	push	{r7}
 800c17e:	b083      	sub	sp, #12
 800c180:	af00      	add	r7, sp, #0
 800c182:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	4a18      	ldr	r2, [pc, #96]	@ (800c1ec <HAL_UART_EnableReceiverTimeout+0x70>)
 800c18a:	4293      	cmp	r3, r2
 800c18c:	d027      	beq.n	800c1de <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c194:	2b20      	cmp	r3, #32
 800c196:	d120      	bne.n	800c1da <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c19e:	2b01      	cmp	r3, #1
 800c1a0:	d101      	bne.n	800c1a6 <HAL_UART_EnableReceiverTimeout+0x2a>
 800c1a2:	2302      	movs	r3, #2
 800c1a4:	e01c      	b.n	800c1e0 <HAL_UART_EnableReceiverTimeout+0x64>
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	2201      	movs	r2, #1
 800c1aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	2224      	movs	r2, #36	@ 0x24
 800c1b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	685a      	ldr	r2, [r3, #4]
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800c1c4:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	2220      	movs	r2, #32
 800c1ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	2200      	movs	r2, #0
 800c1d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 800c1d6:	2300      	movs	r3, #0
 800c1d8:	e002      	b.n	800c1e0 <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 800c1da:	2302      	movs	r3, #2
 800c1dc:	e000      	b.n	800c1e0 <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 800c1de:	2301      	movs	r3, #1
  }
}
 800c1e0:	4618      	mov	r0, r3
 800c1e2:	370c      	adds	r7, #12
 800c1e4:	46bd      	mov	sp, r7
 800c1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ea:	4770      	bx	lr
 800c1ec:	40008000 	.word	0x40008000

0800c1f0 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 800c1f0:	b480      	push	{r7}
 800c1f2:	b083      	sub	sp, #12
 800c1f4:	af00      	add	r7, sp, #0
 800c1f6:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 800c1fe:	4618      	mov	r0, r3
 800c200:	370c      	adds	r7, #12
 800c202:	46bd      	mov	sp, r7
 800c204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c208:	4770      	bx	lr
	...

0800c20c <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800c20c:	b480      	push	{r7}
 800c20e:	b083      	sub	sp, #12
 800c210:	af00      	add	r7, sp, #0
 800c212:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	4a1a      	ldr	r2, [pc, #104]	@ (800c280 <UART_InitCallbacksToDefault+0x74>)
 800c218:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	4a19      	ldr	r2, [pc, #100]	@ (800c284 <UART_InitCallbacksToDefault+0x78>)
 800c220:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	4a18      	ldr	r2, [pc, #96]	@ (800c288 <UART_InitCallbacksToDefault+0x7c>)
 800c228:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	4a17      	ldr	r2, [pc, #92]	@ (800c28c <UART_InitCallbacksToDefault+0x80>)
 800c230:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	4a16      	ldr	r2, [pc, #88]	@ (800c290 <UART_InitCallbacksToDefault+0x84>)
 800c238:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	4a15      	ldr	r2, [pc, #84]	@ (800c294 <UART_InitCallbacksToDefault+0x88>)
 800c240:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	4a14      	ldr	r2, [pc, #80]	@ (800c298 <UART_InitCallbacksToDefault+0x8c>)
 800c248:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	4a13      	ldr	r2, [pc, #76]	@ (800c29c <UART_InitCallbacksToDefault+0x90>)
 800c250:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	4a12      	ldr	r2, [pc, #72]	@ (800c2a0 <UART_InitCallbacksToDefault+0x94>)
 800c258:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	4a11      	ldr	r2, [pc, #68]	@ (800c2a4 <UART_InitCallbacksToDefault+0x98>)
 800c260:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	4a10      	ldr	r2, [pc, #64]	@ (800c2a8 <UART_InitCallbacksToDefault+0x9c>)
 800c268:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	4a0f      	ldr	r2, [pc, #60]	@ (800c2ac <UART_InitCallbacksToDefault+0xa0>)
 800c270:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 800c274:	bf00      	nop
 800c276:	370c      	adds	r7, #12
 800c278:	46bd      	mov	sp, r7
 800c27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c27e:	4770      	bx	lr
 800c280:	0800c0b5 	.word	0x0800c0b5
 800c284:	0800c0a1 	.word	0x0800c0a1
 800c288:	0800c0c9 	.word	0x0800c0c9
 800c28c:	0800446d 	.word	0x0800446d
 800c290:	0800c0dd 	.word	0x0800c0dd
 800c294:	0800c0f1 	.word	0x0800c0f1
 800c298:	0800c105 	.word	0x0800c105
 800c29c:	0800c119 	.word	0x0800c119
 800c2a0:	0800d137 	.word	0x0800d137
 800c2a4:	0800d14b 	.word	0x0800d14b
 800c2a8:	0800d15f 	.word	0x0800d15f
 800c2ac:	0800c12d 	.word	0x0800c12d

0800c2b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c2b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c2b4:	b08c      	sub	sp, #48	@ 0x30
 800c2b6:	af00      	add	r7, sp, #0
 800c2b8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c2ba:	2300      	movs	r3, #0
 800c2bc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c2c0:	697b      	ldr	r3, [r7, #20]
 800c2c2:	689a      	ldr	r2, [r3, #8]
 800c2c4:	697b      	ldr	r3, [r7, #20]
 800c2c6:	691b      	ldr	r3, [r3, #16]
 800c2c8:	431a      	orrs	r2, r3
 800c2ca:	697b      	ldr	r3, [r7, #20]
 800c2cc:	695b      	ldr	r3, [r3, #20]
 800c2ce:	431a      	orrs	r2, r3
 800c2d0:	697b      	ldr	r3, [r7, #20]
 800c2d2:	69db      	ldr	r3, [r3, #28]
 800c2d4:	4313      	orrs	r3, r2
 800c2d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c2d8:	697b      	ldr	r3, [r7, #20]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	681a      	ldr	r2, [r3, #0]
 800c2de:	4baa      	ldr	r3, [pc, #680]	@ (800c588 <UART_SetConfig+0x2d8>)
 800c2e0:	4013      	ands	r3, r2
 800c2e2:	697a      	ldr	r2, [r7, #20]
 800c2e4:	6812      	ldr	r2, [r2, #0]
 800c2e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c2e8:	430b      	orrs	r3, r1
 800c2ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c2ec:	697b      	ldr	r3, [r7, #20]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	685b      	ldr	r3, [r3, #4]
 800c2f2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c2f6:	697b      	ldr	r3, [r7, #20]
 800c2f8:	68da      	ldr	r2, [r3, #12]
 800c2fa:	697b      	ldr	r3, [r7, #20]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	430a      	orrs	r2, r1
 800c300:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c302:	697b      	ldr	r3, [r7, #20]
 800c304:	699b      	ldr	r3, [r3, #24]
 800c306:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c308:	697b      	ldr	r3, [r7, #20]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	4a9f      	ldr	r2, [pc, #636]	@ (800c58c <UART_SetConfig+0x2dc>)
 800c30e:	4293      	cmp	r3, r2
 800c310:	d004      	beq.n	800c31c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c312:	697b      	ldr	r3, [r7, #20]
 800c314:	6a1b      	ldr	r3, [r3, #32]
 800c316:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c318:	4313      	orrs	r3, r2
 800c31a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c31c:	697b      	ldr	r3, [r7, #20]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	689b      	ldr	r3, [r3, #8]
 800c322:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800c326:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800c32a:	697a      	ldr	r2, [r7, #20]
 800c32c:	6812      	ldr	r2, [r2, #0]
 800c32e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c330:	430b      	orrs	r3, r1
 800c332:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c334:	697b      	ldr	r3, [r7, #20]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c33a:	f023 010f 	bic.w	r1, r3, #15
 800c33e:	697b      	ldr	r3, [r7, #20]
 800c340:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c342:	697b      	ldr	r3, [r7, #20]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	430a      	orrs	r2, r1
 800c348:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c34a:	697b      	ldr	r3, [r7, #20]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	4a90      	ldr	r2, [pc, #576]	@ (800c590 <UART_SetConfig+0x2e0>)
 800c350:	4293      	cmp	r3, r2
 800c352:	d125      	bne.n	800c3a0 <UART_SetConfig+0xf0>
 800c354:	4b8f      	ldr	r3, [pc, #572]	@ (800c594 <UART_SetConfig+0x2e4>)
 800c356:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c35a:	f003 0303 	and.w	r3, r3, #3
 800c35e:	2b03      	cmp	r3, #3
 800c360:	d81a      	bhi.n	800c398 <UART_SetConfig+0xe8>
 800c362:	a201      	add	r2, pc, #4	@ (adr r2, 800c368 <UART_SetConfig+0xb8>)
 800c364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c368:	0800c379 	.word	0x0800c379
 800c36c:	0800c389 	.word	0x0800c389
 800c370:	0800c381 	.word	0x0800c381
 800c374:	0800c391 	.word	0x0800c391
 800c378:	2301      	movs	r3, #1
 800c37a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c37e:	e116      	b.n	800c5ae <UART_SetConfig+0x2fe>
 800c380:	2302      	movs	r3, #2
 800c382:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c386:	e112      	b.n	800c5ae <UART_SetConfig+0x2fe>
 800c388:	2304      	movs	r3, #4
 800c38a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c38e:	e10e      	b.n	800c5ae <UART_SetConfig+0x2fe>
 800c390:	2308      	movs	r3, #8
 800c392:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c396:	e10a      	b.n	800c5ae <UART_SetConfig+0x2fe>
 800c398:	2310      	movs	r3, #16
 800c39a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c39e:	e106      	b.n	800c5ae <UART_SetConfig+0x2fe>
 800c3a0:	697b      	ldr	r3, [r7, #20]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	4a7c      	ldr	r2, [pc, #496]	@ (800c598 <UART_SetConfig+0x2e8>)
 800c3a6:	4293      	cmp	r3, r2
 800c3a8:	d138      	bne.n	800c41c <UART_SetConfig+0x16c>
 800c3aa:	4b7a      	ldr	r3, [pc, #488]	@ (800c594 <UART_SetConfig+0x2e4>)
 800c3ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c3b0:	f003 030c 	and.w	r3, r3, #12
 800c3b4:	2b0c      	cmp	r3, #12
 800c3b6:	d82d      	bhi.n	800c414 <UART_SetConfig+0x164>
 800c3b8:	a201      	add	r2, pc, #4	@ (adr r2, 800c3c0 <UART_SetConfig+0x110>)
 800c3ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3be:	bf00      	nop
 800c3c0:	0800c3f5 	.word	0x0800c3f5
 800c3c4:	0800c415 	.word	0x0800c415
 800c3c8:	0800c415 	.word	0x0800c415
 800c3cc:	0800c415 	.word	0x0800c415
 800c3d0:	0800c405 	.word	0x0800c405
 800c3d4:	0800c415 	.word	0x0800c415
 800c3d8:	0800c415 	.word	0x0800c415
 800c3dc:	0800c415 	.word	0x0800c415
 800c3e0:	0800c3fd 	.word	0x0800c3fd
 800c3e4:	0800c415 	.word	0x0800c415
 800c3e8:	0800c415 	.word	0x0800c415
 800c3ec:	0800c415 	.word	0x0800c415
 800c3f0:	0800c40d 	.word	0x0800c40d
 800c3f4:	2300      	movs	r3, #0
 800c3f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c3fa:	e0d8      	b.n	800c5ae <UART_SetConfig+0x2fe>
 800c3fc:	2302      	movs	r3, #2
 800c3fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c402:	e0d4      	b.n	800c5ae <UART_SetConfig+0x2fe>
 800c404:	2304      	movs	r3, #4
 800c406:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c40a:	e0d0      	b.n	800c5ae <UART_SetConfig+0x2fe>
 800c40c:	2308      	movs	r3, #8
 800c40e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c412:	e0cc      	b.n	800c5ae <UART_SetConfig+0x2fe>
 800c414:	2310      	movs	r3, #16
 800c416:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c41a:	e0c8      	b.n	800c5ae <UART_SetConfig+0x2fe>
 800c41c:	697b      	ldr	r3, [r7, #20]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	4a5e      	ldr	r2, [pc, #376]	@ (800c59c <UART_SetConfig+0x2ec>)
 800c422:	4293      	cmp	r3, r2
 800c424:	d125      	bne.n	800c472 <UART_SetConfig+0x1c2>
 800c426:	4b5b      	ldr	r3, [pc, #364]	@ (800c594 <UART_SetConfig+0x2e4>)
 800c428:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c42c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800c430:	2b30      	cmp	r3, #48	@ 0x30
 800c432:	d016      	beq.n	800c462 <UART_SetConfig+0x1b2>
 800c434:	2b30      	cmp	r3, #48	@ 0x30
 800c436:	d818      	bhi.n	800c46a <UART_SetConfig+0x1ba>
 800c438:	2b20      	cmp	r3, #32
 800c43a:	d00a      	beq.n	800c452 <UART_SetConfig+0x1a2>
 800c43c:	2b20      	cmp	r3, #32
 800c43e:	d814      	bhi.n	800c46a <UART_SetConfig+0x1ba>
 800c440:	2b00      	cmp	r3, #0
 800c442:	d002      	beq.n	800c44a <UART_SetConfig+0x19a>
 800c444:	2b10      	cmp	r3, #16
 800c446:	d008      	beq.n	800c45a <UART_SetConfig+0x1aa>
 800c448:	e00f      	b.n	800c46a <UART_SetConfig+0x1ba>
 800c44a:	2300      	movs	r3, #0
 800c44c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c450:	e0ad      	b.n	800c5ae <UART_SetConfig+0x2fe>
 800c452:	2302      	movs	r3, #2
 800c454:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c458:	e0a9      	b.n	800c5ae <UART_SetConfig+0x2fe>
 800c45a:	2304      	movs	r3, #4
 800c45c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c460:	e0a5      	b.n	800c5ae <UART_SetConfig+0x2fe>
 800c462:	2308      	movs	r3, #8
 800c464:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c468:	e0a1      	b.n	800c5ae <UART_SetConfig+0x2fe>
 800c46a:	2310      	movs	r3, #16
 800c46c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c470:	e09d      	b.n	800c5ae <UART_SetConfig+0x2fe>
 800c472:	697b      	ldr	r3, [r7, #20]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	4a4a      	ldr	r2, [pc, #296]	@ (800c5a0 <UART_SetConfig+0x2f0>)
 800c478:	4293      	cmp	r3, r2
 800c47a:	d125      	bne.n	800c4c8 <UART_SetConfig+0x218>
 800c47c:	4b45      	ldr	r3, [pc, #276]	@ (800c594 <UART_SetConfig+0x2e4>)
 800c47e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c482:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800c486:	2bc0      	cmp	r3, #192	@ 0xc0
 800c488:	d016      	beq.n	800c4b8 <UART_SetConfig+0x208>
 800c48a:	2bc0      	cmp	r3, #192	@ 0xc0
 800c48c:	d818      	bhi.n	800c4c0 <UART_SetConfig+0x210>
 800c48e:	2b80      	cmp	r3, #128	@ 0x80
 800c490:	d00a      	beq.n	800c4a8 <UART_SetConfig+0x1f8>
 800c492:	2b80      	cmp	r3, #128	@ 0x80
 800c494:	d814      	bhi.n	800c4c0 <UART_SetConfig+0x210>
 800c496:	2b00      	cmp	r3, #0
 800c498:	d002      	beq.n	800c4a0 <UART_SetConfig+0x1f0>
 800c49a:	2b40      	cmp	r3, #64	@ 0x40
 800c49c:	d008      	beq.n	800c4b0 <UART_SetConfig+0x200>
 800c49e:	e00f      	b.n	800c4c0 <UART_SetConfig+0x210>
 800c4a0:	2300      	movs	r3, #0
 800c4a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c4a6:	e082      	b.n	800c5ae <UART_SetConfig+0x2fe>
 800c4a8:	2302      	movs	r3, #2
 800c4aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c4ae:	e07e      	b.n	800c5ae <UART_SetConfig+0x2fe>
 800c4b0:	2304      	movs	r3, #4
 800c4b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c4b6:	e07a      	b.n	800c5ae <UART_SetConfig+0x2fe>
 800c4b8:	2308      	movs	r3, #8
 800c4ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c4be:	e076      	b.n	800c5ae <UART_SetConfig+0x2fe>
 800c4c0:	2310      	movs	r3, #16
 800c4c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c4c6:	e072      	b.n	800c5ae <UART_SetConfig+0x2fe>
 800c4c8:	697b      	ldr	r3, [r7, #20]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	4a35      	ldr	r2, [pc, #212]	@ (800c5a4 <UART_SetConfig+0x2f4>)
 800c4ce:	4293      	cmp	r3, r2
 800c4d0:	d12a      	bne.n	800c528 <UART_SetConfig+0x278>
 800c4d2:	4b30      	ldr	r3, [pc, #192]	@ (800c594 <UART_SetConfig+0x2e4>)
 800c4d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c4d8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c4dc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c4e0:	d01a      	beq.n	800c518 <UART_SetConfig+0x268>
 800c4e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c4e6:	d81b      	bhi.n	800c520 <UART_SetConfig+0x270>
 800c4e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c4ec:	d00c      	beq.n	800c508 <UART_SetConfig+0x258>
 800c4ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c4f2:	d815      	bhi.n	800c520 <UART_SetConfig+0x270>
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d003      	beq.n	800c500 <UART_SetConfig+0x250>
 800c4f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c4fc:	d008      	beq.n	800c510 <UART_SetConfig+0x260>
 800c4fe:	e00f      	b.n	800c520 <UART_SetConfig+0x270>
 800c500:	2300      	movs	r3, #0
 800c502:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c506:	e052      	b.n	800c5ae <UART_SetConfig+0x2fe>
 800c508:	2302      	movs	r3, #2
 800c50a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c50e:	e04e      	b.n	800c5ae <UART_SetConfig+0x2fe>
 800c510:	2304      	movs	r3, #4
 800c512:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c516:	e04a      	b.n	800c5ae <UART_SetConfig+0x2fe>
 800c518:	2308      	movs	r3, #8
 800c51a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c51e:	e046      	b.n	800c5ae <UART_SetConfig+0x2fe>
 800c520:	2310      	movs	r3, #16
 800c522:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c526:	e042      	b.n	800c5ae <UART_SetConfig+0x2fe>
 800c528:	697b      	ldr	r3, [r7, #20]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	4a17      	ldr	r2, [pc, #92]	@ (800c58c <UART_SetConfig+0x2dc>)
 800c52e:	4293      	cmp	r3, r2
 800c530:	d13a      	bne.n	800c5a8 <UART_SetConfig+0x2f8>
 800c532:	4b18      	ldr	r3, [pc, #96]	@ (800c594 <UART_SetConfig+0x2e4>)
 800c534:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c538:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800c53c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c540:	d01a      	beq.n	800c578 <UART_SetConfig+0x2c8>
 800c542:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c546:	d81b      	bhi.n	800c580 <UART_SetConfig+0x2d0>
 800c548:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c54c:	d00c      	beq.n	800c568 <UART_SetConfig+0x2b8>
 800c54e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c552:	d815      	bhi.n	800c580 <UART_SetConfig+0x2d0>
 800c554:	2b00      	cmp	r3, #0
 800c556:	d003      	beq.n	800c560 <UART_SetConfig+0x2b0>
 800c558:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c55c:	d008      	beq.n	800c570 <UART_SetConfig+0x2c0>
 800c55e:	e00f      	b.n	800c580 <UART_SetConfig+0x2d0>
 800c560:	2300      	movs	r3, #0
 800c562:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c566:	e022      	b.n	800c5ae <UART_SetConfig+0x2fe>
 800c568:	2302      	movs	r3, #2
 800c56a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c56e:	e01e      	b.n	800c5ae <UART_SetConfig+0x2fe>
 800c570:	2304      	movs	r3, #4
 800c572:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c576:	e01a      	b.n	800c5ae <UART_SetConfig+0x2fe>
 800c578:	2308      	movs	r3, #8
 800c57a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c57e:	e016      	b.n	800c5ae <UART_SetConfig+0x2fe>
 800c580:	2310      	movs	r3, #16
 800c582:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c586:	e012      	b.n	800c5ae <UART_SetConfig+0x2fe>
 800c588:	cfff69f3 	.word	0xcfff69f3
 800c58c:	40008000 	.word	0x40008000
 800c590:	40013800 	.word	0x40013800
 800c594:	40021000 	.word	0x40021000
 800c598:	40004400 	.word	0x40004400
 800c59c:	40004800 	.word	0x40004800
 800c5a0:	40004c00 	.word	0x40004c00
 800c5a4:	40005000 	.word	0x40005000
 800c5a8:	2310      	movs	r3, #16
 800c5aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c5ae:	697b      	ldr	r3, [r7, #20]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	4aae      	ldr	r2, [pc, #696]	@ (800c86c <UART_SetConfig+0x5bc>)
 800c5b4:	4293      	cmp	r3, r2
 800c5b6:	f040 8097 	bne.w	800c6e8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c5ba:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c5be:	2b08      	cmp	r3, #8
 800c5c0:	d823      	bhi.n	800c60a <UART_SetConfig+0x35a>
 800c5c2:	a201      	add	r2, pc, #4	@ (adr r2, 800c5c8 <UART_SetConfig+0x318>)
 800c5c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5c8:	0800c5ed 	.word	0x0800c5ed
 800c5cc:	0800c60b 	.word	0x0800c60b
 800c5d0:	0800c5f5 	.word	0x0800c5f5
 800c5d4:	0800c60b 	.word	0x0800c60b
 800c5d8:	0800c5fb 	.word	0x0800c5fb
 800c5dc:	0800c60b 	.word	0x0800c60b
 800c5e0:	0800c60b 	.word	0x0800c60b
 800c5e4:	0800c60b 	.word	0x0800c60b
 800c5e8:	0800c603 	.word	0x0800c603
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c5ec:	f7fc fcf6 	bl	8008fdc <HAL_RCC_GetPCLK1Freq>
 800c5f0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c5f2:	e010      	b.n	800c616 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c5f4:	4b9e      	ldr	r3, [pc, #632]	@ (800c870 <UART_SetConfig+0x5c0>)
 800c5f6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c5f8:	e00d      	b.n	800c616 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c5fa:	f7fc fc81 	bl	8008f00 <HAL_RCC_GetSysClockFreq>
 800c5fe:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c600:	e009      	b.n	800c616 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c602:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c606:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c608:	e005      	b.n	800c616 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800c60a:	2300      	movs	r3, #0
 800c60c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800c60e:	2301      	movs	r3, #1
 800c610:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800c614:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c618:	2b00      	cmp	r3, #0
 800c61a:	f000 8130 	beq.w	800c87e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c61e:	697b      	ldr	r3, [r7, #20]
 800c620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c622:	4a94      	ldr	r2, [pc, #592]	@ (800c874 <UART_SetConfig+0x5c4>)
 800c624:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c628:	461a      	mov	r2, r3
 800c62a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c62c:	fbb3 f3f2 	udiv	r3, r3, r2
 800c630:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c632:	697b      	ldr	r3, [r7, #20]
 800c634:	685a      	ldr	r2, [r3, #4]
 800c636:	4613      	mov	r3, r2
 800c638:	005b      	lsls	r3, r3, #1
 800c63a:	4413      	add	r3, r2
 800c63c:	69ba      	ldr	r2, [r7, #24]
 800c63e:	429a      	cmp	r2, r3
 800c640:	d305      	bcc.n	800c64e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c642:	697b      	ldr	r3, [r7, #20]
 800c644:	685b      	ldr	r3, [r3, #4]
 800c646:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c648:	69ba      	ldr	r2, [r7, #24]
 800c64a:	429a      	cmp	r2, r3
 800c64c:	d903      	bls.n	800c656 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800c64e:	2301      	movs	r3, #1
 800c650:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800c654:	e113      	b.n	800c87e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c658:	2200      	movs	r2, #0
 800c65a:	60bb      	str	r3, [r7, #8]
 800c65c:	60fa      	str	r2, [r7, #12]
 800c65e:	697b      	ldr	r3, [r7, #20]
 800c660:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c662:	4a84      	ldr	r2, [pc, #528]	@ (800c874 <UART_SetConfig+0x5c4>)
 800c664:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c668:	b29b      	uxth	r3, r3
 800c66a:	2200      	movs	r2, #0
 800c66c:	603b      	str	r3, [r7, #0]
 800c66e:	607a      	str	r2, [r7, #4]
 800c670:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c674:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c678:	f7f4 fa34 	bl	8000ae4 <__aeabi_uldivmod>
 800c67c:	4602      	mov	r2, r0
 800c67e:	460b      	mov	r3, r1
 800c680:	4610      	mov	r0, r2
 800c682:	4619      	mov	r1, r3
 800c684:	f04f 0200 	mov.w	r2, #0
 800c688:	f04f 0300 	mov.w	r3, #0
 800c68c:	020b      	lsls	r3, r1, #8
 800c68e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c692:	0202      	lsls	r2, r0, #8
 800c694:	6979      	ldr	r1, [r7, #20]
 800c696:	6849      	ldr	r1, [r1, #4]
 800c698:	0849      	lsrs	r1, r1, #1
 800c69a:	2000      	movs	r0, #0
 800c69c:	460c      	mov	r4, r1
 800c69e:	4605      	mov	r5, r0
 800c6a0:	eb12 0804 	adds.w	r8, r2, r4
 800c6a4:	eb43 0905 	adc.w	r9, r3, r5
 800c6a8:	697b      	ldr	r3, [r7, #20]
 800c6aa:	685b      	ldr	r3, [r3, #4]
 800c6ac:	2200      	movs	r2, #0
 800c6ae:	469a      	mov	sl, r3
 800c6b0:	4693      	mov	fp, r2
 800c6b2:	4652      	mov	r2, sl
 800c6b4:	465b      	mov	r3, fp
 800c6b6:	4640      	mov	r0, r8
 800c6b8:	4649      	mov	r1, r9
 800c6ba:	f7f4 fa13 	bl	8000ae4 <__aeabi_uldivmod>
 800c6be:	4602      	mov	r2, r0
 800c6c0:	460b      	mov	r3, r1
 800c6c2:	4613      	mov	r3, r2
 800c6c4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c6c6:	6a3b      	ldr	r3, [r7, #32]
 800c6c8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c6cc:	d308      	bcc.n	800c6e0 <UART_SetConfig+0x430>
 800c6ce:	6a3b      	ldr	r3, [r7, #32]
 800c6d0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c6d4:	d204      	bcs.n	800c6e0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800c6d6:	697b      	ldr	r3, [r7, #20]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	6a3a      	ldr	r2, [r7, #32]
 800c6dc:	60da      	str	r2, [r3, #12]
 800c6de:	e0ce      	b.n	800c87e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800c6e0:	2301      	movs	r3, #1
 800c6e2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800c6e6:	e0ca      	b.n	800c87e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c6e8:	697b      	ldr	r3, [r7, #20]
 800c6ea:	69db      	ldr	r3, [r3, #28]
 800c6ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c6f0:	d166      	bne.n	800c7c0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800c6f2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c6f6:	2b08      	cmp	r3, #8
 800c6f8:	d827      	bhi.n	800c74a <UART_SetConfig+0x49a>
 800c6fa:	a201      	add	r2, pc, #4	@ (adr r2, 800c700 <UART_SetConfig+0x450>)
 800c6fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c700:	0800c725 	.word	0x0800c725
 800c704:	0800c72d 	.word	0x0800c72d
 800c708:	0800c735 	.word	0x0800c735
 800c70c:	0800c74b 	.word	0x0800c74b
 800c710:	0800c73b 	.word	0x0800c73b
 800c714:	0800c74b 	.word	0x0800c74b
 800c718:	0800c74b 	.word	0x0800c74b
 800c71c:	0800c74b 	.word	0x0800c74b
 800c720:	0800c743 	.word	0x0800c743
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c724:	f7fc fc5a 	bl	8008fdc <HAL_RCC_GetPCLK1Freq>
 800c728:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c72a:	e014      	b.n	800c756 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c72c:	f7fc fc6c 	bl	8009008 <HAL_RCC_GetPCLK2Freq>
 800c730:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c732:	e010      	b.n	800c756 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c734:	4b4e      	ldr	r3, [pc, #312]	@ (800c870 <UART_SetConfig+0x5c0>)
 800c736:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c738:	e00d      	b.n	800c756 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c73a:	f7fc fbe1 	bl	8008f00 <HAL_RCC_GetSysClockFreq>
 800c73e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c740:	e009      	b.n	800c756 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c742:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c746:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c748:	e005      	b.n	800c756 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800c74a:	2300      	movs	r3, #0
 800c74c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800c74e:	2301      	movs	r3, #1
 800c750:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800c754:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c758:	2b00      	cmp	r3, #0
 800c75a:	f000 8090 	beq.w	800c87e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c75e:	697b      	ldr	r3, [r7, #20]
 800c760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c762:	4a44      	ldr	r2, [pc, #272]	@ (800c874 <UART_SetConfig+0x5c4>)
 800c764:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c768:	461a      	mov	r2, r3
 800c76a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c76c:	fbb3 f3f2 	udiv	r3, r3, r2
 800c770:	005a      	lsls	r2, r3, #1
 800c772:	697b      	ldr	r3, [r7, #20]
 800c774:	685b      	ldr	r3, [r3, #4]
 800c776:	085b      	lsrs	r3, r3, #1
 800c778:	441a      	add	r2, r3
 800c77a:	697b      	ldr	r3, [r7, #20]
 800c77c:	685b      	ldr	r3, [r3, #4]
 800c77e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c782:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c784:	6a3b      	ldr	r3, [r7, #32]
 800c786:	2b0f      	cmp	r3, #15
 800c788:	d916      	bls.n	800c7b8 <UART_SetConfig+0x508>
 800c78a:	6a3b      	ldr	r3, [r7, #32]
 800c78c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c790:	d212      	bcs.n	800c7b8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c792:	6a3b      	ldr	r3, [r7, #32]
 800c794:	b29b      	uxth	r3, r3
 800c796:	f023 030f 	bic.w	r3, r3, #15
 800c79a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c79c:	6a3b      	ldr	r3, [r7, #32]
 800c79e:	085b      	lsrs	r3, r3, #1
 800c7a0:	b29b      	uxth	r3, r3
 800c7a2:	f003 0307 	and.w	r3, r3, #7
 800c7a6:	b29a      	uxth	r2, r3
 800c7a8:	8bfb      	ldrh	r3, [r7, #30]
 800c7aa:	4313      	orrs	r3, r2
 800c7ac:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800c7ae:	697b      	ldr	r3, [r7, #20]
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	8bfa      	ldrh	r2, [r7, #30]
 800c7b4:	60da      	str	r2, [r3, #12]
 800c7b6:	e062      	b.n	800c87e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800c7b8:	2301      	movs	r3, #1
 800c7ba:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800c7be:	e05e      	b.n	800c87e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c7c0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c7c4:	2b08      	cmp	r3, #8
 800c7c6:	d828      	bhi.n	800c81a <UART_SetConfig+0x56a>
 800c7c8:	a201      	add	r2, pc, #4	@ (adr r2, 800c7d0 <UART_SetConfig+0x520>)
 800c7ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7ce:	bf00      	nop
 800c7d0:	0800c7f5 	.word	0x0800c7f5
 800c7d4:	0800c7fd 	.word	0x0800c7fd
 800c7d8:	0800c805 	.word	0x0800c805
 800c7dc:	0800c81b 	.word	0x0800c81b
 800c7e0:	0800c80b 	.word	0x0800c80b
 800c7e4:	0800c81b 	.word	0x0800c81b
 800c7e8:	0800c81b 	.word	0x0800c81b
 800c7ec:	0800c81b 	.word	0x0800c81b
 800c7f0:	0800c813 	.word	0x0800c813
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c7f4:	f7fc fbf2 	bl	8008fdc <HAL_RCC_GetPCLK1Freq>
 800c7f8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c7fa:	e014      	b.n	800c826 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c7fc:	f7fc fc04 	bl	8009008 <HAL_RCC_GetPCLK2Freq>
 800c800:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c802:	e010      	b.n	800c826 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c804:	4b1a      	ldr	r3, [pc, #104]	@ (800c870 <UART_SetConfig+0x5c0>)
 800c806:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c808:	e00d      	b.n	800c826 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c80a:	f7fc fb79 	bl	8008f00 <HAL_RCC_GetSysClockFreq>
 800c80e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c810:	e009      	b.n	800c826 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c812:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c816:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c818:	e005      	b.n	800c826 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800c81a:	2300      	movs	r3, #0
 800c81c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800c81e:	2301      	movs	r3, #1
 800c820:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800c824:	bf00      	nop
    }

    if (pclk != 0U)
 800c826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d028      	beq.n	800c87e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c82c:	697b      	ldr	r3, [r7, #20]
 800c82e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c830:	4a10      	ldr	r2, [pc, #64]	@ (800c874 <UART_SetConfig+0x5c4>)
 800c832:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c836:	461a      	mov	r2, r3
 800c838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c83a:	fbb3 f2f2 	udiv	r2, r3, r2
 800c83e:	697b      	ldr	r3, [r7, #20]
 800c840:	685b      	ldr	r3, [r3, #4]
 800c842:	085b      	lsrs	r3, r3, #1
 800c844:	441a      	add	r2, r3
 800c846:	697b      	ldr	r3, [r7, #20]
 800c848:	685b      	ldr	r3, [r3, #4]
 800c84a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c84e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c850:	6a3b      	ldr	r3, [r7, #32]
 800c852:	2b0f      	cmp	r3, #15
 800c854:	d910      	bls.n	800c878 <UART_SetConfig+0x5c8>
 800c856:	6a3b      	ldr	r3, [r7, #32]
 800c858:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c85c:	d20c      	bcs.n	800c878 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c85e:	6a3b      	ldr	r3, [r7, #32]
 800c860:	b29a      	uxth	r2, r3
 800c862:	697b      	ldr	r3, [r7, #20]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	60da      	str	r2, [r3, #12]
 800c868:	e009      	b.n	800c87e <UART_SetConfig+0x5ce>
 800c86a:	bf00      	nop
 800c86c:	40008000 	.word	0x40008000
 800c870:	00f42400 	.word	0x00f42400
 800c874:	0800e33c 	.word	0x0800e33c
      }
      else
      {
        ret = HAL_ERROR;
 800c878:	2301      	movs	r3, #1
 800c87a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c87e:	697b      	ldr	r3, [r7, #20]
 800c880:	2201      	movs	r2, #1
 800c882:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800c886:	697b      	ldr	r3, [r7, #20]
 800c888:	2201      	movs	r2, #1
 800c88a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c88e:	697b      	ldr	r3, [r7, #20]
 800c890:	2200      	movs	r2, #0
 800c892:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800c894:	697b      	ldr	r3, [r7, #20]
 800c896:	2200      	movs	r2, #0
 800c898:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800c89a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800c89e:	4618      	mov	r0, r3
 800c8a0:	3730      	adds	r7, #48	@ 0x30
 800c8a2:	46bd      	mov	sp, r7
 800c8a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800c8a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c8a8:	b480      	push	{r7}
 800c8aa:	b083      	sub	sp, #12
 800c8ac:	af00      	add	r7, sp, #0
 800c8ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c8b4:	f003 0308 	and.w	r3, r3, #8
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d00a      	beq.n	800c8d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	685b      	ldr	r3, [r3, #4]
 800c8c2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	430a      	orrs	r2, r1
 800c8d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c8d6:	f003 0301 	and.w	r3, r3, #1
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d00a      	beq.n	800c8f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	685b      	ldr	r3, [r3, #4]
 800c8e4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	430a      	orrs	r2, r1
 800c8f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c8f8:	f003 0302 	and.w	r3, r3, #2
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d00a      	beq.n	800c916 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	685b      	ldr	r3, [r3, #4]
 800c906:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	430a      	orrs	r2, r1
 800c914:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c91a:	f003 0304 	and.w	r3, r3, #4
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d00a      	beq.n	800c938 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	685b      	ldr	r3, [r3, #4]
 800c928:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	430a      	orrs	r2, r1
 800c936:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c93c:	f003 0310 	and.w	r3, r3, #16
 800c940:	2b00      	cmp	r3, #0
 800c942:	d00a      	beq.n	800c95a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	689b      	ldr	r3, [r3, #8]
 800c94a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	430a      	orrs	r2, r1
 800c958:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c95e:	f003 0320 	and.w	r3, r3, #32
 800c962:	2b00      	cmp	r3, #0
 800c964:	d00a      	beq.n	800c97c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	689b      	ldr	r3, [r3, #8]
 800c96c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	430a      	orrs	r2, r1
 800c97a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c980:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c984:	2b00      	cmp	r3, #0
 800c986:	d01a      	beq.n	800c9be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	685b      	ldr	r3, [r3, #4]
 800c98e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	430a      	orrs	r2, r1
 800c99c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c9a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c9a6:	d10a      	bne.n	800c9be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	685b      	ldr	r3, [r3, #4]
 800c9ae:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	430a      	orrs	r2, r1
 800c9bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c9c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d00a      	beq.n	800c9e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	685b      	ldr	r3, [r3, #4]
 800c9d0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	430a      	orrs	r2, r1
 800c9de:	605a      	str	r2, [r3, #4]
  }
}
 800c9e0:	bf00      	nop
 800c9e2:	370c      	adds	r7, #12
 800c9e4:	46bd      	mov	sp, r7
 800c9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ea:	4770      	bx	lr

0800c9ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c9ec:	b580      	push	{r7, lr}
 800c9ee:	b098      	sub	sp, #96	@ 0x60
 800c9f0:	af02      	add	r7, sp, #8
 800c9f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	2200      	movs	r2, #0
 800c9f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c9fc:	f7f9 faee 	bl	8005fdc <HAL_GetTick>
 800ca00:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	f003 0308 	and.w	r3, r3, #8
 800ca0c:	2b08      	cmp	r3, #8
 800ca0e:	d12f      	bne.n	800ca70 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ca10:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ca14:	9300      	str	r3, [sp, #0]
 800ca16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ca18:	2200      	movs	r2, #0
 800ca1a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800ca1e:	6878      	ldr	r0, [r7, #4]
 800ca20:	f000 f88e 	bl	800cb40 <UART_WaitOnFlagUntilTimeout>
 800ca24:	4603      	mov	r3, r0
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d022      	beq.n	800ca70 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca32:	e853 3f00 	ldrex	r3, [r3]
 800ca36:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ca38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca3a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ca3e:	653b      	str	r3, [r7, #80]	@ 0x50
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	461a      	mov	r2, r3
 800ca46:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ca48:	647b      	str	r3, [r7, #68]	@ 0x44
 800ca4a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca4c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ca4e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ca50:	e841 2300 	strex	r3, r2, [r1]
 800ca54:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ca56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d1e6      	bne.n	800ca2a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	2220      	movs	r2, #32
 800ca60:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	2200      	movs	r2, #0
 800ca68:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ca6c:	2303      	movs	r3, #3
 800ca6e:	e063      	b.n	800cb38 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	f003 0304 	and.w	r3, r3, #4
 800ca7a:	2b04      	cmp	r3, #4
 800ca7c:	d149      	bne.n	800cb12 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ca7e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ca82:	9300      	str	r3, [sp, #0]
 800ca84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ca86:	2200      	movs	r2, #0
 800ca88:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800ca8c:	6878      	ldr	r0, [r7, #4]
 800ca8e:	f000 f857 	bl	800cb40 <UART_WaitOnFlagUntilTimeout>
 800ca92:	4603      	mov	r3, r0
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d03c      	beq.n	800cb12 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800caa0:	e853 3f00 	ldrex	r3, [r3]
 800caa4:	623b      	str	r3, [r7, #32]
   return(result);
 800caa6:	6a3b      	ldr	r3, [r7, #32]
 800caa8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800caac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	461a      	mov	r2, r3
 800cab4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cab6:	633b      	str	r3, [r7, #48]	@ 0x30
 800cab8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800caba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cabc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cabe:	e841 2300 	strex	r3, r2, [r1]
 800cac2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800cac4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d1e6      	bne.n	800ca98 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	3308      	adds	r3, #8
 800cad0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cad2:	693b      	ldr	r3, [r7, #16]
 800cad4:	e853 3f00 	ldrex	r3, [r3]
 800cad8:	60fb      	str	r3, [r7, #12]
   return(result);
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	f023 0301 	bic.w	r3, r3, #1
 800cae0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	3308      	adds	r3, #8
 800cae8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800caea:	61fa      	str	r2, [r7, #28]
 800caec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800caee:	69b9      	ldr	r1, [r7, #24]
 800caf0:	69fa      	ldr	r2, [r7, #28]
 800caf2:	e841 2300 	strex	r3, r2, [r1]
 800caf6:	617b      	str	r3, [r7, #20]
   return(result);
 800caf8:	697b      	ldr	r3, [r7, #20]
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d1e5      	bne.n	800caca <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	2220      	movs	r2, #32
 800cb02:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	2200      	movs	r2, #0
 800cb0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cb0e:	2303      	movs	r3, #3
 800cb10:	e012      	b.n	800cb38 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	2220      	movs	r2, #32
 800cb16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	2220      	movs	r2, #32
 800cb1e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	2200      	movs	r2, #0
 800cb26:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	2200      	movs	r2, #0
 800cb2c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	2200      	movs	r2, #0
 800cb32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cb36:	2300      	movs	r3, #0
}
 800cb38:	4618      	mov	r0, r3
 800cb3a:	3758      	adds	r7, #88	@ 0x58
 800cb3c:	46bd      	mov	sp, r7
 800cb3e:	bd80      	pop	{r7, pc}

0800cb40 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cb40:	b580      	push	{r7, lr}
 800cb42:	b084      	sub	sp, #16
 800cb44:	af00      	add	r7, sp, #0
 800cb46:	60f8      	str	r0, [r7, #12]
 800cb48:	60b9      	str	r1, [r7, #8]
 800cb4a:	603b      	str	r3, [r7, #0]
 800cb4c:	4613      	mov	r3, r2
 800cb4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cb50:	e04f      	b.n	800cbf2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cb52:	69bb      	ldr	r3, [r7, #24]
 800cb54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb58:	d04b      	beq.n	800cbf2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cb5a:	f7f9 fa3f 	bl	8005fdc <HAL_GetTick>
 800cb5e:	4602      	mov	r2, r0
 800cb60:	683b      	ldr	r3, [r7, #0]
 800cb62:	1ad3      	subs	r3, r2, r3
 800cb64:	69ba      	ldr	r2, [r7, #24]
 800cb66:	429a      	cmp	r2, r3
 800cb68:	d302      	bcc.n	800cb70 <UART_WaitOnFlagUntilTimeout+0x30>
 800cb6a:	69bb      	ldr	r3, [r7, #24]
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d101      	bne.n	800cb74 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800cb70:	2303      	movs	r3, #3
 800cb72:	e04e      	b.n	800cc12 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	f003 0304 	and.w	r3, r3, #4
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d037      	beq.n	800cbf2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800cb82:	68bb      	ldr	r3, [r7, #8]
 800cb84:	2b80      	cmp	r3, #128	@ 0x80
 800cb86:	d034      	beq.n	800cbf2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800cb88:	68bb      	ldr	r3, [r7, #8]
 800cb8a:	2b40      	cmp	r3, #64	@ 0x40
 800cb8c:	d031      	beq.n	800cbf2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	69db      	ldr	r3, [r3, #28]
 800cb94:	f003 0308 	and.w	r3, r3, #8
 800cb98:	2b08      	cmp	r3, #8
 800cb9a:	d110      	bne.n	800cbbe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	2208      	movs	r2, #8
 800cba2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cba4:	68f8      	ldr	r0, [r7, #12]
 800cba6:	f000 f920 	bl	800cdea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	2208      	movs	r2, #8
 800cbae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	2200      	movs	r2, #0
 800cbb6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800cbba:	2301      	movs	r3, #1
 800cbbc:	e029      	b.n	800cc12 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	69db      	ldr	r3, [r3, #28]
 800cbc4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800cbc8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cbcc:	d111      	bne.n	800cbf2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800cbd6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cbd8:	68f8      	ldr	r0, [r7, #12]
 800cbda:	f000 f906 	bl	800cdea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	2220      	movs	r2, #32
 800cbe2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	2200      	movs	r2, #0
 800cbea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800cbee:	2303      	movs	r3, #3
 800cbf0:	e00f      	b.n	800cc12 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	69da      	ldr	r2, [r3, #28]
 800cbf8:	68bb      	ldr	r3, [r7, #8]
 800cbfa:	4013      	ands	r3, r2
 800cbfc:	68ba      	ldr	r2, [r7, #8]
 800cbfe:	429a      	cmp	r2, r3
 800cc00:	bf0c      	ite	eq
 800cc02:	2301      	moveq	r3, #1
 800cc04:	2300      	movne	r3, #0
 800cc06:	b2db      	uxtb	r3, r3
 800cc08:	461a      	mov	r2, r3
 800cc0a:	79fb      	ldrb	r3, [r7, #7]
 800cc0c:	429a      	cmp	r2, r3
 800cc0e:	d0a0      	beq.n	800cb52 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cc10:	2300      	movs	r3, #0
}
 800cc12:	4618      	mov	r0, r3
 800cc14:	3710      	adds	r7, #16
 800cc16:	46bd      	mov	sp, r7
 800cc18:	bd80      	pop	{r7, pc}
	...

0800cc1c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cc1c:	b580      	push	{r7, lr}
 800cc1e:	b096      	sub	sp, #88	@ 0x58
 800cc20:	af00      	add	r7, sp, #0
 800cc22:	60f8      	str	r0, [r7, #12]
 800cc24:	60b9      	str	r1, [r7, #8]
 800cc26:	4613      	mov	r3, r2
 800cc28:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	68ba      	ldr	r2, [r7, #8]
 800cc2e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	88fa      	ldrh	r2, [r7, #6]
 800cc34:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	2200      	movs	r2, #0
 800cc3c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	2222      	movs	r2, #34	@ 0x22
 800cc44:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d02d      	beq.n	800ccae <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cc58:	4a40      	ldr	r2, [pc, #256]	@ (800cd5c <UART_Start_Receive_DMA+0x140>)
 800cc5a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cc62:	4a3f      	ldr	r2, [pc, #252]	@ (800cd60 <UART_Start_Receive_DMA+0x144>)
 800cc64:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cc6c:	4a3d      	ldr	r2, [pc, #244]	@ (800cd64 <UART_Start_Receive_DMA+0x148>)
 800cc6e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cc76:	2200      	movs	r2, #0
 800cc78:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	3324      	adds	r3, #36	@ 0x24
 800cc86:	4619      	mov	r1, r3
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cc8c:	461a      	mov	r2, r3
 800cc8e:	88fb      	ldrh	r3, [r7, #6]
 800cc90:	f7fa ffe0 	bl	8007c54 <HAL_DMA_Start_IT>
 800cc94:	4603      	mov	r3, r0
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d009      	beq.n	800ccae <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	2210      	movs	r2, #16
 800cc9e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	2220      	movs	r2, #32
 800cca6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800ccaa:	2301      	movs	r3, #1
 800ccac:	e051      	b.n	800cd52 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	691b      	ldr	r3, [r3, #16]
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d018      	beq.n	800cce8 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ccbe:	e853 3f00 	ldrex	r3, [r3]
 800ccc2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ccc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccc6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ccca:	657b      	str	r3, [r7, #84]	@ 0x54
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	461a      	mov	r2, r3
 800ccd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ccd4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ccd6:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccd8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ccda:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ccdc:	e841 2300 	strex	r3, r2, [r1]
 800cce0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800cce2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d1e6      	bne.n	800ccb6 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	3308      	adds	r3, #8
 800ccee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccf2:	e853 3f00 	ldrex	r3, [r3]
 800ccf6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ccf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccfa:	f043 0301 	orr.w	r3, r3, #1
 800ccfe:	653b      	str	r3, [r7, #80]	@ 0x50
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	3308      	adds	r3, #8
 800cd06:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cd08:	637a      	str	r2, [r7, #52]	@ 0x34
 800cd0a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd0c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800cd0e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cd10:	e841 2300 	strex	r3, r2, [r1]
 800cd14:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800cd16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d1e5      	bne.n	800cce8 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	3308      	adds	r3, #8
 800cd22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd24:	697b      	ldr	r3, [r7, #20]
 800cd26:	e853 3f00 	ldrex	r3, [r3]
 800cd2a:	613b      	str	r3, [r7, #16]
   return(result);
 800cd2c:	693b      	ldr	r3, [r7, #16]
 800cd2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cd32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	3308      	adds	r3, #8
 800cd3a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800cd3c:	623a      	str	r2, [r7, #32]
 800cd3e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd40:	69f9      	ldr	r1, [r7, #28]
 800cd42:	6a3a      	ldr	r2, [r7, #32]
 800cd44:	e841 2300 	strex	r3, r2, [r1]
 800cd48:	61bb      	str	r3, [r7, #24]
   return(result);
 800cd4a:	69bb      	ldr	r3, [r7, #24]
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d1e5      	bne.n	800cd1c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800cd50:	2300      	movs	r3, #0
}
 800cd52:	4618      	mov	r0, r3
 800cd54:	3758      	adds	r7, #88	@ 0x58
 800cd56:	46bd      	mov	sp, r7
 800cd58:	bd80      	pop	{r7, pc}
 800cd5a:	bf00      	nop
 800cd5c:	0800ceb7 	.word	0x0800ceb7
 800cd60:	0800cfeb 	.word	0x0800cfeb
 800cd64:	0800d031 	.word	0x0800d031

0800cd68 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800cd68:	b480      	push	{r7}
 800cd6a:	b08f      	sub	sp, #60	@ 0x3c
 800cd6c:	af00      	add	r7, sp, #0
 800cd6e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd76:	6a3b      	ldr	r3, [r7, #32]
 800cd78:	e853 3f00 	ldrex	r3, [r3]
 800cd7c:	61fb      	str	r3, [r7, #28]
   return(result);
 800cd7e:	69fb      	ldr	r3, [r7, #28]
 800cd80:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800cd84:	637b      	str	r3, [r7, #52]	@ 0x34
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	461a      	mov	r2, r3
 800cd8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cd90:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd92:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cd94:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cd96:	e841 2300 	strex	r3, r2, [r1]
 800cd9a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800cd9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d1e6      	bne.n	800cd70 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	3308      	adds	r3, #8
 800cda8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	e853 3f00 	ldrex	r3, [r3]
 800cdb0:	60bb      	str	r3, [r7, #8]
   return(result);
 800cdb2:	68bb      	ldr	r3, [r7, #8]
 800cdb4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800cdb8:	633b      	str	r3, [r7, #48]	@ 0x30
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	3308      	adds	r3, #8
 800cdc0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cdc2:	61ba      	str	r2, [r7, #24]
 800cdc4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdc6:	6979      	ldr	r1, [r7, #20]
 800cdc8:	69ba      	ldr	r2, [r7, #24]
 800cdca:	e841 2300 	strex	r3, r2, [r1]
 800cdce:	613b      	str	r3, [r7, #16]
   return(result);
 800cdd0:	693b      	ldr	r3, [r7, #16]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d1e5      	bne.n	800cda2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	2220      	movs	r2, #32
 800cdda:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800cdde:	bf00      	nop
 800cde0:	373c      	adds	r7, #60	@ 0x3c
 800cde2:	46bd      	mov	sp, r7
 800cde4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde8:	4770      	bx	lr

0800cdea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cdea:	b480      	push	{r7}
 800cdec:	b095      	sub	sp, #84	@ 0x54
 800cdee:	af00      	add	r7, sp, #0
 800cdf0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cdfa:	e853 3f00 	ldrex	r3, [r3]
 800cdfe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ce00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce02:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ce06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	461a      	mov	r2, r3
 800ce0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ce10:	643b      	str	r3, [r7, #64]	@ 0x40
 800ce12:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce14:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ce16:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ce18:	e841 2300 	strex	r3, r2, [r1]
 800ce1c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ce1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d1e6      	bne.n	800cdf2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	3308      	adds	r3, #8
 800ce2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce2c:	6a3b      	ldr	r3, [r7, #32]
 800ce2e:	e853 3f00 	ldrex	r3, [r3]
 800ce32:	61fb      	str	r3, [r7, #28]
   return(result);
 800ce34:	69fb      	ldr	r3, [r7, #28]
 800ce36:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ce3a:	f023 0301 	bic.w	r3, r3, #1
 800ce3e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	3308      	adds	r3, #8
 800ce46:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ce48:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ce4a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce4c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ce4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ce50:	e841 2300 	strex	r3, r2, [r1]
 800ce54:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ce56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d1e3      	bne.n	800ce24 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ce60:	2b01      	cmp	r3, #1
 800ce62:	d118      	bne.n	800ce96 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	e853 3f00 	ldrex	r3, [r3]
 800ce70:	60bb      	str	r3, [r7, #8]
   return(result);
 800ce72:	68bb      	ldr	r3, [r7, #8]
 800ce74:	f023 0310 	bic.w	r3, r3, #16
 800ce78:	647b      	str	r3, [r7, #68]	@ 0x44
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	461a      	mov	r2, r3
 800ce80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ce82:	61bb      	str	r3, [r7, #24]
 800ce84:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce86:	6979      	ldr	r1, [r7, #20]
 800ce88:	69ba      	ldr	r2, [r7, #24]
 800ce8a:	e841 2300 	strex	r3, r2, [r1]
 800ce8e:	613b      	str	r3, [r7, #16]
   return(result);
 800ce90:	693b      	ldr	r3, [r7, #16]
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d1e6      	bne.n	800ce64 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	2220      	movs	r2, #32
 800ce9a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	2200      	movs	r2, #0
 800cea2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	2200      	movs	r2, #0
 800cea8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800ceaa:	bf00      	nop
 800ceac:	3754      	adds	r7, #84	@ 0x54
 800ceae:	46bd      	mov	sp, r7
 800ceb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb4:	4770      	bx	lr

0800ceb6 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ceb6:	b580      	push	{r7, lr}
 800ceb8:	b09c      	sub	sp, #112	@ 0x70
 800ceba:	af00      	add	r7, sp, #0
 800cebc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cec2:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	f003 0320 	and.w	r3, r3, #32
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d171      	bne.n	800cfb6 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800ced2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ced4:	2200      	movs	r2, #0
 800ced6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ceda:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cee0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cee2:	e853 3f00 	ldrex	r3, [r3]
 800cee6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800cee8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ceea:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ceee:	66bb      	str	r3, [r7, #104]	@ 0x68
 800cef0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	461a      	mov	r2, r3
 800cef6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cef8:	65bb      	str	r3, [r7, #88]	@ 0x58
 800cefa:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cefc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800cefe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cf00:	e841 2300 	strex	r3, r2, [r1]
 800cf04:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800cf06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d1e6      	bne.n	800ceda <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cf0c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	3308      	adds	r3, #8
 800cf12:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf16:	e853 3f00 	ldrex	r3, [r3]
 800cf1a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800cf1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf1e:	f023 0301 	bic.w	r3, r3, #1
 800cf22:	667b      	str	r3, [r7, #100]	@ 0x64
 800cf24:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	3308      	adds	r3, #8
 800cf2a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800cf2c:	647a      	str	r2, [r7, #68]	@ 0x44
 800cf2e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf30:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800cf32:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cf34:	e841 2300 	strex	r3, r2, [r1]
 800cf38:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800cf3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d1e5      	bne.n	800cf0c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cf40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	3308      	adds	r3, #8
 800cf46:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf4a:	e853 3f00 	ldrex	r3, [r3]
 800cf4e:	623b      	str	r3, [r7, #32]
   return(result);
 800cf50:	6a3b      	ldr	r3, [r7, #32]
 800cf52:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cf56:	663b      	str	r3, [r7, #96]	@ 0x60
 800cf58:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	3308      	adds	r3, #8
 800cf5e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800cf60:	633a      	str	r2, [r7, #48]	@ 0x30
 800cf62:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf64:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cf66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cf68:	e841 2300 	strex	r3, r2, [r1]
 800cf6c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800cf6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d1e5      	bne.n	800cf40 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800cf74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cf76:	2220      	movs	r2, #32
 800cf78:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cf7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cf7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cf80:	2b01      	cmp	r3, #1
 800cf82:	d118      	bne.n	800cfb6 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cf84:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf8a:	693b      	ldr	r3, [r7, #16]
 800cf8c:	e853 3f00 	ldrex	r3, [r3]
 800cf90:	60fb      	str	r3, [r7, #12]
   return(result);
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	f023 0310 	bic.w	r3, r3, #16
 800cf98:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800cf9a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	461a      	mov	r2, r3
 800cfa0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cfa2:	61fb      	str	r3, [r7, #28]
 800cfa4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfa6:	69b9      	ldr	r1, [r7, #24]
 800cfa8:	69fa      	ldr	r2, [r7, #28]
 800cfaa:	e841 2300 	strex	r3, r2, [r1]
 800cfae:	617b      	str	r3, [r7, #20]
   return(result);
 800cfb0:	697b      	ldr	r3, [r7, #20]
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d1e6      	bne.n	800cf84 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cfb6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cfb8:	2200      	movs	r2, #0
 800cfba:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cfbc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cfbe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cfc0:	2b01      	cmp	r3, #1
 800cfc2:	d109      	bne.n	800cfd8 <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800cfc4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cfc6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800cfca:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800cfcc:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800cfd0:	4611      	mov	r1, r2
 800cfd2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800cfd4:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800cfd6:	e004      	b.n	800cfe2 <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 800cfd8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cfda:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800cfde:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800cfe0:	4798      	blx	r3
}
 800cfe2:	bf00      	nop
 800cfe4:	3770      	adds	r7, #112	@ 0x70
 800cfe6:	46bd      	mov	sp, r7
 800cfe8:	bd80      	pop	{r7, pc}

0800cfea <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800cfea:	b580      	push	{r7, lr}
 800cfec:	b084      	sub	sp, #16
 800cfee:	af00      	add	r7, sp, #0
 800cff0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cff6:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	2201      	movs	r2, #1
 800cffc:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d002:	2b01      	cmp	r3, #1
 800d004:	d10b      	bne.n	800d01e <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800d00c:	68fa      	ldr	r2, [r7, #12]
 800d00e:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800d012:	0852      	lsrs	r2, r2, #1
 800d014:	b292      	uxth	r2, r2
 800d016:	4611      	mov	r1, r2
 800d018:	68f8      	ldr	r0, [r7, #12]
 800d01a:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d01c:	e004      	b.n	800d028 <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800d024:	68f8      	ldr	r0, [r7, #12]
 800d026:	4798      	blx	r3
}
 800d028:	bf00      	nop
 800d02a:	3710      	adds	r7, #16
 800d02c:	46bd      	mov	sp, r7
 800d02e:	bd80      	pop	{r7, pc}

0800d030 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800d030:	b580      	push	{r7, lr}
 800d032:	b086      	sub	sp, #24
 800d034:	af00      	add	r7, sp, #0
 800d036:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d03c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800d03e:	697b      	ldr	r3, [r7, #20]
 800d040:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d044:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800d046:	697b      	ldr	r3, [r7, #20]
 800d048:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d04c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800d04e:	697b      	ldr	r3, [r7, #20]
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	689b      	ldr	r3, [r3, #8]
 800d054:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d058:	2b80      	cmp	r3, #128	@ 0x80
 800d05a:	d109      	bne.n	800d070 <UART_DMAError+0x40>
 800d05c:	693b      	ldr	r3, [r7, #16]
 800d05e:	2b21      	cmp	r3, #33	@ 0x21
 800d060:	d106      	bne.n	800d070 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800d062:	697b      	ldr	r3, [r7, #20]
 800d064:	2200      	movs	r2, #0
 800d066:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800d06a:	6978      	ldr	r0, [r7, #20]
 800d06c:	f7ff fe7c 	bl	800cd68 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800d070:	697b      	ldr	r3, [r7, #20]
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	689b      	ldr	r3, [r3, #8]
 800d076:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d07a:	2b40      	cmp	r3, #64	@ 0x40
 800d07c:	d109      	bne.n	800d092 <UART_DMAError+0x62>
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	2b22      	cmp	r3, #34	@ 0x22
 800d082:	d106      	bne.n	800d092 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800d084:	697b      	ldr	r3, [r7, #20]
 800d086:	2200      	movs	r2, #0
 800d088:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800d08c:	6978      	ldr	r0, [r7, #20]
 800d08e:	f7ff feac 	bl	800cdea <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800d092:	697b      	ldr	r3, [r7, #20]
 800d094:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d098:	f043 0210 	orr.w	r2, r3, #16
 800d09c:	697b      	ldr	r3, [r7, #20]
 800d09e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800d0a2:	697b      	ldr	r3, [r7, #20]
 800d0a4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800d0a8:	6978      	ldr	r0, [r7, #20]
 800d0aa:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d0ac:	bf00      	nop
 800d0ae:	3718      	adds	r7, #24
 800d0b0:	46bd      	mov	sp, r7
 800d0b2:	bd80      	pop	{r7, pc}

0800d0b4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d0b4:	b580      	push	{r7, lr}
 800d0b6:	b084      	sub	sp, #16
 800d0b8:	af00      	add	r7, sp, #0
 800d0ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d0c0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	2200      	movs	r2, #0
 800d0c6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800d0d0:	68f8      	ldr	r0, [r7, #12]
 800d0d2:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d0d4:	bf00      	nop
 800d0d6:	3710      	adds	r7, #16
 800d0d8:	46bd      	mov	sp, r7
 800d0da:	bd80      	pop	{r7, pc}

0800d0dc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d0dc:	b580      	push	{r7, lr}
 800d0de:	b088      	sub	sp, #32
 800d0e0:	af00      	add	r7, sp, #0
 800d0e2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	e853 3f00 	ldrex	r3, [r3]
 800d0f0:	60bb      	str	r3, [r7, #8]
   return(result);
 800d0f2:	68bb      	ldr	r3, [r7, #8]
 800d0f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d0f8:	61fb      	str	r3, [r7, #28]
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	461a      	mov	r2, r3
 800d100:	69fb      	ldr	r3, [r7, #28]
 800d102:	61bb      	str	r3, [r7, #24]
 800d104:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d106:	6979      	ldr	r1, [r7, #20]
 800d108:	69ba      	ldr	r2, [r7, #24]
 800d10a:	e841 2300 	strex	r3, r2, [r1]
 800d10e:	613b      	str	r3, [r7, #16]
   return(result);
 800d110:	693b      	ldr	r3, [r7, #16]
 800d112:	2b00      	cmp	r3, #0
 800d114:	d1e6      	bne.n	800d0e4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	2220      	movs	r2, #32
 800d11a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	2200      	movs	r2, #0
 800d122:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800d12a:	6878      	ldr	r0, [r7, #4]
 800d12c:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d12e:	bf00      	nop
 800d130:	3720      	adds	r7, #32
 800d132:	46bd      	mov	sp, r7
 800d134:	bd80      	pop	{r7, pc}

0800d136 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d136:	b480      	push	{r7}
 800d138:	b083      	sub	sp, #12
 800d13a:	af00      	add	r7, sp, #0
 800d13c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d13e:	bf00      	nop
 800d140:	370c      	adds	r7, #12
 800d142:	46bd      	mov	sp, r7
 800d144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d148:	4770      	bx	lr

0800d14a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800d14a:	b480      	push	{r7}
 800d14c:	b083      	sub	sp, #12
 800d14e:	af00      	add	r7, sp, #0
 800d150:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800d152:	bf00      	nop
 800d154:	370c      	adds	r7, #12
 800d156:	46bd      	mov	sp, r7
 800d158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d15c:	4770      	bx	lr

0800d15e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800d15e:	b480      	push	{r7}
 800d160:	b083      	sub	sp, #12
 800d162:	af00      	add	r7, sp, #0
 800d164:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800d166:	bf00      	nop
 800d168:	370c      	adds	r7, #12
 800d16a:	46bd      	mov	sp, r7
 800d16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d170:	4770      	bx	lr

0800d172 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d172:	b480      	push	{r7}
 800d174:	b085      	sub	sp, #20
 800d176:	af00      	add	r7, sp, #0
 800d178:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d180:	2b01      	cmp	r3, #1
 800d182:	d101      	bne.n	800d188 <HAL_UARTEx_DisableFifoMode+0x16>
 800d184:	2302      	movs	r3, #2
 800d186:	e027      	b.n	800d1d8 <HAL_UARTEx_DisableFifoMode+0x66>
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	2201      	movs	r2, #1
 800d18c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	2224      	movs	r2, #36	@ 0x24
 800d194:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	681a      	ldr	r2, [r3, #0]
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	f022 0201 	bic.w	r2, r2, #1
 800d1ae:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800d1b6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	2200      	movs	r2, #0
 800d1bc:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	68fa      	ldr	r2, [r7, #12]
 800d1c4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	2220      	movs	r2, #32
 800d1ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	2200      	movs	r2, #0
 800d1d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d1d6:	2300      	movs	r3, #0
}
 800d1d8:	4618      	mov	r0, r3
 800d1da:	3714      	adds	r7, #20
 800d1dc:	46bd      	mov	sp, r7
 800d1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e2:	4770      	bx	lr

0800d1e4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d1e4:	b580      	push	{r7, lr}
 800d1e6:	b084      	sub	sp, #16
 800d1e8:	af00      	add	r7, sp, #0
 800d1ea:	6078      	str	r0, [r7, #4]
 800d1ec:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d1f4:	2b01      	cmp	r3, #1
 800d1f6:	d101      	bne.n	800d1fc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d1f8:	2302      	movs	r3, #2
 800d1fa:	e02d      	b.n	800d258 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	2201      	movs	r2, #1
 800d200:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	2224      	movs	r2, #36	@ 0x24
 800d208:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	681a      	ldr	r2, [r3, #0]
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	f022 0201 	bic.w	r2, r2, #1
 800d222:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	689b      	ldr	r3, [r3, #8]
 800d22a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	683a      	ldr	r2, [r7, #0]
 800d234:	430a      	orrs	r2, r1
 800d236:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d238:	6878      	ldr	r0, [r7, #4]
 800d23a:	f000 f84f 	bl	800d2dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	68fa      	ldr	r2, [r7, #12]
 800d244:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	2220      	movs	r2, #32
 800d24a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	2200      	movs	r2, #0
 800d252:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d256:	2300      	movs	r3, #0
}
 800d258:	4618      	mov	r0, r3
 800d25a:	3710      	adds	r7, #16
 800d25c:	46bd      	mov	sp, r7
 800d25e:	bd80      	pop	{r7, pc}

0800d260 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d260:	b580      	push	{r7, lr}
 800d262:	b084      	sub	sp, #16
 800d264:	af00      	add	r7, sp, #0
 800d266:	6078      	str	r0, [r7, #4]
 800d268:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d270:	2b01      	cmp	r3, #1
 800d272:	d101      	bne.n	800d278 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d274:	2302      	movs	r3, #2
 800d276:	e02d      	b.n	800d2d4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	2201      	movs	r2, #1
 800d27c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	2224      	movs	r2, #36	@ 0x24
 800d284:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	681a      	ldr	r2, [r3, #0]
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	f022 0201 	bic.w	r2, r2, #1
 800d29e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	689b      	ldr	r3, [r3, #8]
 800d2a6:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	683a      	ldr	r2, [r7, #0]
 800d2b0:	430a      	orrs	r2, r1
 800d2b2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d2b4:	6878      	ldr	r0, [r7, #4]
 800d2b6:	f000 f811 	bl	800d2dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	68fa      	ldr	r2, [r7, #12]
 800d2c0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	2220      	movs	r2, #32
 800d2c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	2200      	movs	r2, #0
 800d2ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d2d2:	2300      	movs	r3, #0
}
 800d2d4:	4618      	mov	r0, r3
 800d2d6:	3710      	adds	r7, #16
 800d2d8:	46bd      	mov	sp, r7
 800d2da:	bd80      	pop	{r7, pc}

0800d2dc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d2dc:	b480      	push	{r7}
 800d2de:	b085      	sub	sp, #20
 800d2e0:	af00      	add	r7, sp, #0
 800d2e2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d108      	bne.n	800d2fe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	2201      	movs	r2, #1
 800d2f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	2201      	movs	r2, #1
 800d2f8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d2fc:	e031      	b.n	800d362 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d2fe:	2308      	movs	r3, #8
 800d300:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d302:	2308      	movs	r3, #8
 800d304:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	689b      	ldr	r3, [r3, #8]
 800d30c:	0e5b      	lsrs	r3, r3, #25
 800d30e:	b2db      	uxtb	r3, r3
 800d310:	f003 0307 	and.w	r3, r3, #7
 800d314:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	689b      	ldr	r3, [r3, #8]
 800d31c:	0f5b      	lsrs	r3, r3, #29
 800d31e:	b2db      	uxtb	r3, r3
 800d320:	f003 0307 	and.w	r3, r3, #7
 800d324:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d326:	7bbb      	ldrb	r3, [r7, #14]
 800d328:	7b3a      	ldrb	r2, [r7, #12]
 800d32a:	4911      	ldr	r1, [pc, #68]	@ (800d370 <UARTEx_SetNbDataToProcess+0x94>)
 800d32c:	5c8a      	ldrb	r2, [r1, r2]
 800d32e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d332:	7b3a      	ldrb	r2, [r7, #12]
 800d334:	490f      	ldr	r1, [pc, #60]	@ (800d374 <UARTEx_SetNbDataToProcess+0x98>)
 800d336:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d338:	fb93 f3f2 	sdiv	r3, r3, r2
 800d33c:	b29a      	uxth	r2, r3
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d344:	7bfb      	ldrb	r3, [r7, #15]
 800d346:	7b7a      	ldrb	r2, [r7, #13]
 800d348:	4909      	ldr	r1, [pc, #36]	@ (800d370 <UARTEx_SetNbDataToProcess+0x94>)
 800d34a:	5c8a      	ldrb	r2, [r1, r2]
 800d34c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d350:	7b7a      	ldrb	r2, [r7, #13]
 800d352:	4908      	ldr	r1, [pc, #32]	@ (800d374 <UARTEx_SetNbDataToProcess+0x98>)
 800d354:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d356:	fb93 f3f2 	sdiv	r3, r3, r2
 800d35a:	b29a      	uxth	r2, r3
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800d362:	bf00      	nop
 800d364:	3714      	adds	r7, #20
 800d366:	46bd      	mov	sp, r7
 800d368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d36c:	4770      	bx	lr
 800d36e:	bf00      	nop
 800d370:	0800e354 	.word	0x0800e354
 800d374:	0800e35c 	.word	0x0800e35c

0800d378 <arm_mat_add_f32>:
#else
arm_status arm_mat_add_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800d378:	b480      	push	{r7}
 800d37a:	b08b      	sub	sp, #44	@ 0x2c
 800d37c:	af00      	add	r7, sp, #0
 800d37e:	60f8      	str	r0, [r7, #12]
 800d380:	60b9      	str	r1, [r7, #8]
 800d382:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	685b      	ldr	r3, [r3, #4]
 800d388:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 800d38a:	68bb      	ldr	r3, [r7, #8]
 800d38c:	685b      	ldr	r3, [r3, #4]
 800d38e:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	685b      	ldr	r3, [r3, #4]
 800d394:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	881b      	ldrh	r3, [r3, #0]
 800d39a:	461a      	mov	r2, r3
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	885b      	ldrh	r3, [r3, #2]
 800d3a0:	fb02 f303 	mul.w	r3, r2, r3
 800d3a4:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800d3a6:	697b      	ldr	r3, [r7, #20]
 800d3a8:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800d3aa:	e013      	b.n	800d3d4 <arm_mat_add_f32+0x5c>
    {
      /* C(m,n) = A(m,n) + B(m,n) */

      /* Add and store result in destination buffer. */
      *pOut++ = *pInA++ + *pInB++;
 800d3ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3ae:	1d1a      	adds	r2, r3, #4
 800d3b0:	627a      	str	r2, [r7, #36]	@ 0x24
 800d3b2:	ed93 7a00 	vldr	s14, [r3]
 800d3b6:	6a3b      	ldr	r3, [r7, #32]
 800d3b8:	1d1a      	adds	r2, r3, #4
 800d3ba:	623a      	str	r2, [r7, #32]
 800d3bc:	edd3 7a00 	vldr	s15, [r3]
 800d3c0:	69fb      	ldr	r3, [r7, #28]
 800d3c2:	1d1a      	adds	r2, r3, #4
 800d3c4:	61fa      	str	r2, [r7, #28]
 800d3c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d3ca:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800d3ce:	69bb      	ldr	r3, [r7, #24]
 800d3d0:	3b01      	subs	r3, #1
 800d3d2:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 800d3d4:	69bb      	ldr	r3, [r7, #24]
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d1e8      	bne.n	800d3ac <arm_mat_add_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800d3da:	2300      	movs	r3, #0
 800d3dc:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 800d3de:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800d3e2:	4618      	mov	r0, r3
 800d3e4:	372c      	adds	r7, #44	@ 0x2c
 800d3e6:	46bd      	mov	sp, r7
 800d3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ec:	4770      	bx	lr

0800d3ee <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 800d3ee:	b480      	push	{r7}
 800d3f0:	b085      	sub	sp, #20
 800d3f2:	af00      	add	r7, sp, #0
 800d3f4:	60f8      	str	r0, [r7, #12]
 800d3f6:	607b      	str	r3, [r7, #4]
 800d3f8:	460b      	mov	r3, r1
 800d3fa:	817b      	strh	r3, [r7, #10]
 800d3fc:	4613      	mov	r3, r2
 800d3fe:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	897a      	ldrh	r2, [r7, #10]
 800d404:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	893a      	ldrh	r2, [r7, #8]
 800d40a:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	687a      	ldr	r2, [r7, #4]
 800d410:	605a      	str	r2, [r3, #4]
}
 800d412:	bf00      	nop
 800d414:	3714      	adds	r7, #20
 800d416:	46bd      	mov	sp, r7
 800d418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d41c:	4770      	bx	lr

0800d41e <arm_mat_mult_f32>:
 */
arm_status arm_mat_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800d41e:	b480      	push	{r7}
 800d420:	b093      	sub	sp, #76	@ 0x4c
 800d422:	af00      	add	r7, sp, #0
 800d424:	60f8      	str	r0, [r7, #12]
 800d426:	60b9      	str	r1, [r7, #8]
 800d428:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* Input data matrix pointer A */
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	685b      	ldr	r3, [r3, #4]
 800d42e:	647b      	str	r3, [r7, #68]	@ 0x44
  float32_t *pIn2 = pSrcB->pData;                /* Input data matrix pointer B */
 800d430:	68bb      	ldr	r3, [r7, #8]
 800d432:	685b      	ldr	r3, [r3, #4]
 800d434:	643b      	str	r3, [r7, #64]	@ 0x40
  float32_t *pInA = pSrcA->pData;                /* Input data matrix pointer A */
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	685b      	ldr	r3, [r3, #4]
 800d43a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  float32_t *pInB = pSrcB->pData;                /* Input data matrix pointer B */
 800d43c:	68bb      	ldr	r3, [r7, #8]
 800d43e:	685b      	ldr	r3, [r3, #4]
 800d440:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	685b      	ldr	r3, [r3, #4]
 800d446:	61fb      	str	r3, [r7, #28]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  float32_t sum;                                 /* Accumulator */
  uint16_t numRowsA = pSrcA->numRows;            /* Number of rows of input matrix A */
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	881b      	ldrh	r3, [r3, #0]
 800d44c:	837b      	strh	r3, [r7, #26]
  uint16_t numColsB = pSrcB->numCols;            /* Number of columns of input matrix B */
 800d44e:	68bb      	ldr	r3, [r7, #8]
 800d450:	885b      	ldrh	r3, [r3, #2]
 800d452:	833b      	strh	r3, [r7, #24]
  uint16_t numColsA = pSrcA->numCols;            /* Number of columns of input matrix A */
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	885b      	ldrh	r3, [r3, #2]
 800d458:	82fb      	strh	r3, [r7, #22]
  uint32_t col, i = 0U, row = numRowsA, colCnt;  /* Loop counters */
 800d45a:	2300      	movs	r3, #0
 800d45c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d45e:	8b7b      	ldrh	r3, [r7, #26]
 800d460:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB */
    /* row loop */
    do
    {
      /* Output pointer is set to starting address of row being processed */
      px = pOut + i;
 800d462:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d464:	009b      	lsls	r3, r3, #2
 800d466:	69fa      	ldr	r2, [r7, #28]
 800d468:	4413      	add	r3, r2
 800d46a:	63bb      	str	r3, [r7, #56]	@ 0x38

      /* For every row wise process, column loop counter is to be initiated */
      col = numColsB;
 800d46c:	8b3b      	ldrh	r3, [r7, #24]
 800d46e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* For every row wise process, pIn2 pointer is set to starting address of pSrcB data */
      pIn2 = pSrcB->pData;
 800d470:	68bb      	ldr	r3, [r7, #8]
 800d472:	685b      	ldr	r3, [r3, #4]
 800d474:	643b      	str	r3, [r7, #64]	@ 0x40

      /* column loop */
      do
      {
        /* Set the variable sum, that acts as accumulator, to zero */
        sum = 0.0f;
 800d476:	f04f 0300 	mov.w	r3, #0
 800d47a:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Initialize pointer pIn1 to point to starting address of column being processed */
        pIn1 = pInA;
 800d47c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d47e:	647b      	str	r3, [r7, #68]	@ 0x44
        colCnt = numColsA % 0x4U;

#else

        /* Initialize cntCnt with number of columns */
        colCnt = numColsA;
 800d480:	8afb      	ldrh	r3, [r7, #22]
 800d482:	627b      	str	r3, [r7, #36]	@ 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

        while (colCnt > 0U)
 800d484:	e017      	b.n	800d4b6 <arm_mat_mult_f32+0x98>
        {
          /* c(m,p) = a(m,1) * b(1,p) + a(m,2) * b(2,p) + .... + a(m,n) * b(n,p) */

          /* Perform the multiply-accumulates */
          sum += *pIn1++ * *pIn2;
 800d486:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d488:	1d1a      	adds	r2, r3, #4
 800d48a:	647a      	str	r2, [r7, #68]	@ 0x44
 800d48c:	ed93 7a00 	vldr	s14, [r3]
 800d490:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d492:	edd3 7a00 	vldr	s15, [r3]
 800d496:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d49a:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800d49e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d4a2:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
          pIn2 += numColsB;
 800d4a6:	8b3b      	ldrh	r3, [r7, #24]
 800d4a8:	009b      	lsls	r3, r3, #2
 800d4aa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d4ac:	4413      	add	r3, r2
 800d4ae:	643b      	str	r3, [r7, #64]	@ 0x40

          /* Decrement loop counter */
          colCnt--;
 800d4b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4b2:	3b01      	subs	r3, #1
 800d4b4:	627b      	str	r3, [r7, #36]	@ 0x24
        while (colCnt > 0U)
 800d4b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d1e4      	bne.n	800d486 <arm_mat_mult_f32+0x68>
        }

        /* Store result in destination buffer */
        *px++ = sum;
 800d4bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4be:	1d1a      	adds	r2, r3, #4
 800d4c0:	63ba      	str	r2, [r7, #56]	@ 0x38
 800d4c2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d4c4:	601a      	str	r2, [r3, #0]

        /* Decrement column loop counter */
        col--;
 800d4c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4c8:	3b01      	subs	r3, #1
 800d4ca:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Update pointer pIn2 to point to starting address of next column */
        pIn2 = pInB + (numColsB - col);
 800d4cc:	8b3a      	ldrh	r2, [r7, #24]
 800d4ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4d0:	1ad3      	subs	r3, r2, r3
 800d4d2:	009b      	lsls	r3, r3, #2
 800d4d4:	6a3a      	ldr	r2, [r7, #32]
 800d4d6:	4413      	add	r3, r2
 800d4d8:	643b      	str	r3, [r7, #64]	@ 0x40

      } while (col > 0U);
 800d4da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d1ca      	bne.n	800d476 <arm_mat_mult_f32+0x58>

      /* Update pointer pInA to point to starting address of next row */
      i = i + numColsB;
 800d4e0:	8b3b      	ldrh	r3, [r7, #24]
 800d4e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d4e4:	4413      	add	r3, r2
 800d4e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pInA = pInA + numColsA;
 800d4e8:	8afb      	ldrh	r3, [r7, #22]
 800d4ea:	009b      	lsls	r3, r3, #2
 800d4ec:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d4ee:	4413      	add	r3, r2
 800d4f0:	63fb      	str	r3, [r7, #60]	@ 0x3c

      /* Decrement row loop counter */
      row--;
 800d4f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4f4:	3b01      	subs	r3, #1
 800d4f6:	62bb      	str	r3, [r7, #40]	@ 0x28

    } while (row > 0U);
 800d4f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d1b1      	bne.n	800d462 <arm_mat_mult_f32+0x44>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800d4fe:	2300      	movs	r3, #0
 800d500:	757b      	strb	r3, [r7, #21]
  }

  /* Return to application */
  return (status);
 800d502:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 800d506:	4618      	mov	r0, r3
 800d508:	374c      	adds	r7, #76	@ 0x4c
 800d50a:	46bd      	mov	sp, r7
 800d50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d510:	4770      	bx	lr

0800d512 <arm_mat_scale_f32>:
#else
arm_status arm_mat_scale_f32(
  const arm_matrix_instance_f32 * pSrc,
        float32_t                 scale,
        arm_matrix_instance_f32 * pDst)
{
 800d512:	b480      	push	{r7}
 800d514:	b08b      	sub	sp, #44	@ 0x2c
 800d516:	af00      	add	r7, sp, #0
 800d518:	60f8      	str	r0, [r7, #12]
 800d51a:	ed87 0a02 	vstr	s0, [r7, #8]
 800d51e:	6079      	str	r1, [r7, #4]
  float32_t *pIn = pSrc->pData;                  /* Input data matrix pointer */
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	685b      	ldr	r3, [r3, #4]
 800d524:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	685b      	ldr	r3, [r3, #4]
 800d52a:	623b      	str	r3, [r7, #32]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	881b      	ldrh	r3, [r3, #0]
 800d530:	461a      	mov	r2, r3
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	885b      	ldrh	r3, [r3, #2]
 800d536:	fb02 f303 	mul.w	r3, r2, r3
 800d53a:	61bb      	str	r3, [r7, #24]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800d53c:	69bb      	ldr	r3, [r7, #24]
 800d53e:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800d540:	e010      	b.n	800d564 <arm_mat_scale_f32+0x52>
    {
      /* C(m,n) = A(m,n) * scale */

      /* Scale and store result in destination buffer. */
      *pOut++ = (*pIn++) * scale;
 800d542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d544:	1d1a      	adds	r2, r3, #4
 800d546:	627a      	str	r2, [r7, #36]	@ 0x24
 800d548:	ed93 7a00 	vldr	s14, [r3]
 800d54c:	6a3b      	ldr	r3, [r7, #32]
 800d54e:	1d1a      	adds	r2, r3, #4
 800d550:	623a      	str	r2, [r7, #32]
 800d552:	edd7 7a02 	vldr	s15, [r7, #8]
 800d556:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d55a:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800d55e:	69fb      	ldr	r3, [r7, #28]
 800d560:	3b01      	subs	r3, #1
 800d562:	61fb      	str	r3, [r7, #28]
    while (blkCnt > 0U)
 800d564:	69fb      	ldr	r3, [r7, #28]
 800d566:	2b00      	cmp	r3, #0
 800d568:	d1eb      	bne.n	800d542 <arm_mat_scale_f32+0x30>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800d56a:	2300      	movs	r3, #0
 800d56c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return to application */
  return (status);
 800d56e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d572:	4618      	mov	r0, r3
 800d574:	372c      	adds	r7, #44	@ 0x2c
 800d576:	46bd      	mov	sp, r7
 800d578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d57c:	4770      	bx	lr
	...

0800d580 <malloc>:
 800d580:	4b02      	ldr	r3, [pc, #8]	@ (800d58c <malloc+0xc>)
 800d582:	4601      	mov	r1, r0
 800d584:	6818      	ldr	r0, [r3, #0]
 800d586:	f000 b825 	b.w	800d5d4 <_malloc_r>
 800d58a:	bf00      	nop
 800d58c:	20000184 	.word	0x20000184

0800d590 <sbrk_aligned>:
 800d590:	b570      	push	{r4, r5, r6, lr}
 800d592:	4e0f      	ldr	r6, [pc, #60]	@ (800d5d0 <sbrk_aligned+0x40>)
 800d594:	460c      	mov	r4, r1
 800d596:	6831      	ldr	r1, [r6, #0]
 800d598:	4605      	mov	r5, r0
 800d59a:	b911      	cbnz	r1, 800d5a2 <sbrk_aligned+0x12>
 800d59c:	f000 f8ae 	bl	800d6fc <_sbrk_r>
 800d5a0:	6030      	str	r0, [r6, #0]
 800d5a2:	4621      	mov	r1, r4
 800d5a4:	4628      	mov	r0, r5
 800d5a6:	f000 f8a9 	bl	800d6fc <_sbrk_r>
 800d5aa:	1c43      	adds	r3, r0, #1
 800d5ac:	d103      	bne.n	800d5b6 <sbrk_aligned+0x26>
 800d5ae:	f04f 34ff 	mov.w	r4, #4294967295
 800d5b2:	4620      	mov	r0, r4
 800d5b4:	bd70      	pop	{r4, r5, r6, pc}
 800d5b6:	1cc4      	adds	r4, r0, #3
 800d5b8:	f024 0403 	bic.w	r4, r4, #3
 800d5bc:	42a0      	cmp	r0, r4
 800d5be:	d0f8      	beq.n	800d5b2 <sbrk_aligned+0x22>
 800d5c0:	1a21      	subs	r1, r4, r0
 800d5c2:	4628      	mov	r0, r5
 800d5c4:	f000 f89a 	bl	800d6fc <_sbrk_r>
 800d5c8:	3001      	adds	r0, #1
 800d5ca:	d1f2      	bne.n	800d5b2 <sbrk_aligned+0x22>
 800d5cc:	e7ef      	b.n	800d5ae <sbrk_aligned+0x1e>
 800d5ce:	bf00      	nop
 800d5d0:	200021fc 	.word	0x200021fc

0800d5d4 <_malloc_r>:
 800d5d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d5d8:	1ccd      	adds	r5, r1, #3
 800d5da:	f025 0503 	bic.w	r5, r5, #3
 800d5de:	3508      	adds	r5, #8
 800d5e0:	2d0c      	cmp	r5, #12
 800d5e2:	bf38      	it	cc
 800d5e4:	250c      	movcc	r5, #12
 800d5e6:	2d00      	cmp	r5, #0
 800d5e8:	4606      	mov	r6, r0
 800d5ea:	db01      	blt.n	800d5f0 <_malloc_r+0x1c>
 800d5ec:	42a9      	cmp	r1, r5
 800d5ee:	d904      	bls.n	800d5fa <_malloc_r+0x26>
 800d5f0:	230c      	movs	r3, #12
 800d5f2:	6033      	str	r3, [r6, #0]
 800d5f4:	2000      	movs	r0, #0
 800d5f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d5fa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d6d0 <_malloc_r+0xfc>
 800d5fe:	f000 f869 	bl	800d6d4 <__malloc_lock>
 800d602:	f8d8 3000 	ldr.w	r3, [r8]
 800d606:	461c      	mov	r4, r3
 800d608:	bb44      	cbnz	r4, 800d65c <_malloc_r+0x88>
 800d60a:	4629      	mov	r1, r5
 800d60c:	4630      	mov	r0, r6
 800d60e:	f7ff ffbf 	bl	800d590 <sbrk_aligned>
 800d612:	1c43      	adds	r3, r0, #1
 800d614:	4604      	mov	r4, r0
 800d616:	d158      	bne.n	800d6ca <_malloc_r+0xf6>
 800d618:	f8d8 4000 	ldr.w	r4, [r8]
 800d61c:	4627      	mov	r7, r4
 800d61e:	2f00      	cmp	r7, #0
 800d620:	d143      	bne.n	800d6aa <_malloc_r+0xd6>
 800d622:	2c00      	cmp	r4, #0
 800d624:	d04b      	beq.n	800d6be <_malloc_r+0xea>
 800d626:	6823      	ldr	r3, [r4, #0]
 800d628:	4639      	mov	r1, r7
 800d62a:	4630      	mov	r0, r6
 800d62c:	eb04 0903 	add.w	r9, r4, r3
 800d630:	f000 f864 	bl	800d6fc <_sbrk_r>
 800d634:	4581      	cmp	r9, r0
 800d636:	d142      	bne.n	800d6be <_malloc_r+0xea>
 800d638:	6821      	ldr	r1, [r4, #0]
 800d63a:	1a6d      	subs	r5, r5, r1
 800d63c:	4629      	mov	r1, r5
 800d63e:	4630      	mov	r0, r6
 800d640:	f7ff ffa6 	bl	800d590 <sbrk_aligned>
 800d644:	3001      	adds	r0, #1
 800d646:	d03a      	beq.n	800d6be <_malloc_r+0xea>
 800d648:	6823      	ldr	r3, [r4, #0]
 800d64a:	442b      	add	r3, r5
 800d64c:	6023      	str	r3, [r4, #0]
 800d64e:	f8d8 3000 	ldr.w	r3, [r8]
 800d652:	685a      	ldr	r2, [r3, #4]
 800d654:	bb62      	cbnz	r2, 800d6b0 <_malloc_r+0xdc>
 800d656:	f8c8 7000 	str.w	r7, [r8]
 800d65a:	e00f      	b.n	800d67c <_malloc_r+0xa8>
 800d65c:	6822      	ldr	r2, [r4, #0]
 800d65e:	1b52      	subs	r2, r2, r5
 800d660:	d420      	bmi.n	800d6a4 <_malloc_r+0xd0>
 800d662:	2a0b      	cmp	r2, #11
 800d664:	d917      	bls.n	800d696 <_malloc_r+0xc2>
 800d666:	1961      	adds	r1, r4, r5
 800d668:	42a3      	cmp	r3, r4
 800d66a:	6025      	str	r5, [r4, #0]
 800d66c:	bf18      	it	ne
 800d66e:	6059      	strne	r1, [r3, #4]
 800d670:	6863      	ldr	r3, [r4, #4]
 800d672:	bf08      	it	eq
 800d674:	f8c8 1000 	streq.w	r1, [r8]
 800d678:	5162      	str	r2, [r4, r5]
 800d67a:	604b      	str	r3, [r1, #4]
 800d67c:	4630      	mov	r0, r6
 800d67e:	f000 f82f 	bl	800d6e0 <__malloc_unlock>
 800d682:	f104 000b 	add.w	r0, r4, #11
 800d686:	1d23      	adds	r3, r4, #4
 800d688:	f020 0007 	bic.w	r0, r0, #7
 800d68c:	1ac2      	subs	r2, r0, r3
 800d68e:	bf1c      	itt	ne
 800d690:	1a1b      	subne	r3, r3, r0
 800d692:	50a3      	strne	r3, [r4, r2]
 800d694:	e7af      	b.n	800d5f6 <_malloc_r+0x22>
 800d696:	6862      	ldr	r2, [r4, #4]
 800d698:	42a3      	cmp	r3, r4
 800d69a:	bf0c      	ite	eq
 800d69c:	f8c8 2000 	streq.w	r2, [r8]
 800d6a0:	605a      	strne	r2, [r3, #4]
 800d6a2:	e7eb      	b.n	800d67c <_malloc_r+0xa8>
 800d6a4:	4623      	mov	r3, r4
 800d6a6:	6864      	ldr	r4, [r4, #4]
 800d6a8:	e7ae      	b.n	800d608 <_malloc_r+0x34>
 800d6aa:	463c      	mov	r4, r7
 800d6ac:	687f      	ldr	r7, [r7, #4]
 800d6ae:	e7b6      	b.n	800d61e <_malloc_r+0x4a>
 800d6b0:	461a      	mov	r2, r3
 800d6b2:	685b      	ldr	r3, [r3, #4]
 800d6b4:	42a3      	cmp	r3, r4
 800d6b6:	d1fb      	bne.n	800d6b0 <_malloc_r+0xdc>
 800d6b8:	2300      	movs	r3, #0
 800d6ba:	6053      	str	r3, [r2, #4]
 800d6bc:	e7de      	b.n	800d67c <_malloc_r+0xa8>
 800d6be:	230c      	movs	r3, #12
 800d6c0:	6033      	str	r3, [r6, #0]
 800d6c2:	4630      	mov	r0, r6
 800d6c4:	f000 f80c 	bl	800d6e0 <__malloc_unlock>
 800d6c8:	e794      	b.n	800d5f4 <_malloc_r+0x20>
 800d6ca:	6005      	str	r5, [r0, #0]
 800d6cc:	e7d6      	b.n	800d67c <_malloc_r+0xa8>
 800d6ce:	bf00      	nop
 800d6d0:	20002200 	.word	0x20002200

0800d6d4 <__malloc_lock>:
 800d6d4:	4801      	ldr	r0, [pc, #4]	@ (800d6dc <__malloc_lock+0x8>)
 800d6d6:	f000 b84b 	b.w	800d770 <__retarget_lock_acquire_recursive>
 800d6da:	bf00      	nop
 800d6dc:	20002340 	.word	0x20002340

0800d6e0 <__malloc_unlock>:
 800d6e0:	4801      	ldr	r0, [pc, #4]	@ (800d6e8 <__malloc_unlock+0x8>)
 800d6e2:	f000 b846 	b.w	800d772 <__retarget_lock_release_recursive>
 800d6e6:	bf00      	nop
 800d6e8:	20002340 	.word	0x20002340

0800d6ec <memset>:
 800d6ec:	4402      	add	r2, r0
 800d6ee:	4603      	mov	r3, r0
 800d6f0:	4293      	cmp	r3, r2
 800d6f2:	d100      	bne.n	800d6f6 <memset+0xa>
 800d6f4:	4770      	bx	lr
 800d6f6:	f803 1b01 	strb.w	r1, [r3], #1
 800d6fa:	e7f9      	b.n	800d6f0 <memset+0x4>

0800d6fc <_sbrk_r>:
 800d6fc:	b538      	push	{r3, r4, r5, lr}
 800d6fe:	4d06      	ldr	r5, [pc, #24]	@ (800d718 <_sbrk_r+0x1c>)
 800d700:	2300      	movs	r3, #0
 800d702:	4604      	mov	r4, r0
 800d704:	4608      	mov	r0, r1
 800d706:	602b      	str	r3, [r5, #0]
 800d708:	f7f7 fd62 	bl	80051d0 <_sbrk>
 800d70c:	1c43      	adds	r3, r0, #1
 800d70e:	d102      	bne.n	800d716 <_sbrk_r+0x1a>
 800d710:	682b      	ldr	r3, [r5, #0]
 800d712:	b103      	cbz	r3, 800d716 <_sbrk_r+0x1a>
 800d714:	6023      	str	r3, [r4, #0]
 800d716:	bd38      	pop	{r3, r4, r5, pc}
 800d718:	2000233c 	.word	0x2000233c

0800d71c <__errno>:
 800d71c:	4b01      	ldr	r3, [pc, #4]	@ (800d724 <__errno+0x8>)
 800d71e:	6818      	ldr	r0, [r3, #0]
 800d720:	4770      	bx	lr
 800d722:	bf00      	nop
 800d724:	20000184 	.word	0x20000184

0800d728 <__libc_init_array>:
 800d728:	b570      	push	{r4, r5, r6, lr}
 800d72a:	4d0d      	ldr	r5, [pc, #52]	@ (800d760 <__libc_init_array+0x38>)
 800d72c:	4c0d      	ldr	r4, [pc, #52]	@ (800d764 <__libc_init_array+0x3c>)
 800d72e:	1b64      	subs	r4, r4, r5
 800d730:	10a4      	asrs	r4, r4, #2
 800d732:	2600      	movs	r6, #0
 800d734:	42a6      	cmp	r6, r4
 800d736:	d109      	bne.n	800d74c <__libc_init_array+0x24>
 800d738:	4d0b      	ldr	r5, [pc, #44]	@ (800d768 <__libc_init_array+0x40>)
 800d73a:	4c0c      	ldr	r4, [pc, #48]	@ (800d76c <__libc_init_array+0x44>)
 800d73c:	f000 fdbe 	bl	800e2bc <_init>
 800d740:	1b64      	subs	r4, r4, r5
 800d742:	10a4      	asrs	r4, r4, #2
 800d744:	2600      	movs	r6, #0
 800d746:	42a6      	cmp	r6, r4
 800d748:	d105      	bne.n	800d756 <__libc_init_array+0x2e>
 800d74a:	bd70      	pop	{r4, r5, r6, pc}
 800d74c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d750:	4798      	blx	r3
 800d752:	3601      	adds	r6, #1
 800d754:	e7ee      	b.n	800d734 <__libc_init_array+0xc>
 800d756:	f855 3b04 	ldr.w	r3, [r5], #4
 800d75a:	4798      	blx	r3
 800d75c:	3601      	adds	r6, #1
 800d75e:	e7f2      	b.n	800d746 <__libc_init_array+0x1e>
 800d760:	0800e73c 	.word	0x0800e73c
 800d764:	0800e73c 	.word	0x0800e73c
 800d768:	0800e73c 	.word	0x0800e73c
 800d76c:	0800e740 	.word	0x0800e740

0800d770 <__retarget_lock_acquire_recursive>:
 800d770:	4770      	bx	lr

0800d772 <__retarget_lock_release_recursive>:
 800d772:	4770      	bx	lr

0800d774 <memcpy>:
 800d774:	440a      	add	r2, r1
 800d776:	4291      	cmp	r1, r2
 800d778:	f100 33ff 	add.w	r3, r0, #4294967295
 800d77c:	d100      	bne.n	800d780 <memcpy+0xc>
 800d77e:	4770      	bx	lr
 800d780:	b510      	push	{r4, lr}
 800d782:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d786:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d78a:	4291      	cmp	r1, r2
 800d78c:	d1f9      	bne.n	800d782 <memcpy+0xe>
 800d78e:	bd10      	pop	{r4, pc}

0800d790 <sqrtf>:
 800d790:	b508      	push	{r3, lr}
 800d792:	ed2d 8b02 	vpush	{d8}
 800d796:	eeb0 8a40 	vmov.f32	s16, s0
 800d79a:	f000 f8a1 	bl	800d8e0 <__ieee754_sqrtf>
 800d79e:	eeb4 8a48 	vcmp.f32	s16, s16
 800d7a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7a6:	d60c      	bvs.n	800d7c2 <sqrtf+0x32>
 800d7a8:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800d7c8 <sqrtf+0x38>
 800d7ac:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800d7b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7b4:	d505      	bpl.n	800d7c2 <sqrtf+0x32>
 800d7b6:	f7ff ffb1 	bl	800d71c <__errno>
 800d7ba:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800d7be:	2321      	movs	r3, #33	@ 0x21
 800d7c0:	6003      	str	r3, [r0, #0]
 800d7c2:	ecbd 8b02 	vpop	{d8}
 800d7c6:	bd08      	pop	{r3, pc}
 800d7c8:	00000000 	.word	0x00000000

0800d7cc <cosf>:
 800d7cc:	ee10 3a10 	vmov	r3, s0
 800d7d0:	b507      	push	{r0, r1, r2, lr}
 800d7d2:	4a1e      	ldr	r2, [pc, #120]	@ (800d84c <cosf+0x80>)
 800d7d4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d7d8:	4293      	cmp	r3, r2
 800d7da:	d806      	bhi.n	800d7ea <cosf+0x1e>
 800d7dc:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 800d850 <cosf+0x84>
 800d7e0:	b003      	add	sp, #12
 800d7e2:	f85d eb04 	ldr.w	lr, [sp], #4
 800d7e6:	f000 b87f 	b.w	800d8e8 <__kernel_cosf>
 800d7ea:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800d7ee:	d304      	bcc.n	800d7fa <cosf+0x2e>
 800d7f0:	ee30 0a40 	vsub.f32	s0, s0, s0
 800d7f4:	b003      	add	sp, #12
 800d7f6:	f85d fb04 	ldr.w	pc, [sp], #4
 800d7fa:	4668      	mov	r0, sp
 800d7fc:	f000 f914 	bl	800da28 <__ieee754_rem_pio2f>
 800d800:	f000 0003 	and.w	r0, r0, #3
 800d804:	2801      	cmp	r0, #1
 800d806:	d009      	beq.n	800d81c <cosf+0x50>
 800d808:	2802      	cmp	r0, #2
 800d80a:	d010      	beq.n	800d82e <cosf+0x62>
 800d80c:	b9b0      	cbnz	r0, 800d83c <cosf+0x70>
 800d80e:	eddd 0a01 	vldr	s1, [sp, #4]
 800d812:	ed9d 0a00 	vldr	s0, [sp]
 800d816:	f000 f867 	bl	800d8e8 <__kernel_cosf>
 800d81a:	e7eb      	b.n	800d7f4 <cosf+0x28>
 800d81c:	eddd 0a01 	vldr	s1, [sp, #4]
 800d820:	ed9d 0a00 	vldr	s0, [sp]
 800d824:	f000 f8b8 	bl	800d998 <__kernel_sinf>
 800d828:	eeb1 0a40 	vneg.f32	s0, s0
 800d82c:	e7e2      	b.n	800d7f4 <cosf+0x28>
 800d82e:	eddd 0a01 	vldr	s1, [sp, #4]
 800d832:	ed9d 0a00 	vldr	s0, [sp]
 800d836:	f000 f857 	bl	800d8e8 <__kernel_cosf>
 800d83a:	e7f5      	b.n	800d828 <cosf+0x5c>
 800d83c:	eddd 0a01 	vldr	s1, [sp, #4]
 800d840:	ed9d 0a00 	vldr	s0, [sp]
 800d844:	2001      	movs	r0, #1
 800d846:	f000 f8a7 	bl	800d998 <__kernel_sinf>
 800d84a:	e7d3      	b.n	800d7f4 <cosf+0x28>
 800d84c:	3f490fd8 	.word	0x3f490fd8
 800d850:	00000000 	.word	0x00000000

0800d854 <sinf>:
 800d854:	ee10 3a10 	vmov	r3, s0
 800d858:	b507      	push	{r0, r1, r2, lr}
 800d85a:	4a1f      	ldr	r2, [pc, #124]	@ (800d8d8 <sinf+0x84>)
 800d85c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d860:	4293      	cmp	r3, r2
 800d862:	d807      	bhi.n	800d874 <sinf+0x20>
 800d864:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800d8dc <sinf+0x88>
 800d868:	2000      	movs	r0, #0
 800d86a:	b003      	add	sp, #12
 800d86c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d870:	f000 b892 	b.w	800d998 <__kernel_sinf>
 800d874:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800d878:	d304      	bcc.n	800d884 <sinf+0x30>
 800d87a:	ee30 0a40 	vsub.f32	s0, s0, s0
 800d87e:	b003      	add	sp, #12
 800d880:	f85d fb04 	ldr.w	pc, [sp], #4
 800d884:	4668      	mov	r0, sp
 800d886:	f000 f8cf 	bl	800da28 <__ieee754_rem_pio2f>
 800d88a:	f000 0003 	and.w	r0, r0, #3
 800d88e:	2801      	cmp	r0, #1
 800d890:	d00a      	beq.n	800d8a8 <sinf+0x54>
 800d892:	2802      	cmp	r0, #2
 800d894:	d00f      	beq.n	800d8b6 <sinf+0x62>
 800d896:	b9c0      	cbnz	r0, 800d8ca <sinf+0x76>
 800d898:	eddd 0a01 	vldr	s1, [sp, #4]
 800d89c:	ed9d 0a00 	vldr	s0, [sp]
 800d8a0:	2001      	movs	r0, #1
 800d8a2:	f000 f879 	bl	800d998 <__kernel_sinf>
 800d8a6:	e7ea      	b.n	800d87e <sinf+0x2a>
 800d8a8:	eddd 0a01 	vldr	s1, [sp, #4]
 800d8ac:	ed9d 0a00 	vldr	s0, [sp]
 800d8b0:	f000 f81a 	bl	800d8e8 <__kernel_cosf>
 800d8b4:	e7e3      	b.n	800d87e <sinf+0x2a>
 800d8b6:	eddd 0a01 	vldr	s1, [sp, #4]
 800d8ba:	ed9d 0a00 	vldr	s0, [sp]
 800d8be:	2001      	movs	r0, #1
 800d8c0:	f000 f86a 	bl	800d998 <__kernel_sinf>
 800d8c4:	eeb1 0a40 	vneg.f32	s0, s0
 800d8c8:	e7d9      	b.n	800d87e <sinf+0x2a>
 800d8ca:	eddd 0a01 	vldr	s1, [sp, #4]
 800d8ce:	ed9d 0a00 	vldr	s0, [sp]
 800d8d2:	f000 f809 	bl	800d8e8 <__kernel_cosf>
 800d8d6:	e7f5      	b.n	800d8c4 <sinf+0x70>
 800d8d8:	3f490fd8 	.word	0x3f490fd8
 800d8dc:	00000000 	.word	0x00000000

0800d8e0 <__ieee754_sqrtf>:
 800d8e0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800d8e4:	4770      	bx	lr
	...

0800d8e8 <__kernel_cosf>:
 800d8e8:	ee10 3a10 	vmov	r3, s0
 800d8ec:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d8f0:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800d8f4:	eef0 6a40 	vmov.f32	s13, s0
 800d8f8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800d8fc:	d204      	bcs.n	800d908 <__kernel_cosf+0x20>
 800d8fe:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800d902:	ee17 2a90 	vmov	r2, s15
 800d906:	b342      	cbz	r2, 800d95a <__kernel_cosf+0x72>
 800d908:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800d90c:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800d978 <__kernel_cosf+0x90>
 800d910:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800d97c <__kernel_cosf+0x94>
 800d914:	4a1a      	ldr	r2, [pc, #104]	@ (800d980 <__kernel_cosf+0x98>)
 800d916:	eea7 6a27 	vfma.f32	s12, s14, s15
 800d91a:	4293      	cmp	r3, r2
 800d91c:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800d984 <__kernel_cosf+0x9c>
 800d920:	eee6 7a07 	vfma.f32	s15, s12, s14
 800d924:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800d988 <__kernel_cosf+0xa0>
 800d928:	eea7 6a87 	vfma.f32	s12, s15, s14
 800d92c:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800d98c <__kernel_cosf+0xa4>
 800d930:	eee6 7a07 	vfma.f32	s15, s12, s14
 800d934:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800d990 <__kernel_cosf+0xa8>
 800d938:	eea7 6a87 	vfma.f32	s12, s15, s14
 800d93c:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800d940:	ee26 6a07 	vmul.f32	s12, s12, s14
 800d944:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800d948:	eee7 0a06 	vfma.f32	s1, s14, s12
 800d94c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d950:	d804      	bhi.n	800d95c <__kernel_cosf+0x74>
 800d952:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800d956:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d95a:	4770      	bx	lr
 800d95c:	4a0d      	ldr	r2, [pc, #52]	@ (800d994 <__kernel_cosf+0xac>)
 800d95e:	4293      	cmp	r3, r2
 800d960:	bf9a      	itte	ls
 800d962:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800d966:	ee07 3a10 	vmovls	s14, r3
 800d96a:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800d96e:	ee30 0a47 	vsub.f32	s0, s0, s14
 800d972:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d976:	e7ec      	b.n	800d952 <__kernel_cosf+0x6a>
 800d978:	ad47d74e 	.word	0xad47d74e
 800d97c:	310f74f6 	.word	0x310f74f6
 800d980:	3e999999 	.word	0x3e999999
 800d984:	b493f27c 	.word	0xb493f27c
 800d988:	37d00d01 	.word	0x37d00d01
 800d98c:	bab60b61 	.word	0xbab60b61
 800d990:	3d2aaaab 	.word	0x3d2aaaab
 800d994:	3f480000 	.word	0x3f480000

0800d998 <__kernel_sinf>:
 800d998:	ee10 3a10 	vmov	r3, s0
 800d99c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d9a0:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800d9a4:	d204      	bcs.n	800d9b0 <__kernel_sinf+0x18>
 800d9a6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800d9aa:	ee17 3a90 	vmov	r3, s15
 800d9ae:	b35b      	cbz	r3, 800da08 <__kernel_sinf+0x70>
 800d9b0:	ee20 7a00 	vmul.f32	s14, s0, s0
 800d9b4:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800da0c <__kernel_sinf+0x74>
 800d9b8:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800da10 <__kernel_sinf+0x78>
 800d9bc:	eea7 6a27 	vfma.f32	s12, s14, s15
 800d9c0:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800da14 <__kernel_sinf+0x7c>
 800d9c4:	eee6 7a07 	vfma.f32	s15, s12, s14
 800d9c8:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800da18 <__kernel_sinf+0x80>
 800d9cc:	eea7 6a87 	vfma.f32	s12, s15, s14
 800d9d0:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800da1c <__kernel_sinf+0x84>
 800d9d4:	ee60 6a07 	vmul.f32	s13, s0, s14
 800d9d8:	eee6 7a07 	vfma.f32	s15, s12, s14
 800d9dc:	b930      	cbnz	r0, 800d9ec <__kernel_sinf+0x54>
 800d9de:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800da20 <__kernel_sinf+0x88>
 800d9e2:	eea7 6a27 	vfma.f32	s12, s14, s15
 800d9e6:	eea6 0a26 	vfma.f32	s0, s12, s13
 800d9ea:	4770      	bx	lr
 800d9ec:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800d9f0:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800d9f4:	eee0 7a86 	vfma.f32	s15, s1, s12
 800d9f8:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800d9fc:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800da24 <__kernel_sinf+0x8c>
 800da00:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800da04:	ee30 0a60 	vsub.f32	s0, s0, s1
 800da08:	4770      	bx	lr
 800da0a:	bf00      	nop
 800da0c:	2f2ec9d3 	.word	0x2f2ec9d3
 800da10:	b2d72f34 	.word	0xb2d72f34
 800da14:	3638ef1b 	.word	0x3638ef1b
 800da18:	b9500d01 	.word	0xb9500d01
 800da1c:	3c088889 	.word	0x3c088889
 800da20:	be2aaaab 	.word	0xbe2aaaab
 800da24:	3e2aaaab 	.word	0x3e2aaaab

0800da28 <__ieee754_rem_pio2f>:
 800da28:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da2a:	ee10 6a10 	vmov	r6, s0
 800da2e:	4b88      	ldr	r3, [pc, #544]	@ (800dc50 <__ieee754_rem_pio2f+0x228>)
 800da30:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800da34:	429d      	cmp	r5, r3
 800da36:	b087      	sub	sp, #28
 800da38:	4604      	mov	r4, r0
 800da3a:	d805      	bhi.n	800da48 <__ieee754_rem_pio2f+0x20>
 800da3c:	2300      	movs	r3, #0
 800da3e:	ed80 0a00 	vstr	s0, [r0]
 800da42:	6043      	str	r3, [r0, #4]
 800da44:	2000      	movs	r0, #0
 800da46:	e022      	b.n	800da8e <__ieee754_rem_pio2f+0x66>
 800da48:	4b82      	ldr	r3, [pc, #520]	@ (800dc54 <__ieee754_rem_pio2f+0x22c>)
 800da4a:	429d      	cmp	r5, r3
 800da4c:	d83a      	bhi.n	800dac4 <__ieee754_rem_pio2f+0x9c>
 800da4e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800da52:	2e00      	cmp	r6, #0
 800da54:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800dc58 <__ieee754_rem_pio2f+0x230>
 800da58:	4a80      	ldr	r2, [pc, #512]	@ (800dc5c <__ieee754_rem_pio2f+0x234>)
 800da5a:	f023 030f 	bic.w	r3, r3, #15
 800da5e:	dd18      	ble.n	800da92 <__ieee754_rem_pio2f+0x6a>
 800da60:	4293      	cmp	r3, r2
 800da62:	ee70 7a47 	vsub.f32	s15, s0, s14
 800da66:	bf09      	itett	eq
 800da68:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800dc60 <__ieee754_rem_pio2f+0x238>
 800da6c:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 800dc64 <__ieee754_rem_pio2f+0x23c>
 800da70:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800dc68 <__ieee754_rem_pio2f+0x240>
 800da74:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800da78:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800da7c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800da80:	ed80 7a00 	vstr	s14, [r0]
 800da84:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800da88:	edc0 7a01 	vstr	s15, [r0, #4]
 800da8c:	2001      	movs	r0, #1
 800da8e:	b007      	add	sp, #28
 800da90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da92:	4293      	cmp	r3, r2
 800da94:	ee70 7a07 	vadd.f32	s15, s0, s14
 800da98:	bf09      	itett	eq
 800da9a:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800dc60 <__ieee754_rem_pio2f+0x238>
 800da9e:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 800dc64 <__ieee754_rem_pio2f+0x23c>
 800daa2:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800dc68 <__ieee754_rem_pio2f+0x240>
 800daa6:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800daaa:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800daae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800dab2:	ed80 7a00 	vstr	s14, [r0]
 800dab6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800daba:	edc0 7a01 	vstr	s15, [r0, #4]
 800dabe:	f04f 30ff 	mov.w	r0, #4294967295
 800dac2:	e7e4      	b.n	800da8e <__ieee754_rem_pio2f+0x66>
 800dac4:	4b69      	ldr	r3, [pc, #420]	@ (800dc6c <__ieee754_rem_pio2f+0x244>)
 800dac6:	429d      	cmp	r5, r3
 800dac8:	d873      	bhi.n	800dbb2 <__ieee754_rem_pio2f+0x18a>
 800daca:	f000 f8dd 	bl	800dc88 <fabsf>
 800dace:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800dc70 <__ieee754_rem_pio2f+0x248>
 800dad2:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800dad6:	eee0 7a07 	vfma.f32	s15, s0, s14
 800dada:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dade:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800dae2:	ee17 0a90 	vmov	r0, s15
 800dae6:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800dc58 <__ieee754_rem_pio2f+0x230>
 800daea:	eea7 0a67 	vfms.f32	s0, s14, s15
 800daee:	281f      	cmp	r0, #31
 800daf0:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800dc64 <__ieee754_rem_pio2f+0x23c>
 800daf4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800daf8:	eeb1 6a47 	vneg.f32	s12, s14
 800dafc:	ee70 6a67 	vsub.f32	s13, s0, s15
 800db00:	ee16 1a90 	vmov	r1, s13
 800db04:	dc09      	bgt.n	800db1a <__ieee754_rem_pio2f+0xf2>
 800db06:	4a5b      	ldr	r2, [pc, #364]	@ (800dc74 <__ieee754_rem_pio2f+0x24c>)
 800db08:	1e47      	subs	r7, r0, #1
 800db0a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800db0e:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800db12:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800db16:	4293      	cmp	r3, r2
 800db18:	d107      	bne.n	800db2a <__ieee754_rem_pio2f+0x102>
 800db1a:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800db1e:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800db22:	2a08      	cmp	r2, #8
 800db24:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800db28:	dc14      	bgt.n	800db54 <__ieee754_rem_pio2f+0x12c>
 800db2a:	6021      	str	r1, [r4, #0]
 800db2c:	ed94 7a00 	vldr	s14, [r4]
 800db30:	ee30 0a47 	vsub.f32	s0, s0, s14
 800db34:	2e00      	cmp	r6, #0
 800db36:	ee30 0a67 	vsub.f32	s0, s0, s15
 800db3a:	ed84 0a01 	vstr	s0, [r4, #4]
 800db3e:	daa6      	bge.n	800da8e <__ieee754_rem_pio2f+0x66>
 800db40:	eeb1 7a47 	vneg.f32	s14, s14
 800db44:	eeb1 0a40 	vneg.f32	s0, s0
 800db48:	ed84 7a00 	vstr	s14, [r4]
 800db4c:	ed84 0a01 	vstr	s0, [r4, #4]
 800db50:	4240      	negs	r0, r0
 800db52:	e79c      	b.n	800da8e <__ieee754_rem_pio2f+0x66>
 800db54:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800dc60 <__ieee754_rem_pio2f+0x238>
 800db58:	eef0 6a40 	vmov.f32	s13, s0
 800db5c:	eee6 6a25 	vfma.f32	s13, s12, s11
 800db60:	ee70 7a66 	vsub.f32	s15, s0, s13
 800db64:	eee6 7a25 	vfma.f32	s15, s12, s11
 800db68:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800dc68 <__ieee754_rem_pio2f+0x240>
 800db6c:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800db70:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800db74:	ee15 2a90 	vmov	r2, s11
 800db78:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800db7c:	1a5b      	subs	r3, r3, r1
 800db7e:	2b19      	cmp	r3, #25
 800db80:	dc04      	bgt.n	800db8c <__ieee754_rem_pio2f+0x164>
 800db82:	edc4 5a00 	vstr	s11, [r4]
 800db86:	eeb0 0a66 	vmov.f32	s0, s13
 800db8a:	e7cf      	b.n	800db2c <__ieee754_rem_pio2f+0x104>
 800db8c:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800dc78 <__ieee754_rem_pio2f+0x250>
 800db90:	eeb0 0a66 	vmov.f32	s0, s13
 800db94:	eea6 0a25 	vfma.f32	s0, s12, s11
 800db98:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800db9c:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800dc7c <__ieee754_rem_pio2f+0x254>
 800dba0:	eee6 7a25 	vfma.f32	s15, s12, s11
 800dba4:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800dba8:	ee30 7a67 	vsub.f32	s14, s0, s15
 800dbac:	ed84 7a00 	vstr	s14, [r4]
 800dbb0:	e7bc      	b.n	800db2c <__ieee754_rem_pio2f+0x104>
 800dbb2:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800dbb6:	d306      	bcc.n	800dbc6 <__ieee754_rem_pio2f+0x19e>
 800dbb8:	ee70 7a40 	vsub.f32	s15, s0, s0
 800dbbc:	edc0 7a01 	vstr	s15, [r0, #4]
 800dbc0:	edc0 7a00 	vstr	s15, [r0]
 800dbc4:	e73e      	b.n	800da44 <__ieee754_rem_pio2f+0x1c>
 800dbc6:	15ea      	asrs	r2, r5, #23
 800dbc8:	3a86      	subs	r2, #134	@ 0x86
 800dbca:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800dbce:	ee07 3a90 	vmov	s15, r3
 800dbd2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800dbd6:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800dc80 <__ieee754_rem_pio2f+0x258>
 800dbda:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800dbde:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800dbe2:	ed8d 7a03 	vstr	s14, [sp, #12]
 800dbe6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800dbea:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800dbee:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800dbf2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800dbf6:	ed8d 7a04 	vstr	s14, [sp, #16]
 800dbfa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800dbfe:	eef5 7a40 	vcmp.f32	s15, #0.0
 800dc02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc06:	edcd 7a05 	vstr	s15, [sp, #20]
 800dc0a:	d11e      	bne.n	800dc4a <__ieee754_rem_pio2f+0x222>
 800dc0c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800dc10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc14:	bf0c      	ite	eq
 800dc16:	2301      	moveq	r3, #1
 800dc18:	2302      	movne	r3, #2
 800dc1a:	491a      	ldr	r1, [pc, #104]	@ (800dc84 <__ieee754_rem_pio2f+0x25c>)
 800dc1c:	9101      	str	r1, [sp, #4]
 800dc1e:	2102      	movs	r1, #2
 800dc20:	9100      	str	r1, [sp, #0]
 800dc22:	a803      	add	r0, sp, #12
 800dc24:	4621      	mov	r1, r4
 800dc26:	f000 f89d 	bl	800dd64 <__kernel_rem_pio2f>
 800dc2a:	2e00      	cmp	r6, #0
 800dc2c:	f6bf af2f 	bge.w	800da8e <__ieee754_rem_pio2f+0x66>
 800dc30:	edd4 7a00 	vldr	s15, [r4]
 800dc34:	eef1 7a67 	vneg.f32	s15, s15
 800dc38:	edc4 7a00 	vstr	s15, [r4]
 800dc3c:	edd4 7a01 	vldr	s15, [r4, #4]
 800dc40:	eef1 7a67 	vneg.f32	s15, s15
 800dc44:	edc4 7a01 	vstr	s15, [r4, #4]
 800dc48:	e782      	b.n	800db50 <__ieee754_rem_pio2f+0x128>
 800dc4a:	2303      	movs	r3, #3
 800dc4c:	e7e5      	b.n	800dc1a <__ieee754_rem_pio2f+0x1f2>
 800dc4e:	bf00      	nop
 800dc50:	3f490fd8 	.word	0x3f490fd8
 800dc54:	4016cbe3 	.word	0x4016cbe3
 800dc58:	3fc90f80 	.word	0x3fc90f80
 800dc5c:	3fc90fd0 	.word	0x3fc90fd0
 800dc60:	37354400 	.word	0x37354400
 800dc64:	37354443 	.word	0x37354443
 800dc68:	2e85a308 	.word	0x2e85a308
 800dc6c:	43490f80 	.word	0x43490f80
 800dc70:	3f22f984 	.word	0x3f22f984
 800dc74:	0800e364 	.word	0x0800e364
 800dc78:	2e85a300 	.word	0x2e85a300
 800dc7c:	248d3132 	.word	0x248d3132
 800dc80:	43800000 	.word	0x43800000
 800dc84:	0800e3e4 	.word	0x0800e3e4

0800dc88 <fabsf>:
 800dc88:	ee10 3a10 	vmov	r3, s0
 800dc8c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800dc90:	ee00 3a10 	vmov	s0, r3
 800dc94:	4770      	bx	lr
	...

0800dc98 <scalbnf>:
 800dc98:	ee10 3a10 	vmov	r3, s0
 800dc9c:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800dca0:	d02b      	beq.n	800dcfa <scalbnf+0x62>
 800dca2:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800dca6:	d302      	bcc.n	800dcae <scalbnf+0x16>
 800dca8:	ee30 0a00 	vadd.f32	s0, s0, s0
 800dcac:	4770      	bx	lr
 800dcae:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800dcb2:	d123      	bne.n	800dcfc <scalbnf+0x64>
 800dcb4:	4b24      	ldr	r3, [pc, #144]	@ (800dd48 <scalbnf+0xb0>)
 800dcb6:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800dd4c <scalbnf+0xb4>
 800dcba:	4298      	cmp	r0, r3
 800dcbc:	ee20 0a27 	vmul.f32	s0, s0, s15
 800dcc0:	db17      	blt.n	800dcf2 <scalbnf+0x5a>
 800dcc2:	ee10 3a10 	vmov	r3, s0
 800dcc6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800dcca:	3a19      	subs	r2, #25
 800dccc:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800dcd0:	4288      	cmp	r0, r1
 800dcd2:	dd15      	ble.n	800dd00 <scalbnf+0x68>
 800dcd4:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800dd50 <scalbnf+0xb8>
 800dcd8:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800dd54 <scalbnf+0xbc>
 800dcdc:	ee10 3a10 	vmov	r3, s0
 800dce0:	eeb0 7a67 	vmov.f32	s14, s15
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	bfb8      	it	lt
 800dce8:	eef0 7a66 	vmovlt.f32	s15, s13
 800dcec:	ee27 0a87 	vmul.f32	s0, s15, s14
 800dcf0:	4770      	bx	lr
 800dcf2:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800dd58 <scalbnf+0xc0>
 800dcf6:	ee27 0a80 	vmul.f32	s0, s15, s0
 800dcfa:	4770      	bx	lr
 800dcfc:	0dd2      	lsrs	r2, r2, #23
 800dcfe:	e7e5      	b.n	800dccc <scalbnf+0x34>
 800dd00:	4410      	add	r0, r2
 800dd02:	28fe      	cmp	r0, #254	@ 0xfe
 800dd04:	dce6      	bgt.n	800dcd4 <scalbnf+0x3c>
 800dd06:	2800      	cmp	r0, #0
 800dd08:	dd06      	ble.n	800dd18 <scalbnf+0x80>
 800dd0a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800dd0e:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800dd12:	ee00 3a10 	vmov	s0, r3
 800dd16:	4770      	bx	lr
 800dd18:	f110 0f16 	cmn.w	r0, #22
 800dd1c:	da09      	bge.n	800dd32 <scalbnf+0x9a>
 800dd1e:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800dd58 <scalbnf+0xc0>
 800dd22:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800dd5c <scalbnf+0xc4>
 800dd26:	ee10 3a10 	vmov	r3, s0
 800dd2a:	eeb0 7a67 	vmov.f32	s14, s15
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	e7d9      	b.n	800dce6 <scalbnf+0x4e>
 800dd32:	3019      	adds	r0, #25
 800dd34:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800dd38:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800dd3c:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800dd60 <scalbnf+0xc8>
 800dd40:	ee07 3a90 	vmov	s15, r3
 800dd44:	e7d7      	b.n	800dcf6 <scalbnf+0x5e>
 800dd46:	bf00      	nop
 800dd48:	ffff3cb0 	.word	0xffff3cb0
 800dd4c:	4c000000 	.word	0x4c000000
 800dd50:	7149f2ca 	.word	0x7149f2ca
 800dd54:	f149f2ca 	.word	0xf149f2ca
 800dd58:	0da24260 	.word	0x0da24260
 800dd5c:	8da24260 	.word	0x8da24260
 800dd60:	33000000 	.word	0x33000000

0800dd64 <__kernel_rem_pio2f>:
 800dd64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd68:	ed2d 8b04 	vpush	{d8-d9}
 800dd6c:	b0d9      	sub	sp, #356	@ 0x164
 800dd6e:	4690      	mov	r8, r2
 800dd70:	9001      	str	r0, [sp, #4]
 800dd72:	4ab6      	ldr	r2, [pc, #728]	@ (800e04c <__kernel_rem_pio2f+0x2e8>)
 800dd74:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800dd76:	f118 0f04 	cmn.w	r8, #4
 800dd7a:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800dd7e:	460f      	mov	r7, r1
 800dd80:	f103 3bff 	add.w	fp, r3, #4294967295
 800dd84:	db26      	blt.n	800ddd4 <__kernel_rem_pio2f+0x70>
 800dd86:	f1b8 0203 	subs.w	r2, r8, #3
 800dd8a:	bf48      	it	mi
 800dd8c:	f108 0204 	addmi.w	r2, r8, #4
 800dd90:	10d2      	asrs	r2, r2, #3
 800dd92:	1c55      	adds	r5, r2, #1
 800dd94:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800dd96:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 800e05c <__kernel_rem_pio2f+0x2f8>
 800dd9a:	00e8      	lsls	r0, r5, #3
 800dd9c:	eba2 060b 	sub.w	r6, r2, fp
 800dda0:	9002      	str	r0, [sp, #8]
 800dda2:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 800dda6:	eb0a 0c0b 	add.w	ip, sl, fp
 800ddaa:	ac1c      	add	r4, sp, #112	@ 0x70
 800ddac:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 800ddb0:	2000      	movs	r0, #0
 800ddb2:	4560      	cmp	r0, ip
 800ddb4:	dd10      	ble.n	800ddd8 <__kernel_rem_pio2f+0x74>
 800ddb6:	a91c      	add	r1, sp, #112	@ 0x70
 800ddb8:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800ddbc:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 800ddc0:	2600      	movs	r6, #0
 800ddc2:	4556      	cmp	r6, sl
 800ddc4:	dc24      	bgt.n	800de10 <__kernel_rem_pio2f+0xac>
 800ddc6:	f8dd e004 	ldr.w	lr, [sp, #4]
 800ddca:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 800e05c <__kernel_rem_pio2f+0x2f8>
 800ddce:	4684      	mov	ip, r0
 800ddd0:	2400      	movs	r4, #0
 800ddd2:	e016      	b.n	800de02 <__kernel_rem_pio2f+0x9e>
 800ddd4:	2200      	movs	r2, #0
 800ddd6:	e7dc      	b.n	800dd92 <__kernel_rem_pio2f+0x2e>
 800ddd8:	42c6      	cmn	r6, r0
 800ddda:	bf5d      	ittte	pl
 800dddc:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 800dde0:	ee07 1a90 	vmovpl	s15, r1
 800dde4:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800dde8:	eef0 7a47 	vmovmi.f32	s15, s14
 800ddec:	ece4 7a01 	vstmia	r4!, {s15}
 800ddf0:	3001      	adds	r0, #1
 800ddf2:	e7de      	b.n	800ddb2 <__kernel_rem_pio2f+0x4e>
 800ddf4:	ecfe 6a01 	vldmia	lr!, {s13}
 800ddf8:	ed3c 7a01 	vldmdb	ip!, {s14}
 800ddfc:	eee6 7a87 	vfma.f32	s15, s13, s14
 800de00:	3401      	adds	r4, #1
 800de02:	455c      	cmp	r4, fp
 800de04:	ddf6      	ble.n	800ddf4 <__kernel_rem_pio2f+0x90>
 800de06:	ece9 7a01 	vstmia	r9!, {s15}
 800de0a:	3601      	adds	r6, #1
 800de0c:	3004      	adds	r0, #4
 800de0e:	e7d8      	b.n	800ddc2 <__kernel_rem_pio2f+0x5e>
 800de10:	a908      	add	r1, sp, #32
 800de12:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800de16:	9104      	str	r1, [sp, #16]
 800de18:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800de1a:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 800e058 <__kernel_rem_pio2f+0x2f4>
 800de1e:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 800e054 <__kernel_rem_pio2f+0x2f0>
 800de22:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800de26:	9203      	str	r2, [sp, #12]
 800de28:	4654      	mov	r4, sl
 800de2a:	00a2      	lsls	r2, r4, #2
 800de2c:	9205      	str	r2, [sp, #20]
 800de2e:	aa58      	add	r2, sp, #352	@ 0x160
 800de30:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800de34:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 800de38:	a944      	add	r1, sp, #272	@ 0x110
 800de3a:	aa08      	add	r2, sp, #32
 800de3c:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800de40:	4694      	mov	ip, r2
 800de42:	4626      	mov	r6, r4
 800de44:	2e00      	cmp	r6, #0
 800de46:	dc4c      	bgt.n	800dee2 <__kernel_rem_pio2f+0x17e>
 800de48:	4628      	mov	r0, r5
 800de4a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800de4e:	f7ff ff23 	bl	800dc98 <scalbnf>
 800de52:	eeb0 8a40 	vmov.f32	s16, s0
 800de56:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800de5a:	ee28 0a00 	vmul.f32	s0, s16, s0
 800de5e:	f000 f9e9 	bl	800e234 <floorf>
 800de62:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800de66:	eea0 8a67 	vfms.f32	s16, s0, s15
 800de6a:	2d00      	cmp	r5, #0
 800de6c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800de70:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800de74:	ee17 9a90 	vmov	r9, s15
 800de78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800de7c:	ee38 8a67 	vsub.f32	s16, s16, s15
 800de80:	dd41      	ble.n	800df06 <__kernel_rem_pio2f+0x1a2>
 800de82:	f104 3cff 	add.w	ip, r4, #4294967295
 800de86:	a908      	add	r1, sp, #32
 800de88:	f1c5 0e08 	rsb	lr, r5, #8
 800de8c:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 800de90:	fa46 f00e 	asr.w	r0, r6, lr
 800de94:	4481      	add	r9, r0
 800de96:	fa00 f00e 	lsl.w	r0, r0, lr
 800de9a:	1a36      	subs	r6, r6, r0
 800de9c:	f1c5 0007 	rsb	r0, r5, #7
 800dea0:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 800dea4:	4106      	asrs	r6, r0
 800dea6:	2e00      	cmp	r6, #0
 800dea8:	dd3c      	ble.n	800df24 <__kernel_rem_pio2f+0x1c0>
 800deaa:	f04f 0e00 	mov.w	lr, #0
 800deae:	f109 0901 	add.w	r9, r9, #1
 800deb2:	4670      	mov	r0, lr
 800deb4:	4574      	cmp	r4, lr
 800deb6:	dc68      	bgt.n	800df8a <__kernel_rem_pio2f+0x226>
 800deb8:	2d00      	cmp	r5, #0
 800deba:	dd03      	ble.n	800dec4 <__kernel_rem_pio2f+0x160>
 800debc:	2d01      	cmp	r5, #1
 800debe:	d074      	beq.n	800dfaa <__kernel_rem_pio2f+0x246>
 800dec0:	2d02      	cmp	r5, #2
 800dec2:	d07d      	beq.n	800dfc0 <__kernel_rem_pio2f+0x25c>
 800dec4:	2e02      	cmp	r6, #2
 800dec6:	d12d      	bne.n	800df24 <__kernel_rem_pio2f+0x1c0>
 800dec8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800decc:	ee30 8a48 	vsub.f32	s16, s0, s16
 800ded0:	b340      	cbz	r0, 800df24 <__kernel_rem_pio2f+0x1c0>
 800ded2:	4628      	mov	r0, r5
 800ded4:	9306      	str	r3, [sp, #24]
 800ded6:	f7ff fedf 	bl	800dc98 <scalbnf>
 800deda:	9b06      	ldr	r3, [sp, #24]
 800dedc:	ee38 8a40 	vsub.f32	s16, s16, s0
 800dee0:	e020      	b.n	800df24 <__kernel_rem_pio2f+0x1c0>
 800dee2:	ee60 7a28 	vmul.f32	s15, s0, s17
 800dee6:	3e01      	subs	r6, #1
 800dee8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800deec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800def0:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800def4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800def8:	ecac 0a01 	vstmia	ip!, {s0}
 800defc:	ed30 0a01 	vldmdb	r0!, {s0}
 800df00:	ee37 0a80 	vadd.f32	s0, s15, s0
 800df04:	e79e      	b.n	800de44 <__kernel_rem_pio2f+0xe0>
 800df06:	d105      	bne.n	800df14 <__kernel_rem_pio2f+0x1b0>
 800df08:	1e60      	subs	r0, r4, #1
 800df0a:	a908      	add	r1, sp, #32
 800df0c:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 800df10:	11f6      	asrs	r6, r6, #7
 800df12:	e7c8      	b.n	800dea6 <__kernel_rem_pio2f+0x142>
 800df14:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800df18:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800df1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df20:	da31      	bge.n	800df86 <__kernel_rem_pio2f+0x222>
 800df22:	2600      	movs	r6, #0
 800df24:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800df28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df2c:	f040 8098 	bne.w	800e060 <__kernel_rem_pio2f+0x2fc>
 800df30:	1e60      	subs	r0, r4, #1
 800df32:	2200      	movs	r2, #0
 800df34:	4550      	cmp	r0, sl
 800df36:	da4b      	bge.n	800dfd0 <__kernel_rem_pio2f+0x26c>
 800df38:	2a00      	cmp	r2, #0
 800df3a:	d065      	beq.n	800e008 <__kernel_rem_pio2f+0x2a4>
 800df3c:	3c01      	subs	r4, #1
 800df3e:	ab08      	add	r3, sp, #32
 800df40:	3d08      	subs	r5, #8
 800df42:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800df46:	2b00      	cmp	r3, #0
 800df48:	d0f8      	beq.n	800df3c <__kernel_rem_pio2f+0x1d8>
 800df4a:	4628      	mov	r0, r5
 800df4c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800df50:	f7ff fea2 	bl	800dc98 <scalbnf>
 800df54:	1c63      	adds	r3, r4, #1
 800df56:	aa44      	add	r2, sp, #272	@ 0x110
 800df58:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800e058 <__kernel_rem_pio2f+0x2f4>
 800df5c:	0099      	lsls	r1, r3, #2
 800df5e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800df62:	4623      	mov	r3, r4
 800df64:	2b00      	cmp	r3, #0
 800df66:	f280 80a9 	bge.w	800e0bc <__kernel_rem_pio2f+0x358>
 800df6a:	4623      	mov	r3, r4
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	f2c0 80c7 	blt.w	800e100 <__kernel_rem_pio2f+0x39c>
 800df72:	aa44      	add	r2, sp, #272	@ 0x110
 800df74:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800df78:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 800e050 <__kernel_rem_pio2f+0x2ec>
 800df7c:	eddf 7a37 	vldr	s15, [pc, #220]	@ 800e05c <__kernel_rem_pio2f+0x2f8>
 800df80:	2000      	movs	r0, #0
 800df82:	1ae2      	subs	r2, r4, r3
 800df84:	e0b1      	b.n	800e0ea <__kernel_rem_pio2f+0x386>
 800df86:	2602      	movs	r6, #2
 800df88:	e78f      	b.n	800deaa <__kernel_rem_pio2f+0x146>
 800df8a:	f852 1b04 	ldr.w	r1, [r2], #4
 800df8e:	b948      	cbnz	r0, 800dfa4 <__kernel_rem_pio2f+0x240>
 800df90:	b121      	cbz	r1, 800df9c <__kernel_rem_pio2f+0x238>
 800df92:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800df96:	f842 1c04 	str.w	r1, [r2, #-4]
 800df9a:	2101      	movs	r1, #1
 800df9c:	f10e 0e01 	add.w	lr, lr, #1
 800dfa0:	4608      	mov	r0, r1
 800dfa2:	e787      	b.n	800deb4 <__kernel_rem_pio2f+0x150>
 800dfa4:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 800dfa8:	e7f5      	b.n	800df96 <__kernel_rem_pio2f+0x232>
 800dfaa:	f104 3cff 	add.w	ip, r4, #4294967295
 800dfae:	aa08      	add	r2, sp, #32
 800dfb0:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800dfb4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800dfb8:	a908      	add	r1, sp, #32
 800dfba:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800dfbe:	e781      	b.n	800dec4 <__kernel_rem_pio2f+0x160>
 800dfc0:	f104 3cff 	add.w	ip, r4, #4294967295
 800dfc4:	aa08      	add	r2, sp, #32
 800dfc6:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800dfca:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800dfce:	e7f3      	b.n	800dfb8 <__kernel_rem_pio2f+0x254>
 800dfd0:	a908      	add	r1, sp, #32
 800dfd2:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800dfd6:	3801      	subs	r0, #1
 800dfd8:	430a      	orrs	r2, r1
 800dfda:	e7ab      	b.n	800df34 <__kernel_rem_pio2f+0x1d0>
 800dfdc:	3201      	adds	r2, #1
 800dfde:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800dfe2:	2e00      	cmp	r6, #0
 800dfe4:	d0fa      	beq.n	800dfdc <__kernel_rem_pio2f+0x278>
 800dfe6:	9905      	ldr	r1, [sp, #20]
 800dfe8:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800dfec:	eb0d 0001 	add.w	r0, sp, r1
 800dff0:	18e6      	adds	r6, r4, r3
 800dff2:	a91c      	add	r1, sp, #112	@ 0x70
 800dff4:	f104 0c01 	add.w	ip, r4, #1
 800dff8:	384c      	subs	r0, #76	@ 0x4c
 800dffa:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800dffe:	4422      	add	r2, r4
 800e000:	4562      	cmp	r2, ip
 800e002:	da04      	bge.n	800e00e <__kernel_rem_pio2f+0x2aa>
 800e004:	4614      	mov	r4, r2
 800e006:	e710      	b.n	800de2a <__kernel_rem_pio2f+0xc6>
 800e008:	9804      	ldr	r0, [sp, #16]
 800e00a:	2201      	movs	r2, #1
 800e00c:	e7e7      	b.n	800dfde <__kernel_rem_pio2f+0x27a>
 800e00e:	9903      	ldr	r1, [sp, #12]
 800e010:	f8dd e004 	ldr.w	lr, [sp, #4]
 800e014:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800e018:	9105      	str	r1, [sp, #20]
 800e01a:	ee07 1a90 	vmov	s15, r1
 800e01e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e022:	2400      	movs	r4, #0
 800e024:	ece6 7a01 	vstmia	r6!, {s15}
 800e028:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800e05c <__kernel_rem_pio2f+0x2f8>
 800e02c:	46b1      	mov	r9, r6
 800e02e:	455c      	cmp	r4, fp
 800e030:	dd04      	ble.n	800e03c <__kernel_rem_pio2f+0x2d8>
 800e032:	ece0 7a01 	vstmia	r0!, {s15}
 800e036:	f10c 0c01 	add.w	ip, ip, #1
 800e03a:	e7e1      	b.n	800e000 <__kernel_rem_pio2f+0x29c>
 800e03c:	ecfe 6a01 	vldmia	lr!, {s13}
 800e040:	ed39 7a01 	vldmdb	r9!, {s14}
 800e044:	3401      	adds	r4, #1
 800e046:	eee6 7a87 	vfma.f32	s15, s13, s14
 800e04a:	e7f0      	b.n	800e02e <__kernel_rem_pio2f+0x2ca>
 800e04c:	0800e728 	.word	0x0800e728
 800e050:	0800e6fc 	.word	0x0800e6fc
 800e054:	43800000 	.word	0x43800000
 800e058:	3b800000 	.word	0x3b800000
 800e05c:	00000000 	.word	0x00000000
 800e060:	9b02      	ldr	r3, [sp, #8]
 800e062:	eeb0 0a48 	vmov.f32	s0, s16
 800e066:	eba3 0008 	sub.w	r0, r3, r8
 800e06a:	f7ff fe15 	bl	800dc98 <scalbnf>
 800e06e:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800e054 <__kernel_rem_pio2f+0x2f0>
 800e072:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800e076:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e07a:	db19      	blt.n	800e0b0 <__kernel_rem_pio2f+0x34c>
 800e07c:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800e058 <__kernel_rem_pio2f+0x2f4>
 800e080:	ee60 7a27 	vmul.f32	s15, s0, s15
 800e084:	aa08      	add	r2, sp, #32
 800e086:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e08a:	3508      	adds	r5, #8
 800e08c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e090:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800e094:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e098:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800e09c:	ee10 3a10 	vmov	r3, s0
 800e0a0:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800e0a4:	ee17 3a90 	vmov	r3, s15
 800e0a8:	3401      	adds	r4, #1
 800e0aa:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800e0ae:	e74c      	b.n	800df4a <__kernel_rem_pio2f+0x1e6>
 800e0b0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800e0b4:	aa08      	add	r2, sp, #32
 800e0b6:	ee10 3a10 	vmov	r3, s0
 800e0ba:	e7f6      	b.n	800e0aa <__kernel_rem_pio2f+0x346>
 800e0bc:	a808      	add	r0, sp, #32
 800e0be:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800e0c2:	9001      	str	r0, [sp, #4]
 800e0c4:	ee07 0a90 	vmov	s15, r0
 800e0c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e0cc:	3b01      	subs	r3, #1
 800e0ce:	ee67 7a80 	vmul.f32	s15, s15, s0
 800e0d2:	ee20 0a07 	vmul.f32	s0, s0, s14
 800e0d6:	ed62 7a01 	vstmdb	r2!, {s15}
 800e0da:	e743      	b.n	800df64 <__kernel_rem_pio2f+0x200>
 800e0dc:	ecfc 6a01 	vldmia	ip!, {s13}
 800e0e0:	ecb5 7a01 	vldmia	r5!, {s14}
 800e0e4:	eee6 7a87 	vfma.f32	s15, s13, s14
 800e0e8:	3001      	adds	r0, #1
 800e0ea:	4550      	cmp	r0, sl
 800e0ec:	dc01      	bgt.n	800e0f2 <__kernel_rem_pio2f+0x38e>
 800e0ee:	4290      	cmp	r0, r2
 800e0f0:	ddf4      	ble.n	800e0dc <__kernel_rem_pio2f+0x378>
 800e0f2:	a858      	add	r0, sp, #352	@ 0x160
 800e0f4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800e0f8:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800e0fc:	3b01      	subs	r3, #1
 800e0fe:	e735      	b.n	800df6c <__kernel_rem_pio2f+0x208>
 800e100:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800e102:	2b02      	cmp	r3, #2
 800e104:	dc09      	bgt.n	800e11a <__kernel_rem_pio2f+0x3b6>
 800e106:	2b00      	cmp	r3, #0
 800e108:	dc27      	bgt.n	800e15a <__kernel_rem_pio2f+0x3f6>
 800e10a:	d040      	beq.n	800e18e <__kernel_rem_pio2f+0x42a>
 800e10c:	f009 0007 	and.w	r0, r9, #7
 800e110:	b059      	add	sp, #356	@ 0x164
 800e112:	ecbd 8b04 	vpop	{d8-d9}
 800e116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e11a:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800e11c:	2b03      	cmp	r3, #3
 800e11e:	d1f5      	bne.n	800e10c <__kernel_rem_pio2f+0x3a8>
 800e120:	aa30      	add	r2, sp, #192	@ 0xc0
 800e122:	1f0b      	subs	r3, r1, #4
 800e124:	4413      	add	r3, r2
 800e126:	461a      	mov	r2, r3
 800e128:	4620      	mov	r0, r4
 800e12a:	2800      	cmp	r0, #0
 800e12c:	dc50      	bgt.n	800e1d0 <__kernel_rem_pio2f+0x46c>
 800e12e:	4622      	mov	r2, r4
 800e130:	2a01      	cmp	r2, #1
 800e132:	dc5d      	bgt.n	800e1f0 <__kernel_rem_pio2f+0x48c>
 800e134:	ab30      	add	r3, sp, #192	@ 0xc0
 800e136:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 800e05c <__kernel_rem_pio2f+0x2f8>
 800e13a:	440b      	add	r3, r1
 800e13c:	2c01      	cmp	r4, #1
 800e13e:	dc67      	bgt.n	800e210 <__kernel_rem_pio2f+0x4ac>
 800e140:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800e144:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800e148:	2e00      	cmp	r6, #0
 800e14a:	d167      	bne.n	800e21c <__kernel_rem_pio2f+0x4b8>
 800e14c:	edc7 6a00 	vstr	s13, [r7]
 800e150:	ed87 7a01 	vstr	s14, [r7, #4]
 800e154:	edc7 7a02 	vstr	s15, [r7, #8]
 800e158:	e7d8      	b.n	800e10c <__kernel_rem_pio2f+0x3a8>
 800e15a:	ab30      	add	r3, sp, #192	@ 0xc0
 800e15c:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 800e05c <__kernel_rem_pio2f+0x2f8>
 800e160:	440b      	add	r3, r1
 800e162:	4622      	mov	r2, r4
 800e164:	2a00      	cmp	r2, #0
 800e166:	da24      	bge.n	800e1b2 <__kernel_rem_pio2f+0x44e>
 800e168:	b34e      	cbz	r6, 800e1be <__kernel_rem_pio2f+0x45a>
 800e16a:	eef1 7a47 	vneg.f32	s15, s14
 800e16e:	edc7 7a00 	vstr	s15, [r7]
 800e172:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800e176:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e17a:	aa31      	add	r2, sp, #196	@ 0xc4
 800e17c:	2301      	movs	r3, #1
 800e17e:	429c      	cmp	r4, r3
 800e180:	da20      	bge.n	800e1c4 <__kernel_rem_pio2f+0x460>
 800e182:	b10e      	cbz	r6, 800e188 <__kernel_rem_pio2f+0x424>
 800e184:	eef1 7a67 	vneg.f32	s15, s15
 800e188:	edc7 7a01 	vstr	s15, [r7, #4]
 800e18c:	e7be      	b.n	800e10c <__kernel_rem_pio2f+0x3a8>
 800e18e:	ab30      	add	r3, sp, #192	@ 0xc0
 800e190:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 800e05c <__kernel_rem_pio2f+0x2f8>
 800e194:	440b      	add	r3, r1
 800e196:	2c00      	cmp	r4, #0
 800e198:	da05      	bge.n	800e1a6 <__kernel_rem_pio2f+0x442>
 800e19a:	b10e      	cbz	r6, 800e1a0 <__kernel_rem_pio2f+0x43c>
 800e19c:	eef1 7a67 	vneg.f32	s15, s15
 800e1a0:	edc7 7a00 	vstr	s15, [r7]
 800e1a4:	e7b2      	b.n	800e10c <__kernel_rem_pio2f+0x3a8>
 800e1a6:	ed33 7a01 	vldmdb	r3!, {s14}
 800e1aa:	3c01      	subs	r4, #1
 800e1ac:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e1b0:	e7f1      	b.n	800e196 <__kernel_rem_pio2f+0x432>
 800e1b2:	ed73 7a01 	vldmdb	r3!, {s15}
 800e1b6:	3a01      	subs	r2, #1
 800e1b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e1bc:	e7d2      	b.n	800e164 <__kernel_rem_pio2f+0x400>
 800e1be:	eef0 7a47 	vmov.f32	s15, s14
 800e1c2:	e7d4      	b.n	800e16e <__kernel_rem_pio2f+0x40a>
 800e1c4:	ecb2 7a01 	vldmia	r2!, {s14}
 800e1c8:	3301      	adds	r3, #1
 800e1ca:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e1ce:	e7d6      	b.n	800e17e <__kernel_rem_pio2f+0x41a>
 800e1d0:	ed72 7a01 	vldmdb	r2!, {s15}
 800e1d4:	edd2 6a01 	vldr	s13, [r2, #4]
 800e1d8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800e1dc:	3801      	subs	r0, #1
 800e1de:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e1e2:	ed82 7a00 	vstr	s14, [r2]
 800e1e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e1ea:	edc2 7a01 	vstr	s15, [r2, #4]
 800e1ee:	e79c      	b.n	800e12a <__kernel_rem_pio2f+0x3c6>
 800e1f0:	ed73 7a01 	vldmdb	r3!, {s15}
 800e1f4:	edd3 6a01 	vldr	s13, [r3, #4]
 800e1f8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800e1fc:	3a01      	subs	r2, #1
 800e1fe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e202:	ed83 7a00 	vstr	s14, [r3]
 800e206:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e20a:	edc3 7a01 	vstr	s15, [r3, #4]
 800e20e:	e78f      	b.n	800e130 <__kernel_rem_pio2f+0x3cc>
 800e210:	ed33 7a01 	vldmdb	r3!, {s14}
 800e214:	3c01      	subs	r4, #1
 800e216:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e21a:	e78f      	b.n	800e13c <__kernel_rem_pio2f+0x3d8>
 800e21c:	eef1 6a66 	vneg.f32	s13, s13
 800e220:	eeb1 7a47 	vneg.f32	s14, s14
 800e224:	edc7 6a00 	vstr	s13, [r7]
 800e228:	ed87 7a01 	vstr	s14, [r7, #4]
 800e22c:	eef1 7a67 	vneg.f32	s15, s15
 800e230:	e790      	b.n	800e154 <__kernel_rem_pio2f+0x3f0>
 800e232:	bf00      	nop

0800e234 <floorf>:
 800e234:	ee10 3a10 	vmov	r3, s0
 800e238:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800e23c:	3a7f      	subs	r2, #127	@ 0x7f
 800e23e:	2a16      	cmp	r2, #22
 800e240:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800e244:	dc2b      	bgt.n	800e29e <floorf+0x6a>
 800e246:	2a00      	cmp	r2, #0
 800e248:	da12      	bge.n	800e270 <floorf+0x3c>
 800e24a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800e2b0 <floorf+0x7c>
 800e24e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e252:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800e256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e25a:	dd06      	ble.n	800e26a <floorf+0x36>
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	da24      	bge.n	800e2aa <floorf+0x76>
 800e260:	2900      	cmp	r1, #0
 800e262:	4b14      	ldr	r3, [pc, #80]	@ (800e2b4 <floorf+0x80>)
 800e264:	bf08      	it	eq
 800e266:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800e26a:	ee00 3a10 	vmov	s0, r3
 800e26e:	4770      	bx	lr
 800e270:	4911      	ldr	r1, [pc, #68]	@ (800e2b8 <floorf+0x84>)
 800e272:	4111      	asrs	r1, r2
 800e274:	420b      	tst	r3, r1
 800e276:	d0fa      	beq.n	800e26e <floorf+0x3a>
 800e278:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800e2b0 <floorf+0x7c>
 800e27c:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e280:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800e284:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e288:	ddef      	ble.n	800e26a <floorf+0x36>
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	bfbe      	ittt	lt
 800e28e:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800e292:	fa40 f202 	asrlt.w	r2, r0, r2
 800e296:	189b      	addlt	r3, r3, r2
 800e298:	ea23 0301 	bic.w	r3, r3, r1
 800e29c:	e7e5      	b.n	800e26a <floorf+0x36>
 800e29e:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800e2a2:	d3e4      	bcc.n	800e26e <floorf+0x3a>
 800e2a4:	ee30 0a00 	vadd.f32	s0, s0, s0
 800e2a8:	4770      	bx	lr
 800e2aa:	2300      	movs	r3, #0
 800e2ac:	e7dd      	b.n	800e26a <floorf+0x36>
 800e2ae:	bf00      	nop
 800e2b0:	7149f2ca 	.word	0x7149f2ca
 800e2b4:	bf800000 	.word	0xbf800000
 800e2b8:	007fffff 	.word	0x007fffff

0800e2bc <_init>:
 800e2bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2be:	bf00      	nop
 800e2c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e2c2:	bc08      	pop	{r3}
 800e2c4:	469e      	mov	lr, r3
 800e2c6:	4770      	bx	lr

0800e2c8 <_fini>:
 800e2c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2ca:	bf00      	nop
 800e2cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e2ce:	bc08      	pop	{r3}
 800e2d0:	469e      	mov	lr, r3
 800e2d2:	4770      	bx	lr
