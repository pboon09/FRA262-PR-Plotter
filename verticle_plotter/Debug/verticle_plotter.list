
verticle_plotter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ba70  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a0  0800bc48  0800bc48  0000cc48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c0e8  0800c0e8  0000e25c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c0e8  0800c0e8  0000d0e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c0f0  0800c0f0  0000e25c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c0f0  0800c0f0  0000d0f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c0f4  0800c0f4  0000d0f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000025c  20000000  0800c0f8  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b24  2000025c  0800c354  0000e25c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001d80  0800c354  0000ed80  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e25c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027c33  00000000  00000000  0000e28c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004a2b  00000000  00000000  00035ebf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019f0  00000000  00000000  0003a8f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001415  00000000  00000000  0003c2e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c00a  00000000  00000000  0003d6f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025c7e  00000000  00000000  000696ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00118355  00000000  00000000  0008f37d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001a76d2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000739c  00000000  00000000  001a7718  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  001aeab4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000025c 	.word	0x2000025c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800bc30 	.word	0x0800bc30

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000260 	.word	0x20000260
 8000214:	0800bc30 	.word	0x0800bc30

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2uiz>:
 80009b4:	004a      	lsls	r2, r1, #1
 80009b6:	d211      	bcs.n	80009dc <__aeabi_d2uiz+0x28>
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009bc:	d211      	bcs.n	80009e2 <__aeabi_d2uiz+0x2e>
 80009be:	d50d      	bpl.n	80009dc <__aeabi_d2uiz+0x28>
 80009c0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d40e      	bmi.n	80009e8 <__aeabi_d2uiz+0x34>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	fa23 f002 	lsr.w	r0, r3, r2
 80009da:	4770      	bx	lr
 80009dc:	f04f 0000 	mov.w	r0, #0
 80009e0:	4770      	bx	lr
 80009e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009e6:	d102      	bne.n	80009ee <__aeabi_d2uiz+0x3a>
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ec:	4770      	bx	lr
 80009ee:	f04f 0000 	mov.w	r0, #0
 80009f2:	4770      	bx	lr

080009f4 <__aeabi_uldivmod>:
 80009f4:	b953      	cbnz	r3, 8000a0c <__aeabi_uldivmod+0x18>
 80009f6:	b94a      	cbnz	r2, 8000a0c <__aeabi_uldivmod+0x18>
 80009f8:	2900      	cmp	r1, #0
 80009fa:	bf08      	it	eq
 80009fc:	2800      	cmpeq	r0, #0
 80009fe:	bf1c      	itt	ne
 8000a00:	f04f 31ff 	movne.w	r1, #4294967295
 8000a04:	f04f 30ff 	movne.w	r0, #4294967295
 8000a08:	f000 b988 	b.w	8000d1c <__aeabi_idiv0>
 8000a0c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a10:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a14:	f000 f806 	bl	8000a24 <__udivmoddi4>
 8000a18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a20:	b004      	add	sp, #16
 8000a22:	4770      	bx	lr

08000a24 <__udivmoddi4>:
 8000a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a28:	9d08      	ldr	r5, [sp, #32]
 8000a2a:	468e      	mov	lr, r1
 8000a2c:	4604      	mov	r4, r0
 8000a2e:	4688      	mov	r8, r1
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d14a      	bne.n	8000aca <__udivmoddi4+0xa6>
 8000a34:	428a      	cmp	r2, r1
 8000a36:	4617      	mov	r7, r2
 8000a38:	d962      	bls.n	8000b00 <__udivmoddi4+0xdc>
 8000a3a:	fab2 f682 	clz	r6, r2
 8000a3e:	b14e      	cbz	r6, 8000a54 <__udivmoddi4+0x30>
 8000a40:	f1c6 0320 	rsb	r3, r6, #32
 8000a44:	fa01 f806 	lsl.w	r8, r1, r6
 8000a48:	fa20 f303 	lsr.w	r3, r0, r3
 8000a4c:	40b7      	lsls	r7, r6
 8000a4e:	ea43 0808 	orr.w	r8, r3, r8
 8000a52:	40b4      	lsls	r4, r6
 8000a54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a58:	fa1f fc87 	uxth.w	ip, r7
 8000a5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000a60:	0c23      	lsrs	r3, r4, #16
 8000a62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000a66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000a6e:	429a      	cmp	r2, r3
 8000a70:	d909      	bls.n	8000a86 <__udivmoddi4+0x62>
 8000a72:	18fb      	adds	r3, r7, r3
 8000a74:	f101 30ff 	add.w	r0, r1, #4294967295
 8000a78:	f080 80ea 	bcs.w	8000c50 <__udivmoddi4+0x22c>
 8000a7c:	429a      	cmp	r2, r3
 8000a7e:	f240 80e7 	bls.w	8000c50 <__udivmoddi4+0x22c>
 8000a82:	3902      	subs	r1, #2
 8000a84:	443b      	add	r3, r7
 8000a86:	1a9a      	subs	r2, r3, r2
 8000a88:	b2a3      	uxth	r3, r4
 8000a8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000a92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000a96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000a9a:	459c      	cmp	ip, r3
 8000a9c:	d909      	bls.n	8000ab2 <__udivmoddi4+0x8e>
 8000a9e:	18fb      	adds	r3, r7, r3
 8000aa0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000aa4:	f080 80d6 	bcs.w	8000c54 <__udivmoddi4+0x230>
 8000aa8:	459c      	cmp	ip, r3
 8000aaa:	f240 80d3 	bls.w	8000c54 <__udivmoddi4+0x230>
 8000aae:	443b      	add	r3, r7
 8000ab0:	3802      	subs	r0, #2
 8000ab2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ab6:	eba3 030c 	sub.w	r3, r3, ip
 8000aba:	2100      	movs	r1, #0
 8000abc:	b11d      	cbz	r5, 8000ac6 <__udivmoddi4+0xa2>
 8000abe:	40f3      	lsrs	r3, r6
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	e9c5 3200 	strd	r3, r2, [r5]
 8000ac6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aca:	428b      	cmp	r3, r1
 8000acc:	d905      	bls.n	8000ada <__udivmoddi4+0xb6>
 8000ace:	b10d      	cbz	r5, 8000ad4 <__udivmoddi4+0xb0>
 8000ad0:	e9c5 0100 	strd	r0, r1, [r5]
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	4608      	mov	r0, r1
 8000ad8:	e7f5      	b.n	8000ac6 <__udivmoddi4+0xa2>
 8000ada:	fab3 f183 	clz	r1, r3
 8000ade:	2900      	cmp	r1, #0
 8000ae0:	d146      	bne.n	8000b70 <__udivmoddi4+0x14c>
 8000ae2:	4573      	cmp	r3, lr
 8000ae4:	d302      	bcc.n	8000aec <__udivmoddi4+0xc8>
 8000ae6:	4282      	cmp	r2, r0
 8000ae8:	f200 8105 	bhi.w	8000cf6 <__udivmoddi4+0x2d2>
 8000aec:	1a84      	subs	r4, r0, r2
 8000aee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000af2:	2001      	movs	r0, #1
 8000af4:	4690      	mov	r8, r2
 8000af6:	2d00      	cmp	r5, #0
 8000af8:	d0e5      	beq.n	8000ac6 <__udivmoddi4+0xa2>
 8000afa:	e9c5 4800 	strd	r4, r8, [r5]
 8000afe:	e7e2      	b.n	8000ac6 <__udivmoddi4+0xa2>
 8000b00:	2a00      	cmp	r2, #0
 8000b02:	f000 8090 	beq.w	8000c26 <__udivmoddi4+0x202>
 8000b06:	fab2 f682 	clz	r6, r2
 8000b0a:	2e00      	cmp	r6, #0
 8000b0c:	f040 80a4 	bne.w	8000c58 <__udivmoddi4+0x234>
 8000b10:	1a8a      	subs	r2, r1, r2
 8000b12:	0c03      	lsrs	r3, r0, #16
 8000b14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b18:	b280      	uxth	r0, r0
 8000b1a:	b2bc      	uxth	r4, r7
 8000b1c:	2101      	movs	r1, #1
 8000b1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000b22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000b26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000b2e:	429a      	cmp	r2, r3
 8000b30:	d907      	bls.n	8000b42 <__udivmoddi4+0x11e>
 8000b32:	18fb      	adds	r3, r7, r3
 8000b34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000b38:	d202      	bcs.n	8000b40 <__udivmoddi4+0x11c>
 8000b3a:	429a      	cmp	r2, r3
 8000b3c:	f200 80e0 	bhi.w	8000d00 <__udivmoddi4+0x2dc>
 8000b40:	46c4      	mov	ip, r8
 8000b42:	1a9b      	subs	r3, r3, r2
 8000b44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000b48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000b4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000b50:	fb02 f404 	mul.w	r4, r2, r4
 8000b54:	429c      	cmp	r4, r3
 8000b56:	d907      	bls.n	8000b68 <__udivmoddi4+0x144>
 8000b58:	18fb      	adds	r3, r7, r3
 8000b5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000b5e:	d202      	bcs.n	8000b66 <__udivmoddi4+0x142>
 8000b60:	429c      	cmp	r4, r3
 8000b62:	f200 80ca 	bhi.w	8000cfa <__udivmoddi4+0x2d6>
 8000b66:	4602      	mov	r2, r0
 8000b68:	1b1b      	subs	r3, r3, r4
 8000b6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000b6e:	e7a5      	b.n	8000abc <__udivmoddi4+0x98>
 8000b70:	f1c1 0620 	rsb	r6, r1, #32
 8000b74:	408b      	lsls	r3, r1
 8000b76:	fa22 f706 	lsr.w	r7, r2, r6
 8000b7a:	431f      	orrs	r7, r3
 8000b7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000b80:	fa20 f306 	lsr.w	r3, r0, r6
 8000b84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000b88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000b8c:	4323      	orrs	r3, r4
 8000b8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000b92:	fa1f fc87 	uxth.w	ip, r7
 8000b96:	fbbe f0f9 	udiv	r0, lr, r9
 8000b9a:	0c1c      	lsrs	r4, r3, #16
 8000b9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ba0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ba4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ba8:	45a6      	cmp	lr, r4
 8000baa:	fa02 f201 	lsl.w	r2, r2, r1
 8000bae:	d909      	bls.n	8000bc4 <__udivmoddi4+0x1a0>
 8000bb0:	193c      	adds	r4, r7, r4
 8000bb2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000bb6:	f080 809c 	bcs.w	8000cf2 <__udivmoddi4+0x2ce>
 8000bba:	45a6      	cmp	lr, r4
 8000bbc:	f240 8099 	bls.w	8000cf2 <__udivmoddi4+0x2ce>
 8000bc0:	3802      	subs	r0, #2
 8000bc2:	443c      	add	r4, r7
 8000bc4:	eba4 040e 	sub.w	r4, r4, lr
 8000bc8:	fa1f fe83 	uxth.w	lr, r3
 8000bcc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000bd0:	fb09 4413 	mls	r4, r9, r3, r4
 8000bd4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000bd8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000bdc:	45a4      	cmp	ip, r4
 8000bde:	d908      	bls.n	8000bf2 <__udivmoddi4+0x1ce>
 8000be0:	193c      	adds	r4, r7, r4
 8000be2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000be6:	f080 8082 	bcs.w	8000cee <__udivmoddi4+0x2ca>
 8000bea:	45a4      	cmp	ip, r4
 8000bec:	d97f      	bls.n	8000cee <__udivmoddi4+0x2ca>
 8000bee:	3b02      	subs	r3, #2
 8000bf0:	443c      	add	r4, r7
 8000bf2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000bf6:	eba4 040c 	sub.w	r4, r4, ip
 8000bfa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000bfe:	4564      	cmp	r4, ip
 8000c00:	4673      	mov	r3, lr
 8000c02:	46e1      	mov	r9, ip
 8000c04:	d362      	bcc.n	8000ccc <__udivmoddi4+0x2a8>
 8000c06:	d05f      	beq.n	8000cc8 <__udivmoddi4+0x2a4>
 8000c08:	b15d      	cbz	r5, 8000c22 <__udivmoddi4+0x1fe>
 8000c0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000c0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000c12:	fa04 f606 	lsl.w	r6, r4, r6
 8000c16:	fa22 f301 	lsr.w	r3, r2, r1
 8000c1a:	431e      	orrs	r6, r3
 8000c1c:	40cc      	lsrs	r4, r1
 8000c1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000c22:	2100      	movs	r1, #0
 8000c24:	e74f      	b.n	8000ac6 <__udivmoddi4+0xa2>
 8000c26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000c2a:	0c01      	lsrs	r1, r0, #16
 8000c2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000c30:	b280      	uxth	r0, r0
 8000c32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000c36:	463b      	mov	r3, r7
 8000c38:	4638      	mov	r0, r7
 8000c3a:	463c      	mov	r4, r7
 8000c3c:	46b8      	mov	r8, r7
 8000c3e:	46be      	mov	lr, r7
 8000c40:	2620      	movs	r6, #32
 8000c42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000c46:	eba2 0208 	sub.w	r2, r2, r8
 8000c4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000c4e:	e766      	b.n	8000b1e <__udivmoddi4+0xfa>
 8000c50:	4601      	mov	r1, r0
 8000c52:	e718      	b.n	8000a86 <__udivmoddi4+0x62>
 8000c54:	4610      	mov	r0, r2
 8000c56:	e72c      	b.n	8000ab2 <__udivmoddi4+0x8e>
 8000c58:	f1c6 0220 	rsb	r2, r6, #32
 8000c5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000c60:	40b7      	lsls	r7, r6
 8000c62:	40b1      	lsls	r1, r6
 8000c64:	fa20 f202 	lsr.w	r2, r0, r2
 8000c68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c6c:	430a      	orrs	r2, r1
 8000c6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000c72:	b2bc      	uxth	r4, r7
 8000c74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000c78:	0c11      	lsrs	r1, r2, #16
 8000c7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c7e:	fb08 f904 	mul.w	r9, r8, r4
 8000c82:	40b0      	lsls	r0, r6
 8000c84:	4589      	cmp	r9, r1
 8000c86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000c8a:	b280      	uxth	r0, r0
 8000c8c:	d93e      	bls.n	8000d0c <__udivmoddi4+0x2e8>
 8000c8e:	1879      	adds	r1, r7, r1
 8000c90:	f108 3cff 	add.w	ip, r8, #4294967295
 8000c94:	d201      	bcs.n	8000c9a <__udivmoddi4+0x276>
 8000c96:	4589      	cmp	r9, r1
 8000c98:	d81f      	bhi.n	8000cda <__udivmoddi4+0x2b6>
 8000c9a:	eba1 0109 	sub.w	r1, r1, r9
 8000c9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ca2:	fb09 f804 	mul.w	r8, r9, r4
 8000ca6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000caa:	b292      	uxth	r2, r2
 8000cac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000cb0:	4542      	cmp	r2, r8
 8000cb2:	d229      	bcs.n	8000d08 <__udivmoddi4+0x2e4>
 8000cb4:	18ba      	adds	r2, r7, r2
 8000cb6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000cba:	d2c4      	bcs.n	8000c46 <__udivmoddi4+0x222>
 8000cbc:	4542      	cmp	r2, r8
 8000cbe:	d2c2      	bcs.n	8000c46 <__udivmoddi4+0x222>
 8000cc0:	f1a9 0102 	sub.w	r1, r9, #2
 8000cc4:	443a      	add	r2, r7
 8000cc6:	e7be      	b.n	8000c46 <__udivmoddi4+0x222>
 8000cc8:	45f0      	cmp	r8, lr
 8000cca:	d29d      	bcs.n	8000c08 <__udivmoddi4+0x1e4>
 8000ccc:	ebbe 0302 	subs.w	r3, lr, r2
 8000cd0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000cd4:	3801      	subs	r0, #1
 8000cd6:	46e1      	mov	r9, ip
 8000cd8:	e796      	b.n	8000c08 <__udivmoddi4+0x1e4>
 8000cda:	eba7 0909 	sub.w	r9, r7, r9
 8000cde:	4449      	add	r1, r9
 8000ce0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ce4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ce8:	fb09 f804 	mul.w	r8, r9, r4
 8000cec:	e7db      	b.n	8000ca6 <__udivmoddi4+0x282>
 8000cee:	4673      	mov	r3, lr
 8000cf0:	e77f      	b.n	8000bf2 <__udivmoddi4+0x1ce>
 8000cf2:	4650      	mov	r0, sl
 8000cf4:	e766      	b.n	8000bc4 <__udivmoddi4+0x1a0>
 8000cf6:	4608      	mov	r0, r1
 8000cf8:	e6fd      	b.n	8000af6 <__udivmoddi4+0xd2>
 8000cfa:	443b      	add	r3, r7
 8000cfc:	3a02      	subs	r2, #2
 8000cfe:	e733      	b.n	8000b68 <__udivmoddi4+0x144>
 8000d00:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d04:	443b      	add	r3, r7
 8000d06:	e71c      	b.n	8000b42 <__udivmoddi4+0x11e>
 8000d08:	4649      	mov	r1, r9
 8000d0a:	e79c      	b.n	8000c46 <__udivmoddi4+0x222>
 8000d0c:	eba1 0109 	sub.w	r1, r1, r9
 8000d10:	46c4      	mov	ip, r8
 8000d12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d16:	fb09 f804 	mul.w	r8, r9, r4
 8000d1a:	e7c4      	b.n	8000ca6 <__udivmoddi4+0x282>

08000d1c <__aeabi_idiv0>:
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop

08000d20 <ADC_DMA_Init>:

#include "ADC_DMA.h"

void ADC_DMA_Init(ADC_DMA *adc_dma, ADC_HandleTypeDef *hadc,
                 uint16_t *buffer, uint32_t buffer_length,
                 uint8_t num_channels, float vref, float resolution) {
 8000d20:	b480      	push	{r7}
 8000d22:	b089      	sub	sp, #36	@ 0x24
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6178      	str	r0, [r7, #20]
 8000d28:	6139      	str	r1, [r7, #16]
 8000d2a:	60fa      	str	r2, [r7, #12]
 8000d2c:	60bb      	str	r3, [r7, #8]
 8000d2e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000d32:	edc7 0a00 	vstr	s1, [r7]

    adc_dma->hadc = hadc;
 8000d36:	697b      	ldr	r3, [r7, #20]
 8000d38:	693a      	ldr	r2, [r7, #16]
 8000d3a:	601a      	str	r2, [r3, #0]
    adc_dma->dma_buffer = buffer;
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	68fa      	ldr	r2, [r7, #12]
 8000d40:	605a      	str	r2, [r3, #4]
    adc_dma->buffer_length = buffer_length;
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	68ba      	ldr	r2, [r7, #8]
 8000d46:	609a      	str	r2, [r3, #8]
    adc_dma->num_channels = num_channels;
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8000d4e:	731a      	strb	r2, [r3, #12]
    adc_dma->adc_vref = vref;
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	687a      	ldr	r2, [r7, #4]
 8000d54:	611a      	str	r2, [r3, #16]
    adc_dma->adc_resolution = resolution;
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	683a      	ldr	r2, [r7, #0]
 8000d5a:	615a      	str	r2, [r3, #20]

    // Initialize DMA buffer
    for (uint32_t i = 0; i < buffer_length; i++) {
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	61fb      	str	r3, [r7, #28]
 8000d60:	e008      	b.n	8000d74 <ADC_DMA_Init+0x54>
        buffer[i] = 0;
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	005b      	lsls	r3, r3, #1
 8000d66:	68fa      	ldr	r2, [r7, #12]
 8000d68:	4413      	add	r3, r2
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	801a      	strh	r2, [r3, #0]
    for (uint32_t i = 0; i < buffer_length; i++) {
 8000d6e:	69fb      	ldr	r3, [r7, #28]
 8000d70:	3301      	adds	r3, #1
 8000d72:	61fb      	str	r3, [r7, #28]
 8000d74:	69fa      	ldr	r2, [r7, #28]
 8000d76:	68bb      	ldr	r3, [r7, #8]
 8000d78:	429a      	cmp	r2, r3
 8000d7a:	d3f2      	bcc.n	8000d62 <ADC_DMA_Init+0x42>
    }
}
 8000d7c:	bf00      	nop
 8000d7e:	bf00      	nop
 8000d80:	3724      	adds	r7, #36	@ 0x24
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr

08000d8a <ADC_DMA_Start>:

void ADC_DMA_Start(ADC_DMA *adc_dma) {
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	b082      	sub	sp, #8
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	6078      	str	r0, [r7, #4]
    // Perform ADC calibration
    HAL_ADCEx_Calibration_Start(adc_dma->hadc, ADC_SINGLE_ENDED);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	217f      	movs	r1, #127	@ 0x7f
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f004 f817 	bl	8004dcc <HAL_ADCEx_Calibration_Start>

    // Start ADC with DMA
    HAL_ADC_Start_DMA(adc_dma->hadc, (uint32_t*)adc_dma->dma_buffer, adc_dma->buffer_length);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6818      	ldr	r0, [r3, #0]
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	6859      	ldr	r1, [r3, #4]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	689b      	ldr	r3, [r3, #8]
 8000daa:	461a      	mov	r2, r3
 8000dac:	f003 f900 	bl	8003fb0 <HAL_ADC_Start_DMA>
}
 8000db0:	bf00      	nop
 8000db2:	3708      	adds	r7, #8
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <PID_CONTROLLER_Init>:
  if (_u > _upper_limit) return _upper_limit;
  else if (_u < _lower_limit) return _lower_limit;
  return (int32_t)_u;
}

void PID_CONTROLLER_Init(PID_CONTROLLER *controller, float _Kp, float _Ki, float _Kd, float _u_max) {
 8000db8:	b480      	push	{r7}
 8000dba:	b087      	sub	sp, #28
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6178      	str	r0, [r7, #20]
 8000dc0:	ed87 0a04 	vstr	s0, [r7, #16]
 8000dc4:	edc7 0a03 	vstr	s1, [r7, #12]
 8000dc8:	ed87 1a02 	vstr	s2, [r7, #8]
 8000dcc:	edc7 1a01 	vstr	s3, [r7, #4]
  controller->Kp = _Kp;
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	693a      	ldr	r2, [r7, #16]
 8000dd4:	601a      	str	r2, [r3, #0]
  controller->Ki = _Ki;
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	68fa      	ldr	r2, [r7, #12]
 8000dda:	605a      	str	r2, [r3, #4]
  controller->Kd = _Kd;
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	68ba      	ldr	r2, [r7, #8]
 8000de0:	609a      	str	r2, [r3, #8]
  controller->u_max = _u_max;
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	687a      	ldr	r2, [r7, #4]
 8000de6:	60da      	str	r2, [r3, #12]
  controller->ek_1 = 0;
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	f04f 0200 	mov.w	r2, #0
 8000dee:	611a      	str	r2, [r3, #16]
  controller->ek_2 = 0;
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	f04f 0200 	mov.w	r2, #0
 8000df6:	615a      	str	r2, [r3, #20]
  controller->u = 0;
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	f04f 0200 	mov.w	r2, #0
 8000dfe:	619a      	str	r2, [r3, #24]

}
 8000e00:	bf00      	nop
 8000e02:	371c      	adds	r7, #28
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr

08000e0c <MDXX_GPIO_init>:
	PWM_init(&(mdxx->pwm), htimp, timp_chx);
	mdxx->mode = 0;
}

void MDXX_GPIO_init(MDXX *mdxx, TIM_HandleTypeDef *htimp, uint16_t timp_chx,
		GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	60f8      	str	r0, [r7, #12]
 8000e14:	60b9      	str	r1, [r7, #8]
 8000e16:	603b      	str	r3, [r7, #0]
 8000e18:	4613      	mov	r3, r2
 8000e1a:	80fb      	strh	r3, [r7, #6]
	mdxx->htimp = htimp;
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	68ba      	ldr	r2, [r7, #8]
 8000e20:	609a      	str	r2, [r3, #8]
	mdxx->timp_chx = timp_chx;
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	88fa      	ldrh	r2, [r7, #6]
 8000e26:	819a      	strh	r2, [r3, #12]
	PWM_init(&(mdxx->pwm), htimp, timp_chx);
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	3328      	adds	r3, #40	@ 0x28
 8000e2c:	88fa      	ldrh	r2, [r7, #6]
 8000e2e:	68b9      	ldr	r1, [r7, #8]
 8000e30:	4618      	mov	r0, r3
 8000e32:	f000 fd51 	bl	80018d8 <PWM_init>
	mdxx->GPIOx = GPIOx;
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	683a      	ldr	r2, [r7, #0]
 8000e3a:	645a      	str	r2, [r3, #68]	@ 0x44
	mdxx->GPIO_Pin = GPIO_Pin;
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	8b3a      	ldrh	r2, [r7, #24]
 8000e40:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
	mdxx->mode = 1;
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	2201      	movs	r2, #1
 8000e48:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
}
 8000e4c:	bf00      	nop
 8000e4e:	3710      	adds	r7, #16
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <MDXX_set_range>:
			mdxx->cmd = fabs(duty);
		}
	}
}

void MDXX_set_range(MDXX *mdxx, float freq, float duty) {
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	60f8      	str	r0, [r7, #12]
 8000e5c:	ed87 0a02 	vstr	s0, [r7, #8]
 8000e60:	edc7 0a01 	vstr	s1, [r7, #4]
	if (mdxx->mode == 0) {
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d15f      	bne.n	8000f2e <MDXX_set_range+0xda>
		if (duty == 0) {
 8000e6e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e72:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000e76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e7a:	d115      	bne.n	8000ea8 <MDXX_set_range+0x54>
			PWM_write_range(&(mdxx->dir), freq, 0);
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	3310      	adds	r3, #16
 8000e80:	eddf 0a5f 	vldr	s1, [pc, #380]	@ 8001000 <MDXX_set_range+0x1ac>
 8000e84:	ed97 0a02 	vldr	s0, [r7, #8]
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f000 fd49 	bl	8001920 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, 0);
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	3328      	adds	r3, #40	@ 0x28
 8000e92:	eddf 0a5b 	vldr	s1, [pc, #364]	@ 8001000 <MDXX_set_range+0x1ac>
 8000e96:	ed97 0a02 	vldr	s0, [r7, #8]
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f000 fd40 	bl	8001920 <PWM_write_range>
			mdxx->cmd = 0;
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	641a      	str	r2, [r3, #64]	@ 0x40
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 1);
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
			mdxx->cmd = fabs(duty);
		}
	}
}
 8000ea6:	e0a6      	b.n	8000ff6 <MDXX_set_range+0x1a2>
		} else if (duty > 0) {
 8000ea8:	edd7 7a01 	vldr	s15, [r7, #4]
 8000eac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000eb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000eb4:	dd1a      	ble.n	8000eec <MDXX_set_range+0x98>
			PWM_write_range(&(mdxx->dir), freq, 0);
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	3310      	adds	r3, #16
 8000eba:	eddf 0a51 	vldr	s1, [pc, #324]	@ 8001000 <MDXX_set_range+0x1ac>
 8000ebe:	ed97 0a02 	vldr	s0, [r7, #8]
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f000 fd2c 	bl	8001920 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, duty);
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	3328      	adds	r3, #40	@ 0x28
 8000ecc:	edd7 0a01 	vldr	s1, [r7, #4]
 8000ed0:	ed97 0a02 	vldr	s0, [r7, #8]
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f000 fd23 	bl	8001920 <PWM_write_range>
			mdxx->cmd = duty;
 8000eda:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ede:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ee2:	ee17 2a90 	vmov	r2, s15
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8000eea:	e084      	b.n	8000ff6 <MDXX_set_range+0x1a2>
			PWM_write_range(&(mdxx->dir), freq, 100);
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	3310      	adds	r3, #16
 8000ef0:	eddf 0a44 	vldr	s1, [pc, #272]	@ 8001004 <MDXX_set_range+0x1b0>
 8000ef4:	ed97 0a02 	vldr	s0, [r7, #8]
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f000 fd11 	bl	8001920 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	3328      	adds	r3, #40	@ 0x28
 8000f02:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f06:	eef0 7ae7 	vabs.f32	s15, s15
 8000f0a:	eef0 0a67 	vmov.f32	s1, s15
 8000f0e:	ed97 0a02 	vldr	s0, [r7, #8]
 8000f12:	4618      	mov	r0, r3
 8000f14:	f000 fd04 	bl	8001920 <PWM_write_range>
			mdxx->cmd = fabs(duty);
 8000f18:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f1c:	eef0 7ae7 	vabs.f32	s15, s15
 8000f20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f24:	ee17 2a90 	vmov	r2, s15
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8000f2c:	e063      	b.n	8000ff6 <MDXX_set_range+0x1a2>
	} else if (mdxx->mode == 1) {
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8000f34:	2b01      	cmp	r3, #1
 8000f36:	d15e      	bne.n	8000ff6 <MDXX_set_range+0x1a2>
		if (duty == 0) {
 8000f38:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f3c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000f40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f44:	d115      	bne.n	8000f72 <MDXX_set_range+0x11e>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 0);
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8000f50:	2200      	movs	r2, #0
 8000f52:	4619      	mov	r1, r3
 8000f54:	f004 fe68 	bl	8005c28 <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, 0);
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	3328      	adds	r3, #40	@ 0x28
 8000f5c:	eddf 0a28 	vldr	s1, [pc, #160]	@ 8001000 <MDXX_set_range+0x1ac>
 8000f60:	ed97 0a02 	vldr	s0, [r7, #8]
 8000f64:	4618      	mov	r0, r3
 8000f66:	f000 fcdb 	bl	8001920 <PWM_write_range>
			mdxx->cmd = 0;
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8000f70:	e041      	b.n	8000ff6 <MDXX_set_range+0x1a2>
		} else if (duty > 0) {
 8000f72:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f76:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f7e:	dd1a      	ble.n	8000fb6 <MDXX_set_range+0x162>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 0);
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	f004 fe4b 	bl	8005c28 <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, duty);
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	3328      	adds	r3, #40	@ 0x28
 8000f96:	edd7 0a01 	vldr	s1, [r7, #4]
 8000f9a:	ed97 0a02 	vldr	s0, [r7, #8]
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f000 fcbe 	bl	8001920 <PWM_write_range>
			mdxx->cmd = duty;
 8000fa4:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fa8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fac:	ee17 2a90 	vmov	r2, s15
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8000fb4:	e01f      	b.n	8000ff6 <MDXX_set_range+0x1a2>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 1);
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	f004 fe30 	bl	8005c28 <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	3328      	adds	r3, #40	@ 0x28
 8000fcc:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fd0:	eef0 7ae7 	vabs.f32	s15, s15
 8000fd4:	eef0 0a67 	vmov.f32	s1, s15
 8000fd8:	ed97 0a02 	vldr	s0, [r7, #8]
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f000 fc9f 	bl	8001920 <PWM_write_range>
			mdxx->cmd = fabs(duty);
 8000fe2:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fe6:	eef0 7ae7 	vabs.f32	s15, s15
 8000fea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fee:	ee17 2a90 	vmov	r2, s15
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8000ff6:	bf00      	nop
 8000ff8:	3710      	adds	r7, #16
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	00000000 	.word	0x00000000
 8001004:	42c80000 	.word	0x42c80000

08001008 <FIR_init>:
 *      Author: transporter
 */
#include "FIR.h"
#include "arm_math.h"

void FIR_init(FIR *fir, uint16_t numTaps, float cutoffFreq, float samplingFreq) {
 8001008:	b580      	push	{r7, lr}
 800100a:	ed2d 8b02 	vpush	{d8}
 800100e:	b08a      	sub	sp, #40	@ 0x28
 8001010:	af00      	add	r7, sp, #0
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	460b      	mov	r3, r1
 8001016:	ed87 0a01 	vstr	s0, [r7, #4]
 800101a:	edc7 0a00 	vstr	s1, [r7]
 800101e:	817b      	strh	r3, [r7, #10]
    // Make sure numTaps is odd
    if (numTaps % 2 == 0) {
 8001020:	897b      	ldrh	r3, [r7, #10]
 8001022:	f003 0301 	and.w	r3, r3, #1
 8001026:	b29b      	uxth	r3, r3
 8001028:	2b00      	cmp	r3, #0
 800102a:	d102      	bne.n	8001032 <FIR_init+0x2a>
        numTaps += 1;
 800102c:	897b      	ldrh	r3, [r7, #10]
 800102e:	3301      	adds	r3, #1
 8001030:	817b      	strh	r3, [r7, #10]
    }

    fir->numTaps = numTaps;
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	897a      	ldrh	r2, [r7, #10]
 8001036:	811a      	strh	r2, [r3, #8]
    fir->bufferIndex = 0;
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	2200      	movs	r2, #0
 800103c:	815a      	strh	r2, [r3, #10]

    // Allocate memory for coefficients and buffer
    fir->coeffs = (float*)malloc(numTaps * sizeof(float));
 800103e:	897b      	ldrh	r3, [r7, #10]
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	4618      	mov	r0, r3
 8001044:	f009 ff78 	bl	800af38 <malloc>
 8001048:	4603      	mov	r3, r0
 800104a:	461a      	mov	r2, r3
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	601a      	str	r2, [r3, #0]
    fir->buffer = (float*)malloc(numTaps * sizeof(float));
 8001050:	897b      	ldrh	r3, [r7, #10]
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	4618      	mov	r0, r3
 8001056:	f009 ff6f 	bl	800af38 <malloc>
 800105a:	4603      	mov	r3, r0
 800105c:	461a      	mov	r2, r3
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	605a      	str	r2, [r3, #4]

    if (fir->coeffs != NULL && fir->buffer != NULL) {
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	2b00      	cmp	r3, #0
 8001068:	f000 80e0 	beq.w	800122c <FIR_init+0x224>
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	2b00      	cmp	r3, #0
 8001072:	f000 80db 	beq.w	800122c <FIR_init+0x224>
        // Clear buffer
        for (uint16_t i = 0; i < numTaps; i++) {
 8001076:	2300      	movs	r3, #0
 8001078:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800107a:	e00a      	b.n	8001092 <FIR_init+0x8a>
            fir->buffer[i] = 0.0f;
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	685a      	ldr	r2, [r3, #4]
 8001080:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	4413      	add	r3, r2
 8001086:	f04f 0200 	mov.w	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
        for (uint16_t i = 0; i < numTaps; i++) {
 800108c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800108e:	3301      	adds	r3, #1
 8001090:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001092:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001094:	897b      	ldrh	r3, [r7, #10]
 8001096:	429a      	cmp	r2, r3
 8001098:	d3f0      	bcc.n	800107c <FIR_init+0x74>
        }

        // Calculate normalized cutoff frequency (0 to 0.5)
        float omega = cutoffFreq / samplingFreq;
 800109a:	edd7 6a01 	vldr	s13, [r7, #4]
 800109e:	ed97 7a00 	vldr	s14, [r7]
 80010a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010a6:	edc7 7a06 	vstr	s15, [r7, #24]

        // Calculate filter coefficients (low-pass)
        int16_t half_taps = numTaps / 2;
 80010aa:	897b      	ldrh	r3, [r7, #10]
 80010ac:	085b      	lsrs	r3, r3, #1
 80010ae:	b29b      	uxth	r3, r3
 80010b0:	82fb      	strh	r3, [r7, #22]
        for (int16_t i = 0; i < numTaps; i++) {
 80010b2:	2300      	movs	r3, #0
 80010b4:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80010b6:	e077      	b.n	80011a8 <FIR_init+0x1a0>
            if (i == half_taps) {
 80010b8:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 80010bc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80010c0:	429a      	cmp	r2, r3
 80010c2:	d10c      	bne.n	80010de <FIR_init+0xd6>
                // Center tap
                fir->coeffs[i] = 2.0f * omega;
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	4413      	add	r3, r2
 80010d0:	edd7 7a06 	vldr	s15, [r7, #24]
 80010d4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80010d8:	edc3 7a00 	vstr	s15, [r3]
 80010dc:	e02c      	b.n	8001138 <FIR_init+0x130>
            } else {
                // Side taps
                int16_t n = i - half_taps;
 80010de:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80010e0:	8afb      	ldrh	r3, [r7, #22]
 80010e2:	1ad3      	subs	r3, r2, r3
 80010e4:	b29b      	uxth	r3, r3
 80010e6:	82bb      	strh	r3, [r7, #20]
                fir->coeffs[i] = sinf(2.0f * PI * omega * n) / (PI * n);
 80010e8:	edd7 7a06 	vldr	s15, [r7, #24]
 80010ec:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8001238 <FIR_init+0x230>
 80010f0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80010f4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80010f8:	ee07 3a90 	vmov	s15, r3
 80010fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001100:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001104:	eeb0 0a67 	vmov.f32	s0, s15
 8001108:	f00a f862 	bl	800b1d0 <sinf>
 800110c:	eef0 6a40 	vmov.f32	s13, s0
 8001110:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001114:	ee07 3a90 	vmov	s15, r3
 8001118:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800111c:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 800123c <FIR_init+0x234>
 8001120:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	4413      	add	r3, r2
 8001130:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001134:	edc3 7a00 	vstr	s15, [r3]
            }

            // Apply Hamming window
            fir->coeffs[i] *= (0.54f - 0.46f * cosf(2.0f * PI * i / (numTaps - 1)));
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	4413      	add	r3, r2
 8001144:	ed93 8a00 	vldr	s16, [r3]
 8001148:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800114c:	ee07 3a90 	vmov	s15, r3
 8001150:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001154:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8001238 <FIR_init+0x230>
 8001158:	ee27 7a87 	vmul.f32	s14, s15, s14
 800115c:	897b      	ldrh	r3, [r7, #10]
 800115e:	3b01      	subs	r3, #1
 8001160:	ee07 3a90 	vmov	s15, r3
 8001164:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001168:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800116c:	eeb0 0a66 	vmov.f32	s0, s13
 8001170:	f009 ffea 	bl	800b148 <cosf>
 8001174:	eef0 7a40 	vmov.f32	s15, s0
 8001178:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8001240 <FIR_init+0x238>
 800117c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001180:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8001244 <FIR_init+0x23c>
 8001184:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001190:	009b      	lsls	r3, r3, #2
 8001192:	4413      	add	r3, r2
 8001194:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001198:	edc3 7a00 	vstr	s15, [r3]
        for (int16_t i = 0; i < numTaps; i++) {
 800119c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80011a0:	b29b      	uxth	r3, r3
 80011a2:	3301      	adds	r3, #1
 80011a4:	b29b      	uxth	r3, r3
 80011a6:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80011a8:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 80011ac:	897b      	ldrh	r3, [r7, #10]
 80011ae:	429a      	cmp	r2, r3
 80011b0:	db82      	blt.n	80010b8 <FIR_init+0xb0>
        }

        // Normalize gain
        float sum = 0.0f;
 80011b2:	f04f 0300 	mov.w	r3, #0
 80011b6:	623b      	str	r3, [r7, #32]
        for (uint16_t i = 0; i < numTaps; i++) {
 80011b8:	2300      	movs	r3, #0
 80011ba:	83fb      	strh	r3, [r7, #30]
 80011bc:	e00f      	b.n	80011de <FIR_init+0x1d6>
            sum += fir->coeffs[i];
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	8bfb      	ldrh	r3, [r7, #30]
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	4413      	add	r3, r2
 80011c8:	edd3 7a00 	vldr	s15, [r3]
 80011cc:	ed97 7a08 	vldr	s14, [r7, #32]
 80011d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011d4:	edc7 7a08 	vstr	s15, [r7, #32]
        for (uint16_t i = 0; i < numTaps; i++) {
 80011d8:	8bfb      	ldrh	r3, [r7, #30]
 80011da:	3301      	adds	r3, #1
 80011dc:	83fb      	strh	r3, [r7, #30]
 80011de:	8bfa      	ldrh	r2, [r7, #30]
 80011e0:	897b      	ldrh	r3, [r7, #10]
 80011e2:	429a      	cmp	r2, r3
 80011e4:	d3eb      	bcc.n	80011be <FIR_init+0x1b6>
        }

        if (sum != 0.0f) {
 80011e6:	edd7 7a08 	vldr	s15, [r7, #32]
 80011ea:	eef5 7a40 	vcmp.f32	s15, #0.0
 80011ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011f2:	d01b      	beq.n	800122c <FIR_init+0x224>
            for (uint16_t i = 0; i < numTaps; i++) {
 80011f4:	2300      	movs	r3, #0
 80011f6:	83bb      	strh	r3, [r7, #28]
 80011f8:	e014      	b.n	8001224 <FIR_init+0x21c>
                fir->coeffs[i] /= sum;
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	8bbb      	ldrh	r3, [r7, #28]
 8001200:	009b      	lsls	r3, r3, #2
 8001202:	4413      	add	r3, r2
 8001204:	edd3 6a00 	vldr	s13, [r3]
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	8bbb      	ldrh	r3, [r7, #28]
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	4413      	add	r3, r2
 8001212:	ed97 7a08 	vldr	s14, [r7, #32]
 8001216:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800121a:	edc3 7a00 	vstr	s15, [r3]
            for (uint16_t i = 0; i < numTaps; i++) {
 800121e:	8bbb      	ldrh	r3, [r7, #28]
 8001220:	3301      	adds	r3, #1
 8001222:	83bb      	strh	r3, [r7, #28]
 8001224:	8bba      	ldrh	r2, [r7, #28]
 8001226:	897b      	ldrh	r3, [r7, #10]
 8001228:	429a      	cmp	r2, r3
 800122a:	d3e6      	bcc.n	80011fa <FIR_init+0x1f2>
            }
        }
    }
}
 800122c:	bf00      	nop
 800122e:	3728      	adds	r7, #40	@ 0x28
 8001230:	46bd      	mov	sp, r7
 8001232:	ecbd 8b02 	vpop	{d8}
 8001236:	bd80      	pop	{r7, pc}
 8001238:	40c90fdb 	.word	0x40c90fdb
 800123c:	40490fdb 	.word	0x40490fdb
 8001240:	3eeb851f 	.word	0x3eeb851f
 8001244:	3f0a3d71 	.word	0x3f0a3d71

08001248 <modbus_1t5_Timeout>:
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);

// function for interrupt
void modbus_1t5_Timeout()
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 800124c:	4b0d      	ldr	r3, [pc, #52]	@ (8001284 <modbus_1t5_Timeout+0x3c>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	2201      	movs	r2, #1
 8001252:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8001254:	4b0b      	ldr	r3, [pc, #44]	@ (8001284 <modbus_1t5_Timeout+0x3c>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	691b      	ldr	r3, [r3, #16]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	2200      	movs	r2, #0
 800125e:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 8001260:	4b08      	ldr	r3, [pc, #32]	@ (8001284 <modbus_1t5_Timeout+0x3c>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	691b      	ldr	r3, [r3, #16]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	4b06      	ldr	r3, [pc, #24]	@ (8001284 <modbus_1t5_Timeout+0x3c>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	691b      	ldr	r3, [r3, #16]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f042 0201 	orr.w	r2, r2, #1
 8001276:	601a      	str	r2, [r3, #0]
}
 8001278:	bf00      	nop
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	20000278 	.word	0x20000278

08001288 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8001290:	4b04      	ldr	r3, [pc, #16]	@ (80012a4 <modbus_3t5_Timeout+0x1c>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	2201      	movs	r2, #1
 8001296:	755a      	strb	r2, [r3, #21]

}
 8001298:	bf00      	nop
 800129a:	370c      	adds	r7, #12
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr
 80012a4:	20000278 	.word	0x20000278

080012a8 <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 80012b0:	6878      	ldr	r0, [r7, #4]
 80012b2:	f008 fd05 	bl	8009cc0 <HAL_UART_GetError>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b20      	cmp	r3, #32
 80012ba:	d101      	bne.n	80012c0 <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 80012bc:	f7ff ffc4 	bl	8001248 <modbus_1t5_Timeout>

	}
}
 80012c0:	bf00      	nop
 80012c2:	3708      	adds	r7, #8
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}

080012c8 <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,UART_HandleTypeDef* huart,TIM_HandleTypeDef* htim ,u16u8_t* RegisterStartAddress,uint8_t slaveAddress,uint32_t RegisterSize)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	60f8      	str	r0, [r7, #12]
 80012d0:	60b9      	str	r1, [r7, #8]
 80012d2:	607a      	str	r2, [r7, #4]
 80012d4:	603b      	str	r3, [r7, #0]
	hModbus = hmodbus;
 80012d6:	4a2d      	ldr	r2, [pc, #180]	@ (800138c <Modbus_init+0xc4>)
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	6013      	str	r3, [r2, #0]

	hModbus->huart = huart;
 80012dc:	4b2b      	ldr	r3, [pc, #172]	@ (800138c <Modbus_init+0xc4>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	68ba      	ldr	r2, [r7, #8]
 80012e2:	60da      	str	r2, [r3, #12]
	hModbus->htim = htim;
 80012e4:	4b29      	ldr	r3, [pc, #164]	@ (800138c <Modbus_init+0xc4>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	687a      	ldr	r2, [r7, #4]
 80012ea:	611a      	str	r2, [r3, #16]
	hModbus->RegisterAddress = RegisterStartAddress;
 80012ec:	4b27      	ldr	r3, [pc, #156]	@ (800138c <Modbus_init+0xc4>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	683a      	ldr	r2, [r7, #0]
 80012f2:	605a      	str	r2, [r3, #4]
	hModbus->slaveAddress = slaveAddress;
 80012f4:	4b25      	ldr	r3, [pc, #148]	@ (800138c <Modbus_init+0xc4>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	7e3a      	ldrb	r2, [r7, #24]
 80012fa:	701a      	strb	r2, [r3, #0]
	hModbus->RegisterSize = RegisterSize;
 80012fc:	4b23      	ldr	r3, [pc, #140]	@ (800138c <Modbus_init+0xc4>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	69fa      	ldr	r2, [r7, #28]
 8001302:	609a      	str	r2, [r3, #8]

	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	691b      	ldr	r3, [r3, #16]
 8001308:	4a21      	ldr	r2, [pc, #132]	@ (8001390 <Modbus_init+0xc8>)
 800130a:	210e      	movs	r1, #14
 800130c:	4618      	mov	r0, r3
 800130e:	f006 fefb 	bl	8008108 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	68db      	ldr	r3, [r3, #12]
 8001316:	2110      	movs	r1, #16
 8001318:	4618      	mov	r0, r3
 800131a:	f008 fc7b 	bl	8009c14 <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	68db      	ldr	r3, [r3, #12]
 8001322:	4618      	mov	r0, r3
 8001324:	f008 fc92 	bl	8009c4c <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	4a19      	ldr	r2, [pc, #100]	@ (8001394 <Modbus_init+0xcc>)
 800132e:	2104      	movs	r1, #4
 8001330:	4618      	mov	r0, r3
 8001332:	f007 ff39 	bl	80091a8 <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 8001336:	4b15      	ldr	r3, [pc, #84]	@ (800138c <Modbus_init+0xc4>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 800133c:	4b13      	ldr	r3, [pc, #76]	@ (800138c <Modbus_init+0xc4>)
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	4b12      	ldr	r3, [pc, #72]	@ (800138c <Modbus_init+0xc4>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 8001348:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 800134c:	4413      	add	r3, r2
 800134e:	3302      	adds	r3, #2
 8001350:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001354:	4619      	mov	r1, r3
 8001356:	f008 f861 	bl	800941c <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 800135a:	4b0c      	ldr	r3, [pc, #48]	@ (800138c <Modbus_init+0xc4>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	691b      	ldr	r3, [r3, #16]
 8001360:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001364:	b2db      	uxtb	r3, r3
 8001366:	2b01      	cmp	r3, #1
 8001368:	d10c      	bne.n	8001384 <Modbus_init+0xbc>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 800136a:	4b08      	ldr	r3, [pc, #32]	@ (800138c <Modbus_init+0xc4>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	691b      	ldr	r3, [r3, #16]
 8001370:	4618      	mov	r0, r3
 8001372:	f005 fdb3 	bl	8006edc <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8001376:	4b05      	ldr	r3, [pc, #20]	@ (800138c <Modbus_init+0xc4>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	691b      	ldr	r3, [r3, #16]
 800137c:	2100      	movs	r1, #0
 800137e:	4618      	mov	r0, r3
 8001380:	f006 f87a 	bl	8007478 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8001384:	bf00      	nop
 8001386:	3710      	adds	r7, #16
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	20000278 	.word	0x20000278
 8001390:	08001289 	.word	0x08001289
 8001394:	080012a9 	.word	0x080012a9

08001398 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8001398:	b480      	push	{r7}
 800139a:	b085      	sub	sp, #20
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	460b      	mov	r3, r1
 80013a2:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 80013a4:	23ff      	movs	r3, #255	@ 0xff
 80013a6:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 80013a8:	23ff      	movs	r3, #255	@ 0xff
 80013aa:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 80013ac:	e013      	b.n	80013d6 <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	1c5a      	adds	r2, r3, #1
 80013b2:	607a      	str	r2, [r7, #4]
 80013b4:	781a      	ldrb	r2, [r3, #0]
 80013b6:	7bbb      	ldrb	r3, [r7, #14]
 80013b8:	4053      	eors	r3, r2
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 80013be:	4a10      	ldr	r2, [pc, #64]	@ (8001400 <CRC16+0x68>)
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	4413      	add	r3, r2
 80013c4:	781a      	ldrb	r2, [r3, #0]
 80013c6:	7bfb      	ldrb	r3, [r7, #15]
 80013c8:	4053      	eors	r3, r2
 80013ca:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 80013cc:	4a0d      	ldr	r2, [pc, #52]	@ (8001404 <CRC16+0x6c>)
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	4413      	add	r3, r2
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 80013d6:	883b      	ldrh	r3, [r7, #0]
 80013d8:	1e5a      	subs	r2, r3, #1
 80013da:	803a      	strh	r2, [r7, #0]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d1e6      	bne.n	80013ae <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 80013e0:	7bfb      	ldrb	r3, [r7, #15]
 80013e2:	b21b      	sxth	r3, r3
 80013e4:	021b      	lsls	r3, r3, #8
 80013e6:	b21a      	sxth	r2, r3
 80013e8:	7bbb      	ldrb	r3, [r7, #14]
 80013ea:	b21b      	sxth	r3, r3
 80013ec:	4313      	orrs	r3, r2
 80013ee:	b21b      	sxth	r3, r3
 80013f0:	b29b      	uxth	r3, r3
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3714      	adds	r7, #20
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	20000100 	.word	0x20000100
 8001404:	20000000 	.word	0x20000000

08001408 <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 800140e:	4b7e      	ldr	r3, [pc, #504]	@ (8001608 <Modbus_Protocal_Worker+0x200>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	7ddb      	ldrb	r3, [r3, #23]
 8001414:	3b01      	subs	r3, #1
 8001416:	2b03      	cmp	r3, #3
 8001418:	d80a      	bhi.n	8001430 <Modbus_Protocal_Worker+0x28>
 800141a:	a201      	add	r2, pc, #4	@ (adr r2, 8001420 <Modbus_Protocal_Worker+0x18>)
 800141c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001420:	0800143b 	.word	0x0800143b
 8001424:	080015cf 	.word	0x080015cf
 8001428:	080014c7 	.word	0x080014c7
 800142c:	0800150b 	.word	0x0800150b
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 8001430:	4b75      	ldr	r3, [pc, #468]	@ (8001608 <Modbus_Protocal_Worker+0x200>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	2201      	movs	r2, #1
 8001436:	75da      	strb	r2, [r3, #23]
		break;
 8001438:	e0e1      	b.n	80015fe <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 800143a:	4b73      	ldr	r3, [pc, #460]	@ (8001608 <Modbus_Protocal_Worker+0x200>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 8001442:	2b00      	cmp	r3, #0
 8001444:	d006      	beq.n	8001454 <Modbus_Protocal_Worker+0x4c>
		{
			/*set state*/
			hModbus->Mstatus= Modbus_state_Emission;
 8001446:	4b70      	ldr	r3, [pc, #448]	@ (8001608 <Modbus_Protocal_Worker+0x200>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	2202      	movs	r2, #2
 800144c:	75da      	strb	r2, [r3, #23]
			Modbus_Emission();
 800144e:	f000 f9cd 	bl	80017ec <Modbus_Emission>
 8001452:	e018      	b.n	8001486 <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->huart->RxXferSize!=hModbus->huart->RxXferCount)
 8001454:	4b6c      	ldr	r3, [pc, #432]	@ (8001608 <Modbus_Protocal_Worker+0x200>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	68db      	ldr	r3, [r3, #12]
 800145a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800145e:	4b6a      	ldr	r3, [pc, #424]	@ (8001608 <Modbus_Protocal_Worker+0x200>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8001468:	b29b      	uxth	r3, r3
 800146a:	429a      	cmp	r2, r3
 800146c:	d00b      	beq.n	8001486 <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 800146e:	4b66      	ldr	r3, [pc, #408]	@ (8001608 <Modbus_Protocal_Worker+0x200>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	2200      	movs	r2, #0
 8001474:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 8001476:	4b64      	ldr	r3, [pc, #400]	@ (8001608 <Modbus_Protocal_Worker+0x200>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	2200      	movs	r2, #0
 800147c:	755a      	strb	r2, [r3, #21]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 800147e:	4b62      	ldr	r3, [pc, #392]	@ (8001608 <Modbus_Protocal_Worker+0x200>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	2203      	movs	r2, #3
 8001484:	75da      	strb	r2, [r3, #23]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 8001486:	4b60      	ldr	r3, [pc, #384]	@ (8001608 <Modbus_Protocal_Worker+0x200>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001490:	2b20      	cmp	r3, #32
 8001492:	f040 80ad 	bne.w	80015f0 <Modbus_Protocal_Worker+0x1e8>
		{
			hModbus->modbusUartStructure.RxTail =0;
 8001496:	4b5c      	ldr	r3, [pc, #368]	@ (8001608 <Modbus_Protocal_Worker+0x200>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	2200      	movs	r2, #0
 800149c:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 80014a0:	4b59      	ldr	r3, [pc, #356]	@ (8001608 <Modbus_Protocal_Worker+0x200>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	68d8      	ldr	r0, [r3, #12]
		    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 80014a6:	4b58      	ldr	r3, [pc, #352]	@ (8001608 <Modbus_Protocal_Worker+0x200>)
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	4b57      	ldr	r3, [pc, #348]	@ (8001608 <Modbus_Protocal_Worker+0x200>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 80014b2:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 80014b6:	4413      	add	r3, r2
 80014b8:	3302      	adds	r3, #2
 80014ba:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80014be:	4619      	mov	r1, r3
 80014c0:	f007 ffac 	bl	800941c <HAL_UART_Receive_DMA>
					MODBUS_UART_BUFFER_SIZE );


		}
		break;
 80014c4:	e094      	b.n	80015f0 <Modbus_Protocal_Worker+0x1e8>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 80014c6:	4b50      	ldr	r3, [pc, #320]	@ (8001608 <Modbus_Protocal_Worker+0x200>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	7d1b      	ldrb	r3, [r3, #20]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	f000 8091 	beq.w	80015f4 <Modbus_Protocal_Worker+0x1ec>
		{
			/*reset recived flag*/
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 80014d2:	4b4d      	ldr	r3, [pc, #308]	@ (8001608 <Modbus_Protocal_Worker+0x200>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	22fe      	movs	r2, #254	@ 0xfe
 80014d8:	759a      	strb	r2, [r3, #22]
			hModbus->modbusUartStructure.RxTail =
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 80014da:	4b4b      	ldr	r3, [pc, #300]	@ (8001608 <Modbus_Protocal_Worker+0x200>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	f8b3 105c 	ldrh.w	r1, [r3, #92]	@ 0x5c
 80014e4:	4b48      	ldr	r3, [pc, #288]	@ (8001608 <Modbus_Protocal_Worker+0x200>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	68db      	ldr	r3, [r3, #12]
 80014ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	b29a      	uxth	r2, r3
			hModbus->modbusUartStructure.RxTail =
 80014f4:	4b44      	ldr	r3, [pc, #272]	@ (8001608 <Modbus_Protocal_Worker+0x200>)
 80014f6:	681b      	ldr	r3, [r3, #0]
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 80014f8:	1a8a      	subs	r2, r1, r2
 80014fa:	b292      	uxth	r2, r2
			hModbus->modbusUartStructure.RxTail =
 80014fc:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 8001500:	4b41      	ldr	r3, [pc, #260]	@ (8001608 <Modbus_Protocal_Worker+0x200>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	2204      	movs	r2, #4
 8001506:	75da      	strb	r2, [r3, #23]
		}
		break;
 8001508:	e074      	b.n	80015f4 <Modbus_Protocal_Worker+0x1ec>
	case Modbus_state_ControlAndWaiting:

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 800150a:	4b3f      	ldr	r3, [pc, #252]	@ (8001608 <Modbus_Protocal_Worker+0x200>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f993 3016 	ldrsb.w	r3, [r3, #22]
 8001512:	f113 0f02 	cmn.w	r3, #2
 8001516:	d150      	bne.n	80015ba <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 8001518:	4b3b      	ldr	r3, [pc, #236]	@ (8001608 <Modbus_Protocal_Worker+0x200>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	2200      	movs	r2, #0
 800151e:	759a      	strb	r2, [r3, #22]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 8001520:	4b39      	ldr	r3, [pc, #228]	@ (8001608 <Modbus_Protocal_Worker+0x200>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f203 2272 	addw	r2, r3, #626	@ 0x272
 8001528:	4b37      	ldr	r3, [pc, #220]	@ (8001608 <Modbus_Protocal_Worker+0x200>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8001530:	3b02      	subs	r3, #2
 8001532:	4619      	mov	r1, r3
 8001534:	4610      	mov	r0, r2
 8001536:	f7ff ff2f 	bl	8001398 <CRC16>
 800153a:	4603      	mov	r3, r0
 800153c:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 800153e:	793a      	ldrb	r2, [r7, #4]
 8001540:	4b31      	ldr	r3, [pc, #196]	@ (8001608 <Modbus_Protocal_Worker+0x200>)
 8001542:	6819      	ldr	r1, [r3, #0]
 8001544:	4b30      	ldr	r3, [pc, #192]	@ (8001608 <Modbus_Protocal_Worker+0x200>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 800154c:	3b02      	subs	r3, #2
 800154e:	440b      	add	r3, r1
 8001550:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
 8001554:	429a      	cmp	r2, r3
 8001556:	d10c      	bne.n	8001572 <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 8001558:	797a      	ldrb	r2, [r7, #5]
 800155a:	4b2b      	ldr	r3, [pc, #172]	@ (8001608 <Modbus_Protocal_Worker+0x200>)
 800155c:	6819      	ldr	r1, [r3, #0]
 800155e:	4b2a      	ldr	r3, [pc, #168]	@ (8001608 <Modbus_Protocal_Worker+0x200>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8001566:	3b01      	subs	r3, #1
 8001568:	440b      	add	r3, r1
 800156a:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 800156e:	429a      	cmp	r2, r3
 8001570:	d004      	beq.n	800157c <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8001572:	4b25      	ldr	r3, [pc, #148]	@ (8001608 <Modbus_Protocal_Worker+0x200>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	22ff      	movs	r2, #255	@ 0xff
 8001578:	759a      	strb	r2, [r3, #22]
				break;
 800157a:	e040      	b.n	80015fe <Modbus_Protocal_Worker+0x1f6>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 800157c:	4b22      	ldr	r3, [pc, #136]	@ (8001608 <Modbus_Protocal_Worker+0x200>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f893 2272 	ldrb.w	r2, [r3, #626]	@ 0x272
 8001584:	4b20      	ldr	r3, [pc, #128]	@ (8001608 <Modbus_Protocal_Worker+0x200>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	429a      	cmp	r2, r3
 800158c:	d113      	bne.n	80015b6 <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 800158e:	4b1e      	ldr	r3, [pc, #120]	@ (8001608 <Modbus_Protocal_Worker+0x200>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f103 0018 	add.w	r0, r3, #24
					hModbus->modbusUartStructure.MessageBufferRx+1,
 8001596:	4b1c      	ldr	r3, [pc, #112]	@ (8001608 <Modbus_Protocal_Worker+0x200>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f203 2372 	addw	r3, r3, #626	@ 0x272
			memcpy(hModbus->Rxframe,
 800159e:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 80015a0:	4b19      	ldr	r3, [pc, #100]	@ (8001608 <Modbus_Protocal_Worker+0x200>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80015a8:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 80015aa:	461a      	mov	r2, r3
 80015ac:	f009 fdbe 	bl	800b12c <memcpy>

			//execute command
			Modbus_frame_response();
 80015b0:	f000 f904 	bl	80017bc <Modbus_frame_response>
 80015b4:	e001      	b.n	80015ba <Modbus_Protocal_Worker+0x1b2>
				break;
 80015b6:	bf00      	nop
					}
		break;


	}
}
 80015b8:	e021      	b.n	80015fe <Modbus_Protocal_Worker+0x1f6>
		if(hModbus->Flag_T35TimeOut)
 80015ba:	4b13      	ldr	r3, [pc, #76]	@ (8001608 <Modbus_Protocal_Worker+0x200>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	7d5b      	ldrb	r3, [r3, #21]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d019      	beq.n	80015f8 <Modbus_Protocal_Worker+0x1f0>
			hModbus->Mstatus = Modbus_state_Idle;
 80015c4:	4b10      	ldr	r3, [pc, #64]	@ (8001608 <Modbus_Protocal_Worker+0x200>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	2201      	movs	r2, #1
 80015ca:	75da      	strb	r2, [r3, #23]
		break;
 80015cc:	e014      	b.n	80015f8 <Modbus_Protocal_Worker+0x1f0>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 80015ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001608 <Modbus_Protocal_Worker+0x200>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015d8:	2b20      	cmp	r3, #32
 80015da:	d10f      	bne.n	80015fc <Modbus_Protocal_Worker+0x1f4>
			hModbus->TxCount=0;
 80015dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001608 <Modbus_Protocal_Worker+0x200>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2200      	movs	r2, #0
 80015e2:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
			hModbus->Mstatus = Modbus_state_Idle;
 80015e6:	4b08      	ldr	r3, [pc, #32]	@ (8001608 <Modbus_Protocal_Worker+0x200>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	2201      	movs	r2, #1
 80015ec:	75da      	strb	r2, [r3, #23]
		break;
 80015ee:	e005      	b.n	80015fc <Modbus_Protocal_Worker+0x1f4>
		break;
 80015f0:	bf00      	nop
 80015f2:	e004      	b.n	80015fe <Modbus_Protocal_Worker+0x1f6>
		break;
 80015f4:	bf00      	nop
 80015f6:	e002      	b.n	80015fe <Modbus_Protocal_Worker+0x1f6>
		break;
 80015f8:	bf00      	nop
 80015fa:	e000      	b.n	80015fe <Modbus_Protocal_Worker+0x1f6>
		break;
 80015fc:	bf00      	nop
}
 80015fe:	bf00      	nop
 8001600:	3708      	adds	r7, #8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	20000278 	.word	0x20000278

0800160c <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 8001612:	4b1d      	ldr	r3, [pc, #116]	@ (8001688 <modbusWrite1Register+0x7c>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	7e5b      	ldrb	r3, [r3, #25]
 8001618:	021b      	lsls	r3, r3, #8
 800161a:	b29b      	uxth	r3, r3
 800161c:	4a1a      	ldr	r2, [pc, #104]	@ (8001688 <modbusWrite1Register+0x7c>)
 800161e:	6812      	ldr	r2, [r2, #0]
 8001620:	7e92      	ldrb	r2, [r2, #26]
 8001622:	4413      	add	r3, r2
 8001624:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 8001626:	88fa      	ldrh	r2, [r7, #6]
 8001628:	4b17      	ldr	r3, [pc, #92]	@ (8001688 <modbusWrite1Register+0x7c>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	429a      	cmp	r2, r3
 8001630:	d903      	bls.n	800163a <modbusWrite1Register+0x2e>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8001632:	2002      	movs	r0, #2
 8001634:	f000 f8a0 	bl	8001778 <ModbusErrorReply>
			 return;
 8001638:	e023      	b.n	8001682 <modbusWrite1Register+0x76>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 800163a:	4b13      	ldr	r3, [pc, #76]	@ (8001688 <modbusWrite1Register+0x7c>)
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	4b12      	ldr	r3, [pc, #72]	@ (8001688 <modbusWrite1Register+0x7c>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	6859      	ldr	r1, [r3, #4]
 8001644:	88fb      	ldrh	r3, [r7, #6]
 8001646:	005b      	lsls	r3, r3, #1
 8001648:	440b      	add	r3, r1
 800164a:	7ed2      	ldrb	r2, [r2, #27]
 800164c:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 800164e:	4b0e      	ldr	r3, [pc, #56]	@ (8001688 <modbusWrite1Register+0x7c>)
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	4b0d      	ldr	r3, [pc, #52]	@ (8001688 <modbusWrite1Register+0x7c>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	6859      	ldr	r1, [r3, #4]
 8001658:	88fb      	ldrh	r3, [r7, #6]
 800165a:	005b      	lsls	r3, r3, #1
 800165c:	440b      	add	r3, r1
 800165e:	7f12      	ldrb	r2, [r2, #28]
 8001660:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 8001662:	4b09      	ldr	r3, [pc, #36]	@ (8001688 <modbusWrite1Register+0x7c>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f503 70a2 	add.w	r0, r3, #324	@ 0x144
			hModbus->Rxframe,
 800166a:	4b07      	ldr	r3, [pc, #28]	@ (8001688 <modbusWrite1Register+0x7c>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	3318      	adds	r3, #24
	memcpy(hModbus->Txframe,
 8001670:	2208      	movs	r2, #8
 8001672:	4619      	mov	r1, r3
 8001674:	f009 fd5a 	bl	800b12c <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 8001678:	4b03      	ldr	r3, [pc, #12]	@ (8001688 <modbusWrite1Register+0x7c>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	2205      	movs	r2, #5
 800167e:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270



}
 8001682:	3708      	adds	r7, #8
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	20000278 	.word	0x20000278

0800168c <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 800168c:	b590      	push	{r4, r7, lr}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 8001692:	4b38      	ldr	r3, [pc, #224]	@ (8001774 <modbusRead1Register+0xe8>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	7edb      	ldrb	r3, [r3, #27]
 8001698:	021b      	lsls	r3, r3, #8
 800169a:	b29b      	uxth	r3, r3
 800169c:	4a35      	ldr	r2, [pc, #212]	@ (8001774 <modbusRead1Register+0xe8>)
 800169e:	6812      	ldr	r2, [r2, #0]
 80016a0:	7f12      	ldrb	r2, [r2, #28]
 80016a2:	4413      	add	r3, r2
 80016a4:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 80016a6:	4b33      	ldr	r3, [pc, #204]	@ (8001774 <modbusRead1Register+0xe8>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	7e5b      	ldrb	r3, [r3, #25]
 80016ac:	021b      	lsls	r3, r3, #8
 80016ae:	b29b      	uxth	r3, r3
 80016b0:	4a30      	ldr	r2, [pc, #192]	@ (8001774 <modbusRead1Register+0xe8>)
 80016b2:	6812      	ldr	r2, [r2, #0]
 80016b4:	7e92      	ldrb	r2, [r2, #26]
 80016b6:	4413      	add	r3, r2
 80016b8:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 80016ba:	88fb      	ldrh	r3, [r7, #6]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d002      	beq.n	80016c6 <modbusRead1Register+0x3a>
 80016c0:	88fb      	ldrh	r3, [r7, #6]
 80016c2:	2b7d      	cmp	r3, #125	@ 0x7d
 80016c4:	d903      	bls.n	80016ce <modbusRead1Register+0x42>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 80016c6:	2003      	movs	r0, #3
 80016c8:	f000 f856 	bl	8001778 <ModbusErrorReply>
		 return;
 80016cc:	e04e      	b.n	800176c <modbusRead1Register+0xe0>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 80016ce:	88ba      	ldrh	r2, [r7, #4]
 80016d0:	4b28      	ldr	r3, [pc, #160]	@ (8001774 <modbusRead1Register+0xe8>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	429a      	cmp	r2, r3
 80016d8:	d808      	bhi.n	80016ec <modbusRead1Register+0x60>
 80016da:	88ba      	ldrh	r2, [r7, #4]
 80016dc:	88fb      	ldrh	r3, [r7, #6]
 80016de:	4413      	add	r3, r2
 80016e0:	461a      	mov	r2, r3
 80016e2:	4b24      	ldr	r3, [pc, #144]	@ (8001774 <modbusRead1Register+0xe8>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d903      	bls.n	80016f4 <modbusRead1Register+0x68>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 80016ec:	2002      	movs	r0, #2
 80016ee:	f000 f843 	bl	8001778 <ModbusErrorReply>
		 return;
 80016f2:	e03b      	b.n	800176c <modbusRead1Register+0xe0>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 80016f4:	4b1f      	ldr	r3, [pc, #124]	@ (8001774 <modbusRead1Register+0xe8>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	2203      	movs	r2, #3
 80016fa:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 80016fe:	88fb      	ldrh	r3, [r7, #6]
 8001700:	b2da      	uxtb	r2, r3
 8001702:	4b1c      	ldr	r3, [pc, #112]	@ (8001774 <modbusRead1Register+0xe8>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	0052      	lsls	r2, r2, #1
 8001708:	b2d2      	uxtb	r2, r2
 800170a:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 800170e:	2400      	movs	r4, #0
 8001710:	e020      	b.n	8001754 <modbusRead1Register+0xc8>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 8001712:	4b18      	ldr	r3, [pc, #96]	@ (8001774 <modbusRead1Register+0xe8>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	685a      	ldr	r2, [r3, #4]
 8001718:	88bb      	ldrh	r3, [r7, #4]
 800171a:	4423      	add	r3, r4
 800171c:	005b      	lsls	r3, r3, #1
 800171e:	18d1      	adds	r1, r2, r3
 8001720:	4b14      	ldr	r3, [pc, #80]	@ (8001774 <modbusRead1Register+0xe8>)
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	1c63      	adds	r3, r4, #1
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	7849      	ldrb	r1, [r1, #1]
 800172a:	4413      	add	r3, r2
 800172c:	460a      	mov	r2, r1
 800172e:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 8001732:	4b10      	ldr	r3, [pc, #64]	@ (8001774 <modbusRead1Register+0xe8>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	685a      	ldr	r2, [r3, #4]
 8001738:	88bb      	ldrh	r3, [r7, #4]
 800173a:	4423      	add	r3, r4
 800173c:	005b      	lsls	r3, r3, #1
 800173e:	18d1      	adds	r1, r2, r3
 8001740:	4b0c      	ldr	r3, [pc, #48]	@ (8001774 <modbusRead1Register+0xe8>)
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	0063      	lsls	r3, r4, #1
 8001746:	3303      	adds	r3, #3
 8001748:	7809      	ldrb	r1, [r1, #0]
 800174a:	4413      	add	r3, r2
 800174c:	460a      	mov	r2, r1
 800174e:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	for(i=0; i<numberOfDataToRead;i++)
 8001752:	3401      	adds	r4, #1
 8001754:	88fb      	ldrh	r3, [r7, #6]
 8001756:	429c      	cmp	r4, r3
 8001758:	dbdb      	blt.n	8001712 <modbusRead1Register+0x86>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 800175a:	88fb      	ldrh	r3, [r7, #6]
 800175c:	3301      	adds	r3, #1
 800175e:	b2da      	uxtb	r2, r3
 8001760:	4b04      	ldr	r3, [pc, #16]	@ (8001774 <modbusRead1Register+0xe8>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	0052      	lsls	r2, r2, #1
 8001766:	b2d2      	uxtb	r2, r2
 8001768:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270

}
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	bd90      	pop	{r4, r7, pc}
 8001772:	bf00      	nop
 8001774:	20000278 	.word	0x20000278

08001778 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	4603      	mov	r3, r0
 8001780:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 8001782:	4b0d      	ldr	r3, [pc, #52]	@ (80017b8 <ModbusErrorReply+0x40>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	7e1a      	ldrb	r2, [r3, #24]
 8001788:	4b0b      	ldr	r3, [pc, #44]	@ (80017b8 <ModbusErrorReply+0x40>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001790:	b2d2      	uxtb	r2, r2
 8001792:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = Errorcode;
 8001796:	4b08      	ldr	r3, [pc, #32]	@ (80017b8 <ModbusErrorReply+0x40>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	79fa      	ldrb	r2, [r7, #7]
 800179c:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->TxCount = 2;
 80017a0:	4b05      	ldr	r3, [pc, #20]	@ (80017b8 <ModbusErrorReply+0x40>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	2202      	movs	r2, #2
 80017a6:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
}
 80017aa:	bf00      	nop
 80017ac:	370c      	adds	r7, #12
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	20000278 	.word	0x20000278

080017bc <Modbus_frame_response>:

void Modbus_frame_response()
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 80017c0:	4b09      	ldr	r3, [pc, #36]	@ (80017e8 <Modbus_frame_response+0x2c>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	7e1b      	ldrb	r3, [r3, #24]
 80017c6:	2b03      	cmp	r3, #3
 80017c8:	d004      	beq.n	80017d4 <Modbus_frame_response+0x18>
 80017ca:	2b06      	cmp	r3, #6
 80017cc:	d105      	bne.n	80017da <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 80017ce:	f7ff ff1d 	bl	800160c <modbusWrite1Register>
		break;
 80017d2:	e006      	b.n	80017e2 <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 80017d4:	f7ff ff5a 	bl	800168c <modbusRead1Register>
		break;
 80017d8:	e003      	b.n	80017e2 <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 80017da:	2001      	movs	r0, #1
 80017dc:	f7ff ffcc 	bl	8001778 <ModbusErrorReply>
		break;
 80017e0:	bf00      	nop

	}
}
 80017e2:	bf00      	nop
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	20000278 	.word	0x20000278

080017ec <Modbus_Emission>:

void Modbus_Emission()
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 80017f2:	4b38      	ldr	r3, [pc, #224]	@ (80018d4 <Modbus_Emission+0xe8>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017fc:	2b20      	cmp	r3, #32
 80017fe:	d15d      	bne.n	80018bc <Modbus_Emission+0xd0>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 8001800:	4b34      	ldr	r3, [pc, #208]	@ (80018d4 <Modbus_Emission+0xe8>)
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	4b33      	ldr	r3, [pc, #204]	@ (80018d4 <Modbus_Emission+0xe8>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	7812      	ldrb	r2, [r2, #0]
 800180a:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 800180e:	4b31      	ldr	r3, [pc, #196]	@ (80018d4 <Modbus_Emission+0xe8>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
		memcpy
 8001816:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 8001818:	4b2e      	ldr	r3, [pc, #184]	@ (80018d4 <Modbus_Emission+0xe8>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f503 71a2 	add.w	r1, r3, #324	@ 0x144
				hModbus->TxCount
 8001820:	4b2c      	ldr	r3, [pc, #176]	@ (80018d4 <Modbus_Emission+0xe8>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
		memcpy
 8001828:	461a      	mov	r2, r3
 800182a:	f009 fc7f 	bl	800b12c <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 800182e:	4b29      	ldr	r3, [pc, #164]	@ (80018d4 <Modbus_Emission+0xe8>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 8001836:	461a      	mov	r2, r3
 8001838:	4b26      	ldr	r3, [pc, #152]	@ (80018d4 <Modbus_Emission+0xe8>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	3203      	adds	r2, #3
 800183e:	b292      	uxth	r2, r2
 8001840:	f8a3 24d4 	strh.w	r2, [r3, #1236]	@ 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8001844:	4b23      	ldr	r3, [pc, #140]	@ (80018d4 <Modbus_Emission+0xe8>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 800184c:	4b21      	ldr	r3, [pc, #132]	@ (80018d4 <Modbus_Emission+0xe8>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8001854:	3b02      	subs	r3, #2
 8001856:	4619      	mov	r1, r3
 8001858:	4610      	mov	r0, r2
 800185a:	f7ff fd9d 	bl	8001398 <CRC16>
 800185e:	4603      	mov	r3, r0
 8001860:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 8001862:	4b1c      	ldr	r3, [pc, #112]	@ (80018d4 <Modbus_Emission+0xe8>)
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	4b1b      	ldr	r3, [pc, #108]	@ (80018d4 <Modbus_Emission+0xe8>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 800186e:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 8001870:	7939      	ldrb	r1, [r7, #4]
 8001872:	4413      	add	r3, r2
 8001874:	460a      	mov	r2, r1
 8001876:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 800187a:	4b16      	ldr	r3, [pc, #88]	@ (80018d4 <Modbus_Emission+0xe8>)
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	4b15      	ldr	r3, [pc, #84]	@ (80018d4 <Modbus_Emission+0xe8>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8001886:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 8001888:	7979      	ldrb	r1, [r7, #5]
 800188a:	4413      	add	r3, r2
 800188c:	460a      	mov	r2, r1
 800188e:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001892:	4b10      	ldr	r3, [pc, #64]	@ (80018d4 <Modbus_Emission+0xe8>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800189c:	2b20      	cmp	r3, #32
 800189e:	d10d      	bne.n	80018bc <Modbus_Emission+0xd0>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 80018a0:	4b0c      	ldr	r3, [pc, #48]	@ (80018d4 <Modbus_Emission+0xe8>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 80018a6:	4b0b      	ldr	r3, [pc, #44]	@ (80018d4 <Modbus_Emission+0xe8>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f503 7169 	add.w	r1, r3, #932	@ 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 80018ae:	4b09      	ldr	r3, [pc, #36]	@ (80018d4 <Modbus_Emission+0xe8>)
 80018b0:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 80018b2:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 80018b6:	461a      	mov	r2, r3
 80018b8:	f007 fd30 	bl	800931c <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 80018bc:	4b05      	ldr	r3, [pc, #20]	@ (80018d4 <Modbus_Emission+0xe8>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	2200      	movs	r2, #0
 80018c2:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 80018c4:	4b03      	ldr	r3, [pc, #12]	@ (80018d4 <Modbus_Emission+0xe8>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2200      	movs	r2, #0
 80018ca:	755a      	strb	r2, [r3, #21]

}
 80018cc:	bf00      	nop
 80018ce:	3708      	adds	r7, #8
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	20000278 	.word	0x20000278

080018d8 <PWM_init>:
 *      Author: beamk
 */

#include "PWM.h"

void PWM_init(PWM* pwm, TIM_HandleTypeDef* htimx, uint16_t tim_chx){
 80018d8:	b580      	push	{r7, lr}
 80018da:	b084      	sub	sp, #16
 80018dc:	af00      	add	r7, sp, #0
 80018de:	60f8      	str	r0, [r7, #12]
 80018e0:	60b9      	str	r1, [r7, #8]
 80018e2:	4613      	mov	r3, r2
 80018e4:	80fb      	strh	r3, [r7, #6]
	pwm->CPU_FREQ = 170e6;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	4a0b      	ldr	r2, [pc, #44]	@ (8001918 <PWM_init+0x40>)
 80018ea:	611a      	str	r2, [r3, #16]
	pwm->htimx = htimx;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	68ba      	ldr	r2, [r7, #8]
 80018f0:	601a      	str	r2, [r3, #0]
	pwm->tim_chx = tim_chx;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	88fa      	ldrh	r2, [r7, #6]
 80018f6:	809a      	strh	r2, [r3, #4]
	pwm->OC = 0;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	2200      	movs	r2, #0
 80018fc:	615a      	str	r2, [r3, #20]
	HAL_TIM_Base_Start(htimx);
 80018fe:	68b8      	ldr	r0, [r7, #8]
 8001900:	f005 fa7c 	bl	8006dfc <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(htimx, tim_chx);
 8001904:	88fb      	ldrh	r3, [r7, #6]
 8001906:	4619      	mov	r1, r3
 8001908:	68b8      	ldr	r0, [r7, #8]
 800190a:	f005 fc3b 	bl	8007184 <HAL_TIM_PWM_Start>
}
 800190e:	bf00      	nop
 8001910:	3710      	adds	r7, #16
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	0a21fe80 	.word	0x0a21fe80
 800191c:	00000000 	.word	0x00000000

08001920 <PWM_write_range>:
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}

void PWM_write_range(PWM* pwm, float freq, float duty){
 8001920:	b5b0      	push	{r4, r5, r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	60f8      	str	r0, [r7, #12]
 8001928:	ed87 0a02 	vstr	s0, [r7, #8]
 800192c:	edc7 0a01 	vstr	s1, [r7, #4]
    if (freq == 0) {
 8001930:	edd7 7a02 	vldr	s15, [r7, #8]
 8001934:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800193c:	d137      	bne.n	80019ae <PWM_write_range+0x8e>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	889b      	ldrh	r3, [r3, #4]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d105      	bne.n	8001952 <PWM_write_range+0x32>
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2200      	movs	r2, #0
 800194e:	635a      	str	r2, [r3, #52]	@ 0x34
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(duty) / 65535.0);
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}
 8001950:	e0e1      	b.n	8001b16 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	889b      	ldrh	r3, [r3, #4]
 8001956:	2b04      	cmp	r3, #4
 8001958:	d105      	bne.n	8001966 <PWM_write_range+0x46>
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	2300      	movs	r3, #0
 8001962:	6393      	str	r3, [r2, #56]	@ 0x38
 8001964:	e0d7      	b.n	8001b16 <PWM_write_range+0x1f6>
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	889b      	ldrh	r3, [r3, #4]
 800196a:	2b08      	cmp	r3, #8
 800196c:	d105      	bne.n	800197a <PWM_write_range+0x5a>
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	2300      	movs	r3, #0
 8001976:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001978:	e0cd      	b.n	8001b16 <PWM_write_range+0x1f6>
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	889b      	ldrh	r3, [r3, #4]
 800197e:	2b0c      	cmp	r3, #12
 8001980:	d105      	bne.n	800198e <PWM_write_range+0x6e>
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	2300      	movs	r3, #0
 800198a:	6413      	str	r3, [r2, #64]	@ 0x40
 800198c:	e0c3      	b.n	8001b16 <PWM_write_range+0x1f6>
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	889b      	ldrh	r3, [r3, #4]
 8001992:	2b10      	cmp	r3, #16
 8001994:	d105      	bne.n	80019a2 <PWM_write_range+0x82>
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	2300      	movs	r3, #0
 800199e:	6493      	str	r3, [r2, #72]	@ 0x48
 80019a0:	e0b9      	b.n	8001b16 <PWM_write_range+0x1f6>
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	2300      	movs	r3, #0
 80019aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80019ac:	e0b3      	b.n	8001b16 <PWM_write_range+0x1f6>
    	pwm->period_cyc = (uint32_t) (pwm->CPU_FREQ / freq);
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	691b      	ldr	r3, [r3, #16]
 80019b2:	ee07 3a90 	vmov	s15, r3
 80019b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80019ba:	ed97 7a02 	vldr	s14, [r7, #8]
 80019be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019c6:	ee17 2a90 	vmov	r2, s15
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	609a      	str	r2, [r3, #8]
    	pwm->prescaler = (uint16_t) ((pwm->period_cyc + 65535 - 1) / 65535) - 1; // Subtracting 1 since prescaler is zero-based
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 80019d6:	33fe      	adds	r3, #254	@ 0xfe
 80019d8:	4a53      	ldr	r2, [pc, #332]	@ (8001b28 <PWM_write_range+0x208>)
 80019da:	fba2 2303 	umull	r2, r3, r2, r3
 80019de:	0bdb      	lsrs	r3, r3, #15
 80019e0:	b29b      	uxth	r3, r3
 80019e2:	3b01      	subs	r3, #1
 80019e4:	b29a      	uxth	r2, r3
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	819a      	strh	r2, [r3, #12]
    	pwm->overflow = (uint16_t) ((pwm->CPU_FREQ / (float)(pwm->prescaler + 1) / freq) - 1);
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	691b      	ldr	r3, [r3, #16]
 80019ee:	ee07 3a90 	vmov	s15, r3
 80019f2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	899b      	ldrh	r3, [r3, #12]
 80019fa:	3301      	adds	r3, #1
 80019fc:	ee07 3a90 	vmov	s15, r3
 8001a00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a04:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001a08:	ed97 7a02 	vldr	s14, [r7, #8]
 8001a0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a10:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001a14:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001a18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a1c:	ee17 3a90 	vmov	r3, s15
 8001a20:	b29a      	uxth	r2, r3
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	81da      	strh	r2, [r3, #14]
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(duty) / 65535.0);
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	89db      	ldrh	r3, [r3, #14]
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f7fe fd46 	bl	80004bc <__aeabi_i2d>
 8001a30:	4604      	mov	r4, r0
 8001a32:	460d      	mov	r5, r1
 8001a34:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a38:	eef0 7ae7 	vabs.f32	s15, s15
 8001a3c:	ee17 0a90 	vmov	r0, s15
 8001a40:	f7fe fd4e 	bl	80004e0 <__aeabi_f2d>
 8001a44:	4602      	mov	r2, r0
 8001a46:	460b      	mov	r3, r1
 8001a48:	4620      	mov	r0, r4
 8001a4a:	4629      	mov	r1, r5
 8001a4c:	f7fe fda0 	bl	8000590 <__aeabi_dmul>
 8001a50:	4602      	mov	r2, r0
 8001a52:	460b      	mov	r3, r1
 8001a54:	4610      	mov	r0, r2
 8001a56:	4619      	mov	r1, r3
 8001a58:	a331      	add	r3, pc, #196	@ (adr r3, 8001b20 <PWM_write_range+0x200>)
 8001a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a5e:	f7fe fec1 	bl	80007e4 <__aeabi_ddiv>
 8001a62:	4602      	mov	r2, r0
 8001a64:	460b      	mov	r3, r1
 8001a66:	4610      	mov	r0, r2
 8001a68:	4619      	mov	r1, r3
 8001a6a:	f7fe ffa3 	bl	80009b4 <__aeabi_d2uiz>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	b29b      	uxth	r3, r3
 8001a72:	461a      	mov	r2, r3
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	615a      	str	r2, [r3, #20]
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	899a      	ldrh	r2, [r3, #12]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	629a      	str	r2, [r3, #40]	@ 0x28
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	89da      	ldrh	r2, [r3, #14]
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	89da      	ldrh	r2, [r3, #14]
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	60da      	str	r2, [r3, #12]
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	889b      	ldrh	r3, [r3, #4]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d106      	bne.n	8001ab0 <PWM_write_range+0x190>
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	68fa      	ldr	r2, [r7, #12]
 8001aaa:	6952      	ldr	r2, [r2, #20]
 8001aac:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001aae:	e032      	b.n	8001b16 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	889b      	ldrh	r3, [r3, #4]
 8001ab4:	2b04      	cmp	r3, #4
 8001ab6:	d106      	bne.n	8001ac6 <PWM_write_range+0x1a6>
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	695b      	ldr	r3, [r3, #20]
 8001ac2:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001ac4:	e027      	b.n	8001b16 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	889b      	ldrh	r3, [r3, #4]
 8001aca:	2b08      	cmp	r3, #8
 8001acc:	d106      	bne.n	8001adc <PWM_write_range+0x1bc>
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	695b      	ldr	r3, [r3, #20]
 8001ad8:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8001ada:	e01c      	b.n	8001b16 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	889b      	ldrh	r3, [r3, #4]
 8001ae0:	2b0c      	cmp	r3, #12
 8001ae2:	d106      	bne.n	8001af2 <PWM_write_range+0x1d2>
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	695b      	ldr	r3, [r3, #20]
 8001aee:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001af0:	e011      	b.n	8001b16 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	889b      	ldrh	r3, [r3, #4]
 8001af6:	2b10      	cmp	r3, #16
 8001af8:	d106      	bne.n	8001b08 <PWM_write_range+0x1e8>
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	695b      	ldr	r3, [r3, #20]
 8001b04:	6493      	str	r3, [r2, #72]	@ 0x48
}
 8001b06:	e006      	b.n	8001b16 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	695b      	ldr	r3, [r3, #20]
 8001b12:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8001b14:	e7ff      	b.n	8001b16 <PWM_write_range+0x1f6>
 8001b16:	bf00      	nop
 8001b18:	3710      	adds	r7, #16
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bdb0      	pop	{r4, r5, r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	00000000 	.word	0x00000000
 8001b24:	40efffe0 	.word	0x40efffe0
 8001b28:	80008001 	.word	0x80008001

08001b2c <QEI_init>:
* Created on: Mar 30, 2024
* Author: beamk
*/
#include "QEI.h"

void QEI_init(QEI *qei, TIM_HandleTypeDef *htimx, int32_t ppr, uint32_t freq, float ratio) {
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b086      	sub	sp, #24
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6178      	str	r0, [r7, #20]
 8001b34:	6139      	str	r1, [r7, #16]
 8001b36:	60fa      	str	r2, [r7, #12]
 8001b38:	60bb      	str	r3, [r7, #8]
 8001b3a:	ed87 0a01 	vstr	s0, [r7, #4]
    qei->htimx = htimx;
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	693a      	ldr	r2, [r7, #16]
 8001b42:	611a      	str	r2, [r3, #16]
    qei->ppr = ppr;
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	68fa      	ldr	r2, [r7, #12]
 8001b48:	619a      	str	r2, [r3, #24]
    qei->freq = freq;
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	68ba      	ldr	r2, [r7, #8]
 8001b4e:	621a      	str	r2, [r3, #32]
    qei->c[NOW] = 0;
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	2200      	movs	r2, #0
 8001b54:	601a      	str	r2, [r3, #0]
    qei->c[PREV] = 0;
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	605a      	str	r2, [r3, #4]
    qei->pps = 0;
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	f04f 0200 	mov.w	r2, #0
 8001b62:	625a      	str	r2, [r3, #36]	@ 0x24
    qei->rpm = 0;
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	f04f 0200 	mov.w	r2, #0
 8001b6a:	629a      	str	r2, [r3, #40]	@ 0x28
    qei->radps = 0;
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	f04f 0200 	mov.w	r2, #0
 8001b72:	62da      	str	r2, [r3, #44]	@ 0x2c
    qei->enc_period = 65536 - (65536 % ppr);
 8001b74:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001b78:	68fa      	ldr	r2, [r7, #12]
 8001b7a:	fb93 f2f2 	sdiv	r2, r3, r2
 8001b7e:	68f9      	ldr	r1, [r7, #12]
 8001b80:	fb01 f202 	mul.w	r2, r1, r2
 8001b84:	1a9b      	subs	r3, r3, r2
 8001b86:	f5c3 3280 	rsb	r2, r3, #65536	@ 0x10000
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	615a      	str	r2, [r3, #20]
    qei->pulses = 0;
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	2200      	movs	r2, #0
 8001b92:	631a      	str	r2, [r3, #48]	@ 0x30
    //qei->pulsesf = 0;
    qei->revs = 0;
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	f04f 0200 	mov.w	r2, #0
 8001b9a:	635a      	str	r2, [r3, #52]	@ 0x34
    qei->rads = 0;
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	f04f 0200 	mov.w	r2, #0
 8001ba2:	639a      	str	r2, [r3, #56]	@ 0x38
    qei->mm = 0;
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	f04f 0200 	mov.w	r2, #0
 8001baa:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->mmps = 0;
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	f04f 0200 	mov.w	r2, #0
 8001bb2:	645a      	str	r2, [r3, #68]	@ 0x44

    qei->ratio = ratio;  // Gear ratio or scaling factor
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	687a      	ldr	r2, [r7, #4]
 8001bb8:	649a      	str	r2, [r3, #72]	@ 0x48
    HAL_TIM_Encoder_Start(htimx, TIM_CHANNEL_ALL);
 8001bba:	213c      	movs	r1, #60	@ 0x3c
 8001bbc:	6938      	ldr	r0, [r7, #16]
 8001bbe:	f005 fd9d 	bl	80076fc <HAL_TIM_Encoder_Start>
}
 8001bc2:	bf00      	nop
 8001bc4:	3718      	adds	r7, #24
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
	...

08001bcc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b08c      	sub	sp, #48	@ 0x30
 8001bd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001bd2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	601a      	str	r2, [r3, #0]
 8001bda:	605a      	str	r2, [r3, #4]
 8001bdc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001bde:	1d3b      	adds	r3, r7, #4
 8001be0:	2220      	movs	r2, #32
 8001be2:	2100      	movs	r1, #0
 8001be4:	4618      	mov	r0, r3
 8001be6:	f009 fa5d 	bl	800b0a4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001bea:	4b47      	ldr	r3, [pc, #284]	@ (8001d08 <MX_ADC1_Init+0x13c>)
 8001bec:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001bf0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001bf2:	4b45      	ldr	r3, [pc, #276]	@ (8001d08 <MX_ADC1_Init+0x13c>)
 8001bf4:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001bf8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001bfa:	4b43      	ldr	r3, [pc, #268]	@ (8001d08 <MX_ADC1_Init+0x13c>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c00:	4b41      	ldr	r3, [pc, #260]	@ (8001d08 <MX_ADC1_Init+0x13c>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001c06:	4b40      	ldr	r3, [pc, #256]	@ (8001d08 <MX_ADC1_Init+0x13c>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001c0c:	4b3e      	ldr	r3, [pc, #248]	@ (8001d08 <MX_ADC1_Init+0x13c>)
 8001c0e:	2201      	movs	r2, #1
 8001c10:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001c12:	4b3d      	ldr	r3, [pc, #244]	@ (8001d08 <MX_ADC1_Init+0x13c>)
 8001c14:	2204      	movs	r2, #4
 8001c16:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001c18:	4b3b      	ldr	r3, [pc, #236]	@ (8001d08 <MX_ADC1_Init+0x13c>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001c1e:	4b3a      	ldr	r3, [pc, #232]	@ (8001d08 <MX_ADC1_Init+0x13c>)
 8001c20:	2201      	movs	r2, #1
 8001c22:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 4;
 8001c24:	4b38      	ldr	r3, [pc, #224]	@ (8001d08 <MX_ADC1_Init+0x13c>)
 8001c26:	2204      	movs	r2, #4
 8001c28:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001c2a:	4b37      	ldr	r3, [pc, #220]	@ (8001d08 <MX_ADC1_Init+0x13c>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c32:	4b35      	ldr	r3, [pc, #212]	@ (8001d08 <MX_ADC1_Init+0x13c>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001c38:	4b33      	ldr	r3, [pc, #204]	@ (8001d08 <MX_ADC1_Init+0x13c>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001c3e:	4b32      	ldr	r3, [pc, #200]	@ (8001d08 <MX_ADC1_Init+0x13c>)
 8001c40:	2201      	movs	r2, #1
 8001c42:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001c46:	4b30      	ldr	r3, [pc, #192]	@ (8001d08 <MX_ADC1_Init+0x13c>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001c4c:	4b2e      	ldr	r3, [pc, #184]	@ (8001d08 <MX_ADC1_Init+0x13c>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c54:	482c      	ldr	r0, [pc, #176]	@ (8001d08 <MX_ADC1_Init+0x13c>)
 8001c56:	f001 ffef 	bl	8003c38 <HAL_ADC_Init>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001c60:	f000 fd0e 	bl	8002680 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001c64:	2300      	movs	r3, #0
 8001c66:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001c68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	4826      	ldr	r0, [pc, #152]	@ (8001d08 <MX_ADC1_Init+0x13c>)
 8001c70:	f003 f90e 	bl	8004e90 <HAL_ADCEx_MultiModeConfigChannel>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001c7a:	f000 fd01 	bl	8002680 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001c7e:	4b23      	ldr	r3, [pc, #140]	@ (8001d0c <MX_ADC1_Init+0x140>)
 8001c80:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001c82:	2306      	movs	r3, #6
 8001c84:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001c86:	2307      	movs	r3, #7
 8001c88:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001c8a:	237f      	movs	r3, #127	@ 0x7f
 8001c8c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001c8e:	2304      	movs	r3, #4
 8001c90:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001c92:	2300      	movs	r3, #0
 8001c94:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c96:	1d3b      	adds	r3, r7, #4
 8001c98:	4619      	mov	r1, r3
 8001c9a:	481b      	ldr	r0, [pc, #108]	@ (8001d08 <MX_ADC1_Init+0x13c>)
 8001c9c:	f002 fa7a 	bl	8004194 <HAL_ADC_ConfigChannel>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001ca6:	f000 fceb 	bl	8002680 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001caa:	4b19      	ldr	r3, [pc, #100]	@ (8001d10 <MX_ADC1_Init+0x144>)
 8001cac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001cae:	230c      	movs	r3, #12
 8001cb0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001cb2:	1d3b      	adds	r3, r7, #4
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	4814      	ldr	r0, [pc, #80]	@ (8001d08 <MX_ADC1_Init+0x13c>)
 8001cb8:	f002 fa6c 	bl	8004194 <HAL_ADC_ConfigChannel>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8001cc2:	f000 fcdd 	bl	8002680 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001cc6:	4b13      	ldr	r3, [pc, #76]	@ (8001d14 <MX_ADC1_Init+0x148>)
 8001cc8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001cca:	2312      	movs	r3, #18
 8001ccc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001cce:	1d3b      	adds	r3, r7, #4
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	480d      	ldr	r0, [pc, #52]	@ (8001d08 <MX_ADC1_Init+0x13c>)
 8001cd4:	f002 fa5e 	bl	8004194 <HAL_ADC_ConfigChannel>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8001cde:	f000 fccf 	bl	8002680 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001ce2:	4b0d      	ldr	r3, [pc, #52]	@ (8001d18 <MX_ADC1_Init+0x14c>)
 8001ce4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001ce6:	2318      	movs	r3, #24
 8001ce8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001cea:	1d3b      	adds	r3, r7, #4
 8001cec:	4619      	mov	r1, r3
 8001cee:	4806      	ldr	r0, [pc, #24]	@ (8001d08 <MX_ADC1_Init+0x13c>)
 8001cf0:	f002 fa50 	bl	8004194 <HAL_ADC_ConfigChannel>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 8001cfa:	f000 fcc1 	bl	8002680 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001cfe:	bf00      	nop
 8001d00:	3730      	adds	r7, #48	@ 0x30
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	2000027c 	.word	0x2000027c
 8001d0c:	19200040 	.word	0x19200040
 8001d10:	1d500080 	.word	0x1d500080
 8001d14:	21800100 	.word	0x21800100
 8001d18:	3ef08000 	.word	0x3ef08000

08001d1c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b0a0      	sub	sp, #128	@ 0x80
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d24:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001d28:	2200      	movs	r2, #0
 8001d2a:	601a      	str	r2, [r3, #0]
 8001d2c:	605a      	str	r2, [r3, #4]
 8001d2e:	609a      	str	r2, [r3, #8]
 8001d30:	60da      	str	r2, [r3, #12]
 8001d32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d34:	f107 0318 	add.w	r3, r7, #24
 8001d38:	2254      	movs	r2, #84	@ 0x54
 8001d3a:	2100      	movs	r1, #0
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f009 f9b1 	bl	800b0a4 <memset>
  if(adcHandle->Instance==ADC1)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001d4a:	d176      	bne.n	8001e3a <HAL_ADC_MspInit+0x11e>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001d4c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001d50:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001d52:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001d56:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d58:	f107 0318 	add.w	r3, r7, #24
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f004 fd9b 	bl	8006898 <HAL_RCCEx_PeriphCLKConfig>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001d68:	f000 fc8a 	bl	8002680 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001d6c:	4b35      	ldr	r3, [pc, #212]	@ (8001e44 <HAL_ADC_MspInit+0x128>)
 8001d6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d70:	4a34      	ldr	r2, [pc, #208]	@ (8001e44 <HAL_ADC_MspInit+0x128>)
 8001d72:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001d76:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d78:	4b32      	ldr	r3, [pc, #200]	@ (8001e44 <HAL_ADC_MspInit+0x128>)
 8001d7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d7c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001d80:	617b      	str	r3, [r7, #20]
 8001d82:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d84:	4b2f      	ldr	r3, [pc, #188]	@ (8001e44 <HAL_ADC_MspInit+0x128>)
 8001d86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d88:	4a2e      	ldr	r2, [pc, #184]	@ (8001e44 <HAL_ADC_MspInit+0x128>)
 8001d8a:	f043 0304 	orr.w	r3, r3, #4
 8001d8e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d90:	4b2c      	ldr	r3, [pc, #176]	@ (8001e44 <HAL_ADC_MspInit+0x128>)
 8001d92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d94:	f003 0304 	and.w	r3, r3, #4
 8001d98:	613b      	str	r3, [r7, #16]
 8001d9a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d9c:	4b29      	ldr	r3, [pc, #164]	@ (8001e44 <HAL_ADC_MspInit+0x128>)
 8001d9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001da0:	4a28      	ldr	r2, [pc, #160]	@ (8001e44 <HAL_ADC_MspInit+0x128>)
 8001da2:	f043 0302 	orr.w	r3, r3, #2
 8001da6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001da8:	4b26      	ldr	r3, [pc, #152]	@ (8001e44 <HAL_ADC_MspInit+0x128>)
 8001daa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dac:	f003 0302 	and.w	r3, r3, #2
 8001db0:	60fb      	str	r3, [r7, #12]
 8001db2:	68fb      	ldr	r3, [r7, #12]
    PC0     ------> ADC1_IN6
    PC1     ------> ADC1_IN7
    PC2     ------> ADC1_IN8
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001db4:	2307      	movs	r3, #7
 8001db6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001db8:	2303      	movs	r3, #3
 8001dba:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dc0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	4820      	ldr	r0, [pc, #128]	@ (8001e48 <HAL_ADC_MspInit+0x12c>)
 8001dc8:	f003 fdac 	bl	8005924 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dd8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001ddc:	4619      	mov	r1, r3
 8001dde:	481b      	ldr	r0, [pc, #108]	@ (8001e4c <HAL_ADC_MspInit+0x130>)
 8001de0:	f003 fda0 	bl	8005924 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001de4:	4b1a      	ldr	r3, [pc, #104]	@ (8001e50 <HAL_ADC_MspInit+0x134>)
 8001de6:	4a1b      	ldr	r2, [pc, #108]	@ (8001e54 <HAL_ADC_MspInit+0x138>)
 8001de8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001dea:	4b19      	ldr	r3, [pc, #100]	@ (8001e50 <HAL_ADC_MspInit+0x134>)
 8001dec:	2205      	movs	r2, #5
 8001dee:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001df0:	4b17      	ldr	r3, [pc, #92]	@ (8001e50 <HAL_ADC_MspInit+0x134>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001df6:	4b16      	ldr	r3, [pc, #88]	@ (8001e50 <HAL_ADC_MspInit+0x134>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001dfc:	4b14      	ldr	r3, [pc, #80]	@ (8001e50 <HAL_ADC_MspInit+0x134>)
 8001dfe:	2280      	movs	r2, #128	@ 0x80
 8001e00:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001e02:	4b13      	ldr	r3, [pc, #76]	@ (8001e50 <HAL_ADC_MspInit+0x134>)
 8001e04:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e08:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001e0a:	4b11      	ldr	r3, [pc, #68]	@ (8001e50 <HAL_ADC_MspInit+0x134>)
 8001e0c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e10:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001e12:	4b0f      	ldr	r3, [pc, #60]	@ (8001e50 <HAL_ADC_MspInit+0x134>)
 8001e14:	2220      	movs	r2, #32
 8001e16:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001e18:	4b0d      	ldr	r3, [pc, #52]	@ (8001e50 <HAL_ADC_MspInit+0x134>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001e1e:	480c      	ldr	r0, [pc, #48]	@ (8001e50 <HAL_ADC_MspInit+0x134>)
 8001e20:	f003 fa4e 	bl	80052c0 <HAL_DMA_Init>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <HAL_ADC_MspInit+0x112>
    {
      Error_Handler();
 8001e2a:	f000 fc29 	bl	8002680 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4a07      	ldr	r2, [pc, #28]	@ (8001e50 <HAL_ADC_MspInit+0x134>)
 8001e32:	655a      	str	r2, [r3, #84]	@ 0x54
 8001e34:	4a06      	ldr	r2, [pc, #24]	@ (8001e50 <HAL_ADC_MspInit+0x134>)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001e3a:	bf00      	nop
 8001e3c:	3780      	adds	r7, #128	@ 0x80
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	40021000 	.word	0x40021000
 8001e48:	48000800 	.word	0x48000800
 8001e4c:	48000400 	.word	0x48000400
 8001e50:	200002e8 	.word	0x200002e8
 8001e54:	40020008 	.word	0x40020008

08001e58 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001e5e:	4b1a      	ldr	r3, [pc, #104]	@ (8001ec8 <MX_DMA_Init+0x70>)
 8001e60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e62:	4a19      	ldr	r2, [pc, #100]	@ (8001ec8 <MX_DMA_Init+0x70>)
 8001e64:	f043 0304 	orr.w	r3, r3, #4
 8001e68:	6493      	str	r3, [r2, #72]	@ 0x48
 8001e6a:	4b17      	ldr	r3, [pc, #92]	@ (8001ec8 <MX_DMA_Init+0x70>)
 8001e6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e6e:	f003 0304 	and.w	r3, r3, #4
 8001e72:	607b      	str	r3, [r7, #4]
 8001e74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e76:	4b14      	ldr	r3, [pc, #80]	@ (8001ec8 <MX_DMA_Init+0x70>)
 8001e78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e7a:	4a13      	ldr	r2, [pc, #76]	@ (8001ec8 <MX_DMA_Init+0x70>)
 8001e7c:	f043 0301 	orr.w	r3, r3, #1
 8001e80:	6493      	str	r3, [r2, #72]	@ 0x48
 8001e82:	4b11      	ldr	r3, [pc, #68]	@ (8001ec8 <MX_DMA_Init+0x70>)
 8001e84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e86:	f003 0301 	and.w	r3, r3, #1
 8001e8a:	603b      	str	r3, [r7, #0]
 8001e8c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001e8e:	2200      	movs	r2, #0
 8001e90:	2100      	movs	r1, #0
 8001e92:	200b      	movs	r0, #11
 8001e94:	f003 f9df 	bl	8005256 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001e98:	200b      	movs	r0, #11
 8001e9a:	f003 f9f6 	bl	800528a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	2100      	movs	r1, #0
 8001ea2:	200c      	movs	r0, #12
 8001ea4:	f003 f9d7 	bl	8005256 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001ea8:	200c      	movs	r0, #12
 8001eaa:	f003 f9ee 	bl	800528a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001eae:	2200      	movs	r2, #0
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	200d      	movs	r0, #13
 8001eb4:	f003 f9cf 	bl	8005256 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001eb8:	200d      	movs	r0, #13
 8001eba:	f003 f9e6 	bl	800528a <HAL_NVIC_EnableIRQ>

}
 8001ebe:	bf00      	nop
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	40021000 	.word	0x40021000

08001ecc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b08a      	sub	sp, #40	@ 0x28
 8001ed0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed2:	f107 0314 	add.w	r3, r7, #20
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	601a      	str	r2, [r3, #0]
 8001eda:	605a      	str	r2, [r3, #4]
 8001edc:	609a      	str	r2, [r3, #8]
 8001ede:	60da      	str	r2, [r3, #12]
 8001ee0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ee2:	4b4f      	ldr	r3, [pc, #316]	@ (8002020 <MX_GPIO_Init+0x154>)
 8001ee4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ee6:	4a4e      	ldr	r2, [pc, #312]	@ (8002020 <MX_GPIO_Init+0x154>)
 8001ee8:	f043 0304 	orr.w	r3, r3, #4
 8001eec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001eee:	4b4c      	ldr	r3, [pc, #304]	@ (8002020 <MX_GPIO_Init+0x154>)
 8001ef0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ef2:	f003 0304 	and.w	r3, r3, #4
 8001ef6:	613b      	str	r3, [r7, #16]
 8001ef8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001efa:	4b49      	ldr	r3, [pc, #292]	@ (8002020 <MX_GPIO_Init+0x154>)
 8001efc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001efe:	4a48      	ldr	r2, [pc, #288]	@ (8002020 <MX_GPIO_Init+0x154>)
 8001f00:	f043 0320 	orr.w	r3, r3, #32
 8001f04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f06:	4b46      	ldr	r3, [pc, #280]	@ (8002020 <MX_GPIO_Init+0x154>)
 8001f08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f0a:	f003 0320 	and.w	r3, r3, #32
 8001f0e:	60fb      	str	r3, [r7, #12]
 8001f10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f12:	4b43      	ldr	r3, [pc, #268]	@ (8002020 <MX_GPIO_Init+0x154>)
 8001f14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f16:	4a42      	ldr	r2, [pc, #264]	@ (8002020 <MX_GPIO_Init+0x154>)
 8001f18:	f043 0301 	orr.w	r3, r3, #1
 8001f1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f1e:	4b40      	ldr	r3, [pc, #256]	@ (8002020 <MX_GPIO_Init+0x154>)
 8001f20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f22:	f003 0301 	and.w	r3, r3, #1
 8001f26:	60bb      	str	r3, [r7, #8]
 8001f28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f2a:	4b3d      	ldr	r3, [pc, #244]	@ (8002020 <MX_GPIO_Init+0x154>)
 8001f2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f2e:	4a3c      	ldr	r2, [pc, #240]	@ (8002020 <MX_GPIO_Init+0x154>)
 8001f30:	f043 0302 	orr.w	r3, r3, #2
 8001f34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f36:	4b3a      	ldr	r3, [pc, #232]	@ (8002020 <MX_GPIO_Init+0x154>)
 8001f38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f3a:	f003 0302 	and.w	r3, r3, #2
 8001f3e:	607b      	str	r3, [r7, #4]
 8001f40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8001f42:	2200      	movs	r2, #0
 8001f44:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 8001f48:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f4c:	f003 fe6c 	bl	8005c28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8001f50:	2200      	movs	r2, #0
 8001f52:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001f56:	4833      	ldr	r0, [pc, #204]	@ (8002024 <MX_GPIO_Init+0x158>)
 8001f58:	f003 fe66 	bl	8005c28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001f5c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f62:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001f66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001f6c:	f107 0314 	add.w	r3, r7, #20
 8001f70:	4619      	mov	r1, r3
 8001f72:	482c      	ldr	r0, [pc, #176]	@ (8002024 <MX_GPIO_Init+0x158>)
 8001f74:	f003 fcd6 	bl	8005924 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA9 PA10 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_9|GPIO_PIN_10;
 8001f78:	f44f 63c4 	mov.w	r3, #1568	@ 0x620
 8001f7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f82:	2300      	movs	r3, #0
 8001f84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f86:	2300      	movs	r3, #0
 8001f88:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f8a:	f107 0314 	add.w	r3, r7, #20
 8001f8e:	4619      	mov	r1, r3
 8001f90:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f94:	f003 fcc6 	bl	8005924 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 PB4
                           PB5 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_4
 8001f98:	f641 43b0 	movw	r3, #7344	@ 0x1cb0
 8001f9c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fa6:	f107 0314 	add.w	r3, r7, #20
 8001faa:	4619      	mov	r1, r3
 8001fac:	481e      	ldr	r0, [pc, #120]	@ (8002028 <MX_GPIO_Init+0x15c>)
 8001fae:	f003 fcb9 	bl	8005924 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001fb2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001fb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fc4:	f107 0314 	add.w	r3, r7, #20
 8001fc8:	4619      	mov	r1, r3
 8001fca:	4816      	ldr	r0, [pc, #88]	@ (8002024 <MX_GPIO_Init+0x158>)
 8001fcc:	f003 fcaa 	bl	8005924 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001fd0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001fd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fde:	f107 0314 	add.w	r3, r7, #20
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001fe8:	f003 fc9c 	bl	8005924 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001fec:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001ff0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ffa:	f107 0314 	add.w	r3, r7, #20
 8001ffe:	4619      	mov	r1, r3
 8002000:	4808      	ldr	r0, [pc, #32]	@ (8002024 <MX_GPIO_Init+0x158>)
 8002002:	f003 fc8f 	bl	8005924 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002006:	2200      	movs	r2, #0
 8002008:	2100      	movs	r1, #0
 800200a:	2028      	movs	r0, #40	@ 0x28
 800200c:	f003 f923 	bl	8005256 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002010:	2028      	movs	r0, #40	@ 0x28
 8002012:	f003 f93a 	bl	800528a <HAL_NVIC_EnableIRQ>

}
 8002016:	bf00      	nop
 8002018:	3728      	adds	r7, #40	@ 0x28
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	40021000 	.word	0x40021000
 8002024:	48000800 	.word	0x48000800
 8002028:	48000400 	.word	0x48000400

0800202c <Kalman_Start>:
	  arm_mat_mult_f32(&temp_matrix4, &filter->P_k_matrix, &filter->P_k_matrix);			// (I - (K * C)) * P_k
	  filter->Kalman_Speed = filter->X_k[1];
	  return  filter->Kalman_Speed;
}

void Kalman_Start(KalmanFilter* filter){
 800202c:	b5b0      	push	{r4, r5, r7, lr}
 800202e:	b0b4      	sub	sp, #208	@ 0xd0
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
	filter->Q = 0.05f; //0.05
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	4a42      	ldr	r2, [pc, #264]	@ (8002140 <Kalman_Start+0x114>)
 8002038:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
	filter->R[0] = 1.0f;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002042:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4

	float32_t a[16] = {1.0f, 9.999812785357154e-04f, -1.149563041803406e-04f, 7.180678148697623e-06f,
 8002046:	4b3f      	ldr	r3, [pc, #252]	@ (8002144 <Kalman_Start+0x118>)
 8002048:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 800204c:	461d      	mov	r5, r3
 800204e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002050:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002052:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002054:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002056:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002058:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800205a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800205e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	                   0.0f, 0.999950617296464f,   -0.229910715302858f, 0.014322070901902f,
	                   0.0f, 0.0f   ,   1.0f  , 0.0f,
	                   0.0f,-0.004961131606500f, 5.718837195395508e-04f, 0.983689934032327f};

	float32_t b[4] = {1.908889505894626e-07f,
 8002062:	4b39      	ldr	r3, [pc, #228]	@ (8002148 <Kalman_Start+0x11c>)
 8002064:	f107 047c 	add.w	r4, r7, #124	@ 0x7c
 8002068:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800206a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
					  5.718837195395508e-04f,
					  0.0f,
					  0.078991236957537f};

	float32_t c[4] = {0.0f, 1.0f, 0.0f, 0.0f};
 800206e:	f04f 0300 	mov.w	r3, #0
 8002072:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002074:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002078:	673b      	str	r3, [r7, #112]	@ 0x70
 800207a:	f04f 0300 	mov.w	r3, #0
 800207e:	677b      	str	r3, [r7, #116]	@ 0x74
 8002080:	f04f 0300 	mov.w	r3, #0
 8002084:	67bb      	str	r3, [r7, #120]	@ 0x78

	float32_t g[4] = {0.0f,
 8002086:	f04f 0300 	mov.w	r3, #0
 800208a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800208c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002090:	663b      	str	r3, [r7, #96]	@ 0x60
 8002092:	f04f 0300 	mov.w	r3, #0
 8002096:	667b      	str	r3, [r7, #100]	@ 0x64
 8002098:	f04f 0300 	mov.w	r3, #0
 800209c:	66bb      	str	r3, [r7, #104]	@ 0x68
					  1.0f,
					  0.0f,
					  0.0f};

	float32_t iden[16] = {1.0f, 0.0f, 0.0f, 0.0f,
 800209e:	4b2b      	ldr	r3, [pc, #172]	@ (800214c <Kalman_Start+0x120>)
 80020a0:	f107 041c 	add.w	r4, r7, #28
 80020a4:	461d      	mov	r5, r3
 80020a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020b2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80020b6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			  	  	 0.0f, 1.0f, 0.0f, 0.0f,
					 0.0f, 0.0f, 1.0f, 0.0f,
					 0.0f, 0.0f, 0.0f, 1.0f,};

	float32_t x_k[4] = {0.0f, 0.0f, 0.0f, 0.0f};
 80020ba:	f107 030c 	add.w	r3, r7, #12
 80020be:	2200      	movs	r2, #0
 80020c0:	601a      	str	r2, [r3, #0]
 80020c2:	605a      	str	r2, [r3, #4]
 80020c4:	609a      	str	r2, [r3, #8]
 80020c6:	60da      	str	r2, [r3, #12]

	filter->Es_velocity[1] = 0.0f;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f04f 0200 	mov.w	r2, #0
 80020ce:	f8c3 2260 	str.w	r2, [r3, #608]	@ 0x260

	int i;
	for(i=0;i<16;i++)
 80020d2:	2300      	movs	r3, #0
 80020d4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80020d8:	e029      	b.n	800212e <Kalman_Start+0x102>
	{
		filter->A[i] = a[i];
 80020da:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	33d0      	adds	r3, #208	@ 0xd0
 80020e2:	443b      	add	r3, r7
 80020e4:	3b44      	subs	r3, #68	@ 0x44
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	6879      	ldr	r1, [r7, #4]
 80020ea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80020ee:	3314      	adds	r3, #20
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	440b      	add	r3, r1
 80020f4:	601a      	str	r2, [r3, #0]
		filter->eye[i] = iden[i];
 80020f6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	33d0      	adds	r3, #208	@ 0xd0
 80020fe:	443b      	add	r3, r7
 8002100:	3bb4      	subs	r3, #180	@ 0xb4
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	6879      	ldr	r1, [r7, #4]
 8002106:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800210a:	3398      	adds	r3, #152	@ 0x98
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	440b      	add	r3, r1
 8002110:	601a      	str	r2, [r3, #0]
		filter->P_k[i] = 0.0f;
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002118:	3304      	adds	r3, #4
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	4413      	add	r3, r2
 800211e:	f04f 0200 	mov.w	r2, #0
 8002122:	601a      	str	r2, [r3, #0]
	for(i=0;i<16;i++)
 8002124:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002128:	3301      	adds	r3, #1
 800212a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800212e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002132:	2b0f      	cmp	r3, #15
 8002134:	ddd1      	ble.n	80020da <Kalman_Start+0xae>
	}

	for(i=0;i<4;i++)
 8002136:	2300      	movs	r3, #0
 8002138:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800213c:	e044      	b.n	80021c8 <Kalman_Start+0x19c>
 800213e:	bf00      	nop
 8002140:	3d4ccccd 	.word	0x3d4ccccd
 8002144:	0800bc48 	.word	0x0800bc48
 8002148:	0800bc88 	.word	0x0800bc88
 800214c:	0800bc98 	.word	0x0800bc98
	{
		filter->X_k[i] = x_k[i];
 8002150:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	33d0      	adds	r3, #208	@ 0xd0
 8002158:	443b      	add	r3, r7
 800215a:	3bc4      	subs	r3, #196	@ 0xc4
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	6879      	ldr	r1, [r7, #4]
 8002160:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	440b      	add	r3, r1
 8002168:	601a      	str	r2, [r3, #0]
		filter->B[i] = b[i];
 800216a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	33d0      	adds	r3, #208	@ 0xd0
 8002172:	443b      	add	r3, r7
 8002174:	3b54      	subs	r3, #84	@ 0x54
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	6879      	ldr	r1, [r7, #4]
 800217a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800217e:	3324      	adds	r3, #36	@ 0x24
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	440b      	add	r3, r1
 8002184:	601a      	str	r2, [r3, #0]
		filter->C[i] = c[i];
 8002186:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	33d0      	adds	r3, #208	@ 0xd0
 800218e:	443b      	add	r3, r7
 8002190:	3b64      	subs	r3, #100	@ 0x64
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	6879      	ldr	r1, [r7, #4]
 8002196:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800219a:	3328      	adds	r3, #40	@ 0x28
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	440b      	add	r3, r1
 80021a0:	601a      	str	r2, [r3, #0]
		filter->G[i] = g[i];
 80021a2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	33d0      	adds	r3, #208	@ 0xd0
 80021aa:	443b      	add	r3, r7
 80021ac:	3b74      	subs	r3, #116	@ 0x74
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	6879      	ldr	r1, [r7, #4]
 80021b2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80021b6:	332c      	adds	r3, #44	@ 0x2c
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	440b      	add	r3, r1
 80021bc:	601a      	str	r2, [r3, #0]
	for(i=0;i<4;i++)
 80021be:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80021c2:	3301      	adds	r3, #1
 80021c4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80021c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80021cc:	2b03      	cmp	r3, #3
 80021ce:	ddbf      	ble.n	8002150 <Kalman_Start+0x124>

	}

	arm_mat_init_f32(&filter->X_k_matrix, 4, 1,filter->X_k);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f503 7029 	add.w	r0, r3, #676	@ 0x2a4
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2201      	movs	r2, #1
 80021da:	2104      	movs	r1, #4
 80021dc:	f008 fe94 	bl	800af08 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->P_k_matrix, 4, 4,filter->P_k);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	3310      	adds	r3, #16
 80021ea:	2204      	movs	r2, #4
 80021ec:	2104      	movs	r1, #4
 80021ee:	f008 fe8b 	bl	800af08 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->A_matrix, 4, 4,filter->A);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	f503 702d 	add.w	r0, r3, #692	@ 0x2b4
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	3350      	adds	r3, #80	@ 0x50
 80021fc:	2204      	movs	r2, #4
 80021fe:	2104      	movs	r1, #4
 8002200:	f008 fe82 	bl	800af08 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->B_matrix, 4, 1,filter->B);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f503 7033 	add.w	r0, r3, #716	@ 0x2cc
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	3390      	adds	r3, #144	@ 0x90
 800220e:	2201      	movs	r2, #1
 8002210:	2104      	movs	r1, #4
 8002212:	f008 fe79 	bl	800af08 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->C_matrix, 1, 4,filter->C);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	33a0      	adds	r3, #160	@ 0xa0
 8002220:	2204      	movs	r2, #4
 8002222:	2101      	movs	r1, #1
 8002224:	f008 fe70 	bl	800af08 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->G_matrix, 4, 1,filter->G);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f503 7039 	add.w	r0, r3, #740	@ 0x2e4
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	33b0      	adds	r3, #176	@ 0xb0
 8002232:	2201      	movs	r2, #1
 8002234:	2104      	movs	r1, #4
 8002236:	f008 fe67 	bl	800af08 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->A_transpose_matrix, 4, 4, filter->A_transpose);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f503 702f 	add.w	r0, r3, #700	@ 0x2bc
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	33c8      	adds	r3, #200	@ 0xc8
 8002244:	2204      	movs	r2, #4
 8002246:	2104      	movs	r1, #4
 8002248:	f008 fe5e 	bl	800af08 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->C_transpose_matrix, 4, 1, filter->C_transpose);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f503 7037 	add.w	r0, r3, #732	@ 0x2dc
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8002258:	2201      	movs	r2, #1
 800225a:	2104      	movs	r1, #4
 800225c:	f008 fe54 	bl	800af08 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->G_transpose_matrix, 1, 4, filter->G_transpose);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f503 703b 	add.w	r0, r3, #748	@ 0x2ec
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 800226c:	2204      	movs	r2, #4
 800226e:	2101      	movs	r1, #1
 8002270:	f008 fe4a 	bl	800af08 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->GGT_matrix, 4, 4, filter->GGT);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f503 703f 	add.w	r0, r3, #764	@ 0x2fc
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002280:	2204      	movs	r2, #4
 8002282:	2104      	movs	r1, #4
 8002284:	f008 fe40 	bl	800af08 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->GQGT_matrix, 4, 4, filter->GQGT);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002294:	2204      	movs	r2, #4
 8002296:	2104      	movs	r1, #4
 8002298:	f008 fe36 	bl	800af08 <arm_mat_init_f32>

	// Compute Xk = Ax + Bu
	arm_mat_init_f32(&filter->Bu_matrix, 4, 1, filter->Bu_data);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	f503 7043 	add.w	r0, r3, #780	@ 0x30c
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80022a8:	2201      	movs	r2, #1
 80022aa:	2104      	movs	r1, #4
 80022ac:	f008 fe2c 	bl	800af08 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->Ax_matrix, 4, 1, filter->Ax_data);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f503 7045 	add.w	r0, r3, #788	@ 0x314
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	f503 73d4 	add.w	r3, r3, #424	@ 0x1a8
 80022bc:	2201      	movs	r2, #1
 80022be:	2104      	movs	r1, #4
 80022c0:	f008 fe22 	bl	800af08 <arm_mat_init_f32>

	// Compute (C * P_k * C^T + R)
	arm_mat_init_f32(&filter->CP_matrix, 1, 4, filter->CP);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	f503 7047 	add.w	r0, r3, #796	@ 0x31c
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 80022d0:	2204      	movs	r2, #4
 80022d2:	2101      	movs	r1, #1
 80022d4:	f008 fe18 	bl	800af08 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->CPCT_matrix, 1, 1, filter->CPCT);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	f503 7049 	add.w	r0, r3, #804	@ 0x324
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 80022e4:	2201      	movs	r2, #1
 80022e6:	2101      	movs	r1, #1
 80022e8:	f008 fe0e 	bl	800af08 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->CPCTR_matrix, 1, 1, filter->CPCTR);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f503 704b 	add.w	r0, r3, #812	@ 0x32c
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 80022f8:	2201      	movs	r2, #1
 80022fa:	2101      	movs	r1, #1
 80022fc:	f008 fe04 	bl	800af08 <arm_mat_init_f32>

	// Compute Kalman Gain: K = P_k * C^T * inv(C * P_k * C^T + R)
	arm_mat_init_f32(&filter->K_matrix, 4, 1, filter->K);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	f503 704d 	add.w	r0, r3, #820	@ 0x334
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 800230c:	2201      	movs	r2, #1
 800230e:	2104      	movs	r1, #4
 8002310:	f008 fdfa 	bl	800af08 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->PCT_matrix, 4, 1,filter->PCT);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	f503 704f 	add.w	r0, r3, #828	@ 0x33c
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8002320:	2201      	movs	r2, #1
 8002322:	2104      	movs	r1, #4
 8002324:	f008 fdf0 	bl	800af08 <arm_mat_init_f32>

	// Compute inverse of (C * P_k * C^T + R)
	arm_mat_init_f32(&filter->CPCTRinv_matrix, 1, 1,filter->CPCTRinv);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	f503 7051 	add.w	r0, r3, #836	@ 0x344
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 8002334:	2201      	movs	r2, #1
 8002336:	2101      	movs	r1, #1
 8002338:	f008 fde6 	bl	800af08 <arm_mat_init_f32>

	// Computation of the estimated state
	arm_mat_init_f32(&filter->Cx_matrix, 1, 1, filter->Cx);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f503 7053 	add.w	r0, r3, #844	@ 0x34c
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f503 7311 	add.w	r3, r3, #580	@ 0x244
 8002348:	2201      	movs	r2, #1
 800234a:	2101      	movs	r1, #1
 800234c:	f008 fddc 	bl	800af08 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->yCx_matrix, 1, 1, filter->yCx);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	f503 7055 	add.w	r0, r3, #852	@ 0x354
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800235c:	2201      	movs	r2, #1
 800235e:	2101      	movs	r1, #1
 8002360:	f008 fdd2 	bl	800af08 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->KyCx_matrix, 4, 1, filter->KyCx);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	f503 7057 	add.w	r0, r3, #860	@ 0x35c
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8002370:	2201      	movs	r2, #1
 8002372:	2104      	movs	r1, #4
 8002374:	f008 fdc8 	bl	800af08 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->Output_matrix, 1, 1, filter->Es_velocity);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f503 703d 	add.w	r0, r3, #756	@ 0x2f4
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002384:	2201      	movs	r2, #1
 8002386:	2101      	movs	r1, #1
 8002388:	f008 fdbe 	bl	800af08 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->eye_matrix, 4, 4, filter->eye);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f503 7031 	add.w	r0, r3, #708	@ 0x2c4
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002398:	2204      	movs	r2, #4
 800239a:	2104      	movs	r1, #4
 800239c:	f008 fdb4 	bl	800af08 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->R_matrix, 1, 1, filter->R);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f503 7059 	add.w	r0, r3, #868	@ 0x364
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	33c4      	adds	r3, #196	@ 0xc4
 80023aa:	2201      	movs	r2, #1
 80023ac:	2101      	movs	r1, #1
 80023ae:	f008 fdab 	bl	800af08 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->Z_matrix, 1, 1, filter->Z);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	f503 705b 	add.w	r0, r3, #876	@ 0x36c
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	f503 7328 	add.w	r3, r3, #672	@ 0x2a0
 80023be:	2201      	movs	r2, #1
 80023c0:	2101      	movs	r1, #1
 80023c2:	f008 fda1 	bl	800af08 <arm_mat_init_f32>
}
 80023c6:	bf00      	nop
 80023c8:	37d0      	adds	r7, #208	@ 0xd0
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bdb0      	pop	{r4, r5, r7, pc}
 80023ce:	bf00      	nop

080023d0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80023d6:	f001 f97a 	bl	80036ce <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80023da:	f000 f83d 	bl	8002458 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80023de:	f7ff fd75 	bl	8001ecc <MX_GPIO_Init>
	MX_DMA_Init();
 80023e2:	f7ff fd39 	bl	8001e58 <MX_DMA_Init>
	MX_ADC1_Init();
 80023e6:	f7ff fbf1 	bl	8001bcc <MX_ADC1_Init>
	MX_TIM2_Init();
 80023ea:	f000 fcc1 	bl	8002d70 <MX_TIM2_Init>
	MX_TIM3_Init();
 80023ee:	f000 fd0d 	bl	8002e0c <MX_TIM3_Init>
	MX_TIM4_Init();
 80023f2:	f000 fd61 	bl	8002eb8 <MX_TIM4_Init>
	MX_TIM5_Init();
 80023f6:	f000 fdb5 	bl	8002f64 <MX_TIM5_Init>
	MX_TIM8_Init();
 80023fa:	f000 fe01 	bl	8003000 <MX_TIM8_Init>
	MX_USART2_UART_Init();
 80023fe:	f001 f833 	bl	8003468 <MX_USART2_UART_Init>
	MX_TIM16_Init();
 8002402:	f000 fecf 	bl	80031a4 <MX_TIM16_Init>
	/* USER CODE BEGIN 2 */
	plotter_begin();
 8002406:	f000 f941 	bl	800268c <plotter_begin>

	for (int i = 0; i < 0x40; i++) {
 800240a:	2300      	movs	r3, #0
 800240c:	607b      	str	r3, [r7, #4]
 800240e:	e007      	b.n	8002420 <main+0x50>
	   registerFrame[i].U16 = 0;
 8002410:	4a10      	ldr	r2, [pc, #64]	@ (8002454 <main+0x84>)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2100      	movs	r1, #0
 8002416:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < 0x40; i++) {
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	3301      	adds	r3, #1
 800241e:	607b      	str	r3, [r7, #4]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2b3f      	cmp	r3, #63	@ 0x3f
 8002424:	ddf4      	ble.n	8002410 <main+0x40>
	}
	registerFrame[0x00].U16 = 22881;
 8002426:	4b0b      	ldr	r3, [pc, #44]	@ (8002454 <main+0x84>)
 8002428:	f645 1261 	movw	r2, #22881	@ 0x5961
 800242c:	801a      	strh	r2, [r3, #0]
	registerFrame[0x03].U16 = 0x01;
 800242e:	4b09      	ldr	r3, [pc, #36]	@ (8002454 <main+0x84>)
 8002430:	2201      	movs	r2, #1
 8002432:	80da      	strh	r2, [r3, #6]
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8002434:	2201      	movs	r2, #1
 8002436:	2120      	movs	r1, #32
 8002438:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800243c:	f003 fbf4 	bl	8005c28 <HAL_GPIO_WritePin>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		Modbus_Protocal_Worker();
 8002440:	f7fe ffe2 	bl	8001408 <Modbus_Protocal_Worker>
		ProcessReceivedCommands();
 8002444:	f000 f854 	bl	80024f0 <ProcessReceivedCommands>
		registerFrame[0x00].U16 = 22881;
 8002448:	4b02      	ldr	r3, [pc, #8]	@ (8002454 <main+0x84>)
 800244a:	f645 1261 	movw	r2, #22881	@ 0x5961
 800244e:	801a      	strh	r2, [r3, #0]
		Modbus_Protocal_Worker();
 8002450:	bf00      	nop
 8002452:	e7f5      	b.n	8002440 <main+0x70>
 8002454:	2000144c 	.word	0x2000144c

08002458 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002458:	b580      	push	{r7, lr}
 800245a:	b094      	sub	sp, #80	@ 0x50
 800245c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800245e:	f107 0318 	add.w	r3, r7, #24
 8002462:	2238      	movs	r2, #56	@ 0x38
 8002464:	2100      	movs	r1, #0
 8002466:	4618      	mov	r0, r3
 8002468:	f008 fe1c 	bl	800b0a4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800246c:	1d3b      	adds	r3, r7, #4
 800246e:	2200      	movs	r2, #0
 8002470:	601a      	str	r2, [r3, #0]
 8002472:	605a      	str	r2, [r3, #4]
 8002474:	609a      	str	r2, [r3, #8]
 8002476:	60da      	str	r2, [r3, #12]
 8002478:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800247a:	2000      	movs	r0, #0
 800247c:	f003 fc2a 	bl	8005cd4 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002480:	2302      	movs	r3, #2
 8002482:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002484:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002488:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800248a:	2340      	movs	r3, #64	@ 0x40
 800248c:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800248e:	2302      	movs	r3, #2
 8002490:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002492:	2302      	movs	r3, #2
 8002494:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8002496:	2304      	movs	r3, #4
 8002498:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 800249a:	2355      	movs	r3, #85	@ 0x55
 800249c:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800249e:	2302      	movs	r3, #2
 80024a0:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80024a2:	2302      	movs	r3, #2
 80024a4:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80024a6:	2302      	movs	r3, #2
 80024a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80024aa:	f107 0318 	add.w	r3, r7, #24
 80024ae:	4618      	mov	r0, r3
 80024b0:	f003 fcc4 	bl	8005e3c <HAL_RCC_OscConfig>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d001      	beq.n	80024be <SystemClock_Config+0x66>
		Error_Handler();
 80024ba:	f000 f8e1 	bl	8002680 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80024be:	230f      	movs	r3, #15
 80024c0:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80024c2:	2303      	movs	r3, #3
 80024c4:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024c6:	2300      	movs	r3, #0
 80024c8:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80024ca:	2300      	movs	r3, #0
 80024cc:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80024ce:	2300      	movs	r3, #0
 80024d0:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 80024d2:	1d3b      	adds	r3, r7, #4
 80024d4:	2104      	movs	r1, #4
 80024d6:	4618      	mov	r0, r3
 80024d8:	f003 ffc2 	bl	8006460 <HAL_RCC_ClockConfig>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d001      	beq.n	80024e6 <SystemClock_Config+0x8e>
		Error_Handler();
 80024e2:	f000 f8cd 	bl	8002680 <Error_Handler>
	}
}
 80024e6:	bf00      	nop
 80024e8:	3750      	adds	r7, #80	@ 0x50
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
	...

080024f0 <ProcessReceivedCommands>:

/* USER CODE BEGIN 4 */
void ProcessReceivedCommands(void) {
 80024f0:	b580      	push	{r7, lr}
 80024f2:	af00      	add	r7, sp, #0
    static uint32_t motionStartTime = 0;
    static uint8_t motionActive = 0;

    if ((registerFrame[0x01].U16 & 0x01) && !motionActive) {
 80024f4:	4b5a      	ldr	r3, [pc, #360]	@ (8002660 <ProcessReceivedCommands+0x170>)
 80024f6:	885b      	ldrh	r3, [r3, #2]
 80024f8:	f003 0301 	and.w	r3, r3, #1
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d027      	beq.n	8002550 <ProcessReceivedCommands+0x60>
 8002500:	4b58      	ldr	r3, [pc, #352]	@ (8002664 <ProcessReceivedCommands+0x174>)
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d123      	bne.n	8002550 <ProcessReceivedCommands+0x60>
        registerFrame[0x10].U16 = 0x01;
 8002508:	4b55      	ldr	r3, [pc, #340]	@ (8002660 <ProcessReceivedCommands+0x170>)
 800250a:	2201      	movs	r2, #1
 800250c:	841a      	strh	r2, [r3, #32]

        HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800250e:	2120      	movs	r1, #32
 8002510:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002514:	f003 fba0 	bl	8005c58 <HAL_GPIO_TogglePin>

        registerFrame[0x11].U16 = 500;
 8002518:	4b51      	ldr	r3, [pc, #324]	@ (8002660 <ProcessReceivedCommands+0x170>)
 800251a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800251e:	845a      	strh	r2, [r3, #34]	@ 0x22
        registerFrame[0x12].U16 = 300;
 8002520:	4b4f      	ldr	r3, [pc, #316]	@ (8002660 <ProcessReceivedCommands+0x170>)
 8002522:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002526:	849a      	strh	r2, [r3, #36]	@ 0x24
        registerFrame[0x13].U16 = 50;
 8002528:	4b4d      	ldr	r3, [pc, #308]	@ (8002660 <ProcessReceivedCommands+0x170>)
 800252a:	2232      	movs	r2, #50	@ 0x32
 800252c:	84da      	strh	r2, [r3, #38]	@ 0x26
        registerFrame[0x14].U16 = 100;
 800252e:	4b4c      	ldr	r3, [pc, #304]	@ (8002660 <ProcessReceivedCommands+0x170>)
 8002530:	2264      	movs	r2, #100	@ 0x64
 8002532:	851a      	strh	r2, [r3, #40]	@ 0x28
        registerFrame[0x15].U16 = 20;
 8002534:	4b4a      	ldr	r3, [pc, #296]	@ (8002660 <ProcessReceivedCommands+0x170>)
 8002536:	2214      	movs	r2, #20
 8002538:	855a      	strh	r2, [r3, #42]	@ 0x2a
        registerFrame[0x16].U16 = 40;
 800253a:	4b49      	ldr	r3, [pc, #292]	@ (8002660 <ProcessReceivedCommands+0x170>)
 800253c:	2228      	movs	r2, #40	@ 0x28
 800253e:	859a      	strh	r2, [r3, #44]	@ 0x2c

        // Start motion timer
        motionStartTime = HAL_GetTick();
 8002540:	f001 f92a 	bl	8003798 <HAL_GetTick>
 8002544:	4603      	mov	r3, r0
 8002546:	4a48      	ldr	r2, [pc, #288]	@ (8002668 <ProcessReceivedCommands+0x178>)
 8002548:	6013      	str	r3, [r2, #0]
        motionActive = 1;
 800254a:	4b46      	ldr	r3, [pc, #280]	@ (8002664 <ProcessReceivedCommands+0x174>)
 800254c:	2201      	movs	r2, #1
 800254e:	701a      	strb	r2, [r3, #0]
    }

    if ((registerFrame[0x01].U16 & 0x08) && !motionActive) {
 8002550:	4b43      	ldr	r3, [pc, #268]	@ (8002660 <ProcessReceivedCommands+0x170>)
 8002552:	885b      	ldrh	r3, [r3, #2]
 8002554:	f003 0308 	and.w	r3, r3, #8
 8002558:	2b00      	cmp	r3, #0
 800255a:	d01f      	beq.n	800259c <ProcessReceivedCommands+0xac>
 800255c:	4b41      	ldr	r3, [pc, #260]	@ (8002664 <ProcessReceivedCommands+0x174>)
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d11b      	bne.n	800259c <ProcessReceivedCommands+0xac>
        registerFrame[0x10].U16 = 0x08;
 8002564:	4b3e      	ldr	r3, [pc, #248]	@ (8002660 <ProcessReceivedCommands+0x170>)
 8002566:	2208      	movs	r2, #8
 8002568:	841a      	strh	r2, [r3, #32]

        HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800256a:	2120      	movs	r1, #32
 800256c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002570:	f003 fb72 	bl	8005c58 <HAL_GPIO_TogglePin>

        registerFrame[0x13].U16 = 12;
 8002574:	4b3a      	ldr	r3, [pc, #232]	@ (8002660 <ProcessReceivedCommands+0x170>)
 8002576:	220c      	movs	r2, #12
 8002578:	84da      	strh	r2, [r3, #38]	@ 0x26
        registerFrame[0x14].U16 = 123;
 800257a:	4b39      	ldr	r3, [pc, #228]	@ (8002660 <ProcessReceivedCommands+0x170>)
 800257c:	227b      	movs	r2, #123	@ 0x7b
 800257e:	851a      	strh	r2, [r3, #40]	@ 0x28
        registerFrame[0x15].U16 = 21;
 8002580:	4b37      	ldr	r3, [pc, #220]	@ (8002660 <ProcessReceivedCommands+0x170>)
 8002582:	2215      	movs	r2, #21
 8002584:	855a      	strh	r2, [r3, #42]	@ 0x2a
        registerFrame[0x16].U16 = 20;
 8002586:	4b36      	ldr	r3, [pc, #216]	@ (8002660 <ProcessReceivedCommands+0x170>)
 8002588:	2214      	movs	r2, #20
 800258a:	859a      	strh	r2, [r3, #44]	@ 0x2c

        // Start motion timer
        motionStartTime = HAL_GetTick();
 800258c:	f001 f904 	bl	8003798 <HAL_GetTick>
 8002590:	4603      	mov	r3, r0
 8002592:	4a35      	ldr	r2, [pc, #212]	@ (8002668 <ProcessReceivedCommands+0x178>)
 8002594:	6013      	str	r3, [r2, #0]
        motionActive = 1;
 8002596:	4b33      	ldr	r3, [pc, #204]	@ (8002664 <ProcessReceivedCommands+0x174>)
 8002598:	2201      	movs	r2, #1
 800259a:	701a      	strb	r2, [r3, #0]
    }

    // Process Pen UP command
    if (registerFrame[0x04].U16 == 1) {
 800259c:	4b30      	ldr	r3, [pc, #192]	@ (8002660 <ProcessReceivedCommands+0x170>)
 800259e:	891b      	ldrh	r3, [r3, #8]
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d105      	bne.n	80025b0 <ProcessReceivedCommands+0xc0>
        // Update limit switch status
        registerFrame[0x03].U16 = 0x02;
 80025a4:	4b2e      	ldr	r3, [pc, #184]	@ (8002660 <ProcessReceivedCommands+0x170>)
 80025a6:	2202      	movs	r2, #2
 80025a8:	80da      	strh	r2, [r3, #6]

        // Clear the command
        registerFrame[0x04].U16 = 0;
 80025aa:	4b2d      	ldr	r3, [pc, #180]	@ (8002660 <ProcessReceivedCommands+0x170>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	811a      	strh	r2, [r3, #8]
    }

    // Process Pen DOWN command
    if (registerFrame[0x05].U16 == 1) {
 80025b0:	4b2b      	ldr	r3, [pc, #172]	@ (8002660 <ProcessReceivedCommands+0x170>)
 80025b2:	895b      	ldrh	r3, [r3, #10]
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d105      	bne.n	80025c4 <ProcessReceivedCommands+0xd4>
        // Update limit switch status
        registerFrame[0x03].U16 = 0x01;
 80025b8:	4b29      	ldr	r3, [pc, #164]	@ (8002660 <ProcessReceivedCommands+0x170>)
 80025ba:	2201      	movs	r2, #1
 80025bc:	80da      	strh	r2, [r3, #6]

        registerFrame[0x05].U16 = 0;
 80025be:	4b28      	ldr	r3, [pc, #160]	@ (8002660 <ProcessReceivedCommands+0x170>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	815a      	strh	r2, [r3, #10]
    }

    // Handle motion simulation
    if (motionActive) {
 80025c4:	4b27      	ldr	r3, [pc, #156]	@ (8002664 <ProcessReceivedCommands+0x174>)
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d046      	beq.n	800265a <ProcessReceivedCommands+0x16a>
        // After 3 seconds, complete the motion
        if (HAL_GetTick() - motionStartTime > 3000) {
 80025cc:	f001 f8e4 	bl	8003798 <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	4b25      	ldr	r3, [pc, #148]	@ (8002668 <ProcessReceivedCommands+0x178>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80025dc:	4293      	cmp	r3, r2
 80025de:	d93c      	bls.n	800265a <ProcessReceivedCommands+0x16a>
            // Clear the motion status - set to Idle
            registerFrame[0x10].U16 = 0x00;
 80025e0:	4b1f      	ldr	r3, [pc, #124]	@ (8002660 <ProcessReceivedCommands+0x170>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	841a      	strh	r2, [r3, #32]

            if (registerFrame[0x01].U16 & 0x01) {
 80025e6:	4b1e      	ldr	r3, [pc, #120]	@ (8002660 <ProcessReceivedCommands+0x170>)
 80025e8:	885b      	ldrh	r3, [r3, #2]
 80025ea:	f003 0301 	and.w	r3, r3, #1
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d018      	beq.n	8002624 <ProcessReceivedCommands+0x134>
                registerFrame[0x11].U16 = 0;
 80025f2:	4b1b      	ldr	r3, [pc, #108]	@ (8002660 <ProcessReceivedCommands+0x170>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	845a      	strh	r2, [r3, #34]	@ 0x22
                registerFrame[0x12].U16 = 0;
 80025f8:	4b19      	ldr	r3, [pc, #100]	@ (8002660 <ProcessReceivedCommands+0x170>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	849a      	strh	r2, [r3, #36]	@ 0x24
                registerFrame[0x13].U16 = 0;
 80025fe:	4b18      	ldr	r3, [pc, #96]	@ (8002660 <ProcessReceivedCommands+0x170>)
 8002600:	2200      	movs	r2, #0
 8002602:	84da      	strh	r2, [r3, #38]	@ 0x26
                registerFrame[0x14].U16 = 0;
 8002604:	4b16      	ldr	r3, [pc, #88]	@ (8002660 <ProcessReceivedCommands+0x170>)
 8002606:	2200      	movs	r2, #0
 8002608:	851a      	strh	r2, [r3, #40]	@ 0x28
                registerFrame[0x15].U16 = 0;
 800260a:	4b15      	ldr	r3, [pc, #84]	@ (8002660 <ProcessReceivedCommands+0x170>)
 800260c:	2200      	movs	r2, #0
 800260e:	855a      	strh	r2, [r3, #42]	@ 0x2a
                registerFrame[0x16].U16 = 0;
 8002610:	4b13      	ldr	r3, [pc, #76]	@ (8002660 <ProcessReceivedCommands+0x170>)
 8002612:	2200      	movs	r2, #0
 8002614:	859a      	strh	r2, [r3, #44]	@ 0x2c

                // Clear the Home command
                registerFrame[0x01].U16 &= ~0x01;
 8002616:	4b12      	ldr	r3, [pc, #72]	@ (8002660 <ProcessReceivedCommands+0x170>)
 8002618:	885b      	ldrh	r3, [r3, #2]
 800261a:	f023 0301 	bic.w	r3, r3, #1
 800261e:	b29a      	uxth	r2, r3
 8002620:	4b0f      	ldr	r3, [pc, #60]	@ (8002660 <ProcessReceivedCommands+0x170>)
 8002622:	805a      	strh	r2, [r3, #2]
            }

            // If it was Go To Target, set position to exactly the target
            if (registerFrame[0x01].U16 & 0x08) {
 8002624:	4b0e      	ldr	r3, [pc, #56]	@ (8002660 <ProcessReceivedCommands+0x170>)
 8002626:	885b      	ldrh	r3, [r3, #2]
 8002628:	f003 0308 	and.w	r3, r3, #8
 800262c:	2b00      	cmp	r3, #0
 800262e:	d00c      	beq.n	800264a <ProcessReceivedCommands+0x15a>
                registerFrame[0x11].U16 = 100;
 8002630:	4b0b      	ldr	r3, [pc, #44]	@ (8002660 <ProcessReceivedCommands+0x170>)
 8002632:	2264      	movs	r2, #100	@ 0x64
 8002634:	845a      	strh	r2, [r3, #34]	@ 0x22
                registerFrame[0x12].U16 = 200;
 8002636:	4b0a      	ldr	r3, [pc, #40]	@ (8002660 <ProcessReceivedCommands+0x170>)
 8002638:	22c8      	movs	r2, #200	@ 0xc8
 800263a:	849a      	strh	r2, [r3, #36]	@ 0x24

                // Clear the Go To Target command
                registerFrame[0x01].U16 &= ~0x08;
 800263c:	4b08      	ldr	r3, [pc, #32]	@ (8002660 <ProcessReceivedCommands+0x170>)
 800263e:	885b      	ldrh	r3, [r3, #2]
 8002640:	f023 0308 	bic.w	r3, r3, #8
 8002644:	b29a      	uxth	r2, r3
 8002646:	4b06      	ldr	r3, [pc, #24]	@ (8002660 <ProcessReceivedCommands+0x170>)
 8002648:	805a      	strh	r2, [r3, #2]
            }

            // Reset motion state
            motionActive = 0;
 800264a:	4b06      	ldr	r3, [pc, #24]	@ (8002664 <ProcessReceivedCommands+0x174>)
 800264c:	2200      	movs	r2, #0
 800264e:	701a      	strb	r2, [r3, #0]

            HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8002650:	2120      	movs	r1, #32
 8002652:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002656:	f003 faff 	bl	8005c58 <HAL_GPIO_TogglePin>
        }
    }
}
 800265a:	bf00      	nop
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	2000144c 	.word	0x2000144c
 8002664:	20000348 	.word	0x20000348
 8002668:	2000034c 	.word	0x2000034c

0800266c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
	if (htim == &htim2) {

	}
}
 8002674:	bf00      	nop
 8002676:	370c      	adds	r7, #12
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr

08002680 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002684:	b672      	cpsid	i
}
 8002686:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002688:	bf00      	nop
 800268a:	e7fd      	b.n	8002688 <Error_Handler+0x8>

0800268c <plotter_begin>:
float joystick_x = 0.0f;
float joystick_y = 0.0f;
float prismatic_current = 0.0f;
float revolute_current = 0.0f;

void plotter_begin() {
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af02      	add	r7, sp, #8
	SIGNAL_init(&sine_sg, SIGNAL_SINE);
 8002692:	2100      	movs	r1, #0
 8002694:	488b      	ldr	r0, [pc, #556]	@ (80028c4 <plotter_begin+0x238>)
 8002696:	f000 f969 	bl	800296c <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg, SINE_AMPLITUDE, SINE_FREQUENCY, SINE_PHASE, SINE_OFFSET, SINE_MIN_SETPOINT, SINE_MAX_SETPOINT);
 800269a:	eddf 2a8b 	vldr	s5, [pc, #556]	@ 80028c8 <plotter_begin+0x23c>
 800269e:	ed9f 2a8b 	vldr	s4, [pc, #556]	@ 80028cc <plotter_begin+0x240>
 80026a2:	eddf 1a8b 	vldr	s3, [pc, #556]	@ 80028d0 <plotter_begin+0x244>
 80026a6:	ed9f 1a8a 	vldr	s2, [pc, #552]	@ 80028d0 <plotter_begin+0x244>
 80026aa:	eddf 0a8a 	vldr	s1, [pc, #552]	@ 80028d4 <plotter_begin+0x248>
 80026ae:	ed9f 0a86 	vldr	s0, [pc, #536]	@ 80028c8 <plotter_begin+0x23c>
 80026b2:	4884      	ldr	r0, [pc, #528]	@ (80028c4 <plotter_begin+0x238>)
 80026b4:	f000 f9b8 	bl	8002a28 <SIGNAL_config_sine>

	SIGNAL_init(&chirp_linear_sg, SIGNAL_CHIRP);
 80026b8:	2101      	movs	r1, #1
 80026ba:	4887      	ldr	r0, [pc, #540]	@ (80028d8 <plotter_begin+0x24c>)
 80026bc:	f000 f956 	bl	800296c <SIGNAL_init>
	SIGNAL_config_chirp(&chirp_linear_sg, CHIRP_LINEAR_AMPLITUDE, CHIRP_LINEAR_START_FREQ,
 80026c0:	eddf 2a81 	vldr	s5, [pc, #516]	@ 80028c8 <plotter_begin+0x23c>
 80026c4:	ed9f 2a81 	vldr	s4, [pc, #516]	@ 80028cc <plotter_begin+0x240>
 80026c8:	2100      	movs	r1, #0
 80026ca:	eef1 1a04 	vmov.f32	s3, #20	@ 0x40a00000  5.0
 80026ce:	eeb2 1a04 	vmov.f32	s2, #36	@ 0x41200000  10.0
 80026d2:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 80026d6:	ed9f 0a7c 	vldr	s0, [pc, #496]	@ 80028c8 <plotter_begin+0x23c>
 80026da:	487f      	ldr	r0, [pc, #508]	@ (80028d8 <plotter_begin+0x24c>)
 80026dc:	f000 f9cf 	bl	8002a7e <SIGNAL_config_chirp>
	                   CHIRP_LINEAR_END_FREQ, CHIRP_LINEAR_DURATION, CHIRP_LINEAR,
	                   CHIRP_LINEAR_MIN_SETPOINT, CHIRP_LINEAR_MAX_SETPOINT);

	SIGNAL_init(&chirp_log_sg, SIGNAL_CHIRP);
 80026e0:	2101      	movs	r1, #1
 80026e2:	487e      	ldr	r0, [pc, #504]	@ (80028dc <plotter_begin+0x250>)
 80026e4:	f000 f942 	bl	800296c <SIGNAL_init>
	SIGNAL_config_chirp(&chirp_log_sg, CHIRP_LOG_AMPLITUDE, CHIRP_LOG_START_FREQ,
 80026e8:	eddf 2a77 	vldr	s5, [pc, #476]	@ 80028c8 <plotter_begin+0x23c>
 80026ec:	ed9f 2a77 	vldr	s4, [pc, #476]	@ 80028cc <plotter_begin+0x240>
 80026f0:	2101      	movs	r1, #1
 80026f2:	eef1 1a04 	vmov.f32	s3, #20	@ 0x40a00000  5.0
 80026f6:	eeb2 1a04 	vmov.f32	s2, #36	@ 0x41200000  10.0
 80026fa:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 80026fe:	ed9f 0a72 	vldr	s0, [pc, #456]	@ 80028c8 <plotter_begin+0x23c>
 8002702:	4876      	ldr	r0, [pc, #472]	@ (80028dc <plotter_begin+0x250>)
 8002704:	f000 f9bb 	bl	8002a7e <SIGNAL_config_chirp>
	                   CHIRP_LOG_END_FREQ, CHIRP_LOG_DURATION, CHIRP_LOGARITHMIC,
	                   CHIRP_LOG_MIN_SETPOINT, CHIRP_LOG_MAX_SETPOINT);

	SIGNAL_init(&square_sg, SIGNAL_SQUARE);
 8002708:	2102      	movs	r1, #2
 800270a:	4875      	ldr	r0, [pc, #468]	@ (80028e0 <plotter_begin+0x254>)
 800270c:	f000 f92e 	bl	800296c <SIGNAL_init>
	SIGNAL_config_square(&square_sg, SQUARE_AMPLITUDE, SQUARE_FREQUENCY,
 8002710:	ed9f 3a6d 	vldr	s6, [pc, #436]	@ 80028c8 <plotter_begin+0x23c>
 8002714:	eddf 2a6d 	vldr	s5, [pc, #436]	@ 80028cc <plotter_begin+0x240>
 8002718:	ed9f 2a6d 	vldr	s4, [pc, #436]	@ 80028d0 <plotter_begin+0x244>
 800271c:	eddf 1a6c 	vldr	s3, [pc, #432]	@ 80028d0 <plotter_begin+0x244>
 8002720:	ed9f 1a70 	vldr	s2, [pc, #448]	@ 80028e4 <plotter_begin+0x258>
 8002724:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8002728:	ed9f 0a67 	vldr	s0, [pc, #412]	@ 80028c8 <plotter_begin+0x23c>
 800272c:	486c      	ldr	r0, [pc, #432]	@ (80028e0 <plotter_begin+0x254>)
 800272e:	f000 f9da 	bl	8002ae6 <SIGNAL_config_square>
	                    SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
	                    SQUARE_MIN_SETPOINT, SQUARE_MAX_SETPOINT);

	SIGNAL_init(&ramp_sg, SIGNAL_RAMP);
 8002732:	2103      	movs	r1, #3
 8002734:	486c      	ldr	r0, [pc, #432]	@ (80028e8 <plotter_begin+0x25c>)
 8002736:	f000 f919 	bl	800296c <SIGNAL_init>
	SIGNAL_config_ramp(&ramp_sg, RAMP_AMPLITUDE, RAMP_FREQUENCY,
 800273a:	eddf 3a63 	vldr	s7, [pc, #396]	@ 80028c8 <plotter_begin+0x23c>
 800273e:	ed9f 3a63 	vldr	s6, [pc, #396]	@ 80028cc <plotter_begin+0x240>
 8002742:	eddf 2a63 	vldr	s5, [pc, #396]	@ 80028d0 <plotter_begin+0x244>
 8002746:	ed9f 2a62 	vldr	s4, [pc, #392]	@ 80028d0 <plotter_begin+0x244>
 800274a:	eddf 1a5f 	vldr	s3, [pc, #380]	@ 80028c8 <plotter_begin+0x23c>
 800274e:	ed9f 1a5f 	vldr	s2, [pc, #380]	@ 80028cc <plotter_begin+0x240>
 8002752:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8002756:	ed9f 0a5c 	vldr	s0, [pc, #368]	@ 80028c8 <plotter_begin+0x23c>
 800275a:	4863      	ldr	r0, [pc, #396]	@ (80028e8 <plotter_begin+0x25c>)
 800275c:	f000 f9f3 	bl	8002b46 <SIGNAL_config_ramp>
	                  RAMP_START, RAMP_END, RAMP_PHASE, RAMP_OFFSET,
	                  RAMP_MIN_SETPOINT, RAMP_MAX_SETPOINT);

	QEI_init(&prismatic_encoder, ENC_TIM1, ENC_PPR, ENC_FREQ, MOTOR_RATIO1);
 8002760:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8002764:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002768:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800276c:	495f      	ldr	r1, [pc, #380]	@ (80028ec <plotter_begin+0x260>)
 800276e:	4860      	ldr	r0, [pc, #384]	@ (80028f0 <plotter_begin+0x264>)
 8002770:	f7ff f9dc 	bl	8001b2c <QEI_init>
	QEI_init(&revolute_encoder, ENC_TIM2, ENC_PPR, ENC_FREQ, MOTOR_RATIO2);
 8002774:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 8002778:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800277c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002780:	495c      	ldr	r1, [pc, #368]	@ (80028f4 <plotter_begin+0x268>)
 8002782:	485d      	ldr	r0, [pc, #372]	@ (80028f8 <plotter_begin+0x26c>)
 8002784:	f7ff f9d2 	bl	8001b2c <QEI_init>

	MDXX_GPIO_init(&prismatic_motor, MOTOR1_TIM, MOTOR1_TIM_CH, MOTOR1_GPIOx, MOTOR1_GPIO_Pin);
 8002788:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800278c:	9300      	str	r3, [sp, #0]
 800278e:	4b5b      	ldr	r3, [pc, #364]	@ (80028fc <plotter_begin+0x270>)
 8002790:	2200      	movs	r2, #0
 8002792:	495b      	ldr	r1, [pc, #364]	@ (8002900 <plotter_begin+0x274>)
 8002794:	485b      	ldr	r0, [pc, #364]	@ (8002904 <plotter_begin+0x278>)
 8002796:	f7fe fb39 	bl	8000e0c <MDXX_GPIO_init>
	MDXX_GPIO_init(&revolute_motor, MOTOR2_TIM, MOTOR2_TIM_CH, MOTOR2_GPIOx, MOTOR2_GPIO_Pin);
 800279a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800279e:	9300      	str	r3, [sp, #0]
 80027a0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80027a4:	2204      	movs	r2, #4
 80027a6:	4956      	ldr	r1, [pc, #344]	@ (8002900 <plotter_begin+0x274>)
 80027a8:	4857      	ldr	r0, [pc, #348]	@ (8002908 <plotter_begin+0x27c>)
 80027aa:	f7fe fb2f 	bl	8000e0c <MDXX_GPIO_init>

	PWM_init(&servo, SERVO_TIM, SERVO_TIM_CH);
 80027ae:	2208      	movs	r2, #8
 80027b0:	4953      	ldr	r1, [pc, #332]	@ (8002900 <plotter_begin+0x274>)
 80027b2:	4856      	ldr	r0, [pc, #344]	@ (800290c <plotter_begin+0x280>)
 80027b4:	f7ff f890 	bl	80018d8 <PWM_init>

	MDXX_set_range(&prismatic_motor, 2000, 0);
 80027b8:	eddf 0a45 	vldr	s1, [pc, #276]	@ 80028d0 <plotter_begin+0x244>
 80027bc:	ed9f 0a54 	vldr	s0, [pc, #336]	@ 8002910 <plotter_begin+0x284>
 80027c0:	4850      	ldr	r0, [pc, #320]	@ (8002904 <plotter_begin+0x278>)
 80027c2:	f7fe fb47 	bl	8000e54 <MDXX_set_range>
	MDXX_set_range(&revolute_motor, 2000, 0);
 80027c6:	eddf 0a42 	vldr	s1, [pc, #264]	@ 80028d0 <plotter_begin+0x244>
 80027ca:	ed9f 0a51 	vldr	s0, [pc, #324]	@ 8002910 <plotter_begin+0x284>
 80027ce:	484e      	ldr	r0, [pc, #312]	@ (8002908 <plotter_begin+0x27c>)
 80027d0:	f7fe fb40 	bl	8000e54 <MDXX_set_range>
	PWM_write_range(&servo, 2000, 0);
 80027d4:	eddf 0a3e 	vldr	s1, [pc, #248]	@ 80028d0 <plotter_begin+0x244>
 80027d8:	ed9f 0a4d 	vldr	s0, [pc, #308]	@ 8002910 <plotter_begin+0x284>
 80027dc:	484b      	ldr	r0, [pc, #300]	@ (800290c <plotter_begin+0x280>)
 80027de:	f7ff f89f 	bl	8001920 <PWM_write_range>

	PID_CONTROLLER_Init(&prismatic_position_pid, 0, 0, 0, 65535);
 80027e2:	eddf 1a4c 	vldr	s3, [pc, #304]	@ 8002914 <plotter_begin+0x288>
 80027e6:	ed9f 1a3a 	vldr	s2, [pc, #232]	@ 80028d0 <plotter_begin+0x244>
 80027ea:	eddf 0a39 	vldr	s1, [pc, #228]	@ 80028d0 <plotter_begin+0x244>
 80027ee:	ed9f 0a38 	vldr	s0, [pc, #224]	@ 80028d0 <plotter_begin+0x244>
 80027f2:	4849      	ldr	r0, [pc, #292]	@ (8002918 <plotter_begin+0x28c>)
 80027f4:	f7fe fae0 	bl	8000db8 <PID_CONTROLLER_Init>
	PID_CONTROLLER_Init(&prismatic_velocity_pid, 0, 0, 0, 65535);
 80027f8:	eddf 1a46 	vldr	s3, [pc, #280]	@ 8002914 <plotter_begin+0x288>
 80027fc:	ed9f 1a34 	vldr	s2, [pc, #208]	@ 80028d0 <plotter_begin+0x244>
 8002800:	eddf 0a33 	vldr	s1, [pc, #204]	@ 80028d0 <plotter_begin+0x244>
 8002804:	ed9f 0a32 	vldr	s0, [pc, #200]	@ 80028d0 <plotter_begin+0x244>
 8002808:	4844      	ldr	r0, [pc, #272]	@ (800291c <plotter_begin+0x290>)
 800280a:	f7fe fad5 	bl	8000db8 <PID_CONTROLLER_Init>

	PID_CONTROLLER_Init(&revolute_position_pid, 0, 0, 0, 65535);
 800280e:	eddf 1a41 	vldr	s3, [pc, #260]	@ 8002914 <plotter_begin+0x288>
 8002812:	ed9f 1a2f 	vldr	s2, [pc, #188]	@ 80028d0 <plotter_begin+0x244>
 8002816:	eddf 0a2e 	vldr	s1, [pc, #184]	@ 80028d0 <plotter_begin+0x244>
 800281a:	ed9f 0a2d 	vldr	s0, [pc, #180]	@ 80028d0 <plotter_begin+0x244>
 800281e:	4840      	ldr	r0, [pc, #256]	@ (8002920 <plotter_begin+0x294>)
 8002820:	f7fe faca 	bl	8000db8 <PID_CONTROLLER_Init>
	PID_CONTROLLER_Init(&revolute_velocity_pid, 0, 0, 0, 65535);
 8002824:	eddf 1a3b 	vldr	s3, [pc, #236]	@ 8002914 <plotter_begin+0x288>
 8002828:	ed9f 1a29 	vldr	s2, [pc, #164]	@ 80028d0 <plotter_begin+0x244>
 800282c:	eddf 0a28 	vldr	s1, [pc, #160]	@ 80028d0 <plotter_begin+0x244>
 8002830:	ed9f 0a27 	vldr	s0, [pc, #156]	@ 80028d0 <plotter_begin+0x244>
 8002834:	483b      	ldr	r0, [pc, #236]	@ (8002924 <plotter_begin+0x298>)
 8002836:	f7fe fabf 	bl	8000db8 <PID_CONTROLLER_Init>

	ADC_DMA_Init(&adc_dma, &hadc1, adc_dma_buffer, ADC_BUFFER_SIZE, ADC_CHANNELS, 3.3f, 4095.0f);
 800283a:	2304      	movs	r3, #4
 800283c:	9300      	str	r3, [sp, #0]
 800283e:	eddf 0a3a 	vldr	s1, [pc, #232]	@ 8002928 <plotter_begin+0x29c>
 8002842:	ed9f 0a3a 	vldr	s0, [pc, #232]	@ 800292c <plotter_begin+0x2a0>
 8002846:	23c8      	movs	r3, #200	@ 0xc8
 8002848:	4a39      	ldr	r2, [pc, #228]	@ (8002930 <plotter_begin+0x2a4>)
 800284a:	493a      	ldr	r1, [pc, #232]	@ (8002934 <plotter_begin+0x2a8>)
 800284c:	483a      	ldr	r0, [pc, #232]	@ (8002938 <plotter_begin+0x2ac>)
 800284e:	f7fe fa67 	bl	8000d20 <ADC_DMA_Init>
	ADC_DMA_Start(&adc_dma);
 8002852:	4839      	ldr	r0, [pc, #228]	@ (8002938 <plotter_begin+0x2ac>)
 8002854:	f7fe fa99 	bl	8000d8a <ADC_DMA_Start>

	FIR_init(&LP_prismatic_current, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 8002858:	eddf 0a38 	vldr	s1, [pc, #224]	@ 800293c <plotter_begin+0x2b0>
 800285c:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8002860:	211f      	movs	r1, #31
 8002862:	4837      	ldr	r0, [pc, #220]	@ (8002940 <plotter_begin+0x2b4>)
 8002864:	f7fe fbd0 	bl	8001008 <FIR_init>
	FIR_init(&LP_prismatic_velocity, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 8002868:	eddf 0a34 	vldr	s1, [pc, #208]	@ 800293c <plotter_begin+0x2b0>
 800286c:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8002870:	211f      	movs	r1, #31
 8002872:	4834      	ldr	r0, [pc, #208]	@ (8002944 <plotter_begin+0x2b8>)
 8002874:	f7fe fbc8 	bl	8001008 <FIR_init>
	FIR_init(&LP_revolute_current, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 8002878:	eddf 0a30 	vldr	s1, [pc, #192]	@ 800293c <plotter_begin+0x2b0>
 800287c:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8002880:	211f      	movs	r1, #31
 8002882:	4831      	ldr	r0, [pc, #196]	@ (8002948 <plotter_begin+0x2bc>)
 8002884:	f7fe fbc0 	bl	8001008 <FIR_init>
	FIR_init(&LP_revolute_velocity, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 8002888:	eddf 0a2c 	vldr	s1, [pc, #176]	@ 800293c <plotter_begin+0x2b0>
 800288c:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8002890:	211f      	movs	r1, #31
 8002892:	482e      	ldr	r0, [pc, #184]	@ (800294c <plotter_begin+0x2c0>)
 8002894:	f7fe fbb8 	bl	8001008 <FIR_init>

	Kalman_Start(&flit_prismatic_velocity);
 8002898:	482d      	ldr	r0, [pc, #180]	@ (8002950 <plotter_begin+0x2c4>)
 800289a:	f7ff fbc7 	bl	800202c <Kalman_Start>
	Kalman_Start(&flit_revolute_velocity);
 800289e:	482d      	ldr	r0, [pc, #180]	@ (8002954 <plotter_begin+0x2c8>)
 80028a0:	f7ff fbc4 	bl	800202c <Kalman_Start>

	Modbus_init(&ModBus, MODBUS_USART, MODBUS_DATA_SENDING_PERIOD_TIM, registerFrame, MODBUS_SLAVE_ADDRESS, MODBUS_REGISTER_FRAME_SIZE);
 80028a4:	23c8      	movs	r3, #200	@ 0xc8
 80028a6:	9301      	str	r3, [sp, #4]
 80028a8:	2315      	movs	r3, #21
 80028aa:	9300      	str	r3, [sp, #0]
 80028ac:	4b2a      	ldr	r3, [pc, #168]	@ (8002958 <plotter_begin+0x2cc>)
 80028ae:	4a2b      	ldr	r2, [pc, #172]	@ (800295c <plotter_begin+0x2d0>)
 80028b0:	492b      	ldr	r1, [pc, #172]	@ (8002960 <plotter_begin+0x2d4>)
 80028b2:	482c      	ldr	r0, [pc, #176]	@ (8002964 <plotter_begin+0x2d8>)
 80028b4:	f7fe fd08 	bl	80012c8 <Modbus_init>

	HAL_TIM_Base_Start_IT(CONTROL_TIM);
 80028b8:	482b      	ldr	r0, [pc, #172]	@ (8002968 <plotter_begin+0x2dc>)
 80028ba:	f004 fb0f 	bl	8006edc <HAL_TIM_Base_Start_IT>
}
 80028be:	bf00      	nop
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	20000560 	.word	0x20000560
 80028c8:	3e6eeeef 	.word	0x3e6eeeef
 80028cc:	be6eeeef 	.word	0xbe6eeeef
 80028d0:	00000000 	.word	0x00000000
 80028d4:	3d4ccccd 	.word	0x3d4ccccd
 80028d8:	200005a4 	.word	0x200005a4
 80028dc:	200005e8 	.word	0x200005e8
 80028e0:	2000062c 	.word	0x2000062c
 80028e4:	3e99999a 	.word	0x3e99999a
 80028e8:	20000670 	.word	0x20000670
 80028ec:	200016ac 	.word	0x200016ac
 80028f0:	200003e8 	.word	0x200003e8
 80028f4:	20001778 	.word	0x20001778
 80028f8:	20000434 	.word	0x20000434
 80028fc:	48000800 	.word	0x48000800
 8002900:	20001910 	.word	0x20001910
 8002904:	20000350 	.word	0x20000350
 8002908:	2000039c 	.word	0x2000039c
 800290c:	20000530 	.word	0x20000530
 8002910:	44fa0000 	.word	0x44fa0000
 8002914:	477fff00 	.word	0x477fff00
 8002918:	20000480 	.word	0x20000480
 800291c:	200004ac 	.word	0x200004ac
 8002920:	200004d8 	.word	0x200004d8
 8002924:	20000504 	.word	0x20000504
 8002928:	457ff000 	.word	0x457ff000
 800292c:	40533333 	.word	0x40533333
 8002930:	20000de4 	.word	0x20000de4
 8002934:	2000027c 	.word	0x2000027c
 8002938:	20000548 	.word	0x20000548
 800293c:	447a0000 	.word	0x447a0000
 8002940:	200006c0 	.word	0x200006c0
 8002944:	200006b4 	.word	0x200006b4
 8002948:	200006d8 	.word	0x200006d8
 800294c:	200006cc 	.word	0x200006cc
 8002950:	200006e4 	.word	0x200006e4
 8002954:	20000a64 	.word	0x20000a64
 8002958:	2000144c 	.word	0x2000144c
 800295c:	200019dc 	.word	0x200019dc
 8002960:	20001aa8 	.word	0x20001aa8
 8002964:	20000f74 	.word	0x20000f74
 8002968:	200015e0 	.word	0x200015e0

0800296c <SIGNAL_init>:
    if (value > max_setpoint) return max_setpoint;
    return value;
}

// Initialization function
void SIGNAL_init(SignalGenerator* sg, SignalType type) {
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	460b      	mov	r3, r1
 8002976:	70fb      	strb	r3, [r7, #3]
    // Reset all parameters
    sg->type = type;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	78fa      	ldrb	r2, [r7, #3]
 800297c:	701a      	strb	r2, [r3, #0]
    sg->amplitude = 1.0f;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002984:	605a      	str	r2, [r3, #4]
    sg->frequency = 1.0f;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800298c:	609a      	str	r2, [r3, #8]
    sg->phase = 0.0f;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	f04f 0200 	mov.w	r2, #0
 8002994:	60da      	str	r2, [r3, #12]
    sg->offset = 0.0f;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	f04f 0200 	mov.w	r2, #0
 800299c:	611a      	str	r2, [r3, #16]
    sg->current_phase = 0.0f;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	f04f 0200 	mov.w	r2, #0
 80029a4:	635a      	str	r2, [r3, #52]	@ 0x34
    sg->time_elapsed = 0.0f;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	f04f 0200 	mov.w	r2, #0
 80029ac:	639a      	str	r2, [r3, #56]	@ 0x38
    sg->min_setpoint = -1.0f;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4a1b      	ldr	r2, [pc, #108]	@ (8002a20 <SIGNAL_init+0xb4>)
 80029b2:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = 1.0f;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80029ba:	641a      	str	r2, [r3, #64]	@ 0x40

    // Type-specific initializations
    switch (type) {
 80029bc:	78fb      	ldrb	r3, [r7, #3]
 80029be:	2b03      	cmp	r3, #3
 80029c0:	d828      	bhi.n	8002a14 <SIGNAL_init+0xa8>
 80029c2:	a201      	add	r2, pc, #4	@ (adr r2, 80029c8 <SIGNAL_init+0x5c>)
 80029c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029c8:	08002a13 	.word	0x08002a13
 80029cc:	080029d9 	.word	0x080029d9
 80029d0:	080029f7 	.word	0x080029f7
 80029d4:	08002a01 	.word	0x08002a01
        case SIGNAL_SINE:
            break;
        case SIGNAL_CHIRP:
            sg->chirp_type = CHIRP_LINEAR;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2200      	movs	r2, #0
 80029dc:	751a      	strb	r2, [r3, #20]
            sg->f_start = 1.0f;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80029e4:	619a      	str	r2, [r3, #24]
            sg->f_end = 10.0f;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a0e      	ldr	r2, [pc, #56]	@ (8002a24 <SIGNAL_init+0xb8>)
 80029ea:	61da      	str	r2, [r3, #28]
            sg->duration = 1.0f;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80029f2:	621a      	str	r2, [r3, #32]
            break;
 80029f4:	e00e      	b.n	8002a14 <SIGNAL_init+0xa8>
        case SIGNAL_SQUARE:
            sg->duty_cycle = 0.5f;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 80029fc:	629a      	str	r2, [r3, #40]	@ 0x28
            break;
 80029fe:	e009      	b.n	8002a14 <SIGNAL_init+0xa8>
        case SIGNAL_RAMP:
            sg->ramp_start = 0.0f;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f04f 0200 	mov.w	r2, #0
 8002a06:	62da      	str	r2, [r3, #44]	@ 0x2c
            sg->ramp_end = 1.0f;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002a0e:	631a      	str	r2, [r3, #48]	@ 0x30
            break;
 8002a10:	e000      	b.n	8002a14 <SIGNAL_init+0xa8>
            break;
 8002a12:	bf00      	nop
    }
}
 8002a14:	bf00      	nop
 8002a16:	370c      	adds	r7, #12
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr
 8002a20:	bf800000 	.word	0xbf800000
 8002a24:	41200000 	.word	0x41200000

08002a28 <SIGNAL_config_sine>:
                        float32_t amplitude,
                        float32_t frequency,
                        float32_t phase,
                        float32_t offset,
                        float32_t min_setpoint,
                        float32_t max_setpoint) {
 8002a28:	b480      	push	{r7}
 8002a2a:	b089      	sub	sp, #36	@ 0x24
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	61f8      	str	r0, [r7, #28]
 8002a30:	ed87 0a06 	vstr	s0, [r7, #24]
 8002a34:	edc7 0a05 	vstr	s1, [r7, #20]
 8002a38:	ed87 1a04 	vstr	s2, [r7, #16]
 8002a3c:	edc7 1a03 	vstr	s3, [r7, #12]
 8002a40:	ed87 2a02 	vstr	s4, [r7, #8]
 8002a44:	edc7 2a01 	vstr	s5, [r7, #4]
    sg->type = SIGNAL_SINE;
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	69ba      	ldr	r2, [r7, #24]
 8002a52:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	697a      	ldr	r2, [r7, #20]
 8002a58:	609a      	str	r2, [r3, #8]
    sg->phase = phase;
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	693a      	ldr	r2, [r7, #16]
 8002a5e:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	68fa      	ldr	r2, [r7, #12]
 8002a64:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	68ba      	ldr	r2, [r7, #8]
 8002a6a:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8002a72:	bf00      	nop
 8002a74:	3724      	adds	r7, #36	@ 0x24
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr

08002a7e <SIGNAL_config_chirp>:
                         float32_t f_start,
                         float32_t f_end,
                         float32_t duration,
                         ChirpType chirp_type,
                         float32_t min_setpoint,
                         float32_t max_setpoint) {
 8002a7e:	b480      	push	{r7}
 8002a80:	b089      	sub	sp, #36	@ 0x24
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	61f8      	str	r0, [r7, #28]
 8002a86:	ed87 0a06 	vstr	s0, [r7, #24]
 8002a8a:	edc7 0a05 	vstr	s1, [r7, #20]
 8002a8e:	ed87 1a04 	vstr	s2, [r7, #16]
 8002a92:	edc7 1a03 	vstr	s3, [r7, #12]
 8002a96:	460b      	mov	r3, r1
 8002a98:	ed87 2a01 	vstr	s4, [r7, #4]
 8002a9c:	edc7 2a00 	vstr	s5, [r7]
 8002aa0:	72fb      	strb	r3, [r7, #11]
    sg->type = SIGNAL_CHIRP;
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	69ba      	ldr	r2, [r7, #24]
 8002aac:	605a      	str	r2, [r3, #4]
    sg->f_start = f_start;
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	697a      	ldr	r2, [r7, #20]
 8002ab2:	619a      	str	r2, [r3, #24]
    sg->f_end = f_end;
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	693a      	ldr	r2, [r7, #16]
 8002ab8:	61da      	str	r2, [r3, #28]
    sg->duration = duration;
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	68fa      	ldr	r2, [r7, #12]
 8002abe:	621a      	str	r2, [r3, #32]
    sg->chirp_type = chirp_type;
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	7afa      	ldrb	r2, [r7, #11]
 8002ac4:	751a      	strb	r2, [r3, #20]
    sg->t = 0.0f;
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	f04f 0200 	mov.w	r2, #0
 8002acc:	625a      	str	r2, [r3, #36]	@ 0x24
    sg->min_setpoint = min_setpoint;
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	683a      	ldr	r2, [r7, #0]
 8002ad8:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8002ada:	bf00      	nop
 8002adc:	3724      	adds	r7, #36	@ 0x24
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr

08002ae6 <SIGNAL_config_square>:
                          float32_t frequency,
                          float32_t duty_cycle,
                          float32_t phase,
                          float32_t offset,
                          float32_t min_setpoint,
                          float32_t max_setpoint) {
 8002ae6:	b480      	push	{r7}
 8002ae8:	b089      	sub	sp, #36	@ 0x24
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	61f8      	str	r0, [r7, #28]
 8002aee:	ed87 0a06 	vstr	s0, [r7, #24]
 8002af2:	edc7 0a05 	vstr	s1, [r7, #20]
 8002af6:	ed87 1a04 	vstr	s2, [r7, #16]
 8002afa:	edc7 1a03 	vstr	s3, [r7, #12]
 8002afe:	ed87 2a02 	vstr	s4, [r7, #8]
 8002b02:	edc7 2a01 	vstr	s5, [r7, #4]
 8002b06:	ed87 3a00 	vstr	s6, [r7]
    sg->type = SIGNAL_SQUARE;
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	2202      	movs	r2, #2
 8002b0e:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	69ba      	ldr	r2, [r7, #24]
 8002b14:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	697a      	ldr	r2, [r7, #20]
 8002b1a:	609a      	str	r2, [r3, #8]
    sg->duty_cycle = duty_cycle;
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	693a      	ldr	r2, [r7, #16]
 8002b20:	629a      	str	r2, [r3, #40]	@ 0x28
    sg->phase = phase;
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	68fa      	ldr	r2, [r7, #12]
 8002b26:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	68ba      	ldr	r2, [r7, #8]
 8002b2c:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	687a      	ldr	r2, [r7, #4]
 8002b32:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	683a      	ldr	r2, [r7, #0]
 8002b38:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8002b3a:	bf00      	nop
 8002b3c:	3724      	adds	r7, #36	@ 0x24
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr

08002b46 <SIGNAL_config_ramp>:
                        float32_t ramp_start,
                        float32_t ramp_end,
                        float32_t phase,
                        float32_t offset,
                        float32_t min_setpoint,
                        float32_t max_setpoint) {
 8002b46:	b480      	push	{r7}
 8002b48:	b08b      	sub	sp, #44	@ 0x2c
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	6278      	str	r0, [r7, #36]	@ 0x24
 8002b4e:	ed87 0a08 	vstr	s0, [r7, #32]
 8002b52:	edc7 0a07 	vstr	s1, [r7, #28]
 8002b56:	ed87 1a06 	vstr	s2, [r7, #24]
 8002b5a:	edc7 1a05 	vstr	s3, [r7, #20]
 8002b5e:	ed87 2a04 	vstr	s4, [r7, #16]
 8002b62:	edc7 2a03 	vstr	s5, [r7, #12]
 8002b66:	ed87 3a02 	vstr	s6, [r7, #8]
 8002b6a:	edc7 3a01 	vstr	s7, [r7, #4]
    sg->type = SIGNAL_RAMP;
 8002b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b70:	2203      	movs	r2, #3
 8002b72:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 8002b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b76:	6a3a      	ldr	r2, [r7, #32]
 8002b78:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 8002b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b7c:	69fa      	ldr	r2, [r7, #28]
 8002b7e:	609a      	str	r2, [r3, #8]
    sg->ramp_start = ramp_start;
 8002b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b82:	69ba      	ldr	r2, [r7, #24]
 8002b84:	62da      	str	r2, [r3, #44]	@ 0x2c
    sg->ramp_end = ramp_end;
 8002b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b88:	697a      	ldr	r2, [r7, #20]
 8002b8a:	631a      	str	r2, [r3, #48]	@ 0x30
    sg->phase = phase;
 8002b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b8e:	693a      	ldr	r2, [r7, #16]
 8002b90:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 8002b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b94:	68fa      	ldr	r2, [r7, #12]
 8002b96:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 8002b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b9a:	68ba      	ldr	r2, [r7, #8]
 8002b9c:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 8002b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8002ba4:	bf00      	nop
 8002ba6:	372c      	adds	r7, #44	@ 0x2c
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr

08002bb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b082      	sub	sp, #8
 8002bb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bb6:	4b0f      	ldr	r3, [pc, #60]	@ (8002bf4 <HAL_MspInit+0x44>)
 8002bb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bba:	4a0e      	ldr	r2, [pc, #56]	@ (8002bf4 <HAL_MspInit+0x44>)
 8002bbc:	f043 0301 	orr.w	r3, r3, #1
 8002bc0:	6613      	str	r3, [r2, #96]	@ 0x60
 8002bc2:	4b0c      	ldr	r3, [pc, #48]	@ (8002bf4 <HAL_MspInit+0x44>)
 8002bc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bc6:	f003 0301 	and.w	r3, r3, #1
 8002bca:	607b      	str	r3, [r7, #4]
 8002bcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bce:	4b09      	ldr	r3, [pc, #36]	@ (8002bf4 <HAL_MspInit+0x44>)
 8002bd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bd2:	4a08      	ldr	r2, [pc, #32]	@ (8002bf4 <HAL_MspInit+0x44>)
 8002bd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bd8:	6593      	str	r3, [r2, #88]	@ 0x58
 8002bda:	4b06      	ldr	r3, [pc, #24]	@ (8002bf4 <HAL_MspInit+0x44>)
 8002bdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002be2:	603b      	str	r3, [r7, #0]
 8002be4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002be6:	f003 f919 	bl	8005e1c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002bea:	bf00      	nop
 8002bec:	3708      	adds	r7, #8
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	40021000 	.word	0x40021000

08002bf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002bfc:	bf00      	nop
 8002bfe:	e7fd      	b.n	8002bfc <NMI_Handler+0x4>

08002c00 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c00:	b480      	push	{r7}
 8002c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c04:	bf00      	nop
 8002c06:	e7fd      	b.n	8002c04 <HardFault_Handler+0x4>

08002c08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c0c:	bf00      	nop
 8002c0e:	e7fd      	b.n	8002c0c <MemManage_Handler+0x4>

08002c10 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c10:	b480      	push	{r7}
 8002c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c14:	bf00      	nop
 8002c16:	e7fd      	b.n	8002c14 <BusFault_Handler+0x4>

08002c18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c1c:	bf00      	nop
 8002c1e:	e7fd      	b.n	8002c1c <UsageFault_Handler+0x4>

08002c20 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c20:	b480      	push	{r7}
 8002c22:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c24:	bf00      	nop
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr

08002c2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c2e:	b480      	push	{r7}
 8002c30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c32:	bf00      	nop
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr

08002c3c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c40:	bf00      	nop
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr

08002c4a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c4a:	b580      	push	{r7, lr}
 8002c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c4e:	f000 fd91 	bl	8003774 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c52:	bf00      	nop
 8002c54:	bd80      	pop	{r7, pc}
	...

08002c58 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002c5c:	4802      	ldr	r0, [pc, #8]	@ (8002c68 <DMA1_Channel1_IRQHandler+0x10>)
 8002c5e:	f002 fd12 	bl	8005686 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002c62:	bf00      	nop
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	200002e8 	.word	0x200002e8

08002c6c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002c70:	4802      	ldr	r0, [pc, #8]	@ (8002c7c <DMA1_Channel2_IRQHandler+0x10>)
 8002c72:	f002 fd08 	bl	8005686 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002c76:	bf00      	nop
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	20001b74 	.word	0x20001b74

08002c80 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002c84:	4802      	ldr	r0, [pc, #8]	@ (8002c90 <DMA1_Channel3_IRQHandler+0x10>)
 8002c86:	f002 fcfe 	bl	8005686 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002c8a:	bf00      	nop
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	20001bd4 	.word	0x20001bd4

08002c94 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002c98:	4802      	ldr	r0, [pc, #8]	@ (8002ca4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8002c9a:	f004 fdbd 	bl	8007818 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002c9e:	bf00      	nop
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	200019dc 	.word	0x200019dc

08002ca8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002cac:	4802      	ldr	r0, [pc, #8]	@ (8002cb8 <TIM2_IRQHandler+0x10>)
 8002cae:	f004 fdb3 	bl	8007818 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002cb2:	bf00      	nop
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	200015e0 	.word	0x200015e0

08002cbc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002cc0:	4802      	ldr	r0, [pc, #8]	@ (8002ccc <USART2_IRQHandler+0x10>)
 8002cc2:	f006 fbf7 	bl	80094b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002cc6:	bf00      	nop
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	20001aa8 	.word	0x20001aa8

08002cd0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002cd4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002cd8:	f002 ffd8 	bl	8005c8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002cdc:	bf00      	nop
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b086      	sub	sp, #24
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ce8:	4a14      	ldr	r2, [pc, #80]	@ (8002d3c <_sbrk+0x5c>)
 8002cea:	4b15      	ldr	r3, [pc, #84]	@ (8002d40 <_sbrk+0x60>)
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002cf4:	4b13      	ldr	r3, [pc, #76]	@ (8002d44 <_sbrk+0x64>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d102      	bne.n	8002d02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002cfc:	4b11      	ldr	r3, [pc, #68]	@ (8002d44 <_sbrk+0x64>)
 8002cfe:	4a12      	ldr	r2, [pc, #72]	@ (8002d48 <_sbrk+0x68>)
 8002d00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d02:	4b10      	ldr	r3, [pc, #64]	@ (8002d44 <_sbrk+0x64>)
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4413      	add	r3, r2
 8002d0a:	693a      	ldr	r2, [r7, #16]
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d207      	bcs.n	8002d20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d10:	f008 f9e0 	bl	800b0d4 <__errno>
 8002d14:	4603      	mov	r3, r0
 8002d16:	220c      	movs	r2, #12
 8002d18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8002d1e:	e009      	b.n	8002d34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d20:	4b08      	ldr	r3, [pc, #32]	@ (8002d44 <_sbrk+0x64>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d26:	4b07      	ldr	r3, [pc, #28]	@ (8002d44 <_sbrk+0x64>)
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4413      	add	r3, r2
 8002d2e:	4a05      	ldr	r2, [pc, #20]	@ (8002d44 <_sbrk+0x64>)
 8002d30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d32:	68fb      	ldr	r3, [r7, #12]
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3718      	adds	r7, #24
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	20020000 	.word	0x20020000
 8002d40:	00000400 	.word	0x00000400
 8002d44:	200015dc 	.word	0x200015dc
 8002d48:	20001d80 	.word	0x20001d80

08002d4c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002d50:	4b06      	ldr	r3, [pc, #24]	@ (8002d6c <SystemInit+0x20>)
 8002d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d56:	4a05      	ldr	r2, [pc, #20]	@ (8002d6c <SystemInit+0x20>)
 8002d58:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002d5c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d60:	bf00      	nop
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop
 8002d6c:	e000ed00 	.word	0xe000ed00

08002d70 <MX_TIM2_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim16;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b088      	sub	sp, #32
 8002d74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d76:	f107 0310 	add.w	r3, r7, #16
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	601a      	str	r2, [r3, #0]
 8002d7e:	605a      	str	r2, [r3, #4]
 8002d80:	609a      	str	r2, [r3, #8]
 8002d82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d84:	1d3b      	adds	r3, r7, #4
 8002d86:	2200      	movs	r2, #0
 8002d88:	601a      	str	r2, [r3, #0]
 8002d8a:	605a      	str	r2, [r3, #4]
 8002d8c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002d8e:	4b1e      	ldr	r3, [pc, #120]	@ (8002e08 <MX_TIM2_Init+0x98>)
 8002d90:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002d94:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 8002d96:	4b1c      	ldr	r3, [pc, #112]	@ (8002e08 <MX_TIM2_Init+0x98>)
 8002d98:	22a9      	movs	r2, #169	@ 0xa9
 8002d9a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d9c:	4b1a      	ldr	r3, [pc, #104]	@ (8002e08 <MX_TIM2_Init+0x98>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8002da2:	4b19      	ldr	r3, [pc, #100]	@ (8002e08 <MX_TIM2_Init+0x98>)
 8002da4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002da8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002daa:	4b17      	ldr	r3, [pc, #92]	@ (8002e08 <MX_TIM2_Init+0x98>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002db0:	4b15      	ldr	r3, [pc, #84]	@ (8002e08 <MX_TIM2_Init+0x98>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002db6:	4814      	ldr	r0, [pc, #80]	@ (8002e08 <MX_TIM2_Init+0x98>)
 8002db8:	f003 ffbc 	bl	8006d34 <HAL_TIM_Base_Init>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d001      	beq.n	8002dc6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002dc2:	f7ff fc5d 	bl	8002680 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002dc6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002dca:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002dcc:	f107 0310 	add.w	r3, r7, #16
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	480d      	ldr	r0, [pc, #52]	@ (8002e08 <MX_TIM2_Init+0x98>)
 8002dd4:	f005 f828 	bl	8007e28 <HAL_TIM_ConfigClockSource>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d001      	beq.n	8002de2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002dde:	f7ff fc4f 	bl	8002680 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002de2:	2300      	movs	r3, #0
 8002de4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002de6:	2300      	movs	r3, #0
 8002de8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002dea:	1d3b      	adds	r3, r7, #4
 8002dec:	4619      	mov	r1, r3
 8002dee:	4806      	ldr	r0, [pc, #24]	@ (8002e08 <MX_TIM2_Init+0x98>)
 8002df0:	f006 f800 	bl	8008df4 <HAL_TIMEx_MasterConfigSynchronization>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d001      	beq.n	8002dfe <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002dfa:	f7ff fc41 	bl	8002680 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002dfe:	bf00      	nop
 8002e00:	3720      	adds	r7, #32
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	200015e0 	.word	0x200015e0

08002e0c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b08c      	sub	sp, #48	@ 0x30
 8002e10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002e12:	f107 030c 	add.w	r3, r7, #12
 8002e16:	2224      	movs	r2, #36	@ 0x24
 8002e18:	2100      	movs	r1, #0
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f008 f942 	bl	800b0a4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e20:	463b      	mov	r3, r7
 8002e22:	2200      	movs	r2, #0
 8002e24:	601a      	str	r2, [r3, #0]
 8002e26:	605a      	str	r2, [r3, #4]
 8002e28:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002e2a:	4b21      	ldr	r3, [pc, #132]	@ (8002eb0 <MX_TIM3_Init+0xa4>)
 8002e2c:	4a21      	ldr	r2, [pc, #132]	@ (8002eb4 <MX_TIM3_Init+0xa8>)
 8002e2e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002e30:	4b1f      	ldr	r3, [pc, #124]	@ (8002eb0 <MX_TIM3_Init+0xa4>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e36:	4b1e      	ldr	r3, [pc, #120]	@ (8002eb0 <MX_TIM3_Init+0xa4>)
 8002e38:	2200      	movs	r2, #0
 8002e3a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002e3c:	4b1c      	ldr	r3, [pc, #112]	@ (8002eb0 <MX_TIM3_Init+0xa4>)
 8002e3e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002e42:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e44:	4b1a      	ldr	r3, [pc, #104]	@ (8002eb0 <MX_TIM3_Init+0xa4>)
 8002e46:	2200      	movs	r2, #0
 8002e48:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e4a:	4b19      	ldr	r3, [pc, #100]	@ (8002eb0 <MX_TIM3_Init+0xa4>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002e50:	2303      	movs	r3, #3
 8002e52:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002e54:	2300      	movs	r3, #0
 8002e56:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002e60:	2300      	movs	r3, #0
 8002e62:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002e64:	2300      	movs	r3, #0
 8002e66:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002e70:	2300      	movs	r3, #0
 8002e72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002e74:	f107 030c 	add.w	r3, r7, #12
 8002e78:	4619      	mov	r1, r3
 8002e7a:	480d      	ldr	r0, [pc, #52]	@ (8002eb0 <MX_TIM3_Init+0xa4>)
 8002e7c:	f004 fb8a 	bl	8007594 <HAL_TIM_Encoder_Init>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d001      	beq.n	8002e8a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8002e86:	f7ff fbfb 	bl	8002680 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002e92:	463b      	mov	r3, r7
 8002e94:	4619      	mov	r1, r3
 8002e96:	4806      	ldr	r0, [pc, #24]	@ (8002eb0 <MX_TIM3_Init+0xa4>)
 8002e98:	f005 ffac 	bl	8008df4 <HAL_TIMEx_MasterConfigSynchronization>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d001      	beq.n	8002ea6 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8002ea2:	f7ff fbed 	bl	8002680 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002ea6:	bf00      	nop
 8002ea8:	3730      	adds	r7, #48	@ 0x30
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	200016ac 	.word	0x200016ac
 8002eb4:	40000400 	.word	0x40000400

08002eb8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b08c      	sub	sp, #48	@ 0x30
 8002ebc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002ebe:	f107 030c 	add.w	r3, r7, #12
 8002ec2:	2224      	movs	r2, #36	@ 0x24
 8002ec4:	2100      	movs	r1, #0
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f008 f8ec 	bl	800b0a4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ecc:	463b      	mov	r3, r7
 8002ece:	2200      	movs	r2, #0
 8002ed0:	601a      	str	r2, [r3, #0]
 8002ed2:	605a      	str	r2, [r3, #4]
 8002ed4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002ed6:	4b21      	ldr	r3, [pc, #132]	@ (8002f5c <MX_TIM4_Init+0xa4>)
 8002ed8:	4a21      	ldr	r2, [pc, #132]	@ (8002f60 <MX_TIM4_Init+0xa8>)
 8002eda:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002edc:	4b1f      	ldr	r3, [pc, #124]	@ (8002f5c <MX_TIM4_Init+0xa4>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ee2:	4b1e      	ldr	r3, [pc, #120]	@ (8002f5c <MX_TIM4_Init+0xa4>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002ee8:	4b1c      	ldr	r3, [pc, #112]	@ (8002f5c <MX_TIM4_Init+0xa4>)
 8002eea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002eee:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ef0:	4b1a      	ldr	r3, [pc, #104]	@ (8002f5c <MX_TIM4_Init+0xa4>)
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ef6:	4b19      	ldr	r3, [pc, #100]	@ (8002f5c <MX_TIM4_Init+0xa4>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002efc:	2303      	movs	r3, #3
 8002efe:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002f00:	2300      	movs	r3, #0
 8002f02:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002f04:	2301      	movs	r3, #1
 8002f06:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002f10:	2300      	movs	r3, #0
 8002f12:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002f14:	2301      	movs	r3, #1
 8002f16:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002f20:	f107 030c 	add.w	r3, r7, #12
 8002f24:	4619      	mov	r1, r3
 8002f26:	480d      	ldr	r0, [pc, #52]	@ (8002f5c <MX_TIM4_Init+0xa4>)
 8002f28:	f004 fb34 	bl	8007594 <HAL_TIM_Encoder_Init>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d001      	beq.n	8002f36 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8002f32:	f7ff fba5 	bl	8002680 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f36:	2300      	movs	r3, #0
 8002f38:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002f3e:	463b      	mov	r3, r7
 8002f40:	4619      	mov	r1, r3
 8002f42:	4806      	ldr	r0, [pc, #24]	@ (8002f5c <MX_TIM4_Init+0xa4>)
 8002f44:	f005 ff56 	bl	8008df4 <HAL_TIMEx_MasterConfigSynchronization>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d001      	beq.n	8002f52 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8002f4e:	f7ff fb97 	bl	8002680 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002f52:	bf00      	nop
 8002f54:	3730      	adds	r7, #48	@ 0x30
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	20001778 	.word	0x20001778
 8002f60:	40000800 	.word	0x40000800

08002f64 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b088      	sub	sp, #32
 8002f68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f6a:	f107 0310 	add.w	r3, r7, #16
 8002f6e:	2200      	movs	r2, #0
 8002f70:	601a      	str	r2, [r3, #0]
 8002f72:	605a      	str	r2, [r3, #4]
 8002f74:	609a      	str	r2, [r3, #8]
 8002f76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f78:	1d3b      	adds	r3, r7, #4
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	601a      	str	r2, [r3, #0]
 8002f7e:	605a      	str	r2, [r3, #4]
 8002f80:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002f82:	4b1d      	ldr	r3, [pc, #116]	@ (8002ff8 <MX_TIM5_Init+0x94>)
 8002f84:	4a1d      	ldr	r2, [pc, #116]	@ (8002ffc <MX_TIM5_Init+0x98>)
 8002f86:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 8002f88:	4b1b      	ldr	r3, [pc, #108]	@ (8002ff8 <MX_TIM5_Init+0x94>)
 8002f8a:	22a9      	movs	r2, #169	@ 0xa9
 8002f8c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f8e:	4b1a      	ldr	r3, [pc, #104]	@ (8002ff8 <MX_TIM5_Init+0x94>)
 8002f90:	2200      	movs	r2, #0
 8002f92:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002f94:	4b18      	ldr	r3, [pc, #96]	@ (8002ff8 <MX_TIM5_Init+0x94>)
 8002f96:	f04f 32ff 	mov.w	r2, #4294967295
 8002f9a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f9c:	4b16      	ldr	r3, [pc, #88]	@ (8002ff8 <MX_TIM5_Init+0x94>)
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fa2:	4b15      	ldr	r3, [pc, #84]	@ (8002ff8 <MX_TIM5_Init+0x94>)
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002fa8:	4813      	ldr	r0, [pc, #76]	@ (8002ff8 <MX_TIM5_Init+0x94>)
 8002faa:	f003 fec3 	bl	8006d34 <HAL_TIM_Base_Init>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d001      	beq.n	8002fb8 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8002fb4:	f7ff fb64 	bl	8002680 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002fb8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002fbc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002fbe:	f107 0310 	add.w	r3, r7, #16
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	480c      	ldr	r0, [pc, #48]	@ (8002ff8 <MX_TIM5_Init+0x94>)
 8002fc6:	f004 ff2f 	bl	8007e28 <HAL_TIM_ConfigClockSource>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d001      	beq.n	8002fd4 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8002fd0:	f7ff fb56 	bl	8002680 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002fdc:	1d3b      	adds	r3, r7, #4
 8002fde:	4619      	mov	r1, r3
 8002fe0:	4805      	ldr	r0, [pc, #20]	@ (8002ff8 <MX_TIM5_Init+0x94>)
 8002fe2:	f005 ff07 	bl	8008df4 <HAL_TIMEx_MasterConfigSynchronization>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d001      	beq.n	8002ff0 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8002fec:	f7ff fb48 	bl	8002680 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002ff0:	bf00      	nop
 8002ff2:	3720      	adds	r7, #32
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	20001844 	.word	0x20001844
 8002ffc:	40000c00 	.word	0x40000c00

08003000 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b09c      	sub	sp, #112	@ 0x70
 8003004:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003006:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800300a:	2200      	movs	r2, #0
 800300c:	601a      	str	r2, [r3, #0]
 800300e:	605a      	str	r2, [r3, #4]
 8003010:	609a      	str	r2, [r3, #8]
 8003012:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003014:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003018:	2200      	movs	r2, #0
 800301a:	601a      	str	r2, [r3, #0]
 800301c:	605a      	str	r2, [r3, #4]
 800301e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003020:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003024:	2200      	movs	r2, #0
 8003026:	601a      	str	r2, [r3, #0]
 8003028:	605a      	str	r2, [r3, #4]
 800302a:	609a      	str	r2, [r3, #8]
 800302c:	60da      	str	r2, [r3, #12]
 800302e:	611a      	str	r2, [r3, #16]
 8003030:	615a      	str	r2, [r3, #20]
 8003032:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003034:	1d3b      	adds	r3, r7, #4
 8003036:	2234      	movs	r2, #52	@ 0x34
 8003038:	2100      	movs	r1, #0
 800303a:	4618      	mov	r0, r3
 800303c:	f008 f832 	bl	800b0a4 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8003040:	4b56      	ldr	r3, [pc, #344]	@ (800319c <MX_TIM8_Init+0x19c>)
 8003042:	4a57      	ldr	r2, [pc, #348]	@ (80031a0 <MX_TIM8_Init+0x1a0>)
 8003044:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8003046:	4b55      	ldr	r3, [pc, #340]	@ (800319c <MX_TIM8_Init+0x19c>)
 8003048:	2200      	movs	r2, #0
 800304a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800304c:	4b53      	ldr	r3, [pc, #332]	@ (800319c <MX_TIM8_Init+0x19c>)
 800304e:	2200      	movs	r2, #0
 8003050:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8003052:	4b52      	ldr	r3, [pc, #328]	@ (800319c <MX_TIM8_Init+0x19c>)
 8003054:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003058:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800305a:	4b50      	ldr	r3, [pc, #320]	@ (800319c <MX_TIM8_Init+0x19c>)
 800305c:	2200      	movs	r2, #0
 800305e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003060:	4b4e      	ldr	r3, [pc, #312]	@ (800319c <MX_TIM8_Init+0x19c>)
 8003062:	2200      	movs	r2, #0
 8003064:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003066:	4b4d      	ldr	r3, [pc, #308]	@ (800319c <MX_TIM8_Init+0x19c>)
 8003068:	2200      	movs	r2, #0
 800306a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800306c:	484b      	ldr	r0, [pc, #300]	@ (800319c <MX_TIM8_Init+0x19c>)
 800306e:	f003 fe61 	bl	8006d34 <HAL_TIM_Base_Init>
 8003072:	4603      	mov	r3, r0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d001      	beq.n	800307c <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8003078:	f7ff fb02 	bl	8002680 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800307c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003080:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8003082:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8003086:	4619      	mov	r1, r3
 8003088:	4844      	ldr	r0, [pc, #272]	@ (800319c <MX_TIM8_Init+0x19c>)
 800308a:	f004 fecd 	bl	8007e28 <HAL_TIM_ConfigClockSource>
 800308e:	4603      	mov	r3, r0
 8003090:	2b00      	cmp	r3, #0
 8003092:	d001      	beq.n	8003098 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8003094:	f7ff faf4 	bl	8002680 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8003098:	4840      	ldr	r0, [pc, #256]	@ (800319c <MX_TIM8_Init+0x19c>)
 800309a:	f004 f805 	bl	80070a8 <HAL_TIM_PWM_Init>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d001      	beq.n	80030a8 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 80030a4:	f7ff faec 	bl	8002680 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 80030a8:	483c      	ldr	r0, [pc, #240]	@ (800319c <MX_TIM8_Init+0x19c>)
 80030aa:	f003 ff8f 	bl	8006fcc <HAL_TIM_OC_Init>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d001      	beq.n	80030b8 <MX_TIM8_Init+0xb8>
  {
    Error_Handler();
 80030b4:	f7ff fae4 	bl	8002680 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030b8:	2300      	movs	r3, #0
 80030ba:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80030bc:	2300      	movs	r3, #0
 80030be:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030c0:	2300      	movs	r3, #0
 80030c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80030c4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80030c8:	4619      	mov	r1, r3
 80030ca:	4834      	ldr	r0, [pc, #208]	@ (800319c <MX_TIM8_Init+0x19c>)
 80030cc:	f005 fe92 	bl	8008df4 <HAL_TIMEx_MasterConfigSynchronization>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d001      	beq.n	80030da <MX_TIM8_Init+0xda>
  {
    Error_Handler();
 80030d6:	f7ff fad3 	bl	8002680 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80030da:	2360      	movs	r3, #96	@ 0x60
 80030dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80030de:	2300      	movs	r3, #0
 80030e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80030e2:	2300      	movs	r3, #0
 80030e4:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80030e6:	2300      	movs	r3, #0
 80030e8:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80030ea:	2300      	movs	r3, #0
 80030ec:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80030ee:	2300      	movs	r3, #0
 80030f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80030f2:	2300      	movs	r3, #0
 80030f4:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80030f6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80030fa:	2200      	movs	r2, #0
 80030fc:	4619      	mov	r1, r3
 80030fe:	4827      	ldr	r0, [pc, #156]	@ (800319c <MX_TIM8_Init+0x19c>)
 8003100:	f004 fd7e 	bl	8007c00 <HAL_TIM_PWM_ConfigChannel>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d001      	beq.n	800310e <MX_TIM8_Init+0x10e>
  {
    Error_Handler();
 800310a:	f7ff fab9 	bl	8002680 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800310e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003112:	2204      	movs	r2, #4
 8003114:	4619      	mov	r1, r3
 8003116:	4821      	ldr	r0, [pc, #132]	@ (800319c <MX_TIM8_Init+0x19c>)
 8003118:	f004 fd72 	bl	8007c00 <HAL_TIM_PWM_ConfigChannel>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d001      	beq.n	8003126 <MX_TIM8_Init+0x126>
  {
    Error_Handler();
 8003122:	f7ff faad 	bl	8002680 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8003126:	2300      	movs	r3, #0
 8003128:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800312a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800312e:	2208      	movs	r2, #8
 8003130:	4619      	mov	r1, r3
 8003132:	481a      	ldr	r0, [pc, #104]	@ (800319c <MX_TIM8_Init+0x19c>)
 8003134:	f004 fcea 	bl	8007b0c <HAL_TIM_OC_ConfigChannel>
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d001      	beq.n	8003142 <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 800313e:	f7ff fa9f 	bl	8002680 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003142:	2300      	movs	r3, #0
 8003144:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003146:	2300      	movs	r3, #0
 8003148:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800314a:	2300      	movs	r3, #0
 800314c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800314e:	2300      	movs	r3, #0
 8003150:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003152:	2300      	movs	r3, #0
 8003154:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003156:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800315a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800315c:	2300      	movs	r3, #0
 800315e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8003160:	2300      	movs	r3, #0
 8003162:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003164:	2300      	movs	r3, #0
 8003166:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003168:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800316c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800316e:	2300      	movs	r3, #0
 8003170:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8003172:	2300      	movs	r3, #0
 8003174:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003176:	2300      	movs	r3, #0
 8003178:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800317a:	1d3b      	adds	r3, r7, #4
 800317c:	4619      	mov	r1, r3
 800317e:	4807      	ldr	r0, [pc, #28]	@ (800319c <MX_TIM8_Init+0x19c>)
 8003180:	f005 fece 	bl	8008f20 <HAL_TIMEx_ConfigBreakDeadTime>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d001      	beq.n	800318e <MX_TIM8_Init+0x18e>
  {
    Error_Handler();
 800318a:	f7ff fa79 	bl	8002680 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800318e:	4803      	ldr	r0, [pc, #12]	@ (800319c <MX_TIM8_Init+0x19c>)
 8003190:	f000 f914 	bl	80033bc <HAL_TIM_MspPostInit>

}
 8003194:	bf00      	nop
 8003196:	3770      	adds	r7, #112	@ 0x70
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}
 800319c:	20001910 	.word	0x20001910
 80031a0:	40013400 	.word	0x40013400

080031a4 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80031a8:	4b14      	ldr	r3, [pc, #80]	@ (80031fc <MX_TIM16_Init+0x58>)
 80031aa:	4a15      	ldr	r2, [pc, #84]	@ (8003200 <MX_TIM16_Init+0x5c>)
 80031ac:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 80031ae:	4b13      	ldr	r3, [pc, #76]	@ (80031fc <MX_TIM16_Init+0x58>)
 80031b0:	22a9      	movs	r2, #169	@ 0xa9
 80031b2:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031b4:	4b11      	ldr	r3, [pc, #68]	@ (80031fc <MX_TIM16_Init+0x58>)
 80031b6:	2200      	movs	r2, #0
 80031b8:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1145;
 80031ba:	4b10      	ldr	r3, [pc, #64]	@ (80031fc <MX_TIM16_Init+0x58>)
 80031bc:	f240 4279 	movw	r2, #1145	@ 0x479
 80031c0:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031c2:	4b0e      	ldr	r3, [pc, #56]	@ (80031fc <MX_TIM16_Init+0x58>)
 80031c4:	2200      	movs	r2, #0
 80031c6:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80031c8:	4b0c      	ldr	r3, [pc, #48]	@ (80031fc <MX_TIM16_Init+0x58>)
 80031ca:	2200      	movs	r2, #0
 80031cc:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031ce:	4b0b      	ldr	r3, [pc, #44]	@ (80031fc <MX_TIM16_Init+0x58>)
 80031d0:	2200      	movs	r2, #0
 80031d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80031d4:	4809      	ldr	r0, [pc, #36]	@ (80031fc <MX_TIM16_Init+0x58>)
 80031d6:	f003 fdad 	bl	8006d34 <HAL_TIM_Base_Init>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d001      	beq.n	80031e4 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80031e0:	f7ff fa4e 	bl	8002680 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 80031e4:	2108      	movs	r1, #8
 80031e6:	4805      	ldr	r0, [pc, #20]	@ (80031fc <MX_TIM16_Init+0x58>)
 80031e8:	f004 f8de 	bl	80073a8 <HAL_TIM_OnePulse_Init>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d001      	beq.n	80031f6 <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 80031f2:	f7ff fa45 	bl	8002680 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80031f6:	bf00      	nop
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	200019dc 	.word	0x200019dc
 8003200:	40014400 	.word	0x40014400

08003204 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b086      	sub	sp, #24
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003214:	d114      	bne.n	8003240 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003216:	4b2b      	ldr	r3, [pc, #172]	@ (80032c4 <HAL_TIM_Base_MspInit+0xc0>)
 8003218:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800321a:	4a2a      	ldr	r2, [pc, #168]	@ (80032c4 <HAL_TIM_Base_MspInit+0xc0>)
 800321c:	f043 0301 	orr.w	r3, r3, #1
 8003220:	6593      	str	r3, [r2, #88]	@ 0x58
 8003222:	4b28      	ldr	r3, [pc, #160]	@ (80032c4 <HAL_TIM_Base_MspInit+0xc0>)
 8003224:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003226:	f003 0301 	and.w	r3, r3, #1
 800322a:	617b      	str	r3, [r7, #20]
 800322c:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800322e:	2200      	movs	r2, #0
 8003230:	2100      	movs	r1, #0
 8003232:	201c      	movs	r0, #28
 8003234:	f002 f80f 	bl	8005256 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003238:	201c      	movs	r0, #28
 800323a:	f002 f826 	bl	800528a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 800323e:	e03c      	b.n	80032ba <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM5)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a20      	ldr	r2, [pc, #128]	@ (80032c8 <HAL_TIM_Base_MspInit+0xc4>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d10c      	bne.n	8003264 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800324a:	4b1e      	ldr	r3, [pc, #120]	@ (80032c4 <HAL_TIM_Base_MspInit+0xc0>)
 800324c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800324e:	4a1d      	ldr	r2, [pc, #116]	@ (80032c4 <HAL_TIM_Base_MspInit+0xc0>)
 8003250:	f043 0308 	orr.w	r3, r3, #8
 8003254:	6593      	str	r3, [r2, #88]	@ 0x58
 8003256:	4b1b      	ldr	r3, [pc, #108]	@ (80032c4 <HAL_TIM_Base_MspInit+0xc0>)
 8003258:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800325a:	f003 0308 	and.w	r3, r3, #8
 800325e:	613b      	str	r3, [r7, #16]
 8003260:	693b      	ldr	r3, [r7, #16]
}
 8003262:	e02a      	b.n	80032ba <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM8)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a18      	ldr	r2, [pc, #96]	@ (80032cc <HAL_TIM_Base_MspInit+0xc8>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d10c      	bne.n	8003288 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800326e:	4b15      	ldr	r3, [pc, #84]	@ (80032c4 <HAL_TIM_Base_MspInit+0xc0>)
 8003270:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003272:	4a14      	ldr	r2, [pc, #80]	@ (80032c4 <HAL_TIM_Base_MspInit+0xc0>)
 8003274:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003278:	6613      	str	r3, [r2, #96]	@ 0x60
 800327a:	4b12      	ldr	r3, [pc, #72]	@ (80032c4 <HAL_TIM_Base_MspInit+0xc0>)
 800327c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800327e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003282:	60fb      	str	r3, [r7, #12]
 8003284:	68fb      	ldr	r3, [r7, #12]
}
 8003286:	e018      	b.n	80032ba <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM16)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a10      	ldr	r2, [pc, #64]	@ (80032d0 <HAL_TIM_Base_MspInit+0xcc>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d113      	bne.n	80032ba <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003292:	4b0c      	ldr	r3, [pc, #48]	@ (80032c4 <HAL_TIM_Base_MspInit+0xc0>)
 8003294:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003296:	4a0b      	ldr	r2, [pc, #44]	@ (80032c4 <HAL_TIM_Base_MspInit+0xc0>)
 8003298:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800329c:	6613      	str	r3, [r2, #96]	@ 0x60
 800329e:	4b09      	ldr	r3, [pc, #36]	@ (80032c4 <HAL_TIM_Base_MspInit+0xc0>)
 80032a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032a6:	60bb      	str	r3, [r7, #8]
 80032a8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80032aa:	2200      	movs	r2, #0
 80032ac:	2100      	movs	r1, #0
 80032ae:	2019      	movs	r0, #25
 80032b0:	f001 ffd1 	bl	8005256 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80032b4:	2019      	movs	r0, #25
 80032b6:	f001 ffe8 	bl	800528a <HAL_NVIC_EnableIRQ>
}
 80032ba:	bf00      	nop
 80032bc:	3718      	adds	r7, #24
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	bf00      	nop
 80032c4:	40021000 	.word	0x40021000
 80032c8:	40000c00 	.word	0x40000c00
 80032cc:	40013400 	.word	0x40013400
 80032d0:	40014400 	.word	0x40014400

080032d4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b08c      	sub	sp, #48	@ 0x30
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032dc:	f107 031c 	add.w	r3, r7, #28
 80032e0:	2200      	movs	r2, #0
 80032e2:	601a      	str	r2, [r3, #0]
 80032e4:	605a      	str	r2, [r3, #4]
 80032e6:	609a      	str	r2, [r3, #8]
 80032e8:	60da      	str	r2, [r3, #12]
 80032ea:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a2f      	ldr	r2, [pc, #188]	@ (80033b0 <HAL_TIM_Encoder_MspInit+0xdc>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d129      	bne.n	800334a <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80032f6:	4b2f      	ldr	r3, [pc, #188]	@ (80033b4 <HAL_TIM_Encoder_MspInit+0xe0>)
 80032f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032fa:	4a2e      	ldr	r2, [pc, #184]	@ (80033b4 <HAL_TIM_Encoder_MspInit+0xe0>)
 80032fc:	f043 0302 	orr.w	r3, r3, #2
 8003300:	6593      	str	r3, [r2, #88]	@ 0x58
 8003302:	4b2c      	ldr	r3, [pc, #176]	@ (80033b4 <HAL_TIM_Encoder_MspInit+0xe0>)
 8003304:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003306:	f003 0302 	and.w	r3, r3, #2
 800330a:	61bb      	str	r3, [r7, #24]
 800330c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800330e:	4b29      	ldr	r3, [pc, #164]	@ (80033b4 <HAL_TIM_Encoder_MspInit+0xe0>)
 8003310:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003312:	4a28      	ldr	r2, [pc, #160]	@ (80033b4 <HAL_TIM_Encoder_MspInit+0xe0>)
 8003314:	f043 0301 	orr.w	r3, r3, #1
 8003318:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800331a:	4b26      	ldr	r3, [pc, #152]	@ (80033b4 <HAL_TIM_Encoder_MspInit+0xe0>)
 800331c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800331e:	f003 0301 	and.w	r3, r3, #1
 8003322:	617b      	str	r3, [r7, #20]
 8003324:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003326:	23c0      	movs	r3, #192	@ 0xc0
 8003328:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800332a:	2302      	movs	r3, #2
 800332c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800332e:	2300      	movs	r3, #0
 8003330:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003332:	2300      	movs	r3, #0
 8003334:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003336:	2302      	movs	r3, #2
 8003338:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800333a:	f107 031c 	add.w	r3, r7, #28
 800333e:	4619      	mov	r1, r3
 8003340:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003344:	f002 faee 	bl	8005924 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8003348:	e02e      	b.n	80033a8 <HAL_TIM_Encoder_MspInit+0xd4>
  else if(tim_encoderHandle->Instance==TIM4)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a1a      	ldr	r2, [pc, #104]	@ (80033b8 <HAL_TIM_Encoder_MspInit+0xe4>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d129      	bne.n	80033a8 <HAL_TIM_Encoder_MspInit+0xd4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003354:	4b17      	ldr	r3, [pc, #92]	@ (80033b4 <HAL_TIM_Encoder_MspInit+0xe0>)
 8003356:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003358:	4a16      	ldr	r2, [pc, #88]	@ (80033b4 <HAL_TIM_Encoder_MspInit+0xe0>)
 800335a:	f043 0304 	orr.w	r3, r3, #4
 800335e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003360:	4b14      	ldr	r3, [pc, #80]	@ (80033b4 <HAL_TIM_Encoder_MspInit+0xe0>)
 8003362:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003364:	f003 0304 	and.w	r3, r3, #4
 8003368:	613b      	str	r3, [r7, #16]
 800336a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800336c:	4b11      	ldr	r3, [pc, #68]	@ (80033b4 <HAL_TIM_Encoder_MspInit+0xe0>)
 800336e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003370:	4a10      	ldr	r2, [pc, #64]	@ (80033b4 <HAL_TIM_Encoder_MspInit+0xe0>)
 8003372:	f043 0301 	orr.w	r3, r3, #1
 8003376:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003378:	4b0e      	ldr	r3, [pc, #56]	@ (80033b4 <HAL_TIM_Encoder_MspInit+0xe0>)
 800337a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800337c:	f003 0301 	and.w	r3, r3, #1
 8003380:	60fb      	str	r3, [r7, #12]
 8003382:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003384:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8003388:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800338a:	2302      	movs	r3, #2
 800338c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800338e:	2300      	movs	r3, #0
 8003390:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003392:	2300      	movs	r3, #0
 8003394:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8003396:	230a      	movs	r3, #10
 8003398:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800339a:	f107 031c 	add.w	r3, r7, #28
 800339e:	4619      	mov	r1, r3
 80033a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80033a4:	f002 fabe 	bl	8005924 <HAL_GPIO_Init>
}
 80033a8:	bf00      	nop
 80033aa:	3730      	adds	r7, #48	@ 0x30
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	40000400 	.word	0x40000400
 80033b4:	40021000 	.word	0x40021000
 80033b8:	40000800 	.word	0x40000800

080033bc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b08a      	sub	sp, #40	@ 0x28
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033c4:	f107 0314 	add.w	r3, r7, #20
 80033c8:	2200      	movs	r2, #0
 80033ca:	601a      	str	r2, [r3, #0]
 80033cc:	605a      	str	r2, [r3, #4]
 80033ce:	609a      	str	r2, [r3, #8]
 80033d0:	60da      	str	r2, [r3, #12]
 80033d2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a1f      	ldr	r2, [pc, #124]	@ (8003458 <HAL_TIM_MspPostInit+0x9c>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d138      	bne.n	8003450 <HAL_TIM_MspPostInit+0x94>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80033de:	4b1f      	ldr	r3, [pc, #124]	@ (800345c <HAL_TIM_MspPostInit+0xa0>)
 80033e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033e2:	4a1e      	ldr	r2, [pc, #120]	@ (800345c <HAL_TIM_MspPostInit+0xa0>)
 80033e4:	f043 0304 	orr.w	r3, r3, #4
 80033e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80033ea:	4b1c      	ldr	r3, [pc, #112]	@ (800345c <HAL_TIM_MspPostInit+0xa0>)
 80033ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033ee:	f003 0304 	and.w	r3, r3, #4
 80033f2:	613b      	str	r3, [r7, #16]
 80033f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033f6:	4b19      	ldr	r3, [pc, #100]	@ (800345c <HAL_TIM_MspPostInit+0xa0>)
 80033f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033fa:	4a18      	ldr	r2, [pc, #96]	@ (800345c <HAL_TIM_MspPostInit+0xa0>)
 80033fc:	f043 0302 	orr.w	r3, r3, #2
 8003400:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003402:	4b16      	ldr	r3, [pc, #88]	@ (800345c <HAL_TIM_MspPostInit+0xa0>)
 8003404:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003406:	f003 0302 	and.w	r3, r3, #2
 800340a:	60fb      	str	r3, [r7, #12]
 800340c:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    PB9     ------> TIM8_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800340e:	23c0      	movs	r3, #192	@ 0xc0
 8003410:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003412:	2302      	movs	r3, #2
 8003414:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003416:	2300      	movs	r3, #0
 8003418:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800341a:	2300      	movs	r3, #0
 800341c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 800341e:	2304      	movs	r3, #4
 8003420:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003422:	f107 0314 	add.w	r3, r7, #20
 8003426:	4619      	mov	r1, r3
 8003428:	480d      	ldr	r0, [pc, #52]	@ (8003460 <HAL_TIM_MspPostInit+0xa4>)
 800342a:	f002 fa7b 	bl	8005924 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800342e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003432:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003434:	2302      	movs	r3, #2
 8003436:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003438:	2300      	movs	r3, #0
 800343a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800343c:	2300      	movs	r3, #0
 800343e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 8003440:	230a      	movs	r3, #10
 8003442:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003444:	f107 0314 	add.w	r3, r7, #20
 8003448:	4619      	mov	r1, r3
 800344a:	4806      	ldr	r0, [pc, #24]	@ (8003464 <HAL_TIM_MspPostInit+0xa8>)
 800344c:	f002 fa6a 	bl	8005924 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8003450:	bf00      	nop
 8003452:	3728      	adds	r7, #40	@ 0x28
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}
 8003458:	40013400 	.word	0x40013400
 800345c:	40021000 	.word	0x40021000
 8003460:	48000800 	.word	0x48000800
 8003464:	48000400 	.word	0x48000400

08003468 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800346c:	4b23      	ldr	r3, [pc, #140]	@ (80034fc <MX_USART2_UART_Init+0x94>)
 800346e:	4a24      	ldr	r2, [pc, #144]	@ (8003500 <MX_USART2_UART_Init+0x98>)
 8003470:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8003472:	4b22      	ldr	r3, [pc, #136]	@ (80034fc <MX_USART2_UART_Init+0x94>)
 8003474:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8003478:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800347a:	4b20      	ldr	r3, [pc, #128]	@ (80034fc <MX_USART2_UART_Init+0x94>)
 800347c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003480:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003482:	4b1e      	ldr	r3, [pc, #120]	@ (80034fc <MX_USART2_UART_Init+0x94>)
 8003484:	2200      	movs	r2, #0
 8003486:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8003488:	4b1c      	ldr	r3, [pc, #112]	@ (80034fc <MX_USART2_UART_Init+0x94>)
 800348a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800348e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003490:	4b1a      	ldr	r3, [pc, #104]	@ (80034fc <MX_USART2_UART_Init+0x94>)
 8003492:	220c      	movs	r2, #12
 8003494:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003496:	4b19      	ldr	r3, [pc, #100]	@ (80034fc <MX_USART2_UART_Init+0x94>)
 8003498:	2200      	movs	r2, #0
 800349a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800349c:	4b17      	ldr	r3, [pc, #92]	@ (80034fc <MX_USART2_UART_Init+0x94>)
 800349e:	2200      	movs	r2, #0
 80034a0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80034a2:	4b16      	ldr	r3, [pc, #88]	@ (80034fc <MX_USART2_UART_Init+0x94>)
 80034a4:	2200      	movs	r2, #0
 80034a6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80034a8:	4b14      	ldr	r3, [pc, #80]	@ (80034fc <MX_USART2_UART_Init+0x94>)
 80034aa:	2200      	movs	r2, #0
 80034ac:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80034ae:	4b13      	ldr	r3, [pc, #76]	@ (80034fc <MX_USART2_UART_Init+0x94>)
 80034b0:	2200      	movs	r2, #0
 80034b2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80034b4:	4811      	ldr	r0, [pc, #68]	@ (80034fc <MX_USART2_UART_Init+0x94>)
 80034b6:	f005 fe17 	bl	80090e8 <HAL_UART_Init>
 80034ba:	4603      	mov	r3, r0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d001      	beq.n	80034c4 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 80034c0:	f7ff f8de 	bl	8002680 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80034c4:	2100      	movs	r1, #0
 80034c6:	480d      	ldr	r0, [pc, #52]	@ (80034fc <MX_USART2_UART_Init+0x94>)
 80034c8:	f007 fc53 	bl	800ad72 <HAL_UARTEx_SetTxFifoThreshold>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d001      	beq.n	80034d6 <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 80034d2:	f7ff f8d5 	bl	8002680 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80034d6:	2100      	movs	r1, #0
 80034d8:	4808      	ldr	r0, [pc, #32]	@ (80034fc <MX_USART2_UART_Init+0x94>)
 80034da:	f007 fc88 	bl	800adee <HAL_UARTEx_SetRxFifoThreshold>
 80034de:	4603      	mov	r3, r0
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d001      	beq.n	80034e8 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 80034e4:	f7ff f8cc 	bl	8002680 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80034e8:	4804      	ldr	r0, [pc, #16]	@ (80034fc <MX_USART2_UART_Init+0x94>)
 80034ea:	f007 fc09 	bl	800ad00 <HAL_UARTEx_DisableFifoMode>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d001      	beq.n	80034f8 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 80034f4:	f7ff f8c4 	bl	8002680 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80034f8:	bf00      	nop
 80034fa:	bd80      	pop	{r7, pc}
 80034fc:	20001aa8 	.word	0x20001aa8
 8003500:	40004400 	.word	0x40004400

08003504 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b09e      	sub	sp, #120	@ 0x78
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800350c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003510:	2200      	movs	r2, #0
 8003512:	601a      	str	r2, [r3, #0]
 8003514:	605a      	str	r2, [r3, #4]
 8003516:	609a      	str	r2, [r3, #8]
 8003518:	60da      	str	r2, [r3, #12]
 800351a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800351c:	f107 0310 	add.w	r3, r7, #16
 8003520:	2254      	movs	r2, #84	@ 0x54
 8003522:	2100      	movs	r1, #0
 8003524:	4618      	mov	r0, r3
 8003526:	f007 fdbd 	bl	800b0a4 <memset>
  if(uartHandle->Instance==USART2)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a4d      	ldr	r2, [pc, #308]	@ (8003664 <HAL_UART_MspInit+0x160>)
 8003530:	4293      	cmp	r3, r2
 8003532:	f040 8092 	bne.w	800365a <HAL_UART_MspInit+0x156>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003536:	2302      	movs	r3, #2
 8003538:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800353a:	2300      	movs	r3, #0
 800353c:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800353e:	f107 0310 	add.w	r3, r7, #16
 8003542:	4618      	mov	r0, r3
 8003544:	f003 f9a8 	bl	8006898 <HAL_RCCEx_PeriphCLKConfig>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d001      	beq.n	8003552 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800354e:	f7ff f897 	bl	8002680 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003552:	4b45      	ldr	r3, [pc, #276]	@ (8003668 <HAL_UART_MspInit+0x164>)
 8003554:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003556:	4a44      	ldr	r2, [pc, #272]	@ (8003668 <HAL_UART_MspInit+0x164>)
 8003558:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800355c:	6593      	str	r3, [r2, #88]	@ 0x58
 800355e:	4b42      	ldr	r3, [pc, #264]	@ (8003668 <HAL_UART_MspInit+0x164>)
 8003560:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003562:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003566:	60fb      	str	r3, [r7, #12]
 8003568:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800356a:	4b3f      	ldr	r3, [pc, #252]	@ (8003668 <HAL_UART_MspInit+0x164>)
 800356c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800356e:	4a3e      	ldr	r2, [pc, #248]	@ (8003668 <HAL_UART_MspInit+0x164>)
 8003570:	f043 0301 	orr.w	r3, r3, #1
 8003574:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003576:	4b3c      	ldr	r3, [pc, #240]	@ (8003668 <HAL_UART_MspInit+0x164>)
 8003578:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800357a:	f003 0301 	and.w	r3, r3, #1
 800357e:	60bb      	str	r3, [r7, #8]
 8003580:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003582:	230c      	movs	r3, #12
 8003584:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003586:	2302      	movs	r3, #2
 8003588:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800358a:	2300      	movs	r3, #0
 800358c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800358e:	2300      	movs	r3, #0
 8003590:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003592:	2307      	movs	r3, #7
 8003594:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003596:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800359a:	4619      	mov	r1, r3
 800359c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80035a0:	f002 f9c0 	bl	8005924 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel2;
 80035a4:	4b31      	ldr	r3, [pc, #196]	@ (800366c <HAL_UART_MspInit+0x168>)
 80035a6:	4a32      	ldr	r2, [pc, #200]	@ (8003670 <HAL_UART_MspInit+0x16c>)
 80035a8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80035aa:	4b30      	ldr	r3, [pc, #192]	@ (800366c <HAL_UART_MspInit+0x168>)
 80035ac:	221a      	movs	r2, #26
 80035ae:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80035b0:	4b2e      	ldr	r3, [pc, #184]	@ (800366c <HAL_UART_MspInit+0x168>)
 80035b2:	2200      	movs	r2, #0
 80035b4:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80035b6:	4b2d      	ldr	r3, [pc, #180]	@ (800366c <HAL_UART_MspInit+0x168>)
 80035b8:	2200      	movs	r2, #0
 80035ba:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80035bc:	4b2b      	ldr	r3, [pc, #172]	@ (800366c <HAL_UART_MspInit+0x168>)
 80035be:	2280      	movs	r2, #128	@ 0x80
 80035c0:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80035c2:	4b2a      	ldr	r3, [pc, #168]	@ (800366c <HAL_UART_MspInit+0x168>)
 80035c4:	2200      	movs	r2, #0
 80035c6:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80035c8:	4b28      	ldr	r3, [pc, #160]	@ (800366c <HAL_UART_MspInit+0x168>)
 80035ca:	2200      	movs	r2, #0
 80035cc:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80035ce:	4b27      	ldr	r3, [pc, #156]	@ (800366c <HAL_UART_MspInit+0x168>)
 80035d0:	2200      	movs	r2, #0
 80035d2:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80035d4:	4b25      	ldr	r3, [pc, #148]	@ (800366c <HAL_UART_MspInit+0x168>)
 80035d6:	2200      	movs	r2, #0
 80035d8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80035da:	4824      	ldr	r0, [pc, #144]	@ (800366c <HAL_UART_MspInit+0x168>)
 80035dc:	f001 fe70 	bl	80052c0 <HAL_DMA_Init>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d001      	beq.n	80035ea <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 80035e6:	f7ff f84b 	bl	8002680 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a1f      	ldr	r2, [pc, #124]	@ (800366c <HAL_UART_MspInit+0x168>)
 80035ee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80035f2:	4a1e      	ldr	r2, [pc, #120]	@ (800366c <HAL_UART_MspInit+0x168>)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel3;
 80035f8:	4b1e      	ldr	r3, [pc, #120]	@ (8003674 <HAL_UART_MspInit+0x170>)
 80035fa:	4a1f      	ldr	r2, [pc, #124]	@ (8003678 <HAL_UART_MspInit+0x174>)
 80035fc:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80035fe:	4b1d      	ldr	r3, [pc, #116]	@ (8003674 <HAL_UART_MspInit+0x170>)
 8003600:	221b      	movs	r2, #27
 8003602:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003604:	4b1b      	ldr	r3, [pc, #108]	@ (8003674 <HAL_UART_MspInit+0x170>)
 8003606:	2210      	movs	r2, #16
 8003608:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800360a:	4b1a      	ldr	r3, [pc, #104]	@ (8003674 <HAL_UART_MspInit+0x170>)
 800360c:	2200      	movs	r2, #0
 800360e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003610:	4b18      	ldr	r3, [pc, #96]	@ (8003674 <HAL_UART_MspInit+0x170>)
 8003612:	2280      	movs	r2, #128	@ 0x80
 8003614:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003616:	4b17      	ldr	r3, [pc, #92]	@ (8003674 <HAL_UART_MspInit+0x170>)
 8003618:	2200      	movs	r2, #0
 800361a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800361c:	4b15      	ldr	r3, [pc, #84]	@ (8003674 <HAL_UART_MspInit+0x170>)
 800361e:	2200      	movs	r2, #0
 8003620:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003622:	4b14      	ldr	r3, [pc, #80]	@ (8003674 <HAL_UART_MspInit+0x170>)
 8003624:	2200      	movs	r2, #0
 8003626:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003628:	4b12      	ldr	r3, [pc, #72]	@ (8003674 <HAL_UART_MspInit+0x170>)
 800362a:	2200      	movs	r2, #0
 800362c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800362e:	4811      	ldr	r0, [pc, #68]	@ (8003674 <HAL_UART_MspInit+0x170>)
 8003630:	f001 fe46 	bl	80052c0 <HAL_DMA_Init>
 8003634:	4603      	mov	r3, r0
 8003636:	2b00      	cmp	r3, #0
 8003638:	d001      	beq.n	800363e <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 800363a:	f7ff f821 	bl	8002680 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4a0c      	ldr	r2, [pc, #48]	@ (8003674 <HAL_UART_MspInit+0x170>)
 8003642:	67da      	str	r2, [r3, #124]	@ 0x7c
 8003644:	4a0b      	ldr	r2, [pc, #44]	@ (8003674 <HAL_UART_MspInit+0x170>)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800364a:	2200      	movs	r2, #0
 800364c:	2100      	movs	r1, #0
 800364e:	2026      	movs	r0, #38	@ 0x26
 8003650:	f001 fe01 	bl	8005256 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003654:	2026      	movs	r0, #38	@ 0x26
 8003656:	f001 fe18 	bl	800528a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800365a:	bf00      	nop
 800365c:	3778      	adds	r7, #120	@ 0x78
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	40004400 	.word	0x40004400
 8003668:	40021000 	.word	0x40021000
 800366c:	20001b74 	.word	0x20001b74
 8003670:	4002001c 	.word	0x4002001c
 8003674:	20001bd4 	.word	0x20001bd4
 8003678:	40020030 	.word	0x40020030

0800367c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800367c:	480d      	ldr	r0, [pc, #52]	@ (80036b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800367e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003680:	f7ff fb64 	bl	8002d4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003684:	480c      	ldr	r0, [pc, #48]	@ (80036b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8003686:	490d      	ldr	r1, [pc, #52]	@ (80036bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8003688:	4a0d      	ldr	r2, [pc, #52]	@ (80036c0 <LoopForever+0xe>)
  movs r3, #0
 800368a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800368c:	e002      	b.n	8003694 <LoopCopyDataInit>

0800368e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800368e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003690:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003692:	3304      	adds	r3, #4

08003694 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003694:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003696:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003698:	d3f9      	bcc.n	800368e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800369a:	4a0a      	ldr	r2, [pc, #40]	@ (80036c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800369c:	4c0a      	ldr	r4, [pc, #40]	@ (80036c8 <LoopForever+0x16>)
  movs r3, #0
 800369e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80036a0:	e001      	b.n	80036a6 <LoopFillZerobss>

080036a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80036a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80036a4:	3204      	adds	r2, #4

080036a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80036a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80036a8:	d3fb      	bcc.n	80036a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80036aa:	f007 fd19 	bl	800b0e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80036ae:	f7fe fe8f 	bl	80023d0 <main>

080036b2 <LoopForever>:

LoopForever:
    b LoopForever
 80036b2:	e7fe      	b.n	80036b2 <LoopForever>
  ldr   r0, =_estack
 80036b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80036b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80036bc:	2000025c 	.word	0x2000025c
  ldr r2, =_sidata
 80036c0:	0800c0f8 	.word	0x0800c0f8
  ldr r2, =_sbss
 80036c4:	2000025c 	.word	0x2000025c
  ldr r4, =_ebss
 80036c8:	20001d80 	.word	0x20001d80

080036cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80036cc:	e7fe      	b.n	80036cc <ADC1_2_IRQHandler>

080036ce <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80036ce:	b580      	push	{r7, lr}
 80036d0:	b082      	sub	sp, #8
 80036d2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80036d4:	2300      	movs	r3, #0
 80036d6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036d8:	2003      	movs	r0, #3
 80036da:	f001 fdb1 	bl	8005240 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80036de:	2000      	movs	r0, #0
 80036e0:	f000 f80e 	bl	8003700 <HAL_InitTick>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d002      	beq.n	80036f0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	71fb      	strb	r3, [r7, #7]
 80036ee:	e001      	b.n	80036f4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80036f0:	f7ff fa5e 	bl	8002bb0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80036f4:	79fb      	ldrb	r3, [r7, #7]

}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3708      	adds	r7, #8
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
	...

08003700 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b084      	sub	sp, #16
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003708:	2300      	movs	r3, #0
 800370a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800370c:	4b16      	ldr	r3, [pc, #88]	@ (8003768 <HAL_InitTick+0x68>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d022      	beq.n	800375a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003714:	4b15      	ldr	r3, [pc, #84]	@ (800376c <HAL_InitTick+0x6c>)
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	4b13      	ldr	r3, [pc, #76]	@ (8003768 <HAL_InitTick+0x68>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003720:	fbb1 f3f3 	udiv	r3, r1, r3
 8003724:	fbb2 f3f3 	udiv	r3, r2, r3
 8003728:	4618      	mov	r0, r3
 800372a:	f001 fdbc 	bl	80052a6 <HAL_SYSTICK_Config>
 800372e:	4603      	mov	r3, r0
 8003730:	2b00      	cmp	r3, #0
 8003732:	d10f      	bne.n	8003754 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2b0f      	cmp	r3, #15
 8003738:	d809      	bhi.n	800374e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800373a:	2200      	movs	r2, #0
 800373c:	6879      	ldr	r1, [r7, #4]
 800373e:	f04f 30ff 	mov.w	r0, #4294967295
 8003742:	f001 fd88 	bl	8005256 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003746:	4a0a      	ldr	r2, [pc, #40]	@ (8003770 <HAL_InitTick+0x70>)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6013      	str	r3, [r2, #0]
 800374c:	e007      	b.n	800375e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	73fb      	strb	r3, [r7, #15]
 8003752:	e004      	b.n	800375e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	73fb      	strb	r3, [r7, #15]
 8003758:	e001      	b.n	800375e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800375e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003760:	4618      	mov	r0, r3
 8003762:	3710      	adds	r7, #16
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}
 8003768:	20000208 	.word	0x20000208
 800376c:	20000200 	.word	0x20000200
 8003770:	20000204 	.word	0x20000204

08003774 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003774:	b480      	push	{r7}
 8003776:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003778:	4b05      	ldr	r3, [pc, #20]	@ (8003790 <HAL_IncTick+0x1c>)
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	4b05      	ldr	r3, [pc, #20]	@ (8003794 <HAL_IncTick+0x20>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4413      	add	r3, r2
 8003782:	4a03      	ldr	r2, [pc, #12]	@ (8003790 <HAL_IncTick+0x1c>)
 8003784:	6013      	str	r3, [r2, #0]
}
 8003786:	bf00      	nop
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr
 8003790:	20001c34 	.word	0x20001c34
 8003794:	20000208 	.word	0x20000208

08003798 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003798:	b480      	push	{r7}
 800379a:	af00      	add	r7, sp, #0
  return uwTick;
 800379c:	4b03      	ldr	r3, [pc, #12]	@ (80037ac <HAL_GetTick+0x14>)
 800379e:	681b      	ldr	r3, [r3, #0]
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr
 80037aa:	bf00      	nop
 80037ac:	20001c34 	.word	0x20001c34

080037b0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	431a      	orrs	r2, r3
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	609a      	str	r2, [r3, #8]
}
 80037ca:	bf00      	nop
 80037cc:	370c      	adds	r7, #12
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr

080037d6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80037d6:	b480      	push	{r7}
 80037d8:	b083      	sub	sp, #12
 80037da:	af00      	add	r7, sp, #0
 80037dc:	6078      	str	r0, [r7, #4]
 80037de:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	431a      	orrs	r2, r3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	609a      	str	r2, [r3, #8]
}
 80037f0:	bf00      	nop
 80037f2:	370c      	adds	r7, #12
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr

080037fc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800380c:	4618      	mov	r0, r3
 800380e:	370c      	adds	r7, #12
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr

08003818 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003818:	b480      	push	{r7}
 800381a:	b087      	sub	sp, #28
 800381c:	af00      	add	r7, sp, #0
 800381e:	60f8      	str	r0, [r7, #12]
 8003820:	60b9      	str	r1, [r7, #8]
 8003822:	607a      	str	r2, [r7, #4]
 8003824:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	3360      	adds	r3, #96	@ 0x60
 800382a:	461a      	mov	r2, r3
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	4413      	add	r3, r2
 8003832:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	4b08      	ldr	r3, [pc, #32]	@ (800385c <LL_ADC_SetOffset+0x44>)
 800383a:	4013      	ands	r3, r2
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8003842:	683a      	ldr	r2, [r7, #0]
 8003844:	430a      	orrs	r2, r1
 8003846:	4313      	orrs	r3, r2
 8003848:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003850:	bf00      	nop
 8003852:	371c      	adds	r7, #28
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr
 800385c:	03fff000 	.word	0x03fff000

08003860 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003860:	b480      	push	{r7}
 8003862:	b085      	sub	sp, #20
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	3360      	adds	r3, #96	@ 0x60
 800386e:	461a      	mov	r2, r3
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	4413      	add	r3, r2
 8003876:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003880:	4618      	mov	r0, r3
 8003882:	3714      	adds	r7, #20
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr

0800388c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800388c:	b480      	push	{r7}
 800388e:	b087      	sub	sp, #28
 8003890:	af00      	add	r7, sp, #0
 8003892:	60f8      	str	r0, [r7, #12]
 8003894:	60b9      	str	r1, [r7, #8]
 8003896:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	3360      	adds	r3, #96	@ 0x60
 800389c:	461a      	mov	r2, r3
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	4413      	add	r3, r2
 80038a4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	431a      	orrs	r2, r3
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80038b6:	bf00      	nop
 80038b8:	371c      	adds	r7, #28
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr

080038c2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80038c2:	b480      	push	{r7}
 80038c4:	b087      	sub	sp, #28
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	60f8      	str	r0, [r7, #12]
 80038ca:	60b9      	str	r1, [r7, #8]
 80038cc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	3360      	adds	r3, #96	@ 0x60
 80038d2:	461a      	mov	r2, r3
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	4413      	add	r3, r2
 80038da:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	431a      	orrs	r2, r3
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80038ec:	bf00      	nop
 80038ee:	371c      	adds	r7, #28
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr

080038f8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b087      	sub	sp, #28
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	60f8      	str	r0, [r7, #12]
 8003900:	60b9      	str	r1, [r7, #8]
 8003902:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	3360      	adds	r3, #96	@ 0x60
 8003908:	461a      	mov	r2, r3
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	4413      	add	r3, r2
 8003910:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	431a      	orrs	r2, r3
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8003922:	bf00      	nop
 8003924:	371c      	adds	r7, #28
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr

0800392e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800392e:	b480      	push	{r7}
 8003930:	b083      	sub	sp, #12
 8003932:	af00      	add	r7, sp, #0
 8003934:	6078      	str	r0, [r7, #4]
 8003936:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	695b      	ldr	r3, [r3, #20]
 800393c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	431a      	orrs	r2, r3
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	615a      	str	r2, [r3, #20]
}
 8003948:	bf00      	nop
 800394a:	370c      	adds	r7, #12
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr

08003954 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003964:	2b00      	cmp	r3, #0
 8003966:	d101      	bne.n	800396c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003968:	2301      	movs	r3, #1
 800396a:	e000      	b.n	800396e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800396c:	2300      	movs	r3, #0
}
 800396e:	4618      	mov	r0, r3
 8003970:	370c      	adds	r7, #12
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr

0800397a <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800397a:	b480      	push	{r7}
 800397c:	b087      	sub	sp, #28
 800397e:	af00      	add	r7, sp, #0
 8003980:	60f8      	str	r0, [r7, #12]
 8003982:	60b9      	str	r1, [r7, #8]
 8003984:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	3330      	adds	r3, #48	@ 0x30
 800398a:	461a      	mov	r2, r3
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	0a1b      	lsrs	r3, r3, #8
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	f003 030c 	and.w	r3, r3, #12
 8003996:	4413      	add	r3, r2
 8003998:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	f003 031f 	and.w	r3, r3, #31
 80039a4:	211f      	movs	r1, #31
 80039a6:	fa01 f303 	lsl.w	r3, r1, r3
 80039aa:	43db      	mvns	r3, r3
 80039ac:	401a      	ands	r2, r3
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	0e9b      	lsrs	r3, r3, #26
 80039b2:	f003 011f 	and.w	r1, r3, #31
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	f003 031f 	and.w	r3, r3, #31
 80039bc:	fa01 f303 	lsl.w	r3, r1, r3
 80039c0:	431a      	orrs	r2, r3
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80039c6:	bf00      	nop
 80039c8:	371c      	adds	r7, #28
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr

080039d2 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80039d2:	b480      	push	{r7}
 80039d4:	b087      	sub	sp, #28
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	60f8      	str	r0, [r7, #12]
 80039da:	60b9      	str	r1, [r7, #8]
 80039dc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	3314      	adds	r3, #20
 80039e2:	461a      	mov	r2, r3
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	0e5b      	lsrs	r3, r3, #25
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	f003 0304 	and.w	r3, r3, #4
 80039ee:	4413      	add	r3, r2
 80039f0:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	0d1b      	lsrs	r3, r3, #20
 80039fa:	f003 031f 	and.w	r3, r3, #31
 80039fe:	2107      	movs	r1, #7
 8003a00:	fa01 f303 	lsl.w	r3, r1, r3
 8003a04:	43db      	mvns	r3, r3
 8003a06:	401a      	ands	r2, r3
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	0d1b      	lsrs	r3, r3, #20
 8003a0c:	f003 031f 	and.w	r3, r3, #31
 8003a10:	6879      	ldr	r1, [r7, #4]
 8003a12:	fa01 f303 	lsl.w	r3, r1, r3
 8003a16:	431a      	orrs	r2, r3
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003a1c:	bf00      	nop
 8003a1e:	371c      	adds	r7, #28
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr

08003a28 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b085      	sub	sp, #20
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	60f8      	str	r0, [r7, #12]
 8003a30:	60b9      	str	r1, [r7, #8]
 8003a32:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a40:	43db      	mvns	r3, r3
 8003a42:	401a      	ands	r2, r3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f003 0318 	and.w	r3, r3, #24
 8003a4a:	4908      	ldr	r1, [pc, #32]	@ (8003a6c <LL_ADC_SetChannelSingleDiff+0x44>)
 8003a4c:	40d9      	lsrs	r1, r3
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	400b      	ands	r3, r1
 8003a52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a56:	431a      	orrs	r2, r3
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003a5e:	bf00      	nop
 8003a60:	3714      	adds	r7, #20
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr
 8003a6a:	bf00      	nop
 8003a6c:	0007ffff 	.word	0x0007ffff

08003a70 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	f003 031f 	and.w	r3, r3, #31
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	370c      	adds	r7, #12
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr

08003a8c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b083      	sub	sp, #12
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003a9c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	6093      	str	r3, [r2, #8]
}
 8003aa4:	bf00      	nop
 8003aa6:	370c      	adds	r7, #12
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr

08003ab0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b083      	sub	sp, #12
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003ac0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003ac4:	d101      	bne.n	8003aca <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e000      	b.n	8003acc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003aca:	2300      	movs	r3, #0
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	370c      	adds	r7, #12
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr

08003ad8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b083      	sub	sp, #12
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003ae8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003aec:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003af4:	bf00      	nop
 8003af6:	370c      	adds	r7, #12
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr

08003b00 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b083      	sub	sp, #12
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b10:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003b14:	d101      	bne.n	8003b1a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003b16:	2301      	movs	r3, #1
 8003b18:	e000      	b.n	8003b1c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003b1a:	2300      	movs	r3, #0
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	370c      	adds	r7, #12
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr

08003b28 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b083      	sub	sp, #12
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003b38:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003b3c:	f043 0201 	orr.w	r2, r3, #1
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003b44:	bf00      	nop
 8003b46:	370c      	adds	r7, #12
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr

08003b50 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b083      	sub	sp, #12
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003b60:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003b64:	f043 0202 	orr.w	r2, r3, #2
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003b6c:	bf00      	nop
 8003b6e:	370c      	adds	r7, #12
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr

08003b78 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b083      	sub	sp, #12
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	f003 0301 	and.w	r3, r3, #1
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d101      	bne.n	8003b90 <LL_ADC_IsEnabled+0x18>
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e000      	b.n	8003b92 <LL_ADC_IsEnabled+0x1a>
 8003b90:	2300      	movs	r3, #0
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	370c      	adds	r7, #12
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr

08003b9e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8003b9e:	b480      	push	{r7}
 8003ba0:	b083      	sub	sp, #12
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	f003 0302 	and.w	r3, r3, #2
 8003bae:	2b02      	cmp	r3, #2
 8003bb0:	d101      	bne.n	8003bb6 <LL_ADC_IsDisableOngoing+0x18>
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e000      	b.n	8003bb8 <LL_ADC_IsDisableOngoing+0x1a>
 8003bb6:	2300      	movs	r3, #0
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	370c      	adds	r7, #12
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr

08003bc4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003bd4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003bd8:	f043 0204 	orr.w	r2, r3, #4
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003be0:	bf00      	nop
 8003be2:	370c      	adds	r7, #12
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr

08003bec <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b083      	sub	sp, #12
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	f003 0304 	and.w	r3, r3, #4
 8003bfc:	2b04      	cmp	r3, #4
 8003bfe:	d101      	bne.n	8003c04 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003c00:	2301      	movs	r3, #1
 8003c02:	e000      	b.n	8003c06 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003c04:	2300      	movs	r3, #0
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	370c      	adds	r7, #12
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr

08003c12 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003c12:	b480      	push	{r7}
 8003c14:	b083      	sub	sp, #12
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	f003 0308 	and.w	r3, r3, #8
 8003c22:	2b08      	cmp	r3, #8
 8003c24:	d101      	bne.n	8003c2a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003c26:	2301      	movs	r3, #1
 8003c28:	e000      	b.n	8003c2c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003c2a:	2300      	movs	r3, #0
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	370c      	adds	r7, #12
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr

08003c38 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003c38:	b590      	push	{r4, r7, lr}
 8003c3a:	b089      	sub	sp, #36	@ 0x24
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c40:	2300      	movs	r3, #0
 8003c42:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003c44:	2300      	movs	r3, #0
 8003c46:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d101      	bne.n	8003c52 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e1a9      	b.n	8003fa6 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	695b      	ldr	r3, [r3, #20]
 8003c56:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d109      	bne.n	8003c74 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f7fe f85b 	bl	8001d1c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f7ff ff19 	bl	8003ab0 <LL_ADC_IsDeepPowerDownEnabled>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d004      	beq.n	8003c8e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f7ff feff 	bl	8003a8c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4618      	mov	r0, r3
 8003c94:	f7ff ff34 	bl	8003b00 <LL_ADC_IsInternalRegulatorEnabled>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d115      	bne.n	8003cca <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f7ff ff18 	bl	8003ad8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003ca8:	4b9c      	ldr	r3, [pc, #624]	@ (8003f1c <HAL_ADC_Init+0x2e4>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	099b      	lsrs	r3, r3, #6
 8003cae:	4a9c      	ldr	r2, [pc, #624]	@ (8003f20 <HAL_ADC_Init+0x2e8>)
 8003cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8003cb4:	099b      	lsrs	r3, r3, #6
 8003cb6:	3301      	adds	r3, #1
 8003cb8:	005b      	lsls	r3, r3, #1
 8003cba:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003cbc:	e002      	b.n	8003cc4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	3b01      	subs	r3, #1
 8003cc2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d1f9      	bne.n	8003cbe <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f7ff ff16 	bl	8003b00 <LL_ADC_IsInternalRegulatorEnabled>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d10d      	bne.n	8003cf6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cde:	f043 0210 	orr.w	r2, r3, #16
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cea:	f043 0201 	orr.w	r2, r3, #1
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f7ff ff76 	bl	8003bec <LL_ADC_REG_IsConversionOngoing>
 8003d00:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d06:	f003 0310 	and.w	r3, r3, #16
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	f040 8142 	bne.w	8003f94 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	f040 813e 	bne.w	8003f94 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d1c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003d20:	f043 0202 	orr.w	r2, r3, #2
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f7ff ff23 	bl	8003b78 <LL_ADC_IsEnabled>
 8003d32:	4603      	mov	r3, r0
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d141      	bne.n	8003dbc <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003d40:	d004      	beq.n	8003d4c <HAL_ADC_Init+0x114>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a77      	ldr	r2, [pc, #476]	@ (8003f24 <HAL_ADC_Init+0x2ec>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d10f      	bne.n	8003d6c <HAL_ADC_Init+0x134>
 8003d4c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003d50:	f7ff ff12 	bl	8003b78 <LL_ADC_IsEnabled>
 8003d54:	4604      	mov	r4, r0
 8003d56:	4873      	ldr	r0, [pc, #460]	@ (8003f24 <HAL_ADC_Init+0x2ec>)
 8003d58:	f7ff ff0e 	bl	8003b78 <LL_ADC_IsEnabled>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	4323      	orrs	r3, r4
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	bf0c      	ite	eq
 8003d64:	2301      	moveq	r3, #1
 8003d66:	2300      	movne	r3, #0
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	e012      	b.n	8003d92 <HAL_ADC_Init+0x15a>
 8003d6c:	486e      	ldr	r0, [pc, #440]	@ (8003f28 <HAL_ADC_Init+0x2f0>)
 8003d6e:	f7ff ff03 	bl	8003b78 <LL_ADC_IsEnabled>
 8003d72:	4604      	mov	r4, r0
 8003d74:	486d      	ldr	r0, [pc, #436]	@ (8003f2c <HAL_ADC_Init+0x2f4>)
 8003d76:	f7ff feff 	bl	8003b78 <LL_ADC_IsEnabled>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	431c      	orrs	r4, r3
 8003d7e:	486c      	ldr	r0, [pc, #432]	@ (8003f30 <HAL_ADC_Init+0x2f8>)
 8003d80:	f7ff fefa 	bl	8003b78 <LL_ADC_IsEnabled>
 8003d84:	4603      	mov	r3, r0
 8003d86:	4323      	orrs	r3, r4
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	bf0c      	ite	eq
 8003d8c:	2301      	moveq	r3, #1
 8003d8e:	2300      	movne	r3, #0
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d012      	beq.n	8003dbc <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003d9e:	d004      	beq.n	8003daa <HAL_ADC_Init+0x172>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a5f      	ldr	r2, [pc, #380]	@ (8003f24 <HAL_ADC_Init+0x2ec>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d101      	bne.n	8003dae <HAL_ADC_Init+0x176>
 8003daa:	4a62      	ldr	r2, [pc, #392]	@ (8003f34 <HAL_ADC_Init+0x2fc>)
 8003dac:	e000      	b.n	8003db0 <HAL_ADC_Init+0x178>
 8003dae:	4a62      	ldr	r2, [pc, #392]	@ (8003f38 <HAL_ADC_Init+0x300>)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	4619      	mov	r1, r3
 8003db6:	4610      	mov	r0, r2
 8003db8:	f7ff fcfa 	bl	80037b0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	7f5b      	ldrb	r3, [r3, #29]
 8003dc0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003dc6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003dcc:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003dd2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003dda:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d106      	bne.n	8003df8 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dee:	3b01      	subs	r3, #1
 8003df0:	045b      	lsls	r3, r3, #17
 8003df2:	69ba      	ldr	r2, [r7, #24]
 8003df4:	4313      	orrs	r3, r2
 8003df6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d009      	beq.n	8003e14 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e04:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e0c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003e0e:	69ba      	ldr	r2, [r7, #24]
 8003e10:	4313      	orrs	r3, r2
 8003e12:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	68da      	ldr	r2, [r3, #12]
 8003e1a:	4b48      	ldr	r3, [pc, #288]	@ (8003f3c <HAL_ADC_Init+0x304>)
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	6812      	ldr	r2, [r2, #0]
 8003e22:	69b9      	ldr	r1, [r7, #24]
 8003e24:	430b      	orrs	r3, r1
 8003e26:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	691b      	ldr	r3, [r3, #16]
 8003e2e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	430a      	orrs	r2, r1
 8003e3c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4618      	mov	r0, r3
 8003e44:	f7ff fee5 	bl	8003c12 <LL_ADC_INJ_IsConversionOngoing>
 8003e48:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d17f      	bne.n	8003f50 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d17c      	bne.n	8003f50 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003e5a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003e62:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003e64:	4313      	orrs	r3, r2
 8003e66:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	68db      	ldr	r3, [r3, #12]
 8003e6e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003e72:	f023 0302 	bic.w	r3, r3, #2
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	6812      	ldr	r2, [r2, #0]
 8003e7a:	69b9      	ldr	r1, [r7, #24]
 8003e7c:	430b      	orrs	r3, r1
 8003e7e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	691b      	ldr	r3, [r3, #16]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d017      	beq.n	8003eb8 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	691a      	ldr	r2, [r3, #16]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003e96:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003ea0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003ea4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	6911      	ldr	r1, [r2, #16]
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	6812      	ldr	r2, [r2, #0]
 8003eb0:	430b      	orrs	r3, r1
 8003eb2:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8003eb6:	e013      	b.n	8003ee0 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	691a      	ldr	r2, [r3, #16]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003ec6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	6812      	ldr	r2, [r2, #0]
 8003ed4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003ed8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003edc:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d12a      	bne.n	8003f40 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	691b      	ldr	r3, [r3, #16]
 8003ef0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003ef4:	f023 0304 	bic.w	r3, r3, #4
 8003ef8:	687a      	ldr	r2, [r7, #4]
 8003efa:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8003efc:	687a      	ldr	r2, [r7, #4]
 8003efe:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003f00:	4311      	orrs	r1, r2
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003f06:	4311      	orrs	r1, r2
 8003f08:	687a      	ldr	r2, [r7, #4]
 8003f0a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003f0c:	430a      	orrs	r2, r1
 8003f0e:	431a      	orrs	r2, r3
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f042 0201 	orr.w	r2, r2, #1
 8003f18:	611a      	str	r2, [r3, #16]
 8003f1a:	e019      	b.n	8003f50 <HAL_ADC_Init+0x318>
 8003f1c:	20000200 	.word	0x20000200
 8003f20:	053e2d63 	.word	0x053e2d63
 8003f24:	50000100 	.word	0x50000100
 8003f28:	50000400 	.word	0x50000400
 8003f2c:	50000500 	.word	0x50000500
 8003f30:	50000600 	.word	0x50000600
 8003f34:	50000300 	.word	0x50000300
 8003f38:	50000700 	.word	0x50000700
 8003f3c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	691a      	ldr	r2, [r3, #16]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f022 0201 	bic.w	r2, r2, #1
 8003f4e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	695b      	ldr	r3, [r3, #20]
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d10c      	bne.n	8003f72 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f5e:	f023 010f 	bic.w	r1, r3, #15
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a1b      	ldr	r3, [r3, #32]
 8003f66:	1e5a      	subs	r2, r3, #1
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	430a      	orrs	r2, r1
 8003f6e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003f70:	e007      	b.n	8003f82 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f022 020f 	bic.w	r2, r2, #15
 8003f80:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f86:	f023 0303 	bic.w	r3, r3, #3
 8003f8a:	f043 0201 	orr.w	r2, r3, #1
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003f92:	e007      	b.n	8003fa4 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f98:	f043 0210 	orr.w	r2, r3, #16
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003fa4:	7ffb      	ldrb	r3, [r7, #31]
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3724      	adds	r7, #36	@ 0x24
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd90      	pop	{r4, r7, pc}
 8003fae:	bf00      	nop

08003fb0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b086      	sub	sp, #24
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	60b9      	str	r1, [r7, #8]
 8003fba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003fc4:	d004      	beq.n	8003fd0 <HAL_ADC_Start_DMA+0x20>
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a5a      	ldr	r2, [pc, #360]	@ (8004134 <HAL_ADC_Start_DMA+0x184>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d101      	bne.n	8003fd4 <HAL_ADC_Start_DMA+0x24>
 8003fd0:	4b59      	ldr	r3, [pc, #356]	@ (8004138 <HAL_ADC_Start_DMA+0x188>)
 8003fd2:	e000      	b.n	8003fd6 <HAL_ADC_Start_DMA+0x26>
 8003fd4:	4b59      	ldr	r3, [pc, #356]	@ (800413c <HAL_ADC_Start_DMA+0x18c>)
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f7ff fd4a 	bl	8003a70 <LL_ADC_GetMultimode>
 8003fdc:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f7ff fe02 	bl	8003bec <LL_ADC_REG_IsConversionOngoing>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	f040 809b 	bne.w	8004126 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d101      	bne.n	8003ffe <HAL_ADC_Start_DMA+0x4e>
 8003ffa:	2302      	movs	r3, #2
 8003ffc:	e096      	b.n	800412c <HAL_ADC_Start_DMA+0x17c>
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2201      	movs	r2, #1
 8004002:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a4d      	ldr	r2, [pc, #308]	@ (8004140 <HAL_ADC_Start_DMA+0x190>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d008      	beq.n	8004022 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d005      	beq.n	8004022 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	2b05      	cmp	r3, #5
 800401a:	d002      	beq.n	8004022 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	2b09      	cmp	r3, #9
 8004020:	d17a      	bne.n	8004118 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004022:	68f8      	ldr	r0, [r7, #12]
 8004024:	f000 fcf6 	bl	8004a14 <ADC_Enable>
 8004028:	4603      	mov	r3, r0
 800402a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800402c:	7dfb      	ldrb	r3, [r7, #23]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d16d      	bne.n	800410e <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004036:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800403a:	f023 0301 	bic.w	r3, r3, #1
 800403e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a3a      	ldr	r2, [pc, #232]	@ (8004134 <HAL_ADC_Start_DMA+0x184>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d009      	beq.n	8004064 <HAL_ADC_Start_DMA+0xb4>
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a3b      	ldr	r2, [pc, #236]	@ (8004144 <HAL_ADC_Start_DMA+0x194>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d002      	beq.n	8004060 <HAL_ADC_Start_DMA+0xb0>
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	e003      	b.n	8004068 <HAL_ADC_Start_DMA+0xb8>
 8004060:	4b39      	ldr	r3, [pc, #228]	@ (8004148 <HAL_ADC_Start_DMA+0x198>)
 8004062:	e001      	b.n	8004068 <HAL_ADC_Start_DMA+0xb8>
 8004064:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004068:	68fa      	ldr	r2, [r7, #12]
 800406a:	6812      	ldr	r2, [r2, #0]
 800406c:	4293      	cmp	r3, r2
 800406e:	d002      	beq.n	8004076 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d105      	bne.n	8004082 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800407a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004086:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800408a:	2b00      	cmp	r3, #0
 800408c:	d006      	beq.n	800409c <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004092:	f023 0206 	bic.w	r2, r3, #6
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	661a      	str	r2, [r3, #96]	@ 0x60
 800409a:	e002      	b.n	80040a2 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2200      	movs	r2, #0
 80040a0:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040a6:	4a29      	ldr	r2, [pc, #164]	@ (800414c <HAL_ADC_Start_DMA+0x19c>)
 80040a8:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040ae:	4a28      	ldr	r2, [pc, #160]	@ (8004150 <HAL_ADC_Start_DMA+0x1a0>)
 80040b0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040b6:	4a27      	ldr	r2, [pc, #156]	@ (8004154 <HAL_ADC_Start_DMA+0x1a4>)
 80040b8:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	221c      	movs	r2, #28
 80040c0:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2200      	movs	r2, #0
 80040c6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	685a      	ldr	r2, [r3, #4]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f042 0210 	orr.w	r2, r2, #16
 80040d8:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	68da      	ldr	r2, [r3, #12]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f042 0201 	orr.w	r2, r2, #1
 80040e8:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	3340      	adds	r3, #64	@ 0x40
 80040f4:	4619      	mov	r1, r3
 80040f6:	68ba      	ldr	r2, [r7, #8]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f001 f989 	bl	8005410 <HAL_DMA_Start_IT>
 80040fe:	4603      	mov	r3, r0
 8004100:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4618      	mov	r0, r3
 8004108:	f7ff fd5c 	bl	8003bc4 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800410c:	e00d      	b.n	800412a <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2200      	movs	r2, #0
 8004112:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8004116:	e008      	b.n	800412a <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2200      	movs	r2, #0
 8004120:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8004124:	e001      	b.n	800412a <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004126:	2302      	movs	r3, #2
 8004128:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800412a:	7dfb      	ldrb	r3, [r7, #23]
}
 800412c:	4618      	mov	r0, r3
 800412e:	3718      	adds	r7, #24
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}
 8004134:	50000100 	.word	0x50000100
 8004138:	50000300 	.word	0x50000300
 800413c:	50000700 	.word	0x50000700
 8004140:	50000600 	.word	0x50000600
 8004144:	50000500 	.word	0x50000500
 8004148:	50000400 	.word	0x50000400
 800414c:	08004bff 	.word	0x08004bff
 8004150:	08004cd7 	.word	0x08004cd7
 8004154:	08004cf3 	.word	0x08004cf3

08004158 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004158:	b480      	push	{r7}
 800415a:	b083      	sub	sp, #12
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004160:	bf00      	nop
 8004162:	370c      	adds	r7, #12
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr

0800416c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800416c:	b480      	push	{r7}
 800416e:	b083      	sub	sp, #12
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004174:	bf00      	nop
 8004176:	370c      	adds	r7, #12
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr

08004180 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004180:	b480      	push	{r7}
 8004182:	b083      	sub	sp, #12
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004188:	bf00      	nop
 800418a:	370c      	adds	r7, #12
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr

08004194 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b0b6      	sub	sp, #216	@ 0xd8
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800419e:	2300      	movs	r3, #0
 80041a0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80041a4:	2300      	movs	r3, #0
 80041a6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d102      	bne.n	80041b8 <HAL_ADC_ConfigChannel+0x24>
 80041b2:	2302      	movs	r3, #2
 80041b4:	f000 bc13 	b.w	80049de <HAL_ADC_ConfigChannel+0x84a>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2201      	movs	r2, #1
 80041bc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4618      	mov	r0, r3
 80041c6:	f7ff fd11 	bl	8003bec <LL_ADC_REG_IsConversionOngoing>
 80041ca:	4603      	mov	r3, r0
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	f040 83f3 	bne.w	80049b8 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6818      	ldr	r0, [r3, #0]
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	6859      	ldr	r1, [r3, #4]
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	461a      	mov	r2, r3
 80041e0:	f7ff fbcb 	bl	800397a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4618      	mov	r0, r3
 80041ea:	f7ff fcff 	bl	8003bec <LL_ADC_REG_IsConversionOngoing>
 80041ee:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4618      	mov	r0, r3
 80041f8:	f7ff fd0b 	bl	8003c12 <LL_ADC_INJ_IsConversionOngoing>
 80041fc:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004200:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004204:	2b00      	cmp	r3, #0
 8004206:	f040 81d9 	bne.w	80045bc <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800420a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800420e:	2b00      	cmp	r3, #0
 8004210:	f040 81d4 	bne.w	80045bc <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800421c:	d10f      	bne.n	800423e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6818      	ldr	r0, [r3, #0]
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	2200      	movs	r2, #0
 8004228:	4619      	mov	r1, r3
 800422a:	f7ff fbd2 	bl	80039d2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8004236:	4618      	mov	r0, r3
 8004238:	f7ff fb79 	bl	800392e <LL_ADC_SetSamplingTimeCommonConfig>
 800423c:	e00e      	b.n	800425c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6818      	ldr	r0, [r3, #0]
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	6819      	ldr	r1, [r3, #0]
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	461a      	mov	r2, r3
 800424c:	f7ff fbc1 	bl	80039d2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	2100      	movs	r1, #0
 8004256:	4618      	mov	r0, r3
 8004258:	f7ff fb69 	bl	800392e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	695a      	ldr	r2, [r3, #20]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	68db      	ldr	r3, [r3, #12]
 8004266:	08db      	lsrs	r3, r3, #3
 8004268:	f003 0303 	and.w	r3, r3, #3
 800426c:	005b      	lsls	r3, r3, #1
 800426e:	fa02 f303 	lsl.w	r3, r2, r3
 8004272:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	691b      	ldr	r3, [r3, #16]
 800427a:	2b04      	cmp	r3, #4
 800427c:	d022      	beq.n	80042c4 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6818      	ldr	r0, [r3, #0]
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	6919      	ldr	r1, [r3, #16]
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800428e:	f7ff fac3 	bl	8003818 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6818      	ldr	r0, [r3, #0]
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	6919      	ldr	r1, [r3, #16]
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	699b      	ldr	r3, [r3, #24]
 800429e:	461a      	mov	r2, r3
 80042a0:	f7ff fb0f 	bl	80038c2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6818      	ldr	r0, [r3, #0]
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d102      	bne.n	80042ba <HAL_ADC_ConfigChannel+0x126>
 80042b4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80042b8:	e000      	b.n	80042bc <HAL_ADC_ConfigChannel+0x128>
 80042ba:	2300      	movs	r3, #0
 80042bc:	461a      	mov	r2, r3
 80042be:	f7ff fb1b 	bl	80038f8 <LL_ADC_SetOffsetSaturation>
 80042c2:	e17b      	b.n	80045bc <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	2100      	movs	r1, #0
 80042ca:	4618      	mov	r0, r3
 80042cc:	f7ff fac8 	bl	8003860 <LL_ADC_GetOffsetChannel>
 80042d0:	4603      	mov	r3, r0
 80042d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d10a      	bne.n	80042f0 <HAL_ADC_ConfigChannel+0x15c>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	2100      	movs	r1, #0
 80042e0:	4618      	mov	r0, r3
 80042e2:	f7ff fabd 	bl	8003860 <LL_ADC_GetOffsetChannel>
 80042e6:	4603      	mov	r3, r0
 80042e8:	0e9b      	lsrs	r3, r3, #26
 80042ea:	f003 021f 	and.w	r2, r3, #31
 80042ee:	e01e      	b.n	800432e <HAL_ADC_ConfigChannel+0x19a>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	2100      	movs	r1, #0
 80042f6:	4618      	mov	r0, r3
 80042f8:	f7ff fab2 	bl	8003860 <LL_ADC_GetOffsetChannel>
 80042fc:	4603      	mov	r3, r0
 80042fe:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004302:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004306:	fa93 f3a3 	rbit	r3, r3
 800430a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800430e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004312:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004316:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800431a:	2b00      	cmp	r3, #0
 800431c:	d101      	bne.n	8004322 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800431e:	2320      	movs	r3, #32
 8004320:	e004      	b.n	800432c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8004322:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004326:	fab3 f383 	clz	r3, r3
 800432a:	b2db      	uxtb	r3, r3
 800432c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004336:	2b00      	cmp	r3, #0
 8004338:	d105      	bne.n	8004346 <HAL_ADC_ConfigChannel+0x1b2>
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	0e9b      	lsrs	r3, r3, #26
 8004340:	f003 031f 	and.w	r3, r3, #31
 8004344:	e018      	b.n	8004378 <HAL_ADC_ConfigChannel+0x1e4>
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800434e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004352:	fa93 f3a3 	rbit	r3, r3
 8004356:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800435a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800435e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8004362:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004366:	2b00      	cmp	r3, #0
 8004368:	d101      	bne.n	800436e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800436a:	2320      	movs	r3, #32
 800436c:	e004      	b.n	8004378 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800436e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004372:	fab3 f383 	clz	r3, r3
 8004376:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004378:	429a      	cmp	r2, r3
 800437a:	d106      	bne.n	800438a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	2200      	movs	r2, #0
 8004382:	2100      	movs	r1, #0
 8004384:	4618      	mov	r0, r3
 8004386:	f7ff fa81 	bl	800388c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	2101      	movs	r1, #1
 8004390:	4618      	mov	r0, r3
 8004392:	f7ff fa65 	bl	8003860 <LL_ADC_GetOffsetChannel>
 8004396:	4603      	mov	r3, r0
 8004398:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800439c:	2b00      	cmp	r3, #0
 800439e:	d10a      	bne.n	80043b6 <HAL_ADC_ConfigChannel+0x222>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2101      	movs	r1, #1
 80043a6:	4618      	mov	r0, r3
 80043a8:	f7ff fa5a 	bl	8003860 <LL_ADC_GetOffsetChannel>
 80043ac:	4603      	mov	r3, r0
 80043ae:	0e9b      	lsrs	r3, r3, #26
 80043b0:	f003 021f 	and.w	r2, r3, #31
 80043b4:	e01e      	b.n	80043f4 <HAL_ADC_ConfigChannel+0x260>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	2101      	movs	r1, #1
 80043bc:	4618      	mov	r0, r3
 80043be:	f7ff fa4f 	bl	8003860 <LL_ADC_GetOffsetChannel>
 80043c2:	4603      	mov	r3, r0
 80043c4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043c8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80043cc:	fa93 f3a3 	rbit	r3, r3
 80043d0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80043d4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80043d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80043dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d101      	bne.n	80043e8 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80043e4:	2320      	movs	r3, #32
 80043e6:	e004      	b.n	80043f2 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80043e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80043ec:	fab3 f383 	clz	r3, r3
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d105      	bne.n	800440c <HAL_ADC_ConfigChannel+0x278>
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	0e9b      	lsrs	r3, r3, #26
 8004406:	f003 031f 	and.w	r3, r3, #31
 800440a:	e018      	b.n	800443e <HAL_ADC_ConfigChannel+0x2aa>
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004414:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004418:	fa93 f3a3 	rbit	r3, r3
 800441c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8004420:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004424:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8004428:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800442c:	2b00      	cmp	r3, #0
 800442e:	d101      	bne.n	8004434 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8004430:	2320      	movs	r3, #32
 8004432:	e004      	b.n	800443e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8004434:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004438:	fab3 f383 	clz	r3, r3
 800443c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800443e:	429a      	cmp	r2, r3
 8004440:	d106      	bne.n	8004450 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	2200      	movs	r2, #0
 8004448:	2101      	movs	r1, #1
 800444a:	4618      	mov	r0, r3
 800444c:	f7ff fa1e 	bl	800388c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	2102      	movs	r1, #2
 8004456:	4618      	mov	r0, r3
 8004458:	f7ff fa02 	bl	8003860 <LL_ADC_GetOffsetChannel>
 800445c:	4603      	mov	r3, r0
 800445e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004462:	2b00      	cmp	r3, #0
 8004464:	d10a      	bne.n	800447c <HAL_ADC_ConfigChannel+0x2e8>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	2102      	movs	r1, #2
 800446c:	4618      	mov	r0, r3
 800446e:	f7ff f9f7 	bl	8003860 <LL_ADC_GetOffsetChannel>
 8004472:	4603      	mov	r3, r0
 8004474:	0e9b      	lsrs	r3, r3, #26
 8004476:	f003 021f 	and.w	r2, r3, #31
 800447a:	e01e      	b.n	80044ba <HAL_ADC_ConfigChannel+0x326>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	2102      	movs	r1, #2
 8004482:	4618      	mov	r0, r3
 8004484:	f7ff f9ec 	bl	8003860 <LL_ADC_GetOffsetChannel>
 8004488:	4603      	mov	r3, r0
 800448a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800448e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004492:	fa93 f3a3 	rbit	r3, r3
 8004496:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800449a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800449e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80044a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d101      	bne.n	80044ae <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80044aa:	2320      	movs	r3, #32
 80044ac:	e004      	b.n	80044b8 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80044ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80044b2:	fab3 f383 	clz	r3, r3
 80044b6:	b2db      	uxtb	r3, r3
 80044b8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d105      	bne.n	80044d2 <HAL_ADC_ConfigChannel+0x33e>
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	0e9b      	lsrs	r3, r3, #26
 80044cc:	f003 031f 	and.w	r3, r3, #31
 80044d0:	e016      	b.n	8004500 <HAL_ADC_ConfigChannel+0x36c>
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044da:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80044de:	fa93 f3a3 	rbit	r3, r3
 80044e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80044e4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80044e6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80044ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d101      	bne.n	80044f6 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80044f2:	2320      	movs	r3, #32
 80044f4:	e004      	b.n	8004500 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80044f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80044fa:	fab3 f383 	clz	r3, r3
 80044fe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004500:	429a      	cmp	r2, r3
 8004502:	d106      	bne.n	8004512 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	2200      	movs	r2, #0
 800450a:	2102      	movs	r1, #2
 800450c:	4618      	mov	r0, r3
 800450e:	f7ff f9bd 	bl	800388c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	2103      	movs	r1, #3
 8004518:	4618      	mov	r0, r3
 800451a:	f7ff f9a1 	bl	8003860 <LL_ADC_GetOffsetChannel>
 800451e:	4603      	mov	r3, r0
 8004520:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004524:	2b00      	cmp	r3, #0
 8004526:	d10a      	bne.n	800453e <HAL_ADC_ConfigChannel+0x3aa>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	2103      	movs	r1, #3
 800452e:	4618      	mov	r0, r3
 8004530:	f7ff f996 	bl	8003860 <LL_ADC_GetOffsetChannel>
 8004534:	4603      	mov	r3, r0
 8004536:	0e9b      	lsrs	r3, r3, #26
 8004538:	f003 021f 	and.w	r2, r3, #31
 800453c:	e017      	b.n	800456e <HAL_ADC_ConfigChannel+0x3da>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	2103      	movs	r1, #3
 8004544:	4618      	mov	r0, r3
 8004546:	f7ff f98b 	bl	8003860 <LL_ADC_GetOffsetChannel>
 800454a:	4603      	mov	r3, r0
 800454c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800454e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004550:	fa93 f3a3 	rbit	r3, r3
 8004554:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8004556:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004558:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800455a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800455c:	2b00      	cmp	r3, #0
 800455e:	d101      	bne.n	8004564 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8004560:	2320      	movs	r3, #32
 8004562:	e003      	b.n	800456c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8004564:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004566:	fab3 f383 	clz	r3, r3
 800456a:	b2db      	uxtb	r3, r3
 800456c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004576:	2b00      	cmp	r3, #0
 8004578:	d105      	bne.n	8004586 <HAL_ADC_ConfigChannel+0x3f2>
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	0e9b      	lsrs	r3, r3, #26
 8004580:	f003 031f 	and.w	r3, r3, #31
 8004584:	e011      	b.n	80045aa <HAL_ADC_ConfigChannel+0x416>
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800458c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800458e:	fa93 f3a3 	rbit	r3, r3
 8004592:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8004594:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004596:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8004598:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800459a:	2b00      	cmp	r3, #0
 800459c:	d101      	bne.n	80045a2 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800459e:	2320      	movs	r3, #32
 80045a0:	e003      	b.n	80045aa <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80045a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80045a4:	fab3 f383 	clz	r3, r3
 80045a8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d106      	bne.n	80045bc <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	2200      	movs	r2, #0
 80045b4:	2103      	movs	r1, #3
 80045b6:	4618      	mov	r0, r3
 80045b8:	f7ff f968 	bl	800388c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4618      	mov	r0, r3
 80045c2:	f7ff fad9 	bl	8003b78 <LL_ADC_IsEnabled>
 80045c6:	4603      	mov	r3, r0
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	f040 813d 	bne.w	8004848 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6818      	ldr	r0, [r3, #0]
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	6819      	ldr	r1, [r3, #0]
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	68db      	ldr	r3, [r3, #12]
 80045da:	461a      	mov	r2, r3
 80045dc:	f7ff fa24 	bl	8003a28 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	4aa2      	ldr	r2, [pc, #648]	@ (8004870 <HAL_ADC_ConfigChannel+0x6dc>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	f040 812e 	bne.w	8004848 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d10b      	bne.n	8004614 <HAL_ADC_ConfigChannel+0x480>
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	0e9b      	lsrs	r3, r3, #26
 8004602:	3301      	adds	r3, #1
 8004604:	f003 031f 	and.w	r3, r3, #31
 8004608:	2b09      	cmp	r3, #9
 800460a:	bf94      	ite	ls
 800460c:	2301      	movls	r3, #1
 800460e:	2300      	movhi	r3, #0
 8004610:	b2db      	uxtb	r3, r3
 8004612:	e019      	b.n	8004648 <HAL_ADC_ConfigChannel+0x4b4>
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800461a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800461c:	fa93 f3a3 	rbit	r3, r3
 8004620:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8004622:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004624:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8004626:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004628:	2b00      	cmp	r3, #0
 800462a:	d101      	bne.n	8004630 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 800462c:	2320      	movs	r3, #32
 800462e:	e003      	b.n	8004638 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8004630:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004632:	fab3 f383 	clz	r3, r3
 8004636:	b2db      	uxtb	r3, r3
 8004638:	3301      	adds	r3, #1
 800463a:	f003 031f 	and.w	r3, r3, #31
 800463e:	2b09      	cmp	r3, #9
 8004640:	bf94      	ite	ls
 8004642:	2301      	movls	r3, #1
 8004644:	2300      	movhi	r3, #0
 8004646:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004648:	2b00      	cmp	r3, #0
 800464a:	d079      	beq.n	8004740 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004654:	2b00      	cmp	r3, #0
 8004656:	d107      	bne.n	8004668 <HAL_ADC_ConfigChannel+0x4d4>
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	0e9b      	lsrs	r3, r3, #26
 800465e:	3301      	adds	r3, #1
 8004660:	069b      	lsls	r3, r3, #26
 8004662:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004666:	e015      	b.n	8004694 <HAL_ADC_ConfigChannel+0x500>
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800466e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004670:	fa93 f3a3 	rbit	r3, r3
 8004674:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004676:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004678:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800467a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800467c:	2b00      	cmp	r3, #0
 800467e:	d101      	bne.n	8004684 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8004680:	2320      	movs	r3, #32
 8004682:	e003      	b.n	800468c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8004684:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004686:	fab3 f383 	clz	r3, r3
 800468a:	b2db      	uxtb	r3, r3
 800468c:	3301      	adds	r3, #1
 800468e:	069b      	lsls	r3, r3, #26
 8004690:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800469c:	2b00      	cmp	r3, #0
 800469e:	d109      	bne.n	80046b4 <HAL_ADC_ConfigChannel+0x520>
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	0e9b      	lsrs	r3, r3, #26
 80046a6:	3301      	adds	r3, #1
 80046a8:	f003 031f 	and.w	r3, r3, #31
 80046ac:	2101      	movs	r1, #1
 80046ae:	fa01 f303 	lsl.w	r3, r1, r3
 80046b2:	e017      	b.n	80046e4 <HAL_ADC_ConfigChannel+0x550>
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80046bc:	fa93 f3a3 	rbit	r3, r3
 80046c0:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80046c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80046c4:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80046c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d101      	bne.n	80046d0 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80046cc:	2320      	movs	r3, #32
 80046ce:	e003      	b.n	80046d8 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80046d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80046d2:	fab3 f383 	clz	r3, r3
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	3301      	adds	r3, #1
 80046da:	f003 031f 	and.w	r3, r3, #31
 80046de:	2101      	movs	r1, #1
 80046e0:	fa01 f303 	lsl.w	r3, r1, r3
 80046e4:	ea42 0103 	orr.w	r1, r2, r3
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d10a      	bne.n	800470a <HAL_ADC_ConfigChannel+0x576>
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	0e9b      	lsrs	r3, r3, #26
 80046fa:	3301      	adds	r3, #1
 80046fc:	f003 021f 	and.w	r2, r3, #31
 8004700:	4613      	mov	r3, r2
 8004702:	005b      	lsls	r3, r3, #1
 8004704:	4413      	add	r3, r2
 8004706:	051b      	lsls	r3, r3, #20
 8004708:	e018      	b.n	800473c <HAL_ADC_ConfigChannel+0x5a8>
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004710:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004712:	fa93 f3a3 	rbit	r3, r3
 8004716:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004718:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800471a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800471c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800471e:	2b00      	cmp	r3, #0
 8004720:	d101      	bne.n	8004726 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8004722:	2320      	movs	r3, #32
 8004724:	e003      	b.n	800472e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8004726:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004728:	fab3 f383 	clz	r3, r3
 800472c:	b2db      	uxtb	r3, r3
 800472e:	3301      	adds	r3, #1
 8004730:	f003 021f 	and.w	r2, r3, #31
 8004734:	4613      	mov	r3, r2
 8004736:	005b      	lsls	r3, r3, #1
 8004738:	4413      	add	r3, r2
 800473a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800473c:	430b      	orrs	r3, r1
 800473e:	e07e      	b.n	800483e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004748:	2b00      	cmp	r3, #0
 800474a:	d107      	bne.n	800475c <HAL_ADC_ConfigChannel+0x5c8>
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	0e9b      	lsrs	r3, r3, #26
 8004752:	3301      	adds	r3, #1
 8004754:	069b      	lsls	r3, r3, #26
 8004756:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800475a:	e015      	b.n	8004788 <HAL_ADC_ConfigChannel+0x5f4>
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004762:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004764:	fa93 f3a3 	rbit	r3, r3
 8004768:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800476a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800476c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800476e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004770:	2b00      	cmp	r3, #0
 8004772:	d101      	bne.n	8004778 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8004774:	2320      	movs	r3, #32
 8004776:	e003      	b.n	8004780 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8004778:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800477a:	fab3 f383 	clz	r3, r3
 800477e:	b2db      	uxtb	r3, r3
 8004780:	3301      	adds	r3, #1
 8004782:	069b      	lsls	r3, r3, #26
 8004784:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004790:	2b00      	cmp	r3, #0
 8004792:	d109      	bne.n	80047a8 <HAL_ADC_ConfigChannel+0x614>
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	0e9b      	lsrs	r3, r3, #26
 800479a:	3301      	adds	r3, #1
 800479c:	f003 031f 	and.w	r3, r3, #31
 80047a0:	2101      	movs	r1, #1
 80047a2:	fa01 f303 	lsl.w	r3, r1, r3
 80047a6:	e017      	b.n	80047d8 <HAL_ADC_ConfigChannel+0x644>
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047ae:	6a3b      	ldr	r3, [r7, #32]
 80047b0:	fa93 f3a3 	rbit	r3, r3
 80047b4:	61fb      	str	r3, [r7, #28]
  return result;
 80047b6:	69fb      	ldr	r3, [r7, #28]
 80047b8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80047ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d101      	bne.n	80047c4 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80047c0:	2320      	movs	r3, #32
 80047c2:	e003      	b.n	80047cc <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80047c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047c6:	fab3 f383 	clz	r3, r3
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	3301      	adds	r3, #1
 80047ce:	f003 031f 	and.w	r3, r3, #31
 80047d2:	2101      	movs	r1, #1
 80047d4:	fa01 f303 	lsl.w	r3, r1, r3
 80047d8:	ea42 0103 	orr.w	r1, r2, r3
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d10d      	bne.n	8004804 <HAL_ADC_ConfigChannel+0x670>
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	0e9b      	lsrs	r3, r3, #26
 80047ee:	3301      	adds	r3, #1
 80047f0:	f003 021f 	and.w	r2, r3, #31
 80047f4:	4613      	mov	r3, r2
 80047f6:	005b      	lsls	r3, r3, #1
 80047f8:	4413      	add	r3, r2
 80047fa:	3b1e      	subs	r3, #30
 80047fc:	051b      	lsls	r3, r3, #20
 80047fe:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004802:	e01b      	b.n	800483c <HAL_ADC_ConfigChannel+0x6a8>
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	fa93 f3a3 	rbit	r3, r3
 8004810:	613b      	str	r3, [r7, #16]
  return result;
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004816:	69bb      	ldr	r3, [r7, #24]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d101      	bne.n	8004820 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 800481c:	2320      	movs	r3, #32
 800481e:	e003      	b.n	8004828 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8004820:	69bb      	ldr	r3, [r7, #24]
 8004822:	fab3 f383 	clz	r3, r3
 8004826:	b2db      	uxtb	r3, r3
 8004828:	3301      	adds	r3, #1
 800482a:	f003 021f 	and.w	r2, r3, #31
 800482e:	4613      	mov	r3, r2
 8004830:	005b      	lsls	r3, r3, #1
 8004832:	4413      	add	r3, r2
 8004834:	3b1e      	subs	r3, #30
 8004836:	051b      	lsls	r3, r3, #20
 8004838:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800483c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800483e:	683a      	ldr	r2, [r7, #0]
 8004840:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004842:	4619      	mov	r1, r3
 8004844:	f7ff f8c5 	bl	80039d2 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	4b09      	ldr	r3, [pc, #36]	@ (8004874 <HAL_ADC_ConfigChannel+0x6e0>)
 800484e:	4013      	ands	r3, r2
 8004850:	2b00      	cmp	r3, #0
 8004852:	f000 80be 	beq.w	80049d2 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800485e:	d004      	beq.n	800486a <HAL_ADC_ConfigChannel+0x6d6>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a04      	ldr	r2, [pc, #16]	@ (8004878 <HAL_ADC_ConfigChannel+0x6e4>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d10a      	bne.n	8004880 <HAL_ADC_ConfigChannel+0x6ec>
 800486a:	4b04      	ldr	r3, [pc, #16]	@ (800487c <HAL_ADC_ConfigChannel+0x6e8>)
 800486c:	e009      	b.n	8004882 <HAL_ADC_ConfigChannel+0x6ee>
 800486e:	bf00      	nop
 8004870:	407f0000 	.word	0x407f0000
 8004874:	80080000 	.word	0x80080000
 8004878:	50000100 	.word	0x50000100
 800487c:	50000300 	.word	0x50000300
 8004880:	4b59      	ldr	r3, [pc, #356]	@ (80049e8 <HAL_ADC_ConfigChannel+0x854>)
 8004882:	4618      	mov	r0, r3
 8004884:	f7fe ffba 	bl	80037fc <LL_ADC_GetCommonPathInternalCh>
 8004888:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a56      	ldr	r2, [pc, #344]	@ (80049ec <HAL_ADC_ConfigChannel+0x858>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d004      	beq.n	80048a0 <HAL_ADC_ConfigChannel+0x70c>
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a55      	ldr	r2, [pc, #340]	@ (80049f0 <HAL_ADC_ConfigChannel+0x85c>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d13a      	bne.n	8004916 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80048a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80048a4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d134      	bne.n	8004916 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80048b4:	d005      	beq.n	80048c2 <HAL_ADC_ConfigChannel+0x72e>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a4e      	ldr	r2, [pc, #312]	@ (80049f4 <HAL_ADC_ConfigChannel+0x860>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	f040 8085 	bne.w	80049cc <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80048ca:	d004      	beq.n	80048d6 <HAL_ADC_ConfigChannel+0x742>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a49      	ldr	r2, [pc, #292]	@ (80049f8 <HAL_ADC_ConfigChannel+0x864>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d101      	bne.n	80048da <HAL_ADC_ConfigChannel+0x746>
 80048d6:	4a49      	ldr	r2, [pc, #292]	@ (80049fc <HAL_ADC_ConfigChannel+0x868>)
 80048d8:	e000      	b.n	80048dc <HAL_ADC_ConfigChannel+0x748>
 80048da:	4a43      	ldr	r2, [pc, #268]	@ (80049e8 <HAL_ADC_ConfigChannel+0x854>)
 80048dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80048e0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80048e4:	4619      	mov	r1, r3
 80048e6:	4610      	mov	r0, r2
 80048e8:	f7fe ff75 	bl	80037d6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80048ec:	4b44      	ldr	r3, [pc, #272]	@ (8004a00 <HAL_ADC_ConfigChannel+0x86c>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	099b      	lsrs	r3, r3, #6
 80048f2:	4a44      	ldr	r2, [pc, #272]	@ (8004a04 <HAL_ADC_ConfigChannel+0x870>)
 80048f4:	fba2 2303 	umull	r2, r3, r2, r3
 80048f8:	099b      	lsrs	r3, r3, #6
 80048fa:	1c5a      	adds	r2, r3, #1
 80048fc:	4613      	mov	r3, r2
 80048fe:	005b      	lsls	r3, r3, #1
 8004900:	4413      	add	r3, r2
 8004902:	009b      	lsls	r3, r3, #2
 8004904:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004906:	e002      	b.n	800490e <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	3b01      	subs	r3, #1
 800490c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d1f9      	bne.n	8004908 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004914:	e05a      	b.n	80049cc <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a3b      	ldr	r2, [pc, #236]	@ (8004a08 <HAL_ADC_ConfigChannel+0x874>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d125      	bne.n	800496c <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004920:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004924:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004928:	2b00      	cmp	r3, #0
 800492a:	d11f      	bne.n	800496c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a31      	ldr	r2, [pc, #196]	@ (80049f8 <HAL_ADC_ConfigChannel+0x864>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d104      	bne.n	8004940 <HAL_ADC_ConfigChannel+0x7ac>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a34      	ldr	r2, [pc, #208]	@ (8004a0c <HAL_ADC_ConfigChannel+0x878>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d047      	beq.n	80049d0 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004948:	d004      	beq.n	8004954 <HAL_ADC_ConfigChannel+0x7c0>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a2a      	ldr	r2, [pc, #168]	@ (80049f8 <HAL_ADC_ConfigChannel+0x864>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d101      	bne.n	8004958 <HAL_ADC_ConfigChannel+0x7c4>
 8004954:	4a29      	ldr	r2, [pc, #164]	@ (80049fc <HAL_ADC_ConfigChannel+0x868>)
 8004956:	e000      	b.n	800495a <HAL_ADC_ConfigChannel+0x7c6>
 8004958:	4a23      	ldr	r2, [pc, #140]	@ (80049e8 <HAL_ADC_ConfigChannel+0x854>)
 800495a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800495e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004962:	4619      	mov	r1, r3
 8004964:	4610      	mov	r0, r2
 8004966:	f7fe ff36 	bl	80037d6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800496a:	e031      	b.n	80049d0 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a27      	ldr	r2, [pc, #156]	@ (8004a10 <HAL_ADC_ConfigChannel+0x87c>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d12d      	bne.n	80049d2 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004976:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800497a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800497e:	2b00      	cmp	r3, #0
 8004980:	d127      	bne.n	80049d2 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a1c      	ldr	r2, [pc, #112]	@ (80049f8 <HAL_ADC_ConfigChannel+0x864>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d022      	beq.n	80049d2 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004994:	d004      	beq.n	80049a0 <HAL_ADC_ConfigChannel+0x80c>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a17      	ldr	r2, [pc, #92]	@ (80049f8 <HAL_ADC_ConfigChannel+0x864>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d101      	bne.n	80049a4 <HAL_ADC_ConfigChannel+0x810>
 80049a0:	4a16      	ldr	r2, [pc, #88]	@ (80049fc <HAL_ADC_ConfigChannel+0x868>)
 80049a2:	e000      	b.n	80049a6 <HAL_ADC_ConfigChannel+0x812>
 80049a4:	4a10      	ldr	r2, [pc, #64]	@ (80049e8 <HAL_ADC_ConfigChannel+0x854>)
 80049a6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80049aa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80049ae:	4619      	mov	r1, r3
 80049b0:	4610      	mov	r0, r2
 80049b2:	f7fe ff10 	bl	80037d6 <LL_ADC_SetCommonPathInternalCh>
 80049b6:	e00c      	b.n	80049d2 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049bc:	f043 0220 	orr.w	r2, r3, #32
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80049ca:	e002      	b.n	80049d2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80049cc:	bf00      	nop
 80049ce:	e000      	b.n	80049d2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80049d0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2200      	movs	r2, #0
 80049d6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80049da:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80049de:	4618      	mov	r0, r3
 80049e0:	37d8      	adds	r7, #216	@ 0xd8
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}
 80049e6:	bf00      	nop
 80049e8:	50000700 	.word	0x50000700
 80049ec:	c3210000 	.word	0xc3210000
 80049f0:	90c00010 	.word	0x90c00010
 80049f4:	50000600 	.word	0x50000600
 80049f8:	50000100 	.word	0x50000100
 80049fc:	50000300 	.word	0x50000300
 8004a00:	20000200 	.word	0x20000200
 8004a04:	053e2d63 	.word	0x053e2d63
 8004a08:	c7520000 	.word	0xc7520000
 8004a0c:	50000500 	.word	0x50000500
 8004a10:	cb840000 	.word	0xcb840000

08004a14 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b084      	sub	sp, #16
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4618      	mov	r0, r3
 8004a26:	f7ff f8a7 	bl	8003b78 <LL_ADC_IsEnabled>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d176      	bne.n	8004b1e <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	689a      	ldr	r2, [r3, #8]
 8004a36:	4b3c      	ldr	r3, [pc, #240]	@ (8004b28 <ADC_Enable+0x114>)
 8004a38:	4013      	ands	r3, r2
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d00d      	beq.n	8004a5a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a42:	f043 0210 	orr.w	r2, r3, #16
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a4e:	f043 0201 	orr.w	r2, r3, #1
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e062      	b.n	8004b20 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f7ff f862 	bl	8003b28 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004a6c:	d004      	beq.n	8004a78 <ADC_Enable+0x64>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a2e      	ldr	r2, [pc, #184]	@ (8004b2c <ADC_Enable+0x118>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d101      	bne.n	8004a7c <ADC_Enable+0x68>
 8004a78:	4b2d      	ldr	r3, [pc, #180]	@ (8004b30 <ADC_Enable+0x11c>)
 8004a7a:	e000      	b.n	8004a7e <ADC_Enable+0x6a>
 8004a7c:	4b2d      	ldr	r3, [pc, #180]	@ (8004b34 <ADC_Enable+0x120>)
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f7fe febc 	bl	80037fc <LL_ADC_GetCommonPathInternalCh>
 8004a84:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004a86:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d013      	beq.n	8004ab6 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004a8e:	4b2a      	ldr	r3, [pc, #168]	@ (8004b38 <ADC_Enable+0x124>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	099b      	lsrs	r3, r3, #6
 8004a94:	4a29      	ldr	r2, [pc, #164]	@ (8004b3c <ADC_Enable+0x128>)
 8004a96:	fba2 2303 	umull	r2, r3, r2, r3
 8004a9a:	099b      	lsrs	r3, r3, #6
 8004a9c:	1c5a      	adds	r2, r3, #1
 8004a9e:	4613      	mov	r3, r2
 8004aa0:	005b      	lsls	r3, r3, #1
 8004aa2:	4413      	add	r3, r2
 8004aa4:	009b      	lsls	r3, r3, #2
 8004aa6:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004aa8:	e002      	b.n	8004ab0 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	3b01      	subs	r3, #1
 8004aae:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d1f9      	bne.n	8004aaa <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004ab6:	f7fe fe6f 	bl	8003798 <HAL_GetTick>
 8004aba:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004abc:	e028      	b.n	8004b10 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f7ff f858 	bl	8003b78 <LL_ADC_IsEnabled>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d104      	bne.n	8004ad8 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f7ff f828 	bl	8003b28 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004ad8:	f7fe fe5e 	bl	8003798 <HAL_GetTick>
 8004adc:	4602      	mov	r2, r0
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	1ad3      	subs	r3, r2, r3
 8004ae2:	2b02      	cmp	r3, #2
 8004ae4:	d914      	bls.n	8004b10 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 0301 	and.w	r3, r3, #1
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d00d      	beq.n	8004b10 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004af8:	f043 0210 	orr.w	r2, r3, #16
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b04:	f043 0201 	orr.w	r2, r3, #1
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e007      	b.n	8004b20 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 0301 	and.w	r3, r3, #1
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d1cf      	bne.n	8004abe <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004b1e:	2300      	movs	r3, #0
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	3710      	adds	r7, #16
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}
 8004b28:	8000003f 	.word	0x8000003f
 8004b2c:	50000100 	.word	0x50000100
 8004b30:	50000300 	.word	0x50000300
 8004b34:	50000700 	.word	0x50000700
 8004b38:	20000200 	.word	0x20000200
 8004b3c:	053e2d63 	.word	0x053e2d63

08004b40 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b084      	sub	sp, #16
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	f7ff f826 	bl	8003b9e <LL_ADC_IsDisableOngoing>
 8004b52:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f7ff f80d 	bl	8003b78 <LL_ADC_IsEnabled>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d047      	beq.n	8004bf4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d144      	bne.n	8004bf4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	f003 030d 	and.w	r3, r3, #13
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d10c      	bne.n	8004b92 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f7fe ffe7 	bl	8003b50 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	2203      	movs	r2, #3
 8004b88:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004b8a:	f7fe fe05 	bl	8003798 <HAL_GetTick>
 8004b8e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004b90:	e029      	b.n	8004be6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b96:	f043 0210 	orr.w	r2, r3, #16
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ba2:	f043 0201 	orr.w	r2, r3, #1
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e023      	b.n	8004bf6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004bae:	f7fe fdf3 	bl	8003798 <HAL_GetTick>
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	1ad3      	subs	r3, r2, r3
 8004bb8:	2b02      	cmp	r3, #2
 8004bba:	d914      	bls.n	8004be6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	f003 0301 	and.w	r3, r3, #1
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d00d      	beq.n	8004be6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bce:	f043 0210 	orr.w	r2, r3, #16
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bda:	f043 0201 	orr.w	r2, r3, #1
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	e007      	b.n	8004bf6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	f003 0301 	and.w	r3, r3, #1
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d1dc      	bne.n	8004bae <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004bf4:	2300      	movs	r3, #0
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3710      	adds	r7, #16
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}

08004bfe <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004bfe:	b580      	push	{r7, lr}
 8004c00:	b084      	sub	sp, #16
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c0a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c10:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d14b      	bne.n	8004cb0 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c1c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f003 0308 	and.w	r3, r3, #8
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d021      	beq.n	8004c76 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4618      	mov	r0, r3
 8004c38:	f7fe fe8c 	bl	8003954 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d032      	beq.n	8004ca8 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d12b      	bne.n	8004ca8 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c54:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c60:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d11f      	bne.n	8004ca8 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c6c:	f043 0201 	orr.w	r2, r3, #1
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004c74:	e018      	b.n	8004ca8 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	f003 0302 	and.w	r3, r3, #2
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d111      	bne.n	8004ca8 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c88:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c94:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d105      	bne.n	8004ca8 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ca0:	f043 0201 	orr.w	r2, r3, #1
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004ca8:	68f8      	ldr	r0, [r7, #12]
 8004caa:	f7ff fa55 	bl	8004158 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004cae:	e00e      	b.n	8004cce <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cb4:	f003 0310 	and.w	r3, r3, #16
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d003      	beq.n	8004cc4 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004cbc:	68f8      	ldr	r0, [r7, #12]
 8004cbe:	f7ff fa5f 	bl	8004180 <HAL_ADC_ErrorCallback>
}
 8004cc2:	e004      	b.n	8004cce <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	4798      	blx	r3
}
 8004cce:	bf00      	nop
 8004cd0:	3710      	adds	r7, #16
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}

08004cd6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004cd6:	b580      	push	{r7, lr}
 8004cd8:	b084      	sub	sp, #16
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ce2:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004ce4:	68f8      	ldr	r0, [r7, #12]
 8004ce6:	f7ff fa41 	bl	800416c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004cea:	bf00      	nop
 8004cec:	3710      	adds	r7, #16
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}

08004cf2 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004cf2:	b580      	push	{r7, lr}
 8004cf4:	b084      	sub	sp, #16
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cfe:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d04:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d10:	f043 0204 	orr.w	r2, r3, #4
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004d18:	68f8      	ldr	r0, [r7, #12]
 8004d1a:	f7ff fa31 	bl	8004180 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004d1e:	bf00      	nop
 8004d20:	3710      	adds	r7, #16
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}

08004d26 <LL_ADC_IsEnabled>:
{
 8004d26:	b480      	push	{r7}
 8004d28:	b083      	sub	sp, #12
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	f003 0301 	and.w	r3, r3, #1
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d101      	bne.n	8004d3e <LL_ADC_IsEnabled+0x18>
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e000      	b.n	8004d40 <LL_ADC_IsEnabled+0x1a>
 8004d3e:	2300      	movs	r3, #0
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	370c      	adds	r7, #12
 8004d44:	46bd      	mov	sp, r7
 8004d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4a:	4770      	bx	lr

08004d4c <LL_ADC_StartCalibration>:
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b083      	sub	sp, #12
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
 8004d54:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8004d5e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004d62:	683a      	ldr	r2, [r7, #0]
 8004d64:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	609a      	str	r2, [r3, #8]
}
 8004d72:	bf00      	nop
 8004d74:	370c      	adds	r7, #12
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr

08004d7e <LL_ADC_IsCalibrationOnGoing>:
{
 8004d7e:	b480      	push	{r7}
 8004d80:	b083      	sub	sp, #12
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004d8e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004d92:	d101      	bne.n	8004d98 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004d94:	2301      	movs	r3, #1
 8004d96:	e000      	b.n	8004d9a <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004d98:	2300      	movs	r3, #0
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	370c      	adds	r7, #12
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da4:	4770      	bx	lr

08004da6 <LL_ADC_REG_IsConversionOngoing>:
{
 8004da6:	b480      	push	{r7}
 8004da8:	b083      	sub	sp, #12
 8004daa:	af00      	add	r7, sp, #0
 8004dac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	f003 0304 	and.w	r3, r3, #4
 8004db6:	2b04      	cmp	r3, #4
 8004db8:	d101      	bne.n	8004dbe <LL_ADC_REG_IsConversionOngoing+0x18>
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e000      	b.n	8004dc0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004dbe:	2300      	movs	r3, #0
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	370c      	adds	r7, #12
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr

08004dcc <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b084      	sub	sp, #16
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	d101      	bne.n	8004de8 <HAL_ADCEx_Calibration_Start+0x1c>
 8004de4:	2302      	movs	r3, #2
 8004de6:	e04d      	b.n	8004e84 <HAL_ADCEx_Calibration_Start+0xb8>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2201      	movs	r2, #1
 8004dec:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f7ff fea5 	bl	8004b40 <ADC_Disable>
 8004df6:	4603      	mov	r3, r0
 8004df8:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004dfa:	7bfb      	ldrb	r3, [r7, #15]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d136      	bne.n	8004e6e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e04:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004e08:	f023 0302 	bic.w	r3, r3, #2
 8004e0c:	f043 0202 	orr.w	r2, r3, #2
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	6839      	ldr	r1, [r7, #0]
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f7ff ff96 	bl	8004d4c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004e20:	e014      	b.n	8004e4c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	3301      	adds	r3, #1
 8004e26:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	4a18      	ldr	r2, [pc, #96]	@ (8004e8c <HAL_ADCEx_Calibration_Start+0xc0>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d90d      	bls.n	8004e4c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e34:	f023 0312 	bic.w	r3, r3, #18
 8004e38:	f043 0210 	orr.w	r2, r3, #16
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	e01b      	b.n	8004e84 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4618      	mov	r0, r3
 8004e52:	f7ff ff94 	bl	8004d7e <LL_ADC_IsCalibrationOnGoing>
 8004e56:	4603      	mov	r3, r0
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d1e2      	bne.n	8004e22 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e60:	f023 0303 	bic.w	r3, r3, #3
 8004e64:	f043 0201 	orr.w	r2, r3, #1
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004e6c:	e005      	b.n	8004e7a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e72:	f043 0210 	orr.w	r2, r3, #16
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004e82:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	3710      	adds	r7, #16
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}
 8004e8c:	0004de01 	.word	0x0004de01

08004e90 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004e90:	b590      	push	{r4, r7, lr}
 8004e92:	b0a1      	sub	sp, #132	@ 0x84
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
 8004e98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d101      	bne.n	8004eae <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004eaa:	2302      	movs	r3, #2
 8004eac:	e0e7      	b.n	800507e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004eba:	2300      	movs	r3, #0
 8004ebc:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004ec6:	d102      	bne.n	8004ece <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004ec8:	4b6f      	ldr	r3, [pc, #444]	@ (8005088 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004eca:	60bb      	str	r3, [r7, #8]
 8004ecc:	e009      	b.n	8004ee2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a6e      	ldr	r2, [pc, #440]	@ (800508c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d102      	bne.n	8004ede <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8004ed8:	4b6d      	ldr	r3, [pc, #436]	@ (8005090 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004eda:	60bb      	str	r3, [r7, #8]
 8004edc:	e001      	b.n	8004ee2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004ede:	2300      	movs	r3, #0
 8004ee0:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d10b      	bne.n	8004f00 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004eec:	f043 0220 	orr.w	r2, r3, #32
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	e0be      	b.n	800507e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	4618      	mov	r0, r3
 8004f04:	f7ff ff4f 	bl	8004da6 <LL_ADC_REG_IsConversionOngoing>
 8004f08:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f7ff ff49 	bl	8004da6 <LL_ADC_REG_IsConversionOngoing>
 8004f14:	4603      	mov	r3, r0
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	f040 80a0 	bne.w	800505c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004f1c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	f040 809c 	bne.w	800505c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004f2c:	d004      	beq.n	8004f38 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a55      	ldr	r2, [pc, #340]	@ (8005088 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d101      	bne.n	8004f3c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004f38:	4b56      	ldr	r3, [pc, #344]	@ (8005094 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8004f3a:	e000      	b.n	8004f3e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004f3c:	4b56      	ldr	r3, [pc, #344]	@ (8005098 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8004f3e:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d04b      	beq.n	8004fe0 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004f48:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	6859      	ldr	r1, [r3, #4]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004f5a:	035b      	lsls	r3, r3, #13
 8004f5c:	430b      	orrs	r3, r1
 8004f5e:	431a      	orrs	r2, r3
 8004f60:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004f62:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004f6c:	d004      	beq.n	8004f78 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a45      	ldr	r2, [pc, #276]	@ (8005088 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d10f      	bne.n	8004f98 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8004f78:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004f7c:	f7ff fed3 	bl	8004d26 <LL_ADC_IsEnabled>
 8004f80:	4604      	mov	r4, r0
 8004f82:	4841      	ldr	r0, [pc, #260]	@ (8005088 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004f84:	f7ff fecf 	bl	8004d26 <LL_ADC_IsEnabled>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	4323      	orrs	r3, r4
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	bf0c      	ite	eq
 8004f90:	2301      	moveq	r3, #1
 8004f92:	2300      	movne	r3, #0
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	e012      	b.n	8004fbe <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8004f98:	483c      	ldr	r0, [pc, #240]	@ (800508c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004f9a:	f7ff fec4 	bl	8004d26 <LL_ADC_IsEnabled>
 8004f9e:	4604      	mov	r4, r0
 8004fa0:	483b      	ldr	r0, [pc, #236]	@ (8005090 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004fa2:	f7ff fec0 	bl	8004d26 <LL_ADC_IsEnabled>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	431c      	orrs	r4, r3
 8004faa:	483c      	ldr	r0, [pc, #240]	@ (800509c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004fac:	f7ff febb 	bl	8004d26 <LL_ADC_IsEnabled>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	4323      	orrs	r3, r4
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	bf0c      	ite	eq
 8004fb8:	2301      	moveq	r3, #1
 8004fba:	2300      	movne	r3, #0
 8004fbc:	b2db      	uxtb	r3, r3
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d056      	beq.n	8005070 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004fc2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004fca:	f023 030f 	bic.w	r3, r3, #15
 8004fce:	683a      	ldr	r2, [r7, #0]
 8004fd0:	6811      	ldr	r1, [r2, #0]
 8004fd2:	683a      	ldr	r2, [r7, #0]
 8004fd4:	6892      	ldr	r2, [r2, #8]
 8004fd6:	430a      	orrs	r2, r1
 8004fd8:	431a      	orrs	r2, r3
 8004fda:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004fdc:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004fde:	e047      	b.n	8005070 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004fe0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004fe8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004fea:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004ff4:	d004      	beq.n	8005000 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a23      	ldr	r2, [pc, #140]	@ (8005088 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d10f      	bne.n	8005020 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8005000:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005004:	f7ff fe8f 	bl	8004d26 <LL_ADC_IsEnabled>
 8005008:	4604      	mov	r4, r0
 800500a:	481f      	ldr	r0, [pc, #124]	@ (8005088 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800500c:	f7ff fe8b 	bl	8004d26 <LL_ADC_IsEnabled>
 8005010:	4603      	mov	r3, r0
 8005012:	4323      	orrs	r3, r4
 8005014:	2b00      	cmp	r3, #0
 8005016:	bf0c      	ite	eq
 8005018:	2301      	moveq	r3, #1
 800501a:	2300      	movne	r3, #0
 800501c:	b2db      	uxtb	r3, r3
 800501e:	e012      	b.n	8005046 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8005020:	481a      	ldr	r0, [pc, #104]	@ (800508c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005022:	f7ff fe80 	bl	8004d26 <LL_ADC_IsEnabled>
 8005026:	4604      	mov	r4, r0
 8005028:	4819      	ldr	r0, [pc, #100]	@ (8005090 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800502a:	f7ff fe7c 	bl	8004d26 <LL_ADC_IsEnabled>
 800502e:	4603      	mov	r3, r0
 8005030:	431c      	orrs	r4, r3
 8005032:	481a      	ldr	r0, [pc, #104]	@ (800509c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8005034:	f7ff fe77 	bl	8004d26 <LL_ADC_IsEnabled>
 8005038:	4603      	mov	r3, r0
 800503a:	4323      	orrs	r3, r4
 800503c:	2b00      	cmp	r3, #0
 800503e:	bf0c      	ite	eq
 8005040:	2301      	moveq	r3, #1
 8005042:	2300      	movne	r3, #0
 8005044:	b2db      	uxtb	r3, r3
 8005046:	2b00      	cmp	r3, #0
 8005048:	d012      	beq.n	8005070 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800504a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005052:	f023 030f 	bic.w	r3, r3, #15
 8005056:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8005058:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800505a:	e009      	b.n	8005070 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005060:	f043 0220 	orr.w	r2, r3, #32
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800506e:	e000      	b.n	8005072 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005070:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2200      	movs	r2, #0
 8005076:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800507a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800507e:	4618      	mov	r0, r3
 8005080:	3784      	adds	r7, #132	@ 0x84
 8005082:	46bd      	mov	sp, r7
 8005084:	bd90      	pop	{r4, r7, pc}
 8005086:	bf00      	nop
 8005088:	50000100 	.word	0x50000100
 800508c:	50000400 	.word	0x50000400
 8005090:	50000500 	.word	0x50000500
 8005094:	50000300 	.word	0x50000300
 8005098:	50000700 	.word	0x50000700
 800509c:	50000600 	.word	0x50000600

080050a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b085      	sub	sp, #20
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	f003 0307 	and.w	r3, r3, #7
 80050ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80050b0:	4b0c      	ldr	r3, [pc, #48]	@ (80050e4 <__NVIC_SetPriorityGrouping+0x44>)
 80050b2:	68db      	ldr	r3, [r3, #12]
 80050b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80050b6:	68ba      	ldr	r2, [r7, #8]
 80050b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80050bc:	4013      	ands	r3, r2
 80050be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80050c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80050cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80050d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80050d2:	4a04      	ldr	r2, [pc, #16]	@ (80050e4 <__NVIC_SetPriorityGrouping+0x44>)
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	60d3      	str	r3, [r2, #12]
}
 80050d8:	bf00      	nop
 80050da:	3714      	adds	r7, #20
 80050dc:	46bd      	mov	sp, r7
 80050de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e2:	4770      	bx	lr
 80050e4:	e000ed00 	.word	0xe000ed00

080050e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80050e8:	b480      	push	{r7}
 80050ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80050ec:	4b04      	ldr	r3, [pc, #16]	@ (8005100 <__NVIC_GetPriorityGrouping+0x18>)
 80050ee:	68db      	ldr	r3, [r3, #12]
 80050f0:	0a1b      	lsrs	r3, r3, #8
 80050f2:	f003 0307 	and.w	r3, r3, #7
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	46bd      	mov	sp, r7
 80050fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fe:	4770      	bx	lr
 8005100:	e000ed00 	.word	0xe000ed00

08005104 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005104:	b480      	push	{r7}
 8005106:	b083      	sub	sp, #12
 8005108:	af00      	add	r7, sp, #0
 800510a:	4603      	mov	r3, r0
 800510c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800510e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005112:	2b00      	cmp	r3, #0
 8005114:	db0b      	blt.n	800512e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005116:	79fb      	ldrb	r3, [r7, #7]
 8005118:	f003 021f 	and.w	r2, r3, #31
 800511c:	4907      	ldr	r1, [pc, #28]	@ (800513c <__NVIC_EnableIRQ+0x38>)
 800511e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005122:	095b      	lsrs	r3, r3, #5
 8005124:	2001      	movs	r0, #1
 8005126:	fa00 f202 	lsl.w	r2, r0, r2
 800512a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800512e:	bf00      	nop
 8005130:	370c      	adds	r7, #12
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr
 800513a:	bf00      	nop
 800513c:	e000e100 	.word	0xe000e100

08005140 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005140:	b480      	push	{r7}
 8005142:	b083      	sub	sp, #12
 8005144:	af00      	add	r7, sp, #0
 8005146:	4603      	mov	r3, r0
 8005148:	6039      	str	r1, [r7, #0]
 800514a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800514c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005150:	2b00      	cmp	r3, #0
 8005152:	db0a      	blt.n	800516a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	b2da      	uxtb	r2, r3
 8005158:	490c      	ldr	r1, [pc, #48]	@ (800518c <__NVIC_SetPriority+0x4c>)
 800515a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800515e:	0112      	lsls	r2, r2, #4
 8005160:	b2d2      	uxtb	r2, r2
 8005162:	440b      	add	r3, r1
 8005164:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005168:	e00a      	b.n	8005180 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	b2da      	uxtb	r2, r3
 800516e:	4908      	ldr	r1, [pc, #32]	@ (8005190 <__NVIC_SetPriority+0x50>)
 8005170:	79fb      	ldrb	r3, [r7, #7]
 8005172:	f003 030f 	and.w	r3, r3, #15
 8005176:	3b04      	subs	r3, #4
 8005178:	0112      	lsls	r2, r2, #4
 800517a:	b2d2      	uxtb	r2, r2
 800517c:	440b      	add	r3, r1
 800517e:	761a      	strb	r2, [r3, #24]
}
 8005180:	bf00      	nop
 8005182:	370c      	adds	r7, #12
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr
 800518c:	e000e100 	.word	0xe000e100
 8005190:	e000ed00 	.word	0xe000ed00

08005194 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005194:	b480      	push	{r7}
 8005196:	b089      	sub	sp, #36	@ 0x24
 8005198:	af00      	add	r7, sp, #0
 800519a:	60f8      	str	r0, [r7, #12]
 800519c:	60b9      	str	r1, [r7, #8]
 800519e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f003 0307 	and.w	r3, r3, #7
 80051a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80051a8:	69fb      	ldr	r3, [r7, #28]
 80051aa:	f1c3 0307 	rsb	r3, r3, #7
 80051ae:	2b04      	cmp	r3, #4
 80051b0:	bf28      	it	cs
 80051b2:	2304      	movcs	r3, #4
 80051b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80051b6:	69fb      	ldr	r3, [r7, #28]
 80051b8:	3304      	adds	r3, #4
 80051ba:	2b06      	cmp	r3, #6
 80051bc:	d902      	bls.n	80051c4 <NVIC_EncodePriority+0x30>
 80051be:	69fb      	ldr	r3, [r7, #28]
 80051c0:	3b03      	subs	r3, #3
 80051c2:	e000      	b.n	80051c6 <NVIC_EncodePriority+0x32>
 80051c4:	2300      	movs	r3, #0
 80051c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80051c8:	f04f 32ff 	mov.w	r2, #4294967295
 80051cc:	69bb      	ldr	r3, [r7, #24]
 80051ce:	fa02 f303 	lsl.w	r3, r2, r3
 80051d2:	43da      	mvns	r2, r3
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	401a      	ands	r2, r3
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80051dc:	f04f 31ff 	mov.w	r1, #4294967295
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	fa01 f303 	lsl.w	r3, r1, r3
 80051e6:	43d9      	mvns	r1, r3
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80051ec:	4313      	orrs	r3, r2
         );
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3724      	adds	r7, #36	@ 0x24
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr
	...

080051fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b082      	sub	sp, #8
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	3b01      	subs	r3, #1
 8005208:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800520c:	d301      	bcc.n	8005212 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800520e:	2301      	movs	r3, #1
 8005210:	e00f      	b.n	8005232 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005212:	4a0a      	ldr	r2, [pc, #40]	@ (800523c <SysTick_Config+0x40>)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	3b01      	subs	r3, #1
 8005218:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800521a:	210f      	movs	r1, #15
 800521c:	f04f 30ff 	mov.w	r0, #4294967295
 8005220:	f7ff ff8e 	bl	8005140 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005224:	4b05      	ldr	r3, [pc, #20]	@ (800523c <SysTick_Config+0x40>)
 8005226:	2200      	movs	r2, #0
 8005228:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800522a:	4b04      	ldr	r3, [pc, #16]	@ (800523c <SysTick_Config+0x40>)
 800522c:	2207      	movs	r2, #7
 800522e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005230:	2300      	movs	r3, #0
}
 8005232:	4618      	mov	r0, r3
 8005234:	3708      	adds	r7, #8
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}
 800523a:	bf00      	nop
 800523c:	e000e010 	.word	0xe000e010

08005240 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b082      	sub	sp, #8
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	f7ff ff29 	bl	80050a0 <__NVIC_SetPriorityGrouping>
}
 800524e:	bf00      	nop
 8005250:	3708      	adds	r7, #8
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}

08005256 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005256:	b580      	push	{r7, lr}
 8005258:	b086      	sub	sp, #24
 800525a:	af00      	add	r7, sp, #0
 800525c:	4603      	mov	r3, r0
 800525e:	60b9      	str	r1, [r7, #8]
 8005260:	607a      	str	r2, [r7, #4]
 8005262:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005264:	f7ff ff40 	bl	80050e8 <__NVIC_GetPriorityGrouping>
 8005268:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800526a:	687a      	ldr	r2, [r7, #4]
 800526c:	68b9      	ldr	r1, [r7, #8]
 800526e:	6978      	ldr	r0, [r7, #20]
 8005270:	f7ff ff90 	bl	8005194 <NVIC_EncodePriority>
 8005274:	4602      	mov	r2, r0
 8005276:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800527a:	4611      	mov	r1, r2
 800527c:	4618      	mov	r0, r3
 800527e:	f7ff ff5f 	bl	8005140 <__NVIC_SetPriority>
}
 8005282:	bf00      	nop
 8005284:	3718      	adds	r7, #24
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}

0800528a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800528a:	b580      	push	{r7, lr}
 800528c:	b082      	sub	sp, #8
 800528e:	af00      	add	r7, sp, #0
 8005290:	4603      	mov	r3, r0
 8005292:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005294:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005298:	4618      	mov	r0, r3
 800529a:	f7ff ff33 	bl	8005104 <__NVIC_EnableIRQ>
}
 800529e:	bf00      	nop
 80052a0:	3708      	adds	r7, #8
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}

080052a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80052a6:	b580      	push	{r7, lr}
 80052a8:	b082      	sub	sp, #8
 80052aa:	af00      	add	r7, sp, #0
 80052ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f7ff ffa4 	bl	80051fc <SysTick_Config>
 80052b4:	4603      	mov	r3, r0
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3708      	adds	r7, #8
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}
	...

080052c0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b084      	sub	sp, #16
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d101      	bne.n	80052d2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e08d      	b.n	80053ee <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	461a      	mov	r2, r3
 80052d8:	4b47      	ldr	r3, [pc, #284]	@ (80053f8 <HAL_DMA_Init+0x138>)
 80052da:	429a      	cmp	r2, r3
 80052dc:	d80f      	bhi.n	80052fe <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	461a      	mov	r2, r3
 80052e4:	4b45      	ldr	r3, [pc, #276]	@ (80053fc <HAL_DMA_Init+0x13c>)
 80052e6:	4413      	add	r3, r2
 80052e8:	4a45      	ldr	r2, [pc, #276]	@ (8005400 <HAL_DMA_Init+0x140>)
 80052ea:	fba2 2303 	umull	r2, r3, r2, r3
 80052ee:	091b      	lsrs	r3, r3, #4
 80052f0:	009a      	lsls	r2, r3, #2
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	4a42      	ldr	r2, [pc, #264]	@ (8005404 <HAL_DMA_Init+0x144>)
 80052fa:	641a      	str	r2, [r3, #64]	@ 0x40
 80052fc:	e00e      	b.n	800531c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	461a      	mov	r2, r3
 8005304:	4b40      	ldr	r3, [pc, #256]	@ (8005408 <HAL_DMA_Init+0x148>)
 8005306:	4413      	add	r3, r2
 8005308:	4a3d      	ldr	r2, [pc, #244]	@ (8005400 <HAL_DMA_Init+0x140>)
 800530a:	fba2 2303 	umull	r2, r3, r2, r3
 800530e:	091b      	lsrs	r3, r3, #4
 8005310:	009a      	lsls	r2, r3, #2
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4a3c      	ldr	r2, [pc, #240]	@ (800540c <HAL_DMA_Init+0x14c>)
 800531a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2202      	movs	r2, #2
 8005320:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8005332:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005336:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005340:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	691b      	ldr	r3, [r3, #16]
 8005346:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800534c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	699b      	ldr	r3, [r3, #24]
 8005352:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005358:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6a1b      	ldr	r3, [r3, #32]
 800535e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005360:	68fa      	ldr	r2, [r7, #12]
 8005362:	4313      	orrs	r3, r2
 8005364:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	68fa      	ldr	r2, [r7, #12]
 800536c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f000 fa76 	bl	8005860 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800537c:	d102      	bne.n	8005384 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2200      	movs	r2, #0
 8005382:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	685a      	ldr	r2, [r3, #4]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800538c:	b2d2      	uxtb	r2, r2
 800538e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005394:	687a      	ldr	r2, [r7, #4]
 8005396:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005398:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d010      	beq.n	80053c4 <HAL_DMA_Init+0x104>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	2b04      	cmp	r3, #4
 80053a8:	d80c      	bhi.n	80053c4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f000 fa96 	bl	80058dc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053b4:	2200      	movs	r2, #0
 80053b6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053bc:	687a      	ldr	r2, [r7, #4]
 80053be:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80053c0:	605a      	str	r2, [r3, #4]
 80053c2:	e008      	b.n	80053d6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2200      	movs	r2, #0
 80053c8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2200      	movs	r2, #0
 80053ce:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2200      	movs	r2, #0
 80053d4:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2200      	movs	r2, #0
 80053da:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2201      	movs	r2, #1
 80053e0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2200      	movs	r2, #0
 80053e8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80053ec:	2300      	movs	r3, #0
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	3710      	adds	r7, #16
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}
 80053f6:	bf00      	nop
 80053f8:	40020407 	.word	0x40020407
 80053fc:	bffdfff8 	.word	0xbffdfff8
 8005400:	cccccccd 	.word	0xcccccccd
 8005404:	40020000 	.word	0x40020000
 8005408:	bffdfbf8 	.word	0xbffdfbf8
 800540c:	40020400 	.word	0x40020400

08005410 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b086      	sub	sp, #24
 8005414:	af00      	add	r7, sp, #0
 8005416:	60f8      	str	r0, [r7, #12]
 8005418:	60b9      	str	r1, [r7, #8]
 800541a:	607a      	str	r2, [r7, #4]
 800541c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800541e:	2300      	movs	r3, #0
 8005420:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005428:	2b01      	cmp	r3, #1
 800542a:	d101      	bne.n	8005430 <HAL_DMA_Start_IT+0x20>
 800542c:	2302      	movs	r3, #2
 800542e:	e066      	b.n	80054fe <HAL_DMA_Start_IT+0xee>
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2201      	movs	r2, #1
 8005434:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800543e:	b2db      	uxtb	r3, r3
 8005440:	2b01      	cmp	r3, #1
 8005442:	d155      	bne.n	80054f0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2202      	movs	r2, #2
 8005448:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2200      	movs	r2, #0
 8005450:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	681a      	ldr	r2, [r3, #0]
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f022 0201 	bic.w	r2, r2, #1
 8005460:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	687a      	ldr	r2, [r7, #4]
 8005466:	68b9      	ldr	r1, [r7, #8]
 8005468:	68f8      	ldr	r0, [r7, #12]
 800546a:	f000 f9bb 	bl	80057e4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005472:	2b00      	cmp	r3, #0
 8005474:	d008      	beq.n	8005488 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f042 020e 	orr.w	r2, r2, #14
 8005484:	601a      	str	r2, [r3, #0]
 8005486:	e00f      	b.n	80054a8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f022 0204 	bic.w	r2, r2, #4
 8005496:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	681a      	ldr	r2, [r3, #0]
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f042 020a 	orr.w	r2, r2, #10
 80054a6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d007      	beq.n	80054c6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054c0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80054c4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d007      	beq.n	80054de <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054d8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80054dc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f042 0201 	orr.w	r2, r2, #1
 80054ec:	601a      	str	r2, [r3, #0]
 80054ee:	e005      	b.n	80054fc <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2200      	movs	r2, #0
 80054f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80054f8:	2302      	movs	r3, #2
 80054fa:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80054fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3718      	adds	r7, #24
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}

08005506 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005506:	b480      	push	{r7}
 8005508:	b085      	sub	sp, #20
 800550a:	af00      	add	r7, sp, #0
 800550c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800550e:	2300      	movs	r3, #0
 8005510:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005518:	b2db      	uxtb	r3, r3
 800551a:	2b02      	cmp	r3, #2
 800551c:	d005      	beq.n	800552a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2204      	movs	r2, #4
 8005522:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8005524:	2301      	movs	r3, #1
 8005526:	73fb      	strb	r3, [r7, #15]
 8005528:	e037      	b.n	800559a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f022 020e 	bic.w	r2, r2, #14
 8005538:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005544:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005548:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	681a      	ldr	r2, [r3, #0]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f022 0201 	bic.w	r2, r2, #1
 8005558:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800555e:	f003 021f 	and.w	r2, r3, #31
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005566:	2101      	movs	r1, #1
 8005568:	fa01 f202 	lsl.w	r2, r1, r2
 800556c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005572:	687a      	ldr	r2, [r7, #4]
 8005574:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005576:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800557c:	2b00      	cmp	r3, #0
 800557e:	d00c      	beq.n	800559a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005584:	681a      	ldr	r2, [r3, #0]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800558a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800558e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005594:	687a      	ldr	r2, [r7, #4]
 8005596:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005598:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2201      	movs	r2, #1
 800559e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2200      	movs	r2, #0
 80055a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80055aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	3714      	adds	r7, #20
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr

080055b8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b084      	sub	sp, #16
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055c0:	2300      	movs	r3, #0
 80055c2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	2b02      	cmp	r3, #2
 80055ce:	d00d      	beq.n	80055ec <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2204      	movs	r2, #4
 80055d4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2201      	movs	r2, #1
 80055da:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2200      	movs	r2, #0
 80055e2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80055e6:	2301      	movs	r3, #1
 80055e8:	73fb      	strb	r3, [r7, #15]
 80055ea:	e047      	b.n	800567c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f022 020e 	bic.w	r2, r2, #14
 80055fa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	681a      	ldr	r2, [r3, #0]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f022 0201 	bic.w	r2, r2, #1
 800560a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005616:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800561a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005620:	f003 021f 	and.w	r2, r3, #31
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005628:	2101      	movs	r1, #1
 800562a:	fa01 f202 	lsl.w	r2, r1, r2
 800562e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005634:	687a      	ldr	r2, [r7, #4]
 8005636:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005638:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800563e:	2b00      	cmp	r3, #0
 8005640:	d00c      	beq.n	800565c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800564c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005650:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005656:	687a      	ldr	r2, [r7, #4]
 8005658:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800565a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2201      	movs	r2, #1
 8005660:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2200      	movs	r2, #0
 8005668:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005670:	2b00      	cmp	r3, #0
 8005672:	d003      	beq.n	800567c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	4798      	blx	r3
    }
  }
  return status;
 800567c:	7bfb      	ldrb	r3, [r7, #15]
}
 800567e:	4618      	mov	r0, r3
 8005680:	3710      	adds	r7, #16
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}

08005686 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005686:	b580      	push	{r7, lr}
 8005688:	b084      	sub	sp, #16
 800568a:	af00      	add	r7, sp, #0
 800568c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056a2:	f003 031f 	and.w	r3, r3, #31
 80056a6:	2204      	movs	r2, #4
 80056a8:	409a      	lsls	r2, r3
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	4013      	ands	r3, r2
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d026      	beq.n	8005700 <HAL_DMA_IRQHandler+0x7a>
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	f003 0304 	and.w	r3, r3, #4
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d021      	beq.n	8005700 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f003 0320 	and.w	r3, r3, #32
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d107      	bne.n	80056da <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	681a      	ldr	r2, [r3, #0]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f022 0204 	bic.w	r2, r2, #4
 80056d8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056de:	f003 021f 	and.w	r2, r3, #31
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056e6:	2104      	movs	r1, #4
 80056e8:	fa01 f202 	lsl.w	r2, r1, r2
 80056ec:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d071      	beq.n	80057da <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80056fe:	e06c      	b.n	80057da <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005704:	f003 031f 	and.w	r3, r3, #31
 8005708:	2202      	movs	r2, #2
 800570a:	409a      	lsls	r2, r3
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	4013      	ands	r3, r2
 8005710:	2b00      	cmp	r3, #0
 8005712:	d02e      	beq.n	8005772 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	f003 0302 	and.w	r3, r3, #2
 800571a:	2b00      	cmp	r3, #0
 800571c:	d029      	beq.n	8005772 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f003 0320 	and.w	r3, r3, #32
 8005728:	2b00      	cmp	r3, #0
 800572a:	d10b      	bne.n	8005744 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	681a      	ldr	r2, [r3, #0]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f022 020a 	bic.w	r2, r2, #10
 800573a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2201      	movs	r2, #1
 8005740:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005748:	f003 021f 	and.w	r2, r3, #31
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005750:	2102      	movs	r1, #2
 8005752:	fa01 f202 	lsl.w	r2, r1, r2
 8005756:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2200      	movs	r2, #0
 800575c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005764:	2b00      	cmp	r3, #0
 8005766:	d038      	beq.n	80057da <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005770:	e033      	b.n	80057da <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005776:	f003 031f 	and.w	r3, r3, #31
 800577a:	2208      	movs	r2, #8
 800577c:	409a      	lsls	r2, r3
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	4013      	ands	r3, r2
 8005782:	2b00      	cmp	r3, #0
 8005784:	d02a      	beq.n	80057dc <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	f003 0308 	and.w	r3, r3, #8
 800578c:	2b00      	cmp	r3, #0
 800578e:	d025      	beq.n	80057dc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	681a      	ldr	r2, [r3, #0]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f022 020e 	bic.w	r2, r2, #14
 800579e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057a4:	f003 021f 	and.w	r2, r3, #31
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057ac:	2101      	movs	r1, #1
 80057ae:	fa01 f202 	lsl.w	r2, r1, r2
 80057b2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2201      	movs	r2, #1
 80057b8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2201      	movs	r2, #1
 80057be:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2200      	movs	r2, #0
 80057c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d004      	beq.n	80057dc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80057da:	bf00      	nop
 80057dc:	bf00      	nop
}
 80057de:	3710      	adds	r7, #16
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}

080057e4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b085      	sub	sp, #20
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	60f8      	str	r0, [r7, #12]
 80057ec:	60b9      	str	r1, [r7, #8]
 80057ee:	607a      	str	r2, [r7, #4]
 80057f0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057f6:	68fa      	ldr	r2, [r7, #12]
 80057f8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80057fa:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005800:	2b00      	cmp	r3, #0
 8005802:	d004      	beq.n	800580e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005808:	68fa      	ldr	r2, [r7, #12]
 800580a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800580c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005812:	f003 021f 	and.w	r2, r3, #31
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800581a:	2101      	movs	r1, #1
 800581c:	fa01 f202 	lsl.w	r2, r1, r2
 8005820:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	683a      	ldr	r2, [r7, #0]
 8005828:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	2b10      	cmp	r3, #16
 8005830:	d108      	bne.n	8005844 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	687a      	ldr	r2, [r7, #4]
 8005838:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	68ba      	ldr	r2, [r7, #8]
 8005840:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005842:	e007      	b.n	8005854 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	68ba      	ldr	r2, [r7, #8]
 800584a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	687a      	ldr	r2, [r7, #4]
 8005852:	60da      	str	r2, [r3, #12]
}
 8005854:	bf00      	nop
 8005856:	3714      	adds	r7, #20
 8005858:	46bd      	mov	sp, r7
 800585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585e:	4770      	bx	lr

08005860 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005860:	b480      	push	{r7}
 8005862:	b087      	sub	sp, #28
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	461a      	mov	r2, r3
 800586e:	4b16      	ldr	r3, [pc, #88]	@ (80058c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005870:	429a      	cmp	r2, r3
 8005872:	d802      	bhi.n	800587a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005874:	4b15      	ldr	r3, [pc, #84]	@ (80058cc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005876:	617b      	str	r3, [r7, #20]
 8005878:	e001      	b.n	800587e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800587a:	4b15      	ldr	r3, [pc, #84]	@ (80058d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800587c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	b2db      	uxtb	r3, r3
 8005888:	3b08      	subs	r3, #8
 800588a:	4a12      	ldr	r2, [pc, #72]	@ (80058d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800588c:	fba2 2303 	umull	r2, r3, r2, r3
 8005890:	091b      	lsrs	r3, r3, #4
 8005892:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005898:	089b      	lsrs	r3, r3, #2
 800589a:	009a      	lsls	r2, r3, #2
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	4413      	add	r3, r2
 80058a0:	461a      	mov	r2, r3
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	4a0b      	ldr	r2, [pc, #44]	@ (80058d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80058aa:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	f003 031f 	and.w	r3, r3, #31
 80058b2:	2201      	movs	r2, #1
 80058b4:	409a      	lsls	r2, r3
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80058ba:	bf00      	nop
 80058bc:	371c      	adds	r7, #28
 80058be:	46bd      	mov	sp, r7
 80058c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c4:	4770      	bx	lr
 80058c6:	bf00      	nop
 80058c8:	40020407 	.word	0x40020407
 80058cc:	40020800 	.word	0x40020800
 80058d0:	40020820 	.word	0x40020820
 80058d4:	cccccccd 	.word	0xcccccccd
 80058d8:	40020880 	.word	0x40020880

080058dc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80058dc:	b480      	push	{r7}
 80058de:	b085      	sub	sp, #20
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80058ec:	68fa      	ldr	r2, [r7, #12]
 80058ee:	4b0b      	ldr	r3, [pc, #44]	@ (800591c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80058f0:	4413      	add	r3, r2
 80058f2:	009b      	lsls	r3, r3, #2
 80058f4:	461a      	mov	r2, r3
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	4a08      	ldr	r2, [pc, #32]	@ (8005920 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80058fe:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	3b01      	subs	r3, #1
 8005904:	f003 031f 	and.w	r3, r3, #31
 8005908:	2201      	movs	r2, #1
 800590a:	409a      	lsls	r2, r3
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8005910:	bf00      	nop
 8005912:	3714      	adds	r7, #20
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr
 800591c:	1000823f 	.word	0x1000823f
 8005920:	40020940 	.word	0x40020940

08005924 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005924:	b480      	push	{r7}
 8005926:	b087      	sub	sp, #28
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
 800592c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800592e:	2300      	movs	r3, #0
 8005930:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005932:	e15a      	b.n	8005bea <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	681a      	ldr	r2, [r3, #0]
 8005938:	2101      	movs	r1, #1
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	fa01 f303 	lsl.w	r3, r1, r3
 8005940:	4013      	ands	r3, r2
 8005942:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2b00      	cmp	r3, #0
 8005948:	f000 814c 	beq.w	8005be4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	f003 0303 	and.w	r3, r3, #3
 8005954:	2b01      	cmp	r3, #1
 8005956:	d005      	beq.n	8005964 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005960:	2b02      	cmp	r3, #2
 8005962:	d130      	bne.n	80059c6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	005b      	lsls	r3, r3, #1
 800596e:	2203      	movs	r2, #3
 8005970:	fa02 f303 	lsl.w	r3, r2, r3
 8005974:	43db      	mvns	r3, r3
 8005976:	693a      	ldr	r2, [r7, #16]
 8005978:	4013      	ands	r3, r2
 800597a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	68da      	ldr	r2, [r3, #12]
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	005b      	lsls	r3, r3, #1
 8005984:	fa02 f303 	lsl.w	r3, r2, r3
 8005988:	693a      	ldr	r2, [r7, #16]
 800598a:	4313      	orrs	r3, r2
 800598c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	693a      	ldr	r2, [r7, #16]
 8005992:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800599a:	2201      	movs	r2, #1
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	fa02 f303 	lsl.w	r3, r2, r3
 80059a2:	43db      	mvns	r3, r3
 80059a4:	693a      	ldr	r2, [r7, #16]
 80059a6:	4013      	ands	r3, r2
 80059a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	091b      	lsrs	r3, r3, #4
 80059b0:	f003 0201 	and.w	r2, r3, #1
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	fa02 f303 	lsl.w	r3, r2, r3
 80059ba:	693a      	ldr	r2, [r7, #16]
 80059bc:	4313      	orrs	r3, r2
 80059be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	693a      	ldr	r2, [r7, #16]
 80059c4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	f003 0303 	and.w	r3, r3, #3
 80059ce:	2b03      	cmp	r3, #3
 80059d0:	d017      	beq.n	8005a02 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	68db      	ldr	r3, [r3, #12]
 80059d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	005b      	lsls	r3, r3, #1
 80059dc:	2203      	movs	r2, #3
 80059de:	fa02 f303 	lsl.w	r3, r2, r3
 80059e2:	43db      	mvns	r3, r3
 80059e4:	693a      	ldr	r2, [r7, #16]
 80059e6:	4013      	ands	r3, r2
 80059e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	689a      	ldr	r2, [r3, #8]
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	005b      	lsls	r3, r3, #1
 80059f2:	fa02 f303 	lsl.w	r3, r2, r3
 80059f6:	693a      	ldr	r2, [r7, #16]
 80059f8:	4313      	orrs	r3, r2
 80059fa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	693a      	ldr	r2, [r7, #16]
 8005a00:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	f003 0303 	and.w	r3, r3, #3
 8005a0a:	2b02      	cmp	r3, #2
 8005a0c:	d123      	bne.n	8005a56 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	08da      	lsrs	r2, r3, #3
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	3208      	adds	r2, #8
 8005a16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a1a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	f003 0307 	and.w	r3, r3, #7
 8005a22:	009b      	lsls	r3, r3, #2
 8005a24:	220f      	movs	r2, #15
 8005a26:	fa02 f303 	lsl.w	r3, r2, r3
 8005a2a:	43db      	mvns	r3, r3
 8005a2c:	693a      	ldr	r2, [r7, #16]
 8005a2e:	4013      	ands	r3, r2
 8005a30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	691a      	ldr	r2, [r3, #16]
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	f003 0307 	and.w	r3, r3, #7
 8005a3c:	009b      	lsls	r3, r3, #2
 8005a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a42:	693a      	ldr	r2, [r7, #16]
 8005a44:	4313      	orrs	r3, r2
 8005a46:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	08da      	lsrs	r2, r3, #3
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	3208      	adds	r2, #8
 8005a50:	6939      	ldr	r1, [r7, #16]
 8005a52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	005b      	lsls	r3, r3, #1
 8005a60:	2203      	movs	r2, #3
 8005a62:	fa02 f303 	lsl.w	r3, r2, r3
 8005a66:	43db      	mvns	r3, r3
 8005a68:	693a      	ldr	r2, [r7, #16]
 8005a6a:	4013      	ands	r3, r2
 8005a6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	f003 0203 	and.w	r2, r3, #3
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	005b      	lsls	r3, r3, #1
 8005a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a7e:	693a      	ldr	r2, [r7, #16]
 8005a80:	4313      	orrs	r3, r2
 8005a82:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	693a      	ldr	r2, [r7, #16]
 8005a88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	f000 80a6 	beq.w	8005be4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005a98:	4b5b      	ldr	r3, [pc, #364]	@ (8005c08 <HAL_GPIO_Init+0x2e4>)
 8005a9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a9c:	4a5a      	ldr	r2, [pc, #360]	@ (8005c08 <HAL_GPIO_Init+0x2e4>)
 8005a9e:	f043 0301 	orr.w	r3, r3, #1
 8005aa2:	6613      	str	r3, [r2, #96]	@ 0x60
 8005aa4:	4b58      	ldr	r3, [pc, #352]	@ (8005c08 <HAL_GPIO_Init+0x2e4>)
 8005aa6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005aa8:	f003 0301 	and.w	r3, r3, #1
 8005aac:	60bb      	str	r3, [r7, #8]
 8005aae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005ab0:	4a56      	ldr	r2, [pc, #344]	@ (8005c0c <HAL_GPIO_Init+0x2e8>)
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	089b      	lsrs	r3, r3, #2
 8005ab6:	3302      	adds	r3, #2
 8005ab8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005abc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	f003 0303 	and.w	r3, r3, #3
 8005ac4:	009b      	lsls	r3, r3, #2
 8005ac6:	220f      	movs	r2, #15
 8005ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8005acc:	43db      	mvns	r3, r3
 8005ace:	693a      	ldr	r2, [r7, #16]
 8005ad0:	4013      	ands	r3, r2
 8005ad2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005ada:	d01f      	beq.n	8005b1c <HAL_GPIO_Init+0x1f8>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	4a4c      	ldr	r2, [pc, #304]	@ (8005c10 <HAL_GPIO_Init+0x2ec>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d019      	beq.n	8005b18 <HAL_GPIO_Init+0x1f4>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	4a4b      	ldr	r2, [pc, #300]	@ (8005c14 <HAL_GPIO_Init+0x2f0>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d013      	beq.n	8005b14 <HAL_GPIO_Init+0x1f0>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	4a4a      	ldr	r2, [pc, #296]	@ (8005c18 <HAL_GPIO_Init+0x2f4>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d00d      	beq.n	8005b10 <HAL_GPIO_Init+0x1ec>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	4a49      	ldr	r2, [pc, #292]	@ (8005c1c <HAL_GPIO_Init+0x2f8>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d007      	beq.n	8005b0c <HAL_GPIO_Init+0x1e8>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	4a48      	ldr	r2, [pc, #288]	@ (8005c20 <HAL_GPIO_Init+0x2fc>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d101      	bne.n	8005b08 <HAL_GPIO_Init+0x1e4>
 8005b04:	2305      	movs	r3, #5
 8005b06:	e00a      	b.n	8005b1e <HAL_GPIO_Init+0x1fa>
 8005b08:	2306      	movs	r3, #6
 8005b0a:	e008      	b.n	8005b1e <HAL_GPIO_Init+0x1fa>
 8005b0c:	2304      	movs	r3, #4
 8005b0e:	e006      	b.n	8005b1e <HAL_GPIO_Init+0x1fa>
 8005b10:	2303      	movs	r3, #3
 8005b12:	e004      	b.n	8005b1e <HAL_GPIO_Init+0x1fa>
 8005b14:	2302      	movs	r3, #2
 8005b16:	e002      	b.n	8005b1e <HAL_GPIO_Init+0x1fa>
 8005b18:	2301      	movs	r3, #1
 8005b1a:	e000      	b.n	8005b1e <HAL_GPIO_Init+0x1fa>
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	697a      	ldr	r2, [r7, #20]
 8005b20:	f002 0203 	and.w	r2, r2, #3
 8005b24:	0092      	lsls	r2, r2, #2
 8005b26:	4093      	lsls	r3, r2
 8005b28:	693a      	ldr	r2, [r7, #16]
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005b2e:	4937      	ldr	r1, [pc, #220]	@ (8005c0c <HAL_GPIO_Init+0x2e8>)
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	089b      	lsrs	r3, r3, #2
 8005b34:	3302      	adds	r3, #2
 8005b36:	693a      	ldr	r2, [r7, #16]
 8005b38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005b3c:	4b39      	ldr	r3, [pc, #228]	@ (8005c24 <HAL_GPIO_Init+0x300>)
 8005b3e:	689b      	ldr	r3, [r3, #8]
 8005b40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	43db      	mvns	r3, r3
 8005b46:	693a      	ldr	r2, [r7, #16]
 8005b48:	4013      	ands	r3, r2
 8005b4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d003      	beq.n	8005b60 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005b58:	693a      	ldr	r2, [r7, #16]
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005b60:	4a30      	ldr	r2, [pc, #192]	@ (8005c24 <HAL_GPIO_Init+0x300>)
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005b66:	4b2f      	ldr	r3, [pc, #188]	@ (8005c24 <HAL_GPIO_Init+0x300>)
 8005b68:	68db      	ldr	r3, [r3, #12]
 8005b6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	43db      	mvns	r3, r3
 8005b70:	693a      	ldr	r2, [r7, #16]
 8005b72:	4013      	ands	r3, r2
 8005b74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d003      	beq.n	8005b8a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005b82:	693a      	ldr	r2, [r7, #16]
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	4313      	orrs	r3, r2
 8005b88:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005b8a:	4a26      	ldr	r2, [pc, #152]	@ (8005c24 <HAL_GPIO_Init+0x300>)
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005b90:	4b24      	ldr	r3, [pc, #144]	@ (8005c24 <HAL_GPIO_Init+0x300>)
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	43db      	mvns	r3, r3
 8005b9a:	693a      	ldr	r2, [r7, #16]
 8005b9c:	4013      	ands	r3, r2
 8005b9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d003      	beq.n	8005bb4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005bac:	693a      	ldr	r2, [r7, #16]
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005bb4:	4a1b      	ldr	r2, [pc, #108]	@ (8005c24 <HAL_GPIO_Init+0x300>)
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005bba:	4b1a      	ldr	r3, [pc, #104]	@ (8005c24 <HAL_GPIO_Init+0x300>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	43db      	mvns	r3, r3
 8005bc4:	693a      	ldr	r2, [r7, #16]
 8005bc6:	4013      	ands	r3, r2
 8005bc8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d003      	beq.n	8005bde <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005bd6:	693a      	ldr	r2, [r7, #16]
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005bde:	4a11      	ldr	r2, [pc, #68]	@ (8005c24 <HAL_GPIO_Init+0x300>)
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	3301      	adds	r3, #1
 8005be8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	681a      	ldr	r2, [r3, #0]
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	fa22 f303 	lsr.w	r3, r2, r3
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	f47f ae9d 	bne.w	8005934 <HAL_GPIO_Init+0x10>
  }
}
 8005bfa:	bf00      	nop
 8005bfc:	bf00      	nop
 8005bfe:	371c      	adds	r7, #28
 8005c00:	46bd      	mov	sp, r7
 8005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c06:	4770      	bx	lr
 8005c08:	40021000 	.word	0x40021000
 8005c0c:	40010000 	.word	0x40010000
 8005c10:	48000400 	.word	0x48000400
 8005c14:	48000800 	.word	0x48000800
 8005c18:	48000c00 	.word	0x48000c00
 8005c1c:	48001000 	.word	0x48001000
 8005c20:	48001400 	.word	0x48001400
 8005c24:	40010400 	.word	0x40010400

08005c28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b083      	sub	sp, #12
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
 8005c30:	460b      	mov	r3, r1
 8005c32:	807b      	strh	r3, [r7, #2]
 8005c34:	4613      	mov	r3, r2
 8005c36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005c38:	787b      	ldrb	r3, [r7, #1]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d003      	beq.n	8005c46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005c3e:	887a      	ldrh	r2, [r7, #2]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005c44:	e002      	b.n	8005c4c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005c46:	887a      	ldrh	r2, [r7, #2]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005c4c:	bf00      	nop
 8005c4e:	370c      	adds	r7, #12
 8005c50:	46bd      	mov	sp, r7
 8005c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c56:	4770      	bx	lr

08005c58 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b085      	sub	sp, #20
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
 8005c60:	460b      	mov	r3, r1
 8005c62:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	695b      	ldr	r3, [r3, #20]
 8005c68:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005c6a:	887a      	ldrh	r2, [r7, #2]
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	4013      	ands	r3, r2
 8005c70:	041a      	lsls	r2, r3, #16
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	43d9      	mvns	r1, r3
 8005c76:	887b      	ldrh	r3, [r7, #2]
 8005c78:	400b      	ands	r3, r1
 8005c7a:	431a      	orrs	r2, r3
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	619a      	str	r2, [r3, #24]
}
 8005c80:	bf00      	nop
 8005c82:	3714      	adds	r7, #20
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr

08005c8c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b082      	sub	sp, #8
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	4603      	mov	r3, r0
 8005c94:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005c96:	4b08      	ldr	r3, [pc, #32]	@ (8005cb8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005c98:	695a      	ldr	r2, [r3, #20]
 8005c9a:	88fb      	ldrh	r3, [r7, #6]
 8005c9c:	4013      	ands	r3, r2
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d006      	beq.n	8005cb0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005ca2:	4a05      	ldr	r2, [pc, #20]	@ (8005cb8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005ca4:	88fb      	ldrh	r3, [r7, #6]
 8005ca6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005ca8:	88fb      	ldrh	r3, [r7, #6]
 8005caa:	4618      	mov	r0, r3
 8005cac:	f000 f806 	bl	8005cbc <HAL_GPIO_EXTI_Callback>
  }
}
 8005cb0:	bf00      	nop
 8005cb2:	3708      	adds	r7, #8
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd80      	pop	{r7, pc}
 8005cb8:	40010400 	.word	0x40010400

08005cbc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b083      	sub	sp, #12
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005cc6:	bf00      	nop
 8005cc8:	370c      	adds	r7, #12
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd0:	4770      	bx	lr
	...

08005cd4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b085      	sub	sp, #20
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d141      	bne.n	8005d66 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005ce2:	4b4b      	ldr	r3, [pc, #300]	@ (8005e10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005cea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005cee:	d131      	bne.n	8005d54 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005cf0:	4b47      	ldr	r3, [pc, #284]	@ (8005e10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005cf6:	4a46      	ldr	r2, [pc, #280]	@ (8005e10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cf8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005cfc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005d00:	4b43      	ldr	r3, [pc, #268]	@ (8005e10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005d08:	4a41      	ldr	r2, [pc, #260]	@ (8005e10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d0a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005d0e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005d10:	4b40      	ldr	r3, [pc, #256]	@ (8005e14 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	2232      	movs	r2, #50	@ 0x32
 8005d16:	fb02 f303 	mul.w	r3, r2, r3
 8005d1a:	4a3f      	ldr	r2, [pc, #252]	@ (8005e18 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005d1c:	fba2 2303 	umull	r2, r3, r2, r3
 8005d20:	0c9b      	lsrs	r3, r3, #18
 8005d22:	3301      	adds	r3, #1
 8005d24:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005d26:	e002      	b.n	8005d2e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	3b01      	subs	r3, #1
 8005d2c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005d2e:	4b38      	ldr	r3, [pc, #224]	@ (8005e10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d30:	695b      	ldr	r3, [r3, #20]
 8005d32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d3a:	d102      	bne.n	8005d42 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d1f2      	bne.n	8005d28 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005d42:	4b33      	ldr	r3, [pc, #204]	@ (8005e10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d44:	695b      	ldr	r3, [r3, #20]
 8005d46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d4e:	d158      	bne.n	8005e02 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005d50:	2303      	movs	r3, #3
 8005d52:	e057      	b.n	8005e04 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005d54:	4b2e      	ldr	r3, [pc, #184]	@ (8005e10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d5a:	4a2d      	ldr	r2, [pc, #180]	@ (8005e10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d5c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005d60:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005d64:	e04d      	b.n	8005e02 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d6c:	d141      	bne.n	8005df2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005d6e:	4b28      	ldr	r3, [pc, #160]	@ (8005e10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005d76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d7a:	d131      	bne.n	8005de0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005d7c:	4b24      	ldr	r3, [pc, #144]	@ (8005e10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d82:	4a23      	ldr	r2, [pc, #140]	@ (8005e10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d88:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005d8c:	4b20      	ldr	r3, [pc, #128]	@ (8005e10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005d94:	4a1e      	ldr	r2, [pc, #120]	@ (8005e10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d96:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005d9a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005d9c:	4b1d      	ldr	r3, [pc, #116]	@ (8005e14 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	2232      	movs	r2, #50	@ 0x32
 8005da2:	fb02 f303 	mul.w	r3, r2, r3
 8005da6:	4a1c      	ldr	r2, [pc, #112]	@ (8005e18 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005da8:	fba2 2303 	umull	r2, r3, r2, r3
 8005dac:	0c9b      	lsrs	r3, r3, #18
 8005dae:	3301      	adds	r3, #1
 8005db0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005db2:	e002      	b.n	8005dba <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	3b01      	subs	r3, #1
 8005db8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005dba:	4b15      	ldr	r3, [pc, #84]	@ (8005e10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005dbc:	695b      	ldr	r3, [r3, #20]
 8005dbe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005dc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005dc6:	d102      	bne.n	8005dce <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d1f2      	bne.n	8005db4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005dce:	4b10      	ldr	r3, [pc, #64]	@ (8005e10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005dd0:	695b      	ldr	r3, [r3, #20]
 8005dd2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005dd6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005dda:	d112      	bne.n	8005e02 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005ddc:	2303      	movs	r3, #3
 8005dde:	e011      	b.n	8005e04 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005de0:	4b0b      	ldr	r3, [pc, #44]	@ (8005e10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005de2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005de6:	4a0a      	ldr	r2, [pc, #40]	@ (8005e10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005de8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005dec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005df0:	e007      	b.n	8005e02 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005df2:	4b07      	ldr	r3, [pc, #28]	@ (8005e10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005dfa:	4a05      	ldr	r2, [pc, #20]	@ (8005e10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005dfc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005e00:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005e02:	2300      	movs	r3, #0
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3714      	adds	r7, #20
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0e:	4770      	bx	lr
 8005e10:	40007000 	.word	0x40007000
 8005e14:	20000200 	.word	0x20000200
 8005e18:	431bde83 	.word	0x431bde83

08005e1c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005e20:	4b05      	ldr	r3, [pc, #20]	@ (8005e38 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005e22:	689b      	ldr	r3, [r3, #8]
 8005e24:	4a04      	ldr	r2, [pc, #16]	@ (8005e38 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005e26:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005e2a:	6093      	str	r3, [r2, #8]
}
 8005e2c:	bf00      	nop
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e34:	4770      	bx	lr
 8005e36:	bf00      	nop
 8005e38:	40007000 	.word	0x40007000

08005e3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b088      	sub	sp, #32
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d101      	bne.n	8005e4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	e2fe      	b.n	800644c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f003 0301 	and.w	r3, r3, #1
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d075      	beq.n	8005f46 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e5a:	4b97      	ldr	r3, [pc, #604]	@ (80060b8 <HAL_RCC_OscConfig+0x27c>)
 8005e5c:	689b      	ldr	r3, [r3, #8]
 8005e5e:	f003 030c 	and.w	r3, r3, #12
 8005e62:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005e64:	4b94      	ldr	r3, [pc, #592]	@ (80060b8 <HAL_RCC_OscConfig+0x27c>)
 8005e66:	68db      	ldr	r3, [r3, #12]
 8005e68:	f003 0303 	and.w	r3, r3, #3
 8005e6c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005e6e:	69bb      	ldr	r3, [r7, #24]
 8005e70:	2b0c      	cmp	r3, #12
 8005e72:	d102      	bne.n	8005e7a <HAL_RCC_OscConfig+0x3e>
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	2b03      	cmp	r3, #3
 8005e78:	d002      	beq.n	8005e80 <HAL_RCC_OscConfig+0x44>
 8005e7a:	69bb      	ldr	r3, [r7, #24]
 8005e7c:	2b08      	cmp	r3, #8
 8005e7e:	d10b      	bne.n	8005e98 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e80:	4b8d      	ldr	r3, [pc, #564]	@ (80060b8 <HAL_RCC_OscConfig+0x27c>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d05b      	beq.n	8005f44 <HAL_RCC_OscConfig+0x108>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d157      	bne.n	8005f44 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005e94:	2301      	movs	r3, #1
 8005e96:	e2d9      	b.n	800644c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ea0:	d106      	bne.n	8005eb0 <HAL_RCC_OscConfig+0x74>
 8005ea2:	4b85      	ldr	r3, [pc, #532]	@ (80060b8 <HAL_RCC_OscConfig+0x27c>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a84      	ldr	r2, [pc, #528]	@ (80060b8 <HAL_RCC_OscConfig+0x27c>)
 8005ea8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005eac:	6013      	str	r3, [r2, #0]
 8005eae:	e01d      	b.n	8005eec <HAL_RCC_OscConfig+0xb0>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005eb8:	d10c      	bne.n	8005ed4 <HAL_RCC_OscConfig+0x98>
 8005eba:	4b7f      	ldr	r3, [pc, #508]	@ (80060b8 <HAL_RCC_OscConfig+0x27c>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a7e      	ldr	r2, [pc, #504]	@ (80060b8 <HAL_RCC_OscConfig+0x27c>)
 8005ec0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005ec4:	6013      	str	r3, [r2, #0]
 8005ec6:	4b7c      	ldr	r3, [pc, #496]	@ (80060b8 <HAL_RCC_OscConfig+0x27c>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a7b      	ldr	r2, [pc, #492]	@ (80060b8 <HAL_RCC_OscConfig+0x27c>)
 8005ecc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ed0:	6013      	str	r3, [r2, #0]
 8005ed2:	e00b      	b.n	8005eec <HAL_RCC_OscConfig+0xb0>
 8005ed4:	4b78      	ldr	r3, [pc, #480]	@ (80060b8 <HAL_RCC_OscConfig+0x27c>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a77      	ldr	r2, [pc, #476]	@ (80060b8 <HAL_RCC_OscConfig+0x27c>)
 8005eda:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ede:	6013      	str	r3, [r2, #0]
 8005ee0:	4b75      	ldr	r3, [pc, #468]	@ (80060b8 <HAL_RCC_OscConfig+0x27c>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a74      	ldr	r2, [pc, #464]	@ (80060b8 <HAL_RCC_OscConfig+0x27c>)
 8005ee6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005eea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d013      	beq.n	8005f1c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ef4:	f7fd fc50 	bl	8003798 <HAL_GetTick>
 8005ef8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005efa:	e008      	b.n	8005f0e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005efc:	f7fd fc4c 	bl	8003798 <HAL_GetTick>
 8005f00:	4602      	mov	r2, r0
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	1ad3      	subs	r3, r2, r3
 8005f06:	2b64      	cmp	r3, #100	@ 0x64
 8005f08:	d901      	bls.n	8005f0e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005f0a:	2303      	movs	r3, #3
 8005f0c:	e29e      	b.n	800644c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005f0e:	4b6a      	ldr	r3, [pc, #424]	@ (80060b8 <HAL_RCC_OscConfig+0x27c>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d0f0      	beq.n	8005efc <HAL_RCC_OscConfig+0xc0>
 8005f1a:	e014      	b.n	8005f46 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f1c:	f7fd fc3c 	bl	8003798 <HAL_GetTick>
 8005f20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005f22:	e008      	b.n	8005f36 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f24:	f7fd fc38 	bl	8003798 <HAL_GetTick>
 8005f28:	4602      	mov	r2, r0
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	1ad3      	subs	r3, r2, r3
 8005f2e:	2b64      	cmp	r3, #100	@ 0x64
 8005f30:	d901      	bls.n	8005f36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005f32:	2303      	movs	r3, #3
 8005f34:	e28a      	b.n	800644c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005f36:	4b60      	ldr	r3, [pc, #384]	@ (80060b8 <HAL_RCC_OscConfig+0x27c>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d1f0      	bne.n	8005f24 <HAL_RCC_OscConfig+0xe8>
 8005f42:	e000      	b.n	8005f46 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f003 0302 	and.w	r3, r3, #2
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d075      	beq.n	800603e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f52:	4b59      	ldr	r3, [pc, #356]	@ (80060b8 <HAL_RCC_OscConfig+0x27c>)
 8005f54:	689b      	ldr	r3, [r3, #8]
 8005f56:	f003 030c 	and.w	r3, r3, #12
 8005f5a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005f5c:	4b56      	ldr	r3, [pc, #344]	@ (80060b8 <HAL_RCC_OscConfig+0x27c>)
 8005f5e:	68db      	ldr	r3, [r3, #12]
 8005f60:	f003 0303 	and.w	r3, r3, #3
 8005f64:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005f66:	69bb      	ldr	r3, [r7, #24]
 8005f68:	2b0c      	cmp	r3, #12
 8005f6a:	d102      	bne.n	8005f72 <HAL_RCC_OscConfig+0x136>
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	2b02      	cmp	r3, #2
 8005f70:	d002      	beq.n	8005f78 <HAL_RCC_OscConfig+0x13c>
 8005f72:	69bb      	ldr	r3, [r7, #24]
 8005f74:	2b04      	cmp	r3, #4
 8005f76:	d11f      	bne.n	8005fb8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f78:	4b4f      	ldr	r3, [pc, #316]	@ (80060b8 <HAL_RCC_OscConfig+0x27c>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d005      	beq.n	8005f90 <HAL_RCC_OscConfig+0x154>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	68db      	ldr	r3, [r3, #12]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d101      	bne.n	8005f90 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	e25d      	b.n	800644c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f90:	4b49      	ldr	r3, [pc, #292]	@ (80060b8 <HAL_RCC_OscConfig+0x27c>)
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	691b      	ldr	r3, [r3, #16]
 8005f9c:	061b      	lsls	r3, r3, #24
 8005f9e:	4946      	ldr	r1, [pc, #280]	@ (80060b8 <HAL_RCC_OscConfig+0x27c>)
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005fa4:	4b45      	ldr	r3, [pc, #276]	@ (80060bc <HAL_RCC_OscConfig+0x280>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4618      	mov	r0, r3
 8005faa:	f7fd fba9 	bl	8003700 <HAL_InitTick>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d043      	beq.n	800603c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	e249      	b.n	800644c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	68db      	ldr	r3, [r3, #12]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d023      	beq.n	8006008 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005fc0:	4b3d      	ldr	r3, [pc, #244]	@ (80060b8 <HAL_RCC_OscConfig+0x27c>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a3c      	ldr	r2, [pc, #240]	@ (80060b8 <HAL_RCC_OscConfig+0x27c>)
 8005fc6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005fca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fcc:	f7fd fbe4 	bl	8003798 <HAL_GetTick>
 8005fd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005fd2:	e008      	b.n	8005fe6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005fd4:	f7fd fbe0 	bl	8003798 <HAL_GetTick>
 8005fd8:	4602      	mov	r2, r0
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	1ad3      	subs	r3, r2, r3
 8005fde:	2b02      	cmp	r3, #2
 8005fe0:	d901      	bls.n	8005fe6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005fe2:	2303      	movs	r3, #3
 8005fe4:	e232      	b.n	800644c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005fe6:	4b34      	ldr	r3, [pc, #208]	@ (80060b8 <HAL_RCC_OscConfig+0x27c>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d0f0      	beq.n	8005fd4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ff2:	4b31      	ldr	r3, [pc, #196]	@ (80060b8 <HAL_RCC_OscConfig+0x27c>)
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	691b      	ldr	r3, [r3, #16]
 8005ffe:	061b      	lsls	r3, r3, #24
 8006000:	492d      	ldr	r1, [pc, #180]	@ (80060b8 <HAL_RCC_OscConfig+0x27c>)
 8006002:	4313      	orrs	r3, r2
 8006004:	604b      	str	r3, [r1, #4]
 8006006:	e01a      	b.n	800603e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006008:	4b2b      	ldr	r3, [pc, #172]	@ (80060b8 <HAL_RCC_OscConfig+0x27c>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a2a      	ldr	r2, [pc, #168]	@ (80060b8 <HAL_RCC_OscConfig+0x27c>)
 800600e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006012:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006014:	f7fd fbc0 	bl	8003798 <HAL_GetTick>
 8006018:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800601a:	e008      	b.n	800602e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800601c:	f7fd fbbc 	bl	8003798 <HAL_GetTick>
 8006020:	4602      	mov	r2, r0
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	1ad3      	subs	r3, r2, r3
 8006026:	2b02      	cmp	r3, #2
 8006028:	d901      	bls.n	800602e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800602a:	2303      	movs	r3, #3
 800602c:	e20e      	b.n	800644c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800602e:	4b22      	ldr	r3, [pc, #136]	@ (80060b8 <HAL_RCC_OscConfig+0x27c>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006036:	2b00      	cmp	r3, #0
 8006038:	d1f0      	bne.n	800601c <HAL_RCC_OscConfig+0x1e0>
 800603a:	e000      	b.n	800603e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800603c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f003 0308 	and.w	r3, r3, #8
 8006046:	2b00      	cmp	r3, #0
 8006048:	d041      	beq.n	80060ce <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	695b      	ldr	r3, [r3, #20]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d01c      	beq.n	800608c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006052:	4b19      	ldr	r3, [pc, #100]	@ (80060b8 <HAL_RCC_OscConfig+0x27c>)
 8006054:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006058:	4a17      	ldr	r2, [pc, #92]	@ (80060b8 <HAL_RCC_OscConfig+0x27c>)
 800605a:	f043 0301 	orr.w	r3, r3, #1
 800605e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006062:	f7fd fb99 	bl	8003798 <HAL_GetTick>
 8006066:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006068:	e008      	b.n	800607c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800606a:	f7fd fb95 	bl	8003798 <HAL_GetTick>
 800606e:	4602      	mov	r2, r0
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	1ad3      	subs	r3, r2, r3
 8006074:	2b02      	cmp	r3, #2
 8006076:	d901      	bls.n	800607c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006078:	2303      	movs	r3, #3
 800607a:	e1e7      	b.n	800644c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800607c:	4b0e      	ldr	r3, [pc, #56]	@ (80060b8 <HAL_RCC_OscConfig+0x27c>)
 800607e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006082:	f003 0302 	and.w	r3, r3, #2
 8006086:	2b00      	cmp	r3, #0
 8006088:	d0ef      	beq.n	800606a <HAL_RCC_OscConfig+0x22e>
 800608a:	e020      	b.n	80060ce <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800608c:	4b0a      	ldr	r3, [pc, #40]	@ (80060b8 <HAL_RCC_OscConfig+0x27c>)
 800608e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006092:	4a09      	ldr	r2, [pc, #36]	@ (80060b8 <HAL_RCC_OscConfig+0x27c>)
 8006094:	f023 0301 	bic.w	r3, r3, #1
 8006098:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800609c:	f7fd fb7c 	bl	8003798 <HAL_GetTick>
 80060a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80060a2:	e00d      	b.n	80060c0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80060a4:	f7fd fb78 	bl	8003798 <HAL_GetTick>
 80060a8:	4602      	mov	r2, r0
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	1ad3      	subs	r3, r2, r3
 80060ae:	2b02      	cmp	r3, #2
 80060b0:	d906      	bls.n	80060c0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80060b2:	2303      	movs	r3, #3
 80060b4:	e1ca      	b.n	800644c <HAL_RCC_OscConfig+0x610>
 80060b6:	bf00      	nop
 80060b8:	40021000 	.word	0x40021000
 80060bc:	20000204 	.word	0x20000204
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80060c0:	4b8c      	ldr	r3, [pc, #560]	@ (80062f4 <HAL_RCC_OscConfig+0x4b8>)
 80060c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80060c6:	f003 0302 	and.w	r3, r3, #2
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d1ea      	bne.n	80060a4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f003 0304 	and.w	r3, r3, #4
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	f000 80a6 	beq.w	8006228 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80060dc:	2300      	movs	r3, #0
 80060de:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80060e0:	4b84      	ldr	r3, [pc, #528]	@ (80062f4 <HAL_RCC_OscConfig+0x4b8>)
 80060e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d101      	bne.n	80060f0 <HAL_RCC_OscConfig+0x2b4>
 80060ec:	2301      	movs	r3, #1
 80060ee:	e000      	b.n	80060f2 <HAL_RCC_OscConfig+0x2b6>
 80060f0:	2300      	movs	r3, #0
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d00d      	beq.n	8006112 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80060f6:	4b7f      	ldr	r3, [pc, #508]	@ (80062f4 <HAL_RCC_OscConfig+0x4b8>)
 80060f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060fa:	4a7e      	ldr	r2, [pc, #504]	@ (80062f4 <HAL_RCC_OscConfig+0x4b8>)
 80060fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006100:	6593      	str	r3, [r2, #88]	@ 0x58
 8006102:	4b7c      	ldr	r3, [pc, #496]	@ (80062f4 <HAL_RCC_OscConfig+0x4b8>)
 8006104:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006106:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800610a:	60fb      	str	r3, [r7, #12]
 800610c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800610e:	2301      	movs	r3, #1
 8006110:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006112:	4b79      	ldr	r3, [pc, #484]	@ (80062f8 <HAL_RCC_OscConfig+0x4bc>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800611a:	2b00      	cmp	r3, #0
 800611c:	d118      	bne.n	8006150 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800611e:	4b76      	ldr	r3, [pc, #472]	@ (80062f8 <HAL_RCC_OscConfig+0x4bc>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a75      	ldr	r2, [pc, #468]	@ (80062f8 <HAL_RCC_OscConfig+0x4bc>)
 8006124:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006128:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800612a:	f7fd fb35 	bl	8003798 <HAL_GetTick>
 800612e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006130:	e008      	b.n	8006144 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006132:	f7fd fb31 	bl	8003798 <HAL_GetTick>
 8006136:	4602      	mov	r2, r0
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	1ad3      	subs	r3, r2, r3
 800613c:	2b02      	cmp	r3, #2
 800613e:	d901      	bls.n	8006144 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006140:	2303      	movs	r3, #3
 8006142:	e183      	b.n	800644c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006144:	4b6c      	ldr	r3, [pc, #432]	@ (80062f8 <HAL_RCC_OscConfig+0x4bc>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800614c:	2b00      	cmp	r3, #0
 800614e:	d0f0      	beq.n	8006132 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	689b      	ldr	r3, [r3, #8]
 8006154:	2b01      	cmp	r3, #1
 8006156:	d108      	bne.n	800616a <HAL_RCC_OscConfig+0x32e>
 8006158:	4b66      	ldr	r3, [pc, #408]	@ (80062f4 <HAL_RCC_OscConfig+0x4b8>)
 800615a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800615e:	4a65      	ldr	r2, [pc, #404]	@ (80062f4 <HAL_RCC_OscConfig+0x4b8>)
 8006160:	f043 0301 	orr.w	r3, r3, #1
 8006164:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006168:	e024      	b.n	80061b4 <HAL_RCC_OscConfig+0x378>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	689b      	ldr	r3, [r3, #8]
 800616e:	2b05      	cmp	r3, #5
 8006170:	d110      	bne.n	8006194 <HAL_RCC_OscConfig+0x358>
 8006172:	4b60      	ldr	r3, [pc, #384]	@ (80062f4 <HAL_RCC_OscConfig+0x4b8>)
 8006174:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006178:	4a5e      	ldr	r2, [pc, #376]	@ (80062f4 <HAL_RCC_OscConfig+0x4b8>)
 800617a:	f043 0304 	orr.w	r3, r3, #4
 800617e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006182:	4b5c      	ldr	r3, [pc, #368]	@ (80062f4 <HAL_RCC_OscConfig+0x4b8>)
 8006184:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006188:	4a5a      	ldr	r2, [pc, #360]	@ (80062f4 <HAL_RCC_OscConfig+0x4b8>)
 800618a:	f043 0301 	orr.w	r3, r3, #1
 800618e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006192:	e00f      	b.n	80061b4 <HAL_RCC_OscConfig+0x378>
 8006194:	4b57      	ldr	r3, [pc, #348]	@ (80062f4 <HAL_RCC_OscConfig+0x4b8>)
 8006196:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800619a:	4a56      	ldr	r2, [pc, #344]	@ (80062f4 <HAL_RCC_OscConfig+0x4b8>)
 800619c:	f023 0301 	bic.w	r3, r3, #1
 80061a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80061a4:	4b53      	ldr	r3, [pc, #332]	@ (80062f4 <HAL_RCC_OscConfig+0x4b8>)
 80061a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061aa:	4a52      	ldr	r2, [pc, #328]	@ (80062f4 <HAL_RCC_OscConfig+0x4b8>)
 80061ac:	f023 0304 	bic.w	r3, r3, #4
 80061b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	689b      	ldr	r3, [r3, #8]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d016      	beq.n	80061ea <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061bc:	f7fd faec 	bl	8003798 <HAL_GetTick>
 80061c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80061c2:	e00a      	b.n	80061da <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061c4:	f7fd fae8 	bl	8003798 <HAL_GetTick>
 80061c8:	4602      	mov	r2, r0
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	1ad3      	subs	r3, r2, r3
 80061ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d901      	bls.n	80061da <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80061d6:	2303      	movs	r3, #3
 80061d8:	e138      	b.n	800644c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80061da:	4b46      	ldr	r3, [pc, #280]	@ (80062f4 <HAL_RCC_OscConfig+0x4b8>)
 80061dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061e0:	f003 0302 	and.w	r3, r3, #2
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d0ed      	beq.n	80061c4 <HAL_RCC_OscConfig+0x388>
 80061e8:	e015      	b.n	8006216 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061ea:	f7fd fad5 	bl	8003798 <HAL_GetTick>
 80061ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80061f0:	e00a      	b.n	8006208 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061f2:	f7fd fad1 	bl	8003798 <HAL_GetTick>
 80061f6:	4602      	mov	r2, r0
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	1ad3      	subs	r3, r2, r3
 80061fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006200:	4293      	cmp	r3, r2
 8006202:	d901      	bls.n	8006208 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006204:	2303      	movs	r3, #3
 8006206:	e121      	b.n	800644c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006208:	4b3a      	ldr	r3, [pc, #232]	@ (80062f4 <HAL_RCC_OscConfig+0x4b8>)
 800620a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800620e:	f003 0302 	and.w	r3, r3, #2
 8006212:	2b00      	cmp	r3, #0
 8006214:	d1ed      	bne.n	80061f2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006216:	7ffb      	ldrb	r3, [r7, #31]
 8006218:	2b01      	cmp	r3, #1
 800621a:	d105      	bne.n	8006228 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800621c:	4b35      	ldr	r3, [pc, #212]	@ (80062f4 <HAL_RCC_OscConfig+0x4b8>)
 800621e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006220:	4a34      	ldr	r2, [pc, #208]	@ (80062f4 <HAL_RCC_OscConfig+0x4b8>)
 8006222:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006226:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f003 0320 	and.w	r3, r3, #32
 8006230:	2b00      	cmp	r3, #0
 8006232:	d03c      	beq.n	80062ae <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	699b      	ldr	r3, [r3, #24]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d01c      	beq.n	8006276 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800623c:	4b2d      	ldr	r3, [pc, #180]	@ (80062f4 <HAL_RCC_OscConfig+0x4b8>)
 800623e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006242:	4a2c      	ldr	r2, [pc, #176]	@ (80062f4 <HAL_RCC_OscConfig+0x4b8>)
 8006244:	f043 0301 	orr.w	r3, r3, #1
 8006248:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800624c:	f7fd faa4 	bl	8003798 <HAL_GetTick>
 8006250:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006252:	e008      	b.n	8006266 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006254:	f7fd faa0 	bl	8003798 <HAL_GetTick>
 8006258:	4602      	mov	r2, r0
 800625a:	693b      	ldr	r3, [r7, #16]
 800625c:	1ad3      	subs	r3, r2, r3
 800625e:	2b02      	cmp	r3, #2
 8006260:	d901      	bls.n	8006266 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006262:	2303      	movs	r3, #3
 8006264:	e0f2      	b.n	800644c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006266:	4b23      	ldr	r3, [pc, #140]	@ (80062f4 <HAL_RCC_OscConfig+0x4b8>)
 8006268:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800626c:	f003 0302 	and.w	r3, r3, #2
 8006270:	2b00      	cmp	r3, #0
 8006272:	d0ef      	beq.n	8006254 <HAL_RCC_OscConfig+0x418>
 8006274:	e01b      	b.n	80062ae <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006276:	4b1f      	ldr	r3, [pc, #124]	@ (80062f4 <HAL_RCC_OscConfig+0x4b8>)
 8006278:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800627c:	4a1d      	ldr	r2, [pc, #116]	@ (80062f4 <HAL_RCC_OscConfig+0x4b8>)
 800627e:	f023 0301 	bic.w	r3, r3, #1
 8006282:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006286:	f7fd fa87 	bl	8003798 <HAL_GetTick>
 800628a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800628c:	e008      	b.n	80062a0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800628e:	f7fd fa83 	bl	8003798 <HAL_GetTick>
 8006292:	4602      	mov	r2, r0
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	1ad3      	subs	r3, r2, r3
 8006298:	2b02      	cmp	r3, #2
 800629a:	d901      	bls.n	80062a0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800629c:	2303      	movs	r3, #3
 800629e:	e0d5      	b.n	800644c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80062a0:	4b14      	ldr	r3, [pc, #80]	@ (80062f4 <HAL_RCC_OscConfig+0x4b8>)
 80062a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80062a6:	f003 0302 	and.w	r3, r3, #2
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d1ef      	bne.n	800628e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	69db      	ldr	r3, [r3, #28]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	f000 80c9 	beq.w	800644a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80062b8:	4b0e      	ldr	r3, [pc, #56]	@ (80062f4 <HAL_RCC_OscConfig+0x4b8>)
 80062ba:	689b      	ldr	r3, [r3, #8]
 80062bc:	f003 030c 	and.w	r3, r3, #12
 80062c0:	2b0c      	cmp	r3, #12
 80062c2:	f000 8083 	beq.w	80063cc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	69db      	ldr	r3, [r3, #28]
 80062ca:	2b02      	cmp	r3, #2
 80062cc:	d15e      	bne.n	800638c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062ce:	4b09      	ldr	r3, [pc, #36]	@ (80062f4 <HAL_RCC_OscConfig+0x4b8>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a08      	ldr	r2, [pc, #32]	@ (80062f4 <HAL_RCC_OscConfig+0x4b8>)
 80062d4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80062d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062da:	f7fd fa5d 	bl	8003798 <HAL_GetTick>
 80062de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80062e0:	e00c      	b.n	80062fc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062e2:	f7fd fa59 	bl	8003798 <HAL_GetTick>
 80062e6:	4602      	mov	r2, r0
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	1ad3      	subs	r3, r2, r3
 80062ec:	2b02      	cmp	r3, #2
 80062ee:	d905      	bls.n	80062fc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80062f0:	2303      	movs	r3, #3
 80062f2:	e0ab      	b.n	800644c <HAL_RCC_OscConfig+0x610>
 80062f4:	40021000 	.word	0x40021000
 80062f8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80062fc:	4b55      	ldr	r3, [pc, #340]	@ (8006454 <HAL_RCC_OscConfig+0x618>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006304:	2b00      	cmp	r3, #0
 8006306:	d1ec      	bne.n	80062e2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006308:	4b52      	ldr	r3, [pc, #328]	@ (8006454 <HAL_RCC_OscConfig+0x618>)
 800630a:	68da      	ldr	r2, [r3, #12]
 800630c:	4b52      	ldr	r3, [pc, #328]	@ (8006458 <HAL_RCC_OscConfig+0x61c>)
 800630e:	4013      	ands	r3, r2
 8006310:	687a      	ldr	r2, [r7, #4]
 8006312:	6a11      	ldr	r1, [r2, #32]
 8006314:	687a      	ldr	r2, [r7, #4]
 8006316:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006318:	3a01      	subs	r2, #1
 800631a:	0112      	lsls	r2, r2, #4
 800631c:	4311      	orrs	r1, r2
 800631e:	687a      	ldr	r2, [r7, #4]
 8006320:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8006322:	0212      	lsls	r2, r2, #8
 8006324:	4311      	orrs	r1, r2
 8006326:	687a      	ldr	r2, [r7, #4]
 8006328:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800632a:	0852      	lsrs	r2, r2, #1
 800632c:	3a01      	subs	r2, #1
 800632e:	0552      	lsls	r2, r2, #21
 8006330:	4311      	orrs	r1, r2
 8006332:	687a      	ldr	r2, [r7, #4]
 8006334:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006336:	0852      	lsrs	r2, r2, #1
 8006338:	3a01      	subs	r2, #1
 800633a:	0652      	lsls	r2, r2, #25
 800633c:	4311      	orrs	r1, r2
 800633e:	687a      	ldr	r2, [r7, #4]
 8006340:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006342:	06d2      	lsls	r2, r2, #27
 8006344:	430a      	orrs	r2, r1
 8006346:	4943      	ldr	r1, [pc, #268]	@ (8006454 <HAL_RCC_OscConfig+0x618>)
 8006348:	4313      	orrs	r3, r2
 800634a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800634c:	4b41      	ldr	r3, [pc, #260]	@ (8006454 <HAL_RCC_OscConfig+0x618>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a40      	ldr	r2, [pc, #256]	@ (8006454 <HAL_RCC_OscConfig+0x618>)
 8006352:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006356:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006358:	4b3e      	ldr	r3, [pc, #248]	@ (8006454 <HAL_RCC_OscConfig+0x618>)
 800635a:	68db      	ldr	r3, [r3, #12]
 800635c:	4a3d      	ldr	r2, [pc, #244]	@ (8006454 <HAL_RCC_OscConfig+0x618>)
 800635e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006362:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006364:	f7fd fa18 	bl	8003798 <HAL_GetTick>
 8006368:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800636a:	e008      	b.n	800637e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800636c:	f7fd fa14 	bl	8003798 <HAL_GetTick>
 8006370:	4602      	mov	r2, r0
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	1ad3      	subs	r3, r2, r3
 8006376:	2b02      	cmp	r3, #2
 8006378:	d901      	bls.n	800637e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800637a:	2303      	movs	r3, #3
 800637c:	e066      	b.n	800644c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800637e:	4b35      	ldr	r3, [pc, #212]	@ (8006454 <HAL_RCC_OscConfig+0x618>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006386:	2b00      	cmp	r3, #0
 8006388:	d0f0      	beq.n	800636c <HAL_RCC_OscConfig+0x530>
 800638a:	e05e      	b.n	800644a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800638c:	4b31      	ldr	r3, [pc, #196]	@ (8006454 <HAL_RCC_OscConfig+0x618>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a30      	ldr	r2, [pc, #192]	@ (8006454 <HAL_RCC_OscConfig+0x618>)
 8006392:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006396:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006398:	f7fd f9fe 	bl	8003798 <HAL_GetTick>
 800639c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800639e:	e008      	b.n	80063b2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063a0:	f7fd f9fa 	bl	8003798 <HAL_GetTick>
 80063a4:	4602      	mov	r2, r0
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	1ad3      	subs	r3, r2, r3
 80063aa:	2b02      	cmp	r3, #2
 80063ac:	d901      	bls.n	80063b2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80063ae:	2303      	movs	r3, #3
 80063b0:	e04c      	b.n	800644c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80063b2:	4b28      	ldr	r3, [pc, #160]	@ (8006454 <HAL_RCC_OscConfig+0x618>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d1f0      	bne.n	80063a0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80063be:	4b25      	ldr	r3, [pc, #148]	@ (8006454 <HAL_RCC_OscConfig+0x618>)
 80063c0:	68da      	ldr	r2, [r3, #12]
 80063c2:	4924      	ldr	r1, [pc, #144]	@ (8006454 <HAL_RCC_OscConfig+0x618>)
 80063c4:	4b25      	ldr	r3, [pc, #148]	@ (800645c <HAL_RCC_OscConfig+0x620>)
 80063c6:	4013      	ands	r3, r2
 80063c8:	60cb      	str	r3, [r1, #12]
 80063ca:	e03e      	b.n	800644a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	69db      	ldr	r3, [r3, #28]
 80063d0:	2b01      	cmp	r3, #1
 80063d2:	d101      	bne.n	80063d8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80063d4:	2301      	movs	r3, #1
 80063d6:	e039      	b.n	800644c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80063d8:	4b1e      	ldr	r3, [pc, #120]	@ (8006454 <HAL_RCC_OscConfig+0x618>)
 80063da:	68db      	ldr	r3, [r3, #12]
 80063dc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	f003 0203 	and.w	r2, r3, #3
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6a1b      	ldr	r3, [r3, #32]
 80063e8:	429a      	cmp	r2, r3
 80063ea:	d12c      	bne.n	8006446 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063f6:	3b01      	subs	r3, #1
 80063f8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063fa:	429a      	cmp	r2, r3
 80063fc:	d123      	bne.n	8006446 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006408:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800640a:	429a      	cmp	r2, r3
 800640c:	d11b      	bne.n	8006446 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006418:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800641a:	429a      	cmp	r2, r3
 800641c:	d113      	bne.n	8006446 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006428:	085b      	lsrs	r3, r3, #1
 800642a:	3b01      	subs	r3, #1
 800642c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800642e:	429a      	cmp	r2, r3
 8006430:	d109      	bne.n	8006446 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800643c:	085b      	lsrs	r3, r3, #1
 800643e:	3b01      	subs	r3, #1
 8006440:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006442:	429a      	cmp	r2, r3
 8006444:	d001      	beq.n	800644a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8006446:	2301      	movs	r3, #1
 8006448:	e000      	b.n	800644c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800644a:	2300      	movs	r3, #0
}
 800644c:	4618      	mov	r0, r3
 800644e:	3720      	adds	r7, #32
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}
 8006454:	40021000 	.word	0x40021000
 8006458:	019f800c 	.word	0x019f800c
 800645c:	feeefffc 	.word	0xfeeefffc

08006460 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b086      	sub	sp, #24
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
 8006468:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800646a:	2300      	movs	r3, #0
 800646c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d101      	bne.n	8006478 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006474:	2301      	movs	r3, #1
 8006476:	e11e      	b.n	80066b6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006478:	4b91      	ldr	r3, [pc, #580]	@ (80066c0 <HAL_RCC_ClockConfig+0x260>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f003 030f 	and.w	r3, r3, #15
 8006480:	683a      	ldr	r2, [r7, #0]
 8006482:	429a      	cmp	r2, r3
 8006484:	d910      	bls.n	80064a8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006486:	4b8e      	ldr	r3, [pc, #568]	@ (80066c0 <HAL_RCC_ClockConfig+0x260>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f023 020f 	bic.w	r2, r3, #15
 800648e:	498c      	ldr	r1, [pc, #560]	@ (80066c0 <HAL_RCC_ClockConfig+0x260>)
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	4313      	orrs	r3, r2
 8006494:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006496:	4b8a      	ldr	r3, [pc, #552]	@ (80066c0 <HAL_RCC_ClockConfig+0x260>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f003 030f 	and.w	r3, r3, #15
 800649e:	683a      	ldr	r2, [r7, #0]
 80064a0:	429a      	cmp	r2, r3
 80064a2:	d001      	beq.n	80064a8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80064a4:	2301      	movs	r3, #1
 80064a6:	e106      	b.n	80066b6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f003 0301 	and.w	r3, r3, #1
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d073      	beq.n	800659c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	2b03      	cmp	r3, #3
 80064ba:	d129      	bne.n	8006510 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80064bc:	4b81      	ldr	r3, [pc, #516]	@ (80066c4 <HAL_RCC_ClockConfig+0x264>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d101      	bne.n	80064cc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80064c8:	2301      	movs	r3, #1
 80064ca:	e0f4      	b.n	80066b6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80064cc:	f000 f99e 	bl	800680c <RCC_GetSysClockFreqFromPLLSource>
 80064d0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	4a7c      	ldr	r2, [pc, #496]	@ (80066c8 <HAL_RCC_ClockConfig+0x268>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d93f      	bls.n	800655a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80064da:	4b7a      	ldr	r3, [pc, #488]	@ (80066c4 <HAL_RCC_ClockConfig+0x264>)
 80064dc:	689b      	ldr	r3, [r3, #8]
 80064de:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d009      	beq.n	80064fa <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d033      	beq.n	800655a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d12f      	bne.n	800655a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80064fa:	4b72      	ldr	r3, [pc, #456]	@ (80066c4 <HAL_RCC_ClockConfig+0x264>)
 80064fc:	689b      	ldr	r3, [r3, #8]
 80064fe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006502:	4a70      	ldr	r2, [pc, #448]	@ (80066c4 <HAL_RCC_ClockConfig+0x264>)
 8006504:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006508:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800650a:	2380      	movs	r3, #128	@ 0x80
 800650c:	617b      	str	r3, [r7, #20]
 800650e:	e024      	b.n	800655a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	2b02      	cmp	r3, #2
 8006516:	d107      	bne.n	8006528 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006518:	4b6a      	ldr	r3, [pc, #424]	@ (80066c4 <HAL_RCC_ClockConfig+0x264>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006520:	2b00      	cmp	r3, #0
 8006522:	d109      	bne.n	8006538 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006524:	2301      	movs	r3, #1
 8006526:	e0c6      	b.n	80066b6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006528:	4b66      	ldr	r3, [pc, #408]	@ (80066c4 <HAL_RCC_ClockConfig+0x264>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006530:	2b00      	cmp	r3, #0
 8006532:	d101      	bne.n	8006538 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006534:	2301      	movs	r3, #1
 8006536:	e0be      	b.n	80066b6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006538:	f000 f8ce 	bl	80066d8 <HAL_RCC_GetSysClockFreq>
 800653c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	4a61      	ldr	r2, [pc, #388]	@ (80066c8 <HAL_RCC_ClockConfig+0x268>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d909      	bls.n	800655a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006546:	4b5f      	ldr	r3, [pc, #380]	@ (80066c4 <HAL_RCC_ClockConfig+0x264>)
 8006548:	689b      	ldr	r3, [r3, #8]
 800654a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800654e:	4a5d      	ldr	r2, [pc, #372]	@ (80066c4 <HAL_RCC_ClockConfig+0x264>)
 8006550:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006554:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006556:	2380      	movs	r3, #128	@ 0x80
 8006558:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800655a:	4b5a      	ldr	r3, [pc, #360]	@ (80066c4 <HAL_RCC_ClockConfig+0x264>)
 800655c:	689b      	ldr	r3, [r3, #8]
 800655e:	f023 0203 	bic.w	r2, r3, #3
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	685b      	ldr	r3, [r3, #4]
 8006566:	4957      	ldr	r1, [pc, #348]	@ (80066c4 <HAL_RCC_ClockConfig+0x264>)
 8006568:	4313      	orrs	r3, r2
 800656a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800656c:	f7fd f914 	bl	8003798 <HAL_GetTick>
 8006570:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006572:	e00a      	b.n	800658a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006574:	f7fd f910 	bl	8003798 <HAL_GetTick>
 8006578:	4602      	mov	r2, r0
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	1ad3      	subs	r3, r2, r3
 800657e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006582:	4293      	cmp	r3, r2
 8006584:	d901      	bls.n	800658a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006586:	2303      	movs	r3, #3
 8006588:	e095      	b.n	80066b6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800658a:	4b4e      	ldr	r3, [pc, #312]	@ (80066c4 <HAL_RCC_ClockConfig+0x264>)
 800658c:	689b      	ldr	r3, [r3, #8]
 800658e:	f003 020c 	and.w	r2, r3, #12
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	009b      	lsls	r3, r3, #2
 8006598:	429a      	cmp	r2, r3
 800659a:	d1eb      	bne.n	8006574 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f003 0302 	and.w	r3, r3, #2
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d023      	beq.n	80065f0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f003 0304 	and.w	r3, r3, #4
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d005      	beq.n	80065c0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80065b4:	4b43      	ldr	r3, [pc, #268]	@ (80066c4 <HAL_RCC_ClockConfig+0x264>)
 80065b6:	689b      	ldr	r3, [r3, #8]
 80065b8:	4a42      	ldr	r2, [pc, #264]	@ (80066c4 <HAL_RCC_ClockConfig+0x264>)
 80065ba:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80065be:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f003 0308 	and.w	r3, r3, #8
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d007      	beq.n	80065dc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80065cc:	4b3d      	ldr	r3, [pc, #244]	@ (80066c4 <HAL_RCC_ClockConfig+0x264>)
 80065ce:	689b      	ldr	r3, [r3, #8]
 80065d0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80065d4:	4a3b      	ldr	r2, [pc, #236]	@ (80066c4 <HAL_RCC_ClockConfig+0x264>)
 80065d6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80065da:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80065dc:	4b39      	ldr	r3, [pc, #228]	@ (80066c4 <HAL_RCC_ClockConfig+0x264>)
 80065de:	689b      	ldr	r3, [r3, #8]
 80065e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	689b      	ldr	r3, [r3, #8]
 80065e8:	4936      	ldr	r1, [pc, #216]	@ (80066c4 <HAL_RCC_ClockConfig+0x264>)
 80065ea:	4313      	orrs	r3, r2
 80065ec:	608b      	str	r3, [r1, #8]
 80065ee:	e008      	b.n	8006602 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	2b80      	cmp	r3, #128	@ 0x80
 80065f4:	d105      	bne.n	8006602 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80065f6:	4b33      	ldr	r3, [pc, #204]	@ (80066c4 <HAL_RCC_ClockConfig+0x264>)
 80065f8:	689b      	ldr	r3, [r3, #8]
 80065fa:	4a32      	ldr	r2, [pc, #200]	@ (80066c4 <HAL_RCC_ClockConfig+0x264>)
 80065fc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006600:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006602:	4b2f      	ldr	r3, [pc, #188]	@ (80066c0 <HAL_RCC_ClockConfig+0x260>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f003 030f 	and.w	r3, r3, #15
 800660a:	683a      	ldr	r2, [r7, #0]
 800660c:	429a      	cmp	r2, r3
 800660e:	d21d      	bcs.n	800664c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006610:	4b2b      	ldr	r3, [pc, #172]	@ (80066c0 <HAL_RCC_ClockConfig+0x260>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f023 020f 	bic.w	r2, r3, #15
 8006618:	4929      	ldr	r1, [pc, #164]	@ (80066c0 <HAL_RCC_ClockConfig+0x260>)
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	4313      	orrs	r3, r2
 800661e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006620:	f7fd f8ba 	bl	8003798 <HAL_GetTick>
 8006624:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006626:	e00a      	b.n	800663e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006628:	f7fd f8b6 	bl	8003798 <HAL_GetTick>
 800662c:	4602      	mov	r2, r0
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	1ad3      	subs	r3, r2, r3
 8006632:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006636:	4293      	cmp	r3, r2
 8006638:	d901      	bls.n	800663e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800663a:	2303      	movs	r3, #3
 800663c:	e03b      	b.n	80066b6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800663e:	4b20      	ldr	r3, [pc, #128]	@ (80066c0 <HAL_RCC_ClockConfig+0x260>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f003 030f 	and.w	r3, r3, #15
 8006646:	683a      	ldr	r2, [r7, #0]
 8006648:	429a      	cmp	r2, r3
 800664a:	d1ed      	bne.n	8006628 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f003 0304 	and.w	r3, r3, #4
 8006654:	2b00      	cmp	r3, #0
 8006656:	d008      	beq.n	800666a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006658:	4b1a      	ldr	r3, [pc, #104]	@ (80066c4 <HAL_RCC_ClockConfig+0x264>)
 800665a:	689b      	ldr	r3, [r3, #8]
 800665c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	68db      	ldr	r3, [r3, #12]
 8006664:	4917      	ldr	r1, [pc, #92]	@ (80066c4 <HAL_RCC_ClockConfig+0x264>)
 8006666:	4313      	orrs	r3, r2
 8006668:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f003 0308 	and.w	r3, r3, #8
 8006672:	2b00      	cmp	r3, #0
 8006674:	d009      	beq.n	800668a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006676:	4b13      	ldr	r3, [pc, #76]	@ (80066c4 <HAL_RCC_ClockConfig+0x264>)
 8006678:	689b      	ldr	r3, [r3, #8]
 800667a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	691b      	ldr	r3, [r3, #16]
 8006682:	00db      	lsls	r3, r3, #3
 8006684:	490f      	ldr	r1, [pc, #60]	@ (80066c4 <HAL_RCC_ClockConfig+0x264>)
 8006686:	4313      	orrs	r3, r2
 8006688:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800668a:	f000 f825 	bl	80066d8 <HAL_RCC_GetSysClockFreq>
 800668e:	4602      	mov	r2, r0
 8006690:	4b0c      	ldr	r3, [pc, #48]	@ (80066c4 <HAL_RCC_ClockConfig+0x264>)
 8006692:	689b      	ldr	r3, [r3, #8]
 8006694:	091b      	lsrs	r3, r3, #4
 8006696:	f003 030f 	and.w	r3, r3, #15
 800669a:	490c      	ldr	r1, [pc, #48]	@ (80066cc <HAL_RCC_ClockConfig+0x26c>)
 800669c:	5ccb      	ldrb	r3, [r1, r3]
 800669e:	f003 031f 	and.w	r3, r3, #31
 80066a2:	fa22 f303 	lsr.w	r3, r2, r3
 80066a6:	4a0a      	ldr	r2, [pc, #40]	@ (80066d0 <HAL_RCC_ClockConfig+0x270>)
 80066a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80066aa:	4b0a      	ldr	r3, [pc, #40]	@ (80066d4 <HAL_RCC_ClockConfig+0x274>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4618      	mov	r0, r3
 80066b0:	f7fd f826 	bl	8003700 <HAL_InitTick>
 80066b4:	4603      	mov	r3, r0
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	3718      	adds	r7, #24
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}
 80066be:	bf00      	nop
 80066c0:	40022000 	.word	0x40022000
 80066c4:	40021000 	.word	0x40021000
 80066c8:	04c4b400 	.word	0x04c4b400
 80066cc:	0800bcd8 	.word	0x0800bcd8
 80066d0:	20000200 	.word	0x20000200
 80066d4:	20000204 	.word	0x20000204

080066d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80066d8:	b480      	push	{r7}
 80066da:	b087      	sub	sp, #28
 80066dc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80066de:	4b2c      	ldr	r3, [pc, #176]	@ (8006790 <HAL_RCC_GetSysClockFreq+0xb8>)
 80066e0:	689b      	ldr	r3, [r3, #8]
 80066e2:	f003 030c 	and.w	r3, r3, #12
 80066e6:	2b04      	cmp	r3, #4
 80066e8:	d102      	bne.n	80066f0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80066ea:	4b2a      	ldr	r3, [pc, #168]	@ (8006794 <HAL_RCC_GetSysClockFreq+0xbc>)
 80066ec:	613b      	str	r3, [r7, #16]
 80066ee:	e047      	b.n	8006780 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80066f0:	4b27      	ldr	r3, [pc, #156]	@ (8006790 <HAL_RCC_GetSysClockFreq+0xb8>)
 80066f2:	689b      	ldr	r3, [r3, #8]
 80066f4:	f003 030c 	and.w	r3, r3, #12
 80066f8:	2b08      	cmp	r3, #8
 80066fa:	d102      	bne.n	8006702 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80066fc:	4b26      	ldr	r3, [pc, #152]	@ (8006798 <HAL_RCC_GetSysClockFreq+0xc0>)
 80066fe:	613b      	str	r3, [r7, #16]
 8006700:	e03e      	b.n	8006780 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006702:	4b23      	ldr	r3, [pc, #140]	@ (8006790 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006704:	689b      	ldr	r3, [r3, #8]
 8006706:	f003 030c 	and.w	r3, r3, #12
 800670a:	2b0c      	cmp	r3, #12
 800670c:	d136      	bne.n	800677c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800670e:	4b20      	ldr	r3, [pc, #128]	@ (8006790 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006710:	68db      	ldr	r3, [r3, #12]
 8006712:	f003 0303 	and.w	r3, r3, #3
 8006716:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006718:	4b1d      	ldr	r3, [pc, #116]	@ (8006790 <HAL_RCC_GetSysClockFreq+0xb8>)
 800671a:	68db      	ldr	r3, [r3, #12]
 800671c:	091b      	lsrs	r3, r3, #4
 800671e:	f003 030f 	and.w	r3, r3, #15
 8006722:	3301      	adds	r3, #1
 8006724:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	2b03      	cmp	r3, #3
 800672a:	d10c      	bne.n	8006746 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800672c:	4a1a      	ldr	r2, [pc, #104]	@ (8006798 <HAL_RCC_GetSysClockFreq+0xc0>)
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	fbb2 f3f3 	udiv	r3, r2, r3
 8006734:	4a16      	ldr	r2, [pc, #88]	@ (8006790 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006736:	68d2      	ldr	r2, [r2, #12]
 8006738:	0a12      	lsrs	r2, r2, #8
 800673a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800673e:	fb02 f303 	mul.w	r3, r2, r3
 8006742:	617b      	str	r3, [r7, #20]
      break;
 8006744:	e00c      	b.n	8006760 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006746:	4a13      	ldr	r2, [pc, #76]	@ (8006794 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	fbb2 f3f3 	udiv	r3, r2, r3
 800674e:	4a10      	ldr	r2, [pc, #64]	@ (8006790 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006750:	68d2      	ldr	r2, [r2, #12]
 8006752:	0a12      	lsrs	r2, r2, #8
 8006754:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006758:	fb02 f303 	mul.w	r3, r2, r3
 800675c:	617b      	str	r3, [r7, #20]
      break;
 800675e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006760:	4b0b      	ldr	r3, [pc, #44]	@ (8006790 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006762:	68db      	ldr	r3, [r3, #12]
 8006764:	0e5b      	lsrs	r3, r3, #25
 8006766:	f003 0303 	and.w	r3, r3, #3
 800676a:	3301      	adds	r3, #1
 800676c:	005b      	lsls	r3, r3, #1
 800676e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006770:	697a      	ldr	r2, [r7, #20]
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	fbb2 f3f3 	udiv	r3, r2, r3
 8006778:	613b      	str	r3, [r7, #16]
 800677a:	e001      	b.n	8006780 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800677c:	2300      	movs	r3, #0
 800677e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006780:	693b      	ldr	r3, [r7, #16]
}
 8006782:	4618      	mov	r0, r3
 8006784:	371c      	adds	r7, #28
 8006786:	46bd      	mov	sp, r7
 8006788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678c:	4770      	bx	lr
 800678e:	bf00      	nop
 8006790:	40021000 	.word	0x40021000
 8006794:	00f42400 	.word	0x00f42400
 8006798:	016e3600 	.word	0x016e3600

0800679c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800679c:	b480      	push	{r7}
 800679e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80067a0:	4b03      	ldr	r3, [pc, #12]	@ (80067b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80067a2:	681b      	ldr	r3, [r3, #0]
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	46bd      	mov	sp, r7
 80067a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ac:	4770      	bx	lr
 80067ae:	bf00      	nop
 80067b0:	20000200 	.word	0x20000200

080067b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80067b8:	f7ff fff0 	bl	800679c <HAL_RCC_GetHCLKFreq>
 80067bc:	4602      	mov	r2, r0
 80067be:	4b06      	ldr	r3, [pc, #24]	@ (80067d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80067c0:	689b      	ldr	r3, [r3, #8]
 80067c2:	0a1b      	lsrs	r3, r3, #8
 80067c4:	f003 0307 	and.w	r3, r3, #7
 80067c8:	4904      	ldr	r1, [pc, #16]	@ (80067dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80067ca:	5ccb      	ldrb	r3, [r1, r3]
 80067cc:	f003 031f 	and.w	r3, r3, #31
 80067d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80067d4:	4618      	mov	r0, r3
 80067d6:	bd80      	pop	{r7, pc}
 80067d8:	40021000 	.word	0x40021000
 80067dc:	0800bce8 	.word	0x0800bce8

080067e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80067e4:	f7ff ffda 	bl	800679c <HAL_RCC_GetHCLKFreq>
 80067e8:	4602      	mov	r2, r0
 80067ea:	4b06      	ldr	r3, [pc, #24]	@ (8006804 <HAL_RCC_GetPCLK2Freq+0x24>)
 80067ec:	689b      	ldr	r3, [r3, #8]
 80067ee:	0adb      	lsrs	r3, r3, #11
 80067f0:	f003 0307 	and.w	r3, r3, #7
 80067f4:	4904      	ldr	r1, [pc, #16]	@ (8006808 <HAL_RCC_GetPCLK2Freq+0x28>)
 80067f6:	5ccb      	ldrb	r3, [r1, r3]
 80067f8:	f003 031f 	and.w	r3, r3, #31
 80067fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006800:	4618      	mov	r0, r3
 8006802:	bd80      	pop	{r7, pc}
 8006804:	40021000 	.word	0x40021000
 8006808:	0800bce8 	.word	0x0800bce8

0800680c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800680c:	b480      	push	{r7}
 800680e:	b087      	sub	sp, #28
 8006810:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006812:	4b1e      	ldr	r3, [pc, #120]	@ (800688c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006814:	68db      	ldr	r3, [r3, #12]
 8006816:	f003 0303 	and.w	r3, r3, #3
 800681a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800681c:	4b1b      	ldr	r3, [pc, #108]	@ (800688c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800681e:	68db      	ldr	r3, [r3, #12]
 8006820:	091b      	lsrs	r3, r3, #4
 8006822:	f003 030f 	and.w	r3, r3, #15
 8006826:	3301      	adds	r3, #1
 8006828:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	2b03      	cmp	r3, #3
 800682e:	d10c      	bne.n	800684a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006830:	4a17      	ldr	r2, [pc, #92]	@ (8006890 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	fbb2 f3f3 	udiv	r3, r2, r3
 8006838:	4a14      	ldr	r2, [pc, #80]	@ (800688c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800683a:	68d2      	ldr	r2, [r2, #12]
 800683c:	0a12      	lsrs	r2, r2, #8
 800683e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006842:	fb02 f303 	mul.w	r3, r2, r3
 8006846:	617b      	str	r3, [r7, #20]
    break;
 8006848:	e00c      	b.n	8006864 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800684a:	4a12      	ldr	r2, [pc, #72]	@ (8006894 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006852:	4a0e      	ldr	r2, [pc, #56]	@ (800688c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006854:	68d2      	ldr	r2, [r2, #12]
 8006856:	0a12      	lsrs	r2, r2, #8
 8006858:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800685c:	fb02 f303 	mul.w	r3, r2, r3
 8006860:	617b      	str	r3, [r7, #20]
    break;
 8006862:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006864:	4b09      	ldr	r3, [pc, #36]	@ (800688c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006866:	68db      	ldr	r3, [r3, #12]
 8006868:	0e5b      	lsrs	r3, r3, #25
 800686a:	f003 0303 	and.w	r3, r3, #3
 800686e:	3301      	adds	r3, #1
 8006870:	005b      	lsls	r3, r3, #1
 8006872:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006874:	697a      	ldr	r2, [r7, #20]
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	fbb2 f3f3 	udiv	r3, r2, r3
 800687c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800687e:	687b      	ldr	r3, [r7, #4]
}
 8006880:	4618      	mov	r0, r3
 8006882:	371c      	adds	r7, #28
 8006884:	46bd      	mov	sp, r7
 8006886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688a:	4770      	bx	lr
 800688c:	40021000 	.word	0x40021000
 8006890:	016e3600 	.word	0x016e3600
 8006894:	00f42400 	.word	0x00f42400

08006898 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b086      	sub	sp, #24
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80068a0:	2300      	movs	r3, #0
 80068a2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80068a4:	2300      	movs	r3, #0
 80068a6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	f000 8098 	beq.w	80069e6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80068b6:	2300      	movs	r3, #0
 80068b8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80068ba:	4b43      	ldr	r3, [pc, #268]	@ (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80068bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d10d      	bne.n	80068e2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80068c6:	4b40      	ldr	r3, [pc, #256]	@ (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80068c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068ca:	4a3f      	ldr	r2, [pc, #252]	@ (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80068cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80068d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80068d2:	4b3d      	ldr	r3, [pc, #244]	@ (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80068d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80068da:	60bb      	str	r3, [r7, #8]
 80068dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80068de:	2301      	movs	r3, #1
 80068e0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80068e2:	4b3a      	ldr	r3, [pc, #232]	@ (80069cc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a39      	ldr	r2, [pc, #228]	@ (80069cc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80068e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80068ec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80068ee:	f7fc ff53 	bl	8003798 <HAL_GetTick>
 80068f2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80068f4:	e009      	b.n	800690a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068f6:	f7fc ff4f 	bl	8003798 <HAL_GetTick>
 80068fa:	4602      	mov	r2, r0
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	1ad3      	subs	r3, r2, r3
 8006900:	2b02      	cmp	r3, #2
 8006902:	d902      	bls.n	800690a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006904:	2303      	movs	r3, #3
 8006906:	74fb      	strb	r3, [r7, #19]
        break;
 8006908:	e005      	b.n	8006916 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800690a:	4b30      	ldr	r3, [pc, #192]	@ (80069cc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006912:	2b00      	cmp	r3, #0
 8006914:	d0ef      	beq.n	80068f6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006916:	7cfb      	ldrb	r3, [r7, #19]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d159      	bne.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800691c:	4b2a      	ldr	r3, [pc, #168]	@ (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800691e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006922:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006926:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d01e      	beq.n	800696c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006932:	697a      	ldr	r2, [r7, #20]
 8006934:	429a      	cmp	r2, r3
 8006936:	d019      	beq.n	800696c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006938:	4b23      	ldr	r3, [pc, #140]	@ (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800693a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800693e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006942:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006944:	4b20      	ldr	r3, [pc, #128]	@ (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006946:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800694a:	4a1f      	ldr	r2, [pc, #124]	@ (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800694c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006950:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006954:	4b1c      	ldr	r3, [pc, #112]	@ (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006956:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800695a:	4a1b      	ldr	r2, [pc, #108]	@ (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800695c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006960:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006964:	4a18      	ldr	r2, [pc, #96]	@ (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	f003 0301 	and.w	r3, r3, #1
 8006972:	2b00      	cmp	r3, #0
 8006974:	d016      	beq.n	80069a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006976:	f7fc ff0f 	bl	8003798 <HAL_GetTick>
 800697a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800697c:	e00b      	b.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800697e:	f7fc ff0b 	bl	8003798 <HAL_GetTick>
 8006982:	4602      	mov	r2, r0
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	1ad3      	subs	r3, r2, r3
 8006988:	f241 3288 	movw	r2, #5000	@ 0x1388
 800698c:	4293      	cmp	r3, r2
 800698e:	d902      	bls.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006990:	2303      	movs	r3, #3
 8006992:	74fb      	strb	r3, [r7, #19]
            break;
 8006994:	e006      	b.n	80069a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006996:	4b0c      	ldr	r3, [pc, #48]	@ (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006998:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800699c:	f003 0302 	and.w	r3, r3, #2
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d0ec      	beq.n	800697e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80069a4:	7cfb      	ldrb	r3, [r7, #19]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d10b      	bne.n	80069c2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80069aa:	4b07      	ldr	r3, [pc, #28]	@ (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80069ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069b0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069b8:	4903      	ldr	r1, [pc, #12]	@ (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80069ba:	4313      	orrs	r3, r2
 80069bc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80069c0:	e008      	b.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80069c2:	7cfb      	ldrb	r3, [r7, #19]
 80069c4:	74bb      	strb	r3, [r7, #18]
 80069c6:	e005      	b.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80069c8:	40021000 	.word	0x40021000
 80069cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069d0:	7cfb      	ldrb	r3, [r7, #19]
 80069d2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80069d4:	7c7b      	ldrb	r3, [r7, #17]
 80069d6:	2b01      	cmp	r3, #1
 80069d8:	d105      	bne.n	80069e6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80069da:	4ba7      	ldr	r3, [pc, #668]	@ (8006c78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069de:	4aa6      	ldr	r2, [pc, #664]	@ (8006c78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80069e4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f003 0301 	and.w	r3, r3, #1
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d00a      	beq.n	8006a08 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80069f2:	4ba1      	ldr	r3, [pc, #644]	@ (8006c78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069f8:	f023 0203 	bic.w	r2, r3, #3
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	499d      	ldr	r1, [pc, #628]	@ (8006c78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a02:	4313      	orrs	r3, r2
 8006a04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f003 0302 	and.w	r3, r3, #2
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d00a      	beq.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006a14:	4b98      	ldr	r3, [pc, #608]	@ (8006c78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a1a:	f023 020c 	bic.w	r2, r3, #12
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	689b      	ldr	r3, [r3, #8]
 8006a22:	4995      	ldr	r1, [pc, #596]	@ (8006c78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a24:	4313      	orrs	r3, r2
 8006a26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f003 0304 	and.w	r3, r3, #4
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d00a      	beq.n	8006a4c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006a36:	4b90      	ldr	r3, [pc, #576]	@ (8006c78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a3c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	68db      	ldr	r3, [r3, #12]
 8006a44:	498c      	ldr	r1, [pc, #560]	@ (8006c78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a46:	4313      	orrs	r3, r2
 8006a48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f003 0308 	and.w	r3, r3, #8
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d00a      	beq.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006a58:	4b87      	ldr	r3, [pc, #540]	@ (8006c78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a5e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	691b      	ldr	r3, [r3, #16]
 8006a66:	4984      	ldr	r1, [pc, #528]	@ (8006c78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a68:	4313      	orrs	r3, r2
 8006a6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f003 0310 	and.w	r3, r3, #16
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d00a      	beq.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006a7a:	4b7f      	ldr	r3, [pc, #508]	@ (8006c78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a80:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	695b      	ldr	r3, [r3, #20]
 8006a88:	497b      	ldr	r1, [pc, #492]	@ (8006c78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f003 0320 	and.w	r3, r3, #32
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d00a      	beq.n	8006ab2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006a9c:	4b76      	ldr	r3, [pc, #472]	@ (8006c78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006aa2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	699b      	ldr	r3, [r3, #24]
 8006aaa:	4973      	ldr	r1, [pc, #460]	@ (8006c78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006aac:	4313      	orrs	r3, r2
 8006aae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d00a      	beq.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006abe:	4b6e      	ldr	r3, [pc, #440]	@ (8006c78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ac0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ac4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	69db      	ldr	r3, [r3, #28]
 8006acc:	496a      	ldr	r1, [pc, #424]	@ (8006c78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d00a      	beq.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006ae0:	4b65      	ldr	r3, [pc, #404]	@ (8006c78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ae6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6a1b      	ldr	r3, [r3, #32]
 8006aee:	4962      	ldr	r1, [pc, #392]	@ (8006c78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006af0:	4313      	orrs	r3, r2
 8006af2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d00a      	beq.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006b02:	4b5d      	ldr	r3, [pc, #372]	@ (8006c78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b08:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b10:	4959      	ldr	r1, [pc, #356]	@ (8006c78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b12:	4313      	orrs	r3, r2
 8006b14:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d00a      	beq.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006b24:	4b54      	ldr	r3, [pc, #336]	@ (8006c78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b26:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006b2a:	f023 0203 	bic.w	r2, r3, #3
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b32:	4951      	ldr	r1, [pc, #324]	@ (8006c78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b34:	4313      	orrs	r3, r2
 8006b36:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d00a      	beq.n	8006b5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006b46:	4b4c      	ldr	r3, [pc, #304]	@ (8006c78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b4c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b54:	4948      	ldr	r1, [pc, #288]	@ (8006c78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b56:	4313      	orrs	r3, r2
 8006b58:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d015      	beq.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006b68:	4b43      	ldr	r3, [pc, #268]	@ (8006c78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b6e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b76:	4940      	ldr	r1, [pc, #256]	@ (8006c78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b78:	4313      	orrs	r3, r2
 8006b7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b82:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006b86:	d105      	bne.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006b88:	4b3b      	ldr	r3, [pc, #236]	@ (8006c78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b8a:	68db      	ldr	r3, [r3, #12]
 8006b8c:	4a3a      	ldr	r2, [pc, #232]	@ (8006c78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b8e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006b92:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d015      	beq.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006ba0:	4b35      	ldr	r3, [pc, #212]	@ (8006c78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ba6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006bae:	4932      	ldr	r1, [pc, #200]	@ (8006c78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bb0:	4313      	orrs	r3, r2
 8006bb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006bba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006bbe:	d105      	bne.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006bc0:	4b2d      	ldr	r3, [pc, #180]	@ (8006c78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bc2:	68db      	ldr	r3, [r3, #12]
 8006bc4:	4a2c      	ldr	r2, [pc, #176]	@ (8006c78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bc6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006bca:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d015      	beq.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006bd8:	4b27      	ldr	r3, [pc, #156]	@ (8006c78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bde:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006be6:	4924      	ldr	r1, [pc, #144]	@ (8006c78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006be8:	4313      	orrs	r3, r2
 8006bea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bf2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006bf6:	d105      	bne.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006bf8:	4b1f      	ldr	r3, [pc, #124]	@ (8006c78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bfa:	68db      	ldr	r3, [r3, #12]
 8006bfc:	4a1e      	ldr	r2, [pc, #120]	@ (8006c78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bfe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006c02:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d015      	beq.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006c10:	4b19      	ldr	r3, [pc, #100]	@ (8006c78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c16:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c1e:	4916      	ldr	r1, [pc, #88]	@ (8006c78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c20:	4313      	orrs	r3, r2
 8006c22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c2a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006c2e:	d105      	bne.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006c30:	4b11      	ldr	r3, [pc, #68]	@ (8006c78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c32:	68db      	ldr	r3, [r3, #12]
 8006c34:	4a10      	ldr	r2, [pc, #64]	@ (8006c78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c36:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006c3a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d019      	beq.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006c48:	4b0b      	ldr	r3, [pc, #44]	@ (8006c78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c4e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c56:	4908      	ldr	r1, [pc, #32]	@ (8006c78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c58:	4313      	orrs	r3, r2
 8006c5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c62:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006c66:	d109      	bne.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006c68:	4b03      	ldr	r3, [pc, #12]	@ (8006c78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c6a:	68db      	ldr	r3, [r3, #12]
 8006c6c:	4a02      	ldr	r2, [pc, #8]	@ (8006c78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c6e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006c72:	60d3      	str	r3, [r2, #12]
 8006c74:	e002      	b.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8006c76:	bf00      	nop
 8006c78:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d015      	beq.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006c88:	4b29      	ldr	r3, [pc, #164]	@ (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c8e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c96:	4926      	ldr	r1, [pc, #152]	@ (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ca2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006ca6:	d105      	bne.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006ca8:	4b21      	ldr	r3, [pc, #132]	@ (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006caa:	68db      	ldr	r3, [r3, #12]
 8006cac:	4a20      	ldr	r2, [pc, #128]	@ (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006cae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006cb2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d015      	beq.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006cc0:	4b1b      	ldr	r3, [pc, #108]	@ (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cc6:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006cce:	4918      	ldr	r1, [pc, #96]	@ (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006cd0:	4313      	orrs	r3, r2
 8006cd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006cda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006cde:	d105      	bne.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006ce0:	4b13      	ldr	r3, [pc, #76]	@ (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006ce2:	68db      	ldr	r3, [r3, #12]
 8006ce4:	4a12      	ldr	r2, [pc, #72]	@ (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006ce6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006cea:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d015      	beq.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006cf8:	4b0d      	ldr	r3, [pc, #52]	@ (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006cfa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006cfe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d06:	490a      	ldr	r1, [pc, #40]	@ (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d12:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006d16:	d105      	bne.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006d18:	4b05      	ldr	r3, [pc, #20]	@ (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006d1a:	68db      	ldr	r3, [r3, #12]
 8006d1c:	4a04      	ldr	r2, [pc, #16]	@ (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006d1e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006d22:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006d24:	7cbb      	ldrb	r3, [r7, #18]
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	3718      	adds	r7, #24
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}
 8006d2e:	bf00      	nop
 8006d30:	40021000 	.word	0x40021000

08006d34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b082      	sub	sp, #8
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d101      	bne.n	8006d46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006d42:	2301      	movs	r3, #1
 8006d44:	e054      	b.n	8006df0 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d4c:	b2db      	uxtb	r3, r3
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d111      	bne.n	8006d76 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2200      	movs	r2, #0
 8006d56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f001 ffd4 	bl	8008d08 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d102      	bne.n	8006d6e <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	4a23      	ldr	r2, [pc, #140]	@ (8006df8 <HAL_TIM_Base_Init+0xc4>)
 8006d6c:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2202      	movs	r2, #2
 8006d7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681a      	ldr	r2, [r3, #0]
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	3304      	adds	r3, #4
 8006d86:	4619      	mov	r1, r3
 8006d88:	4610      	mov	r0, r2
 8006d8a:	f001 fb1d 	bl	80083c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2201      	movs	r2, #1
 8006d92:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2201      	movs	r2, #1
 8006d9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2201      	movs	r2, #1
 8006da2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2201      	movs	r2, #1
 8006daa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2201      	movs	r2, #1
 8006db2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2201      	movs	r2, #1
 8006dba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2201      	movs	r2, #1
 8006dc2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2201      	movs	r2, #1
 8006dca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2201      	movs	r2, #1
 8006dd2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2201      	movs	r2, #1
 8006dda:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2201      	movs	r2, #1
 8006de2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2201      	movs	r2, #1
 8006dea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006dee:	2300      	movs	r3, #0
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	3708      	adds	r7, #8
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}
 8006df8:	08003205 	.word	0x08003205

08006dfc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b085      	sub	sp, #20
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e0a:	b2db      	uxtb	r3, r3
 8006e0c:	2b01      	cmp	r3, #1
 8006e0e:	d001      	beq.n	8006e14 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006e10:	2301      	movs	r3, #1
 8006e12:	e04c      	b.n	8006eae <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2202      	movs	r2, #2
 8006e18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4a26      	ldr	r2, [pc, #152]	@ (8006ebc <HAL_TIM_Base_Start+0xc0>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d022      	beq.n	8006e6c <HAL_TIM_Base_Start+0x70>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e2e:	d01d      	beq.n	8006e6c <HAL_TIM_Base_Start+0x70>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	4a22      	ldr	r2, [pc, #136]	@ (8006ec0 <HAL_TIM_Base_Start+0xc4>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d018      	beq.n	8006e6c <HAL_TIM_Base_Start+0x70>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	4a21      	ldr	r2, [pc, #132]	@ (8006ec4 <HAL_TIM_Base_Start+0xc8>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d013      	beq.n	8006e6c <HAL_TIM_Base_Start+0x70>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4a1f      	ldr	r2, [pc, #124]	@ (8006ec8 <HAL_TIM_Base_Start+0xcc>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d00e      	beq.n	8006e6c <HAL_TIM_Base_Start+0x70>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	4a1e      	ldr	r2, [pc, #120]	@ (8006ecc <HAL_TIM_Base_Start+0xd0>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d009      	beq.n	8006e6c <HAL_TIM_Base_Start+0x70>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a1c      	ldr	r2, [pc, #112]	@ (8006ed0 <HAL_TIM_Base_Start+0xd4>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d004      	beq.n	8006e6c <HAL_TIM_Base_Start+0x70>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4a1b      	ldr	r2, [pc, #108]	@ (8006ed4 <HAL_TIM_Base_Start+0xd8>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d115      	bne.n	8006e98 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	689a      	ldr	r2, [r3, #8]
 8006e72:	4b19      	ldr	r3, [pc, #100]	@ (8006ed8 <HAL_TIM_Base_Start+0xdc>)
 8006e74:	4013      	ands	r3, r2
 8006e76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	2b06      	cmp	r3, #6
 8006e7c:	d015      	beq.n	8006eaa <HAL_TIM_Base_Start+0xae>
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e84:	d011      	beq.n	8006eaa <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	681a      	ldr	r2, [r3, #0]
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f042 0201 	orr.w	r2, r2, #1
 8006e94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e96:	e008      	b.n	8006eaa <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	681a      	ldr	r2, [r3, #0]
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f042 0201 	orr.w	r2, r2, #1
 8006ea6:	601a      	str	r2, [r3, #0]
 8006ea8:	e000      	b.n	8006eac <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006eaa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006eac:	2300      	movs	r3, #0
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	3714      	adds	r7, #20
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb8:	4770      	bx	lr
 8006eba:	bf00      	nop
 8006ebc:	40012c00 	.word	0x40012c00
 8006ec0:	40000400 	.word	0x40000400
 8006ec4:	40000800 	.word	0x40000800
 8006ec8:	40000c00 	.word	0x40000c00
 8006ecc:	40013400 	.word	0x40013400
 8006ed0:	40014000 	.word	0x40014000
 8006ed4:	40015000 	.word	0x40015000
 8006ed8:	00010007 	.word	0x00010007

08006edc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b085      	sub	sp, #20
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006eea:	b2db      	uxtb	r3, r3
 8006eec:	2b01      	cmp	r3, #1
 8006eee:	d001      	beq.n	8006ef4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	e054      	b.n	8006f9e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2202      	movs	r2, #2
 8006ef8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	68da      	ldr	r2, [r3, #12]
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f042 0201 	orr.w	r2, r2, #1
 8006f0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a26      	ldr	r2, [pc, #152]	@ (8006fac <HAL_TIM_Base_Start_IT+0xd0>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d022      	beq.n	8006f5c <HAL_TIM_Base_Start_IT+0x80>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f1e:	d01d      	beq.n	8006f5c <HAL_TIM_Base_Start_IT+0x80>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4a22      	ldr	r2, [pc, #136]	@ (8006fb0 <HAL_TIM_Base_Start_IT+0xd4>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d018      	beq.n	8006f5c <HAL_TIM_Base_Start_IT+0x80>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4a21      	ldr	r2, [pc, #132]	@ (8006fb4 <HAL_TIM_Base_Start_IT+0xd8>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d013      	beq.n	8006f5c <HAL_TIM_Base_Start_IT+0x80>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a1f      	ldr	r2, [pc, #124]	@ (8006fb8 <HAL_TIM_Base_Start_IT+0xdc>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d00e      	beq.n	8006f5c <HAL_TIM_Base_Start_IT+0x80>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4a1e      	ldr	r2, [pc, #120]	@ (8006fbc <HAL_TIM_Base_Start_IT+0xe0>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d009      	beq.n	8006f5c <HAL_TIM_Base_Start_IT+0x80>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4a1c      	ldr	r2, [pc, #112]	@ (8006fc0 <HAL_TIM_Base_Start_IT+0xe4>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d004      	beq.n	8006f5c <HAL_TIM_Base_Start_IT+0x80>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a1b      	ldr	r2, [pc, #108]	@ (8006fc4 <HAL_TIM_Base_Start_IT+0xe8>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d115      	bne.n	8006f88 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	689a      	ldr	r2, [r3, #8]
 8006f62:	4b19      	ldr	r3, [pc, #100]	@ (8006fc8 <HAL_TIM_Base_Start_IT+0xec>)
 8006f64:	4013      	ands	r3, r2
 8006f66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	2b06      	cmp	r3, #6
 8006f6c:	d015      	beq.n	8006f9a <HAL_TIM_Base_Start_IT+0xbe>
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f74:	d011      	beq.n	8006f9a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	681a      	ldr	r2, [r3, #0]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f042 0201 	orr.w	r2, r2, #1
 8006f84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f86:	e008      	b.n	8006f9a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	681a      	ldr	r2, [r3, #0]
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f042 0201 	orr.w	r2, r2, #1
 8006f96:	601a      	str	r2, [r3, #0]
 8006f98:	e000      	b.n	8006f9c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f9a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006f9c:	2300      	movs	r3, #0
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	3714      	adds	r7, #20
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa8:	4770      	bx	lr
 8006faa:	bf00      	nop
 8006fac:	40012c00 	.word	0x40012c00
 8006fb0:	40000400 	.word	0x40000400
 8006fb4:	40000800 	.word	0x40000800
 8006fb8:	40000c00 	.word	0x40000c00
 8006fbc:	40013400 	.word	0x40013400
 8006fc0:	40014000 	.word	0x40014000
 8006fc4:	40015000 	.word	0x40015000
 8006fc8:	00010007 	.word	0x00010007

08006fcc <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b082      	sub	sp, #8
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d101      	bne.n	8006fde <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8006fda:	2301      	movs	r3, #1
 8006fdc:	e054      	b.n	8007088 <HAL_TIM_OC_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006fe4:	b2db      	uxtb	r3, r3
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d111      	bne.n	800700e <HAL_TIM_OC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2200      	movs	r2, #0
 8006fee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f001 fe88 	bl	8008d08 <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d102      	bne.n	8007006 <HAL_TIM_OC_Init+0x3a>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	4a23      	ldr	r2, [pc, #140]	@ (8007090 <HAL_TIM_OC_Init+0xc4>)
 8007004:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2202      	movs	r2, #2
 8007012:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681a      	ldr	r2, [r3, #0]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	3304      	adds	r3, #4
 800701e:	4619      	mov	r1, r3
 8007020:	4610      	mov	r0, r2
 8007022:	f001 f9d1 	bl	80083c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2201      	movs	r2, #1
 800702a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2201      	movs	r2, #1
 8007032:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2201      	movs	r2, #1
 800703a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2201      	movs	r2, #1
 8007042:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2201      	movs	r2, #1
 800704a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2201      	movs	r2, #1
 8007052:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2201      	movs	r2, #1
 800705a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2201      	movs	r2, #1
 8007062:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2201      	movs	r2, #1
 800706a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2201      	movs	r2, #1
 8007072:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2201      	movs	r2, #1
 800707a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2201      	movs	r2, #1
 8007082:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007086:	2300      	movs	r3, #0
}
 8007088:	4618      	mov	r0, r3
 800708a:	3708      	adds	r7, #8
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}
 8007090:	08007095 	.word	0x08007095

08007094 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8007094:	b480      	push	{r7}
 8007096:	b083      	sub	sp, #12
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800709c:	bf00      	nop
 800709e:	370c      	adds	r7, #12
 80070a0:	46bd      	mov	sp, r7
 80070a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a6:	4770      	bx	lr

080070a8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b082      	sub	sp, #8
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d101      	bne.n	80070ba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80070b6:	2301      	movs	r3, #1
 80070b8:	e054      	b.n	8007164 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80070c0:	b2db      	uxtb	r3, r3
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d111      	bne.n	80070ea <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2200      	movs	r2, #0
 80070ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f001 fe1a 	bl	8008d08 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d102      	bne.n	80070e2 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	4a23      	ldr	r2, [pc, #140]	@ (800716c <HAL_TIM_PWM_Init+0xc4>)
 80070e0:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2202      	movs	r2, #2
 80070ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681a      	ldr	r2, [r3, #0]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	3304      	adds	r3, #4
 80070fa:	4619      	mov	r1, r3
 80070fc:	4610      	mov	r0, r2
 80070fe:	f001 f963 	bl	80083c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2201      	movs	r2, #1
 8007106:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2201      	movs	r2, #1
 800710e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2201      	movs	r2, #1
 8007116:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2201      	movs	r2, #1
 800711e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2201      	movs	r2, #1
 8007126:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2201      	movs	r2, #1
 800712e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2201      	movs	r2, #1
 8007136:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2201      	movs	r2, #1
 800713e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2201      	movs	r2, #1
 8007146:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2201      	movs	r2, #1
 800714e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2201      	movs	r2, #1
 8007156:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2201      	movs	r2, #1
 800715e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007162:	2300      	movs	r3, #0
}
 8007164:	4618      	mov	r0, r3
 8007166:	3708      	adds	r7, #8
 8007168:	46bd      	mov	sp, r7
 800716a:	bd80      	pop	{r7, pc}
 800716c:	08007171 	.word	0x08007171

08007170 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007170:	b480      	push	{r7}
 8007172:	b083      	sub	sp, #12
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007178:	bf00      	nop
 800717a:	370c      	adds	r7, #12
 800717c:	46bd      	mov	sp, r7
 800717e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007182:	4770      	bx	lr

08007184 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b084      	sub	sp, #16
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
 800718c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d109      	bne.n	80071a8 <HAL_TIM_PWM_Start+0x24>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800719a:	b2db      	uxtb	r3, r3
 800719c:	2b01      	cmp	r3, #1
 800719e:	bf14      	ite	ne
 80071a0:	2301      	movne	r3, #1
 80071a2:	2300      	moveq	r3, #0
 80071a4:	b2db      	uxtb	r3, r3
 80071a6:	e03c      	b.n	8007222 <HAL_TIM_PWM_Start+0x9e>
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	2b04      	cmp	r3, #4
 80071ac:	d109      	bne.n	80071c2 <HAL_TIM_PWM_Start+0x3e>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80071b4:	b2db      	uxtb	r3, r3
 80071b6:	2b01      	cmp	r3, #1
 80071b8:	bf14      	ite	ne
 80071ba:	2301      	movne	r3, #1
 80071bc:	2300      	moveq	r3, #0
 80071be:	b2db      	uxtb	r3, r3
 80071c0:	e02f      	b.n	8007222 <HAL_TIM_PWM_Start+0x9e>
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	2b08      	cmp	r3, #8
 80071c6:	d109      	bne.n	80071dc <HAL_TIM_PWM_Start+0x58>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80071ce:	b2db      	uxtb	r3, r3
 80071d0:	2b01      	cmp	r3, #1
 80071d2:	bf14      	ite	ne
 80071d4:	2301      	movne	r3, #1
 80071d6:	2300      	moveq	r3, #0
 80071d8:	b2db      	uxtb	r3, r3
 80071da:	e022      	b.n	8007222 <HAL_TIM_PWM_Start+0x9e>
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	2b0c      	cmp	r3, #12
 80071e0:	d109      	bne.n	80071f6 <HAL_TIM_PWM_Start+0x72>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80071e8:	b2db      	uxtb	r3, r3
 80071ea:	2b01      	cmp	r3, #1
 80071ec:	bf14      	ite	ne
 80071ee:	2301      	movne	r3, #1
 80071f0:	2300      	moveq	r3, #0
 80071f2:	b2db      	uxtb	r3, r3
 80071f4:	e015      	b.n	8007222 <HAL_TIM_PWM_Start+0x9e>
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	2b10      	cmp	r3, #16
 80071fa:	d109      	bne.n	8007210 <HAL_TIM_PWM_Start+0x8c>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007202:	b2db      	uxtb	r3, r3
 8007204:	2b01      	cmp	r3, #1
 8007206:	bf14      	ite	ne
 8007208:	2301      	movne	r3, #1
 800720a:	2300      	moveq	r3, #0
 800720c:	b2db      	uxtb	r3, r3
 800720e:	e008      	b.n	8007222 <HAL_TIM_PWM_Start+0x9e>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007216:	b2db      	uxtb	r3, r3
 8007218:	2b01      	cmp	r3, #1
 800721a:	bf14      	ite	ne
 800721c:	2301      	movne	r3, #1
 800721e:	2300      	moveq	r3, #0
 8007220:	b2db      	uxtb	r3, r3
 8007222:	2b00      	cmp	r3, #0
 8007224:	d001      	beq.n	800722a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007226:	2301      	movs	r3, #1
 8007228:	e0a6      	b.n	8007378 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d104      	bne.n	800723a <HAL_TIM_PWM_Start+0xb6>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2202      	movs	r2, #2
 8007234:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007238:	e023      	b.n	8007282 <HAL_TIM_PWM_Start+0xfe>
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	2b04      	cmp	r3, #4
 800723e:	d104      	bne.n	800724a <HAL_TIM_PWM_Start+0xc6>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2202      	movs	r2, #2
 8007244:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007248:	e01b      	b.n	8007282 <HAL_TIM_PWM_Start+0xfe>
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	2b08      	cmp	r3, #8
 800724e:	d104      	bne.n	800725a <HAL_TIM_PWM_Start+0xd6>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2202      	movs	r2, #2
 8007254:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007258:	e013      	b.n	8007282 <HAL_TIM_PWM_Start+0xfe>
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	2b0c      	cmp	r3, #12
 800725e:	d104      	bne.n	800726a <HAL_TIM_PWM_Start+0xe6>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2202      	movs	r2, #2
 8007264:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007268:	e00b      	b.n	8007282 <HAL_TIM_PWM_Start+0xfe>
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	2b10      	cmp	r3, #16
 800726e:	d104      	bne.n	800727a <HAL_TIM_PWM_Start+0xf6>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2202      	movs	r2, #2
 8007274:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007278:	e003      	b.n	8007282 <HAL_TIM_PWM_Start+0xfe>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2202      	movs	r2, #2
 800727e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	2201      	movs	r2, #1
 8007288:	6839      	ldr	r1, [r7, #0]
 800728a:	4618      	mov	r0, r3
 800728c:	f001 fd16 	bl	8008cbc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a3a      	ldr	r2, [pc, #232]	@ (8007380 <HAL_TIM_PWM_Start+0x1fc>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d018      	beq.n	80072cc <HAL_TIM_PWM_Start+0x148>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4a39      	ldr	r2, [pc, #228]	@ (8007384 <HAL_TIM_PWM_Start+0x200>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d013      	beq.n	80072cc <HAL_TIM_PWM_Start+0x148>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4a37      	ldr	r2, [pc, #220]	@ (8007388 <HAL_TIM_PWM_Start+0x204>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d00e      	beq.n	80072cc <HAL_TIM_PWM_Start+0x148>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4a36      	ldr	r2, [pc, #216]	@ (800738c <HAL_TIM_PWM_Start+0x208>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d009      	beq.n	80072cc <HAL_TIM_PWM_Start+0x148>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4a34      	ldr	r2, [pc, #208]	@ (8007390 <HAL_TIM_PWM_Start+0x20c>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d004      	beq.n	80072cc <HAL_TIM_PWM_Start+0x148>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4a33      	ldr	r2, [pc, #204]	@ (8007394 <HAL_TIM_PWM_Start+0x210>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d101      	bne.n	80072d0 <HAL_TIM_PWM_Start+0x14c>
 80072cc:	2301      	movs	r3, #1
 80072ce:	e000      	b.n	80072d2 <HAL_TIM_PWM_Start+0x14e>
 80072d0:	2300      	movs	r3, #0
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d007      	beq.n	80072e6 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80072e4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4a25      	ldr	r2, [pc, #148]	@ (8007380 <HAL_TIM_PWM_Start+0x1fc>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d022      	beq.n	8007336 <HAL_TIM_PWM_Start+0x1b2>
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072f8:	d01d      	beq.n	8007336 <HAL_TIM_PWM_Start+0x1b2>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	4a26      	ldr	r2, [pc, #152]	@ (8007398 <HAL_TIM_PWM_Start+0x214>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d018      	beq.n	8007336 <HAL_TIM_PWM_Start+0x1b2>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	4a24      	ldr	r2, [pc, #144]	@ (800739c <HAL_TIM_PWM_Start+0x218>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d013      	beq.n	8007336 <HAL_TIM_PWM_Start+0x1b2>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4a23      	ldr	r2, [pc, #140]	@ (80073a0 <HAL_TIM_PWM_Start+0x21c>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d00e      	beq.n	8007336 <HAL_TIM_PWM_Start+0x1b2>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4a19      	ldr	r2, [pc, #100]	@ (8007384 <HAL_TIM_PWM_Start+0x200>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d009      	beq.n	8007336 <HAL_TIM_PWM_Start+0x1b2>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4a18      	ldr	r2, [pc, #96]	@ (8007388 <HAL_TIM_PWM_Start+0x204>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d004      	beq.n	8007336 <HAL_TIM_PWM_Start+0x1b2>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a18      	ldr	r2, [pc, #96]	@ (8007394 <HAL_TIM_PWM_Start+0x210>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d115      	bne.n	8007362 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	689a      	ldr	r2, [r3, #8]
 800733c:	4b19      	ldr	r3, [pc, #100]	@ (80073a4 <HAL_TIM_PWM_Start+0x220>)
 800733e:	4013      	ands	r3, r2
 8007340:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	2b06      	cmp	r3, #6
 8007346:	d015      	beq.n	8007374 <HAL_TIM_PWM_Start+0x1f0>
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800734e:	d011      	beq.n	8007374 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	681a      	ldr	r2, [r3, #0]
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f042 0201 	orr.w	r2, r2, #1
 800735e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007360:	e008      	b.n	8007374 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	681a      	ldr	r2, [r3, #0]
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f042 0201 	orr.w	r2, r2, #1
 8007370:	601a      	str	r2, [r3, #0]
 8007372:	e000      	b.n	8007376 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007374:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007376:	2300      	movs	r3, #0
}
 8007378:	4618      	mov	r0, r3
 800737a:	3710      	adds	r7, #16
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}
 8007380:	40012c00 	.word	0x40012c00
 8007384:	40013400 	.word	0x40013400
 8007388:	40014000 	.word	0x40014000
 800738c:	40014400 	.word	0x40014400
 8007390:	40014800 	.word	0x40014800
 8007394:	40015000 	.word	0x40015000
 8007398:	40000400 	.word	0x40000400
 800739c:	40000800 	.word	0x40000800
 80073a0:	40000c00 	.word	0x40000c00
 80073a4:	00010007 	.word	0x00010007

080073a8 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b082      	sub	sp, #8
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
 80073b0:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d101      	bne.n	80073bc <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 80073b8:	2301      	movs	r3, #1
 80073ba:	e04c      	b.n	8007456 <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80073c2:	b2db      	uxtb	r3, r3
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d111      	bne.n	80073ec <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2200      	movs	r2, #0
 80073cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f001 fc99 	bl	8008d08 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d102      	bne.n	80073e4 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	4a1f      	ldr	r2, [pc, #124]	@ (8007460 <HAL_TIM_OnePulse_Init+0xb8>)
 80073e2:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2202      	movs	r2, #2
 80073f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681a      	ldr	r2, [r3, #0]
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	3304      	adds	r3, #4
 80073fc:	4619      	mov	r1, r3
 80073fe:	4610      	mov	r0, r2
 8007400:	f000 ffe2 	bl	80083c8 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	681a      	ldr	r2, [r3, #0]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f022 0208 	bic.w	r2, r2, #8
 8007412:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	6819      	ldr	r1, [r3, #0]
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	683a      	ldr	r2, [r7, #0]
 8007420:	430a      	orrs	r2, r1
 8007422:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2201      	movs	r2, #1
 8007428:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2201      	movs	r2, #1
 8007430:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2201      	movs	r2, #1
 8007438:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2201      	movs	r2, #1
 8007440:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2201      	movs	r2, #1
 8007448:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2201      	movs	r2, #1
 8007450:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007454:	2300      	movs	r3, #0
}
 8007456:	4618      	mov	r0, r3
 8007458:	3708      	adds	r7, #8
 800745a:	46bd      	mov	sp, r7
 800745c:	bd80      	pop	{r7, pc}
 800745e:	bf00      	nop
 8007460:	08007465 	.word	0x08007465

08007464 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8007464:	b480      	push	{r7}
 8007466:	b083      	sub	sp, #12
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800746c:	bf00      	nop
 800746e:	370c      	adds	r7, #12
 8007470:	46bd      	mov	sp, r7
 8007472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007476:	4770      	bx	lr

08007478 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b084      	sub	sp, #16
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
 8007480:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007488:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007490:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007498:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80074a0:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80074a2:	7bfb      	ldrb	r3, [r7, #15]
 80074a4:	2b01      	cmp	r3, #1
 80074a6:	d108      	bne.n	80074ba <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80074a8:	7bbb      	ldrb	r3, [r7, #14]
 80074aa:	2b01      	cmp	r3, #1
 80074ac:	d105      	bne.n	80074ba <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80074ae:	7b7b      	ldrb	r3, [r7, #13]
 80074b0:	2b01      	cmp	r3, #1
 80074b2:	d102      	bne.n	80074ba <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80074b4:	7b3b      	ldrb	r3, [r7, #12]
 80074b6:	2b01      	cmp	r3, #1
 80074b8:	d001      	beq.n	80074be <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 80074ba:	2301      	movs	r3, #1
 80074bc:	e059      	b.n	8007572 <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2202      	movs	r2, #2
 80074c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2202      	movs	r2, #2
 80074ca:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2202      	movs	r2, #2
 80074d2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2202      	movs	r2, #2
 80074da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	68da      	ldr	r2, [r3, #12]
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f042 0202 	orr.w	r2, r2, #2
 80074ec:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	68da      	ldr	r2, [r3, #12]
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f042 0204 	orr.w	r2, r2, #4
 80074fc:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	2201      	movs	r2, #1
 8007504:	2100      	movs	r1, #0
 8007506:	4618      	mov	r0, r3
 8007508:	f001 fbd8 	bl	8008cbc <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	2201      	movs	r2, #1
 8007512:	2104      	movs	r1, #4
 8007514:	4618      	mov	r0, r3
 8007516:	f001 fbd1 	bl	8008cbc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	4a17      	ldr	r2, [pc, #92]	@ (800757c <HAL_TIM_OnePulse_Start_IT+0x104>)
 8007520:	4293      	cmp	r3, r2
 8007522:	d018      	beq.n	8007556 <HAL_TIM_OnePulse_Start_IT+0xde>
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4a15      	ldr	r2, [pc, #84]	@ (8007580 <HAL_TIM_OnePulse_Start_IT+0x108>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d013      	beq.n	8007556 <HAL_TIM_OnePulse_Start_IT+0xde>
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4a14      	ldr	r2, [pc, #80]	@ (8007584 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d00e      	beq.n	8007556 <HAL_TIM_OnePulse_Start_IT+0xde>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4a12      	ldr	r2, [pc, #72]	@ (8007588 <HAL_TIM_OnePulse_Start_IT+0x110>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d009      	beq.n	8007556 <HAL_TIM_OnePulse_Start_IT+0xde>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4a11      	ldr	r2, [pc, #68]	@ (800758c <HAL_TIM_OnePulse_Start_IT+0x114>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d004      	beq.n	8007556 <HAL_TIM_OnePulse_Start_IT+0xde>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4a0f      	ldr	r2, [pc, #60]	@ (8007590 <HAL_TIM_OnePulse_Start_IT+0x118>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d101      	bne.n	800755a <HAL_TIM_OnePulse_Start_IT+0xe2>
 8007556:	2301      	movs	r3, #1
 8007558:	e000      	b.n	800755c <HAL_TIM_OnePulse_Start_IT+0xe4>
 800755a:	2300      	movs	r3, #0
 800755c:	2b00      	cmp	r3, #0
 800755e:	d007      	beq.n	8007570 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800756e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8007570:	2300      	movs	r3, #0
}
 8007572:	4618      	mov	r0, r3
 8007574:	3710      	adds	r7, #16
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}
 800757a:	bf00      	nop
 800757c:	40012c00 	.word	0x40012c00
 8007580:	40013400 	.word	0x40013400
 8007584:	40014000 	.word	0x40014000
 8007588:	40014400 	.word	0x40014400
 800758c:	40014800 	.word	0x40014800
 8007590:	40015000 	.word	0x40015000

08007594 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b086      	sub	sp, #24
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
 800759c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d101      	bne.n	80075a8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80075a4:	2301      	movs	r3, #1
 80075a6:	e0a2      	b.n	80076ee <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80075ae:	b2db      	uxtb	r3, r3
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d111      	bne.n	80075d8 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2200      	movs	r2, #0
 80075b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	f001 fba3 	bl	8008d08 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d102      	bne.n	80075d0 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	4a4a      	ldr	r2, [pc, #296]	@ (80076f8 <HAL_TIM_Encoder_Init+0x164>)
 80075ce:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2202      	movs	r2, #2
 80075dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	689b      	ldr	r3, [r3, #8]
 80075e6:	687a      	ldr	r2, [r7, #4]
 80075e8:	6812      	ldr	r2, [r2, #0]
 80075ea:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 80075ee:	f023 0307 	bic.w	r3, r3, #7
 80075f2:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681a      	ldr	r2, [r3, #0]
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	3304      	adds	r3, #4
 80075fc:	4619      	mov	r1, r3
 80075fe:	4610      	mov	r0, r2
 8007600:	f000 fee2 	bl	80083c8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	689b      	ldr	r3, [r3, #8]
 800760a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	699b      	ldr	r3, [r3, #24]
 8007612:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	6a1b      	ldr	r3, [r3, #32]
 800761a:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	697a      	ldr	r2, [r7, #20]
 8007622:	4313      	orrs	r3, r2
 8007624:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007626:	693b      	ldr	r3, [r7, #16]
 8007628:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800762c:	f023 0303 	bic.w	r3, r3, #3
 8007630:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	689a      	ldr	r2, [r3, #8]
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	699b      	ldr	r3, [r3, #24]
 800763a:	021b      	lsls	r3, r3, #8
 800763c:	4313      	orrs	r3, r2
 800763e:	693a      	ldr	r2, [r7, #16]
 8007640:	4313      	orrs	r3, r2
 8007642:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007644:	693b      	ldr	r3, [r7, #16]
 8007646:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800764a:	f023 030c 	bic.w	r3, r3, #12
 800764e:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007650:	693b      	ldr	r3, [r7, #16]
 8007652:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007656:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800765a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	68da      	ldr	r2, [r3, #12]
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	69db      	ldr	r3, [r3, #28]
 8007664:	021b      	lsls	r3, r3, #8
 8007666:	4313      	orrs	r3, r2
 8007668:	693a      	ldr	r2, [r7, #16]
 800766a:	4313      	orrs	r3, r2
 800766c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	691b      	ldr	r3, [r3, #16]
 8007672:	011a      	lsls	r2, r3, #4
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	6a1b      	ldr	r3, [r3, #32]
 8007678:	031b      	lsls	r3, r3, #12
 800767a:	4313      	orrs	r3, r2
 800767c:	693a      	ldr	r2, [r7, #16]
 800767e:	4313      	orrs	r3, r2
 8007680:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8007688:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8007690:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	685a      	ldr	r2, [r3, #4]
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	695b      	ldr	r3, [r3, #20]
 800769a:	011b      	lsls	r3, r3, #4
 800769c:	4313      	orrs	r3, r2
 800769e:	68fa      	ldr	r2, [r7, #12]
 80076a0:	4313      	orrs	r3, r2
 80076a2:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	697a      	ldr	r2, [r7, #20]
 80076aa:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	693a      	ldr	r2, [r7, #16]
 80076b2:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	68fa      	ldr	r2, [r7, #12]
 80076ba:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2201      	movs	r2, #1
 80076c0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2201      	movs	r2, #1
 80076c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2201      	movs	r2, #1
 80076d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2201      	movs	r2, #1
 80076d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2201      	movs	r2, #1
 80076e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2201      	movs	r2, #1
 80076e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80076ec:	2300      	movs	r3, #0
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	3718      	adds	r7, #24
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}
 80076f6:	bf00      	nop
 80076f8:	080032d5 	.word	0x080032d5

080076fc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b084      	sub	sp, #16
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
 8007704:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800770c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007714:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800771c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007724:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d110      	bne.n	800774e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800772c:	7bfb      	ldrb	r3, [r7, #15]
 800772e:	2b01      	cmp	r3, #1
 8007730:	d102      	bne.n	8007738 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007732:	7b7b      	ldrb	r3, [r7, #13]
 8007734:	2b01      	cmp	r3, #1
 8007736:	d001      	beq.n	800773c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007738:	2301      	movs	r3, #1
 800773a:	e069      	b.n	8007810 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2202      	movs	r2, #2
 8007740:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2202      	movs	r2, #2
 8007748:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800774c:	e031      	b.n	80077b2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	2b04      	cmp	r3, #4
 8007752:	d110      	bne.n	8007776 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007754:	7bbb      	ldrb	r3, [r7, #14]
 8007756:	2b01      	cmp	r3, #1
 8007758:	d102      	bne.n	8007760 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800775a:	7b3b      	ldrb	r3, [r7, #12]
 800775c:	2b01      	cmp	r3, #1
 800775e:	d001      	beq.n	8007764 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007760:	2301      	movs	r3, #1
 8007762:	e055      	b.n	8007810 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2202      	movs	r2, #2
 8007768:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2202      	movs	r2, #2
 8007770:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007774:	e01d      	b.n	80077b2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007776:	7bfb      	ldrb	r3, [r7, #15]
 8007778:	2b01      	cmp	r3, #1
 800777a:	d108      	bne.n	800778e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800777c:	7bbb      	ldrb	r3, [r7, #14]
 800777e:	2b01      	cmp	r3, #1
 8007780:	d105      	bne.n	800778e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007782:	7b7b      	ldrb	r3, [r7, #13]
 8007784:	2b01      	cmp	r3, #1
 8007786:	d102      	bne.n	800778e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007788:	7b3b      	ldrb	r3, [r7, #12]
 800778a:	2b01      	cmp	r3, #1
 800778c:	d001      	beq.n	8007792 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800778e:	2301      	movs	r3, #1
 8007790:	e03e      	b.n	8007810 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2202      	movs	r2, #2
 8007796:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2202      	movs	r2, #2
 800779e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2202      	movs	r2, #2
 80077a6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2202      	movs	r2, #2
 80077ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d003      	beq.n	80077c0 <HAL_TIM_Encoder_Start+0xc4>
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	2b04      	cmp	r3, #4
 80077bc:	d008      	beq.n	80077d0 <HAL_TIM_Encoder_Start+0xd4>
 80077be:	e00f      	b.n	80077e0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	2201      	movs	r2, #1
 80077c6:	2100      	movs	r1, #0
 80077c8:	4618      	mov	r0, r3
 80077ca:	f001 fa77 	bl	8008cbc <TIM_CCxChannelCmd>
      break;
 80077ce:	e016      	b.n	80077fe <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	2201      	movs	r2, #1
 80077d6:	2104      	movs	r1, #4
 80077d8:	4618      	mov	r0, r3
 80077da:	f001 fa6f 	bl	8008cbc <TIM_CCxChannelCmd>
      break;
 80077de:	e00e      	b.n	80077fe <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	2201      	movs	r2, #1
 80077e6:	2100      	movs	r1, #0
 80077e8:	4618      	mov	r0, r3
 80077ea:	f001 fa67 	bl	8008cbc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	2201      	movs	r2, #1
 80077f4:	2104      	movs	r1, #4
 80077f6:	4618      	mov	r0, r3
 80077f8:	f001 fa60 	bl	8008cbc <TIM_CCxChannelCmd>
      break;
 80077fc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	681a      	ldr	r2, [r3, #0]
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f042 0201 	orr.w	r2, r2, #1
 800780c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800780e:	2300      	movs	r3, #0
}
 8007810:	4618      	mov	r0, r3
 8007812:	3710      	adds	r7, #16
 8007814:	46bd      	mov	sp, r7
 8007816:	bd80      	pop	{r7, pc}

08007818 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b084      	sub	sp, #16
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	68db      	ldr	r3, [r3, #12]
 8007826:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	691b      	ldr	r3, [r3, #16]
 800782e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	f003 0302 	and.w	r3, r3, #2
 8007836:	2b00      	cmp	r3, #0
 8007838:	d026      	beq.n	8007888 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	f003 0302 	and.w	r3, r3, #2
 8007840:	2b00      	cmp	r3, #0
 8007842:	d021      	beq.n	8007888 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f06f 0202 	mvn.w	r2, #2
 800784c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2201      	movs	r2, #1
 8007852:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	699b      	ldr	r3, [r3, #24]
 800785a:	f003 0303 	and.w	r3, r3, #3
 800785e:	2b00      	cmp	r3, #0
 8007860:	d005      	beq.n	800786e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	4798      	blx	r3
 800786c:	e009      	b.n	8007882 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2200      	movs	r2, #0
 8007886:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	f003 0304 	and.w	r3, r3, #4
 800788e:	2b00      	cmp	r3, #0
 8007890:	d026      	beq.n	80078e0 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	f003 0304 	and.w	r3, r3, #4
 8007898:	2b00      	cmp	r3, #0
 800789a:	d021      	beq.n	80078e0 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f06f 0204 	mvn.w	r2, #4
 80078a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2202      	movs	r2, #2
 80078aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	699b      	ldr	r3, [r3, #24]
 80078b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d005      	beq.n	80078c6 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	4798      	blx	r3
 80078c4:	e009      	b.n	80078da <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2200      	movs	r2, #0
 80078de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	f003 0308 	and.w	r3, r3, #8
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d026      	beq.n	8007938 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	f003 0308 	and.w	r3, r3, #8
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d021      	beq.n	8007938 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f06f 0208 	mvn.w	r2, #8
 80078fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2204      	movs	r2, #4
 8007902:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	69db      	ldr	r3, [r3, #28]
 800790a:	f003 0303 	and.w	r3, r3, #3
 800790e:	2b00      	cmp	r3, #0
 8007910:	d005      	beq.n	800791e <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	4798      	blx	r3
 800791c:	e009      	b.n	8007932 <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2200      	movs	r2, #0
 8007936:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	f003 0310 	and.w	r3, r3, #16
 800793e:	2b00      	cmp	r3, #0
 8007940:	d026      	beq.n	8007990 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	f003 0310 	and.w	r3, r3, #16
 8007948:	2b00      	cmp	r3, #0
 800794a:	d021      	beq.n	8007990 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f06f 0210 	mvn.w	r2, #16
 8007954:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2208      	movs	r2, #8
 800795a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	69db      	ldr	r3, [r3, #28]
 8007962:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007966:	2b00      	cmp	r3, #0
 8007968:	d005      	beq.n	8007976 <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	4798      	blx	r3
 8007974:	e009      	b.n	800798a <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2200      	movs	r2, #0
 800798e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	f003 0301 	and.w	r3, r3, #1
 8007996:	2b00      	cmp	r3, #0
 8007998:	d00e      	beq.n	80079b8 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	f003 0301 	and.w	r3, r3, #1
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d009      	beq.n	80079b8 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f06f 0201 	mvn.w	r2, #1
 80079ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d104      	bne.n	80079cc <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d00e      	beq.n	80079ea <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d009      	beq.n	80079ea <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80079de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d00e      	beq.n	8007a12 <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d009      	beq.n	8007a12 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007a06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d00e      	beq.n	8007a3a <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d009      	beq.n	8007a3a <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007a2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	f003 0320 	and.w	r3, r3, #32
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d00e      	beq.n	8007a62 <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	f003 0320 	and.w	r3, r3, #32
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d009      	beq.n	8007a62 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f06f 0220 	mvn.w	r2, #32
 8007a56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8007a62:	68bb      	ldr	r3, [r7, #8]
 8007a64:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d00e      	beq.n	8007a8a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d009      	beq.n	8007a8a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8007a7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d00e      	beq.n	8007ab2 <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d009      	beq.n	8007ab2 <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8007aa6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d00e      	beq.n	8007ada <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d009      	beq.n	8007ada <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8007ace:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d00e      	beq.n	8007b02 <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d009      	beq.n	8007b02 <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8007af6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007b02:	bf00      	nop
 8007b04:	3710      	adds	r7, #16
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bd80      	pop	{r7, pc}
	...

08007b0c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b086      	sub	sp, #24
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	60f8      	str	r0, [r7, #12]
 8007b14:	60b9      	str	r1, [r7, #8]
 8007b16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007b18:	2300      	movs	r3, #0
 8007b1a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007b22:	2b01      	cmp	r3, #1
 8007b24:	d101      	bne.n	8007b2a <HAL_TIM_OC_ConfigChannel+0x1e>
 8007b26:	2302      	movs	r3, #2
 8007b28:	e066      	b.n	8007bf8 <HAL_TIM_OC_ConfigChannel+0xec>
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	2201      	movs	r2, #1
 8007b2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2b14      	cmp	r3, #20
 8007b36:	d857      	bhi.n	8007be8 <HAL_TIM_OC_ConfigChannel+0xdc>
 8007b38:	a201      	add	r2, pc, #4	@ (adr r2, 8007b40 <HAL_TIM_OC_ConfigChannel+0x34>)
 8007b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b3e:	bf00      	nop
 8007b40:	08007b95 	.word	0x08007b95
 8007b44:	08007be9 	.word	0x08007be9
 8007b48:	08007be9 	.word	0x08007be9
 8007b4c:	08007be9 	.word	0x08007be9
 8007b50:	08007ba3 	.word	0x08007ba3
 8007b54:	08007be9 	.word	0x08007be9
 8007b58:	08007be9 	.word	0x08007be9
 8007b5c:	08007be9 	.word	0x08007be9
 8007b60:	08007bb1 	.word	0x08007bb1
 8007b64:	08007be9 	.word	0x08007be9
 8007b68:	08007be9 	.word	0x08007be9
 8007b6c:	08007be9 	.word	0x08007be9
 8007b70:	08007bbf 	.word	0x08007bbf
 8007b74:	08007be9 	.word	0x08007be9
 8007b78:	08007be9 	.word	0x08007be9
 8007b7c:	08007be9 	.word	0x08007be9
 8007b80:	08007bcd 	.word	0x08007bcd
 8007b84:	08007be9 	.word	0x08007be9
 8007b88:	08007be9 	.word	0x08007be9
 8007b8c:	08007be9 	.word	0x08007be9
 8007b90:	08007bdb 	.word	0x08007bdb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	68b9      	ldr	r1, [r7, #8]
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	f000 fcc8 	bl	8008530 <TIM_OC1_SetConfig>
      break;
 8007ba0:	e025      	b.n	8007bee <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	68b9      	ldr	r1, [r7, #8]
 8007ba8:	4618      	mov	r0, r3
 8007baa:	f000 fd5b 	bl	8008664 <TIM_OC2_SetConfig>
      break;
 8007bae:	e01e      	b.n	8007bee <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	68b9      	ldr	r1, [r7, #8]
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	f000 fde8 	bl	800878c <TIM_OC3_SetConfig>
      break;
 8007bbc:	e017      	b.n	8007bee <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	68b9      	ldr	r1, [r7, #8]
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	f000 fe73 	bl	80088b0 <TIM_OC4_SetConfig>
      break;
 8007bca:	e010      	b.n	8007bee <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	68b9      	ldr	r1, [r7, #8]
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	f000 ff00 	bl	80089d8 <TIM_OC5_SetConfig>
      break;
 8007bd8:	e009      	b.n	8007bee <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	68b9      	ldr	r1, [r7, #8]
 8007be0:	4618      	mov	r0, r3
 8007be2:	f000 ff63 	bl	8008aac <TIM_OC6_SetConfig>
      break;
 8007be6:	e002      	b.n	8007bee <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8007be8:	2301      	movs	r3, #1
 8007bea:	75fb      	strb	r3, [r7, #23]
      break;
 8007bec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007bf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	3718      	adds	r7, #24
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}

08007c00 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b086      	sub	sp, #24
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	60f8      	str	r0, [r7, #12]
 8007c08:	60b9      	str	r1, [r7, #8]
 8007c0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007c16:	2b01      	cmp	r3, #1
 8007c18:	d101      	bne.n	8007c1e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007c1a:	2302      	movs	r3, #2
 8007c1c:	e0ff      	b.n	8007e1e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	2201      	movs	r2, #1
 8007c22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2b14      	cmp	r3, #20
 8007c2a:	f200 80f0 	bhi.w	8007e0e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007c2e:	a201      	add	r2, pc, #4	@ (adr r2, 8007c34 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c34:	08007c89 	.word	0x08007c89
 8007c38:	08007e0f 	.word	0x08007e0f
 8007c3c:	08007e0f 	.word	0x08007e0f
 8007c40:	08007e0f 	.word	0x08007e0f
 8007c44:	08007cc9 	.word	0x08007cc9
 8007c48:	08007e0f 	.word	0x08007e0f
 8007c4c:	08007e0f 	.word	0x08007e0f
 8007c50:	08007e0f 	.word	0x08007e0f
 8007c54:	08007d0b 	.word	0x08007d0b
 8007c58:	08007e0f 	.word	0x08007e0f
 8007c5c:	08007e0f 	.word	0x08007e0f
 8007c60:	08007e0f 	.word	0x08007e0f
 8007c64:	08007d4b 	.word	0x08007d4b
 8007c68:	08007e0f 	.word	0x08007e0f
 8007c6c:	08007e0f 	.word	0x08007e0f
 8007c70:	08007e0f 	.word	0x08007e0f
 8007c74:	08007d8d 	.word	0x08007d8d
 8007c78:	08007e0f 	.word	0x08007e0f
 8007c7c:	08007e0f 	.word	0x08007e0f
 8007c80:	08007e0f 	.word	0x08007e0f
 8007c84:	08007dcd 	.word	0x08007dcd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	68b9      	ldr	r1, [r7, #8]
 8007c8e:	4618      	mov	r0, r3
 8007c90:	f000 fc4e 	bl	8008530 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	699a      	ldr	r2, [r3, #24]
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f042 0208 	orr.w	r2, r2, #8
 8007ca2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	699a      	ldr	r2, [r3, #24]
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f022 0204 	bic.w	r2, r2, #4
 8007cb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	6999      	ldr	r1, [r3, #24]
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	691a      	ldr	r2, [r3, #16]
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	430a      	orrs	r2, r1
 8007cc4:	619a      	str	r2, [r3, #24]
      break;
 8007cc6:	e0a5      	b.n	8007e14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	68b9      	ldr	r1, [r7, #8]
 8007cce:	4618      	mov	r0, r3
 8007cd0:	f000 fcc8 	bl	8008664 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	699a      	ldr	r2, [r3, #24]
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007ce2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	699a      	ldr	r2, [r3, #24]
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007cf2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	6999      	ldr	r1, [r3, #24]
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	691b      	ldr	r3, [r3, #16]
 8007cfe:	021a      	lsls	r2, r3, #8
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	430a      	orrs	r2, r1
 8007d06:	619a      	str	r2, [r3, #24]
      break;
 8007d08:	e084      	b.n	8007e14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	68b9      	ldr	r1, [r7, #8]
 8007d10:	4618      	mov	r0, r3
 8007d12:	f000 fd3b 	bl	800878c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	69da      	ldr	r2, [r3, #28]
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f042 0208 	orr.w	r2, r2, #8
 8007d24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	69da      	ldr	r2, [r3, #28]
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f022 0204 	bic.w	r2, r2, #4
 8007d34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	69d9      	ldr	r1, [r3, #28]
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	691a      	ldr	r2, [r3, #16]
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	430a      	orrs	r2, r1
 8007d46:	61da      	str	r2, [r3, #28]
      break;
 8007d48:	e064      	b.n	8007e14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	68b9      	ldr	r1, [r7, #8]
 8007d50:	4618      	mov	r0, r3
 8007d52:	f000 fdad 	bl	80088b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	69da      	ldr	r2, [r3, #28]
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007d64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	69da      	ldr	r2, [r3, #28]
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007d74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	69d9      	ldr	r1, [r3, #28]
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	691b      	ldr	r3, [r3, #16]
 8007d80:	021a      	lsls	r2, r3, #8
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	430a      	orrs	r2, r1
 8007d88:	61da      	str	r2, [r3, #28]
      break;
 8007d8a:	e043      	b.n	8007e14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	68b9      	ldr	r1, [r7, #8]
 8007d92:	4618      	mov	r0, r3
 8007d94:	f000 fe20 	bl	80089d8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f042 0208 	orr.w	r2, r2, #8
 8007da6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f022 0204 	bic.w	r2, r2, #4
 8007db6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007dbe:	68bb      	ldr	r3, [r7, #8]
 8007dc0:	691a      	ldr	r2, [r3, #16]
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	430a      	orrs	r2, r1
 8007dc8:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007dca:	e023      	b.n	8007e14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	68b9      	ldr	r1, [r7, #8]
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	f000 fe6a 	bl	8008aac <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007de6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007df6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	691b      	ldr	r3, [r3, #16]
 8007e02:	021a      	lsls	r2, r3, #8
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	430a      	orrs	r2, r1
 8007e0a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007e0c:	e002      	b.n	8007e14 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007e0e:	2301      	movs	r3, #1
 8007e10:	75fb      	strb	r3, [r7, #23]
      break;
 8007e12:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	2200      	movs	r2, #0
 8007e18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007e1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e1e:	4618      	mov	r0, r3
 8007e20:	3718      	adds	r7, #24
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bd80      	pop	{r7, pc}
 8007e26:	bf00      	nop

08007e28 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b084      	sub	sp, #16
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
 8007e30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007e32:	2300      	movs	r3, #0
 8007e34:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007e3c:	2b01      	cmp	r3, #1
 8007e3e:	d101      	bne.n	8007e44 <HAL_TIM_ConfigClockSource+0x1c>
 8007e40:	2302      	movs	r3, #2
 8007e42:	e0f6      	b.n	8008032 <HAL_TIM_ConfigClockSource+0x20a>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2201      	movs	r2, #1
 8007e48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2202      	movs	r2, #2
 8007e50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	689b      	ldr	r3, [r3, #8]
 8007e5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8007e62:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007e66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007e68:	68bb      	ldr	r3, [r7, #8]
 8007e6a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007e6e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	68ba      	ldr	r2, [r7, #8]
 8007e76:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	4a6f      	ldr	r2, [pc, #444]	@ (800803c <HAL_TIM_ConfigClockSource+0x214>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	f000 80c1 	beq.w	8008006 <HAL_TIM_ConfigClockSource+0x1de>
 8007e84:	4a6d      	ldr	r2, [pc, #436]	@ (800803c <HAL_TIM_ConfigClockSource+0x214>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	f200 80c6 	bhi.w	8008018 <HAL_TIM_ConfigClockSource+0x1f0>
 8007e8c:	4a6c      	ldr	r2, [pc, #432]	@ (8008040 <HAL_TIM_ConfigClockSource+0x218>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	f000 80b9 	beq.w	8008006 <HAL_TIM_ConfigClockSource+0x1de>
 8007e94:	4a6a      	ldr	r2, [pc, #424]	@ (8008040 <HAL_TIM_ConfigClockSource+0x218>)
 8007e96:	4293      	cmp	r3, r2
 8007e98:	f200 80be 	bhi.w	8008018 <HAL_TIM_ConfigClockSource+0x1f0>
 8007e9c:	4a69      	ldr	r2, [pc, #420]	@ (8008044 <HAL_TIM_ConfigClockSource+0x21c>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	f000 80b1 	beq.w	8008006 <HAL_TIM_ConfigClockSource+0x1de>
 8007ea4:	4a67      	ldr	r2, [pc, #412]	@ (8008044 <HAL_TIM_ConfigClockSource+0x21c>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	f200 80b6 	bhi.w	8008018 <HAL_TIM_ConfigClockSource+0x1f0>
 8007eac:	4a66      	ldr	r2, [pc, #408]	@ (8008048 <HAL_TIM_ConfigClockSource+0x220>)
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	f000 80a9 	beq.w	8008006 <HAL_TIM_ConfigClockSource+0x1de>
 8007eb4:	4a64      	ldr	r2, [pc, #400]	@ (8008048 <HAL_TIM_ConfigClockSource+0x220>)
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	f200 80ae 	bhi.w	8008018 <HAL_TIM_ConfigClockSource+0x1f0>
 8007ebc:	4a63      	ldr	r2, [pc, #396]	@ (800804c <HAL_TIM_ConfigClockSource+0x224>)
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	f000 80a1 	beq.w	8008006 <HAL_TIM_ConfigClockSource+0x1de>
 8007ec4:	4a61      	ldr	r2, [pc, #388]	@ (800804c <HAL_TIM_ConfigClockSource+0x224>)
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	f200 80a6 	bhi.w	8008018 <HAL_TIM_ConfigClockSource+0x1f0>
 8007ecc:	4a60      	ldr	r2, [pc, #384]	@ (8008050 <HAL_TIM_ConfigClockSource+0x228>)
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	f000 8099 	beq.w	8008006 <HAL_TIM_ConfigClockSource+0x1de>
 8007ed4:	4a5e      	ldr	r2, [pc, #376]	@ (8008050 <HAL_TIM_ConfigClockSource+0x228>)
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	f200 809e 	bhi.w	8008018 <HAL_TIM_ConfigClockSource+0x1f0>
 8007edc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007ee0:	f000 8091 	beq.w	8008006 <HAL_TIM_ConfigClockSource+0x1de>
 8007ee4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007ee8:	f200 8096 	bhi.w	8008018 <HAL_TIM_ConfigClockSource+0x1f0>
 8007eec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007ef0:	f000 8089 	beq.w	8008006 <HAL_TIM_ConfigClockSource+0x1de>
 8007ef4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007ef8:	f200 808e 	bhi.w	8008018 <HAL_TIM_ConfigClockSource+0x1f0>
 8007efc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007f00:	d03e      	beq.n	8007f80 <HAL_TIM_ConfigClockSource+0x158>
 8007f02:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007f06:	f200 8087 	bhi.w	8008018 <HAL_TIM_ConfigClockSource+0x1f0>
 8007f0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f0e:	f000 8086 	beq.w	800801e <HAL_TIM_ConfigClockSource+0x1f6>
 8007f12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f16:	d87f      	bhi.n	8008018 <HAL_TIM_ConfigClockSource+0x1f0>
 8007f18:	2b70      	cmp	r3, #112	@ 0x70
 8007f1a:	d01a      	beq.n	8007f52 <HAL_TIM_ConfigClockSource+0x12a>
 8007f1c:	2b70      	cmp	r3, #112	@ 0x70
 8007f1e:	d87b      	bhi.n	8008018 <HAL_TIM_ConfigClockSource+0x1f0>
 8007f20:	2b60      	cmp	r3, #96	@ 0x60
 8007f22:	d050      	beq.n	8007fc6 <HAL_TIM_ConfigClockSource+0x19e>
 8007f24:	2b60      	cmp	r3, #96	@ 0x60
 8007f26:	d877      	bhi.n	8008018 <HAL_TIM_ConfigClockSource+0x1f0>
 8007f28:	2b50      	cmp	r3, #80	@ 0x50
 8007f2a:	d03c      	beq.n	8007fa6 <HAL_TIM_ConfigClockSource+0x17e>
 8007f2c:	2b50      	cmp	r3, #80	@ 0x50
 8007f2e:	d873      	bhi.n	8008018 <HAL_TIM_ConfigClockSource+0x1f0>
 8007f30:	2b40      	cmp	r3, #64	@ 0x40
 8007f32:	d058      	beq.n	8007fe6 <HAL_TIM_ConfigClockSource+0x1be>
 8007f34:	2b40      	cmp	r3, #64	@ 0x40
 8007f36:	d86f      	bhi.n	8008018 <HAL_TIM_ConfigClockSource+0x1f0>
 8007f38:	2b30      	cmp	r3, #48	@ 0x30
 8007f3a:	d064      	beq.n	8008006 <HAL_TIM_ConfigClockSource+0x1de>
 8007f3c:	2b30      	cmp	r3, #48	@ 0x30
 8007f3e:	d86b      	bhi.n	8008018 <HAL_TIM_ConfigClockSource+0x1f0>
 8007f40:	2b20      	cmp	r3, #32
 8007f42:	d060      	beq.n	8008006 <HAL_TIM_ConfigClockSource+0x1de>
 8007f44:	2b20      	cmp	r3, #32
 8007f46:	d867      	bhi.n	8008018 <HAL_TIM_ConfigClockSource+0x1f0>
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d05c      	beq.n	8008006 <HAL_TIM_ConfigClockSource+0x1de>
 8007f4c:	2b10      	cmp	r3, #16
 8007f4e:	d05a      	beq.n	8008006 <HAL_TIM_ConfigClockSource+0x1de>
 8007f50:	e062      	b.n	8008018 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007f62:	f000 fe8b 	bl	8008c7c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	689b      	ldr	r3, [r3, #8]
 8007f6c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007f74:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	68ba      	ldr	r2, [r7, #8]
 8007f7c:	609a      	str	r2, [r3, #8]
      break;
 8007f7e:	e04f      	b.n	8008020 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007f90:	f000 fe74 	bl	8008c7c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	689a      	ldr	r2, [r3, #8]
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007fa2:	609a      	str	r2, [r3, #8]
      break;
 8007fa4:	e03c      	b.n	8008020 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007fb2:	461a      	mov	r2, r3
 8007fb4:	f000 fde6 	bl	8008b84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	2150      	movs	r1, #80	@ 0x50
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	f000 fe3f 	bl	8008c42 <TIM_ITRx_SetConfig>
      break;
 8007fc4:	e02c      	b.n	8008020 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007fd2:	461a      	mov	r2, r3
 8007fd4:	f000 fe05 	bl	8008be2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	2160      	movs	r1, #96	@ 0x60
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f000 fe2f 	bl	8008c42 <TIM_ITRx_SetConfig>
      break;
 8007fe4:	e01c      	b.n	8008020 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ff2:	461a      	mov	r2, r3
 8007ff4:	f000 fdc6 	bl	8008b84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	2140      	movs	r1, #64	@ 0x40
 8007ffe:	4618      	mov	r0, r3
 8008000:	f000 fe1f 	bl	8008c42 <TIM_ITRx_SetConfig>
      break;
 8008004:	e00c      	b.n	8008020 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681a      	ldr	r2, [r3, #0]
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	4619      	mov	r1, r3
 8008010:	4610      	mov	r0, r2
 8008012:	f000 fe16 	bl	8008c42 <TIM_ITRx_SetConfig>
      break;
 8008016:	e003      	b.n	8008020 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8008018:	2301      	movs	r3, #1
 800801a:	73fb      	strb	r3, [r7, #15]
      break;
 800801c:	e000      	b.n	8008020 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800801e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2201      	movs	r2, #1
 8008024:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2200      	movs	r2, #0
 800802c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008030:	7bfb      	ldrb	r3, [r7, #15]
}
 8008032:	4618      	mov	r0, r3
 8008034:	3710      	adds	r7, #16
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}
 800803a:	bf00      	nop
 800803c:	00100070 	.word	0x00100070
 8008040:	00100060 	.word	0x00100060
 8008044:	00100050 	.word	0x00100050
 8008048:	00100040 	.word	0x00100040
 800804c:	00100030 	.word	0x00100030
 8008050:	00100020 	.word	0x00100020

08008054 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008054:	b480      	push	{r7}
 8008056:	b083      	sub	sp, #12
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800805c:	bf00      	nop
 800805e:	370c      	adds	r7, #12
 8008060:	46bd      	mov	sp, r7
 8008062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008066:	4770      	bx	lr

08008068 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008068:	b480      	push	{r7}
 800806a:	b083      	sub	sp, #12
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008070:	bf00      	nop
 8008072:	370c      	adds	r7, #12
 8008074:	46bd      	mov	sp, r7
 8008076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807a:	4770      	bx	lr

0800807c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800807c:	b480      	push	{r7}
 800807e:	b083      	sub	sp, #12
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008084:	bf00      	nop
 8008086:	370c      	adds	r7, #12
 8008088:	46bd      	mov	sp, r7
 800808a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808e:	4770      	bx	lr

08008090 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008090:	b480      	push	{r7}
 8008092:	b083      	sub	sp, #12
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8008098:	bf00      	nop
 800809a:	370c      	adds	r7, #12
 800809c:	46bd      	mov	sp, r7
 800809e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a2:	4770      	bx	lr

080080a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80080a4:	b480      	push	{r7}
 80080a6:	b083      	sub	sp, #12
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80080ac:	bf00      	nop
 80080ae:	370c      	adds	r7, #12
 80080b0:	46bd      	mov	sp, r7
 80080b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b6:	4770      	bx	lr

080080b8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80080b8:	b480      	push	{r7}
 80080ba:	b083      	sub	sp, #12
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80080c0:	bf00      	nop
 80080c2:	370c      	adds	r7, #12
 80080c4:	46bd      	mov	sp, r7
 80080c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ca:	4770      	bx	lr

080080cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80080cc:	b480      	push	{r7}
 80080ce:	b083      	sub	sp, #12
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80080d4:	bf00      	nop
 80080d6:	370c      	adds	r7, #12
 80080d8:	46bd      	mov	sp, r7
 80080da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080de:	4770      	bx	lr

080080e0 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80080e0:	b480      	push	{r7}
 80080e2:	b083      	sub	sp, #12
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 80080e8:	bf00      	nop
 80080ea:	370c      	adds	r7, #12
 80080ec:	46bd      	mov	sp, r7
 80080ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f2:	4770      	bx	lr

080080f4 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80080f4:	b480      	push	{r7}
 80080f6:	b083      	sub	sp, #12
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80080fc:	bf00      	nop
 80080fe:	370c      	adds	r7, #12
 8008100:	46bd      	mov	sp, r7
 8008102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008106:	4770      	bx	lr

08008108 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8008108:	b480      	push	{r7}
 800810a:	b087      	sub	sp, #28
 800810c:	af00      	add	r7, sp, #0
 800810e:	60f8      	str	r0, [r7, #12]
 8008110:	460b      	mov	r3, r1
 8008112:	607a      	str	r2, [r7, #4]
 8008114:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8008116:	2300      	movs	r3, #0
 8008118:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d101      	bne.n	8008124 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8008120:	2301      	movs	r3, #1
 8008122:	e14a      	b.n	80083ba <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800812a:	b2db      	uxtb	r3, r3
 800812c:	2b01      	cmp	r3, #1
 800812e:	f040 80dd 	bne.w	80082ec <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 8008132:	7afb      	ldrb	r3, [r7, #11]
 8008134:	2b1f      	cmp	r3, #31
 8008136:	f200 80d6 	bhi.w	80082e6 <HAL_TIM_RegisterCallback+0x1de>
 800813a:	a201      	add	r2, pc, #4	@ (adr r2, 8008140 <HAL_TIM_RegisterCallback+0x38>)
 800813c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008140:	080081c1 	.word	0x080081c1
 8008144:	080081c9 	.word	0x080081c9
 8008148:	080081d1 	.word	0x080081d1
 800814c:	080081d9 	.word	0x080081d9
 8008150:	080081e1 	.word	0x080081e1
 8008154:	080081e9 	.word	0x080081e9
 8008158:	080081f1 	.word	0x080081f1
 800815c:	080081f9 	.word	0x080081f9
 8008160:	08008201 	.word	0x08008201
 8008164:	08008209 	.word	0x08008209
 8008168:	08008211 	.word	0x08008211
 800816c:	08008219 	.word	0x08008219
 8008170:	08008221 	.word	0x08008221
 8008174:	08008229 	.word	0x08008229
 8008178:	08008233 	.word	0x08008233
 800817c:	0800823d 	.word	0x0800823d
 8008180:	08008247 	.word	0x08008247
 8008184:	08008251 	.word	0x08008251
 8008188:	0800825b 	.word	0x0800825b
 800818c:	08008265 	.word	0x08008265
 8008190:	0800826f 	.word	0x0800826f
 8008194:	08008279 	.word	0x08008279
 8008198:	08008283 	.word	0x08008283
 800819c:	0800828d 	.word	0x0800828d
 80081a0:	08008297 	.word	0x08008297
 80081a4:	080082a1 	.word	0x080082a1
 80081a8:	080082ab 	.word	0x080082ab
 80081ac:	080082b5 	.word	0x080082b5
 80081b0:	080082bf 	.word	0x080082bf
 80081b4:	080082c9 	.word	0x080082c9
 80081b8:	080082d3 	.word	0x080082d3
 80081bc:	080082dd 	.word	0x080082dd
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	687a      	ldr	r2, [r7, #4]
 80081c4:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 80081c6:	e0f7      	b.n	80083b8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	687a      	ldr	r2, [r7, #4]
 80081cc:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 80081ce:	e0f3      	b.n	80083b8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	687a      	ldr	r2, [r7, #4]
 80081d4:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 80081d6:	e0ef      	b.n	80083b8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	687a      	ldr	r2, [r7, #4]
 80081dc:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 80081de:	e0eb      	b.n	80083b8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	687a      	ldr	r2, [r7, #4]
 80081e4:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 80081e6:	e0e7      	b.n	80083b8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	687a      	ldr	r2, [r7, #4]
 80081ec:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 80081ee:	e0e3      	b.n	80083b8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	687a      	ldr	r2, [r7, #4]
 80081f4:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 80081f6:	e0df      	b.n	80083b8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	687a      	ldr	r2, [r7, #4]
 80081fc:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 80081fe:	e0db      	b.n	80083b8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	687a      	ldr	r2, [r7, #4]
 8008204:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8008206:	e0d7      	b.n	80083b8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	687a      	ldr	r2, [r7, #4]
 800820c:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800820e:	e0d3      	b.n	80083b8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	687a      	ldr	r2, [r7, #4]
 8008214:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8008216:	e0cf      	b.n	80083b8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	687a      	ldr	r2, [r7, #4]
 800821c:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800821e:	e0cb      	b.n	80083b8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	687a      	ldr	r2, [r7, #4]
 8008224:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8008226:	e0c7      	b.n	80083b8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	687a      	ldr	r2, [r7, #4]
 800822c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8008230:	e0c2      	b.n	80083b8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	687a      	ldr	r2, [r7, #4]
 8008236:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 800823a:	e0bd      	b.n	80083b8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	687a      	ldr	r2, [r7, #4]
 8008240:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 8008244:	e0b8      	b.n	80083b8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	687a      	ldr	r2, [r7, #4]
 800824a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 800824e:	e0b3      	b.n	80083b8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	687a      	ldr	r2, [r7, #4]
 8008254:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 8008258:	e0ae      	b.n	80083b8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	687a      	ldr	r2, [r7, #4]
 800825e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8008262:	e0a9      	b.n	80083b8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	687a      	ldr	r2, [r7, #4]
 8008268:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800826c:	e0a4      	b.n	80083b8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	687a      	ldr	r2, [r7, #4]
 8008272:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8008276:	e09f      	b.n	80083b8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	687a      	ldr	r2, [r7, #4]
 800827c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8008280:	e09a      	b.n	80083b8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	687a      	ldr	r2, [r7, #4]
 8008286:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800828a:	e095      	b.n	80083b8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	687a      	ldr	r2, [r7, #4]
 8008290:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8008294:	e090      	b.n	80083b8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	687a      	ldr	r2, [r7, #4]
 800829a:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800829e:	e08b      	b.n	80083b8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	687a      	ldr	r2, [r7, #4]
 80082a4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 80082a8:	e086      	b.n	80083b8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	687a      	ldr	r2, [r7, #4]
 80082ae:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 80082b2:	e081      	b.n	80083b8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	687a      	ldr	r2, [r7, #4]
 80082b8:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 80082bc:	e07c      	b.n	80083b8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	687a      	ldr	r2, [r7, #4]
 80082c2:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 80082c6:	e077      	b.n	80083b8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	687a      	ldr	r2, [r7, #4]
 80082cc:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 80082d0:	e072      	b.n	80083b8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	687a      	ldr	r2, [r7, #4]
 80082d6:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 80082da:	e06d      	b.n	80083b8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	687a      	ldr	r2, [r7, #4]
 80082e0:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 80082e4:	e068      	b.n	80083b8 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 80082e6:	2301      	movs	r3, #1
 80082e8:	75fb      	strb	r3, [r7, #23]
        break;
 80082ea:	e065      	b.n	80083b8 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80082f2:	b2db      	uxtb	r3, r3
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d15d      	bne.n	80083b4 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 80082f8:	7afb      	ldrb	r3, [r7, #11]
 80082fa:	2b0d      	cmp	r3, #13
 80082fc:	d857      	bhi.n	80083ae <HAL_TIM_RegisterCallback+0x2a6>
 80082fe:	a201      	add	r2, pc, #4	@ (adr r2, 8008304 <HAL_TIM_RegisterCallback+0x1fc>)
 8008300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008304:	0800833d 	.word	0x0800833d
 8008308:	08008345 	.word	0x08008345
 800830c:	0800834d 	.word	0x0800834d
 8008310:	08008355 	.word	0x08008355
 8008314:	0800835d 	.word	0x0800835d
 8008318:	08008365 	.word	0x08008365
 800831c:	0800836d 	.word	0x0800836d
 8008320:	08008375 	.word	0x08008375
 8008324:	0800837d 	.word	0x0800837d
 8008328:	08008385 	.word	0x08008385
 800832c:	0800838d 	.word	0x0800838d
 8008330:	08008395 	.word	0x08008395
 8008334:	0800839d 	.word	0x0800839d
 8008338:	080083a5 	.word	0x080083a5
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	687a      	ldr	r2, [r7, #4]
 8008340:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8008342:	e039      	b.n	80083b8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	687a      	ldr	r2, [r7, #4]
 8008348:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800834a:	e035      	b.n	80083b8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	687a      	ldr	r2, [r7, #4]
 8008350:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8008352:	e031      	b.n	80083b8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	687a      	ldr	r2, [r7, #4]
 8008358:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800835a:	e02d      	b.n	80083b8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	687a      	ldr	r2, [r7, #4]
 8008360:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8008362:	e029      	b.n	80083b8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	687a      	ldr	r2, [r7, #4]
 8008368:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800836a:	e025      	b.n	80083b8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	687a      	ldr	r2, [r7, #4]
 8008370:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8008372:	e021      	b.n	80083b8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	687a      	ldr	r2, [r7, #4]
 8008378:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800837a:	e01d      	b.n	80083b8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	687a      	ldr	r2, [r7, #4]
 8008380:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8008382:	e019      	b.n	80083b8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	687a      	ldr	r2, [r7, #4]
 8008388:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800838a:	e015      	b.n	80083b8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	687a      	ldr	r2, [r7, #4]
 8008390:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8008392:	e011      	b.n	80083b8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	687a      	ldr	r2, [r7, #4]
 8008398:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800839a:	e00d      	b.n	80083b8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	687a      	ldr	r2, [r7, #4]
 80083a0:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 80083a2:	e009      	b.n	80083b8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	687a      	ldr	r2, [r7, #4]
 80083a8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 80083ac:	e004      	b.n	80083b8 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 80083ae:	2301      	movs	r3, #1
 80083b0:	75fb      	strb	r3, [r7, #23]
        break;
 80083b2:	e001      	b.n	80083b8 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 80083b4:	2301      	movs	r3, #1
 80083b6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80083b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80083ba:	4618      	mov	r0, r3
 80083bc:	371c      	adds	r7, #28
 80083be:	46bd      	mov	sp, r7
 80083c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c4:	4770      	bx	lr
 80083c6:	bf00      	nop

080083c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80083c8:	b480      	push	{r7}
 80083ca:	b085      	sub	sp, #20
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
 80083d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	4a4c      	ldr	r2, [pc, #304]	@ (800850c <TIM_Base_SetConfig+0x144>)
 80083dc:	4293      	cmp	r3, r2
 80083de:	d017      	beq.n	8008410 <TIM_Base_SetConfig+0x48>
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80083e6:	d013      	beq.n	8008410 <TIM_Base_SetConfig+0x48>
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	4a49      	ldr	r2, [pc, #292]	@ (8008510 <TIM_Base_SetConfig+0x148>)
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d00f      	beq.n	8008410 <TIM_Base_SetConfig+0x48>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	4a48      	ldr	r2, [pc, #288]	@ (8008514 <TIM_Base_SetConfig+0x14c>)
 80083f4:	4293      	cmp	r3, r2
 80083f6:	d00b      	beq.n	8008410 <TIM_Base_SetConfig+0x48>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	4a47      	ldr	r2, [pc, #284]	@ (8008518 <TIM_Base_SetConfig+0x150>)
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d007      	beq.n	8008410 <TIM_Base_SetConfig+0x48>
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	4a46      	ldr	r2, [pc, #280]	@ (800851c <TIM_Base_SetConfig+0x154>)
 8008404:	4293      	cmp	r3, r2
 8008406:	d003      	beq.n	8008410 <TIM_Base_SetConfig+0x48>
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	4a45      	ldr	r2, [pc, #276]	@ (8008520 <TIM_Base_SetConfig+0x158>)
 800840c:	4293      	cmp	r3, r2
 800840e:	d108      	bne.n	8008422 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008416:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	685b      	ldr	r3, [r3, #4]
 800841c:	68fa      	ldr	r2, [r7, #12]
 800841e:	4313      	orrs	r3, r2
 8008420:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	4a39      	ldr	r2, [pc, #228]	@ (800850c <TIM_Base_SetConfig+0x144>)
 8008426:	4293      	cmp	r3, r2
 8008428:	d023      	beq.n	8008472 <TIM_Base_SetConfig+0xaa>
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008430:	d01f      	beq.n	8008472 <TIM_Base_SetConfig+0xaa>
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	4a36      	ldr	r2, [pc, #216]	@ (8008510 <TIM_Base_SetConfig+0x148>)
 8008436:	4293      	cmp	r3, r2
 8008438:	d01b      	beq.n	8008472 <TIM_Base_SetConfig+0xaa>
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	4a35      	ldr	r2, [pc, #212]	@ (8008514 <TIM_Base_SetConfig+0x14c>)
 800843e:	4293      	cmp	r3, r2
 8008440:	d017      	beq.n	8008472 <TIM_Base_SetConfig+0xaa>
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	4a34      	ldr	r2, [pc, #208]	@ (8008518 <TIM_Base_SetConfig+0x150>)
 8008446:	4293      	cmp	r3, r2
 8008448:	d013      	beq.n	8008472 <TIM_Base_SetConfig+0xaa>
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	4a33      	ldr	r2, [pc, #204]	@ (800851c <TIM_Base_SetConfig+0x154>)
 800844e:	4293      	cmp	r3, r2
 8008450:	d00f      	beq.n	8008472 <TIM_Base_SetConfig+0xaa>
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	4a33      	ldr	r2, [pc, #204]	@ (8008524 <TIM_Base_SetConfig+0x15c>)
 8008456:	4293      	cmp	r3, r2
 8008458:	d00b      	beq.n	8008472 <TIM_Base_SetConfig+0xaa>
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	4a32      	ldr	r2, [pc, #200]	@ (8008528 <TIM_Base_SetConfig+0x160>)
 800845e:	4293      	cmp	r3, r2
 8008460:	d007      	beq.n	8008472 <TIM_Base_SetConfig+0xaa>
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	4a31      	ldr	r2, [pc, #196]	@ (800852c <TIM_Base_SetConfig+0x164>)
 8008466:	4293      	cmp	r3, r2
 8008468:	d003      	beq.n	8008472 <TIM_Base_SetConfig+0xaa>
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	4a2c      	ldr	r2, [pc, #176]	@ (8008520 <TIM_Base_SetConfig+0x158>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d108      	bne.n	8008484 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008478:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	68db      	ldr	r3, [r3, #12]
 800847e:	68fa      	ldr	r2, [r7, #12]
 8008480:	4313      	orrs	r3, r2
 8008482:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	695b      	ldr	r3, [r3, #20]
 800848e:	4313      	orrs	r3, r2
 8008490:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	68fa      	ldr	r2, [r7, #12]
 8008496:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	689a      	ldr	r2, [r3, #8]
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	681a      	ldr	r2, [r3, #0]
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	4a18      	ldr	r2, [pc, #96]	@ (800850c <TIM_Base_SetConfig+0x144>)
 80084ac:	4293      	cmp	r3, r2
 80084ae:	d013      	beq.n	80084d8 <TIM_Base_SetConfig+0x110>
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	4a1a      	ldr	r2, [pc, #104]	@ (800851c <TIM_Base_SetConfig+0x154>)
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d00f      	beq.n	80084d8 <TIM_Base_SetConfig+0x110>
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	4a1a      	ldr	r2, [pc, #104]	@ (8008524 <TIM_Base_SetConfig+0x15c>)
 80084bc:	4293      	cmp	r3, r2
 80084be:	d00b      	beq.n	80084d8 <TIM_Base_SetConfig+0x110>
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	4a19      	ldr	r2, [pc, #100]	@ (8008528 <TIM_Base_SetConfig+0x160>)
 80084c4:	4293      	cmp	r3, r2
 80084c6:	d007      	beq.n	80084d8 <TIM_Base_SetConfig+0x110>
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	4a18      	ldr	r2, [pc, #96]	@ (800852c <TIM_Base_SetConfig+0x164>)
 80084cc:	4293      	cmp	r3, r2
 80084ce:	d003      	beq.n	80084d8 <TIM_Base_SetConfig+0x110>
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	4a13      	ldr	r2, [pc, #76]	@ (8008520 <TIM_Base_SetConfig+0x158>)
 80084d4:	4293      	cmp	r3, r2
 80084d6:	d103      	bne.n	80084e0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	691a      	ldr	r2, [r3, #16]
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2201      	movs	r2, #1
 80084e4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	691b      	ldr	r3, [r3, #16]
 80084ea:	f003 0301 	and.w	r3, r3, #1
 80084ee:	2b01      	cmp	r3, #1
 80084f0:	d105      	bne.n	80084fe <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	691b      	ldr	r3, [r3, #16]
 80084f6:	f023 0201 	bic.w	r2, r3, #1
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	611a      	str	r2, [r3, #16]
  }
}
 80084fe:	bf00      	nop
 8008500:	3714      	adds	r7, #20
 8008502:	46bd      	mov	sp, r7
 8008504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008508:	4770      	bx	lr
 800850a:	bf00      	nop
 800850c:	40012c00 	.word	0x40012c00
 8008510:	40000400 	.word	0x40000400
 8008514:	40000800 	.word	0x40000800
 8008518:	40000c00 	.word	0x40000c00
 800851c:	40013400 	.word	0x40013400
 8008520:	40015000 	.word	0x40015000
 8008524:	40014000 	.word	0x40014000
 8008528:	40014400 	.word	0x40014400
 800852c:	40014800 	.word	0x40014800

08008530 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008530:	b480      	push	{r7}
 8008532:	b087      	sub	sp, #28
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
 8008538:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6a1b      	ldr	r3, [r3, #32]
 800853e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	6a1b      	ldr	r3, [r3, #32]
 8008544:	f023 0201 	bic.w	r2, r3, #1
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	685b      	ldr	r3, [r3, #4]
 8008550:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	699b      	ldr	r3, [r3, #24]
 8008556:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800855e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008562:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	f023 0303 	bic.w	r3, r3, #3
 800856a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	68fa      	ldr	r2, [r7, #12]
 8008572:	4313      	orrs	r3, r2
 8008574:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008576:	697b      	ldr	r3, [r7, #20]
 8008578:	f023 0302 	bic.w	r3, r3, #2
 800857c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	689b      	ldr	r3, [r3, #8]
 8008582:	697a      	ldr	r2, [r7, #20]
 8008584:	4313      	orrs	r3, r2
 8008586:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	4a30      	ldr	r2, [pc, #192]	@ (800864c <TIM_OC1_SetConfig+0x11c>)
 800858c:	4293      	cmp	r3, r2
 800858e:	d013      	beq.n	80085b8 <TIM_OC1_SetConfig+0x88>
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	4a2f      	ldr	r2, [pc, #188]	@ (8008650 <TIM_OC1_SetConfig+0x120>)
 8008594:	4293      	cmp	r3, r2
 8008596:	d00f      	beq.n	80085b8 <TIM_OC1_SetConfig+0x88>
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	4a2e      	ldr	r2, [pc, #184]	@ (8008654 <TIM_OC1_SetConfig+0x124>)
 800859c:	4293      	cmp	r3, r2
 800859e:	d00b      	beq.n	80085b8 <TIM_OC1_SetConfig+0x88>
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	4a2d      	ldr	r2, [pc, #180]	@ (8008658 <TIM_OC1_SetConfig+0x128>)
 80085a4:	4293      	cmp	r3, r2
 80085a6:	d007      	beq.n	80085b8 <TIM_OC1_SetConfig+0x88>
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	4a2c      	ldr	r2, [pc, #176]	@ (800865c <TIM_OC1_SetConfig+0x12c>)
 80085ac:	4293      	cmp	r3, r2
 80085ae:	d003      	beq.n	80085b8 <TIM_OC1_SetConfig+0x88>
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	4a2b      	ldr	r2, [pc, #172]	@ (8008660 <TIM_OC1_SetConfig+0x130>)
 80085b4:	4293      	cmp	r3, r2
 80085b6:	d10c      	bne.n	80085d2 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80085b8:	697b      	ldr	r3, [r7, #20]
 80085ba:	f023 0308 	bic.w	r3, r3, #8
 80085be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	68db      	ldr	r3, [r3, #12]
 80085c4:	697a      	ldr	r2, [r7, #20]
 80085c6:	4313      	orrs	r3, r2
 80085c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80085ca:	697b      	ldr	r3, [r7, #20]
 80085cc:	f023 0304 	bic.w	r3, r3, #4
 80085d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	4a1d      	ldr	r2, [pc, #116]	@ (800864c <TIM_OC1_SetConfig+0x11c>)
 80085d6:	4293      	cmp	r3, r2
 80085d8:	d013      	beq.n	8008602 <TIM_OC1_SetConfig+0xd2>
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	4a1c      	ldr	r2, [pc, #112]	@ (8008650 <TIM_OC1_SetConfig+0x120>)
 80085de:	4293      	cmp	r3, r2
 80085e0:	d00f      	beq.n	8008602 <TIM_OC1_SetConfig+0xd2>
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	4a1b      	ldr	r2, [pc, #108]	@ (8008654 <TIM_OC1_SetConfig+0x124>)
 80085e6:	4293      	cmp	r3, r2
 80085e8:	d00b      	beq.n	8008602 <TIM_OC1_SetConfig+0xd2>
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	4a1a      	ldr	r2, [pc, #104]	@ (8008658 <TIM_OC1_SetConfig+0x128>)
 80085ee:	4293      	cmp	r3, r2
 80085f0:	d007      	beq.n	8008602 <TIM_OC1_SetConfig+0xd2>
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	4a19      	ldr	r2, [pc, #100]	@ (800865c <TIM_OC1_SetConfig+0x12c>)
 80085f6:	4293      	cmp	r3, r2
 80085f8:	d003      	beq.n	8008602 <TIM_OC1_SetConfig+0xd2>
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	4a18      	ldr	r2, [pc, #96]	@ (8008660 <TIM_OC1_SetConfig+0x130>)
 80085fe:	4293      	cmp	r3, r2
 8008600:	d111      	bne.n	8008626 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008602:	693b      	ldr	r3, [r7, #16]
 8008604:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008608:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800860a:	693b      	ldr	r3, [r7, #16]
 800860c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008610:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	695b      	ldr	r3, [r3, #20]
 8008616:	693a      	ldr	r2, [r7, #16]
 8008618:	4313      	orrs	r3, r2
 800861a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	699b      	ldr	r3, [r3, #24]
 8008620:	693a      	ldr	r2, [r7, #16]
 8008622:	4313      	orrs	r3, r2
 8008624:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	693a      	ldr	r2, [r7, #16]
 800862a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	68fa      	ldr	r2, [r7, #12]
 8008630:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	685a      	ldr	r2, [r3, #4]
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	697a      	ldr	r2, [r7, #20]
 800863e:	621a      	str	r2, [r3, #32]
}
 8008640:	bf00      	nop
 8008642:	371c      	adds	r7, #28
 8008644:	46bd      	mov	sp, r7
 8008646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864a:	4770      	bx	lr
 800864c:	40012c00 	.word	0x40012c00
 8008650:	40013400 	.word	0x40013400
 8008654:	40014000 	.word	0x40014000
 8008658:	40014400 	.word	0x40014400
 800865c:	40014800 	.word	0x40014800
 8008660:	40015000 	.word	0x40015000

08008664 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008664:	b480      	push	{r7}
 8008666:	b087      	sub	sp, #28
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
 800866c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6a1b      	ldr	r3, [r3, #32]
 8008672:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	6a1b      	ldr	r3, [r3, #32]
 8008678:	f023 0210 	bic.w	r2, r3, #16
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	685b      	ldr	r3, [r3, #4]
 8008684:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	699b      	ldr	r3, [r3, #24]
 800868a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008692:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008696:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800869e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	021b      	lsls	r3, r3, #8
 80086a6:	68fa      	ldr	r2, [r7, #12]
 80086a8:	4313      	orrs	r3, r2
 80086aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80086ac:	697b      	ldr	r3, [r7, #20]
 80086ae:	f023 0320 	bic.w	r3, r3, #32
 80086b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	689b      	ldr	r3, [r3, #8]
 80086b8:	011b      	lsls	r3, r3, #4
 80086ba:	697a      	ldr	r2, [r7, #20]
 80086bc:	4313      	orrs	r3, r2
 80086be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	4a2c      	ldr	r2, [pc, #176]	@ (8008774 <TIM_OC2_SetConfig+0x110>)
 80086c4:	4293      	cmp	r3, r2
 80086c6:	d007      	beq.n	80086d8 <TIM_OC2_SetConfig+0x74>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	4a2b      	ldr	r2, [pc, #172]	@ (8008778 <TIM_OC2_SetConfig+0x114>)
 80086cc:	4293      	cmp	r3, r2
 80086ce:	d003      	beq.n	80086d8 <TIM_OC2_SetConfig+0x74>
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	4a2a      	ldr	r2, [pc, #168]	@ (800877c <TIM_OC2_SetConfig+0x118>)
 80086d4:	4293      	cmp	r3, r2
 80086d6:	d10d      	bne.n	80086f4 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80086d8:	697b      	ldr	r3, [r7, #20]
 80086da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80086de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	68db      	ldr	r3, [r3, #12]
 80086e4:	011b      	lsls	r3, r3, #4
 80086e6:	697a      	ldr	r2, [r7, #20]
 80086e8:	4313      	orrs	r3, r2
 80086ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80086ec:	697b      	ldr	r3, [r7, #20]
 80086ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80086f2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	4a1f      	ldr	r2, [pc, #124]	@ (8008774 <TIM_OC2_SetConfig+0x110>)
 80086f8:	4293      	cmp	r3, r2
 80086fa:	d013      	beq.n	8008724 <TIM_OC2_SetConfig+0xc0>
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	4a1e      	ldr	r2, [pc, #120]	@ (8008778 <TIM_OC2_SetConfig+0x114>)
 8008700:	4293      	cmp	r3, r2
 8008702:	d00f      	beq.n	8008724 <TIM_OC2_SetConfig+0xc0>
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	4a1e      	ldr	r2, [pc, #120]	@ (8008780 <TIM_OC2_SetConfig+0x11c>)
 8008708:	4293      	cmp	r3, r2
 800870a:	d00b      	beq.n	8008724 <TIM_OC2_SetConfig+0xc0>
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	4a1d      	ldr	r2, [pc, #116]	@ (8008784 <TIM_OC2_SetConfig+0x120>)
 8008710:	4293      	cmp	r3, r2
 8008712:	d007      	beq.n	8008724 <TIM_OC2_SetConfig+0xc0>
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	4a1c      	ldr	r2, [pc, #112]	@ (8008788 <TIM_OC2_SetConfig+0x124>)
 8008718:	4293      	cmp	r3, r2
 800871a:	d003      	beq.n	8008724 <TIM_OC2_SetConfig+0xc0>
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	4a17      	ldr	r2, [pc, #92]	@ (800877c <TIM_OC2_SetConfig+0x118>)
 8008720:	4293      	cmp	r3, r2
 8008722:	d113      	bne.n	800874c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008724:	693b      	ldr	r3, [r7, #16]
 8008726:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800872a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800872c:	693b      	ldr	r3, [r7, #16]
 800872e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008732:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	695b      	ldr	r3, [r3, #20]
 8008738:	009b      	lsls	r3, r3, #2
 800873a:	693a      	ldr	r2, [r7, #16]
 800873c:	4313      	orrs	r3, r2
 800873e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	699b      	ldr	r3, [r3, #24]
 8008744:	009b      	lsls	r3, r3, #2
 8008746:	693a      	ldr	r2, [r7, #16]
 8008748:	4313      	orrs	r3, r2
 800874a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	693a      	ldr	r2, [r7, #16]
 8008750:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	68fa      	ldr	r2, [r7, #12]
 8008756:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	685a      	ldr	r2, [r3, #4]
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	697a      	ldr	r2, [r7, #20]
 8008764:	621a      	str	r2, [r3, #32]
}
 8008766:	bf00      	nop
 8008768:	371c      	adds	r7, #28
 800876a:	46bd      	mov	sp, r7
 800876c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008770:	4770      	bx	lr
 8008772:	bf00      	nop
 8008774:	40012c00 	.word	0x40012c00
 8008778:	40013400 	.word	0x40013400
 800877c:	40015000 	.word	0x40015000
 8008780:	40014000 	.word	0x40014000
 8008784:	40014400 	.word	0x40014400
 8008788:	40014800 	.word	0x40014800

0800878c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800878c:	b480      	push	{r7}
 800878e:	b087      	sub	sp, #28
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
 8008794:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	6a1b      	ldr	r3, [r3, #32]
 800879a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	6a1b      	ldr	r3, [r3, #32]
 80087a0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	685b      	ldr	r3, [r3, #4]
 80087ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	69db      	ldr	r3, [r3, #28]
 80087b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80087ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80087be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	f023 0303 	bic.w	r3, r3, #3
 80087c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	68fa      	ldr	r2, [r7, #12]
 80087ce:	4313      	orrs	r3, r2
 80087d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80087d2:	697b      	ldr	r3, [r7, #20]
 80087d4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80087d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	689b      	ldr	r3, [r3, #8]
 80087de:	021b      	lsls	r3, r3, #8
 80087e0:	697a      	ldr	r2, [r7, #20]
 80087e2:	4313      	orrs	r3, r2
 80087e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	4a2b      	ldr	r2, [pc, #172]	@ (8008898 <TIM_OC3_SetConfig+0x10c>)
 80087ea:	4293      	cmp	r3, r2
 80087ec:	d007      	beq.n	80087fe <TIM_OC3_SetConfig+0x72>
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	4a2a      	ldr	r2, [pc, #168]	@ (800889c <TIM_OC3_SetConfig+0x110>)
 80087f2:	4293      	cmp	r3, r2
 80087f4:	d003      	beq.n	80087fe <TIM_OC3_SetConfig+0x72>
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	4a29      	ldr	r2, [pc, #164]	@ (80088a0 <TIM_OC3_SetConfig+0x114>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	d10d      	bne.n	800881a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80087fe:	697b      	ldr	r3, [r7, #20]
 8008800:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008804:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	68db      	ldr	r3, [r3, #12]
 800880a:	021b      	lsls	r3, r3, #8
 800880c:	697a      	ldr	r2, [r7, #20]
 800880e:	4313      	orrs	r3, r2
 8008810:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008812:	697b      	ldr	r3, [r7, #20]
 8008814:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008818:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	4a1e      	ldr	r2, [pc, #120]	@ (8008898 <TIM_OC3_SetConfig+0x10c>)
 800881e:	4293      	cmp	r3, r2
 8008820:	d013      	beq.n	800884a <TIM_OC3_SetConfig+0xbe>
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	4a1d      	ldr	r2, [pc, #116]	@ (800889c <TIM_OC3_SetConfig+0x110>)
 8008826:	4293      	cmp	r3, r2
 8008828:	d00f      	beq.n	800884a <TIM_OC3_SetConfig+0xbe>
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	4a1d      	ldr	r2, [pc, #116]	@ (80088a4 <TIM_OC3_SetConfig+0x118>)
 800882e:	4293      	cmp	r3, r2
 8008830:	d00b      	beq.n	800884a <TIM_OC3_SetConfig+0xbe>
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	4a1c      	ldr	r2, [pc, #112]	@ (80088a8 <TIM_OC3_SetConfig+0x11c>)
 8008836:	4293      	cmp	r3, r2
 8008838:	d007      	beq.n	800884a <TIM_OC3_SetConfig+0xbe>
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	4a1b      	ldr	r2, [pc, #108]	@ (80088ac <TIM_OC3_SetConfig+0x120>)
 800883e:	4293      	cmp	r3, r2
 8008840:	d003      	beq.n	800884a <TIM_OC3_SetConfig+0xbe>
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	4a16      	ldr	r2, [pc, #88]	@ (80088a0 <TIM_OC3_SetConfig+0x114>)
 8008846:	4293      	cmp	r3, r2
 8008848:	d113      	bne.n	8008872 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800884a:	693b      	ldr	r3, [r7, #16]
 800884c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008850:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008852:	693b      	ldr	r3, [r7, #16]
 8008854:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008858:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	695b      	ldr	r3, [r3, #20]
 800885e:	011b      	lsls	r3, r3, #4
 8008860:	693a      	ldr	r2, [r7, #16]
 8008862:	4313      	orrs	r3, r2
 8008864:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	699b      	ldr	r3, [r3, #24]
 800886a:	011b      	lsls	r3, r3, #4
 800886c:	693a      	ldr	r2, [r7, #16]
 800886e:	4313      	orrs	r3, r2
 8008870:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	693a      	ldr	r2, [r7, #16]
 8008876:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	68fa      	ldr	r2, [r7, #12]
 800887c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	685a      	ldr	r2, [r3, #4]
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	697a      	ldr	r2, [r7, #20]
 800888a:	621a      	str	r2, [r3, #32]
}
 800888c:	bf00      	nop
 800888e:	371c      	adds	r7, #28
 8008890:	46bd      	mov	sp, r7
 8008892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008896:	4770      	bx	lr
 8008898:	40012c00 	.word	0x40012c00
 800889c:	40013400 	.word	0x40013400
 80088a0:	40015000 	.word	0x40015000
 80088a4:	40014000 	.word	0x40014000
 80088a8:	40014400 	.word	0x40014400
 80088ac:	40014800 	.word	0x40014800

080088b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80088b0:	b480      	push	{r7}
 80088b2:	b087      	sub	sp, #28
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
 80088b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6a1b      	ldr	r3, [r3, #32]
 80088be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	6a1b      	ldr	r3, [r3, #32]
 80088c4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	685b      	ldr	r3, [r3, #4]
 80088d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	69db      	ldr	r3, [r3, #28]
 80088d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80088de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80088e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80088ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	021b      	lsls	r3, r3, #8
 80088f2:	68fa      	ldr	r2, [r7, #12]
 80088f4:	4313      	orrs	r3, r2
 80088f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80088f8:	697b      	ldr	r3, [r7, #20]
 80088fa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80088fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	689b      	ldr	r3, [r3, #8]
 8008904:	031b      	lsls	r3, r3, #12
 8008906:	697a      	ldr	r2, [r7, #20]
 8008908:	4313      	orrs	r3, r2
 800890a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	4a2c      	ldr	r2, [pc, #176]	@ (80089c0 <TIM_OC4_SetConfig+0x110>)
 8008910:	4293      	cmp	r3, r2
 8008912:	d007      	beq.n	8008924 <TIM_OC4_SetConfig+0x74>
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	4a2b      	ldr	r2, [pc, #172]	@ (80089c4 <TIM_OC4_SetConfig+0x114>)
 8008918:	4293      	cmp	r3, r2
 800891a:	d003      	beq.n	8008924 <TIM_OC4_SetConfig+0x74>
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	4a2a      	ldr	r2, [pc, #168]	@ (80089c8 <TIM_OC4_SetConfig+0x118>)
 8008920:	4293      	cmp	r3, r2
 8008922:	d10d      	bne.n	8008940 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8008924:	697b      	ldr	r3, [r7, #20]
 8008926:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800892a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	68db      	ldr	r3, [r3, #12]
 8008930:	031b      	lsls	r3, r3, #12
 8008932:	697a      	ldr	r2, [r7, #20]
 8008934:	4313      	orrs	r3, r2
 8008936:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8008938:	697b      	ldr	r3, [r7, #20]
 800893a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800893e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	4a1f      	ldr	r2, [pc, #124]	@ (80089c0 <TIM_OC4_SetConfig+0x110>)
 8008944:	4293      	cmp	r3, r2
 8008946:	d013      	beq.n	8008970 <TIM_OC4_SetConfig+0xc0>
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	4a1e      	ldr	r2, [pc, #120]	@ (80089c4 <TIM_OC4_SetConfig+0x114>)
 800894c:	4293      	cmp	r3, r2
 800894e:	d00f      	beq.n	8008970 <TIM_OC4_SetConfig+0xc0>
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	4a1e      	ldr	r2, [pc, #120]	@ (80089cc <TIM_OC4_SetConfig+0x11c>)
 8008954:	4293      	cmp	r3, r2
 8008956:	d00b      	beq.n	8008970 <TIM_OC4_SetConfig+0xc0>
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	4a1d      	ldr	r2, [pc, #116]	@ (80089d0 <TIM_OC4_SetConfig+0x120>)
 800895c:	4293      	cmp	r3, r2
 800895e:	d007      	beq.n	8008970 <TIM_OC4_SetConfig+0xc0>
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	4a1c      	ldr	r2, [pc, #112]	@ (80089d4 <TIM_OC4_SetConfig+0x124>)
 8008964:	4293      	cmp	r3, r2
 8008966:	d003      	beq.n	8008970 <TIM_OC4_SetConfig+0xc0>
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	4a17      	ldr	r2, [pc, #92]	@ (80089c8 <TIM_OC4_SetConfig+0x118>)
 800896c:	4293      	cmp	r3, r2
 800896e:	d113      	bne.n	8008998 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008970:	693b      	ldr	r3, [r7, #16]
 8008972:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008976:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008978:	693b      	ldr	r3, [r7, #16]
 800897a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800897e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	695b      	ldr	r3, [r3, #20]
 8008984:	019b      	lsls	r3, r3, #6
 8008986:	693a      	ldr	r2, [r7, #16]
 8008988:	4313      	orrs	r3, r2
 800898a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	699b      	ldr	r3, [r3, #24]
 8008990:	019b      	lsls	r3, r3, #6
 8008992:	693a      	ldr	r2, [r7, #16]
 8008994:	4313      	orrs	r3, r2
 8008996:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	693a      	ldr	r2, [r7, #16]
 800899c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	68fa      	ldr	r2, [r7, #12]
 80089a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	685a      	ldr	r2, [r3, #4]
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	697a      	ldr	r2, [r7, #20]
 80089b0:	621a      	str	r2, [r3, #32]
}
 80089b2:	bf00      	nop
 80089b4:	371c      	adds	r7, #28
 80089b6:	46bd      	mov	sp, r7
 80089b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089bc:	4770      	bx	lr
 80089be:	bf00      	nop
 80089c0:	40012c00 	.word	0x40012c00
 80089c4:	40013400 	.word	0x40013400
 80089c8:	40015000 	.word	0x40015000
 80089cc:	40014000 	.word	0x40014000
 80089d0:	40014400 	.word	0x40014400
 80089d4:	40014800 	.word	0x40014800

080089d8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80089d8:	b480      	push	{r7}
 80089da:	b087      	sub	sp, #28
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
 80089e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6a1b      	ldr	r3, [r3, #32]
 80089e6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	6a1b      	ldr	r3, [r3, #32]
 80089ec:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	685b      	ldr	r3, [r3, #4]
 80089f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80089fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008a06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	68fa      	ldr	r2, [r7, #12]
 8008a12:	4313      	orrs	r3, r2
 8008a14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008a16:	693b      	ldr	r3, [r7, #16]
 8008a18:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008a1c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	689b      	ldr	r3, [r3, #8]
 8008a22:	041b      	lsls	r3, r3, #16
 8008a24:	693a      	ldr	r2, [r7, #16]
 8008a26:	4313      	orrs	r3, r2
 8008a28:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	4a19      	ldr	r2, [pc, #100]	@ (8008a94 <TIM_OC5_SetConfig+0xbc>)
 8008a2e:	4293      	cmp	r3, r2
 8008a30:	d013      	beq.n	8008a5a <TIM_OC5_SetConfig+0x82>
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	4a18      	ldr	r2, [pc, #96]	@ (8008a98 <TIM_OC5_SetConfig+0xc0>)
 8008a36:	4293      	cmp	r3, r2
 8008a38:	d00f      	beq.n	8008a5a <TIM_OC5_SetConfig+0x82>
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	4a17      	ldr	r2, [pc, #92]	@ (8008a9c <TIM_OC5_SetConfig+0xc4>)
 8008a3e:	4293      	cmp	r3, r2
 8008a40:	d00b      	beq.n	8008a5a <TIM_OC5_SetConfig+0x82>
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	4a16      	ldr	r2, [pc, #88]	@ (8008aa0 <TIM_OC5_SetConfig+0xc8>)
 8008a46:	4293      	cmp	r3, r2
 8008a48:	d007      	beq.n	8008a5a <TIM_OC5_SetConfig+0x82>
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	4a15      	ldr	r2, [pc, #84]	@ (8008aa4 <TIM_OC5_SetConfig+0xcc>)
 8008a4e:	4293      	cmp	r3, r2
 8008a50:	d003      	beq.n	8008a5a <TIM_OC5_SetConfig+0x82>
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	4a14      	ldr	r2, [pc, #80]	@ (8008aa8 <TIM_OC5_SetConfig+0xd0>)
 8008a56:	4293      	cmp	r3, r2
 8008a58:	d109      	bne.n	8008a6e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008a5a:	697b      	ldr	r3, [r7, #20]
 8008a5c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008a60:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	695b      	ldr	r3, [r3, #20]
 8008a66:	021b      	lsls	r3, r3, #8
 8008a68:	697a      	ldr	r2, [r7, #20]
 8008a6a:	4313      	orrs	r3, r2
 8008a6c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	697a      	ldr	r2, [r7, #20]
 8008a72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	68fa      	ldr	r2, [r7, #12]
 8008a78:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	685a      	ldr	r2, [r3, #4]
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	693a      	ldr	r2, [r7, #16]
 8008a86:	621a      	str	r2, [r3, #32]
}
 8008a88:	bf00      	nop
 8008a8a:	371c      	adds	r7, #28
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a92:	4770      	bx	lr
 8008a94:	40012c00 	.word	0x40012c00
 8008a98:	40013400 	.word	0x40013400
 8008a9c:	40014000 	.word	0x40014000
 8008aa0:	40014400 	.word	0x40014400
 8008aa4:	40014800 	.word	0x40014800
 8008aa8:	40015000 	.word	0x40015000

08008aac <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008aac:	b480      	push	{r7}
 8008aae:	b087      	sub	sp, #28
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
 8008ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6a1b      	ldr	r3, [r3, #32]
 8008aba:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	6a1b      	ldr	r3, [r3, #32]
 8008ac0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	685b      	ldr	r3, [r3, #4]
 8008acc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ad2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008ada:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008ade:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	021b      	lsls	r3, r3, #8
 8008ae6:	68fa      	ldr	r2, [r7, #12]
 8008ae8:	4313      	orrs	r3, r2
 8008aea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008aec:	693b      	ldr	r3, [r7, #16]
 8008aee:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008af2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	689b      	ldr	r3, [r3, #8]
 8008af8:	051b      	lsls	r3, r3, #20
 8008afa:	693a      	ldr	r2, [r7, #16]
 8008afc:	4313      	orrs	r3, r2
 8008afe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	4a1a      	ldr	r2, [pc, #104]	@ (8008b6c <TIM_OC6_SetConfig+0xc0>)
 8008b04:	4293      	cmp	r3, r2
 8008b06:	d013      	beq.n	8008b30 <TIM_OC6_SetConfig+0x84>
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	4a19      	ldr	r2, [pc, #100]	@ (8008b70 <TIM_OC6_SetConfig+0xc4>)
 8008b0c:	4293      	cmp	r3, r2
 8008b0e:	d00f      	beq.n	8008b30 <TIM_OC6_SetConfig+0x84>
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	4a18      	ldr	r2, [pc, #96]	@ (8008b74 <TIM_OC6_SetConfig+0xc8>)
 8008b14:	4293      	cmp	r3, r2
 8008b16:	d00b      	beq.n	8008b30 <TIM_OC6_SetConfig+0x84>
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	4a17      	ldr	r2, [pc, #92]	@ (8008b78 <TIM_OC6_SetConfig+0xcc>)
 8008b1c:	4293      	cmp	r3, r2
 8008b1e:	d007      	beq.n	8008b30 <TIM_OC6_SetConfig+0x84>
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	4a16      	ldr	r2, [pc, #88]	@ (8008b7c <TIM_OC6_SetConfig+0xd0>)
 8008b24:	4293      	cmp	r3, r2
 8008b26:	d003      	beq.n	8008b30 <TIM_OC6_SetConfig+0x84>
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	4a15      	ldr	r2, [pc, #84]	@ (8008b80 <TIM_OC6_SetConfig+0xd4>)
 8008b2c:	4293      	cmp	r3, r2
 8008b2e:	d109      	bne.n	8008b44 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008b30:	697b      	ldr	r3, [r7, #20]
 8008b32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008b36:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	695b      	ldr	r3, [r3, #20]
 8008b3c:	029b      	lsls	r3, r3, #10
 8008b3e:	697a      	ldr	r2, [r7, #20]
 8008b40:	4313      	orrs	r3, r2
 8008b42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	697a      	ldr	r2, [r7, #20]
 8008b48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	68fa      	ldr	r2, [r7, #12]
 8008b4e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	685a      	ldr	r2, [r3, #4]
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	693a      	ldr	r2, [r7, #16]
 8008b5c:	621a      	str	r2, [r3, #32]
}
 8008b5e:	bf00      	nop
 8008b60:	371c      	adds	r7, #28
 8008b62:	46bd      	mov	sp, r7
 8008b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b68:	4770      	bx	lr
 8008b6a:	bf00      	nop
 8008b6c:	40012c00 	.word	0x40012c00
 8008b70:	40013400 	.word	0x40013400
 8008b74:	40014000 	.word	0x40014000
 8008b78:	40014400 	.word	0x40014400
 8008b7c:	40014800 	.word	0x40014800
 8008b80:	40015000 	.word	0x40015000

08008b84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008b84:	b480      	push	{r7}
 8008b86:	b087      	sub	sp, #28
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	60f8      	str	r0, [r7, #12]
 8008b8c:	60b9      	str	r1, [r7, #8]
 8008b8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	6a1b      	ldr	r3, [r3, #32]
 8008b94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	6a1b      	ldr	r3, [r3, #32]
 8008b9a:	f023 0201 	bic.w	r2, r3, #1
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	699b      	ldr	r3, [r3, #24]
 8008ba6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008ba8:	693b      	ldr	r3, [r7, #16]
 8008baa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008bae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	011b      	lsls	r3, r3, #4
 8008bb4:	693a      	ldr	r2, [r7, #16]
 8008bb6:	4313      	orrs	r3, r2
 8008bb8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008bba:	697b      	ldr	r3, [r7, #20]
 8008bbc:	f023 030a 	bic.w	r3, r3, #10
 8008bc0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008bc2:	697a      	ldr	r2, [r7, #20]
 8008bc4:	68bb      	ldr	r3, [r7, #8]
 8008bc6:	4313      	orrs	r3, r2
 8008bc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	693a      	ldr	r2, [r7, #16]
 8008bce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	697a      	ldr	r2, [r7, #20]
 8008bd4:	621a      	str	r2, [r3, #32]
}
 8008bd6:	bf00      	nop
 8008bd8:	371c      	adds	r7, #28
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be0:	4770      	bx	lr

08008be2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008be2:	b480      	push	{r7}
 8008be4:	b087      	sub	sp, #28
 8008be6:	af00      	add	r7, sp, #0
 8008be8:	60f8      	str	r0, [r7, #12]
 8008bea:	60b9      	str	r1, [r7, #8]
 8008bec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	6a1b      	ldr	r3, [r3, #32]
 8008bf2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	6a1b      	ldr	r3, [r3, #32]
 8008bf8:	f023 0210 	bic.w	r2, r3, #16
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	699b      	ldr	r3, [r3, #24]
 8008c04:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008c06:	693b      	ldr	r3, [r7, #16]
 8008c08:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008c0c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	031b      	lsls	r3, r3, #12
 8008c12:	693a      	ldr	r2, [r7, #16]
 8008c14:	4313      	orrs	r3, r2
 8008c16:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008c18:	697b      	ldr	r3, [r7, #20]
 8008c1a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008c1e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	011b      	lsls	r3, r3, #4
 8008c24:	697a      	ldr	r2, [r7, #20]
 8008c26:	4313      	orrs	r3, r2
 8008c28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	693a      	ldr	r2, [r7, #16]
 8008c2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	697a      	ldr	r2, [r7, #20]
 8008c34:	621a      	str	r2, [r3, #32]
}
 8008c36:	bf00      	nop
 8008c38:	371c      	adds	r7, #28
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c40:	4770      	bx	lr

08008c42 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008c42:	b480      	push	{r7}
 8008c44:	b085      	sub	sp, #20
 8008c46:	af00      	add	r7, sp, #0
 8008c48:	6078      	str	r0, [r7, #4]
 8008c4a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	689b      	ldr	r3, [r3, #8]
 8008c50:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8008c58:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008c5e:	683a      	ldr	r2, [r7, #0]
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	4313      	orrs	r3, r2
 8008c64:	f043 0307 	orr.w	r3, r3, #7
 8008c68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	68fa      	ldr	r2, [r7, #12]
 8008c6e:	609a      	str	r2, [r3, #8]
}
 8008c70:	bf00      	nop
 8008c72:	3714      	adds	r7, #20
 8008c74:	46bd      	mov	sp, r7
 8008c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7a:	4770      	bx	lr

08008c7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008c7c:	b480      	push	{r7}
 8008c7e:	b087      	sub	sp, #28
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	60f8      	str	r0, [r7, #12]
 8008c84:	60b9      	str	r1, [r7, #8]
 8008c86:	607a      	str	r2, [r7, #4]
 8008c88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	689b      	ldr	r3, [r3, #8]
 8008c8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008c90:	697b      	ldr	r3, [r7, #20]
 8008c92:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008c96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	021a      	lsls	r2, r3, #8
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	431a      	orrs	r2, r3
 8008ca0:	68bb      	ldr	r3, [r7, #8]
 8008ca2:	4313      	orrs	r3, r2
 8008ca4:	697a      	ldr	r2, [r7, #20]
 8008ca6:	4313      	orrs	r3, r2
 8008ca8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	697a      	ldr	r2, [r7, #20]
 8008cae:	609a      	str	r2, [r3, #8]
}
 8008cb0:	bf00      	nop
 8008cb2:	371c      	adds	r7, #28
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cba:	4770      	bx	lr

08008cbc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008cbc:	b480      	push	{r7}
 8008cbe:	b087      	sub	sp, #28
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	60f8      	str	r0, [r7, #12]
 8008cc4:	60b9      	str	r1, [r7, #8]
 8008cc6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008cc8:	68bb      	ldr	r3, [r7, #8]
 8008cca:	f003 031f 	and.w	r3, r3, #31
 8008cce:	2201      	movs	r2, #1
 8008cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8008cd4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	6a1a      	ldr	r2, [r3, #32]
 8008cda:	697b      	ldr	r3, [r7, #20]
 8008cdc:	43db      	mvns	r3, r3
 8008cde:	401a      	ands	r2, r3
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	6a1a      	ldr	r2, [r3, #32]
 8008ce8:	68bb      	ldr	r3, [r7, #8]
 8008cea:	f003 031f 	and.w	r3, r3, #31
 8008cee:	6879      	ldr	r1, [r7, #4]
 8008cf0:	fa01 f303 	lsl.w	r3, r1, r3
 8008cf4:	431a      	orrs	r2, r3
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	621a      	str	r2, [r3, #32]
}
 8008cfa:	bf00      	nop
 8008cfc:	371c      	adds	r7, #28
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d04:	4770      	bx	lr
	...

08008d08 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8008d08:	b480      	push	{r7}
 8008d0a:	b083      	sub	sp, #12
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	4a26      	ldr	r2, [pc, #152]	@ (8008dac <TIM_ResetCallback+0xa4>)
 8008d14:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	4a25      	ldr	r2, [pc, #148]	@ (8008db0 <TIM_ResetCallback+0xa8>)
 8008d1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	4a24      	ldr	r2, [pc, #144]	@ (8008db4 <TIM_ResetCallback+0xac>)
 8008d24:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	4a23      	ldr	r2, [pc, #140]	@ (8008db8 <TIM_ResetCallback+0xb0>)
 8008d2c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	4a22      	ldr	r2, [pc, #136]	@ (8008dbc <TIM_ResetCallback+0xb4>)
 8008d34:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	4a21      	ldr	r2, [pc, #132]	@ (8008dc0 <TIM_ResetCallback+0xb8>)
 8008d3c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	4a20      	ldr	r2, [pc, #128]	@ (8008dc4 <TIM_ResetCallback+0xbc>)
 8008d44:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	4a1f      	ldr	r2, [pc, #124]	@ (8008dc8 <TIM_ResetCallback+0xc0>)
 8008d4c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	4a1e      	ldr	r2, [pc, #120]	@ (8008dcc <TIM_ResetCallback+0xc4>)
 8008d54:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	4a1d      	ldr	r2, [pc, #116]	@ (8008dd0 <TIM_ResetCallback+0xc8>)
 8008d5c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	4a1c      	ldr	r2, [pc, #112]	@ (8008dd4 <TIM_ResetCallback+0xcc>)
 8008d64:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	4a1b      	ldr	r2, [pc, #108]	@ (8008dd8 <TIM_ResetCallback+0xd0>)
 8008d6c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	4a1a      	ldr	r2, [pc, #104]	@ (8008ddc <TIM_ResetCallback+0xd4>)
 8008d74:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	4a19      	ldr	r2, [pc, #100]	@ (8008de0 <TIM_ResetCallback+0xd8>)
 8008d7c:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	4a18      	ldr	r2, [pc, #96]	@ (8008de4 <TIM_ResetCallback+0xdc>)
 8008d84:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	4a17      	ldr	r2, [pc, #92]	@ (8008de8 <TIM_ResetCallback+0xe0>)
 8008d8c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	4a16      	ldr	r2, [pc, #88]	@ (8008dec <TIM_ResetCallback+0xe4>)
 8008d94:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	4a15      	ldr	r2, [pc, #84]	@ (8008df0 <TIM_ResetCallback+0xe8>)
 8008d9c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8008da0:	bf00      	nop
 8008da2:	370c      	adds	r7, #12
 8008da4:	46bd      	mov	sp, r7
 8008da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008daa:	4770      	bx	lr
 8008dac:	0800266d 	.word	0x0800266d
 8008db0:	08008055 	.word	0x08008055
 8008db4:	080080cd 	.word	0x080080cd
 8008db8:	080080e1 	.word	0x080080e1
 8008dbc:	0800807d 	.word	0x0800807d
 8008dc0:	08008091 	.word	0x08008091
 8008dc4:	08008069 	.word	0x08008069
 8008dc8:	080080a5 	.word	0x080080a5
 8008dcc:	080080b9 	.word	0x080080b9
 8008dd0:	080080f5 	.word	0x080080f5
 8008dd4:	08009049 	.word	0x08009049
 8008dd8:	0800905d 	.word	0x0800905d
 8008ddc:	08009071 	.word	0x08009071
 8008de0:	08009085 	.word	0x08009085
 8008de4:	08009099 	.word	0x08009099
 8008de8:	080090ad 	.word	0x080090ad
 8008dec:	080090c1 	.word	0x080090c1
 8008df0:	080090d5 	.word	0x080090d5

08008df4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008df4:	b480      	push	{r7}
 8008df6:	b085      	sub	sp, #20
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
 8008dfc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008e04:	2b01      	cmp	r3, #1
 8008e06:	d101      	bne.n	8008e0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008e08:	2302      	movs	r3, #2
 8008e0a:	e074      	b.n	8008ef6 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2201      	movs	r2, #1
 8008e10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2202      	movs	r2, #2
 8008e18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	685b      	ldr	r3, [r3, #4]
 8008e22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	689b      	ldr	r3, [r3, #8]
 8008e2a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	4a34      	ldr	r2, [pc, #208]	@ (8008f04 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008e32:	4293      	cmp	r3, r2
 8008e34:	d009      	beq.n	8008e4a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	4a33      	ldr	r2, [pc, #204]	@ (8008f08 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008e3c:	4293      	cmp	r3, r2
 8008e3e:	d004      	beq.n	8008e4a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	4a31      	ldr	r2, [pc, #196]	@ (8008f0c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008e46:	4293      	cmp	r3, r2
 8008e48:	d108      	bne.n	8008e5c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008e50:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	685b      	ldr	r3, [r3, #4]
 8008e56:	68fa      	ldr	r2, [r7, #12]
 8008e58:	4313      	orrs	r3, r2
 8008e5a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8008e62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e66:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	68fa      	ldr	r2, [r7, #12]
 8008e6e:	4313      	orrs	r3, r2
 8008e70:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	68fa      	ldr	r2, [r7, #12]
 8008e78:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	4a21      	ldr	r2, [pc, #132]	@ (8008f04 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008e80:	4293      	cmp	r3, r2
 8008e82:	d022      	beq.n	8008eca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e8c:	d01d      	beq.n	8008eca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	4a1f      	ldr	r2, [pc, #124]	@ (8008f10 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8008e94:	4293      	cmp	r3, r2
 8008e96:	d018      	beq.n	8008eca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	4a1d      	ldr	r2, [pc, #116]	@ (8008f14 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8008e9e:	4293      	cmp	r3, r2
 8008ea0:	d013      	beq.n	8008eca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	4a1c      	ldr	r2, [pc, #112]	@ (8008f18 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8008ea8:	4293      	cmp	r3, r2
 8008eaa:	d00e      	beq.n	8008eca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	4a15      	ldr	r2, [pc, #84]	@ (8008f08 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008eb2:	4293      	cmp	r3, r2
 8008eb4:	d009      	beq.n	8008eca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	4a18      	ldr	r2, [pc, #96]	@ (8008f1c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8008ebc:	4293      	cmp	r3, r2
 8008ebe:	d004      	beq.n	8008eca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	4a11      	ldr	r2, [pc, #68]	@ (8008f0c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008ec6:	4293      	cmp	r3, r2
 8008ec8:	d10c      	bne.n	8008ee4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008eca:	68bb      	ldr	r3, [r7, #8]
 8008ecc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008ed0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	689b      	ldr	r3, [r3, #8]
 8008ed6:	68ba      	ldr	r2, [r7, #8]
 8008ed8:	4313      	orrs	r3, r2
 8008eda:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	68ba      	ldr	r2, [r7, #8]
 8008ee2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2201      	movs	r2, #1
 8008ee8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2200      	movs	r2, #0
 8008ef0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008ef4:	2300      	movs	r3, #0
}
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	3714      	adds	r7, #20
 8008efa:	46bd      	mov	sp, r7
 8008efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f00:	4770      	bx	lr
 8008f02:	bf00      	nop
 8008f04:	40012c00 	.word	0x40012c00
 8008f08:	40013400 	.word	0x40013400
 8008f0c:	40015000 	.word	0x40015000
 8008f10:	40000400 	.word	0x40000400
 8008f14:	40000800 	.word	0x40000800
 8008f18:	40000c00 	.word	0x40000c00
 8008f1c:	40014000 	.word	0x40014000

08008f20 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008f20:	b480      	push	{r7}
 8008f22:	b085      	sub	sp, #20
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
 8008f28:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008f34:	2b01      	cmp	r3, #1
 8008f36:	d101      	bne.n	8008f3c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008f38:	2302      	movs	r3, #2
 8008f3a:	e078      	b.n	800902e <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2201      	movs	r2, #1
 8008f40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	68db      	ldr	r3, [r3, #12]
 8008f4e:	4313      	orrs	r3, r2
 8008f50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	689b      	ldr	r3, [r3, #8]
 8008f5c:	4313      	orrs	r3, r2
 8008f5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	685b      	ldr	r3, [r3, #4]
 8008f6a:	4313      	orrs	r3, r2
 8008f6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	4313      	orrs	r3, r2
 8008f7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008f82:	683b      	ldr	r3, [r7, #0]
 8008f84:	691b      	ldr	r3, [r3, #16]
 8008f86:	4313      	orrs	r3, r2
 8008f88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	695b      	ldr	r3, [r3, #20]
 8008f94:	4313      	orrs	r3, r2
 8008f96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fa2:	4313      	orrs	r3, r2
 8008fa4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	699b      	ldr	r3, [r3, #24]
 8008fb0:	041b      	lsls	r3, r3, #16
 8008fb2:	4313      	orrs	r3, r2
 8008fb4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	69db      	ldr	r3, [r3, #28]
 8008fc0:	4313      	orrs	r3, r2
 8008fc2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	4a1c      	ldr	r2, [pc, #112]	@ (800903c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8008fca:	4293      	cmp	r3, r2
 8008fcc:	d009      	beq.n	8008fe2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	4a1b      	ldr	r2, [pc, #108]	@ (8009040 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8008fd4:	4293      	cmp	r3, r2
 8008fd6:	d004      	beq.n	8008fe2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	4a19      	ldr	r2, [pc, #100]	@ (8009044 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8008fde:	4293      	cmp	r3, r2
 8008fe0:	d11c      	bne.n	800901c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fec:	051b      	lsls	r3, r3, #20
 8008fee:	4313      	orrs	r3, r2
 8008ff0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	6a1b      	ldr	r3, [r3, #32]
 8008ffc:	4313      	orrs	r3, r2
 8008ffe:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800900a:	4313      	orrs	r3, r2
 800900c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009018:	4313      	orrs	r3, r2
 800901a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	68fa      	ldr	r2, [r7, #12]
 8009022:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2200      	movs	r2, #0
 8009028:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800902c:	2300      	movs	r3, #0
}
 800902e:	4618      	mov	r0, r3
 8009030:	3714      	adds	r7, #20
 8009032:	46bd      	mov	sp, r7
 8009034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009038:	4770      	bx	lr
 800903a:	bf00      	nop
 800903c:	40012c00 	.word	0x40012c00
 8009040:	40013400 	.word	0x40013400
 8009044:	40015000 	.word	0x40015000

08009048 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009048:	b480      	push	{r7}
 800904a:	b083      	sub	sp, #12
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009050:	bf00      	nop
 8009052:	370c      	adds	r7, #12
 8009054:	46bd      	mov	sp, r7
 8009056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905a:	4770      	bx	lr

0800905c <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800905c:	b480      	push	{r7}
 800905e:	b083      	sub	sp, #12
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8009064:	bf00      	nop
 8009066:	370c      	adds	r7, #12
 8009068:	46bd      	mov	sp, r7
 800906a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906e:	4770      	bx	lr

08009070 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009070:	b480      	push	{r7}
 8009072:	b083      	sub	sp, #12
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009078:	bf00      	nop
 800907a:	370c      	adds	r7, #12
 800907c:	46bd      	mov	sp, r7
 800907e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009082:	4770      	bx	lr

08009084 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009084:	b480      	push	{r7}
 8009086:	b083      	sub	sp, #12
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800908c:	bf00      	nop
 800908e:	370c      	adds	r7, #12
 8009090:	46bd      	mov	sp, r7
 8009092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009096:	4770      	bx	lr

08009098 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8009098:	b480      	push	{r7}
 800909a:	b083      	sub	sp, #12
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80090a0:	bf00      	nop
 80090a2:	370c      	adds	r7, #12
 80090a4:	46bd      	mov	sp, r7
 80090a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090aa:	4770      	bx	lr

080090ac <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80090ac:	b480      	push	{r7}
 80090ae:	b083      	sub	sp, #12
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80090b4:	bf00      	nop
 80090b6:	370c      	adds	r7, #12
 80090b8:	46bd      	mov	sp, r7
 80090ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090be:	4770      	bx	lr

080090c0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80090c0:	b480      	push	{r7}
 80090c2:	b083      	sub	sp, #12
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80090c8:	bf00      	nop
 80090ca:	370c      	adds	r7, #12
 80090cc:	46bd      	mov	sp, r7
 80090ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d2:	4770      	bx	lr

080090d4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80090d4:	b480      	push	{r7}
 80090d6:	b083      	sub	sp, #12
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80090dc:	bf00      	nop
 80090de:	370c      	adds	r7, #12
 80090e0:	46bd      	mov	sp, r7
 80090e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e6:	4770      	bx	lr

080090e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b082      	sub	sp, #8
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d101      	bne.n	80090fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80090f6:	2301      	movs	r3, #1
 80090f8:	e050      	b.n	800919c <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009100:	2b00      	cmp	r3, #0
 8009102:	d114      	bne.n	800912e <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2200      	movs	r2, #0
 8009108:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800910c:	6878      	ldr	r0, [r7, #4]
 800910e:	f000 fde5 	bl	8009cdc <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8009118:	2b00      	cmp	r3, #0
 800911a:	d103      	bne.n	8009124 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	4a21      	ldr	r2, [pc, #132]	@ (80091a4 <HAL_UART_Init+0xbc>)
 8009120:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	2224      	movs	r2, #36	@ 0x24
 8009132:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	681a      	ldr	r2, [r3, #0]
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f022 0201 	bic.w	r2, r2, #1
 8009144:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800914a:	2b00      	cmp	r3, #0
 800914c:	d002      	beq.n	8009154 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f001 f912 	bl	800a378 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	f000 fe13 	bl	8009d80 <UART_SetConfig>
 800915a:	4603      	mov	r3, r0
 800915c:	2b01      	cmp	r3, #1
 800915e:	d101      	bne.n	8009164 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 8009160:	2301      	movs	r3, #1
 8009162:	e01b      	b.n	800919c <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	685a      	ldr	r2, [r3, #4]
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009172:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	689a      	ldr	r2, [r3, #8]
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009182:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	681a      	ldr	r2, [r3, #0]
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	f042 0201 	orr.w	r2, r2, #1
 8009192:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009194:	6878      	ldr	r0, [r7, #4]
 8009196:	f001 f991 	bl	800a4bc <UART_CheckIdleState>
 800919a:	4603      	mov	r3, r0
}
 800919c:	4618      	mov	r0, r3
 800919e:	3708      	adds	r7, #8
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bd80      	pop	{r7, pc}
 80091a4:	08003505 	.word	0x08003505

080091a8 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 80091a8:	b480      	push	{r7}
 80091aa:	b087      	sub	sp, #28
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	60f8      	str	r0, [r7, #12]
 80091b0:	460b      	mov	r3, r1
 80091b2:	607a      	str	r2, [r7, #4]
 80091b4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80091b6:	2300      	movs	r3, #0
 80091b8:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d109      	bne.n	80091d4 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80091c6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 80091d0:	2301      	movs	r3, #1
 80091d2:	e09c      	b.n	800930e <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80091da:	2b20      	cmp	r3, #32
 80091dc:	d16c      	bne.n	80092b8 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 80091de:	7afb      	ldrb	r3, [r7, #11]
 80091e0:	2b0c      	cmp	r3, #12
 80091e2:	d85e      	bhi.n	80092a2 <HAL_UART_RegisterCallback+0xfa>
 80091e4:	a201      	add	r2, pc, #4	@ (adr r2, 80091ec <HAL_UART_RegisterCallback+0x44>)
 80091e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091ea:	bf00      	nop
 80091ec:	08009221 	.word	0x08009221
 80091f0:	0800922b 	.word	0x0800922b
 80091f4:	08009235 	.word	0x08009235
 80091f8:	0800923f 	.word	0x0800923f
 80091fc:	08009249 	.word	0x08009249
 8009200:	08009253 	.word	0x08009253
 8009204:	0800925d 	.word	0x0800925d
 8009208:	08009267 	.word	0x08009267
 800920c:	08009271 	.word	0x08009271
 8009210:	0800927b 	.word	0x0800927b
 8009214:	08009285 	.word	0x08009285
 8009218:	0800928f 	.word	0x0800928f
 800921c:	08009299 	.word	0x08009299
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	687a      	ldr	r2, [r7, #4]
 8009224:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8009228:	e070      	b.n	800930c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	687a      	ldr	r2, [r7, #4]
 800922e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8009232:	e06b      	b.n	800930c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	687a      	ldr	r2, [r7, #4]
 8009238:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800923c:	e066      	b.n	800930c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	687a      	ldr	r2, [r7, #4]
 8009242:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8009246:	e061      	b.n	800930c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	687a      	ldr	r2, [r7, #4]
 800924c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8009250:	e05c      	b.n	800930c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	687a      	ldr	r2, [r7, #4]
 8009256:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800925a:	e057      	b.n	800930c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	687a      	ldr	r2, [r7, #4]
 8009260:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8009264:	e052      	b.n	800930c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	687a      	ldr	r2, [r7, #4]
 800926a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800926e:	e04d      	b.n	800930c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	687a      	ldr	r2, [r7, #4]
 8009274:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8009278:	e048      	b.n	800930c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	687a      	ldr	r2, [r7, #4]
 800927e:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8009282:	e043      	b.n	800930c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	687a      	ldr	r2, [r7, #4]
 8009288:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800928c:	e03e      	b.n	800930c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	687a      	ldr	r2, [r7, #4]
 8009292:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8009296:	e039      	b.n	800930c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	687a      	ldr	r2, [r7, #4]
 800929c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 80092a0:	e034      	b.n	800930c <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80092a8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 80092b2:	2301      	movs	r3, #1
 80092b4:	75fb      	strb	r3, [r7, #23]
        break;
 80092b6:	e029      	b.n	800930c <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d11a      	bne.n	80092f8 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 80092c2:	7afb      	ldrb	r3, [r7, #11]
 80092c4:	2b0b      	cmp	r3, #11
 80092c6:	d002      	beq.n	80092ce <HAL_UART_RegisterCallback+0x126>
 80092c8:	2b0c      	cmp	r3, #12
 80092ca:	d005      	beq.n	80092d8 <HAL_UART_RegisterCallback+0x130>
 80092cc:	e009      	b.n	80092e2 <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	687a      	ldr	r2, [r7, #4]
 80092d2:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 80092d6:	e019      	b.n	800930c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	687a      	ldr	r2, [r7, #4]
 80092dc:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 80092e0:	e014      	b.n	800930c <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80092e8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 80092f2:	2301      	movs	r3, #1
 80092f4:	75fb      	strb	r3, [r7, #23]
        break;
 80092f6:	e009      	b.n	800930c <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80092fe:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 8009308:	2301      	movs	r3, #1
 800930a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800930c:	7dfb      	ldrb	r3, [r7, #23]
}
 800930e:	4618      	mov	r0, r3
 8009310:	371c      	adds	r7, #28
 8009312:	46bd      	mov	sp, r7
 8009314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009318:	4770      	bx	lr
 800931a:	bf00      	nop

0800931c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b08a      	sub	sp, #40	@ 0x28
 8009320:	af00      	add	r7, sp, #0
 8009322:	60f8      	str	r0, [r7, #12]
 8009324:	60b9      	str	r1, [r7, #8]
 8009326:	4613      	mov	r3, r2
 8009328:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009330:	2b20      	cmp	r3, #32
 8009332:	d167      	bne.n	8009404 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8009334:	68bb      	ldr	r3, [r7, #8]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d002      	beq.n	8009340 <HAL_UART_Transmit_DMA+0x24>
 800933a:	88fb      	ldrh	r3, [r7, #6]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d101      	bne.n	8009344 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8009340:	2301      	movs	r3, #1
 8009342:	e060      	b.n	8009406 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	68ba      	ldr	r2, [r7, #8]
 8009348:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	88fa      	ldrh	r2, [r7, #6]
 800934e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	88fa      	ldrh	r2, [r7, #6]
 8009356:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	2200      	movs	r2, #0
 800935e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	2221      	movs	r2, #33	@ 0x21
 8009366:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800936e:	2b00      	cmp	r3, #0
 8009370:	d028      	beq.n	80093c4 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009376:	4a26      	ldr	r2, [pc, #152]	@ (8009410 <HAL_UART_Transmit_DMA+0xf4>)
 8009378:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800937e:	4a25      	ldr	r2, [pc, #148]	@ (8009414 <HAL_UART_Transmit_DMA+0xf8>)
 8009380:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009386:	4a24      	ldr	r2, [pc, #144]	@ (8009418 <HAL_UART_Transmit_DMA+0xfc>)
 8009388:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800938e:	2200      	movs	r2, #0
 8009390:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800939a:	4619      	mov	r1, r3
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	3328      	adds	r3, #40	@ 0x28
 80093a2:	461a      	mov	r2, r3
 80093a4:	88fb      	ldrh	r3, [r7, #6]
 80093a6:	f7fc f833 	bl	8005410 <HAL_DMA_Start_IT>
 80093aa:	4603      	mov	r3, r0
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d009      	beq.n	80093c4 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	2210      	movs	r2, #16
 80093b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	2220      	movs	r2, #32
 80093bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 80093c0:	2301      	movs	r3, #1
 80093c2:	e020      	b.n	8009406 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	2240      	movs	r2, #64	@ 0x40
 80093ca:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	3308      	adds	r3, #8
 80093d2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093d4:	697b      	ldr	r3, [r7, #20]
 80093d6:	e853 3f00 	ldrex	r3, [r3]
 80093da:	613b      	str	r3, [r7, #16]
   return(result);
 80093dc:	693b      	ldr	r3, [r7, #16]
 80093de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80093e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	3308      	adds	r3, #8
 80093ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80093ec:	623a      	str	r2, [r7, #32]
 80093ee:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093f0:	69f9      	ldr	r1, [r7, #28]
 80093f2:	6a3a      	ldr	r2, [r7, #32]
 80093f4:	e841 2300 	strex	r3, r2, [r1]
 80093f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80093fa:	69bb      	ldr	r3, [r7, #24]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d1e5      	bne.n	80093cc <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8009400:	2300      	movs	r3, #0
 8009402:	e000      	b.n	8009406 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8009404:	2302      	movs	r3, #2
  }
}
 8009406:	4618      	mov	r0, r3
 8009408:	3728      	adds	r7, #40	@ 0x28
 800940a:	46bd      	mov	sp, r7
 800940c:	bd80      	pop	{r7, pc}
 800940e:	bf00      	nop
 8009410:	0800a987 	.word	0x0800a987
 8009414:	0800aa25 	.word	0x0800aa25
 8009418:	0800abbf 	.word	0x0800abbf

0800941c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b08a      	sub	sp, #40	@ 0x28
 8009420:	af00      	add	r7, sp, #0
 8009422:	60f8      	str	r0, [r7, #12]
 8009424:	60b9      	str	r1, [r7, #8]
 8009426:	4613      	mov	r3, r2
 8009428:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009430:	2b20      	cmp	r3, #32
 8009432:	d137      	bne.n	80094a4 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8009434:	68bb      	ldr	r3, [r7, #8]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d002      	beq.n	8009440 <HAL_UART_Receive_DMA+0x24>
 800943a:	88fb      	ldrh	r3, [r7, #6]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d101      	bne.n	8009444 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8009440:	2301      	movs	r3, #1
 8009442:	e030      	b.n	80094a6 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	2200      	movs	r2, #0
 8009448:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	4a18      	ldr	r2, [pc, #96]	@ (80094b0 <HAL_UART_Receive_DMA+0x94>)
 8009450:	4293      	cmp	r3, r2
 8009452:	d01f      	beq.n	8009494 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	685b      	ldr	r3, [r3, #4]
 800945a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800945e:	2b00      	cmp	r3, #0
 8009460:	d018      	beq.n	8009494 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009468:	697b      	ldr	r3, [r7, #20]
 800946a:	e853 3f00 	ldrex	r3, [r3]
 800946e:	613b      	str	r3, [r7, #16]
   return(result);
 8009470:	693b      	ldr	r3, [r7, #16]
 8009472:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009476:	627b      	str	r3, [r7, #36]	@ 0x24
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	461a      	mov	r2, r3
 800947e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009480:	623b      	str	r3, [r7, #32]
 8009482:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009484:	69f9      	ldr	r1, [r7, #28]
 8009486:	6a3a      	ldr	r2, [r7, #32]
 8009488:	e841 2300 	strex	r3, r2, [r1]
 800948c:	61bb      	str	r3, [r7, #24]
   return(result);
 800948e:	69bb      	ldr	r3, [r7, #24]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d1e6      	bne.n	8009462 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009494:	88fb      	ldrh	r3, [r7, #6]
 8009496:	461a      	mov	r2, r3
 8009498:	68b9      	ldr	r1, [r7, #8]
 800949a:	68f8      	ldr	r0, [r7, #12]
 800949c:	f001 f926 	bl	800a6ec <UART_Start_Receive_DMA>
 80094a0:	4603      	mov	r3, r0
 80094a2:	e000      	b.n	80094a6 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80094a4:	2302      	movs	r3, #2
  }
}
 80094a6:	4618      	mov	r0, r3
 80094a8:	3728      	adds	r7, #40	@ 0x28
 80094aa:	46bd      	mov	sp, r7
 80094ac:	bd80      	pop	{r7, pc}
 80094ae:	bf00      	nop
 80094b0:	40008000 	.word	0x40008000

080094b4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b0ba      	sub	sp, #232	@ 0xe8
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	69db      	ldr	r3, [r3, #28]
 80094c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	689b      	ldr	r3, [r3, #8]
 80094d6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80094da:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80094de:	f640 030f 	movw	r3, #2063	@ 0x80f
 80094e2:	4013      	ands	r3, r2
 80094e4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80094e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d11b      	bne.n	8009528 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80094f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80094f4:	f003 0320 	and.w	r3, r3, #32
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d015      	beq.n	8009528 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80094fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009500:	f003 0320 	and.w	r3, r3, #32
 8009504:	2b00      	cmp	r3, #0
 8009506:	d105      	bne.n	8009514 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009508:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800950c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009510:	2b00      	cmp	r3, #0
 8009512:	d009      	beq.n	8009528 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009518:	2b00      	cmp	r3, #0
 800951a:	f000 8312 	beq.w	8009b42 <HAL_UART_IRQHandler+0x68e>
      {
        huart->RxISR(huart);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	4798      	blx	r3
      }
      return;
 8009526:	e30c      	b.n	8009b42 <HAL_UART_IRQHandler+0x68e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009528:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800952c:	2b00      	cmp	r3, #0
 800952e:	f000 8129 	beq.w	8009784 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009532:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009536:	4b90      	ldr	r3, [pc, #576]	@ (8009778 <HAL_UART_IRQHandler+0x2c4>)
 8009538:	4013      	ands	r3, r2
 800953a:	2b00      	cmp	r3, #0
 800953c:	d106      	bne.n	800954c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800953e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8009542:	4b8e      	ldr	r3, [pc, #568]	@ (800977c <HAL_UART_IRQHandler+0x2c8>)
 8009544:	4013      	ands	r3, r2
 8009546:	2b00      	cmp	r3, #0
 8009548:	f000 811c 	beq.w	8009784 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800954c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009550:	f003 0301 	and.w	r3, r3, #1
 8009554:	2b00      	cmp	r3, #0
 8009556:	d011      	beq.n	800957c <HAL_UART_IRQHandler+0xc8>
 8009558:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800955c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009560:	2b00      	cmp	r3, #0
 8009562:	d00b      	beq.n	800957c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	2201      	movs	r2, #1
 800956a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009572:	f043 0201 	orr.w	r2, r3, #1
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800957c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009580:	f003 0302 	and.w	r3, r3, #2
 8009584:	2b00      	cmp	r3, #0
 8009586:	d011      	beq.n	80095ac <HAL_UART_IRQHandler+0xf8>
 8009588:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800958c:	f003 0301 	and.w	r3, r3, #1
 8009590:	2b00      	cmp	r3, #0
 8009592:	d00b      	beq.n	80095ac <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	2202      	movs	r2, #2
 800959a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80095a2:	f043 0204 	orr.w	r2, r3, #4
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80095ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80095b0:	f003 0304 	and.w	r3, r3, #4
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d011      	beq.n	80095dc <HAL_UART_IRQHandler+0x128>
 80095b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80095bc:	f003 0301 	and.w	r3, r3, #1
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d00b      	beq.n	80095dc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	2204      	movs	r2, #4
 80095ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80095d2:	f043 0202 	orr.w	r2, r3, #2
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80095dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80095e0:	f003 0308 	and.w	r3, r3, #8
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d017      	beq.n	8009618 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80095e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80095ec:	f003 0320 	and.w	r3, r3, #32
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d105      	bne.n	8009600 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80095f4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80095f8:	4b5f      	ldr	r3, [pc, #380]	@ (8009778 <HAL_UART_IRQHandler+0x2c4>)
 80095fa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d00b      	beq.n	8009618 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	2208      	movs	r2, #8
 8009606:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800960e:	f043 0208 	orr.w	r2, r3, #8
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009618:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800961c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009620:	2b00      	cmp	r3, #0
 8009622:	d012      	beq.n	800964a <HAL_UART_IRQHandler+0x196>
 8009624:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009628:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800962c:	2b00      	cmp	r3, #0
 800962e:	d00c      	beq.n	800964a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009638:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009640:	f043 0220 	orr.w	r2, r3, #32
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009650:	2b00      	cmp	r3, #0
 8009652:	f000 8278 	beq.w	8009b46 <HAL_UART_IRQHandler+0x692>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009656:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800965a:	f003 0320 	and.w	r3, r3, #32
 800965e:	2b00      	cmp	r3, #0
 8009660:	d013      	beq.n	800968a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009662:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009666:	f003 0320 	and.w	r3, r3, #32
 800966a:	2b00      	cmp	r3, #0
 800966c:	d105      	bne.n	800967a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800966e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009672:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009676:	2b00      	cmp	r3, #0
 8009678:	d007      	beq.n	800968a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800967e:	2b00      	cmp	r3, #0
 8009680:	d003      	beq.n	800968a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009686:	6878      	ldr	r0, [r7, #4]
 8009688:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009690:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	689b      	ldr	r3, [r3, #8]
 800969a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800969e:	2b40      	cmp	r3, #64	@ 0x40
 80096a0:	d005      	beq.n	80096ae <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80096a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80096a6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d058      	beq.n	8009760 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80096ae:	6878      	ldr	r0, [r7, #4]
 80096b0:	f001 f903 	bl	800a8ba <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	689b      	ldr	r3, [r3, #8]
 80096ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80096be:	2b40      	cmp	r3, #64	@ 0x40
 80096c0:	d148      	bne.n	8009754 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	3308      	adds	r3, #8
 80096c8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80096d0:	e853 3f00 	ldrex	r3, [r3]
 80096d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80096d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80096dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80096e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	3308      	adds	r3, #8
 80096ea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80096ee:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80096f2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096f6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80096fa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80096fe:	e841 2300 	strex	r3, r2, [r1]
 8009702:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009706:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800970a:	2b00      	cmp	r3, #0
 800970c:	d1d9      	bne.n	80096c2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009714:	2b00      	cmp	r3, #0
 8009716:	d017      	beq.n	8009748 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800971e:	4a18      	ldr	r2, [pc, #96]	@ (8009780 <HAL_UART_IRQHandler+0x2cc>)
 8009720:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009728:	4618      	mov	r0, r3
 800972a:	f7fb ff45 	bl	80055b8 <HAL_DMA_Abort_IT>
 800972e:	4603      	mov	r3, r0
 8009730:	2b00      	cmp	r3, #0
 8009732:	d01f      	beq.n	8009774 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800973a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800973c:	687a      	ldr	r2, [r7, #4]
 800973e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8009742:	4610      	mov	r0, r2
 8009744:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009746:	e015      	b.n	8009774 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800974e:	6878      	ldr	r0, [r7, #4]
 8009750:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009752:	e00f      	b.n	8009774 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800975a:	6878      	ldr	r0, [r7, #4]
 800975c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800975e:	e009      	b.n	8009774 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009766:	6878      	ldr	r0, [r7, #4]
 8009768:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	2200      	movs	r2, #0
 800976e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8009772:	e1e8      	b.n	8009b46 <HAL_UART_IRQHandler+0x692>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009774:	bf00      	nop
    return;
 8009776:	e1e6      	b.n	8009b46 <HAL_UART_IRQHandler+0x692>
 8009778:	10000001 	.word	0x10000001
 800977c:	04000120 	.word	0x04000120
 8009780:	0800ac43 	.word	0x0800ac43

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009788:	2b01      	cmp	r3, #1
 800978a:	f040 8176 	bne.w	8009a7a <HAL_UART_IRQHandler+0x5c6>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800978e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009792:	f003 0310 	and.w	r3, r3, #16
 8009796:	2b00      	cmp	r3, #0
 8009798:	f000 816f 	beq.w	8009a7a <HAL_UART_IRQHandler+0x5c6>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800979c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80097a0:	f003 0310 	and.w	r3, r3, #16
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	f000 8168 	beq.w	8009a7a <HAL_UART_IRQHandler+0x5c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	2210      	movs	r2, #16
 80097b0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	689b      	ldr	r3, [r3, #8]
 80097b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80097bc:	2b40      	cmp	r3, #64	@ 0x40
 80097be:	f040 80dc 	bne.w	800997a <HAL_UART_IRQHandler+0x4c6>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	685b      	ldr	r3, [r3, #4]
 80097cc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80097d0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	f000 80b1 	beq.w	800993c <HAL_UART_IRQHandler+0x488>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80097e0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80097e4:	429a      	cmp	r2, r3
 80097e6:	f080 80a9 	bcs.w	800993c <HAL_UART_IRQHandler+0x488>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80097f0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	f003 0320 	and.w	r3, r3, #32
 8009802:	2b00      	cmp	r3, #0
 8009804:	f040 8087 	bne.w	8009916 <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009810:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009814:	e853 3f00 	ldrex	r3, [r3]
 8009818:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800981c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009820:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009824:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	461a      	mov	r2, r3
 800982e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009832:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009836:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800983a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800983e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009842:	e841 2300 	strex	r3, r2, [r1]
 8009846:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800984a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800984e:	2b00      	cmp	r3, #0
 8009850:	d1da      	bne.n	8009808 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	3308      	adds	r3, #8
 8009858:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800985a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800985c:	e853 3f00 	ldrex	r3, [r3]
 8009860:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009862:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009864:	f023 0301 	bic.w	r3, r3, #1
 8009868:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	3308      	adds	r3, #8
 8009872:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009876:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800987a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800987c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800987e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009882:	e841 2300 	strex	r3, r2, [r1]
 8009886:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009888:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800988a:	2b00      	cmp	r3, #0
 800988c:	d1e1      	bne.n	8009852 <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	3308      	adds	r3, #8
 8009894:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009896:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009898:	e853 3f00 	ldrex	r3, [r3]
 800989c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800989e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80098a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80098a4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	3308      	adds	r3, #8
 80098ae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80098b2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80098b4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098b6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80098b8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80098ba:	e841 2300 	strex	r3, r2, [r1]
 80098be:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80098c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d1e3      	bne.n	800988e <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	2220      	movs	r2, #32
 80098ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	2200      	movs	r2, #0
 80098d2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80098dc:	e853 3f00 	ldrex	r3, [r3]
 80098e0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80098e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80098e4:	f023 0310 	bic.w	r3, r3, #16
 80098e8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	461a      	mov	r2, r3
 80098f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80098f6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80098f8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098fa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80098fc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80098fe:	e841 2300 	strex	r3, r2, [r1]
 8009902:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009904:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009906:	2b00      	cmp	r3, #0
 8009908:	d1e4      	bne.n	80098d4 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009910:	4618      	mov	r0, r3
 8009912:	f7fb fdf8 	bl	8005506 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	2202      	movs	r2, #2
 800991a:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009922:	687a      	ldr	r2, [r7, #4]
 8009924:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 8009928:	687a      	ldr	r2, [r7, #4]
 800992a:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 800992e:	b292      	uxth	r2, r2
 8009930:	1a8a      	subs	r2, r1, r2
 8009932:	b292      	uxth	r2, r2
 8009934:	4611      	mov	r1, r2
 8009936:	6878      	ldr	r0, [r7, #4]
 8009938:	4798      	blx	r3
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800993a:	e106      	b.n	8009b4a <HAL_UART_IRQHandler+0x696>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009942:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009946:	429a      	cmp	r2, r3
 8009948:	f040 80ff 	bne.w	8009b4a <HAL_UART_IRQHandler+0x696>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	f003 0320 	and.w	r3, r3, #32
 800995a:	2b20      	cmp	r3, #32
 800995c:	f040 80f5 	bne.w	8009b4a <HAL_UART_IRQHandler+0x696>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	2202      	movs	r2, #2
 8009964:	671a      	str	r2, [r3, #112]	@ 0x70
            huart->RxEventCallback(huart, huart->RxXferSize);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800996c:	687a      	ldr	r2, [r7, #4]
 800996e:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8009972:	4611      	mov	r1, r2
 8009974:	6878      	ldr	r0, [r7, #4]
 8009976:	4798      	blx	r3
      return;
 8009978:	e0e7      	b.n	8009b4a <HAL_UART_IRQHandler+0x696>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009986:	b29b      	uxth	r3, r3
 8009988:	1ad3      	subs	r3, r2, r3
 800998a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009994:	b29b      	uxth	r3, r3
 8009996:	2b00      	cmp	r3, #0
 8009998:	f000 80d9 	beq.w	8009b4e <HAL_UART_IRQHandler+0x69a>
          && (nb_rx_data > 0U))
 800999c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	f000 80d4 	beq.w	8009b4e <HAL_UART_IRQHandler+0x69a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099ae:	e853 3f00 	ldrex	r3, [r3]
 80099b2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80099b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099b6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80099ba:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	461a      	mov	r2, r3
 80099c4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80099c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80099ca:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099cc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80099ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80099d0:	e841 2300 	strex	r3, r2, [r1]
 80099d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80099d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d1e4      	bne.n	80099a6 <HAL_UART_IRQHandler+0x4f2>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	3308      	adds	r3, #8
 80099e2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099e6:	e853 3f00 	ldrex	r3, [r3]
 80099ea:	623b      	str	r3, [r7, #32]
   return(result);
 80099ec:	6a3b      	ldr	r3, [r7, #32]
 80099ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80099f2:	f023 0301 	bic.w	r3, r3, #1
 80099f6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	3308      	adds	r3, #8
 8009a00:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009a04:	633a      	str	r2, [r7, #48]	@ 0x30
 8009a06:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a08:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009a0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009a0c:	e841 2300 	strex	r3, r2, [r1]
 8009a10:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009a12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d1e1      	bne.n	80099dc <HAL_UART_IRQHandler+0x528>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	2220      	movs	r2, #32
 8009a1c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	2200      	movs	r2, #0
 8009a24:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	2200      	movs	r2, #0
 8009a2a:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a32:	693b      	ldr	r3, [r7, #16]
 8009a34:	e853 3f00 	ldrex	r3, [r3]
 8009a38:	60fb      	str	r3, [r7, #12]
   return(result);
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	f023 0310 	bic.w	r3, r3, #16
 8009a40:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	461a      	mov	r2, r3
 8009a4a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009a4e:	61fb      	str	r3, [r7, #28]
 8009a50:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a52:	69b9      	ldr	r1, [r7, #24]
 8009a54:	69fa      	ldr	r2, [r7, #28]
 8009a56:	e841 2300 	strex	r3, r2, [r1]
 8009a5a:	617b      	str	r3, [r7, #20]
   return(result);
 8009a5c:	697b      	ldr	r3, [r7, #20]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d1e4      	bne.n	8009a2c <HAL_UART_IRQHandler+0x578>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	2202      	movs	r2, #2
 8009a66:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009a6e:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 8009a72:	4611      	mov	r1, r2
 8009a74:	6878      	ldr	r0, [r7, #4]
 8009a76:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009a78:	e069      	b.n	8009b4e <HAL_UART_IRQHandler+0x69a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009a7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a7e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d010      	beq.n	8009aa8 <HAL_UART_IRQHandler+0x5f4>
 8009a86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009a8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d00a      	beq.n	8009aa8 <HAL_UART_IRQHandler+0x5f4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009a9a:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009aa2:	6878      	ldr	r0, [r7, #4]
 8009aa4:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009aa6:	e055      	b.n	8009b54 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009aa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009aac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d014      	beq.n	8009ade <HAL_UART_IRQHandler+0x62a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009ab4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009ab8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d105      	bne.n	8009acc <HAL_UART_IRQHandler+0x618>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009ac0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009ac4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d008      	beq.n	8009ade <HAL_UART_IRQHandler+0x62a>
  {
    if (huart->TxISR != NULL)
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d03e      	beq.n	8009b52 <HAL_UART_IRQHandler+0x69e>
    {
      huart->TxISR(huart);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009ad8:	6878      	ldr	r0, [r7, #4]
 8009ada:	4798      	blx	r3
    }
    return;
 8009adc:	e039      	b.n	8009b52 <HAL_UART_IRQHandler+0x69e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009ade:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009ae2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d009      	beq.n	8009afe <HAL_UART_IRQHandler+0x64a>
 8009aea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009aee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d003      	beq.n	8009afe <HAL_UART_IRQHandler+0x64a>
  {
    UART_EndTransmit_IT(huart);
 8009af6:	6878      	ldr	r0, [r7, #4]
 8009af8:	f001 f8b7 	bl	800ac6a <UART_EndTransmit_IT>
    return;
 8009afc:	e02a      	b.n	8009b54 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009afe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b02:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d00b      	beq.n	8009b22 <HAL_UART_IRQHandler+0x66e>
 8009b0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b0e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d005      	beq.n	8009b22 <HAL_UART_IRQHandler+0x66e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8009b1c:	6878      	ldr	r0, [r7, #4]
 8009b1e:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009b20:	e018      	b.n	8009b54 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009b22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b26:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d012      	beq.n	8009b54 <HAL_UART_IRQHandler+0x6a0>
 8009b2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	da0e      	bge.n	8009b54 <HAL_UART_IRQHandler+0x6a0>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8009b3c:	6878      	ldr	r0, [r7, #4]
 8009b3e:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009b40:	e008      	b.n	8009b54 <HAL_UART_IRQHandler+0x6a0>
      return;
 8009b42:	bf00      	nop
 8009b44:	e006      	b.n	8009b54 <HAL_UART_IRQHandler+0x6a0>
    return;
 8009b46:	bf00      	nop
 8009b48:	e004      	b.n	8009b54 <HAL_UART_IRQHandler+0x6a0>
      return;
 8009b4a:	bf00      	nop
 8009b4c:	e002      	b.n	8009b54 <HAL_UART_IRQHandler+0x6a0>
      return;
 8009b4e:	bf00      	nop
 8009b50:	e000      	b.n	8009b54 <HAL_UART_IRQHandler+0x6a0>
    return;
 8009b52:	bf00      	nop
  }
}
 8009b54:	37e8      	adds	r7, #232	@ 0xe8
 8009b56:	46bd      	mov	sp, r7
 8009b58:	bd80      	pop	{r7, pc}
 8009b5a:	bf00      	nop

08009b5c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009b5c:	b480      	push	{r7}
 8009b5e:	b083      	sub	sp, #12
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009b64:	bf00      	nop
 8009b66:	370c      	adds	r7, #12
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6e:	4770      	bx	lr

08009b70 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009b70:	b480      	push	{r7}
 8009b72:	b083      	sub	sp, #12
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009b78:	bf00      	nop
 8009b7a:	370c      	adds	r7, #12
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b82:	4770      	bx	lr

08009b84 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009b84:	b480      	push	{r7}
 8009b86:	b083      	sub	sp, #12
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8009b8c:	bf00      	nop
 8009b8e:	370c      	adds	r7, #12
 8009b90:	46bd      	mov	sp, r7
 8009b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b96:	4770      	bx	lr

08009b98 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009b98:	b480      	push	{r7}
 8009b9a:	b083      	sub	sp, #12
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009ba0:	bf00      	nop
 8009ba2:	370c      	adds	r7, #12
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009baa:	4770      	bx	lr

08009bac <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009bac:	b480      	push	{r7}
 8009bae:	b083      	sub	sp, #12
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009bb4:	bf00      	nop
 8009bb6:	370c      	adds	r7, #12
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bbe:	4770      	bx	lr

08009bc0 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8009bc0:	b480      	push	{r7}
 8009bc2:	b083      	sub	sp, #12
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8009bc8:	bf00      	nop
 8009bca:	370c      	adds	r7, #12
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd2:	4770      	bx	lr

08009bd4 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8009bd4:	b480      	push	{r7}
 8009bd6:	b083      	sub	sp, #12
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8009bdc:	bf00      	nop
 8009bde:	370c      	adds	r7, #12
 8009be0:	46bd      	mov	sp, r7
 8009be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be6:	4770      	bx	lr

08009be8 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8009be8:	b480      	push	{r7}
 8009bea:	b083      	sub	sp, #12
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8009bf0:	bf00      	nop
 8009bf2:	370c      	adds	r7, #12
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfa:	4770      	bx	lr

08009bfc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009bfc:	b480      	push	{r7}
 8009bfe:	b083      	sub	sp, #12
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
 8009c04:	460b      	mov	r3, r1
 8009c06:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009c08:	bf00      	nop
 8009c0a:	370c      	adds	r7, #12
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c12:	4770      	bx	lr

08009c14 <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 8009c14:	b480      	push	{r7}
 8009c16:	b083      	sub	sp, #12
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
 8009c1c:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	4a09      	ldr	r2, [pc, #36]	@ (8009c48 <HAL_UART_ReceiverTimeout_Config+0x34>)
 8009c24:	4293      	cmp	r3, r2
 8009c26:	d009      	beq.n	8009c3c <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	695b      	ldr	r3, [r3, #20]
 8009c2e:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	683a      	ldr	r2, [r7, #0]
 8009c38:	430a      	orrs	r2, r1
 8009c3a:	615a      	str	r2, [r3, #20]
  }
}
 8009c3c:	bf00      	nop
 8009c3e:	370c      	adds	r7, #12
 8009c40:	46bd      	mov	sp, r7
 8009c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c46:	4770      	bx	lr
 8009c48:	40008000 	.word	0x40008000

08009c4c <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 8009c4c:	b480      	push	{r7}
 8009c4e:	b083      	sub	sp, #12
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	4a18      	ldr	r2, [pc, #96]	@ (8009cbc <HAL_UART_EnableReceiverTimeout+0x70>)
 8009c5a:	4293      	cmp	r3, r2
 8009c5c:	d027      	beq.n	8009cae <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c64:	2b20      	cmp	r3, #32
 8009c66:	d120      	bne.n	8009caa <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009c6e:	2b01      	cmp	r3, #1
 8009c70:	d101      	bne.n	8009c76 <HAL_UART_EnableReceiverTimeout+0x2a>
 8009c72:	2302      	movs	r3, #2
 8009c74:	e01c      	b.n	8009cb0 <HAL_UART_EnableReceiverTimeout+0x64>
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	2201      	movs	r2, #1
 8009c7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	2224      	movs	r2, #36	@ 0x24
 8009c82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	685a      	ldr	r2, [r3, #4]
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8009c94:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	2220      	movs	r2, #32
 8009c9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	e002      	b.n	8009cb0 <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 8009caa:	2302      	movs	r3, #2
 8009cac:	e000      	b.n	8009cb0 <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 8009cae:	2301      	movs	r3, #1
  }
}
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	370c      	adds	r7, #12
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cba:	4770      	bx	lr
 8009cbc:	40008000 	.word	0x40008000

08009cc0 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 8009cc0:	b480      	push	{r7}
 8009cc2:	b083      	sub	sp, #12
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 8009cce:	4618      	mov	r0, r3
 8009cd0:	370c      	adds	r7, #12
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd8:	4770      	bx	lr
	...

08009cdc <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8009cdc:	b480      	push	{r7}
 8009cde:	b083      	sub	sp, #12
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	4a1a      	ldr	r2, [pc, #104]	@ (8009d50 <UART_InitCallbacksToDefault+0x74>)
 8009ce8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	4a19      	ldr	r2, [pc, #100]	@ (8009d54 <UART_InitCallbacksToDefault+0x78>)
 8009cf0:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	4a18      	ldr	r2, [pc, #96]	@ (8009d58 <UART_InitCallbacksToDefault+0x7c>)
 8009cf8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	4a17      	ldr	r2, [pc, #92]	@ (8009d5c <UART_InitCallbacksToDefault+0x80>)
 8009d00:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	4a16      	ldr	r2, [pc, #88]	@ (8009d60 <UART_InitCallbacksToDefault+0x84>)
 8009d08:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	4a15      	ldr	r2, [pc, #84]	@ (8009d64 <UART_InitCallbacksToDefault+0x88>)
 8009d10:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	4a14      	ldr	r2, [pc, #80]	@ (8009d68 <UART_InitCallbacksToDefault+0x8c>)
 8009d18:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	4a13      	ldr	r2, [pc, #76]	@ (8009d6c <UART_InitCallbacksToDefault+0x90>)
 8009d20:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	4a12      	ldr	r2, [pc, #72]	@ (8009d70 <UART_InitCallbacksToDefault+0x94>)
 8009d28:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	4a11      	ldr	r2, [pc, #68]	@ (8009d74 <UART_InitCallbacksToDefault+0x98>)
 8009d30:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	4a10      	ldr	r2, [pc, #64]	@ (8009d78 <UART_InitCallbacksToDefault+0x9c>)
 8009d38:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	4a0f      	ldr	r2, [pc, #60]	@ (8009d7c <UART_InitCallbacksToDefault+0xa0>)
 8009d40:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 8009d44:	bf00      	nop
 8009d46:	370c      	adds	r7, #12
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4e:	4770      	bx	lr
 8009d50:	08009b71 	.word	0x08009b71
 8009d54:	08009b5d 	.word	0x08009b5d
 8009d58:	08009b99 	.word	0x08009b99
 8009d5c:	08009b85 	.word	0x08009b85
 8009d60:	08009bad 	.word	0x08009bad
 8009d64:	08009bc1 	.word	0x08009bc1
 8009d68:	08009bd5 	.word	0x08009bd5
 8009d6c:	08009be9 	.word	0x08009be9
 8009d70:	0800acc5 	.word	0x0800acc5
 8009d74:	0800acd9 	.word	0x0800acd9
 8009d78:	0800aced 	.word	0x0800aced
 8009d7c:	08009bfd 	.word	0x08009bfd

08009d80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009d80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009d84:	b08c      	sub	sp, #48	@ 0x30
 8009d86:	af00      	add	r7, sp, #0
 8009d88:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009d90:	697b      	ldr	r3, [r7, #20]
 8009d92:	689a      	ldr	r2, [r3, #8]
 8009d94:	697b      	ldr	r3, [r7, #20]
 8009d96:	691b      	ldr	r3, [r3, #16]
 8009d98:	431a      	orrs	r2, r3
 8009d9a:	697b      	ldr	r3, [r7, #20]
 8009d9c:	695b      	ldr	r3, [r3, #20]
 8009d9e:	431a      	orrs	r2, r3
 8009da0:	697b      	ldr	r3, [r7, #20]
 8009da2:	69db      	ldr	r3, [r3, #28]
 8009da4:	4313      	orrs	r3, r2
 8009da6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009da8:	697b      	ldr	r3, [r7, #20]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	681a      	ldr	r2, [r3, #0]
 8009dae:	4baa      	ldr	r3, [pc, #680]	@ (800a058 <UART_SetConfig+0x2d8>)
 8009db0:	4013      	ands	r3, r2
 8009db2:	697a      	ldr	r2, [r7, #20]
 8009db4:	6812      	ldr	r2, [r2, #0]
 8009db6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009db8:	430b      	orrs	r3, r1
 8009dba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009dbc:	697b      	ldr	r3, [r7, #20]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	685b      	ldr	r3, [r3, #4]
 8009dc2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009dc6:	697b      	ldr	r3, [r7, #20]
 8009dc8:	68da      	ldr	r2, [r3, #12]
 8009dca:	697b      	ldr	r3, [r7, #20]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	430a      	orrs	r2, r1
 8009dd0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009dd2:	697b      	ldr	r3, [r7, #20]
 8009dd4:	699b      	ldr	r3, [r3, #24]
 8009dd6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009dd8:	697b      	ldr	r3, [r7, #20]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	4a9f      	ldr	r2, [pc, #636]	@ (800a05c <UART_SetConfig+0x2dc>)
 8009dde:	4293      	cmp	r3, r2
 8009de0:	d004      	beq.n	8009dec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009de2:	697b      	ldr	r3, [r7, #20]
 8009de4:	6a1b      	ldr	r3, [r3, #32]
 8009de6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009de8:	4313      	orrs	r3, r2
 8009dea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009dec:	697b      	ldr	r3, [r7, #20]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	689b      	ldr	r3, [r3, #8]
 8009df2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8009df6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8009dfa:	697a      	ldr	r2, [r7, #20]
 8009dfc:	6812      	ldr	r2, [r2, #0]
 8009dfe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009e00:	430b      	orrs	r3, r1
 8009e02:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009e04:	697b      	ldr	r3, [r7, #20]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e0a:	f023 010f 	bic.w	r1, r3, #15
 8009e0e:	697b      	ldr	r3, [r7, #20]
 8009e10:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009e12:	697b      	ldr	r3, [r7, #20]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	430a      	orrs	r2, r1
 8009e18:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009e1a:	697b      	ldr	r3, [r7, #20]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	4a90      	ldr	r2, [pc, #576]	@ (800a060 <UART_SetConfig+0x2e0>)
 8009e20:	4293      	cmp	r3, r2
 8009e22:	d125      	bne.n	8009e70 <UART_SetConfig+0xf0>
 8009e24:	4b8f      	ldr	r3, [pc, #572]	@ (800a064 <UART_SetConfig+0x2e4>)
 8009e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009e2a:	f003 0303 	and.w	r3, r3, #3
 8009e2e:	2b03      	cmp	r3, #3
 8009e30:	d81a      	bhi.n	8009e68 <UART_SetConfig+0xe8>
 8009e32:	a201      	add	r2, pc, #4	@ (adr r2, 8009e38 <UART_SetConfig+0xb8>)
 8009e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e38:	08009e49 	.word	0x08009e49
 8009e3c:	08009e59 	.word	0x08009e59
 8009e40:	08009e51 	.word	0x08009e51
 8009e44:	08009e61 	.word	0x08009e61
 8009e48:	2301      	movs	r3, #1
 8009e4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e4e:	e116      	b.n	800a07e <UART_SetConfig+0x2fe>
 8009e50:	2302      	movs	r3, #2
 8009e52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e56:	e112      	b.n	800a07e <UART_SetConfig+0x2fe>
 8009e58:	2304      	movs	r3, #4
 8009e5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e5e:	e10e      	b.n	800a07e <UART_SetConfig+0x2fe>
 8009e60:	2308      	movs	r3, #8
 8009e62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e66:	e10a      	b.n	800a07e <UART_SetConfig+0x2fe>
 8009e68:	2310      	movs	r3, #16
 8009e6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e6e:	e106      	b.n	800a07e <UART_SetConfig+0x2fe>
 8009e70:	697b      	ldr	r3, [r7, #20]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	4a7c      	ldr	r2, [pc, #496]	@ (800a068 <UART_SetConfig+0x2e8>)
 8009e76:	4293      	cmp	r3, r2
 8009e78:	d138      	bne.n	8009eec <UART_SetConfig+0x16c>
 8009e7a:	4b7a      	ldr	r3, [pc, #488]	@ (800a064 <UART_SetConfig+0x2e4>)
 8009e7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009e80:	f003 030c 	and.w	r3, r3, #12
 8009e84:	2b0c      	cmp	r3, #12
 8009e86:	d82d      	bhi.n	8009ee4 <UART_SetConfig+0x164>
 8009e88:	a201      	add	r2, pc, #4	@ (adr r2, 8009e90 <UART_SetConfig+0x110>)
 8009e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e8e:	bf00      	nop
 8009e90:	08009ec5 	.word	0x08009ec5
 8009e94:	08009ee5 	.word	0x08009ee5
 8009e98:	08009ee5 	.word	0x08009ee5
 8009e9c:	08009ee5 	.word	0x08009ee5
 8009ea0:	08009ed5 	.word	0x08009ed5
 8009ea4:	08009ee5 	.word	0x08009ee5
 8009ea8:	08009ee5 	.word	0x08009ee5
 8009eac:	08009ee5 	.word	0x08009ee5
 8009eb0:	08009ecd 	.word	0x08009ecd
 8009eb4:	08009ee5 	.word	0x08009ee5
 8009eb8:	08009ee5 	.word	0x08009ee5
 8009ebc:	08009ee5 	.word	0x08009ee5
 8009ec0:	08009edd 	.word	0x08009edd
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009eca:	e0d8      	b.n	800a07e <UART_SetConfig+0x2fe>
 8009ecc:	2302      	movs	r3, #2
 8009ece:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ed2:	e0d4      	b.n	800a07e <UART_SetConfig+0x2fe>
 8009ed4:	2304      	movs	r3, #4
 8009ed6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009eda:	e0d0      	b.n	800a07e <UART_SetConfig+0x2fe>
 8009edc:	2308      	movs	r3, #8
 8009ede:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ee2:	e0cc      	b.n	800a07e <UART_SetConfig+0x2fe>
 8009ee4:	2310      	movs	r3, #16
 8009ee6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009eea:	e0c8      	b.n	800a07e <UART_SetConfig+0x2fe>
 8009eec:	697b      	ldr	r3, [r7, #20]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	4a5e      	ldr	r2, [pc, #376]	@ (800a06c <UART_SetConfig+0x2ec>)
 8009ef2:	4293      	cmp	r3, r2
 8009ef4:	d125      	bne.n	8009f42 <UART_SetConfig+0x1c2>
 8009ef6:	4b5b      	ldr	r3, [pc, #364]	@ (800a064 <UART_SetConfig+0x2e4>)
 8009ef8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009efc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009f00:	2b30      	cmp	r3, #48	@ 0x30
 8009f02:	d016      	beq.n	8009f32 <UART_SetConfig+0x1b2>
 8009f04:	2b30      	cmp	r3, #48	@ 0x30
 8009f06:	d818      	bhi.n	8009f3a <UART_SetConfig+0x1ba>
 8009f08:	2b20      	cmp	r3, #32
 8009f0a:	d00a      	beq.n	8009f22 <UART_SetConfig+0x1a2>
 8009f0c:	2b20      	cmp	r3, #32
 8009f0e:	d814      	bhi.n	8009f3a <UART_SetConfig+0x1ba>
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d002      	beq.n	8009f1a <UART_SetConfig+0x19a>
 8009f14:	2b10      	cmp	r3, #16
 8009f16:	d008      	beq.n	8009f2a <UART_SetConfig+0x1aa>
 8009f18:	e00f      	b.n	8009f3a <UART_SetConfig+0x1ba>
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f20:	e0ad      	b.n	800a07e <UART_SetConfig+0x2fe>
 8009f22:	2302      	movs	r3, #2
 8009f24:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f28:	e0a9      	b.n	800a07e <UART_SetConfig+0x2fe>
 8009f2a:	2304      	movs	r3, #4
 8009f2c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f30:	e0a5      	b.n	800a07e <UART_SetConfig+0x2fe>
 8009f32:	2308      	movs	r3, #8
 8009f34:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f38:	e0a1      	b.n	800a07e <UART_SetConfig+0x2fe>
 8009f3a:	2310      	movs	r3, #16
 8009f3c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f40:	e09d      	b.n	800a07e <UART_SetConfig+0x2fe>
 8009f42:	697b      	ldr	r3, [r7, #20]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	4a4a      	ldr	r2, [pc, #296]	@ (800a070 <UART_SetConfig+0x2f0>)
 8009f48:	4293      	cmp	r3, r2
 8009f4a:	d125      	bne.n	8009f98 <UART_SetConfig+0x218>
 8009f4c:	4b45      	ldr	r3, [pc, #276]	@ (800a064 <UART_SetConfig+0x2e4>)
 8009f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009f52:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009f56:	2bc0      	cmp	r3, #192	@ 0xc0
 8009f58:	d016      	beq.n	8009f88 <UART_SetConfig+0x208>
 8009f5a:	2bc0      	cmp	r3, #192	@ 0xc0
 8009f5c:	d818      	bhi.n	8009f90 <UART_SetConfig+0x210>
 8009f5e:	2b80      	cmp	r3, #128	@ 0x80
 8009f60:	d00a      	beq.n	8009f78 <UART_SetConfig+0x1f8>
 8009f62:	2b80      	cmp	r3, #128	@ 0x80
 8009f64:	d814      	bhi.n	8009f90 <UART_SetConfig+0x210>
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d002      	beq.n	8009f70 <UART_SetConfig+0x1f0>
 8009f6a:	2b40      	cmp	r3, #64	@ 0x40
 8009f6c:	d008      	beq.n	8009f80 <UART_SetConfig+0x200>
 8009f6e:	e00f      	b.n	8009f90 <UART_SetConfig+0x210>
 8009f70:	2300      	movs	r3, #0
 8009f72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f76:	e082      	b.n	800a07e <UART_SetConfig+0x2fe>
 8009f78:	2302      	movs	r3, #2
 8009f7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f7e:	e07e      	b.n	800a07e <UART_SetConfig+0x2fe>
 8009f80:	2304      	movs	r3, #4
 8009f82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f86:	e07a      	b.n	800a07e <UART_SetConfig+0x2fe>
 8009f88:	2308      	movs	r3, #8
 8009f8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f8e:	e076      	b.n	800a07e <UART_SetConfig+0x2fe>
 8009f90:	2310      	movs	r3, #16
 8009f92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f96:	e072      	b.n	800a07e <UART_SetConfig+0x2fe>
 8009f98:	697b      	ldr	r3, [r7, #20]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	4a35      	ldr	r2, [pc, #212]	@ (800a074 <UART_SetConfig+0x2f4>)
 8009f9e:	4293      	cmp	r3, r2
 8009fa0:	d12a      	bne.n	8009ff8 <UART_SetConfig+0x278>
 8009fa2:	4b30      	ldr	r3, [pc, #192]	@ (800a064 <UART_SetConfig+0x2e4>)
 8009fa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009fa8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009fac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009fb0:	d01a      	beq.n	8009fe8 <UART_SetConfig+0x268>
 8009fb2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009fb6:	d81b      	bhi.n	8009ff0 <UART_SetConfig+0x270>
 8009fb8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009fbc:	d00c      	beq.n	8009fd8 <UART_SetConfig+0x258>
 8009fbe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009fc2:	d815      	bhi.n	8009ff0 <UART_SetConfig+0x270>
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d003      	beq.n	8009fd0 <UART_SetConfig+0x250>
 8009fc8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009fcc:	d008      	beq.n	8009fe0 <UART_SetConfig+0x260>
 8009fce:	e00f      	b.n	8009ff0 <UART_SetConfig+0x270>
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009fd6:	e052      	b.n	800a07e <UART_SetConfig+0x2fe>
 8009fd8:	2302      	movs	r3, #2
 8009fda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009fde:	e04e      	b.n	800a07e <UART_SetConfig+0x2fe>
 8009fe0:	2304      	movs	r3, #4
 8009fe2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009fe6:	e04a      	b.n	800a07e <UART_SetConfig+0x2fe>
 8009fe8:	2308      	movs	r3, #8
 8009fea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009fee:	e046      	b.n	800a07e <UART_SetConfig+0x2fe>
 8009ff0:	2310      	movs	r3, #16
 8009ff2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ff6:	e042      	b.n	800a07e <UART_SetConfig+0x2fe>
 8009ff8:	697b      	ldr	r3, [r7, #20]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	4a17      	ldr	r2, [pc, #92]	@ (800a05c <UART_SetConfig+0x2dc>)
 8009ffe:	4293      	cmp	r3, r2
 800a000:	d13a      	bne.n	800a078 <UART_SetConfig+0x2f8>
 800a002:	4b18      	ldr	r3, [pc, #96]	@ (800a064 <UART_SetConfig+0x2e4>)
 800a004:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a008:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a00c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a010:	d01a      	beq.n	800a048 <UART_SetConfig+0x2c8>
 800a012:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a016:	d81b      	bhi.n	800a050 <UART_SetConfig+0x2d0>
 800a018:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a01c:	d00c      	beq.n	800a038 <UART_SetConfig+0x2b8>
 800a01e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a022:	d815      	bhi.n	800a050 <UART_SetConfig+0x2d0>
 800a024:	2b00      	cmp	r3, #0
 800a026:	d003      	beq.n	800a030 <UART_SetConfig+0x2b0>
 800a028:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a02c:	d008      	beq.n	800a040 <UART_SetConfig+0x2c0>
 800a02e:	e00f      	b.n	800a050 <UART_SetConfig+0x2d0>
 800a030:	2300      	movs	r3, #0
 800a032:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a036:	e022      	b.n	800a07e <UART_SetConfig+0x2fe>
 800a038:	2302      	movs	r3, #2
 800a03a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a03e:	e01e      	b.n	800a07e <UART_SetConfig+0x2fe>
 800a040:	2304      	movs	r3, #4
 800a042:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a046:	e01a      	b.n	800a07e <UART_SetConfig+0x2fe>
 800a048:	2308      	movs	r3, #8
 800a04a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a04e:	e016      	b.n	800a07e <UART_SetConfig+0x2fe>
 800a050:	2310      	movs	r3, #16
 800a052:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a056:	e012      	b.n	800a07e <UART_SetConfig+0x2fe>
 800a058:	cfff69f3 	.word	0xcfff69f3
 800a05c:	40008000 	.word	0x40008000
 800a060:	40013800 	.word	0x40013800
 800a064:	40021000 	.word	0x40021000
 800a068:	40004400 	.word	0x40004400
 800a06c:	40004800 	.word	0x40004800
 800a070:	40004c00 	.word	0x40004c00
 800a074:	40005000 	.word	0x40005000
 800a078:	2310      	movs	r3, #16
 800a07a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a07e:	697b      	ldr	r3, [r7, #20]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	4aae      	ldr	r2, [pc, #696]	@ (800a33c <UART_SetConfig+0x5bc>)
 800a084:	4293      	cmp	r3, r2
 800a086:	f040 8097 	bne.w	800a1b8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a08a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a08e:	2b08      	cmp	r3, #8
 800a090:	d823      	bhi.n	800a0da <UART_SetConfig+0x35a>
 800a092:	a201      	add	r2, pc, #4	@ (adr r2, 800a098 <UART_SetConfig+0x318>)
 800a094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a098:	0800a0bd 	.word	0x0800a0bd
 800a09c:	0800a0db 	.word	0x0800a0db
 800a0a0:	0800a0c5 	.word	0x0800a0c5
 800a0a4:	0800a0db 	.word	0x0800a0db
 800a0a8:	0800a0cb 	.word	0x0800a0cb
 800a0ac:	0800a0db 	.word	0x0800a0db
 800a0b0:	0800a0db 	.word	0x0800a0db
 800a0b4:	0800a0db 	.word	0x0800a0db
 800a0b8:	0800a0d3 	.word	0x0800a0d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a0bc:	f7fc fb7a 	bl	80067b4 <HAL_RCC_GetPCLK1Freq>
 800a0c0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a0c2:	e010      	b.n	800a0e6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a0c4:	4b9e      	ldr	r3, [pc, #632]	@ (800a340 <UART_SetConfig+0x5c0>)
 800a0c6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a0c8:	e00d      	b.n	800a0e6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a0ca:	f7fc fb05 	bl	80066d8 <HAL_RCC_GetSysClockFreq>
 800a0ce:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a0d0:	e009      	b.n	800a0e6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a0d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a0d6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a0d8:	e005      	b.n	800a0e6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800a0da:	2300      	movs	r3, #0
 800a0dc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a0de:	2301      	movs	r3, #1
 800a0e0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a0e4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a0e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	f000 8130 	beq.w	800a34e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a0ee:	697b      	ldr	r3, [r7, #20]
 800a0f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0f2:	4a94      	ldr	r2, [pc, #592]	@ (800a344 <UART_SetConfig+0x5c4>)
 800a0f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a0f8:	461a      	mov	r2, r3
 800a0fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0fc:	fbb3 f3f2 	udiv	r3, r3, r2
 800a100:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a102:	697b      	ldr	r3, [r7, #20]
 800a104:	685a      	ldr	r2, [r3, #4]
 800a106:	4613      	mov	r3, r2
 800a108:	005b      	lsls	r3, r3, #1
 800a10a:	4413      	add	r3, r2
 800a10c:	69ba      	ldr	r2, [r7, #24]
 800a10e:	429a      	cmp	r2, r3
 800a110:	d305      	bcc.n	800a11e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a112:	697b      	ldr	r3, [r7, #20]
 800a114:	685b      	ldr	r3, [r3, #4]
 800a116:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a118:	69ba      	ldr	r2, [r7, #24]
 800a11a:	429a      	cmp	r2, r3
 800a11c:	d903      	bls.n	800a126 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800a11e:	2301      	movs	r3, #1
 800a120:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a124:	e113      	b.n	800a34e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a128:	2200      	movs	r2, #0
 800a12a:	60bb      	str	r3, [r7, #8]
 800a12c:	60fa      	str	r2, [r7, #12]
 800a12e:	697b      	ldr	r3, [r7, #20]
 800a130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a132:	4a84      	ldr	r2, [pc, #528]	@ (800a344 <UART_SetConfig+0x5c4>)
 800a134:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a138:	b29b      	uxth	r3, r3
 800a13a:	2200      	movs	r2, #0
 800a13c:	603b      	str	r3, [r7, #0]
 800a13e:	607a      	str	r2, [r7, #4]
 800a140:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a144:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a148:	f7f6 fc54 	bl	80009f4 <__aeabi_uldivmod>
 800a14c:	4602      	mov	r2, r0
 800a14e:	460b      	mov	r3, r1
 800a150:	4610      	mov	r0, r2
 800a152:	4619      	mov	r1, r3
 800a154:	f04f 0200 	mov.w	r2, #0
 800a158:	f04f 0300 	mov.w	r3, #0
 800a15c:	020b      	lsls	r3, r1, #8
 800a15e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a162:	0202      	lsls	r2, r0, #8
 800a164:	6979      	ldr	r1, [r7, #20]
 800a166:	6849      	ldr	r1, [r1, #4]
 800a168:	0849      	lsrs	r1, r1, #1
 800a16a:	2000      	movs	r0, #0
 800a16c:	460c      	mov	r4, r1
 800a16e:	4605      	mov	r5, r0
 800a170:	eb12 0804 	adds.w	r8, r2, r4
 800a174:	eb43 0905 	adc.w	r9, r3, r5
 800a178:	697b      	ldr	r3, [r7, #20]
 800a17a:	685b      	ldr	r3, [r3, #4]
 800a17c:	2200      	movs	r2, #0
 800a17e:	469a      	mov	sl, r3
 800a180:	4693      	mov	fp, r2
 800a182:	4652      	mov	r2, sl
 800a184:	465b      	mov	r3, fp
 800a186:	4640      	mov	r0, r8
 800a188:	4649      	mov	r1, r9
 800a18a:	f7f6 fc33 	bl	80009f4 <__aeabi_uldivmod>
 800a18e:	4602      	mov	r2, r0
 800a190:	460b      	mov	r3, r1
 800a192:	4613      	mov	r3, r2
 800a194:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a196:	6a3b      	ldr	r3, [r7, #32]
 800a198:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a19c:	d308      	bcc.n	800a1b0 <UART_SetConfig+0x430>
 800a19e:	6a3b      	ldr	r3, [r7, #32]
 800a1a0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a1a4:	d204      	bcs.n	800a1b0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800a1a6:	697b      	ldr	r3, [r7, #20]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	6a3a      	ldr	r2, [r7, #32]
 800a1ac:	60da      	str	r2, [r3, #12]
 800a1ae:	e0ce      	b.n	800a34e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800a1b0:	2301      	movs	r3, #1
 800a1b2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a1b6:	e0ca      	b.n	800a34e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a1b8:	697b      	ldr	r3, [r7, #20]
 800a1ba:	69db      	ldr	r3, [r3, #28]
 800a1bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a1c0:	d166      	bne.n	800a290 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800a1c2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a1c6:	2b08      	cmp	r3, #8
 800a1c8:	d827      	bhi.n	800a21a <UART_SetConfig+0x49a>
 800a1ca:	a201      	add	r2, pc, #4	@ (adr r2, 800a1d0 <UART_SetConfig+0x450>)
 800a1cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1d0:	0800a1f5 	.word	0x0800a1f5
 800a1d4:	0800a1fd 	.word	0x0800a1fd
 800a1d8:	0800a205 	.word	0x0800a205
 800a1dc:	0800a21b 	.word	0x0800a21b
 800a1e0:	0800a20b 	.word	0x0800a20b
 800a1e4:	0800a21b 	.word	0x0800a21b
 800a1e8:	0800a21b 	.word	0x0800a21b
 800a1ec:	0800a21b 	.word	0x0800a21b
 800a1f0:	0800a213 	.word	0x0800a213
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a1f4:	f7fc fade 	bl	80067b4 <HAL_RCC_GetPCLK1Freq>
 800a1f8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a1fa:	e014      	b.n	800a226 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a1fc:	f7fc faf0 	bl	80067e0 <HAL_RCC_GetPCLK2Freq>
 800a200:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a202:	e010      	b.n	800a226 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a204:	4b4e      	ldr	r3, [pc, #312]	@ (800a340 <UART_SetConfig+0x5c0>)
 800a206:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a208:	e00d      	b.n	800a226 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a20a:	f7fc fa65 	bl	80066d8 <HAL_RCC_GetSysClockFreq>
 800a20e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a210:	e009      	b.n	800a226 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a212:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a216:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a218:	e005      	b.n	800a226 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800a21a:	2300      	movs	r3, #0
 800a21c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a21e:	2301      	movs	r3, #1
 800a220:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a224:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a228:	2b00      	cmp	r3, #0
 800a22a:	f000 8090 	beq.w	800a34e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a22e:	697b      	ldr	r3, [r7, #20]
 800a230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a232:	4a44      	ldr	r2, [pc, #272]	@ (800a344 <UART_SetConfig+0x5c4>)
 800a234:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a238:	461a      	mov	r2, r3
 800a23a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a23c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a240:	005a      	lsls	r2, r3, #1
 800a242:	697b      	ldr	r3, [r7, #20]
 800a244:	685b      	ldr	r3, [r3, #4]
 800a246:	085b      	lsrs	r3, r3, #1
 800a248:	441a      	add	r2, r3
 800a24a:	697b      	ldr	r3, [r7, #20]
 800a24c:	685b      	ldr	r3, [r3, #4]
 800a24e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a252:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a254:	6a3b      	ldr	r3, [r7, #32]
 800a256:	2b0f      	cmp	r3, #15
 800a258:	d916      	bls.n	800a288 <UART_SetConfig+0x508>
 800a25a:	6a3b      	ldr	r3, [r7, #32]
 800a25c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a260:	d212      	bcs.n	800a288 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a262:	6a3b      	ldr	r3, [r7, #32]
 800a264:	b29b      	uxth	r3, r3
 800a266:	f023 030f 	bic.w	r3, r3, #15
 800a26a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a26c:	6a3b      	ldr	r3, [r7, #32]
 800a26e:	085b      	lsrs	r3, r3, #1
 800a270:	b29b      	uxth	r3, r3
 800a272:	f003 0307 	and.w	r3, r3, #7
 800a276:	b29a      	uxth	r2, r3
 800a278:	8bfb      	ldrh	r3, [r7, #30]
 800a27a:	4313      	orrs	r3, r2
 800a27c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800a27e:	697b      	ldr	r3, [r7, #20]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	8bfa      	ldrh	r2, [r7, #30]
 800a284:	60da      	str	r2, [r3, #12]
 800a286:	e062      	b.n	800a34e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800a288:	2301      	movs	r3, #1
 800a28a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a28e:	e05e      	b.n	800a34e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a290:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a294:	2b08      	cmp	r3, #8
 800a296:	d828      	bhi.n	800a2ea <UART_SetConfig+0x56a>
 800a298:	a201      	add	r2, pc, #4	@ (adr r2, 800a2a0 <UART_SetConfig+0x520>)
 800a29a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a29e:	bf00      	nop
 800a2a0:	0800a2c5 	.word	0x0800a2c5
 800a2a4:	0800a2cd 	.word	0x0800a2cd
 800a2a8:	0800a2d5 	.word	0x0800a2d5
 800a2ac:	0800a2eb 	.word	0x0800a2eb
 800a2b0:	0800a2db 	.word	0x0800a2db
 800a2b4:	0800a2eb 	.word	0x0800a2eb
 800a2b8:	0800a2eb 	.word	0x0800a2eb
 800a2bc:	0800a2eb 	.word	0x0800a2eb
 800a2c0:	0800a2e3 	.word	0x0800a2e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a2c4:	f7fc fa76 	bl	80067b4 <HAL_RCC_GetPCLK1Freq>
 800a2c8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a2ca:	e014      	b.n	800a2f6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a2cc:	f7fc fa88 	bl	80067e0 <HAL_RCC_GetPCLK2Freq>
 800a2d0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a2d2:	e010      	b.n	800a2f6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a2d4:	4b1a      	ldr	r3, [pc, #104]	@ (800a340 <UART_SetConfig+0x5c0>)
 800a2d6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a2d8:	e00d      	b.n	800a2f6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a2da:	f7fc f9fd 	bl	80066d8 <HAL_RCC_GetSysClockFreq>
 800a2de:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a2e0:	e009      	b.n	800a2f6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a2e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a2e6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a2e8:	e005      	b.n	800a2f6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a2ee:	2301      	movs	r3, #1
 800a2f0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a2f4:	bf00      	nop
    }

    if (pclk != 0U)
 800a2f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d028      	beq.n	800a34e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a2fc:	697b      	ldr	r3, [r7, #20]
 800a2fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a300:	4a10      	ldr	r2, [pc, #64]	@ (800a344 <UART_SetConfig+0x5c4>)
 800a302:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a306:	461a      	mov	r2, r3
 800a308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a30a:	fbb3 f2f2 	udiv	r2, r3, r2
 800a30e:	697b      	ldr	r3, [r7, #20]
 800a310:	685b      	ldr	r3, [r3, #4]
 800a312:	085b      	lsrs	r3, r3, #1
 800a314:	441a      	add	r2, r3
 800a316:	697b      	ldr	r3, [r7, #20]
 800a318:	685b      	ldr	r3, [r3, #4]
 800a31a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a31e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a320:	6a3b      	ldr	r3, [r7, #32]
 800a322:	2b0f      	cmp	r3, #15
 800a324:	d910      	bls.n	800a348 <UART_SetConfig+0x5c8>
 800a326:	6a3b      	ldr	r3, [r7, #32]
 800a328:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a32c:	d20c      	bcs.n	800a348 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a32e:	6a3b      	ldr	r3, [r7, #32]
 800a330:	b29a      	uxth	r2, r3
 800a332:	697b      	ldr	r3, [r7, #20]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	60da      	str	r2, [r3, #12]
 800a338:	e009      	b.n	800a34e <UART_SetConfig+0x5ce>
 800a33a:	bf00      	nop
 800a33c:	40008000 	.word	0x40008000
 800a340:	00f42400 	.word	0x00f42400
 800a344:	0800bcf0 	.word	0x0800bcf0
      }
      else
      {
        ret = HAL_ERROR;
 800a348:	2301      	movs	r3, #1
 800a34a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a34e:	697b      	ldr	r3, [r7, #20]
 800a350:	2201      	movs	r2, #1
 800a352:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a356:	697b      	ldr	r3, [r7, #20]
 800a358:	2201      	movs	r2, #1
 800a35a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a35e:	697b      	ldr	r3, [r7, #20]
 800a360:	2200      	movs	r2, #0
 800a362:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a364:	697b      	ldr	r3, [r7, #20]
 800a366:	2200      	movs	r2, #0
 800a368:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a36a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800a36e:	4618      	mov	r0, r3
 800a370:	3730      	adds	r7, #48	@ 0x30
 800a372:	46bd      	mov	sp, r7
 800a374:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800a378 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a378:	b480      	push	{r7}
 800a37a:	b083      	sub	sp, #12
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a384:	f003 0308 	and.w	r3, r3, #8
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d00a      	beq.n	800a3a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	685b      	ldr	r3, [r3, #4]
 800a392:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	430a      	orrs	r2, r1
 800a3a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3a6:	f003 0301 	and.w	r3, r3, #1
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d00a      	beq.n	800a3c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	685b      	ldr	r3, [r3, #4]
 800a3b4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	430a      	orrs	r2, r1
 800a3c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3c8:	f003 0302 	and.w	r3, r3, #2
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d00a      	beq.n	800a3e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	685b      	ldr	r3, [r3, #4]
 800a3d6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	430a      	orrs	r2, r1
 800a3e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3ea:	f003 0304 	and.w	r3, r3, #4
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d00a      	beq.n	800a408 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	685b      	ldr	r3, [r3, #4]
 800a3f8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	430a      	orrs	r2, r1
 800a406:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a40c:	f003 0310 	and.w	r3, r3, #16
 800a410:	2b00      	cmp	r3, #0
 800a412:	d00a      	beq.n	800a42a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	689b      	ldr	r3, [r3, #8]
 800a41a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	430a      	orrs	r2, r1
 800a428:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a42e:	f003 0320 	and.w	r3, r3, #32
 800a432:	2b00      	cmp	r3, #0
 800a434:	d00a      	beq.n	800a44c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	689b      	ldr	r3, [r3, #8]
 800a43c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	430a      	orrs	r2, r1
 800a44a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a450:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a454:	2b00      	cmp	r3, #0
 800a456:	d01a      	beq.n	800a48e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	685b      	ldr	r3, [r3, #4]
 800a45e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	430a      	orrs	r2, r1
 800a46c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a472:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a476:	d10a      	bne.n	800a48e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	685b      	ldr	r3, [r3, #4]
 800a47e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	430a      	orrs	r2, r1
 800a48c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a492:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a496:	2b00      	cmp	r3, #0
 800a498:	d00a      	beq.n	800a4b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	685b      	ldr	r3, [r3, #4]
 800a4a0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	430a      	orrs	r2, r1
 800a4ae:	605a      	str	r2, [r3, #4]
  }
}
 800a4b0:	bf00      	nop
 800a4b2:	370c      	adds	r7, #12
 800a4b4:	46bd      	mov	sp, r7
 800a4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ba:	4770      	bx	lr

0800a4bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b098      	sub	sp, #96	@ 0x60
 800a4c0:	af02      	add	r7, sp, #8
 800a4c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a4cc:	f7f9 f964 	bl	8003798 <HAL_GetTick>
 800a4d0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	f003 0308 	and.w	r3, r3, #8
 800a4dc:	2b08      	cmp	r3, #8
 800a4de:	d12f      	bne.n	800a540 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a4e0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a4e4:	9300      	str	r3, [sp, #0]
 800a4e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a4ee:	6878      	ldr	r0, [r7, #4]
 800a4f0:	f000 f88e 	bl	800a610 <UART_WaitOnFlagUntilTimeout>
 800a4f4:	4603      	mov	r3, r0
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d022      	beq.n	800a540 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a500:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a502:	e853 3f00 	ldrex	r3, [r3]
 800a506:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a508:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a50a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a50e:	653b      	str	r3, [r7, #80]	@ 0x50
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	461a      	mov	r2, r3
 800a516:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a518:	647b      	str	r3, [r7, #68]	@ 0x44
 800a51a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a51c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a51e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a520:	e841 2300 	strex	r3, r2, [r1]
 800a524:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a526:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d1e6      	bne.n	800a4fa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2220      	movs	r2, #32
 800a530:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	2200      	movs	r2, #0
 800a538:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a53c:	2303      	movs	r3, #3
 800a53e:	e063      	b.n	800a608 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	f003 0304 	and.w	r3, r3, #4
 800a54a:	2b04      	cmp	r3, #4
 800a54c:	d149      	bne.n	800a5e2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a54e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a552:	9300      	str	r3, [sp, #0]
 800a554:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a556:	2200      	movs	r2, #0
 800a558:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a55c:	6878      	ldr	r0, [r7, #4]
 800a55e:	f000 f857 	bl	800a610 <UART_WaitOnFlagUntilTimeout>
 800a562:	4603      	mov	r3, r0
 800a564:	2b00      	cmp	r3, #0
 800a566:	d03c      	beq.n	800a5e2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a56e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a570:	e853 3f00 	ldrex	r3, [r3]
 800a574:	623b      	str	r3, [r7, #32]
   return(result);
 800a576:	6a3b      	ldr	r3, [r7, #32]
 800a578:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a57c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	461a      	mov	r2, r3
 800a584:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a586:	633b      	str	r3, [r7, #48]	@ 0x30
 800a588:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a58a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a58c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a58e:	e841 2300 	strex	r3, r2, [r1]
 800a592:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a594:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a596:	2b00      	cmp	r3, #0
 800a598:	d1e6      	bne.n	800a568 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	3308      	adds	r3, #8
 800a5a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5a2:	693b      	ldr	r3, [r7, #16]
 800a5a4:	e853 3f00 	ldrex	r3, [r3]
 800a5a8:	60fb      	str	r3, [r7, #12]
   return(result);
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	f023 0301 	bic.w	r3, r3, #1
 800a5b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	3308      	adds	r3, #8
 800a5b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a5ba:	61fa      	str	r2, [r7, #28]
 800a5bc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5be:	69b9      	ldr	r1, [r7, #24]
 800a5c0:	69fa      	ldr	r2, [r7, #28]
 800a5c2:	e841 2300 	strex	r3, r2, [r1]
 800a5c6:	617b      	str	r3, [r7, #20]
   return(result);
 800a5c8:	697b      	ldr	r3, [r7, #20]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d1e5      	bne.n	800a59a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	2220      	movs	r2, #32
 800a5d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	2200      	movs	r2, #0
 800a5da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a5de:	2303      	movs	r3, #3
 800a5e0:	e012      	b.n	800a608 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	2220      	movs	r2, #32
 800a5e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	2220      	movs	r2, #32
 800a5ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	2200      	movs	r2, #0
 800a602:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a606:	2300      	movs	r3, #0
}
 800a608:	4618      	mov	r0, r3
 800a60a:	3758      	adds	r7, #88	@ 0x58
 800a60c:	46bd      	mov	sp, r7
 800a60e:	bd80      	pop	{r7, pc}

0800a610 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a610:	b580      	push	{r7, lr}
 800a612:	b084      	sub	sp, #16
 800a614:	af00      	add	r7, sp, #0
 800a616:	60f8      	str	r0, [r7, #12]
 800a618:	60b9      	str	r1, [r7, #8]
 800a61a:	603b      	str	r3, [r7, #0]
 800a61c:	4613      	mov	r3, r2
 800a61e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a620:	e04f      	b.n	800a6c2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a622:	69bb      	ldr	r3, [r7, #24]
 800a624:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a628:	d04b      	beq.n	800a6c2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a62a:	f7f9 f8b5 	bl	8003798 <HAL_GetTick>
 800a62e:	4602      	mov	r2, r0
 800a630:	683b      	ldr	r3, [r7, #0]
 800a632:	1ad3      	subs	r3, r2, r3
 800a634:	69ba      	ldr	r2, [r7, #24]
 800a636:	429a      	cmp	r2, r3
 800a638:	d302      	bcc.n	800a640 <UART_WaitOnFlagUntilTimeout+0x30>
 800a63a:	69bb      	ldr	r3, [r7, #24]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d101      	bne.n	800a644 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a640:	2303      	movs	r3, #3
 800a642:	e04e      	b.n	800a6e2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	f003 0304 	and.w	r3, r3, #4
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d037      	beq.n	800a6c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a652:	68bb      	ldr	r3, [r7, #8]
 800a654:	2b80      	cmp	r3, #128	@ 0x80
 800a656:	d034      	beq.n	800a6c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a658:	68bb      	ldr	r3, [r7, #8]
 800a65a:	2b40      	cmp	r3, #64	@ 0x40
 800a65c:	d031      	beq.n	800a6c2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	69db      	ldr	r3, [r3, #28]
 800a664:	f003 0308 	and.w	r3, r3, #8
 800a668:	2b08      	cmp	r3, #8
 800a66a:	d110      	bne.n	800a68e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	2208      	movs	r2, #8
 800a672:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a674:	68f8      	ldr	r0, [r7, #12]
 800a676:	f000 f920 	bl	800a8ba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	2208      	movs	r2, #8
 800a67e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	2200      	movs	r2, #0
 800a686:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a68a:	2301      	movs	r3, #1
 800a68c:	e029      	b.n	800a6e2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	69db      	ldr	r3, [r3, #28]
 800a694:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a698:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a69c:	d111      	bne.n	800a6c2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a6a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a6a8:	68f8      	ldr	r0, [r7, #12]
 800a6aa:	f000 f906 	bl	800a8ba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	2220      	movs	r2, #32
 800a6b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a6be:	2303      	movs	r3, #3
 800a6c0:	e00f      	b.n	800a6e2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	69da      	ldr	r2, [r3, #28]
 800a6c8:	68bb      	ldr	r3, [r7, #8]
 800a6ca:	4013      	ands	r3, r2
 800a6cc:	68ba      	ldr	r2, [r7, #8]
 800a6ce:	429a      	cmp	r2, r3
 800a6d0:	bf0c      	ite	eq
 800a6d2:	2301      	moveq	r3, #1
 800a6d4:	2300      	movne	r3, #0
 800a6d6:	b2db      	uxtb	r3, r3
 800a6d8:	461a      	mov	r2, r3
 800a6da:	79fb      	ldrb	r3, [r7, #7]
 800a6dc:	429a      	cmp	r2, r3
 800a6de:	d0a0      	beq.n	800a622 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a6e0:	2300      	movs	r3, #0
}
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	3710      	adds	r7, #16
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	bd80      	pop	{r7, pc}
	...

0800a6ec <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b096      	sub	sp, #88	@ 0x58
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	60f8      	str	r0, [r7, #12]
 800a6f4:	60b9      	str	r1, [r7, #8]
 800a6f6:	4613      	mov	r3, r2
 800a6f8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	68ba      	ldr	r2, [r7, #8]
 800a6fe:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	88fa      	ldrh	r2, [r7, #6]
 800a704:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	2200      	movs	r2, #0
 800a70c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	2222      	movs	r2, #34	@ 0x22
 800a714:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d02d      	beq.n	800a77e <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a728:	4a40      	ldr	r2, [pc, #256]	@ (800a82c <UART_Start_Receive_DMA+0x140>)
 800a72a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a732:	4a3f      	ldr	r2, [pc, #252]	@ (800a830 <UART_Start_Receive_DMA+0x144>)
 800a734:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a73c:	4a3d      	ldr	r2, [pc, #244]	@ (800a834 <UART_Start_Receive_DMA+0x148>)
 800a73e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a746:	2200      	movs	r2, #0
 800a748:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	3324      	adds	r3, #36	@ 0x24
 800a756:	4619      	mov	r1, r3
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a75c:	461a      	mov	r2, r3
 800a75e:	88fb      	ldrh	r3, [r7, #6]
 800a760:	f7fa fe56 	bl	8005410 <HAL_DMA_Start_IT>
 800a764:	4603      	mov	r3, r0
 800a766:	2b00      	cmp	r3, #0
 800a768:	d009      	beq.n	800a77e <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	2210      	movs	r2, #16
 800a76e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	2220      	movs	r2, #32
 800a776:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800a77a:	2301      	movs	r3, #1
 800a77c:	e051      	b.n	800a822 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	691b      	ldr	r3, [r3, #16]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d018      	beq.n	800a7b8 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a78c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a78e:	e853 3f00 	ldrex	r3, [r3]
 800a792:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a794:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a796:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a79a:	657b      	str	r3, [r7, #84]	@ 0x54
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	461a      	mov	r2, r3
 800a7a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a7a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a7a6:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7a8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a7aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a7ac:	e841 2300 	strex	r3, r2, [r1]
 800a7b0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a7b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d1e6      	bne.n	800a786 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	3308      	adds	r3, #8
 800a7be:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7c2:	e853 3f00 	ldrex	r3, [r3]
 800a7c6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a7c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7ca:	f043 0301 	orr.w	r3, r3, #1
 800a7ce:	653b      	str	r3, [r7, #80]	@ 0x50
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	3308      	adds	r3, #8
 800a7d6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a7d8:	637a      	str	r2, [r7, #52]	@ 0x34
 800a7da:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7dc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a7de:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a7e0:	e841 2300 	strex	r3, r2, [r1]
 800a7e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a7e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d1e5      	bne.n	800a7b8 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	3308      	adds	r3, #8
 800a7f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7f4:	697b      	ldr	r3, [r7, #20]
 800a7f6:	e853 3f00 	ldrex	r3, [r3]
 800a7fa:	613b      	str	r3, [r7, #16]
   return(result);
 800a7fc:	693b      	ldr	r3, [r7, #16]
 800a7fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a802:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	3308      	adds	r3, #8
 800a80a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a80c:	623a      	str	r2, [r7, #32]
 800a80e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a810:	69f9      	ldr	r1, [r7, #28]
 800a812:	6a3a      	ldr	r2, [r7, #32]
 800a814:	e841 2300 	strex	r3, r2, [r1]
 800a818:	61bb      	str	r3, [r7, #24]
   return(result);
 800a81a:	69bb      	ldr	r3, [r7, #24]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d1e5      	bne.n	800a7ec <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800a820:	2300      	movs	r3, #0
}
 800a822:	4618      	mov	r0, r3
 800a824:	3758      	adds	r7, #88	@ 0x58
 800a826:	46bd      	mov	sp, r7
 800a828:	bd80      	pop	{r7, pc}
 800a82a:	bf00      	nop
 800a82c:	0800aa45 	.word	0x0800aa45
 800a830:	0800ab79 	.word	0x0800ab79
 800a834:	0800abbf 	.word	0x0800abbf

0800a838 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a838:	b480      	push	{r7}
 800a83a:	b08f      	sub	sp, #60	@ 0x3c
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a846:	6a3b      	ldr	r3, [r7, #32]
 800a848:	e853 3f00 	ldrex	r3, [r3]
 800a84c:	61fb      	str	r3, [r7, #28]
   return(result);
 800a84e:	69fb      	ldr	r3, [r7, #28]
 800a850:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a854:	637b      	str	r3, [r7, #52]	@ 0x34
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	461a      	mov	r2, r3
 800a85c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a85e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a860:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a862:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a864:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a866:	e841 2300 	strex	r3, r2, [r1]
 800a86a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a86c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d1e6      	bne.n	800a840 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	3308      	adds	r3, #8
 800a878:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	e853 3f00 	ldrex	r3, [r3]
 800a880:	60bb      	str	r3, [r7, #8]
   return(result);
 800a882:	68bb      	ldr	r3, [r7, #8]
 800a884:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800a888:	633b      	str	r3, [r7, #48]	@ 0x30
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	3308      	adds	r3, #8
 800a890:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a892:	61ba      	str	r2, [r7, #24]
 800a894:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a896:	6979      	ldr	r1, [r7, #20]
 800a898:	69ba      	ldr	r2, [r7, #24]
 800a89a:	e841 2300 	strex	r3, r2, [r1]
 800a89e:	613b      	str	r3, [r7, #16]
   return(result);
 800a8a0:	693b      	ldr	r3, [r7, #16]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d1e5      	bne.n	800a872 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	2220      	movs	r2, #32
 800a8aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800a8ae:	bf00      	nop
 800a8b0:	373c      	adds	r7, #60	@ 0x3c
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b8:	4770      	bx	lr

0800a8ba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a8ba:	b480      	push	{r7}
 800a8bc:	b095      	sub	sp, #84	@ 0x54
 800a8be:	af00      	add	r7, sp, #0
 800a8c0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8ca:	e853 3f00 	ldrex	r3, [r3]
 800a8ce:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a8d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8d2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a8d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	461a      	mov	r2, r3
 800a8de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a8e0:	643b      	str	r3, [r7, #64]	@ 0x40
 800a8e2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8e4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a8e6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a8e8:	e841 2300 	strex	r3, r2, [r1]
 800a8ec:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a8ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d1e6      	bne.n	800a8c2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	3308      	adds	r3, #8
 800a8fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8fc:	6a3b      	ldr	r3, [r7, #32]
 800a8fe:	e853 3f00 	ldrex	r3, [r3]
 800a902:	61fb      	str	r3, [r7, #28]
   return(result);
 800a904:	69fb      	ldr	r3, [r7, #28]
 800a906:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a90a:	f023 0301 	bic.w	r3, r3, #1
 800a90e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	3308      	adds	r3, #8
 800a916:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a918:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a91a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a91c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a91e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a920:	e841 2300 	strex	r3, r2, [r1]
 800a924:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d1e3      	bne.n	800a8f4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a930:	2b01      	cmp	r3, #1
 800a932:	d118      	bne.n	800a966 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	e853 3f00 	ldrex	r3, [r3]
 800a940:	60bb      	str	r3, [r7, #8]
   return(result);
 800a942:	68bb      	ldr	r3, [r7, #8]
 800a944:	f023 0310 	bic.w	r3, r3, #16
 800a948:	647b      	str	r3, [r7, #68]	@ 0x44
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	461a      	mov	r2, r3
 800a950:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a952:	61bb      	str	r3, [r7, #24]
 800a954:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a956:	6979      	ldr	r1, [r7, #20]
 800a958:	69ba      	ldr	r2, [r7, #24]
 800a95a:	e841 2300 	strex	r3, r2, [r1]
 800a95e:	613b      	str	r3, [r7, #16]
   return(result);
 800a960:	693b      	ldr	r3, [r7, #16]
 800a962:	2b00      	cmp	r3, #0
 800a964:	d1e6      	bne.n	800a934 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	2220      	movs	r2, #32
 800a96a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	2200      	movs	r2, #0
 800a972:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	2200      	movs	r2, #0
 800a978:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a97a:	bf00      	nop
 800a97c:	3754      	adds	r7, #84	@ 0x54
 800a97e:	46bd      	mov	sp, r7
 800a980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a984:	4770      	bx	lr

0800a986 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a986:	b580      	push	{r7, lr}
 800a988:	b090      	sub	sp, #64	@ 0x40
 800a98a:	af00      	add	r7, sp, #0
 800a98c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a992:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	f003 0320 	and.w	r3, r3, #32
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d137      	bne.n	800aa12 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800a9a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a9aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	3308      	adds	r3, #8
 800a9b0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9b4:	e853 3f00 	ldrex	r3, [r3]
 800a9b8:	623b      	str	r3, [r7, #32]
   return(result);
 800a9ba:	6a3b      	ldr	r3, [r7, #32]
 800a9bc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a9c0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a9c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	3308      	adds	r3, #8
 800a9c8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a9ca:	633a      	str	r2, [r7, #48]	@ 0x30
 800a9cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a9d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a9d2:	e841 2300 	strex	r3, r2, [r1]
 800a9d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a9d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d1e5      	bne.n	800a9aa <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a9de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9e4:	693b      	ldr	r3, [r7, #16]
 800a9e6:	e853 3f00 	ldrex	r3, [r3]
 800a9ea:	60fb      	str	r3, [r7, #12]
   return(result);
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a9f2:	637b      	str	r3, [r7, #52]	@ 0x34
 800a9f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	461a      	mov	r2, r3
 800a9fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9fc:	61fb      	str	r3, [r7, #28]
 800a9fe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa00:	69b9      	ldr	r1, [r7, #24]
 800aa02:	69fa      	ldr	r2, [r7, #28]
 800aa04:	e841 2300 	strex	r3, r2, [r1]
 800aa08:	617b      	str	r3, [r7, #20]
   return(result);
 800aa0a:	697b      	ldr	r3, [r7, #20]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d1e6      	bne.n	800a9de <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800aa10:	e004      	b.n	800aa1c <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 800aa12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa14:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800aa18:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800aa1a:	4798      	blx	r3
}
 800aa1c:	bf00      	nop
 800aa1e:	3740      	adds	r7, #64	@ 0x40
 800aa20:	46bd      	mov	sp, r7
 800aa22:	bd80      	pop	{r7, pc}

0800aa24 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800aa24:	b580      	push	{r7, lr}
 800aa26:	b084      	sub	sp, #16
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa30:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800aa38:	68f8      	ldr	r0, [r7, #12]
 800aa3a:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aa3c:	bf00      	nop
 800aa3e:	3710      	adds	r7, #16
 800aa40:	46bd      	mov	sp, r7
 800aa42:	bd80      	pop	{r7, pc}

0800aa44 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800aa44:	b580      	push	{r7, lr}
 800aa46:	b09c      	sub	sp, #112	@ 0x70
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa50:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	f003 0320 	and.w	r3, r3, #32
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d171      	bne.n	800ab44 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800aa60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aa62:	2200      	movs	r2, #0
 800aa64:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aa68:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aa70:	e853 3f00 	ldrex	r3, [r3]
 800aa74:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800aa76:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aa78:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800aa7c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800aa7e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	461a      	mov	r2, r3
 800aa84:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800aa86:	65bb      	str	r3, [r7, #88]	@ 0x58
 800aa88:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa8a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800aa8c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800aa8e:	e841 2300 	strex	r3, r2, [r1]
 800aa92:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800aa94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d1e6      	bne.n	800aa68 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa9a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	3308      	adds	r3, #8
 800aaa0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aaa4:	e853 3f00 	ldrex	r3, [r3]
 800aaa8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800aaaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aaac:	f023 0301 	bic.w	r3, r3, #1
 800aab0:	667b      	str	r3, [r7, #100]	@ 0x64
 800aab2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	3308      	adds	r3, #8
 800aab8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800aaba:	647a      	str	r2, [r7, #68]	@ 0x44
 800aabc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aabe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800aac0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800aac2:	e841 2300 	strex	r3, r2, [r1]
 800aac6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800aac8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d1e5      	bne.n	800aa9a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aace:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	3308      	adds	r3, #8
 800aad4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aad8:	e853 3f00 	ldrex	r3, [r3]
 800aadc:	623b      	str	r3, [r7, #32]
   return(result);
 800aade:	6a3b      	ldr	r3, [r7, #32]
 800aae0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aae4:	663b      	str	r3, [r7, #96]	@ 0x60
 800aae6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	3308      	adds	r3, #8
 800aaec:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800aaee:	633a      	str	r2, [r7, #48]	@ 0x30
 800aaf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaf2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800aaf4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aaf6:	e841 2300 	strex	r3, r2, [r1]
 800aafa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800aafc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d1e5      	bne.n	800aace <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ab02:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab04:	2220      	movs	r2, #32
 800ab06:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab0a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab0c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab0e:	2b01      	cmp	r3, #1
 800ab10:	d118      	bne.n	800ab44 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab12:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab18:	693b      	ldr	r3, [r7, #16]
 800ab1a:	e853 3f00 	ldrex	r3, [r3]
 800ab1e:	60fb      	str	r3, [r7, #12]
   return(result);
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	f023 0310 	bic.w	r3, r3, #16
 800ab26:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ab28:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	461a      	mov	r2, r3
 800ab2e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ab30:	61fb      	str	r3, [r7, #28]
 800ab32:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab34:	69b9      	ldr	r1, [r7, #24]
 800ab36:	69fa      	ldr	r2, [r7, #28]
 800ab38:	e841 2300 	strex	r3, r2, [r1]
 800ab3c:	617b      	str	r3, [r7, #20]
   return(result);
 800ab3e:	697b      	ldr	r3, [r7, #20]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d1e6      	bne.n	800ab12 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ab44:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab46:	2200      	movs	r2, #0
 800ab48:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab4a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab4e:	2b01      	cmp	r3, #1
 800ab50:	d109      	bne.n	800ab66 <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800ab52:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab54:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800ab58:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ab5a:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800ab5e:	4611      	mov	r1, r2
 800ab60:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ab62:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ab64:	e004      	b.n	800ab70 <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 800ab66:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab68:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ab6c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ab6e:	4798      	blx	r3
}
 800ab70:	bf00      	nop
 800ab72:	3770      	adds	r7, #112	@ 0x70
 800ab74:	46bd      	mov	sp, r7
 800ab76:	bd80      	pop	{r7, pc}

0800ab78 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b084      	sub	sp, #16
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab84:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	2201      	movs	r2, #1
 800ab8a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab90:	2b01      	cmp	r3, #1
 800ab92:	d10b      	bne.n	800abac <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800ab9a:	68fa      	ldr	r2, [r7, #12]
 800ab9c:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800aba0:	0852      	lsrs	r2, r2, #1
 800aba2:	b292      	uxth	r2, r2
 800aba4:	4611      	mov	r1, r2
 800aba6:	68f8      	ldr	r0, [r7, #12]
 800aba8:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800abaa:	e004      	b.n	800abb6 <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800abb2:	68f8      	ldr	r0, [r7, #12]
 800abb4:	4798      	blx	r3
}
 800abb6:	bf00      	nop
 800abb8:	3710      	adds	r7, #16
 800abba:	46bd      	mov	sp, r7
 800abbc:	bd80      	pop	{r7, pc}

0800abbe <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800abbe:	b580      	push	{r7, lr}
 800abc0:	b086      	sub	sp, #24
 800abc2:	af00      	add	r7, sp, #0
 800abc4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abca:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800abcc:	697b      	ldr	r3, [r7, #20]
 800abce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800abd2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800abd4:	697b      	ldr	r3, [r7, #20]
 800abd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800abda:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800abdc:	697b      	ldr	r3, [r7, #20]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	689b      	ldr	r3, [r3, #8]
 800abe2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800abe6:	2b80      	cmp	r3, #128	@ 0x80
 800abe8:	d109      	bne.n	800abfe <UART_DMAError+0x40>
 800abea:	693b      	ldr	r3, [r7, #16]
 800abec:	2b21      	cmp	r3, #33	@ 0x21
 800abee:	d106      	bne.n	800abfe <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800abf0:	697b      	ldr	r3, [r7, #20]
 800abf2:	2200      	movs	r2, #0
 800abf4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800abf8:	6978      	ldr	r0, [r7, #20]
 800abfa:	f7ff fe1d 	bl	800a838 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800abfe:	697b      	ldr	r3, [r7, #20]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	689b      	ldr	r3, [r3, #8]
 800ac04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac08:	2b40      	cmp	r3, #64	@ 0x40
 800ac0a:	d109      	bne.n	800ac20 <UART_DMAError+0x62>
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	2b22      	cmp	r3, #34	@ 0x22
 800ac10:	d106      	bne.n	800ac20 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800ac12:	697b      	ldr	r3, [r7, #20]
 800ac14:	2200      	movs	r2, #0
 800ac16:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800ac1a:	6978      	ldr	r0, [r7, #20]
 800ac1c:	f7ff fe4d 	bl	800a8ba <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ac20:	697b      	ldr	r3, [r7, #20]
 800ac22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ac26:	f043 0210 	orr.w	r2, r3, #16
 800ac2a:	697b      	ldr	r3, [r7, #20]
 800ac2c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800ac30:	697b      	ldr	r3, [r7, #20]
 800ac32:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800ac36:	6978      	ldr	r0, [r7, #20]
 800ac38:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ac3a:	bf00      	nop
 800ac3c:	3718      	adds	r7, #24
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	bd80      	pop	{r7, pc}

0800ac42 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ac42:	b580      	push	{r7, lr}
 800ac44:	b084      	sub	sp, #16
 800ac46:	af00      	add	r7, sp, #0
 800ac48:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac4e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	2200      	movs	r2, #0
 800ac54:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800ac5e:	68f8      	ldr	r0, [r7, #12]
 800ac60:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ac62:	bf00      	nop
 800ac64:	3710      	adds	r7, #16
 800ac66:	46bd      	mov	sp, r7
 800ac68:	bd80      	pop	{r7, pc}

0800ac6a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ac6a:	b580      	push	{r7, lr}
 800ac6c:	b088      	sub	sp, #32
 800ac6e:	af00      	add	r7, sp, #0
 800ac70:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	e853 3f00 	ldrex	r3, [r3]
 800ac7e:	60bb      	str	r3, [r7, #8]
   return(result);
 800ac80:	68bb      	ldr	r3, [r7, #8]
 800ac82:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ac86:	61fb      	str	r3, [r7, #28]
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	461a      	mov	r2, r3
 800ac8e:	69fb      	ldr	r3, [r7, #28]
 800ac90:	61bb      	str	r3, [r7, #24]
 800ac92:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac94:	6979      	ldr	r1, [r7, #20]
 800ac96:	69ba      	ldr	r2, [r7, #24]
 800ac98:	e841 2300 	strex	r3, r2, [r1]
 800ac9c:	613b      	str	r3, [r7, #16]
   return(result);
 800ac9e:	693b      	ldr	r3, [r7, #16]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d1e6      	bne.n	800ac72 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	2220      	movs	r2, #32
 800aca8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	2200      	movs	r2, #0
 800acb0:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800acb8:	6878      	ldr	r0, [r7, #4]
 800acba:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800acbc:	bf00      	nop
 800acbe:	3720      	adds	r7, #32
 800acc0:	46bd      	mov	sp, r7
 800acc2:	bd80      	pop	{r7, pc}

0800acc4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800acc4:	b480      	push	{r7}
 800acc6:	b083      	sub	sp, #12
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800accc:	bf00      	nop
 800acce:	370c      	adds	r7, #12
 800acd0:	46bd      	mov	sp, r7
 800acd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd6:	4770      	bx	lr

0800acd8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800acd8:	b480      	push	{r7}
 800acda:	b083      	sub	sp, #12
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ace0:	bf00      	nop
 800ace2:	370c      	adds	r7, #12
 800ace4:	46bd      	mov	sp, r7
 800ace6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acea:	4770      	bx	lr

0800acec <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800acec:	b480      	push	{r7}
 800acee:	b083      	sub	sp, #12
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800acf4:	bf00      	nop
 800acf6:	370c      	adds	r7, #12
 800acf8:	46bd      	mov	sp, r7
 800acfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfe:	4770      	bx	lr

0800ad00 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ad00:	b480      	push	{r7}
 800ad02:	b085      	sub	sp, #20
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ad0e:	2b01      	cmp	r3, #1
 800ad10:	d101      	bne.n	800ad16 <HAL_UARTEx_DisableFifoMode+0x16>
 800ad12:	2302      	movs	r3, #2
 800ad14:	e027      	b.n	800ad66 <HAL_UARTEx_DisableFifoMode+0x66>
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	2201      	movs	r2, #1
 800ad1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	2224      	movs	r2, #36	@ 0x24
 800ad22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	681a      	ldr	r2, [r3, #0]
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	f022 0201 	bic.w	r2, r2, #1
 800ad3c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800ad44:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	2200      	movs	r2, #0
 800ad4a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	68fa      	ldr	r2, [r7, #12]
 800ad52:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	2220      	movs	r2, #32
 800ad58:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	2200      	movs	r2, #0
 800ad60:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ad64:	2300      	movs	r3, #0
}
 800ad66:	4618      	mov	r0, r3
 800ad68:	3714      	adds	r7, #20
 800ad6a:	46bd      	mov	sp, r7
 800ad6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad70:	4770      	bx	lr

0800ad72 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ad72:	b580      	push	{r7, lr}
 800ad74:	b084      	sub	sp, #16
 800ad76:	af00      	add	r7, sp, #0
 800ad78:	6078      	str	r0, [r7, #4]
 800ad7a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ad82:	2b01      	cmp	r3, #1
 800ad84:	d101      	bne.n	800ad8a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ad86:	2302      	movs	r3, #2
 800ad88:	e02d      	b.n	800ade6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	2201      	movs	r2, #1
 800ad8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	2224      	movs	r2, #36	@ 0x24
 800ad96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	681a      	ldr	r2, [r3, #0]
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	f022 0201 	bic.w	r2, r2, #1
 800adb0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	689b      	ldr	r3, [r3, #8]
 800adb8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	683a      	ldr	r2, [r7, #0]
 800adc2:	430a      	orrs	r2, r1
 800adc4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800adc6:	6878      	ldr	r0, [r7, #4]
 800adc8:	f000 f850 	bl	800ae6c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	68fa      	ldr	r2, [r7, #12]
 800add2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	2220      	movs	r2, #32
 800add8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	2200      	movs	r2, #0
 800ade0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ade4:	2300      	movs	r3, #0
}
 800ade6:	4618      	mov	r0, r3
 800ade8:	3710      	adds	r7, #16
 800adea:	46bd      	mov	sp, r7
 800adec:	bd80      	pop	{r7, pc}

0800adee <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800adee:	b580      	push	{r7, lr}
 800adf0:	b084      	sub	sp, #16
 800adf2:	af00      	add	r7, sp, #0
 800adf4:	6078      	str	r0, [r7, #4]
 800adf6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800adfe:	2b01      	cmp	r3, #1
 800ae00:	d101      	bne.n	800ae06 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ae02:	2302      	movs	r3, #2
 800ae04:	e02d      	b.n	800ae62 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	2201      	movs	r2, #1
 800ae0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	2224      	movs	r2, #36	@ 0x24
 800ae12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	681a      	ldr	r2, [r3, #0]
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	f022 0201 	bic.w	r2, r2, #1
 800ae2c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	689b      	ldr	r3, [r3, #8]
 800ae34:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	683a      	ldr	r2, [r7, #0]
 800ae3e:	430a      	orrs	r2, r1
 800ae40:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ae42:	6878      	ldr	r0, [r7, #4]
 800ae44:	f000 f812 	bl	800ae6c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	68fa      	ldr	r2, [r7, #12]
 800ae4e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	2220      	movs	r2, #32
 800ae54:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	2200      	movs	r2, #0
 800ae5c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ae60:	2300      	movs	r3, #0
}
 800ae62:	4618      	mov	r0, r3
 800ae64:	3710      	adds	r7, #16
 800ae66:	46bd      	mov	sp, r7
 800ae68:	bd80      	pop	{r7, pc}
	...

0800ae6c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ae6c:	b480      	push	{r7}
 800ae6e:	b085      	sub	sp, #20
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d108      	bne.n	800ae8e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	2201      	movs	r2, #1
 800ae80:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	2201      	movs	r2, #1
 800ae88:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ae8c:	e031      	b.n	800aef2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ae8e:	2308      	movs	r3, #8
 800ae90:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ae92:	2308      	movs	r3, #8
 800ae94:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	689b      	ldr	r3, [r3, #8]
 800ae9c:	0e5b      	lsrs	r3, r3, #25
 800ae9e:	b2db      	uxtb	r3, r3
 800aea0:	f003 0307 	and.w	r3, r3, #7
 800aea4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	689b      	ldr	r3, [r3, #8]
 800aeac:	0f5b      	lsrs	r3, r3, #29
 800aeae:	b2db      	uxtb	r3, r3
 800aeb0:	f003 0307 	and.w	r3, r3, #7
 800aeb4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aeb6:	7bbb      	ldrb	r3, [r7, #14]
 800aeb8:	7b3a      	ldrb	r2, [r7, #12]
 800aeba:	4911      	ldr	r1, [pc, #68]	@ (800af00 <UARTEx_SetNbDataToProcess+0x94>)
 800aebc:	5c8a      	ldrb	r2, [r1, r2]
 800aebe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800aec2:	7b3a      	ldrb	r2, [r7, #12]
 800aec4:	490f      	ldr	r1, [pc, #60]	@ (800af04 <UARTEx_SetNbDataToProcess+0x98>)
 800aec6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aec8:	fb93 f3f2 	sdiv	r3, r3, r2
 800aecc:	b29a      	uxth	r2, r3
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aed4:	7bfb      	ldrb	r3, [r7, #15]
 800aed6:	7b7a      	ldrb	r2, [r7, #13]
 800aed8:	4909      	ldr	r1, [pc, #36]	@ (800af00 <UARTEx_SetNbDataToProcess+0x94>)
 800aeda:	5c8a      	ldrb	r2, [r1, r2]
 800aedc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800aee0:	7b7a      	ldrb	r2, [r7, #13]
 800aee2:	4908      	ldr	r1, [pc, #32]	@ (800af04 <UARTEx_SetNbDataToProcess+0x98>)
 800aee4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aee6:	fb93 f3f2 	sdiv	r3, r3, r2
 800aeea:	b29a      	uxth	r2, r3
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800aef2:	bf00      	nop
 800aef4:	3714      	adds	r7, #20
 800aef6:	46bd      	mov	sp, r7
 800aef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aefc:	4770      	bx	lr
 800aefe:	bf00      	nop
 800af00:	0800bd08 	.word	0x0800bd08
 800af04:	0800bd10 	.word	0x0800bd10

0800af08 <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 800af08:	b480      	push	{r7}
 800af0a:	b085      	sub	sp, #20
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	60f8      	str	r0, [r7, #12]
 800af10:	607b      	str	r3, [r7, #4]
 800af12:	460b      	mov	r3, r1
 800af14:	817b      	strh	r3, [r7, #10]
 800af16:	4613      	mov	r3, r2
 800af18:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	897a      	ldrh	r2, [r7, #10]
 800af1e:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	893a      	ldrh	r2, [r7, #8]
 800af24:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	687a      	ldr	r2, [r7, #4]
 800af2a:	605a      	str	r2, [r3, #4]
}
 800af2c:	bf00      	nop
 800af2e:	3714      	adds	r7, #20
 800af30:	46bd      	mov	sp, r7
 800af32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af36:	4770      	bx	lr

0800af38 <malloc>:
 800af38:	4b02      	ldr	r3, [pc, #8]	@ (800af44 <malloc+0xc>)
 800af3a:	4601      	mov	r1, r0
 800af3c:	6818      	ldr	r0, [r3, #0]
 800af3e:	f000 b825 	b.w	800af8c <_malloc_r>
 800af42:	bf00      	nop
 800af44:	2000020c 	.word	0x2000020c

0800af48 <sbrk_aligned>:
 800af48:	b570      	push	{r4, r5, r6, lr}
 800af4a:	4e0f      	ldr	r6, [pc, #60]	@ (800af88 <sbrk_aligned+0x40>)
 800af4c:	460c      	mov	r4, r1
 800af4e:	6831      	ldr	r1, [r6, #0]
 800af50:	4605      	mov	r5, r0
 800af52:	b911      	cbnz	r1, 800af5a <sbrk_aligned+0x12>
 800af54:	f000 f8ae 	bl	800b0b4 <_sbrk_r>
 800af58:	6030      	str	r0, [r6, #0]
 800af5a:	4621      	mov	r1, r4
 800af5c:	4628      	mov	r0, r5
 800af5e:	f000 f8a9 	bl	800b0b4 <_sbrk_r>
 800af62:	1c43      	adds	r3, r0, #1
 800af64:	d103      	bne.n	800af6e <sbrk_aligned+0x26>
 800af66:	f04f 34ff 	mov.w	r4, #4294967295
 800af6a:	4620      	mov	r0, r4
 800af6c:	bd70      	pop	{r4, r5, r6, pc}
 800af6e:	1cc4      	adds	r4, r0, #3
 800af70:	f024 0403 	bic.w	r4, r4, #3
 800af74:	42a0      	cmp	r0, r4
 800af76:	d0f8      	beq.n	800af6a <sbrk_aligned+0x22>
 800af78:	1a21      	subs	r1, r4, r0
 800af7a:	4628      	mov	r0, r5
 800af7c:	f000 f89a 	bl	800b0b4 <_sbrk_r>
 800af80:	3001      	adds	r0, #1
 800af82:	d1f2      	bne.n	800af6a <sbrk_aligned+0x22>
 800af84:	e7ef      	b.n	800af66 <sbrk_aligned+0x1e>
 800af86:	bf00      	nop
 800af88:	20001c38 	.word	0x20001c38

0800af8c <_malloc_r>:
 800af8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af90:	1ccd      	adds	r5, r1, #3
 800af92:	f025 0503 	bic.w	r5, r5, #3
 800af96:	3508      	adds	r5, #8
 800af98:	2d0c      	cmp	r5, #12
 800af9a:	bf38      	it	cc
 800af9c:	250c      	movcc	r5, #12
 800af9e:	2d00      	cmp	r5, #0
 800afa0:	4606      	mov	r6, r0
 800afa2:	db01      	blt.n	800afa8 <_malloc_r+0x1c>
 800afa4:	42a9      	cmp	r1, r5
 800afa6:	d904      	bls.n	800afb2 <_malloc_r+0x26>
 800afa8:	230c      	movs	r3, #12
 800afaa:	6033      	str	r3, [r6, #0]
 800afac:	2000      	movs	r0, #0
 800afae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800afb2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b088 <_malloc_r+0xfc>
 800afb6:	f000 f869 	bl	800b08c <__malloc_lock>
 800afba:	f8d8 3000 	ldr.w	r3, [r8]
 800afbe:	461c      	mov	r4, r3
 800afc0:	bb44      	cbnz	r4, 800b014 <_malloc_r+0x88>
 800afc2:	4629      	mov	r1, r5
 800afc4:	4630      	mov	r0, r6
 800afc6:	f7ff ffbf 	bl	800af48 <sbrk_aligned>
 800afca:	1c43      	adds	r3, r0, #1
 800afcc:	4604      	mov	r4, r0
 800afce:	d158      	bne.n	800b082 <_malloc_r+0xf6>
 800afd0:	f8d8 4000 	ldr.w	r4, [r8]
 800afd4:	4627      	mov	r7, r4
 800afd6:	2f00      	cmp	r7, #0
 800afd8:	d143      	bne.n	800b062 <_malloc_r+0xd6>
 800afda:	2c00      	cmp	r4, #0
 800afdc:	d04b      	beq.n	800b076 <_malloc_r+0xea>
 800afde:	6823      	ldr	r3, [r4, #0]
 800afe0:	4639      	mov	r1, r7
 800afe2:	4630      	mov	r0, r6
 800afe4:	eb04 0903 	add.w	r9, r4, r3
 800afe8:	f000 f864 	bl	800b0b4 <_sbrk_r>
 800afec:	4581      	cmp	r9, r0
 800afee:	d142      	bne.n	800b076 <_malloc_r+0xea>
 800aff0:	6821      	ldr	r1, [r4, #0]
 800aff2:	1a6d      	subs	r5, r5, r1
 800aff4:	4629      	mov	r1, r5
 800aff6:	4630      	mov	r0, r6
 800aff8:	f7ff ffa6 	bl	800af48 <sbrk_aligned>
 800affc:	3001      	adds	r0, #1
 800affe:	d03a      	beq.n	800b076 <_malloc_r+0xea>
 800b000:	6823      	ldr	r3, [r4, #0]
 800b002:	442b      	add	r3, r5
 800b004:	6023      	str	r3, [r4, #0]
 800b006:	f8d8 3000 	ldr.w	r3, [r8]
 800b00a:	685a      	ldr	r2, [r3, #4]
 800b00c:	bb62      	cbnz	r2, 800b068 <_malloc_r+0xdc>
 800b00e:	f8c8 7000 	str.w	r7, [r8]
 800b012:	e00f      	b.n	800b034 <_malloc_r+0xa8>
 800b014:	6822      	ldr	r2, [r4, #0]
 800b016:	1b52      	subs	r2, r2, r5
 800b018:	d420      	bmi.n	800b05c <_malloc_r+0xd0>
 800b01a:	2a0b      	cmp	r2, #11
 800b01c:	d917      	bls.n	800b04e <_malloc_r+0xc2>
 800b01e:	1961      	adds	r1, r4, r5
 800b020:	42a3      	cmp	r3, r4
 800b022:	6025      	str	r5, [r4, #0]
 800b024:	bf18      	it	ne
 800b026:	6059      	strne	r1, [r3, #4]
 800b028:	6863      	ldr	r3, [r4, #4]
 800b02a:	bf08      	it	eq
 800b02c:	f8c8 1000 	streq.w	r1, [r8]
 800b030:	5162      	str	r2, [r4, r5]
 800b032:	604b      	str	r3, [r1, #4]
 800b034:	4630      	mov	r0, r6
 800b036:	f000 f82f 	bl	800b098 <__malloc_unlock>
 800b03a:	f104 000b 	add.w	r0, r4, #11
 800b03e:	1d23      	adds	r3, r4, #4
 800b040:	f020 0007 	bic.w	r0, r0, #7
 800b044:	1ac2      	subs	r2, r0, r3
 800b046:	bf1c      	itt	ne
 800b048:	1a1b      	subne	r3, r3, r0
 800b04a:	50a3      	strne	r3, [r4, r2]
 800b04c:	e7af      	b.n	800afae <_malloc_r+0x22>
 800b04e:	6862      	ldr	r2, [r4, #4]
 800b050:	42a3      	cmp	r3, r4
 800b052:	bf0c      	ite	eq
 800b054:	f8c8 2000 	streq.w	r2, [r8]
 800b058:	605a      	strne	r2, [r3, #4]
 800b05a:	e7eb      	b.n	800b034 <_malloc_r+0xa8>
 800b05c:	4623      	mov	r3, r4
 800b05e:	6864      	ldr	r4, [r4, #4]
 800b060:	e7ae      	b.n	800afc0 <_malloc_r+0x34>
 800b062:	463c      	mov	r4, r7
 800b064:	687f      	ldr	r7, [r7, #4]
 800b066:	e7b6      	b.n	800afd6 <_malloc_r+0x4a>
 800b068:	461a      	mov	r2, r3
 800b06a:	685b      	ldr	r3, [r3, #4]
 800b06c:	42a3      	cmp	r3, r4
 800b06e:	d1fb      	bne.n	800b068 <_malloc_r+0xdc>
 800b070:	2300      	movs	r3, #0
 800b072:	6053      	str	r3, [r2, #4]
 800b074:	e7de      	b.n	800b034 <_malloc_r+0xa8>
 800b076:	230c      	movs	r3, #12
 800b078:	6033      	str	r3, [r6, #0]
 800b07a:	4630      	mov	r0, r6
 800b07c:	f000 f80c 	bl	800b098 <__malloc_unlock>
 800b080:	e794      	b.n	800afac <_malloc_r+0x20>
 800b082:	6005      	str	r5, [r0, #0]
 800b084:	e7d6      	b.n	800b034 <_malloc_r+0xa8>
 800b086:	bf00      	nop
 800b088:	20001c3c 	.word	0x20001c3c

0800b08c <__malloc_lock>:
 800b08c:	4801      	ldr	r0, [pc, #4]	@ (800b094 <__malloc_lock+0x8>)
 800b08e:	f000 b84b 	b.w	800b128 <__retarget_lock_acquire_recursive>
 800b092:	bf00      	nop
 800b094:	20001d7c 	.word	0x20001d7c

0800b098 <__malloc_unlock>:
 800b098:	4801      	ldr	r0, [pc, #4]	@ (800b0a0 <__malloc_unlock+0x8>)
 800b09a:	f000 b846 	b.w	800b12a <__retarget_lock_release_recursive>
 800b09e:	bf00      	nop
 800b0a0:	20001d7c 	.word	0x20001d7c

0800b0a4 <memset>:
 800b0a4:	4402      	add	r2, r0
 800b0a6:	4603      	mov	r3, r0
 800b0a8:	4293      	cmp	r3, r2
 800b0aa:	d100      	bne.n	800b0ae <memset+0xa>
 800b0ac:	4770      	bx	lr
 800b0ae:	f803 1b01 	strb.w	r1, [r3], #1
 800b0b2:	e7f9      	b.n	800b0a8 <memset+0x4>

0800b0b4 <_sbrk_r>:
 800b0b4:	b538      	push	{r3, r4, r5, lr}
 800b0b6:	4d06      	ldr	r5, [pc, #24]	@ (800b0d0 <_sbrk_r+0x1c>)
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	4604      	mov	r4, r0
 800b0bc:	4608      	mov	r0, r1
 800b0be:	602b      	str	r3, [r5, #0]
 800b0c0:	f7f7 fe0e 	bl	8002ce0 <_sbrk>
 800b0c4:	1c43      	adds	r3, r0, #1
 800b0c6:	d102      	bne.n	800b0ce <_sbrk_r+0x1a>
 800b0c8:	682b      	ldr	r3, [r5, #0]
 800b0ca:	b103      	cbz	r3, 800b0ce <_sbrk_r+0x1a>
 800b0cc:	6023      	str	r3, [r4, #0]
 800b0ce:	bd38      	pop	{r3, r4, r5, pc}
 800b0d0:	20001d78 	.word	0x20001d78

0800b0d4 <__errno>:
 800b0d4:	4b01      	ldr	r3, [pc, #4]	@ (800b0dc <__errno+0x8>)
 800b0d6:	6818      	ldr	r0, [r3, #0]
 800b0d8:	4770      	bx	lr
 800b0da:	bf00      	nop
 800b0dc:	2000020c 	.word	0x2000020c

0800b0e0 <__libc_init_array>:
 800b0e0:	b570      	push	{r4, r5, r6, lr}
 800b0e2:	4d0d      	ldr	r5, [pc, #52]	@ (800b118 <__libc_init_array+0x38>)
 800b0e4:	4c0d      	ldr	r4, [pc, #52]	@ (800b11c <__libc_init_array+0x3c>)
 800b0e6:	1b64      	subs	r4, r4, r5
 800b0e8:	10a4      	asrs	r4, r4, #2
 800b0ea:	2600      	movs	r6, #0
 800b0ec:	42a6      	cmp	r6, r4
 800b0ee:	d109      	bne.n	800b104 <__libc_init_array+0x24>
 800b0f0:	4d0b      	ldr	r5, [pc, #44]	@ (800b120 <__libc_init_array+0x40>)
 800b0f2:	4c0c      	ldr	r4, [pc, #48]	@ (800b124 <__libc_init_array+0x44>)
 800b0f4:	f000 fd9c 	bl	800bc30 <_init>
 800b0f8:	1b64      	subs	r4, r4, r5
 800b0fa:	10a4      	asrs	r4, r4, #2
 800b0fc:	2600      	movs	r6, #0
 800b0fe:	42a6      	cmp	r6, r4
 800b100:	d105      	bne.n	800b10e <__libc_init_array+0x2e>
 800b102:	bd70      	pop	{r4, r5, r6, pc}
 800b104:	f855 3b04 	ldr.w	r3, [r5], #4
 800b108:	4798      	blx	r3
 800b10a:	3601      	adds	r6, #1
 800b10c:	e7ee      	b.n	800b0ec <__libc_init_array+0xc>
 800b10e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b112:	4798      	blx	r3
 800b114:	3601      	adds	r6, #1
 800b116:	e7f2      	b.n	800b0fe <__libc_init_array+0x1e>
 800b118:	0800c0f0 	.word	0x0800c0f0
 800b11c:	0800c0f0 	.word	0x0800c0f0
 800b120:	0800c0f0 	.word	0x0800c0f0
 800b124:	0800c0f4 	.word	0x0800c0f4

0800b128 <__retarget_lock_acquire_recursive>:
 800b128:	4770      	bx	lr

0800b12a <__retarget_lock_release_recursive>:
 800b12a:	4770      	bx	lr

0800b12c <memcpy>:
 800b12c:	440a      	add	r2, r1
 800b12e:	4291      	cmp	r1, r2
 800b130:	f100 33ff 	add.w	r3, r0, #4294967295
 800b134:	d100      	bne.n	800b138 <memcpy+0xc>
 800b136:	4770      	bx	lr
 800b138:	b510      	push	{r4, lr}
 800b13a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b13e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b142:	4291      	cmp	r1, r2
 800b144:	d1f9      	bne.n	800b13a <memcpy+0xe>
 800b146:	bd10      	pop	{r4, pc}

0800b148 <cosf>:
 800b148:	ee10 3a10 	vmov	r3, s0
 800b14c:	b507      	push	{r0, r1, r2, lr}
 800b14e:	4a1e      	ldr	r2, [pc, #120]	@ (800b1c8 <cosf+0x80>)
 800b150:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b154:	4293      	cmp	r3, r2
 800b156:	d806      	bhi.n	800b166 <cosf+0x1e>
 800b158:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 800b1cc <cosf+0x84>
 800b15c:	b003      	add	sp, #12
 800b15e:	f85d eb04 	ldr.w	lr, [sp], #4
 800b162:	f000 b87b 	b.w	800b25c <__kernel_cosf>
 800b166:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800b16a:	d304      	bcc.n	800b176 <cosf+0x2e>
 800b16c:	ee30 0a40 	vsub.f32	s0, s0, s0
 800b170:	b003      	add	sp, #12
 800b172:	f85d fb04 	ldr.w	pc, [sp], #4
 800b176:	4668      	mov	r0, sp
 800b178:	f000 f910 	bl	800b39c <__ieee754_rem_pio2f>
 800b17c:	f000 0003 	and.w	r0, r0, #3
 800b180:	2801      	cmp	r0, #1
 800b182:	d009      	beq.n	800b198 <cosf+0x50>
 800b184:	2802      	cmp	r0, #2
 800b186:	d010      	beq.n	800b1aa <cosf+0x62>
 800b188:	b9b0      	cbnz	r0, 800b1b8 <cosf+0x70>
 800b18a:	eddd 0a01 	vldr	s1, [sp, #4]
 800b18e:	ed9d 0a00 	vldr	s0, [sp]
 800b192:	f000 f863 	bl	800b25c <__kernel_cosf>
 800b196:	e7eb      	b.n	800b170 <cosf+0x28>
 800b198:	eddd 0a01 	vldr	s1, [sp, #4]
 800b19c:	ed9d 0a00 	vldr	s0, [sp]
 800b1a0:	f000 f8b4 	bl	800b30c <__kernel_sinf>
 800b1a4:	eeb1 0a40 	vneg.f32	s0, s0
 800b1a8:	e7e2      	b.n	800b170 <cosf+0x28>
 800b1aa:	eddd 0a01 	vldr	s1, [sp, #4]
 800b1ae:	ed9d 0a00 	vldr	s0, [sp]
 800b1b2:	f000 f853 	bl	800b25c <__kernel_cosf>
 800b1b6:	e7f5      	b.n	800b1a4 <cosf+0x5c>
 800b1b8:	eddd 0a01 	vldr	s1, [sp, #4]
 800b1bc:	ed9d 0a00 	vldr	s0, [sp]
 800b1c0:	2001      	movs	r0, #1
 800b1c2:	f000 f8a3 	bl	800b30c <__kernel_sinf>
 800b1c6:	e7d3      	b.n	800b170 <cosf+0x28>
 800b1c8:	3f490fd8 	.word	0x3f490fd8
 800b1cc:	00000000 	.word	0x00000000

0800b1d0 <sinf>:
 800b1d0:	ee10 3a10 	vmov	r3, s0
 800b1d4:	b507      	push	{r0, r1, r2, lr}
 800b1d6:	4a1f      	ldr	r2, [pc, #124]	@ (800b254 <sinf+0x84>)
 800b1d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b1dc:	4293      	cmp	r3, r2
 800b1de:	d807      	bhi.n	800b1f0 <sinf+0x20>
 800b1e0:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800b258 <sinf+0x88>
 800b1e4:	2000      	movs	r0, #0
 800b1e6:	b003      	add	sp, #12
 800b1e8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b1ec:	f000 b88e 	b.w	800b30c <__kernel_sinf>
 800b1f0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800b1f4:	d304      	bcc.n	800b200 <sinf+0x30>
 800b1f6:	ee30 0a40 	vsub.f32	s0, s0, s0
 800b1fa:	b003      	add	sp, #12
 800b1fc:	f85d fb04 	ldr.w	pc, [sp], #4
 800b200:	4668      	mov	r0, sp
 800b202:	f000 f8cb 	bl	800b39c <__ieee754_rem_pio2f>
 800b206:	f000 0003 	and.w	r0, r0, #3
 800b20a:	2801      	cmp	r0, #1
 800b20c:	d00a      	beq.n	800b224 <sinf+0x54>
 800b20e:	2802      	cmp	r0, #2
 800b210:	d00f      	beq.n	800b232 <sinf+0x62>
 800b212:	b9c0      	cbnz	r0, 800b246 <sinf+0x76>
 800b214:	eddd 0a01 	vldr	s1, [sp, #4]
 800b218:	ed9d 0a00 	vldr	s0, [sp]
 800b21c:	2001      	movs	r0, #1
 800b21e:	f000 f875 	bl	800b30c <__kernel_sinf>
 800b222:	e7ea      	b.n	800b1fa <sinf+0x2a>
 800b224:	eddd 0a01 	vldr	s1, [sp, #4]
 800b228:	ed9d 0a00 	vldr	s0, [sp]
 800b22c:	f000 f816 	bl	800b25c <__kernel_cosf>
 800b230:	e7e3      	b.n	800b1fa <sinf+0x2a>
 800b232:	eddd 0a01 	vldr	s1, [sp, #4]
 800b236:	ed9d 0a00 	vldr	s0, [sp]
 800b23a:	2001      	movs	r0, #1
 800b23c:	f000 f866 	bl	800b30c <__kernel_sinf>
 800b240:	eeb1 0a40 	vneg.f32	s0, s0
 800b244:	e7d9      	b.n	800b1fa <sinf+0x2a>
 800b246:	eddd 0a01 	vldr	s1, [sp, #4]
 800b24a:	ed9d 0a00 	vldr	s0, [sp]
 800b24e:	f000 f805 	bl	800b25c <__kernel_cosf>
 800b252:	e7f5      	b.n	800b240 <sinf+0x70>
 800b254:	3f490fd8 	.word	0x3f490fd8
 800b258:	00000000 	.word	0x00000000

0800b25c <__kernel_cosf>:
 800b25c:	ee10 3a10 	vmov	r3, s0
 800b260:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b264:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800b268:	eef0 6a40 	vmov.f32	s13, s0
 800b26c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800b270:	d204      	bcs.n	800b27c <__kernel_cosf+0x20>
 800b272:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800b276:	ee17 2a90 	vmov	r2, s15
 800b27a:	b342      	cbz	r2, 800b2ce <__kernel_cosf+0x72>
 800b27c:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800b280:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800b2ec <__kernel_cosf+0x90>
 800b284:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800b2f0 <__kernel_cosf+0x94>
 800b288:	4a1a      	ldr	r2, [pc, #104]	@ (800b2f4 <__kernel_cosf+0x98>)
 800b28a:	eea7 6a27 	vfma.f32	s12, s14, s15
 800b28e:	4293      	cmp	r3, r2
 800b290:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800b2f8 <__kernel_cosf+0x9c>
 800b294:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b298:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800b2fc <__kernel_cosf+0xa0>
 800b29c:	eea7 6a87 	vfma.f32	s12, s15, s14
 800b2a0:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800b300 <__kernel_cosf+0xa4>
 800b2a4:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b2a8:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800b304 <__kernel_cosf+0xa8>
 800b2ac:	eea7 6a87 	vfma.f32	s12, s15, s14
 800b2b0:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800b2b4:	ee26 6a07 	vmul.f32	s12, s12, s14
 800b2b8:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800b2bc:	eee7 0a06 	vfma.f32	s1, s14, s12
 800b2c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b2c4:	d804      	bhi.n	800b2d0 <__kernel_cosf+0x74>
 800b2c6:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800b2ca:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b2ce:	4770      	bx	lr
 800b2d0:	4a0d      	ldr	r2, [pc, #52]	@ (800b308 <__kernel_cosf+0xac>)
 800b2d2:	4293      	cmp	r3, r2
 800b2d4:	bf9a      	itte	ls
 800b2d6:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800b2da:	ee07 3a10 	vmovls	s14, r3
 800b2de:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800b2e2:	ee30 0a47 	vsub.f32	s0, s0, s14
 800b2e6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b2ea:	e7ec      	b.n	800b2c6 <__kernel_cosf+0x6a>
 800b2ec:	ad47d74e 	.word	0xad47d74e
 800b2f0:	310f74f6 	.word	0x310f74f6
 800b2f4:	3e999999 	.word	0x3e999999
 800b2f8:	b493f27c 	.word	0xb493f27c
 800b2fc:	37d00d01 	.word	0x37d00d01
 800b300:	bab60b61 	.word	0xbab60b61
 800b304:	3d2aaaab 	.word	0x3d2aaaab
 800b308:	3f480000 	.word	0x3f480000

0800b30c <__kernel_sinf>:
 800b30c:	ee10 3a10 	vmov	r3, s0
 800b310:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b314:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800b318:	d204      	bcs.n	800b324 <__kernel_sinf+0x18>
 800b31a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800b31e:	ee17 3a90 	vmov	r3, s15
 800b322:	b35b      	cbz	r3, 800b37c <__kernel_sinf+0x70>
 800b324:	ee20 7a00 	vmul.f32	s14, s0, s0
 800b328:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800b380 <__kernel_sinf+0x74>
 800b32c:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800b384 <__kernel_sinf+0x78>
 800b330:	eea7 6a27 	vfma.f32	s12, s14, s15
 800b334:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800b388 <__kernel_sinf+0x7c>
 800b338:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b33c:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800b38c <__kernel_sinf+0x80>
 800b340:	eea7 6a87 	vfma.f32	s12, s15, s14
 800b344:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800b390 <__kernel_sinf+0x84>
 800b348:	ee60 6a07 	vmul.f32	s13, s0, s14
 800b34c:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b350:	b930      	cbnz	r0, 800b360 <__kernel_sinf+0x54>
 800b352:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800b394 <__kernel_sinf+0x88>
 800b356:	eea7 6a27 	vfma.f32	s12, s14, s15
 800b35a:	eea6 0a26 	vfma.f32	s0, s12, s13
 800b35e:	4770      	bx	lr
 800b360:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800b364:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800b368:	eee0 7a86 	vfma.f32	s15, s1, s12
 800b36c:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800b370:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800b398 <__kernel_sinf+0x8c>
 800b374:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800b378:	ee30 0a60 	vsub.f32	s0, s0, s1
 800b37c:	4770      	bx	lr
 800b37e:	bf00      	nop
 800b380:	2f2ec9d3 	.word	0x2f2ec9d3
 800b384:	b2d72f34 	.word	0xb2d72f34
 800b388:	3638ef1b 	.word	0x3638ef1b
 800b38c:	b9500d01 	.word	0xb9500d01
 800b390:	3c088889 	.word	0x3c088889
 800b394:	be2aaaab 	.word	0xbe2aaaab
 800b398:	3e2aaaab 	.word	0x3e2aaaab

0800b39c <__ieee754_rem_pio2f>:
 800b39c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b39e:	ee10 6a10 	vmov	r6, s0
 800b3a2:	4b88      	ldr	r3, [pc, #544]	@ (800b5c4 <__ieee754_rem_pio2f+0x228>)
 800b3a4:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800b3a8:	429d      	cmp	r5, r3
 800b3aa:	b087      	sub	sp, #28
 800b3ac:	4604      	mov	r4, r0
 800b3ae:	d805      	bhi.n	800b3bc <__ieee754_rem_pio2f+0x20>
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	ed80 0a00 	vstr	s0, [r0]
 800b3b6:	6043      	str	r3, [r0, #4]
 800b3b8:	2000      	movs	r0, #0
 800b3ba:	e022      	b.n	800b402 <__ieee754_rem_pio2f+0x66>
 800b3bc:	4b82      	ldr	r3, [pc, #520]	@ (800b5c8 <__ieee754_rem_pio2f+0x22c>)
 800b3be:	429d      	cmp	r5, r3
 800b3c0:	d83a      	bhi.n	800b438 <__ieee754_rem_pio2f+0x9c>
 800b3c2:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800b3c6:	2e00      	cmp	r6, #0
 800b3c8:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800b5cc <__ieee754_rem_pio2f+0x230>
 800b3cc:	4a80      	ldr	r2, [pc, #512]	@ (800b5d0 <__ieee754_rem_pio2f+0x234>)
 800b3ce:	f023 030f 	bic.w	r3, r3, #15
 800b3d2:	dd18      	ble.n	800b406 <__ieee754_rem_pio2f+0x6a>
 800b3d4:	4293      	cmp	r3, r2
 800b3d6:	ee70 7a47 	vsub.f32	s15, s0, s14
 800b3da:	bf09      	itett	eq
 800b3dc:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800b5d4 <__ieee754_rem_pio2f+0x238>
 800b3e0:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 800b5d8 <__ieee754_rem_pio2f+0x23c>
 800b3e4:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800b5dc <__ieee754_rem_pio2f+0x240>
 800b3e8:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800b3ec:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800b3f0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b3f4:	ed80 7a00 	vstr	s14, [r0]
 800b3f8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b3fc:	edc0 7a01 	vstr	s15, [r0, #4]
 800b400:	2001      	movs	r0, #1
 800b402:	b007      	add	sp, #28
 800b404:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b406:	4293      	cmp	r3, r2
 800b408:	ee70 7a07 	vadd.f32	s15, s0, s14
 800b40c:	bf09      	itett	eq
 800b40e:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800b5d4 <__ieee754_rem_pio2f+0x238>
 800b412:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 800b5d8 <__ieee754_rem_pio2f+0x23c>
 800b416:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800b5dc <__ieee754_rem_pio2f+0x240>
 800b41a:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800b41e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800b422:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b426:	ed80 7a00 	vstr	s14, [r0]
 800b42a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b42e:	edc0 7a01 	vstr	s15, [r0, #4]
 800b432:	f04f 30ff 	mov.w	r0, #4294967295
 800b436:	e7e4      	b.n	800b402 <__ieee754_rem_pio2f+0x66>
 800b438:	4b69      	ldr	r3, [pc, #420]	@ (800b5e0 <__ieee754_rem_pio2f+0x244>)
 800b43a:	429d      	cmp	r5, r3
 800b43c:	d873      	bhi.n	800b526 <__ieee754_rem_pio2f+0x18a>
 800b43e:	f000 f8dd 	bl	800b5fc <fabsf>
 800b442:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800b5e4 <__ieee754_rem_pio2f+0x248>
 800b446:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800b44a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800b44e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b452:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b456:	ee17 0a90 	vmov	r0, s15
 800b45a:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800b5cc <__ieee754_rem_pio2f+0x230>
 800b45e:	eea7 0a67 	vfms.f32	s0, s14, s15
 800b462:	281f      	cmp	r0, #31
 800b464:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800b5d8 <__ieee754_rem_pio2f+0x23c>
 800b468:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b46c:	eeb1 6a47 	vneg.f32	s12, s14
 800b470:	ee70 6a67 	vsub.f32	s13, s0, s15
 800b474:	ee16 1a90 	vmov	r1, s13
 800b478:	dc09      	bgt.n	800b48e <__ieee754_rem_pio2f+0xf2>
 800b47a:	4a5b      	ldr	r2, [pc, #364]	@ (800b5e8 <__ieee754_rem_pio2f+0x24c>)
 800b47c:	1e47      	subs	r7, r0, #1
 800b47e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800b482:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800b486:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800b48a:	4293      	cmp	r3, r2
 800b48c:	d107      	bne.n	800b49e <__ieee754_rem_pio2f+0x102>
 800b48e:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800b492:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800b496:	2a08      	cmp	r2, #8
 800b498:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800b49c:	dc14      	bgt.n	800b4c8 <__ieee754_rem_pio2f+0x12c>
 800b49e:	6021      	str	r1, [r4, #0]
 800b4a0:	ed94 7a00 	vldr	s14, [r4]
 800b4a4:	ee30 0a47 	vsub.f32	s0, s0, s14
 800b4a8:	2e00      	cmp	r6, #0
 800b4aa:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b4ae:	ed84 0a01 	vstr	s0, [r4, #4]
 800b4b2:	daa6      	bge.n	800b402 <__ieee754_rem_pio2f+0x66>
 800b4b4:	eeb1 7a47 	vneg.f32	s14, s14
 800b4b8:	eeb1 0a40 	vneg.f32	s0, s0
 800b4bc:	ed84 7a00 	vstr	s14, [r4]
 800b4c0:	ed84 0a01 	vstr	s0, [r4, #4]
 800b4c4:	4240      	negs	r0, r0
 800b4c6:	e79c      	b.n	800b402 <__ieee754_rem_pio2f+0x66>
 800b4c8:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800b5d4 <__ieee754_rem_pio2f+0x238>
 800b4cc:	eef0 6a40 	vmov.f32	s13, s0
 800b4d0:	eee6 6a25 	vfma.f32	s13, s12, s11
 800b4d4:	ee70 7a66 	vsub.f32	s15, s0, s13
 800b4d8:	eee6 7a25 	vfma.f32	s15, s12, s11
 800b4dc:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800b5dc <__ieee754_rem_pio2f+0x240>
 800b4e0:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800b4e4:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800b4e8:	ee15 2a90 	vmov	r2, s11
 800b4ec:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800b4f0:	1a5b      	subs	r3, r3, r1
 800b4f2:	2b19      	cmp	r3, #25
 800b4f4:	dc04      	bgt.n	800b500 <__ieee754_rem_pio2f+0x164>
 800b4f6:	edc4 5a00 	vstr	s11, [r4]
 800b4fa:	eeb0 0a66 	vmov.f32	s0, s13
 800b4fe:	e7cf      	b.n	800b4a0 <__ieee754_rem_pio2f+0x104>
 800b500:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800b5ec <__ieee754_rem_pio2f+0x250>
 800b504:	eeb0 0a66 	vmov.f32	s0, s13
 800b508:	eea6 0a25 	vfma.f32	s0, s12, s11
 800b50c:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800b510:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800b5f0 <__ieee754_rem_pio2f+0x254>
 800b514:	eee6 7a25 	vfma.f32	s15, s12, s11
 800b518:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800b51c:	ee30 7a67 	vsub.f32	s14, s0, s15
 800b520:	ed84 7a00 	vstr	s14, [r4]
 800b524:	e7bc      	b.n	800b4a0 <__ieee754_rem_pio2f+0x104>
 800b526:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800b52a:	d306      	bcc.n	800b53a <__ieee754_rem_pio2f+0x19e>
 800b52c:	ee70 7a40 	vsub.f32	s15, s0, s0
 800b530:	edc0 7a01 	vstr	s15, [r0, #4]
 800b534:	edc0 7a00 	vstr	s15, [r0]
 800b538:	e73e      	b.n	800b3b8 <__ieee754_rem_pio2f+0x1c>
 800b53a:	15ea      	asrs	r2, r5, #23
 800b53c:	3a86      	subs	r2, #134	@ 0x86
 800b53e:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800b542:	ee07 3a90 	vmov	s15, r3
 800b546:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800b54a:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800b5f4 <__ieee754_rem_pio2f+0x258>
 800b54e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b552:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b556:	ed8d 7a03 	vstr	s14, [sp, #12]
 800b55a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b55e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800b562:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b566:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b56a:	ed8d 7a04 	vstr	s14, [sp, #16]
 800b56e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b572:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b57a:	edcd 7a05 	vstr	s15, [sp, #20]
 800b57e:	d11e      	bne.n	800b5be <__ieee754_rem_pio2f+0x222>
 800b580:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800b584:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b588:	bf0c      	ite	eq
 800b58a:	2301      	moveq	r3, #1
 800b58c:	2302      	movne	r3, #2
 800b58e:	491a      	ldr	r1, [pc, #104]	@ (800b5f8 <__ieee754_rem_pio2f+0x25c>)
 800b590:	9101      	str	r1, [sp, #4]
 800b592:	2102      	movs	r1, #2
 800b594:	9100      	str	r1, [sp, #0]
 800b596:	a803      	add	r0, sp, #12
 800b598:	4621      	mov	r1, r4
 800b59a:	f000 f89d 	bl	800b6d8 <__kernel_rem_pio2f>
 800b59e:	2e00      	cmp	r6, #0
 800b5a0:	f6bf af2f 	bge.w	800b402 <__ieee754_rem_pio2f+0x66>
 800b5a4:	edd4 7a00 	vldr	s15, [r4]
 800b5a8:	eef1 7a67 	vneg.f32	s15, s15
 800b5ac:	edc4 7a00 	vstr	s15, [r4]
 800b5b0:	edd4 7a01 	vldr	s15, [r4, #4]
 800b5b4:	eef1 7a67 	vneg.f32	s15, s15
 800b5b8:	edc4 7a01 	vstr	s15, [r4, #4]
 800b5bc:	e782      	b.n	800b4c4 <__ieee754_rem_pio2f+0x128>
 800b5be:	2303      	movs	r3, #3
 800b5c0:	e7e5      	b.n	800b58e <__ieee754_rem_pio2f+0x1f2>
 800b5c2:	bf00      	nop
 800b5c4:	3f490fd8 	.word	0x3f490fd8
 800b5c8:	4016cbe3 	.word	0x4016cbe3
 800b5cc:	3fc90f80 	.word	0x3fc90f80
 800b5d0:	3fc90fd0 	.word	0x3fc90fd0
 800b5d4:	37354400 	.word	0x37354400
 800b5d8:	37354443 	.word	0x37354443
 800b5dc:	2e85a308 	.word	0x2e85a308
 800b5e0:	43490f80 	.word	0x43490f80
 800b5e4:	3f22f984 	.word	0x3f22f984
 800b5e8:	0800bd18 	.word	0x0800bd18
 800b5ec:	2e85a300 	.word	0x2e85a300
 800b5f0:	248d3132 	.word	0x248d3132
 800b5f4:	43800000 	.word	0x43800000
 800b5f8:	0800bd98 	.word	0x0800bd98

0800b5fc <fabsf>:
 800b5fc:	ee10 3a10 	vmov	r3, s0
 800b600:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b604:	ee00 3a10 	vmov	s0, r3
 800b608:	4770      	bx	lr
	...

0800b60c <scalbnf>:
 800b60c:	ee10 3a10 	vmov	r3, s0
 800b610:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800b614:	d02b      	beq.n	800b66e <scalbnf+0x62>
 800b616:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800b61a:	d302      	bcc.n	800b622 <scalbnf+0x16>
 800b61c:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b620:	4770      	bx	lr
 800b622:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800b626:	d123      	bne.n	800b670 <scalbnf+0x64>
 800b628:	4b24      	ldr	r3, [pc, #144]	@ (800b6bc <scalbnf+0xb0>)
 800b62a:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800b6c0 <scalbnf+0xb4>
 800b62e:	4298      	cmp	r0, r3
 800b630:	ee20 0a27 	vmul.f32	s0, s0, s15
 800b634:	db17      	blt.n	800b666 <scalbnf+0x5a>
 800b636:	ee10 3a10 	vmov	r3, s0
 800b63a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800b63e:	3a19      	subs	r2, #25
 800b640:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800b644:	4288      	cmp	r0, r1
 800b646:	dd15      	ble.n	800b674 <scalbnf+0x68>
 800b648:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800b6c4 <scalbnf+0xb8>
 800b64c:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800b6c8 <scalbnf+0xbc>
 800b650:	ee10 3a10 	vmov	r3, s0
 800b654:	eeb0 7a67 	vmov.f32	s14, s15
 800b658:	2b00      	cmp	r3, #0
 800b65a:	bfb8      	it	lt
 800b65c:	eef0 7a66 	vmovlt.f32	s15, s13
 800b660:	ee27 0a87 	vmul.f32	s0, s15, s14
 800b664:	4770      	bx	lr
 800b666:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800b6cc <scalbnf+0xc0>
 800b66a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800b66e:	4770      	bx	lr
 800b670:	0dd2      	lsrs	r2, r2, #23
 800b672:	e7e5      	b.n	800b640 <scalbnf+0x34>
 800b674:	4410      	add	r0, r2
 800b676:	28fe      	cmp	r0, #254	@ 0xfe
 800b678:	dce6      	bgt.n	800b648 <scalbnf+0x3c>
 800b67a:	2800      	cmp	r0, #0
 800b67c:	dd06      	ble.n	800b68c <scalbnf+0x80>
 800b67e:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800b682:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800b686:	ee00 3a10 	vmov	s0, r3
 800b68a:	4770      	bx	lr
 800b68c:	f110 0f16 	cmn.w	r0, #22
 800b690:	da09      	bge.n	800b6a6 <scalbnf+0x9a>
 800b692:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800b6cc <scalbnf+0xc0>
 800b696:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800b6d0 <scalbnf+0xc4>
 800b69a:	ee10 3a10 	vmov	r3, s0
 800b69e:	eeb0 7a67 	vmov.f32	s14, s15
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	e7d9      	b.n	800b65a <scalbnf+0x4e>
 800b6a6:	3019      	adds	r0, #25
 800b6a8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800b6ac:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800b6b0:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800b6d4 <scalbnf+0xc8>
 800b6b4:	ee07 3a90 	vmov	s15, r3
 800b6b8:	e7d7      	b.n	800b66a <scalbnf+0x5e>
 800b6ba:	bf00      	nop
 800b6bc:	ffff3cb0 	.word	0xffff3cb0
 800b6c0:	4c000000 	.word	0x4c000000
 800b6c4:	7149f2ca 	.word	0x7149f2ca
 800b6c8:	f149f2ca 	.word	0xf149f2ca
 800b6cc:	0da24260 	.word	0x0da24260
 800b6d0:	8da24260 	.word	0x8da24260
 800b6d4:	33000000 	.word	0x33000000

0800b6d8 <__kernel_rem_pio2f>:
 800b6d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6dc:	ed2d 8b04 	vpush	{d8-d9}
 800b6e0:	b0d9      	sub	sp, #356	@ 0x164
 800b6e2:	4690      	mov	r8, r2
 800b6e4:	9001      	str	r0, [sp, #4]
 800b6e6:	4ab6      	ldr	r2, [pc, #728]	@ (800b9c0 <__kernel_rem_pio2f+0x2e8>)
 800b6e8:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800b6ea:	f118 0f04 	cmn.w	r8, #4
 800b6ee:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800b6f2:	460f      	mov	r7, r1
 800b6f4:	f103 3bff 	add.w	fp, r3, #4294967295
 800b6f8:	db26      	blt.n	800b748 <__kernel_rem_pio2f+0x70>
 800b6fa:	f1b8 0203 	subs.w	r2, r8, #3
 800b6fe:	bf48      	it	mi
 800b700:	f108 0204 	addmi.w	r2, r8, #4
 800b704:	10d2      	asrs	r2, r2, #3
 800b706:	1c55      	adds	r5, r2, #1
 800b708:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800b70a:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 800b9d0 <__kernel_rem_pio2f+0x2f8>
 800b70e:	00e8      	lsls	r0, r5, #3
 800b710:	eba2 060b 	sub.w	r6, r2, fp
 800b714:	9002      	str	r0, [sp, #8]
 800b716:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 800b71a:	eb0a 0c0b 	add.w	ip, sl, fp
 800b71e:	ac1c      	add	r4, sp, #112	@ 0x70
 800b720:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 800b724:	2000      	movs	r0, #0
 800b726:	4560      	cmp	r0, ip
 800b728:	dd10      	ble.n	800b74c <__kernel_rem_pio2f+0x74>
 800b72a:	a91c      	add	r1, sp, #112	@ 0x70
 800b72c:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800b730:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 800b734:	2600      	movs	r6, #0
 800b736:	4556      	cmp	r6, sl
 800b738:	dc24      	bgt.n	800b784 <__kernel_rem_pio2f+0xac>
 800b73a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800b73e:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 800b9d0 <__kernel_rem_pio2f+0x2f8>
 800b742:	4684      	mov	ip, r0
 800b744:	2400      	movs	r4, #0
 800b746:	e016      	b.n	800b776 <__kernel_rem_pio2f+0x9e>
 800b748:	2200      	movs	r2, #0
 800b74a:	e7dc      	b.n	800b706 <__kernel_rem_pio2f+0x2e>
 800b74c:	42c6      	cmn	r6, r0
 800b74e:	bf5d      	ittte	pl
 800b750:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 800b754:	ee07 1a90 	vmovpl	s15, r1
 800b758:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800b75c:	eef0 7a47 	vmovmi.f32	s15, s14
 800b760:	ece4 7a01 	vstmia	r4!, {s15}
 800b764:	3001      	adds	r0, #1
 800b766:	e7de      	b.n	800b726 <__kernel_rem_pio2f+0x4e>
 800b768:	ecfe 6a01 	vldmia	lr!, {s13}
 800b76c:	ed3c 7a01 	vldmdb	ip!, {s14}
 800b770:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b774:	3401      	adds	r4, #1
 800b776:	455c      	cmp	r4, fp
 800b778:	ddf6      	ble.n	800b768 <__kernel_rem_pio2f+0x90>
 800b77a:	ece9 7a01 	vstmia	r9!, {s15}
 800b77e:	3601      	adds	r6, #1
 800b780:	3004      	adds	r0, #4
 800b782:	e7d8      	b.n	800b736 <__kernel_rem_pio2f+0x5e>
 800b784:	a908      	add	r1, sp, #32
 800b786:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b78a:	9104      	str	r1, [sp, #16]
 800b78c:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800b78e:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 800b9cc <__kernel_rem_pio2f+0x2f4>
 800b792:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 800b9c8 <__kernel_rem_pio2f+0x2f0>
 800b796:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800b79a:	9203      	str	r2, [sp, #12]
 800b79c:	4654      	mov	r4, sl
 800b79e:	00a2      	lsls	r2, r4, #2
 800b7a0:	9205      	str	r2, [sp, #20]
 800b7a2:	aa58      	add	r2, sp, #352	@ 0x160
 800b7a4:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800b7a8:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 800b7ac:	a944      	add	r1, sp, #272	@ 0x110
 800b7ae:	aa08      	add	r2, sp, #32
 800b7b0:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800b7b4:	4694      	mov	ip, r2
 800b7b6:	4626      	mov	r6, r4
 800b7b8:	2e00      	cmp	r6, #0
 800b7ba:	dc4c      	bgt.n	800b856 <__kernel_rem_pio2f+0x17e>
 800b7bc:	4628      	mov	r0, r5
 800b7be:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b7c2:	f7ff ff23 	bl	800b60c <scalbnf>
 800b7c6:	eeb0 8a40 	vmov.f32	s16, s0
 800b7ca:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800b7ce:	ee28 0a00 	vmul.f32	s0, s16, s0
 800b7d2:	f000 f9e9 	bl	800bba8 <floorf>
 800b7d6:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800b7da:	eea0 8a67 	vfms.f32	s16, s0, s15
 800b7de:	2d00      	cmp	r5, #0
 800b7e0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b7e4:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800b7e8:	ee17 9a90 	vmov	r9, s15
 800b7ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b7f0:	ee38 8a67 	vsub.f32	s16, s16, s15
 800b7f4:	dd41      	ble.n	800b87a <__kernel_rem_pio2f+0x1a2>
 800b7f6:	f104 3cff 	add.w	ip, r4, #4294967295
 800b7fa:	a908      	add	r1, sp, #32
 800b7fc:	f1c5 0e08 	rsb	lr, r5, #8
 800b800:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 800b804:	fa46 f00e 	asr.w	r0, r6, lr
 800b808:	4481      	add	r9, r0
 800b80a:	fa00 f00e 	lsl.w	r0, r0, lr
 800b80e:	1a36      	subs	r6, r6, r0
 800b810:	f1c5 0007 	rsb	r0, r5, #7
 800b814:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 800b818:	4106      	asrs	r6, r0
 800b81a:	2e00      	cmp	r6, #0
 800b81c:	dd3c      	ble.n	800b898 <__kernel_rem_pio2f+0x1c0>
 800b81e:	f04f 0e00 	mov.w	lr, #0
 800b822:	f109 0901 	add.w	r9, r9, #1
 800b826:	4670      	mov	r0, lr
 800b828:	4574      	cmp	r4, lr
 800b82a:	dc68      	bgt.n	800b8fe <__kernel_rem_pio2f+0x226>
 800b82c:	2d00      	cmp	r5, #0
 800b82e:	dd03      	ble.n	800b838 <__kernel_rem_pio2f+0x160>
 800b830:	2d01      	cmp	r5, #1
 800b832:	d074      	beq.n	800b91e <__kernel_rem_pio2f+0x246>
 800b834:	2d02      	cmp	r5, #2
 800b836:	d07d      	beq.n	800b934 <__kernel_rem_pio2f+0x25c>
 800b838:	2e02      	cmp	r6, #2
 800b83a:	d12d      	bne.n	800b898 <__kernel_rem_pio2f+0x1c0>
 800b83c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800b840:	ee30 8a48 	vsub.f32	s16, s0, s16
 800b844:	b340      	cbz	r0, 800b898 <__kernel_rem_pio2f+0x1c0>
 800b846:	4628      	mov	r0, r5
 800b848:	9306      	str	r3, [sp, #24]
 800b84a:	f7ff fedf 	bl	800b60c <scalbnf>
 800b84e:	9b06      	ldr	r3, [sp, #24]
 800b850:	ee38 8a40 	vsub.f32	s16, s16, s0
 800b854:	e020      	b.n	800b898 <__kernel_rem_pio2f+0x1c0>
 800b856:	ee60 7a28 	vmul.f32	s15, s0, s17
 800b85a:	3e01      	subs	r6, #1
 800b85c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b860:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b864:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800b868:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800b86c:	ecac 0a01 	vstmia	ip!, {s0}
 800b870:	ed30 0a01 	vldmdb	r0!, {s0}
 800b874:	ee37 0a80 	vadd.f32	s0, s15, s0
 800b878:	e79e      	b.n	800b7b8 <__kernel_rem_pio2f+0xe0>
 800b87a:	d105      	bne.n	800b888 <__kernel_rem_pio2f+0x1b0>
 800b87c:	1e60      	subs	r0, r4, #1
 800b87e:	a908      	add	r1, sp, #32
 800b880:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 800b884:	11f6      	asrs	r6, r6, #7
 800b886:	e7c8      	b.n	800b81a <__kernel_rem_pio2f+0x142>
 800b888:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800b88c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800b890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b894:	da31      	bge.n	800b8fa <__kernel_rem_pio2f+0x222>
 800b896:	2600      	movs	r6, #0
 800b898:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800b89c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8a0:	f040 8098 	bne.w	800b9d4 <__kernel_rem_pio2f+0x2fc>
 800b8a4:	1e60      	subs	r0, r4, #1
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	4550      	cmp	r0, sl
 800b8aa:	da4b      	bge.n	800b944 <__kernel_rem_pio2f+0x26c>
 800b8ac:	2a00      	cmp	r2, #0
 800b8ae:	d065      	beq.n	800b97c <__kernel_rem_pio2f+0x2a4>
 800b8b0:	3c01      	subs	r4, #1
 800b8b2:	ab08      	add	r3, sp, #32
 800b8b4:	3d08      	subs	r5, #8
 800b8b6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d0f8      	beq.n	800b8b0 <__kernel_rem_pio2f+0x1d8>
 800b8be:	4628      	mov	r0, r5
 800b8c0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800b8c4:	f7ff fea2 	bl	800b60c <scalbnf>
 800b8c8:	1c63      	adds	r3, r4, #1
 800b8ca:	aa44      	add	r2, sp, #272	@ 0x110
 800b8cc:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800b9cc <__kernel_rem_pio2f+0x2f4>
 800b8d0:	0099      	lsls	r1, r3, #2
 800b8d2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800b8d6:	4623      	mov	r3, r4
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	f280 80a9 	bge.w	800ba30 <__kernel_rem_pio2f+0x358>
 800b8de:	4623      	mov	r3, r4
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	f2c0 80c7 	blt.w	800ba74 <__kernel_rem_pio2f+0x39c>
 800b8e6:	aa44      	add	r2, sp, #272	@ 0x110
 800b8e8:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800b8ec:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 800b9c4 <__kernel_rem_pio2f+0x2ec>
 800b8f0:	eddf 7a37 	vldr	s15, [pc, #220]	@ 800b9d0 <__kernel_rem_pio2f+0x2f8>
 800b8f4:	2000      	movs	r0, #0
 800b8f6:	1ae2      	subs	r2, r4, r3
 800b8f8:	e0b1      	b.n	800ba5e <__kernel_rem_pio2f+0x386>
 800b8fa:	2602      	movs	r6, #2
 800b8fc:	e78f      	b.n	800b81e <__kernel_rem_pio2f+0x146>
 800b8fe:	f852 1b04 	ldr.w	r1, [r2], #4
 800b902:	b948      	cbnz	r0, 800b918 <__kernel_rem_pio2f+0x240>
 800b904:	b121      	cbz	r1, 800b910 <__kernel_rem_pio2f+0x238>
 800b906:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800b90a:	f842 1c04 	str.w	r1, [r2, #-4]
 800b90e:	2101      	movs	r1, #1
 800b910:	f10e 0e01 	add.w	lr, lr, #1
 800b914:	4608      	mov	r0, r1
 800b916:	e787      	b.n	800b828 <__kernel_rem_pio2f+0x150>
 800b918:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 800b91c:	e7f5      	b.n	800b90a <__kernel_rem_pio2f+0x232>
 800b91e:	f104 3cff 	add.w	ip, r4, #4294967295
 800b922:	aa08      	add	r2, sp, #32
 800b924:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800b928:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800b92c:	a908      	add	r1, sp, #32
 800b92e:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800b932:	e781      	b.n	800b838 <__kernel_rem_pio2f+0x160>
 800b934:	f104 3cff 	add.w	ip, r4, #4294967295
 800b938:	aa08      	add	r2, sp, #32
 800b93a:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800b93e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800b942:	e7f3      	b.n	800b92c <__kernel_rem_pio2f+0x254>
 800b944:	a908      	add	r1, sp, #32
 800b946:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800b94a:	3801      	subs	r0, #1
 800b94c:	430a      	orrs	r2, r1
 800b94e:	e7ab      	b.n	800b8a8 <__kernel_rem_pio2f+0x1d0>
 800b950:	3201      	adds	r2, #1
 800b952:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800b956:	2e00      	cmp	r6, #0
 800b958:	d0fa      	beq.n	800b950 <__kernel_rem_pio2f+0x278>
 800b95a:	9905      	ldr	r1, [sp, #20]
 800b95c:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800b960:	eb0d 0001 	add.w	r0, sp, r1
 800b964:	18e6      	adds	r6, r4, r3
 800b966:	a91c      	add	r1, sp, #112	@ 0x70
 800b968:	f104 0c01 	add.w	ip, r4, #1
 800b96c:	384c      	subs	r0, #76	@ 0x4c
 800b96e:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800b972:	4422      	add	r2, r4
 800b974:	4562      	cmp	r2, ip
 800b976:	da04      	bge.n	800b982 <__kernel_rem_pio2f+0x2aa>
 800b978:	4614      	mov	r4, r2
 800b97a:	e710      	b.n	800b79e <__kernel_rem_pio2f+0xc6>
 800b97c:	9804      	ldr	r0, [sp, #16]
 800b97e:	2201      	movs	r2, #1
 800b980:	e7e7      	b.n	800b952 <__kernel_rem_pio2f+0x27a>
 800b982:	9903      	ldr	r1, [sp, #12]
 800b984:	f8dd e004 	ldr.w	lr, [sp, #4]
 800b988:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800b98c:	9105      	str	r1, [sp, #20]
 800b98e:	ee07 1a90 	vmov	s15, r1
 800b992:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b996:	2400      	movs	r4, #0
 800b998:	ece6 7a01 	vstmia	r6!, {s15}
 800b99c:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800b9d0 <__kernel_rem_pio2f+0x2f8>
 800b9a0:	46b1      	mov	r9, r6
 800b9a2:	455c      	cmp	r4, fp
 800b9a4:	dd04      	ble.n	800b9b0 <__kernel_rem_pio2f+0x2d8>
 800b9a6:	ece0 7a01 	vstmia	r0!, {s15}
 800b9aa:	f10c 0c01 	add.w	ip, ip, #1
 800b9ae:	e7e1      	b.n	800b974 <__kernel_rem_pio2f+0x29c>
 800b9b0:	ecfe 6a01 	vldmia	lr!, {s13}
 800b9b4:	ed39 7a01 	vldmdb	r9!, {s14}
 800b9b8:	3401      	adds	r4, #1
 800b9ba:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b9be:	e7f0      	b.n	800b9a2 <__kernel_rem_pio2f+0x2ca>
 800b9c0:	0800c0dc 	.word	0x0800c0dc
 800b9c4:	0800c0b0 	.word	0x0800c0b0
 800b9c8:	43800000 	.word	0x43800000
 800b9cc:	3b800000 	.word	0x3b800000
 800b9d0:	00000000 	.word	0x00000000
 800b9d4:	9b02      	ldr	r3, [sp, #8]
 800b9d6:	eeb0 0a48 	vmov.f32	s0, s16
 800b9da:	eba3 0008 	sub.w	r0, r3, r8
 800b9de:	f7ff fe15 	bl	800b60c <scalbnf>
 800b9e2:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800b9c8 <__kernel_rem_pio2f+0x2f0>
 800b9e6:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800b9ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9ee:	db19      	blt.n	800ba24 <__kernel_rem_pio2f+0x34c>
 800b9f0:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800b9cc <__kernel_rem_pio2f+0x2f4>
 800b9f4:	ee60 7a27 	vmul.f32	s15, s0, s15
 800b9f8:	aa08      	add	r2, sp, #32
 800b9fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b9fe:	3508      	adds	r5, #8
 800ba00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ba04:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800ba08:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ba0c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800ba10:	ee10 3a10 	vmov	r3, s0
 800ba14:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800ba18:	ee17 3a90 	vmov	r3, s15
 800ba1c:	3401      	adds	r4, #1
 800ba1e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800ba22:	e74c      	b.n	800b8be <__kernel_rem_pio2f+0x1e6>
 800ba24:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800ba28:	aa08      	add	r2, sp, #32
 800ba2a:	ee10 3a10 	vmov	r3, s0
 800ba2e:	e7f6      	b.n	800ba1e <__kernel_rem_pio2f+0x346>
 800ba30:	a808      	add	r0, sp, #32
 800ba32:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800ba36:	9001      	str	r0, [sp, #4]
 800ba38:	ee07 0a90 	vmov	s15, r0
 800ba3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ba40:	3b01      	subs	r3, #1
 800ba42:	ee67 7a80 	vmul.f32	s15, s15, s0
 800ba46:	ee20 0a07 	vmul.f32	s0, s0, s14
 800ba4a:	ed62 7a01 	vstmdb	r2!, {s15}
 800ba4e:	e743      	b.n	800b8d8 <__kernel_rem_pio2f+0x200>
 800ba50:	ecfc 6a01 	vldmia	ip!, {s13}
 800ba54:	ecb5 7a01 	vldmia	r5!, {s14}
 800ba58:	eee6 7a87 	vfma.f32	s15, s13, s14
 800ba5c:	3001      	adds	r0, #1
 800ba5e:	4550      	cmp	r0, sl
 800ba60:	dc01      	bgt.n	800ba66 <__kernel_rem_pio2f+0x38e>
 800ba62:	4290      	cmp	r0, r2
 800ba64:	ddf4      	ble.n	800ba50 <__kernel_rem_pio2f+0x378>
 800ba66:	a858      	add	r0, sp, #352	@ 0x160
 800ba68:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800ba6c:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800ba70:	3b01      	subs	r3, #1
 800ba72:	e735      	b.n	800b8e0 <__kernel_rem_pio2f+0x208>
 800ba74:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800ba76:	2b02      	cmp	r3, #2
 800ba78:	dc09      	bgt.n	800ba8e <__kernel_rem_pio2f+0x3b6>
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	dc27      	bgt.n	800bace <__kernel_rem_pio2f+0x3f6>
 800ba7e:	d040      	beq.n	800bb02 <__kernel_rem_pio2f+0x42a>
 800ba80:	f009 0007 	and.w	r0, r9, #7
 800ba84:	b059      	add	sp, #356	@ 0x164
 800ba86:	ecbd 8b04 	vpop	{d8-d9}
 800ba8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba8e:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800ba90:	2b03      	cmp	r3, #3
 800ba92:	d1f5      	bne.n	800ba80 <__kernel_rem_pio2f+0x3a8>
 800ba94:	aa30      	add	r2, sp, #192	@ 0xc0
 800ba96:	1f0b      	subs	r3, r1, #4
 800ba98:	4413      	add	r3, r2
 800ba9a:	461a      	mov	r2, r3
 800ba9c:	4620      	mov	r0, r4
 800ba9e:	2800      	cmp	r0, #0
 800baa0:	dc50      	bgt.n	800bb44 <__kernel_rem_pio2f+0x46c>
 800baa2:	4622      	mov	r2, r4
 800baa4:	2a01      	cmp	r2, #1
 800baa6:	dc5d      	bgt.n	800bb64 <__kernel_rem_pio2f+0x48c>
 800baa8:	ab30      	add	r3, sp, #192	@ 0xc0
 800baaa:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 800b9d0 <__kernel_rem_pio2f+0x2f8>
 800baae:	440b      	add	r3, r1
 800bab0:	2c01      	cmp	r4, #1
 800bab2:	dc67      	bgt.n	800bb84 <__kernel_rem_pio2f+0x4ac>
 800bab4:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800bab8:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800babc:	2e00      	cmp	r6, #0
 800babe:	d167      	bne.n	800bb90 <__kernel_rem_pio2f+0x4b8>
 800bac0:	edc7 6a00 	vstr	s13, [r7]
 800bac4:	ed87 7a01 	vstr	s14, [r7, #4]
 800bac8:	edc7 7a02 	vstr	s15, [r7, #8]
 800bacc:	e7d8      	b.n	800ba80 <__kernel_rem_pio2f+0x3a8>
 800bace:	ab30      	add	r3, sp, #192	@ 0xc0
 800bad0:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 800b9d0 <__kernel_rem_pio2f+0x2f8>
 800bad4:	440b      	add	r3, r1
 800bad6:	4622      	mov	r2, r4
 800bad8:	2a00      	cmp	r2, #0
 800bada:	da24      	bge.n	800bb26 <__kernel_rem_pio2f+0x44e>
 800badc:	b34e      	cbz	r6, 800bb32 <__kernel_rem_pio2f+0x45a>
 800bade:	eef1 7a47 	vneg.f32	s15, s14
 800bae2:	edc7 7a00 	vstr	s15, [r7]
 800bae6:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800baea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800baee:	aa31      	add	r2, sp, #196	@ 0xc4
 800baf0:	2301      	movs	r3, #1
 800baf2:	429c      	cmp	r4, r3
 800baf4:	da20      	bge.n	800bb38 <__kernel_rem_pio2f+0x460>
 800baf6:	b10e      	cbz	r6, 800bafc <__kernel_rem_pio2f+0x424>
 800baf8:	eef1 7a67 	vneg.f32	s15, s15
 800bafc:	edc7 7a01 	vstr	s15, [r7, #4]
 800bb00:	e7be      	b.n	800ba80 <__kernel_rem_pio2f+0x3a8>
 800bb02:	ab30      	add	r3, sp, #192	@ 0xc0
 800bb04:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 800b9d0 <__kernel_rem_pio2f+0x2f8>
 800bb08:	440b      	add	r3, r1
 800bb0a:	2c00      	cmp	r4, #0
 800bb0c:	da05      	bge.n	800bb1a <__kernel_rem_pio2f+0x442>
 800bb0e:	b10e      	cbz	r6, 800bb14 <__kernel_rem_pio2f+0x43c>
 800bb10:	eef1 7a67 	vneg.f32	s15, s15
 800bb14:	edc7 7a00 	vstr	s15, [r7]
 800bb18:	e7b2      	b.n	800ba80 <__kernel_rem_pio2f+0x3a8>
 800bb1a:	ed33 7a01 	vldmdb	r3!, {s14}
 800bb1e:	3c01      	subs	r4, #1
 800bb20:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bb24:	e7f1      	b.n	800bb0a <__kernel_rem_pio2f+0x432>
 800bb26:	ed73 7a01 	vldmdb	r3!, {s15}
 800bb2a:	3a01      	subs	r2, #1
 800bb2c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bb30:	e7d2      	b.n	800bad8 <__kernel_rem_pio2f+0x400>
 800bb32:	eef0 7a47 	vmov.f32	s15, s14
 800bb36:	e7d4      	b.n	800bae2 <__kernel_rem_pio2f+0x40a>
 800bb38:	ecb2 7a01 	vldmia	r2!, {s14}
 800bb3c:	3301      	adds	r3, #1
 800bb3e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bb42:	e7d6      	b.n	800baf2 <__kernel_rem_pio2f+0x41a>
 800bb44:	ed72 7a01 	vldmdb	r2!, {s15}
 800bb48:	edd2 6a01 	vldr	s13, [r2, #4]
 800bb4c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800bb50:	3801      	subs	r0, #1
 800bb52:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bb56:	ed82 7a00 	vstr	s14, [r2]
 800bb5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb5e:	edc2 7a01 	vstr	s15, [r2, #4]
 800bb62:	e79c      	b.n	800ba9e <__kernel_rem_pio2f+0x3c6>
 800bb64:	ed73 7a01 	vldmdb	r3!, {s15}
 800bb68:	edd3 6a01 	vldr	s13, [r3, #4]
 800bb6c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800bb70:	3a01      	subs	r2, #1
 800bb72:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bb76:	ed83 7a00 	vstr	s14, [r3]
 800bb7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb7e:	edc3 7a01 	vstr	s15, [r3, #4]
 800bb82:	e78f      	b.n	800baa4 <__kernel_rem_pio2f+0x3cc>
 800bb84:	ed33 7a01 	vldmdb	r3!, {s14}
 800bb88:	3c01      	subs	r4, #1
 800bb8a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bb8e:	e78f      	b.n	800bab0 <__kernel_rem_pio2f+0x3d8>
 800bb90:	eef1 6a66 	vneg.f32	s13, s13
 800bb94:	eeb1 7a47 	vneg.f32	s14, s14
 800bb98:	edc7 6a00 	vstr	s13, [r7]
 800bb9c:	ed87 7a01 	vstr	s14, [r7, #4]
 800bba0:	eef1 7a67 	vneg.f32	s15, s15
 800bba4:	e790      	b.n	800bac8 <__kernel_rem_pio2f+0x3f0>
 800bba6:	bf00      	nop

0800bba8 <floorf>:
 800bba8:	ee10 3a10 	vmov	r3, s0
 800bbac:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800bbb0:	3a7f      	subs	r2, #127	@ 0x7f
 800bbb2:	2a16      	cmp	r2, #22
 800bbb4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800bbb8:	dc2b      	bgt.n	800bc12 <floorf+0x6a>
 800bbba:	2a00      	cmp	r2, #0
 800bbbc:	da12      	bge.n	800bbe4 <floorf+0x3c>
 800bbbe:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800bc24 <floorf+0x7c>
 800bbc2:	ee30 0a27 	vadd.f32	s0, s0, s15
 800bbc6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800bbca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbce:	dd06      	ble.n	800bbde <floorf+0x36>
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	da24      	bge.n	800bc1e <floorf+0x76>
 800bbd4:	2900      	cmp	r1, #0
 800bbd6:	4b14      	ldr	r3, [pc, #80]	@ (800bc28 <floorf+0x80>)
 800bbd8:	bf08      	it	eq
 800bbda:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800bbde:	ee00 3a10 	vmov	s0, r3
 800bbe2:	4770      	bx	lr
 800bbe4:	4911      	ldr	r1, [pc, #68]	@ (800bc2c <floorf+0x84>)
 800bbe6:	4111      	asrs	r1, r2
 800bbe8:	420b      	tst	r3, r1
 800bbea:	d0fa      	beq.n	800bbe2 <floorf+0x3a>
 800bbec:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800bc24 <floorf+0x7c>
 800bbf0:	ee30 0a27 	vadd.f32	s0, s0, s15
 800bbf4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800bbf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbfc:	ddef      	ble.n	800bbde <floorf+0x36>
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	bfbe      	ittt	lt
 800bc02:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800bc06:	fa40 f202 	asrlt.w	r2, r0, r2
 800bc0a:	189b      	addlt	r3, r3, r2
 800bc0c:	ea23 0301 	bic.w	r3, r3, r1
 800bc10:	e7e5      	b.n	800bbde <floorf+0x36>
 800bc12:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800bc16:	d3e4      	bcc.n	800bbe2 <floorf+0x3a>
 800bc18:	ee30 0a00 	vadd.f32	s0, s0, s0
 800bc1c:	4770      	bx	lr
 800bc1e:	2300      	movs	r3, #0
 800bc20:	e7dd      	b.n	800bbde <floorf+0x36>
 800bc22:	bf00      	nop
 800bc24:	7149f2ca 	.word	0x7149f2ca
 800bc28:	bf800000 	.word	0xbf800000
 800bc2c:	007fffff 	.word	0x007fffff

0800bc30 <_init>:
 800bc30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc32:	bf00      	nop
 800bc34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc36:	bc08      	pop	{r3}
 800bc38:	469e      	mov	lr, r3
 800bc3a:	4770      	bx	lr

0800bc3c <_fini>:
 800bc3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc3e:	bf00      	nop
 800bc40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc42:	bc08      	pop	{r3}
 800bc44:	469e      	mov	lr, r3
 800bc46:	4770      	bx	lr
